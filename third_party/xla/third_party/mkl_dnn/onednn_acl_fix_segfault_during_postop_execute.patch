/* Copyright 2024 The OpenXLA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

diff --git a/src/cpu/aarch64/acl_post_ops.cpp b/src/cpu/aarch64/acl_post_ops.cpp
index ea4bb200ec..3eb53b81bd 100644
--- a/src/cpu/aarch64/acl_post_ops.cpp
+++ b/src/cpu/aarch64/acl_post_ops.cpp
@@ -24,7 +24,7 @@ namespace aarch64 {
 
 status_t acl_post_ops_t::execute(const exec_ctx_t &ctx, void *src_orig) const {
 
-    int post_op_index = 0;
+    int post_op_index = post_op_start_index_;
 
     // As these are post ops, this src will also be our dst. If we have a sum
     // post op, the src/dst will start off in a temporary, then change to
diff --git a/src/cpu/aarch64/acl_post_ops.hpp b/src/cpu/aarch64/acl_post_ops.hpp
index 7b59ad71d3..ceaa95b73a 100644
--- a/src/cpu/aarch64/acl_post_ops.hpp
+++ b/src/cpu/aarch64/acl_post_ops.hpp
@@ -32,7 +32,9 @@ struct acl_post_ops_t {
     // init the acl_post_ops_t. Note that this function modifies the passed in
     // post ops by setting the preferred memory formats
     status_t init(engine_t *engine, post_ops_t &post_ops,
-            const memory_desc_t &dst_md) {
+            const memory_desc_t &dst_md, int post_op_start_index = 0) {
+
+        post_op_start_index_ = post_op_start_index;
 
         CHECK(post_ops.set_default_formats(&dst_md));
         dst_data_type = dst_md.data_type;
@@ -41,7 +43,7 @@ struct acl_post_ops_t {
         sum_index = -1;
         post_op_primitives = {};
 
-        for (int i = 0; i < post_ops.len(); i++) {
+        for (int i = post_op_start_index; i < post_ops.len(); i++) {
             auto &po = post_ops.entry_[i];
 
             if (po.is_sum()) {
@@ -135,7 +137,8 @@ struct acl_post_ops_t {
     // formats
     status_t init(engine_t *engine, post_ops_t &base_post_ops,
             const memory_desc_t &dst_md,
-            arm_compute::ActivationLayerInfo &act_info_to_fuse) {
+            arm_compute::ActivationLayerInfo &act_info_to_fuse,
+            int post_op_start_index = 0) {
 
         CHECK(base_post_ops.set_default_formats(&dst_md));
         dst_data_type = dst_md.data_type;
@@ -149,18 +152,11 @@ struct acl_post_ops_t {
                     "eltwise post op scale must be 1 (no scale)");
             CHECK(acl_utils::convert_to_acl_act(first_po, act_info_to_fuse));
 
-            // Copy all but the first, because it has been fused
-            post_ops_t post_ops;
-            for (int idx = 1; idx < base_post_ops.len(); ++idx) {
-                // Construct empty entry then copy, so that we can check for failure
-                post_ops.entry_.emplace_back();
-                post_ops.entry_.back().copy_from(base_post_ops.entry_[idx]);
-            }
-            return init(engine, post_ops, dst_md);
-
+             // post_op_start_index + 1 to skip the fused eltwise
+              return init(engine, base_post_ops, dst_md, post_op_start_index + 1);
         } else {
             // Nothing to fuse, just copy all post ops
-            return init(engine, base_post_ops, dst_md);
+            return init(engine, base_post_ops, dst_md, post_op_start_index);
         }
     }
 
@@ -179,6 +175,9 @@ struct acl_post_ops_t {
 private:
     // Index of the sum post op if there is one, < 0 means no sum
     int sum_index = -1;
+    // Index of the first post op this primitive executes. This is typically the
+    // number of post ops which were fused.
+    int post_op_start_index_ = 0;
     data_type_t dst_data_type;
     // Vector of primitives used to execute the post ops. They are constructed
     // in init to be either acl_binary_t (for sum, add, sub, div, mul, min and
-- 
2.34.1
