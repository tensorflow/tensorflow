TODO: b/391620138 - Upstream once we manage to get a good reproducer.

This should prevent a crash due to a race condition for now.

diff --git a/lib/Dialect/TritonNvidiaGPU/Transforms/FenceInsertion.cpp b/lib/Dialect/TritonNvidiaGPU/Transforms/FenceInsertion.cpp
--- a/lib/Dialect/TritonNvidiaGPU/Transforms/FenceInsertion.cpp
+++ b/lib/Dialect/TritonNvidiaGPU/Transforms/FenceInsertion.cpp
@@ -43,6 +43,7 @@ public:
     if (::triton::tools::getBoolEnv("DISABLE_MMA_V3"))
       return;
     ModuleOp mod = getOperation();
+    DenseSet<std::pair<Operation *, unsigned>> trace;
     mod.walk([&](Operation *op) {
       if (!isa<ttng::WarpGroupDotOp>(op) &&
           op->getName().getStringRef() != "triton_xla.sparse_dot")
@@ -54,8 +55,8 @@ public:
           cast<RankedTensorType>(op->getResult(0).getType()).getEncoding());
       if (!mmaEncoding || !mmaEncoding.isHopper())
         return WalkResult::advance();
-      bool aDependsOnShared = dependOnSharedEncOperand(a);
-      bool bDependsOnShared = dependOnSharedEncOperand(b);
+      bool aDependsOnShared = dependOnSharedEncOperand(a, trace);
+      bool bDependsOnShared = dependOnSharedEncOperand(b, trace);
       if (!aDependsOnShared && !bDependsOnShared)
         return WalkResult::advance();
       Operation *fence = builder.create<ttng::FenceAsyncSharedOp>(
@@ -76,8 +77,7 @@ public:
   }
 
 private:
-  bool dependOnSharedEncOperand(Value operand) {
-    static DenseSet<std::pair<Operation *, unsigned>> trace;
+  bool dependOnSharedEncOperand(Value operand, DenseSet<std::pair<Operation *, unsigned>> &trace) {
     auto op = operand.getDefiningOp();
     // avoid redundant insertion
     if (op && op->hasTrait<OpTrait::DotLike>())
@@ -92,7 +92,7 @@ private:
     // op and not BlockArgument
     if (op && !isa<BlockArgument>(operand)) {
       for (auto v : op->getOperands()) {
-        if (dependOnSharedEncOperand(v))
+        if (dependOnSharedEncOperand(v, trace))
           return true;
       }
     }
@@ -107,7 +107,7 @@ private:
         auto iterOperands = forOp.getInitArgs();
         if (argNum == 0)
           return false;
-        if (dependOnSharedEncOperand(iterOperands[argNum - 1]))
+        if (dependOnSharedEncOperand(iterOperands[argNum - 1], trace))
           return true;
         // yield
         auto yieldOp = forOp.getBody()->getTerminator();
@@ -120,7 +120,7 @@ private:
         else
           trace.insert(entry);
 
-        if (dependOnSharedEncOperand(v))
+        if (dependOnSharedEncOperand(v, trace))
           return true;
       } else if (auto whileOp = dyn_cast<scf::WhileOp>(argOwner)) {
         assert(false && "FenceInsertionPass does not supported WhileOp");
