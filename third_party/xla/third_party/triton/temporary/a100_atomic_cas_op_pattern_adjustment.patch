b/433429549: We add another pattern for the atomic.cas op on Ampere and prior. This is
because we are moving to a new pattern for this op in the next mlir integration.

diff --git a/python/test/unit/language/test_core.py b/python/test/unit/language/test_core.py
--- a/python/test/unit/language/test_core.py
+++ b/python/test/unit/language/test_core.py
@@ -1607,7 +1607,10 @@ def test_atomic_rmw(op, dtype_x_str, mod
     # atom.add.bf16 is unsupported prior to Hopper so instead we generate an
     # atom.cas add loop on Ampere and prior
     if dst_type == 'bfloat16' and torch.cuda.get_device_capability()[0] < 9:
-        assert f"atom.{sem_str}.global.cas" in h.asm["ptx"]
+        # TODO(b/433429549): Remove this once we have the new mlir.
+        current_pattern = f"atom.{sem_str}.global.cas"
+        new_pattern = f"atom.{sem_str}.gpu.global.cas"
+        assert (current_pattern in h.asm["ptx"] or new_pattern in h.asm["ptx"])
         return
 
     assert f"atom.global.gpu.{sem_str}" in h.asm["ptx"]
