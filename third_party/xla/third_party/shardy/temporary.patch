diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 7f5123e..4505db7 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,4 +1,1575 @@
 Auto generated patch. Do not edit or delete it, even if empty.
+diff -ruN --strip-trailing-cr a/clang/include/clang/AST/TypeLoc.h b/clang/include/clang/AST/TypeLoc.h
+--- a/clang/include/clang/AST/TypeLoc.h
++++ b/clang/include/clang/AST/TypeLoc.h
+@@ -2519,6 +2519,15 @@
+     getLocalData()->QualifierData = QualifierLoc.getOpaqueData();
+   }
+ 
++  SourceRange getLocalSourceRange() const {
++    SourceLocation BeginLoc = getElaboratedKeywordLoc();
++    if (BeginLoc.isInvalid())
++      BeginLoc = getQualifierLoc().getBeginLoc();
++    if (BeginLoc.isInvalid())
++      BeginLoc = getNameLoc();
++    return {BeginLoc, getNameLoc()};
++  }
++
+   void initializeLocal(ASTContext &Context, SourceLocation Loc);
+ };
+ 
+diff -ruN --strip-trailing-cr a/clang/include/clang/ASTMatchers/ASTMatchers.h b/clang/include/clang/ASTMatchers/ASTMatchers.h
+--- a/clang/include/clang/ASTMatchers/ASTMatchers.h
++++ b/clang/include/clang/ASTMatchers/ASTMatchers.h
+@@ -5739,6 +5739,14 @@
+   return Builder->removeBindings(Predicate);
+ }
+ 
++/// Matches a declaration if it declares the same entity as the node previously
++/// bound to \p ID.
++AST_MATCHER_P(Decl, declaresSameEntityAsBoundNode, std::string, ID) {
++  return Builder->removeBindings([&](const internal::BoundNodesMap &Nodes) {
++    return !clang::declaresSameEntity(&Node, Nodes.getNodeAs<Decl>(ID));
++  });
++}
++
+ /// Matches the condition variable statement in an if statement.
+ ///
+ /// Given
+diff -ruN --strip-trailing-cr a/clang/lib/AST/Decl.cpp b/clang/lib/AST/Decl.cpp
+--- a/clang/lib/AST/Decl.cpp
++++ b/clang/lib/AST/Decl.cpp
+@@ -1604,17 +1604,20 @@
+   // We have just computed the linkage for this decl. By induction we know
+   // that all other computed linkages match, check that the one we just
+   // computed also does.
+-  NamedDecl *Old = nullptr;
+-  for (auto *I : D->redecls()) {
+-    auto *T = cast<NamedDecl>(I);
+-    if (T == D)
++  // We can't assume the redecl chain is well formed at this point,
++  // so keep track of already visited declarations.
++  for (llvm::SmallPtrSet<const Decl *, 4> AlreadyVisited{D}; /**/; /**/) {
++    D = cast<NamedDecl>(const_cast<NamedDecl *>(D)->getNextRedeclarationImpl());
++    if (!AlreadyVisited.insert(D).second)
++      break;
++    if (D->isInvalidDecl())
+       continue;
+-    if (!T->isInvalidDecl() && T->hasCachedLinkage()) {
+-      Old = T;
++    if (auto OldLinkage = D->getCachedLinkage();
++        OldLinkage != Linkage::Invalid) {
++      assert(LV.getLinkage() == OldLinkage);
+       break;
+     }
+   }
+-  assert(!Old || Old->getCachedLinkage() == D->getCachedLinkage());
+ #endif
+ 
+   return LV;
+diff -ruN --strip-trailing-cr a/clang/lib/ASTMatchers/Dynamic/Registry.cpp b/clang/lib/ASTMatchers/Dynamic/Registry.cpp
+--- a/clang/lib/ASTMatchers/Dynamic/Registry.cpp
++++ b/clang/lib/ASTMatchers/Dynamic/Registry.cpp
+@@ -240,6 +240,7 @@
+   REGISTER_MATCHER(enumDecl);
+   REGISTER_MATCHER(enumType);
+   REGISTER_MATCHER(equalsBoundNode);
++  REGISTER_MATCHER(declaresSameEntityAsBoundNode);
+   REGISTER_MATCHER(equalsIntegralValue);
+   REGISTER_MATCHER(explicitCastExpr);
+   REGISTER_MATCHER(exportDecl);
+diff -ruN --strip-trailing-cr a/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp b/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp
+--- a/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp
++++ b/clang/lib/Frontend/Rewrite/RewriteModernObjC.cpp
+@@ -852,7 +852,7 @@
+     IvarT = GetGroupRecordTypeForObjCIvarBitfield(D);
+ 
+   if (!IvarT->getAs<TypedefType>() && IvarT->isRecordType()) {
+-    RecordDecl *RD = IvarT->castAs<RecordType>()->getDecl();
++    RecordDecl *RD = IvarT->castAs<RecordType>()->getOriginalDecl();
+     RD = RD->getDefinition();
+     if (RD && !RD->getDeclName().getAsIdentifierInfo()) {
+       // decltype(((Foo_IMPL*)0)->bar) *
+@@ -865,7 +865,8 @@
+       RecordDecl *RD = RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                                           SourceLocation(), SourceLocation(),
+                                           &Context->Idents.get(RecName));
+-      QualType PtrStructIMPL = Context->getPointerType(Context->getTagDeclType(RD));
++      QualType PtrStructIMPL =
++          Context->getPointerType(Context->getCanonicalTagType(RD));
+       unsigned UnsignedIntSize =
+       static_cast<unsigned>(Context->getTypeSize(Context->UnsignedIntTy));
+       Expr *Zero = IntegerLiteral::Create(*Context,
+@@ -2999,7 +3000,7 @@
+ 
+     SuperStructDecl->completeDefinition();
+   }
+-  return Context->getTagDeclType(SuperStructDecl);
++  return Context->getCanonicalTagType(SuperStructDecl);
+ }
+ 
+ QualType RewriteModernObjC::getConstantStringStructType() {
+@@ -3032,7 +3033,7 @@
+ 
+     ConstantStringDecl->completeDefinition();
+   }
+-  return Context->getTagDeclType(ConstantStringDecl);
++  return Context->getCanonicalTagType(ConstantStringDecl);
+ }
+ 
+ /// getFunctionSourceLocation - returns start location of a function
+@@ -3637,7 +3638,8 @@
+     return RewriteObjCFieldDeclType(ElemTy, Result);
+   }
+   else if (Type->isRecordType()) {
+-    RecordDecl *RD = Type->castAs<RecordType>()->getDecl();
++    RecordDecl *RD =
++        Type->castAs<RecordType>()->getOriginalDecl()->getDefinitionOrSelf();
+     if (RD->isCompleteDefinition()) {
+       if (RD->isStruct())
+         Result += "\n\tstruct ";
+@@ -3660,7 +3662,8 @@
+     }
+   }
+   else if (Type->isEnumeralType()) {
+-    EnumDecl *ED = Type->castAs<EnumType>()->getDecl();
++    EnumDecl *ED =
++        Type->castAs<EnumType>()->getOriginalDecl()->getDefinitionOrSelf();
+     if (ED->isCompleteDefinition()) {
+       Result += "\n\tenum ";
+       Result += ED->getName();
+@@ -3732,10 +3735,10 @@
+ 
+   TagDecl *TD = nullptr;
+   if (Type->isRecordType()) {
+-    TD = Type->castAs<RecordType>()->getDecl();
++    TD = Type->castAs<RecordType>()->getOriginalDecl()->getDefinitionOrSelf();
+   }
+   else if (Type->isEnumeralType()) {
+-    TD = Type->castAs<EnumType>()->getDecl();
++    TD = Type->castAs<EnumType>()->getOriginalDecl()->getDefinitionOrSelf();
+   }
+ 
+   if (TD) {
+@@ -3793,7 +3796,7 @@
+                                   false, ICIS_NoInit));
+   }
+   RD->completeDefinition();
+-  return Context->getTagDeclType(RD);
++  return Context->getCanonicalTagType(RD);
+ }
+ 
+ QualType RewriteModernObjC::GetGroupRecordTypeForObjCIvarBitfield(ObjCIvarDecl *IV) {
+@@ -4572,7 +4575,7 @@
+   RecordDecl *RD = RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                                       SourceLocation(), SourceLocation(),
+                                       &Context->Idents.get("__block_impl"));
+-  QualType PtrBlock = Context->getPointerType(Context->getTagDeclType(RD));
++  QualType PtrBlock = Context->getPointerType(Context->getCanonicalTagType(RD));
+ 
+   // Generate a funky cast.
+   SmallVector<QualType, 8> ArgTypes;
+@@ -5316,7 +5319,8 @@
+           RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                              SourceLocation(), SourceLocation(), II);
+       assert(RD && "SynthBlockInitExpr(): Can't find RecordDecl");
+-      QualType castT = Context->getPointerType(Context->getTagDeclType(RD));
++      QualType castT =
++          Context->getPointerType(Context->getCanonicalTagType(RD));
+ 
+       FD = SynthBlockInitFunctionDecl(ND->getName());
+       Exp = new (Context) DeclRefExpr(*Context, FD, false, FD->getType(),
+@@ -5719,7 +5723,10 @@
+           }
+         }
+       } else if (VD->getType()->isRecordType()) {
+-        RecordDecl *RD = VD->getType()->castAs<RecordType>()->getDecl();
++        RecordDecl *RD = VD->getType()
++                             ->castAs<RecordType>()
++                             ->getOriginalDecl()
++                             ->getDefinitionOrSelf();
+         if (RD->isCompleteDefinition())
+           RewriteRecordBody(RD);
+       }
+@@ -7460,7 +7467,7 @@
+         IvarT = GetGroupRecordTypeForObjCIvarBitfield(D);
+ 
+       if (!IvarT->getAs<TypedefType>() && IvarT->isRecordType()) {
+-        RecordDecl *RD = IvarT->castAs<RecordType>()->getDecl();
++        RecordDecl *RD = IvarT->castAs<RecordType>()->getOriginalDecl();
+         RD = RD->getDefinition();
+         if (RD && !RD->getDeclName().getAsIdentifierInfo()) {
+           // decltype(((Foo_IMPL*)0)->bar) *
+@@ -7473,7 +7480,8 @@
+           RecordDecl *RD = RecordDecl::Create(
+               *Context, TagTypeKind::Struct, TUDecl, SourceLocation(),
+               SourceLocation(), &Context->Idents.get(RecName));
+-          QualType PtrStructIMPL = Context->getPointerType(Context->getTagDeclType(RD));
++          QualType PtrStructIMPL =
++              Context->getPointerType(Context->getCanonicalTagType(RD));
+           unsigned UnsignedIntSize =
+             static_cast<unsigned>(Context->getTypeSize(Context->UnsignedIntTy));
+           Expr *Zero = IntegerLiteral::Create(*Context,
+diff -ruN --strip-trailing-cr a/clang/lib/Frontend/Rewrite/RewriteObjC.cpp b/clang/lib/Frontend/Rewrite/RewriteObjC.cpp
+--- a/clang/lib/Frontend/Rewrite/RewriteObjC.cpp
++++ b/clang/lib/Frontend/Rewrite/RewriteObjC.cpp
+@@ -2358,7 +2358,7 @@
+   RecordDecl *RD = RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                                       SourceLocation(), SourceLocation(),
+                                       &Context->Idents.get("objc_super"));
+-  QualType argT = Context->getPointerType(Context->getTagDeclType(RD));
++  QualType argT = Context->getPointerType(Context->getCanonicalTagType(RD));
+   assert(!argT.isNull() && "Can't build 'struct objc_super *' type");
+   ArgTys.push_back(argT);
+   argT = Context->getObjCSelType();
+@@ -2401,7 +2401,7 @@
+   RecordDecl *RD = RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                                       SourceLocation(), SourceLocation(),
+                                       &Context->Idents.get("objc_super"));
+-  QualType argT = Context->getPointerType(Context->getTagDeclType(RD));
++  QualType argT = Context->getPointerType(Context->getCanonicalTagType(RD));
+   assert(!argT.isNull() && "Can't build 'struct objc_super *' type");
+   ArgTys.push_back(argT);
+   argT = Context->getObjCSelType();
+@@ -2552,7 +2552,7 @@
+ 
+     SuperStructDecl->completeDefinition();
+   }
+-  return Context->getTagDeclType(SuperStructDecl);
++  return Context->getCanonicalTagType(SuperStructDecl);
+ }
+ 
+ QualType RewriteObjC::getConstantStringStructType() {
+@@ -2585,7 +2585,7 @@
+ 
+     ConstantStringDecl->completeDefinition();
+   }
+-  return Context->getTagDeclType(ConstantStringDecl);
++  return Context->getCanonicalTagType(ConstantStringDecl);
+ }
+ 
+ CallExpr *RewriteObjC::SynthMsgSendStretCallExpr(FunctionDecl *MsgSendStretFlavor,
+@@ -3750,7 +3750,7 @@
+   RecordDecl *RD = RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                                       SourceLocation(), SourceLocation(),
+                                       &Context->Idents.get("__block_impl"));
+-  QualType PtrBlock = Context->getPointerType(Context->getTagDeclType(RD));
++  QualType PtrBlock = Context->getPointerType(Context->getCanonicalTagType(RD));
+ 
+   // Generate a funky cast.
+   SmallVector<QualType, 8> ArgTypes;
+@@ -4468,7 +4468,8 @@
+           RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                              SourceLocation(), SourceLocation(), II);
+       assert(RD && "SynthBlockInitExpr(): Can't find RecordDecl");
+-      QualType castT = Context->getPointerType(Context->getTagDeclType(RD));
++      QualType castT =
++          Context->getPointerType(Context->getCanonicalTagType(RD));
+ 
+       FD = SynthBlockInitFunctionDecl((*I)->getName());
+       Exp = new (Context) DeclRefExpr(*Context, FD, false, FD->getType(),
+@@ -4834,7 +4835,10 @@
+           }
+         }
+       } else if (VD->getType()->isRecordType()) {
+-        RecordDecl *RD = VD->getType()->castAs<RecordType>()->getDecl();
++        RecordDecl *RD = VD->getType()
++                             ->castAs<RecordType>()
++                             ->getOriginalDecl()
++                             ->getDefinitionOrSelf();
+         if (RD->isCompleteDefinition())
+           RewriteRecordBody(RD);
+       }
+@@ -5804,7 +5808,8 @@
+           RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                              SourceLocation(), SourceLocation(), II);
+       assert(RD && "RewriteObjCIvarRefExpr(): Can't find RecordDecl");
+-      QualType castT = Context->getPointerType(Context->getTagDeclType(RD));
++      QualType castT =
++          Context->getPointerType(Context->getCanonicalTagType(RD));
+       CastExpr *castExpr = NoTypeInfoCStyleCastExpr(Context, castT,
+                                                     CK_BitCast,
+                                                     IV->getBase());
+@@ -5845,7 +5850,8 @@
+           RecordDecl::Create(*Context, TagTypeKind::Struct, TUDecl,
+                              SourceLocation(), SourceLocation(), II);
+       assert(RD && "RewriteObjCIvarRefExpr(): Can't find RecordDecl");
+-      QualType castT = Context->getPointerType(Context->getTagDeclType(RD));
++      QualType castT =
++          Context->getPointerType(Context->getCanonicalTagType(RD));
+       CastExpr *castExpr = NoTypeInfoCStyleCastExpr(Context, castT,
+                                                     CK_BitCast,
+                                                     IV->getBase());
+diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaDeclCXX.cpp b/clang/lib/Sema/SemaDeclCXX.cpp
+--- a/clang/lib/Sema/SemaDeclCXX.cpp
++++ b/clang/lib/Sema/SemaDeclCXX.cpp
+@@ -1373,10 +1373,13 @@
+         S.BuildReferenceType(T, E.get()->isLValue(), Loc, B->getDeclName());
+     if (RefType.isNull())
+       return true;
+-    auto *RefVD = VarDecl::Create(
+-        S.Context, Src->getDeclContext(), Loc, Loc,
+-        B->getDeclName().getAsIdentifierInfo(), RefType,
+-        S.Context.getTrivialTypeSourceInfo(T, Loc), Src->getStorageClass());
++
++    // Don't give this VarDecl a TypeSourceInfo, since this is a synthesized
++    // entity and this type was never written in source code.
++    auto *RefVD =
++        VarDecl::Create(S.Context, Src->getDeclContext(), Loc, Loc,
++                        B->getDeclName().getAsIdentifierInfo(), RefType,
++                        /*TInfo=*/nullptr, Src->getStorageClass());
+     RefVD->setLexicalDeclContext(Src->getLexicalDeclContext());
+     RefVD->setTSCSpec(Src->getTSCSpec());
+     RefVD->setImplicit();
+@@ -4565,6 +4568,7 @@
+       MarkAnyDeclReferenced(TyD->getLocation(), TyD, /*OdrUse=*/false);
+ 
+       TypeLocBuilder TLB;
++      // FIXME: This is missing building the UsingType for TyD, if any.
+       if (const auto *TD = dyn_cast<TagDecl>(TyD)) {
+         BaseType = Context.getTagType(ElaboratedTypeKeyword::None,
+                                       SS.getScopeRep(), TD, /*OwnsTag=*/false);
+@@ -4578,6 +4582,12 @@
+         TLB.push<TypedefTypeLoc>(BaseType).set(
+             /*ElaboratedKeywordLoc=*/SourceLocation(),
+             SS.getWithLocInContext(Context), IdLoc);
++      } else if (auto *UD = dyn_cast<UnresolvedUsingTypenameDecl>(TyD)) {
++        BaseType = Context.getUnresolvedUsingType(ElaboratedTypeKeyword::None,
++                                                  SS.getScopeRep(), UD);
++        TLB.push<UnresolvedUsingTypeLoc>(BaseType).set(
++            /*ElaboratedKeywordLoc=*/SourceLocation(),
++            SS.getWithLocInContext(Context), IdLoc);
+       } else {
+         // FIXME: What else can appear here?
+         assert(SS.isEmpty());
+diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaTemplateDeduction.cpp b/clang/lib/Sema/SemaTemplateDeduction.cpp
+--- a/clang/lib/Sema/SemaTemplateDeduction.cpp
++++ b/clang/lib/Sema/SemaTemplateDeduction.cpp
+@@ -2911,11 +2911,7 @@
+     case TemplateArgument::TemplateExpansion: {
+       NestedNameSpecifierLocBuilder Builder;
+       TemplateName Template = Arg.getAsTemplateOrTemplatePattern();
+-      if (DependentTemplateName *DTN = Template.getAsDependentTemplateName())
+-        Builder.MakeTrivial(Context, DTN->getQualifier(), Loc);
+-      else if (QualifiedTemplateName *QTN =
+-                   Template.getAsQualifiedTemplateName())
+-        Builder.MakeTrivial(Context, QTN->getQualifier(), Loc);
++      Builder.MakeTrivial(Context, Template.getQualifier(), Loc);
+       return TemplateArgumentLoc(
+           Context, Arg, Loc, Builder.getWithLocInContext(Context), Loc,
+           /*EllipsisLoc=*/Arg.getKind() == TemplateArgument::TemplateExpansion
+diff -ruN --strip-trailing-cr a/clang/lib/Sema/TreeTransform.h b/clang/lib/Sema/TreeTransform.h
+--- a/clang/lib/Sema/TreeTransform.h
++++ b/clang/lib/Sema/TreeTransform.h
+@@ -5417,6 +5417,7 @@
+   case TypeLoc::Typedef:
+   case TypeLoc::TemplateSpecialization:
+   case TypeLoc::SubstTemplateTypeParm:
++  case TypeLoc::SubstTemplateTypeParmPack:
+   case TypeLoc::PackIndexing:
+   case TypeLoc::Enum:
+   case TypeLoc::Record:
+@@ -7668,8 +7669,11 @@
+   } else if (isa<TypedefType>(Result)) {
+     TLB.push<TypedefTypeLoc>(Result).set(TL.getElaboratedKeywordLoc(),
+                                          QualifierLoc, TL.getNameLoc());
++  } else if (isa<UnresolvedUsingType>(Result)) {
++    auto NewTL = TLB.push<UnresolvedUsingTypeLoc>(Result);
++    NewTL.set(TL.getElaboratedKeywordLoc(), QualifierLoc, TL.getNameLoc());
+   } else {
+-    DependentNameTypeLoc NewTL = TLB.push<DependentNameTypeLoc>(Result);
++    auto NewTL = TLB.push<DependentNameTypeLoc>(Result);
+     NewTL.setElaboratedKeywordLoc(TL.getElaboratedKeywordLoc());
+     NewTL.setQualifierLoc(QualifierLoc);
+     NewTL.setNameLoc(TL.getNameLoc());
+diff -ruN --strip-trailing-cr a/clang/test/Analysis/anonymous-decls.cpp b/clang/test/Analysis/anonymous-decls.cpp
+--- a/clang/test/Analysis/anonymous-decls.cpp
++++ b/clang/test/Analysis/anonymous-decls.cpp
+@@ -78,12 +78,12 @@
+ // CHECK-NEXT:   8: decomposition-a-b
+ // CHECK-NEXT:   9: [B3.7]([B3.8])
+ // CHECK-NEXT:  10: [B3.9]
+-// CHECK-NEXT:  11: std::tuple_element<0UL, std::pair<int, int>>::type a = get<0UL>(decomposition-a-b);
++// CHECK-NEXT:  11: std::tuple_element<0UL, std::pair<int, int>>::type &&a = get<0UL>(decomposition-a-b);
+ // CHECK-NEXT:  12: get<1UL>
+ // CHECK-NEXT:  13: [B3.12] (ImplicitCastExpr, FunctionToPointerDecay, tuple_element<1L, pair<int, int> >::type (*)(pair<int, int> &))
+ // CHECK-NEXT:  14: decomposition-a-b
+ // CHECK-NEXT:  15: [B3.13]([B3.14])
+ // CHECK-NEXT:  16: [B3.15]
+-// CHECK-NEXT:  17: std::tuple_element<1UL, std::pair<int, int>>::type b = get<1UL>(decomposition-a-b);
++// CHECK-NEXT:  17: std::tuple_element<1UL, std::pair<int, int>>::type &&b = get<1UL>(decomposition-a-b);
+ // CHECK-NEXT:   Preds (1): B1
+ // CHECK-NEXT:   Succs (1): B2
+diff -ruN --strip-trailing-cr a/clang/test/AST/ast-dump-templates.cpp b/clang/test/AST/ast-dump-templates.cpp
+--- a/clang/test/AST/ast-dump-templates.cpp
++++ b/clang/test/AST/ast-dump-templates.cpp
+@@ -221,6 +221,22 @@
+ // DUMP-NEXT: `-CXXRecordDecl {{.+}} implicit struct Template2
+ } // namespace TestPartialSpecNTTP
+ 
++namespace GH153540 {
++// DUMP-LABEL: NamespaceDecl {{.*}} GH153540{{$}}
++
++  namespace N {
++    template<typename T> struct S { S(T); };
++  }
++  void f() {
++    N::S(0);
++  }
++
++// DUMP:      FunctionDecl {{.*}} f 'void ()'
++// DUMP-NEXT: CompoundStmt
++// DUMP-NEXT: CXXFunctionalCastExpr {{.*}} 'N::S<int>':'GH153540::N::S<int>'
++// DUMP-NEXT: CXXConstructExpr {{.*}} <col:5, col:11> 'N::S<int>':'GH153540::N::S<int>' 'void (int)'
++} // namespace GH153540
++
+ // NOTE: CHECK lines have been autogenerated by gen_ast_dump_json_test.py
+ 
+ 
+@@ -7945,6 +7961,959 @@
+ // JSON-NEXT:       }
+ // JSON-NEXT:      ]
+ // JSON-NEXT:     }
++// JSON-NEXT:    ]
++// JSON-NEXT:   },
++// JSON-NEXT:   {
++// JSON-NEXT:    "id": "0x{{.*}}",
++// JSON-NEXT:    "kind": "NamespaceDecl",
++// JSON-NEXT:    "loc": {
++// JSON-NEXT:     "offset": 9382,
++// JSON-NEXT:     "line": 224,
++// JSON-NEXT:     "col": 11,
++// JSON-NEXT:     "tokLen": 8
++// JSON-NEXT:    },
++// JSON-NEXT:    "range": {
++// JSON-NEXT:     "begin": {
++// JSON-NEXT:      "offset": 9372,
++// JSON-NEXT:      "col": 1,
++// JSON-NEXT:      "tokLen": 9
++// JSON-NEXT:     },
++// JSON-NEXT:     "end": {
++// JSON-NEXT:      "offset": 9791,
++// JSON-NEXT:      "line": 238,
++// JSON-NEXT:      "col": 1,
++// JSON-NEXT:      "tokLen": 1
++// JSON-NEXT:     }
++// JSON-NEXT:    },
++// JSON-NEXT:    "name": "GH153540",
++// JSON-NEXT:    "inner": [
++// JSON-NEXT:     {
++// JSON-NEXT:      "id": "0x{{.*}}",
++// JSON-NEXT:      "kind": "NamespaceDecl",
++// JSON-NEXT:      "loc": {
++// JSON-NEXT:       "offset": 9456,
++// JSON-NEXT:       "line": 227,
++// JSON-NEXT:       "col": 13,
++// JSON-NEXT:       "tokLen": 1
++// JSON-NEXT:      },
++// JSON-NEXT:      "range": {
++// JSON-NEXT:       "begin": {
++// JSON-NEXT:        "offset": 9446,
++// JSON-NEXT:        "col": 3,
++// JSON-NEXT:        "tokLen": 9
++// JSON-NEXT:       },
++// JSON-NEXT:       "end": {
++// JSON-NEXT:        "offset": 9507,
++// JSON-NEXT:        "line": 229,
++// JSON-NEXT:        "col": 3,
++// JSON-NEXT:        "tokLen": 1
++// JSON-NEXT:       }
++// JSON-NEXT:      },
++// JSON-NEXT:      "name": "N",
++// JSON-NEXT:      "inner": [
++// JSON-NEXT:       {
++// JSON-NEXT:        "id": "0x{{.*}}",
++// JSON-NEXT:        "kind": "ClassTemplateDecl",
++// JSON-NEXT:        "loc": {
++// JSON-NEXT:         "offset": 9492,
++// JSON-NEXT:         "line": 228,
++// JSON-NEXT:         "col": 33,
++// JSON-NEXT:         "tokLen": 1
++// JSON-NEXT:        },
++// JSON-NEXT:        "range": {
++// JSON-NEXT:         "begin": {
++// JSON-NEXT:          "offset": 9464,
++// JSON-NEXT:          "col": 5,
++// JSON-NEXT:          "tokLen": 8
++// JSON-NEXT:         },
++// JSON-NEXT:         "end": {
++// JSON-NEXT:          "offset": 9502,
++// JSON-NEXT:          "col": 43,
++// JSON-NEXT:          "tokLen": 1
++// JSON-NEXT:         }
++// JSON-NEXT:        },
++// JSON-NEXT:        "name": "S",
++// JSON-NEXT:        "inner": [
++// JSON-NEXT:         {
++// JSON-NEXT:          "id": "0x{{.*}}",
++// JSON-NEXT:          "kind": "TemplateTypeParmDecl",
++// JSON-NEXT:          "loc": {
++// JSON-NEXT:           "offset": 9482,
++// JSON-NEXT:           "col": 23,
++// JSON-NEXT:           "tokLen": 1
++// JSON-NEXT:          },
++// JSON-NEXT:          "range": {
++// JSON-NEXT:           "begin": {
++// JSON-NEXT:            "offset": 9473,
++// JSON-NEXT:            "col": 14,
++// JSON-NEXT:            "tokLen": 8
++// JSON-NEXT:           },
++// JSON-NEXT:           "end": {
++// JSON-NEXT:            "offset": 9482,
++// JSON-NEXT:            "col": 23,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "isReferenced": true,
++// JSON-NEXT:          "name": "T",
++// JSON-NEXT:          "tagUsed": "typename",
++// JSON-NEXT:          "depth": 0,
++// JSON-NEXT:          "index": 0
++// JSON-NEXT:         },
++// JSON-NEXT:         {
++// JSON-NEXT:          "id": "0x{{.*}}",
++// JSON-NEXT:          "kind": "CXXRecordDecl",
++// JSON-NEXT:          "loc": {
++// JSON-NEXT:           "offset": 9492,
++// JSON-NEXT:           "col": 33,
++// JSON-NEXT:           "tokLen": 1
++// JSON-NEXT:          },
++// JSON-NEXT:          "range": {
++// JSON-NEXT:           "begin": {
++// JSON-NEXT:            "offset": 9485,
++// JSON-NEXT:            "col": 26,
++// JSON-NEXT:            "tokLen": 6
++// JSON-NEXT:           },
++// JSON-NEXT:           "end": {
++// JSON-NEXT:            "offset": 9502,
++// JSON-NEXT:            "col": 43,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "name": "S",
++// JSON-NEXT:          "tagUsed": "struct",
++// JSON-NEXT:          "completeDefinition": true,
++// JSON-NEXT:          "definitionData": {
++// JSON-NEXT:           "canConstDefaultInit": true,
++// JSON-NEXT:           "copyAssign": {
++// JSON-NEXT:            "hasConstParam": true,
++// JSON-NEXT:            "implicitHasConstParam": true,
++// JSON-NEXT:            "needsImplicit": true,
++// JSON-NEXT:            "simple": true,
++// JSON-NEXT:            "trivial": true
++// JSON-NEXT:           },
++// JSON-NEXT:           "copyCtor": {
++// JSON-NEXT:            "hasConstParam": true,
++// JSON-NEXT:            "implicitHasConstParam": true,
++// JSON-NEXT:            "needsImplicit": true,
++// JSON-NEXT:            "simple": true,
++// JSON-NEXT:            "trivial": true
++// JSON-NEXT:           },
++// JSON-NEXT:           "defaultCtor": {
++// JSON-NEXT:            "defaultedIsConstexpr": true
++// JSON-NEXT:           },
++// JSON-NEXT:           "dtor": {
++// JSON-NEXT:            "irrelevant": true,
++// JSON-NEXT:            "needsImplicit": true,
++// JSON-NEXT:            "simple": true,
++// JSON-NEXT:            "trivial": true
++// JSON-NEXT:           },
++// JSON-NEXT:           "hasUserDeclaredConstructor": true,
++// JSON-NEXT:           "isEmpty": true,
++// JSON-NEXT:           "isStandardLayout": true,
++// JSON-NEXT:           "isTriviallyCopyable": true,
++// JSON-NEXT:           "moveAssign": {
++// JSON-NEXT:            "exists": true,
++// JSON-NEXT:            "needsImplicit": true,
++// JSON-NEXT:            "simple": true,
++// JSON-NEXT:            "trivial": true
++// JSON-NEXT:           },
++// JSON-NEXT:           "moveCtor": {
++// JSON-NEXT:            "exists": true,
++// JSON-NEXT:            "needsImplicit": true,
++// JSON-NEXT:            "simple": true,
++// JSON-NEXT:            "trivial": true
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "inner": [
++// JSON-NEXT:           {
++// JSON-NEXT:            "id": "0x{{.*}}",
++// JSON-NEXT:            "kind": "CXXRecordDecl",
++// JSON-NEXT:            "loc": {
++// JSON-NEXT:             "offset": 9492,
++// JSON-NEXT:             "col": 33,
++// JSON-NEXT:             "tokLen": 1
++// JSON-NEXT:            },
++// JSON-NEXT:            "range": {
++// JSON-NEXT:             "begin": {
++// JSON-NEXT:              "offset": 9485,
++// JSON-NEXT:              "col": 26,
++// JSON-NEXT:              "tokLen": 6
++// JSON-NEXT:             },
++// JSON-NEXT:             "end": {
++// JSON-NEXT:              "offset": 9492,
++// JSON-NEXT:              "col": 33,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             }
++// JSON-NEXT:            },
++// JSON-NEXT:            "isImplicit": true,
++// JSON-NEXT:            "name": "S",
++// JSON-NEXT:            "tagUsed": "struct"
++// JSON-NEXT:           },
++// JSON-NEXT:           {
++// JSON-NEXT:            "id": "0x{{.*}}",
++// JSON-NEXT:            "kind": "CXXConstructorDecl",
++// JSON-NEXT:            "loc": {
++// JSON-NEXT:             "offset": 9496,
++// JSON-NEXT:             "col": 37,
++// JSON-NEXT:             "tokLen": 1
++// JSON-NEXT:            },
++// JSON-NEXT:            "range": {
++// JSON-NEXT:             "begin": {
++// JSON-NEXT:              "offset": 9496,
++// JSON-NEXT:              "col": 37,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             },
++// JSON-NEXT:             "end": {
++// JSON-NEXT:              "offset": 9499,
++// JSON-NEXT:              "col": 40,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             }
++// JSON-NEXT:            },
++// JSON-NEXT:            "name": "GH153540::N::S<T>",
++// JSON-NEXT:            "type": {
++// JSON-NEXT:             "qualType": "void (T)"
++// JSON-NEXT:            },
++// JSON-NEXT:            "inner": [
++// JSON-NEXT:             {
++// JSON-NEXT:              "id": "0x{{.*}}",
++// JSON-NEXT:              "kind": "ParmVarDecl",
++// JSON-NEXT:              "loc": {
++// JSON-NEXT:               "offset": 9499,
++// JSON-NEXT:               "col": 40,
++// JSON-NEXT:               "tokLen": 1
++// JSON-NEXT:              },
++// JSON-NEXT:              "range": {
++// JSON-NEXT:               "begin": {
++// JSON-NEXT:                "offset": 9498,
++// JSON-NEXT:                "col": 39,
++// JSON-NEXT:                "tokLen": 1
++// JSON-NEXT:               },
++// JSON-NEXT:               "end": {
++// JSON-NEXT:                "offset": 9498,
++// JSON-NEXT:                "col": 39,
++// JSON-NEXT:                "tokLen": 1
++// JSON-NEXT:               }
++// JSON-NEXT:              },
++// JSON-NEXT:              "type": {
++// JSON-NEXT:               "qualType": "T"
++// JSON-NEXT:              }
++// JSON-NEXT:             }
++// JSON-NEXT:            ]
++// JSON-NEXT:           }
++// JSON-NEXT:          ]
++// JSON-NEXT:         },
++// JSON-NEXT:         {
++// JSON-NEXT:          "id": "0x{{.*}}",
++// JSON-NEXT:          "kind": "ClassTemplateSpecializationDecl",
++// JSON-NEXT:          "loc": {
++// JSON-NEXT:           "offset": 9492,
++// JSON-NEXT:           "col": 33,
++// JSON-NEXT:           "tokLen": 1
++// JSON-NEXT:          },
++// JSON-NEXT:          "range": {
++// JSON-NEXT:           "begin": {
++// JSON-NEXT:            "offset": 9464,
++// JSON-NEXT:            "col": 5,
++// JSON-NEXT:            "tokLen": 8
++// JSON-NEXT:           },
++// JSON-NEXT:           "end": {
++// JSON-NEXT:            "offset": 9502,
++// JSON-NEXT:            "col": 43,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "name": "S",
++// JSON-NEXT:          "tagUsed": "struct",
++// JSON-NEXT:          "completeDefinition": true,
++// JSON-NEXT:          "definitionData": {
++// JSON-NEXT:           "canConstDefaultInit": true,
++// JSON-NEXT:           "canPassInRegisters": true,
++// JSON-NEXT:           "copyAssign": {
++// JSON-NEXT:            "hasConstParam": true,
++// JSON-NEXT:            "implicitHasConstParam": true,
++// JSON-NEXT:            "needsImplicit": true,
++// JSON-NEXT:            "simple": true,
++// JSON-NEXT:            "trivial": true
++// JSON-NEXT:           },
++// JSON-NEXT:           "copyCtor": {
++// JSON-NEXT:            "hasConstParam": true,
++// JSON-NEXT:            "implicitHasConstParam": true,
++// JSON-NEXT:            "simple": true,
++// JSON-NEXT:            "trivial": true
++// JSON-NEXT:           },
++// JSON-NEXT:           "defaultCtor": {
++// JSON-NEXT:            "defaultedIsConstexpr": true
++// JSON-NEXT:           },
++// JSON-NEXT:           "dtor": {
++// JSON-NEXT:            "irrelevant": true,
++// JSON-NEXT:            "simple": true,
++// JSON-NEXT:            "trivial": true
++// JSON-NEXT:           },
++// JSON-NEXT:           "hasUserDeclaredConstructor": true,
++// JSON-NEXT:           "isEmpty": true,
++// JSON-NEXT:           "isStandardLayout": true,
++// JSON-NEXT:           "isTriviallyCopyable": true,
++// JSON-NEXT:           "moveAssign": {
++// JSON-NEXT:            "exists": true,
++// JSON-NEXT:            "needsImplicit": true,
++// JSON-NEXT:            "simple": true,
++// JSON-NEXT:            "trivial": true
++// JSON-NEXT:           },
++// JSON-NEXT:           "moveCtor": {
++// JSON-NEXT:            "exists": true,
++// JSON-NEXT:            "simple": true,
++// JSON-NEXT:            "trivial": true
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "inner": [
++// JSON-NEXT:           {
++// JSON-NEXT:            "kind": "TemplateArgument",
++// JSON-NEXT:            "type": {
++// JSON-NEXT:             "qualType": "int"
++// JSON-NEXT:            },
++// JSON-NEXT:            "inner": [
++// JSON-NEXT:             {
++// JSON-NEXT:              "id": "0x{{.*}}",
++// JSON-NEXT:              "kind": "BuiltinType",
++// JSON-NEXT:              "type": {
++// JSON-NEXT:               "qualType": "int"
++// JSON-NEXT:              }
++// JSON-NEXT:             }
++// JSON-NEXT:            ]
++// JSON-NEXT:           },
++// JSON-NEXT:           {
++// JSON-NEXT:            "id": "0x{{.*}}",
++// JSON-NEXT:            "kind": "CXXRecordDecl",
++// JSON-NEXT:            "loc": {
++// JSON-NEXT:             "offset": 9492,
++// JSON-NEXT:             "col": 33,
++// JSON-NEXT:             "tokLen": 1
++// JSON-NEXT:            },
++// JSON-NEXT:            "range": {
++// JSON-NEXT:             "begin": {
++// JSON-NEXT:              "offset": 9485,
++// JSON-NEXT:              "col": 26,
++// JSON-NEXT:              "tokLen": 6
++// JSON-NEXT:             },
++// JSON-NEXT:             "end": {
++// JSON-NEXT:              "offset": 9492,
++// JSON-NEXT:              "col": 33,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             }
++// JSON-NEXT:            },
++// JSON-NEXT:            "isImplicit": true,
++// JSON-NEXT:            "name": "S",
++// JSON-NEXT:            "tagUsed": "struct"
++// JSON-NEXT:           },
++// JSON-NEXT:           {
++// JSON-NEXT:            "id": "0x{{.*}}",
++// JSON-NEXT:            "kind": "CXXConstructorDecl",
++// JSON-NEXT:            "loc": {
++// JSON-NEXT:             "offset": 9496,
++// JSON-NEXT:             "col": 37,
++// JSON-NEXT:             "tokLen": 1
++// JSON-NEXT:            },
++// JSON-NEXT:            "range": {
++// JSON-NEXT:             "begin": {
++// JSON-NEXT:              "offset": 9496,
++// JSON-NEXT:              "col": 37,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             },
++// JSON-NEXT:             "end": {
++// JSON-NEXT:              "offset": 9499,
++// JSON-NEXT:              "col": 40,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             }
++// JSON-NEXT:            },
++// JSON-NEXT:            "isUsed": true,
++// JSON-NEXT:            "name": "S",
++// JSON-NEXT:            "mangledName": "_ZN8GH1535401N1SIiEC1Ei",
++// JSON-NEXT:            "type": {
++// JSON-NEXT:             "qualType": "void (int)"
++// JSON-NEXT:            },
++// JSON-NEXT:            "inner": [
++// JSON-NEXT:             {
++// JSON-NEXT:              "id": "0x{{.*}}",
++// JSON-NEXT:              "kind": "ParmVarDecl",
++// JSON-NEXT:              "loc": {
++// JSON-NEXT:               "offset": 9499,
++// JSON-NEXT:               "col": 40,
++// JSON-NEXT:               "tokLen": 1
++// JSON-NEXT:              },
++// JSON-NEXT:              "range": {
++// JSON-NEXT:               "begin": {
++// JSON-NEXT:                "offset": 9498,
++// JSON-NEXT:                "col": 39,
++// JSON-NEXT:                "tokLen": 1
++// JSON-NEXT:               },
++// JSON-NEXT:               "end": {
++// JSON-NEXT:                "offset": 9498,
++// JSON-NEXT:                "col": 39,
++// JSON-NEXT:                "tokLen": 1
++// JSON-NEXT:               }
++// JSON-NEXT:              },
++// JSON-NEXT:              "type": {
++// JSON-NEXT:               "qualType": "int"
++// JSON-NEXT:              }
++// JSON-NEXT:             }
++// JSON-NEXT:            ]
++// JSON-NEXT:           },
++// JSON-NEXT:           {
++// JSON-NEXT:            "id": "0x{{.*}}",
++// JSON-NEXT:            "kind": "CXXConstructorDecl",
++// JSON-NEXT:            "loc": {
++// JSON-NEXT:             "offset": 9492,
++// JSON-NEXT:             "col": 33,
++// JSON-NEXT:             "tokLen": 1
++// JSON-NEXT:            },
++// JSON-NEXT:            "range": {
++// JSON-NEXT:             "begin": {
++// JSON-NEXT:              "offset": 9492,
++// JSON-NEXT:              "col": 33,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             },
++// JSON-NEXT:             "end": {
++// JSON-NEXT:              "offset": 9492,
++// JSON-NEXT:              "col": 33,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             }
++// JSON-NEXT:            },
++// JSON-NEXT:            "isImplicit": true,
++// JSON-NEXT:            "name": "S",
++// JSON-NEXT:            "mangledName": "_ZN8GH1535401N1SIiEC1ERKS2_",
++// JSON-NEXT:            "type": {
++// JSON-NEXT:             "qualType": "void (const S<int> &)"
++// JSON-NEXT:            },
++// JSON-NEXT:            "inline": true,
++// JSON-NEXT:            "constexpr": true,
++// JSON-NEXT:            "explicitlyDefaulted": "default",
++// JSON-NEXT:            "inner": [
++// JSON-NEXT:             {
++// JSON-NEXT:              "id": "0x{{.*}}",
++// JSON-NEXT:              "kind": "ParmVarDecl",
++// JSON-NEXT:              "loc": {
++// JSON-NEXT:               "offset": 9492,
++// JSON-NEXT:               "col": 33,
++// JSON-NEXT:               "tokLen": 1
++// JSON-NEXT:              },
++// JSON-NEXT:              "range": {
++// JSON-NEXT:               "begin": {
++// JSON-NEXT:                "offset": 9492,
++// JSON-NEXT:                "col": 33,
++// JSON-NEXT:                "tokLen": 1
++// JSON-NEXT:               },
++// JSON-NEXT:               "end": {
++// JSON-NEXT:                "offset": 9492,
++// JSON-NEXT:                "col": 33,
++// JSON-NEXT:                "tokLen": 1
++// JSON-NEXT:               }
++// JSON-NEXT:              },
++// JSON-NEXT:              "type": {
++// JSON-NEXT:               "qualType": "const S<int> &"
++// JSON-NEXT:              }
++// JSON-NEXT:             }
++// JSON-NEXT:            ]
++// JSON-NEXT:           },
++// JSON-NEXT:           {
++// JSON-NEXT:            "id": "0x{{.*}}",
++// JSON-NEXT:            "kind": "CXXConstructorDecl",
++// JSON-NEXT:            "loc": {
++// JSON-NEXT:             "offset": 9492,
++// JSON-NEXT:             "col": 33,
++// JSON-NEXT:             "tokLen": 1
++// JSON-NEXT:            },
++// JSON-NEXT:            "range": {
++// JSON-NEXT:             "begin": {
++// JSON-NEXT:              "offset": 9492,
++// JSON-NEXT:              "col": 33,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             },
++// JSON-NEXT:             "end": {
++// JSON-NEXT:              "offset": 9492,
++// JSON-NEXT:              "col": 33,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             }
++// JSON-NEXT:            },
++// JSON-NEXT:            "isImplicit": true,
++// JSON-NEXT:            "name": "S",
++// JSON-NEXT:            "mangledName": "_ZN8GH1535401N1SIiEC1EOS2_",
++// JSON-NEXT:            "type": {
++// JSON-NEXT:             "qualType": "void (S<int> &&)"
++// JSON-NEXT:            },
++// JSON-NEXT:            "inline": true,
++// JSON-NEXT:            "constexpr": true,
++// JSON-NEXT:            "explicitlyDefaulted": "default",
++// JSON-NEXT:            "inner": [
++// JSON-NEXT:             {
++// JSON-NEXT:              "id": "0x{{.*}}",
++// JSON-NEXT:              "kind": "ParmVarDecl",
++// JSON-NEXT:              "loc": {
++// JSON-NEXT:               "offset": 9492,
++// JSON-NEXT:               "col": 33,
++// JSON-NEXT:               "tokLen": 1
++// JSON-NEXT:              },
++// JSON-NEXT:              "range": {
++// JSON-NEXT:               "begin": {
++// JSON-NEXT:                "offset": 9492,
++// JSON-NEXT:                "col": 33,
++// JSON-NEXT:                "tokLen": 1
++// JSON-NEXT:               },
++// JSON-NEXT:               "end": {
++// JSON-NEXT:                "offset": 9492,
++// JSON-NEXT:                "col": 33,
++// JSON-NEXT:                "tokLen": 1
++// JSON-NEXT:               }
++// JSON-NEXT:              },
++// JSON-NEXT:              "type": {
++// JSON-NEXT:               "qualType": "S<int> &&"
++// JSON-NEXT:              }
++// JSON-NEXT:             }
++// JSON-NEXT:            ]
++// JSON-NEXT:           },
++// JSON-NEXT:           {
++// JSON-NEXT:            "id": "0x{{.*}}",
++// JSON-NEXT:            "kind": "CXXDestructorDecl",
++// JSON-NEXT:            "loc": {
++// JSON-NEXT:             "offset": 9492,
++// JSON-NEXT:             "col": 33,
++// JSON-NEXT:             "tokLen": 1
++// JSON-NEXT:            },
++// JSON-NEXT:            "range": {
++// JSON-NEXT:             "begin": {
++// JSON-NEXT:              "offset": 9492,
++// JSON-NEXT:              "col": 33,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             },
++// JSON-NEXT:             "end": {
++// JSON-NEXT:              "offset": 9492,
++// JSON-NEXT:              "col": 33,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             }
++// JSON-NEXT:            },
++// JSON-NEXT:            "isImplicit": true,
++// JSON-NEXT:            "isReferenced": true,
++// JSON-NEXT:            "name": "~S",
++// JSON-NEXT:            "mangledName": "_ZN8GH1535401N1SIiED1Ev",
++// JSON-NEXT:            "type": {
++// JSON-NEXT:             "qualType": "void () noexcept"
++// JSON-NEXT:            },
++// JSON-NEXT:            "inline": true,
++// JSON-NEXT:            "constexpr": true,
++// JSON-NEXT:            "explicitlyDefaulted": "default"
++// JSON-NEXT:           }
++// JSON-NEXT:          ]
++// JSON-NEXT:         }
++// JSON-NEXT:        ]
++// JSON-NEXT:       },
++// JSON-NEXT:       {
++// JSON-NEXT:        "id": "0x{{.*}}",
++// JSON-NEXT:        "kind": "FunctionTemplateDecl",
++// JSON-NEXT:        "loc": {
++// JSON-NEXT:         "offset": 9496,
++// JSON-NEXT:         "col": 37,
++// JSON-NEXT:         "tokLen": 1
++// JSON-NEXT:        },
++// JSON-NEXT:        "range": {
++// JSON-NEXT:         "begin": {
++// JSON-NEXT:          "offset": 9464,
++// JSON-NEXT:          "col": 5,
++// JSON-NEXT:          "tokLen": 8
++// JSON-NEXT:         },
++// JSON-NEXT:         "end": {
++// JSON-NEXT:          "offset": 9499,
++// JSON-NEXT:          "col": 40,
++// JSON-NEXT:          "tokLen": 1
++// JSON-NEXT:         }
++// JSON-NEXT:        },
++// JSON-NEXT:        "isImplicit": true,
++// JSON-NEXT:        "name": "<deduction guide for S>",
++// JSON-NEXT:        "inner": [
++// JSON-NEXT:         {
++// JSON-NEXT:          "id": "0x{{.*}}",
++// JSON-NEXT:          "kind": "TemplateTypeParmDecl",
++// JSON-NEXT:          "loc": {
++// JSON-NEXT:           "offset": 9482,
++// JSON-NEXT:           "col": 23,
++// JSON-NEXT:           "tokLen": 1
++// JSON-NEXT:          },
++// JSON-NEXT:          "range": {
++// JSON-NEXT:           "begin": {
++// JSON-NEXT:            "offset": 9473,
++// JSON-NEXT:            "col": 14,
++// JSON-NEXT:            "tokLen": 8
++// JSON-NEXT:           },
++// JSON-NEXT:           "end": {
++// JSON-NEXT:            "offset": 9482,
++// JSON-NEXT:            "col": 23,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "isReferenced": true,
++// JSON-NEXT:          "name": "T",
++// JSON-NEXT:          "tagUsed": "typename",
++// JSON-NEXT:          "depth": 0,
++// JSON-NEXT:          "index": 0
++// JSON-NEXT:         },
++// JSON-NEXT:         {
++// JSON-NEXT:          "id": "0x{{.*}}",
++// JSON-NEXT:          "kind": "CXXDeductionGuideDecl",
++// JSON-NEXT:          "loc": {
++// JSON-NEXT:           "offset": 9496,
++// JSON-NEXT:           "col": 37,
++// JSON-NEXT:           "tokLen": 1
++// JSON-NEXT:          },
++// JSON-NEXT:          "range": {
++// JSON-NEXT:           "begin": {
++// JSON-NEXT:            "offset": 9496,
++// JSON-NEXT:            "col": 37,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           },
++// JSON-NEXT:           "end": {
++// JSON-NEXT:            "offset": 9499,
++// JSON-NEXT:            "col": 40,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "isImplicit": true,
++// JSON-NEXT:          "name": "<deduction guide for S>",
++// JSON-NEXT:          "type": {
++// JSON-NEXT:           "qualType": "auto (T) -> GH153540::N::S<T>"
++// JSON-NEXT:          },
++// JSON-NEXT:          "inner": [
++// JSON-NEXT:           {
++// JSON-NEXT:            "id": "0x{{.*}}",
++// JSON-NEXT:            "kind": "ParmVarDecl",
++// JSON-NEXT:            "loc": {
++// JSON-NEXT:             "offset": 9499,
++// JSON-NEXT:             "col": 40,
++// JSON-NEXT:             "tokLen": 1
++// JSON-NEXT:            },
++// JSON-NEXT:            "range": {
++// JSON-NEXT:             "begin": {
++// JSON-NEXT:              "offset": 9498,
++// JSON-NEXT:              "col": 39,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             },
++// JSON-NEXT:             "end": {
++// JSON-NEXT:              "offset": 9498,
++// JSON-NEXT:              "col": 39,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             }
++// JSON-NEXT:            },
++// JSON-NEXT:            "type": {
++// JSON-NEXT:             "qualType": "T"
++// JSON-NEXT:            }
++// JSON-NEXT:           }
++// JSON-NEXT:          ]
++// JSON-NEXT:         },
++// JSON-NEXT:         {
++// JSON-NEXT:          "id": "0x{{.*}}",
++// JSON-NEXT:          "kind": "CXXDeductionGuideDecl",
++// JSON-NEXT:          "loc": {
++// JSON-NEXT:           "offset": 9496,
++// JSON-NEXT:           "col": 37,
++// JSON-NEXT:           "tokLen": 1
++// JSON-NEXT:          },
++// JSON-NEXT:          "range": {
++// JSON-NEXT:           "begin": {
++// JSON-NEXT:            "offset": 9496,
++// JSON-NEXT:            "col": 37,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           },
++// JSON-NEXT:           "end": {
++// JSON-NEXT:            "offset": 9499,
++// JSON-NEXT:            "col": 40,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "isImplicit": true,
++// JSON-NEXT:          "isUsed": true,
++// JSON-NEXT:          "name": "<deduction guide for S>",
++// JSON-NEXT:          "type": {
++// JSON-NEXT:           "qualType": "auto (int) -> GH153540::N::S<int>"
++// JSON-NEXT:          },
++// JSON-NEXT:          "inner": [
++// JSON-NEXT:           {
++// JSON-NEXT:            "kind": "TemplateArgument",
++// JSON-NEXT:            "type": {
++// JSON-NEXT:             "qualType": "int"
++// JSON-NEXT:            },
++// JSON-NEXT:            "inner": [
++// JSON-NEXT:             {
++// JSON-NEXT:              "id": "0x{{.*}}",
++// JSON-NEXT:              "kind": "BuiltinType",
++// JSON-NEXT:              "type": {
++// JSON-NEXT:               "qualType": "int"
++// JSON-NEXT:              }
++// JSON-NEXT:             }
++// JSON-NEXT:            ]
++// JSON-NEXT:           },
++// JSON-NEXT:           {
++// JSON-NEXT:            "id": "0x{{.*}}",
++// JSON-NEXT:            "kind": "ParmVarDecl",
++// JSON-NEXT:            "loc": {
++// JSON-NEXT:             "offset": 9499,
++// JSON-NEXT:             "col": 40,
++// JSON-NEXT:             "tokLen": 1
++// JSON-NEXT:            },
++// JSON-NEXT:            "range": {
++// JSON-NEXT:             "begin": {
++// JSON-NEXT:              "offset": 9498,
++// JSON-NEXT:              "col": 39,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             },
++// JSON-NEXT:             "end": {
++// JSON-NEXT:              "offset": 9498,
++// JSON-NEXT:              "col": 39,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             }
++// JSON-NEXT:            },
++// JSON-NEXT:            "type": {
++// JSON-NEXT:             "qualType": "int"
++// JSON-NEXT:            }
++// JSON-NEXT:           }
++// JSON-NEXT:          ]
++// JSON-NEXT:         }
++// JSON-NEXT:        ]
++// JSON-NEXT:       },
++// JSON-NEXT:       {
++// JSON-NEXT:        "id": "0x{{.*}}",
++// JSON-NEXT:        "kind": "FunctionTemplateDecl",
++// JSON-NEXT:        "loc": {
++// JSON-NEXT:         "offset": 9492,
++// JSON-NEXT:         "col": 33,
++// JSON-NEXT:         "tokLen": 1
++// JSON-NEXT:        },
++// JSON-NEXT:        "range": {
++// JSON-NEXT:         "begin": {
++// JSON-NEXT:          "offset": 9464,
++// JSON-NEXT:          "col": 5,
++// JSON-NEXT:          "tokLen": 8
++// JSON-NEXT:         },
++// JSON-NEXT:         "end": {
++// JSON-NEXT:          "offset": 9492,
++// JSON-NEXT:          "col": 33,
++// JSON-NEXT:          "tokLen": 1
++// JSON-NEXT:         }
++// JSON-NEXT:        },
++// JSON-NEXT:        "isImplicit": true,
++// JSON-NEXT:        "name": "<deduction guide for S>",
++// JSON-NEXT:        "inner": [
++// JSON-NEXT:         {
++// JSON-NEXT:          "id": "0x{{.*}}",
++// JSON-NEXT:          "kind": "TemplateTypeParmDecl",
++// JSON-NEXT:          "loc": {
++// JSON-NEXT:           "offset": 9482,
++// JSON-NEXT:           "col": 23,
++// JSON-NEXT:           "tokLen": 1
++// JSON-NEXT:          },
++// JSON-NEXT:          "range": {
++// JSON-NEXT:           "begin": {
++// JSON-NEXT:            "offset": 9473,
++// JSON-NEXT:            "col": 14,
++// JSON-NEXT:            "tokLen": 8
++// JSON-NEXT:           },
++// JSON-NEXT:           "end": {
++// JSON-NEXT:            "offset": 9482,
++// JSON-NEXT:            "col": 23,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "isReferenced": true,
++// JSON-NEXT:          "name": "T",
++// JSON-NEXT:          "tagUsed": "typename",
++// JSON-NEXT:          "depth": 0,
++// JSON-NEXT:          "index": 0
++// JSON-NEXT:         },
++// JSON-NEXT:         {
++// JSON-NEXT:          "id": "0x{{.*}}",
++// JSON-NEXT:          "kind": "CXXDeductionGuideDecl",
++// JSON-NEXT:          "loc": {
++// JSON-NEXT:           "offset": 9492,
++// JSON-NEXT:           "col": 33,
++// JSON-NEXT:           "tokLen": 1
++// JSON-NEXT:          },
++// JSON-NEXT:          "range": {
++// JSON-NEXT:           "begin": {
++// JSON-NEXT:            "offset": 9492,
++// JSON-NEXT:            "col": 33,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           },
++// JSON-NEXT:           "end": {
++// JSON-NEXT:            "offset": 9492,
++// JSON-NEXT:            "col": 33,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "isImplicit": true,
++// JSON-NEXT:          "name": "<deduction guide for S>",
++// JSON-NEXT:          "type": {
++// JSON-NEXT:           "qualType": "auto (GH153540::N::S<T>) -> GH153540::N::S<T>"
++// JSON-NEXT:          },
++// JSON-NEXT:          "inner": [
++// JSON-NEXT:           {
++// JSON-NEXT:            "id": "0x{{.*}}",
++// JSON-NEXT:            "kind": "ParmVarDecl",
++// JSON-NEXT:            "loc": {
++// JSON-NEXT:             "offset": 9492,
++// JSON-NEXT:             "col": 33,
++// JSON-NEXT:             "tokLen": 1
++// JSON-NEXT:            },
++// JSON-NEXT:            "range": {
++// JSON-NEXT:             "begin": {
++// JSON-NEXT:              "offset": 9492,
++// JSON-NEXT:              "col": 33,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             },
++// JSON-NEXT:             "end": {
++// JSON-NEXT:              "offset": 9492,
++// JSON-NEXT:              "col": 33,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             }
++// JSON-NEXT:            },
++// JSON-NEXT:            "type": {
++// JSON-NEXT:             "qualType": "GH153540::N::S<T>"
++// JSON-NEXT:            }
++// JSON-NEXT:           }
++// JSON-NEXT:          ]
++// JSON-NEXT:         }
++// JSON-NEXT:        ]
++// JSON-NEXT:       }
++// JSON-NEXT:      ]
++// JSON-NEXT:     },
++// JSON-NEXT:     {
++// JSON-NEXT:      "id": "0x{{.*}}",
++// JSON-NEXT:      "kind": "FunctionDecl",
++// JSON-NEXT:      "loc": {
++// JSON-NEXT:       "offset": 9516,
++// JSON-NEXT:       "line": 230,
++// JSON-NEXT:       "col": 8,
++// JSON-NEXT:       "tokLen": 1
++// JSON-NEXT:      },
++// JSON-NEXT:      "range": {
++// JSON-NEXT:       "begin": {
++// JSON-NEXT:        "offset": 9511,
++// JSON-NEXT:        "col": 3,
++// JSON-NEXT:        "tokLen": 4
++// JSON-NEXT:       },
++// JSON-NEXT:       "end": {
++// JSON-NEXT:        "offset": 9537,
++// JSON-NEXT:        "line": 232,
++// JSON-NEXT:        "col": 3,
++// JSON-NEXT:        "tokLen": 1
++// JSON-NEXT:       }
++// JSON-NEXT:      },
++// JSON-NEXT:      "name": "f",
++// JSON-NEXT:      "mangledName": "_ZN8GH1535401fEv",
++// JSON-NEXT:      "type": {
++// JSON-NEXT:       "qualType": "void ()"
++// JSON-NEXT:      },
++// JSON-NEXT:      "inner": [
++// JSON-NEXT:       {
++// JSON-NEXT:        "id": "0x{{.*}}",
++// JSON-NEXT:        "kind": "CompoundStmt",
++// JSON-NEXT:        "range": {
++// JSON-NEXT:         "begin": {
++// JSON-NEXT:          "offset": 9520,
++// JSON-NEXT:          "line": 230,
++// JSON-NEXT:          "col": 12,
++// JSON-NEXT:          "tokLen": 1
++// JSON-NEXT:         },
++// JSON-NEXT:         "end": {
++// JSON-NEXT:          "offset": 9537,
++// JSON-NEXT:          "line": 232,
++// JSON-NEXT:          "col": 3,
++// JSON-NEXT:          "tokLen": 1
++// JSON-NEXT:         }
++// JSON-NEXT:        },
++// JSON-NEXT:        "inner": [
++// JSON-NEXT:         {
++// JSON-NEXT:          "id": "0x{{.*}}",
++// JSON-NEXT:          "kind": "CXXFunctionalCastExpr",
++// JSON-NEXT:          "range": {
++// JSON-NEXT:           "begin": {
++// JSON-NEXT:            "offset": 9526,
++// JSON-NEXT:            "line": 231,
++// JSON-NEXT:            "col": 5,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           },
++// JSON-NEXT:           "end": {
++// JSON-NEXT:            "offset": 9532,
++// JSON-NEXT:            "col": 11,
++// JSON-NEXT:            "tokLen": 1
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "type": {
++// JSON-NEXT:           "desugaredQualType": "GH153540::N::S<int>",
++// JSON-NEXT:           "qualType": "N::S<int>"
++// JSON-NEXT:          },
++// JSON-NEXT:          "valueCategory": "prvalue",
++// JSON-NEXT:          "castKind": "ConstructorConversion",
++// JSON-NEXT:          "conversionFunc": {
++// JSON-NEXT:           "id": "0x{{.*}}",
++// JSON-NEXT:           "kind": "CXXConstructorDecl",
++// JSON-NEXT:           "name": "S",
++// JSON-NEXT:           "type": {
++// JSON-NEXT:            "qualType": "void (int)"
++// JSON-NEXT:           }
++// JSON-NEXT:          },
++// JSON-NEXT:          "inner": [
++// JSON-NEXT:           {
++// JSON-NEXT:            "id": "0x{{.*}}",
++// JSON-NEXT:            "kind": "CXXConstructExpr",
++// JSON-NEXT:            "range": {
++// JSON-NEXT:             "begin": {
++// JSON-NEXT:              "offset": 9526,
++// JSON-NEXT:              "col": 5,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             },
++// JSON-NEXT:             "end": {
++// JSON-NEXT:              "offset": 9532,
++// JSON-NEXT:              "col": 11,
++// JSON-NEXT:              "tokLen": 1
++// JSON-NEXT:             }
++// JSON-NEXT:            },
++// JSON-NEXT:            "type": {
++// JSON-NEXT:             "desugaredQualType": "GH153540::N::S<int>",
++// JSON-NEXT:             "qualType": "N::S<int>"
++// JSON-NEXT:            },
++// JSON-NEXT:            "valueCategory": "prvalue",
++// JSON-NEXT:            "ctorType": {
++// JSON-NEXT:             "qualType": "void (int)"
++// JSON-NEXT:            },
++// JSON-NEXT:            "hadMultipleCandidates": true,
++// JSON-NEXT:            "constructionKind": "complete",
++// JSON-NEXT:            "inner": [
++// JSON-NEXT:             {
++// JSON-NEXT:              "id": "0x{{.*}}",
++// JSON-NEXT:              "kind": "IntegerLiteral",
++// JSON-NEXT:              "range": {
++// JSON-NEXT:               "begin": {
++// JSON-NEXT:                "offset": 9531,
++// JSON-NEXT:                "col": 10,
++// JSON-NEXT:                "tokLen": 1
++// JSON-NEXT:               },
++// JSON-NEXT:               "end": {
++// JSON-NEXT:                "offset": 9531,
++// JSON-NEXT:                "col": 10,
++// JSON-NEXT:                "tokLen": 1
++// JSON-NEXT:               }
++// JSON-NEXT:              },
++// JSON-NEXT:              "type": {
++// JSON-NEXT:               "qualType": "int"
++// JSON-NEXT:              },
++// JSON-NEXT:              "valueCategory": "prvalue",
++// JSON-NEXT:              "value": "0"
++// JSON-NEXT:             }
++// JSON-NEXT:            ]
++// JSON-NEXT:           }
++// JSON-NEXT:          ]
++// JSON-NEXT:         }
++// JSON-NEXT:        ]
++// JSON-NEXT:       }
++// JSON-NEXT:      ]
++// JSON-NEXT:     }
+ // JSON-NEXT:    ]
+ // JSON-NEXT:   }
+ // JSON-NEXT:  ]
+diff -ruN --strip-trailing-cr a/clang/test/Modules/GH153933.cpp b/clang/test/Modules/GH153933.cpp
+--- a/clang/test/Modules/GH153933.cpp
++++ b/clang/test/Modules/GH153933.cpp
+@@ -0,0 +1,23 @@
++// RUN: rm -rf %t
++// RUN: mkdir -p %t
++// RUN: split-file %s %t
++//
++// RUN: %clang_cc1 -std=c++20 %t/B.cppm -emit-module-interface -o %t/B.pcm
++// RUN: %clang_cc1 -std=c++20 -fsyntax-only -fprebuilt-module-path=%t %t/C.cpp
++
++//--- A.hpp
++template<class> struct A {};
++template<class T> struct B {
++  virtual A<T> v() { return {}; }
++};
++B<void> x;
++
++//--- B.cppm
++module;
++#include "A.hpp"
++export module B;
++using ::x;
++
++//--- C.cpp
++#include "A.hpp"
++import B;
+diff -ruN --strip-trailing-cr a/clang/test/SemaCXX/using-decl-templates.cpp b/clang/test/SemaCXX/using-decl-templates.cpp
+--- a/clang/test/SemaCXX/using-decl-templates.cpp
++++ b/clang/test/SemaCXX/using-decl-templates.cpp
+@@ -153,3 +153,11 @@
+ }
+ } // namespace sss
+ } // namespace func_templ
++
++namespace DependentName {
++  template <typename T> struct S {
++    using typename T::Ty;
++    static Ty Val;
++  };
++  template <typename T> typename S<T>::Ty S<T>::Val;
++} // DependentName
+diff -ruN --strip-trailing-cr a/clang/test/SemaTemplate/class-template-ctor-initializer.cpp b/clang/test/SemaTemplate/class-template-ctor-initializer.cpp
+--- a/clang/test/SemaTemplate/class-template-ctor-initializer.cpp
++++ b/clang/test/SemaTemplate/class-template-ctor-initializer.cpp
+@@ -4,8 +4,8 @@
+ 
+ template<class X> struct A {};
+ 
+-template<class X> struct B : A<X> { 
+-  B() : A<X>() {} 
++template<class X> struct B : A<X> {
++  B() : A<X>() {}
+ };
+ B<int> x;
+ 
+@@ -76,3 +76,12 @@
+   Derived1<void> d1;
+   Derived2<void> d2;
+ }
++
++namespace UnresolvedUsing {
++  template <class T> class A {
++    using typename T::B;
++    struct C : B {
++      C() : B() {}
++    };
++  };
++} // namespace UnresolvedUsing
+diff -ruN --strip-trailing-cr a/clang/test/SemaTemplate/ctad.cpp b/clang/test/SemaTemplate/ctad.cpp
+--- a/clang/test/SemaTemplate/ctad.cpp
++++ b/clang/test/SemaTemplate/ctad.cpp
+@@ -90,3 +90,17 @@
+   // cxx17-error@-1 {{value of type 'foo::A<int>' is not implicitly convertible to 'int'}}
+   // cxx20-error@-2 {{non-type template parameter has non-literal type 'foo::A<int>' (aka 'AsValueParameter::foo::A<int>')}}
+ } // namespace AsValueParameter
++
++namespace ConvertDeducedTemplateArgument {
++  namespace A {
++    template <class> struct B {};
++  }
++
++  template <template <class> class TT1> struct C {
++    C(TT1<int>);
++  };
++
++  template <template <class> class TT2> using D = TT2<int>;
++
++  auto x = C(D<A::B>());
++}
+diff -ruN --strip-trailing-cr a/clang/test/SemaTemplate/nested-name-spec-template.cpp b/clang/test/SemaTemplate/nested-name-spec-template.cpp
+--- a/clang/test/SemaTemplate/nested-name-spec-template.cpp
++++ b/clang/test/SemaTemplate/nested-name-spec-template.cpp
+@@ -167,3 +167,18 @@
+   };
+   template struct C<int>;
+ } // namespace unresolved_using
++
++#if __cplusplus >= 201703L
++namespace SubstTemplateTypeParmPackType {
++  template <int...> struct A {};
++
++  template <class... Ts> void f() {
++    []<int ... Is>(A<Is...>) { (Ts::g(Is) && ...); }(A<0>{});
++    // expected-warning@-1 {{explicit template parameter list for lambdas is a C++20 extension}}
++  };
++
++  struct B { static void g(int); };
++
++  template void f<B>();
++} // namespace SubstTemplateTypeParmPackType
++#endif
+diff -ruN --strip-trailing-cr a/clang-tools-extra/clang-tidy/misc/UnconventionalAssignOperatorCheck.cpp b/clang-tools-extra/clang-tidy/misc/UnconventionalAssignOperatorCheck.cpp
+--- a/clang-tools-extra/clang-tidy/misc/UnconventionalAssignOperatorCheck.cpp
++++ b/clang-tools-extra/clang-tidy/misc/UnconventionalAssignOperatorCheck.cpp
+@@ -29,11 +29,13 @@
+   const auto HasGoodReturnType =
+       cxxMethodDecl(returns(hasCanonicalType(lValueReferenceType(pointee(
+           unless(isConstQualified()),
+-          anyOf(autoType(), hasDeclaration(equalsBoundNode("class"))))))));
++          anyOf(autoType(),
++                hasDeclaration(declaresSameEntityAsBoundNode("class"))))))));
+ 
+   const auto IsSelf = qualType(hasCanonicalType(
+-      anyOf(hasDeclaration(equalsBoundNode("class")),
+-            referenceType(pointee(hasDeclaration(equalsBoundNode("class")))))));
++      anyOf(hasDeclaration(declaresSameEntityAsBoundNode("class")),
++            referenceType(pointee(
++                hasDeclaration(declaresSameEntityAsBoundNode("class")))))));
+   const auto IsAssign =
+       cxxMethodDecl(unless(anyOf(isDeleted(), isPrivate(), isImplicit())),
+                     hasName("operator="), ofClass(recordDecl().bind("class")))
+diff -ruN --strip-trailing-cr a/clang-tools-extra/test/clang-tidy/checkers/misc/unconventional-assign-operator.cpp b/clang-tools-extra/test/clang-tidy/checkers/misc/unconventional-assign-operator.cpp
+--- a/clang-tools-extra/test/clang-tidy/checkers/misc/unconventional-assign-operator.cpp
++++ b/clang-tools-extra/test/clang-tidy/checkers/misc/unconventional-assign-operator.cpp
+@@ -176,3 +176,11 @@
+   }
+ };
+ }
++
++namespace GH153770 {
++  struct A;
++  struct A {
++    A() = default;
++    A& operator=(const A&) = default;
++  };
++} // namespace GH153770
+diff -ruN --strip-trailing-cr a/clang-tools-extra/test/clang-tidy/checkers/modernize/type-traits-GH153649.cpp b/clang-tools-extra/test/clang-tidy/checkers/modernize/type-traits-GH153649.cpp
+--- a/clang-tools-extra/test/clang-tidy/checkers/modernize/type-traits-GH153649.cpp
++++ b/clang-tools-extra/test/clang-tidy/checkers/modernize/type-traits-GH153649.cpp
+@@ -0,0 +1,15 @@
++// RUN: %check_clang_tidy -std=c++20 %s modernize-type-traits %t
++
++namespace std {
++template <class> struct tuple_size {
++  static const int value = 1;
++};
++template <int, class> struct tuple_element {
++  using type = int;
++};
++}
++
++struct A {};
++template <int> int get(const A&);
++
++auto [a] = A();
+diff -ruN --strip-trailing-cr a/lldb/source/Plugins/Language/CPlusPlus/LibStdcpp.cpp b/lldb/source/Plugins/Language/CPlusPlus/LibStdcpp.cpp
+--- a/lldb/source/Plugins/Language/CPlusPlus/LibStdcpp.cpp
++++ b/lldb/source/Plugins/Language/CPlusPlus/LibStdcpp.cpp
+@@ -241,10 +241,11 @@
+ bool lldb_private::formatters::LibStdcppStringSummaryProvider(
+     ValueObject &valobj, Stream &stream, const TypeSummaryOptions &options) {
+   ValueObjectSP ptr = valobj.GetChildAtNamePath({"_M_dataplus", "_M_p"});
+-  if (!ptr)
+-    return false;
++  if (!ptr || !ptr->GetError().Success())
++    stream << "Summary Unavailable";
++  else
++    stream << ptr->GetSummaryAsCString();
+ 
+-  stream << ptr->GetSummaryAsCString();
+   return true;
+ }
+ 
 diff -ruN --strip-trailing-cr a/llvm/include/llvm/Analysis/LoopInfo.h b/llvm/include/llvm/Analysis/LoopInfo.h
 --- a/llvm/include/llvm/Analysis/LoopInfo.h
 +++ b/llvm/include/llvm/Analysis/LoopInfo.h
@@ -65,6 +1636,25 @@ diff -ruN --strip-trailing-cr a/llvm/lib/Analysis/LoopInfo.cpp b/llvm/lib/Analys
  }
  
  bool Loop::makeLoopInvariant(Value *V, bool &Changed, Instruction *InsertPt,
+diff -ruN --strip-trailing-cr a/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp b/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
+--- a/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
++++ b/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
+@@ -5125,10 +5125,11 @@
+           !ISD::isUnsignedIntSetCC(Cond))) &&
+         isTypeDesirableForOp(ISD::SETCC, N0.getOperand(0).getValueType())) {
+       EVT NewVT = N0.getOperand(0).getValueType();
+-      SDValue NewConst = DAG.getConstant(ISD::isSignedIntSetCC(Cond)
+-                                             ? C1.sext(NewVT.getSizeInBits())
+-                                             : C1.zext(NewVT.getSizeInBits()),
+-                                         dl, NewVT);
++      SDValue NewConst = DAG.getConstant(
++          (N0->getFlags().hasNoSignedWrap() && !ISD::isUnsignedIntSetCC(Cond))
++              ? C1.sext(NewVT.getSizeInBits())
++              : C1.zext(NewVT.getSizeInBits()),
++          dl, NewVT);
+       return DAG.getSetCC(dl, VT, N0.getOperand(0), NewConst, Cond);
+     }
+ 
 diff -ruN --strip-trailing-cr a/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp b/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp
 --- a/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp
 +++ b/llvm/lib/Target/NVPTX/NVPTXISelLowering.cpp
@@ -123,6 +1713,29 @@ diff -ruN --strip-trailing-cr a/llvm/lib/Transforms/Scalar/LICM.cpp b/llvm/lib/T
            MustExecuteWithoutWritesBefore(I)) {
          hoist(I, DT, CurLoop, CFH.getOrCreateHoistedBlock(BB), SafetyInfo,
                MSSAU, SE, ORE);
+diff -ruN --strip-trailing-cr a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp
+--- a/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp
++++ b/llvm/lib/Transforms/Vectorize/LoopVectorize.cpp
+@@ -9772,6 +9772,19 @@
+                "Must only have a single non-zero incoming value");
+         EPI.VectorTripCount = Inc;
+       }
++      // If we didn't find a non-zero vector trip count, all incoming values
++      // must be zero, which also means the vector trip count is zero. Pick the
++      // first zero as vector trip count.
++      // TODO: We should not choose VF * UF so the main vector loop is known to
++      // be dead.
++      if (!EPI.VectorTripCount) {
++        assert(
++            EPResumeVal->getNumIncomingValues() > 0 &&
++            all_of(EPResumeVal->incoming_values(),
++                   [](Value *Inc) { return match(Inc, m_SpecificInt(0)); }) &&
++            "all incoming values must be 0");
++        EPI.VectorTripCount = EPResumeVal->getOperand(0);
++      }
+       VPValue *VPV = Plan.getOrAddLiveIn(EPResumeVal);
+       assert(all_of(IV->users(),
+                     [](const VPUser *U) {
 diff -ruN --strip-trailing-cr a/llvm/test/CodeGen/NVPTX/f32x2-instructions.ll b/llvm/test/CodeGen/NVPTX/f32x2-instructions.ll
 --- a/llvm/test/CodeGen/NVPTX/f32x2-instructions.ll
 +++ b/llvm/test/CodeGen/NVPTX/f32x2-instructions.ll
@@ -158,6 +1771,44 @@ diff -ruN --strip-trailing-cr a/llvm/test/CodeGen/NVPTX/f32x2-instructions.ll b/
  
  define <2 x float> @test_fadd(<2 x float> %a, <2 x float> %b) #0 {
  ; CHECK-NOF32X2-LABEL: test_fadd(
+diff -ruN --strip-trailing-cr a/llvm/test/CodeGen/X86/pr152630.ll b/llvm/test/CodeGen/X86/pr152630.ll
+--- a/llvm/test/CodeGen/X86/pr152630.ll
++++ b/llvm/test/CodeGen/X86/pr152630.ll
+@@ -0,0 +1,34 @@
++; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
++; RUN: llc < %s -mtriple=x86_64-unknown-linux-gnu | FileCheck %s
++
++define i32 @pr152630(i1 %cond) nounwind {
++; CHECK-LABEL: pr152630:
++; CHECK:       # %bb.0: # %entry
++; CHECK-NEXT:    andl $1, %edi
++; CHECK-NEXT:    decl %edi
++; CHECK-NEXT:    cmpl $-1, %edi
++; CHECK-NEXT:    je .LBB0_2
++; CHECK-NEXT:  # %bb.1: # %entry
++; CHECK-NEXT:    movzbl %dil, %eax
++; CHECK-NEXT:    testl %eax, %eax
++; CHECK-NEXT:    jne .LBB0_3
++; CHECK-NEXT:  .LBB0_2: # %if.then
++; CHECK-NEXT:    xorl %eax, %eax
++; CHECK-NEXT:    retq
++; CHECK-NEXT:  .LBB0_3: # %if.else
++; CHECK-NEXT:    movl $1, %eax
++; CHECK-NEXT:    retq
++entry:
++  %sel = select i1 %cond, i32 0, i32 -1
++  %conv = trunc nsw i32 %sel to i8
++  switch i8 %conv, label %if.else [
++    i8 -1, label %if.then
++    i8 0, label %if.then
++  ]
++
++if.then:
++  ret i32 0
++
++if.else:
++  ret i32 1
++}
 diff -ruN --strip-trailing-cr a/llvm/test/Transforms/LICM/licm-coroutine.ll b/llvm/test/Transforms/LICM/licm-coroutine.ll
 --- a/llvm/test/Transforms/LICM/licm-coroutine.ll
 +++ b/llvm/test/Transforms/LICM/licm-coroutine.ll
@@ -240,6 +1891,101 @@ diff -ruN --strip-trailing-cr a/llvm/test/Transforms/LICM/licm-coroutine.ll b/ll
 +declare ptr @malloc(i32)
 +declare void @print(i32)
 +declare void @foo([2 x ptr])
+diff -ruN --strip-trailing-cr a/llvm/test/Transforms/LoopVectorize/AArch64/epilog-vectorization-factors.ll b/llvm/test/Transforms/LoopVectorize/AArch64/epilog-vectorization-factors.ll
+--- a/llvm/test/Transforms/LoopVectorize/AArch64/epilog-vectorization-factors.ll
++++ b/llvm/test/Transforms/LoopVectorize/AArch64/epilog-vectorization-factors.ll
+@@ -333,3 +333,91 @@
+ exit:
+   ret void
+ }
++
++; TODO: Choose smaller VF * UF for main loop, so we do not create a dead vector loop.
++define void @small_trip_count_loop(ptr %arg, ptr %arg2) {
++; CHECK-LABEL: @small_trip_count_loop(
++; CHECK-NEXT:  iter.check:
++; CHECK-NEXT:    [[ARG3:%.*]] = ptrtoint ptr [[ARG:%.*]] to i64
++; CHECK-NEXT:    [[ARG21:%.*]] = ptrtoint ptr [[ARG2:%.*]] to i64
++; CHECK-NEXT:    br i1 false, label [[VEC_EPILOG_SCALAR_PH:%.*]], label [[VECTOR_MEMCHECK:%.*]]
++; CHECK:       vector.memcheck:
++; CHECK-NEXT:    [[TMP0:%.*]] = sub i64 [[ARG21]], [[ARG3]]
++; CHECK-NEXT:    [[DIFF_CHECK:%.*]] = icmp ult i64 [[TMP0]], 64
++; CHECK-NEXT:    br i1 [[DIFF_CHECK]], label [[VEC_EPILOG_SCALAR_PH]], label [[VECTOR_MAIN_LOOP_ITER_CHECK:%.*]]
++; CHECK:       vector.main.loop.iter.check:
++; CHECK-NEXT:    br i1 true, label [[VEC_EPILOG_PH:%.*]], label [[VECTOR_PH:%.*]]
++; CHECK:       vector.ph:
++; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
++; CHECK:       vector.body:
++; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i8, ptr [[ARG]], i32 16
++; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds i8, ptr [[ARG]], i32 32
++; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds i8, ptr [[ARG]], i32 48
++; CHECK-NEXT:    [[WIDE_LOAD:%.*]] = load <16 x i8>, ptr [[ARG]], align 1
++; CHECK-NEXT:    [[WIDE_LOAD4:%.*]] = load <16 x i8>, ptr [[TMP1]], align 1
++; CHECK-NEXT:    [[WIDE_LOAD5:%.*]] = load <16 x i8>, ptr [[TMP2]], align 1
++; CHECK-NEXT:    [[WIDE_LOAD6:%.*]] = load <16 x i8>, ptr [[TMP3]], align 1
++; CHECK-NEXT:    [[TMP4:%.*]] = add <16 x i8> [[WIDE_LOAD]], splat (i8 10)
++; CHECK-NEXT:    [[TMP5:%.*]] = add <16 x i8> [[WIDE_LOAD4]], splat (i8 10)
++; CHECK-NEXT:    [[TMP6:%.*]] = add <16 x i8> [[WIDE_LOAD5]], splat (i8 10)
++; CHECK-NEXT:    [[TMP7:%.*]] = add <16 x i8> [[WIDE_LOAD6]], splat (i8 10)
++; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, ptr [[ARG2]], i32 16
++; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i8, ptr [[ARG2]], i32 32
++; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds i8, ptr [[ARG2]], i32 48
++; CHECK-NEXT:    store <16 x i8> [[TMP4]], ptr [[ARG2]], align 1
++; CHECK-NEXT:    store <16 x i8> [[TMP5]], ptr [[TMP8]], align 1
++; CHECK-NEXT:    store <16 x i8> [[TMP6]], ptr [[TMP9]], align 1
++; CHECK-NEXT:    store <16 x i8> [[TMP7]], ptr [[TMP10]], align 1
++; CHECK-NEXT:    br label [[MIDDLE_BLOCK:%.*]]
++; CHECK:       middle.block:
++; CHECK-NEXT:    br i1 false, label [[EXIT:%.*]], label [[VEC_EPILOG_ITER_CHECK:%.*]]
++; CHECK:       vec.epilog.iter.check:
++; CHECK-NEXT:    br i1 false, label [[VEC_EPILOG_SCALAR_PH]], label [[VEC_EPILOG_PH]]
++; CHECK:       vec.epilog.ph:
++; CHECK-NEXT:    [[VEC_EPILOG_RESUME_VAL:%.*]] = phi i32 [ 0, [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MAIN_LOOP_ITER_CHECK]] ]
++; CHECK-NEXT:    br label [[VEC_EPILOG_VECTOR_BODY:%.*]]
++; CHECK:       vec.epilog.vector.body:
++; CHECK-NEXT:    [[INDEX:%.*]] = phi i32 [ [[VEC_EPILOG_RESUME_VAL]], [[VEC_EPILOG_PH]] ], [ [[INDEX_NEXT:%.*]], [[VEC_EPILOG_VECTOR_BODY]] ]
++; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds i8, ptr [[ARG]], i32 [[INDEX]]
++; CHECK-NEXT:    [[WIDE_LOAD7:%.*]] = load <16 x i8>, ptr [[TMP11]], align 1
++; CHECK-NEXT:    [[TMP12:%.*]] = add <16 x i8> [[WIDE_LOAD7]], splat (i8 10)
++; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds i8, ptr [[ARG2]], i32 [[INDEX]]
++; CHECK-NEXT:    store <16 x i8> [[TMP12]], ptr [[TMP13]], align 1
++; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 16
++; CHECK-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[INDEX_NEXT]], 16
++; CHECK-NEXT:    br i1 [[TMP14]], label [[VEC_EPILOG_MIDDLE_BLOCK:%.*]], label [[VEC_EPILOG_VECTOR_BODY]], !llvm.loop [[LOOP11:![0-9]+]]
++; CHECK:       vec.epilog.middle.block:
++; CHECK-NEXT:    br i1 false, label [[EXIT]], label [[VEC_EPILOG_SCALAR_PH]]
++; CHECK:       vec.epilog.scalar.ph:
++; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i32 [ 16, [[VEC_EPILOG_MIDDLE_BLOCK]] ], [ 0, [[VEC_EPILOG_ITER_CHECK]] ], [ 0, [[VECTOR_MEMCHECK]] ], [ 0, [[ITER_CHECK:%.*]] ]
++; CHECK-NEXT:    br label [[LOOP:%.*]]
++; CHECK:       loop:
++; CHECK-NEXT:    [[IV:%.*]] = phi i32 [ [[BC_RESUME_VAL]], [[VEC_EPILOG_SCALAR_PH]] ], [ [[IV_NEXT:%.*]], [[LOOP]] ]
++; CHECK-NEXT:    [[GEP_A:%.*]] = getelementptr inbounds i8, ptr [[ARG]], i32 [[IV]]
++; CHECK-NEXT:    [[LOAD:%.*]] = load i8, ptr [[GEP_A]], align 1
++; CHECK-NEXT:    [[SELECT:%.*]] = add i8 [[LOAD]], 10
++; CHECK-NEXT:    [[GEP_B:%.*]] = getelementptr inbounds i8, ptr [[ARG2]], i32 [[IV]]
++; CHECK-NEXT:    store i8 [[SELECT]], ptr [[GEP_B]], align 1
++; CHECK-NEXT:    [[IV_NEXT]] = add i32 [[IV]], 1
++; CHECK-NEXT:    [[EC:%.*]] = icmp eq i32 [[IV]], 20
++; CHECK-NEXT:    br i1 [[EC]], label [[EXIT]], label [[LOOP]], !llvm.loop [[LOOP12:![0-9]+]]
++; CHECK:       exit:
++; CHECK-NEXT:    ret void
++;
++entry:
++  br label %loop
++
++loop:
++  %iv = phi i32 [ 0, %entry ], [ %iv.next, %loop ]
++  %gep.A = getelementptr inbounds i8, ptr %arg, i32 %iv
++  %load = load i8, ptr %gep.A, align 1
++  %select = add i8 %load, 10
++  %gep.B = getelementptr inbounds i8, ptr %arg2, i32 %iv
++  store i8 %select, ptr %gep.B, align 1
++  %iv.next = add i32 %iv, 1
++  %ec = icmp eq i32 %iv, 20
++  br i1 %ec, label %exit, label %loop
++
++exit:
++  ret void
++}
 diff -ruN --strip-trailing-cr a/mlir/test/Dialect/Linalg/linalg-morph-category-ops.mlir b/mlir/test/Dialect/Linalg/linalg-morph-category-ops.mlir
 --- a/mlir/test/Dialect/Linalg/linalg-morph-category-ops.mlir
 +++ b/mlir/test/Dialect/Linalg/linalg-morph-category-ops.mlir
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index e54cc0d..b1de9e3 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "fc44a4fcd3c54be927c15ddd9211aca1501633e7"
-    LLVM_SHA256 = "d228aebe5583c69c4e48fd7a8e149e3d22ee6dafaeae94009467143d32d9bfc4"
+    LLVM_COMMIT = "91cdd35008e9ab32dffb7e401cdd7313b3461892"
+    LLVM_SHA256 = "434800edbc95934c13e938f168de08e914a4835f4e314790f2dbae125a2d46cd"
 
     tf_http_archive(
         name = name,
