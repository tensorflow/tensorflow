diff --git a/docs/sdy_export_passes.md b/docs/sdy_export_passes.md
index b6fce17..0b08dd8 100755
--- a/docs/sdy_export_passes.md
+++ b/docs/sdy_export_passes.md
@@ -69,12 +69,6 @@ non-contracting dimensions, which is incompatible. The pass inserts an
 explicit reshard on `rhs` before the dot operation, so that the dot
 operation has compatible shardings.
 
-#### Options
-
-```
--enable-full-version : Enable full version.
-```
-
 ### `-sdy-remove-propagation-debug-info`
 
 _Removes propagation debug info (propagation edges and origin shardings) during export._
@@ -133,6 +127,16 @@ the edge), and replaces the op with its input.
 -sink-debug-propagation-edge-sharding : Whether to sink the debug propagation edge sharding info. See `debug-propagation-edge-sharding` option in propagation for more info.
 ```
 
+### `-sdy-temp-explicit-reshards-for-optimizations`
+
+_Inserts explicit reshards for specific optimizations._
+
+This pass is a temporary solution until we can enable the
+`sdy-insert-explicit-reshards` pass by default.
+
+It allows us to insert explicit reshards on specific operations for
+optimizations.
+
 ### `-sdy-update-non-divisible-input-output-shardings`
 
 _Makes FuncOp inputs/outputs evenly sharded, removing any need for padding due to non-divisible shardings._
diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index a4953c3..509398d 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,54 +1 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaOverload.cpp b/clang/lib/Sema/SemaOverload.cpp
---- a/clang/lib/Sema/SemaOverload.cpp
-+++ b/clang/lib/Sema/SemaOverload.cpp
-@@ -8042,8 +8042,8 @@
- 
-     Candidate.IgnoreObjectArgument =
-         isa<CXXMethodDecl>(Candidate.Function) &&
--        cast<CXXMethodDecl>(Candidate.Function)
--            ->isImplicitObjectMemberFunction() &&
-+        !cast<CXXMethodDecl>(Candidate.Function)
-+             ->isExplicitObjectMemberFunction() &&
-         !isa<CXXConstructorDecl>(Candidate.Function);
- 
-     Candidate.ExplicitCallArguments = Args.size();
-diff -ruN --strip-trailing-cr a/clang/test/SemaCXX/cxx2b-deducing-this.cpp b/clang/test/SemaCXX/cxx2b-deducing-this.cpp
---- a/clang/test/SemaCXX/cxx2b-deducing-this.cpp
-+++ b/clang/test/SemaCXX/cxx2b-deducing-this.cpp
-@@ -1357,3 +1357,35 @@
- }
- 
- }
-+
-+namespace GH147046_regression {
-+
-+template <typename z> struct ai {
-+    ai(z::ah);
-+};
-+
-+template <typename z> struct ak {
-+    template <typename am> void an(am, z);
-+    template <typename am> static void an(am, ai<z>);
-+};
-+template <typename> struct ao {};
-+
-+template <typename ap>
-+auto ar(ao<ap> at) -> decltype(ak<ap>::an(at, 0));
-+// expected-note@-1 {{candidate template ignored: substitution failure [with ap = GH147046_regression::ay]: no matching function for call to 'an'}}
-+
-+class aw;
-+struct ax {
-+    typedef int ah;
-+};
-+struct ay {
-+    typedef aw ah;
-+};
-+
-+ao<ay> az ;
-+ai<ax> bd(0);
-+void f() {
-+    ar(az); // expected-error {{no matching function for call to 'ar'}}
-+}
-+
-+}
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index aa7fc32..c744f98 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "652048ad2578c715d8d65d90fd3fe5d5d2bd42e7"
-    LLVM_SHA256 = "7398adc86335c401bc018583f03c87987cdae19988036819eb3c2b7ebe74b449"
+    LLVM_COMMIT = "39ca925ffefe2f8307e6ead1f7ffd99c58528d0f"
+    LLVM_SHA256 = "7b2b83fbadbca9c696469ec4ee97a72dccce80f3f5c78cbeb22bf9f2a20c03e2"
 
     tf_http_archive(
         name = name,
