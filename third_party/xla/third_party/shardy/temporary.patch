diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 8d6b113..23b088c 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,57 +1,15 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/clang/include/clang/AST/Type.h b/clang/include/clang/AST/Type.h
---- a/clang/include/clang/AST/Type.h
-+++ b/clang/include/clang/AST/Type.h
-@@ -3602,6 +3602,9 @@
-   }
- 
-   NestedNameSpecifier *getQualifier() const { return Qualifier; }
-+  /// Note: this can trigger extra deserialization when external AST sources are
-+  /// used. Prefer `getCXXRecordDecl()` unless you really need the most recent
-+  /// decl.
-   CXXRecordDecl *getMostRecentCXXRecordDecl() const;
- 
-   bool isSugared() const;
-@@ -3610,7 +3613,10 @@
-   }
- 
-   void Profile(llvm::FoldingSetNodeID &ID) {
--    Profile(ID, getPointeeType(), getQualifier(), getMostRecentCXXRecordDecl());
-+    // FIXME: `getMostRecentCXXRecordDecl()` should be possible to use here,
-+    // however when external AST sources are used it causes nondeterminism
-+    // issues (see https://github.com/llvm/llvm-project/pull/137910).
-+    Profile(ID, getPointeeType(), getQualifier(), getCXXRecordDecl());
-   }
- 
-   static void Profile(llvm::FoldingSetNodeID &ID, QualType Pointee,
-@@ -3620,6 +3626,9 @@
-   static bool classof(const Type *T) {
-     return T->getTypeClass() == MemberPointer;
-   }
-+
-+private:
-+  CXXRecordDecl *getCXXRecordDecl() const;
- };
- 
- /// Capture whether this is a normal array (e.g. int X[4])
-diff -ruN --strip-trailing-cr a/clang/lib/AST/Type.cpp b/clang/lib/AST/Type.cpp
---- a/clang/lib/AST/Type.cpp
-+++ b/clang/lib/AST/Type.cpp
-@@ -5305,10 +5305,14 @@
-     ID.AddPointer(Cls->getCanonicalDecl());
- }
- 
-+CXXRecordDecl *MemberPointerType::getCXXRecordDecl() const {
-+  return dyn_cast<MemberPointerType>(getCanonicalTypeInternal())
-+      ->getQualifier()
-+      ->getAsRecordDecl();
-+}
-+
- CXXRecordDecl *MemberPointerType::getMostRecentCXXRecordDecl() const {
--  auto *RD = dyn_cast<MemberPointerType>(getCanonicalTypeInternal())
--                 ->getQualifier()
--                 ->getAsRecordDecl();
-+  auto *RD = getCXXRecordDecl();
-   if (!RD)
-     return nullptr;
-   return RD->getMostRecentNonInjectedDecl();
+diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel b/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel
+--- a/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel
++++ b/utils/bazel/llvm-project-overlay/llvm/BUILD.bazel
+@@ -2342,6 +2342,10 @@
+             "lib/Target/Sparc/SparcGenSubtargetInfo.inc": ["-gen-subtarget"],
+             "lib/Target/Sparc/SparcGenDisassemblerTables.inc": ["-gen-disassembler"],
+             "lib/Target/Sparc/SparcGenSearchableTables.inc": ["-gen-searchable-tables"],
++            "lib/Target/Sparc/SparcGenSDNodeInfo.inc": [
++                "-gen-sd-node-info",
++                "-sdnode-namespace=SPISD",
++            ],
+         },
+     },
+     {
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index b41439e..f9c9218 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "2d287f51eff2a5fbf84458a33f7fb2493cf67965"
-    LLVM_SHA256 = "e06d0a35b0e0570b2f54dfd23d0e9fe6f084e032c14bb7ab194b06cb8c9cb86c"
+    LLVM_COMMIT = "3e235a7c601d80d6e8a0392ebec859068659ec19"
+    LLVM_SHA256 = "cbd511401c2c0999dc90ea108707f2e18307e2c8d04710a3e751da909914cd18"
 
     tf_http_archive(
         name = name,
diff --git a/third_party/stablehlo/temporary.patch b/third_party/stablehlo/temporary.patch
index 8c56752..24fb303 100755
--- a/third_party/stablehlo/temporary.patch
+++ b/third_party/stablehlo/temporary.patch
@@ -244,7 +244,7 @@ diff --ruN a/stablehlo/stablehlo/transforms/StablehloRefineShapes.cpp b/stablehl
  
    return success();
  }
-@@ -1094,7 +1094,7 @@
+@@ -1097,7 +1097,7 @@
    size_t firstFunctionalArgument =
        leadingTokenOperands + key.getGlobalConstants().size();
    argIndices.set(leadingTokenOperands, firstFunctionalArgument);
