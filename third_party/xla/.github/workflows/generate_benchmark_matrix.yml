# Copyright 2025 The OpenXLA Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
# .github/workflows/generate_benchmark_matrix.yml
name: Generate Benchmark Matrix

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      registry_file:
        description: 'Path to the benchmark registry file (relative to repository root)'
        required: false
        type: string
        default: 'xla/tools/benchmarks/registries/default_registry.yml'
      workflow_type:
        description: 'The type of workflow triggering this generation (presubmit, postsubmit, scheduled, manual)'
        required: true
        type: string # Keep as string for flexibility (e.g., "nightly" alias)
      checkout_ref:
        description: 'The Git ref (branch, tag, or SHA) to checkout'
        required: false
        type: string
        default: '' # Default to the caller's context ref
    outputs:
      matrix_include_json:
        description: 'JSON string representing the array for the "include" matrix strategy'
        value: ${{ jobs.generate.outputs.matrix_json_output }} # Note: Output name matches job output

jobs:
  generate:
    name: Generate Matrix (${{ inputs.workflow_type }})
    runs-on: linux-x86-n2-128
    container: us-central1-docker.pkg.dev/tensorflow-sigs/tensorflow/ml-build:latest
    outputs:
      matrix_json_output: ${{ steps.run_generator.outputs.matrix_json }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout OpenXLA
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Configure OpenXLA
        run: |
          echo "Configuring OpenXLA..."
          ./configure.py --backend=CPU
      # TODO(juliagmt): Use build.py to build the binary.
      - name: Build generate_benchmark_matrices_main
        run: |
          echo "Building generator..."
          bazel build \
                --build_tag_filters=-no_oss,-gpu,-requires-gpu-nvidia,-requires-gpu-amd \
                --test_tag_filters=-no_oss,-gpu,-requires-gpu-nvidia,-requires-gpu-amd \
                --config=warnings \
                --config=nonccl \
                --config=rbe_linux_cpu \
                --color=yes \
                --test_output=errors \
                --verbose_failures \
                --keep_going \
                --nobuild_tests_only \
                --profile=profile.json.gz \
                --flaky_test_attempts=3 \
                --jobs=150 \
                --bes_upload_mode=fully_async \
                //xla/tools/benchmarks/utils:generate_benchmark_matrices_main

      - name: Run generate_benchmark_matrices_main
        id: run_generator
        run: |
          BINARY_PATH="./bazel-bin/xla/tools/benchmarks/utils/generate_benchmark_matrices_main"
          REGISTRY_PATH="${{ inputs.registry_file }}"
          WORKFLOW_TYPE="${{ inputs.workflow_type }}"

          if [ ! -f "$BINARY_PATH" ]; then echo "Error: Generator binary not found."; exit 1; fi
          if [ ! -f "$REGISTRY_PATH" ]; then echo "Error: Registry file '$REGISTRY_PATH' not found."; exit 1; fi

          echo "Generating matrix for workflow type: $WORKFLOW_TYPE"
          JSON_ARRAY_STRING=$($BINARY_PATH --registry_file="$REGISTRY_PATH" --workflow_type="$WORKFLOW_TYPE")

          # Basic validation that output looks like a JSON array (starts/ends with brackets)
          if [[ ! "$JSON_ARRAY_STRING" =~ ^\[.*\]$ ]]; then
             echo "Error: Generator output does not look like a JSON array."
             echo "Output was: $JSON_ARRAY_STRING"
             exit 1
          fi

          echo "Generated matrix array string:"
          echo "$JSON_ARRAY_STRING"

          # Set the output for the job
          echo "matrix_json<<EOF" >> $GITHUB_OUTPUT
          echo "$JSON_ARRAY_STRING" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
