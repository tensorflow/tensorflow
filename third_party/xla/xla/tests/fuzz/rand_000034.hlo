/* This file is autogenerated! Please don't edit! */
HloModule xla_computation_unknown, entry_computation_layout={(bf16[9,11,3]{2,1,0},bf16[11,9,3]{2,1,0})->(bf16[])}

region_0.117 {
  arg_tuple.118 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) parameter(0)
  get-tuple-element.119 = pred[] get-tuple-element(arg_tuple.118), index=0
  get-tuple-element.121 = f32[] get-tuple-element(arg_tuple.118), index=2
  get-tuple-element.125 = f32[] get-tuple-element(arg_tuple.118), index=6
  get-tuple-element.120 = f32[] get-tuple-element(arg_tuple.118), index=1
  constant.127 = f32[] constant(1)
  add.128 = f32[] add(get-tuple-element.120, constant.127)
  divide.136 = f32[] divide(get-tuple-element.125, add.128)
  multiply.137 = f32[] multiply(get-tuple-element.121, divide.136)
  get-tuple-element.122 = f32[] get-tuple-element(arg_tuple.118), index=3
  add.138 = f32[] add(get-tuple-element.122, multiply.137)
  divide.139 = f32[] divide(multiply.137, add.138)
  constant.126 = f32[] constant(1.1920929e-07)
  compare.140 = pred[] compare(divide.139, constant.126), direction=GT
  and.141 = pred[] and(get-tuple-element.119, compare.140)
  select.142 = f32[] select(get-tuple-element.119, add.128, get-tuple-element.120)
  select.143 = f32[] select(get-tuple-element.119, multiply.137, get-tuple-element.121)
  select.144 = f32[] select(get-tuple-element.119, add.138, get-tuple-element.122)
  get-tuple-element.123 = f32[] get-tuple-element(arg_tuple.118), index=4
  divide.129 = f32[] divide(get-tuple-element.125, add.128)
  multiply.130 = f32[] multiply(get-tuple-element.123, divide.129)
  multiply.131 = f32[] multiply(get-tuple-element.121, get-tuple-element.125)
  multiply.132 = f32[] multiply(add.128, add.128)
  divide.133 = f32[] divide(multiply.131, multiply.132)
  subtract.134 = f32[] subtract(multiply.130, divide.133)
  select.145 = f32[] select(get-tuple-element.119, subtract.134, get-tuple-element.123)
  get-tuple-element.124 = f32[] get-tuple-element(arg_tuple.118), index=5
  add.135 = f32[] add(get-tuple-element.124, subtract.134)
  select.146 = f32[] select(get-tuple-element.119, add.135, get-tuple-element.124)
  ROOT tuple.147 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) tuple(and.141, select.142, select.143, select.144, select.145, select.146, get-tuple-element.125)
}

region_1.148 {
  arg_tuple.149 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) parameter(0)
  ROOT get-tuple-element.150 = pred[] get-tuple-element(arg_tuple.149), index=0
  get-tuple-element.151 = f32[] get-tuple-element(arg_tuple.149), index=1
  get-tuple-element.152 = f32[] get-tuple-element(arg_tuple.149), index=2
  get-tuple-element.153 = f32[] get-tuple-element(arg_tuple.149), index=3
  get-tuple-element.154 = f32[] get-tuple-element(arg_tuple.149), index=4
  get-tuple-element.155 = f32[] get-tuple-element(arg_tuple.149), index=5
  get-tuple-element.156 = f32[] get-tuple-element(arg_tuple.149), index=6
}

region_2.180 {
  arg_tuple.181 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) parameter(0)
  get-tuple-element.182 = pred[] get-tuple-element(arg_tuple.181), index=0
  get-tuple-element.189 = f32[] get-tuple-element(arg_tuple.181), index=7
  get-tuple-element.186 = f32[] get-tuple-element(arg_tuple.181), index=4
  constant.200 = f32[] constant(2)
  add.204 = f32[] add(get-tuple-element.186, constant.200)
  multiply.209 = f32[] multiply(get-tuple-element.189, add.204)
  get-tuple-element.191 = f32[] get-tuple-element(arg_tuple.181), index=9
  get-tuple-element.185 = f32[] get-tuple-element(arg_tuple.181), index=3
  constant.201 = f32[] constant(1)
  add.203 = f32[] add(get-tuple-element.185, constant.201)
  get-tuple-element.187 = f32[] get-tuple-element(arg_tuple.181), index=5
  add.202 = f32[] add(get-tuple-element.187, constant.201)
  multiply.205 = f32[] multiply(add.203, add.202)
  multiply.210 = f32[] multiply(get-tuple-element.191, multiply.205)
  subtract.211 = f32[] subtract(multiply.209, multiply.210)
  constant.199 = f32[] constant(0)
  compare.212 = pred[] compare(subtract.211, constant.199), direction=NE
  get-tuple-element.183 = f32[] get-tuple-element(arg_tuple.181), index=1
  get-tuple-element.188 = f32[] get-tuple-element(arg_tuple.181), index=6
  multiply.206 = f32[] multiply(get-tuple-element.188, add.204)
  get-tuple-element.190 = f32[] get-tuple-element(arg_tuple.181), index=8
  multiply.207 = f32[] multiply(get-tuple-element.190, multiply.205)
  subtract.208 = f32[] subtract(multiply.206, multiply.207)
  divide.213 = f32[] divide(subtract.208, subtract.211)
  subtract.214 = f32[] subtract(get-tuple-element.183, divide.213)
  divide.215 = f32[] divide(subtract.214, divide.213)
  abs.216 = f32[] abs(divide.215)
  select.217 = f32[] select(compare.212, abs.216, constant.201)
  constant.197 = f32[] constant(1.1920929e-07)
  compare.253 = pred[] compare(select.217, constant.197), direction=GT
  and.254 = pred[] and(get-tuple-element.182, compare.253)
  select.218 = f32[] select(compare.212, divide.213, get-tuple-element.183)
  select.255 = f32[] select(get-tuple-element.182, select.218, get-tuple-element.183)
  get-tuple-element.184 = f32[] get-tuple-element(arg_tuple.181), index=2
  select.256 = f32[] select(get-tuple-element.182, select.217, get-tuple-element.184)
  select.257 = f32[] select(get-tuple-element.182, add.203, get-tuple-element.185)
  select.258 = f32[] select(get-tuple-element.182, add.204, get-tuple-element.186)
  abs.235 = f32[] abs(subtract.208)
  constant.198 = f32[] constant(8388608)
  compare.236 = pred[] compare(abs.235, constant.198), direction=GT
  multiply.239 = f32[] multiply(subtract.208, constant.197)
  select.240 = f32[] select(compare.236, multiply.239, subtract.208)
  select.259 = f32[] select(get-tuple-element.182, select.240, get-tuple-element.188)
  multiply.243 = f32[] multiply(subtract.211, constant.197)
  select.244 = f32[] select(compare.236, multiply.243, subtract.211)
  select.260 = f32[] select(get-tuple-element.182, select.244, get-tuple-element.189)
  multiply.237 = f32[] multiply(get-tuple-element.188, constant.197)
  select.238 = f32[] select(compare.236, multiply.237, get-tuple-element.188)
  select.261 = f32[] select(get-tuple-element.182, select.238, get-tuple-element.190)
  multiply.241 = f32[] multiply(get-tuple-element.189, constant.197)
  select.242 = f32[] select(compare.236, multiply.241, get-tuple-element.189)
  select.262 = f32[] select(get-tuple-element.182, select.242, get-tuple-element.191)
  get-tuple-element.194 = f32[] get-tuple-element(arg_tuple.181), index=12
  multiply.245 = f32[] multiply(get-tuple-element.194, constant.197)
  select.246 = f32[] select(compare.236, multiply.245, get-tuple-element.194)
  get-tuple-element.192 = f32[] get-tuple-element(arg_tuple.181), index=10
  select.263 = f32[] select(get-tuple-element.182, select.246, get-tuple-element.192)
  get-tuple-element.195 = f32[] get-tuple-element(arg_tuple.181), index=13
  multiply.247 = f32[] multiply(get-tuple-element.195, constant.197)
  select.248 = f32[] select(compare.236, multiply.247, get-tuple-element.195)
  get-tuple-element.193 = f32[] get-tuple-element(arg_tuple.181), index=11
  select.264 = f32[] select(get-tuple-element.182, select.248, get-tuple-element.193)
  multiply.219 = f32[] multiply(get-tuple-element.194, add.204)
  subtract.220 = f32[] subtract(multiply.219, get-tuple-element.188)
  multiply.221 = f32[] multiply(get-tuple-element.192, multiply.205)
  subtract.222 = f32[] subtract(subtract.220, multiply.221)
  multiply.223 = f32[] multiply(get-tuple-element.190, add.202)
  add.224 = f32[] add(subtract.222, multiply.223)
  multiply.249 = f32[] multiply(add.224, constant.197)
  select.250 = f32[] select(compare.236, multiply.249, add.224)
  select.265 = f32[] select(get-tuple-element.182, select.250, get-tuple-element.194)
  multiply.225 = f32[] multiply(get-tuple-element.195, add.204)
  subtract.226 = f32[] subtract(multiply.225, get-tuple-element.189)
  multiply.227 = f32[] multiply(get-tuple-element.193, multiply.205)
  subtract.228 = f32[] subtract(subtract.226, multiply.227)
  multiply.229 = f32[] multiply(get-tuple-element.191, add.202)
  add.230 = f32[] add(subtract.228, multiply.229)
  multiply.251 = f32[] multiply(add.230, constant.197)
  select.252 = f32[] select(compare.236, multiply.251, add.230)
  select.266 = f32[] select(get-tuple-element.182, select.252, get-tuple-element.195)
  multiply.231 = f32[] multiply(select.218, add.230)
  subtract.232 = f32[] subtract(add.224, multiply.231)
  divide.233 = f32[] divide(subtract.232, subtract.211)
  get-tuple-element.196 = f32[] get-tuple-element(arg_tuple.181), index=14
  select.234 = f32[] select(compare.212, divide.233, get-tuple-element.196)
  select.267 = f32[] select(get-tuple-element.182, select.234, get-tuple-element.196)
  ROOT tuple.268 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) tuple(and.254, select.255, select.256, select.257, select.258, add.202, select.259, select.260, select.261, select.262, select.263, select.264, select.265, select.266, select.267)
}

region_3.269 {
  arg_tuple.270 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) parameter(0)
  get-tuple-element.272 = f32[] get-tuple-element(arg_tuple.270), index=1
  get-tuple-element.273 = f32[] get-tuple-element(arg_tuple.270), index=2
  get-tuple-element.274 = f32[] get-tuple-element(arg_tuple.270), index=3
  get-tuple-element.275 = f32[] get-tuple-element(arg_tuple.270), index=4
  get-tuple-element.277 = f32[] get-tuple-element(arg_tuple.270), index=6
  get-tuple-element.278 = f32[] get-tuple-element(arg_tuple.270), index=7
  get-tuple-element.279 = f32[] get-tuple-element(arg_tuple.270), index=8
  get-tuple-element.280 = f32[] get-tuple-element(arg_tuple.270), index=9
  get-tuple-element.281 = f32[] get-tuple-element(arg_tuple.270), index=10
  get-tuple-element.282 = f32[] get-tuple-element(arg_tuple.270), index=11
  get-tuple-element.283 = f32[] get-tuple-element(arg_tuple.270), index=12
  get-tuple-element.284 = f32[] get-tuple-element(arg_tuple.270), index=13
  get-tuple-element.285 = f32[] get-tuple-element(arg_tuple.270), index=14
  get-tuple-element.276 = f32[] get-tuple-element(arg_tuple.270), index=5
  constant.286 = f32[] constant(2000)
  compare.287 = pred[] compare(get-tuple-element.276, constant.286), direction=LT
  get-tuple-element.271 = pred[] get-tuple-element(arg_tuple.270), index=0
  ROOT and.288 = pred[] and(compare.287, get-tuple-element.271)
}

ENTRY main.313 {
  Arg_0.1 = bf16[9,11,3]{2,1,0} parameter(0)
  Arg_1.2 = bf16[11,9,3]{2,1,0} parameter(1)
  dot.39 = bf16[] dot(Arg_0.1, Arg_1.2), lhs_contracting_dims={2,1,0}, rhs_contracting_dims={2,0,1}
  constant.17 = bf16[] constant(0)
  maximum.41 = bf16[] maximum(dot.39, constant.17)
  convert.43 = f32[] convert(maximum.41)
  constant.7 = f32[] constant(0)
  compare.44 = pred[] compare(convert.43, constant.7), direction=LE
  constant.6 = f32[] constant(0.5)
  constant.8 = f32[] constant(7.5)
  log-plus-one.31 = f32[] log-plus-one(constant.7)
  constant.22 = f32[] constant(2.01490307)
  add.32 = f32[] add(log-plus-one.31, constant.22)
  divide.33 = f32[] divide(constant.8, add.32)
  subtract.34 = f32[] subtract(constant.6, divide.33)
  multiply.35 = f32[] multiply(subtract.34, add.32)
  constant.21 = f32[] constant(0.918938518)
  add.36 = f32[] add(multiply.35, constant.21)
  constant.5 = f32[] constant(5.57361031)
  add.37 = f32[] add(add.36, constant.5)
  convert.38 = bf16[] convert(add.37)
  constant.30 = bf16[] constant(0.007812)
  maximum.40 = bf16[] maximum(convert.38, constant.30)
  convert.42 = f32[] convert(maximum.40)
  compare.45 = pred[] compare(convert.42, constant.7), direction=LE
  or.46 = pred[] or(compare.44, compare.45)
  log.50 = f32[] log(convert.43)
  multiply.51 = f32[] multiply(convert.42, log.50)
  subtract.52 = f32[] subtract(multiply.51, convert.43)
  abs.107 = f32[] abs(convert.42)
  constant.18 = f32[] constant(inf)
  compare.108 = pred[] compare(abs.107, constant.18), direction=EQ
  compare.53 = pred[] compare(convert.42, constant.6), direction=LT
  abs.92 = f32[] abs(convert.42)
  floor.93 = f32[] floor(abs.92)
  subtract.94 = f32[] subtract(abs.92, floor.93)
  compare.95 = pred[] compare(constant.6, subtract.94), direction=LT
  constant.4 = f32[] constant(1)
  subtract.96 = f32[] subtract(constant.4, subtract.94)
  select.97 = f32[] select(compare.95, subtract.96, subtract.94)
  constant.20 = f32[] constant(3.14159274)
  multiply.98 = f32[] multiply(select.97, constant.20)
  sine.99 = f32[] sine(multiply.98)
  log.100 = f32[] log(sine.99)
  is-finite.103 = pred[] is-finite(log.100)
  constant.19 = f32[] constant(1.14472985)
  subtract.101 = f32[] subtract(constant.19, log.100)
  negate.54 = f32[] negate(convert.42)
  subtract.55 = f32[] subtract(convert.42, constant.4)
  select.56 = f32[] select(compare.53, negate.54, subtract.55)
  add.86 = f32[] add(select.56, constant.6)
  add.81 = f32[] add(select.56, constant.8)
  divide.82 = f32[] divide(select.56, constant.8)
  log-plus-one.83 = f32[] log-plus-one(divide.82)
  add.84 = f32[] add(log-plus-one.83, constant.22)
  divide.85 = f32[] divide(add.81, add.84)
  subtract.87 = f32[] subtract(add.86, divide.85)
  multiply.88 = f32[] multiply(subtract.87, add.84)
  add.90 = f32[] add(multiply.88, constant.21)
  constant.16 = f32[] constant(676.520386)
  add.57 = f32[] add(select.56, constant.4)
  divide.58 = f32[] divide(constant.16, add.57)
  add.59 = f32[] add(divide.58, constant.4)
  constant.29 = f32[] constant(-1259.13916)
  constant.15 = f32[] constant(2)
  add.60 = f32[] add(select.56, constant.15)
  divide.61 = f32[] divide(constant.29, add.60)
  add.62 = f32[] add(add.59, divide.61)
  constant.28 = f32[] constant(771.323425)
  constant.14 = f32[] constant(3)
  add.63 = f32[] add(select.56, constant.14)
  divide.64 = f32[] divide(constant.28, add.63)
  add.65 = f32[] add(add.62, divide.64)
  constant.27 = f32[] constant(-176.615036)
  constant.13 = f32[] constant(4)
  add.66 = f32[] add(select.56, constant.13)
  divide.67 = f32[] divide(constant.27, add.66)
  add.68 = f32[] add(add.65, divide.67)
  constant.26 = f32[] constant(12.5073433)
  constant.12 = f32[] constant(5)
  add.69 = f32[] add(select.56, constant.12)
  divide.70 = f32[] divide(constant.26, add.69)
  add.71 = f32[] add(add.68, divide.70)
  constant.25 = f32[] constant(-0.138571098)
  constant.11 = f32[] constant(6)
  add.72 = f32[] add(select.56, constant.11)
  divide.73 = f32[] divide(constant.25, add.72)
  add.74 = f32[] add(add.71, divide.73)
  constant.24 = f32[] constant(9.98436917e-06)
  constant.10 = f32[] constant(7)
  add.75 = f32[] add(select.56, constant.10)
  divide.76 = f32[] divide(constant.24, add.75)
  add.77 = f32[] add(add.74, divide.76)
  constant.23 = f32[] constant(1.50563267e-07)
  constant.9 = f32[] constant(8)
  add.78 = f32[] add(select.56, constant.9)
  divide.79 = f32[] divide(constant.23, add.78)
  add.80 = f32[] add(add.77, divide.79)
  log.89 = f32[] log(add.80)
  add.91 = f32[] add(add.90, log.89)
  subtract.102 = f32[] subtract(subtract.101, add.91)
  negate.104 = f32[] negate(log.100)
  select.105 = f32[] select(is-finite.103, subtract.102, negate.104)
  select.106 = f32[] select(compare.53, select.105, add.91)
  select.109 = f32[] select(compare.108, constant.18, select.106)
  subtract.110 = f32[] subtract(subtract.52, select.109)
  constant.3 = f32[] constant(-88.7228394)
  compare.111 = pred[] compare(subtract.110, constant.3), direction=LT
  or.112 = pred[] or(or.46, compare.111)
  not.113 = pred[] not(or.112)
  compare.47 = pred[] compare(convert.43, constant.4), direction=LT
  compare.48 = pred[] compare(convert.43, convert.42), direction=LT
  or.49 = pred[] or(compare.47, compare.48)
  and.115 = pred[] and(not.113, or.49)
  tuple.116 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) tuple(and.115, convert.42, constant.4, constant.4, constant.7, constant.7, convert.43)
  while.157 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) while(tuple.116), condition=region_1.148, body=region_0.117
  get-tuple-element.158 = pred[] get-tuple-element(while.157), index=0
  get-tuple-element.159 = f32[] get-tuple-element(while.157), index=1
  get-tuple-element.160 = f32[] get-tuple-element(while.157), index=2
  get-tuple-element.162 = f32[] get-tuple-element(while.157), index=4
  get-tuple-element.163 = f32[] get-tuple-element(while.157), index=5
  get-tuple-element.164 = f32[] get-tuple-element(while.157), index=6
  not.167 = pred[] not(or.49)
  and.168 = pred[] and(not.113, not.167)
  add.172 = f32[] add(convert.43, constant.4)
  subtract.169 = f32[] subtract(constant.4, convert.42)
  add.170 = f32[] add(convert.43, subtract.169)
  add.171 = f32[] add(add.170, constant.4)
  multiply.173 = f32[] multiply(add.171, convert.43)
  divide.174 = f32[] divide(add.172, multiply.173)
  negate.175 = f32[] negate(convert.43)
  multiply.176 = f32[] multiply(divide.174, negate.175)
  subtract.177 = f32[] subtract(constant.7, multiply.176)
  divide.178 = f32[] divide(subtract.177, multiply.173)
  tuple.179 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) tuple(and.168, divide.174, constant.4, subtract.169, add.171, constant.7, add.172, multiply.173, constant.4, convert.43, constant.7, constant.7, constant.7, negate.175, divide.178)
  while.289 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) while(tuple.179), condition=region_3.269, body=region_2.180
  get-tuple-element.290 = pred[] get-tuple-element(while.289), index=0
  get-tuple-element.292 = f32[] get-tuple-element(while.289), index=2
  get-tuple-element.293 = f32[] get-tuple-element(while.289), index=3
  get-tuple-element.294 = f32[] get-tuple-element(while.289), index=4
  get-tuple-element.295 = f32[] get-tuple-element(while.289), index=5
  get-tuple-element.296 = f32[] get-tuple-element(while.289), index=6
  get-tuple-element.297 = f32[] get-tuple-element(while.289), index=7
  get-tuple-element.298 = f32[] get-tuple-element(while.289), index=8
  get-tuple-element.299 = f32[] get-tuple-element(while.289), index=9
  get-tuple-element.300 = f32[] get-tuple-element(while.289), index=10
  get-tuple-element.301 = f32[] get-tuple-element(while.289), index=11
  get-tuple-element.302 = f32[] get-tuple-element(while.289), index=12
  get-tuple-element.303 = f32[] get-tuple-element(while.289), index=13
  get-tuple-element.304 = f32[] get-tuple-element(while.289), index=14
  compare.308 = pred[] compare(convert.43, constant.18), direction=EQ
  get-tuple-element.161 = f32[] get-tuple-element(while.157), index=3
  exponential.114 = f32[] exponential(subtract.110)
  multiply.165 = f32[] multiply(get-tuple-element.161, exponential.114)
  divide.166 = f32[] divide(multiply.165, convert.42)
  subtract.306 = f32[] subtract(constant.4, divide.166)
  get-tuple-element.291 = f32[] get-tuple-element(while.289), index=1
  multiply.305 = f32[] multiply(get-tuple-element.291, exponential.114)
  select.307 = f32[] select(or.49, subtract.306, multiply.305)
  select.309 = f32[] select(compare.308, constant.7, select.307)
  select.310 = f32[] select(or.46, constant.4, select.309)
  convert.311 = bf16[] convert(select.310)
  ROOT tuple.312 = (bf16[]) tuple(convert.311)
}

