/* This file is autogenerated! Please don't edit! */
HloModule xla_computation_unknown, entry_computation_layout={(bf16[])->(bf16[])}

region_0.38 {
  arg_tuple.39 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) parameter(0)
  get-tuple-element.40 = pred[] get-tuple-element(arg_tuple.39), index=0
  get-tuple-element.42 = f32[] get-tuple-element(arg_tuple.39), index=2
  get-tuple-element.46 = f32[] get-tuple-element(arg_tuple.39), index=6
  get-tuple-element.41 = f32[] get-tuple-element(arg_tuple.39), index=1
  constant.48 = f32[] constant(1)
  add.49 = f32[] add(get-tuple-element.41, constant.48)
  divide.57 = f32[] divide(get-tuple-element.46, add.49)
  multiply.58 = f32[] multiply(get-tuple-element.42, divide.57)
  get-tuple-element.43 = f32[] get-tuple-element(arg_tuple.39), index=3
  add.59 = f32[] add(get-tuple-element.43, multiply.58)
  divide.60 = f32[] divide(multiply.58, add.59)
  constant.47 = f32[] constant(1.1920929e-07)
  compare.61 = pred[] compare(divide.60, constant.47), direction=GT
  and.62 = pred[] and(get-tuple-element.40, compare.61)
  select.63 = f32[] select(get-tuple-element.40, add.49, get-tuple-element.41)
  select.64 = f32[] select(get-tuple-element.40, multiply.58, get-tuple-element.42)
  select.65 = f32[] select(get-tuple-element.40, add.59, get-tuple-element.43)
  get-tuple-element.44 = f32[] get-tuple-element(arg_tuple.39), index=4
  divide.50 = f32[] divide(get-tuple-element.46, add.49)
  multiply.51 = f32[] multiply(get-tuple-element.44, divide.50)
  multiply.52 = f32[] multiply(get-tuple-element.42, get-tuple-element.46)
  multiply.53 = f32[] multiply(add.49, add.49)
  divide.54 = f32[] divide(multiply.52, multiply.53)
  subtract.55 = f32[] subtract(multiply.51, divide.54)
  select.66 = f32[] select(get-tuple-element.40, subtract.55, get-tuple-element.44)
  get-tuple-element.45 = f32[] get-tuple-element(arg_tuple.39), index=5
  add.56 = f32[] add(get-tuple-element.45, subtract.55)
  select.67 = f32[] select(get-tuple-element.40, add.56, get-tuple-element.45)
  ROOT tuple.68 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) tuple(and.62, select.63, select.64, select.65, select.66, select.67, get-tuple-element.46)
}

region_1.69 {
  arg_tuple.70 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) parameter(0)
  ROOT get-tuple-element.71 = pred[] get-tuple-element(arg_tuple.70), index=0
  get-tuple-element.72 = f32[] get-tuple-element(arg_tuple.70), index=1
  get-tuple-element.73 = f32[] get-tuple-element(arg_tuple.70), index=2
  get-tuple-element.74 = f32[] get-tuple-element(arg_tuple.70), index=3
  get-tuple-element.75 = f32[] get-tuple-element(arg_tuple.70), index=4
  get-tuple-element.76 = f32[] get-tuple-element(arg_tuple.70), index=5
  get-tuple-element.77 = f32[] get-tuple-element(arg_tuple.70), index=6
}

region_2.99 {
  arg_tuple.100 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) parameter(0)
  get-tuple-element.101 = pred[] get-tuple-element(arg_tuple.100), index=0
  get-tuple-element.108 = f32[] get-tuple-element(arg_tuple.100), index=7
  get-tuple-element.105 = f32[] get-tuple-element(arg_tuple.100), index=4
  constant.119 = f32[] constant(2)
  add.123 = f32[] add(get-tuple-element.105, constant.119)
  multiply.128 = f32[] multiply(get-tuple-element.108, add.123)
  get-tuple-element.110 = f32[] get-tuple-element(arg_tuple.100), index=9
  get-tuple-element.104 = f32[] get-tuple-element(arg_tuple.100), index=3
  constant.120 = f32[] constant(1)
  add.122 = f32[] add(get-tuple-element.104, constant.120)
  get-tuple-element.106 = f32[] get-tuple-element(arg_tuple.100), index=5
  add.121 = f32[] add(get-tuple-element.106, constant.120)
  multiply.124 = f32[] multiply(add.122, add.121)
  multiply.129 = f32[] multiply(get-tuple-element.110, multiply.124)
  subtract.130 = f32[] subtract(multiply.128, multiply.129)
  constant.118 = f32[] constant(0)
  compare.131 = pred[] compare(subtract.130, constant.118), direction=NE
  get-tuple-element.102 = f32[] get-tuple-element(arg_tuple.100), index=1
  get-tuple-element.107 = f32[] get-tuple-element(arg_tuple.100), index=6
  multiply.125 = f32[] multiply(get-tuple-element.107, add.123)
  get-tuple-element.109 = f32[] get-tuple-element(arg_tuple.100), index=8
  multiply.126 = f32[] multiply(get-tuple-element.109, multiply.124)
  subtract.127 = f32[] subtract(multiply.125, multiply.126)
  divide.132 = f32[] divide(subtract.127, subtract.130)
  subtract.133 = f32[] subtract(get-tuple-element.102, divide.132)
  divide.134 = f32[] divide(subtract.133, divide.132)
  abs.135 = f32[] abs(divide.134)
  select.136 = f32[] select(compare.131, abs.135, constant.120)
  constant.116 = f32[] constant(1.1920929e-07)
  compare.172 = pred[] compare(select.136, constant.116), direction=GT
  and.173 = pred[] and(get-tuple-element.101, compare.172)
  select.137 = f32[] select(compare.131, divide.132, get-tuple-element.102)
  select.174 = f32[] select(get-tuple-element.101, select.137, get-tuple-element.102)
  get-tuple-element.103 = f32[] get-tuple-element(arg_tuple.100), index=2
  select.175 = f32[] select(get-tuple-element.101, select.136, get-tuple-element.103)
  select.176 = f32[] select(get-tuple-element.101, add.122, get-tuple-element.104)
  select.177 = f32[] select(get-tuple-element.101, add.123, get-tuple-element.105)
  abs.154 = f32[] abs(subtract.127)
  constant.117 = f32[] constant(8388608)
  compare.155 = pred[] compare(abs.154, constant.117), direction=GT
  multiply.158 = f32[] multiply(subtract.127, constant.116)
  select.159 = f32[] select(compare.155, multiply.158, subtract.127)
  select.178 = f32[] select(get-tuple-element.101, select.159, get-tuple-element.107)
  multiply.162 = f32[] multiply(subtract.130, constant.116)
  select.163 = f32[] select(compare.155, multiply.162, subtract.130)
  select.179 = f32[] select(get-tuple-element.101, select.163, get-tuple-element.108)
  multiply.156 = f32[] multiply(get-tuple-element.107, constant.116)
  select.157 = f32[] select(compare.155, multiply.156, get-tuple-element.107)
  select.180 = f32[] select(get-tuple-element.101, select.157, get-tuple-element.109)
  multiply.160 = f32[] multiply(get-tuple-element.108, constant.116)
  select.161 = f32[] select(compare.155, multiply.160, get-tuple-element.108)
  select.181 = f32[] select(get-tuple-element.101, select.161, get-tuple-element.110)
  get-tuple-element.113 = f32[] get-tuple-element(arg_tuple.100), index=12
  multiply.164 = f32[] multiply(get-tuple-element.113, constant.116)
  select.165 = f32[] select(compare.155, multiply.164, get-tuple-element.113)
  get-tuple-element.111 = f32[] get-tuple-element(arg_tuple.100), index=10
  select.182 = f32[] select(get-tuple-element.101, select.165, get-tuple-element.111)
  get-tuple-element.114 = f32[] get-tuple-element(arg_tuple.100), index=13
  multiply.166 = f32[] multiply(get-tuple-element.114, constant.116)
  select.167 = f32[] select(compare.155, multiply.166, get-tuple-element.114)
  get-tuple-element.112 = f32[] get-tuple-element(arg_tuple.100), index=11
  select.183 = f32[] select(get-tuple-element.101, select.167, get-tuple-element.112)
  multiply.138 = f32[] multiply(get-tuple-element.113, add.123)
  subtract.139 = f32[] subtract(multiply.138, get-tuple-element.107)
  multiply.140 = f32[] multiply(get-tuple-element.111, multiply.124)
  subtract.141 = f32[] subtract(subtract.139, multiply.140)
  multiply.142 = f32[] multiply(get-tuple-element.109, add.121)
  add.143 = f32[] add(subtract.141, multiply.142)
  multiply.168 = f32[] multiply(add.143, constant.116)
  select.169 = f32[] select(compare.155, multiply.168, add.143)
  select.184 = f32[] select(get-tuple-element.101, select.169, get-tuple-element.113)
  multiply.144 = f32[] multiply(get-tuple-element.114, add.123)
  subtract.145 = f32[] subtract(multiply.144, get-tuple-element.108)
  multiply.146 = f32[] multiply(get-tuple-element.112, multiply.124)
  subtract.147 = f32[] subtract(subtract.145, multiply.146)
  multiply.148 = f32[] multiply(get-tuple-element.110, add.121)
  add.149 = f32[] add(subtract.147, multiply.148)
  multiply.170 = f32[] multiply(add.149, constant.116)
  select.171 = f32[] select(compare.155, multiply.170, add.149)
  select.185 = f32[] select(get-tuple-element.101, select.171, get-tuple-element.114)
  multiply.150 = f32[] multiply(select.137, add.149)
  subtract.151 = f32[] subtract(add.143, multiply.150)
  divide.152 = f32[] divide(subtract.151, subtract.130)
  get-tuple-element.115 = f32[] get-tuple-element(arg_tuple.100), index=14
  select.153 = f32[] select(compare.131, divide.152, get-tuple-element.115)
  select.186 = f32[] select(get-tuple-element.101, select.153, get-tuple-element.115)
  ROOT tuple.187 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) tuple(and.173, select.174, select.175, select.176, select.177, add.121, select.178, select.179, select.180, select.181, select.182, select.183, select.184, select.185, select.186)
}

region_3.188 {
  arg_tuple.189 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) parameter(0)
  get-tuple-element.191 = f32[] get-tuple-element(arg_tuple.189), index=1
  get-tuple-element.192 = f32[] get-tuple-element(arg_tuple.189), index=2
  get-tuple-element.193 = f32[] get-tuple-element(arg_tuple.189), index=3
  get-tuple-element.194 = f32[] get-tuple-element(arg_tuple.189), index=4
  get-tuple-element.196 = f32[] get-tuple-element(arg_tuple.189), index=6
  get-tuple-element.197 = f32[] get-tuple-element(arg_tuple.189), index=7
  get-tuple-element.198 = f32[] get-tuple-element(arg_tuple.189), index=8
  get-tuple-element.199 = f32[] get-tuple-element(arg_tuple.189), index=9
  get-tuple-element.200 = f32[] get-tuple-element(arg_tuple.189), index=10
  get-tuple-element.201 = f32[] get-tuple-element(arg_tuple.189), index=11
  get-tuple-element.202 = f32[] get-tuple-element(arg_tuple.189), index=12
  get-tuple-element.203 = f32[] get-tuple-element(arg_tuple.189), index=13
  get-tuple-element.204 = f32[] get-tuple-element(arg_tuple.189), index=14
  get-tuple-element.195 = f32[] get-tuple-element(arg_tuple.189), index=5
  constant.205 = f32[] constant(2000)
  compare.206 = pred[] compare(get-tuple-element.195, constant.205), direction=LT
  get-tuple-element.190 = pred[] get-tuple-element(arg_tuple.189), index=0
  ROOT and.207 = pred[] and(compare.206, get-tuple-element.190)
}

ENTRY main.241 {
  Arg_0.1 = bf16[] parameter(0)
  constant.15 = bf16[] constant(0)
  maximum.16 = bf16[] maximum(Arg_0.1, constant.15)
  convert.17 = f32[] convert(maximum.16)
  constant.2 = f32[] constant(0)
  compare.18 = pred[] compare(convert.17, constant.2), direction=LE
  log.22 = f32[] log(convert.17)
  subtract.23 = f32[] subtract(log.22, convert.17)
  constant.6 = f32[] constant(0.5)
  constant.7 = f32[] constant(7.5)
  log-plus-one.24 = f32[] log-plus-one(constant.2)
  constant.14 = f32[] constant(2.01490307)
  add.25 = f32[] add(log-plus-one.24, constant.14)
  divide.26 = f32[] divide(constant.7, add.25)
  subtract.27 = f32[] subtract(constant.6, divide.26)
  multiply.28 = f32[] multiply(subtract.27, add.25)
  constant.13 = f32[] constant(0.918938518)
  add.29 = f32[] add(multiply.28, constant.13)
  constant.5 = f32[] constant(5.57361031)
  add.30 = f32[] add(add.29, constant.5)
  subtract.31 = f32[] subtract(subtract.23, add.30)
  constant.3 = f32[] constant(-88.7228394)
  compare.32 = pred[] compare(subtract.31, constant.3), direction=LT
  or.33 = pred[] or(compare.18, compare.32)
  not.34 = pred[] not(or.33)
  constant.4 = f32[] constant(1)
  compare.19 = pred[] compare(convert.17, constant.4), direction=LT
  compare.20 = pred[] compare(convert.17, constant.4), direction=LT
  or.21 = pred[] or(compare.19, compare.20)
  and.36 = pred[] and(not.34, or.21)
  tuple.37 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) tuple(and.36, constant.4, constant.4, constant.4, constant.2, constant.2, convert.17)
  while.78 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) while(tuple.37), condition=region_1.69, body=region_0.38
  get-tuple-element.79 = pred[] get-tuple-element(while.78), index=0
  get-tuple-element.80 = f32[] get-tuple-element(while.78), index=1
  get-tuple-element.81 = f32[] get-tuple-element(while.78), index=2
  get-tuple-element.83 = f32[] get-tuple-element(while.78), index=4
  get-tuple-element.84 = f32[] get-tuple-element(while.78), index=5
  get-tuple-element.85 = f32[] get-tuple-element(while.78), index=6
  not.88 = pred[] not(or.21)
  and.89 = pred[] and(not.34, not.88)
  add.91 = f32[] add(convert.17, constant.4)
  add.90 = f32[] add(convert.17, constant.4)
  multiply.92 = f32[] multiply(add.90, convert.17)
  divide.93 = f32[] divide(add.91, multiply.92)
  negate.94 = f32[] negate(convert.17)
  multiply.95 = f32[] multiply(divide.93, negate.94)
  subtract.96 = f32[] subtract(constant.2, multiply.95)
  divide.97 = f32[] divide(subtract.96, multiply.92)
  tuple.98 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) tuple(and.89, divide.93, constant.4, constant.2, add.90, constant.2, add.91, multiply.92, constant.4, convert.17, constant.2, constant.2, constant.2, negate.94, divide.97)
  while.208 = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) while(tuple.98), condition=region_3.188, body=region_2.99
  get-tuple-element.209 = pred[] get-tuple-element(while.208), index=0
  get-tuple-element.211 = f32[] get-tuple-element(while.208), index=2
  get-tuple-element.212 = f32[] get-tuple-element(while.208), index=3
  get-tuple-element.213 = f32[] get-tuple-element(while.208), index=4
  get-tuple-element.214 = f32[] get-tuple-element(while.208), index=5
  get-tuple-element.215 = f32[] get-tuple-element(while.208), index=6
  get-tuple-element.216 = f32[] get-tuple-element(while.208), index=7
  get-tuple-element.217 = f32[] get-tuple-element(while.208), index=8
  get-tuple-element.218 = f32[] get-tuple-element(while.208), index=9
  get-tuple-element.219 = f32[] get-tuple-element(while.208), index=10
  get-tuple-element.220 = f32[] get-tuple-element(while.208), index=11
  get-tuple-element.221 = f32[] get-tuple-element(while.208), index=12
  get-tuple-element.222 = f32[] get-tuple-element(while.208), index=13
  get-tuple-element.223 = f32[] get-tuple-element(while.208), index=14
  constant.11 = bf16[] constant(-1)
  constant.12 = f32[] constant(inf)
  compare.227 = pred[] compare(convert.17, constant.12), direction=EQ
  get-tuple-element.82 = f32[] get-tuple-element(while.78), index=3
  exponential.35 = f32[] exponential(subtract.31)
  multiply.86 = f32[] multiply(get-tuple-element.82, exponential.35)
  divide.87 = f32[] divide(multiply.86, constant.4)
  subtract.225 = f32[] subtract(constant.4, divide.87)
  get-tuple-element.210 = f32[] get-tuple-element(while.208), index=1
  multiply.224 = f32[] multiply(get-tuple-element.210, exponential.35)
  select.226 = f32[] select(or.21, subtract.225, multiply.224)
  select.228 = f32[] select(compare.227, constant.2, select.226)
  select.229 = f32[] select(compare.18, constant.4, select.228)
  convert.230 = bf16[] convert(select.229)
  constant.8 = bf16[] constant(1)
  clamp.231 = bf16[] clamp(constant.11, convert.230, constant.8)
  compare.232 = pred[] compare(clamp.231, constant.11), direction=NE
  multiply.233 = bf16[] multiply(clamp.231, clamp.231)
  subtract.234 = bf16[] subtract(constant.8, multiply.233)
  sqrt.235 = bf16[] sqrt(subtract.234)
  add.236 = bf16[] add(clamp.231, constant.8)
  atan2.237 = bf16[] atan2(sqrt.235, add.236)
  constant.10 = bf16[] constant(2)
  multiply.238 = bf16[] multiply(atan2.237, constant.10)
  constant.9 = bf16[] constant(3.141)
  select.239 = bf16[] select(compare.232, multiply.238, constant.9)
  ROOT tuple.240 = (bf16[]) tuple(select.239)
}

