// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: hlo-opt %s --platform=gpu --stage=llvm-before-optimizations --xla_gpu_target_config_filename=%S/../../../tools/hlo_opt/gpu_specs/%{GPU}.txtpb --split-input-file | FileCheck --check-prefixes=CHECK,CHECK-%{PTX} %s

HloModule TestModule, is_scheduled=true

compare {
  p.0.lhs = f32[] parameter(0)
  p.0.rhs = f32[] parameter(1)
  ROOT lt = pred[] compare(p.0.lhs, p.0.rhs), direction=LT
}

// CHECK-LABEL: @sort(
// CHECK:         %[[VAL_0:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_1:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_2:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_3:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_4:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_5:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_6:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_7:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_8:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_9:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_10:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_11:.*]] = alloca i8, align 1
// CHECK-PTX:     %[[VAL_12:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x
// CHECK-GCN:     %[[VAL_12:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_13:.*]] = zext i32 %[[VAL_12]] to i64
// CHECK-PTX:     %[[VAL_14:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_14:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_15:.*]] = zext i32 %[[VAL_14]] to i64
// CHECK:         %[[VAL_16:.*]] = mul nuw nsw i64 %[[VAL_13]], 1
// CHECK:         %[[VAL_17:.*]] = add nuw nsw i64 %[[VAL_16]], %[[VAL_15]]
// CHECK:         %[[VAL_18:.*]] = icmp ult i64 %[[VAL_17]], 2
// CHECK:         call void @llvm.assume(i1 %[[VAL_18]])
// CHECK:         %[[VAL_19:.*]] = add nuw nsw i64 %[[VAL_17]], 0
// CHECK:         %[[VAL_20:.*]] = udiv i64 %[[VAL_19]], 1
// CHECK:         %[[VAL_21:.*]] = urem i64 %[[VAL_20]], 1
// CHECK:         %[[VAL_22:.*]] = udiv i64 %[[VAL_19]], 1
// CHECK:         %[[VAL_23:.*]] = icmp ult i64 %[[VAL_17]], 2
// CHECK:         br i1 %[[VAL_23]], label %[[VAL_24:.*]], label %[[VAL_25:.*]]
// CHECK:       sort.in_bounds-after:                             ; preds = %[[VAL_26:.*]], %[[VAL_27:.*]]
// CHECK:         ret void
// CHECK:       sort.in_bounds-true:                              ; preds = %[[VAL_27]]
// CHECK-PTX:     %[[VAL_28:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_28:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_29:.*]] = sext i32 %[[VAL_28]] to i64
// CHECK:         %[[VAL_30:.*]] = mul nuw nsw i64 %[[VAL_21]], 4
// CHECK:         %[[VAL_31:.*]] = mul nuw nsw i64 %[[VAL_29]], 4
// CHECK:         %[[VAL_32:.*]] = add nuw nsw i64 %[[VAL_30]], 0
// CHECK:         %[[VAL_33:.*]] = icmp slt i64 %[[VAL_32]], 3
// CHECK:         br i1 %[[VAL_33]], label %[[VAL_34:.*]], label %[[VAL_35:.*]]
// CHECK:       smaller_keys_index-after:                         ; preds = %[[VAL_34]], %[[VAL_24]]
// CHECK:         %[[VAL_36:.*]] = add nuw nsw i64 %[[VAL_30]], 1
// CHECK:         %[[VAL_37:.*]] = icmp slt i64 %[[VAL_36]], 3
// CHECK:         br i1 %[[VAL_37]], label %[[VAL_38:.*]], label %[[VAL_39:.*]]
// CHECK:       smaller_keys_index-after3:                        ; preds = %[[VAL_38]], %[[VAL_35]]
// CHECK:         %[[VAL_40:.*]] = add nuw nsw i64 %[[VAL_30]], 2
// CHECK:         %[[VAL_41:.*]] = icmp slt i64 %[[VAL_40]], 3
// CHECK:         br i1 %[[VAL_41]], label %[[VAL_42:.*]], label %[[VAL_43:.*]]
// CHECK:       smaller_keys_index-after7:                        ; preds = %[[VAL_42]], %[[VAL_39]]
// CHECK:         %[[VAL_44:.*]] = add nuw nsw i64 %[[VAL_30]], 3
// CHECK:         %[[VAL_45:.*]] = icmp slt i64 %[[VAL_44]], 3
// CHECK:         br i1 %[[VAL_45]], label %[[VAL_46:.*]], label %[[VAL_47:.*]]
// CHECK:       smaller_keys_index-after11:                       ; preds = %[[VAL_46]], %[[VAL_43]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_48:.*]] = mul i64 %[[VAL_21]], 4
// CHECK:         %[[VAL_49:.*]] = icmp uge i64 %[[VAL_48]], 0
// CHECK:         br i1 %[[VAL_49]], label %[[VAL_50:.*]], label %[[VAL_51:.*]]
// CHECK:       is_last_tile-after:                               ; preds = %[[VAL_52:.*]], %[[VAL_53:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_54:.*]] = mul i64 %[[VAL_21]], 4
// CHECK:         %[[VAL_55:.*]] = icmp uge i64 %[[VAL_54]], 0
// CHECK:         br i1 %[[VAL_55]], label %[[VAL_56:.*]], label %[[VAL_57:.*]]
// CHECK:       is_last_tile-after38:                             ; preds = %[[VAL_58:.*]], %[[VAL_59:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_60:.*]] = mul i64 %[[VAL_21]], 4
// CHECK:         %[[VAL_61:.*]] = icmp uge i64 %[[VAL_60]], 0
// CHECK:         br i1 %[[VAL_61]], label %[[VAL_62:.*]], label %[[VAL_63:.*]]
// CHECK:       is_last_tile-after71:                             ; preds = %[[VAL_64:.*]], %[[VAL_65:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_66:.*]] = mul nuw nsw i64 %[[VAL_21]], 4
// CHECK:         %[[VAL_67:.*]] = mul nuw nsw i64 %[[VAL_29]], 4
// CHECK:         %[[VAL_68:.*]] = add nuw nsw i64 %[[VAL_66]], 0
// CHECK:         %[[VAL_69:.*]] = icmp slt i64 %[[VAL_68]], 3
// CHECK:         br i1 %[[VAL_69]], label %[[VAL_70:.*]], label %[[VAL_71:.*]]
// CHECK:       smaller_keys_index-after106:                      ; preds = %[[VAL_70]], %[[VAL_72:.*]]
// CHECK:         %[[VAL_73:.*]] = add nuw nsw i64 %[[VAL_66]], 1
// CHECK:         %[[VAL_74:.*]] = icmp slt i64 %[[VAL_73]], 3
// CHECK:         br i1 %[[VAL_74]], label %[[VAL_75:.*]], label %[[VAL_76:.*]]
// CHECK:       smaller_keys_index-after110:                      ; preds = %[[VAL_75]], %[[VAL_71]]
// CHECK:         %[[VAL_77:.*]] = add nuw nsw i64 %[[VAL_66]], 2
// CHECK:         %[[VAL_78:.*]] = icmp slt i64 %[[VAL_77]], 3
// CHECK:         br i1 %[[VAL_78]], label %[[VAL_79:.*]], label %[[VAL_80:.*]]
// CHECK:       smaller_keys_index-after114:                      ; preds = %[[VAL_79]], %[[VAL_76]]
// CHECK:         %[[VAL_81:.*]] = add nuw nsw i64 %[[VAL_66]], 3
// CHECK:         %[[VAL_82:.*]] = icmp slt i64 %[[VAL_81]], 3
// CHECK:         br i1 %[[VAL_82]], label %[[VAL_83:.*]], label %[[VAL_26]]
// CHECK:       smaller_keys_index-after118:                      ; preds = %[[VAL_83]], %[[VAL_80]]
// CHECK:         br label %[[VAL_25]]
// CHECK:       smaller_keys_index-true:                          ; preds = %[[VAL_24]]
// CHECK:         %[[VAL_84:.*]] = add nuw nsw i64 %[[VAL_31]], 0
// CHECK:         %[[VAL_85:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_86:.*]], i64 0, i64 %[[VAL_22]], i64 %[[VAL_32]]
// CHECK:         %[[VAL_87:.*]] = load float, ptr %[[VAL_85]], align 4
// CHECK:         %[[VAL_88:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_84]]
// CHECK:         store float %[[VAL_87]], ptr addrspace(3) %[[VAL_88]], align 4
// CHECK:         br label %[[VAL_35]]
// CHECK:       smaller_keys_index-true2:                         ; preds = %[[VAL_35]]
// CHECK:         %[[VAL_89:.*]] = add nuw nsw i64 %[[VAL_31]], 1
// CHECK:         %[[VAL_90:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_86]], i64 0, i64 %[[VAL_22]], i64 %[[VAL_36]]
// CHECK:         %[[VAL_91:.*]] = load float, ptr %[[VAL_90]], align 4
// CHECK:         %[[VAL_92:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_89]]
// CHECK:         store float %[[VAL_91]], ptr addrspace(3) %[[VAL_92]], align 4
// CHECK:         br label %[[VAL_39]]
// CHECK:       smaller_keys_index-true6:                         ; preds = %[[VAL_39]]
// CHECK:         %[[VAL_93:.*]] = add nuw nsw i64 %[[VAL_31]], 2
// CHECK:         %[[VAL_94:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_86]], i64 0, i64 %[[VAL_22]], i64 %[[VAL_40]]
// CHECK:         %[[VAL_95:.*]] = load float, ptr %[[VAL_94]], align 4
// CHECK:         %[[VAL_96:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_93]]
// CHECK:         store float %[[VAL_95]], ptr addrspace(3) %[[VAL_96]], align 4
// CHECK:         br label %[[VAL_43]]
// CHECK:       smaller_keys_index-true10:                        ; preds = %[[VAL_43]]
// CHECK:         %[[VAL_97:.*]] = add nuw nsw i64 %[[VAL_31]], 3
// CHECK:         %[[VAL_98:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_86]], i64 0, i64 %[[VAL_22]], i64 %[[VAL_44]]
// CHECK:         %[[VAL_99:.*]] = load float, ptr %[[VAL_98]], align 4
// CHECK:         %[[VAL_100:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_97]]
// CHECK:         store float %[[VAL_99]], ptr addrspace(3) %[[VAL_100]], align 4
// CHECK:         br label %[[VAL_47]]
// CHECK:       is_last_tile-true:                                ; preds = %[[VAL_47]]
// CHECK:         %[[VAL_101:.*]] = mul nuw nsw i64 %[[VAL_29]], 2
// CHECK:         %[[VAL_102:.*]] = add nuw nsw i64 %[[VAL_101]], 0
// CHECK:         %[[VAL_103:.*]] = mul i64 %[[VAL_102]], 2
// CHECK:         %[[VAL_104:.*]] = xor i64 %[[VAL_103]], 1
// CHECK:         %[[VAL_105:.*]] = icmp slt i64 %[[VAL_104]], 3
// CHECK:         br i1 %[[VAL_105]], label %[[VAL_106:.*]], label %[[VAL_107:.*]]
// CHECK:       smaller_comparison_index-after:                   ; preds = %[[VAL_108:.*]], %[[VAL_50]]
// CHECK:         %[[VAL_109:.*]] = add nuw nsw i64 %[[VAL_101]], 1
// CHECK:         %[[VAL_110:.*]] = mul i64 %[[VAL_109]], 2
// CHECK:         %[[VAL_111:.*]] = xor i64 %[[VAL_110]], 1
// CHECK:         %[[VAL_112:.*]] = icmp slt i64 %[[VAL_111]], 3
// CHECK:         br i1 %[[VAL_112]], label %[[VAL_113:.*]], label %[[VAL_53]]
// CHECK:       smaller_comparison_index-after16:                 ; preds = %[[VAL_114:.*]], %[[VAL_107]]
// CHECK:         br label %[[VAL_115:.*]]
// CHECK:       is_last_tile-false:                               ; preds = %[[VAL_47]]
// CHECK:         %[[VAL_116:.*]] = mul nuw nsw i64 %[[VAL_29]], 2
// CHECK:         %[[VAL_117:.*]] = add nuw nsw i64 %[[VAL_116]], 0
// CHECK:         %[[VAL_118:.*]] = mul i64 %[[VAL_117]], 2
// CHECK:         %[[VAL_119:.*]] = xor i64 %[[VAL_118]], 1
// CHECK:         br i1 true, label %[[VAL_120:.*]], label %[[VAL_121:.*]]
// CHECK:       smaller_comparison_index-after24:                 ; preds = %[[VAL_122:.*]], %[[VAL_51]]
// CHECK:         %[[VAL_123:.*]] = add nuw nsw i64 %[[VAL_116]], 1
// CHECK:         %[[VAL_124:.*]] = mul i64 %[[VAL_123]], 2
// CHECK:         %[[VAL_125:.*]] = xor i64 %[[VAL_124]], 1
// CHECK:         br i1 true, label %[[VAL_126:.*]], label %[[VAL_52]]
// CHECK:       smaller_comparison_index-after31:                 ; preds = %[[VAL_127:.*]], %[[VAL_121]]
// CHECK:         br label %[[VAL_115]]
// CHECK:       smaller_comparison_index-true:                    ; preds = %[[VAL_50]]
// CHECK:         %[[VAL_128:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_104]]
// CHECK:         %[[VAL_129:.*]] = addrspacecast ptr addrspace(3) %[[VAL_128]] to ptr
// CHECK:         %[[VAL_130:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_103]]
// CHECK:         %[[VAL_131:.*]] = addrspacecast ptr addrspace(3) %[[VAL_130]] to ptr
// CHECK-GCN:     %[[VAL_11_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_11]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_129]], ptr %[[VAL_131]], ptr %[[VAL_11_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_129]], ptr %[[VAL_131]], ptr %[[VAL_11]])
// CHECK-PTX:     %[[VAL_132:.*]] = load i8, ptr %[[VAL_11]], align 1
// CHECK-GCN:     %[[VAL_132:.*]] = load i8, ptr addrspace(5) %[[VAL_11]], align 1
// CHECK:         %[[VAL_133:.*]] = icmp ne i8 %[[VAL_132]], 0
// CHECK:         br i1 %[[VAL_133]], label %[[VAL_134:.*]], label %[[VAL_108]]
// CHECK:       is_smaller_than-after:                            ; preds = %[[VAL_134]], %[[VAL_106]]
// CHECK:         br label %[[VAL_107]]
// CHECK:       is_smaller_than-true:                             ; preds = %[[VAL_106]]
// CHECK:         %[[VAL_135:.*]] = load float, ptr %[[VAL_129]], align 4
// CHECK:         %[[VAL_136:.*]] = load float, ptr %[[VAL_131]], align 4
// CHECK:         %[[VAL_137:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_103]]
// CHECK:         store float %[[VAL_135]], ptr addrspace(3) %[[VAL_137]], align 4
// CHECK:         %[[VAL_138:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_104]]
// CHECK:         store float %[[VAL_136]], ptr addrspace(3) %[[VAL_138]], align 4
// CHECK:         br label %[[VAL_108]]
// CHECK:       smaller_comparison_index-true15:                  ; preds = %[[VAL_107]]
// CHECK:         %[[VAL_139:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_111]]
// CHECK:         %[[VAL_140:.*]] = addrspacecast ptr addrspace(3) %[[VAL_139]] to ptr
// CHECK:         %[[VAL_141:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_110]]
// CHECK:         %[[VAL_142:.*]] = addrspacecast ptr addrspace(3) %[[VAL_141]] to ptr
// CHECK-GCN:     %[[VAL_10_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_10]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_140]], ptr %[[VAL_142]], ptr %[[VAL_10_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_140]], ptr %[[VAL_142]], ptr %[[VAL_10]])
// CHECK-PTX:     %[[VAL_143:.*]] = load i8, ptr %[[VAL_10]], align 1
// CHECK-GCN:     %[[VAL_143:.*]] = load i8, ptr addrspace(5) %[[VAL_10]], align 1
// CHECK:         %[[VAL_144:.*]] = icmp ne i8 %[[VAL_143]], 0
// CHECK:         br i1 %[[VAL_144]], label %[[VAL_145:.*]], label %[[VAL_114]]
// CHECK:       is_smaller_than-after20:                          ; preds = %[[VAL_145]], %[[VAL_113]]
// CHECK:         br label %[[VAL_53]]
// CHECK:       is_smaller_than-true19:                           ; preds = %[[VAL_113]]
// CHECK:         %[[VAL_146:.*]] = load float, ptr %[[VAL_140]], align 4
// CHECK:         %[[VAL_147:.*]] = load float, ptr %[[VAL_142]], align 4
// CHECK:         %[[VAL_148:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_110]]
// CHECK:         store float %[[VAL_146]], ptr addrspace(3) %[[VAL_148]], align 4
// CHECK:         %[[VAL_149:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_111]]
// CHECK:         store float %[[VAL_147]], ptr addrspace(3) %[[VAL_149]], align 4
// CHECK:         br label %[[VAL_114]]
// CHECK:       smaller_comparison_index-true23:                  ; preds = %[[VAL_51]]
// CHECK:         %[[VAL_150:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_119]]
// CHECK:         %[[VAL_151:.*]] = addrspacecast ptr addrspace(3) %[[VAL_150]] to ptr
// CHECK:         %[[VAL_152:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_118]]
// CHECK:         %[[VAL_153:.*]] = addrspacecast ptr addrspace(3) %[[VAL_152]] to ptr
// CHECK-GCN:     %[[VAL_9_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_9]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_151]], ptr %[[VAL_153]], ptr %[[VAL_9_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_151]], ptr %[[VAL_153]], ptr %[[VAL_9]])
// CHECK-PTX:     %[[VAL_154:.*]] = load i8, ptr %[[VAL_9]], align 1
// CHECK-GCN:     %[[VAL_154:.*]] = load i8, ptr addrspace(5) %[[VAL_9]], align 1
// CHECK:         %[[VAL_155:.*]] = icmp ne i8 %[[VAL_154]], 0
// CHECK:         br i1 %[[VAL_155]], label %[[VAL_156:.*]], label %[[VAL_122]]
// CHECK:       is_smaller_than-after28:                          ; preds = %[[VAL_156]], %[[VAL_120]]
// CHECK:         br label %[[VAL_121]]
// CHECK:       is_smaller_than-true27:                           ; preds = %[[VAL_120]]
// CHECK:         %[[VAL_157:.*]] = load float, ptr %[[VAL_151]], align 4
// CHECK:         %[[VAL_158:.*]] = load float, ptr %[[VAL_153]], align 4
// CHECK:         %[[VAL_159:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_118]]
// CHECK:         store float %[[VAL_157]], ptr addrspace(3) %[[VAL_159]], align 4
// CHECK:         %[[VAL_160:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_119]]
// CHECK:         store float %[[VAL_158]], ptr addrspace(3) %[[VAL_160]], align 4
// CHECK:         br label %[[VAL_122]]
// CHECK:       smaller_comparison_index-true30:                  ; preds = %[[VAL_121]]
// CHECK:         %[[VAL_161:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_125]]
// CHECK:         %[[VAL_162:.*]] = addrspacecast ptr addrspace(3) %[[VAL_161]] to ptr
// CHECK:         %[[VAL_163:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_124]]
// CHECK:         %[[VAL_164:.*]] = addrspacecast ptr addrspace(3) %[[VAL_163]] to ptr
// CHECK-GCN:     %[[VAL_8_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_8]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_162]], ptr %[[VAL_164]], ptr %[[VAL_8_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_162]], ptr %[[VAL_164]], ptr %[[VAL_8]])
// CHECK-PTX:     %[[VAL_165:.*]] = load i8, ptr %[[VAL_8]], align 1
// CHECK-GCN:     %[[VAL_165:.*]] = load i8, ptr addrspace(5) %[[VAL_8]], align 1
// CHECK:         %[[VAL_166:.*]] = icmp ne i8 %[[VAL_165]], 0
// CHECK:         br i1 %[[VAL_166]], label %[[VAL_167:.*]], label %[[VAL_127]]
// CHECK:       is_smaller_than-after35:                          ; preds = %[[VAL_167]], %[[VAL_126]]
// CHECK:         br label %[[VAL_52]]
// CHECK:       is_smaller_than-true34:                           ; preds = %[[VAL_126]]
// CHECK:         %[[VAL_168:.*]] = load float, ptr %[[VAL_162]], align 4
// CHECK:         %[[VAL_169:.*]] = load float, ptr %[[VAL_164]], align 4
// CHECK:         %[[VAL_170:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_124]]
// CHECK:         store float %[[VAL_168]], ptr addrspace(3) %[[VAL_170]], align 4
// CHECK:         %[[VAL_171:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_125]]
// CHECK:         store float %[[VAL_169]], ptr addrspace(3) %[[VAL_171]], align 4
// CHECK:         br label %[[VAL_127]]
// CHECK:       is_last_tile-true36:                              ; preds = %[[VAL_115]]
// CHECK:         %[[VAL_172:.*]] = mul nuw nsw i64 %[[VAL_29]], 2
// CHECK:         %[[VAL_173:.*]] = add nuw nsw i64 %[[VAL_172]], 0
// CHECK:         %[[VAL_174:.*]] = icmp slt i64 %[[VAL_173]], 2
// CHECK:         %[[VAL_175:.*]] = select i1 %[[VAL_174]], i64 %[[VAL_173]], i64 0
// CHECK:         %[[VAL_176:.*]] = xor i64 %[[VAL_175]], 3
// CHECK:         %[[VAL_177:.*]] = icmp slt i64 %[[VAL_176]], 3
// CHECK:         br i1 %[[VAL_177]], label %[[VAL_178:.*]], label %[[VAL_179:.*]]
// CHECK:       smaller_comparison_index-after42:                 ; preds = %[[VAL_180:.*]], %[[VAL_56]]
// CHECK:         %[[VAL_181:.*]] = add nuw nsw i64 %[[VAL_172]], 1
// CHECK:         %[[VAL_182:.*]] = icmp slt i64 %[[VAL_181]], 2
// CHECK:         %[[VAL_183:.*]] = select i1 %[[VAL_182]], i64 %[[VAL_181]], i64 0
// CHECK:         %[[VAL_184:.*]] = xor i64 %[[VAL_183]], 3
// CHECK:         %[[VAL_185:.*]] = icmp slt i64 %[[VAL_184]], 3
// CHECK:         br i1 %[[VAL_185]], label %[[VAL_186:.*]], label %[[VAL_59]]
// CHECK:       smaller_comparison_index-after49:                 ; preds = %[[VAL_187:.*]], %[[VAL_179]]
// CHECK:         br label %[[VAL_188:.*]]
// CHECK:       is_last_tile-false37:                             ; preds = %[[VAL_115]]
// CHECK:         %[[VAL_189:.*]] = mul nuw nsw i64 %[[VAL_29]], 2
// CHECK:         %[[VAL_190:.*]] = add nuw nsw i64 %[[VAL_189]], 0
// CHECK:         %[[VAL_191:.*]] = icmp slt i64 %[[VAL_190]], 2
// CHECK:         %[[VAL_192:.*]] = select i1 %[[VAL_191]], i64 %[[VAL_190]], i64 7
// CHECK:         %[[VAL_193:.*]] = xor i64 %[[VAL_192]], 3
// CHECK:         br i1 true, label %[[VAL_194:.*]], label %[[VAL_195:.*]]
// CHECK:       smaller_comparison_index-after57:                 ; preds = %[[VAL_196:.*]], %[[VAL_57]]
// CHECK:         %[[VAL_197:.*]] = add nuw nsw i64 %[[VAL_189]], 1
// CHECK:         %[[VAL_198:.*]] = icmp slt i64 %[[VAL_197]], 2
// CHECK:         %[[VAL_199:.*]] = select i1 %[[VAL_198]], i64 %[[VAL_197]], i64 7
// CHECK:         %[[VAL_200:.*]] = xor i64 %[[VAL_199]], 3
// CHECK:         br i1 true, label %[[VAL_201:.*]], label %[[VAL_58]]
// CHECK:       smaller_comparison_index-after64:                 ; preds = %[[VAL_202:.*]], %[[VAL_195]]
// CHECK:         br label %[[VAL_188]]
// CHECK:       smaller_comparison_index-true41:                  ; preds = %[[VAL_56]]
// CHECK:         %[[VAL_203:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_176]]
// CHECK:         %[[VAL_204:.*]] = addrspacecast ptr addrspace(3) %[[VAL_203]] to ptr
// CHECK:         %[[VAL_205:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_175]]
// CHECK:         %[[VAL_206:.*]] = addrspacecast ptr addrspace(3) %[[VAL_205]] to ptr
// CHECK-GCN:     %[[VAL_7_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_7]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_204]], ptr %[[VAL_206]], ptr %[[VAL_7_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_204]], ptr %[[VAL_206]], ptr %[[VAL_7]])
// CHECK-PTX:     %[[VAL_207:.*]] = load i8, ptr %[[VAL_7]], align 1
// CHECK-GCN:     %[[VAL_207:.*]] = load i8, ptr addrspace(5) %[[VAL_7]], align 1
// CHECK:         %[[VAL_208:.*]] = icmp ne i8 %[[VAL_207]], 0
// CHECK:         br i1 %[[VAL_208]], label %[[VAL_209:.*]], label %[[VAL_180]]
// CHECK:       is_smaller_than-after46:                          ; preds = %[[VAL_209]], %[[VAL_178]]
// CHECK:         br label %[[VAL_179]]
// CHECK:       is_smaller_than-true45:                           ; preds = %[[VAL_178]]
// CHECK:         %[[VAL_210:.*]] = load float, ptr %[[VAL_204]], align 4
// CHECK:         %[[VAL_211:.*]] = load float, ptr %[[VAL_206]], align 4
// CHECK:         %[[VAL_212:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_175]]
// CHECK:         store float %[[VAL_210]], ptr addrspace(3) %[[VAL_212]], align 4
// CHECK:         %[[VAL_213:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_176]]
// CHECK:         store float %[[VAL_211]], ptr addrspace(3) %[[VAL_213]], align 4
// CHECK:         br label %[[VAL_180]]
// CHECK:       smaller_comparison_index-true48:                  ; preds = %[[VAL_179]]
// CHECK:         %[[VAL_214:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_184]]
// CHECK:         %[[VAL_215:.*]] = addrspacecast ptr addrspace(3) %[[VAL_214]] to ptr
// CHECK:         %[[VAL_216:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_183]]
// CHECK:         %[[VAL_217:.*]] = addrspacecast ptr addrspace(3) %[[VAL_216]] to ptr
// CHECK-GCN:     %[[VAL_6_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_6]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_215]], ptr %[[VAL_217]], ptr %[[VAL_6_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_215]], ptr %[[VAL_217]], ptr %[[VAL_6]])
// CHECK-PTX:     %[[VAL_218:.*]] = load i8, ptr %[[VAL_6]], align 1
// CHECK-GCN:     %[[VAL_218:.*]] = load i8, ptr addrspace(5) %[[VAL_6]], align 1
// CHECK:         %[[VAL_219:.*]] = icmp ne i8 %[[VAL_218]], 0
// CHECK:         br i1 %[[VAL_219]], label %[[VAL_220:.*]], label %[[VAL_187]]
// CHECK:       is_smaller_than-after53:                          ; preds = %[[VAL_220]], %[[VAL_186]]
// CHECK:         br label %[[VAL_59]]
// CHECK:       is_smaller_than-true52:                           ; preds = %[[VAL_186]]
// CHECK:         %[[VAL_221:.*]] = load float, ptr %[[VAL_215]], align 4
// CHECK:         %[[VAL_222:.*]] = load float, ptr %[[VAL_217]], align 4
// CHECK:         %[[VAL_223:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_183]]
// CHECK:         store float %[[VAL_221]], ptr addrspace(3) %[[VAL_223]], align 4
// CHECK:         %[[VAL_224:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_184]]
// CHECK:         store float %[[VAL_222]], ptr addrspace(3) %[[VAL_224]], align 4
// CHECK:         br label %[[VAL_187]]
// CHECK:       smaller_comparison_index-true56:                  ; preds = %[[VAL_57]]
// CHECK:         %[[VAL_225:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_193]]
// CHECK:         %[[VAL_226:.*]] = addrspacecast ptr addrspace(3) %[[VAL_225]] to ptr
// CHECK:         %[[VAL_227:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_192]]
// CHECK:         %[[VAL_228:.*]] = addrspacecast ptr addrspace(3) %[[VAL_227]] to ptr
// CHECK-GCN:     %[[VAL_5_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_5]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_226]], ptr %[[VAL_228]], ptr %[[VAL_5_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_226]], ptr %[[VAL_228]], ptr %[[VAL_5]])
// CHECK-PTX:     %[[VAL_229:.*]] = load i8, ptr %[[VAL_5]], align 1
// CHECK-GCN:     %[[VAL_229:.*]] = load i8, ptr addrspace(5) %[[VAL_5]], align 1
// CHECK:         %[[VAL_230:.*]] = icmp ne i8 %[[VAL_229]], 0
// CHECK:         br i1 %[[VAL_230]], label %[[VAL_231:.*]], label %[[VAL_196]]
// CHECK:       is_smaller_than-after61:                          ; preds = %[[VAL_231]], %[[VAL_194]]
// CHECK:         br label %[[VAL_195]]
// CHECK:       is_smaller_than-true60:                           ; preds = %[[VAL_194]]
// CHECK:         %[[VAL_232:.*]] = load float, ptr %[[VAL_226]], align 4
// CHECK:         %[[VAL_233:.*]] = load float, ptr %[[VAL_228]], align 4
// CHECK:         %[[VAL_234:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_192]]
// CHECK:         store float %[[VAL_232]], ptr addrspace(3) %[[VAL_234]], align 4
// CHECK:         %[[VAL_235:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_193]]
// CHECK:         store float %[[VAL_233]], ptr addrspace(3) %[[VAL_235]], align 4
// CHECK:         br label %[[VAL_196]]
// CHECK:       smaller_comparison_index-true63:                  ; preds = %[[VAL_195]]
// CHECK:         %[[VAL_236:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_200]]
// CHECK:         %[[VAL_237:.*]] = addrspacecast ptr addrspace(3) %[[VAL_236]] to ptr
// CHECK:         %[[VAL_238:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_199]]
// CHECK:         %[[VAL_239:.*]] = addrspacecast ptr addrspace(3) %[[VAL_238]] to ptr
// CHECK-GCN:     %[[VAL_4_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_4]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_237]], ptr %[[VAL_239]], ptr %[[VAL_4_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_237]], ptr %[[VAL_239]], ptr %[[VAL_4]])
// CHECK-PTX:     %[[VAL_240:.*]] = load i8, ptr %[[VAL_4]], align 1
// CHECK-GCN:     %[[VAL_240:.*]] = load i8, ptr addrspace(5) %[[VAL_4]], align 1
// CHECK:         %[[VAL_241:.*]] = icmp ne i8 %[[VAL_240]], 0
// CHECK:         br i1 %[[VAL_241]], label %[[VAL_242:.*]], label %[[VAL_202]]
// CHECK:       is_smaller_than-after68:                          ; preds = %[[VAL_242]], %[[VAL_201]]
// CHECK:         br label %[[VAL_58]]
// CHECK:       is_smaller_than-true67:                           ; preds = %[[VAL_201]]
// CHECK:         %[[VAL_243:.*]] = load float, ptr %[[VAL_237]], align 4
// CHECK:         %[[VAL_244:.*]] = load float, ptr %[[VAL_239]], align 4
// CHECK:         %[[VAL_245:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_199]]
// CHECK:         store float %[[VAL_243]], ptr addrspace(3) %[[VAL_245]], align 4
// CHECK:         %[[VAL_246:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_200]]
// CHECK:         store float %[[VAL_244]], ptr addrspace(3) %[[VAL_246]], align 4
// CHECK:         br label %[[VAL_202]]
// CHECK:       is_last_tile-true69:                              ; preds = %[[VAL_188]]
// CHECK:         %[[VAL_247:.*]] = mul nuw nsw i64 %[[VAL_29]], 2
// CHECK:         %[[VAL_248:.*]] = add nuw nsw i64 %[[VAL_247]], 0
// CHECK:         %[[VAL_249:.*]] = mul i64 %[[VAL_248]], 2
// CHECK:         %[[VAL_250:.*]] = xor i64 %[[VAL_249]], 1
// CHECK:         %[[VAL_251:.*]] = icmp slt i64 %[[VAL_250]], 3
// CHECK:         br i1 %[[VAL_251]], label %[[VAL_252:.*]], label %[[VAL_253:.*]]
// CHECK:       smaller_comparison_index-after75:                 ; preds = %[[VAL_254:.*]], %[[VAL_62]]
// CHECK:         %[[VAL_255:.*]] = add nuw nsw i64 %[[VAL_247]], 1
// CHECK:         %[[VAL_256:.*]] = mul i64 %[[VAL_255]], 2
// CHECK:         %[[VAL_257:.*]] = xor i64 %[[VAL_256]], 1
// CHECK:         %[[VAL_258:.*]] = icmp slt i64 %[[VAL_257]], 3
// CHECK:         br i1 %[[VAL_258]], label %[[VAL_259:.*]], label %[[VAL_65]]
// CHECK:       smaller_comparison_index-after82:                 ; preds = %[[VAL_260:.*]], %[[VAL_253]]
// CHECK:         br label %[[VAL_72]]
// CHECK:       is_last_tile-false70:                             ; preds = %[[VAL_188]]
// CHECK:         %[[VAL_261:.*]] = mul nuw nsw i64 %[[VAL_29]], 2
// CHECK:         %[[VAL_262:.*]] = add nuw nsw i64 %[[VAL_261]], 0
// CHECK:         %[[VAL_263:.*]] = mul i64 %[[VAL_262]], 2
// CHECK:         %[[VAL_264:.*]] = xor i64 %[[VAL_263]], 1
// CHECK:         br i1 true, label %[[VAL_265:.*]], label %[[VAL_266:.*]]
// CHECK:       smaller_comparison_index-after90:                 ; preds = %[[VAL_267:.*]], %[[VAL_63]]
// CHECK:         %[[VAL_268:.*]] = add nuw nsw i64 %[[VAL_261]], 1
// CHECK:         %[[VAL_269:.*]] = mul i64 %[[VAL_268]], 2
// CHECK:         %[[VAL_270:.*]] = xor i64 %[[VAL_269]], 1
// CHECK:         br i1 true, label %[[VAL_271:.*]], label %[[VAL_64]]
// CHECK:       smaller_comparison_index-after97:                 ; preds = %[[VAL_272:.*]], %[[VAL_266]]
// CHECK:         br label %[[VAL_72]]
// CHECK:       smaller_comparison_index-true74:                  ; preds = %[[VAL_62]]
// CHECK:         %[[VAL_273:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_250]]
// CHECK:         %[[VAL_274:.*]] = addrspacecast ptr addrspace(3) %[[VAL_273]] to ptr
// CHECK:         %[[VAL_275:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_249]]
// CHECK:         %[[VAL_276:.*]] = addrspacecast ptr addrspace(3) %[[VAL_275]] to ptr
// CHECK-GCN:     %[[VAL_3_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_3]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_274]], ptr %[[VAL_276]], ptr %[[VAL_3_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_274]], ptr %[[VAL_276]], ptr %[[VAL_3]])
// CHECK-PTX:     %[[VAL_277:.*]] = load i8, ptr %[[VAL_3]], align 1
// CHECK-GCN:     %[[VAL_277:.*]] = load i8, ptr addrspace(5) %[[VAL_3]], align 1
// CHECK:         %[[VAL_278:.*]] = icmp ne i8 %[[VAL_277]], 0
// CHECK:         br i1 %[[VAL_278]], label %[[VAL_279:.*]], label %[[VAL_254]]
// CHECK:       is_smaller_than-after79:                          ; preds = %[[VAL_279]], %[[VAL_252]]
// CHECK:         br label %[[VAL_253]]
// CHECK:       is_smaller_than-true78:                           ; preds = %[[VAL_252]]
// CHECK:         %[[VAL_280:.*]] = load float, ptr %[[VAL_274]], align 4
// CHECK:         %[[VAL_281:.*]] = load float, ptr %[[VAL_276]], align 4
// CHECK:         %[[VAL_282:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_249]]
// CHECK:         store float %[[VAL_280]], ptr addrspace(3) %[[VAL_282]], align 4
// CHECK:         %[[VAL_283:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_250]]
// CHECK:         store float %[[VAL_281]], ptr addrspace(3) %[[VAL_283]], align 4
// CHECK:         br label %[[VAL_254]]
// CHECK:       smaller_comparison_index-true81:                  ; preds = %[[VAL_253]]
// CHECK:         %[[VAL_284:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_257]]
// CHECK:         %[[VAL_285:.*]] = addrspacecast ptr addrspace(3) %[[VAL_284]] to ptr
// CHECK:         %[[VAL_286:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_256]]
// CHECK:         %[[VAL_287:.*]] = addrspacecast ptr addrspace(3) %[[VAL_286]] to ptr
// CHECK-GCN:     %[[VAL_2_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_2]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_285]], ptr %[[VAL_287]], ptr %[[VAL_2_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_285]], ptr %[[VAL_287]], ptr %[[VAL_2]])
// CHECK-PTX:     %[[VAL_288:.*]] = load i8, ptr %[[VAL_2]], align 1
// CHECK-GCN:     %[[VAL_288:.*]] = load i8, ptr addrspace(5) %[[VAL_2]], align 1
// CHECK:         %[[VAL_289:.*]] = icmp ne i8 %[[VAL_288]], 0
// CHECK:         br i1 %[[VAL_289]], label %[[VAL_290:.*]], label %[[VAL_260]]
// CHECK:       is_smaller_than-after86:                          ; preds = %[[VAL_290]], %[[VAL_259]]
// CHECK:         br label %[[VAL_65]]
// CHECK:       is_smaller_than-true85:                           ; preds = %[[VAL_259]]
// CHECK:         %[[VAL_291:.*]] = load float, ptr %[[VAL_285]], align 4
// CHECK:         %[[VAL_292:.*]] = load float, ptr %[[VAL_287]], align 4
// CHECK:         %[[VAL_293:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_256]]
// CHECK:         store float %[[VAL_291]], ptr addrspace(3) %[[VAL_293]], align 4
// CHECK:         %[[VAL_294:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_257]]
// CHECK:         store float %[[VAL_292]], ptr addrspace(3) %[[VAL_294]], align 4
// CHECK:         br label %[[VAL_260]]
// CHECK:       smaller_comparison_index-true89:                  ; preds = %[[VAL_63]]
// CHECK:         %[[VAL_295:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_264]]
// CHECK:         %[[VAL_296:.*]] = addrspacecast ptr addrspace(3) %[[VAL_295]] to ptr
// CHECK:         %[[VAL_297:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_263]]
// CHECK:         %[[VAL_298:.*]] = addrspacecast ptr addrspace(3) %[[VAL_297]] to ptr
// CHECK-GCN:     %[[VAL_1_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_1]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_296]], ptr %[[VAL_298]], ptr %[[VAL_1_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_296]], ptr %[[VAL_298]], ptr %[[VAL_1]])
// CHECK-PTX:     %[[VAL_299:.*]] = load i8, ptr %[[VAL_1]], align 1
// CHECK-GCN:     %[[VAL_299:.*]] = load i8, ptr addrspace(5) %[[VAL_1]], align 1
// CHECK:         %[[VAL_300:.*]] = icmp ne i8 %[[VAL_299]], 0
// CHECK:         br i1 %[[VAL_300]], label %[[VAL_301:.*]], label %[[VAL_267]]
// CHECK:       is_smaller_than-after94:                          ; preds = %[[VAL_301]], %[[VAL_265]]
// CHECK:         br label %[[VAL_266]]
// CHECK:       is_smaller_than-true93:                           ; preds = %[[VAL_265]]
// CHECK:         %[[VAL_302:.*]] = load float, ptr %[[VAL_296]], align 4
// CHECK:         %[[VAL_303:.*]] = load float, ptr %[[VAL_298]], align 4
// CHECK:         %[[VAL_304:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_263]]
// CHECK:         store float %[[VAL_302]], ptr addrspace(3) %[[VAL_304]], align 4
// CHECK:         %[[VAL_305:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_264]]
// CHECK:         store float %[[VAL_303]], ptr addrspace(3) %[[VAL_305]], align 4
// CHECK:         br label %[[VAL_267]]
// CHECK:       smaller_comparison_index-true96:                  ; preds = %[[VAL_266]]
// CHECK:         %[[VAL_306:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_270]]
// CHECK:         %[[VAL_307:.*]] = addrspacecast ptr addrspace(3) %[[VAL_306]] to ptr
// CHECK:         %[[VAL_308:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_269]]
// CHECK:         %[[VAL_309:.*]] = addrspacecast ptr addrspace(3) %[[VAL_308]] to ptr
// CHECK-GCN:     %[[VAL_0_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_0]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_307]], ptr %[[VAL_309]], ptr %[[VAL_0_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_307]], ptr %[[VAL_309]], ptr %[[VAL_0]])
// CHECK-PTX:     %[[VAL_310:.*]] = load i8, ptr %[[VAL_0]], align 1
// CHECK-GCN:     %[[VAL_310:.*]] = load i8, ptr addrspace(5) %[[VAL_0]], align 1
// CHECK:         %[[VAL_311:.*]] = icmp ne i8 %[[VAL_310]], 0
// CHECK:         br i1 %[[VAL_311]], label %[[VAL_312:.*]], label %[[VAL_272]]
// CHECK:       is_smaller_than-after101:                         ; preds = %[[VAL_312]], %[[VAL_271]]
// CHECK:         br label %[[VAL_64]]
// CHECK:       is_smaller_than-true100:                          ; preds = %[[VAL_271]]
// CHECK:         %[[VAL_313:.*]] = load float, ptr %[[VAL_307]], align 4
// CHECK:         %[[VAL_314:.*]] = load float, ptr %[[VAL_309]], align 4
// CHECK:         %[[VAL_315:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_269]]
// CHECK:         store float %[[VAL_313]], ptr addrspace(3) %[[VAL_315]], align 4
// CHECK:         %[[VAL_316:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_270]]
// CHECK:         store float %[[VAL_314]], ptr addrspace(3) %[[VAL_316]], align 4
// CHECK:         br label %[[VAL_272]]
// CHECK:       smaller_keys_index-true105:                       ; preds = %[[VAL_72]]
// CHECK:         %[[VAL_317:.*]] = add nuw nsw i64 %[[VAL_67]], 0
// CHECK:         %[[VAL_318:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_317]]
// CHECK:         %[[VAL_319:.*]] = load float, ptr addrspace(3) %[[VAL_318]], align 4
// CHECK:         %[[VAL_320:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_86]], i64 0, i64 %[[VAL_22]], i64 %[[VAL_68]]
// CHECK:         store float %[[VAL_319]], ptr %[[VAL_320]], align 4
// CHECK:         br label %[[VAL_71]]
// CHECK:       smaller_keys_index-true109:                       ; preds = %[[VAL_71]]
// CHECK:         %[[VAL_321:.*]] = add nuw nsw i64 %[[VAL_67]], 1
// CHECK:         %[[VAL_322:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_321]]
// CHECK:         %[[VAL_323:.*]] = load float, ptr addrspace(3) %[[VAL_322]], align 4
// CHECK:         %[[VAL_324:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_86]], i64 0, i64 %[[VAL_22]], i64 %[[VAL_73]]
// CHECK:         store float %[[VAL_323]], ptr %[[VAL_324]], align 4
// CHECK:         br label %[[VAL_76]]
// CHECK:       smaller_keys_index-true113:                       ; preds = %[[VAL_76]]
// CHECK:         %[[VAL_325:.*]] = add nuw nsw i64 %[[VAL_67]], 2
// CHECK:         %[[VAL_326:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_325]]
// CHECK:         %[[VAL_327:.*]] = load float, ptr addrspace(3) %[[VAL_326]], align 4
// CHECK:         %[[VAL_328:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_86]], i64 0, i64 %[[VAL_22]], i64 %[[VAL_77]]
// CHECK:         store float %[[VAL_327]], ptr %[[VAL_328]], align 4
// CHECK:         br label %[[VAL_80]]
// CHECK:       smaller_keys_index-true117:                       ; preds = %[[VAL_80]]
// CHECK:         %[[VAL_329:.*]] = add nuw nsw i64 %[[VAL_67]], 3
// CHECK:         %[[VAL_330:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_329]]
// CHECK:         %[[VAL_331:.*]] = load float, ptr addrspace(3) %[[VAL_330]], align 4
// CHECK:         %[[VAL_332:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_86]], i64 0, i64 %[[VAL_22]], i64 %[[VAL_81]]
// CHECK:         store float %[[VAL_331]], ptr %[[VAL_332]], align 4
// CHECK:         br label %[[VAL_26]]
// CHECK:         %[[VAL_333:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_334:.*]] = load float, ptr %[[VAL_335:.*]], align 4
// CHECK:         %[[VAL_336:.*]] = load float, ptr %[[VAL_337:.*]], align 4
// CHECK:         %[[VAL_338:.*]] = fcmp olt float %[[VAL_334]], %[[VAL_336]]
// CHECK:         %[[VAL_339:.*]] = zext i1 %[[VAL_338]] to i8
// CHECK-PTX:     store i8 %[[VAL_339]], ptr %[[VAL_333]], align 1
// CHECK-GCN:     store i8 %[[VAL_339]], ptr addrspace(5) %[[VAL_333]], align 1
// CHECK-PTX:     %[[VAL_340:.*]] = load i8, ptr %[[VAL_333]], align 1
// CHECK-GCN:     %[[VAL_340:.*]] = load i8, ptr addrspace(5) %[[VAL_333]], align 1
// CHECK:         store i8 %[[VAL_340]], ptr %[[VAL_341:.*]], align 1
// CHECK:         ret void

ENTRY main {
  x = f32[2, 3] parameter(0)
  ROOT sort = f32[2, 3] sort(x), dimensions={1}, to_apply=compare
}

// -----

HloModule TestModule, is_scheduled=true

compare {
  p.0.lhs = s32[] parameter(0)
  p.0.rhs = s32[] parameter(1)
  p.1.lhs = f32[] parameter(2)
  p.1.rhs = f32[] parameter(3)
  ROOT lt = pred[] compare(p.1.lhs, p.1.rhs), direction=LT
}

// CHECK-LABEL: @sort(
// CHECK:         %[[VAL_342:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_343:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_344:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_345:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_346:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_347:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_348:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_349:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_350:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_351:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_352:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_353:.*]] = alloca i8, align 1
// CHECK-PTX:     %[[VAL_354:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x
// CHECK-GCN:     %[[VAL_354:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_355:.*]] = zext i32 %[[VAL_354]] to i64
// CHECK-PTX:     %[[VAL_356:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_356:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_357:.*]] = zext i32 %[[VAL_356]] to i64
// CHECK:         %[[VAL_358:.*]] = mul nuw nsw i64 %[[VAL_355]], 1
// CHECK:         %[[VAL_359:.*]] = add nuw nsw i64 %[[VAL_358]], %[[VAL_357]]
// CHECK:         %[[VAL_360:.*]] = icmp ult i64 %[[VAL_359]], 2
// CHECK:         call void @llvm.assume(i1 %[[VAL_360]])
// CHECK:         %[[VAL_361:.*]] = add nuw nsw i64 %[[VAL_359]], 0
// CHECK:         %[[VAL_362:.*]] = udiv i64 %[[VAL_361]], 1
// CHECK:         %[[VAL_363:.*]] = urem i64 %[[VAL_362]], 1
// CHECK:         %[[VAL_364:.*]] = udiv i64 %[[VAL_361]], 1
// CHECK:         %[[VAL_365:.*]] = icmp ult i64 %[[VAL_359]], 2
// CHECK:         br i1 %[[VAL_365]], label %[[VAL_366:.*]], label %[[VAL_367:.*]]
// CHECK:       sort.in_bounds-after:                             ; preds = %[[VAL_368:.*]], %[[VAL_369:.*]]
// CHECK:         ret void
// CHECK:       sort.in_bounds-true:                              ; preds = %[[VAL_369]]
// CHECK-PTX:     %[[VAL_370:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_370:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_371:.*]] = sext i32 %[[VAL_370]] to i64
// CHECK:         %[[VAL_372:.*]] = mul nuw nsw i64 %[[VAL_363]], 4
// CHECK:         %[[VAL_373:.*]] = mul nuw nsw i64 %[[VAL_371]], 4
// CHECK:         %[[VAL_374:.*]] = add nuw nsw i64 %[[VAL_372]], 0
// CHECK:         %[[VAL_375:.*]] = icmp slt i64 %[[VAL_374]], 3
// CHECK:         br i1 %[[VAL_375]], label %[[VAL_376:.*]], label %[[VAL_377:.*]]
// CHECK:       smaller_keys_index-after:                         ; preds = %[[VAL_376]], %[[VAL_366]]
// CHECK:         %[[VAL_378:.*]] = add nuw nsw i64 %[[VAL_372]], 1
// CHECK:         %[[VAL_379:.*]] = icmp slt i64 %[[VAL_378]], 3
// CHECK:         br i1 %[[VAL_379]], label %[[VAL_380:.*]], label %[[VAL_381:.*]]
// CHECK:       smaller_keys_index-after3:                        ; preds = %[[VAL_380]], %[[VAL_377]]
// CHECK:         %[[VAL_382:.*]] = add nuw nsw i64 %[[VAL_372]], 2
// CHECK:         %[[VAL_383:.*]] = icmp slt i64 %[[VAL_382]], 3
// CHECK:         br i1 %[[VAL_383]], label %[[VAL_384:.*]], label %[[VAL_385:.*]]
// CHECK:       smaller_keys_index-after7:                        ; preds = %[[VAL_384]], %[[VAL_381]]
// CHECK:         %[[VAL_386:.*]] = add nuw nsw i64 %[[VAL_372]], 3
// CHECK:         %[[VAL_387:.*]] = icmp slt i64 %[[VAL_386]], 3
// CHECK:         br i1 %[[VAL_387]], label %[[VAL_388:.*]], label %[[VAL_389:.*]]
// CHECK:       smaller_keys_index-after11:                       ; preds = %[[VAL_388]], %[[VAL_385]]
// CHECK:         %[[VAL_390:.*]] = mul nuw nsw i64 %[[VAL_363]], 4
// CHECK:         %[[VAL_391:.*]] = mul nuw nsw i64 %[[VAL_371]], 4
// CHECK:         %[[VAL_392:.*]] = add nuw nsw i64 %[[VAL_390]], 0
// CHECK:         %[[VAL_393:.*]] = icmp slt i64 %[[VAL_392]], 3
// CHECK:         br i1 %[[VAL_393]], label %[[VAL_394:.*]], label %[[VAL_395:.*]]
// CHECK:       smaller_keys_index-after17:                       ; preds = %[[VAL_394]], %[[VAL_389]]
// CHECK:         %[[VAL_396:.*]] = add nuw nsw i64 %[[VAL_390]], 1
// CHECK:         %[[VAL_397:.*]] = icmp slt i64 %[[VAL_396]], 3
// CHECK:         br i1 %[[VAL_397]], label %[[VAL_398:.*]], label %[[VAL_399:.*]]
// CHECK:       smaller_keys_index-after21:                       ; preds = %[[VAL_398]], %[[VAL_395]]
// CHECK:         %[[VAL_400:.*]] = add nuw nsw i64 %[[VAL_390]], 2
// CHECK:         %[[VAL_401:.*]] = icmp slt i64 %[[VAL_400]], 3
// CHECK:         br i1 %[[VAL_401]], label %[[VAL_402:.*]], label %[[VAL_403:.*]]
// CHECK:       smaller_keys_index-after25:                       ; preds = %[[VAL_402]], %[[VAL_399]]
// CHECK:         %[[VAL_404:.*]] = add nuw nsw i64 %[[VAL_390]], 3
// CHECK:         %[[VAL_405:.*]] = icmp slt i64 %[[VAL_404]], 3
// CHECK:         br i1 %[[VAL_405]], label %[[VAL_406:.*]], label %[[VAL_407:.*]]
// CHECK:       smaller_keys_index-after29:                       ; preds = %[[VAL_406]], %[[VAL_403]]
// CHECK:         call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK:         %[[VAL_408:.*]] = mul i64 %[[VAL_363]], 4
// CHECK:         %[[VAL_409:.*]] = icmp uge i64 %[[VAL_408]], 0
// CHECK:         br i1 %[[VAL_409]], label %[[VAL_410:.*]], label %[[VAL_411:.*]]
// CHECK:       is_last_tile-after:                               ; preds = %[[VAL_412:.*]], %[[VAL_413:.*]]
// CHECK:         call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK:         %[[VAL_414:.*]] = mul i64 %[[VAL_363]], 4
// CHECK:         %[[VAL_415:.*]] = icmp uge i64 %[[VAL_414]], 0
// CHECK:         br i1 %[[VAL_415]], label %[[VAL_416:.*]], label %[[VAL_417:.*]]
// CHECK:       is_last_tile-after56:                             ; preds = %[[VAL_418:.*]], %[[VAL_419:.*]]
// CHECK:         call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK:         %[[VAL_420:.*]] = mul i64 %[[VAL_363]], 4
// CHECK:         %[[VAL_421:.*]] = icmp uge i64 %[[VAL_420]], 0
// CHECK:         br i1 %[[VAL_421]], label %[[VAL_422:.*]], label %[[VAL_423:.*]]
// CHECK:       is_last_tile-after89:                             ; preds = %[[VAL_424:.*]], %[[VAL_425:.*]]
// CHECK:         call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK:         %[[VAL_426:.*]] = mul nuw nsw i64 %[[VAL_363]], 4
// CHECK:         %[[VAL_427:.*]] = mul nuw nsw i64 %[[VAL_371]], 4
// CHECK:         %[[VAL_428:.*]] = add nuw nsw i64 %[[VAL_426]], 0
// CHECK:         %[[VAL_429:.*]] = icmp slt i64 %[[VAL_428]], 3
// CHECK:         br i1 %[[VAL_429]], label %[[VAL_430:.*]], label %[[VAL_431:.*]]
// CHECK:       smaller_keys_index-after124:                      ; preds = %[[VAL_430]], %[[VAL_432:.*]]
// CHECK:         %[[VAL_433:.*]] = add nuw nsw i64 %[[VAL_426]], 1
// CHECK:         %[[VAL_434:.*]] = icmp slt i64 %[[VAL_433]], 3
// CHECK:         br i1 %[[VAL_434]], label %[[VAL_435:.*]], label %[[VAL_436:.*]]
// CHECK:       smaller_keys_index-after128:                      ; preds = %[[VAL_435]], %[[VAL_431]]
// CHECK:         %[[VAL_437:.*]] = add nuw nsw i64 %[[VAL_426]], 2
// CHECK:         %[[VAL_438:.*]] = icmp slt i64 %[[VAL_437]], 3
// CHECK:         br i1 %[[VAL_438]], label %[[VAL_439:.*]], label %[[VAL_440:.*]]
// CHECK:       smaller_keys_index-after132:                      ; preds = %[[VAL_439]], %[[VAL_436]]
// CHECK:         %[[VAL_441:.*]] = add nuw nsw i64 %[[VAL_426]], 3
// CHECK:         %[[VAL_442:.*]] = icmp slt i64 %[[VAL_441]], 3
// CHECK:         br i1 %[[VAL_442]], label %[[VAL_443:.*]], label %[[VAL_444:.*]]
// CHECK:       smaller_keys_index-after136:                      ; preds = %[[VAL_443]], %[[VAL_440]]
// CHECK:         %[[VAL_445:.*]] = mul nuw nsw i64 %[[VAL_363]], 4
// CHECK:         %[[VAL_446:.*]] = mul nuw nsw i64 %[[VAL_371]], 4
// CHECK:         %[[VAL_447:.*]] = add nuw nsw i64 %[[VAL_445]], 0
// CHECK:         %[[VAL_448:.*]] = icmp slt i64 %[[VAL_447]], 3
// CHECK:         br i1 %[[VAL_448]], label %[[VAL_449:.*]], label %[[VAL_450:.*]]
// CHECK:       smaller_keys_index-after142:                      ; preds = %[[VAL_449]], %[[VAL_444]]
// CHECK:         %[[VAL_451:.*]] = add nuw nsw i64 %[[VAL_445]], 1
// CHECK:         %[[VAL_452:.*]] = icmp slt i64 %[[VAL_451]], 3
// CHECK:         br i1 %[[VAL_452]], label %[[VAL_453:.*]], label %[[VAL_454:.*]]
// CHECK:       smaller_keys_index-after146:                      ; preds = %[[VAL_453]], %[[VAL_450]]
// CHECK:         %[[VAL_455:.*]] = add nuw nsw i64 %[[VAL_445]], 2
// CHECK:         %[[VAL_456:.*]] = icmp slt i64 %[[VAL_455]], 3
// CHECK:         br i1 %[[VAL_456]], label %[[VAL_457:.*]], label %[[VAL_458:.*]]
// CHECK:       smaller_keys_index-after150:                      ; preds = %[[VAL_457]], %[[VAL_454]]
// CHECK:         %[[VAL_459:.*]] = add nuw nsw i64 %[[VAL_445]], 3
// CHECK:         %[[VAL_460:.*]] = icmp slt i64 %[[VAL_459]], 3
// CHECK:         br i1 %[[VAL_460]], label %[[VAL_461:.*]], label %[[VAL_368]]
// CHECK:       smaller_keys_index-after154:                      ; preds = %[[VAL_461]], %[[VAL_458]]
// CHECK:         br label %[[VAL_367]]
// CHECK:       smaller_keys_index-true:                          ; preds = %[[VAL_366]]
// CHECK:         %[[VAL_462:.*]] = add nuw nsw i64 %[[VAL_373]], 0
// CHECK:         %[[VAL_463:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_464:.*]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_374]]
// CHECK:         %[[VAL_465:.*]] = load i32, ptr %[[VAL_463]], align 4
// CHECK:         %[[VAL_466:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_462]]
// CHECK:         store i32 %[[VAL_465]], ptr addrspace(3) %[[VAL_466]], align 4
// CHECK:         br label %[[VAL_377]]
// CHECK:       smaller_keys_index-true2:                         ; preds = %[[VAL_377]]
// CHECK:         %[[VAL_467:.*]] = add nuw nsw i64 %[[VAL_373]], 1
// CHECK:         %[[VAL_468:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_464]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_378]]
// CHECK:         %[[VAL_469:.*]] = load i32, ptr %[[VAL_468]], align 4
// CHECK:         %[[VAL_470:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_467]]
// CHECK:         store i32 %[[VAL_469]], ptr addrspace(3) %[[VAL_470]], align 4
// CHECK:         br label %[[VAL_381]]
// CHECK:       smaller_keys_index-true6:                         ; preds = %[[VAL_381]]
// CHECK:         %[[VAL_471:.*]] = add nuw nsw i64 %[[VAL_373]], 2
// CHECK:         %[[VAL_472:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_464]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_382]]
// CHECK:         %[[VAL_473:.*]] = load i32, ptr %[[VAL_472]], align 4
// CHECK:         %[[VAL_474:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_471]]
// CHECK:         store i32 %[[VAL_473]], ptr addrspace(3) %[[VAL_474]], align 4
// CHECK:         br label %[[VAL_385]]
// CHECK:       smaller_keys_index-true10:                        ; preds = %[[VAL_385]]
// CHECK:         %[[VAL_475:.*]] = add nuw nsw i64 %[[VAL_373]], 3
// CHECK:         %[[VAL_476:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_464]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_386]]
// CHECK:         %[[VAL_477:.*]] = load i32, ptr %[[VAL_476]], align 4
// CHECK:         %[[VAL_478:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_475]]
// CHECK:         store i32 %[[VAL_477]], ptr addrspace(3) %[[VAL_478]], align 4
// CHECK:         br label %[[VAL_389]]
// CHECK:       smaller_keys_index-true16:                        ; preds = %[[VAL_389]]
// CHECK:         %[[VAL_479:.*]] = add nuw nsw i64 %[[VAL_391]], 0
// CHECK:         %[[VAL_480:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_481:.*]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_392]]
// CHECK:         %[[VAL_482:.*]] = load float, ptr %[[VAL_480]], align 4
// CHECK:         %[[VAL_483:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_479]]
// CHECK:         store float %[[VAL_482]], ptr addrspace(3) %[[VAL_483]], align 4
// CHECK:         br label %[[VAL_395]]
// CHECK:       smaller_keys_index-true20:                        ; preds = %[[VAL_395]]
// CHECK:         %[[VAL_484:.*]] = add nuw nsw i64 %[[VAL_391]], 1
// CHECK:         %[[VAL_485:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_481]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_396]]
// CHECK:         %[[VAL_486:.*]] = load float, ptr %[[VAL_485]], align 4
// CHECK:         %[[VAL_487:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_484]]
// CHECK:         store float %[[VAL_486]], ptr addrspace(3) %[[VAL_487]], align 4
// CHECK:         br label %[[VAL_399]]
// CHECK:       smaller_keys_index-true24:                        ; preds = %[[VAL_399]]
// CHECK:         %[[VAL_488:.*]] = add nuw nsw i64 %[[VAL_391]], 2
// CHECK:         %[[VAL_489:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_481]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_400]]
// CHECK:         %[[VAL_490:.*]] = load float, ptr %[[VAL_489]], align 4
// CHECK:         %[[VAL_491:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_488]]
// CHECK:         store float %[[VAL_490]], ptr addrspace(3) %[[VAL_491]], align 4
// CHECK:         br label %[[VAL_403]]
// CHECK:       smaller_keys_index-true28:                        ; preds = %[[VAL_403]]
// CHECK:         %[[VAL_492:.*]] = add nuw nsw i64 %[[VAL_391]], 3
// CHECK:         %[[VAL_493:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_481]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_404]]
// CHECK:         %[[VAL_494:.*]] = load float, ptr %[[VAL_493]], align 4
// CHECK:         %[[VAL_495:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_492]]
// CHECK:         store float %[[VAL_494]], ptr addrspace(3) %[[VAL_495]], align 4
// CHECK:         br label %[[VAL_407]]
// CHECK:       is_last_tile-true:                                ; preds = %[[VAL_407]]
// CHECK:         %[[VAL_496:.*]] = mul nuw nsw i64 %[[VAL_371]], 2
// CHECK:         %[[VAL_497:.*]] = add nuw nsw i64 %[[VAL_496]], 0
// CHECK:         %[[VAL_498:.*]] = mul i64 %[[VAL_497]], 2
// CHECK:         %[[VAL_499:.*]] = xor i64 %[[VAL_498]], 1
// CHECK:         %[[VAL_500:.*]] = icmp slt i64 %[[VAL_499]], 3
// CHECK:         br i1 %[[VAL_500]], label %[[VAL_501:.*]], label %[[VAL_502:.*]]
// CHECK:       smaller_comparison_index-after:                   ; preds = %[[VAL_503:.*]], %[[VAL_410]]
// CHECK:         %[[VAL_504:.*]] = add nuw nsw i64 %[[VAL_496]], 1
// CHECK:         %[[VAL_505:.*]] = mul i64 %[[VAL_504]], 2
// CHECK:         %[[VAL_506:.*]] = xor i64 %[[VAL_505]], 1
// CHECK:         %[[VAL_507:.*]] = icmp slt i64 %[[VAL_506]], 3
// CHECK:         br i1 %[[VAL_507]], label %[[VAL_508:.*]], label %[[VAL_413]]
// CHECK:       smaller_comparison_index-after34:                 ; preds = %[[VAL_509:.*]], %[[VAL_502]]
// CHECK:         br label %[[VAL_510:.*]]
// CHECK:       is_last_tile-false:                               ; preds = %[[VAL_407]]
// CHECK:         %[[VAL_511:.*]] = mul nuw nsw i64 %[[VAL_371]], 2
// CHECK:         %[[VAL_512:.*]] = add nuw nsw i64 %[[VAL_511]], 0
// CHECK:         %[[VAL_513:.*]] = mul i64 %[[VAL_512]], 2
// CHECK:         %[[VAL_514:.*]] = xor i64 %[[VAL_513]], 1
// CHECK:         br i1 true, label %[[VAL_515:.*]], label %[[VAL_516:.*]]
// CHECK:       smaller_comparison_index-after42:                 ; preds = %[[VAL_517:.*]], %[[VAL_411]]
// CHECK:         %[[VAL_518:.*]] = add nuw nsw i64 %[[VAL_511]], 1
// CHECK:         %[[VAL_519:.*]] = mul i64 %[[VAL_518]], 2
// CHECK:         %[[VAL_520:.*]] = xor i64 %[[VAL_519]], 1
// CHECK:         br i1 true, label %[[VAL_521:.*]], label %[[VAL_412]]
// CHECK:       smaller_comparison_index-after49:                 ; preds = %[[VAL_522:.*]], %[[VAL_516]]
// CHECK:         br label %[[VAL_510]]
// CHECK:       smaller_comparison_index-true:                    ; preds = %[[VAL_410]]
// CHECK:         %[[VAL_523:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_499]]
// CHECK:         %[[VAL_524:.*]] = addrspacecast ptr addrspace(3) %[[VAL_523]] to ptr
// CHECK:         %[[VAL_525:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_498]]
// CHECK:         %[[VAL_526:.*]] = addrspacecast ptr addrspace(3) %[[VAL_525]] to ptr
// CHECK:         %[[VAL_527:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_499]]
// CHECK:         %[[VAL_528:.*]] = addrspacecast ptr addrspace(3) %[[VAL_527]] to ptr
// CHECK:         %[[VAL_529:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_498]]
// CHECK:         %[[VAL_530:.*]] = addrspacecast ptr addrspace(3) %[[VAL_529]] to ptr
// CHECK-GCN:     %[[VAL_353_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_353]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_524]], ptr %[[VAL_526]], ptr %[[VAL_528]], ptr %[[VAL_530]], ptr %[[VAL_353]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_524]], ptr %[[VAL_526]], ptr %[[VAL_528]], ptr %[[VAL_530]], ptr %[[VAL_353_2]])
// CHECK-PTX:     %[[VAL_531:.*]] = load i8, ptr %[[VAL_353]], align 1
// CHECK-GCN:     %[[VAL_531:.*]] = load i8, ptr addrspace(5) %[[VAL_353]], align 1
// CHECK:         %[[VAL_532:.*]] = icmp ne i8 %[[VAL_531]], 0
// CHECK:         br i1 %[[VAL_532]], label %[[VAL_533:.*]], label %[[VAL_503]]
// CHECK:       is_smaller_than-after:                            ; preds = %[[VAL_533]], %[[VAL_501]]
// CHECK:         br label %[[VAL_502]]
// CHECK:       is_smaller_than-true:                             ; preds = %[[VAL_501]]
// CHECK:         %[[VAL_534:.*]] = load i32, ptr %[[VAL_524]], align 4
// CHECK:         %[[VAL_535:.*]] = load i32, ptr %[[VAL_526]], align 4
// CHECK:         %[[VAL_536:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_498]]
// CHECK:         store i32 %[[VAL_534]], ptr addrspace(3) %[[VAL_536]], align 4
// CHECK:         %[[VAL_537:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_499]]
// CHECK:         store i32 %[[VAL_535]], ptr addrspace(3) %[[VAL_537]], align 4
// CHECK:         %[[VAL_538:.*]] = load float, ptr %[[VAL_528]], align 4
// CHECK:         %[[VAL_539:.*]] = load float, ptr %[[VAL_530]], align 4
// CHECK:         %[[VAL_540:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_498]]
// CHECK:         store float %[[VAL_538]], ptr addrspace(3) %[[VAL_540]], align 4
// CHECK:         %[[VAL_541:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_499]]
// CHECK:         store float %[[VAL_539]], ptr addrspace(3) %[[VAL_541]], align 4
// CHECK:         br label %[[VAL_503]]
// CHECK:       smaller_comparison_index-true33:                  ; preds = %[[VAL_502]]
// CHECK:         %[[VAL_542:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_506]]
// CHECK:         %[[VAL_543:.*]] = addrspacecast ptr addrspace(3) %[[VAL_542]] to ptr
// CHECK:         %[[VAL_544:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_505]]
// CHECK:         %[[VAL_545:.*]] = addrspacecast ptr addrspace(3) %[[VAL_544]] to ptr
// CHECK:         %[[VAL_546:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_506]]
// CHECK:         %[[VAL_547:.*]] = addrspacecast ptr addrspace(3) %[[VAL_546]] to ptr
// CHECK:         %[[VAL_548:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_505]]
// CHECK:         %[[VAL_549:.*]] = addrspacecast ptr addrspace(3) %[[VAL_548]] to ptr
// CHECK-GCN:     %[[VAL_352_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_352]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_543]], ptr %[[VAL_545]], ptr %[[VAL_547]], ptr %[[VAL_549]], ptr %[[VAL_352]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_543]], ptr %[[VAL_545]], ptr %[[VAL_547]], ptr %[[VAL_549]], ptr %[[VAL_352_2]])
// CHECK-PTX:     %[[VAL_550:.*]] = load i8, ptr %[[VAL_352]], align 1
// CHECK-GCN:     %[[VAL_550:.*]] = load i8, ptr addrspace(5) %[[VAL_352]], align 1
// CHECK:         %[[VAL_551:.*]] = icmp ne i8 %[[VAL_550]], 0
// CHECK:         br i1 %[[VAL_551]], label %[[VAL_552:.*]], label %[[VAL_509]]
// CHECK:       is_smaller_than-after38:                          ; preds = %[[VAL_552]], %[[VAL_508]]
// CHECK:         br label %[[VAL_413]]
// CHECK:       is_smaller_than-true37:                           ; preds = %[[VAL_508]]
// CHECK:         %[[VAL_553:.*]] = load i32, ptr %[[VAL_543]], align 4
// CHECK:         %[[VAL_554:.*]] = load i32, ptr %[[VAL_545]], align 4
// CHECK:         %[[VAL_555:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_505]]
// CHECK:         store i32 %[[VAL_553]], ptr addrspace(3) %[[VAL_555]], align 4
// CHECK:         %[[VAL_556:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_506]]
// CHECK:         store i32 %[[VAL_554]], ptr addrspace(3) %[[VAL_556]], align 4
// CHECK:         %[[VAL_557:.*]] = load float, ptr %[[VAL_547]], align 4
// CHECK:         %[[VAL_558:.*]] = load float, ptr %[[VAL_549]], align 4
// CHECK:         %[[VAL_559:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_505]]
// CHECK:         store float %[[VAL_557]], ptr addrspace(3) %[[VAL_559]], align 4
// CHECK:         %[[VAL_560:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_506]]
// CHECK:         store float %[[VAL_558]], ptr addrspace(3) %[[VAL_560]], align 4
// CHECK:         br label %[[VAL_509]]
// CHECK:       smaller_comparison_index-true41:                  ; preds = %[[VAL_411]]
// CHECK:         %[[VAL_561:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_514]]
// CHECK:         %[[VAL_562:.*]] = addrspacecast ptr addrspace(3) %[[VAL_561]] to ptr
// CHECK:         %[[VAL_563:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_513]]
// CHECK:         %[[VAL_564:.*]] = addrspacecast ptr addrspace(3) %[[VAL_563]] to ptr
// CHECK:         %[[VAL_565:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_514]]
// CHECK:         %[[VAL_566:.*]] = addrspacecast ptr addrspace(3) %[[VAL_565]] to ptr
// CHECK:         %[[VAL_567:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_513]]
// CHECK:         %[[VAL_568:.*]] = addrspacecast ptr addrspace(3) %[[VAL_567]] to ptr
// CHECK-GCN:     %[[VAL_351_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_351]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_562]], ptr %[[VAL_564]], ptr %[[VAL_566]], ptr %[[VAL_568]], ptr %[[VAL_351]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_562]], ptr %[[VAL_564]], ptr %[[VAL_566]], ptr %[[VAL_568]], ptr %[[VAL_351_2]])
// CHECK-PTX:     %[[VAL_569:.*]] = load i8, ptr %[[VAL_351]], align 1
// CHECK-GCN:     %[[VAL_569:.*]] = load i8, ptr addrspace(5) %[[VAL_351]], align 1
// CHECK:         %[[VAL_570:.*]] = icmp ne i8 %[[VAL_569]], 0
// CHECK:         br i1 %[[VAL_570]], label %[[VAL_571:.*]], label %[[VAL_517]]
// CHECK:       is_smaller_than-after46:                          ; preds = %[[VAL_571]], %[[VAL_515]]
// CHECK:         br label %[[VAL_516]]
// CHECK:       is_smaller_than-true45:                           ; preds = %[[VAL_515]]
// CHECK:         %[[VAL_572:.*]] = load i32, ptr %[[VAL_562]], align 4
// CHECK:         %[[VAL_573:.*]] = load i32, ptr %[[VAL_564]], align 4
// CHECK:         %[[VAL_574:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_513]]
// CHECK:         store i32 %[[VAL_572]], ptr addrspace(3) %[[VAL_574]], align 4
// CHECK:         %[[VAL_575:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_514]]
// CHECK:         store i32 %[[VAL_573]], ptr addrspace(3) %[[VAL_575]], align 4
// CHECK:         %[[VAL_576:.*]] = load float, ptr %[[VAL_566]], align 4
// CHECK:         %[[VAL_577:.*]] = load float, ptr %[[VAL_568]], align 4
// CHECK:         %[[VAL_578:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_513]]
// CHECK:         store float %[[VAL_576]], ptr addrspace(3) %[[VAL_578]], align 4
// CHECK:         %[[VAL_579:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_514]]
// CHECK:         store float %[[VAL_577]], ptr addrspace(3) %[[VAL_579]], align 4
// CHECK:         br label %[[VAL_517]]
// CHECK:       smaller_comparison_index-true48:                  ; preds = %[[VAL_516]]
// CHECK:         %[[VAL_580:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_520]]
// CHECK:         %[[VAL_581:.*]] = addrspacecast ptr addrspace(3) %[[VAL_580]] to ptr
// CHECK:         %[[VAL_582:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_519]]
// CHECK:         %[[VAL_583:.*]] = addrspacecast ptr addrspace(3) %[[VAL_582]] to ptr
// CHECK:         %[[VAL_584:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_520]]
// CHECK:         %[[VAL_585:.*]] = addrspacecast ptr addrspace(3) %[[VAL_584]] to ptr
// CHECK:         %[[VAL_586:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_519]]
// CHECK:         %[[VAL_587:.*]] = addrspacecast ptr addrspace(3) %[[VAL_586]] to ptr
// CHECK-GCN:     %[[VAL_350_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_350]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_581]], ptr %[[VAL_583]], ptr %[[VAL_585]], ptr %[[VAL_587]], ptr %[[VAL_350]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_581]], ptr %[[VAL_583]], ptr %[[VAL_585]], ptr %[[VAL_587]], ptr %[[VAL_350_2]])
// CHECK-PTX:     %[[VAL_588:.*]] = load i8, ptr %[[VAL_350]], align 1
// CHECK-GCN:     %[[VAL_588:.*]] = load i8, ptr addrspace(5) %[[VAL_350]], align 1
// CHECK:         %[[VAL_589:.*]] = icmp ne i8 %[[VAL_588]], 0
// CHECK:         br i1 %[[VAL_589]], label %[[VAL_590:.*]], label %[[VAL_522]]
// CHECK:       is_smaller_than-after53:                          ; preds = %[[VAL_590]], %[[VAL_521]]
// CHECK:         br label %[[VAL_412]]
// CHECK:       is_smaller_than-true52:                           ; preds = %[[VAL_521]]
// CHECK:         %[[VAL_591:.*]] = load i32, ptr %[[VAL_581]], align 4
// CHECK:         %[[VAL_592:.*]] = load i32, ptr %[[VAL_583]], align 4
// CHECK:         %[[VAL_593:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_519]]
// CHECK:         store i32 %[[VAL_591]], ptr addrspace(3) %[[VAL_593]], align 4
// CHECK:         %[[VAL_594:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_520]]
// CHECK:         store i32 %[[VAL_592]], ptr addrspace(3) %[[VAL_594]], align 4
// CHECK:         %[[VAL_595:.*]] = load float, ptr %[[VAL_585]], align 4
// CHECK:         %[[VAL_596:.*]] = load float, ptr %[[VAL_587]], align 4
// CHECK:         %[[VAL_597:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_519]]
// CHECK:         store float %[[VAL_595]], ptr addrspace(3) %[[VAL_597]], align 4
// CHECK:         %[[VAL_598:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_520]]
// CHECK:         store float %[[VAL_596]], ptr addrspace(3) %[[VAL_598]], align 4
// CHECK:         br label %[[VAL_522]]
// CHECK:       is_last_tile-true54:                              ; preds = %[[VAL_510]]
// CHECK:         %[[VAL_599:.*]] = mul nuw nsw i64 %[[VAL_371]], 2
// CHECK:         %[[VAL_600:.*]] = add nuw nsw i64 %[[VAL_599]], 0
// CHECK:         %[[VAL_601:.*]] = icmp slt i64 %[[VAL_600]], 2
// CHECK:         %[[VAL_602:.*]] = select i1 %[[VAL_601]], i64 %[[VAL_600]], i64 0
// CHECK:         %[[VAL_603:.*]] = xor i64 %[[VAL_602]], 3
// CHECK:         %[[VAL_604:.*]] = icmp slt i64 %[[VAL_603]], 3
// CHECK:         br i1 %[[VAL_604]], label %[[VAL_605:.*]], label %[[VAL_606:.*]]
// CHECK:       smaller_comparison_index-after60:                 ; preds = %[[VAL_607:.*]], %[[VAL_416]]
// CHECK:         %[[VAL_608:.*]] = add nuw nsw i64 %[[VAL_599]], 1
// CHECK:         %[[VAL_609:.*]] = icmp slt i64 %[[VAL_608]], 2
// CHECK:         %[[VAL_610:.*]] = select i1 %[[VAL_609]], i64 %[[VAL_608]], i64 0
// CHECK:         %[[VAL_611:.*]] = xor i64 %[[VAL_610]], 3
// CHECK:         %[[VAL_612:.*]] = icmp slt i64 %[[VAL_611]], 3
// CHECK:         br i1 %[[VAL_612]], label %[[VAL_613:.*]], label %[[VAL_419]]
// CHECK:       smaller_comparison_index-after67:                 ; preds = %[[VAL_614:.*]], %[[VAL_606]]
// CHECK:         br label %[[VAL_615:.*]]
// CHECK:       is_last_tile-false55:                             ; preds = %[[VAL_510]]
// CHECK:         %[[VAL_616:.*]] = mul nuw nsw i64 %[[VAL_371]], 2
// CHECK:         %[[VAL_617:.*]] = add nuw nsw i64 %[[VAL_616]], 0
// CHECK:         %[[VAL_618:.*]] = icmp slt i64 %[[VAL_617]], 2
// CHECK:         %[[VAL_619:.*]] = select i1 %[[VAL_618]], i64 %[[VAL_617]], i64 7
// CHECK:         %[[VAL_620:.*]] = xor i64 %[[VAL_619]], 3
// CHECK:         br i1 true, label %[[VAL_621:.*]], label %[[VAL_622:.*]]
// CHECK:       smaller_comparison_index-after75:                 ; preds = %[[VAL_623:.*]], %[[VAL_417]]
// CHECK:         %[[VAL_624:.*]] = add nuw nsw i64 %[[VAL_616]], 1
// CHECK:         %[[VAL_625:.*]] = icmp slt i64 %[[VAL_624]], 2
// CHECK:         %[[VAL_626:.*]] = select i1 %[[VAL_625]], i64 %[[VAL_624]], i64 7
// CHECK:         %[[VAL_627:.*]] = xor i64 %[[VAL_626]], 3
// CHECK:         br i1 true, label %[[VAL_628:.*]], label %[[VAL_418]]
// CHECK:       smaller_comparison_index-after82:                 ; preds = %[[VAL_629:.*]], %[[VAL_622]]
// CHECK:         br label %[[VAL_615]]
// CHECK:       smaller_comparison_index-true59:                  ; preds = %[[VAL_416]]
// CHECK:         %[[VAL_630:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_603]]
// CHECK:         %[[VAL_631:.*]] = addrspacecast ptr addrspace(3) %[[VAL_630]] to ptr
// CHECK:         %[[VAL_632:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_602]]
// CHECK:         %[[VAL_633:.*]] = addrspacecast ptr addrspace(3) %[[VAL_632]] to ptr
// CHECK:         %[[VAL_634:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_603]]
// CHECK:         %[[VAL_635:.*]] = addrspacecast ptr addrspace(3) %[[VAL_634]] to ptr
// CHECK:         %[[VAL_636:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_602]]
// CHECK:         %[[VAL_637:.*]] = addrspacecast ptr addrspace(3) %[[VAL_636]] to ptr
// CHECK-GCN:     %[[VAL_349_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_349]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_631]], ptr %[[VAL_633]], ptr %[[VAL_635]], ptr %[[VAL_637]], ptr %[[VAL_349]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_631]], ptr %[[VAL_633]], ptr %[[VAL_635]], ptr %[[VAL_637]], ptr %[[VAL_349_2]])
// CHECK-PTX:     %[[VAL_638:.*]] = load i8, ptr %[[VAL_349]], align 1
// CHECK-GCN:     %[[VAL_638:.*]] = load i8, ptr addrspace(5) %[[VAL_349]], align 1
// CHECK:         %[[VAL_639:.*]] = icmp ne i8 %[[VAL_638]], 0
// CHECK:         br i1 %[[VAL_639]], label %[[VAL_640:.*]], label %[[VAL_607]]
// CHECK:       is_smaller_than-after64:                          ; preds = %[[VAL_640]], %[[VAL_605]]
// CHECK:         br label %[[VAL_606]]
// CHECK:       is_smaller_than-true63:                           ; preds = %[[VAL_605]]
// CHECK:         %[[VAL_641:.*]] = load i32, ptr %[[VAL_631]], align 4
// CHECK:         %[[VAL_642:.*]] = load i32, ptr %[[VAL_633]], align 4
// CHECK:         %[[VAL_643:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_602]]
// CHECK:         store i32 %[[VAL_641]], ptr addrspace(3) %[[VAL_643]], align 4
// CHECK:         %[[VAL_644:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_603]]
// CHECK:         store i32 %[[VAL_642]], ptr addrspace(3) %[[VAL_644]], align 4
// CHECK:         %[[VAL_645:.*]] = load float, ptr %[[VAL_635]], align 4
// CHECK:         %[[VAL_646:.*]] = load float, ptr %[[VAL_637]], align 4
// CHECK:         %[[VAL_647:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_602]]
// CHECK:         store float %[[VAL_645]], ptr addrspace(3) %[[VAL_647]], align 4
// CHECK:         %[[VAL_648:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_603]]
// CHECK:         store float %[[VAL_646]], ptr addrspace(3) %[[VAL_648]], align 4
// CHECK:         br label %[[VAL_607]]
// CHECK:       smaller_comparison_index-true66:                  ; preds = %[[VAL_606]]
// CHECK:         %[[VAL_649:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_611]]
// CHECK:         %[[VAL_650:.*]] = addrspacecast ptr addrspace(3) %[[VAL_649]] to ptr
// CHECK:         %[[VAL_651:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_610]]
// CHECK:         %[[VAL_652:.*]] = addrspacecast ptr addrspace(3) %[[VAL_651]] to ptr
// CHECK:         %[[VAL_653:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_611]]
// CHECK:         %[[VAL_654:.*]] = addrspacecast ptr addrspace(3) %[[VAL_653]] to ptr
// CHECK:         %[[VAL_655:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_610]]
// CHECK:         %[[VAL_656:.*]] = addrspacecast ptr addrspace(3) %[[VAL_655]] to ptr
// CHECK-GCN:     %[[VAL_348_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_348]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_650]], ptr %[[VAL_652]], ptr %[[VAL_654]], ptr %[[VAL_656]], ptr %[[VAL_348]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_650]], ptr %[[VAL_652]], ptr %[[VAL_654]], ptr %[[VAL_656]], ptr %[[VAL_348_2]])
// CHECK-PTX:     %[[VAL_657:.*]] = load i8, ptr %[[VAL_348]], align 1
// CHECK-GCN:     %[[VAL_657:.*]] = load i8, ptr addrspace(5) %[[VAL_348]], align 1
// CHECK:         %[[VAL_658:.*]] = icmp ne i8 %[[VAL_657]], 0
// CHECK:         br i1 %[[VAL_658]], label %[[VAL_659:.*]], label %[[VAL_614]]
// CHECK:       is_smaller_than-after71:                          ; preds = %[[VAL_659]], %[[VAL_613]]
// CHECK:         br label %[[VAL_419]]
// CHECK:       is_smaller_than-true70:                           ; preds = %[[VAL_613]]
// CHECK:         %[[VAL_660:.*]] = load i32, ptr %[[VAL_650]], align 4
// CHECK:         %[[VAL_661:.*]] = load i32, ptr %[[VAL_652]], align 4
// CHECK:         %[[VAL_662:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_610]]
// CHECK:         store i32 %[[VAL_660]], ptr addrspace(3) %[[VAL_662]], align 4
// CHECK:         %[[VAL_663:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_611]]
// CHECK:         store i32 %[[VAL_661]], ptr addrspace(3) %[[VAL_663]], align 4
// CHECK:         %[[VAL_664:.*]] = load float, ptr %[[VAL_654]], align 4
// CHECK:         %[[VAL_665:.*]] = load float, ptr %[[VAL_656]], align 4
// CHECK:         %[[VAL_666:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_610]]
// CHECK:         store float %[[VAL_664]], ptr addrspace(3) %[[VAL_666]], align 4
// CHECK:         %[[VAL_667:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_611]]
// CHECK:         store float %[[VAL_665]], ptr addrspace(3) %[[VAL_667]], align 4
// CHECK:         br label %[[VAL_614]]
// CHECK:       smaller_comparison_index-true74:                  ; preds = %[[VAL_417]]
// CHECK:         %[[VAL_668:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_620]]
// CHECK:         %[[VAL_669:.*]] = addrspacecast ptr addrspace(3) %[[VAL_668]] to ptr
// CHECK:         %[[VAL_670:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_619]]
// CHECK:         %[[VAL_671:.*]] = addrspacecast ptr addrspace(3) %[[VAL_670]] to ptr
// CHECK:         %[[VAL_672:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_620]]
// CHECK:         %[[VAL_673:.*]] = addrspacecast ptr addrspace(3) %[[VAL_672]] to ptr
// CHECK:         %[[VAL_674:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_619]]
// CHECK:         %[[VAL_675:.*]] = addrspacecast ptr addrspace(3) %[[VAL_674]] to ptr
// CHECK-GCN:     %[[VAL_347_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_347]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_669]], ptr %[[VAL_671]], ptr %[[VAL_673]], ptr %[[VAL_675]], ptr %[[VAL_347]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_669]], ptr %[[VAL_671]], ptr %[[VAL_673]], ptr %[[VAL_675]], ptr %[[VAL_347_2]])
// CHECK-PTX:     %[[VAL_676:.*]] = load i8, ptr %[[VAL_347]], align 1
// CHECK-GCN:     %[[VAL_676:.*]] = load i8, ptr addrspace(5) %[[VAL_347]], align 1
// CHECK:         %[[VAL_677:.*]] = icmp ne i8 %[[VAL_676]], 0
// CHECK:         br i1 %[[VAL_677]], label %[[VAL_678:.*]], label %[[VAL_623]]
// CHECK:       is_smaller_than-after79:                          ; preds = %[[VAL_678]], %[[VAL_621]]
// CHECK:         br label %[[VAL_622]]
// CHECK:       is_smaller_than-true78:                           ; preds = %[[VAL_621]]
// CHECK:         %[[VAL_679:.*]] = load i32, ptr %[[VAL_669]], align 4
// CHECK:         %[[VAL_680:.*]] = load i32, ptr %[[VAL_671]], align 4
// CHECK:         %[[VAL_681:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_619]]
// CHECK:         store i32 %[[VAL_679]], ptr addrspace(3) %[[VAL_681]], align 4
// CHECK:         %[[VAL_682:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_620]]
// CHECK:         store i32 %[[VAL_680]], ptr addrspace(3) %[[VAL_682]], align 4
// CHECK:         %[[VAL_683:.*]] = load float, ptr %[[VAL_673]], align 4
// CHECK:         %[[VAL_684:.*]] = load float, ptr %[[VAL_675]], align 4
// CHECK:         %[[VAL_685:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_619]]
// CHECK:         store float %[[VAL_683]], ptr addrspace(3) %[[VAL_685]], align 4
// CHECK:         %[[VAL_686:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_620]]
// CHECK:         store float %[[VAL_684]], ptr addrspace(3) %[[VAL_686]], align 4
// CHECK:         br label %[[VAL_623]]
// CHECK:       smaller_comparison_index-true81:                  ; preds = %[[VAL_622]]
// CHECK:         %[[VAL_687:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_627]]
// CHECK:         %[[VAL_688:.*]] = addrspacecast ptr addrspace(3) %[[VAL_687]] to ptr
// CHECK:         %[[VAL_689:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_626]]
// CHECK:         %[[VAL_690:.*]] = addrspacecast ptr addrspace(3) %[[VAL_689]] to ptr
// CHECK:         %[[VAL_691:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_627]]
// CHECK:         %[[VAL_692:.*]] = addrspacecast ptr addrspace(3) %[[VAL_691]] to ptr
// CHECK:         %[[VAL_693:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_626]]
// CHECK:         %[[VAL_694:.*]] = addrspacecast ptr addrspace(3) %[[VAL_693]] to ptr
// CHECK-GCN:     %[[VAL_346_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_346]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_688]], ptr %[[VAL_690]], ptr %[[VAL_692]], ptr %[[VAL_694]], ptr %[[VAL_346]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_688]], ptr %[[VAL_690]], ptr %[[VAL_692]], ptr %[[VAL_694]], ptr %[[VAL_346_2]])
// CHECK-PTX:     %[[VAL_695:.*]] = load i8, ptr %[[VAL_346]], align 1
// CHECK-GCN:     %[[VAL_695:.*]] = load i8, ptr addrspace(5) %[[VAL_346]], align 1
// CHECK:         %[[VAL_696:.*]] = icmp ne i8 %[[VAL_695]], 0
// CHECK:         br i1 %[[VAL_696]], label %[[VAL_697:.*]], label %[[VAL_629]]
// CHECK:       is_smaller_than-after86:                          ; preds = %[[VAL_697]], %[[VAL_628]]
// CHECK:         br label %[[VAL_418]]
// CHECK:       is_smaller_than-true85:                           ; preds = %[[VAL_628]]
// CHECK:         %[[VAL_698:.*]] = load i32, ptr %[[VAL_688]], align 4
// CHECK:         %[[VAL_699:.*]] = load i32, ptr %[[VAL_690]], align 4
// CHECK:         %[[VAL_700:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_626]]
// CHECK:         store i32 %[[VAL_698]], ptr addrspace(3) %[[VAL_700]], align 4
// CHECK:         %[[VAL_701:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_627]]
// CHECK:         store i32 %[[VAL_699]], ptr addrspace(3) %[[VAL_701]], align 4
// CHECK:         %[[VAL_702:.*]] = load float, ptr %[[VAL_692]], align 4
// CHECK:         %[[VAL_703:.*]] = load float, ptr %[[VAL_694]], align 4
// CHECK:         %[[VAL_704:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_626]]
// CHECK:         store float %[[VAL_702]], ptr addrspace(3) %[[VAL_704]], align 4
// CHECK:         %[[VAL_705:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_627]]
// CHECK:         store float %[[VAL_703]], ptr addrspace(3) %[[VAL_705]], align 4
// CHECK:         br label %[[VAL_629]]
// CHECK:       is_last_tile-true87:                              ; preds = %[[VAL_615]]
// CHECK:         %[[VAL_706:.*]] = mul nuw nsw i64 %[[VAL_371]], 2
// CHECK:         %[[VAL_707:.*]] = add nuw nsw i64 %[[VAL_706]], 0
// CHECK:         %[[VAL_708:.*]] = mul i64 %[[VAL_707]], 2
// CHECK:         %[[VAL_709:.*]] = xor i64 %[[VAL_708]], 1
// CHECK:         %[[VAL_710:.*]] = icmp slt i64 %[[VAL_709]], 3
// CHECK:         br i1 %[[VAL_710]], label %[[VAL_711:.*]], label %[[VAL_712:.*]]
// CHECK:       smaller_comparison_index-after93:                 ; preds = %[[VAL_713:.*]], %[[VAL_422]]
// CHECK:         %[[VAL_714:.*]] = add nuw nsw i64 %[[VAL_706]], 1
// CHECK:         %[[VAL_715:.*]] = mul i64 %[[VAL_714]], 2
// CHECK:         %[[VAL_716:.*]] = xor i64 %[[VAL_715]], 1
// CHECK:         %[[VAL_717:.*]] = icmp slt i64 %[[VAL_716]], 3
// CHECK:         br i1 %[[VAL_717]], label %[[VAL_718:.*]], label %[[VAL_425]]
// CHECK:       smaller_comparison_index-after100:                ; preds = %[[VAL_719:.*]], %[[VAL_712]]
// CHECK:         br label %[[VAL_432]]
// CHECK:       is_last_tile-false88:                             ; preds = %[[VAL_615]]
// CHECK:         %[[VAL_720:.*]] = mul nuw nsw i64 %[[VAL_371]], 2
// CHECK:         %[[VAL_721:.*]] = add nuw nsw i64 %[[VAL_720]], 0
// CHECK:         %[[VAL_722:.*]] = mul i64 %[[VAL_721]], 2
// CHECK:         %[[VAL_723:.*]] = xor i64 %[[VAL_722]], 1
// CHECK:         br i1 true, label %[[VAL_724:.*]], label %[[VAL_725:.*]]
// CHECK:       smaller_comparison_index-after108:                ; preds = %[[VAL_726:.*]], %[[VAL_423]]
// CHECK:         %[[VAL_727:.*]] = add nuw nsw i64 %[[VAL_720]], 1
// CHECK:         %[[VAL_728:.*]] = mul i64 %[[VAL_727]], 2
// CHECK:         %[[VAL_729:.*]] = xor i64 %[[VAL_728]], 1
// CHECK:         br i1 true, label %[[VAL_730:.*]], label %[[VAL_424]]
// CHECK:       smaller_comparison_index-after115:                ; preds = %[[VAL_731:.*]], %[[VAL_725]]
// CHECK:         br label %[[VAL_432]]
// CHECK:       smaller_comparison_index-true92:                  ; preds = %[[VAL_422]]
// CHECK:         %[[VAL_732:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_709]]
// CHECK:         %[[VAL_733:.*]] = addrspacecast ptr addrspace(3) %[[VAL_732]] to ptr
// CHECK:         %[[VAL_734:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_708]]
// CHECK:         %[[VAL_735:.*]] = addrspacecast ptr addrspace(3) %[[VAL_734]] to ptr
// CHECK:         %[[VAL_736:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_709]]
// CHECK:         %[[VAL_737:.*]] = addrspacecast ptr addrspace(3) %[[VAL_736]] to ptr
// CHECK:         %[[VAL_738:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_708]]
// CHECK:         %[[VAL_739:.*]] = addrspacecast ptr addrspace(3) %[[VAL_738]] to ptr
// CHECK-GCN:     %[[VAL_345_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_345]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_733]], ptr %[[VAL_735]], ptr %[[VAL_737]], ptr %[[VAL_739]], ptr %[[VAL_345]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_733]], ptr %[[VAL_735]], ptr %[[VAL_737]], ptr %[[VAL_739]], ptr %[[VAL_345_2]])
// CHECK-PTX:     %[[VAL_740:.*]] = load i8, ptr %[[VAL_345]], align 1
// CHECK-GCN:     %[[VAL_740:.*]] = load i8, ptr addrspace(5) %[[VAL_345]], align 1
// CHECK:         %[[VAL_741:.*]] = icmp ne i8 %[[VAL_740]], 0
// CHECK:         br i1 %[[VAL_741]], label %[[VAL_742:.*]], label %[[VAL_713]]
// CHECK:       is_smaller_than-after97:                          ; preds = %[[VAL_742]], %[[VAL_711]]
// CHECK:         br label %[[VAL_712]]
// CHECK:       is_smaller_than-true96:                           ; preds = %[[VAL_711]]
// CHECK:         %[[VAL_743:.*]] = load i32, ptr %[[VAL_733]], align 4
// CHECK:         %[[VAL_744:.*]] = load i32, ptr %[[VAL_735]], align 4
// CHECK:         %[[VAL_745:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_708]]
// CHECK:         store i32 %[[VAL_743]], ptr addrspace(3) %[[VAL_745]], align 4
// CHECK:         %[[VAL_746:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_709]]
// CHECK:         store i32 %[[VAL_744]], ptr addrspace(3) %[[VAL_746]], align 4
// CHECK:         %[[VAL_747:.*]] = load float, ptr %[[VAL_737]], align 4
// CHECK:         %[[VAL_748:.*]] = load float, ptr %[[VAL_739]], align 4
// CHECK:         %[[VAL_749:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_708]]
// CHECK:         store float %[[VAL_747]], ptr addrspace(3) %[[VAL_749]], align 4
// CHECK:         %[[VAL_750:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_709]]
// CHECK:         store float %[[VAL_748]], ptr addrspace(3) %[[VAL_750]], align 4
// CHECK:         br label %[[VAL_713]]
// CHECK:       smaller_comparison_index-true99:                  ; preds = %[[VAL_712]]
// CHECK:         %[[VAL_751:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_716]]
// CHECK:         %[[VAL_752:.*]] = addrspacecast ptr addrspace(3) %[[VAL_751]] to ptr
// CHECK:         %[[VAL_753:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_715]]
// CHECK:         %[[VAL_754:.*]] = addrspacecast ptr addrspace(3) %[[VAL_753]] to ptr
// CHECK:         %[[VAL_755:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_716]]
// CHECK:         %[[VAL_756:.*]] = addrspacecast ptr addrspace(3) %[[VAL_755]] to ptr
// CHECK:         %[[VAL_757:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_715]]
// CHECK:         %[[VAL_758:.*]] = addrspacecast ptr addrspace(3) %[[VAL_757]] to ptr
// CHECK-GCN:     %[[VAL_344_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_344]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_752]], ptr %[[VAL_754]], ptr %[[VAL_756]], ptr %[[VAL_758]], ptr %[[VAL_344]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_752]], ptr %[[VAL_754]], ptr %[[VAL_756]], ptr %[[VAL_758]], ptr %[[VAL_344_2]])
// CHECK-PTX:     %[[VAL_759:.*]] = load i8, ptr %[[VAL_344]], align 1
// CHECK-GCN:     %[[VAL_759:.*]] = load i8, ptr addrspace(5) %[[VAL_344]], align 1
// CHECK:         %[[VAL_760:.*]] = icmp ne i8 %[[VAL_759]], 0
// CHECK:         br i1 %[[VAL_760]], label %[[VAL_761:.*]], label %[[VAL_719]]
// CHECK:       is_smaller_than-after104:                         ; preds = %[[VAL_761]], %[[VAL_718]]
// CHECK:         br label %[[VAL_425]]
// CHECK:       is_smaller_than-true103:                          ; preds = %[[VAL_718]]
// CHECK:         %[[VAL_762:.*]] = load i32, ptr %[[VAL_752]], align 4
// CHECK:         %[[VAL_763:.*]] = load i32, ptr %[[VAL_754]], align 4
// CHECK:         %[[VAL_764:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_715]]
// CHECK:         store i32 %[[VAL_762]], ptr addrspace(3) %[[VAL_764]], align 4
// CHECK:         %[[VAL_765:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_716]]
// CHECK:         store i32 %[[VAL_763]], ptr addrspace(3) %[[VAL_765]], align 4
// CHECK:         %[[VAL_766:.*]] = load float, ptr %[[VAL_756]], align 4
// CHECK:         %[[VAL_767:.*]] = load float, ptr %[[VAL_758]], align 4
// CHECK:         %[[VAL_768:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_715]]
// CHECK:         store float %[[VAL_766]], ptr addrspace(3) %[[VAL_768]], align 4
// CHECK:         %[[VAL_769:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_716]]
// CHECK:         store float %[[VAL_767]], ptr addrspace(3) %[[VAL_769]], align 4
// CHECK:         br label %[[VAL_719]]
// CHECK:       smaller_comparison_index-true107:                 ; preds = %[[VAL_423]]
// CHECK:         %[[VAL_770:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_723]]
// CHECK:         %[[VAL_771:.*]] = addrspacecast ptr addrspace(3) %[[VAL_770]] to ptr
// CHECK:         %[[VAL_772:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_722]]
// CHECK:         %[[VAL_773:.*]] = addrspacecast ptr addrspace(3) %[[VAL_772]] to ptr
// CHECK:         %[[VAL_774:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_723]]
// CHECK:         %[[VAL_775:.*]] = addrspacecast ptr addrspace(3) %[[VAL_774]] to ptr
// CHECK:         %[[VAL_776:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_722]]
// CHECK:         %[[VAL_777:.*]] = addrspacecast ptr addrspace(3) %[[VAL_776]] to ptr
// CHECK-GCN:     %[[VAL_343_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_343]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_771]], ptr %[[VAL_773]], ptr %[[VAL_775]], ptr %[[VAL_777]], ptr %[[VAL_343]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_771]], ptr %[[VAL_773]], ptr %[[VAL_775]], ptr %[[VAL_777]], ptr %[[VAL_343_2]])
// CHECK-PTX:     %[[VAL_778:.*]] = load i8, ptr %[[VAL_343]], align 1
// CHECK-GCN:     %[[VAL_778:.*]] = load i8, ptr addrspace(5) %[[VAL_343]], align 1
// CHECK:         %[[VAL_779:.*]] = icmp ne i8 %[[VAL_778]], 0
// CHECK:         br i1 %[[VAL_779]], label %[[VAL_780:.*]], label %[[VAL_726]]
// CHECK:       is_smaller_than-after112:                         ; preds = %[[VAL_780]], %[[VAL_724]]
// CHECK:         br label %[[VAL_725]]
// CHECK:       is_smaller_than-true111:                          ; preds = %[[VAL_724]]
// CHECK:         %[[VAL_781:.*]] = load i32, ptr %[[VAL_771]], align 4
// CHECK:         %[[VAL_782:.*]] = load i32, ptr %[[VAL_773]], align 4
// CHECK:         %[[VAL_783:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_722]]
// CHECK:         store i32 %[[VAL_781]], ptr addrspace(3) %[[VAL_783]], align 4
// CHECK:         %[[VAL_784:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_723]]
// CHECK:         store i32 %[[VAL_782]], ptr addrspace(3) %[[VAL_784]], align 4
// CHECK:         %[[VAL_785:.*]] = load float, ptr %[[VAL_775]], align 4
// CHECK:         %[[VAL_786:.*]] = load float, ptr %[[VAL_777]], align 4
// CHECK:         %[[VAL_787:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_722]]
// CHECK:         store float %[[VAL_785]], ptr addrspace(3) %[[VAL_787]], align 4
// CHECK:         %[[VAL_788:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_723]]
// CHECK:         store float %[[VAL_786]], ptr addrspace(3) %[[VAL_788]], align 4
// CHECK:         br label %[[VAL_726]]
// CHECK:       smaller_comparison_index-true114:                 ; preds = %[[VAL_725]]
// CHECK:         %[[VAL_789:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_729]]
// CHECK:         %[[VAL_790:.*]] = addrspacecast ptr addrspace(3) %[[VAL_789]] to ptr
// CHECK:         %[[VAL_791:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_728]]
// CHECK:         %[[VAL_792:.*]] = addrspacecast ptr addrspace(3) %[[VAL_791]] to ptr
// CHECK:         %[[VAL_793:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_729]]
// CHECK:         %[[VAL_794:.*]] = addrspacecast ptr addrspace(3) %[[VAL_793]] to ptr
// CHECK:         %[[VAL_795:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_728]]
// CHECK:         %[[VAL_796:.*]] = addrspacecast ptr addrspace(3) %[[VAL_795]] to ptr
// CHECK-GCN:     %[[VAL_342_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_342]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_790]], ptr %[[VAL_792]], ptr %[[VAL_794]], ptr %[[VAL_796]], ptr %[[VAL_342]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_790]], ptr %[[VAL_792]], ptr %[[VAL_794]], ptr %[[VAL_796]], ptr %[[VAL_342_2]])
// CHECK-PTX:     %[[VAL_797:.*]] = load i8, ptr %[[VAL_342]], align 1
// CHECK-GCN:     %[[VAL_797:.*]] = load i8, ptr addrspace(5) %[[VAL_342]], align 1
// CHECK:         %[[VAL_798:.*]] = icmp ne i8 %[[VAL_797]], 0
// CHECK:         br i1 %[[VAL_798]], label %[[VAL_799:.*]], label %[[VAL_731]]
// CHECK:       is_smaller_than-after119:                         ; preds = %[[VAL_799]], %[[VAL_730]]
// CHECK:         br label %[[VAL_424]]
// CHECK:       is_smaller_than-true118:                          ; preds = %[[VAL_730]]
// CHECK:         %[[VAL_800:.*]] = load i32, ptr %[[VAL_790]], align 4
// CHECK:         %[[VAL_801:.*]] = load i32, ptr %[[VAL_792]], align 4
// CHECK:         %[[VAL_802:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_728]]
// CHECK:         store i32 %[[VAL_800]], ptr addrspace(3) %[[VAL_802]], align 4
// CHECK:         %[[VAL_803:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_729]]
// CHECK:         store i32 %[[VAL_801]], ptr addrspace(3) %[[VAL_803]], align 4
// CHECK:         %[[VAL_804:.*]] = load float, ptr %[[VAL_794]], align 4
// CHECK:         %[[VAL_805:.*]] = load float, ptr %[[VAL_796]], align 4
// CHECK:         %[[VAL_806:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_728]]
// CHECK:         store float %[[VAL_804]], ptr addrspace(3) %[[VAL_806]], align 4
// CHECK:         %[[VAL_807:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_729]]
// CHECK:         store float %[[VAL_805]], ptr addrspace(3) %[[VAL_807]], align 4
// CHECK:         br label %[[VAL_731]]
// CHECK:       smaller_keys_index-true123:                       ; preds = %[[VAL_432]]
// CHECK:         %[[VAL_808:.*]] = add nuw nsw i64 %[[VAL_427]], 0
// CHECK:         %[[VAL_809:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_808]]
// CHECK:         %[[VAL_810:.*]] = load i32, ptr addrspace(3) %[[VAL_809]], align 4
// CHECK:         %[[VAL_811:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_464]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_428]]
// CHECK:         store i32 %[[VAL_810]], ptr %[[VAL_811]], align 4
// CHECK:         br label %[[VAL_431]]
// CHECK:       smaller_keys_index-true127:                       ; preds = %[[VAL_431]]
// CHECK:         %[[VAL_812:.*]] = add nuw nsw i64 %[[VAL_427]], 1
// CHECK:         %[[VAL_813:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_812]]
// CHECK:         %[[VAL_814:.*]] = load i32, ptr addrspace(3) %[[VAL_813]], align 4
// CHECK:         %[[VAL_815:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_464]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_433]]
// CHECK:         store i32 %[[VAL_814]], ptr %[[VAL_815]], align 4
// CHECK:         br label %[[VAL_436]]
// CHECK:       smaller_keys_index-true131:                       ; preds = %[[VAL_436]]
// CHECK:         %[[VAL_816:.*]] = add nuw nsw i64 %[[VAL_427]], 2
// CHECK:         %[[VAL_817:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_816]]
// CHECK:         %[[VAL_818:.*]] = load i32, ptr addrspace(3) %[[VAL_817]], align 4
// CHECK:         %[[VAL_819:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_464]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_437]]
// CHECK:         store i32 %[[VAL_818]], ptr %[[VAL_819]], align 4
// CHECK:         br label %[[VAL_440]]
// CHECK:       smaller_keys_index-true135:                       ; preds = %[[VAL_440]]
// CHECK:         %[[VAL_820:.*]] = add nuw nsw i64 %[[VAL_427]], 3
// CHECK:         %[[VAL_821:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_820]]
// CHECK:         %[[VAL_822:.*]] = load i32, ptr addrspace(3) %[[VAL_821]], align 4
// CHECK:         %[[VAL_823:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_464]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_441]]
// CHECK:         store i32 %[[VAL_822]], ptr %[[VAL_823]], align 4
// CHECK:         br label %[[VAL_444]]
// CHECK:       smaller_keys_index-true141:                       ; preds = %[[VAL_444]]
// CHECK:         %[[VAL_824:.*]] = add nuw nsw i64 %[[VAL_446]], 0
// CHECK:         %[[VAL_825:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_824]]
// CHECK:         %[[VAL_826:.*]] = load float, ptr addrspace(3) %[[VAL_825]], align 4
// CHECK:         %[[VAL_827:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_481]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_447]]
// CHECK:         store float %[[VAL_826]], ptr %[[VAL_827]], align 4
// CHECK:         br label %[[VAL_450]]
// CHECK:       smaller_keys_index-true145:                       ; preds = %[[VAL_450]]
// CHECK:         %[[VAL_828:.*]] = add nuw nsw i64 %[[VAL_446]], 1
// CHECK:         %[[VAL_829:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_828]]
// CHECK:         %[[VAL_830:.*]] = load float, ptr addrspace(3) %[[VAL_829]], align 4
// CHECK:         %[[VAL_831:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_481]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_451]]
// CHECK:         store float %[[VAL_830]], ptr %[[VAL_831]], align 4
// CHECK:         br label %[[VAL_454]]
// CHECK:       smaller_keys_index-true149:                       ; preds = %[[VAL_454]]
// CHECK:         %[[VAL_832:.*]] = add nuw nsw i64 %[[VAL_446]], 2
// CHECK:         %[[VAL_833:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_832]]
// CHECK:         %[[VAL_834:.*]] = load float, ptr addrspace(3) %[[VAL_833]], align 4
// CHECK:         %[[VAL_835:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_481]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_455]]
// CHECK:         store float %[[VAL_834]], ptr %[[VAL_835]], align 4
// CHECK:         br label %[[VAL_458]]
// CHECK:       smaller_keys_index-true153:                       ; preds = %[[VAL_458]]
// CHECK:         %[[VAL_836:.*]] = add nuw nsw i64 %[[VAL_446]], 3
// CHECK:         %[[VAL_837:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_836]]
// CHECK:         %[[VAL_838:.*]] = load float, ptr addrspace(3) %[[VAL_837]], align 4
// CHECK:         %[[VAL_839:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_481]], i64 0, i64 %[[VAL_364]], i64 %[[VAL_459]]
// CHECK:         store float %[[VAL_838]], ptr %[[VAL_839]], align 4
// CHECK:         br label %[[VAL_368]]
// CHECK:         %[[VAL_840:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_841:.*]] = load float, ptr %[[VAL_842:.*]], align 4
// CHECK:         %[[VAL_843:.*]] = load float, ptr %[[VAL_844:.*]], align 4
// CHECK:         %[[VAL_845:.*]] = fcmp olt float %[[VAL_841]], %[[VAL_843]]
// CHECK:         %[[VAL_846:.*]] = zext i1 %[[VAL_845]] to i8
// CHECK:         store i8 %[[VAL_846]], ptr %[[VAL_840]], align 1
// CHECK:         %[[VAL_847:.*]] = load i8, ptr %[[VAL_840]], align 1
// CHECK:         store i8 %[[VAL_847]], ptr %[[VAL_848:.*]], align 1
// CHECK:         ret void

ENTRY main {
  x = s32[2, 3] parameter(0)
  y = f32[2, 3] parameter(1)
  ROOT sort = (s32[2, 3], f32[2, 3]) sort(x, y), dimensions={1}, to_apply=compare
}

// -----

HloModule TestModule, is_scheduled=true

compare {
  p.0.lhs = f64[] parameter(0)
  p.0.rhs = f64[] parameter(1)
  p.1.lhs = f64[] parameter(2)
  p.1.rhs = f64[] parameter(3)
  p.2.lhs = f64[] parameter(4)
  p.2.rhs = f64[] parameter(5)
  p.3.lhs = f64[] parameter(6)
  p.3.rhs = f64[] parameter(7)
  ROOT lt = pred[] compare(p.1.lhs, p.1.rhs), direction=LT
}

ENTRY main {
  param0 = f64[2, 2048] parameter(0)
  param1 = f64[2, 2048] parameter(1)
  param2 = f64[2, 2048] parameter(2)
  param3 = f64[2, 2048] parameter(3)
  ROOT sort = (f64[2, 2048], f64[2, 2048], f64[2, 2048], f64[2, 2048]) sort(param0, param1, param2, param3), dimensions={1}, to_apply=compare
}
// Check that we have a tile size of 1024.
// CHECK:         getelementptr [1024 x double], ptr addrspace(3) @sort_tile_param_0

// -----

HloModule TestModule, is_scheduled=true

compare {
  p.0.lhs = f64[] parameter(0)
  p.0.rhs = f64[] parameter(1)
  ROOT lt = pred[] compare(p.0.lhs, p.0.rhs), direction=LT
}

ENTRY main {
  param0 = f64[3072] parameter(0)
  ROOT sort = f64[3072] sort(param0), dimensions={0}, to_apply=compare
}

// CHECK-COUNT-334: xor i64
// CHECK-NOT: xor i64
