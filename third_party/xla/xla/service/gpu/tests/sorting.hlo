// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: hlo-opt %s --platform=gpu --stage=llvm-before-optimizations --xla_gpu_target_config_filename=%S/../../../tools/hlo_opt/gpu_specs/%{GPU}.txtpb --split-input-file | FileCheck --check-prefixes=CHECK,CHECK-%{PTX} %s

HloModule TestModule, is_scheduled=true

compare {
  p.0.lhs = f32[] parameter(0)
  p.0.rhs = f32[] parameter(1)
  ROOT lt = pred[] compare(p.0.lhs, p.0.rhs), direction=LT
}

// CHECK-LABEL: entry:
// CHECK:         %[[VAL_0:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_1:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_2:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_3:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_4:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_5:.*]] = alloca i8, align 1
// CHECK-PTX:     %[[VAL_6:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x
// CHECK-GCN:     %[[VAL_6:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_7:.*]] = zext i32 %[[VAL_6]] to i64
// CHECK-PTX:     %[[VAL_8:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_8:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_9:.*]] = zext i32 %[[VAL_8]] to i64
// CHECK:         %[[VAL_10:.*]] = mul nuw nsw i64 %[[VAL_7]], 2
// CHECK:         %[[VAL_11:.*]] = add nuw nsw i64 %[[VAL_10]], %[[VAL_9]]
// CHECK:         %[[VAL_12:.*]] = icmp ult i64 %[[VAL_11]], 4
// CHECK:         call void @llvm.assume(i1 %[[VAL_12]])
// CHECK:         %[[VAL_13:.*]] = add nuw nsw i64 %[[VAL_11]], 0
// CHECK:         %[[VAL_14:.*]] = udiv i64 %[[VAL_13]], 1
// CHECK:         %[[VAL_15:.*]] = urem i64 %[[VAL_14]], 2
// CHECK:         %[[VAL_16:.*]] = udiv i64 %[[VAL_13]], 2
// CHECK:         %[[VAL_17:.*]] = icmp ult i64 %[[VAL_11]], 4
// CHECK:         br i1 %[[VAL_17]], label %[[VAL_18:.*]], label %[[VAL_19:.*]]
// CHECK:       sort.in_bounds-after:                             ; preds = %[[VAL_20:.*]], %[[VAL_21:.*]]
// CHECK:         ret void
// CHECK:       sort.in_bounds-true:                              ; preds = %[[VAL_21]]
// CHECK-PTX:     %[[VAL_22:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_22:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_23:.*]] = sext i32 %[[VAL_22]] to i64
// CHECK:         %[[VAL_24:.*]] = shl i64 %[[VAL_15]], 1
// CHECK:         %[[VAL_25:.*]] = icmp slt i64 %[[VAL_24]], 3
// CHECK:         br i1 %[[VAL_25]], label %[[VAL_26:.*]], label %[[VAL_27:.*]]
// CHECK:       smaller_keys_index-after:                         ; preds = %[[VAL_28:.*]], %[[VAL_18]]
// CHECK-PTX:     call void @llvm.nvvm.barrier0
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_29:.*]] = mul i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_30:.*]] = icmp uge i64 %[[VAL_29]], 0
// CHECK:         br i1 %[[VAL_30]], label %[[VAL_31:.*]], label %[[VAL_32:.*]]
// CHECK:       is_last_tile-after:                               ; preds = %[[VAL_33:.*]], %[[VAL_34:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier0
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_35:.*]] = mul i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_36:.*]] = icmp uge i64 %[[VAL_35]], 0
// CHECK:         br i1 %[[VAL_36]], label %[[VAL_37:.*]], label %[[VAL_38:.*]]
// CHECK:       is_last_tile-after9:                              ; preds = %[[VAL_39:.*]], %[[VAL_40:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier0
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_41:.*]] = mul i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_42:.*]] = icmp uge i64 %[[VAL_41]], 0
// CHECK:         br i1 %[[VAL_42]], label %[[VAL_43:.*]], label %[[VAL_44:.*]]
// CHECK:       is_last_tile-after24:                             ; preds = %[[VAL_45:.*]], %[[VAL_46:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier0
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_47:.*]] = shl i64 %[[VAL_15]], 1
// CHECK:         %[[VAL_48:.*]] = icmp slt i64 %[[VAL_47]], 3
// CHECK:         br i1 %[[VAL_48]], label %[[VAL_49:.*]], label %[[VAL_20]]
// CHECK:       smaller_keys_index-after38:                       ; preds = %[[VAL_50:.*]], %[[VAL_51:.*]]
// CHECK:         br label %[[VAL_19]]
// CHECK:       smaller_keys_index-true:                          ; preds = %[[VAL_18]]
// CHECK:         %[[VAL_52:.*]] = shl i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_53:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_54:.*]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_24]]
// CHECK:         %[[VAL_55:.*]] = load float, ptr %[[VAL_53]], align 4
// CHECK:         %[[VAL_56:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_52]]
// CHECK:         store float %[[VAL_55]], ptr addrspace(3) %[[VAL_56]], align 4
// CHECK:         %[[VAL_57:.*]] = add i64 %[[VAL_24]], 1
// CHECK:         %[[VAL_58:.*]] = icmp slt i64 %[[VAL_57]], 3
// CHECK:         br i1 %[[VAL_58]], label %[[VAL_59:.*]], label %[[VAL_28]]
// CHECK:       inner_smaller_keys_index-after:                   ; preds = %[[VAL_59]], %[[VAL_26]]
// CHECK:         br label %[[VAL_27]]
// CHECK:       inner_smaller_keys_index-true:                    ; preds = %[[VAL_26]]
// CHECK:         %[[VAL_60:.*]] = add i64 %[[VAL_52]], 1
// CHECK:         %[[VAL_61:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_54]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_57]]
// CHECK:         %[[VAL_62:.*]] = load float, ptr %[[VAL_61]], align 4
// CHECK:         %[[VAL_63:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_60]]
// CHECK:         store float %[[VAL_62]], ptr addrspace(3) %[[VAL_63]], align 4
// CHECK:         br label %[[VAL_28]]
// CHECK:       is_last_tile-true:                                ; preds = %[[VAL_27]]
// CHECK:         %[[VAL_64:.*]] = mul i64 %[[VAL_23]], 2
// CHECK:         %[[VAL_65:.*]] = xor i64 %[[VAL_64]], 1
// CHECK:         %[[VAL_66:.*]] = icmp slt i64 %[[VAL_64]], %[[VAL_65]]
// CHECK:         %[[VAL_67:.*]] = icmp slt i64 %[[VAL_65]], 3
// CHECK:         %[[VAL_68:.*]] = and i1 %[[VAL_66]], %[[VAL_67]]
// CHECK:         br i1 %[[VAL_68]], label %[[VAL_69:.*]], label %[[VAL_34]]
// CHECK:       smaller_comparison_index-after:                   ; preds = %[[VAL_70:.*]], %[[VAL_31]]
// CHECK:         br label %[[VAL_71:.*]]
// CHECK:       is_last_tile-false:                               ; preds = %[[VAL_27]]
// CHECK:         %[[VAL_72:.*]] = mul i64 %[[VAL_23]], 2
// CHECK:         %[[VAL_73:.*]] = xor i64 %[[VAL_72]], 1
// CHECK:         %[[VAL_74:.*]] = icmp slt i64 %[[VAL_72]], %[[VAL_73]]
// CHECK:         %[[VAL_75:.*]] = icmp slt i64 %[[VAL_73]], 4
// CHECK:         br i1 true, label %[[VAL_76:.*]], label %[[VAL_33]]
// CHECK:       smaller_comparison_index-after2:                  ; preds = %[[VAL_77:.*]], %[[VAL_32]]
// CHECK:         br label %[[VAL_71]]
// CHECK:       smaller_comparison_index-true:                    ; preds = %[[VAL_31]]
// CHECK:         %[[VAL_78:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_65]]
// CHECK:         %[[VAL_79:.*]] = addrspacecast ptr addrspace(3) %[[VAL_78]] to ptr
// CHECK:         %[[VAL_80:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_64]]
// CHECK:         %[[VAL_81:.*]] = addrspacecast ptr addrspace(3) %[[VAL_80]] to ptr
// CHECK-GCN:     %[[VAL_5_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_5]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_79]], ptr %[[VAL_81]], ptr %[[VAL_5_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_79]], ptr %[[VAL_81]], ptr %[[VAL_5]])
// CHECK-PTX:     %[[VAL_82:.*]] = load i8, ptr %[[VAL_5]], align 1
// CHECK-GCN:     %[[VAL_82:.*]] = load i8, ptr addrspace(5) %[[VAL_5]], align 1
// CHECK:         %[[VAL_83:.*]] = icmp ne i8 %[[VAL_82]], 0
// CHECK:         br i1 %[[VAL_83]], label %[[VAL_84:.*]], label %[[VAL_70]]
// CHECK:       is_smaller_than-after:                            ; preds = %[[VAL_84]], %[[VAL_69]]
// CHECK:         br label %[[VAL_34]]
// CHECK:       is_smaller_than-true:                             ; preds = %[[VAL_69]]
// CHECK:         %[[VAL_85:.*]] = load float, ptr %[[VAL_79]], align 4
// CHECK:         %[[VAL_86:.*]] = load float, ptr %[[VAL_81]], align 4
// CHECK:         %[[VAL_87:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_64]]
// CHECK:         store float %[[VAL_85]], ptr addrspace(3) %[[VAL_87]], align 4
// CHECK:         %[[VAL_88:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_65]]
// CHECK:         store float %[[VAL_86]], ptr addrspace(3) %[[VAL_88]], align 4
// CHECK:         br label %[[VAL_70]]
// CHECK:       smaller_comparison_index-true1:                   ; preds = %[[VAL_32]]
// CHECK:         %[[VAL_89:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_73]]
// CHECK:         %[[VAL_90:.*]] = addrspacecast ptr addrspace(3) %[[VAL_89]] to ptr
// CHECK:         %[[VAL_91:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_72]]
// CHECK:         %[[VAL_92:.*]] = addrspacecast ptr addrspace(3) %[[VAL_91]] to ptr
// CHECK-GCN:     %[[VAL_4_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_4]] to ptr
// CHECK-GCN:     call void @[[REGION]](ptr %[[VAL_90]], ptr %[[VAL_92]], ptr %[[VAL_4_2]])
// CHECK-PTX:     call void @[[REGION]](ptr %[[VAL_90]], ptr %[[VAL_92]], ptr %[[VAL_4]])
// CHECK-PTX:     %[[VAL_93:.*]] = load i8, ptr %[[VAL_4]], align 1
// CHECK-GCN:     %[[VAL_93:.*]] = load i8, ptr addrspace(5) %[[VAL_4]], align 1
// CHECK:         %[[VAL_94:.*]] = icmp ne i8 %[[VAL_93]], 0
// CHECK:         br i1 %[[VAL_94]], label %[[VAL_95:.*]], label %[[VAL_77]]
// CHECK:       is_smaller_than-after6:                           ; preds = %[[VAL_95]], %[[VAL_76]]
// CHECK:         br label %[[VAL_33]]
// CHECK:       is_smaller_than-true5:                            ; preds = %[[VAL_76]]
// CHECK:         %[[VAL_96:.*]] = load float, ptr %[[VAL_90]], align 4
// CHECK:         %[[VAL_97:.*]] = load float, ptr %[[VAL_92]], align 4
// CHECK:         %[[VAL_98:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_72]]
// CHECK:         store float %[[VAL_96]], ptr addrspace(3) %[[VAL_98]], align 4
// CHECK:         %[[VAL_99:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_73]]
// CHECK:         store float %[[VAL_97]], ptr addrspace(3) %[[VAL_99]], align 4
// CHECK:         br label %[[VAL_77]]
// CHECK:       is_last_tile-true7:                               ; preds = %[[VAL_71]]
// CHECK:         %[[VAL_100:.*]] = xor i64 %[[VAL_23]], 3
// CHECK:         %[[VAL_101:.*]] = icmp slt i64 %[[VAL_23]], %[[VAL_100]]
// CHECK:         %[[VAL_102:.*]] = icmp slt i64 %[[VAL_100]], 3
// CHECK:         %[[VAL_103:.*]] = and i1 %[[VAL_101]], %[[VAL_102]]
// CHECK:         br i1 %[[VAL_103]], label %[[VAL_104:.*]], label %[[VAL_40]]
// CHECK:       smaller_comparison_index-after11:                 ; preds = %[[VAL_105:.*]], %[[VAL_37]]
// CHECK:         br label %[[VAL_106:.*]]
// CHECK:       is_last_tile-false8:                              ; preds = %[[VAL_71]]
// CHECK:         %[[VAL_107:.*]] = xor i64 %[[VAL_23]], 3
// CHECK:         %[[VAL_108:.*]] = icmp slt i64 %[[VAL_23]], %[[VAL_107]]
// CHECK:         %[[VAL_109:.*]] = icmp slt i64 %[[VAL_107]], 4
// CHECK:         br i1 true, label %[[VAL_110:.*]], label %[[VAL_39]]
// CHECK:       smaller_comparison_index-after17:                 ; preds = %[[VAL_111:.*]], %[[VAL_38]]
// CHECK:         br label %[[VAL_106]]
// CHECK:       smaller_comparison_index-true10:                  ; preds = %[[VAL_37]]
// CHECK:         %[[VAL_112:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_100]]
// CHECK:         %[[VAL_113:.*]] = addrspacecast ptr addrspace(3) %[[VAL_112]] to ptr
// CHECK:         %[[VAL_114:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_23]]
// CHECK:         %[[VAL_115:.*]] = addrspacecast ptr addrspace(3) %[[VAL_114]] to ptr
// CHECK-GCN:     %[[VAL_3_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_3]] to ptr
// CHECK-GCN:     call void @[[REGION]](ptr %[[VAL_113]], ptr %[[VAL_115]], ptr %[[VAL_3_2]])
// CHECK-PTX:     call void @[[REGION]](ptr %[[VAL_113]], ptr %[[VAL_115]], ptr %[[VAL_3]])
// CHECK-PTX:     %[[VAL_116:.*]] = load i8, ptr %[[VAL_3]], align 1
// CHECK-GCN:     %[[VAL_116:.*]] = load i8, ptr addrspace(5) %[[VAL_3]], align 1
// CHECK:         %[[VAL_117:.*]] = icmp ne i8 %[[VAL_116]], 0
// CHECK:         br i1 %[[VAL_117]], label %[[VAL_118:.*]], label %[[VAL_105]]
// CHECK:       is_smaller_than-after15:                          ; preds = %[[VAL_118]], %[[VAL_104]]
// CHECK:         br label %[[VAL_40]]
// CHECK:       is_smaller_than-true14:                           ; preds = %[[VAL_104]]
// CHECK:         %[[VAL_119:.*]] = load float, ptr %[[VAL_113]], align 4
// CHECK:         %[[VAL_120:.*]] = load float, ptr %[[VAL_115]], align 4
// CHECK:         %[[VAL_121:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_23]]
// CHECK:         store float %[[VAL_119]], ptr addrspace(3) %[[VAL_121]], align 4
// CHECK:         %[[VAL_122:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_100]]
// CHECK:         store float %[[VAL_120]], ptr addrspace(3) %[[VAL_122]], align 4
// CHECK:         br label %[[VAL_105]]
// CHECK:       smaller_comparison_index-true16:                  ; preds = %[[VAL_38]]
// CHECK:         %[[VAL_123:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_107]]
// CHECK:         %[[VAL_124:.*]] = addrspacecast ptr addrspace(3) %[[VAL_123]] to ptr
// CHECK:         %[[VAL_125:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_23]]
// CHECK:         %[[VAL_126:.*]] = addrspacecast ptr addrspace(3) %[[VAL_125]] to ptr
// CHECK-GCN:     %[[VAL_2_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_2]] to ptr
// CHECK-GCN:     call void @[[REGION]](ptr %[[VAL_124]], ptr %[[VAL_126]], ptr %[[VAL_2_2]])
// CHECK-PTX:     call void @[[REGION]](ptr %[[VAL_124]], ptr %[[VAL_126]], ptr %[[VAL_2]])
// CHECK-PTX:     %[[VAL_127:.*]] = load i8, ptr %[[VAL_2]], align 1
// CHECK-GCN:     %[[VAL_127:.*]] = load i8, ptr addrspace(5) %[[VAL_2]], align 1
// CHECK:         %[[VAL_128:.*]] = icmp ne i8 %[[VAL_127]], 0
// CHECK:         br i1 %[[VAL_128]], label %[[VAL_129:.*]], label %[[VAL_111]]
// CHECK:       is_smaller_than-after21:                          ; preds = %[[VAL_129]], %[[VAL_110]]
// CHECK:         br label %[[VAL_39]]
// CHECK:       is_smaller_than-true20:                           ; preds = %[[VAL_110]]
// CHECK:         %[[VAL_130:.*]] = load float, ptr %[[VAL_124]], align 4
// CHECK:         %[[VAL_131:.*]] = load float, ptr %[[VAL_126]], align 4
// CHECK:         %[[VAL_132:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_23]]
// CHECK:         store float %[[VAL_130]], ptr addrspace(3) %[[VAL_132]], align 4
// CHECK:         %[[VAL_133:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_107]]
// CHECK:         store float %[[VAL_131]], ptr addrspace(3) %[[VAL_133]], align 4
// CHECK:         br label %[[VAL_111]]
// CHECK:       is_last_tile-true22:                              ; preds = %[[VAL_106]]
// CHECK:         %[[VAL_134:.*]] = mul i64 %[[VAL_23]], 2
// CHECK:         %[[VAL_135:.*]] = xor i64 %[[VAL_134]], 1
// CHECK:         %[[VAL_136:.*]] = icmp slt i64 %[[VAL_134]], %[[VAL_135]]
// CHECK:         %[[VAL_137:.*]] = icmp slt i64 %[[VAL_135]], 3
// CHECK:         %[[VAL_138:.*]] = and i1 %[[VAL_136]], %[[VAL_137]]
// CHECK:         br i1 %[[VAL_138]], label %[[VAL_139:.*]], label %[[VAL_46]]
// CHECK:       smaller_comparison_index-after26:                 ; preds = %[[VAL_140:.*]], %[[VAL_43]]
// CHECK:         br label %[[VAL_51]]
// CHECK:       is_last_tile-false23:                             ; preds = %[[VAL_106]]
// CHECK:         %[[VAL_141:.*]] = mul i64 %[[VAL_23]], 2
// CHECK:         %[[VAL_142:.*]] = xor i64 %[[VAL_141]], 1
// CHECK:         %[[VAL_143:.*]] = icmp slt i64 %[[VAL_141]], %[[VAL_142]]
// CHECK:         %[[VAL_144:.*]] = icmp slt i64 %[[VAL_142]], 4
// CHECK:         br i1 true, label %[[VAL_145:.*]], label %[[VAL_45]]
// CHECK:       smaller_comparison_index-after32:                 ; preds = %[[VAL_146:.*]], %[[VAL_44]]
// CHECK:         br label %[[VAL_51]]
// CHECK:       smaller_comparison_index-true25:                  ; preds = %[[VAL_43]]
// CHECK:         %[[VAL_147:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_135]]
// CHECK:         %[[VAL_148:.*]] = addrspacecast ptr addrspace(3) %[[VAL_147]] to ptr
// CHECK:         %[[VAL_149:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_134]]
// CHECK:         %[[VAL_150:.*]] = addrspacecast ptr addrspace(3) %[[VAL_149]] to ptr
// CHECK-GCN:     %[[VAL_1_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_1]] to ptr
// CHECK-GCN:     call void @[[REGION]](ptr %[[VAL_148]], ptr %[[VAL_150]], ptr %[[VAL_1_2]])
// CHECK-PTX:     call void @[[REGION]](ptr %[[VAL_148]], ptr %[[VAL_150]], ptr %[[VAL_1]])
// CHECK-PTX:     %[[VAL_151:.*]] = load i8, ptr %[[VAL_1]], align 1
// CHECK-GCN:     %[[VAL_151:.*]] = load i8, ptr addrspace(5) %[[VAL_1]], align 1
// CHECK:         %[[VAL_152:.*]] = icmp ne i8 %[[VAL_151]], 0
// CHECK:         br i1 %[[VAL_152]], label %[[VAL_153:.*]], label %[[VAL_140]]
// CHECK:       is_smaller_than-after30:                          ; preds = %[[VAL_153]], %[[VAL_139]]
// CHECK:         br label %[[VAL_46]]
// CHECK:       is_smaller_than-true29:                           ; preds = %[[VAL_139]]
// CHECK:         %[[VAL_154:.*]] = load float, ptr %[[VAL_148]], align 4
// CHECK:         %[[VAL_155:.*]] = load float, ptr %[[VAL_150]], align 4
// CHECK:         %[[VAL_156:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_134]]
// CHECK:         store float %[[VAL_154]], ptr addrspace(3) %[[VAL_156]], align 4
// CHECK:         %[[VAL_157:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_135]]
// CHECK:         store float %[[VAL_155]], ptr addrspace(3) %[[VAL_157]], align 4
// CHECK:         br label %[[VAL_140]]
// CHECK:       smaller_comparison_index-true31:                  ; preds = %[[VAL_44]]
// CHECK:         %[[VAL_158:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_142]]
// CHECK:         %[[VAL_159:.*]] = addrspacecast ptr addrspace(3) %[[VAL_158]] to ptr
// CHECK:         %[[VAL_160:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_141]]
// CHECK:         %[[VAL_161:.*]] = addrspacecast ptr addrspace(3) %[[VAL_160]] to ptr
// CHECK-GCN:     %[[VAL_0_1:.*]] = addrspacecast ptr addrspace(5) %[[VAL_0]] to ptr
// CHECK-GCN:     call void @[[REGION]](ptr %[[VAL_159]], ptr %[[VAL_161]], ptr %[[VAL_0_1]])
// CHECK-PTX:     call void @[[REGION]](ptr %[[VAL_159]], ptr %[[VAL_161]], ptr %[[VAL_0]])
// CHECK-PTX:     %[[VAL_162:.*]] = load i8, ptr %[[VAL_0]], align 1
// CHECK-GCN:     %[[VAL_162:.*]] = load i8, ptr addrspace(5) %[[VAL_0]], align 1
// CHECK:         %[[VAL_163:.*]] = icmp ne i8 %[[VAL_162]], 0
// CHECK:         br i1 %[[VAL_163]], label %[[VAL_164:.*]], label %[[VAL_146]]
// CHECK:       is_smaller_than-after36:                          ; preds = %[[VAL_164]], %[[VAL_145]]
// CHECK:         br label %[[VAL_45]]
// CHECK:       is_smaller_than-true35:                           ; preds = %[[VAL_145]]
// CHECK:         %[[VAL_165:.*]] = load float, ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_166:.*]] = load float, ptr %[[VAL_161]], align 4
// CHECK:         %[[VAL_167:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_141]]
// CHECK:         store float %[[VAL_165]], ptr addrspace(3) %[[VAL_167]], align 4
// CHECK:         %[[VAL_168:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_142]]
// CHECK:         store float %[[VAL_166]], ptr addrspace(3) %[[VAL_168]], align 4
// CHECK:         br label %[[VAL_146]]
// CHECK:       smaller_keys_index-true37:                        ; preds = %[[VAL_51]]
// CHECK:         %[[VAL_169:.*]] = shl i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_170:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_169]]
// CHECK:         %[[VAL_171:.*]] = load float, ptr addrspace(3) %[[VAL_170]], align 4
// CHECK:         %[[VAL_172:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_54]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_47]]
// CHECK:         store float %[[VAL_171]], ptr %[[VAL_172]], align 4
// CHECK:         %[[VAL_173:.*]] = add i64 %[[VAL_47]], 1
// CHECK:         %[[VAL_174:.*]] = icmp slt i64 %[[VAL_173]], 3
// CHECK:         br i1 %[[VAL_174]], label %[[VAL_175:.*]], label %[[VAL_50]]
// CHECK:       inner_smaller_keys_index-after40:                 ; preds = %[[VAL_175]], %[[VAL_49]]
// CHECK:         br label %[[VAL_20]]
// CHECK:       inner_smaller_keys_index-true39:                  ; preds = %[[VAL_49]]
// CHECK:         %[[VAL_176:.*]] = add i64 %[[VAL_169]], 1
// CHECK:         %[[VAL_177:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_176]]
// CHECK:         %[[VAL_178:.*]] = load float, ptr addrspace(3) %[[VAL_177]], align 4
// CHECK:         %[[VAL_179:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_54]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_173]]
// CHECK:         store float %[[VAL_178]], ptr %[[VAL_179]], align 4
// CHECK:         br label %[[VAL_50]]
// CHECK:       entry:
// CHECK:         %[[VAL_180:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_181:.*]] = load float, ptr %[[VAL_182:.*]], align 4
// CHECK:         %[[VAL_183:.*]] = load float, ptr %[[VAL_184:.*]], align 4
// CHECK:         %[[VAL_185:.*]] = fcmp olt float %[[VAL_181]], %[[VAL_183]]
// CHECK:         %[[VAL_186:.*]] = zext i1 %[[VAL_185]] to i8
// CHECK-PTX:     store i8 %[[VAL_186]], ptr %[[VAL_180]], align 1
// CHECK-GCN:     store i8 %[[VAL_186]], ptr addrspace(5) %[[VAL_180]], align 1
// CHECK-PTX:     %[[VAL_187:.*]] = load i8, ptr %[[VAL_180]], align 1
// CHECK-GCN:     %[[VAL_187:.*]] = load i8, ptr addrspace(5) %[[VAL_180]], align 1
// CHECK:         store i8 %[[VAL_187]], ptr %[[VAL_188:.*]], align 1
// CHECK:         ret void

ENTRY main {
  x = f32[2, 3] parameter(0)
  ROOT sort = f32[2, 3] sort(x), dimensions={1}, to_apply=compare
}

// -----

HloModule TestModule, is_scheduled=true

compare {
  p.0.lhs = s32[] parameter(0)
  p.0.rhs = s32[] parameter(1)
  p.1.lhs = f32[] parameter(2)
  p.1.rhs = f32[] parameter(3)
  ROOT lt = pred[] compare(p.1.lhs, p.1.rhs), direction=LT
}

// CHECK:       entry:
// CHECK:         %[[VAL_189:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_190:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_191:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_192:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_193:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_194:.*]] = alloca i8, align 1
// CHECK-PTX:     %[[VAL_195:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x
// CHECK-GCN:     %[[VAL_195:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_196:.*]] = zext i32 %[[VAL_195]] to i64
// CHECK-PTX:     %[[VAL_197:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_197:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_198:.*]] = zext i32 %[[VAL_197]] to i64
// CHECK:         %[[VAL_199:.*]] = mul nuw nsw i64 %[[VAL_196]], 2
// CHECK:         %[[VAL_200:.*]] = add nuw nsw i64 %[[VAL_199]], %[[VAL_198]]
// CHECK:         %[[VAL_201:.*]] = icmp ult i64 %[[VAL_200]], 4
// CHECK:         call void @llvm.assume(i1 %[[VAL_201]])
// CHECK:         %[[VAL_202:.*]] = add nuw nsw i64 %[[VAL_200]], 0
// CHECK:         %[[VAL_203:.*]] = udiv i64 %[[VAL_202]], 1
// CHECK:         %[[VAL_204:.*]] = urem i64 %[[VAL_203]], 2
// CHECK:         %[[VAL_205:.*]] = udiv i64 %[[VAL_202]], 2
// CHECK:         %[[VAL_206:.*]] = icmp ult i64 %[[VAL_200]], 4
// CHECK:         br i1 %[[VAL_206]], label %[[VAL_207:.*]], label %[[VAL_208:.*]]
// CHECK:       sort.in_bounds-after:                             ; preds = %[[VAL_209:.*]], %[[VAL_210:.*]]
// CHECK:         ret void
// CHECK:       sort.in_bounds-true:                              ; preds = %[[VAL_210]]
// CHECK-PTX:     %[[VAL_211:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_211:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_212:.*]] = sext i32 %[[VAL_211]] to i64
// CHECK:         %[[VAL_213:.*]] = shl i64 %[[VAL_204]], 1
// CHECK:         %[[VAL_214:.*]] = icmp slt i64 %[[VAL_213]], 3
// CHECK:         br i1 %[[VAL_214]], label %[[VAL_215:.*]], label %[[VAL_216:.*]]
// CHECK:       smaller_keys_index-after:                         ; preds = %[[VAL_217:.*]], %[[VAL_207]]
// CHECK:         %[[VAL_218:.*]] = shl i64 %[[VAL_204]], 1
// CHECK:         %[[VAL_219:.*]] = icmp slt i64 %[[VAL_218]], 3
// CHECK:         br i1 %[[VAL_219]], label %[[VAL_220:.*]], label %[[VAL_221:.*]]
// CHECK:       smaller_keys_index-after2:                        ; preds = %[[VAL_222:.*]], %[[VAL_216]]
// CHECK-PTX:     call void @llvm.nvvm.barrier0
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_223:.*]] = mul i64 %[[VAL_204]], 2
// CHECK:         %[[VAL_224:.*]] = icmp uge i64 %[[VAL_223]], 0
// CHECK:         br i1 %[[VAL_224]], label %[[VAL_225:.*]], label %[[VAL_226:.*]]
// CHECK:       is_last_tile-after:                               ; preds = %[[VAL_227:.*]], %[[VAL_228:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier0
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_229:.*]] = mul i64 %[[VAL_204]], 2
// CHECK:         %[[VAL_230:.*]] = icmp uge i64 %[[VAL_229]], 0
// CHECK:         br i1 %[[VAL_230]], label %[[VAL_231:.*]], label %[[VAL_232:.*]]
// CHECK:       is_last_tile-after13:                             ; preds = %[[VAL_233:.*]], %[[VAL_234:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier0
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_235:.*]] = mul i64 %[[VAL_204]], 2
// CHECK:         %[[VAL_236:.*]] = icmp uge i64 %[[VAL_235]], 0
// CHECK:         br i1 %[[VAL_236]], label %[[VAL_237:.*]], label %[[VAL_238:.*]]
// CHECK:       is_last_tile-after28:                             ; preds = %[[VAL_239:.*]], %[[VAL_240:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier0
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_241:.*]] = shl i64 %[[VAL_204]], 1
// CHECK:         %[[VAL_242:.*]] = icmp slt i64 %[[VAL_241]], 3
// CHECK:         br i1 %[[VAL_242]], label %[[VAL_243:.*]], label %[[VAL_244:.*]]
// CHECK:       smaller_keys_index-after42:                       ; preds = %[[VAL_245:.*]], %[[VAL_246:.*]]
// CHECK:         %[[VAL_247:.*]] = shl i64 %[[VAL_204]], 1
// CHECK:         %[[VAL_248:.*]] = icmp slt i64 %[[VAL_247]], 3
// CHECK:         br i1 %[[VAL_248]], label %[[VAL_249:.*]], label %[[VAL_209]]
// CHECK:       smaller_keys_index-after46:                       ; preds = %[[VAL_250:.*]], %[[VAL_244]]
// CHECK:         br label %[[VAL_208]]
// CHECK:       smaller_keys_index-true:                          ; preds = %[[VAL_207]]
// CHECK:         %[[VAL_251:.*]] = shl i64 %[[VAL_212]], 1
// CHECK:         %[[VAL_252:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_253:.*]], i64 0, i64 %[[VAL_205]], i64 %[[VAL_213]]
// CHECK:         %[[VAL_254:.*]] = load i32, ptr %[[VAL_252]], align 4
// CHECK:         %[[VAL_255:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_251]]
// CHECK:         store i32 %[[VAL_254]], ptr addrspace(3) %[[VAL_255]], align 4
// CHECK:         %[[VAL_256:.*]] = add i64 %[[VAL_213]], 1
// CHECK:         %[[VAL_257:.*]] = icmp slt i64 %[[VAL_256]], 3
// CHECK:         br i1 %[[VAL_257]], label %[[VAL_258:.*]], label %[[VAL_217]]
// CHECK:       inner_smaller_keys_index-after:                   ; preds = %[[VAL_258]], %[[VAL_215]]
// CHECK:         br label %[[VAL_216]]
// CHECK:       inner_smaller_keys_index-true:                    ; preds = %[[VAL_215]]
// CHECK:         %[[VAL_259:.*]] = add i64 %[[VAL_251]], 1
// CHECK:         %[[VAL_260:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_253]], i64 0, i64 %[[VAL_205]], i64 %[[VAL_256]]
// CHECK:         %[[VAL_261:.*]] = load i32, ptr %[[VAL_260]], align 4
// CHECK:         %[[VAL_262:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_259]]
// CHECK:         store i32 %[[VAL_261]], ptr addrspace(3) %[[VAL_262]], align 4
// CHECK:         br label %[[VAL_217]]
// CHECK:       smaller_keys_index-true1:                         ; preds = %[[VAL_216]]
// CHECK:         %[[VAL_263:.*]] = shl i64 %[[VAL_212]], 1
// CHECK:         %[[VAL_264:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_265:.*]], i64 0, i64 %[[VAL_205]], i64 %[[VAL_218]]
// CHECK:         %[[VAL_266:.*]] = load float, ptr %[[VAL_264]], align 4
// CHECK:         %[[VAL_267:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_263]]
// CHECK:         store float %[[VAL_266]], ptr addrspace(3) %[[VAL_267]], align 4
// CHECK:         %[[VAL_268:.*]] = add i64 %[[VAL_218]], 1
// CHECK:         %[[VAL_269:.*]] = icmp slt i64 %[[VAL_268]], 3
// CHECK:         br i1 %[[VAL_269]], label %[[VAL_270:.*]], label %[[VAL_222]]
// CHECK:       inner_smaller_keys_index-after4:                  ; preds = %[[VAL_270]], %[[VAL_220]]
// CHECK:         br label %[[VAL_221]]
// CHECK:       inner_smaller_keys_index-true3:                   ; preds = %[[VAL_220]]
// CHECK:         %[[VAL_271:.*]] = add i64 %[[VAL_263]], 1
// CHECK:         %[[VAL_272:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_265]], i64 0, i64 %[[VAL_205]], i64 %[[VAL_268]]
// CHECK:         %[[VAL_273:.*]] = load float, ptr %[[VAL_272]], align 4
// CHECK:         %[[VAL_274:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_271]]
// CHECK:         store float %[[VAL_273]], ptr addrspace(3) %[[VAL_274]], align 4
// CHECK:         br label %[[VAL_222]]
// CHECK:       is_last_tile-true:                                ; preds = %[[VAL_221]]
// CHECK:         %[[VAL_275:.*]] = mul i64 %[[VAL_212]], 2
// CHECK:         %[[VAL_276:.*]] = xor i64 %[[VAL_275]], 1
// CHECK:         %[[VAL_277:.*]] = icmp slt i64 %[[VAL_275]], %[[VAL_276]]
// CHECK:         %[[VAL_278:.*]] = icmp slt i64 %[[VAL_276]], 3
// CHECK:         %[[VAL_279:.*]] = and i1 %[[VAL_277]], %[[VAL_278]]
// CHECK:         br i1 %[[VAL_279]], label %[[VAL_280:.*]], label %[[VAL_228]]
// CHECK:       smaller_comparison_index-after:                   ; preds = %[[VAL_281:.*]], %[[VAL_225]]
// CHECK:         br label %[[VAL_282:.*]]
// CHECK:       is_last_tile-false:                               ; preds = %[[VAL_221]]
// CHECK:         %[[VAL_283:.*]] = mul i64 %[[VAL_212]], 2
// CHECK:         %[[VAL_284:.*]] = xor i64 %[[VAL_283]], 1
// CHECK:         %[[VAL_285:.*]] = icmp slt i64 %[[VAL_283]], %[[VAL_284]]
// CHECK:         %[[VAL_286:.*]] = icmp slt i64 %[[VAL_284]], 4
// CHECK:         br i1 true, label %[[VAL_287:.*]], label %[[VAL_227]]
// CHECK:       smaller_comparison_index-after6:                  ; preds = %[[VAL_288:.*]], %[[VAL_226]]
// CHECK:         br label %[[VAL_282]]
// CHECK:       smaller_comparison_index-true:                    ; preds = %[[VAL_225]]
// CHECK:         %[[VAL_289:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_276]]
// CHECK:         %[[VAL_290:.*]] = addrspacecast ptr addrspace(3) %[[VAL_289]] to ptr
// CHECK:         %[[VAL_291:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_275]]
// CHECK:         %[[VAL_292:.*]] = addrspacecast ptr addrspace(3) %[[VAL_291]] to ptr
// CHECK:         %[[VAL_293:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_276]]
// CHECK:         %[[VAL_294:.*]] = addrspacecast ptr addrspace(3) %[[VAL_293]] to ptr
// CHECK:         %[[VAL_295:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_275]]
// CHECK:         %[[VAL_296:.*]] = addrspacecast ptr addrspace(3) %[[VAL_295]] to ptr
// CHECK-GCN:     %[[VAL_194_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_194]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_290]], ptr %[[VAL_292]], ptr %[[VAL_294]], ptr %[[VAL_296]], ptr %[[VAL_194]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_290]], ptr %[[VAL_292]], ptr %[[VAL_294]], ptr %[[VAL_296]], ptr %[[VAL_194_2]])
// CHECK-PTX:     %[[VAL_297:.*]] = load i8, ptr %[[VAL_194]], align 1
// CHECK-GCN:     %[[VAL_297:.*]] = load i8, ptr addrspace(5) %[[VAL_194]], align 1
// CHECK:         %[[VAL_298:.*]] = icmp ne i8 %[[VAL_297]], 0
// CHECK:         br i1 %[[VAL_298]], label %[[VAL_299:.*]], label %[[VAL_281]]
// CHECK:       is_smaller_than-after:                            ; preds = %[[VAL_299]], %[[VAL_280]]
// CHECK:         br label %[[VAL_228]]
// CHECK:       is_smaller_than-true:                             ; preds = %[[VAL_280]]
// CHECK:         %[[VAL_300:.*]] = load i32, ptr %[[VAL_290]], align 4
// CHECK:         %[[VAL_301:.*]] = load i32, ptr %[[VAL_292]], align 4
// CHECK:         %[[VAL_302:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_275]]
// CHECK:         store i32 %[[VAL_300]], ptr addrspace(3) %[[VAL_302]], align 4
// CHECK:         %[[VAL_303:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_276]]
// CHECK:         store i32 %[[VAL_301]], ptr addrspace(3) %[[VAL_303]], align 4
// CHECK:         %[[VAL_304:.*]] = load float, ptr %[[VAL_294]], align 4
// CHECK:         %[[VAL_305:.*]] = load float, ptr %[[VAL_296]], align 4
// CHECK:         %[[VAL_306:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_275]]
// CHECK:         store float %[[VAL_304]], ptr addrspace(3) %[[VAL_306]], align 4
// CHECK:         %[[VAL_307:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_276]]
// CHECK:         store float %[[VAL_305]], ptr addrspace(3) %[[VAL_307]], align 4
// CHECK:         br label %[[VAL_281]]
// CHECK:       smaller_comparison_index-true5:                   ; preds = %[[VAL_226]]
// CHECK:         %[[VAL_308:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_284]]
// CHECK:         %[[VAL_309:.*]] = addrspacecast ptr addrspace(3) %[[VAL_308]] to ptr
// CHECK:         %[[VAL_310:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_283]]
// CHECK:         %[[VAL_311:.*]] = addrspacecast ptr addrspace(3) %[[VAL_310]] to ptr
// CHECK:         %[[VAL_312:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_284]]
// CHECK:         %[[VAL_313:.*]] = addrspacecast ptr addrspace(3) %[[VAL_312]] to ptr
// CHECK:         %[[VAL_314:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_283]]
// CHECK:         %[[VAL_315:.*]] = addrspacecast ptr addrspace(3) %[[VAL_314]] to ptr
// CHECK-GCN:     %[[VAL_193_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_193]] to ptr
// CHECK-PTX:     call void @[[REGION2]](ptr %[[VAL_309]], ptr %[[VAL_311]], ptr %[[VAL_313]], ptr %[[VAL_315]], ptr %[[VAL_193]])
// CHECK-GCN:     call void @[[REGION2]](ptr %[[VAL_309]], ptr %[[VAL_311]], ptr %[[VAL_313]], ptr %[[VAL_315]], ptr %[[VAL_193_2]])
// CHECK-PTX:     %[[VAL_316:.*]] = load i8, ptr %[[VAL_193]], align 1
// CHECK-GCN:     %[[VAL_316:.*]] = load i8, ptr addrspace(5) %[[VAL_193]], align 1
// CHECK:         %[[VAL_317:.*]] = icmp ne i8 %[[VAL_316]], 0
// CHECK:         br i1 %[[VAL_317]], label %[[VAL_318:.*]], label %[[VAL_288]]
// CHECK:       is_smaller_than-after10:                          ; preds = %[[VAL_318]], %[[VAL_287]]
// CHECK:         br label %[[VAL_227]]
// CHECK:       is_smaller_than-true9:                            ; preds = %[[VAL_287]]
// CHECK:         %[[VAL_319:.*]] = load i32, ptr %[[VAL_309]], align 4
// CHECK:         %[[VAL_320:.*]] = load i32, ptr %[[VAL_311]], align 4
// CHECK:         %[[VAL_321:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_283]]
// CHECK:         store i32 %[[VAL_319]], ptr addrspace(3) %[[VAL_321]], align 4
// CHECK:         %[[VAL_322:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_284]]
// CHECK:         store i32 %[[VAL_320]], ptr addrspace(3) %[[VAL_322]], align 4
// CHECK:         %[[VAL_323:.*]] = load float, ptr %[[VAL_313]], align 4
// CHECK:         %[[VAL_324:.*]] = load float, ptr %[[VAL_315]], align 4
// CHECK:         %[[VAL_325:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_283]]
// CHECK:         store float %[[VAL_323]], ptr addrspace(3) %[[VAL_325]], align 4
// CHECK:         %[[VAL_326:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_284]]
// CHECK:         store float %[[VAL_324]], ptr addrspace(3) %[[VAL_326]], align 4
// CHECK:         br label %[[VAL_288]]
// CHECK:       is_last_tile-true11:                              ; preds = %[[VAL_282]]
// CHECK:         %[[VAL_327:.*]] = xor i64 %[[VAL_212]], 3
// CHECK:         %[[VAL_328:.*]] = icmp slt i64 %[[VAL_212]], %[[VAL_327]]
// CHECK:         %[[VAL_329:.*]] = icmp slt i64 %[[VAL_327]], 3
// CHECK:         %[[VAL_330:.*]] = and i1 %[[VAL_328]], %[[VAL_329]]
// CHECK:         br i1 %[[VAL_330]], label %[[VAL_331:.*]], label %[[VAL_234]]
// CHECK:       smaller_comparison_index-after15:                 ; preds = %[[VAL_332:.*]], %[[VAL_231]]
// CHECK:         br label %[[VAL_333:.*]]
// CHECK:       is_last_tile-false12:                             ; preds = %[[VAL_282]]
// CHECK:         %[[VAL_334:.*]] = xor i64 %[[VAL_212]], 3
// CHECK:         %[[VAL_335:.*]] = icmp slt i64 %[[VAL_212]], %[[VAL_334]]
// CHECK:         %[[VAL_336:.*]] = icmp slt i64 %[[VAL_334]], 4
// CHECK:         br i1 true, label %[[VAL_337:.*]], label %[[VAL_233]]
// CHECK:       smaller_comparison_index-after21:                 ; preds = %[[VAL_338:.*]], %[[VAL_232]]
// CHECK:         br label %[[VAL_333]]
// CHECK:       smaller_comparison_index-true14:                  ; preds = %[[VAL_231]]
// CHECK:         %[[VAL_339:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_327]]
// CHECK:         %[[VAL_340:.*]] = addrspacecast ptr addrspace(3) %[[VAL_339]] to ptr
// CHECK:         %[[VAL_341:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_212]]
// CHECK:         %[[VAL_342:.*]] = addrspacecast ptr addrspace(3) %[[VAL_341]] to ptr
// CHECK:         %[[VAL_343:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_327]]
// CHECK:         %[[VAL_344:.*]] = addrspacecast ptr addrspace(3) %[[VAL_343]] to ptr
// CHECK:         %[[VAL_345:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_212]]
// CHECK:         %[[VAL_346:.*]] = addrspacecast ptr addrspace(3) %[[VAL_345]] to ptr
// CHECK-GCN:     %[[VAL_192_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_192]] to ptr
// CHECK-PTX:     call void @[[REGION2]](ptr %[[VAL_340]], ptr %[[VAL_342]], ptr %[[VAL_344]], ptr %[[VAL_346]], ptr %[[VAL_192]])
// CHECK-GCN:     call void @[[REGION2]](ptr %[[VAL_340]], ptr %[[VAL_342]], ptr %[[VAL_344]], ptr %[[VAL_346]], ptr %[[VAL_192_2]])
// CHECK-PTX:     %[[VAL_347:.*]] = load i8, ptr %[[VAL_192]], align 1
// CHECK-GCN:     %[[VAL_347:.*]] = load i8, ptr addrspace(5) %[[VAL_192]], align 1
// CHECK:         %[[VAL_348:.*]] = icmp ne i8 %[[VAL_347]], 0
// CHECK:         br i1 %[[VAL_348]], label %[[VAL_349:.*]], label %[[VAL_332]]
// CHECK:       is_smaller_than-after19:                          ; preds = %[[VAL_349]], %[[VAL_331]]
// CHECK:         br label %[[VAL_234]]
// CHECK:       is_smaller_than-true18:                           ; preds = %[[VAL_331]]
// CHECK:         %[[VAL_350:.*]] = load i32, ptr %[[VAL_340]], align 4
// CHECK:         %[[VAL_351:.*]] = load i32, ptr %[[VAL_342]], align 4
// CHECK:         %[[VAL_352:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_212]]
// CHECK:         store i32 %[[VAL_350]], ptr addrspace(3) %[[VAL_352]], align 4
// CHECK:         %[[VAL_353:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_327]]
// CHECK:         store i32 %[[VAL_351]], ptr addrspace(3) %[[VAL_353]], align 4
// CHECK:         %[[VAL_354:.*]] = load float, ptr %[[VAL_344]], align 4
// CHECK:         %[[VAL_355:.*]] = load float, ptr %[[VAL_346]], align 4
// CHECK:         %[[VAL_356:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_212]]
// CHECK:         store float %[[VAL_354]], ptr addrspace(3) %[[VAL_356]], align 4
// CHECK:         %[[VAL_357:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_327]]
// CHECK:         store float %[[VAL_355]], ptr addrspace(3) %[[VAL_357]], align 4
// CHECK:         br label %[[VAL_332]]
// CHECK:       smaller_comparison_index-true20:                  ; preds = %[[VAL_232]]
// CHECK:         %[[VAL_358:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_334]]
// CHECK:         %[[VAL_359:.*]] = addrspacecast ptr addrspace(3) %[[VAL_358]] to ptr
// CHECK:         %[[VAL_360:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_212]]
// CHECK:         %[[VAL_361:.*]] = addrspacecast ptr addrspace(3) %[[VAL_360]] to ptr
// CHECK:         %[[VAL_362:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_334]]
// CHECK:         %[[VAL_363:.*]] = addrspacecast ptr addrspace(3) %[[VAL_362]] to ptr
// CHECK:         %[[VAL_364:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_212]]
// CHECK:         %[[VAL_365:.*]] = addrspacecast ptr addrspace(3) %[[VAL_364]] to ptr
// CHECK-GCN:     %[[VAL_191_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_191]] to ptr
// CHECK-PTX:     call void @[[REGION2]](ptr %[[VAL_359]], ptr %[[VAL_361]], ptr %[[VAL_363]], ptr %[[VAL_365]], ptr %[[VAL_191]])
// CHECK-GCN:     call void @[[REGION2]](ptr %[[VAL_359]], ptr %[[VAL_361]], ptr %[[VAL_363]], ptr %[[VAL_365]], ptr %[[VAL_191_2]])
// CHECK-PTX:     %[[VAL_366:.*]] = load i8, ptr %[[VAL_191]], align 1
// CHECK-GCN:     %[[VAL_366:.*]] = load i8, ptr addrspace(5) %[[VAL_191]], align 1
// CHECK:         %[[VAL_367:.*]] = icmp ne i8 %[[VAL_366]], 0
// CHECK:         br i1 %[[VAL_367]], label %[[VAL_368:.*]], label %[[VAL_338]]
// CHECK:       is_smaller_than-after25:                          ; preds = %[[VAL_368]], %[[VAL_337]]
// CHECK:         br label %[[VAL_233]]
// CHECK:       is_smaller_than-true24:                           ; preds = %[[VAL_337]]
// CHECK:         %[[VAL_369:.*]] = load i32, ptr %[[VAL_359]], align 4
// CHECK:         %[[VAL_370:.*]] = load i32, ptr %[[VAL_361]], align 4
// CHECK:         %[[VAL_371:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_212]]
// CHECK:         store i32 %[[VAL_369]], ptr addrspace(3) %[[VAL_371]], align 4
// CHECK:         %[[VAL_372:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_334]]
// CHECK:         store i32 %[[VAL_370]], ptr addrspace(3) %[[VAL_372]], align 4
// CHECK:         %[[VAL_373:.*]] = load float, ptr %[[VAL_363]], align 4
// CHECK:         %[[VAL_374:.*]] = load float, ptr %[[VAL_365]], align 4
// CHECK:         %[[VAL_375:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_212]]
// CHECK:         store float %[[VAL_373]], ptr addrspace(3) %[[VAL_375]], align 4
// CHECK:         %[[VAL_376:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_334]]
// CHECK:         store float %[[VAL_374]], ptr addrspace(3) %[[VAL_376]], align 4
// CHECK:         br label %[[VAL_338]]
// CHECK:       is_last_tile-true26:                              ; preds = %[[VAL_333]]
// CHECK:         %[[VAL_377:.*]] = mul i64 %[[VAL_212]], 2
// CHECK:         %[[VAL_378:.*]] = xor i64 %[[VAL_377]], 1
// CHECK:         %[[VAL_379:.*]] = icmp slt i64 %[[VAL_377]], %[[VAL_378]]
// CHECK:         %[[VAL_380:.*]] = icmp slt i64 %[[VAL_378]], 3
// CHECK:         %[[VAL_381:.*]] = and i1 %[[VAL_379]], %[[VAL_380]]
// CHECK:         br i1 %[[VAL_381]], label %[[VAL_382:.*]], label %[[VAL_240]]
// CHECK:       smaller_comparison_index-after30:                 ; preds = %[[VAL_383:.*]], %[[VAL_237]]
// CHECK:         br label %[[VAL_246]]
// CHECK:       is_last_tile-false27:                             ; preds = %[[VAL_333]]
// CHECK:         %[[VAL_384:.*]] = mul i64 %[[VAL_212]], 2
// CHECK:         %[[VAL_385:.*]] = xor i64 %[[VAL_384]], 1
// CHECK:         %[[VAL_386:.*]] = icmp slt i64 %[[VAL_384]], %[[VAL_385]]
// CHECK:         %[[VAL_387:.*]] = icmp slt i64 %[[VAL_385]], 4
// CHECK:         br i1 true, label %[[VAL_388:.*]], label %[[VAL_239]]
// CHECK:       smaller_comparison_index-after36:                 ; preds = %[[VAL_389:.*]], %[[VAL_238]]
// CHECK:         br label %[[VAL_246]]
// CHECK:       smaller_comparison_index-true29:                  ; preds = %[[VAL_237]]
// CHECK:         %[[VAL_390:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_378]]
// CHECK:         %[[VAL_391:.*]] = addrspacecast ptr addrspace(3) %[[VAL_390]] to ptr
// CHECK:         %[[VAL_392:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_377]]
// CHECK:         %[[VAL_393:.*]] = addrspacecast ptr addrspace(3) %[[VAL_392]] to ptr
// CHECK:         %[[VAL_394:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_378]]
// CHECK:         %[[VAL_395:.*]] = addrspacecast ptr addrspace(3) %[[VAL_394]] to ptr
// CHECK:         %[[VAL_396:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_377]]
// CHECK:         %[[VAL_397:.*]] = addrspacecast ptr addrspace(3) %[[VAL_396]] to ptr
// CHECK-GCN:     %[[VAL_190_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_190]] to ptr
// CHECK-PTX:     call void @[[REGION2]](ptr %[[VAL_391]], ptr %[[VAL_393]], ptr %[[VAL_395]], ptr %[[VAL_397]], ptr %[[VAL_190]])
// CHECK-GCN:     call void @[[REGION2]](ptr %[[VAL_391]], ptr %[[VAL_393]], ptr %[[VAL_395]], ptr %[[VAL_397]], ptr %[[VAL_190_2]])
// CHECK-PTX:     %[[VAL_398:.*]] = load i8, ptr %[[VAL_190]], align 1
// CHECK-GCN:     %[[VAL_398:.*]] = load i8, ptr addrspace(5) %[[VAL_190]], align 1
// CHECK:         %[[VAL_399:.*]] = icmp ne i8 %[[VAL_398]], 0
// CHECK:         br i1 %[[VAL_399]], label %[[VAL_400:.*]], label %[[VAL_383]]
// CHECK:       is_smaller_than-after34:                          ; preds = %[[VAL_400]], %[[VAL_382]]
// CHECK:         br label %[[VAL_240]]
// CHECK:       is_smaller_than-true33:                           ; preds = %[[VAL_382]]
// CHECK:         %[[VAL_401:.*]] = load i32, ptr %[[VAL_391]], align 4
// CHECK:         %[[VAL_402:.*]] = load i32, ptr %[[VAL_393]], align 4
// CHECK:         %[[VAL_403:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_377]]
// CHECK:         store i32 %[[VAL_401]], ptr addrspace(3) %[[VAL_403]], align 4
// CHECK:         %[[VAL_404:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_378]]
// CHECK:         store i32 %[[VAL_402]], ptr addrspace(3) %[[VAL_404]], align 4
// CHECK:         %[[VAL_405:.*]] = load float, ptr %[[VAL_395]], align 4
// CHECK:         %[[VAL_406:.*]] = load float, ptr %[[VAL_397]], align 4
// CHECK:         %[[VAL_407:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_377]]
// CHECK:         store float %[[VAL_405]], ptr addrspace(3) %[[VAL_407]], align 4
// CHECK:         %[[VAL_408:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_378]]
// CHECK:         store float %[[VAL_406]], ptr addrspace(3) %[[VAL_408]], align 4
// CHECK:         br label %[[VAL_383]]
// CHECK:       smaller_comparison_index-true35:                  ; preds = %[[VAL_238]]
// CHECK:         %[[VAL_409:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_385]]
// CHECK:         %[[VAL_410:.*]] = addrspacecast ptr addrspace(3) %[[VAL_409]] to ptr
// CHECK:         %[[VAL_411:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_384]]
// CHECK:         %[[VAL_412:.*]] = addrspacecast ptr addrspace(3) %[[VAL_411]] to ptr
// CHECK:         %[[VAL_413:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_385]]
// CHECK:         %[[VAL_414:.*]] = addrspacecast ptr addrspace(3) %[[VAL_413]] to ptr
// CHECK:         %[[VAL_415:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_384]]
// CHECK:         %[[VAL_416:.*]] = addrspacecast ptr addrspace(3) %[[VAL_415]] to ptr
// CHECK-GCN:     %[[VAL_189_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_189]] to ptr
// CHECK-PTX:     call void @[[REGION2]](ptr %[[VAL_410]], ptr %[[VAL_412]], ptr %[[VAL_414]], ptr %[[VAL_416]], ptr %[[VAL_189]])
// CHECK-GCN:     call void @[[REGION2]](ptr %[[VAL_410]], ptr %[[VAL_412]], ptr %[[VAL_414]], ptr %[[VAL_416]], ptr %[[VAL_189_2]])
// CHECK-PTX:     %[[VAL_417:.*]] = load i8, ptr %[[VAL_189]], align 1
// CHECK-GCN:     %[[VAL_417:.*]] = load i8, ptr addrspace(5) %[[VAL_189]], align 1
// CHECK:         %[[VAL_418:.*]] = icmp ne i8 %[[VAL_417]], 0
// CHECK:         br i1 %[[VAL_418]], label %[[VAL_419:.*]], label %[[VAL_389]]
// CHECK:       is_smaller_than-after40:                          ; preds = %[[VAL_419]], %[[VAL_388]]
// CHECK:         br label %[[VAL_239]]
// CHECK:       is_smaller_than-true39:                           ; preds = %[[VAL_388]]
// CHECK:         %[[VAL_420:.*]] = load i32, ptr %[[VAL_410]], align 4
// CHECK:         %[[VAL_421:.*]] = load i32, ptr %[[VAL_412]], align 4
// CHECK:         %[[VAL_422:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_384]]
// CHECK:         store i32 %[[VAL_420]], ptr addrspace(3) %[[VAL_422]], align 4
// CHECK:         %[[VAL_423:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_385]]
// CHECK:         store i32 %[[VAL_421]], ptr addrspace(3) %[[VAL_423]], align 4
// CHECK:         %[[VAL_424:.*]] = load float, ptr %[[VAL_414]], align 4
// CHECK:         %[[VAL_425:.*]] = load float, ptr %[[VAL_416]], align 4
// CHECK:         %[[VAL_426:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_384]]
// CHECK:         store float %[[VAL_424]], ptr addrspace(3) %[[VAL_426]], align 4
// CHECK:         %[[VAL_427:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_385]]
// CHECK:         store float %[[VAL_425]], ptr addrspace(3) %[[VAL_427]], align 4
// CHECK:         br label %[[VAL_389]]
// CHECK:       smaller_keys_index-true41:                        ; preds = %[[VAL_246]]
// CHECK:         %[[VAL_428:.*]] = shl i64 %[[VAL_212]], 1
// CHECK:         %[[VAL_429:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_428]]
// CHECK:         %[[VAL_430:.*]] = load i32, ptr addrspace(3) %[[VAL_429]], align 4
// CHECK:         %[[VAL_431:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_253]], i64 0, i64 %[[VAL_205]], i64 %[[VAL_241]]
// CHECK:         store i32 %[[VAL_430]], ptr %[[VAL_431]], align 4
// CHECK:         %[[VAL_432:.*]] = add i64 %[[VAL_241]], 1
// CHECK:         %[[VAL_433:.*]] = icmp slt i64 %[[VAL_432]], 3
// CHECK:         br i1 %[[VAL_433]], label %[[VAL_434:.*]], label %[[VAL_245]]
// CHECK:       inner_smaller_keys_index-after44:                 ; preds = %[[VAL_434]], %[[VAL_243]]
// CHECK:         br label %[[VAL_244]]
// CHECK:       inner_smaller_keys_index-true43:                  ; preds = %[[VAL_243]]
// CHECK:         %[[VAL_435:.*]] = add i64 %[[VAL_428]], 1
// CHECK:         %[[VAL_436:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_435]]
// CHECK:         %[[VAL_437:.*]] = load i32, ptr addrspace(3) %[[VAL_436]], align 4
// CHECK:         %[[VAL_438:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_253]], i64 0, i64 %[[VAL_205]], i64 %[[VAL_432]]
// CHECK:         store i32 %[[VAL_437]], ptr %[[VAL_438]], align 4
// CHECK:         br label %[[VAL_245]]
// CHECK:       smaller_keys_index-true45:                        ; preds = %[[VAL_244]]
// CHECK:         %[[VAL_439:.*]] = shl i64 %[[VAL_212]], 1
// CHECK:         %[[VAL_440:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_439]]
// CHECK:         %[[VAL_441:.*]] = load float, ptr addrspace(3) %[[VAL_440]], align 4
// CHECK:         %[[VAL_442:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_265]], i64 0, i64 %[[VAL_205]], i64 %[[VAL_247]]
// CHECK:         store float %[[VAL_441]], ptr %[[VAL_442]], align 4
// CHECK:         %[[VAL_443:.*]] = add i64 %[[VAL_247]], 1
// CHECK:         %[[VAL_444:.*]] = icmp slt i64 %[[VAL_443]], 3
// CHECK:         br i1 %[[VAL_444]], label %[[VAL_445:.*]], label %[[VAL_250]]
// CHECK:       inner_smaller_keys_index-after48:                 ; preds = %[[VAL_445]], %[[VAL_249]]
// CHECK:         br label %[[VAL_209]]
// CHECK:       inner_smaller_keys_index-true47:                  ; preds = %[[VAL_249]]
// CHECK:         %[[VAL_446:.*]] = add i64 %[[VAL_439]], 1
// CHECK:         %[[VAL_447:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_446]]
// CHECK:         %[[VAL_448:.*]] = load float, ptr addrspace(3) %[[VAL_447]], align 4
// CHECK:         %[[VAL_449:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_265]], i64 0, i64 %[[VAL_205]], i64 %[[VAL_443]]
// CHECK:         store float %[[VAL_448]], ptr %[[VAL_449]], align 4
// CHECK:         br label %[[VAL_250]]
// CHECK:       entry:
// CHECK:         %[[VAL_450:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_451:.*]] = load float, ptr %[[VAL_452:.*]], align 4
// CHECK:         %[[VAL_453:.*]] = load float, ptr %[[VAL_454:.*]], align 4
// CHECK:         %[[VAL_455:.*]] = fcmp olt float %[[VAL_451]], %[[VAL_453]]
// CHECK:         %[[VAL_456:.*]] = zext i1 %[[VAL_455]] to i8
// CHECK-PTX:     store i8 %[[VAL_456]], ptr %[[VAL_450]], align 1
// CHECK-GCN:     store i8 %[[VAL_456]], ptr addrspace(5) %[[VAL_450]], align 1
// CHECK-PTX:     %[[VAL_457:.*]] = load i8, ptr %[[VAL_450]], align 1
// CHECK-GCN:     %[[VAL_457:.*]] = load i8, ptr addrspace(5) %[[VAL_450]], align 1
// CHECK:         store i8 %[[VAL_457]], ptr %[[VAL_458:.*]], align 1
// CHECK:         ret void

ENTRY main {
  x = s32[2, 3] parameter(0)
  y = f32[2, 3] parameter(1)
  ROOT sort = (s32[2, 3], f32[2, 3]) sort(x, y), dimensions={1}, to_apply=compare
}
