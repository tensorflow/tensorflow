/* Copyright 2022 The OpenXLA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

syntax = "proto3";

package xla.cpu;

import "xla/backends/cpu/runtime/thunk.proto";
import "xla/service/hlo.proto";
import "xla/xla.proto";

message SymbolProto {
  enum FunctionTypeId {
    UNKNOWN = 0;
    KERNEL = 1;
    COMPARATOR = 2;
  }
  FunctionTypeId function_type_id = 1;
  string name = 2;
}

message CompilationResultProto {
  enum ObjFileKind {
    UNKNOWN = 0;

    // Object file contains a single entry function that implements the XLA
    // computation. This is the mode for legacy XLA:CPU backends where we
    // compile HLO module to a single LLVM function.
    CLASSIC = 1;

    // Object file contains a set of host kernel functions that are loaded by
    // the XLA:CPU runtime and instantiated as a ThunkSequence.
    KERNELS = 2;
  }

  HloModuleProtoWithConfig hlo_module = 1;
  BufferAssignmentProto buffer_assignment = 2;
  string entry_function_name = 3;
  repeated bytes obj_files = 4;
  ObjFileKind obj_files_kind = 5;
  ThunkSequenceProto thunk_sequence = 6;
  repeated SymbolProto compiled_symbols = 7;
}
