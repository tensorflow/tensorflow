/* Copyright 2023 The OpenXLA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

syntax = "proto3";

package xla.memory_space_assignment;

// Memory space assignment options for slicing prefetches into smaller
// asynchronous copies, reducing prefetch memory allocation pressure.
//
// No prefetch slicing is performed if max_slices == 0.
//
// TODO(b/275905276): Consider adding another option that indicates that we want
// slices of a certain size, rather than just always creating max_slices.
message SlicedPrefetchOptions {
  // The maximum number of slices into which to slice a prefetch.
  uint32 max_slices = 1;

  // The minimum tensor size in bytes that we will attempt to slice.
  uint64 min_bytes = 2;

  // This option should never be set to true in production. When this is true,
  // we will crash if we propose a slice (other than the final slice) with a
  // size that is not a multiple of the required hardware alignment. Otherwise,
  // we will choose not to slice such situations, which is always safe.
  bool fail_on_non_alignment_boundary_slice_proposal = 3;

  // The threshold for max_slices after which we limit the permutations of slice
  // times that we try when placing a sliced allocation.
  uint32 all_slice_time_permutations_threshold = 4;

  // The preferred slize size for MSA sliced prefetches. 0 means there is no
  // preferred slice size, in which case, we'll try to slice into max_slices.
  uint64 preferred_slice_size = 5;
}

// Memory space assignment options for prefetching windows of data
message WindowPrefetchDetail {
  message WindowDetail {
    reserved 3;

    // Index of the operand that is window prefetched.
    int64 operand = 1;
    // Window buffer size in bytes.
    int64 size = 2;
  }

  repeated WindowDetail windows = 1;
}

// Options for memory-bound loop optimizations in memory space assignment. If
// enabled, this pass can optimize memory-bound unrolled loops to maximize the
// bandwidth utilized and minimize the execution time.
message MemoryBoundLoopOptimizerOptions {
  // Enable the memory-bound loop optimizations.
  optional bool enabled = 1;

  // The desired ratio of overlapped operations that is sufficient to overlap
  // prefetches with. If this value is 1, the algorithm will try to fully
  // overlap the prefetches with other compute, if less than 1, the algorithm
  // may schedule prefetches such that some of the prefetch is not overlapped,
  // so may become critical. For example, if this value is 0.5, we are willing
  // for the prefetch time to take up to 2X of the overlapped computation time.
  optional float desired_copy_ratio = 2;

  // If true, the algorithm allows a fully pipelined prefetch to be scheduled
  // even if the copy resources haven't reached the desired copy ratio. A fully
  // pipelined prefetch starts the same time as its counterpart in the previous
  // iteration finishes.
  optional bool allow_unsatisfied_fully_pipelined_prefetch = 3;

  // The minimum number of iterations that the loop needs to be unrolled for the
  // memory-bound loop optimizer to kick in.
  optional float min_num_iterations = 4;
}

message TupleShapeIndex {
  repeated int64 index = 1;
}

// A message to filter operands in an HLO schedule, that can be used to override
// compiler behaviour like altering schedule etc.
message HloOperandFilter {
  // Regex to match instruction name.
  optional string instruction_name_regex = 1;
  // Set if filtering operands of an instruction.
  optional int64 operand_number = 2;
  // If filtering operands based on size in bytes.
  optional int64 size_gte = 3;
  // If filtering operands based on size in bytes.
  optional int64 size_lte = 4;
  // If operand of an instruction is a tuple and indexing into the tuple is
  // required.
  optional TupleShapeIndex tuple_index = 5;
  // Regex to match the entire instruction HLO. The HLO string is constructed
  // using default HloPrintOptions. Refer to the HloPrintOptions class in
  // hlo_instruction.h to know more about the format of the HLO string used for
  // matching.
  optional string instruction_regex = 6;
}

// Options to override preferred prefetch time for an operand.
message PreferredPrefetchOverrideOptions {
  reserved "after_instruction_name",  // 2
      "before_instruction_name";      // 3
  reserved 2, 3;
  oneof options {
    // A value X in [0, 1] that tells us the preferred prefetch time is the
    // fraction X through the live range. For example, .5 will set the
    // preferred prefetch time to the middle of live range.
    float prefetch_eagerness = 1;
    // Preferred prefetch time is set to after the first instruction that
    // matches the filter.
    HloPositionMatcher after_instruction = 4;
    // Preferred prefetch time is set to before the first instruction that
    // matches the filter.
    HloPositionMatcher before_instruction = 5;
  }
}

// Filters operands in an HLO schedule and overrides preferred prefetch times
// for those operands according to an override strategy specified in
// override_options.
message PreferredPrefetchOverride {
  optional HloOperandFilter hlo_operand_filter = 1;
  optional xla.memory_space_assignment.PreferredPrefetchOverrideOptions
      override_options = 2;
}

// Encloses chained override configs. The first config has highest precedence
// and so on.
message PreferredPrefetchOverrides {
  repeated PreferredPrefetchOverride overrides = 1;
}

// A message that identifies one or more HloPositions.
message HloPositionMatcher {
  // Regex to match the entire instruction HLO. The HLO string is constructed
  // using default HloPrintOptions. Refer to the HloPrintOptions class in
  // hlo_instruction.h to know more about the format of the HLO string used for
  // matching.
  optional string instruction_regex = 1;
  // Regex to match instruction name.
  optional string instruction_name_regex = 2;
  // If output of an instruction is a tuple and indexing into the
  // tuple is required.
  optional TupleShapeIndex tuple_index = 3;
  // Filters instructions with output size in bytes greater or equal to a value.
  optional int64 size_gte = 4;
  // Filters instructions with output size in bytes less or equal to a value.
  optional int64 size_lte = 5;
  // Filters instructions that have a use that matches the filter.
  optional HloOperandFilter hlo_use_filter = 6;
}

// Options to override preferred prefetch time for an operand.
message MsaSortOrderOverrideOptions {
  oneof options {
    // Assign alternate memory to the filtered buffer before other buffers. If
    // multiple buffers are to be assigned first (within the same override
    // config) other tie breakers and stable sort order will take effect.
    bool assign_first = 1;
    // Assign alternate memory to the filtered buffer after other buffers. If
    // multiple buffers are to be assigned last (within the same override
    // config) other tie breakers and stable sort order will take effect.
    bool assign_last = 2;
  }
}

// Specifies details on how to override the sort order for matching
// HloPositions.
message MsaSortOrderOverride {
  optional HloPositionMatcher hlo_position_matcher = 1;
  optional xla.memory_space_assignment.MsaSortOrderOverrideOptions
      override_options = 2;
  optional bool apply_to_cross_program_prefetches = 3;
}

// Encloses chained override configs. The first config has highest precedence
// and so on.
message MsaSortOrderOverrides {
  repeated MsaSortOrderOverride overrides = 1;
}
