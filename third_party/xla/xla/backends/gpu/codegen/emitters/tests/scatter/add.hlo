// RUN: fusion_to_mlir %s | emitters_opt -xla-gpu-test-optimize |\
// RUN:   FileCheck %s
// RUN: test_correctness %s --bijection_inputs=scatter:2

add {
  %p0 = f32[] parameter(0)
  %p1 = f32[] parameter(1)
  ROOT %sum = f32[] add(%p0, %p1)
}
scatter {
  %operand = f32[10,5]  parameter(0)
  %indices = s32[24,1] parameter(1)
  %update = f32[24,2,3] parameter(2)

  ROOT %scatter = f32[10,5] scatter(
      f32[10,5] %operand,
      s32[24,1] %indices,
      f32[24,2,3] %update
    ),
    update_window_dims={1,2},
    inserted_window_dims={},
    scatter_dims_to_operand_dims={0},
    index_vector_dim=1,
    unique_indices=false,
    to_apply=add
}
// CHECK-LABEL: func.func @main(
// CHECK-SAME:    %[[OPERAND:[a-zA-Z0-9]*]]: tensor<10x5xf32>
// CHECK-SAME:    %[[INDICES:[a-zA-Z0-9]*]]: tensor<24x1xi32>
// CHECK-SAME:    %[[UPDATES:[a-zA-Z0-9]*]]: tensor<24x2x3xf32>
// CHECK-SAME:    %[[OUT:[a-zA-Z0-9]*]]: tensor<10x5xf32>

// CHECK: %[[IN_BOUNDS:.*]] = arith.cmpi ule
// CHECK: scf.if %[[IN_BOUNDS]] -> (tensor<10x5xf32>) {
// CHECK:   xla.loop
// CHECK:     %[[UPD_ELEM:.*]] = xla.pure_call @scatter_update
// CHECK:     %[[RMW:.*]] = xla.atomic_rmw %{{[a-z0-9]+}}
// CHECK:     ^bb0(%[[CUR_VALUE:.*]]: f32):
// CHECK:       %[[SUM:.*]] = arith.addf %[[CUR_VALUE]], %[[UPD_ELEM]]
// CHECK:       xla.yield %[[SUM]] : f32
// CHECK:     }
// CHECK:     xla.yield %[[RMW]] : tensor<10x5xf32>