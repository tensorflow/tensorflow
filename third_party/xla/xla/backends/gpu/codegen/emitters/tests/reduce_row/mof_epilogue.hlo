// RUN: fusion_to_mlir %s | emitters_opt -xla-gpu-test-optimize \
// RUN:   --inline="default-pipeline='cse'" | FileCheck %s
// RUN: test_correctness %s --bijection_inputs=reduce1:0 \
// RUN:   --bijection_inputs=reduce2:0 --bijection_outputs=reduce1 \
// RUN:   --bijection_outputs=reduce2

add {
  lhs = f32[] parameter(0)
  rhs = f32[] parameter(1)
  ROOT add = f32[] add(lhs, rhs)
}

mul {
  lhs = f32[] parameter(0)
  rhs = f32[] parameter(1)
  ROOT mul = f32[] multiply(lhs, rhs)
}

fusion {
  param_0 = f32[8,1024] parameter(0)
  c0 = f32[] constant(0)
  c1 = f32[] constant(1)
  reduce1 = f32[8] reduce(param_0, c0), dimensions={1}, to_apply=add
  reduce2 = f32[8] reduce(param_0, c1), dimensions={1}, to_apply=mul
  log = f32[8] log(reduce1)
  abs = f32[8] abs(reduce1)
  neg = f32[8] negate(reduce2)
  ROOT tuple = (f32[8], f32[8], f32[8]) tuple(log, neg, abs)
}

// CHECK-DAG: shuffle_reduce(%{{.*}}) to 16 combiner=@add_add
// CHECK-DAG: shuffle_reduce(%{{.*}}) to 16 combiner=@mul_mul
// CHECK: allocate_shared
// CHECK: allocate_shared
// CHECK: sync_threads
// CHECK-DAG: %[[SUM:.*]] = xla_gpu.shuffle_reduce(%{{.*}}) to 16 combiner=@add_add
// CHECK-DAG: %[[PROD:.*]] = xla_gpu.shuffle_reduce(%{{.*}}) to 16 combiner=@mul_mul
// CHECK-DAG: %[[LOG:.*]] = math.log %[[SUM]]
// CHECK-DAG: %[[ABS:.*]] = math.absf %[[SUM]]
// CHECK-DAG: %[[NEG:.*]] = arith.negf %[[PROD]]
// CHECK-DAG: xla.predicated_insert %[[LOG]]
// CHECK-DAG: xla.predicated_insert %[[ABS]]
// CHECK-DAG: xla.predicated_insert %[[NEG]]
