// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt %s --split-input-file --passes=rng-bit-generator-expander | FileCheck %s

// CHECK-LABEL: HloModule TestDefaultAlgorithm, entry_computation_layout={()->(u64[2]{0}, u32[])}

// CHECK:       %[[$rng_247:[^ ]+]]
// CHECK-NEXT:  %[[state_1:[^ ]+]] = u64[2]{0} parameter(0)
// CHECK-NEXT:  %[[slice_4:[^ ]+]] = u64[1]{0} slice(%[[state_1]]), slice={[1:2]}
// CHECK-NEXT:  %[[reshape_5:[^ ]+]] = u64[] reshape(%[[slice_4]])
// CHECK-NEXT:  %[[broadcast_6:[^ ]+]] = u64[1]{0} broadcast(%[[reshape_5]]), dimensions={}
// CHECK-NEXT:  %[[convert_11:[^ ]+]] = u32[1]{0} convert(%[[broadcast_6]])
// CHECK-NEXT:  %[[slice_2:[^ ]+]] = u64[1]{0} slice(%[[state_1]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_3:[^ ]+]] = u64[] reshape(%[[slice_2]])
// CHECK-NEXT:  %[[convert_16:[^ ]+]] = u32[] convert(%[[reshape_3]])
// CHECK-NEXT:  %[[bitcast_convert_19:[^ ]+]] = u32[] bitcast-convert(%[[convert_16]])
// CHECK-NEXT:  %[[broadcast_24:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_25:[^ ]+]] = u32[1]{0} add(%[[convert_11]], %[[broadcast_24]])
// CHECK-NEXT:  %[[constant_10:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_12:[^ ]+]] = u64[1]{0} broadcast(%[[constant_10]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_13:[^ ]+]] = u64[1]{0} shift-right-logical(%[[broadcast_6]], %[[broadcast_12]])
// CHECK-NEXT:  %[[convert_14:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_13]])
// CHECK-NEXT:  %[[constant_15:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_17:[^ ]+]] = u64[] shift-right-logical(%[[reshape_3]], %[[constant_15]])
// CHECK-NEXT:  %[[convert_18:[^ ]+]] = u32[] convert(%[[shift_right_logical_17]])
// CHECK-NEXT:  %[[bitcast_convert_20:[^ ]+]] = u32[] bitcast-convert(%[[convert_18]])
// CHECK-NEXT:  %[[broadcast_26:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_27:[^ ]+]] = u32[1]{0} add(%[[convert_14]], %[[broadcast_26]])
// CHECK-NEXT:  %[[add_28:[^ ]+]] = u32[1]{0} add(%[[add_25]], %[[add_27]])
// CHECK-NEXT:  %[[constant_29:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_30:[^ ]+]] = u32[1]{0} broadcast(%[[constant_29]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_31:[^ ]+]] = u32[1]{0} shift-left(%[[add_27]], %[[broadcast_30]])
// CHECK-NEXT:  %[[constant_32:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_33:[^ ]+]] = u32[1]{0} broadcast(%[[constant_32]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_34:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_27]], %[[broadcast_33]])
// CHECK-NEXT:  %[[or_35:[^ ]+]] = u32[1]{0} or(%[[shift_left_31]], %[[shift_right_logical_34]])
// CHECK-NEXT:  %[[xor_36:[^ ]+]] = u32[1]{0} xor(%[[add_28]], %[[or_35]])
// CHECK-NEXT:  %[[add_37:[^ ]+]] = u32[1]{0} add(%[[add_28]], %[[xor_36]])
// CHECK-NEXT:  %[[constant_38:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_39:[^ ]+]] = u32[1]{0} broadcast(%[[constant_38]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_40:[^ ]+]] = u32[1]{0} shift-left(%[[xor_36]], %[[broadcast_39]])
// CHECK-NEXT:  %[[constant_41:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_42:[^ ]+]] = u32[1]{0} broadcast(%[[constant_41]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_43:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_36]], %[[broadcast_42]])
// CHECK-NEXT:  %[[or_44:[^ ]+]] = u32[1]{0} or(%[[shift_left_40]], %[[shift_right_logical_43]])
// CHECK-NEXT:  %[[xor_45:[^ ]+]] = u32[1]{0} xor(%[[add_37]], %[[or_44]])
// CHECK-NEXT:  %[[add_46:[^ ]+]] = u32[1]{0} add(%[[add_37]], %[[xor_45]])
// CHECK-NEXT:  %[[constant_47:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_48:[^ ]+]] = u32[1]{0} broadcast(%[[constant_47]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_49:[^ ]+]] = u32[1]{0} shift-left(%[[xor_45]], %[[broadcast_48]])
// CHECK-NEXT:  %[[constant_50:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_51:[^ ]+]] = u32[1]{0} broadcast(%[[constant_50]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_52:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_45]], %[[broadcast_51]])
// CHECK-NEXT:  %[[or_53:[^ ]+]] = u32[1]{0} or(%[[shift_left_49]], %[[shift_right_logical_52]])
// CHECK-NEXT:  %[[xor_54:[^ ]+]] = u32[1]{0} xor(%[[add_46]], %[[or_53]])
// CHECK-NEXT:  %[[add_55:[^ ]+]] = u32[1]{0} add(%[[add_46]], %[[xor_54]])
// CHECK-NEXT:  %[[broadcast_64:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_65:[^ ]+]] = u32[1]{0} add(%[[add_55]], %[[broadcast_64]])
// CHECK-NEXT:  %[[constant_56:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_57:[^ ]+]] = u32[1]{0} broadcast(%[[constant_56]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_58:[^ ]+]] = u32[1]{0} shift-left(%[[xor_54]], %[[broadcast_57]])
// CHECK-NEXT:  %[[constant_59:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_60:[^ ]+]] = u32[1]{0} broadcast(%[[constant_59]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_61:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_54]], %[[broadcast_60]])
// CHECK-NEXT:  %[[or_62:[^ ]+]] = u32[1]{0} or(%[[shift_left_58]], %[[shift_right_logical_61]])
// CHECK-NEXT:  %[[xor_63:[^ ]+]] = u32[1]{0} xor(%[[add_55]], %[[or_62]])
// CHECK-NEXT:  %[[constant_21:[^ ]+]] = u32[] constant(466688986)
// CHECK-NEXT:  %[[xor_22:[^ ]+]] = u32[] xor(%[[constant_21]], %[[bitcast_convert_19]])
// CHECK-NEXT:  %[[xor_23:[^ ]+]] = u32[] xor(%[[xor_22]], %[[bitcast_convert_20]])
// CHECK-NEXT:  %[[broadcast_66:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_67:[^ ]+]] = u32[1]{0} add(%[[xor_63]], %[[broadcast_66]])
// CHECK-NEXT:  %[[constant_68:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[broadcast_69:[^ ]+]] = u32[1]{0} broadcast(%[[constant_68]]), dimensions={}
// CHECK-NEXT:  %[[add_70:[^ ]+]] = u32[1]{0} add(%[[add_67]], %[[broadcast_69]])
// CHECK-NEXT:  %[[add_71:[^ ]+]] = u32[1]{0} add(%[[add_65]], %[[add_70]])
// CHECK-NEXT:  %[[constant_72:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_73:[^ ]+]] = u32[1]{0} broadcast(%[[constant_72]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_74:[^ ]+]] = u32[1]{0} shift-left(%[[add_70]], %[[broadcast_73]])
// CHECK-NEXT:  %[[constant_75:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_76:[^ ]+]] = u32[1]{0} broadcast(%[[constant_75]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_77:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_70]], %[[broadcast_76]])
// CHECK-NEXT:  %[[or_78:[^ ]+]] = u32[1]{0} or(%[[shift_left_74]], %[[shift_right_logical_77]])
// CHECK-NEXT:  %[[xor_79:[^ ]+]] = u32[1]{0} xor(%[[add_71]], %[[or_78]])
// CHECK-NEXT:  %[[add_80:[^ ]+]] = u32[1]{0} add(%[[add_71]], %[[xor_79]])
// CHECK-NEXT:  %[[constant_81:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[broadcast_82:[^ ]+]] = u32[1]{0} broadcast(%[[constant_81]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_83:[^ ]+]] = u32[1]{0} shift-left(%[[xor_79]], %[[broadcast_82]])
// CHECK-NEXT:  %[[constant_84:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_85:[^ ]+]] = u32[1]{0} broadcast(%[[constant_84]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_86:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_79]], %[[broadcast_85]])
// CHECK-NEXT:  %[[or_87:[^ ]+]] = u32[1]{0} or(%[[shift_left_83]], %[[shift_right_logical_86]])
// CHECK-NEXT:  %[[xor_88:[^ ]+]] = u32[1]{0} xor(%[[add_80]], %[[or_87]])
// CHECK-NEXT:  %[[add_89:[^ ]+]] = u32[1]{0} add(%[[add_80]], %[[xor_88]])
// CHECK-NEXT:  %[[constant_90:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_91:[^ ]+]] = u32[1]{0} broadcast(%[[constant_90]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_92:[^ ]+]] = u32[1]{0} shift-left(%[[xor_88]], %[[broadcast_91]])
// CHECK-NEXT:  %[[constant_93:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_94:[^ ]+]] = u32[1]{0} broadcast(%[[constant_93]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_95:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_88]], %[[broadcast_94]])
// CHECK-NEXT:  %[[or_96:[^ ]+]] = u32[1]{0} or(%[[shift_left_92]], %[[shift_right_logical_95]])
// CHECK-NEXT:  %[[xor_97:[^ ]+]] = u32[1]{0} xor(%[[add_89]], %[[or_96]])
// CHECK-NEXT:  %[[add_98:[^ ]+]] = u32[1]{0} add(%[[add_89]], %[[xor_97]])
// CHECK-NEXT:  %[[broadcast_107:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_108:[^ ]+]] = u32[1]{0} add(%[[add_98]], %[[broadcast_107]])
// CHECK-NEXT:  %[[constant_99:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[broadcast_100:[^ ]+]] = u32[1]{0} broadcast(%[[constant_99]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_101:[^ ]+]] = u32[1]{0} shift-left(%[[xor_97]], %[[broadcast_100]])
// CHECK-NEXT:  %[[constant_102:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[broadcast_103:[^ ]+]] = u32[1]{0} broadcast(%[[constant_102]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_104:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_97]], %[[broadcast_103]])
// CHECK-NEXT:  %[[or_105:[^ ]+]] = u32[1]{0} or(%[[shift_left_101]], %[[shift_right_logical_104]])
// CHECK-NEXT:  %[[xor_106:[^ ]+]] = u32[1]{0} xor(%[[add_98]], %[[or_105]])
// CHECK-NEXT:  %[[broadcast_109:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_110:[^ ]+]] = u32[1]{0} add(%[[xor_106]], %[[broadcast_109]])
// CHECK-NEXT:  %[[constant_111:[^ ]+]] = u32[] constant(2)
// CHECK-NEXT:  %[[broadcast_112:[^ ]+]] = u32[1]{0} broadcast(%[[constant_111]]), dimensions={}
// CHECK-NEXT:  %[[add_113:[^ ]+]] = u32[1]{0} add(%[[add_110]], %[[broadcast_112]])
// CHECK-NEXT:  %[[add_114:[^ ]+]] = u32[1]{0} add(%[[add_108]], %[[add_113]])
// CHECK-NEXT:  %[[constant_115:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_116:[^ ]+]] = u32[1]{0} broadcast(%[[constant_115]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_117:[^ ]+]] = u32[1]{0} shift-left(%[[add_113]], %[[broadcast_116]])
// CHECK-NEXT:  %[[constant_118:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_119:[^ ]+]] = u32[1]{0} broadcast(%[[constant_118]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_120:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_113]], %[[broadcast_119]])
// CHECK-NEXT:  %[[or_121:[^ ]+]] = u32[1]{0} or(%[[shift_left_117]], %[[shift_right_logical_120]])
// CHECK-NEXT:  %[[xor_122:[^ ]+]] = u32[1]{0} xor(%[[add_114]], %[[or_121]])
// CHECK-NEXT:  %[[add_123:[^ ]+]] = u32[1]{0} add(%[[add_114]], %[[xor_122]])
// CHECK-NEXT:  %[[constant_124:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_125:[^ ]+]] = u32[1]{0} broadcast(%[[constant_124]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_126:[^ ]+]] = u32[1]{0} shift-left(%[[xor_122]], %[[broadcast_125]])
// CHECK-NEXT:  %[[constant_127:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_128:[^ ]+]] = u32[1]{0} broadcast(%[[constant_127]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_129:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_122]], %[[broadcast_128]])
// CHECK-NEXT:  %[[or_130:[^ ]+]] = u32[1]{0} or(%[[shift_left_126]], %[[shift_right_logical_129]])
// CHECK-NEXT:  %[[xor_131:[^ ]+]] = u32[1]{0} xor(%[[add_123]], %[[or_130]])
// CHECK-NEXT:  %[[add_132:[^ ]+]] = u32[1]{0} add(%[[add_123]], %[[xor_131]])
// CHECK-NEXT:  %[[constant_133:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_134:[^ ]+]] = u32[1]{0} broadcast(%[[constant_133]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_135:[^ ]+]] = u32[1]{0} shift-left(%[[xor_131]], %[[broadcast_134]])
// CHECK-NEXT:  %[[constant_136:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_137:[^ ]+]] = u32[1]{0} broadcast(%[[constant_136]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_138:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_131]], %[[broadcast_137]])
// CHECK-NEXT:  %[[or_139:[^ ]+]] = u32[1]{0} or(%[[shift_left_135]], %[[shift_right_logical_138]])
// CHECK-NEXT:  %[[xor_140:[^ ]+]] = u32[1]{0} xor(%[[add_132]], %[[or_139]])
// CHECK-NEXT:  %[[add_141:[^ ]+]] = u32[1]{0} add(%[[add_132]], %[[xor_140]])
// CHECK-NEXT:  %[[broadcast_150:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_151:[^ ]+]] = u32[1]{0} add(%[[add_141]], %[[broadcast_150]])
// CHECK-NEXT:  %[[constant_142:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_143:[^ ]+]] = u32[1]{0} broadcast(%[[constant_142]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_144:[^ ]+]] = u32[1]{0} shift-left(%[[xor_140]], %[[broadcast_143]])
// CHECK-NEXT:  %[[constant_145:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_146:[^ ]+]] = u32[1]{0} broadcast(%[[constant_145]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_147:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_140]], %[[broadcast_146]])
// CHECK-NEXT:  %[[or_148:[^ ]+]] = u32[1]{0} or(%[[shift_left_144]], %[[shift_right_logical_147]])
// CHECK-NEXT:  %[[xor_149:[^ ]+]] = u32[1]{0} xor(%[[add_141]], %[[or_148]])
// CHECK-NEXT:  %[[broadcast_152:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_153:[^ ]+]] = u32[1]{0} add(%[[xor_149]], %[[broadcast_152]])
// CHECK-NEXT:  %[[constant_154:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_155:[^ ]+]] = u32[1]{0} broadcast(%[[constant_154]]), dimensions={}
// CHECK-NEXT:  %[[add_156:[^ ]+]] = u32[1]{0} add(%[[add_153]], %[[broadcast_155]])
// CHECK-NEXT:  %[[add_157:[^ ]+]] = u32[1]{0} add(%[[add_151]], %[[add_156]])
// CHECK-NEXT:  %[[constant_158:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_159:[^ ]+]] = u32[1]{0} broadcast(%[[constant_158]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_160:[^ ]+]] = u32[1]{0} shift-left(%[[add_156]], %[[broadcast_159]])
// CHECK-NEXT:  %[[constant_161:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_162:[^ ]+]] = u32[1]{0} broadcast(%[[constant_161]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_163:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_156]], %[[broadcast_162]])
// CHECK-NEXT:  %[[or_164:[^ ]+]] = u32[1]{0} or(%[[shift_left_160]], %[[shift_right_logical_163]])
// CHECK-NEXT:  %[[xor_165:[^ ]+]] = u32[1]{0} xor(%[[add_157]], %[[or_164]])
// CHECK-NEXT:  %[[add_166:[^ ]+]] = u32[1]{0} add(%[[add_157]], %[[xor_165]])
// CHECK-NEXT:  %[[constant_167:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[broadcast_168:[^ ]+]] = u32[1]{0} broadcast(%[[constant_167]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_169:[^ ]+]] = u32[1]{0} shift-left(%[[xor_165]], %[[broadcast_168]])
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_171:[^ ]+]] = u32[1]{0} broadcast(%[[constant_170]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_172:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_165]], %[[broadcast_171]])
// CHECK-NEXT:  %[[or_173:[^ ]+]] = u32[1]{0} or(%[[shift_left_169]], %[[shift_right_logical_172]])
// CHECK-NEXT:  %[[xor_174:[^ ]+]] = u32[1]{0} xor(%[[add_166]], %[[or_173]])
// CHECK-NEXT:  %[[add_175:[^ ]+]] = u32[1]{0} add(%[[add_166]], %[[xor_174]])
// CHECK-NEXT:  %[[constant_176:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_177:[^ ]+]] = u32[1]{0} broadcast(%[[constant_176]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_178:[^ ]+]] = u32[1]{0} shift-left(%[[xor_174]], %[[broadcast_177]])
// CHECK-NEXT:  %[[constant_179:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_180:[^ ]+]] = u32[1]{0} broadcast(%[[constant_179]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_181:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_174]], %[[broadcast_180]])
// CHECK-NEXT:  %[[or_182:[^ ]+]] = u32[1]{0} or(%[[shift_left_178]], %[[shift_right_logical_181]])
// CHECK-NEXT:  %[[xor_183:[^ ]+]] = u32[1]{0} xor(%[[add_175]], %[[or_182]])
// CHECK-NEXT:  %[[add_184:[^ ]+]] = u32[1]{0} add(%[[add_175]], %[[xor_183]])
// CHECK-NEXT:  %[[broadcast_193:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_194:[^ ]+]] = u32[1]{0} add(%[[add_184]], %[[broadcast_193]])
// CHECK-NEXT:  %[[constant_185:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[broadcast_186:[^ ]+]] = u32[1]{0} broadcast(%[[constant_185]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_187:[^ ]+]] = u32[1]{0} shift-left(%[[xor_183]], %[[broadcast_186]])
// CHECK-NEXT:  %[[constant_188:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[broadcast_189:[^ ]+]] = u32[1]{0} broadcast(%[[constant_188]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_190:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_183]], %[[broadcast_189]])
// CHECK-NEXT:  %[[or_191:[^ ]+]] = u32[1]{0} or(%[[shift_left_187]], %[[shift_right_logical_190]])
// CHECK-NEXT:  %[[xor_192:[^ ]+]] = u32[1]{0} xor(%[[add_184]], %[[or_191]])
// CHECK-NEXT:  %[[broadcast_195:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_196:[^ ]+]] = u32[1]{0} add(%[[xor_192]], %[[broadcast_195]])
// CHECK-NEXT:  %[[constant_197:[^ ]+]] = u32[] constant(4)
// CHECK-NEXT:  %[[broadcast_198:[^ ]+]] = u32[1]{0} broadcast(%[[constant_197]]), dimensions={}
// CHECK-NEXT:  %[[add_199:[^ ]+]] = u32[1]{0} add(%[[add_196]], %[[broadcast_198]])
// CHECK-NEXT:  %[[add_200:[^ ]+]] = u32[1]{0} add(%[[add_194]], %[[add_199]])
// CHECK-NEXT:  %[[constant_201:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_202:[^ ]+]] = u32[1]{0} broadcast(%[[constant_201]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_203:[^ ]+]] = u32[1]{0} shift-left(%[[add_199]], %[[broadcast_202]])
// CHECK-NEXT:  %[[constant_204:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_205:[^ ]+]] = u32[1]{0} broadcast(%[[constant_204]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_206:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_199]], %[[broadcast_205]])
// CHECK-NEXT:  %[[or_207:[^ ]+]] = u32[1]{0} or(%[[shift_left_203]], %[[shift_right_logical_206]])
// CHECK-NEXT:  %[[xor_208:[^ ]+]] = u32[1]{0} xor(%[[add_200]], %[[or_207]])
// CHECK-NEXT:  %[[add_209:[^ ]+]] = u32[1]{0} add(%[[add_200]], %[[xor_208]])
// CHECK-NEXT:  %[[constant_210:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_211:[^ ]+]] = u32[1]{0} broadcast(%[[constant_210]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_212:[^ ]+]] = u32[1]{0} shift-left(%[[xor_208]], %[[broadcast_211]])
// CHECK-NEXT:  %[[constant_213:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_214:[^ ]+]] = u32[1]{0} broadcast(%[[constant_213]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_215:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_208]], %[[broadcast_214]])
// CHECK-NEXT:  %[[or_216:[^ ]+]] = u32[1]{0} or(%[[shift_left_212]], %[[shift_right_logical_215]])
// CHECK-NEXT:  %[[xor_217:[^ ]+]] = u32[1]{0} xor(%[[add_209]], %[[or_216]])
// CHECK-NEXT:  %[[add_218:[^ ]+]] = u32[1]{0} add(%[[add_209]], %[[xor_217]])
// CHECK-NEXT:  %[[constant_219:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_220:[^ ]+]] = u32[1]{0} broadcast(%[[constant_219]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_221:[^ ]+]] = u32[1]{0} shift-left(%[[xor_217]], %[[broadcast_220]])
// CHECK-NEXT:  %[[constant_222:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_223:[^ ]+]] = u32[1]{0} broadcast(%[[constant_222]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_224:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_217]], %[[broadcast_223]])
// CHECK-NEXT:  %[[or_225:[^ ]+]] = u32[1]{0} or(%[[shift_left_221]], %[[shift_right_logical_224]])
// CHECK-NEXT:  %[[xor_226:[^ ]+]] = u32[1]{0} xor(%[[add_218]], %[[or_225]])
// CHECK-NEXT:  %[[add_227:[^ ]+]] = u32[1]{0} add(%[[add_218]], %[[xor_226]])
// CHECK-NEXT:  %[[constant_228:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_229:[^ ]+]] = u32[1]{0} broadcast(%[[constant_228]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_230:[^ ]+]] = u32[1]{0} shift-left(%[[xor_226]], %[[broadcast_229]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_232:[^ ]+]] = u32[1]{0} broadcast(%[[constant_231]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_233:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_226]], %[[broadcast_232]])
// CHECK-NEXT:  %[[or_234:[^ ]+]] = u32[1]{0} or(%[[shift_left_230]], %[[shift_right_logical_233]])
// CHECK-NEXT:  %[[xor_235:[^ ]+]] = u32[1]{0} xor(%[[add_227]], %[[or_234]])
// CHECK-NEXT:  %[[broadcast_238:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_239:[^ ]+]] = u32[1]{0} add(%[[xor_235]], %[[broadcast_238]])
// CHECK-NEXT:  %[[constant_240:[^ ]+]] = u32[] constant(5)
// CHECK-NEXT:  %[[broadcast_241:[^ ]+]] = u32[1]{0} broadcast(%[[constant_240]]), dimensions={}
// CHECK-NEXT:  %[[add_242:[^ ]+]] = u32[1]{0} add(%[[add_239]], %[[broadcast_241]])
// CHECK-NEXT:  %[[reshape_244:[^ ]+]] = u64[1]{0} reshape(%[[reshape_3]])
// CHECK-NEXT:  %[[constant_7:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[broadcast_8:[^ ]+]] = u64[1]{0} broadcast(%[[constant_7]]), dimensions={}
// CHECK-NEXT:  %[[add_9:[^ ]+]] = u64[1]{0} add(%[[slice_4]], %[[broadcast_8]])
// CHECK-NEXT:  %[[concatenate_245:[^ ]+]] = u64[2]{0} concatenate(%[[reshape_244]], %[[add_9]]), dimensions={0}
// CHECK-NEXT:  %[[broadcast_236:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_237:[^ ]+]] = u32[1]{0} add(%[[add_227]], %[[broadcast_236]])
// CHECK-NEXT:  %[[reshape_243:[^ ]+]] = u32[] reshape(%[[add_237]])
// CHECK-NEXT:  ROOT %[[tuple_246:[^ ]+]] = (u64[2]{0}, u32[]) tuple(%[[concatenate_245]], %[[reshape_243]])

// CHECK-LABEL: ENTRY %test_default
// CHECK-NEXT:  %[[initial_state:[^ ]+]] = u64[2]{0} constant({0, 1})
// CHECK-NEXT:  ROOT %[[call:[^ ]+]] = (u64[2]{0}, u32[]) call(%[[initial_state]]), to_apply=%[[$rng_247]]

HloModule TestDefaultAlgorithm

ENTRY test_default {
  initial_state = u64[2] constant({0, 1})
  ROOT result = (u64[2], u32[]) rng-bit-generator(initial_state), algorithm=rng_default
}

// -----

// CHECK-LABEL: HloModule TestThreeFryAlgorithm, entry_computation_layout={()->(u64[4]{0}, u32[])}

// CHECK:       %[[$rng_247:[^ ]+]]
// CHECK-NEXT:  %[[state_1:[^ ]+]] = u64[4]{0} parameter(0)
// CHECK-NEXT:  %[[slice_4:[^ ]+]] = u64[1]{0} slice(%[[state_1]]), slice={[1:2]}
// CHECK-NEXT:  %[[reshape_5:[^ ]+]] = u64[] reshape(%[[slice_4]])
// CHECK-NEXT:  %[[broadcast_6:[^ ]+]] = u64[1]{0} broadcast(%[[reshape_5]]), dimensions={}
// CHECK-NEXT:  %[[convert_11:[^ ]+]] = u32[1]{0} convert(%[[broadcast_6]])
// CHECK-NEXT:  %[[slice_2:[^ ]+]] = u64[1]{0} slice(%[[state_1]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_3:[^ ]+]] = u64[] reshape(%[[slice_2]])
// CHECK-NEXT:  %[[convert_16:[^ ]+]] = u32[] convert(%[[reshape_3]])
// CHECK-NEXT:  %[[bitcast_convert_19:[^ ]+]] = u32[] bitcast-convert(%[[convert_16]])
// CHECK-NEXT:  %[[broadcast_24:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_25:[^ ]+]] = u32[1]{0} add(%[[convert_11]], %[[broadcast_24]])
// CHECK-NEXT:  %[[constant_10:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_12:[^ ]+]] = u64[1]{0} broadcast(%[[constant_10]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_13:[^ ]+]] = u64[1]{0} shift-right-logical(%[[broadcast_6]], %[[broadcast_12]])
// CHECK-NEXT:  %[[convert_14:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_13]])
// CHECK-NEXT:  %[[constant_15:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_17:[^ ]+]] = u64[] shift-right-logical(%[[reshape_3]], %[[constant_15]])
// CHECK-NEXT:  %[[convert_18:[^ ]+]] = u32[] convert(%[[shift_right_logical_17]])
// CHECK-NEXT:  %[[bitcast_convert_20:[^ ]+]] = u32[] bitcast-convert(%[[convert_18]])
// CHECK-NEXT:  %[[broadcast_26:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_27:[^ ]+]] = u32[1]{0} add(%[[convert_14]], %[[broadcast_26]])
// CHECK-NEXT:  %[[add_28:[^ ]+]] = u32[1]{0} add(%[[add_25]], %[[add_27]])
// CHECK-NEXT:  %[[constant_29:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_30:[^ ]+]] = u32[1]{0} broadcast(%[[constant_29]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_31:[^ ]+]] = u32[1]{0} shift-left(%[[add_27]], %[[broadcast_30]])
// CHECK-NEXT:  %[[constant_32:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_33:[^ ]+]] = u32[1]{0} broadcast(%[[constant_32]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_34:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_27]], %[[broadcast_33]])
// CHECK-NEXT:  %[[or_35:[^ ]+]] = u32[1]{0} or(%[[shift_left_31]], %[[shift_right_logical_34]])
// CHECK-NEXT:  %[[xor_36:[^ ]+]] = u32[1]{0} xor(%[[add_28]], %[[or_35]])
// CHECK-NEXT:  %[[add_37:[^ ]+]] = u32[1]{0} add(%[[add_28]], %[[xor_36]])
// CHECK-NEXT:  %[[constant_38:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_39:[^ ]+]] = u32[1]{0} broadcast(%[[constant_38]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_40:[^ ]+]] = u32[1]{0} shift-left(%[[xor_36]], %[[broadcast_39]])
// CHECK-NEXT:  %[[constant_41:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_42:[^ ]+]] = u32[1]{0} broadcast(%[[constant_41]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_43:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_36]], %[[broadcast_42]])
// CHECK-NEXT:  %[[or_44:[^ ]+]] = u32[1]{0} or(%[[shift_left_40]], %[[shift_right_logical_43]])
// CHECK-NEXT:  %[[xor_45:[^ ]+]] = u32[1]{0} xor(%[[add_37]], %[[or_44]])
// CHECK-NEXT:  %[[add_46:[^ ]+]] = u32[1]{0} add(%[[add_37]], %[[xor_45]])
// CHECK-NEXT:  %[[constant_47:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_48:[^ ]+]] = u32[1]{0} broadcast(%[[constant_47]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_49:[^ ]+]] = u32[1]{0} shift-left(%[[xor_45]], %[[broadcast_48]])
// CHECK-NEXT:  %[[constant_50:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_51:[^ ]+]] = u32[1]{0} broadcast(%[[constant_50]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_52:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_45]], %[[broadcast_51]])
// CHECK-NEXT:  %[[or_53:[^ ]+]] = u32[1]{0} or(%[[shift_left_49]], %[[shift_right_logical_52]])
// CHECK-NEXT:  %[[xor_54:[^ ]+]] = u32[1]{0} xor(%[[add_46]], %[[or_53]])
// CHECK-NEXT:  %[[add_55:[^ ]+]] = u32[1]{0} add(%[[add_46]], %[[xor_54]])
// CHECK-NEXT:  %[[broadcast_64:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_65:[^ ]+]] = u32[1]{0} add(%[[add_55]], %[[broadcast_64]])
// CHECK-NEXT:  %[[constant_56:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_57:[^ ]+]] = u32[1]{0} broadcast(%[[constant_56]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_58:[^ ]+]] = u32[1]{0} shift-left(%[[xor_54]], %[[broadcast_57]])
// CHECK-NEXT:  %[[constant_59:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_60:[^ ]+]] = u32[1]{0} broadcast(%[[constant_59]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_61:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_54]], %[[broadcast_60]])
// CHECK-NEXT:  %[[or_62:[^ ]+]] = u32[1]{0} or(%[[shift_left_58]], %[[shift_right_logical_61]])
// CHECK-NEXT:  %[[xor_63:[^ ]+]] = u32[1]{0} xor(%[[add_55]], %[[or_62]])
// CHECK-NEXT:  %[[constant_21:[^ ]+]] = u32[] constant(466688986)
// CHECK-NEXT:  %[[xor_22:[^ ]+]] = u32[] xor(%[[constant_21]], %[[bitcast_convert_19]])
// CHECK-NEXT:  %[[xor_23:[^ ]+]] = u32[] xor(%[[xor_22]], %[[bitcast_convert_20]])
// CHECK-NEXT:  %[[broadcast_66:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_67:[^ ]+]] = u32[1]{0} add(%[[xor_63]], %[[broadcast_66]])
// CHECK-NEXT:  %[[constant_68:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[broadcast_69:[^ ]+]] = u32[1]{0} broadcast(%[[constant_68]]), dimensions={}
// CHECK-NEXT:  %[[add_70:[^ ]+]] = u32[1]{0} add(%[[add_67]], %[[broadcast_69]])
// CHECK-NEXT:  %[[add_71:[^ ]+]] = u32[1]{0} add(%[[add_65]], %[[add_70]])
// CHECK-NEXT:  %[[constant_72:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_73:[^ ]+]] = u32[1]{0} broadcast(%[[constant_72]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_74:[^ ]+]] = u32[1]{0} shift-left(%[[add_70]], %[[broadcast_73]])
// CHECK-NEXT:  %[[constant_75:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_76:[^ ]+]] = u32[1]{0} broadcast(%[[constant_75]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_77:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_70]], %[[broadcast_76]])
// CHECK-NEXT:  %[[or_78:[^ ]+]] = u32[1]{0} or(%[[shift_left_74]], %[[shift_right_logical_77]])
// CHECK-NEXT:  %[[xor_79:[^ ]+]] = u32[1]{0} xor(%[[add_71]], %[[or_78]])
// CHECK-NEXT:  %[[add_80:[^ ]+]] = u32[1]{0} add(%[[add_71]], %[[xor_79]])
// CHECK-NEXT:  %[[constant_81:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[broadcast_82:[^ ]+]] = u32[1]{0} broadcast(%[[constant_81]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_83:[^ ]+]] = u32[1]{0} shift-left(%[[xor_79]], %[[broadcast_82]])
// CHECK-NEXT:  %[[constant_84:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_85:[^ ]+]] = u32[1]{0} broadcast(%[[constant_84]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_86:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_79]], %[[broadcast_85]])
// CHECK-NEXT:  %[[or_87:[^ ]+]] = u32[1]{0} or(%[[shift_left_83]], %[[shift_right_logical_86]])
// CHECK-NEXT:  %[[xor_88:[^ ]+]] = u32[1]{0} xor(%[[add_80]], %[[or_87]])
// CHECK-NEXT:  %[[add_89:[^ ]+]] = u32[1]{0} add(%[[add_80]], %[[xor_88]])
// CHECK-NEXT:  %[[constant_90:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_91:[^ ]+]] = u32[1]{0} broadcast(%[[constant_90]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_92:[^ ]+]] = u32[1]{0} shift-left(%[[xor_88]], %[[broadcast_91]])
// CHECK-NEXT:  %[[constant_93:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_94:[^ ]+]] = u32[1]{0} broadcast(%[[constant_93]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_95:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_88]], %[[broadcast_94]])
// CHECK-NEXT:  %[[or_96:[^ ]+]] = u32[1]{0} or(%[[shift_left_92]], %[[shift_right_logical_95]])
// CHECK-NEXT:  %[[xor_97:[^ ]+]] = u32[1]{0} xor(%[[add_89]], %[[or_96]])
// CHECK-NEXT:  %[[add_98:[^ ]+]] = u32[1]{0} add(%[[add_89]], %[[xor_97]])
// CHECK-NEXT:  %[[broadcast_107:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_108:[^ ]+]] = u32[1]{0} add(%[[add_98]], %[[broadcast_107]])
// CHECK-NEXT:  %[[constant_99:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[broadcast_100:[^ ]+]] = u32[1]{0} broadcast(%[[constant_99]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_101:[^ ]+]] = u32[1]{0} shift-left(%[[xor_97]], %[[broadcast_100]])
// CHECK-NEXT:  %[[constant_102:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[broadcast_103:[^ ]+]] = u32[1]{0} broadcast(%[[constant_102]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_104:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_97]], %[[broadcast_103]])
// CHECK-NEXT:  %[[or_105:[^ ]+]] = u32[1]{0} or(%[[shift_left_101]], %[[shift_right_logical_104]])
// CHECK-NEXT:  %[[xor_106:[^ ]+]] = u32[1]{0} xor(%[[add_98]], %[[or_105]])
// CHECK-NEXT:  %[[broadcast_109:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_110:[^ ]+]] = u32[1]{0} add(%[[xor_106]], %[[broadcast_109]])
// CHECK-NEXT:  %[[constant_111:[^ ]+]] = u32[] constant(2)
// CHECK-NEXT:  %[[broadcast_112:[^ ]+]] = u32[1]{0} broadcast(%[[constant_111]]), dimensions={}
// CHECK-NEXT:  %[[add_113:[^ ]+]] = u32[1]{0} add(%[[add_110]], %[[broadcast_112]])
// CHECK-NEXT:  %[[add_114:[^ ]+]] = u32[1]{0} add(%[[add_108]], %[[add_113]])
// CHECK-NEXT:  %[[constant_115:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_116:[^ ]+]] = u32[1]{0} broadcast(%[[constant_115]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_117:[^ ]+]] = u32[1]{0} shift-left(%[[add_113]], %[[broadcast_116]])
// CHECK-NEXT:  %[[constant_118:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_119:[^ ]+]] = u32[1]{0} broadcast(%[[constant_118]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_120:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_113]], %[[broadcast_119]])
// CHECK-NEXT:  %[[or_121:[^ ]+]] = u32[1]{0} or(%[[shift_left_117]], %[[shift_right_logical_120]])
// CHECK-NEXT:  %[[xor_122:[^ ]+]] = u32[1]{0} xor(%[[add_114]], %[[or_121]])
// CHECK-NEXT:  %[[add_123:[^ ]+]] = u32[1]{0} add(%[[add_114]], %[[xor_122]])
// CHECK-NEXT:  %[[constant_124:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_125:[^ ]+]] = u32[1]{0} broadcast(%[[constant_124]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_126:[^ ]+]] = u32[1]{0} shift-left(%[[xor_122]], %[[broadcast_125]])
// CHECK-NEXT:  %[[constant_127:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_128:[^ ]+]] = u32[1]{0} broadcast(%[[constant_127]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_129:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_122]], %[[broadcast_128]])
// CHECK-NEXT:  %[[or_130:[^ ]+]] = u32[1]{0} or(%[[shift_left_126]], %[[shift_right_logical_129]])
// CHECK-NEXT:  %[[xor_131:[^ ]+]] = u32[1]{0} xor(%[[add_123]], %[[or_130]])
// CHECK-NEXT:  %[[add_132:[^ ]+]] = u32[1]{0} add(%[[add_123]], %[[xor_131]])
// CHECK-NEXT:  %[[constant_133:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_134:[^ ]+]] = u32[1]{0} broadcast(%[[constant_133]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_135:[^ ]+]] = u32[1]{0} shift-left(%[[xor_131]], %[[broadcast_134]])
// CHECK-NEXT:  %[[constant_136:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_137:[^ ]+]] = u32[1]{0} broadcast(%[[constant_136]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_138:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_131]], %[[broadcast_137]])
// CHECK-NEXT:  %[[or_139:[^ ]+]] = u32[1]{0} or(%[[shift_left_135]], %[[shift_right_logical_138]])
// CHECK-NEXT:  %[[xor_140:[^ ]+]] = u32[1]{0} xor(%[[add_132]], %[[or_139]])
// CHECK-NEXT:  %[[add_141:[^ ]+]] = u32[1]{0} add(%[[add_132]], %[[xor_140]])
// CHECK-NEXT:  %[[broadcast_150:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_151:[^ ]+]] = u32[1]{0} add(%[[add_141]], %[[broadcast_150]])
// CHECK-NEXT:  %[[constant_142:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_143:[^ ]+]] = u32[1]{0} broadcast(%[[constant_142]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_144:[^ ]+]] = u32[1]{0} shift-left(%[[xor_140]], %[[broadcast_143]])
// CHECK-NEXT:  %[[constant_145:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_146:[^ ]+]] = u32[1]{0} broadcast(%[[constant_145]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_147:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_140]], %[[broadcast_146]])
// CHECK-NEXT:  %[[or_148:[^ ]+]] = u32[1]{0} or(%[[shift_left_144]], %[[shift_right_logical_147]])
// CHECK-NEXT:  %[[xor_149:[^ ]+]] = u32[1]{0} xor(%[[add_141]], %[[or_148]])
// CHECK-NEXT:  %[[broadcast_152:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_153:[^ ]+]] = u32[1]{0} add(%[[xor_149]], %[[broadcast_152]])
// CHECK-NEXT:  %[[constant_154:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_155:[^ ]+]] = u32[1]{0} broadcast(%[[constant_154]]), dimensions={}
// CHECK-NEXT:  %[[add_156:[^ ]+]] = u32[1]{0} add(%[[add_153]], %[[broadcast_155]])
// CHECK-NEXT:  %[[add_157:[^ ]+]] = u32[1]{0} add(%[[add_151]], %[[add_156]])
// CHECK-NEXT:  %[[constant_158:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_159:[^ ]+]] = u32[1]{0} broadcast(%[[constant_158]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_160:[^ ]+]] = u32[1]{0} shift-left(%[[add_156]], %[[broadcast_159]])
// CHECK-NEXT:  %[[constant_161:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_162:[^ ]+]] = u32[1]{0} broadcast(%[[constant_161]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_163:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_156]], %[[broadcast_162]])
// CHECK-NEXT:  %[[or_164:[^ ]+]] = u32[1]{0} or(%[[shift_left_160]], %[[shift_right_logical_163]])
// CHECK-NEXT:  %[[xor_165:[^ ]+]] = u32[1]{0} xor(%[[add_157]], %[[or_164]])
// CHECK-NEXT:  %[[add_166:[^ ]+]] = u32[1]{0} add(%[[add_157]], %[[xor_165]])
// CHECK-NEXT:  %[[constant_167:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[broadcast_168:[^ ]+]] = u32[1]{0} broadcast(%[[constant_167]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_169:[^ ]+]] = u32[1]{0} shift-left(%[[xor_165]], %[[broadcast_168]])
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_171:[^ ]+]] = u32[1]{0} broadcast(%[[constant_170]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_172:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_165]], %[[broadcast_171]])
// CHECK-NEXT:  %[[or_173:[^ ]+]] = u32[1]{0} or(%[[shift_left_169]], %[[shift_right_logical_172]])
// CHECK-NEXT:  %[[xor_174:[^ ]+]] = u32[1]{0} xor(%[[add_166]], %[[or_173]])
// CHECK-NEXT:  %[[add_175:[^ ]+]] = u32[1]{0} add(%[[add_166]], %[[xor_174]])
// CHECK-NEXT:  %[[constant_176:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_177:[^ ]+]] = u32[1]{0} broadcast(%[[constant_176]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_178:[^ ]+]] = u32[1]{0} shift-left(%[[xor_174]], %[[broadcast_177]])
// CHECK-NEXT:  %[[constant_179:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_180:[^ ]+]] = u32[1]{0} broadcast(%[[constant_179]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_181:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_174]], %[[broadcast_180]])
// CHECK-NEXT:  %[[or_182:[^ ]+]] = u32[1]{0} or(%[[shift_left_178]], %[[shift_right_logical_181]])
// CHECK-NEXT:  %[[xor_183:[^ ]+]] = u32[1]{0} xor(%[[add_175]], %[[or_182]])
// CHECK-NEXT:  %[[add_184:[^ ]+]] = u32[1]{0} add(%[[add_175]], %[[xor_183]])
// CHECK-NEXT:  %[[broadcast_193:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_194:[^ ]+]] = u32[1]{0} add(%[[add_184]], %[[broadcast_193]])
// CHECK-NEXT:  %[[constant_185:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[broadcast_186:[^ ]+]] = u32[1]{0} broadcast(%[[constant_185]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_187:[^ ]+]] = u32[1]{0} shift-left(%[[xor_183]], %[[broadcast_186]])
// CHECK-NEXT:  %[[constant_188:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[broadcast_189:[^ ]+]] = u32[1]{0} broadcast(%[[constant_188]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_190:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_183]], %[[broadcast_189]])
// CHECK-NEXT:  %[[or_191:[^ ]+]] = u32[1]{0} or(%[[shift_left_187]], %[[shift_right_logical_190]])
// CHECK-NEXT:  %[[xor_192:[^ ]+]] = u32[1]{0} xor(%[[add_184]], %[[or_191]])
// CHECK-NEXT:  %[[broadcast_195:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_196:[^ ]+]] = u32[1]{0} add(%[[xor_192]], %[[broadcast_195]])
// CHECK-NEXT:  %[[constant_197:[^ ]+]] = u32[] constant(4)
// CHECK-NEXT:  %[[broadcast_198:[^ ]+]] = u32[1]{0} broadcast(%[[constant_197]]), dimensions={}
// CHECK-NEXT:  %[[add_199:[^ ]+]] = u32[1]{0} add(%[[add_196]], %[[broadcast_198]])
// CHECK-NEXT:  %[[add_200:[^ ]+]] = u32[1]{0} add(%[[add_194]], %[[add_199]])
// CHECK-NEXT:  %[[constant_201:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_202:[^ ]+]] = u32[1]{0} broadcast(%[[constant_201]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_203:[^ ]+]] = u32[1]{0} shift-left(%[[add_199]], %[[broadcast_202]])
// CHECK-NEXT:  %[[constant_204:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_205:[^ ]+]] = u32[1]{0} broadcast(%[[constant_204]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_206:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_199]], %[[broadcast_205]])
// CHECK-NEXT:  %[[or_207:[^ ]+]] = u32[1]{0} or(%[[shift_left_203]], %[[shift_right_logical_206]])
// CHECK-NEXT:  %[[xor_208:[^ ]+]] = u32[1]{0} xor(%[[add_200]], %[[or_207]])
// CHECK-NEXT:  %[[add_209:[^ ]+]] = u32[1]{0} add(%[[add_200]], %[[xor_208]])
// CHECK-NEXT:  %[[constant_210:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_211:[^ ]+]] = u32[1]{0} broadcast(%[[constant_210]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_212:[^ ]+]] = u32[1]{0} shift-left(%[[xor_208]], %[[broadcast_211]])
// CHECK-NEXT:  %[[constant_213:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_214:[^ ]+]] = u32[1]{0} broadcast(%[[constant_213]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_215:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_208]], %[[broadcast_214]])
// CHECK-NEXT:  %[[or_216:[^ ]+]] = u32[1]{0} or(%[[shift_left_212]], %[[shift_right_logical_215]])
// CHECK-NEXT:  %[[xor_217:[^ ]+]] = u32[1]{0} xor(%[[add_209]], %[[or_216]])
// CHECK-NEXT:  %[[add_218:[^ ]+]] = u32[1]{0} add(%[[add_209]], %[[xor_217]])
// CHECK-NEXT:  %[[constant_219:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_220:[^ ]+]] = u32[1]{0} broadcast(%[[constant_219]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_221:[^ ]+]] = u32[1]{0} shift-left(%[[xor_217]], %[[broadcast_220]])
// CHECK-NEXT:  %[[constant_222:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_223:[^ ]+]] = u32[1]{0} broadcast(%[[constant_222]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_224:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_217]], %[[broadcast_223]])
// CHECK-NEXT:  %[[or_225:[^ ]+]] = u32[1]{0} or(%[[shift_left_221]], %[[shift_right_logical_224]])
// CHECK-NEXT:  %[[xor_226:[^ ]+]] = u32[1]{0} xor(%[[add_218]], %[[or_225]])
// CHECK-NEXT:  %[[add_227:[^ ]+]] = u32[1]{0} add(%[[add_218]], %[[xor_226]])
// CHECK-NEXT:  %[[constant_228:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_229:[^ ]+]] = u32[1]{0} broadcast(%[[constant_228]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_230:[^ ]+]] = u32[1]{0} shift-left(%[[xor_226]], %[[broadcast_229]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_232:[^ ]+]] = u32[1]{0} broadcast(%[[constant_231]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_233:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_226]], %[[broadcast_232]])
// CHECK-NEXT:  %[[or_234:[^ ]+]] = u32[1]{0} or(%[[shift_left_230]], %[[shift_right_logical_233]])
// CHECK-NEXT:  %[[xor_235:[^ ]+]] = u32[1]{0} xor(%[[add_227]], %[[or_234]])
// CHECK-NEXT:  %[[broadcast_238:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_239:[^ ]+]] = u32[1]{0} add(%[[xor_235]], %[[broadcast_238]])
// CHECK-NEXT:  %[[constant_240:[^ ]+]] = u32[] constant(5)
// CHECK-NEXT:  %[[broadcast_241:[^ ]+]] = u32[1]{0} broadcast(%[[constant_240]]), dimensions={}
// CHECK-NEXT:  %[[add_242:[^ ]+]] = u32[1]{0} add(%[[add_239]], %[[broadcast_241]])
// CHECK-NEXT:  %[[reshape_244:[^ ]+]] = u64[1]{0} reshape(%[[reshape_3]])
// CHECK-NEXT:  %[[constant_7:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[broadcast_8:[^ ]+]] = u64[1]{0} broadcast(%[[constant_7]]), dimensions={}
// CHECK-NEXT:  %[[add_9:[^ ]+]] = u64[1]{0} add(%[[slice_4]], %[[broadcast_8]])
// CHECK-NEXT:  %[[concatenate_245:[^ ]+]] = u64[2]{0} concatenate(%[[reshape_244]], %[[add_9]]), dimensions={0}
// CHECK-NEXT:  %[[broadcast_236:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_237:[^ ]+]] = u32[1]{0} add(%[[add_227]], %[[broadcast_236]])
// CHECK-NEXT:  %[[reshape_243:[^ ]+]] = u32[] reshape(%[[add_237]])
// CHECK-NEXT:  ROOT %[[tuple_246:[^ ]+]] = (u64[2]{0}, u32[]) tuple(%[[concatenate_245]], %[[reshape_243]])

// CHECK-LABEL: ENTRY %test_three_fry
// CHECK-NEXT:  %[[initial_state:[^ ]+]] = u64[4]{0} constant({9, 10, 11, 12})
// CHECK-NEXT:  ROOT %[[call:[^ ]+]] = (u64[4]{0}, u32[]) call(%[[initial_state]]), to_apply=%[[$rng_247]]

HloModule TestThreeFryAlgorithm

ENTRY test_three_fry {
  initial_state = u64[4] constant({9, 10, 11, 12})
  ROOT result = (u64[4], u32[]) rng-bit-generator(initial_state), algorithm=rng_three_fry
}

// -----

// CHECK-LABEL: HloModule TestThreeFryAlgorithm, entry_computation_layout={()->(u64[4]{0}, u64[])}

// CHECK:       %[[$rng_193:[^ ]+]]
// CHECK-NEXT:  %[[state_1:[^ ]+]] = u64[4]{0} parameter(0)
// CHECK-NEXT:  %[[slice_2:[^ ]+]] = u64[1]{0} slice(%[[state_1]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_3:[^ ]+]] = u64[] reshape(%[[slice_2]])
// CHECK-NEXT:  %[[reshape_190:[^ ]+]] = u64[1]{0} reshape(%[[reshape_3]])
// CHECK-NEXT:  %[[slice_4:[^ ]+]] = u64[1]{0} slice(%[[state_1]]), slice={[1:2]}
// CHECK-NEXT:  %[[constant_7:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[broadcast_8:[^ ]+]] = u64[1]{0} broadcast(%[[constant_7]]), dimensions={}
// CHECK-NEXT:  %[[add_9:[^ ]+]] = u64[1]{0} add(%[[slice_4]], %[[broadcast_8]])
// CHECK-NEXT:  %[[concatenate_191:[^ ]+]] = u64[2]{0} concatenate(%[[reshape_190]], %[[add_9]]), dimensions={0}
// CHECK-NEXT:  %[[reshape_5:[^ ]+]] = u64[] reshape(%[[slice_4]])
// CHECK-NEXT:  %[[broadcast_6:[^ ]+]] = u64[] broadcast(%[[reshape_5]]), dimensions={}
// CHECK-NEXT:  %[[convert_11:[^ ]+]] = u32[] convert(%[[broadcast_6]])
// CHECK-NEXT:  %[[convert_15:[^ ]+]] = u32[] convert(%[[reshape_3]])
// CHECK-NEXT:  %[[bitcast_convert_18:[^ ]+]] = u32[] bitcast-convert(%[[convert_15]])
// CHECK-NEXT:  %[[add_23:[^ ]+]] = u32[] add(%[[convert_11]], %[[bitcast_convert_18]])
// CHECK-NEXT:  %[[constant_10:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_12:[^ ]+]] = u64[] shift-right-logical(%[[broadcast_6]], %[[constant_10]])
// CHECK-NEXT:  %[[convert_13:[^ ]+]] = u32[] convert(%[[shift_right_logical_12]])
// CHECK-NEXT:  %[[constant_14:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_16:[^ ]+]] = u64[] shift-right-logical(%[[reshape_3]], %[[constant_14]])
// CHECK-NEXT:  %[[convert_17:[^ ]+]] = u32[] convert(%[[shift_right_logical_16]])
// CHECK-NEXT:  %[[bitcast_convert_19:[^ ]+]] = u32[] bitcast-convert(%[[convert_17]])
// CHECK-NEXT:  %[[add_24:[^ ]+]] = u32[] add(%[[convert_13]], %[[bitcast_convert_19]])
// CHECK-NEXT:  %[[add_25:[^ ]+]] = u32[] add(%[[add_23]], %[[add_24]])
// CHECK-NEXT:  %[[constant_26:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[shift_left_27:[^ ]+]] = u32[] shift-left(%[[add_24]], %[[constant_26]])
// CHECK-NEXT:  %[[constant_28:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[shift_right_logical_29:[^ ]+]] = u32[] shift-right-logical(%[[add_24]], %[[constant_28]])
// CHECK-NEXT:  %[[or_30:[^ ]+]] = u32[] or(%[[shift_left_27]], %[[shift_right_logical_29]])
// CHECK-NEXT:  %[[xor_31:[^ ]+]] = u32[] xor(%[[add_25]], %[[or_30]])
// CHECK-NEXT:  %[[add_32:[^ ]+]] = u32[] add(%[[add_25]], %[[xor_31]])
// CHECK-NEXT:  %[[constant_33:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[shift_left_34:[^ ]+]] = u32[] shift-left(%[[xor_31]], %[[constant_33]])
// CHECK-NEXT:  %[[constant_35:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[shift_right_logical_36:[^ ]+]] = u32[] shift-right-logical(%[[xor_31]], %[[constant_35]])
// CHECK-NEXT:  %[[or_37:[^ ]+]] = u32[] or(%[[shift_left_34]], %[[shift_right_logical_36]])
// CHECK-NEXT:  %[[xor_38:[^ ]+]] = u32[] xor(%[[add_32]], %[[or_37]])
// CHECK-NEXT:  %[[add_39:[^ ]+]] = u32[] add(%[[add_32]], %[[xor_38]])
// CHECK-NEXT:  %[[constant_40:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[shift_left_41:[^ ]+]] = u32[] shift-left(%[[xor_38]], %[[constant_40]])
// CHECK-NEXT:  %[[constant_42:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[shift_right_logical_43:[^ ]+]] = u32[] shift-right-logical(%[[xor_38]], %[[constant_42]])
// CHECK-NEXT:  %[[or_44:[^ ]+]] = u32[] or(%[[shift_left_41]], %[[shift_right_logical_43]])
// CHECK-NEXT:  %[[xor_45:[^ ]+]] = u32[] xor(%[[add_39]], %[[or_44]])
// CHECK-NEXT:  %[[add_46:[^ ]+]] = u32[] add(%[[add_39]], %[[xor_45]])
// CHECK-NEXT:  %[[add_53:[^ ]+]] = u32[] add(%[[add_46]], %[[bitcast_convert_19]])
// CHECK-NEXT:  %[[constant_47:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[shift_left_48:[^ ]+]] = u32[] shift-left(%[[xor_45]], %[[constant_47]])
// CHECK-NEXT:  %[[constant_49:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[shift_right_logical_50:[^ ]+]] = u32[] shift-right-logical(%[[xor_45]], %[[constant_49]])
// CHECK-NEXT:  %[[or_51:[^ ]+]] = u32[] or(%[[shift_left_48]], %[[shift_right_logical_50]])
// CHECK-NEXT:  %[[xor_52:[^ ]+]] = u32[] xor(%[[add_46]], %[[or_51]])
// CHECK-NEXT:  %[[constant_20:[^ ]+]] = u32[] constant(466688986)
// CHECK-NEXT:  %[[xor_21:[^ ]+]] = u32[] xor(%[[constant_20]], %[[bitcast_convert_18]])
// CHECK-NEXT:  %[[xor_22:[^ ]+]] = u32[] xor(%[[xor_21]], %[[bitcast_convert_19]])
// CHECK-NEXT:  %[[add_54:[^ ]+]] = u32[] add(%[[xor_52]], %[[xor_22]])
// CHECK-NEXT:  %[[constant_55:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[add_56:[^ ]+]] = u32[] add(%[[add_54]], %[[constant_55]])
// CHECK-NEXT:  %[[add_57:[^ ]+]] = u32[] add(%[[add_53]], %[[add_56]])
// CHECK-NEXT:  %[[constant_58:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[shift_left_59:[^ ]+]] = u32[] shift-left(%[[add_56]], %[[constant_58]])
// CHECK-NEXT:  %[[constant_60:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[shift_right_logical_61:[^ ]+]] = u32[] shift-right-logical(%[[add_56]], %[[constant_60]])
// CHECK-NEXT:  %[[or_62:[^ ]+]] = u32[] or(%[[shift_left_59]], %[[shift_right_logical_61]])
// CHECK-NEXT:  %[[xor_63:[^ ]+]] = u32[] xor(%[[add_57]], %[[or_62]])
// CHECK-NEXT:  %[[add_64:[^ ]+]] = u32[] add(%[[add_57]], %[[xor_63]])
// CHECK-NEXT:  %[[constant_65:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[shift_left_66:[^ ]+]] = u32[] shift-left(%[[xor_63]], %[[constant_65]])
// CHECK-NEXT:  %[[constant_67:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[shift_right_logical_68:[^ ]+]] = u32[] shift-right-logical(%[[xor_63]], %[[constant_67]])
// CHECK-NEXT:  %[[or_69:[^ ]+]] = u32[] or(%[[shift_left_66]], %[[shift_right_logical_68]])
// CHECK-NEXT:  %[[xor_70:[^ ]+]] = u32[] xor(%[[add_64]], %[[or_69]])
// CHECK-NEXT:  %[[add_71:[^ ]+]] = u32[] add(%[[add_64]], %[[xor_70]])
// CHECK-NEXT:  %[[constant_72:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[shift_left_73:[^ ]+]] = u32[] shift-left(%[[xor_70]], %[[constant_72]])
// CHECK-NEXT:  %[[constant_74:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[shift_right_logical_75:[^ ]+]] = u32[] shift-right-logical(%[[xor_70]], %[[constant_74]])
// CHECK-NEXT:  %[[or_76:[^ ]+]] = u32[] or(%[[shift_left_73]], %[[shift_right_logical_75]])
// CHECK-NEXT:  %[[xor_77:[^ ]+]] = u32[] xor(%[[add_71]], %[[or_76]])
// CHECK-NEXT:  %[[add_78:[^ ]+]] = u32[] add(%[[add_71]], %[[xor_77]])
// CHECK-NEXT:  %[[add_85:[^ ]+]] = u32[] add(%[[add_78]], %[[xor_22]])
// CHECK-NEXT:  %[[constant_79:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[shift_left_80:[^ ]+]] = u32[] shift-left(%[[xor_77]], %[[constant_79]])
// CHECK-NEXT:  %[[constant_81:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[shift_right_logical_82:[^ ]+]] = u32[] shift-right-logical(%[[xor_77]], %[[constant_81]])
// CHECK-NEXT:  %[[or_83:[^ ]+]] = u32[] or(%[[shift_left_80]], %[[shift_right_logical_82]])
// CHECK-NEXT:  %[[xor_84:[^ ]+]] = u32[] xor(%[[add_78]], %[[or_83]])
// CHECK-NEXT:  %[[add_86:[^ ]+]] = u32[] add(%[[xor_84]], %[[bitcast_convert_18]])
// CHECK-NEXT:  %[[constant_87:[^ ]+]] = u32[] constant(2)
// CHECK-NEXT:  %[[add_88:[^ ]+]] = u32[] add(%[[add_86]], %[[constant_87]])
// CHECK-NEXT:  %[[add_89:[^ ]+]] = u32[] add(%[[add_85]], %[[add_88]])
// CHECK-NEXT:  %[[constant_90:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[shift_left_91:[^ ]+]] = u32[] shift-left(%[[add_88]], %[[constant_90]])
// CHECK-NEXT:  %[[constant_92:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[shift_right_logical_93:[^ ]+]] = u32[] shift-right-logical(%[[add_88]], %[[constant_92]])
// CHECK-NEXT:  %[[or_94:[^ ]+]] = u32[] or(%[[shift_left_91]], %[[shift_right_logical_93]])
// CHECK-NEXT:  %[[xor_95:[^ ]+]] = u32[] xor(%[[add_89]], %[[or_94]])
// CHECK-NEXT:  %[[add_96:[^ ]+]] = u32[] add(%[[add_89]], %[[xor_95]])
// CHECK-NEXT:  %[[constant_97:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[shift_left_98:[^ ]+]] = u32[] shift-left(%[[xor_95]], %[[constant_97]])
// CHECK-NEXT:  %[[constant_99:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[shift_right_logical_100:[^ ]+]] = u32[] shift-right-logical(%[[xor_95]], %[[constant_99]])
// CHECK-NEXT:  %[[or_101:[^ ]+]] = u32[] or(%[[shift_left_98]], %[[shift_right_logical_100]])
// CHECK-NEXT:  %[[xor_102:[^ ]+]] = u32[] xor(%[[add_96]], %[[or_101]])
// CHECK-NEXT:  %[[add_103:[^ ]+]] = u32[] add(%[[add_96]], %[[xor_102]])
// CHECK-NEXT:  %[[constant_104:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[shift_left_105:[^ ]+]] = u32[] shift-left(%[[xor_102]], %[[constant_104]])
// CHECK-NEXT:  %[[constant_106:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[shift_right_logical_107:[^ ]+]] = u32[] shift-right-logical(%[[xor_102]], %[[constant_106]])
// CHECK-NEXT:  %[[or_108:[^ ]+]] = u32[] or(%[[shift_left_105]], %[[shift_right_logical_107]])
// CHECK-NEXT:  %[[xor_109:[^ ]+]] = u32[] xor(%[[add_103]], %[[or_108]])
// CHECK-NEXT:  %[[add_110:[^ ]+]] = u32[] add(%[[add_103]], %[[xor_109]])
// CHECK-NEXT:  %[[add_117:[^ ]+]] = u32[] add(%[[add_110]], %[[bitcast_convert_18]])
// CHECK-NEXT:  %[[constant_111:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[shift_left_112:[^ ]+]] = u32[] shift-left(%[[xor_109]], %[[constant_111]])
// CHECK-NEXT:  %[[constant_113:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[shift_right_logical_114:[^ ]+]] = u32[] shift-right-logical(%[[xor_109]], %[[constant_113]])
// CHECK-NEXT:  %[[or_115:[^ ]+]] = u32[] or(%[[shift_left_112]], %[[shift_right_logical_114]])
// CHECK-NEXT:  %[[xor_116:[^ ]+]] = u32[] xor(%[[add_110]], %[[or_115]])
// CHECK-NEXT:  %[[add_118:[^ ]+]] = u32[] add(%[[xor_116]], %[[bitcast_convert_19]])
// CHECK-NEXT:  %[[constant_119:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[add_120:[^ ]+]] = u32[] add(%[[add_118]], %[[constant_119]])
// CHECK-NEXT:  %[[add_121:[^ ]+]] = u32[] add(%[[add_117]], %[[add_120]])
// CHECK-NEXT:  %[[constant_122:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[shift_left_123:[^ ]+]] = u32[] shift-left(%[[add_120]], %[[constant_122]])
// CHECK-NEXT:  %[[constant_124:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[shift_right_logical_125:[^ ]+]] = u32[] shift-right-logical(%[[add_120]], %[[constant_124]])
// CHECK-NEXT:  %[[or_126:[^ ]+]] = u32[] or(%[[shift_left_123]], %[[shift_right_logical_125]])
// CHECK-NEXT:  %[[xor_127:[^ ]+]] = u32[] xor(%[[add_121]], %[[or_126]])
// CHECK-NEXT:  %[[add_128:[^ ]+]] = u32[] add(%[[add_121]], %[[xor_127]])
// CHECK-NEXT:  %[[constant_129:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[shift_left_130:[^ ]+]] = u32[] shift-left(%[[xor_127]], %[[constant_129]])
// CHECK-NEXT:  %[[constant_131:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[shift_right_logical_132:[^ ]+]] = u32[] shift-right-logical(%[[xor_127]], %[[constant_131]])
// CHECK-NEXT:  %[[or_133:[^ ]+]] = u32[] or(%[[shift_left_130]], %[[shift_right_logical_132]])
// CHECK-NEXT:  %[[xor_134:[^ ]+]] = u32[] xor(%[[add_128]], %[[or_133]])
// CHECK-NEXT:  %[[add_135:[^ ]+]] = u32[] add(%[[add_128]], %[[xor_134]])
// CHECK-NEXT:  %[[constant_136:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[shift_left_137:[^ ]+]] = u32[] shift-left(%[[xor_134]], %[[constant_136]])
// CHECK-NEXT:  %[[constant_138:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[shift_right_logical_139:[^ ]+]] = u32[] shift-right-logical(%[[xor_134]], %[[constant_138]])
// CHECK-NEXT:  %[[or_140:[^ ]+]] = u32[] or(%[[shift_left_137]], %[[shift_right_logical_139]])
// CHECK-NEXT:  %[[xor_141:[^ ]+]] = u32[] xor(%[[add_135]], %[[or_140]])
// CHECK-NEXT:  %[[add_142:[^ ]+]] = u32[] add(%[[add_135]], %[[xor_141]])
// CHECK-NEXT:  %[[add_149:[^ ]+]] = u32[] add(%[[add_142]], %[[bitcast_convert_19]])
// CHECK-NEXT:  %[[constant_143:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[shift_left_144:[^ ]+]] = u32[] shift-left(%[[xor_141]], %[[constant_143]])
// CHECK-NEXT:  %[[constant_145:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[shift_right_logical_146:[^ ]+]] = u32[] shift-right-logical(%[[xor_141]], %[[constant_145]])
// CHECK-NEXT:  %[[or_147:[^ ]+]] = u32[] or(%[[shift_left_144]], %[[shift_right_logical_146]])
// CHECK-NEXT:  %[[xor_148:[^ ]+]] = u32[] xor(%[[add_142]], %[[or_147]])
// CHECK-NEXT:  %[[add_150:[^ ]+]] = u32[] add(%[[xor_148]], %[[xor_22]])
// CHECK-NEXT:  %[[constant_151:[^ ]+]] = u32[] constant(4)
// CHECK-NEXT:  %[[add_152:[^ ]+]] = u32[] add(%[[add_150]], %[[constant_151]])
// CHECK-NEXT:  %[[add_153:[^ ]+]] = u32[] add(%[[add_149]], %[[add_152]])
// CHECK-NEXT:  %[[constant_154:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[shift_left_155:[^ ]+]] = u32[] shift-left(%[[add_152]], %[[constant_154]])
// CHECK-NEXT:  %[[constant_156:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[shift_right_logical_157:[^ ]+]] = u32[] shift-right-logical(%[[add_152]], %[[constant_156]])
// CHECK-NEXT:  %[[or_158:[^ ]+]] = u32[] or(%[[shift_left_155]], %[[shift_right_logical_157]])
// CHECK-NEXT:  %[[xor_159:[^ ]+]] = u32[] xor(%[[add_153]], %[[or_158]])
// CHECK-NEXT:  %[[add_160:[^ ]+]] = u32[] add(%[[add_153]], %[[xor_159]])
// CHECK-NEXT:  %[[constant_161:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[shift_left_162:[^ ]+]] = u32[] shift-left(%[[xor_159]], %[[constant_161]])
// CHECK-NEXT:  %[[constant_163:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[shift_right_logical_164:[^ ]+]] = u32[] shift-right-logical(%[[xor_159]], %[[constant_163]])
// CHECK-NEXT:  %[[or_165:[^ ]+]] = u32[] or(%[[shift_left_162]], %[[shift_right_logical_164]])
// CHECK-NEXT:  %[[xor_166:[^ ]+]] = u32[] xor(%[[add_160]], %[[or_165]])
// CHECK-NEXT:  %[[add_167:[^ ]+]] = u32[] add(%[[add_160]], %[[xor_166]])
// CHECK-NEXT:  %[[constant_168:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[shift_left_169:[^ ]+]] = u32[] shift-left(%[[xor_166]], %[[constant_168]])
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[shift_right_logical_171:[^ ]+]] = u32[] shift-right-logical(%[[xor_166]], %[[constant_170]])
// CHECK-NEXT:  %[[or_172:[^ ]+]] = u32[] or(%[[shift_left_169]], %[[shift_right_logical_171]])
// CHECK-NEXT:  %[[xor_173:[^ ]+]] = u32[] xor(%[[add_167]], %[[or_172]])
// CHECK-NEXT:  %[[add_174:[^ ]+]] = u32[] add(%[[add_167]], %[[xor_173]])
// CHECK-NEXT:  %[[add_181:[^ ]+]] = u32[] add(%[[add_174]], %[[xor_22]])
// CHECK-NEXT:  %[[convert_185:[^ ]+]] = u64[] convert(%[[add_181]])
// CHECK-NEXT:  %[[constant_175:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[shift_left_176:[^ ]+]] = u32[] shift-left(%[[xor_173]], %[[constant_175]])
// CHECK-NEXT:  %[[constant_177:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[shift_right_logical_178:[^ ]+]] = u32[] shift-right-logical(%[[xor_173]], %[[constant_177]])
// CHECK-NEXT:  %[[or_179:[^ ]+]] = u32[] or(%[[shift_left_176]], %[[shift_right_logical_178]])
// CHECK-NEXT:  %[[xor_180:[^ ]+]] = u32[] xor(%[[add_174]], %[[or_179]])
// CHECK-NEXT:  %[[add_182:[^ ]+]] = u32[] add(%[[xor_180]], %[[bitcast_convert_18]])
// CHECK-NEXT:  %[[constant_183:[^ ]+]] = u32[] constant(5)
// CHECK-NEXT:  %[[add_184:[^ ]+]] = u32[] add(%[[add_182]], %[[constant_183]])
// CHECK-NEXT:  %[[convert_186:[^ ]+]] = u64[] convert(%[[add_184]])
// CHECK-NEXT:  %[[constant_187:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_left_188:[^ ]+]] = u64[] shift-left(%[[convert_186]], %[[constant_187]])
// CHECK-NEXT:  %[[or_189:[^ ]+]] = u64[] or(%[[convert_185]], %[[shift_left_188]])
// CHECK-NEXT:  ROOT %[[tuple_192:[^ ]+]] = (u64[2]{0}, u64[]) tuple(%[[concatenate_191]], %[[or_189]])

// CHECK-LABEL: ENTRY %test_three_fry_u64
// CHECK-NEXT:  %[[initial_state:[^ ]+]] = u64[4]{0} constant({9, 10, 11, 12})
// CHECK-NEXT:  ROOT %[[call:[^ ]+]] = (u64[4]{0}, u64[]) call(%[[initial_state]]), to_apply=%[[$rng_193]]

HloModule TestThreeFryAlgorithm

ENTRY test_three_fry_u64 {
  initial_state = u64[4] constant({9, 10, 11, 12})
  ROOT result = (u64[4], u64[]) rng-bit-generator(initial_state), algorithm=rng_three_fry
}

// -----

// CHECK-LABEL: HloModule TestThreeFryAlgorithm, entry_computation_layout={()->(u64[4]{0}, u8[])}

// CHECK:       %[[$rng_248:[^ ]+]]
// CHECK-NEXT:  %[[state_1:[^ ]+]] = u64[4]{0} parameter(0)
// CHECK-NEXT:  %[[slice_4:[^ ]+]] = u64[1]{0} slice(%[[state_1]]), slice={[1:2]}
// CHECK-NEXT:  %[[reshape_5:[^ ]+]] = u64[] reshape(%[[slice_4]])
// CHECK-NEXT:  %[[broadcast_6:[^ ]+]] = u64[1]{0} broadcast(%[[reshape_5]]), dimensions={}
// CHECK-NEXT:  %[[convert_11:[^ ]+]] = u32[1]{0} convert(%[[broadcast_6]])
// CHECK-NEXT:  %[[slice_2:[^ ]+]] = u64[1]{0} slice(%[[state_1]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_3:[^ ]+]] = u64[] reshape(%[[slice_2]])
// CHECK-NEXT:  %[[convert_16:[^ ]+]] = u32[] convert(%[[reshape_3]])
// CHECK-NEXT:  %[[bitcast_convert_19:[^ ]+]] = u32[] bitcast-convert(%[[convert_16]])
// CHECK-NEXT:  %[[broadcast_24:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_25:[^ ]+]] = u32[1]{0} add(%[[convert_11]], %[[broadcast_24]])
// CHECK-NEXT:  %[[constant_10:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_12:[^ ]+]] = u64[1]{0} broadcast(%[[constant_10]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_13:[^ ]+]] = u64[1]{0} shift-right-logical(%[[broadcast_6]], %[[broadcast_12]])
// CHECK-NEXT:  %[[convert_14:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_13]])
// CHECK-NEXT:  %[[constant_15:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_17:[^ ]+]] = u64[] shift-right-logical(%[[reshape_3]], %[[constant_15]])
// CHECK-NEXT:  %[[convert_18:[^ ]+]] = u32[] convert(%[[shift_right_logical_17]])
// CHECK-NEXT:  %[[bitcast_convert_20:[^ ]+]] = u32[] bitcast-convert(%[[convert_18]])
// CHECK-NEXT:  %[[broadcast_26:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_27:[^ ]+]] = u32[1]{0} add(%[[convert_14]], %[[broadcast_26]])
// CHECK-NEXT:  %[[add_28:[^ ]+]] = u32[1]{0} add(%[[add_25]], %[[add_27]])
// CHECK-NEXT:  %[[constant_29:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_30:[^ ]+]] = u32[1]{0} broadcast(%[[constant_29]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_31:[^ ]+]] = u32[1]{0} shift-left(%[[add_27]], %[[broadcast_30]])
// CHECK-NEXT:  %[[constant_32:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_33:[^ ]+]] = u32[1]{0} broadcast(%[[constant_32]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_34:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_27]], %[[broadcast_33]])
// CHECK-NEXT:  %[[or_35:[^ ]+]] = u32[1]{0} or(%[[shift_left_31]], %[[shift_right_logical_34]])
// CHECK-NEXT:  %[[xor_36:[^ ]+]] = u32[1]{0} xor(%[[add_28]], %[[or_35]])
// CHECK-NEXT:  %[[add_37:[^ ]+]] = u32[1]{0} add(%[[add_28]], %[[xor_36]])
// CHECK-NEXT:  %[[constant_38:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_39:[^ ]+]] = u32[1]{0} broadcast(%[[constant_38]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_40:[^ ]+]] = u32[1]{0} shift-left(%[[xor_36]], %[[broadcast_39]])
// CHECK-NEXT:  %[[constant_41:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_42:[^ ]+]] = u32[1]{0} broadcast(%[[constant_41]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_43:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_36]], %[[broadcast_42]])
// CHECK-NEXT:  %[[or_44:[^ ]+]] = u32[1]{0} or(%[[shift_left_40]], %[[shift_right_logical_43]])
// CHECK-NEXT:  %[[xor_45:[^ ]+]] = u32[1]{0} xor(%[[add_37]], %[[or_44]])
// CHECK-NEXT:  %[[add_46:[^ ]+]] = u32[1]{0} add(%[[add_37]], %[[xor_45]])
// CHECK-NEXT:  %[[constant_47:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_48:[^ ]+]] = u32[1]{0} broadcast(%[[constant_47]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_49:[^ ]+]] = u32[1]{0} shift-left(%[[xor_45]], %[[broadcast_48]])
// CHECK-NEXT:  %[[constant_50:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_51:[^ ]+]] = u32[1]{0} broadcast(%[[constant_50]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_52:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_45]], %[[broadcast_51]])
// CHECK-NEXT:  %[[or_53:[^ ]+]] = u32[1]{0} or(%[[shift_left_49]], %[[shift_right_logical_52]])
// CHECK-NEXT:  %[[xor_54:[^ ]+]] = u32[1]{0} xor(%[[add_46]], %[[or_53]])
// CHECK-NEXT:  %[[add_55:[^ ]+]] = u32[1]{0} add(%[[add_46]], %[[xor_54]])
// CHECK-NEXT:  %[[broadcast_64:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_65:[^ ]+]] = u32[1]{0} add(%[[add_55]], %[[broadcast_64]])
// CHECK-NEXT:  %[[constant_56:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_57:[^ ]+]] = u32[1]{0} broadcast(%[[constant_56]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_58:[^ ]+]] = u32[1]{0} shift-left(%[[xor_54]], %[[broadcast_57]])
// CHECK-NEXT:  %[[constant_59:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_60:[^ ]+]] = u32[1]{0} broadcast(%[[constant_59]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_61:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_54]], %[[broadcast_60]])
// CHECK-NEXT:  %[[or_62:[^ ]+]] = u32[1]{0} or(%[[shift_left_58]], %[[shift_right_logical_61]])
// CHECK-NEXT:  %[[xor_63:[^ ]+]] = u32[1]{0} xor(%[[add_55]], %[[or_62]])
// CHECK-NEXT:  %[[constant_21:[^ ]+]] = u32[] constant(466688986)
// CHECK-NEXT:  %[[xor_22:[^ ]+]] = u32[] xor(%[[constant_21]], %[[bitcast_convert_19]])
// CHECK-NEXT:  %[[xor_23:[^ ]+]] = u32[] xor(%[[xor_22]], %[[bitcast_convert_20]])
// CHECK-NEXT:  %[[broadcast_66:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_67:[^ ]+]] = u32[1]{0} add(%[[xor_63]], %[[broadcast_66]])
// CHECK-NEXT:  %[[constant_68:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[broadcast_69:[^ ]+]] = u32[1]{0} broadcast(%[[constant_68]]), dimensions={}
// CHECK-NEXT:  %[[add_70:[^ ]+]] = u32[1]{0} add(%[[add_67]], %[[broadcast_69]])
// CHECK-NEXT:  %[[add_71:[^ ]+]] = u32[1]{0} add(%[[add_65]], %[[add_70]])
// CHECK-NEXT:  %[[constant_72:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_73:[^ ]+]] = u32[1]{0} broadcast(%[[constant_72]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_74:[^ ]+]] = u32[1]{0} shift-left(%[[add_70]], %[[broadcast_73]])
// CHECK-NEXT:  %[[constant_75:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_76:[^ ]+]] = u32[1]{0} broadcast(%[[constant_75]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_77:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_70]], %[[broadcast_76]])
// CHECK-NEXT:  %[[or_78:[^ ]+]] = u32[1]{0} or(%[[shift_left_74]], %[[shift_right_logical_77]])
// CHECK-NEXT:  %[[xor_79:[^ ]+]] = u32[1]{0} xor(%[[add_71]], %[[or_78]])
// CHECK-NEXT:  %[[add_80:[^ ]+]] = u32[1]{0} add(%[[add_71]], %[[xor_79]])
// CHECK-NEXT:  %[[constant_81:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[broadcast_82:[^ ]+]] = u32[1]{0} broadcast(%[[constant_81]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_83:[^ ]+]] = u32[1]{0} shift-left(%[[xor_79]], %[[broadcast_82]])
// CHECK-NEXT:  %[[constant_84:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_85:[^ ]+]] = u32[1]{0} broadcast(%[[constant_84]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_86:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_79]], %[[broadcast_85]])
// CHECK-NEXT:  %[[or_87:[^ ]+]] = u32[1]{0} or(%[[shift_left_83]], %[[shift_right_logical_86]])
// CHECK-NEXT:  %[[xor_88:[^ ]+]] = u32[1]{0} xor(%[[add_80]], %[[or_87]])
// CHECK-NEXT:  %[[add_89:[^ ]+]] = u32[1]{0} add(%[[add_80]], %[[xor_88]])
// CHECK-NEXT:  %[[constant_90:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_91:[^ ]+]] = u32[1]{0} broadcast(%[[constant_90]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_92:[^ ]+]] = u32[1]{0} shift-left(%[[xor_88]], %[[broadcast_91]])
// CHECK-NEXT:  %[[constant_93:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_94:[^ ]+]] = u32[1]{0} broadcast(%[[constant_93]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_95:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_88]], %[[broadcast_94]])
// CHECK-NEXT:  %[[or_96:[^ ]+]] = u32[1]{0} or(%[[shift_left_92]], %[[shift_right_logical_95]])
// CHECK-NEXT:  %[[xor_97:[^ ]+]] = u32[1]{0} xor(%[[add_89]], %[[or_96]])
// CHECK-NEXT:  %[[add_98:[^ ]+]] = u32[1]{0} add(%[[add_89]], %[[xor_97]])
// CHECK-NEXT:  %[[broadcast_107:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_108:[^ ]+]] = u32[1]{0} add(%[[add_98]], %[[broadcast_107]])
// CHECK-NEXT:  %[[constant_99:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[broadcast_100:[^ ]+]] = u32[1]{0} broadcast(%[[constant_99]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_101:[^ ]+]] = u32[1]{0} shift-left(%[[xor_97]], %[[broadcast_100]])
// CHECK-NEXT:  %[[constant_102:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[broadcast_103:[^ ]+]] = u32[1]{0} broadcast(%[[constant_102]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_104:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_97]], %[[broadcast_103]])
// CHECK-NEXT:  %[[or_105:[^ ]+]] = u32[1]{0} or(%[[shift_left_101]], %[[shift_right_logical_104]])
// CHECK-NEXT:  %[[xor_106:[^ ]+]] = u32[1]{0} xor(%[[add_98]], %[[or_105]])
// CHECK-NEXT:  %[[broadcast_109:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_110:[^ ]+]] = u32[1]{0} add(%[[xor_106]], %[[broadcast_109]])
// CHECK-NEXT:  %[[constant_111:[^ ]+]] = u32[] constant(2)
// CHECK-NEXT:  %[[broadcast_112:[^ ]+]] = u32[1]{0} broadcast(%[[constant_111]]), dimensions={}
// CHECK-NEXT:  %[[add_113:[^ ]+]] = u32[1]{0} add(%[[add_110]], %[[broadcast_112]])
// CHECK-NEXT:  %[[add_114:[^ ]+]] = u32[1]{0} add(%[[add_108]], %[[add_113]])
// CHECK-NEXT:  %[[constant_115:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_116:[^ ]+]] = u32[1]{0} broadcast(%[[constant_115]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_117:[^ ]+]] = u32[1]{0} shift-left(%[[add_113]], %[[broadcast_116]])
// CHECK-NEXT:  %[[constant_118:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_119:[^ ]+]] = u32[1]{0} broadcast(%[[constant_118]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_120:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_113]], %[[broadcast_119]])
// CHECK-NEXT:  %[[or_121:[^ ]+]] = u32[1]{0} or(%[[shift_left_117]], %[[shift_right_logical_120]])
// CHECK-NEXT:  %[[xor_122:[^ ]+]] = u32[1]{0} xor(%[[add_114]], %[[or_121]])
// CHECK-NEXT:  %[[add_123:[^ ]+]] = u32[1]{0} add(%[[add_114]], %[[xor_122]])
// CHECK-NEXT:  %[[constant_124:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_125:[^ ]+]] = u32[1]{0} broadcast(%[[constant_124]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_126:[^ ]+]] = u32[1]{0} shift-left(%[[xor_122]], %[[broadcast_125]])
// CHECK-NEXT:  %[[constant_127:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_128:[^ ]+]] = u32[1]{0} broadcast(%[[constant_127]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_129:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_122]], %[[broadcast_128]])
// CHECK-NEXT:  %[[or_130:[^ ]+]] = u32[1]{0} or(%[[shift_left_126]], %[[shift_right_logical_129]])
// CHECK-NEXT:  %[[xor_131:[^ ]+]] = u32[1]{0} xor(%[[add_123]], %[[or_130]])
// CHECK-NEXT:  %[[add_132:[^ ]+]] = u32[1]{0} add(%[[add_123]], %[[xor_131]])
// CHECK-NEXT:  %[[constant_133:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_134:[^ ]+]] = u32[1]{0} broadcast(%[[constant_133]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_135:[^ ]+]] = u32[1]{0} shift-left(%[[xor_131]], %[[broadcast_134]])
// CHECK-NEXT:  %[[constant_136:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_137:[^ ]+]] = u32[1]{0} broadcast(%[[constant_136]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_138:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_131]], %[[broadcast_137]])
// CHECK-NEXT:  %[[or_139:[^ ]+]] = u32[1]{0} or(%[[shift_left_135]], %[[shift_right_logical_138]])
// CHECK-NEXT:  %[[xor_140:[^ ]+]] = u32[1]{0} xor(%[[add_132]], %[[or_139]])
// CHECK-NEXT:  %[[add_141:[^ ]+]] = u32[1]{0} add(%[[add_132]], %[[xor_140]])
// CHECK-NEXT:  %[[broadcast_150:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_151:[^ ]+]] = u32[1]{0} add(%[[add_141]], %[[broadcast_150]])
// CHECK-NEXT:  %[[constant_142:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_143:[^ ]+]] = u32[1]{0} broadcast(%[[constant_142]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_144:[^ ]+]] = u32[1]{0} shift-left(%[[xor_140]], %[[broadcast_143]])
// CHECK-NEXT:  %[[constant_145:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_146:[^ ]+]] = u32[1]{0} broadcast(%[[constant_145]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_147:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_140]], %[[broadcast_146]])
// CHECK-NEXT:  %[[or_148:[^ ]+]] = u32[1]{0} or(%[[shift_left_144]], %[[shift_right_logical_147]])
// CHECK-NEXT:  %[[xor_149:[^ ]+]] = u32[1]{0} xor(%[[add_141]], %[[or_148]])
// CHECK-NEXT:  %[[broadcast_152:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_153:[^ ]+]] = u32[1]{0} add(%[[xor_149]], %[[broadcast_152]])
// CHECK-NEXT:  %[[constant_154:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_155:[^ ]+]] = u32[1]{0} broadcast(%[[constant_154]]), dimensions={}
// CHECK-NEXT:  %[[add_156:[^ ]+]] = u32[1]{0} add(%[[add_153]], %[[broadcast_155]])
// CHECK-NEXT:  %[[add_157:[^ ]+]] = u32[1]{0} add(%[[add_151]], %[[add_156]])
// CHECK-NEXT:  %[[constant_158:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_159:[^ ]+]] = u32[1]{0} broadcast(%[[constant_158]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_160:[^ ]+]] = u32[1]{0} shift-left(%[[add_156]], %[[broadcast_159]])
// CHECK-NEXT:  %[[constant_161:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_162:[^ ]+]] = u32[1]{0} broadcast(%[[constant_161]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_163:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_156]], %[[broadcast_162]])
// CHECK-NEXT:  %[[or_164:[^ ]+]] = u32[1]{0} or(%[[shift_left_160]], %[[shift_right_logical_163]])
// CHECK-NEXT:  %[[xor_165:[^ ]+]] = u32[1]{0} xor(%[[add_157]], %[[or_164]])
// CHECK-NEXT:  %[[add_166:[^ ]+]] = u32[1]{0} add(%[[add_157]], %[[xor_165]])
// CHECK-NEXT:  %[[constant_167:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[broadcast_168:[^ ]+]] = u32[1]{0} broadcast(%[[constant_167]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_169:[^ ]+]] = u32[1]{0} shift-left(%[[xor_165]], %[[broadcast_168]])
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_171:[^ ]+]] = u32[1]{0} broadcast(%[[constant_170]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_172:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_165]], %[[broadcast_171]])
// CHECK-NEXT:  %[[or_173:[^ ]+]] = u32[1]{0} or(%[[shift_left_169]], %[[shift_right_logical_172]])
// CHECK-NEXT:  %[[xor_174:[^ ]+]] = u32[1]{0} xor(%[[add_166]], %[[or_173]])
// CHECK-NEXT:  %[[add_175:[^ ]+]] = u32[1]{0} add(%[[add_166]], %[[xor_174]])
// CHECK-NEXT:  %[[constant_176:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_177:[^ ]+]] = u32[1]{0} broadcast(%[[constant_176]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_178:[^ ]+]] = u32[1]{0} shift-left(%[[xor_174]], %[[broadcast_177]])
// CHECK-NEXT:  %[[constant_179:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_180:[^ ]+]] = u32[1]{0} broadcast(%[[constant_179]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_181:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_174]], %[[broadcast_180]])
// CHECK-NEXT:  %[[or_182:[^ ]+]] = u32[1]{0} or(%[[shift_left_178]], %[[shift_right_logical_181]])
// CHECK-NEXT:  %[[xor_183:[^ ]+]] = u32[1]{0} xor(%[[add_175]], %[[or_182]])
// CHECK-NEXT:  %[[add_184:[^ ]+]] = u32[1]{0} add(%[[add_175]], %[[xor_183]])
// CHECK-NEXT:  %[[broadcast_193:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_194:[^ ]+]] = u32[1]{0} add(%[[add_184]], %[[broadcast_193]])
// CHECK-NEXT:  %[[constant_185:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[broadcast_186:[^ ]+]] = u32[1]{0} broadcast(%[[constant_185]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_187:[^ ]+]] = u32[1]{0} shift-left(%[[xor_183]], %[[broadcast_186]])
// CHECK-NEXT:  %[[constant_188:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[broadcast_189:[^ ]+]] = u32[1]{0} broadcast(%[[constant_188]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_190:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_183]], %[[broadcast_189]])
// CHECK-NEXT:  %[[or_191:[^ ]+]] = u32[1]{0} or(%[[shift_left_187]], %[[shift_right_logical_190]])
// CHECK-NEXT:  %[[xor_192:[^ ]+]] = u32[1]{0} xor(%[[add_184]], %[[or_191]])
// CHECK-NEXT:  %[[broadcast_195:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_196:[^ ]+]] = u32[1]{0} add(%[[xor_192]], %[[broadcast_195]])
// CHECK-NEXT:  %[[constant_197:[^ ]+]] = u32[] constant(4)
// CHECK-NEXT:  %[[broadcast_198:[^ ]+]] = u32[1]{0} broadcast(%[[constant_197]]), dimensions={}
// CHECK-NEXT:  %[[add_199:[^ ]+]] = u32[1]{0} add(%[[add_196]], %[[broadcast_198]])
// CHECK-NEXT:  %[[add_200:[^ ]+]] = u32[1]{0} add(%[[add_194]], %[[add_199]])
// CHECK-NEXT:  %[[constant_201:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_202:[^ ]+]] = u32[1]{0} broadcast(%[[constant_201]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_203:[^ ]+]] = u32[1]{0} shift-left(%[[add_199]], %[[broadcast_202]])
// CHECK-NEXT:  %[[constant_204:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_205:[^ ]+]] = u32[1]{0} broadcast(%[[constant_204]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_206:[^ ]+]] = u32[1]{0} shift-right-logical(%[[add_199]], %[[broadcast_205]])
// CHECK-NEXT:  %[[or_207:[^ ]+]] = u32[1]{0} or(%[[shift_left_203]], %[[shift_right_logical_206]])
// CHECK-NEXT:  %[[xor_208:[^ ]+]] = u32[1]{0} xor(%[[add_200]], %[[or_207]])
// CHECK-NEXT:  %[[add_209:[^ ]+]] = u32[1]{0} add(%[[add_200]], %[[xor_208]])
// CHECK-NEXT:  %[[constant_210:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_211:[^ ]+]] = u32[1]{0} broadcast(%[[constant_210]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_212:[^ ]+]] = u32[1]{0} shift-left(%[[xor_208]], %[[broadcast_211]])
// CHECK-NEXT:  %[[constant_213:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_214:[^ ]+]] = u32[1]{0} broadcast(%[[constant_213]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_215:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_208]], %[[broadcast_214]])
// CHECK-NEXT:  %[[or_216:[^ ]+]] = u32[1]{0} or(%[[shift_left_212]], %[[shift_right_logical_215]])
// CHECK-NEXT:  %[[xor_217:[^ ]+]] = u32[1]{0} xor(%[[add_209]], %[[or_216]])
// CHECK-NEXT:  %[[add_218:[^ ]+]] = u32[1]{0} add(%[[add_209]], %[[xor_217]])
// CHECK-NEXT:  %[[constant_219:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_220:[^ ]+]] = u32[1]{0} broadcast(%[[constant_219]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_221:[^ ]+]] = u32[1]{0} shift-left(%[[xor_217]], %[[broadcast_220]])
// CHECK-NEXT:  %[[constant_222:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_223:[^ ]+]] = u32[1]{0} broadcast(%[[constant_222]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_224:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_217]], %[[broadcast_223]])
// CHECK-NEXT:  %[[or_225:[^ ]+]] = u32[1]{0} or(%[[shift_left_221]], %[[shift_right_logical_224]])
// CHECK-NEXT:  %[[xor_226:[^ ]+]] = u32[1]{0} xor(%[[add_218]], %[[or_225]])
// CHECK-NEXT:  %[[add_227:[^ ]+]] = u32[1]{0} add(%[[add_218]], %[[xor_226]])
// CHECK-NEXT:  %[[constant_228:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_229:[^ ]+]] = u32[1]{0} broadcast(%[[constant_228]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_230:[^ ]+]] = u32[1]{0} shift-left(%[[xor_226]], %[[broadcast_229]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_232:[^ ]+]] = u32[1]{0} broadcast(%[[constant_231]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_233:[^ ]+]] = u32[1]{0} shift-right-logical(%[[xor_226]], %[[broadcast_232]])
// CHECK-NEXT:  %[[or_234:[^ ]+]] = u32[1]{0} or(%[[shift_left_230]], %[[shift_right_logical_233]])
// CHECK-NEXT:  %[[xor_235:[^ ]+]] = u32[1]{0} xor(%[[add_227]], %[[or_234]])
// CHECK-NEXT:  %[[broadcast_238:[^ ]+]] = u32[1]{0} broadcast(%[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_239:[^ ]+]] = u32[1]{0} add(%[[xor_235]], %[[broadcast_238]])
// CHECK-NEXT:  %[[constant_240:[^ ]+]] = u32[] constant(5)
// CHECK-NEXT:  %[[broadcast_241:[^ ]+]] = u32[1]{0} broadcast(%[[constant_240]]), dimensions={}
// CHECK-NEXT:  %[[add_242:[^ ]+]] = u32[1]{0} add(%[[add_239]], %[[broadcast_241]])
// CHECK-NEXT:  %[[reshape_245:[^ ]+]] = u64[1]{0} reshape(%[[reshape_3]])
// CHECK-NEXT:  %[[constant_7:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[broadcast_8:[^ ]+]] = u64[1]{0} broadcast(%[[constant_7]]), dimensions={}
// CHECK-NEXT:  %[[add_9:[^ ]+]] = u64[1]{0} add(%[[slice_4]], %[[broadcast_8]])
// CHECK-NEXT:  %[[concatenate_246:[^ ]+]] = u64[2]{0} concatenate(%[[reshape_245]], %[[add_9]]), dimensions={0}
// CHECK-NEXT:  %[[broadcast_236:[^ ]+]] = u32[1]{0} broadcast(%[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_237:[^ ]+]] = u32[1]{0} add(%[[add_227]], %[[broadcast_236]])
// CHECK-NEXT:  %[[reshape_243:[^ ]+]] = u32[] reshape(%[[add_237]])
// CHECK-NEXT:  %[[convert_244:[^ ]+]] = u8[] convert(%[[reshape_243]])
// CHECK-NEXT:  ROOT %[[tuple_247:[^ ]+]] = (u64[2]{0}, u8[]) tuple(%[[concatenate_246]], %[[convert_244]])

// CHECK-LABEL: ENTRY %test_three_fry_u8
// CHECK-NEXT:  %[[initial_state:[^ ]+]] = u64[4]{0} constant({9, 10, 11, 12})
// CHECK-NEXT:  ROOT %[[call:[^ ]+]] = (u64[4]{0}, u8[]) call(%[[initial_state]]), to_apply=%[[$rng_248]]

HloModule TestThreeFryAlgorithm

ENTRY test_three_fry_u8 {
  initial_state = u64[4] constant({9, 10, 11, 12})
  ROOT result = (u64[4], u8[]) rng-bit-generator(initial_state), algorithm=rng_three_fry
}

// -----

// CHECK-LABEL: HloModule TestPhiloxAlgorithm, entry_computation_layout={()->(u64[6]{0}, u32[])}

// CHECK:       %[[$rng_353:[^ ]+]]
// CHECK-NEXT:  %[[state_1:[^ ]+]] = u64[6]{0} parameter(0)
// CHECK-NEXT:  %[[slice_2:[^ ]+]] = u64[1]{0} slice(%[[state_1]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_3:[^ ]+]] = u64[] reshape(%[[slice_2]])
// CHECK-NEXT:  %[[convert_6:[^ ]+]] = u32[] convert(%[[reshape_3]])
// CHECK-NEXT:  %[[constant_86:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_87:[^ ]+]] = u32[] add(%[[convert_6]], %[[constant_86]])
// CHECK-NEXT:  %[[constant_114:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_115:[^ ]+]] = u32[] add(%[[add_87]], %[[constant_114]])
// CHECK-NEXT:  %[[constant_142:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_143:[^ ]+]] = u32[] add(%[[add_115]], %[[constant_142]])
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_171:[^ ]+]] = u32[] add(%[[add_143]], %[[constant_170]])
// CHECK-NEXT:  %[[constant_198:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_199:[^ ]+]] = u32[] add(%[[add_171]], %[[constant_198]])
// CHECK-NEXT:  %[[constant_226:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_227:[^ ]+]] = u32[] add(%[[add_199]], %[[constant_226]])
// CHECK-NEXT:  %[[constant_254:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_255:[^ ]+]] = u32[] add(%[[add_227]], %[[constant_254]])
// CHECK-NEXT:  %[[constant_282:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_283:[^ ]+]] = u32[] add(%[[add_255]], %[[constant_282]])
// CHECK-NEXT:  %[[constant_310:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_311:[^ ]+]] = u32[] add(%[[add_283]], %[[constant_310]])
// CHECK-NEXT:  %[[constant_338:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_339:[^ ]+]] = u32[] add(%[[add_311]], %[[constant_338]])
// CHECK-NEXT:  %[[constant_5:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_7:[^ ]+]] = u64[] shift-right-logical(%[[reshape_3]], %[[constant_5]])
// CHECK-NEXT:  %[[convert_8:[^ ]+]] = u32[] convert(%[[shift_right_logical_7]])
// CHECK-NEXT:  %[[constant_88:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_89:[^ ]+]] = u32[] add(%[[convert_8]], %[[constant_88]])
// CHECK-NEXT:  %[[constant_116:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_117:[^ ]+]] = u32[] add(%[[add_89]], %[[constant_116]])
// CHECK-NEXT:  %[[constant_144:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_145:[^ ]+]] = u32[] add(%[[add_117]], %[[constant_144]])
// CHECK-NEXT:  %[[constant_172:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_173:[^ ]+]] = u32[] add(%[[add_145]], %[[constant_172]])
// CHECK-NEXT:  %[[constant_200:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_201:[^ ]+]] = u32[] add(%[[add_173]], %[[constant_200]])
// CHECK-NEXT:  %[[constant_228:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_229:[^ ]+]] = u32[] add(%[[add_201]], %[[constant_228]])
// CHECK-NEXT:  %[[constant_256:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_257:[^ ]+]] = u32[] add(%[[add_229]], %[[constant_256]])
// CHECK-NEXT:  %[[constant_284:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_285:[^ ]+]] = u32[] add(%[[add_257]], %[[constant_284]])
// CHECK-NEXT:  %[[constant_312:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_313:[^ ]+]] = u32[] add(%[[add_285]], %[[constant_312]])
// CHECK-NEXT:  %[[constant_340:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_341:[^ ]+]] = u32[] add(%[[add_313]], %[[constant_340]])
// CHECK-NEXT:  %[[reshape_350:[^ ]+]] = u64[1]{0} reshape(%[[reshape_3]])
// CHECK-NEXT:  %[[slice_4:[^ ]+]] = u64[2]{0} slice(%[[state_1]]), slice={[1:3]}
// CHECK-NEXT:  %[[slice_9:[^ ]+]] = u64[1]{0} slice(%[[slice_4]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_10:[^ ]+]] = u64[] reshape(%[[slice_9]])
// CHECK-NEXT:  %[[convert_14:[^ ]+]] = u32[] convert(%[[reshape_10]])
// CHECK-NEXT:  %[[convert_22:[^ ]+]] = u64[] convert(%[[convert_14]])
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_15:[^ ]+]] = u64[] shift-right-logical(%[[reshape_10]], %[[constant_13]])
// CHECK-NEXT:  %[[convert_16:[^ ]+]] = u32[] convert(%[[shift_right_logical_15]])
// CHECK-NEXT:  %[[convert_23:[^ ]+]] = u64[] convert(%[[convert_16]])
// CHECK-NEXT:  %[[constant_24:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_left_25:[^ ]+]] = u64[] shift-left(%[[convert_23]], %[[constant_24]])
// CHECK-NEXT:  %[[or_26:[^ ]+]] = u64[] or(%[[convert_22]], %[[shift_left_25]])
// CHECK-NEXT:  %[[constant_51:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_52:[^ ]+]] = u64[] add(%[[or_26]], %[[constant_51]])
// CHECK-NEXT:  %[[reshape_59:[^ ]+]] = u64[1]{0} reshape(%[[add_52]])
// CHECK-NEXT:  %[[compare_54:[^ ]+]] = pred[] compare(%[[add_52]], %[[or_26]]), direction=LT
// CHECK-NEXT:  %[[slice_11:[^ ]+]] = u64[1]{0} slice(%[[slice_4]]), slice={[1:2]}
// CHECK-NEXT:  %[[reshape_12:[^ ]+]] = u64[] reshape(%[[slice_11]])
// CHECK-NEXT:  %[[convert_18:[^ ]+]] = u32[] convert(%[[reshape_12]])
// CHECK-NEXT:  %[[convert_27:[^ ]+]] = u64[] convert(%[[convert_18]])
// CHECK-NEXT:  %[[constant_17:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_19:[^ ]+]] = u64[] shift-right-logical(%[[reshape_12]], %[[constant_17]])
// CHECK-NEXT:  %[[convert_20:[^ ]+]] = u32[] convert(%[[shift_right_logical_19]])
// CHECK-NEXT:  %[[convert_28:[^ ]+]] = u64[] convert(%[[convert_20]])
// CHECK-NEXT:  %[[constant_29:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_left_30:[^ ]+]] = u64[] shift-left(%[[convert_28]], %[[constant_29]])
// CHECK-NEXT:  %[[or_31:[^ ]+]] = u64[] or(%[[convert_27]], %[[shift_left_30]])
// CHECK-NEXT:  %[[constant_53:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_55:[^ ]+]] = u64[] add(%[[or_31]], %[[constant_53]])
// CHECK-NEXT:  %[[broadcast_56:[^ ]+]] = u64[] broadcast(%[[add_55]]), dimensions={}
// CHECK-NEXT:  %[[broadcast_57:[^ ]+]] = u64[] broadcast(%[[or_31]]), dimensions={}
// CHECK-NEXT:  %[[select_58:[^ ]+]] = u64[] select(%[[compare_54]], %[[broadcast_56]], %[[broadcast_57]])
// CHECK-NEXT:  %[[reshape_60:[^ ]+]] = u64[1]{0} reshape(%[[select_58]])
// CHECK-NEXT:  %[[concatenate_61:[^ ]+]] = u64[2]{0} concatenate(%[[reshape_59]], %[[reshape_60]]), dimensions={0}
// CHECK-NEXT:  %[[concatenate_351:[^ ]+]] = u64[3]{0} concatenate(%[[reshape_350]], %[[concatenate_61]]), dimensions={0}
// CHECK-NEXT:  %[[broadcast_32:[^ ]+]] = u64[1]{0} broadcast(%[[or_26]]), dimensions={}
// CHECK-NEXT:  %[[iota_21:[^ ]+]] = u64[1]{0} iota(), iota_dimension=0
// CHECK-NEXT:  %[[add_33:[^ ]+]] = u64[1]{0} add(%[[broadcast_32]], %[[iota_21]])
// CHECK-NEXT:  %[[convert_42:[^ ]+]] = u32[1]{0} convert(%[[add_33]])
// CHECK-NEXT:  %[[convert_62:[^ ]+]] = u64[1]{0} convert(%[[convert_42]])
// CHECK-NEXT:  %[[constant_63:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_64:[^ ]+]] = u64[1]{0} broadcast(%[[constant_63]]), dimensions={}
// CHECK-NEXT:  %[[multiply_65:[^ ]+]] = u64[1]{0} multiply(%[[convert_62]], %[[broadcast_64]])
// CHECK-NEXT:  %[[constant_67:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_68:[^ ]+]] = u64[1]{0} broadcast(%[[constant_67]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_69:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_65]], %[[broadcast_68]])
// CHECK-NEXT:  %[[convert_70:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_69]])
// CHECK-NEXT:  %[[broadcast_35:[^ ]+]] = u64[1]{0} broadcast(%[[or_26]]), dimensions={}
// CHECK-NEXT:  %[[compare_36:[^ ]+]] = pred[1]{0} compare(%[[add_33]], %[[broadcast_35]]), direction=LT
// CHECK-NEXT:  %[[constant_34:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_37:[^ ]+]] = u64[] add(%[[or_31]], %[[constant_34]])
// CHECK-NEXT:  %[[broadcast_38:[^ ]+]] = u64[1]{0} broadcast(%[[add_37]]), dimensions={}
// CHECK-NEXT:  %[[broadcast_39:[^ ]+]] = u64[1]{0} broadcast(%[[or_31]]), dimensions={}
// CHECK-NEXT:  %[[select_40:[^ ]+]] = u64[1]{0} select(%[[compare_36]], %[[broadcast_38]], %[[broadcast_39]])
// CHECK-NEXT:  %[[constant_46:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_48:[^ ]+]] = u64[1]{0} broadcast(%[[constant_46]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_49:[^ ]+]] = u64[1]{0} shift-right-logical(%[[select_40]], %[[broadcast_48]])
// CHECK-NEXT:  %[[convert_50:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_49]])
// CHECK-NEXT:  %[[xor_83:[^ ]+]] = u32[1]{0} xor(%[[convert_70]], %[[convert_50]])
// CHECK-NEXT:  %[[broadcast_84:[^ ]+]] = u32[1]{0} broadcast(%[[convert_8]]), dimensions={}
// CHECK-NEXT:  %[[xor_85:[^ ]+]] = u32[1]{0} xor(%[[xor_83]], %[[broadcast_84]])
// CHECK-NEXT:  %[[convert_99:[^ ]+]] = u64[1]{0} convert(%[[xor_85]])
// CHECK-NEXT:  %[[constant_100:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_101:[^ ]+]] = u64[1]{0} broadcast(%[[constant_100]]), dimensions={}
// CHECK-NEXT:  %[[multiply_102:[^ ]+]] = u64[1]{0} multiply(%[[convert_99]], %[[broadcast_101]])
// CHECK-NEXT:  %[[constant_104:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_105:[^ ]+]] = u64[1]{0} broadcast(%[[constant_104]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_106:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_102]], %[[broadcast_105]])
// CHECK-NEXT:  %[[convert_107:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_106]])
// CHECK-NEXT:  %[[convert_47:[^ ]+]] = u32[1]{0} convert(%[[select_40]])
// CHECK-NEXT:  %[[convert_71:[^ ]+]] = u64[1]{0} convert(%[[convert_47]])
// CHECK-NEXT:  %[[constant_72:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_73:[^ ]+]] = u64[1]{0} broadcast(%[[constant_72]]), dimensions={}
// CHECK-NEXT:  %[[multiply_74:[^ ]+]] = u64[1]{0} multiply(%[[convert_71]], %[[broadcast_73]])
// CHECK-NEXT:  %[[convert_75:[^ ]+]] = u32[1]{0} convert(%[[multiply_74]])
// CHECK-NEXT:  %[[xor_108:[^ ]+]] = u32[1]{0} xor(%[[convert_107]], %[[convert_75]])
// CHECK-NEXT:  %[[broadcast_109:[^ ]+]] = u32[1]{0} broadcast(%[[add_87]]), dimensions={}
// CHECK-NEXT:  %[[xor_110:[^ ]+]] = u32[1]{0} xor(%[[xor_108]], %[[broadcast_109]])
// CHECK-NEXT:  %[[convert_118:[^ ]+]] = u64[1]{0} convert(%[[xor_110]])
// CHECK-NEXT:  %[[constant_119:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_120:[^ ]+]] = u64[1]{0} broadcast(%[[constant_119]]), dimensions={}
// CHECK-NEXT:  %[[multiply_121:[^ ]+]] = u64[1]{0} multiply(%[[convert_118]], %[[broadcast_120]])
// CHECK-NEXT:  %[[constant_123:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_124:[^ ]+]] = u64[1]{0} broadcast(%[[constant_123]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_125:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_121]], %[[broadcast_124]])
// CHECK-NEXT:  %[[convert_126:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_125]])
// CHECK-NEXT:  %[[constant_76:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_77:[^ ]+]] = u64[1]{0} broadcast(%[[constant_76]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_78:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_74]], %[[broadcast_77]])
// CHECK-NEXT:  %[[convert_79:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_78]])
// CHECK-NEXT:  %[[constant_41:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_43:[^ ]+]] = u64[1]{0} broadcast(%[[constant_41]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_44:[^ ]+]] = u64[1]{0} shift-right-logical(%[[add_33]], %[[broadcast_43]])
// CHECK-NEXT:  %[[convert_45:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_44]])
// CHECK-NEXT:  %[[xor_80:[^ ]+]] = u32[1]{0} xor(%[[convert_79]], %[[convert_45]])
// CHECK-NEXT:  %[[broadcast_81:[^ ]+]] = u32[1]{0} broadcast(%[[convert_6]]), dimensions={}
// CHECK-NEXT:  %[[xor_82:[^ ]+]] = u32[1]{0} xor(%[[xor_80]], %[[broadcast_81]])
// CHECK-NEXT:  %[[convert_90:[^ ]+]] = u64[1]{0} convert(%[[xor_82]])
// CHECK-NEXT:  %[[constant_91:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_92:[^ ]+]] = u64[1]{0} broadcast(%[[constant_91]]), dimensions={}
// CHECK-NEXT:  %[[multiply_93:[^ ]+]] = u64[1]{0} multiply(%[[convert_90]], %[[broadcast_92]])
// CHECK-NEXT:  %[[convert_94:[^ ]+]] = u32[1]{0} convert(%[[multiply_93]])
// CHECK-NEXT:  %[[xor_139:[^ ]+]] = u32[1]{0} xor(%[[convert_126]], %[[convert_94]])
// CHECK-NEXT:  %[[broadcast_140:[^ ]+]] = u32[1]{0} broadcast(%[[add_117]]), dimensions={}
// CHECK-NEXT:  %[[xor_141:[^ ]+]] = u32[1]{0} xor(%[[xor_139]], %[[broadcast_140]])
// CHECK-NEXT:  %[[convert_155:[^ ]+]] = u64[1]{0} convert(%[[xor_141]])
// CHECK-NEXT:  %[[constant_156:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_157:[^ ]+]] = u64[1]{0} broadcast(%[[constant_156]]), dimensions={}
// CHECK-NEXT:  %[[multiply_158:[^ ]+]] = u64[1]{0} multiply(%[[convert_155]], %[[broadcast_157]])
// CHECK-NEXT:  %[[constant_160:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_161:[^ ]+]] = u64[1]{0} broadcast(%[[constant_160]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_162:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_158]], %[[broadcast_161]])
// CHECK-NEXT:  %[[convert_163:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_162]])
// CHECK-NEXT:  %[[constant_95:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_96:[^ ]+]] = u64[1]{0} broadcast(%[[constant_95]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_97:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_93]], %[[broadcast_96]])
// CHECK-NEXT:  %[[convert_98:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_97]])
// CHECK-NEXT:  %[[convert_66:[^ ]+]] = u32[1]{0} convert(%[[multiply_65]])
// CHECK-NEXT:  %[[xor_111:[^ ]+]] = u32[1]{0} xor(%[[convert_98]], %[[convert_66]])
// CHECK-NEXT:  %[[broadcast_112:[^ ]+]] = u32[1]{0} broadcast(%[[add_89]]), dimensions={}
// CHECK-NEXT:  %[[xor_113:[^ ]+]] = u32[1]{0} xor(%[[xor_111]], %[[broadcast_112]])
// CHECK-NEXT:  %[[convert_127:[^ ]+]] = u64[1]{0} convert(%[[xor_113]])
// CHECK-NEXT:  %[[constant_128:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_129:[^ ]+]] = u64[1]{0} broadcast(%[[constant_128]]), dimensions={}
// CHECK-NEXT:  %[[multiply_130:[^ ]+]] = u64[1]{0} multiply(%[[convert_127]], %[[broadcast_129]])
// CHECK-NEXT:  %[[convert_131:[^ ]+]] = u32[1]{0} convert(%[[multiply_130]])
// CHECK-NEXT:  %[[xor_164:[^ ]+]] = u32[1]{0} xor(%[[convert_163]], %[[convert_131]])
// CHECK-NEXT:  %[[broadcast_165:[^ ]+]] = u32[1]{0} broadcast(%[[add_143]]), dimensions={}
// CHECK-NEXT:  %[[xor_166:[^ ]+]] = u32[1]{0} xor(%[[xor_164]], %[[broadcast_165]])
// CHECK-NEXT:  %[[convert_174:[^ ]+]] = u64[1]{0} convert(%[[xor_166]])
// CHECK-NEXT:  %[[constant_175:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_176:[^ ]+]] = u64[1]{0} broadcast(%[[constant_175]]), dimensions={}
// CHECK-NEXT:  %[[multiply_177:[^ ]+]] = u64[1]{0} multiply(%[[convert_174]], %[[broadcast_176]])
// CHECK-NEXT:  %[[constant_179:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_180:[^ ]+]] = u64[1]{0} broadcast(%[[constant_179]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_181:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_177]], %[[broadcast_180]])
// CHECK-NEXT:  %[[convert_182:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_181]])
// CHECK-NEXT:  %[[constant_132:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_133:[^ ]+]] = u64[1]{0} broadcast(%[[constant_132]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_134:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_130]], %[[broadcast_133]])
// CHECK-NEXT:  %[[convert_135:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_134]])
// CHECK-NEXT:  %[[convert_103:[^ ]+]] = u32[1]{0} convert(%[[multiply_102]])
// CHECK-NEXT:  %[[xor_136:[^ ]+]] = u32[1]{0} xor(%[[convert_135]], %[[convert_103]])
// CHECK-NEXT:  %[[broadcast_137:[^ ]+]] = u32[1]{0} broadcast(%[[add_115]]), dimensions={}
// CHECK-NEXT:  %[[xor_138:[^ ]+]] = u32[1]{0} xor(%[[xor_136]], %[[broadcast_137]])
// CHECK-NEXT:  %[[convert_146:[^ ]+]] = u64[1]{0} convert(%[[xor_138]])
// CHECK-NEXT:  %[[constant_147:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_148:[^ ]+]] = u64[1]{0} broadcast(%[[constant_147]]), dimensions={}
// CHECK-NEXT:  %[[multiply_149:[^ ]+]] = u64[1]{0} multiply(%[[convert_146]], %[[broadcast_148]])
// CHECK-NEXT:  %[[convert_150:[^ ]+]] = u32[1]{0} convert(%[[multiply_149]])
// CHECK-NEXT:  %[[xor_195:[^ ]+]] = u32[1]{0} xor(%[[convert_182]], %[[convert_150]])
// CHECK-NEXT:  %[[broadcast_196:[^ ]+]] = u32[1]{0} broadcast(%[[add_173]]), dimensions={}
// CHECK-NEXT:  %[[xor_197:[^ ]+]] = u32[1]{0} xor(%[[xor_195]], %[[broadcast_196]])
// CHECK-NEXT:  %[[convert_211:[^ ]+]] = u64[1]{0} convert(%[[xor_197]])
// CHECK-NEXT:  %[[constant_212:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_213:[^ ]+]] = u64[1]{0} broadcast(%[[constant_212]]), dimensions={}
// CHECK-NEXT:  %[[multiply_214:[^ ]+]] = u64[1]{0} multiply(%[[convert_211]], %[[broadcast_213]])
// CHECK-NEXT:  %[[constant_216:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_217:[^ ]+]] = u64[1]{0} broadcast(%[[constant_216]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_218:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_214]], %[[broadcast_217]])
// CHECK-NEXT:  %[[convert_219:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_218]])
// CHECK-NEXT:  %[[constant_151:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_152:[^ ]+]] = u64[1]{0} broadcast(%[[constant_151]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_153:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_149]], %[[broadcast_152]])
// CHECK-NEXT:  %[[convert_154:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_153]])
// CHECK-NEXT:  %[[convert_122:[^ ]+]] = u32[1]{0} convert(%[[multiply_121]])
// CHECK-NEXT:  %[[xor_167:[^ ]+]] = u32[1]{0} xor(%[[convert_154]], %[[convert_122]])
// CHECK-NEXT:  %[[broadcast_168:[^ ]+]] = u32[1]{0} broadcast(%[[add_145]]), dimensions={}
// CHECK-NEXT:  %[[xor_169:[^ ]+]] = u32[1]{0} xor(%[[xor_167]], %[[broadcast_168]])
// CHECK-NEXT:  %[[convert_183:[^ ]+]] = u64[1]{0} convert(%[[xor_169]])
// CHECK-NEXT:  %[[constant_184:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_185:[^ ]+]] = u64[1]{0} broadcast(%[[constant_184]]), dimensions={}
// CHECK-NEXT:  %[[multiply_186:[^ ]+]] = u64[1]{0} multiply(%[[convert_183]], %[[broadcast_185]])
// CHECK-NEXT:  %[[convert_187:[^ ]+]] = u32[1]{0} convert(%[[multiply_186]])
// CHECK-NEXT:  %[[xor_220:[^ ]+]] = u32[1]{0} xor(%[[convert_219]], %[[convert_187]])
// CHECK-NEXT:  %[[broadcast_221:[^ ]+]] = u32[1]{0} broadcast(%[[add_199]]), dimensions={}
// CHECK-NEXT:  %[[xor_222:[^ ]+]] = u32[1]{0} xor(%[[xor_220]], %[[broadcast_221]])
// CHECK-NEXT:  %[[convert_230:[^ ]+]] = u64[1]{0} convert(%[[xor_222]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_232:[^ ]+]] = u64[1]{0} broadcast(%[[constant_231]]), dimensions={}
// CHECK-NEXT:  %[[multiply_233:[^ ]+]] = u64[1]{0} multiply(%[[convert_230]], %[[broadcast_232]])
// CHECK-NEXT:  %[[constant_235:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_236:[^ ]+]] = u64[1]{0} broadcast(%[[constant_235]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_237:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_233]], %[[broadcast_236]])
// CHECK-NEXT:  %[[convert_238:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_237]])
// CHECK-NEXT:  %[[constant_188:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_189:[^ ]+]] = u64[1]{0} broadcast(%[[constant_188]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_190:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_186]], %[[broadcast_189]])
// CHECK-NEXT:  %[[convert_191:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_190]])
// CHECK-NEXT:  %[[convert_159:[^ ]+]] = u32[1]{0} convert(%[[multiply_158]])
// CHECK-NEXT:  %[[xor_192:[^ ]+]] = u32[1]{0} xor(%[[convert_191]], %[[convert_159]])
// CHECK-NEXT:  %[[broadcast_193:[^ ]+]] = u32[1]{0} broadcast(%[[add_171]]), dimensions={}
// CHECK-NEXT:  %[[xor_194:[^ ]+]] = u32[1]{0} xor(%[[xor_192]], %[[broadcast_193]])
// CHECK-NEXT:  %[[convert_202:[^ ]+]] = u64[1]{0} convert(%[[xor_194]])
// CHECK-NEXT:  %[[constant_203:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_204:[^ ]+]] = u64[1]{0} broadcast(%[[constant_203]]), dimensions={}
// CHECK-NEXT:  %[[multiply_205:[^ ]+]] = u64[1]{0} multiply(%[[convert_202]], %[[broadcast_204]])
// CHECK-NEXT:  %[[convert_206:[^ ]+]] = u32[1]{0} convert(%[[multiply_205]])
// CHECK-NEXT:  %[[xor_251:[^ ]+]] = u32[1]{0} xor(%[[convert_238]], %[[convert_206]])
// CHECK-NEXT:  %[[broadcast_252:[^ ]+]] = u32[1]{0} broadcast(%[[add_229]]), dimensions={}
// CHECK-NEXT:  %[[xor_253:[^ ]+]] = u32[1]{0} xor(%[[xor_251]], %[[broadcast_252]])
// CHECK-NEXT:  %[[convert_267:[^ ]+]] = u64[1]{0} convert(%[[xor_253]])
// CHECK-NEXT:  %[[constant_268:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_269:[^ ]+]] = u64[1]{0} broadcast(%[[constant_268]]), dimensions={}
// CHECK-NEXT:  %[[multiply_270:[^ ]+]] = u64[1]{0} multiply(%[[convert_267]], %[[broadcast_269]])
// CHECK-NEXT:  %[[constant_272:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_273:[^ ]+]] = u64[1]{0} broadcast(%[[constant_272]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_274:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_270]], %[[broadcast_273]])
// CHECK-NEXT:  %[[convert_275:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_274]])
// CHECK-NEXT:  %[[constant_207:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_208:[^ ]+]] = u64[1]{0} broadcast(%[[constant_207]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_209:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_205]], %[[broadcast_208]])
// CHECK-NEXT:  %[[convert_210:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_209]])
// CHECK-NEXT:  %[[convert_178:[^ ]+]] = u32[1]{0} convert(%[[multiply_177]])
// CHECK-NEXT:  %[[xor_223:[^ ]+]] = u32[1]{0} xor(%[[convert_210]], %[[convert_178]])
// CHECK-NEXT:  %[[broadcast_224:[^ ]+]] = u32[1]{0} broadcast(%[[add_201]]), dimensions={}
// CHECK-NEXT:  %[[xor_225:[^ ]+]] = u32[1]{0} xor(%[[xor_223]], %[[broadcast_224]])
// CHECK-NEXT:  %[[convert_239:[^ ]+]] = u64[1]{0} convert(%[[xor_225]])
// CHECK-NEXT:  %[[constant_240:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_241:[^ ]+]] = u64[1]{0} broadcast(%[[constant_240]]), dimensions={}
// CHECK-NEXT:  %[[multiply_242:[^ ]+]] = u64[1]{0} multiply(%[[convert_239]], %[[broadcast_241]])
// CHECK-NEXT:  %[[convert_243:[^ ]+]] = u32[1]{0} convert(%[[multiply_242]])
// CHECK-NEXT:  %[[xor_276:[^ ]+]] = u32[1]{0} xor(%[[convert_275]], %[[convert_243]])
// CHECK-NEXT:  %[[broadcast_277:[^ ]+]] = u32[1]{0} broadcast(%[[add_255]]), dimensions={}
// CHECK-NEXT:  %[[xor_278:[^ ]+]] = u32[1]{0} xor(%[[xor_276]], %[[broadcast_277]])
// CHECK-NEXT:  %[[convert_286:[^ ]+]] = u64[1]{0} convert(%[[xor_278]])
// CHECK-NEXT:  %[[constant_287:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_288:[^ ]+]] = u64[1]{0} broadcast(%[[constant_287]]), dimensions={}
// CHECK-NEXT:  %[[multiply_289:[^ ]+]] = u64[1]{0} multiply(%[[convert_286]], %[[broadcast_288]])
// CHECK-NEXT:  %[[constant_291:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_292:[^ ]+]] = u64[1]{0} broadcast(%[[constant_291]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_293:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_289]], %[[broadcast_292]])
// CHECK-NEXT:  %[[convert_294:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_293]])
// CHECK-NEXT:  %[[constant_244:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_245:[^ ]+]] = u64[1]{0} broadcast(%[[constant_244]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_246:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_242]], %[[broadcast_245]])
// CHECK-NEXT:  %[[convert_247:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_246]])
// CHECK-NEXT:  %[[convert_215:[^ ]+]] = u32[1]{0} convert(%[[multiply_214]])
// CHECK-NEXT:  %[[xor_248:[^ ]+]] = u32[1]{0} xor(%[[convert_247]], %[[convert_215]])
// CHECK-NEXT:  %[[broadcast_249:[^ ]+]] = u32[1]{0} broadcast(%[[add_227]]), dimensions={}
// CHECK-NEXT:  %[[xor_250:[^ ]+]] = u32[1]{0} xor(%[[xor_248]], %[[broadcast_249]])
// CHECK-NEXT:  %[[convert_258:[^ ]+]] = u64[1]{0} convert(%[[xor_250]])
// CHECK-NEXT:  %[[constant_259:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_260:[^ ]+]] = u64[1]{0} broadcast(%[[constant_259]]), dimensions={}
// CHECK-NEXT:  %[[multiply_261:[^ ]+]] = u64[1]{0} multiply(%[[convert_258]], %[[broadcast_260]])
// CHECK-NEXT:  %[[convert_262:[^ ]+]] = u32[1]{0} convert(%[[multiply_261]])
// CHECK-NEXT:  %[[xor_307:[^ ]+]] = u32[1]{0} xor(%[[convert_294]], %[[convert_262]])
// CHECK-NEXT:  %[[broadcast_308:[^ ]+]] = u32[1]{0} broadcast(%[[add_285]]), dimensions={}
// CHECK-NEXT:  %[[xor_309:[^ ]+]] = u32[1]{0} xor(%[[xor_307]], %[[broadcast_308]])
// CHECK-NEXT:  %[[convert_323:[^ ]+]] = u64[1]{0} convert(%[[xor_309]])
// CHECK-NEXT:  %[[constant_324:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_325:[^ ]+]] = u64[1]{0} broadcast(%[[constant_324]]), dimensions={}
// CHECK-NEXT:  %[[multiply_326:[^ ]+]] = u64[1]{0} multiply(%[[convert_323]], %[[broadcast_325]])
// CHECK-NEXT:  %[[constant_328:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_329:[^ ]+]] = u64[1]{0} broadcast(%[[constant_328]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_330:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_326]], %[[broadcast_329]])
// CHECK-NEXT:  %[[convert_331:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_330]])
// CHECK-NEXT:  %[[constant_263:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_264:[^ ]+]] = u64[1]{0} broadcast(%[[constant_263]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_265:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_261]], %[[broadcast_264]])
// CHECK-NEXT:  %[[convert_266:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_265]])
// CHECK-NEXT:  %[[convert_234:[^ ]+]] = u32[1]{0} convert(%[[multiply_233]])
// CHECK-NEXT:  %[[xor_279:[^ ]+]] = u32[1]{0} xor(%[[convert_266]], %[[convert_234]])
// CHECK-NEXT:  %[[broadcast_280:[^ ]+]] = u32[1]{0} broadcast(%[[add_257]]), dimensions={}
// CHECK-NEXT:  %[[xor_281:[^ ]+]] = u32[1]{0} xor(%[[xor_279]], %[[broadcast_280]])
// CHECK-NEXT:  %[[convert_295:[^ ]+]] = u64[1]{0} convert(%[[xor_281]])
// CHECK-NEXT:  %[[constant_296:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_297:[^ ]+]] = u64[1]{0} broadcast(%[[constant_296]]), dimensions={}
// CHECK-NEXT:  %[[multiply_298:[^ ]+]] = u64[1]{0} multiply(%[[convert_295]], %[[broadcast_297]])
// CHECK-NEXT:  %[[convert_299:[^ ]+]] = u32[1]{0} convert(%[[multiply_298]])
// CHECK-NEXT:  %[[xor_332:[^ ]+]] = u32[1]{0} xor(%[[convert_331]], %[[convert_299]])
// CHECK-NEXT:  %[[broadcast_333:[^ ]+]] = u32[1]{0} broadcast(%[[add_311]]), dimensions={}
// CHECK-NEXT:  %[[xor_334:[^ ]+]] = u32[1]{0} xor(%[[xor_332]], %[[broadcast_333]])
// CHECK-NEXT:  %[[reshape_342:[^ ]+]] = u32[1,1]{1,0} reshape(%[[xor_334]])
// CHECK-NEXT:  %[[convert_327:[^ ]+]] = u32[1]{0} convert(%[[multiply_326]])
// CHECK-NEXT:  %[[reshape_343:[^ ]+]] = u32[1,1]{1,0} reshape(%[[convert_327]])
// CHECK-NEXT:  %[[constant_300:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_301:[^ ]+]] = u64[1]{0} broadcast(%[[constant_300]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_302:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_298]], %[[broadcast_301]])
// CHECK-NEXT:  %[[convert_303:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_302]])
// CHECK-NEXT:  %[[convert_271:[^ ]+]] = u32[1]{0} convert(%[[multiply_270]])
// CHECK-NEXT:  %[[xor_304:[^ ]+]] = u32[1]{0} xor(%[[convert_303]], %[[convert_271]])
// CHECK-NEXT:  %[[broadcast_305:[^ ]+]] = u32[1]{0} broadcast(%[[add_283]]), dimensions={}
// CHECK-NEXT:  %[[xor_306:[^ ]+]] = u32[1]{0} xor(%[[xor_304]], %[[broadcast_305]])
// CHECK-NEXT:  %[[convert_314:[^ ]+]] = u64[1]{0} convert(%[[xor_306]])
// CHECK-NEXT:  %[[constant_315:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_316:[^ ]+]] = u64[1]{0} broadcast(%[[constant_315]]), dimensions={}
// CHECK-NEXT:  %[[multiply_317:[^ ]+]] = u64[1]{0} multiply(%[[convert_314]], %[[broadcast_316]])
// CHECK-NEXT:  %[[constant_319:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_320:[^ ]+]] = u64[1]{0} broadcast(%[[constant_319]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_321:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_317]], %[[broadcast_320]])
// CHECK-NEXT:  %[[convert_322:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_321]])
// CHECK-NEXT:  %[[convert_290:[^ ]+]] = u32[1]{0} convert(%[[multiply_289]])
// CHECK-NEXT:  %[[xor_335:[^ ]+]] = u32[1]{0} xor(%[[convert_322]], %[[convert_290]])
// CHECK-NEXT:  %[[broadcast_336:[^ ]+]] = u32[1]{0} broadcast(%[[add_313]]), dimensions={}
// CHECK-NEXT:  %[[xor_337:[^ ]+]] = u32[1]{0} xor(%[[xor_335]], %[[broadcast_336]])
// CHECK-NEXT:  %[[reshape_344:[^ ]+]] = u32[1,1]{1,0} reshape(%[[xor_337]])
// CHECK-NEXT:  %[[convert_318:[^ ]+]] = u32[1]{0} convert(%[[multiply_317]])
// CHECK-NEXT:  %[[reshape_345:[^ ]+]] = u32[1,1]{1,0} reshape(%[[convert_318]])
// CHECK-NEXT:  %[[concatenate_346:[^ ]+]] = u32[1,4]{1,0} concatenate(%[[reshape_342]], %[[reshape_343]], %[[reshape_344]], %[[reshape_345]]), dimensions={1}
// CHECK-NEXT:  %[[reshape_347:[^ ]+]] = u32[4]{0} reshape(%[[concatenate_346]])
// CHECK-NEXT:  %[[slice_348:[^ ]+]] = u32[1]{0} slice(%[[reshape_347]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_349:[^ ]+]] = u32[] reshape(%[[slice_348]])
// CHECK-NEXT:  ROOT %[[tuple_352:[^ ]+]] = (u64[3]{0}, u32[]) tuple(%[[concatenate_351]], %[[reshape_349]])

// CHECK-LABEL: ENTRY %test_philox
// CHECK-NEXT:  %[[initial_state:[^ ]+]] = u64[6]{0} constant({0, 1, 8, 9, 4, 1})
// CHECK-NEXT:  ROOT %[[call:[^ ]+]] = (u64[6]{0}, u32[]) call(%[[initial_state]]), to_apply=%[[$rng_353]]

HloModule TestPhiloxAlgorithm

ENTRY test_philox {
  initial_state = u64[6] constant({0, 1, 8, 9, 4, 1})
  ROOT result = (u64[6], u32[]) rng-bit-generator(initial_state), algorithm=rng_philox
}

// -----

// CHECK-LABEL: HloModule TestPhiloxAlgorithm, entry_computation_layout={()->(u64[6]{0}, u64[])}

// CHECK:       %[[$rng_363:[^ ]+]]
// CHECK-NEXT:  %[[state_1:[^ ]+]] = u64[6]{0} parameter(0)
// CHECK-NEXT:  %[[slice_2:[^ ]+]] = u64[1]{0} slice(%[[state_1]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_3:[^ ]+]] = u64[] reshape(%[[slice_2]])
// CHECK-NEXT:  %[[convert_6:[^ ]+]] = u32[] convert(%[[reshape_3]])
// CHECK-NEXT:  %[[constant_86:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_87:[^ ]+]] = u32[] add(%[[convert_6]], %[[constant_86]])
// CHECK-NEXT:  %[[constant_114:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_115:[^ ]+]] = u32[] add(%[[add_87]], %[[constant_114]])
// CHECK-NEXT:  %[[constant_142:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_143:[^ ]+]] = u32[] add(%[[add_115]], %[[constant_142]])
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_171:[^ ]+]] = u32[] add(%[[add_143]], %[[constant_170]])
// CHECK-NEXT:  %[[constant_198:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_199:[^ ]+]] = u32[] add(%[[add_171]], %[[constant_198]])
// CHECK-NEXT:  %[[constant_226:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_227:[^ ]+]] = u32[] add(%[[add_199]], %[[constant_226]])
// CHECK-NEXT:  %[[constant_254:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_255:[^ ]+]] = u32[] add(%[[add_227]], %[[constant_254]])
// CHECK-NEXT:  %[[constant_282:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_283:[^ ]+]] = u32[] add(%[[add_255]], %[[constant_282]])
// CHECK-NEXT:  %[[constant_310:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_311:[^ ]+]] = u32[] add(%[[add_283]], %[[constant_310]])
// CHECK-NEXT:  %[[constant_338:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_339:[^ ]+]] = u32[] add(%[[add_311]], %[[constant_338]])
// CHECK-NEXT:  %[[constant_5:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_7:[^ ]+]] = u64[] shift-right-logical(%[[reshape_3]], %[[constant_5]])
// CHECK-NEXT:  %[[convert_8:[^ ]+]] = u32[] convert(%[[shift_right_logical_7]])
// CHECK-NEXT:  %[[constant_88:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_89:[^ ]+]] = u32[] add(%[[convert_8]], %[[constant_88]])
// CHECK-NEXT:  %[[constant_116:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_117:[^ ]+]] = u32[] add(%[[add_89]], %[[constant_116]])
// CHECK-NEXT:  %[[constant_144:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_145:[^ ]+]] = u32[] add(%[[add_117]], %[[constant_144]])
// CHECK-NEXT:  %[[constant_172:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_173:[^ ]+]] = u32[] add(%[[add_145]], %[[constant_172]])
// CHECK-NEXT:  %[[constant_200:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_201:[^ ]+]] = u32[] add(%[[add_173]], %[[constant_200]])
// CHECK-NEXT:  %[[constant_228:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_229:[^ ]+]] = u32[] add(%[[add_201]], %[[constant_228]])
// CHECK-NEXT:  %[[constant_256:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_257:[^ ]+]] = u32[] add(%[[add_229]], %[[constant_256]])
// CHECK-NEXT:  %[[constant_284:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_285:[^ ]+]] = u32[] add(%[[add_257]], %[[constant_284]])
// CHECK-NEXT:  %[[constant_312:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_313:[^ ]+]] = u32[] add(%[[add_285]], %[[constant_312]])
// CHECK-NEXT:  %[[constant_340:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_341:[^ ]+]] = u32[] add(%[[add_313]], %[[constant_340]])
// CHECK-NEXT:  %[[reshape_360:[^ ]+]] = u64[1]{0} reshape(%[[reshape_3]])
// CHECK-NEXT:  %[[slice_4:[^ ]+]] = u64[2]{0} slice(%[[state_1]]), slice={[1:3]}
// CHECK-NEXT:  %[[slice_9:[^ ]+]] = u64[1]{0} slice(%[[slice_4]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_10:[^ ]+]] = u64[] reshape(%[[slice_9]])
// CHECK-NEXT:  %[[convert_14:[^ ]+]] = u32[] convert(%[[reshape_10]])
// CHECK-NEXT:  %[[convert_22:[^ ]+]] = u64[] convert(%[[convert_14]])
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_15:[^ ]+]] = u64[] shift-right-logical(%[[reshape_10]], %[[constant_13]])
// CHECK-NEXT:  %[[convert_16:[^ ]+]] = u32[] convert(%[[shift_right_logical_15]])
// CHECK-NEXT:  %[[convert_23:[^ ]+]] = u64[] convert(%[[convert_16]])
// CHECK-NEXT:  %[[constant_24:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_left_25:[^ ]+]] = u64[] shift-left(%[[convert_23]], %[[constant_24]])
// CHECK-NEXT:  %[[or_26:[^ ]+]] = u64[] or(%[[convert_22]], %[[shift_left_25]])
// CHECK-NEXT:  %[[constant_51:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_52:[^ ]+]] = u64[] add(%[[or_26]], %[[constant_51]])
// CHECK-NEXT:  %[[reshape_59:[^ ]+]] = u64[1]{0} reshape(%[[add_52]])
// CHECK-NEXT:  %[[compare_54:[^ ]+]] = pred[] compare(%[[add_52]], %[[or_26]]), direction=LT
// CHECK-NEXT:  %[[slice_11:[^ ]+]] = u64[1]{0} slice(%[[slice_4]]), slice={[1:2]}
// CHECK-NEXT:  %[[reshape_12:[^ ]+]] = u64[] reshape(%[[slice_11]])
// CHECK-NEXT:  %[[convert_18:[^ ]+]] = u32[] convert(%[[reshape_12]])
// CHECK-NEXT:  %[[convert_27:[^ ]+]] = u64[] convert(%[[convert_18]])
// CHECK-NEXT:  %[[constant_17:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_19:[^ ]+]] = u64[] shift-right-logical(%[[reshape_12]], %[[constant_17]])
// CHECK-NEXT:  %[[convert_20:[^ ]+]] = u32[] convert(%[[shift_right_logical_19]])
// CHECK-NEXT:  %[[convert_28:[^ ]+]] = u64[] convert(%[[convert_20]])
// CHECK-NEXT:  %[[constant_29:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_left_30:[^ ]+]] = u64[] shift-left(%[[convert_28]], %[[constant_29]])
// CHECK-NEXT:  %[[or_31:[^ ]+]] = u64[] or(%[[convert_27]], %[[shift_left_30]])
// CHECK-NEXT:  %[[constant_53:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_55:[^ ]+]] = u64[] add(%[[or_31]], %[[constant_53]])
// CHECK-NEXT:  %[[broadcast_56:[^ ]+]] = u64[] broadcast(%[[add_55]]), dimensions={}
// CHECK-NEXT:  %[[broadcast_57:[^ ]+]] = u64[] broadcast(%[[or_31]]), dimensions={}
// CHECK-NEXT:  %[[select_58:[^ ]+]] = u64[] select(%[[compare_54]], %[[broadcast_56]], %[[broadcast_57]])
// CHECK-NEXT:  %[[reshape_60:[^ ]+]] = u64[1]{0} reshape(%[[select_58]])
// CHECK-NEXT:  %[[concatenate_61:[^ ]+]] = u64[2]{0} concatenate(%[[reshape_59]], %[[reshape_60]]), dimensions={0}
// CHECK-NEXT:  %[[concatenate_361:[^ ]+]] = u64[3]{0} concatenate(%[[reshape_360]], %[[concatenate_61]]), dimensions={0}
// CHECK-NEXT:  %[[broadcast_32:[^ ]+]] = u64[1]{0} broadcast(%[[or_26]]), dimensions={}
// CHECK-NEXT:  %[[iota_21:[^ ]+]] = u64[1]{0} iota(), iota_dimension=0
// CHECK-NEXT:  %[[add_33:[^ ]+]] = u64[1]{0} add(%[[broadcast_32]], %[[iota_21]])
// CHECK-NEXT:  %[[convert_42:[^ ]+]] = u32[1]{0} convert(%[[add_33]])
// CHECK-NEXT:  %[[convert_62:[^ ]+]] = u64[1]{0} convert(%[[convert_42]])
// CHECK-NEXT:  %[[constant_63:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_64:[^ ]+]] = u64[1]{0} broadcast(%[[constant_63]]), dimensions={}
// CHECK-NEXT:  %[[multiply_65:[^ ]+]] = u64[1]{0} multiply(%[[convert_62]], %[[broadcast_64]])
// CHECK-NEXT:  %[[constant_67:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_68:[^ ]+]] = u64[1]{0} broadcast(%[[constant_67]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_69:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_65]], %[[broadcast_68]])
// CHECK-NEXT:  %[[convert_70:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_69]])
// CHECK-NEXT:  %[[broadcast_35:[^ ]+]] = u64[1]{0} broadcast(%[[or_26]]), dimensions={}
// CHECK-NEXT:  %[[compare_36:[^ ]+]] = pred[1]{0} compare(%[[add_33]], %[[broadcast_35]]), direction=LT
// CHECK-NEXT:  %[[constant_34:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_37:[^ ]+]] = u64[] add(%[[or_31]], %[[constant_34]])
// CHECK-NEXT:  %[[broadcast_38:[^ ]+]] = u64[1]{0} broadcast(%[[add_37]]), dimensions={}
// CHECK-NEXT:  %[[broadcast_39:[^ ]+]] = u64[1]{0} broadcast(%[[or_31]]), dimensions={}
// CHECK-NEXT:  %[[select_40:[^ ]+]] = u64[1]{0} select(%[[compare_36]], %[[broadcast_38]], %[[broadcast_39]])
// CHECK-NEXT:  %[[constant_46:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_48:[^ ]+]] = u64[1]{0} broadcast(%[[constant_46]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_49:[^ ]+]] = u64[1]{0} shift-right-logical(%[[select_40]], %[[broadcast_48]])
// CHECK-NEXT:  %[[convert_50:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_49]])
// CHECK-NEXT:  %[[xor_83:[^ ]+]] = u32[1]{0} xor(%[[convert_70]], %[[convert_50]])
// CHECK-NEXT:  %[[broadcast_84:[^ ]+]] = u32[1]{0} broadcast(%[[convert_8]]), dimensions={}
// CHECK-NEXT:  %[[xor_85:[^ ]+]] = u32[1]{0} xor(%[[xor_83]], %[[broadcast_84]])
// CHECK-NEXT:  %[[convert_99:[^ ]+]] = u64[1]{0} convert(%[[xor_85]])
// CHECK-NEXT:  %[[constant_100:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_101:[^ ]+]] = u64[1]{0} broadcast(%[[constant_100]]), dimensions={}
// CHECK-NEXT:  %[[multiply_102:[^ ]+]] = u64[1]{0} multiply(%[[convert_99]], %[[broadcast_101]])
// CHECK-NEXT:  %[[constant_104:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_105:[^ ]+]] = u64[1]{0} broadcast(%[[constant_104]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_106:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_102]], %[[broadcast_105]])
// CHECK-NEXT:  %[[convert_107:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_106]])
// CHECK-NEXT:  %[[convert_47:[^ ]+]] = u32[1]{0} convert(%[[select_40]])
// CHECK-NEXT:  %[[convert_71:[^ ]+]] = u64[1]{0} convert(%[[convert_47]])
// CHECK-NEXT:  %[[constant_72:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_73:[^ ]+]] = u64[1]{0} broadcast(%[[constant_72]]), dimensions={}
// CHECK-NEXT:  %[[multiply_74:[^ ]+]] = u64[1]{0} multiply(%[[convert_71]], %[[broadcast_73]])
// CHECK-NEXT:  %[[convert_75:[^ ]+]] = u32[1]{0} convert(%[[multiply_74]])
// CHECK-NEXT:  %[[xor_108:[^ ]+]] = u32[1]{0} xor(%[[convert_107]], %[[convert_75]])
// CHECK-NEXT:  %[[broadcast_109:[^ ]+]] = u32[1]{0} broadcast(%[[add_87]]), dimensions={}
// CHECK-NEXT:  %[[xor_110:[^ ]+]] = u32[1]{0} xor(%[[xor_108]], %[[broadcast_109]])
// CHECK-NEXT:  %[[convert_118:[^ ]+]] = u64[1]{0} convert(%[[xor_110]])
// CHECK-NEXT:  %[[constant_119:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_120:[^ ]+]] = u64[1]{0} broadcast(%[[constant_119]]), dimensions={}
// CHECK-NEXT:  %[[multiply_121:[^ ]+]] = u64[1]{0} multiply(%[[convert_118]], %[[broadcast_120]])
// CHECK-NEXT:  %[[constant_123:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_124:[^ ]+]] = u64[1]{0} broadcast(%[[constant_123]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_125:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_121]], %[[broadcast_124]])
// CHECK-NEXT:  %[[convert_126:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_125]])
// CHECK-NEXT:  %[[constant_76:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_77:[^ ]+]] = u64[1]{0} broadcast(%[[constant_76]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_78:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_74]], %[[broadcast_77]])
// CHECK-NEXT:  %[[convert_79:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_78]])
// CHECK-NEXT:  %[[constant_41:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_43:[^ ]+]] = u64[1]{0} broadcast(%[[constant_41]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_44:[^ ]+]] = u64[1]{0} shift-right-logical(%[[add_33]], %[[broadcast_43]])
// CHECK-NEXT:  %[[convert_45:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_44]])
// CHECK-NEXT:  %[[xor_80:[^ ]+]] = u32[1]{0} xor(%[[convert_79]], %[[convert_45]])
// CHECK-NEXT:  %[[broadcast_81:[^ ]+]] = u32[1]{0} broadcast(%[[convert_6]]), dimensions={}
// CHECK-NEXT:  %[[xor_82:[^ ]+]] = u32[1]{0} xor(%[[xor_80]], %[[broadcast_81]])
// CHECK-NEXT:  %[[convert_90:[^ ]+]] = u64[1]{0} convert(%[[xor_82]])
// CHECK-NEXT:  %[[constant_91:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_92:[^ ]+]] = u64[1]{0} broadcast(%[[constant_91]]), dimensions={}
// CHECK-NEXT:  %[[multiply_93:[^ ]+]] = u64[1]{0} multiply(%[[convert_90]], %[[broadcast_92]])
// CHECK-NEXT:  %[[convert_94:[^ ]+]] = u32[1]{0} convert(%[[multiply_93]])
// CHECK-NEXT:  %[[xor_139:[^ ]+]] = u32[1]{0} xor(%[[convert_126]], %[[convert_94]])
// CHECK-NEXT:  %[[broadcast_140:[^ ]+]] = u32[1]{0} broadcast(%[[add_117]]), dimensions={}
// CHECK-NEXT:  %[[xor_141:[^ ]+]] = u32[1]{0} xor(%[[xor_139]], %[[broadcast_140]])
// CHECK-NEXT:  %[[convert_155:[^ ]+]] = u64[1]{0} convert(%[[xor_141]])
// CHECK-NEXT:  %[[constant_156:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_157:[^ ]+]] = u64[1]{0} broadcast(%[[constant_156]]), dimensions={}
// CHECK-NEXT:  %[[multiply_158:[^ ]+]] = u64[1]{0} multiply(%[[convert_155]], %[[broadcast_157]])
// CHECK-NEXT:  %[[constant_160:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_161:[^ ]+]] = u64[1]{0} broadcast(%[[constant_160]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_162:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_158]], %[[broadcast_161]])
// CHECK-NEXT:  %[[convert_163:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_162]])
// CHECK-NEXT:  %[[constant_95:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_96:[^ ]+]] = u64[1]{0} broadcast(%[[constant_95]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_97:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_93]], %[[broadcast_96]])
// CHECK-NEXT:  %[[convert_98:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_97]])
// CHECK-NEXT:  %[[convert_66:[^ ]+]] = u32[1]{0} convert(%[[multiply_65]])
// CHECK-NEXT:  %[[xor_111:[^ ]+]] = u32[1]{0} xor(%[[convert_98]], %[[convert_66]])
// CHECK-NEXT:  %[[broadcast_112:[^ ]+]] = u32[1]{0} broadcast(%[[add_89]]), dimensions={}
// CHECK-NEXT:  %[[xor_113:[^ ]+]] = u32[1]{0} xor(%[[xor_111]], %[[broadcast_112]])
// CHECK-NEXT:  %[[convert_127:[^ ]+]] = u64[1]{0} convert(%[[xor_113]])
// CHECK-NEXT:  %[[constant_128:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_129:[^ ]+]] = u64[1]{0} broadcast(%[[constant_128]]), dimensions={}
// CHECK-NEXT:  %[[multiply_130:[^ ]+]] = u64[1]{0} multiply(%[[convert_127]], %[[broadcast_129]])
// CHECK-NEXT:  %[[convert_131:[^ ]+]] = u32[1]{0} convert(%[[multiply_130]])
// CHECK-NEXT:  %[[xor_164:[^ ]+]] = u32[1]{0} xor(%[[convert_163]], %[[convert_131]])
// CHECK-NEXT:  %[[broadcast_165:[^ ]+]] = u32[1]{0} broadcast(%[[add_143]]), dimensions={}
// CHECK-NEXT:  %[[xor_166:[^ ]+]] = u32[1]{0} xor(%[[xor_164]], %[[broadcast_165]])
// CHECK-NEXT:  %[[convert_174:[^ ]+]] = u64[1]{0} convert(%[[xor_166]])
// CHECK-NEXT:  %[[constant_175:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_176:[^ ]+]] = u64[1]{0} broadcast(%[[constant_175]]), dimensions={}
// CHECK-NEXT:  %[[multiply_177:[^ ]+]] = u64[1]{0} multiply(%[[convert_174]], %[[broadcast_176]])
// CHECK-NEXT:  %[[constant_179:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_180:[^ ]+]] = u64[1]{0} broadcast(%[[constant_179]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_181:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_177]], %[[broadcast_180]])
// CHECK-NEXT:  %[[convert_182:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_181]])
// CHECK-NEXT:  %[[constant_132:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_133:[^ ]+]] = u64[1]{0} broadcast(%[[constant_132]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_134:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_130]], %[[broadcast_133]])
// CHECK-NEXT:  %[[convert_135:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_134]])
// CHECK-NEXT:  %[[convert_103:[^ ]+]] = u32[1]{0} convert(%[[multiply_102]])
// CHECK-NEXT:  %[[xor_136:[^ ]+]] = u32[1]{0} xor(%[[convert_135]], %[[convert_103]])
// CHECK-NEXT:  %[[broadcast_137:[^ ]+]] = u32[1]{0} broadcast(%[[add_115]]), dimensions={}
// CHECK-NEXT:  %[[xor_138:[^ ]+]] = u32[1]{0} xor(%[[xor_136]], %[[broadcast_137]])
// CHECK-NEXT:  %[[convert_146:[^ ]+]] = u64[1]{0} convert(%[[xor_138]])
// CHECK-NEXT:  %[[constant_147:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_148:[^ ]+]] = u64[1]{0} broadcast(%[[constant_147]]), dimensions={}
// CHECK-NEXT:  %[[multiply_149:[^ ]+]] = u64[1]{0} multiply(%[[convert_146]], %[[broadcast_148]])
// CHECK-NEXT:  %[[convert_150:[^ ]+]] = u32[1]{0} convert(%[[multiply_149]])
// CHECK-NEXT:  %[[xor_195:[^ ]+]] = u32[1]{0} xor(%[[convert_182]], %[[convert_150]])
// CHECK-NEXT:  %[[broadcast_196:[^ ]+]] = u32[1]{0} broadcast(%[[add_173]]), dimensions={}
// CHECK-NEXT:  %[[xor_197:[^ ]+]] = u32[1]{0} xor(%[[xor_195]], %[[broadcast_196]])
// CHECK-NEXT:  %[[convert_211:[^ ]+]] = u64[1]{0} convert(%[[xor_197]])
// CHECK-NEXT:  %[[constant_212:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_213:[^ ]+]] = u64[1]{0} broadcast(%[[constant_212]]), dimensions={}
// CHECK-NEXT:  %[[multiply_214:[^ ]+]] = u64[1]{0} multiply(%[[convert_211]], %[[broadcast_213]])
// CHECK-NEXT:  %[[constant_216:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_217:[^ ]+]] = u64[1]{0} broadcast(%[[constant_216]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_218:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_214]], %[[broadcast_217]])
// CHECK-NEXT:  %[[convert_219:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_218]])
// CHECK-NEXT:  %[[constant_151:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_152:[^ ]+]] = u64[1]{0} broadcast(%[[constant_151]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_153:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_149]], %[[broadcast_152]])
// CHECK-NEXT:  %[[convert_154:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_153]])
// CHECK-NEXT:  %[[convert_122:[^ ]+]] = u32[1]{0} convert(%[[multiply_121]])
// CHECK-NEXT:  %[[xor_167:[^ ]+]] = u32[1]{0} xor(%[[convert_154]], %[[convert_122]])
// CHECK-NEXT:  %[[broadcast_168:[^ ]+]] = u32[1]{0} broadcast(%[[add_145]]), dimensions={}
// CHECK-NEXT:  %[[xor_169:[^ ]+]] = u32[1]{0} xor(%[[xor_167]], %[[broadcast_168]])
// CHECK-NEXT:  %[[convert_183:[^ ]+]] = u64[1]{0} convert(%[[xor_169]])
// CHECK-NEXT:  %[[constant_184:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_185:[^ ]+]] = u64[1]{0} broadcast(%[[constant_184]]), dimensions={}
// CHECK-NEXT:  %[[multiply_186:[^ ]+]] = u64[1]{0} multiply(%[[convert_183]], %[[broadcast_185]])
// CHECK-NEXT:  %[[convert_187:[^ ]+]] = u32[1]{0} convert(%[[multiply_186]])
// CHECK-NEXT:  %[[xor_220:[^ ]+]] = u32[1]{0} xor(%[[convert_219]], %[[convert_187]])
// CHECK-NEXT:  %[[broadcast_221:[^ ]+]] = u32[1]{0} broadcast(%[[add_199]]), dimensions={}
// CHECK-NEXT:  %[[xor_222:[^ ]+]] = u32[1]{0} xor(%[[xor_220]], %[[broadcast_221]])
// CHECK-NEXT:  %[[convert_230:[^ ]+]] = u64[1]{0} convert(%[[xor_222]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_232:[^ ]+]] = u64[1]{0} broadcast(%[[constant_231]]), dimensions={}
// CHECK-NEXT:  %[[multiply_233:[^ ]+]] = u64[1]{0} multiply(%[[convert_230]], %[[broadcast_232]])
// CHECK-NEXT:  %[[constant_235:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_236:[^ ]+]] = u64[1]{0} broadcast(%[[constant_235]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_237:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_233]], %[[broadcast_236]])
// CHECK-NEXT:  %[[convert_238:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_237]])
// CHECK-NEXT:  %[[constant_188:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_189:[^ ]+]] = u64[1]{0} broadcast(%[[constant_188]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_190:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_186]], %[[broadcast_189]])
// CHECK-NEXT:  %[[convert_191:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_190]])
// CHECK-NEXT:  %[[convert_159:[^ ]+]] = u32[1]{0} convert(%[[multiply_158]])
// CHECK-NEXT:  %[[xor_192:[^ ]+]] = u32[1]{0} xor(%[[convert_191]], %[[convert_159]])
// CHECK-NEXT:  %[[broadcast_193:[^ ]+]] = u32[1]{0} broadcast(%[[add_171]]), dimensions={}
// CHECK-NEXT:  %[[xor_194:[^ ]+]] = u32[1]{0} xor(%[[xor_192]], %[[broadcast_193]])
// CHECK-NEXT:  %[[convert_202:[^ ]+]] = u64[1]{0} convert(%[[xor_194]])
// CHECK-NEXT:  %[[constant_203:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_204:[^ ]+]] = u64[1]{0} broadcast(%[[constant_203]]), dimensions={}
// CHECK-NEXT:  %[[multiply_205:[^ ]+]] = u64[1]{0} multiply(%[[convert_202]], %[[broadcast_204]])
// CHECK-NEXT:  %[[convert_206:[^ ]+]] = u32[1]{0} convert(%[[multiply_205]])
// CHECK-NEXT:  %[[xor_251:[^ ]+]] = u32[1]{0} xor(%[[convert_238]], %[[convert_206]])
// CHECK-NEXT:  %[[broadcast_252:[^ ]+]] = u32[1]{0} broadcast(%[[add_229]]), dimensions={}
// CHECK-NEXT:  %[[xor_253:[^ ]+]] = u32[1]{0} xor(%[[xor_251]], %[[broadcast_252]])
// CHECK-NEXT:  %[[convert_267:[^ ]+]] = u64[1]{0} convert(%[[xor_253]])
// CHECK-NEXT:  %[[constant_268:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_269:[^ ]+]] = u64[1]{0} broadcast(%[[constant_268]]), dimensions={}
// CHECK-NEXT:  %[[multiply_270:[^ ]+]] = u64[1]{0} multiply(%[[convert_267]], %[[broadcast_269]])
// CHECK-NEXT:  %[[constant_272:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_273:[^ ]+]] = u64[1]{0} broadcast(%[[constant_272]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_274:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_270]], %[[broadcast_273]])
// CHECK-NEXT:  %[[convert_275:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_274]])
// CHECK-NEXT:  %[[constant_207:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_208:[^ ]+]] = u64[1]{0} broadcast(%[[constant_207]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_209:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_205]], %[[broadcast_208]])
// CHECK-NEXT:  %[[convert_210:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_209]])
// CHECK-NEXT:  %[[convert_178:[^ ]+]] = u32[1]{0} convert(%[[multiply_177]])
// CHECK-NEXT:  %[[xor_223:[^ ]+]] = u32[1]{0} xor(%[[convert_210]], %[[convert_178]])
// CHECK-NEXT:  %[[broadcast_224:[^ ]+]] = u32[1]{0} broadcast(%[[add_201]]), dimensions={}
// CHECK-NEXT:  %[[xor_225:[^ ]+]] = u32[1]{0} xor(%[[xor_223]], %[[broadcast_224]])
// CHECK-NEXT:  %[[convert_239:[^ ]+]] = u64[1]{0} convert(%[[xor_225]])
// CHECK-NEXT:  %[[constant_240:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_241:[^ ]+]] = u64[1]{0} broadcast(%[[constant_240]]), dimensions={}
// CHECK-NEXT:  %[[multiply_242:[^ ]+]] = u64[1]{0} multiply(%[[convert_239]], %[[broadcast_241]])
// CHECK-NEXT:  %[[convert_243:[^ ]+]] = u32[1]{0} convert(%[[multiply_242]])
// CHECK-NEXT:  %[[xor_276:[^ ]+]] = u32[1]{0} xor(%[[convert_275]], %[[convert_243]])
// CHECK-NEXT:  %[[broadcast_277:[^ ]+]] = u32[1]{0} broadcast(%[[add_255]]), dimensions={}
// CHECK-NEXT:  %[[xor_278:[^ ]+]] = u32[1]{0} xor(%[[xor_276]], %[[broadcast_277]])
// CHECK-NEXT:  %[[convert_286:[^ ]+]] = u64[1]{0} convert(%[[xor_278]])
// CHECK-NEXT:  %[[constant_287:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_288:[^ ]+]] = u64[1]{0} broadcast(%[[constant_287]]), dimensions={}
// CHECK-NEXT:  %[[multiply_289:[^ ]+]] = u64[1]{0} multiply(%[[convert_286]], %[[broadcast_288]])
// CHECK-NEXT:  %[[constant_291:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_292:[^ ]+]] = u64[1]{0} broadcast(%[[constant_291]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_293:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_289]], %[[broadcast_292]])
// CHECK-NEXT:  %[[convert_294:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_293]])
// CHECK-NEXT:  %[[constant_244:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_245:[^ ]+]] = u64[1]{0} broadcast(%[[constant_244]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_246:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_242]], %[[broadcast_245]])
// CHECK-NEXT:  %[[convert_247:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_246]])
// CHECK-NEXT:  %[[convert_215:[^ ]+]] = u32[1]{0} convert(%[[multiply_214]])
// CHECK-NEXT:  %[[xor_248:[^ ]+]] = u32[1]{0} xor(%[[convert_247]], %[[convert_215]])
// CHECK-NEXT:  %[[broadcast_249:[^ ]+]] = u32[1]{0} broadcast(%[[add_227]]), dimensions={}
// CHECK-NEXT:  %[[xor_250:[^ ]+]] = u32[1]{0} xor(%[[xor_248]], %[[broadcast_249]])
// CHECK-NEXT:  %[[convert_258:[^ ]+]] = u64[1]{0} convert(%[[xor_250]])
// CHECK-NEXT:  %[[constant_259:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_260:[^ ]+]] = u64[1]{0} broadcast(%[[constant_259]]), dimensions={}
// CHECK-NEXT:  %[[multiply_261:[^ ]+]] = u64[1]{0} multiply(%[[convert_258]], %[[broadcast_260]])
// CHECK-NEXT:  %[[convert_262:[^ ]+]] = u32[1]{0} convert(%[[multiply_261]])
// CHECK-NEXT:  %[[xor_307:[^ ]+]] = u32[1]{0} xor(%[[convert_294]], %[[convert_262]])
// CHECK-NEXT:  %[[broadcast_308:[^ ]+]] = u32[1]{0} broadcast(%[[add_285]]), dimensions={}
// CHECK-NEXT:  %[[xor_309:[^ ]+]] = u32[1]{0} xor(%[[xor_307]], %[[broadcast_308]])
// CHECK-NEXT:  %[[convert_323:[^ ]+]] = u64[1]{0} convert(%[[xor_309]])
// CHECK-NEXT:  %[[constant_324:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_325:[^ ]+]] = u64[1]{0} broadcast(%[[constant_324]]), dimensions={}
// CHECK-NEXT:  %[[multiply_326:[^ ]+]] = u64[1]{0} multiply(%[[convert_323]], %[[broadcast_325]])
// CHECK-NEXT:  %[[constant_328:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_329:[^ ]+]] = u64[1]{0} broadcast(%[[constant_328]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_330:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_326]], %[[broadcast_329]])
// CHECK-NEXT:  %[[convert_331:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_330]])
// CHECK-NEXT:  %[[constant_263:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_264:[^ ]+]] = u64[1]{0} broadcast(%[[constant_263]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_265:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_261]], %[[broadcast_264]])
// CHECK-NEXT:  %[[convert_266:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_265]])
// CHECK-NEXT:  %[[convert_234:[^ ]+]] = u32[1]{0} convert(%[[multiply_233]])
// CHECK-NEXT:  %[[xor_279:[^ ]+]] = u32[1]{0} xor(%[[convert_266]], %[[convert_234]])
// CHECK-NEXT:  %[[broadcast_280:[^ ]+]] = u32[1]{0} broadcast(%[[add_257]]), dimensions={}
// CHECK-NEXT:  %[[xor_281:[^ ]+]] = u32[1]{0} xor(%[[xor_279]], %[[broadcast_280]])
// CHECK-NEXT:  %[[convert_295:[^ ]+]] = u64[1]{0} convert(%[[xor_281]])
// CHECK-NEXT:  %[[constant_296:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_297:[^ ]+]] = u64[1]{0} broadcast(%[[constant_296]]), dimensions={}
// CHECK-NEXT:  %[[multiply_298:[^ ]+]] = u64[1]{0} multiply(%[[convert_295]], %[[broadcast_297]])
// CHECK-NEXT:  %[[convert_299:[^ ]+]] = u32[1]{0} convert(%[[multiply_298]])
// CHECK-NEXT:  %[[xor_332:[^ ]+]] = u32[1]{0} xor(%[[convert_331]], %[[convert_299]])
// CHECK-NEXT:  %[[broadcast_333:[^ ]+]] = u32[1]{0} broadcast(%[[add_311]]), dimensions={}
// CHECK-NEXT:  %[[xor_334:[^ ]+]] = u32[1]{0} xor(%[[xor_332]], %[[broadcast_333]])
// CHECK-NEXT:  %[[convert_342:[^ ]+]] = u64[1]{0} convert(%[[xor_334]])
// CHECK-NEXT:  %[[convert_327:[^ ]+]] = u32[1]{0} convert(%[[multiply_326]])
// CHECK-NEXT:  %[[convert_343:[^ ]+]] = u64[1]{0} convert(%[[convert_327]])
// CHECK-NEXT:  %[[constant_344:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_345:[^ ]+]] = u64[1]{0} broadcast(%[[constant_344]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_346:[^ ]+]] = u64[1]{0} shift-left(%[[convert_343]], %[[broadcast_345]])
// CHECK-NEXT:  %[[or_347:[^ ]+]] = u64[1]{0} or(%[[convert_342]], %[[shift_left_346]])
// CHECK-NEXT:  %[[reshape_354:[^ ]+]] = u64[1,1]{1,0} reshape(%[[or_347]])
// CHECK-NEXT:  %[[constant_300:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_301:[^ ]+]] = u64[1]{0} broadcast(%[[constant_300]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_302:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_298]], %[[broadcast_301]])
// CHECK-NEXT:  %[[convert_303:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_302]])
// CHECK-NEXT:  %[[convert_271:[^ ]+]] = u32[1]{0} convert(%[[multiply_270]])
// CHECK-NEXT:  %[[xor_304:[^ ]+]] = u32[1]{0} xor(%[[convert_303]], %[[convert_271]])
// CHECK-NEXT:  %[[broadcast_305:[^ ]+]] = u32[1]{0} broadcast(%[[add_283]]), dimensions={}
// CHECK-NEXT:  %[[xor_306:[^ ]+]] = u32[1]{0} xor(%[[xor_304]], %[[broadcast_305]])
// CHECK-NEXT:  %[[convert_314:[^ ]+]] = u64[1]{0} convert(%[[xor_306]])
// CHECK-NEXT:  %[[constant_315:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_316:[^ ]+]] = u64[1]{0} broadcast(%[[constant_315]]), dimensions={}
// CHECK-NEXT:  %[[multiply_317:[^ ]+]] = u64[1]{0} multiply(%[[convert_314]], %[[broadcast_316]])
// CHECK-NEXT:  %[[constant_319:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_320:[^ ]+]] = u64[1]{0} broadcast(%[[constant_319]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_321:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_317]], %[[broadcast_320]])
// CHECK-NEXT:  %[[convert_322:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_321]])
// CHECK-NEXT:  %[[convert_290:[^ ]+]] = u32[1]{0} convert(%[[multiply_289]])
// CHECK-NEXT:  %[[xor_335:[^ ]+]] = u32[1]{0} xor(%[[convert_322]], %[[convert_290]])
// CHECK-NEXT:  %[[broadcast_336:[^ ]+]] = u32[1]{0} broadcast(%[[add_313]]), dimensions={}
// CHECK-NEXT:  %[[xor_337:[^ ]+]] = u32[1]{0} xor(%[[xor_335]], %[[broadcast_336]])
// CHECK-NEXT:  %[[convert_348:[^ ]+]] = u64[1]{0} convert(%[[xor_337]])
// CHECK-NEXT:  %[[convert_318:[^ ]+]] = u32[1]{0} convert(%[[multiply_317]])
// CHECK-NEXT:  %[[convert_349:[^ ]+]] = u64[1]{0} convert(%[[convert_318]])
// CHECK-NEXT:  %[[constant_350:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_351:[^ ]+]] = u64[1]{0} broadcast(%[[constant_350]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_352:[^ ]+]] = u64[1]{0} shift-left(%[[convert_349]], %[[broadcast_351]])
// CHECK-NEXT:  %[[or_353:[^ ]+]] = u64[1]{0} or(%[[convert_348]], %[[shift_left_352]])
// CHECK-NEXT:  %[[reshape_355:[^ ]+]] = u64[1,1]{1,0} reshape(%[[or_353]])
// CHECK-NEXT:  %[[concatenate_356:[^ ]+]] = u64[1,2]{1,0} concatenate(%[[reshape_354]], %[[reshape_355]]), dimensions={1}
// CHECK-NEXT:  %[[reshape_357:[^ ]+]] = u64[2]{0} reshape(%[[concatenate_356]])
// CHECK-NEXT:  %[[slice_358:[^ ]+]] = u64[1]{0} slice(%[[reshape_357]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_359:[^ ]+]] = u64[] reshape(%[[slice_358]])
// CHECK-NEXT:  ROOT %[[tuple_362:[^ ]+]] = (u64[3]{0}, u64[]) tuple(%[[concatenate_361]], %[[reshape_359]])

// CHECK-LABEL: ENTRY %test_philox_u64
// CHECK-NEXT:  %[[initial_state:[^ ]+]] = u64[6]{0} constant({0, 1, 8, 9, 4, 1})
// CHECK-NEXT:  ROOT %[[call:[^ ]+]] = (u64[6]{0}, u64[]) call(%[[initial_state]]), to_apply=%[[$rng_363]]

HloModule TestPhiloxAlgorithm

ENTRY test_philox_u64 {
  initial_state = u64[6] constant({0, 1, 8, 9, 4, 1})
  ROOT result = (u64[6], u64[]) rng-bit-generator(initial_state), algorithm=rng_philox
}

// -----

// CHECK-LABEL: HloModule TestPhiloxAlgorithm, entry_computation_layout={()->(u64[6]{0}, u8[])}

// CHECK:       %[[$rng_354:[^ ]+]]
// CHECK-NEXT:  %[[state_1:[^ ]+]] = u64[6]{0} parameter(0)
// CHECK-NEXT:  %[[slice_2:[^ ]+]] = u64[1]{0} slice(%[[state_1]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_3:[^ ]+]] = u64[] reshape(%[[slice_2]])
// CHECK-NEXT:  %[[convert_6:[^ ]+]] = u32[] convert(%[[reshape_3]])
// CHECK-NEXT:  %[[constant_86:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_87:[^ ]+]] = u32[] add(%[[convert_6]], %[[constant_86]])
// CHECK-NEXT:  %[[constant_114:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_115:[^ ]+]] = u32[] add(%[[add_87]], %[[constant_114]])
// CHECK-NEXT:  %[[constant_142:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_143:[^ ]+]] = u32[] add(%[[add_115]], %[[constant_142]])
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_171:[^ ]+]] = u32[] add(%[[add_143]], %[[constant_170]])
// CHECK-NEXT:  %[[constant_198:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_199:[^ ]+]] = u32[] add(%[[add_171]], %[[constant_198]])
// CHECK-NEXT:  %[[constant_226:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_227:[^ ]+]] = u32[] add(%[[add_199]], %[[constant_226]])
// CHECK-NEXT:  %[[constant_254:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_255:[^ ]+]] = u32[] add(%[[add_227]], %[[constant_254]])
// CHECK-NEXT:  %[[constant_282:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_283:[^ ]+]] = u32[] add(%[[add_255]], %[[constant_282]])
// CHECK-NEXT:  %[[constant_310:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_311:[^ ]+]] = u32[] add(%[[add_283]], %[[constant_310]])
// CHECK-NEXT:  %[[constant_338:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_339:[^ ]+]] = u32[] add(%[[add_311]], %[[constant_338]])
// CHECK-NEXT:  %[[constant_5:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_7:[^ ]+]] = u64[] shift-right-logical(%[[reshape_3]], %[[constant_5]])
// CHECK-NEXT:  %[[convert_8:[^ ]+]] = u32[] convert(%[[shift_right_logical_7]])
// CHECK-NEXT:  %[[constant_88:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_89:[^ ]+]] = u32[] add(%[[convert_8]], %[[constant_88]])
// CHECK-NEXT:  %[[constant_116:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_117:[^ ]+]] = u32[] add(%[[add_89]], %[[constant_116]])
// CHECK-NEXT:  %[[constant_144:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_145:[^ ]+]] = u32[] add(%[[add_117]], %[[constant_144]])
// CHECK-NEXT:  %[[constant_172:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_173:[^ ]+]] = u32[] add(%[[add_145]], %[[constant_172]])
// CHECK-NEXT:  %[[constant_200:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_201:[^ ]+]] = u32[] add(%[[add_173]], %[[constant_200]])
// CHECK-NEXT:  %[[constant_228:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_229:[^ ]+]] = u32[] add(%[[add_201]], %[[constant_228]])
// CHECK-NEXT:  %[[constant_256:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_257:[^ ]+]] = u32[] add(%[[add_229]], %[[constant_256]])
// CHECK-NEXT:  %[[constant_284:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_285:[^ ]+]] = u32[] add(%[[add_257]], %[[constant_284]])
// CHECK-NEXT:  %[[constant_312:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_313:[^ ]+]] = u32[] add(%[[add_285]], %[[constant_312]])
// CHECK-NEXT:  %[[constant_340:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_341:[^ ]+]] = u32[] add(%[[add_313]], %[[constant_340]])
// CHECK-NEXT:  %[[reshape_351:[^ ]+]] = u64[1]{0} reshape(%[[reshape_3]])
// CHECK-NEXT:  %[[slice_4:[^ ]+]] = u64[2]{0} slice(%[[state_1]]), slice={[1:3]}
// CHECK-NEXT:  %[[slice_9:[^ ]+]] = u64[1]{0} slice(%[[slice_4]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_10:[^ ]+]] = u64[] reshape(%[[slice_9]])
// CHECK-NEXT:  %[[convert_14:[^ ]+]] = u32[] convert(%[[reshape_10]])
// CHECK-NEXT:  %[[convert_22:[^ ]+]] = u64[] convert(%[[convert_14]])
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_15:[^ ]+]] = u64[] shift-right-logical(%[[reshape_10]], %[[constant_13]])
// CHECK-NEXT:  %[[convert_16:[^ ]+]] = u32[] convert(%[[shift_right_logical_15]])
// CHECK-NEXT:  %[[convert_23:[^ ]+]] = u64[] convert(%[[convert_16]])
// CHECK-NEXT:  %[[constant_24:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_left_25:[^ ]+]] = u64[] shift-left(%[[convert_23]], %[[constant_24]])
// CHECK-NEXT:  %[[or_26:[^ ]+]] = u64[] or(%[[convert_22]], %[[shift_left_25]])
// CHECK-NEXT:  %[[constant_51:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_52:[^ ]+]] = u64[] add(%[[or_26]], %[[constant_51]])
// CHECK-NEXT:  %[[reshape_59:[^ ]+]] = u64[1]{0} reshape(%[[add_52]])
// CHECK-NEXT:  %[[compare_54:[^ ]+]] = pred[] compare(%[[add_52]], %[[or_26]]), direction=LT
// CHECK-NEXT:  %[[slice_11:[^ ]+]] = u64[1]{0} slice(%[[slice_4]]), slice={[1:2]}
// CHECK-NEXT:  %[[reshape_12:[^ ]+]] = u64[] reshape(%[[slice_11]])
// CHECK-NEXT:  %[[convert_18:[^ ]+]] = u32[] convert(%[[reshape_12]])
// CHECK-NEXT:  %[[convert_27:[^ ]+]] = u64[] convert(%[[convert_18]])
// CHECK-NEXT:  %[[constant_17:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_19:[^ ]+]] = u64[] shift-right-logical(%[[reshape_12]], %[[constant_17]])
// CHECK-NEXT:  %[[convert_20:[^ ]+]] = u32[] convert(%[[shift_right_logical_19]])
// CHECK-NEXT:  %[[convert_28:[^ ]+]] = u64[] convert(%[[convert_20]])
// CHECK-NEXT:  %[[constant_29:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_left_30:[^ ]+]] = u64[] shift-left(%[[convert_28]], %[[constant_29]])
// CHECK-NEXT:  %[[or_31:[^ ]+]] = u64[] or(%[[convert_27]], %[[shift_left_30]])
// CHECK-NEXT:  %[[constant_53:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_55:[^ ]+]] = u64[] add(%[[or_31]], %[[constant_53]])
// CHECK-NEXT:  %[[broadcast_56:[^ ]+]] = u64[] broadcast(%[[add_55]]), dimensions={}
// CHECK-NEXT:  %[[broadcast_57:[^ ]+]] = u64[] broadcast(%[[or_31]]), dimensions={}
// CHECK-NEXT:  %[[select_58:[^ ]+]] = u64[] select(%[[compare_54]], %[[broadcast_56]], %[[broadcast_57]])
// CHECK-NEXT:  %[[reshape_60:[^ ]+]] = u64[1]{0} reshape(%[[select_58]])
// CHECK-NEXT:  %[[concatenate_61:[^ ]+]] = u64[2]{0} concatenate(%[[reshape_59]], %[[reshape_60]]), dimensions={0}
// CHECK-NEXT:  %[[concatenate_352:[^ ]+]] = u64[3]{0} concatenate(%[[reshape_351]], %[[concatenate_61]]), dimensions={0}
// CHECK-NEXT:  %[[broadcast_32:[^ ]+]] = u64[1]{0} broadcast(%[[or_26]]), dimensions={}
// CHECK-NEXT:  %[[iota_21:[^ ]+]] = u64[1]{0} iota(), iota_dimension=0
// CHECK-NEXT:  %[[add_33:[^ ]+]] = u64[1]{0} add(%[[broadcast_32]], %[[iota_21]])
// CHECK-NEXT:  %[[convert_42:[^ ]+]] = u32[1]{0} convert(%[[add_33]])
// CHECK-NEXT:  %[[convert_62:[^ ]+]] = u64[1]{0} convert(%[[convert_42]])
// CHECK-NEXT:  %[[constant_63:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_64:[^ ]+]] = u64[1]{0} broadcast(%[[constant_63]]), dimensions={}
// CHECK-NEXT:  %[[multiply_65:[^ ]+]] = u64[1]{0} multiply(%[[convert_62]], %[[broadcast_64]])
// CHECK-NEXT:  %[[constant_67:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_68:[^ ]+]] = u64[1]{0} broadcast(%[[constant_67]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_69:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_65]], %[[broadcast_68]])
// CHECK-NEXT:  %[[convert_70:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_69]])
// CHECK-NEXT:  %[[broadcast_35:[^ ]+]] = u64[1]{0} broadcast(%[[or_26]]), dimensions={}
// CHECK-NEXT:  %[[compare_36:[^ ]+]] = pred[1]{0} compare(%[[add_33]], %[[broadcast_35]]), direction=LT
// CHECK-NEXT:  %[[constant_34:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_37:[^ ]+]] = u64[] add(%[[or_31]], %[[constant_34]])
// CHECK-NEXT:  %[[broadcast_38:[^ ]+]] = u64[1]{0} broadcast(%[[add_37]]), dimensions={}
// CHECK-NEXT:  %[[broadcast_39:[^ ]+]] = u64[1]{0} broadcast(%[[or_31]]), dimensions={}
// CHECK-NEXT:  %[[select_40:[^ ]+]] = u64[1]{0} select(%[[compare_36]], %[[broadcast_38]], %[[broadcast_39]])
// CHECK-NEXT:  %[[constant_46:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_48:[^ ]+]] = u64[1]{0} broadcast(%[[constant_46]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_49:[^ ]+]] = u64[1]{0} shift-right-logical(%[[select_40]], %[[broadcast_48]])
// CHECK-NEXT:  %[[convert_50:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_49]])
// CHECK-NEXT:  %[[xor_83:[^ ]+]] = u32[1]{0} xor(%[[convert_70]], %[[convert_50]])
// CHECK-NEXT:  %[[broadcast_84:[^ ]+]] = u32[1]{0} broadcast(%[[convert_8]]), dimensions={}
// CHECK-NEXT:  %[[xor_85:[^ ]+]] = u32[1]{0} xor(%[[xor_83]], %[[broadcast_84]])
// CHECK-NEXT:  %[[convert_99:[^ ]+]] = u64[1]{0} convert(%[[xor_85]])
// CHECK-NEXT:  %[[constant_100:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_101:[^ ]+]] = u64[1]{0} broadcast(%[[constant_100]]), dimensions={}
// CHECK-NEXT:  %[[multiply_102:[^ ]+]] = u64[1]{0} multiply(%[[convert_99]], %[[broadcast_101]])
// CHECK-NEXT:  %[[constant_104:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_105:[^ ]+]] = u64[1]{0} broadcast(%[[constant_104]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_106:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_102]], %[[broadcast_105]])
// CHECK-NEXT:  %[[convert_107:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_106]])
// CHECK-NEXT:  %[[convert_47:[^ ]+]] = u32[1]{0} convert(%[[select_40]])
// CHECK-NEXT:  %[[convert_71:[^ ]+]] = u64[1]{0} convert(%[[convert_47]])
// CHECK-NEXT:  %[[constant_72:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_73:[^ ]+]] = u64[1]{0} broadcast(%[[constant_72]]), dimensions={}
// CHECK-NEXT:  %[[multiply_74:[^ ]+]] = u64[1]{0} multiply(%[[convert_71]], %[[broadcast_73]])
// CHECK-NEXT:  %[[convert_75:[^ ]+]] = u32[1]{0} convert(%[[multiply_74]])
// CHECK-NEXT:  %[[xor_108:[^ ]+]] = u32[1]{0} xor(%[[convert_107]], %[[convert_75]])
// CHECK-NEXT:  %[[broadcast_109:[^ ]+]] = u32[1]{0} broadcast(%[[add_87]]), dimensions={}
// CHECK-NEXT:  %[[xor_110:[^ ]+]] = u32[1]{0} xor(%[[xor_108]], %[[broadcast_109]])
// CHECK-NEXT:  %[[convert_118:[^ ]+]] = u64[1]{0} convert(%[[xor_110]])
// CHECK-NEXT:  %[[constant_119:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_120:[^ ]+]] = u64[1]{0} broadcast(%[[constant_119]]), dimensions={}
// CHECK-NEXT:  %[[multiply_121:[^ ]+]] = u64[1]{0} multiply(%[[convert_118]], %[[broadcast_120]])
// CHECK-NEXT:  %[[constant_123:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_124:[^ ]+]] = u64[1]{0} broadcast(%[[constant_123]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_125:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_121]], %[[broadcast_124]])
// CHECK-NEXT:  %[[convert_126:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_125]])
// CHECK-NEXT:  %[[constant_76:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_77:[^ ]+]] = u64[1]{0} broadcast(%[[constant_76]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_78:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_74]], %[[broadcast_77]])
// CHECK-NEXT:  %[[convert_79:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_78]])
// CHECK-NEXT:  %[[constant_41:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_43:[^ ]+]] = u64[1]{0} broadcast(%[[constant_41]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_44:[^ ]+]] = u64[1]{0} shift-right-logical(%[[add_33]], %[[broadcast_43]])
// CHECK-NEXT:  %[[convert_45:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_44]])
// CHECK-NEXT:  %[[xor_80:[^ ]+]] = u32[1]{0} xor(%[[convert_79]], %[[convert_45]])
// CHECK-NEXT:  %[[broadcast_81:[^ ]+]] = u32[1]{0} broadcast(%[[convert_6]]), dimensions={}
// CHECK-NEXT:  %[[xor_82:[^ ]+]] = u32[1]{0} xor(%[[xor_80]], %[[broadcast_81]])
// CHECK-NEXT:  %[[convert_90:[^ ]+]] = u64[1]{0} convert(%[[xor_82]])
// CHECK-NEXT:  %[[constant_91:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_92:[^ ]+]] = u64[1]{0} broadcast(%[[constant_91]]), dimensions={}
// CHECK-NEXT:  %[[multiply_93:[^ ]+]] = u64[1]{0} multiply(%[[convert_90]], %[[broadcast_92]])
// CHECK-NEXT:  %[[convert_94:[^ ]+]] = u32[1]{0} convert(%[[multiply_93]])
// CHECK-NEXT:  %[[xor_139:[^ ]+]] = u32[1]{0} xor(%[[convert_126]], %[[convert_94]])
// CHECK-NEXT:  %[[broadcast_140:[^ ]+]] = u32[1]{0} broadcast(%[[add_117]]), dimensions={}
// CHECK-NEXT:  %[[xor_141:[^ ]+]] = u32[1]{0} xor(%[[xor_139]], %[[broadcast_140]])
// CHECK-NEXT:  %[[convert_155:[^ ]+]] = u64[1]{0} convert(%[[xor_141]])
// CHECK-NEXT:  %[[constant_156:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_157:[^ ]+]] = u64[1]{0} broadcast(%[[constant_156]]), dimensions={}
// CHECK-NEXT:  %[[multiply_158:[^ ]+]] = u64[1]{0} multiply(%[[convert_155]], %[[broadcast_157]])
// CHECK-NEXT:  %[[constant_160:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_161:[^ ]+]] = u64[1]{0} broadcast(%[[constant_160]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_162:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_158]], %[[broadcast_161]])
// CHECK-NEXT:  %[[convert_163:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_162]])
// CHECK-NEXT:  %[[constant_95:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_96:[^ ]+]] = u64[1]{0} broadcast(%[[constant_95]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_97:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_93]], %[[broadcast_96]])
// CHECK-NEXT:  %[[convert_98:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_97]])
// CHECK-NEXT:  %[[convert_66:[^ ]+]] = u32[1]{0} convert(%[[multiply_65]])
// CHECK-NEXT:  %[[xor_111:[^ ]+]] = u32[1]{0} xor(%[[convert_98]], %[[convert_66]])
// CHECK-NEXT:  %[[broadcast_112:[^ ]+]] = u32[1]{0} broadcast(%[[add_89]]), dimensions={}
// CHECK-NEXT:  %[[xor_113:[^ ]+]] = u32[1]{0} xor(%[[xor_111]], %[[broadcast_112]])
// CHECK-NEXT:  %[[convert_127:[^ ]+]] = u64[1]{0} convert(%[[xor_113]])
// CHECK-NEXT:  %[[constant_128:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_129:[^ ]+]] = u64[1]{0} broadcast(%[[constant_128]]), dimensions={}
// CHECK-NEXT:  %[[multiply_130:[^ ]+]] = u64[1]{0} multiply(%[[convert_127]], %[[broadcast_129]])
// CHECK-NEXT:  %[[convert_131:[^ ]+]] = u32[1]{0} convert(%[[multiply_130]])
// CHECK-NEXT:  %[[xor_164:[^ ]+]] = u32[1]{0} xor(%[[convert_163]], %[[convert_131]])
// CHECK-NEXT:  %[[broadcast_165:[^ ]+]] = u32[1]{0} broadcast(%[[add_143]]), dimensions={}
// CHECK-NEXT:  %[[xor_166:[^ ]+]] = u32[1]{0} xor(%[[xor_164]], %[[broadcast_165]])
// CHECK-NEXT:  %[[convert_174:[^ ]+]] = u64[1]{0} convert(%[[xor_166]])
// CHECK-NEXT:  %[[constant_175:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_176:[^ ]+]] = u64[1]{0} broadcast(%[[constant_175]]), dimensions={}
// CHECK-NEXT:  %[[multiply_177:[^ ]+]] = u64[1]{0} multiply(%[[convert_174]], %[[broadcast_176]])
// CHECK-NEXT:  %[[constant_179:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_180:[^ ]+]] = u64[1]{0} broadcast(%[[constant_179]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_181:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_177]], %[[broadcast_180]])
// CHECK-NEXT:  %[[convert_182:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_181]])
// CHECK-NEXT:  %[[constant_132:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_133:[^ ]+]] = u64[1]{0} broadcast(%[[constant_132]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_134:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_130]], %[[broadcast_133]])
// CHECK-NEXT:  %[[convert_135:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_134]])
// CHECK-NEXT:  %[[convert_103:[^ ]+]] = u32[1]{0} convert(%[[multiply_102]])
// CHECK-NEXT:  %[[xor_136:[^ ]+]] = u32[1]{0} xor(%[[convert_135]], %[[convert_103]])
// CHECK-NEXT:  %[[broadcast_137:[^ ]+]] = u32[1]{0} broadcast(%[[add_115]]), dimensions={}
// CHECK-NEXT:  %[[xor_138:[^ ]+]] = u32[1]{0} xor(%[[xor_136]], %[[broadcast_137]])
// CHECK-NEXT:  %[[convert_146:[^ ]+]] = u64[1]{0} convert(%[[xor_138]])
// CHECK-NEXT:  %[[constant_147:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_148:[^ ]+]] = u64[1]{0} broadcast(%[[constant_147]]), dimensions={}
// CHECK-NEXT:  %[[multiply_149:[^ ]+]] = u64[1]{0} multiply(%[[convert_146]], %[[broadcast_148]])
// CHECK-NEXT:  %[[convert_150:[^ ]+]] = u32[1]{0} convert(%[[multiply_149]])
// CHECK-NEXT:  %[[xor_195:[^ ]+]] = u32[1]{0} xor(%[[convert_182]], %[[convert_150]])
// CHECK-NEXT:  %[[broadcast_196:[^ ]+]] = u32[1]{0} broadcast(%[[add_173]]), dimensions={}
// CHECK-NEXT:  %[[xor_197:[^ ]+]] = u32[1]{0} xor(%[[xor_195]], %[[broadcast_196]])
// CHECK-NEXT:  %[[convert_211:[^ ]+]] = u64[1]{0} convert(%[[xor_197]])
// CHECK-NEXT:  %[[constant_212:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_213:[^ ]+]] = u64[1]{0} broadcast(%[[constant_212]]), dimensions={}
// CHECK-NEXT:  %[[multiply_214:[^ ]+]] = u64[1]{0} multiply(%[[convert_211]], %[[broadcast_213]])
// CHECK-NEXT:  %[[constant_216:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_217:[^ ]+]] = u64[1]{0} broadcast(%[[constant_216]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_218:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_214]], %[[broadcast_217]])
// CHECK-NEXT:  %[[convert_219:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_218]])
// CHECK-NEXT:  %[[constant_151:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_152:[^ ]+]] = u64[1]{0} broadcast(%[[constant_151]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_153:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_149]], %[[broadcast_152]])
// CHECK-NEXT:  %[[convert_154:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_153]])
// CHECK-NEXT:  %[[convert_122:[^ ]+]] = u32[1]{0} convert(%[[multiply_121]])
// CHECK-NEXT:  %[[xor_167:[^ ]+]] = u32[1]{0} xor(%[[convert_154]], %[[convert_122]])
// CHECK-NEXT:  %[[broadcast_168:[^ ]+]] = u32[1]{0} broadcast(%[[add_145]]), dimensions={}
// CHECK-NEXT:  %[[xor_169:[^ ]+]] = u32[1]{0} xor(%[[xor_167]], %[[broadcast_168]])
// CHECK-NEXT:  %[[convert_183:[^ ]+]] = u64[1]{0} convert(%[[xor_169]])
// CHECK-NEXT:  %[[constant_184:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_185:[^ ]+]] = u64[1]{0} broadcast(%[[constant_184]]), dimensions={}
// CHECK-NEXT:  %[[multiply_186:[^ ]+]] = u64[1]{0} multiply(%[[convert_183]], %[[broadcast_185]])
// CHECK-NEXT:  %[[convert_187:[^ ]+]] = u32[1]{0} convert(%[[multiply_186]])
// CHECK-NEXT:  %[[xor_220:[^ ]+]] = u32[1]{0} xor(%[[convert_219]], %[[convert_187]])
// CHECK-NEXT:  %[[broadcast_221:[^ ]+]] = u32[1]{0} broadcast(%[[add_199]]), dimensions={}
// CHECK-NEXT:  %[[xor_222:[^ ]+]] = u32[1]{0} xor(%[[xor_220]], %[[broadcast_221]])
// CHECK-NEXT:  %[[convert_230:[^ ]+]] = u64[1]{0} convert(%[[xor_222]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_232:[^ ]+]] = u64[1]{0} broadcast(%[[constant_231]]), dimensions={}
// CHECK-NEXT:  %[[multiply_233:[^ ]+]] = u64[1]{0} multiply(%[[convert_230]], %[[broadcast_232]])
// CHECK-NEXT:  %[[constant_235:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_236:[^ ]+]] = u64[1]{0} broadcast(%[[constant_235]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_237:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_233]], %[[broadcast_236]])
// CHECK-NEXT:  %[[convert_238:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_237]])
// CHECK-NEXT:  %[[constant_188:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_189:[^ ]+]] = u64[1]{0} broadcast(%[[constant_188]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_190:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_186]], %[[broadcast_189]])
// CHECK-NEXT:  %[[convert_191:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_190]])
// CHECK-NEXT:  %[[convert_159:[^ ]+]] = u32[1]{0} convert(%[[multiply_158]])
// CHECK-NEXT:  %[[xor_192:[^ ]+]] = u32[1]{0} xor(%[[convert_191]], %[[convert_159]])
// CHECK-NEXT:  %[[broadcast_193:[^ ]+]] = u32[1]{0} broadcast(%[[add_171]]), dimensions={}
// CHECK-NEXT:  %[[xor_194:[^ ]+]] = u32[1]{0} xor(%[[xor_192]], %[[broadcast_193]])
// CHECK-NEXT:  %[[convert_202:[^ ]+]] = u64[1]{0} convert(%[[xor_194]])
// CHECK-NEXT:  %[[constant_203:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_204:[^ ]+]] = u64[1]{0} broadcast(%[[constant_203]]), dimensions={}
// CHECK-NEXT:  %[[multiply_205:[^ ]+]] = u64[1]{0} multiply(%[[convert_202]], %[[broadcast_204]])
// CHECK-NEXT:  %[[convert_206:[^ ]+]] = u32[1]{0} convert(%[[multiply_205]])
// CHECK-NEXT:  %[[xor_251:[^ ]+]] = u32[1]{0} xor(%[[convert_238]], %[[convert_206]])
// CHECK-NEXT:  %[[broadcast_252:[^ ]+]] = u32[1]{0} broadcast(%[[add_229]]), dimensions={}
// CHECK-NEXT:  %[[xor_253:[^ ]+]] = u32[1]{0} xor(%[[xor_251]], %[[broadcast_252]])
// CHECK-NEXT:  %[[convert_267:[^ ]+]] = u64[1]{0} convert(%[[xor_253]])
// CHECK-NEXT:  %[[constant_268:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_269:[^ ]+]] = u64[1]{0} broadcast(%[[constant_268]]), dimensions={}
// CHECK-NEXT:  %[[multiply_270:[^ ]+]] = u64[1]{0} multiply(%[[convert_267]], %[[broadcast_269]])
// CHECK-NEXT:  %[[constant_272:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_273:[^ ]+]] = u64[1]{0} broadcast(%[[constant_272]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_274:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_270]], %[[broadcast_273]])
// CHECK-NEXT:  %[[convert_275:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_274]])
// CHECK-NEXT:  %[[constant_207:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_208:[^ ]+]] = u64[1]{0} broadcast(%[[constant_207]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_209:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_205]], %[[broadcast_208]])
// CHECK-NEXT:  %[[convert_210:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_209]])
// CHECK-NEXT:  %[[convert_178:[^ ]+]] = u32[1]{0} convert(%[[multiply_177]])
// CHECK-NEXT:  %[[xor_223:[^ ]+]] = u32[1]{0} xor(%[[convert_210]], %[[convert_178]])
// CHECK-NEXT:  %[[broadcast_224:[^ ]+]] = u32[1]{0} broadcast(%[[add_201]]), dimensions={}
// CHECK-NEXT:  %[[xor_225:[^ ]+]] = u32[1]{0} xor(%[[xor_223]], %[[broadcast_224]])
// CHECK-NEXT:  %[[convert_239:[^ ]+]] = u64[1]{0} convert(%[[xor_225]])
// CHECK-NEXT:  %[[constant_240:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_241:[^ ]+]] = u64[1]{0} broadcast(%[[constant_240]]), dimensions={}
// CHECK-NEXT:  %[[multiply_242:[^ ]+]] = u64[1]{0} multiply(%[[convert_239]], %[[broadcast_241]])
// CHECK-NEXT:  %[[convert_243:[^ ]+]] = u32[1]{0} convert(%[[multiply_242]])
// CHECK-NEXT:  %[[xor_276:[^ ]+]] = u32[1]{0} xor(%[[convert_275]], %[[convert_243]])
// CHECK-NEXT:  %[[broadcast_277:[^ ]+]] = u32[1]{0} broadcast(%[[add_255]]), dimensions={}
// CHECK-NEXT:  %[[xor_278:[^ ]+]] = u32[1]{0} xor(%[[xor_276]], %[[broadcast_277]])
// CHECK-NEXT:  %[[convert_286:[^ ]+]] = u64[1]{0} convert(%[[xor_278]])
// CHECK-NEXT:  %[[constant_287:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_288:[^ ]+]] = u64[1]{0} broadcast(%[[constant_287]]), dimensions={}
// CHECK-NEXT:  %[[multiply_289:[^ ]+]] = u64[1]{0} multiply(%[[convert_286]], %[[broadcast_288]])
// CHECK-NEXT:  %[[constant_291:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_292:[^ ]+]] = u64[1]{0} broadcast(%[[constant_291]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_293:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_289]], %[[broadcast_292]])
// CHECK-NEXT:  %[[convert_294:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_293]])
// CHECK-NEXT:  %[[constant_244:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_245:[^ ]+]] = u64[1]{0} broadcast(%[[constant_244]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_246:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_242]], %[[broadcast_245]])
// CHECK-NEXT:  %[[convert_247:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_246]])
// CHECK-NEXT:  %[[convert_215:[^ ]+]] = u32[1]{0} convert(%[[multiply_214]])
// CHECK-NEXT:  %[[xor_248:[^ ]+]] = u32[1]{0} xor(%[[convert_247]], %[[convert_215]])
// CHECK-NEXT:  %[[broadcast_249:[^ ]+]] = u32[1]{0} broadcast(%[[add_227]]), dimensions={}
// CHECK-NEXT:  %[[xor_250:[^ ]+]] = u32[1]{0} xor(%[[xor_248]], %[[broadcast_249]])
// CHECK-NEXT:  %[[convert_258:[^ ]+]] = u64[1]{0} convert(%[[xor_250]])
// CHECK-NEXT:  %[[constant_259:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_260:[^ ]+]] = u64[1]{0} broadcast(%[[constant_259]]), dimensions={}
// CHECK-NEXT:  %[[multiply_261:[^ ]+]] = u64[1]{0} multiply(%[[convert_258]], %[[broadcast_260]])
// CHECK-NEXT:  %[[convert_262:[^ ]+]] = u32[1]{0} convert(%[[multiply_261]])
// CHECK-NEXT:  %[[xor_307:[^ ]+]] = u32[1]{0} xor(%[[convert_294]], %[[convert_262]])
// CHECK-NEXT:  %[[broadcast_308:[^ ]+]] = u32[1]{0} broadcast(%[[add_285]]), dimensions={}
// CHECK-NEXT:  %[[xor_309:[^ ]+]] = u32[1]{0} xor(%[[xor_307]], %[[broadcast_308]])
// CHECK-NEXT:  %[[convert_323:[^ ]+]] = u64[1]{0} convert(%[[xor_309]])
// CHECK-NEXT:  %[[constant_324:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_325:[^ ]+]] = u64[1]{0} broadcast(%[[constant_324]]), dimensions={}
// CHECK-NEXT:  %[[multiply_326:[^ ]+]] = u64[1]{0} multiply(%[[convert_323]], %[[broadcast_325]])
// CHECK-NEXT:  %[[constant_328:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_329:[^ ]+]] = u64[1]{0} broadcast(%[[constant_328]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_330:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_326]], %[[broadcast_329]])
// CHECK-NEXT:  %[[convert_331:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_330]])
// CHECK-NEXT:  %[[constant_263:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_264:[^ ]+]] = u64[1]{0} broadcast(%[[constant_263]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_265:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_261]], %[[broadcast_264]])
// CHECK-NEXT:  %[[convert_266:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_265]])
// CHECK-NEXT:  %[[convert_234:[^ ]+]] = u32[1]{0} convert(%[[multiply_233]])
// CHECK-NEXT:  %[[xor_279:[^ ]+]] = u32[1]{0} xor(%[[convert_266]], %[[convert_234]])
// CHECK-NEXT:  %[[broadcast_280:[^ ]+]] = u32[1]{0} broadcast(%[[add_257]]), dimensions={}
// CHECK-NEXT:  %[[xor_281:[^ ]+]] = u32[1]{0} xor(%[[xor_279]], %[[broadcast_280]])
// CHECK-NEXT:  %[[convert_295:[^ ]+]] = u64[1]{0} convert(%[[xor_281]])
// CHECK-NEXT:  %[[constant_296:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_297:[^ ]+]] = u64[1]{0} broadcast(%[[constant_296]]), dimensions={}
// CHECK-NEXT:  %[[multiply_298:[^ ]+]] = u64[1]{0} multiply(%[[convert_295]], %[[broadcast_297]])
// CHECK-NEXT:  %[[convert_299:[^ ]+]] = u32[1]{0} convert(%[[multiply_298]])
// CHECK-NEXT:  %[[xor_332:[^ ]+]] = u32[1]{0} xor(%[[convert_331]], %[[convert_299]])
// CHECK-NEXT:  %[[broadcast_333:[^ ]+]] = u32[1]{0} broadcast(%[[add_311]]), dimensions={}
// CHECK-NEXT:  %[[xor_334:[^ ]+]] = u32[1]{0} xor(%[[xor_332]], %[[broadcast_333]])
// CHECK-NEXT:  %[[reshape_342:[^ ]+]] = u32[1,1]{1,0} reshape(%[[xor_334]])
// CHECK-NEXT:  %[[convert_327:[^ ]+]] = u32[1]{0} convert(%[[multiply_326]])
// CHECK-NEXT:  %[[reshape_343:[^ ]+]] = u32[1,1]{1,0} reshape(%[[convert_327]])
// CHECK-NEXT:  %[[constant_300:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_301:[^ ]+]] = u64[1]{0} broadcast(%[[constant_300]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_302:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_298]], %[[broadcast_301]])
// CHECK-NEXT:  %[[convert_303:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_302]])
// CHECK-NEXT:  %[[convert_271:[^ ]+]] = u32[1]{0} convert(%[[multiply_270]])
// CHECK-NEXT:  %[[xor_304:[^ ]+]] = u32[1]{0} xor(%[[convert_303]], %[[convert_271]])
// CHECK-NEXT:  %[[broadcast_305:[^ ]+]] = u32[1]{0} broadcast(%[[add_283]]), dimensions={}
// CHECK-NEXT:  %[[xor_306:[^ ]+]] = u32[1]{0} xor(%[[xor_304]], %[[broadcast_305]])
// CHECK-NEXT:  %[[convert_314:[^ ]+]] = u64[1]{0} convert(%[[xor_306]])
// CHECK-NEXT:  %[[constant_315:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_316:[^ ]+]] = u64[1]{0} broadcast(%[[constant_315]]), dimensions={}
// CHECK-NEXT:  %[[multiply_317:[^ ]+]] = u64[1]{0} multiply(%[[convert_314]], %[[broadcast_316]])
// CHECK-NEXT:  %[[constant_319:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_320:[^ ]+]] = u64[1]{0} broadcast(%[[constant_319]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_321:[^ ]+]] = u64[1]{0} shift-right-logical(%[[multiply_317]], %[[broadcast_320]])
// CHECK-NEXT:  %[[convert_322:[^ ]+]] = u32[1]{0} convert(%[[shift_right_logical_321]])
// CHECK-NEXT:  %[[convert_290:[^ ]+]] = u32[1]{0} convert(%[[multiply_289]])
// CHECK-NEXT:  %[[xor_335:[^ ]+]] = u32[1]{0} xor(%[[convert_322]], %[[convert_290]])
// CHECK-NEXT:  %[[broadcast_336:[^ ]+]] = u32[1]{0} broadcast(%[[add_313]]), dimensions={}
// CHECK-NEXT:  %[[xor_337:[^ ]+]] = u32[1]{0} xor(%[[xor_335]], %[[broadcast_336]])
// CHECK-NEXT:  %[[reshape_344:[^ ]+]] = u32[1,1]{1,0} reshape(%[[xor_337]])
// CHECK-NEXT:  %[[convert_318:[^ ]+]] = u32[1]{0} convert(%[[multiply_317]])
// CHECK-NEXT:  %[[reshape_345:[^ ]+]] = u32[1,1]{1,0} reshape(%[[convert_318]])
// CHECK-NEXT:  %[[concatenate_346:[^ ]+]] = u32[1,4]{1,0} concatenate(%[[reshape_342]], %[[reshape_343]], %[[reshape_344]], %[[reshape_345]]), dimensions={1}
// CHECK-NEXT:  %[[reshape_347:[^ ]+]] = u32[4]{0} reshape(%[[concatenate_346]])
// CHECK-NEXT:  %[[slice_348:[^ ]+]] = u32[1]{0} slice(%[[reshape_347]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_349:[^ ]+]] = u32[] reshape(%[[slice_348]])
// CHECK-NEXT:  %[[convert_350:[^ ]+]] = u8[] convert(%[[reshape_349]])
// CHECK-NEXT:  ROOT %[[tuple_353:[^ ]+]] = (u64[3]{0}, u8[]) tuple(%[[concatenate_352]], %[[convert_350]])

// CHECK-LABEL: ENTRY %test_philox_u8
// CHECK-NEXT:  %[[initial_state:[^ ]+]] = u64[6]{0} constant({0, 1, 8, 9, 4, 1})
// CHECK-NEXT:  ROOT %[[call:[^ ]+]] = (u64[6]{0}, u8[]) call(%[[initial_state]]), to_apply=%[[$rng_354]]

HloModule TestPhiloxAlgorithm

ENTRY test_philox_u8 {
  initial_state = u64[6] constant({0, 1, 8, 9, 4, 1})
  ROOT result = (u64[6], u8[]) rng-bit-generator(initial_state), algorithm=rng_philox
}
