// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt --passes=test-only-xla-builder --split-input-file %s | FileCheck %s

// CHECK-LABEL: HloModule asin_f32, entry_computation_layout={(f32[])->f32[]}

// CHECK:       %[[$xla_builder_math_Asin_11:[^ ]+]]
// CHECK-NEXT:  %[[constant_3:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_4:[^ ]+]] = f32[] subtract(%[[constant_2]], %[[arg0_1]])
// CHECK-NEXT:  %[[add_5:[^ ]+]] = f32[] add(%[[constant_2]], %[[arg0_1]])
// CHECK-NEXT:  %[[multiply_6:[^ ]+]] = f32[] multiply(%[[subtract_4]], %[[add_5]])
// CHECK-NEXT:  %[[sqrt_7:[^ ]+]] = f32[] sqrt(%[[multiply_6]])
// CHECK-NEXT:  %[[add_8:[^ ]+]] = f32[] add(%[[constant_2]], %[[sqrt_7]])
// CHECK-NEXT:  %[[atan2_9:[^ ]+]] = f32[] atan2(%[[arg0_1]], %[[add_8]])
// CHECK-NEXT:  ROOT %[[multiply_10:[^ ]+]] = f32[] multiply(%[[constant_3]], %[[atan2_9]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asin"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asin", called_computations={%[[$xla_builder_math_Asin_11]]}

HloModule asin_f32, entry_computation_layout={(f32[])->f32[]}

ENTRY %main.3 (Arg_0.1: f32[]) -> f32[] {
  %Arg_0.1 = f32[] parameter(0)
  ROOT %custom-call.2 = f32[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Asin"
}

// -----

// CHECK-LABEL: HloModule asin_f64, entry_computation_layout={(f64[])->f64[]}

// CHECK:       %[[$xla_builder_math_Asin_11:[^ ]+]]
// CHECK-NEXT:  %[[constant_3:[^ ]+]] = f64[] constant(2)
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f64[] parameter(0)
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = f64[] constant(1)
// CHECK-NEXT:  %[[subtract_4:[^ ]+]] = f64[] subtract(%[[constant_2]], %[[arg0_1]])
// CHECK-NEXT:  %[[add_5:[^ ]+]] = f64[] add(%[[constant_2]], %[[arg0_1]])
// CHECK-NEXT:  %[[multiply_6:[^ ]+]] = f64[] multiply(%[[subtract_4]], %[[add_5]])
// CHECK-NEXT:  %[[sqrt_7:[^ ]+]] = f64[] sqrt(%[[multiply_6]])
// CHECK-NEXT:  %[[add_8:[^ ]+]] = f64[] add(%[[constant_2]], %[[sqrt_7]])
// CHECK-NEXT:  %[[atan2_9:[^ ]+]] = f64[] atan2(%[[arg0_1]], %[[add_8]])
// CHECK-NEXT:  ROOT %[[multiply_10:[^ ]+]] = f64[] multiply(%[[constant_3]], %[[atan2_9]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f64[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asin"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asin", called_computations={%[[$xla_builder_math_Asin_11]]}

HloModule asin_f64, entry_computation_layout={(f64[])->f64[]}

ENTRY %main.3 (Arg_0.1: f64[]) -> f64[] {
  %Arg_0.1 = f64[] parameter(0)
  ROOT %custom-call.2 = f64[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Asin"
}

// -----

// CHECK-LABEL: HloModule asin_complex64, entry_computation_layout={(c64[])->c64[]}

// CHECK:       %[[$xla_builder_math_Asin_127:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = c64[] parameter(0)
// CHECK-NEXT:  %[[real_2:[^ ]+]] = f32[] real(%[[arg0_1]])
// CHECK-NEXT:  %[[abs_3:[^ ]+]] = f32[] abs(%[[real_2]])
// CHECK-NEXT:  %[[imag_4:[^ ]+]] = f32[] imag(%[[arg0_1]])
// CHECK-NEXT:  %[[abs_5:[^ ]+]] = f32[] abs(%[[imag_4]])
// CHECK-NEXT:  %[[maximum_58:[^ ]+]] = f32[] maximum(%[[abs_3]], %[[abs_5]])
// CHECK-NEXT:  %[[constant_6:[^ ]+]] = f32[] constant(2.30584287e+18)
// CHECK-NEXT:  %[[compare_59:[^ ]+]] = pred[] compare(%[[maximum_58]], %[[constant_6]]), direction=GE
// CHECK-NEXT:  %[[constant_7:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[compare_60:[^ ]+]] = pred[] compare(%[[abs_3]], %[[constant_7]]), direction=LE
// CHECK-NEXT:  %[[constant_8:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[add_9:[^ ]+]] = f32[] add(%[[abs_3]], %[[constant_7]])
// CHECK-NEXT:  %[[abs_10:[^ ]+]] = f32[] abs(%[[add_9]])
// CHECK-NEXT:  %[[maximum_11:[^ ]+]] = f32[] maximum(%[[abs_10]], %[[abs_5]])
// CHECK-NEXT:  %[[minimum_12:[^ ]+]] = f32[] minimum(%[[abs_10]], %[[abs_5]])
// CHECK-NEXT:  %[[compare_20:[^ ]+]] = pred[] compare(%[[maximum_11]], %[[minimum_12]]), direction=EQ
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = f32[] constant(1.41421354)
// CHECK-NEXT:  %[[multiply_21:[^ ]+]] = f32[] multiply(%[[constant_13]], %[[maximum_11]])
// CHECK-NEXT:  %[[divide_14:[^ ]+]] = f32[] divide(%[[minimum_12]], %[[maximum_11]])
// CHECK-NEXT:  %[[multiply_15:[^ ]+]] = f32[] multiply(%[[divide_14]], %[[divide_14]])
// CHECK-NEXT:  %[[add_16:[^ ]+]] = f32[] add(%[[constant_7]], %[[multiply_15]])
// CHECK-NEXT:  %[[sqrt_17:[^ ]+]] = f32[] sqrt(%[[add_16]])
// CHECK-NEXT:  %[[compare_22:[^ ]+]] = pred[] compare(%[[sqrt_17]], %[[constant_7]]), direction=EQ
// CHECK-NEXT:  %[[constant_18:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_23:[^ ]+]] = pred[] compare(%[[multiply_15]], %[[constant_18]]), direction=GT
// CHECK-NEXT:  %[[and_24:[^ ]+]] = pred[] and(%[[compare_22]], %[[compare_23]])
// CHECK-NEXT:  %[[multiply_25:[^ ]+]] = f32[] multiply(%[[maximum_11]], %[[multiply_15]])
// CHECK-NEXT:  %[[constant_19:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[divide_26:[^ ]+]] = f32[] divide(%[[multiply_25]], %[[constant_19]])
// CHECK-NEXT:  %[[add_27:[^ ]+]] = f32[] add(%[[maximum_11]], %[[divide_26]])
// CHECK-NEXT:  %[[multiply_28:[^ ]+]] = f32[] multiply(%[[maximum_11]], %[[sqrt_17]])
// CHECK-NEXT:  %[[select_29:[^ ]+]] = f32[] select(%[[and_24]], %[[add_27]], %[[multiply_28]])
// CHECK-NEXT:  %[[select_30:[^ ]+]] = f32[] select(%[[compare_20]], %[[multiply_21]], %[[select_29]])
// CHECK-NEXT:  %[[subtract_31:[^ ]+]] = f32[] subtract(%[[abs_3]], %[[constant_7]])
// CHECK-NEXT:  %[[abs_32:[^ ]+]] = f32[] abs(%[[subtract_31]])
// CHECK-NEXT:  %[[maximum_33:[^ ]+]] = f32[] maximum(%[[abs_32]], %[[abs_5]])
// CHECK-NEXT:  %[[minimum_34:[^ ]+]] = f32[] minimum(%[[abs_32]], %[[abs_5]])
// CHECK-NEXT:  %[[compare_39:[^ ]+]] = pred[] compare(%[[maximum_33]], %[[minimum_34]]), direction=EQ
// CHECK-NEXT:  %[[multiply_40:[^ ]+]] = f32[] multiply(%[[constant_13]], %[[maximum_33]])
// CHECK-NEXT:  %[[divide_35:[^ ]+]] = f32[] divide(%[[minimum_34]], %[[maximum_33]])
// CHECK-NEXT:  %[[multiply_36:[^ ]+]] = f32[] multiply(%[[divide_35]], %[[divide_35]])
// CHECK-NEXT:  %[[add_37:[^ ]+]] = f32[] add(%[[constant_7]], %[[multiply_36]])
// CHECK-NEXT:  %[[sqrt_38:[^ ]+]] = f32[] sqrt(%[[add_37]])
// CHECK-NEXT:  %[[compare_41:[^ ]+]] = pred[] compare(%[[sqrt_38]], %[[constant_7]]), direction=EQ
// CHECK-NEXT:  %[[compare_42:[^ ]+]] = pred[] compare(%[[multiply_36]], %[[constant_18]]), direction=GT
// CHECK-NEXT:  %[[and_43:[^ ]+]] = pred[] and(%[[compare_41]], %[[compare_42]])
// CHECK-NEXT:  %[[multiply_44:[^ ]+]] = f32[] multiply(%[[maximum_33]], %[[multiply_36]])
// CHECK-NEXT:  %[[divide_45:[^ ]+]] = f32[] divide(%[[multiply_44]], %[[constant_19]])
// CHECK-NEXT:  %[[add_46:[^ ]+]] = f32[] add(%[[maximum_33]], %[[divide_45]])
// CHECK-NEXT:  %[[multiply_47:[^ ]+]] = f32[] multiply(%[[maximum_33]], %[[sqrt_38]])
// CHECK-NEXT:  %[[select_48:[^ ]+]] = f32[] select(%[[and_43]], %[[add_46]], %[[multiply_47]])
// CHECK-NEXT:  %[[select_49:[^ ]+]] = f32[] select(%[[compare_39]], %[[multiply_40]], %[[select_48]])
// CHECK-NEXT:  %[[add_50:[^ ]+]] = f32[] add(%[[select_30]], %[[select_49]])
// CHECK-NEXT:  %[[multiply_51:[^ ]+]] = f32[] multiply(%[[constant_8]], %[[add_50]])
// CHECK-NEXT:  %[[add_52:[^ ]+]] = f32[] add(%[[multiply_51]], %[[abs_3]])
// CHECK-NEXT:  %[[multiply_53:[^ ]+]] = f32[] multiply(%[[constant_8]], %[[add_52]])
// CHECK-NEXT:  %[[multiply_54:[^ ]+]] = f32[] multiply(%[[abs_5]], %[[abs_5]])
// CHECK-NEXT:  %[[add_55:[^ ]+]] = f32[] add(%[[select_30]], %[[add_9]])
// CHECK-NEXT:  %[[divide_61:[^ ]+]] = f32[] divide(%[[multiply_54]], %[[add_55]])
// CHECK-NEXT:  %[[subtract_56:[^ ]+]] = f32[] subtract(%[[select_49]], %[[subtract_31]])
// CHECK-NEXT:  %[[add_62:[^ ]+]] = f32[] add(%[[divide_61]], %[[subtract_56]])
// CHECK-NEXT:  %[[multiply_63:[^ ]+]] = f32[] multiply(%[[multiply_53]], %[[add_62]])
// CHECK-NEXT:  %[[sqrt_64:[^ ]+]] = f32[] sqrt(%[[multiply_63]])
// CHECK-NEXT:  %[[divide_65:[^ ]+]] = f32[] divide(%[[multiply_53]], %[[add_55]])
// CHECK-NEXT:  %[[add_57:[^ ]+]] = f32[] add(%[[select_49]], %[[subtract_31]])
// CHECK-NEXT:  %[[divide_66:[^ ]+]] = f32[] divide(%[[multiply_53]], %[[add_57]])
// CHECK-NEXT:  %[[add_67:[^ ]+]] = f32[] add(%[[divide_65]], %[[divide_66]])
// CHECK-NEXT:  %[[sqrt_68:[^ ]+]] = f32[] sqrt(%[[add_67]])
// CHECK-NEXT:  %[[multiply_69:[^ ]+]] = f32[] multiply(%[[abs_5]], %[[sqrt_68]])
// CHECK-NEXT:  %[[select_70:[^ ]+]] = f32[] select(%[[compare_60]], %[[sqrt_64]], %[[multiply_69]])
// CHECK-NEXT:  %[[select_71:[^ ]+]] = f32[] select(%[[compare_59]], %[[abs_5]], %[[select_70]])
// CHECK-NEXT:  %[[atan2_72:[^ ]+]] = f32[] atan2(%[[real_2]], %[[select_71]])
// CHECK-NEXT:  %[[compare_123:[^ ]+]] = pred[] compare(%[[imag_4]], %[[constant_18]]), direction=LT
// CHECK-NEXT:  %[[constant_73:[^ ]+]] = f32[] constant(2.30584285e+30)
// CHECK-NEXT:  %[[compare_74:[^ ]+]] = pred[] compare(%[[abs_3]], %[[constant_73]]), direction=LT
// CHECK-NEXT:  %[[constant_75:[^ ]+]] = f32[] constant(2.30584274e+12)
// CHECK-NEXT:  %[[constant_76:[^ ]+]] = f32[] constant(2.30584283e+20)
// CHECK-NEXT:  %[[select_77:[^ ]+]] = f32[] select(%[[compare_74]], %[[constant_75]], %[[constant_76]])
// CHECK-NEXT:  %[[compare_78:[^ ]+]] = pred[] compare(%[[abs_5]], %[[select_77]]), direction=GE
// CHECK-NEXT:  %[[select_79:[^ ]+]] = f32[] select(%[[compare_78]], %[[abs_5]], %[[abs_3]])
// CHECK-NEXT:  %[[select_109:[^ ]+]] = f32[] select(%[[compare_78]], %[[select_77]], %[[constant_6]])
// CHECK-NEXT:  %[[compare_110:[^ ]+]] = pred[] compare(%[[select_79]], %[[select_109]]), direction=GE
// CHECK-NEXT:  %[[constant_111:[^ ]+]] = f32[] constant(0.693147182)
// CHECK-NEXT:  %[[log_112:[^ ]+]] = f32[] log(%[[select_79]])
// CHECK-NEXT:  %[[add_113:[^ ]+]] = f32[] add(%[[constant_111]], %[[log_112]])
// CHECK-NEXT:  %[[constant_80:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[compare_81:[^ ]+]] = pred[] compare(%[[abs_5]], %[[constant_80]]), direction=EQ
// CHECK-NEXT:  %[[not_82:[^ ]+]] = pred[] not(%[[compare_81]])
// CHECK-NEXT:  %[[and_83:[^ ]+]] = pred[] and(%[[compare_78]], %[[not_82]])
// CHECK-NEXT:  %[[divide_84:[^ ]+]] = f32[] divide(%[[abs_3]], %[[abs_5]])
// CHECK-NEXT:  %[[select_85:[^ ]+]] = f32[] select(%[[and_83]], %[[divide_84]], %[[constant_18]])
// CHECK-NEXT:  %[[multiply_114:[^ ]+]] = f32[] multiply(%[[select_85]], %[[select_85]])
// CHECK-NEXT:  %[[log_plus_one_115:[^ ]+]] = f32[] log-plus-one(%[[multiply_114]])
// CHECK-NEXT:  %[[multiply_116:[^ ]+]] = f32[] multiply(%[[constant_8]], %[[log_plus_one_115]])
// CHECK-NEXT:  %[[add_117:[^ ]+]] = f32[] add(%[[add_113]], %[[multiply_116]])
// CHECK-NEXT:  %[[constant_86:[^ ]+]] = f32[] constant(4.33680869e-19)
// CHECK-NEXT:  %[[compare_87:[^ ]+]] = pred[] compare(%[[abs_5]], %[[constant_86]]), direction=LT
// CHECK-NEXT:  %[[compare_88:[^ ]+]] = pred[] compare(%[[abs_3]], %[[constant_7]]), direction=LT
// CHECK-NEXT:  %[[and_89:[^ ]+]] = pred[] and(%[[compare_87]], %[[compare_88]])
// CHECK-NEXT:  %[[multiply_103:[^ ]+]] = f32[] multiply(%[[add_9]], %[[subtract_31]])
// CHECK-NEXT:  %[[add_90:[^ ]+]] = f32[] add(%[[multiply_51]], %[[constant_7]])
// CHECK-NEXT:  %[[divide_104:[^ ]+]] = f32[] divide(%[[multiply_103]], %[[add_90]])
// CHECK-NEXT:  %[[negate_105:[^ ]+]] = f32[] negate(%[[divide_104]])
// CHECK-NEXT:  %[[compare_93:[^ ]+]] = pred[] compare(%[[abs_3]], %[[constant_7]]), direction=GE
// CHECK-NEXT:  %[[multiply_91:[^ ]+]] = f32[] multiply(%[[constant_8]], %[[multiply_54]])
// CHECK-NEXT:  %[[divide_92:[^ ]+]] = f32[] divide(%[[multiply_91]], %[[add_55]])
// CHECK-NEXT:  %[[multiply_94:[^ ]+]] = f32[] multiply(%[[constant_8]], %[[add_57]])
// CHECK-NEXT:  %[[add_95:[^ ]+]] = f32[] add(%[[divide_92]], %[[multiply_94]])
// CHECK-NEXT:  %[[constant_96:[^ ]+]] = f32[] constant(1.5)
// CHECK-NEXT:  %[[compare_97:[^ ]+]] = pred[] compare(%[[multiply_51]], %[[constant_96]]), direction=LE
// CHECK-NEXT:  %[[divide_98:[^ ]+]] = f32[] divide(%[[multiply_91]], %[[subtract_56]])
// CHECK-NEXT:  %[[add_99:[^ ]+]] = f32[] add(%[[divide_92]], %[[divide_98]])
// CHECK-NEXT:  %[[subtract_100:[^ ]+]] = f32[] subtract(%[[multiply_51]], %[[constant_7]])
// CHECK-NEXT:  %[[select_101:[^ ]+]] = f32[] select(%[[compare_97]], %[[add_99]], %[[subtract_100]])
// CHECK-NEXT:  %[[select_102:[^ ]+]] = f32[] select(%[[compare_93]], %[[add_95]], %[[select_101]])
// CHECK-NEXT:  %[[select_106:[^ ]+]] = f32[] select(%[[and_89]], %[[negate_105]], %[[select_102]])
// CHECK-NEXT:  %[[multiply_107:[^ ]+]] = f32[] multiply(%[[select_106]], %[[add_90]])
// CHECK-NEXT:  %[[sqrt_108:[^ ]+]] = f32[] sqrt(%[[multiply_107]])
// CHECK-NEXT:  %[[divide_118:[^ ]+]] = f32[] divide(%[[abs_5]], %[[sqrt_108]])
// CHECK-NEXT:  %[[add_119:[^ ]+]] = f32[] add(%[[select_106]], %[[sqrt_108]])
// CHECK-NEXT:  %[[log_plus_one_120:[^ ]+]] = f32[] log-plus-one(%[[add_119]])
// CHECK-NEXT:  %[[select_121:[^ ]+]] = f32[] select(%[[and_89]], %[[divide_118]], %[[log_plus_one_120]])
// CHECK-NEXT:  %[[select_122:[^ ]+]] = f32[] select(%[[compare_110]], %[[add_117]], %[[select_121]])
// CHECK-NEXT:  %[[negate_124:[^ ]+]] = f32[] negate(%[[select_122]])
// CHECK-NEXT:  %[[select_125:[^ ]+]] = f32[] select(%[[compare_123]], %[[negate_124]], %[[select_122]])
// CHECK-NEXT:  ROOT %[[complex_126:[^ ]+]] = c64[] complex(%[[atan2_72]], %[[select_125]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = c64[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = c64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asin"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = c64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asin", called_computations={%[[$xla_builder_math_Asin_127]]}

HloModule asin_complex64, entry_computation_layout={(c64[])->c64[]}

ENTRY %main.3 (Arg_0.1: c64[]) -> c64[] {
  %Arg_0.1 = c64[] parameter(0)
  ROOT %custom-call.2 = c64[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Asin"
}

// -----

// CHECK-LABEL: HloModule asin_complex128, entry_computation_layout={(c128[])->c128[]}

// CHECK:       %[[$xla_builder_math_Asin_127:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = c128[] parameter(0)
// CHECK-NEXT:  %[[real_2:[^ ]+]] = f64[] real(%[[arg0_1]])
// CHECK-NEXT:  %[[abs_3:[^ ]+]] = f64[] abs(%[[real_2]])
// CHECK-NEXT:  %[[imag_4:[^ ]+]] = f64[] imag(%[[arg0_1]])
// CHECK-NEXT:  %[[abs_5:[^ ]+]] = f64[] abs(%[[imag_4]])
// CHECK-NEXT:  %[[maximum_58:[^ ]+]] = f64[] maximum(%[[abs_3]], %[[abs_5]])
// CHECK-NEXT:  %[[constant_6:[^ ]+]] = f64[] constant(1.6759759912428245e+153)
// CHECK-NEXT:  %[[compare_59:[^ ]+]] = pred[] compare(%[[maximum_58]], %[[constant_6]]), direction=GE
// CHECK-NEXT:  %[[constant_7:[^ ]+]] = f64[] constant(1)
// CHECK-NEXT:  %[[compare_60:[^ ]+]] = pred[] compare(%[[abs_3]], %[[constant_7]]), direction=LE
// CHECK-NEXT:  %[[constant_8:[^ ]+]] = f64[] constant(0.5)
// CHECK-NEXT:  %[[add_9:[^ ]+]] = f64[] add(%[[abs_3]], %[[constant_7]])
// CHECK-NEXT:  %[[abs_10:[^ ]+]] = f64[] abs(%[[add_9]])
// CHECK-NEXT:  %[[maximum_11:[^ ]+]] = f64[] maximum(%[[abs_10]], %[[abs_5]])
// CHECK-NEXT:  %[[minimum_12:[^ ]+]] = f64[] minimum(%[[abs_10]], %[[abs_5]])
// CHECK-NEXT:  %[[compare_20:[^ ]+]] = pred[] compare(%[[maximum_11]], %[[minimum_12]]), direction=EQ
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = f64[] constant(1.4142135623730951)
// CHECK-NEXT:  %[[multiply_21:[^ ]+]] = f64[] multiply(%[[constant_13]], %[[maximum_11]])
// CHECK-NEXT:  %[[divide_14:[^ ]+]] = f64[] divide(%[[minimum_12]], %[[maximum_11]])
// CHECK-NEXT:  %[[multiply_15:[^ ]+]] = f64[] multiply(%[[divide_14]], %[[divide_14]])
// CHECK-NEXT:  %[[add_16:[^ ]+]] = f64[] add(%[[constant_7]], %[[multiply_15]])
// CHECK-NEXT:  %[[sqrt_17:[^ ]+]] = f64[] sqrt(%[[add_16]])
// CHECK-NEXT:  %[[compare_22:[^ ]+]] = pred[] compare(%[[sqrt_17]], %[[constant_7]]), direction=EQ
// CHECK-NEXT:  %[[constant_18:[^ ]+]] = f64[] constant(0)
// CHECK-NEXT:  %[[compare_23:[^ ]+]] = pred[] compare(%[[multiply_15]], %[[constant_18]]), direction=GT
// CHECK-NEXT:  %[[and_24:[^ ]+]] = pred[] and(%[[compare_22]], %[[compare_23]])
// CHECK-NEXT:  %[[multiply_25:[^ ]+]] = f64[] multiply(%[[maximum_11]], %[[multiply_15]])
// CHECK-NEXT:  %[[constant_19:[^ ]+]] = f64[] constant(2)
// CHECK-NEXT:  %[[divide_26:[^ ]+]] = f64[] divide(%[[multiply_25]], %[[constant_19]])
// CHECK-NEXT:  %[[add_27:[^ ]+]] = f64[] add(%[[maximum_11]], %[[divide_26]])
// CHECK-NEXT:  %[[multiply_28:[^ ]+]] = f64[] multiply(%[[maximum_11]], %[[sqrt_17]])
// CHECK-NEXT:  %[[select_29:[^ ]+]] = f64[] select(%[[and_24]], %[[add_27]], %[[multiply_28]])
// CHECK-NEXT:  %[[select_30:[^ ]+]] = f64[] select(%[[compare_20]], %[[multiply_21]], %[[select_29]])
// CHECK-NEXT:  %[[subtract_31:[^ ]+]] = f64[] subtract(%[[abs_3]], %[[constant_7]])
// CHECK-NEXT:  %[[abs_32:[^ ]+]] = f64[] abs(%[[subtract_31]])
// CHECK-NEXT:  %[[maximum_33:[^ ]+]] = f64[] maximum(%[[abs_32]], %[[abs_5]])
// CHECK-NEXT:  %[[minimum_34:[^ ]+]] = f64[] minimum(%[[abs_32]], %[[abs_5]])
// CHECK-NEXT:  %[[compare_39:[^ ]+]] = pred[] compare(%[[maximum_33]], %[[minimum_34]]), direction=EQ
// CHECK-NEXT:  %[[multiply_40:[^ ]+]] = f64[] multiply(%[[constant_13]], %[[maximum_33]])
// CHECK-NEXT:  %[[divide_35:[^ ]+]] = f64[] divide(%[[minimum_34]], %[[maximum_33]])
// CHECK-NEXT:  %[[multiply_36:[^ ]+]] = f64[] multiply(%[[divide_35]], %[[divide_35]])
// CHECK-NEXT:  %[[add_37:[^ ]+]] = f64[] add(%[[constant_7]], %[[multiply_36]])
// CHECK-NEXT:  %[[sqrt_38:[^ ]+]] = f64[] sqrt(%[[add_37]])
// CHECK-NEXT:  %[[compare_41:[^ ]+]] = pred[] compare(%[[sqrt_38]], %[[constant_7]]), direction=EQ
// CHECK-NEXT:  %[[compare_42:[^ ]+]] = pred[] compare(%[[multiply_36]], %[[constant_18]]), direction=GT
// CHECK-NEXT:  %[[and_43:[^ ]+]] = pred[] and(%[[compare_41]], %[[compare_42]])
// CHECK-NEXT:  %[[multiply_44:[^ ]+]] = f64[] multiply(%[[maximum_33]], %[[multiply_36]])
// CHECK-NEXT:  %[[divide_45:[^ ]+]] = f64[] divide(%[[multiply_44]], %[[constant_19]])
// CHECK-NEXT:  %[[add_46:[^ ]+]] = f64[] add(%[[maximum_33]], %[[divide_45]])
// CHECK-NEXT:  %[[multiply_47:[^ ]+]] = f64[] multiply(%[[maximum_33]], %[[sqrt_38]])
// CHECK-NEXT:  %[[select_48:[^ ]+]] = f64[] select(%[[and_43]], %[[add_46]], %[[multiply_47]])
// CHECK-NEXT:  %[[select_49:[^ ]+]] = f64[] select(%[[compare_39]], %[[multiply_40]], %[[select_48]])
// CHECK-NEXT:  %[[add_50:[^ ]+]] = f64[] add(%[[select_30]], %[[select_49]])
// CHECK-NEXT:  %[[multiply_51:[^ ]+]] = f64[] multiply(%[[constant_8]], %[[add_50]])
// CHECK-NEXT:  %[[add_52:[^ ]+]] = f64[] add(%[[multiply_51]], %[[abs_3]])
// CHECK-NEXT:  %[[multiply_53:[^ ]+]] = f64[] multiply(%[[constant_8]], %[[add_52]])
// CHECK-NEXT:  %[[multiply_54:[^ ]+]] = f64[] multiply(%[[abs_5]], %[[abs_5]])
// CHECK-NEXT:  %[[add_55:[^ ]+]] = f64[] add(%[[select_30]], %[[add_9]])
// CHECK-NEXT:  %[[divide_61:[^ ]+]] = f64[] divide(%[[multiply_54]], %[[add_55]])
// CHECK-NEXT:  %[[subtract_56:[^ ]+]] = f64[] subtract(%[[select_49]], %[[subtract_31]])
// CHECK-NEXT:  %[[add_62:[^ ]+]] = f64[] add(%[[divide_61]], %[[subtract_56]])
// CHECK-NEXT:  %[[multiply_63:[^ ]+]] = f64[] multiply(%[[multiply_53]], %[[add_62]])
// CHECK-NEXT:  %[[sqrt_64:[^ ]+]] = f64[] sqrt(%[[multiply_63]])
// CHECK-NEXT:  %[[divide_65:[^ ]+]] = f64[] divide(%[[multiply_53]], %[[add_55]])
// CHECK-NEXT:  %[[add_57:[^ ]+]] = f64[] add(%[[select_49]], %[[subtract_31]])
// CHECK-NEXT:  %[[divide_66:[^ ]+]] = f64[] divide(%[[multiply_53]], %[[add_57]])
// CHECK-NEXT:  %[[add_67:[^ ]+]] = f64[] add(%[[divide_65]], %[[divide_66]])
// CHECK-NEXT:  %[[sqrt_68:[^ ]+]] = f64[] sqrt(%[[add_67]])
// CHECK-NEXT:  %[[multiply_69:[^ ]+]] = f64[] multiply(%[[abs_5]], %[[sqrt_68]])
// CHECK-NEXT:  %[[select_70:[^ ]+]] = f64[] select(%[[compare_60]], %[[sqrt_64]], %[[multiply_69]])
// CHECK-NEXT:  %[[select_71:[^ ]+]] = f64[] select(%[[compare_59]], %[[abs_5]], %[[select_70]])
// CHECK-NEXT:  %[[atan2_72:[^ ]+]] = f64[] atan2(%[[real_2]], %[[select_71]])
// CHECK-NEXT:  %[[compare_123:[^ ]+]] = pred[] compare(%[[imag_4]], %[[constant_18]]), direction=LT
// CHECK-NEXT:  %[[constant_73:[^ ]+]] = f64[] constant(1.6759759912428244e+165)
// CHECK-NEXT:  %[[compare_74:[^ ]+]] = pred[] compare(%[[abs_3]], %[[constant_73]]), direction=LT
// CHECK-NEXT:  %[[constant_75:[^ ]+]] = f64[] constant(1.6759759912428242e+147)
// CHECK-NEXT:  %[[constant_76:[^ ]+]] = f64[] constant(1.6759759912428244e+155)
// CHECK-NEXT:  %[[select_77:[^ ]+]] = f64[] select(%[[compare_74]], %[[constant_75]], %[[constant_76]])
// CHECK-NEXT:  %[[compare_78:[^ ]+]] = pred[] compare(%[[abs_5]], %[[select_77]]), direction=GE
// CHECK-NEXT:  %[[select_79:[^ ]+]] = f64[] select(%[[compare_78]], %[[abs_5]], %[[abs_3]])
// CHECK-NEXT:  %[[select_109:[^ ]+]] = f64[] select(%[[compare_78]], %[[select_77]], %[[constant_6]])
// CHECK-NEXT:  %[[compare_110:[^ ]+]] = pred[] compare(%[[select_79]], %[[select_109]]), direction=GE
// CHECK-NEXT:  %[[constant_111:[^ ]+]] = f64[] constant(0.69314718055994529)
// CHECK-NEXT:  %[[log_112:[^ ]+]] = f64[] log(%[[select_79]])
// CHECK-NEXT:  %[[add_113:[^ ]+]] = f64[] add(%[[constant_111]], %[[log_112]])
// CHECK-NEXT:  %[[constant_80:[^ ]+]] = f64[] constant(inf)
// CHECK-NEXT:  %[[compare_81:[^ ]+]] = pred[] compare(%[[abs_5]], %[[constant_80]]), direction=EQ
// CHECK-NEXT:  %[[not_82:[^ ]+]] = pred[] not(%[[compare_81]])
// CHECK-NEXT:  %[[and_83:[^ ]+]] = pred[] and(%[[compare_78]], %[[not_82]])
// CHECK-NEXT:  %[[divide_84:[^ ]+]] = f64[] divide(%[[abs_3]], %[[abs_5]])
// CHECK-NEXT:  %[[select_85:[^ ]+]] = f64[] select(%[[and_83]], %[[divide_84]], %[[constant_18]])
// CHECK-NEXT:  %[[multiply_114:[^ ]+]] = f64[] multiply(%[[select_85]], %[[select_85]])
// CHECK-NEXT:  %[[log_plus_one_115:[^ ]+]] = f64[] log-plus-one(%[[multiply_114]])
// CHECK-NEXT:  %[[multiply_116:[^ ]+]] = f64[] multiply(%[[constant_8]], %[[log_plus_one_115]])
// CHECK-NEXT:  %[[add_117:[^ ]+]] = f64[] add(%[[add_113]], %[[multiply_116]])
// CHECK-NEXT:  %[[constant_86:[^ ]+]] = f64[] constant(5.9666725849601654e-154)
// CHECK-NEXT:  %[[compare_87:[^ ]+]] = pred[] compare(%[[abs_5]], %[[constant_86]]), direction=LT
// CHECK-NEXT:  %[[compare_88:[^ ]+]] = pred[] compare(%[[abs_3]], %[[constant_7]]), direction=LT
// CHECK-NEXT:  %[[and_89:[^ ]+]] = pred[] and(%[[compare_87]], %[[compare_88]])
// CHECK-NEXT:  %[[multiply_103:[^ ]+]] = f64[] multiply(%[[add_9]], %[[subtract_31]])
// CHECK-NEXT:  %[[add_90:[^ ]+]] = f64[] add(%[[multiply_51]], %[[constant_7]])
// CHECK-NEXT:  %[[divide_104:[^ ]+]] = f64[] divide(%[[multiply_103]], %[[add_90]])
// CHECK-NEXT:  %[[negate_105:[^ ]+]] = f64[] negate(%[[divide_104]])
// CHECK-NEXT:  %[[compare_93:[^ ]+]] = pred[] compare(%[[abs_3]], %[[constant_7]]), direction=GE
// CHECK-NEXT:  %[[multiply_91:[^ ]+]] = f64[] multiply(%[[constant_8]], %[[multiply_54]])
// CHECK-NEXT:  %[[divide_92:[^ ]+]] = f64[] divide(%[[multiply_91]], %[[add_55]])
// CHECK-NEXT:  %[[multiply_94:[^ ]+]] = f64[] multiply(%[[constant_8]], %[[add_57]])
// CHECK-NEXT:  %[[add_95:[^ ]+]] = f64[] add(%[[divide_92]], %[[multiply_94]])
// CHECK-NEXT:  %[[constant_96:[^ ]+]] = f64[] constant(1.5)
// CHECK-NEXT:  %[[compare_97:[^ ]+]] = pred[] compare(%[[multiply_51]], %[[constant_96]]), direction=LE
// CHECK-NEXT:  %[[divide_98:[^ ]+]] = f64[] divide(%[[multiply_91]], %[[subtract_56]])
// CHECK-NEXT:  %[[add_99:[^ ]+]] = f64[] add(%[[divide_92]], %[[divide_98]])
// CHECK-NEXT:  %[[subtract_100:[^ ]+]] = f64[] subtract(%[[multiply_51]], %[[constant_7]])
// CHECK-NEXT:  %[[select_101:[^ ]+]] = f64[] select(%[[compare_97]], %[[add_99]], %[[subtract_100]])
// CHECK-NEXT:  %[[select_102:[^ ]+]] = f64[] select(%[[compare_93]], %[[add_95]], %[[select_101]])
// CHECK-NEXT:  %[[select_106:[^ ]+]] = f64[] select(%[[and_89]], %[[negate_105]], %[[select_102]])
// CHECK-NEXT:  %[[multiply_107:[^ ]+]] = f64[] multiply(%[[select_106]], %[[add_90]])
// CHECK-NEXT:  %[[sqrt_108:[^ ]+]] = f64[] sqrt(%[[multiply_107]])
// CHECK-NEXT:  %[[divide_118:[^ ]+]] = f64[] divide(%[[abs_5]], %[[sqrt_108]])
// CHECK-NEXT:  %[[add_119:[^ ]+]] = f64[] add(%[[select_106]], %[[sqrt_108]])
// CHECK-NEXT:  %[[log_plus_one_120:[^ ]+]] = f64[] log-plus-one(%[[add_119]])
// CHECK-NEXT:  %[[select_121:[^ ]+]] = f64[] select(%[[and_89]], %[[divide_118]], %[[log_plus_one_120]])
// CHECK-NEXT:  %[[select_122:[^ ]+]] = f64[] select(%[[compare_110]], %[[add_117]], %[[select_121]])
// CHECK-NEXT:  %[[negate_124:[^ ]+]] = f64[] negate(%[[select_122]])
// CHECK-NEXT:  %[[select_125:[^ ]+]] = f64[] select(%[[compare_123]], %[[negate_124]], %[[select_122]])
// CHECK-NEXT:  ROOT %[[complex_126:[^ ]+]] = c128[] complex(%[[atan2_72]], %[[select_125]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = c128[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = c128[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asin"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = c128[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asin", called_computations={%[[$xla_builder_math_Asin_127]]}

HloModule asin_complex128, entry_computation_layout={(c128[])->c128[]}

ENTRY %main.3 (Arg_0.1: c128[]) -> c128[] {
  %Arg_0.1 = c128[] parameter(0)
  ROOT %custom-call.2 = c128[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Asin"
}
