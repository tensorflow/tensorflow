// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt --passes=test-only-xla-builder --split-input-file %s | FileCheck %s

// CHECK-LABEL: HloModule atan_f32, entry_computation_layout={(f32[])->f32[]}

// CHECK:       %[[$xla_builder_math_Atan_4:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  ROOT %[[atan2_3:[^ ]+]] = f32[] atan2(%[[arg0_1]], %[[constant_2]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Atan"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Atan", called_computations={%[[$xla_builder_math_Atan_4]]}

HloModule atan_f32, entry_computation_layout={(f32[])->f32[]}

ENTRY %main.3 (Arg_0.1: f32[]) -> f32[] {
  %Arg_0.1 = f32[] parameter(0)
  ROOT %custom-call.2 = f32[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Atan"
}

// -----

// CHECK-LABEL: HloModule atan_f64, entry_computation_layout={(f64[])->f64[]}

// CHECK:       %[[$xla_builder_math_Atan_4:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f64[] parameter(0)
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = f64[] constant(1)
// CHECK-NEXT:  ROOT %[[atan2_3:[^ ]+]] = f64[] atan2(%[[arg0_1]], %[[constant_2]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f64[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Atan"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Atan", called_computations={%[[$xla_builder_math_Atan_4]]}

HloModule atan_f64, entry_computation_layout={(f64[])->f64[]}

ENTRY %main.3 (Arg_0.1: f64[]) -> f64[] {
  %Arg_0.1 = f64[] parameter(0)
  ROOT %custom-call.2 = f64[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Atan"
}

// -----

// CHECK-LABEL: HloModule atan_complex64, entry_computation_layout={(c64[])->c64[]}

// CHECK:       %[[$xla_builder_math_Atan_4:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = c64[] parameter(0)
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = c64[] constant((1, 0))
// CHECK-NEXT:  ROOT %[[atan2_3:[^ ]+]] = c64[] atan2(%[[arg0_1]], %[[constant_2]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = c64[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = c64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Atan"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = c64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Atan", called_computations={%[[$xla_builder_math_Atan_4]]}

HloModule atan_complex64, entry_computation_layout={(c64[])->c64[]}

ENTRY %main.3 (Arg_0.1: c64[]) -> c64[] {
  %Arg_0.1 = c64[] parameter(0)
  ROOT %custom-call.2 = c64[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Atan"
}

// -----

// CHECK-LABEL: HloModule atan_complex128, entry_computation_layout={(c128[])->c128[]}

// CHECK:       %[[$xla_builder_math_Atan_4:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = c128[] parameter(0)
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = c128[] constant((1, 0))
// CHECK-NEXT:  ROOT %[[atan2_3:[^ ]+]] = c128[] atan2(%[[arg0_1]], %[[constant_2]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = c128[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = c128[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Atan"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = c128[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Atan", called_computations={%[[$xla_builder_math_Atan_4]]}

HloModule atan_complex128, entry_computation_layout={(c128[])->c128[]}

ENTRY %main.3 (Arg_0.1: c128[]) -> c128[] {
  %Arg_0.1 = c128[] parameter(0)
  ROOT %custom-call.2 = c128[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Atan"
}
