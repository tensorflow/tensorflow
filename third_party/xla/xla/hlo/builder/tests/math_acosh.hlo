// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt --passes=test-only-xla-builder --split-input-file %s | FileCheck %s

// CHECK-LABEL: HloModule acosh_f32, entry_computation_layout={(f32[])->f32[]}

// CHECK:       %[[$xla_builder_math_Acosh_22:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[constant_3:[^ ]+]] = f32[] constant(-1)
// CHECK-NEXT:  %[[compare_18:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[constant_3]]), direction=LT
// CHECK-NEXT:  %[[constant_4:[^ ]+]] = f32[] constant(nan)
// CHECK-NEXT:  %[[broadcast_5:[^ ]+]] = f32[] broadcast(%[[constant_4]]), dimensions={}
// CHECK-NEXT:  %[[constant_16:[^ ]+]] = f32[] constant(3.40282347e+38)
// CHECK-NEXT:  %[[sqrt_17:[^ ]+]] = f32[] sqrt(%[[constant_16]])
// CHECK-NEXT:  %[[compare_19:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[sqrt_17]]), direction=GE
// CHECK-NEXT:  %[[log_12:[^ ]+]] = f32[] log(%[[arg0_1]])
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[log_14:[^ ]+]] = f32[] log(%[[constant_13]])
// CHECK-NEXT:  %[[add_15:[^ ]+]] = f32[] add(%[[log_12]], %[[log_14]])
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_6:[^ ]+]] = f32[] add(%[[arg0_1]], %[[constant_2]])
// CHECK-NEXT:  %[[subtract_7:[^ ]+]] = f32[] subtract(%[[arg0_1]], %[[constant_2]])
// CHECK-NEXT:  %[[multiply_8:[^ ]+]] = f32[] multiply(%[[add_6]], %[[subtract_7]])
// CHECK-NEXT:  %[[sqrt_9:[^ ]+]] = f32[] sqrt(%[[multiply_8]])
// CHECK-NEXT:  %[[add_10:[^ ]+]] = f32[] add(%[[arg0_1]], %[[sqrt_9]])
// CHECK-NEXT:  %[[log_11:[^ ]+]] = f32[] log(%[[add_10]])
// CHECK-NEXT:  %[[select_20:[^ ]+]] = f32[] select(%[[compare_19]], %[[add_15]], %[[log_11]])
// CHECK-NEXT:  ROOT %[[select_21:[^ ]+]] = f32[] select(%[[compare_18]], %[[broadcast_5]], %[[select_20]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Acosh"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Acosh", called_computations={%[[$xla_builder_math_Acosh_22]]}

HloModule acosh_f32, entry_computation_layout={(f32[])->f32[]}

ENTRY %main.3 (Arg_0.1: f32[]) -> f32[] {
  %Arg_0.1 = f32[] parameter(0)
  ROOT %custom-call.2 = f32[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Acosh"
}

// -----

// CHECK-LABEL: HloModule acosh_f64, entry_computation_layout={(f64[])->f64[]}

// CHECK:       %[[$xla_builder_math_Acosh_22:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f64[] parameter(0)
// CHECK-NEXT:  %[[constant_3:[^ ]+]] = f64[] constant(-1)
// CHECK-NEXT:  %[[compare_18:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[constant_3]]), direction=LT
// CHECK-NEXT:  %[[constant_4:[^ ]+]] = f64[] constant(nan)
// CHECK-NEXT:  %[[broadcast_5:[^ ]+]] = f64[] broadcast(%[[constant_4]]), dimensions={}
// CHECK-NEXT:  %[[constant_16:[^ ]+]] = f64[] constant(1.7976931348623157e+308)
// CHECK-NEXT:  %[[sqrt_17:[^ ]+]] = f64[] sqrt(%[[constant_16]])
// CHECK-NEXT:  %[[compare_19:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[sqrt_17]]), direction=GE
// CHECK-NEXT:  %[[log_12:[^ ]+]] = f64[] log(%[[arg0_1]])
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = f64[] constant(2)
// CHECK-NEXT:  %[[log_14:[^ ]+]] = f64[] log(%[[constant_13]])
// CHECK-NEXT:  %[[add_15:[^ ]+]] = f64[] add(%[[log_12]], %[[log_14]])
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = f64[] constant(1)
// CHECK-NEXT:  %[[add_6:[^ ]+]] = f64[] add(%[[arg0_1]], %[[constant_2]])
// CHECK-NEXT:  %[[subtract_7:[^ ]+]] = f64[] subtract(%[[arg0_1]], %[[constant_2]])
// CHECK-NEXT:  %[[multiply_8:[^ ]+]] = f64[] multiply(%[[add_6]], %[[subtract_7]])
// CHECK-NEXT:  %[[sqrt_9:[^ ]+]] = f64[] sqrt(%[[multiply_8]])
// CHECK-NEXT:  %[[add_10:[^ ]+]] = f64[] add(%[[arg0_1]], %[[sqrt_9]])
// CHECK-NEXT:  %[[log_11:[^ ]+]] = f64[] log(%[[add_10]])
// CHECK-NEXT:  %[[select_20:[^ ]+]] = f64[] select(%[[compare_19]], %[[add_15]], %[[log_11]])
// CHECK-NEXT:  ROOT %[[select_21:[^ ]+]] = f64[] select(%[[compare_18]], %[[broadcast_5]], %[[select_20]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f64[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Acosh"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Acosh", called_computations={%[[$xla_builder_math_Acosh_22]]}

HloModule acosh_f64, entry_computation_layout={(f64[])->f64[]}

ENTRY %main.3 (Arg_0.1: f64[]) -> f64[] {
  %Arg_0.1 = f64[] parameter(0)
  ROOT %custom-call.2 = f64[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Acosh"
}

// -----

// CHECK-LABEL: HloModule acosh_complex64, entry_computation_layout={(c64[])->c64[]}

// CHECK:       %[[$xla_builder_math_Acosh_12:[^ ]+]]
// CHECK-NEXT:  %[[constant_3:[^ ]+]] = c64[] constant((-1, 0))
// CHECK-NEXT:  %[[constant_4:[^ ]+]] = c64[] constant((nan, 0))
// CHECK-NEXT:  %[[broadcast_5:[^ ]+]] = c64[] broadcast(%[[constant_4]]), dimensions={}
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = c64[] parameter(0)
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = c64[] constant((1, 0))
// CHECK-NEXT:  %[[add_6:[^ ]+]] = c64[] add(%[[arg0_1]], %[[constant_2]])
// CHECK-NEXT:  %[[subtract_7:[^ ]+]] = c64[] subtract(%[[arg0_1]], %[[constant_2]])
// CHECK-NEXT:  %[[multiply_8:[^ ]+]] = c64[] multiply(%[[add_6]], %[[subtract_7]])
// CHECK-NEXT:  %[[sqrt_9:[^ ]+]] = c64[] sqrt(%[[multiply_8]])
// CHECK-NEXT:  %[[add_10:[^ ]+]] = c64[] add(%[[arg0_1]], %[[sqrt_9]])
// CHECK-NEXT:  ROOT %[[log_11:[^ ]+]] = c64[] log(%[[add_10]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = c64[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = c64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Acosh"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = c64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Acosh", called_computations={%[[$xla_builder_math_Acosh_12]]}

HloModule acosh_complex64, entry_computation_layout={(c64[])->c64[]}

ENTRY %main.3 (Arg_0.1: c64[]) -> c64[] {
  %Arg_0.1 = c64[] parameter(0)
  ROOT %custom-call.2 = c64[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Acosh"
}

// -----

// CHECK-LABEL: HloModule acosh_complex128, entry_computation_layout={(c128[])->c128[]}

// CHECK:       %[[$xla_builder_math_Acosh_12:[^ ]+]]
// CHECK-NEXT:  %[[constant_3:[^ ]+]] = c128[] constant((-1, 0))
// CHECK-NEXT:  %[[constant_4:[^ ]+]] = c128[] constant((nan, 0))
// CHECK-NEXT:  %[[broadcast_5:[^ ]+]] = c128[] broadcast(%[[constant_4]]), dimensions={}
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = c128[] parameter(0)
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = c128[] constant((1, 0))
// CHECK-NEXT:  %[[add_6:[^ ]+]] = c128[] add(%[[arg0_1]], %[[constant_2]])
// CHECK-NEXT:  %[[subtract_7:[^ ]+]] = c128[] subtract(%[[arg0_1]], %[[constant_2]])
// CHECK-NEXT:  %[[multiply_8:[^ ]+]] = c128[] multiply(%[[add_6]], %[[subtract_7]])
// CHECK-NEXT:  %[[sqrt_9:[^ ]+]] = c128[] sqrt(%[[multiply_8]])
// CHECK-NEXT:  %[[add_10:[^ ]+]] = c128[] add(%[[arg0_1]], %[[sqrt_9]])
// CHECK-NEXT:  ROOT %[[log_11:[^ ]+]] = c128[] log(%[[add_10]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = c128[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = c128[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Acosh"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = c128[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Acosh", called_computations={%[[$xla_builder_math_Acosh_12]]}

HloModule acosh_complex128, entry_computation_layout={(c128[])->c128[]}

ENTRY %main.3 (Arg_0.1: c128[]) -> c128[] {
  %Arg_0.1 = c128[] parameter(0)
  ROOT %custom-call.2 = c128[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Acosh"
}
