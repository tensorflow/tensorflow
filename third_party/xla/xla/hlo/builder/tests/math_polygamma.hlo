// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt --passes=test-only-xla-builder --split-input-file %s | FileCheck %s

// CHECK-LABEL: HloModule main, entry_computation_layout={(f32[], f32[])->f32[]}

// CHECK:       %[[$xla_builder_math_Polygamma_468:[^ ]+]]
// CHECK-NEXT:  %[[constant_253:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[constant_313:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[floor_461:[^ ]+]] = f32[] floor(%[[arg0_1]])
// CHECK-NEXT:  %[[compare_462:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[floor_461]]), direction=NE
// CHECK-NEXT:  %[[constant_463:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_464:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[constant_463]]), direction=LT
// CHECK-NEXT:  %[[or_465:[^ ]+]] = pred[] or(%[[compare_462]], %[[compare_464]])
// CHECK-NEXT:  %[[constant_466:[^ ]+]] = f32[] constant(nan)
// CHECK-NEXT:  %[[constant_11:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_12:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[constant_11]]), direction=EQ
// CHECK-NEXT:  %[[arg1_2:[^ ]+]] = f32[] parameter(1)
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_150:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[constant_13]]), direction=LE
// CHECK-NEXT:  %[[floor_151:[^ ]+]] = f32[] floor(%[[arg1_2]])
// CHECK-NEXT:  %[[compare_152:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[floor_151]]), direction=EQ
// CHECK-NEXT:  %[[and_153:[^ ]+]] = pred[] and(%[[compare_150]], %[[compare_152]])
// CHECK-NEXT:  %[[constant_154:[^ ]+]] = f32[] constant(nan)
// CHECK-NEXT:  %[[broadcast_155:[^ ]+]] = f32[] broadcast(%[[constant_154]]), dimensions={}
// CHECK-NEXT:  %[[constant_14:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_21:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[constant_14]]), direction=LT
// CHECK-NEXT:  %[[constant_19:[^ ]+]] = f32[] constant(2.01490307)
// CHECK-NEXT:  %[[negate_22:[^ ]+]] = f32[] negate(%[[arg1_2]])
// CHECK-NEXT:  %[[constant_15:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_23:[^ ]+]] = f32[] subtract(%[[arg1_2]], %[[constant_15]])
// CHECK-NEXT:  %[[select_24:[^ ]+]] = f32[] select(%[[compare_21]], %[[negate_22]], %[[subtract_23]])
// CHECK-NEXT:  %[[constant_18:[^ ]+]] = f32[] constant(7.5)
// CHECK-NEXT:  %[[divide_130:[^ ]+]] = f32[] divide(%[[select_24]], %[[constant_18]])
// CHECK-NEXT:  %[[log_plus_one_131:[^ ]+]] = f32[] log-plus-one(%[[divide_130]])
// CHECK-NEXT:  %[[add_132:[^ ]+]] = f32[] add(%[[constant_19]], %[[log_plus_one_131]])
// CHECK-NEXT:  %[[constant_25:[^ ]+]] = f32[] constant(676.520386)
// CHECK-NEXT:  %[[constant_26:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[add_27:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_26]])
// CHECK-NEXT:  %[[add_28:[^ ]+]] = f32[] add(%[[add_27]], %[[constant_15]])
// CHECK-NEXT:  %[[add_29:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_26]])
// CHECK-NEXT:  %[[add_30:[^ ]+]] = f32[] add(%[[add_29]], %[[constant_15]])
// CHECK-NEXT:  %[[multiply_31:[^ ]+]] = f32[] multiply(%[[add_28]], %[[add_30]])
// CHECK-NEXT:  %[[divide_32:[^ ]+]] = f32[] divide(%[[constant_25]], %[[multiply_31]])
// CHECK-NEXT:  %[[subtract_33:[^ ]+]] = f32[] subtract(%[[constant_13]], %[[divide_32]])
// CHECK-NEXT:  %[[constant_38:[^ ]+]] = f32[] constant(-1259.13916)
// CHECK-NEXT:  %[[constant_39:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_40:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_39]])
// CHECK-NEXT:  %[[add_41:[^ ]+]] = f32[] add(%[[add_40]], %[[constant_15]])
// CHECK-NEXT:  %[[add_42:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_39]])
// CHECK-NEXT:  %[[add_43:[^ ]+]] = f32[] add(%[[add_42]], %[[constant_15]])
// CHECK-NEXT:  %[[multiply_44:[^ ]+]] = f32[] multiply(%[[add_41]], %[[add_43]])
// CHECK-NEXT:  %[[divide_45:[^ ]+]] = f32[] divide(%[[constant_38]], %[[multiply_44]])
// CHECK-NEXT:  %[[subtract_46:[^ ]+]] = f32[] subtract(%[[subtract_33]], %[[divide_45]])
// CHECK-NEXT:  %[[constant_51:[^ ]+]] = f32[] constant(771.323425)
// CHECK-NEXT:  %[[constant_52:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[add_53:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_52]])
// CHECK-NEXT:  %[[add_54:[^ ]+]] = f32[] add(%[[add_53]], %[[constant_15]])
// CHECK-NEXT:  %[[add_55:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_52]])
// CHECK-NEXT:  %[[add_56:[^ ]+]] = f32[] add(%[[add_55]], %[[constant_15]])
// CHECK-NEXT:  %[[multiply_57:[^ ]+]] = f32[] multiply(%[[add_54]], %[[add_56]])
// CHECK-NEXT:  %[[divide_58:[^ ]+]] = f32[] divide(%[[constant_51]], %[[multiply_57]])
// CHECK-NEXT:  %[[subtract_59:[^ ]+]] = f32[] subtract(%[[subtract_46]], %[[divide_58]])
// CHECK-NEXT:  %[[constant_64:[^ ]+]] = f32[] constant(-176.615036)
// CHECK-NEXT:  %[[constant_65:[^ ]+]] = f32[] constant(3)
// CHECK-NEXT:  %[[add_66:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_65]])
// CHECK-NEXT:  %[[add_67:[^ ]+]] = f32[] add(%[[add_66]], %[[constant_15]])
// CHECK-NEXT:  %[[add_68:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_65]])
// CHECK-NEXT:  %[[add_69:[^ ]+]] = f32[] add(%[[add_68]], %[[constant_15]])
// CHECK-NEXT:  %[[multiply_70:[^ ]+]] = f32[] multiply(%[[add_67]], %[[add_69]])
// CHECK-NEXT:  %[[divide_71:[^ ]+]] = f32[] divide(%[[constant_64]], %[[multiply_70]])
// CHECK-NEXT:  %[[subtract_72:[^ ]+]] = f32[] subtract(%[[subtract_59]], %[[divide_71]])
// CHECK-NEXT:  %[[constant_77:[^ ]+]] = f32[] constant(12.5073433)
// CHECK-NEXT:  %[[constant_78:[^ ]+]] = f32[] constant(4)
// CHECK-NEXT:  %[[add_79:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_78]])
// CHECK-NEXT:  %[[add_80:[^ ]+]] = f32[] add(%[[add_79]], %[[constant_15]])
// CHECK-NEXT:  %[[add_81:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_78]])
// CHECK-NEXT:  %[[add_82:[^ ]+]] = f32[] add(%[[add_81]], %[[constant_15]])
// CHECK-NEXT:  %[[multiply_83:[^ ]+]] = f32[] multiply(%[[add_80]], %[[add_82]])
// CHECK-NEXT:  %[[divide_84:[^ ]+]] = f32[] divide(%[[constant_77]], %[[multiply_83]])
// CHECK-NEXT:  %[[subtract_85:[^ ]+]] = f32[] subtract(%[[subtract_72]], %[[divide_84]])
// CHECK-NEXT:  %[[constant_90:[^ ]+]] = f32[] constant(-0.138571098)
// CHECK-NEXT:  %[[constant_91:[^ ]+]] = f32[] constant(5)
// CHECK-NEXT:  %[[add_92:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_91]])
// CHECK-NEXT:  %[[add_93:[^ ]+]] = f32[] add(%[[add_92]], %[[constant_15]])
// CHECK-NEXT:  %[[add_94:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_91]])
// CHECK-NEXT:  %[[add_95:[^ ]+]] = f32[] add(%[[add_94]], %[[constant_15]])
// CHECK-NEXT:  %[[multiply_96:[^ ]+]] = f32[] multiply(%[[add_93]], %[[add_95]])
// CHECK-NEXT:  %[[divide_97:[^ ]+]] = f32[] divide(%[[constant_90]], %[[multiply_96]])
// CHECK-NEXT:  %[[subtract_98:[^ ]+]] = f32[] subtract(%[[subtract_85]], %[[divide_97]])
// CHECK-NEXT:  %[[constant_103:[^ ]+]] = f32[] constant(9.98436917e-06)
// CHECK-NEXT:  %[[constant_104:[^ ]+]] = f32[] constant(6)
// CHECK-NEXT:  %[[add_105:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_104]])
// CHECK-NEXT:  %[[add_106:[^ ]+]] = f32[] add(%[[add_105]], %[[constant_15]])
// CHECK-NEXT:  %[[add_107:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_104]])
// CHECK-NEXT:  %[[add_108:[^ ]+]] = f32[] add(%[[add_107]], %[[constant_15]])
// CHECK-NEXT:  %[[multiply_109:[^ ]+]] = f32[] multiply(%[[add_106]], %[[add_108]])
// CHECK-NEXT:  %[[divide_110:[^ ]+]] = f32[] divide(%[[constant_103]], %[[multiply_109]])
// CHECK-NEXT:  %[[subtract_111:[^ ]+]] = f32[] subtract(%[[subtract_98]], %[[divide_110]])
// CHECK-NEXT:  %[[constant_116:[^ ]+]] = f32[] constant(1.50563267e-07)
// CHECK-NEXT:  %[[constant_117:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_118:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_117]])
// CHECK-NEXT:  %[[add_119:[^ ]+]] = f32[] add(%[[add_118]], %[[constant_15]])
// CHECK-NEXT:  %[[add_120:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_117]])
// CHECK-NEXT:  %[[add_121:[^ ]+]] = f32[] add(%[[add_120]], %[[constant_15]])
// CHECK-NEXT:  %[[multiply_122:[^ ]+]] = f32[] multiply(%[[add_119]], %[[add_121]])
// CHECK-NEXT:  %[[divide_123:[^ ]+]] = f32[] divide(%[[constant_116]], %[[multiply_122]])
// CHECK-NEXT:  %[[subtract_124:[^ ]+]] = f32[] subtract(%[[subtract_111]], %[[divide_123]])
// CHECK-NEXT:  %[[constant_20:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_34:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_26]])
// CHECK-NEXT:  %[[add_35:[^ ]+]] = f32[] add(%[[add_34]], %[[constant_15]])
// CHECK-NEXT:  %[[divide_36:[^ ]+]] = f32[] divide(%[[constant_25]], %[[add_35]])
// CHECK-NEXT:  %[[add_37:[^ ]+]] = f32[] add(%[[constant_20]], %[[divide_36]])
// CHECK-NEXT:  %[[add_47:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_39]])
// CHECK-NEXT:  %[[add_48:[^ ]+]] = f32[] add(%[[add_47]], %[[constant_15]])
// CHECK-NEXT:  %[[divide_49:[^ ]+]] = f32[] divide(%[[constant_38]], %[[add_48]])
// CHECK-NEXT:  %[[add_50:[^ ]+]] = f32[] add(%[[add_37]], %[[divide_49]])
// CHECK-NEXT:  %[[add_60:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_52]])
// CHECK-NEXT:  %[[add_61:[^ ]+]] = f32[] add(%[[add_60]], %[[constant_15]])
// CHECK-NEXT:  %[[divide_62:[^ ]+]] = f32[] divide(%[[constant_51]], %[[add_61]])
// CHECK-NEXT:  %[[add_63:[^ ]+]] = f32[] add(%[[add_50]], %[[divide_62]])
// CHECK-NEXT:  %[[add_73:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_65]])
// CHECK-NEXT:  %[[add_74:[^ ]+]] = f32[] add(%[[add_73]], %[[constant_15]])
// CHECK-NEXT:  %[[divide_75:[^ ]+]] = f32[] divide(%[[constant_64]], %[[add_74]])
// CHECK-NEXT:  %[[add_76:[^ ]+]] = f32[] add(%[[add_63]], %[[divide_75]])
// CHECK-NEXT:  %[[add_86:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_78]])
// CHECK-NEXT:  %[[add_87:[^ ]+]] = f32[] add(%[[add_86]], %[[constant_15]])
// CHECK-NEXT:  %[[divide_88:[^ ]+]] = f32[] divide(%[[constant_77]], %[[add_87]])
// CHECK-NEXT:  %[[add_89:[^ ]+]] = f32[] add(%[[add_76]], %[[divide_88]])
// CHECK-NEXT:  %[[add_99:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_91]])
// CHECK-NEXT:  %[[add_100:[^ ]+]] = f32[] add(%[[add_99]], %[[constant_15]])
// CHECK-NEXT:  %[[divide_101:[^ ]+]] = f32[] divide(%[[constant_90]], %[[add_100]])
// CHECK-NEXT:  %[[add_102:[^ ]+]] = f32[] add(%[[add_89]], %[[divide_101]])
// CHECK-NEXT:  %[[add_112:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_104]])
// CHECK-NEXT:  %[[add_113:[^ ]+]] = f32[] add(%[[add_112]], %[[constant_15]])
// CHECK-NEXT:  %[[divide_114:[^ ]+]] = f32[] divide(%[[constant_103]], %[[add_113]])
// CHECK-NEXT:  %[[add_115:[^ ]+]] = f32[] add(%[[add_102]], %[[divide_114]])
// CHECK-NEXT:  %[[add_125:[^ ]+]] = f32[] add(%[[select_24]], %[[constant_117]])
// CHECK-NEXT:  %[[add_126:[^ ]+]] = f32[] add(%[[add_125]], %[[constant_15]])
// CHECK-NEXT:  %[[divide_127:[^ ]+]] = f32[] divide(%[[constant_116]], %[[add_126]])
// CHECK-NEXT:  %[[add_128:[^ ]+]] = f32[] add(%[[add_115]], %[[divide_127]])
// CHECK-NEXT:  %[[divide_133:[^ ]+]] = f32[] divide(%[[subtract_124]], %[[add_128]])
// CHECK-NEXT:  %[[add_134:[^ ]+]] = f32[] add(%[[add_132]], %[[divide_133]])
// CHECK-NEXT:  %[[constant_17:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_129:[^ ]+]] = f32[] add(%[[constant_18]], %[[select_24]])
// CHECK-NEXT:  %[[divide_135:[^ ]+]] = f32[] divide(%[[constant_17]], %[[add_129]])
// CHECK-NEXT:  %[[subtract_136:[^ ]+]] = f32[] subtract(%[[add_134]], %[[divide_135]])
// CHECK-NEXT:  %[[constant_16:[^ ]+]] = f32[] constant(3.14159274)
// CHECK-NEXT:  %[[constant_137:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[add_138:[^ ]+]] = f32[] add(%[[arg1_2]], %[[constant_137]])
// CHECK-NEXT:  %[[floor_139:[^ ]+]] = f32[] floor(%[[add_138]])
// CHECK-NEXT:  %[[abs_140:[^ ]+]] = f32[] abs(%[[floor_139]])
// CHECK-NEXT:  %[[add_141:[^ ]+]] = f32[] add(%[[arg1_2]], %[[abs_140]])
// CHECK-NEXT:  %[[multiply_142:[^ ]+]] = f32[] multiply(%[[constant_16]], %[[add_141]])
// CHECK-NEXT:  %[[cosine_143:[^ ]+]] = f32[] cosine(%[[multiply_142]])
// CHECK-NEXT:  %[[multiply_144:[^ ]+]] = f32[] multiply(%[[constant_16]], %[[cosine_143]])
// CHECK-NEXT:  %[[multiply_145:[^ ]+]] = f32[] multiply(%[[constant_16]], %[[add_141]])
// CHECK-NEXT:  %[[sine_146:[^ ]+]] = f32[] sine(%[[multiply_145]])
// CHECK-NEXT:  %[[divide_147:[^ ]+]] = f32[] divide(%[[multiply_144]], %[[sine_146]])
// CHECK-NEXT:  %[[subtract_148:[^ ]+]] = f32[] subtract(%[[subtract_136]], %[[divide_147]])
// CHECK-NEXT:  %[[select_149:[^ ]+]] = f32[] select(%[[compare_21]], %[[subtract_148]], %[[subtract_136]])
// CHECK-NEXT:  %[[select_156:[^ ]+]] = f32[] select(%[[and_153]], %[[broadcast_155]], %[[select_149]])
// CHECK-NEXT:  %[[constant_5:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[constant_6:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[remainder_7:[^ ]+]] = f32[] remainder(%[[arg0_1]], %[[constant_6]])
// CHECK-NEXT:  %[[multiply_8:[^ ]+]] = f32[] multiply(%[[constant_5]], %[[remainder_7]])
// CHECK-NEXT:  %[[constant_9:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_10:[^ ]+]] = f32[] subtract(%[[multiply_8]], %[[constant_9]])
// CHECK-NEXT:  %[[constant_3:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_4:[^ ]+]] = f32[] add(%[[arg0_1]], %[[constant_3]])
// CHECK-NEXT:  %[[abs_247:[^ ]+]] = f32[] abs(%[[add_4]])
// CHECK-NEXT:  %[[constant_248:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[compare_249:[^ ]+]] = pred[] compare(%[[abs_247]], %[[constant_248]]), direction=EQ
// CHECK-NEXT:  %[[constant_245:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[broadcast_246:[^ ]+]] = f32[] broadcast(%[[constant_245]]), dimensions={}
// CHECK-NEXT:  %[[constant_157:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_165:[^ ]+]] = pred[] compare(%[[add_4]], %[[constant_157]]), direction=LT
// CHECK-NEXT:  %[[constant_159:[^ ]+]] = f32[] constant(3.14159274)
// CHECK-NEXT:  %[[abs_228:[^ ]+]] = f32[] abs(%[[add_4]])
// CHECK-NEXT:  %[[floor_229:[^ ]+]] = f32[] floor(%[[abs_228]])
// CHECK-NEXT:  %[[subtract_230:[^ ]+]] = f32[] subtract(%[[abs_228]], %[[floor_229]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_232:[^ ]+]] = pred[] compare(%[[subtract_230]], %[[constant_231]]), direction=GT
// CHECK-NEXT:  %[[constant_233:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_234:[^ ]+]] = f32[] subtract(%[[constant_233]], %[[subtract_230]])
// CHECK-NEXT:  %[[select_235:[^ ]+]] = f32[] select(%[[compare_232]], %[[subtract_234]], %[[subtract_230]])
// CHECK-NEXT:  %[[multiply_236:[^ ]+]] = f32[] multiply(%[[constant_159]], %[[select_235]])
// CHECK-NEXT:  %[[sine_237:[^ ]+]] = f32[] sine(%[[multiply_236]])
// CHECK-NEXT:  %[[log_238:[^ ]+]] = f32[] log(%[[sine_237]])
// CHECK-NEXT:  %[[is_finite_239:[^ ]+]] = pred[] is-finite(%[[log_238]])
// CHECK-NEXT:  %[[constant_160:[^ ]+]] = f32[] constant(1.14472985)
// CHECK-NEXT:  %[[subtract_240:[^ ]+]] = f32[] subtract(%[[constant_160]], %[[log_238]])
// CHECK-NEXT:  %[[constant_161:[^ ]+]] = f32[] constant(0.918938518)
// CHECK-NEXT:  %[[negate_166:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[constant_158:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_167:[^ ]+]] = f32[] subtract(%[[add_4]], %[[constant_158]])
// CHECK-NEXT:  %[[select_168:[^ ]+]] = f32[] select(%[[compare_165]], %[[negate_166]], %[[subtract_167]])
// CHECK-NEXT:  %[[add_221:[^ ]+]] = f32[] add(%[[select_168]], %[[constant_157]])
// CHECK-NEXT:  %[[constant_162:[^ ]+]] = f32[] constant(7.5)
// CHECK-NEXT:  %[[add_217:[^ ]+]] = f32[] add(%[[constant_162]], %[[select_168]])
// CHECK-NEXT:  %[[constant_163:[^ ]+]] = f32[] constant(2.01490307)
// CHECK-NEXT:  %[[divide_218:[^ ]+]] = f32[] divide(%[[select_168]], %[[constant_162]])
// CHECK-NEXT:  %[[log_plus_one_219:[^ ]+]] = f32[] log-plus-one(%[[divide_218]])
// CHECK-NEXT:  %[[add_220:[^ ]+]] = f32[] add(%[[constant_163]], %[[log_plus_one_219]])
// CHECK-NEXT:  %[[divide_222:[^ ]+]] = f32[] divide(%[[add_217]], %[[add_220]])
// CHECK-NEXT:  %[[subtract_223:[^ ]+]] = f32[] subtract(%[[add_221]], %[[divide_222]])
// CHECK-NEXT:  %[[multiply_224:[^ ]+]] = f32[] multiply(%[[subtract_223]], %[[add_220]])
// CHECK-NEXT:  %[[add_225:[^ ]+]] = f32[] add(%[[constant_161]], %[[multiply_224]])
// CHECK-NEXT:  %[[constant_164:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[constant_169:[^ ]+]] = f32[] constant(676.520386)
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[add_171:[^ ]+]] = f32[] add(%[[select_168]], %[[constant_170]])
// CHECK-NEXT:  %[[add_172:[^ ]+]] = f32[] add(%[[add_171]], %[[constant_158]])
// CHECK-NEXT:  %[[divide_173:[^ ]+]] = f32[] divide(%[[constant_169]], %[[add_172]])
// CHECK-NEXT:  %[[add_174:[^ ]+]] = f32[] add(%[[constant_164]], %[[divide_173]])
// CHECK-NEXT:  %[[constant_175:[^ ]+]] = f32[] constant(-1259.13916)
// CHECK-NEXT:  %[[constant_176:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_177:[^ ]+]] = f32[] add(%[[select_168]], %[[constant_176]])
// CHECK-NEXT:  %[[add_178:[^ ]+]] = f32[] add(%[[add_177]], %[[constant_158]])
// CHECK-NEXT:  %[[divide_179:[^ ]+]] = f32[] divide(%[[constant_175]], %[[add_178]])
// CHECK-NEXT:  %[[add_180:[^ ]+]] = f32[] add(%[[add_174]], %[[divide_179]])
// CHECK-NEXT:  %[[constant_181:[^ ]+]] = f32[] constant(771.323425)
// CHECK-NEXT:  %[[constant_182:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[add_183:[^ ]+]] = f32[] add(%[[select_168]], %[[constant_182]])
// CHECK-NEXT:  %[[add_184:[^ ]+]] = f32[] add(%[[add_183]], %[[constant_158]])
// CHECK-NEXT:  %[[divide_185:[^ ]+]] = f32[] divide(%[[constant_181]], %[[add_184]])
// CHECK-NEXT:  %[[add_186:[^ ]+]] = f32[] add(%[[add_180]], %[[divide_185]])
// CHECK-NEXT:  %[[constant_187:[^ ]+]] = f32[] constant(-176.615036)
// CHECK-NEXT:  %[[constant_188:[^ ]+]] = f32[] constant(3)
// CHECK-NEXT:  %[[add_189:[^ ]+]] = f32[] add(%[[select_168]], %[[constant_188]])
// CHECK-NEXT:  %[[add_190:[^ ]+]] = f32[] add(%[[add_189]], %[[constant_158]])
// CHECK-NEXT:  %[[divide_191:[^ ]+]] = f32[] divide(%[[constant_187]], %[[add_190]])
// CHECK-NEXT:  %[[add_192:[^ ]+]] = f32[] add(%[[add_186]], %[[divide_191]])
// CHECK-NEXT:  %[[constant_193:[^ ]+]] = f32[] constant(12.5073433)
// CHECK-NEXT:  %[[constant_194:[^ ]+]] = f32[] constant(4)
// CHECK-NEXT:  %[[add_195:[^ ]+]] = f32[] add(%[[select_168]], %[[constant_194]])
// CHECK-NEXT:  %[[add_196:[^ ]+]] = f32[] add(%[[add_195]], %[[constant_158]])
// CHECK-NEXT:  %[[divide_197:[^ ]+]] = f32[] divide(%[[constant_193]], %[[add_196]])
// CHECK-NEXT:  %[[add_198:[^ ]+]] = f32[] add(%[[add_192]], %[[divide_197]])
// CHECK-NEXT:  %[[constant_199:[^ ]+]] = f32[] constant(-0.138571098)
// CHECK-NEXT:  %[[constant_200:[^ ]+]] = f32[] constant(5)
// CHECK-NEXT:  %[[add_201:[^ ]+]] = f32[] add(%[[select_168]], %[[constant_200]])
// CHECK-NEXT:  %[[add_202:[^ ]+]] = f32[] add(%[[add_201]], %[[constant_158]])
// CHECK-NEXT:  %[[divide_203:[^ ]+]] = f32[] divide(%[[constant_199]], %[[add_202]])
// CHECK-NEXT:  %[[add_204:[^ ]+]] = f32[] add(%[[add_198]], %[[divide_203]])
// CHECK-NEXT:  %[[constant_205:[^ ]+]] = f32[] constant(9.98436917e-06)
// CHECK-NEXT:  %[[constant_206:[^ ]+]] = f32[] constant(6)
// CHECK-NEXT:  %[[add_207:[^ ]+]] = f32[] add(%[[select_168]], %[[constant_206]])
// CHECK-NEXT:  %[[add_208:[^ ]+]] = f32[] add(%[[add_207]], %[[constant_158]])
// CHECK-NEXT:  %[[divide_209:[^ ]+]] = f32[] divide(%[[constant_205]], %[[add_208]])
// CHECK-NEXT:  %[[add_210:[^ ]+]] = f32[] add(%[[add_204]], %[[divide_209]])
// CHECK-NEXT:  %[[constant_211:[^ ]+]] = f32[] constant(1.50563267e-07)
// CHECK-NEXT:  %[[constant_212:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_213:[^ ]+]] = f32[] add(%[[select_168]], %[[constant_212]])
// CHECK-NEXT:  %[[add_214:[^ ]+]] = f32[] add(%[[add_213]], %[[constant_158]])
// CHECK-NEXT:  %[[divide_215:[^ ]+]] = f32[] divide(%[[constant_211]], %[[add_214]])
// CHECK-NEXT:  %[[add_216:[^ ]+]] = f32[] add(%[[add_210]], %[[divide_215]])
// CHECK-NEXT:  %[[log_226:[^ ]+]] = f32[] log(%[[add_216]])
// CHECK-NEXT:  %[[add_227:[^ ]+]] = f32[] add(%[[add_225]], %[[log_226]])
// CHECK-NEXT:  %[[subtract_241:[^ ]+]] = f32[] subtract(%[[subtract_240]], %[[add_227]])
// CHECK-NEXT:  %[[negate_242:[^ ]+]] = f32[] negate(%[[log_238]])
// CHECK-NEXT:  %[[select_243:[^ ]+]] = f32[] select(%[[is_finite_239]], %[[subtract_241]], %[[negate_242]])
// CHECK-NEXT:  %[[select_244:[^ ]+]] = f32[] select(%[[compare_165]], %[[select_243]], %[[add_227]])
// CHECK-NEXT:  %[[select_250:[^ ]+]] = f32[] select(%[[compare_249]], %[[broadcast_246]], %[[select_244]])
// CHECK-NEXT:  %[[exponential_251:[^ ]+]] = f32[] exponential(%[[select_250]])
// CHECK-NEXT:  %[[multiply_252:[^ ]+]] = f32[] multiply(%[[subtract_10]], %[[exponential_251]])
// CHECK-NEXT:  %[[constant_443:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_444:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[constant_443]]), direction=LE
// CHECK-NEXT:  %[[floor_445:[^ ]+]] = f32[] floor(%[[arg1_2]])
// CHECK-NEXT:  %[[compare_446:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[floor_445]]), direction=EQ
// CHECK-NEXT:  %[[and_447:[^ ]+]] = pred[] and(%[[compare_444]], %[[compare_446]])
// CHECK-NEXT:  %[[constant_448:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[remainder_449:[^ ]+]] = f32[] remainder(%[[add_4]], %[[constant_448]])
// CHECK-NEXT:  %[[constant_450:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_451:[^ ]+]] = pred[] compare(%[[remainder_449]], %[[constant_450]]), direction=EQ
// CHECK-NEXT:  %[[floor_452:[^ ]+]] = f32[] floor(%[[add_4]])
// CHECK-NEXT:  %[[compare_453:[^ ]+]] = pred[] compare(%[[add_4]], %[[floor_452]]), direction=EQ
// CHECK-NEXT:  %[[and_454:[^ ]+]] = pred[] and(%[[compare_451]], %[[compare_453]])
// CHECK-NEXT:  %[[constant_455:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[constant_456:[^ ]+]] = f32[] constant(nan)
// CHECK-NEXT:  %[[select_457:[^ ]+]] = f32[] select(%[[and_454]], %[[constant_455]], %[[constant_456]])
// CHECK-NEXT:  %[[constant_436:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_437:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[constant_436]]), direction=LE
// CHECK-NEXT:  %[[floor_438:[^ ]+]] = f32[] floor(%[[add_4]])
// CHECK-NEXT:  %[[compare_439:[^ ]+]] = pred[] compare(%[[add_4]], %[[floor_438]]), direction=NE
// CHECK-NEXT:  %[[and_440:[^ ]+]] = pred[] and(%[[compare_437]], %[[compare_439]])
// CHECK-NEXT:  %[[constant_441:[^ ]+]] = f32[] constant(nan)
// CHECK-NEXT:  %[[constant_432:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[compare_433:[^ ]+]] = pred[] compare(%[[add_4]], %[[constant_432]]), direction=LT
// CHECK-NEXT:  %[[constant_434:[^ ]+]] = f32[] constant(nan)
// CHECK-NEXT:  %[[constant_428:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[compare_429:[^ ]+]] = pred[] compare(%[[add_4]], %[[constant_428]]), direction=EQ
// CHECK-NEXT:  %[[constant_430:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[constant_256:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_257:[^ ]+]] = f32[] add(%[[arg1_2]], %[[constant_256]])
// CHECK-NEXT:  %[[constant_261:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_262:[^ ]+]] = f32[] add(%[[add_257]], %[[constant_261]])
// CHECK-NEXT:  %[[constant_266:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_267:[^ ]+]] = f32[] add(%[[add_262]], %[[constant_266]])
// CHECK-NEXT:  %[[constant_271:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_272:[^ ]+]] = f32[] add(%[[add_267]], %[[constant_271]])
// CHECK-NEXT:  %[[constant_276:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_277:[^ ]+]] = f32[] add(%[[add_272]], %[[constant_276]])
// CHECK-NEXT:  %[[constant_281:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_282:[^ ]+]] = f32[] add(%[[add_277]], %[[constant_281]])
// CHECK-NEXT:  %[[constant_286:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_287:[^ ]+]] = f32[] add(%[[add_282]], %[[constant_286]])
// CHECK-NEXT:  %[[constant_291:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_292:[^ ]+]] = f32[] add(%[[add_287]], %[[constant_291]])
// CHECK-NEXT:  %[[constant_296:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_297:[^ ]+]] = f32[] add(%[[add_292]], %[[constant_296]])
// CHECK-NEXT:  %[[constant_301:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_302:[^ ]+]] = f32[] add(%[[add_297]], %[[constant_301]])
// CHECK-NEXT:  %[[negate_303:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[power_304:[^ ]+]] = f32[] power(%[[add_302]], %[[negate_303]])
// CHECK-NEXT:  %[[abs_422:[^ ]+]] = f32[] abs(%[[power_304]])
// CHECK-NEXT:  %[[negate_254:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[power_255:[^ ]+]] = f32[] power(%[[arg1_2]], %[[negate_254]])
// CHECK-NEXT:  %[[negate_258:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[power_259:[^ ]+]] = f32[] power(%[[add_257]], %[[negate_258]])
// CHECK-NEXT:  %[[add_260:[^ ]+]] = f32[] add(%[[power_255]], %[[power_259]])
// CHECK-NEXT:  %[[negate_263:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[power_264:[^ ]+]] = f32[] power(%[[add_262]], %[[negate_263]])
// CHECK-NEXT:  %[[add_265:[^ ]+]] = f32[] add(%[[add_260]], %[[power_264]])
// CHECK-NEXT:  %[[negate_268:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[power_269:[^ ]+]] = f32[] power(%[[add_267]], %[[negate_268]])
// CHECK-NEXT:  %[[add_270:[^ ]+]] = f32[] add(%[[add_265]], %[[power_269]])
// CHECK-NEXT:  %[[negate_273:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[power_274:[^ ]+]] = f32[] power(%[[add_272]], %[[negate_273]])
// CHECK-NEXT:  %[[add_275:[^ ]+]] = f32[] add(%[[add_270]], %[[power_274]])
// CHECK-NEXT:  %[[negate_278:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[power_279:[^ ]+]] = f32[] power(%[[add_277]], %[[negate_278]])
// CHECK-NEXT:  %[[add_280:[^ ]+]] = f32[] add(%[[add_275]], %[[power_279]])
// CHECK-NEXT:  %[[negate_283:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[power_284:[^ ]+]] = f32[] power(%[[add_282]], %[[negate_283]])
// CHECK-NEXT:  %[[add_285:[^ ]+]] = f32[] add(%[[add_280]], %[[power_284]])
// CHECK-NEXT:  %[[negate_288:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[power_289:[^ ]+]] = f32[] power(%[[add_287]], %[[negate_288]])
// CHECK-NEXT:  %[[add_290:[^ ]+]] = f32[] add(%[[add_285]], %[[power_289]])
// CHECK-NEXT:  %[[negate_293:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[power_294:[^ ]+]] = f32[] power(%[[add_292]], %[[negate_293]])
// CHECK-NEXT:  %[[add_295:[^ ]+]] = f32[] add(%[[add_290]], %[[power_294]])
// CHECK-NEXT:  %[[negate_298:[^ ]+]] = f32[] negate(%[[add_4]])
// CHECK-NEXT:  %[[power_299:[^ ]+]] = f32[] power(%[[add_297]], %[[negate_298]])
// CHECK-NEXT:  %[[add_300:[^ ]+]] = f32[] add(%[[add_295]], %[[power_299]])
// CHECK-NEXT:  %[[abs_423:[^ ]+]] = f32[] abs(%[[add_300]])
// CHECK-NEXT:  %[[constant_424:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[multiply_425:[^ ]+]] = f32[] multiply(%[[abs_423]], %[[constant_424]])
// CHECK-NEXT:  %[[compare_426:[^ ]+]] = pred[] compare(%[[abs_422]], %[[multiply_425]]), direction=LT
// CHECK-NEXT:  %[[multiply_305:[^ ]+]] = f32[] multiply(%[[power_304]], %[[add_302]])
// CHECK-NEXT:  %[[constant_306:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_307:[^ ]+]] = f32[] subtract(%[[add_4]], %[[constant_306]])
// CHECK-NEXT:  %[[divide_308:[^ ]+]] = f32[] divide(%[[multiply_305]], %[[subtract_307]])
// CHECK-NEXT:  %[[add_420:[^ ]+]] = f32[] add(%[[add_300]], %[[divide_308]])
// CHECK-NEXT:  %[[constant_413:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[divide_414:[^ ]+]] = f32[] divide(%[[add_4]], %[[add_302]])
// CHECK-NEXT:  %[[constant_415:[^ ]+]] = f32[] constant(0.0833333358)
// CHECK-NEXT:  %[[constant_404:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[add_405:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_404]])
// CHECK-NEXT:  %[[constant_406:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_407:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_406]])
// CHECK-NEXT:  %[[multiply_408:[^ ]+]] = f32[] multiply(%[[add_405]], %[[add_407]])
// CHECK-NEXT:  %[[constant_310:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[multiply_309:[^ ]+]] = f32[] multiply(%[[add_302]], %[[add_302]])
// CHECK-NEXT:  %[[divide_311:[^ ]+]] = f32[] divide(%[[constant_310]], %[[multiply_309]])
// CHECK-NEXT:  %[[multiply_409:[^ ]+]] = f32[] multiply(%[[multiply_408]], %[[divide_311]])
// CHECK-NEXT:  %[[constant_395:[^ ]+]] = f32[] constant(4)
// CHECK-NEXT:  %[[add_396:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_395]])
// CHECK-NEXT:  %[[constant_397:[^ ]+]] = f32[] constant(3)
// CHECK-NEXT:  %[[add_398:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_397]])
// CHECK-NEXT:  %[[multiply_399:[^ ]+]] = f32[] multiply(%[[add_396]], %[[add_398]])
// CHECK-NEXT:  %[[multiply_400:[^ ]+]] = f32[] multiply(%[[multiply_399]], %[[divide_311]])
// CHECK-NEXT:  %[[constant_386:[^ ]+]] = f32[] constant(6)
// CHECK-NEXT:  %[[add_387:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_386]])
// CHECK-NEXT:  %[[constant_388:[^ ]+]] = f32[] constant(5)
// CHECK-NEXT:  %[[add_389:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_388]])
// CHECK-NEXT:  %[[multiply_390:[^ ]+]] = f32[] multiply(%[[add_387]], %[[add_389]])
// CHECK-NEXT:  %[[multiply_391:[^ ]+]] = f32[] multiply(%[[multiply_390]], %[[divide_311]])
// CHECK-NEXT:  %[[constant_377:[^ ]+]] = f32[] constant(8)
// CHECK-NEXT:  %[[add_378:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_377]])
// CHECK-NEXT:  %[[constant_379:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_380:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_379]])
// CHECK-NEXT:  %[[multiply_381:[^ ]+]] = f32[] multiply(%[[add_378]], %[[add_380]])
// CHECK-NEXT:  %[[multiply_382:[^ ]+]] = f32[] multiply(%[[multiply_381]], %[[divide_311]])
// CHECK-NEXT:  %[[constant_368:[^ ]+]] = f32[] constant(10)
// CHECK-NEXT:  %[[add_369:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_368]])
// CHECK-NEXT:  %[[constant_370:[^ ]+]] = f32[] constant(9)
// CHECK-NEXT:  %[[add_371:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_370]])
// CHECK-NEXT:  %[[multiply_372:[^ ]+]] = f32[] multiply(%[[add_369]], %[[add_371]])
// CHECK-NEXT:  %[[multiply_373:[^ ]+]] = f32[] multiply(%[[multiply_372]], %[[divide_311]])
// CHECK-NEXT:  %[[constant_359:[^ ]+]] = f32[] constant(12)
// CHECK-NEXT:  %[[add_360:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_359]])
// CHECK-NEXT:  %[[constant_361:[^ ]+]] = f32[] constant(11)
// CHECK-NEXT:  %[[add_362:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_361]])
// CHECK-NEXT:  %[[multiply_363:[^ ]+]] = f32[] multiply(%[[add_360]], %[[add_362]])
// CHECK-NEXT:  %[[multiply_364:[^ ]+]] = f32[] multiply(%[[multiply_363]], %[[divide_311]])
// CHECK-NEXT:  %[[constant_350:[^ ]+]] = f32[] constant(14)
// CHECK-NEXT:  %[[add_351:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_350]])
// CHECK-NEXT:  %[[constant_352:[^ ]+]] = f32[] constant(13)
// CHECK-NEXT:  %[[add_353:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_352]])
// CHECK-NEXT:  %[[multiply_354:[^ ]+]] = f32[] multiply(%[[add_351]], %[[add_353]])
// CHECK-NEXT:  %[[multiply_355:[^ ]+]] = f32[] multiply(%[[multiply_354]], %[[divide_311]])
// CHECK-NEXT:  %[[constant_341:[^ ]+]] = f32[] constant(16)
// CHECK-NEXT:  %[[add_342:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_341]])
// CHECK-NEXT:  %[[constant_343:[^ ]+]] = f32[] constant(15)
// CHECK-NEXT:  %[[add_344:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_343]])
// CHECK-NEXT:  %[[multiply_345:[^ ]+]] = f32[] multiply(%[[add_342]], %[[add_344]])
// CHECK-NEXT:  %[[multiply_346:[^ ]+]] = f32[] multiply(%[[multiply_345]], %[[divide_311]])
// CHECK-NEXT:  %[[constant_332:[^ ]+]] = f32[] constant(18)
// CHECK-NEXT:  %[[add_333:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_332]])
// CHECK-NEXT:  %[[constant_334:[^ ]+]] = f32[] constant(17)
// CHECK-NEXT:  %[[add_335:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_334]])
// CHECK-NEXT:  %[[multiply_336:[^ ]+]] = f32[] multiply(%[[add_333]], %[[add_335]])
// CHECK-NEXT:  %[[multiply_337:[^ ]+]] = f32[] multiply(%[[multiply_336]], %[[divide_311]])
// CHECK-NEXT:  %[[constant_323:[^ ]+]] = f32[] constant(20)
// CHECK-NEXT:  %[[add_324:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_323]])
// CHECK-NEXT:  %[[constant_325:[^ ]+]] = f32[] constant(19)
// CHECK-NEXT:  %[[add_326:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_325]])
// CHECK-NEXT:  %[[multiply_327:[^ ]+]] = f32[] multiply(%[[add_324]], %[[add_326]])
// CHECK-NEXT:  %[[multiply_328:[^ ]+]] = f32[] multiply(%[[multiply_327]], %[[divide_311]])
// CHECK-NEXT:  %[[constant_314:[^ ]+]] = f32[] constant(22)
// CHECK-NEXT:  %[[add_315:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_314]])
// CHECK-NEXT:  %[[constant_316:[^ ]+]] = f32[] constant(21)
// CHECK-NEXT:  %[[add_317:[^ ]+]] = f32[] add(%[[add_4]], %[[constant_316]])
// CHECK-NEXT:  %[[multiply_318:[^ ]+]] = f32[] multiply(%[[add_315]], %[[add_317]])
// CHECK-NEXT:  %[[multiply_319:[^ ]+]] = f32[] multiply(%[[multiply_318]], %[[divide_311]])
// CHECK-NEXT:  %[[constant_312:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[constant_320:[^ ]+]] = f32[] constant(-1.39544646e-19)
// CHECK-NEXT:  %[[add_321:[^ ]+]] = f32[] add(%[[constant_312]], %[[constant_320]])
// CHECK-NEXT:  %[[multiply_322:[^ ]+]] = f32[] multiply(%[[multiply_319]], %[[add_321]])
// CHECK-NEXT:  %[[constant_329:[^ ]+]] = f32[] constant(5.50900303e-18)
// CHECK-NEXT:  %[[add_330:[^ ]+]] = f32[] add(%[[multiply_322]], %[[constant_329]])
// CHECK-NEXT:  %[[multiply_331:[^ ]+]] = f32[] multiply(%[[multiply_328]], %[[add_330]])
// CHECK-NEXT:  %[[constant_338:[^ ]+]] = f32[] constant(-2.17486866e-16)
// CHECK-NEXT:  %[[add_339:[^ ]+]] = f32[] add(%[[multiply_331]], %[[constant_338]])
// CHECK-NEXT:  %[[multiply_340:[^ ]+]] = f32[] multiply(%[[multiply_337]], %[[add_339]])
// CHECK-NEXT:  %[[constant_347:[^ ]+]] = f32[] constant(8.58606213e-15)
// CHECK-NEXT:  %[[add_348:[^ ]+]] = f32[] add(%[[multiply_340]], %[[constant_347]])
// CHECK-NEXT:  %[[multiply_349:[^ ]+]] = f32[] multiply(%[[multiply_346]], %[[add_348]])
// CHECK-NEXT:  %[[constant_356:[^ ]+]] = f32[] constant(-3.3896803e-13)
// CHECK-NEXT:  %[[add_357:[^ ]+]] = f32[] add(%[[multiply_349]], %[[constant_356]])
// CHECK-NEXT:  %[[multiply_358:[^ ]+]] = f32[] multiply(%[[multiply_355]], %[[add_357]])
// CHECK-NEXT:  %[[constant_365:[^ ]+]] = f32[] constant(1.33825364e-11)
// CHECK-NEXT:  %[[add_366:[^ ]+]] = f32[] add(%[[multiply_358]], %[[constant_365]])
// CHECK-NEXT:  %[[multiply_367:[^ ]+]] = f32[] multiply(%[[multiply_364]], %[[add_366]])
// CHECK-NEXT:  %[[constant_374:[^ ]+]] = f32[] constant(-5.28419031e-10)
// CHECK-NEXT:  %[[add_375:[^ ]+]] = f32[] add(%[[multiply_367]], %[[constant_374]])
// CHECK-NEXT:  %[[multiply_376:[^ ]+]] = f32[] multiply(%[[multiply_373]], %[[add_375]])
// CHECK-NEXT:  %[[constant_383:[^ ]+]] = f32[] constant(2.08767563e-08)
// CHECK-NEXT:  %[[add_384:[^ ]+]] = f32[] add(%[[multiply_376]], %[[constant_383]])
// CHECK-NEXT:  %[[multiply_385:[^ ]+]] = f32[] multiply(%[[multiply_382]], %[[add_384]])
// CHECK-NEXT:  %[[constant_392:[^ ]+]] = f32[] constant(-8.26719599e-07)
// CHECK-NEXT:  %[[add_393:[^ ]+]] = f32[] add(%[[multiply_385]], %[[constant_392]])
// CHECK-NEXT:  %[[multiply_394:[^ ]+]] = f32[] multiply(%[[multiply_391]], %[[add_393]])
// CHECK-NEXT:  %[[constant_401:[^ ]+]] = f32[] constant(3.30687835e-05)
// CHECK-NEXT:  %[[add_402:[^ ]+]] = f32[] add(%[[multiply_394]], %[[constant_401]])
// CHECK-NEXT:  %[[multiply_403:[^ ]+]] = f32[] multiply(%[[multiply_400]], %[[add_402]])
// CHECK-NEXT:  %[[constant_410:[^ ]+]] = f32[] constant(-0.00138888892)
// CHECK-NEXT:  %[[add_411:[^ ]+]] = f32[] add(%[[multiply_403]], %[[constant_410]])
// CHECK-NEXT:  %[[multiply_412:[^ ]+]] = f32[] multiply(%[[multiply_409]], %[[add_411]])
// CHECK-NEXT:  %[[add_416:[^ ]+]] = f32[] add(%[[constant_415]], %[[multiply_412]])
// CHECK-NEXT:  %[[multiply_417:[^ ]+]] = f32[] multiply(%[[divide_414]], %[[add_416]])
// CHECK-NEXT:  %[[add_418:[^ ]+]] = f32[] add(%[[constant_413]], %[[multiply_417]])
// CHECK-NEXT:  %[[multiply_419:[^ ]+]] = f32[] multiply(%[[power_304]], %[[add_418]])
// CHECK-NEXT:  %[[add_421:[^ ]+]] = f32[] add(%[[add_420]], %[[multiply_419]])
// CHECK-NEXT:  %[[select_427:[^ ]+]] = f32[] select(%[[compare_426]], %[[add_300]], %[[add_421]])
// CHECK-NEXT:  %[[select_431:[^ ]+]] = f32[] select(%[[compare_429]], %[[constant_430]], %[[select_427]])
// CHECK-NEXT:  %[[select_435:[^ ]+]] = f32[] select(%[[compare_433]], %[[constant_434]], %[[select_431]])
// CHECK-NEXT:  %[[select_442:[^ ]+]] = f32[] select(%[[and_440]], %[[constant_441]], %[[select_435]])
// CHECK-NEXT:  %[[select_458:[^ ]+]] = f32[] select(%[[and_447]], %[[select_457]], %[[select_442]])
// CHECK-NEXT:  %[[multiply_459:[^ ]+]] = f32[] multiply(%[[multiply_252]], %[[select_458]])
// CHECK-NEXT:  %[[select_460:[^ ]+]] = f32[] select(%[[compare_12]], %[[select_156]], %[[multiply_459]])
// CHECK-NEXT:  ROOT %[[select_467:[^ ]+]] = f32[] select(%[[or_465]], %[[constant_466]], %[[select_460]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[Arg_1_2:[^ ]+]] = f32[] parameter(1)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]], %[[Arg_1_2]]), custom_call_target="xla_builder.math.Polygamma"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]], %[[Arg_1_2]]), custom_call_target="xla_builder.math.Polygamma", called_computations={%[[$xla_builder_math_Polygamma_468]]}

HloModule main, entry_computation_layout={(f32[], f32[])->f32[]}

ENTRY %main.3 (Arg_0.1: f32[], Arg_1.2: f32[]) -> f32[] {
  %Arg_0.1 = f32[] parameter(0)
  %Arg_1.2 = f32[] parameter(1)
  ROOT %custom-call.2 = f32[] custom-call(%Arg_0.1, %Arg_1.2), custom_call_target="xla_builder.math.Polygamma"
}