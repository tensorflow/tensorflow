// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt --passes=test-only-xla-builder --split-input-file %s | FileCheck %s

// CHECK-LABEL: HloModule tridiagonal_tridiagonal_solve, entry_computation_layout={(f32[3,3]{1,0}, f32[3,3]{1,0})->f32[3,3]{1,0}}

// CHECK:       %[[$preparation_body_29:[^ ]+]]
// CHECK-NEXT:  %[[parameter_30:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_31:[^ ]+]] = s32[] get-tuple-element(%[[parameter_30]]), index=0
// CHECK-NEXT:  %[[constant_34:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[add_35:[^ ]+]] = s32[] add(%[[get_tuple_element_31]], %[[constant_34]])
// CHECK-NEXT:  %[[get_tuple_element_32:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_30]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_33:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_30]]), index=2
// CHECK-NEXT:  %[[constant_36:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_37:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_33]], %[[constant_36]], %[[get_tuple_element_31]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[constant_38:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_39:[^ ]+]] = f32[1,3]{1,0} dynamic-update-slice(%[[get_tuple_element_32]], %[[dynamic_slice_37]], %[[constant_38]], %[[get_tuple_element_31]])
// CHECK-NEXT:  ROOT %[[tuple_40:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}) tuple(%[[add_35]], %[[dynamic_update_slice_39]], %[[get_tuple_element_33]])

// CHECK:       %[[$preparation_condition_41:[^ ]+]]
// CHECK-NEXT:  %[[parameter_42:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_44:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_42]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_45:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_42]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_43:[^ ]+]] = s32[] get-tuple-element(%[[parameter_42]]), index=0
// CHECK-NEXT:  %[[constant_46:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  ROOT %[[compare_47:[^ ]+]] = pred[] compare(%[[get_tuple_element_43]], %[[constant_46]]), direction=LT

// CHECK:       %[[$forward_transformation_body_54:[^ ]+]]
// CHECK-NEXT:  %[[parameter_55:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}, f32[3,3]{0,1}, f32[1,3]{1,0}, /*index=5*/f32[1,3]{1,0}, f32[3,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_56:[^ ]+]] = s32[] get-tuple-element(%[[parameter_55]]), index=0
// CHECK-NEXT:  %[[constant_63:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[add_64:[^ ]+]] = s32[] add(%[[get_tuple_element_56]], %[[constant_63]])
// CHECK-NEXT:  %[[get_tuple_element_57:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_55]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_58:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_55]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_59:[^ ]+]] = f32[3,3]{0,1} get-tuple-element(%[[parameter_55]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_60:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_55]]), index=4
// CHECK-NEXT:  %[[constant_69:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_65:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[add_66:[^ ]+]] = s32[] add(%[[get_tuple_element_56]], %[[constant_65]])
// CHECK-NEXT:  %[[dynamic_slice_70:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_58]], %[[constant_69]], %[[add_66]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[constant_67:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_68:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_57]], %[[constant_67]], %[[add_66]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[constant_74:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[subtract_73:[^ ]+]] = s32[] subtract(%[[add_66]], %[[constant_65]])
// CHECK-NEXT:  %[[dynamic_slice_75:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_60]], %[[constant_74]], %[[subtract_73]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[divide_76:[^ ]+]] = f32[1,1]{1,0} divide(%[[dynamic_slice_68]], %[[dynamic_slice_75]])
// CHECK-NEXT:  %[[get_tuple_element_61:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_55]]), index=5
// CHECK-NEXT:  %[[constant_78:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[subtract_77:[^ ]+]] = s32[] subtract(%[[add_66]], %[[constant_65]])
// CHECK-NEXT:  %[[dynamic_slice_79:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_61]], %[[constant_78]], %[[subtract_77]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[multiply_80:[^ ]+]] = f32[1,1]{1,0} multiply(%[[divide_76]], %[[dynamic_slice_79]])
// CHECK-NEXT:  %[[subtract_81:[^ ]+]] = f32[1,1]{1,0} subtract(%[[dynamic_slice_70]], %[[multiply_80]])
// CHECK-NEXT:  %[[constant_82:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_83:[^ ]+]] = f32[1,3]{1,0} dynamic-update-slice(%[[get_tuple_element_60]], %[[subtract_81]], %[[constant_82]], %[[add_66]])
// CHECK-NEXT:  %[[get_tuple_element_62:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_55]]), index=6
// CHECK-NEXT:  %[[constant_71:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_72:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[get_tuple_element_59]], %[[constant_71]], %[[add_66]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[reshape_87:[^ ]+]] = f32[1]{0} reshape(%[[divide_76]])
// CHECK-NEXT:  %[[broadcast_88:[^ ]+]] = f32[3,1]{1,0} broadcast(%[[reshape_87]]), dimensions={1}
// CHECK-NEXT:  %[[constant_85:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[subtract_84:[^ ]+]] = s32[] subtract(%[[add_66]], %[[constant_65]])
// CHECK-NEXT:  %[[dynamic_slice_86:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[get_tuple_element_62]], %[[constant_85]], %[[subtract_84]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[multiply_89:[^ ]+]] = f32[3,1]{1,0} multiply(%[[broadcast_88]], %[[dynamic_slice_86]])
// CHECK-NEXT:  %[[subtract_90:[^ ]+]] = f32[3,1]{1,0} subtract(%[[dynamic_slice_72]], %[[multiply_89]])
// CHECK-NEXT:  %[[constant_91:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_92:[^ ]+]] = f32[3,3]{1,0} dynamic-update-slice(%[[get_tuple_element_62]], %[[subtract_90]], %[[constant_91]], %[[add_66]])
// CHECK-NEXT:  ROOT %[[tuple_93:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}, f32[3,3]{0,1}, f32[1,3]{1,0}, /*index=5*/f32[1,3]{1,0}, f32[3,3]{1,0}) tuple(%[[add_64]], %[[get_tuple_element_57]], %[[get_tuple_element_58]], %[[get_tuple_element_59]], %[[dynamic_update_slice_83]], /*index=5*/%[[get_tuple_element_61]], %[[dynamic_update_slice_92]])

// CHECK:       %[[$forward_transformation_condition_94:[^ ]+]]
// CHECK-NEXT:  %[[parameter_95:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}, f32[3,3]{0,1}, f32[1,3]{1,0}, /*index=5*/f32[1,3]{1,0}, f32[3,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_97:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_95]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_98:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_95]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_99:[^ ]+]] = f32[3,3]{0,1} get-tuple-element(%[[parameter_95]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_100:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_95]]), index=4
// CHECK-NEXT:  %[[get_tuple_element_101:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_95]]), index=5
// CHECK-NEXT:  %[[get_tuple_element_102:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_95]]), index=6
// CHECK-NEXT:  %[[get_tuple_element_96:[^ ]+]] = s32[] get-tuple-element(%[[parameter_95]]), index=0
// CHECK-NEXT:  %[[constant_103:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  ROOT %[[compare_104:[^ ]+]] = pred[] compare(%[[get_tuple_element_96]], %[[constant_103]]), direction=LT

// CHECK:       %[[$backward_reduction_body_127:[^ ]+]]
// CHECK-NEXT:  %[[parameter_128:[^ ]+]] = (s32[], f32[3,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, f32[1,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_129:[^ ]+]] = s32[] get-tuple-element(%[[parameter_128]]), index=0
// CHECK-NEXT:  %[[constant_134:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[add_135:[^ ]+]] = s32[] add(%[[get_tuple_element_129]], %[[constant_134]])
// CHECK-NEXT:  %[[get_tuple_element_130:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_128]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_131:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_128]]), index=2
// CHECK-NEXT:  %[[constant_139:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_136:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[subtract_138:[^ ]+]] = s32[] subtract(%[[constant_136]], %[[get_tuple_element_129]])
// CHECK-NEXT:  %[[dynamic_slice_140:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[get_tuple_element_131]], %[[constant_139]], %[[subtract_138]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[get_tuple_element_132:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_128]]), index=3
// CHECK-NEXT:  %[[constant_141:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_142:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_132]], %[[constant_141]], %[[subtract_138]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[reshape_146:[^ ]+]] = f32[1]{0} reshape(%[[dynamic_slice_142]])
// CHECK-NEXT:  %[[broadcast_147:[^ ]+]] = f32[3,1]{1,0} broadcast(%[[reshape_146]]), dimensions={1}
// CHECK-NEXT:  %[[constant_144:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_137:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[add_143:[^ ]+]] = s32[] add(%[[subtract_138]], %[[constant_137]])
// CHECK-NEXT:  %[[dynamic_slice_145:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[get_tuple_element_130]], %[[constant_144]], %[[add_143]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[multiply_148:[^ ]+]] = f32[3,1]{1,0} multiply(%[[broadcast_147]], %[[dynamic_slice_145]])
// CHECK-NEXT:  %[[subtract_149:[^ ]+]] = f32[3,1]{1,0} subtract(%[[dynamic_slice_140]], %[[multiply_148]])
// CHECK-NEXT:  %[[get_tuple_element_133:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_128]]), index=4
// CHECK-NEXT:  %[[constant_150:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_151:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_133]], %[[constant_150]], %[[subtract_138]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[reshape_152:[^ ]+]] = f32[1]{0} reshape(%[[dynamic_slice_151]])
// CHECK-NEXT:  %[[broadcast_153:[^ ]+]] = f32[3,1]{1,0} broadcast(%[[reshape_152]]), dimensions={1}
// CHECK-NEXT:  %[[divide_154:[^ ]+]] = f32[3,1]{1,0} divide(%[[subtract_149]], %[[broadcast_153]])
// CHECK-NEXT:  %[[constant_155:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_156:[^ ]+]] = f32[3,3]{1,0} dynamic-update-slice(%[[get_tuple_element_130]], %[[divide_154]], %[[constant_155]], %[[subtract_138]])
// CHECK-NEXT:  ROOT %[[tuple_157:[^ ]+]] = (s32[], f32[3,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, f32[1,3]{1,0}) tuple(%[[add_135]], %[[dynamic_update_slice_156]], %[[get_tuple_element_131]], %[[get_tuple_element_132]], %[[get_tuple_element_133]])

// CHECK:       %[[$backward_reduction_condition_158:[^ ]+]]
// CHECK-NEXT:  %[[parameter_159:[^ ]+]] = (s32[], f32[3,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, f32[1,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_161:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_159]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_162:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_159]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_163:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_159]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_164:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_159]]), index=4
// CHECK-NEXT:  %[[get_tuple_element_160:[^ ]+]] = s32[] get-tuple-element(%[[parameter_159]]), index=0
// CHECK-NEXT:  %[[constant_165:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  ROOT %[[compare_166:[^ ]+]] = pred[] compare(%[[get_tuple_element_160]], %[[constant_165]]), direction=LT

// CHECK:       %[[$xla_builder_tridiagonal_TridiagonalSolver_174:[^ ]+]]
// CHECK-NEXT:  %[[constant_27:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_11:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_12:[^ ]+]] = f32[1,3]{1,0} broadcast(%[[constant_11]]), dimensions={}
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f32[3,3]{1,0} parameter(0)
// CHECK-NEXT:  %[[slice_3:[^ ]+]] = f32[1,3]{1,0} slice(%[[arg0_1]]), slice={[0:1], [0:3]}
// CHECK-NEXT:  %[[tuple_28:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}) tuple(%[[constant_27]], %[[broadcast_12]], %[[slice_3]])
// CHECK-NEXT:  %[[while_48:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}) while(%[[tuple_28]]), condition=%[[$preparation_condition_41]], body=%[[$preparation_body_29]]
// CHECK-NEXT:  %[[get_tuple_element_49:[^ ]+]] = s32[] get-tuple-element(%[[while_48]]), index=0
// CHECK-NEXT:  %[[get_tuple_element_51:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_48]]), index=2
// CHECK-NEXT:  %[[constant_52:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[slice_5:[^ ]+]] = f32[1,3]{1,0} slice(%[[arg0_1]]), slice={[2:3], [0:3]}
// CHECK-NEXT:  %[[slice_4:[^ ]+]] = f32[1,3]{1,0} slice(%[[arg0_1]]), slice={[1:2], [0:3]}
// CHECK-NEXT:  %[[arg1_2:[^ ]+]] = f32[3,3]{1,0} parameter(1)
// CHECK-NEXT:  %[[transpose_6:[^ ]+]] = f32[3,3]{0,1} transpose(%[[arg1_2]]), dimensions={1,0}
// CHECK-NEXT:  %[[constant_7:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_8:[^ ]+]] = f32[1,3]{1,0} broadcast(%[[constant_7]]), dimensions={}
// CHECK-NEXT:  %[[constant_16:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_15:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_17:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[slice_4]], %[[constant_16]], %[[constant_15]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[constant_19:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_18:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_20:[^ ]+]] = f32[1,3]{1,0} dynamic-update-slice(%[[broadcast_8]], %[[dynamic_slice_17]], %[[constant_19]], %[[constant_18]])
// CHECK-NEXT:  %[[get_tuple_element_50:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_48]]), index=1
// CHECK-NEXT:  %[[constant_9:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_10:[^ ]+]] = f32[3,3]{1,0} broadcast(%[[constant_9]]), dimensions={}
// CHECK-NEXT:  %[[constant_22:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_21:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_23:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[transpose_6]], %[[constant_22]], %[[constant_21]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[constant_25:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_24:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_26:[^ ]+]] = f32[3,3]{1,0} dynamic-update-slice(%[[broadcast_10]], %[[dynamic_slice_23]], %[[constant_25]], %[[constant_24]])
// CHECK-NEXT:  %[[tuple_53:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}, f32[3,3]{0,1}, f32[1,3]{1,0}, /*index=5*/f32[1,3]{1,0}, f32[3,3]{1,0}) tuple(%[[constant_52]], %[[slice_5]], %[[slice_4]], %[[transpose_6]], %[[dynamic_update_slice_20]], /*index=5*/%[[get_tuple_element_50]], %[[dynamic_update_slice_26]])
// CHECK-NEXT:  %[[while_105:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}, f32[3,3]{0,1}, f32[1,3]{1,0}, /*index=5*/f32[1,3]{1,0}, f32[3,3]{1,0}) while(%[[tuple_53]]), condition=%[[$forward_transformation_condition_94]], body=%[[$forward_transformation_body_54]]
// CHECK-NEXT:  %[[get_tuple_element_106:[^ ]+]] = s32[] get-tuple-element(%[[while_105]]), index=0
// CHECK-NEXT:  %[[get_tuple_element_107:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_105]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_108:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_105]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_109:[^ ]+]] = f32[3,3]{0,1} get-tuple-element(%[[while_105]]), index=3
// CHECK-NEXT:  %[[constant_125:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_14:[^ ]+]] = f32[3,3]{1,0} broadcast(%[[constant_13]]), dimensions={}
// CHECK-NEXT:  %[[get_tuple_element_112:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[while_105]]), index=6
// CHECK-NEXT:  %[[constant_114:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_113:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  %[[dynamic_slice_115:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[get_tuple_element_112]], %[[constant_114]], %[[constant_113]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[get_tuple_element_110:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_105]]), index=4
// CHECK-NEXT:  %[[constant_117:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_116:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  %[[dynamic_slice_118:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_110]], %[[constant_117]], %[[constant_116]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[reshape_119:[^ ]+]] = f32[1]{0} reshape(%[[dynamic_slice_118]])
// CHECK-NEXT:  %[[broadcast_120:[^ ]+]] = f32[3,1]{1,0} broadcast(%[[reshape_119]]), dimensions={1}
// CHECK-NEXT:  %[[divide_121:[^ ]+]] = f32[3,1]{1,0} divide(%[[dynamic_slice_115]], %[[broadcast_120]])
// CHECK-NEXT:  %[[constant_123:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_122:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  %[[dynamic_update_slice_124:[^ ]+]] = f32[3,3]{1,0} dynamic-update-slice(%[[broadcast_14]], %[[divide_121]], %[[constant_123]], %[[constant_122]])
// CHECK-NEXT:  %[[get_tuple_element_111:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_105]]), index=5
// CHECK-NEXT:  %[[tuple_126:[^ ]+]] = (s32[], f32[3,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, f32[1,3]{1,0}) tuple(%[[constant_125]], %[[dynamic_update_slice_124]], %[[get_tuple_element_112]], %[[get_tuple_element_111]], %[[get_tuple_element_110]])
// CHECK-NEXT:  %[[while_167:[^ ]+]] = (s32[], f32[3,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, f32[1,3]{1,0}) while(%[[tuple_126]]), condition=%[[$backward_reduction_condition_158]], body=%[[$backward_reduction_body_127]]
// CHECK-NEXT:  %[[get_tuple_element_168:[^ ]+]] = s32[] get-tuple-element(%[[while_167]]), index=0
// CHECK-NEXT:  %[[get_tuple_element_170:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[while_167]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_171:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_167]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_172:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_167]]), index=4
// CHECK-NEXT:  %[[get_tuple_element_169:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[while_167]]), index=1
// CHECK-NEXT:  ROOT %[[transpose_173:[^ ]+]] = f32[3,3]{0,1} transpose(%[[get_tuple_element_169]]), dimensions={1,0}

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f32[3,3]{1,0} parameter(0)
// CHECK-NEXT:  %[[Arg_1_2:[^ ]+]] = f32[3,3]{1,0} parameter(1)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f32[3,3]{1,0} custom-call(%[[Arg_0_1]], %[[Arg_1_2]]), custom_call_target="xla_builder.tridiagonal.TridiagonalSolver"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f32[3,3]{1,0} custom-call(%[[Arg_0_1]], %[[Arg_1_2]]), custom_call_target="xla_builder.tridiagonal.TridiagonalSolver", called_computations={%[[$xla_builder_tridiagonal_TridiagonalSolver_174]]}

HloModule tridiagonal_tridiagonal_solve, entry_computation_layout={(f32[3,3],f32[3,3])->f32[3,3]}

ENTRY %main.3 (Arg_0.1: f32[3,3], Arg_1.2: f32[3,3]) -> f32[3,3] {
  %Arg_0.1 = f32[3,3] parameter(0)
  %Arg_1.2 = f32[3,3] parameter(1)
  ROOT %custom-call.2 = f32[3,3] custom-call(%Arg_0.1, %Arg_1.2), custom_call_target="xla_builder.tridiagonal.TridiagonalSolver"
}

// -----

// CHECK-LABEL: HloModule tridiagonal_tridiagonal_solve_all_args, entry_computation_layout={(f32[1,3]{1,0}, f32[1,3]{1,0}, f32[1,3]{1,0}, f32[3,3]{1,0})->f32[3,3]{1,0}}

// CHECK:       %[[$preparation_body_27:[^ ]+]]
// CHECK-NEXT:  %[[parameter_28:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_29:[^ ]+]] = s32[] get-tuple-element(%[[parameter_28]]), index=0
// CHECK-NEXT:  %[[constant_32:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[add_33:[^ ]+]] = s32[] add(%[[get_tuple_element_29]], %[[constant_32]])
// CHECK-NEXT:  %[[get_tuple_element_30:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_28]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_31:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_28]]), index=2
// CHECK-NEXT:  %[[constant_34:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_35:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_31]], %[[constant_34]], %[[get_tuple_element_29]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[constant_36:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_37:[^ ]+]] = f32[1,3]{1,0} dynamic-update-slice(%[[get_tuple_element_30]], %[[dynamic_slice_35]], %[[constant_36]], %[[get_tuple_element_29]])
// CHECK-NEXT:  ROOT %[[tuple_38:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}) tuple(%[[add_33]], %[[dynamic_update_slice_37]], %[[get_tuple_element_31]])

// CHECK:       %[[$preparation_condition_39:[^ ]+]]
// CHECK-NEXT:  %[[parameter_40:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_42:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_40]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_43:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_40]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_41:[^ ]+]] = s32[] get-tuple-element(%[[parameter_40]]), index=0
// CHECK-NEXT:  %[[constant_44:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  ROOT %[[compare_45:[^ ]+]] = pred[] compare(%[[get_tuple_element_41]], %[[constant_44]]), direction=LT

// CHECK:       %[[$forward_transformation_body_52:[^ ]+]]
// CHECK-NEXT:  %[[parameter_53:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, /*index=5*/f32[1,3]{1,0}, f32[3,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_54:[^ ]+]] = s32[] get-tuple-element(%[[parameter_53]]), index=0
// CHECK-NEXT:  %[[constant_61:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[add_62:[^ ]+]] = s32[] add(%[[get_tuple_element_54]], %[[constant_61]])
// CHECK-NEXT:  %[[get_tuple_element_55:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_53]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_56:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_53]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_57:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_53]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_58:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_53]]), index=4
// CHECK-NEXT:  %[[constant_67:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_63:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[add_64:[^ ]+]] = s32[] add(%[[get_tuple_element_54]], %[[constant_63]])
// CHECK-NEXT:  %[[dynamic_slice_68:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_56]], %[[constant_67]], %[[add_64]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[constant_65:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_66:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_55]], %[[constant_65]], %[[add_64]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[constant_72:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[subtract_71:[^ ]+]] = s32[] subtract(%[[add_64]], %[[constant_63]])
// CHECK-NEXT:  %[[dynamic_slice_73:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_58]], %[[constant_72]], %[[subtract_71]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[divide_74:[^ ]+]] = f32[1,1]{1,0} divide(%[[dynamic_slice_66]], %[[dynamic_slice_73]])
// CHECK-NEXT:  %[[get_tuple_element_59:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_53]]), index=5
// CHECK-NEXT:  %[[constant_76:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[subtract_75:[^ ]+]] = s32[] subtract(%[[add_64]], %[[constant_63]])
// CHECK-NEXT:  %[[dynamic_slice_77:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_59]], %[[constant_76]], %[[subtract_75]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[multiply_78:[^ ]+]] = f32[1,1]{1,0} multiply(%[[divide_74]], %[[dynamic_slice_77]])
// CHECK-NEXT:  %[[subtract_79:[^ ]+]] = f32[1,1]{1,0} subtract(%[[dynamic_slice_68]], %[[multiply_78]])
// CHECK-NEXT:  %[[constant_80:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_81:[^ ]+]] = f32[1,3]{1,0} dynamic-update-slice(%[[get_tuple_element_58]], %[[subtract_79]], %[[constant_80]], %[[add_64]])
// CHECK-NEXT:  %[[get_tuple_element_60:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_53]]), index=6
// CHECK-NEXT:  %[[constant_69:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_70:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[get_tuple_element_57]], %[[constant_69]], %[[add_64]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[reshape_85:[^ ]+]] = f32[1]{0} reshape(%[[divide_74]])
// CHECK-NEXT:  %[[broadcast_86:[^ ]+]] = f32[3,1]{1,0} broadcast(%[[reshape_85]]), dimensions={1}
// CHECK-NEXT:  %[[constant_83:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[subtract_82:[^ ]+]] = s32[] subtract(%[[add_64]], %[[constant_63]])
// CHECK-NEXT:  %[[dynamic_slice_84:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[get_tuple_element_60]], %[[constant_83]], %[[subtract_82]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[multiply_87:[^ ]+]] = f32[3,1]{1,0} multiply(%[[broadcast_86]], %[[dynamic_slice_84]])
// CHECK-NEXT:  %[[subtract_88:[^ ]+]] = f32[3,1]{1,0} subtract(%[[dynamic_slice_70]], %[[multiply_87]])
// CHECK-NEXT:  %[[constant_89:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_90:[^ ]+]] = f32[3,3]{1,0} dynamic-update-slice(%[[get_tuple_element_60]], %[[subtract_88]], %[[constant_89]], %[[add_64]])
// CHECK-NEXT:  ROOT %[[tuple_91:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, /*index=5*/f32[1,3]{1,0}, f32[3,3]{1,0}) tuple(%[[add_62]], %[[get_tuple_element_55]], %[[get_tuple_element_56]], %[[get_tuple_element_57]], %[[dynamic_update_slice_81]], /*index=5*/%[[get_tuple_element_59]], %[[dynamic_update_slice_90]])

// CHECK:       %[[$forward_transformation_condition_92:[^ ]+]]
// CHECK-NEXT:  %[[parameter_93:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, /*index=5*/f32[1,3]{1,0}, f32[3,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_95:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_93]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_96:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_93]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_97:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_93]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_98:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_93]]), index=4
// CHECK-NEXT:  %[[get_tuple_element_99:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_93]]), index=5
// CHECK-NEXT:  %[[get_tuple_element_100:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_93]]), index=6
// CHECK-NEXT:  %[[get_tuple_element_94:[^ ]+]] = s32[] get-tuple-element(%[[parameter_93]]), index=0
// CHECK-NEXT:  %[[constant_101:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  ROOT %[[compare_102:[^ ]+]] = pred[] compare(%[[get_tuple_element_94]], %[[constant_101]]), direction=LT

// CHECK:       %[[$backward_reduction_body_125:[^ ]+]]
// CHECK-NEXT:  %[[parameter_126:[^ ]+]] = (s32[], f32[3,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, f32[1,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_127:[^ ]+]] = s32[] get-tuple-element(%[[parameter_126]]), index=0
// CHECK-NEXT:  %[[constant_132:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[add_133:[^ ]+]] = s32[] add(%[[get_tuple_element_127]], %[[constant_132]])
// CHECK-NEXT:  %[[get_tuple_element_128:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_126]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_129:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_126]]), index=2
// CHECK-NEXT:  %[[constant_137:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_134:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[subtract_136:[^ ]+]] = s32[] subtract(%[[constant_134]], %[[get_tuple_element_127]])
// CHECK-NEXT:  %[[dynamic_slice_138:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[get_tuple_element_129]], %[[constant_137]], %[[subtract_136]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[get_tuple_element_130:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_126]]), index=3
// CHECK-NEXT:  %[[constant_139:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_140:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_130]], %[[constant_139]], %[[subtract_136]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[reshape_144:[^ ]+]] = f32[1]{0} reshape(%[[dynamic_slice_140]])
// CHECK-NEXT:  %[[broadcast_145:[^ ]+]] = f32[3,1]{1,0} broadcast(%[[reshape_144]]), dimensions={1}
// CHECK-NEXT:  %[[constant_142:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_135:[^ ]+]] = s32[] constant(1)
// CHECK-NEXT:  %[[add_141:[^ ]+]] = s32[] add(%[[subtract_136]], %[[constant_135]])
// CHECK-NEXT:  %[[dynamic_slice_143:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[get_tuple_element_128]], %[[constant_142]], %[[add_141]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[multiply_146:[^ ]+]] = f32[3,1]{1,0} multiply(%[[broadcast_145]], %[[dynamic_slice_143]])
// CHECK-NEXT:  %[[subtract_147:[^ ]+]] = f32[3,1]{1,0} subtract(%[[dynamic_slice_138]], %[[multiply_146]])
// CHECK-NEXT:  %[[get_tuple_element_131:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_126]]), index=4
// CHECK-NEXT:  %[[constant_148:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_149:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_131]], %[[constant_148]], %[[subtract_136]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[reshape_150:[^ ]+]] = f32[1]{0} reshape(%[[dynamic_slice_149]])
// CHECK-NEXT:  %[[broadcast_151:[^ ]+]] = f32[3,1]{1,0} broadcast(%[[reshape_150]]), dimensions={1}
// CHECK-NEXT:  %[[divide_152:[^ ]+]] = f32[3,1]{1,0} divide(%[[subtract_147]], %[[broadcast_151]])
// CHECK-NEXT:  %[[constant_153:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_154:[^ ]+]] = f32[3,3]{1,0} dynamic-update-slice(%[[get_tuple_element_128]], %[[divide_152]], %[[constant_153]], %[[subtract_136]])
// CHECK-NEXT:  ROOT %[[tuple_155:[^ ]+]] = (s32[], f32[3,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, f32[1,3]{1,0}) tuple(%[[add_133]], %[[dynamic_update_slice_154]], %[[get_tuple_element_129]], %[[get_tuple_element_130]], %[[get_tuple_element_131]])

// CHECK:       %[[$backward_reduction_condition_156:[^ ]+]]
// CHECK-NEXT:  %[[parameter_157:[^ ]+]] = (s32[], f32[3,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, f32[1,3]{1,0}) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_159:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_157]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_160:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[parameter_157]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_161:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_157]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_162:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[parameter_157]]), index=4
// CHECK-NEXT:  %[[get_tuple_element_158:[^ ]+]] = s32[] get-tuple-element(%[[parameter_157]]), index=0
// CHECK-NEXT:  %[[constant_163:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  ROOT %[[compare_164:[^ ]+]] = pred[] compare(%[[get_tuple_element_158]], %[[constant_163]]), direction=LT

// CHECK:       %[[$xla_builder_tridiagonal_TridiagonalSolver_171:[^ ]+]]
// CHECK-NEXT:  %[[constant_25:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_9:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_10:[^ ]+]] = f32[1,3]{1,0} broadcast(%[[constant_9]]), dimensions={}
// CHECK-NEXT:  %[[arg2_3:[^ ]+]] = f32[1,3]{1,0} parameter(2)
// CHECK-NEXT:  %[[tuple_26:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}) tuple(%[[constant_25]], %[[broadcast_10]], %[[arg2_3]])
// CHECK-NEXT:  %[[while_46:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}) while(%[[tuple_26]]), condition=%[[$preparation_condition_39]], body=%[[$preparation_body_27]]
// CHECK-NEXT:  %[[get_tuple_element_47:[^ ]+]] = s32[] get-tuple-element(%[[while_46]]), index=0
// CHECK-NEXT:  %[[get_tuple_element_49:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_46]]), index=2
// CHECK-NEXT:  %[[constant_50:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f32[1,3]{1,0} parameter(0)
// CHECK-NEXT:  %[[arg1_2:[^ ]+]] = f32[1,3]{1,0} parameter(1)
// CHECK-NEXT:  %[[arg3_4:[^ ]+]] = f32[3,3]{1,0} parameter(3)
// CHECK-NEXT:  %[[constant_5:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_6:[^ ]+]] = f32[1,3]{1,0} broadcast(%[[constant_5]]), dimensions={}
// CHECK-NEXT:  %[[constant_14:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_15:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[arg1_2]], %[[constant_14]], %[[constant_13]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[constant_17:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_16:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_18:[^ ]+]] = f32[1,3]{1,0} dynamic-update-slice(%[[broadcast_6]], %[[dynamic_slice_15]], %[[constant_17]], %[[constant_16]])
// CHECK-NEXT:  %[[get_tuple_element_48:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_46]]), index=1
// CHECK-NEXT:  %[[constant_7:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_8:[^ ]+]] = f32[3,3]{1,0} broadcast(%[[constant_7]]), dimensions={}
// CHECK-NEXT:  %[[constant_20:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_19:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_slice_21:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[arg3_4]], %[[constant_20]], %[[constant_19]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[constant_23:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_22:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[dynamic_update_slice_24:[^ ]+]] = f32[3,3]{1,0} dynamic-update-slice(%[[broadcast_8]], %[[dynamic_slice_21]], %[[constant_23]], %[[constant_22]])
// CHECK-NEXT:  %[[tuple_51:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, /*index=5*/f32[1,3]{1,0}, f32[3,3]{1,0}) tuple(%[[constant_50]], %[[arg0_1]], %[[arg1_2]], %[[arg3_4]], %[[dynamic_update_slice_18]], /*index=5*/%[[get_tuple_element_48]], %[[dynamic_update_slice_24]])
// CHECK-NEXT:  %[[while_103:[^ ]+]] = (s32[], f32[1,3]{1,0}, f32[1,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, /*index=5*/f32[1,3]{1,0}, f32[3,3]{1,0}) while(%[[tuple_51]]), condition=%[[$forward_transformation_condition_92]], body=%[[$forward_transformation_body_52]]
// CHECK-NEXT:  %[[get_tuple_element_104:[^ ]+]] = s32[] get-tuple-element(%[[while_103]]), index=0
// CHECK-NEXT:  %[[get_tuple_element_105:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_103]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_106:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_103]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_107:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[while_103]]), index=3
// CHECK-NEXT:  %[[constant_123:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_11:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_12:[^ ]+]] = f32[3,3]{1,0} broadcast(%[[constant_11]]), dimensions={}
// CHECK-NEXT:  %[[get_tuple_element_110:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[while_103]]), index=6
// CHECK-NEXT:  %[[constant_112:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_111:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  %[[dynamic_slice_113:[^ ]+]] = f32[3,1]{1,0} dynamic-slice(%[[get_tuple_element_110]], %[[constant_112]], %[[constant_111]]), dynamic_slice_sizes={3,1}
// CHECK-NEXT:  %[[get_tuple_element_108:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_103]]), index=4
// CHECK-NEXT:  %[[constant_115:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_114:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  %[[dynamic_slice_116:[^ ]+]] = f32[1,1]{1,0} dynamic-slice(%[[get_tuple_element_108]], %[[constant_115]], %[[constant_114]]), dynamic_slice_sizes={1,1}
// CHECK-NEXT:  %[[reshape_117:[^ ]+]] = f32[1]{0} reshape(%[[dynamic_slice_116]])
// CHECK-NEXT:  %[[broadcast_118:[^ ]+]] = f32[3,1]{1,0} broadcast(%[[reshape_117]]), dimensions={1}
// CHECK-NEXT:  %[[divide_119:[^ ]+]] = f32[3,1]{1,0} divide(%[[dynamic_slice_113]], %[[broadcast_118]])
// CHECK-NEXT:  %[[constant_121:[^ ]+]] = s32[] constant(0)
// CHECK-NEXT:  %[[constant_120:[^ ]+]] = s32[] constant(2)
// CHECK-NEXT:  %[[dynamic_update_slice_122:[^ ]+]] = f32[3,3]{1,0} dynamic-update-slice(%[[broadcast_12]], %[[divide_119]], %[[constant_121]], %[[constant_120]])
// CHECK-NEXT:  %[[get_tuple_element_109:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_103]]), index=5
// CHECK-NEXT:  %[[tuple_124:[^ ]+]] = (s32[], f32[3,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, f32[1,3]{1,0}) tuple(%[[constant_123]], %[[dynamic_update_slice_122]], %[[get_tuple_element_110]], %[[get_tuple_element_109]], %[[get_tuple_element_108]])
// CHECK-NEXT:  %[[while_165:[^ ]+]] = (s32[], f32[3,3]{1,0}, f32[3,3]{1,0}, f32[1,3]{1,0}, f32[1,3]{1,0}) while(%[[tuple_124]]), condition=%[[$backward_reduction_condition_156]], body=%[[$backward_reduction_body_125]]
// CHECK-NEXT:  %[[get_tuple_element_166:[^ ]+]] = s32[] get-tuple-element(%[[while_165]]), index=0
// CHECK-NEXT:  %[[get_tuple_element_167:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[while_165]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_168:[^ ]+]] = f32[3,3]{1,0} get-tuple-element(%[[while_165]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_169:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_165]]), index=3
// CHECK-NEXT:  ROOT %[[get_tuple_element_170:[^ ]+]] = f32[1,3]{1,0} get-tuple-element(%[[while_165]]), index=4

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f32[1,3]{1,0} parameter(0)
// CHECK-NEXT:  %[[Arg_1_2:[^ ]+]] = f32[1,3]{1,0} parameter(1)
// CHECK-NEXT:  %[[Arg_2_3:[^ ]+]] = f32[1,3]{1,0} parameter(2)
// CHECK-NEXT:  %[[Arg_3_4:[^ ]+]] = f32[3,3]{1,0} parameter(3)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f32[3,3]{1,0} custom-call(%[[Arg_0_1]], %[[Arg_1_2]], %[[Arg_2_3]], %[[Arg_3_4]]), custom_call_target="xla_builder.tridiagonal.TridiagonalSolver"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f32[3,3]{1,0} custom-call(%[[Arg_0_1]], %[[Arg_1_2]], %[[Arg_2_3]], %[[Arg_3_4]]), custom_call_target="xla_builder.tridiagonal.TridiagonalSolver", called_computations={%[[$xla_builder_tridiagonal_TridiagonalSolver_171]]}

HloModule tridiagonal_tridiagonal_solve_all_args, entry_computation_layout={(f32[1,3],f32[1,3],f32[1,3],f32[3,3])->f32[3,3]}

ENTRY %main.3 (Arg_0.1: f32[1,3], Arg_1.2: f32[1,3], Arg_2.3: f32[1,3], Arg_3.4: f32[3,3]) -> f32[3,3] {
  %Arg_0.1 = f32[1,3] parameter(0)
  %Arg_1.2 = f32[1,3] parameter(1)
  %Arg_2.3 = f32[1,3] parameter(2)
  %Arg_3.4 = f32[3,3] parameter(3)
  ROOT %custom-call.2 = f32[3,3] custom-call(%Arg_0.1, %Arg_1.2, %Arg_2.3, %Arg_3.4), custom_call_target="xla_builder.tridiagonal.TridiagonalSolver"
}