// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt --passes=test-only-xla-builder --split-input-file %s | FileCheck %s

// CHECK-LABEL: HloModule main, entry_computation_layout={(f32[], f32[], f32[])->f32[]}

// CHECK:       %[[$or_47:[^ ]+]]
// CHECK-NEXT:  %[[lhs_48:[^ ]+]] = pred[] parameter(0)
// CHECK-NEXT:  %[[rhs_49:[^ ]+]] = pred[] parameter(1)
// CHECK-NEXT:  ROOT %[[or_50:[^ ]+]] = pred[] or(%[[lhs_48]], %[[rhs_49]])

// CHECK:       %[[$Betainc_body_51:[^ ]+]]
// CHECK-NEXT:  %[[parameter_52:[^ ]+]] = (u32[], pred[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[]) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_54:[^ ]+]] = pred[] get-tuple-element(%[[parameter_52]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_53:[^ ]+]] = u32[] get-tuple-element(%[[parameter_52]]), index=0
// CHECK-NEXT:  %[[constant_130:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[add_131:[^ ]+]] = u32[] add(%[[get_tuple_element_53]], %[[constant_130]])
// CHECK-NEXT:  %[[broadcast_108:[^ ]+]] = u32[] broadcast(%[[get_tuple_element_53]]), dimensions={}
// CHECK-NEXT:  %[[constant_109:[^ ]+]] = u32[] constant(0)
// CHECK-NEXT:  %[[compare_110:[^ ]+]] = pred[] compare(%[[broadcast_108]], %[[constant_109]]), direction=EQ
// CHECK-NEXT:  %[[constant_111:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[constant_112:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[select_113:[^ ]+]] = f32[] select(%[[compare_110]], %[[constant_111]], %[[constant_112]])
// CHECK-NEXT:  %[[broadcast_61:[^ ]+]] = u32[] broadcast(%[[get_tuple_element_53]]), dimensions={}
// CHECK-NEXT:  %[[constant_68:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[broadcast_69:[^ ]+]] = u32[] broadcast(%[[constant_68]]), dimensions={}
// CHECK-NEXT:  %[[compare_70:[^ ]+]] = pred[] compare(%[[broadcast_61]], %[[broadcast_69]]), direction=EQ
// CHECK-NEXT:  %[[constant_105:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[constant_62:[^ ]+]] = u32[] constant(2)
// CHECK-NEXT:  %[[broadcast_63:[^ ]+]] = u32[] broadcast(%[[constant_62]]), dimensions={}
// CHECK-NEXT:  %[[remainder_64:[^ ]+]] = u32[] remainder(%[[broadcast_61]], %[[broadcast_63]])
// CHECK-NEXT:  %[[constant_65:[^ ]+]] = u32[] constant(0)
// CHECK-NEXT:  %[[broadcast_66:[^ ]+]] = u32[] broadcast(%[[constant_65]]), dimensions={}
// CHECK-NEXT:  %[[compare_67:[^ ]+]] = pred[] compare(%[[remainder_64]], %[[broadcast_66]]), direction=EQ
// CHECK-NEXT:  %[[get_tuple_element_58:[^ ]+]] = f32[] get-tuple-element(%[[parameter_52]]), index=5
// CHECK-NEXT:  %[[constant_71:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[broadcast_72:[^ ]+]] = u32[] broadcast(%[[constant_71]]), dimensions={}
// CHECK-NEXT:  %[[subtract_73:[^ ]+]] = u32[] subtract(%[[broadcast_61]], %[[broadcast_72]])
// CHECK-NEXT:  %[[constant_74:[^ ]+]] = u32[] constant(2)
// CHECK-NEXT:  %[[broadcast_75:[^ ]+]] = u32[] broadcast(%[[constant_74]]), dimensions={}
// CHECK-NEXT:  %[[divide_76:[^ ]+]] = u32[] divide(%[[subtract_73]], %[[broadcast_75]])
// CHECK-NEXT:  %[[convert_77:[^ ]+]] = f32[] convert(%[[divide_76]])
// CHECK-NEXT:  %[[add_82:[^ ]+]] = f32[] add(%[[get_tuple_element_58]], %[[convert_77]])
// CHECK-NEXT:  %[[negate_83:[^ ]+]] = f32[] negate(%[[add_82]])
// CHECK-NEXT:  %[[get_tuple_element_59:[^ ]+]] = f32[] get-tuple-element(%[[parameter_52]]), index=6
// CHECK-NEXT:  %[[add_84:[^ ]+]] = f32[] add(%[[get_tuple_element_58]], %[[get_tuple_element_59]])
// CHECK-NEXT:  %[[add_85:[^ ]+]] = f32[] add(%[[add_84]], %[[convert_77]])
// CHECK-NEXT:  %[[multiply_86:[^ ]+]] = f32[] multiply(%[[negate_83]], %[[add_85]])
// CHECK-NEXT:  %[[get_tuple_element_60:[^ ]+]] = f32[] get-tuple-element(%[[parameter_52]]), index=7
// CHECK-NEXT:  %[[multiply_87:[^ ]+]] = f32[] multiply(%[[multiply_86]], %[[get_tuple_element_60]])
// CHECK-NEXT:  %[[constant_80:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[broadcast_81:[^ ]+]] = f32[] broadcast(%[[constant_80]]), dimensions={}
// CHECK-NEXT:  %[[multiply_88:[^ ]+]] = f32[] multiply(%[[broadcast_81]], %[[convert_77]])
// CHECK-NEXT:  %[[add_89:[^ ]+]] = f32[] add(%[[get_tuple_element_58]], %[[multiply_88]])
// CHECK-NEXT:  %[[multiply_90:[^ ]+]] = f32[] multiply(%[[broadcast_81]], %[[convert_77]])
// CHECK-NEXT:  %[[add_91:[^ ]+]] = f32[] add(%[[get_tuple_element_58]], %[[multiply_90]])
// CHECK-NEXT:  %[[constant_78:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[broadcast_79:[^ ]+]] = f32[] broadcast(%[[constant_78]]), dimensions={}
// CHECK-NEXT:  %[[add_92:[^ ]+]] = f32[] add(%[[add_91]], %[[broadcast_79]])
// CHECK-NEXT:  %[[multiply_93:[^ ]+]] = f32[] multiply(%[[add_89]], %[[add_92]])
// CHECK-NEXT:  %[[divide_94:[^ ]+]] = f32[] divide(%[[multiply_87]], %[[multiply_93]])
// CHECK-NEXT:  %[[subtract_95:[^ ]+]] = f32[] subtract(%[[get_tuple_element_59]], %[[convert_77]])
// CHECK-NEXT:  %[[multiply_96:[^ ]+]] = f32[] multiply(%[[convert_77]], %[[subtract_95]])
// CHECK-NEXT:  %[[multiply_97:[^ ]+]] = f32[] multiply(%[[multiply_96]], %[[get_tuple_element_60]])
// CHECK-NEXT:  %[[multiply_98:[^ ]+]] = f32[] multiply(%[[broadcast_81]], %[[convert_77]])
// CHECK-NEXT:  %[[add_99:[^ ]+]] = f32[] add(%[[get_tuple_element_58]], %[[multiply_98]])
// CHECK-NEXT:  %[[subtract_100:[^ ]+]] = f32[] subtract(%[[add_99]], %[[broadcast_79]])
// CHECK-NEXT:  %[[multiply_101:[^ ]+]] = f32[] multiply(%[[broadcast_81]], %[[convert_77]])
// CHECK-NEXT:  %[[add_102:[^ ]+]] = f32[] add(%[[get_tuple_element_58]], %[[multiply_101]])
// CHECK-NEXT:  %[[multiply_103:[^ ]+]] = f32[] multiply(%[[subtract_100]], %[[add_102]])
// CHECK-NEXT:  %[[divide_104:[^ ]+]] = f32[] divide(%[[multiply_97]], %[[multiply_103]])
// CHECK-NEXT:  %[[select_106:[^ ]+]] = f32[] select(%[[compare_67]], %[[divide_94]], %[[divide_104]])
// CHECK-NEXT:  %[[select_107:[^ ]+]] = f32[] select(%[[compare_70]], %[[constant_105]], %[[select_106]])
// CHECK-NEXT:  %[[get_tuple_element_55:[^ ]+]] = f32[] get-tuple-element(%[[parameter_52]]), index=2
// CHECK-NEXT:  %[[divide_114:[^ ]+]] = f32[] divide(%[[select_107]], %[[get_tuple_element_55]])
// CHECK-NEXT:  %[[add_115:[^ ]+]] = f32[] add(%[[select_113]], %[[divide_114]])
// CHECK-NEXT:  %[[abs_118:[^ ]+]] = f32[] abs(%[[add_115]])
// CHECK-NEXT:  %[[constant_116:[^ ]+]] = f32[] constant(5.96046448e-08)
// CHECK-NEXT:  %[[broadcast_117:[^ ]+]] = f32[] broadcast(%[[constant_116]]), dimensions={}
// CHECK-NEXT:  %[[compare_119:[^ ]+]] = pred[] compare(%[[abs_118]], %[[broadcast_117]]), direction=LT
// CHECK-NEXT:  %[[select_120:[^ ]+]] = f32[] select(%[[compare_119]], %[[broadcast_117]], %[[add_115]])
// CHECK-NEXT:  %[[constant_126:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[get_tuple_element_56:[^ ]+]] = f32[] get-tuple-element(%[[parameter_52]]), index=3
// CHECK-NEXT:  %[[multiply_121:[^ ]+]] = f32[] multiply(%[[select_107]], %[[get_tuple_element_56]])
// CHECK-NEXT:  %[[add_122:[^ ]+]] = f32[] add(%[[select_113]], %[[multiply_121]])
// CHECK-NEXT:  %[[abs_123:[^ ]+]] = f32[] abs(%[[add_122]])
// CHECK-NEXT:  %[[compare_124:[^ ]+]] = pred[] compare(%[[abs_123]], %[[broadcast_117]]), direction=LT
// CHECK-NEXT:  %[[select_125:[^ ]+]] = f32[] select(%[[compare_124]], %[[broadcast_117]], %[[add_122]])
// CHECK-NEXT:  %[[divide_127:[^ ]+]] = f32[] divide(%[[constant_126]], %[[select_125]])
// CHECK-NEXT:  %[[multiply_128:[^ ]+]] = f32[] multiply(%[[select_120]], %[[divide_127]])
// CHECK-NEXT:  %[[constant_132:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[broadcast_133:[^ ]+]] = f32[] broadcast(%[[constant_132]]), dimensions={}
// CHECK-NEXT:  %[[subtract_134:[^ ]+]] = f32[] subtract(%[[multiply_128]], %[[broadcast_133]])
// CHECK-NEXT:  %[[abs_135:[^ ]+]] = f32[] abs(%[[subtract_134]])
// CHECK-NEXT:  %[[constant_136:[^ ]+]] = f32[] constant(5.96046448e-08)
// CHECK-NEXT:  %[[broadcast_137:[^ ]+]] = f32[] broadcast(%[[constant_136]]), dimensions={}
// CHECK-NEXT:  %[[compare_138:[^ ]+]] = pred[] compare(%[[abs_135]], %[[broadcast_137]]), direction=GE
// CHECK-NEXT:  %[[constant_139:[^ ]+]] = pred[] constant(false)
// CHECK-NEXT:  %[[reduce_140:[^ ]+]] = pred[] reduce(%[[compare_138]], %[[constant_139]]), dimensions={}, to_apply=%[[$or_47]]
// CHECK-NEXT:  %[[get_tuple_element_57:[^ ]+]] = f32[] get-tuple-element(%[[parameter_52]]), index=4
// CHECK-NEXT:  %[[multiply_129:[^ ]+]] = f32[] multiply(%[[get_tuple_element_57]], %[[multiply_128]])
// CHECK-NEXT:  ROOT %[[tuple_141:[^ ]+]] = (u32[], pred[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[]) tuple(%[[add_131]], %[[reduce_140]], %[[select_120]], %[[divide_127]], %[[multiply_129]], /*index=5*/%[[get_tuple_element_58]], %[[get_tuple_element_59]], %[[get_tuple_element_60]])

// CHECK:       %[[$Betainc_condition_142:[^ ]+]]
// CHECK-NEXT:  %[[parameter_143:[^ ]+]] = (u32[], pred[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[]) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_146:[^ ]+]] = f32[] get-tuple-element(%[[parameter_143]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_147:[^ ]+]] = f32[] get-tuple-element(%[[parameter_143]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_148:[^ ]+]] = f32[] get-tuple-element(%[[parameter_143]]), index=4
// CHECK-NEXT:  %[[get_tuple_element_149:[^ ]+]] = f32[] get-tuple-element(%[[parameter_143]]), index=5
// CHECK-NEXT:  %[[get_tuple_element_150:[^ ]+]] = f32[] get-tuple-element(%[[parameter_143]]), index=6
// CHECK-NEXT:  %[[get_tuple_element_151:[^ ]+]] = f32[] get-tuple-element(%[[parameter_143]]), index=7
// CHECK-NEXT:  %[[get_tuple_element_144:[^ ]+]] = u32[] get-tuple-element(%[[parameter_143]]), index=0
// CHECK-NEXT:  %[[constant_152:[^ ]+]] = u32[] constant(200)
// CHECK-NEXT:  %[[compare_153:[^ ]+]] = pred[] compare(%[[get_tuple_element_144]], %[[constant_152]]), direction=LT
// CHECK-NEXT:  %[[get_tuple_element_145:[^ ]+]] = pred[] get-tuple-element(%[[parameter_143]]), index=1
// CHECK-NEXT:  ROOT %[[and_154:[^ ]+]] = pred[] and(%[[compare_153]], %[[get_tuple_element_145]])

// CHECK:       %[[$xla_builder_math_RegularizedIncompleteBeta_465:[^ ]+]]
// CHECK-NEXT:  %[[constant_42:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[constant_43:[^ ]+]] = pred[] constant(true)
// CHECK-NEXT:  %[[constant_30:[^ ]+]] = u32[] constant(0)
// CHECK-NEXT:  %[[broadcast_31:[^ ]+]] = u32[] broadcast(%[[constant_30]]), dimensions={}
// CHECK-NEXT:  %[[constant_32:[^ ]+]] = u32[] constant(0)
// CHECK-NEXT:  %[[compare_33:[^ ]+]] = pred[] compare(%[[broadcast_31]], %[[constant_32]]), direction=EQ
// CHECK-NEXT:  %[[constant_34:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[constant_35:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[select_36:[^ ]+]] = f32[] select(%[[compare_33]], %[[constant_34]], %[[constant_35]])
// CHECK-NEXT:  %[[abs_39:[^ ]+]] = f32[] abs(%[[select_36]])
// CHECK-NEXT:  %[[constant_37:[^ ]+]] = f32[] constant(5.96046448e-08)
// CHECK-NEXT:  %[[broadcast_38:[^ ]+]] = f32[] broadcast(%[[constant_37]]), dimensions={}
// CHECK-NEXT:  %[[compare_40:[^ ]+]] = pred[] compare(%[[abs_39]], %[[broadcast_38]]), direction=LT
// CHECK-NEXT:  %[[select_41:[^ ]+]] = f32[] select(%[[compare_40]], %[[broadcast_38]], %[[select_36]])
// CHECK-NEXT:  %[[constant_44:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_45:[^ ]+]] = f32[] broadcast(%[[constant_44]]), dimensions={}
// CHECK-NEXT:  %[[arg2_3:[^ ]+]] = f32[] parameter(2)
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[constant_15:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[broadcast_16:[^ ]+]] = f32[] broadcast(%[[constant_15]]), dimensions={}
// CHECK-NEXT:  %[[add_17:[^ ]+]] = f32[] add(%[[arg0_1]], %[[broadcast_16]])
// CHECK-NEXT:  %[[arg1_2:[^ ]+]] = f32[] parameter(1)
// CHECK-NEXT:  %[[add_18:[^ ]+]] = f32[] add(%[[arg0_1]], %[[arg1_2]])
// CHECK-NEXT:  %[[constant_19:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[broadcast_20:[^ ]+]] = f32[] broadcast(%[[constant_19]]), dimensions={}
// CHECK-NEXT:  %[[add_21:[^ ]+]] = f32[] add(%[[add_18]], %[[broadcast_20]])
// CHECK-NEXT:  %[[divide_22:[^ ]+]] = f32[] divide(%[[add_17]], %[[add_21]])
// CHECK-NEXT:  %[[compare_23:[^ ]+]] = pred[] compare(%[[arg2_3]], %[[divide_22]]), direction=LT
// CHECK-NEXT:  %[[select_24:[^ ]+]] = f32[] select(%[[compare_23]], %[[arg0_1]], %[[arg1_2]])
// CHECK-NEXT:  %[[select_25:[^ ]+]] = f32[] select(%[[compare_23]], %[[arg1_2]], %[[arg0_1]])
// CHECK-NEXT:  %[[constant_26:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[broadcast_27:[^ ]+]] = f32[] broadcast(%[[constant_26]]), dimensions={}
// CHECK-NEXT:  %[[subtract_28:[^ ]+]] = f32[] subtract(%[[broadcast_27]], %[[arg2_3]])
// CHECK-NEXT:  %[[select_29:[^ ]+]] = f32[] select(%[[compare_23]], %[[arg2_3]], %[[subtract_28]])
// CHECK-NEXT:  %[[tuple_46:[^ ]+]] = (u32[], pred[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[]) tuple(%[[constant_42]], %[[constant_43]], %[[select_41]], %[[broadcast_45]], %[[select_41]], /*index=5*/%[[select_24]], %[[select_25]], %[[select_29]])
// CHECK-NEXT:  %[[while_155:[^ ]+]] = (u32[], pred[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[]) while(%[[tuple_46]]), condition=%[[$Betainc_condition_142]], body=%[[$Betainc_body_51]]
// CHECK-NEXT:  %[[get_tuple_element_156:[^ ]+]] = u32[] get-tuple-element(%[[while_155]]), index=0
// CHECK-NEXT:  %[[get_tuple_element_157:[^ ]+]] = pred[] get-tuple-element(%[[while_155]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_158:[^ ]+]] = f32[] get-tuple-element(%[[while_155]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_159:[^ ]+]] = f32[] get-tuple-element(%[[while_155]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_161:[^ ]+]] = f32[] get-tuple-element(%[[while_155]]), index=5
// CHECK-NEXT:  %[[get_tuple_element_162:[^ ]+]] = f32[] get-tuple-element(%[[while_155]]), index=6
// CHECK-NEXT:  %[[get_tuple_element_163:[^ ]+]] = f32[] get-tuple-element(%[[while_155]]), index=7
// CHECK-NEXT:  %[[constant_4:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_5:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[constant_4]]), direction=LE
// CHECK-NEXT:  %[[constant_6:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_7:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[constant_6]]), direction=LE
// CHECK-NEXT:  %[[or_8:[^ ]+]] = pred[] or(%[[compare_5]], %[[compare_7]])
// CHECK-NEXT:  %[[constant_9:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_10:[^ ]+]] = pred[] compare(%[[arg2_3]], %[[constant_9]]), direction=LT
// CHECK-NEXT:  %[[or_11:[^ ]+]] = pred[] or(%[[or_8]], %[[compare_10]])
// CHECK-NEXT:  %[[constant_12:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[compare_13:[^ ]+]] = pred[] compare(%[[arg2_3]], %[[constant_12]]), direction=GT
// CHECK-NEXT:  %[[or_14:[^ ]+]] = pred[] or(%[[or_11]], %[[compare_13]])
// CHECK-NEXT:  %[[constant_459:[^ ]+]] = f32[] constant(nan)
// CHECK-NEXT:  %[[get_tuple_element_160:[^ ]+]] = f32[] get-tuple-element(%[[while_155]]), index=4
// CHECK-NEXT:  %[[log_449:[^ ]+]] = f32[] log(%[[select_29]])
// CHECK-NEXT:  %[[multiply_450:[^ ]+]] = f32[] multiply(%[[log_449]], %[[select_24]])
// CHECK-NEXT:  %[[negate_451:[^ ]+]] = f32[] negate(%[[select_29]])
// CHECK-NEXT:  %[[log_plus_one_452:[^ ]+]] = f32[] log-plus-one(%[[negate_451]])
// CHECK-NEXT:  %[[multiply_453:[^ ]+]] = f32[] multiply(%[[log_plus_one_452]], %[[select_25]])
// CHECK-NEXT:  %[[add_454:[^ ]+]] = f32[] add(%[[multiply_450]], %[[multiply_453]])
// CHECK-NEXT:  %[[abs_254:[^ ]+]] = f32[] abs(%[[select_24]])
// CHECK-NEXT:  %[[constant_255:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[compare_256:[^ ]+]] = pred[] compare(%[[abs_254]], %[[constant_255]]), direction=EQ
// CHECK-NEXT:  %[[constant_252:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[broadcast_253:[^ ]+]] = f32[] broadcast(%[[constant_252]]), dimensions={}
// CHECK-NEXT:  %[[constant_164:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_172:[^ ]+]] = pred[] compare(%[[select_24]], %[[constant_164]]), direction=LT
// CHECK-NEXT:  %[[constant_166:[^ ]+]] = f32[] constant(3.14159274)
// CHECK-NEXT:  %[[abs_235:[^ ]+]] = f32[] abs(%[[select_24]])
// CHECK-NEXT:  %[[floor_236:[^ ]+]] = f32[] floor(%[[abs_235]])
// CHECK-NEXT:  %[[subtract_237:[^ ]+]] = f32[] subtract(%[[abs_235]], %[[floor_236]])
// CHECK-NEXT:  %[[constant_238:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_239:[^ ]+]] = pred[] compare(%[[subtract_237]], %[[constant_238]]), direction=GT
// CHECK-NEXT:  %[[constant_240:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_241:[^ ]+]] = f32[] subtract(%[[constant_240]], %[[subtract_237]])
// CHECK-NEXT:  %[[select_242:[^ ]+]] = f32[] select(%[[compare_239]], %[[subtract_241]], %[[subtract_237]])
// CHECK-NEXT:  %[[multiply_243:[^ ]+]] = f32[] multiply(%[[constant_166]], %[[select_242]])
// CHECK-NEXT:  %[[sine_244:[^ ]+]] = f32[] sine(%[[multiply_243]])
// CHECK-NEXT:  %[[log_245:[^ ]+]] = f32[] log(%[[sine_244]])
// CHECK-NEXT:  %[[is_finite_246:[^ ]+]] = pred[] is-finite(%[[log_245]])
// CHECK-NEXT:  %[[constant_167:[^ ]+]] = f32[] constant(1.14472985)
// CHECK-NEXT:  %[[subtract_247:[^ ]+]] = f32[] subtract(%[[constant_167]], %[[log_245]])
// CHECK-NEXT:  %[[constant_168:[^ ]+]] = f32[] constant(0.918938518)
// CHECK-NEXT:  %[[negate_173:[^ ]+]] = f32[] negate(%[[select_24]])
// CHECK-NEXT:  %[[constant_165:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_174:[^ ]+]] = f32[] subtract(%[[select_24]], %[[constant_165]])
// CHECK-NEXT:  %[[select_175:[^ ]+]] = f32[] select(%[[compare_172]], %[[negate_173]], %[[subtract_174]])
// CHECK-NEXT:  %[[add_228:[^ ]+]] = f32[] add(%[[select_175]], %[[constant_164]])
// CHECK-NEXT:  %[[constant_169:[^ ]+]] = f32[] constant(7.5)
// CHECK-NEXT:  %[[add_224:[^ ]+]] = f32[] add(%[[constant_169]], %[[select_175]])
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = f32[] constant(2.01490307)
// CHECK-NEXT:  %[[divide_225:[^ ]+]] = f32[] divide(%[[select_175]], %[[constant_169]])
// CHECK-NEXT:  %[[log_plus_one_226:[^ ]+]] = f32[] log-plus-one(%[[divide_225]])
// CHECK-NEXT:  %[[add_227:[^ ]+]] = f32[] add(%[[constant_170]], %[[log_plus_one_226]])
// CHECK-NEXT:  %[[divide_229:[^ ]+]] = f32[] divide(%[[add_224]], %[[add_227]])
// CHECK-NEXT:  %[[subtract_230:[^ ]+]] = f32[] subtract(%[[add_228]], %[[divide_229]])
// CHECK-NEXT:  %[[multiply_231:[^ ]+]] = f32[] multiply(%[[subtract_230]], %[[add_227]])
// CHECK-NEXT:  %[[add_232:[^ ]+]] = f32[] add(%[[constant_168]], %[[multiply_231]])
// CHECK-NEXT:  %[[constant_171:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[constant_176:[^ ]+]] = f32[] constant(676.520386)
// CHECK-NEXT:  %[[constant_177:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[add_178:[^ ]+]] = f32[] add(%[[select_175]], %[[constant_177]])
// CHECK-NEXT:  %[[add_179:[^ ]+]] = f32[] add(%[[add_178]], %[[constant_165]])
// CHECK-NEXT:  %[[divide_180:[^ ]+]] = f32[] divide(%[[constant_176]], %[[add_179]])
// CHECK-NEXT:  %[[add_181:[^ ]+]] = f32[] add(%[[constant_171]], %[[divide_180]])
// CHECK-NEXT:  %[[constant_182:[^ ]+]] = f32[] constant(-1259.13916)
// CHECK-NEXT:  %[[constant_183:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_184:[^ ]+]] = f32[] add(%[[select_175]], %[[constant_183]])
// CHECK-NEXT:  %[[add_185:[^ ]+]] = f32[] add(%[[add_184]], %[[constant_165]])
// CHECK-NEXT:  %[[divide_186:[^ ]+]] = f32[] divide(%[[constant_182]], %[[add_185]])
// CHECK-NEXT:  %[[add_187:[^ ]+]] = f32[] add(%[[add_181]], %[[divide_186]])
// CHECK-NEXT:  %[[constant_188:[^ ]+]] = f32[] constant(771.323425)
// CHECK-NEXT:  %[[constant_189:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[add_190:[^ ]+]] = f32[] add(%[[select_175]], %[[constant_189]])
// CHECK-NEXT:  %[[add_191:[^ ]+]] = f32[] add(%[[add_190]], %[[constant_165]])
// CHECK-NEXT:  %[[divide_192:[^ ]+]] = f32[] divide(%[[constant_188]], %[[add_191]])
// CHECK-NEXT:  %[[add_193:[^ ]+]] = f32[] add(%[[add_187]], %[[divide_192]])
// CHECK-NEXT:  %[[constant_194:[^ ]+]] = f32[] constant(-176.615036)
// CHECK-NEXT:  %[[constant_195:[^ ]+]] = f32[] constant(3)
// CHECK-NEXT:  %[[add_196:[^ ]+]] = f32[] add(%[[select_175]], %[[constant_195]])
// CHECK-NEXT:  %[[add_197:[^ ]+]] = f32[] add(%[[add_196]], %[[constant_165]])
// CHECK-NEXT:  %[[divide_198:[^ ]+]] = f32[] divide(%[[constant_194]], %[[add_197]])
// CHECK-NEXT:  %[[add_199:[^ ]+]] = f32[] add(%[[add_193]], %[[divide_198]])
// CHECK-NEXT:  %[[constant_200:[^ ]+]] = f32[] constant(12.5073433)
// CHECK-NEXT:  %[[constant_201:[^ ]+]] = f32[] constant(4)
// CHECK-NEXT:  %[[add_202:[^ ]+]] = f32[] add(%[[select_175]], %[[constant_201]])
// CHECK-NEXT:  %[[add_203:[^ ]+]] = f32[] add(%[[add_202]], %[[constant_165]])
// CHECK-NEXT:  %[[divide_204:[^ ]+]] = f32[] divide(%[[constant_200]], %[[add_203]])
// CHECK-NEXT:  %[[add_205:[^ ]+]] = f32[] add(%[[add_199]], %[[divide_204]])
// CHECK-NEXT:  %[[constant_206:[^ ]+]] = f32[] constant(-0.138571098)
// CHECK-NEXT:  %[[constant_207:[^ ]+]] = f32[] constant(5)
// CHECK-NEXT:  %[[add_208:[^ ]+]] = f32[] add(%[[select_175]], %[[constant_207]])
// CHECK-NEXT:  %[[add_209:[^ ]+]] = f32[] add(%[[add_208]], %[[constant_165]])
// CHECK-NEXT:  %[[divide_210:[^ ]+]] = f32[] divide(%[[constant_206]], %[[add_209]])
// CHECK-NEXT:  %[[add_211:[^ ]+]] = f32[] add(%[[add_205]], %[[divide_210]])
// CHECK-NEXT:  %[[constant_212:[^ ]+]] = f32[] constant(9.98436917e-06)
// CHECK-NEXT:  %[[constant_213:[^ ]+]] = f32[] constant(6)
// CHECK-NEXT:  %[[add_214:[^ ]+]] = f32[] add(%[[select_175]], %[[constant_213]])
// CHECK-NEXT:  %[[add_215:[^ ]+]] = f32[] add(%[[add_214]], %[[constant_165]])
// CHECK-NEXT:  %[[divide_216:[^ ]+]] = f32[] divide(%[[constant_212]], %[[add_215]])
// CHECK-NEXT:  %[[add_217:[^ ]+]] = f32[] add(%[[add_211]], %[[divide_216]])
// CHECK-NEXT:  %[[constant_218:[^ ]+]] = f32[] constant(1.50563267e-07)
// CHECK-NEXT:  %[[constant_219:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_220:[^ ]+]] = f32[] add(%[[select_175]], %[[constant_219]])
// CHECK-NEXT:  %[[add_221:[^ ]+]] = f32[] add(%[[add_220]], %[[constant_165]])
// CHECK-NEXT:  %[[divide_222:[^ ]+]] = f32[] divide(%[[constant_218]], %[[add_221]])
// CHECK-NEXT:  %[[add_223:[^ ]+]] = f32[] add(%[[add_217]], %[[divide_222]])
// CHECK-NEXT:  %[[log_233:[^ ]+]] = f32[] log(%[[add_223]])
// CHECK-NEXT:  %[[add_234:[^ ]+]] = f32[] add(%[[add_232]], %[[log_233]])
// CHECK-NEXT:  %[[subtract_248:[^ ]+]] = f32[] subtract(%[[subtract_247]], %[[add_234]])
// CHECK-NEXT:  %[[negate_249:[^ ]+]] = f32[] negate(%[[log_245]])
// CHECK-NEXT:  %[[select_250:[^ ]+]] = f32[] select(%[[is_finite_246]], %[[subtract_248]], %[[negate_249]])
// CHECK-NEXT:  %[[select_251:[^ ]+]] = f32[] select(%[[compare_172]], %[[select_250]], %[[add_234]])
// CHECK-NEXT:  %[[select_257:[^ ]+]] = f32[] select(%[[compare_256]], %[[broadcast_253]], %[[select_251]])
// CHECK-NEXT:  %[[abs_348:[^ ]+]] = f32[] abs(%[[select_25]])
// CHECK-NEXT:  %[[constant_349:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[compare_350:[^ ]+]] = pred[] compare(%[[abs_348]], %[[constant_349]]), direction=EQ
// CHECK-NEXT:  %[[constant_346:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[broadcast_347:[^ ]+]] = f32[] broadcast(%[[constant_346]]), dimensions={}
// CHECK-NEXT:  %[[constant_258:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_266:[^ ]+]] = pred[] compare(%[[select_25]], %[[constant_258]]), direction=LT
// CHECK-NEXT:  %[[constant_260:[^ ]+]] = f32[] constant(3.14159274)
// CHECK-NEXT:  %[[abs_329:[^ ]+]] = f32[] abs(%[[select_25]])
// CHECK-NEXT:  %[[floor_330:[^ ]+]] = f32[] floor(%[[abs_329]])
// CHECK-NEXT:  %[[subtract_331:[^ ]+]] = f32[] subtract(%[[abs_329]], %[[floor_330]])
// CHECK-NEXT:  %[[constant_332:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_333:[^ ]+]] = pred[] compare(%[[subtract_331]], %[[constant_332]]), direction=GT
// CHECK-NEXT:  %[[constant_334:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_335:[^ ]+]] = f32[] subtract(%[[constant_334]], %[[subtract_331]])
// CHECK-NEXT:  %[[select_336:[^ ]+]] = f32[] select(%[[compare_333]], %[[subtract_335]], %[[subtract_331]])
// CHECK-NEXT:  %[[multiply_337:[^ ]+]] = f32[] multiply(%[[constant_260]], %[[select_336]])
// CHECK-NEXT:  %[[sine_338:[^ ]+]] = f32[] sine(%[[multiply_337]])
// CHECK-NEXT:  %[[log_339:[^ ]+]] = f32[] log(%[[sine_338]])
// CHECK-NEXT:  %[[is_finite_340:[^ ]+]] = pred[] is-finite(%[[log_339]])
// CHECK-NEXT:  %[[constant_261:[^ ]+]] = f32[] constant(1.14472985)
// CHECK-NEXT:  %[[subtract_341:[^ ]+]] = f32[] subtract(%[[constant_261]], %[[log_339]])
// CHECK-NEXT:  %[[constant_262:[^ ]+]] = f32[] constant(0.918938518)
// CHECK-NEXT:  %[[negate_267:[^ ]+]] = f32[] negate(%[[select_25]])
// CHECK-NEXT:  %[[constant_259:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_268:[^ ]+]] = f32[] subtract(%[[select_25]], %[[constant_259]])
// CHECK-NEXT:  %[[select_269:[^ ]+]] = f32[] select(%[[compare_266]], %[[negate_267]], %[[subtract_268]])
// CHECK-NEXT:  %[[add_322:[^ ]+]] = f32[] add(%[[select_269]], %[[constant_258]])
// CHECK-NEXT:  %[[constant_263:[^ ]+]] = f32[] constant(7.5)
// CHECK-NEXT:  %[[add_318:[^ ]+]] = f32[] add(%[[constant_263]], %[[select_269]])
// CHECK-NEXT:  %[[constant_264:[^ ]+]] = f32[] constant(2.01490307)
// CHECK-NEXT:  %[[divide_319:[^ ]+]] = f32[] divide(%[[select_269]], %[[constant_263]])
// CHECK-NEXT:  %[[log_plus_one_320:[^ ]+]] = f32[] log-plus-one(%[[divide_319]])
// CHECK-NEXT:  %[[add_321:[^ ]+]] = f32[] add(%[[constant_264]], %[[log_plus_one_320]])
// CHECK-NEXT:  %[[divide_323:[^ ]+]] = f32[] divide(%[[add_318]], %[[add_321]])
// CHECK-NEXT:  %[[subtract_324:[^ ]+]] = f32[] subtract(%[[add_322]], %[[divide_323]])
// CHECK-NEXT:  %[[multiply_325:[^ ]+]] = f32[] multiply(%[[subtract_324]], %[[add_321]])
// CHECK-NEXT:  %[[add_326:[^ ]+]] = f32[] add(%[[constant_262]], %[[multiply_325]])
// CHECK-NEXT:  %[[constant_265:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[constant_270:[^ ]+]] = f32[] constant(676.520386)
// CHECK-NEXT:  %[[constant_271:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[add_272:[^ ]+]] = f32[] add(%[[select_269]], %[[constant_271]])
// CHECK-NEXT:  %[[add_273:[^ ]+]] = f32[] add(%[[add_272]], %[[constant_259]])
// CHECK-NEXT:  %[[divide_274:[^ ]+]] = f32[] divide(%[[constant_270]], %[[add_273]])
// CHECK-NEXT:  %[[add_275:[^ ]+]] = f32[] add(%[[constant_265]], %[[divide_274]])
// CHECK-NEXT:  %[[constant_276:[^ ]+]] = f32[] constant(-1259.13916)
// CHECK-NEXT:  %[[constant_277:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_278:[^ ]+]] = f32[] add(%[[select_269]], %[[constant_277]])
// CHECK-NEXT:  %[[add_279:[^ ]+]] = f32[] add(%[[add_278]], %[[constant_259]])
// CHECK-NEXT:  %[[divide_280:[^ ]+]] = f32[] divide(%[[constant_276]], %[[add_279]])
// CHECK-NEXT:  %[[add_281:[^ ]+]] = f32[] add(%[[add_275]], %[[divide_280]])
// CHECK-NEXT:  %[[constant_282:[^ ]+]] = f32[] constant(771.323425)
// CHECK-NEXT:  %[[constant_283:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[add_284:[^ ]+]] = f32[] add(%[[select_269]], %[[constant_283]])
// CHECK-NEXT:  %[[add_285:[^ ]+]] = f32[] add(%[[add_284]], %[[constant_259]])
// CHECK-NEXT:  %[[divide_286:[^ ]+]] = f32[] divide(%[[constant_282]], %[[add_285]])
// CHECK-NEXT:  %[[add_287:[^ ]+]] = f32[] add(%[[add_281]], %[[divide_286]])
// CHECK-NEXT:  %[[constant_288:[^ ]+]] = f32[] constant(-176.615036)
// CHECK-NEXT:  %[[constant_289:[^ ]+]] = f32[] constant(3)
// CHECK-NEXT:  %[[add_290:[^ ]+]] = f32[] add(%[[select_269]], %[[constant_289]])
// CHECK-NEXT:  %[[add_291:[^ ]+]] = f32[] add(%[[add_290]], %[[constant_259]])
// CHECK-NEXT:  %[[divide_292:[^ ]+]] = f32[] divide(%[[constant_288]], %[[add_291]])
// CHECK-NEXT:  %[[add_293:[^ ]+]] = f32[] add(%[[add_287]], %[[divide_292]])
// CHECK-NEXT:  %[[constant_294:[^ ]+]] = f32[] constant(12.5073433)
// CHECK-NEXT:  %[[constant_295:[^ ]+]] = f32[] constant(4)
// CHECK-NEXT:  %[[add_296:[^ ]+]] = f32[] add(%[[select_269]], %[[constant_295]])
// CHECK-NEXT:  %[[add_297:[^ ]+]] = f32[] add(%[[add_296]], %[[constant_259]])
// CHECK-NEXT:  %[[divide_298:[^ ]+]] = f32[] divide(%[[constant_294]], %[[add_297]])
// CHECK-NEXT:  %[[add_299:[^ ]+]] = f32[] add(%[[add_293]], %[[divide_298]])
// CHECK-NEXT:  %[[constant_300:[^ ]+]] = f32[] constant(-0.138571098)
// CHECK-NEXT:  %[[constant_301:[^ ]+]] = f32[] constant(5)
// CHECK-NEXT:  %[[add_302:[^ ]+]] = f32[] add(%[[select_269]], %[[constant_301]])
// CHECK-NEXT:  %[[add_303:[^ ]+]] = f32[] add(%[[add_302]], %[[constant_259]])
// CHECK-NEXT:  %[[divide_304:[^ ]+]] = f32[] divide(%[[constant_300]], %[[add_303]])
// CHECK-NEXT:  %[[add_305:[^ ]+]] = f32[] add(%[[add_299]], %[[divide_304]])
// CHECK-NEXT:  %[[constant_306:[^ ]+]] = f32[] constant(9.98436917e-06)
// CHECK-NEXT:  %[[constant_307:[^ ]+]] = f32[] constant(6)
// CHECK-NEXT:  %[[add_308:[^ ]+]] = f32[] add(%[[select_269]], %[[constant_307]])
// CHECK-NEXT:  %[[add_309:[^ ]+]] = f32[] add(%[[add_308]], %[[constant_259]])
// CHECK-NEXT:  %[[divide_310:[^ ]+]] = f32[] divide(%[[constant_306]], %[[add_309]])
// CHECK-NEXT:  %[[add_311:[^ ]+]] = f32[] add(%[[add_305]], %[[divide_310]])
// CHECK-NEXT:  %[[constant_312:[^ ]+]] = f32[] constant(1.50563267e-07)
// CHECK-NEXT:  %[[constant_313:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_314:[^ ]+]] = f32[] add(%[[select_269]], %[[constant_313]])
// CHECK-NEXT:  %[[add_315:[^ ]+]] = f32[] add(%[[add_314]], %[[constant_259]])
// CHECK-NEXT:  %[[divide_316:[^ ]+]] = f32[] divide(%[[constant_312]], %[[add_315]])
// CHECK-NEXT:  %[[add_317:[^ ]+]] = f32[] add(%[[add_311]], %[[divide_316]])
// CHECK-NEXT:  %[[log_327:[^ ]+]] = f32[] log(%[[add_317]])
// CHECK-NEXT:  %[[add_328:[^ ]+]] = f32[] add(%[[add_326]], %[[log_327]])
// CHECK-NEXT:  %[[subtract_342:[^ ]+]] = f32[] subtract(%[[subtract_341]], %[[add_328]])
// CHECK-NEXT:  %[[negate_343:[^ ]+]] = f32[] negate(%[[log_339]])
// CHECK-NEXT:  %[[select_344:[^ ]+]] = f32[] select(%[[is_finite_340]], %[[subtract_342]], %[[negate_343]])
// CHECK-NEXT:  %[[select_345:[^ ]+]] = f32[] select(%[[compare_266]], %[[select_344]], %[[add_328]])
// CHECK-NEXT:  %[[select_351:[^ ]+]] = f32[] select(%[[compare_350]], %[[broadcast_347]], %[[select_345]])
// CHECK-NEXT:  %[[add_352:[^ ]+]] = f32[] add(%[[select_257]], %[[select_351]])
// CHECK-NEXT:  %[[add_353:[^ ]+]] = f32[] add(%[[select_24]], %[[select_25]])
// CHECK-NEXT:  %[[abs_444:[^ ]+]] = f32[] abs(%[[add_353]])
// CHECK-NEXT:  %[[constant_445:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[compare_446:[^ ]+]] = pred[] compare(%[[abs_444]], %[[constant_445]]), direction=EQ
// CHECK-NEXT:  %[[constant_442:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[broadcast_443:[^ ]+]] = f32[] broadcast(%[[constant_442]]), dimensions={}
// CHECK-NEXT:  %[[constant_354:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_362:[^ ]+]] = pred[] compare(%[[add_353]], %[[constant_354]]), direction=LT
// CHECK-NEXT:  %[[constant_356:[^ ]+]] = f32[] constant(3.14159274)
// CHECK-NEXT:  %[[abs_425:[^ ]+]] = f32[] abs(%[[add_353]])
// CHECK-NEXT:  %[[floor_426:[^ ]+]] = f32[] floor(%[[abs_425]])
// CHECK-NEXT:  %[[subtract_427:[^ ]+]] = f32[] subtract(%[[abs_425]], %[[floor_426]])
// CHECK-NEXT:  %[[constant_428:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_429:[^ ]+]] = pred[] compare(%[[subtract_427]], %[[constant_428]]), direction=GT
// CHECK-NEXT:  %[[constant_430:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_431:[^ ]+]] = f32[] subtract(%[[constant_430]], %[[subtract_427]])
// CHECK-NEXT:  %[[select_432:[^ ]+]] = f32[] select(%[[compare_429]], %[[subtract_431]], %[[subtract_427]])
// CHECK-NEXT:  %[[multiply_433:[^ ]+]] = f32[] multiply(%[[constant_356]], %[[select_432]])
// CHECK-NEXT:  %[[sine_434:[^ ]+]] = f32[] sine(%[[multiply_433]])
// CHECK-NEXT:  %[[log_435:[^ ]+]] = f32[] log(%[[sine_434]])
// CHECK-NEXT:  %[[is_finite_436:[^ ]+]] = pred[] is-finite(%[[log_435]])
// CHECK-NEXT:  %[[constant_357:[^ ]+]] = f32[] constant(1.14472985)
// CHECK-NEXT:  %[[subtract_437:[^ ]+]] = f32[] subtract(%[[constant_357]], %[[log_435]])
// CHECK-NEXT:  %[[constant_358:[^ ]+]] = f32[] constant(0.918938518)
// CHECK-NEXT:  %[[negate_363:[^ ]+]] = f32[] negate(%[[add_353]])
// CHECK-NEXT:  %[[constant_355:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_364:[^ ]+]] = f32[] subtract(%[[add_353]], %[[constant_355]])
// CHECK-NEXT:  %[[select_365:[^ ]+]] = f32[] select(%[[compare_362]], %[[negate_363]], %[[subtract_364]])
// CHECK-NEXT:  %[[add_418:[^ ]+]] = f32[] add(%[[select_365]], %[[constant_354]])
// CHECK-NEXT:  %[[constant_359:[^ ]+]] = f32[] constant(7.5)
// CHECK-NEXT:  %[[add_414:[^ ]+]] = f32[] add(%[[constant_359]], %[[select_365]])
// CHECK-NEXT:  %[[constant_360:[^ ]+]] = f32[] constant(2.01490307)
// CHECK-NEXT:  %[[divide_415:[^ ]+]] = f32[] divide(%[[select_365]], %[[constant_359]])
// CHECK-NEXT:  %[[log_plus_one_416:[^ ]+]] = f32[] log-plus-one(%[[divide_415]])
// CHECK-NEXT:  %[[add_417:[^ ]+]] = f32[] add(%[[constant_360]], %[[log_plus_one_416]])
// CHECK-NEXT:  %[[divide_419:[^ ]+]] = f32[] divide(%[[add_414]], %[[add_417]])
// CHECK-NEXT:  %[[subtract_420:[^ ]+]] = f32[] subtract(%[[add_418]], %[[divide_419]])
// CHECK-NEXT:  %[[multiply_421:[^ ]+]] = f32[] multiply(%[[subtract_420]], %[[add_417]])
// CHECK-NEXT:  %[[add_422:[^ ]+]] = f32[] add(%[[constant_358]], %[[multiply_421]])
// CHECK-NEXT:  %[[constant_361:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[constant_366:[^ ]+]] = f32[] constant(676.520386)
// CHECK-NEXT:  %[[constant_367:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[add_368:[^ ]+]] = f32[] add(%[[select_365]], %[[constant_367]])
// CHECK-NEXT:  %[[add_369:[^ ]+]] = f32[] add(%[[add_368]], %[[constant_355]])
// CHECK-NEXT:  %[[divide_370:[^ ]+]] = f32[] divide(%[[constant_366]], %[[add_369]])
// CHECK-NEXT:  %[[add_371:[^ ]+]] = f32[] add(%[[constant_361]], %[[divide_370]])
// CHECK-NEXT:  %[[constant_372:[^ ]+]] = f32[] constant(-1259.13916)
// CHECK-NEXT:  %[[constant_373:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_374:[^ ]+]] = f32[] add(%[[select_365]], %[[constant_373]])
// CHECK-NEXT:  %[[add_375:[^ ]+]] = f32[] add(%[[add_374]], %[[constant_355]])
// CHECK-NEXT:  %[[divide_376:[^ ]+]] = f32[] divide(%[[constant_372]], %[[add_375]])
// CHECK-NEXT:  %[[add_377:[^ ]+]] = f32[] add(%[[add_371]], %[[divide_376]])
// CHECK-NEXT:  %[[constant_378:[^ ]+]] = f32[] constant(771.323425)
// CHECK-NEXT:  %[[constant_379:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[add_380:[^ ]+]] = f32[] add(%[[select_365]], %[[constant_379]])
// CHECK-NEXT:  %[[add_381:[^ ]+]] = f32[] add(%[[add_380]], %[[constant_355]])
// CHECK-NEXT:  %[[divide_382:[^ ]+]] = f32[] divide(%[[constant_378]], %[[add_381]])
// CHECK-NEXT:  %[[add_383:[^ ]+]] = f32[] add(%[[add_377]], %[[divide_382]])
// CHECK-NEXT:  %[[constant_384:[^ ]+]] = f32[] constant(-176.615036)
// CHECK-NEXT:  %[[constant_385:[^ ]+]] = f32[] constant(3)
// CHECK-NEXT:  %[[add_386:[^ ]+]] = f32[] add(%[[select_365]], %[[constant_385]])
// CHECK-NEXT:  %[[add_387:[^ ]+]] = f32[] add(%[[add_386]], %[[constant_355]])
// CHECK-NEXT:  %[[divide_388:[^ ]+]] = f32[] divide(%[[constant_384]], %[[add_387]])
// CHECK-NEXT:  %[[add_389:[^ ]+]] = f32[] add(%[[add_383]], %[[divide_388]])
// CHECK-NEXT:  %[[constant_390:[^ ]+]] = f32[] constant(12.5073433)
// CHECK-NEXT:  %[[constant_391:[^ ]+]] = f32[] constant(4)
// CHECK-NEXT:  %[[add_392:[^ ]+]] = f32[] add(%[[select_365]], %[[constant_391]])
// CHECK-NEXT:  %[[add_393:[^ ]+]] = f32[] add(%[[add_392]], %[[constant_355]])
// CHECK-NEXT:  %[[divide_394:[^ ]+]] = f32[] divide(%[[constant_390]], %[[add_393]])
// CHECK-NEXT:  %[[add_395:[^ ]+]] = f32[] add(%[[add_389]], %[[divide_394]])
// CHECK-NEXT:  %[[constant_396:[^ ]+]] = f32[] constant(-0.138571098)
// CHECK-NEXT:  %[[constant_397:[^ ]+]] = f32[] constant(5)
// CHECK-NEXT:  %[[add_398:[^ ]+]] = f32[] add(%[[select_365]], %[[constant_397]])
// CHECK-NEXT:  %[[add_399:[^ ]+]] = f32[] add(%[[add_398]], %[[constant_355]])
// CHECK-NEXT:  %[[divide_400:[^ ]+]] = f32[] divide(%[[constant_396]], %[[add_399]])
// CHECK-NEXT:  %[[add_401:[^ ]+]] = f32[] add(%[[add_395]], %[[divide_400]])
// CHECK-NEXT:  %[[constant_402:[^ ]+]] = f32[] constant(9.98436917e-06)
// CHECK-NEXT:  %[[constant_403:[^ ]+]] = f32[] constant(6)
// CHECK-NEXT:  %[[add_404:[^ ]+]] = f32[] add(%[[select_365]], %[[constant_403]])
// CHECK-NEXT:  %[[add_405:[^ ]+]] = f32[] add(%[[add_404]], %[[constant_355]])
// CHECK-NEXT:  %[[divide_406:[^ ]+]] = f32[] divide(%[[constant_402]], %[[add_405]])
// CHECK-NEXT:  %[[add_407:[^ ]+]] = f32[] add(%[[add_401]], %[[divide_406]])
// CHECK-NEXT:  %[[constant_408:[^ ]+]] = f32[] constant(1.50563267e-07)
// CHECK-NEXT:  %[[constant_409:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_410:[^ ]+]] = f32[] add(%[[select_365]], %[[constant_409]])
// CHECK-NEXT:  %[[add_411:[^ ]+]] = f32[] add(%[[add_410]], %[[constant_355]])
// CHECK-NEXT:  %[[divide_412:[^ ]+]] = f32[] divide(%[[constant_408]], %[[add_411]])
// CHECK-NEXT:  %[[add_413:[^ ]+]] = f32[] add(%[[add_407]], %[[divide_412]])
// CHECK-NEXT:  %[[log_423:[^ ]+]] = f32[] log(%[[add_413]])
// CHECK-NEXT:  %[[add_424:[^ ]+]] = f32[] add(%[[add_422]], %[[log_423]])
// CHECK-NEXT:  %[[subtract_438:[^ ]+]] = f32[] subtract(%[[subtract_437]], %[[add_424]])
// CHECK-NEXT:  %[[negate_439:[^ ]+]] = f32[] negate(%[[log_435]])
// CHECK-NEXT:  %[[select_440:[^ ]+]] = f32[] select(%[[is_finite_436]], %[[subtract_438]], %[[negate_439]])
// CHECK-NEXT:  %[[select_441:[^ ]+]] = f32[] select(%[[compare_362]], %[[select_440]], %[[add_424]])
// CHECK-NEXT:  %[[select_447:[^ ]+]] = f32[] select(%[[compare_446]], %[[broadcast_443]], %[[select_441]])
// CHECK-NEXT:  %[[subtract_448:[^ ]+]] = f32[] subtract(%[[add_352]], %[[select_447]])
// CHECK-NEXT:  %[[subtract_455:[^ ]+]] = f32[] subtract(%[[add_454]], %[[subtract_448]])
// CHECK-NEXT:  %[[exponential_456:[^ ]+]] = f32[] exponential(%[[subtract_455]])
// CHECK-NEXT:  %[[multiply_457:[^ ]+]] = f32[] multiply(%[[get_tuple_element_160]], %[[exponential_456]])
// CHECK-NEXT:  %[[divide_458:[^ ]+]] = f32[] divide(%[[multiply_457]], %[[select_24]])
// CHECK-NEXT:  %[[select_460:[^ ]+]] = f32[] select(%[[or_14]], %[[constant_459]], %[[divide_458]])
// CHECK-NEXT:  %[[constant_461:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[broadcast_462:[^ ]+]] = f32[] broadcast(%[[constant_461]]), dimensions={}
// CHECK-NEXT:  %[[subtract_463:[^ ]+]] = f32[] subtract(%[[broadcast_462]], %[[select_460]])
// CHECK-NEXT:  ROOT %[[select_464:[^ ]+]] = f32[] select(%[[compare_23]], %[[select_460]], %[[subtract_463]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[Arg_1_2:[^ ]+]] = f32[] parameter(1)
// CHECK-NEXT:  %[[Arg_2_3:[^ ]+]] = f32[] parameter(2)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]], %[[Arg_1_2]], %[[Arg_2_3]]), custom_call_target="xla_builder.math.RegularizedIncompleteBeta"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]], %[[Arg_1_2]], %[[Arg_2_3]]), custom_call_target="xla_builder.math.RegularizedIncompleteBeta", called_computations={%[[$xla_builder_math_RegularizedIncompleteBeta_465]]}

HloModule main, entry_computation_layout={(f32[], f32[], f32[])->f32[]}

ENTRY %main.3 (Arg_0.1: f32[], Arg_1.2: f32[], Arg_2.3: f32[]) -> f32[] {
  %Arg_0.1 = f32[] parameter(0)
  %Arg_1.2 = f32[] parameter(1)
  %Arg_2.3 = f32[] parameter(2)
  ROOT %custom-call.2 = f32[] custom-call(%Arg_0.1, %Arg_1.2, %Arg_2.3), custom_call_target="xla_builder.math.RegularizedIncompleteBeta"
}
