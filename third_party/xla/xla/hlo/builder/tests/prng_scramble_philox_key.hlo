// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt --passes=test-only-xla-builder --split-input-file %s | FileCheck %s

// CHECK-LABEL: HloModule main, entry_computation_layout={(u64[1,1]{1,0})->u64[1,1]{1,0}}

// CHECK:       %[[$xla_builder_prng_ScramblePhiloxKey_322:[^ ]+]]
// CHECK-NEXT:  %[[constant_19:[^ ]+]] = u32[] constant(1053357856)
// CHECK-NEXT:  %[[constant_45:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_46:[^ ]+]] = u32[] add(%[[constant_19]], %[[constant_45]])
// CHECK-NEXT:  %[[constant_73:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_74:[^ ]+]] = u32[] add(%[[add_46]], %[[constant_73]])
// CHECK-NEXT:  %[[constant_101:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_102:[^ ]+]] = u32[] add(%[[add_74]], %[[constant_101]])
// CHECK-NEXT:  %[[constant_129:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_130:[^ ]+]] = u32[] add(%[[add_102]], %[[constant_129]])
// CHECK-NEXT:  %[[constant_157:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_158:[^ ]+]] = u32[] add(%[[add_130]], %[[constant_157]])
// CHECK-NEXT:  %[[constant_185:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_186:[^ ]+]] = u32[] add(%[[add_158]], %[[constant_185]])
// CHECK-NEXT:  %[[constant_213:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_214:[^ ]+]] = u32[] add(%[[add_186]], %[[constant_213]])
// CHECK-NEXT:  %[[constant_241:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_242:[^ ]+]] = u32[] add(%[[add_214]], %[[constant_241]])
// CHECK-NEXT:  %[[constant_269:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_270:[^ ]+]] = u32[] add(%[[add_242]], %[[constant_269]])
// CHECK-NEXT:  %[[constant_297:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_298:[^ ]+]] = u32[] add(%[[add_270]], %[[constant_297]])
// CHECK-NEXT:  %[[constant_20:[^ ]+]] = u32[] constant(38149673)
// CHECK-NEXT:  %[[constant_47:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_48:[^ ]+]] = u32[] add(%[[constant_20]], %[[constant_47]])
// CHECK-NEXT:  %[[constant_75:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_76:[^ ]+]] = u32[] add(%[[add_48]], %[[constant_75]])
// CHECK-NEXT:  %[[constant_103:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_104:[^ ]+]] = u32[] add(%[[add_76]], %[[constant_103]])
// CHECK-NEXT:  %[[constant_131:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_132:[^ ]+]] = u32[] add(%[[add_104]], %[[constant_131]])
// CHECK-NEXT:  %[[constant_159:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_160:[^ ]+]] = u32[] add(%[[add_132]], %[[constant_159]])
// CHECK-NEXT:  %[[constant_187:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_188:[^ ]+]] = u32[] add(%[[add_160]], %[[constant_187]])
// CHECK-NEXT:  %[[constant_215:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_216:[^ ]+]] = u32[] add(%[[add_188]], %[[constant_215]])
// CHECK-NEXT:  %[[constant_243:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_244:[^ ]+]] = u32[] add(%[[add_216]], %[[constant_243]])
// CHECK-NEXT:  %[[constant_271:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_272:[^ ]+]] = u32[] add(%[[add_244]], %[[constant_271]])
// CHECK-NEXT:  %[[constant_299:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_300:[^ ]+]] = u32[] add(%[[add_272]], %[[constant_299]])
// CHECK-NEXT:  %[[constant_301:[^ ]+]] = u32[] constant(0)
// CHECK-NEXT:  %[[convert_302:[^ ]+]] = u64[] convert(%[[constant_301]])
// CHECK-NEXT:  %[[convert_303:[^ ]+]] = u64[] convert(%[[constant_301]])
// CHECK-NEXT:  %[[constant_304:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_left_305:[^ ]+]] = u64[] shift-left(%[[convert_303]], %[[constant_304]])
// CHECK-NEXT:  %[[or_306:[^ ]+]] = u64[] or(%[[convert_302]], %[[shift_left_305]])
// CHECK-NEXT:  %[[reshape_313:[^ ]+]] = u64[1]{0} reshape(%[[or_306]])
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = u64[1,1]{1,0} parameter(0)
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_4:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_2]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_5:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[arg0_1]], %[[broadcast_4]])
// CHECK-NEXT:  %[[convert_6:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_5]])
// CHECK-NEXT:  %[[convert_8:[^ ]+]] = u64[1,1]{1,0} convert(%[[convert_6]])
// CHECK-NEXT:  %[[convert_14:[^ ]+]] = u32[1,1]{1,0} convert(%[[convert_8]])
// CHECK-NEXT:  %[[convert_30:[^ ]+]] = u64[1,1]{1,0} convert(%[[convert_14]])
// CHECK-NEXT:  %[[constant_31:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_32:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_31]]), dimensions={}
// CHECK-NEXT:  %[[multiply_33:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_30]], %[[broadcast_32]])
// CHECK-NEXT:  %[[constant_35:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_36:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_35]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_37:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_33]], %[[broadcast_36]])
// CHECK-NEXT:  %[[convert_38:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_37]])
// CHECK-NEXT:  %[[convert_3:[^ ]+]] = u32[1,1]{1,0} convert(%[[arg0_1]])
// CHECK-NEXT:  %[[convert_7:[^ ]+]] = u64[1,1]{1,0} convert(%[[convert_3]])
// CHECK-NEXT:  %[[constant_10:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_11:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_10]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_12:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[convert_7]], %[[broadcast_11]])
// CHECK-NEXT:  %[[convert_13:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_12]])
// CHECK-NEXT:  %[[xor_39:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_38]], %[[convert_13]])
// CHECK-NEXT:  %[[broadcast_40:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[constant_19]]), dimensions={}
// CHECK-NEXT:  %[[xor_41:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_39]], %[[broadcast_40]])
// CHECK-NEXT:  %[[convert_49:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_41]])
// CHECK-NEXT:  %[[constant_50:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_51:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_50]]), dimensions={}
// CHECK-NEXT:  %[[multiply_52:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_49]], %[[broadcast_51]])
// CHECK-NEXT:  %[[constant_54:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_55:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_54]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_56:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_52]], %[[broadcast_55]])
// CHECK-NEXT:  %[[convert_57:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_56]])
// CHECK-NEXT:  %[[convert_9:[^ ]+]] = u32[1,1]{1,0} convert(%[[convert_7]])
// CHECK-NEXT:  %[[convert_21:[^ ]+]] = u64[1,1]{1,0} convert(%[[convert_9]])
// CHECK-NEXT:  %[[constant_22:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_23:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_22]]), dimensions={}
// CHECK-NEXT:  %[[multiply_24:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_21]], %[[broadcast_23]])
// CHECK-NEXT:  %[[convert_25:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_24]])
// CHECK-NEXT:  %[[xor_70:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_57]], %[[convert_25]])
// CHECK-NEXT:  %[[broadcast_71:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_48]]), dimensions={}
// CHECK-NEXT:  %[[xor_72:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_70]], %[[broadcast_71]])
// CHECK-NEXT:  %[[convert_86:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_72]])
// CHECK-NEXT:  %[[constant_87:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_88:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_87]]), dimensions={}
// CHECK-NEXT:  %[[multiply_89:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_86]], %[[broadcast_88]])
// CHECK-NEXT:  %[[constant_91:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_92:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_91]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_93:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_89]], %[[broadcast_92]])
// CHECK-NEXT:  %[[convert_94:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_93]])
// CHECK-NEXT:  %[[constant_26:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_27:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_26]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_28:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_24]], %[[broadcast_27]])
// CHECK-NEXT:  %[[convert_29:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_28]])
// CHECK-NEXT:  %[[constant_15:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_16:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_15]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_17:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[convert_8]], %[[broadcast_16]])
// CHECK-NEXT:  %[[convert_18:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_17]])
// CHECK-NEXT:  %[[xor_42:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_29]], %[[convert_18]])
// CHECK-NEXT:  %[[broadcast_43:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[constant_20]]), dimensions={}
// CHECK-NEXT:  %[[xor_44:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_42]], %[[broadcast_43]])
// CHECK-NEXT:  %[[convert_58:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_44]])
// CHECK-NEXT:  %[[constant_59:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_60:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_59]]), dimensions={}
// CHECK-NEXT:  %[[multiply_61:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_58]], %[[broadcast_60]])
// CHECK-NEXT:  %[[convert_62:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_61]])
// CHECK-NEXT:  %[[xor_95:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_94]], %[[convert_62]])
// CHECK-NEXT:  %[[broadcast_96:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_74]]), dimensions={}
// CHECK-NEXT:  %[[xor_97:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_95]], %[[broadcast_96]])
// CHECK-NEXT:  %[[convert_105:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_97]])
// CHECK-NEXT:  %[[constant_106:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_107:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_106]]), dimensions={}
// CHECK-NEXT:  %[[multiply_108:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_105]], %[[broadcast_107]])
// CHECK-NEXT:  %[[constant_110:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_111:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_110]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_112:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_108]], %[[broadcast_111]])
// CHECK-NEXT:  %[[convert_113:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_112]])
// CHECK-NEXT:  %[[constant_63:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_64:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_63]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_65:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_61]], %[[broadcast_64]])
// CHECK-NEXT:  %[[convert_66:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_65]])
// CHECK-NEXT:  %[[convert_34:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_33]])
// CHECK-NEXT:  %[[xor_67:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_66]], %[[convert_34]])
// CHECK-NEXT:  %[[broadcast_68:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_46]]), dimensions={}
// CHECK-NEXT:  %[[xor_69:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_67]], %[[broadcast_68]])
// CHECK-NEXT:  %[[convert_77:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_69]])
// CHECK-NEXT:  %[[constant_78:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_79:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_78]]), dimensions={}
// CHECK-NEXT:  %[[multiply_80:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_77]], %[[broadcast_79]])
// CHECK-NEXT:  %[[convert_81:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_80]])
// CHECK-NEXT:  %[[xor_126:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_113]], %[[convert_81]])
// CHECK-NEXT:  %[[broadcast_127:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_104]]), dimensions={}
// CHECK-NEXT:  %[[xor_128:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_126]], %[[broadcast_127]])
// CHECK-NEXT:  %[[convert_142:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_128]])
// CHECK-NEXT:  %[[constant_143:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_144:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_143]]), dimensions={}
// CHECK-NEXT:  %[[multiply_145:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_142]], %[[broadcast_144]])
// CHECK-NEXT:  %[[constant_147:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_148:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_147]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_149:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_145]], %[[broadcast_148]])
// CHECK-NEXT:  %[[convert_150:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_149]])
// CHECK-NEXT:  %[[constant_82:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_83:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_82]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_84:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_80]], %[[broadcast_83]])
// CHECK-NEXT:  %[[convert_85:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_84]])
// CHECK-NEXT:  %[[convert_53:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_52]])
// CHECK-NEXT:  %[[xor_98:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_85]], %[[convert_53]])
// CHECK-NEXT:  %[[broadcast_99:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_76]]), dimensions={}
// CHECK-NEXT:  %[[xor_100:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_98]], %[[broadcast_99]])
// CHECK-NEXT:  %[[convert_114:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_100]])
// CHECK-NEXT:  %[[constant_115:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_116:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_115]]), dimensions={}
// CHECK-NEXT:  %[[multiply_117:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_114]], %[[broadcast_116]])
// CHECK-NEXT:  %[[convert_118:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_117]])
// CHECK-NEXT:  %[[xor_151:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_150]], %[[convert_118]])
// CHECK-NEXT:  %[[broadcast_152:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_130]]), dimensions={}
// CHECK-NEXT:  %[[xor_153:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_151]], %[[broadcast_152]])
// CHECK-NEXT:  %[[convert_161:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_153]])
// CHECK-NEXT:  %[[constant_162:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_163:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_162]]), dimensions={}
// CHECK-NEXT:  %[[multiply_164:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_161]], %[[broadcast_163]])
// CHECK-NEXT:  %[[constant_166:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_167:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_166]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_168:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_164]], %[[broadcast_167]])
// CHECK-NEXT:  %[[convert_169:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_168]])
// CHECK-NEXT:  %[[constant_119:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_120:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_119]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_121:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_117]], %[[broadcast_120]])
// CHECK-NEXT:  %[[convert_122:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_121]])
// CHECK-NEXT:  %[[convert_90:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_89]])
// CHECK-NEXT:  %[[xor_123:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_122]], %[[convert_90]])
// CHECK-NEXT:  %[[broadcast_124:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_102]]), dimensions={}
// CHECK-NEXT:  %[[xor_125:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_123]], %[[broadcast_124]])
// CHECK-NEXT:  %[[convert_133:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_125]])
// CHECK-NEXT:  %[[constant_134:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_135:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_134]]), dimensions={}
// CHECK-NEXT:  %[[multiply_136:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_133]], %[[broadcast_135]])
// CHECK-NEXT:  %[[convert_137:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_136]])
// CHECK-NEXT:  %[[xor_182:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_169]], %[[convert_137]])
// CHECK-NEXT:  %[[broadcast_183:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_160]]), dimensions={}
// CHECK-NEXT:  %[[xor_184:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_182]], %[[broadcast_183]])
// CHECK-NEXT:  %[[convert_198:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_184]])
// CHECK-NEXT:  %[[constant_199:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_200:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_199]]), dimensions={}
// CHECK-NEXT:  %[[multiply_201:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_198]], %[[broadcast_200]])
// CHECK-NEXT:  %[[constant_203:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_204:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_203]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_205:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_201]], %[[broadcast_204]])
// CHECK-NEXT:  %[[convert_206:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_205]])
// CHECK-NEXT:  %[[constant_138:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_139:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_138]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_140:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_136]], %[[broadcast_139]])
// CHECK-NEXT:  %[[convert_141:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_140]])
// CHECK-NEXT:  %[[convert_109:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_108]])
// CHECK-NEXT:  %[[xor_154:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_141]], %[[convert_109]])
// CHECK-NEXT:  %[[broadcast_155:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_132]]), dimensions={}
// CHECK-NEXT:  %[[xor_156:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_154]], %[[broadcast_155]])
// CHECK-NEXT:  %[[convert_170:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_156]])
// CHECK-NEXT:  %[[constant_171:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_172:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_171]]), dimensions={}
// CHECK-NEXT:  %[[multiply_173:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_170]], %[[broadcast_172]])
// CHECK-NEXT:  %[[convert_174:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_173]])
// CHECK-NEXT:  %[[xor_207:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_206]], %[[convert_174]])
// CHECK-NEXT:  %[[broadcast_208:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_186]]), dimensions={}
// CHECK-NEXT:  %[[xor_209:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_207]], %[[broadcast_208]])
// CHECK-NEXT:  %[[convert_217:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_209]])
// CHECK-NEXT:  %[[constant_218:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_219:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_218]]), dimensions={}
// CHECK-NEXT:  %[[multiply_220:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_217]], %[[broadcast_219]])
// CHECK-NEXT:  %[[constant_222:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_223:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_222]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_224:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_220]], %[[broadcast_223]])
// CHECK-NEXT:  %[[convert_225:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_224]])
// CHECK-NEXT:  %[[constant_175:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_176:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_175]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_177:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_173]], %[[broadcast_176]])
// CHECK-NEXT:  %[[convert_178:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_177]])
// CHECK-NEXT:  %[[convert_146:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_145]])
// CHECK-NEXT:  %[[xor_179:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_178]], %[[convert_146]])
// CHECK-NEXT:  %[[broadcast_180:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_158]]), dimensions={}
// CHECK-NEXT:  %[[xor_181:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_179]], %[[broadcast_180]])
// CHECK-NEXT:  %[[convert_189:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_181]])
// CHECK-NEXT:  %[[constant_190:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_191:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_190]]), dimensions={}
// CHECK-NEXT:  %[[multiply_192:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_189]], %[[broadcast_191]])
// CHECK-NEXT:  %[[convert_193:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_192]])
// CHECK-NEXT:  %[[xor_238:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_225]], %[[convert_193]])
// CHECK-NEXT:  %[[broadcast_239:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_216]]), dimensions={}
// CHECK-NEXT:  %[[xor_240:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_238]], %[[broadcast_239]])
// CHECK-NEXT:  %[[convert_254:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_240]])
// CHECK-NEXT:  %[[constant_255:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_256:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_255]]), dimensions={}
// CHECK-NEXT:  %[[multiply_257:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_254]], %[[broadcast_256]])
// CHECK-NEXT:  %[[constant_259:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_260:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_259]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_261:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_257]], %[[broadcast_260]])
// CHECK-NEXT:  %[[convert_262:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_261]])
// CHECK-NEXT:  %[[constant_194:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_195:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_194]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_196:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_192]], %[[broadcast_195]])
// CHECK-NEXT:  %[[convert_197:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_196]])
// CHECK-NEXT:  %[[convert_165:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_164]])
// CHECK-NEXT:  %[[xor_210:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_197]], %[[convert_165]])
// CHECK-NEXT:  %[[broadcast_211:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_188]]), dimensions={}
// CHECK-NEXT:  %[[xor_212:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_210]], %[[broadcast_211]])
// CHECK-NEXT:  %[[convert_226:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_212]])
// CHECK-NEXT:  %[[constant_227:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_228:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_227]]), dimensions={}
// CHECK-NEXT:  %[[multiply_229:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_226]], %[[broadcast_228]])
// CHECK-NEXT:  %[[convert_230:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_229]])
// CHECK-NEXT:  %[[xor_263:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_262]], %[[convert_230]])
// CHECK-NEXT:  %[[broadcast_264:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_242]]), dimensions={}
// CHECK-NEXT:  %[[xor_265:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_263]], %[[broadcast_264]])
// CHECK-NEXT:  %[[convert_273:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_265]])
// CHECK-NEXT:  %[[constant_274:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_275:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_274]]), dimensions={}
// CHECK-NEXT:  %[[multiply_276:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_273]], %[[broadcast_275]])
// CHECK-NEXT:  %[[constant_278:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_279:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_278]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_280:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_276]], %[[broadcast_279]])
// CHECK-NEXT:  %[[convert_281:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_280]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_232:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_231]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_233:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_229]], %[[broadcast_232]])
// CHECK-NEXT:  %[[convert_234:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_233]])
// CHECK-NEXT:  %[[convert_202:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_201]])
// CHECK-NEXT:  %[[xor_235:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_234]], %[[convert_202]])
// CHECK-NEXT:  %[[broadcast_236:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_214]]), dimensions={}
// CHECK-NEXT:  %[[xor_237:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_235]], %[[broadcast_236]])
// CHECK-NEXT:  %[[convert_245:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_237]])
// CHECK-NEXT:  %[[constant_246:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_247:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_246]]), dimensions={}
// CHECK-NEXT:  %[[multiply_248:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_245]], %[[broadcast_247]])
// CHECK-NEXT:  %[[convert_249:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_248]])
// CHECK-NEXT:  %[[xor_294:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_281]], %[[convert_249]])
// CHECK-NEXT:  %[[broadcast_295:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_272]]), dimensions={}
// CHECK-NEXT:  %[[xor_296:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_294]], %[[broadcast_295]])
// CHECK-NEXT:  %[[convert_307:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_296]])
// CHECK-NEXT:  %[[convert_277:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_276]])
// CHECK-NEXT:  %[[convert_308:[^ ]+]] = u64[1,1]{1,0} convert(%[[convert_277]])
// CHECK-NEXT:  %[[constant_309:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_310:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_309]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_311:[^ ]+]] = u64[1,1]{1,0} shift-left(%[[convert_308]], %[[broadcast_310]])
// CHECK-NEXT:  %[[or_312:[^ ]+]] = u64[1,1]{1,0} or(%[[convert_307]], %[[shift_left_311]])
// CHECK-NEXT:  %[[reshape_314:[^ ]+]] = u64[1]{0} reshape(%[[or_312]])
// CHECK-NEXT:  %[[concatenate_315:[^ ]+]] = u64[2]{0} concatenate(%[[reshape_313]], %[[reshape_314]]), dimensions={0}
// CHECK-NEXT:  %[[constant_250:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_251:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_250]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_252:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_248]], %[[broadcast_251]])
// CHECK-NEXT:  %[[convert_253:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_252]])
// CHECK-NEXT:  %[[convert_221:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_220]])
// CHECK-NEXT:  %[[xor_266:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_253]], %[[convert_221]])
// CHECK-NEXT:  %[[broadcast_267:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_244]]), dimensions={}
// CHECK-NEXT:  %[[xor_268:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_266]], %[[broadcast_267]])
// CHECK-NEXT:  %[[convert_282:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_268]])
// CHECK-NEXT:  %[[constant_283:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_284:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_283]]), dimensions={}
// CHECK-NEXT:  %[[multiply_285:[^ ]+]] = u64[1,1]{1,0} multiply(%[[convert_282]], %[[broadcast_284]])
// CHECK-NEXT:  %[[constant_287:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_288:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_287]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_289:[^ ]+]] = u64[1,1]{1,0} shift-right-logical(%[[multiply_285]], %[[broadcast_288]])
// CHECK-NEXT:  %[[convert_290:[^ ]+]] = u32[1,1]{1,0} convert(%[[shift_right_logical_289]])
// CHECK-NEXT:  %[[convert_258:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_257]])
// CHECK-NEXT:  %[[xor_291:[^ ]+]] = u32[1,1]{1,0} xor(%[[convert_290]], %[[convert_258]])
// CHECK-NEXT:  %[[broadcast_292:[^ ]+]] = u32[1,1]{1,0} broadcast(%[[add_270]]), dimensions={}
// CHECK-NEXT:  %[[xor_293:[^ ]+]] = u32[1,1]{1,0} xor(%[[xor_291]], %[[broadcast_292]])
// CHECK-NEXT:  %[[convert_316:[^ ]+]] = u64[1,1]{1,0} convert(%[[xor_293]])
// CHECK-NEXT:  %[[convert_286:[^ ]+]] = u32[1,1]{1,0} convert(%[[multiply_285]])
// CHECK-NEXT:  %[[convert_317:[^ ]+]] = u64[1,1]{1,0} convert(%[[convert_286]])
// CHECK-NEXT:  %[[constant_318:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_319:[^ ]+]] = u64[1,1]{1,0} broadcast(%[[constant_318]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_320:[^ ]+]] = u64[1,1]{1,0} shift-left(%[[convert_317]], %[[broadcast_319]])
// CHECK-NEXT:  ROOT %[[or_321:[^ ]+]] = u64[1,1]{1,0} or(%[[convert_316]], %[[shift_left_320]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = u64[1,1]{1,0} parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = u64[1,1]{1,0} custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.prng.ScramblePhiloxKey"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = u64[1,1]{1,0} custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.prng.ScramblePhiloxKey", called_computations={%[[$xla_builder_prng_ScramblePhiloxKey_322]]}

HloModule main, entry_computation_layout={(u64[1,1])->u64[1,1]}

ENTRY %main.3 (Arg_0.1: u64[1,1]) -> u64[1,1] {
  %Arg_0.1 = u64[1,1] parameter(0)
  ROOT %custom-call.2 = u64[1,1] custom-call(%Arg_0.1), custom_call_target="xla_builder.prng.ScramblePhiloxKey"
}