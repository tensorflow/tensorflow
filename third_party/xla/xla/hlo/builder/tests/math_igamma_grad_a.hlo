// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt --passes=test-only-xla-builder --split-input-file %s | FileCheck %s

// CHECK-LABEL: HloModule main, entry_computation_layout={(f32[], f32[])->f32[]}

// CHECK:       %[[$igammac_body_150:[^ ]+]]
// CHECK-NEXT:  %[[parameter_151:[^ ]+]] = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_152:[^ ]+]] = pred[] get-tuple-element(%[[parameter_151]]), index=0
// CHECK-NEXT:  %[[get_tuple_element_159:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=7
// CHECK-NEXT:  %[[get_tuple_element_156:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=4
// CHECK-NEXT:  %[[constant_171:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[add_172:[^ ]+]] = f32[] add(%[[get_tuple_element_156]], %[[constant_171]])
// CHECK-NEXT:  %[[multiply_177:[^ ]+]] = f32[] multiply(%[[get_tuple_element_159]], %[[add_172]])
// CHECK-NEXT:  %[[get_tuple_element_161:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=9
// CHECK-NEXT:  %[[get_tuple_element_155:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=3
// CHECK-NEXT:  %[[constant_169:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_170:[^ ]+]] = f32[] add(%[[get_tuple_element_155]], %[[constant_169]])
// CHECK-NEXT:  %[[get_tuple_element_157:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=5
// CHECK-NEXT:  %[[constant_167:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_168:[^ ]+]] = f32[] add(%[[get_tuple_element_157]], %[[constant_167]])
// CHECK-NEXT:  %[[multiply_173:[^ ]+]] = f32[] multiply(%[[add_170]], %[[add_168]])
// CHECK-NEXT:  %[[multiply_178:[^ ]+]] = f32[] multiply(%[[get_tuple_element_161]], %[[multiply_173]])
// CHECK-NEXT:  %[[subtract_179:[^ ]+]] = f32[] subtract(%[[multiply_177]], %[[multiply_178]])
// CHECK-NEXT:  %[[constant_180:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_181:[^ ]+]] = pred[] compare(%[[subtract_179]], %[[constant_180]]), direction=NE
// CHECK-NEXT:  %[[get_tuple_element_164:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=12
// CHECK-NEXT:  %[[multiply_190:[^ ]+]] = f32[] multiply(%[[get_tuple_element_164]], %[[add_172]])
// CHECK-NEXT:  %[[get_tuple_element_158:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=6
// CHECK-NEXT:  %[[subtract_191:[^ ]+]] = f32[] subtract(%[[multiply_190]], %[[get_tuple_element_158]])
// CHECK-NEXT:  %[[get_tuple_element_162:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=10
// CHECK-NEXT:  %[[multiply_192:[^ ]+]] = f32[] multiply(%[[get_tuple_element_162]], %[[multiply_173]])
// CHECK-NEXT:  %[[subtract_193:[^ ]+]] = f32[] subtract(%[[subtract_191]], %[[multiply_192]])
// CHECK-NEXT:  %[[get_tuple_element_160:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=8
// CHECK-NEXT:  %[[multiply_194:[^ ]+]] = f32[] multiply(%[[get_tuple_element_160]], %[[add_168]])
// CHECK-NEXT:  %[[add_195:[^ ]+]] = f32[] add(%[[subtract_193]], %[[multiply_194]])
// CHECK-NEXT:  %[[multiply_174:[^ ]+]] = f32[] multiply(%[[get_tuple_element_158]], %[[add_172]])
// CHECK-NEXT:  %[[multiply_175:[^ ]+]] = f32[] multiply(%[[get_tuple_element_160]], %[[multiply_173]])
// CHECK-NEXT:  %[[subtract_176:[^ ]+]] = f32[] subtract(%[[multiply_174]], %[[multiply_175]])
// CHECK-NEXT:  %[[divide_182:[^ ]+]] = f32[] divide(%[[subtract_176]], %[[subtract_179]])
// CHECK-NEXT:  %[[get_tuple_element_153:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=1
// CHECK-NEXT:  %[[select_189:[^ ]+]] = f32[] select(%[[compare_181]], %[[divide_182]], %[[get_tuple_element_153]])
// CHECK-NEXT:  %[[get_tuple_element_165:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=13
// CHECK-NEXT:  %[[multiply_196:[^ ]+]] = f32[] multiply(%[[get_tuple_element_165]], %[[add_172]])
// CHECK-NEXT:  %[[subtract_197:[^ ]+]] = f32[] subtract(%[[multiply_196]], %[[get_tuple_element_159]])
// CHECK-NEXT:  %[[get_tuple_element_163:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=11
// CHECK-NEXT:  %[[multiply_198:[^ ]+]] = f32[] multiply(%[[get_tuple_element_163]], %[[multiply_173]])
// CHECK-NEXT:  %[[subtract_199:[^ ]+]] = f32[] subtract(%[[subtract_197]], %[[multiply_198]])
// CHECK-NEXT:  %[[multiply_200:[^ ]+]] = f32[] multiply(%[[get_tuple_element_161]], %[[add_168]])
// CHECK-NEXT:  %[[add_201:[^ ]+]] = f32[] add(%[[subtract_199]], %[[multiply_200]])
// CHECK-NEXT:  %[[multiply_202:[^ ]+]] = f32[] multiply(%[[select_189]], %[[add_201]])
// CHECK-NEXT:  %[[subtract_203:[^ ]+]] = f32[] subtract(%[[add_195]], %[[multiply_202]])
// CHECK-NEXT:  %[[divide_204:[^ ]+]] = f32[] divide(%[[subtract_203]], %[[subtract_179]])
// CHECK-NEXT:  %[[get_tuple_element_166:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=14
// CHECK-NEXT:  %[[select_205:[^ ]+]] = f32[] select(%[[compare_181]], %[[divide_204]], %[[get_tuple_element_166]])
// CHECK-NEXT:  %[[subtract_206:[^ ]+]] = f32[] subtract(%[[select_205]], %[[get_tuple_element_166]])
// CHECK-NEXT:  %[[abs_207:[^ ]+]] = f32[] abs(%[[subtract_206]])
// CHECK-NEXT:  %[[constant_208:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[broadcast_209:[^ ]+]] = f32[] broadcast(%[[constant_208]]), dimensions={}
// CHECK-NEXT:  %[[select_210:[^ ]+]] = f32[] select(%[[compare_181]], %[[abs_207]], %[[broadcast_209]])
// CHECK-NEXT:  %[[constant_240:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[compare_241:[^ ]+]] = pred[] compare(%[[select_210]], %[[constant_240]]), direction=GT
// CHECK-NEXT:  %[[and_242:[^ ]+]] = pred[] and(%[[get_tuple_element_152]], %[[compare_241]])
// CHECK-NEXT:  %[[select_243:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[select_189]], %[[get_tuple_element_153]])
// CHECK-NEXT:  %[[subtract_183:[^ ]+]] = f32[] subtract(%[[get_tuple_element_153]], %[[divide_182]])
// CHECK-NEXT:  %[[divide_184:[^ ]+]] = f32[] divide(%[[subtract_183]], %[[divide_182]])
// CHECK-NEXT:  %[[abs_185:[^ ]+]] = f32[] abs(%[[divide_184]])
// CHECK-NEXT:  %[[constant_186:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[broadcast_187:[^ ]+]] = f32[] broadcast(%[[constant_186]]), dimensions={}
// CHECK-NEXT:  %[[select_188:[^ ]+]] = f32[] select(%[[compare_181]], %[[abs_185]], %[[broadcast_187]])
// CHECK-NEXT:  %[[get_tuple_element_154:[^ ]+]] = f32[] get-tuple-element(%[[parameter_151]]), index=2
// CHECK-NEXT:  %[[select_244:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[select_188]], %[[get_tuple_element_154]])
// CHECK-NEXT:  %[[select_245:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[add_170]], %[[get_tuple_element_155]])
// CHECK-NEXT:  %[[select_246:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[add_172]], %[[get_tuple_element_156]])
// CHECK-NEXT:  %[[abs_211:[^ ]+]] = f32[] abs(%[[subtract_176]])
// CHECK-NEXT:  %[[constant_213:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[constant_212:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[divide_214:[^ ]+]] = f32[] divide(%[[constant_213]], %[[constant_212]])
// CHECK-NEXT:  %[[compare_215:[^ ]+]] = pred[] compare(%[[abs_211]], %[[divide_214]]), direction=GT
// CHECK-NEXT:  %[[constant_219:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[multiply_220:[^ ]+]] = f32[] multiply(%[[subtract_176]], %[[constant_219]])
// CHECK-NEXT:  %[[select_221:[^ ]+]] = f32[] select(%[[compare_215]], %[[multiply_220]], %[[subtract_176]])
// CHECK-NEXT:  %[[select_247:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[select_221]], %[[get_tuple_element_158]])
// CHECK-NEXT:  %[[constant_225:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[multiply_226:[^ ]+]] = f32[] multiply(%[[subtract_179]], %[[constant_225]])
// CHECK-NEXT:  %[[select_227:[^ ]+]] = f32[] select(%[[compare_215]], %[[multiply_226]], %[[subtract_179]])
// CHECK-NEXT:  %[[select_248:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[select_227]], %[[get_tuple_element_159]])
// CHECK-NEXT:  %[[constant_216:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[multiply_217:[^ ]+]] = f32[] multiply(%[[get_tuple_element_158]], %[[constant_216]])
// CHECK-NEXT:  %[[select_218:[^ ]+]] = f32[] select(%[[compare_215]], %[[multiply_217]], %[[get_tuple_element_158]])
// CHECK-NEXT:  %[[select_249:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[select_218]], %[[get_tuple_element_160]])
// CHECK-NEXT:  %[[constant_222:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[multiply_223:[^ ]+]] = f32[] multiply(%[[get_tuple_element_159]], %[[constant_222]])
// CHECK-NEXT:  %[[select_224:[^ ]+]] = f32[] select(%[[compare_215]], %[[multiply_223]], %[[get_tuple_element_159]])
// CHECK-NEXT:  %[[select_250:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[select_224]], %[[get_tuple_element_161]])
// CHECK-NEXT:  %[[constant_228:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[multiply_229:[^ ]+]] = f32[] multiply(%[[get_tuple_element_164]], %[[constant_228]])
// CHECK-NEXT:  %[[select_230:[^ ]+]] = f32[] select(%[[compare_215]], %[[multiply_229]], %[[get_tuple_element_164]])
// CHECK-NEXT:  %[[select_251:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[select_230]], %[[get_tuple_element_162]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[multiply_232:[^ ]+]] = f32[] multiply(%[[get_tuple_element_165]], %[[constant_231]])
// CHECK-NEXT:  %[[select_233:[^ ]+]] = f32[] select(%[[compare_215]], %[[multiply_232]], %[[get_tuple_element_165]])
// CHECK-NEXT:  %[[select_252:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[select_233]], %[[get_tuple_element_163]])
// CHECK-NEXT:  %[[constant_234:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[multiply_235:[^ ]+]] = f32[] multiply(%[[add_195]], %[[constant_234]])
// CHECK-NEXT:  %[[select_236:[^ ]+]] = f32[] select(%[[compare_215]], %[[multiply_235]], %[[add_195]])
// CHECK-NEXT:  %[[select_253:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[select_236]], %[[get_tuple_element_164]])
// CHECK-NEXT:  %[[constant_237:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[multiply_238:[^ ]+]] = f32[] multiply(%[[add_201]], %[[constant_237]])
// CHECK-NEXT:  %[[select_239:[^ ]+]] = f32[] select(%[[compare_215]], %[[multiply_238]], %[[add_201]])
// CHECK-NEXT:  %[[select_254:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[select_239]], %[[get_tuple_element_165]])
// CHECK-NEXT:  %[[select_255:[^ ]+]] = f32[] select(%[[get_tuple_element_152]], %[[select_205]], %[[get_tuple_element_166]])
// CHECK-NEXT:  ROOT %[[tuple_256:[^ ]+]] = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) tuple(%[[and_242]], %[[select_243]], %[[select_244]], %[[select_245]], %[[select_246]], /*index=5*/%[[add_168]], %[[select_247]], %[[select_248]], %[[select_249]], %[[select_250]], /*index=10*/%[[select_251]], %[[select_252]], %[[select_253]], %[[select_254]], %[[select_255]])

// CHECK:       %[[$or_257:[^ ]+]]
// CHECK-NEXT:  %[[lhs_258:[^ ]+]] = pred[] parameter(0)
// CHECK-NEXT:  %[[rhs_259:[^ ]+]] = pred[] parameter(1)
// CHECK-NEXT:  ROOT %[[or_260:[^ ]+]] = pred[] or(%[[lhs_258]], %[[rhs_259]])

// CHECK:       %[[$igammac_condition_261:[^ ]+]]
// CHECK-NEXT:  %[[parameter_262:[^ ]+]] = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_264:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_265:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_266:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_267:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=4
// CHECK-NEXT:  %[[get_tuple_element_269:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=6
// CHECK-NEXT:  %[[get_tuple_element_270:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=7
// CHECK-NEXT:  %[[get_tuple_element_271:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=8
// CHECK-NEXT:  %[[get_tuple_element_272:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=9
// CHECK-NEXT:  %[[get_tuple_element_273:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=10
// CHECK-NEXT:  %[[get_tuple_element_274:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=11
// CHECK-NEXT:  %[[get_tuple_element_275:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=12
// CHECK-NEXT:  %[[get_tuple_element_276:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=13
// CHECK-NEXT:  %[[get_tuple_element_277:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=14
// CHECK-NEXT:  %[[get_tuple_element_268:[^ ]+]] = f32[] get-tuple-element(%[[parameter_262]]), index=5
// CHECK-NEXT:  %[[constant_278:[^ ]+]] = f32[] constant(2000)
// CHECK-NEXT:  %[[compare_279:[^ ]+]] = pred[] compare(%[[get_tuple_element_268]], %[[constant_278]]), direction=LT
// CHECK-NEXT:  %[[get_tuple_element_263:[^ ]+]] = pred[] get-tuple-element(%[[parameter_262]]), index=0
// CHECK-NEXT:  %[[constant_280:[^ ]+]] = pred[] constant(false)
// CHECK-NEXT:  %[[reduce_281:[^ ]+]] = pred[] reduce(%[[get_tuple_element_263]], %[[constant_280]]), dimensions={}, to_apply=%[[$or_257]]
// CHECK-NEXT:  ROOT %[[and_282:[^ ]+]] = pred[] and(%[[compare_279]], %[[reduce_281]])

// CHECK:       %[[$igamma_body_460:[^ ]+]]
// CHECK-NEXT:  %[[parameter_461:[^ ]+]] = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_462:[^ ]+]] = pred[] get-tuple-element(%[[parameter_461]]), index=0
// CHECK-NEXT:  %[[get_tuple_element_467:[^ ]+]] = f32[] get-tuple-element(%[[parameter_461]]), index=5
// CHECK-NEXT:  %[[get_tuple_element_466:[^ ]+]] = f32[] get-tuple-element(%[[parameter_461]]), index=4
// CHECK-NEXT:  %[[get_tuple_element_463:[^ ]+]] = f32[] get-tuple-element(%[[parameter_461]]), index=1
// CHECK-NEXT:  %[[constant_469:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_470:[^ ]+]] = f32[] add(%[[get_tuple_element_463]], %[[constant_469]])
// CHECK-NEXT:  %[[divide_471:[^ ]+]] = f32[] divide(%[[get_tuple_element_466]], %[[add_470]])
// CHECK-NEXT:  %[[multiply_472:[^ ]+]] = f32[] multiply(%[[get_tuple_element_467]], %[[divide_471]])
// CHECK-NEXT:  %[[constant_473:[^ ]+]] = f32[] constant(-1)
// CHECK-NEXT:  %[[get_tuple_element_464:[^ ]+]] = f32[] get-tuple-element(%[[parameter_461]]), index=2
// CHECK-NEXT:  %[[multiply_474:[^ ]+]] = f32[] multiply(%[[constant_473]], %[[get_tuple_element_464]])
// CHECK-NEXT:  %[[multiply_475:[^ ]+]] = f32[] multiply(%[[multiply_474]], %[[get_tuple_element_466]])
// CHECK-NEXT:  %[[multiply_476:[^ ]+]] = f32[] multiply(%[[add_470]], %[[add_470]])
// CHECK-NEXT:  %[[divide_477:[^ ]+]] = f32[] divide(%[[multiply_475]], %[[multiply_476]])
// CHECK-NEXT:  %[[add_478:[^ ]+]] = f32[] add(%[[multiply_472]], %[[divide_477]])
// CHECK-NEXT:  %[[get_tuple_element_468:[^ ]+]] = f32[] get-tuple-element(%[[parameter_461]]), index=6
// CHECK-NEXT:  %[[add_479:[^ ]+]] = f32[] add(%[[get_tuple_element_468]], %[[add_478]])
// CHECK-NEXT:  %[[divide_483:[^ ]+]] = f32[] divide(%[[add_478]], %[[add_479]])
// CHECK-NEXT:  %[[abs_484:[^ ]+]] = f32[] abs(%[[divide_483]])
// CHECK-NEXT:  %[[constant_485:[^ ]+]] = f32[] constant(1.1920929e-07)
// CHECK-NEXT:  %[[compare_486:[^ ]+]] = pred[] compare(%[[abs_484]], %[[constant_485]]), direction=GT
// CHECK-NEXT:  %[[and_487:[^ ]+]] = pred[] and(%[[get_tuple_element_462]], %[[compare_486]])
// CHECK-NEXT:  %[[select_488:[^ ]+]] = f32[] select(%[[get_tuple_element_462]], %[[add_470]], %[[get_tuple_element_463]])
// CHECK-NEXT:  %[[divide_480:[^ ]+]] = f32[] divide(%[[get_tuple_element_466]], %[[add_470]])
// CHECK-NEXT:  %[[multiply_481:[^ ]+]] = f32[] multiply(%[[get_tuple_element_464]], %[[divide_480]])
// CHECK-NEXT:  %[[select_489:[^ ]+]] = f32[] select(%[[get_tuple_element_462]], %[[multiply_481]], %[[get_tuple_element_464]])
// CHECK-NEXT:  %[[get_tuple_element_465:[^ ]+]] = f32[] get-tuple-element(%[[parameter_461]]), index=3
// CHECK-NEXT:  %[[add_482:[^ ]+]] = f32[] add(%[[get_tuple_element_465]], %[[multiply_481]])
// CHECK-NEXT:  %[[select_490:[^ ]+]] = f32[] select(%[[get_tuple_element_462]], %[[add_482]], %[[get_tuple_element_465]])
// CHECK-NEXT:  %[[select_491:[^ ]+]] = f32[] select(%[[get_tuple_element_462]], %[[get_tuple_element_466]], %[[get_tuple_element_466]])
// CHECK-NEXT:  %[[select_492:[^ ]+]] = f32[] select(%[[get_tuple_element_462]], %[[add_478]], %[[get_tuple_element_467]])
// CHECK-NEXT:  %[[select_493:[^ ]+]] = f32[] select(%[[get_tuple_element_462]], %[[add_479]], %[[get_tuple_element_468]])
// CHECK-NEXT:  ROOT %[[tuple_494:[^ ]+]] = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) tuple(%[[and_487]], %[[select_488]], %[[select_489]], %[[select_490]], %[[select_491]], /*index=5*/%[[select_492]], %[[select_493]])

// CHECK:       %[[$or_495:[^ ]+]]
// CHECK-NEXT:  %[[lhs_496:[^ ]+]] = pred[] parameter(0)
// CHECK-NEXT:  %[[rhs_497:[^ ]+]] = pred[] parameter(1)
// CHECK-NEXT:  ROOT %[[or_498:[^ ]+]] = pred[] or(%[[lhs_496]], %[[rhs_497]])

// CHECK:       %[[$igamma_condition_499:[^ ]+]]
// CHECK-NEXT:  %[[parameter_500:[^ ]+]] = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) parameter(0)
// CHECK-NEXT:  %[[get_tuple_element_502:[^ ]+]] = f32[] get-tuple-element(%[[parameter_500]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_503:[^ ]+]] = f32[] get-tuple-element(%[[parameter_500]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_504:[^ ]+]] = f32[] get-tuple-element(%[[parameter_500]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_505:[^ ]+]] = f32[] get-tuple-element(%[[parameter_500]]), index=4
// CHECK-NEXT:  %[[get_tuple_element_506:[^ ]+]] = f32[] get-tuple-element(%[[parameter_500]]), index=5
// CHECK-NEXT:  %[[get_tuple_element_507:[^ ]+]] = f32[] get-tuple-element(%[[parameter_500]]), index=6
// CHECK-NEXT:  %[[get_tuple_element_501:[^ ]+]] = pred[] get-tuple-element(%[[parameter_500]]), index=0
// CHECK-NEXT:  %[[constant_508:[^ ]+]] = pred[] constant(false)
// CHECK-NEXT:  ROOT %[[reduce_509:[^ ]+]] = pred[] reduce(%[[get_tuple_element_501]], %[[constant_508]]), dimensions={}, to_apply=%[[$or_495]]

// CHECK:       %[[$xla_builder_math_IgammaGradA_678:[^ ]+]]
// CHECK-NEXT:  %[[arg1_2:[^ ]+]] = f32[] parameter(1)
// CHECK-NEXT:  %[[constant_6:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_7:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[constant_6]]), direction=EQ
// CHECK-NEXT:  %[[constant_8:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_9:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[constant_8]]), direction=LT
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[constant_10:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_11:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[constant_10]]), direction=LE
// CHECK-NEXT:  %[[or_12:[^ ]+]] = pred[] or(%[[compare_9]], %[[compare_11]])
// CHECK-NEXT:  %[[or_120:[^ ]+]] = pred[] or(%[[compare_7]], %[[or_12]])
// CHECK-NEXT:  %[[log_17:[^ ]+]] = f32[] log(%[[arg1_2]])
// CHECK-NEXT:  %[[multiply_18:[^ ]+]] = f32[] multiply(%[[arg0_1]], %[[log_17]])
// CHECK-NEXT:  %[[subtract_19:[^ ]+]] = f32[] subtract(%[[multiply_18]], %[[arg1_2]])
// CHECK-NEXT:  %[[abs_110:[^ ]+]] = f32[] abs(%[[arg0_1]])
// CHECK-NEXT:  %[[constant_111:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[compare_112:[^ ]+]] = pred[] compare(%[[abs_110]], %[[constant_111]]), direction=EQ
// CHECK-NEXT:  %[[constant_108:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[broadcast_109:[^ ]+]] = f32[] broadcast(%[[constant_108]]), dimensions={}
// CHECK-NEXT:  %[[constant_20:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_28:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[constant_20]]), direction=LT
// CHECK-NEXT:  %[[constant_22:[^ ]+]] = f32[] constant(3.14159274)
// CHECK-NEXT:  %[[abs_91:[^ ]+]] = f32[] abs(%[[arg0_1]])
// CHECK-NEXT:  %[[floor_92:[^ ]+]] = f32[] floor(%[[abs_91]])
// CHECK-NEXT:  %[[subtract_93:[^ ]+]] = f32[] subtract(%[[abs_91]], %[[floor_92]])
// CHECK-NEXT:  %[[constant_94:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_95:[^ ]+]] = pred[] compare(%[[subtract_93]], %[[constant_94]]), direction=GT
// CHECK-NEXT:  %[[constant_96:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_97:[^ ]+]] = f32[] subtract(%[[constant_96]], %[[subtract_93]])
// CHECK-NEXT:  %[[select_98:[^ ]+]] = f32[] select(%[[compare_95]], %[[subtract_97]], %[[subtract_93]])
// CHECK-NEXT:  %[[multiply_99:[^ ]+]] = f32[] multiply(%[[constant_22]], %[[select_98]])
// CHECK-NEXT:  %[[sine_100:[^ ]+]] = f32[] sine(%[[multiply_99]])
// CHECK-NEXT:  %[[log_101:[^ ]+]] = f32[] log(%[[sine_100]])
// CHECK-NEXT:  %[[is_finite_102:[^ ]+]] = pred[] is-finite(%[[log_101]])
// CHECK-NEXT:  %[[constant_23:[^ ]+]] = f32[] constant(1.14472985)
// CHECK-NEXT:  %[[subtract_103:[^ ]+]] = f32[] subtract(%[[constant_23]], %[[log_101]])
// CHECK-NEXT:  %[[constant_24:[^ ]+]] = f32[] constant(0.918938518)
// CHECK-NEXT:  %[[negate_29:[^ ]+]] = f32[] negate(%[[arg0_1]])
// CHECK-NEXT:  %[[constant_21:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_30:[^ ]+]] = f32[] subtract(%[[arg0_1]], %[[constant_21]])
// CHECK-NEXT:  %[[select_31:[^ ]+]] = f32[] select(%[[compare_28]], %[[negate_29]], %[[subtract_30]])
// CHECK-NEXT:  %[[add_84:[^ ]+]] = f32[] add(%[[select_31]], %[[constant_20]])
// CHECK-NEXT:  %[[constant_25:[^ ]+]] = f32[] constant(7.5)
// CHECK-NEXT:  %[[add_80:[^ ]+]] = f32[] add(%[[constant_25]], %[[select_31]])
// CHECK-NEXT:  %[[constant_26:[^ ]+]] = f32[] constant(2.01490307)
// CHECK-NEXT:  %[[divide_81:[^ ]+]] = f32[] divide(%[[select_31]], %[[constant_25]])
// CHECK-NEXT:  %[[log_plus_one_82:[^ ]+]] = f32[] log-plus-one(%[[divide_81]])
// CHECK-NEXT:  %[[add_83:[^ ]+]] = f32[] add(%[[constant_26]], %[[log_plus_one_82]])
// CHECK-NEXT:  %[[divide_85:[^ ]+]] = f32[] divide(%[[add_80]], %[[add_83]])
// CHECK-NEXT:  %[[subtract_86:[^ ]+]] = f32[] subtract(%[[add_84]], %[[divide_85]])
// CHECK-NEXT:  %[[multiply_87:[^ ]+]] = f32[] multiply(%[[subtract_86]], %[[add_83]])
// CHECK-NEXT:  %[[add_88:[^ ]+]] = f32[] add(%[[constant_24]], %[[multiply_87]])
// CHECK-NEXT:  %[[constant_27:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[constant_32:[^ ]+]] = f32[] constant(676.520386)
// CHECK-NEXT:  %[[constant_33:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[add_34:[^ ]+]] = f32[] add(%[[select_31]], %[[constant_33]])
// CHECK-NEXT:  %[[add_35:[^ ]+]] = f32[] add(%[[add_34]], %[[constant_21]])
// CHECK-NEXT:  %[[divide_36:[^ ]+]] = f32[] divide(%[[constant_32]], %[[add_35]])
// CHECK-NEXT:  %[[add_37:[^ ]+]] = f32[] add(%[[constant_27]], %[[divide_36]])
// CHECK-NEXT:  %[[constant_38:[^ ]+]] = f32[] constant(-1259.13916)
// CHECK-NEXT:  %[[constant_39:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_40:[^ ]+]] = f32[] add(%[[select_31]], %[[constant_39]])
// CHECK-NEXT:  %[[add_41:[^ ]+]] = f32[] add(%[[add_40]], %[[constant_21]])
// CHECK-NEXT:  %[[divide_42:[^ ]+]] = f32[] divide(%[[constant_38]], %[[add_41]])
// CHECK-NEXT:  %[[add_43:[^ ]+]] = f32[] add(%[[add_37]], %[[divide_42]])
// CHECK-NEXT:  %[[constant_44:[^ ]+]] = f32[] constant(771.323425)
// CHECK-NEXT:  %[[constant_45:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[add_46:[^ ]+]] = f32[] add(%[[select_31]], %[[constant_45]])
// CHECK-NEXT:  %[[add_47:[^ ]+]] = f32[] add(%[[add_46]], %[[constant_21]])
// CHECK-NEXT:  %[[divide_48:[^ ]+]] = f32[] divide(%[[constant_44]], %[[add_47]])
// CHECK-NEXT:  %[[add_49:[^ ]+]] = f32[] add(%[[add_43]], %[[divide_48]])
// CHECK-NEXT:  %[[constant_50:[^ ]+]] = f32[] constant(-176.615036)
// CHECK-NEXT:  %[[constant_51:[^ ]+]] = f32[] constant(3)
// CHECK-NEXT:  %[[add_52:[^ ]+]] = f32[] add(%[[select_31]], %[[constant_51]])
// CHECK-NEXT:  %[[add_53:[^ ]+]] = f32[] add(%[[add_52]], %[[constant_21]])
// CHECK-NEXT:  %[[divide_54:[^ ]+]] = f32[] divide(%[[constant_50]], %[[add_53]])
// CHECK-NEXT:  %[[add_55:[^ ]+]] = f32[] add(%[[add_49]], %[[divide_54]])
// CHECK-NEXT:  %[[constant_56:[^ ]+]] = f32[] constant(12.5073433)
// CHECK-NEXT:  %[[constant_57:[^ ]+]] = f32[] constant(4)
// CHECK-NEXT:  %[[add_58:[^ ]+]] = f32[] add(%[[select_31]], %[[constant_57]])
// CHECK-NEXT:  %[[add_59:[^ ]+]] = f32[] add(%[[add_58]], %[[constant_21]])
// CHECK-NEXT:  %[[divide_60:[^ ]+]] = f32[] divide(%[[constant_56]], %[[add_59]])
// CHECK-NEXT:  %[[add_61:[^ ]+]] = f32[] add(%[[add_55]], %[[divide_60]])
// CHECK-NEXT:  %[[constant_62:[^ ]+]] = f32[] constant(-0.138571098)
// CHECK-NEXT:  %[[constant_63:[^ ]+]] = f32[] constant(5)
// CHECK-NEXT:  %[[add_64:[^ ]+]] = f32[] add(%[[select_31]], %[[constant_63]])
// CHECK-NEXT:  %[[add_65:[^ ]+]] = f32[] add(%[[add_64]], %[[constant_21]])
// CHECK-NEXT:  %[[divide_66:[^ ]+]] = f32[] divide(%[[constant_62]], %[[add_65]])
// CHECK-NEXT:  %[[add_67:[^ ]+]] = f32[] add(%[[add_61]], %[[divide_66]])
// CHECK-NEXT:  %[[constant_68:[^ ]+]] = f32[] constant(9.98436917e-06)
// CHECK-NEXT:  %[[constant_69:[^ ]+]] = f32[] constant(6)
// CHECK-NEXT:  %[[add_70:[^ ]+]] = f32[] add(%[[select_31]], %[[constant_69]])
// CHECK-NEXT:  %[[add_71:[^ ]+]] = f32[] add(%[[add_70]], %[[constant_21]])
// CHECK-NEXT:  %[[divide_72:[^ ]+]] = f32[] divide(%[[constant_68]], %[[add_71]])
// CHECK-NEXT:  %[[add_73:[^ ]+]] = f32[] add(%[[add_67]], %[[divide_72]])
// CHECK-NEXT:  %[[constant_74:[^ ]+]] = f32[] constant(1.50563267e-07)
// CHECK-NEXT:  %[[constant_75:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_76:[^ ]+]] = f32[] add(%[[select_31]], %[[constant_75]])
// CHECK-NEXT:  %[[add_77:[^ ]+]] = f32[] add(%[[add_76]], %[[constant_21]])
// CHECK-NEXT:  %[[divide_78:[^ ]+]] = f32[] divide(%[[constant_74]], %[[add_77]])
// CHECK-NEXT:  %[[add_79:[^ ]+]] = f32[] add(%[[add_73]], %[[divide_78]])
// CHECK-NEXT:  %[[log_89:[^ ]+]] = f32[] log(%[[add_79]])
// CHECK-NEXT:  %[[add_90:[^ ]+]] = f32[] add(%[[add_88]], %[[log_89]])
// CHECK-NEXT:  %[[subtract_104:[^ ]+]] = f32[] subtract(%[[subtract_103]], %[[add_90]])
// CHECK-NEXT:  %[[negate_105:[^ ]+]] = f32[] negate(%[[log_101]])
// CHECK-NEXT:  %[[select_106:[^ ]+]] = f32[] select(%[[is_finite_102]], %[[subtract_104]], %[[negate_105]])
// CHECK-NEXT:  %[[select_107:[^ ]+]] = f32[] select(%[[compare_28]], %[[select_106]], %[[add_90]])
// CHECK-NEXT:  %[[select_113:[^ ]+]] = f32[] select(%[[compare_112]], %[[broadcast_109]], %[[select_107]])
// CHECK-NEXT:  %[[subtract_114:[^ ]+]] = f32[] subtract(%[[subtract_19]], %[[select_113]])
// CHECK-NEXT:  %[[constant_115:[^ ]+]] = f32[] constant(3.40282347e+38)
// CHECK-NEXT:  %[[log_116:[^ ]+]] = f32[] log(%[[constant_115]])
// CHECK-NEXT:  %[[negate_117:[^ ]+]] = f32[] negate(%[[log_116]])
// CHECK-NEXT:  %[[compare_118:[^ ]+]] = pred[] compare(%[[subtract_114]], %[[negate_117]]), direction=LT
// CHECK-NEXT:  %[[or_121:[^ ]+]] = pred[] or(%[[or_120]], %[[compare_118]])
// CHECK-NEXT:  %[[compare_3:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[arg0_1]]), direction=NE
// CHECK-NEXT:  %[[compare_4:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[arg1_2]]), direction=NE
// CHECK-NEXT:  %[[or_5:[^ ]+]] = pred[] or(%[[compare_3]], %[[compare_4]])
// CHECK-NEXT:  %[[or_122:[^ ]+]] = pred[] or(%[[or_121]], %[[or_5]])
// CHECK-NEXT:  %[[not_123:[^ ]+]] = pred[] not(%[[or_122]])
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[compare_14:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[constant_13]]), direction=GT
// CHECK-NEXT:  %[[compare_15:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[arg0_1]]), direction=GT
// CHECK-NEXT:  %[[and_16:[^ ]+]] = pred[] and(%[[compare_14]], %[[compare_15]])
// CHECK-NEXT:  %[[and_124:[^ ]+]] = pred[] and(%[[not_123]], %[[and_16]])
// CHECK-NEXT:  %[[constant_133:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_134:[^ ]+]] = f32[] add(%[[arg1_2]], %[[constant_133]])
// CHECK-NEXT:  %[[constant_125:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_126:[^ ]+]] = f32[] subtract(%[[constant_125]], %[[arg0_1]])
// CHECK-NEXT:  %[[add_127:[^ ]+]] = f32[] add(%[[arg1_2]], %[[subtract_126]])
// CHECK-NEXT:  %[[constant_128:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_129:[^ ]+]] = f32[] add(%[[add_127]], %[[constant_128]])
// CHECK-NEXT:  %[[multiply_135:[^ ]+]] = f32[] multiply(%[[add_129]], %[[arg1_2]])
// CHECK-NEXT:  %[[divide_136:[^ ]+]] = f32[] divide(%[[add_134]], %[[multiply_135]])
// CHECK-NEXT:  %[[constant_137:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[broadcast_138:[^ ]+]] = f32[] broadcast(%[[constant_137]]), dimensions={}
// CHECK-NEXT:  %[[constant_130:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[constant_131:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[broadcast_132:[^ ]+]] = f32[] broadcast(%[[constant_131]]), dimensions={}
// CHECK-NEXT:  %[[constant_139:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_140:[^ ]+]] = f32[] broadcast(%[[constant_139]]), dimensions={}
// CHECK-NEXT:  %[[constant_141:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_142:[^ ]+]] = f32[] broadcast(%[[constant_141]]), dimensions={}
// CHECK-NEXT:  %[[constant_143:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_144:[^ ]+]] = f32[] broadcast(%[[constant_143]]), dimensions={}
// CHECK-NEXT:  %[[negate_145:[^ ]+]] = f32[] negate(%[[arg1_2]])
// CHECK-NEXT:  %[[multiply_146:[^ ]+]] = f32[] multiply(%[[divide_136]], %[[negate_145]])
// CHECK-NEXT:  %[[subtract_147:[^ ]+]] = f32[] subtract(%[[broadcast_144]], %[[multiply_146]])
// CHECK-NEXT:  %[[divide_148:[^ ]+]] = f32[] divide(%[[subtract_147]], %[[multiply_135]])
// CHECK-NEXT:  %[[tuple_149:[^ ]+]] = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) tuple(%[[and_124]], %[[divide_136]], %[[broadcast_138]], %[[subtract_126]], %[[add_129]], /*index=5*/%[[constant_130]], %[[add_134]], %[[multiply_135]], %[[broadcast_132]], %[[arg1_2]], /*index=10*/%[[broadcast_140]], %[[broadcast_142]], %[[broadcast_144]], %[[negate_145]], %[[divide_148]])
// CHECK-NEXT:  %[[while_283:[^ ]+]] = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[], f32[], f32[], f32[], /*index=10*/f32[], f32[], f32[], f32[], f32[]) while(%[[tuple_149]]), condition=%[[$igammac_condition_261]], body=%[[$igammac_body_150]]
// CHECK-NEXT:  %[[get_tuple_element_284:[^ ]+]] = pred[] get-tuple-element(%[[while_283]]), index=0
// CHECK-NEXT:  %[[get_tuple_element_286:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_287:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=3
// CHECK-NEXT:  %[[get_tuple_element_288:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=4
// CHECK-NEXT:  %[[get_tuple_element_289:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=5
// CHECK-NEXT:  %[[get_tuple_element_290:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=6
// CHECK-NEXT:  %[[get_tuple_element_291:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=7
// CHECK-NEXT:  %[[get_tuple_element_292:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=8
// CHECK-NEXT:  %[[get_tuple_element_293:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=9
// CHECK-NEXT:  %[[get_tuple_element_294:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=10
// CHECK-NEXT:  %[[get_tuple_element_295:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=11
// CHECK-NEXT:  %[[get_tuple_element_296:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=12
// CHECK-NEXT:  %[[get_tuple_element_297:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=13
// CHECK-NEXT:  %[[not_449:[^ ]+]] = pred[] not(%[[and_16]])
// CHECK-NEXT:  %[[and_450:[^ ]+]] = pred[] and(%[[not_123]], %[[not_449]])
// CHECK-NEXT:  %[[constant_451:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[broadcast_452:[^ ]+]] = f32[] broadcast(%[[constant_451]]), dimensions={}
// CHECK-NEXT:  %[[constant_453:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[broadcast_454:[^ ]+]] = f32[] broadcast(%[[constant_453]]), dimensions={}
// CHECK-NEXT:  %[[constant_455:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_456:[^ ]+]] = f32[] broadcast(%[[constant_455]]), dimensions={}
// CHECK-NEXT:  %[[constant_457:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_458:[^ ]+]] = f32[] broadcast(%[[constant_457]]), dimensions={}
// CHECK-NEXT:  %[[tuple_459:[^ ]+]] = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) tuple(%[[and_450]], %[[arg0_1]], %[[broadcast_452]], %[[broadcast_454]], %[[arg1_2]], /*index=5*/%[[broadcast_456]], %[[broadcast_458]])
// CHECK-NEXT:  %[[while_510:[^ ]+]] = (pred[], f32[], f32[], f32[], f32[], /*index=5*/f32[], f32[]) while(%[[tuple_459]]), condition=%[[$igamma_condition_499]], body=%[[$igamma_body_460]]
// CHECK-NEXT:  %[[get_tuple_element_511:[^ ]+]] = pred[] get-tuple-element(%[[while_510]]), index=0
// CHECK-NEXT:  %[[get_tuple_element_512:[^ ]+]] = f32[] get-tuple-element(%[[while_510]]), index=1
// CHECK-NEXT:  %[[get_tuple_element_513:[^ ]+]] = f32[] get-tuple-element(%[[while_510]]), index=2
// CHECK-NEXT:  %[[get_tuple_element_515:[^ ]+]] = f32[] get-tuple-element(%[[while_510]]), index=4
// CHECK-NEXT:  %[[get_tuple_element_516:[^ ]+]] = f32[] get-tuple-element(%[[while_510]]), index=5
// CHECK-NEXT:  %[[or_674:[^ ]+]] = pred[] or(%[[or_12]], %[[or_5]])
// CHECK-NEXT:  %[[constant_675:[^ ]+]] = f32[] constant(nan)
// CHECK-NEXT:  %[[broadcast_676:[^ ]+]] = f32[] broadcast(%[[constant_675]]), dimensions={}
// CHECK-NEXT:  %[[constant_671:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[broadcast_672:[^ ]+]] = f32[] broadcast(%[[constant_671]]), dimensions={}
// CHECK-NEXT:  %[[exponential_119:[^ ]+]] = f32[] exponential(%[[subtract_114]])
// CHECK-NEXT:  %[[get_tuple_element_285:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=1
// CHECK-NEXT:  %[[log_299:[^ ]+]] = f32[] log(%[[arg1_2]])
// CHECK-NEXT:  %[[constant_300:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_437:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[constant_300]]), direction=LE
// CHECK-NEXT:  %[[floor_438:[^ ]+]] = f32[] floor(%[[arg0_1]])
// CHECK-NEXT:  %[[compare_439:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[floor_438]]), direction=EQ
// CHECK-NEXT:  %[[and_440:[^ ]+]] = pred[] and(%[[compare_437]], %[[compare_439]])
// CHECK-NEXT:  %[[constant_441:[^ ]+]] = f32[] constant(nan)
// CHECK-NEXT:  %[[broadcast_442:[^ ]+]] = f32[] broadcast(%[[constant_441]]), dimensions={}
// CHECK-NEXT:  %[[constant_301:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_308:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[constant_301]]), direction=LT
// CHECK-NEXT:  %[[constant_306:[^ ]+]] = f32[] constant(2.01490307)
// CHECK-NEXT:  %[[negate_309:[^ ]+]] = f32[] negate(%[[arg0_1]])
// CHECK-NEXT:  %[[constant_302:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_310:[^ ]+]] = f32[] subtract(%[[arg0_1]], %[[constant_302]])
// CHECK-NEXT:  %[[select_311:[^ ]+]] = f32[] select(%[[compare_308]], %[[negate_309]], %[[subtract_310]])
// CHECK-NEXT:  %[[constant_305:[^ ]+]] = f32[] constant(7.5)
// CHECK-NEXT:  %[[divide_417:[^ ]+]] = f32[] divide(%[[select_311]], %[[constant_305]])
// CHECK-NEXT:  %[[log_plus_one_418:[^ ]+]] = f32[] log-plus-one(%[[divide_417]])
// CHECK-NEXT:  %[[add_419:[^ ]+]] = f32[] add(%[[constant_306]], %[[log_plus_one_418]])
// CHECK-NEXT:  %[[constant_312:[^ ]+]] = f32[] constant(676.520386)
// CHECK-NEXT:  %[[constant_313:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[add_314:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_313]])
// CHECK-NEXT:  %[[add_315:[^ ]+]] = f32[] add(%[[add_314]], %[[constant_302]])
// CHECK-NEXT:  %[[add_316:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_313]])
// CHECK-NEXT:  %[[add_317:[^ ]+]] = f32[] add(%[[add_316]], %[[constant_302]])
// CHECK-NEXT:  %[[multiply_318:[^ ]+]] = f32[] multiply(%[[add_315]], %[[add_317]])
// CHECK-NEXT:  %[[divide_319:[^ ]+]] = f32[] divide(%[[constant_312]], %[[multiply_318]])
// CHECK-NEXT:  %[[subtract_320:[^ ]+]] = f32[] subtract(%[[constant_300]], %[[divide_319]])
// CHECK-NEXT:  %[[constant_325:[^ ]+]] = f32[] constant(-1259.13916)
// CHECK-NEXT:  %[[constant_326:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_327:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_326]])
// CHECK-NEXT:  %[[add_328:[^ ]+]] = f32[] add(%[[add_327]], %[[constant_302]])
// CHECK-NEXT:  %[[add_329:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_326]])
// CHECK-NEXT:  %[[add_330:[^ ]+]] = f32[] add(%[[add_329]], %[[constant_302]])
// CHECK-NEXT:  %[[multiply_331:[^ ]+]] = f32[] multiply(%[[add_328]], %[[add_330]])
// CHECK-NEXT:  %[[divide_332:[^ ]+]] = f32[] divide(%[[constant_325]], %[[multiply_331]])
// CHECK-NEXT:  %[[subtract_333:[^ ]+]] = f32[] subtract(%[[subtract_320]], %[[divide_332]])
// CHECK-NEXT:  %[[constant_338:[^ ]+]] = f32[] constant(771.323425)
// CHECK-NEXT:  %[[constant_339:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[add_340:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_339]])
// CHECK-NEXT:  %[[add_341:[^ ]+]] = f32[] add(%[[add_340]], %[[constant_302]])
// CHECK-NEXT:  %[[add_342:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_339]])
// CHECK-NEXT:  %[[add_343:[^ ]+]] = f32[] add(%[[add_342]], %[[constant_302]])
// CHECK-NEXT:  %[[multiply_344:[^ ]+]] = f32[] multiply(%[[add_341]], %[[add_343]])
// CHECK-NEXT:  %[[divide_345:[^ ]+]] = f32[] divide(%[[constant_338]], %[[multiply_344]])
// CHECK-NEXT:  %[[subtract_346:[^ ]+]] = f32[] subtract(%[[subtract_333]], %[[divide_345]])
// CHECK-NEXT:  %[[constant_351:[^ ]+]] = f32[] constant(-176.615036)
// CHECK-NEXT:  %[[constant_352:[^ ]+]] = f32[] constant(3)
// CHECK-NEXT:  %[[add_353:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_352]])
// CHECK-NEXT:  %[[add_354:[^ ]+]] = f32[] add(%[[add_353]], %[[constant_302]])
// CHECK-NEXT:  %[[add_355:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_352]])
// CHECK-NEXT:  %[[add_356:[^ ]+]] = f32[] add(%[[add_355]], %[[constant_302]])
// CHECK-NEXT:  %[[multiply_357:[^ ]+]] = f32[] multiply(%[[add_354]], %[[add_356]])
// CHECK-NEXT:  %[[divide_358:[^ ]+]] = f32[] divide(%[[constant_351]], %[[multiply_357]])
// CHECK-NEXT:  %[[subtract_359:[^ ]+]] = f32[] subtract(%[[subtract_346]], %[[divide_358]])
// CHECK-NEXT:  %[[constant_364:[^ ]+]] = f32[] constant(12.5073433)
// CHECK-NEXT:  %[[constant_365:[^ ]+]] = f32[] constant(4)
// CHECK-NEXT:  %[[add_366:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_365]])
// CHECK-NEXT:  %[[add_367:[^ ]+]] = f32[] add(%[[add_366]], %[[constant_302]])
// CHECK-NEXT:  %[[add_368:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_365]])
// CHECK-NEXT:  %[[add_369:[^ ]+]] = f32[] add(%[[add_368]], %[[constant_302]])
// CHECK-NEXT:  %[[multiply_370:[^ ]+]] = f32[] multiply(%[[add_367]], %[[add_369]])
// CHECK-NEXT:  %[[divide_371:[^ ]+]] = f32[] divide(%[[constant_364]], %[[multiply_370]])
// CHECK-NEXT:  %[[subtract_372:[^ ]+]] = f32[] subtract(%[[subtract_359]], %[[divide_371]])
// CHECK-NEXT:  %[[constant_377:[^ ]+]] = f32[] constant(-0.138571098)
// CHECK-NEXT:  %[[constant_378:[^ ]+]] = f32[] constant(5)
// CHECK-NEXT:  %[[add_379:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_378]])
// CHECK-NEXT:  %[[add_380:[^ ]+]] = f32[] add(%[[add_379]], %[[constant_302]])
// CHECK-NEXT:  %[[add_381:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_378]])
// CHECK-NEXT:  %[[add_382:[^ ]+]] = f32[] add(%[[add_381]], %[[constant_302]])
// CHECK-NEXT:  %[[multiply_383:[^ ]+]] = f32[] multiply(%[[add_380]], %[[add_382]])
// CHECK-NEXT:  %[[divide_384:[^ ]+]] = f32[] divide(%[[constant_377]], %[[multiply_383]])
// CHECK-NEXT:  %[[subtract_385:[^ ]+]] = f32[] subtract(%[[subtract_372]], %[[divide_384]])
// CHECK-NEXT:  %[[constant_390:[^ ]+]] = f32[] constant(9.98436917e-06)
// CHECK-NEXT:  %[[constant_391:[^ ]+]] = f32[] constant(6)
// CHECK-NEXT:  %[[add_392:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_391]])
// CHECK-NEXT:  %[[add_393:[^ ]+]] = f32[] add(%[[add_392]], %[[constant_302]])
// CHECK-NEXT:  %[[add_394:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_391]])
// CHECK-NEXT:  %[[add_395:[^ ]+]] = f32[] add(%[[add_394]], %[[constant_302]])
// CHECK-NEXT:  %[[multiply_396:[^ ]+]] = f32[] multiply(%[[add_393]], %[[add_395]])
// CHECK-NEXT:  %[[divide_397:[^ ]+]] = f32[] divide(%[[constant_390]], %[[multiply_396]])
// CHECK-NEXT:  %[[subtract_398:[^ ]+]] = f32[] subtract(%[[subtract_385]], %[[divide_397]])
// CHECK-NEXT:  %[[constant_403:[^ ]+]] = f32[] constant(1.50563267e-07)
// CHECK-NEXT:  %[[constant_404:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_405:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_404]])
// CHECK-NEXT:  %[[add_406:[^ ]+]] = f32[] add(%[[add_405]], %[[constant_302]])
// CHECK-NEXT:  %[[add_407:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_404]])
// CHECK-NEXT:  %[[add_408:[^ ]+]] = f32[] add(%[[add_407]], %[[constant_302]])
// CHECK-NEXT:  %[[multiply_409:[^ ]+]] = f32[] multiply(%[[add_406]], %[[add_408]])
// CHECK-NEXT:  %[[divide_410:[^ ]+]] = f32[] divide(%[[constant_403]], %[[multiply_409]])
// CHECK-NEXT:  %[[subtract_411:[^ ]+]] = f32[] subtract(%[[subtract_398]], %[[divide_410]])
// CHECK-NEXT:  %[[constant_307:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_321:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_313]])
// CHECK-NEXT:  %[[add_322:[^ ]+]] = f32[] add(%[[add_321]], %[[constant_302]])
// CHECK-NEXT:  %[[divide_323:[^ ]+]] = f32[] divide(%[[constant_312]], %[[add_322]])
// CHECK-NEXT:  %[[add_324:[^ ]+]] = f32[] add(%[[constant_307]], %[[divide_323]])
// CHECK-NEXT:  %[[add_334:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_326]])
// CHECK-NEXT:  %[[add_335:[^ ]+]] = f32[] add(%[[add_334]], %[[constant_302]])
// CHECK-NEXT:  %[[divide_336:[^ ]+]] = f32[] divide(%[[constant_325]], %[[add_335]])
// CHECK-NEXT:  %[[add_337:[^ ]+]] = f32[] add(%[[add_324]], %[[divide_336]])
// CHECK-NEXT:  %[[add_347:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_339]])
// CHECK-NEXT:  %[[add_348:[^ ]+]] = f32[] add(%[[add_347]], %[[constant_302]])
// CHECK-NEXT:  %[[divide_349:[^ ]+]] = f32[] divide(%[[constant_338]], %[[add_348]])
// CHECK-NEXT:  %[[add_350:[^ ]+]] = f32[] add(%[[add_337]], %[[divide_349]])
// CHECK-NEXT:  %[[add_360:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_352]])
// CHECK-NEXT:  %[[add_361:[^ ]+]] = f32[] add(%[[add_360]], %[[constant_302]])
// CHECK-NEXT:  %[[divide_362:[^ ]+]] = f32[] divide(%[[constant_351]], %[[add_361]])
// CHECK-NEXT:  %[[add_363:[^ ]+]] = f32[] add(%[[add_350]], %[[divide_362]])
// CHECK-NEXT:  %[[add_373:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_365]])
// CHECK-NEXT:  %[[add_374:[^ ]+]] = f32[] add(%[[add_373]], %[[constant_302]])
// CHECK-NEXT:  %[[divide_375:[^ ]+]] = f32[] divide(%[[constant_364]], %[[add_374]])
// CHECK-NEXT:  %[[add_376:[^ ]+]] = f32[] add(%[[add_363]], %[[divide_375]])
// CHECK-NEXT:  %[[add_386:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_378]])
// CHECK-NEXT:  %[[add_387:[^ ]+]] = f32[] add(%[[add_386]], %[[constant_302]])
// CHECK-NEXT:  %[[divide_388:[^ ]+]] = f32[] divide(%[[constant_377]], %[[add_387]])
// CHECK-NEXT:  %[[add_389:[^ ]+]] = f32[] add(%[[add_376]], %[[divide_388]])
// CHECK-NEXT:  %[[add_399:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_391]])
// CHECK-NEXT:  %[[add_400:[^ ]+]] = f32[] add(%[[add_399]], %[[constant_302]])
// CHECK-NEXT:  %[[divide_401:[^ ]+]] = f32[] divide(%[[constant_390]], %[[add_400]])
// CHECK-NEXT:  %[[add_402:[^ ]+]] = f32[] add(%[[add_389]], %[[divide_401]])
// CHECK-NEXT:  %[[add_412:[^ ]+]] = f32[] add(%[[select_311]], %[[constant_404]])
// CHECK-NEXT:  %[[add_413:[^ ]+]] = f32[] add(%[[add_412]], %[[constant_302]])
// CHECK-NEXT:  %[[divide_414:[^ ]+]] = f32[] divide(%[[constant_403]], %[[add_413]])
// CHECK-NEXT:  %[[add_415:[^ ]+]] = f32[] add(%[[add_402]], %[[divide_414]])
// CHECK-NEXT:  %[[divide_420:[^ ]+]] = f32[] divide(%[[subtract_411]], %[[add_415]])
// CHECK-NEXT:  %[[add_421:[^ ]+]] = f32[] add(%[[add_419]], %[[divide_420]])
// CHECK-NEXT:  %[[constant_304:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_416:[^ ]+]] = f32[] add(%[[constant_305]], %[[select_311]])
// CHECK-NEXT:  %[[divide_422:[^ ]+]] = f32[] divide(%[[constant_304]], %[[add_416]])
// CHECK-NEXT:  %[[subtract_423:[^ ]+]] = f32[] subtract(%[[add_421]], %[[divide_422]])
// CHECK-NEXT:  %[[constant_303:[^ ]+]] = f32[] constant(3.14159274)
// CHECK-NEXT:  %[[constant_424:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[add_425:[^ ]+]] = f32[] add(%[[arg0_1]], %[[constant_424]])
// CHECK-NEXT:  %[[floor_426:[^ ]+]] = f32[] floor(%[[add_425]])
// CHECK-NEXT:  %[[abs_427:[^ ]+]] = f32[] abs(%[[floor_426]])
// CHECK-NEXT:  %[[add_428:[^ ]+]] = f32[] add(%[[arg0_1]], %[[abs_427]])
// CHECK-NEXT:  %[[multiply_429:[^ ]+]] = f32[] multiply(%[[constant_303]], %[[add_428]])
// CHECK-NEXT:  %[[cosine_430:[^ ]+]] = f32[] cosine(%[[multiply_429]])
// CHECK-NEXT:  %[[multiply_431:[^ ]+]] = f32[] multiply(%[[constant_303]], %[[cosine_430]])
// CHECK-NEXT:  %[[multiply_432:[^ ]+]] = f32[] multiply(%[[constant_303]], %[[add_428]])
// CHECK-NEXT:  %[[sine_433:[^ ]+]] = f32[] sine(%[[multiply_432]])
// CHECK-NEXT:  %[[divide_434:[^ ]+]] = f32[] divide(%[[multiply_431]], %[[sine_433]])
// CHECK-NEXT:  %[[subtract_435:[^ ]+]] = f32[] subtract(%[[subtract_423]], %[[divide_434]])
// CHECK-NEXT:  %[[select_436:[^ ]+]] = f32[] select(%[[compare_308]], %[[subtract_435]], %[[subtract_423]])
// CHECK-NEXT:  %[[select_443:[^ ]+]] = f32[] select(%[[and_440]], %[[broadcast_442]], %[[select_436]])
// CHECK-NEXT:  %[[subtract_444:[^ ]+]] = f32[] subtract(%[[log_299]], %[[select_443]])
// CHECK-NEXT:  %[[multiply_445:[^ ]+]] = f32[] multiply(%[[get_tuple_element_285]], %[[subtract_444]])
// CHECK-NEXT:  %[[get_tuple_element_298:[^ ]+]] = f32[] get-tuple-element(%[[while_283]]), index=14
// CHECK-NEXT:  %[[add_446:[^ ]+]] = f32[] add(%[[multiply_445]], %[[get_tuple_element_298]])
// CHECK-NEXT:  %[[multiply_447:[^ ]+]] = f32[] multiply(%[[exponential_119]], %[[add_446]])
// CHECK-NEXT:  %[[negate_448:[^ ]+]] = f32[] negate(%[[multiply_447]])
// CHECK-NEXT:  %[[get_tuple_element_514:[^ ]+]] = f32[] get-tuple-element(%[[while_510]]), index=3
// CHECK-NEXT:  %[[log_518:[^ ]+]] = f32[] log(%[[arg1_2]])
// CHECK-NEXT:  %[[constant_519:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_520:[^ ]+]] = f32[] add(%[[arg0_1]], %[[constant_519]])
// CHECK-NEXT:  %[[constant_521:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_658:[^ ]+]] = pred[] compare(%[[add_520]], %[[constant_521]]), direction=LE
// CHECK-NEXT:  %[[floor_659:[^ ]+]] = f32[] floor(%[[add_520]])
// CHECK-NEXT:  %[[compare_660:[^ ]+]] = pred[] compare(%[[add_520]], %[[floor_659]]), direction=EQ
// CHECK-NEXT:  %[[and_661:[^ ]+]] = pred[] and(%[[compare_658]], %[[compare_660]])
// CHECK-NEXT:  %[[constant_662:[^ ]+]] = f32[] constant(nan)
// CHECK-NEXT:  %[[broadcast_663:[^ ]+]] = f32[] broadcast(%[[constant_662]]), dimensions={}
// CHECK-NEXT:  %[[constant_522:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[compare_529:[^ ]+]] = pred[] compare(%[[add_520]], %[[constant_522]]), direction=LT
// CHECK-NEXT:  %[[constant_527:[^ ]+]] = f32[] constant(2.01490307)
// CHECK-NEXT:  %[[negate_530:[^ ]+]] = f32[] negate(%[[add_520]])
// CHECK-NEXT:  %[[constant_523:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[subtract_531:[^ ]+]] = f32[] subtract(%[[add_520]], %[[constant_523]])
// CHECK-NEXT:  %[[select_532:[^ ]+]] = f32[] select(%[[compare_529]], %[[negate_530]], %[[subtract_531]])
// CHECK-NEXT:  %[[constant_526:[^ ]+]] = f32[] constant(7.5)
// CHECK-NEXT:  %[[divide_638:[^ ]+]] = f32[] divide(%[[select_532]], %[[constant_526]])
// CHECK-NEXT:  %[[log_plus_one_639:[^ ]+]] = f32[] log-plus-one(%[[divide_638]])
// CHECK-NEXT:  %[[add_640:[^ ]+]] = f32[] add(%[[constant_527]], %[[log_plus_one_639]])
// CHECK-NEXT:  %[[constant_533:[^ ]+]] = f32[] constant(676.520386)
// CHECK-NEXT:  %[[constant_534:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[add_535:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_534]])
// CHECK-NEXT:  %[[add_536:[^ ]+]] = f32[] add(%[[add_535]], %[[constant_523]])
// CHECK-NEXT:  %[[add_537:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_534]])
// CHECK-NEXT:  %[[add_538:[^ ]+]] = f32[] add(%[[add_537]], %[[constant_523]])
// CHECK-NEXT:  %[[multiply_539:[^ ]+]] = f32[] multiply(%[[add_536]], %[[add_538]])
// CHECK-NEXT:  %[[divide_540:[^ ]+]] = f32[] divide(%[[constant_533]], %[[multiply_539]])
// CHECK-NEXT:  %[[subtract_541:[^ ]+]] = f32[] subtract(%[[constant_521]], %[[divide_540]])
// CHECK-NEXT:  %[[constant_546:[^ ]+]] = f32[] constant(-1259.13916)
// CHECK-NEXT:  %[[constant_547:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_548:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_547]])
// CHECK-NEXT:  %[[add_549:[^ ]+]] = f32[] add(%[[add_548]], %[[constant_523]])
// CHECK-NEXT:  %[[add_550:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_547]])
// CHECK-NEXT:  %[[add_551:[^ ]+]] = f32[] add(%[[add_550]], %[[constant_523]])
// CHECK-NEXT:  %[[multiply_552:[^ ]+]] = f32[] multiply(%[[add_549]], %[[add_551]])
// CHECK-NEXT:  %[[divide_553:[^ ]+]] = f32[] divide(%[[constant_546]], %[[multiply_552]])
// CHECK-NEXT:  %[[subtract_554:[^ ]+]] = f32[] subtract(%[[subtract_541]], %[[divide_553]])
// CHECK-NEXT:  %[[constant_559:[^ ]+]] = f32[] constant(771.323425)
// CHECK-NEXT:  %[[constant_560:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[add_561:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_560]])
// CHECK-NEXT:  %[[add_562:[^ ]+]] = f32[] add(%[[add_561]], %[[constant_523]])
// CHECK-NEXT:  %[[add_563:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_560]])
// CHECK-NEXT:  %[[add_564:[^ ]+]] = f32[] add(%[[add_563]], %[[constant_523]])
// CHECK-NEXT:  %[[multiply_565:[^ ]+]] = f32[] multiply(%[[add_562]], %[[add_564]])
// CHECK-NEXT:  %[[divide_566:[^ ]+]] = f32[] divide(%[[constant_559]], %[[multiply_565]])
// CHECK-NEXT:  %[[subtract_567:[^ ]+]] = f32[] subtract(%[[subtract_554]], %[[divide_566]])
// CHECK-NEXT:  %[[constant_572:[^ ]+]] = f32[] constant(-176.615036)
// CHECK-NEXT:  %[[constant_573:[^ ]+]] = f32[] constant(3)
// CHECK-NEXT:  %[[add_574:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_573]])
// CHECK-NEXT:  %[[add_575:[^ ]+]] = f32[] add(%[[add_574]], %[[constant_523]])
// CHECK-NEXT:  %[[add_576:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_573]])
// CHECK-NEXT:  %[[add_577:[^ ]+]] = f32[] add(%[[add_576]], %[[constant_523]])
// CHECK-NEXT:  %[[multiply_578:[^ ]+]] = f32[] multiply(%[[add_575]], %[[add_577]])
// CHECK-NEXT:  %[[divide_579:[^ ]+]] = f32[] divide(%[[constant_572]], %[[multiply_578]])
// CHECK-NEXT:  %[[subtract_580:[^ ]+]] = f32[] subtract(%[[subtract_567]], %[[divide_579]])
// CHECK-NEXT:  %[[constant_585:[^ ]+]] = f32[] constant(12.5073433)
// CHECK-NEXT:  %[[constant_586:[^ ]+]] = f32[] constant(4)
// CHECK-NEXT:  %[[add_587:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_586]])
// CHECK-NEXT:  %[[add_588:[^ ]+]] = f32[] add(%[[add_587]], %[[constant_523]])
// CHECK-NEXT:  %[[add_589:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_586]])
// CHECK-NEXT:  %[[add_590:[^ ]+]] = f32[] add(%[[add_589]], %[[constant_523]])
// CHECK-NEXT:  %[[multiply_591:[^ ]+]] = f32[] multiply(%[[add_588]], %[[add_590]])
// CHECK-NEXT:  %[[divide_592:[^ ]+]] = f32[] divide(%[[constant_585]], %[[multiply_591]])
// CHECK-NEXT:  %[[subtract_593:[^ ]+]] = f32[] subtract(%[[subtract_580]], %[[divide_592]])
// CHECK-NEXT:  %[[constant_598:[^ ]+]] = f32[] constant(-0.138571098)
// CHECK-NEXT:  %[[constant_599:[^ ]+]] = f32[] constant(5)
// CHECK-NEXT:  %[[add_600:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_599]])
// CHECK-NEXT:  %[[add_601:[^ ]+]] = f32[] add(%[[add_600]], %[[constant_523]])
// CHECK-NEXT:  %[[add_602:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_599]])
// CHECK-NEXT:  %[[add_603:[^ ]+]] = f32[] add(%[[add_602]], %[[constant_523]])
// CHECK-NEXT:  %[[multiply_604:[^ ]+]] = f32[] multiply(%[[add_601]], %[[add_603]])
// CHECK-NEXT:  %[[divide_605:[^ ]+]] = f32[] divide(%[[constant_598]], %[[multiply_604]])
// CHECK-NEXT:  %[[subtract_606:[^ ]+]] = f32[] subtract(%[[subtract_593]], %[[divide_605]])
// CHECK-NEXT:  %[[constant_611:[^ ]+]] = f32[] constant(9.98436917e-06)
// CHECK-NEXT:  %[[constant_612:[^ ]+]] = f32[] constant(6)
// CHECK-NEXT:  %[[add_613:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_612]])
// CHECK-NEXT:  %[[add_614:[^ ]+]] = f32[] add(%[[add_613]], %[[constant_523]])
// CHECK-NEXT:  %[[add_615:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_612]])
// CHECK-NEXT:  %[[add_616:[^ ]+]] = f32[] add(%[[add_615]], %[[constant_523]])
// CHECK-NEXT:  %[[multiply_617:[^ ]+]] = f32[] multiply(%[[add_614]], %[[add_616]])
// CHECK-NEXT:  %[[divide_618:[^ ]+]] = f32[] divide(%[[constant_611]], %[[multiply_617]])
// CHECK-NEXT:  %[[subtract_619:[^ ]+]] = f32[] subtract(%[[subtract_606]], %[[divide_618]])
// CHECK-NEXT:  %[[constant_624:[^ ]+]] = f32[] constant(1.50563267e-07)
// CHECK-NEXT:  %[[constant_625:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_626:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_625]])
// CHECK-NEXT:  %[[add_627:[^ ]+]] = f32[] add(%[[add_626]], %[[constant_523]])
// CHECK-NEXT:  %[[add_628:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_625]])
// CHECK-NEXT:  %[[add_629:[^ ]+]] = f32[] add(%[[add_628]], %[[constant_523]])
// CHECK-NEXT:  %[[multiply_630:[^ ]+]] = f32[] multiply(%[[add_627]], %[[add_629]])
// CHECK-NEXT:  %[[divide_631:[^ ]+]] = f32[] divide(%[[constant_624]], %[[multiply_630]])
// CHECK-NEXT:  %[[subtract_632:[^ ]+]] = f32[] subtract(%[[subtract_619]], %[[divide_631]])
// CHECK-NEXT:  %[[constant_528:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[add_542:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_534]])
// CHECK-NEXT:  %[[add_543:[^ ]+]] = f32[] add(%[[add_542]], %[[constant_523]])
// CHECK-NEXT:  %[[divide_544:[^ ]+]] = f32[] divide(%[[constant_533]], %[[add_543]])
// CHECK-NEXT:  %[[add_545:[^ ]+]] = f32[] add(%[[constant_528]], %[[divide_544]])
// CHECK-NEXT:  %[[add_555:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_547]])
// CHECK-NEXT:  %[[add_556:[^ ]+]] = f32[] add(%[[add_555]], %[[constant_523]])
// CHECK-NEXT:  %[[divide_557:[^ ]+]] = f32[] divide(%[[constant_546]], %[[add_556]])
// CHECK-NEXT:  %[[add_558:[^ ]+]] = f32[] add(%[[add_545]], %[[divide_557]])
// CHECK-NEXT:  %[[add_568:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_560]])
// CHECK-NEXT:  %[[add_569:[^ ]+]] = f32[] add(%[[add_568]], %[[constant_523]])
// CHECK-NEXT:  %[[divide_570:[^ ]+]] = f32[] divide(%[[constant_559]], %[[add_569]])
// CHECK-NEXT:  %[[add_571:[^ ]+]] = f32[] add(%[[add_558]], %[[divide_570]])
// CHECK-NEXT:  %[[add_581:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_573]])
// CHECK-NEXT:  %[[add_582:[^ ]+]] = f32[] add(%[[add_581]], %[[constant_523]])
// CHECK-NEXT:  %[[divide_583:[^ ]+]] = f32[] divide(%[[constant_572]], %[[add_582]])
// CHECK-NEXT:  %[[add_584:[^ ]+]] = f32[] add(%[[add_571]], %[[divide_583]])
// CHECK-NEXT:  %[[add_594:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_586]])
// CHECK-NEXT:  %[[add_595:[^ ]+]] = f32[] add(%[[add_594]], %[[constant_523]])
// CHECK-NEXT:  %[[divide_596:[^ ]+]] = f32[] divide(%[[constant_585]], %[[add_595]])
// CHECK-NEXT:  %[[add_597:[^ ]+]] = f32[] add(%[[add_584]], %[[divide_596]])
// CHECK-NEXT:  %[[add_607:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_599]])
// CHECK-NEXT:  %[[add_608:[^ ]+]] = f32[] add(%[[add_607]], %[[constant_523]])
// CHECK-NEXT:  %[[divide_609:[^ ]+]] = f32[] divide(%[[constant_598]], %[[add_608]])
// CHECK-NEXT:  %[[add_610:[^ ]+]] = f32[] add(%[[add_597]], %[[divide_609]])
// CHECK-NEXT:  %[[add_620:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_612]])
// CHECK-NEXT:  %[[add_621:[^ ]+]] = f32[] add(%[[add_620]], %[[constant_523]])
// CHECK-NEXT:  %[[divide_622:[^ ]+]] = f32[] divide(%[[constant_611]], %[[add_621]])
// CHECK-NEXT:  %[[add_623:[^ ]+]] = f32[] add(%[[add_610]], %[[divide_622]])
// CHECK-NEXT:  %[[add_633:[^ ]+]] = f32[] add(%[[select_532]], %[[constant_625]])
// CHECK-NEXT:  %[[add_634:[^ ]+]] = f32[] add(%[[add_633]], %[[constant_523]])
// CHECK-NEXT:  %[[divide_635:[^ ]+]] = f32[] divide(%[[constant_624]], %[[add_634]])
// CHECK-NEXT:  %[[add_636:[^ ]+]] = f32[] add(%[[add_623]], %[[divide_635]])
// CHECK-NEXT:  %[[divide_641:[^ ]+]] = f32[] divide(%[[subtract_632]], %[[add_636]])
// CHECK-NEXT:  %[[add_642:[^ ]+]] = f32[] add(%[[add_640]], %[[divide_641]])
// CHECK-NEXT:  %[[constant_525:[^ ]+]] = f32[] constant(7)
// CHECK-NEXT:  %[[add_637:[^ ]+]] = f32[] add(%[[constant_526]], %[[select_532]])
// CHECK-NEXT:  %[[divide_643:[^ ]+]] = f32[] divide(%[[constant_525]], %[[add_637]])
// CHECK-NEXT:  %[[subtract_644:[^ ]+]] = f32[] subtract(%[[add_642]], %[[divide_643]])
// CHECK-NEXT:  %[[constant_524:[^ ]+]] = f32[] constant(3.14159274)
// CHECK-NEXT:  %[[constant_645:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[add_646:[^ ]+]] = f32[] add(%[[add_520]], %[[constant_645]])
// CHECK-NEXT:  %[[floor_647:[^ ]+]] = f32[] floor(%[[add_646]])
// CHECK-NEXT:  %[[abs_648:[^ ]+]] = f32[] abs(%[[floor_647]])
// CHECK-NEXT:  %[[add_649:[^ ]+]] = f32[] add(%[[add_520]], %[[abs_648]])
// CHECK-NEXT:  %[[multiply_650:[^ ]+]] = f32[] multiply(%[[constant_524]], %[[add_649]])
// CHECK-NEXT:  %[[cosine_651:[^ ]+]] = f32[] cosine(%[[multiply_650]])
// CHECK-NEXT:  %[[multiply_652:[^ ]+]] = f32[] multiply(%[[constant_524]], %[[cosine_651]])
// CHECK-NEXT:  %[[multiply_653:[^ ]+]] = f32[] multiply(%[[constant_524]], %[[add_649]])
// CHECK-NEXT:  %[[sine_654:[^ ]+]] = f32[] sine(%[[multiply_653]])
// CHECK-NEXT:  %[[divide_655:[^ ]+]] = f32[] divide(%[[multiply_652]], %[[sine_654]])
// CHECK-NEXT:  %[[subtract_656:[^ ]+]] = f32[] subtract(%[[subtract_644]], %[[divide_655]])
// CHECK-NEXT:  %[[select_657:[^ ]+]] = f32[] select(%[[compare_529]], %[[subtract_656]], %[[subtract_644]])
// CHECK-NEXT:  %[[select_664:[^ ]+]] = f32[] select(%[[and_661]], %[[broadcast_663]], %[[select_657]])
// CHECK-NEXT:  %[[subtract_665:[^ ]+]] = f32[] subtract(%[[log_518]], %[[select_664]])
// CHECK-NEXT:  %[[multiply_666:[^ ]+]] = f32[] multiply(%[[get_tuple_element_514]], %[[subtract_665]])
// CHECK-NEXT:  %[[get_tuple_element_517:[^ ]+]] = f32[] get-tuple-element(%[[while_510]]), index=6
// CHECK-NEXT:  %[[add_667:[^ ]+]] = f32[] add(%[[multiply_666]], %[[get_tuple_element_517]])
// CHECK-NEXT:  %[[multiply_668:[^ ]+]] = f32[] multiply(%[[exponential_119]], %[[add_667]])
// CHECK-NEXT:  %[[divide_669:[^ ]+]] = f32[] divide(%[[multiply_668]], %[[arg0_1]])
// CHECK-NEXT:  %[[select_670:[^ ]+]] = f32[] select(%[[and_16]], %[[negate_448]], %[[divide_669]])
// CHECK-NEXT:  %[[select_673:[^ ]+]] = f32[] select(%[[compare_7]], %[[broadcast_672]], %[[select_670]])
// CHECK-NEXT:  ROOT %[[select_677:[^ ]+]] = f32[] select(%[[or_674]], %[[broadcast_676]], %[[select_673]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[Arg_1_2:[^ ]+]] = f32[] parameter(1)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]], %[[Arg_1_2]]), custom_call_target="xla_builder.math.IgammaGradA"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]], %[[Arg_1_2]]), custom_call_target="xla_builder.math.IgammaGradA", called_computations={%[[$xla_builder_math_IgammaGradA_678]]}

HloModule main, entry_computation_layout={(f32[], f32[])->f32[]}

ENTRY %main.3 (Arg_0.1: f32[], Arg_1.2: f32[]) -> f32[] {
  %Arg_0.1 = f32[] parameter(0)
  %Arg_1.2 = f32[] parameter(1)
  ROOT %custom-call.2 = f32[] custom-call(%Arg_0.1, %Arg_1.2), custom_call_target="xla_builder.math.IgammaGradA"
}