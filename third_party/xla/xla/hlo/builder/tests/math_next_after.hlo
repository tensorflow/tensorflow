// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt --passes=test-only-xla-builder --split-input-file %s | FileCheck %s

// CHECK-LABEL: HloModule main, entry_computation_layout={(f32[], f32[])->f32[]}

// CHECK:       %[[$xla_builder_math_NextAfter_42:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[compare_5:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[arg0_1]]), direction=NE
// CHECK-NEXT:  %[[arg1_2:[^ ]+]] = f32[] parameter(1)
// CHECK-NEXT:  %[[compare_6:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[arg1_2]]), direction=NE
// CHECK-NEXT:  %[[or_7:[^ ]+]] = pred[] or(%[[compare_5]], %[[compare_6]])
// CHECK-NEXT:  %[[constant_8:[^ ]+]] = f32[] constant(nan)
// CHECK-NEXT:  %[[broadcast_9:[^ ]+]] = f32[] broadcast(%[[constant_8]]), dimensions={}
// CHECK-NEXT:  %[[bitcast_convert_10:[^ ]+]] = u32[] bitcast-convert(%[[broadcast_9]])
// CHECK-NEXT:  %[[bitcast_convert_3:[^ ]+]] = u32[] bitcast-convert(%[[arg0_1]])
// CHECK-NEXT:  %[[bitcast_convert_4:[^ ]+]] = u32[] bitcast-convert(%[[arg1_2]])
// CHECK-NEXT:  %[[compare_15:[^ ]+]] = pred[] compare(%[[bitcast_convert_3]], %[[bitcast_convert_4]]), direction=EQ
// CHECK-NEXT:  %[[constant_11:[^ ]+]] = u32[] constant(2147483647)
// CHECK-NEXT:  %[[and_12:[^ ]+]] = u32[] and(%[[bitcast_convert_3]], %[[constant_11]])
// CHECK-NEXT:  %[[constant_16:[^ ]+]] = u32[] constant(0)
// CHECK-NEXT:  %[[broadcast_17:[^ ]+]] = u32[] broadcast(%[[constant_16]]), dimensions={}
// CHECK-NEXT:  %[[compare_18:[^ ]+]] = pred[] compare(%[[and_12]], %[[broadcast_17]]), direction=EQ
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = u32[] constant(2147483647)
// CHECK-NEXT:  %[[and_14:[^ ]+]] = u32[] and(%[[bitcast_convert_4]], %[[constant_13]])
// CHECK-NEXT:  %[[constant_19:[^ ]+]] = u32[] constant(0)
// CHECK-NEXT:  %[[broadcast_20:[^ ]+]] = u32[] broadcast(%[[constant_19]]), dimensions={}
// CHECK-NEXT:  %[[compare_21:[^ ]+]] = pred[] compare(%[[and_14]], %[[broadcast_20]]), direction=EQ
// CHECK-NEXT:  %[[constant_24:[^ ]+]] = u32[] constant(2147483648)
// CHECK-NEXT:  %[[and_25:[^ ]+]] = u32[] and(%[[bitcast_convert_4]], %[[constant_24]])
// CHECK-NEXT:  %[[constant_26:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[or_27:[^ ]+]] = u32[] or(%[[and_25]], %[[constant_26]])
// CHECK-NEXT:  %[[select_37:[^ ]+]] = u32[] select(%[[compare_21]], %[[bitcast_convert_4]], %[[or_27]])
// CHECK-NEXT:  %[[compare_29:[^ ]+]] = pred[] compare(%[[and_12]], %[[and_14]]), direction=GT
// CHECK-NEXT:  %[[constant_22:[^ ]+]] = u32[] constant(2147483648)
// CHECK-NEXT:  %[[and_23:[^ ]+]] = u32[] and(%[[bitcast_convert_3]], %[[constant_22]])
// CHECK-NEXT:  %[[compare_28:[^ ]+]] = pred[] compare(%[[and_23]], %[[and_25]]), direction=NE
// CHECK-NEXT:  %[[or_30:[^ ]+]] = pred[] or(%[[compare_29]], %[[compare_28]])
// CHECK-NEXT:  %[[constant_31:[^ ]+]] = u32[] constant(4294967295)
// CHECK-NEXT:  %[[broadcast_32:[^ ]+]] = u32[] broadcast(%[[constant_31]]), dimensions={}
// CHECK-NEXT:  %[[constant_33:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[broadcast_34:[^ ]+]] = u32[] broadcast(%[[constant_33]]), dimensions={}
// CHECK-NEXT:  %[[select_35:[^ ]+]] = u32[] select(%[[or_30]], %[[broadcast_32]], %[[broadcast_34]])
// CHECK-NEXT:  %[[add_36:[^ ]+]] = u32[] add(%[[bitcast_convert_3]], %[[select_35]])
// CHECK-NEXT:  %[[select_38:[^ ]+]] = u32[] select(%[[compare_18]], %[[select_37]], %[[add_36]])
// CHECK-NEXT:  %[[select_39:[^ ]+]] = u32[] select(%[[compare_15]], %[[bitcast_convert_4]], %[[select_38]])
// CHECK-NEXT:  %[[select_40:[^ ]+]] = u32[] select(%[[or_7]], %[[bitcast_convert_10]], %[[select_39]])
// CHECK-NEXT:  ROOT %[[bitcast_convert_41:[^ ]+]] = f32[] bitcast-convert(%[[select_40]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[Arg_1_2:[^ ]+]] = f32[] parameter(1)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]], %[[Arg_1_2]]), custom_call_target="xla_builder.math.NextAfter"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]], %[[Arg_1_2]]), custom_call_target="xla_builder.math.NextAfter", called_computations={%[[$xla_builder_math_NextAfter_42]]}

HloModule main, entry_computation_layout={(f32[], f32[])->f32[]}

ENTRY %main.3 (Arg_0.1: f32[], Arg_1.2: f32[]) -> f32[] {
  %Arg_0.1 = f32[] parameter(0)
  %Arg_1.2 = f32[] parameter(1)
  ROOT %custom-call.2 = f32[] custom-call(%Arg_0.1, %Arg_1.2), custom_call_target="xla_builder.math.NextAfter"
}

// -----

// CHECK-LABEL: HloModule next_after_f8e5m2fnuz, entry_computation_layout={(f32[], f32[])->f32[]}

// CHECK:       %[[$xla_builder_math_NextAfter_50:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f8e5m2fnuz[] parameter(0)
// CHECK-NEXT:  %[[compare_5:[^ ]+]] = pred[] compare(%[[arg0_1]], %[[arg0_1]]), direction=NE
// CHECK-NEXT:  %[[arg1_2:[^ ]+]] = f8e5m2fnuz[] parameter(1)
// CHECK-NEXT:  %[[compare_6:[^ ]+]] = pred[] compare(%[[arg1_2]], %[[arg1_2]]), direction=NE
// CHECK-NEXT:  %[[or_7:[^ ]+]] = pred[] or(%[[compare_5]], %[[compare_6]])
// CHECK-NEXT:  %[[constant_8:[^ ]+]] = f8e5m2fnuz[] constant(-nan)
// CHECK-NEXT:  %[[broadcast_9:[^ ]+]] = f8e5m2fnuz[] broadcast(%[[constant_8]]), dimensions={}
// CHECK-NEXT:  %[[bitcast_convert_10:[^ ]+]] = u8[] bitcast-convert(%[[broadcast_9]])
// CHECK-NEXT:  %[[bitcast_convert_3:[^ ]+]] = u8[] bitcast-convert(%[[arg0_1]])
// CHECK-NEXT:  %[[bitcast_convert_4:[^ ]+]] = u8[] bitcast-convert(%[[arg1_2]])
// CHECK-NEXT:  %[[compare_15:[^ ]+]] = pred[] compare(%[[bitcast_convert_3]], %[[bitcast_convert_4]]), direction=EQ
// CHECK-NEXT:  %[[constant_11:[^ ]+]] = u8[] constant(127)
// CHECK-NEXT:  %[[and_12:[^ ]+]] = u8[] and(%[[bitcast_convert_3]], %[[constant_11]])
// CHECK-NEXT:  %[[constant_16:[^ ]+]] = u8[] constant(0)
// CHECK-NEXT:  %[[broadcast_17:[^ ]+]] = u8[] broadcast(%[[constant_16]]), dimensions={}
// CHECK-NEXT:  %[[compare_18:[^ ]+]] = pred[] compare(%[[and_12]], %[[broadcast_17]]), direction=EQ
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = u8[] constant(127)
// CHECK-NEXT:  %[[and_14:[^ ]+]] = u8[] and(%[[bitcast_convert_4]], %[[constant_13]])
// CHECK-NEXT:  %[[constant_19:[^ ]+]] = u8[] constant(0)
// CHECK-NEXT:  %[[broadcast_20:[^ ]+]] = u8[] broadcast(%[[constant_19]]), dimensions={}
// CHECK-NEXT:  %[[compare_21:[^ ]+]] = pred[] compare(%[[and_14]], %[[broadcast_20]]), direction=EQ
// CHECK-NEXT:  %[[constant_24:[^ ]+]] = u8[] constant(128)
// CHECK-NEXT:  %[[and_25:[^ ]+]] = u8[] and(%[[bitcast_convert_4]], %[[constant_24]])
// CHECK-NEXT:  %[[constant_26:[^ ]+]] = u8[] constant(1)
// CHECK-NEXT:  %[[or_27:[^ ]+]] = u8[] or(%[[and_25]], %[[constant_26]])
// CHECK-NEXT:  %[[select_45:[^ ]+]] = u8[] select(%[[compare_21]], %[[bitcast_convert_4]], %[[or_27]])
// CHECK-NEXT:  %[[constant_39:[^ ]+]] = u8[] constant(129)
// CHECK-NEXT:  %[[compare_40:[^ ]+]] = pred[] compare(%[[bitcast_convert_3]], %[[constant_39]]), direction=EQ
// CHECK-NEXT:  %[[convert_37:[^ ]+]] = pred[] convert(%[[and_25]])
// CHECK-NEXT:  %[[not_38:[^ ]+]] = pred[] not(%[[convert_37]])
// CHECK-NEXT:  %[[and_41:[^ ]+]] = pred[] and(%[[compare_40]], %[[not_38]])
// CHECK-NEXT:  %[[constant_42:[^ ]+]] = u8[] constant(0)
// CHECK-NEXT:  %[[broadcast_43:[^ ]+]] = u8[] broadcast(%[[constant_42]]), dimensions={}
// CHECK-NEXT:  %[[compare_29:[^ ]+]] = pred[] compare(%[[and_12]], %[[and_14]]), direction=GT
// CHECK-NEXT:  %[[constant_22:[^ ]+]] = u8[] constant(128)
// CHECK-NEXT:  %[[and_23:[^ ]+]] = u8[] and(%[[bitcast_convert_3]], %[[constant_22]])
// CHECK-NEXT:  %[[compare_28:[^ ]+]] = pred[] compare(%[[and_23]], %[[and_25]]), direction=NE
// CHECK-NEXT:  %[[or_30:[^ ]+]] = pred[] or(%[[compare_29]], %[[compare_28]])
// CHECK-NEXT:  %[[constant_31:[^ ]+]] = u8[] constant(255)
// CHECK-NEXT:  %[[broadcast_32:[^ ]+]] = u8[] broadcast(%[[constant_31]]), dimensions={}
// CHECK-NEXT:  %[[constant_33:[^ ]+]] = u8[] constant(1)
// CHECK-NEXT:  %[[broadcast_34:[^ ]+]] = u8[] broadcast(%[[constant_33]]), dimensions={}
// CHECK-NEXT:  %[[select_35:[^ ]+]] = u8[] select(%[[or_30]], %[[broadcast_32]], %[[broadcast_34]])
// CHECK-NEXT:  %[[add_36:[^ ]+]] = u8[] add(%[[bitcast_convert_3]], %[[select_35]])
// CHECK-NEXT:  %[[select_44:[^ ]+]] = u8[] select(%[[and_41]], %[[broadcast_43]], %[[add_36]])
// CHECK-NEXT:  %[[select_46:[^ ]+]] = u8[] select(%[[compare_18]], %[[select_45]], %[[select_44]])
// CHECK-NEXT:  %[[select_47:[^ ]+]] = u8[] select(%[[compare_15]], %[[bitcast_convert_4]], %[[select_46]])
// CHECK-NEXT:  %[[select_48:[^ ]+]] = u8[] select(%[[or_7]], %[[bitcast_convert_10]], %[[select_47]])
// CHECK-NEXT:  ROOT %[[bitcast_convert_49:[^ ]+]] = f8e5m2fnuz[] bitcast-convert(%[[select_48]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f8e5m2fnuz[] parameter(0)
// CHECK-NEXT:  %[[Arg_1_2:[^ ]+]] = f8e5m2fnuz[] parameter(1)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f8e5m2fnuz[] custom-call(%[[Arg_0_1]], %[[Arg_1_2]]), custom_call_target="xla_builder.math.NextAfter"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f8e5m2fnuz[] custom-call(%[[Arg_0_1]], %[[Arg_1_2]]), custom_call_target="xla_builder.math.NextAfter", called_computations={%[[$xla_builder_math_NextAfter_50]]}

HloModule next_after_f8e5m2fnuz, entry_computation_layout={(f32[], f32[])->f32[]}

ENTRY %main.3 (Arg_0.1: f8e5m2fnuz[], Arg_1.2: f8e5m2fnuz[]) -> f8e5m2fnuz[] {
  %Arg_0.1 = f8e5m2fnuz[] parameter(0)
  %Arg_1.2 = f8e5m2fnuz[] parameter(1)
  ROOT %custom-call.2 = f8e5m2fnuz[] custom-call(%Arg_0.1, %Arg_1.2), custom_call_target="xla_builder.math.NextAfter"
}
