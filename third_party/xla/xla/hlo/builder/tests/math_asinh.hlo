// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt --passes=test-only-xla-builder --split-input-file %s | FileCheck %s

// CHECK-LABEL: HloModule asinh_f32, entry_computation_layout={(f32[])->f32[]}

// CHECK:       %[[$xla_builder_math_Asinh_30:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[sign_24:[^ ]+]] = f32[] sign(%[[arg0_1]])
// CHECK-NEXT:  %[[abs_3:[^ ]+]] = f32[] abs(%[[arg0_1]])
// CHECK-NEXT:  %[[constant_22:[^ ]+]] = f32[] constant(3.40282347e+38)
// CHECK-NEXT:  %[[sqrt_23:[^ ]+]] = f32[] sqrt(%[[constant_22]])
// CHECK-NEXT:  %[[compare_25:[^ ]+]] = pred[] compare(%[[abs_3]], %[[sqrt_23]]), direction=GE
// CHECK-NEXT:  %[[abs_17:[^ ]+]] = f32[] abs(%[[abs_3]])
// CHECK-NEXT:  %[[log_18:[^ ]+]] = f32[] log(%[[abs_17]])
// CHECK-NEXT:  %[[constant_19:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[log_20:[^ ]+]] = f32[] log(%[[constant_19]])
// CHECK-NEXT:  %[[add_21:[^ ]+]] = f32[] add(%[[log_18]], %[[log_20]])
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[compare_26:[^ ]+]] = pred[] compare(%[[abs_3]], %[[constant_2]]), direction=LE
// CHECK-NEXT:  %[[multiply_4:[^ ]+]] = f32[] multiply(%[[abs_3]], %[[abs_3]])
// CHECK-NEXT:  %[[multiply_5:[^ ]+]] = f32[] multiply(%[[abs_3]], %[[abs_3]])
// CHECK-NEXT:  %[[add_6:[^ ]+]] = f32[] add(%[[multiply_5]], %[[constant_2]])
// CHECK-NEXT:  %[[sqrt_7:[^ ]+]] = f32[] sqrt(%[[add_6]])
// CHECK-NEXT:  %[[add_8:[^ ]+]] = f32[] add(%[[constant_2]], %[[sqrt_7]])
// CHECK-NEXT:  %[[divide_9:[^ ]+]] = f32[] divide(%[[multiply_4]], %[[add_8]])
// CHECK-NEXT:  %[[add_10:[^ ]+]] = f32[] add(%[[abs_3]], %[[divide_9]])
// CHECK-NEXT:  %[[log_plus_one_11:[^ ]+]] = f32[] log-plus-one(%[[add_10]])
// CHECK-NEXT:  %[[multiply_12:[^ ]+]] = f32[] multiply(%[[abs_3]], %[[abs_3]])
// CHECK-NEXT:  %[[add_13:[^ ]+]] = f32[] add(%[[multiply_12]], %[[constant_2]])
// CHECK-NEXT:  %[[sqrt_14:[^ ]+]] = f32[] sqrt(%[[add_13]])
// CHECK-NEXT:  %[[add_15:[^ ]+]] = f32[] add(%[[abs_3]], %[[sqrt_14]])
// CHECK-NEXT:  %[[log_16:[^ ]+]] = f32[] log(%[[add_15]])
// CHECK-NEXT:  %[[select_27:[^ ]+]] = f32[] select(%[[compare_26]], %[[log_plus_one_11]], %[[log_16]])
// CHECK-NEXT:  %[[select_28:[^ ]+]] = f32[] select(%[[compare_25]], %[[add_21]], %[[select_27]])
// CHECK-NEXT:  ROOT %[[multiply_29:[^ ]+]] = f32[] multiply(%[[sign_24]], %[[select_28]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f32[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asinh"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f32[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asinh", called_computations={%[[$xla_builder_math_Asinh_30]]}

HloModule asinh_f32, entry_computation_layout={(f32[])->f32[]}

ENTRY %main.3 (Arg_0.1: f32[]) -> f32[] {
  %Arg_0.1 = f32[] parameter(0)
  ROOT %custom-call.2 = f32[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Asinh"
}

// -----

// CHECK-LABEL: HloModule asinh_f64, entry_computation_layout={(f64[])->f64[]}

// CHECK:       %[[$xla_builder_math_Asinh_30:[^ ]+]]
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = f64[] parameter(0)
// CHECK-NEXT:  %[[sign_24:[^ ]+]] = f64[] sign(%[[arg0_1]])
// CHECK-NEXT:  %[[abs_3:[^ ]+]] = f64[] abs(%[[arg0_1]])
// CHECK-NEXT:  %[[constant_22:[^ ]+]] = f64[] constant(1.7976931348623157e+308)
// CHECK-NEXT:  %[[sqrt_23:[^ ]+]] = f64[] sqrt(%[[constant_22]])
// CHECK-NEXT:  %[[compare_25:[^ ]+]] = pred[] compare(%[[abs_3]], %[[sqrt_23]]), direction=GE
// CHECK-NEXT:  %[[abs_17:[^ ]+]] = f64[] abs(%[[abs_3]])
// CHECK-NEXT:  %[[log_18:[^ ]+]] = f64[] log(%[[abs_17]])
// CHECK-NEXT:  %[[constant_19:[^ ]+]] = f64[] constant(2)
// CHECK-NEXT:  %[[log_20:[^ ]+]] = f64[] log(%[[constant_19]])
// CHECK-NEXT:  %[[add_21:[^ ]+]] = f64[] add(%[[log_18]], %[[log_20]])
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = f64[] constant(1)
// CHECK-NEXT:  %[[compare_26:[^ ]+]] = pred[] compare(%[[abs_3]], %[[constant_2]]), direction=LE
// CHECK-NEXT:  %[[multiply_4:[^ ]+]] = f64[] multiply(%[[abs_3]], %[[abs_3]])
// CHECK-NEXT:  %[[multiply_5:[^ ]+]] = f64[] multiply(%[[abs_3]], %[[abs_3]])
// CHECK-NEXT:  %[[add_6:[^ ]+]] = f64[] add(%[[multiply_5]], %[[constant_2]])
// CHECK-NEXT:  %[[sqrt_7:[^ ]+]] = f64[] sqrt(%[[add_6]])
// CHECK-NEXT:  %[[add_8:[^ ]+]] = f64[] add(%[[constant_2]], %[[sqrt_7]])
// CHECK-NEXT:  %[[divide_9:[^ ]+]] = f64[] divide(%[[multiply_4]], %[[add_8]])
// CHECK-NEXT:  %[[add_10:[^ ]+]] = f64[] add(%[[abs_3]], %[[divide_9]])
// CHECK-NEXT:  %[[log_plus_one_11:[^ ]+]] = f64[] log-plus-one(%[[add_10]])
// CHECK-NEXT:  %[[multiply_12:[^ ]+]] = f64[] multiply(%[[abs_3]], %[[abs_3]])
// CHECK-NEXT:  %[[add_13:[^ ]+]] = f64[] add(%[[multiply_12]], %[[constant_2]])
// CHECK-NEXT:  %[[sqrt_14:[^ ]+]] = f64[] sqrt(%[[add_13]])
// CHECK-NEXT:  %[[add_15:[^ ]+]] = f64[] add(%[[abs_3]], %[[sqrt_14]])
// CHECK-NEXT:  %[[log_16:[^ ]+]] = f64[] log(%[[add_15]])
// CHECK-NEXT:  %[[select_27:[^ ]+]] = f64[] select(%[[compare_26]], %[[log_plus_one_11]], %[[log_16]])
// CHECK-NEXT:  %[[select_28:[^ ]+]] = f64[] select(%[[compare_25]], %[[add_21]], %[[select_27]])
// CHECK-NEXT:  ROOT %[[multiply_29:[^ ]+]] = f64[] multiply(%[[sign_24]], %[[select_28]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = f64[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = f64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asinh"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = f64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asinh", called_computations={%[[$xla_builder_math_Asinh_30]]}

HloModule asinh_f64, entry_computation_layout={(f64[])->f64[]}

ENTRY %main.3 (Arg_0.1: f64[]) -> f64[] {
  %Arg_0.1 = f64[] parameter(0)
  ROOT %custom-call.2 = f64[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Asinh"
}

// -----

// CHECK-LABEL: HloModule asinh_complex64, entry_computation_layout={(c64[])->c64[]}

// CHECK:       %[[$xla_builder_math_Asinh_143:[^ ]+]]
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = c64[] constant((1, 0))
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = c64[] parameter(0)
// CHECK-NEXT:  %[[real_3:[^ ]+]] = f32[] real(%[[arg0_1]])
// CHECK-NEXT:  %[[constant_133:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_134:[^ ]+]] = pred[] compare(%[[real_3]], %[[constant_133]]), direction=EQ
// CHECK-NEXT:  %[[imag_4:[^ ]+]] = f32[] imag(%[[arg0_1]])
// CHECK-NEXT:  %[[abs_135:[^ ]+]] = f32[] abs(%[[imag_4]])
// CHECK-NEXT:  %[[constant_136:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[compare_137:[^ ]+]] = pred[] compare(%[[abs_135]], %[[constant_136]]), direction=GT
// CHECK-NEXT:  %[[and_138:[^ ]+]] = pred[] and(%[[compare_134]], %[[compare_137]])
// CHECK-NEXT:  %[[negate_5:[^ ]+]] = f32[] negate(%[[real_3]])
// CHECK-NEXT:  %[[complex_6:[^ ]+]] = c64[] complex(%[[imag_4]], %[[negate_5]])
// CHECK-NEXT:  %[[real_7:[^ ]+]] = f32[] real(%[[complex_6]])
// CHECK-NEXT:  %[[abs_8:[^ ]+]] = f32[] abs(%[[real_7]])
// CHECK-NEXT:  %[[imag_9:[^ ]+]] = f32[] imag(%[[complex_6]])
// CHECK-NEXT:  %[[abs_10:[^ ]+]] = f32[] abs(%[[imag_9]])
// CHECK-NEXT:  %[[maximum_63:[^ ]+]] = f32[] maximum(%[[abs_8]], %[[abs_10]])
// CHECK-NEXT:  %[[constant_11:[^ ]+]] = f32[] constant(2.30584287e+18)
// CHECK-NEXT:  %[[compare_64:[^ ]+]] = pred[] compare(%[[maximum_63]], %[[constant_11]]), direction=GE
// CHECK-NEXT:  %[[constant_12:[^ ]+]] = f32[] constant(1)
// CHECK-NEXT:  %[[compare_65:[^ ]+]] = pred[] compare(%[[abs_8]], %[[constant_12]]), direction=LE
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = f32[] constant(0.5)
// CHECK-NEXT:  %[[add_14:[^ ]+]] = f32[] add(%[[abs_8]], %[[constant_12]])
// CHECK-NEXT:  %[[abs_15:[^ ]+]] = f32[] abs(%[[add_14]])
// CHECK-NEXT:  %[[maximum_16:[^ ]+]] = f32[] maximum(%[[abs_15]], %[[abs_10]])
// CHECK-NEXT:  %[[minimum_17:[^ ]+]] = f32[] minimum(%[[abs_15]], %[[abs_10]])
// CHECK-NEXT:  %[[compare_25:[^ ]+]] = pred[] compare(%[[maximum_16]], %[[minimum_17]]), direction=EQ
// CHECK-NEXT:  %[[constant_18:[^ ]+]] = f32[] constant(1.41421354)
// CHECK-NEXT:  %[[multiply_26:[^ ]+]] = f32[] multiply(%[[constant_18]], %[[maximum_16]])
// CHECK-NEXT:  %[[divide_19:[^ ]+]] = f32[] divide(%[[minimum_17]], %[[maximum_16]])
// CHECK-NEXT:  %[[multiply_20:[^ ]+]] = f32[] multiply(%[[divide_19]], %[[divide_19]])
// CHECK-NEXT:  %[[add_21:[^ ]+]] = f32[] add(%[[constant_12]], %[[multiply_20]])
// CHECK-NEXT:  %[[sqrt_22:[^ ]+]] = f32[] sqrt(%[[add_21]])
// CHECK-NEXT:  %[[compare_27:[^ ]+]] = pred[] compare(%[[sqrt_22]], %[[constant_12]]), direction=EQ
// CHECK-NEXT:  %[[constant_23:[^ ]+]] = f32[] constant(0)
// CHECK-NEXT:  %[[compare_28:[^ ]+]] = pred[] compare(%[[multiply_20]], %[[constant_23]]), direction=GT
// CHECK-NEXT:  %[[and_29:[^ ]+]] = pred[] and(%[[compare_27]], %[[compare_28]])
// CHECK-NEXT:  %[[multiply_30:[^ ]+]] = f32[] multiply(%[[maximum_16]], %[[multiply_20]])
// CHECK-NEXT:  %[[constant_24:[^ ]+]] = f32[] constant(2)
// CHECK-NEXT:  %[[divide_31:[^ ]+]] = f32[] divide(%[[multiply_30]], %[[constant_24]])
// CHECK-NEXT:  %[[add_32:[^ ]+]] = f32[] add(%[[maximum_16]], %[[divide_31]])
// CHECK-NEXT:  %[[multiply_33:[^ ]+]] = f32[] multiply(%[[maximum_16]], %[[sqrt_22]])
// CHECK-NEXT:  %[[select_34:[^ ]+]] = f32[] select(%[[and_29]], %[[add_32]], %[[multiply_33]])
// CHECK-NEXT:  %[[select_35:[^ ]+]] = f32[] select(%[[compare_25]], %[[multiply_26]], %[[select_34]])
// CHECK-NEXT:  %[[subtract_36:[^ ]+]] = f32[] subtract(%[[abs_8]], %[[constant_12]])
// CHECK-NEXT:  %[[abs_37:[^ ]+]] = f32[] abs(%[[subtract_36]])
// CHECK-NEXT:  %[[maximum_38:[^ ]+]] = f32[] maximum(%[[abs_37]], %[[abs_10]])
// CHECK-NEXT:  %[[minimum_39:[^ ]+]] = f32[] minimum(%[[abs_37]], %[[abs_10]])
// CHECK-NEXT:  %[[compare_44:[^ ]+]] = pred[] compare(%[[maximum_38]], %[[minimum_39]]), direction=EQ
// CHECK-NEXT:  %[[multiply_45:[^ ]+]] = f32[] multiply(%[[constant_18]], %[[maximum_38]])
// CHECK-NEXT:  %[[divide_40:[^ ]+]] = f32[] divide(%[[minimum_39]], %[[maximum_38]])
// CHECK-NEXT:  %[[multiply_41:[^ ]+]] = f32[] multiply(%[[divide_40]], %[[divide_40]])
// CHECK-NEXT:  %[[add_42:[^ ]+]] = f32[] add(%[[constant_12]], %[[multiply_41]])
// CHECK-NEXT:  %[[sqrt_43:[^ ]+]] = f32[] sqrt(%[[add_42]])
// CHECK-NEXT:  %[[compare_46:[^ ]+]] = pred[] compare(%[[sqrt_43]], %[[constant_12]]), direction=EQ
// CHECK-NEXT:  %[[compare_47:[^ ]+]] = pred[] compare(%[[multiply_41]], %[[constant_23]]), direction=GT
// CHECK-NEXT:  %[[and_48:[^ ]+]] = pred[] and(%[[compare_46]], %[[compare_47]])
// CHECK-NEXT:  %[[multiply_49:[^ ]+]] = f32[] multiply(%[[maximum_38]], %[[multiply_41]])
// CHECK-NEXT:  %[[divide_50:[^ ]+]] = f32[] divide(%[[multiply_49]], %[[constant_24]])
// CHECK-NEXT:  %[[add_51:[^ ]+]] = f32[] add(%[[maximum_38]], %[[divide_50]])
// CHECK-NEXT:  %[[multiply_52:[^ ]+]] = f32[] multiply(%[[maximum_38]], %[[sqrt_43]])
// CHECK-NEXT:  %[[select_53:[^ ]+]] = f32[] select(%[[and_48]], %[[add_51]], %[[multiply_52]])
// CHECK-NEXT:  %[[select_54:[^ ]+]] = f32[] select(%[[compare_44]], %[[multiply_45]], %[[select_53]])
// CHECK-NEXT:  %[[add_55:[^ ]+]] = f32[] add(%[[select_35]], %[[select_54]])
// CHECK-NEXT:  %[[multiply_56:[^ ]+]] = f32[] multiply(%[[constant_13]], %[[add_55]])
// CHECK-NEXT:  %[[add_57:[^ ]+]] = f32[] add(%[[multiply_56]], %[[abs_8]])
// CHECK-NEXT:  %[[multiply_58:[^ ]+]] = f32[] multiply(%[[constant_13]], %[[add_57]])
// CHECK-NEXT:  %[[multiply_59:[^ ]+]] = f32[] multiply(%[[abs_10]], %[[abs_10]])
// CHECK-NEXT:  %[[add_60:[^ ]+]] = f32[] add(%[[select_35]], %[[add_14]])
// CHECK-NEXT:  %[[divide_66:[^ ]+]] = f32[] divide(%[[multiply_59]], %[[add_60]])
// CHECK-NEXT:  %[[subtract_61:[^ ]+]] = f32[] subtract(%[[select_54]], %[[subtract_36]])
// CHECK-NEXT:  %[[add_67:[^ ]+]] = f32[] add(%[[divide_66]], %[[subtract_61]])
// CHECK-NEXT:  %[[multiply_68:[^ ]+]] = f32[] multiply(%[[multiply_58]], %[[add_67]])
// CHECK-NEXT:  %[[sqrt_69:[^ ]+]] = f32[] sqrt(%[[multiply_68]])
// CHECK-NEXT:  %[[divide_70:[^ ]+]] = f32[] divide(%[[multiply_58]], %[[add_60]])
// CHECK-NEXT:  %[[add_62:[^ ]+]] = f32[] add(%[[select_54]], %[[subtract_36]])
// CHECK-NEXT:  %[[divide_71:[^ ]+]] = f32[] divide(%[[multiply_58]], %[[add_62]])
// CHECK-NEXT:  %[[add_72:[^ ]+]] = f32[] add(%[[divide_70]], %[[divide_71]])
// CHECK-NEXT:  %[[sqrt_73:[^ ]+]] = f32[] sqrt(%[[add_72]])
// CHECK-NEXT:  %[[multiply_74:[^ ]+]] = f32[] multiply(%[[abs_10]], %[[sqrt_73]])
// CHECK-NEXT:  %[[select_75:[^ ]+]] = f32[] select(%[[compare_65]], %[[sqrt_69]], %[[multiply_74]])
// CHECK-NEXT:  %[[select_76:[^ ]+]] = f32[] select(%[[compare_64]], %[[abs_10]], %[[select_75]])
// CHECK-NEXT:  %[[atan2_77:[^ ]+]] = f32[] atan2(%[[real_7]], %[[select_76]])
// CHECK-NEXT:  %[[compare_128:[^ ]+]] = pred[] compare(%[[imag_9]], %[[constant_23]]), direction=LT
// CHECK-NEXT:  %[[constant_78:[^ ]+]] = f32[] constant(2.30584285e+30)
// CHECK-NEXT:  %[[compare_79:[^ ]+]] = pred[] compare(%[[abs_8]], %[[constant_78]]), direction=LT
// CHECK-NEXT:  %[[constant_80:[^ ]+]] = f32[] constant(2.30584274e+12)
// CHECK-NEXT:  %[[constant_81:[^ ]+]] = f32[] constant(2.30584283e+20)
// CHECK-NEXT:  %[[select_82:[^ ]+]] = f32[] select(%[[compare_79]], %[[constant_80]], %[[constant_81]])
// CHECK-NEXT:  %[[compare_83:[^ ]+]] = pred[] compare(%[[abs_10]], %[[select_82]]), direction=GE
// CHECK-NEXT:  %[[select_84:[^ ]+]] = f32[] select(%[[compare_83]], %[[abs_10]], %[[abs_8]])
// CHECK-NEXT:  %[[select_114:[^ ]+]] = f32[] select(%[[compare_83]], %[[select_82]], %[[constant_11]])
// CHECK-NEXT:  %[[compare_115:[^ ]+]] = pred[] compare(%[[select_84]], %[[select_114]]), direction=GE
// CHECK-NEXT:  %[[constant_116:[^ ]+]] = f32[] constant(0.693147182)
// CHECK-NEXT:  %[[log_117:[^ ]+]] = f32[] log(%[[select_84]])
// CHECK-NEXT:  %[[add_118:[^ ]+]] = f32[] add(%[[constant_116]], %[[log_117]])
// CHECK-NEXT:  %[[constant_85:[^ ]+]] = f32[] constant(inf)
// CHECK-NEXT:  %[[compare_86:[^ ]+]] = pred[] compare(%[[abs_10]], %[[constant_85]]), direction=EQ
// CHECK-NEXT:  %[[not_87:[^ ]+]] = pred[] not(%[[compare_86]])
// CHECK-NEXT:  %[[and_88:[^ ]+]] = pred[] and(%[[compare_83]], %[[not_87]])
// CHECK-NEXT:  %[[divide_89:[^ ]+]] = f32[] divide(%[[abs_8]], %[[abs_10]])
// CHECK-NEXT:  %[[select_90:[^ ]+]] = f32[] select(%[[and_88]], %[[divide_89]], %[[constant_23]])
// CHECK-NEXT:  %[[multiply_119:[^ ]+]] = f32[] multiply(%[[select_90]], %[[select_90]])
// CHECK-NEXT:  %[[log_plus_one_120:[^ ]+]] = f32[] log-plus-one(%[[multiply_119]])
// CHECK-NEXT:  %[[multiply_121:[^ ]+]] = f32[] multiply(%[[constant_13]], %[[log_plus_one_120]])
// CHECK-NEXT:  %[[add_122:[^ ]+]] = f32[] add(%[[add_118]], %[[multiply_121]])
// CHECK-NEXT:  %[[constant_91:[^ ]+]] = f32[] constant(4.33680869e-19)
// CHECK-NEXT:  %[[compare_92:[^ ]+]] = pred[] compare(%[[abs_10]], %[[constant_91]]), direction=LT
// CHECK-NEXT:  %[[compare_93:[^ ]+]] = pred[] compare(%[[abs_8]], %[[constant_12]]), direction=LT
// CHECK-NEXT:  %[[and_94:[^ ]+]] = pred[] and(%[[compare_92]], %[[compare_93]])
// CHECK-NEXT:  %[[multiply_108:[^ ]+]] = f32[] multiply(%[[add_14]], %[[subtract_36]])
// CHECK-NEXT:  %[[add_95:[^ ]+]] = f32[] add(%[[multiply_56]], %[[constant_12]])
// CHECK-NEXT:  %[[divide_109:[^ ]+]] = f32[] divide(%[[multiply_108]], %[[add_95]])
// CHECK-NEXT:  %[[negate_110:[^ ]+]] = f32[] negate(%[[divide_109]])
// CHECK-NEXT:  %[[compare_98:[^ ]+]] = pred[] compare(%[[abs_8]], %[[constant_12]]), direction=GE
// CHECK-NEXT:  %[[multiply_96:[^ ]+]] = f32[] multiply(%[[constant_13]], %[[multiply_59]])
// CHECK-NEXT:  %[[divide_97:[^ ]+]] = f32[] divide(%[[multiply_96]], %[[add_60]])
// CHECK-NEXT:  %[[multiply_99:[^ ]+]] = f32[] multiply(%[[constant_13]], %[[add_62]])
// CHECK-NEXT:  %[[add_100:[^ ]+]] = f32[] add(%[[divide_97]], %[[multiply_99]])
// CHECK-NEXT:  %[[constant_101:[^ ]+]] = f32[] constant(1.5)
// CHECK-NEXT:  %[[compare_102:[^ ]+]] = pred[] compare(%[[multiply_56]], %[[constant_101]]), direction=LE
// CHECK-NEXT:  %[[divide_103:[^ ]+]] = f32[] divide(%[[multiply_96]], %[[subtract_61]])
// CHECK-NEXT:  %[[add_104:[^ ]+]] = f32[] add(%[[divide_97]], %[[divide_103]])
// CHECK-NEXT:  %[[subtract_105:[^ ]+]] = f32[] subtract(%[[multiply_56]], %[[constant_12]])
// CHECK-NEXT:  %[[select_106:[^ ]+]] = f32[] select(%[[compare_102]], %[[add_104]], %[[subtract_105]])
// CHECK-NEXT:  %[[select_107:[^ ]+]] = f32[] select(%[[compare_98]], %[[add_100]], %[[select_106]])
// CHECK-NEXT:  %[[select_111:[^ ]+]] = f32[] select(%[[and_94]], %[[negate_110]], %[[select_107]])
// CHECK-NEXT:  %[[multiply_112:[^ ]+]] = f32[] multiply(%[[select_111]], %[[add_95]])
// CHECK-NEXT:  %[[sqrt_113:[^ ]+]] = f32[] sqrt(%[[multiply_112]])
// CHECK-NEXT:  %[[divide_123:[^ ]+]] = f32[] divide(%[[abs_10]], %[[sqrt_113]])
// CHECK-NEXT:  %[[add_124:[^ ]+]] = f32[] add(%[[select_111]], %[[sqrt_113]])
// CHECK-NEXT:  %[[log_plus_one_125:[^ ]+]] = f32[] log-plus-one(%[[add_124]])
// CHECK-NEXT:  %[[select_126:[^ ]+]] = f32[] select(%[[and_94]], %[[divide_123]], %[[log_plus_one_125]])
// CHECK-NEXT:  %[[select_127:[^ ]+]] = f32[] select(%[[compare_115]], %[[add_122]], %[[select_126]])
// CHECK-NEXT:  %[[negate_129:[^ ]+]] = f32[] negate(%[[select_127]])
// CHECK-NEXT:  %[[select_130:[^ ]+]] = f32[] select(%[[compare_128]], %[[negate_129]], %[[select_127]])
// CHECK-NEXT:  %[[complex_131:[^ ]+]] = c64[] complex(%[[atan2_77]], %[[select_130]])
// CHECK-NEXT:  %[[imag_132:[^ ]+]] = f32[] imag(%[[complex_131]])
// CHECK-NEXT:  %[[negate_139:[^ ]+]] = f32[] negate(%[[imag_132]])
// CHECK-NEXT:  %[[select_140:[^ ]+]] = f32[] select(%[[and_138]], %[[imag_132]], %[[negate_139]])
// CHECK-NEXT:  %[[real_141:[^ ]+]] = f32[] real(%[[complex_131]])
// CHECK-NEXT:  ROOT %[[complex_142:[^ ]+]] = c64[] complex(%[[select_140]], %[[real_141]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = c64[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = c64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asinh"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = c64[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asinh", called_computations={%[[$xla_builder_math_Asinh_143]]}

HloModule asinh_complex64, entry_computation_layout={(c64[])->c64[]}

ENTRY %main.3 (Arg_0.1: c64[]) -> c64[] {
  %Arg_0.1 = c64[] parameter(0)
  ROOT %custom-call.2 = c64[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Asinh"
}

// -----

// CHECK-LABEL: HloModule asinh_complex128, entry_computation_layout={(c128[])->c128[]}

// CHECK:       %[[$xla_builder_math_Asinh_143:[^ ]+]]
// CHECK-NEXT:  %[[constant_2:[^ ]+]] = c128[] constant((1, 0))
// CHECK-NEXT:  %[[arg0_1:[^ ]+]] = c128[] parameter(0)
// CHECK-NEXT:  %[[real_3:[^ ]+]] = f64[] real(%[[arg0_1]])
// CHECK-NEXT:  %[[constant_133:[^ ]+]] = f64[] constant(0)
// CHECK-NEXT:  %[[compare_134:[^ ]+]] = pred[] compare(%[[real_3]], %[[constant_133]]), direction=EQ
// CHECK-NEXT:  %[[imag_4:[^ ]+]] = f64[] imag(%[[arg0_1]])
// CHECK-NEXT:  %[[abs_135:[^ ]+]] = f64[] abs(%[[imag_4]])
// CHECK-NEXT:  %[[constant_136:[^ ]+]] = f64[] constant(1)
// CHECK-NEXT:  %[[compare_137:[^ ]+]] = pred[] compare(%[[abs_135]], %[[constant_136]]), direction=GT
// CHECK-NEXT:  %[[and_138:[^ ]+]] = pred[] and(%[[compare_134]], %[[compare_137]])
// CHECK-NEXT:  %[[negate_5:[^ ]+]] = f64[] negate(%[[real_3]])
// CHECK-NEXT:  %[[complex_6:[^ ]+]] = c128[] complex(%[[imag_4]], %[[negate_5]])
// CHECK-NEXT:  %[[real_7:[^ ]+]] = f64[] real(%[[complex_6]])
// CHECK-NEXT:  %[[abs_8:[^ ]+]] = f64[] abs(%[[real_7]])
// CHECK-NEXT:  %[[imag_9:[^ ]+]] = f64[] imag(%[[complex_6]])
// CHECK-NEXT:  %[[abs_10:[^ ]+]] = f64[] abs(%[[imag_9]])
// CHECK-NEXT:  %[[maximum_63:[^ ]+]] = f64[] maximum(%[[abs_8]], %[[abs_10]])
// CHECK-NEXT:  %[[constant_11:[^ ]+]] = f64[] constant(1.6759759912428245e+153)
// CHECK-NEXT:  %[[compare_64:[^ ]+]] = pred[] compare(%[[maximum_63]], %[[constant_11]]), direction=GE
// CHECK-NEXT:  %[[constant_12:[^ ]+]] = f64[] constant(1)
// CHECK-NEXT:  %[[compare_65:[^ ]+]] = pred[] compare(%[[abs_8]], %[[constant_12]]), direction=LE
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = f64[] constant(0.5)
// CHECK-NEXT:  %[[add_14:[^ ]+]] = f64[] add(%[[abs_8]], %[[constant_12]])
// CHECK-NEXT:  %[[abs_15:[^ ]+]] = f64[] abs(%[[add_14]])
// CHECK-NEXT:  %[[maximum_16:[^ ]+]] = f64[] maximum(%[[abs_15]], %[[abs_10]])
// CHECK-NEXT:  %[[minimum_17:[^ ]+]] = f64[] minimum(%[[abs_15]], %[[abs_10]])
// CHECK-NEXT:  %[[compare_25:[^ ]+]] = pred[] compare(%[[maximum_16]], %[[minimum_17]]), direction=EQ
// CHECK-NEXT:  %[[constant_18:[^ ]+]] = f64[] constant(1.4142135623730951)
// CHECK-NEXT:  %[[multiply_26:[^ ]+]] = f64[] multiply(%[[constant_18]], %[[maximum_16]])
// CHECK-NEXT:  %[[divide_19:[^ ]+]] = f64[] divide(%[[minimum_17]], %[[maximum_16]])
// CHECK-NEXT:  %[[multiply_20:[^ ]+]] = f64[] multiply(%[[divide_19]], %[[divide_19]])
// CHECK-NEXT:  %[[add_21:[^ ]+]] = f64[] add(%[[constant_12]], %[[multiply_20]])
// CHECK-NEXT:  %[[sqrt_22:[^ ]+]] = f64[] sqrt(%[[add_21]])
// CHECK-NEXT:  %[[compare_27:[^ ]+]] = pred[] compare(%[[sqrt_22]], %[[constant_12]]), direction=EQ
// CHECK-NEXT:  %[[constant_23:[^ ]+]] = f64[] constant(0)
// CHECK-NEXT:  %[[compare_28:[^ ]+]] = pred[] compare(%[[multiply_20]], %[[constant_23]]), direction=GT
// CHECK-NEXT:  %[[and_29:[^ ]+]] = pred[] and(%[[compare_27]], %[[compare_28]])
// CHECK-NEXT:  %[[multiply_30:[^ ]+]] = f64[] multiply(%[[maximum_16]], %[[multiply_20]])
// CHECK-NEXT:  %[[constant_24:[^ ]+]] = f64[] constant(2)
// CHECK-NEXT:  %[[divide_31:[^ ]+]] = f64[] divide(%[[multiply_30]], %[[constant_24]])
// CHECK-NEXT:  %[[add_32:[^ ]+]] = f64[] add(%[[maximum_16]], %[[divide_31]])
// CHECK-NEXT:  %[[multiply_33:[^ ]+]] = f64[] multiply(%[[maximum_16]], %[[sqrt_22]])
// CHECK-NEXT:  %[[select_34:[^ ]+]] = f64[] select(%[[and_29]], %[[add_32]], %[[multiply_33]])
// CHECK-NEXT:  %[[select_35:[^ ]+]] = f64[] select(%[[compare_25]], %[[multiply_26]], %[[select_34]])
// CHECK-NEXT:  %[[subtract_36:[^ ]+]] = f64[] subtract(%[[abs_8]], %[[constant_12]])
// CHECK-NEXT:  %[[abs_37:[^ ]+]] = f64[] abs(%[[subtract_36]])
// CHECK-NEXT:  %[[maximum_38:[^ ]+]] = f64[] maximum(%[[abs_37]], %[[abs_10]])
// CHECK-NEXT:  %[[minimum_39:[^ ]+]] = f64[] minimum(%[[abs_37]], %[[abs_10]])
// CHECK-NEXT:  %[[compare_44:[^ ]+]] = pred[] compare(%[[maximum_38]], %[[minimum_39]]), direction=EQ
// CHECK-NEXT:  %[[multiply_45:[^ ]+]] = f64[] multiply(%[[constant_18]], %[[maximum_38]])
// CHECK-NEXT:  %[[divide_40:[^ ]+]] = f64[] divide(%[[minimum_39]], %[[maximum_38]])
// CHECK-NEXT:  %[[multiply_41:[^ ]+]] = f64[] multiply(%[[divide_40]], %[[divide_40]])
// CHECK-NEXT:  %[[add_42:[^ ]+]] = f64[] add(%[[constant_12]], %[[multiply_41]])
// CHECK-NEXT:  %[[sqrt_43:[^ ]+]] = f64[] sqrt(%[[add_42]])
// CHECK-NEXT:  %[[compare_46:[^ ]+]] = pred[] compare(%[[sqrt_43]], %[[constant_12]]), direction=EQ
// CHECK-NEXT:  %[[compare_47:[^ ]+]] = pred[] compare(%[[multiply_41]], %[[constant_23]]), direction=GT
// CHECK-NEXT:  %[[and_48:[^ ]+]] = pred[] and(%[[compare_46]], %[[compare_47]])
// CHECK-NEXT:  %[[multiply_49:[^ ]+]] = f64[] multiply(%[[maximum_38]], %[[multiply_41]])
// CHECK-NEXT:  %[[divide_50:[^ ]+]] = f64[] divide(%[[multiply_49]], %[[constant_24]])
// CHECK-NEXT:  %[[add_51:[^ ]+]] = f64[] add(%[[maximum_38]], %[[divide_50]])
// CHECK-NEXT:  %[[multiply_52:[^ ]+]] = f64[] multiply(%[[maximum_38]], %[[sqrt_43]])
// CHECK-NEXT:  %[[select_53:[^ ]+]] = f64[] select(%[[and_48]], %[[add_51]], %[[multiply_52]])
// CHECK-NEXT:  %[[select_54:[^ ]+]] = f64[] select(%[[compare_44]], %[[multiply_45]], %[[select_53]])
// CHECK-NEXT:  %[[add_55:[^ ]+]] = f64[] add(%[[select_35]], %[[select_54]])
// CHECK-NEXT:  %[[multiply_56:[^ ]+]] = f64[] multiply(%[[constant_13]], %[[add_55]])
// CHECK-NEXT:  %[[add_57:[^ ]+]] = f64[] add(%[[multiply_56]], %[[abs_8]])
// CHECK-NEXT:  %[[multiply_58:[^ ]+]] = f64[] multiply(%[[constant_13]], %[[add_57]])
// CHECK-NEXT:  %[[multiply_59:[^ ]+]] = f64[] multiply(%[[abs_10]], %[[abs_10]])
// CHECK-NEXT:  %[[add_60:[^ ]+]] = f64[] add(%[[select_35]], %[[add_14]])
// CHECK-NEXT:  %[[divide_66:[^ ]+]] = f64[] divide(%[[multiply_59]], %[[add_60]])
// CHECK-NEXT:  %[[subtract_61:[^ ]+]] = f64[] subtract(%[[select_54]], %[[subtract_36]])
// CHECK-NEXT:  %[[add_67:[^ ]+]] = f64[] add(%[[divide_66]], %[[subtract_61]])
// CHECK-NEXT:  %[[multiply_68:[^ ]+]] = f64[] multiply(%[[multiply_58]], %[[add_67]])
// CHECK-NEXT:  %[[sqrt_69:[^ ]+]] = f64[] sqrt(%[[multiply_68]])
// CHECK-NEXT:  %[[divide_70:[^ ]+]] = f64[] divide(%[[multiply_58]], %[[add_60]])
// CHECK-NEXT:  %[[add_62:[^ ]+]] = f64[] add(%[[select_54]], %[[subtract_36]])
// CHECK-NEXT:  %[[divide_71:[^ ]+]] = f64[] divide(%[[multiply_58]], %[[add_62]])
// CHECK-NEXT:  %[[add_72:[^ ]+]] = f64[] add(%[[divide_70]], %[[divide_71]])
// CHECK-NEXT:  %[[sqrt_73:[^ ]+]] = f64[] sqrt(%[[add_72]])
// CHECK-NEXT:  %[[multiply_74:[^ ]+]] = f64[] multiply(%[[abs_10]], %[[sqrt_73]])
// CHECK-NEXT:  %[[select_75:[^ ]+]] = f64[] select(%[[compare_65]], %[[sqrt_69]], %[[multiply_74]])
// CHECK-NEXT:  %[[select_76:[^ ]+]] = f64[] select(%[[compare_64]], %[[abs_10]], %[[select_75]])
// CHECK-NEXT:  %[[atan2_77:[^ ]+]] = f64[] atan2(%[[real_7]], %[[select_76]])
// CHECK-NEXT:  %[[compare_128:[^ ]+]] = pred[] compare(%[[imag_9]], %[[constant_23]]), direction=LT
// CHECK-NEXT:  %[[constant_78:[^ ]+]] = f64[] constant(1.6759759912428244e+165)
// CHECK-NEXT:  %[[compare_79:[^ ]+]] = pred[] compare(%[[abs_8]], %[[constant_78]]), direction=LT
// CHECK-NEXT:  %[[constant_80:[^ ]+]] = f64[] constant(1.6759759912428242e+147)
// CHECK-NEXT:  %[[constant_81:[^ ]+]] = f64[] constant(1.6759759912428244e+155)
// CHECK-NEXT:  %[[select_82:[^ ]+]] = f64[] select(%[[compare_79]], %[[constant_80]], %[[constant_81]])
// CHECK-NEXT:  %[[compare_83:[^ ]+]] = pred[] compare(%[[abs_10]], %[[select_82]]), direction=GE
// CHECK-NEXT:  %[[select_84:[^ ]+]] = f64[] select(%[[compare_83]], %[[abs_10]], %[[abs_8]])
// CHECK-NEXT:  %[[select_114:[^ ]+]] = f64[] select(%[[compare_83]], %[[select_82]], %[[constant_11]])
// CHECK-NEXT:  %[[compare_115:[^ ]+]] = pred[] compare(%[[select_84]], %[[select_114]]), direction=GE
// CHECK-NEXT:  %[[constant_116:[^ ]+]] = f64[] constant(0.69314718055994529)
// CHECK-NEXT:  %[[log_117:[^ ]+]] = f64[] log(%[[select_84]])
// CHECK-NEXT:  %[[add_118:[^ ]+]] = f64[] add(%[[constant_116]], %[[log_117]])
// CHECK-NEXT:  %[[constant_85:[^ ]+]] = f64[] constant(inf)
// CHECK-NEXT:  %[[compare_86:[^ ]+]] = pred[] compare(%[[abs_10]], %[[constant_85]]), direction=EQ
// CHECK-NEXT:  %[[not_87:[^ ]+]] = pred[] not(%[[compare_86]])
// CHECK-NEXT:  %[[and_88:[^ ]+]] = pred[] and(%[[compare_83]], %[[not_87]])
// CHECK-NEXT:  %[[divide_89:[^ ]+]] = f64[] divide(%[[abs_8]], %[[abs_10]])
// CHECK-NEXT:  %[[select_90:[^ ]+]] = f64[] select(%[[and_88]], %[[divide_89]], %[[constant_23]])
// CHECK-NEXT:  %[[multiply_119:[^ ]+]] = f64[] multiply(%[[select_90]], %[[select_90]])
// CHECK-NEXT:  %[[log_plus_one_120:[^ ]+]] = f64[] log-plus-one(%[[multiply_119]])
// CHECK-NEXT:  %[[multiply_121:[^ ]+]] = f64[] multiply(%[[constant_13]], %[[log_plus_one_120]])
// CHECK-NEXT:  %[[add_122:[^ ]+]] = f64[] add(%[[add_118]], %[[multiply_121]])
// CHECK-NEXT:  %[[constant_91:[^ ]+]] = f64[] constant(5.9666725849601654e-154)
// CHECK-NEXT:  %[[compare_92:[^ ]+]] = pred[] compare(%[[abs_10]], %[[constant_91]]), direction=LT
// CHECK-NEXT:  %[[compare_93:[^ ]+]] = pred[] compare(%[[abs_8]], %[[constant_12]]), direction=LT
// CHECK-NEXT:  %[[and_94:[^ ]+]] = pred[] and(%[[compare_92]], %[[compare_93]])
// CHECK-NEXT:  %[[multiply_108:[^ ]+]] = f64[] multiply(%[[add_14]], %[[subtract_36]])
// CHECK-NEXT:  %[[add_95:[^ ]+]] = f64[] add(%[[multiply_56]], %[[constant_12]])
// CHECK-NEXT:  %[[divide_109:[^ ]+]] = f64[] divide(%[[multiply_108]], %[[add_95]])
// CHECK-NEXT:  %[[negate_110:[^ ]+]] = f64[] negate(%[[divide_109]])
// CHECK-NEXT:  %[[compare_98:[^ ]+]] = pred[] compare(%[[abs_8]], %[[constant_12]]), direction=GE
// CHECK-NEXT:  %[[multiply_96:[^ ]+]] = f64[] multiply(%[[constant_13]], %[[multiply_59]])
// CHECK-NEXT:  %[[divide_97:[^ ]+]] = f64[] divide(%[[multiply_96]], %[[add_60]])
// CHECK-NEXT:  %[[multiply_99:[^ ]+]] = f64[] multiply(%[[constant_13]], %[[add_62]])
// CHECK-NEXT:  %[[add_100:[^ ]+]] = f64[] add(%[[divide_97]], %[[multiply_99]])
// CHECK-NEXT:  %[[constant_101:[^ ]+]] = f64[] constant(1.5)
// CHECK-NEXT:  %[[compare_102:[^ ]+]] = pred[] compare(%[[multiply_56]], %[[constant_101]]), direction=LE
// CHECK-NEXT:  %[[divide_103:[^ ]+]] = f64[] divide(%[[multiply_96]], %[[subtract_61]])
// CHECK-NEXT:  %[[add_104:[^ ]+]] = f64[] add(%[[divide_97]], %[[divide_103]])
// CHECK-NEXT:  %[[subtract_105:[^ ]+]] = f64[] subtract(%[[multiply_56]], %[[constant_12]])
// CHECK-NEXT:  %[[select_106:[^ ]+]] = f64[] select(%[[compare_102]], %[[add_104]], %[[subtract_105]])
// CHECK-NEXT:  %[[select_107:[^ ]+]] = f64[] select(%[[compare_98]], %[[add_100]], %[[select_106]])
// CHECK-NEXT:  %[[select_111:[^ ]+]] = f64[] select(%[[and_94]], %[[negate_110]], %[[select_107]])
// CHECK-NEXT:  %[[multiply_112:[^ ]+]] = f64[] multiply(%[[select_111]], %[[add_95]])
// CHECK-NEXT:  %[[sqrt_113:[^ ]+]] = f64[] sqrt(%[[multiply_112]])
// CHECK-NEXT:  %[[divide_123:[^ ]+]] = f64[] divide(%[[abs_10]], %[[sqrt_113]])
// CHECK-NEXT:  %[[add_124:[^ ]+]] = f64[] add(%[[select_111]], %[[sqrt_113]])
// CHECK-NEXT:  %[[log_plus_one_125:[^ ]+]] = f64[] log-plus-one(%[[add_124]])
// CHECK-NEXT:  %[[select_126:[^ ]+]] = f64[] select(%[[and_94]], %[[divide_123]], %[[log_plus_one_125]])
// CHECK-NEXT:  %[[select_127:[^ ]+]] = f64[] select(%[[compare_115]], %[[add_122]], %[[select_126]])
// CHECK-NEXT:  %[[negate_129:[^ ]+]] = f64[] negate(%[[select_127]])
// CHECK-NEXT:  %[[select_130:[^ ]+]] = f64[] select(%[[compare_128]], %[[negate_129]], %[[select_127]])
// CHECK-NEXT:  %[[complex_131:[^ ]+]] = c128[] complex(%[[atan2_77]], %[[select_130]])
// CHECK-NEXT:  %[[imag_132:[^ ]+]] = f64[] imag(%[[complex_131]])
// CHECK-NEXT:  %[[negate_139:[^ ]+]] = f64[] negate(%[[imag_132]])
// CHECK-NEXT:  %[[select_140:[^ ]+]] = f64[] select(%[[and_138]], %[[imag_132]], %[[negate_139]])
// CHECK-NEXT:  %[[real_141:[^ ]+]] = f64[] real(%[[complex_131]])
// CHECK-NEXT:  ROOT %[[complex_142:[^ ]+]] = c128[] complex(%[[select_140]], %[[real_141]])

// CHECK:       ENTRY %[[$main_3:[^ ]+]]
// CHECK-NEXT:  %[[Arg_0_1:[^ ]+]] = c128[] parameter(0)
// CHECK-NEXT:  %[[custom_call_2:[^ ]+]] = c128[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asinh"
// CHECK-NEXT:  ROOT %[[custom_call:[^ ]+]] = c128[] custom-call(%[[Arg_0_1]]), custom_call_target="xla_builder.math.Asinh", called_computations={%[[$xla_builder_math_Asinh_143]]}

HloModule asinh_complex128, entry_computation_layout={(c128[])->c128[]}

ENTRY %main.3 (Arg_0.1: c128[]) -> c128[] {
  %Arg_0.1 = c128[] parameter(0)
  ROOT %custom-call.2 = c128[] custom-call(%Arg_0.1), custom_call_target="xla_builder.math.Asinh"
}
