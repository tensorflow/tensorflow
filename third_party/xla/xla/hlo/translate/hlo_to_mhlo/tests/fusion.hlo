// RUN: hlo-translate -hlo-to-mlir -emit-mhlo %s | FileCheck %s

HloModule main.17

// CHECK: func @main(%[[ARG0:.*]]: tensor<f32>, %[[ARG1:.*]]: tensor<f32>) -> tensor<f32> {
// CHECK:   %[[F0:.+]] = "mhlo.fusion"(%[[ARG0:.*]], %[[ARG1:.*]])
// CHECK:   <{fusion_kind = #mhlo<fusion_kind kLoop>}> ({
// CHECK:   ^bb0(%[[ARG2:.*]]: tensor<f32>, %[[ARG3:.*]]: tensor<f32>):
// CHECK:   }) {output_operand_aliasing = []} : (tensor<f32>, tensor<f32>) -> tensor<f32>
// CHECK:   %[[F1:.+]]:2 = "mhlo.fusion"(%[[ARG0:.*]])
// CHECK:   <{fusion_kind = #mhlo<fusion_kind kLoop>}> ({
// CHECK:   ^bb0(%[[ARG2:.*]]: tensor<f32>):
// CHECK:   }) {output_operand_aliasing = []} : (tensor<f32>) -> (tensor<f32>, tensor<f32>)
// CHECK:   %[[F2:.+]]:2 = "mhlo.fusion"(%[[ARG0:.*]], %[[ARG1:.*]])
// CHECK:   <{fusion_kind = #mhlo<fusion_kind kLoop>}> ({
// CHECK:   ^bb0(%[[ARG2:.*]]: tensor<f32>, %[[ARG3:.*]]: tensor<f32>):
// CHECK:   }) {output_operand_aliasing = []} : (tensor<f32>, tensor<f32>) -> (tensor<f32>, tensor<f32>)
// CHECK:   %[[F3:.+]]:2 = "mhlo.fusion"(%[[ARG0:.*]], %[[ARG1:.*]])
// CHECK:   <{fusion_kind = #mhlo<fusion_kind kLoop>}> ({
// CHECK:   ^bb0(%[[ARG2:.*]]: tensor<f32>, %[[ARG3:.*]]: tensor<f32>):
// CHECK:   }) {output_operand_aliasing = []} : (tensor<f32>, tensor<f32>) -> (tensor<f32>, tensor<f32>)
// CHECK: }

%region_0 (Arg_0.4: f32[], Arg_1.5: f32[]) -> f32[] {
  %Arg_0.4 = f32[] parameter(0)
  %Arg_1.5 = f32[] parameter(1)
  ROOT %add.6 = f32[] add(f32[] %Arg_0.4, f32[] %Arg_1.5)
}

%region_1 (Arg_0.9: f32[], Arg_1.10: f32[]) -> (f32[], f32[]) {
  %Arg_0.9 = f32[] parameter(0)
  %Arg_1.10 = f32[] parameter(1)
  %add.11 = f32[] add(f32[] %Arg_0.9, f32[] %Arg_1.10)
  %subtract.12 = f32[] subtract(f32[] %Arg_0.9, f32[] %Arg_1.10)
  ROOT %tuple.13 = (f32[], f32[]) tuple(f32[] %add.11, f32[] %subtract.12)
}

%region_2 (Arg_0: (f32[])) -> (f32[], f32[]) {
  %Arg_0 = (f32[]) parameter(0)
  %get-tuple-element.0 = f32[] get-tuple-element(%Arg_0), index=0

  %add.11 = f32[] add(f32[] %get-tuple-element.0, f32[] %get-tuple-element.0)
  %subtract.12 = f32[] subtract(f32[] %get-tuple-element.0, f32[] %get-tuple-element.0)
  ROOT %tuple.13 = (f32[], f32[]) tuple(f32[] %add.11, f32[] %subtract.12)
}

%region_3 (Arg_0: (f32[], (f32[]))) -> (f32[], f32[]) {
  %Arg_0 = (f32[], (f32[])) parameter(0)
  %get-tuple-element.0 = f32[] get-tuple-element(%Arg_0), index=0
  %get-tuple-element.1 = (f32[]) get-tuple-element(%Arg_0), index=1
  %get-tuple-element.2 = f32[] get-tuple-element(%get-tuple-element.1), index=0

  %add.11 = f32[] add(f32[] %get-tuple-element.0, f32[] %get-tuple-element.2)
  %subtract.12 = f32[] subtract(f32[] %get-tuple-element.0, f32[] %get-tuple-element.2)
  ROOT %tuple.13 = (f32[], f32[]) tuple(f32[] %add.11, f32[] %subtract.12)
}

ENTRY %main.17 (Arg_0.1: f32[], Arg_1.2: f32[]) -> f32[] {
  %Arg_0.1 = f32[] parameter(0)
  %Arg_1.2 = f32[] parameter(1)

  %fusion.0 = f32[] fusion(f32[] %Arg_0.1, f32[] %Arg_1.2), kind=kLoop, calls=%region_0

  %fusion.1 = (f32[], f32[]) fusion(f32[] %Arg_0.1, f32[] %Arg_1.2), kind=kLoop, calls=%region_1

  %tuple.0 = (f32[]) tuple(%Arg_0.1)
  %fusion.2 = (f32[], f32[]) fusion((f32[]) %tuple.0), kind=kLoop, calls=%region_2

  %tuple.1 = (f32[], (f32[])) tuple(%Arg_0.1, %tuple.0)
  %fusion.3 = (f32[], f32[]) fusion((f32[], (f32[])) %tuple.1), kind=kLoop, calls=%region_3

  %get-tuple-element.15 = f32[] get-tuple-element((f32[], f32[]) %fusion.1), index=0
  ROOT %get-tuple-element.16 = f32[] get-tuple-element((f32[], f32[]) %fusion.1), index=1
}
