# RUN: hlo-translate -hlo-to-mlir -emit-mhlo %s | FileCheck %s
# RUN: hlo-translate -hlo-to-mlir %s | FileCheck %s --check-prefix CHECK-SHLO

hlo_module {
  name: "foo.5"
  entry_computation_name: "main.5"
  computations {
    name: "main.5"
    instructions {
      name: "Arg_0.1"
      opcode: "parameter"
      shape {
        element_type: F32
        dimensions: 4
        layout {
          minor_to_major: 0
          tail_padding_alignment_in_elements: 1
        }
        is_dynamic_dimension: false
      }
      metadata {
      }
      id: 1
      frontend_attributes {
      }
      statistics_viz {
      }
    }
    instructions {
      name: "Arg_1.2"
      opcode: "parameter"
      shape {
        element_type: F32
        dimensions: 4
        layout {
          minor_to_major: 0
          tail_padding_alignment_in_elements: 1
        }
        is_dynamic_dimension: false
      }
      metadata {
      }
      parameter_number: 1
      id: 2
      frontend_attributes {
      }
      statistics_viz {
      }
    }
    instructions {
      name: "add.3"
      opcode: "add"
      shape {
        element_type: F32
        dimensions: 4
        layout {
          minor_to_major: 0
          tail_padding_alignment_in_elements: 1
        }
        is_dynamic_dimension: false
      }
      metadata {
        source_file: "<stdin>"
        source_line: 3
      }
      id: 3
      operand_ids: 1
      operand_ids: 2
      frontend_attributes {
      }
      statistics_viz {
      }
    }
    instructions {
      name: "dot.4"
      opcode: "dot"
      shape {
        element_type: F32
        layout {
          tail_padding_alignment_in_elements: 1
        }
      }
      metadata {
        source_file: "<stdin>"
        source_line: 4
      }
      dot_dimension_numbers {
        lhs_contracting_dimensions: 0
        rhs_contracting_dimensions: 0
      }
      id: 4
      operand_ids: 3
      operand_ids: 2
      precision_config {
        operand_precision: DEFAULT
        operand_precision: DEFAULT
      }
      frontend_attributes {
      }
      statistics_viz {
      }
    }
    program_shape {
      parameters {
        element_type: F32
        dimensions: 4
        layout {
          minor_to_major: 0
          tail_padding_alignment_in_elements: 1
        }
        is_dynamic_dimension: false
      }
      parameters {
        element_type: F32
        dimensions: 4
        layout {
          minor_to_major: 0
          tail_padding_alignment_in_elements: 1
        }
        is_dynamic_dimension: false
      }
      result {
        element_type: F32
        layout {
          tail_padding_alignment_in_elements: 1
        }
      }
      parameter_names: "Arg_0.1"
      parameter_names: "Arg_1.2"
    }
    id: 5
    root_id: 4
  }
  host_program_shape {
    parameters {
      element_type: F32
      dimensions: 4
      layout {
        minor_to_major: 0
        tail_padding_alignment_in_elements: 1
      }
      is_dynamic_dimension: false
    }
    parameters {
      element_type: F32
      dimensions: 4
      layout {
        minor_to_major: 0
        tail_padding_alignment_in_elements: 1
      }
      is_dynamic_dimension: false
    }
    result {
      element_type: F32
      layout {
        tail_padding_alignment_in_elements: 1
      }
    }
    parameter_names: "p0"
    parameter_names: "p1"
  }
  entry_computation_id: 5
  input_output_alias {
  }
  stack_frame_index {
  }
  buffer_donor {
  }
  frontend_attributes {
  }
}

# CHECK-LABEL: func @main(%arg0: tensor<4xf32>, %arg1: tensor<4xf32>) -> tensor<f32> {
# CHECK-NEXT:   %0 = mhlo.add %arg0, %arg1 : tensor<4xf32>
# TODO(b/129709049) consider making this default precision config inferred.
# CHECK-NEXT:   %1 = "mhlo.dot"(%0, %arg1) <{precision_config = [#mhlo<precision DEFAULT>, #mhlo<precision DEFAULT>]}> : (tensor<4xf32>, tensor<4xf32>) -> tensor<f32>
# CHECK-NEXT:   return %1 : tensor<f32>
# CHECK-NEXT: }
#
# CHECK-SHLO-LABEL: func @main(%arg0: tensor<4xf32>, %arg1: tensor<4xf32>) -> tensor<f32> {
# CHECK-SHLO-NEXT:   %0 = stablehlo.add %arg0, %arg1 : tensor<4xf32>
# CHECK-SHLO-NEXT:   %1 = stablehlo.dot %0, %arg1, precision = [DEFAULT, DEFAULT] : (tensor<4xf32>, tensor<4xf32>) -> tensor<f32>
# CHECK-SHLO-NEXT:   return %1 : tensor<f32>
# CHECK-SHLO-NEXT: }
