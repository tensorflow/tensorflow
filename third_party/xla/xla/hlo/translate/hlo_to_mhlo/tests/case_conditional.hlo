// RUN: xla-translate -hlo-text-to-mlir-hlo -hlo-import-all-computations %s -o - | FileCheck %s
// RUN: xla-translate -hlo-text-to-mlir-hlo -hlo-import-all-computations -hlo-flatten-computation-args-result %s -o - | FileCheck %s -check-prefix=FLATTEN-CHECK

HloModule Indexed_Conditional

%Negate (x: f32[]) -> f32[] {
  %x = f32[] parameter(0)
  ROOT %negate = f32[] negate(f32[] %x)
}

%Identity (y: f32[]) -> f32[] {
  %y = f32[] parameter(0)
  ROOT %copy = f32[] copy(f32[] %y)
}

%Floor (z: f32[]) -> f32[] {
  %z = f32[] parameter(0)
  ROOT %floor = f32[] floor(f32[] %z)
}

ENTRY %indexed_conditional () -> f32[] {
  %constant = s32[] constant(1)
  %constant.1 = f32[] constant(56)
  %constant.2 = f32[] constant(12)
  %constant.3 = f32[] constant(13)
  ROOT %conditional = f32[] conditional(s32[] %constant, f32[] %constant.1, f32[] %constant.2, f32[] %constant.3), branch_computations={%Negate, %Identity, %Floor}
}

// CHECK-LABEL: func @main() -> tensor<f32>
// CHECK-DAG: %[[INDEX:.*]] = mhlo.constant dense<1> : tensor<i32>
// CHECK-DAG: %[[OPERAND_1:.*]] = mhlo.constant dense<5.600000e+01> : tensor<f32>
// CHECK-DAG: %[[OPERAND_2:.*]] = mhlo.constant dense<1.200000e+01> : tensor<f32>
// CHECK-DAG: %[[OPERAND_3:.*]] = mhlo.constant dense<1.300000e+01> : tensor<f32>
// CHECK: %[[RESULT:.*]] = "mhlo.case"(%[[INDEX]]) ({
// CHECK:     %[[RES_1:.*]] = mhlo.negate %[[OPERAND_1]] : tensor<f32>
// CHECK:     mhlo.return %[[RES_1]] : tensor<f32>
// CHECK:   },  {
// CHECK:     %[[RES_2:.*]] = mhlo.copy %[[OPERAND_2]] :  tensor<f32>
// CHECK:     mhlo.return %[[RES_2]] : tensor<f32>
// CHECK:   },  {
// CHECK:     %[[RES_3:.*]] = mhlo.floor %[[OPERAND_3]] : tensor<f32>
// CHECK:     mhlo.return %[[RES_3]] : tensor<f32>
// CHECK:   }) : (tensor<i32>) -> tensor<f32>
// CHECK: return %[[RESULT]] : tensor<f32>

// ----------------------
// Test importing Case op with block-arguments with different types.
// ----------------------

%Negate1 (x: f32[]) -> (f32[], f32[]) {
  %x = f32[] parameter(0)
  %negate = f32[] negate(f32[] %x)
  ROOT %tuple.0 = (f32[], f32[]) tuple(%negate, %negate)
}

%Identity1 (y: (f32[])) -> (f32[], f32[]) {
  %y = (f32[]) parameter(0)
  %get-tuple-element.0 = f32[] get-tuple-element(%y), index=0
  %copy = f32[] copy(f32[] %get-tuple-element.0)
  ROOT %tuple.0 = (f32[], f32[]) tuple(%copy, %copy)
}

%Floor1 (z: ((f32[]), (f32[],f32[]))) -> (f32[], f32[]) {
  %z = ((f32[]), (f32[],f32[])) parameter(0)
  %get-tuple-element.0 = (f32[],f32[]) get-tuple-element(%z), index=1
  %get-tuple-element.2 = f32[] get-tuple-element(%get-tuple-element.0), index=0
  %get-tuple-element.3 = f32[] get-tuple-element(%get-tuple-element.0), index=1
  %floor.0 = f32[] floor(f32[] %get-tuple-element.2)
  %floor.1 = f32[] floor(f32[] %get-tuple-element.3)
  %add = f32[] add(f32[] %floor.0, %floor.1)
  ROOT %tuple.0 = (f32[], f32[]) tuple(%add, %add)
}

%Noarg (arg_empty_tuple.10: ()) -> (f32[], f32[]) {
  %arg_empty_tuple.10 = () parameter(0)
  %constant.11 = f32[] constant(10)
  ROOT %tuple.0 = (f32[], f32[]) tuple(%constant.11, %constant.11)
}

%conditional_with_tuple_args () -> (f32[], f32[]) {
  %constant = s32[] constant(1)
  %constant.1 = f32[] constant(56)
  %constant.2 = f32[] constant(12)
  %constant.3 = f32[] constant(13)

  %tuple.1 = (f32[]) tuple(%constant.1)
  %tuple.2 = (f32[],f32[]) tuple(%constant.2, %constant.3)
  %tuple.3 = ((f32[]), (f32[],f32[])) tuple(%tuple.1, %tuple.2)
  %tuple.4 = () tuple()

  ROOT %conditional = (f32[], f32[]) conditional(s32[] %constant, f32[] %constant.1, (f32[]) %tuple.1, ((f32[]), (f32[],f32[])) %tuple.3, () %tuple.4), branch_computations={%Negate1, %Identity1, %Floor1, %Noarg}
}

// CHECK-LABEL: func private @conditional_with_tuple_args() -> tuple<tensor<f32>, tensor<f32>>
// CHECK-DAG:    %[[OPERAND_0:.*]] = mhlo.constant dense<1> : tensor<i32>
// CHECK-DAG:    %[[OPERAND_1:.*]] = mhlo.constant dense<5.600000e+01> : tensor<f32>
// CHECK-DAG:    %[[OPERAND_2:.*]] = mhlo.constant dense<1.200000e+01> : tensor<f32>
// CHECK-DAG:    %[[OPERAND_3:.*]] = mhlo.constant dense<1.300000e+01> : tensor<f32>
// CHECK-NEXT:    %[[CASE:.*]]:2 = "mhlo.case"(%[[OPERAND_0]]) ({
// CHECK-NEXT:      %[[RES_1:.*]] = mhlo.negate %[[OPERAND_1]] : tensor<f32>
// CHECK-NEXT:      mhlo.return %[[RES_1]], %[[RES_1]] : tensor<f32>, tensor<f32>
// CHECK-NEXT:    },  {
// CHECK-NEXT:      %[[RES_2:.*]] = mhlo.copy %[[OPERAND_1]] :  tensor<f32>
// CHECK-NEXT:      mhlo.return %[[RES_2]], %[[RES_2]] : tensor<f32>, tensor<f32>
// CHECK-NEXT:    },  {
// CHECK-NEXT:      %[[FLOOR_1:.*]] = mhlo.floor %[[OPERAND_2]] : tensor<f32>
// CHECK-NEXT:      %[[FLOOR_2:.*]] = mhlo.floor %[[OPERAND_3]] : tensor<f32>
// CHECK-NEXT:      %[[RES_3:.*]] = mhlo.add %[[FLOOR_1]], %[[FLOOR_2]] : tensor<f32>
// CHECK-NEXT:      mhlo.return %[[RES_3]], %[[RES_3]] : tensor<f32>, tensor<f32>
// CHECK-NEXT:    }, {
// CHECK-NEXT:      %[[CST:.*]] = mhlo.constant
// CHECK-NEXT:      mhlo.return %[[CST]], %[[CST]] : tensor<f32>, tensor<f32>
// CHECK-NEXT:    }) : (tensor<i32>) -> (tensor<f32>, tensor<f32>)
// CHECK-NEXT:    %[[TUPLE:.*]] = mhlo.tuple %[[CASE]]#0, %[[CASE]]#1
// CHECK-NEXT:    return %[[TUPLE]] : tuple<tensor<f32>, tensor<f32>>

// FLATTEN-CHECK-LABEL: func private @conditional_with_tuple_args() -> (tensor<f32>, tensor<f32>)
// FLATTEN-CHECK: %[[CASE:.*]]:2 = "mhlo.case"
// FLATTEN-CHECK: return  %[[CASE]]#0, %[[CASE]]#1
