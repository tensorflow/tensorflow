// RUN: xla-translate -hlo-text-to-mlir-hlo -hlo-import-all-computations -hlo-flatten-computation-args-result=false %s | FileCheck %s
// RUN: hlo-translate -hlo-to-mlir -emit-mhlo %s | FileCheck %s -check-prefix=FLATTEN-CHECK

HloModule foo

%cond (arg_1: s64[]) -> pred[] {
  %arg_1 = s64[] parameter(0), metadata={op_name="HLO_Args"}
  ROOT %compare.2 = pred[] compare(%arg_1, %arg_1), direction=LT, metadata={op_type="Less" op_name="Less"}
}

%loop (arg_1: s64[]) -> s64[] {
  %arg_1 = s64[] parameter(0), metadata={op_name="HLO_Args"}
  ROOT %compare.2 = s64[] add(%arg_1, %arg_1), metadata={op_type="Less" op_name="Less"}
}

// CHECK-LABEL: func @main(%arg0: tensor<i64>) -> tensor<i64> {
ENTRY %foo (arg0.1: s64[]) -> s64[] {
  %arg0.1 = s64[] parameter(0), metadata={op_name="HLO_Args"}

  // CHECK: mhlo.while([[ITER_ARG:.*]] = %arg0)
  // CHECK:     mhlo.compare
  // CHECK:     mhlo.return

  // CHECK:     mhlo.add
  // CHECK:     mhlo.return
  ROOT %while.2 = s64[] while(%arg0.1), body=%loop, condition=%cond
}

// ----------------------
// To test that
// 1. whileOp no more have tuple as ops or return types
// 2. The HLO computation block corresponding to cond and body of while loop are
//    modified when imported as region.
// 3. The HLO computation block corresponding to cond and body of while
//    loop are NOT modified when imported as individual functions.
// ----------------------
// CHECK-LABEL: func private @region_body1
// CHECK-SAME:    (%[[ARG_0:.*]]: tuple<tensor<i32>, tensor<i32>, tensor<f32>, tensor<f32>>) -> tuple<tensor<i32>, tensor<i32>, tensor<f32>, tensor<f32>>
// CHECK-NEXT:   %[[GTE_0:.*]] = mhlo.get_tuple_element %[[ARG_0]][0]
// CHECK-NEXT:   %[[GTE_1:.*]] = mhlo.get_tuple_element %[[ARG_0]][1]
// CHECK-NEXT:   %[[GTE_2:.*]] = mhlo.get_tuple_element %[[ARG_0]][2]
// CHECK-NEXT:   %[[GTE_3:.*]] = mhlo.get_tuple_element %[[ARG_0]][3]
// CHECK-NEXT:   %[[ADD:.*]] = mhlo.add %[[GTE_2]], %[[GTE_3]]
// CHECK-NEXT:   %[[RES:.*]] = mhlo.tuple %[[GTE_0]], %[[GTE_1]], %[[GTE_2]], %[[ADD]]
// CHECK-NEXT:   return %[[RES]] : tuple<tensor<i32>, tensor<i32>, tensor<f32>, tensor<f32>>

// FLATTEN-CHECK-LABEL: func private @region_body1
// FLATTEN-CHECK-SAME:    (%[[ARG_0:.*]]: tensor<i32>, %[[ARG_1:.*]]: tensor<i32>, %[[ARG_2:.*]]: tensor<f32>, %[[ARG_3:.*]]: tensor<f32>) -> (tensor<i32>, tensor<i32>, tensor<f32>, tensor<f32>)
// FLATTEN-CHECK-NEXT:   %[[ADD:.*]] = mhlo.add %[[ARG_2]], %[[ARG_3]]
// FLATTEN-CHECK-NEXT:   return %[[ARG_0]], %[[ARG_1]], %[[ARG_2]], %[[ADD]]

%region_body1 (Arg_0.7: (s32[], s32[], f32[], f32[])) -> (s32[], s32[], f32[], f32[]) {
  %Arg_0.7 = (s32[], s32[], f32[], f32[]) parameter(0)
  %get-tuple-element.8 = s32[] get-tuple-element((s32[], s32[], f32[], f32[]) %Arg_0.7), index=0
  %get-tuple-element.9 = s32[] get-tuple-element((s32[], s32[], f32[], f32[]) %Arg_0.7), index=1
  %get-tuple-element.10 = f32[] get-tuple-element((s32[], s32[], f32[], f32[]) %Arg_0.7), index=2
  %get-tuple-element.11 = f32[] get-tuple-element((s32[], s32[], f32[], f32[]) %Arg_0.7), index=3
  %add.12 = f32[] add(f32[] %get-tuple-element.10, f32[] %get-tuple-element.11)
  ROOT %tuple.13 = (s32[], s32[], f32[], f32[]) tuple(s32[] %get-tuple-element.8, s32[] %get-tuple-element.9, f32[] %get-tuple-element.10, f32[] %add.12)
}

// CHECK-LABEL: func private @region_cond1
// CHECK-SAME:    (%[[ARG_0:.*]]: tuple<tensor<i32>, tensor<i32>, tensor<f32>, tensor<f32>>) -> tensor<i1>
// CHECK-NEXT:   %[[CST:.*]] = mhlo.constant
// CHECK-NEXT:   %[[GTE_0:.*]] = mhlo.get_tuple_element %[[ARG_0]][0]
// CHECK-NEXT:   %[[GTE_1:.*]] = mhlo.get_tuple_element %[[ARG_0]][1]
// CHECK-NEXT:   %[[CMP:.*]] = mhlo.compare LT, %[[GTE_0]], %[[GTE_1]]
// CHECK-NEXT"   return %[[CMP]] : tensor<i1>

// FLATTEN-CHECK-LABEL: func private @region_cond1
// FLATTEN-CHECK-SAME:    (%[[ARG_0:.*]]: tensor<i32>, %[[ARG_1:.*]]: tensor<i32>, %[[ARG_2:.*]]: tensor<f32>, %[[ARG_3:.*]]: tensor<f32>) -> tensor<i1>
// FLATTEN-CHECK-NEXT:   %[[CST:.*]] = mhlo.constant
// FLATTEN-CHECK-NEXT:   %[[CMP:.*]] = mhlo.compare LT, %[[ARG_0]], %[[ARG_1]]

%region_cond1 (Arg_0.15: (s32[], s32[], f32[], f32[])) -> pred[] {
  %constant.18 = s32[] constant(0)
  %Arg_0.15 = (s32[], s32[], f32[], f32[]) parameter(0)
  %get-tuple-element.16 = s32[] get-tuple-element((s32[], s32[], f32[], f32[]) %Arg_0.15), index=0
  %get-tuple-element.17 = s32[] get-tuple-element((s32[], s32[], f32[], f32[]) %Arg_0.15), index=1
  ROOT %compare.19 = pred[] compare(s32[] %get-tuple-element.16, s32[] %get-tuple-element.17), direction=LT
}

// CHECK-LABEL: func private @test_1
// CHECK-SAME:    (%[[ARG_0:.*]]: tensor<f32>) -> tensor<f32> {
// CHECK-NEXT:   %[[CST_0:.*]] = mhlo.constant dense<0> : tensor<i32>
// CHECK-NEXT:   %[[CST_1:.*]] = mhlo.constant dense<100> : tensor<i32>
// CHECK-NEXT:   %[[CST_2:.*]] = mhlo.constant dense<1.000000e+00> : tensor<f32>
// CHECK-NEXT:   %[[WHILE:.*]]:4 = mhlo.while(%[[ARG_1:.*]] = %[[CST_0]], %[[ARG_2:.*]] = %[[CST_1]], %[[ARG_3:.*]] = %[[CST_2]], %[[ARG_4:.*]] = %[[ARG_0]])
// CHECK-NEXT:   cond {
// CHECK-NEXT:     %[[CST_3:.*]] = mhlo.constant
// CHECK-NEXT:     %[[CMP:.*]] = mhlo.compare LT, %[[ARG_1]], %[[ARG_2]]
// CHECK-NEXT:     mhlo.return %[[CMP]] : tensor<i1>
// CHECK-NEXT:   } do {
// CHECK-NEXT:     %[[ADD:.*]] = mhlo.add %[[ARG_3]], %[[ARG_4]] : tensor<f32>
// CHECK-NEXT:     mhlo.return %[[ARG_1]], %[[ARG_2]], %[[ARG_3]], %[[ADD]] : tensor<i32>, tensor<i32>, tensor<f32>, tensor<f32>

// CHECK:   return %[[WHILE]]#3 : tensor<f32>
%test_1 (Arg_0.1: f32[]) -> f32[] {
  %constant.2 = s32[] constant(0)
  %constant.3 = s32[] constant(100)
  %constant.4 = f32[] constant(1)
  %Arg_0.1 = f32[] parameter(0)
  %tuple.5 = (s32[], s32[], f32[], f32[]) tuple(s32[] %constant.2, s32[] %constant.3, f32[] %constant.4, f32[] %Arg_0.1)
  %while.20 = (s32[], s32[], f32[], f32[]) while((s32[], s32[], f32[], f32[]) %tuple.5), condition=%region_cond1, body=%region_body1
  ROOT %get-tuple-element.21 = f32[] get-tuple-element((s32[], s32[], f32[], f32[]) %while.20), index=3
}

// ----------------------
// Test using mixed typed tuples
// ----------------------
%reduce_helper_add {
  lhs = s32[] parameter(0)
  rhs = s32[] parameter(1)
  ROOT add = s32[] add(lhs, rhs)
}

%region_body2 (Arg_0: ((s32[1], s32[2]), (f32[1], f32[3]))) -> ((s32[1], s32[2]), (f32[1], f32[3])) {
  %Arg_0 = ((s32[1], s32[2]), (f32[1], f32[3])) parameter(0)

  %get-tuple-element.1 = (s32[1], s32[2]) get-tuple-element(((s32[1], s32[2]), (f32[1], f32[3])) %Arg_0), index=0
  %get-tuple-element.2 = (f32[1], f32[3]) get-tuple-element(((s32[1], s32[2]), (f32[1], f32[3])) %Arg_0), index=1
  %get-tuple-element.3 = f32[1] get-tuple-element((f32[1], f32[3]) %get-tuple-element.2), index=0
  %get-tuple-element.4 = f32[3] get-tuple-element((f32[1], f32[3]) %get-tuple-element.2), index=1

  %broadcast.1 = f32[3] broadcast(f32[1] %get-tuple-element.3), dimensions={0}
  %add.1 = f32[3] add(f32[3] %get-tuple-element.4, f32[3] %broadcast.1)

  %tuple.1 = (f32[1], f32[3]) tuple(f32[1] %get-tuple-element.3, f32[3] %add.1)
  ROOT %tuple.2 = ((s32[1], s32[2]), (f32[1], f32[3])) tuple((s32[1], s32[2]) %get-tuple-element.1, (f32[1], f32[3]) %tuple.1)
}

%region_cond2 (Arg_0: ((s32[1], s32[2]), (f32[1], f32[3]))) -> pred[] {
  %constant.1 = s32[] constant(0)
  %Arg_0 = ((s32[1], s32[2]), (f32[1], f32[3])) parameter(0)
  %get-tuple-element.1 =  (s32[1], s32[2]) get-tuple-element(((s32[1], s32[2]), (f32[1], f32[3])) %Arg_0), index=0
  %get-tuple-element.2 =  s32[1] get-tuple-element((s32[1], s32[2]) %get-tuple-element.1), index=0
  %get-tuple-element.3 =  s32[2] get-tuple-element((s32[1], s32[2]) %get-tuple-element.1), index=1

  %reduce.1 = s32[] reduce(%get-tuple-element.2, %constant.1), dimensions={0}, to_apply=%reduce_helper_add
  %reduce.2 = s32[] reduce(%get-tuple-element.3, %constant.1), dimensions={0}, to_apply=%reduce_helper_add

  ROOT %compare.1 = pred[] compare(s32[] %reduce.1, s32[] %reduce.2), direction=LT
}

// CHECK-LABEL: func private @test_2
// CHECK-SAME:    (%[[ARG_0:.*]]: tensor<3xf32>) -> tensor<3xf32> {
// CHECK-NEXT:    %[[CST_0:.*]] = mhlo.constant dense<0> : tensor<1xi32>
// CHECK-NEXT:    %[[CST_1:.*]] = mhlo.constant dense<100> : tensor<2xi32>
// CHECK-NEXT:    %[[CST_2:.*]] = mhlo.constant dense<1.000000e+00> : tensor<1xf32>
// CHECK-NEXT:   %[[WHILE:.*]]:4 = mhlo.while(%[[ARG_1:.*]] = %[[CST_0]], %[[ARG_2:.*]] = %[[CST_1]], %[[ARG_3:.*]] = %[[CST_2]], %[[ARG_4:.*]] = %[[ARG_0]])
// CHECK:           %[[CST_4:.*]] = mhlo.constant dense<0> : tensor<i32>
// CHECK-NEXT:      %[[RED_5:.*]] = mhlo.reduce(%[[ARG_1]] init: %[[CST_4]])
// CHECK:           %[[RED_6:.*]] = mhlo.reduce(%[[ARG_2]] init: %[[CST_4]])
// CHECK:           %[[CMP_7:.*]] = mhlo.compare LT, %[[RED_5]], %[[RED_6]] : (tensor<i32>, tensor<i32>) -> tensor<i1>
// CHECK:           mhlo.return %[[CMP_7]] : tensor<i1>

// CHECK:           %[[BDCAST_4:.*]] = "mhlo.broadcast_in_dim"(%[[ARG_3]]) <{broadcast_dimensions = dense<0> : tensor<1xi64>}> : (tensor<1xf32>) -> tensor<3xf32>
// CHECK-NEXT:      %[[ADD_5:.*]] = mhlo.add %[[ARG_4]], %[[BDCAST_4]] : tensor<3xf32>
// CHECK-NEXT:      mhlo.return %[[ARG_1]], %[[ARG_2]], %[[ARG_3]], %[[ADD_5]] : tensor<1xi32>, tensor<2xi32>, tensor<1xf32>, tensor<3xf32>

// CHECK:    return %[[WHILE]]#3 : tensor<3xf32>

%test_2 (Arg_0.1: f32[3]) -> f32[3] {
  %constant.2 = s32[1] constant({0})
  %constant.3 = s32[2] constant({100, 100})
  %constant.4 = f32[1] constant({1})
  %Arg_0.1 = f32[3] parameter(0)

  %tuple.1 = (s32[1], s32[2]) tuple(s32[1] %constant.2, s32[2] %constant.3)
  %tuple.2 = (f32[1], f32[3]) tuple(f32[1] %constant.4, f32[3] %Arg_0.1)
  %tuple.3 = ((s32[1], s32[2]), (f32[1], f32[3])) tuple((s32[1], s32[2]) %tuple.1, (f32[1], f32[3]) %tuple.2)

  %while.1 = ((s32[1], s32[2]), (f32[1], f32[3])) while(((s32[1], s32[2]), (f32[1], f32[3])) %tuple.3), condition=%region_cond2, body=%region_body2
  %get-tuple-element.1 = (f32[1], f32[3]) get-tuple-element(((s32[1], s32[2]), (f32[1], f32[3])) %while.1), index=1
  ROOT %get-tuple-element.2 = f32[3] get-tuple-element((f32[1], f32[3]) %get-tuple-element.1), index=1
}

// ----------------------
// Test using nested typed tuples.
// ----------------------
%region_body3 (Arg_0: (s32[1], (s32[2], (f32[1], (f32[3]))))) -> (s32[1], (s32[2], (f32[1], (f32[3])))) {
  %Arg_0 = (s32[1], (s32[2], (f32[1], (f32[3])))) parameter(0)

  %get-tuple-element.1 = s32[1] get-tuple-element((s32[1], (s32[2], (f32[1], (f32[3])))) %Arg_0), index=0
  %get-tuple-element.2 = (s32[2], (f32[1], (f32[3]))) get-tuple-element((s32[1], (s32[2], (f32[1], (f32[3])))) %Arg_0), index=1
  %get-tuple-element.3 = s32[2] get-tuple-element((s32[2], (f32[1], (f32[3]))) %get-tuple-element.2), index=0
  %get-tuple-element.4 = (f32[1], (f32[3])) get-tuple-element((s32[2], (f32[1], (f32[3]))) %get-tuple-element.2), index=1
  %get-tuple-element.5 = f32[1] get-tuple-element((f32[1], (f32[3])) %get-tuple-element.4), index=0
  %get-tuple-element.6 = (f32[3]) get-tuple-element((f32[1], (f32[3])) %get-tuple-element.4), index=1
  %get-tuple-element.7 = f32[3] get-tuple-element((f32[3]) %get-tuple-element.6), index=0

  %broadcast.1 = f32[3] broadcast(f32[1] %get-tuple-element.5), dimensions={0}
  %add.1 = f32[3] add(f32[3] %get-tuple-element.7, f32[3] %broadcast.1)

  %tuple.0 = (f32[3]) tuple(f32[3] %add.1)
  %tuple.1 = (f32[1], (f32[3])) tuple(f32[1] %get-tuple-element.5, (f32[3]) %tuple.0)
  %tuple.2 = (s32[2], (f32[1], (f32[3]))) tuple(s32[2] %get-tuple-element.3, (f32[1], (f32[3])) %tuple.1)
  ROOT %tuple.3 = (s32[1], (s32[2], (f32[1], (f32[3])))) tuple(s32[1] %get-tuple-element.1, (s32[2], (f32[1], (f32[3]))) %tuple.2)
}

%region_cond3 (Arg_0: (s32[1], (s32[2], (f32[1], (f32[3]))))) -> pred[] {
  %constant.1 = s32[] constant(0)
  %Arg_0 = (s32[1], (s32[2], (f32[1], (f32[3])))) parameter(0)

  %get-tuple-element.1 =  s32[1] get-tuple-element((s32[1], (s32[2], (f32[1], (f32[3])))) %Arg_0), index=0
  %get-tuple-element.2 =  (s32[2], (f32[1], (f32[3]))) get-tuple-element((s32[1], (s32[2], (f32[1], (f32[3])))) %Arg_0), index=1
  %get-tuple-element.3 =  s32[2] get-tuple-element((s32[2], (f32[1], (f32[3]))) %get-tuple-element.2), index=0

  %reduce.1 = s32[] reduce(%get-tuple-element.1, %constant.1), dimensions={0}, to_apply=%reduce_helper_add
  %reduce.2 = s32[] reduce(%get-tuple-element.3, %constant.1), dimensions={0}, to_apply=%reduce_helper_add

  ROOT %compare.1 = pred[] compare(s32[] %reduce.1, s32[] %reduce.2), direction=LT
}


// CHECK-LABEL: func private @test_3
// CHECK-SAME:    (%[[ARG_0:.*]]: tensor<3xf32>) -> tensor<3xf32> {
// CHECK-NEXT:    %[[CST_0:.*]] = mhlo.constant dense<0> : tensor<1xi32>
// CHECK-NEXT:    %[[CST_1:.*]] = mhlo.constant dense<100> : tensor<2xi32>
// CHECK-NEXT:    %[[CST_2:.*]] = mhlo.constant dense<1.000000e+00> : tensor<1xf32>
// CHECK-NEXT:    %[[WHILE:.*]]:4 = mhlo.while(%[[ARG_1:.*]] = %[[CST_0]], %[[ARG_2:.*]] = %[[CST_1]], %[[ARG_3:.*]] = %[[CST_2]], %[[ARG_4:.*]] = %[[ARG_0]])
// CHECK:           %[[CST_4:.*]] = mhlo.constant dense<0> : tensor<i32>
// CHECK-NEXT:      %[[RED_5:.*]] = mhlo.reduce(%[[ARG_1]] init: %[[CST_4]])
// CHECK:           %[[RED_6:.*]] = mhlo.reduce(%[[ARG_2]] init: %[[CST_4]])
// CHECK:           %[[CMP_7:.*]] = mhlo.compare LT, %[[RED_5]], %[[RED_6]] : (tensor<i32>, tensor<i32>) -> tensor<i1>
// CHECK:           mhlo.return %[[CMP_7]] : tensor<i1>

// CHECK:           %[[BDCAST_4:.*]] = "mhlo.broadcast_in_dim"(%[[ARG_3]]) <{broadcast_dimensions = dense<0> : tensor<1xi64>}> : (tensor<1xf32>) -> tensor<3xf32>
// CHECK:           %[[ADD_5:.*]] = mhlo.add %[[ARG_4]], %[[BDCAST_4]] : tensor<3xf32>
// CHECK:           mhlo.return %[[ARG_1]], %[[ARG_2]], %[[ARG_3]], %[[ADD_5]] : tensor<1xi32>, tensor<2xi32>, tensor<1xf32>, tensor<3xf32>
// CHECK:    return %[[WHILE]]#3 : tensor<3xf32>

%test_3 (Arg_0.1: f32[3]) -> f32[3] {

  %constant.0 = s32[1] constant({0})
  %constant.1 = s32[2] constant({100, 100})
  %constant.2 = f32[1] constant({1})
  %Arg_0.1 = f32[3] parameter(0)

  %tuple.0 = (f32[3]) tuple(f32[3] %Arg_0.1)
  %tuple.1 = (f32[1], (f32[3])) tuple(f32[1] %constant.2, (f32[3]) %tuple.0)
  %tuple.2 = (s32[2], (f32[1], (f32[3]))) tuple(s32[2] %constant.1, (f32[1], (f32[3])) %tuple.1)
  %tuple.3 = (s32[1], (s32[2], (f32[1], (f32[3])))) tuple(s32[1] %constant.0, (s32[2], (f32[1], (f32[3]))) %tuple.2)

  %while.1 = (s32[1], (s32[2], (f32[1], (f32[3])))) while((s32[1], (s32[2], (f32[1], (f32[3])))) %tuple.3), condition=%region_cond3, body=%region_body3
  %get-tuple-element.1 = (s32[2], (f32[1], (f32[3]))) get-tuple-element((s32[1], (s32[2], (f32[1], (f32[3])))) %while.1), index=1
  %get-tuple-element.2 = (f32[1], (f32[3])) get-tuple-element((s32[2], (f32[1], (f32[3]))) %get-tuple-element.1), index=1
  %get-tuple-element.3 = (f32[3]) get-tuple-element((f32[1], (f32[3])) %get-tuple-element.2), index=1
  ROOT %get-tuple-element.4 = f32[3] get-tuple-element((f32[3]) %get-tuple-element.3), index=0
}

// ----------------------
// Test using tuple operands of while
// ----------------------
%region_body4 (Arg_0: (s32[], (s32[], (s32[])))) -> (s32[], (s32[], (s32[]))) {
  %Arg_0 = (s32[], (s32[], (s32[]))) parameter(0)

  %get-tuple-element.1 =  s32[] get-tuple-element((s32[], (s32[], (s32[]))) %Arg_0), index=0
  %get-tuple-element.2 =  (s32[], (s32[])) get-tuple-element((s32[], (s32[], (s32[]))) %Arg_0), index=1
  %get-tuple-element.3 =  s32[] get-tuple-element((s32[], (s32[])) %get-tuple-element.2), index=0
  %get-tuple-element.4 =  (s32[]) get-tuple-element((s32[], (s32[])) %get-tuple-element.2), index=1
  %get-tuple-element.5 =  s32[] get-tuple-element((s32[]) %get-tuple-element.4), index=0

  %add.1 = s32[] add(s32[] %get-tuple-element.1, s32[] %get-tuple-element.3)

  ROOT %tuple.0 =  (s32[], (s32[], (s32[]))) tuple(s32[] %add.1, (s32[], (s32[])) %get-tuple-element.2)
}

%region_cond4 (Arg_0: (s32[], (s32[], (s32[])))) -> pred[] {
  %Arg_0 = (s32[], (s32[], (s32[]))) parameter(0)

  %get-tuple-element.1 =  s32[] get-tuple-element((s32[], (s32[], (s32[]))) %Arg_0), index=0
  %get-tuple-element.2 =  (s32[], (s32[])) get-tuple-element((s32[], (s32[], (s32[]))) %Arg_0), index=1
  %get-tuple-element.3 =  (s32[]) get-tuple-element((s32[], (s32[])) %get-tuple-element.2), index=1
  %get-tuple-element.4 =  s32[] get-tuple-element((s32[]) %get-tuple-element.3), index=0

  ROOT %compare.1 = pred[] compare(s32[] %get-tuple-element.1, s32[] %get-tuple-element.4), direction=LT
}

// CHECK-LABEL: func private @test_4
// CHECK-SAME:    (%[[ARG_0:.*]]: tuple<tensor<i32>, tuple<tensor<i32>, tuple<tensor<i32>>>>) -> tuple<tensor<i32>, tuple<tensor<i32>, tuple<tensor<i32>>>>
// CHECK-NEXT:    %[[GTE_0:.*]] = mhlo.get_tuple_element %arg0[0] : (tuple<tensor<i32>, tuple<tensor<i32>, tuple<tensor<i32>>>>) -> tensor<i32>
// CHECK-NEXT:    %[[GTE_1:.*]] = mhlo.get_tuple_element %arg0[1] : (tuple<tensor<i32>, tuple<tensor<i32>, tuple<tensor<i32>>>>) -> tuple<tensor<i32>, tuple<tensor<i32>>>
// CHECK-NEXT:    %[[GTE_2:.*]] = mhlo.get_tuple_element %1[0] : (tuple<tensor<i32>, tuple<tensor<i32>>>) -> tensor<i32>
// CHECK-NEXT:    %[[GTE_3:.*]] = mhlo.get_tuple_element %1[1] : (tuple<tensor<i32>, tuple<tensor<i32>>>) -> tuple<tensor<i32>>
// CHECK-NEXT:    %[[GTE_4:.*]] = mhlo.get_tuple_element %3[0] : (tuple<tensor<i32>>) -> tensor<i32>
// CHECK-NEXT:    %[[WHILE:.*]]:3 = mhlo.while(%[[ITER_ARG1:.*]] = %[[GTE_0]], %[[ITER_ARG2:.*]] = %[[GTE_2]], %[[ITER_ARG3:.*]] = %[[GTE_4]])
// CHECK:           %[[CMP:.*]] = mhlo.compare LT, %[[ITER_ARG1]], %[[ITER_ARG3]] : (tensor<i32>, tensor<i32>) -> tensor<i1>
// CHECK-NEXT:      mhlo.return %[[CMP]]
// CHECK-NEXT:    } do {
// CHECK-NEXT:      %[[ADD:.*]] = mhlo.add %[[ITER_ARG1]], %[[ITER_ARG2]] : tensor<i32>
// CHECK-NEXT:      mhlo.return %[[ADD]], %[[ITER_ARG2]], %[[ITER_ARG3]] : tensor<i32>, tensor<i32>, tensor<i32>

// CHECK:         %[[TUPLE_6:.*]] = mhlo.tuple %[[WHILE]]#2 : tuple<tensor<i32>>
// CHECK:         %[[TUPLE_7:.*]] = mhlo.tuple %[[WHILE]]#1, %[[TUPLE_6]] : tuple<tensor<i32>, tuple<tensor<i32>>>
// CHECK:         %[[TUPLE_8:.*]] = mhlo.tuple %[[WHILE]]#0, %[[TUPLE_7]] {xla_shape = "(s32[], (s32[], (s32[])))"} : tuple<tensor<i32>, tuple<tensor<i32>, tuple<tensor<i32>>>>
// CHECK:          return %[[TUPLE_8]] : tuple<tensor<i32>, tuple<tensor<i32>, tuple<tensor<i32>>>>

// FLATTEN-CHECK-LABEL: func private @test_4
// FLATTEN-CHECK-SAME:    (%[[ARG_0:.*]]: tensor<i32>, %[[ARG_1:.*]]: tensor<i32>, %[[ARG_2:.*]]: tensor<i32>) -> (tensor<i32>, tensor<i32>, tensor<i32>)
// FLATTEN-CHECK-NEXT:    %[[WHILE:.*]]:3 = mhlo.while(%[[ITER_ARG1:.*]] = %[[ARG_0]], %[[ITER_ARG2:.*]] = %[[ARG_1]], %[[ITER_ARG3:.*]] = %[[ARG_2]])
// FLATTEN-CHECK:         return %[[WHILE]]#0, %[[WHILE]]#1, %[[WHILE]]#2

%test_4 (Arg_0: (s32[], (s32[], (s32[])))) -> (s32[], (s32[], (s32[]))) {
  %Arg_0 = (s32[], (s32[], (s32[]))) parameter(0)
  ROOT %while.1 = (s32[], (s32[], (s32[]))) while((s32[], (s32[], (s32[]))) %Arg_0), condition=%region_cond4, body=%region_body4
}

// ----------------------
// Test using tuple operands of while with one element
// ----------------------
region_body5 {
  constant.7 = pred[] constant(false)
  parameter.5 = (f32[3,3]{1,0}) parameter(0)
  get-tuple-element.6 = f32[3,3]{1,0} get-tuple-element(parameter.5), index=0
  constant.8 = f32[] constant(2)
  broadcast.9 = f32[3,3]{1,0} broadcast(constant.8), dimensions={}
  add.10 = f32[3,3]{1,0} add(get-tuple-element.6, broadcast.9)
  ROOT tuple.11 = (f32[3,3]{1,0}) tuple(add.10)
}

primitive_computation_add__1.12 {
  constant.15 = pred[] constant(false)
  parameter.13 = f32[] parameter(0)
  parameter.14 = f32[] parameter(1)
  ROOT add.16 = f32[] add(parameter.13, parameter.14)
}

region_cond5 {
  constant.20 = pred[] constant(false)
  parameter.18 = (f32[3,3]{1,0}) parameter(0)
  get-tuple-element.19 = f32[3,3]{1,0} get-tuple-element(parameter.18), index=0
  constant.21 = f32[] constant(0)
  reduce.22 = f32[] reduce(get-tuple-element.19, constant.21), dimensions={0,1}, to_apply=primitive_computation_add__1.12
  constant.23 = f32[] constant(100)
  ROOT compare.24 = pred[] compare(reduce.22, constant.23), direction=LT
}

// CHECK-LABEL: func private @test_5
// CHECK-SAME:    (%[[ARG_0:.*]]: tensor<3x3xf32>) -> tensor<3x3xf32>
// CHECK-NEXT:    %[[CST_0:.*]] = mhlo.constant dense<false> : tensor<i1>
// CHECK-NEXT:    %[[WHILE:.*]] = mhlo.while(%[[ITER_ARG:.*]] = %[[ARG_0]])
// CHECK-DAG:           %[[CST_2:.*]] = mhlo.constant dense<false> : tensor<i1>
// CHECK-DAG:           %[[CST_3:.*]] = mhlo.constant dense<0.000000e+00> : tensor<f32>
// CHECK-NEXT:      %[[REDUCE:.*]] = mhlo.reduce(%[[ITER_ARG]] init: %[[CST_3]])
// CHECK-NEXT:      reducer(%[[ARG_2:.*]]: tensor<f32>, %[[ARG_3:.*]]: tensor<f32>)
// CHECK:           %[[CST_4:.*]] = mhlo.constant dense<1.000000e+02> : tensor<f32>
// CHECK:           %[[CMP:.*]] = mhlo.compare LT, %[[REDUCE]], %[[CST_4]] : (tensor<f32>, tensor<f32>) -> tensor<i1>
// CHECK:           mhlo.return %[[CMP]] : tensor<i1>
// CHECK-NEXT:    } do {
// CHECK-NEXT:      %[[CST_2:.*]] = mhlo.constant dense<false> : tensor<i1>
// CHECK-NEXT:      %[[CST_3:.*]] = mhlo.constant dense<2.000000e+00> : tensor<f32>
// CHECK-NEXT:      %[[BDCAST:.*]] = "mhlo.broadcast_in_dim"(%[[CST_3]]) <{broadcast_dimensions = dense<> : tensor<0xi64>}> : (tensor<f32>) -> tensor<3x3xf32>
// CHECK-NEXT:      %[[ADD:.*]] = mhlo.add %[[ITER_ARG]], %[[BDCAST]] : tensor<3x3xf32>
// CHECK-NEXT:      mhlo.return %[[ADD]] : tensor<3x3xf32>
// CHECK:    return %[[WHILE]] : tensor<3x3xf32>

%test_5 {
  constant.2 = pred[] constant(false)
  parameter.1 = f32[3,3]{1,0} parameter(0)
  tuple.3 = (f32[3,3]{1,0}) tuple(parameter.1)
  while.25 = (f32[3,3]{1,0}) while(tuple.3), condition=region_cond5, body=region_body5
  ROOT get-tuple-element.26 = f32[3,3]{1,0} get-tuple-element(while.25), index=0
}

// ----------------------
// Test using custom-call with tuple-arg within while body
// ----------------------
%region_body6 (Arg_0: (s32[], s32[])) -> (s32[], s32[]) {
  %Arg_0 = (s32[], s32[]) parameter(0)
  %get-tuple-element.0 = s32[] get-tuple-element((s32[], s32[]) %Arg_0), index=0
  %get-tuple-element.1 = s32[] get-tuple-element((s32[], s32[]) %Arg_0), index=1
  ROOT %custom-call =  (s32[], s32[]) custom-call(s32[] %get-tuple-element.0, (s32[], s32[]) %Arg_0), custom_call_target="foo", backend_config="bar"
}

%region_cond6 (Arg_0: (s32[], s32[])) -> pred[] {
  %Arg_0 = (s32[], s32[]) parameter(0)
  %get-tuple-element.0 = s32[] get-tuple-element((s32[], s32[]) %Arg_0), index=0
  %get-tuple-element.1 = s32[] get-tuple-element((s32[], s32[]) %Arg_0), index=1
  ROOT %compare.0 = pred[] compare(s32[] %get-tuple-element.0, s32[] %get-tuple-element.1), direction=LT
}

// CHECK-LABEL: func private @test_6
// CHECK-SAME:   (%[[ARG_0:.*]]: tensor<i32>) -> tensor<i32>
// CHECK-NEXT:    %[[CST_0:.*]] = mhlo.constant dense<0> : tensor<i32>
// CHECK-NEXT:    %[[WHILE:.*]]:2 = mhlo.while(%[[ITER_ARG_1:.*]] = %[[CST_0]], %[[ITER_ARG_2:.*]] = %[[ARG_0]])  : tensor<i32>, tensor<i32>
// CHECK-NEXT:      cond {
// CHECK-NEXT:        %[[CMP:.*]] = mhlo.compare LT, %[[ITER_ARG_1]], %[[ITER_ARG_2]] : (tensor<i32>, tensor<i32>) -> tensor<i1>
// CHECK-NEXT:        mhlo.return %[[CMP]] : tensor<i1>
// CHECK-NEXT:    } do {
// CHECK-NEXT:        %[[TUPLE:.*]] = mhlo.tuple %[[ITER_ARG_1]], %[[ITER_ARG_2]] : tuple<tensor<i32>, tensor<i32>>
// CHECK-NEXT:        %[[CUSTOMCALL:.*]] = mhlo.custom_call @foo(%[[ITER_ARG_1]], %[[TUPLE]]) [[CONFIG:.*]] : (tensor<i32>, tuple<tensor<i32>, tensor<i32>>) -> tuple<tensor<i32>, tensor<i32>>
// CHECK-NEXT:        %[[GTE1:.*]] = mhlo.get_tuple_element %[[CUSTOMCALL]][0] : (tuple<tensor<i32>, tensor<i32>>) -> tensor<i32>
// CHECK-NEXT:        %[[GTE2:.*]] = mhlo.get_tuple_element %[[CUSTOMCALL]][1] : (tuple<tensor<i32>, tensor<i32>>) -> tensor<i32>
// CHECK-NEXT:        mhlo.return %[[GTE1]], %[[GTE2]] : tensor<i32>, tensor<i32>
// CHECK-NEXT:    }
// CHECK-NEXT:    return %[[WHILE]]#0 : tensor<i32>

%test_6 {
  %constant.0 = s32[] constant(0)
  %Arg_0 = s32[] parameter(0)
  %tuple.0 = (s32[], s32[]) tuple(s32[] %constant.0, s32[] %Arg_0)
  %while.0 = (s32[], s32[]) while((s32[], s32[]) %tuple.0), condition=%region_cond6, body=%region_body6
  ROOT %get-tuple-element.21 = s32[] get-tuple-element((s32[], s32[]) %while.0), index=0
}

