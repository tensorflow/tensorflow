// RUN: xla-translate -hlo-text-to-mlir-hlo -hlo-flatten-computation-args-result=false %s -o - | FileCheck %s
// RUN: hlo-translate -hlo-to-mlir -emit-mhlo %s | FileCheck %s

HloModule frontend_attributes, entry_computation_layout={(f32[], f32[])->f32[]}

comp {
  param = f32[] parameter(0)
  ROOT negate = f32[] negate(param)
}

// CHECK-LABEL: func.func @main
// CHECK: %arg0: tensor<f32>,
// CHECK: %arg1: tensor<f32> {mhlo.frontend_attributes = {key = "value"}
ENTRY main {
  param = f32[] parameter(0)
  param1 = f32[] parameter(1), frontend_attributes={key="value"}
  // CHECK:      call @comp(%arg1) {mhlo.frontend_attributes = {k = "v"}}
  // CHECK:      mhlo.add
  // CHECK:      mhlo.frontend_attributes = {
  // CHECK-DAG:    _dummy_frontend_attribute = "xyz"
  // CHECK-DAG:    _xla_compute_type = "host"
  // CHECK:      }
  call = f32[] call(param1), to_apply=comp, frontend_attributes={k="v"}
  ROOT add = f32[] add(param, call), frontend_attributes={
    _xla_compute_type="host", _dummy_frontend_attribute="xyz"}
}
