// RUN: hlo-translate -hlo-to-mlir -emit-mhlo -split-input-file -verify-diagnostics %s | FileCheck %s

HloModule main, entry_computation_layout={(f32[1,1,<=1801]{2,1,0})->f32[1,16,1,<=1801]{3,2,1,0}}

ENTRY %main.3 (Arg_0.1: f32[1,1,<=1801]) -> f32[1,16,1,<=1801] {
  %Arg_0.1 = f32[1,1,<=1801] parameter(0)
  // CHECK: [[BROADCAST:%.*]] = "mhlo.broadcast_in_dim"(%arg0) <{broadcast_dimensions = dense<[0, 2, 3]> : tensor<3xi64>}> : (tensor<1x1x?xf32, #mhlo.type_extensions<bounds = [?, ?, 1801]>>) -> tensor<1x16x1x?xf32, #mhlo.type_extensions<bounds = [?, ?, ?, 1801]>>
  // CHECK-NEXT: return [[BROADCAST]]
  ROOT %broadcast.2 = f32[1,16,1,<=1801] broadcast(f32[1,1,<=1801] %Arg_0.1), dimensions={0,2,3}
}

// -----

HloModule main, entry_computation_layout={(pred[<=1801,1]{1,0})->pred[<=1801,1]{1,0}}

ENTRY %convert_with_predicate (Arg_0.1: pred[<=1801,1]) -> pred[<=1801,1] {
  // CHECK:      [[CST:%.*]] = mhlo.constant dense<false> : tensor<1801x1xi1>
  // CHECK-NEXT: [[GDS:%.*]] = "mhlo.get_dimension_size"(%arg0) <{dimension = 0 : i64}> : (tensor<?x1xi1, #mhlo.type_extensions<bounds = [1801, ?]>>) -> tensor<i32>
  // CHECK-NEXT: [[SDS:%.*]] = "mhlo.set_dimension_size"([[CST]], [[GDS]]) <{dimension = 0 : i64}> : (tensor<1801x1xi1>, tensor<i32>) -> tensor<?x1xi1, #mhlo.type_extensions<bounds = [1801, ?]>>
  // CHECK-NEXT: [[CMP:%.*]] = mhlo.compare  NE, %arg0, [[SDS]] : (tensor<?x1xi1, #mhlo.type_extensions<bounds = [1801, ?]>>, tensor<?x1xi1, #mhlo.type_extensions<bounds = [1801, ?]>>) -> tensor<?x1xi1, #mhlo.type_extensions<bounds = [1801, ?]>>
  // CHECK-NEXT: return [[CMP]] : tensor<?x1xi1, #mhlo.type_extensions<bounds = [1801, ?]>>
  %Arg_0.1 = pred[<=1801,1] parameter(0)
  ROOT %convert_pred = pred[<=1801,1] convert(%Arg_0.1)
}

// -----

// expected-error@-3 {{Failed to convert HLO to MLIR: Currently HLO to MHLO only supports a single bounded dimension.}}
HloModule main, entry_computation_layout={(pred[<=1801,<=1801]{1,0})->pred[<=1801,<=1801]{1,0}}

ENTRY %convert_with_predicate_multiple_bounded_dimensions (Arg_0.1: pred[<=1801,<=1801]) -> pred[<=1801,<=1801] {
  %Arg_0.1 = pred[<=1801,<=1801] parameter(0)
  ROOT %convert_pred = pred[<=1801,<=1801] convert(%Arg_0.1)
}

// -----

HloModule main, entry_computation_layout={(f32[<=1801,1]{1,0})->f32[<=1801,1]{1,0}}

ENTRY %convert_with_f32icate (Arg_0.1: f32[<=1801,1]) -> f32[<=1801,1] {
  // CHECK:       [[CVT:%.*]] = mhlo.convert %arg0 : tensor<?x1xf32, #mhlo.type_extensions<bounds = [1801, ?]>>
  // CHECK-NEXT:  return [[CVT]] : tensor<?x1xf32, #mhlo.type_extensions<bounds = [1801, ?]>>
  %Arg_0.1 = f32[<=1801,1] parameter(0)
  ROOT %convert_f32 = f32[<=1801,1] convert(%Arg_0.1)
}

// -----

HloModule main, entry_computation_layout={(f32[<=1801,1]{1,0})->f32[<=1801,1]{1,0}}

ENTRY %convert_with_f32icate (Arg_0.1: f32[<=1801,1]) -> f32[<=1801,1] {
  // CHECK:       [[CVT:%.*]] = mhlo.convert %arg0 : tensor<?x1xf32, #mhlo.type_extensions<bounds = [1801, ?]>>
  // CHECK-NEXT:  return [[CVT]] : tensor<?x1xf32, #mhlo.type_extensions<bounds = [1801, ?]>>
  %Arg_0.1 = f32[<=1801,1] parameter(0)
  ROOT %convert_f32 = f32[<=1801,1] convert(%Arg_0.1)
}

// -----

HloModule main, entry_computation_layout={(f32[<=5]{0})->f32[1,<=5]{1,0}}

ENTRY %main.3 (Arg_0.1: f32[<=5]) -> f32[1,<=5] {
  %Arg_0.1 = f32[<=5] parameter(0)
  // CHECK: mhlo.reshape %arg0 : (tensor<?xf32, #mhlo.type_extensions<bounds = [5]>>) -> tensor<1x?xf32, #mhlo.type_extensions<bounds = [?, 5]>>
  ROOT %reshape.2 = f32[1,<=5] reshape(f32[<=5] %Arg_0.1)
}
