HloModule jit_train_step, input_output_alias={ {0}: (0, {}, may-alias), {1}: (1, {}, may-alias), {2}: (2, {}, may-alias), {3}: (3, {}, may-alias), {4}: (4, {}, may-alias), {5}: (5, {}, may-alias), {6}: (6, {}, may-alias), {7}: (7, {}, may-alias), {8}: (8, {}, may-alias), {9}: (9, {}, may-alias), {10}: (10, {}, may-alias), {11}: (11, {}, may-alias), {12}: (12, {}, may-alias), {13}: (13, {}, may-alias), {14}: (14, {}, may-alias), {15}: (15, {}, may-alias), {16}: (16, {}, may-alias), {17}: (17, {}, may-alias), {18}: (18, {}, may-alias), {19}: (19, {}, may-alias), {20}: (20, {}, may-alias), {21}: (21, {}, may-alias), {22}: (22, {}, may-alias), {23}: (23, {}, may-alias), {24}: (24, {}, may-alias), {25}: (25, {}, may-alias), {26}: (26, {}, may-alias), {27}: (27, {}, may-alias), {28}: (28, {}, may-alias), {29}: (29, {}, may-alias), {30}: (30, {}, may-alias), {31}: (31, {}, may-alias), {32}: (32, {}, may-alias), {33}: (33, {}, may-alias), {34}: (34, {}, may-alias), {35}: (35, {}, may-alias), {36}: (36, {}, may-alias), {37}: (37, {}, may-alias), {38}: (38, {}, may-alias), {39}: (39, {}, may-alias), {40}: (40, {}, may-alias), {41}: (41, {}, may-alias), {42}: (42, {}, may-alias), {43}: (43, {}, may-alias), {44}: (44, {}, may-alias), {45}: (45, {}, may-alias), {46}: (46, {}, may-alias), {47}: (47, {}, may-alias), {48}: (48, {}, may-alias), {49}: (49, {}, may-alias), {50}: (50, {}, may-alias), {51}: (51, {}, may-alias), {52}: (52, {}, may-alias), {53}: (53, {}, may-alias), {54}: (54, {}, may-alias), {55}: (55, {}, may-alias), {56}: (56, {}, may-alias), {57}: (57, {}, may-alias), {58}: (58, {}, may-alias), {59}: (59, {}, may-alias), {60}: (60, {}, may-alias), {61}: (61, {}, may-alias), {62}: (62, {}, may-alias), {63}: (63, {}, may-alias), {64}: (64, {}, may-alias), {65}: (65, {}, may-alias), {66}: (66, {}, may-alias), {67}: (67, {}, may-alias), {68}: (68, {}, may-alias), {69}: (69, {}, may-alias), {70}: (70, {}, may-alias), {71}: (71, {}, may-alias), {72}: (72, {}, may-alias), {73}: (73, {}, may-alias), {74}: (74, {}, may-alias), {75}: (75, {}, may-alias), {76}: (76, {}, may-alias), {77}: (77, {}, may-alias), {78}: (78, {}, may-alias), {79}: (79, {}, may-alias), {80}: (80, {}, may-alias), {81}: (81, {}, may-alias), {82}: (82, {}, may-alias), {83}: (83, {}, may-alias), {84}: (84, {}, may-alias), {85}: (85, {}, may-alias), {86}: (86, {}, may-alias), {87}: (87, {}, may-alias), {88}: (88, {}, may-alias), {89}: (89, {}, may-alias), {90}: (90, {}, may-alias), {91}: (91, {}, may-alias), {92}: (92, {}, may-alias), {93}: (93, {}, may-alias), {94}: (94, {}, may-alias), {95}: (95, {}, may-alias), {96}: (96, {}, may-alias), {97}: (97, {}, may-alias), {98}: (98, {}, may-alias), {99}: (99, {}, may-alias), {100}: (100, {}, may-alias), {101}: (101, {}, may-alias), {102}: (102, {}, may-alias), {103}: (103, {}, may-alias), {104}: (104, {}, may-alias), {105}: (105, {}, may-alias), {106}: (106, {}, may-alias), {107}: (107, {}, may-alias), {108}: (108, {}, may-alias), {109}: (109, {}, may-alias), {110}: (110, {}, may-alias), {111}: (111, {}, may-alias), {112}: (112, {}, may-alias), {113}: (113, {}, may-alias), {114}: (114, {}, may-alias), {115}: (115, {}, may-alias), {116}: (116, {}, may-alias), {117}: (117, {}, may-alias), {118}: (118, {}, may-alias), {119}: (119, {}, may-alias), {120}: (120, {}, may-alias), {121}: (121, {}, may-alias), {122}: (122, {}, may-alias), {123}: (123, {}, may-alias), {124}: (124, {}, may-alias), {125}: (125, {}, may-alias), {126}: (126, {}, may-alias), {127}: (127, {}, may-alias), {128}: (128, {}, may-alias), {129}: (129, {}, may-alias), {130}: (130, {}, may-alias), {131}: (131, {}, may-alias), {132}: (132, {}, may-alias), {133}: (133, {}, may-alias), {134}: (134, {}, may-alias), {135}: (135, {}, may-alias), {136}: (136, {}, may-alias), {137}: (137, {}, may-alias), {138}: (138, {}, may-alias), {139}: (139, {}, may-alias), {140}: (140, {}, may-alias), {141}: (141, {}, may-alias), {142}: (142, {}, may-alias), {143}: (143, {}, may-alias), {144}: (144, {}, may-alias), {145}: (145, {}, may-alias), {146}: (146, {}, may-alias), {147}: (147, {}, may-alias), {148}: (148, {}, may-alias), {149}: (149, {}, may-alias), {150}: (150, {}, may-alias), {151}: (151, {}, may-alias), {152}: (152, {}, may-alias), {153}: (153, {}, may-alias), {154}: (154, {}, may-alias), {155}: (155, {}, may-alias), {156}: (156, {}, may-alias), {157}: (157, {}, may-alias), {158}: (158, {}, may-alias), {159}: (159, {}, may-alias), {160}: (160, {}, may-alias), {161}: (161, {}, may-alias), {162}: (162, {}, may-alias), {163}: (163, {}, may-alias), {164}: (164, {}, may-alias), {165}: (165, {}, may-alias), {166}: (166, {}, may-alias), {167}: (167, {}, may-alias), {168}: (168, {}, may-alias), {169}: (169, {}, may-alias), {170}: (170, {}, may-alias), {171}: (171, {}, may-alias), {172}: (172, {}, may-alias), {173}: (173, {}, may-alias), {174}: (174, {}, may-alias), {175}: (175, {}, may-alias), {176}: (176, {}, may-alias), {177}: (177, {}, may-alias), {178}: (178, {}, may-alias), {179}: (179, {}, may-alias), {180}: (180, {}, may-alias), {181}: (181, {}, may-alias), {182}: (182, {}, may-alias), {183}: (183, {}, may-alias), {184}: (184, {}, may-alias), {185}: (185, {}, may-alias), {186}: (186, {}, may-alias), {187}: (187, {}, may-alias), {188}: (188, {}, may-alias), {189}: (189, {}, may-alias), {190}: (190, {}, may-alias), {191}: (191, {}, may-alias), {192}: (192, {}, may-alias), {193}: (193, {}, may-alias), {194}: (194, {}, may-alias), {195}: (195, {}, may-alias), {196}: (196, {}, may-alias), {197}: (197, {}, may-alias), {198}: (198, {}, may-alias), {199}: (199, {}, may-alias), {200}: (200, {}, may-alias), {201}: (201, {}, may-alias), {202}: (202, {}, may-alias), {203}: (203, {}, may-alias), {204}: (204, {}, may-alias), {205}: (205, {}, may-alias), {206}: (206, {}, may-alias), {207}: (207, {}, may-alias), {208}: (208, {}, may-alias), {209}: (209, {}, may-alias), {210}: (210, {}, may-alias), {211}: (211, {}, may-alias), {212}: (212, {}, may-alias), {213}: (213, {}, may-alias), {214}: (214, {}, may-alias), {215}: (215, {}, may-alias), {216}: (216, {}, may-alias), {217}: (217, {}, may-alias), {218}: (218, {}, may-alias), {219}: (219, {}, may-alias), {220}: (220, {}, may-alias), {221}: (221, {}, may-alias), {222}: (222, {}, may-alias), {223}: (223, {}, may-alias), {224}: (224, {}, may-alias), {225}: (225, {}, may-alias), {226}: (226, {}, may-alias), {227}: (227, {}, may-alias), {228}: (228, {}, may-alias), {229}: (229, {}, may-alias), {230}: (230, {}, may-alias), {231}: (231, {}, may-alias), {232}: (232, {}, may-alias), {233}: (233, {}, may-alias), {234}: (234, {}, may-alias), {235}: (235, {}, may-alias), {236}: (236, {}, may-alias), {237}: (237, {}, may-alias), {238}: (238, {}, may-alias), {239}: (239, {}, may-alias), {240}: (240, {}, may-alias), {241}: (241, {}, may-alias), {242}: (242, {}, may-alias), {243}: (243, {}, may-alias), {244}: (244, {}, may-alias), {245}: (245, {}, may-alias), {246}: (246, {}, may-alias), {247}: (247, {}, may-alias), {248}: (248, {}, may-alias), {249}: (249, {}, may-alias), {250}: (250, {}, may-alias), {251}: (251, {}, may-alias), {252}: (252, {}, may-alias), {253}: (253, {}, may-alias), {254}: (254, {}, may-alias), {255}: (255, {}, may-alias), {256}: (256, {}, may-alias), {257}: (257, {}, may-alias), {258}: (258, {}, may-alias), {259}: (259, {}, may-alias), {260}: (260, {}, may-alias), {261}: (261, {}, may-alias), {262}: (262, {}, may-alias), {263}: (263, {}, may-alias), {264}: (264, {}, may-alias), {265}: (265, {}, may-alias), {266}: (266, {}, may-alias), {267}: (267, {}, may-alias), {268}: (268, {}, may-alias), {269}: (269, {}, may-alias), {270}: (270, {}, may-alias), {271}: (271, {}, may-alias), {272}: (272, {}, may-alias), {273}: (273, {}, may-alias), {274}: (274, {}, may-alias), {275}: (275, {}, may-alias), {276}: (276, {}, may-alias), {277}: (277, {}, may-alias), {278}: (278, {}, may-alias), {279}: (279, {}, may-alias), {280}: (280, {}, may-alias), {281}: (281, {}, may-alias), {282}: (282, {}, may-alias), {283}: (283, {}, may-alias), {284}: (284, {}, may-alias), {285}: (285, {}, may-alias), {286}: (286, {}, may-alias), {287}: (287, {}, may-alias), {288}: (288, {}, may-alias), {289}: (289, {}, may-alias), {290}: (290, {}, may-alias), {291}: (291, {}, may-alias), {292}: (292, {}, may-alias), {293}: (293, {}, may-alias), {294}: (294, {}, may-alias), {295}: (295, {}, may-alias), {296}: (296, {}, may-alias), {297}: (297, {}, may-alias), {298}: (298, {}, may-alias), {299}: (299, {}, may-alias), {300}: (300, {}, may-alias), {301}: (301, {}, may-alias), {302}: (302, {}, may-alias), {303}: (303, {}, may-alias), {304}: (304, {}, may-alias), {305}: (305, {}, may-alias), {306}: (306, {}, may-alias), {307}: (307, {}, may-alias), {308}: (308, {}, may-alias), {309}: (309, {}, may-alias), {310}: (310, {}, may-alias), {311}: (311, {}, may-alias), {312}: (312, {}, may-alias), {313}: (313, {}, may-alias), {314}: (314, {}, may-alias), {315}: (315, {}, may-alias), {316}: (316, {}, may-alias), {317}: (317, {}, may-alias), {318}: (318, {}, may-alias), {319}: (319, {}, may-alias), {320}: (320, {}, may-alias), {321}: (321, {}, may-alias), {322}: (322, {}, may-alias), {323}: (323, {}, may-alias), {324}: (324, {}, may-alias), {325}: (325, {}, may-alias), {326}: (326, {}, may-alias), {327}: (327, {}, may-alias), {328}: (328, {}, may-alias), {329}: (329, {}, may-alias), {330}: (330, {}, may-alias), {331}: (331, {}, may-alias), {332}: (332, {}, may-alias), {333}: (333, {}, may-alias), {334}: (334, {}, may-alias), {335}: (335, {}, may-alias), {336}: (336, {}, may-alias), {337}: (337, {}, may-alias), {338}: (338, {}, may-alias), {339}: (339, {}, may-alias), {340}: (340, {}, may-alias), {341}: (341, {}, may-alias), {342}: (342, {}, may-alias), {343}: (343, {}, may-alias), {344}: (344, {}, may-alias), {345}: (345, {}, may-alias), {346}: (346, {}, may-alias), {347}: (347, {}, may-alias), {348}: (348, {}, may-alias), {349}: (349, {}, may-alias), {350}: (350, {}, may-alias), {351}: (351, {}, may-alias), {352}: (352, {}, may-alias), {353}: (353, {}, may-alias), {354}: (354, {}, may-alias), {355}: (355, {}, may-alias), {356}: (356, {}, may-alias), {357}: (357, {}, may-alias), {358}: (358, {}, may-alias), {359}: (359, {}, may-alias), {360}: (360, {}, may-alias), {361}: (361, {}, may-alias), {362}: (362, {}, may-alias), {363}: (363, {}, may-alias), {364}: (364, {}, may-alias), {365}: (365, {}, may-alias), {366}: (366, {}, may-alias), {367}: (367, {}, may-alias), {368}: (368, {}, may-alias), {369}: (369, {}, may-alias), {370}: (370, {}, may-alias), {371}: (371, {}, may-alias), {372}: (372, {}, may-alias), {373}: (373, {}, may-alias), {374}: (374, {}, may-alias), {375}: (375, {}, may-alias), {376}: (376, {}, may-alias), {377}: (377, {}, may-alias), {378}: (378, {}, may-alias), {379}: (379, {}, may-alias), {380}: (380, {}, may-alias), {381}: (381, {}, may-alias), {382}: (382, {}, may-alias), {383}: (383, {}, may-alias), {384}: (384, {}, may-alias), {385}: (385, {}, may-alias), {386}: (386, {}, may-alias), {387}: (387, {}, may-alias), {388}: (388, {}, may-alias), {389}: (389, {}, may-alias), {390}: (390, {}, may-alias), {391}: (391, {}, may-alias), {392}: (392, {}, may-alias), {393}: (393, {}, may-alias), {394}: (394, {}, may-alias), {395}: (395, {}, may-alias), {396}: (396, {}, may-alias), {397}: (397, {}, may-alias), {398}: (398, {}, may-alias), {399}: (399, {}, may-alias), {400}: (400, {}, may-alias), {401}: (401, {}, may-alias), {402}: (402, {}, may-alias), {403}: (403, {}, may-alias), {404}: (404, {}, may-alias), {405}: (405, {}, may-alias), {406}: (406, {}, may-alias), {407}: (407, {}, may-alias), {408}: (408, {}, may-alias), {409}: (409, {}, may-alias), {410}: (410, {}, may-alias), {411}: (411, {}, may-alias), {412}: (412, {}, may-alias), {413}: (413, {}, may-alias), {414}: (414, {}, may-alias), {415}: (415, {}, may-alias), {416}: (416, {}, may-alias), {417}: (417, {}, may-alias), {418}: (418, {}, may-alias), {419}: (419, {}, may-alias), {420}: (420, {}, may-alias), {421}: (421, {}, may-alias), {422}: (422, {}, may-alias), {423}: (423, {}, may-alias), {424}: (424, {}, may-alias), {425}: (425, {}, may-alias), {426}: (426, {}, may-alias), {427}: (427, {}, may-alias), {428}: (428, {}, may-alias), {429}: (429, {}, may-alias), {430}: (430, {}, may-alias), {431}: (431, {}, may-alias), {432}: (432, {}, may-alias), {433}: (433, {}, may-alias), {434}: (434, {}, may-alias), {435}: (435, {}, may-alias), {436}: (436, {}, may-alias), {437}: (437, {}, may-alias), {438}: (438, {}, may-alias), {439}: (439, {}, may-alias), {440}: (440, {}, may-alias), {441}: (441, {}, may-alias), {442}: (442, {}, may-alias), {443}: (443, {}, may-alias), {444}: (444, {}, may-alias), {445}: (445, {}, may-alias), {446}: (446, {}, may-alias), {447}: (447, {}, may-alias), {448}: (448, {}, may-alias), {449}: (449, {}, may-alias), {450}: (450, {}, may-alias), {451}: (451, {}, may-alias), {452}: (452, {}, may-alias), {453}: (453, {}, may-alias), {454}: (454, {}, may-alias), {455}: (455, {}, may-alias), {456}: (456, {}, may-alias), {457}: (457, {}, may-alias), {458}: (458, {}, may-alias), {459}: (459, {}, may-alias), {460}: (460, {}, may-alias), {461}: (461, {}, may-alias), {462}: (462, {}, may-alias), {463}: (463, {}, may-alias), {464}: (464, {}, may-alias), {465}: (465, {}, may-alias), {466}: (466, {}, may-alias), {467}: (467, {}, may-alias), {468}: (468, {}, may-alias), {469}: (469, {}, may-alias), {470}: (470, {}, may-alias), {471}: (471, {}, may-alias), {472}: (472, {}, may-alias), {473}: (473, {}, may-alias), {474}: (474, {}, may-alias), {475}: (475, {}, may-alias), {476}: (476, {}, may-alias), {477}: (477, {}, may-alias), {478}: (478, {}, may-alias), {479}: (479, {}, may-alias), {480}: (480, {}, may-alias), {481}: (481, {}, may-alias), {482}: (482, {}, may-alias), {483}: (483, {}, may-alias), {484}: (484, {}, may-alias), {485}: (485, {}, may-alias), {486}: (486, {}, may-alias), {487}: (487, {}, may-alias), {488}: (488, {}, may-alias), {489}: (489, {}, may-alias), {490}: (490, {}, may-alias), {491}: (491, {}, may-alias), {492}: (492, {}, may-alias), {493}: (493, {}, may-alias), {494}: (494, {}, may-alias), {495}: (495, {}, may-alias), {496}: (496, {}, may-alias), {497}: (497, {}, may-alias), {498}: (498, {}, may-alias), {499}: (499, {}, may-alias), {500}: (500, {}, may-alias), {501}: (501, {}, may-alias), {502}: (502, {}, may-alias), {503}: (503, {}, may-alias), {504}: (504, {}, may-alias), {505}: (505, {}, may-alias), {506}: (506, {}, may-alias), {507}: (507, {}, may-alias), {508}: (508, {}, may-alias), {509}: (509, {}, may-alias), {510}: (510, {}, may-alias), {511}: (511, {}, may-alias), {512}: (512, {}, may-alias), {513}: (513, {}, may-alias), {514}: (514, {}, may-alias), {515}: (515, {}, may-alias), {516}: (516, {}, may-alias), {517}: (517, {}, may-alias), {518}: (518, {}, may-alias), {519}: (519, {}, may-alias), {520}: (520, {}, may-alias), {521}: (521, {}, may-alias), {522}: (522, {}, may-alias), {523}: (523, {}, may-alias), {524}: (524, {}, may-alias), {525}: (525, {}, may-alias), {526}: (526, {}, may-alias), {527}: (527, {}, may-alias), {528}: (528, {}, may-alias), {529}: (529, {}, may-alias), {530}: (530, {}, may-alias), {531}: (531, {}, may-alias), {532}: (532, {}, may-alias), {533}: (533, {}, may-alias), {534}: (534, {}, may-alias), {535}: (535, {}, may-alias), {536}: (536, {}, may-alias), {537}: (537, {}, may-alias), {538}: (538, {}, may-alias), {539}: (539, {}, may-alias), {540}: (540, {}, may-alias), {541}: (541, {}, may-alias), {542}: (542, {}, may-alias), {543}: (543, {}, may-alias), {544}: (544, {}, may-alias), {545}: (545, {}, may-alias), {546}: (546, {}, may-alias), {547}: (547, {}, may-alias), {548}: (548, {}, may-alias), {549}: (549, {}, may-alias), {550}: (550, {}, may-alias), {551}: (551, {}, may-alias), {552}: (552, {}, may-alias), {553}: (553, {}, may-alias), {554}: (554, {}, may-alias), {555}: (555, {}, may-alias), {556}: (556, {}, may-alias), {557}: (557, {}, may-alias), {558}: (558, {}, may-alias), {559}: (559, {}, may-alias), {560}: (560, {}, may-alias), {561}: (561, {}, may-alias), {562}: (562, {}, may-alias), {563}: (563, {}, may-alias), {564}: (564, {}, may-alias), {565}: (565, {}, may-alias), {566}: (566, {}, may-alias), {567}: (567, {}, may-alias), {568}: (568, {}, may-alias), {569}: (569, {}, may-alias), {570}: (570, {}, may-alias), {571}: (571, {}, may-alias), {572}: (572, {}, may-alias), {573}: (573, {}, may-alias), {574}: (574, {}, may-alias), {575}: (575, {}, may-alias), {576}: (576, {}, may-alias), {577}: (577, {}, may-alias), {578}: (578, {}, may-alias), {579}: (579, {}, may-alias), {580}: (580, {}, may-alias), {581}: (581, {}, may-alias), {582}: (582, {}, may-alias), {583}: (583, {}, may-alias), {584}: (584, {}, may-alias), {585}: (585, {}, may-alias), {586}: (586, {}, may-alias), {587}: (587, {}, may-alias), {588}: (588, {}, may-alias), {589}: (589, {}, may-alias), {590}: (590, {}, may-alias), {591}: (591, {}, may-alias), {592}: (592, {}, may-alias), {593}: (593, {}, may-alias), {594}: (594, {}, may-alias), {595}: (595, {}, may-alias), {596}: (596, {}, may-alias), {597}: (597, {}, may-alias), {598}: (598, {}, may-alias), {599}: (599, {}, may-alias), {600}: (600, {}, may-alias), {601}: (601, {}, may-alias), {602}: (602, {}, may-alias), {603}: (603, {}, may-alias), {604}: (604, {}, may-alias), {605}: (605, {}, may-alias), {606}: (606, {}, may-alias), {607}: (607, {}, may-alias), {608}: (608, {}, may-alias), {609}: (609, {}, may-alias), {610}: (610, {}, may-alias), {611}: (611, {}, may-alias), {612}: (612, {}, may-alias), {613}: (613, {}, may-alias), {614}: (614, {}, may-alias), {615}: (615, {}, may-alias), {616}: (616, {}, may-alias), {617}: (617, {}, may-alias), {618}: (618, {}, may-alias), {619}: (619, {}, may-alias), {620}: (620, {}, may-alias), {621}: (621, {}, may-alias), {622}: (622, {}, may-alias), {623}: (623, {}, may-alias), {624}: (624, {}, may-alias), {625}: (625, {}, may-alias), {626}: (626, {}, may-alias), {627}: (627, {}, may-alias), {628}: (628, {}, may-alias), {629}: (629, {}, may-alias), {630}: (630, {}, may-alias), {631}: (631, {}, may-alias), {632}: (632, {}, may-alias), {633}: (633, {}, may-alias), {634}: (634, {}, may-alias), {635}: (635, {}, may-alias), {636}: (636, {}, may-alias), {637}: (637, {}, may-alias), {638}: (638, {}, may-alias), {639}: (639, {}, may-alias), {640}: (640, {}, may-alias), {641}: (641, {}, may-alias), {642}: (642, {}, may-alias), {643}: (643, {}, may-alias), {644}: (644, {}, may-alias), {645}: (645, {}, may-alias), {646}: (646, {}, may-alias), {647}: (647, {}, may-alias), {648}: (648, {}, may-alias), {649}: (649, {}, may-alias), {650}: (650, {}, may-alias), {651}: (651, {}, may-alias), {652}: (652, {}, may-alias), {653}: (653, {}, may-alias), {654}: (654, {}, may-alias), {655}: (655, {}, may-alias), {656}: (656, {}, may-alias), {657}: (657, {}, may-alias), {658}: (658, {}, may-alias), {659}: (659, {}, may-alias), {660}: (660, {}, may-alias), {661}: (661, {}, may-alias), {662}: (662, {}, may-alias), {663}: (663, {}, may-alias), {664}: (664, {}, may-alias), {665}: (665, {}, may-alias), {666}: (666, {}, may-alias), {667}: (667, {}, may-alias), {668}: (668, {}, may-alias), {669}: (669, {}, may-alias), {670}: (670, {}, may-alias), {671}: (671, {}, may-alias), {672}: (672, {}, may-alias), {673}: (673, {}, may-alias), {674}: (674, {}, may-alias), {675}: (675, {}, may-alias), {676}: (676, {}, may-alias), {677}: (677, {}, may-alias), {678}: (678, {}, may-alias), {679}: (679, {}, may-alias), {680}: (680, {}, may-alias), {681}: (681, {}, may-alias), {682}: (682, {}, may-alias), {683}: (683, {}, may-alias), {684}: (684, {}, may-alias), {685}: (685, {}, may-alias), {686}: (686, {}, may-alias), {687}: (687, {}, may-alias), {688}: (688, {}, may-alias), {689}: (689, {}, may-alias), {690}: (690, {}, may-alias), {691}: (691, {}, may-alias), {692}: (692, {}, may-alias), {693}: (693, {}, may-alias), {694}: (694, {}, may-alias), {695}: (695, {}, may-alias), {696}: (696, {}, may-alias), {697}: (697, {}, may-alias), {698}: (698, {}, may-alias), {699}: (699, {}, may-alias), {700}: (700, {}, may-alias), {701}: (701, {}, may-alias), {702}: (702, {}, may-alias), {703}: (703, {}, may-alias), {704}: (704, {}, may-alias), {705}: (705, {}, may-alias), {706}: (706, {}, may-alias), {707}: (707, {}, may-alias), {708}: (708, {}, may-alias), {709}: (709, {}, may-alias), {710}: (710, {}, may-alias), {711}: (711, {}, may-alias), {712}: (712, {}, may-alias), {713}: (713, {}, may-alias), {714}: (714, {}, may-alias), {715}: (715, {}, may-alias), {716}: (716, {}, may-alias), {717}: (717, {}, may-alias), {718}: (718, {}, may-alias), {719}: (719, {}, may-alias), {720}: (720, {}, may-alias), {721}: (721, {}, may-alias), {722}: (722, {}, may-alias), {723}: (723, {}, may-alias), {724}: (724, {}, may-alias), {725}: (725, {}, may-alias), {726}: (726, {}, may-alias), {727}: (727, {}, may-alias), {728}: (728, {}, may-alias), {729}: (729, {}, may-alias), {730}: (730, {}, may-alias), {731}: (731, {}, may-alias), {732}: (732, {}, may-alias), {733}: (733, {}, may-alias), {734}: (734, {}, may-alias), {735}: (735, {}, may-alias), {736}: (736, {}, may-alias), {737}: (737, {}, may-alias), {738}: (738, {}, may-alias), {739}: (739, {}, may-alias), {740}: (740, {}, may-alias), {741}: (741, {}, may-alias), {742}: (742, {}, may-alias), {743}: (743, {}, may-alias), {744}: (744, {}, may-alias), {745}: (745, {}, may-alias), {746}: (746, {}, may-alias), {747}: (747, {}, may-alias), {748}: (748, {}, may-alias), {749}: (749, {}, may-alias), {750}: (750, {}, may-alias), {751}: (751, {}, may-alias), {752}: (752, {}, may-alias), {753}: (753, {}, may-alias), {754}: (754, {}, may-alias), {755}: (755, {}, may-alias), {756}: (756, {}, may-alias), {757}: (757, {}, may-alias), {758}: (758, {}, may-alias), {759}: (759, {}, may-alias), {760}: (760, {}, may-alias), {761}: (761, {}, may-alias), {762}: (762, {}, may-alias), {763}: (763, {}, may-alias), {764}: (764, {}, may-alias), {765}: (765, {}, may-alias), {766}: (766, {}, may-alias), {767}: (767, {}, may-alias), {768}: (768, {}, may-alias), {769}: (769, {}, may-alias), {770}: (770, {}, may-alias), {771}: (771, {}, may-alias), {772}: (772, {}, may-alias), {773}: (773, {}, may-alias), {774}: (774, {}, may-alias), {775}: (775, {}, may-alias), {776}: (776, {}, may-alias), {777}: (777, {}, may-alias), {778}: (778, {}, may-alias), {779}: (779, {}, may-alias), {780}: (780, {}, may-alias), {781}: (781, {}, may-alias), {782}: (782, {}, may-alias), {783}: (783, {}, may-alias), {784}: (784, {}, may-alias), {785}: (785, {}, may-alias), {786}: (786, {}, may-alias), {787}: (787, {}, may-alias), {788}: (788, {}, may-alias), {789}: (789, {}, may-alias), {790}: (790, {}, may-alias), {791}: (791, {}, may-alias), {792}: (792, {}, may-alias), {793}: (793, {}, may-alias), {794}: (794, {}, may-alias), {795}: (795, {}, may-alias), {796}: (796, {}, may-alias), {797}: (797, {}, may-alias), {798}: (798, {}, may-alias), {799}: (799, {}, may-alias), {800}: (800, {}, may-alias), {801}: (801, {}, may-alias), {802}: (802, {}, may-alias), {803}: (803, {}, may-alias), {804}: (804, {}, may-alias), {805}: (805, {}, may-alias), {806}: (806, {}, may-alias), {807}: (807, {}, may-alias), {808}: (808, {}, may-alias), {809}: (809, {}, may-alias), {810}: (810, {}, may-alias), {811}: (811, {}, may-alias), {812}: (812, {}, may-alias), {813}: (813, {}, may-alias), {814}: (814, {}, may-alias), {815}: (815, {}, may-alias), {816}: (816, {}, may-alias), {817}: (817, {}, may-alias), {818}: (818, {}, may-alias), {819}: (819, {}, may-alias), {820}: (820, {}, may-alias), {821}: (821, {}, may-alias), {822}: (822, {}, may-alias), {823}: (823, {}, may-alias), {824}: (824, {}, may-alias), {825}: (825, {}, may-alias), {826}: (826, {}, may-alias), {827}: (827, {}, may-alias), {828}: (828, {}, may-alias), {829}: (829, {}, may-alias), {830}: (830, {}, may-alias), {831}: (831, {}, may-alias), {832}: (832, {}, may-alias), {833}: (833, {}, may-alias), {834}: (834, {}, may-alias), {835}: (835, {}, may-alias), {836}: (836, {}, may-alias), {837}: (837, {}, may-alias), {838}: (838, {}, may-alias), {839}: (839, {}, may-alias), {840}: (840, {}, may-alias), {841}: (841, {}, may-alias), {842}: (842, {}, may-alias), {843}: (843, {}, may-alias), {844}: (844, {}, may-alias), {845}: (845, {}, may-alias), {846}: (846, {}, may-alias), {847}: (847, {}, may-alias), {848}: (848, {}, may-alias), {849}: (849, {}, may-alias), {850}: (850, {}, may-alias), {851}: (851, {}, may-alias), {852}: (852, {}, may-alias), {853}: (853, {}, may-alias), {854}: (854, {}, may-alias), {855}: (855, {}, may-alias), {856}: (856, {}, may-alias), {857}: (857, {}, may-alias), {858}: (858, {}, may-alias), {859}: (859, {}, may-alias), {860}: (860, {}, may-alias), {861}: (861, {}, may-alias), {862}: (862, {}, may-alias), {863}: (863, {}, may-alias), {864}: (864, {}, may-alias), {865}: (865, {}, may-alias), {866}: (866, {}, may-alias), {867}: (867, {}, may-alias), {868}: (868, {}, may-alias), {869}: (869, {}, may-alias), {870}: (870, {}, may-alias), {871}: (871, {}, may-alias), {872}: (872, {}, may-alias), {873}: (873, {}, may-alias), {874}: (874, {}, may-alias), {875}: (875, {}, may-alias) }, entry_computation_layout={(s32[], f32[4096]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=5*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=10*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=25*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=30*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=35*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=40*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=45*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=50*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=55*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=60*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=65*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=70*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=75*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=80*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=85*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=90*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=95*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=100*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=105*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=110*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=115*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=120*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=125*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=130*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=135*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=140*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=145*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=150*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=155*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=160*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=165*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=170*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=175*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=180*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=185*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=190*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=195*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=200*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=205*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=210*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=215*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=220*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=225*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=230*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=235*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=240*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=245*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=250*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=255*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=260*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=265*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=270*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=275*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=280*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=285*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=290*/f32[256,128256]{1,0}, f32[128256,256]{1,0}, s32[], f32[4096]{0}, f32[256,14336]{1,0}, /*index=295*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=300*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=305*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=310*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=315*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=320*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=325*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=330*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=335*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=340*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=345*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=350*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=355*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=360*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=365*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=370*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=375*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=380*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=385*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=390*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=395*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=400*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=405*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=410*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=415*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=420*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=425*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=430*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=435*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=440*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=445*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=450*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=455*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=460*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=465*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=470*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=475*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=480*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=485*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=490*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=495*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=500*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=505*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=510*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=515*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=520*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=525*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=530*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=535*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=540*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=545*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=550*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=555*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=560*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=565*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=570*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=575*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=580*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,128256]{1,0}, f32[128256,256]{1,0}, f32[4096]{0}, /*index=585*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=590*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=595*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=600*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=605*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=610*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=615*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=620*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=625*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=630*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=635*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=640*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=645*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=650*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=655*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=660*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=665*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=670*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=675*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=680*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=685*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=690*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=695*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=700*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=705*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=710*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=715*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=720*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=725*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=730*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=735*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=740*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=745*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=750*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=755*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=760*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=765*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=770*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=775*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=780*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=785*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=790*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=795*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=800*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=805*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=810*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=815*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=820*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=825*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=830*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=835*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=840*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=845*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=850*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=855*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=860*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=865*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=870*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,128256]{1,0}, f32[128256,256]{1,0}, /*index=875*/s32[], s32[2,8192]{1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, /*index=880*/s32[2,8192]{1,0})->(s32[], f32[4096]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=5*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=10*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=25*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=30*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=35*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=40*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=45*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=50*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=55*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=60*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=65*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=70*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=75*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=80*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=85*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=90*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=95*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=100*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=105*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=110*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=115*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=120*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=125*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=130*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=135*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=140*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=145*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=150*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=155*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=160*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=165*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=170*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=175*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=180*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=185*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=190*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=195*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=200*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=205*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=210*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=215*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=220*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=225*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=230*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=235*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=240*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=245*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=250*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=255*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=260*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=265*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=270*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=275*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=280*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=285*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=290*/f32[256,128256]{1,0}, f32[128256,256]{1,0}, s32[], f32[4096]{0}, f32[256,14336]{1,0}, /*index=295*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=300*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=305*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=310*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=315*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=320*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=325*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=330*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=335*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=340*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=345*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=350*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=355*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=360*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=365*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=370*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=375*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=380*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=385*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=390*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=395*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=400*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=405*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=410*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=415*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=420*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=425*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=430*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=435*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=440*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=445*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=450*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=455*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=460*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=465*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=470*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=475*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=480*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=485*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=490*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=495*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=500*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=505*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=510*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=515*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=520*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=525*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=530*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=535*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=540*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=545*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=550*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=555*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=560*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=565*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=570*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=575*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=580*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,128256]{1,0}, f32[128256,256]{1,0}, f32[4096]{0}, /*index=585*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=590*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=595*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=600*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=605*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=610*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=615*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=620*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=625*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=630*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=635*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=640*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=645*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=650*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=655*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=660*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=665*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=670*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=675*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=680*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=685*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=690*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=695*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=700*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=705*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=710*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=715*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=720*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=725*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=730*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=735*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=740*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=745*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=750*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=755*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=760*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=765*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=770*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=775*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=780*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=785*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=790*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=795*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=800*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=805*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=810*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=815*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=820*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=825*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=830*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=835*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=840*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=845*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=850*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=855*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=860*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=865*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=870*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,128256]{1,0}, f32[128256,256]{1,0}, /*index=875*/s32[], f32[], f32[], f32[], f32[], /*index=880*/f32[], s32[])}

%region_6.1589 (Arg_0.1586: s32[], Arg_1.1587: s32[]) -> s32[] {
  %Arg_0.1586 = s32[] parameter(0)
  %Arg_1.1587 = s32[] parameter(1)
  ROOT %add.1588 = s32[] add(%Arg_0.1586, %Arg_1.1587)
}

%region_7.1597 (Arg_0.1594: s32[], Arg_1.1595: s32[]) -> s32[] {
  %Arg_0.1594 = s32[] parameter(0)
  %Arg_1.1595 = s32[] parameter(1)
  ROOT %add.1596 = s32[] add(%Arg_0.1594, %Arg_1.1595)
}

%region_8.1602 (Arg_0.1599: s32[], Arg_1.1600: s32[]) -> s32[] {
  %Arg_0.1599 = s32[] parameter(0)
  %Arg_1.1600 = s32[] parameter(1)
  ROOT %maximum.1601 = s32[] maximum(%Arg_0.1599, %Arg_1.1600)
}

%region_11.1869 (Arg_0.1866: s32[], Arg_1.1867: s32[]) -> s32[] {
  %Arg_0.1866 = s32[] parameter(0)
  %Arg_1.1867 = s32[] parameter(1)
  ROOT %add.1868 = s32[] add(%Arg_0.1866, %Arg_1.1867)
}

%region_12.1877 (Arg_0.1874: s32[], Arg_1.1875: s32[]) -> s32[] {
  %Arg_0.1874 = s32[] parameter(0)
  %Arg_1.1875 = s32[] parameter(1)
  ROOT %add.1876 = s32[] add(%Arg_0.1874, %Arg_1.1875)
}

%region_13.1882 (Arg_0.1879: s32[], Arg_1.1880: s32[]) -> s32[] {
  %Arg_0.1879 = s32[] parameter(0)
  %Arg_1.1880 = s32[] parameter(1)
  ROOT %maximum.1881 = s32[] maximum(%Arg_0.1879, %Arg_1.1880)
}

%region_16.2149 (Arg_0.2146: s32[], Arg_1.2147: s32[]) -> s32[] {
  %Arg_0.2146 = s32[] parameter(0)
  %Arg_1.2147 = s32[] parameter(1)
  ROOT %add.2148 = s32[] add(%Arg_0.2146, %Arg_1.2147)
}

%region_17.2157 (Arg_0.2154: s32[], Arg_1.2155: s32[]) -> s32[] {
  %Arg_0.2154 = s32[] parameter(0)
  %Arg_1.2155 = s32[] parameter(1)
  ROOT %add.2156 = s32[] add(%Arg_0.2154, %Arg_1.2155)
}

%region_18.2162 (Arg_0.2159: s32[], Arg_1.2160: s32[]) -> s32[] {
  %Arg_0.2159 = s32[] parameter(0)
  %Arg_1.2160 = s32[] parameter(1)
  ROOT %maximum.2161 = s32[] maximum(%Arg_0.2159, %Arg_1.2160)
}

%region_21.2429 (Arg_0.2426: s32[], Arg_1.2427: s32[]) -> s32[] {
  %Arg_0.2426 = s32[] parameter(0)
  %Arg_1.2427 = s32[] parameter(1)
  ROOT %add.2428 = s32[] add(%Arg_0.2426, %Arg_1.2427)
}

%region_22.2437 (Arg_0.2434: s32[], Arg_1.2435: s32[]) -> s32[] {
  %Arg_0.2434 = s32[] parameter(0)
  %Arg_1.2435 = s32[] parameter(1)
  ROOT %add.2436 = s32[] add(%Arg_0.2434, %Arg_1.2435)
}

%region_23.2442 (Arg_0.2439: s32[], Arg_1.2440: s32[]) -> s32[] {
  %Arg_0.2439 = s32[] parameter(0)
  %Arg_1.2440 = s32[] parameter(1)
  ROOT %maximum.2441 = s32[] maximum(%Arg_0.2439, %Arg_1.2440)
}

%region_26.2709 (Arg_0.2706: s32[], Arg_1.2707: s32[]) -> s32[] {
  %Arg_0.2706 = s32[] parameter(0)
  %Arg_1.2707 = s32[] parameter(1)
  ROOT %add.2708 = s32[] add(%Arg_0.2706, %Arg_1.2707)
}

%region_27.2717 (Arg_0.2714: s32[], Arg_1.2715: s32[]) -> s32[] {
  %Arg_0.2714 = s32[] parameter(0)
  %Arg_1.2715 = s32[] parameter(1)
  ROOT %add.2716 = s32[] add(%Arg_0.2714, %Arg_1.2715)
}

%region_28.2722 (Arg_0.2719: s32[], Arg_1.2720: s32[]) -> s32[] {
  %Arg_0.2719 = s32[] parameter(0)
  %Arg_1.2720 = s32[] parameter(1)
  ROOT %maximum.2721 = s32[] maximum(%Arg_0.2719, %Arg_1.2720)
}

%region_31.2989 (Arg_0.2986: s32[], Arg_1.2987: s32[]) -> s32[] {
  %Arg_0.2986 = s32[] parameter(0)
  %Arg_1.2987 = s32[] parameter(1)
  ROOT %add.2988 = s32[] add(%Arg_0.2986, %Arg_1.2987)
}

%region_32.2997 (Arg_0.2994: s32[], Arg_1.2995: s32[]) -> s32[] {
  %Arg_0.2994 = s32[] parameter(0)
  %Arg_1.2995 = s32[] parameter(1)
  ROOT %add.2996 = s32[] add(%Arg_0.2994, %Arg_1.2995)
}

%region_33.3002 (Arg_0.2999: s32[], Arg_1.3000: s32[]) -> s32[] {
  %Arg_0.2999 = s32[] parameter(0)
  %Arg_1.3000 = s32[] parameter(1)
  ROOT %maximum.3001 = s32[] maximum(%Arg_0.2999, %Arg_1.3000)
}

%region_36.3269 (Arg_0.3266: s32[], Arg_1.3267: s32[]) -> s32[] {
  %Arg_0.3266 = s32[] parameter(0)
  %Arg_1.3267 = s32[] parameter(1)
  ROOT %add.3268 = s32[] add(%Arg_0.3266, %Arg_1.3267)
}

%region_37.3277 (Arg_0.3274: s32[], Arg_1.3275: s32[]) -> s32[] {
  %Arg_0.3274 = s32[] parameter(0)
  %Arg_1.3275 = s32[] parameter(1)
  ROOT %add.3276 = s32[] add(%Arg_0.3274, %Arg_1.3275)
}

%region_38.3282 (Arg_0.3279: s32[], Arg_1.3280: s32[]) -> s32[] {
  %Arg_0.3279 = s32[] parameter(0)
  %Arg_1.3280 = s32[] parameter(1)
  ROOT %maximum.3281 = s32[] maximum(%Arg_0.3279, %Arg_1.3280)
}

%region_41.3549 (Arg_0.3546: s32[], Arg_1.3547: s32[]) -> s32[] {
  %Arg_0.3546 = s32[] parameter(0)
  %Arg_1.3547 = s32[] parameter(1)
  ROOT %add.3548 = s32[] add(%Arg_0.3546, %Arg_1.3547)
}

%region_42.3557 (Arg_0.3554: s32[], Arg_1.3555: s32[]) -> s32[] {
  %Arg_0.3554 = s32[] parameter(0)
  %Arg_1.3555 = s32[] parameter(1)
  ROOT %add.3556 = s32[] add(%Arg_0.3554, %Arg_1.3555)
}

%region_43.3562 (Arg_0.3559: s32[], Arg_1.3560: s32[]) -> s32[] {
  %Arg_0.3559 = s32[] parameter(0)
  %Arg_1.3560 = s32[] parameter(1)
  ROOT %maximum.3561 = s32[] maximum(%Arg_0.3559, %Arg_1.3560)
}

%region_46.3829 (Arg_0.3826: s32[], Arg_1.3827: s32[]) -> s32[] {
  %Arg_0.3826 = s32[] parameter(0)
  %Arg_1.3827 = s32[] parameter(1)
  ROOT %add.3828 = s32[] add(%Arg_0.3826, %Arg_1.3827)
}

%region_47.3837 (Arg_0.3834: s32[], Arg_1.3835: s32[]) -> s32[] {
  %Arg_0.3834 = s32[] parameter(0)
  %Arg_1.3835 = s32[] parameter(1)
  ROOT %add.3836 = s32[] add(%Arg_0.3834, %Arg_1.3835)
}

%region_48.3842 (Arg_0.3839: s32[], Arg_1.3840: s32[]) -> s32[] {
  %Arg_0.3839 = s32[] parameter(0)
  %Arg_1.3840 = s32[] parameter(1)
  ROOT %maximum.3841 = s32[] maximum(%Arg_0.3839, %Arg_1.3840)
}

%region_51.4109 (Arg_0.4106: s32[], Arg_1.4107: s32[]) -> s32[] {
  %Arg_0.4106 = s32[] parameter(0)
  %Arg_1.4107 = s32[] parameter(1)
  ROOT %add.4108 = s32[] add(%Arg_0.4106, %Arg_1.4107)
}

%region_52.4117 (Arg_0.4114: s32[], Arg_1.4115: s32[]) -> s32[] {
  %Arg_0.4114 = s32[] parameter(0)
  %Arg_1.4115 = s32[] parameter(1)
  ROOT %add.4116 = s32[] add(%Arg_0.4114, %Arg_1.4115)
}

%region_53.4122 (Arg_0.4119: s32[], Arg_1.4120: s32[]) -> s32[] {
  %Arg_0.4119 = s32[] parameter(0)
  %Arg_1.4120 = s32[] parameter(1)
  ROOT %maximum.4121 = s32[] maximum(%Arg_0.4119, %Arg_1.4120)
}

%region_56.4389 (Arg_0.4386: s32[], Arg_1.4387: s32[]) -> s32[] {
  %Arg_0.4386 = s32[] parameter(0)
  %Arg_1.4387 = s32[] parameter(1)
  ROOT %add.4388 = s32[] add(%Arg_0.4386, %Arg_1.4387)
}

%region_57.4397 (Arg_0.4394: s32[], Arg_1.4395: s32[]) -> s32[] {
  %Arg_0.4394 = s32[] parameter(0)
  %Arg_1.4395 = s32[] parameter(1)
  ROOT %add.4396 = s32[] add(%Arg_0.4394, %Arg_1.4395)
}

%region_58.4402 (Arg_0.4399: s32[], Arg_1.4400: s32[]) -> s32[] {
  %Arg_0.4399 = s32[] parameter(0)
  %Arg_1.4400 = s32[] parameter(1)
  ROOT %maximum.4401 = s32[] maximum(%Arg_0.4399, %Arg_1.4400)
}

%region_61.4669 (Arg_0.4666: s32[], Arg_1.4667: s32[]) -> s32[] {
  %Arg_0.4666 = s32[] parameter(0)
  %Arg_1.4667 = s32[] parameter(1)
  ROOT %add.4668 = s32[] add(%Arg_0.4666, %Arg_1.4667)
}

%region_62.4677 (Arg_0.4674: s32[], Arg_1.4675: s32[]) -> s32[] {
  %Arg_0.4674 = s32[] parameter(0)
  %Arg_1.4675 = s32[] parameter(1)
  ROOT %add.4676 = s32[] add(%Arg_0.4674, %Arg_1.4675)
}

%region_63.4682 (Arg_0.4679: s32[], Arg_1.4680: s32[]) -> s32[] {
  %Arg_0.4679 = s32[] parameter(0)
  %Arg_1.4680 = s32[] parameter(1)
  ROOT %maximum.4681 = s32[] maximum(%Arg_0.4679, %Arg_1.4680)
}

%region_66.4949 (Arg_0.4946: s32[], Arg_1.4947: s32[]) -> s32[] {
  %Arg_0.4946 = s32[] parameter(0)
  %Arg_1.4947 = s32[] parameter(1)
  ROOT %add.4948 = s32[] add(%Arg_0.4946, %Arg_1.4947)
}

%region_67.4957 (Arg_0.4954: s32[], Arg_1.4955: s32[]) -> s32[] {
  %Arg_0.4954 = s32[] parameter(0)
  %Arg_1.4955 = s32[] parameter(1)
  ROOT %add.4956 = s32[] add(%Arg_0.4954, %Arg_1.4955)
}

%region_68.4962 (Arg_0.4959: s32[], Arg_1.4960: s32[]) -> s32[] {
  %Arg_0.4959 = s32[] parameter(0)
  %Arg_1.4960 = s32[] parameter(1)
  ROOT %maximum.4961 = s32[] maximum(%Arg_0.4959, %Arg_1.4960)
}

%region_71.5229 (Arg_0.5226: s32[], Arg_1.5227: s32[]) -> s32[] {
  %Arg_0.5226 = s32[] parameter(0)
  %Arg_1.5227 = s32[] parameter(1)
  ROOT %add.5228 = s32[] add(%Arg_0.5226, %Arg_1.5227)
}

%region_72.5237 (Arg_0.5234: s32[], Arg_1.5235: s32[]) -> s32[] {
  %Arg_0.5234 = s32[] parameter(0)
  %Arg_1.5235 = s32[] parameter(1)
  ROOT %add.5236 = s32[] add(%Arg_0.5234, %Arg_1.5235)
}

%region_73.5242 (Arg_0.5239: s32[], Arg_1.5240: s32[]) -> s32[] {
  %Arg_0.5239 = s32[] parameter(0)
  %Arg_1.5240 = s32[] parameter(1)
  ROOT %maximum.5241 = s32[] maximum(%Arg_0.5239, %Arg_1.5240)
}

%region_76.5509 (Arg_0.5506: s32[], Arg_1.5507: s32[]) -> s32[] {
  %Arg_0.5506 = s32[] parameter(0)
  %Arg_1.5507 = s32[] parameter(1)
  ROOT %add.5508 = s32[] add(%Arg_0.5506, %Arg_1.5507)
}

%region_77.5517 (Arg_0.5514: s32[], Arg_1.5515: s32[]) -> s32[] {
  %Arg_0.5514 = s32[] parameter(0)
  %Arg_1.5515 = s32[] parameter(1)
  ROOT %add.5516 = s32[] add(%Arg_0.5514, %Arg_1.5515)
}

%region_78.5522 (Arg_0.5519: s32[], Arg_1.5520: s32[]) -> s32[] {
  %Arg_0.5519 = s32[] parameter(0)
  %Arg_1.5520 = s32[] parameter(1)
  ROOT %maximum.5521 = s32[] maximum(%Arg_0.5519, %Arg_1.5520)
}

%region_81.5789 (Arg_0.5786: s32[], Arg_1.5787: s32[]) -> s32[] {
  %Arg_0.5786 = s32[] parameter(0)
  %Arg_1.5787 = s32[] parameter(1)
  ROOT %add.5788 = s32[] add(%Arg_0.5786, %Arg_1.5787)
}

%region_82.5797 (Arg_0.5794: s32[], Arg_1.5795: s32[]) -> s32[] {
  %Arg_0.5794 = s32[] parameter(0)
  %Arg_1.5795 = s32[] parameter(1)
  ROOT %add.5796 = s32[] add(%Arg_0.5794, %Arg_1.5795)
}

%region_83.5802 (Arg_0.5799: s32[], Arg_1.5800: s32[]) -> s32[] {
  %Arg_0.5799 = s32[] parameter(0)
  %Arg_1.5800 = s32[] parameter(1)
  ROOT %maximum.5801 = s32[] maximum(%Arg_0.5799, %Arg_1.5800)
}

%region_86.6069 (Arg_0.6066: s32[], Arg_1.6067: s32[]) -> s32[] {
  %Arg_0.6066 = s32[] parameter(0)
  %Arg_1.6067 = s32[] parameter(1)
  ROOT %add.6068 = s32[] add(%Arg_0.6066, %Arg_1.6067)
}

%region_87.6077 (Arg_0.6074: s32[], Arg_1.6075: s32[]) -> s32[] {
  %Arg_0.6074 = s32[] parameter(0)
  %Arg_1.6075 = s32[] parameter(1)
  ROOT %add.6076 = s32[] add(%Arg_0.6074, %Arg_1.6075)
}

%region_88.6082 (Arg_0.6079: s32[], Arg_1.6080: s32[]) -> s32[] {
  %Arg_0.6079 = s32[] parameter(0)
  %Arg_1.6080 = s32[] parameter(1)
  ROOT %maximum.6081 = s32[] maximum(%Arg_0.6079, %Arg_1.6080)
}

%region_91.6349 (Arg_0.6346: s32[], Arg_1.6347: s32[]) -> s32[] {
  %Arg_0.6346 = s32[] parameter(0)
  %Arg_1.6347 = s32[] parameter(1)
  ROOT %add.6348 = s32[] add(%Arg_0.6346, %Arg_1.6347)
}

%region_92.6357 (Arg_0.6354: s32[], Arg_1.6355: s32[]) -> s32[] {
  %Arg_0.6354 = s32[] parameter(0)
  %Arg_1.6355 = s32[] parameter(1)
  ROOT %add.6356 = s32[] add(%Arg_0.6354, %Arg_1.6355)
}

%region_93.6362 (Arg_0.6359: s32[], Arg_1.6360: s32[]) -> s32[] {
  %Arg_0.6359 = s32[] parameter(0)
  %Arg_1.6360 = s32[] parameter(1)
  ROOT %maximum.6361 = s32[] maximum(%Arg_0.6359, %Arg_1.6360)
}

%region_96.6629 (Arg_0.6626: s32[], Arg_1.6627: s32[]) -> s32[] {
  %Arg_0.6626 = s32[] parameter(0)
  %Arg_1.6627 = s32[] parameter(1)
  ROOT %add.6628 = s32[] add(%Arg_0.6626, %Arg_1.6627)
}

%region_97.6637 (Arg_0.6634: s32[], Arg_1.6635: s32[]) -> s32[] {
  %Arg_0.6634 = s32[] parameter(0)
  %Arg_1.6635 = s32[] parameter(1)
  ROOT %add.6636 = s32[] add(%Arg_0.6634, %Arg_1.6635)
}

%region_98.6642 (Arg_0.6639: s32[], Arg_1.6640: s32[]) -> s32[] {
  %Arg_0.6639 = s32[] parameter(0)
  %Arg_1.6640 = s32[] parameter(1)
  ROOT %maximum.6641 = s32[] maximum(%Arg_0.6639, %Arg_1.6640)
}

%region_101.6909 (Arg_0.6906: s32[], Arg_1.6907: s32[]) -> s32[] {
  %Arg_0.6906 = s32[] parameter(0)
  %Arg_1.6907 = s32[] parameter(1)
  ROOT %add.6908 = s32[] add(%Arg_0.6906, %Arg_1.6907)
}

%region_102.6917 (Arg_0.6914: s32[], Arg_1.6915: s32[]) -> s32[] {
  %Arg_0.6914 = s32[] parameter(0)
  %Arg_1.6915 = s32[] parameter(1)
  ROOT %add.6916 = s32[] add(%Arg_0.6914, %Arg_1.6915)
}

%region_103.6922 (Arg_0.6919: s32[], Arg_1.6920: s32[]) -> s32[] {
  %Arg_0.6919 = s32[] parameter(0)
  %Arg_1.6920 = s32[] parameter(1)
  ROOT %maximum.6921 = s32[] maximum(%Arg_0.6919, %Arg_1.6920)
}

%region_106.7189 (Arg_0.7186: s32[], Arg_1.7187: s32[]) -> s32[] {
  %Arg_0.7186 = s32[] parameter(0)
  %Arg_1.7187 = s32[] parameter(1)
  ROOT %add.7188 = s32[] add(%Arg_0.7186, %Arg_1.7187)
}

%region_107.7197 (Arg_0.7194: s32[], Arg_1.7195: s32[]) -> s32[] {
  %Arg_0.7194 = s32[] parameter(0)
  %Arg_1.7195 = s32[] parameter(1)
  ROOT %add.7196 = s32[] add(%Arg_0.7194, %Arg_1.7195)
}

%region_108.7202 (Arg_0.7199: s32[], Arg_1.7200: s32[]) -> s32[] {
  %Arg_0.7199 = s32[] parameter(0)
  %Arg_1.7200 = s32[] parameter(1)
  ROOT %maximum.7201 = s32[] maximum(%Arg_0.7199, %Arg_1.7200)
}

%region_111.7469 (Arg_0.7466: s32[], Arg_1.7467: s32[]) -> s32[] {
  %Arg_0.7466 = s32[] parameter(0)
  %Arg_1.7467 = s32[] parameter(1)
  ROOT %add.7468 = s32[] add(%Arg_0.7466, %Arg_1.7467)
}

%region_112.7477 (Arg_0.7474: s32[], Arg_1.7475: s32[]) -> s32[] {
  %Arg_0.7474 = s32[] parameter(0)
  %Arg_1.7475 = s32[] parameter(1)
  ROOT %add.7476 = s32[] add(%Arg_0.7474, %Arg_1.7475)
}

%region_113.7482 (Arg_0.7479: s32[], Arg_1.7480: s32[]) -> s32[] {
  %Arg_0.7479 = s32[] parameter(0)
  %Arg_1.7480 = s32[] parameter(1)
  ROOT %maximum.7481 = s32[] maximum(%Arg_0.7479, %Arg_1.7480)
}

%region_116.7749 (Arg_0.7746: s32[], Arg_1.7747: s32[]) -> s32[] {
  %Arg_0.7746 = s32[] parameter(0)
  %Arg_1.7747 = s32[] parameter(1)
  ROOT %add.7748 = s32[] add(%Arg_0.7746, %Arg_1.7747)
}

%region_117.7757 (Arg_0.7754: s32[], Arg_1.7755: s32[]) -> s32[] {
  %Arg_0.7754 = s32[] parameter(0)
  %Arg_1.7755 = s32[] parameter(1)
  ROOT %add.7756 = s32[] add(%Arg_0.7754, %Arg_1.7755)
}

%region_118.7762 (Arg_0.7759: s32[], Arg_1.7760: s32[]) -> s32[] {
  %Arg_0.7759 = s32[] parameter(0)
  %Arg_1.7760 = s32[] parameter(1)
  ROOT %maximum.7761 = s32[] maximum(%Arg_0.7759, %Arg_1.7760)
}

%region_121.8029 (Arg_0.8026: s32[], Arg_1.8027: s32[]) -> s32[] {
  %Arg_0.8026 = s32[] parameter(0)
  %Arg_1.8027 = s32[] parameter(1)
  ROOT %add.8028 = s32[] add(%Arg_0.8026, %Arg_1.8027)
}

%region_122.8037 (Arg_0.8034: s32[], Arg_1.8035: s32[]) -> s32[] {
  %Arg_0.8034 = s32[] parameter(0)
  %Arg_1.8035 = s32[] parameter(1)
  ROOT %add.8036 = s32[] add(%Arg_0.8034, %Arg_1.8035)
}

%region_123.8042 (Arg_0.8039: s32[], Arg_1.8040: s32[]) -> s32[] {
  %Arg_0.8039 = s32[] parameter(0)
  %Arg_1.8040 = s32[] parameter(1)
  ROOT %maximum.8041 = s32[] maximum(%Arg_0.8039, %Arg_1.8040)
}

%region_126.8309 (Arg_0.8306: s32[], Arg_1.8307: s32[]) -> s32[] {
  %Arg_0.8306 = s32[] parameter(0)
  %Arg_1.8307 = s32[] parameter(1)
  ROOT %add.8308 = s32[] add(%Arg_0.8306, %Arg_1.8307)
}

%region_127.8317 (Arg_0.8314: s32[], Arg_1.8315: s32[]) -> s32[] {
  %Arg_0.8314 = s32[] parameter(0)
  %Arg_1.8315 = s32[] parameter(1)
  ROOT %add.8316 = s32[] add(%Arg_0.8314, %Arg_1.8315)
}

%region_128.8322 (Arg_0.8319: s32[], Arg_1.8320: s32[]) -> s32[] {
  %Arg_0.8319 = s32[] parameter(0)
  %Arg_1.8320 = s32[] parameter(1)
  ROOT %maximum.8321 = s32[] maximum(%Arg_0.8319, %Arg_1.8320)
}

%region_131.8589 (Arg_0.8586: s32[], Arg_1.8587: s32[]) -> s32[] {
  %Arg_0.8586 = s32[] parameter(0)
  %Arg_1.8587 = s32[] parameter(1)
  ROOT %add.8588 = s32[] add(%Arg_0.8586, %Arg_1.8587)
}

%region_132.8597 (Arg_0.8594: s32[], Arg_1.8595: s32[]) -> s32[] {
  %Arg_0.8594 = s32[] parameter(0)
  %Arg_1.8595 = s32[] parameter(1)
  ROOT %add.8596 = s32[] add(%Arg_0.8594, %Arg_1.8595)
}

%region_133.8602 (Arg_0.8599: s32[], Arg_1.8600: s32[]) -> s32[] {
  %Arg_0.8599 = s32[] parameter(0)
  %Arg_1.8600 = s32[] parameter(1)
  ROOT %maximum.8601 = s32[] maximum(%Arg_0.8599, %Arg_1.8600)
}

%region_136.8869 (Arg_0.8866: s32[], Arg_1.8867: s32[]) -> s32[] {
  %Arg_0.8866 = s32[] parameter(0)
  %Arg_1.8867 = s32[] parameter(1)
  ROOT %add.8868 = s32[] add(%Arg_0.8866, %Arg_1.8867)
}

%region_137.8877 (Arg_0.8874: s32[], Arg_1.8875: s32[]) -> s32[] {
  %Arg_0.8874 = s32[] parameter(0)
  %Arg_1.8875 = s32[] parameter(1)
  ROOT %add.8876 = s32[] add(%Arg_0.8874, %Arg_1.8875)
}

%region_138.8882 (Arg_0.8879: s32[], Arg_1.8880: s32[]) -> s32[] {
  %Arg_0.8879 = s32[] parameter(0)
  %Arg_1.8880 = s32[] parameter(1)
  ROOT %maximum.8881 = s32[] maximum(%Arg_0.8879, %Arg_1.8880)
}

%region_141.9149 (Arg_0.9146: s32[], Arg_1.9147: s32[]) -> s32[] {
  %Arg_0.9146 = s32[] parameter(0)
  %Arg_1.9147 = s32[] parameter(1)
  ROOT %add.9148 = s32[] add(%Arg_0.9146, %Arg_1.9147)
}

%region_142.9157 (Arg_0.9154: s32[], Arg_1.9155: s32[]) -> s32[] {
  %Arg_0.9154 = s32[] parameter(0)
  %Arg_1.9155 = s32[] parameter(1)
  ROOT %add.9156 = s32[] add(%Arg_0.9154, %Arg_1.9155)
}

%region_143.9162 (Arg_0.9159: s32[], Arg_1.9160: s32[]) -> s32[] {
  %Arg_0.9159 = s32[] parameter(0)
  %Arg_1.9160 = s32[] parameter(1)
  ROOT %maximum.9161 = s32[] maximum(%Arg_0.9159, %Arg_1.9160)
}

%region_146.9429 (Arg_0.9426: s32[], Arg_1.9427: s32[]) -> s32[] {
  %Arg_0.9426 = s32[] parameter(0)
  %Arg_1.9427 = s32[] parameter(1)
  ROOT %add.9428 = s32[] add(%Arg_0.9426, %Arg_1.9427)
}

%region_147.9437 (Arg_0.9434: s32[], Arg_1.9435: s32[]) -> s32[] {
  %Arg_0.9434 = s32[] parameter(0)
  %Arg_1.9435 = s32[] parameter(1)
  ROOT %add.9436 = s32[] add(%Arg_0.9434, %Arg_1.9435)
}

%region_148.9442 (Arg_0.9439: s32[], Arg_1.9440: s32[]) -> s32[] {
  %Arg_0.9439 = s32[] parameter(0)
  %Arg_1.9440 = s32[] parameter(1)
  ROOT %maximum.9441 = s32[] maximum(%Arg_0.9439, %Arg_1.9440)
}

%region_151.9709 (Arg_0.9706: s32[], Arg_1.9707: s32[]) -> s32[] {
  %Arg_0.9706 = s32[] parameter(0)
  %Arg_1.9707 = s32[] parameter(1)
  ROOT %add.9708 = s32[] add(%Arg_0.9706, %Arg_1.9707)
}

%region_152.9717 (Arg_0.9714: s32[], Arg_1.9715: s32[]) -> s32[] {
  %Arg_0.9714 = s32[] parameter(0)
  %Arg_1.9715 = s32[] parameter(1)
  ROOT %add.9716 = s32[] add(%Arg_0.9714, %Arg_1.9715)
}

%region_153.9722 (Arg_0.9719: s32[], Arg_1.9720: s32[]) -> s32[] {
  %Arg_0.9719 = s32[] parameter(0)
  %Arg_1.9720 = s32[] parameter(1)
  ROOT %maximum.9721 = s32[] maximum(%Arg_0.9719, %Arg_1.9720)
}

%region_156.9989 (Arg_0.9986: s32[], Arg_1.9987: s32[]) -> s32[] {
  %Arg_0.9986 = s32[] parameter(0)
  %Arg_1.9987 = s32[] parameter(1)
  ROOT %add.9988 = s32[] add(%Arg_0.9986, %Arg_1.9987)
}

%region_157.9997 (Arg_0.9994: s32[], Arg_1.9995: s32[]) -> s32[] {
  %Arg_0.9994 = s32[] parameter(0)
  %Arg_1.9995 = s32[] parameter(1)
  ROOT %add.9996 = s32[] add(%Arg_0.9994, %Arg_1.9995)
}

%region_158.10002 (Arg_0.9999: s32[], Arg_1.10000: s32[]) -> s32[] {
  %Arg_0.9999 = s32[] parameter(0)
  %Arg_1.10000 = s32[] parameter(1)
  ROOT %maximum.10001 = s32[] maximum(%Arg_0.9999, %Arg_1.10000)
}

%region_1168.36839 (Arg_0.36836: f32[], Arg_1.36837: f32[]) -> f32[] {
  %Arg_0.36836 = f32[] parameter(0)
  %Arg_1.36837 = f32[] parameter(1)
  ROOT %add.36838 = f32[] add(%Arg_0.36836, %Arg_1.36837)
}

%region_1169.36845 (Arg_0.36842: f32[], Arg_1.36843: f32[]) -> f32[] {
  %Arg_0.36842 = f32[] parameter(0)
  %Arg_1.36843 = f32[] parameter(1)
  ROOT %add.36844 = f32[] add(%Arg_0.36842, %Arg_1.36843)
}

%region_1170.36852 (Arg_0.36849: f32[], Arg_1.36850: f32[]) -> f32[] {
  %Arg_0.36849 = f32[] parameter(0)
  %Arg_1.36850 = f32[] parameter(1)
  ROOT %add.36851 = f32[] add(%Arg_0.36849, %Arg_1.36850)
}

%region_1171.36859 (Arg_0.36856: f32[], Arg_1.36857: f32[]) -> f32[] {
  %Arg_0.36856 = f32[] parameter(0)
  %Arg_1.36857 = f32[] parameter(1)
  ROOT %add.36858 = f32[] add(%Arg_0.36856, %Arg_1.36857)
}

%region_1172.36866 (Arg_0.36863: f32[], Arg_1.36864: f32[]) -> f32[] {
  %Arg_0.36863 = f32[] parameter(0)
  %Arg_1.36864 = f32[] parameter(1)
  ROOT %add.36865 = f32[] add(%Arg_0.36863, %Arg_1.36864)
}

%region_1173.36873 (Arg_0.36870: f32[], Arg_1.36871: f32[]) -> f32[] {
  %Arg_0.36870 = f32[] parameter(0)
  %Arg_1.36871 = f32[] parameter(1)
  ROOT %add.36872 = f32[] add(%Arg_0.36870, %Arg_1.36871)
}

%region_1174.36880 (Arg_0.36877: f32[], Arg_1.36878: f32[]) -> f32[] {
  %Arg_0.36877 = f32[] parameter(0)
  %Arg_1.36878 = f32[] parameter(1)
  ROOT %add.36879 = f32[] add(%Arg_0.36877, %Arg_1.36878)
}

%region_1175.36887 (Arg_0.36884: f32[], Arg_1.36885: f32[]) -> f32[] {
  %Arg_0.36884 = f32[] parameter(0)
  %Arg_1.36885 = f32[] parameter(1)
  ROOT %add.36886 = f32[] add(%Arg_0.36884, %Arg_1.36885)
}

%region_1176.36894 (Arg_0.36891: f32[], Arg_1.36892: f32[]) -> f32[] {
  %Arg_0.36891 = f32[] parameter(0)
  %Arg_1.36892 = f32[] parameter(1)
  ROOT %add.36893 = f32[] add(%Arg_0.36891, %Arg_1.36892)
}

%region_1177.36901 (Arg_0.36898: f32[], Arg_1.36899: f32[]) -> f32[] {
  %Arg_0.36898 = f32[] parameter(0)
  %Arg_1.36899 = f32[] parameter(1)
  ROOT %add.36900 = f32[] add(%Arg_0.36898, %Arg_1.36899)
}

%region_1178.36908 (Arg_0.36905: f32[], Arg_1.36906: f32[]) -> f32[] {
  %Arg_0.36905 = f32[] parameter(0)
  %Arg_1.36906 = f32[] parameter(1)
  ROOT %add.36907 = f32[] add(%Arg_0.36905, %Arg_1.36906)
}

%region_1179.36915 (Arg_0.36912: f32[], Arg_1.36913: f32[]) -> f32[] {
  %Arg_0.36912 = f32[] parameter(0)
  %Arg_1.36913 = f32[] parameter(1)
  ROOT %add.36914 = f32[] add(%Arg_0.36912, %Arg_1.36913)
}

%region_1180.36922 (Arg_0.36919: f32[], Arg_1.36920: f32[]) -> f32[] {
  %Arg_0.36919 = f32[] parameter(0)
  %Arg_1.36920 = f32[] parameter(1)
  ROOT %add.36921 = f32[] add(%Arg_0.36919, %Arg_1.36920)
}

%region_1181.36929 (Arg_0.36926: f32[], Arg_1.36927: f32[]) -> f32[] {
  %Arg_0.36926 = f32[] parameter(0)
  %Arg_1.36927 = f32[] parameter(1)
  ROOT %add.36928 = f32[] add(%Arg_0.36926, %Arg_1.36927)
}

%region_1182.36936 (Arg_0.36933: f32[], Arg_1.36934: f32[]) -> f32[] {
  %Arg_0.36933 = f32[] parameter(0)
  %Arg_1.36934 = f32[] parameter(1)
  ROOT %add.36935 = f32[] add(%Arg_0.36933, %Arg_1.36934)
}

%region_1183.36943 (Arg_0.36940: f32[], Arg_1.36941: f32[]) -> f32[] {
  %Arg_0.36940 = f32[] parameter(0)
  %Arg_1.36941 = f32[] parameter(1)
  ROOT %add.36942 = f32[] add(%Arg_0.36940, %Arg_1.36941)
}

%region_1184.36950 (Arg_0.36947: f32[], Arg_1.36948: f32[]) -> f32[] {
  %Arg_0.36947 = f32[] parameter(0)
  %Arg_1.36948 = f32[] parameter(1)
  ROOT %add.36949 = f32[] add(%Arg_0.36947, %Arg_1.36948)
}

%region_1185.36957 (Arg_0.36954: f32[], Arg_1.36955: f32[]) -> f32[] {
  %Arg_0.36954 = f32[] parameter(0)
  %Arg_1.36955 = f32[] parameter(1)
  ROOT %add.36956 = f32[] add(%Arg_0.36954, %Arg_1.36955)
}

%region_1186.36964 (Arg_0.36961: f32[], Arg_1.36962: f32[]) -> f32[] {
  %Arg_0.36961 = f32[] parameter(0)
  %Arg_1.36962 = f32[] parameter(1)
  ROOT %add.36963 = f32[] add(%Arg_0.36961, %Arg_1.36962)
}

%region_1187.36971 (Arg_0.36968: f32[], Arg_1.36969: f32[]) -> f32[] {
  %Arg_0.36968 = f32[] parameter(0)
  %Arg_1.36969 = f32[] parameter(1)
  ROOT %add.36970 = f32[] add(%Arg_0.36968, %Arg_1.36969)
}

%region_1188.36978 (Arg_0.36975: f32[], Arg_1.36976: f32[]) -> f32[] {
  %Arg_0.36975 = f32[] parameter(0)
  %Arg_1.36976 = f32[] parameter(1)
  ROOT %add.36977 = f32[] add(%Arg_0.36975, %Arg_1.36976)
}

%region_1189.36985 (Arg_0.36982: f32[], Arg_1.36983: f32[]) -> f32[] {
  %Arg_0.36982 = f32[] parameter(0)
  %Arg_1.36983 = f32[] parameter(1)
  ROOT %add.36984 = f32[] add(%Arg_0.36982, %Arg_1.36983)
}

%region_1190.36992 (Arg_0.36989: f32[], Arg_1.36990: f32[]) -> f32[] {
  %Arg_0.36989 = f32[] parameter(0)
  %Arg_1.36990 = f32[] parameter(1)
  ROOT %add.36991 = f32[] add(%Arg_0.36989, %Arg_1.36990)
}

%region_1191.36999 (Arg_0.36996: f32[], Arg_1.36997: f32[]) -> f32[] {
  %Arg_0.36996 = f32[] parameter(0)
  %Arg_1.36997 = f32[] parameter(1)
  ROOT %add.36998 = f32[] add(%Arg_0.36996, %Arg_1.36997)
}

%region_1192.37006 (Arg_0.37003: f32[], Arg_1.37004: f32[]) -> f32[] {
  %Arg_0.37003 = f32[] parameter(0)
  %Arg_1.37004 = f32[] parameter(1)
  ROOT %add.37005 = f32[] add(%Arg_0.37003, %Arg_1.37004)
}

%region_1193.37013 (Arg_0.37010: f32[], Arg_1.37011: f32[]) -> f32[] {
  %Arg_0.37010 = f32[] parameter(0)
  %Arg_1.37011 = f32[] parameter(1)
  ROOT %add.37012 = f32[] add(%Arg_0.37010, %Arg_1.37011)
}

%region_1194.37020 (Arg_0.37017: f32[], Arg_1.37018: f32[]) -> f32[] {
  %Arg_0.37017 = f32[] parameter(0)
  %Arg_1.37018 = f32[] parameter(1)
  ROOT %add.37019 = f32[] add(%Arg_0.37017, %Arg_1.37018)
}

%region_1195.37027 (Arg_0.37024: f32[], Arg_1.37025: f32[]) -> f32[] {
  %Arg_0.37024 = f32[] parameter(0)
  %Arg_1.37025 = f32[] parameter(1)
  ROOT %add.37026 = f32[] add(%Arg_0.37024, %Arg_1.37025)
}

%region_1196.37034 (Arg_0.37031: f32[], Arg_1.37032: f32[]) -> f32[] {
  %Arg_0.37031 = f32[] parameter(0)
  %Arg_1.37032 = f32[] parameter(1)
  ROOT %add.37033 = f32[] add(%Arg_0.37031, %Arg_1.37032)
}

%region_1197.37041 (Arg_0.37038: f32[], Arg_1.37039: f32[]) -> f32[] {
  %Arg_0.37038 = f32[] parameter(0)
  %Arg_1.37039 = f32[] parameter(1)
  ROOT %add.37040 = f32[] add(%Arg_0.37038, %Arg_1.37039)
}

%region_1198.37048 (Arg_0.37045: f32[], Arg_1.37046: f32[]) -> f32[] {
  %Arg_0.37045 = f32[] parameter(0)
  %Arg_1.37046 = f32[] parameter(1)
  ROOT %add.37047 = f32[] add(%Arg_0.37045, %Arg_1.37046)
}

%region_1199.37055 (Arg_0.37052: f32[], Arg_1.37053: f32[]) -> f32[] {
  %Arg_0.37052 = f32[] parameter(0)
  %Arg_1.37053 = f32[] parameter(1)
  ROOT %add.37054 = f32[] add(%Arg_0.37052, %Arg_1.37053)
}

%region_1200.37062 (Arg_0.37059: f32[], Arg_1.37060: f32[]) -> f32[] {
  %Arg_0.37059 = f32[] parameter(0)
  %Arg_1.37060 = f32[] parameter(1)
  ROOT %add.37061 = f32[] add(%Arg_0.37059, %Arg_1.37060)
}

%region_1201.37069 (Arg_0.37066: f32[], Arg_1.37067: f32[]) -> f32[] {
  %Arg_0.37066 = f32[] parameter(0)
  %Arg_1.37067 = f32[] parameter(1)
  ROOT %add.37068 = f32[] add(%Arg_0.37066, %Arg_1.37067)
}

%region_1202.37076 (Arg_0.37073: f32[], Arg_1.37074: f32[]) -> f32[] {
  %Arg_0.37073 = f32[] parameter(0)
  %Arg_1.37074 = f32[] parameter(1)
  ROOT %add.37075 = f32[] add(%Arg_0.37073, %Arg_1.37074)
}

%region_1203.37083 (Arg_0.37080: f32[], Arg_1.37081: f32[]) -> f32[] {
  %Arg_0.37080 = f32[] parameter(0)
  %Arg_1.37081 = f32[] parameter(1)
  ROOT %add.37082 = f32[] add(%Arg_0.37080, %Arg_1.37081)
}

%region_1204.37090 (Arg_0.37087: f32[], Arg_1.37088: f32[]) -> f32[] {
  %Arg_0.37087 = f32[] parameter(0)
  %Arg_1.37088 = f32[] parameter(1)
  ROOT %add.37089 = f32[] add(%Arg_0.37087, %Arg_1.37088)
}

%region_1205.37097 (Arg_0.37094: f32[], Arg_1.37095: f32[]) -> f32[] {
  %Arg_0.37094 = f32[] parameter(0)
  %Arg_1.37095 = f32[] parameter(1)
  ROOT %add.37096 = f32[] add(%Arg_0.37094, %Arg_1.37095)
}

%region_1206.37104 (Arg_0.37101: f32[], Arg_1.37102: f32[]) -> f32[] {
  %Arg_0.37101 = f32[] parameter(0)
  %Arg_1.37102 = f32[] parameter(1)
  ROOT %add.37103 = f32[] add(%Arg_0.37101, %Arg_1.37102)
}

%region_1207.37111 (Arg_0.37108: f32[], Arg_1.37109: f32[]) -> f32[] {
  %Arg_0.37108 = f32[] parameter(0)
  %Arg_1.37109 = f32[] parameter(1)
  ROOT %add.37110 = f32[] add(%Arg_0.37108, %Arg_1.37109)
}

%region_1208.37118 (Arg_0.37115: f32[], Arg_1.37116: f32[]) -> f32[] {
  %Arg_0.37115 = f32[] parameter(0)
  %Arg_1.37116 = f32[] parameter(1)
  ROOT %add.37117 = f32[] add(%Arg_0.37115, %Arg_1.37116)
}

%region_1209.37125 (Arg_0.37122: f32[], Arg_1.37123: f32[]) -> f32[] {
  %Arg_0.37122 = f32[] parameter(0)
  %Arg_1.37123 = f32[] parameter(1)
  ROOT %add.37124 = f32[] add(%Arg_0.37122, %Arg_1.37123)
}

%region_1210.37132 (Arg_0.37129: f32[], Arg_1.37130: f32[]) -> f32[] {
  %Arg_0.37129 = f32[] parameter(0)
  %Arg_1.37130 = f32[] parameter(1)
  ROOT %add.37131 = f32[] add(%Arg_0.37129, %Arg_1.37130)
}

%region_1211.37139 (Arg_0.37136: f32[], Arg_1.37137: f32[]) -> f32[] {
  %Arg_0.37136 = f32[] parameter(0)
  %Arg_1.37137 = f32[] parameter(1)
  ROOT %add.37138 = f32[] add(%Arg_0.37136, %Arg_1.37137)
}

%region_1212.37146 (Arg_0.37143: f32[], Arg_1.37144: f32[]) -> f32[] {
  %Arg_0.37143 = f32[] parameter(0)
  %Arg_1.37144 = f32[] parameter(1)
  ROOT %add.37145 = f32[] add(%Arg_0.37143, %Arg_1.37144)
}

%region_1213.37153 (Arg_0.37150: f32[], Arg_1.37151: f32[]) -> f32[] {
  %Arg_0.37150 = f32[] parameter(0)
  %Arg_1.37151 = f32[] parameter(1)
  ROOT %add.37152 = f32[] add(%Arg_0.37150, %Arg_1.37151)
}

%region_1214.37160 (Arg_0.37157: f32[], Arg_1.37158: f32[]) -> f32[] {
  %Arg_0.37157 = f32[] parameter(0)
  %Arg_1.37158 = f32[] parameter(1)
  ROOT %add.37159 = f32[] add(%Arg_0.37157, %Arg_1.37158)
}

%region_1215.37167 (Arg_0.37164: f32[], Arg_1.37165: f32[]) -> f32[] {
  %Arg_0.37164 = f32[] parameter(0)
  %Arg_1.37165 = f32[] parameter(1)
  ROOT %add.37166 = f32[] add(%Arg_0.37164, %Arg_1.37165)
}

%region_1216.37174 (Arg_0.37171: f32[], Arg_1.37172: f32[]) -> f32[] {
  %Arg_0.37171 = f32[] parameter(0)
  %Arg_1.37172 = f32[] parameter(1)
  ROOT %add.37173 = f32[] add(%Arg_0.37171, %Arg_1.37172)
}

%region_1217.37181 (Arg_0.37178: f32[], Arg_1.37179: f32[]) -> f32[] {
  %Arg_0.37178 = f32[] parameter(0)
  %Arg_1.37179 = f32[] parameter(1)
  ROOT %add.37180 = f32[] add(%Arg_0.37178, %Arg_1.37179)
}

%region_1218.37188 (Arg_0.37185: f32[], Arg_1.37186: f32[]) -> f32[] {
  %Arg_0.37185 = f32[] parameter(0)
  %Arg_1.37186 = f32[] parameter(1)
  ROOT %add.37187 = f32[] add(%Arg_0.37185, %Arg_1.37186)
}

%region_1219.37195 (Arg_0.37192: f32[], Arg_1.37193: f32[]) -> f32[] {
  %Arg_0.37192 = f32[] parameter(0)
  %Arg_1.37193 = f32[] parameter(1)
  ROOT %add.37194 = f32[] add(%Arg_0.37192, %Arg_1.37193)
}

%region_1220.37202 (Arg_0.37199: f32[], Arg_1.37200: f32[]) -> f32[] {
  %Arg_0.37199 = f32[] parameter(0)
  %Arg_1.37200 = f32[] parameter(1)
  ROOT %add.37201 = f32[] add(%Arg_0.37199, %Arg_1.37200)
}

%region_1221.37209 (Arg_0.37206: f32[], Arg_1.37207: f32[]) -> f32[] {
  %Arg_0.37206 = f32[] parameter(0)
  %Arg_1.37207 = f32[] parameter(1)
  ROOT %add.37208 = f32[] add(%Arg_0.37206, %Arg_1.37207)
}

%region_1222.37216 (Arg_0.37213: f32[], Arg_1.37214: f32[]) -> f32[] {
  %Arg_0.37213 = f32[] parameter(0)
  %Arg_1.37214 = f32[] parameter(1)
  ROOT %add.37215 = f32[] add(%Arg_0.37213, %Arg_1.37214)
}

%region_1223.37223 (Arg_0.37220: f32[], Arg_1.37221: f32[]) -> f32[] {
  %Arg_0.37220 = f32[] parameter(0)
  %Arg_1.37221 = f32[] parameter(1)
  ROOT %add.37222 = f32[] add(%Arg_0.37220, %Arg_1.37221)
}

%region_1224.37230 (Arg_0.37227: f32[], Arg_1.37228: f32[]) -> f32[] {
  %Arg_0.37227 = f32[] parameter(0)
  %Arg_1.37228 = f32[] parameter(1)
  ROOT %add.37229 = f32[] add(%Arg_0.37227, %Arg_1.37228)
}

%region_1225.37237 (Arg_0.37234: f32[], Arg_1.37235: f32[]) -> f32[] {
  %Arg_0.37234 = f32[] parameter(0)
  %Arg_1.37235 = f32[] parameter(1)
  ROOT %add.37236 = f32[] add(%Arg_0.37234, %Arg_1.37235)
}

%region_1226.37244 (Arg_0.37241: f32[], Arg_1.37242: f32[]) -> f32[] {
  %Arg_0.37241 = f32[] parameter(0)
  %Arg_1.37242 = f32[] parameter(1)
  ROOT %add.37243 = f32[] add(%Arg_0.37241, %Arg_1.37242)
}

%region_1227.37251 (Arg_0.37248: f32[], Arg_1.37249: f32[]) -> f32[] {
  %Arg_0.37248 = f32[] parameter(0)
  %Arg_1.37249 = f32[] parameter(1)
  ROOT %add.37250 = f32[] add(%Arg_0.37248, %Arg_1.37249)
}

%region_1228.37258 (Arg_0.37255: f32[], Arg_1.37256: f32[]) -> f32[] {
  %Arg_0.37255 = f32[] parameter(0)
  %Arg_1.37256 = f32[] parameter(1)
  ROOT %add.37257 = f32[] add(%Arg_0.37255, %Arg_1.37256)
}

%region_1229.37265 (Arg_0.37262: f32[], Arg_1.37263: f32[]) -> f32[] {
  %Arg_0.37262 = f32[] parameter(0)
  %Arg_1.37263 = f32[] parameter(1)
  ROOT %add.37264 = f32[] add(%Arg_0.37262, %Arg_1.37263)
}

%region_1230.37272 (Arg_0.37269: f32[], Arg_1.37270: f32[]) -> f32[] {
  %Arg_0.37269 = f32[] parameter(0)
  %Arg_1.37270 = f32[] parameter(1)
  ROOT %add.37271 = f32[] add(%Arg_0.37269, %Arg_1.37270)
}

%region_1231.37279 (Arg_0.37276: f32[], Arg_1.37277: f32[]) -> f32[] {
  %Arg_0.37276 = f32[] parameter(0)
  %Arg_1.37277 = f32[] parameter(1)
  ROOT %add.37278 = f32[] add(%Arg_0.37276, %Arg_1.37277)
}

%region_1232.37286 (Arg_0.37283: f32[], Arg_1.37284: f32[]) -> f32[] {
  %Arg_0.37283 = f32[] parameter(0)
  %Arg_1.37284 = f32[] parameter(1)
  ROOT %add.37285 = f32[] add(%Arg_0.37283, %Arg_1.37284)
}

%region_1233.37293 (Arg_0.37290: f32[], Arg_1.37291: f32[]) -> f32[] {
  %Arg_0.37290 = f32[] parameter(0)
  %Arg_1.37291 = f32[] parameter(1)
  ROOT %add.37292 = f32[] add(%Arg_0.37290, %Arg_1.37291)
}

%region_1234.37300 (Arg_0.37297: f32[], Arg_1.37298: f32[]) -> f32[] {
  %Arg_0.37297 = f32[] parameter(0)
  %Arg_1.37298 = f32[] parameter(1)
  ROOT %add.37299 = f32[] add(%Arg_0.37297, %Arg_1.37298)
}

%region_1235.37307 (Arg_0.37304: f32[], Arg_1.37305: f32[]) -> f32[] {
  %Arg_0.37304 = f32[] parameter(0)
  %Arg_1.37305 = f32[] parameter(1)
  ROOT %add.37306 = f32[] add(%Arg_0.37304, %Arg_1.37305)
}

%region_1236.37314 (Arg_0.37311: f32[], Arg_1.37312: f32[]) -> f32[] {
  %Arg_0.37311 = f32[] parameter(0)
  %Arg_1.37312 = f32[] parameter(1)
  ROOT %add.37313 = f32[] add(%Arg_0.37311, %Arg_1.37312)
}

%region_1237.37321 (Arg_0.37318: f32[], Arg_1.37319: f32[]) -> f32[] {
  %Arg_0.37318 = f32[] parameter(0)
  %Arg_1.37319 = f32[] parameter(1)
  ROOT %add.37320 = f32[] add(%Arg_0.37318, %Arg_1.37319)
}

%region_1238.37328 (Arg_0.37325: f32[], Arg_1.37326: f32[]) -> f32[] {
  %Arg_0.37325 = f32[] parameter(0)
  %Arg_1.37326 = f32[] parameter(1)
  ROOT %add.37327 = f32[] add(%Arg_0.37325, %Arg_1.37326)
}

%region_1239.37335 (Arg_0.37332: f32[], Arg_1.37333: f32[]) -> f32[] {
  %Arg_0.37332 = f32[] parameter(0)
  %Arg_1.37333 = f32[] parameter(1)
  ROOT %add.37334 = f32[] add(%Arg_0.37332, %Arg_1.37333)
}

%region_1240.37342 (Arg_0.37339: f32[], Arg_1.37340: f32[]) -> f32[] {
  %Arg_0.37339 = f32[] parameter(0)
  %Arg_1.37340 = f32[] parameter(1)
  ROOT %add.37341 = f32[] add(%Arg_0.37339, %Arg_1.37340)
}

%region_1241.37349 (Arg_0.37346: f32[], Arg_1.37347: f32[]) -> f32[] {
  %Arg_0.37346 = f32[] parameter(0)
  %Arg_1.37347 = f32[] parameter(1)
  ROOT %add.37348 = f32[] add(%Arg_0.37346, %Arg_1.37347)
}

%region_1242.37356 (Arg_0.37353: f32[], Arg_1.37354: f32[]) -> f32[] {
  %Arg_0.37353 = f32[] parameter(0)
  %Arg_1.37354 = f32[] parameter(1)
  ROOT %add.37355 = f32[] add(%Arg_0.37353, %Arg_1.37354)
}

%region_1243.37363 (Arg_0.37360: f32[], Arg_1.37361: f32[]) -> f32[] {
  %Arg_0.37360 = f32[] parameter(0)
  %Arg_1.37361 = f32[] parameter(1)
  ROOT %add.37362 = f32[] add(%Arg_0.37360, %Arg_1.37361)
}

%region_1244.37370 (Arg_0.37367: f32[], Arg_1.37368: f32[]) -> f32[] {
  %Arg_0.37367 = f32[] parameter(0)
  %Arg_1.37368 = f32[] parameter(1)
  ROOT %add.37369 = f32[] add(%Arg_0.37367, %Arg_1.37368)
}

%region_1245.37377 (Arg_0.37374: f32[], Arg_1.37375: f32[]) -> f32[] {
  %Arg_0.37374 = f32[] parameter(0)
  %Arg_1.37375 = f32[] parameter(1)
  ROOT %add.37376 = f32[] add(%Arg_0.37374, %Arg_1.37375)
}

%region_1246.37384 (Arg_0.37381: f32[], Arg_1.37382: f32[]) -> f32[] {
  %Arg_0.37381 = f32[] parameter(0)
  %Arg_1.37382 = f32[] parameter(1)
  ROOT %add.37383 = f32[] add(%Arg_0.37381, %Arg_1.37382)
}

%region_1247.37391 (Arg_0.37388: f32[], Arg_1.37389: f32[]) -> f32[] {
  %Arg_0.37388 = f32[] parameter(0)
  %Arg_1.37389 = f32[] parameter(1)
  ROOT %add.37390 = f32[] add(%Arg_0.37388, %Arg_1.37389)
}

%region_1248.37398 (Arg_0.37395: f32[], Arg_1.37396: f32[]) -> f32[] {
  %Arg_0.37395 = f32[] parameter(0)
  %Arg_1.37396 = f32[] parameter(1)
  ROOT %add.37397 = f32[] add(%Arg_0.37395, %Arg_1.37396)
}

%region_1249.37405 (Arg_0.37402: f32[], Arg_1.37403: f32[]) -> f32[] {
  %Arg_0.37402 = f32[] parameter(0)
  %Arg_1.37403 = f32[] parameter(1)
  ROOT %add.37404 = f32[] add(%Arg_0.37402, %Arg_1.37403)
}

%region_1250.37412 (Arg_0.37409: f32[], Arg_1.37410: f32[]) -> f32[] {
  %Arg_0.37409 = f32[] parameter(0)
  %Arg_1.37410 = f32[] parameter(1)
  ROOT %add.37411 = f32[] add(%Arg_0.37409, %Arg_1.37410)
}

%region_1251.37419 (Arg_0.37416: f32[], Arg_1.37417: f32[]) -> f32[] {
  %Arg_0.37416 = f32[] parameter(0)
  %Arg_1.37417 = f32[] parameter(1)
  ROOT %add.37418 = f32[] add(%Arg_0.37416, %Arg_1.37417)
}

%region_1252.37426 (Arg_0.37423: f32[], Arg_1.37424: f32[]) -> f32[] {
  %Arg_0.37423 = f32[] parameter(0)
  %Arg_1.37424 = f32[] parameter(1)
  ROOT %add.37425 = f32[] add(%Arg_0.37423, %Arg_1.37424)
}

%region_1253.37433 (Arg_0.37430: f32[], Arg_1.37431: f32[]) -> f32[] {
  %Arg_0.37430 = f32[] parameter(0)
  %Arg_1.37431 = f32[] parameter(1)
  ROOT %add.37432 = f32[] add(%Arg_0.37430, %Arg_1.37431)
}

%region_1254.37440 (Arg_0.37437: f32[], Arg_1.37438: f32[]) -> f32[] {
  %Arg_0.37437 = f32[] parameter(0)
  %Arg_1.37438 = f32[] parameter(1)
  ROOT %add.37439 = f32[] add(%Arg_0.37437, %Arg_1.37438)
}

%region_1255.37447 (Arg_0.37444: f32[], Arg_1.37445: f32[]) -> f32[] {
  %Arg_0.37444 = f32[] parameter(0)
  %Arg_1.37445 = f32[] parameter(1)
  ROOT %add.37446 = f32[] add(%Arg_0.37444, %Arg_1.37445)
}

%region_1256.37454 (Arg_0.37451: f32[], Arg_1.37452: f32[]) -> f32[] {
  %Arg_0.37451 = f32[] parameter(0)
  %Arg_1.37452 = f32[] parameter(1)
  ROOT %add.37453 = f32[] add(%Arg_0.37451, %Arg_1.37452)
}

%region_1257.37461 (Arg_0.37458: f32[], Arg_1.37459: f32[]) -> f32[] {
  %Arg_0.37458 = f32[] parameter(0)
  %Arg_1.37459 = f32[] parameter(1)
  ROOT %add.37460 = f32[] add(%Arg_0.37458, %Arg_1.37459)
}

%region_1258.37468 (Arg_0.37465: f32[], Arg_1.37466: f32[]) -> f32[] {
  %Arg_0.37465 = f32[] parameter(0)
  %Arg_1.37466 = f32[] parameter(1)
  ROOT %add.37467 = f32[] add(%Arg_0.37465, %Arg_1.37466)
}

%region_1259.37475 (Arg_0.37472: f32[], Arg_1.37473: f32[]) -> f32[] {
  %Arg_0.37472 = f32[] parameter(0)
  %Arg_1.37473 = f32[] parameter(1)
  ROOT %add.37474 = f32[] add(%Arg_0.37472, %Arg_1.37473)
}

%region_1260.37482 (Arg_0.37479: f32[], Arg_1.37480: f32[]) -> f32[] {
  %Arg_0.37479 = f32[] parameter(0)
  %Arg_1.37480 = f32[] parameter(1)
  ROOT %add.37481 = f32[] add(%Arg_0.37479, %Arg_1.37480)
}

%region_1261.37489 (Arg_0.37486: f32[], Arg_1.37487: f32[]) -> f32[] {
  %Arg_0.37486 = f32[] parameter(0)
  %Arg_1.37487 = f32[] parameter(1)
  ROOT %add.37488 = f32[] add(%Arg_0.37486, %Arg_1.37487)
}

%region_1262.37496 (Arg_0.37493: f32[], Arg_1.37494: f32[]) -> f32[] {
  %Arg_0.37493 = f32[] parameter(0)
  %Arg_1.37494 = f32[] parameter(1)
  ROOT %add.37495 = f32[] add(%Arg_0.37493, %Arg_1.37494)
}

%region_1263.37503 (Arg_0.37500: f32[], Arg_1.37501: f32[]) -> f32[] {
  %Arg_0.37500 = f32[] parameter(0)
  %Arg_1.37501 = f32[] parameter(1)
  ROOT %add.37502 = f32[] add(%Arg_0.37500, %Arg_1.37501)
}

%region_1264.37510 (Arg_0.37507: f32[], Arg_1.37508: f32[]) -> f32[] {
  %Arg_0.37507 = f32[] parameter(0)
  %Arg_1.37508 = f32[] parameter(1)
  ROOT %add.37509 = f32[] add(%Arg_0.37507, %Arg_1.37508)
}

%region_1265.37517 (Arg_0.37514: f32[], Arg_1.37515: f32[]) -> f32[] {
  %Arg_0.37514 = f32[] parameter(0)
  %Arg_1.37515 = f32[] parameter(1)
  ROOT %add.37516 = f32[] add(%Arg_0.37514, %Arg_1.37515)
}

%region_1266.37524 (Arg_0.37521: f32[], Arg_1.37522: f32[]) -> f32[] {
  %Arg_0.37521 = f32[] parameter(0)
  %Arg_1.37522 = f32[] parameter(1)
  ROOT %add.37523 = f32[] add(%Arg_0.37521, %Arg_1.37522)
}

%region_1267.37531 (Arg_0.37528: f32[], Arg_1.37529: f32[]) -> f32[] {
  %Arg_0.37528 = f32[] parameter(0)
  %Arg_1.37529 = f32[] parameter(1)
  ROOT %add.37530 = f32[] add(%Arg_0.37528, %Arg_1.37529)
}

%region_1268.37538 (Arg_0.37535: f32[], Arg_1.37536: f32[]) -> f32[] {
  %Arg_0.37535 = f32[] parameter(0)
  %Arg_1.37536 = f32[] parameter(1)
  ROOT %add.37537 = f32[] add(%Arg_0.37535, %Arg_1.37536)
}

%region_1269.37545 (Arg_0.37542: f32[], Arg_1.37543: f32[]) -> f32[] {
  %Arg_0.37542 = f32[] parameter(0)
  %Arg_1.37543 = f32[] parameter(1)
  ROOT %add.37544 = f32[] add(%Arg_0.37542, %Arg_1.37543)
}

%region_1270.37552 (Arg_0.37549: f32[], Arg_1.37550: f32[]) -> f32[] {
  %Arg_0.37549 = f32[] parameter(0)
  %Arg_1.37550 = f32[] parameter(1)
  ROOT %add.37551 = f32[] add(%Arg_0.37549, %Arg_1.37550)
}

%region_1271.37559 (Arg_0.37556: f32[], Arg_1.37557: f32[]) -> f32[] {
  %Arg_0.37556 = f32[] parameter(0)
  %Arg_1.37557 = f32[] parameter(1)
  ROOT %add.37558 = f32[] add(%Arg_0.37556, %Arg_1.37557)
}

%region_1272.37566 (Arg_0.37563: f32[], Arg_1.37564: f32[]) -> f32[] {
  %Arg_0.37563 = f32[] parameter(0)
  %Arg_1.37564 = f32[] parameter(1)
  ROOT %add.37565 = f32[] add(%Arg_0.37563, %Arg_1.37564)
}

%region_1273.37573 (Arg_0.37570: f32[], Arg_1.37571: f32[]) -> f32[] {
  %Arg_0.37570 = f32[] parameter(0)
  %Arg_1.37571 = f32[] parameter(1)
  ROOT %add.37572 = f32[] add(%Arg_0.37570, %Arg_1.37571)
}

%region_1274.37580 (Arg_0.37577: f32[], Arg_1.37578: f32[]) -> f32[] {
  %Arg_0.37577 = f32[] parameter(0)
  %Arg_1.37578 = f32[] parameter(1)
  ROOT %add.37579 = f32[] add(%Arg_0.37577, %Arg_1.37578)
}

%region_1275.37587 (Arg_0.37584: f32[], Arg_1.37585: f32[]) -> f32[] {
  %Arg_0.37584 = f32[] parameter(0)
  %Arg_1.37585 = f32[] parameter(1)
  ROOT %add.37586 = f32[] add(%Arg_0.37584, %Arg_1.37585)
}

%region_1276.37594 (Arg_0.37591: f32[], Arg_1.37592: f32[]) -> f32[] {
  %Arg_0.37591 = f32[] parameter(0)
  %Arg_1.37592 = f32[] parameter(1)
  ROOT %add.37593 = f32[] add(%Arg_0.37591, %Arg_1.37592)
}

%region_1277.37601 (Arg_0.37598: f32[], Arg_1.37599: f32[]) -> f32[] {
  %Arg_0.37598 = f32[] parameter(0)
  %Arg_1.37599 = f32[] parameter(1)
  ROOT %add.37600 = f32[] add(%Arg_0.37598, %Arg_1.37599)
}

%region_1278.37608 (Arg_0.37605: f32[], Arg_1.37606: f32[]) -> f32[] {
  %Arg_0.37605 = f32[] parameter(0)
  %Arg_1.37606 = f32[] parameter(1)
  ROOT %add.37607 = f32[] add(%Arg_0.37605, %Arg_1.37606)
}

%region_1279.37615 (Arg_0.37612: f32[], Arg_1.37613: f32[]) -> f32[] {
  %Arg_0.37612 = f32[] parameter(0)
  %Arg_1.37613 = f32[] parameter(1)
  ROOT %add.37614 = f32[] add(%Arg_0.37612, %Arg_1.37613)
}

%region_1280.37622 (Arg_0.37619: f32[], Arg_1.37620: f32[]) -> f32[] {
  %Arg_0.37619 = f32[] parameter(0)
  %Arg_1.37620 = f32[] parameter(1)
  ROOT %add.37621 = f32[] add(%Arg_0.37619, %Arg_1.37620)
}

%region_1281.37629 (Arg_0.37626: f32[], Arg_1.37627: f32[]) -> f32[] {
  %Arg_0.37626 = f32[] parameter(0)
  %Arg_1.37627 = f32[] parameter(1)
  ROOT %add.37628 = f32[] add(%Arg_0.37626, %Arg_1.37627)
}

%region_1282.37636 (Arg_0.37633: f32[], Arg_1.37634: f32[]) -> f32[] {
  %Arg_0.37633 = f32[] parameter(0)
  %Arg_1.37634 = f32[] parameter(1)
  ROOT %add.37635 = f32[] add(%Arg_0.37633, %Arg_1.37634)
}

%region_1283.37643 (Arg_0.37640: f32[], Arg_1.37641: f32[]) -> f32[] {
  %Arg_0.37640 = f32[] parameter(0)
  %Arg_1.37641 = f32[] parameter(1)
  ROOT %add.37642 = f32[] add(%Arg_0.37640, %Arg_1.37641)
}

%region_1284.37650 (Arg_0.37647: f32[], Arg_1.37648: f32[]) -> f32[] {
  %Arg_0.37647 = f32[] parameter(0)
  %Arg_1.37648 = f32[] parameter(1)
  ROOT %add.37649 = f32[] add(%Arg_0.37647, %Arg_1.37648)
}

%region_1285.37657 (Arg_0.37654: f32[], Arg_1.37655: f32[]) -> f32[] {
  %Arg_0.37654 = f32[] parameter(0)
  %Arg_1.37655 = f32[] parameter(1)
  ROOT %add.37656 = f32[] add(%Arg_0.37654, %Arg_1.37655)
}

%region_1286.37664 (Arg_0.37661: f32[], Arg_1.37662: f32[]) -> f32[] {
  %Arg_0.37661 = f32[] parameter(0)
  %Arg_1.37662 = f32[] parameter(1)
  ROOT %add.37663 = f32[] add(%Arg_0.37661, %Arg_1.37662)
}

%region_1287.37671 (Arg_0.37668: f32[], Arg_1.37669: f32[]) -> f32[] {
  %Arg_0.37668 = f32[] parameter(0)
  %Arg_1.37669 = f32[] parameter(1)
  ROOT %add.37670 = f32[] add(%Arg_0.37668, %Arg_1.37669)
}

%region_1288.37678 (Arg_0.37675: f32[], Arg_1.37676: f32[]) -> f32[] {
  %Arg_0.37675 = f32[] parameter(0)
  %Arg_1.37676 = f32[] parameter(1)
  ROOT %add.37677 = f32[] add(%Arg_0.37675, %Arg_1.37676)
}

%region_1289.37685 (Arg_0.37682: f32[], Arg_1.37683: f32[]) -> f32[] {
  %Arg_0.37682 = f32[] parameter(0)
  %Arg_1.37683 = f32[] parameter(1)
  ROOT %add.37684 = f32[] add(%Arg_0.37682, %Arg_1.37683)
}

%region_1290.37692 (Arg_0.37689: f32[], Arg_1.37690: f32[]) -> f32[] {
  %Arg_0.37689 = f32[] parameter(0)
  %Arg_1.37690 = f32[] parameter(1)
  ROOT %add.37691 = f32[] add(%Arg_0.37689, %Arg_1.37690)
}

%region_1291.37699 (Arg_0.37696: f32[], Arg_1.37697: f32[]) -> f32[] {
  %Arg_0.37696 = f32[] parameter(0)
  %Arg_1.37697 = f32[] parameter(1)
  ROOT %add.37698 = f32[] add(%Arg_0.37696, %Arg_1.37697)
}

%region_1292.37706 (Arg_0.37703: f32[], Arg_1.37704: f32[]) -> f32[] {
  %Arg_0.37703 = f32[] parameter(0)
  %Arg_1.37704 = f32[] parameter(1)
  ROOT %add.37705 = f32[] add(%Arg_0.37703, %Arg_1.37704)
}

%region_1293.37713 (Arg_0.37710: f32[], Arg_1.37711: f32[]) -> f32[] {
  %Arg_0.37710 = f32[] parameter(0)
  %Arg_1.37711 = f32[] parameter(1)
  ROOT %add.37712 = f32[] add(%Arg_0.37710, %Arg_1.37711)
}

%region_1294.37720 (Arg_0.37717: f32[], Arg_1.37718: f32[]) -> f32[] {
  %Arg_0.37717 = f32[] parameter(0)
  %Arg_1.37718 = f32[] parameter(1)
  ROOT %add.37719 = f32[] add(%Arg_0.37717, %Arg_1.37718)
}

%region_1295.37727 (Arg_0.37724: f32[], Arg_1.37725: f32[]) -> f32[] {
  %Arg_0.37724 = f32[] parameter(0)
  %Arg_1.37725 = f32[] parameter(1)
  ROOT %add.37726 = f32[] add(%Arg_0.37724, %Arg_1.37725)
}

%region_1296.37734 (Arg_0.37731: f32[], Arg_1.37732: f32[]) -> f32[] {
  %Arg_0.37731 = f32[] parameter(0)
  %Arg_1.37732 = f32[] parameter(1)
  ROOT %add.37733 = f32[] add(%Arg_0.37731, %Arg_1.37732)
}

%region_1297.37741 (Arg_0.37738: f32[], Arg_1.37739: f32[]) -> f32[] {
  %Arg_0.37738 = f32[] parameter(0)
  %Arg_1.37739 = f32[] parameter(1)
  ROOT %add.37740 = f32[] add(%Arg_0.37738, %Arg_1.37739)
}

%region_1298.37748 (Arg_0.37745: f32[], Arg_1.37746: f32[]) -> f32[] {
  %Arg_0.37745 = f32[] parameter(0)
  %Arg_1.37746 = f32[] parameter(1)
  ROOT %add.37747 = f32[] add(%Arg_0.37745, %Arg_1.37746)
}

%region_1299.37755 (Arg_0.37752: f32[], Arg_1.37753: f32[]) -> f32[] {
  %Arg_0.37752 = f32[] parameter(0)
  %Arg_1.37753 = f32[] parameter(1)
  ROOT %add.37754 = f32[] add(%Arg_0.37752, %Arg_1.37753)
}

%region_1300.37762 (Arg_0.37759: f32[], Arg_1.37760: f32[]) -> f32[] {
  %Arg_0.37759 = f32[] parameter(0)
  %Arg_1.37760 = f32[] parameter(1)
  ROOT %add.37761 = f32[] add(%Arg_0.37759, %Arg_1.37760)
}

%region_1301.37769 (Arg_0.37766: f32[], Arg_1.37767: f32[]) -> f32[] {
  %Arg_0.37766 = f32[] parameter(0)
  %Arg_1.37767 = f32[] parameter(1)
  ROOT %add.37768 = f32[] add(%Arg_0.37766, %Arg_1.37767)
}

%region_1302.37776 (Arg_0.37773: f32[], Arg_1.37774: f32[]) -> f32[] {
  %Arg_0.37773 = f32[] parameter(0)
  %Arg_1.37774 = f32[] parameter(1)
  ROOT %add.37775 = f32[] add(%Arg_0.37773, %Arg_1.37774)
}

%region_1303.37783 (Arg_0.37780: f32[], Arg_1.37781: f32[]) -> f32[] {
  %Arg_0.37780 = f32[] parameter(0)
  %Arg_1.37781 = f32[] parameter(1)
  ROOT %add.37782 = f32[] add(%Arg_0.37780, %Arg_1.37781)
}

%region_1304.37790 (Arg_0.37787: f32[], Arg_1.37788: f32[]) -> f32[] {
  %Arg_0.37787 = f32[] parameter(0)
  %Arg_1.37788 = f32[] parameter(1)
  ROOT %add.37789 = f32[] add(%Arg_0.37787, %Arg_1.37788)
}

%region_1305.37797 (Arg_0.37794: f32[], Arg_1.37795: f32[]) -> f32[] {
  %Arg_0.37794 = f32[] parameter(0)
  %Arg_1.37795 = f32[] parameter(1)
  ROOT %add.37796 = f32[] add(%Arg_0.37794, %Arg_1.37795)
}

%region_1306.37804 (Arg_0.37801: f32[], Arg_1.37802: f32[]) -> f32[] {
  %Arg_0.37801 = f32[] parameter(0)
  %Arg_1.37802 = f32[] parameter(1)
  ROOT %add.37803 = f32[] add(%Arg_0.37801, %Arg_1.37802)
}

%region_1307.37811 (Arg_0.37808: f32[], Arg_1.37809: f32[]) -> f32[] {
  %Arg_0.37808 = f32[] parameter(0)
  %Arg_1.37809 = f32[] parameter(1)
  ROOT %add.37810 = f32[] add(%Arg_0.37808, %Arg_1.37809)
}

%region_1308.37818 (Arg_0.37815: f32[], Arg_1.37816: f32[]) -> f32[] {
  %Arg_0.37815 = f32[] parameter(0)
  %Arg_1.37816 = f32[] parameter(1)
  ROOT %add.37817 = f32[] add(%Arg_0.37815, %Arg_1.37816)
}

%region_1309.37825 (Arg_0.37822: f32[], Arg_1.37823: f32[]) -> f32[] {
  %Arg_0.37822 = f32[] parameter(0)
  %Arg_1.37823 = f32[] parameter(1)
  ROOT %add.37824 = f32[] add(%Arg_0.37822, %Arg_1.37823)
}

%region_1310.37832 (Arg_0.37829: f32[], Arg_1.37830: f32[]) -> f32[] {
  %Arg_0.37829 = f32[] parameter(0)
  %Arg_1.37830 = f32[] parameter(1)
  ROOT %add.37831 = f32[] add(%Arg_0.37829, %Arg_1.37830)
}

%region_1311.37839 (Arg_0.37836: f32[], Arg_1.37837: f32[]) -> f32[] {
  %Arg_0.37836 = f32[] parameter(0)
  %Arg_1.37837 = f32[] parameter(1)
  ROOT %add.37838 = f32[] add(%Arg_0.37836, %Arg_1.37837)
}

%region_1312.37846 (Arg_0.37843: f32[], Arg_1.37844: f32[]) -> f32[] {
  %Arg_0.37843 = f32[] parameter(0)
  %Arg_1.37844 = f32[] parameter(1)
  ROOT %add.37845 = f32[] add(%Arg_0.37843, %Arg_1.37844)
}

%region_1313.37853 (Arg_0.37850: f32[], Arg_1.37851: f32[]) -> f32[] {
  %Arg_0.37850 = f32[] parameter(0)
  %Arg_1.37851 = f32[] parameter(1)
  ROOT %add.37852 = f32[] add(%Arg_0.37850, %Arg_1.37851)
}

%region_1314.37860 (Arg_0.37857: f32[], Arg_1.37858: f32[]) -> f32[] {
  %Arg_0.37857 = f32[] parameter(0)
  %Arg_1.37858 = f32[] parameter(1)
  ROOT %add.37859 = f32[] add(%Arg_0.37857, %Arg_1.37858)
}

%region_1315.37867 (Arg_0.37864: f32[], Arg_1.37865: f32[]) -> f32[] {
  %Arg_0.37864 = f32[] parameter(0)
  %Arg_1.37865 = f32[] parameter(1)
  ROOT %add.37866 = f32[] add(%Arg_0.37864, %Arg_1.37865)
}

%region_1316.37874 (Arg_0.37871: f32[], Arg_1.37872: f32[]) -> f32[] {
  %Arg_0.37871 = f32[] parameter(0)
  %Arg_1.37872 = f32[] parameter(1)
  ROOT %add.37873 = f32[] add(%Arg_0.37871, %Arg_1.37872)
}

%region_1317.37881 (Arg_0.37878: f32[], Arg_1.37879: f32[]) -> f32[] {
  %Arg_0.37878 = f32[] parameter(0)
  %Arg_1.37879 = f32[] parameter(1)
  ROOT %add.37880 = f32[] add(%Arg_0.37878, %Arg_1.37879)
}

%region_1318.37888 (Arg_0.37885: f32[], Arg_1.37886: f32[]) -> f32[] {
  %Arg_0.37885 = f32[] parameter(0)
  %Arg_1.37886 = f32[] parameter(1)
  ROOT %add.37887 = f32[] add(%Arg_0.37885, %Arg_1.37886)
}

%region_1319.37895 (Arg_0.37892: f32[], Arg_1.37893: f32[]) -> f32[] {
  %Arg_0.37892 = f32[] parameter(0)
  %Arg_1.37893 = f32[] parameter(1)
  ROOT %add.37894 = f32[] add(%Arg_0.37892, %Arg_1.37893)
}

%region_1320.37902 (Arg_0.37899: f32[], Arg_1.37900: f32[]) -> f32[] {
  %Arg_0.37899 = f32[] parameter(0)
  %Arg_1.37900 = f32[] parameter(1)
  ROOT %add.37901 = f32[] add(%Arg_0.37899, %Arg_1.37900)
}

%region_1321.37909 (Arg_0.37906: f32[], Arg_1.37907: f32[]) -> f32[] {
  %Arg_0.37906 = f32[] parameter(0)
  %Arg_1.37907 = f32[] parameter(1)
  ROOT %add.37908 = f32[] add(%Arg_0.37906, %Arg_1.37907)
}

%region_1322.37916 (Arg_0.37913: f32[], Arg_1.37914: f32[]) -> f32[] {
  %Arg_0.37913 = f32[] parameter(0)
  %Arg_1.37914 = f32[] parameter(1)
  ROOT %add.37915 = f32[] add(%Arg_0.37913, %Arg_1.37914)
}

%region_1323.37923 (Arg_0.37920: f32[], Arg_1.37921: f32[]) -> f32[] {
  %Arg_0.37920 = f32[] parameter(0)
  %Arg_1.37921 = f32[] parameter(1)
  ROOT %add.37922 = f32[] add(%Arg_0.37920, %Arg_1.37921)
}

%region_1324.37930 (Arg_0.37927: f32[], Arg_1.37928: f32[]) -> f32[] {
  %Arg_0.37927 = f32[] parameter(0)
  %Arg_1.37928 = f32[] parameter(1)
  ROOT %add.37929 = f32[] add(%Arg_0.37927, %Arg_1.37928)
}

%region_1325.37937 (Arg_0.37934: f32[], Arg_1.37935: f32[]) -> f32[] {
  %Arg_0.37934 = f32[] parameter(0)
  %Arg_1.37935 = f32[] parameter(1)
  ROOT %add.37936 = f32[] add(%Arg_0.37934, %Arg_1.37935)
}

%region_1326.37944 (Arg_0.37941: f32[], Arg_1.37942: f32[]) -> f32[] {
  %Arg_0.37941 = f32[] parameter(0)
  %Arg_1.37942 = f32[] parameter(1)
  ROOT %add.37943 = f32[] add(%Arg_0.37941, %Arg_1.37942)
}

%region_1327.37951 (Arg_0.37948: f32[], Arg_1.37949: f32[]) -> f32[] {
  %Arg_0.37948 = f32[] parameter(0)
  %Arg_1.37949 = f32[] parameter(1)
  ROOT %add.37950 = f32[] add(%Arg_0.37948, %Arg_1.37949)
}

%region_1328.37958 (Arg_0.37955: f32[], Arg_1.37956: f32[]) -> f32[] {
  %Arg_0.37955 = f32[] parameter(0)
  %Arg_1.37956 = f32[] parameter(1)
  ROOT %add.37957 = f32[] add(%Arg_0.37955, %Arg_1.37956)
}

%region_1329.37965 (Arg_0.37962: f32[], Arg_1.37963: f32[]) -> f32[] {
  %Arg_0.37962 = f32[] parameter(0)
  %Arg_1.37963 = f32[] parameter(1)
  ROOT %add.37964 = f32[] add(%Arg_0.37962, %Arg_1.37963)
}

%region_1330.37972 (Arg_0.37969: f32[], Arg_1.37970: f32[]) -> f32[] {
  %Arg_0.37969 = f32[] parameter(0)
  %Arg_1.37970 = f32[] parameter(1)
  ROOT %add.37971 = f32[] add(%Arg_0.37969, %Arg_1.37970)
}

%region_1331.37979 (Arg_0.37976: f32[], Arg_1.37977: f32[]) -> f32[] {
  %Arg_0.37976 = f32[] parameter(0)
  %Arg_1.37977 = f32[] parameter(1)
  ROOT %add.37978 = f32[] add(%Arg_0.37976, %Arg_1.37977)
}

%region_1332.37986 (Arg_0.37983: f32[], Arg_1.37984: f32[]) -> f32[] {
  %Arg_0.37983 = f32[] parameter(0)
  %Arg_1.37984 = f32[] parameter(1)
  ROOT %add.37985 = f32[] add(%Arg_0.37983, %Arg_1.37984)
}

%region_1333.37993 (Arg_0.37990: f32[], Arg_1.37991: f32[]) -> f32[] {
  %Arg_0.37990 = f32[] parameter(0)
  %Arg_1.37991 = f32[] parameter(1)
  ROOT %add.37992 = f32[] add(%Arg_0.37990, %Arg_1.37991)
}

%region_1334.38000 (Arg_0.37997: f32[], Arg_1.37998: f32[]) -> f32[] {
  %Arg_0.37997 = f32[] parameter(0)
  %Arg_1.37998 = f32[] parameter(1)
  ROOT %add.37999 = f32[] add(%Arg_0.37997, %Arg_1.37998)
}

%region_1335.38007 (Arg_0.38004: f32[], Arg_1.38005: f32[]) -> f32[] {
  %Arg_0.38004 = f32[] parameter(0)
  %Arg_1.38005 = f32[] parameter(1)
  ROOT %add.38006 = f32[] add(%Arg_0.38004, %Arg_1.38005)
}

%region_1336.38014 (Arg_0.38011: f32[], Arg_1.38012: f32[]) -> f32[] {
  %Arg_0.38011 = f32[] parameter(0)
  %Arg_1.38012 = f32[] parameter(1)
  ROOT %add.38013 = f32[] add(%Arg_0.38011, %Arg_1.38012)
}

%region_1337.38021 (Arg_0.38018: f32[], Arg_1.38019: f32[]) -> f32[] {
  %Arg_0.38018 = f32[] parameter(0)
  %Arg_1.38019 = f32[] parameter(1)
  ROOT %add.38020 = f32[] add(%Arg_0.38018, %Arg_1.38019)
}

%region_1338.38028 (Arg_0.38025: f32[], Arg_1.38026: f32[]) -> f32[] {
  %Arg_0.38025 = f32[] parameter(0)
  %Arg_1.38026 = f32[] parameter(1)
  ROOT %add.38027 = f32[] add(%Arg_0.38025, %Arg_1.38026)
}

%region_1339.38035 (Arg_0.38032: f32[], Arg_1.38033: f32[]) -> f32[] {
  %Arg_0.38032 = f32[] parameter(0)
  %Arg_1.38033 = f32[] parameter(1)
  ROOT %add.38034 = f32[] add(%Arg_0.38032, %Arg_1.38033)
}

%region_1340.38042 (Arg_0.38039: f32[], Arg_1.38040: f32[]) -> f32[] {
  %Arg_0.38039 = f32[] parameter(0)
  %Arg_1.38040 = f32[] parameter(1)
  ROOT %add.38041 = f32[] add(%Arg_0.38039, %Arg_1.38040)
}

%region_1341.38049 (Arg_0.38046: f32[], Arg_1.38047: f32[]) -> f32[] {
  %Arg_0.38046 = f32[] parameter(0)
  %Arg_1.38047 = f32[] parameter(1)
  ROOT %add.38048 = f32[] add(%Arg_0.38046, %Arg_1.38047)
}

%region_1342.38056 (Arg_0.38053: f32[], Arg_1.38054: f32[]) -> f32[] {
  %Arg_0.38053 = f32[] parameter(0)
  %Arg_1.38054 = f32[] parameter(1)
  ROOT %add.38055 = f32[] add(%Arg_0.38053, %Arg_1.38054)
}

%region_1343.38063 (Arg_0.38060: f32[], Arg_1.38061: f32[]) -> f32[] {
  %Arg_0.38060 = f32[] parameter(0)
  %Arg_1.38061 = f32[] parameter(1)
  ROOT %add.38062 = f32[] add(%Arg_0.38060, %Arg_1.38061)
}

%region_1344.38070 (Arg_0.38067: f32[], Arg_1.38068: f32[]) -> f32[] {
  %Arg_0.38067 = f32[] parameter(0)
  %Arg_1.38068 = f32[] parameter(1)
  ROOT %add.38069 = f32[] add(%Arg_0.38067, %Arg_1.38068)
}

%region_1345.38077 (Arg_0.38074: f32[], Arg_1.38075: f32[]) -> f32[] {
  %Arg_0.38074 = f32[] parameter(0)
  %Arg_1.38075 = f32[] parameter(1)
  ROOT %add.38076 = f32[] add(%Arg_0.38074, %Arg_1.38075)
}

%region_1346.38084 (Arg_0.38081: f32[], Arg_1.38082: f32[]) -> f32[] {
  %Arg_0.38081 = f32[] parameter(0)
  %Arg_1.38082 = f32[] parameter(1)
  ROOT %add.38083 = f32[] add(%Arg_0.38081, %Arg_1.38082)
}

%region_1347.38091 (Arg_0.38088: f32[], Arg_1.38089: f32[]) -> f32[] {
  %Arg_0.38088 = f32[] parameter(0)
  %Arg_1.38089 = f32[] parameter(1)
  ROOT %add.38090 = f32[] add(%Arg_0.38088, %Arg_1.38089)
}

%region_1348.38098 (Arg_0.38095: f32[], Arg_1.38096: f32[]) -> f32[] {
  %Arg_0.38095 = f32[] parameter(0)
  %Arg_1.38096 = f32[] parameter(1)
  ROOT %add.38097 = f32[] add(%Arg_0.38095, %Arg_1.38096)
}

%region_1349.38105 (Arg_0.38102: f32[], Arg_1.38103: f32[]) -> f32[] {
  %Arg_0.38102 = f32[] parameter(0)
  %Arg_1.38103 = f32[] parameter(1)
  ROOT %add.38104 = f32[] add(%Arg_0.38102, %Arg_1.38103)
}

%region_1350.38112 (Arg_0.38109: f32[], Arg_1.38110: f32[]) -> f32[] {
  %Arg_0.38109 = f32[] parameter(0)
  %Arg_1.38110 = f32[] parameter(1)
  ROOT %add.38111 = f32[] add(%Arg_0.38109, %Arg_1.38110)
}

%region_1351.38119 (Arg_0.38116: f32[], Arg_1.38117: f32[]) -> f32[] {
  %Arg_0.38116 = f32[] parameter(0)
  %Arg_1.38117 = f32[] parameter(1)
  ROOT %add.38118 = f32[] add(%Arg_0.38116, %Arg_1.38117)
}

%region_1352.38126 (Arg_0.38123: f32[], Arg_1.38124: f32[]) -> f32[] {
  %Arg_0.38123 = f32[] parameter(0)
  %Arg_1.38124 = f32[] parameter(1)
  ROOT %add.38125 = f32[] add(%Arg_0.38123, %Arg_1.38124)
}

%region_1353.38133 (Arg_0.38130: f32[], Arg_1.38131: f32[]) -> f32[] {
  %Arg_0.38130 = f32[] parameter(0)
  %Arg_1.38131 = f32[] parameter(1)
  ROOT %add.38132 = f32[] add(%Arg_0.38130, %Arg_1.38131)
}

%region_1354.38140 (Arg_0.38137: f32[], Arg_1.38138: f32[]) -> f32[] {
  %Arg_0.38137 = f32[] parameter(0)
  %Arg_1.38138 = f32[] parameter(1)
  ROOT %add.38139 = f32[] add(%Arg_0.38137, %Arg_1.38138)
}

%region_1355.38147 (Arg_0.38144: f32[], Arg_1.38145: f32[]) -> f32[] {
  %Arg_0.38144 = f32[] parameter(0)
  %Arg_1.38145 = f32[] parameter(1)
  ROOT %add.38146 = f32[] add(%Arg_0.38144, %Arg_1.38145)
}

%region_1356.38154 (Arg_0.38151: f32[], Arg_1.38152: f32[]) -> f32[] {
  %Arg_0.38151 = f32[] parameter(0)
  %Arg_1.38152 = f32[] parameter(1)
  ROOT %add.38153 = f32[] add(%Arg_0.38151, %Arg_1.38152)
}

%region_1357.38161 (Arg_0.38158: f32[], Arg_1.38159: f32[]) -> f32[] {
  %Arg_0.38158 = f32[] parameter(0)
  %Arg_1.38159 = f32[] parameter(1)
  ROOT %add.38160 = f32[] add(%Arg_0.38158, %Arg_1.38159)
}

%region_1358.38168 (Arg_0.38165: f32[], Arg_1.38166: f32[]) -> f32[] {
  %Arg_0.38165 = f32[] parameter(0)
  %Arg_1.38166 = f32[] parameter(1)
  ROOT %add.38167 = f32[] add(%Arg_0.38165, %Arg_1.38166)
}

%region_1359.38175 (Arg_0.38172: f32[], Arg_1.38173: f32[]) -> f32[] {
  %Arg_0.38172 = f32[] parameter(0)
  %Arg_1.38173 = f32[] parameter(1)
  ROOT %add.38174 = f32[] add(%Arg_0.38172, %Arg_1.38173)
}

%region_1360.38182 (Arg_0.38179: f32[], Arg_1.38180: f32[]) -> f32[] {
  %Arg_0.38179 = f32[] parameter(0)
  %Arg_1.38180 = f32[] parameter(1)
  ROOT %add.38181 = f32[] add(%Arg_0.38179, %Arg_1.38180)
}

%region_1361.38189 (Arg_0.38186: f32[], Arg_1.38187: f32[]) -> f32[] {
  %Arg_0.38186 = f32[] parameter(0)
  %Arg_1.38187 = f32[] parameter(1)
  ROOT %add.38188 = f32[] add(%Arg_0.38186, %Arg_1.38187)
}

%region_1362.38196 (Arg_0.38193: f32[], Arg_1.38194: f32[]) -> f32[] {
  %Arg_0.38193 = f32[] parameter(0)
  %Arg_1.38194 = f32[] parameter(1)
  ROOT %add.38195 = f32[] add(%Arg_0.38193, %Arg_1.38194)
}

%region_1363.38203 (Arg_0.38200: f32[], Arg_1.38201: f32[]) -> f32[] {
  %Arg_0.38200 = f32[] parameter(0)
  %Arg_1.38201 = f32[] parameter(1)
  ROOT %add.38202 = f32[] add(%Arg_0.38200, %Arg_1.38201)
}

%region_1364.38210 (Arg_0.38207: f32[], Arg_1.38208: f32[]) -> f32[] {
  %Arg_0.38207 = f32[] parameter(0)
  %Arg_1.38208 = f32[] parameter(1)
  ROOT %add.38209 = f32[] add(%Arg_0.38207, %Arg_1.38208)
}

%region_1365.38217 (Arg_0.38214: f32[], Arg_1.38215: f32[]) -> f32[] {
  %Arg_0.38214 = f32[] parameter(0)
  %Arg_1.38215 = f32[] parameter(1)
  ROOT %add.38216 = f32[] add(%Arg_0.38214, %Arg_1.38215)
}

%region_1366.38224 (Arg_0.38221: f32[], Arg_1.38222: f32[]) -> f32[] {
  %Arg_0.38221 = f32[] parameter(0)
  %Arg_1.38222 = f32[] parameter(1)
  ROOT %add.38223 = f32[] add(%Arg_0.38221, %Arg_1.38222)
}

%region_1367.38231 (Arg_0.38228: f32[], Arg_1.38229: f32[]) -> f32[] {
  %Arg_0.38228 = f32[] parameter(0)
  %Arg_1.38229 = f32[] parameter(1)
  ROOT %add.38230 = f32[] add(%Arg_0.38228, %Arg_1.38229)
}

%region_1368.38238 (Arg_0.38235: f32[], Arg_1.38236: f32[]) -> f32[] {
  %Arg_0.38235 = f32[] parameter(0)
  %Arg_1.38236 = f32[] parameter(1)
  ROOT %add.38237 = f32[] add(%Arg_0.38235, %Arg_1.38236)
}

%region_1369.38245 (Arg_0.38242: f32[], Arg_1.38243: f32[]) -> f32[] {
  %Arg_0.38242 = f32[] parameter(0)
  %Arg_1.38243 = f32[] parameter(1)
  ROOT %add.38244 = f32[] add(%Arg_0.38242, %Arg_1.38243)
}

%region_1370.38252 (Arg_0.38249: f32[], Arg_1.38250: f32[]) -> f32[] {
  %Arg_0.38249 = f32[] parameter(0)
  %Arg_1.38250 = f32[] parameter(1)
  ROOT %add.38251 = f32[] add(%Arg_0.38249, %Arg_1.38250)
}

%region_1371.38259 (Arg_0.38256: f32[], Arg_1.38257: f32[]) -> f32[] {
  %Arg_0.38256 = f32[] parameter(0)
  %Arg_1.38257 = f32[] parameter(1)
  ROOT %add.38258 = f32[] add(%Arg_0.38256, %Arg_1.38257)
}

%region_1372.38266 (Arg_0.38263: f32[], Arg_1.38264: f32[]) -> f32[] {
  %Arg_0.38263 = f32[] parameter(0)
  %Arg_1.38264 = f32[] parameter(1)
  ROOT %add.38265 = f32[] add(%Arg_0.38263, %Arg_1.38264)
}

%region_1373.38273 (Arg_0.38270: f32[], Arg_1.38271: f32[]) -> f32[] {
  %Arg_0.38270 = f32[] parameter(0)
  %Arg_1.38271 = f32[] parameter(1)
  ROOT %add.38272 = f32[] add(%Arg_0.38270, %Arg_1.38271)
}

%region_1374.38280 (Arg_0.38277: f32[], Arg_1.38278: f32[]) -> f32[] {
  %Arg_0.38277 = f32[] parameter(0)
  %Arg_1.38278 = f32[] parameter(1)
  ROOT %add.38279 = f32[] add(%Arg_0.38277, %Arg_1.38278)
}

%region_1375.38287 (Arg_0.38284: f32[], Arg_1.38285: f32[]) -> f32[] {
  %Arg_0.38284 = f32[] parameter(0)
  %Arg_1.38285 = f32[] parameter(1)
  ROOT %add.38286 = f32[] add(%Arg_0.38284, %Arg_1.38285)
}

%region_1376.38294 (Arg_0.38291: f32[], Arg_1.38292: f32[]) -> f32[] {
  %Arg_0.38291 = f32[] parameter(0)
  %Arg_1.38292 = f32[] parameter(1)
  ROOT %add.38293 = f32[] add(%Arg_0.38291, %Arg_1.38292)
}

%region_1377.38301 (Arg_0.38298: f32[], Arg_1.38299: f32[]) -> f32[] {
  %Arg_0.38298 = f32[] parameter(0)
  %Arg_1.38299 = f32[] parameter(1)
  ROOT %add.38300 = f32[] add(%Arg_0.38298, %Arg_1.38299)
}

%region_1378.38308 (Arg_0.38305: f32[], Arg_1.38306: f32[]) -> f32[] {
  %Arg_0.38305 = f32[] parameter(0)
  %Arg_1.38306 = f32[] parameter(1)
  ROOT %add.38307 = f32[] add(%Arg_0.38305, %Arg_1.38306)
}

%region_1379.38315 (Arg_0.38312: f32[], Arg_1.38313: f32[]) -> f32[] {
  %Arg_0.38312 = f32[] parameter(0)
  %Arg_1.38313 = f32[] parameter(1)
  ROOT %add.38314 = f32[] add(%Arg_0.38312, %Arg_1.38313)
}

%region_1380.38322 (Arg_0.38319: f32[], Arg_1.38320: f32[]) -> f32[] {
  %Arg_0.38319 = f32[] parameter(0)
  %Arg_1.38320 = f32[] parameter(1)
  ROOT %add.38321 = f32[] add(%Arg_0.38319, %Arg_1.38320)
}

%region_1381.38329 (Arg_0.38326: f32[], Arg_1.38327: f32[]) -> f32[] {
  %Arg_0.38326 = f32[] parameter(0)
  %Arg_1.38327 = f32[] parameter(1)
  ROOT %add.38328 = f32[] add(%Arg_0.38326, %Arg_1.38327)
}

%region_1382.38336 (Arg_0.38333: f32[], Arg_1.38334: f32[]) -> f32[] {
  %Arg_0.38333 = f32[] parameter(0)
  %Arg_1.38334 = f32[] parameter(1)
  ROOT %add.38335 = f32[] add(%Arg_0.38333, %Arg_1.38334)
}

%region_1383.38343 (Arg_0.38340: f32[], Arg_1.38341: f32[]) -> f32[] {
  %Arg_0.38340 = f32[] parameter(0)
  %Arg_1.38341 = f32[] parameter(1)
  ROOT %add.38342 = f32[] add(%Arg_0.38340, %Arg_1.38341)
}

%region_1384.38350 (Arg_0.38347: f32[], Arg_1.38348: f32[]) -> f32[] {
  %Arg_0.38347 = f32[] parameter(0)
  %Arg_1.38348 = f32[] parameter(1)
  ROOT %add.38349 = f32[] add(%Arg_0.38347, %Arg_1.38348)
}

%region_1385.38357 (Arg_0.38354: f32[], Arg_1.38355: f32[]) -> f32[] {
  %Arg_0.38354 = f32[] parameter(0)
  %Arg_1.38355 = f32[] parameter(1)
  ROOT %add.38356 = f32[] add(%Arg_0.38354, %Arg_1.38355)
}

%region_1386.38364 (Arg_0.38361: f32[], Arg_1.38362: f32[]) -> f32[] {
  %Arg_0.38361 = f32[] parameter(0)
  %Arg_1.38362 = f32[] parameter(1)
  ROOT %add.38363 = f32[] add(%Arg_0.38361, %Arg_1.38362)
}

%region_1387.38371 (Arg_0.38368: f32[], Arg_1.38369: f32[]) -> f32[] {
  %Arg_0.38368 = f32[] parameter(0)
  %Arg_1.38369 = f32[] parameter(1)
  ROOT %add.38370 = f32[] add(%Arg_0.38368, %Arg_1.38369)
}

%region_1388.38378 (Arg_0.38375: f32[], Arg_1.38376: f32[]) -> f32[] {
  %Arg_0.38375 = f32[] parameter(0)
  %Arg_1.38376 = f32[] parameter(1)
  ROOT %add.38377 = f32[] add(%Arg_0.38375, %Arg_1.38376)
}

%region_1389.38385 (Arg_0.38382: f32[], Arg_1.38383: f32[]) -> f32[] {
  %Arg_0.38382 = f32[] parameter(0)
  %Arg_1.38383 = f32[] parameter(1)
  ROOT %add.38384 = f32[] add(%Arg_0.38382, %Arg_1.38383)
}

%region_1390.38392 (Arg_0.38389: f32[], Arg_1.38390: f32[]) -> f32[] {
  %Arg_0.38389 = f32[] parameter(0)
  %Arg_1.38390 = f32[] parameter(1)
  ROOT %add.38391 = f32[] add(%Arg_0.38389, %Arg_1.38390)
}

%region_1391.38399 (Arg_0.38396: f32[], Arg_1.38397: f32[]) -> f32[] {
  %Arg_0.38396 = f32[] parameter(0)
  %Arg_1.38397 = f32[] parameter(1)
  ROOT %add.38398 = f32[] add(%Arg_0.38396, %Arg_1.38397)
}

%region_1392.38406 (Arg_0.38403: f32[], Arg_1.38404: f32[]) -> f32[] {
  %Arg_0.38403 = f32[] parameter(0)
  %Arg_1.38404 = f32[] parameter(1)
  ROOT %add.38405 = f32[] add(%Arg_0.38403, %Arg_1.38404)
}

%region_1393.38413 (Arg_0.38410: f32[], Arg_1.38411: f32[]) -> f32[] {
  %Arg_0.38410 = f32[] parameter(0)
  %Arg_1.38411 = f32[] parameter(1)
  ROOT %add.38412 = f32[] add(%Arg_0.38410, %Arg_1.38411)
}

%region_1394.38420 (Arg_0.38417: f32[], Arg_1.38418: f32[]) -> f32[] {
  %Arg_0.38417 = f32[] parameter(0)
  %Arg_1.38418 = f32[] parameter(1)
  ROOT %add.38419 = f32[] add(%Arg_0.38417, %Arg_1.38418)
}

%region_1395.38427 (Arg_0.38424: f32[], Arg_1.38425: f32[]) -> f32[] {
  %Arg_0.38424 = f32[] parameter(0)
  %Arg_1.38425 = f32[] parameter(1)
  ROOT %add.38426 = f32[] add(%Arg_0.38424, %Arg_1.38425)
}

%region_1396.38434 (Arg_0.38431: f32[], Arg_1.38432: f32[]) -> f32[] {
  %Arg_0.38431 = f32[] parameter(0)
  %Arg_1.38432 = f32[] parameter(1)
  ROOT %add.38433 = f32[] add(%Arg_0.38431, %Arg_1.38432)
}

%region_1397.38441 (Arg_0.38438: f32[], Arg_1.38439: f32[]) -> f32[] {
  %Arg_0.38438 = f32[] parameter(0)
  %Arg_1.38439 = f32[] parameter(1)
  ROOT %add.38440 = f32[] add(%Arg_0.38438, %Arg_1.38439)
}

%region_1398.38448 (Arg_0.38445: f32[], Arg_1.38446: f32[]) -> f32[] {
  %Arg_0.38445 = f32[] parameter(0)
  %Arg_1.38446 = f32[] parameter(1)
  ROOT %add.38447 = f32[] add(%Arg_0.38445, %Arg_1.38446)
}

%region_1399.38455 (Arg_0.38452: f32[], Arg_1.38453: f32[]) -> f32[] {
  %Arg_0.38452 = f32[] parameter(0)
  %Arg_1.38453 = f32[] parameter(1)
  ROOT %add.38454 = f32[] add(%Arg_0.38452, %Arg_1.38453)
}

%region_1400.38462 (Arg_0.38459: f32[], Arg_1.38460: f32[]) -> f32[] {
  %Arg_0.38459 = f32[] parameter(0)
  %Arg_1.38460 = f32[] parameter(1)
  ROOT %add.38461 = f32[] add(%Arg_0.38459, %Arg_1.38460)
}

%region_1401.38469 (Arg_0.38466: f32[], Arg_1.38467: f32[]) -> f32[] {
  %Arg_0.38466 = f32[] parameter(0)
  %Arg_1.38467 = f32[] parameter(1)
  ROOT %add.38468 = f32[] add(%Arg_0.38466, %Arg_1.38467)
}

%region_1402.38476 (Arg_0.38473: f32[], Arg_1.38474: f32[]) -> f32[] {
  %Arg_0.38473 = f32[] parameter(0)
  %Arg_1.38474 = f32[] parameter(1)
  ROOT %add.38475 = f32[] add(%Arg_0.38473, %Arg_1.38474)
}

%region_1403.38483 (Arg_0.38480: f32[], Arg_1.38481: f32[]) -> f32[] {
  %Arg_0.38480 = f32[] parameter(0)
  %Arg_1.38481 = f32[] parameter(1)
  ROOT %add.38482 = f32[] add(%Arg_0.38480, %Arg_1.38481)
}

%region_1404.38490 (Arg_0.38487: f32[], Arg_1.38488: f32[]) -> f32[] {
  %Arg_0.38487 = f32[] parameter(0)
  %Arg_1.38488 = f32[] parameter(1)
  ROOT %add.38489 = f32[] add(%Arg_0.38487, %Arg_1.38488)
}

%region_1405.38497 (Arg_0.38494: f32[], Arg_1.38495: f32[]) -> f32[] {
  %Arg_0.38494 = f32[] parameter(0)
  %Arg_1.38495 = f32[] parameter(1)
  ROOT %add.38496 = f32[] add(%Arg_0.38494, %Arg_1.38495)
}

%region_1406.38504 (Arg_0.38501: f32[], Arg_1.38502: f32[]) -> f32[] {
  %Arg_0.38501 = f32[] parameter(0)
  %Arg_1.38502 = f32[] parameter(1)
  ROOT %add.38503 = f32[] add(%Arg_0.38501, %Arg_1.38502)
}

%region_1407.38511 (Arg_0.38508: f32[], Arg_1.38509: f32[]) -> f32[] {
  %Arg_0.38508 = f32[] parameter(0)
  %Arg_1.38509 = f32[] parameter(1)
  ROOT %add.38510 = f32[] add(%Arg_0.38508, %Arg_1.38509)
}

%region_1408.38518 (Arg_0.38515: f32[], Arg_1.38516: f32[]) -> f32[] {
  %Arg_0.38515 = f32[] parameter(0)
  %Arg_1.38516 = f32[] parameter(1)
  ROOT %add.38517 = f32[] add(%Arg_0.38515, %Arg_1.38516)
}

%region_1409.38525 (Arg_0.38522: f32[], Arg_1.38523: f32[]) -> f32[] {
  %Arg_0.38522 = f32[] parameter(0)
  %Arg_1.38523 = f32[] parameter(1)
  ROOT %add.38524 = f32[] add(%Arg_0.38522, %Arg_1.38523)
}

%region_1410.38532 (Arg_0.38529: f32[], Arg_1.38530: f32[]) -> f32[] {
  %Arg_0.38529 = f32[] parameter(0)
  %Arg_1.38530 = f32[] parameter(1)
  ROOT %add.38531 = f32[] add(%Arg_0.38529, %Arg_1.38530)
}

%region_1411.38539 (Arg_0.38536: f32[], Arg_1.38537: f32[]) -> f32[] {
  %Arg_0.38536 = f32[] parameter(0)
  %Arg_1.38537 = f32[] parameter(1)
  ROOT %add.38538 = f32[] add(%Arg_0.38536, %Arg_1.38537)
}

%region_1412.38546 (Arg_0.38543: f32[], Arg_1.38544: f32[]) -> f32[] {
  %Arg_0.38543 = f32[] parameter(0)
  %Arg_1.38544 = f32[] parameter(1)
  ROOT %add.38545 = f32[] add(%Arg_0.38543, %Arg_1.38544)
}

%region_1413.38553 (Arg_0.38550: f32[], Arg_1.38551: f32[]) -> f32[] {
  %Arg_0.38550 = f32[] parameter(0)
  %Arg_1.38551 = f32[] parameter(1)
  ROOT %add.38552 = f32[] add(%Arg_0.38550, %Arg_1.38551)
}

%region_1414.38560 (Arg_0.38557: f32[], Arg_1.38558: f32[]) -> f32[] {
  %Arg_0.38557 = f32[] parameter(0)
  %Arg_1.38558 = f32[] parameter(1)
  ROOT %add.38559 = f32[] add(%Arg_0.38557, %Arg_1.38558)
}

%region_1415.38567 (Arg_0.38564: f32[], Arg_1.38565: f32[]) -> f32[] {
  %Arg_0.38564 = f32[] parameter(0)
  %Arg_1.38565 = f32[] parameter(1)
  ROOT %add.38566 = f32[] add(%Arg_0.38564, %Arg_1.38565)
}

%region_1416.38574 (Arg_0.38571: f32[], Arg_1.38572: f32[]) -> f32[] {
  %Arg_0.38571 = f32[] parameter(0)
  %Arg_1.38572 = f32[] parameter(1)
  ROOT %add.38573 = f32[] add(%Arg_0.38571, %Arg_1.38572)
}

%region_1417.38581 (Arg_0.38578: f32[], Arg_1.38579: f32[]) -> f32[] {
  %Arg_0.38578 = f32[] parameter(0)
  %Arg_1.38579 = f32[] parameter(1)
  ROOT %add.38580 = f32[] add(%Arg_0.38578, %Arg_1.38579)
}

%region_1418.38588 (Arg_0.38585: f32[], Arg_1.38586: f32[]) -> f32[] {
  %Arg_0.38585 = f32[] parameter(0)
  %Arg_1.38586 = f32[] parameter(1)
  ROOT %add.38587 = f32[] add(%Arg_0.38585, %Arg_1.38586)
}

%region_1419.38595 (Arg_0.38592: f32[], Arg_1.38593: f32[]) -> f32[] {
  %Arg_0.38592 = f32[] parameter(0)
  %Arg_1.38593 = f32[] parameter(1)
  ROOT %add.38594 = f32[] add(%Arg_0.38592, %Arg_1.38593)
}

%region_1420.38602 (Arg_0.38599: f32[], Arg_1.38600: f32[]) -> f32[] {
  %Arg_0.38599 = f32[] parameter(0)
  %Arg_1.38600 = f32[] parameter(1)
  ROOT %add.38601 = f32[] add(%Arg_0.38599, %Arg_1.38600)
}

%region_1421.38609 (Arg_0.38606: f32[], Arg_1.38607: f32[]) -> f32[] {
  %Arg_0.38606 = f32[] parameter(0)
  %Arg_1.38607 = f32[] parameter(1)
  ROOT %add.38608 = f32[] add(%Arg_0.38606, %Arg_1.38607)
}

%region_1422.38616 (Arg_0.38613: f32[], Arg_1.38614: f32[]) -> f32[] {
  %Arg_0.38613 = f32[] parameter(0)
  %Arg_1.38614 = f32[] parameter(1)
  ROOT %add.38615 = f32[] add(%Arg_0.38613, %Arg_1.38614)
}

%region_1423.38623 (Arg_0.38620: f32[], Arg_1.38621: f32[]) -> f32[] {
  %Arg_0.38620 = f32[] parameter(0)
  %Arg_1.38621 = f32[] parameter(1)
  ROOT %add.38622 = f32[] add(%Arg_0.38620, %Arg_1.38621)
}

%region_1424.38630 (Arg_0.38627: f32[], Arg_1.38628: f32[]) -> f32[] {
  %Arg_0.38627 = f32[] parameter(0)
  %Arg_1.38628 = f32[] parameter(1)
  ROOT %add.38629 = f32[] add(%Arg_0.38627, %Arg_1.38628)
}

%region_1425.38637 (Arg_0.38634: f32[], Arg_1.38635: f32[]) -> f32[] {
  %Arg_0.38634 = f32[] parameter(0)
  %Arg_1.38635 = f32[] parameter(1)
  ROOT %add.38636 = f32[] add(%Arg_0.38634, %Arg_1.38635)
}

%region_1426.38644 (Arg_0.38641: f32[], Arg_1.38642: f32[]) -> f32[] {
  %Arg_0.38641 = f32[] parameter(0)
  %Arg_1.38642 = f32[] parameter(1)
  ROOT %add.38643 = f32[] add(%Arg_0.38641, %Arg_1.38642)
}

%region_1427.38651 (Arg_0.38648: f32[], Arg_1.38649: f32[]) -> f32[] {
  %Arg_0.38648 = f32[] parameter(0)
  %Arg_1.38649 = f32[] parameter(1)
  ROOT %add.38650 = f32[] add(%Arg_0.38648, %Arg_1.38649)
}

%region_1428.38658 (Arg_0.38655: f32[], Arg_1.38656: f32[]) -> f32[] {
  %Arg_0.38655 = f32[] parameter(0)
  %Arg_1.38656 = f32[] parameter(1)
  ROOT %add.38657 = f32[] add(%Arg_0.38655, %Arg_1.38656)
}

%region_1429.38665 (Arg_0.38662: f32[], Arg_1.38663: f32[]) -> f32[] {
  %Arg_0.38662 = f32[] parameter(0)
  %Arg_1.38663 = f32[] parameter(1)
  ROOT %add.38664 = f32[] add(%Arg_0.38662, %Arg_1.38663)
}

%region_1430.38672 (Arg_0.38669: f32[], Arg_1.38670: f32[]) -> f32[] {
  %Arg_0.38669 = f32[] parameter(0)
  %Arg_1.38670 = f32[] parameter(1)
  ROOT %add.38671 = f32[] add(%Arg_0.38669, %Arg_1.38670)
}

%region_1431.38679 (Arg_0.38676: f32[], Arg_1.38677: f32[]) -> f32[] {
  %Arg_0.38676 = f32[] parameter(0)
  %Arg_1.38677 = f32[] parameter(1)
  ROOT %add.38678 = f32[] add(%Arg_0.38676, %Arg_1.38677)
}

%region_1432.38686 (Arg_0.38683: f32[], Arg_1.38684: f32[]) -> f32[] {
  %Arg_0.38683 = f32[] parameter(0)
  %Arg_1.38684 = f32[] parameter(1)
  ROOT %add.38685 = f32[] add(%Arg_0.38683, %Arg_1.38684)
}

%region_1433.38693 (Arg_0.38690: f32[], Arg_1.38691: f32[]) -> f32[] {
  %Arg_0.38690 = f32[] parameter(0)
  %Arg_1.38691 = f32[] parameter(1)
  ROOT %add.38692 = f32[] add(%Arg_0.38690, %Arg_1.38691)
}

%region_1434.38700 (Arg_0.38697: f32[], Arg_1.38698: f32[]) -> f32[] {
  %Arg_0.38697 = f32[] parameter(0)
  %Arg_1.38698 = f32[] parameter(1)
  ROOT %add.38699 = f32[] add(%Arg_0.38697, %Arg_1.38698)
}

%region_1435.38707 (Arg_0.38704: f32[], Arg_1.38705: f32[]) -> f32[] {
  %Arg_0.38704 = f32[] parameter(0)
  %Arg_1.38705 = f32[] parameter(1)
  ROOT %add.38706 = f32[] add(%Arg_0.38704, %Arg_1.38705)
}

%region_1436.38714 (Arg_0.38711: f32[], Arg_1.38712: f32[]) -> f32[] {
  %Arg_0.38711 = f32[] parameter(0)
  %Arg_1.38712 = f32[] parameter(1)
  ROOT %add.38713 = f32[] add(%Arg_0.38711, %Arg_1.38712)
}

%region_1437.38721 (Arg_0.38718: f32[], Arg_1.38719: f32[]) -> f32[] {
  %Arg_0.38718 = f32[] parameter(0)
  %Arg_1.38719 = f32[] parameter(1)
  ROOT %add.38720 = f32[] add(%Arg_0.38718, %Arg_1.38719)
}

%region_1438.38728 (Arg_0.38725: f32[], Arg_1.38726: f32[]) -> f32[] {
  %Arg_0.38725 = f32[] parameter(0)
  %Arg_1.38726 = f32[] parameter(1)
  ROOT %add.38727 = f32[] add(%Arg_0.38725, %Arg_1.38726)
}

%region_1439.38735 (Arg_0.38732: f32[], Arg_1.38733: f32[]) -> f32[] {
  %Arg_0.38732 = f32[] parameter(0)
  %Arg_1.38733 = f32[] parameter(1)
  ROOT %add.38734 = f32[] add(%Arg_0.38732, %Arg_1.38733)
}

%region_1440.38742 (Arg_0.38739: f32[], Arg_1.38740: f32[]) -> f32[] {
  %Arg_0.38739 = f32[] parameter(0)
  %Arg_1.38740 = f32[] parameter(1)
  ROOT %add.38741 = f32[] add(%Arg_0.38739, %Arg_1.38740)
}

%region_1441.38749 (Arg_0.38746: f32[], Arg_1.38747: f32[]) -> f32[] {
  %Arg_0.38746 = f32[] parameter(0)
  %Arg_1.38747 = f32[] parameter(1)
  ROOT %add.38748 = f32[] add(%Arg_0.38746, %Arg_1.38747)
}

%region_1442.38756 (Arg_0.38753: f32[], Arg_1.38754: f32[]) -> f32[] {
  %Arg_0.38753 = f32[] parameter(0)
  %Arg_1.38754 = f32[] parameter(1)
  ROOT %add.38755 = f32[] add(%Arg_0.38753, %Arg_1.38754)
}

%region_1443.38763 (Arg_0.38760: f32[], Arg_1.38761: f32[]) -> f32[] {
  %Arg_0.38760 = f32[] parameter(0)
  %Arg_1.38761 = f32[] parameter(1)
  ROOT %add.38762 = f32[] add(%Arg_0.38760, %Arg_1.38761)
}

%region_1444.38770 (Arg_0.38767: f32[], Arg_1.38768: f32[]) -> f32[] {
  %Arg_0.38767 = f32[] parameter(0)
  %Arg_1.38768 = f32[] parameter(1)
  ROOT %add.38769 = f32[] add(%Arg_0.38767, %Arg_1.38768)
}

%region_1445.38777 (Arg_0.38774: f32[], Arg_1.38775: f32[]) -> f32[] {
  %Arg_0.38774 = f32[] parameter(0)
  %Arg_1.38775 = f32[] parameter(1)
  ROOT %add.38776 = f32[] add(%Arg_0.38774, %Arg_1.38775)
}

%region_1446.38784 (Arg_0.38781: f32[], Arg_1.38782: f32[]) -> f32[] {
  %Arg_0.38781 = f32[] parameter(0)
  %Arg_1.38782 = f32[] parameter(1)
  ROOT %add.38783 = f32[] add(%Arg_0.38781, %Arg_1.38782)
}

%region_1447.38791 (Arg_0.38788: f32[], Arg_1.38789: f32[]) -> f32[] {
  %Arg_0.38788 = f32[] parameter(0)
  %Arg_1.38789 = f32[] parameter(1)
  ROOT %add.38790 = f32[] add(%Arg_0.38788, %Arg_1.38789)
}

%region_1448.38798 (Arg_0.38795: f32[], Arg_1.38796: f32[]) -> f32[] {
  %Arg_0.38795 = f32[] parameter(0)
  %Arg_1.38796 = f32[] parameter(1)
  ROOT %add.38797 = f32[] add(%Arg_0.38795, %Arg_1.38796)
}

%region_1449.38805 (Arg_0.38802: f32[], Arg_1.38803: f32[]) -> f32[] {
  %Arg_0.38802 = f32[] parameter(0)
  %Arg_1.38803 = f32[] parameter(1)
  ROOT %add.38804 = f32[] add(%Arg_0.38802, %Arg_1.38803)
}

%region_1450.38812 (Arg_0.38809: f32[], Arg_1.38810: f32[]) -> f32[] {
  %Arg_0.38809 = f32[] parameter(0)
  %Arg_1.38810 = f32[] parameter(1)
  ROOT %add.38811 = f32[] add(%Arg_0.38809, %Arg_1.38810)
}

%region_1451.38819 (Arg_0.38816: f32[], Arg_1.38817: f32[]) -> f32[] {
  %Arg_0.38816 = f32[] parameter(0)
  %Arg_1.38817 = f32[] parameter(1)
  ROOT %add.38818 = f32[] add(%Arg_0.38816, %Arg_1.38817)
}

%region_1452.38826 (Arg_0.38823: f32[], Arg_1.38824: f32[]) -> f32[] {
  %Arg_0.38823 = f32[] parameter(0)
  %Arg_1.38824 = f32[] parameter(1)
  ROOT %add.38825 = f32[] add(%Arg_0.38823, %Arg_1.38824)
}

%region_1453.38833 (Arg_0.38830: f32[], Arg_1.38831: f32[]) -> f32[] {
  %Arg_0.38830 = f32[] parameter(0)
  %Arg_1.38831 = f32[] parameter(1)
  ROOT %add.38832 = f32[] add(%Arg_0.38830, %Arg_1.38831)
}

%region_1454.38840 (Arg_0.38837: f32[], Arg_1.38838: f32[]) -> f32[] {
  %Arg_0.38837 = f32[] parameter(0)
  %Arg_1.38838 = f32[] parameter(1)
  ROOT %add.38839 = f32[] add(%Arg_0.38837, %Arg_1.38838)
}

%region_1455.38847 (Arg_0.38844: f32[], Arg_1.38845: f32[]) -> f32[] {
  %Arg_0.38844 = f32[] parameter(0)
  %Arg_1.38845 = f32[] parameter(1)
  ROOT %add.38846 = f32[] add(%Arg_0.38844, %Arg_1.38845)
}

%region_1456.38854 (Arg_0.38851: f32[], Arg_1.38852: f32[]) -> f32[] {
  %Arg_0.38851 = f32[] parameter(0)
  %Arg_1.38852 = f32[] parameter(1)
  ROOT %add.38853 = f32[] add(%Arg_0.38851, %Arg_1.38852)
}

%region_1457.38861 (Arg_0.38858: f32[], Arg_1.38859: f32[]) -> f32[] {
  %Arg_0.38858 = f32[] parameter(0)
  %Arg_1.38859 = f32[] parameter(1)
  ROOT %add.38860 = f32[] add(%Arg_0.38858, %Arg_1.38859)
}

%region_1458.38868 (Arg_0.38865: f32[], Arg_1.38866: f32[]) -> f32[] {
  %Arg_0.38865 = f32[] parameter(0)
  %Arg_1.38866 = f32[] parameter(1)
  ROOT %add.38867 = f32[] add(%Arg_0.38865, %Arg_1.38866)
}

%region_8.211._custom_call_lowering_rule (Arg_0.417: s32[], Arg_1.355: s32[]) -> s32[] {
  %Arg_0.417 = s32[] parameter(0)
  %Arg_1.355 = s32[] parameter(1)
  ROOT %add.708 = s32[] add(%Arg_0.417, %Arg_1.355)
}

%region_11.241._custom_call_lowering_rule (Arg_0.418: s32[], Arg_1.356: s32[]) -> s32[] {
  %Arg_0.418 = s32[] parameter(0)
  ROOT %Arg_1.356 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule (Arg_0.419: pred[], Arg_1.357: pred[]) -> pred[] {
  %Arg_0.419 = pred[] parameter(0)
  ROOT %Arg_1.357 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule (Arg_0.420: s32[], Arg_1.358: s32[]) -> s32[] {
  %Arg_0.420 = s32[] parameter(0)
  %Arg_1.358 = s32[] parameter(1)
  ROOT %add.709 = s32[] add(%Arg_0.420, %Arg_1.358)
}

%region_1.75._custom_call_lowering_rule.1 (Arg_0.422: s32[], Arg_1.360: s32[], Arg_2.222: s32[], Arg_3.32: s32[]) -> pred[] {
  %Arg_2.222 = s32[] parameter(2)
  %Arg_3.32 = s32[] parameter(3)
  %Arg_0.422 = s32[] parameter(0)
  %Arg_1.360 = s32[] parameter(1)
  ROOT %compare.1757 = pred[] compare(%Arg_0.422, %Arg_1.360), direction=LT
}

%region_2.88._custom_call_lowering_rule.1 (Arg_0.423: s32[], Arg_1.361: s32[]) -> s32[] {
  %Arg_0.423 = s32[] parameter(0)
  %Arg_1.361 = s32[] parameter(1)
  ROOT %add.710 = s32[] add(%Arg_0.423, %Arg_1.361)
}

%region_6.187._custom_call_lowering_rule.1 (Arg_0.424: s32[], Arg_1.362: s32[]) -> s32[] {
  %Arg_0.424 = s32[] parameter(0)
  ROOT %Arg_1.362 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.1 (Arg_0.425: pred[], Arg_1.363: pred[]) -> pred[] {
  %Arg_0.425 = pred[] parameter(0)
  ROOT %Arg_1.363 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.1 (Arg_0.426: s32[], Arg_1.364: s32[]) -> s32[] {
  %Arg_0.426 = s32[] parameter(0)
  %Arg_1.364 = s32[] parameter(1)
  ROOT %add.711 = s32[] add(%Arg_0.426, %Arg_1.364)
}

%region_5.124._custom_call_lowering_rule.1 (Arg_0.427: s32[], Arg_1.365: s32[]) -> s32[] {
  %Arg_0.427 = s32[] parameter(0)
  %Arg_1.365 = s32[] parameter(1)
  ROOT %add.712 = s32[] add(%Arg_0.427, %Arg_1.365)
}

%region_0.39._custom_call_lowering_rule.1 (Arg_0.428: s32[], Arg_1.366: s32[]) -> s32[] {
  %Arg_0.428 = s32[] parameter(0)
  %Arg_1.366 = s32[] parameter(1)
  ROOT %add.713 = s32[] add(%Arg_0.428, %Arg_1.366)
}

%region_7.195._custom_call_lowering_rule.1 (Arg_0.429: s32[], Arg_1.367: s32[]) -> s32[] {
  %Arg_0.429 = s32[] parameter(0)
  ROOT %Arg_1.367 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.1 (Arg_0.430: s32[], Arg_1.368: s32[]) -> s32[] {
  %Arg_0.430 = s32[] parameter(0)
  %Arg_1.368 = s32[] parameter(1)
  ROOT %add.714 = s32[] add(%Arg_0.430, %Arg_1.368)
}

%region_11.241._custom_call_lowering_rule.1 (Arg_0.431: s32[], Arg_1.369: s32[]) -> s32[] {
  %Arg_0.431 = s32[] parameter(0)
  ROOT %Arg_1.369 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.1 (Arg_0.432: pred[], Arg_1.370: pred[]) -> pred[] {
  %Arg_0.432 = pred[] parameter(0)
  ROOT %Arg_1.370 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.1 (Arg_0.433: s32[], Arg_1.371: s32[]) -> s32[] {
  %Arg_0.433 = s32[] parameter(0)
  %Arg_1.371 = s32[] parameter(1)
  ROOT %add.715 = s32[] add(%Arg_0.433, %Arg_1.371)
}

%region_12.249._custom_call_lowering_rule.1 (Arg_0.434: s32[], Arg_1.372: s32[]) -> s32[] {
  %Arg_0.434 = s32[] parameter(0)
  ROOT %Arg_1.372 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.2 (Arg_0.435: s32[], Arg_1.373: s32[], Arg_2.223: s32[], Arg_3.33: s32[]) -> pred[] {
  %Arg_2.223 = s32[] parameter(2)
  %Arg_3.33 = s32[] parameter(3)
  %Arg_0.435 = s32[] parameter(0)
  %Arg_1.373 = s32[] parameter(1)
  ROOT %compare.1758 = pred[] compare(%Arg_0.435, %Arg_1.373), direction=LT
}

%region_2.88._custom_call_lowering_rule.2 (Arg_0.436: s32[], Arg_1.374: s32[]) -> s32[] {
  %Arg_0.436 = s32[] parameter(0)
  %Arg_1.374 = s32[] parameter(1)
  ROOT %add.716 = s32[] add(%Arg_0.436, %Arg_1.374)
}

%region_6.187._custom_call_lowering_rule.2 (Arg_0.437: s32[], Arg_1.375: s32[]) -> s32[] {
  %Arg_0.437 = s32[] parameter(0)
  ROOT %Arg_1.375 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.2 (Arg_0.438: pred[], Arg_1.376: pred[]) -> pred[] {
  %Arg_0.438 = pred[] parameter(0)
  ROOT %Arg_1.376 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.2 (Arg_0.439: s32[], Arg_1.377: s32[]) -> s32[] {
  %Arg_0.439 = s32[] parameter(0)
  %Arg_1.377 = s32[] parameter(1)
  ROOT %add.717 = s32[] add(%Arg_0.439, %Arg_1.377)
}

%region_5.124._custom_call_lowering_rule.2 (Arg_0.440: s32[], Arg_1.378: s32[]) -> s32[] {
  %Arg_0.440 = s32[] parameter(0)
  %Arg_1.378 = s32[] parameter(1)
  ROOT %add.718 = s32[] add(%Arg_0.440, %Arg_1.378)
}

%region_0.39._custom_call_lowering_rule.2 (Arg_0.441: s32[], Arg_1.379: s32[]) -> s32[] {
  %Arg_0.441 = s32[] parameter(0)
  %Arg_1.379 = s32[] parameter(1)
  ROOT %add.719 = s32[] add(%Arg_0.441, %Arg_1.379)
}

%region_7.195._custom_call_lowering_rule.2 (Arg_0.442: s32[], Arg_1.380: s32[]) -> s32[] {
  %Arg_0.442 = s32[] parameter(0)
  ROOT %Arg_1.380 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.2 (Arg_0.443: s32[], Arg_1.381: s32[]) -> s32[] {
  %Arg_0.443 = s32[] parameter(0)
  %Arg_1.381 = s32[] parameter(1)
  ROOT %add.720 = s32[] add(%Arg_0.443, %Arg_1.381)
}

%region_11.241._custom_call_lowering_rule.2 (Arg_0.444: s32[], Arg_1.382: s32[]) -> s32[] {
  %Arg_0.444 = s32[] parameter(0)
  ROOT %Arg_1.382 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.2 (Arg_0.445: pred[], Arg_1.383: pred[]) -> pred[] {
  %Arg_0.445 = pred[] parameter(0)
  ROOT %Arg_1.383 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.2 (Arg_0.446: s32[], Arg_1.384: s32[]) -> s32[] {
  %Arg_0.446 = s32[] parameter(0)
  %Arg_1.384 = s32[] parameter(1)
  ROOT %add.721 = s32[] add(%Arg_0.446, %Arg_1.384)
}

%region_12.249._custom_call_lowering_rule.2 (Arg_0.447: s32[], Arg_1.385: s32[]) -> s32[] {
  %Arg_0.447 = s32[] parameter(0)
  ROOT %Arg_1.385 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.3 (Arg_0.448: s32[], Arg_1.386: s32[], Arg_2.224: s32[], Arg_3.34: s32[]) -> pred[] {
  %Arg_2.224 = s32[] parameter(2)
  %Arg_3.34 = s32[] parameter(3)
  %Arg_0.448 = s32[] parameter(0)
  %Arg_1.386 = s32[] parameter(1)
  ROOT %compare.1759 = pred[] compare(%Arg_0.448, %Arg_1.386), direction=LT
}

%region_2.88._custom_call_lowering_rule.3 (Arg_0.449: s32[], Arg_1.387: s32[]) -> s32[] {
  %Arg_0.449 = s32[] parameter(0)
  %Arg_1.387 = s32[] parameter(1)
  ROOT %add.722 = s32[] add(%Arg_0.449, %Arg_1.387)
}

%region_6.187._custom_call_lowering_rule.3 (Arg_0.450: s32[], Arg_1.388: s32[]) -> s32[] {
  %Arg_0.450 = s32[] parameter(0)
  ROOT %Arg_1.388 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.3 (Arg_0.451: pred[], Arg_1.389: pred[]) -> pred[] {
  %Arg_0.451 = pred[] parameter(0)
  ROOT %Arg_1.389 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.3 (Arg_0.452: s32[], Arg_1.390: s32[]) -> s32[] {
  %Arg_0.452 = s32[] parameter(0)
  %Arg_1.390 = s32[] parameter(1)
  ROOT %add.723 = s32[] add(%Arg_0.452, %Arg_1.390)
}

%region_5.124._custom_call_lowering_rule.3 (Arg_0.453: s32[], Arg_1.391: s32[]) -> s32[] {
  %Arg_0.453 = s32[] parameter(0)
  %Arg_1.391 = s32[] parameter(1)
  ROOT %add.724 = s32[] add(%Arg_0.453, %Arg_1.391)
}

%region_0.39._custom_call_lowering_rule.3 (Arg_0.454: s32[], Arg_1.392: s32[]) -> s32[] {
  %Arg_0.454 = s32[] parameter(0)
  %Arg_1.392 = s32[] parameter(1)
  ROOT %add.725 = s32[] add(%Arg_0.454, %Arg_1.392)
}

%region_7.195._custom_call_lowering_rule.3 (Arg_0.455: s32[], Arg_1.393: s32[]) -> s32[] {
  %Arg_0.455 = s32[] parameter(0)
  ROOT %Arg_1.393 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.3 (Arg_0.456: s32[], Arg_1.394: s32[]) -> s32[] {
  %Arg_0.456 = s32[] parameter(0)
  %Arg_1.394 = s32[] parameter(1)
  ROOT %add.726 = s32[] add(%Arg_0.456, %Arg_1.394)
}

%region_11.241._custom_call_lowering_rule.3 (Arg_0.457: s32[], Arg_1.395: s32[]) -> s32[] {
  %Arg_0.457 = s32[] parameter(0)
  ROOT %Arg_1.395 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.3 (Arg_0.458: pred[], Arg_1.396: pred[]) -> pred[] {
  %Arg_0.458 = pred[] parameter(0)
  ROOT %Arg_1.396 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.3 (Arg_0.459: s32[], Arg_1.397: s32[]) -> s32[] {
  %Arg_0.459 = s32[] parameter(0)
  %Arg_1.397 = s32[] parameter(1)
  ROOT %add.727 = s32[] add(%Arg_0.459, %Arg_1.397)
}

%region_12.249._custom_call_lowering_rule.3 (Arg_0.460: s32[], Arg_1.398: s32[]) -> s32[] {
  %Arg_0.460 = s32[] parameter(0)
  ROOT %Arg_1.398 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.4 (Arg_0.461: s32[], Arg_1.399: s32[], Arg_2.225: s32[], Arg_3.35: s32[]) -> pred[] {
  %Arg_2.225 = s32[] parameter(2)
  %Arg_3.35 = s32[] parameter(3)
  %Arg_0.461 = s32[] parameter(0)
  %Arg_1.399 = s32[] parameter(1)
  ROOT %compare.1760 = pred[] compare(%Arg_0.461, %Arg_1.399), direction=LT
}

%region_2.88._custom_call_lowering_rule.4 (Arg_0.462: s32[], Arg_1.400: s32[]) -> s32[] {
  %Arg_0.462 = s32[] parameter(0)
  %Arg_1.400 = s32[] parameter(1)
  ROOT %add.728 = s32[] add(%Arg_0.462, %Arg_1.400)
}

%region_6.187._custom_call_lowering_rule.4 (Arg_0.463: s32[], Arg_1.401: s32[]) -> s32[] {
  %Arg_0.463 = s32[] parameter(0)
  ROOT %Arg_1.401 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.4 (Arg_0.464: pred[], Arg_1.402: pred[]) -> pred[] {
  %Arg_0.464 = pred[] parameter(0)
  ROOT %Arg_1.402 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.4 (Arg_0.465: s32[], Arg_1.403: s32[]) -> s32[] {
  %Arg_0.465 = s32[] parameter(0)
  %Arg_1.403 = s32[] parameter(1)
  ROOT %add.729 = s32[] add(%Arg_0.465, %Arg_1.403)
}

%region_5.124._custom_call_lowering_rule.4 (Arg_0.466: s32[], Arg_1.404: s32[]) -> s32[] {
  %Arg_0.466 = s32[] parameter(0)
  %Arg_1.404 = s32[] parameter(1)
  ROOT %add.730 = s32[] add(%Arg_0.466, %Arg_1.404)
}

%region_0.39._custom_call_lowering_rule.4 (Arg_0.467: s32[], Arg_1.405: s32[]) -> s32[] {
  %Arg_0.467 = s32[] parameter(0)
  %Arg_1.405 = s32[] parameter(1)
  ROOT %add.731 = s32[] add(%Arg_0.467, %Arg_1.405)
}

%region_7.195._custom_call_lowering_rule.4 (Arg_0.468: s32[], Arg_1.406: s32[]) -> s32[] {
  %Arg_0.468 = s32[] parameter(0)
  ROOT %Arg_1.406 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.4 (Arg_0.469: s32[], Arg_1.407: s32[]) -> s32[] {
  %Arg_0.469 = s32[] parameter(0)
  %Arg_1.407 = s32[] parameter(1)
  ROOT %add.732 = s32[] add(%Arg_0.469, %Arg_1.407)
}

%region_11.241._custom_call_lowering_rule.4 (Arg_0.470: s32[], Arg_1.408: s32[]) -> s32[] {
  %Arg_0.470 = s32[] parameter(0)
  ROOT %Arg_1.408 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.4 (Arg_0.471: pred[], Arg_1.409: pred[]) -> pred[] {
  %Arg_0.471 = pred[] parameter(0)
  ROOT %Arg_1.409 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.4 (Arg_0.472: s32[], Arg_1.410: s32[]) -> s32[] {
  %Arg_0.472 = s32[] parameter(0)
  %Arg_1.410 = s32[] parameter(1)
  ROOT %add.733 = s32[] add(%Arg_0.472, %Arg_1.410)
}

%region_12.249._custom_call_lowering_rule.4 (Arg_0.473: s32[], Arg_1.411: s32[]) -> s32[] {
  %Arg_0.473 = s32[] parameter(0)
  ROOT %Arg_1.411 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.5 (Arg_0.474: s32[], Arg_1.412: s32[], Arg_2.226: s32[], Arg_3.36: s32[]) -> pred[] {
  %Arg_2.226 = s32[] parameter(2)
  %Arg_3.36 = s32[] parameter(3)
  %Arg_0.474 = s32[] parameter(0)
  %Arg_1.412 = s32[] parameter(1)
  ROOT %compare.1761 = pred[] compare(%Arg_0.474, %Arg_1.412), direction=LT
}

%region_2.88._custom_call_lowering_rule.5 (Arg_0.475: s32[], Arg_1.413: s32[]) -> s32[] {
  %Arg_0.475 = s32[] parameter(0)
  %Arg_1.413 = s32[] parameter(1)
  ROOT %add.734 = s32[] add(%Arg_0.475, %Arg_1.413)
}

%region_6.187._custom_call_lowering_rule.5 (Arg_0.476: s32[], Arg_1.414: s32[]) -> s32[] {
  %Arg_0.476 = s32[] parameter(0)
  ROOT %Arg_1.414 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.5 (Arg_0.477: pred[], Arg_1.415: pred[]) -> pred[] {
  %Arg_0.477 = pred[] parameter(0)
  ROOT %Arg_1.415 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.5 (Arg_0.478: s32[], Arg_1.416: s32[]) -> s32[] {
  %Arg_0.478 = s32[] parameter(0)
  %Arg_1.416 = s32[] parameter(1)
  ROOT %add.735 = s32[] add(%Arg_0.478, %Arg_1.416)
}

%region_5.124._custom_call_lowering_rule.5 (Arg_0.479: s32[], Arg_1.417: s32[]) -> s32[] {
  %Arg_0.479 = s32[] parameter(0)
  %Arg_1.417 = s32[] parameter(1)
  ROOT %add.736 = s32[] add(%Arg_0.479, %Arg_1.417)
}

%region_0.39._custom_call_lowering_rule.5 (Arg_0.480: s32[], Arg_1.418: s32[]) -> s32[] {
  %Arg_0.480 = s32[] parameter(0)
  %Arg_1.418 = s32[] parameter(1)
  ROOT %add.737 = s32[] add(%Arg_0.480, %Arg_1.418)
}

%region_7.195._custom_call_lowering_rule.5 (Arg_0.481: s32[], Arg_1.419: s32[]) -> s32[] {
  %Arg_0.481 = s32[] parameter(0)
  ROOT %Arg_1.419 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.5 (Arg_0.482: s32[], Arg_1.420: s32[]) -> s32[] {
  %Arg_0.482 = s32[] parameter(0)
  %Arg_1.420 = s32[] parameter(1)
  ROOT %add.738 = s32[] add(%Arg_0.482, %Arg_1.420)
}

%region_11.241._custom_call_lowering_rule.5 (Arg_0.483: s32[], Arg_1.421: s32[]) -> s32[] {
  %Arg_0.483 = s32[] parameter(0)
  ROOT %Arg_1.421 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.5 (Arg_0.484: pred[], Arg_1.422: pred[]) -> pred[] {
  %Arg_0.484 = pred[] parameter(0)
  ROOT %Arg_1.422 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.5 (Arg_0.485: s32[], Arg_1.423: s32[]) -> s32[] {
  %Arg_0.485 = s32[] parameter(0)
  %Arg_1.423 = s32[] parameter(1)
  ROOT %add.739 = s32[] add(%Arg_0.485, %Arg_1.423)
}

%region_12.249._custom_call_lowering_rule.5 (Arg_0.486: s32[], Arg_1.424: s32[]) -> s32[] {
  %Arg_0.486 = s32[] parameter(0)
  ROOT %Arg_1.424 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.6 (Arg_0.487: s32[], Arg_1.425: s32[], Arg_2.227: s32[], Arg_3.37: s32[]) -> pred[] {
  %Arg_2.227 = s32[] parameter(2)
  %Arg_3.37 = s32[] parameter(3)
  %Arg_0.487 = s32[] parameter(0)
  %Arg_1.425 = s32[] parameter(1)
  ROOT %compare.1762 = pred[] compare(%Arg_0.487, %Arg_1.425), direction=LT
}

%region_2.88._custom_call_lowering_rule.6 (Arg_0.488: s32[], Arg_1.426: s32[]) -> s32[] {
  %Arg_0.488 = s32[] parameter(0)
  %Arg_1.426 = s32[] parameter(1)
  ROOT %add.740 = s32[] add(%Arg_0.488, %Arg_1.426)
}

%region_6.187._custom_call_lowering_rule.6 (Arg_0.489: s32[], Arg_1.427: s32[]) -> s32[] {
  %Arg_0.489 = s32[] parameter(0)
  ROOT %Arg_1.427 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.6 (Arg_0.490: pred[], Arg_1.428: pred[]) -> pred[] {
  %Arg_0.490 = pred[] parameter(0)
  ROOT %Arg_1.428 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.6 (Arg_0.491: s32[], Arg_1.429: s32[]) -> s32[] {
  %Arg_0.491 = s32[] parameter(0)
  %Arg_1.429 = s32[] parameter(1)
  ROOT %add.741 = s32[] add(%Arg_0.491, %Arg_1.429)
}

%region_5.124._custom_call_lowering_rule.6 (Arg_0.492: s32[], Arg_1.430: s32[]) -> s32[] {
  %Arg_0.492 = s32[] parameter(0)
  %Arg_1.430 = s32[] parameter(1)
  ROOT %add.742 = s32[] add(%Arg_0.492, %Arg_1.430)
}

%region_0.39._custom_call_lowering_rule.6 (Arg_0.493: s32[], Arg_1.431: s32[]) -> s32[] {
  %Arg_0.493 = s32[] parameter(0)
  %Arg_1.431 = s32[] parameter(1)
  ROOT %add.743 = s32[] add(%Arg_0.493, %Arg_1.431)
}

%region_7.195._custom_call_lowering_rule.6 (Arg_0.494: s32[], Arg_1.432: s32[]) -> s32[] {
  %Arg_0.494 = s32[] parameter(0)
  ROOT %Arg_1.432 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.6 (Arg_0.495: s32[], Arg_1.433: s32[]) -> s32[] {
  %Arg_0.495 = s32[] parameter(0)
  %Arg_1.433 = s32[] parameter(1)
  ROOT %add.744 = s32[] add(%Arg_0.495, %Arg_1.433)
}

%region_11.241._custom_call_lowering_rule.6 (Arg_0.496: s32[], Arg_1.434: s32[]) -> s32[] {
  %Arg_0.496 = s32[] parameter(0)
  ROOT %Arg_1.434 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.6 (Arg_0.497: pred[], Arg_1.435: pred[]) -> pred[] {
  %Arg_0.497 = pred[] parameter(0)
  ROOT %Arg_1.435 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.6 (Arg_0.498: s32[], Arg_1.436: s32[]) -> s32[] {
  %Arg_0.498 = s32[] parameter(0)
  %Arg_1.436 = s32[] parameter(1)
  ROOT %add.745 = s32[] add(%Arg_0.498, %Arg_1.436)
}

%region_12.249._custom_call_lowering_rule.6 (Arg_0.499: s32[], Arg_1.437: s32[]) -> s32[] {
  %Arg_0.499 = s32[] parameter(0)
  ROOT %Arg_1.437 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.7 (Arg_0.500: s32[], Arg_1.438: s32[], Arg_2.228: s32[], Arg_3.38: s32[]) -> pred[] {
  %Arg_2.228 = s32[] parameter(2)
  %Arg_3.38 = s32[] parameter(3)
  %Arg_0.500 = s32[] parameter(0)
  %Arg_1.438 = s32[] parameter(1)
  ROOT %compare.1763 = pred[] compare(%Arg_0.500, %Arg_1.438), direction=LT
}

%region_2.88._custom_call_lowering_rule.7 (Arg_0.501: s32[], Arg_1.439: s32[]) -> s32[] {
  %Arg_0.501 = s32[] parameter(0)
  %Arg_1.439 = s32[] parameter(1)
  ROOT %add.746 = s32[] add(%Arg_0.501, %Arg_1.439)
}

%region_6.187._custom_call_lowering_rule.7 (Arg_0.502: s32[], Arg_1.440: s32[]) -> s32[] {
  %Arg_0.502 = s32[] parameter(0)
  ROOT %Arg_1.440 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.7 (Arg_0.503: pred[], Arg_1.441: pred[]) -> pred[] {
  %Arg_0.503 = pred[] parameter(0)
  ROOT %Arg_1.441 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.7 (Arg_0.504: s32[], Arg_1.442: s32[]) -> s32[] {
  %Arg_0.504 = s32[] parameter(0)
  %Arg_1.442 = s32[] parameter(1)
  ROOT %add.747 = s32[] add(%Arg_0.504, %Arg_1.442)
}

%region_5.124._custom_call_lowering_rule.7 (Arg_0.505: s32[], Arg_1.443: s32[]) -> s32[] {
  %Arg_0.505 = s32[] parameter(0)
  %Arg_1.443 = s32[] parameter(1)
  ROOT %add.748 = s32[] add(%Arg_0.505, %Arg_1.443)
}

%region_0.39._custom_call_lowering_rule.7 (Arg_0.506: s32[], Arg_1.444: s32[]) -> s32[] {
  %Arg_0.506 = s32[] parameter(0)
  %Arg_1.444 = s32[] parameter(1)
  ROOT %add.749 = s32[] add(%Arg_0.506, %Arg_1.444)
}

%region_7.195._custom_call_lowering_rule.7 (Arg_0.507: s32[], Arg_1.445: s32[]) -> s32[] {
  %Arg_0.507 = s32[] parameter(0)
  ROOT %Arg_1.445 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.7 (Arg_0.508: s32[], Arg_1.446: s32[]) -> s32[] {
  %Arg_0.508 = s32[] parameter(0)
  %Arg_1.446 = s32[] parameter(1)
  ROOT %add.750 = s32[] add(%Arg_0.508, %Arg_1.446)
}

%region_11.241._custom_call_lowering_rule.7 (Arg_0.509: s32[], Arg_1.447: s32[]) -> s32[] {
  %Arg_0.509 = s32[] parameter(0)
  ROOT %Arg_1.447 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.7 (Arg_0.510: pred[], Arg_1.448: pred[]) -> pred[] {
  %Arg_0.510 = pred[] parameter(0)
  ROOT %Arg_1.448 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.7 (Arg_0.511: s32[], Arg_1.449: s32[]) -> s32[] {
  %Arg_0.511 = s32[] parameter(0)
  %Arg_1.449 = s32[] parameter(1)
  ROOT %add.751 = s32[] add(%Arg_0.511, %Arg_1.449)
}

%region_12.249._custom_call_lowering_rule.7 (Arg_0.512: s32[], Arg_1.450: s32[]) -> s32[] {
  %Arg_0.512 = s32[] parameter(0)
  ROOT %Arg_1.450 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.8 (Arg_0.513: s32[], Arg_1.451: s32[], Arg_2.229: s32[], Arg_3.39: s32[]) -> pred[] {
  %Arg_2.229 = s32[] parameter(2)
  %Arg_3.39 = s32[] parameter(3)
  %Arg_0.513 = s32[] parameter(0)
  %Arg_1.451 = s32[] parameter(1)
  ROOT %compare.1764 = pred[] compare(%Arg_0.513, %Arg_1.451), direction=LT
}

%region_2.88._custom_call_lowering_rule.8 (Arg_0.514: s32[], Arg_1.452: s32[]) -> s32[] {
  %Arg_0.514 = s32[] parameter(0)
  %Arg_1.452 = s32[] parameter(1)
  ROOT %add.752 = s32[] add(%Arg_0.514, %Arg_1.452)
}

%region_6.187._custom_call_lowering_rule.8 (Arg_0.515: s32[], Arg_1.453: s32[]) -> s32[] {
  %Arg_0.515 = s32[] parameter(0)
  ROOT %Arg_1.453 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.8 (Arg_0.516: pred[], Arg_1.454: pred[]) -> pred[] {
  %Arg_0.516 = pred[] parameter(0)
  ROOT %Arg_1.454 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.8 (Arg_0.517: s32[], Arg_1.455: s32[]) -> s32[] {
  %Arg_0.517 = s32[] parameter(0)
  %Arg_1.455 = s32[] parameter(1)
  ROOT %add.753 = s32[] add(%Arg_0.517, %Arg_1.455)
}

%region_5.124._custom_call_lowering_rule.8 (Arg_0.518: s32[], Arg_1.456: s32[]) -> s32[] {
  %Arg_0.518 = s32[] parameter(0)
  %Arg_1.456 = s32[] parameter(1)
  ROOT %add.754 = s32[] add(%Arg_0.518, %Arg_1.456)
}

%region_0.39._custom_call_lowering_rule.8 (Arg_0.519: s32[], Arg_1.457: s32[]) -> s32[] {
  %Arg_0.519 = s32[] parameter(0)
  %Arg_1.457 = s32[] parameter(1)
  ROOT %add.755 = s32[] add(%Arg_0.519, %Arg_1.457)
}

%region_7.195._custom_call_lowering_rule.8 (Arg_0.520: s32[], Arg_1.458: s32[]) -> s32[] {
  %Arg_0.520 = s32[] parameter(0)
  ROOT %Arg_1.458 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.8 (Arg_0.521: s32[], Arg_1.459: s32[]) -> s32[] {
  %Arg_0.521 = s32[] parameter(0)
  %Arg_1.459 = s32[] parameter(1)
  ROOT %add.756 = s32[] add(%Arg_0.521, %Arg_1.459)
}

%region_11.241._custom_call_lowering_rule.8 (Arg_0.522: s32[], Arg_1.460: s32[]) -> s32[] {
  %Arg_0.522 = s32[] parameter(0)
  ROOT %Arg_1.460 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.8 (Arg_0.523: pred[], Arg_1.461: pred[]) -> pred[] {
  %Arg_0.523 = pred[] parameter(0)
  ROOT %Arg_1.461 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.8 (Arg_0.524: s32[], Arg_1.462: s32[]) -> s32[] {
  %Arg_0.524 = s32[] parameter(0)
  %Arg_1.462 = s32[] parameter(1)
  ROOT %add.757 = s32[] add(%Arg_0.524, %Arg_1.462)
}

%region_12.249._custom_call_lowering_rule.8 (Arg_0.525: s32[], Arg_1.463: s32[]) -> s32[] {
  %Arg_0.525 = s32[] parameter(0)
  ROOT %Arg_1.463 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.9 (Arg_0.526: s32[], Arg_1.464: s32[], Arg_2.230: s32[], Arg_3.40: s32[]) -> pred[] {
  %Arg_2.230 = s32[] parameter(2)
  %Arg_3.40 = s32[] parameter(3)
  %Arg_0.526 = s32[] parameter(0)
  %Arg_1.464 = s32[] parameter(1)
  ROOT %compare.1765 = pred[] compare(%Arg_0.526, %Arg_1.464), direction=LT
}

%region_2.88._custom_call_lowering_rule.9 (Arg_0.527: s32[], Arg_1.465: s32[]) -> s32[] {
  %Arg_0.527 = s32[] parameter(0)
  %Arg_1.465 = s32[] parameter(1)
  ROOT %add.758 = s32[] add(%Arg_0.527, %Arg_1.465)
}

%region_6.187._custom_call_lowering_rule.9 (Arg_0.528: s32[], Arg_1.466: s32[]) -> s32[] {
  %Arg_0.528 = s32[] parameter(0)
  ROOT %Arg_1.466 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.9 (Arg_0.529: pred[], Arg_1.467: pred[]) -> pred[] {
  %Arg_0.529 = pred[] parameter(0)
  ROOT %Arg_1.467 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.9 (Arg_0.530: s32[], Arg_1.468: s32[]) -> s32[] {
  %Arg_0.530 = s32[] parameter(0)
  %Arg_1.468 = s32[] parameter(1)
  ROOT %add.759 = s32[] add(%Arg_0.530, %Arg_1.468)
}

%region_5.124._custom_call_lowering_rule.9 (Arg_0.531: s32[], Arg_1.469: s32[]) -> s32[] {
  %Arg_0.531 = s32[] parameter(0)
  %Arg_1.469 = s32[] parameter(1)
  ROOT %add.760 = s32[] add(%Arg_0.531, %Arg_1.469)
}

%region_0.39._custom_call_lowering_rule.9 (Arg_0.532: s32[], Arg_1.470: s32[]) -> s32[] {
  %Arg_0.532 = s32[] parameter(0)
  %Arg_1.470 = s32[] parameter(1)
  ROOT %add.761 = s32[] add(%Arg_0.532, %Arg_1.470)
}

%region_7.195._custom_call_lowering_rule.9 (Arg_0.533: s32[], Arg_1.471: s32[]) -> s32[] {
  %Arg_0.533 = s32[] parameter(0)
  ROOT %Arg_1.471 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.9 (Arg_0.534: s32[], Arg_1.472: s32[]) -> s32[] {
  %Arg_0.534 = s32[] parameter(0)
  %Arg_1.472 = s32[] parameter(1)
  ROOT %add.762 = s32[] add(%Arg_0.534, %Arg_1.472)
}

%region_11.241._custom_call_lowering_rule.9 (Arg_0.535: s32[], Arg_1.473: s32[]) -> s32[] {
  %Arg_0.535 = s32[] parameter(0)
  ROOT %Arg_1.473 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.9 (Arg_0.536: pred[], Arg_1.474: pred[]) -> pred[] {
  %Arg_0.536 = pred[] parameter(0)
  ROOT %Arg_1.474 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.9 (Arg_0.537: s32[], Arg_1.475: s32[]) -> s32[] {
  %Arg_0.537 = s32[] parameter(0)
  %Arg_1.475 = s32[] parameter(1)
  ROOT %add.763 = s32[] add(%Arg_0.537, %Arg_1.475)
}

%region_12.249._custom_call_lowering_rule.9 (Arg_0.538: s32[], Arg_1.476: s32[]) -> s32[] {
  %Arg_0.538 = s32[] parameter(0)
  ROOT %Arg_1.476 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.10 (Arg_0.539: s32[], Arg_1.477: s32[], Arg_2.231: s32[], Arg_3.41: s32[]) -> pred[] {
  %Arg_2.231 = s32[] parameter(2)
  %Arg_3.41 = s32[] parameter(3)
  %Arg_0.539 = s32[] parameter(0)
  %Arg_1.477 = s32[] parameter(1)
  ROOT %compare.1766 = pred[] compare(%Arg_0.539, %Arg_1.477), direction=LT
}

%region_2.88._custom_call_lowering_rule.10 (Arg_0.540: s32[], Arg_1.478: s32[]) -> s32[] {
  %Arg_0.540 = s32[] parameter(0)
  %Arg_1.478 = s32[] parameter(1)
  ROOT %add.764 = s32[] add(%Arg_0.540, %Arg_1.478)
}

%region_6.187._custom_call_lowering_rule.10 (Arg_0.541: s32[], Arg_1.479: s32[]) -> s32[] {
  %Arg_0.541 = s32[] parameter(0)
  ROOT %Arg_1.479 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.10 (Arg_0.542: pred[], Arg_1.480: pred[]) -> pred[] {
  %Arg_0.542 = pred[] parameter(0)
  ROOT %Arg_1.480 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.10 (Arg_0.543: s32[], Arg_1.481: s32[]) -> s32[] {
  %Arg_0.543 = s32[] parameter(0)
  %Arg_1.481 = s32[] parameter(1)
  ROOT %add.765 = s32[] add(%Arg_0.543, %Arg_1.481)
}

%region_5.124._custom_call_lowering_rule.10 (Arg_0.544: s32[], Arg_1.482: s32[]) -> s32[] {
  %Arg_0.544 = s32[] parameter(0)
  %Arg_1.482 = s32[] parameter(1)
  ROOT %add.766 = s32[] add(%Arg_0.544, %Arg_1.482)
}

%region_0.39._custom_call_lowering_rule.10 (Arg_0.545: s32[], Arg_1.483: s32[]) -> s32[] {
  %Arg_0.545 = s32[] parameter(0)
  %Arg_1.483 = s32[] parameter(1)
  ROOT %add.767 = s32[] add(%Arg_0.545, %Arg_1.483)
}

%region_7.195._custom_call_lowering_rule.10 (Arg_0.546: s32[], Arg_1.484: s32[]) -> s32[] {
  %Arg_0.546 = s32[] parameter(0)
  ROOT %Arg_1.484 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.10 (Arg_0.547: s32[], Arg_1.485: s32[]) -> s32[] {
  %Arg_0.547 = s32[] parameter(0)
  %Arg_1.485 = s32[] parameter(1)
  ROOT %add.768 = s32[] add(%Arg_0.547, %Arg_1.485)
}

%region_11.241._custom_call_lowering_rule.10 (Arg_0.548: s32[], Arg_1.486: s32[]) -> s32[] {
  %Arg_0.548 = s32[] parameter(0)
  ROOT %Arg_1.486 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.10 (Arg_0.549: pred[], Arg_1.487: pred[]) -> pred[] {
  %Arg_0.549 = pred[] parameter(0)
  ROOT %Arg_1.487 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.10 (Arg_0.550: s32[], Arg_1.488: s32[]) -> s32[] {
  %Arg_0.550 = s32[] parameter(0)
  %Arg_1.488 = s32[] parameter(1)
  ROOT %add.769 = s32[] add(%Arg_0.550, %Arg_1.488)
}

%region_12.249._custom_call_lowering_rule.10 (Arg_0.551: s32[], Arg_1.489: s32[]) -> s32[] {
  %Arg_0.551 = s32[] parameter(0)
  ROOT %Arg_1.489 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.11 (Arg_0.552: s32[], Arg_1.490: s32[], Arg_2.232: s32[], Arg_3.42: s32[]) -> pred[] {
  %Arg_2.232 = s32[] parameter(2)
  %Arg_3.42 = s32[] parameter(3)
  %Arg_0.552 = s32[] parameter(0)
  %Arg_1.490 = s32[] parameter(1)
  ROOT %compare.1767 = pred[] compare(%Arg_0.552, %Arg_1.490), direction=LT
}

%region_2.88._custom_call_lowering_rule.11 (Arg_0.553: s32[], Arg_1.491: s32[]) -> s32[] {
  %Arg_0.553 = s32[] parameter(0)
  %Arg_1.491 = s32[] parameter(1)
  ROOT %add.770 = s32[] add(%Arg_0.553, %Arg_1.491)
}

%region_6.187._custom_call_lowering_rule.11 (Arg_0.554: s32[], Arg_1.492: s32[]) -> s32[] {
  %Arg_0.554 = s32[] parameter(0)
  ROOT %Arg_1.492 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.11 (Arg_0.555: pred[], Arg_1.493: pred[]) -> pred[] {
  %Arg_0.555 = pred[] parameter(0)
  ROOT %Arg_1.493 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.11 (Arg_0.556: s32[], Arg_1.494: s32[]) -> s32[] {
  %Arg_0.556 = s32[] parameter(0)
  %Arg_1.494 = s32[] parameter(1)
  ROOT %add.771 = s32[] add(%Arg_0.556, %Arg_1.494)
}

%region_5.124._custom_call_lowering_rule.11 (Arg_0.557: s32[], Arg_1.495: s32[]) -> s32[] {
  %Arg_0.557 = s32[] parameter(0)
  %Arg_1.495 = s32[] parameter(1)
  ROOT %add.772 = s32[] add(%Arg_0.557, %Arg_1.495)
}

%region_0.39._custom_call_lowering_rule.11 (Arg_0.558: s32[], Arg_1.496: s32[]) -> s32[] {
  %Arg_0.558 = s32[] parameter(0)
  %Arg_1.496 = s32[] parameter(1)
  ROOT %add.773 = s32[] add(%Arg_0.558, %Arg_1.496)
}

%region_7.195._custom_call_lowering_rule.11 (Arg_0.559: s32[], Arg_1.497: s32[]) -> s32[] {
  %Arg_0.559 = s32[] parameter(0)
  ROOT %Arg_1.497 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.11 (Arg_0.560: s32[], Arg_1.498: s32[]) -> s32[] {
  %Arg_0.560 = s32[] parameter(0)
  %Arg_1.498 = s32[] parameter(1)
  ROOT %add.774 = s32[] add(%Arg_0.560, %Arg_1.498)
}

%region_11.241._custom_call_lowering_rule.11 (Arg_0.561: s32[], Arg_1.499: s32[]) -> s32[] {
  %Arg_0.561 = s32[] parameter(0)
  ROOT %Arg_1.499 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.11 (Arg_0.562: pred[], Arg_1.500: pred[]) -> pred[] {
  %Arg_0.562 = pred[] parameter(0)
  ROOT %Arg_1.500 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.11 (Arg_0.563: s32[], Arg_1.501: s32[]) -> s32[] {
  %Arg_0.563 = s32[] parameter(0)
  %Arg_1.501 = s32[] parameter(1)
  ROOT %add.775 = s32[] add(%Arg_0.563, %Arg_1.501)
}

%region_12.249._custom_call_lowering_rule.11 (Arg_0.564: s32[], Arg_1.502: s32[]) -> s32[] {
  %Arg_0.564 = s32[] parameter(0)
  ROOT %Arg_1.502 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.12 (Arg_0.565: s32[], Arg_1.503: s32[], Arg_2.233: s32[], Arg_3.43: s32[]) -> pred[] {
  %Arg_2.233 = s32[] parameter(2)
  %Arg_3.43 = s32[] parameter(3)
  %Arg_0.565 = s32[] parameter(0)
  %Arg_1.503 = s32[] parameter(1)
  ROOT %compare.1768 = pred[] compare(%Arg_0.565, %Arg_1.503), direction=LT
}

%region_2.88._custom_call_lowering_rule.12 (Arg_0.566: s32[], Arg_1.504: s32[]) -> s32[] {
  %Arg_0.566 = s32[] parameter(0)
  %Arg_1.504 = s32[] parameter(1)
  ROOT %add.776 = s32[] add(%Arg_0.566, %Arg_1.504)
}

%region_6.187._custom_call_lowering_rule.12 (Arg_0.567: s32[], Arg_1.505: s32[]) -> s32[] {
  %Arg_0.567 = s32[] parameter(0)
  ROOT %Arg_1.505 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.12 (Arg_0.568: pred[], Arg_1.506: pred[]) -> pred[] {
  %Arg_0.568 = pred[] parameter(0)
  ROOT %Arg_1.506 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.12 (Arg_0.569: s32[], Arg_1.507: s32[]) -> s32[] {
  %Arg_0.569 = s32[] parameter(0)
  %Arg_1.507 = s32[] parameter(1)
  ROOT %add.777 = s32[] add(%Arg_0.569, %Arg_1.507)
}

%region_5.124._custom_call_lowering_rule.12 (Arg_0.570: s32[], Arg_1.508: s32[]) -> s32[] {
  %Arg_0.570 = s32[] parameter(0)
  %Arg_1.508 = s32[] parameter(1)
  ROOT %add.778 = s32[] add(%Arg_0.570, %Arg_1.508)
}

%region_0.39._custom_call_lowering_rule.12 (Arg_0.571: s32[], Arg_1.509: s32[]) -> s32[] {
  %Arg_0.571 = s32[] parameter(0)
  %Arg_1.509 = s32[] parameter(1)
  ROOT %add.779 = s32[] add(%Arg_0.571, %Arg_1.509)
}

%region_7.195._custom_call_lowering_rule.12 (Arg_0.572: s32[], Arg_1.510: s32[]) -> s32[] {
  %Arg_0.572 = s32[] parameter(0)
  ROOT %Arg_1.510 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.12 (Arg_0.573: s32[], Arg_1.511: s32[]) -> s32[] {
  %Arg_0.573 = s32[] parameter(0)
  %Arg_1.511 = s32[] parameter(1)
  ROOT %add.780 = s32[] add(%Arg_0.573, %Arg_1.511)
}

%region_11.241._custom_call_lowering_rule.12 (Arg_0.574: s32[], Arg_1.512: s32[]) -> s32[] {
  %Arg_0.574 = s32[] parameter(0)
  ROOT %Arg_1.512 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.12 (Arg_0.575: pred[], Arg_1.513: pred[]) -> pred[] {
  %Arg_0.575 = pred[] parameter(0)
  ROOT %Arg_1.513 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.12 (Arg_0.576: s32[], Arg_1.514: s32[]) -> s32[] {
  %Arg_0.576 = s32[] parameter(0)
  %Arg_1.514 = s32[] parameter(1)
  ROOT %add.781 = s32[] add(%Arg_0.576, %Arg_1.514)
}

%region_12.249._custom_call_lowering_rule.12 (Arg_0.577: s32[], Arg_1.515: s32[]) -> s32[] {
  %Arg_0.577 = s32[] parameter(0)
  ROOT %Arg_1.515 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.13 (Arg_0.578: s32[], Arg_1.516: s32[], Arg_2.234: s32[], Arg_3.44: s32[]) -> pred[] {
  %Arg_2.234 = s32[] parameter(2)
  %Arg_3.44 = s32[] parameter(3)
  %Arg_0.578 = s32[] parameter(0)
  %Arg_1.516 = s32[] parameter(1)
  ROOT %compare.1769 = pred[] compare(%Arg_0.578, %Arg_1.516), direction=LT
}

%region_2.88._custom_call_lowering_rule.13 (Arg_0.579: s32[], Arg_1.517: s32[]) -> s32[] {
  %Arg_0.579 = s32[] parameter(0)
  %Arg_1.517 = s32[] parameter(1)
  ROOT %add.782 = s32[] add(%Arg_0.579, %Arg_1.517)
}

%region_6.187._custom_call_lowering_rule.13 (Arg_0.580: s32[], Arg_1.518: s32[]) -> s32[] {
  %Arg_0.580 = s32[] parameter(0)
  ROOT %Arg_1.518 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.13 (Arg_0.581: pred[], Arg_1.519: pred[]) -> pred[] {
  %Arg_0.581 = pred[] parameter(0)
  ROOT %Arg_1.519 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.13 (Arg_0.582: s32[], Arg_1.520: s32[]) -> s32[] {
  %Arg_0.582 = s32[] parameter(0)
  %Arg_1.520 = s32[] parameter(1)
  ROOT %add.783 = s32[] add(%Arg_0.582, %Arg_1.520)
}

%region_5.124._custom_call_lowering_rule.13 (Arg_0.583: s32[], Arg_1.521: s32[]) -> s32[] {
  %Arg_0.583 = s32[] parameter(0)
  %Arg_1.521 = s32[] parameter(1)
  ROOT %add.784 = s32[] add(%Arg_0.583, %Arg_1.521)
}

%region_0.39._custom_call_lowering_rule.13 (Arg_0.584: s32[], Arg_1.522: s32[]) -> s32[] {
  %Arg_0.584 = s32[] parameter(0)
  %Arg_1.522 = s32[] parameter(1)
  ROOT %add.785 = s32[] add(%Arg_0.584, %Arg_1.522)
}

%region_7.195._custom_call_lowering_rule.13 (Arg_0.585: s32[], Arg_1.523: s32[]) -> s32[] {
  %Arg_0.585 = s32[] parameter(0)
  ROOT %Arg_1.523 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.13 (Arg_0.586: s32[], Arg_1.524: s32[]) -> s32[] {
  %Arg_0.586 = s32[] parameter(0)
  %Arg_1.524 = s32[] parameter(1)
  ROOT %add.786 = s32[] add(%Arg_0.586, %Arg_1.524)
}

%region_11.241._custom_call_lowering_rule.13 (Arg_0.587: s32[], Arg_1.525: s32[]) -> s32[] {
  %Arg_0.587 = s32[] parameter(0)
  ROOT %Arg_1.525 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.13 (Arg_0.588: pred[], Arg_1.526: pred[]) -> pred[] {
  %Arg_0.588 = pred[] parameter(0)
  ROOT %Arg_1.526 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.13 (Arg_0.589: s32[], Arg_1.527: s32[]) -> s32[] {
  %Arg_0.589 = s32[] parameter(0)
  %Arg_1.527 = s32[] parameter(1)
  ROOT %add.787 = s32[] add(%Arg_0.589, %Arg_1.527)
}

%region_12.249._custom_call_lowering_rule.13 (Arg_0.590: s32[], Arg_1.528: s32[]) -> s32[] {
  %Arg_0.590 = s32[] parameter(0)
  ROOT %Arg_1.528 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.14 (Arg_0.591: s32[], Arg_1.529: s32[], Arg_2.235: s32[], Arg_3.45: s32[]) -> pred[] {
  %Arg_2.235 = s32[] parameter(2)
  %Arg_3.45 = s32[] parameter(3)
  %Arg_0.591 = s32[] parameter(0)
  %Arg_1.529 = s32[] parameter(1)
  ROOT %compare.1770 = pred[] compare(%Arg_0.591, %Arg_1.529), direction=LT
}

%region_2.88._custom_call_lowering_rule.14 (Arg_0.592: s32[], Arg_1.530: s32[]) -> s32[] {
  %Arg_0.592 = s32[] parameter(0)
  %Arg_1.530 = s32[] parameter(1)
  ROOT %add.788 = s32[] add(%Arg_0.592, %Arg_1.530)
}

%region_6.187._custom_call_lowering_rule.14 (Arg_0.593: s32[], Arg_1.531: s32[]) -> s32[] {
  %Arg_0.593 = s32[] parameter(0)
  ROOT %Arg_1.531 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.14 (Arg_0.594: pred[], Arg_1.532: pred[]) -> pred[] {
  %Arg_0.594 = pred[] parameter(0)
  ROOT %Arg_1.532 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.14 (Arg_0.595: s32[], Arg_1.533: s32[]) -> s32[] {
  %Arg_0.595 = s32[] parameter(0)
  %Arg_1.533 = s32[] parameter(1)
  ROOT %add.789 = s32[] add(%Arg_0.595, %Arg_1.533)
}

%region_5.124._custom_call_lowering_rule.14 (Arg_0.596: s32[], Arg_1.534: s32[]) -> s32[] {
  %Arg_0.596 = s32[] parameter(0)
  %Arg_1.534 = s32[] parameter(1)
  ROOT %add.790 = s32[] add(%Arg_0.596, %Arg_1.534)
}

%region_0.39._custom_call_lowering_rule.14 (Arg_0.597: s32[], Arg_1.535: s32[]) -> s32[] {
  %Arg_0.597 = s32[] parameter(0)
  %Arg_1.535 = s32[] parameter(1)
  ROOT %add.791 = s32[] add(%Arg_0.597, %Arg_1.535)
}

%region_7.195._custom_call_lowering_rule.14 (Arg_0.598: s32[], Arg_1.536: s32[]) -> s32[] {
  %Arg_0.598 = s32[] parameter(0)
  ROOT %Arg_1.536 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.14 (Arg_0.599: s32[], Arg_1.537: s32[]) -> s32[] {
  %Arg_0.599 = s32[] parameter(0)
  %Arg_1.537 = s32[] parameter(1)
  ROOT %add.792 = s32[] add(%Arg_0.599, %Arg_1.537)
}

%region_11.241._custom_call_lowering_rule.14 (Arg_0.600: s32[], Arg_1.538: s32[]) -> s32[] {
  %Arg_0.600 = s32[] parameter(0)
  ROOT %Arg_1.538 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.14 (Arg_0.601: pred[], Arg_1.539: pred[]) -> pred[] {
  %Arg_0.601 = pred[] parameter(0)
  ROOT %Arg_1.539 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.14 (Arg_0.602: s32[], Arg_1.540: s32[]) -> s32[] {
  %Arg_0.602 = s32[] parameter(0)
  %Arg_1.540 = s32[] parameter(1)
  ROOT %add.793 = s32[] add(%Arg_0.602, %Arg_1.540)
}

%region_12.249._custom_call_lowering_rule.14 (Arg_0.603: s32[], Arg_1.541: s32[]) -> s32[] {
  %Arg_0.603 = s32[] parameter(0)
  ROOT %Arg_1.541 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.15 (Arg_0.604: s32[], Arg_1.542: s32[], Arg_2.236: s32[], Arg_3.46: s32[]) -> pred[] {
  %Arg_2.236 = s32[] parameter(2)
  %Arg_3.46 = s32[] parameter(3)
  %Arg_0.604 = s32[] parameter(0)
  %Arg_1.542 = s32[] parameter(1)
  ROOT %compare.1771 = pred[] compare(%Arg_0.604, %Arg_1.542), direction=LT
}

%region_2.88._custom_call_lowering_rule.15 (Arg_0.605: s32[], Arg_1.543: s32[]) -> s32[] {
  %Arg_0.605 = s32[] parameter(0)
  %Arg_1.543 = s32[] parameter(1)
  ROOT %add.794 = s32[] add(%Arg_0.605, %Arg_1.543)
}

%region_6.187._custom_call_lowering_rule.15 (Arg_0.606: s32[], Arg_1.544: s32[]) -> s32[] {
  %Arg_0.606 = s32[] parameter(0)
  ROOT %Arg_1.544 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.15 (Arg_0.607: pred[], Arg_1.545: pred[]) -> pred[] {
  %Arg_0.607 = pred[] parameter(0)
  ROOT %Arg_1.545 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.15 (Arg_0.608: s32[], Arg_1.546: s32[]) -> s32[] {
  %Arg_0.608 = s32[] parameter(0)
  %Arg_1.546 = s32[] parameter(1)
  ROOT %add.795 = s32[] add(%Arg_0.608, %Arg_1.546)
}

%region_5.124._custom_call_lowering_rule.15 (Arg_0.609: s32[], Arg_1.547: s32[]) -> s32[] {
  %Arg_0.609 = s32[] parameter(0)
  %Arg_1.547 = s32[] parameter(1)
  ROOT %add.796 = s32[] add(%Arg_0.609, %Arg_1.547)
}

%region_0.39._custom_call_lowering_rule.15 (Arg_0.610: s32[], Arg_1.548: s32[]) -> s32[] {
  %Arg_0.610 = s32[] parameter(0)
  %Arg_1.548 = s32[] parameter(1)
  ROOT %add.797 = s32[] add(%Arg_0.610, %Arg_1.548)
}

%region_7.195._custom_call_lowering_rule.15 (Arg_0.611: s32[], Arg_1.549: s32[]) -> s32[] {
  %Arg_0.611 = s32[] parameter(0)
  ROOT %Arg_1.549 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.15 (Arg_0.612: s32[], Arg_1.550: s32[]) -> s32[] {
  %Arg_0.612 = s32[] parameter(0)
  %Arg_1.550 = s32[] parameter(1)
  ROOT %add.798 = s32[] add(%Arg_0.612, %Arg_1.550)
}

%region_11.241._custom_call_lowering_rule.15 (Arg_0.613: s32[], Arg_1.551: s32[]) -> s32[] {
  %Arg_0.613 = s32[] parameter(0)
  ROOT %Arg_1.551 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.15 (Arg_0.614: pred[], Arg_1.552: pred[]) -> pred[] {
  %Arg_0.614 = pred[] parameter(0)
  ROOT %Arg_1.552 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.15 (Arg_0.615: s32[], Arg_1.553: s32[]) -> s32[] {
  %Arg_0.615 = s32[] parameter(0)
  %Arg_1.553 = s32[] parameter(1)
  ROOT %add.799 = s32[] add(%Arg_0.615, %Arg_1.553)
}

%region_12.249._custom_call_lowering_rule.15 (Arg_0.616: s32[], Arg_1.554: s32[]) -> s32[] {
  %Arg_0.616 = s32[] parameter(0)
  ROOT %Arg_1.554 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.16 (Arg_0.617: s32[], Arg_1.555: s32[], Arg_2.237: s32[], Arg_3.47: s32[]) -> pred[] {
  %Arg_2.237 = s32[] parameter(2)
  %Arg_3.47 = s32[] parameter(3)
  %Arg_0.617 = s32[] parameter(0)
  %Arg_1.555 = s32[] parameter(1)
  ROOT %compare.1772 = pred[] compare(%Arg_0.617, %Arg_1.555), direction=LT
}

%region_2.88._custom_call_lowering_rule.16 (Arg_0.618: s32[], Arg_1.556: s32[]) -> s32[] {
  %Arg_0.618 = s32[] parameter(0)
  %Arg_1.556 = s32[] parameter(1)
  ROOT %add.800 = s32[] add(%Arg_0.618, %Arg_1.556)
}

%region_6.187._custom_call_lowering_rule.16 (Arg_0.619: s32[], Arg_1.557: s32[]) -> s32[] {
  %Arg_0.619 = s32[] parameter(0)
  ROOT %Arg_1.557 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.16 (Arg_0.620: pred[], Arg_1.558: pred[]) -> pred[] {
  %Arg_0.620 = pred[] parameter(0)
  ROOT %Arg_1.558 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.16 (Arg_0.621: s32[], Arg_1.559: s32[]) -> s32[] {
  %Arg_0.621 = s32[] parameter(0)
  %Arg_1.559 = s32[] parameter(1)
  ROOT %add.801 = s32[] add(%Arg_0.621, %Arg_1.559)
}

%region_5.124._custom_call_lowering_rule.16 (Arg_0.622: s32[], Arg_1.560: s32[]) -> s32[] {
  %Arg_0.622 = s32[] parameter(0)
  %Arg_1.560 = s32[] parameter(1)
  ROOT %add.802 = s32[] add(%Arg_0.622, %Arg_1.560)
}

%region_0.39._custom_call_lowering_rule.16 (Arg_0.623: s32[], Arg_1.561: s32[]) -> s32[] {
  %Arg_0.623 = s32[] parameter(0)
  %Arg_1.561 = s32[] parameter(1)
  ROOT %add.803 = s32[] add(%Arg_0.623, %Arg_1.561)
}

%region_7.195._custom_call_lowering_rule.16 (Arg_0.624: s32[], Arg_1.562: s32[]) -> s32[] {
  %Arg_0.624 = s32[] parameter(0)
  ROOT %Arg_1.562 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.16 (Arg_0.625: s32[], Arg_1.563: s32[]) -> s32[] {
  %Arg_0.625 = s32[] parameter(0)
  %Arg_1.563 = s32[] parameter(1)
  ROOT %add.804 = s32[] add(%Arg_0.625, %Arg_1.563)
}

%region_11.241._custom_call_lowering_rule.16 (Arg_0.626: s32[], Arg_1.564: s32[]) -> s32[] {
  %Arg_0.626 = s32[] parameter(0)
  ROOT %Arg_1.564 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.16 (Arg_0.627: pred[], Arg_1.565: pred[]) -> pred[] {
  %Arg_0.627 = pred[] parameter(0)
  ROOT %Arg_1.565 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.16 (Arg_0.628: s32[], Arg_1.566: s32[]) -> s32[] {
  %Arg_0.628 = s32[] parameter(0)
  %Arg_1.566 = s32[] parameter(1)
  ROOT %add.805 = s32[] add(%Arg_0.628, %Arg_1.566)
}

%region_12.249._custom_call_lowering_rule.16 (Arg_0.629: s32[], Arg_1.567: s32[]) -> s32[] {
  %Arg_0.629 = s32[] parameter(0)
  ROOT %Arg_1.567 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.17 (Arg_0.630: s32[], Arg_1.568: s32[], Arg_2.238: s32[], Arg_3.48: s32[]) -> pred[] {
  %Arg_2.238 = s32[] parameter(2)
  %Arg_3.48 = s32[] parameter(3)
  %Arg_0.630 = s32[] parameter(0)
  %Arg_1.568 = s32[] parameter(1)
  ROOT %compare.1773 = pred[] compare(%Arg_0.630, %Arg_1.568), direction=LT
}

%region_2.88._custom_call_lowering_rule.17 (Arg_0.631: s32[], Arg_1.569: s32[]) -> s32[] {
  %Arg_0.631 = s32[] parameter(0)
  %Arg_1.569 = s32[] parameter(1)
  ROOT %add.806 = s32[] add(%Arg_0.631, %Arg_1.569)
}

%region_6.187._custom_call_lowering_rule.17 (Arg_0.632: s32[], Arg_1.570: s32[]) -> s32[] {
  %Arg_0.632 = s32[] parameter(0)
  ROOT %Arg_1.570 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.17 (Arg_0.633: pred[], Arg_1.571: pred[]) -> pred[] {
  %Arg_0.633 = pred[] parameter(0)
  ROOT %Arg_1.571 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.17 (Arg_0.634: s32[], Arg_1.572: s32[]) -> s32[] {
  %Arg_0.634 = s32[] parameter(0)
  %Arg_1.572 = s32[] parameter(1)
  ROOT %add.807 = s32[] add(%Arg_0.634, %Arg_1.572)
}

%region_5.124._custom_call_lowering_rule.17 (Arg_0.635: s32[], Arg_1.573: s32[]) -> s32[] {
  %Arg_0.635 = s32[] parameter(0)
  %Arg_1.573 = s32[] parameter(1)
  ROOT %add.808 = s32[] add(%Arg_0.635, %Arg_1.573)
}

%region_0.39._custom_call_lowering_rule.17 (Arg_0.636: s32[], Arg_1.574: s32[]) -> s32[] {
  %Arg_0.636 = s32[] parameter(0)
  %Arg_1.574 = s32[] parameter(1)
  ROOT %add.809 = s32[] add(%Arg_0.636, %Arg_1.574)
}

%region_7.195._custom_call_lowering_rule.17 (Arg_0.637: s32[], Arg_1.575: s32[]) -> s32[] {
  %Arg_0.637 = s32[] parameter(0)
  ROOT %Arg_1.575 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.17 (Arg_0.638: s32[], Arg_1.576: s32[]) -> s32[] {
  %Arg_0.638 = s32[] parameter(0)
  %Arg_1.576 = s32[] parameter(1)
  ROOT %add.810 = s32[] add(%Arg_0.638, %Arg_1.576)
}

%region_11.241._custom_call_lowering_rule.17 (Arg_0.639: s32[], Arg_1.577: s32[]) -> s32[] {
  %Arg_0.639 = s32[] parameter(0)
  ROOT %Arg_1.577 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.17 (Arg_0.640: pred[], Arg_1.578: pred[]) -> pred[] {
  %Arg_0.640 = pred[] parameter(0)
  ROOT %Arg_1.578 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.17 (Arg_0.641: s32[], Arg_1.579: s32[]) -> s32[] {
  %Arg_0.641 = s32[] parameter(0)
  %Arg_1.579 = s32[] parameter(1)
  ROOT %add.811 = s32[] add(%Arg_0.641, %Arg_1.579)
}

%region_12.249._custom_call_lowering_rule.17 (Arg_0.642: s32[], Arg_1.580: s32[]) -> s32[] {
  %Arg_0.642 = s32[] parameter(0)
  ROOT %Arg_1.580 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.18 (Arg_0.643: s32[], Arg_1.581: s32[], Arg_2.239: s32[], Arg_3.49: s32[]) -> pred[] {
  %Arg_2.239 = s32[] parameter(2)
  %Arg_3.49 = s32[] parameter(3)
  %Arg_0.643 = s32[] parameter(0)
  %Arg_1.581 = s32[] parameter(1)
  ROOT %compare.1774 = pred[] compare(%Arg_0.643, %Arg_1.581), direction=LT
}

%region_2.88._custom_call_lowering_rule.18 (Arg_0.644: s32[], Arg_1.582: s32[]) -> s32[] {
  %Arg_0.644 = s32[] parameter(0)
  %Arg_1.582 = s32[] parameter(1)
  ROOT %add.812 = s32[] add(%Arg_0.644, %Arg_1.582)
}

%region_6.187._custom_call_lowering_rule.18 (Arg_0.645: s32[], Arg_1.583: s32[]) -> s32[] {
  %Arg_0.645 = s32[] parameter(0)
  ROOT %Arg_1.583 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.18 (Arg_0.646: pred[], Arg_1.584: pred[]) -> pred[] {
  %Arg_0.646 = pred[] parameter(0)
  ROOT %Arg_1.584 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.18 (Arg_0.647: s32[], Arg_1.585: s32[]) -> s32[] {
  %Arg_0.647 = s32[] parameter(0)
  %Arg_1.585 = s32[] parameter(1)
  ROOT %add.813 = s32[] add(%Arg_0.647, %Arg_1.585)
}

%region_5.124._custom_call_lowering_rule.18 (Arg_0.648: s32[], Arg_1.586: s32[]) -> s32[] {
  %Arg_0.648 = s32[] parameter(0)
  %Arg_1.586 = s32[] parameter(1)
  ROOT %add.814 = s32[] add(%Arg_0.648, %Arg_1.586)
}

%region_0.39._custom_call_lowering_rule.18 (Arg_0.649: s32[], Arg_1.587: s32[]) -> s32[] {
  %Arg_0.649 = s32[] parameter(0)
  %Arg_1.587 = s32[] parameter(1)
  ROOT %add.815 = s32[] add(%Arg_0.649, %Arg_1.587)
}

%region_7.195._custom_call_lowering_rule.18 (Arg_0.650: s32[], Arg_1.588: s32[]) -> s32[] {
  %Arg_0.650 = s32[] parameter(0)
  ROOT %Arg_1.588 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.18 (Arg_0.651: s32[], Arg_1.589: s32[]) -> s32[] {
  %Arg_0.651 = s32[] parameter(0)
  %Arg_1.589 = s32[] parameter(1)
  ROOT %add.816 = s32[] add(%Arg_0.651, %Arg_1.589)
}

%region_11.241._custom_call_lowering_rule.18 (Arg_0.652: s32[], Arg_1.590: s32[]) -> s32[] {
  %Arg_0.652 = s32[] parameter(0)
  ROOT %Arg_1.590 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.18 (Arg_0.653: pred[], Arg_1.591: pred[]) -> pred[] {
  %Arg_0.653 = pred[] parameter(0)
  ROOT %Arg_1.591 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.18 (Arg_0.654: s32[], Arg_1.592: s32[]) -> s32[] {
  %Arg_0.654 = s32[] parameter(0)
  %Arg_1.592 = s32[] parameter(1)
  ROOT %add.817 = s32[] add(%Arg_0.654, %Arg_1.592)
}

%region_12.249._custom_call_lowering_rule.18 (Arg_0.655: s32[], Arg_1.593: s32[]) -> s32[] {
  %Arg_0.655 = s32[] parameter(0)
  ROOT %Arg_1.593 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.19 (Arg_0.656: s32[], Arg_1.594: s32[], Arg_2.240: s32[], Arg_3.50: s32[]) -> pred[] {
  %Arg_2.240 = s32[] parameter(2)
  %Arg_3.50 = s32[] parameter(3)
  %Arg_0.656 = s32[] parameter(0)
  %Arg_1.594 = s32[] parameter(1)
  ROOT %compare.1775 = pred[] compare(%Arg_0.656, %Arg_1.594), direction=LT
}

%region_2.88._custom_call_lowering_rule.19 (Arg_0.657: s32[], Arg_1.595: s32[]) -> s32[] {
  %Arg_0.657 = s32[] parameter(0)
  %Arg_1.595 = s32[] parameter(1)
  ROOT %add.818 = s32[] add(%Arg_0.657, %Arg_1.595)
}

%region_6.187._custom_call_lowering_rule.19 (Arg_0.658: s32[], Arg_1.596: s32[]) -> s32[] {
  %Arg_0.658 = s32[] parameter(0)
  ROOT %Arg_1.596 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.19 (Arg_0.659: pred[], Arg_1.597: pred[]) -> pred[] {
  %Arg_0.659 = pred[] parameter(0)
  ROOT %Arg_1.597 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.19 (Arg_0.660: s32[], Arg_1.598: s32[]) -> s32[] {
  %Arg_0.660 = s32[] parameter(0)
  %Arg_1.598 = s32[] parameter(1)
  ROOT %add.819 = s32[] add(%Arg_0.660, %Arg_1.598)
}

%region_5.124._custom_call_lowering_rule.19 (Arg_0.661: s32[], Arg_1.599: s32[]) -> s32[] {
  %Arg_0.661 = s32[] parameter(0)
  %Arg_1.599 = s32[] parameter(1)
  ROOT %add.820 = s32[] add(%Arg_0.661, %Arg_1.599)
}

%region_0.39._custom_call_lowering_rule.19 (Arg_0.662: s32[], Arg_1.600: s32[]) -> s32[] {
  %Arg_0.662 = s32[] parameter(0)
  %Arg_1.600 = s32[] parameter(1)
  ROOT %add.821 = s32[] add(%Arg_0.662, %Arg_1.600)
}

%region_7.195._custom_call_lowering_rule.19 (Arg_0.663: s32[], Arg_1.601: s32[]) -> s32[] {
  %Arg_0.663 = s32[] parameter(0)
  ROOT %Arg_1.601 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.19 (Arg_0.664: s32[], Arg_1.602: s32[]) -> s32[] {
  %Arg_0.664 = s32[] parameter(0)
  %Arg_1.602 = s32[] parameter(1)
  ROOT %add.822 = s32[] add(%Arg_0.664, %Arg_1.602)
}

%region_11.241._custom_call_lowering_rule.19 (Arg_0.665: s32[], Arg_1.603: s32[]) -> s32[] {
  %Arg_0.665 = s32[] parameter(0)
  ROOT %Arg_1.603 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.19 (Arg_0.666: pred[], Arg_1.604: pred[]) -> pred[] {
  %Arg_0.666 = pred[] parameter(0)
  ROOT %Arg_1.604 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.19 (Arg_0.667: s32[], Arg_1.605: s32[]) -> s32[] {
  %Arg_0.667 = s32[] parameter(0)
  %Arg_1.605 = s32[] parameter(1)
  ROOT %add.823 = s32[] add(%Arg_0.667, %Arg_1.605)
}

%region_12.249._custom_call_lowering_rule.19 (Arg_0.668: s32[], Arg_1.606: s32[]) -> s32[] {
  %Arg_0.668 = s32[] parameter(0)
  ROOT %Arg_1.606 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.20 (Arg_0.669: s32[], Arg_1.607: s32[], Arg_2.241: s32[], Arg_3.51: s32[]) -> pred[] {
  %Arg_2.241 = s32[] parameter(2)
  %Arg_3.51 = s32[] parameter(3)
  %Arg_0.669 = s32[] parameter(0)
  %Arg_1.607 = s32[] parameter(1)
  ROOT %compare.1777 = pred[] compare(%Arg_0.669, %Arg_1.607), direction=LT
}

%region_2.88._custom_call_lowering_rule.20 (Arg_0.670: s32[], Arg_1.608: s32[]) -> s32[] {
  %Arg_0.670 = s32[] parameter(0)
  %Arg_1.608 = s32[] parameter(1)
  ROOT %add.824 = s32[] add(%Arg_0.670, %Arg_1.608)
}

%region_6.187._custom_call_lowering_rule.20 (Arg_0.671: s32[], Arg_1.609: s32[]) -> s32[] {
  %Arg_0.671 = s32[] parameter(0)
  ROOT %Arg_1.609 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.20 (Arg_0.672: pred[], Arg_1.610: pred[]) -> pred[] {
  %Arg_0.672 = pred[] parameter(0)
  ROOT %Arg_1.610 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.20 (Arg_0.673: s32[], Arg_1.611: s32[]) -> s32[] {
  %Arg_0.673 = s32[] parameter(0)
  %Arg_1.611 = s32[] parameter(1)
  ROOT %add.825 = s32[] add(%Arg_0.673, %Arg_1.611)
}

%region_5.124._custom_call_lowering_rule.20 (Arg_0.674: s32[], Arg_1.612: s32[]) -> s32[] {
  %Arg_0.674 = s32[] parameter(0)
  %Arg_1.612 = s32[] parameter(1)
  ROOT %add.826 = s32[] add(%Arg_0.674, %Arg_1.612)
}

%region_0.39._custom_call_lowering_rule.20 (Arg_0.675: s32[], Arg_1.613: s32[]) -> s32[] {
  %Arg_0.675 = s32[] parameter(0)
  %Arg_1.613 = s32[] parameter(1)
  ROOT %add.827 = s32[] add(%Arg_0.675, %Arg_1.613)
}

%region_7.195._custom_call_lowering_rule.20 (Arg_0.676: s32[], Arg_1.614: s32[]) -> s32[] {
  %Arg_0.676 = s32[] parameter(0)
  ROOT %Arg_1.614 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.20 (Arg_0.677: s32[], Arg_1.615: s32[]) -> s32[] {
  %Arg_0.677 = s32[] parameter(0)
  %Arg_1.615 = s32[] parameter(1)
  ROOT %add.828 = s32[] add(%Arg_0.677, %Arg_1.615)
}

%region_11.241._custom_call_lowering_rule.20 (Arg_0.678: s32[], Arg_1.616: s32[]) -> s32[] {
  %Arg_0.678 = s32[] parameter(0)
  ROOT %Arg_1.616 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.20 (Arg_0.679: pred[], Arg_1.617: pred[]) -> pred[] {
  %Arg_0.679 = pred[] parameter(0)
  ROOT %Arg_1.617 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.20 (Arg_0.680: s32[], Arg_1.618: s32[]) -> s32[] {
  %Arg_0.680 = s32[] parameter(0)
  %Arg_1.618 = s32[] parameter(1)
  ROOT %add.829 = s32[] add(%Arg_0.680, %Arg_1.618)
}

%region_12.249._custom_call_lowering_rule.20 (Arg_0.681: s32[], Arg_1.619: s32[]) -> s32[] {
  %Arg_0.681 = s32[] parameter(0)
  ROOT %Arg_1.619 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.21 (Arg_0.682: s32[], Arg_1.620: s32[], Arg_2.242: s32[], Arg_3.52: s32[]) -> pred[] {
  %Arg_2.242 = s32[] parameter(2)
  %Arg_3.52 = s32[] parameter(3)
  %Arg_0.682 = s32[] parameter(0)
  %Arg_1.620 = s32[] parameter(1)
  ROOT %compare.1778 = pred[] compare(%Arg_0.682, %Arg_1.620), direction=LT
}

%region_2.88._custom_call_lowering_rule.21 (Arg_0.683: s32[], Arg_1.621: s32[]) -> s32[] {
  %Arg_0.683 = s32[] parameter(0)
  %Arg_1.621 = s32[] parameter(1)
  ROOT %add.830 = s32[] add(%Arg_0.683, %Arg_1.621)
}

%region_6.187._custom_call_lowering_rule.21 (Arg_0.684: s32[], Arg_1.622: s32[]) -> s32[] {
  %Arg_0.684 = s32[] parameter(0)
  ROOT %Arg_1.622 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.21 (Arg_0.685: pred[], Arg_1.623: pred[]) -> pred[] {
  %Arg_0.685 = pred[] parameter(0)
  ROOT %Arg_1.623 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.21 (Arg_0.686: s32[], Arg_1.624: s32[]) -> s32[] {
  %Arg_0.686 = s32[] parameter(0)
  %Arg_1.624 = s32[] parameter(1)
  ROOT %add.831 = s32[] add(%Arg_0.686, %Arg_1.624)
}

%region_5.124._custom_call_lowering_rule.21 (Arg_0.687: s32[], Arg_1.625: s32[]) -> s32[] {
  %Arg_0.687 = s32[] parameter(0)
  %Arg_1.625 = s32[] parameter(1)
  ROOT %add.832 = s32[] add(%Arg_0.687, %Arg_1.625)
}

%region_0.39._custom_call_lowering_rule.21 (Arg_0.688: s32[], Arg_1.626: s32[]) -> s32[] {
  %Arg_0.688 = s32[] parameter(0)
  %Arg_1.626 = s32[] parameter(1)
  ROOT %add.833 = s32[] add(%Arg_0.688, %Arg_1.626)
}

%region_7.195._custom_call_lowering_rule.21 (Arg_0.689: s32[], Arg_1.627: s32[]) -> s32[] {
  %Arg_0.689 = s32[] parameter(0)
  ROOT %Arg_1.627 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.21 (Arg_0.690: s32[], Arg_1.628: s32[]) -> s32[] {
  %Arg_0.690 = s32[] parameter(0)
  %Arg_1.628 = s32[] parameter(1)
  ROOT %add.834 = s32[] add(%Arg_0.690, %Arg_1.628)
}

%region_11.241._custom_call_lowering_rule.21 (Arg_0.691: s32[], Arg_1.629: s32[]) -> s32[] {
  %Arg_0.691 = s32[] parameter(0)
  ROOT %Arg_1.629 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.21 (Arg_0.692: pred[], Arg_1.630: pred[]) -> pred[] {
  %Arg_0.692 = pred[] parameter(0)
  ROOT %Arg_1.630 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.21 (Arg_0.693: s32[], Arg_1.631: s32[]) -> s32[] {
  %Arg_0.693 = s32[] parameter(0)
  %Arg_1.631 = s32[] parameter(1)
  ROOT %add.835 = s32[] add(%Arg_0.693, %Arg_1.631)
}

%region_12.249._custom_call_lowering_rule.21 (Arg_0.694: s32[], Arg_1.632: s32[]) -> s32[] {
  %Arg_0.694 = s32[] parameter(0)
  ROOT %Arg_1.632 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.22 (Arg_0.695: s32[], Arg_1.633: s32[], Arg_2.243: s32[], Arg_3.53: s32[]) -> pred[] {
  %Arg_2.243 = s32[] parameter(2)
  %Arg_3.53 = s32[] parameter(3)
  %Arg_0.695 = s32[] parameter(0)
  %Arg_1.633 = s32[] parameter(1)
  ROOT %compare.1779 = pred[] compare(%Arg_0.695, %Arg_1.633), direction=LT
}

%region_2.88._custom_call_lowering_rule.22 (Arg_0.696: s32[], Arg_1.634: s32[]) -> s32[] {
  %Arg_0.696 = s32[] parameter(0)
  %Arg_1.634 = s32[] parameter(1)
  ROOT %add.836 = s32[] add(%Arg_0.696, %Arg_1.634)
}

%region_6.187._custom_call_lowering_rule.22 (Arg_0.697: s32[], Arg_1.635: s32[]) -> s32[] {
  %Arg_0.697 = s32[] parameter(0)
  ROOT %Arg_1.635 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.22 (Arg_0.698: pred[], Arg_1.636: pred[]) -> pred[] {
  %Arg_0.698 = pred[] parameter(0)
  ROOT %Arg_1.636 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.22 (Arg_0.699: s32[], Arg_1.637: s32[]) -> s32[] {
  %Arg_0.699 = s32[] parameter(0)
  %Arg_1.637 = s32[] parameter(1)
  ROOT %add.837 = s32[] add(%Arg_0.699, %Arg_1.637)
}

%region_5.124._custom_call_lowering_rule.22 (Arg_0.700: s32[], Arg_1.638: s32[]) -> s32[] {
  %Arg_0.700 = s32[] parameter(0)
  %Arg_1.638 = s32[] parameter(1)
  ROOT %add.838 = s32[] add(%Arg_0.700, %Arg_1.638)
}

%region_0.39._custom_call_lowering_rule.22 (Arg_0.701: s32[], Arg_1.639: s32[]) -> s32[] {
  %Arg_0.701 = s32[] parameter(0)
  %Arg_1.639 = s32[] parameter(1)
  ROOT %add.839 = s32[] add(%Arg_0.701, %Arg_1.639)
}

%region_7.195._custom_call_lowering_rule.22 (Arg_0.702: s32[], Arg_1.640: s32[]) -> s32[] {
  %Arg_0.702 = s32[] parameter(0)
  ROOT %Arg_1.640 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.22 (Arg_0.703: s32[], Arg_1.641: s32[]) -> s32[] {
  %Arg_0.703 = s32[] parameter(0)
  %Arg_1.641 = s32[] parameter(1)
  ROOT %add.840 = s32[] add(%Arg_0.703, %Arg_1.641)
}

%region_11.241._custom_call_lowering_rule.22 (Arg_0.704: s32[], Arg_1.642: s32[]) -> s32[] {
  %Arg_0.704 = s32[] parameter(0)
  ROOT %Arg_1.642 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.22 (Arg_0.705: pred[], Arg_1.643: pred[]) -> pred[] {
  %Arg_0.705 = pred[] parameter(0)
  ROOT %Arg_1.643 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.22 (Arg_0.706: s32[], Arg_1.644: s32[]) -> s32[] {
  %Arg_0.706 = s32[] parameter(0)
  %Arg_1.644 = s32[] parameter(1)
  ROOT %add.841 = s32[] add(%Arg_0.706, %Arg_1.644)
}

%region_12.249._custom_call_lowering_rule.22 (Arg_0.707: s32[], Arg_1.645: s32[]) -> s32[] {
  %Arg_0.707 = s32[] parameter(0)
  ROOT %Arg_1.645 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.23 (Arg_0.708: s32[], Arg_1.646: s32[], Arg_2.244: s32[], Arg_3.54: s32[]) -> pred[] {
  %Arg_2.244 = s32[] parameter(2)
  %Arg_3.54 = s32[] parameter(3)
  %Arg_0.708 = s32[] parameter(0)
  %Arg_1.646 = s32[] parameter(1)
  ROOT %compare.1780 = pred[] compare(%Arg_0.708, %Arg_1.646), direction=LT
}

%region_2.88._custom_call_lowering_rule.23 (Arg_0.709: s32[], Arg_1.647: s32[]) -> s32[] {
  %Arg_0.709 = s32[] parameter(0)
  %Arg_1.647 = s32[] parameter(1)
  ROOT %add.842 = s32[] add(%Arg_0.709, %Arg_1.647)
}

%region_6.187._custom_call_lowering_rule.23 (Arg_0.710: s32[], Arg_1.648: s32[]) -> s32[] {
  %Arg_0.710 = s32[] parameter(0)
  ROOT %Arg_1.648 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.23 (Arg_0.711: pred[], Arg_1.649: pred[]) -> pred[] {
  %Arg_0.711 = pred[] parameter(0)
  ROOT %Arg_1.649 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.23 (Arg_0.712: s32[], Arg_1.650: s32[]) -> s32[] {
  %Arg_0.712 = s32[] parameter(0)
  %Arg_1.650 = s32[] parameter(1)
  ROOT %add.843 = s32[] add(%Arg_0.712, %Arg_1.650)
}

%region_5.124._custom_call_lowering_rule.23 (Arg_0.713: s32[], Arg_1.651: s32[]) -> s32[] {
  %Arg_0.713 = s32[] parameter(0)
  %Arg_1.651 = s32[] parameter(1)
  ROOT %add.844 = s32[] add(%Arg_0.713, %Arg_1.651)
}

%region_0.39._custom_call_lowering_rule.23 (Arg_0.714: s32[], Arg_1.652: s32[]) -> s32[] {
  %Arg_0.714 = s32[] parameter(0)
  %Arg_1.652 = s32[] parameter(1)
  ROOT %add.845 = s32[] add(%Arg_0.714, %Arg_1.652)
}

%region_7.195._custom_call_lowering_rule.23 (Arg_0.715: s32[], Arg_1.653: s32[]) -> s32[] {
  %Arg_0.715 = s32[] parameter(0)
  ROOT %Arg_1.653 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.23 (Arg_0.716: s32[], Arg_1.654: s32[]) -> s32[] {
  %Arg_0.716 = s32[] parameter(0)
  %Arg_1.654 = s32[] parameter(1)
  ROOT %add.846 = s32[] add(%Arg_0.716, %Arg_1.654)
}

%region_11.241._custom_call_lowering_rule.23 (Arg_0.717: s32[], Arg_1.655: s32[]) -> s32[] {
  %Arg_0.717 = s32[] parameter(0)
  ROOT %Arg_1.655 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.23 (Arg_0.718: pred[], Arg_1.656: pred[]) -> pred[] {
  %Arg_0.718 = pred[] parameter(0)
  ROOT %Arg_1.656 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.23 (Arg_0.719: s32[], Arg_1.657: s32[]) -> s32[] {
  %Arg_0.719 = s32[] parameter(0)
  %Arg_1.657 = s32[] parameter(1)
  ROOT %add.847 = s32[] add(%Arg_0.719, %Arg_1.657)
}

%region_12.249._custom_call_lowering_rule.23 (Arg_0.720: s32[], Arg_1.658: s32[]) -> s32[] {
  %Arg_0.720 = s32[] parameter(0)
  ROOT %Arg_1.658 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.24 (Arg_0.721: s32[], Arg_1.659: s32[], Arg_2.245: s32[], Arg_3.55: s32[]) -> pred[] {
  %Arg_2.245 = s32[] parameter(2)
  %Arg_3.55 = s32[] parameter(3)
  %Arg_0.721 = s32[] parameter(0)
  %Arg_1.659 = s32[] parameter(1)
  ROOT %compare.1781 = pred[] compare(%Arg_0.721, %Arg_1.659), direction=LT
}

%region_2.88._custom_call_lowering_rule.24 (Arg_0.722: s32[], Arg_1.660: s32[]) -> s32[] {
  %Arg_0.722 = s32[] parameter(0)
  %Arg_1.660 = s32[] parameter(1)
  ROOT %add.848 = s32[] add(%Arg_0.722, %Arg_1.660)
}

%region_6.187._custom_call_lowering_rule.24 (Arg_0.723: s32[], Arg_1.661: s32[]) -> s32[] {
  %Arg_0.723 = s32[] parameter(0)
  ROOT %Arg_1.661 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.24 (Arg_0.724: pred[], Arg_1.662: pred[]) -> pred[] {
  %Arg_0.724 = pred[] parameter(0)
  ROOT %Arg_1.662 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.24 (Arg_0.725: s32[], Arg_1.663: s32[]) -> s32[] {
  %Arg_0.725 = s32[] parameter(0)
  %Arg_1.663 = s32[] parameter(1)
  ROOT %add.849 = s32[] add(%Arg_0.725, %Arg_1.663)
}

%region_5.124._custom_call_lowering_rule.24 (Arg_0.726: s32[], Arg_1.664: s32[]) -> s32[] {
  %Arg_0.726 = s32[] parameter(0)
  %Arg_1.664 = s32[] parameter(1)
  ROOT %add.850 = s32[] add(%Arg_0.726, %Arg_1.664)
}

%region_0.39._custom_call_lowering_rule.24 (Arg_0.727: s32[], Arg_1.665: s32[]) -> s32[] {
  %Arg_0.727 = s32[] parameter(0)
  %Arg_1.665 = s32[] parameter(1)
  ROOT %add.851 = s32[] add(%Arg_0.727, %Arg_1.665)
}

%region_7.195._custom_call_lowering_rule.24 (Arg_0.728: s32[], Arg_1.666: s32[]) -> s32[] {
  %Arg_0.728 = s32[] parameter(0)
  ROOT %Arg_1.666 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.24 (Arg_0.729: s32[], Arg_1.667: s32[]) -> s32[] {
  %Arg_0.729 = s32[] parameter(0)
  %Arg_1.667 = s32[] parameter(1)
  ROOT %add.852 = s32[] add(%Arg_0.729, %Arg_1.667)
}

%region_11.241._custom_call_lowering_rule.24 (Arg_0.730: s32[], Arg_1.668: s32[]) -> s32[] {
  %Arg_0.730 = s32[] parameter(0)
  ROOT %Arg_1.668 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.24 (Arg_0.731: pred[], Arg_1.669: pred[]) -> pred[] {
  %Arg_0.731 = pred[] parameter(0)
  ROOT %Arg_1.669 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.24 (Arg_0.732: s32[], Arg_1.670: s32[]) -> s32[] {
  %Arg_0.732 = s32[] parameter(0)
  %Arg_1.670 = s32[] parameter(1)
  ROOT %add.853 = s32[] add(%Arg_0.732, %Arg_1.670)
}

%region_12.249._custom_call_lowering_rule.24 (Arg_0.733: s32[], Arg_1.671: s32[]) -> s32[] {
  %Arg_0.733 = s32[] parameter(0)
  ROOT %Arg_1.671 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.25 (Arg_0.734: s32[], Arg_1.672: s32[], Arg_2.246: s32[], Arg_3.56: s32[]) -> pred[] {
  %Arg_2.246 = s32[] parameter(2)
  %Arg_3.56 = s32[] parameter(3)
  %Arg_0.734 = s32[] parameter(0)
  %Arg_1.672 = s32[] parameter(1)
  ROOT %compare.1782 = pred[] compare(%Arg_0.734, %Arg_1.672), direction=LT
}

%region_2.88._custom_call_lowering_rule.25 (Arg_0.735: s32[], Arg_1.673: s32[]) -> s32[] {
  %Arg_0.735 = s32[] parameter(0)
  %Arg_1.673 = s32[] parameter(1)
  ROOT %add.854 = s32[] add(%Arg_0.735, %Arg_1.673)
}

%region_6.187._custom_call_lowering_rule.25 (Arg_0.736: s32[], Arg_1.674: s32[]) -> s32[] {
  %Arg_0.736 = s32[] parameter(0)
  ROOT %Arg_1.674 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.25 (Arg_0.737: pred[], Arg_1.675: pred[]) -> pred[] {
  %Arg_0.737 = pred[] parameter(0)
  ROOT %Arg_1.675 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.25 (Arg_0.738: s32[], Arg_1.676: s32[]) -> s32[] {
  %Arg_0.738 = s32[] parameter(0)
  %Arg_1.676 = s32[] parameter(1)
  ROOT %add.855 = s32[] add(%Arg_0.738, %Arg_1.676)
}

%region_5.124._custom_call_lowering_rule.25 (Arg_0.739: s32[], Arg_1.677: s32[]) -> s32[] {
  %Arg_0.739 = s32[] parameter(0)
  %Arg_1.677 = s32[] parameter(1)
  ROOT %add.856 = s32[] add(%Arg_0.739, %Arg_1.677)
}

%region_0.39._custom_call_lowering_rule.25 (Arg_0.740: s32[], Arg_1.678: s32[]) -> s32[] {
  %Arg_0.740 = s32[] parameter(0)
  %Arg_1.678 = s32[] parameter(1)
  ROOT %add.857 = s32[] add(%Arg_0.740, %Arg_1.678)
}

%region_7.195._custom_call_lowering_rule.25 (Arg_0.741: s32[], Arg_1.679: s32[]) -> s32[] {
  %Arg_0.741 = s32[] parameter(0)
  ROOT %Arg_1.679 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.25 (Arg_0.742: s32[], Arg_1.680: s32[]) -> s32[] {
  %Arg_0.742 = s32[] parameter(0)
  %Arg_1.680 = s32[] parameter(1)
  ROOT %add.858 = s32[] add(%Arg_0.742, %Arg_1.680)
}

%region_11.241._custom_call_lowering_rule.25 (Arg_0.743: s32[], Arg_1.681: s32[]) -> s32[] {
  %Arg_0.743 = s32[] parameter(0)
  ROOT %Arg_1.681 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.25 (Arg_0.744: pred[], Arg_1.682: pred[]) -> pred[] {
  %Arg_0.744 = pred[] parameter(0)
  ROOT %Arg_1.682 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.25 (Arg_0.745: s32[], Arg_1.683: s32[]) -> s32[] {
  %Arg_0.745 = s32[] parameter(0)
  %Arg_1.683 = s32[] parameter(1)
  ROOT %add.859 = s32[] add(%Arg_0.745, %Arg_1.683)
}

%region_12.249._custom_call_lowering_rule.25 (Arg_0.746: s32[], Arg_1.684: s32[]) -> s32[] {
  %Arg_0.746 = s32[] parameter(0)
  ROOT %Arg_1.684 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.26 (Arg_0.747: s32[], Arg_1.685: s32[], Arg_2.247: s32[], Arg_3.57: s32[]) -> pred[] {
  %Arg_2.247 = s32[] parameter(2)
  %Arg_3.57 = s32[] parameter(3)
  %Arg_0.747 = s32[] parameter(0)
  %Arg_1.685 = s32[] parameter(1)
  ROOT %compare.1783 = pred[] compare(%Arg_0.747, %Arg_1.685), direction=LT
}

%region_2.88._custom_call_lowering_rule.26 (Arg_0.748: s32[], Arg_1.686: s32[]) -> s32[] {
  %Arg_0.748 = s32[] parameter(0)
  %Arg_1.686 = s32[] parameter(1)
  ROOT %add.860 = s32[] add(%Arg_0.748, %Arg_1.686)
}

%region_6.187._custom_call_lowering_rule.26 (Arg_0.749: s32[], Arg_1.687: s32[]) -> s32[] {
  %Arg_0.749 = s32[] parameter(0)
  ROOT %Arg_1.687 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.26 (Arg_0.750: pred[], Arg_1.688: pred[]) -> pred[] {
  %Arg_0.750 = pred[] parameter(0)
  ROOT %Arg_1.688 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.26 (Arg_0.751: s32[], Arg_1.689: s32[]) -> s32[] {
  %Arg_0.751 = s32[] parameter(0)
  %Arg_1.689 = s32[] parameter(1)
  ROOT %add.861 = s32[] add(%Arg_0.751, %Arg_1.689)
}

%region_5.124._custom_call_lowering_rule.26 (Arg_0.752: s32[], Arg_1.690: s32[]) -> s32[] {
  %Arg_0.752 = s32[] parameter(0)
  %Arg_1.690 = s32[] parameter(1)
  ROOT %add.862 = s32[] add(%Arg_0.752, %Arg_1.690)
}

%region_0.39._custom_call_lowering_rule.26 (Arg_0.753: s32[], Arg_1.691: s32[]) -> s32[] {
  %Arg_0.753 = s32[] parameter(0)
  %Arg_1.691 = s32[] parameter(1)
  ROOT %add.863 = s32[] add(%Arg_0.753, %Arg_1.691)
}

%region_7.195._custom_call_lowering_rule.26 (Arg_0.754: s32[], Arg_1.692: s32[]) -> s32[] {
  %Arg_0.754 = s32[] parameter(0)
  ROOT %Arg_1.692 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.26 (Arg_0.755: s32[], Arg_1.693: s32[]) -> s32[] {
  %Arg_0.755 = s32[] parameter(0)
  %Arg_1.693 = s32[] parameter(1)
  ROOT %add.864 = s32[] add(%Arg_0.755, %Arg_1.693)
}

%region_11.241._custom_call_lowering_rule.26 (Arg_0.756: s32[], Arg_1.694: s32[]) -> s32[] {
  %Arg_0.756 = s32[] parameter(0)
  ROOT %Arg_1.694 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.26 (Arg_0.757: pred[], Arg_1.695: pred[]) -> pred[] {
  %Arg_0.757 = pred[] parameter(0)
  ROOT %Arg_1.695 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.26 (Arg_0.758: s32[], Arg_1.696: s32[]) -> s32[] {
  %Arg_0.758 = s32[] parameter(0)
  %Arg_1.696 = s32[] parameter(1)
  ROOT %add.865 = s32[] add(%Arg_0.758, %Arg_1.696)
}

%region_12.249._custom_call_lowering_rule.26 (Arg_0.759: s32[], Arg_1.697: s32[]) -> s32[] {
  %Arg_0.759 = s32[] parameter(0)
  ROOT %Arg_1.697 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.27 (Arg_0.760: s32[], Arg_1.698: s32[], Arg_2.248: s32[], Arg_3.58: s32[]) -> pred[] {
  %Arg_2.248 = s32[] parameter(2)
  %Arg_3.58 = s32[] parameter(3)
  %Arg_0.760 = s32[] parameter(0)
  %Arg_1.698 = s32[] parameter(1)
  ROOT %compare.1784 = pred[] compare(%Arg_0.760, %Arg_1.698), direction=LT
}

%region_2.88._custom_call_lowering_rule.27 (Arg_0.761: s32[], Arg_1.699: s32[]) -> s32[] {
  %Arg_0.761 = s32[] parameter(0)
  %Arg_1.699 = s32[] parameter(1)
  ROOT %add.866 = s32[] add(%Arg_0.761, %Arg_1.699)
}

%region_6.187._custom_call_lowering_rule.27 (Arg_0.762: s32[], Arg_1.700: s32[]) -> s32[] {
  %Arg_0.762 = s32[] parameter(0)
  ROOT %Arg_1.700 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.27 (Arg_0.763: pred[], Arg_1.701: pred[]) -> pred[] {
  %Arg_0.763 = pred[] parameter(0)
  ROOT %Arg_1.701 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.27 (Arg_0.764: s32[], Arg_1.702: s32[]) -> s32[] {
  %Arg_0.764 = s32[] parameter(0)
  %Arg_1.702 = s32[] parameter(1)
  ROOT %add.867 = s32[] add(%Arg_0.764, %Arg_1.702)
}

%region_5.124._custom_call_lowering_rule.27 (Arg_0.765: s32[], Arg_1.703: s32[]) -> s32[] {
  %Arg_0.765 = s32[] parameter(0)
  %Arg_1.703 = s32[] parameter(1)
  ROOT %add.868 = s32[] add(%Arg_0.765, %Arg_1.703)
}

%region_0.39._custom_call_lowering_rule.27 (Arg_0.766: s32[], Arg_1.704: s32[]) -> s32[] {
  %Arg_0.766 = s32[] parameter(0)
  %Arg_1.704 = s32[] parameter(1)
  ROOT %add.869 = s32[] add(%Arg_0.766, %Arg_1.704)
}

%region_7.195._custom_call_lowering_rule.27 (Arg_0.767: s32[], Arg_1.705: s32[]) -> s32[] {
  %Arg_0.767 = s32[] parameter(0)
  ROOT %Arg_1.705 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.27 (Arg_0.768: s32[], Arg_1.706: s32[]) -> s32[] {
  %Arg_0.768 = s32[] parameter(0)
  %Arg_1.706 = s32[] parameter(1)
  ROOT %add.870 = s32[] add(%Arg_0.768, %Arg_1.706)
}

%region_11.241._custom_call_lowering_rule.27 (Arg_0.769: s32[], Arg_1.707: s32[]) -> s32[] {
  %Arg_0.769 = s32[] parameter(0)
  ROOT %Arg_1.707 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.27 (Arg_0.770: pred[], Arg_1.708: pred[]) -> pred[] {
  %Arg_0.770 = pred[] parameter(0)
  ROOT %Arg_1.708 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.27 (Arg_0.771: s32[], Arg_1.709: s32[]) -> s32[] {
  %Arg_0.771 = s32[] parameter(0)
  %Arg_1.709 = s32[] parameter(1)
  ROOT %add.871 = s32[] add(%Arg_0.771, %Arg_1.709)
}

%region_12.249._custom_call_lowering_rule.27 (Arg_0.772: s32[], Arg_1.710: s32[]) -> s32[] {
  %Arg_0.772 = s32[] parameter(0)
  ROOT %Arg_1.710 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.28 (Arg_0.773: s32[], Arg_1.711: s32[], Arg_2.249: s32[], Arg_3.59: s32[]) -> pred[] {
  %Arg_2.249 = s32[] parameter(2)
  %Arg_3.59 = s32[] parameter(3)
  %Arg_0.773 = s32[] parameter(0)
  %Arg_1.711 = s32[] parameter(1)
  ROOT %compare.1785 = pred[] compare(%Arg_0.773, %Arg_1.711), direction=LT
}

%region_2.88._custom_call_lowering_rule.28 (Arg_0.774: s32[], Arg_1.712: s32[]) -> s32[] {
  %Arg_0.774 = s32[] parameter(0)
  %Arg_1.712 = s32[] parameter(1)
  ROOT %add.872 = s32[] add(%Arg_0.774, %Arg_1.712)
}

%region_6.187._custom_call_lowering_rule.28 (Arg_0.775: s32[], Arg_1.713: s32[]) -> s32[] {
  %Arg_0.775 = s32[] parameter(0)
  ROOT %Arg_1.713 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.28 (Arg_0.776: pred[], Arg_1.714: pred[]) -> pred[] {
  %Arg_0.776 = pred[] parameter(0)
  ROOT %Arg_1.714 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.28 (Arg_0.777: s32[], Arg_1.715: s32[]) -> s32[] {
  %Arg_0.777 = s32[] parameter(0)
  %Arg_1.715 = s32[] parameter(1)
  ROOT %add.873 = s32[] add(%Arg_0.777, %Arg_1.715)
}

%region_5.124._custom_call_lowering_rule.28 (Arg_0.778: s32[], Arg_1.716: s32[]) -> s32[] {
  %Arg_0.778 = s32[] parameter(0)
  %Arg_1.716 = s32[] parameter(1)
  ROOT %add.874 = s32[] add(%Arg_0.778, %Arg_1.716)
}

%region_0.39._custom_call_lowering_rule.28 (Arg_0.779: s32[], Arg_1.717: s32[]) -> s32[] {
  %Arg_0.779 = s32[] parameter(0)
  %Arg_1.717 = s32[] parameter(1)
  ROOT %add.875 = s32[] add(%Arg_0.779, %Arg_1.717)
}

%region_7.195._custom_call_lowering_rule.28 (Arg_0.780: s32[], Arg_1.718: s32[]) -> s32[] {
  %Arg_0.780 = s32[] parameter(0)
  ROOT %Arg_1.718 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.28 (Arg_0.781: s32[], Arg_1.719: s32[]) -> s32[] {
  %Arg_0.781 = s32[] parameter(0)
  %Arg_1.719 = s32[] parameter(1)
  ROOT %add.876 = s32[] add(%Arg_0.781, %Arg_1.719)
}

%region_11.241._custom_call_lowering_rule.28 (Arg_0.782: s32[], Arg_1.720: s32[]) -> s32[] {
  %Arg_0.782 = s32[] parameter(0)
  ROOT %Arg_1.720 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.28 (Arg_0.783: pred[], Arg_1.721: pred[]) -> pred[] {
  %Arg_0.783 = pred[] parameter(0)
  ROOT %Arg_1.721 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.28 (Arg_0.784: s32[], Arg_1.722: s32[]) -> s32[] {
  %Arg_0.784 = s32[] parameter(0)
  %Arg_1.722 = s32[] parameter(1)
  ROOT %add.877 = s32[] add(%Arg_0.784, %Arg_1.722)
}

%region_12.249._custom_call_lowering_rule.28 (Arg_0.785: s32[], Arg_1.723: s32[]) -> s32[] {
  %Arg_0.785 = s32[] parameter(0)
  ROOT %Arg_1.723 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.29 (Arg_0.786: s32[], Arg_1.724: s32[], Arg_2.250: s32[], Arg_3.60: s32[]) -> pred[] {
  %Arg_2.250 = s32[] parameter(2)
  %Arg_3.60 = s32[] parameter(3)
  %Arg_0.786 = s32[] parameter(0)
  %Arg_1.724 = s32[] parameter(1)
  ROOT %compare.1786 = pred[] compare(%Arg_0.786, %Arg_1.724), direction=LT
}

%region_2.88._custom_call_lowering_rule.29 (Arg_0.787: s32[], Arg_1.725: s32[]) -> s32[] {
  %Arg_0.787 = s32[] parameter(0)
  %Arg_1.725 = s32[] parameter(1)
  ROOT %add.878 = s32[] add(%Arg_0.787, %Arg_1.725)
}

%region_6.187._custom_call_lowering_rule.29 (Arg_0.788: s32[], Arg_1.726: s32[]) -> s32[] {
  %Arg_0.788 = s32[] parameter(0)
  ROOT %Arg_1.726 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.29 (Arg_0.789: pred[], Arg_1.727: pred[]) -> pred[] {
  %Arg_0.789 = pred[] parameter(0)
  ROOT %Arg_1.727 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.29 (Arg_0.790: s32[], Arg_1.728: s32[]) -> s32[] {
  %Arg_0.790 = s32[] parameter(0)
  %Arg_1.728 = s32[] parameter(1)
  ROOT %add.879 = s32[] add(%Arg_0.790, %Arg_1.728)
}

%region_5.124._custom_call_lowering_rule.29 (Arg_0.791: s32[], Arg_1.729: s32[]) -> s32[] {
  %Arg_0.791 = s32[] parameter(0)
  %Arg_1.729 = s32[] parameter(1)
  ROOT %add.880 = s32[] add(%Arg_0.791, %Arg_1.729)
}

%region_0.39._custom_call_lowering_rule.29 (Arg_0.792: s32[], Arg_1.730: s32[]) -> s32[] {
  %Arg_0.792 = s32[] parameter(0)
  %Arg_1.730 = s32[] parameter(1)
  ROOT %add.881 = s32[] add(%Arg_0.792, %Arg_1.730)
}

%region_7.195._custom_call_lowering_rule.29 (Arg_0.793: s32[], Arg_1.731: s32[]) -> s32[] {
  %Arg_0.793 = s32[] parameter(0)
  ROOT %Arg_1.731 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.29 (Arg_0.794: s32[], Arg_1.732: s32[]) -> s32[] {
  %Arg_0.794 = s32[] parameter(0)
  %Arg_1.732 = s32[] parameter(1)
  ROOT %add.882 = s32[] add(%Arg_0.794, %Arg_1.732)
}

%region_11.241._custom_call_lowering_rule.29 (Arg_0.795: s32[], Arg_1.733: s32[]) -> s32[] {
  %Arg_0.795 = s32[] parameter(0)
  ROOT %Arg_1.733 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.29 (Arg_0.796: pred[], Arg_1.734: pred[]) -> pred[] {
  %Arg_0.796 = pred[] parameter(0)
  ROOT %Arg_1.734 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.29 (Arg_0.797: s32[], Arg_1.735: s32[]) -> s32[] {
  %Arg_0.797 = s32[] parameter(0)
  %Arg_1.735 = s32[] parameter(1)
  ROOT %add.883 = s32[] add(%Arg_0.797, %Arg_1.735)
}

%region_12.249._custom_call_lowering_rule.29 (Arg_0.798: s32[], Arg_1.736: s32[]) -> s32[] {
  %Arg_0.798 = s32[] parameter(0)
  ROOT %Arg_1.736 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.30 (Arg_0.799: s32[], Arg_1.737: s32[], Arg_2.251: s32[], Arg_3.61: s32[]) -> pred[] {
  %Arg_2.251 = s32[] parameter(2)
  %Arg_3.61 = s32[] parameter(3)
  %Arg_0.799 = s32[] parameter(0)
  %Arg_1.737 = s32[] parameter(1)
  ROOT %compare.1787 = pred[] compare(%Arg_0.799, %Arg_1.737), direction=LT
}

%region_2.88._custom_call_lowering_rule.30 (Arg_0.800: s32[], Arg_1.738: s32[]) -> s32[] {
  %Arg_0.800 = s32[] parameter(0)
  %Arg_1.738 = s32[] parameter(1)
  ROOT %add.884 = s32[] add(%Arg_0.800, %Arg_1.738)
}

%region_6.187._custom_call_lowering_rule.30 (Arg_0.801: s32[], Arg_1.739: s32[]) -> s32[] {
  %Arg_0.801 = s32[] parameter(0)
  ROOT %Arg_1.739 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.30 (Arg_0.802: pred[], Arg_1.740: pred[]) -> pred[] {
  %Arg_0.802 = pred[] parameter(0)
  ROOT %Arg_1.740 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.30 (Arg_0.803: s32[], Arg_1.741: s32[]) -> s32[] {
  %Arg_0.803 = s32[] parameter(0)
  %Arg_1.741 = s32[] parameter(1)
  ROOT %add.885 = s32[] add(%Arg_0.803, %Arg_1.741)
}

%region_5.124._custom_call_lowering_rule.30 (Arg_0.804: s32[], Arg_1.742: s32[]) -> s32[] {
  %Arg_0.804 = s32[] parameter(0)
  %Arg_1.742 = s32[] parameter(1)
  ROOT %add.886 = s32[] add(%Arg_0.804, %Arg_1.742)
}

%region_0.39._custom_call_lowering_rule.30 (Arg_0.805: s32[], Arg_1.743: s32[]) -> s32[] {
  %Arg_0.805 = s32[] parameter(0)
  %Arg_1.743 = s32[] parameter(1)
  ROOT %add.887 = s32[] add(%Arg_0.805, %Arg_1.743)
}

%region_7.195._custom_call_lowering_rule.30 (Arg_0.806: s32[], Arg_1.744: s32[]) -> s32[] {
  %Arg_0.806 = s32[] parameter(0)
  ROOT %Arg_1.744 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.30 (Arg_0.807: s32[], Arg_1.745: s32[]) -> s32[] {
  %Arg_0.807 = s32[] parameter(0)
  %Arg_1.745 = s32[] parameter(1)
  ROOT %add.888 = s32[] add(%Arg_0.807, %Arg_1.745)
}

%region_11.241._custom_call_lowering_rule.30 (Arg_0.808: s32[], Arg_1.746: s32[]) -> s32[] {
  %Arg_0.808 = s32[] parameter(0)
  ROOT %Arg_1.746 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.30 (Arg_0.809: pred[], Arg_1.747: pred[]) -> pred[] {
  %Arg_0.809 = pred[] parameter(0)
  ROOT %Arg_1.747 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.30 (Arg_0.810: s32[], Arg_1.748: s32[]) -> s32[] {
  %Arg_0.810 = s32[] parameter(0)
  %Arg_1.748 = s32[] parameter(1)
  ROOT %add.889 = s32[] add(%Arg_0.810, %Arg_1.748)
}

%region_12.249._custom_call_lowering_rule.30 (Arg_0.811: s32[], Arg_1.749: s32[]) -> s32[] {
  %Arg_0.811 = s32[] parameter(0)
  ROOT %Arg_1.749 = s32[] parameter(1)
}

%region_1.75._custom_call_lowering_rule.31 (Arg_0.812: s32[], Arg_1.750: s32[], Arg_2.252: s32[], Arg_3.62: s32[]) -> pred[] {
  %Arg_2.252 = s32[] parameter(2)
  %Arg_3.62 = s32[] parameter(3)
  %Arg_0.812 = s32[] parameter(0)
  %Arg_1.750 = s32[] parameter(1)
  ROOT %compare.1789 = pred[] compare(%Arg_0.812, %Arg_1.750), direction=LT
}

%region_2.88._custom_call_lowering_rule.31 (Arg_0.813: s32[], Arg_1.751: s32[]) -> s32[] {
  %Arg_0.813 = s32[] parameter(0)
  %Arg_1.751 = s32[] parameter(1)
  ROOT %add.890 = s32[] add(%Arg_0.813, %Arg_1.751)
}

%region_6.187._custom_call_lowering_rule.31 (Arg_0.814: s32[], Arg_1.752: s32[]) -> s32[] {
  %Arg_0.814 = s32[] parameter(0)
  ROOT %Arg_1.752 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.31 (Arg_0.815: pred[], Arg_1.753: pred[]) -> pred[] {
  %Arg_0.815 = pred[] parameter(0)
  ROOT %Arg_1.753 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.31 (Arg_0.816: s32[], Arg_1.754: s32[]) -> s32[] {
  %Arg_0.816 = s32[] parameter(0)
  %Arg_1.754 = s32[] parameter(1)
  ROOT %add.891 = s32[] add(%Arg_0.816, %Arg_1.754)
}

%region_5.124._custom_call_lowering_rule.31 (Arg_0.817: s32[], Arg_1.755: s32[]) -> s32[] {
  %Arg_0.817 = s32[] parameter(0)
  %Arg_1.755 = s32[] parameter(1)
  ROOT %add.892 = s32[] add(%Arg_0.817, %Arg_1.755)
}

%region_0.39._custom_call_lowering_rule.31 (Arg_0.818: s32[], Arg_1.756: s32[]) -> s32[] {
  %Arg_0.818 = s32[] parameter(0)
  %Arg_1.756 = s32[] parameter(1)
  ROOT %add.893 = s32[] add(%Arg_0.818, %Arg_1.756)
}

%region_7.195._custom_call_lowering_rule.31 (Arg_0.819: s32[], Arg_1.757: s32[]) -> s32[] {
  %Arg_0.819 = s32[] parameter(0)
  ROOT %Arg_1.757 = s32[] parameter(1)
}

%region_8.211._custom_call_lowering_rule.31 (Arg_0.820: s32[], Arg_1.758: s32[]) -> s32[] {
  %Arg_0.820 = s32[] parameter(0)
  %Arg_1.758 = s32[] parameter(1)
  ROOT %add.894 = s32[] add(%Arg_0.820, %Arg_1.758)
}

%region_11.241._custom_call_lowering_rule.31 (Arg_0.821: s32[], Arg_1.759: s32[]) -> s32[] {
  %Arg_0.821 = s32[] parameter(0)
  ROOT %Arg_1.759 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.31 (Arg_0.822: pred[], Arg_1.760: pred[]) -> pred[] {
  %Arg_0.822 = pred[] parameter(0)
  ROOT %Arg_1.760 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.31 (Arg_0.823: s32[], Arg_1.761: s32[]) -> s32[] {
  %Arg_0.823 = s32[] parameter(0)
  %Arg_1.761 = s32[] parameter(1)
  ROOT %add.895 = s32[] add(%Arg_0.823, %Arg_1.761)
}

%region_12.249._custom_call_lowering_rule.31 (Arg_0.824: s32[], Arg_1.762: s32[]) -> s32[] {
  %Arg_0.824 = s32[] parameter(0)
  ROOT %Arg_1.762 = s32[] parameter(1)
}

%region_1.78._custom_call_lowering_rule (Arg_0.827: s32[], Arg_1.765: s32[], Arg_2.253: s32[], Arg_3.76: s32[]) -> pred[] {
  %Arg_2.253 = s32[] parameter(2)
  %Arg_3.76 = s32[] parameter(3)
  %Arg_0.827 = s32[] parameter(0)
  %Arg_1.765 = s32[] parameter(1)
  ROOT %compare.1791 = pred[] compare(%Arg_0.827, %Arg_1.765), direction=LT
}

%region_2.91._custom_call_lowering_rule (Arg_0.828: s32[], Arg_1.766: s32[]) -> s32[] {
  %Arg_0.828 = s32[] parameter(0)
  %Arg_1.766 = s32[] parameter(1)
  ROOT %add.898 = s32[] add(%Arg_0.828, %Arg_1.766)
}

%region_6.190._custom_call_lowering_rule (Arg_0.829: s32[], Arg_1.767: s32[]) -> s32[] {
  %Arg_0.829 = s32[] parameter(0)
  ROOT %Arg_1.767 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule (Arg_0.830: pred[], Arg_1.768: pred[]) -> pred[] {
  %Arg_0.830 = pred[] parameter(0)
  ROOT %Arg_1.768 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule (Arg_0.831: s32[], Arg_1.769: s32[]) -> s32[] {
  %Arg_0.831 = s32[] parameter(0)
  %Arg_1.769 = s32[] parameter(1)
  ROOT %add.899 = s32[] add(%Arg_0.831, %Arg_1.769)
}

%region_5.127._custom_call_lowering_rule (Arg_0.832: s32[], Arg_1.770: s32[]) -> s32[] {
  %Arg_0.832 = s32[] parameter(0)
  %Arg_1.770 = s32[] parameter(1)
  ROOT %add.900 = s32[] add(%Arg_0.832, %Arg_1.770)
}

%region_8.214._custom_call_lowering_rule (Arg_0.835: s32[], Arg_1.773: s32[]) -> s32[] {
  %Arg_0.835 = s32[] parameter(0)
  %Arg_1.773 = s32[] parameter(1)
  ROOT %add.902 = s32[] add(%Arg_0.835, %Arg_1.773)
}

%region_11.244._custom_call_lowering_rule (Arg_0.836: s32[], Arg_1.774: s32[]) -> s32[] {
  %Arg_0.836 = s32[] parameter(0)
  ROOT %Arg_1.774 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule (Arg_0.837: pred[], Arg_1.775: pred[]) -> pred[] {
  %Arg_0.837 = pred[] parameter(0)
  ROOT %Arg_1.775 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule (Arg_0.838: s32[], Arg_1.776: s32[]) -> s32[] {
  %Arg_0.838 = s32[] parameter(0)
  %Arg_1.776 = s32[] parameter(1)
  ROOT %add.903 = s32[] add(%Arg_0.838, %Arg_1.776)
}

%region_1.78._custom_call_lowering_rule.1 (Arg_0.840: s32[], Arg_1.778: s32[], Arg_2.254: s32[], Arg_3.63: s32[]) -> pred[] {
  %Arg_2.254 = s32[] parameter(2)
  %Arg_3.63 = s32[] parameter(3)
  %Arg_0.840 = s32[] parameter(0)
  %Arg_1.778 = s32[] parameter(1)
  ROOT %compare.1792 = pred[] compare(%Arg_0.840, %Arg_1.778), direction=LT
}

%region_2.91._custom_call_lowering_rule.1 (Arg_0.841: s32[], Arg_1.779: s32[]) -> s32[] {
  %Arg_0.841 = s32[] parameter(0)
  %Arg_1.779 = s32[] parameter(1)
  ROOT %add.904 = s32[] add(%Arg_0.841, %Arg_1.779)
}

%region_6.190._custom_call_lowering_rule.1 (Arg_0.842: s32[], Arg_1.780: s32[]) -> s32[] {
  %Arg_0.842 = s32[] parameter(0)
  ROOT %Arg_1.780 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.1 (Arg_0.843: pred[], Arg_1.781: pred[]) -> pred[] {
  %Arg_0.843 = pred[] parameter(0)
  ROOT %Arg_1.781 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.1 (Arg_0.844: s32[], Arg_1.782: s32[]) -> s32[] {
  %Arg_0.844 = s32[] parameter(0)
  %Arg_1.782 = s32[] parameter(1)
  ROOT %add.905 = s32[] add(%Arg_0.844, %Arg_1.782)
}

%region_5.127._custom_call_lowering_rule.1 (Arg_0.845: s32[], Arg_1.783: s32[]) -> s32[] {
  %Arg_0.845 = s32[] parameter(0)
  %Arg_1.783 = s32[] parameter(1)
  ROOT %add.906 = s32[] add(%Arg_0.845, %Arg_1.783)
}

%region_8.214._custom_call_lowering_rule.1 (Arg_0.848: s32[], Arg_1.786: s32[]) -> s32[] {
  %Arg_0.848 = s32[] parameter(0)
  %Arg_1.786 = s32[] parameter(1)
  ROOT %add.908 = s32[] add(%Arg_0.848, %Arg_1.786)
}

%region_11.244._custom_call_lowering_rule.1 (Arg_0.849: s32[], Arg_1.787: s32[]) -> s32[] {
  %Arg_0.849 = s32[] parameter(0)
  ROOT %Arg_1.787 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.1 (Arg_0.850: pred[], Arg_1.788: pred[]) -> pred[] {
  %Arg_0.850 = pred[] parameter(0)
  ROOT %Arg_1.788 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.1 (Arg_0.851: s32[], Arg_1.789: s32[]) -> s32[] {
  %Arg_0.851 = s32[] parameter(0)
  %Arg_1.789 = s32[] parameter(1)
  ROOT %add.909 = s32[] add(%Arg_0.851, %Arg_1.789)
}

%region_1.78._custom_call_lowering_rule.2 (Arg_0.853: s32[], Arg_1.791: s32[], Arg_2.255: s32[], Arg_3.64: s32[]) -> pred[] {
  %Arg_2.255 = s32[] parameter(2)
  %Arg_3.64 = s32[] parameter(3)
  %Arg_0.853 = s32[] parameter(0)
  %Arg_1.791 = s32[] parameter(1)
  ROOT %compare.1793 = pred[] compare(%Arg_0.853, %Arg_1.791), direction=LT
}

%region_2.91._custom_call_lowering_rule.2 (Arg_0.854: s32[], Arg_1.792: s32[]) -> s32[] {
  %Arg_0.854 = s32[] parameter(0)
  %Arg_1.792 = s32[] parameter(1)
  ROOT %add.910 = s32[] add(%Arg_0.854, %Arg_1.792)
}

%region_6.190._custom_call_lowering_rule.2 (Arg_0.855: s32[], Arg_1.793: s32[]) -> s32[] {
  %Arg_0.855 = s32[] parameter(0)
  ROOT %Arg_1.793 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.2 (Arg_0.856: pred[], Arg_1.794: pred[]) -> pred[] {
  %Arg_0.856 = pred[] parameter(0)
  ROOT %Arg_1.794 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.2 (Arg_0.857: s32[], Arg_1.795: s32[]) -> s32[] {
  %Arg_0.857 = s32[] parameter(0)
  %Arg_1.795 = s32[] parameter(1)
  ROOT %add.911 = s32[] add(%Arg_0.857, %Arg_1.795)
}

%region_5.127._custom_call_lowering_rule.2 (Arg_0.858: s32[], Arg_1.796: s32[]) -> s32[] {
  %Arg_0.858 = s32[] parameter(0)
  %Arg_1.796 = s32[] parameter(1)
  ROOT %add.912 = s32[] add(%Arg_0.858, %Arg_1.796)
}

%region_8.214._custom_call_lowering_rule.2 (Arg_0.861: s32[], Arg_1.799: s32[]) -> s32[] {
  %Arg_0.861 = s32[] parameter(0)
  %Arg_1.799 = s32[] parameter(1)
  ROOT %add.914 = s32[] add(%Arg_0.861, %Arg_1.799)
}

%region_11.244._custom_call_lowering_rule.2 (Arg_0.862: s32[], Arg_1.800: s32[]) -> s32[] {
  %Arg_0.862 = s32[] parameter(0)
  ROOT %Arg_1.800 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.2 (Arg_0.863: pred[], Arg_1.801: pred[]) -> pred[] {
  %Arg_0.863 = pred[] parameter(0)
  ROOT %Arg_1.801 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.2 (Arg_0.864: s32[], Arg_1.802: s32[]) -> s32[] {
  %Arg_0.864 = s32[] parameter(0)
  %Arg_1.802 = s32[] parameter(1)
  ROOT %add.915 = s32[] add(%Arg_0.864, %Arg_1.802)
}

%region_1.78._custom_call_lowering_rule.3 (Arg_0.866: s32[], Arg_1.804: s32[], Arg_2.256: s32[], Arg_3.65: s32[]) -> pred[] {
  %Arg_2.256 = s32[] parameter(2)
  %Arg_3.65 = s32[] parameter(3)
  %Arg_0.866 = s32[] parameter(0)
  %Arg_1.804 = s32[] parameter(1)
  ROOT %compare.1794 = pred[] compare(%Arg_0.866, %Arg_1.804), direction=LT
}

%region_2.91._custom_call_lowering_rule.3 (Arg_0.867: s32[], Arg_1.805: s32[]) -> s32[] {
  %Arg_0.867 = s32[] parameter(0)
  %Arg_1.805 = s32[] parameter(1)
  ROOT %add.916 = s32[] add(%Arg_0.867, %Arg_1.805)
}

%region_6.190._custom_call_lowering_rule.3 (Arg_0.868: s32[], Arg_1.806: s32[]) -> s32[] {
  %Arg_0.868 = s32[] parameter(0)
  ROOT %Arg_1.806 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.3 (Arg_0.869: pred[], Arg_1.807: pred[]) -> pred[] {
  %Arg_0.869 = pred[] parameter(0)
  ROOT %Arg_1.807 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.3 (Arg_0.870: s32[], Arg_1.808: s32[]) -> s32[] {
  %Arg_0.870 = s32[] parameter(0)
  %Arg_1.808 = s32[] parameter(1)
  ROOT %add.917 = s32[] add(%Arg_0.870, %Arg_1.808)
}

%region_5.127._custom_call_lowering_rule.3 (Arg_0.871: s32[], Arg_1.809: s32[]) -> s32[] {
  %Arg_0.871 = s32[] parameter(0)
  %Arg_1.809 = s32[] parameter(1)
  ROOT %add.918 = s32[] add(%Arg_0.871, %Arg_1.809)
}

%region_8.214._custom_call_lowering_rule.3 (Arg_0.874: s32[], Arg_1.812: s32[]) -> s32[] {
  %Arg_0.874 = s32[] parameter(0)
  %Arg_1.812 = s32[] parameter(1)
  ROOT %add.920 = s32[] add(%Arg_0.874, %Arg_1.812)
}

%region_11.244._custom_call_lowering_rule.3 (Arg_0.875: s32[], Arg_1.813: s32[]) -> s32[] {
  %Arg_0.875 = s32[] parameter(0)
  ROOT %Arg_1.813 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.3 (Arg_0.876: pred[], Arg_1.814: pred[]) -> pred[] {
  %Arg_0.876 = pred[] parameter(0)
  ROOT %Arg_1.814 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.3 (Arg_0.877: s32[], Arg_1.815: s32[]) -> s32[] {
  %Arg_0.877 = s32[] parameter(0)
  %Arg_1.815 = s32[] parameter(1)
  ROOT %add.921 = s32[] add(%Arg_0.877, %Arg_1.815)
}

%region_1.78._custom_call_lowering_rule.4 (Arg_0.879: s32[], Arg_1.817: s32[], Arg_2.257: s32[], Arg_3.66: s32[]) -> pred[] {
  %Arg_2.257 = s32[] parameter(2)
  %Arg_3.66 = s32[] parameter(3)
  %Arg_0.879 = s32[] parameter(0)
  %Arg_1.817 = s32[] parameter(1)
  ROOT %compare.1795 = pred[] compare(%Arg_0.879, %Arg_1.817), direction=LT
}

%region_2.91._custom_call_lowering_rule.4 (Arg_0.880: s32[], Arg_1.818: s32[]) -> s32[] {
  %Arg_0.880 = s32[] parameter(0)
  %Arg_1.818 = s32[] parameter(1)
  ROOT %add.922 = s32[] add(%Arg_0.880, %Arg_1.818)
}

%region_6.190._custom_call_lowering_rule.4 (Arg_0.881: s32[], Arg_1.819: s32[]) -> s32[] {
  %Arg_0.881 = s32[] parameter(0)
  ROOT %Arg_1.819 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.4 (Arg_0.882: pred[], Arg_1.820: pred[]) -> pred[] {
  %Arg_0.882 = pred[] parameter(0)
  ROOT %Arg_1.820 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.4 (Arg_0.883: s32[], Arg_1.821: s32[]) -> s32[] {
  %Arg_0.883 = s32[] parameter(0)
  %Arg_1.821 = s32[] parameter(1)
  ROOT %add.923 = s32[] add(%Arg_0.883, %Arg_1.821)
}

%region_5.127._custom_call_lowering_rule.4 (Arg_0.884: s32[], Arg_1.822: s32[]) -> s32[] {
  %Arg_0.884 = s32[] parameter(0)
  %Arg_1.822 = s32[] parameter(1)
  ROOT %add.924 = s32[] add(%Arg_0.884, %Arg_1.822)
}

%region_8.214._custom_call_lowering_rule.4 (Arg_0.887: s32[], Arg_1.825: s32[]) -> s32[] {
  %Arg_0.887 = s32[] parameter(0)
  %Arg_1.825 = s32[] parameter(1)
  ROOT %add.926 = s32[] add(%Arg_0.887, %Arg_1.825)
}

%region_11.244._custom_call_lowering_rule.4 (Arg_0.888: s32[], Arg_1.826: s32[]) -> s32[] {
  %Arg_0.888 = s32[] parameter(0)
  ROOT %Arg_1.826 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.4 (Arg_0.889: pred[], Arg_1.827: pred[]) -> pred[] {
  %Arg_0.889 = pred[] parameter(0)
  ROOT %Arg_1.827 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.4 (Arg_0.890: s32[], Arg_1.828: s32[]) -> s32[] {
  %Arg_0.890 = s32[] parameter(0)
  %Arg_1.828 = s32[] parameter(1)
  ROOT %add.927 = s32[] add(%Arg_0.890, %Arg_1.828)
}

%region_1.78._custom_call_lowering_rule.5 (Arg_0.892: s32[], Arg_1.830: s32[], Arg_2.258: s32[], Arg_3.67: s32[]) -> pred[] {
  %Arg_2.258 = s32[] parameter(2)
  %Arg_3.67 = s32[] parameter(3)
  %Arg_0.892 = s32[] parameter(0)
  %Arg_1.830 = s32[] parameter(1)
  ROOT %compare.1796 = pred[] compare(%Arg_0.892, %Arg_1.830), direction=LT
}

%region_2.91._custom_call_lowering_rule.5 (Arg_0.893: s32[], Arg_1.831: s32[]) -> s32[] {
  %Arg_0.893 = s32[] parameter(0)
  %Arg_1.831 = s32[] parameter(1)
  ROOT %add.928 = s32[] add(%Arg_0.893, %Arg_1.831)
}

%region_6.190._custom_call_lowering_rule.5 (Arg_0.894: s32[], Arg_1.832: s32[]) -> s32[] {
  %Arg_0.894 = s32[] parameter(0)
  ROOT %Arg_1.832 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.5 (Arg_0.895: pred[], Arg_1.833: pred[]) -> pred[] {
  %Arg_0.895 = pred[] parameter(0)
  ROOT %Arg_1.833 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.5 (Arg_0.896: s32[], Arg_1.834: s32[]) -> s32[] {
  %Arg_0.896 = s32[] parameter(0)
  %Arg_1.834 = s32[] parameter(1)
  ROOT %add.929 = s32[] add(%Arg_0.896, %Arg_1.834)
}

%region_5.127._custom_call_lowering_rule.5 (Arg_0.897: s32[], Arg_1.835: s32[]) -> s32[] {
  %Arg_0.897 = s32[] parameter(0)
  %Arg_1.835 = s32[] parameter(1)
  ROOT %add.930 = s32[] add(%Arg_0.897, %Arg_1.835)
}

%region_8.214._custom_call_lowering_rule.5 (Arg_0.900: s32[], Arg_1.838: s32[]) -> s32[] {
  %Arg_0.900 = s32[] parameter(0)
  %Arg_1.838 = s32[] parameter(1)
  ROOT %add.932 = s32[] add(%Arg_0.900, %Arg_1.838)
}

%region_11.244._custom_call_lowering_rule.5 (Arg_0.901: s32[], Arg_1.839: s32[]) -> s32[] {
  %Arg_0.901 = s32[] parameter(0)
  ROOT %Arg_1.839 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.5 (Arg_0.902: pred[], Arg_1.840: pred[]) -> pred[] {
  %Arg_0.902 = pred[] parameter(0)
  ROOT %Arg_1.840 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.5 (Arg_0.903: s32[], Arg_1.841: s32[]) -> s32[] {
  %Arg_0.903 = s32[] parameter(0)
  %Arg_1.841 = s32[] parameter(1)
  ROOT %add.933 = s32[] add(%Arg_0.903, %Arg_1.841)
}

%region_1.78._custom_call_lowering_rule.6 (Arg_0.905: s32[], Arg_1.843: s32[], Arg_2.259: s32[], Arg_3.68: s32[]) -> pred[] {
  %Arg_2.259 = s32[] parameter(2)
  %Arg_3.68 = s32[] parameter(3)
  %Arg_0.905 = s32[] parameter(0)
  %Arg_1.843 = s32[] parameter(1)
  ROOT %compare.1797 = pred[] compare(%Arg_0.905, %Arg_1.843), direction=LT
}

%region_2.91._custom_call_lowering_rule.6 (Arg_0.906: s32[], Arg_1.844: s32[]) -> s32[] {
  %Arg_0.906 = s32[] parameter(0)
  %Arg_1.844 = s32[] parameter(1)
  ROOT %add.934 = s32[] add(%Arg_0.906, %Arg_1.844)
}

%region_6.190._custom_call_lowering_rule.6 (Arg_0.907: s32[], Arg_1.845: s32[]) -> s32[] {
  %Arg_0.907 = s32[] parameter(0)
  ROOT %Arg_1.845 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.6 (Arg_0.908: pred[], Arg_1.846: pred[]) -> pred[] {
  %Arg_0.908 = pred[] parameter(0)
  ROOT %Arg_1.846 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.6 (Arg_0.909: s32[], Arg_1.847: s32[]) -> s32[] {
  %Arg_0.909 = s32[] parameter(0)
  %Arg_1.847 = s32[] parameter(1)
  ROOT %add.935 = s32[] add(%Arg_0.909, %Arg_1.847)
}

%region_5.127._custom_call_lowering_rule.6 (Arg_0.910: s32[], Arg_1.848: s32[]) -> s32[] {
  %Arg_0.910 = s32[] parameter(0)
  %Arg_1.848 = s32[] parameter(1)
  ROOT %add.936 = s32[] add(%Arg_0.910, %Arg_1.848)
}

%region_8.214._custom_call_lowering_rule.6 (Arg_0.913: s32[], Arg_1.851: s32[]) -> s32[] {
  %Arg_0.913 = s32[] parameter(0)
  %Arg_1.851 = s32[] parameter(1)
  ROOT %add.938 = s32[] add(%Arg_0.913, %Arg_1.851)
}

%region_11.244._custom_call_lowering_rule.6 (Arg_0.914: s32[], Arg_1.852: s32[]) -> s32[] {
  %Arg_0.914 = s32[] parameter(0)
  ROOT %Arg_1.852 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.6 (Arg_0.915: pred[], Arg_1.853: pred[]) -> pred[] {
  %Arg_0.915 = pred[] parameter(0)
  ROOT %Arg_1.853 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.6 (Arg_0.916: s32[], Arg_1.854: s32[]) -> s32[] {
  %Arg_0.916 = s32[] parameter(0)
  %Arg_1.854 = s32[] parameter(1)
  ROOT %add.939 = s32[] add(%Arg_0.916, %Arg_1.854)
}

%region_1.78._custom_call_lowering_rule.7 (Arg_0.918: s32[], Arg_1.856: s32[], Arg_2.260: s32[], Arg_3.69: s32[]) -> pred[] {
  %Arg_2.260 = s32[] parameter(2)
  %Arg_3.69 = s32[] parameter(3)
  %Arg_0.918 = s32[] parameter(0)
  %Arg_1.856 = s32[] parameter(1)
  ROOT %compare.1798 = pred[] compare(%Arg_0.918, %Arg_1.856), direction=LT
}

%region_2.91._custom_call_lowering_rule.7 (Arg_0.919: s32[], Arg_1.857: s32[]) -> s32[] {
  %Arg_0.919 = s32[] parameter(0)
  %Arg_1.857 = s32[] parameter(1)
  ROOT %add.940 = s32[] add(%Arg_0.919, %Arg_1.857)
}

%region_6.190._custom_call_lowering_rule.7 (Arg_0.920: s32[], Arg_1.858: s32[]) -> s32[] {
  %Arg_0.920 = s32[] parameter(0)
  ROOT %Arg_1.858 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.7 (Arg_0.921: pred[], Arg_1.859: pred[]) -> pred[] {
  %Arg_0.921 = pred[] parameter(0)
  ROOT %Arg_1.859 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.7 (Arg_0.922: s32[], Arg_1.860: s32[]) -> s32[] {
  %Arg_0.922 = s32[] parameter(0)
  %Arg_1.860 = s32[] parameter(1)
  ROOT %add.941 = s32[] add(%Arg_0.922, %Arg_1.860)
}

%region_5.127._custom_call_lowering_rule.7 (Arg_0.923: s32[], Arg_1.861: s32[]) -> s32[] {
  %Arg_0.923 = s32[] parameter(0)
  %Arg_1.861 = s32[] parameter(1)
  ROOT %add.942 = s32[] add(%Arg_0.923, %Arg_1.861)
}

%region_8.214._custom_call_lowering_rule.7 (Arg_0.926: s32[], Arg_1.864: s32[]) -> s32[] {
  %Arg_0.926 = s32[] parameter(0)
  %Arg_1.864 = s32[] parameter(1)
  ROOT %add.944 = s32[] add(%Arg_0.926, %Arg_1.864)
}

%region_11.244._custom_call_lowering_rule.7 (Arg_0.927: s32[], Arg_1.865: s32[]) -> s32[] {
  %Arg_0.927 = s32[] parameter(0)
  ROOT %Arg_1.865 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.7 (Arg_0.928: pred[], Arg_1.866: pred[]) -> pred[] {
  %Arg_0.928 = pred[] parameter(0)
  ROOT %Arg_1.866 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.7 (Arg_0.929: s32[], Arg_1.867: s32[]) -> s32[] {
  %Arg_0.929 = s32[] parameter(0)
  %Arg_1.867 = s32[] parameter(1)
  ROOT %add.945 = s32[] add(%Arg_0.929, %Arg_1.867)
}

%region_1.78._custom_call_lowering_rule.8 (Arg_0.931: s32[], Arg_1.869: s32[], Arg_2.261: s32[], Arg_3.70: s32[]) -> pred[] {
  %Arg_2.261 = s32[] parameter(2)
  %Arg_3.70 = s32[] parameter(3)
  %Arg_0.931 = s32[] parameter(0)
  %Arg_1.869 = s32[] parameter(1)
  ROOT %compare.1799 = pred[] compare(%Arg_0.931, %Arg_1.869), direction=LT
}

%region_2.91._custom_call_lowering_rule.8 (Arg_0.932: s32[], Arg_1.870: s32[]) -> s32[] {
  %Arg_0.932 = s32[] parameter(0)
  %Arg_1.870 = s32[] parameter(1)
  ROOT %add.946 = s32[] add(%Arg_0.932, %Arg_1.870)
}

%region_6.190._custom_call_lowering_rule.8 (Arg_0.933: s32[], Arg_1.871: s32[]) -> s32[] {
  %Arg_0.933 = s32[] parameter(0)
  ROOT %Arg_1.871 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.8 (Arg_0.934: pred[], Arg_1.872: pred[]) -> pred[] {
  %Arg_0.934 = pred[] parameter(0)
  ROOT %Arg_1.872 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.8 (Arg_0.935: s32[], Arg_1.873: s32[]) -> s32[] {
  %Arg_0.935 = s32[] parameter(0)
  %Arg_1.873 = s32[] parameter(1)
  ROOT %add.947 = s32[] add(%Arg_0.935, %Arg_1.873)
}

%region_5.127._custom_call_lowering_rule.8 (Arg_0.936: s32[], Arg_1.874: s32[]) -> s32[] {
  %Arg_0.936 = s32[] parameter(0)
  %Arg_1.874 = s32[] parameter(1)
  ROOT %add.948 = s32[] add(%Arg_0.936, %Arg_1.874)
}

%region_8.214._custom_call_lowering_rule.8 (Arg_0.939: s32[], Arg_1.877: s32[]) -> s32[] {
  %Arg_0.939 = s32[] parameter(0)
  %Arg_1.877 = s32[] parameter(1)
  ROOT %add.950 = s32[] add(%Arg_0.939, %Arg_1.877)
}

%region_11.244._custom_call_lowering_rule.8 (Arg_0.940: s32[], Arg_1.878: s32[]) -> s32[] {
  %Arg_0.940 = s32[] parameter(0)
  ROOT %Arg_1.878 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.8 (Arg_0.941: pred[], Arg_1.879: pred[]) -> pred[] {
  %Arg_0.941 = pred[] parameter(0)
  ROOT %Arg_1.879 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.8 (Arg_0.942: s32[], Arg_1.880: s32[]) -> s32[] {
  %Arg_0.942 = s32[] parameter(0)
  %Arg_1.880 = s32[] parameter(1)
  ROOT %add.951 = s32[] add(%Arg_0.942, %Arg_1.880)
}

%region_1.78._custom_call_lowering_rule.9 (Arg_0.944: s32[], Arg_1.882: s32[], Arg_2.262: s32[], Arg_3.71: s32[]) -> pred[] {
  %Arg_2.262 = s32[] parameter(2)
  %Arg_3.71 = s32[] parameter(3)
  %Arg_0.944 = s32[] parameter(0)
  %Arg_1.882 = s32[] parameter(1)
  ROOT %compare.1800 = pred[] compare(%Arg_0.944, %Arg_1.882), direction=LT
}

%region_2.91._custom_call_lowering_rule.9 (Arg_0.945: s32[], Arg_1.883: s32[]) -> s32[] {
  %Arg_0.945 = s32[] parameter(0)
  %Arg_1.883 = s32[] parameter(1)
  ROOT %add.952 = s32[] add(%Arg_0.945, %Arg_1.883)
}

%region_6.190._custom_call_lowering_rule.9 (Arg_0.946: s32[], Arg_1.884: s32[]) -> s32[] {
  %Arg_0.946 = s32[] parameter(0)
  ROOT %Arg_1.884 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.9 (Arg_0.947: pred[], Arg_1.885: pred[]) -> pred[] {
  %Arg_0.947 = pred[] parameter(0)
  ROOT %Arg_1.885 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.9 (Arg_0.948: s32[], Arg_1.886: s32[]) -> s32[] {
  %Arg_0.948 = s32[] parameter(0)
  %Arg_1.886 = s32[] parameter(1)
  ROOT %add.953 = s32[] add(%Arg_0.948, %Arg_1.886)
}

%region_5.127._custom_call_lowering_rule.9 (Arg_0.949: s32[], Arg_1.887: s32[]) -> s32[] {
  %Arg_0.949 = s32[] parameter(0)
  %Arg_1.887 = s32[] parameter(1)
  ROOT %add.954 = s32[] add(%Arg_0.949, %Arg_1.887)
}

%region_8.214._custom_call_lowering_rule.9 (Arg_0.952: s32[], Arg_1.890: s32[]) -> s32[] {
  %Arg_0.952 = s32[] parameter(0)
  %Arg_1.890 = s32[] parameter(1)
  ROOT %add.956 = s32[] add(%Arg_0.952, %Arg_1.890)
}

%region_11.244._custom_call_lowering_rule.9 (Arg_0.953: s32[], Arg_1.891: s32[]) -> s32[] {
  %Arg_0.953 = s32[] parameter(0)
  ROOT %Arg_1.891 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.9 (Arg_0.954: pred[], Arg_1.892: pred[]) -> pred[] {
  %Arg_0.954 = pred[] parameter(0)
  ROOT %Arg_1.892 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.9 (Arg_0.955: s32[], Arg_1.893: s32[]) -> s32[] {
  %Arg_0.955 = s32[] parameter(0)
  %Arg_1.893 = s32[] parameter(1)
  ROOT %add.957 = s32[] add(%Arg_0.955, %Arg_1.893)
}

%region_1.78._custom_call_lowering_rule.10 (Arg_0.957: s32[], Arg_1.895: s32[], Arg_2.263: s32[], Arg_3.72: s32[]) -> pred[] {
  %Arg_2.263 = s32[] parameter(2)
  %Arg_3.72 = s32[] parameter(3)
  %Arg_0.957 = s32[] parameter(0)
  %Arg_1.895 = s32[] parameter(1)
  ROOT %compare.1802 = pred[] compare(%Arg_0.957, %Arg_1.895), direction=LT
}

%region_2.91._custom_call_lowering_rule.10 (Arg_0.958: s32[], Arg_1.896: s32[]) -> s32[] {
  %Arg_0.958 = s32[] parameter(0)
  %Arg_1.896 = s32[] parameter(1)
  ROOT %add.958 = s32[] add(%Arg_0.958, %Arg_1.896)
}

%region_6.190._custom_call_lowering_rule.10 (Arg_0.959: s32[], Arg_1.897: s32[]) -> s32[] {
  %Arg_0.959 = s32[] parameter(0)
  ROOT %Arg_1.897 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.10 (Arg_0.960: pred[], Arg_1.898: pred[]) -> pred[] {
  %Arg_0.960 = pred[] parameter(0)
  ROOT %Arg_1.898 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.10 (Arg_0.961: s32[], Arg_1.899: s32[]) -> s32[] {
  %Arg_0.961 = s32[] parameter(0)
  %Arg_1.899 = s32[] parameter(1)
  ROOT %add.959 = s32[] add(%Arg_0.961, %Arg_1.899)
}

%region_5.127._custom_call_lowering_rule.10 (Arg_0.962: s32[], Arg_1.900: s32[]) -> s32[] {
  %Arg_0.962 = s32[] parameter(0)
  %Arg_1.900 = s32[] parameter(1)
  ROOT %add.960 = s32[] add(%Arg_0.962, %Arg_1.900)
}

%region_8.214._custom_call_lowering_rule.10 (Arg_0.965: s32[], Arg_1.903: s32[]) -> s32[] {
  %Arg_0.965 = s32[] parameter(0)
  %Arg_1.903 = s32[] parameter(1)
  ROOT %add.962 = s32[] add(%Arg_0.965, %Arg_1.903)
}

%region_11.244._custom_call_lowering_rule.10 (Arg_0.966: s32[], Arg_1.904: s32[]) -> s32[] {
  %Arg_0.966 = s32[] parameter(0)
  ROOT %Arg_1.904 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.10 (Arg_0.967: pred[], Arg_1.905: pred[]) -> pred[] {
  %Arg_0.967 = pred[] parameter(0)
  ROOT %Arg_1.905 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.10 (Arg_0.968: s32[], Arg_1.906: s32[]) -> s32[] {
  %Arg_0.968 = s32[] parameter(0)
  %Arg_1.906 = s32[] parameter(1)
  ROOT %add.963 = s32[] add(%Arg_0.968, %Arg_1.906)
}

%region_1.78._custom_call_lowering_rule.11 (Arg_0.970: s32[], Arg_1.908: s32[], Arg_2.264: s32[], Arg_3.74: s32[]) -> pred[] {
  %Arg_2.264 = s32[] parameter(2)
  %Arg_3.74 = s32[] parameter(3)
  %Arg_0.970 = s32[] parameter(0)
  %Arg_1.908 = s32[] parameter(1)
  ROOT %compare.1804 = pred[] compare(%Arg_0.970, %Arg_1.908), direction=LT
}

%region_2.91._custom_call_lowering_rule.11 (Arg_0.971: s32[], Arg_1.909: s32[]) -> s32[] {
  %Arg_0.971 = s32[] parameter(0)
  %Arg_1.909 = s32[] parameter(1)
  ROOT %add.964 = s32[] add(%Arg_0.971, %Arg_1.909)
}

%region_6.190._custom_call_lowering_rule.11 (Arg_0.972: s32[], Arg_1.910: s32[]) -> s32[] {
  %Arg_0.972 = s32[] parameter(0)
  ROOT %Arg_1.910 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.11 (Arg_0.973: pred[], Arg_1.911: pred[]) -> pred[] {
  %Arg_0.973 = pred[] parameter(0)
  ROOT %Arg_1.911 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.11 (Arg_0.974: s32[], Arg_1.912: s32[]) -> s32[] {
  %Arg_0.974 = s32[] parameter(0)
  %Arg_1.912 = s32[] parameter(1)
  ROOT %add.965 = s32[] add(%Arg_0.974, %Arg_1.912)
}

%region_5.127._custom_call_lowering_rule.11 (Arg_0.975: s32[], Arg_1.913: s32[]) -> s32[] {
  %Arg_0.975 = s32[] parameter(0)
  %Arg_1.913 = s32[] parameter(1)
  ROOT %add.966 = s32[] add(%Arg_0.975, %Arg_1.913)
}

%region_8.214._custom_call_lowering_rule.11 (Arg_0.978: s32[], Arg_1.916: s32[]) -> s32[] {
  %Arg_0.978 = s32[] parameter(0)
  %Arg_1.916 = s32[] parameter(1)
  ROOT %add.968 = s32[] add(%Arg_0.978, %Arg_1.916)
}

%region_11.244._custom_call_lowering_rule.11 (Arg_0.979: s32[], Arg_1.917: s32[]) -> s32[] {
  %Arg_0.979 = s32[] parameter(0)
  ROOT %Arg_1.917 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.11 (Arg_0.980: pred[], Arg_1.918: pred[]) -> pred[] {
  %Arg_0.980 = pred[] parameter(0)
  ROOT %Arg_1.918 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.11 (Arg_0.981: s32[], Arg_1.919: s32[]) -> s32[] {
  %Arg_0.981 = s32[] parameter(0)
  %Arg_1.919 = s32[] parameter(1)
  ROOT %add.969 = s32[] add(%Arg_0.981, %Arg_1.919)
}

%region_1.78._custom_call_lowering_rule.12 (Arg_0.983: s32[], Arg_1.921: s32[], Arg_2.265: s32[], Arg_3.75: s32[]) -> pred[] {
  %Arg_2.265 = s32[] parameter(2)
  %Arg_3.75 = s32[] parameter(3)
  %Arg_0.983 = s32[] parameter(0)
  %Arg_1.921 = s32[] parameter(1)
  ROOT %compare.1805 = pred[] compare(%Arg_0.983, %Arg_1.921), direction=LT
}

%region_2.91._custom_call_lowering_rule.12 (Arg_0.984: s32[], Arg_1.922: s32[]) -> s32[] {
  %Arg_0.984 = s32[] parameter(0)
  %Arg_1.922 = s32[] parameter(1)
  ROOT %add.970 = s32[] add(%Arg_0.984, %Arg_1.922)
}

%region_6.190._custom_call_lowering_rule.12 (Arg_0.985: s32[], Arg_1.923: s32[]) -> s32[] {
  %Arg_0.985 = s32[] parameter(0)
  ROOT %Arg_1.923 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.12 (Arg_0.986: pred[], Arg_1.924: pred[]) -> pred[] {
  %Arg_0.986 = pred[] parameter(0)
  ROOT %Arg_1.924 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.12 (Arg_0.987: s32[], Arg_1.925: s32[]) -> s32[] {
  %Arg_0.987 = s32[] parameter(0)
  %Arg_1.925 = s32[] parameter(1)
  ROOT %add.971 = s32[] add(%Arg_0.987, %Arg_1.925)
}

%region_5.127._custom_call_lowering_rule.12 (Arg_0.988: s32[], Arg_1.926: s32[]) -> s32[] {
  %Arg_0.988 = s32[] parameter(0)
  %Arg_1.926 = s32[] parameter(1)
  ROOT %add.972 = s32[] add(%Arg_0.988, %Arg_1.926)
}

%region_8.214._custom_call_lowering_rule.12 (Arg_0.991: s32[], Arg_1.929: s32[]) -> s32[] {
  %Arg_0.991 = s32[] parameter(0)
  %Arg_1.929 = s32[] parameter(1)
  ROOT %add.974 = s32[] add(%Arg_0.991, %Arg_1.929)
}

%region_11.244._custom_call_lowering_rule.12 (Arg_0.992: s32[], Arg_1.930: s32[]) -> s32[] {
  %Arg_0.992 = s32[] parameter(0)
  ROOT %Arg_1.930 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.12 (Arg_0.993: pred[], Arg_1.931: pred[]) -> pred[] {
  %Arg_0.993 = pred[] parameter(0)
  ROOT %Arg_1.931 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.12 (Arg_0.994: s32[], Arg_1.932: s32[]) -> s32[] {
  %Arg_0.994 = s32[] parameter(0)
  %Arg_1.932 = s32[] parameter(1)
  ROOT %add.975 = s32[] add(%Arg_0.994, %Arg_1.932)
}

%region_1.78._custom_call_lowering_rule.13 (Arg_0.996: s32[], Arg_1.934: s32[], Arg_2.266: s32[], Arg_3.77: s32[]) -> pred[] {
  %Arg_2.266 = s32[] parameter(2)
  %Arg_3.77 = s32[] parameter(3)
  %Arg_0.996 = s32[] parameter(0)
  %Arg_1.934 = s32[] parameter(1)
  ROOT %compare.1806 = pred[] compare(%Arg_0.996, %Arg_1.934), direction=LT
}

%region_2.91._custom_call_lowering_rule.13 (Arg_0.997: s32[], Arg_1.935: s32[]) -> s32[] {
  %Arg_0.997 = s32[] parameter(0)
  %Arg_1.935 = s32[] parameter(1)
  ROOT %add.976 = s32[] add(%Arg_0.997, %Arg_1.935)
}

%region_6.190._custom_call_lowering_rule.13 (Arg_0.998: s32[], Arg_1.936: s32[]) -> s32[] {
  %Arg_0.998 = s32[] parameter(0)
  ROOT %Arg_1.936 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.13 (Arg_0.999: pred[], Arg_1.937: pred[]) -> pred[] {
  %Arg_0.999 = pred[] parameter(0)
  ROOT %Arg_1.937 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.13 (Arg_0.1000: s32[], Arg_1.938: s32[]) -> s32[] {
  %Arg_0.1000 = s32[] parameter(0)
  %Arg_1.938 = s32[] parameter(1)
  ROOT %add.977 = s32[] add(%Arg_0.1000, %Arg_1.938)
}

%region_5.127._custom_call_lowering_rule.13 (Arg_0.1001: s32[], Arg_1.939: s32[]) -> s32[] {
  %Arg_0.1001 = s32[] parameter(0)
  %Arg_1.939 = s32[] parameter(1)
  ROOT %add.978 = s32[] add(%Arg_0.1001, %Arg_1.939)
}

%region_8.214._custom_call_lowering_rule.13 (Arg_0.1004: s32[], Arg_1.942: s32[]) -> s32[] {
  %Arg_0.1004 = s32[] parameter(0)
  %Arg_1.942 = s32[] parameter(1)
  ROOT %add.980 = s32[] add(%Arg_0.1004, %Arg_1.942)
}

%region_11.244._custom_call_lowering_rule.13 (Arg_0.1005: s32[], Arg_1.943: s32[]) -> s32[] {
  %Arg_0.1005 = s32[] parameter(0)
  ROOT %Arg_1.943 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.13 (Arg_0.1006: pred[], Arg_1.944: pred[]) -> pred[] {
  %Arg_0.1006 = pred[] parameter(0)
  ROOT %Arg_1.944 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.13 (Arg_0.1007: s32[], Arg_1.945: s32[]) -> s32[] {
  %Arg_0.1007 = s32[] parameter(0)
  %Arg_1.945 = s32[] parameter(1)
  ROOT %add.981 = s32[] add(%Arg_0.1007, %Arg_1.945)
}

%region_1.78._custom_call_lowering_rule.14 (Arg_0.1009: s32[], Arg_1.947: s32[], Arg_2.267: s32[], Arg_3.78: s32[]) -> pred[] {
  %Arg_2.267 = s32[] parameter(2)
  %Arg_3.78 = s32[] parameter(3)
  %Arg_0.1009 = s32[] parameter(0)
  %Arg_1.947 = s32[] parameter(1)
  ROOT %compare.1807 = pred[] compare(%Arg_0.1009, %Arg_1.947), direction=LT
}

%region_2.91._custom_call_lowering_rule.14 (Arg_0.1010: s32[], Arg_1.948: s32[]) -> s32[] {
  %Arg_0.1010 = s32[] parameter(0)
  %Arg_1.948 = s32[] parameter(1)
  ROOT %add.982 = s32[] add(%Arg_0.1010, %Arg_1.948)
}

%region_6.190._custom_call_lowering_rule.14 (Arg_0.1011: s32[], Arg_1.949: s32[]) -> s32[] {
  %Arg_0.1011 = s32[] parameter(0)
  ROOT %Arg_1.949 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.14 (Arg_0.1012: pred[], Arg_1.950: pred[]) -> pred[] {
  %Arg_0.1012 = pred[] parameter(0)
  ROOT %Arg_1.950 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.14 (Arg_0.1013: s32[], Arg_1.951: s32[]) -> s32[] {
  %Arg_0.1013 = s32[] parameter(0)
  %Arg_1.951 = s32[] parameter(1)
  ROOT %add.983 = s32[] add(%Arg_0.1013, %Arg_1.951)
}

%region_5.127._custom_call_lowering_rule.14 (Arg_0.1014: s32[], Arg_1.952: s32[]) -> s32[] {
  %Arg_0.1014 = s32[] parameter(0)
  %Arg_1.952 = s32[] parameter(1)
  ROOT %add.984 = s32[] add(%Arg_0.1014, %Arg_1.952)
}

%region_8.214._custom_call_lowering_rule.14 (Arg_0.1017: s32[], Arg_1.955: s32[]) -> s32[] {
  %Arg_0.1017 = s32[] parameter(0)
  %Arg_1.955 = s32[] parameter(1)
  ROOT %add.986 = s32[] add(%Arg_0.1017, %Arg_1.955)
}

%region_11.244._custom_call_lowering_rule.14 (Arg_0.1018: s32[], Arg_1.956: s32[]) -> s32[] {
  %Arg_0.1018 = s32[] parameter(0)
  ROOT %Arg_1.956 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.14 (Arg_0.1019: pred[], Arg_1.957: pred[]) -> pred[] {
  %Arg_0.1019 = pred[] parameter(0)
  ROOT %Arg_1.957 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.14 (Arg_0.1020: s32[], Arg_1.958: s32[]) -> s32[] {
  %Arg_0.1020 = s32[] parameter(0)
  %Arg_1.958 = s32[] parameter(1)
  ROOT %add.987 = s32[] add(%Arg_0.1020, %Arg_1.958)
}

%region_1.78._custom_call_lowering_rule.15 (Arg_0.1022: s32[], Arg_1.960: s32[], Arg_2.268: s32[], Arg_3.79: s32[]) -> pred[] {
  %Arg_2.268 = s32[] parameter(2)
  %Arg_3.79 = s32[] parameter(3)
  %Arg_0.1022 = s32[] parameter(0)
  %Arg_1.960 = s32[] parameter(1)
  ROOT %compare.1808 = pred[] compare(%Arg_0.1022, %Arg_1.960), direction=LT
}

%region_2.91._custom_call_lowering_rule.15 (Arg_0.1023: s32[], Arg_1.961: s32[]) -> s32[] {
  %Arg_0.1023 = s32[] parameter(0)
  %Arg_1.961 = s32[] parameter(1)
  ROOT %add.988 = s32[] add(%Arg_0.1023, %Arg_1.961)
}

%region_6.190._custom_call_lowering_rule.15 (Arg_0.1024: s32[], Arg_1.962: s32[]) -> s32[] {
  %Arg_0.1024 = s32[] parameter(0)
  ROOT %Arg_1.962 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.15 (Arg_0.1025: pred[], Arg_1.963: pred[]) -> pred[] {
  %Arg_0.1025 = pred[] parameter(0)
  ROOT %Arg_1.963 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.15 (Arg_0.1026: s32[], Arg_1.964: s32[]) -> s32[] {
  %Arg_0.1026 = s32[] parameter(0)
  %Arg_1.964 = s32[] parameter(1)
  ROOT %add.989 = s32[] add(%Arg_0.1026, %Arg_1.964)
}

%region_5.127._custom_call_lowering_rule.15 (Arg_0.1027: s32[], Arg_1.965: s32[]) -> s32[] {
  %Arg_0.1027 = s32[] parameter(0)
  %Arg_1.965 = s32[] parameter(1)
  ROOT %add.990 = s32[] add(%Arg_0.1027, %Arg_1.965)
}

%region_8.214._custom_call_lowering_rule.15 (Arg_0.1030: s32[], Arg_1.968: s32[]) -> s32[] {
  %Arg_0.1030 = s32[] parameter(0)
  %Arg_1.968 = s32[] parameter(1)
  ROOT %add.992 = s32[] add(%Arg_0.1030, %Arg_1.968)
}

%region_11.244._custom_call_lowering_rule.15 (Arg_0.1031: s32[], Arg_1.969: s32[]) -> s32[] {
  %Arg_0.1031 = s32[] parameter(0)
  ROOT %Arg_1.969 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.15 (Arg_0.1032: pred[], Arg_1.970: pred[]) -> pred[] {
  %Arg_0.1032 = pred[] parameter(0)
  ROOT %Arg_1.970 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.15 (Arg_0.1033: s32[], Arg_1.971: s32[]) -> s32[] {
  %Arg_0.1033 = s32[] parameter(0)
  %Arg_1.971 = s32[] parameter(1)
  ROOT %add.993 = s32[] add(%Arg_0.1033, %Arg_1.971)
}

%region_1.78._custom_call_lowering_rule.16 (Arg_0.1035: s32[], Arg_1.973: s32[], Arg_2.269: s32[], Arg_3.80: s32[]) -> pred[] {
  %Arg_2.269 = s32[] parameter(2)
  %Arg_3.80 = s32[] parameter(3)
  %Arg_0.1035 = s32[] parameter(0)
  %Arg_1.973 = s32[] parameter(1)
  ROOT %compare.1809 = pred[] compare(%Arg_0.1035, %Arg_1.973), direction=LT
}

%region_2.91._custom_call_lowering_rule.16 (Arg_0.1036: s32[], Arg_1.974: s32[]) -> s32[] {
  %Arg_0.1036 = s32[] parameter(0)
  %Arg_1.974 = s32[] parameter(1)
  ROOT %add.994 = s32[] add(%Arg_0.1036, %Arg_1.974)
}

%region_6.190._custom_call_lowering_rule.16 (Arg_0.1037: s32[], Arg_1.975: s32[]) -> s32[] {
  %Arg_0.1037 = s32[] parameter(0)
  ROOT %Arg_1.975 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.16 (Arg_0.1038: pred[], Arg_1.976: pred[]) -> pred[] {
  %Arg_0.1038 = pred[] parameter(0)
  ROOT %Arg_1.976 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.16 (Arg_0.1039: s32[], Arg_1.977: s32[]) -> s32[] {
  %Arg_0.1039 = s32[] parameter(0)
  %Arg_1.977 = s32[] parameter(1)
  ROOT %add.995 = s32[] add(%Arg_0.1039, %Arg_1.977)
}

%region_5.127._custom_call_lowering_rule.16 (Arg_0.1040: s32[], Arg_1.978: s32[]) -> s32[] {
  %Arg_0.1040 = s32[] parameter(0)
  %Arg_1.978 = s32[] parameter(1)
  ROOT %add.996 = s32[] add(%Arg_0.1040, %Arg_1.978)
}

%region_8.214._custom_call_lowering_rule.16 (Arg_0.1043: s32[], Arg_1.981: s32[]) -> s32[] {
  %Arg_0.1043 = s32[] parameter(0)
  %Arg_1.981 = s32[] parameter(1)
  ROOT %add.998 = s32[] add(%Arg_0.1043, %Arg_1.981)
}

%region_11.244._custom_call_lowering_rule.16 (Arg_0.1044: s32[], Arg_1.982: s32[]) -> s32[] {
  %Arg_0.1044 = s32[] parameter(0)
  ROOT %Arg_1.982 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.16 (Arg_0.1045: pred[], Arg_1.983: pred[]) -> pred[] {
  %Arg_0.1045 = pred[] parameter(0)
  ROOT %Arg_1.983 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.16 (Arg_0.1046: s32[], Arg_1.984: s32[]) -> s32[] {
  %Arg_0.1046 = s32[] parameter(0)
  %Arg_1.984 = s32[] parameter(1)
  ROOT %add.999 = s32[] add(%Arg_0.1046, %Arg_1.984)
}

%region_1.78._custom_call_lowering_rule.17 (Arg_0.1048: s32[], Arg_1.986: s32[], Arg_2.270: s32[], Arg_3.81: s32[]) -> pred[] {
  %Arg_2.270 = s32[] parameter(2)
  %Arg_3.81 = s32[] parameter(3)
  %Arg_0.1048 = s32[] parameter(0)
  %Arg_1.986 = s32[] parameter(1)
  ROOT %compare.1810 = pred[] compare(%Arg_0.1048, %Arg_1.986), direction=LT
}

%region_2.91._custom_call_lowering_rule.17 (Arg_0.1049: s32[], Arg_1.987: s32[]) -> s32[] {
  %Arg_0.1049 = s32[] parameter(0)
  %Arg_1.987 = s32[] parameter(1)
  ROOT %add.1000 = s32[] add(%Arg_0.1049, %Arg_1.987)
}

%region_6.190._custom_call_lowering_rule.17 (Arg_0.1050: s32[], Arg_1.988: s32[]) -> s32[] {
  %Arg_0.1050 = s32[] parameter(0)
  ROOT %Arg_1.988 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.17 (Arg_0.1051: pred[], Arg_1.989: pred[]) -> pred[] {
  %Arg_0.1051 = pred[] parameter(0)
  ROOT %Arg_1.989 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.17 (Arg_0.1052: s32[], Arg_1.990: s32[]) -> s32[] {
  %Arg_0.1052 = s32[] parameter(0)
  %Arg_1.990 = s32[] parameter(1)
  ROOT %add.1001 = s32[] add(%Arg_0.1052, %Arg_1.990)
}

%region_5.127._custom_call_lowering_rule.17 (Arg_0.1053: s32[], Arg_1.991: s32[]) -> s32[] {
  %Arg_0.1053 = s32[] parameter(0)
  %Arg_1.991 = s32[] parameter(1)
  ROOT %add.1002 = s32[] add(%Arg_0.1053, %Arg_1.991)
}

%region_8.214._custom_call_lowering_rule.17 (Arg_0.1057: s32[], Arg_1.994: s32[]) -> s32[] {
  %Arg_0.1057 = s32[] parameter(0)
  %Arg_1.994 = s32[] parameter(1)
  ROOT %add.1004 = s32[] add(%Arg_0.1057, %Arg_1.994)
}

%region_11.244._custom_call_lowering_rule.17 (Arg_0.1058: s32[], Arg_1.995: s32[]) -> s32[] {
  %Arg_0.1058 = s32[] parameter(0)
  ROOT %Arg_1.995 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.17 (Arg_0.1059: pred[], Arg_1.996: pred[]) -> pred[] {
  %Arg_0.1059 = pred[] parameter(0)
  ROOT %Arg_1.996 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.17 (Arg_0.1060: s32[], Arg_1.997: s32[]) -> s32[] {
  %Arg_0.1060 = s32[] parameter(0)
  %Arg_1.997 = s32[] parameter(1)
  ROOT %add.1005 = s32[] add(%Arg_0.1060, %Arg_1.997)
}

%region_1.78._custom_call_lowering_rule.18 (Arg_0.1062: s32[], Arg_1.999: s32[], Arg_2.271: s32[], Arg_3.82: s32[]) -> pred[] {
  %Arg_2.271 = s32[] parameter(2)
  %Arg_3.82 = s32[] parameter(3)
  %Arg_0.1062 = s32[] parameter(0)
  %Arg_1.999 = s32[] parameter(1)
  ROOT %compare.1811 = pred[] compare(%Arg_0.1062, %Arg_1.999), direction=LT
}

%region_2.91._custom_call_lowering_rule.18 (Arg_0.1063: s32[], Arg_1.1000: s32[]) -> s32[] {
  %Arg_0.1063 = s32[] parameter(0)
  %Arg_1.1000 = s32[] parameter(1)
  ROOT %add.1006 = s32[] add(%Arg_0.1063, %Arg_1.1000)
}

%region_6.190._custom_call_lowering_rule.18 (Arg_0.1064: s32[], Arg_1.1001: s32[]) -> s32[] {
  %Arg_0.1064 = s32[] parameter(0)
  ROOT %Arg_1.1001 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.18 (Arg_0.1065: pred[], Arg_1.1002: pred[]) -> pred[] {
  %Arg_0.1065 = pred[] parameter(0)
  ROOT %Arg_1.1002 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.18 (Arg_0.1066: s32[], Arg_1.1003: s32[]) -> s32[] {
  %Arg_0.1066 = s32[] parameter(0)
  %Arg_1.1003 = s32[] parameter(1)
  ROOT %add.1007 = s32[] add(%Arg_0.1066, %Arg_1.1003)
}

%region_5.127._custom_call_lowering_rule.18 (Arg_0.1067: s32[], Arg_1.1004: s32[]) -> s32[] {
  %Arg_0.1067 = s32[] parameter(0)
  %Arg_1.1004 = s32[] parameter(1)
  ROOT %add.1008 = s32[] add(%Arg_0.1067, %Arg_1.1004)
}

%region_8.214._custom_call_lowering_rule.18 (Arg_0.1070: s32[], Arg_1.1007: s32[]) -> s32[] {
  %Arg_0.1070 = s32[] parameter(0)
  %Arg_1.1007 = s32[] parameter(1)
  ROOT %add.1010 = s32[] add(%Arg_0.1070, %Arg_1.1007)
}

%region_11.244._custom_call_lowering_rule.18 (Arg_0.1071: s32[], Arg_1.1008: s32[]) -> s32[] {
  %Arg_0.1071 = s32[] parameter(0)
  ROOT %Arg_1.1008 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.18 (Arg_0.1072: pred[], Arg_1.1009: pred[]) -> pred[] {
  %Arg_0.1072 = pred[] parameter(0)
  ROOT %Arg_1.1009 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.18 (Arg_0.1073: s32[], Arg_1.1010: s32[]) -> s32[] {
  %Arg_0.1073 = s32[] parameter(0)
  %Arg_1.1010 = s32[] parameter(1)
  ROOT %add.1011 = s32[] add(%Arg_0.1073, %Arg_1.1010)
}

%region_1.78._custom_call_lowering_rule.19 (Arg_0.1075: s32[], Arg_1.1012: s32[], Arg_2.272: s32[], Arg_3.83: s32[]) -> pred[] {
  %Arg_2.272 = s32[] parameter(2)
  %Arg_3.83 = s32[] parameter(3)
  %Arg_0.1075 = s32[] parameter(0)
  %Arg_1.1012 = s32[] parameter(1)
  ROOT %compare.1812 = pred[] compare(%Arg_0.1075, %Arg_1.1012), direction=LT
}

%region_2.91._custom_call_lowering_rule.19 (Arg_0.1076: s32[], Arg_1.1013: s32[]) -> s32[] {
  %Arg_0.1076 = s32[] parameter(0)
  %Arg_1.1013 = s32[] parameter(1)
  ROOT %add.1012 = s32[] add(%Arg_0.1076, %Arg_1.1013)
}

%region_6.190._custom_call_lowering_rule.19 (Arg_0.1077: s32[], Arg_1.1014: s32[]) -> s32[] {
  %Arg_0.1077 = s32[] parameter(0)
  ROOT %Arg_1.1014 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.19 (Arg_0.1078: pred[], Arg_1.1015: pred[]) -> pred[] {
  %Arg_0.1078 = pred[] parameter(0)
  ROOT %Arg_1.1015 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.19 (Arg_0.1079: s32[], Arg_1.1016: s32[]) -> s32[] {
  %Arg_0.1079 = s32[] parameter(0)
  %Arg_1.1016 = s32[] parameter(1)
  ROOT %add.1013 = s32[] add(%Arg_0.1079, %Arg_1.1016)
}

%region_5.127._custom_call_lowering_rule.19 (Arg_0.1080: s32[], Arg_1.1017: s32[]) -> s32[] {
  %Arg_0.1080 = s32[] parameter(0)
  %Arg_1.1017 = s32[] parameter(1)
  ROOT %add.1014 = s32[] add(%Arg_0.1080, %Arg_1.1017)
}

%region_8.214._custom_call_lowering_rule.19 (Arg_0.1083: s32[], Arg_1.1020: s32[]) -> s32[] {
  %Arg_0.1083 = s32[] parameter(0)
  %Arg_1.1020 = s32[] parameter(1)
  ROOT %add.1016 = s32[] add(%Arg_0.1083, %Arg_1.1020)
}

%region_11.244._custom_call_lowering_rule.19 (Arg_0.1084: s32[], Arg_1.1021: s32[]) -> s32[] {
  %Arg_0.1084 = s32[] parameter(0)
  ROOT %Arg_1.1021 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.19 (Arg_0.1085: pred[], Arg_1.1022: pred[]) -> pred[] {
  %Arg_0.1085 = pred[] parameter(0)
  ROOT %Arg_1.1022 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.19 (Arg_0.1086: s32[], Arg_1.1023: s32[]) -> s32[] {
  %Arg_0.1086 = s32[] parameter(0)
  %Arg_1.1023 = s32[] parameter(1)
  ROOT %add.1017 = s32[] add(%Arg_0.1086, %Arg_1.1023)
}

%region_1.78._custom_call_lowering_rule.20 (Arg_0.1088: s32[], Arg_1.1025: s32[], Arg_2.273: s32[], Arg_3.84: s32[]) -> pred[] {
  %Arg_2.273 = s32[] parameter(2)
  %Arg_3.84 = s32[] parameter(3)
  %Arg_0.1088 = s32[] parameter(0)
  %Arg_1.1025 = s32[] parameter(1)
  ROOT %compare.1813 = pred[] compare(%Arg_0.1088, %Arg_1.1025), direction=LT
}

%region_2.91._custom_call_lowering_rule.20 (Arg_0.1089: s32[], Arg_1.1026: s32[]) -> s32[] {
  %Arg_0.1089 = s32[] parameter(0)
  %Arg_1.1026 = s32[] parameter(1)
  ROOT %add.1018 = s32[] add(%Arg_0.1089, %Arg_1.1026)
}

%region_6.190._custom_call_lowering_rule.20 (Arg_0.1090: s32[], Arg_1.1027: s32[]) -> s32[] {
  %Arg_0.1090 = s32[] parameter(0)
  ROOT %Arg_1.1027 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.20 (Arg_0.1091: pred[], Arg_1.1028: pred[]) -> pred[] {
  %Arg_0.1091 = pred[] parameter(0)
  ROOT %Arg_1.1028 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.20 (Arg_0.1092: s32[], Arg_1.1029: s32[]) -> s32[] {
  %Arg_0.1092 = s32[] parameter(0)
  %Arg_1.1029 = s32[] parameter(1)
  ROOT %add.1019 = s32[] add(%Arg_0.1092, %Arg_1.1029)
}

%region_5.127._custom_call_lowering_rule.20 (Arg_0.1094: s32[], Arg_1.1030: s32[]) -> s32[] {
  %Arg_0.1094 = s32[] parameter(0)
  %Arg_1.1030 = s32[] parameter(1)
  ROOT %add.1020 = s32[] add(%Arg_0.1094, %Arg_1.1030)
}

%region_8.214._custom_call_lowering_rule.20 (Arg_0.1097: s32[], Arg_1.1033: s32[]) -> s32[] {
  %Arg_0.1097 = s32[] parameter(0)
  %Arg_1.1033 = s32[] parameter(1)
  ROOT %add.1022 = s32[] add(%Arg_0.1097, %Arg_1.1033)
}

%region_11.244._custom_call_lowering_rule.20 (Arg_0.1098: s32[], Arg_1.1034: s32[]) -> s32[] {
  %Arg_0.1098 = s32[] parameter(0)
  ROOT %Arg_1.1034 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.20 (Arg_0.1099: pred[], Arg_1.1035: pred[]) -> pred[] {
  %Arg_0.1099 = pred[] parameter(0)
  ROOT %Arg_1.1035 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.20 (Arg_0.1101: s32[], Arg_1.1036: s32[]) -> s32[] {
  %Arg_0.1101 = s32[] parameter(0)
  %Arg_1.1036 = s32[] parameter(1)
  ROOT %add.1023 = s32[] add(%Arg_0.1101, %Arg_1.1036)
}

%region_1.78._custom_call_lowering_rule.21 (Arg_0.1103: s32[], Arg_1.1038: s32[], Arg_2.274: s32[], Arg_3.85: s32[]) -> pred[] {
  %Arg_2.274 = s32[] parameter(2)
  %Arg_3.85 = s32[] parameter(3)
  %Arg_0.1103 = s32[] parameter(0)
  %Arg_1.1038 = s32[] parameter(1)
  ROOT %compare.1814 = pred[] compare(%Arg_0.1103, %Arg_1.1038), direction=LT
}

%region_2.91._custom_call_lowering_rule.21 (Arg_0.1104: s32[], Arg_1.1039: s32[]) -> s32[] {
  %Arg_0.1104 = s32[] parameter(0)
  %Arg_1.1039 = s32[] parameter(1)
  ROOT %add.1024 = s32[] add(%Arg_0.1104, %Arg_1.1039)
}

%region_6.190._custom_call_lowering_rule.21 (Arg_0.1105: s32[], Arg_1.1040: s32[]) -> s32[] {
  %Arg_0.1105 = s32[] parameter(0)
  ROOT %Arg_1.1040 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.21 (Arg_0.1106: pred[], Arg_1.1041: pred[]) -> pred[] {
  %Arg_0.1106 = pred[] parameter(0)
  ROOT %Arg_1.1041 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.21 (Arg_0.1107: s32[], Arg_1.1042: s32[]) -> s32[] {
  %Arg_0.1107 = s32[] parameter(0)
  %Arg_1.1042 = s32[] parameter(1)
  ROOT %add.1025 = s32[] add(%Arg_0.1107, %Arg_1.1042)
}

%region_5.127._custom_call_lowering_rule.21 (Arg_0.1108: s32[], Arg_1.1043: s32[]) -> s32[] {
  %Arg_0.1108 = s32[] parameter(0)
  %Arg_1.1043 = s32[] parameter(1)
  ROOT %add.1026 = s32[] add(%Arg_0.1108, %Arg_1.1043)
}

%region_8.214._custom_call_lowering_rule.21 (Arg_0.1111: s32[], Arg_1.1046: s32[]) -> s32[] {
  %Arg_0.1111 = s32[] parameter(0)
  %Arg_1.1046 = s32[] parameter(1)
  ROOT %add.1028 = s32[] add(%Arg_0.1111, %Arg_1.1046)
}

%region_11.244._custom_call_lowering_rule.21 (Arg_0.1112: s32[], Arg_1.1047: s32[]) -> s32[] {
  %Arg_0.1112 = s32[] parameter(0)
  ROOT %Arg_1.1047 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.21 (Arg_0.1113: pred[], Arg_1.1048: pred[]) -> pred[] {
  %Arg_0.1113 = pred[] parameter(0)
  ROOT %Arg_1.1048 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.21 (Arg_0.1114: s32[], Arg_1.1049: s32[]) -> s32[] {
  %Arg_0.1114 = s32[] parameter(0)
  %Arg_1.1049 = s32[] parameter(1)
  ROOT %add.1029 = s32[] add(%Arg_0.1114, %Arg_1.1049)
}

%region_1.78._custom_call_lowering_rule.22 (Arg_0.1116: s32[], Arg_1.1051: s32[], Arg_2.275: s32[], Arg_3.86: s32[]) -> pred[] {
  %Arg_2.275 = s32[] parameter(2)
  %Arg_3.86 = s32[] parameter(3)
  %Arg_0.1116 = s32[] parameter(0)
  %Arg_1.1051 = s32[] parameter(1)
  ROOT %compare.1815 = pred[] compare(%Arg_0.1116, %Arg_1.1051), direction=LT
}

%region_2.91._custom_call_lowering_rule.22 (Arg_0.1117: s32[], Arg_1.1052: s32[]) -> s32[] {
  %Arg_0.1117 = s32[] parameter(0)
  %Arg_1.1052 = s32[] parameter(1)
  ROOT %add.1030 = s32[] add(%Arg_0.1117, %Arg_1.1052)
}

%region_6.190._custom_call_lowering_rule.22 (Arg_0.1118: s32[], Arg_1.1053: s32[]) -> s32[] {
  %Arg_0.1118 = s32[] parameter(0)
  ROOT %Arg_1.1053 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.22 (Arg_0.1119: pred[], Arg_1.1054: pred[]) -> pred[] {
  %Arg_0.1119 = pred[] parameter(0)
  ROOT %Arg_1.1054 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.22 (Arg_0.1120: s32[], Arg_1.1056: s32[]) -> s32[] {
  %Arg_0.1120 = s32[] parameter(0)
  %Arg_1.1056 = s32[] parameter(1)
  ROOT %add.1031 = s32[] add(%Arg_0.1120, %Arg_1.1056)
}

%region_5.127._custom_call_lowering_rule.22 (Arg_0.1121: s32[], Arg_1.1057: s32[]) -> s32[] {
  %Arg_0.1121 = s32[] parameter(0)
  %Arg_1.1057 = s32[] parameter(1)
  ROOT %add.1032 = s32[] add(%Arg_0.1121, %Arg_1.1057)
}

%region_8.214._custom_call_lowering_rule.22 (Arg_0.1124: s32[], Arg_1.1060: s32[]) -> s32[] {
  %Arg_0.1124 = s32[] parameter(0)
  %Arg_1.1060 = s32[] parameter(1)
  ROOT %add.1034 = s32[] add(%Arg_0.1124, %Arg_1.1060)
}

%region_11.244._custom_call_lowering_rule.22 (Arg_0.1125: s32[], Arg_1.1061: s32[]) -> s32[] {
  %Arg_0.1125 = s32[] parameter(0)
  ROOT %Arg_1.1061 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.22 (Arg_0.1126: pred[], Arg_1.1062: pred[]) -> pred[] {
  %Arg_0.1126 = pred[] parameter(0)
  ROOT %Arg_1.1062 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.22 (Arg_0.1127: s32[], Arg_1.1063: s32[]) -> s32[] {
  %Arg_0.1127 = s32[] parameter(0)
  %Arg_1.1063 = s32[] parameter(1)
  ROOT %add.1035 = s32[] add(%Arg_0.1127, %Arg_1.1063)
}

%region_1.78._custom_call_lowering_rule.23 (Arg_0.1129: s32[], Arg_1.1065: s32[], Arg_2.276: s32[], Arg_3.87: s32[]) -> pred[] {
  %Arg_2.276 = s32[] parameter(2)
  %Arg_3.87 = s32[] parameter(3)
  %Arg_0.1129 = s32[] parameter(0)
  %Arg_1.1065 = s32[] parameter(1)
  ROOT %compare.1816 = pred[] compare(%Arg_0.1129, %Arg_1.1065), direction=LT
}

%region_2.91._custom_call_lowering_rule.23 (Arg_0.1130: s32[], Arg_1.1066: s32[]) -> s32[] {
  %Arg_0.1130 = s32[] parameter(0)
  %Arg_1.1066 = s32[] parameter(1)
  ROOT %add.1036 = s32[] add(%Arg_0.1130, %Arg_1.1066)
}

%region_6.190._custom_call_lowering_rule.23 (Arg_0.1131: s32[], Arg_1.1067: s32[]) -> s32[] {
  %Arg_0.1131 = s32[] parameter(0)
  ROOT %Arg_1.1067 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.23 (Arg_0.1132: pred[], Arg_1.1068: pred[]) -> pred[] {
  %Arg_0.1132 = pred[] parameter(0)
  ROOT %Arg_1.1068 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.23 (Arg_0.1133: s32[], Arg_1.1069: s32[]) -> s32[] {
  %Arg_0.1133 = s32[] parameter(0)
  %Arg_1.1069 = s32[] parameter(1)
  ROOT %add.1037 = s32[] add(%Arg_0.1133, %Arg_1.1069)
}

%region_5.127._custom_call_lowering_rule.23 (Arg_0.1134: s32[], Arg_1.1070: s32[]) -> s32[] {
  %Arg_0.1134 = s32[] parameter(0)
  %Arg_1.1070 = s32[] parameter(1)
  ROOT %add.1038 = s32[] add(%Arg_0.1134, %Arg_1.1070)
}

%region_8.214._custom_call_lowering_rule.23 (Arg_0.1137: s32[], Arg_1.1073: s32[]) -> s32[] {
  %Arg_0.1137 = s32[] parameter(0)
  %Arg_1.1073 = s32[] parameter(1)
  ROOT %add.1040 = s32[] add(%Arg_0.1137, %Arg_1.1073)
}

%region_11.244._custom_call_lowering_rule.23 (Arg_0.1138: s32[], Arg_1.1074: s32[]) -> s32[] {
  %Arg_0.1138 = s32[] parameter(0)
  ROOT %Arg_1.1074 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.23 (Arg_0.1139: pred[], Arg_1.1075: pred[]) -> pred[] {
  %Arg_0.1139 = pred[] parameter(0)
  ROOT %Arg_1.1075 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.23 (Arg_0.1140: s32[], Arg_1.1076: s32[]) -> s32[] {
  %Arg_0.1140 = s32[] parameter(0)
  %Arg_1.1076 = s32[] parameter(1)
  ROOT %add.1041 = s32[] add(%Arg_0.1140, %Arg_1.1076)
}

%region_1.78._custom_call_lowering_rule.24 (Arg_0.1142: s32[], Arg_1.1078: s32[], Arg_2.277: s32[], Arg_3.88: s32[]) -> pred[] {
  %Arg_2.277 = s32[] parameter(2)
  %Arg_3.88 = s32[] parameter(3)
  %Arg_0.1142 = s32[] parameter(0)
  %Arg_1.1078 = s32[] parameter(1)
  ROOT %compare.1817 = pred[] compare(%Arg_0.1142, %Arg_1.1078), direction=LT
}

%region_2.91._custom_call_lowering_rule.24 (Arg_0.1143: s32[], Arg_1.1079: s32[]) -> s32[] {
  %Arg_0.1143 = s32[] parameter(0)
  %Arg_1.1079 = s32[] parameter(1)
  ROOT %add.1042 = s32[] add(%Arg_0.1143, %Arg_1.1079)
}

%region_6.190._custom_call_lowering_rule.24 (Arg_0.1144: s32[], Arg_1.1080: s32[]) -> s32[] {
  %Arg_0.1144 = s32[] parameter(0)
  ROOT %Arg_1.1080 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.24 (Arg_0.1145: pred[], Arg_1.1081: pred[]) -> pred[] {
  %Arg_0.1145 = pred[] parameter(0)
  ROOT %Arg_1.1081 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.24 (Arg_0.1146: s32[], Arg_1.1082: s32[]) -> s32[] {
  %Arg_0.1146 = s32[] parameter(0)
  %Arg_1.1082 = s32[] parameter(1)
  ROOT %add.1043 = s32[] add(%Arg_0.1146, %Arg_1.1082)
}

%region_5.127._custom_call_lowering_rule.24 (Arg_0.1147: s32[], Arg_1.1083: s32[]) -> s32[] {
  %Arg_0.1147 = s32[] parameter(0)
  %Arg_1.1083 = s32[] parameter(1)
  ROOT %add.1044 = s32[] add(%Arg_0.1147, %Arg_1.1083)
}

%region_8.214._custom_call_lowering_rule.24 (Arg_0.1150: s32[], Arg_1.1086: s32[]) -> s32[] {
  %Arg_0.1150 = s32[] parameter(0)
  %Arg_1.1086 = s32[] parameter(1)
  ROOT %add.1046 = s32[] add(%Arg_0.1150, %Arg_1.1086)
}

%region_11.244._custom_call_lowering_rule.24 (Arg_0.1151: s32[], Arg_1.1087: s32[]) -> s32[] {
  %Arg_0.1151 = s32[] parameter(0)
  ROOT %Arg_1.1087 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.24 (Arg_0.1152: pred[], Arg_1.1088: pred[]) -> pred[] {
  %Arg_0.1152 = pred[] parameter(0)
  ROOT %Arg_1.1088 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.24 (Arg_0.1153: s32[], Arg_1.1089: s32[]) -> s32[] {
  %Arg_0.1153 = s32[] parameter(0)
  %Arg_1.1089 = s32[] parameter(1)
  ROOT %add.1047 = s32[] add(%Arg_0.1153, %Arg_1.1089)
}

%region_1.78._custom_call_lowering_rule.25 (Arg_0.1155: s32[], Arg_1.1091: s32[], Arg_2.278: s32[], Arg_3.89: s32[]) -> pred[] {
  %Arg_2.278 = s32[] parameter(2)
  %Arg_3.89 = s32[] parameter(3)
  %Arg_0.1155 = s32[] parameter(0)
  %Arg_1.1091 = s32[] parameter(1)
  ROOT %compare.1818 = pred[] compare(%Arg_0.1155, %Arg_1.1091), direction=LT
}

%region_2.91._custom_call_lowering_rule.25 (Arg_0.1156: s32[], Arg_1.1092: s32[]) -> s32[] {
  %Arg_0.1156 = s32[] parameter(0)
  %Arg_1.1092 = s32[] parameter(1)
  ROOT %add.1048 = s32[] add(%Arg_0.1156, %Arg_1.1092)
}

%region_6.190._custom_call_lowering_rule.25 (Arg_0.1157: s32[], Arg_1.1093: s32[]) -> s32[] {
  %Arg_0.1157 = s32[] parameter(0)
  ROOT %Arg_1.1093 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.25 (Arg_0.1158: pred[], Arg_1.1095: pred[]) -> pred[] {
  %Arg_0.1158 = pred[] parameter(0)
  ROOT %Arg_1.1095 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.25 (Arg_0.1159: s32[], Arg_1.1096: s32[]) -> s32[] {
  %Arg_0.1159 = s32[] parameter(0)
  %Arg_1.1096 = s32[] parameter(1)
  ROOT %add.1049 = s32[] add(%Arg_0.1159, %Arg_1.1096)
}

%region_5.127._custom_call_lowering_rule.25 (Arg_0.1160: s32[], Arg_1.1097: s32[]) -> s32[] {
  %Arg_0.1160 = s32[] parameter(0)
  %Arg_1.1097 = s32[] parameter(1)
  ROOT %add.1050 = s32[] add(%Arg_0.1160, %Arg_1.1097)
}

%region_8.214._custom_call_lowering_rule.25 (Arg_0.1163: s32[], Arg_1.1100: s32[]) -> s32[] {
  %Arg_0.1163 = s32[] parameter(0)
  %Arg_1.1100 = s32[] parameter(1)
  ROOT %add.1052 = s32[] add(%Arg_0.1163, %Arg_1.1100)
}

%region_11.244._custom_call_lowering_rule.25 (Arg_0.1164: s32[], Arg_1.1102: s32[]) -> s32[] {
  %Arg_0.1164 = s32[] parameter(0)
  ROOT %Arg_1.1102 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.25 (Arg_0.1165: pred[], Arg_1.1103: pred[]) -> pred[] {
  %Arg_0.1165 = pred[] parameter(0)
  ROOT %Arg_1.1103 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.25 (Arg_0.1166: s32[], Arg_1.1104: s32[]) -> s32[] {
  %Arg_0.1166 = s32[] parameter(0)
  %Arg_1.1104 = s32[] parameter(1)
  ROOT %add.1053 = s32[] add(%Arg_0.1166, %Arg_1.1104)
}

%region_1.78._custom_call_lowering_rule.26 (Arg_0.1168: s32[], Arg_1.1106: s32[], Arg_2.279: s32[], Arg_3.90: s32[]) -> pred[] {
  %Arg_2.279 = s32[] parameter(2)
  %Arg_3.90 = s32[] parameter(3)
  %Arg_0.1168 = s32[] parameter(0)
  %Arg_1.1106 = s32[] parameter(1)
  ROOT %compare.1819 = pred[] compare(%Arg_0.1168, %Arg_1.1106), direction=LT
}

%region_2.91._custom_call_lowering_rule.26 (Arg_0.1169: s32[], Arg_1.1107: s32[]) -> s32[] {
  %Arg_0.1169 = s32[] parameter(0)
  %Arg_1.1107 = s32[] parameter(1)
  ROOT %add.1054 = s32[] add(%Arg_0.1169, %Arg_1.1107)
}

%region_6.190._custom_call_lowering_rule.26 (Arg_0.1170: s32[], Arg_1.1108: s32[]) -> s32[] {
  %Arg_0.1170 = s32[] parameter(0)
  ROOT %Arg_1.1108 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.26 (Arg_0.1171: pred[], Arg_1.1109: pred[]) -> pred[] {
  %Arg_0.1171 = pred[] parameter(0)
  ROOT %Arg_1.1109 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.26 (Arg_0.1172: s32[], Arg_1.1110: s32[]) -> s32[] {
  %Arg_0.1172 = s32[] parameter(0)
  %Arg_1.1110 = s32[] parameter(1)
  ROOT %add.1055 = s32[] add(%Arg_0.1172, %Arg_1.1110)
}

%region_5.127._custom_call_lowering_rule.26 (Arg_0.1173: s32[], Arg_1.1111: s32[]) -> s32[] {
  %Arg_0.1173 = s32[] parameter(0)
  %Arg_1.1111 = s32[] parameter(1)
  ROOT %add.1057 = s32[] add(%Arg_0.1173, %Arg_1.1111)
}

%region_8.214._custom_call_lowering_rule.26 (Arg_0.1176: s32[], Arg_1.1114: s32[]) -> s32[] {
  %Arg_0.1176 = s32[] parameter(0)
  %Arg_1.1114 = s32[] parameter(1)
  ROOT %add.1059 = s32[] add(%Arg_0.1176, %Arg_1.1114)
}

%region_11.244._custom_call_lowering_rule.26 (Arg_0.1177: s32[], Arg_1.1115: s32[]) -> s32[] {
  %Arg_0.1177 = s32[] parameter(0)
  ROOT %Arg_1.1115 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.26 (Arg_0.1178: pred[], Arg_1.1116: pred[]) -> pred[] {
  %Arg_0.1178 = pred[] parameter(0)
  ROOT %Arg_1.1116 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.26 (Arg_0.1179: s32[], Arg_1.1117: s32[]) -> s32[] {
  %Arg_0.1179 = s32[] parameter(0)
  %Arg_1.1117 = s32[] parameter(1)
  ROOT %add.1060 = s32[] add(%Arg_0.1179, %Arg_1.1117)
}

%region_1.78._custom_call_lowering_rule.27 (Arg_0.1181: s32[], Arg_1.1119: s32[], Arg_2.280: s32[], Arg_3.91: s32[]) -> pred[] {
  %Arg_2.280 = s32[] parameter(2)
  %Arg_3.91 = s32[] parameter(3)
  %Arg_0.1181 = s32[] parameter(0)
  %Arg_1.1119 = s32[] parameter(1)
  ROOT %compare.1820 = pred[] compare(%Arg_0.1181, %Arg_1.1119), direction=LT
}

%region_2.91._custom_call_lowering_rule.27 (Arg_0.1182: s32[], Arg_1.1120: s32[]) -> s32[] {
  %Arg_0.1182 = s32[] parameter(0)
  %Arg_1.1120 = s32[] parameter(1)
  ROOT %add.1062 = s32[] add(%Arg_0.1182, %Arg_1.1120)
}

%region_6.190._custom_call_lowering_rule.27 (Arg_0.1183: s32[], Arg_1.1121: s32[]) -> s32[] {
  %Arg_0.1183 = s32[] parameter(0)
  ROOT %Arg_1.1121 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.27 (Arg_0.1184: pred[], Arg_1.1122: pred[]) -> pred[] {
  %Arg_0.1184 = pred[] parameter(0)
  ROOT %Arg_1.1122 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.27 (Arg_0.1185: s32[], Arg_1.1123: s32[]) -> s32[] {
  %Arg_0.1185 = s32[] parameter(0)
  %Arg_1.1123 = s32[] parameter(1)
  ROOT %add.1063 = s32[] add(%Arg_0.1185, %Arg_1.1123)
}

%region_5.127._custom_call_lowering_rule.27 (Arg_0.1186: s32[], Arg_1.1124: s32[]) -> s32[] {
  %Arg_0.1186 = s32[] parameter(0)
  %Arg_1.1124 = s32[] parameter(1)
  ROOT %add.1064 = s32[] add(%Arg_0.1186, %Arg_1.1124)
}

%region_8.214._custom_call_lowering_rule.27 (Arg_0.1189: s32[], Arg_1.1127: s32[]) -> s32[] {
  %Arg_0.1189 = s32[] parameter(0)
  %Arg_1.1127 = s32[] parameter(1)
  ROOT %add.1066 = s32[] add(%Arg_0.1189, %Arg_1.1127)
}

%region_11.244._custom_call_lowering_rule.27 (Arg_0.1190: s32[], Arg_1.1128: s32[]) -> s32[] {
  %Arg_0.1190 = s32[] parameter(0)
  ROOT %Arg_1.1128 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.27 (Arg_0.1191: pred[], Arg_1.1129: pred[]) -> pred[] {
  %Arg_0.1191 = pred[] parameter(0)
  ROOT %Arg_1.1129 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.27 (Arg_0.1192: s32[], Arg_1.1130: s32[]) -> s32[] {
  %Arg_0.1192 = s32[] parameter(0)
  %Arg_1.1130 = s32[] parameter(1)
  ROOT %add.1067 = s32[] add(%Arg_0.1192, %Arg_1.1130)
}

%region_1.78._custom_call_lowering_rule.28 (Arg_0.1194: s32[], Arg_1.1132: s32[], Arg_2.281: s32[], Arg_3.92: s32[]) -> pred[] {
  %Arg_2.281 = s32[] parameter(2)
  %Arg_3.92 = s32[] parameter(3)
  %Arg_0.1194 = s32[] parameter(0)
  %Arg_1.1132 = s32[] parameter(1)
  ROOT %compare.1821 = pred[] compare(%Arg_0.1194, %Arg_1.1132), direction=LT
}

%region_2.91._custom_call_lowering_rule.28 (Arg_0.1195: s32[], Arg_1.1133: s32[]) -> s32[] {
  %Arg_0.1195 = s32[] parameter(0)
  %Arg_1.1133 = s32[] parameter(1)
  ROOT %add.1068 = s32[] add(%Arg_0.1195, %Arg_1.1133)
}

%region_6.190._custom_call_lowering_rule.28 (Arg_0.1196: s32[], Arg_1.1134: s32[]) -> s32[] {
  %Arg_0.1196 = s32[] parameter(0)
  ROOT %Arg_1.1134 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.28 (Arg_0.1197: pred[], Arg_1.1135: pred[]) -> pred[] {
  %Arg_0.1197 = pred[] parameter(0)
  ROOT %Arg_1.1135 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.28 (Arg_0.1198: s32[], Arg_1.1136: s32[]) -> s32[] {
  %Arg_0.1198 = s32[] parameter(0)
  %Arg_1.1136 = s32[] parameter(1)
  ROOT %add.1069 = s32[] add(%Arg_0.1198, %Arg_1.1136)
}

%region_5.127._custom_call_lowering_rule.28 (Arg_0.1199: s32[], Arg_1.1137: s32[]) -> s32[] {
  %Arg_0.1199 = s32[] parameter(0)
  %Arg_1.1137 = s32[] parameter(1)
  ROOT %add.1070 = s32[] add(%Arg_0.1199, %Arg_1.1137)
}

%region_8.214._custom_call_lowering_rule.28 (Arg_0.1202: s32[], Arg_1.1140: s32[]) -> s32[] {
  %Arg_0.1202 = s32[] parameter(0)
  %Arg_1.1140 = s32[] parameter(1)
  ROOT %add.1072 = s32[] add(%Arg_0.1202, %Arg_1.1140)
}

%region_11.244._custom_call_lowering_rule.28 (Arg_0.1203: s32[], Arg_1.1141: s32[]) -> s32[] {
  %Arg_0.1203 = s32[] parameter(0)
  ROOT %Arg_1.1141 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.28 (Arg_0.1204: pred[], Arg_1.1142: pred[]) -> pred[] {
  %Arg_0.1204 = pred[] parameter(0)
  ROOT %Arg_1.1142 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.28 (Arg_0.1205: s32[], Arg_1.1143: s32[]) -> s32[] {
  %Arg_0.1205 = s32[] parameter(0)
  %Arg_1.1143 = s32[] parameter(1)
  ROOT %add.1073 = s32[] add(%Arg_0.1205, %Arg_1.1143)
}

%region_1.78._custom_call_lowering_rule.29 (Arg_0.1207: s32[], Arg_1.1145: s32[], Arg_2.282: s32[], Arg_3.93: s32[]) -> pred[] {
  %Arg_2.282 = s32[] parameter(2)
  %Arg_3.93 = s32[] parameter(3)
  %Arg_0.1207 = s32[] parameter(0)
  %Arg_1.1145 = s32[] parameter(1)
  ROOT %compare.1822 = pred[] compare(%Arg_0.1207, %Arg_1.1145), direction=LT
}

%region_2.91._custom_call_lowering_rule.29 (Arg_0.1208: s32[], Arg_1.1146: s32[]) -> s32[] {
  %Arg_0.1208 = s32[] parameter(0)
  %Arg_1.1146 = s32[] parameter(1)
  ROOT %add.1074 = s32[] add(%Arg_0.1208, %Arg_1.1146)
}

%region_6.190._custom_call_lowering_rule.29 (Arg_0.1209: s32[], Arg_1.1147: s32[]) -> s32[] {
  %Arg_0.1209 = s32[] parameter(0)
  ROOT %Arg_1.1147 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.29 (Arg_0.1210: pred[], Arg_1.1148: pred[]) -> pred[] {
  %Arg_0.1210 = pred[] parameter(0)
  ROOT %Arg_1.1148 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.29 (Arg_0.1211: s32[], Arg_1.1149: s32[]) -> s32[] {
  %Arg_0.1211 = s32[] parameter(0)
  %Arg_1.1149 = s32[] parameter(1)
  ROOT %add.1075 = s32[] add(%Arg_0.1211, %Arg_1.1149)
}

%region_5.127._custom_call_lowering_rule.29 (Arg_0.1212: s32[], Arg_1.1150: s32[]) -> s32[] {
  %Arg_0.1212 = s32[] parameter(0)
  %Arg_1.1150 = s32[] parameter(1)
  ROOT %add.1076 = s32[] add(%Arg_0.1212, %Arg_1.1150)
}

%region_8.214._custom_call_lowering_rule.29 (Arg_0.1215: s32[], Arg_1.1153: s32[]) -> s32[] {
  %Arg_0.1215 = s32[] parameter(0)
  %Arg_1.1153 = s32[] parameter(1)
  ROOT %add.1078 = s32[] add(%Arg_0.1215, %Arg_1.1153)
}

%region_11.244._custom_call_lowering_rule.29 (Arg_0.1216: s32[], Arg_1.1154: s32[]) -> s32[] {
  %Arg_0.1216 = s32[] parameter(0)
  ROOT %Arg_1.1154 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.29 (Arg_0.1217: pred[], Arg_1.1155: pred[]) -> pred[] {
  %Arg_0.1217 = pred[] parameter(0)
  ROOT %Arg_1.1155 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.29 (Arg_0.1218: s32[], Arg_1.1156: s32[]) -> s32[] {
  %Arg_0.1218 = s32[] parameter(0)
  %Arg_1.1156 = s32[] parameter(1)
  ROOT %add.1079 = s32[] add(%Arg_0.1218, %Arg_1.1156)
}

%region_1.78._custom_call_lowering_rule.30 (Arg_0.1220: s32[], Arg_1.1158: s32[], Arg_2.283: s32[], Arg_3.94: s32[]) -> pred[] {
  %Arg_2.283 = s32[] parameter(2)
  %Arg_3.94 = s32[] parameter(3)
  %Arg_0.1220 = s32[] parameter(0)
  %Arg_1.1158 = s32[] parameter(1)
  ROOT %compare.1823 = pred[] compare(%Arg_0.1220, %Arg_1.1158), direction=LT
}

%region_2.91._custom_call_lowering_rule.30 (Arg_0.1221: s32[], Arg_1.1159: s32[]) -> s32[] {
  %Arg_0.1221 = s32[] parameter(0)
  %Arg_1.1159 = s32[] parameter(1)
  ROOT %add.1080 = s32[] add(%Arg_0.1221, %Arg_1.1159)
}

%region_6.190._custom_call_lowering_rule.30 (Arg_0.1222: s32[], Arg_1.1160: s32[]) -> s32[] {
  %Arg_0.1222 = s32[] parameter(0)
  ROOT %Arg_1.1160 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.30 (Arg_0.1223: pred[], Arg_1.1161: pred[]) -> pred[] {
  %Arg_0.1223 = pred[] parameter(0)
  ROOT %Arg_1.1161 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.30 (Arg_0.1224: s32[], Arg_1.1162: s32[]) -> s32[] {
  %Arg_0.1224 = s32[] parameter(0)
  %Arg_1.1162 = s32[] parameter(1)
  ROOT %add.1081 = s32[] add(%Arg_0.1224, %Arg_1.1162)
}

%region_5.127._custom_call_lowering_rule.30 (Arg_0.1225: s32[], Arg_1.1163: s32[]) -> s32[] {
  %Arg_0.1225 = s32[] parameter(0)
  %Arg_1.1163 = s32[] parameter(1)
  ROOT %add.1082 = s32[] add(%Arg_0.1225, %Arg_1.1163)
}

%region_8.214._custom_call_lowering_rule.30 (Arg_0.1228: s32[], Arg_1.1166: s32[]) -> s32[] {
  %Arg_0.1228 = s32[] parameter(0)
  %Arg_1.1166 = s32[] parameter(1)
  ROOT %add.1084 = s32[] add(%Arg_0.1228, %Arg_1.1166)
}

%region_11.244._custom_call_lowering_rule.30 (Arg_0.1229: s32[], Arg_1.1167: s32[]) -> s32[] {
  %Arg_0.1229 = s32[] parameter(0)
  ROOT %Arg_1.1167 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.30 (Arg_0.1230: pred[], Arg_1.1168: pred[]) -> pred[] {
  %Arg_0.1230 = pred[] parameter(0)
  ROOT %Arg_1.1168 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.30 (Arg_0.1231: s32[], Arg_1.1169: s32[]) -> s32[] {
  %Arg_0.1231 = s32[] parameter(0)
  %Arg_1.1169 = s32[] parameter(1)
  ROOT %add.1085 = s32[] add(%Arg_0.1231, %Arg_1.1169)
}

%region_1.78._custom_call_lowering_rule.31 (Arg_0.1237: s32[], Arg_1.1175: s32[], Arg_2.284: s32[], Arg_3.95: s32[]) -> pred[] {
  %Arg_2.284 = s32[] parameter(2)
  %Arg_3.95 = s32[] parameter(3)
  %Arg_0.1237 = s32[] parameter(0)
  %Arg_1.1175 = s32[] parameter(1)
  ROOT %compare.1824 = pred[] compare(%Arg_0.1237, %Arg_1.1175), direction=LT
}

%region_2.91._custom_call_lowering_rule.31 (Arg_0.1238: s32[], Arg_1.1176: s32[]) -> s32[] {
  %Arg_0.1238 = s32[] parameter(0)
  %Arg_1.1176 = s32[] parameter(1)
  ROOT %add.1096 = s32[] add(%Arg_0.1238, %Arg_1.1176)
}

%region_6.190._custom_call_lowering_rule.31 (Arg_0.1239: s32[], Arg_1.1177: s32[]) -> s32[] {
  %Arg_0.1239 = s32[] parameter(0)
  ROOT %Arg_1.1177 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule.31 (Arg_0.1240: pred[], Arg_1.1178: pred[]) -> pred[] {
  %Arg_0.1240 = pred[] parameter(0)
  ROOT %Arg_1.1178 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule.31 (Arg_0.1241: s32[], Arg_1.1179: s32[]) -> s32[] {
  %Arg_0.1241 = s32[] parameter(0)
  %Arg_1.1179 = s32[] parameter(1)
  ROOT %add.1097 = s32[] add(%Arg_0.1241, %Arg_1.1179)
}

%region_5.127._custom_call_lowering_rule.31 (Arg_0.1242: s32[], Arg_1.1180: s32[]) -> s32[] {
  %Arg_0.1242 = s32[] parameter(0)
  %Arg_1.1180 = s32[] parameter(1)
  ROOT %add.1098 = s32[] add(%Arg_0.1242, %Arg_1.1180)
}

%region_8.214._custom_call_lowering_rule.31 (Arg_0.1245: s32[], Arg_1.1183: s32[]) -> s32[] {
  %Arg_0.1245 = s32[] parameter(0)
  %Arg_1.1183 = s32[] parameter(1)
  ROOT %add.1100 = s32[] add(%Arg_0.1245, %Arg_1.1183)
}

%region_11.244._custom_call_lowering_rule.31 (Arg_0.1246: s32[], Arg_1.1184: s32[]) -> s32[] {
  %Arg_0.1246 = s32[] parameter(0)
  ROOT %Arg_1.1184 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule.31 (Arg_0.1247: pred[], Arg_1.1185: pred[]) -> pred[] {
  %Arg_0.1247 = pred[] parameter(0)
  ROOT %Arg_1.1185 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule.31 (Arg_0.1248: s32[], Arg_1.1186: s32[]) -> s32[] {
  %Arg_0.1248 = s32[] parameter(0)
  %Arg_1.1186 = s32[] parameter(1)
  ROOT %add.1101 = s32[] add(%Arg_0.1248, %Arg_1.1186)
}

%region_0.1057 (Arg_0.1054: f32[], Arg_1.1055: f32[]) -> f32[] {
  %Arg_0.1054 = f32[] parameter(0)
  %Arg_1.1055 = f32[] parameter(1)
  ROOT %add.1056 = f32[] add(%Arg_0.1054, %Arg_1.1055)
}

%region_1.1300 (Arg_0.1297: s32[], Arg_1.1298: s32[]) -> s32[] {
  %Arg_0.1297 = s32[] parameter(0)
  %Arg_1.1298 = s32[] parameter(1)
  ROOT %add.1299 = s32[] add(%Arg_0.1297, %Arg_1.1298)
}

%region_2.1308 (Arg_0.1305: s32[], Arg_1.1306: s32[]) -> s32[] {
  %Arg_0.1305 = s32[] parameter(0)
  %Arg_1.1306 = s32[] parameter(1)
  ROOT %add.1307 = s32[] add(%Arg_0.1305, %Arg_1.1306)
}

%region_3.1313 (Arg_0.1310: s32[], Arg_1.1311: s32[]) -> s32[] {
  %Arg_0.1310 = s32[] parameter(0)
  %Arg_1.1311 = s32[] parameter(1)
  ROOT %maximum.1312 = s32[] maximum(%Arg_0.1310, %Arg_1.1311)
}

%region_1.75._custom_call_lowering_rule (Arg_0.409: s32[], Arg_1.347: s32[], Arg_2.221: s32[], Arg_3.73: s32[]) -> pred[] {
  %Arg_2.221 = s32[] parameter(2)
  %Arg_3.73 = s32[] parameter(3)
  %Arg_0.409 = s32[] parameter(0)
  %Arg_1.347 = s32[] parameter(1)
  ROOT %compare.1756 = pred[] compare(%Arg_0.409, %Arg_1.347), direction=LT
}

%region_2.88._custom_call_lowering_rule (Arg_0.410: s32[], Arg_1.348: s32[]) -> s32[] {
  %Arg_0.410 = s32[] parameter(0)
  %Arg_1.348 = s32[] parameter(1)
  ROOT %add.704 = s32[] add(%Arg_0.410, %Arg_1.348)
}

%region_6.187._custom_call_lowering_rule (Arg_0.411: s32[], Arg_1.349: s32[]) -> s32[] {
  %Arg_0.411 = s32[] parameter(0)
  ROOT %Arg_1.349 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule (Arg_0.412: pred[], Arg_1.350: pred[]) -> pred[] {
  %Arg_0.412 = pred[] parameter(0)
  ROOT %Arg_1.350 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule (Arg_0.413: s32[], Arg_1.351: s32[]) -> s32[] {
  %Arg_0.413 = s32[] parameter(0)
  %Arg_1.351 = s32[] parameter(1)
  ROOT %add.705 = s32[] add(%Arg_0.413, %Arg_1.351)
}

%region_5.124._custom_call_lowering_rule (Arg_0.414: s32[], Arg_1.352: s32[]) -> s32[] {
  %Arg_0.414 = s32[] parameter(0)
  %Arg_1.352 = s32[] parameter(1)
  ROOT %add.706 = s32[] add(%Arg_0.414, %Arg_1.352)
}

%region_0.39._custom_call_lowering_rule (Arg_0.415: s32[], Arg_1.353: s32[]) -> s32[] {
  %Arg_0.415 = s32[] parameter(0)
  %Arg_1.353 = s32[] parameter(1)
  ROOT %add.707 = s32[] add(%Arg_0.415, %Arg_1.353)
}

%region_0.39._custom_call_lowering_rule.clone (Arg_0.2237: s32[], Arg_1.2172: s32[]) -> s32[] {
  %Arg_0.2237 = s32[] parameter(0)
  %Arg_1.2172 = s32[] parameter(1)
  ROOT %add.7493 = s32[] add(%Arg_0.2237, %Arg_1.2172)
}

%region_7.195._custom_call_lowering_rule (Arg_0.416: s32[], Arg_1.354: s32[]) -> s32[] {
  %Arg_0.416 = s32[] parameter(0)
  ROOT %Arg_1.354 = s32[] parameter(1)
}

%region_0.39._custom_call_lowering_rule.clone.1 (Arg_0.2238: s32[], Arg_1.2173: s32[]) -> s32[] {
  %Arg_0.2238 = s32[] parameter(0)
  %Arg_1.2173 = s32[] parameter(1)
  ROOT %add.7495 = s32[] add(%Arg_0.2238, %Arg_1.2173)
}

%region_12.249._custom_call_lowering_rule (Arg_0.421: s32[], Arg_1.359: s32[]) -> s32[] {
  %Arg_0.421 = s32[] parameter(0)
  ROOT %Arg_1.359 = s32[] parameter(1)
}

%region_4.1331 (Arg_0.1328: f32[], Arg_1.1329: f32[]) -> f32[] {
  %Arg_0.1328 = f32[] parameter(0)
  %Arg_1.1329 = f32[] parameter(1)
  ROOT %add.1330 = f32[] add(%Arg_0.1328, %Arg_1.1329)
}

%region_5.1378 (Arg_0.1375: f32[], Arg_1.1376: f32[]) -> f32[] {
  %Arg_0.1375 = f32[] parameter(0)
  %Arg_1.1376 = f32[] parameter(1)
  ROOT %add.1377 = f32[] add(%Arg_0.1375, %Arg_1.1376)
}

%region_9.1620 (Arg_0.1617: f32[], Arg_1.1618: f32[]) -> f32[] {
  %Arg_0.1617 = f32[] parameter(0)
  %Arg_1.1618 = f32[] parameter(1)
  ROOT %add.1619 = f32[] add(%Arg_0.1617, %Arg_1.1618)
}

%region_10.1658 (Arg_0.1655: f32[], Arg_1.1656: f32[]) -> f32[] {
  %Arg_0.1655 = f32[] parameter(0)
  %Arg_1.1656 = f32[] parameter(1)
  ROOT %add.1657 = f32[] add(%Arg_0.1655, %Arg_1.1656)
}

%region_14.1900 (Arg_0.1897: f32[], Arg_1.1898: f32[]) -> f32[] {
  %Arg_0.1897 = f32[] parameter(0)
  %Arg_1.1898 = f32[] parameter(1)
  ROOT %add.1899 = f32[] add(%Arg_0.1897, %Arg_1.1898)
}

%region_15.1938 (Arg_0.1935: f32[], Arg_1.1936: f32[]) -> f32[] {
  %Arg_0.1935 = f32[] parameter(0)
  %Arg_1.1936 = f32[] parameter(1)
  ROOT %add.1937 = f32[] add(%Arg_0.1935, %Arg_1.1936)
}

%region_19.2180 (Arg_0.2177: f32[], Arg_1.2178: f32[]) -> f32[] {
  %Arg_0.2177 = f32[] parameter(0)
  %Arg_1.2178 = f32[] parameter(1)
  ROOT %add.2179 = f32[] add(%Arg_0.2177, %Arg_1.2178)
}

%region_20.2218 (Arg_0.2215: f32[], Arg_1.2216: f32[]) -> f32[] {
  %Arg_0.2215 = f32[] parameter(0)
  %Arg_1.2216 = f32[] parameter(1)
  ROOT %add.2217 = f32[] add(%Arg_0.2215, %Arg_1.2216)
}

%region_24.2460 (Arg_0.2457: f32[], Arg_1.2458: f32[]) -> f32[] {
  %Arg_0.2457 = f32[] parameter(0)
  %Arg_1.2458 = f32[] parameter(1)
  ROOT %add.2459 = f32[] add(%Arg_0.2457, %Arg_1.2458)
}

%region_25.2498 (Arg_0.2495: f32[], Arg_1.2496: f32[]) -> f32[] {
  %Arg_0.2495 = f32[] parameter(0)
  %Arg_1.2496 = f32[] parameter(1)
  ROOT %add.2497 = f32[] add(%Arg_0.2495, %Arg_1.2496)
}

%region_29.2740 (Arg_0.2737: f32[], Arg_1.2738: f32[]) -> f32[] {
  %Arg_0.2737 = f32[] parameter(0)
  %Arg_1.2738 = f32[] parameter(1)
  ROOT %add.2739 = f32[] add(%Arg_0.2737, %Arg_1.2738)
}

%region_30.2778 (Arg_0.2775: f32[], Arg_1.2776: f32[]) -> f32[] {
  %Arg_0.2775 = f32[] parameter(0)
  %Arg_1.2776 = f32[] parameter(1)
  ROOT %add.2777 = f32[] add(%Arg_0.2775, %Arg_1.2776)
}

%region_34.3020 (Arg_0.3017: f32[], Arg_1.3018: f32[]) -> f32[] {
  %Arg_0.3017 = f32[] parameter(0)
  %Arg_1.3018 = f32[] parameter(1)
  ROOT %add.3019 = f32[] add(%Arg_0.3017, %Arg_1.3018)
}

%region_35.3058 (Arg_0.3055: f32[], Arg_1.3056: f32[]) -> f32[] {
  %Arg_0.3055 = f32[] parameter(0)
  %Arg_1.3056 = f32[] parameter(1)
  ROOT %add.3057 = f32[] add(%Arg_0.3055, %Arg_1.3056)
}

%region_39.3300 (Arg_0.3297: f32[], Arg_1.3298: f32[]) -> f32[] {
  %Arg_0.3297 = f32[] parameter(0)
  %Arg_1.3298 = f32[] parameter(1)
  ROOT %add.3299 = f32[] add(%Arg_0.3297, %Arg_1.3298)
}

%region_40.3338 (Arg_0.3335: f32[], Arg_1.3336: f32[]) -> f32[] {
  %Arg_0.3335 = f32[] parameter(0)
  %Arg_1.3336 = f32[] parameter(1)
  ROOT %add.3337 = f32[] add(%Arg_0.3335, %Arg_1.3336)
}

%region_44.3580 (Arg_0.3577: f32[], Arg_1.3578: f32[]) -> f32[] {
  %Arg_0.3577 = f32[] parameter(0)
  %Arg_1.3578 = f32[] parameter(1)
  ROOT %add.3579 = f32[] add(%Arg_0.3577, %Arg_1.3578)
}

%region_45.3618 (Arg_0.3615: f32[], Arg_1.3616: f32[]) -> f32[] {
  %Arg_0.3615 = f32[] parameter(0)
  %Arg_1.3616 = f32[] parameter(1)
  ROOT %add.3617 = f32[] add(%Arg_0.3615, %Arg_1.3616)
}

%region_49.3860 (Arg_0.3857: f32[], Arg_1.3858: f32[]) -> f32[] {
  %Arg_0.3857 = f32[] parameter(0)
  %Arg_1.3858 = f32[] parameter(1)
  ROOT %add.3859 = f32[] add(%Arg_0.3857, %Arg_1.3858)
}

%region_50.3898 (Arg_0.3895: f32[], Arg_1.3896: f32[]) -> f32[] {
  %Arg_0.3895 = f32[] parameter(0)
  %Arg_1.3896 = f32[] parameter(1)
  ROOT %add.3897 = f32[] add(%Arg_0.3895, %Arg_1.3896)
}

%region_54.4140 (Arg_0.4137: f32[], Arg_1.4138: f32[]) -> f32[] {
  %Arg_0.4137 = f32[] parameter(0)
  %Arg_1.4138 = f32[] parameter(1)
  ROOT %add.4139 = f32[] add(%Arg_0.4137, %Arg_1.4138)
}

%region_55.4178 (Arg_0.4175: f32[], Arg_1.4176: f32[]) -> f32[] {
  %Arg_0.4175 = f32[] parameter(0)
  %Arg_1.4176 = f32[] parameter(1)
  ROOT %add.4177 = f32[] add(%Arg_0.4175, %Arg_1.4176)
}

%region_59.4420 (Arg_0.4417: f32[], Arg_1.4418: f32[]) -> f32[] {
  %Arg_0.4417 = f32[] parameter(0)
  %Arg_1.4418 = f32[] parameter(1)
  ROOT %add.4419 = f32[] add(%Arg_0.4417, %Arg_1.4418)
}

%region_60.4458 (Arg_0.4455: f32[], Arg_1.4456: f32[]) -> f32[] {
  %Arg_0.4455 = f32[] parameter(0)
  %Arg_1.4456 = f32[] parameter(1)
  ROOT %add.4457 = f32[] add(%Arg_0.4455, %Arg_1.4456)
}

%region_64.4700 (Arg_0.4697: f32[], Arg_1.4698: f32[]) -> f32[] {
  %Arg_0.4697 = f32[] parameter(0)
  %Arg_1.4698 = f32[] parameter(1)
  ROOT %add.4699 = f32[] add(%Arg_0.4697, %Arg_1.4698)
}

%region_65.4738 (Arg_0.4735: f32[], Arg_1.4736: f32[]) -> f32[] {
  %Arg_0.4735 = f32[] parameter(0)
  %Arg_1.4736 = f32[] parameter(1)
  ROOT %add.4737 = f32[] add(%Arg_0.4735, %Arg_1.4736)
}

%region_69.4980 (Arg_0.4977: f32[], Arg_1.4978: f32[]) -> f32[] {
  %Arg_0.4977 = f32[] parameter(0)
  %Arg_1.4978 = f32[] parameter(1)
  ROOT %add.4979 = f32[] add(%Arg_0.4977, %Arg_1.4978)
}

%region_70.5018 (Arg_0.5015: f32[], Arg_1.5016: f32[]) -> f32[] {
  %Arg_0.5015 = f32[] parameter(0)
  %Arg_1.5016 = f32[] parameter(1)
  ROOT %add.5017 = f32[] add(%Arg_0.5015, %Arg_1.5016)
}

%region_74.5260 (Arg_0.5257: f32[], Arg_1.5258: f32[]) -> f32[] {
  %Arg_0.5257 = f32[] parameter(0)
  %Arg_1.5258 = f32[] parameter(1)
  ROOT %add.5259 = f32[] add(%Arg_0.5257, %Arg_1.5258)
}

%region_75.5298 (Arg_0.5295: f32[], Arg_1.5296: f32[]) -> f32[] {
  %Arg_0.5295 = f32[] parameter(0)
  %Arg_1.5296 = f32[] parameter(1)
  ROOT %add.5297 = f32[] add(%Arg_0.5295, %Arg_1.5296)
}

%region_79.5540 (Arg_0.5537: f32[], Arg_1.5538: f32[]) -> f32[] {
  %Arg_0.5537 = f32[] parameter(0)
  %Arg_1.5538 = f32[] parameter(1)
  ROOT %add.5539 = f32[] add(%Arg_0.5537, %Arg_1.5538)
}

%region_80.5578 (Arg_0.5575: f32[], Arg_1.5576: f32[]) -> f32[] {
  %Arg_0.5575 = f32[] parameter(0)
  %Arg_1.5576 = f32[] parameter(1)
  ROOT %add.5577 = f32[] add(%Arg_0.5575, %Arg_1.5576)
}

%region_84.5820 (Arg_0.5817: f32[], Arg_1.5818: f32[]) -> f32[] {
  %Arg_0.5817 = f32[] parameter(0)
  %Arg_1.5818 = f32[] parameter(1)
  ROOT %add.5819 = f32[] add(%Arg_0.5817, %Arg_1.5818)
}

%region_85.5858 (Arg_0.5855: f32[], Arg_1.5856: f32[]) -> f32[] {
  %Arg_0.5855 = f32[] parameter(0)
  %Arg_1.5856 = f32[] parameter(1)
  ROOT %add.5857 = f32[] add(%Arg_0.5855, %Arg_1.5856)
}

%region_89.6100 (Arg_0.6097: f32[], Arg_1.6098: f32[]) -> f32[] {
  %Arg_0.6097 = f32[] parameter(0)
  %Arg_1.6098 = f32[] parameter(1)
  ROOT %add.6099 = f32[] add(%Arg_0.6097, %Arg_1.6098)
}

%region_90.6138 (Arg_0.6135: f32[], Arg_1.6136: f32[]) -> f32[] {
  %Arg_0.6135 = f32[] parameter(0)
  %Arg_1.6136 = f32[] parameter(1)
  ROOT %add.6137 = f32[] add(%Arg_0.6135, %Arg_1.6136)
}

%region_94.6380 (Arg_0.6377: f32[], Arg_1.6378: f32[]) -> f32[] {
  %Arg_0.6377 = f32[] parameter(0)
  %Arg_1.6378 = f32[] parameter(1)
  ROOT %add.6379 = f32[] add(%Arg_0.6377, %Arg_1.6378)
}

%region_95.6418 (Arg_0.6415: f32[], Arg_1.6416: f32[]) -> f32[] {
  %Arg_0.6415 = f32[] parameter(0)
  %Arg_1.6416 = f32[] parameter(1)
  ROOT %add.6417 = f32[] add(%Arg_0.6415, %Arg_1.6416)
}

%region_99.6660 (Arg_0.6657: f32[], Arg_1.6658: f32[]) -> f32[] {
  %Arg_0.6657 = f32[] parameter(0)
  %Arg_1.6658 = f32[] parameter(1)
  ROOT %add.6659 = f32[] add(%Arg_0.6657, %Arg_1.6658)
}

%region_100.6698 (Arg_0.6695: f32[], Arg_1.6696: f32[]) -> f32[] {
  %Arg_0.6695 = f32[] parameter(0)
  %Arg_1.6696 = f32[] parameter(1)
  ROOT %add.6697 = f32[] add(%Arg_0.6695, %Arg_1.6696)
}

%region_104.6940 (Arg_0.6937: f32[], Arg_1.6938: f32[]) -> f32[] {
  %Arg_0.6937 = f32[] parameter(0)
  %Arg_1.6938 = f32[] parameter(1)
  ROOT %add.6939 = f32[] add(%Arg_0.6937, %Arg_1.6938)
}

%region_105.6978 (Arg_0.6975: f32[], Arg_1.6976: f32[]) -> f32[] {
  %Arg_0.6975 = f32[] parameter(0)
  %Arg_1.6976 = f32[] parameter(1)
  ROOT %add.6977 = f32[] add(%Arg_0.6975, %Arg_1.6976)
}

%region_109.7220 (Arg_0.7217: f32[], Arg_1.7218: f32[]) -> f32[] {
  %Arg_0.7217 = f32[] parameter(0)
  %Arg_1.7218 = f32[] parameter(1)
  ROOT %add.7219 = f32[] add(%Arg_0.7217, %Arg_1.7218)
}

%region_110.7258 (Arg_0.7255: f32[], Arg_1.7256: f32[]) -> f32[] {
  %Arg_0.7255 = f32[] parameter(0)
  %Arg_1.7256 = f32[] parameter(1)
  ROOT %add.7257 = f32[] add(%Arg_0.7255, %Arg_1.7256)
}

%region_114.7500 (Arg_0.7497: f32[], Arg_1.7498: f32[]) -> f32[] {
  %Arg_0.7497 = f32[] parameter(0)
  %Arg_1.7498 = f32[] parameter(1)
  ROOT %add.7499 = f32[] add(%Arg_0.7497, %Arg_1.7498)
}

%region_115.7538 (Arg_0.7535: f32[], Arg_1.7536: f32[]) -> f32[] {
  %Arg_0.7535 = f32[] parameter(0)
  %Arg_1.7536 = f32[] parameter(1)
  ROOT %add.7537 = f32[] add(%Arg_0.7535, %Arg_1.7536)
}

%region_119.7780 (Arg_0.7777: f32[], Arg_1.7778: f32[]) -> f32[] {
  %Arg_0.7777 = f32[] parameter(0)
  %Arg_1.7778 = f32[] parameter(1)
  ROOT %add.7779 = f32[] add(%Arg_0.7777, %Arg_1.7778)
}

%region_120.7818 (Arg_0.7815: f32[], Arg_1.7816: f32[]) -> f32[] {
  %Arg_0.7815 = f32[] parameter(0)
  %Arg_1.7816 = f32[] parameter(1)
  ROOT %add.7817 = f32[] add(%Arg_0.7815, %Arg_1.7816)
}

%region_124.8060 (Arg_0.8057: f32[], Arg_1.8058: f32[]) -> f32[] {
  %Arg_0.8057 = f32[] parameter(0)
  %Arg_1.8058 = f32[] parameter(1)
  ROOT %add.8059 = f32[] add(%Arg_0.8057, %Arg_1.8058)
}

%region_125.8098 (Arg_0.8095: f32[], Arg_1.8096: f32[]) -> f32[] {
  %Arg_0.8095 = f32[] parameter(0)
  %Arg_1.8096 = f32[] parameter(1)
  ROOT %add.8097 = f32[] add(%Arg_0.8095, %Arg_1.8096)
}

%region_129.8340 (Arg_0.8337: f32[], Arg_1.8338: f32[]) -> f32[] {
  %Arg_0.8337 = f32[] parameter(0)
  %Arg_1.8338 = f32[] parameter(1)
  ROOT %add.8339 = f32[] add(%Arg_0.8337, %Arg_1.8338)
}

%region_130.8378 (Arg_0.8375: f32[], Arg_1.8376: f32[]) -> f32[] {
  %Arg_0.8375 = f32[] parameter(0)
  %Arg_1.8376 = f32[] parameter(1)
  ROOT %add.8377 = f32[] add(%Arg_0.8375, %Arg_1.8376)
}

%region_134.8620 (Arg_0.8617: f32[], Arg_1.8618: f32[]) -> f32[] {
  %Arg_0.8617 = f32[] parameter(0)
  %Arg_1.8618 = f32[] parameter(1)
  ROOT %add.8619 = f32[] add(%Arg_0.8617, %Arg_1.8618)
}

%region_135.8658 (Arg_0.8655: f32[], Arg_1.8656: f32[]) -> f32[] {
  %Arg_0.8655 = f32[] parameter(0)
  %Arg_1.8656 = f32[] parameter(1)
  ROOT %add.8657 = f32[] add(%Arg_0.8655, %Arg_1.8656)
}

%region_139.8900 (Arg_0.8897: f32[], Arg_1.8898: f32[]) -> f32[] {
  %Arg_0.8897 = f32[] parameter(0)
  %Arg_1.8898 = f32[] parameter(1)
  ROOT %add.8899 = f32[] add(%Arg_0.8897, %Arg_1.8898)
}

%region_140.8938 (Arg_0.8935: f32[], Arg_1.8936: f32[]) -> f32[] {
  %Arg_0.8935 = f32[] parameter(0)
  %Arg_1.8936 = f32[] parameter(1)
  ROOT %add.8937 = f32[] add(%Arg_0.8935, %Arg_1.8936)
}

%region_144.9180 (Arg_0.9177: f32[], Arg_1.9178: f32[]) -> f32[] {
  %Arg_0.9177 = f32[] parameter(0)
  %Arg_1.9178 = f32[] parameter(1)
  ROOT %add.9179 = f32[] add(%Arg_0.9177, %Arg_1.9178)
}

%region_145.9218 (Arg_0.9215: f32[], Arg_1.9216: f32[]) -> f32[] {
  %Arg_0.9215 = f32[] parameter(0)
  %Arg_1.9216 = f32[] parameter(1)
  ROOT %add.9217 = f32[] add(%Arg_0.9215, %Arg_1.9216)
}

%region_149.9460 (Arg_0.9457: f32[], Arg_1.9458: f32[]) -> f32[] {
  %Arg_0.9457 = f32[] parameter(0)
  %Arg_1.9458 = f32[] parameter(1)
  ROOT %add.9459 = f32[] add(%Arg_0.9457, %Arg_1.9458)
}

%region_150.9498 (Arg_0.9495: f32[], Arg_1.9496: f32[]) -> f32[] {
  %Arg_0.9495 = f32[] parameter(0)
  %Arg_1.9496 = f32[] parameter(1)
  ROOT %add.9497 = f32[] add(%Arg_0.9495, %Arg_1.9496)
}

%region_154.9740 (Arg_0.9737: f32[], Arg_1.9738: f32[]) -> f32[] {
  %Arg_0.9737 = f32[] parameter(0)
  %Arg_1.9738 = f32[] parameter(1)
  ROOT %add.9739 = f32[] add(%Arg_0.9737, %Arg_1.9738)
}

%region_155.9778 (Arg_0.9775: f32[], Arg_1.9776: f32[]) -> f32[] {
  %Arg_0.9775 = f32[] parameter(0)
  %Arg_1.9776 = f32[] parameter(1)
  ROOT %add.9777 = f32[] add(%Arg_0.9775, %Arg_1.9776)
}

%region_159.10020 (Arg_0.10017: f32[], Arg_1.10018: f32[]) -> f32[] {
  %Arg_0.10017 = f32[] parameter(0)
  %Arg_1.10018 = f32[] parameter(1)
  ROOT %add.10019 = f32[] add(%Arg_0.10017, %Arg_1.10018)
}

%region_160.10058 (Arg_0.10055: f32[], Arg_1.10056: f32[]) -> f32[] {
  %Arg_0.10055 = f32[] parameter(0)
  %Arg_1.10056 = f32[] parameter(1)
  ROOT %add.10057 = f32[] add(%Arg_0.10055, %Arg_1.10056)
}

%region_165.10144 (Arg_0.10141: s32[], Arg_1.10142: s32[]) -> s32[] {
  %Arg_0.10141 = s32[] parameter(0)
  %Arg_1.10142 = s32[] parameter(1)
  ROOT %add.10143 = s32[] add(%Arg_0.10141, %Arg_1.10142)
}

%region_165.10144.clone (Arg_0.825: s32[], Arg_1.763: s32[]) -> s32[] {
  %Arg_0.825 = s32[] parameter(0)
  %Arg_1.763 = s32[] parameter(1)
  ROOT %add.896 = s32[] add(%Arg_0.825, %Arg_1.763)
}

%region_161.10098 (Arg_0.10095: f32[], Arg_1.10096: f32[]) -> f32[] {
  %Arg_0.10095 = f32[] parameter(0)
  %Arg_1.10096 = f32[] parameter(1)
  ROOT %maximum.10097 = f32[] maximum(%Arg_0.10095, %Arg_1.10096)
}

%region_162.10109 (Arg_0.10106: f32[], Arg_1.10107: f32[]) -> f32[] {
  %Arg_0.10106 = f32[] parameter(0)
  %Arg_1.10107 = f32[] parameter(1)
  ROOT %add.10108 = f32[] add(%Arg_0.10106, %Arg_1.10107)
}

%region_166.10180 (Arg_0.10177: bf16[], Arg_1.10178: bf16[]) -> bf16[] {
  %Arg_0.10177 = bf16[] parameter(0)
  %Arg_1.10178 = bf16[] parameter(1)
  ROOT %add.10179 = bf16[] add(%Arg_0.10177, %Arg_1.10178)
}

%region_166.10180.clone (Arg_0.826: bf16[], Arg_1.764: bf16[]) -> bf16[] {
  %Arg_0.826 = bf16[] parameter(0)
  %Arg_1.764 = bf16[] parameter(1)
  ROOT %add.897 = bf16[] add(%Arg_0.826, %Arg_1.764)
}

%region_586.26021 (Arg_0.26018: f32[], Arg_1.26019: f32[]) -> f32[] {
  %Arg_0.26018 = f32[] parameter(0)
  %Arg_1.26019 = f32[] parameter(1)
  ROOT %add.26020 = f32[] add(%Arg_0.26018, %Arg_1.26019)
}

%region_168.10198 (Arg_0.10195: f32[], Arg_1.10196: f32[]) -> f32[] {
  %Arg_0.10195 = f32[] parameter(0)
  %Arg_1.10196 = f32[] parameter(1)
  ROOT %add.10197 = f32[] add(%Arg_0.10195, %Arg_1.10196)
}

%region_174.10515 (Arg_0.10512: f32[], Arg_1.10513: f32[]) -> f32[] {
  %Arg_0.10512 = f32[] parameter(0)
  %Arg_1.10513 = f32[] parameter(1)
  ROOT %add.10514 = f32[] add(%Arg_0.10512, %Arg_1.10513)
}

%region_177.10607 (Arg_0.10604: f32[], Arg_1.10605: f32[]) -> f32[] {
  %Arg_0.10604 = f32[] parameter(0)
  %Arg_1.10605 = f32[] parameter(1)
  ROOT %add.10606 = f32[] add(%Arg_0.10604, %Arg_1.10605)
}

%region_171.10490 (Arg_0.10487: s32[], Arg_1.10488: s32[]) -> s32[] {
  %Arg_0.10487 = s32[] parameter(0)
  %Arg_1.10488 = s32[] parameter(1)
  ROOT %add.10489 = s32[] add(%Arg_0.10487, %Arg_1.10488)
}

%region_172.10498 (Arg_0.10495: s32[], Arg_1.10496: s32[]) -> s32[] {
  %Arg_0.10495 = s32[] parameter(0)
  %Arg_1.10496 = s32[] parameter(1)
  ROOT %add.10497 = s32[] add(%Arg_0.10495, %Arg_1.10496)
}

%region_173.10503 (Arg_0.10500: s32[], Arg_1.10501: s32[]) -> s32[] {
  %Arg_0.10500 = s32[] parameter(0)
  %Arg_1.10501 = s32[] parameter(1)
  ROOT %maximum.10502 = s32[] maximum(%Arg_0.10500, %Arg_1.10501)
}

%region_0.42._custom_call_lowering_rule (Arg_0.833: s32[], Arg_1.771: s32[]) -> s32[] {
  %Arg_0.833 = s32[] parameter(0)
  %Arg_1.771 = s32[] parameter(1)
  ROOT %add.901 = s32[] add(%Arg_0.833, %Arg_1.771)
}

%region_7.198._custom_call_lowering_rule (Arg_0.834: s32[], Arg_1.772: s32[]) -> s32[] {
  %Arg_0.834 = s32[] parameter(0)
  ROOT %Arg_1.772 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.clone (Arg_0.2239: s32[], Arg_1.2174: s32[]) -> s32[] {
  %Arg_0.2239 = s32[] parameter(0)
  %Arg_1.2174 = s32[] parameter(1)
  ROOT %add.7496 = s32[] add(%Arg_0.2239, %Arg_1.2174)
}

%region_12.252._custom_call_lowering_rule (Arg_0.839: s32[], Arg_1.777: s32[]) -> s32[] {
  %Arg_0.839 = s32[] parameter(0)
  ROOT %Arg_1.777 = s32[] parameter(1)
}

%region_170.10249 (Arg_0.10246: f32[], Arg_1.10247: f32[]) -> f32[] {
  %Arg_0.10246 = f32[] parameter(0)
  %Arg_1.10247 = f32[] parameter(1)
  ROOT %add.10248 = f32[] add(%Arg_0.10246, %Arg_1.10247)
}

%region_181.10741 (Arg_0.10738: f32[], Arg_1.10739: f32[]) -> f32[] {
  %Arg_0.10738 = f32[] parameter(0)
  %Arg_1.10739 = f32[] parameter(1)
  ROOT %add.10740 = f32[] add(%Arg_0.10738, %Arg_1.10739)
}

%region_187.11028 (Arg_0.11025: f32[], Arg_1.11026: f32[]) -> f32[] {
  %Arg_0.11025 = f32[] parameter(0)
  %Arg_1.11026 = f32[] parameter(1)
  ROOT %add.11027 = f32[] add(%Arg_0.11025, %Arg_1.11026)
}

%region_190.11099 (Arg_0.11096: f32[], Arg_1.11097: f32[]) -> f32[] {
  %Arg_0.11096 = f32[] parameter(0)
  %Arg_1.11097 = f32[] parameter(1)
  ROOT %add.11098 = f32[] add(%Arg_0.11096, %Arg_1.11097)
}

%region_184.11003 (Arg_0.11000: s32[], Arg_1.11001: s32[]) -> s32[] {
  %Arg_0.11000 = s32[] parameter(0)
  %Arg_1.11001 = s32[] parameter(1)
  ROOT %add.11002 = s32[] add(%Arg_0.11000, %Arg_1.11001)
}

%region_185.11011 (Arg_0.11008: s32[], Arg_1.11009: s32[]) -> s32[] {
  %Arg_0.11008 = s32[] parameter(0)
  %Arg_1.11009 = s32[] parameter(1)
  ROOT %add.11010 = s32[] add(%Arg_0.11008, %Arg_1.11009)
}

%region_186.11016 (Arg_0.11013: s32[], Arg_1.11014: s32[]) -> s32[] {
  %Arg_0.11013 = s32[] parameter(0)
  %Arg_1.11014 = s32[] parameter(1)
  ROOT %maximum.11015 = s32[] maximum(%Arg_0.11013, %Arg_1.11014)
}

%region_0.42._custom_call_lowering_rule.1 (Arg_0.846: s32[], Arg_1.784: s32[]) -> s32[] {
  %Arg_0.846 = s32[] parameter(0)
  %Arg_1.784 = s32[] parameter(1)
  ROOT %add.907 = s32[] add(%Arg_0.846, %Arg_1.784)
}

%region_7.198._custom_call_lowering_rule.1 (Arg_0.847: s32[], Arg_1.785: s32[]) -> s32[] {
  %Arg_0.847 = s32[] parameter(0)
  ROOT %Arg_1.785 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.1.clone (Arg_0.2240: s32[], Arg_1.2175: s32[]) -> s32[] {
  %Arg_0.2240 = s32[] parameter(0)
  %Arg_1.2175 = s32[] parameter(1)
  ROOT %add.7497 = s32[] add(%Arg_0.2240, %Arg_1.2175)
}

%region_12.252._custom_call_lowering_rule.1 (Arg_0.852: s32[], Arg_1.790: s32[]) -> s32[] {
  %Arg_0.852 = s32[] parameter(0)
  ROOT %Arg_1.790 = s32[] parameter(1)
}

%region_183.10794 (Arg_0.10791: f32[], Arg_1.10792: f32[]) -> f32[] {
  %Arg_0.10791 = f32[] parameter(0)
  %Arg_1.10792 = f32[] parameter(1)
  ROOT %add.10793 = f32[] add(%Arg_0.10791, %Arg_1.10792)
}

%region_194.11233 (Arg_0.11230: f32[], Arg_1.11231: f32[]) -> f32[] {
  %Arg_0.11230 = f32[] parameter(0)
  %Arg_1.11231 = f32[] parameter(1)
  ROOT %add.11232 = f32[] add(%Arg_0.11230, %Arg_1.11231)
}

%region_200.11520 (Arg_0.11517: f32[], Arg_1.11518: f32[]) -> f32[] {
  %Arg_0.11517 = f32[] parameter(0)
  %Arg_1.11518 = f32[] parameter(1)
  ROOT %add.11519 = f32[] add(%Arg_0.11517, %Arg_1.11518)
}

%region_203.11591 (Arg_0.11588: f32[], Arg_1.11589: f32[]) -> f32[] {
  %Arg_0.11588 = f32[] parameter(0)
  %Arg_1.11589 = f32[] parameter(1)
  ROOT %add.11590 = f32[] add(%Arg_0.11588, %Arg_1.11589)
}

%region_197.11495 (Arg_0.11492: s32[], Arg_1.11493: s32[]) -> s32[] {
  %Arg_0.11492 = s32[] parameter(0)
  %Arg_1.11493 = s32[] parameter(1)
  ROOT %add.11494 = s32[] add(%Arg_0.11492, %Arg_1.11493)
}

%region_198.11503 (Arg_0.11500: s32[], Arg_1.11501: s32[]) -> s32[] {
  %Arg_0.11500 = s32[] parameter(0)
  %Arg_1.11501 = s32[] parameter(1)
  ROOT %add.11502 = s32[] add(%Arg_0.11500, %Arg_1.11501)
}

%region_199.11508 (Arg_0.11505: s32[], Arg_1.11506: s32[]) -> s32[] {
  %Arg_0.11505 = s32[] parameter(0)
  %Arg_1.11506 = s32[] parameter(1)
  ROOT %maximum.11507 = s32[] maximum(%Arg_0.11505, %Arg_1.11506)
}

%region_0.42._custom_call_lowering_rule.2 (Arg_0.859: s32[], Arg_1.797: s32[]) -> s32[] {
  %Arg_0.859 = s32[] parameter(0)
  %Arg_1.797 = s32[] parameter(1)
  ROOT %add.913 = s32[] add(%Arg_0.859, %Arg_1.797)
}

%region_7.198._custom_call_lowering_rule.2 (Arg_0.860: s32[], Arg_1.798: s32[]) -> s32[] {
  %Arg_0.860 = s32[] parameter(0)
  ROOT %Arg_1.798 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.2.clone (Arg_0.2241: s32[], Arg_1.2176: s32[]) -> s32[] {
  %Arg_0.2241 = s32[] parameter(0)
  %Arg_1.2176 = s32[] parameter(1)
  ROOT %add.7498 = s32[] add(%Arg_0.2241, %Arg_1.2176)
}

%region_12.252._custom_call_lowering_rule.2 (Arg_0.865: s32[], Arg_1.803: s32[]) -> s32[] {
  %Arg_0.865 = s32[] parameter(0)
  ROOT %Arg_1.803 = s32[] parameter(1)
}

%region_196.11286 (Arg_0.11283: f32[], Arg_1.11284: f32[]) -> f32[] {
  %Arg_0.11283 = f32[] parameter(0)
  %Arg_1.11284 = f32[] parameter(1)
  ROOT %add.11285 = f32[] add(%Arg_0.11283, %Arg_1.11284)
}

%region_207.11725 (Arg_0.11722: f32[], Arg_1.11723: f32[]) -> f32[] {
  %Arg_0.11722 = f32[] parameter(0)
  %Arg_1.11723 = f32[] parameter(1)
  ROOT %add.11724 = f32[] add(%Arg_0.11722, %Arg_1.11723)
}

%region_213.12012 (Arg_0.12009: f32[], Arg_1.12010: f32[]) -> f32[] {
  %Arg_0.12009 = f32[] parameter(0)
  %Arg_1.12010 = f32[] parameter(1)
  ROOT %add.12011 = f32[] add(%Arg_0.12009, %Arg_1.12010)
}

%region_216.12083 (Arg_0.12080: f32[], Arg_1.12081: f32[]) -> f32[] {
  %Arg_0.12080 = f32[] parameter(0)
  %Arg_1.12081 = f32[] parameter(1)
  ROOT %add.12082 = f32[] add(%Arg_0.12080, %Arg_1.12081)
}

%region_210.11987 (Arg_0.11984: s32[], Arg_1.11985: s32[]) -> s32[] {
  %Arg_0.11984 = s32[] parameter(0)
  %Arg_1.11985 = s32[] parameter(1)
  ROOT %add.11986 = s32[] add(%Arg_0.11984, %Arg_1.11985)
}

%region_211.11995 (Arg_0.11992: s32[], Arg_1.11993: s32[]) -> s32[] {
  %Arg_0.11992 = s32[] parameter(0)
  %Arg_1.11993 = s32[] parameter(1)
  ROOT %add.11994 = s32[] add(%Arg_0.11992, %Arg_1.11993)
}

%region_212.12000 (Arg_0.11997: s32[], Arg_1.11998: s32[]) -> s32[] {
  %Arg_0.11997 = s32[] parameter(0)
  %Arg_1.11998 = s32[] parameter(1)
  ROOT %maximum.11999 = s32[] maximum(%Arg_0.11997, %Arg_1.11998)
}

%region_0.42._custom_call_lowering_rule.3 (Arg_0.872: s32[], Arg_1.810: s32[]) -> s32[] {
  %Arg_0.872 = s32[] parameter(0)
  %Arg_1.810 = s32[] parameter(1)
  ROOT %add.919 = s32[] add(%Arg_0.872, %Arg_1.810)
}

%region_7.198._custom_call_lowering_rule.3 (Arg_0.873: s32[], Arg_1.811: s32[]) -> s32[] {
  %Arg_0.873 = s32[] parameter(0)
  ROOT %Arg_1.811 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.3.clone (Arg_0.2242: s32[], Arg_1.2177: s32[]) -> s32[] {
  %Arg_0.2242 = s32[] parameter(0)
  %Arg_1.2177 = s32[] parameter(1)
  ROOT %add.7500 = s32[] add(%Arg_0.2242, %Arg_1.2177)
}

%region_12.252._custom_call_lowering_rule.3 (Arg_0.878: s32[], Arg_1.816: s32[]) -> s32[] {
  %Arg_0.878 = s32[] parameter(0)
  ROOT %Arg_1.816 = s32[] parameter(1)
}

%region_209.11778 (Arg_0.11775: f32[], Arg_1.11776: f32[]) -> f32[] {
  %Arg_0.11775 = f32[] parameter(0)
  %Arg_1.11776 = f32[] parameter(1)
  ROOT %add.11777 = f32[] add(%Arg_0.11775, %Arg_1.11776)
}

%region_220.12217 (Arg_0.12214: f32[], Arg_1.12215: f32[]) -> f32[] {
  %Arg_0.12214 = f32[] parameter(0)
  %Arg_1.12215 = f32[] parameter(1)
  ROOT %add.12216 = f32[] add(%Arg_0.12214, %Arg_1.12215)
}

%region_226.12504 (Arg_0.12501: f32[], Arg_1.12502: f32[]) -> f32[] {
  %Arg_0.12501 = f32[] parameter(0)
  %Arg_1.12502 = f32[] parameter(1)
  ROOT %add.12503 = f32[] add(%Arg_0.12501, %Arg_1.12502)
}

%region_229.12575 (Arg_0.12572: f32[], Arg_1.12573: f32[]) -> f32[] {
  %Arg_0.12572 = f32[] parameter(0)
  %Arg_1.12573 = f32[] parameter(1)
  ROOT %add.12574 = f32[] add(%Arg_0.12572, %Arg_1.12573)
}

%region_223.12479 (Arg_0.12476: s32[], Arg_1.12477: s32[]) -> s32[] {
  %Arg_0.12476 = s32[] parameter(0)
  %Arg_1.12477 = s32[] parameter(1)
  ROOT %add.12478 = s32[] add(%Arg_0.12476, %Arg_1.12477)
}

%region_224.12487 (Arg_0.12484: s32[], Arg_1.12485: s32[]) -> s32[] {
  %Arg_0.12484 = s32[] parameter(0)
  %Arg_1.12485 = s32[] parameter(1)
  ROOT %add.12486 = s32[] add(%Arg_0.12484, %Arg_1.12485)
}

%region_225.12492 (Arg_0.12489: s32[], Arg_1.12490: s32[]) -> s32[] {
  %Arg_0.12489 = s32[] parameter(0)
  %Arg_1.12490 = s32[] parameter(1)
  ROOT %maximum.12491 = s32[] maximum(%Arg_0.12489, %Arg_1.12490)
}

%region_0.42._custom_call_lowering_rule.4 (Arg_0.885: s32[], Arg_1.823: s32[]) -> s32[] {
  %Arg_0.885 = s32[] parameter(0)
  %Arg_1.823 = s32[] parameter(1)
  ROOT %add.925 = s32[] add(%Arg_0.885, %Arg_1.823)
}

%region_7.198._custom_call_lowering_rule.4 (Arg_0.886: s32[], Arg_1.824: s32[]) -> s32[] {
  %Arg_0.886 = s32[] parameter(0)
  ROOT %Arg_1.824 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.4.clone (Arg_0.2243: s32[], Arg_1.2179: s32[]) -> s32[] {
  %Arg_0.2243 = s32[] parameter(0)
  %Arg_1.2179 = s32[] parameter(1)
  ROOT %add.7501 = s32[] add(%Arg_0.2243, %Arg_1.2179)
}

%region_12.252._custom_call_lowering_rule.4 (Arg_0.891: s32[], Arg_1.829: s32[]) -> s32[] {
  %Arg_0.891 = s32[] parameter(0)
  ROOT %Arg_1.829 = s32[] parameter(1)
}

%region_222.12270 (Arg_0.12267: f32[], Arg_1.12268: f32[]) -> f32[] {
  %Arg_0.12267 = f32[] parameter(0)
  %Arg_1.12268 = f32[] parameter(1)
  ROOT %add.12269 = f32[] add(%Arg_0.12267, %Arg_1.12268)
}

%region_233.12709 (Arg_0.12706: f32[], Arg_1.12707: f32[]) -> f32[] {
  %Arg_0.12706 = f32[] parameter(0)
  %Arg_1.12707 = f32[] parameter(1)
  ROOT %add.12708 = f32[] add(%Arg_0.12706, %Arg_1.12707)
}

%region_239.12996 (Arg_0.12993: f32[], Arg_1.12994: f32[]) -> f32[] {
  %Arg_0.12993 = f32[] parameter(0)
  %Arg_1.12994 = f32[] parameter(1)
  ROOT %add.12995 = f32[] add(%Arg_0.12993, %Arg_1.12994)
}

%region_242.13067 (Arg_0.13064: f32[], Arg_1.13065: f32[]) -> f32[] {
  %Arg_0.13064 = f32[] parameter(0)
  %Arg_1.13065 = f32[] parameter(1)
  ROOT %add.13066 = f32[] add(%Arg_0.13064, %Arg_1.13065)
}

%region_236.12971 (Arg_0.12968: s32[], Arg_1.12969: s32[]) -> s32[] {
  %Arg_0.12968 = s32[] parameter(0)
  %Arg_1.12969 = s32[] parameter(1)
  ROOT %add.12970 = s32[] add(%Arg_0.12968, %Arg_1.12969)
}

%region_237.12979 (Arg_0.12976: s32[], Arg_1.12977: s32[]) -> s32[] {
  %Arg_0.12976 = s32[] parameter(0)
  %Arg_1.12977 = s32[] parameter(1)
  ROOT %add.12978 = s32[] add(%Arg_0.12976, %Arg_1.12977)
}

%region_238.12984 (Arg_0.12981: s32[], Arg_1.12982: s32[]) -> s32[] {
  %Arg_0.12981 = s32[] parameter(0)
  %Arg_1.12982 = s32[] parameter(1)
  ROOT %maximum.12983 = s32[] maximum(%Arg_0.12981, %Arg_1.12982)
}

%region_0.42._custom_call_lowering_rule.5 (Arg_0.898: s32[], Arg_1.836: s32[]) -> s32[] {
  %Arg_0.898 = s32[] parameter(0)
  %Arg_1.836 = s32[] parameter(1)
  ROOT %add.931 = s32[] add(%Arg_0.898, %Arg_1.836)
}

%region_7.198._custom_call_lowering_rule.5 (Arg_0.899: s32[], Arg_1.837: s32[]) -> s32[] {
  %Arg_0.899 = s32[] parameter(0)
  ROOT %Arg_1.837 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.5.clone (Arg_0.2244: s32[], Arg_1.2180: s32[]) -> s32[] {
  %Arg_0.2244 = s32[] parameter(0)
  %Arg_1.2180 = s32[] parameter(1)
  ROOT %add.7502 = s32[] add(%Arg_0.2244, %Arg_1.2180)
}

%region_12.252._custom_call_lowering_rule.5 (Arg_0.904: s32[], Arg_1.842: s32[]) -> s32[] {
  %Arg_0.904 = s32[] parameter(0)
  ROOT %Arg_1.842 = s32[] parameter(1)
}

%region_235.12762 (Arg_0.12759: f32[], Arg_1.12760: f32[]) -> f32[] {
  %Arg_0.12759 = f32[] parameter(0)
  %Arg_1.12760 = f32[] parameter(1)
  ROOT %add.12761 = f32[] add(%Arg_0.12759, %Arg_1.12760)
}

%region_246.13201 (Arg_0.13198: f32[], Arg_1.13199: f32[]) -> f32[] {
  %Arg_0.13198 = f32[] parameter(0)
  %Arg_1.13199 = f32[] parameter(1)
  ROOT %add.13200 = f32[] add(%Arg_0.13198, %Arg_1.13199)
}

%region_252.13488 (Arg_0.13485: f32[], Arg_1.13486: f32[]) -> f32[] {
  %Arg_0.13485 = f32[] parameter(0)
  %Arg_1.13486 = f32[] parameter(1)
  ROOT %add.13487 = f32[] add(%Arg_0.13485, %Arg_1.13486)
}

%region_255.13559 (Arg_0.13556: f32[], Arg_1.13557: f32[]) -> f32[] {
  %Arg_0.13556 = f32[] parameter(0)
  %Arg_1.13557 = f32[] parameter(1)
  ROOT %add.13558 = f32[] add(%Arg_0.13556, %Arg_1.13557)
}

%region_249.13463 (Arg_0.13460: s32[], Arg_1.13461: s32[]) -> s32[] {
  %Arg_0.13460 = s32[] parameter(0)
  %Arg_1.13461 = s32[] parameter(1)
  ROOT %add.13462 = s32[] add(%Arg_0.13460, %Arg_1.13461)
}

%region_250.13471 (Arg_0.13468: s32[], Arg_1.13469: s32[]) -> s32[] {
  %Arg_0.13468 = s32[] parameter(0)
  %Arg_1.13469 = s32[] parameter(1)
  ROOT %add.13470 = s32[] add(%Arg_0.13468, %Arg_1.13469)
}

%region_251.13476 (Arg_0.13473: s32[], Arg_1.13474: s32[]) -> s32[] {
  %Arg_0.13473 = s32[] parameter(0)
  %Arg_1.13474 = s32[] parameter(1)
  ROOT %maximum.13475 = s32[] maximum(%Arg_0.13473, %Arg_1.13474)
}

%region_0.42._custom_call_lowering_rule.6 (Arg_0.911: s32[], Arg_1.849: s32[]) -> s32[] {
  %Arg_0.911 = s32[] parameter(0)
  %Arg_1.849 = s32[] parameter(1)
  ROOT %add.937 = s32[] add(%Arg_0.911, %Arg_1.849)
}

%region_7.198._custom_call_lowering_rule.6 (Arg_0.912: s32[], Arg_1.850: s32[]) -> s32[] {
  %Arg_0.912 = s32[] parameter(0)
  ROOT %Arg_1.850 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.6.clone (Arg_0.2245: s32[], Arg_1.2181: s32[]) -> s32[] {
  %Arg_0.2245 = s32[] parameter(0)
  %Arg_1.2181 = s32[] parameter(1)
  ROOT %add.7503 = s32[] add(%Arg_0.2245, %Arg_1.2181)
}

%region_12.252._custom_call_lowering_rule.6 (Arg_0.917: s32[], Arg_1.855: s32[]) -> s32[] {
  %Arg_0.917 = s32[] parameter(0)
  ROOT %Arg_1.855 = s32[] parameter(1)
}

%region_248.13254 (Arg_0.13251: f32[], Arg_1.13252: f32[]) -> f32[] {
  %Arg_0.13251 = f32[] parameter(0)
  %Arg_1.13252 = f32[] parameter(1)
  ROOT %add.13253 = f32[] add(%Arg_0.13251, %Arg_1.13252)
}

%region_259.13693 (Arg_0.13690: f32[], Arg_1.13691: f32[]) -> f32[] {
  %Arg_0.13690 = f32[] parameter(0)
  %Arg_1.13691 = f32[] parameter(1)
  ROOT %add.13692 = f32[] add(%Arg_0.13690, %Arg_1.13691)
}

%region_265.13980 (Arg_0.13977: f32[], Arg_1.13978: f32[]) -> f32[] {
  %Arg_0.13977 = f32[] parameter(0)
  %Arg_1.13978 = f32[] parameter(1)
  ROOT %add.13979 = f32[] add(%Arg_0.13977, %Arg_1.13978)
}

%region_268.14051 (Arg_0.14048: f32[], Arg_1.14049: f32[]) -> f32[] {
  %Arg_0.14048 = f32[] parameter(0)
  %Arg_1.14049 = f32[] parameter(1)
  ROOT %add.14050 = f32[] add(%Arg_0.14048, %Arg_1.14049)
}

%region_262.13955 (Arg_0.13952: s32[], Arg_1.13953: s32[]) -> s32[] {
  %Arg_0.13952 = s32[] parameter(0)
  %Arg_1.13953 = s32[] parameter(1)
  ROOT %add.13954 = s32[] add(%Arg_0.13952, %Arg_1.13953)
}

%region_263.13963 (Arg_0.13960: s32[], Arg_1.13961: s32[]) -> s32[] {
  %Arg_0.13960 = s32[] parameter(0)
  %Arg_1.13961 = s32[] parameter(1)
  ROOT %add.13962 = s32[] add(%Arg_0.13960, %Arg_1.13961)
}

%region_264.13968 (Arg_0.13965: s32[], Arg_1.13966: s32[]) -> s32[] {
  %Arg_0.13965 = s32[] parameter(0)
  %Arg_1.13966 = s32[] parameter(1)
  ROOT %maximum.13967 = s32[] maximum(%Arg_0.13965, %Arg_1.13966)
}

%region_0.42._custom_call_lowering_rule.7 (Arg_0.924: s32[], Arg_1.862: s32[]) -> s32[] {
  %Arg_0.924 = s32[] parameter(0)
  %Arg_1.862 = s32[] parameter(1)
  ROOT %add.943 = s32[] add(%Arg_0.924, %Arg_1.862)
}

%region_7.198._custom_call_lowering_rule.7 (Arg_0.925: s32[], Arg_1.863: s32[]) -> s32[] {
  %Arg_0.925 = s32[] parameter(0)
  ROOT %Arg_1.863 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.7.clone (Arg_0.2246: s32[], Arg_1.2182: s32[]) -> s32[] {
  %Arg_0.2246 = s32[] parameter(0)
  %Arg_1.2182 = s32[] parameter(1)
  ROOT %add.7505 = s32[] add(%Arg_0.2246, %Arg_1.2182)
}

%region_12.252._custom_call_lowering_rule.7 (Arg_0.930: s32[], Arg_1.868: s32[]) -> s32[] {
  %Arg_0.930 = s32[] parameter(0)
  ROOT %Arg_1.868 = s32[] parameter(1)
}

%region_261.13746 (Arg_0.13743: f32[], Arg_1.13744: f32[]) -> f32[] {
  %Arg_0.13743 = f32[] parameter(0)
  %Arg_1.13744 = f32[] parameter(1)
  ROOT %add.13745 = f32[] add(%Arg_0.13743, %Arg_1.13744)
}

%region_272.14185 (Arg_0.14182: f32[], Arg_1.14183: f32[]) -> f32[] {
  %Arg_0.14182 = f32[] parameter(0)
  %Arg_1.14183 = f32[] parameter(1)
  ROOT %add.14184 = f32[] add(%Arg_0.14182, %Arg_1.14183)
}

%region_278.14472 (Arg_0.14469: f32[], Arg_1.14470: f32[]) -> f32[] {
  %Arg_0.14469 = f32[] parameter(0)
  %Arg_1.14470 = f32[] parameter(1)
  ROOT %add.14471 = f32[] add(%Arg_0.14469, %Arg_1.14470)
}

%region_281.14543 (Arg_0.14540: f32[], Arg_1.14541: f32[]) -> f32[] {
  %Arg_0.14540 = f32[] parameter(0)
  %Arg_1.14541 = f32[] parameter(1)
  ROOT %add.14542 = f32[] add(%Arg_0.14540, %Arg_1.14541)
}

%region_275.14447 (Arg_0.14444: s32[], Arg_1.14445: s32[]) -> s32[] {
  %Arg_0.14444 = s32[] parameter(0)
  %Arg_1.14445 = s32[] parameter(1)
  ROOT %add.14446 = s32[] add(%Arg_0.14444, %Arg_1.14445)
}

%region_276.14455 (Arg_0.14452: s32[], Arg_1.14453: s32[]) -> s32[] {
  %Arg_0.14452 = s32[] parameter(0)
  %Arg_1.14453 = s32[] parameter(1)
  ROOT %add.14454 = s32[] add(%Arg_0.14452, %Arg_1.14453)
}

%region_277.14460 (Arg_0.14457: s32[], Arg_1.14458: s32[]) -> s32[] {
  %Arg_0.14457 = s32[] parameter(0)
  %Arg_1.14458 = s32[] parameter(1)
  ROOT %maximum.14459 = s32[] maximum(%Arg_0.14457, %Arg_1.14458)
}

%region_0.42._custom_call_lowering_rule.8 (Arg_0.937: s32[], Arg_1.875: s32[]) -> s32[] {
  %Arg_0.937 = s32[] parameter(0)
  %Arg_1.875 = s32[] parameter(1)
  ROOT %add.949 = s32[] add(%Arg_0.937, %Arg_1.875)
}

%region_7.198._custom_call_lowering_rule.8 (Arg_0.938: s32[], Arg_1.876: s32[]) -> s32[] {
  %Arg_0.938 = s32[] parameter(0)
  ROOT %Arg_1.876 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.8.clone (Arg_0.2247: s32[], Arg_1.2183: s32[]) -> s32[] {
  %Arg_0.2247 = s32[] parameter(0)
  %Arg_1.2183 = s32[] parameter(1)
  ROOT %add.7506 = s32[] add(%Arg_0.2247, %Arg_1.2183)
}

%region_12.252._custom_call_lowering_rule.8 (Arg_0.943: s32[], Arg_1.881: s32[]) -> s32[] {
  %Arg_0.943 = s32[] parameter(0)
  ROOT %Arg_1.881 = s32[] parameter(1)
}

%region_274.14238 (Arg_0.14235: f32[], Arg_1.14236: f32[]) -> f32[] {
  %Arg_0.14235 = f32[] parameter(0)
  %Arg_1.14236 = f32[] parameter(1)
  ROOT %add.14237 = f32[] add(%Arg_0.14235, %Arg_1.14236)
}

%region_285.14677 (Arg_0.14674: f32[], Arg_1.14675: f32[]) -> f32[] {
  %Arg_0.14674 = f32[] parameter(0)
  %Arg_1.14675 = f32[] parameter(1)
  ROOT %add.14676 = f32[] add(%Arg_0.14674, %Arg_1.14675)
}

%region_291.14964 (Arg_0.14961: f32[], Arg_1.14962: f32[]) -> f32[] {
  %Arg_0.14961 = f32[] parameter(0)
  %Arg_1.14962 = f32[] parameter(1)
  ROOT %add.14963 = f32[] add(%Arg_0.14961, %Arg_1.14962)
}

%region_294.15035 (Arg_0.15032: f32[], Arg_1.15033: f32[]) -> f32[] {
  %Arg_0.15032 = f32[] parameter(0)
  %Arg_1.15033 = f32[] parameter(1)
  ROOT %add.15034 = f32[] add(%Arg_0.15032, %Arg_1.15033)
}

%region_288.14939 (Arg_0.14936: s32[], Arg_1.14937: s32[]) -> s32[] {
  %Arg_0.14936 = s32[] parameter(0)
  %Arg_1.14937 = s32[] parameter(1)
  ROOT %add.14938 = s32[] add(%Arg_0.14936, %Arg_1.14937)
}

%region_289.14947 (Arg_0.14944: s32[], Arg_1.14945: s32[]) -> s32[] {
  %Arg_0.14944 = s32[] parameter(0)
  %Arg_1.14945 = s32[] parameter(1)
  ROOT %add.14946 = s32[] add(%Arg_0.14944, %Arg_1.14945)
}

%region_290.14952 (Arg_0.14949: s32[], Arg_1.14950: s32[]) -> s32[] {
  %Arg_0.14949 = s32[] parameter(0)
  %Arg_1.14950 = s32[] parameter(1)
  ROOT %maximum.14951 = s32[] maximum(%Arg_0.14949, %Arg_1.14950)
}

%region_0.42._custom_call_lowering_rule.9 (Arg_0.950: s32[], Arg_1.888: s32[]) -> s32[] {
  %Arg_0.950 = s32[] parameter(0)
  %Arg_1.888 = s32[] parameter(1)
  ROOT %add.955 = s32[] add(%Arg_0.950, %Arg_1.888)
}

%region_7.198._custom_call_lowering_rule.9 (Arg_0.951: s32[], Arg_1.889: s32[]) -> s32[] {
  %Arg_0.951 = s32[] parameter(0)
  ROOT %Arg_1.889 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.9.clone (Arg_0.2248: s32[], Arg_1.2184: s32[]) -> s32[] {
  %Arg_0.2248 = s32[] parameter(0)
  %Arg_1.2184 = s32[] parameter(1)
  ROOT %add.7507 = s32[] add(%Arg_0.2248, %Arg_1.2184)
}

%region_12.252._custom_call_lowering_rule.9 (Arg_0.956: s32[], Arg_1.894: s32[]) -> s32[] {
  %Arg_0.956 = s32[] parameter(0)
  ROOT %Arg_1.894 = s32[] parameter(1)
}

%region_287.14730 (Arg_0.14727: f32[], Arg_1.14728: f32[]) -> f32[] {
  %Arg_0.14727 = f32[] parameter(0)
  %Arg_1.14728 = f32[] parameter(1)
  ROOT %add.14729 = f32[] add(%Arg_0.14727, %Arg_1.14728)
}

%region_298.15169 (Arg_0.15166: f32[], Arg_1.15167: f32[]) -> f32[] {
  %Arg_0.15166 = f32[] parameter(0)
  %Arg_1.15167 = f32[] parameter(1)
  ROOT %add.15168 = f32[] add(%Arg_0.15166, %Arg_1.15167)
}

%region_304.15456 (Arg_0.15453: f32[], Arg_1.15454: f32[]) -> f32[] {
  %Arg_0.15453 = f32[] parameter(0)
  %Arg_1.15454 = f32[] parameter(1)
  ROOT %add.15455 = f32[] add(%Arg_0.15453, %Arg_1.15454)
}

%region_307.15527 (Arg_0.15524: f32[], Arg_1.15525: f32[]) -> f32[] {
  %Arg_0.15524 = f32[] parameter(0)
  %Arg_1.15525 = f32[] parameter(1)
  ROOT %add.15526 = f32[] add(%Arg_0.15524, %Arg_1.15525)
}

%region_301.15431 (Arg_0.15428: s32[], Arg_1.15429: s32[]) -> s32[] {
  %Arg_0.15428 = s32[] parameter(0)
  %Arg_1.15429 = s32[] parameter(1)
  ROOT %add.15430 = s32[] add(%Arg_0.15428, %Arg_1.15429)
}

%region_302.15439 (Arg_0.15436: s32[], Arg_1.15437: s32[]) -> s32[] {
  %Arg_0.15436 = s32[] parameter(0)
  %Arg_1.15437 = s32[] parameter(1)
  ROOT %add.15438 = s32[] add(%Arg_0.15436, %Arg_1.15437)
}

%region_303.15444 (Arg_0.15441: s32[], Arg_1.15442: s32[]) -> s32[] {
  %Arg_0.15441 = s32[] parameter(0)
  %Arg_1.15442 = s32[] parameter(1)
  ROOT %maximum.15443 = s32[] maximum(%Arg_0.15441, %Arg_1.15442)
}

%region_0.42._custom_call_lowering_rule.10 (Arg_0.963: s32[], Arg_1.901: s32[]) -> s32[] {
  %Arg_0.963 = s32[] parameter(0)
  %Arg_1.901 = s32[] parameter(1)
  ROOT %add.961 = s32[] add(%Arg_0.963, %Arg_1.901)
}

%region_7.198._custom_call_lowering_rule.10 (Arg_0.964: s32[], Arg_1.902: s32[]) -> s32[] {
  %Arg_0.964 = s32[] parameter(0)
  ROOT %Arg_1.902 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.10.clone (Arg_0.2249: s32[], Arg_1.2185: s32[]) -> s32[] {
  %Arg_0.2249 = s32[] parameter(0)
  %Arg_1.2185 = s32[] parameter(1)
  ROOT %add.7508 = s32[] add(%Arg_0.2249, %Arg_1.2185)
}

%region_12.252._custom_call_lowering_rule.10 (Arg_0.969: s32[], Arg_1.907: s32[]) -> s32[] {
  %Arg_0.969 = s32[] parameter(0)
  ROOT %Arg_1.907 = s32[] parameter(1)
}

%region_300.15222 (Arg_0.15219: f32[], Arg_1.15220: f32[]) -> f32[] {
  %Arg_0.15219 = f32[] parameter(0)
  %Arg_1.15220 = f32[] parameter(1)
  ROOT %add.15221 = f32[] add(%Arg_0.15219, %Arg_1.15220)
}

%region_311.15661 (Arg_0.15658: f32[], Arg_1.15659: f32[]) -> f32[] {
  %Arg_0.15658 = f32[] parameter(0)
  %Arg_1.15659 = f32[] parameter(1)
  ROOT %add.15660 = f32[] add(%Arg_0.15658, %Arg_1.15659)
}

%region_317.15948 (Arg_0.15945: f32[], Arg_1.15946: f32[]) -> f32[] {
  %Arg_0.15945 = f32[] parameter(0)
  %Arg_1.15946 = f32[] parameter(1)
  ROOT %add.15947 = f32[] add(%Arg_0.15945, %Arg_1.15946)
}

%region_320.16019 (Arg_0.16016: f32[], Arg_1.16017: f32[]) -> f32[] {
  %Arg_0.16016 = f32[] parameter(0)
  %Arg_1.16017 = f32[] parameter(1)
  ROOT %add.16018 = f32[] add(%Arg_0.16016, %Arg_1.16017)
}

%region_314.15923 (Arg_0.15920: s32[], Arg_1.15921: s32[]) -> s32[] {
  %Arg_0.15920 = s32[] parameter(0)
  %Arg_1.15921 = s32[] parameter(1)
  ROOT %add.15922 = s32[] add(%Arg_0.15920, %Arg_1.15921)
}

%region_315.15931 (Arg_0.15928: s32[], Arg_1.15929: s32[]) -> s32[] {
  %Arg_0.15928 = s32[] parameter(0)
  %Arg_1.15929 = s32[] parameter(1)
  ROOT %add.15930 = s32[] add(%Arg_0.15928, %Arg_1.15929)
}

%region_316.15936 (Arg_0.15933: s32[], Arg_1.15934: s32[]) -> s32[] {
  %Arg_0.15933 = s32[] parameter(0)
  %Arg_1.15934 = s32[] parameter(1)
  ROOT %maximum.15935 = s32[] maximum(%Arg_0.15933, %Arg_1.15934)
}

%region_0.42._custom_call_lowering_rule.11 (Arg_0.976: s32[], Arg_1.914: s32[]) -> s32[] {
  %Arg_0.976 = s32[] parameter(0)
  %Arg_1.914 = s32[] parameter(1)
  ROOT %add.967 = s32[] add(%Arg_0.976, %Arg_1.914)
}

%region_7.198._custom_call_lowering_rule.11 (Arg_0.977: s32[], Arg_1.915: s32[]) -> s32[] {
  %Arg_0.977 = s32[] parameter(0)
  ROOT %Arg_1.915 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.11.clone (Arg_0.2250: s32[], Arg_1.2186: s32[]) -> s32[] {
  %Arg_0.2250 = s32[] parameter(0)
  %Arg_1.2186 = s32[] parameter(1)
  ROOT %add.7509 = s32[] add(%Arg_0.2250, %Arg_1.2186)
}

%region_12.252._custom_call_lowering_rule.11 (Arg_0.982: s32[], Arg_1.920: s32[]) -> s32[] {
  %Arg_0.982 = s32[] parameter(0)
  ROOT %Arg_1.920 = s32[] parameter(1)
}

%region_313.15714 (Arg_0.15711: f32[], Arg_1.15712: f32[]) -> f32[] {
  %Arg_0.15711 = f32[] parameter(0)
  %Arg_1.15712 = f32[] parameter(1)
  ROOT %add.15713 = f32[] add(%Arg_0.15711, %Arg_1.15712)
}

%region_324.16153 (Arg_0.16150: f32[], Arg_1.16151: f32[]) -> f32[] {
  %Arg_0.16150 = f32[] parameter(0)
  %Arg_1.16151 = f32[] parameter(1)
  ROOT %add.16152 = f32[] add(%Arg_0.16150, %Arg_1.16151)
}

%region_330.16440 (Arg_0.16437: f32[], Arg_1.16438: f32[]) -> f32[] {
  %Arg_0.16437 = f32[] parameter(0)
  %Arg_1.16438 = f32[] parameter(1)
  ROOT %add.16439 = f32[] add(%Arg_0.16437, %Arg_1.16438)
}

%region_333.16511 (Arg_0.16508: f32[], Arg_1.16509: f32[]) -> f32[] {
  %Arg_0.16508 = f32[] parameter(0)
  %Arg_1.16509 = f32[] parameter(1)
  ROOT %add.16510 = f32[] add(%Arg_0.16508, %Arg_1.16509)
}

%region_327.16415 (Arg_0.16412: s32[], Arg_1.16413: s32[]) -> s32[] {
  %Arg_0.16412 = s32[] parameter(0)
  %Arg_1.16413 = s32[] parameter(1)
  ROOT %add.16414 = s32[] add(%Arg_0.16412, %Arg_1.16413)
}

%region_328.16423 (Arg_0.16420: s32[], Arg_1.16421: s32[]) -> s32[] {
  %Arg_0.16420 = s32[] parameter(0)
  %Arg_1.16421 = s32[] parameter(1)
  ROOT %add.16422 = s32[] add(%Arg_0.16420, %Arg_1.16421)
}

%region_329.16428 (Arg_0.16425: s32[], Arg_1.16426: s32[]) -> s32[] {
  %Arg_0.16425 = s32[] parameter(0)
  %Arg_1.16426 = s32[] parameter(1)
  ROOT %maximum.16427 = s32[] maximum(%Arg_0.16425, %Arg_1.16426)
}

%region_0.42._custom_call_lowering_rule.12 (Arg_0.989: s32[], Arg_1.927: s32[]) -> s32[] {
  %Arg_0.989 = s32[] parameter(0)
  %Arg_1.927 = s32[] parameter(1)
  ROOT %add.973 = s32[] add(%Arg_0.989, %Arg_1.927)
}

%region_7.198._custom_call_lowering_rule.12 (Arg_0.990: s32[], Arg_1.928: s32[]) -> s32[] {
  %Arg_0.990 = s32[] parameter(0)
  ROOT %Arg_1.928 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.12.clone (Arg_0.2251: s32[], Arg_1.2187: s32[]) -> s32[] {
  %Arg_0.2251 = s32[] parameter(0)
  %Arg_1.2187 = s32[] parameter(1)
  ROOT %add.7510 = s32[] add(%Arg_0.2251, %Arg_1.2187)
}

%region_12.252._custom_call_lowering_rule.12 (Arg_0.995: s32[], Arg_1.933: s32[]) -> s32[] {
  %Arg_0.995 = s32[] parameter(0)
  ROOT %Arg_1.933 = s32[] parameter(1)
}

%region_326.16206 (Arg_0.16203: f32[], Arg_1.16204: f32[]) -> f32[] {
  %Arg_0.16203 = f32[] parameter(0)
  %Arg_1.16204 = f32[] parameter(1)
  ROOT %add.16205 = f32[] add(%Arg_0.16203, %Arg_1.16204)
}

%region_337.16645 (Arg_0.16642: f32[], Arg_1.16643: f32[]) -> f32[] {
  %Arg_0.16642 = f32[] parameter(0)
  %Arg_1.16643 = f32[] parameter(1)
  ROOT %add.16644 = f32[] add(%Arg_0.16642, %Arg_1.16643)
}

%region_343.16932 (Arg_0.16929: f32[], Arg_1.16930: f32[]) -> f32[] {
  %Arg_0.16929 = f32[] parameter(0)
  %Arg_1.16930 = f32[] parameter(1)
  ROOT %add.16931 = f32[] add(%Arg_0.16929, %Arg_1.16930)
}

%region_346.17003 (Arg_0.17000: f32[], Arg_1.17001: f32[]) -> f32[] {
  %Arg_0.17000 = f32[] parameter(0)
  %Arg_1.17001 = f32[] parameter(1)
  ROOT %add.17002 = f32[] add(%Arg_0.17000, %Arg_1.17001)
}

%region_340.16907 (Arg_0.16904: s32[], Arg_1.16905: s32[]) -> s32[] {
  %Arg_0.16904 = s32[] parameter(0)
  %Arg_1.16905 = s32[] parameter(1)
  ROOT %add.16906 = s32[] add(%Arg_0.16904, %Arg_1.16905)
}

%region_341.16915 (Arg_0.16912: s32[], Arg_1.16913: s32[]) -> s32[] {
  %Arg_0.16912 = s32[] parameter(0)
  %Arg_1.16913 = s32[] parameter(1)
  ROOT %add.16914 = s32[] add(%Arg_0.16912, %Arg_1.16913)
}

%region_342.16920 (Arg_0.16917: s32[], Arg_1.16918: s32[]) -> s32[] {
  %Arg_0.16917 = s32[] parameter(0)
  %Arg_1.16918 = s32[] parameter(1)
  ROOT %maximum.16919 = s32[] maximum(%Arg_0.16917, %Arg_1.16918)
}

%region_0.42._custom_call_lowering_rule.13 (Arg_0.1002: s32[], Arg_1.940: s32[]) -> s32[] {
  %Arg_0.1002 = s32[] parameter(0)
  %Arg_1.940 = s32[] parameter(1)
  ROOT %add.979 = s32[] add(%Arg_0.1002, %Arg_1.940)
}

%region_7.198._custom_call_lowering_rule.13 (Arg_0.1003: s32[], Arg_1.941: s32[]) -> s32[] {
  %Arg_0.1003 = s32[] parameter(0)
  ROOT %Arg_1.941 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.13.clone (Arg_0.2252: s32[], Arg_1.2188: s32[]) -> s32[] {
  %Arg_0.2252 = s32[] parameter(0)
  %Arg_1.2188 = s32[] parameter(1)
  ROOT %add.7511 = s32[] add(%Arg_0.2252, %Arg_1.2188)
}

%region_12.252._custom_call_lowering_rule.13 (Arg_0.1008: s32[], Arg_1.946: s32[]) -> s32[] {
  %Arg_0.1008 = s32[] parameter(0)
  ROOT %Arg_1.946 = s32[] parameter(1)
}

%region_339.16698 (Arg_0.16695: f32[], Arg_1.16696: f32[]) -> f32[] {
  %Arg_0.16695 = f32[] parameter(0)
  %Arg_1.16696 = f32[] parameter(1)
  ROOT %add.16697 = f32[] add(%Arg_0.16695, %Arg_1.16696)
}

%region_350.17137 (Arg_0.17134: f32[], Arg_1.17135: f32[]) -> f32[] {
  %Arg_0.17134 = f32[] parameter(0)
  %Arg_1.17135 = f32[] parameter(1)
  ROOT %add.17136 = f32[] add(%Arg_0.17134, %Arg_1.17135)
}

%region_356.17424 (Arg_0.17421: f32[], Arg_1.17422: f32[]) -> f32[] {
  %Arg_0.17421 = f32[] parameter(0)
  %Arg_1.17422 = f32[] parameter(1)
  ROOT %add.17423 = f32[] add(%Arg_0.17421, %Arg_1.17422)
}

%region_359.17495 (Arg_0.17492: f32[], Arg_1.17493: f32[]) -> f32[] {
  %Arg_0.17492 = f32[] parameter(0)
  %Arg_1.17493 = f32[] parameter(1)
  ROOT %add.17494 = f32[] add(%Arg_0.17492, %Arg_1.17493)
}

%region_353.17399 (Arg_0.17396: s32[], Arg_1.17397: s32[]) -> s32[] {
  %Arg_0.17396 = s32[] parameter(0)
  %Arg_1.17397 = s32[] parameter(1)
  ROOT %add.17398 = s32[] add(%Arg_0.17396, %Arg_1.17397)
}

%region_354.17407 (Arg_0.17404: s32[], Arg_1.17405: s32[]) -> s32[] {
  %Arg_0.17404 = s32[] parameter(0)
  %Arg_1.17405 = s32[] parameter(1)
  ROOT %add.17406 = s32[] add(%Arg_0.17404, %Arg_1.17405)
}

%region_355.17412 (Arg_0.17409: s32[], Arg_1.17410: s32[]) -> s32[] {
  %Arg_0.17409 = s32[] parameter(0)
  %Arg_1.17410 = s32[] parameter(1)
  ROOT %maximum.17411 = s32[] maximum(%Arg_0.17409, %Arg_1.17410)
}

%region_0.42._custom_call_lowering_rule.14 (Arg_0.1015: s32[], Arg_1.953: s32[]) -> s32[] {
  %Arg_0.1015 = s32[] parameter(0)
  %Arg_1.953 = s32[] parameter(1)
  ROOT %add.985 = s32[] add(%Arg_0.1015, %Arg_1.953)
}

%region_7.198._custom_call_lowering_rule.14 (Arg_0.1016: s32[], Arg_1.954: s32[]) -> s32[] {
  %Arg_0.1016 = s32[] parameter(0)
  ROOT %Arg_1.954 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.14.clone (Arg_0.2253: s32[], Arg_1.2189: s32[]) -> s32[] {
  %Arg_0.2253 = s32[] parameter(0)
  %Arg_1.2189 = s32[] parameter(1)
  ROOT %add.7512 = s32[] add(%Arg_0.2253, %Arg_1.2189)
}

%region_12.252._custom_call_lowering_rule.14 (Arg_0.1021: s32[], Arg_1.959: s32[]) -> s32[] {
  %Arg_0.1021 = s32[] parameter(0)
  ROOT %Arg_1.959 = s32[] parameter(1)
}

%region_352.17190 (Arg_0.17187: f32[], Arg_1.17188: f32[]) -> f32[] {
  %Arg_0.17187 = f32[] parameter(0)
  %Arg_1.17188 = f32[] parameter(1)
  ROOT %add.17189 = f32[] add(%Arg_0.17187, %Arg_1.17188)
}

%region_363.17629 (Arg_0.17626: f32[], Arg_1.17627: f32[]) -> f32[] {
  %Arg_0.17626 = f32[] parameter(0)
  %Arg_1.17627 = f32[] parameter(1)
  ROOT %add.17628 = f32[] add(%Arg_0.17626, %Arg_1.17627)
}

%region_369.17916 (Arg_0.17913: f32[], Arg_1.17914: f32[]) -> f32[] {
  %Arg_0.17913 = f32[] parameter(0)
  %Arg_1.17914 = f32[] parameter(1)
  ROOT %add.17915 = f32[] add(%Arg_0.17913, %Arg_1.17914)
}

%region_372.17987 (Arg_0.17984: f32[], Arg_1.17985: f32[]) -> f32[] {
  %Arg_0.17984 = f32[] parameter(0)
  %Arg_1.17985 = f32[] parameter(1)
  ROOT %add.17986 = f32[] add(%Arg_0.17984, %Arg_1.17985)
}

%region_366.17891 (Arg_0.17888: s32[], Arg_1.17889: s32[]) -> s32[] {
  %Arg_0.17888 = s32[] parameter(0)
  %Arg_1.17889 = s32[] parameter(1)
  ROOT %add.17890 = s32[] add(%Arg_0.17888, %Arg_1.17889)
}

%region_367.17899 (Arg_0.17896: s32[], Arg_1.17897: s32[]) -> s32[] {
  %Arg_0.17896 = s32[] parameter(0)
  %Arg_1.17897 = s32[] parameter(1)
  ROOT %add.17898 = s32[] add(%Arg_0.17896, %Arg_1.17897)
}

%region_368.17904 (Arg_0.17901: s32[], Arg_1.17902: s32[]) -> s32[] {
  %Arg_0.17901 = s32[] parameter(0)
  %Arg_1.17902 = s32[] parameter(1)
  ROOT %maximum.17903 = s32[] maximum(%Arg_0.17901, %Arg_1.17902)
}

%region_0.42._custom_call_lowering_rule.15 (Arg_0.1028: s32[], Arg_1.966: s32[]) -> s32[] {
  %Arg_0.1028 = s32[] parameter(0)
  %Arg_1.966 = s32[] parameter(1)
  ROOT %add.991 = s32[] add(%Arg_0.1028, %Arg_1.966)
}

%region_7.198._custom_call_lowering_rule.15 (Arg_0.1029: s32[], Arg_1.967: s32[]) -> s32[] {
  %Arg_0.1029 = s32[] parameter(0)
  ROOT %Arg_1.967 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.15.clone (Arg_0.2254: s32[], Arg_1.2190: s32[]) -> s32[] {
  %Arg_0.2254 = s32[] parameter(0)
  %Arg_1.2190 = s32[] parameter(1)
  ROOT %add.7513 = s32[] add(%Arg_0.2254, %Arg_1.2190)
}

%region_12.252._custom_call_lowering_rule.15 (Arg_0.1034: s32[], Arg_1.972: s32[]) -> s32[] {
  %Arg_0.1034 = s32[] parameter(0)
  ROOT %Arg_1.972 = s32[] parameter(1)
}

%region_365.17682 (Arg_0.17679: f32[], Arg_1.17680: f32[]) -> f32[] {
  %Arg_0.17679 = f32[] parameter(0)
  %Arg_1.17680 = f32[] parameter(1)
  ROOT %add.17681 = f32[] add(%Arg_0.17679, %Arg_1.17680)
}

%region_376.18121 (Arg_0.18118: f32[], Arg_1.18119: f32[]) -> f32[] {
  %Arg_0.18118 = f32[] parameter(0)
  %Arg_1.18119 = f32[] parameter(1)
  ROOT %add.18120 = f32[] add(%Arg_0.18118, %Arg_1.18119)
}

%region_382.18408 (Arg_0.18405: f32[], Arg_1.18406: f32[]) -> f32[] {
  %Arg_0.18405 = f32[] parameter(0)
  %Arg_1.18406 = f32[] parameter(1)
  ROOT %add.18407 = f32[] add(%Arg_0.18405, %Arg_1.18406)
}

%region_385.18479 (Arg_0.18476: f32[], Arg_1.18477: f32[]) -> f32[] {
  %Arg_0.18476 = f32[] parameter(0)
  %Arg_1.18477 = f32[] parameter(1)
  ROOT %add.18478 = f32[] add(%Arg_0.18476, %Arg_1.18477)
}

%region_379.18383 (Arg_0.18380: s32[], Arg_1.18381: s32[]) -> s32[] {
  %Arg_0.18380 = s32[] parameter(0)
  %Arg_1.18381 = s32[] parameter(1)
  ROOT %add.18382 = s32[] add(%Arg_0.18380, %Arg_1.18381)
}

%region_380.18391 (Arg_0.18388: s32[], Arg_1.18389: s32[]) -> s32[] {
  %Arg_0.18388 = s32[] parameter(0)
  %Arg_1.18389 = s32[] parameter(1)
  ROOT %add.18390 = s32[] add(%Arg_0.18388, %Arg_1.18389)
}

%region_381.18396 (Arg_0.18393: s32[], Arg_1.18394: s32[]) -> s32[] {
  %Arg_0.18393 = s32[] parameter(0)
  %Arg_1.18394 = s32[] parameter(1)
  ROOT %maximum.18395 = s32[] maximum(%Arg_0.18393, %Arg_1.18394)
}

%region_0.42._custom_call_lowering_rule.16 (Arg_0.1041: s32[], Arg_1.979: s32[]) -> s32[] {
  %Arg_0.1041 = s32[] parameter(0)
  %Arg_1.979 = s32[] parameter(1)
  ROOT %add.997 = s32[] add(%Arg_0.1041, %Arg_1.979)
}

%region_7.198._custom_call_lowering_rule.16 (Arg_0.1042: s32[], Arg_1.980: s32[]) -> s32[] {
  %Arg_0.1042 = s32[] parameter(0)
  ROOT %Arg_1.980 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.16.clone (Arg_0.2255: s32[], Arg_1.2191: s32[]) -> s32[] {
  %Arg_0.2255 = s32[] parameter(0)
  %Arg_1.2191 = s32[] parameter(1)
  ROOT %add.7514 = s32[] add(%Arg_0.2255, %Arg_1.2191)
}

%region_12.252._custom_call_lowering_rule.16 (Arg_0.1047: s32[], Arg_1.985: s32[]) -> s32[] {
  %Arg_0.1047 = s32[] parameter(0)
  ROOT %Arg_1.985 = s32[] parameter(1)
}

%region_378.18174 (Arg_0.18171: f32[], Arg_1.18172: f32[]) -> f32[] {
  %Arg_0.18171 = f32[] parameter(0)
  %Arg_1.18172 = f32[] parameter(1)
  ROOT %add.18173 = f32[] add(%Arg_0.18171, %Arg_1.18172)
}

%region_389.18613 (Arg_0.18610: f32[], Arg_1.18611: f32[]) -> f32[] {
  %Arg_0.18610 = f32[] parameter(0)
  %Arg_1.18611 = f32[] parameter(1)
  ROOT %add.18612 = f32[] add(%Arg_0.18610, %Arg_1.18611)
}

%region_395.18900 (Arg_0.18897: f32[], Arg_1.18898: f32[]) -> f32[] {
  %Arg_0.18897 = f32[] parameter(0)
  %Arg_1.18898 = f32[] parameter(1)
  ROOT %add.18899 = f32[] add(%Arg_0.18897, %Arg_1.18898)
}

%region_398.18971 (Arg_0.18968: f32[], Arg_1.18969: f32[]) -> f32[] {
  %Arg_0.18968 = f32[] parameter(0)
  %Arg_1.18969 = f32[] parameter(1)
  ROOT %add.18970 = f32[] add(%Arg_0.18968, %Arg_1.18969)
}

%region_392.18875 (Arg_0.18872: s32[], Arg_1.18873: s32[]) -> s32[] {
  %Arg_0.18872 = s32[] parameter(0)
  %Arg_1.18873 = s32[] parameter(1)
  ROOT %add.18874 = s32[] add(%Arg_0.18872, %Arg_1.18873)
}

%region_393.18883 (Arg_0.18880: s32[], Arg_1.18881: s32[]) -> s32[] {
  %Arg_0.18880 = s32[] parameter(0)
  %Arg_1.18881 = s32[] parameter(1)
  ROOT %add.18882 = s32[] add(%Arg_0.18880, %Arg_1.18881)
}

%region_394.18888 (Arg_0.18885: s32[], Arg_1.18886: s32[]) -> s32[] {
  %Arg_0.18885 = s32[] parameter(0)
  %Arg_1.18886 = s32[] parameter(1)
  ROOT %maximum.18887 = s32[] maximum(%Arg_0.18885, %Arg_1.18886)
}

%region_0.42._custom_call_lowering_rule.17 (Arg_0.1055: s32[], Arg_1.992: s32[]) -> s32[] {
  %Arg_0.1055 = s32[] parameter(0)
  %Arg_1.992 = s32[] parameter(1)
  ROOT %add.1003 = s32[] add(%Arg_0.1055, %Arg_1.992)
}

%region_7.198._custom_call_lowering_rule.17 (Arg_0.1056: s32[], Arg_1.993: s32[]) -> s32[] {
  %Arg_0.1056 = s32[] parameter(0)
  ROOT %Arg_1.993 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.17.clone (Arg_0.2256: s32[], Arg_1.2192: s32[]) -> s32[] {
  %Arg_0.2256 = s32[] parameter(0)
  %Arg_1.2192 = s32[] parameter(1)
  ROOT %add.7515 = s32[] add(%Arg_0.2256, %Arg_1.2192)
}

%region_12.252._custom_call_lowering_rule.17 (Arg_0.1061: s32[], Arg_1.998: s32[]) -> s32[] {
  %Arg_0.1061 = s32[] parameter(0)
  ROOT %Arg_1.998 = s32[] parameter(1)
}

%region_391.18666 (Arg_0.18663: f32[], Arg_1.18664: f32[]) -> f32[] {
  %Arg_0.18663 = f32[] parameter(0)
  %Arg_1.18664 = f32[] parameter(1)
  ROOT %add.18665 = f32[] add(%Arg_0.18663, %Arg_1.18664)
}

%region_402.19105 (Arg_0.19102: f32[], Arg_1.19103: f32[]) -> f32[] {
  %Arg_0.19102 = f32[] parameter(0)
  %Arg_1.19103 = f32[] parameter(1)
  ROOT %add.19104 = f32[] add(%Arg_0.19102, %Arg_1.19103)
}

%region_408.19392 (Arg_0.19389: f32[], Arg_1.19390: f32[]) -> f32[] {
  %Arg_0.19389 = f32[] parameter(0)
  %Arg_1.19390 = f32[] parameter(1)
  ROOT %add.19391 = f32[] add(%Arg_0.19389, %Arg_1.19390)
}

%region_411.19463 (Arg_0.19460: f32[], Arg_1.19461: f32[]) -> f32[] {
  %Arg_0.19460 = f32[] parameter(0)
  %Arg_1.19461 = f32[] parameter(1)
  ROOT %add.19462 = f32[] add(%Arg_0.19460, %Arg_1.19461)
}

%region_405.19367 (Arg_0.19364: s32[], Arg_1.19365: s32[]) -> s32[] {
  %Arg_0.19364 = s32[] parameter(0)
  %Arg_1.19365 = s32[] parameter(1)
  ROOT %add.19366 = s32[] add(%Arg_0.19364, %Arg_1.19365)
}

%region_406.19375 (Arg_0.19372: s32[], Arg_1.19373: s32[]) -> s32[] {
  %Arg_0.19372 = s32[] parameter(0)
  %Arg_1.19373 = s32[] parameter(1)
  ROOT %add.19374 = s32[] add(%Arg_0.19372, %Arg_1.19373)
}

%region_407.19380 (Arg_0.19377: s32[], Arg_1.19378: s32[]) -> s32[] {
  %Arg_0.19377 = s32[] parameter(0)
  %Arg_1.19378 = s32[] parameter(1)
  ROOT %maximum.19379 = s32[] maximum(%Arg_0.19377, %Arg_1.19378)
}

%region_0.42._custom_call_lowering_rule.18 (Arg_0.1068: s32[], Arg_1.1005: s32[]) -> s32[] {
  %Arg_0.1068 = s32[] parameter(0)
  %Arg_1.1005 = s32[] parameter(1)
  ROOT %add.1009 = s32[] add(%Arg_0.1068, %Arg_1.1005)
}

%region_7.198._custom_call_lowering_rule.18 (Arg_0.1069: s32[], Arg_1.1006: s32[]) -> s32[] {
  %Arg_0.1069 = s32[] parameter(0)
  ROOT %Arg_1.1006 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.18.clone (Arg_0.2257: s32[], Arg_1.2193: s32[]) -> s32[] {
  %Arg_0.2257 = s32[] parameter(0)
  %Arg_1.2193 = s32[] parameter(1)
  ROOT %add.7516 = s32[] add(%Arg_0.2257, %Arg_1.2193)
}

%region_12.252._custom_call_lowering_rule.18 (Arg_0.1074: s32[], Arg_1.1011: s32[]) -> s32[] {
  %Arg_0.1074 = s32[] parameter(0)
  ROOT %Arg_1.1011 = s32[] parameter(1)
}

%region_404.19158 (Arg_0.19155: f32[], Arg_1.19156: f32[]) -> f32[] {
  %Arg_0.19155 = f32[] parameter(0)
  %Arg_1.19156 = f32[] parameter(1)
  ROOT %add.19157 = f32[] add(%Arg_0.19155, %Arg_1.19156)
}

%region_415.19597 (Arg_0.19594: f32[], Arg_1.19595: f32[]) -> f32[] {
  %Arg_0.19594 = f32[] parameter(0)
  %Arg_1.19595 = f32[] parameter(1)
  ROOT %add.19596 = f32[] add(%Arg_0.19594, %Arg_1.19595)
}

%region_421.19884 (Arg_0.19881: f32[], Arg_1.19882: f32[]) -> f32[] {
  %Arg_0.19881 = f32[] parameter(0)
  %Arg_1.19882 = f32[] parameter(1)
  ROOT %add.19883 = f32[] add(%Arg_0.19881, %Arg_1.19882)
}

%region_424.19955 (Arg_0.19952: f32[], Arg_1.19953: f32[]) -> f32[] {
  %Arg_0.19952 = f32[] parameter(0)
  %Arg_1.19953 = f32[] parameter(1)
  ROOT %add.19954 = f32[] add(%Arg_0.19952, %Arg_1.19953)
}

%region_418.19859 (Arg_0.19856: s32[], Arg_1.19857: s32[]) -> s32[] {
  %Arg_0.19856 = s32[] parameter(0)
  %Arg_1.19857 = s32[] parameter(1)
  ROOT %add.19858 = s32[] add(%Arg_0.19856, %Arg_1.19857)
}

%region_419.19867 (Arg_0.19864: s32[], Arg_1.19865: s32[]) -> s32[] {
  %Arg_0.19864 = s32[] parameter(0)
  %Arg_1.19865 = s32[] parameter(1)
  ROOT %add.19866 = s32[] add(%Arg_0.19864, %Arg_1.19865)
}

%region_420.19872 (Arg_0.19869: s32[], Arg_1.19870: s32[]) -> s32[] {
  %Arg_0.19869 = s32[] parameter(0)
  %Arg_1.19870 = s32[] parameter(1)
  ROOT %maximum.19871 = s32[] maximum(%Arg_0.19869, %Arg_1.19870)
}

%region_0.42._custom_call_lowering_rule.19 (Arg_0.1081: s32[], Arg_1.1018: s32[]) -> s32[] {
  %Arg_0.1081 = s32[] parameter(0)
  %Arg_1.1018 = s32[] parameter(1)
  ROOT %add.1015 = s32[] add(%Arg_0.1081, %Arg_1.1018)
}

%region_7.198._custom_call_lowering_rule.19 (Arg_0.1082: s32[], Arg_1.1019: s32[]) -> s32[] {
  %Arg_0.1082 = s32[] parameter(0)
  ROOT %Arg_1.1019 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.19.clone (Arg_0.2258: s32[], Arg_1.2194: s32[]) -> s32[] {
  %Arg_0.2258 = s32[] parameter(0)
  %Arg_1.2194 = s32[] parameter(1)
  ROOT %add.7517 = s32[] add(%Arg_0.2258, %Arg_1.2194)
}

%region_12.252._custom_call_lowering_rule.19 (Arg_0.1087: s32[], Arg_1.1024: s32[]) -> s32[] {
  %Arg_0.1087 = s32[] parameter(0)
  ROOT %Arg_1.1024 = s32[] parameter(1)
}

%region_417.19650 (Arg_0.19647: f32[], Arg_1.19648: f32[]) -> f32[] {
  %Arg_0.19647 = f32[] parameter(0)
  %Arg_1.19648 = f32[] parameter(1)
  ROOT %add.19649 = f32[] add(%Arg_0.19647, %Arg_1.19648)
}

%region_428.20089 (Arg_0.20086: f32[], Arg_1.20087: f32[]) -> f32[] {
  %Arg_0.20086 = f32[] parameter(0)
  %Arg_1.20087 = f32[] parameter(1)
  ROOT %add.20088 = f32[] add(%Arg_0.20086, %Arg_1.20087)
}

%region_434.20376 (Arg_0.20373: f32[], Arg_1.20374: f32[]) -> f32[] {
  %Arg_0.20373 = f32[] parameter(0)
  %Arg_1.20374 = f32[] parameter(1)
  ROOT %add.20375 = f32[] add(%Arg_0.20373, %Arg_1.20374)
}

%region_437.20447 (Arg_0.20444: f32[], Arg_1.20445: f32[]) -> f32[] {
  %Arg_0.20444 = f32[] parameter(0)
  %Arg_1.20445 = f32[] parameter(1)
  ROOT %add.20446 = f32[] add(%Arg_0.20444, %Arg_1.20445)
}

%region_431.20351 (Arg_0.20348: s32[], Arg_1.20349: s32[]) -> s32[] {
  %Arg_0.20348 = s32[] parameter(0)
  %Arg_1.20349 = s32[] parameter(1)
  ROOT %add.20350 = s32[] add(%Arg_0.20348, %Arg_1.20349)
}

%region_432.20359 (Arg_0.20356: s32[], Arg_1.20357: s32[]) -> s32[] {
  %Arg_0.20356 = s32[] parameter(0)
  %Arg_1.20357 = s32[] parameter(1)
  ROOT %add.20358 = s32[] add(%Arg_0.20356, %Arg_1.20357)
}

%region_433.20364 (Arg_0.20361: s32[], Arg_1.20362: s32[]) -> s32[] {
  %Arg_0.20361 = s32[] parameter(0)
  %Arg_1.20362 = s32[] parameter(1)
  ROOT %maximum.20363 = s32[] maximum(%Arg_0.20361, %Arg_1.20362)
}

%region_0.42._custom_call_lowering_rule.20 (Arg_0.1095: s32[], Arg_1.1031: s32[]) -> s32[] {
  %Arg_0.1095 = s32[] parameter(0)
  %Arg_1.1031 = s32[] parameter(1)
  ROOT %add.1021 = s32[] add(%Arg_0.1095, %Arg_1.1031)
}

%region_7.198._custom_call_lowering_rule.20 (Arg_0.1096: s32[], Arg_1.1032: s32[]) -> s32[] {
  %Arg_0.1096 = s32[] parameter(0)
  ROOT %Arg_1.1032 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.20.clone (Arg_0.2259: s32[], Arg_1.2195: s32[]) -> s32[] {
  %Arg_0.2259 = s32[] parameter(0)
  %Arg_1.2195 = s32[] parameter(1)
  ROOT %add.7518 = s32[] add(%Arg_0.2259, %Arg_1.2195)
}

%region_12.252._custom_call_lowering_rule.20 (Arg_0.1102: s32[], Arg_1.1037: s32[]) -> s32[] {
  %Arg_0.1102 = s32[] parameter(0)
  ROOT %Arg_1.1037 = s32[] parameter(1)
}

%region_430.20142 (Arg_0.20139: f32[], Arg_1.20140: f32[]) -> f32[] {
  %Arg_0.20139 = f32[] parameter(0)
  %Arg_1.20140 = f32[] parameter(1)
  ROOT %add.20141 = f32[] add(%Arg_0.20139, %Arg_1.20140)
}

%region_441.20581 (Arg_0.20578: f32[], Arg_1.20579: f32[]) -> f32[] {
  %Arg_0.20578 = f32[] parameter(0)
  %Arg_1.20579 = f32[] parameter(1)
  ROOT %add.20580 = f32[] add(%Arg_0.20578, %Arg_1.20579)
}

%region_447.20868 (Arg_0.20865: f32[], Arg_1.20866: f32[]) -> f32[] {
  %Arg_0.20865 = f32[] parameter(0)
  %Arg_1.20866 = f32[] parameter(1)
  ROOT %add.20867 = f32[] add(%Arg_0.20865, %Arg_1.20866)
}

%region_450.20939 (Arg_0.20936: f32[], Arg_1.20937: f32[]) -> f32[] {
  %Arg_0.20936 = f32[] parameter(0)
  %Arg_1.20937 = f32[] parameter(1)
  ROOT %add.20938 = f32[] add(%Arg_0.20936, %Arg_1.20937)
}

%region_444.20843 (Arg_0.20840: s32[], Arg_1.20841: s32[]) -> s32[] {
  %Arg_0.20840 = s32[] parameter(0)
  %Arg_1.20841 = s32[] parameter(1)
  ROOT %add.20842 = s32[] add(%Arg_0.20840, %Arg_1.20841)
}

%region_445.20851 (Arg_0.20848: s32[], Arg_1.20849: s32[]) -> s32[] {
  %Arg_0.20848 = s32[] parameter(0)
  %Arg_1.20849 = s32[] parameter(1)
  ROOT %add.20850 = s32[] add(%Arg_0.20848, %Arg_1.20849)
}

%region_446.20856 (Arg_0.20853: s32[], Arg_1.20854: s32[]) -> s32[] {
  %Arg_0.20853 = s32[] parameter(0)
  %Arg_1.20854 = s32[] parameter(1)
  ROOT %maximum.20855 = s32[] maximum(%Arg_0.20853, %Arg_1.20854)
}

%region_0.42._custom_call_lowering_rule.21 (Arg_0.1109: s32[], Arg_1.1044: s32[]) -> s32[] {
  %Arg_0.1109 = s32[] parameter(0)
  %Arg_1.1044 = s32[] parameter(1)
  ROOT %add.1027 = s32[] add(%Arg_0.1109, %Arg_1.1044)
}

%region_7.198._custom_call_lowering_rule.21 (Arg_0.1110: s32[], Arg_1.1045: s32[]) -> s32[] {
  %Arg_0.1110 = s32[] parameter(0)
  ROOT %Arg_1.1045 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.21.clone (Arg_0.2260: s32[], Arg_1.2196: s32[]) -> s32[] {
  %Arg_0.2260 = s32[] parameter(0)
  %Arg_1.2196 = s32[] parameter(1)
  ROOT %add.7519 = s32[] add(%Arg_0.2260, %Arg_1.2196)
}

%region_12.252._custom_call_lowering_rule.21 (Arg_0.1115: s32[], Arg_1.1050: s32[]) -> s32[] {
  %Arg_0.1115 = s32[] parameter(0)
  ROOT %Arg_1.1050 = s32[] parameter(1)
}

%region_443.20634 (Arg_0.20631: f32[], Arg_1.20632: f32[]) -> f32[] {
  %Arg_0.20631 = f32[] parameter(0)
  %Arg_1.20632 = f32[] parameter(1)
  ROOT %add.20633 = f32[] add(%Arg_0.20631, %Arg_1.20632)
}

%region_454.21073 (Arg_0.21070: f32[], Arg_1.21071: f32[]) -> f32[] {
  %Arg_0.21070 = f32[] parameter(0)
  %Arg_1.21071 = f32[] parameter(1)
  ROOT %add.21072 = f32[] add(%Arg_0.21070, %Arg_1.21071)
}

%region_460.21360 (Arg_0.21357: f32[], Arg_1.21358: f32[]) -> f32[] {
  %Arg_0.21357 = f32[] parameter(0)
  %Arg_1.21358 = f32[] parameter(1)
  ROOT %add.21359 = f32[] add(%Arg_0.21357, %Arg_1.21358)
}

%region_463.21431 (Arg_0.21428: f32[], Arg_1.21429: f32[]) -> f32[] {
  %Arg_0.21428 = f32[] parameter(0)
  %Arg_1.21429 = f32[] parameter(1)
  ROOT %add.21430 = f32[] add(%Arg_0.21428, %Arg_1.21429)
}

%region_457.21335 (Arg_0.21332: s32[], Arg_1.21333: s32[]) -> s32[] {
  %Arg_0.21332 = s32[] parameter(0)
  %Arg_1.21333 = s32[] parameter(1)
  ROOT %add.21334 = s32[] add(%Arg_0.21332, %Arg_1.21333)
}

%region_458.21343 (Arg_0.21340: s32[], Arg_1.21341: s32[]) -> s32[] {
  %Arg_0.21340 = s32[] parameter(0)
  %Arg_1.21341 = s32[] parameter(1)
  ROOT %add.21342 = s32[] add(%Arg_0.21340, %Arg_1.21341)
}

%region_459.21348 (Arg_0.21345: s32[], Arg_1.21346: s32[]) -> s32[] {
  %Arg_0.21345 = s32[] parameter(0)
  %Arg_1.21346 = s32[] parameter(1)
  ROOT %maximum.21347 = s32[] maximum(%Arg_0.21345, %Arg_1.21346)
}

%region_0.42._custom_call_lowering_rule.22 (Arg_0.1122: s32[], Arg_1.1058: s32[]) -> s32[] {
  %Arg_0.1122 = s32[] parameter(0)
  %Arg_1.1058 = s32[] parameter(1)
  ROOT %add.1033 = s32[] add(%Arg_0.1122, %Arg_1.1058)
}

%region_7.198._custom_call_lowering_rule.22 (Arg_0.1123: s32[], Arg_1.1059: s32[]) -> s32[] {
  %Arg_0.1123 = s32[] parameter(0)
  ROOT %Arg_1.1059 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.22.clone (Arg_0.2261: s32[], Arg_1.2197: s32[]) -> s32[] {
  %Arg_0.2261 = s32[] parameter(0)
  %Arg_1.2197 = s32[] parameter(1)
  ROOT %add.7520 = s32[] add(%Arg_0.2261, %Arg_1.2197)
}

%region_12.252._custom_call_lowering_rule.22 (Arg_0.1128: s32[], Arg_1.1064: s32[]) -> s32[] {
  %Arg_0.1128 = s32[] parameter(0)
  ROOT %Arg_1.1064 = s32[] parameter(1)
}

%region_456.21126 (Arg_0.21123: f32[], Arg_1.21124: f32[]) -> f32[] {
  %Arg_0.21123 = f32[] parameter(0)
  %Arg_1.21124 = f32[] parameter(1)
  ROOT %add.21125 = f32[] add(%Arg_0.21123, %Arg_1.21124)
}

%region_467.21565 (Arg_0.21562: f32[], Arg_1.21563: f32[]) -> f32[] {
  %Arg_0.21562 = f32[] parameter(0)
  %Arg_1.21563 = f32[] parameter(1)
  ROOT %add.21564 = f32[] add(%Arg_0.21562, %Arg_1.21563)
}

%region_473.21852 (Arg_0.21849: f32[], Arg_1.21850: f32[]) -> f32[] {
  %Arg_0.21849 = f32[] parameter(0)
  %Arg_1.21850 = f32[] parameter(1)
  ROOT %add.21851 = f32[] add(%Arg_0.21849, %Arg_1.21850)
}

%region_476.21923 (Arg_0.21920: f32[], Arg_1.21921: f32[]) -> f32[] {
  %Arg_0.21920 = f32[] parameter(0)
  %Arg_1.21921 = f32[] parameter(1)
  ROOT %add.21922 = f32[] add(%Arg_0.21920, %Arg_1.21921)
}

%region_470.21827 (Arg_0.21824: s32[], Arg_1.21825: s32[]) -> s32[] {
  %Arg_0.21824 = s32[] parameter(0)
  %Arg_1.21825 = s32[] parameter(1)
  ROOT %add.21826 = s32[] add(%Arg_0.21824, %Arg_1.21825)
}

%region_471.21835 (Arg_0.21832: s32[], Arg_1.21833: s32[]) -> s32[] {
  %Arg_0.21832 = s32[] parameter(0)
  %Arg_1.21833 = s32[] parameter(1)
  ROOT %add.21834 = s32[] add(%Arg_0.21832, %Arg_1.21833)
}

%region_472.21840 (Arg_0.21837: s32[], Arg_1.21838: s32[]) -> s32[] {
  %Arg_0.21837 = s32[] parameter(0)
  %Arg_1.21838 = s32[] parameter(1)
  ROOT %maximum.21839 = s32[] maximum(%Arg_0.21837, %Arg_1.21838)
}

%region_0.42._custom_call_lowering_rule.23 (Arg_0.1135: s32[], Arg_1.1071: s32[]) -> s32[] {
  %Arg_0.1135 = s32[] parameter(0)
  %Arg_1.1071 = s32[] parameter(1)
  ROOT %add.1039 = s32[] add(%Arg_0.1135, %Arg_1.1071)
}

%region_7.198._custom_call_lowering_rule.23 (Arg_0.1136: s32[], Arg_1.1072: s32[]) -> s32[] {
  %Arg_0.1136 = s32[] parameter(0)
  ROOT %Arg_1.1072 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.23.clone (Arg_0.2262: s32[], Arg_1.2198: s32[]) -> s32[] {
  %Arg_0.2262 = s32[] parameter(0)
  %Arg_1.2198 = s32[] parameter(1)
  ROOT %add.7521 = s32[] add(%Arg_0.2262, %Arg_1.2198)
}

%region_12.252._custom_call_lowering_rule.23 (Arg_0.1141: s32[], Arg_1.1077: s32[]) -> s32[] {
  %Arg_0.1141 = s32[] parameter(0)
  ROOT %Arg_1.1077 = s32[] parameter(1)
}

%region_469.21618 (Arg_0.21615: f32[], Arg_1.21616: f32[]) -> f32[] {
  %Arg_0.21615 = f32[] parameter(0)
  %Arg_1.21616 = f32[] parameter(1)
  ROOT %add.21617 = f32[] add(%Arg_0.21615, %Arg_1.21616)
}

%region_480.22057 (Arg_0.22054: f32[], Arg_1.22055: f32[]) -> f32[] {
  %Arg_0.22054 = f32[] parameter(0)
  %Arg_1.22055 = f32[] parameter(1)
  ROOT %add.22056 = f32[] add(%Arg_0.22054, %Arg_1.22055)
}

%region_486.22344 (Arg_0.22341: f32[], Arg_1.22342: f32[]) -> f32[] {
  %Arg_0.22341 = f32[] parameter(0)
  %Arg_1.22342 = f32[] parameter(1)
  ROOT %add.22343 = f32[] add(%Arg_0.22341, %Arg_1.22342)
}

%region_489.22415 (Arg_0.22412: f32[], Arg_1.22413: f32[]) -> f32[] {
  %Arg_0.22412 = f32[] parameter(0)
  %Arg_1.22413 = f32[] parameter(1)
  ROOT %add.22414 = f32[] add(%Arg_0.22412, %Arg_1.22413)
}

%region_483.22319 (Arg_0.22316: s32[], Arg_1.22317: s32[]) -> s32[] {
  %Arg_0.22316 = s32[] parameter(0)
  %Arg_1.22317 = s32[] parameter(1)
  ROOT %add.22318 = s32[] add(%Arg_0.22316, %Arg_1.22317)
}

%region_484.22327 (Arg_0.22324: s32[], Arg_1.22325: s32[]) -> s32[] {
  %Arg_0.22324 = s32[] parameter(0)
  %Arg_1.22325 = s32[] parameter(1)
  ROOT %add.22326 = s32[] add(%Arg_0.22324, %Arg_1.22325)
}

%region_485.22332 (Arg_0.22329: s32[], Arg_1.22330: s32[]) -> s32[] {
  %Arg_0.22329 = s32[] parameter(0)
  %Arg_1.22330 = s32[] parameter(1)
  ROOT %maximum.22331 = s32[] maximum(%Arg_0.22329, %Arg_1.22330)
}

%region_0.42._custom_call_lowering_rule.24 (Arg_0.1148: s32[], Arg_1.1084: s32[]) -> s32[] {
  %Arg_0.1148 = s32[] parameter(0)
  %Arg_1.1084 = s32[] parameter(1)
  ROOT %add.1045 = s32[] add(%Arg_0.1148, %Arg_1.1084)
}

%region_7.198._custom_call_lowering_rule.24 (Arg_0.1149: s32[], Arg_1.1085: s32[]) -> s32[] {
  %Arg_0.1149 = s32[] parameter(0)
  ROOT %Arg_1.1085 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.24.clone (Arg_0.2263: s32[], Arg_1.2199: s32[]) -> s32[] {
  %Arg_0.2263 = s32[] parameter(0)
  %Arg_1.2199 = s32[] parameter(1)
  ROOT %add.7522 = s32[] add(%Arg_0.2263, %Arg_1.2199)
}

%region_12.252._custom_call_lowering_rule.24 (Arg_0.1154: s32[], Arg_1.1090: s32[]) -> s32[] {
  %Arg_0.1154 = s32[] parameter(0)
  ROOT %Arg_1.1090 = s32[] parameter(1)
}

%region_482.22110 (Arg_0.22107: f32[], Arg_1.22108: f32[]) -> f32[] {
  %Arg_0.22107 = f32[] parameter(0)
  %Arg_1.22108 = f32[] parameter(1)
  ROOT %add.22109 = f32[] add(%Arg_0.22107, %Arg_1.22108)
}

%region_493.22549 (Arg_0.22546: f32[], Arg_1.22547: f32[]) -> f32[] {
  %Arg_0.22546 = f32[] parameter(0)
  %Arg_1.22547 = f32[] parameter(1)
  ROOT %add.22548 = f32[] add(%Arg_0.22546, %Arg_1.22547)
}

%region_499.22836 (Arg_0.22833: f32[], Arg_1.22834: f32[]) -> f32[] {
  %Arg_0.22833 = f32[] parameter(0)
  %Arg_1.22834 = f32[] parameter(1)
  ROOT %add.22835 = f32[] add(%Arg_0.22833, %Arg_1.22834)
}

%region_502.22907 (Arg_0.22904: f32[], Arg_1.22905: f32[]) -> f32[] {
  %Arg_0.22904 = f32[] parameter(0)
  %Arg_1.22905 = f32[] parameter(1)
  ROOT %add.22906 = f32[] add(%Arg_0.22904, %Arg_1.22905)
}

%region_496.22811 (Arg_0.22808: s32[], Arg_1.22809: s32[]) -> s32[] {
  %Arg_0.22808 = s32[] parameter(0)
  %Arg_1.22809 = s32[] parameter(1)
  ROOT %add.22810 = s32[] add(%Arg_0.22808, %Arg_1.22809)
}

%region_497.22819 (Arg_0.22816: s32[], Arg_1.22817: s32[]) -> s32[] {
  %Arg_0.22816 = s32[] parameter(0)
  %Arg_1.22817 = s32[] parameter(1)
  ROOT %add.22818 = s32[] add(%Arg_0.22816, %Arg_1.22817)
}

%region_498.22824 (Arg_0.22821: s32[], Arg_1.22822: s32[]) -> s32[] {
  %Arg_0.22821 = s32[] parameter(0)
  %Arg_1.22822 = s32[] parameter(1)
  ROOT %maximum.22823 = s32[] maximum(%Arg_0.22821, %Arg_1.22822)
}

%region_0.42._custom_call_lowering_rule.25 (Arg_0.1161: s32[], Arg_1.1098: s32[]) -> s32[] {
  %Arg_0.1161 = s32[] parameter(0)
  %Arg_1.1098 = s32[] parameter(1)
  ROOT %add.1051 = s32[] add(%Arg_0.1161, %Arg_1.1098)
}

%region_7.198._custom_call_lowering_rule.25 (Arg_0.1162: s32[], Arg_1.1099: s32[]) -> s32[] {
  %Arg_0.1162 = s32[] parameter(0)
  ROOT %Arg_1.1099 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.25.clone (Arg_0.2264: s32[], Arg_1.2200: s32[]) -> s32[] {
  %Arg_0.2264 = s32[] parameter(0)
  %Arg_1.2200 = s32[] parameter(1)
  ROOT %add.7523 = s32[] add(%Arg_0.2264, %Arg_1.2200)
}

%region_12.252._custom_call_lowering_rule.25 (Arg_0.1167: s32[], Arg_1.1105: s32[]) -> s32[] {
  %Arg_0.1167 = s32[] parameter(0)
  ROOT %Arg_1.1105 = s32[] parameter(1)
}

%region_495.22602 (Arg_0.22599: f32[], Arg_1.22600: f32[]) -> f32[] {
  %Arg_0.22599 = f32[] parameter(0)
  %Arg_1.22600 = f32[] parameter(1)
  ROOT %add.22601 = f32[] add(%Arg_0.22599, %Arg_1.22600)
}

%region_506.23041 (Arg_0.23038: f32[], Arg_1.23039: f32[]) -> f32[] {
  %Arg_0.23038 = f32[] parameter(0)
  %Arg_1.23039 = f32[] parameter(1)
  ROOT %add.23040 = f32[] add(%Arg_0.23038, %Arg_1.23039)
}

%region_512.23328 (Arg_0.23325: f32[], Arg_1.23326: f32[]) -> f32[] {
  %Arg_0.23325 = f32[] parameter(0)
  %Arg_1.23326 = f32[] parameter(1)
  ROOT %add.23327 = f32[] add(%Arg_0.23325, %Arg_1.23326)
}

%region_515.23399 (Arg_0.23396: f32[], Arg_1.23397: f32[]) -> f32[] {
  %Arg_0.23396 = f32[] parameter(0)
  %Arg_1.23397 = f32[] parameter(1)
  ROOT %add.23398 = f32[] add(%Arg_0.23396, %Arg_1.23397)
}

%region_509.23303 (Arg_0.23300: s32[], Arg_1.23301: s32[]) -> s32[] {
  %Arg_0.23300 = s32[] parameter(0)
  %Arg_1.23301 = s32[] parameter(1)
  ROOT %add.23302 = s32[] add(%Arg_0.23300, %Arg_1.23301)
}

%region_510.23311 (Arg_0.23308: s32[], Arg_1.23309: s32[]) -> s32[] {
  %Arg_0.23308 = s32[] parameter(0)
  %Arg_1.23309 = s32[] parameter(1)
  ROOT %add.23310 = s32[] add(%Arg_0.23308, %Arg_1.23309)
}

%region_511.23316 (Arg_0.23313: s32[], Arg_1.23314: s32[]) -> s32[] {
  %Arg_0.23313 = s32[] parameter(0)
  %Arg_1.23314 = s32[] parameter(1)
  ROOT %maximum.23315 = s32[] maximum(%Arg_0.23313, %Arg_1.23314)
}

%region_0.42._custom_call_lowering_rule.26 (Arg_0.1174: s32[], Arg_1.1112: s32[]) -> s32[] {
  %Arg_0.1174 = s32[] parameter(0)
  %Arg_1.1112 = s32[] parameter(1)
  ROOT %add.1058 = s32[] add(%Arg_0.1174, %Arg_1.1112)
}

%region_7.198._custom_call_lowering_rule.26 (Arg_0.1175: s32[], Arg_1.1113: s32[]) -> s32[] {
  %Arg_0.1175 = s32[] parameter(0)
  ROOT %Arg_1.1113 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.26.clone (Arg_0.2265: s32[], Arg_1.2201: s32[]) -> s32[] {
  %Arg_0.2265 = s32[] parameter(0)
  %Arg_1.2201 = s32[] parameter(1)
  ROOT %add.7524 = s32[] add(%Arg_0.2265, %Arg_1.2201)
}

%region_12.252._custom_call_lowering_rule.26 (Arg_0.1180: s32[], Arg_1.1118: s32[]) -> s32[] {
  %Arg_0.1180 = s32[] parameter(0)
  ROOT %Arg_1.1118 = s32[] parameter(1)
}

%region_508.23094 (Arg_0.23091: f32[], Arg_1.23092: f32[]) -> f32[] {
  %Arg_0.23091 = f32[] parameter(0)
  %Arg_1.23092 = f32[] parameter(1)
  ROOT %add.23093 = f32[] add(%Arg_0.23091, %Arg_1.23092)
}

%region_519.23533 (Arg_0.23530: f32[], Arg_1.23531: f32[]) -> f32[] {
  %Arg_0.23530 = f32[] parameter(0)
  %Arg_1.23531 = f32[] parameter(1)
  ROOT %add.23532 = f32[] add(%Arg_0.23530, %Arg_1.23531)
}

%region_525.23820 (Arg_0.23817: f32[], Arg_1.23818: f32[]) -> f32[] {
  %Arg_0.23817 = f32[] parameter(0)
  %Arg_1.23818 = f32[] parameter(1)
  ROOT %add.23819 = f32[] add(%Arg_0.23817, %Arg_1.23818)
}

%region_528.23891 (Arg_0.23888: f32[], Arg_1.23889: f32[]) -> f32[] {
  %Arg_0.23888 = f32[] parameter(0)
  %Arg_1.23889 = f32[] parameter(1)
  ROOT %add.23890 = f32[] add(%Arg_0.23888, %Arg_1.23889)
}

%region_522.23795 (Arg_0.23792: s32[], Arg_1.23793: s32[]) -> s32[] {
  %Arg_0.23792 = s32[] parameter(0)
  %Arg_1.23793 = s32[] parameter(1)
  ROOT %add.23794 = s32[] add(%Arg_0.23792, %Arg_1.23793)
}

%region_523.23803 (Arg_0.23800: s32[], Arg_1.23801: s32[]) -> s32[] {
  %Arg_0.23800 = s32[] parameter(0)
  %Arg_1.23801 = s32[] parameter(1)
  ROOT %add.23802 = s32[] add(%Arg_0.23800, %Arg_1.23801)
}

%region_524.23808 (Arg_0.23805: s32[], Arg_1.23806: s32[]) -> s32[] {
  %Arg_0.23805 = s32[] parameter(0)
  %Arg_1.23806 = s32[] parameter(1)
  ROOT %maximum.23807 = s32[] maximum(%Arg_0.23805, %Arg_1.23806)
}

%region_0.42._custom_call_lowering_rule.27 (Arg_0.1187: s32[], Arg_1.1125: s32[]) -> s32[] {
  %Arg_0.1187 = s32[] parameter(0)
  %Arg_1.1125 = s32[] parameter(1)
  ROOT %add.1065 = s32[] add(%Arg_0.1187, %Arg_1.1125)
}

%region_7.198._custom_call_lowering_rule.27 (Arg_0.1188: s32[], Arg_1.1126: s32[]) -> s32[] {
  %Arg_0.1188 = s32[] parameter(0)
  ROOT %Arg_1.1126 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.27.clone (Arg_0.2266: s32[], Arg_1.2202: s32[]) -> s32[] {
  %Arg_0.2266 = s32[] parameter(0)
  %Arg_1.2202 = s32[] parameter(1)
  ROOT %add.7525 = s32[] add(%Arg_0.2266, %Arg_1.2202)
}

%region_12.252._custom_call_lowering_rule.27 (Arg_0.1193: s32[], Arg_1.1131: s32[]) -> s32[] {
  %Arg_0.1193 = s32[] parameter(0)
  ROOT %Arg_1.1131 = s32[] parameter(1)
}

%region_521.23586 (Arg_0.23583: f32[], Arg_1.23584: f32[]) -> f32[] {
  %Arg_0.23583 = f32[] parameter(0)
  %Arg_1.23584 = f32[] parameter(1)
  ROOT %add.23585 = f32[] add(%Arg_0.23583, %Arg_1.23584)
}

%region_532.24025 (Arg_0.24022: f32[], Arg_1.24023: f32[]) -> f32[] {
  %Arg_0.24022 = f32[] parameter(0)
  %Arg_1.24023 = f32[] parameter(1)
  ROOT %add.24024 = f32[] add(%Arg_0.24022, %Arg_1.24023)
}

%region_538.24312 (Arg_0.24309: f32[], Arg_1.24310: f32[]) -> f32[] {
  %Arg_0.24309 = f32[] parameter(0)
  %Arg_1.24310 = f32[] parameter(1)
  ROOT %add.24311 = f32[] add(%Arg_0.24309, %Arg_1.24310)
}

%region_541.24383 (Arg_0.24380: f32[], Arg_1.24381: f32[]) -> f32[] {
  %Arg_0.24380 = f32[] parameter(0)
  %Arg_1.24381 = f32[] parameter(1)
  ROOT %add.24382 = f32[] add(%Arg_0.24380, %Arg_1.24381)
}

%region_535.24287 (Arg_0.24284: s32[], Arg_1.24285: s32[]) -> s32[] {
  %Arg_0.24284 = s32[] parameter(0)
  %Arg_1.24285 = s32[] parameter(1)
  ROOT %add.24286 = s32[] add(%Arg_0.24284, %Arg_1.24285)
}

%region_536.24295 (Arg_0.24292: s32[], Arg_1.24293: s32[]) -> s32[] {
  %Arg_0.24292 = s32[] parameter(0)
  %Arg_1.24293 = s32[] parameter(1)
  ROOT %add.24294 = s32[] add(%Arg_0.24292, %Arg_1.24293)
}

%region_537.24300 (Arg_0.24297: s32[], Arg_1.24298: s32[]) -> s32[] {
  %Arg_0.24297 = s32[] parameter(0)
  %Arg_1.24298 = s32[] parameter(1)
  ROOT %maximum.24299 = s32[] maximum(%Arg_0.24297, %Arg_1.24298)
}

%region_0.42._custom_call_lowering_rule.28 (Arg_0.1200: s32[], Arg_1.1138: s32[]) -> s32[] {
  %Arg_0.1200 = s32[] parameter(0)
  %Arg_1.1138 = s32[] parameter(1)
  ROOT %add.1071 = s32[] add(%Arg_0.1200, %Arg_1.1138)
}

%region_7.198._custom_call_lowering_rule.28 (Arg_0.1201: s32[], Arg_1.1139: s32[]) -> s32[] {
  %Arg_0.1201 = s32[] parameter(0)
  ROOT %Arg_1.1139 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.28.clone (Arg_0.2267: s32[], Arg_1.2203: s32[]) -> s32[] {
  %Arg_0.2267 = s32[] parameter(0)
  %Arg_1.2203 = s32[] parameter(1)
  ROOT %add.7526 = s32[] add(%Arg_0.2267, %Arg_1.2203)
}

%region_12.252._custom_call_lowering_rule.28 (Arg_0.1206: s32[], Arg_1.1144: s32[]) -> s32[] {
  %Arg_0.1206 = s32[] parameter(0)
  ROOT %Arg_1.1144 = s32[] parameter(1)
}

%region_534.24078 (Arg_0.24075: f32[], Arg_1.24076: f32[]) -> f32[] {
  %Arg_0.24075 = f32[] parameter(0)
  %Arg_1.24076 = f32[] parameter(1)
  ROOT %add.24077 = f32[] add(%Arg_0.24075, %Arg_1.24076)
}

%region_545.24517 (Arg_0.24514: f32[], Arg_1.24515: f32[]) -> f32[] {
  %Arg_0.24514 = f32[] parameter(0)
  %Arg_1.24515 = f32[] parameter(1)
  ROOT %add.24516 = f32[] add(%Arg_0.24514, %Arg_1.24515)
}

%region_551.24804 (Arg_0.24801: f32[], Arg_1.24802: f32[]) -> f32[] {
  %Arg_0.24801 = f32[] parameter(0)
  %Arg_1.24802 = f32[] parameter(1)
  ROOT %add.24803 = f32[] add(%Arg_0.24801, %Arg_1.24802)
}

%region_554.24875 (Arg_0.24872: f32[], Arg_1.24873: f32[]) -> f32[] {
  %Arg_0.24872 = f32[] parameter(0)
  %Arg_1.24873 = f32[] parameter(1)
  ROOT %add.24874 = f32[] add(%Arg_0.24872, %Arg_1.24873)
}

%region_548.24779 (Arg_0.24776: s32[], Arg_1.24777: s32[]) -> s32[] {
  %Arg_0.24776 = s32[] parameter(0)
  %Arg_1.24777 = s32[] parameter(1)
  ROOT %add.24778 = s32[] add(%Arg_0.24776, %Arg_1.24777)
}

%region_549.24787 (Arg_0.24784: s32[], Arg_1.24785: s32[]) -> s32[] {
  %Arg_0.24784 = s32[] parameter(0)
  %Arg_1.24785 = s32[] parameter(1)
  ROOT %add.24786 = s32[] add(%Arg_0.24784, %Arg_1.24785)
}

%region_550.24792 (Arg_0.24789: s32[], Arg_1.24790: s32[]) -> s32[] {
  %Arg_0.24789 = s32[] parameter(0)
  %Arg_1.24790 = s32[] parameter(1)
  ROOT %maximum.24791 = s32[] maximum(%Arg_0.24789, %Arg_1.24790)
}

%region_0.42._custom_call_lowering_rule.29 (Arg_0.1213: s32[], Arg_1.1151: s32[]) -> s32[] {
  %Arg_0.1213 = s32[] parameter(0)
  %Arg_1.1151 = s32[] parameter(1)
  ROOT %add.1077 = s32[] add(%Arg_0.1213, %Arg_1.1151)
}

%region_7.198._custom_call_lowering_rule.29 (Arg_0.1214: s32[], Arg_1.1152: s32[]) -> s32[] {
  %Arg_0.1214 = s32[] parameter(0)
  ROOT %Arg_1.1152 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.29.clone (Arg_0.2268: s32[], Arg_1.2204: s32[]) -> s32[] {
  %Arg_0.2268 = s32[] parameter(0)
  %Arg_1.2204 = s32[] parameter(1)
  ROOT %add.7527 = s32[] add(%Arg_0.2268, %Arg_1.2204)
}

%region_12.252._custom_call_lowering_rule.29 (Arg_0.1219: s32[], Arg_1.1157: s32[]) -> s32[] {
  %Arg_0.1219 = s32[] parameter(0)
  ROOT %Arg_1.1157 = s32[] parameter(1)
}

%region_547.24570 (Arg_0.24567: f32[], Arg_1.24568: f32[]) -> f32[] {
  %Arg_0.24567 = f32[] parameter(0)
  %Arg_1.24568 = f32[] parameter(1)
  ROOT %add.24569 = f32[] add(%Arg_0.24567, %Arg_1.24568)
}

%region_558.25009 (Arg_0.25006: f32[], Arg_1.25007: f32[]) -> f32[] {
  %Arg_0.25006 = f32[] parameter(0)
  %Arg_1.25007 = f32[] parameter(1)
  ROOT %add.25008 = f32[] add(%Arg_0.25006, %Arg_1.25007)
}

%region_564.25296 (Arg_0.25293: f32[], Arg_1.25294: f32[]) -> f32[] {
  %Arg_0.25293 = f32[] parameter(0)
  %Arg_1.25294 = f32[] parameter(1)
  ROOT %add.25295 = f32[] add(%Arg_0.25293, %Arg_1.25294)
}

%region_567.25367 (Arg_0.25364: f32[], Arg_1.25365: f32[]) -> f32[] {
  %Arg_0.25364 = f32[] parameter(0)
  %Arg_1.25365 = f32[] parameter(1)
  ROOT %add.25366 = f32[] add(%Arg_0.25364, %Arg_1.25365)
}

%region_561.25271 (Arg_0.25268: s32[], Arg_1.25269: s32[]) -> s32[] {
  %Arg_0.25268 = s32[] parameter(0)
  %Arg_1.25269 = s32[] parameter(1)
  ROOT %add.25270 = s32[] add(%Arg_0.25268, %Arg_1.25269)
}

%region_562.25279 (Arg_0.25276: s32[], Arg_1.25277: s32[]) -> s32[] {
  %Arg_0.25276 = s32[] parameter(0)
  %Arg_1.25277 = s32[] parameter(1)
  ROOT %add.25278 = s32[] add(%Arg_0.25276, %Arg_1.25277)
}

%region_563.25284 (Arg_0.25281: s32[], Arg_1.25282: s32[]) -> s32[] {
  %Arg_0.25281 = s32[] parameter(0)
  %Arg_1.25282 = s32[] parameter(1)
  ROOT %maximum.25283 = s32[] maximum(%Arg_0.25281, %Arg_1.25282)
}

%region_0.42._custom_call_lowering_rule.30 (Arg_0.1226: s32[], Arg_1.1164: s32[]) -> s32[] {
  %Arg_0.1226 = s32[] parameter(0)
  %Arg_1.1164 = s32[] parameter(1)
  ROOT %add.1083 = s32[] add(%Arg_0.1226, %Arg_1.1164)
}

%region_7.198._custom_call_lowering_rule.30 (Arg_0.1227: s32[], Arg_1.1165: s32[]) -> s32[] {
  %Arg_0.1227 = s32[] parameter(0)
  ROOT %Arg_1.1165 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.30.clone (Arg_0.2269: s32[], Arg_1.2205: s32[]) -> s32[] {
  %Arg_0.2269 = s32[] parameter(0)
  %Arg_1.2205 = s32[] parameter(1)
  ROOT %add.7528 = s32[] add(%Arg_0.2269, %Arg_1.2205)
}

%region_12.252._custom_call_lowering_rule.30 (Arg_0.1232: s32[], Arg_1.1170: s32[]) -> s32[] {
  %Arg_0.1232 = s32[] parameter(0)
  ROOT %Arg_1.1170 = s32[] parameter(1)
}

%region_560.25062 (Arg_0.25059: f32[], Arg_1.25060: f32[]) -> f32[] {
  %Arg_0.25059 = f32[] parameter(0)
  %Arg_1.25060 = f32[] parameter(1)
  ROOT %add.25061 = f32[] add(%Arg_0.25059, %Arg_1.25060)
}

%region_571.25501 (Arg_0.25498: f32[], Arg_1.25499: f32[]) -> f32[] {
  %Arg_0.25498 = f32[] parameter(0)
  %Arg_1.25499 = f32[] parameter(1)
  ROOT %add.25500 = f32[] add(%Arg_0.25498, %Arg_1.25499)
}

%region_577.25788 (Arg_0.25785: f32[], Arg_1.25786: f32[]) -> f32[] {
  %Arg_0.25785 = f32[] parameter(0)
  %Arg_1.25786 = f32[] parameter(1)
  ROOT %add.25787 = f32[] add(%Arg_0.25785, %Arg_1.25786)
}

%add.clone (x.1: bf16[], y.1: bf16[]) -> bf16[] {
  %x.1 = bf16[] parameter(0)
  %y.1 = bf16[] parameter(1)
  ROOT %add.1087 = bf16[] add(%x.1, %y.1)
}

%region_587.26027 (Arg_0.26024: f32[], Arg_1.26025: f32[]) -> f32[] {
  %Arg_0.26024 = f32[] parameter(0)
  %Arg_1.26025 = f32[] parameter(1)
  ROOT %add.26026 = f32[] add(%Arg_0.26024, %Arg_1.26025)
}

%region_587.26027.clone (Arg_0.1233: f32[], Arg_1.1171: f32[]) -> f32[] {
  %Arg_0.1233 = f32[] parameter(0)
  %Arg_1.1171 = f32[] parameter(1)
  ROOT %add.1088 = f32[] add(%Arg_0.1233, %Arg_1.1171)
}

%add.1.clone (x.3: bf16[], y.3: bf16[]) -> bf16[] {
  %x.3 = bf16[] parameter(0)
  %y.3 = bf16[] parameter(1)
  ROOT %add.1090 = bf16[] add(%x.3, %y.3)
}

%region_588.26034 (Arg_0.26031: f32[], Arg_1.26032: f32[]) -> f32[] {
  %Arg_0.26031 = f32[] parameter(0)
  %Arg_1.26032 = f32[] parameter(1)
  ROOT %add.26033 = f32[] add(%Arg_0.26031, %Arg_1.26032)
}

%region_588.26034.clone (Arg_0.1234: f32[], Arg_1.1172: f32[]) -> f32[] {
  %Arg_0.1234 = f32[] parameter(0)
  %Arg_1.1172 = f32[] parameter(1)
  ROOT %add.1091 = f32[] add(%Arg_0.1234, %Arg_1.1172)
}

%add.2.clone (x.5: bf16[], y.5: bf16[]) -> bf16[] {
  %x.5 = bf16[] parameter(0)
  %y.5 = bf16[] parameter(1)
  ROOT %add.1093 = bf16[] add(%x.5, %y.5)
}

%region_589.26041 (Arg_0.26038: f32[], Arg_1.26039: f32[]) -> f32[] {
  %Arg_0.26038 = f32[] parameter(0)
  %Arg_1.26039 = f32[] parameter(1)
  ROOT %add.26040 = f32[] add(%Arg_0.26038, %Arg_1.26039)
}

%region_589.26041.clone (Arg_0.1235: f32[], Arg_1.1173: f32[]) -> f32[] {
  %Arg_0.1235 = f32[] parameter(0)
  %Arg_1.1173 = f32[] parameter(1)
  ROOT %add.1094 = f32[] add(%Arg_0.1235, %Arg_1.1173)
}

%region_578.25841 (Arg_0.25838: bf16[], Arg_1.25839: bf16[]) -> bf16[] {
  %Arg_0.25838 = bf16[] parameter(0)
  %Arg_1.25839 = bf16[] parameter(1)
  ROOT %add.25840 = bf16[] add(%Arg_0.25838, %Arg_1.25839)
}

%region_578.25841.clone (Arg_0.1236: bf16[], Arg_1.1174: bf16[]) -> bf16[] {
  %Arg_0.1236 = bf16[] parameter(0)
  %Arg_1.1174 = bf16[] parameter(1)
  ROOT %add.1095 = bf16[] add(%Arg_0.1236, %Arg_1.1174)
}

%region_590.26048 (Arg_0.26045: f32[], Arg_1.26046: f32[]) -> f32[] {
  %Arg_0.26045 = f32[] parameter(0)
  %Arg_1.26046 = f32[] parameter(1)
  ROOT %add.26047 = f32[] add(%Arg_0.26045, %Arg_1.26046)
}

%region_573.25554 (Arg_0.25551: f32[], Arg_1.25552: f32[]) -> f32[] {
  %Arg_0.25551 = f32[] parameter(0)
  %Arg_1.25552 = f32[] parameter(1)
  ROOT %add.25553 = f32[] add(%Arg_0.25551, %Arg_1.25552)
}

%region_580.25859 (Arg_0.25856: f32[], Arg_1.25857: f32[]) -> f32[] {
  %Arg_0.25856 = f32[] parameter(0)
  %Arg_1.25857 = f32[] parameter(1)
  ROOT %add.25858 = f32[] add(%Arg_0.25856, %Arg_1.25857)
}

%region_574.25763 (Arg_0.25760: s32[], Arg_1.25761: s32[]) -> s32[] {
  %Arg_0.25760 = s32[] parameter(0)
  %Arg_1.25761 = s32[] parameter(1)
  ROOT %add.25762 = s32[] add(%Arg_0.25760, %Arg_1.25761)
}

%region_575.25771 (Arg_0.25768: s32[], Arg_1.25769: s32[]) -> s32[] {
  %Arg_0.25768 = s32[] parameter(0)
  %Arg_1.25769 = s32[] parameter(1)
  ROOT %add.25770 = s32[] add(%Arg_0.25768, %Arg_1.25769)
}

%region_576.25776 (Arg_0.25773: s32[], Arg_1.25774: s32[]) -> s32[] {
  %Arg_0.25773 = s32[] parameter(0)
  %Arg_1.25774 = s32[] parameter(1)
  ROOT %maximum.25775 = s32[] maximum(%Arg_0.25773, %Arg_1.25774)
}

%region_0.42._custom_call_lowering_rule.31 (Arg_0.1243: s32[], Arg_1.1181: s32[]) -> s32[] {
  %Arg_0.1243 = s32[] parameter(0)
  %Arg_1.1181 = s32[] parameter(1)
  ROOT %add.1099 = s32[] add(%Arg_0.1243, %Arg_1.1181)
}

%region_7.198._custom_call_lowering_rule.31 (Arg_0.1244: s32[], Arg_1.1182: s32[]) -> s32[] {
  %Arg_0.1244 = s32[] parameter(0)
  ROOT %Arg_1.1182 = s32[] parameter(1)
}

%region_0.42._custom_call_lowering_rule.31.clone (Arg_0.2270: s32[], Arg_1.2206: s32[]) -> s32[] {
  %Arg_0.2270 = s32[] parameter(0)
  %Arg_1.2206 = s32[] parameter(1)
  ROOT %add.7529 = s32[] add(%Arg_0.2270, %Arg_1.2206)
}

%region_12.252._custom_call_lowering_rule.31 (Arg_0.1249: s32[], Arg_1.1187: s32[]) -> s32[] {
  %Arg_0.1249 = s32[] parameter(0)
  ROOT %Arg_1.1187 = s32[] parameter(1)
}

%region_582.25975 (Arg_0.25972: bf16[], Arg_1.25973: bf16[]) -> bf16[] {
  %Arg_0.25972 = bf16[] parameter(0)
  %Arg_1.25973 = bf16[] parameter(1)
  ROOT %add.25974 = bf16[] add(%Arg_0.25972, %Arg_1.25973)
}

%region_582.25975.clone (Arg_0.1250: bf16[], Arg_1.1188: bf16[]) -> bf16[] {
  %Arg_0.1250 = bf16[] parameter(0)
  %Arg_1.1188 = bf16[] parameter(1)
  ROOT %add.1102 = bf16[] add(%Arg_0.1250, %Arg_1.1188)
}

%region_591.26055 (Arg_0.26052: f32[], Arg_1.26053: f32[]) -> f32[] {
  %Arg_0.26052 = f32[] parameter(0)
  %Arg_1.26053 = f32[] parameter(1)
  ROOT %add.26054 = f32[] add(%Arg_0.26052, %Arg_1.26053)
}

%add.3.clone (x.7: bf16[], y.7: bf16[]) -> bf16[] {
  %x.7 = bf16[] parameter(0)
  %y.7 = bf16[] parameter(1)
  ROOT %add.1104 = bf16[] add(%x.7, %y.7)
}

%region_592.26062 (Arg_0.26059: f32[], Arg_1.26060: f32[]) -> f32[] {
  %Arg_0.26059 = f32[] parameter(0)
  %Arg_1.26060 = f32[] parameter(1)
  ROOT %add.26061 = f32[] add(%Arg_0.26059, %Arg_1.26060)
}

%region_592.26062.clone (Arg_0.1251: f32[], Arg_1.1189: f32[]) -> f32[] {
  %Arg_0.1251 = f32[] parameter(0)
  %Arg_1.1189 = f32[] parameter(1)
  ROOT %add.1105 = f32[] add(%Arg_0.1251, %Arg_1.1189)
}

%add.4.clone (x.9: bf16[], y.9: bf16[]) -> bf16[] {
  %x.9 = bf16[] parameter(0)
  %y.9 = bf16[] parameter(1)
  ROOT %add.1107 = bf16[] add(%x.9, %y.9)
}

%region_593.26069 (Arg_0.26066: f32[], Arg_1.26067: f32[]) -> f32[] {
  %Arg_0.26066 = f32[] parameter(0)
  %Arg_1.26067 = f32[] parameter(1)
  ROOT %add.26068 = f32[] add(%Arg_0.26066, %Arg_1.26067)
}

%region_593.26069.clone (Arg_0.1252: f32[], Arg_1.1190: f32[]) -> f32[] {
  %Arg_0.1252 = f32[] parameter(0)
  %Arg_1.1190 = f32[] parameter(1)
  ROOT %add.1108 = f32[] add(%Arg_0.1252, %Arg_1.1190)
}

%add.5.clone (x.11: bf16[], y.11: bf16[]) -> bf16[] {
  %x.11 = bf16[] parameter(0)
  %y.11 = bf16[] parameter(1)
  ROOT %add.1110 = bf16[] add(%x.11, %y.11)
}

%region_594.26076 (Arg_0.26073: f32[], Arg_1.26074: f32[]) -> f32[] {
  %Arg_0.26073 = f32[] parameter(0)
  %Arg_1.26074 = f32[] parameter(1)
  ROOT %add.26075 = f32[] add(%Arg_0.26073, %Arg_1.26074)
}

%region_594.26076.clone (Arg_0.1253: f32[], Arg_1.1191: f32[]) -> f32[] {
  %Arg_0.1253 = f32[] parameter(0)
  %Arg_1.1191 = f32[] parameter(1)
  ROOT %add.1111 = f32[] add(%Arg_0.1253, %Arg_1.1191)
}

%add.6.clone (x.13: bf16[], y.13: bf16[]) -> bf16[] {
  %x.13 = bf16[] parameter(0)
  %y.13 = bf16[] parameter(1)
  ROOT %add.1113 = bf16[] add(%x.13, %y.13)
}

%region_595.26083 (Arg_0.26080: f32[], Arg_1.26081: f32[]) -> f32[] {
  %Arg_0.26080 = f32[] parameter(0)
  %Arg_1.26081 = f32[] parameter(1)
  ROOT %add.26082 = f32[] add(%Arg_0.26080, %Arg_1.26081)
}

%region_595.26083.clone (Arg_0.1254: f32[], Arg_1.1192: f32[]) -> f32[] {
  %Arg_0.1254 = f32[] parameter(0)
  %Arg_1.1192 = f32[] parameter(1)
  ROOT %add.1114 = f32[] add(%Arg_0.1254, %Arg_1.1192)
}

%add.7.clone (x.15: bf16[], y.15: bf16[]) -> bf16[] {
  %x.15 = bf16[] parameter(0)
  %y.15 = bf16[] parameter(1)
  ROOT %add.1117 = bf16[] add(%x.15, %y.15)
}

%region_596.26090 (Arg_0.26087: f32[], Arg_1.26088: f32[]) -> f32[] {
  %Arg_0.26087 = f32[] parameter(0)
  %Arg_1.26088 = f32[] parameter(1)
  ROOT %add.26089 = f32[] add(%Arg_0.26087, %Arg_1.26088)
}

%region_596.26090.clone (Arg_0.1255: f32[], Arg_1.1193: f32[]) -> f32[] {
  %Arg_0.1255 = f32[] parameter(0)
  %Arg_1.1193 = f32[] parameter(1)
  ROOT %add.1118 = f32[] add(%Arg_0.1255, %Arg_1.1193)
}

%add.8.clone (x.17: bf16[], y.17: bf16[]) -> bf16[] {
  %x.17 = bf16[] parameter(0)
  %y.17 = bf16[] parameter(1)
  ROOT %add.1120 = bf16[] add(%x.17, %y.17)
}

%region_597.26097 (Arg_0.26094: f32[], Arg_1.26095: f32[]) -> f32[] {
  %Arg_0.26094 = f32[] parameter(0)
  %Arg_1.26095 = f32[] parameter(1)
  ROOT %add.26096 = f32[] add(%Arg_0.26094, %Arg_1.26095)
}

%region_597.26097.clone (Arg_0.1256: f32[], Arg_1.1194: f32[]) -> f32[] {
  %Arg_0.1256 = f32[] parameter(0)
  %Arg_1.1194 = f32[] parameter(1)
  ROOT %add.1121 = f32[] add(%Arg_0.1256, %Arg_1.1194)
}

%add.9.clone (x.19: bf16[], y.19: bf16[]) -> bf16[] {
  %x.19 = bf16[] parameter(0)
  %y.19 = bf16[] parameter(1)
  ROOT %add.1123 = bf16[] add(%x.19, %y.19)
}

%region_598.26104 (Arg_0.26101: f32[], Arg_1.26102: f32[]) -> f32[] {
  %Arg_0.26101 = f32[] parameter(0)
  %Arg_1.26102 = f32[] parameter(1)
  ROOT %add.26103 = f32[] add(%Arg_0.26101, %Arg_1.26102)
}

%region_598.26104.clone (Arg_0.1257: f32[], Arg_1.1195: f32[]) -> f32[] {
  %Arg_0.1257 = f32[] parameter(0)
  %Arg_1.1195 = f32[] parameter(1)
  ROOT %add.1124 = f32[] add(%Arg_0.1257, %Arg_1.1195)
}

%region_565.25349 (Arg_0.25346: bf16[], Arg_1.25347: bf16[]) -> bf16[] {
  %Arg_0.25346 = bf16[] parameter(0)
  %Arg_1.25347 = bf16[] parameter(1)
  ROOT %add.25348 = bf16[] add(%Arg_0.25346, %Arg_1.25347)
}

%region_565.25349.clone (Arg_0.1258: bf16[], Arg_1.1196: bf16[]) -> bf16[] {
  %Arg_0.1258 = bf16[] parameter(0)
  %Arg_1.1196 = bf16[] parameter(1)
  ROOT %add.1125 = bf16[] add(%Arg_0.1258, %Arg_1.1196)
}

%region_599.26111 (Arg_0.26108: f32[], Arg_1.26109: f32[]) -> f32[] {
  %Arg_0.26108 = f32[] parameter(0)
  %Arg_1.26109 = f32[] parameter(1)
  ROOT %add.26110 = f32[] add(%Arg_0.26108, %Arg_1.26109)
}

%region_569.25483 (Arg_0.25480: bf16[], Arg_1.25481: bf16[]) -> bf16[] {
  %Arg_0.25480 = bf16[] parameter(0)
  %Arg_1.25481 = bf16[] parameter(1)
  ROOT %add.25482 = bf16[] add(%Arg_0.25480, %Arg_1.25481)
}

%region_569.25483.clone (Arg_0.1259: bf16[], Arg_1.1197: bf16[]) -> bf16[] {
  %Arg_0.1259 = bf16[] parameter(0)
  %Arg_1.1197 = bf16[] parameter(1)
  ROOT %add.1126 = bf16[] add(%Arg_0.1259, %Arg_1.1197)
}

%region_600.26118 (Arg_0.26115: f32[], Arg_1.26116: f32[]) -> f32[] {
  %Arg_0.26115 = f32[] parameter(0)
  %Arg_1.26116 = f32[] parameter(1)
  ROOT %add.26117 = f32[] add(%Arg_0.26115, %Arg_1.26116)
}

%add.10.clone (x.21: bf16[], y.21: bf16[]) -> bf16[] {
  %x.21 = bf16[] parameter(0)
  %y.21 = bf16[] parameter(1)
  ROOT %add.1128 = bf16[] add(%x.21, %y.21)
}

%region_601.26125 (Arg_0.26122: f32[], Arg_1.26123: f32[]) -> f32[] {
  %Arg_0.26122 = f32[] parameter(0)
  %Arg_1.26123 = f32[] parameter(1)
  ROOT %add.26124 = f32[] add(%Arg_0.26122, %Arg_1.26123)
}

%region_601.26125.clone (Arg_0.1260: f32[], Arg_1.1198: f32[]) -> f32[] {
  %Arg_0.1260 = f32[] parameter(0)
  %Arg_1.1198 = f32[] parameter(1)
  ROOT %add.1129 = f32[] add(%Arg_0.1260, %Arg_1.1198)
}

%add.11.clone (x.23: bf16[], y.23: bf16[]) -> bf16[] {
  %x.23 = bf16[] parameter(0)
  %y.23 = bf16[] parameter(1)
  ROOT %add.1131 = bf16[] add(%x.23, %y.23)
}

%region_602.26132 (Arg_0.26129: f32[], Arg_1.26130: f32[]) -> f32[] {
  %Arg_0.26129 = f32[] parameter(0)
  %Arg_1.26130 = f32[] parameter(1)
  ROOT %add.26131 = f32[] add(%Arg_0.26129, %Arg_1.26130)
}

%region_602.26132.clone (Arg_0.1261: f32[], Arg_1.1199: f32[]) -> f32[] {
  %Arg_0.1261 = f32[] parameter(0)
  %Arg_1.1199 = f32[] parameter(1)
  ROOT %add.1132 = f32[] add(%Arg_0.1261, %Arg_1.1199)
}

%add.12.clone (x.25: bf16[], y.25: bf16[]) -> bf16[] {
  %x.25 = bf16[] parameter(0)
  %y.25 = bf16[] parameter(1)
  ROOT %add.1134 = bf16[] add(%x.25, %y.25)
}

%region_603.26139 (Arg_0.26136: f32[], Arg_1.26137: f32[]) -> f32[] {
  %Arg_0.26136 = f32[] parameter(0)
  %Arg_1.26137 = f32[] parameter(1)
  ROOT %add.26138 = f32[] add(%Arg_0.26136, %Arg_1.26137)
}

%region_603.26139.clone (Arg_0.1262: f32[], Arg_1.1200: f32[]) -> f32[] {
  %Arg_0.1262 = f32[] parameter(0)
  %Arg_1.1200 = f32[] parameter(1)
  ROOT %add.1135 = f32[] add(%Arg_0.1262, %Arg_1.1200)
}

%add.13.clone (x.27: bf16[], y.27: bf16[]) -> bf16[] {
  %x.27 = bf16[] parameter(0)
  %y.27 = bf16[] parameter(1)
  ROOT %add.1137 = bf16[] add(%x.27, %y.27)
}

%region_604.26146 (Arg_0.26143: f32[], Arg_1.26144: f32[]) -> f32[] {
  %Arg_0.26143 = f32[] parameter(0)
  %Arg_1.26144 = f32[] parameter(1)
  ROOT %add.26145 = f32[] add(%Arg_0.26143, %Arg_1.26144)
}

%region_604.26146.clone (Arg_0.1263: f32[], Arg_1.1201: f32[]) -> f32[] {
  %Arg_0.1263 = f32[] parameter(0)
  %Arg_1.1201 = f32[] parameter(1)
  ROOT %add.1138 = f32[] add(%Arg_0.1263, %Arg_1.1201)
}

%add.14.clone (x.29: bf16[], y.29: bf16[]) -> bf16[] {
  %x.29 = bf16[] parameter(0)
  %y.29 = bf16[] parameter(1)
  ROOT %add.1140 = bf16[] add(%x.29, %y.29)
}

%region_605.26153 (Arg_0.26150: f32[], Arg_1.26151: f32[]) -> f32[] {
  %Arg_0.26150 = f32[] parameter(0)
  %Arg_1.26151 = f32[] parameter(1)
  ROOT %add.26152 = f32[] add(%Arg_0.26150, %Arg_1.26151)
}

%region_605.26153.clone (Arg_0.1264: f32[], Arg_1.1202: f32[]) -> f32[] {
  %Arg_0.1264 = f32[] parameter(0)
  %Arg_1.1202 = f32[] parameter(1)
  ROOT %add.1141 = f32[] add(%Arg_0.1264, %Arg_1.1202)
}

%add.15.clone (x.31: bf16[], y.31: bf16[]) -> bf16[] {
  %x.31 = bf16[] parameter(0)
  %y.31 = bf16[] parameter(1)
  ROOT %add.1143 = bf16[] add(%x.31, %y.31)
}

%region_606.26160 (Arg_0.26157: f32[], Arg_1.26158: f32[]) -> f32[] {
  %Arg_0.26157 = f32[] parameter(0)
  %Arg_1.26158 = f32[] parameter(1)
  ROOT %add.26159 = f32[] add(%Arg_0.26157, %Arg_1.26158)
}

%region_606.26160.clone (Arg_0.1265: f32[], Arg_1.1203: f32[]) -> f32[] {
  %Arg_0.1265 = f32[] parameter(0)
  %Arg_1.1203 = f32[] parameter(1)
  ROOT %add.1144 = f32[] add(%Arg_0.1265, %Arg_1.1203)
}

%add.16.clone (x.33: bf16[], y.33: bf16[]) -> bf16[] {
  %x.33 = bf16[] parameter(0)
  %y.33 = bf16[] parameter(1)
  ROOT %add.1146 = bf16[] add(%x.33, %y.33)
}

%region_607.26167 (Arg_0.26164: f32[], Arg_1.26165: f32[]) -> f32[] {
  %Arg_0.26164 = f32[] parameter(0)
  %Arg_1.26165 = f32[] parameter(1)
  ROOT %add.26166 = f32[] add(%Arg_0.26164, %Arg_1.26165)
}

%region_607.26167.clone (Arg_0.1266: f32[], Arg_1.1204: f32[]) -> f32[] {
  %Arg_0.1266 = f32[] parameter(0)
  %Arg_1.1204 = f32[] parameter(1)
  ROOT %add.1148 = f32[] add(%Arg_0.1266, %Arg_1.1204)
}

%region_448.20921 (Arg_0.20918: bf16[], Arg_1.20919: bf16[]) -> bf16[] {
  %Arg_0.20918 = bf16[] parameter(0)
  %Arg_1.20919 = bf16[] parameter(1)
  ROOT %add.20920 = bf16[] add(%Arg_0.20918, %Arg_1.20919)
}

%region_448.20921.clone (Arg_0.1267: bf16[], Arg_1.1205: bf16[]) -> bf16[] {
  %Arg_0.1267 = bf16[] parameter(0)
  %Arg_1.1205 = bf16[] parameter(1)
  ROOT %add.1149 = bf16[] add(%Arg_0.1267, %Arg_1.1205)
}

%region_608.26174 (Arg_0.26171: f32[], Arg_1.26172: f32[]) -> f32[] {
  %Arg_0.26171 = f32[] parameter(0)
  %Arg_1.26172 = f32[] parameter(1)
  ROOT %add.26173 = f32[] add(%Arg_0.26171, %Arg_1.26172)
}

%region_452.21055 (Arg_0.21052: bf16[], Arg_1.21053: bf16[]) -> bf16[] {
  %Arg_0.21052 = bf16[] parameter(0)
  %Arg_1.21053 = bf16[] parameter(1)
  ROOT %add.21054 = bf16[] add(%Arg_0.21052, %Arg_1.21053)
}

%region_452.21055.clone (Arg_0.1268: bf16[], Arg_1.1206: bf16[]) -> bf16[] {
  %Arg_0.1268 = bf16[] parameter(0)
  %Arg_1.1206 = bf16[] parameter(1)
  ROOT %add.1150 = bf16[] add(%Arg_0.1268, %Arg_1.1206)
}

%region_609.26181 (Arg_0.26178: f32[], Arg_1.26179: f32[]) -> f32[] {
  %Arg_0.26178 = f32[] parameter(0)
  %Arg_1.26179 = f32[] parameter(1)
  ROOT %add.26180 = f32[] add(%Arg_0.26178, %Arg_1.26179)
}

%add.17.clone (x.35: bf16[], y.35: bf16[]) -> bf16[] {
  %x.35 = bf16[] parameter(0)
  %y.35 = bf16[] parameter(1)
  ROOT %add.1152 = bf16[] add(%x.35, %y.35)
}

%region_610.26188 (Arg_0.26185: f32[], Arg_1.26186: f32[]) -> f32[] {
  %Arg_0.26185 = f32[] parameter(0)
  %Arg_1.26186 = f32[] parameter(1)
  ROOT %add.26187 = f32[] add(%Arg_0.26185, %Arg_1.26186)
}

%region_610.26188.clone (Arg_0.1269: f32[], Arg_1.1207: f32[]) -> f32[] {
  %Arg_0.1269 = f32[] parameter(0)
  %Arg_1.1207 = f32[] parameter(1)
  ROOT %add.1153 = f32[] add(%Arg_0.1269, %Arg_1.1207)
}

%add.18.clone (x.37: bf16[], y.37: bf16[]) -> bf16[] {
  %x.37 = bf16[] parameter(0)
  %y.37 = bf16[] parameter(1)
  ROOT %add.1155 = bf16[] add(%x.37, %y.37)
}

%region_611.26195 (Arg_0.26192: f32[], Arg_1.26193: f32[]) -> f32[] {
  %Arg_0.26192 = f32[] parameter(0)
  %Arg_1.26193 = f32[] parameter(1)
  ROOT %add.26194 = f32[] add(%Arg_0.26192, %Arg_1.26193)
}

%region_611.26195.clone (Arg_0.1270: f32[], Arg_1.1208: f32[]) -> f32[] {
  %Arg_0.1270 = f32[] parameter(0)
  %Arg_1.1208 = f32[] parameter(1)
  ROOT %add.1156 = f32[] add(%Arg_0.1270, %Arg_1.1208)
}

%add.19.clone (x.39: bf16[], y.39: bf16[]) -> bf16[] {
  %x.39 = bf16[] parameter(0)
  %y.39 = bf16[] parameter(1)
  ROOT %add.1158 = bf16[] add(%x.39, %y.39)
}

%region_612.26202 (Arg_0.26199: f32[], Arg_1.26200: f32[]) -> f32[] {
  %Arg_0.26199 = f32[] parameter(0)
  %Arg_1.26200 = f32[] parameter(1)
  ROOT %add.26201 = f32[] add(%Arg_0.26199, %Arg_1.26200)
}

%region_612.26202.clone (Arg_0.1271: f32[], Arg_1.1209: f32[]) -> f32[] {
  %Arg_0.1271 = f32[] parameter(0)
  %Arg_1.1209 = f32[] parameter(1)
  ROOT %add.1159 = f32[] add(%Arg_0.1271, %Arg_1.1209)
}

%add.20.clone (x.41: bf16[], y.41: bf16[]) -> bf16[] {
  %x.41 = bf16[] parameter(0)
  %y.41 = bf16[] parameter(1)
  ROOT %add.1161 = bf16[] add(%x.41, %y.41)
}

%region_613.26209 (Arg_0.26206: f32[], Arg_1.26207: f32[]) -> f32[] {
  %Arg_0.26206 = f32[] parameter(0)
  %Arg_1.26207 = f32[] parameter(1)
  ROOT %add.26208 = f32[] add(%Arg_0.26206, %Arg_1.26207)
}

%region_613.26209.clone (Arg_0.1272: f32[], Arg_1.1210: f32[]) -> f32[] {
  %Arg_0.1272 = f32[] parameter(0)
  %Arg_1.1210 = f32[] parameter(1)
  ROOT %add.1162 = f32[] add(%Arg_0.1272, %Arg_1.1210)
}

%add.21.clone (x.43: bf16[], y.43: bf16[]) -> bf16[] {
  %x.43 = bf16[] parameter(0)
  %y.43 = bf16[] parameter(1)
  ROOT %add.1164 = bf16[] add(%x.43, %y.43)
}

%region_614.26216 (Arg_0.26213: f32[], Arg_1.26214: f32[]) -> f32[] {
  %Arg_0.26213 = f32[] parameter(0)
  %Arg_1.26214 = f32[] parameter(1)
  ROOT %add.26215 = f32[] add(%Arg_0.26213, %Arg_1.26214)
}

%region_614.26216.clone (Arg_0.1273: f32[], Arg_1.1211: f32[]) -> f32[] {
  %Arg_0.1273 = f32[] parameter(0)
  %Arg_1.1211 = f32[] parameter(1)
  ROOT %add.1165 = f32[] add(%Arg_0.1273, %Arg_1.1211)
}

%add.22.clone (x.45: bf16[], y.45: bf16[]) -> bf16[] {
  %x.45 = bf16[] parameter(0)
  %y.45 = bf16[] parameter(1)
  ROOT %add.1167 = bf16[] add(%x.45, %y.45)
}

%region_615.26223 (Arg_0.26220: f32[], Arg_1.26221: f32[]) -> f32[] {
  %Arg_0.26220 = f32[] parameter(0)
  %Arg_1.26221 = f32[] parameter(1)
  ROOT %add.26222 = f32[] add(%Arg_0.26220, %Arg_1.26221)
}

%region_615.26223.clone (Arg_0.1274: f32[], Arg_1.1212: f32[]) -> f32[] {
  %Arg_0.1274 = f32[] parameter(0)
  %Arg_1.1212 = f32[] parameter(1)
  ROOT %add.1168 = f32[] add(%Arg_0.1274, %Arg_1.1212)
}

%add.23.clone (x.47: bf16[], y.47: bf16[]) -> bf16[] {
  %x.47 = bf16[] parameter(0)
  %y.47 = bf16[] parameter(1)
  ROOT %add.1170 = bf16[] add(%x.47, %y.47)
}

%region_616.26230 (Arg_0.26227: f32[], Arg_1.26228: f32[]) -> f32[] {
  %Arg_0.26227 = f32[] parameter(0)
  %Arg_1.26228 = f32[] parameter(1)
  ROOT %add.26229 = f32[] add(%Arg_0.26227, %Arg_1.26228)
}

%region_616.26230.clone (Arg_0.1275: f32[], Arg_1.1213: f32[]) -> f32[] {
  %Arg_0.1275 = f32[] parameter(0)
  %Arg_1.1213 = f32[] parameter(1)
  ROOT %add.1171 = f32[] add(%Arg_0.1275, %Arg_1.1213)
}

%region_435.20429 (Arg_0.20426: bf16[], Arg_1.20427: bf16[]) -> bf16[] {
  %Arg_0.20426 = bf16[] parameter(0)
  %Arg_1.20427 = bf16[] parameter(1)
  ROOT %add.20428 = bf16[] add(%Arg_0.20426, %Arg_1.20427)
}

%region_435.20429.clone (Arg_0.1276: bf16[], Arg_1.1214: bf16[]) -> bf16[] {
  %Arg_0.1276 = bf16[] parameter(0)
  %Arg_1.1214 = bf16[] parameter(1)
  ROOT %add.1172 = bf16[] add(%Arg_0.1276, %Arg_1.1214)
}

%region_617.26237 (Arg_0.26234: f32[], Arg_1.26235: f32[]) -> f32[] {
  %Arg_0.26234 = f32[] parameter(0)
  %Arg_1.26235 = f32[] parameter(1)
  ROOT %add.26236 = f32[] add(%Arg_0.26234, %Arg_1.26235)
}

%region_439.20563 (Arg_0.20560: bf16[], Arg_1.20561: bf16[]) -> bf16[] {
  %Arg_0.20560 = bf16[] parameter(0)
  %Arg_1.20561 = bf16[] parameter(1)
  ROOT %add.20562 = bf16[] add(%Arg_0.20560, %Arg_1.20561)
}

%region_439.20563.clone (Arg_0.1277: bf16[], Arg_1.1215: bf16[]) -> bf16[] {
  %Arg_0.1277 = bf16[] parameter(0)
  %Arg_1.1215 = bf16[] parameter(1)
  ROOT %add.1173 = bf16[] add(%Arg_0.1277, %Arg_1.1215)
}

%region_618.26244 (Arg_0.26241: f32[], Arg_1.26242: f32[]) -> f32[] {
  %Arg_0.26241 = f32[] parameter(0)
  %Arg_1.26242 = f32[] parameter(1)
  ROOT %add.26243 = f32[] add(%Arg_0.26241, %Arg_1.26242)
}

%add.24.clone (x.49: bf16[], y.49: bf16[]) -> bf16[] {
  %x.49 = bf16[] parameter(0)
  %y.49 = bf16[] parameter(1)
  ROOT %add.1175 = bf16[] add(%x.49, %y.49)
}

%region_619.26251 (Arg_0.26248: f32[], Arg_1.26249: f32[]) -> f32[] {
  %Arg_0.26248 = f32[] parameter(0)
  %Arg_1.26249 = f32[] parameter(1)
  ROOT %add.26250 = f32[] add(%Arg_0.26248, %Arg_1.26249)
}

%region_619.26251.clone (Arg_0.1278: f32[], Arg_1.1216: f32[]) -> f32[] {
  %Arg_0.1278 = f32[] parameter(0)
  %Arg_1.1216 = f32[] parameter(1)
  ROOT %add.1176 = f32[] add(%Arg_0.1278, %Arg_1.1216)
}

%add.25.clone (x.51: bf16[], y.51: bf16[]) -> bf16[] {
  %x.51 = bf16[] parameter(0)
  %y.51 = bf16[] parameter(1)
  ROOT %add.1178 = bf16[] add(%x.51, %y.51)
}

%region_620.26258 (Arg_0.26255: f32[], Arg_1.26256: f32[]) -> f32[] {
  %Arg_0.26255 = f32[] parameter(0)
  %Arg_1.26256 = f32[] parameter(1)
  ROOT %add.26257 = f32[] add(%Arg_0.26255, %Arg_1.26256)
}

%region_620.26258.clone (Arg_0.1279: f32[], Arg_1.1217: f32[]) -> f32[] {
  %Arg_0.1279 = f32[] parameter(0)
  %Arg_1.1217 = f32[] parameter(1)
  ROOT %add.1179 = f32[] add(%Arg_0.1279, %Arg_1.1217)
}

%add.26.clone (x.53: bf16[], y.53: bf16[]) -> bf16[] {
  %x.53 = bf16[] parameter(0)
  %y.53 = bf16[] parameter(1)
  ROOT %add.1181 = bf16[] add(%x.53, %y.53)
}

%region_621.26265 (Arg_0.26262: f32[], Arg_1.26263: f32[]) -> f32[] {
  %Arg_0.26262 = f32[] parameter(0)
  %Arg_1.26263 = f32[] parameter(1)
  ROOT %add.26264 = f32[] add(%Arg_0.26262, %Arg_1.26263)
}

%region_621.26265.clone (Arg_0.1280: f32[], Arg_1.1218: f32[]) -> f32[] {
  %Arg_0.1280 = f32[] parameter(0)
  %Arg_1.1218 = f32[] parameter(1)
  ROOT %add.1182 = f32[] add(%Arg_0.1280, %Arg_1.1218)
}

%add.27.clone (x.55: bf16[], y.55: bf16[]) -> bf16[] {
  %x.55 = bf16[] parameter(0)
  %y.55 = bf16[] parameter(1)
  ROOT %add.1184 = bf16[] add(%x.55, %y.55)
}

%region_622.26272 (Arg_0.26269: f32[], Arg_1.26270: f32[]) -> f32[] {
  %Arg_0.26269 = f32[] parameter(0)
  %Arg_1.26270 = f32[] parameter(1)
  ROOT %add.26271 = f32[] add(%Arg_0.26269, %Arg_1.26270)
}

%region_622.26272.clone (Arg_0.1281: f32[], Arg_1.1219: f32[]) -> f32[] {
  %Arg_0.1281 = f32[] parameter(0)
  %Arg_1.1219 = f32[] parameter(1)
  ROOT %add.1186 = f32[] add(%Arg_0.1281, %Arg_1.1219)
}

%add.28.clone (x.57: bf16[], y.57: bf16[]) -> bf16[] {
  %x.57 = bf16[] parameter(0)
  %y.57 = bf16[] parameter(1)
  ROOT %add.1188 = bf16[] add(%x.57, %y.57)
}

%region_623.26279 (Arg_0.26276: f32[], Arg_1.26277: f32[]) -> f32[] {
  %Arg_0.26276 = f32[] parameter(0)
  %Arg_1.26277 = f32[] parameter(1)
  ROOT %add.26278 = f32[] add(%Arg_0.26276, %Arg_1.26277)
}

%region_623.26279.clone (Arg_0.1282: f32[], Arg_1.1220: f32[]) -> f32[] {
  %Arg_0.1282 = f32[] parameter(0)
  %Arg_1.1220 = f32[] parameter(1)
  ROOT %add.1189 = f32[] add(%Arg_0.1282, %Arg_1.1220)
}

%add.29.clone (x.59: bf16[], y.59: bf16[]) -> bf16[] {
  %x.59 = bf16[] parameter(0)
  %y.59 = bf16[] parameter(1)
  ROOT %add.1191 = bf16[] add(%x.59, %y.59)
}

%region_624.26286 (Arg_0.26283: f32[], Arg_1.26284: f32[]) -> f32[] {
  %Arg_0.26283 = f32[] parameter(0)
  %Arg_1.26284 = f32[] parameter(1)
  ROOT %add.26285 = f32[] add(%Arg_0.26283, %Arg_1.26284)
}

%region_624.26286.clone (Arg_0.1283: f32[], Arg_1.1221: f32[]) -> f32[] {
  %Arg_0.1283 = f32[] parameter(0)
  %Arg_1.1221 = f32[] parameter(1)
  ROOT %add.1192 = f32[] add(%Arg_0.1283, %Arg_1.1221)
}

%add.30.clone (x.61: bf16[], y.61: bf16[]) -> bf16[] {
  %x.61 = bf16[] parameter(0)
  %y.61 = bf16[] parameter(1)
  ROOT %add.1194 = bf16[] add(%x.61, %y.61)
}

%region_625.26293 (Arg_0.26290: f32[], Arg_1.26291: f32[]) -> f32[] {
  %Arg_0.26290 = f32[] parameter(0)
  %Arg_1.26291 = f32[] parameter(1)
  ROOT %add.26292 = f32[] add(%Arg_0.26290, %Arg_1.26291)
}

%region_625.26293.clone (Arg_0.1284: f32[], Arg_1.1222: f32[]) -> f32[] {
  %Arg_0.1284 = f32[] parameter(0)
  %Arg_1.1222 = f32[] parameter(1)
  ROOT %add.1195 = f32[] add(%Arg_0.1284, %Arg_1.1222)
}

%region_422.19937 (Arg_0.19934: bf16[], Arg_1.19935: bf16[]) -> bf16[] {
  %Arg_0.19934 = bf16[] parameter(0)
  %Arg_1.19935 = bf16[] parameter(1)
  ROOT %add.19936 = bf16[] add(%Arg_0.19934, %Arg_1.19935)
}

%region_422.19937.clone (Arg_0.1285: bf16[], Arg_1.1223: bf16[]) -> bf16[] {
  %Arg_0.1285 = bf16[] parameter(0)
  %Arg_1.1223 = bf16[] parameter(1)
  ROOT %add.1196 = bf16[] add(%Arg_0.1285, %Arg_1.1223)
}

%region_626.26300 (Arg_0.26297: f32[], Arg_1.26298: f32[]) -> f32[] {
  %Arg_0.26297 = f32[] parameter(0)
  %Arg_1.26298 = f32[] parameter(1)
  ROOT %add.26299 = f32[] add(%Arg_0.26297, %Arg_1.26298)
}

%region_426.20071 (Arg_0.20068: bf16[], Arg_1.20069: bf16[]) -> bf16[] {
  %Arg_0.20068 = bf16[] parameter(0)
  %Arg_1.20069 = bf16[] parameter(1)
  ROOT %add.20070 = bf16[] add(%Arg_0.20068, %Arg_1.20069)
}

%region_426.20071.clone (Arg_0.1287: bf16[], Arg_1.1224: bf16[]) -> bf16[] {
  %Arg_0.1287 = bf16[] parameter(0)
  %Arg_1.1224 = bf16[] parameter(1)
  ROOT %add.1197 = bf16[] add(%Arg_0.1287, %Arg_1.1224)
}

%region_627.26307 (Arg_0.26304: f32[], Arg_1.26305: f32[]) -> f32[] {
  %Arg_0.26304 = f32[] parameter(0)
  %Arg_1.26305 = f32[] parameter(1)
  ROOT %add.26306 = f32[] add(%Arg_0.26304, %Arg_1.26305)
}

%add.31.clone (x.63: bf16[], y.63: bf16[]) -> bf16[] {
  %x.63 = bf16[] parameter(0)
  %y.63 = bf16[] parameter(1)
  ROOT %add.1199 = bf16[] add(%x.63, %y.63)
}

%region_628.26314 (Arg_0.26311: f32[], Arg_1.26312: f32[]) -> f32[] {
  %Arg_0.26311 = f32[] parameter(0)
  %Arg_1.26312 = f32[] parameter(1)
  ROOT %add.26313 = f32[] add(%Arg_0.26311, %Arg_1.26312)
}

%region_628.26314.clone (Arg_0.1288: f32[], Arg_1.1225: f32[]) -> f32[] {
  %Arg_0.1288 = f32[] parameter(0)
  %Arg_1.1225 = f32[] parameter(1)
  ROOT %add.1200 = f32[] add(%Arg_0.1288, %Arg_1.1225)
}

%add.32.clone (x.65: bf16[], y.65: bf16[]) -> bf16[] {
  %x.65 = bf16[] parameter(0)
  %y.65 = bf16[] parameter(1)
  ROOT %add.1202 = bf16[] add(%x.65, %y.65)
}

%region_629.26321 (Arg_0.26318: f32[], Arg_1.26319: f32[]) -> f32[] {
  %Arg_0.26318 = f32[] parameter(0)
  %Arg_1.26319 = f32[] parameter(1)
  ROOT %add.26320 = f32[] add(%Arg_0.26318, %Arg_1.26319)
}

%region_629.26321.clone (Arg_0.1289: f32[], Arg_1.1226: f32[]) -> f32[] {
  %Arg_0.1289 = f32[] parameter(0)
  %Arg_1.1226 = f32[] parameter(1)
  ROOT %add.1203 = f32[] add(%Arg_0.1289, %Arg_1.1226)
}

%add.33.clone (x.67: bf16[], y.67: bf16[]) -> bf16[] {
  %x.67 = bf16[] parameter(0)
  %y.67 = bf16[] parameter(1)
  ROOT %add.1205 = bf16[] add(%x.67, %y.67)
}

%region_630.26328 (Arg_0.26325: f32[], Arg_1.26326: f32[]) -> f32[] {
  %Arg_0.26325 = f32[] parameter(0)
  %Arg_1.26326 = f32[] parameter(1)
  ROOT %add.26327 = f32[] add(%Arg_0.26325, %Arg_1.26326)
}

%region_630.26328.clone (Arg_0.1290: f32[], Arg_1.1227: f32[]) -> f32[] {
  %Arg_0.1290 = f32[] parameter(0)
  %Arg_1.1227 = f32[] parameter(1)
  ROOT %add.1206 = f32[] add(%Arg_0.1290, %Arg_1.1227)
}

%add.34.clone (x.69: bf16[], y.69: bf16[]) -> bf16[] {
  %x.69 = bf16[] parameter(0)
  %y.69 = bf16[] parameter(1)
  ROOT %add.1208 = bf16[] add(%x.69, %y.69)
}

%region_631.26335 (Arg_0.26332: f32[], Arg_1.26333: f32[]) -> f32[] {
  %Arg_0.26332 = f32[] parameter(0)
  %Arg_1.26333 = f32[] parameter(1)
  ROOT %add.26334 = f32[] add(%Arg_0.26332, %Arg_1.26333)
}

%region_631.26335.clone (Arg_0.1291: f32[], Arg_1.1228: f32[]) -> f32[] {
  %Arg_0.1291 = f32[] parameter(0)
  %Arg_1.1228 = f32[] parameter(1)
  ROOT %add.1209 = f32[] add(%Arg_0.1291, %Arg_1.1228)
}

%add.35.clone (x.71: bf16[], y.71: bf16[]) -> bf16[] {
  %x.71 = bf16[] parameter(0)
  %y.71 = bf16[] parameter(1)
  ROOT %add.1211 = bf16[] add(%x.71, %y.71)
}

%region_632.26342 (Arg_0.26339: f32[], Arg_1.26340: f32[]) -> f32[] {
  %Arg_0.26339 = f32[] parameter(0)
  %Arg_1.26340 = f32[] parameter(1)
  ROOT %add.26341 = f32[] add(%Arg_0.26339, %Arg_1.26340)
}

%region_632.26342.clone (Arg_0.1292: f32[], Arg_1.1229: f32[]) -> f32[] {
  %Arg_0.1292 = f32[] parameter(0)
  %Arg_1.1229 = f32[] parameter(1)
  ROOT %add.1212 = f32[] add(%Arg_0.1292, %Arg_1.1229)
}

%add.36.clone (x.73: bf16[], y.73: bf16[]) -> bf16[] {
  %x.73 = bf16[] parameter(0)
  %y.73 = bf16[] parameter(1)
  ROOT %add.1214 = bf16[] add(%x.73, %y.73)
}

%region_633.26349 (Arg_0.26346: f32[], Arg_1.26347: f32[]) -> f32[] {
  %Arg_0.26346 = f32[] parameter(0)
  %Arg_1.26347 = f32[] parameter(1)
  ROOT %add.26348 = f32[] add(%Arg_0.26346, %Arg_1.26347)
}

%region_633.26349.clone (Arg_0.1293: f32[], Arg_1.1230: f32[]) -> f32[] {
  %Arg_0.1293 = f32[] parameter(0)
  %Arg_1.1230 = f32[] parameter(1)
  ROOT %add.1215 = f32[] add(%Arg_0.1293, %Arg_1.1230)
}

%add.37.clone (x.75: bf16[], y.75: bf16[]) -> bf16[] {
  %x.75 = bf16[] parameter(0)
  %y.75 = bf16[] parameter(1)
  ROOT %add.1217 = bf16[] add(%x.75, %y.75)
}

%region_634.26356 (Arg_0.26353: f32[], Arg_1.26354: f32[]) -> f32[] {
  %Arg_0.26353 = f32[] parameter(0)
  %Arg_1.26354 = f32[] parameter(1)
  ROOT %add.26355 = f32[] add(%Arg_0.26353, %Arg_1.26354)
}

%region_634.26356.clone (Arg_0.1294: f32[], Arg_1.1231: f32[]) -> f32[] {
  %Arg_0.1294 = f32[] parameter(0)
  %Arg_1.1231 = f32[] parameter(1)
  ROOT %add.1218 = f32[] add(%Arg_0.1294, %Arg_1.1231)
}

%region_409.19445 (Arg_0.19442: bf16[], Arg_1.19443: bf16[]) -> bf16[] {
  %Arg_0.19442 = bf16[] parameter(0)
  %Arg_1.19443 = bf16[] parameter(1)
  ROOT %add.19444 = bf16[] add(%Arg_0.19442, %Arg_1.19443)
}

%region_409.19445.clone (Arg_0.1295: bf16[], Arg_1.1232: bf16[]) -> bf16[] {
  %Arg_0.1295 = bf16[] parameter(0)
  %Arg_1.1232 = bf16[] parameter(1)
  ROOT %add.1219 = bf16[] add(%Arg_0.1295, %Arg_1.1232)
}

%region_635.26363 (Arg_0.26360: f32[], Arg_1.26361: f32[]) -> f32[] {
  %Arg_0.26360 = f32[] parameter(0)
  %Arg_1.26361 = f32[] parameter(1)
  ROOT %add.26362 = f32[] add(%Arg_0.26360, %Arg_1.26361)
}

%region_413.19579 (Arg_0.19576: bf16[], Arg_1.19577: bf16[]) -> bf16[] {
  %Arg_0.19576 = bf16[] parameter(0)
  %Arg_1.19577 = bf16[] parameter(1)
  ROOT %add.19578 = bf16[] add(%Arg_0.19576, %Arg_1.19577)
}

%region_413.19579.clone (Arg_0.1296: bf16[], Arg_1.1233: bf16[]) -> bf16[] {
  %Arg_0.1296 = bf16[] parameter(0)
  %Arg_1.1233 = bf16[] parameter(1)
  ROOT %add.1220 = bf16[] add(%Arg_0.1296, %Arg_1.1233)
}

%region_636.26370 (Arg_0.26367: f32[], Arg_1.26368: f32[]) -> f32[] {
  %Arg_0.26367 = f32[] parameter(0)
  %Arg_1.26368 = f32[] parameter(1)
  ROOT %add.26369 = f32[] add(%Arg_0.26367, %Arg_1.26368)
}

%add.38.clone (x.77: bf16[], y.77: bf16[]) -> bf16[] {
  %x.77 = bf16[] parameter(0)
  %y.77 = bf16[] parameter(1)
  ROOT %add.1222 = bf16[] add(%x.77, %y.77)
}

%region_637.26377 (Arg_0.26374: f32[], Arg_1.26375: f32[]) -> f32[] {
  %Arg_0.26374 = f32[] parameter(0)
  %Arg_1.26375 = f32[] parameter(1)
  ROOT %add.26376 = f32[] add(%Arg_0.26374, %Arg_1.26375)
}

%region_637.26377.clone (Arg_0.1298: f32[], Arg_1.1234: f32[]) -> f32[] {
  %Arg_0.1298 = f32[] parameter(0)
  %Arg_1.1234 = f32[] parameter(1)
  ROOT %add.1224 = f32[] add(%Arg_0.1298, %Arg_1.1234)
}

%add.39.clone (x.79: bf16[], y.79: bf16[]) -> bf16[] {
  %x.79 = bf16[] parameter(0)
  %y.79 = bf16[] parameter(1)
  ROOT %add.1226 = bf16[] add(%x.79, %y.79)
}

%region_638.26384 (Arg_0.26381: f32[], Arg_1.26382: f32[]) -> f32[] {
  %Arg_0.26381 = f32[] parameter(0)
  %Arg_1.26382 = f32[] parameter(1)
  ROOT %add.26383 = f32[] add(%Arg_0.26381, %Arg_1.26382)
}

%region_638.26384.clone (Arg_0.1299: f32[], Arg_1.1235: f32[]) -> f32[] {
  %Arg_0.1299 = f32[] parameter(0)
  %Arg_1.1235 = f32[] parameter(1)
  ROOT %add.1227 = f32[] add(%Arg_0.1299, %Arg_1.1235)
}

%add.40.clone (x.81: bf16[], y.81: bf16[]) -> bf16[] {
  %x.81 = bf16[] parameter(0)
  %y.81 = bf16[] parameter(1)
  ROOT %add.1229 = bf16[] add(%x.81, %y.81)
}

%region_639.26391 (Arg_0.26388: f32[], Arg_1.26389: f32[]) -> f32[] {
  %Arg_0.26388 = f32[] parameter(0)
  %Arg_1.26389 = f32[] parameter(1)
  ROOT %add.26390 = f32[] add(%Arg_0.26388, %Arg_1.26389)
}

%region_639.26391.clone (Arg_0.1300: f32[], Arg_1.1236: f32[]) -> f32[] {
  %Arg_0.1300 = f32[] parameter(0)
  %Arg_1.1236 = f32[] parameter(1)
  ROOT %add.1230 = f32[] add(%Arg_0.1300, %Arg_1.1236)
}

%add.41.clone (x.83: bf16[], y.83: bf16[]) -> bf16[] {
  %x.83 = bf16[] parameter(0)
  %y.83 = bf16[] parameter(1)
  ROOT %add.1232 = bf16[] add(%x.83, %y.83)
}

%region_640.26398 (Arg_0.26395: f32[], Arg_1.26396: f32[]) -> f32[] {
  %Arg_0.26395 = f32[] parameter(0)
  %Arg_1.26396 = f32[] parameter(1)
  ROOT %add.26397 = f32[] add(%Arg_0.26395, %Arg_1.26396)
}

%region_640.26398.clone (Arg_0.1301: f32[], Arg_1.1237: f32[]) -> f32[] {
  %Arg_0.1301 = f32[] parameter(0)
  %Arg_1.1237 = f32[] parameter(1)
  ROOT %add.1233 = f32[] add(%Arg_0.1301, %Arg_1.1237)
}

%add.42.clone (x.85: bf16[], y.85: bf16[]) -> bf16[] {
  %x.85 = bf16[] parameter(0)
  %y.85 = bf16[] parameter(1)
  ROOT %add.1235 = bf16[] add(%x.85, %y.85)
}

%region_641.26405 (Arg_0.26402: f32[], Arg_1.26403: f32[]) -> f32[] {
  %Arg_0.26402 = f32[] parameter(0)
  %Arg_1.26403 = f32[] parameter(1)
  ROOT %add.26404 = f32[] add(%Arg_0.26402, %Arg_1.26403)
}

%region_641.26405.clone (Arg_0.1302: f32[], Arg_1.1238: f32[]) -> f32[] {
  %Arg_0.1302 = f32[] parameter(0)
  %Arg_1.1238 = f32[] parameter(1)
  ROOT %add.1236 = f32[] add(%Arg_0.1302, %Arg_1.1238)
}

%add.43.clone (x.87: bf16[], y.87: bf16[]) -> bf16[] {
  %x.87 = bf16[] parameter(0)
  %y.87 = bf16[] parameter(1)
  ROOT %add.1238 = bf16[] add(%x.87, %y.87)
}

%region_642.26412 (Arg_0.26409: f32[], Arg_1.26410: f32[]) -> f32[] {
  %Arg_0.26409 = f32[] parameter(0)
  %Arg_1.26410 = f32[] parameter(1)
  ROOT %add.26411 = f32[] add(%Arg_0.26409, %Arg_1.26410)
}

%region_642.26412.clone (Arg_0.1303: f32[], Arg_1.1239: f32[]) -> f32[] {
  %Arg_0.1303 = f32[] parameter(0)
  %Arg_1.1239 = f32[] parameter(1)
  ROOT %add.1239 = f32[] add(%Arg_0.1303, %Arg_1.1239)
}

%add.44.clone (x.89: bf16[], y.89: bf16[]) -> bf16[] {
  %x.89 = bf16[] parameter(0)
  %y.89 = bf16[] parameter(1)
  ROOT %add.1241 = bf16[] add(%x.89, %y.89)
}

%region_643.26419 (Arg_0.26416: f32[], Arg_1.26417: f32[]) -> f32[] {
  %Arg_0.26416 = f32[] parameter(0)
  %Arg_1.26417 = f32[] parameter(1)
  ROOT %add.26418 = f32[] add(%Arg_0.26416, %Arg_1.26417)
}

%region_643.26419.clone (Arg_0.1304: f32[], Arg_1.1240: f32[]) -> f32[] {
  %Arg_0.1304 = f32[] parameter(0)
  %Arg_1.1240 = f32[] parameter(1)
  ROOT %add.1242 = f32[] add(%Arg_0.1304, %Arg_1.1240)
}

%region_396.18953 (Arg_0.18950: bf16[], Arg_1.18951: bf16[]) -> bf16[] {
  %Arg_0.18950 = bf16[] parameter(0)
  %Arg_1.18951 = bf16[] parameter(1)
  ROOT %add.18952 = bf16[] add(%Arg_0.18950, %Arg_1.18951)
}

%region_396.18953.clone (Arg_0.1306: bf16[], Arg_1.1241: bf16[]) -> bf16[] {
  %Arg_0.1306 = bf16[] parameter(0)
  %Arg_1.1241 = bf16[] parameter(1)
  ROOT %add.1243 = bf16[] add(%Arg_0.1306, %Arg_1.1241)
}

%region_644.26426 (Arg_0.26423: f32[], Arg_1.26424: f32[]) -> f32[] {
  %Arg_0.26423 = f32[] parameter(0)
  %Arg_1.26424 = f32[] parameter(1)
  ROOT %add.26425 = f32[] add(%Arg_0.26423, %Arg_1.26424)
}

%region_400.19087 (Arg_0.19084: bf16[], Arg_1.19085: bf16[]) -> bf16[] {
  %Arg_0.19084 = bf16[] parameter(0)
  %Arg_1.19085 = bf16[] parameter(1)
  ROOT %add.19086 = bf16[] add(%Arg_0.19084, %Arg_1.19085)
}

%region_400.19087.clone (Arg_0.1307: bf16[], Arg_1.1242: bf16[]) -> bf16[] {
  %Arg_0.1307 = bf16[] parameter(0)
  %Arg_1.1242 = bf16[] parameter(1)
  ROOT %add.1244 = bf16[] add(%Arg_0.1307, %Arg_1.1242)
}

%region_645.26433 (Arg_0.26430: f32[], Arg_1.26431: f32[]) -> f32[] {
  %Arg_0.26430 = f32[] parameter(0)
  %Arg_1.26431 = f32[] parameter(1)
  ROOT %add.26432 = f32[] add(%Arg_0.26430, %Arg_1.26431)
}

%add.45.clone (x.91: bf16[], y.91: bf16[]) -> bf16[] {
  %x.91 = bf16[] parameter(0)
  %y.91 = bf16[] parameter(1)
  ROOT %add.1246 = bf16[] add(%x.91, %y.91)
}

%region_646.26440 (Arg_0.26437: f32[], Arg_1.26438: f32[]) -> f32[] {
  %Arg_0.26437 = f32[] parameter(0)
  %Arg_1.26438 = f32[] parameter(1)
  ROOT %add.26439 = f32[] add(%Arg_0.26437, %Arg_1.26438)
}

%region_646.26440.clone (Arg_0.1308: f32[], Arg_1.1243: f32[]) -> f32[] {
  %Arg_0.1308 = f32[] parameter(0)
  %Arg_1.1243 = f32[] parameter(1)
  ROOT %add.1247 = f32[] add(%Arg_0.1308, %Arg_1.1243)
}

%add.46.clone (x.93: bf16[], y.93: bf16[]) -> bf16[] {
  %x.93 = bf16[] parameter(0)
  %y.93 = bf16[] parameter(1)
  ROOT %add.1249 = bf16[] add(%x.93, %y.93)
}

%region_647.26447 (Arg_0.26444: f32[], Arg_1.26445: f32[]) -> f32[] {
  %Arg_0.26444 = f32[] parameter(0)
  %Arg_1.26445 = f32[] parameter(1)
  ROOT %add.26446 = f32[] add(%Arg_0.26444, %Arg_1.26445)
}

%region_647.26447.clone (Arg_0.1309: f32[], Arg_1.1244: f32[]) -> f32[] {
  %Arg_0.1309 = f32[] parameter(0)
  %Arg_1.1244 = f32[] parameter(1)
  ROOT %add.1250 = f32[] add(%Arg_0.1309, %Arg_1.1244)
}

%add.47.clone (x.95: bf16[], y.95: bf16[]) -> bf16[] {
  %x.95 = bf16[] parameter(0)
  %y.95 = bf16[] parameter(1)
  ROOT %add.1252 = bf16[] add(%x.95, %y.95)
}

%region_648.26454 (Arg_0.26451: f32[], Arg_1.26452: f32[]) -> f32[] {
  %Arg_0.26451 = f32[] parameter(0)
  %Arg_1.26452 = f32[] parameter(1)
  ROOT %add.26453 = f32[] add(%Arg_0.26451, %Arg_1.26452)
}

%region_648.26454.clone (Arg_0.1311: f32[], Arg_1.1245: f32[]) -> f32[] {
  %Arg_0.1311 = f32[] parameter(0)
  %Arg_1.1245 = f32[] parameter(1)
  ROOT %add.1253 = f32[] add(%Arg_0.1311, %Arg_1.1245)
}

%add.48.clone (x.97: bf16[], y.97: bf16[]) -> bf16[] {
  %x.97 = bf16[] parameter(0)
  %y.97 = bf16[] parameter(1)
  ROOT %add.1255 = bf16[] add(%x.97, %y.97)
}

%region_649.26461 (Arg_0.26458: f32[], Arg_1.26459: f32[]) -> f32[] {
  %Arg_0.26458 = f32[] parameter(0)
  %Arg_1.26459 = f32[] parameter(1)
  ROOT %add.26460 = f32[] add(%Arg_0.26458, %Arg_1.26459)
}

%region_649.26461.clone (Arg_0.1312: f32[], Arg_1.1246: f32[]) -> f32[] {
  %Arg_0.1312 = f32[] parameter(0)
  %Arg_1.1246 = f32[] parameter(1)
  ROOT %add.1256 = f32[] add(%Arg_0.1312, %Arg_1.1246)
}

%add.49.clone (x.99: bf16[], y.99: bf16[]) -> bf16[] {
  %x.99 = bf16[] parameter(0)
  %y.99 = bf16[] parameter(1)
  ROOT %add.1258 = bf16[] add(%x.99, %y.99)
}

%region_650.26468 (Arg_0.26465: f32[], Arg_1.26466: f32[]) -> f32[] {
  %Arg_0.26465 = f32[] parameter(0)
  %Arg_1.26466 = f32[] parameter(1)
  ROOT %add.26467 = f32[] add(%Arg_0.26465, %Arg_1.26466)
}

%region_650.26468.clone (Arg_0.1313: f32[], Arg_1.1247: f32[]) -> f32[] {
  %Arg_0.1313 = f32[] parameter(0)
  %Arg_1.1247 = f32[] parameter(1)
  ROOT %add.1259 = f32[] add(%Arg_0.1313, %Arg_1.1247)
}

%add.50.clone (x.101: bf16[], y.101: bf16[]) -> bf16[] {
  %x.101 = bf16[] parameter(0)
  %y.101 = bf16[] parameter(1)
  ROOT %add.1262 = bf16[] add(%x.101, %y.101)
}

%region_651.26475 (Arg_0.26472: f32[], Arg_1.26473: f32[]) -> f32[] {
  %Arg_0.26472 = f32[] parameter(0)
  %Arg_1.26473 = f32[] parameter(1)
  ROOT %add.26474 = f32[] add(%Arg_0.26472, %Arg_1.26473)
}

%region_651.26475.clone (Arg_0.1314: f32[], Arg_1.1248: f32[]) -> f32[] {
  %Arg_0.1314 = f32[] parameter(0)
  %Arg_1.1248 = f32[] parameter(1)
  ROOT %add.1263 = f32[] add(%Arg_0.1314, %Arg_1.1248)
}

%add.51.clone (x.103: bf16[], y.103: bf16[]) -> bf16[] {
  %x.103 = bf16[] parameter(0)
  %y.103 = bf16[] parameter(1)
  ROOT %add.1265 = bf16[] add(%x.103, %y.103)
}

%region_652.26482 (Arg_0.26479: f32[], Arg_1.26480: f32[]) -> f32[] {
  %Arg_0.26479 = f32[] parameter(0)
  %Arg_1.26480 = f32[] parameter(1)
  ROOT %add.26481 = f32[] add(%Arg_0.26479, %Arg_1.26480)
}

%region_652.26482.clone (Arg_0.1315: f32[], Arg_1.1249: f32[]) -> f32[] {
  %Arg_0.1315 = f32[] parameter(0)
  %Arg_1.1249 = f32[] parameter(1)
  ROOT %add.1266 = f32[] add(%Arg_0.1315, %Arg_1.1249)
}

%region_383.18461 (Arg_0.18458: bf16[], Arg_1.18459: bf16[]) -> bf16[] {
  %Arg_0.18458 = bf16[] parameter(0)
  %Arg_1.18459 = bf16[] parameter(1)
  ROOT %add.18460 = bf16[] add(%Arg_0.18458, %Arg_1.18459)
}

%region_383.18461.clone (Arg_0.1316: bf16[], Arg_1.1250: bf16[]) -> bf16[] {
  %Arg_0.1316 = bf16[] parameter(0)
  %Arg_1.1250 = bf16[] parameter(1)
  ROOT %add.1267 = bf16[] add(%Arg_0.1316, %Arg_1.1250)
}

%region_653.26489 (Arg_0.26486: f32[], Arg_1.26487: f32[]) -> f32[] {
  %Arg_0.26486 = f32[] parameter(0)
  %Arg_1.26487 = f32[] parameter(1)
  ROOT %add.26488 = f32[] add(%Arg_0.26486, %Arg_1.26487)
}

%region_387.18595 (Arg_0.18592: bf16[], Arg_1.18593: bf16[]) -> bf16[] {
  %Arg_0.18592 = bf16[] parameter(0)
  %Arg_1.18593 = bf16[] parameter(1)
  ROOT %add.18594 = bf16[] add(%Arg_0.18592, %Arg_1.18593)
}

%region_387.18595.clone (Arg_0.1317: bf16[], Arg_1.1251: bf16[]) -> bf16[] {
  %Arg_0.1317 = bf16[] parameter(0)
  %Arg_1.1251 = bf16[] parameter(1)
  ROOT %add.1268 = bf16[] add(%Arg_0.1317, %Arg_1.1251)
}

%region_654.26496 (Arg_0.26493: f32[], Arg_1.26494: f32[]) -> f32[] {
  %Arg_0.26493 = f32[] parameter(0)
  %Arg_1.26494 = f32[] parameter(1)
  ROOT %add.26495 = f32[] add(%Arg_0.26493, %Arg_1.26494)
}

%add.52.clone (x.105: bf16[], y.105: bf16[]) -> bf16[] {
  %x.105 = bf16[] parameter(0)
  %y.105 = bf16[] parameter(1)
  ROOT %add.1270 = bf16[] add(%x.105, %y.105)
}

%region_655.26503 (Arg_0.26500: f32[], Arg_1.26501: f32[]) -> f32[] {
  %Arg_0.26500 = f32[] parameter(0)
  %Arg_1.26501 = f32[] parameter(1)
  ROOT %add.26502 = f32[] add(%Arg_0.26500, %Arg_1.26501)
}

%region_655.26503.clone (Arg_0.1318: f32[], Arg_1.1252: f32[]) -> f32[] {
  %Arg_0.1318 = f32[] parameter(0)
  %Arg_1.1252 = f32[] parameter(1)
  ROOT %add.1271 = f32[] add(%Arg_0.1318, %Arg_1.1252)
}

%add.53.clone (x.107: bf16[], y.107: bf16[]) -> bf16[] {
  %x.107 = bf16[] parameter(0)
  %y.107 = bf16[] parameter(1)
  ROOT %add.1273 = bf16[] add(%x.107, %y.107)
}

%region_656.26510 (Arg_0.26507: f32[], Arg_1.26508: f32[]) -> f32[] {
  %Arg_0.26507 = f32[] parameter(0)
  %Arg_1.26508 = f32[] parameter(1)
  ROOT %add.26509 = f32[] add(%Arg_0.26507, %Arg_1.26508)
}

%region_656.26510.clone (Arg_0.1319: f32[], Arg_1.1253: f32[]) -> f32[] {
  %Arg_0.1319 = f32[] parameter(0)
  %Arg_1.1253 = f32[] parameter(1)
  ROOT %add.1274 = f32[] add(%Arg_0.1319, %Arg_1.1253)
}

%add.54.clone (x.109: bf16[], y.109: bf16[]) -> bf16[] {
  %x.109 = bf16[] parameter(0)
  %y.109 = bf16[] parameter(1)
  ROOT %add.1276 = bf16[] add(%x.109, %y.109)
}

%region_657.26517 (Arg_0.26514: f32[], Arg_1.26515: f32[]) -> f32[] {
  %Arg_0.26514 = f32[] parameter(0)
  %Arg_1.26515 = f32[] parameter(1)
  ROOT %add.26516 = f32[] add(%Arg_0.26514, %Arg_1.26515)
}

%region_657.26517.clone (Arg_0.1320: f32[], Arg_1.1254: f32[]) -> f32[] {
  %Arg_0.1320 = f32[] parameter(0)
  %Arg_1.1254 = f32[] parameter(1)
  ROOT %add.1277 = f32[] add(%Arg_0.1320, %Arg_1.1254)
}

%add.55.clone (x.111: bf16[], y.111: bf16[]) -> bf16[] {
  %x.111 = bf16[] parameter(0)
  %y.111 = bf16[] parameter(1)
  ROOT %add.1279 = bf16[] add(%x.111, %y.111)
}

%region_658.26524 (Arg_0.26521: f32[], Arg_1.26522: f32[]) -> f32[] {
  %Arg_0.26521 = f32[] parameter(0)
  %Arg_1.26522 = f32[] parameter(1)
  ROOT %add.26523 = f32[] add(%Arg_0.26521, %Arg_1.26522)
}

%region_658.26524.clone (Arg_0.1321: f32[], Arg_1.1255: f32[]) -> f32[] {
  %Arg_0.1321 = f32[] parameter(0)
  %Arg_1.1255 = f32[] parameter(1)
  ROOT %add.1280 = f32[] add(%Arg_0.1321, %Arg_1.1255)
}

%add.56.clone (x.113: bf16[], y.113: bf16[]) -> bf16[] {
  %x.113 = bf16[] parameter(0)
  %y.113 = bf16[] parameter(1)
  ROOT %add.1282 = bf16[] add(%x.113, %y.113)
}

%region_659.26531 (Arg_0.26528: f32[], Arg_1.26529: f32[]) -> f32[] {
  %Arg_0.26528 = f32[] parameter(0)
  %Arg_1.26529 = f32[] parameter(1)
  ROOT %add.26530 = f32[] add(%Arg_0.26528, %Arg_1.26529)
}

%region_659.26531.clone (Arg_0.1322: f32[], Arg_1.1256: f32[]) -> f32[] {
  %Arg_0.1322 = f32[] parameter(0)
  %Arg_1.1256 = f32[] parameter(1)
  ROOT %add.1283 = f32[] add(%Arg_0.1322, %Arg_1.1256)
}

%add.57.clone (x.115: bf16[], y.115: bf16[]) -> bf16[] {
  %x.115 = bf16[] parameter(0)
  %y.115 = bf16[] parameter(1)
  ROOT %add.1285 = bf16[] add(%x.115, %y.115)
}

%region_660.26538 (Arg_0.26535: f32[], Arg_1.26536: f32[]) -> f32[] {
  %Arg_0.26535 = f32[] parameter(0)
  %Arg_1.26536 = f32[] parameter(1)
  ROOT %add.26537 = f32[] add(%Arg_0.26535, %Arg_1.26536)
}

%region_660.26538.clone (Arg_0.1323: f32[], Arg_1.1257: f32[]) -> f32[] {
  %Arg_0.1323 = f32[] parameter(0)
  %Arg_1.1257 = f32[] parameter(1)
  ROOT %add.1286 = f32[] add(%Arg_0.1323, %Arg_1.1257)
}

%add.58.clone (x.117: bf16[], y.117: bf16[]) -> bf16[] {
  %x.117 = bf16[] parameter(0)
  %y.117 = bf16[] parameter(1)
  ROOT %add.1288 = bf16[] add(%x.117, %y.117)
}

%region_661.26545 (Arg_0.26542: f32[], Arg_1.26543: f32[]) -> f32[] {
  %Arg_0.26542 = f32[] parameter(0)
  %Arg_1.26543 = f32[] parameter(1)
  ROOT %add.26544 = f32[] add(%Arg_0.26542, %Arg_1.26543)
}

%region_661.26545.clone (Arg_0.1324: f32[], Arg_1.1258: f32[]) -> f32[] {
  %Arg_0.1324 = f32[] parameter(0)
  %Arg_1.1258 = f32[] parameter(1)
  ROOT %add.1289 = f32[] add(%Arg_0.1324, %Arg_1.1258)
}

%region_370.17969 (Arg_0.17966: bf16[], Arg_1.17967: bf16[]) -> bf16[] {
  %Arg_0.17966 = bf16[] parameter(0)
  %Arg_1.17967 = bf16[] parameter(1)
  ROOT %add.17968 = bf16[] add(%Arg_0.17966, %Arg_1.17967)
}

%region_370.17969.clone (Arg_0.1325: bf16[], Arg_1.1259: bf16[]) -> bf16[] {
  %Arg_0.1325 = bf16[] parameter(0)
  %Arg_1.1259 = bf16[] parameter(1)
  ROOT %add.1290 = bf16[] add(%Arg_0.1325, %Arg_1.1259)
}

%region_662.26552 (Arg_0.26549: f32[], Arg_1.26550: f32[]) -> f32[] {
  %Arg_0.26549 = f32[] parameter(0)
  %Arg_1.26550 = f32[] parameter(1)
  ROOT %add.26551 = f32[] add(%Arg_0.26549, %Arg_1.26550)
}

%region_374.18103 (Arg_0.18100: bf16[], Arg_1.18101: bf16[]) -> bf16[] {
  %Arg_0.18100 = bf16[] parameter(0)
  %Arg_1.18101 = bf16[] parameter(1)
  ROOT %add.18102 = bf16[] add(%Arg_0.18100, %Arg_1.18101)
}

%region_374.18103.clone (Arg_0.1326: bf16[], Arg_1.1260: bf16[]) -> bf16[] {
  %Arg_0.1326 = bf16[] parameter(0)
  %Arg_1.1260 = bf16[] parameter(1)
  ROOT %add.1291 = bf16[] add(%Arg_0.1326, %Arg_1.1260)
}

%region_663.26559 (Arg_0.26556: f32[], Arg_1.26557: f32[]) -> f32[] {
  %Arg_0.26556 = f32[] parameter(0)
  %Arg_1.26557 = f32[] parameter(1)
  ROOT %add.26558 = f32[] add(%Arg_0.26556, %Arg_1.26557)
}

%add.59.clone (x.119: bf16[], y.119: bf16[]) -> bf16[] {
  %x.119 = bf16[] parameter(0)
  %y.119 = bf16[] parameter(1)
  ROOT %add.1293 = bf16[] add(%x.119, %y.119)
}

%region_664.26566 (Arg_0.26563: f32[], Arg_1.26564: f32[]) -> f32[] {
  %Arg_0.26563 = f32[] parameter(0)
  %Arg_1.26564 = f32[] parameter(1)
  ROOT %add.26565 = f32[] add(%Arg_0.26563, %Arg_1.26564)
}

%region_664.26566.clone (Arg_0.1327: f32[], Arg_1.1261: f32[]) -> f32[] {
  %Arg_0.1327 = f32[] parameter(0)
  %Arg_1.1261 = f32[] parameter(1)
  ROOT %add.1294 = f32[] add(%Arg_0.1327, %Arg_1.1261)
}

%add.60.clone (x.121: bf16[], y.121: bf16[]) -> bf16[] {
  %x.121 = bf16[] parameter(0)
  %y.121 = bf16[] parameter(1)
  ROOT %add.1296 = bf16[] add(%x.121, %y.121)
}

%region_665.26573 (Arg_0.26570: f32[], Arg_1.26571: f32[]) -> f32[] {
  %Arg_0.26570 = f32[] parameter(0)
  %Arg_1.26571 = f32[] parameter(1)
  ROOT %add.26572 = f32[] add(%Arg_0.26570, %Arg_1.26571)
}

%region_665.26573.clone (Arg_0.1329: f32[], Arg_1.1262: f32[]) -> f32[] {
  %Arg_0.1329 = f32[] parameter(0)
  %Arg_1.1262 = f32[] parameter(1)
  ROOT %add.1297 = f32[] add(%Arg_0.1329, %Arg_1.1262)
}

%add.61.clone (x.123: bf16[], y.123: bf16[]) -> bf16[] {
  %x.123 = bf16[] parameter(0)
  %y.123 = bf16[] parameter(1)
  ROOT %add.1300 = bf16[] add(%x.123, %y.123)
}

%region_666.26580 (Arg_0.26577: f32[], Arg_1.26578: f32[]) -> f32[] {
  %Arg_0.26577 = f32[] parameter(0)
  %Arg_1.26578 = f32[] parameter(1)
  ROOT %add.26579 = f32[] add(%Arg_0.26577, %Arg_1.26578)
}

%region_666.26580.clone (Arg_0.1330: f32[], Arg_1.1263: f32[]) -> f32[] {
  %Arg_0.1330 = f32[] parameter(0)
  %Arg_1.1263 = f32[] parameter(1)
  ROOT %add.1301 = f32[] add(%Arg_0.1330, %Arg_1.1263)
}

%add.62.clone (x.125: bf16[], y.125: bf16[]) -> bf16[] {
  %x.125 = bf16[] parameter(0)
  %y.125 = bf16[] parameter(1)
  ROOT %add.1303 = bf16[] add(%x.125, %y.125)
}

%region_667.26587 (Arg_0.26584: f32[], Arg_1.26585: f32[]) -> f32[] {
  %Arg_0.26584 = f32[] parameter(0)
  %Arg_1.26585 = f32[] parameter(1)
  ROOT %add.26586 = f32[] add(%Arg_0.26584, %Arg_1.26585)
}

%region_667.26587.clone (Arg_0.1331: f32[], Arg_1.1264: f32[]) -> f32[] {
  %Arg_0.1331 = f32[] parameter(0)
  %Arg_1.1264 = f32[] parameter(1)
  ROOT %add.1304 = f32[] add(%Arg_0.1331, %Arg_1.1264)
}

%add.63.clone (x.127: bf16[], y.127: bf16[]) -> bf16[] {
  %x.127 = bf16[] parameter(0)
  %y.127 = bf16[] parameter(1)
  ROOT %add.1306 = bf16[] add(%x.127, %y.127)
}

%region_668.26594 (Arg_0.26591: f32[], Arg_1.26592: f32[]) -> f32[] {
  %Arg_0.26591 = f32[] parameter(0)
  %Arg_1.26592 = f32[] parameter(1)
  ROOT %add.26593 = f32[] add(%Arg_0.26591, %Arg_1.26592)
}

%region_668.26594.clone (Arg_0.1332: f32[], Arg_1.1265: f32[]) -> f32[] {
  %Arg_0.1332 = f32[] parameter(0)
  %Arg_1.1265 = f32[] parameter(1)
  ROOT %add.1308 = f32[] add(%Arg_0.1332, %Arg_1.1265)
}

%add.64.clone (x.129: bf16[], y.129: bf16[]) -> bf16[] {
  %x.129 = bf16[] parameter(0)
  %y.129 = bf16[] parameter(1)
  ROOT %add.1310 = bf16[] add(%x.129, %y.129)
}

%region_669.26601 (Arg_0.26598: f32[], Arg_1.26599: f32[]) -> f32[] {
  %Arg_0.26598 = f32[] parameter(0)
  %Arg_1.26599 = f32[] parameter(1)
  ROOT %add.26600 = f32[] add(%Arg_0.26598, %Arg_1.26599)
}

%region_669.26601.clone (Arg_0.1333: f32[], Arg_1.1266: f32[]) -> f32[] {
  %Arg_0.1333 = f32[] parameter(0)
  %Arg_1.1266 = f32[] parameter(1)
  ROOT %add.1311 = f32[] add(%Arg_0.1333, %Arg_1.1266)
}

%add.65.clone (x.131: bf16[], y.131: bf16[]) -> bf16[] {
  %x.131 = bf16[] parameter(0)
  %y.131 = bf16[] parameter(1)
  ROOT %add.1313 = bf16[] add(%x.131, %y.131)
}

%region_670.26608 (Arg_0.26605: f32[], Arg_1.26606: f32[]) -> f32[] {
  %Arg_0.26605 = f32[] parameter(0)
  %Arg_1.26606 = f32[] parameter(1)
  ROOT %add.26607 = f32[] add(%Arg_0.26605, %Arg_1.26606)
}

%region_670.26608.clone (Arg_0.1334: f32[], Arg_1.1267: f32[]) -> f32[] {
  %Arg_0.1334 = f32[] parameter(0)
  %Arg_1.1267 = f32[] parameter(1)
  ROOT %add.1314 = f32[] add(%Arg_0.1334, %Arg_1.1267)
}

%region_357.17477 (Arg_0.17474: bf16[], Arg_1.17475: bf16[]) -> bf16[] {
  %Arg_0.17474 = bf16[] parameter(0)
  %Arg_1.17475 = bf16[] parameter(1)
  ROOT %add.17476 = bf16[] add(%Arg_0.17474, %Arg_1.17475)
}

%region_357.17477.clone (Arg_0.1335: bf16[], Arg_1.1268: bf16[]) -> bf16[] {
  %Arg_0.1335 = bf16[] parameter(0)
  %Arg_1.1268 = bf16[] parameter(1)
  ROOT %add.1315 = bf16[] add(%Arg_0.1335, %Arg_1.1268)
}

%region_671.26615 (Arg_0.26612: f32[], Arg_1.26613: f32[]) -> f32[] {
  %Arg_0.26612 = f32[] parameter(0)
  %Arg_1.26613 = f32[] parameter(1)
  ROOT %add.26614 = f32[] add(%Arg_0.26612, %Arg_1.26613)
}

%region_361.17611 (Arg_0.17608: bf16[], Arg_1.17609: bf16[]) -> bf16[] {
  %Arg_0.17608 = bf16[] parameter(0)
  %Arg_1.17609 = bf16[] parameter(1)
  ROOT %add.17610 = bf16[] add(%Arg_0.17608, %Arg_1.17609)
}

%region_361.17611.clone (Arg_0.1336: bf16[], Arg_1.1269: bf16[]) -> bf16[] {
  %Arg_0.1336 = bf16[] parameter(0)
  %Arg_1.1269 = bf16[] parameter(1)
  ROOT %add.1316 = bf16[] add(%Arg_0.1336, %Arg_1.1269)
}

%region_672.26622 (Arg_0.26619: f32[], Arg_1.26620: f32[]) -> f32[] {
  %Arg_0.26619 = f32[] parameter(0)
  %Arg_1.26620 = f32[] parameter(1)
  ROOT %add.26621 = f32[] add(%Arg_0.26619, %Arg_1.26620)
}

%add.66.clone (x.133: bf16[], y.133: bf16[]) -> bf16[] {
  %x.133 = bf16[] parameter(0)
  %y.133 = bf16[] parameter(1)
  ROOT %add.1318 = bf16[] add(%x.133, %y.133)
}

%region_673.26629 (Arg_0.26626: f32[], Arg_1.26627: f32[]) -> f32[] {
  %Arg_0.26626 = f32[] parameter(0)
  %Arg_1.26627 = f32[] parameter(1)
  ROOT %add.26628 = f32[] add(%Arg_0.26626, %Arg_1.26627)
}

%region_673.26629.clone (Arg_0.1337: f32[], Arg_1.1270: f32[]) -> f32[] {
  %Arg_0.1337 = f32[] parameter(0)
  %Arg_1.1270 = f32[] parameter(1)
  ROOT %add.1319 = f32[] add(%Arg_0.1337, %Arg_1.1270)
}

%add.67.clone (x.135: bf16[], y.135: bf16[]) -> bf16[] {
  %x.135 = bf16[] parameter(0)
  %y.135 = bf16[] parameter(1)
  ROOT %add.1321 = bf16[] add(%x.135, %y.135)
}

%region_674.26636 (Arg_0.26633: f32[], Arg_1.26634: f32[]) -> f32[] {
  %Arg_0.26633 = f32[] parameter(0)
  %Arg_1.26634 = f32[] parameter(1)
  ROOT %add.26635 = f32[] add(%Arg_0.26633, %Arg_1.26634)
}

%region_674.26636.clone (Arg_0.1338: f32[], Arg_1.1271: f32[]) -> f32[] {
  %Arg_0.1338 = f32[] parameter(0)
  %Arg_1.1271 = f32[] parameter(1)
  ROOT %add.1322 = f32[] add(%Arg_0.1338, %Arg_1.1271)
}

%add.68.clone (x.137: bf16[], y.137: bf16[]) -> bf16[] {
  %x.137 = bf16[] parameter(0)
  %y.137 = bf16[] parameter(1)
  ROOT %add.1324 = bf16[] add(%x.137, %y.137)
}

%region_675.26643 (Arg_0.26640: f32[], Arg_1.26641: f32[]) -> f32[] {
  %Arg_0.26640 = f32[] parameter(0)
  %Arg_1.26641 = f32[] parameter(1)
  ROOT %add.26642 = f32[] add(%Arg_0.26640, %Arg_1.26641)
}

%region_675.26643.clone (Arg_0.1339: f32[], Arg_1.1272: f32[]) -> f32[] {
  %Arg_0.1339 = f32[] parameter(0)
  %Arg_1.1272 = f32[] parameter(1)
  ROOT %add.1326 = f32[] add(%Arg_0.1339, %Arg_1.1272)
}

%add.69.clone (x.139: bf16[], y.139: bf16[]) -> bf16[] {
  %x.139 = bf16[] parameter(0)
  %y.139 = bf16[] parameter(1)
  ROOT %add.1328 = bf16[] add(%x.139, %y.139)
}

%region_676.26650 (Arg_0.26647: f32[], Arg_1.26648: f32[]) -> f32[] {
  %Arg_0.26647 = f32[] parameter(0)
  %Arg_1.26648 = f32[] parameter(1)
  ROOT %add.26649 = f32[] add(%Arg_0.26647, %Arg_1.26648)
}

%region_676.26650.clone (Arg_0.1340: f32[], Arg_1.1273: f32[]) -> f32[] {
  %Arg_0.1340 = f32[] parameter(0)
  %Arg_1.1273 = f32[] parameter(1)
  ROOT %add.1329 = f32[] add(%Arg_0.1340, %Arg_1.1273)
}

%add.70.clone (x.141: bf16[], y.141: bf16[]) -> bf16[] {
  %x.141 = bf16[] parameter(0)
  %y.141 = bf16[] parameter(1)
  ROOT %add.1332 = bf16[] add(%x.141, %y.141)
}

%region_677.26657 (Arg_0.26654: f32[], Arg_1.26655: f32[]) -> f32[] {
  %Arg_0.26654 = f32[] parameter(0)
  %Arg_1.26655 = f32[] parameter(1)
  ROOT %add.26656 = f32[] add(%Arg_0.26654, %Arg_1.26655)
}

%region_677.26657.clone (Arg_0.1341: f32[], Arg_1.1274: f32[]) -> f32[] {
  %Arg_0.1341 = f32[] parameter(0)
  %Arg_1.1274 = f32[] parameter(1)
  ROOT %add.1333 = f32[] add(%Arg_0.1341, %Arg_1.1274)
}

%add.71.clone (x.143: bf16[], y.143: bf16[]) -> bf16[] {
  %x.143 = bf16[] parameter(0)
  %y.143 = bf16[] parameter(1)
  ROOT %add.1336 = bf16[] add(%x.143, %y.143)
}

%region_678.26664 (Arg_0.26661: f32[], Arg_1.26662: f32[]) -> f32[] {
  %Arg_0.26661 = f32[] parameter(0)
  %Arg_1.26662 = f32[] parameter(1)
  ROOT %add.26663 = f32[] add(%Arg_0.26661, %Arg_1.26662)
}

%region_678.26664.clone (Arg_0.1342: f32[], Arg_1.1275: f32[]) -> f32[] {
  %Arg_0.1342 = f32[] parameter(0)
  %Arg_1.1275 = f32[] parameter(1)
  ROOT %add.1337 = f32[] add(%Arg_0.1342, %Arg_1.1275)
}

%add.72.clone (x.145: bf16[], y.145: bf16[]) -> bf16[] {
  %x.145 = bf16[] parameter(0)
  %y.145 = bf16[] parameter(1)
  ROOT %add.1339 = bf16[] add(%x.145, %y.145)
}

%region_679.26671 (Arg_0.26668: f32[], Arg_1.26669: f32[]) -> f32[] {
  %Arg_0.26668 = f32[] parameter(0)
  %Arg_1.26669 = f32[] parameter(1)
  ROOT %add.26670 = f32[] add(%Arg_0.26668, %Arg_1.26669)
}

%region_679.26671.clone (Arg_0.1343: f32[], Arg_1.1276: f32[]) -> f32[] {
  %Arg_0.1343 = f32[] parameter(0)
  %Arg_1.1276 = f32[] parameter(1)
  ROOT %add.1340 = f32[] add(%Arg_0.1343, %Arg_1.1276)
}

%region_344.16985 (Arg_0.16982: bf16[], Arg_1.16983: bf16[]) -> bf16[] {
  %Arg_0.16982 = bf16[] parameter(0)
  %Arg_1.16983 = bf16[] parameter(1)
  ROOT %add.16984 = bf16[] add(%Arg_0.16982, %Arg_1.16983)
}

%region_344.16985.clone (Arg_0.1344: bf16[], Arg_1.1277: bf16[]) -> bf16[] {
  %Arg_0.1344 = bf16[] parameter(0)
  %Arg_1.1277 = bf16[] parameter(1)
  ROOT %add.1341 = bf16[] add(%Arg_0.1344, %Arg_1.1277)
}

%region_680.26678 (Arg_0.26675: f32[], Arg_1.26676: f32[]) -> f32[] {
  %Arg_0.26675 = f32[] parameter(0)
  %Arg_1.26676 = f32[] parameter(1)
  ROOT %add.26677 = f32[] add(%Arg_0.26675, %Arg_1.26676)
}

%region_348.17119 (Arg_0.17116: bf16[], Arg_1.17117: bf16[]) -> bf16[] {
  %Arg_0.17116 = bf16[] parameter(0)
  %Arg_1.17117 = bf16[] parameter(1)
  ROOT %add.17118 = bf16[] add(%Arg_0.17116, %Arg_1.17117)
}

%region_348.17119.clone (Arg_0.1345: bf16[], Arg_1.1278: bf16[]) -> bf16[] {
  %Arg_0.1345 = bf16[] parameter(0)
  %Arg_1.1278 = bf16[] parameter(1)
  ROOT %add.1342 = bf16[] add(%Arg_0.1345, %Arg_1.1278)
}

%region_681.26685 (Arg_0.26682: f32[], Arg_1.26683: f32[]) -> f32[] {
  %Arg_0.26682 = f32[] parameter(0)
  %Arg_1.26683 = f32[] parameter(1)
  ROOT %add.26684 = f32[] add(%Arg_0.26682, %Arg_1.26683)
}

%add.73.clone (x.147: bf16[], y.147: bf16[]) -> bf16[] {
  %x.147 = bf16[] parameter(0)
  %y.147 = bf16[] parameter(1)
  ROOT %add.1344 = bf16[] add(%x.147, %y.147)
}

%region_682.26692 (Arg_0.26689: f32[], Arg_1.26690: f32[]) -> f32[] {
  %Arg_0.26689 = f32[] parameter(0)
  %Arg_1.26690 = f32[] parameter(1)
  ROOT %add.26691 = f32[] add(%Arg_0.26689, %Arg_1.26690)
}

%region_682.26692.clone (Arg_0.1346: f32[], Arg_1.1279: f32[]) -> f32[] {
  %Arg_0.1346 = f32[] parameter(0)
  %Arg_1.1279 = f32[] parameter(1)
  ROOT %add.1345 = f32[] add(%Arg_0.1346, %Arg_1.1279)
}

%add.74.clone (x.149: bf16[], y.149: bf16[]) -> bf16[] {
  %x.149 = bf16[] parameter(0)
  %y.149 = bf16[] parameter(1)
  ROOT %add.1347 = bf16[] add(%x.149, %y.149)
}

%region_683.26699 (Arg_0.26696: f32[], Arg_1.26697: f32[]) -> f32[] {
  %Arg_0.26696 = f32[] parameter(0)
  %Arg_1.26697 = f32[] parameter(1)
  ROOT %add.26698 = f32[] add(%Arg_0.26696, %Arg_1.26697)
}

%region_683.26699.clone (Arg_0.1347: f32[], Arg_1.1280: f32[]) -> f32[] {
  %Arg_0.1347 = f32[] parameter(0)
  %Arg_1.1280 = f32[] parameter(1)
  ROOT %add.1348 = f32[] add(%Arg_0.1347, %Arg_1.1280)
}

%add.75.clone (x.151: bf16[], y.151: bf16[]) -> bf16[] {
  %x.151 = bf16[] parameter(0)
  %y.151 = bf16[] parameter(1)
  ROOT %add.1350 = bf16[] add(%x.151, %y.151)
}

%region_684.26706 (Arg_0.26703: f32[], Arg_1.26704: f32[]) -> f32[] {
  %Arg_0.26703 = f32[] parameter(0)
  %Arg_1.26704 = f32[] parameter(1)
  ROOT %add.26705 = f32[] add(%Arg_0.26703, %Arg_1.26704)
}

%region_684.26706.clone (Arg_0.1348: f32[], Arg_1.1281: f32[]) -> f32[] {
  %Arg_0.1348 = f32[] parameter(0)
  %Arg_1.1281 = f32[] parameter(1)
  ROOT %add.1351 = f32[] add(%Arg_0.1348, %Arg_1.1281)
}

%add.76.clone (x.153: bf16[], y.153: bf16[]) -> bf16[] {
  %x.153 = bf16[] parameter(0)
  %y.153 = bf16[] parameter(1)
  ROOT %add.1353 = bf16[] add(%x.153, %y.153)
}

%region_685.26713 (Arg_0.26710: f32[], Arg_1.26711: f32[]) -> f32[] {
  %Arg_0.26710 = f32[] parameter(0)
  %Arg_1.26711 = f32[] parameter(1)
  ROOT %add.26712 = f32[] add(%Arg_0.26710, %Arg_1.26711)
}

%region_685.26713.clone (Arg_0.1349: f32[], Arg_1.1282: f32[]) -> f32[] {
  %Arg_0.1349 = f32[] parameter(0)
  %Arg_1.1282 = f32[] parameter(1)
  ROOT %add.1354 = f32[] add(%Arg_0.1349, %Arg_1.1282)
}

%add.77.clone (x.155: bf16[], y.155: bf16[]) -> bf16[] {
  %x.155 = bf16[] parameter(0)
  %y.155 = bf16[] parameter(1)
  ROOT %add.1356 = bf16[] add(%x.155, %y.155)
}

%region_686.26720 (Arg_0.26717: f32[], Arg_1.26718: f32[]) -> f32[] {
  %Arg_0.26717 = f32[] parameter(0)
  %Arg_1.26718 = f32[] parameter(1)
  ROOT %add.26719 = f32[] add(%Arg_0.26717, %Arg_1.26718)
}

%region_686.26720.clone (Arg_0.1350: f32[], Arg_1.1283: f32[]) -> f32[] {
  %Arg_0.1350 = f32[] parameter(0)
  %Arg_1.1283 = f32[] parameter(1)
  ROOT %add.1358 = f32[] add(%Arg_0.1350, %Arg_1.1283)
}

%add.78.clone (x.157: bf16[], y.157: bf16[]) -> bf16[] {
  %x.157 = bf16[] parameter(0)
  %y.157 = bf16[] parameter(1)
  ROOT %add.1360 = bf16[] add(%x.157, %y.157)
}

%region_687.26727 (Arg_0.26724: f32[], Arg_1.26725: f32[]) -> f32[] {
  %Arg_0.26724 = f32[] parameter(0)
  %Arg_1.26725 = f32[] parameter(1)
  ROOT %add.26726 = f32[] add(%Arg_0.26724, %Arg_1.26725)
}

%region_687.26727.clone (Arg_0.1351: f32[], Arg_1.1284: f32[]) -> f32[] {
  %Arg_0.1351 = f32[] parameter(0)
  %Arg_1.1284 = f32[] parameter(1)
  ROOT %add.1361 = f32[] add(%Arg_0.1351, %Arg_1.1284)
}

%add.79.clone (x.159: bf16[], y.159: bf16[]) -> bf16[] {
  %x.159 = bf16[] parameter(0)
  %y.159 = bf16[] parameter(1)
  ROOT %add.1363 = bf16[] add(%x.159, %y.159)
}

%region_688.26734 (Arg_0.26731: f32[], Arg_1.26732: f32[]) -> f32[] {
  %Arg_0.26731 = f32[] parameter(0)
  %Arg_1.26732 = f32[] parameter(1)
  ROOT %add.26733 = f32[] add(%Arg_0.26731, %Arg_1.26732)
}

%region_688.26734.clone (Arg_0.1353: f32[], Arg_1.1285: f32[]) -> f32[] {
  %Arg_0.1353 = f32[] parameter(0)
  %Arg_1.1285 = f32[] parameter(1)
  ROOT %add.1364 = f32[] add(%Arg_0.1353, %Arg_1.1285)
}

%region_331.16493 (Arg_0.16490: bf16[], Arg_1.16491: bf16[]) -> bf16[] {
  %Arg_0.16490 = bf16[] parameter(0)
  %Arg_1.16491 = bf16[] parameter(1)
  ROOT %add.16492 = bf16[] add(%Arg_0.16490, %Arg_1.16491)
}

%region_331.16493.clone (Arg_0.1354: bf16[], Arg_1.1286: bf16[]) -> bf16[] {
  %Arg_0.1354 = bf16[] parameter(0)
  %Arg_1.1286 = bf16[] parameter(1)
  ROOT %add.1365 = bf16[] add(%Arg_0.1354, %Arg_1.1286)
}

%region_689.26741 (Arg_0.26738: f32[], Arg_1.26739: f32[]) -> f32[] {
  %Arg_0.26738 = f32[] parameter(0)
  %Arg_1.26739 = f32[] parameter(1)
  ROOT %add.26740 = f32[] add(%Arg_0.26738, %Arg_1.26739)
}

%region_335.16627 (Arg_0.16624: bf16[], Arg_1.16625: bf16[]) -> bf16[] {
  %Arg_0.16624 = bf16[] parameter(0)
  %Arg_1.16625 = bf16[] parameter(1)
  ROOT %add.16626 = bf16[] add(%Arg_0.16624, %Arg_1.16625)
}

%region_335.16627.clone (Arg_0.1355: bf16[], Arg_1.1288: bf16[]) -> bf16[] {
  %Arg_0.1355 = bf16[] parameter(0)
  %Arg_1.1288 = bf16[] parameter(1)
  ROOT %add.1366 = bf16[] add(%Arg_0.1355, %Arg_1.1288)
}

%region_690.26748 (Arg_0.26745: f32[], Arg_1.26746: f32[]) -> f32[] {
  %Arg_0.26745 = f32[] parameter(0)
  %Arg_1.26746 = f32[] parameter(1)
  ROOT %add.26747 = f32[] add(%Arg_0.26745, %Arg_1.26746)
}

%add.80.clone (x.161: bf16[], y.161: bf16[]) -> bf16[] {
  %x.161 = bf16[] parameter(0)
  %y.161 = bf16[] parameter(1)
  ROOT %add.1368 = bf16[] add(%x.161, %y.161)
}

%region_691.26755 (Arg_0.26752: f32[], Arg_1.26753: f32[]) -> f32[] {
  %Arg_0.26752 = f32[] parameter(0)
  %Arg_1.26753 = f32[] parameter(1)
  ROOT %add.26754 = f32[] add(%Arg_0.26752, %Arg_1.26753)
}

%region_691.26755.clone (Arg_0.1356: f32[], Arg_1.1289: f32[]) -> f32[] {
  %Arg_0.1356 = f32[] parameter(0)
  %Arg_1.1289 = f32[] parameter(1)
  ROOT %add.1369 = f32[] add(%Arg_0.1356, %Arg_1.1289)
}

%add.81.clone (x.163: bf16[], y.163: bf16[]) -> bf16[] {
  %x.163 = bf16[] parameter(0)
  %y.163 = bf16[] parameter(1)
  ROOT %add.1372 = bf16[] add(%x.163, %y.163)
}

%region_692.26762 (Arg_0.26759: f32[], Arg_1.26760: f32[]) -> f32[] {
  %Arg_0.26759 = f32[] parameter(0)
  %Arg_1.26760 = f32[] parameter(1)
  ROOT %add.26761 = f32[] add(%Arg_0.26759, %Arg_1.26760)
}

%region_692.26762.clone (Arg_0.1357: f32[], Arg_1.1290: f32[]) -> f32[] {
  %Arg_0.1357 = f32[] parameter(0)
  %Arg_1.1290 = f32[] parameter(1)
  ROOT %add.1373 = f32[] add(%Arg_0.1357, %Arg_1.1290)
}

%add.82.clone (x.165: bf16[], y.165: bf16[]) -> bf16[] {
  %x.165 = bf16[] parameter(0)
  %y.165 = bf16[] parameter(1)
  ROOT %add.1375 = bf16[] add(%x.165, %y.165)
}

%region_693.26769 (Arg_0.26766: f32[], Arg_1.26767: f32[]) -> f32[] {
  %Arg_0.26766 = f32[] parameter(0)
  %Arg_1.26767 = f32[] parameter(1)
  ROOT %add.26768 = f32[] add(%Arg_0.26766, %Arg_1.26767)
}

%region_693.26769.clone (Arg_0.1358: f32[], Arg_1.1291: f32[]) -> f32[] {
  %Arg_0.1358 = f32[] parameter(0)
  %Arg_1.1291 = f32[] parameter(1)
  ROOT %add.1376 = f32[] add(%Arg_0.1358, %Arg_1.1291)
}

%add.83.clone (x.167: bf16[], y.167: bf16[]) -> bf16[] {
  %x.167 = bf16[] parameter(0)
  %y.167 = bf16[] parameter(1)
  ROOT %add.1379 = bf16[] add(%x.167, %y.167)
}

%region_694.26776 (Arg_0.26773: f32[], Arg_1.26774: f32[]) -> f32[] {
  %Arg_0.26773 = f32[] parameter(0)
  %Arg_1.26774 = f32[] parameter(1)
  ROOT %add.26775 = f32[] add(%Arg_0.26773, %Arg_1.26774)
}

%region_694.26776.clone (Arg_0.1359: f32[], Arg_1.1292: f32[]) -> f32[] {
  %Arg_0.1359 = f32[] parameter(0)
  %Arg_1.1292 = f32[] parameter(1)
  ROOT %add.1380 = f32[] add(%Arg_0.1359, %Arg_1.1292)
}

%add.84.clone (x.169: bf16[], y.169: bf16[]) -> bf16[] {
  %x.169 = bf16[] parameter(0)
  %y.169 = bf16[] parameter(1)
  ROOT %add.1383 = bf16[] add(%x.169, %y.169)
}

%region_695.26783 (Arg_0.26780: f32[], Arg_1.26781: f32[]) -> f32[] {
  %Arg_0.26780 = f32[] parameter(0)
  %Arg_1.26781 = f32[] parameter(1)
  ROOT %add.26782 = f32[] add(%Arg_0.26780, %Arg_1.26781)
}

%region_695.26783.clone (Arg_0.1360: f32[], Arg_1.1293: f32[]) -> f32[] {
  %Arg_0.1360 = f32[] parameter(0)
  %Arg_1.1293 = f32[] parameter(1)
  ROOT %add.1384 = f32[] add(%Arg_0.1360, %Arg_1.1293)
}

%add.85.clone (x.171: bf16[], y.171: bf16[]) -> bf16[] {
  %x.171 = bf16[] parameter(0)
  %y.171 = bf16[] parameter(1)
  ROOT %add.1386 = bf16[] add(%x.171, %y.171)
}

%region_696.26790 (Arg_0.26787: f32[], Arg_1.26788: f32[]) -> f32[] {
  %Arg_0.26787 = f32[] parameter(0)
  %Arg_1.26788 = f32[] parameter(1)
  ROOT %add.26789 = f32[] add(%Arg_0.26787, %Arg_1.26788)
}

%region_696.26790.clone (Arg_0.1361: f32[], Arg_1.1294: f32[]) -> f32[] {
  %Arg_0.1361 = f32[] parameter(0)
  %Arg_1.1294 = f32[] parameter(1)
  ROOT %add.1387 = f32[] add(%Arg_0.1361, %Arg_1.1294)
}

%add.86.clone (x.173: bf16[], y.173: bf16[]) -> bf16[] {
  %x.173 = bf16[] parameter(0)
  %y.173 = bf16[] parameter(1)
  ROOT %add.1389 = bf16[] add(%x.173, %y.173)
}

%region_697.26797 (Arg_0.26794: f32[], Arg_1.26795: f32[]) -> f32[] {
  %Arg_0.26794 = f32[] parameter(0)
  %Arg_1.26795 = f32[] parameter(1)
  ROOT %add.26796 = f32[] add(%Arg_0.26794, %Arg_1.26795)
}

%region_697.26797.clone (Arg_0.1362: f32[], Arg_1.1295: f32[]) -> f32[] {
  %Arg_0.1362 = f32[] parameter(0)
  %Arg_1.1295 = f32[] parameter(1)
  ROOT %add.1390 = f32[] add(%Arg_0.1362, %Arg_1.1295)
}

%region_552.24857 (Arg_0.24854: bf16[], Arg_1.24855: bf16[]) -> bf16[] {
  %Arg_0.24854 = bf16[] parameter(0)
  %Arg_1.24855 = bf16[] parameter(1)
  ROOT %add.24856 = bf16[] add(%Arg_0.24854, %Arg_1.24855)
}

%region_552.24857.clone (Arg_0.1363: bf16[], Arg_1.1296: bf16[]) -> bf16[] {
  %Arg_0.1363 = bf16[] parameter(0)
  %Arg_1.1296 = bf16[] parameter(1)
  ROOT %add.1391 = bf16[] add(%Arg_0.1363, %Arg_1.1296)
}

%region_698.26804 (Arg_0.26801: f32[], Arg_1.26802: f32[]) -> f32[] {
  %Arg_0.26801 = f32[] parameter(0)
  %Arg_1.26802 = f32[] parameter(1)
  ROOT %add.26803 = f32[] add(%Arg_0.26801, %Arg_1.26802)
}

%region_556.24991 (Arg_0.24988: bf16[], Arg_1.24989: bf16[]) -> bf16[] {
  %Arg_0.24988 = bf16[] parameter(0)
  %Arg_1.24989 = bf16[] parameter(1)
  ROOT %add.24990 = bf16[] add(%Arg_0.24988, %Arg_1.24989)
}

%region_556.24991.clone (Arg_0.1364: bf16[], Arg_1.1297: bf16[]) -> bf16[] {
  %Arg_0.1364 = bf16[] parameter(0)
  %Arg_1.1297 = bf16[] parameter(1)
  ROOT %add.1392 = bf16[] add(%Arg_0.1364, %Arg_1.1297)
}

%region_699.26811 (Arg_0.26808: f32[], Arg_1.26809: f32[]) -> f32[] {
  %Arg_0.26808 = f32[] parameter(0)
  %Arg_1.26809 = f32[] parameter(1)
  ROOT %add.26810 = f32[] add(%Arg_0.26808, %Arg_1.26809)
}

%add.87.clone (x.175: bf16[], y.175: bf16[]) -> bf16[] {
  %x.175 = bf16[] parameter(0)
  %y.175 = bf16[] parameter(1)
  ROOT %add.1394 = bf16[] add(%x.175, %y.175)
}

%region_700.26818 (Arg_0.26815: f32[], Arg_1.26816: f32[]) -> f32[] {
  %Arg_0.26815 = f32[] parameter(0)
  %Arg_1.26816 = f32[] parameter(1)
  ROOT %add.26817 = f32[] add(%Arg_0.26815, %Arg_1.26816)
}

%region_700.26818.clone (Arg_0.1365: f32[], Arg_1.1299: f32[]) -> f32[] {
  %Arg_0.1365 = f32[] parameter(0)
  %Arg_1.1299 = f32[] parameter(1)
  ROOT %add.1395 = f32[] add(%Arg_0.1365, %Arg_1.1299)
}

%add.88.clone (x.177: bf16[], y.177: bf16[]) -> bf16[] {
  %x.177 = bf16[] parameter(0)
  %y.177 = bf16[] parameter(1)
  ROOT %add.1397 = bf16[] add(%x.177, %y.177)
}

%region_701.26825 (Arg_0.26822: f32[], Arg_1.26823: f32[]) -> f32[] {
  %Arg_0.26822 = f32[] parameter(0)
  %Arg_1.26823 = f32[] parameter(1)
  ROOT %add.26824 = f32[] add(%Arg_0.26822, %Arg_1.26823)
}

%region_701.26825.clone (Arg_0.1366: f32[], Arg_1.1300: f32[]) -> f32[] {
  %Arg_0.1366 = f32[] parameter(0)
  %Arg_1.1300 = f32[] parameter(1)
  ROOT %add.1398 = f32[] add(%Arg_0.1366, %Arg_1.1300)
}

%add.89.clone (x.179: bf16[], y.179: bf16[]) -> bf16[] {
  %x.179 = bf16[] parameter(0)
  %y.179 = bf16[] parameter(1)
  ROOT %add.1400 = bf16[] add(%x.179, %y.179)
}

%region_702.26832 (Arg_0.26829: f32[], Arg_1.26830: f32[]) -> f32[] {
  %Arg_0.26829 = f32[] parameter(0)
  %Arg_1.26830 = f32[] parameter(1)
  ROOT %add.26831 = f32[] add(%Arg_0.26829, %Arg_1.26830)
}

%region_702.26832.clone (Arg_0.1367: f32[], Arg_1.1301: f32[]) -> f32[] {
  %Arg_0.1367 = f32[] parameter(0)
  %Arg_1.1301 = f32[] parameter(1)
  ROOT %add.1401 = f32[] add(%Arg_0.1367, %Arg_1.1301)
}

%add.90.clone (x.181: bf16[], y.181: bf16[]) -> bf16[] {
  %x.181 = bf16[] parameter(0)
  %y.181 = bf16[] parameter(1)
  ROOT %add.1403 = bf16[] add(%x.181, %y.181)
}

%region_703.26839 (Arg_0.26836: f32[], Arg_1.26837: f32[]) -> f32[] {
  %Arg_0.26836 = f32[] parameter(0)
  %Arg_1.26837 = f32[] parameter(1)
  ROOT %add.26838 = f32[] add(%Arg_0.26836, %Arg_1.26837)
}

%region_703.26839.clone (Arg_0.1368: f32[], Arg_1.1302: f32[]) -> f32[] {
  %Arg_0.1368 = f32[] parameter(0)
  %Arg_1.1302 = f32[] parameter(1)
  ROOT %add.1404 = f32[] add(%Arg_0.1368, %Arg_1.1302)
}

%add.91.clone (x.183: bf16[], y.183: bf16[]) -> bf16[] {
  %x.183 = bf16[] parameter(0)
  %y.183 = bf16[] parameter(1)
  ROOT %add.1406 = bf16[] add(%x.183, %y.183)
}

%region_704.26846 (Arg_0.26843: f32[], Arg_1.26844: f32[]) -> f32[] {
  %Arg_0.26843 = f32[] parameter(0)
  %Arg_1.26844 = f32[] parameter(1)
  ROOT %add.26845 = f32[] add(%Arg_0.26843, %Arg_1.26844)
}

%region_704.26846.clone (Arg_0.1369: f32[], Arg_1.1303: f32[]) -> f32[] {
  %Arg_0.1369 = f32[] parameter(0)
  %Arg_1.1303 = f32[] parameter(1)
  ROOT %add.1407 = f32[] add(%Arg_0.1369, %Arg_1.1303)
}

%add.92.clone (x.185: bf16[], y.185: bf16[]) -> bf16[] {
  %x.185 = bf16[] parameter(0)
  %y.185 = bf16[] parameter(1)
  ROOT %add.1409 = bf16[] add(%x.185, %y.185)
}

%region_705.26853 (Arg_0.26850: f32[], Arg_1.26851: f32[]) -> f32[] {
  %Arg_0.26850 = f32[] parameter(0)
  %Arg_1.26851 = f32[] parameter(1)
  ROOT %add.26852 = f32[] add(%Arg_0.26850, %Arg_1.26851)
}

%region_705.26853.clone (Arg_0.1370: f32[], Arg_1.1304: f32[]) -> f32[] {
  %Arg_0.1370 = f32[] parameter(0)
  %Arg_1.1304 = f32[] parameter(1)
  ROOT %add.1410 = f32[] add(%Arg_0.1370, %Arg_1.1304)
}

%add.93.clone (x.187: bf16[], y.187: bf16[]) -> bf16[] {
  %x.187 = bf16[] parameter(0)
  %y.187 = bf16[] parameter(1)
  ROOT %add.1412 = bf16[] add(%x.187, %y.187)
}

%region_706.26860 (Arg_0.26857: f32[], Arg_1.26858: f32[]) -> f32[] {
  %Arg_0.26857 = f32[] parameter(0)
  %Arg_1.26858 = f32[] parameter(1)
  ROOT %add.26859 = f32[] add(%Arg_0.26857, %Arg_1.26858)
}

%region_706.26860.clone (Arg_0.1371: f32[], Arg_1.1305: f32[]) -> f32[] {
  %Arg_0.1371 = f32[] parameter(0)
  %Arg_1.1305 = f32[] parameter(1)
  ROOT %add.1413 = f32[] add(%Arg_0.1371, %Arg_1.1305)
}

%region_318.16001 (Arg_0.15998: bf16[], Arg_1.15999: bf16[]) -> bf16[] {
  %Arg_0.15998 = bf16[] parameter(0)
  %Arg_1.15999 = bf16[] parameter(1)
  ROOT %add.16000 = bf16[] add(%Arg_0.15998, %Arg_1.15999)
}

%region_318.16001.clone (Arg_0.1372: bf16[], Arg_1.1307: bf16[]) -> bf16[] {
  %Arg_0.1372 = bf16[] parameter(0)
  %Arg_1.1307 = bf16[] parameter(1)
  ROOT %add.1414 = bf16[] add(%Arg_0.1372, %Arg_1.1307)
}

%region_707.26867 (Arg_0.26864: f32[], Arg_1.26865: f32[]) -> f32[] {
  %Arg_0.26864 = f32[] parameter(0)
  %Arg_1.26865 = f32[] parameter(1)
  ROOT %add.26866 = f32[] add(%Arg_0.26864, %Arg_1.26865)
}

%region_322.16135 (Arg_0.16132: bf16[], Arg_1.16133: bf16[]) -> bf16[] {
  %Arg_0.16132 = bf16[] parameter(0)
  %Arg_1.16133 = bf16[] parameter(1)
  ROOT %add.16134 = bf16[] add(%Arg_0.16132, %Arg_1.16133)
}

%region_322.16135.clone (Arg_0.1373: bf16[], Arg_1.1308: bf16[]) -> bf16[] {
  %Arg_0.1373 = bf16[] parameter(0)
  %Arg_1.1308 = bf16[] parameter(1)
  ROOT %add.1415 = bf16[] add(%Arg_0.1373, %Arg_1.1308)
}

%region_708.26874 (Arg_0.26871: f32[], Arg_1.26872: f32[]) -> f32[] {
  %Arg_0.26871 = f32[] parameter(0)
  %Arg_1.26872 = f32[] parameter(1)
  ROOT %add.26873 = f32[] add(%Arg_0.26871, %Arg_1.26872)
}

%add.94.clone (x.189: bf16[], y.189: bf16[]) -> bf16[] {
  %x.189 = bf16[] parameter(0)
  %y.189 = bf16[] parameter(1)
  ROOT %add.1417 = bf16[] add(%x.189, %y.189)
}

%region_709.26881 (Arg_0.26878: f32[], Arg_1.26879: f32[]) -> f32[] {
  %Arg_0.26878 = f32[] parameter(0)
  %Arg_1.26879 = f32[] parameter(1)
  ROOT %add.26880 = f32[] add(%Arg_0.26878, %Arg_1.26879)
}

%region_709.26881.clone (Arg_0.1374: f32[], Arg_1.1309: f32[]) -> f32[] {
  %Arg_0.1374 = f32[] parameter(0)
  %Arg_1.1309 = f32[] parameter(1)
  ROOT %add.1418 = f32[] add(%Arg_0.1374, %Arg_1.1309)
}

%add.95.clone (x.191: bf16[], y.191: bf16[]) -> bf16[] {
  %x.191 = bf16[] parameter(0)
  %y.191 = bf16[] parameter(1)
  ROOT %add.1420 = bf16[] add(%x.191, %y.191)
}

%region_710.26888 (Arg_0.26885: f32[], Arg_1.26886: f32[]) -> f32[] {
  %Arg_0.26885 = f32[] parameter(0)
  %Arg_1.26886 = f32[] parameter(1)
  ROOT %add.26887 = f32[] add(%Arg_0.26885, %Arg_1.26886)
}

%region_710.26888.clone (Arg_0.1376: f32[], Arg_1.1310: f32[]) -> f32[] {
  %Arg_0.1376 = f32[] parameter(0)
  %Arg_1.1310 = f32[] parameter(1)
  ROOT %add.1421 = f32[] add(%Arg_0.1376, %Arg_1.1310)
}

%add.96.clone (x.193: bf16[], y.193: bf16[]) -> bf16[] {
  %x.193 = bf16[] parameter(0)
  %y.193 = bf16[] parameter(1)
  ROOT %add.1423 = bf16[] add(%x.193, %y.193)
}

%region_711.26895 (Arg_0.26892: f32[], Arg_1.26893: f32[]) -> f32[] {
  %Arg_0.26892 = f32[] parameter(0)
  %Arg_1.26893 = f32[] parameter(1)
  ROOT %add.26894 = f32[] add(%Arg_0.26892, %Arg_1.26893)
}

%region_711.26895.clone (Arg_0.1377: f32[], Arg_1.1312: f32[]) -> f32[] {
  %Arg_0.1377 = f32[] parameter(0)
  %Arg_1.1312 = f32[] parameter(1)
  ROOT %add.1424 = f32[] add(%Arg_0.1377, %Arg_1.1312)
}

%add.97.clone (x.195: bf16[], y.195: bf16[]) -> bf16[] {
  %x.195 = bf16[] parameter(0)
  %y.195 = bf16[] parameter(1)
  ROOT %add.1426 = bf16[] add(%x.195, %y.195)
}

%region_712.26902 (Arg_0.26899: f32[], Arg_1.26900: f32[]) -> f32[] {
  %Arg_0.26899 = f32[] parameter(0)
  %Arg_1.26900 = f32[] parameter(1)
  ROOT %add.26901 = f32[] add(%Arg_0.26899, %Arg_1.26900)
}

%region_712.26902.clone (Arg_0.1378: f32[], Arg_1.1313: f32[]) -> f32[] {
  %Arg_0.1378 = f32[] parameter(0)
  %Arg_1.1313 = f32[] parameter(1)
  ROOT %add.1427 = f32[] add(%Arg_0.1378, %Arg_1.1313)
}

%add.98.clone (x.197: bf16[], y.197: bf16[]) -> bf16[] {
  %x.197 = bf16[] parameter(0)
  %y.197 = bf16[] parameter(1)
  ROOT %add.1429 = bf16[] add(%x.197, %y.197)
}

%region_713.26909 (Arg_0.26906: f32[], Arg_1.26907: f32[]) -> f32[] {
  %Arg_0.26906 = f32[] parameter(0)
  %Arg_1.26907 = f32[] parameter(1)
  ROOT %add.26908 = f32[] add(%Arg_0.26906, %Arg_1.26907)
}

%region_713.26909.clone (Arg_0.1379: f32[], Arg_1.1314: f32[]) -> f32[] {
  %Arg_0.1379 = f32[] parameter(0)
  %Arg_1.1314 = f32[] parameter(1)
  ROOT %add.1430 = f32[] add(%Arg_0.1379, %Arg_1.1314)
}

%add.99.clone (x.199: bf16[], y.199: bf16[]) -> bf16[] {
  %x.199 = bf16[] parameter(0)
  %y.199 = bf16[] parameter(1)
  ROOT %add.1432 = bf16[] add(%x.199, %y.199)
}

%region_714.26916 (Arg_0.26913: f32[], Arg_1.26914: f32[]) -> f32[] {
  %Arg_0.26913 = f32[] parameter(0)
  %Arg_1.26914 = f32[] parameter(1)
  ROOT %add.26915 = f32[] add(%Arg_0.26913, %Arg_1.26914)
}

%region_714.26916.clone (Arg_0.1380: f32[], Arg_1.1315: f32[]) -> f32[] {
  %Arg_0.1380 = f32[] parameter(0)
  %Arg_1.1315 = f32[] parameter(1)
  ROOT %add.1433 = f32[] add(%Arg_0.1380, %Arg_1.1315)
}

%add.100.clone (x.201: bf16[], y.201: bf16[]) -> bf16[] {
  %x.201 = bf16[] parameter(0)
  %y.201 = bf16[] parameter(1)
  ROOT %add.1435 = bf16[] add(%x.201, %y.201)
}

%region_715.26923 (Arg_0.26920: f32[], Arg_1.26921: f32[]) -> f32[] {
  %Arg_0.26920 = f32[] parameter(0)
  %Arg_1.26921 = f32[] parameter(1)
  ROOT %add.26922 = f32[] add(%Arg_0.26920, %Arg_1.26921)
}

%region_715.26923.clone (Arg_0.1381: f32[], Arg_1.1316: f32[]) -> f32[] {
  %Arg_0.1381 = f32[] parameter(0)
  %Arg_1.1316 = f32[] parameter(1)
  ROOT %add.1436 = f32[] add(%Arg_0.1381, %Arg_1.1316)
}

%region_305.15509 (Arg_0.15506: bf16[], Arg_1.15507: bf16[]) -> bf16[] {
  %Arg_0.15506 = bf16[] parameter(0)
  %Arg_1.15507 = bf16[] parameter(1)
  ROOT %add.15508 = bf16[] add(%Arg_0.15506, %Arg_1.15507)
}

%region_305.15509.clone (Arg_0.1382: bf16[], Arg_1.1317: bf16[]) -> bf16[] {
  %Arg_0.1382 = bf16[] parameter(0)
  %Arg_1.1317 = bf16[] parameter(1)
  ROOT %add.1437 = bf16[] add(%Arg_0.1382, %Arg_1.1317)
}

%region_716.26930 (Arg_0.26927: f32[], Arg_1.26928: f32[]) -> f32[] {
  %Arg_0.26927 = f32[] parameter(0)
  %Arg_1.26928 = f32[] parameter(1)
  ROOT %add.26929 = f32[] add(%Arg_0.26927, %Arg_1.26928)
}

%region_309.15643 (Arg_0.15640: bf16[], Arg_1.15641: bf16[]) -> bf16[] {
  %Arg_0.15640 = bf16[] parameter(0)
  %Arg_1.15641 = bf16[] parameter(1)
  ROOT %add.15642 = bf16[] add(%Arg_0.15640, %Arg_1.15641)
}

%region_309.15643.clone (Arg_0.1383: bf16[], Arg_1.1318: bf16[]) -> bf16[] {
  %Arg_0.1383 = bf16[] parameter(0)
  %Arg_1.1318 = bf16[] parameter(1)
  ROOT %add.1438 = bf16[] add(%Arg_0.1383, %Arg_1.1318)
}

%region_717.26937 (Arg_0.26934: f32[], Arg_1.26935: f32[]) -> f32[] {
  %Arg_0.26934 = f32[] parameter(0)
  %Arg_1.26935 = f32[] parameter(1)
  ROOT %add.26936 = f32[] add(%Arg_0.26934, %Arg_1.26935)
}

%add.101.clone (x.203: bf16[], y.203: bf16[]) -> bf16[] {
  %x.203 = bf16[] parameter(0)
  %y.203 = bf16[] parameter(1)
  ROOT %add.1440 = bf16[] add(%x.203, %y.203)
}

%region_718.26944 (Arg_0.26941: f32[], Arg_1.26942: f32[]) -> f32[] {
  %Arg_0.26941 = f32[] parameter(0)
  %Arg_1.26942 = f32[] parameter(1)
  ROOT %add.26943 = f32[] add(%Arg_0.26941, %Arg_1.26942)
}

%region_718.26944.clone (Arg_0.1384: f32[], Arg_1.1319: f32[]) -> f32[] {
  %Arg_0.1384 = f32[] parameter(0)
  %Arg_1.1319 = f32[] parameter(1)
  ROOT %add.1441 = f32[] add(%Arg_0.1384, %Arg_1.1319)
}

%add.102.clone (x.205: bf16[], y.205: bf16[]) -> bf16[] {
  %x.205 = bf16[] parameter(0)
  %y.205 = bf16[] parameter(1)
  ROOT %add.1444 = bf16[] add(%x.205, %y.205)
}

%region_719.26951 (Arg_0.26948: f32[], Arg_1.26949: f32[]) -> f32[] {
  %Arg_0.26948 = f32[] parameter(0)
  %Arg_1.26949 = f32[] parameter(1)
  ROOT %add.26950 = f32[] add(%Arg_0.26948, %Arg_1.26949)
}

%region_719.26951.clone (Arg_0.1385: f32[], Arg_1.1320: f32[]) -> f32[] {
  %Arg_0.1385 = f32[] parameter(0)
  %Arg_1.1320 = f32[] parameter(1)
  ROOT %add.1445 = f32[] add(%Arg_0.1385, %Arg_1.1320)
}

%add.103.clone (x.207: bf16[], y.207: bf16[]) -> bf16[] {
  %x.207 = bf16[] parameter(0)
  %y.207 = bf16[] parameter(1)
  ROOT %add.1447 = bf16[] add(%x.207, %y.207)
}

%region_720.26958 (Arg_0.26955: f32[], Arg_1.26956: f32[]) -> f32[] {
  %Arg_0.26955 = f32[] parameter(0)
  %Arg_1.26956 = f32[] parameter(1)
  ROOT %add.26957 = f32[] add(%Arg_0.26955, %Arg_1.26956)
}

%region_720.26958.clone (Arg_0.1386: f32[], Arg_1.1321: f32[]) -> f32[] {
  %Arg_0.1386 = f32[] parameter(0)
  %Arg_1.1321 = f32[] parameter(1)
  ROOT %add.1448 = f32[] add(%Arg_0.1386, %Arg_1.1321)
}

%add.104.clone (x.209: bf16[], y.209: bf16[]) -> bf16[] {
  %x.209 = bf16[] parameter(0)
  %y.209 = bf16[] parameter(1)
  ROOT %add.1450 = bf16[] add(%x.209, %y.209)
}

%region_721.26965 (Arg_0.26962: f32[], Arg_1.26963: f32[]) -> f32[] {
  %Arg_0.26962 = f32[] parameter(0)
  %Arg_1.26963 = f32[] parameter(1)
  ROOT %add.26964 = f32[] add(%Arg_0.26962, %Arg_1.26963)
}

%region_721.26965.clone (Arg_0.1387: f32[], Arg_1.1322: f32[]) -> f32[] {
  %Arg_0.1387 = f32[] parameter(0)
  %Arg_1.1322 = f32[] parameter(1)
  ROOT %add.1451 = f32[] add(%Arg_0.1387, %Arg_1.1322)
}

%add.105.clone (x.211: bf16[], y.211: bf16[]) -> bf16[] {
  %x.211 = bf16[] parameter(0)
  %y.211 = bf16[] parameter(1)
  ROOT %add.1453 = bf16[] add(%x.211, %y.211)
}

%region_722.26972 (Arg_0.26969: f32[], Arg_1.26970: f32[]) -> f32[] {
  %Arg_0.26969 = f32[] parameter(0)
  %Arg_1.26970 = f32[] parameter(1)
  ROOT %add.26971 = f32[] add(%Arg_0.26969, %Arg_1.26970)
}

%region_722.26972.clone (Arg_0.1388: f32[], Arg_1.1323: f32[]) -> f32[] {
  %Arg_0.1388 = f32[] parameter(0)
  %Arg_1.1323 = f32[] parameter(1)
  ROOT %add.1454 = f32[] add(%Arg_0.1388, %Arg_1.1323)
}

%add.106.clone (x.213: bf16[], y.213: bf16[]) -> bf16[] {
  %x.213 = bf16[] parameter(0)
  %y.213 = bf16[] parameter(1)
  ROOT %add.1456 = bf16[] add(%x.213, %y.213)
}

%region_723.26979 (Arg_0.26976: f32[], Arg_1.26977: f32[]) -> f32[] {
  %Arg_0.26976 = f32[] parameter(0)
  %Arg_1.26977 = f32[] parameter(1)
  ROOT %add.26978 = f32[] add(%Arg_0.26976, %Arg_1.26977)
}

%region_723.26979.clone (Arg_0.1389: f32[], Arg_1.1324: f32[]) -> f32[] {
  %Arg_0.1389 = f32[] parameter(0)
  %Arg_1.1324 = f32[] parameter(1)
  ROOT %add.1457 = f32[] add(%Arg_0.1389, %Arg_1.1324)
}

%add.107.clone (x.215: bf16[], y.215: bf16[]) -> bf16[] {
  %x.215 = bf16[] parameter(0)
  %y.215 = bf16[] parameter(1)
  ROOT %add.1459 = bf16[] add(%x.215, %y.215)
}

%region_724.26986 (Arg_0.26983: f32[], Arg_1.26984: f32[]) -> f32[] {
  %Arg_0.26983 = f32[] parameter(0)
  %Arg_1.26984 = f32[] parameter(1)
  ROOT %add.26985 = f32[] add(%Arg_0.26983, %Arg_1.26984)
}

%region_724.26986.clone (Arg_0.1390: f32[], Arg_1.1325: f32[]) -> f32[] {
  %Arg_0.1390 = f32[] parameter(0)
  %Arg_1.1325 = f32[] parameter(1)
  ROOT %add.1460 = f32[] add(%Arg_0.1390, %Arg_1.1325)
}

%region_292.15017 (Arg_0.15014: bf16[], Arg_1.15015: bf16[]) -> bf16[] {
  %Arg_0.15014 = bf16[] parameter(0)
  %Arg_1.15015 = bf16[] parameter(1)
  ROOT %add.15016 = bf16[] add(%Arg_0.15014, %Arg_1.15015)
}

%region_292.15017.clone (Arg_0.1391: bf16[], Arg_1.1326: bf16[]) -> bf16[] {
  %Arg_0.1391 = bf16[] parameter(0)
  %Arg_1.1326 = bf16[] parameter(1)
  ROOT %add.1461 = bf16[] add(%Arg_0.1391, %Arg_1.1326)
}

%region_725.26993 (Arg_0.26990: f32[], Arg_1.26991: f32[]) -> f32[] {
  %Arg_0.26990 = f32[] parameter(0)
  %Arg_1.26991 = f32[] parameter(1)
  ROOT %add.26992 = f32[] add(%Arg_0.26990, %Arg_1.26991)
}

%region_296.15151 (Arg_0.15148: bf16[], Arg_1.15149: bf16[]) -> bf16[] {
  %Arg_0.15148 = bf16[] parameter(0)
  %Arg_1.15149 = bf16[] parameter(1)
  ROOT %add.15150 = bf16[] add(%Arg_0.15148, %Arg_1.15149)
}

%region_296.15151.clone (Arg_0.1392: bf16[], Arg_1.1327: bf16[]) -> bf16[] {
  %Arg_0.1392 = bf16[] parameter(0)
  %Arg_1.1327 = bf16[] parameter(1)
  ROOT %add.1462 = bf16[] add(%Arg_0.1392, %Arg_1.1327)
}

%region_726.27000 (Arg_0.26997: f32[], Arg_1.26998: f32[]) -> f32[] {
  %Arg_0.26997 = f32[] parameter(0)
  %Arg_1.26998 = f32[] parameter(1)
  ROOT %add.26999 = f32[] add(%Arg_0.26997, %Arg_1.26998)
}

%add.108.clone (x.217: bf16[], y.217: bf16[]) -> bf16[] {
  %x.217 = bf16[] parameter(0)
  %y.217 = bf16[] parameter(1)
  ROOT %add.1464 = bf16[] add(%x.217, %y.217)
}

%region_727.27007 (Arg_0.27004: f32[], Arg_1.27005: f32[]) -> f32[] {
  %Arg_0.27004 = f32[] parameter(0)
  %Arg_1.27005 = f32[] parameter(1)
  ROOT %add.27006 = f32[] add(%Arg_0.27004, %Arg_1.27005)
}

%region_727.27007.clone (Arg_0.1393: f32[], Arg_1.1328: f32[]) -> f32[] {
  %Arg_0.1393 = f32[] parameter(0)
  %Arg_1.1328 = f32[] parameter(1)
  ROOT %add.1465 = f32[] add(%Arg_0.1393, %Arg_1.1328)
}

%add.109.clone (x.219: bf16[], y.219: bf16[]) -> bf16[] {
  %x.219 = bf16[] parameter(0)
  %y.219 = bf16[] parameter(1)
  ROOT %add.1467 = bf16[] add(%x.219, %y.219)
}

%region_728.27014 (Arg_0.27011: f32[], Arg_1.27012: f32[]) -> f32[] {
  %Arg_0.27011 = f32[] parameter(0)
  %Arg_1.27012 = f32[] parameter(1)
  ROOT %add.27013 = f32[] add(%Arg_0.27011, %Arg_1.27012)
}

%region_728.27014.clone (Arg_0.1394: f32[], Arg_1.1330: f32[]) -> f32[] {
  %Arg_0.1394 = f32[] parameter(0)
  %Arg_1.1330 = f32[] parameter(1)
  ROOT %add.1468 = f32[] add(%Arg_0.1394, %Arg_1.1330)
}

%add.110.clone (x.221: bf16[], y.221: bf16[]) -> bf16[] {
  %x.221 = bf16[] parameter(0)
  %y.221 = bf16[] parameter(1)
  ROOT %add.1470 = bf16[] add(%x.221, %y.221)
}

%region_729.27021 (Arg_0.27018: f32[], Arg_1.27019: f32[]) -> f32[] {
  %Arg_0.27018 = f32[] parameter(0)
  %Arg_1.27019 = f32[] parameter(1)
  ROOT %add.27020 = f32[] add(%Arg_0.27018, %Arg_1.27019)
}

%region_729.27021.clone (Arg_0.1395: f32[], Arg_1.1331: f32[]) -> f32[] {
  %Arg_0.1395 = f32[] parameter(0)
  %Arg_1.1331 = f32[] parameter(1)
  ROOT %add.1471 = f32[] add(%Arg_0.1395, %Arg_1.1331)
}

%add.111.clone (x.223: bf16[], y.223: bf16[]) -> bf16[] {
  %x.223 = bf16[] parameter(0)
  %y.223 = bf16[] parameter(1)
  ROOT %add.1473 = bf16[] add(%x.223, %y.223)
}

%region_730.27028 (Arg_0.27025: f32[], Arg_1.27026: f32[]) -> f32[] {
  %Arg_0.27025 = f32[] parameter(0)
  %Arg_1.27026 = f32[] parameter(1)
  ROOT %add.27027 = f32[] add(%Arg_0.27025, %Arg_1.27026)
}

%region_730.27028.clone (Arg_0.1396: f32[], Arg_1.1332: f32[]) -> f32[] {
  %Arg_0.1396 = f32[] parameter(0)
  %Arg_1.1332 = f32[] parameter(1)
  ROOT %add.1474 = f32[] add(%Arg_0.1396, %Arg_1.1332)
}

%add.112.clone (x.225: bf16[], y.225: bf16[]) -> bf16[] {
  %x.225 = bf16[] parameter(0)
  %y.225 = bf16[] parameter(1)
  ROOT %add.1476 = bf16[] add(%x.225, %y.225)
}

%region_731.27035 (Arg_0.27032: f32[], Arg_1.27033: f32[]) -> f32[] {
  %Arg_0.27032 = f32[] parameter(0)
  %Arg_1.27033 = f32[] parameter(1)
  ROOT %add.27034 = f32[] add(%Arg_0.27032, %Arg_1.27033)
}

%region_731.27035.clone (Arg_0.1397: f32[], Arg_1.1333: f32[]) -> f32[] {
  %Arg_0.1397 = f32[] parameter(0)
  %Arg_1.1333 = f32[] parameter(1)
  ROOT %add.1477 = f32[] add(%Arg_0.1397, %Arg_1.1333)
}

%add.113.clone (x.227: bf16[], y.227: bf16[]) -> bf16[] {
  %x.227 = bf16[] parameter(0)
  %y.227 = bf16[] parameter(1)
  ROOT %add.1479 = bf16[] add(%x.227, %y.227)
}

%region_732.27042 (Arg_0.27039: f32[], Arg_1.27040: f32[]) -> f32[] {
  %Arg_0.27039 = f32[] parameter(0)
  %Arg_1.27040 = f32[] parameter(1)
  ROOT %add.27041 = f32[] add(%Arg_0.27039, %Arg_1.27040)
}

%region_732.27042.clone (Arg_0.1398: f32[], Arg_1.1334: f32[]) -> f32[] {
  %Arg_0.1398 = f32[] parameter(0)
  %Arg_1.1334 = f32[] parameter(1)
  ROOT %add.1480 = f32[] add(%Arg_0.1398, %Arg_1.1334)
}

%add.114.clone (x.229: bf16[], y.229: bf16[]) -> bf16[] {
  %x.229 = bf16[] parameter(0)
  %y.229 = bf16[] parameter(1)
  ROOT %add.1483 = bf16[] add(%x.229, %y.229)
}

%region_733.27049 (Arg_0.27046: f32[], Arg_1.27047: f32[]) -> f32[] {
  %Arg_0.27046 = f32[] parameter(0)
  %Arg_1.27047 = f32[] parameter(1)
  ROOT %add.27048 = f32[] add(%Arg_0.27046, %Arg_1.27047)
}

%region_733.27049.clone (Arg_0.1399: f32[], Arg_1.1335: f32[]) -> f32[] {
  %Arg_0.1399 = f32[] parameter(0)
  %Arg_1.1335 = f32[] parameter(1)
  ROOT %add.1484 = f32[] add(%Arg_0.1399, %Arg_1.1335)
}

%region_279.14525 (Arg_0.14522: bf16[], Arg_1.14523: bf16[]) -> bf16[] {
  %Arg_0.14522 = bf16[] parameter(0)
  %Arg_1.14523 = bf16[] parameter(1)
  ROOT %add.14524 = bf16[] add(%Arg_0.14522, %Arg_1.14523)
}

%region_279.14525.clone (Arg_0.1400: bf16[], Arg_1.1336: bf16[]) -> bf16[] {
  %Arg_0.1400 = bf16[] parameter(0)
  %Arg_1.1336 = bf16[] parameter(1)
  ROOT %add.1485 = bf16[] add(%Arg_0.1400, %Arg_1.1336)
}

%region_734.27056 (Arg_0.27053: f32[], Arg_1.27054: f32[]) -> f32[] {
  %Arg_0.27053 = f32[] parameter(0)
  %Arg_1.27054 = f32[] parameter(1)
  ROOT %add.27055 = f32[] add(%Arg_0.27053, %Arg_1.27054)
}

%region_283.14659 (Arg_0.14656: bf16[], Arg_1.14657: bf16[]) -> bf16[] {
  %Arg_0.14656 = bf16[] parameter(0)
  %Arg_1.14657 = bf16[] parameter(1)
  ROOT %add.14658 = bf16[] add(%Arg_0.14656, %Arg_1.14657)
}

%region_283.14659.clone (Arg_0.1401: bf16[], Arg_1.1337: bf16[]) -> bf16[] {
  %Arg_0.1401 = bf16[] parameter(0)
  %Arg_1.1337 = bf16[] parameter(1)
  ROOT %add.1486 = bf16[] add(%Arg_0.1401, %Arg_1.1337)
}

%region_735.27063 (Arg_0.27060: f32[], Arg_1.27061: f32[]) -> f32[] {
  %Arg_0.27060 = f32[] parameter(0)
  %Arg_1.27061 = f32[] parameter(1)
  ROOT %add.27062 = f32[] add(%Arg_0.27060, %Arg_1.27061)
}

%add.115.clone (x.231: bf16[], y.231: bf16[]) -> bf16[] {
  %x.231 = bf16[] parameter(0)
  %y.231 = bf16[] parameter(1)
  ROOT %add.1488 = bf16[] add(%x.231, %y.231)
}

%region_736.27070 (Arg_0.27067: f32[], Arg_1.27068: f32[]) -> f32[] {
  %Arg_0.27067 = f32[] parameter(0)
  %Arg_1.27068 = f32[] parameter(1)
  ROOT %add.27069 = f32[] add(%Arg_0.27067, %Arg_1.27068)
}

%region_736.27070.clone (Arg_0.1402: f32[], Arg_1.1338: f32[]) -> f32[] {
  %Arg_0.1402 = f32[] parameter(0)
  %Arg_1.1338 = f32[] parameter(1)
  ROOT %add.1489 = f32[] add(%Arg_0.1402, %Arg_1.1338)
}

%add.116.clone (x.233: bf16[], y.233: bf16[]) -> bf16[] {
  %x.233 = bf16[] parameter(0)
  %y.233 = bf16[] parameter(1)
  ROOT %add.1491 = bf16[] add(%x.233, %y.233)
}

%region_737.27077 (Arg_0.27074: f32[], Arg_1.27075: f32[]) -> f32[] {
  %Arg_0.27074 = f32[] parameter(0)
  %Arg_1.27075 = f32[] parameter(1)
  ROOT %add.27076 = f32[] add(%Arg_0.27074, %Arg_1.27075)
}

%region_737.27077.clone (Arg_0.1403: f32[], Arg_1.1339: f32[]) -> f32[] {
  %Arg_0.1403 = f32[] parameter(0)
  %Arg_1.1339 = f32[] parameter(1)
  ROOT %add.1492 = f32[] add(%Arg_0.1403, %Arg_1.1339)
}

%add.117.clone (x.235: bf16[], y.235: bf16[]) -> bf16[] {
  %x.235 = bf16[] parameter(0)
  %y.235 = bf16[] parameter(1)
  ROOT %add.1494 = bf16[] add(%x.235, %y.235)
}

%region_738.27084 (Arg_0.27081: f32[], Arg_1.27082: f32[]) -> f32[] {
  %Arg_0.27081 = f32[] parameter(0)
  %Arg_1.27082 = f32[] parameter(1)
  ROOT %add.27083 = f32[] add(%Arg_0.27081, %Arg_1.27082)
}

%region_738.27084.clone (Arg_0.1404: f32[], Arg_1.1340: f32[]) -> f32[] {
  %Arg_0.1404 = f32[] parameter(0)
  %Arg_1.1340 = f32[] parameter(1)
  ROOT %add.1495 = f32[] add(%Arg_0.1404, %Arg_1.1340)
}

%add.118.clone (x.237: bf16[], y.237: bf16[]) -> bf16[] {
  %x.237 = bf16[] parameter(0)
  %y.237 = bf16[] parameter(1)
  ROOT %add.1497 = bf16[] add(%x.237, %y.237)
}

%region_739.27091 (Arg_0.27088: f32[], Arg_1.27089: f32[]) -> f32[] {
  %Arg_0.27088 = f32[] parameter(0)
  %Arg_1.27089 = f32[] parameter(1)
  ROOT %add.27090 = f32[] add(%Arg_0.27088, %Arg_1.27089)
}

%region_739.27091.clone (Arg_0.1405: f32[], Arg_1.1341: f32[]) -> f32[] {
  %Arg_0.1405 = f32[] parameter(0)
  %Arg_1.1341 = f32[] parameter(1)
  ROOT %add.1498 = f32[] add(%Arg_0.1405, %Arg_1.1341)
}

%add.119.clone (x.239: bf16[], y.239: bf16[]) -> bf16[] {
  %x.239 = bf16[] parameter(0)
  %y.239 = bf16[] parameter(1)
  ROOT %add.1500 = bf16[] add(%x.239, %y.239)
}

%region_740.27098 (Arg_0.27095: f32[], Arg_1.27096: f32[]) -> f32[] {
  %Arg_0.27095 = f32[] parameter(0)
  %Arg_1.27096 = f32[] parameter(1)
  ROOT %add.27097 = f32[] add(%Arg_0.27095, %Arg_1.27096)
}

%region_740.27098.clone (Arg_0.1406: f32[], Arg_1.1342: f32[]) -> f32[] {
  %Arg_0.1406 = f32[] parameter(0)
  %Arg_1.1342 = f32[] parameter(1)
  ROOT %add.1501 = f32[] add(%Arg_0.1406, %Arg_1.1342)
}

%add.120.clone (x.241: bf16[], y.241: bf16[]) -> bf16[] {
  %x.241 = bf16[] parameter(0)
  %y.241 = bf16[] parameter(1)
  ROOT %add.1503 = bf16[] add(%x.241, %y.241)
}

%region_741.27105 (Arg_0.27102: f32[], Arg_1.27103: f32[]) -> f32[] {
  %Arg_0.27102 = f32[] parameter(0)
  %Arg_1.27103 = f32[] parameter(1)
  ROOT %add.27104 = f32[] add(%Arg_0.27102, %Arg_1.27103)
}

%region_741.27105.clone (Arg_0.1407: f32[], Arg_1.1343: f32[]) -> f32[] {
  %Arg_0.1407 = f32[] parameter(0)
  %Arg_1.1343 = f32[] parameter(1)
  ROOT %add.1504 = f32[] add(%Arg_0.1407, %Arg_1.1343)
}

%add.121.clone (x.243: bf16[], y.243: bf16[]) -> bf16[] {
  %x.243 = bf16[] parameter(0)
  %y.243 = bf16[] parameter(1)
  ROOT %add.1506 = bf16[] add(%x.243, %y.243)
}

%region_742.27112 (Arg_0.27109: f32[], Arg_1.27110: f32[]) -> f32[] {
  %Arg_0.27109 = f32[] parameter(0)
  %Arg_1.27110 = f32[] parameter(1)
  ROOT %add.27111 = f32[] add(%Arg_0.27109, %Arg_1.27110)
}

%region_742.27112.clone (Arg_0.1408: f32[], Arg_1.1344: f32[]) -> f32[] {
  %Arg_0.1408 = f32[] parameter(0)
  %Arg_1.1344 = f32[] parameter(1)
  ROOT %add.1507 = f32[] add(%Arg_0.1408, %Arg_1.1344)
}

%region_266.14033 (Arg_0.14030: bf16[], Arg_1.14031: bf16[]) -> bf16[] {
  %Arg_0.14030 = bf16[] parameter(0)
  %Arg_1.14031 = bf16[] parameter(1)
  ROOT %add.14032 = bf16[] add(%Arg_0.14030, %Arg_1.14031)
}

%region_266.14033.clone (Arg_0.1409: bf16[], Arg_1.1345: bf16[]) -> bf16[] {
  %Arg_0.1409 = bf16[] parameter(0)
  %Arg_1.1345 = bf16[] parameter(1)
  ROOT %add.1508 = bf16[] add(%Arg_0.1409, %Arg_1.1345)
}

%region_743.27119 (Arg_0.27116: f32[], Arg_1.27117: f32[]) -> f32[] {
  %Arg_0.27116 = f32[] parameter(0)
  %Arg_1.27117 = f32[] parameter(1)
  ROOT %add.27118 = f32[] add(%Arg_0.27116, %Arg_1.27117)
}

%region_270.14167 (Arg_0.14164: bf16[], Arg_1.14165: bf16[]) -> bf16[] {
  %Arg_0.14164 = bf16[] parameter(0)
  %Arg_1.14165 = bf16[] parameter(1)
  ROOT %add.14166 = bf16[] add(%Arg_0.14164, %Arg_1.14165)
}

%region_270.14167.clone (Arg_0.1410: bf16[], Arg_1.1346: bf16[]) -> bf16[] {
  %Arg_0.1410 = bf16[] parameter(0)
  %Arg_1.1346 = bf16[] parameter(1)
  ROOT %add.1509 = bf16[] add(%Arg_0.1410, %Arg_1.1346)
}

%region_744.27126 (Arg_0.27123: f32[], Arg_1.27124: f32[]) -> f32[] {
  %Arg_0.27123 = f32[] parameter(0)
  %Arg_1.27124 = f32[] parameter(1)
  ROOT %add.27125 = f32[] add(%Arg_0.27123, %Arg_1.27124)
}

%add.122.clone (x.245: bf16[], y.245: bf16[]) -> bf16[] {
  %x.245 = bf16[] parameter(0)
  %y.245 = bf16[] parameter(1)
  ROOT %add.1511 = bf16[] add(%x.245, %y.245)
}

%region_745.27133 (Arg_0.27130: f32[], Arg_1.27131: f32[]) -> f32[] {
  %Arg_0.27130 = f32[] parameter(0)
  %Arg_1.27131 = f32[] parameter(1)
  ROOT %add.27132 = f32[] add(%Arg_0.27130, %Arg_1.27131)
}

%region_745.27133.clone (Arg_0.1411: f32[], Arg_1.1347: f32[]) -> f32[] {
  %Arg_0.1411 = f32[] parameter(0)
  %Arg_1.1347 = f32[] parameter(1)
  ROOT %add.1512 = f32[] add(%Arg_0.1411, %Arg_1.1347)
}

%add.123.clone (x.247: bf16[], y.247: bf16[]) -> bf16[] {
  %x.247 = bf16[] parameter(0)
  %y.247 = bf16[] parameter(1)
  ROOT %add.1514 = bf16[] add(%x.247, %y.247)
}

%region_746.27140 (Arg_0.27137: f32[], Arg_1.27138: f32[]) -> f32[] {
  %Arg_0.27137 = f32[] parameter(0)
  %Arg_1.27138 = f32[] parameter(1)
  ROOT %add.27139 = f32[] add(%Arg_0.27137, %Arg_1.27138)
}

%region_746.27140.clone (Arg_0.1412: f32[], Arg_1.1348: f32[]) -> f32[] {
  %Arg_0.1412 = f32[] parameter(0)
  %Arg_1.1348 = f32[] parameter(1)
  ROOT %add.1515 = f32[] add(%Arg_0.1412, %Arg_1.1348)
}

%add.124.clone (x.249: bf16[], y.249: bf16[]) -> bf16[] {
  %x.249 = bf16[] parameter(0)
  %y.249 = bf16[] parameter(1)
  ROOT %add.1517 = bf16[] add(%x.249, %y.249)
}

%region_747.27147 (Arg_0.27144: f32[], Arg_1.27145: f32[]) -> f32[] {
  %Arg_0.27144 = f32[] parameter(0)
  %Arg_1.27145 = f32[] parameter(1)
  ROOT %add.27146 = f32[] add(%Arg_0.27144, %Arg_1.27145)
}

%region_747.27147.clone (Arg_0.1413: f32[], Arg_1.1349: f32[]) -> f32[] {
  %Arg_0.1413 = f32[] parameter(0)
  %Arg_1.1349 = f32[] parameter(1)
  ROOT %add.1518 = f32[] add(%Arg_0.1413, %Arg_1.1349)
}

%add.125.clone (x.251: bf16[], y.251: bf16[]) -> bf16[] {
  %x.251 = bf16[] parameter(0)
  %y.251 = bf16[] parameter(1)
  ROOT %add.1521 = bf16[] add(%x.251, %y.251)
}

%region_748.27154 (Arg_0.27151: f32[], Arg_1.27152: f32[]) -> f32[] {
  %Arg_0.27151 = f32[] parameter(0)
  %Arg_1.27152 = f32[] parameter(1)
  ROOT %add.27153 = f32[] add(%Arg_0.27151, %Arg_1.27152)
}

%region_748.27154.clone (Arg_0.1414: f32[], Arg_1.1350: f32[]) -> f32[] {
  %Arg_0.1414 = f32[] parameter(0)
  %Arg_1.1350 = f32[] parameter(1)
  ROOT %add.1522 = f32[] add(%Arg_0.1414, %Arg_1.1350)
}

%add.126.clone (x.253: bf16[], y.253: bf16[]) -> bf16[] {
  %x.253 = bf16[] parameter(0)
  %y.253 = bf16[] parameter(1)
  ROOT %add.1524 = bf16[] add(%x.253, %y.253)
}

%region_749.27161 (Arg_0.27158: f32[], Arg_1.27159: f32[]) -> f32[] {
  %Arg_0.27158 = f32[] parameter(0)
  %Arg_1.27159 = f32[] parameter(1)
  ROOT %add.27160 = f32[] add(%Arg_0.27158, %Arg_1.27159)
}

%region_749.27161.clone (Arg_0.1415: f32[], Arg_1.1351: f32[]) -> f32[] {
  %Arg_0.1415 = f32[] parameter(0)
  %Arg_1.1351 = f32[] parameter(1)
  ROOT %add.1525 = f32[] add(%Arg_0.1415, %Arg_1.1351)
}

%add.127.clone (x.255: bf16[], y.255: bf16[]) -> bf16[] {
  %x.255 = bf16[] parameter(0)
  %y.255 = bf16[] parameter(1)
  ROOT %add.1527 = bf16[] add(%x.255, %y.255)
}

%region_750.27168 (Arg_0.27165: f32[], Arg_1.27166: f32[]) -> f32[] {
  %Arg_0.27165 = f32[] parameter(0)
  %Arg_1.27166 = f32[] parameter(1)
  ROOT %add.27167 = f32[] add(%Arg_0.27165, %Arg_1.27166)
}

%region_750.27168.clone (Arg_0.1416: f32[], Arg_1.1352: f32[]) -> f32[] {
  %Arg_0.1416 = f32[] parameter(0)
  %Arg_1.1352 = f32[] parameter(1)
  ROOT %add.1528 = f32[] add(%Arg_0.1416, %Arg_1.1352)
}

%add.128.clone (x.257: bf16[], y.257: bf16[]) -> bf16[] {
  %x.257 = bf16[] parameter(0)
  %y.257 = bf16[] parameter(1)
  ROOT %add.1530 = bf16[] add(%x.257, %y.257)
}

%region_751.27175 (Arg_0.27172: f32[], Arg_1.27173: f32[]) -> f32[] {
  %Arg_0.27172 = f32[] parameter(0)
  %Arg_1.27173 = f32[] parameter(1)
  ROOT %add.27174 = f32[] add(%Arg_0.27172, %Arg_1.27173)
}

%region_751.27175.clone (Arg_0.1417: f32[], Arg_1.1353: f32[]) -> f32[] {
  %Arg_0.1417 = f32[] parameter(0)
  %Arg_1.1353 = f32[] parameter(1)
  ROOT %add.1531 = f32[] add(%Arg_0.1417, %Arg_1.1353)
}

%region_253.13541 (Arg_0.13538: bf16[], Arg_1.13539: bf16[]) -> bf16[] {
  %Arg_0.13538 = bf16[] parameter(0)
  %Arg_1.13539 = bf16[] parameter(1)
  ROOT %add.13540 = bf16[] add(%Arg_0.13538, %Arg_1.13539)
}

%region_253.13541.clone (Arg_0.1418: bf16[], Arg_1.1354: bf16[]) -> bf16[] {
  %Arg_0.1418 = bf16[] parameter(0)
  %Arg_1.1354 = bf16[] parameter(1)
  ROOT %add.1532 = bf16[] add(%Arg_0.1418, %Arg_1.1354)
}

%region_752.27182 (Arg_0.27179: f32[], Arg_1.27180: f32[]) -> f32[] {
  %Arg_0.27179 = f32[] parameter(0)
  %Arg_1.27180 = f32[] parameter(1)
  ROOT %add.27181 = f32[] add(%Arg_0.27179, %Arg_1.27180)
}

%region_257.13675 (Arg_0.13672: bf16[], Arg_1.13673: bf16[]) -> bf16[] {
  %Arg_0.13672 = bf16[] parameter(0)
  %Arg_1.13673 = bf16[] parameter(1)
  ROOT %add.13674 = bf16[] add(%Arg_0.13672, %Arg_1.13673)
}

%region_257.13675.clone (Arg_0.1419: bf16[], Arg_1.1355: bf16[]) -> bf16[] {
  %Arg_0.1419 = bf16[] parameter(0)
  %Arg_1.1355 = bf16[] parameter(1)
  ROOT %add.1533 = bf16[] add(%Arg_0.1419, %Arg_1.1355)
}

%region_753.27189 (Arg_0.27186: f32[], Arg_1.27187: f32[]) -> f32[] {
  %Arg_0.27186 = f32[] parameter(0)
  %Arg_1.27187 = f32[] parameter(1)
  ROOT %add.27188 = f32[] add(%Arg_0.27186, %Arg_1.27187)
}

%add.129.clone (x.259: bf16[], y.259: bf16[]) -> bf16[] {
  %x.259 = bf16[] parameter(0)
  %y.259 = bf16[] parameter(1)
  ROOT %add.1535 = bf16[] add(%x.259, %y.259)
}

%region_754.27196 (Arg_0.27193: f32[], Arg_1.27194: f32[]) -> f32[] {
  %Arg_0.27193 = f32[] parameter(0)
  %Arg_1.27194 = f32[] parameter(1)
  ROOT %add.27195 = f32[] add(%Arg_0.27193, %Arg_1.27194)
}

%region_754.27196.clone (Arg_0.1420: f32[], Arg_1.1356: f32[]) -> f32[] {
  %Arg_0.1420 = f32[] parameter(0)
  %Arg_1.1356 = f32[] parameter(1)
  ROOT %add.1536 = f32[] add(%Arg_0.1420, %Arg_1.1356)
}

%add.130.clone (x.261: bf16[], y.261: bf16[]) -> bf16[] {
  %x.261 = bf16[] parameter(0)
  %y.261 = bf16[] parameter(1)
  ROOT %add.1538 = bf16[] add(%x.261, %y.261)
}

%region_755.27203 (Arg_0.27200: f32[], Arg_1.27201: f32[]) -> f32[] {
  %Arg_0.27200 = f32[] parameter(0)
  %Arg_1.27201 = f32[] parameter(1)
  ROOT %add.27202 = f32[] add(%Arg_0.27200, %Arg_1.27201)
}

%region_755.27203.clone (Arg_0.1421: f32[], Arg_1.1357: f32[]) -> f32[] {
  %Arg_0.1421 = f32[] parameter(0)
  %Arg_1.1357 = f32[] parameter(1)
  ROOT %add.1539 = f32[] add(%Arg_0.1421, %Arg_1.1357)
}

%add.131.clone (x.263: bf16[], y.263: bf16[]) -> bf16[] {
  %x.263 = bf16[] parameter(0)
  %y.263 = bf16[] parameter(1)
  ROOT %add.1541 = bf16[] add(%x.263, %y.263)
}

%region_756.27210 (Arg_0.27207: f32[], Arg_1.27208: f32[]) -> f32[] {
  %Arg_0.27207 = f32[] parameter(0)
  %Arg_1.27208 = f32[] parameter(1)
  ROOT %add.27209 = f32[] add(%Arg_0.27207, %Arg_1.27208)
}

%region_756.27210.clone (Arg_0.1422: f32[], Arg_1.1358: f32[]) -> f32[] {
  %Arg_0.1422 = f32[] parameter(0)
  %Arg_1.1358 = f32[] parameter(1)
  ROOT %add.1542 = f32[] add(%Arg_0.1422, %Arg_1.1358)
}

%add.132.clone (x.265: bf16[], y.265: bf16[]) -> bf16[] {
  %x.265 = bf16[] parameter(0)
  %y.265 = bf16[] parameter(1)
  ROOT %add.1544 = bf16[] add(%x.265, %y.265)
}

%region_757.27217 (Arg_0.27214: f32[], Arg_1.27215: f32[]) -> f32[] {
  %Arg_0.27214 = f32[] parameter(0)
  %Arg_1.27215 = f32[] parameter(1)
  ROOT %add.27216 = f32[] add(%Arg_0.27214, %Arg_1.27215)
}

%region_757.27217.clone (Arg_0.1423: f32[], Arg_1.1359: f32[]) -> f32[] {
  %Arg_0.1423 = f32[] parameter(0)
  %Arg_1.1359 = f32[] parameter(1)
  ROOT %add.1545 = f32[] add(%Arg_0.1423, %Arg_1.1359)
}

%add.133.clone (x.267: bf16[], y.267: bf16[]) -> bf16[] {
  %x.267 = bf16[] parameter(0)
  %y.267 = bf16[] parameter(1)
  ROOT %add.1547 = bf16[] add(%x.267, %y.267)
}

%region_758.27224 (Arg_0.27221: f32[], Arg_1.27222: f32[]) -> f32[] {
  %Arg_0.27221 = f32[] parameter(0)
  %Arg_1.27222 = f32[] parameter(1)
  ROOT %add.27223 = f32[] add(%Arg_0.27221, %Arg_1.27222)
}

%region_758.27224.clone (Arg_0.1424: f32[], Arg_1.1360: f32[]) -> f32[] {
  %Arg_0.1424 = f32[] parameter(0)
  %Arg_1.1360 = f32[] parameter(1)
  ROOT %add.1548 = f32[] add(%Arg_0.1424, %Arg_1.1360)
}

%add.134.clone (x.269: bf16[], y.269: bf16[]) -> bf16[] {
  %x.269 = bf16[] parameter(0)
  %y.269 = bf16[] parameter(1)
  ROOT %add.1550 = bf16[] add(%x.269, %y.269)
}

%region_759.27231 (Arg_0.27228: f32[], Arg_1.27229: f32[]) -> f32[] {
  %Arg_0.27228 = f32[] parameter(0)
  %Arg_1.27229 = f32[] parameter(1)
  ROOT %add.27230 = f32[] add(%Arg_0.27228, %Arg_1.27229)
}

%region_759.27231.clone (Arg_0.1425: f32[], Arg_1.1361: f32[]) -> f32[] {
  %Arg_0.1425 = f32[] parameter(0)
  %Arg_1.1361 = f32[] parameter(1)
  ROOT %add.1551 = f32[] add(%Arg_0.1425, %Arg_1.1361)
}

%add.135.clone (x.271: bf16[], y.271: bf16[]) -> bf16[] {
  %x.271 = bf16[] parameter(0)
  %y.271 = bf16[] parameter(1)
  ROOT %add.1553 = bf16[] add(%x.271, %y.271)
}

%region_760.27238 (Arg_0.27235: f32[], Arg_1.27236: f32[]) -> f32[] {
  %Arg_0.27235 = f32[] parameter(0)
  %Arg_1.27236 = f32[] parameter(1)
  ROOT %add.27237 = f32[] add(%Arg_0.27235, %Arg_1.27236)
}

%region_760.27238.clone (Arg_0.1426: f32[], Arg_1.1362: f32[]) -> f32[] {
  %Arg_0.1426 = f32[] parameter(0)
  %Arg_1.1362 = f32[] parameter(1)
  ROOT %add.1554 = f32[] add(%Arg_0.1426, %Arg_1.1362)
}

%region_240.13049 (Arg_0.13046: bf16[], Arg_1.13047: bf16[]) -> bf16[] {
  %Arg_0.13046 = bf16[] parameter(0)
  %Arg_1.13047 = bf16[] parameter(1)
  ROOT %add.13048 = bf16[] add(%Arg_0.13046, %Arg_1.13047)
}

%region_240.13049.clone (Arg_0.1427: bf16[], Arg_1.1363: bf16[]) -> bf16[] {
  %Arg_0.1427 = bf16[] parameter(0)
  %Arg_1.1363 = bf16[] parameter(1)
  ROOT %add.1555 = bf16[] add(%Arg_0.1427, %Arg_1.1363)
}

%region_761.27245 (Arg_0.27242: f32[], Arg_1.27243: f32[]) -> f32[] {
  %Arg_0.27242 = f32[] parameter(0)
  %Arg_1.27243 = f32[] parameter(1)
  ROOT %add.27244 = f32[] add(%Arg_0.27242, %Arg_1.27243)
}

%region_244.13183 (Arg_0.13180: bf16[], Arg_1.13181: bf16[]) -> bf16[] {
  %Arg_0.13180 = bf16[] parameter(0)
  %Arg_1.13181 = bf16[] parameter(1)
  ROOT %add.13182 = bf16[] add(%Arg_0.13180, %Arg_1.13181)
}

%region_244.13183.clone (Arg_0.1428: bf16[], Arg_1.1364: bf16[]) -> bf16[] {
  %Arg_0.1428 = bf16[] parameter(0)
  %Arg_1.1364 = bf16[] parameter(1)
  ROOT %add.1556 = bf16[] add(%Arg_0.1428, %Arg_1.1364)
}

%region_762.27252 (Arg_0.27249: f32[], Arg_1.27250: f32[]) -> f32[] {
  %Arg_0.27249 = f32[] parameter(0)
  %Arg_1.27250 = f32[] parameter(1)
  ROOT %add.27251 = f32[] add(%Arg_0.27249, %Arg_1.27250)
}

%add.136.clone (x.273: bf16[], y.273: bf16[]) -> bf16[] {
  %x.273 = bf16[] parameter(0)
  %y.273 = bf16[] parameter(1)
  ROOT %add.1559 = bf16[] add(%x.273, %y.273)
}

%region_763.27259 (Arg_0.27256: f32[], Arg_1.27257: f32[]) -> f32[] {
  %Arg_0.27256 = f32[] parameter(0)
  %Arg_1.27257 = f32[] parameter(1)
  ROOT %add.27258 = f32[] add(%Arg_0.27256, %Arg_1.27257)
}

%region_763.27259.clone (Arg_0.1429: f32[], Arg_1.1365: f32[]) -> f32[] {
  %Arg_0.1429 = f32[] parameter(0)
  %Arg_1.1365 = f32[] parameter(1)
  ROOT %add.1560 = f32[] add(%Arg_0.1429, %Arg_1.1365)
}

%add.137.clone (x.275: bf16[], y.275: bf16[]) -> bf16[] {
  %x.275 = bf16[] parameter(0)
  %y.275 = bf16[] parameter(1)
  ROOT %add.1562 = bf16[] add(%x.275, %y.275)
}

%region_764.27266 (Arg_0.27263: f32[], Arg_1.27264: f32[]) -> f32[] {
  %Arg_0.27263 = f32[] parameter(0)
  %Arg_1.27264 = f32[] parameter(1)
  ROOT %add.27265 = f32[] add(%Arg_0.27263, %Arg_1.27264)
}

%region_764.27266.clone (Arg_0.1430: f32[], Arg_1.1366: f32[]) -> f32[] {
  %Arg_0.1430 = f32[] parameter(0)
  %Arg_1.1366 = f32[] parameter(1)
  ROOT %add.1563 = f32[] add(%Arg_0.1430, %Arg_1.1366)
}

%add.138.clone (x.277: bf16[], y.277: bf16[]) -> bf16[] {
  %x.277 = bf16[] parameter(0)
  %y.277 = bf16[] parameter(1)
  ROOT %add.1565 = bf16[] add(%x.277, %y.277)
}

%region_765.27273 (Arg_0.27270: f32[], Arg_1.27271: f32[]) -> f32[] {
  %Arg_0.27270 = f32[] parameter(0)
  %Arg_1.27271 = f32[] parameter(1)
  ROOT %add.27272 = f32[] add(%Arg_0.27270, %Arg_1.27271)
}

%region_765.27273.clone (Arg_0.1431: f32[], Arg_1.1367: f32[]) -> f32[] {
  %Arg_0.1431 = f32[] parameter(0)
  %Arg_1.1367 = f32[] parameter(1)
  ROOT %add.1566 = f32[] add(%Arg_0.1431, %Arg_1.1367)
}

%add.139.clone (x.279: bf16[], y.279: bf16[]) -> bf16[] {
  %x.279 = bf16[] parameter(0)
  %y.279 = bf16[] parameter(1)
  ROOT %add.1568 = bf16[] add(%x.279, %y.279)
}

%region_766.27280 (Arg_0.27277: f32[], Arg_1.27278: f32[]) -> f32[] {
  %Arg_0.27277 = f32[] parameter(0)
  %Arg_1.27278 = f32[] parameter(1)
  ROOT %add.27279 = f32[] add(%Arg_0.27277, %Arg_1.27278)
}

%region_766.27280.clone (Arg_0.1432: f32[], Arg_1.1368: f32[]) -> f32[] {
  %Arg_0.1432 = f32[] parameter(0)
  %Arg_1.1368 = f32[] parameter(1)
  ROOT %add.1569 = f32[] add(%Arg_0.1432, %Arg_1.1368)
}

%add.140.clone (x.281: bf16[], y.281: bf16[]) -> bf16[] {
  %x.281 = bf16[] parameter(0)
  %y.281 = bf16[] parameter(1)
  ROOT %add.1571 = bf16[] add(%x.281, %y.281)
}

%region_767.27287 (Arg_0.27284: f32[], Arg_1.27285: f32[]) -> f32[] {
  %Arg_0.27284 = f32[] parameter(0)
  %Arg_1.27285 = f32[] parameter(1)
  ROOT %add.27286 = f32[] add(%Arg_0.27284, %Arg_1.27285)
}

%region_767.27287.clone (Arg_0.1433: f32[], Arg_1.1369: f32[]) -> f32[] {
  %Arg_0.1433 = f32[] parameter(0)
  %Arg_1.1369 = f32[] parameter(1)
  ROOT %add.1572 = f32[] add(%Arg_0.1433, %Arg_1.1369)
}

%add.141.clone (x.283: bf16[], y.283: bf16[]) -> bf16[] {
  %x.283 = bf16[] parameter(0)
  %y.283 = bf16[] parameter(1)
  ROOT %add.1574 = bf16[] add(%x.283, %y.283)
}

%region_768.27294 (Arg_0.27291: f32[], Arg_1.27292: f32[]) -> f32[] {
  %Arg_0.27291 = f32[] parameter(0)
  %Arg_1.27292 = f32[] parameter(1)
  ROOT %add.27293 = f32[] add(%Arg_0.27291, %Arg_1.27292)
}

%region_768.27294.clone (Arg_0.1434: f32[], Arg_1.1370: f32[]) -> f32[] {
  %Arg_0.1434 = f32[] parameter(0)
  %Arg_1.1370 = f32[] parameter(1)
  ROOT %add.1575 = f32[] add(%Arg_0.1434, %Arg_1.1370)
}

%add.142.clone (x.285: bf16[], y.285: bf16[]) -> bf16[] {
  %x.285 = bf16[] parameter(0)
  %y.285 = bf16[] parameter(1)
  ROOT %add.1577 = bf16[] add(%x.285, %y.285)
}

%region_769.27301 (Arg_0.27298: f32[], Arg_1.27299: f32[]) -> f32[] {
  %Arg_0.27298 = f32[] parameter(0)
  %Arg_1.27299 = f32[] parameter(1)
  ROOT %add.27300 = f32[] add(%Arg_0.27298, %Arg_1.27299)
}

%region_769.27301.clone (Arg_0.1435: f32[], Arg_1.1371: f32[]) -> f32[] {
  %Arg_0.1435 = f32[] parameter(0)
  %Arg_1.1371 = f32[] parameter(1)
  ROOT %add.1578 = f32[] add(%Arg_0.1435, %Arg_1.1371)
}

%region_227.12557 (Arg_0.12554: bf16[], Arg_1.12555: bf16[]) -> bf16[] {
  %Arg_0.12554 = bf16[] parameter(0)
  %Arg_1.12555 = bf16[] parameter(1)
  ROOT %add.12556 = bf16[] add(%Arg_0.12554, %Arg_1.12555)
}

%region_227.12557.clone (Arg_0.1436: bf16[], Arg_1.1372: bf16[]) -> bf16[] {
  %Arg_0.1436 = bf16[] parameter(0)
  %Arg_1.1372 = bf16[] parameter(1)
  ROOT %add.1579 = bf16[] add(%Arg_0.1436, %Arg_1.1372)
}

%region_770.27308 (Arg_0.27305: f32[], Arg_1.27306: f32[]) -> f32[] {
  %Arg_0.27305 = f32[] parameter(0)
  %Arg_1.27306 = f32[] parameter(1)
  ROOT %add.27307 = f32[] add(%Arg_0.27305, %Arg_1.27306)
}

%region_231.12691 (Arg_0.12688: bf16[], Arg_1.12689: bf16[]) -> bf16[] {
  %Arg_0.12688 = bf16[] parameter(0)
  %Arg_1.12689 = bf16[] parameter(1)
  ROOT %add.12690 = bf16[] add(%Arg_0.12688, %Arg_1.12689)
}

%region_231.12691.clone (Arg_0.1437: bf16[], Arg_1.1373: bf16[]) -> bf16[] {
  %Arg_0.1437 = bf16[] parameter(0)
  %Arg_1.1373 = bf16[] parameter(1)
  ROOT %add.1580 = bf16[] add(%Arg_0.1437, %Arg_1.1373)
}

%region_771.27315 (Arg_0.27312: f32[], Arg_1.27313: f32[]) -> f32[] {
  %Arg_0.27312 = f32[] parameter(0)
  %Arg_1.27313 = f32[] parameter(1)
  ROOT %add.27314 = f32[] add(%Arg_0.27312, %Arg_1.27313)
}

%add.143.clone (x.287: bf16[], y.287: bf16[]) -> bf16[] {
  %x.287 = bf16[] parameter(0)
  %y.287 = bf16[] parameter(1)
  ROOT %add.1582 = bf16[] add(%x.287, %y.287)
}

%region_772.27322 (Arg_0.27319: f32[], Arg_1.27320: f32[]) -> f32[] {
  %Arg_0.27319 = f32[] parameter(0)
  %Arg_1.27320 = f32[] parameter(1)
  ROOT %add.27321 = f32[] add(%Arg_0.27319, %Arg_1.27320)
}

%region_772.27322.clone (Arg_0.1438: f32[], Arg_1.1374: f32[]) -> f32[] {
  %Arg_0.1438 = f32[] parameter(0)
  %Arg_1.1374 = f32[] parameter(1)
  ROOT %add.1583 = f32[] add(%Arg_0.1438, %Arg_1.1374)
}

%add.144.clone (x.289: bf16[], y.289: bf16[]) -> bf16[] {
  %x.289 = bf16[] parameter(0)
  %y.289 = bf16[] parameter(1)
  ROOT %add.1585 = bf16[] add(%x.289, %y.289)
}

%region_773.27329 (Arg_0.27326: f32[], Arg_1.27327: f32[]) -> f32[] {
  %Arg_0.27326 = f32[] parameter(0)
  %Arg_1.27327 = f32[] parameter(1)
  ROOT %add.27328 = f32[] add(%Arg_0.27326, %Arg_1.27327)
}

%region_773.27329.clone (Arg_0.1439: f32[], Arg_1.1375: f32[]) -> f32[] {
  %Arg_0.1439 = f32[] parameter(0)
  %Arg_1.1375 = f32[] parameter(1)
  ROOT %add.1586 = f32[] add(%Arg_0.1439, %Arg_1.1375)
}

%add.145.clone (x.291: bf16[], y.291: bf16[]) -> bf16[] {
  %x.291 = bf16[] parameter(0)
  %y.291 = bf16[] parameter(1)
  ROOT %add.1589 = bf16[] add(%x.291, %y.291)
}

%region_774.27336 (Arg_0.27333: f32[], Arg_1.27334: f32[]) -> f32[] {
  %Arg_0.27333 = f32[] parameter(0)
  %Arg_1.27334 = f32[] parameter(1)
  ROOT %add.27335 = f32[] add(%Arg_0.27333, %Arg_1.27334)
}

%region_774.27336.clone (Arg_0.1440: f32[], Arg_1.1377: f32[]) -> f32[] {
  %Arg_0.1440 = f32[] parameter(0)
  %Arg_1.1377 = f32[] parameter(1)
  ROOT %add.1590 = f32[] add(%Arg_0.1440, %Arg_1.1377)
}

%add.146.clone (x.293: bf16[], y.293: bf16[]) -> bf16[] {
  %x.293 = bf16[] parameter(0)
  %y.293 = bf16[] parameter(1)
  ROOT %add.1592 = bf16[] add(%x.293, %y.293)
}

%region_775.27343 (Arg_0.27340: f32[], Arg_1.27341: f32[]) -> f32[] {
  %Arg_0.27340 = f32[] parameter(0)
  %Arg_1.27341 = f32[] parameter(1)
  ROOT %add.27342 = f32[] add(%Arg_0.27340, %Arg_1.27341)
}

%region_775.27343.clone (Arg_0.1441: f32[], Arg_1.1378: f32[]) -> f32[] {
  %Arg_0.1441 = f32[] parameter(0)
  %Arg_1.1378 = f32[] parameter(1)
  ROOT %add.1593 = f32[] add(%Arg_0.1441, %Arg_1.1378)
}

%add.147.clone (x.295: bf16[], y.295: bf16[]) -> bf16[] {
  %x.295 = bf16[] parameter(0)
  %y.295 = bf16[] parameter(1)
  ROOT %add.1595 = bf16[] add(%x.295, %y.295)
}

%region_776.27350 (Arg_0.27347: f32[], Arg_1.27348: f32[]) -> f32[] {
  %Arg_0.27347 = f32[] parameter(0)
  %Arg_1.27348 = f32[] parameter(1)
  ROOT %add.27349 = f32[] add(%Arg_0.27347, %Arg_1.27348)
}

%region_776.27350.clone (Arg_0.1442: f32[], Arg_1.1379: f32[]) -> f32[] {
  %Arg_0.1442 = f32[] parameter(0)
  %Arg_1.1379 = f32[] parameter(1)
  ROOT %add.1597 = f32[] add(%Arg_0.1442, %Arg_1.1379)
}

%add.148.clone (x.297: bf16[], y.297: bf16[]) -> bf16[] {
  %x.297 = bf16[] parameter(0)
  %y.297 = bf16[] parameter(1)
  ROOT %add.1599 = bf16[] add(%x.297, %y.297)
}

%region_777.27357 (Arg_0.27354: f32[], Arg_1.27355: f32[]) -> f32[] {
  %Arg_0.27354 = f32[] parameter(0)
  %Arg_1.27355 = f32[] parameter(1)
  ROOT %add.27356 = f32[] add(%Arg_0.27354, %Arg_1.27355)
}

%region_777.27357.clone (Arg_0.1443: f32[], Arg_1.1380: f32[]) -> f32[] {
  %Arg_0.1443 = f32[] parameter(0)
  %Arg_1.1380 = f32[] parameter(1)
  ROOT %add.1600 = f32[] add(%Arg_0.1443, %Arg_1.1380)
}

%add.149.clone (x.299: bf16[], y.299: bf16[]) -> bf16[] {
  %x.299 = bf16[] parameter(0)
  %y.299 = bf16[] parameter(1)
  ROOT %add.1602 = bf16[] add(%x.299, %y.299)
}

%region_778.27364 (Arg_0.27361: f32[], Arg_1.27362: f32[]) -> f32[] {
  %Arg_0.27361 = f32[] parameter(0)
  %Arg_1.27362 = f32[] parameter(1)
  ROOT %add.27363 = f32[] add(%Arg_0.27361, %Arg_1.27362)
}

%region_778.27364.clone (Arg_0.1444: f32[], Arg_1.1381: f32[]) -> f32[] {
  %Arg_0.1444 = f32[] parameter(0)
  %Arg_1.1381 = f32[] parameter(1)
  ROOT %add.1603 = f32[] add(%Arg_0.1444, %Arg_1.1381)
}

%region_214.12065 (Arg_0.12062: bf16[], Arg_1.12063: bf16[]) -> bf16[] {
  %Arg_0.12062 = bf16[] parameter(0)
  %Arg_1.12063 = bf16[] parameter(1)
  ROOT %add.12064 = bf16[] add(%Arg_0.12062, %Arg_1.12063)
}

%region_214.12065.clone (Arg_0.1445: bf16[], Arg_1.1382: bf16[]) -> bf16[] {
  %Arg_0.1445 = bf16[] parameter(0)
  %Arg_1.1382 = bf16[] parameter(1)
  ROOT %add.1604 = bf16[] add(%Arg_0.1445, %Arg_1.1382)
}

%region_779.27371 (Arg_0.27368: f32[], Arg_1.27369: f32[]) -> f32[] {
  %Arg_0.27368 = f32[] parameter(0)
  %Arg_1.27369 = f32[] parameter(1)
  ROOT %add.27370 = f32[] add(%Arg_0.27368, %Arg_1.27369)
}

%region_218.12199 (Arg_0.12196: bf16[], Arg_1.12197: bf16[]) -> bf16[] {
  %Arg_0.12196 = bf16[] parameter(0)
  %Arg_1.12197 = bf16[] parameter(1)
  ROOT %add.12198 = bf16[] add(%Arg_0.12196, %Arg_1.12197)
}

%region_218.12199.clone (Arg_0.1446: bf16[], Arg_1.1383: bf16[]) -> bf16[] {
  %Arg_0.1446 = bf16[] parameter(0)
  %Arg_1.1383 = bf16[] parameter(1)
  ROOT %add.1605 = bf16[] add(%Arg_0.1446, %Arg_1.1383)
}

%region_780.27378 (Arg_0.27375: f32[], Arg_1.27376: f32[]) -> f32[] {
  %Arg_0.27375 = f32[] parameter(0)
  %Arg_1.27376 = f32[] parameter(1)
  ROOT %add.27377 = f32[] add(%Arg_0.27375, %Arg_1.27376)
}

%add.150.clone (x.301: bf16[], y.301: bf16[]) -> bf16[] {
  %x.301 = bf16[] parameter(0)
  %y.301 = bf16[] parameter(1)
  ROOT %add.1607 = bf16[] add(%x.301, %y.301)
}

%region_781.27385 (Arg_0.27382: f32[], Arg_1.27383: f32[]) -> f32[] {
  %Arg_0.27382 = f32[] parameter(0)
  %Arg_1.27383 = f32[] parameter(1)
  ROOT %add.27384 = f32[] add(%Arg_0.27382, %Arg_1.27383)
}

%region_781.27385.clone (Arg_0.1447: f32[], Arg_1.1384: f32[]) -> f32[] {
  %Arg_0.1447 = f32[] parameter(0)
  %Arg_1.1384 = f32[] parameter(1)
  ROOT %add.1608 = f32[] add(%Arg_0.1447, %Arg_1.1384)
}

%add.151.clone (x.303: bf16[], y.303: bf16[]) -> bf16[] {
  %x.303 = bf16[] parameter(0)
  %y.303 = bf16[] parameter(1)
  ROOT %add.1610 = bf16[] add(%x.303, %y.303)
}

%region_782.27392 (Arg_0.27389: f32[], Arg_1.27390: f32[]) -> f32[] {
  %Arg_0.27389 = f32[] parameter(0)
  %Arg_1.27390 = f32[] parameter(1)
  ROOT %add.27391 = f32[] add(%Arg_0.27389, %Arg_1.27390)
}

%region_782.27392.clone (Arg_0.1448: f32[], Arg_1.1385: f32[]) -> f32[] {
  %Arg_0.1448 = f32[] parameter(0)
  %Arg_1.1385 = f32[] parameter(1)
  ROOT %add.1611 = f32[] add(%Arg_0.1448, %Arg_1.1385)
}

%add.152.clone (x.305: bf16[], y.305: bf16[]) -> bf16[] {
  %x.305 = bf16[] parameter(0)
  %y.305 = bf16[] parameter(1)
  ROOT %add.1613 = bf16[] add(%x.305, %y.305)
}

%region_783.27399 (Arg_0.27396: f32[], Arg_1.27397: f32[]) -> f32[] {
  %Arg_0.27396 = f32[] parameter(0)
  %Arg_1.27397 = f32[] parameter(1)
  ROOT %add.27398 = f32[] add(%Arg_0.27396, %Arg_1.27397)
}

%region_783.27399.clone (Arg_0.1449: f32[], Arg_1.1386: f32[]) -> f32[] {
  %Arg_0.1449 = f32[] parameter(0)
  %Arg_1.1386 = f32[] parameter(1)
  ROOT %add.1615 = f32[] add(%Arg_0.1449, %Arg_1.1386)
}

%add.153.clone (x.307: bf16[], y.307: bf16[]) -> bf16[] {
  %x.307 = bf16[] parameter(0)
  %y.307 = bf16[] parameter(1)
  ROOT %add.1617 = bf16[] add(%x.307, %y.307)
}

%region_784.27406 (Arg_0.27403: f32[], Arg_1.27404: f32[]) -> f32[] {
  %Arg_0.27403 = f32[] parameter(0)
  %Arg_1.27404 = f32[] parameter(1)
  ROOT %add.27405 = f32[] add(%Arg_0.27403, %Arg_1.27404)
}

%region_784.27406.clone (Arg_0.1450: f32[], Arg_1.1387: f32[]) -> f32[] {
  %Arg_0.1450 = f32[] parameter(0)
  %Arg_1.1387 = f32[] parameter(1)
  ROOT %add.1618 = f32[] add(%Arg_0.1450, %Arg_1.1387)
}

%add.154.clone (x.309: bf16[], y.309: bf16[]) -> bf16[] {
  %x.309 = bf16[] parameter(0)
  %y.309 = bf16[] parameter(1)
  ROOT %add.1621 = bf16[] add(%x.309, %y.309)
}

%region_785.27413 (Arg_0.27410: f32[], Arg_1.27411: f32[]) -> f32[] {
  %Arg_0.27410 = f32[] parameter(0)
  %Arg_1.27411 = f32[] parameter(1)
  ROOT %add.27412 = f32[] add(%Arg_0.27410, %Arg_1.27411)
}

%region_785.27413.clone (Arg_0.1451: f32[], Arg_1.1388: f32[]) -> f32[] {
  %Arg_0.1451 = f32[] parameter(0)
  %Arg_1.1388 = f32[] parameter(1)
  ROOT %add.1622 = f32[] add(%Arg_0.1451, %Arg_1.1388)
}

%add.155.clone (x.311: bf16[], y.311: bf16[]) -> bf16[] {
  %x.311 = bf16[] parameter(0)
  %y.311 = bf16[] parameter(1)
  ROOT %add.1625 = bf16[] add(%x.311, %y.311)
}

%region_786.27420 (Arg_0.27417: f32[], Arg_1.27418: f32[]) -> f32[] {
  %Arg_0.27417 = f32[] parameter(0)
  %Arg_1.27418 = f32[] parameter(1)
  ROOT %add.27419 = f32[] add(%Arg_0.27417, %Arg_1.27418)
}

%region_786.27420.clone (Arg_0.1452: f32[], Arg_1.1389: f32[]) -> f32[] {
  %Arg_0.1452 = f32[] parameter(0)
  %Arg_1.1389 = f32[] parameter(1)
  ROOT %add.1626 = f32[] add(%Arg_0.1452, %Arg_1.1389)
}

%add.156.clone (x.313: bf16[], y.313: bf16[]) -> bf16[] {
  %x.313 = bf16[] parameter(0)
  %y.313 = bf16[] parameter(1)
  ROOT %add.1628 = bf16[] add(%x.313, %y.313)
}

%region_787.27427 (Arg_0.27424: f32[], Arg_1.27425: f32[]) -> f32[] {
  %Arg_0.27424 = f32[] parameter(0)
  %Arg_1.27425 = f32[] parameter(1)
  ROOT %add.27426 = f32[] add(%Arg_0.27424, %Arg_1.27425)
}

%region_787.27427.clone (Arg_0.1453: f32[], Arg_1.1390: f32[]) -> f32[] {
  %Arg_0.1453 = f32[] parameter(0)
  %Arg_1.1390 = f32[] parameter(1)
  ROOT %add.1629 = f32[] add(%Arg_0.1453, %Arg_1.1390)
}

%region_201.11573 (Arg_0.11570: bf16[], Arg_1.11571: bf16[]) -> bf16[] {
  %Arg_0.11570 = bf16[] parameter(0)
  %Arg_1.11571 = bf16[] parameter(1)
  ROOT %add.11572 = bf16[] add(%Arg_0.11570, %Arg_1.11571)
}

%region_201.11573.clone (Arg_0.1454: bf16[], Arg_1.1391: bf16[]) -> bf16[] {
  %Arg_0.1454 = bf16[] parameter(0)
  %Arg_1.1391 = bf16[] parameter(1)
  ROOT %add.1630 = bf16[] add(%Arg_0.1454, %Arg_1.1391)
}

%region_788.27434 (Arg_0.27431: f32[], Arg_1.27432: f32[]) -> f32[] {
  %Arg_0.27431 = f32[] parameter(0)
  %Arg_1.27432 = f32[] parameter(1)
  ROOT %add.27433 = f32[] add(%Arg_0.27431, %Arg_1.27432)
}

%region_205.11707 (Arg_0.11704: bf16[], Arg_1.11705: bf16[]) -> bf16[] {
  %Arg_0.11704 = bf16[] parameter(0)
  %Arg_1.11705 = bf16[] parameter(1)
  ROOT %add.11706 = bf16[] add(%Arg_0.11704, %Arg_1.11705)
}

%region_205.11707.clone (Arg_0.1455: bf16[], Arg_1.1392: bf16[]) -> bf16[] {
  %Arg_0.1455 = bf16[] parameter(0)
  %Arg_1.1392 = bf16[] parameter(1)
  ROOT %add.1631 = bf16[] add(%Arg_0.1455, %Arg_1.1392)
}

%region_789.27441 (Arg_0.27438: f32[], Arg_1.27439: f32[]) -> f32[] {
  %Arg_0.27438 = f32[] parameter(0)
  %Arg_1.27439 = f32[] parameter(1)
  ROOT %add.27440 = f32[] add(%Arg_0.27438, %Arg_1.27439)
}

%add.157.clone (x.315: bf16[], y.315: bf16[]) -> bf16[] {
  %x.315 = bf16[] parameter(0)
  %y.315 = bf16[] parameter(1)
  ROOT %add.1633 = bf16[] add(%x.315, %y.315)
}

%region_790.27448 (Arg_0.27445: f32[], Arg_1.27446: f32[]) -> f32[] {
  %Arg_0.27445 = f32[] parameter(0)
  %Arg_1.27446 = f32[] parameter(1)
  ROOT %add.27447 = f32[] add(%Arg_0.27445, %Arg_1.27446)
}

%region_790.27448.clone (Arg_0.1456: f32[], Arg_1.1393: f32[]) -> f32[] {
  %Arg_0.1456 = f32[] parameter(0)
  %Arg_1.1393 = f32[] parameter(1)
  ROOT %add.1634 = f32[] add(%Arg_0.1456, %Arg_1.1393)
}

%add.158.clone (x.317: bf16[], y.317: bf16[]) -> bf16[] {
  %x.317 = bf16[] parameter(0)
  %y.317 = bf16[] parameter(1)
  ROOT %add.1636 = bf16[] add(%x.317, %y.317)
}

%region_791.27455 (Arg_0.27452: f32[], Arg_1.27453: f32[]) -> f32[] {
  %Arg_0.27452 = f32[] parameter(0)
  %Arg_1.27453 = f32[] parameter(1)
  ROOT %add.27454 = f32[] add(%Arg_0.27452, %Arg_1.27453)
}

%region_791.27455.clone (Arg_0.1457: f32[], Arg_1.1394: f32[]) -> f32[] {
  %Arg_0.1457 = f32[] parameter(0)
  %Arg_1.1394 = f32[] parameter(1)
  ROOT %add.1637 = f32[] add(%Arg_0.1457, %Arg_1.1394)
}

%add.159.clone (x.319: bf16[], y.319: bf16[]) -> bf16[] {
  %x.319 = bf16[] parameter(0)
  %y.319 = bf16[] parameter(1)
  ROOT %add.1639 = bf16[] add(%x.319, %y.319)
}

%region_792.27462 (Arg_0.27459: f32[], Arg_1.27460: f32[]) -> f32[] {
  %Arg_0.27459 = f32[] parameter(0)
  %Arg_1.27460 = f32[] parameter(1)
  ROOT %add.27461 = f32[] add(%Arg_0.27459, %Arg_1.27460)
}

%region_792.27462.clone (Arg_0.1458: f32[], Arg_1.1395: f32[]) -> f32[] {
  %Arg_0.1458 = f32[] parameter(0)
  %Arg_1.1395 = f32[] parameter(1)
  ROOT %add.1640 = f32[] add(%Arg_0.1458, %Arg_1.1395)
}

%add.160.clone (x.321: bf16[], y.321: bf16[]) -> bf16[] {
  %x.321 = bf16[] parameter(0)
  %y.321 = bf16[] parameter(1)
  ROOT %add.1642 = bf16[] add(%x.321, %y.321)
}

%region_793.27469 (Arg_0.27466: f32[], Arg_1.27467: f32[]) -> f32[] {
  %Arg_0.27466 = f32[] parameter(0)
  %Arg_1.27467 = f32[] parameter(1)
  ROOT %add.27468 = f32[] add(%Arg_0.27466, %Arg_1.27467)
}

%region_793.27469.clone (Arg_0.1459: f32[], Arg_1.1396: f32[]) -> f32[] {
  %Arg_0.1459 = f32[] parameter(0)
  %Arg_1.1396 = f32[] parameter(1)
  ROOT %add.1643 = f32[] add(%Arg_0.1459, %Arg_1.1396)
}

%add.161.clone (x.323: bf16[], y.323: bf16[]) -> bf16[] {
  %x.323 = bf16[] parameter(0)
  %y.323 = bf16[] parameter(1)
  ROOT %add.1645 = bf16[] add(%x.323, %y.323)
}

%region_794.27476 (Arg_0.27473: f32[], Arg_1.27474: f32[]) -> f32[] {
  %Arg_0.27473 = f32[] parameter(0)
  %Arg_1.27474 = f32[] parameter(1)
  ROOT %add.27475 = f32[] add(%Arg_0.27473, %Arg_1.27474)
}

%region_794.27476.clone (Arg_0.1460: f32[], Arg_1.1397: f32[]) -> f32[] {
  %Arg_0.1460 = f32[] parameter(0)
  %Arg_1.1397 = f32[] parameter(1)
  ROOT %add.1646 = f32[] add(%Arg_0.1460, %Arg_1.1397)
}

%add.162.clone (x.325: bf16[], y.325: bf16[]) -> bf16[] {
  %x.325 = bf16[] parameter(0)
  %y.325 = bf16[] parameter(1)
  ROOT %add.1648 = bf16[] add(%x.325, %y.325)
}

%region_795.27483 (Arg_0.27480: f32[], Arg_1.27481: f32[]) -> f32[] {
  %Arg_0.27480 = f32[] parameter(0)
  %Arg_1.27481 = f32[] parameter(1)
  ROOT %add.27482 = f32[] add(%Arg_0.27480, %Arg_1.27481)
}

%region_795.27483.clone (Arg_0.1461: f32[], Arg_1.1398: f32[]) -> f32[] {
  %Arg_0.1461 = f32[] parameter(0)
  %Arg_1.1398 = f32[] parameter(1)
  ROOT %add.1649 = f32[] add(%Arg_0.1461, %Arg_1.1398)
}

%add.163.clone (x.327: bf16[], y.327: bf16[]) -> bf16[] {
  %x.327 = bf16[] parameter(0)
  %y.327 = bf16[] parameter(1)
  ROOT %add.1652 = bf16[] add(%x.327, %y.327)
}

%region_796.27490 (Arg_0.27487: f32[], Arg_1.27488: f32[]) -> f32[] {
  %Arg_0.27487 = f32[] parameter(0)
  %Arg_1.27488 = f32[] parameter(1)
  ROOT %add.27489 = f32[] add(%Arg_0.27487, %Arg_1.27488)
}

%region_796.27490.clone (Arg_0.1462: f32[], Arg_1.1399: f32[]) -> f32[] {
  %Arg_0.1462 = f32[] parameter(0)
  %Arg_1.1399 = f32[] parameter(1)
  ROOT %add.1653 = f32[] add(%Arg_0.1462, %Arg_1.1399)
}

%region_539.24365 (Arg_0.24362: bf16[], Arg_1.24363: bf16[]) -> bf16[] {
  %Arg_0.24362 = bf16[] parameter(0)
  %Arg_1.24363 = bf16[] parameter(1)
  ROOT %add.24364 = bf16[] add(%Arg_0.24362, %Arg_1.24363)
}

%region_539.24365.clone (Arg_0.1463: bf16[], Arg_1.1400: bf16[]) -> bf16[] {
  %Arg_0.1463 = bf16[] parameter(0)
  %Arg_1.1400 = bf16[] parameter(1)
  ROOT %add.1654 = bf16[] add(%Arg_0.1463, %Arg_1.1400)
}

%region_797.27497 (Arg_0.27494: f32[], Arg_1.27495: f32[]) -> f32[] {
  %Arg_0.27494 = f32[] parameter(0)
  %Arg_1.27495 = f32[] parameter(1)
  ROOT %add.27496 = f32[] add(%Arg_0.27494, %Arg_1.27495)
}

%region_543.24499 (Arg_0.24496: bf16[], Arg_1.24497: bf16[]) -> bf16[] {
  %Arg_0.24496 = bf16[] parameter(0)
  %Arg_1.24497 = bf16[] parameter(1)
  ROOT %add.24498 = bf16[] add(%Arg_0.24496, %Arg_1.24497)
}

%region_543.24499.clone (Arg_0.1464: bf16[], Arg_1.1401: bf16[]) -> bf16[] {
  %Arg_0.1464 = bf16[] parameter(0)
  %Arg_1.1401 = bf16[] parameter(1)
  ROOT %add.1655 = bf16[] add(%Arg_0.1464, %Arg_1.1401)
}

%region_798.27504 (Arg_0.27501: f32[], Arg_1.27502: f32[]) -> f32[] {
  %Arg_0.27501 = f32[] parameter(0)
  %Arg_1.27502 = f32[] parameter(1)
  ROOT %add.27503 = f32[] add(%Arg_0.27501, %Arg_1.27502)
}

%add.164.clone (x.329: bf16[], y.329: bf16[]) -> bf16[] {
  %x.329 = bf16[] parameter(0)
  %y.329 = bf16[] parameter(1)
  ROOT %add.1658 = bf16[] add(%x.329, %y.329)
}

%region_799.27511 (Arg_0.27508: f32[], Arg_1.27509: f32[]) -> f32[] {
  %Arg_0.27508 = f32[] parameter(0)
  %Arg_1.27509 = f32[] parameter(1)
  ROOT %add.27510 = f32[] add(%Arg_0.27508, %Arg_1.27509)
}

%region_799.27511.clone (Arg_0.1465: f32[], Arg_1.1402: f32[]) -> f32[] {
  %Arg_0.1465 = f32[] parameter(0)
  %Arg_1.1402 = f32[] parameter(1)
  ROOT %add.1659 = f32[] add(%Arg_0.1465, %Arg_1.1402)
}

%add.165.clone (x.331: bf16[], y.331: bf16[]) -> bf16[] {
  %x.331 = bf16[] parameter(0)
  %y.331 = bf16[] parameter(1)
  ROOT %add.1661 = bf16[] add(%x.331, %y.331)
}

%region_800.27518 (Arg_0.27515: f32[], Arg_1.27516: f32[]) -> f32[] {
  %Arg_0.27515 = f32[] parameter(0)
  %Arg_1.27516 = f32[] parameter(1)
  ROOT %add.27517 = f32[] add(%Arg_0.27515, %Arg_1.27516)
}

%region_800.27518.clone (Arg_0.1466: f32[], Arg_1.1403: f32[]) -> f32[] {
  %Arg_0.1466 = f32[] parameter(0)
  %Arg_1.1403 = f32[] parameter(1)
  ROOT %add.1663 = f32[] add(%Arg_0.1466, %Arg_1.1403)
}

%add.166.clone (x.333: bf16[], y.333: bf16[]) -> bf16[] {
  %x.333 = bf16[] parameter(0)
  %y.333 = bf16[] parameter(1)
  ROOT %add.1665 = bf16[] add(%x.333, %y.333)
}

%region_801.27525 (Arg_0.27522: f32[], Arg_1.27523: f32[]) -> f32[] {
  %Arg_0.27522 = f32[] parameter(0)
  %Arg_1.27523 = f32[] parameter(1)
  ROOT %add.27524 = f32[] add(%Arg_0.27522, %Arg_1.27523)
}

%region_801.27525.clone (Arg_0.1467: f32[], Arg_1.1404: f32[]) -> f32[] {
  %Arg_0.1467 = f32[] parameter(0)
  %Arg_1.1404 = f32[] parameter(1)
  ROOT %add.1666 = f32[] add(%Arg_0.1467, %Arg_1.1404)
}

%add.167.clone (x.335: bf16[], y.335: bf16[]) -> bf16[] {
  %x.335 = bf16[] parameter(0)
  %y.335 = bf16[] parameter(1)
  ROOT %add.1668 = bf16[] add(%x.335, %y.335)
}

%region_802.27532 (Arg_0.27529: f32[], Arg_1.27530: f32[]) -> f32[] {
  %Arg_0.27529 = f32[] parameter(0)
  %Arg_1.27530 = f32[] parameter(1)
  ROOT %add.27531 = f32[] add(%Arg_0.27529, %Arg_1.27530)
}

%region_802.27532.clone (Arg_0.1468: f32[], Arg_1.1405: f32[]) -> f32[] {
  %Arg_0.1468 = f32[] parameter(0)
  %Arg_1.1405 = f32[] parameter(1)
  ROOT %add.1669 = f32[] add(%Arg_0.1468, %Arg_1.1405)
}

%add.168.clone (x.337: bf16[], y.337: bf16[]) -> bf16[] {
  %x.337 = bf16[] parameter(0)
  %y.337 = bf16[] parameter(1)
  ROOT %add.1671 = bf16[] add(%x.337, %y.337)
}

%region_803.27539 (Arg_0.27536: f32[], Arg_1.27537: f32[]) -> f32[] {
  %Arg_0.27536 = f32[] parameter(0)
  %Arg_1.27537 = f32[] parameter(1)
  ROOT %add.27538 = f32[] add(%Arg_0.27536, %Arg_1.27537)
}

%region_803.27539.clone (Arg_0.1469: f32[], Arg_1.1406: f32[]) -> f32[] {
  %Arg_0.1469 = f32[] parameter(0)
  %Arg_1.1406 = f32[] parameter(1)
  ROOT %add.1672 = f32[] add(%Arg_0.1469, %Arg_1.1406)
}

%add.169.clone (x.339: bf16[], y.339: bf16[]) -> bf16[] {
  %x.339 = bf16[] parameter(0)
  %y.339 = bf16[] parameter(1)
  ROOT %add.1674 = bf16[] add(%x.339, %y.339)
}

%region_804.27546 (Arg_0.27543: f32[], Arg_1.27544: f32[]) -> f32[] {
  %Arg_0.27543 = f32[] parameter(0)
  %Arg_1.27544 = f32[] parameter(1)
  ROOT %add.27545 = f32[] add(%Arg_0.27543, %Arg_1.27544)
}

%region_804.27546.clone (Arg_0.1470: f32[], Arg_1.1407: f32[]) -> f32[] {
  %Arg_0.1470 = f32[] parameter(0)
  %Arg_1.1407 = f32[] parameter(1)
  ROOT %add.1675 = f32[] add(%Arg_0.1470, %Arg_1.1407)
}

%add.170.clone (x.341: bf16[], y.341: bf16[]) -> bf16[] {
  %x.341 = bf16[] parameter(0)
  %y.341 = bf16[] parameter(1)
  ROOT %add.1677 = bf16[] add(%x.341, %y.341)
}

%region_805.27553 (Arg_0.27550: f32[], Arg_1.27551: f32[]) -> f32[] {
  %Arg_0.27550 = f32[] parameter(0)
  %Arg_1.27551 = f32[] parameter(1)
  ROOT %add.27552 = f32[] add(%Arg_0.27550, %Arg_1.27551)
}

%region_805.27553.clone (Arg_0.1471: f32[], Arg_1.1408: f32[]) -> f32[] {
  %Arg_0.1471 = f32[] parameter(0)
  %Arg_1.1408 = f32[] parameter(1)
  ROOT %add.1678 = f32[] add(%Arg_0.1471, %Arg_1.1408)
}

%region_188.11081 (Arg_0.11078: bf16[], Arg_1.11079: bf16[]) -> bf16[] {
  %Arg_0.11078 = bf16[] parameter(0)
  %Arg_1.11079 = bf16[] parameter(1)
  ROOT %add.11080 = bf16[] add(%Arg_0.11078, %Arg_1.11079)
}

%region_188.11081.clone (Arg_0.1472: bf16[], Arg_1.1409: bf16[]) -> bf16[] {
  %Arg_0.1472 = bf16[] parameter(0)
  %Arg_1.1409 = bf16[] parameter(1)
  ROOT %add.1679 = bf16[] add(%Arg_0.1472, %Arg_1.1409)
}

%region_806.27560 (Arg_0.27557: f32[], Arg_1.27558: f32[]) -> f32[] {
  %Arg_0.27557 = f32[] parameter(0)
  %Arg_1.27558 = f32[] parameter(1)
  ROOT %add.27559 = f32[] add(%Arg_0.27557, %Arg_1.27558)
}

%region_192.11215 (Arg_0.11212: bf16[], Arg_1.11213: bf16[]) -> bf16[] {
  %Arg_0.11212 = bf16[] parameter(0)
  %Arg_1.11213 = bf16[] parameter(1)
  ROOT %add.11214 = bf16[] add(%Arg_0.11212, %Arg_1.11213)
}

%region_192.11215.clone (Arg_0.1473: bf16[], Arg_1.1410: bf16[]) -> bf16[] {
  %Arg_0.1473 = bf16[] parameter(0)
  %Arg_1.1410 = bf16[] parameter(1)
  ROOT %add.1680 = bf16[] add(%Arg_0.1473, %Arg_1.1410)
}

%region_807.27567 (Arg_0.27564: f32[], Arg_1.27565: f32[]) -> f32[] {
  %Arg_0.27564 = f32[] parameter(0)
  %Arg_1.27565 = f32[] parameter(1)
  ROOT %add.27566 = f32[] add(%Arg_0.27564, %Arg_1.27565)
}

%add.171.clone (x.343: bf16[], y.343: bf16[]) -> bf16[] {
  %x.343 = bf16[] parameter(0)
  %y.343 = bf16[] parameter(1)
  ROOT %add.1682 = bf16[] add(%x.343, %y.343)
}

%region_808.27574 (Arg_0.27571: f32[], Arg_1.27572: f32[]) -> f32[] {
  %Arg_0.27571 = f32[] parameter(0)
  %Arg_1.27572 = f32[] parameter(1)
  ROOT %add.27573 = f32[] add(%Arg_0.27571, %Arg_1.27572)
}

%region_808.27574.clone (Arg_0.1474: f32[], Arg_1.1411: f32[]) -> f32[] {
  %Arg_0.1474 = f32[] parameter(0)
  %Arg_1.1411 = f32[] parameter(1)
  ROOT %add.1683 = f32[] add(%Arg_0.1474, %Arg_1.1411)
}

%add.172.clone (x.345: bf16[], y.345: bf16[]) -> bf16[] {
  %x.345 = bf16[] parameter(0)
  %y.345 = bf16[] parameter(1)
  ROOT %add.1685 = bf16[] add(%x.345, %y.345)
}

%region_809.27581 (Arg_0.27578: f32[], Arg_1.27579: f32[]) -> f32[] {
  %Arg_0.27578 = f32[] parameter(0)
  %Arg_1.27579 = f32[] parameter(1)
  ROOT %add.27580 = f32[] add(%Arg_0.27578, %Arg_1.27579)
}

%region_809.27581.clone (Arg_0.1475: f32[], Arg_1.1412: f32[]) -> f32[] {
  %Arg_0.1475 = f32[] parameter(0)
  %Arg_1.1412 = f32[] parameter(1)
  ROOT %add.1686 = f32[] add(%Arg_0.1475, %Arg_1.1412)
}

%add.173.clone (x.347: bf16[], y.347: bf16[]) -> bf16[] {
  %x.347 = bf16[] parameter(0)
  %y.347 = bf16[] parameter(1)
  ROOT %add.1688 = bf16[] add(%x.347, %y.347)
}

%region_810.27588 (Arg_0.27585: f32[], Arg_1.27586: f32[]) -> f32[] {
  %Arg_0.27585 = f32[] parameter(0)
  %Arg_1.27586 = f32[] parameter(1)
  ROOT %add.27587 = f32[] add(%Arg_0.27585, %Arg_1.27586)
}

%region_810.27588.clone (Arg_0.1476: f32[], Arg_1.1413: f32[]) -> f32[] {
  %Arg_0.1476 = f32[] parameter(0)
  %Arg_1.1413 = f32[] parameter(1)
  ROOT %add.1689 = f32[] add(%Arg_0.1476, %Arg_1.1413)
}

%add.174.clone (x.349: bf16[], y.349: bf16[]) -> bf16[] {
  %x.349 = bf16[] parameter(0)
  %y.349 = bf16[] parameter(1)
  ROOT %add.1691 = bf16[] add(%x.349, %y.349)
}

%region_811.27595 (Arg_0.27592: f32[], Arg_1.27593: f32[]) -> f32[] {
  %Arg_0.27592 = f32[] parameter(0)
  %Arg_1.27593 = f32[] parameter(1)
  ROOT %add.27594 = f32[] add(%Arg_0.27592, %Arg_1.27593)
}

%region_811.27595.clone (Arg_0.1477: f32[], Arg_1.1414: f32[]) -> f32[] {
  %Arg_0.1477 = f32[] parameter(0)
  %Arg_1.1414 = f32[] parameter(1)
  ROOT %add.1692 = f32[] add(%Arg_0.1477, %Arg_1.1414)
}

%add.175.clone (x.351: bf16[], y.351: bf16[]) -> bf16[] {
  %x.351 = bf16[] parameter(0)
  %y.351 = bf16[] parameter(1)
  ROOT %add.1694 = bf16[] add(%x.351, %y.351)
}

%region_812.27602 (Arg_0.27599: f32[], Arg_1.27600: f32[]) -> f32[] {
  %Arg_0.27599 = f32[] parameter(0)
  %Arg_1.27600 = f32[] parameter(1)
  ROOT %add.27601 = f32[] add(%Arg_0.27599, %Arg_1.27600)
}

%region_812.27602.clone (Arg_0.1478: f32[], Arg_1.1415: f32[]) -> f32[] {
  %Arg_0.1478 = f32[] parameter(0)
  %Arg_1.1415 = f32[] parameter(1)
  ROOT %add.1695 = f32[] add(%Arg_0.1478, %Arg_1.1415)
}

%add.176.clone (x.353: bf16[], y.353: bf16[]) -> bf16[] {
  %x.353 = bf16[] parameter(0)
  %y.353 = bf16[] parameter(1)
  ROOT %add.1697 = bf16[] add(%x.353, %y.353)
}

%region_813.27609 (Arg_0.27606: f32[], Arg_1.27607: f32[]) -> f32[] {
  %Arg_0.27606 = f32[] parameter(0)
  %Arg_1.27607 = f32[] parameter(1)
  ROOT %add.27608 = f32[] add(%Arg_0.27606, %Arg_1.27607)
}

%region_813.27609.clone (Arg_0.1479: f32[], Arg_1.1416: f32[]) -> f32[] {
  %Arg_0.1479 = f32[] parameter(0)
  %Arg_1.1416 = f32[] parameter(1)
  ROOT %add.1698 = f32[] add(%Arg_0.1479, %Arg_1.1416)
}

%add.177.clone (x.355: bf16[], y.355: bf16[]) -> bf16[] {
  %x.355 = bf16[] parameter(0)
  %y.355 = bf16[] parameter(1)
  ROOT %add.1700 = bf16[] add(%x.355, %y.355)
}

%region_814.27616 (Arg_0.27613: f32[], Arg_1.27614: f32[]) -> f32[] {
  %Arg_0.27613 = f32[] parameter(0)
  %Arg_1.27614 = f32[] parameter(1)
  ROOT %add.27615 = f32[] add(%Arg_0.27613, %Arg_1.27614)
}

%region_814.27616.clone (Arg_0.1480: f32[], Arg_1.1417: f32[]) -> f32[] {
  %Arg_0.1480 = f32[] parameter(0)
  %Arg_1.1417 = f32[] parameter(1)
  ROOT %add.1701 = f32[] add(%Arg_0.1480, %Arg_1.1417)
}

%region_175.10589 (Arg_0.10586: bf16[], Arg_1.10587: bf16[]) -> bf16[] {
  %Arg_0.10586 = bf16[] parameter(0)
  %Arg_1.10587 = bf16[] parameter(1)
  ROOT %add.10588 = bf16[] add(%Arg_0.10586, %Arg_1.10587)
}

%region_175.10589.clone (Arg_0.1481: bf16[], Arg_1.1418: bf16[]) -> bf16[] {
  %Arg_0.1481 = bf16[] parameter(0)
  %Arg_1.1418 = bf16[] parameter(1)
  ROOT %add.1702 = bf16[] add(%Arg_0.1481, %Arg_1.1418)
}

%region_815.27623 (Arg_0.27620: f32[], Arg_1.27621: f32[]) -> f32[] {
  %Arg_0.27620 = f32[] parameter(0)
  %Arg_1.27621 = f32[] parameter(1)
  ROOT %add.27622 = f32[] add(%Arg_0.27620, %Arg_1.27621)
}

%region_179.10723 (Arg_0.10720: bf16[], Arg_1.10721: bf16[]) -> bf16[] {
  %Arg_0.10720 = bf16[] parameter(0)
  %Arg_1.10721 = bf16[] parameter(1)
  ROOT %add.10722 = bf16[] add(%Arg_0.10720, %Arg_1.10721)
}

%region_179.10723.clone (Arg_0.1482: bf16[], Arg_1.1419: bf16[]) -> bf16[] {
  %Arg_0.1482 = bf16[] parameter(0)
  %Arg_1.1419 = bf16[] parameter(1)
  ROOT %add.1703 = bf16[] add(%Arg_0.1482, %Arg_1.1419)
}

%region_816.27630 (Arg_0.27627: f32[], Arg_1.27628: f32[]) -> f32[] {
  %Arg_0.27627 = f32[] parameter(0)
  %Arg_1.27628 = f32[] parameter(1)
  ROOT %add.27629 = f32[] add(%Arg_0.27627, %Arg_1.27628)
}

%add.178.clone (x.357: bf16[], y.357: bf16[]) -> bf16[] {
  %x.357 = bf16[] parameter(0)
  %y.357 = bf16[] parameter(1)
  ROOT %add.1705 = bf16[] add(%x.357, %y.357)
}

%region_817.27637 (Arg_0.27634: f32[], Arg_1.27635: f32[]) -> f32[] {
  %Arg_0.27634 = f32[] parameter(0)
  %Arg_1.27635 = f32[] parameter(1)
  ROOT %add.27636 = f32[] add(%Arg_0.27634, %Arg_1.27635)
}

%region_817.27637.clone (Arg_0.1483: f32[], Arg_1.1420: f32[]) -> f32[] {
  %Arg_0.1483 = f32[] parameter(0)
  %Arg_1.1420 = f32[] parameter(1)
  ROOT %add.1706 = f32[] add(%Arg_0.1483, %Arg_1.1420)
}

%add.179.clone (x.359: bf16[], y.359: bf16[]) -> bf16[] {
  %x.359 = bf16[] parameter(0)
  %y.359 = bf16[] parameter(1)
  ROOT %add.1708 = bf16[] add(%x.359, %y.359)
}

%region_818.27644 (Arg_0.27641: f32[], Arg_1.27642: f32[]) -> f32[] {
  %Arg_0.27641 = f32[] parameter(0)
  %Arg_1.27642 = f32[] parameter(1)
  ROOT %add.27643 = f32[] add(%Arg_0.27641, %Arg_1.27642)
}

%region_818.27644.clone (Arg_0.1484: f32[], Arg_1.1421: f32[]) -> f32[] {
  %Arg_0.1484 = f32[] parameter(0)
  %Arg_1.1421 = f32[] parameter(1)
  ROOT %add.1709 = f32[] add(%Arg_0.1484, %Arg_1.1421)
}

%add.180.clone (x.361: bf16[], y.361: bf16[]) -> bf16[] {
  %x.361 = bf16[] parameter(0)
  %y.361 = bf16[] parameter(1)
  ROOT %add.1711 = bf16[] add(%x.361, %y.361)
}

%region_819.27651 (Arg_0.27648: f32[], Arg_1.27649: f32[]) -> f32[] {
  %Arg_0.27648 = f32[] parameter(0)
  %Arg_1.27649 = f32[] parameter(1)
  ROOT %add.27650 = f32[] add(%Arg_0.27648, %Arg_1.27649)
}

%region_819.27651.clone (Arg_0.1485: f32[], Arg_1.1422: f32[]) -> f32[] {
  %Arg_0.1485 = f32[] parameter(0)
  %Arg_1.1422 = f32[] parameter(1)
  ROOT %add.1712 = f32[] add(%Arg_0.1485, %Arg_1.1422)
}

%add.181.clone (x.363: bf16[], y.363: bf16[]) -> bf16[] {
  %x.363 = bf16[] parameter(0)
  %y.363 = bf16[] parameter(1)
  ROOT %add.1714 = bf16[] add(%x.363, %y.363)
}

%region_820.27658 (Arg_0.27655: f32[], Arg_1.27656: f32[]) -> f32[] {
  %Arg_0.27655 = f32[] parameter(0)
  %Arg_1.27656 = f32[] parameter(1)
  ROOT %add.27657 = f32[] add(%Arg_0.27655, %Arg_1.27656)
}

%region_820.27658.clone (Arg_0.1486: f32[], Arg_1.1423: f32[]) -> f32[] {
  %Arg_0.1486 = f32[] parameter(0)
  %Arg_1.1423 = f32[] parameter(1)
  ROOT %add.1715 = f32[] add(%Arg_0.1486, %Arg_1.1423)
}

%add.182.clone (x.365: bf16[], y.365: bf16[]) -> bf16[] {
  %x.365 = bf16[] parameter(0)
  %y.365 = bf16[] parameter(1)
  ROOT %add.1717 = bf16[] add(%x.365, %y.365)
}

%region_821.27665 (Arg_0.27662: f32[], Arg_1.27663: f32[]) -> f32[] {
  %Arg_0.27662 = f32[] parameter(0)
  %Arg_1.27663 = f32[] parameter(1)
  ROOT %add.27664 = f32[] add(%Arg_0.27662, %Arg_1.27663)
}

%region_821.27665.clone (Arg_0.1487: f32[], Arg_1.1424: f32[]) -> f32[] {
  %Arg_0.1487 = f32[] parameter(0)
  %Arg_1.1424 = f32[] parameter(1)
  ROOT %add.1718 = f32[] add(%Arg_0.1487, %Arg_1.1424)
}

%add.183.clone (x.367: bf16[], y.367: bf16[]) -> bf16[] {
  %x.367 = bf16[] parameter(0)
  %y.367 = bf16[] parameter(1)
  ROOT %add.1720 = bf16[] add(%x.367, %y.367)
}

%region_822.27672 (Arg_0.27669: f32[], Arg_1.27670: f32[]) -> f32[] {
  %Arg_0.27669 = f32[] parameter(0)
  %Arg_1.27670 = f32[] parameter(1)
  ROOT %add.27671 = f32[] add(%Arg_0.27669, %Arg_1.27670)
}

%region_822.27672.clone (Arg_0.1488: f32[], Arg_1.1425: f32[]) -> f32[] {
  %Arg_0.1488 = f32[] parameter(0)
  %Arg_1.1425 = f32[] parameter(1)
  ROOT %add.1721 = f32[] add(%Arg_0.1488, %Arg_1.1425)
}

%add.184.clone (x.369: bf16[], y.369: bf16[]) -> bf16[] {
  %x.369 = bf16[] parameter(0)
  %y.369 = bf16[] parameter(1)
  ROOT %add.1724 = bf16[] add(%x.369, %y.369)
}

%region_823.27679 (Arg_0.27676: f32[], Arg_1.27677: f32[]) -> f32[] {
  %Arg_0.27676 = f32[] parameter(0)
  %Arg_1.27677 = f32[] parameter(1)
  ROOT %add.27678 = f32[] add(%Arg_0.27676, %Arg_1.27677)
}

%region_823.27679.clone (Arg_0.1489: f32[], Arg_1.1426: f32[]) -> f32[] {
  %Arg_0.1489 = f32[] parameter(0)
  %Arg_1.1426 = f32[] parameter(1)
  ROOT %add.1725 = f32[] add(%Arg_0.1489, %Arg_1.1426)
}

%region_526.23873 (Arg_0.23870: bf16[], Arg_1.23871: bf16[]) -> bf16[] {
  %Arg_0.23870 = bf16[] parameter(0)
  %Arg_1.23871 = bf16[] parameter(1)
  ROOT %add.23872 = bf16[] add(%Arg_0.23870, %Arg_1.23871)
}

%region_526.23873.clone (Arg_0.1490: bf16[], Arg_1.1427: bf16[]) -> bf16[] {
  %Arg_0.1490 = bf16[] parameter(0)
  %Arg_1.1427 = bf16[] parameter(1)
  ROOT %add.1726 = bf16[] add(%Arg_0.1490, %Arg_1.1427)
}

%region_824.27686 (Arg_0.27683: f32[], Arg_1.27684: f32[]) -> f32[] {
  %Arg_0.27683 = f32[] parameter(0)
  %Arg_1.27684 = f32[] parameter(1)
  ROOT %add.27685 = f32[] add(%Arg_0.27683, %Arg_1.27684)
}

%region_530.24007 (Arg_0.24004: bf16[], Arg_1.24005: bf16[]) -> bf16[] {
  %Arg_0.24004 = bf16[] parameter(0)
  %Arg_1.24005 = bf16[] parameter(1)
  ROOT %add.24006 = bf16[] add(%Arg_0.24004, %Arg_1.24005)
}

%region_530.24007.clone (Arg_0.1491: bf16[], Arg_1.1428: bf16[]) -> bf16[] {
  %Arg_0.1491 = bf16[] parameter(0)
  %Arg_1.1428 = bf16[] parameter(1)
  ROOT %add.1727 = bf16[] add(%Arg_0.1491, %Arg_1.1428)
}

%region_825.27693 (Arg_0.27690: f32[], Arg_1.27691: f32[]) -> f32[] {
  %Arg_0.27690 = f32[] parameter(0)
  %Arg_1.27691 = f32[] parameter(1)
  ROOT %add.27692 = f32[] add(%Arg_0.27690, %Arg_1.27691)
}

%add.185.clone (x.371: bf16[], y.371: bf16[]) -> bf16[] {
  %x.371 = bf16[] parameter(0)
  %y.371 = bf16[] parameter(1)
  ROOT %add.1729 = bf16[] add(%x.371, %y.371)
}

%region_826.27700 (Arg_0.27697: f32[], Arg_1.27698: f32[]) -> f32[] {
  %Arg_0.27697 = f32[] parameter(0)
  %Arg_1.27698 = f32[] parameter(1)
  ROOT %add.27699 = f32[] add(%Arg_0.27697, %Arg_1.27698)
}

%region_826.27700.clone (Arg_0.1492: f32[], Arg_1.1429: f32[]) -> f32[] {
  %Arg_0.1492 = f32[] parameter(0)
  %Arg_1.1429 = f32[] parameter(1)
  ROOT %add.1730 = f32[] add(%Arg_0.1492, %Arg_1.1429)
}

%add.186.clone (x.373: bf16[], y.373: bf16[]) -> bf16[] {
  %x.373 = bf16[] parameter(0)
  %y.373 = bf16[] parameter(1)
  ROOT %add.1732 = bf16[] add(%x.373, %y.373)
}

%region_827.27707 (Arg_0.27704: f32[], Arg_1.27705: f32[]) -> f32[] {
  %Arg_0.27704 = f32[] parameter(0)
  %Arg_1.27705 = f32[] parameter(1)
  ROOT %add.27706 = f32[] add(%Arg_0.27704, %Arg_1.27705)
}

%region_827.27707.clone (Arg_0.1493: f32[], Arg_1.1430: f32[]) -> f32[] {
  %Arg_0.1493 = f32[] parameter(0)
  %Arg_1.1430 = f32[] parameter(1)
  ROOT %add.1733 = f32[] add(%Arg_0.1493, %Arg_1.1430)
}

%add.187.clone (x.375: bf16[], y.375: bf16[]) -> bf16[] {
  %x.375 = bf16[] parameter(0)
  %y.375 = bf16[] parameter(1)
  ROOT %add.1735 = bf16[] add(%x.375, %y.375)
}

%region_828.27714 (Arg_0.27711: f32[], Arg_1.27712: f32[]) -> f32[] {
  %Arg_0.27711 = f32[] parameter(0)
  %Arg_1.27712 = f32[] parameter(1)
  ROOT %add.27713 = f32[] add(%Arg_0.27711, %Arg_1.27712)
}

%region_828.27714.clone (Arg_0.1494: f32[], Arg_1.1431: f32[]) -> f32[] {
  %Arg_0.1494 = f32[] parameter(0)
  %Arg_1.1431 = f32[] parameter(1)
  ROOT %add.1736 = f32[] add(%Arg_0.1494, %Arg_1.1431)
}

%add.188.clone (x.377: bf16[], y.377: bf16[]) -> bf16[] {
  %x.377 = bf16[] parameter(0)
  %y.377 = bf16[] parameter(1)
  ROOT %add.1738 = bf16[] add(%x.377, %y.377)
}

%region_829.27721 (Arg_0.27718: f32[], Arg_1.27719: f32[]) -> f32[] {
  %Arg_0.27718 = f32[] parameter(0)
  %Arg_1.27719 = f32[] parameter(1)
  ROOT %add.27720 = f32[] add(%Arg_0.27718, %Arg_1.27719)
}

%region_829.27721.clone (Arg_0.1495: f32[], Arg_1.1432: f32[]) -> f32[] {
  %Arg_0.1495 = f32[] parameter(0)
  %Arg_1.1432 = f32[] parameter(1)
  ROOT %add.1739 = f32[] add(%Arg_0.1495, %Arg_1.1432)
}

%add.189.clone (x.379: bf16[], y.379: bf16[]) -> bf16[] {
  %x.379 = bf16[] parameter(0)
  %y.379 = bf16[] parameter(1)
  ROOT %add.1741 = bf16[] add(%x.379, %y.379)
}

%region_830.27728 (Arg_0.27725: f32[], Arg_1.27726: f32[]) -> f32[] {
  %Arg_0.27725 = f32[] parameter(0)
  %Arg_1.27726 = f32[] parameter(1)
  ROOT %add.27727 = f32[] add(%Arg_0.27725, %Arg_1.27726)
}

%region_830.27728.clone (Arg_0.1496: f32[], Arg_1.1433: f32[]) -> f32[] {
  %Arg_0.1496 = f32[] parameter(0)
  %Arg_1.1433 = f32[] parameter(1)
  ROOT %add.1742 = f32[] add(%Arg_0.1496, %Arg_1.1433)
}

%add.190.clone (x.381: bf16[], y.381: bf16[]) -> bf16[] {
  %x.381 = bf16[] parameter(0)
  %y.381 = bf16[] parameter(1)
  ROOT %add.1744 = bf16[] add(%x.381, %y.381)
}

%region_831.27735 (Arg_0.27732: f32[], Arg_1.27733: f32[]) -> f32[] {
  %Arg_0.27732 = f32[] parameter(0)
  %Arg_1.27733 = f32[] parameter(1)
  ROOT %add.27734 = f32[] add(%Arg_0.27732, %Arg_1.27733)
}

%region_831.27735.clone (Arg_0.1497: f32[], Arg_1.1434: f32[]) -> f32[] {
  %Arg_0.1497 = f32[] parameter(0)
  %Arg_1.1434 = f32[] parameter(1)
  ROOT %add.1745 = f32[] add(%Arg_0.1497, %Arg_1.1434)
}

%add.191.clone (x.383: bf16[], y.383: bf16[]) -> bf16[] {
  %x.383 = bf16[] parameter(0)
  %y.383 = bf16[] parameter(1)
  ROOT %add.1747 = bf16[] add(%x.383, %y.383)
}

%region_832.27742 (Arg_0.27739: f32[], Arg_1.27740: f32[]) -> f32[] {
  %Arg_0.27739 = f32[] parameter(0)
  %Arg_1.27740 = f32[] parameter(1)
  ROOT %add.27741 = f32[] add(%Arg_0.27739, %Arg_1.27740)
}

%region_832.27742.clone (Arg_0.1498: f32[], Arg_1.1435: f32[]) -> f32[] {
  %Arg_0.1498 = f32[] parameter(0)
  %Arg_1.1435 = f32[] parameter(1)
  ROOT %add.1748 = f32[] add(%Arg_0.1498, %Arg_1.1435)
}

%region_513.23381 (Arg_0.23378: bf16[], Arg_1.23379: bf16[]) -> bf16[] {
  %Arg_0.23378 = bf16[] parameter(0)
  %Arg_1.23379 = bf16[] parameter(1)
  ROOT %add.23380 = bf16[] add(%Arg_0.23378, %Arg_1.23379)
}

%region_513.23381.clone (Arg_0.1499: bf16[], Arg_1.1436: bf16[]) -> bf16[] {
  %Arg_0.1499 = bf16[] parameter(0)
  %Arg_1.1436 = bf16[] parameter(1)
  ROOT %add.1749 = bf16[] add(%Arg_0.1499, %Arg_1.1436)
}

%region_833.27749 (Arg_0.27746: f32[], Arg_1.27747: f32[]) -> f32[] {
  %Arg_0.27746 = f32[] parameter(0)
  %Arg_1.27747 = f32[] parameter(1)
  ROOT %add.27748 = f32[] add(%Arg_0.27746, %Arg_1.27747)
}

%region_517.23515 (Arg_0.23512: bf16[], Arg_1.23513: bf16[]) -> bf16[] {
  %Arg_0.23512 = bf16[] parameter(0)
  %Arg_1.23513 = bf16[] parameter(1)
  ROOT %add.23514 = bf16[] add(%Arg_0.23512, %Arg_1.23513)
}

%region_517.23515.clone (Arg_0.1500: bf16[], Arg_1.1437: bf16[]) -> bf16[] {
  %Arg_0.1500 = bf16[] parameter(0)
  %Arg_1.1437 = bf16[] parameter(1)
  ROOT %add.1750 = bf16[] add(%Arg_0.1500, %Arg_1.1437)
}

%region_834.27756 (Arg_0.27753: f32[], Arg_1.27754: f32[]) -> f32[] {
  %Arg_0.27753 = f32[] parameter(0)
  %Arg_1.27754 = f32[] parameter(1)
  ROOT %add.27755 = f32[] add(%Arg_0.27753, %Arg_1.27754)
}

%add.192.clone (x.385: bf16[], y.385: bf16[]) -> bf16[] {
  %x.385 = bf16[] parameter(0)
  %y.385 = bf16[] parameter(1)
  ROOT %add.1752 = bf16[] add(%x.385, %y.385)
}

%region_835.27763 (Arg_0.27760: f32[], Arg_1.27761: f32[]) -> f32[] {
  %Arg_0.27760 = f32[] parameter(0)
  %Arg_1.27761 = f32[] parameter(1)
  ROOT %add.27762 = f32[] add(%Arg_0.27760, %Arg_1.27761)
}

%region_835.27763.clone (Arg_0.1501: f32[], Arg_1.1438: f32[]) -> f32[] {
  %Arg_0.1501 = f32[] parameter(0)
  %Arg_1.1438 = f32[] parameter(1)
  ROOT %add.1753 = f32[] add(%Arg_0.1501, %Arg_1.1438)
}

%add.193.clone (x.387: bf16[], y.387: bf16[]) -> bf16[] {
  %x.387 = bf16[] parameter(0)
  %y.387 = bf16[] parameter(1)
  ROOT %add.1755 = bf16[] add(%x.387, %y.387)
}

%region_836.27770 (Arg_0.27767: f32[], Arg_1.27768: f32[]) -> f32[] {
  %Arg_0.27767 = f32[] parameter(0)
  %Arg_1.27768 = f32[] parameter(1)
  ROOT %add.27769 = f32[] add(%Arg_0.27767, %Arg_1.27768)
}

%region_836.27770.clone (Arg_0.1502: f32[], Arg_1.1439: f32[]) -> f32[] {
  %Arg_0.1502 = f32[] parameter(0)
  %Arg_1.1439 = f32[] parameter(1)
  ROOT %add.1756 = f32[] add(%Arg_0.1502, %Arg_1.1439)
}

%add.194.clone (x.389: bf16[], y.389: bf16[]) -> bf16[] {
  %x.389 = bf16[] parameter(0)
  %y.389 = bf16[] parameter(1)
  ROOT %add.1758 = bf16[] add(%x.389, %y.389)
}

%region_837.27777 (Arg_0.27774: f32[], Arg_1.27775: f32[]) -> f32[] {
  %Arg_0.27774 = f32[] parameter(0)
  %Arg_1.27775 = f32[] parameter(1)
  ROOT %add.27776 = f32[] add(%Arg_0.27774, %Arg_1.27775)
}

%region_837.27777.clone (Arg_0.1503: f32[], Arg_1.1440: f32[]) -> f32[] {
  %Arg_0.1503 = f32[] parameter(0)
  %Arg_1.1440 = f32[] parameter(1)
  ROOT %add.1759 = f32[] add(%Arg_0.1503, %Arg_1.1440)
}

%add.195.clone (x.391: bf16[], y.391: bf16[]) -> bf16[] {
  %x.391 = bf16[] parameter(0)
  %y.391 = bf16[] parameter(1)
  ROOT %add.1762 = bf16[] add(%x.391, %y.391)
}

%region_838.27784 (Arg_0.27781: f32[], Arg_1.27782: f32[]) -> f32[] {
  %Arg_0.27781 = f32[] parameter(0)
  %Arg_1.27782 = f32[] parameter(1)
  ROOT %add.27783 = f32[] add(%Arg_0.27781, %Arg_1.27782)
}

%region_838.27784.clone (Arg_0.1504: f32[], Arg_1.1441: f32[]) -> f32[] {
  %Arg_0.1504 = f32[] parameter(0)
  %Arg_1.1441 = f32[] parameter(1)
  ROOT %add.1763 = f32[] add(%Arg_0.1504, %Arg_1.1441)
}

%add.196.clone (x.393: bf16[], y.393: bf16[]) -> bf16[] {
  %x.393 = bf16[] parameter(0)
  %y.393 = bf16[] parameter(1)
  ROOT %add.1765 = bf16[] add(%x.393, %y.393)
}

%region_839.27791 (Arg_0.27788: f32[], Arg_1.27789: f32[]) -> f32[] {
  %Arg_0.27788 = f32[] parameter(0)
  %Arg_1.27789 = f32[] parameter(1)
  ROOT %add.27790 = f32[] add(%Arg_0.27788, %Arg_1.27789)
}

%region_839.27791.clone (Arg_0.1505: f32[], Arg_1.1442: f32[]) -> f32[] {
  %Arg_0.1505 = f32[] parameter(0)
  %Arg_1.1442 = f32[] parameter(1)
  ROOT %add.1766 = f32[] add(%Arg_0.1505, %Arg_1.1442)
}

%add.197.clone (x.395: bf16[], y.395: bf16[]) -> bf16[] {
  %x.395 = bf16[] parameter(0)
  %y.395 = bf16[] parameter(1)
  ROOT %add.1768 = bf16[] add(%x.395, %y.395)
}

%region_840.27798 (Arg_0.27795: f32[], Arg_1.27796: f32[]) -> f32[] {
  %Arg_0.27795 = f32[] parameter(0)
  %Arg_1.27796 = f32[] parameter(1)
  ROOT %add.27797 = f32[] add(%Arg_0.27795, %Arg_1.27796)
}

%region_840.27798.clone (Arg_0.1506: f32[], Arg_1.1443: f32[]) -> f32[] {
  %Arg_0.1506 = f32[] parameter(0)
  %Arg_1.1443 = f32[] parameter(1)
  ROOT %add.1769 = f32[] add(%Arg_0.1506, %Arg_1.1443)
}

%add.198.clone (x.397: bf16[], y.397: bf16[]) -> bf16[] {
  %x.397 = bf16[] parameter(0)
  %y.397 = bf16[] parameter(1)
  ROOT %add.1771 = bf16[] add(%x.397, %y.397)
}

%region_841.27805 (Arg_0.27802: f32[], Arg_1.27803: f32[]) -> f32[] {
  %Arg_0.27802 = f32[] parameter(0)
  %Arg_1.27803 = f32[] parameter(1)
  ROOT %add.27804 = f32[] add(%Arg_0.27802, %Arg_1.27803)
}

%region_841.27805.clone (Arg_0.1507: f32[], Arg_1.1444: f32[]) -> f32[] {
  %Arg_0.1507 = f32[] parameter(0)
  %Arg_1.1444 = f32[] parameter(1)
  ROOT %add.1772 = f32[] add(%Arg_0.1507, %Arg_1.1444)
}

%region_500.22889 (Arg_0.22886: bf16[], Arg_1.22887: bf16[]) -> bf16[] {
  %Arg_0.22886 = bf16[] parameter(0)
  %Arg_1.22887 = bf16[] parameter(1)
  ROOT %add.22888 = bf16[] add(%Arg_0.22886, %Arg_1.22887)
}

%region_500.22889.clone (Arg_0.1508: bf16[], Arg_1.1445: bf16[]) -> bf16[] {
  %Arg_0.1508 = bf16[] parameter(0)
  %Arg_1.1445 = bf16[] parameter(1)
  ROOT %add.1773 = bf16[] add(%Arg_0.1508, %Arg_1.1445)
}

%region_842.27812 (Arg_0.27809: f32[], Arg_1.27810: f32[]) -> f32[] {
  %Arg_0.27809 = f32[] parameter(0)
  %Arg_1.27810 = f32[] parameter(1)
  ROOT %add.27811 = f32[] add(%Arg_0.27809, %Arg_1.27810)
}

%region_504.23023 (Arg_0.23020: bf16[], Arg_1.23021: bf16[]) -> bf16[] {
  %Arg_0.23020 = bf16[] parameter(0)
  %Arg_1.23021 = bf16[] parameter(1)
  ROOT %add.23022 = bf16[] add(%Arg_0.23020, %Arg_1.23021)
}

%region_504.23023.clone (Arg_0.1509: bf16[], Arg_1.1446: bf16[]) -> bf16[] {
  %Arg_0.1509 = bf16[] parameter(0)
  %Arg_1.1446 = bf16[] parameter(1)
  ROOT %add.1774 = bf16[] add(%Arg_0.1509, %Arg_1.1446)
}

%region_843.27819 (Arg_0.27816: f32[], Arg_1.27817: f32[]) -> f32[] {
  %Arg_0.27816 = f32[] parameter(0)
  %Arg_1.27817 = f32[] parameter(1)
  ROOT %add.27818 = f32[] add(%Arg_0.27816, %Arg_1.27817)
}

%add.199.clone (x.399: bf16[], y.399: bf16[]) -> bf16[] {
  %x.399 = bf16[] parameter(0)
  %y.399 = bf16[] parameter(1)
  ROOT %add.1776 = bf16[] add(%x.399, %y.399)
}

%region_844.27826 (Arg_0.27823: f32[], Arg_1.27824: f32[]) -> f32[] {
  %Arg_0.27823 = f32[] parameter(0)
  %Arg_1.27824 = f32[] parameter(1)
  ROOT %add.27825 = f32[] add(%Arg_0.27823, %Arg_1.27824)
}

%region_844.27826.clone (Arg_0.1510: f32[], Arg_1.1447: f32[]) -> f32[] {
  %Arg_0.1510 = f32[] parameter(0)
  %Arg_1.1447 = f32[] parameter(1)
  ROOT %add.1777 = f32[] add(%Arg_0.1510, %Arg_1.1447)
}

%add.200.clone (x.401: bf16[], y.401: bf16[]) -> bf16[] {
  %x.401 = bf16[] parameter(0)
  %y.401 = bf16[] parameter(1)
  ROOT %add.1779 = bf16[] add(%x.401, %y.401)
}

%region_845.27833 (Arg_0.27830: f32[], Arg_1.27831: f32[]) -> f32[] {
  %Arg_0.27830 = f32[] parameter(0)
  %Arg_1.27831 = f32[] parameter(1)
  ROOT %add.27832 = f32[] add(%Arg_0.27830, %Arg_1.27831)
}

%region_845.27833.clone (Arg_0.1511: f32[], Arg_1.1448: f32[]) -> f32[] {
  %Arg_0.1511 = f32[] parameter(0)
  %Arg_1.1448 = f32[] parameter(1)
  ROOT %add.1780 = f32[] add(%Arg_0.1511, %Arg_1.1448)
}

%add.201.clone (x.403: bf16[], y.403: bf16[]) -> bf16[] {
  %x.403 = bf16[] parameter(0)
  %y.403 = bf16[] parameter(1)
  ROOT %add.1782 = bf16[] add(%x.403, %y.403)
}

%region_846.27840 (Arg_0.27837: f32[], Arg_1.27838: f32[]) -> f32[] {
  %Arg_0.27837 = f32[] parameter(0)
  %Arg_1.27838 = f32[] parameter(1)
  ROOT %add.27839 = f32[] add(%Arg_0.27837, %Arg_1.27838)
}

%region_846.27840.clone (Arg_0.1512: f32[], Arg_1.1449: f32[]) -> f32[] {
  %Arg_0.1512 = f32[] parameter(0)
  %Arg_1.1449 = f32[] parameter(1)
  ROOT %add.1783 = f32[] add(%Arg_0.1512, %Arg_1.1449)
}

%add.202.clone (x.405: bf16[], y.405: bf16[]) -> bf16[] {
  %x.405 = bf16[] parameter(0)
  %y.405 = bf16[] parameter(1)
  ROOT %add.1785 = bf16[] add(%x.405, %y.405)
}

%region_847.27847 (Arg_0.27844: f32[], Arg_1.27845: f32[]) -> f32[] {
  %Arg_0.27844 = f32[] parameter(0)
  %Arg_1.27845 = f32[] parameter(1)
  ROOT %add.27846 = f32[] add(%Arg_0.27844, %Arg_1.27845)
}

%region_847.27847.clone (Arg_0.1513: f32[], Arg_1.1450: f32[]) -> f32[] {
  %Arg_0.1513 = f32[] parameter(0)
  %Arg_1.1450 = f32[] parameter(1)
  ROOT %add.1786 = f32[] add(%Arg_0.1513, %Arg_1.1450)
}

%add.203.clone (x.407: bf16[], y.407: bf16[]) -> bf16[] {
  %x.407 = bf16[] parameter(0)
  %y.407 = bf16[] parameter(1)
  ROOT %add.1788 = bf16[] add(%x.407, %y.407)
}

%region_848.27854 (Arg_0.27851: f32[], Arg_1.27852: f32[]) -> f32[] {
  %Arg_0.27851 = f32[] parameter(0)
  %Arg_1.27852 = f32[] parameter(1)
  ROOT %add.27853 = f32[] add(%Arg_0.27851, %Arg_1.27852)
}

%region_848.27854.clone (Arg_0.1514: f32[], Arg_1.1451: f32[]) -> f32[] {
  %Arg_0.1514 = f32[] parameter(0)
  %Arg_1.1451 = f32[] parameter(1)
  ROOT %add.1789 = f32[] add(%Arg_0.1514, %Arg_1.1451)
}

%add.204.clone (x.409: bf16[], y.409: bf16[]) -> bf16[] {
  %x.409 = bf16[] parameter(0)
  %y.409 = bf16[] parameter(1)
  ROOT %add.1791 = bf16[] add(%x.409, %y.409)
}

%region_849.27861 (Arg_0.27858: f32[], Arg_1.27859: f32[]) -> f32[] {
  %Arg_0.27858 = f32[] parameter(0)
  %Arg_1.27859 = f32[] parameter(1)
  ROOT %add.27860 = f32[] add(%Arg_0.27858, %Arg_1.27859)
}

%region_849.27861.clone (Arg_0.1515: f32[], Arg_1.1452: f32[]) -> f32[] {
  %Arg_0.1515 = f32[] parameter(0)
  %Arg_1.1452 = f32[] parameter(1)
  ROOT %add.1792 = f32[] add(%Arg_0.1515, %Arg_1.1452)
}

%add.205.clone (x.411: bf16[], y.411: bf16[]) -> bf16[] {
  %x.411 = bf16[] parameter(0)
  %y.411 = bf16[] parameter(1)
  ROOT %add.1794 = bf16[] add(%x.411, %y.411)
}

%region_850.27868 (Arg_0.27865: f32[], Arg_1.27866: f32[]) -> f32[] {
  %Arg_0.27865 = f32[] parameter(0)
  %Arg_1.27866 = f32[] parameter(1)
  ROOT %add.27867 = f32[] add(%Arg_0.27865, %Arg_1.27866)
}

%region_850.27868.clone (Arg_0.1516: f32[], Arg_1.1453: f32[]) -> f32[] {
  %Arg_0.1516 = f32[] parameter(0)
  %Arg_1.1453 = f32[] parameter(1)
  ROOT %add.1795 = f32[] add(%Arg_0.1516, %Arg_1.1453)
}

%region_487.22397 (Arg_0.22394: bf16[], Arg_1.22395: bf16[]) -> bf16[] {
  %Arg_0.22394 = bf16[] parameter(0)
  %Arg_1.22395 = bf16[] parameter(1)
  ROOT %add.22396 = bf16[] add(%Arg_0.22394, %Arg_1.22395)
}

%region_487.22397.clone (Arg_0.1517: bf16[], Arg_1.1454: bf16[]) -> bf16[] {
  %Arg_0.1517 = bf16[] parameter(0)
  %Arg_1.1454 = bf16[] parameter(1)
  ROOT %add.1796 = bf16[] add(%Arg_0.1517, %Arg_1.1454)
}

%region_851.27875 (Arg_0.27872: f32[], Arg_1.27873: f32[]) -> f32[] {
  %Arg_0.27872 = f32[] parameter(0)
  %Arg_1.27873 = f32[] parameter(1)
  ROOT %add.27874 = f32[] add(%Arg_0.27872, %Arg_1.27873)
}

%region_491.22531 (Arg_0.22528: bf16[], Arg_1.22529: bf16[]) -> bf16[] {
  %Arg_0.22528 = bf16[] parameter(0)
  %Arg_1.22529 = bf16[] parameter(1)
  ROOT %add.22530 = bf16[] add(%Arg_0.22528, %Arg_1.22529)
}

%region_491.22531.clone (Arg_0.1518: bf16[], Arg_1.1455: bf16[]) -> bf16[] {
  %Arg_0.1518 = bf16[] parameter(0)
  %Arg_1.1455 = bf16[] parameter(1)
  ROOT %add.1797 = bf16[] add(%Arg_0.1518, %Arg_1.1455)
}

%region_852.27882 (Arg_0.27879: f32[], Arg_1.27880: f32[]) -> f32[] {
  %Arg_0.27879 = f32[] parameter(0)
  %Arg_1.27880 = f32[] parameter(1)
  ROOT %add.27881 = f32[] add(%Arg_0.27879, %Arg_1.27880)
}

%add.206.clone (x.413: bf16[], y.413: bf16[]) -> bf16[] {
  %x.413 = bf16[] parameter(0)
  %y.413 = bf16[] parameter(1)
  ROOT %add.1800 = bf16[] add(%x.413, %y.413)
}

%region_853.27889 (Arg_0.27886: f32[], Arg_1.27887: f32[]) -> f32[] {
  %Arg_0.27886 = f32[] parameter(0)
  %Arg_1.27887 = f32[] parameter(1)
  ROOT %add.27888 = f32[] add(%Arg_0.27886, %Arg_1.27887)
}

%region_853.27889.clone (Arg_0.1519: f32[], Arg_1.1456: f32[]) -> f32[] {
  %Arg_0.1519 = f32[] parameter(0)
  %Arg_1.1456 = f32[] parameter(1)
  ROOT %add.1801 = f32[] add(%Arg_0.1519, %Arg_1.1456)
}

%add.207.clone (x.415: bf16[], y.415: bf16[]) -> bf16[] {
  %x.415 = bf16[] parameter(0)
  %y.415 = bf16[] parameter(1)
  ROOT %add.1803 = bf16[] add(%x.415, %y.415)
}

%region_854.27896 (Arg_0.27893: f32[], Arg_1.27894: f32[]) -> f32[] {
  %Arg_0.27893 = f32[] parameter(0)
  %Arg_1.27894 = f32[] parameter(1)
  ROOT %add.27895 = f32[] add(%Arg_0.27893, %Arg_1.27894)
}

%region_854.27896.clone (Arg_0.1520: f32[], Arg_1.1457: f32[]) -> f32[] {
  %Arg_0.1520 = f32[] parameter(0)
  %Arg_1.1457 = f32[] parameter(1)
  ROOT %add.1804 = f32[] add(%Arg_0.1520, %Arg_1.1457)
}

%add.208.clone (x.417: bf16[], y.417: bf16[]) -> bf16[] {
  %x.417 = bf16[] parameter(0)
  %y.417 = bf16[] parameter(1)
  ROOT %add.1806 = bf16[] add(%x.417, %y.417)
}

%region_855.27903 (Arg_0.27900: f32[], Arg_1.27901: f32[]) -> f32[] {
  %Arg_0.27900 = f32[] parameter(0)
  %Arg_1.27901 = f32[] parameter(1)
  ROOT %add.27902 = f32[] add(%Arg_0.27900, %Arg_1.27901)
}

%region_855.27903.clone (Arg_0.1521: f32[], Arg_1.1458: f32[]) -> f32[] {
  %Arg_0.1521 = f32[] parameter(0)
  %Arg_1.1458 = f32[] parameter(1)
  ROOT %add.1807 = f32[] add(%Arg_0.1521, %Arg_1.1458)
}

%add.209.clone (x.419: bf16[], y.419: bf16[]) -> bf16[] {
  %x.419 = bf16[] parameter(0)
  %y.419 = bf16[] parameter(1)
  ROOT %add.1809 = bf16[] add(%x.419, %y.419)
}

%region_856.27910 (Arg_0.27907: f32[], Arg_1.27908: f32[]) -> f32[] {
  %Arg_0.27907 = f32[] parameter(0)
  %Arg_1.27908 = f32[] parameter(1)
  ROOT %add.27909 = f32[] add(%Arg_0.27907, %Arg_1.27908)
}

%region_856.27910.clone (Arg_0.1522: f32[], Arg_1.1459: f32[]) -> f32[] {
  %Arg_0.1522 = f32[] parameter(0)
  %Arg_1.1459 = f32[] parameter(1)
  ROOT %add.1810 = f32[] add(%Arg_0.1522, %Arg_1.1459)
}

%add.210.clone (x.421: bf16[], y.421: bf16[]) -> bf16[] {
  %x.421 = bf16[] parameter(0)
  %y.421 = bf16[] parameter(1)
  ROOT %add.1812 = bf16[] add(%x.421, %y.421)
}

%region_857.27917 (Arg_0.27914: f32[], Arg_1.27915: f32[]) -> f32[] {
  %Arg_0.27914 = f32[] parameter(0)
  %Arg_1.27915 = f32[] parameter(1)
  ROOT %add.27916 = f32[] add(%Arg_0.27914, %Arg_1.27915)
}

%region_857.27917.clone (Arg_0.1523: f32[], Arg_1.1460: f32[]) -> f32[] {
  %Arg_0.1523 = f32[] parameter(0)
  %Arg_1.1460 = f32[] parameter(1)
  ROOT %add.1813 = f32[] add(%Arg_0.1523, %Arg_1.1460)
}

%add.211.clone (x.423: bf16[], y.423: bf16[]) -> bf16[] {
  %x.423 = bf16[] parameter(0)
  %y.423 = bf16[] parameter(1)
  ROOT %add.1815 = bf16[] add(%x.423, %y.423)
}

%region_858.27924 (Arg_0.27921: f32[], Arg_1.27922: f32[]) -> f32[] {
  %Arg_0.27921 = f32[] parameter(0)
  %Arg_1.27922 = f32[] parameter(1)
  ROOT %add.27923 = f32[] add(%Arg_0.27921, %Arg_1.27922)
}

%region_858.27924.clone (Arg_0.1524: f32[], Arg_1.1461: f32[]) -> f32[] {
  %Arg_0.1524 = f32[] parameter(0)
  %Arg_1.1461 = f32[] parameter(1)
  ROOT %add.1816 = f32[] add(%Arg_0.1524, %Arg_1.1461)
}

%add.212.clone (x.425: bf16[], y.425: bf16[]) -> bf16[] {
  %x.425 = bf16[] parameter(0)
  %y.425 = bf16[] parameter(1)
  ROOT %add.1818 = bf16[] add(%x.425, %y.425)
}

%region_859.27931 (Arg_0.27928: f32[], Arg_1.27929: f32[]) -> f32[] {
  %Arg_0.27928 = f32[] parameter(0)
  %Arg_1.27929 = f32[] parameter(1)
  ROOT %add.27930 = f32[] add(%Arg_0.27928, %Arg_1.27929)
}

%region_859.27931.clone (Arg_0.1525: f32[], Arg_1.1462: f32[]) -> f32[] {
  %Arg_0.1525 = f32[] parameter(0)
  %Arg_1.1462 = f32[] parameter(1)
  ROOT %add.1819 = f32[] add(%Arg_0.1525, %Arg_1.1462)
}

%region_474.21905 (Arg_0.21902: bf16[], Arg_1.21903: bf16[]) -> bf16[] {
  %Arg_0.21902 = bf16[] parameter(0)
  %Arg_1.21903 = bf16[] parameter(1)
  ROOT %add.21904 = bf16[] add(%Arg_0.21902, %Arg_1.21903)
}

%region_474.21905.clone (Arg_0.1526: bf16[], Arg_1.1463: bf16[]) -> bf16[] {
  %Arg_0.1526 = bf16[] parameter(0)
  %Arg_1.1463 = bf16[] parameter(1)
  ROOT %add.1820 = bf16[] add(%Arg_0.1526, %Arg_1.1463)
}

%region_860.27938 (Arg_0.27935: f32[], Arg_1.27936: f32[]) -> f32[] {
  %Arg_0.27935 = f32[] parameter(0)
  %Arg_1.27936 = f32[] parameter(1)
  ROOT %add.27937 = f32[] add(%Arg_0.27935, %Arg_1.27936)
}

%region_478.22039 (Arg_0.22036: bf16[], Arg_1.22037: bf16[]) -> bf16[] {
  %Arg_0.22036 = bf16[] parameter(0)
  %Arg_1.22037 = bf16[] parameter(1)
  ROOT %add.22038 = bf16[] add(%Arg_0.22036, %Arg_1.22037)
}

%region_478.22039.clone (Arg_0.1527: bf16[], Arg_1.1464: bf16[]) -> bf16[] {
  %Arg_0.1527 = bf16[] parameter(0)
  %Arg_1.1464 = bf16[] parameter(1)
  ROOT %add.1821 = bf16[] add(%Arg_0.1527, %Arg_1.1464)
}

%region_861.27945 (Arg_0.27942: f32[], Arg_1.27943: f32[]) -> f32[] {
  %Arg_0.27942 = f32[] parameter(0)
  %Arg_1.27943 = f32[] parameter(1)
  ROOT %add.27944 = f32[] add(%Arg_0.27942, %Arg_1.27943)
}

%add.213.clone (x.427: bf16[], y.427: bf16[]) -> bf16[] {
  %x.427 = bf16[] parameter(0)
  %y.427 = bf16[] parameter(1)
  ROOT %add.1823 = bf16[] add(%x.427, %y.427)
}

%region_862.27952 (Arg_0.27949: f32[], Arg_1.27950: f32[]) -> f32[] {
  %Arg_0.27949 = f32[] parameter(0)
  %Arg_1.27950 = f32[] parameter(1)
  ROOT %add.27951 = f32[] add(%Arg_0.27949, %Arg_1.27950)
}

%region_862.27952.clone (Arg_0.1528: f32[], Arg_1.1465: f32[]) -> f32[] {
  %Arg_0.1528 = f32[] parameter(0)
  %Arg_1.1465 = f32[] parameter(1)
  ROOT %add.1824 = f32[] add(%Arg_0.1528, %Arg_1.1465)
}

%add.214.clone (x.429: bf16[], y.429: bf16[]) -> bf16[] {
  %x.429 = bf16[] parameter(0)
  %y.429 = bf16[] parameter(1)
  ROOT %add.1826 = bf16[] add(%x.429, %y.429)
}

%region_863.27959 (Arg_0.27956: f32[], Arg_1.27957: f32[]) -> f32[] {
  %Arg_0.27956 = f32[] parameter(0)
  %Arg_1.27957 = f32[] parameter(1)
  ROOT %add.27958 = f32[] add(%Arg_0.27956, %Arg_1.27957)
}

%region_863.27959.clone (Arg_0.1529: f32[], Arg_1.1466: f32[]) -> f32[] {
  %Arg_0.1529 = f32[] parameter(0)
  %Arg_1.1466 = f32[] parameter(1)
  ROOT %add.1827 = f32[] add(%Arg_0.1529, %Arg_1.1466)
}

%add.215.clone (x.431: bf16[], y.431: bf16[]) -> bf16[] {
  %x.431 = bf16[] parameter(0)
  %y.431 = bf16[] parameter(1)
  ROOT %add.1829 = bf16[] add(%x.431, %y.431)
}

%region_864.27966 (Arg_0.27963: f32[], Arg_1.27964: f32[]) -> f32[] {
  %Arg_0.27963 = f32[] parameter(0)
  %Arg_1.27964 = f32[] parameter(1)
  ROOT %add.27965 = f32[] add(%Arg_0.27963, %Arg_1.27964)
}

%region_864.27966.clone (Arg_0.1530: f32[], Arg_1.1467: f32[]) -> f32[] {
  %Arg_0.1530 = f32[] parameter(0)
  %Arg_1.1467 = f32[] parameter(1)
  ROOT %add.1830 = f32[] add(%Arg_0.1530, %Arg_1.1467)
}

%add.216.clone (x.433: bf16[], y.433: bf16[]) -> bf16[] {
  %x.433 = bf16[] parameter(0)
  %y.433 = bf16[] parameter(1)
  ROOT %add.1832 = bf16[] add(%x.433, %y.433)
}

%region_865.27973 (Arg_0.27970: f32[], Arg_1.27971: f32[]) -> f32[] {
  %Arg_0.27970 = f32[] parameter(0)
  %Arg_1.27971 = f32[] parameter(1)
  ROOT %add.27972 = f32[] add(%Arg_0.27970, %Arg_1.27971)
}

%region_865.27973.clone (Arg_0.1531: f32[], Arg_1.1468: f32[]) -> f32[] {
  %Arg_0.1531 = f32[] parameter(0)
  %Arg_1.1468 = f32[] parameter(1)
  ROOT %add.1833 = f32[] add(%Arg_0.1531, %Arg_1.1468)
}

%add.217.clone (x.435: bf16[], y.435: bf16[]) -> bf16[] {
  %x.435 = bf16[] parameter(0)
  %y.435 = bf16[] parameter(1)
  ROOT %add.1835 = bf16[] add(%x.435, %y.435)
}

%region_866.27980 (Arg_0.27977: f32[], Arg_1.27978: f32[]) -> f32[] {
  %Arg_0.27977 = f32[] parameter(0)
  %Arg_1.27978 = f32[] parameter(1)
  ROOT %add.27979 = f32[] add(%Arg_0.27977, %Arg_1.27978)
}

%region_866.27980.clone (Arg_0.1532: f32[], Arg_1.1469: f32[]) -> f32[] {
  %Arg_0.1532 = f32[] parameter(0)
  %Arg_1.1469 = f32[] parameter(1)
  ROOT %add.1836 = f32[] add(%Arg_0.1532, %Arg_1.1469)
}

%add.218.clone (x.437: bf16[], y.437: bf16[]) -> bf16[] {
  %x.437 = bf16[] parameter(0)
  %y.437 = bf16[] parameter(1)
  ROOT %add.1839 = bf16[] add(%x.437, %y.437)
}

%region_867.27987 (Arg_0.27984: f32[], Arg_1.27985: f32[]) -> f32[] {
  %Arg_0.27984 = f32[] parameter(0)
  %Arg_1.27985 = f32[] parameter(1)
  ROOT %add.27986 = f32[] add(%Arg_0.27984, %Arg_1.27985)
}

%region_867.27987.clone (Arg_0.1533: f32[], Arg_1.1470: f32[]) -> f32[] {
  %Arg_0.1533 = f32[] parameter(0)
  %Arg_1.1470 = f32[] parameter(1)
  ROOT %add.1840 = f32[] add(%Arg_0.1533, %Arg_1.1470)
}

%add.219.clone (x.439: bf16[], y.439: bf16[]) -> bf16[] {
  %x.439 = bf16[] parameter(0)
  %y.439 = bf16[] parameter(1)
  ROOT %add.1842 = bf16[] add(%x.439, %y.439)
}

%region_868.27994 (Arg_0.27991: f32[], Arg_1.27992: f32[]) -> f32[] {
  %Arg_0.27991 = f32[] parameter(0)
  %Arg_1.27992 = f32[] parameter(1)
  ROOT %add.27993 = f32[] add(%Arg_0.27991, %Arg_1.27992)
}

%region_868.27994.clone (Arg_0.1534: f32[], Arg_1.1471: f32[]) -> f32[] {
  %Arg_0.1534 = f32[] parameter(0)
  %Arg_1.1471 = f32[] parameter(1)
  ROOT %add.1843 = f32[] add(%Arg_0.1534, %Arg_1.1471)
}

%region_461.21413 (Arg_0.21410: bf16[], Arg_1.21411: bf16[]) -> bf16[] {
  %Arg_0.21410 = bf16[] parameter(0)
  %Arg_1.21411 = bf16[] parameter(1)
  ROOT %add.21412 = bf16[] add(%Arg_0.21410, %Arg_1.21411)
}

%region_461.21413.clone (Arg_0.1535: bf16[], Arg_1.1472: bf16[]) -> bf16[] {
  %Arg_0.1535 = bf16[] parameter(0)
  %Arg_1.1472 = bf16[] parameter(1)
  ROOT %add.1844 = bf16[] add(%Arg_0.1535, %Arg_1.1472)
}

%region_869.28001 (Arg_0.27998: f32[], Arg_1.27999: f32[]) -> f32[] {
  %Arg_0.27998 = f32[] parameter(0)
  %Arg_1.27999 = f32[] parameter(1)
  ROOT %add.28000 = f32[] add(%Arg_0.27998, %Arg_1.27999)
}

%region_465.21547 (Arg_0.21544: bf16[], Arg_1.21545: bf16[]) -> bf16[] {
  %Arg_0.21544 = bf16[] parameter(0)
  %Arg_1.21545 = bf16[] parameter(1)
  ROOT %add.21546 = bf16[] add(%Arg_0.21544, %Arg_1.21545)
}

%region_465.21547.clone (Arg_0.1536: bf16[], Arg_1.1473: bf16[]) -> bf16[] {
  %Arg_0.1536 = bf16[] parameter(0)
  %Arg_1.1473 = bf16[] parameter(1)
  ROOT %add.1845 = bf16[] add(%Arg_0.1536, %Arg_1.1473)
}

%region_870.28008 (Arg_0.28005: f32[], Arg_1.28006: f32[]) -> f32[] {
  %Arg_0.28005 = f32[] parameter(0)
  %Arg_1.28006 = f32[] parameter(1)
  ROOT %add.28007 = f32[] add(%Arg_0.28005, %Arg_1.28006)
}

%add.220.clone (x.441: bf16[], y.441: bf16[]) -> bf16[] {
  %x.441 = bf16[] parameter(0)
  %y.441 = bf16[] parameter(1)
  ROOT %add.1847 = bf16[] add(%x.441, %y.441)
}

%region_871.28015 (Arg_0.28012: f32[], Arg_1.28013: f32[]) -> f32[] {
  %Arg_0.28012 = f32[] parameter(0)
  %Arg_1.28013 = f32[] parameter(1)
  ROOT %add.28014 = f32[] add(%Arg_0.28012, %Arg_1.28013)
}

%region_871.28015.clone (Arg_0.1537: f32[], Arg_1.1474: f32[]) -> f32[] {
  %Arg_0.1537 = f32[] parameter(0)
  %Arg_1.1474 = f32[] parameter(1)
  ROOT %add.1848 = f32[] add(%Arg_0.1537, %Arg_1.1474)
}

%add.221.clone (x.443: bf16[], y.443: bf16[]) -> bf16[] {
  %x.443 = bf16[] parameter(0)
  %y.443 = bf16[] parameter(1)
  ROOT %add.1850 = bf16[] add(%x.443, %y.443)
}

%region_872.28022 (Arg_0.28019: f32[], Arg_1.28020: f32[]) -> f32[] {
  %Arg_0.28019 = f32[] parameter(0)
  %Arg_1.28020 = f32[] parameter(1)
  ROOT %add.28021 = f32[] add(%Arg_0.28019, %Arg_1.28020)
}

%region_872.28022.clone (Arg_0.1538: f32[], Arg_1.1475: f32[]) -> f32[] {
  %Arg_0.1538 = f32[] parameter(0)
  %Arg_1.1475 = f32[] parameter(1)
  ROOT %add.1851 = f32[] add(%Arg_0.1538, %Arg_1.1475)
}

%add.222.clone (x.445: bf16[], y.445: bf16[]) -> bf16[] {
  %x.445 = bf16[] parameter(0)
  %y.445 = bf16[] parameter(1)
  ROOT %add.1853 = bf16[] add(%x.445, %y.445)
}

%region_873.28029 (Arg_0.28026: f32[], Arg_1.28027: f32[]) -> f32[] {
  %Arg_0.28026 = f32[] parameter(0)
  %Arg_1.28027 = f32[] parameter(1)
  ROOT %add.28028 = f32[] add(%Arg_0.28026, %Arg_1.28027)
}

%region_873.28029.clone (Arg_0.1539: f32[], Arg_1.1476: f32[]) -> f32[] {
  %Arg_0.1539 = f32[] parameter(0)
  %Arg_1.1476 = f32[] parameter(1)
  ROOT %add.1854 = f32[] add(%Arg_0.1539, %Arg_1.1476)
}

%add.223.clone (x.447: bf16[], y.447: bf16[]) -> bf16[] {
  %x.447 = bf16[] parameter(0)
  %y.447 = bf16[] parameter(1)
  ROOT %add.1856 = bf16[] add(%x.447, %y.447)
}

%region_874.28036 (Arg_0.28033: f32[], Arg_1.28034: f32[]) -> f32[] {
  %Arg_0.28033 = f32[] parameter(0)
  %Arg_1.28034 = f32[] parameter(1)
  ROOT %add.28035 = f32[] add(%Arg_0.28033, %Arg_1.28034)
}

%region_874.28036.clone (Arg_0.1540: f32[], Arg_1.1477: f32[]) -> f32[] {
  %Arg_0.1540 = f32[] parameter(0)
  %Arg_1.1477 = f32[] parameter(1)
  ROOT %add.1857 = f32[] add(%Arg_0.1540, %Arg_1.1477)
}

%add.224.clone (x.449: bf16[], y.449: bf16[]) -> bf16[] {
  %x.449 = bf16[] parameter(0)
  %y.449 = bf16[] parameter(1)
  ROOT %add.1859 = bf16[] add(%x.449, %y.449)
}

%region_875.28043 (Arg_0.28040: f32[], Arg_1.28041: f32[]) -> f32[] {
  %Arg_0.28040 = f32[] parameter(0)
  %Arg_1.28041 = f32[] parameter(1)
  ROOT %add.28042 = f32[] add(%Arg_0.28040, %Arg_1.28041)
}

%region_875.28043.clone (Arg_0.1541: f32[], Arg_1.1478: f32[]) -> f32[] {
  %Arg_0.1541 = f32[] parameter(0)
  %Arg_1.1478 = f32[] parameter(1)
  ROOT %add.1860 = f32[] add(%Arg_0.1541, %Arg_1.1478)
}

%region_584.25993 (Arg_0.25990: f32[], Arg_1.25991: f32[]) -> f32[] {
  %Arg_0.25990 = f32[] parameter(0)
  %Arg_1.25991 = f32[] parameter(1)
  ROOT %add.25992 = f32[] add(%Arg_0.25990, %Arg_1.25991)
}

%add.225.clone (x.451: bf16[], y.451: bf16[]) -> bf16[] {
  %x.451 = bf16[] parameter(0)
  %y.451 = bf16[] parameter(1)
  ROOT %add.1862 = bf16[] add(%x.451, %y.451)
}

%region_876.28050 (Arg_0.28047: f32[], Arg_1.28048: f32[]) -> f32[] {
  %Arg_0.28047 = f32[] parameter(0)
  %Arg_1.28048 = f32[] parameter(1)
  ROOT %add.28049 = f32[] add(%Arg_0.28047, %Arg_1.28048)
}

%region_876.28050.clone (Arg_0.1542: f32[], Arg_1.1479: f32[]) -> f32[] {
  %Arg_0.1542 = f32[] parameter(0)
  %Arg_1.1479 = f32[] parameter(1)
  ROOT %add.1863 = f32[] add(%Arg_0.1542, %Arg_1.1479)
}

%region_877.34802 (Arg_0.34799: f32[], Arg_1.34800: f32[]) -> f32[] {
  %Arg_0.34799 = f32[] parameter(0)
  %Arg_1.34800 = f32[] parameter(1)
  ROOT %add.34801 = f32[] add(%Arg_0.34799, %Arg_1.34800)
}

%region_878.34808 (Arg_0.34805: f32[], Arg_1.34806: f32[]) -> f32[] {
  %Arg_0.34805 = f32[] parameter(0)
  %Arg_1.34806 = f32[] parameter(1)
  ROOT %add.34807 = f32[] add(%Arg_0.34805, %Arg_1.34806)
}

%region_878.34808.clone (Arg_0.1543: f32[], Arg_1.1480: f32[]) -> f32[] {
  %Arg_0.1543 = f32[] parameter(0)
  %Arg_1.1480 = f32[] parameter(1)
  ROOT %add.1864 = f32[] add(%Arg_0.1543, %Arg_1.1480)
}

%region_879.34815 (Arg_0.34812: f32[], Arg_1.34813: f32[]) -> f32[] {
  %Arg_0.34812 = f32[] parameter(0)
  %Arg_1.34813 = f32[] parameter(1)
  ROOT %add.34814 = f32[] add(%Arg_0.34812, %Arg_1.34813)
}

%region_879.34815.clone (Arg_0.1544: f32[], Arg_1.1481: f32[]) -> f32[] {
  %Arg_0.1544 = f32[] parameter(0)
  %Arg_1.1481 = f32[] parameter(1)
  ROOT %add.1865 = f32[] add(%Arg_0.1544, %Arg_1.1481)
}

%region_880.34822 (Arg_0.34819: f32[], Arg_1.34820: f32[]) -> f32[] {
  %Arg_0.34819 = f32[] parameter(0)
  %Arg_1.34820 = f32[] parameter(1)
  ROOT %add.34821 = f32[] add(%Arg_0.34819, %Arg_1.34820)
}

%region_880.34822.clone (Arg_0.1545: f32[], Arg_1.1482: f32[]) -> f32[] {
  %Arg_0.1545 = f32[] parameter(0)
  %Arg_1.1482 = f32[] parameter(1)
  ROOT %add.1866 = f32[] add(%Arg_0.1545, %Arg_1.1482)
}

%region_881.34829 (Arg_0.34826: f32[], Arg_1.34827: f32[]) -> f32[] {
  %Arg_0.34826 = f32[] parameter(0)
  %Arg_1.34827 = f32[] parameter(1)
  ROOT %add.34828 = f32[] add(%Arg_0.34826, %Arg_1.34827)
}

%region_882.34836 (Arg_0.34833: f32[], Arg_1.34834: f32[]) -> f32[] {
  %Arg_0.34833 = f32[] parameter(0)
  %Arg_1.34834 = f32[] parameter(1)
  ROOT %add.34835 = f32[] add(%Arg_0.34833, %Arg_1.34834)
}

%region_883.34843 (Arg_0.34840: f32[], Arg_1.34841: f32[]) -> f32[] {
  %Arg_0.34840 = f32[] parameter(0)
  %Arg_1.34841 = f32[] parameter(1)
  ROOT %add.34842 = f32[] add(%Arg_0.34840, %Arg_1.34841)
}

%region_883.34843.clone (Arg_0.1546: f32[], Arg_1.1483: f32[]) -> f32[] {
  %Arg_0.1546 = f32[] parameter(0)
  %Arg_1.1483 = f32[] parameter(1)
  ROOT %add.1867 = f32[] add(%Arg_0.1546, %Arg_1.1483)
}

%region_884.34850 (Arg_0.34847: f32[], Arg_1.34848: f32[]) -> f32[] {
  %Arg_0.34847 = f32[] parameter(0)
  %Arg_1.34848 = f32[] parameter(1)
  ROOT %add.34849 = f32[] add(%Arg_0.34847, %Arg_1.34848)
}

%region_884.34850.clone (Arg_0.1547: f32[], Arg_1.1484: f32[]) -> f32[] {
  %Arg_0.1547 = f32[] parameter(0)
  %Arg_1.1484 = f32[] parameter(1)
  ROOT %add.1869 = f32[] add(%Arg_0.1547, %Arg_1.1484)
}

%region_885.34857 (Arg_0.34854: f32[], Arg_1.34855: f32[]) -> f32[] {
  %Arg_0.34854 = f32[] parameter(0)
  %Arg_1.34855 = f32[] parameter(1)
  ROOT %add.34856 = f32[] add(%Arg_0.34854, %Arg_1.34855)
}

%region_885.34857.clone (Arg_0.1548: f32[], Arg_1.1485: f32[]) -> f32[] {
  %Arg_0.1548 = f32[] parameter(0)
  %Arg_1.1485 = f32[] parameter(1)
  ROOT %add.1870 = f32[] add(%Arg_0.1548, %Arg_1.1485)
}

%region_886.34864 (Arg_0.34861: f32[], Arg_1.34862: f32[]) -> f32[] {
  %Arg_0.34861 = f32[] parameter(0)
  %Arg_1.34862 = f32[] parameter(1)
  ROOT %add.34863 = f32[] add(%Arg_0.34861, %Arg_1.34862)
}

%region_886.34864.clone (Arg_0.1549: f32[], Arg_1.1486: f32[]) -> f32[] {
  %Arg_0.1549 = f32[] parameter(0)
  %Arg_1.1486 = f32[] parameter(1)
  ROOT %add.1871 = f32[] add(%Arg_0.1549, %Arg_1.1486)
}

%region_887.34871 (Arg_0.34868: f32[], Arg_1.34869: f32[]) -> f32[] {
  %Arg_0.34868 = f32[] parameter(0)
  %Arg_1.34869 = f32[] parameter(1)
  ROOT %add.34870 = f32[] add(%Arg_0.34868, %Arg_1.34869)
}

%region_887.34871.clone (Arg_0.1550: f32[], Arg_1.1487: f32[]) -> f32[] {
  %Arg_0.1550 = f32[] parameter(0)
  %Arg_1.1487 = f32[] parameter(1)
  ROOT %add.1872 = f32[] add(%Arg_0.1550, %Arg_1.1487)
}

%region_888.34878 (Arg_0.34875: f32[], Arg_1.34876: f32[]) -> f32[] {
  %Arg_0.34875 = f32[] parameter(0)
  %Arg_1.34876 = f32[] parameter(1)
  ROOT %add.34877 = f32[] add(%Arg_0.34875, %Arg_1.34876)
}

%region_888.34878.clone (Arg_0.1551: f32[], Arg_1.1488: f32[]) -> f32[] {
  %Arg_0.1551 = f32[] parameter(0)
  %Arg_1.1488 = f32[] parameter(1)
  ROOT %add.1873 = f32[] add(%Arg_0.1551, %Arg_1.1488)
}

%region_889.34885 (Arg_0.34882: f32[], Arg_1.34883: f32[]) -> f32[] {
  %Arg_0.34882 = f32[] parameter(0)
  %Arg_1.34883 = f32[] parameter(1)
  ROOT %add.34884 = f32[] add(%Arg_0.34882, %Arg_1.34883)
}

%region_889.34885.clone (Arg_0.1552: f32[], Arg_1.1489: f32[]) -> f32[] {
  %Arg_0.1552 = f32[] parameter(0)
  %Arg_1.1489 = f32[] parameter(1)
  ROOT %add.1874 = f32[] add(%Arg_0.1552, %Arg_1.1489)
}

%region_890.34892 (Arg_0.34889: f32[], Arg_1.34890: f32[]) -> f32[] {
  %Arg_0.34889 = f32[] parameter(0)
  %Arg_1.34890 = f32[] parameter(1)
  ROOT %add.34891 = f32[] add(%Arg_0.34889, %Arg_1.34890)
}

%region_891.34899 (Arg_0.34896: f32[], Arg_1.34897: f32[]) -> f32[] {
  %Arg_0.34896 = f32[] parameter(0)
  %Arg_1.34897 = f32[] parameter(1)
  ROOT %add.34898 = f32[] add(%Arg_0.34896, %Arg_1.34897)
}

%region_892.34906 (Arg_0.34903: f32[], Arg_1.34904: f32[]) -> f32[] {
  %Arg_0.34903 = f32[] parameter(0)
  %Arg_1.34904 = f32[] parameter(1)
  ROOT %add.34905 = f32[] add(%Arg_0.34903, %Arg_1.34904)
}

%region_892.34906.clone (Arg_0.1553: f32[], Arg_1.1490: f32[]) -> f32[] {
  %Arg_0.1553 = f32[] parameter(0)
  %Arg_1.1490 = f32[] parameter(1)
  ROOT %add.1875 = f32[] add(%Arg_0.1553, %Arg_1.1490)
}

%region_893.34913 (Arg_0.34910: f32[], Arg_1.34911: f32[]) -> f32[] {
  %Arg_0.34910 = f32[] parameter(0)
  %Arg_1.34911 = f32[] parameter(1)
  ROOT %add.34912 = f32[] add(%Arg_0.34910, %Arg_1.34911)
}

%region_893.34913.clone (Arg_0.1554: f32[], Arg_1.1491: f32[]) -> f32[] {
  %Arg_0.1554 = f32[] parameter(0)
  %Arg_1.1491 = f32[] parameter(1)
  ROOT %add.1877 = f32[] add(%Arg_0.1554, %Arg_1.1491)
}

%region_894.34920 (Arg_0.34917: f32[], Arg_1.34918: f32[]) -> f32[] {
  %Arg_0.34917 = f32[] parameter(0)
  %Arg_1.34918 = f32[] parameter(1)
  ROOT %add.34919 = f32[] add(%Arg_0.34917, %Arg_1.34918)
}

%region_894.34920.clone (Arg_0.1555: f32[], Arg_1.1492: f32[]) -> f32[] {
  %Arg_0.1555 = f32[] parameter(0)
  %Arg_1.1492 = f32[] parameter(1)
  ROOT %add.1878 = f32[] add(%Arg_0.1555, %Arg_1.1492)
}

%region_895.34927 (Arg_0.34924: f32[], Arg_1.34925: f32[]) -> f32[] {
  %Arg_0.34924 = f32[] parameter(0)
  %Arg_1.34925 = f32[] parameter(1)
  ROOT %add.34926 = f32[] add(%Arg_0.34924, %Arg_1.34925)
}

%region_895.34927.clone (Arg_0.1556: f32[], Arg_1.1493: f32[]) -> f32[] {
  %Arg_0.1556 = f32[] parameter(0)
  %Arg_1.1493 = f32[] parameter(1)
  ROOT %add.1879 = f32[] add(%Arg_0.1556, %Arg_1.1493)
}

%region_896.34934 (Arg_0.34931: f32[], Arg_1.34932: f32[]) -> f32[] {
  %Arg_0.34931 = f32[] parameter(0)
  %Arg_1.34932 = f32[] parameter(1)
  ROOT %add.34933 = f32[] add(%Arg_0.34931, %Arg_1.34932)
}

%region_896.34934.clone (Arg_0.1557: f32[], Arg_1.1494: f32[]) -> f32[] {
  %Arg_0.1557 = f32[] parameter(0)
  %Arg_1.1494 = f32[] parameter(1)
  ROOT %add.1880 = f32[] add(%Arg_0.1557, %Arg_1.1494)
}

%region_897.34941 (Arg_0.34938: f32[], Arg_1.34939: f32[]) -> f32[] {
  %Arg_0.34938 = f32[] parameter(0)
  %Arg_1.34939 = f32[] parameter(1)
  ROOT %add.34940 = f32[] add(%Arg_0.34938, %Arg_1.34939)
}

%region_897.34941.clone (Arg_0.1558: f32[], Arg_1.1495: f32[]) -> f32[] {
  %Arg_0.1558 = f32[] parameter(0)
  %Arg_1.1495 = f32[] parameter(1)
  ROOT %add.1881 = f32[] add(%Arg_0.1558, %Arg_1.1495)
}

%region_898.34948 (Arg_0.34945: f32[], Arg_1.34946: f32[]) -> f32[] {
  %Arg_0.34945 = f32[] parameter(0)
  %Arg_1.34946 = f32[] parameter(1)
  ROOT %add.34947 = f32[] add(%Arg_0.34945, %Arg_1.34946)
}

%region_898.34948.clone (Arg_0.1559: f32[], Arg_1.1496: f32[]) -> f32[] {
  %Arg_0.1559 = f32[] parameter(0)
  %Arg_1.1496 = f32[] parameter(1)
  ROOT %add.1882 = f32[] add(%Arg_0.1559, %Arg_1.1496)
}

%region_899.34955 (Arg_0.34952: f32[], Arg_1.34953: f32[]) -> f32[] {
  %Arg_0.34952 = f32[] parameter(0)
  %Arg_1.34953 = f32[] parameter(1)
  ROOT %add.34954 = f32[] add(%Arg_0.34952, %Arg_1.34953)
}

%region_900.34962 (Arg_0.34959: f32[], Arg_1.34960: f32[]) -> f32[] {
  %Arg_0.34959 = f32[] parameter(0)
  %Arg_1.34960 = f32[] parameter(1)
  ROOT %add.34961 = f32[] add(%Arg_0.34959, %Arg_1.34960)
}

%region_901.34969 (Arg_0.34966: f32[], Arg_1.34967: f32[]) -> f32[] {
  %Arg_0.34966 = f32[] parameter(0)
  %Arg_1.34967 = f32[] parameter(1)
  ROOT %add.34968 = f32[] add(%Arg_0.34966, %Arg_1.34967)
}

%region_901.34969.clone (Arg_0.1560: f32[], Arg_1.1497: f32[]) -> f32[] {
  %Arg_0.1560 = f32[] parameter(0)
  %Arg_1.1497 = f32[] parameter(1)
  ROOT %add.1883 = f32[] add(%Arg_0.1560, %Arg_1.1497)
}

%region_902.34976 (Arg_0.34973: f32[], Arg_1.34974: f32[]) -> f32[] {
  %Arg_0.34973 = f32[] parameter(0)
  %Arg_1.34974 = f32[] parameter(1)
  ROOT %add.34975 = f32[] add(%Arg_0.34973, %Arg_1.34974)
}

%region_902.34976.clone (Arg_0.1561: f32[], Arg_1.1498: f32[]) -> f32[] {
  %Arg_0.1561 = f32[] parameter(0)
  %Arg_1.1498 = f32[] parameter(1)
  ROOT %add.1884 = f32[] add(%Arg_0.1561, %Arg_1.1498)
}

%region_903.34983 (Arg_0.34980: f32[], Arg_1.34981: f32[]) -> f32[] {
  %Arg_0.34980 = f32[] parameter(0)
  %Arg_1.34981 = f32[] parameter(1)
  ROOT %add.34982 = f32[] add(%Arg_0.34980, %Arg_1.34981)
}

%region_903.34983.clone (Arg_0.1562: f32[], Arg_1.1499: f32[]) -> f32[] {
  %Arg_0.1562 = f32[] parameter(0)
  %Arg_1.1499 = f32[] parameter(1)
  ROOT %add.1885 = f32[] add(%Arg_0.1562, %Arg_1.1499)
}

%region_904.34990 (Arg_0.34987: f32[], Arg_1.34988: f32[]) -> f32[] {
  %Arg_0.34987 = f32[] parameter(0)
  %Arg_1.34988 = f32[] parameter(1)
  ROOT %add.34989 = f32[] add(%Arg_0.34987, %Arg_1.34988)
}

%region_904.34990.clone (Arg_0.1563: f32[], Arg_1.1500: f32[]) -> f32[] {
  %Arg_0.1563 = f32[] parameter(0)
  %Arg_1.1500 = f32[] parameter(1)
  ROOT %add.1886 = f32[] add(%Arg_0.1563, %Arg_1.1500)
}

%region_905.34997 (Arg_0.34994: f32[], Arg_1.34995: f32[]) -> f32[] {
  %Arg_0.34994 = f32[] parameter(0)
  %Arg_1.34995 = f32[] parameter(1)
  ROOT %add.34996 = f32[] add(%Arg_0.34994, %Arg_1.34995)
}

%region_905.34997.clone (Arg_0.1564: f32[], Arg_1.1501: f32[]) -> f32[] {
  %Arg_0.1564 = f32[] parameter(0)
  %Arg_1.1501 = f32[] parameter(1)
  ROOT %add.1887 = f32[] add(%Arg_0.1564, %Arg_1.1501)
}

%region_906.35004 (Arg_0.35001: f32[], Arg_1.35002: f32[]) -> f32[] {
  %Arg_0.35001 = f32[] parameter(0)
  %Arg_1.35002 = f32[] parameter(1)
  ROOT %add.35003 = f32[] add(%Arg_0.35001, %Arg_1.35002)
}

%region_906.35004.clone (Arg_0.1565: f32[], Arg_1.1502: f32[]) -> f32[] {
  %Arg_0.1565 = f32[] parameter(0)
  %Arg_1.1502 = f32[] parameter(1)
  ROOT %add.1888 = f32[] add(%Arg_0.1565, %Arg_1.1502)
}

%region_907.35011 (Arg_0.35008: f32[], Arg_1.35009: f32[]) -> f32[] {
  %Arg_0.35008 = f32[] parameter(0)
  %Arg_1.35009 = f32[] parameter(1)
  ROOT %add.35010 = f32[] add(%Arg_0.35008, %Arg_1.35009)
}

%region_907.35011.clone (Arg_0.1566: f32[], Arg_1.1503: f32[]) -> f32[] {
  %Arg_0.1566 = f32[] parameter(0)
  %Arg_1.1503 = f32[] parameter(1)
  ROOT %add.1889 = f32[] add(%Arg_0.1566, %Arg_1.1503)
}

%region_908.35018 (Arg_0.35015: f32[], Arg_1.35016: f32[]) -> f32[] {
  %Arg_0.35015 = f32[] parameter(0)
  %Arg_1.35016 = f32[] parameter(1)
  ROOT %add.35017 = f32[] add(%Arg_0.35015, %Arg_1.35016)
}

%region_909.35025 (Arg_0.35022: f32[], Arg_1.35023: f32[]) -> f32[] {
  %Arg_0.35022 = f32[] parameter(0)
  %Arg_1.35023 = f32[] parameter(1)
  ROOT %add.35024 = f32[] add(%Arg_0.35022, %Arg_1.35023)
}

%region_910.35032 (Arg_0.35029: f32[], Arg_1.35030: f32[]) -> f32[] {
  %Arg_0.35029 = f32[] parameter(0)
  %Arg_1.35030 = f32[] parameter(1)
  ROOT %add.35031 = f32[] add(%Arg_0.35029, %Arg_1.35030)
}

%region_910.35032.clone (Arg_0.1567: f32[], Arg_1.1504: f32[]) -> f32[] {
  %Arg_0.1567 = f32[] parameter(0)
  %Arg_1.1504 = f32[] parameter(1)
  ROOT %add.1890 = f32[] add(%Arg_0.1567, %Arg_1.1504)
}

%region_911.35039 (Arg_0.35036: f32[], Arg_1.35037: f32[]) -> f32[] {
  %Arg_0.35036 = f32[] parameter(0)
  %Arg_1.35037 = f32[] parameter(1)
  ROOT %add.35038 = f32[] add(%Arg_0.35036, %Arg_1.35037)
}

%region_911.35039.clone (Arg_0.1568: f32[], Arg_1.1505: f32[]) -> f32[] {
  %Arg_0.1568 = f32[] parameter(0)
  %Arg_1.1505 = f32[] parameter(1)
  ROOT %add.1891 = f32[] add(%Arg_0.1568, %Arg_1.1505)
}

%region_912.35046 (Arg_0.35043: f32[], Arg_1.35044: f32[]) -> f32[] {
  %Arg_0.35043 = f32[] parameter(0)
  %Arg_1.35044 = f32[] parameter(1)
  ROOT %add.35045 = f32[] add(%Arg_0.35043, %Arg_1.35044)
}

%region_912.35046.clone (Arg_0.1569: f32[], Arg_1.1506: f32[]) -> f32[] {
  %Arg_0.1569 = f32[] parameter(0)
  %Arg_1.1506 = f32[] parameter(1)
  ROOT %add.1892 = f32[] add(%Arg_0.1569, %Arg_1.1506)
}

%region_913.35053 (Arg_0.35050: f32[], Arg_1.35051: f32[]) -> f32[] {
  %Arg_0.35050 = f32[] parameter(0)
  %Arg_1.35051 = f32[] parameter(1)
  ROOT %add.35052 = f32[] add(%Arg_0.35050, %Arg_1.35051)
}

%region_913.35053.clone (Arg_0.1570: f32[], Arg_1.1507: f32[]) -> f32[] {
  %Arg_0.1570 = f32[] parameter(0)
  %Arg_1.1507 = f32[] parameter(1)
  ROOT %add.1893 = f32[] add(%Arg_0.1570, %Arg_1.1507)
}

%region_914.35060 (Arg_0.35057: f32[], Arg_1.35058: f32[]) -> f32[] {
  %Arg_0.35057 = f32[] parameter(0)
  %Arg_1.35058 = f32[] parameter(1)
  ROOT %add.35059 = f32[] add(%Arg_0.35057, %Arg_1.35058)
}

%region_914.35060.clone (Arg_0.1571: f32[], Arg_1.1508: f32[]) -> f32[] {
  %Arg_0.1571 = f32[] parameter(0)
  %Arg_1.1508 = f32[] parameter(1)
  ROOT %add.1895 = f32[] add(%Arg_0.1571, %Arg_1.1508)
}

%region_915.35067 (Arg_0.35064: f32[], Arg_1.35065: f32[]) -> f32[] {
  %Arg_0.35064 = f32[] parameter(0)
  %Arg_1.35065 = f32[] parameter(1)
  ROOT %add.35066 = f32[] add(%Arg_0.35064, %Arg_1.35065)
}

%region_915.35067.clone (Arg_0.1572: f32[], Arg_1.1509: f32[]) -> f32[] {
  %Arg_0.1572 = f32[] parameter(0)
  %Arg_1.1509 = f32[] parameter(1)
  ROOT %add.1896 = f32[] add(%Arg_0.1572, %Arg_1.1509)
}

%region_916.35074 (Arg_0.35071: f32[], Arg_1.35072: f32[]) -> f32[] {
  %Arg_0.35071 = f32[] parameter(0)
  %Arg_1.35072 = f32[] parameter(1)
  ROOT %add.35073 = f32[] add(%Arg_0.35071, %Arg_1.35072)
}

%region_916.35074.clone (Arg_0.1573: f32[], Arg_1.1510: f32[]) -> f32[] {
  %Arg_0.1573 = f32[] parameter(0)
  %Arg_1.1510 = f32[] parameter(1)
  ROOT %add.1897 = f32[] add(%Arg_0.1573, %Arg_1.1510)
}

%region_917.35081 (Arg_0.35078: f32[], Arg_1.35079: f32[]) -> f32[] {
  %Arg_0.35078 = f32[] parameter(0)
  %Arg_1.35079 = f32[] parameter(1)
  ROOT %add.35080 = f32[] add(%Arg_0.35078, %Arg_1.35079)
}

%region_918.35088 (Arg_0.35085: f32[], Arg_1.35086: f32[]) -> f32[] {
  %Arg_0.35085 = f32[] parameter(0)
  %Arg_1.35086 = f32[] parameter(1)
  ROOT %add.35087 = f32[] add(%Arg_0.35085, %Arg_1.35086)
}

%region_919.35095 (Arg_0.35092: f32[], Arg_1.35093: f32[]) -> f32[] {
  %Arg_0.35092 = f32[] parameter(0)
  %Arg_1.35093 = f32[] parameter(1)
  ROOT %add.35094 = f32[] add(%Arg_0.35092, %Arg_1.35093)
}

%region_919.35095.clone (Arg_0.1574: f32[], Arg_1.1511: f32[]) -> f32[] {
  %Arg_0.1574 = f32[] parameter(0)
  %Arg_1.1511 = f32[] parameter(1)
  ROOT %add.1898 = f32[] add(%Arg_0.1574, %Arg_1.1511)
}

%region_920.35102 (Arg_0.35099: f32[], Arg_1.35100: f32[]) -> f32[] {
  %Arg_0.35099 = f32[] parameter(0)
  %Arg_1.35100 = f32[] parameter(1)
  ROOT %add.35101 = f32[] add(%Arg_0.35099, %Arg_1.35100)
}

%region_920.35102.clone (Arg_0.1575: f32[], Arg_1.1512: f32[]) -> f32[] {
  %Arg_0.1575 = f32[] parameter(0)
  %Arg_1.1512 = f32[] parameter(1)
  ROOT %add.1900 = f32[] add(%Arg_0.1575, %Arg_1.1512)
}

%region_921.35109 (Arg_0.35106: f32[], Arg_1.35107: f32[]) -> f32[] {
  %Arg_0.35106 = f32[] parameter(0)
  %Arg_1.35107 = f32[] parameter(1)
  ROOT %add.35108 = f32[] add(%Arg_0.35106, %Arg_1.35107)
}

%region_921.35109.clone (Arg_0.1576: f32[], Arg_1.1513: f32[]) -> f32[] {
  %Arg_0.1576 = f32[] parameter(0)
  %Arg_1.1513 = f32[] parameter(1)
  ROOT %add.1901 = f32[] add(%Arg_0.1576, %Arg_1.1513)
}

%region_922.35116 (Arg_0.35113: f32[], Arg_1.35114: f32[]) -> f32[] {
  %Arg_0.35113 = f32[] parameter(0)
  %Arg_1.35114 = f32[] parameter(1)
  ROOT %add.35115 = f32[] add(%Arg_0.35113, %Arg_1.35114)
}

%region_922.35116.clone (Arg_0.1577: f32[], Arg_1.1514: f32[]) -> f32[] {
  %Arg_0.1577 = f32[] parameter(0)
  %Arg_1.1514 = f32[] parameter(1)
  ROOT %add.1902 = f32[] add(%Arg_0.1577, %Arg_1.1514)
}

%region_923.35123 (Arg_0.35120: f32[], Arg_1.35121: f32[]) -> f32[] {
  %Arg_0.35120 = f32[] parameter(0)
  %Arg_1.35121 = f32[] parameter(1)
  ROOT %add.35122 = f32[] add(%Arg_0.35120, %Arg_1.35121)
}

%region_923.35123.clone (Arg_0.1578: f32[], Arg_1.1515: f32[]) -> f32[] {
  %Arg_0.1578 = f32[] parameter(0)
  %Arg_1.1515 = f32[] parameter(1)
  ROOT %add.1903 = f32[] add(%Arg_0.1578, %Arg_1.1515)
}

%region_924.35130 (Arg_0.35127: f32[], Arg_1.35128: f32[]) -> f32[] {
  %Arg_0.35127 = f32[] parameter(0)
  %Arg_1.35128 = f32[] parameter(1)
  ROOT %add.35129 = f32[] add(%Arg_0.35127, %Arg_1.35128)
}

%region_924.35130.clone (Arg_0.1579: f32[], Arg_1.1516: f32[]) -> f32[] {
  %Arg_0.1579 = f32[] parameter(0)
  %Arg_1.1516 = f32[] parameter(1)
  ROOT %add.1905 = f32[] add(%Arg_0.1579, %Arg_1.1516)
}

%region_925.35137 (Arg_0.35134: f32[], Arg_1.35135: f32[]) -> f32[] {
  %Arg_0.35134 = f32[] parameter(0)
  %Arg_1.35135 = f32[] parameter(1)
  ROOT %add.35136 = f32[] add(%Arg_0.35134, %Arg_1.35135)
}

%region_925.35137.clone (Arg_0.1580: f32[], Arg_1.1517: f32[]) -> f32[] {
  %Arg_0.1580 = f32[] parameter(0)
  %Arg_1.1517 = f32[] parameter(1)
  ROOT %add.1906 = f32[] add(%Arg_0.1580, %Arg_1.1517)
}

%region_926.35144 (Arg_0.35141: f32[], Arg_1.35142: f32[]) -> f32[] {
  %Arg_0.35141 = f32[] parameter(0)
  %Arg_1.35142 = f32[] parameter(1)
  ROOT %add.35143 = f32[] add(%Arg_0.35141, %Arg_1.35142)
}

%region_927.35151 (Arg_0.35148: f32[], Arg_1.35149: f32[]) -> f32[] {
  %Arg_0.35148 = f32[] parameter(0)
  %Arg_1.35149 = f32[] parameter(1)
  ROOT %add.35150 = f32[] add(%Arg_0.35148, %Arg_1.35149)
}

%region_928.35158 (Arg_0.35155: f32[], Arg_1.35156: f32[]) -> f32[] {
  %Arg_0.35155 = f32[] parameter(0)
  %Arg_1.35156 = f32[] parameter(1)
  ROOT %add.35157 = f32[] add(%Arg_0.35155, %Arg_1.35156)
}

%region_928.35158.clone (Arg_0.1581: f32[], Arg_1.1518: f32[]) -> f32[] {
  %Arg_0.1581 = f32[] parameter(0)
  %Arg_1.1518 = f32[] parameter(1)
  ROOT %add.1907 = f32[] add(%Arg_0.1581, %Arg_1.1518)
}

%region_929.35165 (Arg_0.35162: f32[], Arg_1.35163: f32[]) -> f32[] {
  %Arg_0.35162 = f32[] parameter(0)
  %Arg_1.35163 = f32[] parameter(1)
  ROOT %add.35164 = f32[] add(%Arg_0.35162, %Arg_1.35163)
}

%region_929.35165.clone (Arg_0.1582: f32[], Arg_1.1519: f32[]) -> f32[] {
  %Arg_0.1582 = f32[] parameter(0)
  %Arg_1.1519 = f32[] parameter(1)
  ROOT %add.1908 = f32[] add(%Arg_0.1582, %Arg_1.1519)
}

%region_930.35172 (Arg_0.35169: f32[], Arg_1.35170: f32[]) -> f32[] {
  %Arg_0.35169 = f32[] parameter(0)
  %Arg_1.35170 = f32[] parameter(1)
  ROOT %add.35171 = f32[] add(%Arg_0.35169, %Arg_1.35170)
}

%region_930.35172.clone (Arg_0.1583: f32[], Arg_1.1520: f32[]) -> f32[] {
  %Arg_0.1583 = f32[] parameter(0)
  %Arg_1.1520 = f32[] parameter(1)
  ROOT %add.1909 = f32[] add(%Arg_0.1583, %Arg_1.1520)
}

%region_931.35179 (Arg_0.35176: f32[], Arg_1.35177: f32[]) -> f32[] {
  %Arg_0.35176 = f32[] parameter(0)
  %Arg_1.35177 = f32[] parameter(1)
  ROOT %add.35178 = f32[] add(%Arg_0.35176, %Arg_1.35177)
}

%region_931.35179.clone (Arg_0.1584: f32[], Arg_1.1521: f32[]) -> f32[] {
  %Arg_0.1584 = f32[] parameter(0)
  %Arg_1.1521 = f32[] parameter(1)
  ROOT %add.1910 = f32[] add(%Arg_0.1584, %Arg_1.1521)
}

%region_932.35186 (Arg_0.35183: f32[], Arg_1.35184: f32[]) -> f32[] {
  %Arg_0.35183 = f32[] parameter(0)
  %Arg_1.35184 = f32[] parameter(1)
  ROOT %add.35185 = f32[] add(%Arg_0.35183, %Arg_1.35184)
}

%region_932.35186.clone (Arg_0.1585: f32[], Arg_1.1522: f32[]) -> f32[] {
  %Arg_0.1585 = f32[] parameter(0)
  %Arg_1.1522 = f32[] parameter(1)
  ROOT %add.1911 = f32[] add(%Arg_0.1585, %Arg_1.1522)
}

%region_933.35193 (Arg_0.35190: f32[], Arg_1.35191: f32[]) -> f32[] {
  %Arg_0.35190 = f32[] parameter(0)
  %Arg_1.35191 = f32[] parameter(1)
  ROOT %add.35192 = f32[] add(%Arg_0.35190, %Arg_1.35191)
}

%region_933.35193.clone (Arg_0.1587: f32[], Arg_1.1523: f32[]) -> f32[] {
  %Arg_0.1587 = f32[] parameter(0)
  %Arg_1.1523 = f32[] parameter(1)
  ROOT %add.1912 = f32[] add(%Arg_0.1587, %Arg_1.1523)
}

%region_934.35200 (Arg_0.35197: f32[], Arg_1.35198: f32[]) -> f32[] {
  %Arg_0.35197 = f32[] parameter(0)
  %Arg_1.35198 = f32[] parameter(1)
  ROOT %add.35199 = f32[] add(%Arg_0.35197, %Arg_1.35198)
}

%region_934.35200.clone (Arg_0.1588: f32[], Arg_1.1524: f32[]) -> f32[] {
  %Arg_0.1588 = f32[] parameter(0)
  %Arg_1.1524 = f32[] parameter(1)
  ROOT %add.1913 = f32[] add(%Arg_0.1588, %Arg_1.1524)
}

%region_935.35207 (Arg_0.35204: f32[], Arg_1.35205: f32[]) -> f32[] {
  %Arg_0.35204 = f32[] parameter(0)
  %Arg_1.35205 = f32[] parameter(1)
  ROOT %add.35206 = f32[] add(%Arg_0.35204, %Arg_1.35205)
}

%region_936.35214 (Arg_0.35211: f32[], Arg_1.35212: f32[]) -> f32[] {
  %Arg_0.35211 = f32[] parameter(0)
  %Arg_1.35212 = f32[] parameter(1)
  ROOT %add.35213 = f32[] add(%Arg_0.35211, %Arg_1.35212)
}

%region_937.35221 (Arg_0.35218: f32[], Arg_1.35219: f32[]) -> f32[] {
  %Arg_0.35218 = f32[] parameter(0)
  %Arg_1.35219 = f32[] parameter(1)
  ROOT %add.35220 = f32[] add(%Arg_0.35218, %Arg_1.35219)
}

%region_937.35221.clone (Arg_0.1589: f32[], Arg_1.1525: f32[]) -> f32[] {
  %Arg_0.1589 = f32[] parameter(0)
  %Arg_1.1525 = f32[] parameter(1)
  ROOT %add.1914 = f32[] add(%Arg_0.1589, %Arg_1.1525)
}

%region_938.35228 (Arg_0.35225: f32[], Arg_1.35226: f32[]) -> f32[] {
  %Arg_0.35225 = f32[] parameter(0)
  %Arg_1.35226 = f32[] parameter(1)
  ROOT %add.35227 = f32[] add(%Arg_0.35225, %Arg_1.35226)
}

%region_938.35228.clone (Arg_0.1590: f32[], Arg_1.1526: f32[]) -> f32[] {
  %Arg_0.1590 = f32[] parameter(0)
  %Arg_1.1526 = f32[] parameter(1)
  ROOT %add.1915 = f32[] add(%Arg_0.1590, %Arg_1.1526)
}

%region_939.35235 (Arg_0.35232: f32[], Arg_1.35233: f32[]) -> f32[] {
  %Arg_0.35232 = f32[] parameter(0)
  %Arg_1.35233 = f32[] parameter(1)
  ROOT %add.35234 = f32[] add(%Arg_0.35232, %Arg_1.35233)
}

%region_939.35235.clone (Arg_0.1591: f32[], Arg_1.1527: f32[]) -> f32[] {
  %Arg_0.1591 = f32[] parameter(0)
  %Arg_1.1527 = f32[] parameter(1)
  ROOT %add.1916 = f32[] add(%Arg_0.1591, %Arg_1.1527)
}

%region_940.35242 (Arg_0.35239: f32[], Arg_1.35240: f32[]) -> f32[] {
  %Arg_0.35239 = f32[] parameter(0)
  %Arg_1.35240 = f32[] parameter(1)
  ROOT %add.35241 = f32[] add(%Arg_0.35239, %Arg_1.35240)
}

%region_940.35242.clone (Arg_0.1592: f32[], Arg_1.1528: f32[]) -> f32[] {
  %Arg_0.1592 = f32[] parameter(0)
  %Arg_1.1528 = f32[] parameter(1)
  ROOT %add.1917 = f32[] add(%Arg_0.1592, %Arg_1.1528)
}

%region_941.35249 (Arg_0.35246: f32[], Arg_1.35247: f32[]) -> f32[] {
  %Arg_0.35246 = f32[] parameter(0)
  %Arg_1.35247 = f32[] parameter(1)
  ROOT %add.35248 = f32[] add(%Arg_0.35246, %Arg_1.35247)
}

%region_941.35249.clone (Arg_0.1593: f32[], Arg_1.1529: f32[]) -> f32[] {
  %Arg_0.1593 = f32[] parameter(0)
  %Arg_1.1529 = f32[] parameter(1)
  ROOT %add.1918 = f32[] add(%Arg_0.1593, %Arg_1.1529)
}

%region_942.35256 (Arg_0.35253: f32[], Arg_1.35254: f32[]) -> f32[] {
  %Arg_0.35253 = f32[] parameter(0)
  %Arg_1.35254 = f32[] parameter(1)
  ROOT %add.35255 = f32[] add(%Arg_0.35253, %Arg_1.35254)
}

%region_942.35256.clone (Arg_0.1595: f32[], Arg_1.1530: f32[]) -> f32[] {
  %Arg_0.1595 = f32[] parameter(0)
  %Arg_1.1530 = f32[] parameter(1)
  ROOT %add.1919 = f32[] add(%Arg_0.1595, %Arg_1.1530)
}

%region_943.35263 (Arg_0.35260: f32[], Arg_1.35261: f32[]) -> f32[] {
  %Arg_0.35260 = f32[] parameter(0)
  %Arg_1.35261 = f32[] parameter(1)
  ROOT %add.35262 = f32[] add(%Arg_0.35260, %Arg_1.35261)
}

%region_943.35263.clone (Arg_0.1596: f32[], Arg_1.1531: f32[]) -> f32[] {
  %Arg_0.1596 = f32[] parameter(0)
  %Arg_1.1531 = f32[] parameter(1)
  ROOT %add.1920 = f32[] add(%Arg_0.1596, %Arg_1.1531)
}

%region_944.35270 (Arg_0.35267: f32[], Arg_1.35268: f32[]) -> f32[] {
  %Arg_0.35267 = f32[] parameter(0)
  %Arg_1.35268 = f32[] parameter(1)
  ROOT %add.35269 = f32[] add(%Arg_0.35267, %Arg_1.35268)
}

%region_945.35277 (Arg_0.35274: f32[], Arg_1.35275: f32[]) -> f32[] {
  %Arg_0.35274 = f32[] parameter(0)
  %Arg_1.35275 = f32[] parameter(1)
  ROOT %add.35276 = f32[] add(%Arg_0.35274, %Arg_1.35275)
}

%region_946.35284 (Arg_0.35281: f32[], Arg_1.35282: f32[]) -> f32[] {
  %Arg_0.35281 = f32[] parameter(0)
  %Arg_1.35282 = f32[] parameter(1)
  ROOT %add.35283 = f32[] add(%Arg_0.35281, %Arg_1.35282)
}

%region_946.35284.clone (Arg_0.1597: f32[], Arg_1.1532: f32[]) -> f32[] {
  %Arg_0.1597 = f32[] parameter(0)
  %Arg_1.1532 = f32[] parameter(1)
  ROOT %add.1921 = f32[] add(%Arg_0.1597, %Arg_1.1532)
}

%region_947.35291 (Arg_0.35288: f32[], Arg_1.35289: f32[]) -> f32[] {
  %Arg_0.35288 = f32[] parameter(0)
  %Arg_1.35289 = f32[] parameter(1)
  ROOT %add.35290 = f32[] add(%Arg_0.35288, %Arg_1.35289)
}

%region_947.35291.clone (Arg_0.1598: f32[], Arg_1.1533: f32[]) -> f32[] {
  %Arg_0.1598 = f32[] parameter(0)
  %Arg_1.1533 = f32[] parameter(1)
  ROOT %add.1922 = f32[] add(%Arg_0.1598, %Arg_1.1533)
}

%region_948.35298 (Arg_0.35295: f32[], Arg_1.35296: f32[]) -> f32[] {
  %Arg_0.35295 = f32[] parameter(0)
  %Arg_1.35296 = f32[] parameter(1)
  ROOT %add.35297 = f32[] add(%Arg_0.35295, %Arg_1.35296)
}

%region_948.35298.clone (Arg_0.1600: f32[], Arg_1.1534: f32[]) -> f32[] {
  %Arg_0.1600 = f32[] parameter(0)
  %Arg_1.1534 = f32[] parameter(1)
  ROOT %add.1923 = f32[] add(%Arg_0.1600, %Arg_1.1534)
}

%region_949.35305 (Arg_0.35302: f32[], Arg_1.35303: f32[]) -> f32[] {
  %Arg_0.35302 = f32[] parameter(0)
  %Arg_1.35303 = f32[] parameter(1)
  ROOT %add.35304 = f32[] add(%Arg_0.35302, %Arg_1.35303)
}

%region_949.35305.clone (Arg_0.1601: f32[], Arg_1.1535: f32[]) -> f32[] {
  %Arg_0.1601 = f32[] parameter(0)
  %Arg_1.1535 = f32[] parameter(1)
  ROOT %add.1924 = f32[] add(%Arg_0.1601, %Arg_1.1535)
}

%region_950.35312 (Arg_0.35309: f32[], Arg_1.35310: f32[]) -> f32[] {
  %Arg_0.35309 = f32[] parameter(0)
  %Arg_1.35310 = f32[] parameter(1)
  ROOT %add.35311 = f32[] add(%Arg_0.35309, %Arg_1.35310)
}

%region_950.35312.clone (Arg_0.1602: f32[], Arg_1.1536: f32[]) -> f32[] {
  %Arg_0.1602 = f32[] parameter(0)
  %Arg_1.1536 = f32[] parameter(1)
  ROOT %add.1925 = f32[] add(%Arg_0.1602, %Arg_1.1536)
}

%region_951.35319 (Arg_0.35316: f32[], Arg_1.35317: f32[]) -> f32[] {
  %Arg_0.35316 = f32[] parameter(0)
  %Arg_1.35317 = f32[] parameter(1)
  ROOT %add.35318 = f32[] add(%Arg_0.35316, %Arg_1.35317)
}

%region_951.35319.clone (Arg_0.1603: f32[], Arg_1.1537: f32[]) -> f32[] {
  %Arg_0.1603 = f32[] parameter(0)
  %Arg_1.1537 = f32[] parameter(1)
  ROOT %add.1926 = f32[] add(%Arg_0.1603, %Arg_1.1537)
}

%region_952.35326 (Arg_0.35323: f32[], Arg_1.35324: f32[]) -> f32[] {
  %Arg_0.35323 = f32[] parameter(0)
  %Arg_1.35324 = f32[] parameter(1)
  ROOT %add.35325 = f32[] add(%Arg_0.35323, %Arg_1.35324)
}

%region_952.35326.clone (Arg_0.1604: f32[], Arg_1.1538: f32[]) -> f32[] {
  %Arg_0.1604 = f32[] parameter(0)
  %Arg_1.1538 = f32[] parameter(1)
  ROOT %add.1927 = f32[] add(%Arg_0.1604, %Arg_1.1538)
}

%region_953.35333 (Arg_0.35330: f32[], Arg_1.35331: f32[]) -> f32[] {
  %Arg_0.35330 = f32[] parameter(0)
  %Arg_1.35331 = f32[] parameter(1)
  ROOT %add.35332 = f32[] add(%Arg_0.35330, %Arg_1.35331)
}

%region_954.35340 (Arg_0.35337: f32[], Arg_1.35338: f32[]) -> f32[] {
  %Arg_0.35337 = f32[] parameter(0)
  %Arg_1.35338 = f32[] parameter(1)
  ROOT %add.35339 = f32[] add(%Arg_0.35337, %Arg_1.35338)
}

%region_955.35347 (Arg_0.35344: f32[], Arg_1.35345: f32[]) -> f32[] {
  %Arg_0.35344 = f32[] parameter(0)
  %Arg_1.35345 = f32[] parameter(1)
  ROOT %add.35346 = f32[] add(%Arg_0.35344, %Arg_1.35345)
}

%region_955.35347.clone (Arg_0.1605: f32[], Arg_1.1539: f32[]) -> f32[] {
  %Arg_0.1605 = f32[] parameter(0)
  %Arg_1.1539 = f32[] parameter(1)
  ROOT %add.1928 = f32[] add(%Arg_0.1605, %Arg_1.1539)
}

%region_956.35354 (Arg_0.35351: f32[], Arg_1.35352: f32[]) -> f32[] {
  %Arg_0.35351 = f32[] parameter(0)
  %Arg_1.35352 = f32[] parameter(1)
  ROOT %add.35353 = f32[] add(%Arg_0.35351, %Arg_1.35352)
}

%region_956.35354.clone (Arg_0.1606: f32[], Arg_1.1540: f32[]) -> f32[] {
  %Arg_0.1606 = f32[] parameter(0)
  %Arg_1.1540 = f32[] parameter(1)
  ROOT %add.1929 = f32[] add(%Arg_0.1606, %Arg_1.1540)
}

%region_957.35361 (Arg_0.35358: f32[], Arg_1.35359: f32[]) -> f32[] {
  %Arg_0.35358 = f32[] parameter(0)
  %Arg_1.35359 = f32[] parameter(1)
  ROOT %add.35360 = f32[] add(%Arg_0.35358, %Arg_1.35359)
}

%region_957.35361.clone (Arg_0.1607: f32[], Arg_1.1541: f32[]) -> f32[] {
  %Arg_0.1607 = f32[] parameter(0)
  %Arg_1.1541 = f32[] parameter(1)
  ROOT %add.1931 = f32[] add(%Arg_0.1607, %Arg_1.1541)
}

%region_958.35368 (Arg_0.35365: f32[], Arg_1.35366: f32[]) -> f32[] {
  %Arg_0.35365 = f32[] parameter(0)
  %Arg_1.35366 = f32[] parameter(1)
  ROOT %add.35367 = f32[] add(%Arg_0.35365, %Arg_1.35366)
}

%region_958.35368.clone (Arg_0.1608: f32[], Arg_1.1542: f32[]) -> f32[] {
  %Arg_0.1608 = f32[] parameter(0)
  %Arg_1.1542 = f32[] parameter(1)
  ROOT %add.1932 = f32[] add(%Arg_0.1608, %Arg_1.1542)
}

%region_959.35375 (Arg_0.35372: f32[], Arg_1.35373: f32[]) -> f32[] {
  %Arg_0.35372 = f32[] parameter(0)
  %Arg_1.35373 = f32[] parameter(1)
  ROOT %add.35374 = f32[] add(%Arg_0.35372, %Arg_1.35373)
}

%region_959.35375.clone (Arg_0.1609: f32[], Arg_1.1543: f32[]) -> f32[] {
  %Arg_0.1609 = f32[] parameter(0)
  %Arg_1.1543 = f32[] parameter(1)
  ROOT %add.1933 = f32[] add(%Arg_0.1609, %Arg_1.1543)
}

%region_960.35382 (Arg_0.35379: f32[], Arg_1.35380: f32[]) -> f32[] {
  %Arg_0.35379 = f32[] parameter(0)
  %Arg_1.35380 = f32[] parameter(1)
  ROOT %add.35381 = f32[] add(%Arg_0.35379, %Arg_1.35380)
}

%region_960.35382.clone (Arg_0.1610: f32[], Arg_1.1544: f32[]) -> f32[] {
  %Arg_0.1610 = f32[] parameter(0)
  %Arg_1.1544 = f32[] parameter(1)
  ROOT %add.1934 = f32[] add(%Arg_0.1610, %Arg_1.1544)
}

%region_961.35389 (Arg_0.35386: f32[], Arg_1.35387: f32[]) -> f32[] {
  %Arg_0.35386 = f32[] parameter(0)
  %Arg_1.35387 = f32[] parameter(1)
  ROOT %add.35388 = f32[] add(%Arg_0.35386, %Arg_1.35387)
}

%region_961.35389.clone (Arg_0.1611: f32[], Arg_1.1545: f32[]) -> f32[] {
  %Arg_0.1611 = f32[] parameter(0)
  %Arg_1.1545 = f32[] parameter(1)
  ROOT %add.1935 = f32[] add(%Arg_0.1611, %Arg_1.1545)
}

%region_962.35396 (Arg_0.35393: f32[], Arg_1.35394: f32[]) -> f32[] {
  %Arg_0.35393 = f32[] parameter(0)
  %Arg_1.35394 = f32[] parameter(1)
  ROOT %add.35395 = f32[] add(%Arg_0.35393, %Arg_1.35394)
}

%region_963.35403 (Arg_0.35400: f32[], Arg_1.35401: f32[]) -> f32[] {
  %Arg_0.35400 = f32[] parameter(0)
  %Arg_1.35401 = f32[] parameter(1)
  ROOT %add.35402 = f32[] add(%Arg_0.35400, %Arg_1.35401)
}

%region_964.35410 (Arg_0.35407: f32[], Arg_1.35408: f32[]) -> f32[] {
  %Arg_0.35407 = f32[] parameter(0)
  %Arg_1.35408 = f32[] parameter(1)
  ROOT %add.35409 = f32[] add(%Arg_0.35407, %Arg_1.35408)
}

%region_964.35410.clone (Arg_0.1612: f32[], Arg_1.1546: f32[]) -> f32[] {
  %Arg_0.1612 = f32[] parameter(0)
  %Arg_1.1546 = f32[] parameter(1)
  ROOT %add.1936 = f32[] add(%Arg_0.1612, %Arg_1.1546)
}

%region_965.35417 (Arg_0.35414: f32[], Arg_1.35415: f32[]) -> f32[] {
  %Arg_0.35414 = f32[] parameter(0)
  %Arg_1.35415 = f32[] parameter(1)
  ROOT %add.35416 = f32[] add(%Arg_0.35414, %Arg_1.35415)
}

%region_965.35417.clone (Arg_0.1613: f32[], Arg_1.1547: f32[]) -> f32[] {
  %Arg_0.1613 = f32[] parameter(0)
  %Arg_1.1547 = f32[] parameter(1)
  ROOT %add.1938 = f32[] add(%Arg_0.1613, %Arg_1.1547)
}

%region_966.35424 (Arg_0.35421: f32[], Arg_1.35422: f32[]) -> f32[] {
  %Arg_0.35421 = f32[] parameter(0)
  %Arg_1.35422 = f32[] parameter(1)
  ROOT %add.35423 = f32[] add(%Arg_0.35421, %Arg_1.35422)
}

%region_966.35424.clone (Arg_0.1614: f32[], Arg_1.1548: f32[]) -> f32[] {
  %Arg_0.1614 = f32[] parameter(0)
  %Arg_1.1548 = f32[] parameter(1)
  ROOT %add.1939 = f32[] add(%Arg_0.1614, %Arg_1.1548)
}

%region_967.35431 (Arg_0.35428: f32[], Arg_1.35429: f32[]) -> f32[] {
  %Arg_0.35428 = f32[] parameter(0)
  %Arg_1.35429 = f32[] parameter(1)
  ROOT %add.35430 = f32[] add(%Arg_0.35428, %Arg_1.35429)
}

%region_967.35431.clone (Arg_0.1615: f32[], Arg_1.1549: f32[]) -> f32[] {
  %Arg_0.1615 = f32[] parameter(0)
  %Arg_1.1549 = f32[] parameter(1)
  ROOT %add.1940 = f32[] add(%Arg_0.1615, %Arg_1.1549)
}

%region_968.35438 (Arg_0.35435: f32[], Arg_1.35436: f32[]) -> f32[] {
  %Arg_0.35435 = f32[] parameter(0)
  %Arg_1.35436 = f32[] parameter(1)
  ROOT %add.35437 = f32[] add(%Arg_0.35435, %Arg_1.35436)
}

%region_968.35438.clone (Arg_0.1616: f32[], Arg_1.1550: f32[]) -> f32[] {
  %Arg_0.1616 = f32[] parameter(0)
  %Arg_1.1550 = f32[] parameter(1)
  ROOT %add.1941 = f32[] add(%Arg_0.1616, %Arg_1.1550)
}

%region_969.35445 (Arg_0.35442: f32[], Arg_1.35443: f32[]) -> f32[] {
  %Arg_0.35442 = f32[] parameter(0)
  %Arg_1.35443 = f32[] parameter(1)
  ROOT %add.35444 = f32[] add(%Arg_0.35442, %Arg_1.35443)
}

%region_969.35445.clone (Arg_0.1618: f32[], Arg_1.1551: f32[]) -> f32[] {
  %Arg_0.1618 = f32[] parameter(0)
  %Arg_1.1551 = f32[] parameter(1)
  ROOT %add.1943 = f32[] add(%Arg_0.1618, %Arg_1.1551)
}

%region_970.35452 (Arg_0.35449: f32[], Arg_1.35450: f32[]) -> f32[] {
  %Arg_0.35449 = f32[] parameter(0)
  %Arg_1.35450 = f32[] parameter(1)
  ROOT %add.35451 = f32[] add(%Arg_0.35449, %Arg_1.35450)
}

%region_970.35452.clone (Arg_0.1619: f32[], Arg_1.1552: f32[]) -> f32[] {
  %Arg_0.1619 = f32[] parameter(0)
  %Arg_1.1552 = f32[] parameter(1)
  ROOT %add.1944 = f32[] add(%Arg_0.1619, %Arg_1.1552)
}

%region_971.35459 (Arg_0.35456: f32[], Arg_1.35457: f32[]) -> f32[] {
  %Arg_0.35456 = f32[] parameter(0)
  %Arg_1.35457 = f32[] parameter(1)
  ROOT %add.35458 = f32[] add(%Arg_0.35456, %Arg_1.35457)
}

%region_972.35466 (Arg_0.35463: f32[], Arg_1.35464: f32[]) -> f32[] {
  %Arg_0.35463 = f32[] parameter(0)
  %Arg_1.35464 = f32[] parameter(1)
  ROOT %add.35465 = f32[] add(%Arg_0.35463, %Arg_1.35464)
}

%region_973.35473 (Arg_0.35470: f32[], Arg_1.35471: f32[]) -> f32[] {
  %Arg_0.35470 = f32[] parameter(0)
  %Arg_1.35471 = f32[] parameter(1)
  ROOT %add.35472 = f32[] add(%Arg_0.35470, %Arg_1.35471)
}

%region_973.35473.clone (Arg_0.1620: f32[], Arg_1.1553: f32[]) -> f32[] {
  %Arg_0.1620 = f32[] parameter(0)
  %Arg_1.1553 = f32[] parameter(1)
  ROOT %add.1945 = f32[] add(%Arg_0.1620, %Arg_1.1553)
}

%region_974.35480 (Arg_0.35477: f32[], Arg_1.35478: f32[]) -> f32[] {
  %Arg_0.35477 = f32[] parameter(0)
  %Arg_1.35478 = f32[] parameter(1)
  ROOT %add.35479 = f32[] add(%Arg_0.35477, %Arg_1.35478)
}

%region_974.35480.clone (Arg_0.1621: f32[], Arg_1.1554: f32[]) -> f32[] {
  %Arg_0.1621 = f32[] parameter(0)
  %Arg_1.1554 = f32[] parameter(1)
  ROOT %add.1946 = f32[] add(%Arg_0.1621, %Arg_1.1554)
}

%region_975.35487 (Arg_0.35484: f32[], Arg_1.35485: f32[]) -> f32[] {
  %Arg_0.35484 = f32[] parameter(0)
  %Arg_1.35485 = f32[] parameter(1)
  ROOT %add.35486 = f32[] add(%Arg_0.35484, %Arg_1.35485)
}

%region_975.35487.clone (Arg_0.1622: f32[], Arg_1.1555: f32[]) -> f32[] {
  %Arg_0.1622 = f32[] parameter(0)
  %Arg_1.1555 = f32[] parameter(1)
  ROOT %add.1947 = f32[] add(%Arg_0.1622, %Arg_1.1555)
}

%region_976.35494 (Arg_0.35491: f32[], Arg_1.35492: f32[]) -> f32[] {
  %Arg_0.35491 = f32[] parameter(0)
  %Arg_1.35492 = f32[] parameter(1)
  ROOT %add.35493 = f32[] add(%Arg_0.35491, %Arg_1.35492)
}

%region_976.35494.clone (Arg_0.1623: f32[], Arg_1.1556: f32[]) -> f32[] {
  %Arg_0.1623 = f32[] parameter(0)
  %Arg_1.1556 = f32[] parameter(1)
  ROOT %add.1948 = f32[] add(%Arg_0.1623, %Arg_1.1556)
}

%region_977.35501 (Arg_0.35498: f32[], Arg_1.35499: f32[]) -> f32[] {
  %Arg_0.35498 = f32[] parameter(0)
  %Arg_1.35499 = f32[] parameter(1)
  ROOT %add.35500 = f32[] add(%Arg_0.35498, %Arg_1.35499)
}

%region_977.35501.clone (Arg_0.1624: f32[], Arg_1.1557: f32[]) -> f32[] {
  %Arg_0.1624 = f32[] parameter(0)
  %Arg_1.1557 = f32[] parameter(1)
  ROOT %add.1949 = f32[] add(%Arg_0.1624, %Arg_1.1557)
}

%region_978.35508 (Arg_0.35505: f32[], Arg_1.35506: f32[]) -> f32[] {
  %Arg_0.35505 = f32[] parameter(0)
  %Arg_1.35506 = f32[] parameter(1)
  ROOT %add.35507 = f32[] add(%Arg_0.35505, %Arg_1.35506)
}

%region_978.35508.clone (Arg_0.1625: f32[], Arg_1.1558: f32[]) -> f32[] {
  %Arg_0.1625 = f32[] parameter(0)
  %Arg_1.1558 = f32[] parameter(1)
  ROOT %add.1950 = f32[] add(%Arg_0.1625, %Arg_1.1558)
}

%region_979.35515 (Arg_0.35512: f32[], Arg_1.35513: f32[]) -> f32[] {
  %Arg_0.35512 = f32[] parameter(0)
  %Arg_1.35513 = f32[] parameter(1)
  ROOT %add.35514 = f32[] add(%Arg_0.35512, %Arg_1.35513)
}

%region_979.35515.clone (Arg_0.1626: f32[], Arg_1.1559: f32[]) -> f32[] {
  %Arg_0.1626 = f32[] parameter(0)
  %Arg_1.1559 = f32[] parameter(1)
  ROOT %add.1951 = f32[] add(%Arg_0.1626, %Arg_1.1559)
}

%region_980.35522 (Arg_0.35519: f32[], Arg_1.35520: f32[]) -> f32[] {
  %Arg_0.35519 = f32[] parameter(0)
  %Arg_1.35520 = f32[] parameter(1)
  ROOT %add.35521 = f32[] add(%Arg_0.35519, %Arg_1.35520)
}

%region_981.35529 (Arg_0.35526: f32[], Arg_1.35527: f32[]) -> f32[] {
  %Arg_0.35526 = f32[] parameter(0)
  %Arg_1.35527 = f32[] parameter(1)
  ROOT %add.35528 = f32[] add(%Arg_0.35526, %Arg_1.35527)
}

%region_982.35536 (Arg_0.35533: f32[], Arg_1.35534: f32[]) -> f32[] {
  %Arg_0.35533 = f32[] parameter(0)
  %Arg_1.35534 = f32[] parameter(1)
  ROOT %add.35535 = f32[] add(%Arg_0.35533, %Arg_1.35534)
}

%region_982.35536.clone (Arg_0.1627: f32[], Arg_1.1560: f32[]) -> f32[] {
  %Arg_0.1627 = f32[] parameter(0)
  %Arg_1.1560 = f32[] parameter(1)
  ROOT %add.1952 = f32[] add(%Arg_0.1627, %Arg_1.1560)
}

%region_983.35543 (Arg_0.35540: f32[], Arg_1.35541: f32[]) -> f32[] {
  %Arg_0.35540 = f32[] parameter(0)
  %Arg_1.35541 = f32[] parameter(1)
  ROOT %add.35542 = f32[] add(%Arg_0.35540, %Arg_1.35541)
}

%region_983.35543.clone (Arg_0.1628: f32[], Arg_1.1561: f32[]) -> f32[] {
  %Arg_0.1628 = f32[] parameter(0)
  %Arg_1.1561 = f32[] parameter(1)
  ROOT %add.1953 = f32[] add(%Arg_0.1628, %Arg_1.1561)
}

%region_984.35550 (Arg_0.35547: f32[], Arg_1.35548: f32[]) -> f32[] {
  %Arg_0.35547 = f32[] parameter(0)
  %Arg_1.35548 = f32[] parameter(1)
  ROOT %add.35549 = f32[] add(%Arg_0.35547, %Arg_1.35548)
}

%region_984.35550.clone (Arg_0.1629: f32[], Arg_1.1562: f32[]) -> f32[] {
  %Arg_0.1629 = f32[] parameter(0)
  %Arg_1.1562 = f32[] parameter(1)
  ROOT %add.1954 = f32[] add(%Arg_0.1629, %Arg_1.1562)
}

%region_985.35557 (Arg_0.35554: f32[], Arg_1.35555: f32[]) -> f32[] {
  %Arg_0.35554 = f32[] parameter(0)
  %Arg_1.35555 = f32[] parameter(1)
  ROOT %add.35556 = f32[] add(%Arg_0.35554, %Arg_1.35555)
}

%region_985.35557.clone (Arg_0.1630: f32[], Arg_1.1563: f32[]) -> f32[] {
  %Arg_0.1630 = f32[] parameter(0)
  %Arg_1.1563 = f32[] parameter(1)
  ROOT %add.1955 = f32[] add(%Arg_0.1630, %Arg_1.1563)
}

%region_986.35564 (Arg_0.35561: f32[], Arg_1.35562: f32[]) -> f32[] {
  %Arg_0.35561 = f32[] parameter(0)
  %Arg_1.35562 = f32[] parameter(1)
  ROOT %add.35563 = f32[] add(%Arg_0.35561, %Arg_1.35562)
}

%region_986.35564.clone (Arg_0.1631: f32[], Arg_1.1564: f32[]) -> f32[] {
  %Arg_0.1631 = f32[] parameter(0)
  %Arg_1.1564 = f32[] parameter(1)
  ROOT %add.1956 = f32[] add(%Arg_0.1631, %Arg_1.1564)
}

%region_987.35571 (Arg_0.35568: f32[], Arg_1.35569: f32[]) -> f32[] {
  %Arg_0.35568 = f32[] parameter(0)
  %Arg_1.35569 = f32[] parameter(1)
  ROOT %add.35570 = f32[] add(%Arg_0.35568, %Arg_1.35569)
}

%region_987.35571.clone (Arg_0.1632: f32[], Arg_1.1565: f32[]) -> f32[] {
  %Arg_0.1632 = f32[] parameter(0)
  %Arg_1.1565 = f32[] parameter(1)
  ROOT %add.1957 = f32[] add(%Arg_0.1632, %Arg_1.1565)
}

%region_988.35578 (Arg_0.35575: f32[], Arg_1.35576: f32[]) -> f32[] {
  %Arg_0.35575 = f32[] parameter(0)
  %Arg_1.35576 = f32[] parameter(1)
  ROOT %add.35577 = f32[] add(%Arg_0.35575, %Arg_1.35576)
}

%region_988.35578.clone (Arg_0.1633: f32[], Arg_1.1566: f32[]) -> f32[] {
  %Arg_0.1633 = f32[] parameter(0)
  %Arg_1.1566 = f32[] parameter(1)
  ROOT %add.1958 = f32[] add(%Arg_0.1633, %Arg_1.1566)
}

%region_989.35585 (Arg_0.35582: f32[], Arg_1.35583: f32[]) -> f32[] {
  %Arg_0.35582 = f32[] parameter(0)
  %Arg_1.35583 = f32[] parameter(1)
  ROOT %add.35584 = f32[] add(%Arg_0.35582, %Arg_1.35583)
}

%region_990.35592 (Arg_0.35589: f32[], Arg_1.35590: f32[]) -> f32[] {
  %Arg_0.35589 = f32[] parameter(0)
  %Arg_1.35590 = f32[] parameter(1)
  ROOT %add.35591 = f32[] add(%Arg_0.35589, %Arg_1.35590)
}

%region_991.35599 (Arg_0.35596: f32[], Arg_1.35597: f32[]) -> f32[] {
  %Arg_0.35596 = f32[] parameter(0)
  %Arg_1.35597 = f32[] parameter(1)
  ROOT %add.35598 = f32[] add(%Arg_0.35596, %Arg_1.35597)
}

%region_991.35599.clone (Arg_0.1634: f32[], Arg_1.1567: f32[]) -> f32[] {
  %Arg_0.1634 = f32[] parameter(0)
  %Arg_1.1567 = f32[] parameter(1)
  ROOT %add.1959 = f32[] add(%Arg_0.1634, %Arg_1.1567)
}

%region_992.35606 (Arg_0.35603: f32[], Arg_1.35604: f32[]) -> f32[] {
  %Arg_0.35603 = f32[] parameter(0)
  %Arg_1.35604 = f32[] parameter(1)
  ROOT %add.35605 = f32[] add(%Arg_0.35603, %Arg_1.35604)
}

%region_992.35606.clone (Arg_0.1635: f32[], Arg_1.1568: f32[]) -> f32[] {
  %Arg_0.1635 = f32[] parameter(0)
  %Arg_1.1568 = f32[] parameter(1)
  ROOT %add.1960 = f32[] add(%Arg_0.1635, %Arg_1.1568)
}

%region_993.35613 (Arg_0.35610: f32[], Arg_1.35611: f32[]) -> f32[] {
  %Arg_0.35610 = f32[] parameter(0)
  %Arg_1.35611 = f32[] parameter(1)
  ROOT %add.35612 = f32[] add(%Arg_0.35610, %Arg_1.35611)
}

%region_993.35613.clone (Arg_0.1636: f32[], Arg_1.1569: f32[]) -> f32[] {
  %Arg_0.1636 = f32[] parameter(0)
  %Arg_1.1569 = f32[] parameter(1)
  ROOT %add.1961 = f32[] add(%Arg_0.1636, %Arg_1.1569)
}

%region_994.35620 (Arg_0.35617: f32[], Arg_1.35618: f32[]) -> f32[] {
  %Arg_0.35617 = f32[] parameter(0)
  %Arg_1.35618 = f32[] parameter(1)
  ROOT %add.35619 = f32[] add(%Arg_0.35617, %Arg_1.35618)
}

%region_994.35620.clone (Arg_0.1637: f32[], Arg_1.1570: f32[]) -> f32[] {
  %Arg_0.1637 = f32[] parameter(0)
  %Arg_1.1570 = f32[] parameter(1)
  ROOT %add.1962 = f32[] add(%Arg_0.1637, %Arg_1.1570)
}

%region_995.35627 (Arg_0.35624: f32[], Arg_1.35625: f32[]) -> f32[] {
  %Arg_0.35624 = f32[] parameter(0)
  %Arg_1.35625 = f32[] parameter(1)
  ROOT %add.35626 = f32[] add(%Arg_0.35624, %Arg_1.35625)
}

%region_995.35627.clone (Arg_0.1638: f32[], Arg_1.1571: f32[]) -> f32[] {
  %Arg_0.1638 = f32[] parameter(0)
  %Arg_1.1571 = f32[] parameter(1)
  ROOT %add.1963 = f32[] add(%Arg_0.1638, %Arg_1.1571)
}

%region_996.35634 (Arg_0.35631: f32[], Arg_1.35632: f32[]) -> f32[] {
  %Arg_0.35631 = f32[] parameter(0)
  %Arg_1.35632 = f32[] parameter(1)
  ROOT %add.35633 = f32[] add(%Arg_0.35631, %Arg_1.35632)
}

%region_996.35634.clone (Arg_0.1639: f32[], Arg_1.1572: f32[]) -> f32[] {
  %Arg_0.1639 = f32[] parameter(0)
  %Arg_1.1572 = f32[] parameter(1)
  ROOT %add.1964 = f32[] add(%Arg_0.1639, %Arg_1.1572)
}

%region_997.35641 (Arg_0.35638: f32[], Arg_1.35639: f32[]) -> f32[] {
  %Arg_0.35638 = f32[] parameter(0)
  %Arg_1.35639 = f32[] parameter(1)
  ROOT %add.35640 = f32[] add(%Arg_0.35638, %Arg_1.35639)
}

%region_997.35641.clone (Arg_0.1640: f32[], Arg_1.1573: f32[]) -> f32[] {
  %Arg_0.1640 = f32[] parameter(0)
  %Arg_1.1573 = f32[] parameter(1)
  ROOT %add.1965 = f32[] add(%Arg_0.1640, %Arg_1.1573)
}

%region_998.35648 (Arg_0.35645: f32[], Arg_1.35646: f32[]) -> f32[] {
  %Arg_0.35645 = f32[] parameter(0)
  %Arg_1.35646 = f32[] parameter(1)
  ROOT %add.35647 = f32[] add(%Arg_0.35645, %Arg_1.35646)
}

%region_999.35655 (Arg_0.35652: f32[], Arg_1.35653: f32[]) -> f32[] {
  %Arg_0.35652 = f32[] parameter(0)
  %Arg_1.35653 = f32[] parameter(1)
  ROOT %add.35654 = f32[] add(%Arg_0.35652, %Arg_1.35653)
}

%region_1000.35662 (Arg_0.35659: f32[], Arg_1.35660: f32[]) -> f32[] {
  %Arg_0.35659 = f32[] parameter(0)
  %Arg_1.35660 = f32[] parameter(1)
  ROOT %add.35661 = f32[] add(%Arg_0.35659, %Arg_1.35660)
}

%region_1000.35662.clone (Arg_0.1641: f32[], Arg_1.1574: f32[]) -> f32[] {
  %Arg_0.1641 = f32[] parameter(0)
  %Arg_1.1574 = f32[] parameter(1)
  ROOT %add.1966 = f32[] add(%Arg_0.1641, %Arg_1.1574)
}

%region_1001.35669 (Arg_0.35666: f32[], Arg_1.35667: f32[]) -> f32[] {
  %Arg_0.35666 = f32[] parameter(0)
  %Arg_1.35667 = f32[] parameter(1)
  ROOT %add.35668 = f32[] add(%Arg_0.35666, %Arg_1.35667)
}

%region_1001.35669.clone (Arg_0.1642: f32[], Arg_1.1575: f32[]) -> f32[] {
  %Arg_0.1642 = f32[] parameter(0)
  %Arg_1.1575 = f32[] parameter(1)
  ROOT %add.1967 = f32[] add(%Arg_0.1642, %Arg_1.1575)
}

%region_1002.35676 (Arg_0.35673: f32[], Arg_1.35674: f32[]) -> f32[] {
  %Arg_0.35673 = f32[] parameter(0)
  %Arg_1.35674 = f32[] parameter(1)
  ROOT %add.35675 = f32[] add(%Arg_0.35673, %Arg_1.35674)
}

%region_1002.35676.clone (Arg_0.1643: f32[], Arg_1.1576: f32[]) -> f32[] {
  %Arg_0.1643 = f32[] parameter(0)
  %Arg_1.1576 = f32[] parameter(1)
  ROOT %add.1968 = f32[] add(%Arg_0.1643, %Arg_1.1576)
}

%region_1003.35683 (Arg_0.35680: f32[], Arg_1.35681: f32[]) -> f32[] {
  %Arg_0.35680 = f32[] parameter(0)
  %Arg_1.35681 = f32[] parameter(1)
  ROOT %add.35682 = f32[] add(%Arg_0.35680, %Arg_1.35681)
}

%region_1003.35683.clone (Arg_0.1644: f32[], Arg_1.1577: f32[]) -> f32[] {
  %Arg_0.1644 = f32[] parameter(0)
  %Arg_1.1577 = f32[] parameter(1)
  ROOT %add.1969 = f32[] add(%Arg_0.1644, %Arg_1.1577)
}

%region_1004.35690 (Arg_0.35687: f32[], Arg_1.35688: f32[]) -> f32[] {
  %Arg_0.35687 = f32[] parameter(0)
  %Arg_1.35688 = f32[] parameter(1)
  ROOT %add.35689 = f32[] add(%Arg_0.35687, %Arg_1.35688)
}

%region_1004.35690.clone (Arg_0.1645: f32[], Arg_1.1578: f32[]) -> f32[] {
  %Arg_0.1645 = f32[] parameter(0)
  %Arg_1.1578 = f32[] parameter(1)
  ROOT %add.1970 = f32[] add(%Arg_0.1645, %Arg_1.1578)
}

%region_1005.35697 (Arg_0.35694: f32[], Arg_1.35695: f32[]) -> f32[] {
  %Arg_0.35694 = f32[] parameter(0)
  %Arg_1.35695 = f32[] parameter(1)
  ROOT %add.35696 = f32[] add(%Arg_0.35694, %Arg_1.35695)
}

%region_1005.35697.clone (Arg_0.1646: f32[], Arg_1.1579: f32[]) -> f32[] {
  %Arg_0.1646 = f32[] parameter(0)
  %Arg_1.1579 = f32[] parameter(1)
  ROOT %add.1971 = f32[] add(%Arg_0.1646, %Arg_1.1579)
}

%region_1006.35704 (Arg_0.35701: f32[], Arg_1.35702: f32[]) -> f32[] {
  %Arg_0.35701 = f32[] parameter(0)
  %Arg_1.35702 = f32[] parameter(1)
  ROOT %add.35703 = f32[] add(%Arg_0.35701, %Arg_1.35702)
}

%region_1006.35704.clone (Arg_0.1647: f32[], Arg_1.1580: f32[]) -> f32[] {
  %Arg_0.1647 = f32[] parameter(0)
  %Arg_1.1580 = f32[] parameter(1)
  ROOT %add.1972 = f32[] add(%Arg_0.1647, %Arg_1.1580)
}

%region_1007.35711 (Arg_0.35708: f32[], Arg_1.35709: f32[]) -> f32[] {
  %Arg_0.35708 = f32[] parameter(0)
  %Arg_1.35709 = f32[] parameter(1)
  ROOT %add.35710 = f32[] add(%Arg_0.35708, %Arg_1.35709)
}

%region_1008.35718 (Arg_0.35715: f32[], Arg_1.35716: f32[]) -> f32[] {
  %Arg_0.35715 = f32[] parameter(0)
  %Arg_1.35716 = f32[] parameter(1)
  ROOT %add.35717 = f32[] add(%Arg_0.35715, %Arg_1.35716)
}

%region_1009.35725 (Arg_0.35722: f32[], Arg_1.35723: f32[]) -> f32[] {
  %Arg_0.35722 = f32[] parameter(0)
  %Arg_1.35723 = f32[] parameter(1)
  ROOT %add.35724 = f32[] add(%Arg_0.35722, %Arg_1.35723)
}

%region_1009.35725.clone (Arg_0.1648: f32[], Arg_1.1581: f32[]) -> f32[] {
  %Arg_0.1648 = f32[] parameter(0)
  %Arg_1.1581 = f32[] parameter(1)
  ROOT %add.1973 = f32[] add(%Arg_0.1648, %Arg_1.1581)
}

%region_1010.35732 (Arg_0.35729: f32[], Arg_1.35730: f32[]) -> f32[] {
  %Arg_0.35729 = f32[] parameter(0)
  %Arg_1.35730 = f32[] parameter(1)
  ROOT %add.35731 = f32[] add(%Arg_0.35729, %Arg_1.35730)
}

%region_1010.35732.clone (Arg_0.1649: f32[], Arg_1.1582: f32[]) -> f32[] {
  %Arg_0.1649 = f32[] parameter(0)
  %Arg_1.1582 = f32[] parameter(1)
  ROOT %add.1974 = f32[] add(%Arg_0.1649, %Arg_1.1582)
}

%region_1011.35739 (Arg_0.35736: f32[], Arg_1.35737: f32[]) -> f32[] {
  %Arg_0.35736 = f32[] parameter(0)
  %Arg_1.35737 = f32[] parameter(1)
  ROOT %add.35738 = f32[] add(%Arg_0.35736, %Arg_1.35737)
}

%region_1011.35739.clone (Arg_0.1650: f32[], Arg_1.1583: f32[]) -> f32[] {
  %Arg_0.1650 = f32[] parameter(0)
  %Arg_1.1583 = f32[] parameter(1)
  ROOT %add.1975 = f32[] add(%Arg_0.1650, %Arg_1.1583)
}

%region_1012.35746 (Arg_0.35743: f32[], Arg_1.35744: f32[]) -> f32[] {
  %Arg_0.35743 = f32[] parameter(0)
  %Arg_1.35744 = f32[] parameter(1)
  ROOT %add.35745 = f32[] add(%Arg_0.35743, %Arg_1.35744)
}

%region_1012.35746.clone (Arg_0.1651: f32[], Arg_1.1584: f32[]) -> f32[] {
  %Arg_0.1651 = f32[] parameter(0)
  %Arg_1.1584 = f32[] parameter(1)
  ROOT %add.1976 = f32[] add(%Arg_0.1651, %Arg_1.1584)
}

%region_1013.35753 (Arg_0.35750: f32[], Arg_1.35751: f32[]) -> f32[] {
  %Arg_0.35750 = f32[] parameter(0)
  %Arg_1.35751 = f32[] parameter(1)
  ROOT %add.35752 = f32[] add(%Arg_0.35750, %Arg_1.35751)
}

%region_1013.35753.clone (Arg_0.1652: f32[], Arg_1.1585: f32[]) -> f32[] {
  %Arg_0.1652 = f32[] parameter(0)
  %Arg_1.1585 = f32[] parameter(1)
  ROOT %add.1977 = f32[] add(%Arg_0.1652, %Arg_1.1585)
}

%region_1014.35760 (Arg_0.35757: f32[], Arg_1.35758: f32[]) -> f32[] {
  %Arg_0.35757 = f32[] parameter(0)
  %Arg_1.35758 = f32[] parameter(1)
  ROOT %add.35759 = f32[] add(%Arg_0.35757, %Arg_1.35758)
}

%region_1014.35760.clone (Arg_0.1653: f32[], Arg_1.1586: f32[]) -> f32[] {
  %Arg_0.1653 = f32[] parameter(0)
  %Arg_1.1586 = f32[] parameter(1)
  ROOT %add.1978 = f32[] add(%Arg_0.1653, %Arg_1.1586)
}

%region_1015.35767 (Arg_0.35764: f32[], Arg_1.35765: f32[]) -> f32[] {
  %Arg_0.35764 = f32[] parameter(0)
  %Arg_1.35765 = f32[] parameter(1)
  ROOT %add.35766 = f32[] add(%Arg_0.35764, %Arg_1.35765)
}

%region_1015.35767.clone (Arg_0.1654: f32[], Arg_1.1588: f32[]) -> f32[] {
  %Arg_0.1654 = f32[] parameter(0)
  %Arg_1.1588 = f32[] parameter(1)
  ROOT %add.1979 = f32[] add(%Arg_0.1654, %Arg_1.1588)
}

%region_1016.35774 (Arg_0.35771: f32[], Arg_1.35772: f32[]) -> f32[] {
  %Arg_0.35771 = f32[] parameter(0)
  %Arg_1.35772 = f32[] parameter(1)
  ROOT %add.35773 = f32[] add(%Arg_0.35771, %Arg_1.35772)
}

%region_1017.35781 (Arg_0.35778: f32[], Arg_1.35779: f32[]) -> f32[] {
  %Arg_0.35778 = f32[] parameter(0)
  %Arg_1.35779 = f32[] parameter(1)
  ROOT %add.35780 = f32[] add(%Arg_0.35778, %Arg_1.35779)
}

%region_1018.35788 (Arg_0.35785: f32[], Arg_1.35786: f32[]) -> f32[] {
  %Arg_0.35785 = f32[] parameter(0)
  %Arg_1.35786 = f32[] parameter(1)
  ROOT %add.35787 = f32[] add(%Arg_0.35785, %Arg_1.35786)
}

%region_1018.35788.clone (Arg_0.1656: f32[], Arg_1.1589: f32[]) -> f32[] {
  %Arg_0.1656 = f32[] parameter(0)
  %Arg_1.1589 = f32[] parameter(1)
  ROOT %add.1980 = f32[] add(%Arg_0.1656, %Arg_1.1589)
}

%region_1019.35795 (Arg_0.35792: f32[], Arg_1.35793: f32[]) -> f32[] {
  %Arg_0.35792 = f32[] parameter(0)
  %Arg_1.35793 = f32[] parameter(1)
  ROOT %add.35794 = f32[] add(%Arg_0.35792, %Arg_1.35793)
}

%region_1019.35795.clone (Arg_0.1657: f32[], Arg_1.1590: f32[]) -> f32[] {
  %Arg_0.1657 = f32[] parameter(0)
  %Arg_1.1590 = f32[] parameter(1)
  ROOT %add.1981 = f32[] add(%Arg_0.1657, %Arg_1.1590)
}

%region_1020.35802 (Arg_0.35799: f32[], Arg_1.35800: f32[]) -> f32[] {
  %Arg_0.35799 = f32[] parameter(0)
  %Arg_1.35800 = f32[] parameter(1)
  ROOT %add.35801 = f32[] add(%Arg_0.35799, %Arg_1.35800)
}

%region_1020.35802.clone (Arg_0.1658: f32[], Arg_1.1591: f32[]) -> f32[] {
  %Arg_0.1658 = f32[] parameter(0)
  %Arg_1.1591 = f32[] parameter(1)
  ROOT %add.1982 = f32[] add(%Arg_0.1658, %Arg_1.1591)
}

%region_1021.35809 (Arg_0.35806: f32[], Arg_1.35807: f32[]) -> f32[] {
  %Arg_0.35806 = f32[] parameter(0)
  %Arg_1.35807 = f32[] parameter(1)
  ROOT %add.35808 = f32[] add(%Arg_0.35806, %Arg_1.35807)
}

%region_1021.35809.clone (Arg_0.1659: f32[], Arg_1.1592: f32[]) -> f32[] {
  %Arg_0.1659 = f32[] parameter(0)
  %Arg_1.1592 = f32[] parameter(1)
  ROOT %add.1983 = f32[] add(%Arg_0.1659, %Arg_1.1592)
}

%region_1022.35816 (Arg_0.35813: f32[], Arg_1.35814: f32[]) -> f32[] {
  %Arg_0.35813 = f32[] parameter(0)
  %Arg_1.35814 = f32[] parameter(1)
  ROOT %add.35815 = f32[] add(%Arg_0.35813, %Arg_1.35814)
}

%region_1022.35816.clone (Arg_0.1660: f32[], Arg_1.1593: f32[]) -> f32[] {
  %Arg_0.1660 = f32[] parameter(0)
  %Arg_1.1593 = f32[] parameter(1)
  ROOT %add.1984 = f32[] add(%Arg_0.1660, %Arg_1.1593)
}

%region_1023.35823 (Arg_0.35820: f32[], Arg_1.35821: f32[]) -> f32[] {
  %Arg_0.35820 = f32[] parameter(0)
  %Arg_1.35821 = f32[] parameter(1)
  ROOT %add.35822 = f32[] add(%Arg_0.35820, %Arg_1.35821)
}

%region_1023.35823.clone (Arg_0.1661: f32[], Arg_1.1594: f32[]) -> f32[] {
  %Arg_0.1661 = f32[] parameter(0)
  %Arg_1.1594 = f32[] parameter(1)
  ROOT %add.1985 = f32[] add(%Arg_0.1661, %Arg_1.1594)
}

%region_1024.35830 (Arg_0.35827: f32[], Arg_1.35828: f32[]) -> f32[] {
  %Arg_0.35827 = f32[] parameter(0)
  %Arg_1.35828 = f32[] parameter(1)
  ROOT %add.35829 = f32[] add(%Arg_0.35827, %Arg_1.35828)
}

%region_1024.35830.clone (Arg_0.1662: f32[], Arg_1.1596: f32[]) -> f32[] {
  %Arg_0.1662 = f32[] parameter(0)
  %Arg_1.1596 = f32[] parameter(1)
  ROOT %add.1986 = f32[] add(%Arg_0.1662, %Arg_1.1596)
}

%region_1025.35837 (Arg_0.35834: f32[], Arg_1.35835: f32[]) -> f32[] {
  %Arg_0.35834 = f32[] parameter(0)
  %Arg_1.35835 = f32[] parameter(1)
  ROOT %add.35836 = f32[] add(%Arg_0.35834, %Arg_1.35835)
}

%region_1026.35844 (Arg_0.35841: f32[], Arg_1.35842: f32[]) -> f32[] {
  %Arg_0.35841 = f32[] parameter(0)
  %Arg_1.35842 = f32[] parameter(1)
  ROOT %add.35843 = f32[] add(%Arg_0.35841, %Arg_1.35842)
}

%region_1027.35851 (Arg_0.35848: f32[], Arg_1.35849: f32[]) -> f32[] {
  %Arg_0.35848 = f32[] parameter(0)
  %Arg_1.35849 = f32[] parameter(1)
  ROOT %add.35850 = f32[] add(%Arg_0.35848, %Arg_1.35849)
}

%region_1027.35851.clone (Arg_0.1663: f32[], Arg_1.1597: f32[]) -> f32[] {
  %Arg_0.1663 = f32[] parameter(0)
  %Arg_1.1597 = f32[] parameter(1)
  ROOT %add.1987 = f32[] add(%Arg_0.1663, %Arg_1.1597)
}

%region_1028.35858 (Arg_0.35855: f32[], Arg_1.35856: f32[]) -> f32[] {
  %Arg_0.35855 = f32[] parameter(0)
  %Arg_1.35856 = f32[] parameter(1)
  ROOT %add.35857 = f32[] add(%Arg_0.35855, %Arg_1.35856)
}

%region_1028.35858.clone (Arg_0.1664: f32[], Arg_1.1598: f32[]) -> f32[] {
  %Arg_0.1664 = f32[] parameter(0)
  %Arg_1.1598 = f32[] parameter(1)
  ROOT %add.1988 = f32[] add(%Arg_0.1664, %Arg_1.1598)
}

%region_1029.35865 (Arg_0.35862: f32[], Arg_1.35863: f32[]) -> f32[] {
  %Arg_0.35862 = f32[] parameter(0)
  %Arg_1.35863 = f32[] parameter(1)
  ROOT %add.35864 = f32[] add(%Arg_0.35862, %Arg_1.35863)
}

%region_1029.35865.clone (Arg_0.1665: f32[], Arg_1.1599: f32[]) -> f32[] {
  %Arg_0.1665 = f32[] parameter(0)
  %Arg_1.1599 = f32[] parameter(1)
  ROOT %add.1989 = f32[] add(%Arg_0.1665, %Arg_1.1599)
}

%region_1030.35872 (Arg_0.35869: f32[], Arg_1.35870: f32[]) -> f32[] {
  %Arg_0.35869 = f32[] parameter(0)
  %Arg_1.35870 = f32[] parameter(1)
  ROOT %add.35871 = f32[] add(%Arg_0.35869, %Arg_1.35870)
}

%region_1030.35872.clone (Arg_0.1666: f32[], Arg_1.1601: f32[]) -> f32[] {
  %Arg_0.1666 = f32[] parameter(0)
  %Arg_1.1601 = f32[] parameter(1)
  ROOT %add.1990 = f32[] add(%Arg_0.1666, %Arg_1.1601)
}

%region_1031.35879 (Arg_0.35876: f32[], Arg_1.35877: f32[]) -> f32[] {
  %Arg_0.35876 = f32[] parameter(0)
  %Arg_1.35877 = f32[] parameter(1)
  ROOT %add.35878 = f32[] add(%Arg_0.35876, %Arg_1.35877)
}

%region_1031.35879.clone (Arg_0.1667: f32[], Arg_1.1602: f32[]) -> f32[] {
  %Arg_0.1667 = f32[] parameter(0)
  %Arg_1.1602 = f32[] parameter(1)
  ROOT %add.1991 = f32[] add(%Arg_0.1667, %Arg_1.1602)
}

%region_1032.35886 (Arg_0.35883: f32[], Arg_1.35884: f32[]) -> f32[] {
  %Arg_0.35883 = f32[] parameter(0)
  %Arg_1.35884 = f32[] parameter(1)
  ROOT %add.35885 = f32[] add(%Arg_0.35883, %Arg_1.35884)
}

%region_1032.35886.clone (Arg_0.1668: f32[], Arg_1.1603: f32[]) -> f32[] {
  %Arg_0.1668 = f32[] parameter(0)
  %Arg_1.1603 = f32[] parameter(1)
  ROOT %add.1992 = f32[] add(%Arg_0.1668, %Arg_1.1603)
}

%region_1033.35893 (Arg_0.35890: f32[], Arg_1.35891: f32[]) -> f32[] {
  %Arg_0.35890 = f32[] parameter(0)
  %Arg_1.35891 = f32[] parameter(1)
  ROOT %add.35892 = f32[] add(%Arg_0.35890, %Arg_1.35891)
}

%region_1033.35893.clone (Arg_0.1669: f32[], Arg_1.1604: f32[]) -> f32[] {
  %Arg_0.1669 = f32[] parameter(0)
  %Arg_1.1604 = f32[] parameter(1)
  ROOT %add.1993 = f32[] add(%Arg_0.1669, %Arg_1.1604)
}

%region_1034.35900 (Arg_0.35897: f32[], Arg_1.35898: f32[]) -> f32[] {
  %Arg_0.35897 = f32[] parameter(0)
  %Arg_1.35898 = f32[] parameter(1)
  ROOT %add.35899 = f32[] add(%Arg_0.35897, %Arg_1.35898)
}

%region_1035.35907 (Arg_0.35904: f32[], Arg_1.35905: f32[]) -> f32[] {
  %Arg_0.35904 = f32[] parameter(0)
  %Arg_1.35905 = f32[] parameter(1)
  ROOT %add.35906 = f32[] add(%Arg_0.35904, %Arg_1.35905)
}

%region_1036.35914 (Arg_0.35911: f32[], Arg_1.35912: f32[]) -> f32[] {
  %Arg_0.35911 = f32[] parameter(0)
  %Arg_1.35912 = f32[] parameter(1)
  ROOT %add.35913 = f32[] add(%Arg_0.35911, %Arg_1.35912)
}

%region_1036.35914.clone (Arg_0.1670: f32[], Arg_1.1605: f32[]) -> f32[] {
  %Arg_0.1670 = f32[] parameter(0)
  %Arg_1.1605 = f32[] parameter(1)
  ROOT %add.1994 = f32[] add(%Arg_0.1670, %Arg_1.1605)
}

%region_1037.35921 (Arg_0.35918: f32[], Arg_1.35919: f32[]) -> f32[] {
  %Arg_0.35918 = f32[] parameter(0)
  %Arg_1.35919 = f32[] parameter(1)
  ROOT %add.35920 = f32[] add(%Arg_0.35918, %Arg_1.35919)
}

%region_1037.35921.clone (Arg_0.1671: f32[], Arg_1.1606: f32[]) -> f32[] {
  %Arg_0.1671 = f32[] parameter(0)
  %Arg_1.1606 = f32[] parameter(1)
  ROOT %add.1995 = f32[] add(%Arg_0.1671, %Arg_1.1606)
}

%region_1038.35928 (Arg_0.35925: f32[], Arg_1.35926: f32[]) -> f32[] {
  %Arg_0.35925 = f32[] parameter(0)
  %Arg_1.35926 = f32[] parameter(1)
  ROOT %add.35927 = f32[] add(%Arg_0.35925, %Arg_1.35926)
}

%region_1038.35928.clone (Arg_0.1672: f32[], Arg_1.1607: f32[]) -> f32[] {
  %Arg_0.1672 = f32[] parameter(0)
  %Arg_1.1607 = f32[] parameter(1)
  ROOT %add.1996 = f32[] add(%Arg_0.1672, %Arg_1.1607)
}

%region_1039.35935 (Arg_0.35932: f32[], Arg_1.35933: f32[]) -> f32[] {
  %Arg_0.35932 = f32[] parameter(0)
  %Arg_1.35933 = f32[] parameter(1)
  ROOT %add.35934 = f32[] add(%Arg_0.35932, %Arg_1.35933)
}

%region_1039.35935.clone (Arg_0.1673: f32[], Arg_1.1608: f32[]) -> f32[] {
  %Arg_0.1673 = f32[] parameter(0)
  %Arg_1.1608 = f32[] parameter(1)
  ROOT %add.1997 = f32[] add(%Arg_0.1673, %Arg_1.1608)
}

%region_1040.35942 (Arg_0.35939: f32[], Arg_1.35940: f32[]) -> f32[] {
  %Arg_0.35939 = f32[] parameter(0)
  %Arg_1.35940 = f32[] parameter(1)
  ROOT %add.35941 = f32[] add(%Arg_0.35939, %Arg_1.35940)
}

%region_1040.35942.clone (Arg_0.1674: f32[], Arg_1.1609: f32[]) -> f32[] {
  %Arg_0.1674 = f32[] parameter(0)
  %Arg_1.1609 = f32[] parameter(1)
  ROOT %add.1998 = f32[] add(%Arg_0.1674, %Arg_1.1609)
}

%region_1041.35949 (Arg_0.35946: f32[], Arg_1.35947: f32[]) -> f32[] {
  %Arg_0.35946 = f32[] parameter(0)
  %Arg_1.35947 = f32[] parameter(1)
  ROOT %add.35948 = f32[] add(%Arg_0.35946, %Arg_1.35947)
}

%region_1041.35949.clone (Arg_0.1675: f32[], Arg_1.1610: f32[]) -> f32[] {
  %Arg_0.1675 = f32[] parameter(0)
  %Arg_1.1610 = f32[] parameter(1)
  ROOT %add.1999 = f32[] add(%Arg_0.1675, %Arg_1.1610)
}

%region_1042.35956 (Arg_0.35953: f32[], Arg_1.35954: f32[]) -> f32[] {
  %Arg_0.35953 = f32[] parameter(0)
  %Arg_1.35954 = f32[] parameter(1)
  ROOT %add.35955 = f32[] add(%Arg_0.35953, %Arg_1.35954)
}

%region_1042.35956.clone (Arg_0.1676: f32[], Arg_1.1611: f32[]) -> f32[] {
  %Arg_0.1676 = f32[] parameter(0)
  %Arg_1.1611 = f32[] parameter(1)
  ROOT %add.2000 = f32[] add(%Arg_0.1676, %Arg_1.1611)
}

%region_1043.35963 (Arg_0.35960: f32[], Arg_1.35961: f32[]) -> f32[] {
  %Arg_0.35960 = f32[] parameter(0)
  %Arg_1.35961 = f32[] parameter(1)
  ROOT %add.35962 = f32[] add(%Arg_0.35960, %Arg_1.35961)
}

%region_1044.35970 (Arg_0.35967: f32[], Arg_1.35968: f32[]) -> f32[] {
  %Arg_0.35967 = f32[] parameter(0)
  %Arg_1.35968 = f32[] parameter(1)
  ROOT %add.35969 = f32[] add(%Arg_0.35967, %Arg_1.35968)
}

%region_1045.35977 (Arg_0.35974: f32[], Arg_1.35975: f32[]) -> f32[] {
  %Arg_0.35974 = f32[] parameter(0)
  %Arg_1.35975 = f32[] parameter(1)
  ROOT %add.35976 = f32[] add(%Arg_0.35974, %Arg_1.35975)
}

%region_1045.35977.clone (Arg_0.1677: f32[], Arg_1.1612: f32[]) -> f32[] {
  %Arg_0.1677 = f32[] parameter(0)
  %Arg_1.1612 = f32[] parameter(1)
  ROOT %add.2001 = f32[] add(%Arg_0.1677, %Arg_1.1612)
}

%region_1046.35984 (Arg_0.35981: f32[], Arg_1.35982: f32[]) -> f32[] {
  %Arg_0.35981 = f32[] parameter(0)
  %Arg_1.35982 = f32[] parameter(1)
  ROOT %add.35983 = f32[] add(%Arg_0.35981, %Arg_1.35982)
}

%region_1046.35984.clone (Arg_0.1678: f32[], Arg_1.1613: f32[]) -> f32[] {
  %Arg_0.1678 = f32[] parameter(0)
  %Arg_1.1613 = f32[] parameter(1)
  ROOT %add.2002 = f32[] add(%Arg_0.1678, %Arg_1.1613)
}

%region_1047.35991 (Arg_0.35988: f32[], Arg_1.35989: f32[]) -> f32[] {
  %Arg_0.35988 = f32[] parameter(0)
  %Arg_1.35989 = f32[] parameter(1)
  ROOT %add.35990 = f32[] add(%Arg_0.35988, %Arg_1.35989)
}

%region_1047.35991.clone (Arg_0.1679: f32[], Arg_1.1614: f32[]) -> f32[] {
  %Arg_0.1679 = f32[] parameter(0)
  %Arg_1.1614 = f32[] parameter(1)
  ROOT %add.2004 = f32[] add(%Arg_0.1679, %Arg_1.1614)
}

%region_1048.35998 (Arg_0.35995: f32[], Arg_1.35996: f32[]) -> f32[] {
  %Arg_0.35995 = f32[] parameter(0)
  %Arg_1.35996 = f32[] parameter(1)
  ROOT %add.35997 = f32[] add(%Arg_0.35995, %Arg_1.35996)
}

%region_1048.35998.clone (Arg_0.1680: f32[], Arg_1.1615: f32[]) -> f32[] {
  %Arg_0.1680 = f32[] parameter(0)
  %Arg_1.1615 = f32[] parameter(1)
  ROOT %add.2005 = f32[] add(%Arg_0.1680, %Arg_1.1615)
}

%region_1049.36005 (Arg_0.36002: f32[], Arg_1.36003: f32[]) -> f32[] {
  %Arg_0.36002 = f32[] parameter(0)
  %Arg_1.36003 = f32[] parameter(1)
  ROOT %add.36004 = f32[] add(%Arg_0.36002, %Arg_1.36003)
}

%region_1049.36005.clone (Arg_0.1681: f32[], Arg_1.1616: f32[]) -> f32[] {
  %Arg_0.1681 = f32[] parameter(0)
  %Arg_1.1616 = f32[] parameter(1)
  ROOT %add.2006 = f32[] add(%Arg_0.1681, %Arg_1.1616)
}

%region_1050.36012 (Arg_0.36009: f32[], Arg_1.36010: f32[]) -> f32[] {
  %Arg_0.36009 = f32[] parameter(0)
  %Arg_1.36010 = f32[] parameter(1)
  ROOT %add.36011 = f32[] add(%Arg_0.36009, %Arg_1.36010)
}

%region_1050.36012.clone (Arg_0.1682: f32[], Arg_1.1617: f32[]) -> f32[] {
  %Arg_0.1682 = f32[] parameter(0)
  %Arg_1.1617 = f32[] parameter(1)
  ROOT %add.2007 = f32[] add(%Arg_0.1682, %Arg_1.1617)
}

%region_1051.36019 (Arg_0.36016: f32[], Arg_1.36017: f32[]) -> f32[] {
  %Arg_0.36016 = f32[] parameter(0)
  %Arg_1.36017 = f32[] parameter(1)
  ROOT %add.36018 = f32[] add(%Arg_0.36016, %Arg_1.36017)
}

%region_1051.36019.clone (Arg_0.1683: f32[], Arg_1.1619: f32[]) -> f32[] {
  %Arg_0.1683 = f32[] parameter(0)
  %Arg_1.1619 = f32[] parameter(1)
  ROOT %add.2008 = f32[] add(%Arg_0.1683, %Arg_1.1619)
}

%region_1052.36026 (Arg_0.36023: f32[], Arg_1.36024: f32[]) -> f32[] {
  %Arg_0.36023 = f32[] parameter(0)
  %Arg_1.36024 = f32[] parameter(1)
  ROOT %add.36025 = f32[] add(%Arg_0.36023, %Arg_1.36024)
}

%region_1053.36033 (Arg_0.36030: f32[], Arg_1.36031: f32[]) -> f32[] {
  %Arg_0.36030 = f32[] parameter(0)
  %Arg_1.36031 = f32[] parameter(1)
  ROOT %add.36032 = f32[] add(%Arg_0.36030, %Arg_1.36031)
}

%region_1054.36040 (Arg_0.36037: f32[], Arg_1.36038: f32[]) -> f32[] {
  %Arg_0.36037 = f32[] parameter(0)
  %Arg_1.36038 = f32[] parameter(1)
  ROOT %add.36039 = f32[] add(%Arg_0.36037, %Arg_1.36038)
}

%region_1054.36040.clone (Arg_0.1684: f32[], Arg_1.1620: f32[]) -> f32[] {
  %Arg_0.1684 = f32[] parameter(0)
  %Arg_1.1620 = f32[] parameter(1)
  ROOT %add.2009 = f32[] add(%Arg_0.1684, %Arg_1.1620)
}

%region_1055.36047 (Arg_0.36044: f32[], Arg_1.36045: f32[]) -> f32[] {
  %Arg_0.36044 = f32[] parameter(0)
  %Arg_1.36045 = f32[] parameter(1)
  ROOT %add.36046 = f32[] add(%Arg_0.36044, %Arg_1.36045)
}

%region_1055.36047.clone (Arg_0.1685: f32[], Arg_1.1621: f32[]) -> f32[] {
  %Arg_0.1685 = f32[] parameter(0)
  %Arg_1.1621 = f32[] parameter(1)
  ROOT %add.2010 = f32[] add(%Arg_0.1685, %Arg_1.1621)
}

%region_1056.36054 (Arg_0.36051: f32[], Arg_1.36052: f32[]) -> f32[] {
  %Arg_0.36051 = f32[] parameter(0)
  %Arg_1.36052 = f32[] parameter(1)
  ROOT %add.36053 = f32[] add(%Arg_0.36051, %Arg_1.36052)
}

%region_1056.36054.clone (Arg_0.1686: f32[], Arg_1.1622: f32[]) -> f32[] {
  %Arg_0.1686 = f32[] parameter(0)
  %Arg_1.1622 = f32[] parameter(1)
  ROOT %add.2011 = f32[] add(%Arg_0.1686, %Arg_1.1622)
}

%region_1057.36061 (Arg_0.36058: f32[], Arg_1.36059: f32[]) -> f32[] {
  %Arg_0.36058 = f32[] parameter(0)
  %Arg_1.36059 = f32[] parameter(1)
  ROOT %add.36060 = f32[] add(%Arg_0.36058, %Arg_1.36059)
}

%region_1057.36061.clone (Arg_0.1687: f32[], Arg_1.1623: f32[]) -> f32[] {
  %Arg_0.1687 = f32[] parameter(0)
  %Arg_1.1623 = f32[] parameter(1)
  ROOT %add.2012 = f32[] add(%Arg_0.1687, %Arg_1.1623)
}

%region_1058.36068 (Arg_0.36065: f32[], Arg_1.36066: f32[]) -> f32[] {
  %Arg_0.36065 = f32[] parameter(0)
  %Arg_1.36066 = f32[] parameter(1)
  ROOT %add.36067 = f32[] add(%Arg_0.36065, %Arg_1.36066)
}

%region_1058.36068.clone (Arg_0.1688: f32[], Arg_1.1624: f32[]) -> f32[] {
  %Arg_0.1688 = f32[] parameter(0)
  %Arg_1.1624 = f32[] parameter(1)
  ROOT %add.2013 = f32[] add(%Arg_0.1688, %Arg_1.1624)
}

%region_1059.36075 (Arg_0.36072: f32[], Arg_1.36073: f32[]) -> f32[] {
  %Arg_0.36072 = f32[] parameter(0)
  %Arg_1.36073 = f32[] parameter(1)
  ROOT %add.36074 = f32[] add(%Arg_0.36072, %Arg_1.36073)
}

%region_1059.36075.clone (Arg_0.1689: f32[], Arg_1.1625: f32[]) -> f32[] {
  %Arg_0.1689 = f32[] parameter(0)
  %Arg_1.1625 = f32[] parameter(1)
  ROOT %add.2014 = f32[] add(%Arg_0.1689, %Arg_1.1625)
}

%region_1060.36082 (Arg_0.36079: f32[], Arg_1.36080: f32[]) -> f32[] {
  %Arg_0.36079 = f32[] parameter(0)
  %Arg_1.36080 = f32[] parameter(1)
  ROOT %add.36081 = f32[] add(%Arg_0.36079, %Arg_1.36080)
}

%region_1060.36082.clone (Arg_0.1690: f32[], Arg_1.1626: f32[]) -> f32[] {
  %Arg_0.1690 = f32[] parameter(0)
  %Arg_1.1626 = f32[] parameter(1)
  ROOT %add.2015 = f32[] add(%Arg_0.1690, %Arg_1.1626)
}

%region_1061.36089 (Arg_0.36086: f32[], Arg_1.36087: f32[]) -> f32[] {
  %Arg_0.36086 = f32[] parameter(0)
  %Arg_1.36087 = f32[] parameter(1)
  ROOT %add.36088 = f32[] add(%Arg_0.36086, %Arg_1.36087)
}

%region_1062.36096 (Arg_0.36093: f32[], Arg_1.36094: f32[]) -> f32[] {
  %Arg_0.36093 = f32[] parameter(0)
  %Arg_1.36094 = f32[] parameter(1)
  ROOT %add.36095 = f32[] add(%Arg_0.36093, %Arg_1.36094)
}

%region_1063.36103 (Arg_0.36100: f32[], Arg_1.36101: f32[]) -> f32[] {
  %Arg_0.36100 = f32[] parameter(0)
  %Arg_1.36101 = f32[] parameter(1)
  ROOT %add.36102 = f32[] add(%Arg_0.36100, %Arg_1.36101)
}

%region_1063.36103.clone (Arg_0.1691: f32[], Arg_1.1627: f32[]) -> f32[] {
  %Arg_0.1691 = f32[] parameter(0)
  %Arg_1.1627 = f32[] parameter(1)
  ROOT %add.2016 = f32[] add(%Arg_0.1691, %Arg_1.1627)
}

%region_1064.36110 (Arg_0.36107: f32[], Arg_1.36108: f32[]) -> f32[] {
  %Arg_0.36107 = f32[] parameter(0)
  %Arg_1.36108 = f32[] parameter(1)
  ROOT %add.36109 = f32[] add(%Arg_0.36107, %Arg_1.36108)
}

%region_1064.36110.clone (Arg_0.1692: f32[], Arg_1.1628: f32[]) -> f32[] {
  %Arg_0.1692 = f32[] parameter(0)
  %Arg_1.1628 = f32[] parameter(1)
  ROOT %add.2017 = f32[] add(%Arg_0.1692, %Arg_1.1628)
}

%region_1065.36117 (Arg_0.36114: f32[], Arg_1.36115: f32[]) -> f32[] {
  %Arg_0.36114 = f32[] parameter(0)
  %Arg_1.36115 = f32[] parameter(1)
  ROOT %add.36116 = f32[] add(%Arg_0.36114, %Arg_1.36115)
}

%region_1065.36117.clone (Arg_0.1693: f32[], Arg_1.1629: f32[]) -> f32[] {
  %Arg_0.1693 = f32[] parameter(0)
  %Arg_1.1629 = f32[] parameter(1)
  ROOT %add.2018 = f32[] add(%Arg_0.1693, %Arg_1.1629)
}

%region_1066.36124 (Arg_0.36121: f32[], Arg_1.36122: f32[]) -> f32[] {
  %Arg_0.36121 = f32[] parameter(0)
  %Arg_1.36122 = f32[] parameter(1)
  ROOT %add.36123 = f32[] add(%Arg_0.36121, %Arg_1.36122)
}

%region_1066.36124.clone (Arg_0.1694: f32[], Arg_1.1630: f32[]) -> f32[] {
  %Arg_0.1694 = f32[] parameter(0)
  %Arg_1.1630 = f32[] parameter(1)
  ROOT %add.2019 = f32[] add(%Arg_0.1694, %Arg_1.1630)
}

%region_1067.36131 (Arg_0.36128: f32[], Arg_1.36129: f32[]) -> f32[] {
  %Arg_0.36128 = f32[] parameter(0)
  %Arg_1.36129 = f32[] parameter(1)
  ROOT %add.36130 = f32[] add(%Arg_0.36128, %Arg_1.36129)
}

%region_1067.36131.clone (Arg_0.1695: f32[], Arg_1.1631: f32[]) -> f32[] {
  %Arg_0.1695 = f32[] parameter(0)
  %Arg_1.1631 = f32[] parameter(1)
  ROOT %add.2020 = f32[] add(%Arg_0.1695, %Arg_1.1631)
}

%region_1068.36138 (Arg_0.36135: f32[], Arg_1.36136: f32[]) -> f32[] {
  %Arg_0.36135 = f32[] parameter(0)
  %Arg_1.36136 = f32[] parameter(1)
  ROOT %add.36137 = f32[] add(%Arg_0.36135, %Arg_1.36136)
}

%region_1068.36138.clone (Arg_0.1696: f32[], Arg_1.1632: f32[]) -> f32[] {
  %Arg_0.1696 = f32[] parameter(0)
  %Arg_1.1632 = f32[] parameter(1)
  ROOT %add.2021 = f32[] add(%Arg_0.1696, %Arg_1.1632)
}

%region_1069.36145 (Arg_0.36142: f32[], Arg_1.36143: f32[]) -> f32[] {
  %Arg_0.36142 = f32[] parameter(0)
  %Arg_1.36143 = f32[] parameter(1)
  ROOT %add.36144 = f32[] add(%Arg_0.36142, %Arg_1.36143)
}

%region_1069.36145.clone (Arg_0.1697: f32[], Arg_1.1633: f32[]) -> f32[] {
  %Arg_0.1697 = f32[] parameter(0)
  %Arg_1.1633 = f32[] parameter(1)
  ROOT %add.2022 = f32[] add(%Arg_0.1697, %Arg_1.1633)
}

%region_1070.36152 (Arg_0.36149: f32[], Arg_1.36150: f32[]) -> f32[] {
  %Arg_0.36149 = f32[] parameter(0)
  %Arg_1.36150 = f32[] parameter(1)
  ROOT %add.36151 = f32[] add(%Arg_0.36149, %Arg_1.36150)
}

%region_1071.36159 (Arg_0.36156: f32[], Arg_1.36157: f32[]) -> f32[] {
  %Arg_0.36156 = f32[] parameter(0)
  %Arg_1.36157 = f32[] parameter(1)
  ROOT %add.36158 = f32[] add(%Arg_0.36156, %Arg_1.36157)
}

%region_1072.36166 (Arg_0.36163: f32[], Arg_1.36164: f32[]) -> f32[] {
  %Arg_0.36163 = f32[] parameter(0)
  %Arg_1.36164 = f32[] parameter(1)
  ROOT %add.36165 = f32[] add(%Arg_0.36163, %Arg_1.36164)
}

%region_1072.36166.clone (Arg_0.1698: f32[], Arg_1.1634: f32[]) -> f32[] {
  %Arg_0.1698 = f32[] parameter(0)
  %Arg_1.1634 = f32[] parameter(1)
  ROOT %add.2023 = f32[] add(%Arg_0.1698, %Arg_1.1634)
}

%region_1073.36173 (Arg_0.36170: f32[], Arg_1.36171: f32[]) -> f32[] {
  %Arg_0.36170 = f32[] parameter(0)
  %Arg_1.36171 = f32[] parameter(1)
  ROOT %add.36172 = f32[] add(%Arg_0.36170, %Arg_1.36171)
}

%region_1073.36173.clone (Arg_0.1699: f32[], Arg_1.1635: f32[]) -> f32[] {
  %Arg_0.1699 = f32[] parameter(0)
  %Arg_1.1635 = f32[] parameter(1)
  ROOT %add.2024 = f32[] add(%Arg_0.1699, %Arg_1.1635)
}

%region_1074.36180 (Arg_0.36177: f32[], Arg_1.36178: f32[]) -> f32[] {
  %Arg_0.36177 = f32[] parameter(0)
  %Arg_1.36178 = f32[] parameter(1)
  ROOT %add.36179 = f32[] add(%Arg_0.36177, %Arg_1.36178)
}

%region_1074.36180.clone (Arg_0.1700: f32[], Arg_1.1636: f32[]) -> f32[] {
  %Arg_0.1700 = f32[] parameter(0)
  %Arg_1.1636 = f32[] parameter(1)
  ROOT %add.2025 = f32[] add(%Arg_0.1700, %Arg_1.1636)
}

%region_1075.36187 (Arg_0.36184: f32[], Arg_1.36185: f32[]) -> f32[] {
  %Arg_0.36184 = f32[] parameter(0)
  %Arg_1.36185 = f32[] parameter(1)
  ROOT %add.36186 = f32[] add(%Arg_0.36184, %Arg_1.36185)
}

%region_1075.36187.clone (Arg_0.1701: f32[], Arg_1.1637: f32[]) -> f32[] {
  %Arg_0.1701 = f32[] parameter(0)
  %Arg_1.1637 = f32[] parameter(1)
  ROOT %add.2026 = f32[] add(%Arg_0.1701, %Arg_1.1637)
}

%region_1076.36194 (Arg_0.36191: f32[], Arg_1.36192: f32[]) -> f32[] {
  %Arg_0.36191 = f32[] parameter(0)
  %Arg_1.36192 = f32[] parameter(1)
  ROOT %add.36193 = f32[] add(%Arg_0.36191, %Arg_1.36192)
}

%region_1076.36194.clone (Arg_0.1702: f32[], Arg_1.1638: f32[]) -> f32[] {
  %Arg_0.1702 = f32[] parameter(0)
  %Arg_1.1638 = f32[] parameter(1)
  ROOT %add.2027 = f32[] add(%Arg_0.1702, %Arg_1.1638)
}

%region_1077.36201 (Arg_0.36198: f32[], Arg_1.36199: f32[]) -> f32[] {
  %Arg_0.36198 = f32[] parameter(0)
  %Arg_1.36199 = f32[] parameter(1)
  ROOT %add.36200 = f32[] add(%Arg_0.36198, %Arg_1.36199)
}

%region_1077.36201.clone (Arg_0.1703: f32[], Arg_1.1639: f32[]) -> f32[] {
  %Arg_0.1703 = f32[] parameter(0)
  %Arg_1.1639 = f32[] parameter(1)
  ROOT %add.2028 = f32[] add(%Arg_0.1703, %Arg_1.1639)
}

%region_1078.36208 (Arg_0.36205: f32[], Arg_1.36206: f32[]) -> f32[] {
  %Arg_0.36205 = f32[] parameter(0)
  %Arg_1.36206 = f32[] parameter(1)
  ROOT %add.36207 = f32[] add(%Arg_0.36205, %Arg_1.36206)
}

%region_1078.36208.clone (Arg_0.1704: f32[], Arg_1.1640: f32[]) -> f32[] {
  %Arg_0.1704 = f32[] parameter(0)
  %Arg_1.1640 = f32[] parameter(1)
  ROOT %add.2029 = f32[] add(%Arg_0.1704, %Arg_1.1640)
}

%region_1079.36215 (Arg_0.36212: f32[], Arg_1.36213: f32[]) -> f32[] {
  %Arg_0.36212 = f32[] parameter(0)
  %Arg_1.36213 = f32[] parameter(1)
  ROOT %add.36214 = f32[] add(%Arg_0.36212, %Arg_1.36213)
}

%region_1080.36222 (Arg_0.36219: f32[], Arg_1.36220: f32[]) -> f32[] {
  %Arg_0.36219 = f32[] parameter(0)
  %Arg_1.36220 = f32[] parameter(1)
  ROOT %add.36221 = f32[] add(%Arg_0.36219, %Arg_1.36220)
}

%region_1081.36229 (Arg_0.36226: f32[], Arg_1.36227: f32[]) -> f32[] {
  %Arg_0.36226 = f32[] parameter(0)
  %Arg_1.36227 = f32[] parameter(1)
  ROOT %add.36228 = f32[] add(%Arg_0.36226, %Arg_1.36227)
}

%region_1081.36229.clone (Arg_0.1705: f32[], Arg_1.1641: f32[]) -> f32[] {
  %Arg_0.1705 = f32[] parameter(0)
  %Arg_1.1641 = f32[] parameter(1)
  ROOT %add.2030 = f32[] add(%Arg_0.1705, %Arg_1.1641)
}

%region_1082.36236 (Arg_0.36233: f32[], Arg_1.36234: f32[]) -> f32[] {
  %Arg_0.36233 = f32[] parameter(0)
  %Arg_1.36234 = f32[] parameter(1)
  ROOT %add.36235 = f32[] add(%Arg_0.36233, %Arg_1.36234)
}

%region_1082.36236.clone (Arg_0.1706: f32[], Arg_1.1642: f32[]) -> f32[] {
  %Arg_0.1706 = f32[] parameter(0)
  %Arg_1.1642 = f32[] parameter(1)
  ROOT %add.2031 = f32[] add(%Arg_0.1706, %Arg_1.1642)
}

%region_1083.36243 (Arg_0.36240: f32[], Arg_1.36241: f32[]) -> f32[] {
  %Arg_0.36240 = f32[] parameter(0)
  %Arg_1.36241 = f32[] parameter(1)
  ROOT %add.36242 = f32[] add(%Arg_0.36240, %Arg_1.36241)
}

%region_1083.36243.clone (Arg_0.1707: f32[], Arg_1.1643: f32[]) -> f32[] {
  %Arg_0.1707 = f32[] parameter(0)
  %Arg_1.1643 = f32[] parameter(1)
  ROOT %add.2032 = f32[] add(%Arg_0.1707, %Arg_1.1643)
}

%region_1084.36250 (Arg_0.36247: f32[], Arg_1.36248: f32[]) -> f32[] {
  %Arg_0.36247 = f32[] parameter(0)
  %Arg_1.36248 = f32[] parameter(1)
  ROOT %add.36249 = f32[] add(%Arg_0.36247, %Arg_1.36248)
}

%region_1084.36250.clone (Arg_0.1708: f32[], Arg_1.1644: f32[]) -> f32[] {
  %Arg_0.1708 = f32[] parameter(0)
  %Arg_1.1644 = f32[] parameter(1)
  ROOT %add.2033 = f32[] add(%Arg_0.1708, %Arg_1.1644)
}

%region_1085.36257 (Arg_0.36254: f32[], Arg_1.36255: f32[]) -> f32[] {
  %Arg_0.36254 = f32[] parameter(0)
  %Arg_1.36255 = f32[] parameter(1)
  ROOT %add.36256 = f32[] add(%Arg_0.36254, %Arg_1.36255)
}

%region_1085.36257.clone (Arg_0.1709: f32[], Arg_1.1645: f32[]) -> f32[] {
  %Arg_0.1709 = f32[] parameter(0)
  %Arg_1.1645 = f32[] parameter(1)
  ROOT %add.2034 = f32[] add(%Arg_0.1709, %Arg_1.1645)
}

%region_1086.36264 (Arg_0.36261: f32[], Arg_1.36262: f32[]) -> f32[] {
  %Arg_0.36261 = f32[] parameter(0)
  %Arg_1.36262 = f32[] parameter(1)
  ROOT %add.36263 = f32[] add(%Arg_0.36261, %Arg_1.36262)
}

%region_1086.36264.clone (Arg_0.1710: f32[], Arg_1.1646: f32[]) -> f32[] {
  %Arg_0.1710 = f32[] parameter(0)
  %Arg_1.1646 = f32[] parameter(1)
  ROOT %add.2035 = f32[] add(%Arg_0.1710, %Arg_1.1646)
}

%region_1087.36271 (Arg_0.36268: f32[], Arg_1.36269: f32[]) -> f32[] {
  %Arg_0.36268 = f32[] parameter(0)
  %Arg_1.36269 = f32[] parameter(1)
  ROOT %add.36270 = f32[] add(%Arg_0.36268, %Arg_1.36269)
}

%region_1087.36271.clone (Arg_0.1711: f32[], Arg_1.1647: f32[]) -> f32[] {
  %Arg_0.1711 = f32[] parameter(0)
  %Arg_1.1647 = f32[] parameter(1)
  ROOT %add.2036 = f32[] add(%Arg_0.1711, %Arg_1.1647)
}

%region_1088.36278 (Arg_0.36275: f32[], Arg_1.36276: f32[]) -> f32[] {
  %Arg_0.36275 = f32[] parameter(0)
  %Arg_1.36276 = f32[] parameter(1)
  ROOT %add.36277 = f32[] add(%Arg_0.36275, %Arg_1.36276)
}

%region_1089.36285 (Arg_0.36282: f32[], Arg_1.36283: f32[]) -> f32[] {
  %Arg_0.36282 = f32[] parameter(0)
  %Arg_1.36283 = f32[] parameter(1)
  ROOT %add.36284 = f32[] add(%Arg_0.36282, %Arg_1.36283)
}

%region_1090.36292 (Arg_0.36289: f32[], Arg_1.36290: f32[]) -> f32[] {
  %Arg_0.36289 = f32[] parameter(0)
  %Arg_1.36290 = f32[] parameter(1)
  ROOT %add.36291 = f32[] add(%Arg_0.36289, %Arg_1.36290)
}

%region_1090.36292.clone (Arg_0.1712: f32[], Arg_1.1648: f32[]) -> f32[] {
  %Arg_0.1712 = f32[] parameter(0)
  %Arg_1.1648 = f32[] parameter(1)
  ROOT %add.2037 = f32[] add(%Arg_0.1712, %Arg_1.1648)
}

%region_1091.36299 (Arg_0.36296: f32[], Arg_1.36297: f32[]) -> f32[] {
  %Arg_0.36296 = f32[] parameter(0)
  %Arg_1.36297 = f32[] parameter(1)
  ROOT %add.36298 = f32[] add(%Arg_0.36296, %Arg_1.36297)
}

%region_1091.36299.clone (Arg_0.1713: f32[], Arg_1.1649: f32[]) -> f32[] {
  %Arg_0.1713 = f32[] parameter(0)
  %Arg_1.1649 = f32[] parameter(1)
  ROOT %add.2038 = f32[] add(%Arg_0.1713, %Arg_1.1649)
}

%region_1092.36306 (Arg_0.36303: f32[], Arg_1.36304: f32[]) -> f32[] {
  %Arg_0.36303 = f32[] parameter(0)
  %Arg_1.36304 = f32[] parameter(1)
  ROOT %add.36305 = f32[] add(%Arg_0.36303, %Arg_1.36304)
}

%region_1092.36306.clone (Arg_0.1714: f32[], Arg_1.1650: f32[]) -> f32[] {
  %Arg_0.1714 = f32[] parameter(0)
  %Arg_1.1650 = f32[] parameter(1)
  ROOT %add.2039 = f32[] add(%Arg_0.1714, %Arg_1.1650)
}

%region_1093.36313 (Arg_0.36310: f32[], Arg_1.36311: f32[]) -> f32[] {
  %Arg_0.36310 = f32[] parameter(0)
  %Arg_1.36311 = f32[] parameter(1)
  ROOT %add.36312 = f32[] add(%Arg_0.36310, %Arg_1.36311)
}

%region_1093.36313.clone (Arg_0.1715: f32[], Arg_1.1651: f32[]) -> f32[] {
  %Arg_0.1715 = f32[] parameter(0)
  %Arg_1.1651 = f32[] parameter(1)
  ROOT %add.2040 = f32[] add(%Arg_0.1715, %Arg_1.1651)
}

%region_1094.36320 (Arg_0.36317: f32[], Arg_1.36318: f32[]) -> f32[] {
  %Arg_0.36317 = f32[] parameter(0)
  %Arg_1.36318 = f32[] parameter(1)
  ROOT %add.36319 = f32[] add(%Arg_0.36317, %Arg_1.36318)
}

%region_1094.36320.clone (Arg_0.1716: f32[], Arg_1.1652: f32[]) -> f32[] {
  %Arg_0.1716 = f32[] parameter(0)
  %Arg_1.1652 = f32[] parameter(1)
  ROOT %add.2042 = f32[] add(%Arg_0.1716, %Arg_1.1652)
}

%region_1095.36327 (Arg_0.36324: f32[], Arg_1.36325: f32[]) -> f32[] {
  %Arg_0.36324 = f32[] parameter(0)
  %Arg_1.36325 = f32[] parameter(1)
  ROOT %add.36326 = f32[] add(%Arg_0.36324, %Arg_1.36325)
}

%region_1095.36327.clone (Arg_0.1717: f32[], Arg_1.1653: f32[]) -> f32[] {
  %Arg_0.1717 = f32[] parameter(0)
  %Arg_1.1653 = f32[] parameter(1)
  ROOT %add.2043 = f32[] add(%Arg_0.1717, %Arg_1.1653)
}

%region_1096.36334 (Arg_0.36331: f32[], Arg_1.36332: f32[]) -> f32[] {
  %Arg_0.36331 = f32[] parameter(0)
  %Arg_1.36332 = f32[] parameter(1)
  ROOT %add.36333 = f32[] add(%Arg_0.36331, %Arg_1.36332)
}

%region_1096.36334.clone (Arg_0.1718: f32[], Arg_1.1654: f32[]) -> f32[] {
  %Arg_0.1718 = f32[] parameter(0)
  %Arg_1.1654 = f32[] parameter(1)
  ROOT %add.2044 = f32[] add(%Arg_0.1718, %Arg_1.1654)
}

%region_1097.36341 (Arg_0.36338: f32[], Arg_1.36339: f32[]) -> f32[] {
  %Arg_0.36338 = f32[] parameter(0)
  %Arg_1.36339 = f32[] parameter(1)
  ROOT %add.36340 = f32[] add(%Arg_0.36338, %Arg_1.36339)
}

%region_1098.36348 (Arg_0.36345: f32[], Arg_1.36346: f32[]) -> f32[] {
  %Arg_0.36345 = f32[] parameter(0)
  %Arg_1.36346 = f32[] parameter(1)
  ROOT %add.36347 = f32[] add(%Arg_0.36345, %Arg_1.36346)
}

%region_1099.36355 (Arg_0.36352: f32[], Arg_1.36353: f32[]) -> f32[] {
  %Arg_0.36352 = f32[] parameter(0)
  %Arg_1.36353 = f32[] parameter(1)
  ROOT %add.36354 = f32[] add(%Arg_0.36352, %Arg_1.36353)
}

%region_1099.36355.clone (Arg_0.1719: f32[], Arg_1.1655: f32[]) -> f32[] {
  %Arg_0.1719 = f32[] parameter(0)
  %Arg_1.1655 = f32[] parameter(1)
  ROOT %add.2045 = f32[] add(%Arg_0.1719, %Arg_1.1655)
}

%region_1100.36362 (Arg_0.36359: f32[], Arg_1.36360: f32[]) -> f32[] {
  %Arg_0.36359 = f32[] parameter(0)
  %Arg_1.36360 = f32[] parameter(1)
  ROOT %add.36361 = f32[] add(%Arg_0.36359, %Arg_1.36360)
}

%region_1100.36362.clone (Arg_0.1720: f32[], Arg_1.1657: f32[]) -> f32[] {
  %Arg_0.1720 = f32[] parameter(0)
  %Arg_1.1657 = f32[] parameter(1)
  ROOT %add.2046 = f32[] add(%Arg_0.1720, %Arg_1.1657)
}

%region_1101.36369 (Arg_0.36366: f32[], Arg_1.36367: f32[]) -> f32[] {
  %Arg_0.36366 = f32[] parameter(0)
  %Arg_1.36367 = f32[] parameter(1)
  ROOT %add.36368 = f32[] add(%Arg_0.36366, %Arg_1.36367)
}

%region_1101.36369.clone (Arg_0.1721: f32[], Arg_1.1658: f32[]) -> f32[] {
  %Arg_0.1721 = f32[] parameter(0)
  %Arg_1.1658 = f32[] parameter(1)
  ROOT %add.2047 = f32[] add(%Arg_0.1721, %Arg_1.1658)
}

%region_1102.36376 (Arg_0.36373: f32[], Arg_1.36374: f32[]) -> f32[] {
  %Arg_0.36373 = f32[] parameter(0)
  %Arg_1.36374 = f32[] parameter(1)
  ROOT %add.36375 = f32[] add(%Arg_0.36373, %Arg_1.36374)
}

%region_1102.36376.clone (Arg_0.1722: f32[], Arg_1.1659: f32[]) -> f32[] {
  %Arg_0.1722 = f32[] parameter(0)
  %Arg_1.1659 = f32[] parameter(1)
  ROOT %add.2048 = f32[] add(%Arg_0.1722, %Arg_1.1659)
}

%region_1103.36383 (Arg_0.36380: f32[], Arg_1.36381: f32[]) -> f32[] {
  %Arg_0.36380 = f32[] parameter(0)
  %Arg_1.36381 = f32[] parameter(1)
  ROOT %add.36382 = f32[] add(%Arg_0.36380, %Arg_1.36381)
}

%region_1103.36383.clone (Arg_0.1723: f32[], Arg_1.1660: f32[]) -> f32[] {
  %Arg_0.1723 = f32[] parameter(0)
  %Arg_1.1660 = f32[] parameter(1)
  ROOT %add.2049 = f32[] add(%Arg_0.1723, %Arg_1.1660)
}

%region_1104.36390 (Arg_0.36387: f32[], Arg_1.36388: f32[]) -> f32[] {
  %Arg_0.36387 = f32[] parameter(0)
  %Arg_1.36388 = f32[] parameter(1)
  ROOT %add.36389 = f32[] add(%Arg_0.36387, %Arg_1.36388)
}

%region_1104.36390.clone (Arg_0.1724: f32[], Arg_1.1661: f32[]) -> f32[] {
  %Arg_0.1724 = f32[] parameter(0)
  %Arg_1.1661 = f32[] parameter(1)
  ROOT %add.2050 = f32[] add(%Arg_0.1724, %Arg_1.1661)
}

%region_1105.36397 (Arg_0.36394: f32[], Arg_1.36395: f32[]) -> f32[] {
  %Arg_0.36394 = f32[] parameter(0)
  %Arg_1.36395 = f32[] parameter(1)
  ROOT %add.36396 = f32[] add(%Arg_0.36394, %Arg_1.36395)
}

%region_1105.36397.clone (Arg_0.1725: f32[], Arg_1.1662: f32[]) -> f32[] {
  %Arg_0.1725 = f32[] parameter(0)
  %Arg_1.1662 = f32[] parameter(1)
  ROOT %add.2051 = f32[] add(%Arg_0.1725, %Arg_1.1662)
}

%region_1106.36404 (Arg_0.36401: f32[], Arg_1.36402: f32[]) -> f32[] {
  %Arg_0.36401 = f32[] parameter(0)
  %Arg_1.36402 = f32[] parameter(1)
  ROOT %add.36403 = f32[] add(%Arg_0.36401, %Arg_1.36402)
}

%region_1107.36411 (Arg_0.36408: f32[], Arg_1.36409: f32[]) -> f32[] {
  %Arg_0.36408 = f32[] parameter(0)
  %Arg_1.36409 = f32[] parameter(1)
  ROOT %add.36410 = f32[] add(%Arg_0.36408, %Arg_1.36409)
}

%region_1108.36418 (Arg_0.36415: f32[], Arg_1.36416: f32[]) -> f32[] {
  %Arg_0.36415 = f32[] parameter(0)
  %Arg_1.36416 = f32[] parameter(1)
  ROOT %add.36417 = f32[] add(%Arg_0.36415, %Arg_1.36416)
}

%region_1108.36418.clone (Arg_0.1726: f32[], Arg_1.1663: f32[]) -> f32[] {
  %Arg_0.1726 = f32[] parameter(0)
  %Arg_1.1663 = f32[] parameter(1)
  ROOT %add.2052 = f32[] add(%Arg_0.1726, %Arg_1.1663)
}

%region_1109.36425 (Arg_0.36422: f32[], Arg_1.36423: f32[]) -> f32[] {
  %Arg_0.36422 = f32[] parameter(0)
  %Arg_1.36423 = f32[] parameter(1)
  ROOT %add.36424 = f32[] add(%Arg_0.36422, %Arg_1.36423)
}

%region_1109.36425.clone (Arg_0.1727: f32[], Arg_1.1664: f32[]) -> f32[] {
  %Arg_0.1727 = f32[] parameter(0)
  %Arg_1.1664 = f32[] parameter(1)
  ROOT %add.2053 = f32[] add(%Arg_0.1727, %Arg_1.1664)
}

%region_1110.36432 (Arg_0.36429: f32[], Arg_1.36430: f32[]) -> f32[] {
  %Arg_0.36429 = f32[] parameter(0)
  %Arg_1.36430 = f32[] parameter(1)
  ROOT %add.36431 = f32[] add(%Arg_0.36429, %Arg_1.36430)
}

%region_1110.36432.clone (Arg_0.1728: f32[], Arg_1.1665: f32[]) -> f32[] {
  %Arg_0.1728 = f32[] parameter(0)
  %Arg_1.1665 = f32[] parameter(1)
  ROOT %add.2054 = f32[] add(%Arg_0.1728, %Arg_1.1665)
}

%region_1111.36439 (Arg_0.36436: f32[], Arg_1.36437: f32[]) -> f32[] {
  %Arg_0.36436 = f32[] parameter(0)
  %Arg_1.36437 = f32[] parameter(1)
  ROOT %add.36438 = f32[] add(%Arg_0.36436, %Arg_1.36437)
}

%region_1111.36439.clone (Arg_0.1729: f32[], Arg_1.1666: f32[]) -> f32[] {
  %Arg_0.1729 = f32[] parameter(0)
  %Arg_1.1666 = f32[] parameter(1)
  ROOT %add.2055 = f32[] add(%Arg_0.1729, %Arg_1.1666)
}

%region_1112.36446 (Arg_0.36443: f32[], Arg_1.36444: f32[]) -> f32[] {
  %Arg_0.36443 = f32[] parameter(0)
  %Arg_1.36444 = f32[] parameter(1)
  ROOT %add.36445 = f32[] add(%Arg_0.36443, %Arg_1.36444)
}

%region_1112.36446.clone (Arg_0.1730: f32[], Arg_1.1667: f32[]) -> f32[] {
  %Arg_0.1730 = f32[] parameter(0)
  %Arg_1.1667 = f32[] parameter(1)
  ROOT %add.2056 = f32[] add(%Arg_0.1730, %Arg_1.1667)
}

%region_1113.36453 (Arg_0.36450: f32[], Arg_1.36451: f32[]) -> f32[] {
  %Arg_0.36450 = f32[] parameter(0)
  %Arg_1.36451 = f32[] parameter(1)
  ROOT %add.36452 = f32[] add(%Arg_0.36450, %Arg_1.36451)
}

%region_1113.36453.clone (Arg_0.1731: f32[], Arg_1.1668: f32[]) -> f32[] {
  %Arg_0.1731 = f32[] parameter(0)
  %Arg_1.1668 = f32[] parameter(1)
  ROOT %add.2057 = f32[] add(%Arg_0.1731, %Arg_1.1668)
}

%region_1114.36460 (Arg_0.36457: f32[], Arg_1.36458: f32[]) -> f32[] {
  %Arg_0.36457 = f32[] parameter(0)
  %Arg_1.36458 = f32[] parameter(1)
  ROOT %add.36459 = f32[] add(%Arg_0.36457, %Arg_1.36458)
}

%region_1114.36460.clone (Arg_0.1732: f32[], Arg_1.1669: f32[]) -> f32[] {
  %Arg_0.1732 = f32[] parameter(0)
  %Arg_1.1669 = f32[] parameter(1)
  ROOT %add.2058 = f32[] add(%Arg_0.1732, %Arg_1.1669)
}

%region_1115.36467 (Arg_0.36464: f32[], Arg_1.36465: f32[]) -> f32[] {
  %Arg_0.36464 = f32[] parameter(0)
  %Arg_1.36465 = f32[] parameter(1)
  ROOT %add.36466 = f32[] add(%Arg_0.36464, %Arg_1.36465)
}

%region_1116.36474 (Arg_0.36471: f32[], Arg_1.36472: f32[]) -> f32[] {
  %Arg_0.36471 = f32[] parameter(0)
  %Arg_1.36472 = f32[] parameter(1)
  ROOT %add.36473 = f32[] add(%Arg_0.36471, %Arg_1.36472)
}

%region_1117.36481 (Arg_0.36478: f32[], Arg_1.36479: f32[]) -> f32[] {
  %Arg_0.36478 = f32[] parameter(0)
  %Arg_1.36479 = f32[] parameter(1)
  ROOT %add.36480 = f32[] add(%Arg_0.36478, %Arg_1.36479)
}

%region_1117.36481.clone (Arg_0.1733: f32[], Arg_1.1670: f32[]) -> f32[] {
  %Arg_0.1733 = f32[] parameter(0)
  %Arg_1.1670 = f32[] parameter(1)
  ROOT %add.2059 = f32[] add(%Arg_0.1733, %Arg_1.1670)
}

%region_1118.36488 (Arg_0.36485: f32[], Arg_1.36486: f32[]) -> f32[] {
  %Arg_0.36485 = f32[] parameter(0)
  %Arg_1.36486 = f32[] parameter(1)
  ROOT %add.36487 = f32[] add(%Arg_0.36485, %Arg_1.36486)
}

%region_1118.36488.clone (Arg_0.1734: f32[], Arg_1.1671: f32[]) -> f32[] {
  %Arg_0.1734 = f32[] parameter(0)
  %Arg_1.1671 = f32[] parameter(1)
  ROOT %add.2060 = f32[] add(%Arg_0.1734, %Arg_1.1671)
}

%region_1119.36495 (Arg_0.36492: f32[], Arg_1.36493: f32[]) -> f32[] {
  %Arg_0.36492 = f32[] parameter(0)
  %Arg_1.36493 = f32[] parameter(1)
  ROOT %add.36494 = f32[] add(%Arg_0.36492, %Arg_1.36493)
}

%region_1119.36495.clone (Arg_0.1735: f32[], Arg_1.1672: f32[]) -> f32[] {
  %Arg_0.1735 = f32[] parameter(0)
  %Arg_1.1672 = f32[] parameter(1)
  ROOT %add.2061 = f32[] add(%Arg_0.1735, %Arg_1.1672)
}

%region_1120.36502 (Arg_0.36499: f32[], Arg_1.36500: f32[]) -> f32[] {
  %Arg_0.36499 = f32[] parameter(0)
  %Arg_1.36500 = f32[] parameter(1)
  ROOT %add.36501 = f32[] add(%Arg_0.36499, %Arg_1.36500)
}

%region_1120.36502.clone (Arg_0.1736: f32[], Arg_1.1673: f32[]) -> f32[] {
  %Arg_0.1736 = f32[] parameter(0)
  %Arg_1.1673 = f32[] parameter(1)
  ROOT %add.2062 = f32[] add(%Arg_0.1736, %Arg_1.1673)
}

%region_1121.36509 (Arg_0.36506: f32[], Arg_1.36507: f32[]) -> f32[] {
  %Arg_0.36506 = f32[] parameter(0)
  %Arg_1.36507 = f32[] parameter(1)
  ROOT %add.36508 = f32[] add(%Arg_0.36506, %Arg_1.36507)
}

%region_1121.36509.clone (Arg_0.1737: f32[], Arg_1.1674: f32[]) -> f32[] {
  %Arg_0.1737 = f32[] parameter(0)
  %Arg_1.1674 = f32[] parameter(1)
  ROOT %add.2063 = f32[] add(%Arg_0.1737, %Arg_1.1674)
}

%region_1122.36516 (Arg_0.36513: f32[], Arg_1.36514: f32[]) -> f32[] {
  %Arg_0.36513 = f32[] parameter(0)
  %Arg_1.36514 = f32[] parameter(1)
  ROOT %add.36515 = f32[] add(%Arg_0.36513, %Arg_1.36514)
}

%region_1122.36516.clone (Arg_0.1738: f32[], Arg_1.1675: f32[]) -> f32[] {
  %Arg_0.1738 = f32[] parameter(0)
  %Arg_1.1675 = f32[] parameter(1)
  ROOT %add.2064 = f32[] add(%Arg_0.1738, %Arg_1.1675)
}

%region_1123.36523 (Arg_0.36520: f32[], Arg_1.36521: f32[]) -> f32[] {
  %Arg_0.36520 = f32[] parameter(0)
  %Arg_1.36521 = f32[] parameter(1)
  ROOT %add.36522 = f32[] add(%Arg_0.36520, %Arg_1.36521)
}

%region_1123.36523.clone (Arg_0.1739: f32[], Arg_1.1676: f32[]) -> f32[] {
  %Arg_0.1739 = f32[] parameter(0)
  %Arg_1.1676 = f32[] parameter(1)
  ROOT %add.2065 = f32[] add(%Arg_0.1739, %Arg_1.1676)
}

%region_1124.36530 (Arg_0.36527: f32[], Arg_1.36528: f32[]) -> f32[] {
  %Arg_0.36527 = f32[] parameter(0)
  %Arg_1.36528 = f32[] parameter(1)
  ROOT %add.36529 = f32[] add(%Arg_0.36527, %Arg_1.36528)
}

%region_1125.36537 (Arg_0.36534: f32[], Arg_1.36535: f32[]) -> f32[] {
  %Arg_0.36534 = f32[] parameter(0)
  %Arg_1.36535 = f32[] parameter(1)
  ROOT %add.36536 = f32[] add(%Arg_0.36534, %Arg_1.36535)
}

%region_1126.36544 (Arg_0.36541: f32[], Arg_1.36542: f32[]) -> f32[] {
  %Arg_0.36541 = f32[] parameter(0)
  %Arg_1.36542 = f32[] parameter(1)
  ROOT %add.36543 = f32[] add(%Arg_0.36541, %Arg_1.36542)
}

%region_1126.36544.clone (Arg_0.1740: f32[], Arg_1.1677: f32[]) -> f32[] {
  %Arg_0.1740 = f32[] parameter(0)
  %Arg_1.1677 = f32[] parameter(1)
  ROOT %add.2066 = f32[] add(%Arg_0.1740, %Arg_1.1677)
}

%region_1127.36551 (Arg_0.36548: f32[], Arg_1.36549: f32[]) -> f32[] {
  %Arg_0.36548 = f32[] parameter(0)
  %Arg_1.36549 = f32[] parameter(1)
  ROOT %add.36550 = f32[] add(%Arg_0.36548, %Arg_1.36549)
}

%region_1127.36551.clone (Arg_0.1741: f32[], Arg_1.1678: f32[]) -> f32[] {
  %Arg_0.1741 = f32[] parameter(0)
  %Arg_1.1678 = f32[] parameter(1)
  ROOT %add.2067 = f32[] add(%Arg_0.1741, %Arg_1.1678)
}

%region_1128.36558 (Arg_0.36555: f32[], Arg_1.36556: f32[]) -> f32[] {
  %Arg_0.36555 = f32[] parameter(0)
  %Arg_1.36556 = f32[] parameter(1)
  ROOT %add.36557 = f32[] add(%Arg_0.36555, %Arg_1.36556)
}

%region_1128.36558.clone (Arg_0.1742: f32[], Arg_1.1679: f32[]) -> f32[] {
  %Arg_0.1742 = f32[] parameter(0)
  %Arg_1.1679 = f32[] parameter(1)
  ROOT %add.2068 = f32[] add(%Arg_0.1742, %Arg_1.1679)
}

%region_1129.36565 (Arg_0.36562: f32[], Arg_1.36563: f32[]) -> f32[] {
  %Arg_0.36562 = f32[] parameter(0)
  %Arg_1.36563 = f32[] parameter(1)
  ROOT %add.36564 = f32[] add(%Arg_0.36562, %Arg_1.36563)
}

%region_1129.36565.clone (Arg_0.1743: f32[], Arg_1.1680: f32[]) -> f32[] {
  %Arg_0.1743 = f32[] parameter(0)
  %Arg_1.1680 = f32[] parameter(1)
  ROOT %add.2069 = f32[] add(%Arg_0.1743, %Arg_1.1680)
}

%region_1130.36572 (Arg_0.36569: f32[], Arg_1.36570: f32[]) -> f32[] {
  %Arg_0.36569 = f32[] parameter(0)
  %Arg_1.36570 = f32[] parameter(1)
  ROOT %add.36571 = f32[] add(%Arg_0.36569, %Arg_1.36570)
}

%region_1130.36572.clone (Arg_0.1744: f32[], Arg_1.1681: f32[]) -> f32[] {
  %Arg_0.1744 = f32[] parameter(0)
  %Arg_1.1681 = f32[] parameter(1)
  ROOT %add.2070 = f32[] add(%Arg_0.1744, %Arg_1.1681)
}

%region_1131.36579 (Arg_0.36576: f32[], Arg_1.36577: f32[]) -> f32[] {
  %Arg_0.36576 = f32[] parameter(0)
  %Arg_1.36577 = f32[] parameter(1)
  ROOT %add.36578 = f32[] add(%Arg_0.36576, %Arg_1.36577)
}

%region_1131.36579.clone (Arg_0.1745: f32[], Arg_1.1682: f32[]) -> f32[] {
  %Arg_0.1745 = f32[] parameter(0)
  %Arg_1.1682 = f32[] parameter(1)
  ROOT %add.2071 = f32[] add(%Arg_0.1745, %Arg_1.1682)
}

%region_1132.36586 (Arg_0.36583: f32[], Arg_1.36584: f32[]) -> f32[] {
  %Arg_0.36583 = f32[] parameter(0)
  %Arg_1.36584 = f32[] parameter(1)
  ROOT %add.36585 = f32[] add(%Arg_0.36583, %Arg_1.36584)
}

%region_1132.36586.clone (Arg_0.1746: f32[], Arg_1.1683: f32[]) -> f32[] {
  %Arg_0.1746 = f32[] parameter(0)
  %Arg_1.1683 = f32[] parameter(1)
  ROOT %add.2072 = f32[] add(%Arg_0.1746, %Arg_1.1683)
}

%region_1133.36593 (Arg_0.36590: f32[], Arg_1.36591: f32[]) -> f32[] {
  %Arg_0.36590 = f32[] parameter(0)
  %Arg_1.36591 = f32[] parameter(1)
  ROOT %add.36592 = f32[] add(%Arg_0.36590, %Arg_1.36591)
}

%region_1134.36600 (Arg_0.36597: f32[], Arg_1.36598: f32[]) -> f32[] {
  %Arg_0.36597 = f32[] parameter(0)
  %Arg_1.36598 = f32[] parameter(1)
  ROOT %add.36599 = f32[] add(%Arg_0.36597, %Arg_1.36598)
}

%region_1135.36607 (Arg_0.36604: f32[], Arg_1.36605: f32[]) -> f32[] {
  %Arg_0.36604 = f32[] parameter(0)
  %Arg_1.36605 = f32[] parameter(1)
  ROOT %add.36606 = f32[] add(%Arg_0.36604, %Arg_1.36605)
}

%region_1135.36607.clone (Arg_0.1747: f32[], Arg_1.1684: f32[]) -> f32[] {
  %Arg_0.1747 = f32[] parameter(0)
  %Arg_1.1684 = f32[] parameter(1)
  ROOT %add.2073 = f32[] add(%Arg_0.1747, %Arg_1.1684)
}

%region_1136.36614 (Arg_0.36611: f32[], Arg_1.36612: f32[]) -> f32[] {
  %Arg_0.36611 = f32[] parameter(0)
  %Arg_1.36612 = f32[] parameter(1)
  ROOT %add.36613 = f32[] add(%Arg_0.36611, %Arg_1.36612)
}

%region_1136.36614.clone (Arg_0.1748: f32[], Arg_1.1685: f32[]) -> f32[] {
  %Arg_0.1748 = f32[] parameter(0)
  %Arg_1.1685 = f32[] parameter(1)
  ROOT %add.2074 = f32[] add(%Arg_0.1748, %Arg_1.1685)
}

%region_1137.36621 (Arg_0.36618: f32[], Arg_1.36619: f32[]) -> f32[] {
  %Arg_0.36618 = f32[] parameter(0)
  %Arg_1.36619 = f32[] parameter(1)
  ROOT %add.36620 = f32[] add(%Arg_0.36618, %Arg_1.36619)
}

%region_1137.36621.clone (Arg_0.1749: f32[], Arg_1.1686: f32[]) -> f32[] {
  %Arg_0.1749 = f32[] parameter(0)
  %Arg_1.1686 = f32[] parameter(1)
  ROOT %add.2075 = f32[] add(%Arg_0.1749, %Arg_1.1686)
}

%region_1138.36628 (Arg_0.36625: f32[], Arg_1.36626: f32[]) -> f32[] {
  %Arg_0.36625 = f32[] parameter(0)
  %Arg_1.36626 = f32[] parameter(1)
  ROOT %add.36627 = f32[] add(%Arg_0.36625, %Arg_1.36626)
}

%region_1138.36628.clone (Arg_0.1750: f32[], Arg_1.1687: f32[]) -> f32[] {
  %Arg_0.1750 = f32[] parameter(0)
  %Arg_1.1687 = f32[] parameter(1)
  ROOT %add.2076 = f32[] add(%Arg_0.1750, %Arg_1.1687)
}

%region_1139.36635 (Arg_0.36632: f32[], Arg_1.36633: f32[]) -> f32[] {
  %Arg_0.36632 = f32[] parameter(0)
  %Arg_1.36633 = f32[] parameter(1)
  ROOT %add.36634 = f32[] add(%Arg_0.36632, %Arg_1.36633)
}

%region_1139.36635.clone (Arg_0.1751: f32[], Arg_1.1688: f32[]) -> f32[] {
  %Arg_0.1751 = f32[] parameter(0)
  %Arg_1.1688 = f32[] parameter(1)
  ROOT %add.2077 = f32[] add(%Arg_0.1751, %Arg_1.1688)
}

%region_1140.36642 (Arg_0.36639: f32[], Arg_1.36640: f32[]) -> f32[] {
  %Arg_0.36639 = f32[] parameter(0)
  %Arg_1.36640 = f32[] parameter(1)
  ROOT %add.36641 = f32[] add(%Arg_0.36639, %Arg_1.36640)
}

%region_1140.36642.clone (Arg_0.1752: f32[], Arg_1.1689: f32[]) -> f32[] {
  %Arg_0.1752 = f32[] parameter(0)
  %Arg_1.1689 = f32[] parameter(1)
  ROOT %add.2078 = f32[] add(%Arg_0.1752, %Arg_1.1689)
}

%region_1141.36649 (Arg_0.36646: f32[], Arg_1.36647: f32[]) -> f32[] {
  %Arg_0.36646 = f32[] parameter(0)
  %Arg_1.36647 = f32[] parameter(1)
  ROOT %add.36648 = f32[] add(%Arg_0.36646, %Arg_1.36647)
}

%region_1141.36649.clone (Arg_0.1753: f32[], Arg_1.1690: f32[]) -> f32[] {
  %Arg_0.1753 = f32[] parameter(0)
  %Arg_1.1690 = f32[] parameter(1)
  ROOT %add.2080 = f32[] add(%Arg_0.1753, %Arg_1.1690)
}

%region_1142.36656 (Arg_0.36653: f32[], Arg_1.36654: f32[]) -> f32[] {
  %Arg_0.36653 = f32[] parameter(0)
  %Arg_1.36654 = f32[] parameter(1)
  ROOT %add.36655 = f32[] add(%Arg_0.36653, %Arg_1.36654)
}

%region_1143.36663 (Arg_0.36660: f32[], Arg_1.36661: f32[]) -> f32[] {
  %Arg_0.36660 = f32[] parameter(0)
  %Arg_1.36661 = f32[] parameter(1)
  ROOT %add.36662 = f32[] add(%Arg_0.36660, %Arg_1.36661)
}

%region_1144.36670 (Arg_0.36667: f32[], Arg_1.36668: f32[]) -> f32[] {
  %Arg_0.36667 = f32[] parameter(0)
  %Arg_1.36668 = f32[] parameter(1)
  ROOT %add.36669 = f32[] add(%Arg_0.36667, %Arg_1.36668)
}

%region_1144.36670.clone (Arg_0.1754: f32[], Arg_1.1691: f32[]) -> f32[] {
  %Arg_0.1754 = f32[] parameter(0)
  %Arg_1.1691 = f32[] parameter(1)
  ROOT %add.2081 = f32[] add(%Arg_0.1754, %Arg_1.1691)
}

%region_1145.36677 (Arg_0.36674: f32[], Arg_1.36675: f32[]) -> f32[] {
  %Arg_0.36674 = f32[] parameter(0)
  %Arg_1.36675 = f32[] parameter(1)
  ROOT %add.36676 = f32[] add(%Arg_0.36674, %Arg_1.36675)
}

%region_1145.36677.clone (Arg_0.1755: f32[], Arg_1.1692: f32[]) -> f32[] {
  %Arg_0.1755 = f32[] parameter(0)
  %Arg_1.1692 = f32[] parameter(1)
  ROOT %add.2082 = f32[] add(%Arg_0.1755, %Arg_1.1692)
}

%region_1146.36684 (Arg_0.36681: f32[], Arg_1.36682: f32[]) -> f32[] {
  %Arg_0.36681 = f32[] parameter(0)
  %Arg_1.36682 = f32[] parameter(1)
  ROOT %add.36683 = f32[] add(%Arg_0.36681, %Arg_1.36682)
}

%region_1146.36684.clone (Arg_0.1756: f32[], Arg_1.1693: f32[]) -> f32[] {
  %Arg_0.1756 = f32[] parameter(0)
  %Arg_1.1693 = f32[] parameter(1)
  ROOT %add.2083 = f32[] add(%Arg_0.1756, %Arg_1.1693)
}

%region_1147.36691 (Arg_0.36688: f32[], Arg_1.36689: f32[]) -> f32[] {
  %Arg_0.36688 = f32[] parameter(0)
  %Arg_1.36689 = f32[] parameter(1)
  ROOT %add.36690 = f32[] add(%Arg_0.36688, %Arg_1.36689)
}

%region_1147.36691.clone (Arg_0.1757: f32[], Arg_1.1694: f32[]) -> f32[] {
  %Arg_0.1757 = f32[] parameter(0)
  %Arg_1.1694 = f32[] parameter(1)
  ROOT %add.2084 = f32[] add(%Arg_0.1757, %Arg_1.1694)
}

%region_1148.36698 (Arg_0.36695: f32[], Arg_1.36696: f32[]) -> f32[] {
  %Arg_0.36695 = f32[] parameter(0)
  %Arg_1.36696 = f32[] parameter(1)
  ROOT %add.36697 = f32[] add(%Arg_0.36695, %Arg_1.36696)
}

%region_1148.36698.clone (Arg_0.1758: f32[], Arg_1.1695: f32[]) -> f32[] {
  %Arg_0.1758 = f32[] parameter(0)
  %Arg_1.1695 = f32[] parameter(1)
  ROOT %add.2085 = f32[] add(%Arg_0.1758, %Arg_1.1695)
}

%region_1149.36705 (Arg_0.36702: f32[], Arg_1.36703: f32[]) -> f32[] {
  %Arg_0.36702 = f32[] parameter(0)
  %Arg_1.36703 = f32[] parameter(1)
  ROOT %add.36704 = f32[] add(%Arg_0.36702, %Arg_1.36703)
}

%region_1149.36705.clone (Arg_0.1759: f32[], Arg_1.1696: f32[]) -> f32[] {
  %Arg_0.1759 = f32[] parameter(0)
  %Arg_1.1696 = f32[] parameter(1)
  ROOT %add.2086 = f32[] add(%Arg_0.1759, %Arg_1.1696)
}

%region_1150.36712 (Arg_0.36709: f32[], Arg_1.36710: f32[]) -> f32[] {
  %Arg_0.36709 = f32[] parameter(0)
  %Arg_1.36710 = f32[] parameter(1)
  ROOT %add.36711 = f32[] add(%Arg_0.36709, %Arg_1.36710)
}

%region_1150.36712.clone (Arg_0.1760: f32[], Arg_1.1697: f32[]) -> f32[] {
  %Arg_0.1760 = f32[] parameter(0)
  %Arg_1.1697 = f32[] parameter(1)
  ROOT %add.2087 = f32[] add(%Arg_0.1760, %Arg_1.1697)
}

%region_1151.36719 (Arg_0.36716: f32[], Arg_1.36717: f32[]) -> f32[] {
  %Arg_0.36716 = f32[] parameter(0)
  %Arg_1.36717 = f32[] parameter(1)
  ROOT %add.36718 = f32[] add(%Arg_0.36716, %Arg_1.36717)
}

%region_1152.36726 (Arg_0.36723: f32[], Arg_1.36724: f32[]) -> f32[] {
  %Arg_0.36723 = f32[] parameter(0)
  %Arg_1.36724 = f32[] parameter(1)
  ROOT %add.36725 = f32[] add(%Arg_0.36723, %Arg_1.36724)
}

%region_1153.36733 (Arg_0.36730: f32[], Arg_1.36731: f32[]) -> f32[] {
  %Arg_0.36730 = f32[] parameter(0)
  %Arg_1.36731 = f32[] parameter(1)
  ROOT %add.36732 = f32[] add(%Arg_0.36730, %Arg_1.36731)
}

%region_1153.36733.clone (Arg_0.1761: f32[], Arg_1.1698: f32[]) -> f32[] {
  %Arg_0.1761 = f32[] parameter(0)
  %Arg_1.1698 = f32[] parameter(1)
  ROOT %add.2088 = f32[] add(%Arg_0.1761, %Arg_1.1698)
}

%region_1154.36740 (Arg_0.36737: f32[], Arg_1.36738: f32[]) -> f32[] {
  %Arg_0.36737 = f32[] parameter(0)
  %Arg_1.36738 = f32[] parameter(1)
  ROOT %add.36739 = f32[] add(%Arg_0.36737, %Arg_1.36738)
}

%region_1154.36740.clone (Arg_0.1762: f32[], Arg_1.1699: f32[]) -> f32[] {
  %Arg_0.1762 = f32[] parameter(0)
  %Arg_1.1699 = f32[] parameter(1)
  ROOT %add.2089 = f32[] add(%Arg_0.1762, %Arg_1.1699)
}

%region_1155.36747 (Arg_0.36744: f32[], Arg_1.36745: f32[]) -> f32[] {
  %Arg_0.36744 = f32[] parameter(0)
  %Arg_1.36745 = f32[] parameter(1)
  ROOT %add.36746 = f32[] add(%Arg_0.36744, %Arg_1.36745)
}

%region_1155.36747.clone (Arg_0.1763: f32[], Arg_1.1700: f32[]) -> f32[] {
  %Arg_0.1763 = f32[] parameter(0)
  %Arg_1.1700 = f32[] parameter(1)
  ROOT %add.2090 = f32[] add(%Arg_0.1763, %Arg_1.1700)
}

%region_1156.36754 (Arg_0.36751: f32[], Arg_1.36752: f32[]) -> f32[] {
  %Arg_0.36751 = f32[] parameter(0)
  %Arg_1.36752 = f32[] parameter(1)
  ROOT %add.36753 = f32[] add(%Arg_0.36751, %Arg_1.36752)
}

%region_1156.36754.clone (Arg_0.1764: f32[], Arg_1.1701: f32[]) -> f32[] {
  %Arg_0.1764 = f32[] parameter(0)
  %Arg_1.1701 = f32[] parameter(1)
  ROOT %add.2091 = f32[] add(%Arg_0.1764, %Arg_1.1701)
}

%region_1157.36761 (Arg_0.36758: f32[], Arg_1.36759: f32[]) -> f32[] {
  %Arg_0.36758 = f32[] parameter(0)
  %Arg_1.36759 = f32[] parameter(1)
  ROOT %add.36760 = f32[] add(%Arg_0.36758, %Arg_1.36759)
}

%region_1157.36761.clone (Arg_0.1765: f32[], Arg_1.1702: f32[]) -> f32[] {
  %Arg_0.1765 = f32[] parameter(0)
  %Arg_1.1702 = f32[] parameter(1)
  ROOT %add.2092 = f32[] add(%Arg_0.1765, %Arg_1.1702)
}

%region_1158.36768 (Arg_0.36765: f32[], Arg_1.36766: f32[]) -> f32[] {
  %Arg_0.36765 = f32[] parameter(0)
  %Arg_1.36766 = f32[] parameter(1)
  ROOT %add.36767 = f32[] add(%Arg_0.36765, %Arg_1.36766)
}

%region_1158.36768.clone (Arg_0.1766: f32[], Arg_1.1703: f32[]) -> f32[] {
  %Arg_0.1766 = f32[] parameter(0)
  %Arg_1.1703 = f32[] parameter(1)
  ROOT %add.2093 = f32[] add(%Arg_0.1766, %Arg_1.1703)
}

%region_1159.36775 (Arg_0.36772: f32[], Arg_1.36773: f32[]) -> f32[] {
  %Arg_0.36772 = f32[] parameter(0)
  %Arg_1.36773 = f32[] parameter(1)
  ROOT %add.36774 = f32[] add(%Arg_0.36772, %Arg_1.36773)
}

%region_1159.36775.clone (Arg_0.1767: f32[], Arg_1.1704: f32[]) -> f32[] {
  %Arg_0.1767 = f32[] parameter(0)
  %Arg_1.1704 = f32[] parameter(1)
  ROOT %add.2094 = f32[] add(%Arg_0.1767, %Arg_1.1704)
}

%region_1160.36782 (Arg_0.36779: f32[], Arg_1.36780: f32[]) -> f32[] {
  %Arg_0.36779 = f32[] parameter(0)
  %Arg_1.36780 = f32[] parameter(1)
  ROOT %add.36781 = f32[] add(%Arg_0.36779, %Arg_1.36780)
}

%region_1161.36789 (Arg_0.36786: f32[], Arg_1.36787: f32[]) -> f32[] {
  %Arg_0.36786 = f32[] parameter(0)
  %Arg_1.36787 = f32[] parameter(1)
  ROOT %add.36788 = f32[] add(%Arg_0.36786, %Arg_1.36787)
}

%region_1162.36796 (Arg_0.36793: f32[], Arg_1.36794: f32[]) -> f32[] {
  %Arg_0.36793 = f32[] parameter(0)
  %Arg_1.36794 = f32[] parameter(1)
  ROOT %add.36795 = f32[] add(%Arg_0.36793, %Arg_1.36794)
}

%region_1162.36796.clone (Arg_0.1768: f32[], Arg_1.1705: f32[]) -> f32[] {
  %Arg_0.1768 = f32[] parameter(0)
  %Arg_1.1705 = f32[] parameter(1)
  ROOT %add.2095 = f32[] add(%Arg_0.1768, %Arg_1.1705)
}

%region_1163.36803 (Arg_0.36800: f32[], Arg_1.36801: f32[]) -> f32[] {
  %Arg_0.36800 = f32[] parameter(0)
  %Arg_1.36801 = f32[] parameter(1)
  ROOT %add.36802 = f32[] add(%Arg_0.36800, %Arg_1.36801)
}

%region_1163.36803.clone (Arg_0.1769: f32[], Arg_1.1706: f32[]) -> f32[] {
  %Arg_0.1769 = f32[] parameter(0)
  %Arg_1.1706 = f32[] parameter(1)
  ROOT %add.2096 = f32[] add(%Arg_0.1769, %Arg_1.1706)
}

%region_1164.36810 (Arg_0.36807: f32[], Arg_1.36808: f32[]) -> f32[] {
  %Arg_0.36807 = f32[] parameter(0)
  %Arg_1.36808 = f32[] parameter(1)
  ROOT %add.36809 = f32[] add(%Arg_0.36807, %Arg_1.36808)
}

%region_1164.36810.clone (Arg_0.1770: f32[], Arg_1.1707: f32[]) -> f32[] {
  %Arg_0.1770 = f32[] parameter(0)
  %Arg_1.1707 = f32[] parameter(1)
  ROOT %add.2097 = f32[] add(%Arg_0.1770, %Arg_1.1707)
}

%region_1165.36817 (Arg_0.36814: f32[], Arg_1.36815: f32[]) -> f32[] {
  %Arg_0.36814 = f32[] parameter(0)
  %Arg_1.36815 = f32[] parameter(1)
  ROOT %add.36816 = f32[] add(%Arg_0.36814, %Arg_1.36815)
}

%region_1165.36817.clone (Arg_0.1771: f32[], Arg_1.1708: f32[]) -> f32[] {
  %Arg_0.1771 = f32[] parameter(0)
  %Arg_1.1708 = f32[] parameter(1)
  ROOT %add.2098 = f32[] add(%Arg_0.1771, %Arg_1.1708)
}

%region_1166.36824 (Arg_0.36821: f32[], Arg_1.36822: f32[]) -> f32[] {
  %Arg_0.36821 = f32[] parameter(0)
  %Arg_1.36822 = f32[] parameter(1)
  ROOT %add.36823 = f32[] add(%Arg_0.36821, %Arg_1.36822)
}

%region_1166.36824.clone (Arg_0.1772: f32[], Arg_1.1709: f32[]) -> f32[] {
  %Arg_0.1772 = f32[] parameter(0)
  %Arg_1.1709 = f32[] parameter(1)
  ROOT %add.2099 = f32[] add(%Arg_0.1772, %Arg_1.1709)
}

%region_1167.36831 (Arg_0.36828: f32[], Arg_1.36829: f32[]) -> f32[] {
  %Arg_0.36828 = f32[] parameter(0)
  %Arg_1.36829 = f32[] parameter(1)
  ROOT %add.36830 = f32[] add(%Arg_0.36828, %Arg_1.36829)
}

%region_1167.36831.clone (Arg_0.1773: f32[], Arg_1.1710: f32[]) -> f32[] {
  %Arg_0.1773 = f32[] parameter(0)
  %Arg_1.1710 = f32[] parameter(1)
  ROOT %add.2100 = f32[] add(%Arg_0.1773, %Arg_1.1710)
}

%region_163.10121 (Arg_0.10118: f32[], Arg_1.10119: f32[]) -> f32[] {
  %Arg_0.10118 = f32[] parameter(0)
  %Arg_1.10119 = f32[] parameter(1)
  ROOT %add.10120 = f32[] add(%Arg_0.10118, %Arg_1.10119)
}

%region_164.10137 (Arg_0.10134: f32[], Arg_1.10135: f32[]) -> f32[] {
  %Arg_0.10134 = f32[] parameter(0)
  %Arg_1.10135 = f32[] parameter(1)
  ROOT %add.10136 = f32[] add(%Arg_0.10134, %Arg_1.10135)
}

%region_164.10137.clone (Arg_0.1774: f32[], Arg_1.1711: f32[]) -> f32[] {
  %Arg_0.1774 = f32[] parameter(0)
  %Arg_1.1711 = f32[] parameter(1)
  ROOT %add.2101 = f32[] add(%Arg_0.1774, %Arg_1.1711)
}

%region_1459.38876 (Arg_0.38873: f32[], Arg_1.38874: f32[]) -> f32[] {
  %Arg_0.38873 = f32[] parameter(0)
  %Arg_1.38874 = f32[] parameter(1)
  ROOT %add.38875 = f32[] add(%Arg_0.38873, %Arg_1.38874)
}

%region_1460.38882 (Arg_0.38879: f32[], Arg_1.38880: f32[]) -> f32[] {
  %Arg_0.38879 = f32[] parameter(0)
  %Arg_1.38880 = f32[] parameter(1)
  ROOT %add.38881 = f32[] add(%Arg_0.38879, %Arg_1.38880)
}

%region_1460.38882.clone (Arg_0.1775: f32[], Arg_1.1712: f32[]) -> f32[] {
  %Arg_0.1775 = f32[] parameter(0)
  %Arg_1.1712 = f32[] parameter(1)
  ROOT %add.2102 = f32[] add(%Arg_0.1775, %Arg_1.1712)
}

%region_1461.38889 (Arg_0.38886: f32[], Arg_1.38887: f32[]) -> f32[] {
  %Arg_0.38886 = f32[] parameter(0)
  %Arg_1.38887 = f32[] parameter(1)
  ROOT %add.38888 = f32[] add(%Arg_0.38886, %Arg_1.38887)
}

%region_1461.38889.clone (Arg_0.1776: f32[], Arg_1.1713: f32[]) -> f32[] {
  %Arg_0.1776 = f32[] parameter(0)
  %Arg_1.1713 = f32[] parameter(1)
  ROOT %add.2103 = f32[] add(%Arg_0.1776, %Arg_1.1713)
}

%region_1462.38896 (Arg_0.38893: f32[], Arg_1.38894: f32[]) -> f32[] {
  %Arg_0.38893 = f32[] parameter(0)
  %Arg_1.38894 = f32[] parameter(1)
  ROOT %add.38895 = f32[] add(%Arg_0.38893, %Arg_1.38894)
}

%region_1462.38896.clone (Arg_0.1777: f32[], Arg_1.1714: f32[]) -> f32[] {
  %Arg_0.1777 = f32[] parameter(0)
  %Arg_1.1714 = f32[] parameter(1)
  ROOT %add.2104 = f32[] add(%Arg_0.1777, %Arg_1.1714)
}

%region_1463.38903 (Arg_0.38900: f32[], Arg_1.38901: f32[]) -> f32[] {
  %Arg_0.38900 = f32[] parameter(0)
  %Arg_1.38901 = f32[] parameter(1)
  ROOT %add.38902 = f32[] add(%Arg_0.38900, %Arg_1.38901)
}

%region_1464.38910 (Arg_0.38907: f32[], Arg_1.38908: f32[]) -> f32[] {
  %Arg_0.38907 = f32[] parameter(0)
  %Arg_1.38908 = f32[] parameter(1)
  ROOT %add.38909 = f32[] add(%Arg_0.38907, %Arg_1.38908)
}

%region_1465.38917 (Arg_0.38914: f32[], Arg_1.38915: f32[]) -> f32[] {
  %Arg_0.38914 = f32[] parameter(0)
  %Arg_1.38915 = f32[] parameter(1)
  ROOT %add.38916 = f32[] add(%Arg_0.38914, %Arg_1.38915)
}

%region_1465.38917.clone (Arg_0.1778: f32[], Arg_1.1715: f32[]) -> f32[] {
  %Arg_0.1778 = f32[] parameter(0)
  %Arg_1.1715 = f32[] parameter(1)
  ROOT %add.2105 = f32[] add(%Arg_0.1778, %Arg_1.1715)
}

%region_1466.38924 (Arg_0.38921: f32[], Arg_1.38922: f32[]) -> f32[] {
  %Arg_0.38921 = f32[] parameter(0)
  %Arg_1.38922 = f32[] parameter(1)
  ROOT %add.38923 = f32[] add(%Arg_0.38921, %Arg_1.38922)
}

%region_1466.38924.clone (Arg_0.1779: f32[], Arg_1.1716: f32[]) -> f32[] {
  %Arg_0.1779 = f32[] parameter(0)
  %Arg_1.1716 = f32[] parameter(1)
  ROOT %add.2106 = f32[] add(%Arg_0.1779, %Arg_1.1716)
}

%region_1467.38931 (Arg_0.38928: f32[], Arg_1.38929: f32[]) -> f32[] {
  %Arg_0.38928 = f32[] parameter(0)
  %Arg_1.38929 = f32[] parameter(1)
  ROOT %add.38930 = f32[] add(%Arg_0.38928, %Arg_1.38929)
}

%region_1467.38931.clone (Arg_0.1780: f32[], Arg_1.1717: f32[]) -> f32[] {
  %Arg_0.1780 = f32[] parameter(0)
  %Arg_1.1717 = f32[] parameter(1)
  ROOT %add.2107 = f32[] add(%Arg_0.1780, %Arg_1.1717)
}

%region_1468.38938 (Arg_0.38935: f32[], Arg_1.38936: f32[]) -> f32[] {
  %Arg_0.38935 = f32[] parameter(0)
  %Arg_1.38936 = f32[] parameter(1)
  ROOT %add.38937 = f32[] add(%Arg_0.38935, %Arg_1.38936)
}

%region_1468.38938.clone (Arg_0.1781: f32[], Arg_1.1718: f32[]) -> f32[] {
  %Arg_0.1781 = f32[] parameter(0)
  %Arg_1.1718 = f32[] parameter(1)
  ROOT %add.2108 = f32[] add(%Arg_0.1781, %Arg_1.1718)
}

%region_1469.38945 (Arg_0.38942: f32[], Arg_1.38943: f32[]) -> f32[] {
  %Arg_0.38942 = f32[] parameter(0)
  %Arg_1.38943 = f32[] parameter(1)
  ROOT %add.38944 = f32[] add(%Arg_0.38942, %Arg_1.38943)
}

%region_1469.38945.clone (Arg_0.1782: f32[], Arg_1.1719: f32[]) -> f32[] {
  %Arg_0.1782 = f32[] parameter(0)
  %Arg_1.1719 = f32[] parameter(1)
  ROOT %add.2109 = f32[] add(%Arg_0.1782, %Arg_1.1719)
}

%region_1470.38952 (Arg_0.38949: f32[], Arg_1.38950: f32[]) -> f32[] {
  %Arg_0.38949 = f32[] parameter(0)
  %Arg_1.38950 = f32[] parameter(1)
  ROOT %add.38951 = f32[] add(%Arg_0.38949, %Arg_1.38950)
}

%region_1470.38952.clone (Arg_0.1783: f32[], Arg_1.1720: f32[]) -> f32[] {
  %Arg_0.1783 = f32[] parameter(0)
  %Arg_1.1720 = f32[] parameter(1)
  ROOT %add.2110 = f32[] add(%Arg_0.1783, %Arg_1.1720)
}

%region_1471.38959 (Arg_0.38956: f32[], Arg_1.38957: f32[]) -> f32[] {
  %Arg_0.38956 = f32[] parameter(0)
  %Arg_1.38957 = f32[] parameter(1)
  ROOT %add.38958 = f32[] add(%Arg_0.38956, %Arg_1.38957)
}

%region_1471.38959.clone (Arg_0.1784: f32[], Arg_1.1721: f32[]) -> f32[] {
  %Arg_0.1784 = f32[] parameter(0)
  %Arg_1.1721 = f32[] parameter(1)
  ROOT %add.2111 = f32[] add(%Arg_0.1784, %Arg_1.1721)
}

%region_1472.38966 (Arg_0.38963: f32[], Arg_1.38964: f32[]) -> f32[] {
  %Arg_0.38963 = f32[] parameter(0)
  %Arg_1.38964 = f32[] parameter(1)
  ROOT %add.38965 = f32[] add(%Arg_0.38963, %Arg_1.38964)
}

%region_1473.38973 (Arg_0.38970: f32[], Arg_1.38971: f32[]) -> f32[] {
  %Arg_0.38970 = f32[] parameter(0)
  %Arg_1.38971 = f32[] parameter(1)
  ROOT %add.38972 = f32[] add(%Arg_0.38970, %Arg_1.38971)
}

%region_1474.38980 (Arg_0.38977: f32[], Arg_1.38978: f32[]) -> f32[] {
  %Arg_0.38977 = f32[] parameter(0)
  %Arg_1.38978 = f32[] parameter(1)
  ROOT %add.38979 = f32[] add(%Arg_0.38977, %Arg_1.38978)
}

%region_1474.38980.clone (Arg_0.1785: f32[], Arg_1.1722: f32[]) -> f32[] {
  %Arg_0.1785 = f32[] parameter(0)
  %Arg_1.1722 = f32[] parameter(1)
  ROOT %add.2112 = f32[] add(%Arg_0.1785, %Arg_1.1722)
}

%region_1475.38987 (Arg_0.38984: f32[], Arg_1.38985: f32[]) -> f32[] {
  %Arg_0.38984 = f32[] parameter(0)
  %Arg_1.38985 = f32[] parameter(1)
  ROOT %add.38986 = f32[] add(%Arg_0.38984, %Arg_1.38985)
}

%region_1475.38987.clone (Arg_0.1786: f32[], Arg_1.1723: f32[]) -> f32[] {
  %Arg_0.1786 = f32[] parameter(0)
  %Arg_1.1723 = f32[] parameter(1)
  ROOT %add.2113 = f32[] add(%Arg_0.1786, %Arg_1.1723)
}

%region_1476.38994 (Arg_0.38991: f32[], Arg_1.38992: f32[]) -> f32[] {
  %Arg_0.38991 = f32[] parameter(0)
  %Arg_1.38992 = f32[] parameter(1)
  ROOT %add.38993 = f32[] add(%Arg_0.38991, %Arg_1.38992)
}

%region_1476.38994.clone (Arg_0.1787: f32[], Arg_1.1724: f32[]) -> f32[] {
  %Arg_0.1787 = f32[] parameter(0)
  %Arg_1.1724 = f32[] parameter(1)
  ROOT %add.2114 = f32[] add(%Arg_0.1787, %Arg_1.1724)
}

%region_1477.39001 (Arg_0.38998: f32[], Arg_1.38999: f32[]) -> f32[] {
  %Arg_0.38998 = f32[] parameter(0)
  %Arg_1.38999 = f32[] parameter(1)
  ROOT %add.39000 = f32[] add(%Arg_0.38998, %Arg_1.38999)
}

%region_1477.39001.clone (Arg_0.1788: f32[], Arg_1.1725: f32[]) -> f32[] {
  %Arg_0.1788 = f32[] parameter(0)
  %Arg_1.1725 = f32[] parameter(1)
  ROOT %add.2115 = f32[] add(%Arg_0.1788, %Arg_1.1725)
}

%region_1478.39008 (Arg_0.39005: f32[], Arg_1.39006: f32[]) -> f32[] {
  %Arg_0.39005 = f32[] parameter(0)
  %Arg_1.39006 = f32[] parameter(1)
  ROOT %add.39007 = f32[] add(%Arg_0.39005, %Arg_1.39006)
}

%region_1478.39008.clone (Arg_0.1789: f32[], Arg_1.1726: f32[]) -> f32[] {
  %Arg_0.1789 = f32[] parameter(0)
  %Arg_1.1726 = f32[] parameter(1)
  ROOT %add.2116 = f32[] add(%Arg_0.1789, %Arg_1.1726)
}

%region_1479.39015 (Arg_0.39012: f32[], Arg_1.39013: f32[]) -> f32[] {
  %Arg_0.39012 = f32[] parameter(0)
  %Arg_1.39013 = f32[] parameter(1)
  ROOT %add.39014 = f32[] add(%Arg_0.39012, %Arg_1.39013)
}

%region_1479.39015.clone (Arg_0.1790: f32[], Arg_1.1727: f32[]) -> f32[] {
  %Arg_0.1790 = f32[] parameter(0)
  %Arg_1.1727 = f32[] parameter(1)
  ROOT %add.2118 = f32[] add(%Arg_0.1790, %Arg_1.1727)
}

%region_1480.39022 (Arg_0.39019: f32[], Arg_1.39020: f32[]) -> f32[] {
  %Arg_0.39019 = f32[] parameter(0)
  %Arg_1.39020 = f32[] parameter(1)
  ROOT %add.39021 = f32[] add(%Arg_0.39019, %Arg_1.39020)
}

%region_1480.39022.clone (Arg_0.1791: f32[], Arg_1.1728: f32[]) -> f32[] {
  %Arg_0.1791 = f32[] parameter(0)
  %Arg_1.1728 = f32[] parameter(1)
  ROOT %add.2119 = f32[] add(%Arg_0.1791, %Arg_1.1728)
}

%region_1481.39029 (Arg_0.39026: f32[], Arg_1.39027: f32[]) -> f32[] {
  %Arg_0.39026 = f32[] parameter(0)
  %Arg_1.39027 = f32[] parameter(1)
  ROOT %add.39028 = f32[] add(%Arg_0.39026, %Arg_1.39027)
}

%region_1482.39036 (Arg_0.39033: f32[], Arg_1.39034: f32[]) -> f32[] {
  %Arg_0.39033 = f32[] parameter(0)
  %Arg_1.39034 = f32[] parameter(1)
  ROOT %add.39035 = f32[] add(%Arg_0.39033, %Arg_1.39034)
}

%region_1483.39043 (Arg_0.39040: f32[], Arg_1.39041: f32[]) -> f32[] {
  %Arg_0.39040 = f32[] parameter(0)
  %Arg_1.39041 = f32[] parameter(1)
  ROOT %add.39042 = f32[] add(%Arg_0.39040, %Arg_1.39041)
}

%region_1483.39043.clone (Arg_0.1792: f32[], Arg_1.1729: f32[]) -> f32[] {
  %Arg_0.1792 = f32[] parameter(0)
  %Arg_1.1729 = f32[] parameter(1)
  ROOT %add.2120 = f32[] add(%Arg_0.1792, %Arg_1.1729)
}

%region_1484.39050 (Arg_0.39047: f32[], Arg_1.39048: f32[]) -> f32[] {
  %Arg_0.39047 = f32[] parameter(0)
  %Arg_1.39048 = f32[] parameter(1)
  ROOT %add.39049 = f32[] add(%Arg_0.39047, %Arg_1.39048)
}

%region_1484.39050.clone (Arg_0.1793: f32[], Arg_1.1730: f32[]) -> f32[] {
  %Arg_0.1793 = f32[] parameter(0)
  %Arg_1.1730 = f32[] parameter(1)
  ROOT %add.2121 = f32[] add(%Arg_0.1793, %Arg_1.1730)
}

%region_1485.39057 (Arg_0.39054: f32[], Arg_1.39055: f32[]) -> f32[] {
  %Arg_0.39054 = f32[] parameter(0)
  %Arg_1.39055 = f32[] parameter(1)
  ROOT %add.39056 = f32[] add(%Arg_0.39054, %Arg_1.39055)
}

%region_1485.39057.clone (Arg_0.1794: f32[], Arg_1.1731: f32[]) -> f32[] {
  %Arg_0.1794 = f32[] parameter(0)
  %Arg_1.1731 = f32[] parameter(1)
  ROOT %add.2122 = f32[] add(%Arg_0.1794, %Arg_1.1731)
}

%region_1486.39064 (Arg_0.39061: f32[], Arg_1.39062: f32[]) -> f32[] {
  %Arg_0.39061 = f32[] parameter(0)
  %Arg_1.39062 = f32[] parameter(1)
  ROOT %add.39063 = f32[] add(%Arg_0.39061, %Arg_1.39062)
}

%region_1486.39064.clone (Arg_0.1795: f32[], Arg_1.1732: f32[]) -> f32[] {
  %Arg_0.1795 = f32[] parameter(0)
  %Arg_1.1732 = f32[] parameter(1)
  ROOT %add.2123 = f32[] add(%Arg_0.1795, %Arg_1.1732)
}

%region_1487.39071 (Arg_0.39068: f32[], Arg_1.39069: f32[]) -> f32[] {
  %Arg_0.39068 = f32[] parameter(0)
  %Arg_1.39069 = f32[] parameter(1)
  ROOT %add.39070 = f32[] add(%Arg_0.39068, %Arg_1.39069)
}

%region_1487.39071.clone (Arg_0.1796: f32[], Arg_1.1733: f32[]) -> f32[] {
  %Arg_0.1796 = f32[] parameter(0)
  %Arg_1.1733 = f32[] parameter(1)
  ROOT %add.2124 = f32[] add(%Arg_0.1796, %Arg_1.1733)
}

%region_1488.39078 (Arg_0.39075: f32[], Arg_1.39076: f32[]) -> f32[] {
  %Arg_0.39075 = f32[] parameter(0)
  %Arg_1.39076 = f32[] parameter(1)
  ROOT %add.39077 = f32[] add(%Arg_0.39075, %Arg_1.39076)
}

%region_1488.39078.clone (Arg_0.1797: f32[], Arg_1.1734: f32[]) -> f32[] {
  %Arg_0.1797 = f32[] parameter(0)
  %Arg_1.1734 = f32[] parameter(1)
  ROOT %add.2125 = f32[] add(%Arg_0.1797, %Arg_1.1734)
}

%region_1489.39085 (Arg_0.39082: f32[], Arg_1.39083: f32[]) -> f32[] {
  %Arg_0.39082 = f32[] parameter(0)
  %Arg_1.39083 = f32[] parameter(1)
  ROOT %add.39084 = f32[] add(%Arg_0.39082, %Arg_1.39083)
}

%region_1489.39085.clone (Arg_0.1798: f32[], Arg_1.1735: f32[]) -> f32[] {
  %Arg_0.1798 = f32[] parameter(0)
  %Arg_1.1735 = f32[] parameter(1)
  ROOT %add.2126 = f32[] add(%Arg_0.1798, %Arg_1.1735)
}

%region_1490.39092 (Arg_0.39089: f32[], Arg_1.39090: f32[]) -> f32[] {
  %Arg_0.39089 = f32[] parameter(0)
  %Arg_1.39090 = f32[] parameter(1)
  ROOT %add.39091 = f32[] add(%Arg_0.39089, %Arg_1.39090)
}

%region_1491.39099 (Arg_0.39096: f32[], Arg_1.39097: f32[]) -> f32[] {
  %Arg_0.39096 = f32[] parameter(0)
  %Arg_1.39097 = f32[] parameter(1)
  ROOT %add.39098 = f32[] add(%Arg_0.39096, %Arg_1.39097)
}

%region_1492.39106 (Arg_0.39103: f32[], Arg_1.39104: f32[]) -> f32[] {
  %Arg_0.39103 = f32[] parameter(0)
  %Arg_1.39104 = f32[] parameter(1)
  ROOT %add.39105 = f32[] add(%Arg_0.39103, %Arg_1.39104)
}

%region_1492.39106.clone (Arg_0.1799: f32[], Arg_1.1736: f32[]) -> f32[] {
  %Arg_0.1799 = f32[] parameter(0)
  %Arg_1.1736 = f32[] parameter(1)
  ROOT %add.2127 = f32[] add(%Arg_0.1799, %Arg_1.1736)
}

%region_1493.39113 (Arg_0.39110: f32[], Arg_1.39111: f32[]) -> f32[] {
  %Arg_0.39110 = f32[] parameter(0)
  %Arg_1.39111 = f32[] parameter(1)
  ROOT %add.39112 = f32[] add(%Arg_0.39110, %Arg_1.39111)
}

%region_1493.39113.clone (Arg_0.1800: f32[], Arg_1.1737: f32[]) -> f32[] {
  %Arg_0.1800 = f32[] parameter(0)
  %Arg_1.1737 = f32[] parameter(1)
  ROOT %add.2128 = f32[] add(%Arg_0.1800, %Arg_1.1737)
}

%region_1494.39120 (Arg_0.39117: f32[], Arg_1.39118: f32[]) -> f32[] {
  %Arg_0.39117 = f32[] parameter(0)
  %Arg_1.39118 = f32[] parameter(1)
  ROOT %add.39119 = f32[] add(%Arg_0.39117, %Arg_1.39118)
}

%region_1494.39120.clone (Arg_0.1801: f32[], Arg_1.1738: f32[]) -> f32[] {
  %Arg_0.1801 = f32[] parameter(0)
  %Arg_1.1738 = f32[] parameter(1)
  ROOT %add.2129 = f32[] add(%Arg_0.1801, %Arg_1.1738)
}

%region_1495.39127 (Arg_0.39124: f32[], Arg_1.39125: f32[]) -> f32[] {
  %Arg_0.39124 = f32[] parameter(0)
  %Arg_1.39125 = f32[] parameter(1)
  ROOT %add.39126 = f32[] add(%Arg_0.39124, %Arg_1.39125)
}

%region_1495.39127.clone (Arg_0.1802: f32[], Arg_1.1739: f32[]) -> f32[] {
  %Arg_0.1802 = f32[] parameter(0)
  %Arg_1.1739 = f32[] parameter(1)
  ROOT %add.2130 = f32[] add(%Arg_0.1802, %Arg_1.1739)
}

%region_1496.39134 (Arg_0.39131: f32[], Arg_1.39132: f32[]) -> f32[] {
  %Arg_0.39131 = f32[] parameter(0)
  %Arg_1.39132 = f32[] parameter(1)
  ROOT %add.39133 = f32[] add(%Arg_0.39131, %Arg_1.39132)
}

%region_1496.39134.clone (Arg_0.1803: f32[], Arg_1.1740: f32[]) -> f32[] {
  %Arg_0.1803 = f32[] parameter(0)
  %Arg_1.1740 = f32[] parameter(1)
  ROOT %add.2131 = f32[] add(%Arg_0.1803, %Arg_1.1740)
}

%region_1497.39141 (Arg_0.39138: f32[], Arg_1.39139: f32[]) -> f32[] {
  %Arg_0.39138 = f32[] parameter(0)
  %Arg_1.39139 = f32[] parameter(1)
  ROOT %add.39140 = f32[] add(%Arg_0.39138, %Arg_1.39139)
}

%region_1497.39141.clone (Arg_0.1804: f32[], Arg_1.1741: f32[]) -> f32[] {
  %Arg_0.1804 = f32[] parameter(0)
  %Arg_1.1741 = f32[] parameter(1)
  ROOT %add.2132 = f32[] add(%Arg_0.1804, %Arg_1.1741)
}

%region_1498.39148 (Arg_0.39145: f32[], Arg_1.39146: f32[]) -> f32[] {
  %Arg_0.39145 = f32[] parameter(0)
  %Arg_1.39146 = f32[] parameter(1)
  ROOT %add.39147 = f32[] add(%Arg_0.39145, %Arg_1.39146)
}

%region_1498.39148.clone (Arg_0.1805: f32[], Arg_1.1742: f32[]) -> f32[] {
  %Arg_0.1805 = f32[] parameter(0)
  %Arg_1.1742 = f32[] parameter(1)
  ROOT %add.2133 = f32[] add(%Arg_0.1805, %Arg_1.1742)
}

%region_1499.39155 (Arg_0.39152: f32[], Arg_1.39153: f32[]) -> f32[] {
  %Arg_0.39152 = f32[] parameter(0)
  %Arg_1.39153 = f32[] parameter(1)
  ROOT %add.39154 = f32[] add(%Arg_0.39152, %Arg_1.39153)
}

%region_1500.39162 (Arg_0.39159: f32[], Arg_1.39160: f32[]) -> f32[] {
  %Arg_0.39159 = f32[] parameter(0)
  %Arg_1.39160 = f32[] parameter(1)
  ROOT %add.39161 = f32[] add(%Arg_0.39159, %Arg_1.39160)
}

%region_1501.39169 (Arg_0.39166: f32[], Arg_1.39167: f32[]) -> f32[] {
  %Arg_0.39166 = f32[] parameter(0)
  %Arg_1.39167 = f32[] parameter(1)
  ROOT %add.39168 = f32[] add(%Arg_0.39166, %Arg_1.39167)
}

%region_1501.39169.clone (Arg_0.1806: f32[], Arg_1.1743: f32[]) -> f32[] {
  %Arg_0.1806 = f32[] parameter(0)
  %Arg_1.1743 = f32[] parameter(1)
  ROOT %add.2134 = f32[] add(%Arg_0.1806, %Arg_1.1743)
}

%region_1502.39176 (Arg_0.39173: f32[], Arg_1.39174: f32[]) -> f32[] {
  %Arg_0.39173 = f32[] parameter(0)
  %Arg_1.39174 = f32[] parameter(1)
  ROOT %add.39175 = f32[] add(%Arg_0.39173, %Arg_1.39174)
}

%region_1502.39176.clone (Arg_0.1807: f32[], Arg_1.1744: f32[]) -> f32[] {
  %Arg_0.1807 = f32[] parameter(0)
  %Arg_1.1744 = f32[] parameter(1)
  ROOT %add.2135 = f32[] add(%Arg_0.1807, %Arg_1.1744)
}

%region_1503.39183 (Arg_0.39180: f32[], Arg_1.39181: f32[]) -> f32[] {
  %Arg_0.39180 = f32[] parameter(0)
  %Arg_1.39181 = f32[] parameter(1)
  ROOT %add.39182 = f32[] add(%Arg_0.39180, %Arg_1.39181)
}

%region_1503.39183.clone (Arg_0.1808: f32[], Arg_1.1745: f32[]) -> f32[] {
  %Arg_0.1808 = f32[] parameter(0)
  %Arg_1.1745 = f32[] parameter(1)
  ROOT %add.2136 = f32[] add(%Arg_0.1808, %Arg_1.1745)
}

%region_1504.39190 (Arg_0.39187: f32[], Arg_1.39188: f32[]) -> f32[] {
  %Arg_0.39187 = f32[] parameter(0)
  %Arg_1.39188 = f32[] parameter(1)
  ROOT %add.39189 = f32[] add(%Arg_0.39187, %Arg_1.39188)
}

%region_1504.39190.clone (Arg_0.1809: f32[], Arg_1.1746: f32[]) -> f32[] {
  %Arg_0.1809 = f32[] parameter(0)
  %Arg_1.1746 = f32[] parameter(1)
  ROOT %add.2137 = f32[] add(%Arg_0.1809, %Arg_1.1746)
}

%region_1505.39197 (Arg_0.39194: f32[], Arg_1.39195: f32[]) -> f32[] {
  %Arg_0.39194 = f32[] parameter(0)
  %Arg_1.39195 = f32[] parameter(1)
  ROOT %add.39196 = f32[] add(%Arg_0.39194, %Arg_1.39195)
}

%region_1505.39197.clone (Arg_0.1810: f32[], Arg_1.1747: f32[]) -> f32[] {
  %Arg_0.1810 = f32[] parameter(0)
  %Arg_1.1747 = f32[] parameter(1)
  ROOT %add.2138 = f32[] add(%Arg_0.1810, %Arg_1.1747)
}

%region_1506.39204 (Arg_0.39201: f32[], Arg_1.39202: f32[]) -> f32[] {
  %Arg_0.39201 = f32[] parameter(0)
  %Arg_1.39202 = f32[] parameter(1)
  ROOT %add.39203 = f32[] add(%Arg_0.39201, %Arg_1.39202)
}

%region_1506.39204.clone (Arg_0.1811: f32[], Arg_1.1748: f32[]) -> f32[] {
  %Arg_0.1811 = f32[] parameter(0)
  %Arg_1.1748 = f32[] parameter(1)
  ROOT %add.2139 = f32[] add(%Arg_0.1811, %Arg_1.1748)
}

%region_1507.39211 (Arg_0.39208: f32[], Arg_1.39209: f32[]) -> f32[] {
  %Arg_0.39208 = f32[] parameter(0)
  %Arg_1.39209 = f32[] parameter(1)
  ROOT %add.39210 = f32[] add(%Arg_0.39208, %Arg_1.39209)
}

%region_1507.39211.clone (Arg_0.1812: f32[], Arg_1.1749: f32[]) -> f32[] {
  %Arg_0.1812 = f32[] parameter(0)
  %Arg_1.1749 = f32[] parameter(1)
  ROOT %add.2140 = f32[] add(%Arg_0.1812, %Arg_1.1749)
}

%region_1508.39218 (Arg_0.39215: f32[], Arg_1.39216: f32[]) -> f32[] {
  %Arg_0.39215 = f32[] parameter(0)
  %Arg_1.39216 = f32[] parameter(1)
  ROOT %add.39217 = f32[] add(%Arg_0.39215, %Arg_1.39216)
}

%region_1509.39225 (Arg_0.39222: f32[], Arg_1.39223: f32[]) -> f32[] {
  %Arg_0.39222 = f32[] parameter(0)
  %Arg_1.39223 = f32[] parameter(1)
  ROOT %add.39224 = f32[] add(%Arg_0.39222, %Arg_1.39223)
}

%region_1510.39232 (Arg_0.39229: f32[], Arg_1.39230: f32[]) -> f32[] {
  %Arg_0.39229 = f32[] parameter(0)
  %Arg_1.39230 = f32[] parameter(1)
  ROOT %add.39231 = f32[] add(%Arg_0.39229, %Arg_1.39230)
}

%region_1510.39232.clone (Arg_0.1813: f32[], Arg_1.1750: f32[]) -> f32[] {
  %Arg_0.1813 = f32[] parameter(0)
  %Arg_1.1750 = f32[] parameter(1)
  ROOT %add.2141 = f32[] add(%Arg_0.1813, %Arg_1.1750)
}

%region_1511.39239 (Arg_0.39236: f32[], Arg_1.39237: f32[]) -> f32[] {
  %Arg_0.39236 = f32[] parameter(0)
  %Arg_1.39237 = f32[] parameter(1)
  ROOT %add.39238 = f32[] add(%Arg_0.39236, %Arg_1.39237)
}

%region_1511.39239.clone (Arg_0.1814: f32[], Arg_1.1751: f32[]) -> f32[] {
  %Arg_0.1814 = f32[] parameter(0)
  %Arg_1.1751 = f32[] parameter(1)
  ROOT %add.2142 = f32[] add(%Arg_0.1814, %Arg_1.1751)
}

%region_1512.39246 (Arg_0.39243: f32[], Arg_1.39244: f32[]) -> f32[] {
  %Arg_0.39243 = f32[] parameter(0)
  %Arg_1.39244 = f32[] parameter(1)
  ROOT %add.39245 = f32[] add(%Arg_0.39243, %Arg_1.39244)
}

%region_1512.39246.clone (Arg_0.1815: f32[], Arg_1.1752: f32[]) -> f32[] {
  %Arg_0.1815 = f32[] parameter(0)
  %Arg_1.1752 = f32[] parameter(1)
  ROOT %add.2143 = f32[] add(%Arg_0.1815, %Arg_1.1752)
}

%region_1513.39253 (Arg_0.39250: f32[], Arg_1.39251: f32[]) -> f32[] {
  %Arg_0.39250 = f32[] parameter(0)
  %Arg_1.39251 = f32[] parameter(1)
  ROOT %add.39252 = f32[] add(%Arg_0.39250, %Arg_1.39251)
}

%region_1513.39253.clone (Arg_0.1816: f32[], Arg_1.1753: f32[]) -> f32[] {
  %Arg_0.1816 = f32[] parameter(0)
  %Arg_1.1753 = f32[] parameter(1)
  ROOT %add.2144 = f32[] add(%Arg_0.1816, %Arg_1.1753)
}

%region_1514.39260 (Arg_0.39257: f32[], Arg_1.39258: f32[]) -> f32[] {
  %Arg_0.39257 = f32[] parameter(0)
  %Arg_1.39258 = f32[] parameter(1)
  ROOT %add.39259 = f32[] add(%Arg_0.39257, %Arg_1.39258)
}

%region_1514.39260.clone (Arg_0.1817: f32[], Arg_1.1754: f32[]) -> f32[] {
  %Arg_0.1817 = f32[] parameter(0)
  %Arg_1.1754 = f32[] parameter(1)
  ROOT %add.2145 = f32[] add(%Arg_0.1817, %Arg_1.1754)
}

%region_1515.39267 (Arg_0.39264: f32[], Arg_1.39265: f32[]) -> f32[] {
  %Arg_0.39264 = f32[] parameter(0)
  %Arg_1.39265 = f32[] parameter(1)
  ROOT %add.39266 = f32[] add(%Arg_0.39264, %Arg_1.39265)
}

%region_1515.39267.clone (Arg_0.1818: f32[], Arg_1.1755: f32[]) -> f32[] {
  %Arg_0.1818 = f32[] parameter(0)
  %Arg_1.1755 = f32[] parameter(1)
  ROOT %add.2146 = f32[] add(%Arg_0.1818, %Arg_1.1755)
}

%region_1516.39274 (Arg_0.39271: f32[], Arg_1.39272: f32[]) -> f32[] {
  %Arg_0.39271 = f32[] parameter(0)
  %Arg_1.39272 = f32[] parameter(1)
  ROOT %add.39273 = f32[] add(%Arg_0.39271, %Arg_1.39272)
}

%region_1516.39274.clone (Arg_0.1819: f32[], Arg_1.1756: f32[]) -> f32[] {
  %Arg_0.1819 = f32[] parameter(0)
  %Arg_1.1756 = f32[] parameter(1)
  ROOT %add.2147 = f32[] add(%Arg_0.1819, %Arg_1.1756)
}

%region_1517.39281 (Arg_0.39278: f32[], Arg_1.39279: f32[]) -> f32[] {
  %Arg_0.39278 = f32[] parameter(0)
  %Arg_1.39279 = f32[] parameter(1)
  ROOT %add.39280 = f32[] add(%Arg_0.39278, %Arg_1.39279)
}

%region_1518.39288 (Arg_0.39285: f32[], Arg_1.39286: f32[]) -> f32[] {
  %Arg_0.39285 = f32[] parameter(0)
  %Arg_1.39286 = f32[] parameter(1)
  ROOT %add.39287 = f32[] add(%Arg_0.39285, %Arg_1.39286)
}

%region_1519.39295 (Arg_0.39292: f32[], Arg_1.39293: f32[]) -> f32[] {
  %Arg_0.39292 = f32[] parameter(0)
  %Arg_1.39293 = f32[] parameter(1)
  ROOT %add.39294 = f32[] add(%Arg_0.39292, %Arg_1.39293)
}

%region_1519.39295.clone (Arg_0.1820: f32[], Arg_1.1757: f32[]) -> f32[] {
  %Arg_0.1820 = f32[] parameter(0)
  %Arg_1.1757 = f32[] parameter(1)
  ROOT %add.2149 = f32[] add(%Arg_0.1820, %Arg_1.1757)
}

%region_1520.39302 (Arg_0.39299: f32[], Arg_1.39300: f32[]) -> f32[] {
  %Arg_0.39299 = f32[] parameter(0)
  %Arg_1.39300 = f32[] parameter(1)
  ROOT %add.39301 = f32[] add(%Arg_0.39299, %Arg_1.39300)
}

%region_1520.39302.clone (Arg_0.1821: f32[], Arg_1.1758: f32[]) -> f32[] {
  %Arg_0.1821 = f32[] parameter(0)
  %Arg_1.1758 = f32[] parameter(1)
  ROOT %add.2150 = f32[] add(%Arg_0.1821, %Arg_1.1758)
}

%region_1521.39309 (Arg_0.39306: f32[], Arg_1.39307: f32[]) -> f32[] {
  %Arg_0.39306 = f32[] parameter(0)
  %Arg_1.39307 = f32[] parameter(1)
  ROOT %add.39308 = f32[] add(%Arg_0.39306, %Arg_1.39307)
}

%region_1521.39309.clone (Arg_0.1822: f32[], Arg_1.1759: f32[]) -> f32[] {
  %Arg_0.1822 = f32[] parameter(0)
  %Arg_1.1759 = f32[] parameter(1)
  ROOT %add.2151 = f32[] add(%Arg_0.1822, %Arg_1.1759)
}

%region_1522.39316 (Arg_0.39313: f32[], Arg_1.39314: f32[]) -> f32[] {
  %Arg_0.39313 = f32[] parameter(0)
  %Arg_1.39314 = f32[] parameter(1)
  ROOT %add.39315 = f32[] add(%Arg_0.39313, %Arg_1.39314)
}

%region_1522.39316.clone (Arg_0.1823: f32[], Arg_1.1760: f32[]) -> f32[] {
  %Arg_0.1823 = f32[] parameter(0)
  %Arg_1.1760 = f32[] parameter(1)
  ROOT %add.2152 = f32[] add(%Arg_0.1823, %Arg_1.1760)
}

%region_1523.39323 (Arg_0.39320: f32[], Arg_1.39321: f32[]) -> f32[] {
  %Arg_0.39320 = f32[] parameter(0)
  %Arg_1.39321 = f32[] parameter(1)
  ROOT %add.39322 = f32[] add(%Arg_0.39320, %Arg_1.39321)
}

%region_1523.39323.clone (Arg_0.1824: f32[], Arg_1.1761: f32[]) -> f32[] {
  %Arg_0.1824 = f32[] parameter(0)
  %Arg_1.1761 = f32[] parameter(1)
  ROOT %add.2153 = f32[] add(%Arg_0.1824, %Arg_1.1761)
}

%region_1524.39330 (Arg_0.39327: f32[], Arg_1.39328: f32[]) -> f32[] {
  %Arg_0.39327 = f32[] parameter(0)
  %Arg_1.39328 = f32[] parameter(1)
  ROOT %add.39329 = f32[] add(%Arg_0.39327, %Arg_1.39328)
}

%region_1524.39330.clone (Arg_0.1825: f32[], Arg_1.1762: f32[]) -> f32[] {
  %Arg_0.1825 = f32[] parameter(0)
  %Arg_1.1762 = f32[] parameter(1)
  ROOT %add.2154 = f32[] add(%Arg_0.1825, %Arg_1.1762)
}

%region_1525.39337 (Arg_0.39334: f32[], Arg_1.39335: f32[]) -> f32[] {
  %Arg_0.39334 = f32[] parameter(0)
  %Arg_1.39335 = f32[] parameter(1)
  ROOT %add.39336 = f32[] add(%Arg_0.39334, %Arg_1.39335)
}

%region_1525.39337.clone (Arg_0.1826: f32[], Arg_1.1763: f32[]) -> f32[] {
  %Arg_0.1826 = f32[] parameter(0)
  %Arg_1.1763 = f32[] parameter(1)
  ROOT %add.2155 = f32[] add(%Arg_0.1826, %Arg_1.1763)
}

%region_1526.39344 (Arg_0.39341: f32[], Arg_1.39342: f32[]) -> f32[] {
  %Arg_0.39341 = f32[] parameter(0)
  %Arg_1.39342 = f32[] parameter(1)
  ROOT %add.39343 = f32[] add(%Arg_0.39341, %Arg_1.39342)
}

%region_1527.39351 (Arg_0.39348: f32[], Arg_1.39349: f32[]) -> f32[] {
  %Arg_0.39348 = f32[] parameter(0)
  %Arg_1.39349 = f32[] parameter(1)
  ROOT %add.39350 = f32[] add(%Arg_0.39348, %Arg_1.39349)
}

%region_1528.39358 (Arg_0.39355: f32[], Arg_1.39356: f32[]) -> f32[] {
  %Arg_0.39355 = f32[] parameter(0)
  %Arg_1.39356 = f32[] parameter(1)
  ROOT %add.39357 = f32[] add(%Arg_0.39355, %Arg_1.39356)
}

%region_1528.39358.clone (Arg_0.1827: f32[], Arg_1.1764: f32[]) -> f32[] {
  %Arg_0.1827 = f32[] parameter(0)
  %Arg_1.1764 = f32[] parameter(1)
  ROOT %add.2157 = f32[] add(%Arg_0.1827, %Arg_1.1764)
}

%region_1529.39365 (Arg_0.39362: f32[], Arg_1.39363: f32[]) -> f32[] {
  %Arg_0.39362 = f32[] parameter(0)
  %Arg_1.39363 = f32[] parameter(1)
  ROOT %add.39364 = f32[] add(%Arg_0.39362, %Arg_1.39363)
}

%region_1529.39365.clone (Arg_0.1828: f32[], Arg_1.1765: f32[]) -> f32[] {
  %Arg_0.1828 = f32[] parameter(0)
  %Arg_1.1765 = f32[] parameter(1)
  ROOT %add.2158 = f32[] add(%Arg_0.1828, %Arg_1.1765)
}

%region_1530.39372 (Arg_0.39369: f32[], Arg_1.39370: f32[]) -> f32[] {
  %Arg_0.39369 = f32[] parameter(0)
  %Arg_1.39370 = f32[] parameter(1)
  ROOT %add.39371 = f32[] add(%Arg_0.39369, %Arg_1.39370)
}

%region_1530.39372.clone (Arg_0.1829: f32[], Arg_1.1766: f32[]) -> f32[] {
  %Arg_0.1829 = f32[] parameter(0)
  %Arg_1.1766 = f32[] parameter(1)
  ROOT %add.2159 = f32[] add(%Arg_0.1829, %Arg_1.1766)
}

%region_1531.39379 (Arg_0.39376: f32[], Arg_1.39377: f32[]) -> f32[] {
  %Arg_0.39376 = f32[] parameter(0)
  %Arg_1.39377 = f32[] parameter(1)
  ROOT %add.39378 = f32[] add(%Arg_0.39376, %Arg_1.39377)
}

%region_1531.39379.clone (Arg_0.1830: f32[], Arg_1.1767: f32[]) -> f32[] {
  %Arg_0.1830 = f32[] parameter(0)
  %Arg_1.1767 = f32[] parameter(1)
  ROOT %add.2160 = f32[] add(%Arg_0.1830, %Arg_1.1767)
}

%region_1532.39386 (Arg_0.39383: f32[], Arg_1.39384: f32[]) -> f32[] {
  %Arg_0.39383 = f32[] parameter(0)
  %Arg_1.39384 = f32[] parameter(1)
  ROOT %add.39385 = f32[] add(%Arg_0.39383, %Arg_1.39384)
}

%region_1532.39386.clone (Arg_0.1831: f32[], Arg_1.1768: f32[]) -> f32[] {
  %Arg_0.1831 = f32[] parameter(0)
  %Arg_1.1768 = f32[] parameter(1)
  ROOT %add.2161 = f32[] add(%Arg_0.1831, %Arg_1.1768)
}

%region_1533.39393 (Arg_0.39390: f32[], Arg_1.39391: f32[]) -> f32[] {
  %Arg_0.39390 = f32[] parameter(0)
  %Arg_1.39391 = f32[] parameter(1)
  ROOT %add.39392 = f32[] add(%Arg_0.39390, %Arg_1.39391)
}

%region_1533.39393.clone (Arg_0.1832: f32[], Arg_1.1769: f32[]) -> f32[] {
  %Arg_0.1832 = f32[] parameter(0)
  %Arg_1.1769 = f32[] parameter(1)
  ROOT %add.2162 = f32[] add(%Arg_0.1832, %Arg_1.1769)
}

%region_1534.39400 (Arg_0.39397: f32[], Arg_1.39398: f32[]) -> f32[] {
  %Arg_0.39397 = f32[] parameter(0)
  %Arg_1.39398 = f32[] parameter(1)
  ROOT %add.39399 = f32[] add(%Arg_0.39397, %Arg_1.39398)
}

%region_1534.39400.clone (Arg_0.1833: f32[], Arg_1.1770: f32[]) -> f32[] {
  %Arg_0.1833 = f32[] parameter(0)
  %Arg_1.1770 = f32[] parameter(1)
  ROOT %add.2163 = f32[] add(%Arg_0.1833, %Arg_1.1770)
}

%region_1535.39407 (Arg_0.39404: f32[], Arg_1.39405: f32[]) -> f32[] {
  %Arg_0.39404 = f32[] parameter(0)
  %Arg_1.39405 = f32[] parameter(1)
  ROOT %add.39406 = f32[] add(%Arg_0.39404, %Arg_1.39405)
}

%region_1536.39414 (Arg_0.39411: f32[], Arg_1.39412: f32[]) -> f32[] {
  %Arg_0.39411 = f32[] parameter(0)
  %Arg_1.39412 = f32[] parameter(1)
  ROOT %add.39413 = f32[] add(%Arg_0.39411, %Arg_1.39412)
}

%region_1537.39421 (Arg_0.39418: f32[], Arg_1.39419: f32[]) -> f32[] {
  %Arg_0.39418 = f32[] parameter(0)
  %Arg_1.39419 = f32[] parameter(1)
  ROOT %add.39420 = f32[] add(%Arg_0.39418, %Arg_1.39419)
}

%region_1537.39421.clone (Arg_0.1834: f32[], Arg_1.1771: f32[]) -> f32[] {
  %Arg_0.1834 = f32[] parameter(0)
  %Arg_1.1771 = f32[] parameter(1)
  ROOT %add.2164 = f32[] add(%Arg_0.1834, %Arg_1.1771)
}

%region_1538.39428 (Arg_0.39425: f32[], Arg_1.39426: f32[]) -> f32[] {
  %Arg_0.39425 = f32[] parameter(0)
  %Arg_1.39426 = f32[] parameter(1)
  ROOT %add.39427 = f32[] add(%Arg_0.39425, %Arg_1.39426)
}

%region_1538.39428.clone (Arg_0.1835: f32[], Arg_1.1772: f32[]) -> f32[] {
  %Arg_0.1835 = f32[] parameter(0)
  %Arg_1.1772 = f32[] parameter(1)
  ROOT %add.2165 = f32[] add(%Arg_0.1835, %Arg_1.1772)
}

%region_1539.39435 (Arg_0.39432: f32[], Arg_1.39433: f32[]) -> f32[] {
  %Arg_0.39432 = f32[] parameter(0)
  %Arg_1.39433 = f32[] parameter(1)
  ROOT %add.39434 = f32[] add(%Arg_0.39432, %Arg_1.39433)
}

%region_1539.39435.clone (Arg_0.1836: f32[], Arg_1.1773: f32[]) -> f32[] {
  %Arg_0.1836 = f32[] parameter(0)
  %Arg_1.1773 = f32[] parameter(1)
  ROOT %add.2166 = f32[] add(%Arg_0.1836, %Arg_1.1773)
}

%region_1540.39442 (Arg_0.39439: f32[], Arg_1.39440: f32[]) -> f32[] {
  %Arg_0.39439 = f32[] parameter(0)
  %Arg_1.39440 = f32[] parameter(1)
  ROOT %add.39441 = f32[] add(%Arg_0.39439, %Arg_1.39440)
}

%region_1540.39442.clone (Arg_0.1837: f32[], Arg_1.1774: f32[]) -> f32[] {
  %Arg_0.1837 = f32[] parameter(0)
  %Arg_1.1774 = f32[] parameter(1)
  ROOT %add.2167 = f32[] add(%Arg_0.1837, %Arg_1.1774)
}

%region_1541.39449 (Arg_0.39446: f32[], Arg_1.39447: f32[]) -> f32[] {
  %Arg_0.39446 = f32[] parameter(0)
  %Arg_1.39447 = f32[] parameter(1)
  ROOT %add.39448 = f32[] add(%Arg_0.39446, %Arg_1.39447)
}

%region_1541.39449.clone (Arg_0.1838: f32[], Arg_1.1775: f32[]) -> f32[] {
  %Arg_0.1838 = f32[] parameter(0)
  %Arg_1.1775 = f32[] parameter(1)
  ROOT %add.2168 = f32[] add(%Arg_0.1838, %Arg_1.1775)
}

%region_1542.39456 (Arg_0.39453: f32[], Arg_1.39454: f32[]) -> f32[] {
  %Arg_0.39453 = f32[] parameter(0)
  %Arg_1.39454 = f32[] parameter(1)
  ROOT %add.39455 = f32[] add(%Arg_0.39453, %Arg_1.39454)
}

%region_1542.39456.clone (Arg_0.1839: f32[], Arg_1.1776: f32[]) -> f32[] {
  %Arg_0.1839 = f32[] parameter(0)
  %Arg_1.1776 = f32[] parameter(1)
  ROOT %add.2169 = f32[] add(%Arg_0.1839, %Arg_1.1776)
}

%region_1543.39463 (Arg_0.39460: f32[], Arg_1.39461: f32[]) -> f32[] {
  %Arg_0.39460 = f32[] parameter(0)
  %Arg_1.39461 = f32[] parameter(1)
  ROOT %add.39462 = f32[] add(%Arg_0.39460, %Arg_1.39461)
}

%region_1543.39463.clone (Arg_0.1840: f32[], Arg_1.1777: f32[]) -> f32[] {
  %Arg_0.1840 = f32[] parameter(0)
  %Arg_1.1777 = f32[] parameter(1)
  ROOT %add.2170 = f32[] add(%Arg_0.1840, %Arg_1.1777)
}

%region_1544.39470 (Arg_0.39467: f32[], Arg_1.39468: f32[]) -> f32[] {
  %Arg_0.39467 = f32[] parameter(0)
  %Arg_1.39468 = f32[] parameter(1)
  ROOT %add.39469 = f32[] add(%Arg_0.39467, %Arg_1.39468)
}

%region_1545.39477 (Arg_0.39474: f32[], Arg_1.39475: f32[]) -> f32[] {
  %Arg_0.39474 = f32[] parameter(0)
  %Arg_1.39475 = f32[] parameter(1)
  ROOT %add.39476 = f32[] add(%Arg_0.39474, %Arg_1.39475)
}

%region_1546.39484 (Arg_0.39481: f32[], Arg_1.39482: f32[]) -> f32[] {
  %Arg_0.39481 = f32[] parameter(0)
  %Arg_1.39482 = f32[] parameter(1)
  ROOT %add.39483 = f32[] add(%Arg_0.39481, %Arg_1.39482)
}

%region_1546.39484.clone (Arg_0.1841: f32[], Arg_1.1778: f32[]) -> f32[] {
  %Arg_0.1841 = f32[] parameter(0)
  %Arg_1.1778 = f32[] parameter(1)
  ROOT %add.2171 = f32[] add(%Arg_0.1841, %Arg_1.1778)
}

%region_1547.39491 (Arg_0.39488: f32[], Arg_1.39489: f32[]) -> f32[] {
  %Arg_0.39488 = f32[] parameter(0)
  %Arg_1.39489 = f32[] parameter(1)
  ROOT %add.39490 = f32[] add(%Arg_0.39488, %Arg_1.39489)
}

%region_1547.39491.clone (Arg_0.1842: f32[], Arg_1.1779: f32[]) -> f32[] {
  %Arg_0.1842 = f32[] parameter(0)
  %Arg_1.1779 = f32[] parameter(1)
  ROOT %add.2172 = f32[] add(%Arg_0.1842, %Arg_1.1779)
}

%region_1548.39498 (Arg_0.39495: f32[], Arg_1.39496: f32[]) -> f32[] {
  %Arg_0.39495 = f32[] parameter(0)
  %Arg_1.39496 = f32[] parameter(1)
  ROOT %add.39497 = f32[] add(%Arg_0.39495, %Arg_1.39496)
}

%region_1548.39498.clone (Arg_0.1843: f32[], Arg_1.1780: f32[]) -> f32[] {
  %Arg_0.1843 = f32[] parameter(0)
  %Arg_1.1780 = f32[] parameter(1)
  ROOT %add.2173 = f32[] add(%Arg_0.1843, %Arg_1.1780)
}

%region_1549.39505 (Arg_0.39502: f32[], Arg_1.39503: f32[]) -> f32[] {
  %Arg_0.39502 = f32[] parameter(0)
  %Arg_1.39503 = f32[] parameter(1)
  ROOT %add.39504 = f32[] add(%Arg_0.39502, %Arg_1.39503)
}

%region_1549.39505.clone (Arg_0.1844: f32[], Arg_1.1781: f32[]) -> f32[] {
  %Arg_0.1844 = f32[] parameter(0)
  %Arg_1.1781 = f32[] parameter(1)
  ROOT %add.2175 = f32[] add(%Arg_0.1844, %Arg_1.1781)
}

%region_1550.39512 (Arg_0.39509: f32[], Arg_1.39510: f32[]) -> f32[] {
  %Arg_0.39509 = f32[] parameter(0)
  %Arg_1.39510 = f32[] parameter(1)
  ROOT %add.39511 = f32[] add(%Arg_0.39509, %Arg_1.39510)
}

%region_1550.39512.clone (Arg_0.1845: f32[], Arg_1.1782: f32[]) -> f32[] {
  %Arg_0.1845 = f32[] parameter(0)
  %Arg_1.1782 = f32[] parameter(1)
  ROOT %add.2176 = f32[] add(%Arg_0.1845, %Arg_1.1782)
}

%region_1551.39519 (Arg_0.39516: f32[], Arg_1.39517: f32[]) -> f32[] {
  %Arg_0.39516 = f32[] parameter(0)
  %Arg_1.39517 = f32[] parameter(1)
  ROOT %add.39518 = f32[] add(%Arg_0.39516, %Arg_1.39517)
}

%region_1551.39519.clone (Arg_0.1846: f32[], Arg_1.1783: f32[]) -> f32[] {
  %Arg_0.1846 = f32[] parameter(0)
  %Arg_1.1783 = f32[] parameter(1)
  ROOT %add.2177 = f32[] add(%Arg_0.1846, %Arg_1.1783)
}

%region_1552.39526 (Arg_0.39523: f32[], Arg_1.39524: f32[]) -> f32[] {
  %Arg_0.39523 = f32[] parameter(0)
  %Arg_1.39524 = f32[] parameter(1)
  ROOT %add.39525 = f32[] add(%Arg_0.39523, %Arg_1.39524)
}

%region_1552.39526.clone (Arg_0.1847: f32[], Arg_1.1784: f32[]) -> f32[] {
  %Arg_0.1847 = f32[] parameter(0)
  %Arg_1.1784 = f32[] parameter(1)
  ROOT %add.2178 = f32[] add(%Arg_0.1847, %Arg_1.1784)
}

%region_1553.39533 (Arg_0.39530: f32[], Arg_1.39531: f32[]) -> f32[] {
  %Arg_0.39530 = f32[] parameter(0)
  %Arg_1.39531 = f32[] parameter(1)
  ROOT %add.39532 = f32[] add(%Arg_0.39530, %Arg_1.39531)
}

%region_1554.39540 (Arg_0.39537: f32[], Arg_1.39538: f32[]) -> f32[] {
  %Arg_0.39537 = f32[] parameter(0)
  %Arg_1.39538 = f32[] parameter(1)
  ROOT %add.39539 = f32[] add(%Arg_0.39537, %Arg_1.39538)
}

%region_1555.39547 (Arg_0.39544: f32[], Arg_1.39545: f32[]) -> f32[] {
  %Arg_0.39544 = f32[] parameter(0)
  %Arg_1.39545 = f32[] parameter(1)
  ROOT %add.39546 = f32[] add(%Arg_0.39544, %Arg_1.39545)
}

%region_1555.39547.clone (Arg_0.1848: f32[], Arg_1.1785: f32[]) -> f32[] {
  %Arg_0.1848 = f32[] parameter(0)
  %Arg_1.1785 = f32[] parameter(1)
  ROOT %add.2180 = f32[] add(%Arg_0.1848, %Arg_1.1785)
}

%region_1556.39554 (Arg_0.39551: f32[], Arg_1.39552: f32[]) -> f32[] {
  %Arg_0.39551 = f32[] parameter(0)
  %Arg_1.39552 = f32[] parameter(1)
  ROOT %add.39553 = f32[] add(%Arg_0.39551, %Arg_1.39552)
}

%region_1556.39554.clone (Arg_0.1849: f32[], Arg_1.1786: f32[]) -> f32[] {
  %Arg_0.1849 = f32[] parameter(0)
  %Arg_1.1786 = f32[] parameter(1)
  ROOT %add.2181 = f32[] add(%Arg_0.1849, %Arg_1.1786)
}

%region_1557.39561 (Arg_0.39558: f32[], Arg_1.39559: f32[]) -> f32[] {
  %Arg_0.39558 = f32[] parameter(0)
  %Arg_1.39559 = f32[] parameter(1)
  ROOT %add.39560 = f32[] add(%Arg_0.39558, %Arg_1.39559)
}

%region_1557.39561.clone (Arg_0.1850: f32[], Arg_1.1787: f32[]) -> f32[] {
  %Arg_0.1850 = f32[] parameter(0)
  %Arg_1.1787 = f32[] parameter(1)
  ROOT %add.2182 = f32[] add(%Arg_0.1850, %Arg_1.1787)
}

%region_1558.39568 (Arg_0.39565: f32[], Arg_1.39566: f32[]) -> f32[] {
  %Arg_0.39565 = f32[] parameter(0)
  %Arg_1.39566 = f32[] parameter(1)
  ROOT %add.39567 = f32[] add(%Arg_0.39565, %Arg_1.39566)
}

%region_1558.39568.clone (Arg_0.1851: f32[], Arg_1.1788: f32[]) -> f32[] {
  %Arg_0.1851 = f32[] parameter(0)
  %Arg_1.1788 = f32[] parameter(1)
  ROOT %add.2183 = f32[] add(%Arg_0.1851, %Arg_1.1788)
}

%region_1559.39575 (Arg_0.39572: f32[], Arg_1.39573: f32[]) -> f32[] {
  %Arg_0.39572 = f32[] parameter(0)
  %Arg_1.39573 = f32[] parameter(1)
  ROOT %add.39574 = f32[] add(%Arg_0.39572, %Arg_1.39573)
}

%region_1559.39575.clone (Arg_0.1852: f32[], Arg_1.1789: f32[]) -> f32[] {
  %Arg_0.1852 = f32[] parameter(0)
  %Arg_1.1789 = f32[] parameter(1)
  ROOT %add.2185 = f32[] add(%Arg_0.1852, %Arg_1.1789)
}

%region_1560.39582 (Arg_0.39579: f32[], Arg_1.39580: f32[]) -> f32[] {
  %Arg_0.39579 = f32[] parameter(0)
  %Arg_1.39580 = f32[] parameter(1)
  ROOT %add.39581 = f32[] add(%Arg_0.39579, %Arg_1.39580)
}

%region_1560.39582.clone (Arg_0.1853: f32[], Arg_1.1790: f32[]) -> f32[] {
  %Arg_0.1853 = f32[] parameter(0)
  %Arg_1.1790 = f32[] parameter(1)
  ROOT %add.2186 = f32[] add(%Arg_0.1853, %Arg_1.1790)
}

%region_1561.39589 (Arg_0.39586: f32[], Arg_1.39587: f32[]) -> f32[] {
  %Arg_0.39586 = f32[] parameter(0)
  %Arg_1.39587 = f32[] parameter(1)
  ROOT %add.39588 = f32[] add(%Arg_0.39586, %Arg_1.39587)
}

%region_1561.39589.clone (Arg_0.1854: f32[], Arg_1.1791: f32[]) -> f32[] {
  %Arg_0.1854 = f32[] parameter(0)
  %Arg_1.1791 = f32[] parameter(1)
  ROOT %add.2187 = f32[] add(%Arg_0.1854, %Arg_1.1791)
}

%region_1562.39596 (Arg_0.39593: f32[], Arg_1.39594: f32[]) -> f32[] {
  %Arg_0.39593 = f32[] parameter(0)
  %Arg_1.39594 = f32[] parameter(1)
  ROOT %add.39595 = f32[] add(%Arg_0.39593, %Arg_1.39594)
}

%region_1563.39603 (Arg_0.39600: f32[], Arg_1.39601: f32[]) -> f32[] {
  %Arg_0.39600 = f32[] parameter(0)
  %Arg_1.39601 = f32[] parameter(1)
  ROOT %add.39602 = f32[] add(%Arg_0.39600, %Arg_1.39601)
}

%region_1564.39610 (Arg_0.39607: f32[], Arg_1.39608: f32[]) -> f32[] {
  %Arg_0.39607 = f32[] parameter(0)
  %Arg_1.39608 = f32[] parameter(1)
  ROOT %add.39609 = f32[] add(%Arg_0.39607, %Arg_1.39608)
}

%region_1564.39610.clone (Arg_0.1855: f32[], Arg_1.1792: f32[]) -> f32[] {
  %Arg_0.1855 = f32[] parameter(0)
  %Arg_1.1792 = f32[] parameter(1)
  ROOT %add.2188 = f32[] add(%Arg_0.1855, %Arg_1.1792)
}

%region_1565.39617 (Arg_0.39614: f32[], Arg_1.39615: f32[]) -> f32[] {
  %Arg_0.39614 = f32[] parameter(0)
  %Arg_1.39615 = f32[] parameter(1)
  ROOT %add.39616 = f32[] add(%Arg_0.39614, %Arg_1.39615)
}

%region_1565.39617.clone (Arg_0.1856: f32[], Arg_1.1793: f32[]) -> f32[] {
  %Arg_0.1856 = f32[] parameter(0)
  %Arg_1.1793 = f32[] parameter(1)
  ROOT %add.2189 = f32[] add(%Arg_0.1856, %Arg_1.1793)
}

%region_1566.39624 (Arg_0.39621: f32[], Arg_1.39622: f32[]) -> f32[] {
  %Arg_0.39621 = f32[] parameter(0)
  %Arg_1.39622 = f32[] parameter(1)
  ROOT %add.39623 = f32[] add(%Arg_0.39621, %Arg_1.39622)
}

%region_1566.39624.clone (Arg_0.1857: f32[], Arg_1.1794: f32[]) -> f32[] {
  %Arg_0.1857 = f32[] parameter(0)
  %Arg_1.1794 = f32[] parameter(1)
  ROOT %add.2190 = f32[] add(%Arg_0.1857, %Arg_1.1794)
}

%region_1567.39631 (Arg_0.39628: f32[], Arg_1.39629: f32[]) -> f32[] {
  %Arg_0.39628 = f32[] parameter(0)
  %Arg_1.39629 = f32[] parameter(1)
  ROOT %add.39630 = f32[] add(%Arg_0.39628, %Arg_1.39629)
}

%region_1567.39631.clone (Arg_0.1858: f32[], Arg_1.1795: f32[]) -> f32[] {
  %Arg_0.1858 = f32[] parameter(0)
  %Arg_1.1795 = f32[] parameter(1)
  ROOT %add.2191 = f32[] add(%Arg_0.1858, %Arg_1.1795)
}

%region_1568.39638 (Arg_0.39635: f32[], Arg_1.39636: f32[]) -> f32[] {
  %Arg_0.39635 = f32[] parameter(0)
  %Arg_1.39636 = f32[] parameter(1)
  ROOT %add.39637 = f32[] add(%Arg_0.39635, %Arg_1.39636)
}

%region_1568.39638.clone (Arg_0.1859: f32[], Arg_1.1796: f32[]) -> f32[] {
  %Arg_0.1859 = f32[] parameter(0)
  %Arg_1.1796 = f32[] parameter(1)
  ROOT %add.2192 = f32[] add(%Arg_0.1859, %Arg_1.1796)
}

%region_1569.39645 (Arg_0.39642: f32[], Arg_1.39643: f32[]) -> f32[] {
  %Arg_0.39642 = f32[] parameter(0)
  %Arg_1.39643 = f32[] parameter(1)
  ROOT %add.39644 = f32[] add(%Arg_0.39642, %Arg_1.39643)
}

%region_1569.39645.clone (Arg_0.1860: f32[], Arg_1.1797: f32[]) -> f32[] {
  %Arg_0.1860 = f32[] parameter(0)
  %Arg_1.1797 = f32[] parameter(1)
  ROOT %add.2193 = f32[] add(%Arg_0.1860, %Arg_1.1797)
}

%region_1570.39652 (Arg_0.39649: f32[], Arg_1.39650: f32[]) -> f32[] {
  %Arg_0.39649 = f32[] parameter(0)
  %Arg_1.39650 = f32[] parameter(1)
  ROOT %add.39651 = f32[] add(%Arg_0.39649, %Arg_1.39650)
}

%region_1570.39652.clone (Arg_0.1861: f32[], Arg_1.1798: f32[]) -> f32[] {
  %Arg_0.1861 = f32[] parameter(0)
  %Arg_1.1798 = f32[] parameter(1)
  ROOT %add.2194 = f32[] add(%Arg_0.1861, %Arg_1.1798)
}

%region_1571.39659 (Arg_0.39656: f32[], Arg_1.39657: f32[]) -> f32[] {
  %Arg_0.39656 = f32[] parameter(0)
  %Arg_1.39657 = f32[] parameter(1)
  ROOT %add.39658 = f32[] add(%Arg_0.39656, %Arg_1.39657)
}

%region_1572.39666 (Arg_0.39663: f32[], Arg_1.39664: f32[]) -> f32[] {
  %Arg_0.39663 = f32[] parameter(0)
  %Arg_1.39664 = f32[] parameter(1)
  ROOT %add.39665 = f32[] add(%Arg_0.39663, %Arg_1.39664)
}

%region_1573.39673 (Arg_0.39670: f32[], Arg_1.39671: f32[]) -> f32[] {
  %Arg_0.39670 = f32[] parameter(0)
  %Arg_1.39671 = f32[] parameter(1)
  ROOT %add.39672 = f32[] add(%Arg_0.39670, %Arg_1.39671)
}

%region_1573.39673.clone (Arg_0.1862: f32[], Arg_1.1799: f32[]) -> f32[] {
  %Arg_0.1862 = f32[] parameter(0)
  %Arg_1.1799 = f32[] parameter(1)
  ROOT %add.2195 = f32[] add(%Arg_0.1862, %Arg_1.1799)
}

%region_1574.39680 (Arg_0.39677: f32[], Arg_1.39678: f32[]) -> f32[] {
  %Arg_0.39677 = f32[] parameter(0)
  %Arg_1.39678 = f32[] parameter(1)
  ROOT %add.39679 = f32[] add(%Arg_0.39677, %Arg_1.39678)
}

%region_1574.39680.clone (Arg_0.1863: f32[], Arg_1.1800: f32[]) -> f32[] {
  %Arg_0.1863 = f32[] parameter(0)
  %Arg_1.1800 = f32[] parameter(1)
  ROOT %add.2196 = f32[] add(%Arg_0.1863, %Arg_1.1800)
}

%region_1575.39687 (Arg_0.39684: f32[], Arg_1.39685: f32[]) -> f32[] {
  %Arg_0.39684 = f32[] parameter(0)
  %Arg_1.39685 = f32[] parameter(1)
  ROOT %add.39686 = f32[] add(%Arg_0.39684, %Arg_1.39685)
}

%region_1575.39687.clone (Arg_0.1864: f32[], Arg_1.1801: f32[]) -> f32[] {
  %Arg_0.1864 = f32[] parameter(0)
  %Arg_1.1801 = f32[] parameter(1)
  ROOT %add.2197 = f32[] add(%Arg_0.1864, %Arg_1.1801)
}

%region_1576.39694 (Arg_0.39691: f32[], Arg_1.39692: f32[]) -> f32[] {
  %Arg_0.39691 = f32[] parameter(0)
  %Arg_1.39692 = f32[] parameter(1)
  ROOT %add.39693 = f32[] add(%Arg_0.39691, %Arg_1.39692)
}

%region_1576.39694.clone (Arg_0.1865: f32[], Arg_1.1802: f32[]) -> f32[] {
  %Arg_0.1865 = f32[] parameter(0)
  %Arg_1.1802 = f32[] parameter(1)
  ROOT %add.2198 = f32[] add(%Arg_0.1865, %Arg_1.1802)
}

%region_1577.39701 (Arg_0.39698: f32[], Arg_1.39699: f32[]) -> f32[] {
  %Arg_0.39698 = f32[] parameter(0)
  %Arg_1.39699 = f32[] parameter(1)
  ROOT %add.39700 = f32[] add(%Arg_0.39698, %Arg_1.39699)
}

%region_1577.39701.clone (Arg_0.1867: f32[], Arg_1.1803: f32[]) -> f32[] {
  %Arg_0.1867 = f32[] parameter(0)
  %Arg_1.1803 = f32[] parameter(1)
  ROOT %add.2199 = f32[] add(%Arg_0.1867, %Arg_1.1803)
}

%region_1578.39708 (Arg_0.39705: f32[], Arg_1.39706: f32[]) -> f32[] {
  %Arg_0.39705 = f32[] parameter(0)
  %Arg_1.39706 = f32[] parameter(1)
  ROOT %add.39707 = f32[] add(%Arg_0.39705, %Arg_1.39706)
}

%region_1578.39708.clone (Arg_0.1868: f32[], Arg_1.1804: f32[]) -> f32[] {
  %Arg_0.1868 = f32[] parameter(0)
  %Arg_1.1804 = f32[] parameter(1)
  ROOT %add.2200 = f32[] add(%Arg_0.1868, %Arg_1.1804)
}

%region_1579.39715 (Arg_0.39712: f32[], Arg_1.39713: f32[]) -> f32[] {
  %Arg_0.39712 = f32[] parameter(0)
  %Arg_1.39713 = f32[] parameter(1)
  ROOT %add.39714 = f32[] add(%Arg_0.39712, %Arg_1.39713)
}

%region_1579.39715.clone (Arg_0.1869: f32[], Arg_1.1805: f32[]) -> f32[] {
  %Arg_0.1869 = f32[] parameter(0)
  %Arg_1.1805 = f32[] parameter(1)
  ROOT %add.2201 = f32[] add(%Arg_0.1869, %Arg_1.1805)
}

%region_1580.39722 (Arg_0.39719: f32[], Arg_1.39720: f32[]) -> f32[] {
  %Arg_0.39719 = f32[] parameter(0)
  %Arg_1.39720 = f32[] parameter(1)
  ROOT %add.39721 = f32[] add(%Arg_0.39719, %Arg_1.39720)
}

%region_1581.39729 (Arg_0.39726: f32[], Arg_1.39727: f32[]) -> f32[] {
  %Arg_0.39726 = f32[] parameter(0)
  %Arg_1.39727 = f32[] parameter(1)
  ROOT %add.39728 = f32[] add(%Arg_0.39726, %Arg_1.39727)
}

%region_1582.39736 (Arg_0.39733: f32[], Arg_1.39734: f32[]) -> f32[] {
  %Arg_0.39733 = f32[] parameter(0)
  %Arg_1.39734 = f32[] parameter(1)
  ROOT %add.39735 = f32[] add(%Arg_0.39733, %Arg_1.39734)
}

%region_1582.39736.clone (Arg_0.1870: f32[], Arg_1.1806: f32[]) -> f32[] {
  %Arg_0.1870 = f32[] parameter(0)
  %Arg_1.1806 = f32[] parameter(1)
  ROOT %add.2202 = f32[] add(%Arg_0.1870, %Arg_1.1806)
}

%region_1583.39743 (Arg_0.39740: f32[], Arg_1.39741: f32[]) -> f32[] {
  %Arg_0.39740 = f32[] parameter(0)
  %Arg_1.39741 = f32[] parameter(1)
  ROOT %add.39742 = f32[] add(%Arg_0.39740, %Arg_1.39741)
}

%region_1583.39743.clone (Arg_0.1871: f32[], Arg_1.1807: f32[]) -> f32[] {
  %Arg_0.1871 = f32[] parameter(0)
  %Arg_1.1807 = f32[] parameter(1)
  ROOT %add.2203 = f32[] add(%Arg_0.1871, %Arg_1.1807)
}

%region_1584.39750 (Arg_0.39747: f32[], Arg_1.39748: f32[]) -> f32[] {
  %Arg_0.39747 = f32[] parameter(0)
  %Arg_1.39748 = f32[] parameter(1)
  ROOT %add.39749 = f32[] add(%Arg_0.39747, %Arg_1.39748)
}

%region_1584.39750.clone (Arg_0.1872: f32[], Arg_1.1808: f32[]) -> f32[] {
  %Arg_0.1872 = f32[] parameter(0)
  %Arg_1.1808 = f32[] parameter(1)
  ROOT %add.2204 = f32[] add(%Arg_0.1872, %Arg_1.1808)
}

%region_1585.39757 (Arg_0.39754: f32[], Arg_1.39755: f32[]) -> f32[] {
  %Arg_0.39754 = f32[] parameter(0)
  %Arg_1.39755 = f32[] parameter(1)
  ROOT %add.39756 = f32[] add(%Arg_0.39754, %Arg_1.39755)
}

%region_1585.39757.clone (Arg_0.1873: f32[], Arg_1.1809: f32[]) -> f32[] {
  %Arg_0.1873 = f32[] parameter(0)
  %Arg_1.1809 = f32[] parameter(1)
  ROOT %add.2205 = f32[] add(%Arg_0.1873, %Arg_1.1809)
}

%region_1586.39764 (Arg_0.39761: f32[], Arg_1.39762: f32[]) -> f32[] {
  %Arg_0.39761 = f32[] parameter(0)
  %Arg_1.39762 = f32[] parameter(1)
  ROOT %add.39763 = f32[] add(%Arg_0.39761, %Arg_1.39762)
}

%region_1586.39764.clone (Arg_0.1875: f32[], Arg_1.1810: f32[]) -> f32[] {
  %Arg_0.1875 = f32[] parameter(0)
  %Arg_1.1810 = f32[] parameter(1)
  ROOT %add.2206 = f32[] add(%Arg_0.1875, %Arg_1.1810)
}

%region_1587.39771 (Arg_0.39768: f32[], Arg_1.39769: f32[]) -> f32[] {
  %Arg_0.39768 = f32[] parameter(0)
  %Arg_1.39769 = f32[] parameter(1)
  ROOT %add.39770 = f32[] add(%Arg_0.39768, %Arg_1.39769)
}

%region_1587.39771.clone (Arg_0.1876: f32[], Arg_1.1811: f32[]) -> f32[] {
  %Arg_0.1876 = f32[] parameter(0)
  %Arg_1.1811 = f32[] parameter(1)
  ROOT %add.2207 = f32[] add(%Arg_0.1876, %Arg_1.1811)
}

%region_1588.39778 (Arg_0.39775: f32[], Arg_1.39776: f32[]) -> f32[] {
  %Arg_0.39775 = f32[] parameter(0)
  %Arg_1.39776 = f32[] parameter(1)
  ROOT %add.39777 = f32[] add(%Arg_0.39775, %Arg_1.39776)
}

%region_1588.39778.clone (Arg_0.1877: f32[], Arg_1.1812: f32[]) -> f32[] {
  %Arg_0.1877 = f32[] parameter(0)
  %Arg_1.1812 = f32[] parameter(1)
  ROOT %add.2208 = f32[] add(%Arg_0.1877, %Arg_1.1812)
}

%region_1589.39785 (Arg_0.39782: f32[], Arg_1.39783: f32[]) -> f32[] {
  %Arg_0.39782 = f32[] parameter(0)
  %Arg_1.39783 = f32[] parameter(1)
  ROOT %add.39784 = f32[] add(%Arg_0.39782, %Arg_1.39783)
}

%region_1590.39792 (Arg_0.39789: f32[], Arg_1.39790: f32[]) -> f32[] {
  %Arg_0.39789 = f32[] parameter(0)
  %Arg_1.39790 = f32[] parameter(1)
  ROOT %add.39791 = f32[] add(%Arg_0.39789, %Arg_1.39790)
}

%region_1591.39799 (Arg_0.39796: f32[], Arg_1.39797: f32[]) -> f32[] {
  %Arg_0.39796 = f32[] parameter(0)
  %Arg_1.39797 = f32[] parameter(1)
  ROOT %add.39798 = f32[] add(%Arg_0.39796, %Arg_1.39797)
}

%region_1591.39799.clone (Arg_0.1878: f32[], Arg_1.1813: f32[]) -> f32[] {
  %Arg_0.1878 = f32[] parameter(0)
  %Arg_1.1813 = f32[] parameter(1)
  ROOT %add.2209 = f32[] add(%Arg_0.1878, %Arg_1.1813)
}

%region_1592.39806 (Arg_0.39803: f32[], Arg_1.39804: f32[]) -> f32[] {
  %Arg_0.39803 = f32[] parameter(0)
  %Arg_1.39804 = f32[] parameter(1)
  ROOT %add.39805 = f32[] add(%Arg_0.39803, %Arg_1.39804)
}

%region_1592.39806.clone (Arg_0.1880: f32[], Arg_1.1814: f32[]) -> f32[] {
  %Arg_0.1880 = f32[] parameter(0)
  %Arg_1.1814 = f32[] parameter(1)
  ROOT %add.2211 = f32[] add(%Arg_0.1880, %Arg_1.1814)
}

%region_1593.39813 (Arg_0.39810: f32[], Arg_1.39811: f32[]) -> f32[] {
  %Arg_0.39810 = f32[] parameter(0)
  %Arg_1.39811 = f32[] parameter(1)
  ROOT %add.39812 = f32[] add(%Arg_0.39810, %Arg_1.39811)
}

%region_1593.39813.clone (Arg_0.1881: f32[], Arg_1.1815: f32[]) -> f32[] {
  %Arg_0.1881 = f32[] parameter(0)
  %Arg_1.1815 = f32[] parameter(1)
  ROOT %add.2212 = f32[] add(%Arg_0.1881, %Arg_1.1815)
}

%region_1594.39820 (Arg_0.39817: f32[], Arg_1.39818: f32[]) -> f32[] {
  %Arg_0.39817 = f32[] parameter(0)
  %Arg_1.39818 = f32[] parameter(1)
  ROOT %add.39819 = f32[] add(%Arg_0.39817, %Arg_1.39818)
}

%region_1594.39820.clone (Arg_0.1882: f32[], Arg_1.1816: f32[]) -> f32[] {
  %Arg_0.1882 = f32[] parameter(0)
  %Arg_1.1816 = f32[] parameter(1)
  ROOT %add.2213 = f32[] add(%Arg_0.1882, %Arg_1.1816)
}

%region_1595.39827 (Arg_0.39824: f32[], Arg_1.39825: f32[]) -> f32[] {
  %Arg_0.39824 = f32[] parameter(0)
  %Arg_1.39825 = f32[] parameter(1)
  ROOT %add.39826 = f32[] add(%Arg_0.39824, %Arg_1.39825)
}

%region_1595.39827.clone (Arg_0.1883: f32[], Arg_1.1817: f32[]) -> f32[] {
  %Arg_0.1883 = f32[] parameter(0)
  %Arg_1.1817 = f32[] parameter(1)
  ROOT %add.2214 = f32[] add(%Arg_0.1883, %Arg_1.1817)
}

%region_1596.39834 (Arg_0.39831: f32[], Arg_1.39832: f32[]) -> f32[] {
  %Arg_0.39831 = f32[] parameter(0)
  %Arg_1.39832 = f32[] parameter(1)
  ROOT %add.39833 = f32[] add(%Arg_0.39831, %Arg_1.39832)
}

%region_1596.39834.clone (Arg_0.1884: f32[], Arg_1.1818: f32[]) -> f32[] {
  %Arg_0.1884 = f32[] parameter(0)
  %Arg_1.1818 = f32[] parameter(1)
  ROOT %add.2215 = f32[] add(%Arg_0.1884, %Arg_1.1818)
}

%region_1597.39841 (Arg_0.39838: f32[], Arg_1.39839: f32[]) -> f32[] {
  %Arg_0.39838 = f32[] parameter(0)
  %Arg_1.39839 = f32[] parameter(1)
  ROOT %add.39840 = f32[] add(%Arg_0.39838, %Arg_1.39839)
}

%region_1597.39841.clone (Arg_0.1885: f32[], Arg_1.1819: f32[]) -> f32[] {
  %Arg_0.1885 = f32[] parameter(0)
  %Arg_1.1819 = f32[] parameter(1)
  ROOT %add.2216 = f32[] add(%Arg_0.1885, %Arg_1.1819)
}

%region_1598.39848 (Arg_0.39845: f32[], Arg_1.39846: f32[]) -> f32[] {
  %Arg_0.39845 = f32[] parameter(0)
  %Arg_1.39846 = f32[] parameter(1)
  ROOT %add.39847 = f32[] add(%Arg_0.39845, %Arg_1.39846)
}

%region_1599.39855 (Arg_0.39852: f32[], Arg_1.39853: f32[]) -> f32[] {
  %Arg_0.39852 = f32[] parameter(0)
  %Arg_1.39853 = f32[] parameter(1)
  ROOT %add.39854 = f32[] add(%Arg_0.39852, %Arg_1.39853)
}

%region_1600.39862 (Arg_0.39859: f32[], Arg_1.39860: f32[]) -> f32[] {
  %Arg_0.39859 = f32[] parameter(0)
  %Arg_1.39860 = f32[] parameter(1)
  ROOT %add.39861 = f32[] add(%Arg_0.39859, %Arg_1.39860)
}

%region_1600.39862.clone (Arg_0.1886: f32[], Arg_1.1820: f32[]) -> f32[] {
  %Arg_0.1886 = f32[] parameter(0)
  %Arg_1.1820 = f32[] parameter(1)
  ROOT %add.2218 = f32[] add(%Arg_0.1886, %Arg_1.1820)
}

%region_1601.39869 (Arg_0.39866: f32[], Arg_1.39867: f32[]) -> f32[] {
  %Arg_0.39866 = f32[] parameter(0)
  %Arg_1.39867 = f32[] parameter(1)
  ROOT %add.39868 = f32[] add(%Arg_0.39866, %Arg_1.39867)
}

%region_1601.39869.clone (Arg_0.1887: f32[], Arg_1.1821: f32[]) -> f32[] {
  %Arg_0.1887 = f32[] parameter(0)
  %Arg_1.1821 = f32[] parameter(1)
  ROOT %add.2219 = f32[] add(%Arg_0.1887, %Arg_1.1821)
}

%region_1602.39876 (Arg_0.39873: f32[], Arg_1.39874: f32[]) -> f32[] {
  %Arg_0.39873 = f32[] parameter(0)
  %Arg_1.39874 = f32[] parameter(1)
  ROOT %add.39875 = f32[] add(%Arg_0.39873, %Arg_1.39874)
}

%region_1602.39876.clone (Arg_0.1888: f32[], Arg_1.1822: f32[]) -> f32[] {
  %Arg_0.1888 = f32[] parameter(0)
  %Arg_1.1822 = f32[] parameter(1)
  ROOT %add.2220 = f32[] add(%Arg_0.1888, %Arg_1.1822)
}

%region_1603.39883 (Arg_0.39880: f32[], Arg_1.39881: f32[]) -> f32[] {
  %Arg_0.39880 = f32[] parameter(0)
  %Arg_1.39881 = f32[] parameter(1)
  ROOT %add.39882 = f32[] add(%Arg_0.39880, %Arg_1.39881)
}

%region_1603.39883.clone (Arg_0.1889: f32[], Arg_1.1823: f32[]) -> f32[] {
  %Arg_0.1889 = f32[] parameter(0)
  %Arg_1.1823 = f32[] parameter(1)
  ROOT %add.2221 = f32[] add(%Arg_0.1889, %Arg_1.1823)
}

%region_1604.39890 (Arg_0.39887: f32[], Arg_1.39888: f32[]) -> f32[] {
  %Arg_0.39887 = f32[] parameter(0)
  %Arg_1.39888 = f32[] parameter(1)
  ROOT %add.39889 = f32[] add(%Arg_0.39887, %Arg_1.39888)
}

%region_1604.39890.clone (Arg_0.1890: f32[], Arg_1.1824: f32[]) -> f32[] {
  %Arg_0.1890 = f32[] parameter(0)
  %Arg_1.1824 = f32[] parameter(1)
  ROOT %add.2223 = f32[] add(%Arg_0.1890, %Arg_1.1824)
}

%region_1605.39897 (Arg_0.39894: f32[], Arg_1.39895: f32[]) -> f32[] {
  %Arg_0.39894 = f32[] parameter(0)
  %Arg_1.39895 = f32[] parameter(1)
  ROOT %add.39896 = f32[] add(%Arg_0.39894, %Arg_1.39895)
}

%region_1605.39897.clone (Arg_0.1891: f32[], Arg_1.1825: f32[]) -> f32[] {
  %Arg_0.1891 = f32[] parameter(0)
  %Arg_1.1825 = f32[] parameter(1)
  ROOT %add.2224 = f32[] add(%Arg_0.1891, %Arg_1.1825)
}

%region_1606.39904 (Arg_0.39901: f32[], Arg_1.39902: f32[]) -> f32[] {
  %Arg_0.39901 = f32[] parameter(0)
  %Arg_1.39902 = f32[] parameter(1)
  ROOT %add.39903 = f32[] add(%Arg_0.39901, %Arg_1.39902)
}

%region_1606.39904.clone (Arg_0.1892: f32[], Arg_1.1826: f32[]) -> f32[] {
  %Arg_0.1892 = f32[] parameter(0)
  %Arg_1.1826 = f32[] parameter(1)
  ROOT %add.2225 = f32[] add(%Arg_0.1892, %Arg_1.1826)
}

%region_1607.39911 (Arg_0.39908: f32[], Arg_1.39909: f32[]) -> f32[] {
  %Arg_0.39908 = f32[] parameter(0)
  %Arg_1.39909 = f32[] parameter(1)
  ROOT %add.39910 = f32[] add(%Arg_0.39908, %Arg_1.39909)
}

%region_1608.39918 (Arg_0.39915: f32[], Arg_1.39916: f32[]) -> f32[] {
  %Arg_0.39915 = f32[] parameter(0)
  %Arg_1.39916 = f32[] parameter(1)
  ROOT %add.39917 = f32[] add(%Arg_0.39915, %Arg_1.39916)
}

%region_1609.39925 (Arg_0.39922: f32[], Arg_1.39923: f32[]) -> f32[] {
  %Arg_0.39922 = f32[] parameter(0)
  %Arg_1.39923 = f32[] parameter(1)
  ROOT %add.39924 = f32[] add(%Arg_0.39922, %Arg_1.39923)
}

%region_1609.39925.clone (Arg_0.1893: f32[], Arg_1.1827: f32[]) -> f32[] {
  %Arg_0.1893 = f32[] parameter(0)
  %Arg_1.1827 = f32[] parameter(1)
  ROOT %add.2226 = f32[] add(%Arg_0.1893, %Arg_1.1827)
}

%region_1610.39932 (Arg_0.39929: f32[], Arg_1.39930: f32[]) -> f32[] {
  %Arg_0.39929 = f32[] parameter(0)
  %Arg_1.39930 = f32[] parameter(1)
  ROOT %add.39931 = f32[] add(%Arg_0.39929, %Arg_1.39930)
}

%region_1610.39932.clone (Arg_0.1894: f32[], Arg_1.1828: f32[]) -> f32[] {
  %Arg_0.1894 = f32[] parameter(0)
  %Arg_1.1828 = f32[] parameter(1)
  ROOT %add.2227 = f32[] add(%Arg_0.1894, %Arg_1.1828)
}

%region_1611.39939 (Arg_0.39936: f32[], Arg_1.39937: f32[]) -> f32[] {
  %Arg_0.39936 = f32[] parameter(0)
  %Arg_1.39937 = f32[] parameter(1)
  ROOT %add.39938 = f32[] add(%Arg_0.39936, %Arg_1.39937)
}

%region_1611.39939.clone (Arg_0.1895: f32[], Arg_1.1829: f32[]) -> f32[] {
  %Arg_0.1895 = f32[] parameter(0)
  %Arg_1.1829 = f32[] parameter(1)
  ROOT %add.2228 = f32[] add(%Arg_0.1895, %Arg_1.1829)
}

%region_1612.39946 (Arg_0.39943: f32[], Arg_1.39944: f32[]) -> f32[] {
  %Arg_0.39943 = f32[] parameter(0)
  %Arg_1.39944 = f32[] parameter(1)
  ROOT %add.39945 = f32[] add(%Arg_0.39943, %Arg_1.39944)
}

%region_1612.39946.clone (Arg_0.1896: f32[], Arg_1.1830: f32[]) -> f32[] {
  %Arg_0.1896 = f32[] parameter(0)
  %Arg_1.1830 = f32[] parameter(1)
  ROOT %add.2229 = f32[] add(%Arg_0.1896, %Arg_1.1830)
}

%region_1613.39953 (Arg_0.39950: f32[], Arg_1.39951: f32[]) -> f32[] {
  %Arg_0.39950 = f32[] parameter(0)
  %Arg_1.39951 = f32[] parameter(1)
  ROOT %add.39952 = f32[] add(%Arg_0.39950, %Arg_1.39951)
}

%region_1613.39953.clone (Arg_0.1898: f32[], Arg_1.1831: f32[]) -> f32[] {
  %Arg_0.1898 = f32[] parameter(0)
  %Arg_1.1831 = f32[] parameter(1)
  ROOT %add.2230 = f32[] add(%Arg_0.1898, %Arg_1.1831)
}

%region_1614.39960 (Arg_0.39957: f32[], Arg_1.39958: f32[]) -> f32[] {
  %Arg_0.39957 = f32[] parameter(0)
  %Arg_1.39958 = f32[] parameter(1)
  ROOT %add.39959 = f32[] add(%Arg_0.39957, %Arg_1.39958)
}

%region_1614.39960.clone (Arg_0.1899: f32[], Arg_1.1832: f32[]) -> f32[] {
  %Arg_0.1899 = f32[] parameter(0)
  %Arg_1.1832 = f32[] parameter(1)
  ROOT %add.2231 = f32[] add(%Arg_0.1899, %Arg_1.1832)
}

%region_1615.39967 (Arg_0.39964: f32[], Arg_1.39965: f32[]) -> f32[] {
  %Arg_0.39964 = f32[] parameter(0)
  %Arg_1.39965 = f32[] parameter(1)
  ROOT %add.39966 = f32[] add(%Arg_0.39964, %Arg_1.39965)
}

%region_1615.39967.clone (Arg_0.1900: f32[], Arg_1.1833: f32[]) -> f32[] {
  %Arg_0.1900 = f32[] parameter(0)
  %Arg_1.1833 = f32[] parameter(1)
  ROOT %add.2232 = f32[] add(%Arg_0.1900, %Arg_1.1833)
}

%region_1616.39974 (Arg_0.39971: f32[], Arg_1.39972: f32[]) -> f32[] {
  %Arg_0.39971 = f32[] parameter(0)
  %Arg_1.39972 = f32[] parameter(1)
  ROOT %add.39973 = f32[] add(%Arg_0.39971, %Arg_1.39972)
}

%region_1617.39981 (Arg_0.39978: f32[], Arg_1.39979: f32[]) -> f32[] {
  %Arg_0.39978 = f32[] parameter(0)
  %Arg_1.39979 = f32[] parameter(1)
  ROOT %add.39980 = f32[] add(%Arg_0.39978, %Arg_1.39979)
}

%region_1618.39988 (Arg_0.39985: f32[], Arg_1.39986: f32[]) -> f32[] {
  %Arg_0.39985 = f32[] parameter(0)
  %Arg_1.39986 = f32[] parameter(1)
  ROOT %add.39987 = f32[] add(%Arg_0.39985, %Arg_1.39986)
}

%region_1618.39988.clone (Arg_0.1901: f32[], Arg_1.1834: f32[]) -> f32[] {
  %Arg_0.1901 = f32[] parameter(0)
  %Arg_1.1834 = f32[] parameter(1)
  ROOT %add.2233 = f32[] add(%Arg_0.1901, %Arg_1.1834)
}

%region_1619.39995 (Arg_0.39992: f32[], Arg_1.39993: f32[]) -> f32[] {
  %Arg_0.39992 = f32[] parameter(0)
  %Arg_1.39993 = f32[] parameter(1)
  ROOT %add.39994 = f32[] add(%Arg_0.39992, %Arg_1.39993)
}

%region_1619.39995.clone (Arg_0.1902: f32[], Arg_1.1835: f32[]) -> f32[] {
  %Arg_0.1902 = f32[] parameter(0)
  %Arg_1.1835 = f32[] parameter(1)
  ROOT %add.2234 = f32[] add(%Arg_0.1902, %Arg_1.1835)
}

%region_1620.40002 (Arg_0.39999: f32[], Arg_1.40000: f32[]) -> f32[] {
  %Arg_0.39999 = f32[] parameter(0)
  %Arg_1.40000 = f32[] parameter(1)
  ROOT %add.40001 = f32[] add(%Arg_0.39999, %Arg_1.40000)
}

%region_1620.40002.clone (Arg_0.1903: f32[], Arg_1.1836: f32[]) -> f32[] {
  %Arg_0.1903 = f32[] parameter(0)
  %Arg_1.1836 = f32[] parameter(1)
  ROOT %add.2235 = f32[] add(%Arg_0.1903, %Arg_1.1836)
}

%region_1621.40009 (Arg_0.40006: f32[], Arg_1.40007: f32[]) -> f32[] {
  %Arg_0.40006 = f32[] parameter(0)
  %Arg_1.40007 = f32[] parameter(1)
  ROOT %add.40008 = f32[] add(%Arg_0.40006, %Arg_1.40007)
}

%region_1621.40009.clone (Arg_0.1904: f32[], Arg_1.1837: f32[]) -> f32[] {
  %Arg_0.1904 = f32[] parameter(0)
  %Arg_1.1837 = f32[] parameter(1)
  ROOT %add.2236 = f32[] add(%Arg_0.1904, %Arg_1.1837)
}

%region_1622.40016 (Arg_0.40013: f32[], Arg_1.40014: f32[]) -> f32[] {
  %Arg_0.40013 = f32[] parameter(0)
  %Arg_1.40014 = f32[] parameter(1)
  ROOT %add.40015 = f32[] add(%Arg_0.40013, %Arg_1.40014)
}

%region_1622.40016.clone (Arg_0.1905: f32[], Arg_1.1838: f32[]) -> f32[] {
  %Arg_0.1905 = f32[] parameter(0)
  %Arg_1.1838 = f32[] parameter(1)
  ROOT %add.2237 = f32[] add(%Arg_0.1905, %Arg_1.1838)
}

%region_1623.40023 (Arg_0.40020: f32[], Arg_1.40021: f32[]) -> f32[] {
  %Arg_0.40020 = f32[] parameter(0)
  %Arg_1.40021 = f32[] parameter(1)
  ROOT %add.40022 = f32[] add(%Arg_0.40020, %Arg_1.40021)
}

%region_1623.40023.clone (Arg_0.1906: f32[], Arg_1.1839: f32[]) -> f32[] {
  %Arg_0.1906 = f32[] parameter(0)
  %Arg_1.1839 = f32[] parameter(1)
  ROOT %add.2238 = f32[] add(%Arg_0.1906, %Arg_1.1839)
}

%region_1624.40030 (Arg_0.40027: f32[], Arg_1.40028: f32[]) -> f32[] {
  %Arg_0.40027 = f32[] parameter(0)
  %Arg_1.40028 = f32[] parameter(1)
  ROOT %add.40029 = f32[] add(%Arg_0.40027, %Arg_1.40028)
}

%region_1624.40030.clone (Arg_0.1907: f32[], Arg_1.1840: f32[]) -> f32[] {
  %Arg_0.1907 = f32[] parameter(0)
  %Arg_1.1840 = f32[] parameter(1)
  ROOT %add.2239 = f32[] add(%Arg_0.1907, %Arg_1.1840)
}

%region_1625.40037 (Arg_0.40034: f32[], Arg_1.40035: f32[]) -> f32[] {
  %Arg_0.40034 = f32[] parameter(0)
  %Arg_1.40035 = f32[] parameter(1)
  ROOT %add.40036 = f32[] add(%Arg_0.40034, %Arg_1.40035)
}

%region_1626.40044 (Arg_0.40041: f32[], Arg_1.40042: f32[]) -> f32[] {
  %Arg_0.40041 = f32[] parameter(0)
  %Arg_1.40042 = f32[] parameter(1)
  ROOT %add.40043 = f32[] add(%Arg_0.40041, %Arg_1.40042)
}

%region_1627.40051 (Arg_0.40048: f32[], Arg_1.40049: f32[]) -> f32[] {
  %Arg_0.40048 = f32[] parameter(0)
  %Arg_1.40049 = f32[] parameter(1)
  ROOT %add.40050 = f32[] add(%Arg_0.40048, %Arg_1.40049)
}

%region_1627.40051.clone (Arg_0.1908: f32[], Arg_1.1841: f32[]) -> f32[] {
  %Arg_0.1908 = f32[] parameter(0)
  %Arg_1.1841 = f32[] parameter(1)
  ROOT %add.2240 = f32[] add(%Arg_0.1908, %Arg_1.1841)
}

%region_1628.40058 (Arg_0.40055: f32[], Arg_1.40056: f32[]) -> f32[] {
  %Arg_0.40055 = f32[] parameter(0)
  %Arg_1.40056 = f32[] parameter(1)
  ROOT %add.40057 = f32[] add(%Arg_0.40055, %Arg_1.40056)
}

%region_1628.40058.clone (Arg_0.1909: f32[], Arg_1.1842: f32[]) -> f32[] {
  %Arg_0.1909 = f32[] parameter(0)
  %Arg_1.1842 = f32[] parameter(1)
  ROOT %add.2241 = f32[] add(%Arg_0.1909, %Arg_1.1842)
}

%region_1629.40065 (Arg_0.40062: f32[], Arg_1.40063: f32[]) -> f32[] {
  %Arg_0.40062 = f32[] parameter(0)
  %Arg_1.40063 = f32[] parameter(1)
  ROOT %add.40064 = f32[] add(%Arg_0.40062, %Arg_1.40063)
}

%region_1629.40065.clone (Arg_0.1910: f32[], Arg_1.1843: f32[]) -> f32[] {
  %Arg_0.1910 = f32[] parameter(0)
  %Arg_1.1843 = f32[] parameter(1)
  ROOT %add.2242 = f32[] add(%Arg_0.1910, %Arg_1.1843)
}

%region_1630.40072 (Arg_0.40069: f32[], Arg_1.40070: f32[]) -> f32[] {
  %Arg_0.40069 = f32[] parameter(0)
  %Arg_1.40070 = f32[] parameter(1)
  ROOT %add.40071 = f32[] add(%Arg_0.40069, %Arg_1.40070)
}

%region_1630.40072.clone (Arg_0.1911: f32[], Arg_1.1844: f32[]) -> f32[] {
  %Arg_0.1911 = f32[] parameter(0)
  %Arg_1.1844 = f32[] parameter(1)
  ROOT %add.2243 = f32[] add(%Arg_0.1911, %Arg_1.1844)
}

%region_1631.40079 (Arg_0.40076: f32[], Arg_1.40077: f32[]) -> f32[] {
  %Arg_0.40076 = f32[] parameter(0)
  %Arg_1.40077 = f32[] parameter(1)
  ROOT %add.40078 = f32[] add(%Arg_0.40076, %Arg_1.40077)
}

%region_1631.40079.clone (Arg_0.1912: f32[], Arg_1.1845: f32[]) -> f32[] {
  %Arg_0.1912 = f32[] parameter(0)
  %Arg_1.1845 = f32[] parameter(1)
  ROOT %add.2244 = f32[] add(%Arg_0.1912, %Arg_1.1845)
}

%region_1632.40086 (Arg_0.40083: f32[], Arg_1.40084: f32[]) -> f32[] {
  %Arg_0.40083 = f32[] parameter(0)
  %Arg_1.40084 = f32[] parameter(1)
  ROOT %add.40085 = f32[] add(%Arg_0.40083, %Arg_1.40084)
}

%region_1632.40086.clone (Arg_0.1913: f32[], Arg_1.1846: f32[]) -> f32[] {
  %Arg_0.1913 = f32[] parameter(0)
  %Arg_1.1846 = f32[] parameter(1)
  ROOT %add.2245 = f32[] add(%Arg_0.1913, %Arg_1.1846)
}

%region_1633.40093 (Arg_0.40090: f32[], Arg_1.40091: f32[]) -> f32[] {
  %Arg_0.40090 = f32[] parameter(0)
  %Arg_1.40091 = f32[] parameter(1)
  ROOT %add.40092 = f32[] add(%Arg_0.40090, %Arg_1.40091)
}

%region_1633.40093.clone (Arg_0.1914: f32[], Arg_1.1847: f32[]) -> f32[] {
  %Arg_0.1914 = f32[] parameter(0)
  %Arg_1.1847 = f32[] parameter(1)
  ROOT %add.2246 = f32[] add(%Arg_0.1914, %Arg_1.1847)
}

%region_1634.40100 (Arg_0.40097: f32[], Arg_1.40098: f32[]) -> f32[] {
  %Arg_0.40097 = f32[] parameter(0)
  %Arg_1.40098 = f32[] parameter(1)
  ROOT %add.40099 = f32[] add(%Arg_0.40097, %Arg_1.40098)
}

%region_1635.40107 (Arg_0.40104: f32[], Arg_1.40105: f32[]) -> f32[] {
  %Arg_0.40104 = f32[] parameter(0)
  %Arg_1.40105 = f32[] parameter(1)
  ROOT %add.40106 = f32[] add(%Arg_0.40104, %Arg_1.40105)
}

%region_1636.40114 (Arg_0.40111: f32[], Arg_1.40112: f32[]) -> f32[] {
  %Arg_0.40111 = f32[] parameter(0)
  %Arg_1.40112 = f32[] parameter(1)
  ROOT %add.40113 = f32[] add(%Arg_0.40111, %Arg_1.40112)
}

%region_1636.40114.clone (Arg_0.1915: f32[], Arg_1.1848: f32[]) -> f32[] {
  %Arg_0.1915 = f32[] parameter(0)
  %Arg_1.1848 = f32[] parameter(1)
  ROOT %add.2247 = f32[] add(%Arg_0.1915, %Arg_1.1848)
}

%region_1637.40121 (Arg_0.40118: f32[], Arg_1.40119: f32[]) -> f32[] {
  %Arg_0.40118 = f32[] parameter(0)
  %Arg_1.40119 = f32[] parameter(1)
  ROOT %add.40120 = f32[] add(%Arg_0.40118, %Arg_1.40119)
}

%region_1637.40121.clone (Arg_0.1916: f32[], Arg_1.1849: f32[]) -> f32[] {
  %Arg_0.1916 = f32[] parameter(0)
  %Arg_1.1849 = f32[] parameter(1)
  ROOT %add.2248 = f32[] add(%Arg_0.1916, %Arg_1.1849)
}

%region_1638.40128 (Arg_0.40125: f32[], Arg_1.40126: f32[]) -> f32[] {
  %Arg_0.40125 = f32[] parameter(0)
  %Arg_1.40126 = f32[] parameter(1)
  ROOT %add.40127 = f32[] add(%Arg_0.40125, %Arg_1.40126)
}

%region_1638.40128.clone (Arg_0.1917: f32[], Arg_1.1850: f32[]) -> f32[] {
  %Arg_0.1917 = f32[] parameter(0)
  %Arg_1.1850 = f32[] parameter(1)
  ROOT %add.2249 = f32[] add(%Arg_0.1917, %Arg_1.1850)
}

%region_1639.40135 (Arg_0.40132: f32[], Arg_1.40133: f32[]) -> f32[] {
  %Arg_0.40132 = f32[] parameter(0)
  %Arg_1.40133 = f32[] parameter(1)
  ROOT %add.40134 = f32[] add(%Arg_0.40132, %Arg_1.40133)
}

%region_1639.40135.clone (Arg_0.1918: f32[], Arg_1.1851: f32[]) -> f32[] {
  %Arg_0.1918 = f32[] parameter(0)
  %Arg_1.1851 = f32[] parameter(1)
  ROOT %add.2250 = f32[] add(%Arg_0.1918, %Arg_1.1851)
}

%region_1640.40142 (Arg_0.40139: f32[], Arg_1.40140: f32[]) -> f32[] {
  %Arg_0.40139 = f32[] parameter(0)
  %Arg_1.40140 = f32[] parameter(1)
  ROOT %add.40141 = f32[] add(%Arg_0.40139, %Arg_1.40140)
}

%region_1640.40142.clone (Arg_0.1919: f32[], Arg_1.1852: f32[]) -> f32[] {
  %Arg_0.1919 = f32[] parameter(0)
  %Arg_1.1852 = f32[] parameter(1)
  ROOT %add.2251 = f32[] add(%Arg_0.1919, %Arg_1.1852)
}

%region_1641.40149 (Arg_0.40146: f32[], Arg_1.40147: f32[]) -> f32[] {
  %Arg_0.40146 = f32[] parameter(0)
  %Arg_1.40147 = f32[] parameter(1)
  ROOT %add.40148 = f32[] add(%Arg_0.40146, %Arg_1.40147)
}

%region_1641.40149.clone (Arg_0.1920: f32[], Arg_1.1853: f32[]) -> f32[] {
  %Arg_0.1920 = f32[] parameter(0)
  %Arg_1.1853 = f32[] parameter(1)
  ROOT %add.2252 = f32[] add(%Arg_0.1920, %Arg_1.1853)
}

%region_1642.40156 (Arg_0.40153: f32[], Arg_1.40154: f32[]) -> f32[] {
  %Arg_0.40153 = f32[] parameter(0)
  %Arg_1.40154 = f32[] parameter(1)
  ROOT %add.40155 = f32[] add(%Arg_0.40153, %Arg_1.40154)
}

%region_1642.40156.clone (Arg_0.1921: f32[], Arg_1.1854: f32[]) -> f32[] {
  %Arg_0.1921 = f32[] parameter(0)
  %Arg_1.1854 = f32[] parameter(1)
  ROOT %add.2253 = f32[] add(%Arg_0.1921, %Arg_1.1854)
}

%region_1643.40163 (Arg_0.40160: f32[], Arg_1.40161: f32[]) -> f32[] {
  %Arg_0.40160 = f32[] parameter(0)
  %Arg_1.40161 = f32[] parameter(1)
  ROOT %add.40162 = f32[] add(%Arg_0.40160, %Arg_1.40161)
}

%region_1644.40170 (Arg_0.40167: f32[], Arg_1.40168: f32[]) -> f32[] {
  %Arg_0.40167 = f32[] parameter(0)
  %Arg_1.40168 = f32[] parameter(1)
  ROOT %add.40169 = f32[] add(%Arg_0.40167, %Arg_1.40168)
}

%region_1645.40177 (Arg_0.40174: f32[], Arg_1.40175: f32[]) -> f32[] {
  %Arg_0.40174 = f32[] parameter(0)
  %Arg_1.40175 = f32[] parameter(1)
  ROOT %add.40176 = f32[] add(%Arg_0.40174, %Arg_1.40175)
}

%region_1645.40177.clone (Arg_0.1922: f32[], Arg_1.1855: f32[]) -> f32[] {
  %Arg_0.1922 = f32[] parameter(0)
  %Arg_1.1855 = f32[] parameter(1)
  ROOT %add.2254 = f32[] add(%Arg_0.1922, %Arg_1.1855)
}

%region_1646.40184 (Arg_0.40181: f32[], Arg_1.40182: f32[]) -> f32[] {
  %Arg_0.40181 = f32[] parameter(0)
  %Arg_1.40182 = f32[] parameter(1)
  ROOT %add.40183 = f32[] add(%Arg_0.40181, %Arg_1.40182)
}

%region_1646.40184.clone (Arg_0.1923: f32[], Arg_1.1856: f32[]) -> f32[] {
  %Arg_0.1923 = f32[] parameter(0)
  %Arg_1.1856 = f32[] parameter(1)
  ROOT %add.2255 = f32[] add(%Arg_0.1923, %Arg_1.1856)
}

%region_1647.40191 (Arg_0.40188: f32[], Arg_1.40189: f32[]) -> f32[] {
  %Arg_0.40188 = f32[] parameter(0)
  %Arg_1.40189 = f32[] parameter(1)
  ROOT %add.40190 = f32[] add(%Arg_0.40188, %Arg_1.40189)
}

%region_1647.40191.clone (Arg_0.1924: f32[], Arg_1.1857: f32[]) -> f32[] {
  %Arg_0.1924 = f32[] parameter(0)
  %Arg_1.1857 = f32[] parameter(1)
  ROOT %add.2256 = f32[] add(%Arg_0.1924, %Arg_1.1857)
}

%region_1648.40198 (Arg_0.40195: f32[], Arg_1.40196: f32[]) -> f32[] {
  %Arg_0.40195 = f32[] parameter(0)
  %Arg_1.40196 = f32[] parameter(1)
  ROOT %add.40197 = f32[] add(%Arg_0.40195, %Arg_1.40196)
}

%region_1648.40198.clone (Arg_0.1925: f32[], Arg_1.1858: f32[]) -> f32[] {
  %Arg_0.1925 = f32[] parameter(0)
  %Arg_1.1858 = f32[] parameter(1)
  ROOT %add.2257 = f32[] add(%Arg_0.1925, %Arg_1.1858)
}

%region_1649.40205 (Arg_0.40202: f32[], Arg_1.40203: f32[]) -> f32[] {
  %Arg_0.40202 = f32[] parameter(0)
  %Arg_1.40203 = f32[] parameter(1)
  ROOT %add.40204 = f32[] add(%Arg_0.40202, %Arg_1.40203)
}

%region_1649.40205.clone (Arg_0.1926: f32[], Arg_1.1859: f32[]) -> f32[] {
  %Arg_0.1926 = f32[] parameter(0)
  %Arg_1.1859 = f32[] parameter(1)
  ROOT %add.2258 = f32[] add(%Arg_0.1926, %Arg_1.1859)
}

%region_1650.40212 (Arg_0.40209: f32[], Arg_1.40210: f32[]) -> f32[] {
  %Arg_0.40209 = f32[] parameter(0)
  %Arg_1.40210 = f32[] parameter(1)
  ROOT %add.40211 = f32[] add(%Arg_0.40209, %Arg_1.40210)
}

%region_1650.40212.clone (Arg_0.1927: f32[], Arg_1.1860: f32[]) -> f32[] {
  %Arg_0.1927 = f32[] parameter(0)
  %Arg_1.1860 = f32[] parameter(1)
  ROOT %add.2259 = f32[] add(%Arg_0.1927, %Arg_1.1860)
}

%region_1651.40219 (Arg_0.40216: f32[], Arg_1.40217: f32[]) -> f32[] {
  %Arg_0.40216 = f32[] parameter(0)
  %Arg_1.40217 = f32[] parameter(1)
  ROOT %add.40218 = f32[] add(%Arg_0.40216, %Arg_1.40217)
}

%region_1651.40219.clone (Arg_0.1928: f32[], Arg_1.1861: f32[]) -> f32[] {
  %Arg_0.1928 = f32[] parameter(0)
  %Arg_1.1861 = f32[] parameter(1)
  ROOT %add.2260 = f32[] add(%Arg_0.1928, %Arg_1.1861)
}

%region_1652.40226 (Arg_0.40223: f32[], Arg_1.40224: f32[]) -> f32[] {
  %Arg_0.40223 = f32[] parameter(0)
  %Arg_1.40224 = f32[] parameter(1)
  ROOT %add.40225 = f32[] add(%Arg_0.40223, %Arg_1.40224)
}

%region_1653.40233 (Arg_0.40230: f32[], Arg_1.40231: f32[]) -> f32[] {
  %Arg_0.40230 = f32[] parameter(0)
  %Arg_1.40231 = f32[] parameter(1)
  ROOT %add.40232 = f32[] add(%Arg_0.40230, %Arg_1.40231)
}

%region_1654.40240 (Arg_0.40237: f32[], Arg_1.40238: f32[]) -> f32[] {
  %Arg_0.40237 = f32[] parameter(0)
  %Arg_1.40238 = f32[] parameter(1)
  ROOT %add.40239 = f32[] add(%Arg_0.40237, %Arg_1.40238)
}

%region_1654.40240.clone (Arg_0.1929: f32[], Arg_1.1862: f32[]) -> f32[] {
  %Arg_0.1929 = f32[] parameter(0)
  %Arg_1.1862 = f32[] parameter(1)
  ROOT %add.2261 = f32[] add(%Arg_0.1929, %Arg_1.1862)
}

%region_1655.40247 (Arg_0.40244: f32[], Arg_1.40245: f32[]) -> f32[] {
  %Arg_0.40244 = f32[] parameter(0)
  %Arg_1.40245 = f32[] parameter(1)
  ROOT %add.40246 = f32[] add(%Arg_0.40244, %Arg_1.40245)
}

%region_1655.40247.clone (Arg_0.1930: f32[], Arg_1.1863: f32[]) -> f32[] {
  %Arg_0.1930 = f32[] parameter(0)
  %Arg_1.1863 = f32[] parameter(1)
  ROOT %add.2262 = f32[] add(%Arg_0.1930, %Arg_1.1863)
}

%region_1656.40254 (Arg_0.40251: f32[], Arg_1.40252: f32[]) -> f32[] {
  %Arg_0.40251 = f32[] parameter(0)
  %Arg_1.40252 = f32[] parameter(1)
  ROOT %add.40253 = f32[] add(%Arg_0.40251, %Arg_1.40252)
}

%region_1656.40254.clone (Arg_0.1931: f32[], Arg_1.1864: f32[]) -> f32[] {
  %Arg_0.1931 = f32[] parameter(0)
  %Arg_1.1864 = f32[] parameter(1)
  ROOT %add.2263 = f32[] add(%Arg_0.1931, %Arg_1.1864)
}

%region_1657.40261 (Arg_0.40258: f32[], Arg_1.40259: f32[]) -> f32[] {
  %Arg_0.40258 = f32[] parameter(0)
  %Arg_1.40259 = f32[] parameter(1)
  ROOT %add.40260 = f32[] add(%Arg_0.40258, %Arg_1.40259)
}

%region_1657.40261.clone (Arg_0.1932: f32[], Arg_1.1865: f32[]) -> f32[] {
  %Arg_0.1932 = f32[] parameter(0)
  %Arg_1.1865 = f32[] parameter(1)
  ROOT %add.2264 = f32[] add(%Arg_0.1932, %Arg_1.1865)
}

%region_1658.40268 (Arg_0.40265: f32[], Arg_1.40266: f32[]) -> f32[] {
  %Arg_0.40265 = f32[] parameter(0)
  %Arg_1.40266 = f32[] parameter(1)
  ROOT %add.40267 = f32[] add(%Arg_0.40265, %Arg_1.40266)
}

%region_1658.40268.clone (Arg_0.1933: f32[], Arg_1.1866: f32[]) -> f32[] {
  %Arg_0.1933 = f32[] parameter(0)
  %Arg_1.1866 = f32[] parameter(1)
  ROOT %add.2265 = f32[] add(%Arg_0.1933, %Arg_1.1866)
}

%region_1659.40275 (Arg_0.40272: f32[], Arg_1.40273: f32[]) -> f32[] {
  %Arg_0.40272 = f32[] parameter(0)
  %Arg_1.40273 = f32[] parameter(1)
  ROOT %add.40274 = f32[] add(%Arg_0.40272, %Arg_1.40273)
}

%region_1659.40275.clone (Arg_0.1934: f32[], Arg_1.1868: f32[]) -> f32[] {
  %Arg_0.1934 = f32[] parameter(0)
  %Arg_1.1868 = f32[] parameter(1)
  ROOT %add.2266 = f32[] add(%Arg_0.1934, %Arg_1.1868)
}

%region_1660.40282 (Arg_0.40279: f32[], Arg_1.40280: f32[]) -> f32[] {
  %Arg_0.40279 = f32[] parameter(0)
  %Arg_1.40280 = f32[] parameter(1)
  ROOT %add.40281 = f32[] add(%Arg_0.40279, %Arg_1.40280)
}

%region_1660.40282.clone (Arg_0.1936: f32[], Arg_1.1869: f32[]) -> f32[] {
  %Arg_0.1936 = f32[] parameter(0)
  %Arg_1.1869 = f32[] parameter(1)
  ROOT %add.2267 = f32[] add(%Arg_0.1936, %Arg_1.1869)
}

%region_1661.40289 (Arg_0.40286: f32[], Arg_1.40287: f32[]) -> f32[] {
  %Arg_0.40286 = f32[] parameter(0)
  %Arg_1.40287 = f32[] parameter(1)
  ROOT %add.40288 = f32[] add(%Arg_0.40286, %Arg_1.40287)
}

%region_1662.40296 (Arg_0.40293: f32[], Arg_1.40294: f32[]) -> f32[] {
  %Arg_0.40293 = f32[] parameter(0)
  %Arg_1.40294 = f32[] parameter(1)
  ROOT %add.40295 = f32[] add(%Arg_0.40293, %Arg_1.40294)
}

%region_1663.40303 (Arg_0.40300: f32[], Arg_1.40301: f32[]) -> f32[] {
  %Arg_0.40300 = f32[] parameter(0)
  %Arg_1.40301 = f32[] parameter(1)
  ROOT %add.40302 = f32[] add(%Arg_0.40300, %Arg_1.40301)
}

%region_1663.40303.clone (Arg_0.1937: f32[], Arg_1.1870: f32[]) -> f32[] {
  %Arg_0.1937 = f32[] parameter(0)
  %Arg_1.1870 = f32[] parameter(1)
  ROOT %add.2268 = f32[] add(%Arg_0.1937, %Arg_1.1870)
}

%region_1664.40310 (Arg_0.40307: f32[], Arg_1.40308: f32[]) -> f32[] {
  %Arg_0.40307 = f32[] parameter(0)
  %Arg_1.40308 = f32[] parameter(1)
  ROOT %add.40309 = f32[] add(%Arg_0.40307, %Arg_1.40308)
}

%region_1664.40310.clone (Arg_0.1938: f32[], Arg_1.1871: f32[]) -> f32[] {
  %Arg_0.1938 = f32[] parameter(0)
  %Arg_1.1871 = f32[] parameter(1)
  ROOT %add.2269 = f32[] add(%Arg_0.1938, %Arg_1.1871)
}

%region_1665.40317 (Arg_0.40314: f32[], Arg_1.40315: f32[]) -> f32[] {
  %Arg_0.40314 = f32[] parameter(0)
  %Arg_1.40315 = f32[] parameter(1)
  ROOT %add.40316 = f32[] add(%Arg_0.40314, %Arg_1.40315)
}

%region_1665.40317.clone (Arg_0.1939: f32[], Arg_1.1872: f32[]) -> f32[] {
  %Arg_0.1939 = f32[] parameter(0)
  %Arg_1.1872 = f32[] parameter(1)
  ROOT %add.2270 = f32[] add(%Arg_0.1939, %Arg_1.1872)
}

%region_1666.40324 (Arg_0.40321: f32[], Arg_1.40322: f32[]) -> f32[] {
  %Arg_0.40321 = f32[] parameter(0)
  %Arg_1.40322 = f32[] parameter(1)
  ROOT %add.40323 = f32[] add(%Arg_0.40321, %Arg_1.40322)
}

%region_1666.40324.clone (Arg_0.1940: f32[], Arg_1.1873: f32[]) -> f32[] {
  %Arg_0.1940 = f32[] parameter(0)
  %Arg_1.1873 = f32[] parameter(1)
  ROOT %add.2271 = f32[] add(%Arg_0.1940, %Arg_1.1873)
}

%region_1667.40331 (Arg_0.40328: f32[], Arg_1.40329: f32[]) -> f32[] {
  %Arg_0.40328 = f32[] parameter(0)
  %Arg_1.40329 = f32[] parameter(1)
  ROOT %add.40330 = f32[] add(%Arg_0.40328, %Arg_1.40329)
}

%region_1667.40331.clone (Arg_0.1941: f32[], Arg_1.1874: f32[]) -> f32[] {
  %Arg_0.1941 = f32[] parameter(0)
  %Arg_1.1874 = f32[] parameter(1)
  ROOT %add.2272 = f32[] add(%Arg_0.1941, %Arg_1.1874)
}

%region_1668.40338 (Arg_0.40335: f32[], Arg_1.40336: f32[]) -> f32[] {
  %Arg_0.40335 = f32[] parameter(0)
  %Arg_1.40336 = f32[] parameter(1)
  ROOT %add.40337 = f32[] add(%Arg_0.40335, %Arg_1.40336)
}

%region_1668.40338.clone (Arg_0.1942: f32[], Arg_1.1876: f32[]) -> f32[] {
  %Arg_0.1942 = f32[] parameter(0)
  %Arg_1.1876 = f32[] parameter(1)
  ROOT %add.2273 = f32[] add(%Arg_0.1942, %Arg_1.1876)
}

%region_1669.40345 (Arg_0.40342: f32[], Arg_1.40343: f32[]) -> f32[] {
  %Arg_0.40342 = f32[] parameter(0)
  %Arg_1.40343 = f32[] parameter(1)
  ROOT %add.40344 = f32[] add(%Arg_0.40342, %Arg_1.40343)
}

%region_1669.40345.clone (Arg_0.1943: f32[], Arg_1.1877: f32[]) -> f32[] {
  %Arg_0.1943 = f32[] parameter(0)
  %Arg_1.1877 = f32[] parameter(1)
  ROOT %add.2274 = f32[] add(%Arg_0.1943, %Arg_1.1877)
}

%region_1670.40352 (Arg_0.40349: f32[], Arg_1.40350: f32[]) -> f32[] {
  %Arg_0.40349 = f32[] parameter(0)
  %Arg_1.40350 = f32[] parameter(1)
  ROOT %add.40351 = f32[] add(%Arg_0.40349, %Arg_1.40350)
}

%region_1671.40359 (Arg_0.40356: f32[], Arg_1.40357: f32[]) -> f32[] {
  %Arg_0.40356 = f32[] parameter(0)
  %Arg_1.40357 = f32[] parameter(1)
  ROOT %add.40358 = f32[] add(%Arg_0.40356, %Arg_1.40357)
}

%region_1672.40366 (Arg_0.40363: f32[], Arg_1.40364: f32[]) -> f32[] {
  %Arg_0.40363 = f32[] parameter(0)
  %Arg_1.40364 = f32[] parameter(1)
  ROOT %add.40365 = f32[] add(%Arg_0.40363, %Arg_1.40364)
}

%region_1672.40366.clone (Arg_0.1944: f32[], Arg_1.1878: f32[]) -> f32[] {
  %Arg_0.1944 = f32[] parameter(0)
  %Arg_1.1878 = f32[] parameter(1)
  ROOT %add.2275 = f32[] add(%Arg_0.1944, %Arg_1.1878)
}

%region_1673.40373 (Arg_0.40370: f32[], Arg_1.40371: f32[]) -> f32[] {
  %Arg_0.40370 = f32[] parameter(0)
  %Arg_1.40371 = f32[] parameter(1)
  ROOT %add.40372 = f32[] add(%Arg_0.40370, %Arg_1.40371)
}

%region_1673.40373.clone (Arg_0.1945: f32[], Arg_1.1879: f32[]) -> f32[] {
  %Arg_0.1945 = f32[] parameter(0)
  %Arg_1.1879 = f32[] parameter(1)
  ROOT %add.2276 = f32[] add(%Arg_0.1945, %Arg_1.1879)
}

%region_1674.40380 (Arg_0.40377: f32[], Arg_1.40378: f32[]) -> f32[] {
  %Arg_0.40377 = f32[] parameter(0)
  %Arg_1.40378 = f32[] parameter(1)
  ROOT %add.40379 = f32[] add(%Arg_0.40377, %Arg_1.40378)
}

%region_1674.40380.clone (Arg_0.1946: f32[], Arg_1.1881: f32[]) -> f32[] {
  %Arg_0.1946 = f32[] parameter(0)
  %Arg_1.1881 = f32[] parameter(1)
  ROOT %add.2277 = f32[] add(%Arg_0.1946, %Arg_1.1881)
}

%region_1675.40387 (Arg_0.40384: f32[], Arg_1.40385: f32[]) -> f32[] {
  %Arg_0.40384 = f32[] parameter(0)
  %Arg_1.40385 = f32[] parameter(1)
  ROOT %add.40386 = f32[] add(%Arg_0.40384, %Arg_1.40385)
}

%region_1675.40387.clone (Arg_0.1947: f32[], Arg_1.1882: f32[]) -> f32[] {
  %Arg_0.1947 = f32[] parameter(0)
  %Arg_1.1882 = f32[] parameter(1)
  ROOT %add.2278 = f32[] add(%Arg_0.1947, %Arg_1.1882)
}

%region_1676.40394 (Arg_0.40391: f32[], Arg_1.40392: f32[]) -> f32[] {
  %Arg_0.40391 = f32[] parameter(0)
  %Arg_1.40392 = f32[] parameter(1)
  ROOT %add.40393 = f32[] add(%Arg_0.40391, %Arg_1.40392)
}

%region_1676.40394.clone (Arg_0.1948: f32[], Arg_1.1883: f32[]) -> f32[] {
  %Arg_0.1948 = f32[] parameter(0)
  %Arg_1.1883 = f32[] parameter(1)
  ROOT %add.2279 = f32[] add(%Arg_0.1948, %Arg_1.1883)
}

%region_1677.40401 (Arg_0.40398: f32[], Arg_1.40399: f32[]) -> f32[] {
  %Arg_0.40398 = f32[] parameter(0)
  %Arg_1.40399 = f32[] parameter(1)
  ROOT %add.40400 = f32[] add(%Arg_0.40398, %Arg_1.40399)
}

%region_1677.40401.clone (Arg_0.1949: f32[], Arg_1.1884: f32[]) -> f32[] {
  %Arg_0.1949 = f32[] parameter(0)
  %Arg_1.1884 = f32[] parameter(1)
  ROOT %add.2280 = f32[] add(%Arg_0.1949, %Arg_1.1884)
}

%region_1678.40408 (Arg_0.40405: f32[], Arg_1.40406: f32[]) -> f32[] {
  %Arg_0.40405 = f32[] parameter(0)
  %Arg_1.40406 = f32[] parameter(1)
  ROOT %add.40407 = f32[] add(%Arg_0.40405, %Arg_1.40406)
}

%region_1678.40408.clone (Arg_0.1950: f32[], Arg_1.1885: f32[]) -> f32[] {
  %Arg_0.1950 = f32[] parameter(0)
  %Arg_1.1885 = f32[] parameter(1)
  ROOT %add.2281 = f32[] add(%Arg_0.1950, %Arg_1.1885)
}

%region_1679.40415 (Arg_0.40412: f32[], Arg_1.40413: f32[]) -> f32[] {
  %Arg_0.40412 = f32[] parameter(0)
  %Arg_1.40413 = f32[] parameter(1)
  ROOT %add.40414 = f32[] add(%Arg_0.40412, %Arg_1.40413)
}

%region_1680.40422 (Arg_0.40419: f32[], Arg_1.40420: f32[]) -> f32[] {
  %Arg_0.40419 = f32[] parameter(0)
  %Arg_1.40420 = f32[] parameter(1)
  ROOT %add.40421 = f32[] add(%Arg_0.40419, %Arg_1.40420)
}

%region_1681.40429 (Arg_0.40426: f32[], Arg_1.40427: f32[]) -> f32[] {
  %Arg_0.40426 = f32[] parameter(0)
  %Arg_1.40427 = f32[] parameter(1)
  ROOT %add.40428 = f32[] add(%Arg_0.40426, %Arg_1.40427)
}

%region_1681.40429.clone (Arg_0.1951: f32[], Arg_1.1886: f32[]) -> f32[] {
  %Arg_0.1951 = f32[] parameter(0)
  %Arg_1.1886 = f32[] parameter(1)
  ROOT %add.2282 = f32[] add(%Arg_0.1951, %Arg_1.1886)
}

%region_1682.40436 (Arg_0.40433: f32[], Arg_1.40434: f32[]) -> f32[] {
  %Arg_0.40433 = f32[] parameter(0)
  %Arg_1.40434 = f32[] parameter(1)
  ROOT %add.40435 = f32[] add(%Arg_0.40433, %Arg_1.40434)
}

%region_1682.40436.clone (Arg_0.1952: f32[], Arg_1.1887: f32[]) -> f32[] {
  %Arg_0.1952 = f32[] parameter(0)
  %Arg_1.1887 = f32[] parameter(1)
  ROOT %add.2284 = f32[] add(%Arg_0.1952, %Arg_1.1887)
}

%region_1683.40443 (Arg_0.40440: f32[], Arg_1.40441: f32[]) -> f32[] {
  %Arg_0.40440 = f32[] parameter(0)
  %Arg_1.40441 = f32[] parameter(1)
  ROOT %add.40442 = f32[] add(%Arg_0.40440, %Arg_1.40441)
}

%region_1683.40443.clone (Arg_0.1953: f32[], Arg_1.1888: f32[]) -> f32[] {
  %Arg_0.1953 = f32[] parameter(0)
  %Arg_1.1888 = f32[] parameter(1)
  ROOT %add.2285 = f32[] add(%Arg_0.1953, %Arg_1.1888)
}

%region_1684.40450 (Arg_0.40447: f32[], Arg_1.40448: f32[]) -> f32[] {
  %Arg_0.40447 = f32[] parameter(0)
  %Arg_1.40448 = f32[] parameter(1)
  ROOT %add.40449 = f32[] add(%Arg_0.40447, %Arg_1.40448)
}

%region_1684.40450.clone (Arg_0.1954: f32[], Arg_1.1889: f32[]) -> f32[] {
  %Arg_0.1954 = f32[] parameter(0)
  %Arg_1.1889 = f32[] parameter(1)
  ROOT %add.2286 = f32[] add(%Arg_0.1954, %Arg_1.1889)
}

%region_1685.40457 (Arg_0.40454: f32[], Arg_1.40455: f32[]) -> f32[] {
  %Arg_0.40454 = f32[] parameter(0)
  %Arg_1.40455 = f32[] parameter(1)
  ROOT %add.40456 = f32[] add(%Arg_0.40454, %Arg_1.40455)
}

%region_1685.40457.clone (Arg_0.1955: f32[], Arg_1.1890: f32[]) -> f32[] {
  %Arg_0.1955 = f32[] parameter(0)
  %Arg_1.1890 = f32[] parameter(1)
  ROOT %add.2287 = f32[] add(%Arg_0.1955, %Arg_1.1890)
}

%region_1686.40464 (Arg_0.40461: f32[], Arg_1.40462: f32[]) -> f32[] {
  %Arg_0.40461 = f32[] parameter(0)
  %Arg_1.40462 = f32[] parameter(1)
  ROOT %add.40463 = f32[] add(%Arg_0.40461, %Arg_1.40462)
}

%region_1686.40464.clone (Arg_0.1956: f32[], Arg_1.1891: f32[]) -> f32[] {
  %Arg_0.1956 = f32[] parameter(0)
  %Arg_1.1891 = f32[] parameter(1)
  ROOT %add.2288 = f32[] add(%Arg_0.1956, %Arg_1.1891)
}

%region_1687.40471 (Arg_0.40468: f32[], Arg_1.40469: f32[]) -> f32[] {
  %Arg_0.40468 = f32[] parameter(0)
  %Arg_1.40469 = f32[] parameter(1)
  ROOT %add.40470 = f32[] add(%Arg_0.40468, %Arg_1.40469)
}

%region_1687.40471.clone (Arg_0.1957: f32[], Arg_1.1892: f32[]) -> f32[] {
  %Arg_0.1957 = f32[] parameter(0)
  %Arg_1.1892 = f32[] parameter(1)
  ROOT %add.2289 = f32[] add(%Arg_0.1957, %Arg_1.1892)
}

%region_1688.40478 (Arg_0.40475: f32[], Arg_1.40476: f32[]) -> f32[] {
  %Arg_0.40475 = f32[] parameter(0)
  %Arg_1.40476 = f32[] parameter(1)
  ROOT %add.40477 = f32[] add(%Arg_0.40475, %Arg_1.40476)
}

%region_1689.40485 (Arg_0.40482: f32[], Arg_1.40483: f32[]) -> f32[] {
  %Arg_0.40482 = f32[] parameter(0)
  %Arg_1.40483 = f32[] parameter(1)
  ROOT %add.40484 = f32[] add(%Arg_0.40482, %Arg_1.40483)
}

%region_1690.40492 (Arg_0.40489: f32[], Arg_1.40490: f32[]) -> f32[] {
  %Arg_0.40489 = f32[] parameter(0)
  %Arg_1.40490 = f32[] parameter(1)
  ROOT %add.40491 = f32[] add(%Arg_0.40489, %Arg_1.40490)
}

%region_1690.40492.clone (Arg_0.1958: f32[], Arg_1.1893: f32[]) -> f32[] {
  %Arg_0.1958 = f32[] parameter(0)
  %Arg_1.1893 = f32[] parameter(1)
  ROOT %add.2290 = f32[] add(%Arg_0.1958, %Arg_1.1893)
}

%region_1691.40499 (Arg_0.40496: f32[], Arg_1.40497: f32[]) -> f32[] {
  %Arg_0.40496 = f32[] parameter(0)
  %Arg_1.40497 = f32[] parameter(1)
  ROOT %add.40498 = f32[] add(%Arg_0.40496, %Arg_1.40497)
}

%region_1691.40499.clone (Arg_0.1959: f32[], Arg_1.1894: f32[]) -> f32[] {
  %Arg_0.1959 = f32[] parameter(0)
  %Arg_1.1894 = f32[] parameter(1)
  ROOT %add.2291 = f32[] add(%Arg_0.1959, %Arg_1.1894)
}

%region_1692.40506 (Arg_0.40503: f32[], Arg_1.40504: f32[]) -> f32[] {
  %Arg_0.40503 = f32[] parameter(0)
  %Arg_1.40504 = f32[] parameter(1)
  ROOT %add.40505 = f32[] add(%Arg_0.40503, %Arg_1.40504)
}

%region_1692.40506.clone (Arg_0.1960: f32[], Arg_1.1895: f32[]) -> f32[] {
  %Arg_0.1960 = f32[] parameter(0)
  %Arg_1.1895 = f32[] parameter(1)
  ROOT %add.2292 = f32[] add(%Arg_0.1960, %Arg_1.1895)
}

%region_1693.40513 (Arg_0.40510: f32[], Arg_1.40511: f32[]) -> f32[] {
  %Arg_0.40510 = f32[] parameter(0)
  %Arg_1.40511 = f32[] parameter(1)
  ROOT %add.40512 = f32[] add(%Arg_0.40510, %Arg_1.40511)
}

%region_1693.40513.clone (Arg_0.1961: f32[], Arg_1.1896: f32[]) -> f32[] {
  %Arg_0.1961 = f32[] parameter(0)
  %Arg_1.1896 = f32[] parameter(1)
  ROOT %add.2293 = f32[] add(%Arg_0.1961, %Arg_1.1896)
}

%region_1694.40520 (Arg_0.40517: f32[], Arg_1.40518: f32[]) -> f32[] {
  %Arg_0.40517 = f32[] parameter(0)
  %Arg_1.40518 = f32[] parameter(1)
  ROOT %add.40519 = f32[] add(%Arg_0.40517, %Arg_1.40518)
}

%region_1694.40520.clone (Arg_0.1962: f32[], Arg_1.1897: f32[]) -> f32[] {
  %Arg_0.1962 = f32[] parameter(0)
  %Arg_1.1897 = f32[] parameter(1)
  ROOT %add.2294 = f32[] add(%Arg_0.1962, %Arg_1.1897)
}

%region_1695.40527 (Arg_0.40524: f32[], Arg_1.40525: f32[]) -> f32[] {
  %Arg_0.40524 = f32[] parameter(0)
  %Arg_1.40525 = f32[] parameter(1)
  ROOT %add.40526 = f32[] add(%Arg_0.40524, %Arg_1.40525)
}

%region_1695.40527.clone (Arg_0.1963: f32[], Arg_1.1899: f32[]) -> f32[] {
  %Arg_0.1963 = f32[] parameter(0)
  %Arg_1.1899 = f32[] parameter(1)
  ROOT %add.2295 = f32[] add(%Arg_0.1963, %Arg_1.1899)
}

%region_1696.40534 (Arg_0.40531: f32[], Arg_1.40532: f32[]) -> f32[] {
  %Arg_0.40531 = f32[] parameter(0)
  %Arg_1.40532 = f32[] parameter(1)
  ROOT %add.40533 = f32[] add(%Arg_0.40531, %Arg_1.40532)
}

%region_1696.40534.clone (Arg_0.1964: f32[], Arg_1.1900: f32[]) -> f32[] {
  %Arg_0.1964 = f32[] parameter(0)
  %Arg_1.1900 = f32[] parameter(1)
  ROOT %add.2296 = f32[] add(%Arg_0.1964, %Arg_1.1900)
}

%region_1697.40541 (Arg_0.40538: f32[], Arg_1.40539: f32[]) -> f32[] {
  %Arg_0.40538 = f32[] parameter(0)
  %Arg_1.40539 = f32[] parameter(1)
  ROOT %add.40540 = f32[] add(%Arg_0.40538, %Arg_1.40539)
}

%region_1698.40548 (Arg_0.40545: f32[], Arg_1.40546: f32[]) -> f32[] {
  %Arg_0.40545 = f32[] parameter(0)
  %Arg_1.40546 = f32[] parameter(1)
  ROOT %add.40547 = f32[] add(%Arg_0.40545, %Arg_1.40546)
}

%region_1699.40555 (Arg_0.40552: f32[], Arg_1.40553: f32[]) -> f32[] {
  %Arg_0.40552 = f32[] parameter(0)
  %Arg_1.40553 = f32[] parameter(1)
  ROOT %add.40554 = f32[] add(%Arg_0.40552, %Arg_1.40553)
}

%region_1699.40555.clone (Arg_0.1965: f32[], Arg_1.1901: f32[]) -> f32[] {
  %Arg_0.1965 = f32[] parameter(0)
  %Arg_1.1901 = f32[] parameter(1)
  ROOT %add.2297 = f32[] add(%Arg_0.1965, %Arg_1.1901)
}

%region_1700.40562 (Arg_0.40559: f32[], Arg_1.40560: f32[]) -> f32[] {
  %Arg_0.40559 = f32[] parameter(0)
  %Arg_1.40560 = f32[] parameter(1)
  ROOT %add.40561 = f32[] add(%Arg_0.40559, %Arg_1.40560)
}

%region_1700.40562.clone (Arg_0.1966: f32[], Arg_1.1902: f32[]) -> f32[] {
  %Arg_0.1966 = f32[] parameter(0)
  %Arg_1.1902 = f32[] parameter(1)
  ROOT %add.2298 = f32[] add(%Arg_0.1966, %Arg_1.1902)
}

%region_1701.40569 (Arg_0.40566: f32[], Arg_1.40567: f32[]) -> f32[] {
  %Arg_0.40566 = f32[] parameter(0)
  %Arg_1.40567 = f32[] parameter(1)
  ROOT %add.40568 = f32[] add(%Arg_0.40566, %Arg_1.40567)
}

%region_1701.40569.clone (Arg_0.1967: f32[], Arg_1.1903: f32[]) -> f32[] {
  %Arg_0.1967 = f32[] parameter(0)
  %Arg_1.1903 = f32[] parameter(1)
  ROOT %add.2299 = f32[] add(%Arg_0.1967, %Arg_1.1903)
}

%region_1702.40576 (Arg_0.40573: f32[], Arg_1.40574: f32[]) -> f32[] {
  %Arg_0.40573 = f32[] parameter(0)
  %Arg_1.40574 = f32[] parameter(1)
  ROOT %add.40575 = f32[] add(%Arg_0.40573, %Arg_1.40574)
}

%region_1702.40576.clone (Arg_0.1968: f32[], Arg_1.1904: f32[]) -> f32[] {
  %Arg_0.1968 = f32[] parameter(0)
  %Arg_1.1904 = f32[] parameter(1)
  ROOT %add.2300 = f32[] add(%Arg_0.1968, %Arg_1.1904)
}

%region_1703.40583 (Arg_0.40580: f32[], Arg_1.40581: f32[]) -> f32[] {
  %Arg_0.40580 = f32[] parameter(0)
  %Arg_1.40581 = f32[] parameter(1)
  ROOT %add.40582 = f32[] add(%Arg_0.40580, %Arg_1.40581)
}

%region_1703.40583.clone (Arg_0.1969: f32[], Arg_1.1905: f32[]) -> f32[] {
  %Arg_0.1969 = f32[] parameter(0)
  %Arg_1.1905 = f32[] parameter(1)
  ROOT %add.2301 = f32[] add(%Arg_0.1969, %Arg_1.1905)
}

%region_1704.40590 (Arg_0.40587: f32[], Arg_1.40588: f32[]) -> f32[] {
  %Arg_0.40587 = f32[] parameter(0)
  %Arg_1.40588 = f32[] parameter(1)
  ROOT %add.40589 = f32[] add(%Arg_0.40587, %Arg_1.40588)
}

%region_1704.40590.clone (Arg_0.1970: f32[], Arg_1.1906: f32[]) -> f32[] {
  %Arg_0.1970 = f32[] parameter(0)
  %Arg_1.1906 = f32[] parameter(1)
  ROOT %add.2302 = f32[] add(%Arg_0.1970, %Arg_1.1906)
}

%region_1705.40597 (Arg_0.40594: f32[], Arg_1.40595: f32[]) -> f32[] {
  %Arg_0.40594 = f32[] parameter(0)
  %Arg_1.40595 = f32[] parameter(1)
  ROOT %add.40596 = f32[] add(%Arg_0.40594, %Arg_1.40595)
}

%region_1705.40597.clone (Arg_0.1971: f32[], Arg_1.1907: f32[]) -> f32[] {
  %Arg_0.1971 = f32[] parameter(0)
  %Arg_1.1907 = f32[] parameter(1)
  ROOT %add.2303 = f32[] add(%Arg_0.1971, %Arg_1.1907)
}

%region_1706.40604 (Arg_0.40601: f32[], Arg_1.40602: f32[]) -> f32[] {
  %Arg_0.40601 = f32[] parameter(0)
  %Arg_1.40602 = f32[] parameter(1)
  ROOT %add.40603 = f32[] add(%Arg_0.40601, %Arg_1.40602)
}

%region_1707.40611 (Arg_0.40608: f32[], Arg_1.40609: f32[]) -> f32[] {
  %Arg_0.40608 = f32[] parameter(0)
  %Arg_1.40609 = f32[] parameter(1)
  ROOT %add.40610 = f32[] add(%Arg_0.40608, %Arg_1.40609)
}

%region_1708.40618 (Arg_0.40615: f32[], Arg_1.40616: f32[]) -> f32[] {
  %Arg_0.40615 = f32[] parameter(0)
  %Arg_1.40616 = f32[] parameter(1)
  ROOT %add.40617 = f32[] add(%Arg_0.40615, %Arg_1.40616)
}

%region_1708.40618.clone (Arg_0.1972: f32[], Arg_1.1908: f32[]) -> f32[] {
  %Arg_0.1972 = f32[] parameter(0)
  %Arg_1.1908 = f32[] parameter(1)
  ROOT %add.2304 = f32[] add(%Arg_0.1972, %Arg_1.1908)
}

%region_1709.40625 (Arg_0.40622: f32[], Arg_1.40623: f32[]) -> f32[] {
  %Arg_0.40622 = f32[] parameter(0)
  %Arg_1.40623 = f32[] parameter(1)
  ROOT %add.40624 = f32[] add(%Arg_0.40622, %Arg_1.40623)
}

%region_1709.40625.clone (Arg_0.1973: f32[], Arg_1.1909: f32[]) -> f32[] {
  %Arg_0.1973 = f32[] parameter(0)
  %Arg_1.1909 = f32[] parameter(1)
  ROOT %add.2305 = f32[] add(%Arg_0.1973, %Arg_1.1909)
}

%region_1710.40632 (Arg_0.40629: f32[], Arg_1.40630: f32[]) -> f32[] {
  %Arg_0.40629 = f32[] parameter(0)
  %Arg_1.40630 = f32[] parameter(1)
  ROOT %add.40631 = f32[] add(%Arg_0.40629, %Arg_1.40630)
}

%region_1710.40632.clone (Arg_0.1974: f32[], Arg_1.1910: f32[]) -> f32[] {
  %Arg_0.1974 = f32[] parameter(0)
  %Arg_1.1910 = f32[] parameter(1)
  ROOT %add.2306 = f32[] add(%Arg_0.1974, %Arg_1.1910)
}

%region_1711.40639 (Arg_0.40636: f32[], Arg_1.40637: f32[]) -> f32[] {
  %Arg_0.40636 = f32[] parameter(0)
  %Arg_1.40637 = f32[] parameter(1)
  ROOT %add.40638 = f32[] add(%Arg_0.40636, %Arg_1.40637)
}

%region_1711.40639.clone (Arg_0.1975: f32[], Arg_1.1911: f32[]) -> f32[] {
  %Arg_0.1975 = f32[] parameter(0)
  %Arg_1.1911 = f32[] parameter(1)
  ROOT %add.2307 = f32[] add(%Arg_0.1975, %Arg_1.1911)
}

%region_1712.40646 (Arg_0.40643: f32[], Arg_1.40644: f32[]) -> f32[] {
  %Arg_0.40643 = f32[] parameter(0)
  %Arg_1.40644 = f32[] parameter(1)
  ROOT %add.40645 = f32[] add(%Arg_0.40643, %Arg_1.40644)
}

%region_1712.40646.clone (Arg_0.1976: f32[], Arg_1.1912: f32[]) -> f32[] {
  %Arg_0.1976 = f32[] parameter(0)
  %Arg_1.1912 = f32[] parameter(1)
  ROOT %add.2308 = f32[] add(%Arg_0.1976, %Arg_1.1912)
}

%region_1713.40653 (Arg_0.40650: f32[], Arg_1.40651: f32[]) -> f32[] {
  %Arg_0.40650 = f32[] parameter(0)
  %Arg_1.40651 = f32[] parameter(1)
  ROOT %add.40652 = f32[] add(%Arg_0.40650, %Arg_1.40651)
}

%region_1713.40653.clone (Arg_0.1977: f32[], Arg_1.1913: f32[]) -> f32[] {
  %Arg_0.1977 = f32[] parameter(0)
  %Arg_1.1913 = f32[] parameter(1)
  ROOT %add.2309 = f32[] add(%Arg_0.1977, %Arg_1.1913)
}

%region_1714.40660 (Arg_0.40657: f32[], Arg_1.40658: f32[]) -> f32[] {
  %Arg_0.40657 = f32[] parameter(0)
  %Arg_1.40658 = f32[] parameter(1)
  ROOT %add.40659 = f32[] add(%Arg_0.40657, %Arg_1.40658)
}

%region_1714.40660.clone (Arg_0.1978: f32[], Arg_1.1914: f32[]) -> f32[] {
  %Arg_0.1978 = f32[] parameter(0)
  %Arg_1.1914 = f32[] parameter(1)
  ROOT %add.2310 = f32[] add(%Arg_0.1978, %Arg_1.1914)
}

%region_1715.40667 (Arg_0.40664: f32[], Arg_1.40665: f32[]) -> f32[] {
  %Arg_0.40664 = f32[] parameter(0)
  %Arg_1.40665 = f32[] parameter(1)
  ROOT %add.40666 = f32[] add(%Arg_0.40664, %Arg_1.40665)
}

%region_1716.40674 (Arg_0.40671: f32[], Arg_1.40672: f32[]) -> f32[] {
  %Arg_0.40671 = f32[] parameter(0)
  %Arg_1.40672 = f32[] parameter(1)
  ROOT %add.40673 = f32[] add(%Arg_0.40671, %Arg_1.40672)
}

%region_1717.40681 (Arg_0.40678: f32[], Arg_1.40679: f32[]) -> f32[] {
  %Arg_0.40678 = f32[] parameter(0)
  %Arg_1.40679 = f32[] parameter(1)
  ROOT %add.40680 = f32[] add(%Arg_0.40678, %Arg_1.40679)
}

%region_1717.40681.clone (Arg_0.1979: f32[], Arg_1.1915: f32[]) -> f32[] {
  %Arg_0.1979 = f32[] parameter(0)
  %Arg_1.1915 = f32[] parameter(1)
  ROOT %add.2311 = f32[] add(%Arg_0.1979, %Arg_1.1915)
}

%region_1718.40688 (Arg_0.40685: f32[], Arg_1.40686: f32[]) -> f32[] {
  %Arg_0.40685 = f32[] parameter(0)
  %Arg_1.40686 = f32[] parameter(1)
  ROOT %add.40687 = f32[] add(%Arg_0.40685, %Arg_1.40686)
}

%region_1718.40688.clone (Arg_0.1980: f32[], Arg_1.1916: f32[]) -> f32[] {
  %Arg_0.1980 = f32[] parameter(0)
  %Arg_1.1916 = f32[] parameter(1)
  ROOT %add.2312 = f32[] add(%Arg_0.1980, %Arg_1.1916)
}

%region_1719.40695 (Arg_0.40692: f32[], Arg_1.40693: f32[]) -> f32[] {
  %Arg_0.40692 = f32[] parameter(0)
  %Arg_1.40693 = f32[] parameter(1)
  ROOT %add.40694 = f32[] add(%Arg_0.40692, %Arg_1.40693)
}

%region_1719.40695.clone (Arg_0.1981: f32[], Arg_1.1917: f32[]) -> f32[] {
  %Arg_0.1981 = f32[] parameter(0)
  %Arg_1.1917 = f32[] parameter(1)
  ROOT %add.2313 = f32[] add(%Arg_0.1981, %Arg_1.1917)
}

%region_1720.40702 (Arg_0.40699: f32[], Arg_1.40700: f32[]) -> f32[] {
  %Arg_0.40699 = f32[] parameter(0)
  %Arg_1.40700 = f32[] parameter(1)
  ROOT %add.40701 = f32[] add(%Arg_0.40699, %Arg_1.40700)
}

%region_1720.40702.clone (Arg_0.1982: f32[], Arg_1.1918: f32[]) -> f32[] {
  %Arg_0.1982 = f32[] parameter(0)
  %Arg_1.1918 = f32[] parameter(1)
  ROOT %add.2314 = f32[] add(%Arg_0.1982, %Arg_1.1918)
}

%region_1721.40709 (Arg_0.40706: f32[], Arg_1.40707: f32[]) -> f32[] {
  %Arg_0.40706 = f32[] parameter(0)
  %Arg_1.40707 = f32[] parameter(1)
  ROOT %add.40708 = f32[] add(%Arg_0.40706, %Arg_1.40707)
}

%region_1721.40709.clone (Arg_0.1983: f32[], Arg_1.1919: f32[]) -> f32[] {
  %Arg_0.1983 = f32[] parameter(0)
  %Arg_1.1919 = f32[] parameter(1)
  ROOT %add.2315 = f32[] add(%Arg_0.1983, %Arg_1.1919)
}

%region_1722.40716 (Arg_0.40713: f32[], Arg_1.40714: f32[]) -> f32[] {
  %Arg_0.40713 = f32[] parameter(0)
  %Arg_1.40714 = f32[] parameter(1)
  ROOT %add.40715 = f32[] add(%Arg_0.40713, %Arg_1.40714)
}

%region_1722.40716.clone (Arg_0.1984: f32[], Arg_1.1920: f32[]) -> f32[] {
  %Arg_0.1984 = f32[] parameter(0)
  %Arg_1.1920 = f32[] parameter(1)
  ROOT %add.2316 = f32[] add(%Arg_0.1984, %Arg_1.1920)
}

%region_1723.40723 (Arg_0.40720: f32[], Arg_1.40721: f32[]) -> f32[] {
  %Arg_0.40720 = f32[] parameter(0)
  %Arg_1.40721 = f32[] parameter(1)
  ROOT %add.40722 = f32[] add(%Arg_0.40720, %Arg_1.40721)
}

%region_1723.40723.clone (Arg_0.1985: f32[], Arg_1.1921: f32[]) -> f32[] {
  %Arg_0.1985 = f32[] parameter(0)
  %Arg_1.1921 = f32[] parameter(1)
  ROOT %add.2317 = f32[] add(%Arg_0.1985, %Arg_1.1921)
}

%region_1724.40730 (Arg_0.40727: f32[], Arg_1.40728: f32[]) -> f32[] {
  %Arg_0.40727 = f32[] parameter(0)
  %Arg_1.40728 = f32[] parameter(1)
  ROOT %add.40729 = f32[] add(%Arg_0.40727, %Arg_1.40728)
}

%region_1725.40737 (Arg_0.40734: f32[], Arg_1.40735: f32[]) -> f32[] {
  %Arg_0.40734 = f32[] parameter(0)
  %Arg_1.40735 = f32[] parameter(1)
  ROOT %add.40736 = f32[] add(%Arg_0.40734, %Arg_1.40735)
}

%region_1726.40744 (Arg_0.40741: f32[], Arg_1.40742: f32[]) -> f32[] {
  %Arg_0.40741 = f32[] parameter(0)
  %Arg_1.40742 = f32[] parameter(1)
  ROOT %add.40743 = f32[] add(%Arg_0.40741, %Arg_1.40742)
}

%region_1726.40744.clone (Arg_0.1986: f32[], Arg_1.1922: f32[]) -> f32[] {
  %Arg_0.1986 = f32[] parameter(0)
  %Arg_1.1922 = f32[] parameter(1)
  ROOT %add.2318 = f32[] add(%Arg_0.1986, %Arg_1.1922)
}

%region_1727.40751 (Arg_0.40748: f32[], Arg_1.40749: f32[]) -> f32[] {
  %Arg_0.40748 = f32[] parameter(0)
  %Arg_1.40749 = f32[] parameter(1)
  ROOT %add.40750 = f32[] add(%Arg_0.40748, %Arg_1.40749)
}

%region_1727.40751.clone (Arg_0.1987: f32[], Arg_1.1923: f32[]) -> f32[] {
  %Arg_0.1987 = f32[] parameter(0)
  %Arg_1.1923 = f32[] parameter(1)
  ROOT %add.2319 = f32[] add(%Arg_0.1987, %Arg_1.1923)
}

%region_1728.40758 (Arg_0.40755: f32[], Arg_1.40756: f32[]) -> f32[] {
  %Arg_0.40755 = f32[] parameter(0)
  %Arg_1.40756 = f32[] parameter(1)
  ROOT %add.40757 = f32[] add(%Arg_0.40755, %Arg_1.40756)
}

%region_1728.40758.clone (Arg_0.1988: f32[], Arg_1.1924: f32[]) -> f32[] {
  %Arg_0.1988 = f32[] parameter(0)
  %Arg_1.1924 = f32[] parameter(1)
  ROOT %add.2320 = f32[] add(%Arg_0.1988, %Arg_1.1924)
}

%region_1729.40765 (Arg_0.40762: f32[], Arg_1.40763: f32[]) -> f32[] {
  %Arg_0.40762 = f32[] parameter(0)
  %Arg_1.40763 = f32[] parameter(1)
  ROOT %add.40764 = f32[] add(%Arg_0.40762, %Arg_1.40763)
}

%region_1729.40765.clone (Arg_0.1989: f32[], Arg_1.1925: f32[]) -> f32[] {
  %Arg_0.1989 = f32[] parameter(0)
  %Arg_1.1925 = f32[] parameter(1)
  ROOT %add.2322 = f32[] add(%Arg_0.1989, %Arg_1.1925)
}

%region_1730.40772 (Arg_0.40769: f32[], Arg_1.40770: f32[]) -> f32[] {
  %Arg_0.40769 = f32[] parameter(0)
  %Arg_1.40770 = f32[] parameter(1)
  ROOT %add.40771 = f32[] add(%Arg_0.40769, %Arg_1.40770)
}

%region_1730.40772.clone (Arg_0.1990: f32[], Arg_1.1926: f32[]) -> f32[] {
  %Arg_0.1990 = f32[] parameter(0)
  %Arg_1.1926 = f32[] parameter(1)
  ROOT %add.2323 = f32[] add(%Arg_0.1990, %Arg_1.1926)
}

%region_1731.40779 (Arg_0.40776: f32[], Arg_1.40777: f32[]) -> f32[] {
  %Arg_0.40776 = f32[] parameter(0)
  %Arg_1.40777 = f32[] parameter(1)
  ROOT %add.40778 = f32[] add(%Arg_0.40776, %Arg_1.40777)
}

%region_1731.40779.clone (Arg_0.1991: f32[], Arg_1.1927: f32[]) -> f32[] {
  %Arg_0.1991 = f32[] parameter(0)
  %Arg_1.1927 = f32[] parameter(1)
  ROOT %add.2324 = f32[] add(%Arg_0.1991, %Arg_1.1927)
}

%region_1732.40786 (Arg_0.40783: f32[], Arg_1.40784: f32[]) -> f32[] {
  %Arg_0.40783 = f32[] parameter(0)
  %Arg_1.40784 = f32[] parameter(1)
  ROOT %add.40785 = f32[] add(%Arg_0.40783, %Arg_1.40784)
}

%region_1732.40786.clone (Arg_0.1992: f32[], Arg_1.1928: f32[]) -> f32[] {
  %Arg_0.1992 = f32[] parameter(0)
  %Arg_1.1928 = f32[] parameter(1)
  ROOT %add.2325 = f32[] add(%Arg_0.1992, %Arg_1.1928)
}

%region_1733.40793 (Arg_0.40790: f32[], Arg_1.40791: f32[]) -> f32[] {
  %Arg_0.40790 = f32[] parameter(0)
  %Arg_1.40791 = f32[] parameter(1)
  ROOT %add.40792 = f32[] add(%Arg_0.40790, %Arg_1.40791)
}

%region_1734.40800 (Arg_0.40797: f32[], Arg_1.40798: f32[]) -> f32[] {
  %Arg_0.40797 = f32[] parameter(0)
  %Arg_1.40798 = f32[] parameter(1)
  ROOT %add.40799 = f32[] add(%Arg_0.40797, %Arg_1.40798)
}

%region_1735.40807 (Arg_0.40804: f32[], Arg_1.40805: f32[]) -> f32[] {
  %Arg_0.40804 = f32[] parameter(0)
  %Arg_1.40805 = f32[] parameter(1)
  ROOT %add.40806 = f32[] add(%Arg_0.40804, %Arg_1.40805)
}

%region_1735.40807.clone (Arg_0.1993: f32[], Arg_1.1929: f32[]) -> f32[] {
  %Arg_0.1993 = f32[] parameter(0)
  %Arg_1.1929 = f32[] parameter(1)
  ROOT %add.2326 = f32[] add(%Arg_0.1993, %Arg_1.1929)
}

%region_1736.40814 (Arg_0.40811: f32[], Arg_1.40812: f32[]) -> f32[] {
  %Arg_0.40811 = f32[] parameter(0)
  %Arg_1.40812 = f32[] parameter(1)
  ROOT %add.40813 = f32[] add(%Arg_0.40811, %Arg_1.40812)
}

%region_1736.40814.clone (Arg_0.1994: f32[], Arg_1.1930: f32[]) -> f32[] {
  %Arg_0.1994 = f32[] parameter(0)
  %Arg_1.1930 = f32[] parameter(1)
  ROOT %add.2327 = f32[] add(%Arg_0.1994, %Arg_1.1930)
}

%region_1737.40821 (Arg_0.40818: f32[], Arg_1.40819: f32[]) -> f32[] {
  %Arg_0.40818 = f32[] parameter(0)
  %Arg_1.40819 = f32[] parameter(1)
  ROOT %add.40820 = f32[] add(%Arg_0.40818, %Arg_1.40819)
}

%region_1737.40821.clone (Arg_0.1995: f32[], Arg_1.1931: f32[]) -> f32[] {
  %Arg_0.1995 = f32[] parameter(0)
  %Arg_1.1931 = f32[] parameter(1)
  ROOT %add.2328 = f32[] add(%Arg_0.1995, %Arg_1.1931)
}

%region_1738.40828 (Arg_0.40825: f32[], Arg_1.40826: f32[]) -> f32[] {
  %Arg_0.40825 = f32[] parameter(0)
  %Arg_1.40826 = f32[] parameter(1)
  ROOT %add.40827 = f32[] add(%Arg_0.40825, %Arg_1.40826)
}

%region_1738.40828.clone (Arg_0.1996: f32[], Arg_1.1932: f32[]) -> f32[] {
  %Arg_0.1996 = f32[] parameter(0)
  %Arg_1.1932 = f32[] parameter(1)
  ROOT %add.2329 = f32[] add(%Arg_0.1996, %Arg_1.1932)
}

%region_1739.40835 (Arg_0.40832: f32[], Arg_1.40833: f32[]) -> f32[] {
  %Arg_0.40832 = f32[] parameter(0)
  %Arg_1.40833 = f32[] parameter(1)
  ROOT %add.40834 = f32[] add(%Arg_0.40832, %Arg_1.40833)
}

%region_1739.40835.clone (Arg_0.1997: f32[], Arg_1.1933: f32[]) -> f32[] {
  %Arg_0.1997 = f32[] parameter(0)
  %Arg_1.1933 = f32[] parameter(1)
  ROOT %add.2330 = f32[] add(%Arg_0.1997, %Arg_1.1933)
}

%region_1740.40842 (Arg_0.40839: f32[], Arg_1.40840: f32[]) -> f32[] {
  %Arg_0.40839 = f32[] parameter(0)
  %Arg_1.40840 = f32[] parameter(1)
  ROOT %add.40841 = f32[] add(%Arg_0.40839, %Arg_1.40840)
}

%region_1740.40842.clone (Arg_0.1998: f32[], Arg_1.1934: f32[]) -> f32[] {
  %Arg_0.1998 = f32[] parameter(0)
  %Arg_1.1934 = f32[] parameter(1)
  ROOT %add.2331 = f32[] add(%Arg_0.1998, %Arg_1.1934)
}

%region_1741.40849 (Arg_0.40846: f32[], Arg_1.40847: f32[]) -> f32[] {
  %Arg_0.40846 = f32[] parameter(0)
  %Arg_1.40847 = f32[] parameter(1)
  ROOT %add.40848 = f32[] add(%Arg_0.40846, %Arg_1.40847)
}

%region_1741.40849.clone (Arg_0.1999: f32[], Arg_1.1935: f32[]) -> f32[] {
  %Arg_0.1999 = f32[] parameter(0)
  %Arg_1.1935 = f32[] parameter(1)
  ROOT %add.2332 = f32[] add(%Arg_0.1999, %Arg_1.1935)
}

%region_1742.40856 (Arg_0.40853: f32[], Arg_1.40854: f32[]) -> f32[] {
  %Arg_0.40853 = f32[] parameter(0)
  %Arg_1.40854 = f32[] parameter(1)
  ROOT %add.40855 = f32[] add(%Arg_0.40853, %Arg_1.40854)
}

%region_1743.40863 (Arg_0.40860: f32[], Arg_1.40861: f32[]) -> f32[] {
  %Arg_0.40860 = f32[] parameter(0)
  %Arg_1.40861 = f32[] parameter(1)
  ROOT %add.40862 = f32[] add(%Arg_0.40860, %Arg_1.40861)
}

%region_1744.40870 (Arg_0.40867: f32[], Arg_1.40868: f32[]) -> f32[] {
  %Arg_0.40867 = f32[] parameter(0)
  %Arg_1.40868 = f32[] parameter(1)
  ROOT %add.40869 = f32[] add(%Arg_0.40867, %Arg_1.40868)
}

%region_1744.40870.clone (Arg_0.2000: f32[], Arg_1.1937: f32[]) -> f32[] {
  %Arg_0.2000 = f32[] parameter(0)
  %Arg_1.1937 = f32[] parameter(1)
  ROOT %add.2333 = f32[] add(%Arg_0.2000, %Arg_1.1937)
}

%region_1745.40877 (Arg_0.40874: f32[], Arg_1.40875: f32[]) -> f32[] {
  %Arg_0.40874 = f32[] parameter(0)
  %Arg_1.40875 = f32[] parameter(1)
  ROOT %add.40876 = f32[] add(%Arg_0.40874, %Arg_1.40875)
}

%region_1745.40877.clone (Arg_0.2001: f32[], Arg_1.1938: f32[]) -> f32[] {
  %Arg_0.2001 = f32[] parameter(0)
  %Arg_1.1938 = f32[] parameter(1)
  ROOT %add.2334 = f32[] add(%Arg_0.2001, %Arg_1.1938)
}

%region_1746.40884 (Arg_0.40881: f32[], Arg_1.40882: f32[]) -> f32[] {
  %Arg_0.40881 = f32[] parameter(0)
  %Arg_1.40882 = f32[] parameter(1)
  ROOT %add.40883 = f32[] add(%Arg_0.40881, %Arg_1.40882)
}

%region_1746.40884.clone (Arg_0.2002: f32[], Arg_1.1939: f32[]) -> f32[] {
  %Arg_0.2002 = f32[] parameter(0)
  %Arg_1.1939 = f32[] parameter(1)
  ROOT %add.2335 = f32[] add(%Arg_0.2002, %Arg_1.1939)
}

%region_1747.40891 (Arg_0.40888: f32[], Arg_1.40889: f32[]) -> f32[] {
  %Arg_0.40888 = f32[] parameter(0)
  %Arg_1.40889 = f32[] parameter(1)
  ROOT %add.40890 = f32[] add(%Arg_0.40888, %Arg_1.40889)
}

%region_1747.40891.clone (Arg_0.2003: f32[], Arg_1.1940: f32[]) -> f32[] {
  %Arg_0.2003 = f32[] parameter(0)
  %Arg_1.1940 = f32[] parameter(1)
  ROOT %add.2336 = f32[] add(%Arg_0.2003, %Arg_1.1940)
}

%region_1748.40898 (Arg_0.40895: f32[], Arg_1.40896: f32[]) -> f32[] {
  %Arg_0.40895 = f32[] parameter(0)
  %Arg_1.40896 = f32[] parameter(1)
  ROOT %add.40897 = f32[] add(%Arg_0.40895, %Arg_1.40896)
}

%region_1748.40898.clone (Arg_0.2004: f32[], Arg_1.1941: f32[]) -> f32[] {
  %Arg_0.2004 = f32[] parameter(0)
  %Arg_1.1941 = f32[] parameter(1)
  ROOT %add.2337 = f32[] add(%Arg_0.2004, %Arg_1.1941)
}

%region_1749.40905 (Arg_0.40902: f32[], Arg_1.40903: f32[]) -> f32[] {
  %Arg_0.40902 = f32[] parameter(0)
  %Arg_1.40903 = f32[] parameter(1)
  ROOT %add.40904 = f32[] add(%Arg_0.40902, %Arg_1.40903)
}

%region_1749.40905.clone (Arg_0.2005: f32[], Arg_1.1942: f32[]) -> f32[] {
  %Arg_0.2005 = f32[] parameter(0)
  %Arg_1.1942 = f32[] parameter(1)
  ROOT %add.2338 = f32[] add(%Arg_0.2005, %Arg_1.1942)
}

%region_1169.36845.clone (Arg_0.2006: f32[], Arg_1.1943: f32[]) -> f32[] {
  %Arg_0.2006 = f32[] parameter(0)
  %Arg_1.1943 = f32[] parameter(1)
  ROOT %add.2339 = f32[] add(%Arg_0.2006, %Arg_1.1943)
}

%region_1170.36852.clone (Arg_0.2007: f32[], Arg_1.1944: f32[]) -> f32[] {
  %Arg_0.2007 = f32[] parameter(0)
  %Arg_1.1944 = f32[] parameter(1)
  ROOT %add.2340 = f32[] add(%Arg_0.2007, %Arg_1.1944)
}

%region_1171.36859.clone (Arg_0.2008: f32[], Arg_1.1945: f32[]) -> f32[] {
  %Arg_0.2008 = f32[] parameter(0)
  %Arg_1.1945 = f32[] parameter(1)
  ROOT %add.2341 = f32[] add(%Arg_0.2008, %Arg_1.1945)
}

%region_1174.36880.clone (Arg_0.2009: f32[], Arg_1.1946: f32[]) -> f32[] {
  %Arg_0.2009 = f32[] parameter(0)
  %Arg_1.1946 = f32[] parameter(1)
  ROOT %add.2342 = f32[] add(%Arg_0.2009, %Arg_1.1946)
}

%region_1175.36887.clone (Arg_0.2010: f32[], Arg_1.1947: f32[]) -> f32[] {
  %Arg_0.2010 = f32[] parameter(0)
  %Arg_1.1947 = f32[] parameter(1)
  ROOT %add.2343 = f32[] add(%Arg_0.2010, %Arg_1.1947)
}

%region_1176.36894.clone (Arg_0.2011: f32[], Arg_1.1948: f32[]) -> f32[] {
  %Arg_0.2011 = f32[] parameter(0)
  %Arg_1.1948 = f32[] parameter(1)
  ROOT %add.2344 = f32[] add(%Arg_0.2011, %Arg_1.1948)
}

%region_1177.36901.clone (Arg_0.2012: f32[], Arg_1.1949: f32[]) -> f32[] {
  %Arg_0.2012 = f32[] parameter(0)
  %Arg_1.1949 = f32[] parameter(1)
  ROOT %add.2345 = f32[] add(%Arg_0.2012, %Arg_1.1949)
}

%region_1178.36908.clone (Arg_0.2013: f32[], Arg_1.1950: f32[]) -> f32[] {
  %Arg_0.2013 = f32[] parameter(0)
  %Arg_1.1950 = f32[] parameter(1)
  ROOT %add.2346 = f32[] add(%Arg_0.2013, %Arg_1.1950)
}

%region_1179.36915.clone (Arg_0.2014: f32[], Arg_1.1951: f32[]) -> f32[] {
  %Arg_0.2014 = f32[] parameter(0)
  %Arg_1.1951 = f32[] parameter(1)
  ROOT %add.2347 = f32[] add(%Arg_0.2014, %Arg_1.1951)
}

%region_1180.36922.clone (Arg_0.2015: f32[], Arg_1.1952: f32[]) -> f32[] {
  %Arg_0.2015 = f32[] parameter(0)
  %Arg_1.1952 = f32[] parameter(1)
  ROOT %add.2348 = f32[] add(%Arg_0.2015, %Arg_1.1952)
}

%region_1183.36943.clone (Arg_0.2016: f32[], Arg_1.1953: f32[]) -> f32[] {
  %Arg_0.2016 = f32[] parameter(0)
  %Arg_1.1953 = f32[] parameter(1)
  ROOT %add.2349 = f32[] add(%Arg_0.2016, %Arg_1.1953)
}

%region_1184.36950.clone (Arg_0.2017: f32[], Arg_1.1954: f32[]) -> f32[] {
  %Arg_0.2017 = f32[] parameter(0)
  %Arg_1.1954 = f32[] parameter(1)
  ROOT %add.2350 = f32[] add(%Arg_0.2017, %Arg_1.1954)
}

%region_1185.36957.clone (Arg_0.2018: f32[], Arg_1.1955: f32[]) -> f32[] {
  %Arg_0.2018 = f32[] parameter(0)
  %Arg_1.1955 = f32[] parameter(1)
  ROOT %add.2351 = f32[] add(%Arg_0.2018, %Arg_1.1955)
}

%region_1186.36964.clone (Arg_0.2019: f32[], Arg_1.1956: f32[]) -> f32[] {
  %Arg_0.2019 = f32[] parameter(0)
  %Arg_1.1956 = f32[] parameter(1)
  ROOT %add.2352 = f32[] add(%Arg_0.2019, %Arg_1.1956)
}

%region_1187.36971.clone (Arg_0.2020: f32[], Arg_1.1957: f32[]) -> f32[] {
  %Arg_0.2020 = f32[] parameter(0)
  %Arg_1.1957 = f32[] parameter(1)
  ROOT %add.2353 = f32[] add(%Arg_0.2020, %Arg_1.1957)
}

%region_1188.36978.clone (Arg_0.2021: f32[], Arg_1.1958: f32[]) -> f32[] {
  %Arg_0.2021 = f32[] parameter(0)
  %Arg_1.1958 = f32[] parameter(1)
  ROOT %add.2354 = f32[] add(%Arg_0.2021, %Arg_1.1958)
}

%region_1189.36985.clone (Arg_0.2022: f32[], Arg_1.1959: f32[]) -> f32[] {
  %Arg_0.2022 = f32[] parameter(0)
  %Arg_1.1959 = f32[] parameter(1)
  ROOT %add.2355 = f32[] add(%Arg_0.2022, %Arg_1.1959)
}

%region_1192.37006.clone (Arg_0.2023: f32[], Arg_1.1960: f32[]) -> f32[] {
  %Arg_0.2023 = f32[] parameter(0)
  %Arg_1.1960 = f32[] parameter(1)
  ROOT %add.2356 = f32[] add(%Arg_0.2023, %Arg_1.1960)
}

%region_1193.37013.clone (Arg_0.2024: f32[], Arg_1.1961: f32[]) -> f32[] {
  %Arg_0.2024 = f32[] parameter(0)
  %Arg_1.1961 = f32[] parameter(1)
  ROOT %add.2357 = f32[] add(%Arg_0.2024, %Arg_1.1961)
}

%region_1194.37020.clone (Arg_0.2025: f32[], Arg_1.1962: f32[]) -> f32[] {
  %Arg_0.2025 = f32[] parameter(0)
  %Arg_1.1962 = f32[] parameter(1)
  ROOT %add.2358 = f32[] add(%Arg_0.2025, %Arg_1.1962)
}

%region_1195.37027.clone (Arg_0.2026: f32[], Arg_1.1963: f32[]) -> f32[] {
  %Arg_0.2026 = f32[] parameter(0)
  %Arg_1.1963 = f32[] parameter(1)
  ROOT %add.2360 = f32[] add(%Arg_0.2026, %Arg_1.1963)
}

%region_1196.37034.clone (Arg_0.2027: f32[], Arg_1.1964: f32[]) -> f32[] {
  %Arg_0.2027 = f32[] parameter(0)
  %Arg_1.1964 = f32[] parameter(1)
  ROOT %add.2361 = f32[] add(%Arg_0.2027, %Arg_1.1964)
}

%region_1197.37041.clone (Arg_0.2028: f32[], Arg_1.1965: f32[]) -> f32[] {
  %Arg_0.2028 = f32[] parameter(0)
  %Arg_1.1965 = f32[] parameter(1)
  ROOT %add.2362 = f32[] add(%Arg_0.2028, %Arg_1.1965)
}

%region_1198.37048.clone (Arg_0.2029: f32[], Arg_1.1966: f32[]) -> f32[] {
  %Arg_0.2029 = f32[] parameter(0)
  %Arg_1.1966 = f32[] parameter(1)
  ROOT %add.2363 = f32[] add(%Arg_0.2029, %Arg_1.1966)
}

%region_1201.37069.clone (Arg_0.2030: f32[], Arg_1.1967: f32[]) -> f32[] {
  %Arg_0.2030 = f32[] parameter(0)
  %Arg_1.1967 = f32[] parameter(1)
  ROOT %add.2364 = f32[] add(%Arg_0.2030, %Arg_1.1967)
}

%region_1202.37076.clone (Arg_0.2031: f32[], Arg_1.1968: f32[]) -> f32[] {
  %Arg_0.2031 = f32[] parameter(0)
  %Arg_1.1968 = f32[] parameter(1)
  ROOT %add.2365 = f32[] add(%Arg_0.2031, %Arg_1.1968)
}

%region_1203.37083.clone (Arg_0.2032: f32[], Arg_1.1969: f32[]) -> f32[] {
  %Arg_0.2032 = f32[] parameter(0)
  %Arg_1.1969 = f32[] parameter(1)
  ROOT %add.2366 = f32[] add(%Arg_0.2032, %Arg_1.1969)
}

%region_1204.37090.clone (Arg_0.2033: f32[], Arg_1.1970: f32[]) -> f32[] {
  %Arg_0.2033 = f32[] parameter(0)
  %Arg_1.1970 = f32[] parameter(1)
  ROOT %add.2367 = f32[] add(%Arg_0.2033, %Arg_1.1970)
}

%region_1205.37097.clone (Arg_0.2034: f32[], Arg_1.1971: f32[]) -> f32[] {
  %Arg_0.2034 = f32[] parameter(0)
  %Arg_1.1971 = f32[] parameter(1)
  ROOT %add.2368 = f32[] add(%Arg_0.2034, %Arg_1.1971)
}

%region_1206.37104.clone (Arg_0.2035: f32[], Arg_1.1972: f32[]) -> f32[] {
  %Arg_0.2035 = f32[] parameter(0)
  %Arg_1.1972 = f32[] parameter(1)
  ROOT %add.2369 = f32[] add(%Arg_0.2035, %Arg_1.1972)
}

%region_1207.37111.clone (Arg_0.2036: f32[], Arg_1.1973: f32[]) -> f32[] {
  %Arg_0.2036 = f32[] parameter(0)
  %Arg_1.1973 = f32[] parameter(1)
  ROOT %add.2370 = f32[] add(%Arg_0.2036, %Arg_1.1973)
}

%region_1210.37132.clone (Arg_0.2037: f32[], Arg_1.1974: f32[]) -> f32[] {
  %Arg_0.2037 = f32[] parameter(0)
  %Arg_1.1974 = f32[] parameter(1)
  ROOT %add.2371 = f32[] add(%Arg_0.2037, %Arg_1.1974)
}

%region_1211.37139.clone (Arg_0.2038: f32[], Arg_1.1975: f32[]) -> f32[] {
  %Arg_0.2038 = f32[] parameter(0)
  %Arg_1.1975 = f32[] parameter(1)
  ROOT %add.2372 = f32[] add(%Arg_0.2038, %Arg_1.1975)
}

%region_1212.37146.clone (Arg_0.2039: f32[], Arg_1.1976: f32[]) -> f32[] {
  %Arg_0.2039 = f32[] parameter(0)
  %Arg_1.1976 = f32[] parameter(1)
  ROOT %add.2373 = f32[] add(%Arg_0.2039, %Arg_1.1976)
}

%region_1213.37153.clone (Arg_0.2040: f32[], Arg_1.1977: f32[]) -> f32[] {
  %Arg_0.2040 = f32[] parameter(0)
  %Arg_1.1977 = f32[] parameter(1)
  ROOT %add.2374 = f32[] add(%Arg_0.2040, %Arg_1.1977)
}

%region_1214.37160.clone (Arg_0.2041: f32[], Arg_1.1978: f32[]) -> f32[] {
  %Arg_0.2041 = f32[] parameter(0)
  %Arg_1.1978 = f32[] parameter(1)
  ROOT %add.2375 = f32[] add(%Arg_0.2041, %Arg_1.1978)
}

%region_1215.37167.clone (Arg_0.2042: f32[], Arg_1.1979: f32[]) -> f32[] {
  %Arg_0.2042 = f32[] parameter(0)
  %Arg_1.1979 = f32[] parameter(1)
  ROOT %add.2376 = f32[] add(%Arg_0.2042, %Arg_1.1979)
}

%region_1216.37174.clone (Arg_0.2043: f32[], Arg_1.1980: f32[]) -> f32[] {
  %Arg_0.2043 = f32[] parameter(0)
  %Arg_1.1980 = f32[] parameter(1)
  ROOT %add.2377 = f32[] add(%Arg_0.2043, %Arg_1.1980)
}

%region_1219.37195.clone (Arg_0.2044: f32[], Arg_1.1981: f32[]) -> f32[] {
  %Arg_0.2044 = f32[] parameter(0)
  %Arg_1.1981 = f32[] parameter(1)
  ROOT %add.2378 = f32[] add(%Arg_0.2044, %Arg_1.1981)
}

%region_1220.37202.clone (Arg_0.2045: f32[], Arg_1.1982: f32[]) -> f32[] {
  %Arg_0.2045 = f32[] parameter(0)
  %Arg_1.1982 = f32[] parameter(1)
  ROOT %add.2379 = f32[] add(%Arg_0.2045, %Arg_1.1982)
}

%region_1221.37209.clone (Arg_0.2046: f32[], Arg_1.1983: f32[]) -> f32[] {
  %Arg_0.2046 = f32[] parameter(0)
  %Arg_1.1983 = f32[] parameter(1)
  ROOT %add.2380 = f32[] add(%Arg_0.2046, %Arg_1.1983)
}

%region_1222.37216.clone (Arg_0.2047: f32[], Arg_1.1984: f32[]) -> f32[] {
  %Arg_0.2047 = f32[] parameter(0)
  %Arg_1.1984 = f32[] parameter(1)
  ROOT %add.2381 = f32[] add(%Arg_0.2047, %Arg_1.1984)
}

%region_1223.37223.clone (Arg_0.2048: f32[], Arg_1.1985: f32[]) -> f32[] {
  %Arg_0.2048 = f32[] parameter(0)
  %Arg_1.1985 = f32[] parameter(1)
  ROOT %add.2382 = f32[] add(%Arg_0.2048, %Arg_1.1985)
}

%region_1224.37230.clone (Arg_0.2049: f32[], Arg_1.1986: f32[]) -> f32[] {
  %Arg_0.2049 = f32[] parameter(0)
  %Arg_1.1986 = f32[] parameter(1)
  ROOT %add.2383 = f32[] add(%Arg_0.2049, %Arg_1.1986)
}

%region_1225.37237.clone (Arg_0.2050: f32[], Arg_1.1987: f32[]) -> f32[] {
  %Arg_0.2050 = f32[] parameter(0)
  %Arg_1.1987 = f32[] parameter(1)
  ROOT %add.2384 = f32[] add(%Arg_0.2050, %Arg_1.1987)
}

%region_1228.37258.clone (Arg_0.2051: f32[], Arg_1.1988: f32[]) -> f32[] {
  %Arg_0.2051 = f32[] parameter(0)
  %Arg_1.1988 = f32[] parameter(1)
  ROOT %add.2385 = f32[] add(%Arg_0.2051, %Arg_1.1988)
}

%region_1229.37265.clone (Arg_0.2052: f32[], Arg_1.1989: f32[]) -> f32[] {
  %Arg_0.2052 = f32[] parameter(0)
  %Arg_1.1989 = f32[] parameter(1)
  ROOT %add.2386 = f32[] add(%Arg_0.2052, %Arg_1.1989)
}

%region_1230.37272.clone (Arg_0.2053: f32[], Arg_1.1990: f32[]) -> f32[] {
  %Arg_0.2053 = f32[] parameter(0)
  %Arg_1.1990 = f32[] parameter(1)
  ROOT %add.2387 = f32[] add(%Arg_0.2053, %Arg_1.1990)
}

%region_1231.37279.clone (Arg_0.2054: f32[], Arg_1.1991: f32[]) -> f32[] {
  %Arg_0.2054 = f32[] parameter(0)
  %Arg_1.1991 = f32[] parameter(1)
  ROOT %add.2388 = f32[] add(%Arg_0.2054, %Arg_1.1991)
}

%region_1232.37286.clone (Arg_0.2055: f32[], Arg_1.1992: f32[]) -> f32[] {
  %Arg_0.2055 = f32[] parameter(0)
  %Arg_1.1992 = f32[] parameter(1)
  ROOT %add.2389 = f32[] add(%Arg_0.2055, %Arg_1.1992)
}

%region_1233.37293.clone (Arg_0.2056: f32[], Arg_1.1993: f32[]) -> f32[] {
  %Arg_0.2056 = f32[] parameter(0)
  %Arg_1.1993 = f32[] parameter(1)
  ROOT %add.2390 = f32[] add(%Arg_0.2056, %Arg_1.1993)
}

%region_1234.37300.clone (Arg_0.2057: f32[], Arg_1.1994: f32[]) -> f32[] {
  %Arg_0.2057 = f32[] parameter(0)
  %Arg_1.1994 = f32[] parameter(1)
  ROOT %add.2391 = f32[] add(%Arg_0.2057, %Arg_1.1994)
}

%region_1237.37321.clone (Arg_0.2058: f32[], Arg_1.1995: f32[]) -> f32[] {
  %Arg_0.2058 = f32[] parameter(0)
  %Arg_1.1995 = f32[] parameter(1)
  ROOT %add.2392 = f32[] add(%Arg_0.2058, %Arg_1.1995)
}

%region_1238.37328.clone (Arg_0.2059: f32[], Arg_1.1996: f32[]) -> f32[] {
  %Arg_0.2059 = f32[] parameter(0)
  %Arg_1.1996 = f32[] parameter(1)
  ROOT %add.2393 = f32[] add(%Arg_0.2059, %Arg_1.1996)
}

%region_1239.37335.clone (Arg_0.2060: f32[], Arg_1.1997: f32[]) -> f32[] {
  %Arg_0.2060 = f32[] parameter(0)
  %Arg_1.1997 = f32[] parameter(1)
  ROOT %add.2394 = f32[] add(%Arg_0.2060, %Arg_1.1997)
}

%region_1240.37342.clone (Arg_0.2061: f32[], Arg_1.1998: f32[]) -> f32[] {
  %Arg_0.2061 = f32[] parameter(0)
  %Arg_1.1998 = f32[] parameter(1)
  ROOT %add.2395 = f32[] add(%Arg_0.2061, %Arg_1.1998)
}

%region_1241.37349.clone (Arg_0.2062: f32[], Arg_1.1999: f32[]) -> f32[] {
  %Arg_0.2062 = f32[] parameter(0)
  %Arg_1.1999 = f32[] parameter(1)
  ROOT %add.2396 = f32[] add(%Arg_0.2062, %Arg_1.1999)
}

%region_1242.37356.clone (Arg_0.2063: f32[], Arg_1.2000: f32[]) -> f32[] {
  %Arg_0.2063 = f32[] parameter(0)
  %Arg_1.2000 = f32[] parameter(1)
  ROOT %add.2398 = f32[] add(%Arg_0.2063, %Arg_1.2000)
}

%region_1243.37363.clone (Arg_0.2064: f32[], Arg_1.2001: f32[]) -> f32[] {
  %Arg_0.2064 = f32[] parameter(0)
  %Arg_1.2001 = f32[] parameter(1)
  ROOT %add.2399 = f32[] add(%Arg_0.2064, %Arg_1.2001)
}

%region_1246.37384.clone (Arg_0.2065: f32[], Arg_1.2002: f32[]) -> f32[] {
  %Arg_0.2065 = f32[] parameter(0)
  %Arg_1.2002 = f32[] parameter(1)
  ROOT %add.2400 = f32[] add(%Arg_0.2065, %Arg_1.2002)
}

%region_1247.37391.clone (Arg_0.2066: f32[], Arg_1.2003: f32[]) -> f32[] {
  %Arg_0.2066 = f32[] parameter(0)
  %Arg_1.2003 = f32[] parameter(1)
  ROOT %add.2401 = f32[] add(%Arg_0.2066, %Arg_1.2003)
}

%region_1248.37398.clone (Arg_0.2067: f32[], Arg_1.2004: f32[]) -> f32[] {
  %Arg_0.2067 = f32[] parameter(0)
  %Arg_1.2004 = f32[] parameter(1)
  ROOT %add.2402 = f32[] add(%Arg_0.2067, %Arg_1.2004)
}

%region_1249.37405.clone (Arg_0.2068: f32[], Arg_1.2005: f32[]) -> f32[] {
  %Arg_0.2068 = f32[] parameter(0)
  %Arg_1.2005 = f32[] parameter(1)
  ROOT %add.2403 = f32[] add(%Arg_0.2068, %Arg_1.2005)
}

%region_1250.37412.clone (Arg_0.2069: f32[], Arg_1.2006: f32[]) -> f32[] {
  %Arg_0.2069 = f32[] parameter(0)
  %Arg_1.2006 = f32[] parameter(1)
  ROOT %add.2404 = f32[] add(%Arg_0.2069, %Arg_1.2006)
}

%region_1251.37419.clone (Arg_0.2070: f32[], Arg_1.2007: f32[]) -> f32[] {
  %Arg_0.2070 = f32[] parameter(0)
  %Arg_1.2007 = f32[] parameter(1)
  ROOT %add.2405 = f32[] add(%Arg_0.2070, %Arg_1.2007)
}

%region_1252.37426.clone (Arg_0.2071: f32[], Arg_1.2008: f32[]) -> f32[] {
  %Arg_0.2071 = f32[] parameter(0)
  %Arg_1.2008 = f32[] parameter(1)
  ROOT %add.2406 = f32[] add(%Arg_0.2071, %Arg_1.2008)
}

%region_1255.37447.clone (Arg_0.2072: f32[], Arg_1.2009: f32[]) -> f32[] {
  %Arg_0.2072 = f32[] parameter(0)
  %Arg_1.2009 = f32[] parameter(1)
  ROOT %add.2407 = f32[] add(%Arg_0.2072, %Arg_1.2009)
}

%region_1256.37454.clone (Arg_0.2073: f32[], Arg_1.2010: f32[]) -> f32[] {
  %Arg_0.2073 = f32[] parameter(0)
  %Arg_1.2010 = f32[] parameter(1)
  ROOT %add.2408 = f32[] add(%Arg_0.2073, %Arg_1.2010)
}

%region_1257.37461.clone (Arg_0.2074: f32[], Arg_1.2011: f32[]) -> f32[] {
  %Arg_0.2074 = f32[] parameter(0)
  %Arg_1.2011 = f32[] parameter(1)
  ROOT %add.2409 = f32[] add(%Arg_0.2074, %Arg_1.2011)
}

%region_1258.37468.clone (Arg_0.2075: f32[], Arg_1.2012: f32[]) -> f32[] {
  %Arg_0.2075 = f32[] parameter(0)
  %Arg_1.2012 = f32[] parameter(1)
  ROOT %add.2410 = f32[] add(%Arg_0.2075, %Arg_1.2012)
}

%region_1259.37475.clone (Arg_0.2076: f32[], Arg_1.2013: f32[]) -> f32[] {
  %Arg_0.2076 = f32[] parameter(0)
  %Arg_1.2013 = f32[] parameter(1)
  ROOT %add.2411 = f32[] add(%Arg_0.2076, %Arg_1.2013)
}

%region_1260.37482.clone (Arg_0.2077: f32[], Arg_1.2014: f32[]) -> f32[] {
  %Arg_0.2077 = f32[] parameter(0)
  %Arg_1.2014 = f32[] parameter(1)
  ROOT %add.2412 = f32[] add(%Arg_0.2077, %Arg_1.2014)
}

%region_1261.37489.clone (Arg_0.2078: f32[], Arg_1.2015: f32[]) -> f32[] {
  %Arg_0.2078 = f32[] parameter(0)
  %Arg_1.2015 = f32[] parameter(1)
  ROOT %add.2413 = f32[] add(%Arg_0.2078, %Arg_1.2015)
}

%region_1264.37510.clone (Arg_0.2079: f32[], Arg_1.2016: f32[]) -> f32[] {
  %Arg_0.2079 = f32[] parameter(0)
  %Arg_1.2016 = f32[] parameter(1)
  ROOT %add.2414 = f32[] add(%Arg_0.2079, %Arg_1.2016)
}

%region_1265.37517.clone (Arg_0.2080: f32[], Arg_1.2017: f32[]) -> f32[] {
  %Arg_0.2080 = f32[] parameter(0)
  %Arg_1.2017 = f32[] parameter(1)
  ROOT %add.2415 = f32[] add(%Arg_0.2080, %Arg_1.2017)
}

%region_1266.37524.clone (Arg_0.2081: f32[], Arg_1.2018: f32[]) -> f32[] {
  %Arg_0.2081 = f32[] parameter(0)
  %Arg_1.2018 = f32[] parameter(1)
  ROOT %add.2416 = f32[] add(%Arg_0.2081, %Arg_1.2018)
}

%region_1267.37531.clone (Arg_0.2082: f32[], Arg_1.2019: f32[]) -> f32[] {
  %Arg_0.2082 = f32[] parameter(0)
  %Arg_1.2019 = f32[] parameter(1)
  ROOT %add.2417 = f32[] add(%Arg_0.2082, %Arg_1.2019)
}

%region_1268.37538.clone (Arg_0.2083: f32[], Arg_1.2020: f32[]) -> f32[] {
  %Arg_0.2083 = f32[] parameter(0)
  %Arg_1.2020 = f32[] parameter(1)
  ROOT %add.2418 = f32[] add(%Arg_0.2083, %Arg_1.2020)
}

%region_1269.37545.clone (Arg_0.2084: f32[], Arg_1.2021: f32[]) -> f32[] {
  %Arg_0.2084 = f32[] parameter(0)
  %Arg_1.2021 = f32[] parameter(1)
  ROOT %add.2419 = f32[] add(%Arg_0.2084, %Arg_1.2021)
}

%region_1270.37552.clone (Arg_0.2085: f32[], Arg_1.2022: f32[]) -> f32[] {
  %Arg_0.2085 = f32[] parameter(0)
  %Arg_1.2022 = f32[] parameter(1)
  ROOT %add.2420 = f32[] add(%Arg_0.2085, %Arg_1.2022)
}

%region_1273.37573.clone (Arg_0.2086: f32[], Arg_1.2023: f32[]) -> f32[] {
  %Arg_0.2086 = f32[] parameter(0)
  %Arg_1.2023 = f32[] parameter(1)
  ROOT %add.2421 = f32[] add(%Arg_0.2086, %Arg_1.2023)
}

%region_1274.37580.clone (Arg_0.2087: f32[], Arg_1.2024: f32[]) -> f32[] {
  %Arg_0.2087 = f32[] parameter(0)
  %Arg_1.2024 = f32[] parameter(1)
  ROOT %add.2422 = f32[] add(%Arg_0.2087, %Arg_1.2024)
}

%region_1275.37587.clone (Arg_0.2088: f32[], Arg_1.2025: f32[]) -> f32[] {
  %Arg_0.2088 = f32[] parameter(0)
  %Arg_1.2025 = f32[] parameter(1)
  ROOT %add.2423 = f32[] add(%Arg_0.2088, %Arg_1.2025)
}

%region_1276.37594.clone (Arg_0.2089: f32[], Arg_1.2026: f32[]) -> f32[] {
  %Arg_0.2089 = f32[] parameter(0)
  %Arg_1.2026 = f32[] parameter(1)
  ROOT %add.2424 = f32[] add(%Arg_0.2089, %Arg_1.2026)
}

%region_1277.37601.clone (Arg_0.2090: f32[], Arg_1.2027: f32[]) -> f32[] {
  %Arg_0.2090 = f32[] parameter(0)
  %Arg_1.2027 = f32[] parameter(1)
  ROOT %add.2425 = f32[] add(%Arg_0.2090, %Arg_1.2027)
}

%region_1278.37608.clone (Arg_0.2091: f32[], Arg_1.2028: f32[]) -> f32[] {
  %Arg_0.2091 = f32[] parameter(0)
  %Arg_1.2028 = f32[] parameter(1)
  ROOT %add.2426 = f32[] add(%Arg_0.2091, %Arg_1.2028)
}

%region_1279.37615.clone (Arg_0.2092: f32[], Arg_1.2029: f32[]) -> f32[] {
  %Arg_0.2092 = f32[] parameter(0)
  %Arg_1.2029 = f32[] parameter(1)
  ROOT %add.2427 = f32[] add(%Arg_0.2092, %Arg_1.2029)
}

%region_1282.37636.clone (Arg_0.2093: f32[], Arg_1.2030: f32[]) -> f32[] {
  %Arg_0.2093 = f32[] parameter(0)
  %Arg_1.2030 = f32[] parameter(1)
  ROOT %add.2429 = f32[] add(%Arg_0.2093, %Arg_1.2030)
}

%region_1283.37643.clone (Arg_0.2094: f32[], Arg_1.2031: f32[]) -> f32[] {
  %Arg_0.2094 = f32[] parameter(0)
  %Arg_1.2031 = f32[] parameter(1)
  ROOT %add.2430 = f32[] add(%Arg_0.2094, %Arg_1.2031)
}

%region_1284.37650.clone (Arg_0.2095: f32[], Arg_1.2032: f32[]) -> f32[] {
  %Arg_0.2095 = f32[] parameter(0)
  %Arg_1.2032 = f32[] parameter(1)
  ROOT %add.2431 = f32[] add(%Arg_0.2095, %Arg_1.2032)
}

%region_1285.37657.clone (Arg_0.2096: f32[], Arg_1.2033: f32[]) -> f32[] {
  %Arg_0.2096 = f32[] parameter(0)
  %Arg_1.2033 = f32[] parameter(1)
  ROOT %add.2432 = f32[] add(%Arg_0.2096, %Arg_1.2033)
}

%region_1286.37664.clone (Arg_0.2097: f32[], Arg_1.2034: f32[]) -> f32[] {
  %Arg_0.2097 = f32[] parameter(0)
  %Arg_1.2034 = f32[] parameter(1)
  ROOT %add.2433 = f32[] add(%Arg_0.2097, %Arg_1.2034)
}

%region_1287.37671.clone (Arg_0.2098: f32[], Arg_1.2035: f32[]) -> f32[] {
  %Arg_0.2098 = f32[] parameter(0)
  %Arg_1.2035 = f32[] parameter(1)
  ROOT %add.2434 = f32[] add(%Arg_0.2098, %Arg_1.2035)
}

%region_1288.37678.clone (Arg_0.2099: f32[], Arg_1.2036: f32[]) -> f32[] {
  %Arg_0.2099 = f32[] parameter(0)
  %Arg_1.2036 = f32[] parameter(1)
  ROOT %add.2435 = f32[] add(%Arg_0.2099, %Arg_1.2036)
}

%region_1291.37699.clone (Arg_0.2100: f32[], Arg_1.2037: f32[]) -> f32[] {
  %Arg_0.2100 = f32[] parameter(0)
  %Arg_1.2037 = f32[] parameter(1)
  ROOT %add.2437 = f32[] add(%Arg_0.2100, %Arg_1.2037)
}

%region_1292.37706.clone (Arg_0.2101: f32[], Arg_1.2038: f32[]) -> f32[] {
  %Arg_0.2101 = f32[] parameter(0)
  %Arg_1.2038 = f32[] parameter(1)
  ROOT %add.2438 = f32[] add(%Arg_0.2101, %Arg_1.2038)
}

%region_1293.37713.clone (Arg_0.2102: f32[], Arg_1.2039: f32[]) -> f32[] {
  %Arg_0.2102 = f32[] parameter(0)
  %Arg_1.2039 = f32[] parameter(1)
  ROOT %add.2439 = f32[] add(%Arg_0.2102, %Arg_1.2039)
}

%region_1294.37720.clone (Arg_0.2103: f32[], Arg_1.2040: f32[]) -> f32[] {
  %Arg_0.2103 = f32[] parameter(0)
  %Arg_1.2040 = f32[] parameter(1)
  ROOT %add.2440 = f32[] add(%Arg_0.2103, %Arg_1.2040)
}

%region_1295.37727.clone (Arg_0.2104: f32[], Arg_1.2041: f32[]) -> f32[] {
  %Arg_0.2104 = f32[] parameter(0)
  %Arg_1.2041 = f32[] parameter(1)
  ROOT %add.2441 = f32[] add(%Arg_0.2104, %Arg_1.2041)
}

%region_1296.37734.clone (Arg_0.2105: f32[], Arg_1.2042: f32[]) -> f32[] {
  %Arg_0.2105 = f32[] parameter(0)
  %Arg_1.2042 = f32[] parameter(1)
  ROOT %add.2442 = f32[] add(%Arg_0.2105, %Arg_1.2042)
}

%region_1297.37741.clone (Arg_0.2106: f32[], Arg_1.2043: f32[]) -> f32[] {
  %Arg_0.2106 = f32[] parameter(0)
  %Arg_1.2043 = f32[] parameter(1)
  ROOT %add.2443 = f32[] add(%Arg_0.2106, %Arg_1.2043)
}

%region_1300.37762.clone (Arg_0.2107: f32[], Arg_1.2044: f32[]) -> f32[] {
  %Arg_0.2107 = f32[] parameter(0)
  %Arg_1.2044 = f32[] parameter(1)
  ROOT %add.2444 = f32[] add(%Arg_0.2107, %Arg_1.2044)
}

%region_1301.37769.clone (Arg_0.2108: f32[], Arg_1.2045: f32[]) -> f32[] {
  %Arg_0.2108 = f32[] parameter(0)
  %Arg_1.2045 = f32[] parameter(1)
  ROOT %add.2445 = f32[] add(%Arg_0.2108, %Arg_1.2045)
}

%region_1302.37776.clone (Arg_0.2109: f32[], Arg_1.2046: f32[]) -> f32[] {
  %Arg_0.2109 = f32[] parameter(0)
  %Arg_1.2046 = f32[] parameter(1)
  ROOT %add.2446 = f32[] add(%Arg_0.2109, %Arg_1.2046)
}

%region_1303.37783.clone (Arg_0.2110: f32[], Arg_1.2047: f32[]) -> f32[] {
  %Arg_0.2110 = f32[] parameter(0)
  %Arg_1.2047 = f32[] parameter(1)
  ROOT %add.2447 = f32[] add(%Arg_0.2110, %Arg_1.2047)
}

%region_1304.37790.clone (Arg_0.2111: f32[], Arg_1.2048: f32[]) -> f32[] {
  %Arg_0.2111 = f32[] parameter(0)
  %Arg_1.2048 = f32[] parameter(1)
  ROOT %add.2448 = f32[] add(%Arg_0.2111, %Arg_1.2048)
}

%region_1305.37797.clone (Arg_0.2112: f32[], Arg_1.2049: f32[]) -> f32[] {
  %Arg_0.2112 = f32[] parameter(0)
  %Arg_1.2049 = f32[] parameter(1)
  ROOT %add.2449 = f32[] add(%Arg_0.2112, %Arg_1.2049)
}

%region_1306.37804.clone (Arg_0.2113: f32[], Arg_1.2050: f32[]) -> f32[] {
  %Arg_0.2113 = f32[] parameter(0)
  %Arg_1.2050 = f32[] parameter(1)
  ROOT %add.2450 = f32[] add(%Arg_0.2113, %Arg_1.2050)
}

%region_1309.37825.clone (Arg_0.2114: f32[], Arg_1.2051: f32[]) -> f32[] {
  %Arg_0.2114 = f32[] parameter(0)
  %Arg_1.2051 = f32[] parameter(1)
  ROOT %add.2451 = f32[] add(%Arg_0.2114, %Arg_1.2051)
}

%region_1310.37832.clone (Arg_0.2115: f32[], Arg_1.2052: f32[]) -> f32[] {
  %Arg_0.2115 = f32[] parameter(0)
  %Arg_1.2052 = f32[] parameter(1)
  ROOT %add.2452 = f32[] add(%Arg_0.2115, %Arg_1.2052)
}

%region_1311.37839.clone (Arg_0.2116: f32[], Arg_1.2053: f32[]) -> f32[] {
  %Arg_0.2116 = f32[] parameter(0)
  %Arg_1.2053 = f32[] parameter(1)
  ROOT %add.2453 = f32[] add(%Arg_0.2116, %Arg_1.2053)
}

%region_1312.37846.clone (Arg_0.2117: f32[], Arg_1.2054: f32[]) -> f32[] {
  %Arg_0.2117 = f32[] parameter(0)
  %Arg_1.2054 = f32[] parameter(1)
  ROOT %add.2455 = f32[] add(%Arg_0.2117, %Arg_1.2054)
}

%region_1313.37853.clone (Arg_0.2118: f32[], Arg_1.2055: f32[]) -> f32[] {
  %Arg_0.2118 = f32[] parameter(0)
  %Arg_1.2055 = f32[] parameter(1)
  ROOT %add.2456 = f32[] add(%Arg_0.2118, %Arg_1.2055)
}

%region_1314.37860.clone (Arg_0.2119: f32[], Arg_1.2056: f32[]) -> f32[] {
  %Arg_0.2119 = f32[] parameter(0)
  %Arg_1.2056 = f32[] parameter(1)
  ROOT %add.2457 = f32[] add(%Arg_0.2119, %Arg_1.2056)
}

%region_1315.37867.clone (Arg_0.2120: f32[], Arg_1.2057: f32[]) -> f32[] {
  %Arg_0.2120 = f32[] parameter(0)
  %Arg_1.2057 = f32[] parameter(1)
  ROOT %add.2458 = f32[] add(%Arg_0.2120, %Arg_1.2057)
}

%region_1318.37888.clone (Arg_0.2121: f32[], Arg_1.2058: f32[]) -> f32[] {
  %Arg_0.2121 = f32[] parameter(0)
  %Arg_1.2058 = f32[] parameter(1)
  ROOT %add.2460 = f32[] add(%Arg_0.2121, %Arg_1.2058)
}

%region_1319.37895.clone (Arg_0.2122: f32[], Arg_1.2059: f32[]) -> f32[] {
  %Arg_0.2122 = f32[] parameter(0)
  %Arg_1.2059 = f32[] parameter(1)
  ROOT %add.2461 = f32[] add(%Arg_0.2122, %Arg_1.2059)
}

%region_1320.37902.clone (Arg_0.2123: f32[], Arg_1.2060: f32[]) -> f32[] {
  %Arg_0.2123 = f32[] parameter(0)
  %Arg_1.2060 = f32[] parameter(1)
  ROOT %add.2462 = f32[] add(%Arg_0.2123, %Arg_1.2060)
}

%region_1321.37909.clone (Arg_0.2124: f32[], Arg_1.2061: f32[]) -> f32[] {
  %Arg_0.2124 = f32[] parameter(0)
  %Arg_1.2061 = f32[] parameter(1)
  ROOT %add.2463 = f32[] add(%Arg_0.2124, %Arg_1.2061)
}

%region_1322.37916.clone (Arg_0.2125: f32[], Arg_1.2062: f32[]) -> f32[] {
  %Arg_0.2125 = f32[] parameter(0)
  %Arg_1.2062 = f32[] parameter(1)
  ROOT %add.2465 = f32[] add(%Arg_0.2125, %Arg_1.2062)
}

%region_1323.37923.clone (Arg_0.2126: f32[], Arg_1.2063: f32[]) -> f32[] {
  %Arg_0.2126 = f32[] parameter(0)
  %Arg_1.2063 = f32[] parameter(1)
  ROOT %add.2466 = f32[] add(%Arg_0.2126, %Arg_1.2063)
}

%region_1324.37930.clone (Arg_0.2127: f32[], Arg_1.2064: f32[]) -> f32[] {
  %Arg_0.2127 = f32[] parameter(0)
  %Arg_1.2064 = f32[] parameter(1)
  ROOT %add.2467 = f32[] add(%Arg_0.2127, %Arg_1.2064)
}

%region_1327.37951.clone (Arg_0.2128: f32[], Arg_1.2065: f32[]) -> f32[] {
  %Arg_0.2128 = f32[] parameter(0)
  %Arg_1.2065 = f32[] parameter(1)
  ROOT %add.2468 = f32[] add(%Arg_0.2128, %Arg_1.2065)
}

%region_1328.37958.clone (Arg_0.2129: f32[], Arg_1.2066: f32[]) -> f32[] {
  %Arg_0.2129 = f32[] parameter(0)
  %Arg_1.2066 = f32[] parameter(1)
  ROOT %add.2469 = f32[] add(%Arg_0.2129, %Arg_1.2066)
}

%region_1329.37965.clone (Arg_0.2130: f32[], Arg_1.2067: f32[]) -> f32[] {
  %Arg_0.2130 = f32[] parameter(0)
  %Arg_1.2067 = f32[] parameter(1)
  ROOT %add.2470 = f32[] add(%Arg_0.2130, %Arg_1.2067)
}

%region_1330.37972.clone (Arg_0.2131: f32[], Arg_1.2068: f32[]) -> f32[] {
  %Arg_0.2131 = f32[] parameter(0)
  %Arg_1.2068 = f32[] parameter(1)
  ROOT %add.2471 = f32[] add(%Arg_0.2131, %Arg_1.2068)
}

%region_1331.37979.clone (Arg_0.2132: f32[], Arg_1.2069: f32[]) -> f32[] {
  %Arg_0.2132 = f32[] parameter(0)
  %Arg_1.2069 = f32[] parameter(1)
  ROOT %add.2472 = f32[] add(%Arg_0.2132, %Arg_1.2069)
}

%region_1332.37986.clone (Arg_0.2133: f32[], Arg_1.2070: f32[]) -> f32[] {
  %Arg_0.2133 = f32[] parameter(0)
  %Arg_1.2070 = f32[] parameter(1)
  ROOT %add.2473 = f32[] add(%Arg_0.2133, %Arg_1.2070)
}

%region_1333.37993.clone (Arg_0.2134: f32[], Arg_1.2071: f32[]) -> f32[] {
  %Arg_0.2134 = f32[] parameter(0)
  %Arg_1.2071 = f32[] parameter(1)
  ROOT %add.2474 = f32[] add(%Arg_0.2134, %Arg_1.2071)
}

%region_1336.38014.clone (Arg_0.2135: f32[], Arg_1.2072: f32[]) -> f32[] {
  %Arg_0.2135 = f32[] parameter(0)
  %Arg_1.2072 = f32[] parameter(1)
  ROOT %add.2475 = f32[] add(%Arg_0.2135, %Arg_1.2072)
}

%region_1337.38021.clone (Arg_0.2136: f32[], Arg_1.2073: f32[]) -> f32[] {
  %Arg_0.2136 = f32[] parameter(0)
  %Arg_1.2073 = f32[] parameter(1)
  ROOT %add.2476 = f32[] add(%Arg_0.2136, %Arg_1.2073)
}

%region_1338.38028.clone (Arg_0.2137: f32[], Arg_1.2074: f32[]) -> f32[] {
  %Arg_0.2137 = f32[] parameter(0)
  %Arg_1.2074 = f32[] parameter(1)
  ROOT %add.2477 = f32[] add(%Arg_0.2137, %Arg_1.2074)
}

%region_1339.38035.clone (Arg_0.2138: f32[], Arg_1.2075: f32[]) -> f32[] {
  %Arg_0.2138 = f32[] parameter(0)
  %Arg_1.2075 = f32[] parameter(1)
  ROOT %add.2478 = f32[] add(%Arg_0.2138, %Arg_1.2075)
}

%region_1340.38042.clone (Arg_0.2139: f32[], Arg_1.2076: f32[]) -> f32[] {
  %Arg_0.2139 = f32[] parameter(0)
  %Arg_1.2076 = f32[] parameter(1)
  ROOT %add.2479 = f32[] add(%Arg_0.2139, %Arg_1.2076)
}

%region_1341.38049.clone (Arg_0.2140: f32[], Arg_1.2077: f32[]) -> f32[] {
  %Arg_0.2140 = f32[] parameter(0)
  %Arg_1.2077 = f32[] parameter(1)
  ROOT %add.2480 = f32[] add(%Arg_0.2140, %Arg_1.2077)
}

%region_1342.38056.clone (Arg_0.2141: f32[], Arg_1.2078: f32[]) -> f32[] {
  %Arg_0.2141 = f32[] parameter(0)
  %Arg_1.2078 = f32[] parameter(1)
  ROOT %add.2481 = f32[] add(%Arg_0.2141, %Arg_1.2078)
}

%region_1345.38077.clone (Arg_0.2142: f32[], Arg_1.2079: f32[]) -> f32[] {
  %Arg_0.2142 = f32[] parameter(0)
  %Arg_1.2079 = f32[] parameter(1)
  ROOT %add.2482 = f32[] add(%Arg_0.2142, %Arg_1.2079)
}

%region_1346.38084.clone (Arg_0.2143: f32[], Arg_1.2080: f32[]) -> f32[] {
  %Arg_0.2143 = f32[] parameter(0)
  %Arg_1.2080 = f32[] parameter(1)
  ROOT %add.2483 = f32[] add(%Arg_0.2143, %Arg_1.2080)
}

%region_1347.38091.clone (Arg_0.2144: f32[], Arg_1.2081: f32[]) -> f32[] {
  %Arg_0.2144 = f32[] parameter(0)
  %Arg_1.2081 = f32[] parameter(1)
  ROOT %add.2484 = f32[] add(%Arg_0.2144, %Arg_1.2081)
}

%region_1348.38098.clone (Arg_0.2145: f32[], Arg_1.2082: f32[]) -> f32[] {
  %Arg_0.2145 = f32[] parameter(0)
  %Arg_1.2082 = f32[] parameter(1)
  ROOT %add.2485 = f32[] add(%Arg_0.2145, %Arg_1.2082)
}

%region_1349.38105.clone (Arg_0.2147: f32[], Arg_1.2083: f32[]) -> f32[] {
  %Arg_0.2147 = f32[] parameter(0)
  %Arg_1.2083 = f32[] parameter(1)
  ROOT %add.2486 = f32[] add(%Arg_0.2147, %Arg_1.2083)
}

%region_1350.38112.clone (Arg_0.2148: f32[], Arg_1.2084: f32[]) -> f32[] {
  %Arg_0.2148 = f32[] parameter(0)
  %Arg_1.2084 = f32[] parameter(1)
  ROOT %add.2487 = f32[] add(%Arg_0.2148, %Arg_1.2084)
}

%region_1351.38119.clone (Arg_0.2149: f32[], Arg_1.2085: f32[]) -> f32[] {
  %Arg_0.2149 = f32[] parameter(0)
  %Arg_1.2085 = f32[] parameter(1)
  ROOT %add.2488 = f32[] add(%Arg_0.2149, %Arg_1.2085)
}

%region_1354.38140.clone (Arg_0.2150: f32[], Arg_1.2086: f32[]) -> f32[] {
  %Arg_0.2150 = f32[] parameter(0)
  %Arg_1.2086 = f32[] parameter(1)
  ROOT %add.2489 = f32[] add(%Arg_0.2150, %Arg_1.2086)
}

%region_1355.38147.clone (Arg_0.2151: f32[], Arg_1.2087: f32[]) -> f32[] {
  %Arg_0.2151 = f32[] parameter(0)
  %Arg_1.2087 = f32[] parameter(1)
  ROOT %add.2491 = f32[] add(%Arg_0.2151, %Arg_1.2087)
}

%region_1356.38154.clone (Arg_0.2152: f32[], Arg_1.2088: f32[]) -> f32[] {
  %Arg_0.2152 = f32[] parameter(0)
  %Arg_1.2088 = f32[] parameter(1)
  ROOT %add.2492 = f32[] add(%Arg_0.2152, %Arg_1.2088)
}

%region_1357.38161.clone (Arg_0.2153: f32[], Arg_1.2089: f32[]) -> f32[] {
  %Arg_0.2153 = f32[] parameter(0)
  %Arg_1.2089 = f32[] parameter(1)
  ROOT %add.2493 = f32[] add(%Arg_0.2153, %Arg_1.2089)
}

%region_1358.38168.clone (Arg_0.2155: f32[], Arg_1.2090: f32[]) -> f32[] {
  %Arg_0.2155 = f32[] parameter(0)
  %Arg_1.2090 = f32[] parameter(1)
  ROOT %add.2494 = f32[] add(%Arg_0.2155, %Arg_1.2090)
}

%region_1359.38175.clone (Arg_0.2156: f32[], Arg_1.2091: f32[]) -> f32[] {
  %Arg_0.2156 = f32[] parameter(0)
  %Arg_1.2091 = f32[] parameter(1)
  ROOT %add.2495 = f32[] add(%Arg_0.2156, %Arg_1.2091)
}

%region_1360.38182.clone (Arg_0.2157: f32[], Arg_1.2092: f32[]) -> f32[] {
  %Arg_0.2157 = f32[] parameter(0)
  %Arg_1.2092 = f32[] parameter(1)
  ROOT %add.2496 = f32[] add(%Arg_0.2157, %Arg_1.2092)
}

%region_1363.38203.clone (Arg_0.2158: f32[], Arg_1.2093: f32[]) -> f32[] {
  %Arg_0.2158 = f32[] parameter(0)
  %Arg_1.2093 = f32[] parameter(1)
  ROOT %add.2498 = f32[] add(%Arg_0.2158, %Arg_1.2093)
}

%region_1364.38210.clone (Arg_0.2160: f32[], Arg_1.2094: f32[]) -> f32[] {
  %Arg_0.2160 = f32[] parameter(0)
  %Arg_1.2094 = f32[] parameter(1)
  ROOT %add.2499 = f32[] add(%Arg_0.2160, %Arg_1.2094)
}

%region_1365.38217.clone (Arg_0.2161: f32[], Arg_1.2095: f32[]) -> f32[] {
  %Arg_0.2161 = f32[] parameter(0)
  %Arg_1.2095 = f32[] parameter(1)
  ROOT %add.2500 = f32[] add(%Arg_0.2161, %Arg_1.2095)
}

%region_1366.38224.clone (Arg_0.2162: f32[], Arg_1.2096: f32[]) -> f32[] {
  %Arg_0.2162 = f32[] parameter(0)
  %Arg_1.2096 = f32[] parameter(1)
  ROOT %add.2501 = f32[] add(%Arg_0.2162, %Arg_1.2096)
}

%region_1367.38231.clone (Arg_0.2163: f32[], Arg_1.2097: f32[]) -> f32[] {
  %Arg_0.2163 = f32[] parameter(0)
  %Arg_1.2097 = f32[] parameter(1)
  ROOT %add.2503 = f32[] add(%Arg_0.2163, %Arg_1.2097)
}

%region_1368.38238.clone (Arg_0.2164: f32[], Arg_1.2098: f32[]) -> f32[] {
  %Arg_0.2164 = f32[] parameter(0)
  %Arg_1.2098 = f32[] parameter(1)
  ROOT %add.2504 = f32[] add(%Arg_0.2164, %Arg_1.2098)
}

%region_1369.38245.clone (Arg_0.2165: f32[], Arg_1.2099: f32[]) -> f32[] {
  %Arg_0.2165 = f32[] parameter(0)
  %Arg_1.2099 = f32[] parameter(1)
  ROOT %add.2505 = f32[] add(%Arg_0.2165, %Arg_1.2099)
}

%region_1372.38266.clone (Arg_0.2166: f32[], Arg_1.2100: f32[]) -> f32[] {
  %Arg_0.2166 = f32[] parameter(0)
  %Arg_1.2100 = f32[] parameter(1)
  ROOT %add.2506 = f32[] add(%Arg_0.2166, %Arg_1.2100)
}

%region_1373.38273.clone (Arg_0.2167: f32[], Arg_1.2101: f32[]) -> f32[] {
  %Arg_0.2167 = f32[] parameter(0)
  %Arg_1.2101 = f32[] parameter(1)
  ROOT %add.2507 = f32[] add(%Arg_0.2167, %Arg_1.2101)
}

%region_1374.38280.clone (Arg_0.2168: f32[], Arg_1.2102: f32[]) -> f32[] {
  %Arg_0.2168 = f32[] parameter(0)
  %Arg_1.2102 = f32[] parameter(1)
  ROOT %add.2508 = f32[] add(%Arg_0.2168, %Arg_1.2102)
}

%region_1375.38287.clone (Arg_0.2169: f32[], Arg_1.2103: f32[]) -> f32[] {
  %Arg_0.2169 = f32[] parameter(0)
  %Arg_1.2103 = f32[] parameter(1)
  ROOT %add.2509 = f32[] add(%Arg_0.2169, %Arg_1.2103)
}

%region_1376.38294.clone (Arg_0.2170: f32[], Arg_1.2104: f32[]) -> f32[] {
  %Arg_0.2170 = f32[] parameter(0)
  %Arg_1.2104 = f32[] parameter(1)
  ROOT %add.2510 = f32[] add(%Arg_0.2170, %Arg_1.2104)
}

%region_1377.38301.clone (Arg_0.2171: f32[], Arg_1.2105: f32[]) -> f32[] {
  %Arg_0.2171 = f32[] parameter(0)
  %Arg_1.2105 = f32[] parameter(1)
  ROOT %add.2511 = f32[] add(%Arg_0.2171, %Arg_1.2105)
}

%region_1378.38308.clone (Arg_0.2172: f32[], Arg_1.2106: f32[]) -> f32[] {
  %Arg_0.2172 = f32[] parameter(0)
  %Arg_1.2106 = f32[] parameter(1)
  ROOT %add.2512 = f32[] add(%Arg_0.2172, %Arg_1.2106)
}

%region_1381.38329.clone (Arg_0.2173: f32[], Arg_1.2107: f32[]) -> f32[] {
  %Arg_0.2173 = f32[] parameter(0)
  %Arg_1.2107 = f32[] parameter(1)
  ROOT %add.2513 = f32[] add(%Arg_0.2173, %Arg_1.2107)
}

%region_1382.38336.clone (Arg_0.2174: f32[], Arg_1.2108: f32[]) -> f32[] {
  %Arg_0.2174 = f32[] parameter(0)
  %Arg_1.2108 = f32[] parameter(1)
  ROOT %add.2514 = f32[] add(%Arg_0.2174, %Arg_1.2108)
}

%region_1383.38343.clone (Arg_0.2175: f32[], Arg_1.2109: f32[]) -> f32[] {
  %Arg_0.2175 = f32[] parameter(0)
  %Arg_1.2109 = f32[] parameter(1)
  ROOT %add.2515 = f32[] add(%Arg_0.2175, %Arg_1.2109)
}

%region_1384.38350.clone (Arg_0.2176: f32[], Arg_1.2110: f32[]) -> f32[] {
  %Arg_0.2176 = f32[] parameter(0)
  %Arg_1.2110 = f32[] parameter(1)
  ROOT %add.2516 = f32[] add(%Arg_0.2176, %Arg_1.2110)
}

%region_1385.38357.clone (Arg_0.2178: f32[], Arg_1.2111: f32[]) -> f32[] {
  %Arg_0.2178 = f32[] parameter(0)
  %Arg_1.2111 = f32[] parameter(1)
  ROOT %add.2517 = f32[] add(%Arg_0.2178, %Arg_1.2111)
}

%region_1386.38364.clone (Arg_0.2179: f32[], Arg_1.2112: f32[]) -> f32[] {
  %Arg_0.2179 = f32[] parameter(0)
  %Arg_1.2112 = f32[] parameter(1)
  ROOT %add.2518 = f32[] add(%Arg_0.2179, %Arg_1.2112)
}

%region_1387.38371.clone (Arg_0.2180: f32[], Arg_1.2113: f32[]) -> f32[] {
  %Arg_0.2180 = f32[] parameter(0)
  %Arg_1.2113 = f32[] parameter(1)
  ROOT %add.2519 = f32[] add(%Arg_0.2180, %Arg_1.2113)
}

%region_1390.38392.clone (Arg_0.2181: f32[], Arg_1.2114: f32[]) -> f32[] {
  %Arg_0.2181 = f32[] parameter(0)
  %Arg_1.2114 = f32[] parameter(1)
  ROOT %add.2520 = f32[] add(%Arg_0.2181, %Arg_1.2114)
}

%region_1391.38399.clone (Arg_0.2182: f32[], Arg_1.2115: f32[]) -> f32[] {
  %Arg_0.2182 = f32[] parameter(0)
  %Arg_1.2115 = f32[] parameter(1)
  ROOT %add.2521 = f32[] add(%Arg_0.2182, %Arg_1.2115)
}

%region_1392.38406.clone (Arg_0.2183: f32[], Arg_1.2116: f32[]) -> f32[] {
  %Arg_0.2183 = f32[] parameter(0)
  %Arg_1.2116 = f32[] parameter(1)
  ROOT %add.2522 = f32[] add(%Arg_0.2183, %Arg_1.2116)
}

%region_1393.38413.clone (Arg_0.2184: f32[], Arg_1.2117: f32[]) -> f32[] {
  %Arg_0.2184 = f32[] parameter(0)
  %Arg_1.2117 = f32[] parameter(1)
  ROOT %add.2523 = f32[] add(%Arg_0.2184, %Arg_1.2117)
}

%region_1394.38420.clone (Arg_0.2185: f32[], Arg_1.2118: f32[]) -> f32[] {
  %Arg_0.2185 = f32[] parameter(0)
  %Arg_1.2118 = f32[] parameter(1)
  ROOT %add.2524 = f32[] add(%Arg_0.2185, %Arg_1.2118)
}

%region_1395.38427.clone (Arg_0.2186: f32[], Arg_1.2119: f32[]) -> f32[] {
  %Arg_0.2186 = f32[] parameter(0)
  %Arg_1.2119 = f32[] parameter(1)
  ROOT %add.2525 = f32[] add(%Arg_0.2186, %Arg_1.2119)
}

%region_1396.38434.clone (Arg_0.2187: f32[], Arg_1.2120: f32[]) -> f32[] {
  %Arg_0.2187 = f32[] parameter(0)
  %Arg_1.2120 = f32[] parameter(1)
  ROOT %add.2526 = f32[] add(%Arg_0.2187, %Arg_1.2120)
}

%region_1399.38455.clone (Arg_0.2188: f32[], Arg_1.2121: f32[]) -> f32[] {
  %Arg_0.2188 = f32[] parameter(0)
  %Arg_1.2121 = f32[] parameter(1)
  ROOT %add.2527 = f32[] add(%Arg_0.2188, %Arg_1.2121)
}

%region_1400.38462.clone (Arg_0.2189: f32[], Arg_1.2122: f32[]) -> f32[] {
  %Arg_0.2189 = f32[] parameter(0)
  %Arg_1.2122 = f32[] parameter(1)
  ROOT %add.2528 = f32[] add(%Arg_0.2189, %Arg_1.2122)
}

%region_1401.38469.clone (Arg_0.2190: f32[], Arg_1.2123: f32[]) -> f32[] {
  %Arg_0.2190 = f32[] parameter(0)
  %Arg_1.2123 = f32[] parameter(1)
  ROOT %add.2529 = f32[] add(%Arg_0.2190, %Arg_1.2123)
}

%region_1402.38476.clone (Arg_0.2191: f32[], Arg_1.2124: f32[]) -> f32[] {
  %Arg_0.2191 = f32[] parameter(0)
  %Arg_1.2124 = f32[] parameter(1)
  ROOT %add.2530 = f32[] add(%Arg_0.2191, %Arg_1.2124)
}

%region_1403.38483.clone (Arg_0.2192: f32[], Arg_1.2125: f32[]) -> f32[] {
  %Arg_0.2192 = f32[] parameter(0)
  %Arg_1.2125 = f32[] parameter(1)
  ROOT %add.2531 = f32[] add(%Arg_0.2192, %Arg_1.2125)
}

%region_1404.38490.clone (Arg_0.2193: f32[], Arg_1.2126: f32[]) -> f32[] {
  %Arg_0.2193 = f32[] parameter(0)
  %Arg_1.2126 = f32[] parameter(1)
  ROOT %add.2532 = f32[] add(%Arg_0.2193, %Arg_1.2126)
}

%region_1405.38497.clone (Arg_0.2194: f32[], Arg_1.2127: f32[]) -> f32[] {
  %Arg_0.2194 = f32[] parameter(0)
  %Arg_1.2127 = f32[] parameter(1)
  ROOT %add.2533 = f32[] add(%Arg_0.2194, %Arg_1.2127)
}

%region_1408.38518.clone (Arg_0.2195: f32[], Arg_1.2128: f32[]) -> f32[] {
  %Arg_0.2195 = f32[] parameter(0)
  %Arg_1.2128 = f32[] parameter(1)
  ROOT %add.2534 = f32[] add(%Arg_0.2195, %Arg_1.2128)
}

%region_1409.38525.clone (Arg_0.2196: f32[], Arg_1.2129: f32[]) -> f32[] {
  %Arg_0.2196 = f32[] parameter(0)
  %Arg_1.2129 = f32[] parameter(1)
  ROOT %add.2535 = f32[] add(%Arg_0.2196, %Arg_1.2129)
}

%region_1410.38532.clone (Arg_0.2197: f32[], Arg_1.2130: f32[]) -> f32[] {
  %Arg_0.2197 = f32[] parameter(0)
  %Arg_1.2130 = f32[] parameter(1)
  ROOT %add.2536 = f32[] add(%Arg_0.2197, %Arg_1.2130)
}

%region_1411.38539.clone (Arg_0.2198: f32[], Arg_1.2131: f32[]) -> f32[] {
  %Arg_0.2198 = f32[] parameter(0)
  %Arg_1.2131 = f32[] parameter(1)
  ROOT %add.2537 = f32[] add(%Arg_0.2198, %Arg_1.2131)
}

%region_1412.38546.clone (Arg_0.2199: f32[], Arg_1.2132: f32[]) -> f32[] {
  %Arg_0.2199 = f32[] parameter(0)
  %Arg_1.2132 = f32[] parameter(1)
  ROOT %add.2538 = f32[] add(%Arg_0.2199, %Arg_1.2132)
}

%region_1413.38553.clone (Arg_0.2200: f32[], Arg_1.2133: f32[]) -> f32[] {
  %Arg_0.2200 = f32[] parameter(0)
  %Arg_1.2133 = f32[] parameter(1)
  ROOT %add.2539 = f32[] add(%Arg_0.2200, %Arg_1.2133)
}

%region_1414.38560.clone (Arg_0.2201: f32[], Arg_1.2134: f32[]) -> f32[] {
  %Arg_0.2201 = f32[] parameter(0)
  %Arg_1.2134 = f32[] parameter(1)
  ROOT %add.2540 = f32[] add(%Arg_0.2201, %Arg_1.2134)
}

%region_1417.38581.clone (Arg_0.2202: f32[], Arg_1.2135: f32[]) -> f32[] {
  %Arg_0.2202 = f32[] parameter(0)
  %Arg_1.2135 = f32[] parameter(1)
  ROOT %add.2541 = f32[] add(%Arg_0.2202, %Arg_1.2135)
}

%region_1418.38588.clone (Arg_0.2203: f32[], Arg_1.2136: f32[]) -> f32[] {
  %Arg_0.2203 = f32[] parameter(0)
  %Arg_1.2136 = f32[] parameter(1)
  ROOT %add.2542 = f32[] add(%Arg_0.2203, %Arg_1.2136)
}

%region_1419.38595.clone (Arg_0.2204: f32[], Arg_1.2137: f32[]) -> f32[] {
  %Arg_0.2204 = f32[] parameter(0)
  %Arg_1.2137 = f32[] parameter(1)
  ROOT %add.2543 = f32[] add(%Arg_0.2204, %Arg_1.2137)
}

%region_1420.38602.clone (Arg_0.2205: f32[], Arg_1.2138: f32[]) -> f32[] {
  %Arg_0.2205 = f32[] parameter(0)
  %Arg_1.2138 = f32[] parameter(1)
  ROOT %add.2544 = f32[] add(%Arg_0.2205, %Arg_1.2138)
}

%region_1421.38609.clone (Arg_0.2206: f32[], Arg_1.2139: f32[]) -> f32[] {
  %Arg_0.2206 = f32[] parameter(0)
  %Arg_1.2139 = f32[] parameter(1)
  ROOT %add.2545 = f32[] add(%Arg_0.2206, %Arg_1.2139)
}

%region_1422.38616.clone (Arg_0.2207: f32[], Arg_1.2140: f32[]) -> f32[] {
  %Arg_0.2207 = f32[] parameter(0)
  %Arg_1.2140 = f32[] parameter(1)
  ROOT %add.2546 = f32[] add(%Arg_0.2207, %Arg_1.2140)
}

%region_1423.38623.clone (Arg_0.2208: f32[], Arg_1.2141: f32[]) -> f32[] {
  %Arg_0.2208 = f32[] parameter(0)
  %Arg_1.2141 = f32[] parameter(1)
  ROOT %add.2547 = f32[] add(%Arg_0.2208, %Arg_1.2141)
}

%region_1426.38644.clone (Arg_0.2209: f32[], Arg_1.2142: f32[]) -> f32[] {
  %Arg_0.2209 = f32[] parameter(0)
  %Arg_1.2142 = f32[] parameter(1)
  ROOT %add.2548 = f32[] add(%Arg_0.2209, %Arg_1.2142)
}

%region_1427.38651.clone (Arg_0.2210: f32[], Arg_1.2143: f32[]) -> f32[] {
  %Arg_0.2210 = f32[] parameter(0)
  %Arg_1.2143 = f32[] parameter(1)
  ROOT %add.2549 = f32[] add(%Arg_0.2210, %Arg_1.2143)
}

%region_1428.38658.clone (Arg_0.2211: f32[], Arg_1.2144: f32[]) -> f32[] {
  %Arg_0.2211 = f32[] parameter(0)
  %Arg_1.2144 = f32[] parameter(1)
  ROOT %add.2550 = f32[] add(%Arg_0.2211, %Arg_1.2144)
}

%region_1429.38665.clone (Arg_0.2212: f32[], Arg_1.2145: f32[]) -> f32[] {
  %Arg_0.2212 = f32[] parameter(0)
  %Arg_1.2145 = f32[] parameter(1)
  ROOT %add.2551 = f32[] add(%Arg_0.2212, %Arg_1.2145)
}

%region_1430.38672.clone (Arg_0.2213: f32[], Arg_1.2146: f32[]) -> f32[] {
  %Arg_0.2213 = f32[] parameter(0)
  %Arg_1.2146 = f32[] parameter(1)
  ROOT %add.2552 = f32[] add(%Arg_0.2213, %Arg_1.2146)
}

%region_1431.38679.clone (Arg_0.2214: f32[], Arg_1.2148: f32[]) -> f32[] {
  %Arg_0.2214 = f32[] parameter(0)
  %Arg_1.2148 = f32[] parameter(1)
  ROOT %add.2553 = f32[] add(%Arg_0.2214, %Arg_1.2148)
}

%region_1432.38686.clone (Arg_0.2216: f32[], Arg_1.2149: f32[]) -> f32[] {
  %Arg_0.2216 = f32[] parameter(0)
  %Arg_1.2149 = f32[] parameter(1)
  ROOT %add.2554 = f32[] add(%Arg_0.2216, %Arg_1.2149)
}

%region_1435.38707.clone (Arg_0.2217: f32[], Arg_1.2150: f32[]) -> f32[] {
  %Arg_0.2217 = f32[] parameter(0)
  %Arg_1.2150 = f32[] parameter(1)
  ROOT %add.2555 = f32[] add(%Arg_0.2217, %Arg_1.2150)
}

%region_1436.38714.clone (Arg_0.2218: f32[], Arg_1.2151: f32[]) -> f32[] {
  %Arg_0.2218 = f32[] parameter(0)
  %Arg_1.2151 = f32[] parameter(1)
  ROOT %add.2556 = f32[] add(%Arg_0.2218, %Arg_1.2151)
}

%region_1437.38721.clone (Arg_0.2219: f32[], Arg_1.2152: f32[]) -> f32[] {
  %Arg_0.2219 = f32[] parameter(0)
  %Arg_1.2152 = f32[] parameter(1)
  ROOT %add.2557 = f32[] add(%Arg_0.2219, %Arg_1.2152)
}

%region_1438.38728.clone (Arg_0.2220: f32[], Arg_1.2153: f32[]) -> f32[] {
  %Arg_0.2220 = f32[] parameter(0)
  %Arg_1.2153 = f32[] parameter(1)
  ROOT %add.2558 = f32[] add(%Arg_0.2220, %Arg_1.2153)
}

%region_1439.38735.clone (Arg_0.2221: f32[], Arg_1.2154: f32[]) -> f32[] {
  %Arg_0.2221 = f32[] parameter(0)
  %Arg_1.2154 = f32[] parameter(1)
  ROOT %add.2559 = f32[] add(%Arg_0.2221, %Arg_1.2154)
}

%region_1440.38742.clone (Arg_0.2222: f32[], Arg_1.2156: f32[]) -> f32[] {
  %Arg_0.2222 = f32[] parameter(0)
  %Arg_1.2156 = f32[] parameter(1)
  ROOT %add.2560 = f32[] add(%Arg_0.2222, %Arg_1.2156)
}

%region_1441.38749.clone (Arg_0.2223: f32[], Arg_1.2157: f32[]) -> f32[] {
  %Arg_0.2223 = f32[] parameter(0)
  %Arg_1.2157 = f32[] parameter(1)
  ROOT %add.2561 = f32[] add(%Arg_0.2223, %Arg_1.2157)
}

%region_1444.38770.clone (Arg_0.2224: f32[], Arg_1.2158: f32[]) -> f32[] {
  %Arg_0.2224 = f32[] parameter(0)
  %Arg_1.2158 = f32[] parameter(1)
  ROOT %add.2562 = f32[] add(%Arg_0.2224, %Arg_1.2158)
}

%region_1445.38777.clone (Arg_0.2225: f32[], Arg_1.2159: f32[]) -> f32[] {
  %Arg_0.2225 = f32[] parameter(0)
  %Arg_1.2159 = f32[] parameter(1)
  ROOT %add.2564 = f32[] add(%Arg_0.2225, %Arg_1.2159)
}

%region_1446.38784.clone (Arg_0.2226: f32[], Arg_1.2161: f32[]) -> f32[] {
  %Arg_0.2226 = f32[] parameter(0)
  %Arg_1.2161 = f32[] parameter(1)
  ROOT %add.2565 = f32[] add(%Arg_0.2226, %Arg_1.2161)
}

%region_1447.38791.clone (Arg_0.2227: f32[], Arg_1.2162: f32[]) -> f32[] {
  %Arg_0.2227 = f32[] parameter(0)
  %Arg_1.2162 = f32[] parameter(1)
  ROOT %add.2566 = f32[] add(%Arg_0.2227, %Arg_1.2162)
}

%region_1448.38798.clone (Arg_0.2228: f32[], Arg_1.2163: f32[]) -> f32[] {
  %Arg_0.2228 = f32[] parameter(0)
  %Arg_1.2163 = f32[] parameter(1)
  ROOT %add.2567 = f32[] add(%Arg_0.2228, %Arg_1.2163)
}

%region_1449.38805.clone (Arg_0.2229: f32[], Arg_1.2164: f32[]) -> f32[] {
  %Arg_0.2229 = f32[] parameter(0)
  %Arg_1.2164 = f32[] parameter(1)
  ROOT %add.2568 = f32[] add(%Arg_0.2229, %Arg_1.2164)
}

%region_1450.38812.clone (Arg_0.2230: f32[], Arg_1.2165: f32[]) -> f32[] {
  %Arg_0.2230 = f32[] parameter(0)
  %Arg_1.2165 = f32[] parameter(1)
  ROOT %add.2569 = f32[] add(%Arg_0.2230, %Arg_1.2165)
}

%region_1453.38833.clone (Arg_0.2231: f32[], Arg_1.2166: f32[]) -> f32[] {
  %Arg_0.2231 = f32[] parameter(0)
  %Arg_1.2166 = f32[] parameter(1)
  ROOT %add.2570 = f32[] add(%Arg_0.2231, %Arg_1.2166)
}

%region_1454.38840.clone (Arg_0.2232: f32[], Arg_1.2167: f32[]) -> f32[] {
  %Arg_0.2232 = f32[] parameter(0)
  %Arg_1.2167 = f32[] parameter(1)
  ROOT %add.2571 = f32[] add(%Arg_0.2232, %Arg_1.2167)
}

%region_1455.38847.clone (Arg_0.2233: f32[], Arg_1.2168: f32[]) -> f32[] {
  %Arg_0.2233 = f32[] parameter(0)
  %Arg_1.2168 = f32[] parameter(1)
  ROOT %add.2572 = f32[] add(%Arg_0.2233, %Arg_1.2168)
}

%region_1456.38854.clone (Arg_0.2234: f32[], Arg_1.2169: f32[]) -> f32[] {
  %Arg_0.2234 = f32[] parameter(0)
  %Arg_1.2169 = f32[] parameter(1)
  ROOT %add.2573 = f32[] add(%Arg_0.2234, %Arg_1.2169)
}

%region_1457.38861.clone (Arg_0.2235: f32[], Arg_1.2170: f32[]) -> f32[] {
  %Arg_0.2235 = f32[] parameter(0)
  %Arg_1.2170 = f32[] parameter(1)
  ROOT %add.2574 = f32[] add(%Arg_0.2235, %Arg_1.2170)
}

%region_1458.38868.clone (Arg_0.2236: f32[], Arg_1.2171: f32[]) -> f32[] {
  %Arg_0.2236 = f32[] parameter(0)
  %Arg_1.2171 = f32[] parameter(1)
  ROOT %add.2575 = f32[] add(%Arg_0.2236, %Arg_1.2171)
}

ENTRY %main.41792_spmd (param: s32[], param.1: f32[4096], param.13: f32[256,14336], param.14: f32[256,14336], param.15: f32[14336,256], param.12: f32[4096], param.5: f32[4096], param.8: f32[256,8,128], param.11: f32[32,128,256], param.6: f32[256,32,128], param.9: f32[256,8,128], param.22: f32[256,14336], param.23: f32[256,14336], param.24: f32[14336,256], param.21: f32[4096], param.16: f32[4096], param.18: f32[256,8,128], param.20: f32[32,128,256], param.17: f32[256,32,128], param.19: f32[256,8,128], param.103: f32[256,14336], param.104: f32[256,14336], param.105: f32[14336,256], param.102: f32[4096], param.97: f32[4096], param.99: f32[256,8,128], param.101: f32[32,128,256], param.98: f32[256,32,128], param.100: f32[256,8,128], param.112: f32[256,14336], param.113: f32[256,14336], param.114: f32[14336,256], param.111: f32[4096], param.106: f32[4096], param.108: f32[256,8,128], param.110: f32[32,128,256], param.107: f32[256,32,128], param.109: f32[256,8,128], param.121: f32[256,14336], param.122: f32[256,14336], param.123: f32[14336,256], param.120: f32[4096], param.115: f32[4096], param.117: f32[256,8,128], param.119: f32[32,128,256], param.116: f32[256,32,128], param.118: f32[256,8,128], param.130: f32[256,14336], param.131: f32[256,14336], param.132: f32[14336,256], param.129: f32[4096], param.124: f32[4096], param.126: f32[256,8,128], param.128: f32[32,128,256], param.125: f32[256,32,128], param.127: f32[256,8,128], param.139: f32[256,14336], param.140: f32[256,14336], param.141: f32[14336,256], param.138: f32[4096], param.133: f32[4096], param.135: f32[256,8,128], param.137: f32[32,128,256], param.134: f32[256,32,128], param.136: f32[256,8,128], param.148: f32[256,14336], param.149: f32[256,14336], param.150: f32[14336,256], param.147: f32[4096], param.142: f32[4096], param.144: f32[256,8,128], param.146: f32[32,128,256], param.143: f32[256,32,128], param.145: f32[256,8,128], param.157: f32[256,14336], param.158: f32[256,14336], param.159: f32[14336,256], param.156: f32[4096], param.151: f32[4096], param.153: f32[256,8,128], param.155: f32[32,128,256], param.152: f32[256,32,128], param.154: f32[256,8,128], param.166: f32[256,14336], param.167: f32[256,14336], param.168: f32[14336,256], param.165: f32[4096], param.160: f32[4096], param.162: f32[256,8,128], param.164: f32[32,128,256], param.161: f32[256,32,128], param.163: f32[256,8,128], param.175: f32[256,14336], param.176: f32[256,14336], param.177: f32[14336,256], param.174: f32[4096], param.169: f32[4096], param.171: f32[256,8,128], param.173: f32[32,128,256], param.170: f32[256,32,128], param.172: f32[256,8,128], param.184: f32[256,14336], param.185: f32[256,14336], param.186: f32[14336,256], param.183: f32[4096], param.178: f32[4096], param.180: f32[256,8,128], param.182: f32[32,128,256], param.179: f32[256,32,128], param.181: f32[256,8,128], param.31: f32[256,14336], param.32: f32[256,14336], param.33: f32[14336,256], param.30: f32[4096], param.25: f32[4096], param.27: f32[256,8,128], param.29: f32[32,128,256], param.26: f32[256,32,128], param.28: f32[256,8,128], param.193: f32[256,14336], param.194: f32[256,14336], param.195: f32[14336,256], param.192: f32[4096], param.187: f32[4096], param.189: f32[256,8,128], param.191: f32[32,128,256], param.188: f32[256,32,128], param.190: f32[256,8,128], param.202: f32[256,14336], param.203: f32[256,14336], param.204: f32[14336,256], param.201: f32[4096], param.196: f32[4096], param.198: f32[256,8,128], param.200: f32[32,128,256], param.197: f32[256,32,128], param.199: f32[256,8,128], param.211: f32[256,14336], param.212: f32[256,14336], param.213: f32[14336,256], param.210: f32[4096], param.205: f32[4096], param.207: f32[256,8,128], param.209: f32[32,128,256], param.206: f32[256,32,128], param.208: f32[256,8,128], param.220: f32[256,14336], param.221: f32[256,14336], param.222: f32[14336,256], param.219: f32[4096], param.214: f32[4096], param.216: f32[256,8,128], param.218: f32[32,128,256], param.215: f32[256,32,128], param.217: f32[256,8,128], param.229: f32[256,14336], param.230: f32[256,14336], param.231: f32[14336,256], param.228: f32[4096], param.223: f32[4096], param.225: f32[256,8,128], param.227: f32[32,128,256], param.224: f32[256,32,128], param.226: f32[256,8,128], param.238: f32[256,14336], param.239: f32[256,14336], param.240: f32[14336,256], param.237: f32[4096], param.232: f32[4096], param.234: f32[256,8,128], param.236: f32[32,128,256], param.233: f32[256,32,128], param.235: f32[256,8,128], param.247: f32[256,14336], param.248: f32[256,14336], param.249: f32[14336,256], param.246: f32[4096], param.241: f32[4096], param.243: f32[256,8,128], param.245: f32[32,128,256], param.242: f32[256,32,128], param.244: f32[256,8,128], param.256: f32[256,14336], param.257: f32[256,14336], param.258: f32[14336,256], param.255: f32[4096], param.250: f32[4096], param.252: f32[256,8,128], param.254: f32[32,128,256], param.251: f32[256,32,128], param.253: f32[256,8,128], param.265: f32[256,14336], param.266: f32[256,14336], param.267: f32[14336,256], param.264: f32[4096], param.259: f32[4096], param.261: f32[256,8,128], param.263: f32[32,128,256], param.260: f32[256,32,128], param.262: f32[256,8,128], param.274: f32[256,14336], param.275: f32[256,14336], param.276: f32[14336,256], param.273: f32[4096], param.268: f32[4096], param.270: f32[256,8,128], param.272: f32[32,128,256], param.269: f32[256,32,128], param.271: f32[256,8,128], param.40: f32[256,14336], param.41: f32[256,14336], param.42: f32[14336,256], param.39: f32[4096], param.34: f32[4096], param.36: f32[256,8,128], param.38: f32[32,128,256], param.35: f32[256,32,128], param.37: f32[256,8,128], param.283: f32[256,14336], param.284: f32[256,14336], param.285: f32[14336,256], param.282: f32[4096], param.277: f32[4096], param.279: f32[256,8,128], param.281: f32[32,128,256], param.278: f32[256,32,128], param.280: f32[256,8,128], param.292: f32[256,14336], param.293: f32[256,14336], param.294: f32[14336,256], param.291: f32[4096], param.286: f32[4096], param.288: f32[256,8,128], param.290: f32[32,128,256], param.287: f32[256,32,128], param.289: f32[256,8,128], param.49: f32[256,14336], param.50: f32[256,14336], param.51: f32[14336,256], param.48: f32[4096], param.43: f32[4096], param.45: f32[256,8,128], param.47: f32[32,128,256], param.44: f32[256,32,128], param.46: f32[256,8,128], param.58: f32[256,14336], param.59: f32[256,14336], param.60: f32[14336,256], param.57: f32[4096], param.52: f32[4096], param.54: f32[256,8,128], param.56: f32[32,128,256], param.53: f32[256,32,128], param.55: f32[256,8,128], param.67: f32[256,14336], param.68: f32[256,14336], param.69: f32[14336,256], param.66: f32[4096], param.61: f32[4096], param.63: f32[256,8,128], param.65: f32[32,128,256], param.62: f32[256,32,128], param.64: f32[256,8,128], param.76: f32[256,14336], param.77: f32[256,14336], param.78: f32[14336,256], param.75: f32[4096], param.70: f32[4096], param.72: f32[256,8,128], param.74: f32[32,128,256], param.71: f32[256,32,128], param.73: f32[256,8,128], param.85: f32[256,14336], param.86: f32[256,14336], param.87: f32[14336,256], param.84: f32[4096], param.79: f32[4096], param.81: f32[256,8,128], param.83: f32[32,128,256], param.80: f32[256,32,128], param.82: f32[256,8,128], param.94: f32[256,14336], param.95: f32[256,14336], param.96: f32[14336,256], param.93: f32[4096], param.88: f32[4096], param.90: f32[256,8,128], param.92: f32[32,128,256], param.89: f32[256,32,128], param.91: f32[256,8,128], param.296: f32[256,128256], param.4: f32[128256,256], param.299: s32[], param.298: f32[4096], param.301: f32[256,14336], param.303: f32[256,14336], param.305: f32[14336,256], param.307: f32[4096], param.309: f32[4096], param.311: f32[256,8,128], param.313: f32[32,128,256], param.315: f32[256,32,128], param.317: f32[256,8,128], param.319: f32[256,14336], param.321: f32[256,14336], param.323: f32[14336,256], param.325: f32[4096], param.327: f32[4096], param.329: f32[256,8,128], param.331: f32[32,128,256], param.333: f32[256,32,128], param.335: f32[256,8,128], param.337: f32[256,14336], param.339: f32[256,14336], param.341: f32[14336,256], param.343: f32[4096], param.345: f32[4096], param.347: f32[256,8,128], param.349: f32[32,128,256], param.351: f32[256,32,128], param.353: f32[256,8,128], param.355: f32[256,14336], param.357: f32[256,14336], param.359: f32[14336,256], param.361: f32[4096], param.363: f32[4096], param.365: f32[256,8,128], param.367: f32[32,128,256], param.369: f32[256,32,128], param.371: f32[256,8,128], param.373: f32[256,14336], param.375: f32[256,14336], param.377: f32[14336,256], param.379: f32[4096], param.381: f32[4096], param.383: f32[256,8,128], param.385: f32[32,128,256], param.387: f32[256,32,128], param.389: f32[256,8,128], param.391: f32[256,14336], param.393: f32[256,14336], param.395: f32[14336,256], param.397: f32[4096], param.399: f32[4096], param.401: f32[256,8,128], param.403: f32[32,128,256], param.405: f32[256,32,128], param.407: f32[256,8,128], param.409: f32[256,14336], param.411: f32[256,14336], param.413: f32[14336,256], param.415: f32[4096], param.417: f32[4096], param.419: f32[256,8,128], param.421: f32[32,128,256], param.423: f32[256,32,128], param.425: f32[256,8,128], param.427: f32[256,14336], param.429: f32[256,14336], param.431: f32[14336,256], param.433: f32[4096], param.435: f32[4096], param.437: f32[256,8,128], param.439: f32[32,128,256], param.441: f32[256,32,128], param.443: f32[256,8,128], param.445: f32[256,14336], param.447: f32[256,14336], param.449: f32[14336,256], param.451: f32[4096], param.453: f32[4096], param.455: f32[256,8,128], param.457: f32[32,128,256], param.459: f32[256,32,128], param.461: f32[256,8,128], param.463: f32[256,14336], param.465: f32[256,14336], param.467: f32[14336,256], param.469: f32[4096], param.471: f32[4096], param.473: f32[256,8,128], param.475: f32[32,128,256], param.477: f32[256,32,128], param.479: f32[256,8,128], param.481: f32[256,14336], param.483: f32[256,14336], param.485: f32[14336,256], param.487: f32[4096], param.489: f32[4096], param.491: f32[256,8,128], param.493: f32[32,128,256], param.495: f32[256,32,128], param.497: f32[256,8,128], param.499: f32[256,14336], param.501: f32[256,14336], param.503: f32[14336,256], param.505: f32[4096], param.507: f32[4096], param.509: f32[256,8,128], param.511: f32[32,128,256], param.513: f32[256,32,128], param.515: f32[256,8,128], param.517: f32[256,14336], param.519: f32[256,14336], param.521: f32[14336,256], param.523: f32[4096], param.525: f32[4096], param.527: f32[256,8,128], param.529: f32[32,128,256], param.531: f32[256,32,128], param.533: f32[256,8,128], param.535: f32[256,14336], param.537: f32[256,14336], param.539: f32[14336,256], param.541: f32[4096], param.543: f32[4096], param.545: f32[256,8,128], param.547: f32[32,128,256], param.549: f32[256,32,128], param.551: f32[256,8,128], param.553: f32[256,14336], param.555: f32[256,14336], param.557: f32[14336,256], param.559: f32[4096], param.561: f32[4096], param.563: f32[256,8,128], param.565: f32[32,128,256], param.567: f32[256,32,128], param.569: f32[256,8,128], param.571: f32[256,14336], param.573: f32[256,14336], param.575: f32[14336,256], param.577: f32[4096], param.579: f32[4096], param.581: f32[256,8,128], param.583: f32[32,128,256], param.585: f32[256,32,128], param.587: f32[256,8,128], param.589: f32[256,14336], param.591: f32[256,14336], param.593: f32[14336,256], param.595: f32[4096], param.597: f32[4096], param.599: f32[256,8,128], param.601: f32[32,128,256], param.603: f32[256,32,128], param.605: f32[256,8,128], param.607: f32[256,14336], param.609: f32[256,14336], param.611: f32[14336,256], param.613: f32[4096], param.615: f32[4096], param.617: f32[256,8,128], param.619: f32[32,128,256], param.621: f32[256,32,128], param.623: f32[256,8,128], param.625: f32[256,14336], param.627: f32[256,14336], param.629: f32[14336,256], param.631: f32[4096], param.633: f32[4096], param.635: f32[256,8,128], param.637: f32[32,128,256], param.639: f32[256,32,128], param.641: f32[256,8,128], param.643: f32[256,14336], param.645: f32[256,14336], param.647: f32[14336,256], param.649: f32[4096], param.651: f32[4096], param.653: f32[256,8,128], param.655: f32[32,128,256], param.657: f32[256,32,128], param.659: f32[256,8,128], param.661: f32[256,14336], param.663: f32[256,14336], param.665: f32[14336,256], param.667: f32[4096], param.669: f32[4096], param.671: f32[256,8,128], param.673: f32[32,128,256], param.675: f32[256,32,128], param.677: f32[256,8,128], param.679: f32[256,14336], param.681: f32[256,14336], param.683: f32[14336,256], param.685: f32[4096], param.687: f32[4096], param.689: f32[256,8,128], param.691: f32[32,128,256], param.693: f32[256,32,128], param.695: f32[256,8,128], param.697: f32[256,14336], param.699: f32[256,14336], param.701: f32[14336,256], param.703: f32[4096], param.705: f32[4096], param.707: f32[256,8,128], param.709: f32[32,128,256], param.711: f32[256,32,128], param.713: f32[256,8,128], param.715: f32[256,14336], param.717: f32[256,14336], param.719: f32[14336,256], param.721: f32[4096], param.723: f32[4096], param.725: f32[256,8,128], param.727: f32[32,128,256], param.729: f32[256,32,128], param.731: f32[256,8,128], param.733: f32[256,14336], param.735: f32[256,14336], param.737: f32[14336,256], param.739: f32[4096], param.741: f32[4096], param.743: f32[256,8,128], param.745: f32[32,128,256], param.747: f32[256,32,128], param.749: f32[256,8,128], param.751: f32[256,14336], param.753: f32[256,14336], param.755: f32[14336,256], param.757: f32[4096], param.759: f32[4096], param.761: f32[256,8,128], param.763: f32[32,128,256], param.765: f32[256,32,128], param.767: f32[256,8,128], param.769: f32[256,14336], param.771: f32[256,14336], param.773: f32[14336,256], param.775: f32[4096], param.777: f32[4096], param.779: f32[256,8,128], param.781: f32[32,128,256], param.783: f32[256,32,128], param.785: f32[256,8,128], param.787: f32[256,14336], param.789: f32[256,14336], param.791: f32[14336,256], param.793: f32[4096], param.795: f32[4096], param.797: f32[256,8,128], param.799: f32[32,128,256], param.801: f32[256,32,128], param.803: f32[256,8,128], param.805: f32[256,14336], param.807: f32[256,14336], param.809: f32[14336,256], param.811: f32[4096], param.813: f32[4096], param.815: f32[256,8,128], param.817: f32[32,128,256], param.819: f32[256,32,128], param.821: f32[256,8,128], param.823: f32[256,14336], param.825: f32[256,14336], param.827: f32[14336,256], param.829: f32[4096], param.831: f32[4096], param.833: f32[256,8,128], param.835: f32[32,128,256], param.837: f32[256,32,128], param.839: f32[256,8,128], param.841: f32[256,14336], param.843: f32[256,14336], param.845: f32[14336,256], param.847: f32[4096], param.849: f32[4096], param.851: f32[256,8,128], param.853: f32[32,128,256], param.855: f32[256,32,128], param.857: f32[256,8,128], param.859: f32[256,14336], param.861: f32[256,14336], param.863: f32[14336,256], param.865: f32[4096], param.867: f32[4096], param.869: f32[256,8,128], param.871: f32[32,128,256], param.873: f32[256,32,128], param.875: f32[256,8,128], param.877: f32[256,128256], param.879: f32[128256,256], param.300: f32[4096], param.302: f32[256,14336], param.304: f32[256,14336], param.306: f32[14336,256], param.308: f32[4096], param.310: f32[4096], param.312: f32[256,8,128], param.314: f32[32,128,256], param.316: f32[256,32,128], param.318: f32[256,8,128], param.320: f32[256,14336], param.322: f32[256,14336], param.324: f32[14336,256], param.326: f32[4096], param.328: f32[4096], param.330: f32[256,8,128], param.332: f32[32,128,256], param.334: f32[256,32,128], param.336: f32[256,8,128], param.338: f32[256,14336], param.340: f32[256,14336], param.342: f32[14336,256], param.344: f32[4096], param.346: f32[4096], param.348: f32[256,8,128], param.350: f32[32,128,256], param.352: f32[256,32,128], param.354: f32[256,8,128], param.356: f32[256,14336], param.358: f32[256,14336], param.360: f32[14336,256], param.362: f32[4096], param.364: f32[4096], param.366: f32[256,8,128], param.368: f32[32,128,256], param.370: f32[256,32,128], param.372: f32[256,8,128], param.374: f32[256,14336], param.376: f32[256,14336], param.378: f32[14336,256], param.380: f32[4096], param.382: f32[4096], param.384: f32[256,8,128], param.386: f32[32,128,256], param.388: f32[256,32,128], param.390: f32[256,8,128], param.392: f32[256,14336], param.394: f32[256,14336], param.396: f32[14336,256], param.398: f32[4096], param.400: f32[4096], param.402: f32[256,8,128], param.404: f32[32,128,256], param.406: f32[256,32,128], param.408: f32[256,8,128], param.410: f32[256,14336], param.412: f32[256,14336], param.414: f32[14336,256], param.416: f32[4096], param.418: f32[4096], param.420: f32[256,8,128], param.422: f32[32,128,256], param.424: f32[256,32,128], param.426: f32[256,8,128], param.428: f32[256,14336], param.430: f32[256,14336], param.432: f32[14336,256], param.434: f32[4096], param.436: f32[4096], param.438: f32[256,8,128], param.440: f32[32,128,256], param.442: f32[256,32,128], param.444: f32[256,8,128], param.446: f32[256,14336], param.448: f32[256,14336], param.450: f32[14336,256], param.452: f32[4096], param.454: f32[4096], param.456: f32[256,8,128], param.458: f32[32,128,256], param.460: f32[256,32,128], param.462: f32[256,8,128], param.464: f32[256,14336], param.466: f32[256,14336], param.468: f32[14336,256], param.470: f32[4096], param.472: f32[4096], param.474: f32[256,8,128], param.476: f32[32,128,256], param.478: f32[256,32,128], param.480: f32[256,8,128], param.482: f32[256,14336], param.484: f32[256,14336], param.486: f32[14336,256], param.488: f32[4096], param.490: f32[4096], param.492: f32[256,8,128], param.494: f32[32,128,256], param.496: f32[256,32,128], param.498: f32[256,8,128], param.500: f32[256,14336], param.502: f32[256,14336], param.504: f32[14336,256], param.506: f32[4096], param.508: f32[4096], param.510: f32[256,8,128], param.512: f32[32,128,256], param.514: f32[256,32,128], param.516: f32[256,8,128], param.518: f32[256,14336], param.520: f32[256,14336], param.522: f32[14336,256], param.524: f32[4096], param.526: f32[4096], param.528: f32[256,8,128], param.530: f32[32,128,256], param.532: f32[256,32,128], param.534: f32[256,8,128], param.536: f32[256,14336], param.538: f32[256,14336], param.540: f32[14336,256], param.542: f32[4096], param.544: f32[4096], param.546: f32[256,8,128], param.548: f32[32,128,256], param.550: f32[256,32,128], param.552: f32[256,8,128], param.554: f32[256,14336], param.556: f32[256,14336], param.558: f32[14336,256], param.560: f32[4096], param.562: f32[4096], param.564: f32[256,8,128], param.566: f32[32,128,256], param.568: f32[256,32,128], param.570: f32[256,8,128], param.572: f32[256,14336], param.574: f32[256,14336], param.576: f32[14336,256], param.578: f32[4096], param.580: f32[4096], param.582: f32[256,8,128], param.584: f32[32,128,256], param.586: f32[256,32,128], param.588: f32[256,8,128], param.590: f32[256,14336], param.592: f32[256,14336], param.594: f32[14336,256], param.596: f32[4096], param.598: f32[4096], param.600: f32[256,8,128], param.602: f32[32,128,256], param.604: f32[256,32,128], param.606: f32[256,8,128], param.608: f32[256,14336], param.610: f32[256,14336], param.612: f32[14336,256], param.614: f32[4096], param.616: f32[4096], param.618: f32[256,8,128], param.620: f32[32,128,256], param.622: f32[256,32,128], param.624: f32[256,8,128], param.626: f32[256,14336], param.628: f32[256,14336], param.630: f32[14336,256], param.632: f32[4096], param.634: f32[4096], param.636: f32[256,8,128], param.638: f32[32,128,256], param.640: f32[256,32,128], param.642: f32[256,8,128], param.644: f32[256,14336], param.646: f32[256,14336], param.648: f32[14336,256], param.650: f32[4096], param.652: f32[4096], param.654: f32[256,8,128], param.656: f32[32,128,256], param.658: f32[256,32,128], param.660: f32[256,8,128], param.662: f32[256,14336], param.664: f32[256,14336], param.666: f32[14336,256], param.668: f32[4096], param.670: f32[4096], param.672: f32[256,8,128], param.674: f32[32,128,256], param.676: f32[256,32,128], param.678: f32[256,8,128], param.680: f32[256,14336], param.682: f32[256,14336], param.684: f32[14336,256], param.686: f32[4096], param.688: f32[4096], param.690: f32[256,8,128], param.692: f32[32,128,256], param.694: f32[256,32,128], param.696: f32[256,8,128], param.698: f32[256,14336], param.700: f32[256,14336], param.702: f32[14336,256], param.704: f32[4096], param.706: f32[4096], param.708: f32[256,8,128], param.710: f32[32,128,256], param.712: f32[256,32,128], param.714: f32[256,8,128], param.716: f32[256,14336], param.718: f32[256,14336], param.720: f32[14336,256], param.722: f32[4096], param.724: f32[4096], param.726: f32[256,8,128], param.728: f32[32,128,256], param.730: f32[256,32,128], param.732: f32[256,8,128], param.734: f32[256,14336], param.736: f32[256,14336], param.738: f32[14336,256], param.740: f32[4096], param.742: f32[4096], param.744: f32[256,8,128], param.746: f32[32,128,256], param.748: f32[256,32,128], param.750: f32[256,8,128], param.752: f32[256,14336], param.754: f32[256,14336], param.756: f32[14336,256], param.758: f32[4096], param.760: f32[4096], param.762: f32[256,8,128], param.764: f32[32,128,256], param.766: f32[256,32,128], param.768: f32[256,8,128], param.770: f32[256,14336], param.772: f32[256,14336], param.774: f32[14336,256], param.776: f32[4096], param.778: f32[4096], param.780: f32[256,8,128], param.782: f32[32,128,256], param.784: f32[256,32,128], param.786: f32[256,8,128], param.788: f32[256,14336], param.790: f32[256,14336], param.792: f32[14336,256], param.794: f32[4096], param.796: f32[4096], param.798: f32[256,8,128], param.800: f32[32,128,256], param.802: f32[256,32,128], param.804: f32[256,8,128], param.806: f32[256,14336], param.808: f32[256,14336], param.810: f32[14336,256], param.812: f32[4096], param.814: f32[4096], param.816: f32[256,8,128], param.818: f32[32,128,256], param.820: f32[256,32,128], param.822: f32[256,8,128], param.824: f32[256,14336], param.826: f32[256,14336], param.828: f32[14336,256], param.830: f32[4096], param.832: f32[4096], param.834: f32[256,8,128], param.836: f32[32,128,256], param.838: f32[256,32,128], param.840: f32[256,8,128], param.842: f32[256,14336], param.844: f32[256,14336], param.846: f32[14336,256], param.848: f32[4096], param.850: f32[4096], param.852: f32[256,8,128], param.854: f32[32,128,256], param.856: f32[256,32,128], param.858: f32[256,8,128], param.860: f32[256,14336], param.862: f32[256,14336], param.864: f32[14336,256], param.866: f32[4096], param.868: f32[4096], param.870: f32[256,8,128], param.872: f32[32,128,256], param.874: f32[256,32,128], param.876: f32[256,8,128], param.878: f32[256,128256], param.880: f32[128256,256], param.2: s32[], param.3: s32[2,8192], param.7: s32[2,8192], param.10: s32[2,8192], param.297: s32[2,8192], param.295: s32[2,8192]) -> (s32[], f32[4096], f32[256,14336], f32[256,14336], f32[14336,256], /*index=5*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=10*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=15*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=20*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=25*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=30*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=35*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=40*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=45*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=50*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=55*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=60*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=65*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=70*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=75*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=80*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=85*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=90*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=95*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=100*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=105*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=110*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=115*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=120*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=125*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=130*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=135*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=140*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=145*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=150*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=155*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=160*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=165*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=170*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=175*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=180*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=185*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=190*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=195*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=200*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=205*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=210*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=215*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=220*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=225*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=230*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=235*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=240*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=245*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=250*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=255*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=260*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=265*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=270*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=275*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=280*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=285*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=290*/f32[256,128256], f32[128256,256], s32[], f32[4096], f32[256,14336], /*index=295*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=300*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=305*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=310*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=315*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=320*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=325*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=330*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=335*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=340*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=345*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=350*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=355*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=360*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=365*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=370*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=375*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=380*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=385*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=390*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=395*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=400*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=405*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=410*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=415*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=420*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=425*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=430*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=435*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=440*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=445*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=450*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=455*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=460*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=465*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=470*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=475*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=480*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=485*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=490*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=495*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=500*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=505*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=510*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=515*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=520*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=525*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=530*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=535*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=540*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=545*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=550*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=555*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=560*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=565*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=570*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=575*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=580*/f32[256,32,128], f32[256,8,128], f32[256,128256], f32[128256,256], f32[4096], /*index=585*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=590*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=595*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=600*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=605*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=610*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=615*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=620*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=625*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=630*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=635*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=640*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=645*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=650*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=655*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=660*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=665*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=670*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=675*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=680*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=685*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=690*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=695*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=700*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=705*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=710*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=715*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=720*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=725*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=730*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=735*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=740*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=745*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=750*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=755*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=760*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=765*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=770*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=775*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=780*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=785*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=790*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=795*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=800*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=805*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=810*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=815*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=820*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=825*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], /*index=830*/f32[14336,256], f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], /*index=835*/f32[256,32,128], f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], /*index=840*/f32[4096], f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], /*index=845*/f32[256,8,128], f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], /*index=850*/f32[4096], f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], /*index=855*/f32[256,14336], f32[256,14336], f32[14336,256], f32[4096], f32[4096], /*index=860*/f32[256,8,128], f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,14336], /*index=865*/f32[256,14336], f32[14336,256], f32[4096], f32[4096], f32[256,8,128], /*index=870*/f32[32,128,256], f32[256,32,128], f32[256,8,128], f32[256,128256], f32[128256,256], /*index=875*/s32[], f32[], f32[], f32[], f32[], /*index=880*/f32[], s32[]) {
  %param = s32[] parameter(0), sharding={replicated}
  %constant.5435 = s32[] constant(1)
  %add.2576 = s32[] add(%param, %constant.5435)
  %param.1 = f32[4096]{0} parameter(1), sharding={replicated}
  %param.2 = s32[] parameter(875), sharding={replicated}
  %constant.5436 = s32[] constant(15000)
  %compare.1825 = pred[] compare(%param.2, %constant.5436), direction=LT
  %constant.5437 = f32[] constant(1)
  %constant.5439 = s32[] constant(0)
  %maximum.1 = s32[] maximum(%constant.5439, %param.2)
  %minimum.1 = s32[] minimum(%constant.5436, %maximum.1)
  %convert.515 = f32[] convert(%minimum.1)
  %constant.5440 = f32[] constant(6.66666674e-05)
  %multiply.2445 = f32[] multiply(%convert.515, %constant.5440)
  %subtract.63 = f32[] subtract(%constant.5437, %multiply.2445)
  %constant.5441 = f32[] constant(-0.001)
  %multiply.2446 = f32[] multiply(%subtract.63, %constant.5441)
  %constant.5442 = f32[] constant(0.001)
  %add.2577 = f32[] add(%multiply.2446, %constant.5442)
  %constant.5443 = s32[] constant(-15000)
  %add.2578 = s32[] add(%param.2, %constant.5443)
  %convert.516 = f32[] convert(%add.2578)
  %constant.5444 = f32[] constant(2.32708844e-05)
  %multiply.2447 = f32[] multiply(%convert.516, %constant.5444)
  %cosine.0 = f32[] cosine(%multiply.2447)
  %add.2579 = f32[] add(%cosine.0, %constant.5437)
  %constant.5446 = f32[] constant(0.0005)
  %multiply.2448 = f32[] multiply(%add.2579, %constant.5446)
  %constant.5448 = f32[] constant(0.5)
  %multiply.2449 = f32[] multiply(%add.2579, %constant.5448)
  %subtract.64 = f32[] subtract(%constant.5437, %multiply.2449)
  %constant.5449 = f32[] constant(0.0001)
  %multiply.2450 = f32[] multiply(%subtract.64, %constant.5449)
  %add.2580 = f32[] add(%multiply.2448, %multiply.2450)
  %select.1089 = f32[] select(%compare.1825, %add.2577, %add.2580)
  %constant.5450 = f32[] constant(-1)
  %multiply.2451 = f32[] multiply(%select.1089, %constant.5450)
  %broadcast.7107 = f32[4096]{0} broadcast(%multiply.2451), dimensions={}
  %param.3 = s32[2,8192]{1,0} parameter(876), sharding={devices=[16,1]<=[16]}
  %broadcast.7108 = s32[2,8192,128256]{2,1,0} broadcast(%param.3), dimensions={0,1}
  %iota.135 = s32[2,8192,128256]{2,1,0} iota(), iota_dimension=2
  %compare.1826 = pred[2,8192,128256]{2,1,0} compare(%broadcast.7108, %iota.135), direction=EQ
  %convert.517 = bf16[2,8192,128256]{2,1,0} convert(%compare.1826)
  %param.4 = f32[128256,256]{1,0} parameter(291), sharding={devices=[1,16]<=[16]}
  %convert.518 = bf16[128256,256]{1,0} convert(%param.4)
  %all-gather = bf16[128256,4096]{1,0} all-gather(%convert.518), channel_id=1, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.98 = bf16[2,8192,4096]{2,1,0} dot(%convert.517, %all-gather), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1190 = bf16[2,8192,4096]{2,1,0} copy(%dot.98)
  %copy.1191 = bf16[2,8192,4096]{2,1,0} copy(%copy.1190)
  %convert.519 = f32[2,8192,4096]{2,1,0} convert(%copy.1191)
  %multiply.2452 = f32[2,8192,4096]{2,1,0} multiply(%convert.519, %convert.519)
  %constant.5451 = f32[] constant(0)
  %reduce.128 = f32[2,8192]{1,0} reduce(%multiply.2452, %constant.5451), dimensions={2}, to_apply=%region_0.1057
  %constant.5452 = f32[] constant(0.000244140625)
  %broadcast.7109 = f32[2,8192]{1,0} broadcast(%constant.5452), dimensions={}
  %multiply.2453 = f32[2,8192]{1,0} multiply(%reduce.128, %broadcast.7109)
  %constant.5453 = f32[] constant(1e-05)
  %broadcast.7110 = f32[2,8192]{1,0} broadcast(%constant.5453), dimensions={}
  %add.2581 = f32[2,8192]{1,0} add(%multiply.2453, %broadcast.7110)
  %rsqrt.64 = f32[2,8192]{1,0} rsqrt(%add.2581)
  %broadcast.7111 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.64), dimensions={0,1}
  %multiply.2454 = f32[2,8192,4096]{2,1,0} multiply(%convert.519, %broadcast.7111)
  %convert.520 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2454)
  %param.5 = f32[4096]{0} parameter(6), sharding={replicated}
  %convert.521 = bf16[4096]{0} convert(%param.5)
  %broadcast.7112 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.521), dimensions={2}
  %multiply.2455 = bf16[2,8192,4096]{2,1,0} multiply(%convert.520, %broadcast.7112)
  %copy.1192 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2455)
  %copy.1193 = bf16[2,8192,4096]{2,1,0} copy(%copy.1192)
  %param.6 = f32[256,32,128]{2,1,0} parameter(9), sharding={devices=[16,1,1]<=[16]}
  %convert.522 = bf16[256,32,128]{2,1,0} convert(%param.6)
  %all-gather.1 = bf16[4096,32,128]{2,1,0} all-gather(%convert.522), channel_id=2, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.99 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1193, %all-gather.1), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.0 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.99), exponent_bits=8, mantissa_bits=7
  %convert.523 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.0)
  %param.7 = s32[2,8192]{1,0} parameter(877), sharding={devices=[16,1]<=[16]}
  %convert.524 = f32[2,8192]{1,0} convert(%param.7)
  %broadcast.7113 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.524), dimensions={0,1}
  %broadcast.7114 = f32[128]{0} broadcast(%constant.5437), dimensions={}
  %constant.5455 = f32[] constant(6.28318548)
  %broadcast.7115 = f32[128]{0} broadcast(%constant.5455), dimensions={}
  %constant.5456 = f32[] constant(500000)
  %broadcast.7116 = f32[128]{0} broadcast(%constant.5456), dimensions={}
  %iota.136 = s32[64]{0} iota(), iota_dimension=0
  %constant.5457 = s32[] constant(2)
  %broadcast.7117 = s32[64]{0} broadcast(%constant.5457), dimensions={}
  %multiply.2457 = s32[64]{0} multiply(%iota.136, %broadcast.7117)
  %convert.525 = f32[64]{0} convert(%multiply.2457)
  %constant.5458 = f32[] constant(0.0078125)
  %broadcast.7118 = f32[64]{0} broadcast(%constant.5458), dimensions={}
  %multiply.2458 = f32[64]{0} multiply(%convert.525, %broadcast.7118)
  %broadcast.7119 = f32[64,2]{1,0} broadcast(%multiply.2458), dimensions={0}
  %reshape.8461 = f32[128]{0} reshape(%broadcast.7119)
  %power.256 = f32[128]{0} power(%broadcast.7116, %reshape.8461)
  %multiply.2459 = f32[128]{0} multiply(%broadcast.7115, %power.256)
  %constant.5459 = f32[] constant(2048)
  %broadcast.7120 = f32[128]{0} broadcast(%constant.5459), dimensions={}
  %compare.1827 = pred[128]{0} compare(%multiply.2459, %broadcast.7120), direction=LT
  %convert.526 = s32[128]{0} convert(%compare.1827)
  %broadcast.7121 = s32[128]{0} broadcast(%constant.5435), dimensions={}
  %compare.1828 = pred[128]{0} compare(%convert.526, %broadcast.7121), direction=LT
  %constant.5461 = f32[] constant(8192)
  %broadcast.7122 = f32[128]{0} broadcast(%constant.5461), dimensions={}
  %compare.1829 = pred[128]{0} compare(%multiply.2459, %broadcast.7122), direction=GT
  %convert.527 = s32[128]{0} convert(%compare.1829)
  %compare.1830 = pred[128]{0} compare(%convert.527, %broadcast.7121), direction=LT
  %negate.767 = f32[128]{0} negate(%reshape.8461)
  %power.257 = f32[128]{0} power(%broadcast.7116, %negate.767)
  %multiply.2460 = f32[128]{0} multiply(%broadcast.7122, %power.257)
  %constant.5462 = f32[] constant(0.159154937)
  %broadcast.7123 = f32[128]{0} broadcast(%constant.5462), dimensions={}
  %multiply.2461 = f32[128]{0} multiply(%multiply.2460, %broadcast.7123)
  %broadcast.7124 = f32[128]{0} broadcast(%constant.5450), dimensions={}
  %add.2582 = f32[128]{0} add(%multiply.2461, %broadcast.7124)
  %constant.5464 = f32[] constant(0.333333343)
  %broadcast.7125 = f32[128]{0} broadcast(%constant.5464), dimensions={}
  %multiply.2462 = f32[128]{0} multiply(%add.2582, %broadcast.7125)
  %subtract.65 = f32[128]{0} subtract(%broadcast.7114, %multiply.2462)
  %multiply.2463 = f32[128]{0} multiply(%subtract.65, %power.257)
  %constant.5465 = f32[] constant(0.125)
  %broadcast.7126 = f32[128]{0} broadcast(%constant.5465), dimensions={}
  %multiply.2464 = f32[128]{0} multiply(%multiply.2463, %broadcast.7126)
  %multiply.2465 = f32[128]{0} multiply(%multiply.2462, %power.257)
  %add.2583 = f32[128]{0} add(%multiply.2464, %multiply.2465)
  %multiply.2466 = f32[128]{0} multiply(%power.257, %broadcast.7126)
  %select.1090 = f32[128]{0} select(%compare.1830, %add.2583, %multiply.2466)
  %select.1091 = f32[128]{0} select(%compare.1828, %select.1090, %power.257)
  %divide.545 = f32[128]{0} divide(%broadcast.7114, %select.1091)
  %broadcast.7129 = f32[2,8192,1,128]{3,2,1,0} broadcast(%divide.545), dimensions={3}
  %divide.546 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.7113, %broadcast.7129)
  %cosine.1 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.546)
  %reshape.8463 = f32[2,8192,128]{2,1,0} reshape(%cosine.1)
  %broadcast.7132 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.8463), dimensions={0,1,3}
  %multiply.2467 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.523, %broadcast.7132)
  %iota.137 = s32[128]{0} iota(), iota_dimension=0
  %and.446 = s32[128]{0} and(%iota.137, %broadcast.7121)
  %broadcast.7135 = s32[128]{0} broadcast(%constant.5439), dimensions={}
  %compare.1831 = pred[128]{0} compare(%and.446, %broadcast.7135), direction=LT
  %compare.1832 = pred[128]{0} compare(%and.446, %broadcast.7135), direction=NE
  %and.447 = pred[128]{0} and(%compare.1831, %compare.1832)
  %broadcast.7136 = s32[128]{0} broadcast(%constant.5457), dimensions={}
  %add.2584 = s32[128]{0} add(%and.446, %broadcast.7136)
  %select.1092 = s32[128]{0} select(%and.447, %add.2584, %and.446)
  %compare.1833 = pred[128]{0} compare(%select.1092, %broadcast.7121), direction=LT
  %broadcast.7140 = pred[2,8192,32,128]{3,2,1,0} broadcast(%compare.1833), dimensions={3}
  %slice = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.0), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.1 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.0), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.0 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice, %slice.1), dimensions={3}
  %slice.2 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.0), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.3 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.0), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.1 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.2, %slice.3), dimensions={3}
  %select.1093 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.0, %concatenate.1)
  %convert.528 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1093)
  %sine.0 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.546)
  %reshape.8470 = f32[2,8192,128]{2,1,0} reshape(%sine.0)
  %broadcast.7141 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.8470), dimensions={0,1,3}
  %multiply.2473 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.528, %broadcast.7141)
  %constant.5507 = s32[2]{0} constant({-1, 1})
  %broadcast.7143 = s32[64,2]{1,0} broadcast(%constant.5507), dimensions={1}
  %reshape.8471 = s32[128]{0} reshape(%broadcast.7143)
  %convert.529 = f32[128]{0} convert(%reshape.8471)
  %broadcast.7145 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.529), dimensions={3}
  %multiply.2474 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.2473, %broadcast.7145)
  %add.2585 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2467, %multiply.2474)
  %convert.530 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2585)
  %copy.1194 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.530)
  %param.8 = f32[256,8,128]{2,1,0} parameter(7), sharding={devices=[16,1,1]<=[16]}
  %convert.531 = bf16[256,8,128]{2,1,0} convert(%param.8)
  %all-gather.2 = bf16[4096,8,128]{2,1,0} all-gather(%convert.531), channel_id=3, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.100 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1193, %all-gather.2), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.1 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.100), exponent_bits=8, mantissa_bits=7
  %convert.532 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.1)
  %broadcast.7159 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.8463), dimensions={0,1,3}
  %multiply.2487 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.532, %broadcast.7159)
  %broadcast.7165 = pred[2,8192,8,128]{3,2,1,0} broadcast(%compare.1833), dimensions={3}
  %slice.4 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.1), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.5 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.1), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.2 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.4, %slice.5), dimensions={3}
  %slice.6 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.1), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.7 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.1), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.3 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.6, %slice.7), dimensions={3}
  %select.1097 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.2, %concatenate.3)
  %convert.537 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1097)
  %broadcast.7168 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.8470), dimensions={0,1,3}
  %multiply.2492 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.537, %broadcast.7168)
  %broadcast.7171 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.529), dimensions={3}
  %multiply.2493 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.2492, %broadcast.7171)
  %add.2589 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.2487, %multiply.2493)
  %convert.539 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2589)
  %copy.1196 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.539)
  %param.9 = f32[256,8,128]{2,1,0} parameter(10), sharding={devices=[16,1,1]<=[16]}
  %convert.540 = bf16[256,8,128]{2,1,0} convert(%param.9)
  %all-gather.3 = bf16[4096,8,128]{2,1,0} all-gather(%convert.540), channel_id=4, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.101 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1193, %all-gather.3), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.2 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.101), exponent_bits=8, mantissa_bits=7
  %copy.1197 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.2)
  %constant.5555 = bf16[0]{0} constant({})
  %broadcast.7183 = s32[3]{0} broadcast(%constant.5439), dimensions={}
  %reshape.8488 = s32[1]{0} reshape(%constant.5457)
  %reshape.8489 = s32[1]{0} reshape(%constant.5439)
  %constant.5576 = pred[1]{0} constant({0})
  %constant.5577 = s32[1]{0} constant({2})
  %constant.5578 = s32[1]{0} constant({0})
  %select.1099 = s32[1]{0} select(%constant.5576, %constant.5577, %constant.5578)
  %maximum.2 = s32[1]{0} maximum(%reshape.8489, %select.1099)
  %minimum.2 = s32[1]{0} minimum(%reshape.8488, %maximum.2)
  %sort.0 = (s32[1]{0}, s32[1]{0}) sort(%minimum.2, %constant.5578), dimensions={0}, is_stable=true, to_apply=%region_1.75._custom_call_lowering_rule
  %get-tuple-element.1 = s32[1]{0} get-tuple-element(%sort.0), index=1
  %compare.1844 = pred[1]{0} compare(%get-tuple-element.1, %constant.5578), direction=LT
  %constant.5580 = s32[1]{0} constant({1})
  %add.2590 = s32[1]{0} add(%get-tuple-element.1, %constant.5580)
  %select.1100 = s32[1]{0} select(%compare.1844, %add.2590, %get-tuple-element.1)
  %reshape.8490 = s32[1,1]{1,0} reshape(%select.1100)
  %scatter.89 = s32[1]{0} scatter(%minimum.2, %reshape.8490, %constant.5578), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_2.88._custom_call_lowering_rule
  %compare.1845 = pred[1]{0} compare(%scatter.89, %constant.5578), direction=LT
  %constant.5581 = s32[1]{0} constant({3})
  %add.2591 = s32[1]{0} add(%scatter.89, %constant.5581)
  %select.1101 = s32[1]{0} select(%compare.1845, %add.2591, %scatter.89)
  %reshape.8492 = s32[1,1]{1,0} reshape(%select.1101)
  %scatter.188 = s32[3]{0} scatter(%broadcast.7183, %reshape.8492, %constant.5578), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.187._custom_call_lowering_rule
  %broadcast.7184 = s32[2]{0} broadcast(%constant.5439), dimensions={}
  %constant.5583 = pred[] constant(true)
  %broadcast.7186 = pred[3]{0} broadcast(%constant.5583), dimensions={}
  %scatter.97 = pred[3]{0} scatter(%broadcast.7186, %reshape.8492, %constant.5576), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_3.96._custom_call_lowering_rule
  %convert.543 = s32[3]{0} convert(%scatter.97)
  %reduce-window.3 = s32[3]{0} reduce-window(%convert.543, %constant.5439), window={size=3 pad=2_0}, to_apply=%region_4.105._custom_call_lowering_rule
  %maximum.3 = s32[3]{0} maximum(%broadcast.7183, %reduce-window.3)
  %compare.1847 = pred[3]{0} compare(%maximum.3, %broadcast.7183), direction=LT
  %broadcast.7187 = s32[3]{0} broadcast(%constant.5457), dimensions={}
  %add.2593 = s32[3]{0} add(%maximum.3, %broadcast.7187)
  %select.1104 = s32[3]{0} select(%compare.1847, %add.2593, %maximum.3)
  %reshape.8496 = s32[3,1]{1,0} reshape(%select.1104)
  %broadcast.7188 = s32[3]{0} broadcast(%constant.5435), dimensions={}
  %scatter.125 = s32[2]{0} scatter(%broadcast.7184, %reshape.8496, %broadcast.7188), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_5.124._custom_call_lowering_rule
  %reduce-window.4 = s32[2]{0} reduce-window(%scatter.125, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.39._custom_call_lowering_rule
  %sign.0 = s32[2]{0} sign(%reduce-window.4)
  %sign.1 = s32[] sign(%constant.5435)
  %broadcast.7189 = s32[2]{0} broadcast(%sign.1), dimensions={}
  %compare.1848 = pred[2]{0} compare(%sign.0, %broadcast.7189), direction=NE
  %broadcast.7190 = s32[2]{0} broadcast(%constant.5435), dimensions={}
  %remainder.254 = s32[2]{0} remainder(%reduce-window.4, %broadcast.7190)
  %compare.1849 = pred[2]{0} compare(%remainder.254, %broadcast.7184), direction=NE
  %and.451 = pred[2]{0} and(%compare.1848, %compare.1849)
  %divide.549 = s32[2]{0} divide(%reduce-window.4, %broadcast.7190)
  %subtract.67 = s32[2]{0} subtract(%divide.549, %broadcast.7190)
  %select.1105 = s32[2]{0} select(%and.451, %subtract.67, %divide.549)
  %constant.5591 = s32[] constant(3)
  %compare.1851 = pred[] compare(%constant.5591, %constant.5439), direction=EQ
  %select.1106 = s32[] select(%compare.1851, %constant.5435, %constant.5591)
  %broadcast.7194 = s32[2]{0} broadcast(%select.1106), dimensions={}
  %remainder.255 = s32[2]{0} remainder(%select.1105, %broadcast.7194)
  %compare.1852 = pred[2]{0} compare(%remainder.255, %broadcast.7184), direction=LT
  %compare.1853 = pred[] compare(%select.1106, %constant.5439), direction=LT
  %broadcast.7196 = pred[2]{0} broadcast(%compare.1853), dimensions={}
  %compare.1854 = pred[2]{0} compare(%compare.1852, %broadcast.7196), direction=NE
  %compare.1855 = pred[2]{0} compare(%remainder.255, %broadcast.7184), direction=NE
  %and.452 = pred[2]{0} and(%compare.1854, %compare.1855)
  %add.2594 = s32[2]{0} add(%remainder.255, %broadcast.7194)
  %select.1107 = s32[2]{0} select(%and.452, %add.2594, %remainder.255)
  %compare.1857 = pred[2]{0} compare(%select.1107, %broadcast.7184), direction=LT
  %broadcast.7198 = s32[2]{0} broadcast(%constant.5591), dimensions={}
  %add.2595 = s32[2]{0} add(%select.1107, %broadcast.7198)
  %select.1108 = s32[2]{0} select(%compare.1857, %add.2595, %select.1107)
  %reshape.8497 = s32[2,1]{1,0} reshape(%select.1108)
  %param.10 = s32[2,8192]{1,0} parameter(878), sharding={devices=[16,1]<=[16]}
  %broadcast.7172 = s32[2,8192,8192]{2,1,0} broadcast(%param.10), dimensions={0,1}
  %broadcast.7174 = s32[2,8192,8192]{2,1,0} broadcast(%param.10), dimensions={0,2}
  %compare.1841 = pred[2,8192,8192]{2,1,0} compare(%broadcast.7172, %broadcast.7174), direction=EQ
  %iota.140 = s32[8192,8192]{1,0} iota(), iota_dimension=1
  %iota.141 = s32[8192,8192]{1,0} iota(), iota_dimension=0
  %compare.1842 = pred[8192,8192]{1,0} compare(%iota.140, %iota.141), direction=LE
  %broadcast.7176 = pred[2,8192,8192]{2,1,0} broadcast(%compare.1842), dimensions={1,2}
  %and.450 = pred[2,8192,8192]{2,1,0} and(%compare.1841, %broadcast.7176)
  %broadcast.7177 = f32[2,8192,8192]{2,1,0} broadcast(%constant.5451), dimensions={}
  %constant.5557 = f32[] constant(-2.38197633e+38)
  %broadcast.7179 = f32[2,8192,8192]{2,1,0} broadcast(%constant.5557), dimensions={}
  %select.1098 = f32[2,8192,8192]{2,1,0} select(%and.450, %broadcast.7177, %broadcast.7179)
  %compare.1843 = pred[2,8192,8192]{2,1,0} compare(%select.1098, %broadcast.7177), direction=NE
  %not.64 = pred[2,8192,8192]{2,1,0} not(%compare.1843)
  %convert.541 = s32[2,8192,8192]{2,1,0} convert(%not.64)
  %reduce.129 = s32[2,8192]{1,0} reduce(%convert.541, %constant.5439), dimensions={1}, to_apply=%region_1.1300
  %reshape.8483 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.129)
  %slice.8 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.8483), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.8485 = s32[2,1]{1,0} reshape(%slice.8)
  %reshape.8499 = s32[2]{0} reshape(%reshape.8485)
  %compare.1858 = pred[2]{0} compare(%reshape.8499, %broadcast.7184), direction=LT
  %constant.5596 = s32[] constant(-1)
  %broadcast.7199 = s32[2]{0} broadcast(%constant.5596), dimensions={}
  %reduce-window.5 = s32[2]{0} reduce-window(%reshape.8499, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.39._custom_call_lowering_rule.clone
  %select.1109 = s32[2]{0} select(%compare.1858, %broadcast.7199, %reduce-window.5)
  %scatter.196 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.1109), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.195._custom_call_lowering_rule
  %reduce.130 = s32[2,8192]{1,0} reduce(%convert.541, %constant.5439), dimensions={2}, to_apply=%region_2.1308
  %reshape.8486 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.130)
  %constant.5570 = s32[] constant(-2147483648)
  %reduce.131 = s32[2,1]{1,0} reduce(%reshape.8486, %constant.5570), dimensions={3,2}, to_apply=%region_3.1313
  %reshape.8508 = s32[2]{0} reshape(%reduce.131)
  %compare.1872 = pred[2]{0} compare(%reshape.8508, %broadcast.7184), direction=LT
  %reduce-window.8 = s32[2]{0} reduce-window(%reshape.8508, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.39._custom_call_lowering_rule.clone.1
  %select.1120 = s32[2]{0} select(%compare.1872, %broadcast.7199, %reduce-window.8)
  %scatter.250 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.1120), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.249._custom_call_lowering_rule
  %constant.5571 = u32[] constant(0)
  %broadcast.7182 = u32[32]{0} broadcast(%constant.5571), dimensions={}
  %constant.5572 = s32[16]{0} constant({0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30})
  %partition-id = u32[] partition-id()
  %dynamic-slice.9 = s32[1]{0} dynamic-slice(%constant.5572, %partition-id), dynamic_slice_sizes={1}
  %reshape.8487 = s32[] reshape(%dynamic-slice.9)
  %dynamic-slice.10 = u32[2]{0} dynamic-slice(%broadcast.7182, %reshape.8487), dynamic_slice_sizes={2}
  %custom-call.251 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1194, %copy.1196, %copy.1197, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.251), index=0
  %reduce-precision.3 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element), exponent_bits=8, mantissa_bits=7
  %copy.1198 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.3)
  %param.11 = f32[32,128,256]{2,1,0} parameter(8), sharding={devices=[1,1,16]<=[16]}
  %convert.545 = bf16[32,128,256]{2,1,0} convert(%param.11)
  %all-gather.4 = bf16[32,128,4096]{2,1,0} all-gather(%convert.545), channel_id=5, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.102 = bf16[2,8192,4096]{2,1,0} dot(%copy.1198, %all-gather.4), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.4 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.102), exponent_bits=8, mantissa_bits=7
  %copy.1199 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.4)
  %add.2603 = bf16[2,8192,4096]{2,1,0} add(%copy.1191, %copy.1199)
  %convert.546 = f32[2,8192,4096]{2,1,0} convert(%add.2603)
  %multiply.2496 = f32[2,8192,4096]{2,1,0} multiply(%convert.546, %convert.546)
  %reduce.132 = f32[2,8192]{1,0} reduce(%multiply.2496, %constant.5451), dimensions={2}, to_apply=%region_4.1331
  %multiply.2497 = f32[2,8192]{1,0} multiply(%reduce.132, %broadcast.7109)
  %add.2604 = f32[2,8192]{1,0} add(%multiply.2497, %broadcast.7110)
  %rsqrt.65 = f32[2,8192]{1,0} rsqrt(%add.2604)
  %broadcast.7213 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.65), dimensions={0,1}
  %multiply.2498 = f32[2,8192,4096]{2,1,0} multiply(%convert.546, %broadcast.7213)
  %convert.547 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2498)
  %param.12 = f32[4096]{0} parameter(5), sharding={replicated}
  %convert.548 = bf16[4096]{0} convert(%param.12)
  %broadcast.7214 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.548), dimensions={2}
  %multiply.2499 = bf16[2,8192,4096]{2,1,0} multiply(%convert.547, %broadcast.7214)
  %copy.1200 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2499)
  %param.13 = f32[256,14336]{1,0} parameter(2), sharding={devices=[16,1]<=[16]}
  %convert.549 = bf16[256,14336]{1,0} convert(%param.13)
  %all-gather.5 = bf16[4096,14336]{1,0} all-gather(%convert.549), channel_id=6, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.103 = bf16[2,8192,14336]{2,1,0} dot(%copy.1200, %all-gather.5), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.5 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.103), exponent_bits=8, mantissa_bits=7
  %constant.5610 = bf16[] constant(1)
  %broadcast.7215 = bf16[2,8192,14336]{2,1,0} broadcast(%constant.5610), dimensions={}
  %negate.769 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.5)
  %exponential.126 = bf16[2,8192,14336]{2,1,0} exponential(%negate.769)
  %add.2605 = bf16[2,8192,14336]{2,1,0} add(%exponential.126, %broadcast.7215)
  %divide.551 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2605)
  %multiply.2500 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.5, %divide.551)
  %param.14 = f32[256,14336]{1,0} parameter(3), sharding={devices=[16,1]<=[16]}
  %convert.550 = bf16[256,14336]{1,0} convert(%param.14)
  %all-gather.6 = bf16[4096,14336]{1,0} all-gather(%convert.550), channel_id=7, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.104 = bf16[2,8192,14336]{2,1,0} dot(%copy.1200, %all-gather.6), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.6 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.104), exponent_bits=8, mantissa_bits=7
  %multiply.2501 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.2500, %reduce-precision.6)
  %copy.1201 = bf16[2,8192,14336]{2,1,0} copy(%multiply.2501)
  %param.15 = f32[14336,256]{1,0} parameter(4), sharding={devices=[1,16]<=[16]}
  %convert.551 = bf16[14336,256]{1,0} convert(%param.15)
  %all-gather.7 = bf16[14336,4096]{1,0} all-gather(%convert.551), channel_id=8, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.105 = bf16[2,8192,4096]{2,1,0} dot(%copy.1201, %all-gather.7), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1202 = bf16[2,8192,4096]{2,1,0} copy(%dot.105)
  %add.2606 = bf16[2,8192,4096]{2,1,0} add(%copy.1202, %add.2603)
  %copy.1203 = bf16[2,8192,4096]{2,1,0} copy(%add.2606)
  %copy.1204 = bf16[2,8192,4096]{2,1,0} copy(%copy.1203)
  %convert.552 = f32[2,8192,4096]{2,1,0} convert(%copy.1204)
  %multiply.2502 = f32[2,8192,4096]{2,1,0} multiply(%convert.552, %convert.552)
  %reduce.133 = f32[2,8192]{1,0} reduce(%multiply.2502, %constant.5451), dimensions={2}, to_apply=%region_5.1378
  %multiply.2503 = f32[2,8192]{1,0} multiply(%reduce.133, %broadcast.7109)
  %add.2607 = f32[2,8192]{1,0} add(%multiply.2503, %broadcast.7110)
  %rsqrt.66 = f32[2,8192]{1,0} rsqrt(%add.2607)
  %broadcast.7218 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.66), dimensions={0,1}
  %multiply.2504 = f32[2,8192,4096]{2,1,0} multiply(%convert.552, %broadcast.7218)
  %convert.553 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2504)
  %param.16 = f32[4096]{0} parameter(15), sharding={replicated}
  %convert.554 = bf16[4096]{0} convert(%param.16)
  %broadcast.7219 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.554), dimensions={2}
  %multiply.2505 = bf16[2,8192,4096]{2,1,0} multiply(%convert.553, %broadcast.7219)
  %copy.1205 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2505)
  %copy.1206 = bf16[2,8192,4096]{2,1,0} copy(%copy.1205)
  %param.17 = f32[256,32,128]{2,1,0} parameter(18), sharding={devices=[16,1,1]<=[16]}
  %convert.555 = bf16[256,32,128]{2,1,0} convert(%param.17)
  %all-gather.8 = bf16[4096,32,128]{2,1,0} all-gather(%convert.555), channel_id=9, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.106 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1206, %all-gather.8), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.7 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.106), exponent_bits=8, mantissa_bits=7
  %convert.556 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.7)
  %multiply.2518 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.556, %broadcast.7132)
  %slice.9 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.7), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.10 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.7), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.4 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.9, %slice.10), dimensions={3}
  %slice.11 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.7), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.12 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.7), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.5 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.11, %slice.12), dimensions={3}
  %select.1124 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.4, %concatenate.5)
  %convert.561 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1124)
  %multiply.2523 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.561, %broadcast.7141)
  %multiply.2524 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.2523, %broadcast.7145)
  %add.2611 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2518, %multiply.2524)
  %convert.563 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2611)
  %copy.1207 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.563)
  %param.18 = f32[256,8,128]{2,1,0} parameter(16), sharding={devices=[16,1,1]<=[16]}
  %convert.564 = bf16[256,8,128]{2,1,0} convert(%param.18)
  %all-gather.9 = bf16[4096,8,128]{2,1,0} all-gather(%convert.564), channel_id=10, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.107 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1206, %all-gather.9), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.8 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.107), exponent_bits=8, mantissa_bits=7
  %convert.565 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.8)
  %multiply.2535 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.565, %broadcast.7159)
  %slice.13 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.8), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.14 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.8), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.6 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.13, %slice.14), dimensions={3}
  %slice.15 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.8), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.16 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.8), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.7 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.15, %slice.16), dimensions={3}
  %select.1129 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.6, %concatenate.7)
  %convert.570 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1129)
  %multiply.2540 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.570, %broadcast.7168)
  %multiply.2541 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.2540, %broadcast.7171)
  %add.2615 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.2535, %multiply.2541)
  %convert.572 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2615)
  %copy.1209 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.572)
  %param.19 = f32[256,8,128]{2,1,0} parameter(19), sharding={devices=[16,1,1]<=[16]}
  %convert.573 = bf16[256,8,128]{2,1,0} convert(%param.19)
  %all-gather.10 = bf16[4096,8,128]{2,1,0} all-gather(%convert.573), channel_id=11, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.108 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1206, %all-gather.10), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.9 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.108), exponent_bits=8, mantissa_bits=7
  %copy.1210 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.9)
  %custom-call.0 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1207, %copy.1209, %copy.1210, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.8 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.0), index=0
  %reduce-precision.10 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.8), exponent_bits=8, mantissa_bits=7
  %copy.1211 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.10)
  %param.20 = f32[32,128,256]{2,1,0} parameter(17), sharding={devices=[1,1,16]<=[16]}
  %convert.578 = bf16[32,128,256]{2,1,0} convert(%param.20)
  %all-gather.11 = bf16[32,128,4096]{2,1,0} all-gather(%convert.578), channel_id=12, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.109 = bf16[2,8192,4096]{2,1,0} dot(%copy.1211, %all-gather.11), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.11 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.109), exponent_bits=8, mantissa_bits=7
  %copy.1212 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.11)
  %add.2628 = bf16[2,8192,4096]{2,1,0} add(%copy.1204, %copy.1212)
  %convert.579 = f32[2,8192,4096]{2,1,0} convert(%add.2628)
  %multiply.2543 = f32[2,8192,4096]{2,1,0} multiply(%convert.579, %convert.579)
  %reduce.137 = f32[2,8192]{1,0} reduce(%multiply.2543, %constant.5451), dimensions={2}, to_apply=%region_9.1620
  %multiply.2545 = f32[2,8192]{1,0} multiply(%reduce.137, %broadcast.7109)
  %add.2629 = f32[2,8192]{1,0} add(%multiply.2545, %broadcast.7110)
  %rsqrt.67 = f32[2,8192]{1,0} rsqrt(%add.2629)
  %broadcast.7302 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.67), dimensions={0,1}
  %multiply.2546 = f32[2,8192,4096]{2,1,0} multiply(%convert.579, %broadcast.7302)
  %convert.580 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2546)
  %param.21 = f32[4096]{0} parameter(14), sharding={replicated}
  %convert.581 = bf16[4096]{0} convert(%param.21)
  %broadcast.7303 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.581), dimensions={2}
  %multiply.2547 = bf16[2,8192,4096]{2,1,0} multiply(%convert.580, %broadcast.7303)
  %copy.1213 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2547)
  %param.22 = f32[256,14336]{1,0} parameter(11), sharding={devices=[16,1]<=[16]}
  %convert.582 = bf16[256,14336]{1,0} convert(%param.22)
  %all-gather.12 = bf16[4096,14336]{1,0} all-gather(%convert.582), channel_id=13, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.110 = bf16[2,8192,14336]{2,1,0} dot(%copy.1213, %all-gather.12), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.12 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.110), exponent_bits=8, mantissa_bits=7
  %negate.772 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.12)
  %exponential.127 = bf16[2,8192,14336]{2,1,0} exponential(%negate.772)
  %add.2630 = bf16[2,8192,14336]{2,1,0} add(%exponential.127, %broadcast.7215)
  %divide.558 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2630)
  %multiply.2548 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.12, %divide.558)
  %param.23 = f32[256,14336]{1,0} parameter(12), sharding={devices=[16,1]<=[16]}
  %convert.583 = bf16[256,14336]{1,0} convert(%param.23)
  %all-gather.13 = bf16[4096,14336]{1,0} all-gather(%convert.583), channel_id=14, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.111 = bf16[2,8192,14336]{2,1,0} dot(%copy.1213, %all-gather.13), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.13 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.111), exponent_bits=8, mantissa_bits=7
  %multiply.2549 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.2548, %reduce-precision.13)
  %copy.1214 = bf16[2,8192,14336]{2,1,0} copy(%multiply.2549)
  %param.24 = f32[14336,256]{1,0} parameter(13), sharding={devices=[1,16]<=[16]}
  %convert.584 = bf16[14336,256]{1,0} convert(%param.24)
  %all-gather.14 = bf16[14336,4096]{1,0} all-gather(%convert.584), channel_id=15, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.112 = bf16[2,8192,4096]{2,1,0} dot(%copy.1214, %all-gather.14), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1215 = bf16[2,8192,4096]{2,1,0} copy(%dot.112)
  %add.2631 = bf16[2,8192,4096]{2,1,0} add(%copy.1215, %add.2628)
  %copy.1216 = bf16[2,8192,4096]{2,1,0} copy(%add.2631)
  %copy.1217 = bf16[2,8192,4096]{2,1,0} copy(%copy.1216)
  %convert.585 = f32[2,8192,4096]{2,1,0} convert(%copy.1217)
  %multiply.2550 = f32[2,8192,4096]{2,1,0} multiply(%convert.585, %convert.585)
  %reduce.138 = f32[2,8192]{1,0} reduce(%multiply.2550, %constant.5451), dimensions={2}, to_apply=%region_10.1658
  %multiply.2551 = f32[2,8192]{1,0} multiply(%reduce.138, %broadcast.7109)
  %add.2632 = f32[2,8192]{1,0} add(%multiply.2551, %broadcast.7110)
  %rsqrt.68 = f32[2,8192]{1,0} rsqrt(%add.2632)
  %broadcast.7308 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.68), dimensions={0,1}
  %multiply.2552 = f32[2,8192,4096]{2,1,0} multiply(%convert.585, %broadcast.7308)
  %convert.586 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2552)
  %param.25 = f32[4096]{0} parameter(114), sharding={replicated}
  %convert.587 = bf16[4096]{0} convert(%param.25)
  %broadcast.7309 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.587), dimensions={2}
  %multiply.2553 = bf16[2,8192,4096]{2,1,0} multiply(%convert.586, %broadcast.7309)
  %copy.1218 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2553)
  %copy.1219 = bf16[2,8192,4096]{2,1,0} copy(%copy.1218)
  %param.26 = f32[256,32,128]{2,1,0} parameter(117), sharding={devices=[16,1,1]<=[16]}
  %convert.588 = bf16[256,32,128]{2,1,0} convert(%param.26)
  %all-gather.15 = bf16[4096,32,128]{2,1,0} all-gather(%convert.588), channel_id=16, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.113 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1219, %all-gather.15), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.14 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.113), exponent_bits=8, mantissa_bits=7
  %convert.589 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.14)
  %multiply.2566 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.589, %broadcast.7132)
  %slice.18 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.14), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.19 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.14), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.8 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.18, %slice.19), dimensions={3}
  %slice.20 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.14), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.21 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.14), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.9 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.20, %slice.21), dimensions={3}
  %select.1156 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.8, %concatenate.9)
  %convert.594 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1156)
  %multiply.2571 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.594, %broadcast.7141)
  %multiply.2572 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.2571, %broadcast.7145)
  %add.2636 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2566, %multiply.2572)
  %convert.596 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2636)
  %copy.1220 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.596)
  %param.27 = f32[256,8,128]{2,1,0} parameter(115), sharding={devices=[16,1,1]<=[16]}
  %convert.597 = bf16[256,8,128]{2,1,0} convert(%param.27)
  %all-gather.16 = bf16[4096,8,128]{2,1,0} all-gather(%convert.597), channel_id=17, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.114 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1219, %all-gather.16), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.15 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.114), exponent_bits=8, mantissa_bits=7
  %convert.598 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.15)
  %multiply.2583 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.598, %broadcast.7159)
  %slice.22 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.15), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.23 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.15), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.10 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.22, %slice.23), dimensions={3}
  %slice.24 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.15), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.25 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.15), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.11 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.24, %slice.25), dimensions={3}
  %select.1160 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.10, %concatenate.11)
  %convert.603 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1160)
  %multiply.2588 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.603, %broadcast.7168)
  %multiply.2590 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.2588, %broadcast.7171)
  %add.2641 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.2583, %multiply.2590)
  %convert.605 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2641)
  %copy.1222 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.605)
  %param.28 = f32[256,8,128]{2,1,0} parameter(118), sharding={devices=[16,1,1]<=[16]}
  %convert.606 = bf16[256,8,128]{2,1,0} convert(%param.28)
  %all-gather.17 = bf16[4096,8,128]{2,1,0} all-gather(%convert.606), channel_id=18, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.115 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1219, %all-gather.17), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.16 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.115), exponent_bits=8, mantissa_bits=7
  %copy.1223 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.16)
  %custom-call.1 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1220, %copy.1222, %copy.1223, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.14 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.1), index=0
  %reduce-precision.17 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.14), exponent_bits=8, mantissa_bits=7
  %copy.1224 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.17)
  %param.29 = f32[32,128,256]{2,1,0} parameter(116), sharding={devices=[1,1,16]<=[16]}
  %convert.611 = bf16[32,128,256]{2,1,0} convert(%param.29)
  %all-gather.18 = bf16[32,128,4096]{2,1,0} all-gather(%convert.611), channel_id=19, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.116 = bf16[2,8192,4096]{2,1,0} dot(%copy.1224, %all-gather.18), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.18 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.116), exponent_bits=8, mantissa_bits=7
  %copy.1225 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.18)
  %add.2654 = bf16[2,8192,4096]{2,1,0} add(%copy.1217, %copy.1225)
  %convert.612 = f32[2,8192,4096]{2,1,0} convert(%add.2654)
  %multiply.2592 = f32[2,8192,4096]{2,1,0} multiply(%convert.612, %convert.612)
  %reduce.142 = f32[2,8192]{1,0} reduce(%multiply.2592, %constant.5451), dimensions={2}, to_apply=%region_14.1900
  %multiply.2593 = f32[2,8192]{1,0} multiply(%reduce.142, %broadcast.7109)
  %add.2655 = f32[2,8192]{1,0} add(%multiply.2593, %broadcast.7110)
  %rsqrt.69 = f32[2,8192]{1,0} rsqrt(%add.2655)
  %broadcast.7397 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.69), dimensions={0,1}
  %multiply.2595 = f32[2,8192,4096]{2,1,0} multiply(%convert.612, %broadcast.7397)
  %convert.613 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2595)
  %param.30 = f32[4096]{0} parameter(113), sharding={replicated}
  %convert.614 = bf16[4096]{0} convert(%param.30)
  %broadcast.7398 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.614), dimensions={2}
  %multiply.2596 = bf16[2,8192,4096]{2,1,0} multiply(%convert.613, %broadcast.7398)
  %copy.1226 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2596)
  %param.31 = f32[256,14336]{1,0} parameter(110), sharding={devices=[16,1]<=[16]}
  %convert.615 = bf16[256,14336]{1,0} convert(%param.31)
  %all-gather.19 = bf16[4096,14336]{1,0} all-gather(%convert.615), channel_id=20, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.117 = bf16[2,8192,14336]{2,1,0} dot(%copy.1226, %all-gather.19), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.19 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.117), exponent_bits=8, mantissa_bits=7
  %negate.775 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.19)
  %exponential.128 = bf16[2,8192,14336]{2,1,0} exponential(%negate.775)
  %add.2656 = bf16[2,8192,14336]{2,1,0} add(%exponential.128, %broadcast.7215)
  %divide.565 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2656)
  %multiply.2597 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.19, %divide.565)
  %param.32 = f32[256,14336]{1,0} parameter(111), sharding={devices=[16,1]<=[16]}
  %convert.616 = bf16[256,14336]{1,0} convert(%param.32)
  %all-gather.20 = bf16[4096,14336]{1,0} all-gather(%convert.616), channel_id=21, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.118 = bf16[2,8192,14336]{2,1,0} dot(%copy.1226, %all-gather.20), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.20 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.118), exponent_bits=8, mantissa_bits=7
  %multiply.2598 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.2597, %reduce-precision.20)
  %copy.1227 = bf16[2,8192,14336]{2,1,0} copy(%multiply.2598)
  %param.33 = f32[14336,256]{1,0} parameter(112), sharding={devices=[1,16]<=[16]}
  %convert.617 = bf16[14336,256]{1,0} convert(%param.33)
  %all-gather.21 = bf16[14336,4096]{1,0} all-gather(%convert.617), channel_id=22, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.119 = bf16[2,8192,4096]{2,1,0} dot(%copy.1227, %all-gather.21), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1228 = bf16[2,8192,4096]{2,1,0} copy(%dot.119)
  %add.2657 = bf16[2,8192,4096]{2,1,0} add(%copy.1228, %add.2654)
  %copy.1229 = bf16[2,8192,4096]{2,1,0} copy(%add.2657)
  %copy.1230 = bf16[2,8192,4096]{2,1,0} copy(%copy.1229)
  %convert.618 = f32[2,8192,4096]{2,1,0} convert(%copy.1230)
  %multiply.2599 = f32[2,8192,4096]{2,1,0} multiply(%convert.618, %convert.618)
  %reduce.143 = f32[2,8192]{1,0} reduce(%multiply.2599, %constant.5451), dimensions={2}, to_apply=%region_15.1938
  %multiply.2601 = f32[2,8192]{1,0} multiply(%reduce.143, %broadcast.7109)
  %add.2658 = f32[2,8192]{1,0} add(%multiply.2601, %broadcast.7110)
  %rsqrt.70 = f32[2,8192]{1,0} rsqrt(%add.2658)
  %broadcast.7402 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.70), dimensions={0,1}
  %multiply.2602 = f32[2,8192,4096]{2,1,0} multiply(%convert.618, %broadcast.7402)
  %convert.619 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2602)
  %param.34 = f32[4096]{0} parameter(213), sharding={replicated}
  %convert.620 = bf16[4096]{0} convert(%param.34)
  %broadcast.7403 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.620), dimensions={2}
  %multiply.2603 = bf16[2,8192,4096]{2,1,0} multiply(%convert.619, %broadcast.7403)
  %copy.1231 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2603)
  %copy.1232 = bf16[2,8192,4096]{2,1,0} copy(%copy.1231)
  %param.35 = f32[256,32,128]{2,1,0} parameter(216), sharding={devices=[16,1,1]<=[16]}
  %convert.621 = bf16[256,32,128]{2,1,0} convert(%param.35)
  %all-gather.22 = bf16[4096,32,128]{2,1,0} all-gather(%convert.621), channel_id=23, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.120 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1232, %all-gather.22), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.21 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.120), exponent_bits=8, mantissa_bits=7
  %convert.622 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.21)
  %multiply.2614 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.622, %broadcast.7132)
  %slice.27 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.21), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.28 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.21), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.12 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.27, %slice.28), dimensions={3}
  %slice.29 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.21), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.30 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.21), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.13 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.29, %slice.30), dimensions={3}
  %select.1185 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.12, %concatenate.13)
  %convert.627 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1185)
  %multiply.2619 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.627, %broadcast.7141)
  %multiply.2621 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.2619, %broadcast.7145)
  %add.2662 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2614, %multiply.2621)
  %convert.629 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2662)
  %copy.1233 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.629)
  %param.36 = f32[256,8,128]{2,1,0} parameter(214), sharding={devices=[16,1,1]<=[16]}
  %convert.630 = bf16[256,8,128]{2,1,0} convert(%param.36)
  %all-gather.23 = bf16[4096,8,128]{2,1,0} all-gather(%convert.630), channel_id=24, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.121 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1232, %all-gather.23), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.22 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.121), exponent_bits=8, mantissa_bits=7
  %convert.631 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.22)
  %multiply.2632 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.631, %broadcast.7159)
  %slice.31 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.22), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.32 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.22), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.14 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.31, %slice.32), dimensions={3}
  %slice.33 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.22), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.34 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.22), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.15 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.33, %slice.34), dimensions={3}
  %select.1189 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.14, %concatenate.15)
  %convert.636 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1189)
  %multiply.2639 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.636, %broadcast.7168)
  %multiply.2640 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.2639, %broadcast.7171)
  %add.2666 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.2632, %multiply.2640)
  %convert.638 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2666)
  %copy.1235 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.638)
  %param.37 = f32[256,8,128]{2,1,0} parameter(217), sharding={devices=[16,1,1]<=[16]}
  %convert.639 = bf16[256,8,128]{2,1,0} convert(%param.37)
  %all-gather.24 = bf16[4096,8,128]{2,1,0} all-gather(%convert.639), channel_id=25, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.122 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1232, %all-gather.24), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.23 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.122), exponent_bits=8, mantissa_bits=7
  %copy.1236 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.23)
  %custom-call.2 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1233, %copy.1235, %copy.1236, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.20 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.2), index=0
  %reduce-precision.24 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.20), exponent_bits=8, mantissa_bits=7
  %copy.1237 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.24)
  %param.38 = f32[32,128,256]{2,1,0} parameter(215), sharding={devices=[1,1,16]<=[16]}
  %convert.644 = bf16[32,128,256]{2,1,0} convert(%param.38)
  %all-gather.25 = bf16[32,128,4096]{2,1,0} all-gather(%convert.644), channel_id=26, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.123 = bf16[2,8192,4096]{2,1,0} dot(%copy.1237, %all-gather.25), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.25 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.123), exponent_bits=8, mantissa_bits=7
  %copy.1238 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.25)
  %add.2680 = bf16[2,8192,4096]{2,1,0} add(%copy.1230, %copy.1238)
  %convert.645 = f32[2,8192,4096]{2,1,0} convert(%add.2680)
  %multiply.2642 = f32[2,8192,4096]{2,1,0} multiply(%convert.645, %convert.645)
  %reduce.147 = f32[2,8192]{1,0} reduce(%multiply.2642, %constant.5451), dimensions={2}, to_apply=%region_19.2180
  %multiply.2643 = f32[2,8192]{1,0} multiply(%reduce.147, %broadcast.7109)
  %add.2681 = f32[2,8192]{1,0} add(%multiply.2643, %broadcast.7110)
  %rsqrt.71 = f32[2,8192]{1,0} rsqrt(%add.2681)
  %broadcast.7496 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.71), dimensions={0,1}
  %multiply.2644 = f32[2,8192,4096]{2,1,0} multiply(%convert.645, %broadcast.7496)
  %convert.646 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2644)
  %param.39 = f32[4096]{0} parameter(212), sharding={replicated}
  %convert.647 = bf16[4096]{0} convert(%param.39)
  %broadcast.7497 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.647), dimensions={2}
  %multiply.2645 = bf16[2,8192,4096]{2,1,0} multiply(%convert.646, %broadcast.7497)
  %copy.1239 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2645)
  %param.40 = f32[256,14336]{1,0} parameter(209), sharding={devices=[16,1]<=[16]}
  %convert.648 = bf16[256,14336]{1,0} convert(%param.40)
  %all-gather.26 = bf16[4096,14336]{1,0} all-gather(%convert.648), channel_id=27, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.124 = bf16[2,8192,14336]{2,1,0} dot(%copy.1239, %all-gather.26), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.26 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.124), exponent_bits=8, mantissa_bits=7
  %negate.778 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.26)
  %exponential.129 = bf16[2,8192,14336]{2,1,0} exponential(%negate.778)
  %add.2682 = bf16[2,8192,14336]{2,1,0} add(%exponential.129, %broadcast.7215)
  %divide.572 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2682)
  %multiply.2646 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.26, %divide.572)
  %param.41 = f32[256,14336]{1,0} parameter(210), sharding={devices=[16,1]<=[16]}
  %convert.649 = bf16[256,14336]{1,0} convert(%param.41)
  %all-gather.27 = bf16[4096,14336]{1,0} all-gather(%convert.649), channel_id=28, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.125 = bf16[2,8192,14336]{2,1,0} dot(%copy.1239, %all-gather.27), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.27 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.125), exponent_bits=8, mantissa_bits=7
  %multiply.2647 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.2646, %reduce-precision.27)
  %copy.1240 = bf16[2,8192,14336]{2,1,0} copy(%multiply.2647)
  %param.42 = f32[14336,256]{1,0} parameter(211), sharding={devices=[1,16]<=[16]}
  %convert.650 = bf16[14336,256]{1,0} convert(%param.42)
  %all-gather.28 = bf16[14336,4096]{1,0} all-gather(%convert.650), channel_id=29, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.126 = bf16[2,8192,4096]{2,1,0} dot(%copy.1240, %all-gather.28), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1241 = bf16[2,8192,4096]{2,1,0} copy(%dot.126)
  %add.2683 = bf16[2,8192,4096]{2,1,0} add(%copy.1241, %add.2680)
  %copy.1242 = bf16[2,8192,4096]{2,1,0} copy(%add.2683)
  %copy.1243 = bf16[2,8192,4096]{2,1,0} copy(%copy.1242)
  %convert.651 = f32[2,8192,4096]{2,1,0} convert(%copy.1243)
  %multiply.2648 = f32[2,8192,4096]{2,1,0} multiply(%convert.651, %convert.651)
  %reduce.148 = f32[2,8192]{1,0} reduce(%multiply.2648, %constant.5451), dimensions={2}, to_apply=%region_20.2218
  %multiply.2649 = f32[2,8192]{1,0} multiply(%reduce.148, %broadcast.7109)
  %add.2684 = f32[2,8192]{1,0} add(%multiply.2649, %broadcast.7110)
  %rsqrt.72 = f32[2,8192]{1,0} rsqrt(%add.2684)
  %broadcast.7501 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.72), dimensions={0,1}
  %multiply.2650 = f32[2,8192,4096]{2,1,0} multiply(%convert.651, %broadcast.7501)
  %convert.652 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2650)
  %param.43 = f32[4096]{0} parameter(240), sharding={replicated}
  %convert.653 = bf16[4096]{0} convert(%param.43)
  %broadcast.7502 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.653), dimensions={2}
  %multiply.2651 = bf16[2,8192,4096]{2,1,0} multiply(%convert.652, %broadcast.7502)
  %copy.1244 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2651)
  %copy.1245 = bf16[2,8192,4096]{2,1,0} copy(%copy.1244)
  %param.44 = f32[256,32,128]{2,1,0} parameter(243), sharding={devices=[16,1,1]<=[16]}
  %convert.654 = bf16[256,32,128]{2,1,0} convert(%param.44)
  %all-gather.29 = bf16[4096,32,128]{2,1,0} all-gather(%convert.654), channel_id=30, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.127 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1245, %all-gather.29), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.28 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.127), exponent_bits=8, mantissa_bits=7
  %convert.655 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.28)
  %multiply.2662 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.655, %broadcast.7132)
  %slice.36 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.28), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.37 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.28), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.16 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.36, %slice.37), dimensions={3}
  %slice.38 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.28), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.39 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.28), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.17 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.38, %slice.39), dimensions={3}
  %select.1215 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.16, %concatenate.17)
  %convert.660 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1215)
  %multiply.2668 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.660, %broadcast.7141)
  %multiply.2669 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.2668, %broadcast.7145)
  %add.2688 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2662, %multiply.2669)
  %convert.662 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2688)
  %copy.1246 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.662)
  %param.45 = f32[256,8,128]{2,1,0} parameter(241), sharding={devices=[16,1,1]<=[16]}
  %convert.663 = bf16[256,8,128]{2,1,0} convert(%param.45)
  %all-gather.30 = bf16[4096,8,128]{2,1,0} all-gather(%convert.663), channel_id=31, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.128 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1245, %all-gather.30), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.29 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.128), exponent_bits=8, mantissa_bits=7
  %convert.664 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.29)
  %multiply.2682 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.664, %broadcast.7159)
  %slice.40 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.29), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.41 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.29), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.18 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.40, %slice.41), dimensions={3}
  %slice.42 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.29), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.43 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.29), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.19 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.42, %slice.43), dimensions={3}
  %select.1219 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.18, %concatenate.19)
  %convert.669 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1219)
  %multiply.2687 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.669, %broadcast.7168)
  %multiply.2688 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.2687, %broadcast.7171)
  %add.2692 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.2682, %multiply.2688)
  %convert.671 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2692)
  %copy.1248 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.671)
  %param.46 = f32[256,8,128]{2,1,0} parameter(244), sharding={devices=[16,1,1]<=[16]}
  %convert.672 = bf16[256,8,128]{2,1,0} convert(%param.46)
  %all-gather.31 = bf16[4096,8,128]{2,1,0} all-gather(%convert.672), channel_id=32, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.129 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1245, %all-gather.31), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.30 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.129), exponent_bits=8, mantissa_bits=7
  %copy.1249 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.30)
  %custom-call.3 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1246, %copy.1248, %copy.1249, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.26 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.3), index=0
  %reduce-precision.31 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.26), exponent_bits=8, mantissa_bits=7
  %copy.1250 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.31)
  %param.47 = f32[32,128,256]{2,1,0} parameter(242), sharding={devices=[1,1,16]<=[16]}
  %convert.677 = bf16[32,128,256]{2,1,0} convert(%param.47)
  %all-gather.32 = bf16[32,128,4096]{2,1,0} all-gather(%convert.677), channel_id=33, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.130 = bf16[2,8192,4096]{2,1,0} dot(%copy.1250, %all-gather.32), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.32 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.130), exponent_bits=8, mantissa_bits=7
  %copy.1251 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.32)
  %add.2705 = bf16[2,8192,4096]{2,1,0} add(%copy.1243, %copy.1251)
  %convert.678 = f32[2,8192,4096]{2,1,0} convert(%add.2705)
  %multiply.2690 = f32[2,8192,4096]{2,1,0} multiply(%convert.678, %convert.678)
  %reduce.152 = f32[2,8192]{1,0} reduce(%multiply.2690, %constant.5451), dimensions={2}, to_apply=%region_24.2460
  %multiply.2691 = f32[2,8192]{1,0} multiply(%reduce.152, %broadcast.7109)
  %add.2706 = f32[2,8192]{1,0} add(%multiply.2691, %broadcast.7110)
  %rsqrt.73 = f32[2,8192]{1,0} rsqrt(%add.2706)
  %broadcast.7585 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.73), dimensions={0,1}
  %multiply.2692 = f32[2,8192,4096]{2,1,0} multiply(%convert.678, %broadcast.7585)
  %convert.679 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2692)
  %param.48 = f32[4096]{0} parameter(239), sharding={replicated}
  %convert.680 = bf16[4096]{0} convert(%param.48)
  %broadcast.7586 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.680), dimensions={2}
  %multiply.2693 = bf16[2,8192,4096]{2,1,0} multiply(%convert.679, %broadcast.7586)
  %copy.1252 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2693)
  %param.49 = f32[256,14336]{1,0} parameter(236), sharding={devices=[16,1]<=[16]}
  %convert.681 = bf16[256,14336]{1,0} convert(%param.49)
  %all-gather.33 = bf16[4096,14336]{1,0} all-gather(%convert.681), channel_id=34, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.131 = bf16[2,8192,14336]{2,1,0} dot(%copy.1252, %all-gather.33), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.33 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.131), exponent_bits=8, mantissa_bits=7
  %negate.781 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.33)
  %exponential.130 = bf16[2,8192,14336]{2,1,0} exponential(%negate.781)
  %add.2707 = bf16[2,8192,14336]{2,1,0} add(%exponential.130, %broadcast.7215)
  %divide.579 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2707)
  %multiply.2694 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.33, %divide.579)
  %param.50 = f32[256,14336]{1,0} parameter(237), sharding={devices=[16,1]<=[16]}
  %convert.682 = bf16[256,14336]{1,0} convert(%param.50)
  %all-gather.34 = bf16[4096,14336]{1,0} all-gather(%convert.682), channel_id=35, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.132 = bf16[2,8192,14336]{2,1,0} dot(%copy.1252, %all-gather.34), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.34 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.132), exponent_bits=8, mantissa_bits=7
  %multiply.2695 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.2694, %reduce-precision.34)
  %copy.1253 = bf16[2,8192,14336]{2,1,0} copy(%multiply.2695)
  %param.51 = f32[14336,256]{1,0} parameter(238), sharding={devices=[1,16]<=[16]}
  %convert.683 = bf16[14336,256]{1,0} convert(%param.51)
  %all-gather.35 = bf16[14336,4096]{1,0} all-gather(%convert.683), channel_id=36, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.133 = bf16[2,8192,4096]{2,1,0} dot(%copy.1253, %all-gather.35), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1254 = bf16[2,8192,4096]{2,1,0} copy(%dot.133)
  %add.2709 = bf16[2,8192,4096]{2,1,0} add(%copy.1254, %add.2705)
  %copy.1255 = bf16[2,8192,4096]{2,1,0} copy(%add.2709)
  %copy.1256 = bf16[2,8192,4096]{2,1,0} copy(%copy.1255)
  %convert.684 = f32[2,8192,4096]{2,1,0} convert(%copy.1256)
  %multiply.2696 = f32[2,8192,4096]{2,1,0} multiply(%convert.684, %convert.684)
  %reduce.153 = f32[2,8192]{1,0} reduce(%multiply.2696, %constant.5451), dimensions={2}, to_apply=%region_25.2498
  %multiply.2697 = f32[2,8192]{1,0} multiply(%reduce.153, %broadcast.7109)
  %add.2710 = f32[2,8192]{1,0} add(%multiply.2697, %broadcast.7110)
  %rsqrt.74 = f32[2,8192]{1,0} rsqrt(%add.2710)
  %broadcast.7591 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.74), dimensions={0,1}
  %multiply.2698 = f32[2,8192,4096]{2,1,0} multiply(%convert.684, %broadcast.7591)
  %convert.685 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2698)
  %param.52 = f32[4096]{0} parameter(249), sharding={replicated}
  %convert.686 = bf16[4096]{0} convert(%param.52)
  %broadcast.7592 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.686), dimensions={2}
  %multiply.2699 = bf16[2,8192,4096]{2,1,0} multiply(%convert.685, %broadcast.7592)
  %copy.1257 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2699)
  %copy.1258 = bf16[2,8192,4096]{2,1,0} copy(%copy.1257)
  %param.53 = f32[256,32,128]{2,1,0} parameter(252), sharding={devices=[16,1,1]<=[16]}
  %convert.687 = bf16[256,32,128]{2,1,0} convert(%param.53)
  %all-gather.36 = bf16[4096,32,128]{2,1,0} all-gather(%convert.687), channel_id=37, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.134 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1258, %all-gather.36), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.35 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.134), exponent_bits=8, mantissa_bits=7
  %convert.688 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.35)
  %multiply.2710 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.688, %broadcast.7132)
  %slice.45 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.35), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.46 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.35), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.20 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.45, %slice.46), dimensions={3}
  %slice.47 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.35), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.48 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.35), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.21 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.47, %slice.48), dimensions={3}
  %select.1246 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.20, %concatenate.21)
  %convert.693 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1246)
  %multiply.2715 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.693, %broadcast.7141)
  %multiply.2716 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.2715, %broadcast.7145)
  %add.2714 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2710, %multiply.2716)
  %convert.695 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2714)
  %copy.1259 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.695)
  %param.54 = f32[256,8,128]{2,1,0} parameter(250), sharding={devices=[16,1,1]<=[16]}
  %convert.696 = bf16[256,8,128]{2,1,0} convert(%param.54)
  %all-gather.37 = bf16[4096,8,128]{2,1,0} all-gather(%convert.696), channel_id=38, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.135 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1258, %all-gather.37), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.36 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.135), exponent_bits=8, mantissa_bits=7
  %convert.697 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.36)
  %multiply.2727 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.697, %broadcast.7159)
  %slice.49 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.36), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.50 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.36), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.22 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.49, %slice.50), dimensions={3}
  %slice.51 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.36), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.52 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.36), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.23 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.51, %slice.52), dimensions={3}
  %select.1250 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.22, %concatenate.23)
  %convert.702 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1250)
  %multiply.2732 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.702, %broadcast.7168)
  %multiply.2733 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.2732, %broadcast.7171)
  %add.2719 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.2727, %multiply.2733)
  %convert.704 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2719)
  %copy.1261 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.704)
  %param.55 = f32[256,8,128]{2,1,0} parameter(253), sharding={devices=[16,1,1]<=[16]}
  %convert.705 = bf16[256,8,128]{2,1,0} convert(%param.55)
  %all-gather.38 = bf16[4096,8,128]{2,1,0} all-gather(%convert.705), channel_id=39, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.136 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1258, %all-gather.38), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.37 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.136), exponent_bits=8, mantissa_bits=7
  %copy.1262 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.37)
  %custom-call.4 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1259, %copy.1261, %copy.1262, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.32 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.4), index=0
  %reduce-precision.38 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.32), exponent_bits=8, mantissa_bits=7
  %copy.1263 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.38)
  %param.56 = f32[32,128,256]{2,1,0} parameter(251), sharding={devices=[1,1,16]<=[16]}
  %convert.710 = bf16[32,128,256]{2,1,0} convert(%param.56)
  %all-gather.39 = bf16[32,128,4096]{2,1,0} all-gather(%convert.710), channel_id=40, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.137 = bf16[2,8192,4096]{2,1,0} dot(%copy.1263, %all-gather.39), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.39 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.137), exponent_bits=8, mantissa_bits=7
  %copy.1264 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.39)
  %add.2732 = bf16[2,8192,4096]{2,1,0} add(%copy.1256, %copy.1264)
  %convert.711 = f32[2,8192,4096]{2,1,0} convert(%add.2732)
  %multiply.2735 = f32[2,8192,4096]{2,1,0} multiply(%convert.711, %convert.711)
  %reduce.157 = f32[2,8192]{1,0} reduce(%multiply.2735, %constant.5451), dimensions={2}, to_apply=%region_29.2740
  %multiply.2737 = f32[2,8192]{1,0} multiply(%reduce.157, %broadcast.7109)
  %add.2733 = f32[2,8192]{1,0} add(%multiply.2737, %broadcast.7110)
  %rsqrt.75 = f32[2,8192]{1,0} rsqrt(%add.2733)
  %broadcast.7680 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.75), dimensions={0,1}
  %multiply.2738 = f32[2,8192,4096]{2,1,0} multiply(%convert.711, %broadcast.7680)
  %convert.712 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2738)
  %param.57 = f32[4096]{0} parameter(248), sharding={replicated}
  %convert.713 = bf16[4096]{0} convert(%param.57)
  %broadcast.7681 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.713), dimensions={2}
  %multiply.2739 = bf16[2,8192,4096]{2,1,0} multiply(%convert.712, %broadcast.7681)
  %copy.1265 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2739)
  %param.58 = f32[256,14336]{1,0} parameter(245), sharding={devices=[16,1]<=[16]}
  %convert.714 = bf16[256,14336]{1,0} convert(%param.58)
  %all-gather.40 = bf16[4096,14336]{1,0} all-gather(%convert.714), channel_id=41, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.138 = bf16[2,8192,14336]{2,1,0} dot(%copy.1265, %all-gather.40), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.40 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.138), exponent_bits=8, mantissa_bits=7
  %negate.784 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.40)
  %exponential.131 = bf16[2,8192,14336]{2,1,0} exponential(%negate.784)
  %add.2735 = bf16[2,8192,14336]{2,1,0} add(%exponential.131, %broadcast.7215)
  %divide.586 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2735)
  %multiply.2740 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.40, %divide.586)
  %param.59 = f32[256,14336]{1,0} parameter(246), sharding={devices=[16,1]<=[16]}
  %convert.715 = bf16[256,14336]{1,0} convert(%param.59)
  %all-gather.41 = bf16[4096,14336]{1,0} all-gather(%convert.715), channel_id=42, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.139 = bf16[2,8192,14336]{2,1,0} dot(%copy.1265, %all-gather.41), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.41 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.139), exponent_bits=8, mantissa_bits=7
  %multiply.2741 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.2740, %reduce-precision.41)
  %copy.1266 = bf16[2,8192,14336]{2,1,0} copy(%multiply.2741)
  %param.60 = f32[14336,256]{1,0} parameter(247), sharding={devices=[1,16]<=[16]}
  %convert.716 = bf16[14336,256]{1,0} convert(%param.60)
  %all-gather.42 = bf16[14336,4096]{1,0} all-gather(%convert.716), channel_id=43, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.140 = bf16[2,8192,4096]{2,1,0} dot(%copy.1266, %all-gather.42), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1267 = bf16[2,8192,4096]{2,1,0} copy(%dot.140)
  %add.2736 = bf16[2,8192,4096]{2,1,0} add(%copy.1267, %add.2732)
  %copy.1268 = bf16[2,8192,4096]{2,1,0} copy(%add.2736)
  %copy.1269 = bf16[2,8192,4096]{2,1,0} copy(%copy.1268)
  %convert.717 = f32[2,8192,4096]{2,1,0} convert(%copy.1269)
  %multiply.2742 = f32[2,8192,4096]{2,1,0} multiply(%convert.717, %convert.717)
  %reduce.158 = f32[2,8192]{1,0} reduce(%multiply.2742, %constant.5451), dimensions={2}, to_apply=%region_30.2778
  %multiply.2743 = f32[2,8192]{1,0} multiply(%reduce.158, %broadcast.7109)
  %add.2737 = f32[2,8192]{1,0} add(%multiply.2743, %broadcast.7110)
  %rsqrt.76 = f32[2,8192]{1,0} rsqrt(%add.2737)
  %broadcast.7685 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.76), dimensions={0,1}
  %multiply.2744 = f32[2,8192,4096]{2,1,0} multiply(%convert.717, %broadcast.7685)
  %convert.718 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2744)
  %param.61 = f32[4096]{0} parameter(258), sharding={replicated}
  %convert.719 = bf16[4096]{0} convert(%param.61)
  %broadcast.7686 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.719), dimensions={2}
  %multiply.2745 = bf16[2,8192,4096]{2,1,0} multiply(%convert.718, %broadcast.7686)
  %copy.1270 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2745)
  %copy.1271 = bf16[2,8192,4096]{2,1,0} copy(%copy.1270)
  %param.62 = f32[256,32,128]{2,1,0} parameter(261), sharding={devices=[16,1,1]<=[16]}
  %convert.720 = bf16[256,32,128]{2,1,0} convert(%param.62)
  %all-gather.43 = bf16[4096,32,128]{2,1,0} all-gather(%convert.720), channel_id=44, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.141 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1271, %all-gather.43), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.42 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.141), exponent_bits=8, mantissa_bits=7
  %convert.721 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.42)
  %multiply.2758 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.721, %broadcast.7132)
  %slice.54 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.42), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.55 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.42), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.24 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.54, %slice.55), dimensions={3}
  %slice.56 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.42), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.57 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.42), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.25 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.56, %slice.57), dimensions={3}
  %select.1275 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.24, %concatenate.25)
  %convert.726 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1275)
  %multiply.2763 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.726, %broadcast.7141)
  %multiply.2764 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.2763, %broadcast.7145)
  %add.2742 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2758, %multiply.2764)
  %convert.728 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2742)
  %copy.1272 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.728)
  %param.63 = f32[256,8,128]{2,1,0} parameter(259), sharding={devices=[16,1,1]<=[16]}
  %convert.729 = bf16[256,8,128]{2,1,0} convert(%param.63)
  %all-gather.44 = bf16[4096,8,128]{2,1,0} all-gather(%convert.729), channel_id=45, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.142 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1271, %all-gather.44), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.43 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.142), exponent_bits=8, mantissa_bits=7
  %convert.730 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.43)
  %multiply.2777 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.730, %broadcast.7159)
  %slice.58 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.43), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.59 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.43), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.26 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.58, %slice.59), dimensions={3}
  %slice.60 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.43), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.61 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.43), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.27 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.60, %slice.61), dimensions={3}
  %select.1279 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.26, %concatenate.27)
  %convert.735 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1279)
  %multiply.2782 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.735, %broadcast.7168)
  %multiply.2783 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.2782, %broadcast.7171)
  %add.2747 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.2777, %multiply.2783)
  %convert.737 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2747)
  %copy.1274 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.737)
  %param.64 = f32[256,8,128]{2,1,0} parameter(262), sharding={devices=[16,1,1]<=[16]}
  %convert.738 = bf16[256,8,128]{2,1,0} convert(%param.64)
  %all-gather.45 = bf16[4096,8,128]{2,1,0} all-gather(%convert.738), channel_id=46, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.143 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1271, %all-gather.45), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.44 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.143), exponent_bits=8, mantissa_bits=7
  %copy.1275 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.44)
  %custom-call.5 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1272, %copy.1274, %copy.1275, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.38 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.5), index=0
  %reduce-precision.45 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.38), exponent_bits=8, mantissa_bits=7
  %copy.1276 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.45)
  %param.65 = f32[32,128,256]{2,1,0} parameter(260), sharding={devices=[1,1,16]<=[16]}
  %convert.743 = bf16[32,128,256]{2,1,0} convert(%param.65)
  %all-gather.46 = bf16[32,128,4096]{2,1,0} all-gather(%convert.743), channel_id=47, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.144 = bf16[2,8192,4096]{2,1,0} dot(%copy.1276, %all-gather.46), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.46 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.144), exponent_bits=8, mantissa_bits=7
  %copy.1277 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.46)
  %add.2760 = bf16[2,8192,4096]{2,1,0} add(%copy.1269, %copy.1277)
  %convert.744 = f32[2,8192,4096]{2,1,0} convert(%add.2760)
  %multiply.2785 = f32[2,8192,4096]{2,1,0} multiply(%convert.744, %convert.744)
  %reduce.162 = f32[2,8192]{1,0} reduce(%multiply.2785, %constant.5451), dimensions={2}, to_apply=%region_34.3020
  %multiply.2786 = f32[2,8192]{1,0} multiply(%reduce.162, %broadcast.7109)
  %add.2761 = f32[2,8192]{1,0} add(%multiply.2786, %broadcast.7110)
  %rsqrt.77 = f32[2,8192]{1,0} rsqrt(%add.2761)
  %broadcast.7779 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.77), dimensions={0,1}
  %multiply.2788 = f32[2,8192,4096]{2,1,0} multiply(%convert.744, %broadcast.7779)
  %convert.745 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2788)
  %param.66 = f32[4096]{0} parameter(257), sharding={replicated}
  %convert.746 = bf16[4096]{0} convert(%param.66)
  %broadcast.7780 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.746), dimensions={2}
  %multiply.2789 = bf16[2,8192,4096]{2,1,0} multiply(%convert.745, %broadcast.7780)
  %copy.1278 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2789)
  %param.67 = f32[256,14336]{1,0} parameter(254), sharding={devices=[16,1]<=[16]}
  %convert.747 = bf16[256,14336]{1,0} convert(%param.67)
  %all-gather.47 = bf16[4096,14336]{1,0} all-gather(%convert.747), channel_id=48, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.145 = bf16[2,8192,14336]{2,1,0} dot(%copy.1278, %all-gather.47), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.47 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.145), exponent_bits=8, mantissa_bits=7
  %negate.787 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.47)
  %exponential.132 = bf16[2,8192,14336]{2,1,0} exponential(%negate.787)
  %add.2762 = bf16[2,8192,14336]{2,1,0} add(%exponential.132, %broadcast.7215)
  %divide.593 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2762)
  %multiply.2790 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.47, %divide.593)
  %param.68 = f32[256,14336]{1,0} parameter(255), sharding={devices=[16,1]<=[16]}
  %convert.748 = bf16[256,14336]{1,0} convert(%param.68)
  %all-gather.48 = bf16[4096,14336]{1,0} all-gather(%convert.748), channel_id=49, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.146 = bf16[2,8192,14336]{2,1,0} dot(%copy.1278, %all-gather.48), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.48 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.146), exponent_bits=8, mantissa_bits=7
  %multiply.2791 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.2790, %reduce-precision.48)
  %copy.1279 = bf16[2,8192,14336]{2,1,0} copy(%multiply.2791)
  %param.69 = f32[14336,256]{1,0} parameter(256), sharding={devices=[1,16]<=[16]}
  %convert.749 = bf16[14336,256]{1,0} convert(%param.69)
  %all-gather.49 = bf16[14336,4096]{1,0} all-gather(%convert.749), channel_id=50, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.147 = bf16[2,8192,4096]{2,1,0} dot(%copy.1279, %all-gather.49), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1280 = bf16[2,8192,4096]{2,1,0} copy(%dot.147)
  %add.2763 = bf16[2,8192,4096]{2,1,0} add(%copy.1280, %add.2760)
  %copy.1281 = bf16[2,8192,4096]{2,1,0} copy(%add.2763)
  %copy.1282 = bf16[2,8192,4096]{2,1,0} copy(%copy.1281)
  %convert.750 = f32[2,8192,4096]{2,1,0} convert(%copy.1282)
  %multiply.2792 = f32[2,8192,4096]{2,1,0} multiply(%convert.750, %convert.750)
  %reduce.163 = f32[2,8192]{1,0} reduce(%multiply.2792, %constant.5451), dimensions={2}, to_apply=%region_35.3058
  %multiply.2793 = f32[2,8192]{1,0} multiply(%reduce.163, %broadcast.7109)
  %add.2764 = f32[2,8192]{1,0} add(%multiply.2793, %broadcast.7110)
  %rsqrt.78 = f32[2,8192]{1,0} rsqrt(%add.2764)
  %broadcast.7784 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.78), dimensions={0,1}
  %multiply.2795 = f32[2,8192,4096]{2,1,0} multiply(%convert.750, %broadcast.7784)
  %convert.751 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2795)
  %param.70 = f32[4096]{0} parameter(267), sharding={replicated}
  %convert.752 = bf16[4096]{0} convert(%param.70)
  %broadcast.7785 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.752), dimensions={2}
  %multiply.2796 = bf16[2,8192,4096]{2,1,0} multiply(%convert.751, %broadcast.7785)
  %copy.1283 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2796)
  %copy.1284 = bf16[2,8192,4096]{2,1,0} copy(%copy.1283)
  %param.71 = f32[256,32,128]{2,1,0} parameter(270), sharding={devices=[16,1,1]<=[16]}
  %convert.753 = bf16[256,32,128]{2,1,0} convert(%param.71)
  %all-gather.50 = bf16[4096,32,128]{2,1,0} all-gather(%convert.753), channel_id=51, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.148 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1284, %all-gather.50), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.49 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.148), exponent_bits=8, mantissa_bits=7
  %convert.754 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.49)
  %multiply.2807 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.754, %broadcast.7132)
  %slice.63 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.49), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.64 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.49), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.28 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.63, %slice.64), dimensions={3}
  %slice.65 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.49), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.66 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.49), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.29 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.65, %slice.66), dimensions={3}
  %select.1305 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.28, %concatenate.29)
  %convert.759 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1305)
  %multiply.2812 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.759, %broadcast.7141)
  %multiply.2813 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.2812, %broadcast.7145)
  %add.2768 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2807, %multiply.2813)
  %convert.761 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2768)
  %copy.1285 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.761)
  %param.72 = f32[256,8,128]{2,1,0} parameter(268), sharding={devices=[16,1,1]<=[16]}
  %convert.762 = bf16[256,8,128]{2,1,0} convert(%param.72)
  %all-gather.51 = bf16[4096,8,128]{2,1,0} all-gather(%convert.762), channel_id=52, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.149 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1284, %all-gather.51), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.50 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.149), exponent_bits=8, mantissa_bits=7
  %convert.763 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.50)
  %multiply.2825 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.763, %broadcast.7159)
  %slice.67 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.50), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.68 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.50), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.30 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.67, %slice.68), dimensions={3}
  %slice.69 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.50), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.70 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.50), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.31 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.69, %slice.70), dimensions={3}
  %select.1309 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.30, %concatenate.31)
  %convert.768 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1309)
  %multiply.2830 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.768, %broadcast.7168)
  %multiply.2831 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.2830, %broadcast.7171)
  %add.2773 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.2825, %multiply.2831)
  %convert.770 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2773)
  %copy.1287 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.770)
  %param.73 = f32[256,8,128]{2,1,0} parameter(271), sharding={devices=[16,1,1]<=[16]}
  %convert.771 = bf16[256,8,128]{2,1,0} convert(%param.73)
  %all-gather.52 = bf16[4096,8,128]{2,1,0} all-gather(%convert.771), channel_id=53, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.150 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1284, %all-gather.52), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.51 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.150), exponent_bits=8, mantissa_bits=7
  %copy.1288 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.51)
  %custom-call.6 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1285, %copy.1287, %copy.1288, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.44 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.6), index=0
  %reduce-precision.52 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.44), exponent_bits=8, mantissa_bits=7
  %copy.1289 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.52)
  %param.74 = f32[32,128,256]{2,1,0} parameter(269), sharding={devices=[1,1,16]<=[16]}
  %convert.776 = bf16[32,128,256]{2,1,0} convert(%param.74)
  %all-gather.53 = bf16[32,128,4096]{2,1,0} all-gather(%convert.776), channel_id=54, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.151 = bf16[2,8192,4096]{2,1,0} dot(%copy.1289, %all-gather.53), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.53 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.151), exponent_bits=8, mantissa_bits=7
  %copy.1290 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.53)
  %add.2788 = bf16[2,8192,4096]{2,1,0} add(%copy.1282, %copy.1290)
  %convert.777 = f32[2,8192,4096]{2,1,0} convert(%add.2788)
  %multiply.2833 = f32[2,8192,4096]{2,1,0} multiply(%convert.777, %convert.777)
  %reduce.167 = f32[2,8192]{1,0} reduce(%multiply.2833, %constant.5451), dimensions={2}, to_apply=%region_39.3300
  %multiply.2834 = f32[2,8192]{1,0} multiply(%reduce.167, %broadcast.7109)
  %add.2789 = f32[2,8192]{1,0} add(%multiply.2834, %broadcast.7110)
  %rsqrt.79 = f32[2,8192]{1,0} rsqrt(%add.2789)
  %broadcast.7869 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.79), dimensions={0,1}
  %multiply.2835 = f32[2,8192,4096]{2,1,0} multiply(%convert.777, %broadcast.7869)
  %convert.778 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2835)
  %param.75 = f32[4096]{0} parameter(266), sharding={replicated}
  %convert.779 = bf16[4096]{0} convert(%param.75)
  %broadcast.7870 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.779), dimensions={2}
  %multiply.2836 = bf16[2,8192,4096]{2,1,0} multiply(%convert.778, %broadcast.7870)
  %copy.1291 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2836)
  %param.76 = f32[256,14336]{1,0} parameter(263), sharding={devices=[16,1]<=[16]}
  %convert.780 = bf16[256,14336]{1,0} convert(%param.76)
  %all-gather.54 = bf16[4096,14336]{1,0} all-gather(%convert.780), channel_id=55, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.152 = bf16[2,8192,14336]{2,1,0} dot(%copy.1291, %all-gather.54), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.54 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.152), exponent_bits=8, mantissa_bits=7
  %negate.790 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.54)
  %exponential.133 = bf16[2,8192,14336]{2,1,0} exponential(%negate.790)
  %add.2790 = bf16[2,8192,14336]{2,1,0} add(%exponential.133, %broadcast.7215)
  %divide.600 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2790)
  %multiply.2837 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.54, %divide.600)
  %param.77 = f32[256,14336]{1,0} parameter(264), sharding={devices=[16,1]<=[16]}
  %convert.781 = bf16[256,14336]{1,0} convert(%param.77)
  %all-gather.55 = bf16[4096,14336]{1,0} all-gather(%convert.781), channel_id=56, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.153 = bf16[2,8192,14336]{2,1,0} dot(%copy.1291, %all-gather.55), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.55 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.153), exponent_bits=8, mantissa_bits=7
  %multiply.2838 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.2837, %reduce-precision.55)
  %copy.1292 = bf16[2,8192,14336]{2,1,0} copy(%multiply.2838)
  %param.78 = f32[14336,256]{1,0} parameter(265), sharding={devices=[1,16]<=[16]}
  %convert.782 = bf16[14336,256]{1,0} convert(%param.78)
  %all-gather.56 = bf16[14336,4096]{1,0} all-gather(%convert.782), channel_id=57, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.154 = bf16[2,8192,4096]{2,1,0} dot(%copy.1292, %all-gather.56), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1293 = bf16[2,8192,4096]{2,1,0} copy(%dot.154)
  %add.2791 = bf16[2,8192,4096]{2,1,0} add(%copy.1293, %add.2788)
  %copy.1294 = bf16[2,8192,4096]{2,1,0} copy(%add.2791)
  %copy.1295 = bf16[2,8192,4096]{2,1,0} copy(%copy.1294)
  %convert.783 = f32[2,8192,4096]{2,1,0} convert(%copy.1295)
  %multiply.2839 = f32[2,8192,4096]{2,1,0} multiply(%convert.783, %convert.783)
  %reduce.168 = f32[2,8192]{1,0} reduce(%multiply.2839, %constant.5451), dimensions={2}, to_apply=%region_40.3338
  %multiply.2841 = f32[2,8192]{1,0} multiply(%reduce.168, %broadcast.7109)
  %add.2792 = f32[2,8192]{1,0} add(%multiply.2841, %broadcast.7110)
  %rsqrt.80 = f32[2,8192]{1,0} rsqrt(%add.2792)
  %broadcast.7874 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.80), dimensions={0,1}
  %multiply.2843 = f32[2,8192,4096]{2,1,0} multiply(%convert.783, %broadcast.7874)
  %convert.784 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2843)
  %param.79 = f32[4096]{0} parameter(276), sharding={replicated}
  %convert.785 = bf16[4096]{0} convert(%param.79)
  %broadcast.7875 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.785), dimensions={2}
  %multiply.2844 = bf16[2,8192,4096]{2,1,0} multiply(%convert.784, %broadcast.7875)
  %copy.1296 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2844)
  %copy.1297 = bf16[2,8192,4096]{2,1,0} copy(%copy.1296)
  %param.80 = f32[256,32,128]{2,1,0} parameter(279), sharding={devices=[16,1,1]<=[16]}
  %convert.786 = bf16[256,32,128]{2,1,0} convert(%param.80)
  %all-gather.57 = bf16[4096,32,128]{2,1,0} all-gather(%convert.786), channel_id=58, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.155 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1297, %all-gather.57), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.56 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.155), exponent_bits=8, mantissa_bits=7
  %convert.787 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.56)
  %multiply.2855 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.787, %broadcast.7132)
  %slice.72 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.56), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.73 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.56), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.32 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.72, %slice.73), dimensions={3}
  %slice.74 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.56), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.75 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.56), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.33 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.74, %slice.75), dimensions={3}
  %select.1334 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.32, %concatenate.33)
  %convert.792 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1334)
  %multiply.2860 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.792, %broadcast.7141)
  %multiply.2861 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.2860, %broadcast.7145)
  %add.2796 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2855, %multiply.2861)
  %convert.794 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2796)
  %copy.1298 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.794)
  %param.81 = f32[256,8,128]{2,1,0} parameter(277), sharding={devices=[16,1,1]<=[16]}
  %convert.795 = bf16[256,8,128]{2,1,0} convert(%param.81)
  %all-gather.58 = bf16[4096,8,128]{2,1,0} all-gather(%convert.795), channel_id=59, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.156 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1297, %all-gather.58), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.57 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.156), exponent_bits=8, mantissa_bits=7
  %convert.796 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.57)
  %multiply.2873 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.796, %broadcast.7159)
  %slice.76 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.57), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.77 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.57), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.34 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.76, %slice.77), dimensions={3}
  %slice.78 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.57), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.79 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.57), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.35 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.78, %slice.79), dimensions={3}
  %select.1338 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.34, %concatenate.35)
  %convert.801 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1338)
  %multiply.2879 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.801, %broadcast.7168)
  %multiply.2881 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.2879, %broadcast.7171)
  %add.2800 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.2873, %multiply.2881)
  %convert.803 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2800)
  %copy.1300 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.803)
  %param.82 = f32[256,8,128]{2,1,0} parameter(280), sharding={devices=[16,1,1]<=[16]}
  %convert.804 = bf16[256,8,128]{2,1,0} convert(%param.82)
  %all-gather.59 = bf16[4096,8,128]{2,1,0} all-gather(%convert.804), channel_id=60, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.157 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1297, %all-gather.59), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.58 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.157), exponent_bits=8, mantissa_bits=7
  %copy.1301 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.58)
  %custom-call.7 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1298, %copy.1300, %copy.1301, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.50 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.7), index=0
  %reduce-precision.59 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.50), exponent_bits=8, mantissa_bits=7
  %copy.1302 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.59)
  %param.83 = f32[32,128,256]{2,1,0} parameter(278), sharding={devices=[1,1,16]<=[16]}
  %convert.809 = bf16[32,128,256]{2,1,0} convert(%param.83)
  %all-gather.60 = bf16[32,128,4096]{2,1,0} all-gather(%convert.809), channel_id=61, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.158 = bf16[2,8192,4096]{2,1,0} dot(%copy.1302, %all-gather.60), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.60 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.158), exponent_bits=8, mantissa_bits=7
  %copy.1303 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.60)
  %add.2813 = bf16[2,8192,4096]{2,1,0} add(%copy.1295, %copy.1303)
  %convert.810 = f32[2,8192,4096]{2,1,0} convert(%add.2813)
  %multiply.2883 = f32[2,8192,4096]{2,1,0} multiply(%convert.810, %convert.810)
  %reduce.172 = f32[2,8192]{1,0} reduce(%multiply.2883, %constant.5451), dimensions={2}, to_apply=%region_44.3580
  %multiply.2884 = f32[2,8192]{1,0} multiply(%reduce.172, %broadcast.7109)
  %add.2814 = f32[2,8192]{1,0} add(%multiply.2884, %broadcast.7110)
  %rsqrt.81 = f32[2,8192]{1,0} rsqrt(%add.2814)
  %broadcast.7963 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.81), dimensions={0,1}
  %multiply.2885 = f32[2,8192,4096]{2,1,0} multiply(%convert.810, %broadcast.7963)
  %convert.811 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2885)
  %param.84 = f32[4096]{0} parameter(275), sharding={replicated}
  %convert.812 = bf16[4096]{0} convert(%param.84)
  %broadcast.7964 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.812), dimensions={2}
  %multiply.2886 = bf16[2,8192,4096]{2,1,0} multiply(%convert.811, %broadcast.7964)
  %copy.1304 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2886)
  %param.85 = f32[256,14336]{1,0} parameter(272), sharding={devices=[16,1]<=[16]}
  %convert.813 = bf16[256,14336]{1,0} convert(%param.85)
  %all-gather.61 = bf16[4096,14336]{1,0} all-gather(%convert.813), channel_id=62, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.159 = bf16[2,8192,14336]{2,1,0} dot(%copy.1304, %all-gather.61), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.61 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.159), exponent_bits=8, mantissa_bits=7
  %negate.793 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.61)
  %exponential.134 = bf16[2,8192,14336]{2,1,0} exponential(%negate.793)
  %add.2815 = bf16[2,8192,14336]{2,1,0} add(%exponential.134, %broadcast.7215)
  %divide.607 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2815)
  %multiply.2887 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.61, %divide.607)
  %param.86 = f32[256,14336]{1,0} parameter(273), sharding={devices=[16,1]<=[16]}
  %convert.814 = bf16[256,14336]{1,0} convert(%param.86)
  %all-gather.62 = bf16[4096,14336]{1,0} all-gather(%convert.814), channel_id=63, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.160 = bf16[2,8192,14336]{2,1,0} dot(%copy.1304, %all-gather.62), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.62 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.160), exponent_bits=8, mantissa_bits=7
  %multiply.2888 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.2887, %reduce-precision.62)
  %copy.1305 = bf16[2,8192,14336]{2,1,0} copy(%multiply.2888)
  %param.87 = f32[14336,256]{1,0} parameter(274), sharding={devices=[1,16]<=[16]}
  %convert.815 = bf16[14336,256]{1,0} convert(%param.87)
  %all-gather.63 = bf16[14336,4096]{1,0} all-gather(%convert.815), channel_id=64, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.161 = bf16[2,8192,4096]{2,1,0} dot(%copy.1305, %all-gather.63), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1306 = bf16[2,8192,4096]{2,1,0} copy(%dot.161)
  %add.2816 = bf16[2,8192,4096]{2,1,0} add(%copy.1306, %add.2813)
  %copy.1307 = bf16[2,8192,4096]{2,1,0} copy(%add.2816)
  %copy.1308 = bf16[2,8192,4096]{2,1,0} copy(%copy.1307)
  %convert.816 = f32[2,8192,4096]{2,1,0} convert(%copy.1308)
  %multiply.2889 = f32[2,8192,4096]{2,1,0} multiply(%convert.816, %convert.816)
  %reduce.173 = f32[2,8192]{1,0} reduce(%multiply.2889, %constant.5451), dimensions={2}, to_apply=%region_45.3618
  %multiply.2890 = f32[2,8192]{1,0} multiply(%reduce.173, %broadcast.7109)
  %add.2817 = f32[2,8192]{1,0} add(%multiply.2890, %broadcast.7110)
  %rsqrt.82 = f32[2,8192]{1,0} rsqrt(%add.2817)
  %broadcast.7969 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.82), dimensions={0,1}
  %multiply.2891 = f32[2,8192,4096]{2,1,0} multiply(%convert.816, %broadcast.7969)
  %convert.817 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2891)
  %param.88 = f32[4096]{0} parameter(285), sharding={replicated}
  %convert.818 = bf16[4096]{0} convert(%param.88)
  %broadcast.7972 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.818), dimensions={2}
  %multiply.2892 = bf16[2,8192,4096]{2,1,0} multiply(%convert.817, %broadcast.7972)
  %copy.1309 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2892)
  %copy.1310 = bf16[2,8192,4096]{2,1,0} copy(%copy.1309)
  %param.89 = f32[256,32,128]{2,1,0} parameter(288), sharding={devices=[16,1,1]<=[16]}
  %convert.819 = bf16[256,32,128]{2,1,0} convert(%param.89)
  %all-gather.64 = bf16[4096,32,128]{2,1,0} all-gather(%convert.819), channel_id=65, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.162 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1310, %all-gather.64), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.63 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.162), exponent_bits=8, mantissa_bits=7
  %convert.820 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.63)
  %multiply.2904 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.820, %broadcast.7132)
  %slice.81 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.63), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.82 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.63), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.36 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.81, %slice.82), dimensions={3}
  %slice.83 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.63), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.84 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.63), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.37 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.83, %slice.84), dimensions={3}
  %select.1363 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.36, %concatenate.37)
  %convert.825 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1363)
  %multiply.2909 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.825, %broadcast.7141)
  %multiply.2910 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.2909, %broadcast.7145)
  %add.2821 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2904, %multiply.2910)
  %convert.827 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2821)
  %copy.1311 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.827)
  %param.90 = f32[256,8,128]{2,1,0} parameter(286), sharding={devices=[16,1,1]<=[16]}
  %convert.828 = bf16[256,8,128]{2,1,0} convert(%param.90)
  %all-gather.65 = bf16[4096,8,128]{2,1,0} all-gather(%convert.828), channel_id=66, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.163 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1310, %all-gather.65), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.64 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.163), exponent_bits=8, mantissa_bits=7
  %convert.829 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.64)
  %multiply.2923 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.829, %broadcast.7159)
  %slice.85 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.64), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.86 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.64), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.38 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.85, %slice.86), dimensions={3}
  %slice.87 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.64), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.88 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.64), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.39 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.87, %slice.88), dimensions={3}
  %select.1367 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.38, %concatenate.39)
  %convert.834 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1367)
  %multiply.2928 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.834, %broadcast.7168)
  %multiply.2929 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.2928, %broadcast.7171)
  %add.2825 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.2923, %multiply.2929)
  %convert.836 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2825)
  %copy.1313 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.836)
  %param.91 = f32[256,8,128]{2,1,0} parameter(289), sharding={devices=[16,1,1]<=[16]}
  %convert.837 = bf16[256,8,128]{2,1,0} convert(%param.91)
  %all-gather.66 = bf16[4096,8,128]{2,1,0} all-gather(%convert.837), channel_id=67, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.164 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1310, %all-gather.66), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.65 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.164), exponent_bits=8, mantissa_bits=7
  %copy.1314 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.65)
  %custom-call.8 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1311, %copy.1313, %copy.1314, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.56 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.8), index=0
  %reduce-precision.66 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.56), exponent_bits=8, mantissa_bits=7
  %copy.1315 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.66)
  %param.92 = f32[32,128,256]{2,1,0} parameter(287), sharding={devices=[1,1,16]<=[16]}
  %convert.842 = bf16[32,128,256]{2,1,0} convert(%param.92)
  %all-gather.67 = bf16[32,128,4096]{2,1,0} all-gather(%convert.842), channel_id=68, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.165 = bf16[2,8192,4096]{2,1,0} dot(%copy.1315, %all-gather.67), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.67 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.165), exponent_bits=8, mantissa_bits=7
  %copy.1316 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.67)
  %add.2838 = bf16[2,8192,4096]{2,1,0} add(%copy.1308, %copy.1316)
  %convert.843 = f32[2,8192,4096]{2,1,0} convert(%add.2838)
  %multiply.2931 = f32[2,8192,4096]{2,1,0} multiply(%convert.843, %convert.843)
  %reduce.177 = f32[2,8192]{1,0} reduce(%multiply.2931, %constant.5451), dimensions={2}, to_apply=%region_49.3860
  %multiply.2932 = f32[2,8192]{1,0} multiply(%reduce.177, %broadcast.7109)
  %add.2839 = f32[2,8192]{1,0} add(%multiply.2932, %broadcast.7110)
  %rsqrt.83 = f32[2,8192]{1,0} rsqrt(%add.2839)
  %broadcast.8062 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.83), dimensions={0,1}
  %multiply.2933 = f32[2,8192,4096]{2,1,0} multiply(%convert.843, %broadcast.8062)
  %convert.844 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2933)
  %param.93 = f32[4096]{0} parameter(284), sharding={replicated}
  %convert.845 = bf16[4096]{0} convert(%param.93)
  %broadcast.8063 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.845), dimensions={2}
  %multiply.2934 = bf16[2,8192,4096]{2,1,0} multiply(%convert.844, %broadcast.8063)
  %copy.1317 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2934)
  %param.94 = f32[256,14336]{1,0} parameter(281), sharding={devices=[16,1]<=[16]}
  %convert.846 = bf16[256,14336]{1,0} convert(%param.94)
  %all-gather.68 = bf16[4096,14336]{1,0} all-gather(%convert.846), channel_id=69, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.166 = bf16[2,8192,14336]{2,1,0} dot(%copy.1317, %all-gather.68), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.68 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.166), exponent_bits=8, mantissa_bits=7
  %negate.796 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.68)
  %exponential.135 = bf16[2,8192,14336]{2,1,0} exponential(%negate.796)
  %add.2840 = bf16[2,8192,14336]{2,1,0} add(%exponential.135, %broadcast.7215)
  %divide.614 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2840)
  %multiply.2935 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.68, %divide.614)
  %param.95 = f32[256,14336]{1,0} parameter(282), sharding={devices=[16,1]<=[16]}
  %convert.847 = bf16[256,14336]{1,0} convert(%param.95)
  %all-gather.69 = bf16[4096,14336]{1,0} all-gather(%convert.847), channel_id=70, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.167 = bf16[2,8192,14336]{2,1,0} dot(%copy.1317, %all-gather.69), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.69 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.167), exponent_bits=8, mantissa_bits=7
  %multiply.2936 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.2935, %reduce-precision.69)
  %copy.1318 = bf16[2,8192,14336]{2,1,0} copy(%multiply.2936)
  %param.96 = f32[14336,256]{1,0} parameter(283), sharding={devices=[1,16]<=[16]}
  %convert.848 = bf16[14336,256]{1,0} convert(%param.96)
  %all-gather.70 = bf16[14336,4096]{1,0} all-gather(%convert.848), channel_id=71, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.168 = bf16[2,8192,4096]{2,1,0} dot(%copy.1318, %all-gather.70), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1319 = bf16[2,8192,4096]{2,1,0} copy(%dot.168)
  %add.2841 = bf16[2,8192,4096]{2,1,0} add(%copy.1319, %add.2838)
  %copy.1320 = bf16[2,8192,4096]{2,1,0} copy(%add.2841)
  %copy.1321 = bf16[2,8192,4096]{2,1,0} copy(%copy.1320)
  %convert.849 = f32[2,8192,4096]{2,1,0} convert(%copy.1321)
  %multiply.2937 = f32[2,8192,4096]{2,1,0} multiply(%convert.849, %convert.849)
  %reduce.178 = f32[2,8192]{1,0} reduce(%multiply.2937, %constant.5451), dimensions={2}, to_apply=%region_50.3898
  %multiply.2938 = f32[2,8192]{1,0} multiply(%reduce.178, %broadcast.7109)
  %add.2842 = f32[2,8192]{1,0} add(%multiply.2938, %broadcast.7110)
  %rsqrt.84 = f32[2,8192]{1,0} rsqrt(%add.2842)
  %broadcast.8069 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.84), dimensions={0,1}
  %multiply.2939 = f32[2,8192,4096]{2,1,0} multiply(%convert.849, %broadcast.8069)
  %convert.850 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2939)
  %param.97 = f32[4096]{0} parameter(24), sharding={replicated}
  %convert.851 = bf16[4096]{0} convert(%param.97)
  %broadcast.8070 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.851), dimensions={2}
  %multiply.2940 = bf16[2,8192,4096]{2,1,0} multiply(%convert.850, %broadcast.8070)
  %copy.1322 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2940)
  %copy.1323 = bf16[2,8192,4096]{2,1,0} copy(%copy.1322)
  %param.98 = f32[256,32,128]{2,1,0} parameter(27), sharding={devices=[16,1,1]<=[16]}
  %convert.852 = bf16[256,32,128]{2,1,0} convert(%param.98)
  %all-gather.71 = bf16[4096,32,128]{2,1,0} all-gather(%convert.852), channel_id=72, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.169 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1323, %all-gather.71), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.70 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.169), exponent_bits=8, mantissa_bits=7
  %convert.853 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.70)
  %multiply.2953 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.853, %broadcast.7132)
  %slice.90 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.70), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.91 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.70), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.40 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.90, %slice.91), dimensions={3}
  %slice.92 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.70), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.93 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.70), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.41 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.92, %slice.93), dimensions={3}
  %select.1392 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.40, %concatenate.41)
  %convert.858 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1392)
  %multiply.2959 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.858, %broadcast.7141)
  %multiply.2960 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.2959, %broadcast.7145)
  %add.2847 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2953, %multiply.2960)
  %convert.860 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2847)
  %copy.1324 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.860)
  %param.99 = f32[256,8,128]{2,1,0} parameter(25), sharding={devices=[16,1,1]<=[16]}
  %convert.861 = bf16[256,8,128]{2,1,0} convert(%param.99)
  %all-gather.72 = bf16[4096,8,128]{2,1,0} all-gather(%convert.861), channel_id=73, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.170 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1323, %all-gather.72), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.71 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.170), exponent_bits=8, mantissa_bits=7
  %convert.862 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.71)
  %multiply.2971 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.862, %broadcast.7159)
  %slice.94 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.71), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.95 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.71), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.42 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.94, %slice.95), dimensions={3}
  %slice.96 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.71), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.97 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.71), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.43 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.96, %slice.97), dimensions={3}
  %select.1396 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.42, %concatenate.43)
  %convert.867 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1396)
  %multiply.2976 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.867, %broadcast.7168)
  %multiply.2977 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.2976, %broadcast.7171)
  %add.2851 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.2971, %multiply.2977)
  %convert.869 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2851)
  %copy.1326 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.869)
  %param.100 = f32[256,8,128]{2,1,0} parameter(28), sharding={devices=[16,1,1]<=[16]}
  %convert.870 = bf16[256,8,128]{2,1,0} convert(%param.100)
  %all-gather.73 = bf16[4096,8,128]{2,1,0} all-gather(%convert.870), channel_id=74, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.171 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1323, %all-gather.73), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.72 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.171), exponent_bits=8, mantissa_bits=7
  %copy.1327 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.72)
  %custom-call.9 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1324, %copy.1326, %copy.1327, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.62 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.9), index=0
  %reduce-precision.73 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.62), exponent_bits=8, mantissa_bits=7
  %copy.1328 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.73)
  %param.101 = f32[32,128,256]{2,1,0} parameter(26), sharding={devices=[1,1,16]<=[16]}
  %convert.875 = bf16[32,128,256]{2,1,0} convert(%param.101)
  %all-gather.74 = bf16[32,128,4096]{2,1,0} all-gather(%convert.875), channel_id=75, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.172 = bf16[2,8192,4096]{2,1,0} dot(%copy.1328, %all-gather.74), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.74 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.172), exponent_bits=8, mantissa_bits=7
  %copy.1329 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.74)
  %add.2864 = bf16[2,8192,4096]{2,1,0} add(%copy.1321, %copy.1329)
  %convert.876 = f32[2,8192,4096]{2,1,0} convert(%add.2864)
  %multiply.2979 = f32[2,8192,4096]{2,1,0} multiply(%convert.876, %convert.876)
  %reduce.182 = f32[2,8192]{1,0} reduce(%multiply.2979, %constant.5451), dimensions={2}, to_apply=%region_54.4140
  %multiply.2980 = f32[2,8192]{1,0} multiply(%reduce.182, %broadcast.7109)
  %add.2865 = f32[2,8192]{1,0} add(%multiply.2980, %broadcast.7110)
  %rsqrt.85 = f32[2,8192]{1,0} rsqrt(%add.2865)
  %broadcast.8152 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.85), dimensions={0,1}
  %multiply.2981 = f32[2,8192,4096]{2,1,0} multiply(%convert.876, %broadcast.8152)
  %convert.877 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2981)
  %param.102 = f32[4096]{0} parameter(23), sharding={replicated}
  %convert.878 = bf16[4096]{0} convert(%param.102)
  %broadcast.8153 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.878), dimensions={2}
  %multiply.2982 = bf16[2,8192,4096]{2,1,0} multiply(%convert.877, %broadcast.8153)
  %copy.1330 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2982)
  %param.103 = f32[256,14336]{1,0} parameter(20), sharding={devices=[16,1]<=[16]}
  %convert.879 = bf16[256,14336]{1,0} convert(%param.103)
  %all-gather.75 = bf16[4096,14336]{1,0} all-gather(%convert.879), channel_id=76, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.173 = bf16[2,8192,14336]{2,1,0} dot(%copy.1330, %all-gather.75), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.75 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.173), exponent_bits=8, mantissa_bits=7
  %negate.799 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.75)
  %exponential.136 = bf16[2,8192,14336]{2,1,0} exponential(%negate.799)
  %add.2866 = bf16[2,8192,14336]{2,1,0} add(%exponential.136, %broadcast.7215)
  %divide.621 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2866)
  %multiply.2983 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.75, %divide.621)
  %param.104 = f32[256,14336]{1,0} parameter(21), sharding={devices=[16,1]<=[16]}
  %convert.880 = bf16[256,14336]{1,0} convert(%param.104)
  %all-gather.76 = bf16[4096,14336]{1,0} all-gather(%convert.880), channel_id=77, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.174 = bf16[2,8192,14336]{2,1,0} dot(%copy.1330, %all-gather.76), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.76 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.174), exponent_bits=8, mantissa_bits=7
  %multiply.2984 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.2983, %reduce-precision.76)
  %copy.1331 = bf16[2,8192,14336]{2,1,0} copy(%multiply.2984)
  %param.105 = f32[14336,256]{1,0} parameter(22), sharding={devices=[1,16]<=[16]}
  %convert.881 = bf16[14336,256]{1,0} convert(%param.105)
  %all-gather.77 = bf16[14336,4096]{1,0} all-gather(%convert.881), channel_id=78, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.175 = bf16[2,8192,4096]{2,1,0} dot(%copy.1331, %all-gather.77), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1332 = bf16[2,8192,4096]{2,1,0} copy(%dot.175)
  %add.2867 = bf16[2,8192,4096]{2,1,0} add(%copy.1332, %add.2864)
  %copy.1333 = bf16[2,8192,4096]{2,1,0} copy(%add.2867)
  %copy.1334 = bf16[2,8192,4096]{2,1,0} copy(%copy.1333)
  %convert.882 = f32[2,8192,4096]{2,1,0} convert(%copy.1334)
  %multiply.2985 = f32[2,8192,4096]{2,1,0} multiply(%convert.882, %convert.882)
  %reduce.183 = f32[2,8192]{1,0} reduce(%multiply.2985, %constant.5451), dimensions={2}, to_apply=%region_55.4178
  %multiply.2986 = f32[2,8192]{1,0} multiply(%reduce.183, %broadcast.7109)
  %add.2868 = f32[2,8192]{1,0} add(%multiply.2986, %broadcast.7110)
  %rsqrt.86 = f32[2,8192]{1,0} rsqrt(%add.2868)
  %broadcast.8157 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.86), dimensions={0,1}
  %multiply.2987 = f32[2,8192,4096]{2,1,0} multiply(%convert.882, %broadcast.8157)
  %convert.883 = bf16[2,8192,4096]{2,1,0} convert(%multiply.2987)
  %param.106 = f32[4096]{0} parameter(33), sharding={replicated}
  %convert.884 = bf16[4096]{0} convert(%param.106)
  %broadcast.8158 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.884), dimensions={2}
  %multiply.2988 = bf16[2,8192,4096]{2,1,0} multiply(%convert.883, %broadcast.8158)
  %copy.1335 = bf16[2,8192,4096]{2,1,0} copy(%multiply.2988)
  %copy.1336 = bf16[2,8192,4096]{2,1,0} copy(%copy.1335)
  %param.107 = f32[256,32,128]{2,1,0} parameter(36), sharding={devices=[16,1,1]<=[16]}
  %convert.885 = bf16[256,32,128]{2,1,0} convert(%param.107)
  %all-gather.78 = bf16[4096,32,128]{2,1,0} all-gather(%convert.885), channel_id=79, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.176 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1336, %all-gather.78), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.77 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.176), exponent_bits=8, mantissa_bits=7
  %convert.886 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.77)
  %multiply.2999 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.886, %broadcast.7132)
  %slice.99 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.77), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.100 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.77), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.44 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.99, %slice.100), dimensions={3}
  %slice.101 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.77), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.102 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.77), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.45 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.101, %slice.102), dimensions={3}
  %select.1422 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.44, %concatenate.45)
  %convert.891 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1422)
  %multiply.3004 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.891, %broadcast.7141)
  %multiply.3005 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3004, %broadcast.7145)
  %add.2872 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.2999, %multiply.3005)
  %convert.893 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2872)
  %copy.1337 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.893)
  %param.108 = f32[256,8,128]{2,1,0} parameter(34), sharding={devices=[16,1,1]<=[16]}
  %convert.894 = bf16[256,8,128]{2,1,0} convert(%param.108)
  %all-gather.79 = bf16[4096,8,128]{2,1,0} all-gather(%convert.894), channel_id=80, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.177 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1336, %all-gather.79), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.78 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.177), exponent_bits=8, mantissa_bits=7
  %convert.895 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.78)
  %multiply.3017 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.895, %broadcast.7159)
  %slice.103 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.78), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.104 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.78), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.46 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.103, %slice.104), dimensions={3}
  %slice.105 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.78), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.106 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.78), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.47 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.105, %slice.106), dimensions={3}
  %select.1426 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.46, %concatenate.47)
  %convert.900 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1426)
  %multiply.3022 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.900, %broadcast.7168)
  %multiply.3023 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3022, %broadcast.7171)
  %add.2876 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3017, %multiply.3023)
  %convert.902 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2876)
  %copy.1339 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.902)
  %param.109 = f32[256,8,128]{2,1,0} parameter(37), sharding={devices=[16,1,1]<=[16]}
  %convert.903 = bf16[256,8,128]{2,1,0} convert(%param.109)
  %all-gather.80 = bf16[4096,8,128]{2,1,0} all-gather(%convert.903), channel_id=81, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.178 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1336, %all-gather.80), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.79 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.178), exponent_bits=8, mantissa_bits=7
  %copy.1340 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.79)
  %custom-call.10 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1337, %copy.1339, %copy.1340, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.68 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.10), index=0
  %reduce-precision.80 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.68), exponent_bits=8, mantissa_bits=7
  %copy.1341 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.80)
  %param.110 = f32[32,128,256]{2,1,0} parameter(35), sharding={devices=[1,1,16]<=[16]}
  %convert.908 = bf16[32,128,256]{2,1,0} convert(%param.110)
  %all-gather.81 = bf16[32,128,4096]{2,1,0} all-gather(%convert.908), channel_id=82, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.179 = bf16[2,8192,4096]{2,1,0} dot(%copy.1341, %all-gather.81), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.81 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.179), exponent_bits=8, mantissa_bits=7
  %copy.1342 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.81)
  %add.2890 = bf16[2,8192,4096]{2,1,0} add(%copy.1334, %copy.1342)
  %convert.909 = f32[2,8192,4096]{2,1,0} convert(%add.2890)
  %multiply.3025 = f32[2,8192,4096]{2,1,0} multiply(%convert.909, %convert.909)
  %reduce.187 = f32[2,8192]{1,0} reduce(%multiply.3025, %constant.5451), dimensions={2}, to_apply=%region_59.4420
  %multiply.3026 = f32[2,8192]{1,0} multiply(%reduce.187, %broadcast.7109)
  %add.2891 = f32[2,8192]{1,0} add(%multiply.3026, %broadcast.7110)
  %rsqrt.87 = f32[2,8192]{1,0} rsqrt(%add.2891)
  %broadcast.8246 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.87), dimensions={0,1}
  %multiply.3027 = f32[2,8192,4096]{2,1,0} multiply(%convert.909, %broadcast.8246)
  %convert.910 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3027)
  %param.111 = f32[4096]{0} parameter(32), sharding={replicated}
  %convert.911 = bf16[4096]{0} convert(%param.111)
  %broadcast.8247 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.911), dimensions={2}
  %multiply.3028 = bf16[2,8192,4096]{2,1,0} multiply(%convert.910, %broadcast.8247)
  %copy.1343 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3028)
  %param.112 = f32[256,14336]{1,0} parameter(29), sharding={devices=[16,1]<=[16]}
  %convert.912 = bf16[256,14336]{1,0} convert(%param.112)
  %all-gather.82 = bf16[4096,14336]{1,0} all-gather(%convert.912), channel_id=83, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.180 = bf16[2,8192,14336]{2,1,0} dot(%copy.1343, %all-gather.82), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.82 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.180), exponent_bits=8, mantissa_bits=7
  %negate.802 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.82)
  %exponential.137 = bf16[2,8192,14336]{2,1,0} exponential(%negate.802)
  %add.2892 = bf16[2,8192,14336]{2,1,0} add(%exponential.137, %broadcast.7215)
  %divide.628 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2892)
  %multiply.3030 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.82, %divide.628)
  %param.113 = f32[256,14336]{1,0} parameter(30), sharding={devices=[16,1]<=[16]}
  %convert.913 = bf16[256,14336]{1,0} convert(%param.113)
  %all-gather.83 = bf16[4096,14336]{1,0} all-gather(%convert.913), channel_id=84, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.181 = bf16[2,8192,14336]{2,1,0} dot(%copy.1343, %all-gather.83), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.83 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.181), exponent_bits=8, mantissa_bits=7
  %multiply.3031 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3030, %reduce-precision.83)
  %copy.1344 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3031)
  %param.114 = f32[14336,256]{1,0} parameter(31), sharding={devices=[1,16]<=[16]}
  %convert.914 = bf16[14336,256]{1,0} convert(%param.114)
  %all-gather.84 = bf16[14336,4096]{1,0} all-gather(%convert.914), channel_id=85, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.182 = bf16[2,8192,4096]{2,1,0} dot(%copy.1344, %all-gather.84), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1345 = bf16[2,8192,4096]{2,1,0} copy(%dot.182)
  %add.2893 = bf16[2,8192,4096]{2,1,0} add(%copy.1345, %add.2890)
  %copy.1346 = bf16[2,8192,4096]{2,1,0} copy(%add.2893)
  %copy.1347 = bf16[2,8192,4096]{2,1,0} copy(%copy.1346)
  %convert.915 = f32[2,8192,4096]{2,1,0} convert(%copy.1347)
  %multiply.3032 = f32[2,8192,4096]{2,1,0} multiply(%convert.915, %convert.915)
  %reduce.188 = f32[2,8192]{1,0} reduce(%multiply.3032, %constant.5451), dimensions={2}, to_apply=%region_60.4458
  %multiply.3033 = f32[2,8192]{1,0} multiply(%reduce.188, %broadcast.7109)
  %add.2894 = f32[2,8192]{1,0} add(%multiply.3033, %broadcast.7110)
  %rsqrt.88 = f32[2,8192]{1,0} rsqrt(%add.2894)
  %broadcast.8255 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.88), dimensions={0,1}
  %multiply.3034 = f32[2,8192,4096]{2,1,0} multiply(%convert.915, %broadcast.8255)
  %convert.916 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3034)
  %param.115 = f32[4096]{0} parameter(42), sharding={replicated}
  %convert.917 = bf16[4096]{0} convert(%param.115)
  %broadcast.8256 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.917), dimensions={2}
  %multiply.3035 = bf16[2,8192,4096]{2,1,0} multiply(%convert.916, %broadcast.8256)
  %copy.1348 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3035)
  %copy.1349 = bf16[2,8192,4096]{2,1,0} copy(%copy.1348)
  %param.116 = f32[256,32,128]{2,1,0} parameter(45), sharding={devices=[16,1,1]<=[16]}
  %convert.918 = bf16[256,32,128]{2,1,0} convert(%param.116)
  %all-gather.85 = bf16[4096,32,128]{2,1,0} all-gather(%convert.918), channel_id=86, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.183 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1349, %all-gather.85), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.84 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.183), exponent_bits=8, mantissa_bits=7
  %convert.919 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.84)
  %multiply.3048 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.919, %broadcast.7132)
  %slice.108 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.84), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.109 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.84), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.48 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.108, %slice.109), dimensions={3}
  %slice.110 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.84), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.111 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.84), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.49 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.110, %slice.111), dimensions={3}
  %select.1453 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.48, %concatenate.49)
  %convert.924 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1453)
  %multiply.3053 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.924, %broadcast.7141)
  %multiply.3055 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3053, %broadcast.7145)
  %add.2898 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3048, %multiply.3055)
  %convert.926 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2898)
  %copy.1350 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.926)
  %param.117 = f32[256,8,128]{2,1,0} parameter(43), sharding={devices=[16,1,1]<=[16]}
  %convert.927 = bf16[256,8,128]{2,1,0} convert(%param.117)
  %all-gather.86 = bf16[4096,8,128]{2,1,0} all-gather(%convert.927), channel_id=87, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.184 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1349, %all-gather.86), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.85 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.184), exponent_bits=8, mantissa_bits=7
  %convert.928 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.85)
  %multiply.3066 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.928, %broadcast.7159)
  %slice.112 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.85), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.113 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.85), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.50 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.112, %slice.113), dimensions={3}
  %slice.114 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.85), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.115 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.85), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.51 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.114, %slice.115), dimensions={3}
  %select.1457 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.50, %concatenate.51)
  %convert.933 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1457)
  %multiply.3072 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.933, %broadcast.7168)
  %multiply.3073 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3072, %broadcast.7171)
  %add.2902 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3066, %multiply.3073)
  %convert.935 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2902)
  %copy.1352 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.935)
  %param.118 = f32[256,8,128]{2,1,0} parameter(46), sharding={devices=[16,1,1]<=[16]}
  %convert.936 = bf16[256,8,128]{2,1,0} convert(%param.118)
  %all-gather.87 = bf16[4096,8,128]{2,1,0} all-gather(%convert.936), channel_id=88, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.185 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1349, %all-gather.87), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.86 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.185), exponent_bits=8, mantissa_bits=7
  %copy.1353 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.86)
  %custom-call.11 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1350, %copy.1352, %copy.1353, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.74 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.11), index=0
  %reduce-precision.87 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.74), exponent_bits=8, mantissa_bits=7
  %copy.1354 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.87)
  %param.119 = f32[32,128,256]{2,1,0} parameter(44), sharding={devices=[1,1,16]<=[16]}
  %convert.941 = bf16[32,128,256]{2,1,0} convert(%param.119)
  %all-gather.88 = bf16[32,128,4096]{2,1,0} all-gather(%convert.941), channel_id=89, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.186 = bf16[2,8192,4096]{2,1,0} dot(%copy.1354, %all-gather.88), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.88 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.186), exponent_bits=8, mantissa_bits=7
  %copy.1355 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.88)
  %add.2915 = bf16[2,8192,4096]{2,1,0} add(%copy.1347, %copy.1355)
  %convert.942 = f32[2,8192,4096]{2,1,0} convert(%add.2915)
  %multiply.3076 = f32[2,8192,4096]{2,1,0} multiply(%convert.942, %convert.942)
  %reduce.192 = f32[2,8192]{1,0} reduce(%multiply.3076, %constant.5451), dimensions={2}, to_apply=%region_64.4700
  %multiply.3077 = f32[2,8192]{1,0} multiply(%reduce.192, %broadcast.7109)
  %add.2916 = f32[2,8192]{1,0} add(%multiply.3077, %broadcast.7110)
  %rsqrt.89 = f32[2,8192]{1,0} rsqrt(%add.2916)
  %broadcast.8345 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.89), dimensions={0,1}
  %multiply.3078 = f32[2,8192,4096]{2,1,0} multiply(%convert.942, %broadcast.8345)
  %convert.943 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3078)
  %param.120 = f32[4096]{0} parameter(41), sharding={replicated}
  %convert.944 = bf16[4096]{0} convert(%param.120)
  %broadcast.8347 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.944), dimensions={2}
  %multiply.3079 = bf16[2,8192,4096]{2,1,0} multiply(%convert.943, %broadcast.8347)
  %copy.1356 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3079)
  %param.121 = f32[256,14336]{1,0} parameter(38), sharding={devices=[16,1]<=[16]}
  %convert.945 = bf16[256,14336]{1,0} convert(%param.121)
  %all-gather.89 = bf16[4096,14336]{1,0} all-gather(%convert.945), channel_id=90, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.187 = bf16[2,8192,14336]{2,1,0} dot(%copy.1356, %all-gather.89), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.89 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.187), exponent_bits=8, mantissa_bits=7
  %negate.805 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.89)
  %exponential.138 = bf16[2,8192,14336]{2,1,0} exponential(%negate.805)
  %add.2917 = bf16[2,8192,14336]{2,1,0} add(%exponential.138, %broadcast.7215)
  %divide.635 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2917)
  %multiply.3080 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.89, %divide.635)
  %param.122 = f32[256,14336]{1,0} parameter(39), sharding={devices=[16,1]<=[16]}
  %convert.946 = bf16[256,14336]{1,0} convert(%param.122)
  %all-gather.90 = bf16[4096,14336]{1,0} all-gather(%convert.946), channel_id=91, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.188 = bf16[2,8192,14336]{2,1,0} dot(%copy.1356, %all-gather.90), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.90 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.188), exponent_bits=8, mantissa_bits=7
  %multiply.3081 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3080, %reduce-precision.90)
  %copy.1357 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3081)
  %param.123 = f32[14336,256]{1,0} parameter(40), sharding={devices=[1,16]<=[16]}
  %convert.947 = bf16[14336,256]{1,0} convert(%param.123)
  %all-gather.91 = bf16[14336,4096]{1,0} all-gather(%convert.947), channel_id=92, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.189 = bf16[2,8192,4096]{2,1,0} dot(%copy.1357, %all-gather.91), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1358 = bf16[2,8192,4096]{2,1,0} copy(%dot.189)
  %add.2918 = bf16[2,8192,4096]{2,1,0} add(%copy.1358, %add.2915)
  %copy.1359 = bf16[2,8192,4096]{2,1,0} copy(%add.2918)
  %copy.1360 = bf16[2,8192,4096]{2,1,0} copy(%copy.1359)
  %convert.948 = f32[2,8192,4096]{2,1,0} convert(%copy.1360)
  %multiply.3082 = f32[2,8192,4096]{2,1,0} multiply(%convert.948, %convert.948)
  %reduce.193 = f32[2,8192]{1,0} reduce(%multiply.3082, %constant.5451), dimensions={2}, to_apply=%region_65.4738
  %multiply.3083 = f32[2,8192]{1,0} multiply(%reduce.193, %broadcast.7109)
  %add.2920 = f32[2,8192]{1,0} add(%multiply.3083, %broadcast.7110)
  %rsqrt.90 = f32[2,8192]{1,0} rsqrt(%add.2920)
  %broadcast.8352 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.90), dimensions={0,1}
  %multiply.3084 = f32[2,8192,4096]{2,1,0} multiply(%convert.948, %broadcast.8352)
  %convert.949 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3084)
  %param.124 = f32[4096]{0} parameter(51), sharding={replicated}
  %convert.950 = bf16[4096]{0} convert(%param.124)
  %broadcast.8354 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.950), dimensions={2}
  %multiply.3085 = bf16[2,8192,4096]{2,1,0} multiply(%convert.949, %broadcast.8354)
  %copy.1361 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3085)
  %copy.1362 = bf16[2,8192,4096]{2,1,0} copy(%copy.1361)
  %param.125 = f32[256,32,128]{2,1,0} parameter(54), sharding={devices=[16,1,1]<=[16]}
  %convert.951 = bf16[256,32,128]{2,1,0} convert(%param.125)
  %all-gather.92 = bf16[4096,32,128]{2,1,0} all-gather(%convert.951), channel_id=93, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.190 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1362, %all-gather.92), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.91 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.190), exponent_bits=8, mantissa_bits=7
  %convert.952 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.91)
  %multiply.3096 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.952, %broadcast.7132)
  %slice.117 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.91), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.118 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.91), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.52 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.117, %slice.118), dimensions={3}
  %slice.119 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.91), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.120 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.91), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.53 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.119, %slice.120), dimensions={3}
  %select.1482 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.52, %concatenate.53)
  %convert.957 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1482)
  %multiply.3101 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.957, %broadcast.7141)
  %multiply.3102 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3101, %broadcast.7145)
  %add.2924 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3096, %multiply.3102)
  %convert.959 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2924)
  %copy.1363 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.959)
  %param.126 = f32[256,8,128]{2,1,0} parameter(52), sharding={devices=[16,1,1]<=[16]}
  %convert.960 = bf16[256,8,128]{2,1,0} convert(%param.126)
  %all-gather.93 = bf16[4096,8,128]{2,1,0} all-gather(%convert.960), channel_id=94, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.191 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1362, %all-gather.93), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.92 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.191), exponent_bits=8, mantissa_bits=7
  %convert.961 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.92)
  %multiply.3114 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.961, %broadcast.7159)
  %slice.121 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.92), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.122 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.92), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.54 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.121, %slice.122), dimensions={3}
  %slice.123 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.92), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.124 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.92), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.55 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.123, %slice.124), dimensions={3}
  %select.1486 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.54, %concatenate.55)
  %convert.966 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1486)
  %multiply.3119 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.966, %broadcast.7168)
  %multiply.3121 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3119, %broadcast.7171)
  %add.2928 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3114, %multiply.3121)
  %convert.968 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2928)
  %copy.1365 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.968)
  %param.127 = f32[256,8,128]{2,1,0} parameter(55), sharding={devices=[16,1,1]<=[16]}
  %convert.969 = bf16[256,8,128]{2,1,0} convert(%param.127)
  %all-gather.94 = bf16[4096,8,128]{2,1,0} all-gather(%convert.969), channel_id=95, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.192 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1362, %all-gather.94), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.93 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.192), exponent_bits=8, mantissa_bits=7
  %copy.1366 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.93)
  %custom-call.12 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1363, %copy.1365, %copy.1366, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.80 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.12), index=0
  %reduce-precision.94 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.80), exponent_bits=8, mantissa_bits=7
  %copy.1367 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.94)
  %param.128 = f32[32,128,256]{2,1,0} parameter(53), sharding={devices=[1,1,16]<=[16]}
  %convert.974 = bf16[32,128,256]{2,1,0} convert(%param.128)
  %all-gather.95 = bf16[32,128,4096]{2,1,0} all-gather(%convert.974), channel_id=96, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.193 = bf16[2,8192,4096]{2,1,0} dot(%copy.1367, %all-gather.95), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.95 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.193), exponent_bits=8, mantissa_bits=7
  %copy.1368 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.95)
  %add.2941 = bf16[2,8192,4096]{2,1,0} add(%copy.1360, %copy.1368)
  %convert.975 = f32[2,8192,4096]{2,1,0} convert(%add.2941)
  %multiply.3124 = f32[2,8192,4096]{2,1,0} multiply(%convert.975, %convert.975)
  %reduce.197 = f32[2,8192]{1,0} reduce(%multiply.3124, %constant.5451), dimensions={2}, to_apply=%region_69.4980
  %multiply.3125 = f32[2,8192]{1,0} multiply(%reduce.197, %broadcast.7109)
  %add.2942 = f32[2,8192]{1,0} add(%multiply.3125, %broadcast.7110)
  %rsqrt.91 = f32[2,8192]{1,0} rsqrt(%add.2942)
  %broadcast.8435 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.91), dimensions={0,1}
  %multiply.3126 = f32[2,8192,4096]{2,1,0} multiply(%convert.975, %broadcast.8435)
  %convert.976 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3126)
  %param.129 = f32[4096]{0} parameter(50), sharding={replicated}
  %convert.977 = bf16[4096]{0} convert(%param.129)
  %broadcast.8436 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.977), dimensions={2}
  %multiply.3127 = bf16[2,8192,4096]{2,1,0} multiply(%convert.976, %broadcast.8436)
  %copy.1369 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3127)
  %param.130 = f32[256,14336]{1,0} parameter(47), sharding={devices=[16,1]<=[16]}
  %convert.978 = bf16[256,14336]{1,0} convert(%param.130)
  %all-gather.96 = bf16[4096,14336]{1,0} all-gather(%convert.978), channel_id=97, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.194 = bf16[2,8192,14336]{2,1,0} dot(%copy.1369, %all-gather.96), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.96 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.194), exponent_bits=8, mantissa_bits=7
  %negate.808 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.96)
  %exponential.139 = bf16[2,8192,14336]{2,1,0} exponential(%negate.808)
  %add.2943 = bf16[2,8192,14336]{2,1,0} add(%exponential.139, %broadcast.7215)
  %divide.642 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2943)
  %multiply.3128 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.96, %divide.642)
  %param.131 = f32[256,14336]{1,0} parameter(48), sharding={devices=[16,1]<=[16]}
  %convert.979 = bf16[256,14336]{1,0} convert(%param.131)
  %all-gather.97 = bf16[4096,14336]{1,0} all-gather(%convert.979), channel_id=98, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.195 = bf16[2,8192,14336]{2,1,0} dot(%copy.1369, %all-gather.97), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.97 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.195), exponent_bits=8, mantissa_bits=7
  %multiply.3129 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3128, %reduce-precision.97)
  %copy.1370 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3129)
  %param.132 = f32[14336,256]{1,0} parameter(49), sharding={devices=[1,16]<=[16]}
  %convert.980 = bf16[14336,256]{1,0} convert(%param.132)
  %all-gather.98 = bf16[14336,4096]{1,0} all-gather(%convert.980), channel_id=99, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.196 = bf16[2,8192,4096]{2,1,0} dot(%copy.1370, %all-gather.98), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1371 = bf16[2,8192,4096]{2,1,0} copy(%dot.196)
  %add.2944 = bf16[2,8192,4096]{2,1,0} add(%copy.1371, %add.2941)
  %copy.1372 = bf16[2,8192,4096]{2,1,0} copy(%add.2944)
  %copy.1373 = bf16[2,8192,4096]{2,1,0} copy(%copy.1372)
  %convert.981 = f32[2,8192,4096]{2,1,0} convert(%copy.1373)
  %multiply.3130 = f32[2,8192,4096]{2,1,0} multiply(%convert.981, %convert.981)
  %reduce.198 = f32[2,8192]{1,0} reduce(%multiply.3130, %constant.5451), dimensions={2}, to_apply=%region_70.5018
  %multiply.3131 = f32[2,8192]{1,0} multiply(%reduce.198, %broadcast.7109)
  %add.2945 = f32[2,8192]{1,0} add(%multiply.3131, %broadcast.7110)
  %rsqrt.92 = f32[2,8192]{1,0} rsqrt(%add.2945)
  %broadcast.8440 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.92), dimensions={0,1}
  %multiply.3132 = f32[2,8192,4096]{2,1,0} multiply(%convert.981, %broadcast.8440)
  %convert.982 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3132)
  %param.133 = f32[4096]{0} parameter(60), sharding={replicated}
  %convert.983 = bf16[4096]{0} convert(%param.133)
  %broadcast.8441 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.983), dimensions={2}
  %multiply.3133 = bf16[2,8192,4096]{2,1,0} multiply(%convert.982, %broadcast.8441)
  %copy.1374 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3133)
  %copy.1375 = bf16[2,8192,4096]{2,1,0} copy(%copy.1374)
  %param.134 = f32[256,32,128]{2,1,0} parameter(63), sharding={devices=[16,1,1]<=[16]}
  %convert.984 = bf16[256,32,128]{2,1,0} convert(%param.134)
  %all-gather.99 = bf16[4096,32,128]{2,1,0} all-gather(%convert.984), channel_id=100, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.197 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1375, %all-gather.99), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.98 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.197), exponent_bits=8, mantissa_bits=7
  %convert.985 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.98)
  %multiply.3144 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.985, %broadcast.7132)
  %slice.126 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.98), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.127 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.98), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.56 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.126, %slice.127), dimensions={3}
  %slice.128 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.98), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.129 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.98), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.57 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.128, %slice.129), dimensions={3}
  %select.1512 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.56, %concatenate.57)
  %convert.990 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1512)
  %multiply.3150 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.990, %broadcast.7141)
  %multiply.3151 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3150, %broadcast.7145)
  %add.2949 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3144, %multiply.3151)
  %convert.992 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2949)
  %copy.1376 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.992)
  %param.135 = f32[256,8,128]{2,1,0} parameter(61), sharding={devices=[16,1,1]<=[16]}
  %convert.993 = bf16[256,8,128]{2,1,0} convert(%param.135)
  %all-gather.100 = bf16[4096,8,128]{2,1,0} all-gather(%convert.993), channel_id=101, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.198 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1375, %all-gather.100), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.99 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.198), exponent_bits=8, mantissa_bits=7
  %convert.994 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.99)
  %multiply.3164 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.994, %broadcast.7159)
  %slice.130 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.99), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.131 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.99), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.58 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.130, %slice.131), dimensions={3}
  %slice.132 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.99), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.133 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.99), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.59 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.132, %slice.133), dimensions={3}
  %select.1516 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.58, %concatenate.59)
  %convert.999 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1516)
  %multiply.3169 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.999, %broadcast.7168)
  %multiply.3170 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3169, %broadcast.7171)
  %add.2953 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3164, %multiply.3170)
  %convert.1001 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2953)
  %copy.1378 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1001)
  %param.136 = f32[256,8,128]{2,1,0} parameter(64), sharding={devices=[16,1,1]<=[16]}
  %convert.1002 = bf16[256,8,128]{2,1,0} convert(%param.136)
  %all-gather.101 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1002), channel_id=102, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.199 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1375, %all-gather.101), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.100 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.199), exponent_bits=8, mantissa_bits=7
  %copy.1379 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.100)
  %custom-call.13 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1376, %copy.1378, %copy.1379, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.86 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.13), index=0
  %reduce-precision.101 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.86), exponent_bits=8, mantissa_bits=7
  %copy.1380 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.101)
  %param.137 = f32[32,128,256]{2,1,0} parameter(62), sharding={devices=[1,1,16]<=[16]}
  %convert.1007 = bf16[32,128,256]{2,1,0} convert(%param.137)
  %all-gather.102 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1007), channel_id=103, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.200 = bf16[2,8192,4096]{2,1,0} dot(%copy.1380, %all-gather.102), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.102 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.200), exponent_bits=8, mantissa_bits=7
  %copy.1381 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.102)
  %add.2967 = bf16[2,8192,4096]{2,1,0} add(%copy.1373, %copy.1381)
  %convert.1008 = f32[2,8192,4096]{2,1,0} convert(%add.2967)
  %multiply.3172 = f32[2,8192,4096]{2,1,0} multiply(%convert.1008, %convert.1008)
  %reduce.202 = f32[2,8192]{1,0} reduce(%multiply.3172, %constant.5451), dimensions={2}, to_apply=%region_74.5260
  %multiply.3173 = f32[2,8192]{1,0} multiply(%reduce.202, %broadcast.7109)
  %add.2968 = f32[2,8192]{1,0} add(%multiply.3173, %broadcast.7110)
  %rsqrt.93 = f32[2,8192]{1,0} rsqrt(%add.2968)
  %broadcast.8532 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.93), dimensions={0,1}
  %multiply.3174 = f32[2,8192,4096]{2,1,0} multiply(%convert.1008, %broadcast.8532)
  %convert.1009 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3174)
  %param.138 = f32[4096]{0} parameter(59), sharding={replicated}
  %convert.1010 = bf16[4096]{0} convert(%param.138)
  %broadcast.8534 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1010), dimensions={2}
  %multiply.3175 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1009, %broadcast.8534)
  %copy.1382 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3175)
  %param.139 = f32[256,14336]{1,0} parameter(56), sharding={devices=[16,1]<=[16]}
  %convert.1011 = bf16[256,14336]{1,0} convert(%param.139)
  %all-gather.103 = bf16[4096,14336]{1,0} all-gather(%convert.1011), channel_id=104, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.201 = bf16[2,8192,14336]{2,1,0} dot(%copy.1382, %all-gather.103), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.103 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.201), exponent_bits=8, mantissa_bits=7
  %negate.811 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.103)
  %exponential.140 = bf16[2,8192,14336]{2,1,0} exponential(%negate.811)
  %add.2969 = bf16[2,8192,14336]{2,1,0} add(%exponential.140, %broadcast.7215)
  %divide.649 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2969)
  %multiply.3176 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.103, %divide.649)
  %param.140 = f32[256,14336]{1,0} parameter(57), sharding={devices=[16,1]<=[16]}
  %convert.1012 = bf16[256,14336]{1,0} convert(%param.140)
  %all-gather.104 = bf16[4096,14336]{1,0} all-gather(%convert.1012), channel_id=105, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.202 = bf16[2,8192,14336]{2,1,0} dot(%copy.1382, %all-gather.104), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.104 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.202), exponent_bits=8, mantissa_bits=7
  %multiply.3177 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3176, %reduce-precision.104)
  %copy.1383 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3177)
  %param.141 = f32[14336,256]{1,0} parameter(58), sharding={devices=[1,16]<=[16]}
  %convert.1013 = bf16[14336,256]{1,0} convert(%param.141)
  %all-gather.105 = bf16[14336,4096]{1,0} all-gather(%convert.1013), channel_id=106, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.203 = bf16[2,8192,4096]{2,1,0} dot(%copy.1383, %all-gather.105), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1384 = bf16[2,8192,4096]{2,1,0} copy(%dot.203)
  %add.2970 = bf16[2,8192,4096]{2,1,0} add(%copy.1384, %add.2967)
  %copy.1385 = bf16[2,8192,4096]{2,1,0} copy(%add.2970)
  %copy.1386 = bf16[2,8192,4096]{2,1,0} copy(%copy.1385)
  %convert.1014 = f32[2,8192,4096]{2,1,0} convert(%copy.1386)
  %multiply.3178 = f32[2,8192,4096]{2,1,0} multiply(%convert.1014, %convert.1014)
  %reduce.203 = f32[2,8192]{1,0} reduce(%multiply.3178, %constant.5451), dimensions={2}, to_apply=%region_75.5298
  %multiply.3179 = f32[2,8192]{1,0} multiply(%reduce.203, %broadcast.7109)
  %add.2971 = f32[2,8192]{1,0} add(%multiply.3179, %broadcast.7110)
  %rsqrt.94 = f32[2,8192]{1,0} rsqrt(%add.2971)
  %broadcast.8540 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.94), dimensions={0,1}
  %multiply.3181 = f32[2,8192,4096]{2,1,0} multiply(%convert.1014, %broadcast.8540)
  %convert.1015 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3181)
  %param.142 = f32[4096]{0} parameter(69), sharding={replicated}
  %convert.1016 = bf16[4096]{0} convert(%param.142)
  %broadcast.8541 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1016), dimensions={2}
  %multiply.3182 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1015, %broadcast.8541)
  %copy.1387 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3182)
  %copy.1388 = bf16[2,8192,4096]{2,1,0} copy(%copy.1387)
  %param.143 = f32[256,32,128]{2,1,0} parameter(72), sharding={devices=[16,1,1]<=[16]}
  %convert.1017 = bf16[256,32,128]{2,1,0} convert(%param.143)
  %all-gather.106 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1017), channel_id=107, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.204 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1388, %all-gather.106), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.105 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.204), exponent_bits=8, mantissa_bits=7
  %convert.1018 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.105)
  %multiply.3193 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1018, %broadcast.7132)
  %slice.135 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.105), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.136 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.105), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.60 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.135, %slice.136), dimensions={3}
  %slice.137 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.105), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.138 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.105), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.61 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.137, %slice.138), dimensions={3}
  %select.1543 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.60, %concatenate.61)
  %convert.1023 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1543)
  %multiply.3200 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1023, %broadcast.7141)
  %multiply.3201 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3200, %broadcast.7145)
  %add.2975 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3193, %multiply.3201)
  %convert.1025 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.2975)
  %copy.1389 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1025)
  %param.144 = f32[256,8,128]{2,1,0} parameter(70), sharding={devices=[16,1,1]<=[16]}
  %convert.1026 = bf16[256,8,128]{2,1,0} convert(%param.144)
  %all-gather.107 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1026), channel_id=108, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.205 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1388, %all-gather.107), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.106 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.205), exponent_bits=8, mantissa_bits=7
  %convert.1027 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.106)
  %multiply.3212 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1027, %broadcast.7159)
  %slice.139 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.106), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.140 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.106), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.62 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.139, %slice.140), dimensions={3}
  %slice.141 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.106), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.142 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.106), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.63 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.141, %slice.142), dimensions={3}
  %select.1547 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.62, %concatenate.63)
  %convert.1032 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1547)
  %multiply.3217 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1032, %broadcast.7168)
  %multiply.3218 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3217, %broadcast.7171)
  %add.2979 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3212, %multiply.3218)
  %convert.1034 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.2979)
  %copy.1391 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1034)
  %param.145 = f32[256,8,128]{2,1,0} parameter(73), sharding={devices=[16,1,1]<=[16]}
  %convert.1035 = bf16[256,8,128]{2,1,0} convert(%param.145)
  %all-gather.108 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1035), channel_id=109, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.206 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1388, %all-gather.108), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.107 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.206), exponent_bits=8, mantissa_bits=7
  %copy.1392 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.107)
  %custom-call.14 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1389, %copy.1391, %copy.1392, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.92 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.14), index=0
  %reduce-precision.108 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.92), exponent_bits=8, mantissa_bits=7
  %copy.1393 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.108)
  %param.146 = f32[32,128,256]{2,1,0} parameter(71), sharding={devices=[1,1,16]<=[16]}
  %convert.1040 = bf16[32,128,256]{2,1,0} convert(%param.146)
  %all-gather.109 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1040), channel_id=110, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.207 = bf16[2,8192,4096]{2,1,0} dot(%copy.1393, %all-gather.109), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.109 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.207), exponent_bits=8, mantissa_bits=7
  %copy.1394 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.109)
  %add.2993 = bf16[2,8192,4096]{2,1,0} add(%copy.1386, %copy.1394)
  %convert.1041 = f32[2,8192,4096]{2,1,0} convert(%add.2993)
  %multiply.3220 = f32[2,8192,4096]{2,1,0} multiply(%convert.1041, %convert.1041)
  %reduce.207 = f32[2,8192]{1,0} reduce(%multiply.3220, %constant.5451), dimensions={2}, to_apply=%region_79.5540
  %multiply.3221 = f32[2,8192]{1,0} multiply(%reduce.207, %broadcast.7109)
  %add.2994 = f32[2,8192]{1,0} add(%multiply.3221, %broadcast.7110)
  %rsqrt.95 = f32[2,8192]{1,0} rsqrt(%add.2994)
  %broadcast.8630 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.95), dimensions={0,1}
  %multiply.3222 = f32[2,8192,4096]{2,1,0} multiply(%convert.1041, %broadcast.8630)
  %convert.1042 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3222)
  %param.147 = f32[4096]{0} parameter(68), sharding={replicated}
  %convert.1043 = bf16[4096]{0} convert(%param.147)
  %broadcast.8631 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1043), dimensions={2}
  %multiply.3223 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1042, %broadcast.8631)
  %copy.1395 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3223)
  %param.148 = f32[256,14336]{1,0} parameter(65), sharding={devices=[16,1]<=[16]}
  %convert.1044 = bf16[256,14336]{1,0} convert(%param.148)
  %all-gather.110 = bf16[4096,14336]{1,0} all-gather(%convert.1044), channel_id=111, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.208 = bf16[2,8192,14336]{2,1,0} dot(%copy.1395, %all-gather.110), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.110 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.208), exponent_bits=8, mantissa_bits=7
  %negate.814 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.110)
  %exponential.141 = bf16[2,8192,14336]{2,1,0} exponential(%negate.814)
  %add.2995 = bf16[2,8192,14336]{2,1,0} add(%exponential.141, %broadcast.7215)
  %divide.656 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.2995)
  %multiply.3224 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.110, %divide.656)
  %param.149 = f32[256,14336]{1,0} parameter(66), sharding={devices=[16,1]<=[16]}
  %convert.1045 = bf16[256,14336]{1,0} convert(%param.149)
  %all-gather.111 = bf16[4096,14336]{1,0} all-gather(%convert.1045), channel_id=112, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.209 = bf16[2,8192,14336]{2,1,0} dot(%copy.1395, %all-gather.111), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.111 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.209), exponent_bits=8, mantissa_bits=7
  %multiply.3226 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3224, %reduce-precision.111)
  %copy.1396 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3226)
  %param.150 = f32[14336,256]{1,0} parameter(67), sharding={devices=[1,16]<=[16]}
  %convert.1046 = bf16[14336,256]{1,0} convert(%param.150)
  %all-gather.112 = bf16[14336,4096]{1,0} all-gather(%convert.1046), channel_id=113, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.210 = bf16[2,8192,4096]{2,1,0} dot(%copy.1396, %all-gather.112), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1397 = bf16[2,8192,4096]{2,1,0} copy(%dot.210)
  %add.2997 = bf16[2,8192,4096]{2,1,0} add(%copy.1397, %add.2993)
  %copy.1398 = bf16[2,8192,4096]{2,1,0} copy(%add.2997)
  %copy.1399 = bf16[2,8192,4096]{2,1,0} copy(%copy.1398)
  %convert.1049 = f32[2,8192,4096]{2,1,0} convert(%copy.1399)
  %multiply.3227 = f32[2,8192,4096]{2,1,0} multiply(%convert.1049, %convert.1049)
  %reduce.208 = f32[2,8192]{1,0} reduce(%multiply.3227, %constant.5451), dimensions={2}, to_apply=%region_80.5578
  %multiply.3228 = f32[2,8192]{1,0} multiply(%reduce.208, %broadcast.7109)
  %add.2998 = f32[2,8192]{1,0} add(%multiply.3228, %broadcast.7110)
  %rsqrt.96 = f32[2,8192]{1,0} rsqrt(%add.2998)
  %broadcast.8637 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.96), dimensions={0,1}
  %multiply.3229 = f32[2,8192,4096]{2,1,0} multiply(%convert.1049, %broadcast.8637)
  %convert.1050 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3229)
  %param.151 = f32[4096]{0} parameter(78), sharding={replicated}
  %convert.1051 = bf16[4096]{0} convert(%param.151)
  %broadcast.8638 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1051), dimensions={2}
  %multiply.3231 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1050, %broadcast.8638)
  %copy.1400 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3231)
  %copy.1401 = bf16[2,8192,4096]{2,1,0} copy(%copy.1400)
  %param.152 = f32[256,32,128]{2,1,0} parameter(81), sharding={devices=[16,1,1]<=[16]}
  %convert.1053 = bf16[256,32,128]{2,1,0} convert(%param.152)
  %all-gather.113 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1053), channel_id=114, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.211 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1401, %all-gather.113), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.112 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.211), exponent_bits=8, mantissa_bits=7
  %convert.1054 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.112)
  %multiply.3243 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1054, %broadcast.7132)
  %slice.144 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.112), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.145 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.112), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.64 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.144, %slice.145), dimensions={3}
  %slice.146 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.112), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.147 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.112), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.65 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.146, %slice.147), dimensions={3}
  %select.1572 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.64, %concatenate.65)
  %convert.1059 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1572)
  %multiply.3248 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1059, %broadcast.7141)
  %multiply.3249 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3248, %broadcast.7145)
  %add.3002 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3243, %multiply.3249)
  %convert.1061 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3002)
  %copy.1402 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1061)
  %param.153 = f32[256,8,128]{2,1,0} parameter(79), sharding={devices=[16,1,1]<=[16]}
  %convert.1062 = bf16[256,8,128]{2,1,0} convert(%param.153)
  %all-gather.114 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1062), channel_id=115, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.212 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1401, %all-gather.114), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.113 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.212), exponent_bits=8, mantissa_bits=7
  %convert.1063 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.113)
  %multiply.3260 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1063, %broadcast.7159)
  %slice.148 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.113), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.149 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.113), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.66 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.148, %slice.149), dimensions={3}
  %slice.150 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.113), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.151 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.113), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.67 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.150, %slice.151), dimensions={3}
  %select.1576 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.66, %concatenate.67)
  %convert.1070 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1576)
  %multiply.3265 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1070, %broadcast.7168)
  %multiply.3266 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3265, %broadcast.7171)
  %add.3006 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3260, %multiply.3266)
  %convert.1072 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3006)
  %copy.1404 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1072)
  %param.154 = f32[256,8,128]{2,1,0} parameter(82), sharding={devices=[16,1,1]<=[16]}
  %convert.1073 = bf16[256,8,128]{2,1,0} convert(%param.154)
  %all-gather.115 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1073), channel_id=116, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.213 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1401, %all-gather.115), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.114 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.213), exponent_bits=8, mantissa_bits=7
  %copy.1405 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.114)
  %custom-call.15 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1402, %copy.1404, %copy.1405, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.98 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.15), index=0
  %reduce-precision.115 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.98), exponent_bits=8, mantissa_bits=7
  %copy.1406 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.115)
  %param.155 = f32[32,128,256]{2,1,0} parameter(80), sharding={devices=[1,1,16]<=[16]}
  %convert.1079 = bf16[32,128,256]{2,1,0} convert(%param.155)
  %all-gather.116 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1079), channel_id=117, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.214 = bf16[2,8192,4096]{2,1,0} dot(%copy.1406, %all-gather.116), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.116 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.214), exponent_bits=8, mantissa_bits=7
  %copy.1407 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.116)
  %add.3021 = bf16[2,8192,4096]{2,1,0} add(%copy.1399, %copy.1407)
  %convert.1081 = f32[2,8192,4096]{2,1,0} convert(%add.3021)
  %multiply.3268 = f32[2,8192,4096]{2,1,0} multiply(%convert.1081, %convert.1081)
  %reduce.212 = f32[2,8192]{1,0} reduce(%multiply.3268, %constant.5451), dimensions={2}, to_apply=%region_84.5820
  %multiply.3269 = f32[2,8192]{1,0} multiply(%reduce.212, %broadcast.7109)
  %add.3022 = f32[2,8192]{1,0} add(%multiply.3269, %broadcast.7110)
  %rsqrt.97 = f32[2,8192]{1,0} rsqrt(%add.3022)
  %broadcast.8718 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.97), dimensions={0,1}
  %multiply.3270 = f32[2,8192,4096]{2,1,0} multiply(%convert.1081, %broadcast.8718)
  %convert.1082 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3270)
  %param.156 = f32[4096]{0} parameter(77), sharding={replicated}
  %convert.1084 = bf16[4096]{0} convert(%param.156)
  %broadcast.8719 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1084), dimensions={2}
  %multiply.3271 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1082, %broadcast.8719)
  %copy.1408 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3271)
  %param.157 = f32[256,14336]{1,0} parameter(74), sharding={devices=[16,1]<=[16]}
  %convert.1085 = bf16[256,14336]{1,0} convert(%param.157)
  %all-gather.117 = bf16[4096,14336]{1,0} all-gather(%convert.1085), channel_id=118, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.215 = bf16[2,8192,14336]{2,1,0} dot(%copy.1408, %all-gather.117), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.117 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.215), exponent_bits=8, mantissa_bits=7
  %negate.817 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.117)
  %exponential.142 = bf16[2,8192,14336]{2,1,0} exponential(%negate.817)
  %add.3023 = bf16[2,8192,14336]{2,1,0} add(%exponential.142, %broadcast.7215)
  %divide.663 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3023)
  %multiply.3272 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.117, %divide.663)
  %param.158 = f32[256,14336]{1,0} parameter(75), sharding={devices=[16,1]<=[16]}
  %convert.1086 = bf16[256,14336]{1,0} convert(%param.158)
  %all-gather.118 = bf16[4096,14336]{1,0} all-gather(%convert.1086), channel_id=119, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.216 = bf16[2,8192,14336]{2,1,0} dot(%copy.1408, %all-gather.118), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.118 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.216), exponent_bits=8, mantissa_bits=7
  %multiply.3273 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3272, %reduce-precision.118)
  %copy.1409 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3273)
  %param.159 = f32[14336,256]{1,0} parameter(76), sharding={devices=[1,16]<=[16]}
  %convert.1087 = bf16[14336,256]{1,0} convert(%param.159)
  %all-gather.119 = bf16[14336,4096]{1,0} all-gather(%convert.1087), channel_id=120, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.217 = bf16[2,8192,4096]{2,1,0} dot(%copy.1409, %all-gather.119), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1410 = bf16[2,8192,4096]{2,1,0} copy(%dot.217)
  %add.3025 = bf16[2,8192,4096]{2,1,0} add(%copy.1410, %add.3021)
  %copy.1411 = bf16[2,8192,4096]{2,1,0} copy(%add.3025)
  %copy.1412 = bf16[2,8192,4096]{2,1,0} copy(%copy.1411)
  %convert.1088 = f32[2,8192,4096]{2,1,0} convert(%copy.1412)
  %multiply.3274 = f32[2,8192,4096]{2,1,0} multiply(%convert.1088, %convert.1088)
  %reduce.213 = f32[2,8192]{1,0} reduce(%multiply.3274, %constant.5451), dimensions={2}, to_apply=%region_85.5858
  %multiply.3275 = f32[2,8192]{1,0} multiply(%reduce.213, %broadcast.7109)
  %add.3026 = f32[2,8192]{1,0} add(%multiply.3275, %broadcast.7110)
  %rsqrt.98 = f32[2,8192]{1,0} rsqrt(%add.3026)
  %broadcast.8723 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.98), dimensions={0,1}
  %multiply.3276 = f32[2,8192,4096]{2,1,0} multiply(%convert.1088, %broadcast.8723)
  %convert.1089 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3276)
  %param.160 = f32[4096]{0} parameter(87), sharding={replicated}
  %convert.1090 = bf16[4096]{0} convert(%param.160)
  %broadcast.8724 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1090), dimensions={2}
  %multiply.3277 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1089, %broadcast.8724)
  %copy.1413 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3277)
  %copy.1414 = bf16[2,8192,4096]{2,1,0} copy(%copy.1413)
  %param.161 = f32[256,32,128]{2,1,0} parameter(90), sharding={devices=[16,1,1]<=[16]}
  %convert.1091 = bf16[256,32,128]{2,1,0} convert(%param.161)
  %all-gather.120 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1091), channel_id=121, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.218 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1414, %all-gather.120), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.119 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.218), exponent_bits=8, mantissa_bits=7
  %convert.1092 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.119)
  %multiply.3288 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1092, %broadcast.7132)
  %slice.153 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.119), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.154 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.119), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.68 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.153, %slice.154), dimensions={3}
  %slice.155 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.119), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.156 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.119), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.69 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.155, %slice.156), dimensions={3}
  %select.1601 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.68, %concatenate.69)
  %convert.1097 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1601)
  %multiply.3293 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1097, %broadcast.7141)
  %multiply.3294 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3293, %broadcast.7145)
  %add.3030 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3288, %multiply.3294)
  %convert.1099 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3030)
  %copy.1415 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1099)
  %param.162 = f32[256,8,128]{2,1,0} parameter(88), sharding={devices=[16,1,1]<=[16]}
  %convert.1100 = bf16[256,8,128]{2,1,0} convert(%param.162)
  %all-gather.121 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1100), channel_id=122, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.219 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1414, %all-gather.121), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.120 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.219), exponent_bits=8, mantissa_bits=7
  %convert.1101 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.120)
  %multiply.3306 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1101, %broadcast.7159)
  %slice.157 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.120), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.158 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.120), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.70 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.157, %slice.158), dimensions={3}
  %slice.159 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.120), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.160 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.120), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.71 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.159, %slice.160), dimensions={3}
  %select.1605 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.70, %concatenate.71)
  %convert.1106 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1605)
  %multiply.3312 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1106, %broadcast.7168)
  %multiply.3313 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3312, %broadcast.7171)
  %add.3034 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3306, %multiply.3313)
  %convert.1108 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3034)
  %copy.1417 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1108)
  %param.163 = f32[256,8,128]{2,1,0} parameter(91), sharding={devices=[16,1,1]<=[16]}
  %convert.1109 = bf16[256,8,128]{2,1,0} convert(%param.163)
  %all-gather.122 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1109), channel_id=123, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.220 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1414, %all-gather.122), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.121 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.220), exponent_bits=8, mantissa_bits=7
  %copy.1418 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.121)
  %custom-call.16 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1415, %copy.1417, %copy.1418, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.104 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.16), index=0
  %reduce-precision.122 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.104), exponent_bits=8, mantissa_bits=7
  %copy.1419 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.122)
  %param.164 = f32[32,128,256]{2,1,0} parameter(89), sharding={devices=[1,1,16]<=[16]}
  %convert.1114 = bf16[32,128,256]{2,1,0} convert(%param.164)
  %all-gather.123 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1114), channel_id=124, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.221 = bf16[2,8192,4096]{2,1,0} dot(%copy.1419, %all-gather.123), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.123 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.221), exponent_bits=8, mantissa_bits=7
  %copy.1420 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.123)
  %add.3047 = bf16[2,8192,4096]{2,1,0} add(%copy.1412, %copy.1420)
  %convert.1115 = f32[2,8192,4096]{2,1,0} convert(%add.3047)
  %multiply.3315 = f32[2,8192,4096]{2,1,0} multiply(%convert.1115, %convert.1115)
  %reduce.217 = f32[2,8192]{1,0} reduce(%multiply.3315, %constant.5451), dimensions={2}, to_apply=%region_89.6100
  %multiply.3317 = f32[2,8192]{1,0} multiply(%reduce.217, %broadcast.7109)
  %add.3048 = f32[2,8192]{1,0} add(%multiply.3317, %broadcast.7110)
  %rsqrt.99 = f32[2,8192]{1,0} rsqrt(%add.3048)
  %broadcast.8816 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.99), dimensions={0,1}
  %multiply.3318 = f32[2,8192,4096]{2,1,0} multiply(%convert.1115, %broadcast.8816)
  %convert.1116 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3318)
  %param.165 = f32[4096]{0} parameter(86), sharding={replicated}
  %convert.1117 = bf16[4096]{0} convert(%param.165)
  %broadcast.8818 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1117), dimensions={2}
  %multiply.3319 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1116, %broadcast.8818)
  %copy.1421 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3319)
  %param.166 = f32[256,14336]{1,0} parameter(83), sharding={devices=[16,1]<=[16]}
  %convert.1118 = bf16[256,14336]{1,0} convert(%param.166)
  %all-gather.124 = bf16[4096,14336]{1,0} all-gather(%convert.1118), channel_id=125, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.222 = bf16[2,8192,14336]{2,1,0} dot(%copy.1421, %all-gather.124), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.124 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.222), exponent_bits=8, mantissa_bits=7
  %negate.820 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.124)
  %exponential.143 = bf16[2,8192,14336]{2,1,0} exponential(%negate.820)
  %add.3049 = bf16[2,8192,14336]{2,1,0} add(%exponential.143, %broadcast.7215)
  %divide.670 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3049)
  %multiply.3320 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.124, %divide.670)
  %param.167 = f32[256,14336]{1,0} parameter(84), sharding={devices=[16,1]<=[16]}
  %convert.1119 = bf16[256,14336]{1,0} convert(%param.167)
  %all-gather.125 = bf16[4096,14336]{1,0} all-gather(%convert.1119), channel_id=126, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.223 = bf16[2,8192,14336]{2,1,0} dot(%copy.1421, %all-gather.125), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.125 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.223), exponent_bits=8, mantissa_bits=7
  %multiply.3321 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3320, %reduce-precision.125)
  %copy.1422 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3321)
  %param.168 = f32[14336,256]{1,0} parameter(85), sharding={devices=[1,16]<=[16]}
  %convert.1120 = bf16[14336,256]{1,0} convert(%param.168)
  %all-gather.126 = bf16[14336,4096]{1,0} all-gather(%convert.1120), channel_id=127, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.224 = bf16[2,8192,4096]{2,1,0} dot(%copy.1422, %all-gather.126), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1423 = bf16[2,8192,4096]{2,1,0} copy(%dot.224)
  %add.3051 = bf16[2,8192,4096]{2,1,0} add(%copy.1423, %add.3047)
  %copy.1424 = bf16[2,8192,4096]{2,1,0} copy(%add.3051)
  %copy.1425 = bf16[2,8192,4096]{2,1,0} copy(%copy.1424)
  %convert.1121 = f32[2,8192,4096]{2,1,0} convert(%copy.1425)
  %multiply.3322 = f32[2,8192,4096]{2,1,0} multiply(%convert.1121, %convert.1121)
  %reduce.218 = f32[2,8192]{1,0} reduce(%multiply.3322, %constant.5451), dimensions={2}, to_apply=%region_90.6138
  %multiply.3323 = f32[2,8192]{1,0} multiply(%reduce.218, %broadcast.7109)
  %add.3052 = f32[2,8192]{1,0} add(%multiply.3323, %broadcast.7110)
  %rsqrt.100 = f32[2,8192]{1,0} rsqrt(%add.3052)
  %broadcast.8825 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.100), dimensions={0,1}
  %multiply.3324 = f32[2,8192,4096]{2,1,0} multiply(%convert.1121, %broadcast.8825)
  %convert.1122 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3324)
  %param.169 = f32[4096]{0} parameter(96), sharding={replicated}
  %convert.1123 = bf16[4096]{0} convert(%param.169)
  %broadcast.8826 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1123), dimensions={2}
  %multiply.3326 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1122, %broadcast.8826)
  %copy.1426 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3326)
  %copy.1427 = bf16[2,8192,4096]{2,1,0} copy(%copy.1426)
  %param.170 = f32[256,32,128]{2,1,0} parameter(99), sharding={devices=[16,1,1]<=[16]}
  %convert.1124 = bf16[256,32,128]{2,1,0} convert(%param.170)
  %all-gather.127 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1124), channel_id=128, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.225 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1427, %all-gather.127), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.126 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.225), exponent_bits=8, mantissa_bits=7
  %convert.1125 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.126)
  %multiply.3338 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1125, %broadcast.7132)
  %slice.162 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.126), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.163 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.126), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.72 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.162, %slice.163), dimensions={3}
  %slice.164 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.126), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.165 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.126), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.73 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.164, %slice.165), dimensions={3}
  %select.1630 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.72, %concatenate.73)
  %convert.1131 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1630)
  %multiply.3343 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1131, %broadcast.7141)
  %multiply.3344 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3343, %broadcast.7145)
  %add.3056 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3338, %multiply.3344)
  %convert.1133 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3056)
  %copy.1428 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1133)
  %param.171 = f32[256,8,128]{2,1,0} parameter(97), sharding={devices=[16,1,1]<=[16]}
  %convert.1134 = bf16[256,8,128]{2,1,0} convert(%param.171)
  %all-gather.128 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1134), channel_id=129, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.226 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1427, %all-gather.128), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.127 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.226), exponent_bits=8, mantissa_bits=7
  %convert.1135 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.127)
  %multiply.3357 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1135, %broadcast.7159)
  %slice.166 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.127), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.167 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.127), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.74 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.166, %slice.167), dimensions={3}
  %slice.168 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.127), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.169 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.127), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.75 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.168, %slice.169), dimensions={3}
  %select.1634 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.74, %concatenate.75)
  %convert.1142 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1634)
  %multiply.3362 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1142, %broadcast.7168)
  %multiply.3363 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3362, %broadcast.7171)
  %add.3061 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3357, %multiply.3363)
  %convert.1144 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3061)
  %copy.1430 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1144)
  %param.172 = f32[256,8,128]{2,1,0} parameter(100), sharding={devices=[16,1,1]<=[16]}
  %convert.1145 = bf16[256,8,128]{2,1,0} convert(%param.172)
  %all-gather.129 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1145), channel_id=130, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.227 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1427, %all-gather.129), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.128 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.227), exponent_bits=8, mantissa_bits=7
  %copy.1431 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.128)
  %custom-call.17 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1428, %copy.1430, %copy.1431, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.110 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.17), index=0
  %reduce-precision.129 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.110), exponent_bits=8, mantissa_bits=7
  %copy.1432 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.129)
  %param.173 = f32[32,128,256]{2,1,0} parameter(98), sharding={devices=[1,1,16]<=[16]}
  %convert.1150 = bf16[32,128,256]{2,1,0} convert(%param.173)
  %all-gather.130 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1150), channel_id=131, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.228 = bf16[2,8192,4096]{2,1,0} dot(%copy.1432, %all-gather.130), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.130 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.228), exponent_bits=8, mantissa_bits=7
  %copy.1433 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.130)
  %add.3075 = bf16[2,8192,4096]{2,1,0} add(%copy.1425, %copy.1433)
  %convert.1151 = f32[2,8192,4096]{2,1,0} convert(%add.3075)
  %multiply.3365 = f32[2,8192,4096]{2,1,0} multiply(%convert.1151, %convert.1151)
  %reduce.222 = f32[2,8192]{1,0} reduce(%multiply.3365, %constant.5451), dimensions={2}, to_apply=%region_94.6380
  %multiply.3366 = f32[2,8192]{1,0} multiply(%reduce.222, %broadcast.7109)
  %add.3076 = f32[2,8192]{1,0} add(%multiply.3366, %broadcast.7110)
  %rsqrt.101 = f32[2,8192]{1,0} rsqrt(%add.3076)
  %broadcast.8914 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.101), dimensions={0,1}
  %multiply.3367 = f32[2,8192,4096]{2,1,0} multiply(%convert.1151, %broadcast.8914)
  %convert.1152 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3367)
  %param.174 = f32[4096]{0} parameter(95), sharding={replicated}
  %convert.1153 = bf16[4096]{0} convert(%param.174)
  %broadcast.8916 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1153), dimensions={2}
  %multiply.3368 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1152, %broadcast.8916)
  %copy.1434 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3368)
  %param.175 = f32[256,14336]{1,0} parameter(92), sharding={devices=[16,1]<=[16]}
  %convert.1154 = bf16[256,14336]{1,0} convert(%param.175)
  %all-gather.131 = bf16[4096,14336]{1,0} all-gather(%convert.1154), channel_id=132, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.229 = bf16[2,8192,14336]{2,1,0} dot(%copy.1434, %all-gather.131), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.131 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.229), exponent_bits=8, mantissa_bits=7
  %negate.823 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.131)
  %exponential.144 = bf16[2,8192,14336]{2,1,0} exponential(%negate.823)
  %add.3077 = bf16[2,8192,14336]{2,1,0} add(%exponential.144, %broadcast.7215)
  %divide.677 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3077)
  %multiply.3369 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.131, %divide.677)
  %param.176 = f32[256,14336]{1,0} parameter(93), sharding={devices=[16,1]<=[16]}
  %convert.1156 = bf16[256,14336]{1,0} convert(%param.176)
  %all-gather.132 = bf16[4096,14336]{1,0} all-gather(%convert.1156), channel_id=133, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.230 = bf16[2,8192,14336]{2,1,0} dot(%copy.1434, %all-gather.132), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.132 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.230), exponent_bits=8, mantissa_bits=7
  %multiply.3370 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3369, %reduce-precision.132)
  %copy.1435 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3370)
  %param.177 = f32[14336,256]{1,0} parameter(94), sharding={devices=[1,16]<=[16]}
  %convert.1157 = bf16[14336,256]{1,0} convert(%param.177)
  %all-gather.133 = bf16[14336,4096]{1,0} all-gather(%convert.1157), channel_id=134, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.231 = bf16[2,8192,4096]{2,1,0} dot(%copy.1435, %all-gather.133), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1436 = bf16[2,8192,4096]{2,1,0} copy(%dot.231)
  %add.3078 = bf16[2,8192,4096]{2,1,0} add(%copy.1436, %add.3075)
  %copy.1437 = bf16[2,8192,4096]{2,1,0} copy(%add.3078)
  %copy.1438 = bf16[2,8192,4096]{2,1,0} copy(%copy.1437)
  %convert.1158 = f32[2,8192,4096]{2,1,0} convert(%copy.1438)
  %multiply.3371 = f32[2,8192,4096]{2,1,0} multiply(%convert.1158, %convert.1158)
  %reduce.223 = f32[2,8192]{1,0} reduce(%multiply.3371, %constant.5451), dimensions={2}, to_apply=%region_95.6418
  %multiply.3372 = f32[2,8192]{1,0} multiply(%reduce.223, %broadcast.7109)
  %add.3079 = f32[2,8192]{1,0} add(%multiply.3372, %broadcast.7110)
  %rsqrt.102 = f32[2,8192]{1,0} rsqrt(%add.3079)
  %broadcast.8920 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.102), dimensions={0,1}
  %multiply.3373 = f32[2,8192,4096]{2,1,0} multiply(%convert.1158, %broadcast.8920)
  %convert.1159 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3373)
  %param.178 = f32[4096]{0} parameter(105), sharding={replicated}
  %convert.1160 = bf16[4096]{0} convert(%param.178)
  %broadcast.8921 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1160), dimensions={2}
  %multiply.3374 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1159, %broadcast.8921)
  %copy.1439 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3374)
  %copy.1440 = bf16[2,8192,4096]{2,1,0} copy(%copy.1439)
  %param.179 = f32[256,32,128]{2,1,0} parameter(108), sharding={devices=[16,1,1]<=[16]}
  %convert.1161 = bf16[256,32,128]{2,1,0} convert(%param.179)
  %all-gather.134 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1161), channel_id=135, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.232 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1440, %all-gather.134), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.133 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.232), exponent_bits=8, mantissa_bits=7
  %convert.1162 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.133)
  %multiply.3386 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1162, %broadcast.7132)
  %slice.171 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.133), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.172 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.133), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.76 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.171, %slice.172), dimensions={3}
  %slice.173 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.133), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.174 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.133), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.77 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.173, %slice.174), dimensions={3}
  %select.1659 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.76, %concatenate.77)
  %convert.1167 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1659)
  %multiply.3391 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1167, %broadcast.7141)
  %multiply.3392 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3391, %broadcast.7145)
  %add.3083 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3386, %multiply.3392)
  %convert.1170 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3083)
  %copy.1441 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1170)
  %param.180 = f32[256,8,128]{2,1,0} parameter(106), sharding={devices=[16,1,1]<=[16]}
  %convert.1171 = bf16[256,8,128]{2,1,0} convert(%param.180)
  %all-gather.135 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1171), channel_id=136, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.233 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1440, %all-gather.135), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.134 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.233), exponent_bits=8, mantissa_bits=7
  %convert.1172 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.134)
  %multiply.3405 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1172, %broadcast.7159)
  %slice.175 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.134), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.176 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.134), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.78 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.175, %slice.176), dimensions={3}
  %slice.177 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.134), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.178 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.134), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.79 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.177, %slice.178), dimensions={3}
  %select.1663 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.78, %concatenate.79)
  %convert.1178 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1663)
  %multiply.3410 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1178, %broadcast.7168)
  %multiply.3411 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3410, %broadcast.7171)
  %add.3087 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3405, %multiply.3411)
  %convert.1181 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3087)
  %copy.1443 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1181)
  %param.181 = f32[256,8,128]{2,1,0} parameter(109), sharding={devices=[16,1,1]<=[16]}
  %convert.1182 = bf16[256,8,128]{2,1,0} convert(%param.181)
  %all-gather.136 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1182), channel_id=137, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.234 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1440, %all-gather.136), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.135 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.234), exponent_bits=8, mantissa_bits=7
  %copy.1444 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.135)
  %custom-call.18 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1441, %copy.1443, %copy.1444, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.116 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.18), index=0
  %reduce-precision.136 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.116), exponent_bits=8, mantissa_bits=7
  %copy.1445 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.136)
  %param.182 = f32[32,128,256]{2,1,0} parameter(107), sharding={devices=[1,1,16]<=[16]}
  %convert.1188 = bf16[32,128,256]{2,1,0} convert(%param.182)
  %all-gather.137 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1188), channel_id=138, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.235 = bf16[2,8192,4096]{2,1,0} dot(%copy.1445, %all-gather.137), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.137 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.235), exponent_bits=8, mantissa_bits=7
  %copy.1446 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.137)
  %add.3100 = bf16[2,8192,4096]{2,1,0} add(%copy.1438, %copy.1446)
  %convert.1189 = f32[2,8192,4096]{2,1,0} convert(%add.3100)
  %multiply.3413 = f32[2,8192,4096]{2,1,0} multiply(%convert.1189, %convert.1189)
  %reduce.227 = f32[2,8192]{1,0} reduce(%multiply.3413, %constant.5451), dimensions={2}, to_apply=%region_99.6660
  %multiply.3414 = f32[2,8192]{1,0} multiply(%reduce.227, %broadcast.7109)
  %add.3101 = f32[2,8192]{1,0} add(%multiply.3414, %broadcast.7110)
  %rsqrt.103 = f32[2,8192]{1,0} rsqrt(%add.3101)
  %broadcast.9001 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.103), dimensions={0,1}
  %multiply.3415 = f32[2,8192,4096]{2,1,0} multiply(%convert.1189, %broadcast.9001)
  %convert.1190 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3415)
  %param.183 = f32[4096]{0} parameter(104), sharding={replicated}
  %convert.1191 = bf16[4096]{0} convert(%param.183)
  %broadcast.9002 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1191), dimensions={2}
  %multiply.3416 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1190, %broadcast.9002)
  %copy.1447 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3416)
  %param.184 = f32[256,14336]{1,0} parameter(101), sharding={devices=[16,1]<=[16]}
  %convert.1192 = bf16[256,14336]{1,0} convert(%param.184)
  %all-gather.138 = bf16[4096,14336]{1,0} all-gather(%convert.1192), channel_id=139, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.236 = bf16[2,8192,14336]{2,1,0} dot(%copy.1447, %all-gather.138), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.138 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.236), exponent_bits=8, mantissa_bits=7
  %negate.826 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.138)
  %exponential.145 = bf16[2,8192,14336]{2,1,0} exponential(%negate.826)
  %add.3102 = bf16[2,8192,14336]{2,1,0} add(%exponential.145, %broadcast.7215)
  %divide.684 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3102)
  %multiply.3417 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.138, %divide.684)
  %param.185 = f32[256,14336]{1,0} parameter(102), sharding={devices=[16,1]<=[16]}
  %convert.1193 = bf16[256,14336]{1,0} convert(%param.185)
  %all-gather.139 = bf16[4096,14336]{1,0} all-gather(%convert.1193), channel_id=140, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.237 = bf16[2,8192,14336]{2,1,0} dot(%copy.1447, %all-gather.139), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.139 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.237), exponent_bits=8, mantissa_bits=7
  %multiply.3418 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3417, %reduce-precision.139)
  %copy.1448 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3418)
  %param.186 = f32[14336,256]{1,0} parameter(103), sharding={devices=[1,16]<=[16]}
  %convert.1194 = bf16[14336,256]{1,0} convert(%param.186)
  %all-gather.140 = bf16[14336,4096]{1,0} all-gather(%convert.1194), channel_id=141, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.238 = bf16[2,8192,4096]{2,1,0} dot(%copy.1448, %all-gather.140), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1449 = bf16[2,8192,4096]{2,1,0} copy(%dot.238)
  %add.3103 = bf16[2,8192,4096]{2,1,0} add(%copy.1449, %add.3100)
  %copy.1450 = bf16[2,8192,4096]{2,1,0} copy(%add.3103)
  %copy.1451 = bf16[2,8192,4096]{2,1,0} copy(%copy.1450)
  %convert.1195 = f32[2,8192,4096]{2,1,0} convert(%copy.1451)
  %multiply.3419 = f32[2,8192,4096]{2,1,0} multiply(%convert.1195, %convert.1195)
  %reduce.228 = f32[2,8192]{1,0} reduce(%multiply.3419, %constant.5451), dimensions={2}, to_apply=%region_100.6698
  %multiply.3420 = f32[2,8192]{1,0} multiply(%reduce.228, %broadcast.7109)
  %add.3104 = f32[2,8192]{1,0} add(%multiply.3420, %broadcast.7110)
  %rsqrt.104 = f32[2,8192]{1,0} rsqrt(%add.3104)
  %broadcast.9006 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.104), dimensions={0,1}
  %multiply.3421 = f32[2,8192,4096]{2,1,0} multiply(%convert.1195, %broadcast.9006)
  %convert.1196 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3421)
  %param.187 = f32[4096]{0} parameter(123), sharding={replicated}
  %convert.1197 = bf16[4096]{0} convert(%param.187)
  %broadcast.9007 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1197), dimensions={2}
  %multiply.3422 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1196, %broadcast.9007)
  %copy.1452 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3422)
  %copy.1453 = bf16[2,8192,4096]{2,1,0} copy(%copy.1452)
  %param.188 = f32[256,32,128]{2,1,0} parameter(126), sharding={devices=[16,1,1]<=[16]}
  %convert.1198 = bf16[256,32,128]{2,1,0} convert(%param.188)
  %all-gather.141 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1198), channel_id=142, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.239 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1453, %all-gather.141), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.140 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.239), exponent_bits=8, mantissa_bits=7
  %convert.1199 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.140)
  %multiply.3435 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1199, %broadcast.7132)
  %slice.180 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.140), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.181 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.140), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.80 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.180, %slice.181), dimensions={3}
  %slice.182 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.140), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.183 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.140), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.81 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.182, %slice.183), dimensions={3}
  %select.1688 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.80, %concatenate.81)
  %convert.1204 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1688)
  %multiply.3441 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1204, %broadcast.7141)
  %multiply.3442 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3441, %broadcast.7145)
  %add.3108 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3435, %multiply.3442)
  %convert.1207 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3108)
  %copy.1454 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1207)
  %param.189 = f32[256,8,128]{2,1,0} parameter(124), sharding={devices=[16,1,1]<=[16]}
  %convert.1208 = bf16[256,8,128]{2,1,0} convert(%param.189)
  %all-gather.142 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1208), channel_id=143, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.240 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1453, %all-gather.142), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.141 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.240), exponent_bits=8, mantissa_bits=7
  %convert.1209 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.141)
  %multiply.3453 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1209, %broadcast.7159)
  %slice.184 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.141), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.185 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.141), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.82 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.184, %slice.185), dimensions={3}
  %slice.186 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.141), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.187 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.141), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.83 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.186, %slice.187), dimensions={3}
  %select.1692 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.82, %concatenate.83)
  %convert.1216 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1692)
  %multiply.3458 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1216, %broadcast.7168)
  %multiply.3459 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3458, %broadcast.7171)
  %add.3112 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3453, %multiply.3459)
  %convert.1218 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3112)
  %copy.1456 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1218)
  %param.190 = f32[256,8,128]{2,1,0} parameter(127), sharding={devices=[16,1,1]<=[16]}
  %convert.1219 = bf16[256,8,128]{2,1,0} convert(%param.190)
  %all-gather.143 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1219), channel_id=144, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.241 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1453, %all-gather.143), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.142 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.241), exponent_bits=8, mantissa_bits=7
  %copy.1457 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.142)
  %custom-call.19 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1454, %copy.1456, %copy.1457, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.122 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.19), index=0
  %reduce-precision.143 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.122), exponent_bits=8, mantissa_bits=7
  %copy.1458 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.143)
  %param.191 = f32[32,128,256]{2,1,0} parameter(125), sharding={devices=[1,1,16]<=[16]}
  %convert.1224 = bf16[32,128,256]{2,1,0} convert(%param.191)
  %all-gather.144 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1224), channel_id=145, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.242 = bf16[2,8192,4096]{2,1,0} dot(%copy.1458, %all-gather.144), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.144 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.242), exponent_bits=8, mantissa_bits=7
  %copy.1459 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.144)
  %add.3126 = bf16[2,8192,4096]{2,1,0} add(%copy.1451, %copy.1459)
  %convert.1225 = f32[2,8192,4096]{2,1,0} convert(%add.3126)
  %multiply.3462 = f32[2,8192,4096]{2,1,0} multiply(%convert.1225, %convert.1225)
  %reduce.232 = f32[2,8192]{1,0} reduce(%multiply.3462, %constant.5451), dimensions={2}, to_apply=%region_104.6940
  %multiply.3463 = f32[2,8192]{1,0} multiply(%reduce.232, %broadcast.7109)
  %add.3127 = f32[2,8192]{1,0} add(%multiply.3463, %broadcast.7110)
  %rsqrt.105 = f32[2,8192]{1,0} rsqrt(%add.3127)
  %broadcast.9101 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.105), dimensions={0,1}
  %multiply.3464 = f32[2,8192,4096]{2,1,0} multiply(%convert.1225, %broadcast.9101)
  %convert.1226 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3464)
  %param.192 = f32[4096]{0} parameter(122), sharding={replicated}
  %convert.1227 = bf16[4096]{0} convert(%param.192)
  %broadcast.9103 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1227), dimensions={2}
  %multiply.3465 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1226, %broadcast.9103)
  %copy.1460 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3465)
  %param.193 = f32[256,14336]{1,0} parameter(119), sharding={devices=[16,1]<=[16]}
  %convert.1228 = bf16[256,14336]{1,0} convert(%param.193)
  %all-gather.145 = bf16[4096,14336]{1,0} all-gather(%convert.1228), channel_id=146, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.243 = bf16[2,8192,14336]{2,1,0} dot(%copy.1460, %all-gather.145), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.145 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.243), exponent_bits=8, mantissa_bits=7
  %negate.829 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.145)
  %exponential.146 = bf16[2,8192,14336]{2,1,0} exponential(%negate.829)
  %add.3128 = bf16[2,8192,14336]{2,1,0} add(%exponential.146, %broadcast.7215)
  %divide.691 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3128)
  %multiply.3466 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.145, %divide.691)
  %param.194 = f32[256,14336]{1,0} parameter(120), sharding={devices=[16,1]<=[16]}
  %convert.1229 = bf16[256,14336]{1,0} convert(%param.194)
  %all-gather.146 = bf16[4096,14336]{1,0} all-gather(%convert.1229), channel_id=147, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.244 = bf16[2,8192,14336]{2,1,0} dot(%copy.1460, %all-gather.146), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.146 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.244), exponent_bits=8, mantissa_bits=7
  %multiply.3467 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3466, %reduce-precision.146)
  %copy.1461 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3467)
  %param.195 = f32[14336,256]{1,0} parameter(121), sharding={devices=[1,16]<=[16]}
  %convert.1230 = bf16[14336,256]{1,0} convert(%param.195)
  %all-gather.147 = bf16[14336,4096]{1,0} all-gather(%convert.1230), channel_id=148, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.245 = bf16[2,8192,4096]{2,1,0} dot(%copy.1461, %all-gather.147), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1462 = bf16[2,8192,4096]{2,1,0} copy(%dot.245)
  %add.3129 = bf16[2,8192,4096]{2,1,0} add(%copy.1462, %add.3126)
  %copy.1463 = bf16[2,8192,4096]{2,1,0} copy(%add.3129)
  %copy.1464 = bf16[2,8192,4096]{2,1,0} copy(%copy.1463)
  %convert.1232 = f32[2,8192,4096]{2,1,0} convert(%copy.1464)
  %multiply.3468 = f32[2,8192,4096]{2,1,0} multiply(%convert.1232, %convert.1232)
  %reduce.233 = f32[2,8192]{1,0} reduce(%multiply.3468, %constant.5451), dimensions={2}, to_apply=%region_105.6978
  %multiply.3469 = f32[2,8192]{1,0} multiply(%reduce.233, %broadcast.7109)
  %add.3130 = f32[2,8192]{1,0} add(%multiply.3469, %broadcast.7110)
  %rsqrt.106 = f32[2,8192]{1,0} rsqrt(%add.3130)
  %broadcast.9110 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.106), dimensions={0,1}
  %multiply.3470 = f32[2,8192,4096]{2,1,0} multiply(%convert.1232, %broadcast.9110)
  %convert.1233 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3470)
  %param.196 = f32[4096]{0} parameter(132), sharding={replicated}
  %convert.1234 = bf16[4096]{0} convert(%param.196)
  %broadcast.9111 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1234), dimensions={2}
  %multiply.3471 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1233, %broadcast.9111)
  %copy.1465 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3471)
  %copy.1466 = bf16[2,8192,4096]{2,1,0} copy(%copy.1465)
  %param.197 = f32[256,32,128]{2,1,0} parameter(135), sharding={devices=[16,1,1]<=[16]}
  %convert.1235 = bf16[256,32,128]{2,1,0} convert(%param.197)
  %all-gather.148 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1235), channel_id=149, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.246 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1466, %all-gather.148), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.147 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.246), exponent_bits=8, mantissa_bits=7
  %convert.1236 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.147)
  %multiply.3484 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1236, %broadcast.7132)
  %slice.189 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.147), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.190 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.147), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.84 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.189, %slice.190), dimensions={3}
  %slice.191 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.147), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.192 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.147), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.85 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.191, %slice.192), dimensions={3}
  %select.1718 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.84, %concatenate.85)
  %convert.1241 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1718)
  %multiply.3489 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1241, %broadcast.7141)
  %multiply.3490 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3489, %broadcast.7145)
  %add.3134 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3484, %multiply.3490)
  %convert.1243 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3134)
  %copy.1467 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1243)
  %param.198 = f32[256,8,128]{2,1,0} parameter(133), sharding={devices=[16,1,1]<=[16]}
  %convert.1244 = bf16[256,8,128]{2,1,0} convert(%param.198)
  %all-gather.149 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1244), channel_id=150, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.247 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1466, %all-gather.149), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.148 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.247), exponent_bits=8, mantissa_bits=7
  %convert.1246 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.148)
  %multiply.3501 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1246, %broadcast.7159)
  %slice.193 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.148), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.194 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.148), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.86 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.193, %slice.194), dimensions={3}
  %slice.195 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.148), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.196 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.148), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.87 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.195, %slice.196), dimensions={3}
  %select.1722 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.86, %concatenate.87)
  %convert.1252 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1722)
  %multiply.3507 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1252, %broadcast.7168)
  %multiply.3508 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3507, %broadcast.7171)
  %add.3138 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3501, %multiply.3508)
  %convert.1254 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3138)
  %copy.1469 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1254)
  %param.199 = f32[256,8,128]{2,1,0} parameter(136), sharding={devices=[16,1,1]<=[16]}
  %convert.1256 = bf16[256,8,128]{2,1,0} convert(%param.199)
  %all-gather.150 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1256), channel_id=151, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.248 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1466, %all-gather.150), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.149 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.248), exponent_bits=8, mantissa_bits=7
  %copy.1470 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.149)
  %custom-call.20 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1467, %copy.1469, %copy.1470, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.128 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.20), index=0
  %reduce-precision.150 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.128), exponent_bits=8, mantissa_bits=7
  %copy.1471 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.150)
  %param.200 = f32[32,128,256]{2,1,0} parameter(134), sharding={devices=[1,1,16]<=[16]}
  %convert.1261 = bf16[32,128,256]{2,1,0} convert(%param.200)
  %all-gather.151 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1261), channel_id=152, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.249 = bf16[2,8192,4096]{2,1,0} dot(%copy.1471, %all-gather.151), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.151 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.249), exponent_bits=8, mantissa_bits=7
  %copy.1472 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.151)
  %add.3151 = bf16[2,8192,4096]{2,1,0} add(%copy.1464, %copy.1472)
  %convert.1263 = f32[2,8192,4096]{2,1,0} convert(%add.3151)
  %multiply.3511 = f32[2,8192,4096]{2,1,0} multiply(%convert.1263, %convert.1263)
  %reduce.237 = f32[2,8192]{1,0} reduce(%multiply.3511, %constant.5451), dimensions={2}, to_apply=%region_109.7220
  %multiply.3512 = f32[2,8192]{1,0} multiply(%reduce.237, %broadcast.7109)
  %add.3152 = f32[2,8192]{1,0} add(%multiply.3512, %broadcast.7110)
  %rsqrt.107 = f32[2,8192]{1,0} rsqrt(%add.3152)
  %broadcast.9198 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.107), dimensions={0,1}
  %multiply.3513 = f32[2,8192,4096]{2,1,0} multiply(%convert.1263, %broadcast.9198)
  %convert.1264 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3513)
  %param.201 = f32[4096]{0} parameter(131), sharding={replicated}
  %convert.1265 = bf16[4096]{0} convert(%param.201)
  %broadcast.9199 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1265), dimensions={2}
  %multiply.3514 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1264, %broadcast.9199)
  %copy.1473 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3514)
  %param.202 = f32[256,14336]{1,0} parameter(128), sharding={devices=[16,1]<=[16]}
  %convert.1266 = bf16[256,14336]{1,0} convert(%param.202)
  %all-gather.152 = bf16[4096,14336]{1,0} all-gather(%convert.1266), channel_id=153, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.250 = bf16[2,8192,14336]{2,1,0} dot(%copy.1473, %all-gather.152), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.152 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.250), exponent_bits=8, mantissa_bits=7
  %negate.832 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.152)
  %exponential.147 = bf16[2,8192,14336]{2,1,0} exponential(%negate.832)
  %add.3153 = bf16[2,8192,14336]{2,1,0} add(%exponential.147, %broadcast.7215)
  %divide.698 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3153)
  %multiply.3515 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.152, %divide.698)
  %param.203 = f32[256,14336]{1,0} parameter(129), sharding={devices=[16,1]<=[16]}
  %convert.1267 = bf16[256,14336]{1,0} convert(%param.203)
  %all-gather.153 = bf16[4096,14336]{1,0} all-gather(%convert.1267), channel_id=154, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.251 = bf16[2,8192,14336]{2,1,0} dot(%copy.1473, %all-gather.153), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.153 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.251), exponent_bits=8, mantissa_bits=7
  %multiply.3517 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3515, %reduce-precision.153)
  %copy.1474 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3517)
  %param.204 = f32[14336,256]{1,0} parameter(130), sharding={devices=[1,16]<=[16]}
  %convert.1268 = bf16[14336,256]{1,0} convert(%param.204)
  %all-gather.154 = bf16[14336,4096]{1,0} all-gather(%convert.1268), channel_id=155, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.252 = bf16[2,8192,4096]{2,1,0} dot(%copy.1474, %all-gather.154), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1475 = bf16[2,8192,4096]{2,1,0} copy(%dot.252)
  %add.3154 = bf16[2,8192,4096]{2,1,0} add(%copy.1475, %add.3151)
  %copy.1476 = bf16[2,8192,4096]{2,1,0} copy(%add.3154)
  %copy.1477 = bf16[2,8192,4096]{2,1,0} copy(%copy.1476)
  %convert.1269 = f32[2,8192,4096]{2,1,0} convert(%copy.1477)
  %multiply.3518 = f32[2,8192,4096]{2,1,0} multiply(%convert.1269, %convert.1269)
  %reduce.238 = f32[2,8192]{1,0} reduce(%multiply.3518, %constant.5451), dimensions={2}, to_apply=%region_110.7258
  %multiply.3519 = f32[2,8192]{1,0} multiply(%reduce.238, %broadcast.7109)
  %add.3155 = f32[2,8192]{1,0} add(%multiply.3519, %broadcast.7110)
  %rsqrt.108 = f32[2,8192]{1,0} rsqrt(%add.3155)
  %broadcast.9203 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.108), dimensions={0,1}
  %multiply.3520 = f32[2,8192,4096]{2,1,0} multiply(%convert.1269, %broadcast.9203)
  %convert.1270 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3520)
  %param.205 = f32[4096]{0} parameter(141), sharding={replicated}
  %convert.1271 = bf16[4096]{0} convert(%param.205)
  %broadcast.9204 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1271), dimensions={2}
  %multiply.3521 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1270, %broadcast.9204)
  %copy.1478 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3521)
  %copy.1479 = bf16[2,8192,4096]{2,1,0} copy(%copy.1478)
  %param.206 = f32[256,32,128]{2,1,0} parameter(144), sharding={devices=[16,1,1]<=[16]}
  %convert.1272 = bf16[256,32,128]{2,1,0} convert(%param.206)
  %all-gather.155 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1272), channel_id=156, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.253 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1479, %all-gather.155), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.154 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.253), exponent_bits=8, mantissa_bits=7
  %convert.1273 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.154)
  %multiply.3532 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1273, %broadcast.7132)
  %slice.198 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.154), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.199 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.154), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.88 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.198, %slice.199), dimensions={3}
  %slice.200 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.154), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.201 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.154), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.89 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.200, %slice.201), dimensions={3}
  %select.1749 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.88, %concatenate.89)
  %convert.1278 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1749)
  %multiply.3537 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1278, %broadcast.7141)
  %multiply.3538 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3537, %broadcast.7145)
  %add.3159 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3532, %multiply.3538)
  %convert.1280 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3159)
  %copy.1480 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1280)
  %param.207 = f32[256,8,128]{2,1,0} parameter(142), sharding={devices=[16,1,1]<=[16]}
  %convert.1281 = bf16[256,8,128]{2,1,0} convert(%param.207)
  %all-gather.156 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1281), channel_id=157, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.254 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1479, %all-gather.156), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.155 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.254), exponent_bits=8, mantissa_bits=7
  %convert.1282 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.155)
  %multiply.3549 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1282, %broadcast.7159)
  %slice.202 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.155), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.203 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.155), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.90 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.202, %slice.203), dimensions={3}
  %slice.204 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.155), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.205 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.155), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.91 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.204, %slice.205), dimensions={3}
  %select.1753 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.90, %concatenate.91)
  %convert.1287 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1753)
  %multiply.3554 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1287, %broadcast.7168)
  %multiply.3555 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3554, %broadcast.7171)
  %add.3164 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3549, %multiply.3555)
  %convert.1289 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3164)
  %copy.1482 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1289)
  %param.208 = f32[256,8,128]{2,1,0} parameter(145), sharding={devices=[16,1,1]<=[16]}
  %convert.1290 = bf16[256,8,128]{2,1,0} convert(%param.208)
  %all-gather.157 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1290), channel_id=158, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.255 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1479, %all-gather.157), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.156 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.255), exponent_bits=8, mantissa_bits=7
  %copy.1483 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.156)
  %custom-call.21 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1480, %copy.1482, %copy.1483, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.134 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.21), index=0
  %reduce-precision.157 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.134), exponent_bits=8, mantissa_bits=7
  %copy.1484 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.157)
  %param.209 = f32[32,128,256]{2,1,0} parameter(143), sharding={devices=[1,1,16]<=[16]}
  %convert.1295 = bf16[32,128,256]{2,1,0} convert(%param.209)
  %all-gather.158 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1295), channel_id=159, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.256 = bf16[2,8192,4096]{2,1,0} dot(%copy.1484, %all-gather.158), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.158 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.256), exponent_bits=8, mantissa_bits=7
  %copy.1485 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.158)
  %add.3177 = bf16[2,8192,4096]{2,1,0} add(%copy.1477, %copy.1485)
  %convert.1297 = f32[2,8192,4096]{2,1,0} convert(%add.3177)
  %multiply.3557 = f32[2,8192,4096]{2,1,0} multiply(%convert.1297, %convert.1297)
  %reduce.242 = f32[2,8192]{1,0} reduce(%multiply.3557, %constant.5451), dimensions={2}, to_apply=%region_114.7500
  %multiply.3558 = f32[2,8192]{1,0} multiply(%reduce.242, %broadcast.7109)
  %add.3178 = f32[2,8192]{1,0} add(%multiply.3558, %broadcast.7110)
  %rsqrt.109 = f32[2,8192]{1,0} rsqrt(%add.3178)
  %broadcast.9284 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.109), dimensions={0,1}
  %multiply.3559 = f32[2,8192,4096]{2,1,0} multiply(%convert.1297, %broadcast.9284)
  %convert.1298 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3559)
  %param.210 = f32[4096]{0} parameter(140), sharding={replicated}
  %convert.1299 = bf16[4096]{0} convert(%param.210)
  %broadcast.9285 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1299), dimensions={2}
  %multiply.3560 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1298, %broadcast.9285)
  %copy.1486 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3560)
  %param.211 = f32[256,14336]{1,0} parameter(137), sharding={devices=[16,1]<=[16]}
  %convert.1300 = bf16[256,14336]{1,0} convert(%param.211)
  %all-gather.159 = bf16[4096,14336]{1,0} all-gather(%convert.1300), channel_id=160, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.257 = bf16[2,8192,14336]{2,1,0} dot(%copy.1486, %all-gather.159), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.159 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.257), exponent_bits=8, mantissa_bits=7
  %negate.835 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.159)
  %exponential.148 = bf16[2,8192,14336]{2,1,0} exponential(%negate.835)
  %add.3179 = bf16[2,8192,14336]{2,1,0} add(%exponential.148, %broadcast.7215)
  %divide.705 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3179)
  %multiply.3561 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.159, %divide.705)
  %param.212 = f32[256,14336]{1,0} parameter(138), sharding={devices=[16,1]<=[16]}
  %convert.1301 = bf16[256,14336]{1,0} convert(%param.212)
  %all-gather.160 = bf16[4096,14336]{1,0} all-gather(%convert.1301), channel_id=161, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.258 = bf16[2,8192,14336]{2,1,0} dot(%copy.1486, %all-gather.160), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.160 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.258), exponent_bits=8, mantissa_bits=7
  %multiply.3562 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3561, %reduce-precision.160)
  %copy.1487 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3562)
  %param.213 = f32[14336,256]{1,0} parameter(139), sharding={devices=[1,16]<=[16]}
  %convert.1302 = bf16[14336,256]{1,0} convert(%param.213)
  %all-gather.161 = bf16[14336,4096]{1,0} all-gather(%convert.1302), channel_id=162, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.259 = bf16[2,8192,4096]{2,1,0} dot(%copy.1487, %all-gather.161), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1488 = bf16[2,8192,4096]{2,1,0} copy(%dot.259)
  %add.3180 = bf16[2,8192,4096]{2,1,0} add(%copy.1488, %add.3177)
  %copy.1489 = bf16[2,8192,4096]{2,1,0} copy(%add.3180)
  %copy.1490 = bf16[2,8192,4096]{2,1,0} copy(%copy.1489)
  %convert.1303 = f32[2,8192,4096]{2,1,0} convert(%copy.1490)
  %multiply.3563 = f32[2,8192,4096]{2,1,0} multiply(%convert.1303, %convert.1303)
  %reduce.243 = f32[2,8192]{1,0} reduce(%multiply.3563, %constant.5451), dimensions={2}, to_apply=%region_115.7538
  %multiply.3564 = f32[2,8192]{1,0} multiply(%reduce.243, %broadcast.7109)
  %add.3181 = f32[2,8192]{1,0} add(%multiply.3564, %broadcast.7110)
  %rsqrt.110 = f32[2,8192]{1,0} rsqrt(%add.3181)
  %broadcast.9289 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.110), dimensions={0,1}
  %multiply.3565 = f32[2,8192,4096]{2,1,0} multiply(%convert.1303, %broadcast.9289)
  %convert.1305 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3565)
  %param.214 = f32[4096]{0} parameter(150), sharding={replicated}
  %convert.1306 = bf16[4096]{0} convert(%param.214)
  %broadcast.9290 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1306), dimensions={2}
  %multiply.3566 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1305, %broadcast.9290)
  %copy.1491 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3566)
  %copy.1492 = bf16[2,8192,4096]{2,1,0} copy(%copy.1491)
  %param.215 = f32[256,32,128]{2,1,0} parameter(153), sharding={devices=[16,1,1]<=[16]}
  %convert.1307 = bf16[256,32,128]{2,1,0} convert(%param.215)
  %all-gather.162 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1307), channel_id=163, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.260 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1492, %all-gather.162), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.161 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.260), exponent_bits=8, mantissa_bits=7
  %convert.1308 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.161)
  %multiply.3578 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1308, %broadcast.7132)
  %slice.207 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.161), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.208 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.161), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.92 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.207, %slice.208), dimensions={3}
  %slice.209 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.161), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.210 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.161), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.93 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.209, %slice.210), dimensions={3}
  %select.1779 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.92, %concatenate.93)
  %convert.1313 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1779)
  %multiply.3583 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1313, %broadcast.7141)
  %multiply.3584 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3583, %broadcast.7145)
  %add.3185 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3578, %multiply.3584)
  %convert.1315 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3185)
  %copy.1493 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1315)
  %param.216 = f32[256,8,128]{2,1,0} parameter(151), sharding={devices=[16,1,1]<=[16]}
  %convert.1316 = bf16[256,8,128]{2,1,0} convert(%param.216)
  %all-gather.163 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1316), channel_id=164, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.261 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1492, %all-gather.163), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.162 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.261), exponent_bits=8, mantissa_bits=7
  %convert.1317 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.162)
  %multiply.3597 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1317, %broadcast.7159)
  %slice.211 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.162), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.212 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.162), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.94 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.211, %slice.212), dimensions={3}
  %slice.213 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.162), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.214 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.162), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.95 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.213, %slice.214), dimensions={3}
  %select.1783 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.94, %concatenate.95)
  %convert.1323 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1783)
  %multiply.3602 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1323, %broadcast.7168)
  %multiply.3603 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3602, %broadcast.7171)
  %add.3189 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3597, %multiply.3603)
  %convert.1325 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3189)
  %copy.1495 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1325)
  %param.217 = f32[256,8,128]{2,1,0} parameter(154), sharding={devices=[16,1,1]<=[16]}
  %convert.1327 = bf16[256,8,128]{2,1,0} convert(%param.217)
  %all-gather.164 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1327), channel_id=165, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.262 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1492, %all-gather.164), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.163 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.262), exponent_bits=8, mantissa_bits=7
  %copy.1496 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.163)
  %custom-call.22 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1493, %copy.1495, %copy.1496, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.140 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.22), index=0
  %reduce-precision.164 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.140), exponent_bits=8, mantissa_bits=7
  %copy.1497 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.164)
  %param.218 = f32[32,128,256]{2,1,0} parameter(152), sharding={devices=[1,1,16]<=[16]}
  %convert.1332 = bf16[32,128,256]{2,1,0} convert(%param.218)
  %all-gather.165 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1332), channel_id=166, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.263 = bf16[2,8192,4096]{2,1,0} dot(%copy.1497, %all-gather.165), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.165 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.263), exponent_bits=8, mantissa_bits=7
  %copy.1498 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.165)
  %add.3203 = bf16[2,8192,4096]{2,1,0} add(%copy.1490, %copy.1498)
  %convert.1333 = f32[2,8192,4096]{2,1,0} convert(%add.3203)
  %multiply.3606 = f32[2,8192,4096]{2,1,0} multiply(%convert.1333, %convert.1333)
  %reduce.247 = f32[2,8192]{1,0} reduce(%multiply.3606, %constant.5451), dimensions={2}, to_apply=%region_119.7780
  %multiply.3607 = f32[2,8192]{1,0} multiply(%reduce.247, %broadcast.7109)
  %add.3204 = f32[2,8192]{1,0} add(%multiply.3607, %broadcast.7110)
  %rsqrt.111 = f32[2,8192]{1,0} rsqrt(%add.3204)
  %broadcast.9386 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.111), dimensions={0,1}
  %multiply.3608 = f32[2,8192,4096]{2,1,0} multiply(%convert.1333, %broadcast.9386)
  %convert.1334 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3608)
  %param.219 = f32[4096]{0} parameter(149), sharding={replicated}
  %convert.1335 = bf16[4096]{0} convert(%param.219)
  %broadcast.9388 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1335), dimensions={2}
  %multiply.3609 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1334, %broadcast.9388)
  %copy.1499 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3609)
  %param.220 = f32[256,14336]{1,0} parameter(146), sharding={devices=[16,1]<=[16]}
  %convert.1336 = bf16[256,14336]{1,0} convert(%param.220)
  %all-gather.166 = bf16[4096,14336]{1,0} all-gather(%convert.1336), channel_id=167, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.264 = bf16[2,8192,14336]{2,1,0} dot(%copy.1499, %all-gather.166), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.166 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.264), exponent_bits=8, mantissa_bits=7
  %negate.838 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.166)
  %exponential.149 = bf16[2,8192,14336]{2,1,0} exponential(%negate.838)
  %add.3205 = bf16[2,8192,14336]{2,1,0} add(%exponential.149, %broadcast.7215)
  %divide.712 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3205)
  %multiply.3610 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.166, %divide.712)
  %param.221 = f32[256,14336]{1,0} parameter(147), sharding={devices=[16,1]<=[16]}
  %convert.1337 = bf16[256,14336]{1,0} convert(%param.221)
  %all-gather.167 = bf16[4096,14336]{1,0} all-gather(%convert.1337), channel_id=168, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.265 = bf16[2,8192,14336]{2,1,0} dot(%copy.1499, %all-gather.167), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.167 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.265), exponent_bits=8, mantissa_bits=7
  %multiply.3611 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3610, %reduce-precision.167)
  %copy.1500 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3611)
  %param.222 = f32[14336,256]{1,0} parameter(148), sharding={devices=[1,16]<=[16]}
  %convert.1338 = bf16[14336,256]{1,0} convert(%param.222)
  %all-gather.168 = bf16[14336,4096]{1,0} all-gather(%convert.1338), channel_id=169, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.266 = bf16[2,8192,4096]{2,1,0} dot(%copy.1500, %all-gather.168), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1501 = bf16[2,8192,4096]{2,1,0} copy(%dot.266)
  %add.3206 = bf16[2,8192,4096]{2,1,0} add(%copy.1501, %add.3203)
  %copy.1502 = bf16[2,8192,4096]{2,1,0} copy(%add.3206)
  %copy.1503 = bf16[2,8192,4096]{2,1,0} copy(%copy.1502)
  %convert.1339 = f32[2,8192,4096]{2,1,0} convert(%copy.1503)
  %multiply.3612 = f32[2,8192,4096]{2,1,0} multiply(%convert.1339, %convert.1339)
  %reduce.248 = f32[2,8192]{1,0} reduce(%multiply.3612, %constant.5451), dimensions={2}, to_apply=%region_120.7818
  %multiply.3613 = f32[2,8192]{1,0} multiply(%reduce.248, %broadcast.7109)
  %add.3207 = f32[2,8192]{1,0} add(%multiply.3613, %broadcast.7110)
  %rsqrt.112 = f32[2,8192]{1,0} rsqrt(%add.3207)
  %broadcast.9394 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.112), dimensions={0,1}
  %multiply.3615 = f32[2,8192,4096]{2,1,0} multiply(%convert.1339, %broadcast.9394)
  %convert.1340 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3615)
  %param.223 = f32[4096]{0} parameter(159), sharding={replicated}
  %convert.1343 = bf16[4096]{0} convert(%param.223)
  %broadcast.9396 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1343), dimensions={2}
  %multiply.3616 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1340, %broadcast.9396)
  %copy.1504 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3616)
  %copy.1505 = bf16[2,8192,4096]{2,1,0} copy(%copy.1504)
  %param.224 = f32[256,32,128]{2,1,0} parameter(162), sharding={devices=[16,1,1]<=[16]}
  %convert.1344 = bf16[256,32,128]{2,1,0} convert(%param.224)
  %all-gather.169 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1344), channel_id=170, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.267 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1505, %all-gather.169), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.168 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.267), exponent_bits=8, mantissa_bits=7
  %convert.1345 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.168)
  %multiply.3628 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1345, %broadcast.7132)
  %slice.216 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.168), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.217 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.168), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.96 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.216, %slice.217), dimensions={3}
  %slice.218 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.168), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.219 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.168), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.97 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.218, %slice.219), dimensions={3}
  %select.1810 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.96, %concatenate.97)
  %convert.1351 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1810)
  %multiply.3633 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1351, %broadcast.7141)
  %multiply.3635 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3633, %broadcast.7145)
  %add.3211 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3628, %multiply.3635)
  %convert.1353 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3211)
  %copy.1506 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1353)
  %param.225 = f32[256,8,128]{2,1,0} parameter(160), sharding={devices=[16,1,1]<=[16]}
  %convert.1354 = bf16[256,8,128]{2,1,0} convert(%param.225)
  %all-gather.170 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1354), channel_id=171, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.268 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1505, %all-gather.170), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.169 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.268), exponent_bits=8, mantissa_bits=7
  %convert.1355 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.169)
  %multiply.3646 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1355, %broadcast.7159)
  %slice.220 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.169), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.221 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.169), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.98 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.220, %slice.221), dimensions={3}
  %slice.222 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.169), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.223 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.169), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.99 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.222, %slice.223), dimensions={3}
  %select.1814 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.98, %concatenate.99)
  %convert.1360 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1814)
  %multiply.3651 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1360, %broadcast.7168)
  %multiply.3652 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3651, %broadcast.7171)
  %add.3215 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3646, %multiply.3652)
  %convert.1363 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3215)
  %copy.1508 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1363)
  %param.226 = f32[256,8,128]{2,1,0} parameter(163), sharding={devices=[16,1,1]<=[16]}
  %convert.1364 = bf16[256,8,128]{2,1,0} convert(%param.226)
  %all-gather.171 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1364), channel_id=172, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.269 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1505, %all-gather.171), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.170 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.269), exponent_bits=8, mantissa_bits=7
  %copy.1509 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.170)
  %custom-call.23 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1506, %copy.1508, %copy.1509, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.146 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.23), index=0
  %reduce-precision.171 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.146), exponent_bits=8, mantissa_bits=7
  %copy.1510 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.171)
  %param.227 = f32[32,128,256]{2,1,0} parameter(161), sharding={devices=[1,1,16]<=[16]}
  %convert.1370 = bf16[32,128,256]{2,1,0} convert(%param.227)
  %all-gather.172 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1370), channel_id=173, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.270 = bf16[2,8192,4096]{2,1,0} dot(%copy.1510, %all-gather.172), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.172 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.270), exponent_bits=8, mantissa_bits=7
  %copy.1511 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.172)
  %add.3228 = bf16[2,8192,4096]{2,1,0} add(%copy.1503, %copy.1511)
  %convert.1371 = f32[2,8192,4096]{2,1,0} convert(%add.3228)
  %multiply.3654 = f32[2,8192,4096]{2,1,0} multiply(%convert.1371, %convert.1371)
  %reduce.252 = f32[2,8192]{1,0} reduce(%multiply.3654, %constant.5451), dimensions={2}, to_apply=%region_124.8060
  %multiply.3655 = f32[2,8192]{1,0} multiply(%reduce.252, %broadcast.7109)
  %add.3229 = f32[2,8192]{1,0} add(%multiply.3655, %broadcast.7110)
  %rsqrt.113 = f32[2,8192]{1,0} rsqrt(%add.3229)
  %broadcast.9481 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.113), dimensions={0,1}
  %multiply.3656 = f32[2,8192,4096]{2,1,0} multiply(%convert.1371, %broadcast.9481)
  %convert.1372 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3656)
  %param.228 = f32[4096]{0} parameter(158), sharding={replicated}
  %convert.1374 = bf16[4096]{0} convert(%param.228)
  %broadcast.9482 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1374), dimensions={2}
  %multiply.3657 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1372, %broadcast.9482)
  %copy.1512 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3657)
  %param.229 = f32[256,14336]{1,0} parameter(155), sharding={devices=[16,1]<=[16]}
  %convert.1375 = bf16[256,14336]{1,0} convert(%param.229)
  %all-gather.173 = bf16[4096,14336]{1,0} all-gather(%convert.1375), channel_id=174, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.271 = bf16[2,8192,14336]{2,1,0} dot(%copy.1512, %all-gather.173), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.173 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.271), exponent_bits=8, mantissa_bits=7
  %negate.841 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.173)
  %exponential.150 = bf16[2,8192,14336]{2,1,0} exponential(%negate.841)
  %add.3230 = bf16[2,8192,14336]{2,1,0} add(%exponential.150, %broadcast.7215)
  %divide.719 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3230)
  %multiply.3658 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.173, %divide.719)
  %param.230 = f32[256,14336]{1,0} parameter(156), sharding={devices=[16,1]<=[16]}
  %convert.1376 = bf16[256,14336]{1,0} convert(%param.230)
  %all-gather.174 = bf16[4096,14336]{1,0} all-gather(%convert.1376), channel_id=175, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.272 = bf16[2,8192,14336]{2,1,0} dot(%copy.1512, %all-gather.174), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.174 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.272), exponent_bits=8, mantissa_bits=7
  %multiply.3659 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3658, %reduce-precision.174)
  %copy.1513 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3659)
  %param.231 = f32[14336,256]{1,0} parameter(157), sharding={devices=[1,16]<=[16]}
  %convert.1377 = bf16[14336,256]{1,0} convert(%param.231)
  %all-gather.175 = bf16[14336,4096]{1,0} all-gather(%convert.1377), channel_id=176, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.273 = bf16[2,8192,4096]{2,1,0} dot(%copy.1513, %all-gather.175), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1514 = bf16[2,8192,4096]{2,1,0} copy(%dot.273)
  %add.3231 = bf16[2,8192,4096]{2,1,0} add(%copy.1514, %add.3228)
  %copy.1515 = bf16[2,8192,4096]{2,1,0} copy(%add.3231)
  %copy.1516 = bf16[2,8192,4096]{2,1,0} copy(%copy.1515)
  %convert.1378 = f32[2,8192,4096]{2,1,0} convert(%copy.1516)
  %multiply.3660 = f32[2,8192,4096]{2,1,0} multiply(%convert.1378, %convert.1378)
  %reduce.253 = f32[2,8192]{1,0} reduce(%multiply.3660, %constant.5451), dimensions={2}, to_apply=%region_125.8098
  %multiply.3661 = f32[2,8192]{1,0} multiply(%reduce.253, %broadcast.7109)
  %add.3232 = f32[2,8192]{1,0} add(%multiply.3661, %broadcast.7110)
  %rsqrt.114 = f32[2,8192]{1,0} rsqrt(%add.3232)
  %broadcast.9486 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.114), dimensions={0,1}
  %multiply.3662 = f32[2,8192,4096]{2,1,0} multiply(%convert.1378, %broadcast.9486)
  %convert.1379 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3662)
  %param.232 = f32[4096]{0} parameter(168), sharding={replicated}
  %convert.1380 = bf16[4096]{0} convert(%param.232)
  %broadcast.9487 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1380), dimensions={2}
  %multiply.3663 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1379, %broadcast.9487)
  %copy.1517 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3663)
  %copy.1518 = bf16[2,8192,4096]{2,1,0} copy(%copy.1517)
  %param.233 = f32[256,32,128]{2,1,0} parameter(171), sharding={devices=[16,1,1]<=[16]}
  %convert.1381 = bf16[256,32,128]{2,1,0} convert(%param.233)
  %all-gather.176 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1381), channel_id=177, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.274 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1518, %all-gather.176), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.175 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.274), exponent_bits=8, mantissa_bits=7
  %convert.1382 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.175)
  %multiply.3675 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1382, %broadcast.7132)
  %slice.225 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.175), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.226 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.175), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.100 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.225, %slice.226), dimensions={3}
  %slice.227 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.175), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.228 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.175), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.101 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.227, %slice.228), dimensions={3}
  %select.1839 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.100, %concatenate.101)
  %convert.1387 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1839)
  %multiply.3681 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1387, %broadcast.7141)
  %multiply.3683 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3681, %broadcast.7145)
  %add.3236 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3675, %multiply.3683)
  %convert.1391 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3236)
  %copy.1519 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1391)
  %param.234 = f32[256,8,128]{2,1,0} parameter(169), sharding={devices=[16,1,1]<=[16]}
  %convert.1392 = bf16[256,8,128]{2,1,0} convert(%param.234)
  %all-gather.177 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1392), channel_id=178, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.275 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1518, %all-gather.177), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.176 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.275), exponent_bits=8, mantissa_bits=7
  %convert.1393 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.176)
  %multiply.3694 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1393, %broadcast.7159)
  %slice.229 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.176), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.230 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.176), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.102 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.229, %slice.230), dimensions={3}
  %slice.231 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.176), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.232 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.176), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.103 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.231, %slice.232), dimensions={3}
  %select.1843 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.102, %concatenate.103)
  %convert.1399 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1843)
  %multiply.3699 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1399, %broadcast.7168)
  %multiply.3700 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3699, %broadcast.7171)
  %add.3241 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3694, %multiply.3700)
  %convert.1402 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3241)
  %copy.1521 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1402)
  %param.235 = f32[256,8,128]{2,1,0} parameter(172), sharding={devices=[16,1,1]<=[16]}
  %convert.1403 = bf16[256,8,128]{2,1,0} convert(%param.235)
  %all-gather.178 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1403), channel_id=179, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.276 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1518, %all-gather.178), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.177 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.276), exponent_bits=8, mantissa_bits=7
  %copy.1522 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.177)
  %custom-call.24 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1519, %copy.1521, %copy.1522, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.152 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.24), index=0
  %reduce-precision.178 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.152), exponent_bits=8, mantissa_bits=7
  %copy.1523 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.178)
  %param.236 = f32[32,128,256]{2,1,0} parameter(170), sharding={devices=[1,1,16]<=[16]}
  %convert.1409 = bf16[32,128,256]{2,1,0} convert(%param.236)
  %all-gather.179 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1409), channel_id=180, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.277 = bf16[2,8192,4096]{2,1,0} dot(%copy.1523, %all-gather.179), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.179 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.277), exponent_bits=8, mantissa_bits=7
  %copy.1524 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.179)
  %add.3254 = bf16[2,8192,4096]{2,1,0} add(%copy.1516, %copy.1524)
  %convert.1410 = f32[2,8192,4096]{2,1,0} convert(%add.3254)
  %multiply.3702 = f32[2,8192,4096]{2,1,0} multiply(%convert.1410, %convert.1410)
  %reduce.257 = f32[2,8192]{1,0} reduce(%multiply.3702, %constant.5451), dimensions={2}, to_apply=%region_129.8340
  %multiply.3703 = f32[2,8192]{1,0} multiply(%reduce.257, %broadcast.7109)
  %add.3255 = f32[2,8192]{1,0} add(%multiply.3703, %broadcast.7110)
  %rsqrt.115 = f32[2,8192]{1,0} rsqrt(%add.3255)
  %broadcast.9567 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.115), dimensions={0,1}
  %multiply.3704 = f32[2,8192,4096]{2,1,0} multiply(%convert.1410, %broadcast.9567)
  %convert.1411 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3704)
  %param.237 = f32[4096]{0} parameter(167), sharding={replicated}
  %convert.1412 = bf16[4096]{0} convert(%param.237)
  %broadcast.9568 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1412), dimensions={2}
  %multiply.3705 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1411, %broadcast.9568)
  %copy.1525 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3705)
  %param.238 = f32[256,14336]{1,0} parameter(164), sharding={devices=[16,1]<=[16]}
  %convert.1413 = bf16[256,14336]{1,0} convert(%param.238)
  %all-gather.180 = bf16[4096,14336]{1,0} all-gather(%convert.1413), channel_id=181, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.278 = bf16[2,8192,14336]{2,1,0} dot(%copy.1525, %all-gather.180), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.180 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.278), exponent_bits=8, mantissa_bits=7
  %negate.844 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.180)
  %exponential.151 = bf16[2,8192,14336]{2,1,0} exponential(%negate.844)
  %add.3256 = bf16[2,8192,14336]{2,1,0} add(%exponential.151, %broadcast.7215)
  %divide.726 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3256)
  %multiply.3706 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.180, %divide.726)
  %param.239 = f32[256,14336]{1,0} parameter(165), sharding={devices=[16,1]<=[16]}
  %convert.1414 = bf16[256,14336]{1,0} convert(%param.239)
  %all-gather.181 = bf16[4096,14336]{1,0} all-gather(%convert.1414), channel_id=182, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.279 = bf16[2,8192,14336]{2,1,0} dot(%copy.1525, %all-gather.181), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.181 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.279), exponent_bits=8, mantissa_bits=7
  %multiply.3707 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3706, %reduce-precision.181)
  %copy.1526 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3707)
  %param.240 = f32[14336,256]{1,0} parameter(166), sharding={devices=[1,16]<=[16]}
  %convert.1415 = bf16[14336,256]{1,0} convert(%param.240)
  %all-gather.182 = bf16[14336,4096]{1,0} all-gather(%convert.1415), channel_id=183, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.280 = bf16[2,8192,4096]{2,1,0} dot(%copy.1526, %all-gather.182), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1527 = bf16[2,8192,4096]{2,1,0} copy(%dot.280)
  %add.3257 = bf16[2,8192,4096]{2,1,0} add(%copy.1527, %add.3254)
  %copy.1528 = bf16[2,8192,4096]{2,1,0} copy(%add.3257)
  %copy.1529 = bf16[2,8192,4096]{2,1,0} copy(%copy.1528)
  %convert.1416 = f32[2,8192,4096]{2,1,0} convert(%copy.1529)
  %multiply.3708 = f32[2,8192,4096]{2,1,0} multiply(%convert.1416, %convert.1416)
  %reduce.258 = f32[2,8192]{1,0} reduce(%multiply.3708, %constant.5451), dimensions={2}, to_apply=%region_130.8378
  %multiply.3710 = f32[2,8192]{1,0} multiply(%reduce.258, %broadcast.7109)
  %add.3258 = f32[2,8192]{1,0} add(%multiply.3710, %broadcast.7110)
  %rsqrt.116 = f32[2,8192]{1,0} rsqrt(%add.3258)
  %broadcast.9573 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.116), dimensions={0,1}
  %multiply.3711 = f32[2,8192,4096]{2,1,0} multiply(%convert.1416, %broadcast.9573)
  %convert.1417 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3711)
  %param.241 = f32[4096]{0} parameter(177), sharding={replicated}
  %convert.1418 = bf16[4096]{0} convert(%param.241)
  %broadcast.9576 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1418), dimensions={2}
  %multiply.3712 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1417, %broadcast.9576)
  %copy.1530 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3712)
  %copy.1531 = bf16[2,8192,4096]{2,1,0} copy(%copy.1530)
  %param.242 = f32[256,32,128]{2,1,0} parameter(180), sharding={devices=[16,1,1]<=[16]}
  %convert.1419 = bf16[256,32,128]{2,1,0} convert(%param.242)
  %all-gather.183 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1419), channel_id=184, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.281 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1531, %all-gather.183), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.182 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.281), exponent_bits=8, mantissa_bits=7
  %convert.1420 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.182)
  %multiply.3725 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1420, %broadcast.7132)
  %slice.234 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.182), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.235 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.182), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.104 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.234, %slice.235), dimensions={3}
  %slice.236 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.182), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.237 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.182), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.105 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.236, %slice.237), dimensions={3}
  %select.1868 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.104, %concatenate.105)
  %convert.1426 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1868)
  %multiply.3730 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1426, %broadcast.7141)
  %multiply.3731 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3730, %broadcast.7145)
  %add.3262 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3725, %multiply.3731)
  %convert.1428 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3262)
  %copy.1532 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1428)
  %param.243 = f32[256,8,128]{2,1,0} parameter(178), sharding={devices=[16,1,1]<=[16]}
  %convert.1429 = bf16[256,8,128]{2,1,0} convert(%param.243)
  %all-gather.184 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1429), channel_id=185, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.282 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1531, %all-gather.184), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.183 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.282), exponent_bits=8, mantissa_bits=7
  %convert.1430 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.183)
  %multiply.3743 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1430, %broadcast.7159)
  %slice.238 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.183), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.239 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.183), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.106 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.238, %slice.239), dimensions={3}
  %slice.240 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.183), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.241 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.183), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.107 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.240, %slice.241), dimensions={3}
  %select.1872 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.106, %concatenate.107)
  %convert.1437 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1872)
  %multiply.3748 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1437, %broadcast.7168)
  %multiply.3749 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3748, %broadcast.7171)
  %add.3266 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3743, %multiply.3749)
  %convert.1439 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3266)
  %copy.1534 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1439)
  %param.244 = f32[256,8,128]{2,1,0} parameter(181), sharding={devices=[16,1,1]<=[16]}
  %convert.1440 = bf16[256,8,128]{2,1,0} convert(%param.244)
  %all-gather.185 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1440), channel_id=186, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.283 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1531, %all-gather.185), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.184 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.283), exponent_bits=8, mantissa_bits=7
  %copy.1535 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.184)
  %custom-call.25 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1532, %copy.1534, %copy.1535, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.158 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.25), index=0
  %reduce-precision.185 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.158), exponent_bits=8, mantissa_bits=7
  %copy.1536 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.185)
  %param.245 = f32[32,128,256]{2,1,0} parameter(179), sharding={devices=[1,1,16]<=[16]}
  %convert.1445 = bf16[32,128,256]{2,1,0} convert(%param.245)
  %all-gather.186 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1445), channel_id=187, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.284 = bf16[2,8192,4096]{2,1,0} dot(%copy.1536, %all-gather.186), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.186 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.284), exponent_bits=8, mantissa_bits=7
  %copy.1537 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.186)
  %add.3281 = bf16[2,8192,4096]{2,1,0} add(%copy.1529, %copy.1537)
  %convert.1446 = f32[2,8192,4096]{2,1,0} convert(%add.3281)
  %multiply.3751 = f32[2,8192,4096]{2,1,0} multiply(%convert.1446, %convert.1446)
  %reduce.262 = f32[2,8192]{1,0} reduce(%multiply.3751, %constant.5451), dimensions={2}, to_apply=%region_134.8620
  %multiply.3752 = f32[2,8192]{1,0} multiply(%reduce.262, %broadcast.7109)
  %add.3282 = f32[2,8192]{1,0} add(%multiply.3752, %broadcast.7110)
  %rsqrt.117 = f32[2,8192]{1,0} rsqrt(%add.3282)
  %broadcast.9671 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.117), dimensions={0,1}
  %multiply.3753 = f32[2,8192,4096]{2,1,0} multiply(%convert.1446, %broadcast.9671)
  %convert.1447 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3753)
  %param.246 = f32[4096]{0} parameter(176), sharding={replicated}
  %convert.1448 = bf16[4096]{0} convert(%param.246)
  %broadcast.9672 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1448), dimensions={2}
  %multiply.3754 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1447, %broadcast.9672)
  %copy.1538 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3754)
  %param.247 = f32[256,14336]{1,0} parameter(173), sharding={devices=[16,1]<=[16]}
  %convert.1449 = bf16[256,14336]{1,0} convert(%param.247)
  %all-gather.187 = bf16[4096,14336]{1,0} all-gather(%convert.1449), channel_id=188, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.285 = bf16[2,8192,14336]{2,1,0} dot(%copy.1538, %all-gather.187), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.187 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.285), exponent_bits=8, mantissa_bits=7
  %negate.847 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.187)
  %exponential.152 = bf16[2,8192,14336]{2,1,0} exponential(%negate.847)
  %add.3283 = bf16[2,8192,14336]{2,1,0} add(%exponential.152, %broadcast.7215)
  %divide.733 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3283)
  %multiply.3755 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.187, %divide.733)
  %param.248 = f32[256,14336]{1,0} parameter(174), sharding={devices=[16,1]<=[16]}
  %convert.1450 = bf16[256,14336]{1,0} convert(%param.248)
  %all-gather.188 = bf16[4096,14336]{1,0} all-gather(%convert.1450), channel_id=189, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.286 = bf16[2,8192,14336]{2,1,0} dot(%copy.1538, %all-gather.188), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.188 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.286), exponent_bits=8, mantissa_bits=7
  %multiply.3757 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3755, %reduce-precision.188)
  %copy.1539 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3757)
  %param.249 = f32[14336,256]{1,0} parameter(175), sharding={devices=[1,16]<=[16]}
  %convert.1452 = bf16[14336,256]{1,0} convert(%param.249)
  %all-gather.189 = bf16[14336,4096]{1,0} all-gather(%convert.1452), channel_id=190, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.287 = bf16[2,8192,4096]{2,1,0} dot(%copy.1539, %all-gather.189), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1540 = bf16[2,8192,4096]{2,1,0} copy(%dot.287)
  %add.3284 = bf16[2,8192,4096]{2,1,0} add(%copy.1540, %add.3281)
  %copy.1541 = bf16[2,8192,4096]{2,1,0} copy(%add.3284)
  %copy.1542 = bf16[2,8192,4096]{2,1,0} copy(%copy.1541)
  %convert.1453 = f32[2,8192,4096]{2,1,0} convert(%copy.1542)
  %multiply.3759 = f32[2,8192,4096]{2,1,0} multiply(%convert.1453, %convert.1453)
  %reduce.263 = f32[2,8192]{1,0} reduce(%multiply.3759, %constant.5451), dimensions={2}, to_apply=%region_135.8658
  %multiply.3760 = f32[2,8192]{1,0} multiply(%reduce.263, %broadcast.7109)
  %add.3285 = f32[2,8192]{1,0} add(%multiply.3760, %broadcast.7110)
  %rsqrt.118 = f32[2,8192]{1,0} rsqrt(%add.3285)
  %broadcast.9678 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.118), dimensions={0,1}
  %multiply.3761 = f32[2,8192,4096]{2,1,0} multiply(%convert.1453, %broadcast.9678)
  %convert.1454 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3761)
  %param.250 = f32[4096]{0} parameter(186), sharding={replicated}
  %convert.1455 = bf16[4096]{0} convert(%param.250)
  %broadcast.9679 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1455), dimensions={2}
  %multiply.3762 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1454, %broadcast.9679)
  %copy.1543 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3762)
  %copy.1544 = bf16[2,8192,4096]{2,1,0} copy(%copy.1543)
  %param.251 = f32[256,32,128]{2,1,0} parameter(189), sharding={devices=[16,1,1]<=[16]}
  %convert.1456 = bf16[256,32,128]{2,1,0} convert(%param.251)
  %all-gather.190 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1456), channel_id=191, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.288 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1544, %all-gather.190), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.189 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.288), exponent_bits=8, mantissa_bits=7
  %convert.1457 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.189)
  %multiply.3773 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1457, %broadcast.7132)
  %slice.243 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.189), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.244 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.189), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.108 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.243, %slice.244), dimensions={3}
  %slice.245 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.189), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.246 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.189), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.109 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.245, %slice.246), dimensions={3}
  %select.1897 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.108, %concatenate.109)
  %convert.1462 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1897)
  %multiply.3778 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1462, %broadcast.7141)
  %multiply.3779 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3778, %broadcast.7145)
  %add.3289 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3773, %multiply.3779)
  %convert.1464 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3289)
  %copy.1545 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1464)
  %param.252 = f32[256,8,128]{2,1,0} parameter(187), sharding={devices=[16,1,1]<=[16]}
  %convert.1466 = bf16[256,8,128]{2,1,0} convert(%param.252)
  %all-gather.191 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1466), channel_id=192, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.289 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1544, %all-gather.191), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.190 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.289), exponent_bits=8, mantissa_bits=7
  %convert.1467 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.190)
  %multiply.3792 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1467, %broadcast.7159)
  %slice.247 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.190), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.248 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.190), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.110 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.247, %slice.248), dimensions={3}
  %slice.249 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.190), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.250 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.190), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.111 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.249, %slice.250), dimensions={3}
  %select.1901 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.110, %concatenate.111)
  %convert.1473 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1901)
  %multiply.3798 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1473, %broadcast.7168)
  %multiply.3799 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3798, %broadcast.7171)
  %add.3293 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3792, %multiply.3799)
  %convert.1476 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3293)
  %copy.1547 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1476)
  %param.253 = f32[256,8,128]{2,1,0} parameter(190), sharding={devices=[16,1,1]<=[16]}
  %convert.1477 = bf16[256,8,128]{2,1,0} convert(%param.253)
  %all-gather.192 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1477), channel_id=193, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.290 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1544, %all-gather.192), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.191 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.290), exponent_bits=8, mantissa_bits=7
  %copy.1548 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.191)
  %custom-call.26 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1545, %copy.1547, %copy.1548, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.164 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.26), index=0
  %reduce-precision.192 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.164), exponent_bits=8, mantissa_bits=7
  %copy.1549 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.192)
  %param.254 = f32[32,128,256]{2,1,0} parameter(188), sharding={devices=[1,1,16]<=[16]}
  %convert.1483 = bf16[32,128,256]{2,1,0} convert(%param.254)
  %all-gather.193 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1483), channel_id=194, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.291 = bf16[2,8192,4096]{2,1,0} dot(%copy.1549, %all-gather.193), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.193 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.291), exponent_bits=8, mantissa_bits=7
  %copy.1550 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.193)
  %add.3309 = bf16[2,8192,4096]{2,1,0} add(%copy.1542, %copy.1550)
  %convert.1484 = f32[2,8192,4096]{2,1,0} convert(%add.3309)
  %multiply.3801 = f32[2,8192,4096]{2,1,0} multiply(%convert.1484, %convert.1484)
  %reduce.267 = f32[2,8192]{1,0} reduce(%multiply.3801, %constant.5451), dimensions={2}, to_apply=%region_139.8900
  %multiply.3802 = f32[2,8192]{1,0} multiply(%reduce.267, %broadcast.7109)
  %add.3310 = f32[2,8192]{1,0} add(%multiply.3802, %broadcast.7110)
  %rsqrt.119 = f32[2,8192]{1,0} rsqrt(%add.3310)
  %broadcast.9764 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.119), dimensions={0,1}
  %multiply.3803 = f32[2,8192,4096]{2,1,0} multiply(%convert.1484, %broadcast.9764)
  %convert.1485 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3803)
  %param.255 = f32[4096]{0} parameter(185), sharding={replicated}
  %convert.1486 = bf16[4096]{0} convert(%param.255)
  %broadcast.9765 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1486), dimensions={2}
  %multiply.3804 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1485, %broadcast.9765)
  %copy.1551 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3804)
  %param.256 = f32[256,14336]{1,0} parameter(182), sharding={devices=[16,1]<=[16]}
  %convert.1487 = bf16[256,14336]{1,0} convert(%param.256)
  %all-gather.194 = bf16[4096,14336]{1,0} all-gather(%convert.1487), channel_id=195, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.292 = bf16[2,8192,14336]{2,1,0} dot(%copy.1551, %all-gather.194), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.194 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.292), exponent_bits=8, mantissa_bits=7
  %negate.850 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.194)
  %exponential.153 = bf16[2,8192,14336]{2,1,0} exponential(%negate.850)
  %add.3311 = bf16[2,8192,14336]{2,1,0} add(%exponential.153, %broadcast.7215)
  %divide.740 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3311)
  %multiply.3805 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.194, %divide.740)
  %param.257 = f32[256,14336]{1,0} parameter(183), sharding={devices=[16,1]<=[16]}
  %convert.1488 = bf16[256,14336]{1,0} convert(%param.257)
  %all-gather.195 = bf16[4096,14336]{1,0} all-gather(%convert.1488), channel_id=196, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.293 = bf16[2,8192,14336]{2,1,0} dot(%copy.1551, %all-gather.195), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.195 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.293), exponent_bits=8, mantissa_bits=7
  %multiply.3806 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3805, %reduce-precision.195)
  %copy.1552 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3806)
  %param.258 = f32[14336,256]{1,0} parameter(184), sharding={devices=[1,16]<=[16]}
  %convert.1489 = bf16[14336,256]{1,0} convert(%param.258)
  %all-gather.196 = bf16[14336,4096]{1,0} all-gather(%convert.1489), channel_id=197, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.294 = bf16[2,8192,4096]{2,1,0} dot(%copy.1552, %all-gather.196), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1553 = bf16[2,8192,4096]{2,1,0} copy(%dot.294)
  %add.3312 = bf16[2,8192,4096]{2,1,0} add(%copy.1553, %add.3309)
  %copy.1554 = bf16[2,8192,4096]{2,1,0} copy(%add.3312)
  %copy.1555 = bf16[2,8192,4096]{2,1,0} copy(%copy.1554)
  %convert.1490 = f32[2,8192,4096]{2,1,0} convert(%copy.1555)
  %multiply.3807 = f32[2,8192,4096]{2,1,0} multiply(%convert.1490, %convert.1490)
  %reduce.268 = f32[2,8192]{1,0} reduce(%multiply.3807, %constant.5451), dimensions={2}, to_apply=%region_140.8938
  %multiply.3808 = f32[2,8192]{1,0} multiply(%reduce.268, %broadcast.7109)
  %add.3313 = f32[2,8192]{1,0} add(%multiply.3808, %broadcast.7110)
  %rsqrt.120 = f32[2,8192]{1,0} rsqrt(%add.3313)
  %broadcast.9769 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.120), dimensions={0,1}
  %multiply.3809 = f32[2,8192,4096]{2,1,0} multiply(%convert.1490, %broadcast.9769)
  %convert.1491 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3809)
  %param.259 = f32[4096]{0} parameter(195), sharding={replicated}
  %convert.1492 = bf16[4096]{0} convert(%param.259)
  %broadcast.9770 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1492), dimensions={2}
  %multiply.3810 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1491, %broadcast.9770)
  %copy.1556 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3810)
  %copy.1557 = bf16[2,8192,4096]{2,1,0} copy(%copy.1556)
  %param.260 = f32[256,32,128]{2,1,0} parameter(198), sharding={devices=[16,1,1]<=[16]}
  %convert.1493 = bf16[256,32,128]{2,1,0} convert(%param.260)
  %all-gather.197 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1493), channel_id=198, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.295 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1557, %all-gather.197), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.196 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.295), exponent_bits=8, mantissa_bits=7
  %convert.1494 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.196)
  %multiply.3821 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1494, %broadcast.7132)
  %slice.252 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.196), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.253 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.196), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.112 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.252, %slice.253), dimensions={3}
  %slice.254 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.196), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.255 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.196), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.113 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.254, %slice.255), dimensions={3}
  %select.1926 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.112, %concatenate.113)
  %convert.1499 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1926)
  %multiply.3826 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1499, %broadcast.7141)
  %multiply.3827 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3826, %broadcast.7145)
  %add.3317 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3821, %multiply.3827)
  %convert.1502 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3317)
  %copy.1558 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1502)
  %param.261 = f32[256,8,128]{2,1,0} parameter(196), sharding={devices=[16,1,1]<=[16]}
  %convert.1503 = bf16[256,8,128]{2,1,0} convert(%param.261)
  %all-gather.198 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1503), channel_id=199, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.296 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1557, %all-gather.198), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.197 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.296), exponent_bits=8, mantissa_bits=7
  %convert.1504 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.197)
  %multiply.3838 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1504, %broadcast.7159)
  %slice.256 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.197), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.257 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.197), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.114 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.256, %slice.257), dimensions={3}
  %slice.258 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.197), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.259 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.197), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.115 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.258, %slice.259), dimensions={3}
  %select.1930 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.114, %concatenate.115)
  %convert.1510 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1930)
  %multiply.3843 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1510, %broadcast.7168)
  %multiply.3844 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3843, %broadcast.7171)
  %add.3321 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3838, %multiply.3844)
  %convert.1513 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3321)
  %copy.1560 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1513)
  %param.262 = f32[256,8,128]{2,1,0} parameter(199), sharding={devices=[16,1,1]<=[16]}
  %convert.1514 = bf16[256,8,128]{2,1,0} convert(%param.262)
  %all-gather.199 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1514), channel_id=200, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.297 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1557, %all-gather.199), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.198 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.297), exponent_bits=8, mantissa_bits=7
  %copy.1561 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.198)
  %custom-call.27 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1558, %copy.1560, %copy.1561, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.170 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.27), index=0
  %reduce-precision.199 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.170), exponent_bits=8, mantissa_bits=7
  %copy.1562 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.199)
  %param.263 = f32[32,128,256]{2,1,0} parameter(197), sharding={devices=[1,1,16]<=[16]}
  %convert.1519 = bf16[32,128,256]{2,1,0} convert(%param.263)
  %all-gather.200 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1519), channel_id=201, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.298 = bf16[2,8192,4096]{2,1,0} dot(%copy.1562, %all-gather.200), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.200 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.298), exponent_bits=8, mantissa_bits=7
  %copy.1563 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.200)
  %add.3335 = bf16[2,8192,4096]{2,1,0} add(%copy.1555, %copy.1563)
  %convert.1520 = f32[2,8192,4096]{2,1,0} convert(%add.3335)
  %multiply.3846 = f32[2,8192,4096]{2,1,0} multiply(%convert.1520, %convert.1520)
  %reduce.272 = f32[2,8192]{1,0} reduce(%multiply.3846, %constant.5451), dimensions={2}, to_apply=%region_144.9180
  %multiply.3847 = f32[2,8192]{1,0} multiply(%reduce.272, %broadcast.7109)
  %add.3336 = f32[2,8192]{1,0} add(%multiply.3847, %broadcast.7110)
  %rsqrt.121 = f32[2,8192]{1,0} rsqrt(%add.3336)
  %broadcast.9850 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.121), dimensions={0,1}
  %multiply.3848 = f32[2,8192,4096]{2,1,0} multiply(%convert.1520, %broadcast.9850)
  %convert.1521 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3848)
  %param.264 = f32[4096]{0} parameter(194), sharding={replicated}
  %convert.1522 = bf16[4096]{0} convert(%param.264)
  %broadcast.9851 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1522), dimensions={2}
  %multiply.3849 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1521, %broadcast.9851)
  %copy.1564 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3849)
  %param.265 = f32[256,14336]{1,0} parameter(191), sharding={devices=[16,1]<=[16]}
  %convert.1523 = bf16[256,14336]{1,0} convert(%param.265)
  %all-gather.201 = bf16[4096,14336]{1,0} all-gather(%convert.1523), channel_id=202, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.299 = bf16[2,8192,14336]{2,1,0} dot(%copy.1564, %all-gather.201), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.201 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.299), exponent_bits=8, mantissa_bits=7
  %negate.853 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.201)
  %exponential.154 = bf16[2,8192,14336]{2,1,0} exponential(%negate.853)
  %add.3338 = bf16[2,8192,14336]{2,1,0} add(%exponential.154, %broadcast.7215)
  %divide.747 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3338)
  %multiply.3850 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.201, %divide.747)
  %param.266 = f32[256,14336]{1,0} parameter(192), sharding={devices=[16,1]<=[16]}
  %convert.1524 = bf16[256,14336]{1,0} convert(%param.266)
  %all-gather.202 = bf16[4096,14336]{1,0} all-gather(%convert.1524), channel_id=203, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.300 = bf16[2,8192,14336]{2,1,0} dot(%copy.1564, %all-gather.202), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.202 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.300), exponent_bits=8, mantissa_bits=7
  %multiply.3851 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3850, %reduce-precision.202)
  %copy.1565 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3851)
  %param.267 = f32[14336,256]{1,0} parameter(193), sharding={devices=[1,16]<=[16]}
  %convert.1525 = bf16[14336,256]{1,0} convert(%param.267)
  %all-gather.203 = bf16[14336,4096]{1,0} all-gather(%convert.1525), channel_id=204, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.301 = bf16[2,8192,4096]{2,1,0} dot(%copy.1565, %all-gather.203), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1566 = bf16[2,8192,4096]{2,1,0} copy(%dot.301)
  %add.3339 = bf16[2,8192,4096]{2,1,0} add(%copy.1566, %add.3335)
  %copy.1567 = bf16[2,8192,4096]{2,1,0} copy(%add.3339)
  %copy.1568 = bf16[2,8192,4096]{2,1,0} copy(%copy.1567)
  %convert.1526 = f32[2,8192,4096]{2,1,0} convert(%copy.1568)
  %multiply.3852 = f32[2,8192,4096]{2,1,0} multiply(%convert.1526, %convert.1526)
  %reduce.273 = f32[2,8192]{1,0} reduce(%multiply.3852, %constant.5451), dimensions={2}, to_apply=%region_145.9218
  %multiply.3853 = f32[2,8192]{1,0} multiply(%reduce.273, %broadcast.7109)
  %add.3340 = f32[2,8192]{1,0} add(%multiply.3853, %broadcast.7110)
  %rsqrt.122 = f32[2,8192]{1,0} rsqrt(%add.3340)
  %broadcast.9859 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.122), dimensions={0,1}
  %multiply.3854 = f32[2,8192,4096]{2,1,0} multiply(%convert.1526, %broadcast.9859)
  %convert.1528 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3854)
  %param.268 = f32[4096]{0} parameter(204), sharding={replicated}
  %convert.1529 = bf16[4096]{0} convert(%param.268)
  %broadcast.9860 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1529), dimensions={2}
  %multiply.3855 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1528, %broadcast.9860)
  %copy.1569 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3855)
  %copy.1570 = bf16[2,8192,4096]{2,1,0} copy(%copy.1569)
  %param.269 = f32[256,32,128]{2,1,0} parameter(207), sharding={devices=[16,1,1]<=[16]}
  %convert.1530 = bf16[256,32,128]{2,1,0} convert(%param.269)
  %all-gather.204 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1530), channel_id=205, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.302 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1570, %all-gather.204), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.203 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.302), exponent_bits=8, mantissa_bits=7
  %convert.1531 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.203)
  %multiply.3867 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1531, %broadcast.7132)
  %slice.261 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.203), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.262 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.203), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.116 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.261, %slice.262), dimensions={3}
  %slice.263 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.203), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.264 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.203), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.117 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.263, %slice.264), dimensions={3}
  %select.1955 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.116, %concatenate.117)
  %convert.1536 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1955)
  %multiply.3873 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1536, %broadcast.7141)
  %multiply.3874 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3873, %broadcast.7145)
  %add.3345 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3867, %multiply.3874)
  %convert.1538 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3345)
  %copy.1571 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1538)
  %param.270 = f32[256,8,128]{2,1,0} parameter(205), sharding={devices=[16,1,1]<=[16]}
  %convert.1539 = bf16[256,8,128]{2,1,0} convert(%param.270)
  %all-gather.205 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1539), channel_id=206, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.303 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1570, %all-gather.205), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.204 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.303), exponent_bits=8, mantissa_bits=7
  %convert.1540 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.204)
  %multiply.3887 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1540, %broadcast.7159)
  %slice.265 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.204), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.266 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.204), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.118 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.265, %slice.266), dimensions={3}
  %slice.267 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.204), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.268 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.204), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.119 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.267, %slice.268), dimensions={3}
  %select.1959 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.118, %concatenate.119)
  %convert.1547 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1959)
  %multiply.3892 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1547, %broadcast.7168)
  %multiply.3893 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3892, %broadcast.7171)
  %add.3349 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3887, %multiply.3893)
  %convert.1549 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3349)
  %copy.1573 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1549)
  %param.271 = f32[256,8,128]{2,1,0} parameter(208), sharding={devices=[16,1,1]<=[16]}
  %convert.1550 = bf16[256,8,128]{2,1,0} convert(%param.271)
  %all-gather.206 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1550), channel_id=207, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.304 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1570, %all-gather.206), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.205 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.304), exponent_bits=8, mantissa_bits=7
  %copy.1574 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.205)
  %custom-call.28 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1571, %copy.1573, %copy.1574, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.176 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.28), index=0
  %reduce-precision.206 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.176), exponent_bits=8, mantissa_bits=7
  %copy.1575 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.206)
  %param.272 = f32[32,128,256]{2,1,0} parameter(206), sharding={devices=[1,1,16]<=[16]}
  %convert.1556 = bf16[32,128,256]{2,1,0} convert(%param.272)
  %all-gather.207 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1556), channel_id=208, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.305 = bf16[2,8192,4096]{2,1,0} dot(%copy.1575, %all-gather.207), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.207 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.305), exponent_bits=8, mantissa_bits=7
  %copy.1576 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.207)
  %add.3362 = bf16[2,8192,4096]{2,1,0} add(%copy.1568, %copy.1576)
  %convert.1557 = f32[2,8192,4096]{2,1,0} convert(%add.3362)
  %multiply.3896 = f32[2,8192,4096]{2,1,0} multiply(%convert.1557, %convert.1557)
  %reduce.277 = f32[2,8192]{1,0} reduce(%multiply.3896, %constant.5451), dimensions={2}, to_apply=%region_149.9460
  %multiply.3897 = f32[2,8192]{1,0} multiply(%reduce.277, %broadcast.7109)
  %add.3363 = f32[2,8192]{1,0} add(%multiply.3897, %broadcast.7110)
  %rsqrt.123 = f32[2,8192]{1,0} rsqrt(%add.3363)
  %broadcast.9956 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.123), dimensions={0,1}
  %multiply.3898 = f32[2,8192,4096]{2,1,0} multiply(%convert.1557, %broadcast.9956)
  %convert.1559 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3898)
  %param.273 = f32[4096]{0} parameter(203), sharding={replicated}
  %convert.1560 = bf16[4096]{0} convert(%param.273)
  %broadcast.9957 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1560), dimensions={2}
  %multiply.3899 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1559, %broadcast.9957)
  %copy.1577 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3899)
  %param.274 = f32[256,14336]{1,0} parameter(200), sharding={devices=[16,1]<=[16]}
  %convert.1561 = bf16[256,14336]{1,0} convert(%param.274)
  %all-gather.208 = bf16[4096,14336]{1,0} all-gather(%convert.1561), channel_id=209, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.306 = bf16[2,8192,14336]{2,1,0} dot(%copy.1577, %all-gather.208), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.208 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.306), exponent_bits=8, mantissa_bits=7
  %negate.856 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.208)
  %exponential.155 = bf16[2,8192,14336]{2,1,0} exponential(%negate.856)
  %add.3364 = bf16[2,8192,14336]{2,1,0} add(%exponential.155, %broadcast.7215)
  %divide.754 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3364)
  %multiply.3900 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.208, %divide.754)
  %param.275 = f32[256,14336]{1,0} parameter(201), sharding={devices=[16,1]<=[16]}
  %convert.1562 = bf16[256,14336]{1,0} convert(%param.275)
  %all-gather.209 = bf16[4096,14336]{1,0} all-gather(%convert.1562), channel_id=210, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.307 = bf16[2,8192,14336]{2,1,0} dot(%copy.1577, %all-gather.209), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.209 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.307), exponent_bits=8, mantissa_bits=7
  %multiply.3901 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3900, %reduce-precision.209)
  %copy.1578 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3901)
  %param.276 = f32[14336,256]{1,0} parameter(202), sharding={devices=[1,16]<=[16]}
  %convert.1563 = bf16[14336,256]{1,0} convert(%param.276)
  %all-gather.210 = bf16[14336,4096]{1,0} all-gather(%convert.1563), channel_id=211, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.308 = bf16[2,8192,4096]{2,1,0} dot(%copy.1578, %all-gather.210), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1579 = bf16[2,8192,4096]{2,1,0} copy(%dot.308)
  %add.3365 = bf16[2,8192,4096]{2,1,0} add(%copy.1579, %add.3362)
  %copy.1580 = bf16[2,8192,4096]{2,1,0} copy(%add.3365)
  %copy.1581 = bf16[2,8192,4096]{2,1,0} copy(%copy.1580)
  %convert.1564 = f32[2,8192,4096]{2,1,0} convert(%copy.1581)
  %multiply.3902 = f32[2,8192,4096]{2,1,0} multiply(%convert.1564, %convert.1564)
  %reduce.278 = f32[2,8192]{1,0} reduce(%multiply.3902, %constant.5451), dimensions={2}, to_apply=%region_150.9498
  %multiply.3903 = f32[2,8192]{1,0} multiply(%reduce.278, %broadcast.7109)
  %add.3366 = f32[2,8192]{1,0} add(%multiply.3903, %broadcast.7110)
  %rsqrt.124 = f32[2,8192]{1,0} rsqrt(%add.3366)
  %broadcast.9961 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.124), dimensions={0,1}
  %multiply.3904 = f32[2,8192,4096]{2,1,0} multiply(%convert.1564, %broadcast.9961)
  %convert.1565 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3904)
  %param.277 = f32[4096]{0} parameter(222), sharding={replicated}
  %convert.1566 = bf16[4096]{0} convert(%param.277)
  %broadcast.9962 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1566), dimensions={2}
  %multiply.3905 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1565, %broadcast.9962)
  %copy.1582 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3905)
  %copy.1583 = bf16[2,8192,4096]{2,1,0} copy(%copy.1582)
  %param.278 = f32[256,32,128]{2,1,0} parameter(225), sharding={devices=[16,1,1]<=[16]}
  %convert.1567 = bf16[256,32,128]{2,1,0} convert(%param.278)
  %all-gather.211 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1567), channel_id=212, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.309 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1583, %all-gather.211), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.210 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.309), exponent_bits=8, mantissa_bits=7
  %convert.1568 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.210)
  %multiply.3918 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1568, %broadcast.7132)
  %slice.270 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.210), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.271 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.210), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.120 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.270, %slice.271), dimensions={3}
  %slice.272 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.210), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.273 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.210), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.121 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.272, %slice.273), dimensions={3}
  %select.1985 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.120, %concatenate.121)
  %convert.1573 = f32[2,8192,32,128]{3,2,1,0} convert(%select.1985)
  %multiply.3923 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1573, %broadcast.7141)
  %multiply.3924 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3923, %broadcast.7145)
  %add.3370 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3918, %multiply.3924)
  %convert.1575 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3370)
  %copy.1584 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1575)
  %param.279 = f32[256,8,128]{2,1,0} parameter(223), sharding={devices=[16,1,1]<=[16]}
  %convert.1576 = bf16[256,8,128]{2,1,0} convert(%param.279)
  %all-gather.212 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1576), channel_id=213, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.310 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1583, %all-gather.212), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.211 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.310), exponent_bits=8, mantissa_bits=7
  %convert.1577 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.211)
  %multiply.3935 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1577, %broadcast.7159)
  %slice.274 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.211), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.275 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.211), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.122 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.274, %slice.275), dimensions={3}
  %slice.276 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.211), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.277 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.211), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.123 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.276, %slice.277), dimensions={3}
  %select.1989 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.122, %concatenate.123)
  %convert.1582 = f32[2,8192,8,128]{3,2,1,0} convert(%select.1989)
  %multiply.3940 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1582, %broadcast.7168)
  %multiply.3941 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3940, %broadcast.7171)
  %add.3374 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3935, %multiply.3941)
  %convert.1584 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3374)
  %copy.1586 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1584)
  %param.280 = f32[256,8,128]{2,1,0} parameter(226), sharding={devices=[16,1,1]<=[16]}
  %convert.1586 = bf16[256,8,128]{2,1,0} convert(%param.280)
  %all-gather.213 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1586), channel_id=214, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.311 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1583, %all-gather.213), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.212 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.311), exponent_bits=8, mantissa_bits=7
  %copy.1587 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.212)
  %custom-call.29 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1584, %copy.1586, %copy.1587, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.182 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.29), index=0
  %reduce-precision.213 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.182), exponent_bits=8, mantissa_bits=7
  %copy.1588 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.213)
  %param.281 = f32[32,128,256]{2,1,0} parameter(224), sharding={devices=[1,1,16]<=[16]}
  %convert.1591 = bf16[32,128,256]{2,1,0} convert(%param.281)
  %all-gather.214 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1591), channel_id=215, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.312 = bf16[2,8192,4096]{2,1,0} dot(%copy.1588, %all-gather.214), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.214 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.312), exponent_bits=8, mantissa_bits=7
  %copy.1589 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.214)
  %add.3387 = bf16[2,8192,4096]{2,1,0} add(%copy.1581, %copy.1589)
  %convert.1592 = f32[2,8192,4096]{2,1,0} convert(%add.3387)
  %multiply.3943 = f32[2,8192,4096]{2,1,0} multiply(%convert.1592, %convert.1592)
  %reduce.282 = f32[2,8192]{1,0} reduce(%multiply.3943, %constant.5451), dimensions={2}, to_apply=%region_154.9740
  %multiply.3945 = f32[2,8192]{1,0} multiply(%reduce.282, %broadcast.7109)
  %add.3388 = f32[2,8192]{1,0} add(%multiply.3945, %broadcast.7110)
  %rsqrt.125 = f32[2,8192]{1,0} rsqrt(%add.3388)
  %broadcast.10047 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.125), dimensions={0,1}
  %multiply.3946 = f32[2,8192,4096]{2,1,0} multiply(%convert.1592, %broadcast.10047)
  %convert.1594 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3946)
  %param.282 = f32[4096]{0} parameter(221), sharding={replicated}
  %convert.1595 = bf16[4096]{0} convert(%param.282)
  %broadcast.10048 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1595), dimensions={2}
  %multiply.3947 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1594, %broadcast.10048)
  %copy.1590 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3947)
  %param.283 = f32[256,14336]{1,0} parameter(218), sharding={devices=[16,1]<=[16]}
  %convert.1596 = bf16[256,14336]{1,0} convert(%param.283)
  %all-gather.215 = bf16[4096,14336]{1,0} all-gather(%convert.1596), channel_id=216, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.313 = bf16[2,8192,14336]{2,1,0} dot(%copy.1590, %all-gather.215), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.215 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.313), exponent_bits=8, mantissa_bits=7
  %negate.859 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.215)
  %exponential.156 = bf16[2,8192,14336]{2,1,0} exponential(%negate.859)
  %add.3389 = bf16[2,8192,14336]{2,1,0} add(%exponential.156, %broadcast.7215)
  %divide.761 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3389)
  %multiply.3948 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.215, %divide.761)
  %param.284 = f32[256,14336]{1,0} parameter(219), sharding={devices=[16,1]<=[16]}
  %convert.1597 = bf16[256,14336]{1,0} convert(%param.284)
  %all-gather.216 = bf16[4096,14336]{1,0} all-gather(%convert.1597), channel_id=217, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.314 = bf16[2,8192,14336]{2,1,0} dot(%copy.1590, %all-gather.216), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.216 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.314), exponent_bits=8, mantissa_bits=7
  %multiply.3949 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3948, %reduce-precision.216)
  %copy.1591 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3949)
  %param.285 = f32[14336,256]{1,0} parameter(220), sharding={devices=[1,16]<=[16]}
  %convert.1598 = bf16[14336,256]{1,0} convert(%param.285)
  %all-gather.217 = bf16[14336,4096]{1,0} all-gather(%convert.1598), channel_id=218, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.315 = bf16[2,8192,4096]{2,1,0} dot(%copy.1591, %all-gather.217), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1592 = bf16[2,8192,4096]{2,1,0} copy(%dot.315)
  %add.3390 = bf16[2,8192,4096]{2,1,0} add(%copy.1592, %add.3387)
  %copy.1593 = bf16[2,8192,4096]{2,1,0} copy(%add.3390)
  %copy.1594 = bf16[2,8192,4096]{2,1,0} copy(%copy.1593)
  %convert.1599 = f32[2,8192,4096]{2,1,0} convert(%copy.1594)
  %multiply.3950 = f32[2,8192,4096]{2,1,0} multiply(%convert.1599, %convert.1599)
  %reduce.283 = f32[2,8192]{1,0} reduce(%multiply.3950, %constant.5451), dimensions={2}, to_apply=%region_155.9778
  %multiply.3951 = f32[2,8192]{1,0} multiply(%reduce.283, %broadcast.7109)
  %add.3391 = f32[2,8192]{1,0} add(%multiply.3951, %broadcast.7110)
  %rsqrt.126 = f32[2,8192]{1,0} rsqrt(%add.3391)
  %broadcast.10052 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.126), dimensions={0,1}
  %multiply.3952 = f32[2,8192,4096]{2,1,0} multiply(%convert.1599, %broadcast.10052)
  %convert.1600 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3952)
  %param.286 = f32[4096]{0} parameter(231), sharding={replicated}
  %convert.1601 = bf16[4096]{0} convert(%param.286)
  %broadcast.10053 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1601), dimensions={2}
  %multiply.3953 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1600, %broadcast.10053)
  %copy.1595 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3953)
  %copy.1596 = bf16[2,8192,4096]{2,1,0} copy(%copy.1595)
  %param.287 = f32[256,32,128]{2,1,0} parameter(234), sharding={devices=[16,1,1]<=[16]}
  %convert.1602 = bf16[256,32,128]{2,1,0} convert(%param.287)
  %all-gather.218 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1602), channel_id=219, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.316 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1596, %all-gather.218), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.217 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%dot.316), exponent_bits=8, mantissa_bits=7
  %convert.1603 = f32[2,8192,32,128]{3,2,1,0} convert(%reduce-precision.217)
  %multiply.3966 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1603, %broadcast.7132)
  %slice.279 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.217), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.280 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.217), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.124 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.279, %slice.280), dimensions={3}
  %slice.281 = bf16[2,8192,32,1]{3,2,1,0} slice(%reduce-precision.217), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.282 = bf16[2,8192,32,127]{3,2,1,0} slice(%reduce-precision.217), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.125 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.281, %slice.282), dimensions={3}
  %select.2016 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.124, %concatenate.125)
  %convert.1608 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2016)
  %multiply.3971 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1608, %broadcast.7141)
  %multiply.3972 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.3971, %broadcast.7145)
  %add.3395 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.3966, %multiply.3972)
  %convert.1611 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3395)
  %copy.1597 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1611)
  %param.288 = f32[256,8,128]{2,1,0} parameter(232), sharding={devices=[16,1,1]<=[16]}
  %convert.1612 = bf16[256,8,128]{2,1,0} convert(%param.288)
  %all-gather.219 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1612), channel_id=220, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.317 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1596, %all-gather.219), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.218 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.317), exponent_bits=8, mantissa_bits=7
  %convert.1613 = f32[2,8192,8,128]{3,2,1,0} convert(%reduce-precision.218)
  %multiply.3983 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1613, %broadcast.7159)
  %slice.283 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.218), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.284 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.218), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.126 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.283, %slice.284), dimensions={3}
  %slice.285 = bf16[2,8192,8,1]{3,2,1,0} slice(%reduce-precision.218), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.286 = bf16[2,8192,8,127]{3,2,1,0} slice(%reduce-precision.218), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.127 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.285, %slice.286), dimensions={3}
  %select.2020 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.126, %concatenate.127)
  %convert.1619 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2020)
  %multiply.3988 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1619, %broadcast.7168)
  %multiply.3990 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.3988, %broadcast.7171)
  %add.3399 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.3983, %multiply.3990)
  %convert.1621 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3399)
  %copy.1599 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1621)
  %param.289 = f32[256,8,128]{2,1,0} parameter(235), sharding={devices=[16,1,1]<=[16]}
  %convert.1622 = bf16[256,8,128]{2,1,0} convert(%param.289)
  %all-gather.220 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1622), channel_id=221, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.318 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.1596, %all-gather.220), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.219 = bf16[2,8192,8,128]{3,2,1,0} reduce-precision(%dot.318), exponent_bits=8, mantissa_bits=7
  %copy.1600 = bf16[2,8192,8,128]{3,2,1,0} copy(%reduce-precision.219)
  %custom-call.30 = (bf16[2,8192,32,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.1597, %copy.1599, %copy.1600, %constant.5555, %scatter.196, /*index=5*/%scatter.250, %constant.5555, %constant.5555, %dynamic-slice.10), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.188 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.30), index=0
  %reduce-precision.220 = bf16[2,8192,32,128]{3,2,1,0} reduce-precision(%get-tuple-element.188), exponent_bits=8, mantissa_bits=7
  %copy.1601 = bf16[2,8192,32,128]{3,2,1,0} copy(%reduce-precision.220)
  %param.290 = f32[32,128,256]{2,1,0} parameter(233), sharding={devices=[1,1,16]<=[16]}
  %convert.1627 = bf16[32,128,256]{2,1,0} convert(%param.290)
  %all-gather.221 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1627), channel_id=222, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.319 = bf16[2,8192,4096]{2,1,0} dot(%copy.1601, %all-gather.221), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %reduce-precision.221 = bf16[2,8192,4096]{2,1,0} reduce-precision(%dot.319), exponent_bits=8, mantissa_bits=7
  %copy.1602 = bf16[2,8192,4096]{2,1,0} copy(%reduce-precision.221)
  %add.3413 = bf16[2,8192,4096]{2,1,0} add(%copy.1594, %copy.1602)
  %convert.1628 = f32[2,8192,4096]{2,1,0} convert(%add.3413)
  %multiply.3992 = f32[2,8192,4096]{2,1,0} multiply(%convert.1628, %convert.1628)
  %reduce.287 = f32[2,8192]{1,0} reduce(%multiply.3992, %constant.5451), dimensions={2}, to_apply=%region_159.10020
  %multiply.3993 = f32[2,8192]{1,0} multiply(%reduce.287, %broadcast.7109)
  %add.3414 = f32[2,8192]{1,0} add(%multiply.3993, %broadcast.7110)
  %rsqrt.127 = f32[2,8192]{1,0} rsqrt(%add.3414)
  %broadcast.10138 = f32[2,8192,4096]{2,1,0} broadcast(%rsqrt.127), dimensions={0,1}
  %multiply.3995 = f32[2,8192,4096]{2,1,0} multiply(%convert.1628, %broadcast.10138)
  %convert.1629 = bf16[2,8192,4096]{2,1,0} convert(%multiply.3995)
  %param.291 = f32[4096]{0} parameter(230), sharding={replicated}
  %convert.1632 = bf16[4096]{0} convert(%param.291)
  %broadcast.10139 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1632), dimensions={2}
  %multiply.3996 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1629, %broadcast.10139)
  %copy.1603 = bf16[2,8192,4096]{2,1,0} copy(%multiply.3996)
  %param.292 = f32[256,14336]{1,0} parameter(227), sharding={devices=[16,1]<=[16]}
  %convert.1633 = bf16[256,14336]{1,0} convert(%param.292)
  %all-gather.222 = bf16[4096,14336]{1,0} all-gather(%convert.1633), channel_id=223, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.320 = bf16[2,8192,14336]{2,1,0} dot(%copy.1603, %all-gather.222), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.222 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.320), exponent_bits=8, mantissa_bits=7
  %negate.862 = bf16[2,8192,14336]{2,1,0} negate(%reduce-precision.222)
  %exponential.157 = bf16[2,8192,14336]{2,1,0} exponential(%negate.862)
  %add.3415 = bf16[2,8192,14336]{2,1,0} add(%exponential.157, %broadcast.7215)
  %divide.768 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3415)
  %multiply.3997 = bf16[2,8192,14336]{2,1,0} multiply(%reduce-precision.222, %divide.768)
  %param.293 = f32[256,14336]{1,0} parameter(228), sharding={devices=[16,1]<=[16]}
  %convert.1634 = bf16[256,14336]{1,0} convert(%param.293)
  %all-gather.223 = bf16[4096,14336]{1,0} all-gather(%convert.1634), channel_id=224, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.321 = bf16[2,8192,14336]{2,1,0} dot(%copy.1603, %all-gather.223), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %reduce-precision.223 = bf16[2,8192,14336]{2,1,0} reduce-precision(%dot.321), exponent_bits=8, mantissa_bits=7
  %multiply.3998 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.3997, %reduce-precision.223)
  %copy.1604 = bf16[2,8192,14336]{2,1,0} copy(%multiply.3998)
  %param.294 = f32[14336,256]{1,0} parameter(229), sharding={devices=[1,16]<=[16]}
  %convert.1635 = bf16[14336,256]{1,0} convert(%param.294)
  %all-gather.224 = bf16[14336,4096]{1,0} all-gather(%convert.1635), channel_id=225, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.322 = bf16[2,8192,4096]{2,1,0} dot(%copy.1604, %all-gather.224), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1605 = bf16[2,8192,4096]{2,1,0} copy(%dot.322)
  %add.3416 = bf16[2,8192,4096]{2,1,0} add(%copy.1605, %add.3413)
  %copy.1606 = bf16[2,8192,4096]{2,1,0} copy(%add.3416)
  %convert.1636 = f32[2,8192,4096]{2,1,0} convert(%copy.1606)
  %multiply.3999 = f32[2,8192,4096]{2,1,0} multiply(%convert.1636, %convert.1636)
  %reduce.288 = f32[2,8192]{1,0} reduce(%multiply.3999, %constant.5451), dimensions={2}, to_apply=%region_160.10058
  %multiply.4001 = f32[2,8192]{1,0} multiply(%reduce.288, %broadcast.7109)
  %add.3417 = f32[2,8192]{1,0} add(%multiply.4001, %broadcast.7110)
  %reshape.9831 = f32[2,8192,1]{2,1,0} reshape(%add.3417)
  %rsqrt.128 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.9831)
  %reshape.9832 = f32[2,8192]{1,0} reshape(%rsqrt.128)
  %broadcast.10143 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9832), dimensions={0,1}
  %multiply.4002 = f32[2,8192,4096]{2,1,0} multiply(%convert.1636, %broadcast.10143)
  %convert.1637 = bf16[2,8192,4096]{2,1,0} convert(%multiply.4002)
  %param.295 = s32[2,8192]{1,0} parameter(880), sharding={devices=[16,1]<=[16]}
  %broadcast.10144 = s32[2,8192]{1,0} broadcast(%constant.5439), dimensions={}
  %compare.3271 = pred[2,8192]{1,0} compare(%param.295, %broadcast.10144), direction=NE
  %convert.1639 = s32[2,8192]{1,0} convert(%compare.3271)
  %reduce.289 = s32[] reduce(%convert.1639, %constant.5439), dimensions={0,1}, to_apply=%region_165.10144
  %all-reduce = s32[] all-reduce(%reduce.289), channel_id=226, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_165.10144.clone
  %convert.1640 = f32[] convert(%all-reduce)
  %constant.10301 = f32[] constant(1e-08)
  %add.3418 = f32[] add(%convert.1640, %constant.10301)
  %divide.769 = f32[] divide(%constant.5437, %add.3418)
  %broadcast.10145 = f32[2,8192]{1,0} broadcast(%divide.769), dimensions={}
  %broadcast.10146 = f32[2,8192]{1,0} broadcast(%constant.5451), dimensions={}
  %select.2042 = f32[2,8192]{1,0} select(%compare.3271, %broadcast.10145, %broadcast.10146)
  %copy.1607 = f32[2,8192]{1,0} copy(%select.2042)
  %broadcast.10147 = f32[2,8192,128256]{2,1,0} broadcast(%copy.1607), dimensions={0,1}
  %convert.1641 = bf16[4096]{0} convert(%param.1)
  %broadcast.10148 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1641), dimensions={2}
  %multiply.4003 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1637, %broadcast.10148)
  %param.296 = f32[256,128256]{1,0} parameter(290), sharding={devices=[16,1]<=[16]}
  %convert.1643 = bf16[256,128256]{1,0} convert(%param.296)
  %all-gather.225 = bf16[4096,128256]{1,0} all-gather(%convert.1643), channel_id=227, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.323 = bf16[2,8192,128256]{2,1,0} dot(%multiply.4003, %all-gather.225), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.1608 = bf16[2,8192,128256]{2,1,0} copy(%dot.323)
  %convert.1644 = f32[2,8192,128256]{2,1,0} convert(%copy.1608)
  %constant.10303 = f32[] constant(-inf)
  %reduce.290 = f32[2,8192]{1,0} reduce(%convert.1644, %constant.10303), dimensions={2}, to_apply=%region_161.10098
  %broadcast.10149 = f32[2,8192,128256]{2,1,0} broadcast(%reduce.290), dimensions={0,1}
  %subtract.193 = f32[2,8192,128256]{2,1,0} subtract(%convert.1644, %broadcast.10149)
  %exponential.158 = f32[2,8192,128256]{2,1,0} exponential(%subtract.193)
  %reduce.291 = f32[2,8192]{1,0} reduce(%exponential.158, %constant.5451), dimensions={2}, to_apply=%region_162.10109
  %log.2 = f32[2,8192]{1,0} log(%reduce.291)
  %add.3419 = f32[2,8192]{1,0} add(%log.2, %reduce.290)
  %multiply.4004 = f32[2,8192]{1,0} multiply(%add.3419, %broadcast.10146)
  %broadcast.10152 = f32[2,8192]{1,0} broadcast(%constant.5437), dimensions={}
  %add.3420 = f32[2,8192]{1,0} add(%multiply.4004, %broadcast.10152)
  %broadcast.10153 = f32[2,8192,128256]{2,1,0} broadcast(%add.3420), dimensions={0,1}
  %multiply.4005 = f32[2,8192,128256]{2,1,0} multiply(%broadcast.10153, %exponential.158)
  %broadcast.10154 = f32[2,8192,128256]{2,1,0} broadcast(%reduce.291), dimensions={0,1}
  %divide.770 = f32[2,8192,128256]{2,1,0} divide(%multiply.4005, %broadcast.10154)
  %param.297 = s32[2,8192]{1,0} parameter(879), sharding={devices=[16,1]<=[16]}
  %broadcast.10155 = s32[2,8192,128256]{2,1,0} broadcast(%param.297), dimensions={0,1}
  %iota.328 = s32[2,8192,128256]{2,1,0} iota(), iota_dimension=2
  %compare.3273 = pred[2,8192,128256]{2,1,0} compare(%broadcast.10155, %iota.328), direction=EQ
  %convert.1645 = f32[2,8192,128256]{2,1,0} convert(%compare.3273)
  %subtract.194 = f32[2,8192,128256]{2,1,0} subtract(%divide.770, %convert.1645)
  %multiply.4006 = f32[2,8192,128256]{2,1,0} multiply(%broadcast.10147, %subtract.194)
  %convert.1646 = bf16[2,8192,128256]{2,1,0} convert(%multiply.4006)
  %copy.1609 = bf16[2,8192,128256]{2,1,0} copy(%convert.1646)
  %dot.324 = bf16[2,8192,4096]{2,1,0} dot(%copy.1609, %all-gather.225), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %multiply.4007 = bf16[2,8192,4096]{2,1,0} multiply(%convert.1637, %dot.324)
  %constant.10307 = bf16[] constant(0)
  %reduce.292 = bf16[4096]{0} reduce(%multiply.4007, %constant.10307), dimensions={0,1}, to_apply=%region_166.10180
  %all-reduce.1 = bf16[4096]{0} all-reduce(%reduce.292), channel_id=228, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_166.10180.clone
  %convert.1648 = f32[4096]{0} convert(%all-reduce.1)
  %multiply.4008 = f32[4096]{0} multiply(%convert.1648, %convert.1648)
  %reduce.293 = f32[] reduce(%multiply.4008, %constant.5451), dimensions={0}, to_apply=%region_586.26021
  %get-tuple-element.189 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.251), index=1
  %get-tuple-element.190 = u32[2,4]{1,0} get-tuple-element(%custom-call.251), index=2
  %get-tuple-element.191 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.0), index=1
  %get-tuple-element.192 = u32[2,4]{1,0} get-tuple-element(%custom-call.0), index=2
  %get-tuple-element.193 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.1), index=1
  %get-tuple-element.194 = u32[2,4]{1,0} get-tuple-element(%custom-call.1), index=2
  %get-tuple-element.195 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.2), index=1
  %get-tuple-element.196 = u32[2,4]{1,0} get-tuple-element(%custom-call.2), index=2
  %get-tuple-element.197 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.3), index=1
  %get-tuple-element.198 = u32[2,4]{1,0} get-tuple-element(%custom-call.3), index=2
  %get-tuple-element.199 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.4), index=1
  %get-tuple-element.200 = u32[2,4]{1,0} get-tuple-element(%custom-call.4), index=2
  %get-tuple-element.201 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.5), index=1
  %get-tuple-element.202 = u32[2,4]{1,0} get-tuple-element(%custom-call.5), index=2
  %get-tuple-element.203 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.6), index=1
  %get-tuple-element.204 = u32[2,4]{1,0} get-tuple-element(%custom-call.6), index=2
  %get-tuple-element.205 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.7), index=1
  %get-tuple-element.206 = u32[2,4]{1,0} get-tuple-element(%custom-call.7), index=2
  %get-tuple-element.207 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.8), index=1
  %get-tuple-element.208 = u32[2,4]{1,0} get-tuple-element(%custom-call.8), index=2
  %get-tuple-element.209 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.9), index=1
  %get-tuple-element.210 = u32[2,4]{1,0} get-tuple-element(%custom-call.9), index=2
  %get-tuple-element.211 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.10), index=1
  %get-tuple-element.212 = u32[2,4]{1,0} get-tuple-element(%custom-call.10), index=2
  %get-tuple-element.213 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.11), index=1
  %get-tuple-element.214 = u32[2,4]{1,0} get-tuple-element(%custom-call.11), index=2
  %get-tuple-element.215 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.12), index=1
  %get-tuple-element.216 = u32[2,4]{1,0} get-tuple-element(%custom-call.12), index=2
  %get-tuple-element.217 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.13), index=1
  %get-tuple-element.218 = u32[2,4]{1,0} get-tuple-element(%custom-call.13), index=2
  %get-tuple-element.219 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.14), index=1
  %get-tuple-element.220 = u32[2,4]{1,0} get-tuple-element(%custom-call.14), index=2
  %get-tuple-element.221 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.15), index=1
  %get-tuple-element.222 = u32[2,4]{1,0} get-tuple-element(%custom-call.15), index=2
  %get-tuple-element.223 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.16), index=1
  %get-tuple-element.224 = u32[2,4]{1,0} get-tuple-element(%custom-call.16), index=2
  %get-tuple-element.225 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.17), index=1
  %get-tuple-element.226 = u32[2,4]{1,0} get-tuple-element(%custom-call.17), index=2
  %get-tuple-element.227 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.18), index=1
  %get-tuple-element.228 = u32[2,4]{1,0} get-tuple-element(%custom-call.18), index=2
  %get-tuple-element.229 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.19), index=1
  %get-tuple-element.230 = u32[2,4]{1,0} get-tuple-element(%custom-call.19), index=2
  %get-tuple-element.231 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.20), index=1
  %get-tuple-element.232 = u32[2,4]{1,0} get-tuple-element(%custom-call.20), index=2
  %get-tuple-element.233 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.21), index=1
  %get-tuple-element.234 = u32[2,4]{1,0} get-tuple-element(%custom-call.21), index=2
  %get-tuple-element.235 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.22), index=1
  %get-tuple-element.236 = u32[2,4]{1,0} get-tuple-element(%custom-call.22), index=2
  %get-tuple-element.237 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.23), index=1
  %get-tuple-element.238 = u32[2,4]{1,0} get-tuple-element(%custom-call.23), index=2
  %get-tuple-element.239 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.24), index=1
  %get-tuple-element.240 = u32[2,4]{1,0} get-tuple-element(%custom-call.24), index=2
  %get-tuple-element.241 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.25), index=1
  %get-tuple-element.242 = u32[2,4]{1,0} get-tuple-element(%custom-call.25), index=2
  %get-tuple-element.243 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.26), index=1
  %get-tuple-element.244 = u32[2,4]{1,0} get-tuple-element(%custom-call.26), index=2
  %get-tuple-element.245 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.27), index=1
  %get-tuple-element.246 = u32[2,4]{1,0} get-tuple-element(%custom-call.27), index=2
  %get-tuple-element.247 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.28), index=1
  %get-tuple-element.248 = u32[2,4]{1,0} get-tuple-element(%custom-call.28), index=2
  %get-tuple-element.249 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.29), index=1
  %get-tuple-element.250 = u32[2,4]{1,0} get-tuple-element(%custom-call.29), index=2
  %get-tuple-element.251 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%custom-call.30), index=1
  %get-tuple-element.255 = u32[2,4]{1,0} get-tuple-element(%custom-call.30), index=2
  %multiply.4009 = bf16[2,8192,4096]{2,1,0} multiply(%dot.324, %broadcast.10148)
  %convert.1649 = f32[2,8192,4096]{2,1,0} convert(%multiply.4009)
  %multiply.4010 = f32[2,8192,4096]{2,1,0} multiply(%convert.1649, %broadcast.10143)
  %multiply.4011 = f32[2,8192,4096]{2,1,0} multiply(%convert.1636, %convert.1649)
  %reduce.294 = f32[2,8192]{1,0} reduce(%multiply.4011, %constant.5451), dimensions={2}, to_apply=%region_168.10198
  %reshape.9834 = f32[2,8192,1]{2,1,0} reshape(%reduce.294)
  %divide.771 = f32[2,8192,1]{2,1,0} divide(%rsqrt.128, %reshape.9831)
  %constant.10342 = f32[] constant(-0.5)
  %broadcast.10161 = f32[2,8192,1]{2,1,0} broadcast(%constant.10342), dimensions={}
  %multiply.4012 = f32[2,8192,1]{2,1,0} multiply(%divide.771, %broadcast.10161)
  %multiply.4013 = f32[2,8192,1]{2,1,0} multiply(%reshape.9834, %multiply.4012)
  %constant.10343 = f32[] constant(0.00048828125)
  %broadcast.10163 = f32[2,8192,1]{2,1,0} broadcast(%constant.10343), dimensions={}
  %multiply.4014 = f32[2,8192,1]{2,1,0} multiply(%multiply.4013, %broadcast.10163)
  %reshape.9835 = f32[2,8192]{1,0} reshape(%multiply.4014)
  %broadcast.10164 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9835), dimensions={0,1}
  %multiply.4015 = f32[2,8192,4096]{2,1,0} multiply(%convert.1636, %broadcast.10164)
  %add.3421 = f32[2,8192,4096]{2,1,0} add(%multiply.4010, %multiply.4015)
  %convert.1650 = bf16[2,8192,4096]{2,1,0} convert(%add.3421)
  %tuple.94 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.217, %reduce-precision.218, %reduce-precision.219, %get-tuple-element.251, %get-tuple-element.255, /*index=5*/%reduce-precision.220, %reduce-precision.221, %reduce-precision.222, %reduce-precision.223, %constant.5507, /*index=10*/%constant.5507, %param.292, %param.293, %param.294, %param.291, /*index=15*/%param.286, %param.288, %param.290, %param.287, %param.289, /*index=20*/%copy.1593, %param.10, %param.7, %convert.1650)
  %opt-barrier.0 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.94)
  %get-tuple-element.256 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.0), index=23
  %copy.1610 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.256)
  %get-tuple-element.257 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.0), index=7
  %negate.863 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.257)
  %exponential.159 = bf16[2,8192,14336]{2,1,0} exponential(%negate.863)
  %add.3422 = bf16[2,8192,14336]{2,1,0} add(%exponential.159, %broadcast.7215)
  %divide.772 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3422)
  %multiply.4016 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.257, %divide.772)
  %copy.1611 = bf16[2,8192,4096]{2,1,0} copy(%copy.1610)
  %get-tuple-element.258 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.0), index=13
  %convert.1651 = bf16[14336,256]{1,0} convert(%get-tuple-element.258)
  %all-gather.226 = bf16[14336,4096]{1,0} all-gather(%convert.1651), channel_id=229, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.325 = bf16[2,8192,14336]{2,1,0} dot(%copy.1611, %all-gather.226), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1612 = bf16[2,8192,14336]{2,1,0} copy(%dot.325)
  %multiply.4017 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4016, %copy.1612)
  %get-tuple-element.259 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.0), index=12
  %convert.1652 = bf16[256,14336]{1,0} convert(%get-tuple-element.259)
  %all-gather.227 = bf16[4096,14336]{1,0} all-gather(%convert.1652), channel_id=230, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.326 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4017, %all-gather.227), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.260 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.0), index=8
  %multiply.4018 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1612, %get-tuple-element.260)
  %multiply.4019 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4018, %divide.772)
  %multiply.4021 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.257, %multiply.4018)
  %subtract.195 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.772)
  %multiply.4022 = bf16[2,8192,14336]{2,1,0} multiply(%divide.772, %subtract.195)
  %multiply.4023 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4021, %multiply.4022)
  %add.3423 = bf16[2,8192,14336]{2,1,0} add(%multiply.4019, %multiply.4023)
  %get-tuple-element.261 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.0), index=11
  %convert.1654 = bf16[256,14336]{1,0} convert(%get-tuple-element.261)
  %all-gather.228 = bf16[4096,14336]{1,0} all-gather(%convert.1654), channel_id=231, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.327 = bf16[2,8192,4096]{2,1,0} dot(%add.3423, %all-gather.228), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3424 = bf16[2,8192,4096]{2,1,0} add(%dot.326, %dot.327)
  %copy.1613 = bf16[2,8192,4096]{2,1,0} copy(%add.3424)
  %get-tuple-element.262 = f32[4096]{0} get-tuple-element(%opt-barrier.0), index=14
  %convert.1655 = bf16[4096]{0} convert(%get-tuple-element.262)
  %broadcast.10167 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1655), dimensions={2}
  %multiply.4024 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1613, %broadcast.10167)
  %convert.1656 = f32[2,8192,4096]{2,1,0} convert(%multiply.4024)
  %get-tuple-element.263 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.0), index=20
  %copy.1614 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.263)
  %get-tuple-element.264 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.0), index=6
  %copy.1615 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.264)
  %add.3425 = bf16[2,8192,4096]{2,1,0} add(%copy.1614, %copy.1615)
  %convert.1657 = f32[2,8192,4096]{2,1,0} convert(%add.3425)
  %multiply.4025 = f32[2,8192,4096]{2,1,0} multiply(%convert.1657, %convert.1657)
  %reduce.295 = f32[2,8192]{1,0} reduce(%multiply.4025, %constant.5451), dimensions={2}, to_apply=%region_174.10515
  %multiply.4026 = f32[2,8192]{1,0} multiply(%reduce.295, %broadcast.7109)
  %add.3426 = f32[2,8192]{1,0} add(%multiply.4026, %broadcast.7110)
  %reshape.9836 = f32[2,8192,1]{2,1,0} reshape(%add.3426)
  %rsqrt.129 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.9836)
  %reshape.9837 = f32[2,8192]{1,0} reshape(%rsqrt.129)
  %broadcast.10171 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9837), dimensions={0,1}
  %multiply.4027 = f32[2,8192,4096]{2,1,0} multiply(%convert.1656, %broadcast.10171)
  %multiply.4028 = f32[2,8192,4096]{2,1,0} multiply(%convert.1657, %convert.1656)
  %reduce.296 = f32[2,8192]{1,0} reduce(%multiply.4028, %constant.5451), dimensions={2}, to_apply=%region_177.10607
  %reshape.9838 = f32[2,8192,1]{2,1,0} reshape(%reduce.296)
  %divide.773 = f32[2,8192,1]{2,1,0} divide(%rsqrt.129, %reshape.9836)
  %multiply.4029 = f32[2,8192,1]{2,1,0} multiply(%divide.773, %broadcast.10161)
  %multiply.4030 = f32[2,8192,1]{2,1,0} multiply(%reshape.9838, %multiply.4029)
  %multiply.4031 = f32[2,8192,1]{2,1,0} multiply(%multiply.4030, %broadcast.10163)
  %reshape.9839 = f32[2,8192]{1,0} reshape(%multiply.4031)
  %broadcast.10173 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9839), dimensions={0,1}
  %multiply.4032 = f32[2,8192,4096]{2,1,0} multiply(%convert.1657, %broadcast.10173)
  %add.3427 = f32[2,8192,4096]{2,1,0} add(%multiply.4027, %multiply.4032)
  %convert.1658 = bf16[2,8192,4096]{2,1,0} convert(%add.3427)
  %add.3428 = bf16[2,8192,4096]{2,1,0} add(%copy.1610, %convert.1658)
  %get-tuple-element.265 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.0), index=0
  %convert.1659 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.265)
  %get-tuple-element.266 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.0), index=22
  %convert.1660 = f32[2,8192]{1,0} convert(%get-tuple-element.266)
  %broadcast.10174 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.1660), dimensions={0,1}
  %divide.775 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.10174, %broadcast.7129)
  %cosine.65 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.775)
  %reshape.9841 = f32[2,8192,128]{2,1,0} reshape(%cosine.65)
  %broadcast.10184 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.9841), dimensions={0,1,3}
  %multiply.4045 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1659, %broadcast.10184)
  %slice.288 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.265), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.289 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.265), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.128 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.288, %slice.289), dimensions={3}
  %slice.290 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.265), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.291 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.265), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.129 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.290, %slice.291), dimensions={3}
  %select.2046 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.128, %concatenate.129)
  %convert.1664 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2046)
  %sine.64 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.775)
  %reshape.9846 = f32[2,8192,128]{2,1,0} reshape(%sine.64)
  %broadcast.10191 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.9846), dimensions={0,1,3}
  %multiply.4050 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1664, %broadcast.10191)
  %get-tuple-element.267 = s32[2]{0} get-tuple-element(%opt-barrier.0), index=9
  %broadcast.10192 = s32[64,2]{1,0} broadcast(%get-tuple-element.267), dimensions={1}
  %reshape.9847 = s32[128]{0} reshape(%broadcast.10192)
  %convert.1665 = f32[128]{0} convert(%reshape.9847)
  %broadcast.10193 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.1665), dimensions={3}
  %multiply.4051 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4050, %broadcast.10193)
  %add.3432 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.4045, %multiply.4051)
  %convert.1666 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3432)
  %copy.1616 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1666)
  %get-tuple-element.268 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.0), index=1
  %convert.1667 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.268)
  %broadcast.10205 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.9841), dimensions={0,1,3}
  %multiply.4062 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1667, %broadcast.10205)
  %slice.292 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.268), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.293 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.268), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.130 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.292, %slice.293), dimensions={3}
  %slice.294 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.268), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.295 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.268), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.131 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.294, %slice.295), dimensions={3}
  %select.2050 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.130, %concatenate.131)
  %convert.1674 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2050)
  %broadcast.10211 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.9846), dimensions={0,1,3}
  %multiply.4068 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1674, %broadcast.10211)
  %get-tuple-element.269 = s32[2]{0} get-tuple-element(%opt-barrier.0), index=10
  %broadcast.10213 = s32[64,2]{1,0} broadcast(%get-tuple-element.269), dimensions={1}
  %reshape.9858 = s32[128]{0} reshape(%broadcast.10213)
  %convert.1675 = f32[128]{0} convert(%reshape.9858)
  %broadcast.10214 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.1675), dimensions={3}
  %multiply.4069 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4068, %broadcast.10214)
  %add.3436 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.4062, %multiply.4069)
  %convert.1676 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3436)
  %copy.1617 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1676)
  %get-tuple-element.270 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.0), index=2
  %copy.1618 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.270)
  %get-tuple-element.271 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.0), index=3
  %get-tuple-element.272 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.0), index=4
  %get-tuple-element.273 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.0), index=5
  %copy.1619 = bf16[2,8192,4096]{2,1,0} copy(%add.3428)
  %get-tuple-element.274 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.0), index=17
  %convert.1677 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.274)
  %all-gather.229 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1677), channel_id=232, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.328 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1619, %all-gather.229), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1620 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.328)
  %get-tuple-element.275 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.0), index=21
  %broadcast.10215 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.275), dimensions={0,1}
  %broadcast.10216 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.275), dimensions={0,2}
  %compare.3288 = pred[2,8192,8192]{2,1,0} compare(%broadcast.10215, %broadcast.10216), direction=EQ
  %and.738 = pred[2,8192,8192]{2,1,0} and(%compare.3288, %broadcast.7176)
  %select.2051 = f32[2,8192,8192]{2,1,0} select(%and.738, %broadcast.7177, %broadcast.7179)
  %compare.3290 = pred[2,8192,8192]{2,1,0} compare(%select.2051, %broadcast.7177), direction=NE
  %not.96 = pred[2,8192,8192]{2,1,0} not(%compare.3290)
  %convert.1679 = s32[2,8192,8192]{2,1,0} convert(%not.96)
  %reduce.297 = s32[2,8192]{1,0} reduce(%convert.1679, %constant.5439), dimensions={1}, to_apply=%region_171.10490
  %reshape.9859 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.297)
  %slice.296 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.9859), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.9861 = s32[2,1]{1,0} reshape(%slice.296)
  %reshape.9874 = s32[2]{0} reshape(%reshape.9861)
  %compare.3303 = pred[2]{0} compare(%reshape.9874, %broadcast.7184), direction=LT
  %reduce-window.194 = s32[2]{0} reduce-window(%reshape.9874, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule
  %select.2062 = s32[2]{0} select(%compare.3303, %broadcast.7199, %reduce-window.194)
  %scatter.324 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2062), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule
  %reduce.298 = s32[2,8192]{1,0} reduce(%convert.1679, %constant.5439), dimensions={2}, to_apply=%region_172.10498
  %reshape.9863 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.298)
  %reduce.299 = s32[2,1]{1,0} reduce(%reshape.9863, %constant.5570), dimensions={3,2}, to_apply=%region_173.10503
  %reshape.9884 = s32[2]{0} reshape(%reduce.299)
  %compare.3316 = pred[2]{0} compare(%reshape.9884, %broadcast.7184), direction=LT
  %reduce-window.197 = s32[2]{0} reduce-window(%reshape.9884, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.clone
  %select.2072 = s32[2]{0} select(%compare.3316, %broadcast.7199, %reduce-window.197)
  %scatter.329 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2072), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule
  %custom-call.254 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1616, %copy.1617, %copy.1618, %constant.5555, %get-tuple-element.271, /*index=5*/%get-tuple-element.272, %get-tuple-element.273, %copy.1620, %scatter.324, %scatter.329, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.282 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.254), index=2
  %copy.1621 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.282)
  %get-tuple-element.283 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.0), index=19
  %convert.1685 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.283)
  %all-gather.230 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1685), channel_id=233, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.329 = bf16[2,8192,4096]{2,1,0} dot(%copy.1621, %all-gather.230), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.284 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.254), index=1
  %copy.1622 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.284)
  %convert.1686 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1622)
  %multiply.4072 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1686, %broadcast.10205)
  %convert.1687 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4072)
  %compare.3317 = pred[128]{0} compare(%select.1092, %broadcast.7121), direction=EQ
  %broadcast.10251 = pred[2,8192,8,128]{3,2,1,0} broadcast(%compare.3317), dimensions={3}
  %multiply.4073 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1686, %broadcast.10214)
  %multiply.4074 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4073, %broadcast.10211)
  %convert.1688 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4074)
  %broadcast.10254 = bf16[2,8192,8,128]{3,2,1,0} broadcast(%constant.10307), dimensions={}
  %select.2073 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.1688, %broadcast.10254)
  %slice.297 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2073), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.297, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3450 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.1687, %pad)
  %slice.298 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2073), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.1 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.298, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3451 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3450, %pad.1)
  %compare.3318 = pred[128]{0} compare(%select.1092, %broadcast.7135), direction=EQ
  %broadcast.10256 = pred[2,8192,8,128]{3,2,1,0} broadcast(%compare.3318), dimensions={3}
  %select.2074 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.1688, %broadcast.10254)
  %slice.299 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2074), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.2 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.299, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3452 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3451, %pad.2)
  %slice.300 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2074), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.3 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.300, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3453 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3452, %pad.3)
  %get-tuple-element.285 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.0), index=16
  %convert.1689 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.285)
  %all-gather.231 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1689), channel_id=234, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.330 = bf16[2,8192,4096]{2,1,0} dot(%add.3453, %all-gather.231), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3454 = bf16[2,8192,4096]{2,1,0} add(%dot.329, %dot.330)
  %copy.1623 = bf16[2,8192,4096]{2,1,0} copy(%add.3454)
  %get-tuple-element.286 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.254), index=0
  %copy.1624 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.286)
  %convert.1690 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1624)
  %multiply.4084 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1690, %broadcast.10184)
  %convert.1691 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4084)
  %broadcast.10261 = pred[2,8192,32,128]{3,2,1,0} broadcast(%compare.3317), dimensions={3}
  %multiply.4085 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1690, %broadcast.10193)
  %multiply.4086 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4085, %broadcast.10191)
  %convert.1692 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4086)
  %broadcast.10265 = bf16[2,8192,32,128]{3,2,1,0} broadcast(%constant.10307), dimensions={}
  %select.2075 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.1692, %broadcast.10265)
  %slice.301 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2075), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.4 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.301, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3455 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.1691, %pad.4)
  %slice.302 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2075), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.5 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.302, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3456 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3455, %pad.5)
  %broadcast.10268 = pred[2,8192,32,128]{3,2,1,0} broadcast(%compare.3318), dimensions={3}
  %select.2076 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.1692, %broadcast.10265)
  %slice.303 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2076), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.6 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.303, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3457 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3456, %pad.6)
  %slice.304 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2076), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.7 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.304, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3458 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3457, %pad.7)
  %get-tuple-element.287 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.0), index=18
  %convert.1693 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.287)
  %all-gather.232 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1693), channel_id=235, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.331 = bf16[2,8192,4096]{2,1,0} dot(%add.3458, %all-gather.232), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1625 = bf16[2,8192,4096]{2,1,0} copy(%dot.331)
  %add.3459 = bf16[2,8192,4096]{2,1,0} add(%copy.1623, %copy.1625)
  %copy.1626 = bf16[2,8192,4096]{2,1,0} copy(%add.3459)
  %get-tuple-element.288 = f32[4096]{0} get-tuple-element(%opt-barrier.0), index=15
  %convert.1694 = bf16[4096]{0} convert(%get-tuple-element.288)
  %broadcast.10269 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1694), dimensions={2}
  %multiply.4095 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1626, %broadcast.10269)
  %convert.1695 = f32[2,8192,4096]{2,1,0} convert(%multiply.4095)
  %convert.1696 = f32[2,8192,4096]{2,1,0} convert(%copy.1614)
  %multiply.4096 = f32[2,8192,4096]{2,1,0} multiply(%convert.1696, %convert.1696)
  %reduce.300 = f32[2,8192]{1,0} reduce(%multiply.4096, %constant.5451), dimensions={2}, to_apply=%region_170.10249
  %multiply.4097 = f32[2,8192]{1,0} multiply(%reduce.300, %broadcast.7109)
  %add.3460 = f32[2,8192]{1,0} add(%multiply.4097, %broadcast.7110)
  %reshape.9910 = f32[2,8192,1]{2,1,0} reshape(%add.3460)
  %rsqrt.130 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.9910)
  %reshape.9911 = f32[2,8192]{1,0} reshape(%rsqrt.130)
  %broadcast.10272 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9911), dimensions={0,1}
  %multiply.4098 = f32[2,8192,4096]{2,1,0} multiply(%convert.1695, %broadcast.10272)
  %multiply.4099 = f32[2,8192,4096]{2,1,0} multiply(%convert.1696, %convert.1695)
  %reduce.301 = f32[2,8192]{1,0} reduce(%multiply.4099, %constant.5451), dimensions={2}, to_apply=%region_181.10741
  %reshape.9912 = f32[2,8192,1]{2,1,0} reshape(%reduce.301)
  %divide.780 = f32[2,8192,1]{2,1,0} divide(%rsqrt.130, %reshape.9910)
  %multiply.4100 = f32[2,8192,1]{2,1,0} multiply(%divide.780, %broadcast.10161)
  %multiply.4101 = f32[2,8192,1]{2,1,0} multiply(%reshape.9912, %multiply.4100)
  %multiply.4102 = f32[2,8192,1]{2,1,0} multiply(%multiply.4101, %broadcast.10163)
  %reshape.9913 = f32[2,8192]{1,0} reshape(%multiply.4102)
  %broadcast.10274 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9913), dimensions={0,1}
  %multiply.4103 = f32[2,8192,4096]{2,1,0} multiply(%convert.1696, %broadcast.10274)
  %add.3461 = f32[2,8192,4096]{2,1,0} add(%multiply.4098, %multiply.4103)
  %convert.1697 = bf16[2,8192,4096]{2,1,0} convert(%add.3461)
  %add.3462 = bf16[2,8192,4096]{2,1,0} add(%add.3428, %convert.1697)
  %copy.1627 = bf16[2,8192,4096]{2,1,0} copy(%add.3462)
  %tuple.95 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.210, %reduce-precision.211, %reduce-precision.212, %get-tuple-element.249, %get-tuple-element.250, /*index=5*/%reduce-precision.213, %reduce-precision.214, %reduce-precision.215, %reduce-precision.216, %constant.5507, /*index=10*/%constant.5507, %param.283, %param.284, %param.285, %param.282, /*index=15*/%param.277, %param.279, %param.281, %param.278, %param.280, /*index=20*/%copy.1580, %param.10, %param.7, %copy.1627)
  %opt-barrier.1 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.95)
  %get-tuple-element.289 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.1), index=23
  %copy.1628 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.289)
  %get-tuple-element.290 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.1), index=7
  %negate.866 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.290)
  %exponential.160 = bf16[2,8192,14336]{2,1,0} exponential(%negate.866)
  %add.3463 = bf16[2,8192,14336]{2,1,0} add(%exponential.160, %broadcast.7215)
  %divide.781 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3463)
  %multiply.4104 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.290, %divide.781)
  %copy.1629 = bf16[2,8192,4096]{2,1,0} copy(%copy.1628)
  %get-tuple-element.291 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.1), index=13
  %convert.1698 = bf16[14336,256]{1,0} convert(%get-tuple-element.291)
  %all-gather.233 = bf16[14336,4096]{1,0} all-gather(%convert.1698), channel_id=236, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.332 = bf16[2,8192,14336]{2,1,0} dot(%copy.1629, %all-gather.233), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1630 = bf16[2,8192,14336]{2,1,0} copy(%dot.332)
  %multiply.4105 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4104, %copy.1630)
  %get-tuple-element.292 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.1), index=12
  %convert.1699 = bf16[256,14336]{1,0} convert(%get-tuple-element.292)
  %all-gather.234 = bf16[4096,14336]{1,0} all-gather(%convert.1699), channel_id=237, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.333 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4105, %all-gather.234), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.293 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.1), index=8
  %multiply.4106 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1630, %get-tuple-element.293)
  %multiply.4107 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4106, %divide.781)
  %multiply.4108 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.290, %multiply.4106)
  %subtract.200 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.781)
  %multiply.4109 = bf16[2,8192,14336]{2,1,0} multiply(%divide.781, %subtract.200)
  %multiply.4110 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4108, %multiply.4109)
  %add.3464 = bf16[2,8192,14336]{2,1,0} add(%multiply.4107, %multiply.4110)
  %get-tuple-element.294 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.1), index=11
  %convert.1700 = bf16[256,14336]{1,0} convert(%get-tuple-element.294)
  %all-gather.235 = bf16[4096,14336]{1,0} all-gather(%convert.1700), channel_id=238, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.334 = bf16[2,8192,4096]{2,1,0} dot(%add.3464, %all-gather.235), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3465 = bf16[2,8192,4096]{2,1,0} add(%dot.333, %dot.334)
  %copy.1631 = bf16[2,8192,4096]{2,1,0} copy(%add.3465)
  %get-tuple-element.295 = f32[4096]{0} get-tuple-element(%opt-barrier.1), index=14
  %convert.1701 = bf16[4096]{0} convert(%get-tuple-element.295)
  %broadcast.10276 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1701), dimensions={2}
  %multiply.4111 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1631, %broadcast.10276)
  %convert.1702 = f32[2,8192,4096]{2,1,0} convert(%multiply.4111)
  %get-tuple-element.296 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.1), index=20
  %copy.1632 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.296)
  %get-tuple-element.297 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.1), index=6
  %copy.1633 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.297)
  %add.3466 = bf16[2,8192,4096]{2,1,0} add(%copy.1632, %copy.1633)
  %convert.1703 = f32[2,8192,4096]{2,1,0} convert(%add.3466)
  %multiply.4112 = f32[2,8192,4096]{2,1,0} multiply(%convert.1703, %convert.1703)
  %reduce.302 = f32[2,8192]{1,0} reduce(%multiply.4112, %constant.5451), dimensions={2}, to_apply=%region_187.11028
  %multiply.4113 = f32[2,8192]{1,0} multiply(%reduce.302, %broadcast.7109)
  %add.3467 = f32[2,8192]{1,0} add(%multiply.4113, %broadcast.7110)
  %reshape.9914 = f32[2,8192,1]{2,1,0} reshape(%add.3467)
  %rsqrt.131 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.9914)
  %reshape.9915 = f32[2,8192]{1,0} reshape(%rsqrt.131)
  %broadcast.10279 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9915), dimensions={0,1}
  %multiply.4114 = f32[2,8192,4096]{2,1,0} multiply(%convert.1702, %broadcast.10279)
  %multiply.4115 = f32[2,8192,4096]{2,1,0} multiply(%convert.1703, %convert.1702)
  %reduce.303 = f32[2,8192]{1,0} reduce(%multiply.4115, %constant.5451), dimensions={2}, to_apply=%region_190.11099
  %reshape.9916 = f32[2,8192,1]{2,1,0} reshape(%reduce.303)
  %divide.782 = f32[2,8192,1]{2,1,0} divide(%rsqrt.131, %reshape.9914)
  %multiply.4116 = f32[2,8192,1]{2,1,0} multiply(%divide.782, %broadcast.10161)
  %multiply.4117 = f32[2,8192,1]{2,1,0} multiply(%reshape.9916, %multiply.4116)
  %multiply.4118 = f32[2,8192,1]{2,1,0} multiply(%multiply.4117, %broadcast.10163)
  %reshape.9917 = f32[2,8192]{1,0} reshape(%multiply.4118)
  %broadcast.10281 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9917), dimensions={0,1}
  %multiply.4119 = f32[2,8192,4096]{2,1,0} multiply(%convert.1703, %broadcast.10281)
  %add.3468 = f32[2,8192,4096]{2,1,0} add(%multiply.4114, %multiply.4119)
  %convert.1704 = bf16[2,8192,4096]{2,1,0} convert(%add.3468)
  %add.3469 = bf16[2,8192,4096]{2,1,0} add(%copy.1628, %convert.1704)
  %get-tuple-element.298 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.1), index=0
  %convert.1706 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.298)
  %get-tuple-element.299 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.1), index=22
  %convert.1707 = f32[2,8192]{1,0} convert(%get-tuple-element.299)
  %broadcast.10282 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.1707), dimensions={0,1}
  %divide.784 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.10282, %broadcast.7129)
  %cosine.67 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.784)
  %reshape.9919 = f32[2,8192,128]{2,1,0} reshape(%cosine.67)
  %broadcast.10292 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.9919), dimensions={0,1,3}
  %multiply.4130 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1706, %broadcast.10292)
  %slice.305 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.298), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.306 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.298), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.132 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.305, %slice.306), dimensions={3}
  %slice.307 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.298), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.308 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.298), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.133 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.307, %slice.308), dimensions={3}
  %select.2080 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.132, %concatenate.133)
  %convert.1711 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2080)
  %sine.66 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.784)
  %reshape.9924 = f32[2,8192,128]{2,1,0} reshape(%sine.66)
  %broadcast.10300 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.9924), dimensions={0,1,3}
  %multiply.4135 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1711, %broadcast.10300)
  %get-tuple-element.300 = s32[2]{0} get-tuple-element(%opt-barrier.1), index=9
  %broadcast.10301 = s32[64,2]{1,0} broadcast(%get-tuple-element.300), dimensions={1}
  %reshape.9925 = s32[128]{0} reshape(%broadcast.10301)
  %convert.1712 = f32[128]{0} convert(%reshape.9925)
  %broadcast.10303 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.1712), dimensions={3}
  %multiply.4137 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4135, %broadcast.10303)
  %add.3473 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.4130, %multiply.4137)
  %convert.1714 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3473)
  %copy.1634 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1714)
  %get-tuple-element.301 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.1), index=1
  %convert.1716 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.301)
  %broadcast.10315 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.9919), dimensions={0,1,3}
  %multiply.4148 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1716, %broadcast.10315)
  %slice.309 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.301), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.310 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.301), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.134 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.309, %slice.310), dimensions={3}
  %slice.311 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.301), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.312 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.301), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.135 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.311, %slice.312), dimensions={3}
  %select.2086 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.134, %concatenate.135)
  %convert.1721 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2086)
  %broadcast.10322 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.9924), dimensions={0,1,3}
  %multiply.4154 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1721, %broadcast.10322)
  %get-tuple-element.302 = s32[2]{0} get-tuple-element(%opt-barrier.1), index=10
  %broadcast.10323 = s32[64,2]{1,0} broadcast(%get-tuple-element.302), dimensions={1}
  %reshape.9936 = s32[128]{0} reshape(%broadcast.10323)
  %convert.1722 = f32[128]{0} convert(%reshape.9936)
  %broadcast.10324 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.1722), dimensions={3}
  %multiply.4155 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4154, %broadcast.10324)
  %add.3477 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.4148, %multiply.4155)
  %convert.1723 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3477)
  %copy.1635 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1723)
  %get-tuple-element.303 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.1), index=2
  %copy.1636 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.303)
  %get-tuple-element.304 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.1), index=3
  %get-tuple-element.305 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.1), index=4
  %get-tuple-element.306 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.1), index=5
  %copy.1637 = bf16[2,8192,4096]{2,1,0} copy(%add.3469)
  %get-tuple-element.307 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.1), index=17
  %convert.1724 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.307)
  %all-gather.236 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1724), channel_id=239, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.335 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1637, %all-gather.236), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1638 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.335)
  %get-tuple-element.308 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.1), index=21
  %broadcast.10325 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.308), dimensions={0,1}
  %broadcast.10326 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.308), dimensions={0,2}
  %compare.3335 = pred[2,8192,8192]{2,1,0} compare(%broadcast.10325, %broadcast.10326), direction=EQ
  %and.747 = pred[2,8192,8192]{2,1,0} and(%compare.3335, %broadcast.7176)
  %select.2087 = f32[2,8192,8192]{2,1,0} select(%and.747, %broadcast.7177, %broadcast.7179)
  %compare.3337 = pred[2,8192,8192]{2,1,0} compare(%select.2087, %broadcast.7177), direction=NE
  %not.97 = pred[2,8192,8192]{2,1,0} not(%compare.3337)
  %convert.1725 = s32[2,8192,8192]{2,1,0} convert(%not.97)
  %reduce.304 = s32[2,8192]{1,0} reduce(%convert.1725, %constant.5439), dimensions={1}, to_apply=%region_184.11003
  %reshape.9937 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.304)
  %slice.313 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.9937), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.9941 = s32[2,1]{1,0} reshape(%slice.313)
  %reshape.9953 = s32[2]{0} reshape(%reshape.9941)
  %compare.3350 = pred[2]{0} compare(%reshape.9953, %broadcast.7184), direction=LT
  %reduce-window.200 = s32[2]{0} reduce-window(%reshape.9953, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.1
  %select.2097 = s32[2]{0} select(%compare.3350, %broadcast.7199, %reduce-window.200)
  %scatter.334 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2097), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.1
  %reduce.305 = s32[2,8192]{1,0} reduce(%convert.1725, %constant.5439), dimensions={2}, to_apply=%region_185.11011
  %reshape.9942 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.305)
  %reduce.306 = s32[2,1]{1,0} reduce(%reshape.9942, %constant.5570), dimensions={3,2}, to_apply=%region_186.11016
  %reshape.9964 = s32[2]{0} reshape(%reduce.306)
  %compare.3363 = pred[2]{0} compare(%reshape.9964, %broadcast.7184), direction=LT
  %reduce-window.203 = s32[2]{0} reduce-window(%reshape.9964, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.1.clone
  %select.2107 = s32[2]{0} select(%compare.3363, %broadcast.7199, %reduce-window.203)
  %scatter.339 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2107), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.1
  %custom-call.31 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1634, %copy.1635, %copy.1636, %constant.5555, %get-tuple-element.304, /*index=5*/%get-tuple-element.305, %get-tuple-element.306, %copy.1638, %scatter.334, %scatter.339, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.315 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.31), index=2
  %copy.1639 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.315)
  %get-tuple-element.316 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.1), index=19
  %convert.1729 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.316)
  %all-gather.237 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1729), channel_id=240, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.336 = bf16[2,8192,4096]{2,1,0} dot(%copy.1639, %all-gather.237), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.317 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.31), index=1
  %copy.1640 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.317)
  %convert.1730 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1640)
  %multiply.4158 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1730, %broadcast.10315)
  %convert.1732 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4158)
  %multiply.4159 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1730, %broadcast.10324)
  %multiply.4160 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4159, %broadcast.10322)
  %convert.1733 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4160)
  %select.2108 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.1733, %broadcast.10254)
  %slice.314 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2108), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.8 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.314, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3491 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.1732, %pad.8)
  %slice.315 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2108), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.9 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.315, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3492 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3491, %pad.9)
  %select.2109 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.1733, %broadcast.10254)
  %slice.316 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2109), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.10 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.316, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3493 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3492, %pad.10)
  %slice.317 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2109), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.11 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.317, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3494 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3493, %pad.11)
  %get-tuple-element.318 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.1), index=16
  %convert.1734 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.318)
  %all-gather.238 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1734), channel_id=241, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.337 = bf16[2,8192,4096]{2,1,0} dot(%add.3494, %all-gather.238), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3495 = bf16[2,8192,4096]{2,1,0} add(%dot.336, %dot.337)
  %copy.1641 = bf16[2,8192,4096]{2,1,0} copy(%add.3495)
  %get-tuple-element.319 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.31), index=0
  %copy.1642 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.319)
  %convert.1735 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1642)
  %multiply.4170 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1735, %broadcast.10292)
  %convert.1736 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4170)
  %multiply.4171 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1735, %broadcast.10303)
  %multiply.4172 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4171, %broadcast.10300)
  %convert.1737 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4172)
  %select.2110 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.1737, %broadcast.10265)
  %slice.318 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2110), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.12 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.318, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3496 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.1736, %pad.12)
  %slice.319 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2110), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.13 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.319, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3497 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3496, %pad.13)
  %select.2111 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.1737, %broadcast.10265)
  %slice.320 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2111), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.14 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.320, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3498 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3497, %pad.14)
  %slice.321 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2111), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.15 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.321, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3499 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3498, %pad.15)
  %get-tuple-element.320 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.1), index=18
  %convert.1738 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.320)
  %all-gather.239 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1738), channel_id=242, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.338 = bf16[2,8192,4096]{2,1,0} dot(%add.3499, %all-gather.239), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1643 = bf16[2,8192,4096]{2,1,0} copy(%dot.338)
  %add.3500 = bf16[2,8192,4096]{2,1,0} add(%copy.1641, %copy.1643)
  %copy.1644 = bf16[2,8192,4096]{2,1,0} copy(%add.3500)
  %get-tuple-element.321 = f32[4096]{0} get-tuple-element(%opt-barrier.1), index=15
  %convert.1739 = bf16[4096]{0} convert(%get-tuple-element.321)
  %broadcast.10386 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1739), dimensions={2}
  %multiply.4182 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1644, %broadcast.10386)
  %convert.1740 = f32[2,8192,4096]{2,1,0} convert(%multiply.4182)
  %convert.1741 = f32[2,8192,4096]{2,1,0} convert(%copy.1632)
  %multiply.4183 = f32[2,8192,4096]{2,1,0} multiply(%convert.1741, %convert.1741)
  %reduce.307 = f32[2,8192]{1,0} reduce(%multiply.4183, %constant.5451), dimensions={2}, to_apply=%region_183.10794
  %multiply.4184 = f32[2,8192]{1,0} multiply(%reduce.307, %broadcast.7109)
  %add.3501 = f32[2,8192]{1,0} add(%multiply.4184, %broadcast.7110)
  %reshape.9990 = f32[2,8192,1]{2,1,0} reshape(%add.3501)
  %rsqrt.132 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.9990)
  %reshape.9991 = f32[2,8192]{1,0} reshape(%rsqrt.132)
  %broadcast.10390 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9991), dimensions={0,1}
  %multiply.4185 = f32[2,8192,4096]{2,1,0} multiply(%convert.1740, %broadcast.10390)
  %multiply.4186 = f32[2,8192,4096]{2,1,0} multiply(%convert.1741, %convert.1740)
  %reduce.308 = f32[2,8192]{1,0} reduce(%multiply.4186, %constant.5451), dimensions={2}, to_apply=%region_194.11233
  %reshape.9993 = f32[2,8192,1]{2,1,0} reshape(%reduce.308)
  %divide.789 = f32[2,8192,1]{2,1,0} divide(%rsqrt.132, %reshape.9990)
  %multiply.4188 = f32[2,8192,1]{2,1,0} multiply(%divide.789, %broadcast.10161)
  %multiply.4189 = f32[2,8192,1]{2,1,0} multiply(%reshape.9993, %multiply.4188)
  %multiply.4190 = f32[2,8192,1]{2,1,0} multiply(%multiply.4189, %broadcast.10163)
  %reshape.9994 = f32[2,8192]{1,0} reshape(%multiply.4190)
  %broadcast.10392 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9994), dimensions={0,1}
  %multiply.4191 = f32[2,8192,4096]{2,1,0} multiply(%convert.1741, %broadcast.10392)
  %add.3502 = f32[2,8192,4096]{2,1,0} add(%multiply.4185, %multiply.4191)
  %convert.1742 = bf16[2,8192,4096]{2,1,0} convert(%add.3502)
  %add.3503 = bf16[2,8192,4096]{2,1,0} add(%add.3469, %convert.1742)
  %copy.1645 = bf16[2,8192,4096]{2,1,0} copy(%add.3503)
  %tuple.97 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.203, %reduce-precision.204, %reduce-precision.205, %get-tuple-element.247, %get-tuple-element.248, /*index=5*/%reduce-precision.206, %reduce-precision.207, %reduce-precision.208, %reduce-precision.209, %constant.5507, /*index=10*/%constant.5507, %param.274, %param.275, %param.276, %param.273, /*index=15*/%param.268, %param.270, %param.272, %param.269, %param.271, /*index=20*/%copy.1567, %param.10, %param.7, %copy.1645)
  %opt-barrier.2 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.97)
  %get-tuple-element.322 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.2), index=23
  %copy.1646 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.322)
  %get-tuple-element.323 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.2), index=7
  %negate.869 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.323)
  %exponential.161 = bf16[2,8192,14336]{2,1,0} exponential(%negate.869)
  %add.3504 = bf16[2,8192,14336]{2,1,0} add(%exponential.161, %broadcast.7215)
  %divide.790 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3504)
  %multiply.4192 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.323, %divide.790)
  %copy.1647 = bf16[2,8192,4096]{2,1,0} copy(%copy.1646)
  %get-tuple-element.324 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.2), index=13
  %convert.1743 = bf16[14336,256]{1,0} convert(%get-tuple-element.324)
  %all-gather.240 = bf16[14336,4096]{1,0} all-gather(%convert.1743), channel_id=243, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.339 = bf16[2,8192,14336]{2,1,0} dot(%copy.1647, %all-gather.240), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1648 = bf16[2,8192,14336]{2,1,0} copy(%dot.339)
  %multiply.4193 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4192, %copy.1648)
  %get-tuple-element.325 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.2), index=12
  %convert.1744 = bf16[256,14336]{1,0} convert(%get-tuple-element.325)
  %all-gather.241 = bf16[4096,14336]{1,0} all-gather(%convert.1744), channel_id=244, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.340 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4193, %all-gather.241), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.326 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.2), index=8
  %multiply.4195 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1648, %get-tuple-element.326)
  %multiply.4196 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4195, %divide.790)
  %multiply.4197 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.323, %multiply.4195)
  %subtract.205 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.790)
  %multiply.4198 = bf16[2,8192,14336]{2,1,0} multiply(%divide.790, %subtract.205)
  %multiply.4199 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4197, %multiply.4198)
  %add.3505 = bf16[2,8192,14336]{2,1,0} add(%multiply.4196, %multiply.4199)
  %get-tuple-element.327 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.2), index=11
  %convert.1746 = bf16[256,14336]{1,0} convert(%get-tuple-element.327)
  %all-gather.242 = bf16[4096,14336]{1,0} all-gather(%convert.1746), channel_id=245, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.341 = bf16[2,8192,4096]{2,1,0} dot(%add.3505, %all-gather.242), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3506 = bf16[2,8192,4096]{2,1,0} add(%dot.340, %dot.341)
  %copy.1649 = bf16[2,8192,4096]{2,1,0} copy(%add.3506)
  %get-tuple-element.328 = f32[4096]{0} get-tuple-element(%opt-barrier.2), index=14
  %convert.1747 = bf16[4096]{0} convert(%get-tuple-element.328)
  %broadcast.10394 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1747), dimensions={2}
  %multiply.4200 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1649, %broadcast.10394)
  %convert.1748 = f32[2,8192,4096]{2,1,0} convert(%multiply.4200)
  %get-tuple-element.329 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.2), index=20
  %copy.1650 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.329)
  %get-tuple-element.330 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.2), index=6
  %copy.1651 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.330)
  %add.3507 = bf16[2,8192,4096]{2,1,0} add(%copy.1650, %copy.1651)
  %convert.1749 = f32[2,8192,4096]{2,1,0} convert(%add.3507)
  %multiply.4201 = f32[2,8192,4096]{2,1,0} multiply(%convert.1749, %convert.1749)
  %reduce.309 = f32[2,8192]{1,0} reduce(%multiply.4201, %constant.5451), dimensions={2}, to_apply=%region_200.11520
  %multiply.4202 = f32[2,8192]{1,0} multiply(%reduce.309, %broadcast.7109)
  %add.3508 = f32[2,8192]{1,0} add(%multiply.4202, %broadcast.7110)
  %reshape.9995 = f32[2,8192,1]{2,1,0} reshape(%add.3508)
  %rsqrt.133 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.9995)
  %reshape.9996 = f32[2,8192]{1,0} reshape(%rsqrt.133)
  %broadcast.10398 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9996), dimensions={0,1}
  %multiply.4203 = f32[2,8192,4096]{2,1,0} multiply(%convert.1748, %broadcast.10398)
  %multiply.4204 = f32[2,8192,4096]{2,1,0} multiply(%convert.1749, %convert.1748)
  %reduce.310 = f32[2,8192]{1,0} reduce(%multiply.4204, %constant.5451), dimensions={2}, to_apply=%region_203.11591
  %reshape.9997 = f32[2,8192,1]{2,1,0} reshape(%reduce.310)
  %divide.791 = f32[2,8192,1]{2,1,0} divide(%rsqrt.133, %reshape.9995)
  %multiply.4205 = f32[2,8192,1]{2,1,0} multiply(%divide.791, %broadcast.10161)
  %multiply.4206 = f32[2,8192,1]{2,1,0} multiply(%reshape.9997, %multiply.4205)
  %multiply.4207 = f32[2,8192,1]{2,1,0} multiply(%multiply.4206, %broadcast.10163)
  %reshape.9998 = f32[2,8192]{1,0} reshape(%multiply.4207)
  %broadcast.10400 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.9998), dimensions={0,1}
  %multiply.4208 = f32[2,8192,4096]{2,1,0} multiply(%convert.1749, %broadcast.10400)
  %add.3509 = f32[2,8192,4096]{2,1,0} add(%multiply.4203, %multiply.4208)
  %convert.1751 = bf16[2,8192,4096]{2,1,0} convert(%add.3509)
  %add.3510 = bf16[2,8192,4096]{2,1,0} add(%copy.1646, %convert.1751)
  %get-tuple-element.331 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.2), index=0
  %convert.1752 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.331)
  %get-tuple-element.332 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.2), index=22
  %convert.1753 = f32[2,8192]{1,0} convert(%get-tuple-element.332)
  %broadcast.10401 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.1753), dimensions={0,1}
  %divide.793 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.10401, %broadcast.7129)
  %cosine.69 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.793)
  %reshape.10000 = f32[2,8192,128]{2,1,0} reshape(%cosine.69)
  %broadcast.10410 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10000), dimensions={0,1,3}
  %multiply.4219 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1752, %broadcast.10410)
  %slice.322 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.331), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.323 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.331), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.136 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.322, %slice.323), dimensions={3}
  %slice.324 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.331), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.325 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.331), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.137 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.324, %slice.325), dimensions={3}
  %select.2115 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.136, %concatenate.137)
  %convert.1758 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2115)
  %sine.68 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.793)
  %reshape.10005 = f32[2,8192,128]{2,1,0} reshape(%sine.68)
  %broadcast.10416 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10005), dimensions={0,1,3}
  %multiply.4225 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1758, %broadcast.10416)
  %get-tuple-element.333 = s32[2]{0} get-tuple-element(%opt-barrier.2), index=9
  %broadcast.10417 = s32[64,2]{1,0} broadcast(%get-tuple-element.333), dimensions={1}
  %reshape.10006 = s32[128]{0} reshape(%broadcast.10417)
  %convert.1759 = f32[128]{0} convert(%reshape.10006)
  %broadcast.10418 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.1759), dimensions={3}
  %multiply.4226 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4225, %broadcast.10418)
  %add.3514 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.4219, %multiply.4226)
  %convert.1760 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3514)
  %copy.1652 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1760)
  %get-tuple-element.334 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.2), index=1
  %convert.1761 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.334)
  %broadcast.10434 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10000), dimensions={0,1,3}
  %multiply.4237 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1761, %broadcast.10434)
  %slice.326 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.334), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.327 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.334), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.138 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.326, %slice.327), dimensions={3}
  %slice.328 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.334), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.329 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.334), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.139 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.328, %slice.329), dimensions={3}
  %select.2119 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.138, %concatenate.139)
  %convert.1767 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2119)
  %broadcast.10444 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10005), dimensions={0,1,3}
  %multiply.4244 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1767, %broadcast.10444)
  %get-tuple-element.335 = s32[2]{0} get-tuple-element(%opt-barrier.2), index=10
  %broadcast.10445 = s32[64,2]{1,0} broadcast(%get-tuple-element.335), dimensions={1}
  %reshape.10014 = s32[128]{0} reshape(%broadcast.10445)
  %convert.1768 = f32[128]{0} convert(%reshape.10014)
  %broadcast.10446 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.1768), dimensions={3}
  %multiply.4245 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4244, %broadcast.10446)
  %add.3519 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.4237, %multiply.4245)
  %convert.1769 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3519)
  %copy.1653 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1769)
  %get-tuple-element.336 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.2), index=2
  %copy.1654 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.336)
  %get-tuple-element.337 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.2), index=3
  %get-tuple-element.338 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.2), index=4
  %get-tuple-element.339 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.2), index=5
  %copy.1655 = bf16[2,8192,4096]{2,1,0} copy(%add.3510)
  %get-tuple-element.340 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.2), index=17
  %convert.1770 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.340)
  %all-gather.243 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1770), channel_id=246, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.342 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1655, %all-gather.243), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1656 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.342)
  %get-tuple-element.341 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.2), index=21
  %broadcast.10448 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.341), dimensions={0,1}
  %broadcast.10450 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.341), dimensions={0,2}
  %compare.3383 = pred[2,8192,8192]{2,1,0} compare(%broadcast.10448, %broadcast.10450), direction=EQ
  %and.756 = pred[2,8192,8192]{2,1,0} and(%compare.3383, %broadcast.7176)
  %select.2120 = f32[2,8192,8192]{2,1,0} select(%and.756, %broadcast.7177, %broadcast.7179)
  %compare.3385 = pred[2,8192,8192]{2,1,0} compare(%select.2120, %broadcast.7177), direction=NE
  %not.98 = pred[2,8192,8192]{2,1,0} not(%compare.3385)
  %convert.1771 = s32[2,8192,8192]{2,1,0} convert(%not.98)
  %reduce.311 = s32[2,8192]{1,0} reduce(%convert.1771, %constant.5439), dimensions={1}, to_apply=%region_197.11495
  %reshape.10015 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.311)
  %slice.330 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10015), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10017 = s32[2,1]{1,0} reshape(%slice.330)
  %reshape.10028 = s32[2]{0} reshape(%reshape.10017)
  %compare.3400 = pred[2]{0} compare(%reshape.10028, %broadcast.7184), direction=LT
  %reduce-window.206 = s32[2]{0} reduce-window(%reshape.10028, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.2
  %select.2130 = s32[2]{0} select(%compare.3400, %broadcast.7199, %reduce-window.206)
  %scatter.344 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2130), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.2
  %reduce.312 = s32[2,8192]{1,0} reduce(%convert.1771, %constant.5439), dimensions={2}, to_apply=%region_198.11503
  %reshape.10018 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.312)
  %reduce.313 = s32[2,1]{1,0} reduce(%reshape.10018, %constant.5570), dimensions={3,2}, to_apply=%region_199.11508
  %reshape.10038 = s32[2]{0} reshape(%reduce.313)
  %compare.3415 = pred[2]{0} compare(%reshape.10038, %broadcast.7184), direction=LT
  %reduce-window.209 = s32[2]{0} reduce-window(%reshape.10038, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.2.clone
  %select.2140 = s32[2]{0} select(%compare.3415, %broadcast.7199, %reduce-window.209)
  %scatter.349 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2140), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.2
  %custom-call.32 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1652, %copy.1653, %copy.1654, %constant.5555, %get-tuple-element.337, /*index=5*/%get-tuple-element.338, %get-tuple-element.339, %copy.1656, %scatter.344, %scatter.349, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.348 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.32), index=2
  %copy.1657 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.348)
  %get-tuple-element.349 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.2), index=19
  %convert.1775 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.349)
  %all-gather.244 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1775), channel_id=247, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.343 = bf16[2,8192,4096]{2,1,0} dot(%copy.1657, %all-gather.244), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.350 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.32), index=1
  %copy.1658 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.350)
  %convert.1776 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1658)
  %multiply.4247 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1776, %broadcast.10434)
  %convert.1777 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4247)
  %multiply.4248 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1776, %broadcast.10446)
  %multiply.4249 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4248, %broadcast.10444)
  %convert.1778 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4249)
  %select.2141 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.1778, %broadcast.10254)
  %slice.331 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2141), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.16 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.331, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3532 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.1777, %pad.16)
  %slice.332 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2141), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.17 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.332, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3533 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3532, %pad.17)
  %select.2142 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.1778, %broadcast.10254)
  %slice.333 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2142), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.18 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.333, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3534 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3533, %pad.18)
  %slice.334 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2142), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.19 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.334, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3535 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3534, %pad.19)
  %get-tuple-element.351 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.2), index=16
  %convert.1779 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.351)
  %all-gather.245 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1779), channel_id=248, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.344 = bf16[2,8192,4096]{2,1,0} dot(%add.3535, %all-gather.245), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3536 = bf16[2,8192,4096]{2,1,0} add(%dot.343, %dot.344)
  %copy.1659 = bf16[2,8192,4096]{2,1,0} copy(%add.3536)
  %get-tuple-element.352 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.32), index=0
  %copy.1660 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.352)
  %convert.1780 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1660)
  %multiply.4258 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1780, %broadcast.10410)
  %convert.1782 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4258)
  %multiply.4259 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1780, %broadcast.10418)
  %multiply.4260 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4259, %broadcast.10416)
  %convert.1783 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4260)
  %select.2143 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.1783, %broadcast.10265)
  %slice.335 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2143), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.20 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.335, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3537 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.1782, %pad.20)
  %slice.336 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2143), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.21 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.336, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3538 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3537, %pad.21)
  %select.2144 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.1783, %broadcast.10265)
  %slice.337 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2144), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.22 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.337, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3539 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3538, %pad.22)
  %slice.338 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2144), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.23 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.338, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3540 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3539, %pad.23)
  %get-tuple-element.353 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.2), index=18
  %convert.1784 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.353)
  %all-gather.246 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1784), channel_id=249, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.345 = bf16[2,8192,4096]{2,1,0} dot(%add.3540, %all-gather.246), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1661 = bf16[2,8192,4096]{2,1,0} copy(%dot.345)
  %add.3541 = bf16[2,8192,4096]{2,1,0} add(%copy.1659, %copy.1661)
  %copy.1662 = bf16[2,8192,4096]{2,1,0} copy(%add.3541)
  %get-tuple-element.354 = f32[4096]{0} get-tuple-element(%opt-barrier.2), index=15
  %convert.1785 = bf16[4096]{0} convert(%get-tuple-element.354)
  %broadcast.10507 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1785), dimensions={2}
  %multiply.4270 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1662, %broadcast.10507)
  %convert.1786 = f32[2,8192,4096]{2,1,0} convert(%multiply.4270)
  %convert.1787 = f32[2,8192,4096]{2,1,0} convert(%copy.1650)
  %multiply.4271 = f32[2,8192,4096]{2,1,0} multiply(%convert.1787, %convert.1787)
  %reduce.314 = f32[2,8192]{1,0} reduce(%multiply.4271, %constant.5451), dimensions={2}, to_apply=%region_196.11286
  %multiply.4272 = f32[2,8192]{1,0} multiply(%reduce.314, %broadcast.7109)
  %add.3542 = f32[2,8192]{1,0} add(%multiply.4272, %broadcast.7110)
  %reshape.10059 = f32[2,8192,1]{2,1,0} reshape(%add.3542)
  %rsqrt.134 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10059)
  %reshape.10061 = f32[2,8192]{1,0} reshape(%rsqrt.134)
  %broadcast.10510 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10061), dimensions={0,1}
  %multiply.4273 = f32[2,8192,4096]{2,1,0} multiply(%convert.1786, %broadcast.10510)
  %multiply.4275 = f32[2,8192,4096]{2,1,0} multiply(%convert.1787, %convert.1786)
  %reduce.315 = f32[2,8192]{1,0} reduce(%multiply.4275, %constant.5451), dimensions={2}, to_apply=%region_207.11725
  %reshape.10062 = f32[2,8192,1]{2,1,0} reshape(%reduce.315)
  %divide.798 = f32[2,8192,1]{2,1,0} divide(%rsqrt.134, %reshape.10059)
  %multiply.4276 = f32[2,8192,1]{2,1,0} multiply(%divide.798, %broadcast.10161)
  %multiply.4277 = f32[2,8192,1]{2,1,0} multiply(%reshape.10062, %multiply.4276)
  %multiply.4278 = f32[2,8192,1]{2,1,0} multiply(%multiply.4277, %broadcast.10163)
  %reshape.10063 = f32[2,8192]{1,0} reshape(%multiply.4278)
  %broadcast.10512 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10063), dimensions={0,1}
  %multiply.4279 = f32[2,8192,4096]{2,1,0} multiply(%convert.1787, %broadcast.10512)
  %add.3543 = f32[2,8192,4096]{2,1,0} add(%multiply.4273, %multiply.4279)
  %convert.1788 = bf16[2,8192,4096]{2,1,0} convert(%add.3543)
  %add.3544 = bf16[2,8192,4096]{2,1,0} add(%add.3510, %convert.1788)
  %copy.1663 = bf16[2,8192,4096]{2,1,0} copy(%add.3544)
  %tuple.99 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.196, %reduce-precision.197, %reduce-precision.198, %get-tuple-element.245, %get-tuple-element.246, /*index=5*/%reduce-precision.199, %reduce-precision.200, %reduce-precision.201, %reduce-precision.202, %constant.5507, /*index=10*/%constant.5507, %param.265, %param.266, %param.267, %param.264, /*index=15*/%param.259, %param.261, %param.263, %param.260, %param.262, /*index=20*/%copy.1554, %param.10, %param.7, %copy.1663)
  %opt-barrier.3 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.99)
  %get-tuple-element.355 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.3), index=23
  %copy.1664 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.355)
  %get-tuple-element.356 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.3), index=7
  %negate.872 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.356)
  %exponential.162 = bf16[2,8192,14336]{2,1,0} exponential(%negate.872)
  %add.3545 = bf16[2,8192,14336]{2,1,0} add(%exponential.162, %broadcast.7215)
  %divide.799 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3545)
  %multiply.4281 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.356, %divide.799)
  %copy.1665 = bf16[2,8192,4096]{2,1,0} copy(%copy.1664)
  %get-tuple-element.357 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.3), index=13
  %convert.1790 = bf16[14336,256]{1,0} convert(%get-tuple-element.357)
  %all-gather.247 = bf16[14336,4096]{1,0} all-gather(%convert.1790), channel_id=250, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.346 = bf16[2,8192,14336]{2,1,0} dot(%copy.1665, %all-gather.247), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1666 = bf16[2,8192,14336]{2,1,0} copy(%dot.346)
  %multiply.4282 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4281, %copy.1666)
  %get-tuple-element.358 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.3), index=12
  %convert.1792 = bf16[256,14336]{1,0} convert(%get-tuple-element.358)
  %all-gather.248 = bf16[4096,14336]{1,0} all-gather(%convert.1792), channel_id=251, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.347 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4282, %all-gather.248), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.359 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.3), index=8
  %multiply.4283 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1666, %get-tuple-element.359)
  %multiply.4284 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4283, %divide.799)
  %multiply.4285 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.356, %multiply.4283)
  %subtract.210 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.799)
  %multiply.4286 = bf16[2,8192,14336]{2,1,0} multiply(%divide.799, %subtract.210)
  %multiply.4287 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4285, %multiply.4286)
  %add.3546 = bf16[2,8192,14336]{2,1,0} add(%multiply.4284, %multiply.4287)
  %get-tuple-element.360 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.3), index=11
  %convert.1793 = bf16[256,14336]{1,0} convert(%get-tuple-element.360)
  %all-gather.249 = bf16[4096,14336]{1,0} all-gather(%convert.1793), channel_id=252, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.348 = bf16[2,8192,4096]{2,1,0} dot(%add.3546, %all-gather.249), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3547 = bf16[2,8192,4096]{2,1,0} add(%dot.347, %dot.348)
  %copy.1667 = bf16[2,8192,4096]{2,1,0} copy(%add.3547)
  %get-tuple-element.361 = f32[4096]{0} get-tuple-element(%opt-barrier.3), index=14
  %convert.1794 = bf16[4096]{0} convert(%get-tuple-element.361)
  %broadcast.10514 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1794), dimensions={2}
  %multiply.4288 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1667, %broadcast.10514)
  %convert.1795 = f32[2,8192,4096]{2,1,0} convert(%multiply.4288)
  %get-tuple-element.362 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.3), index=20
  %copy.1668 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.362)
  %get-tuple-element.363 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.3), index=6
  %copy.1669 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.363)
  %add.3549 = bf16[2,8192,4096]{2,1,0} add(%copy.1668, %copy.1669)
  %convert.1796 = f32[2,8192,4096]{2,1,0} convert(%add.3549)
  %multiply.4289 = f32[2,8192,4096]{2,1,0} multiply(%convert.1796, %convert.1796)
  %reduce.316 = f32[2,8192]{1,0} reduce(%multiply.4289, %constant.5451), dimensions={2}, to_apply=%region_213.12012
  %multiply.4290 = f32[2,8192]{1,0} multiply(%reduce.316, %broadcast.7109)
  %add.3550 = f32[2,8192]{1,0} add(%multiply.4290, %broadcast.7110)
  %reshape.10064 = f32[2,8192,1]{2,1,0} reshape(%add.3550)
  %rsqrt.135 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10064)
  %reshape.10065 = f32[2,8192]{1,0} reshape(%rsqrt.135)
  %broadcast.10517 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10065), dimensions={0,1}
  %multiply.4291 = f32[2,8192,4096]{2,1,0} multiply(%convert.1795, %broadcast.10517)
  %multiply.4292 = f32[2,8192,4096]{2,1,0} multiply(%convert.1796, %convert.1795)
  %reduce.317 = f32[2,8192]{1,0} reduce(%multiply.4292, %constant.5451), dimensions={2}, to_apply=%region_216.12083
  %reshape.10066 = f32[2,8192,1]{2,1,0} reshape(%reduce.317)
  %divide.800 = f32[2,8192,1]{2,1,0} divide(%rsqrt.135, %reshape.10064)
  %multiply.4293 = f32[2,8192,1]{2,1,0} multiply(%divide.800, %broadcast.10161)
  %multiply.4294 = f32[2,8192,1]{2,1,0} multiply(%reshape.10066, %multiply.4293)
  %multiply.4295 = f32[2,8192,1]{2,1,0} multiply(%multiply.4294, %broadcast.10163)
  %reshape.10068 = f32[2,8192]{1,0} reshape(%multiply.4295)
  %broadcast.10519 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10068), dimensions={0,1}
  %multiply.4296 = f32[2,8192,4096]{2,1,0} multiply(%convert.1796, %broadcast.10519)
  %add.3551 = f32[2,8192,4096]{2,1,0} add(%multiply.4291, %multiply.4296)
  %convert.1797 = bf16[2,8192,4096]{2,1,0} convert(%add.3551)
  %add.3552 = bf16[2,8192,4096]{2,1,0} add(%copy.1664, %convert.1797)
  %get-tuple-element.364 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.3), index=0
  %convert.1798 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.364)
  %get-tuple-element.365 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.3), index=22
  %convert.1799 = f32[2,8192]{1,0} convert(%get-tuple-element.365)
  %broadcast.10520 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.1799), dimensions={0,1}
  %divide.802 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.10520, %broadcast.7129)
  %cosine.71 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.802)
  %reshape.10070 = f32[2,8192,128]{2,1,0} reshape(%cosine.71)
  %broadcast.10533 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10070), dimensions={0,1,3}
  %multiply.4308 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1798, %broadcast.10533)
  %slice.339 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.364), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.340 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.364), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.140 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.339, %slice.340), dimensions={3}
  %slice.341 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.364), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.342 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.364), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.141 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.341, %slice.342), dimensions={3}
  %select.2148 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.140, %concatenate.141)
  %convert.1803 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2148)
  %sine.70 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.802)
  %reshape.10077 = f32[2,8192,128]{2,1,0} reshape(%sine.70)
  %broadcast.10540 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10077), dimensions={0,1,3}
  %multiply.4313 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1803, %broadcast.10540)
  %get-tuple-element.366 = s32[2]{0} get-tuple-element(%opt-barrier.3), index=9
  %broadcast.10541 = s32[64,2]{1,0} broadcast(%get-tuple-element.366), dimensions={1}
  %reshape.10078 = s32[128]{0} reshape(%broadcast.10541)
  %convert.1804 = f32[128]{0} convert(%reshape.10078)
  %broadcast.10542 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.1804), dimensions={3}
  %multiply.4314 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4313, %broadcast.10542)
  %add.3557 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.4308, %multiply.4314)
  %convert.1805 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3557)
  %copy.1670 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1805)
  %get-tuple-element.367 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.3), index=1
  %convert.1806 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.367)
  %broadcast.10552 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10070), dimensions={0,1,3}
  %multiply.4327 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1806, %broadcast.10552)
  %slice.343 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.367), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.344 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.367), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.142 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.343, %slice.344), dimensions={3}
  %slice.345 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.367), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.346 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.367), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.143 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.345, %slice.346), dimensions={3}
  %select.2152 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.142, %concatenate.143)
  %convert.1812 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2152)
  %broadcast.10558 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10077), dimensions={0,1,3}
  %multiply.4332 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1812, %broadcast.10558)
  %get-tuple-element.368 = s32[2]{0} get-tuple-element(%opt-barrier.3), index=10
  %broadcast.10559 = s32[64,2]{1,0} broadcast(%get-tuple-element.368), dimensions={1}
  %reshape.10090 = s32[128]{0} reshape(%broadcast.10559)
  %convert.1813 = f32[128]{0} convert(%reshape.10090)
  %broadcast.10560 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.1813), dimensions={3}
  %multiply.4333 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4332, %broadcast.10560)
  %add.3561 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.4327, %multiply.4333)
  %convert.1814 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3561)
  %copy.1671 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1814)
  %get-tuple-element.369 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.3), index=2
  %copy.1672 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.369)
  %get-tuple-element.370 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.3), index=3
  %get-tuple-element.371 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.3), index=4
  %get-tuple-element.372 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.3), index=5
  %copy.1673 = bf16[2,8192,4096]{2,1,0} copy(%add.3552)
  %get-tuple-element.373 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.3), index=17
  %convert.1815 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.373)
  %all-gather.250 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1815), channel_id=253, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.349 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1673, %all-gather.250), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1674 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.349)
  %get-tuple-element.374 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.3), index=21
  %broadcast.10561 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.374), dimensions={0,1}
  %broadcast.10562 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.374), dimensions={0,2}
  %compare.3434 = pred[2,8192,8192]{2,1,0} compare(%broadcast.10561, %broadcast.10562), direction=EQ
  %and.765 = pred[2,8192,8192]{2,1,0} and(%compare.3434, %broadcast.7176)
  %select.2153 = f32[2,8192,8192]{2,1,0} select(%and.765, %broadcast.7177, %broadcast.7179)
  %compare.3436 = pred[2,8192,8192]{2,1,0} compare(%select.2153, %broadcast.7177), direction=NE
  %not.99 = pred[2,8192,8192]{2,1,0} not(%compare.3436)
  %convert.1816 = s32[2,8192,8192]{2,1,0} convert(%not.99)
  %reduce.318 = s32[2,8192]{1,0} reduce(%convert.1816, %constant.5439), dimensions={1}, to_apply=%region_210.11987
  %reshape.10091 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.318)
  %slice.347 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10091), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10093 = s32[2,1]{1,0} reshape(%slice.347)
  %reshape.10104 = s32[2]{0} reshape(%reshape.10093)
  %compare.3449 = pred[2]{0} compare(%reshape.10104, %broadcast.7184), direction=LT
  %reduce-window.212 = s32[2]{0} reduce-window(%reshape.10104, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.3
  %select.2163 = s32[2]{0} select(%compare.3449, %broadcast.7199, %reduce-window.212)
  %scatter.354 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2163), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.3
  %reduce.319 = s32[2,8192]{1,0} reduce(%convert.1816, %constant.5439), dimensions={2}, to_apply=%region_211.11995
  %reshape.10094 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.319)
  %reduce.320 = s32[2,1]{1,0} reduce(%reshape.10094, %constant.5570), dimensions={3,2}, to_apply=%region_212.12000
  %reshape.10113 = s32[2]{0} reshape(%reduce.320)
  %compare.3463 = pred[2]{0} compare(%reshape.10113, %broadcast.7184), direction=LT
  %reduce-window.215 = s32[2]{0} reduce-window(%reshape.10113, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.3.clone
  %select.2173 = s32[2]{0} select(%compare.3463, %broadcast.7199, %reduce-window.215)
  %scatter.359 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2173), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.3
  %custom-call.33 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1670, %copy.1671, %copy.1672, %constant.5555, %get-tuple-element.370, /*index=5*/%get-tuple-element.371, %get-tuple-element.372, %copy.1674, %scatter.354, %scatter.359, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.381 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.33), index=2
  %copy.1675 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.381)
  %get-tuple-element.382 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.3), index=19
  %convert.1820 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.382)
  %all-gather.251 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1820), channel_id=254, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.350 = bf16[2,8192,4096]{2,1,0} dot(%copy.1675, %all-gather.251), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.383 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.33), index=1
  %copy.1676 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.383)
  %convert.1822 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1676)
  %multiply.4335 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1822, %broadcast.10552)
  %convert.1823 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4335)
  %multiply.4336 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1822, %broadcast.10560)
  %multiply.4337 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4336, %broadcast.10558)
  %convert.1824 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4337)
  %select.2174 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.1824, %broadcast.10254)
  %slice.348 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2174), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.24 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.348, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3575 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.1823, %pad.24)
  %slice.349 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2174), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.25 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.349, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3576 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3575, %pad.25)
  %select.2175 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.1824, %broadcast.10254)
  %slice.350 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2175), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.26 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.350, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3577 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3576, %pad.26)
  %slice.351 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2175), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.27 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.351, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3578 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3577, %pad.27)
  %get-tuple-element.384 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.3), index=16
  %convert.1825 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.384)
  %all-gather.252 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1825), channel_id=255, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.351 = bf16[2,8192,4096]{2,1,0} dot(%add.3578, %all-gather.252), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3580 = bf16[2,8192,4096]{2,1,0} add(%dot.350, %dot.351)
  %copy.1677 = bf16[2,8192,4096]{2,1,0} copy(%add.3580)
  %get-tuple-element.385 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.33), index=0
  %copy.1678 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.385)
  %convert.1827 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1678)
  %multiply.4347 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1827, %broadcast.10533)
  %convert.1828 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4347)
  %multiply.4348 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1827, %broadcast.10542)
  %multiply.4349 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4348, %broadcast.10540)
  %convert.1829 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4349)
  %select.2176 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.1829, %broadcast.10265)
  %slice.352 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2176), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.28 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.352, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3581 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.1828, %pad.28)
  %slice.353 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2176), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.29 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.353, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3582 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3581, %pad.29)
  %select.2177 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.1829, %broadcast.10265)
  %slice.354 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2177), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.30 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.354, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3583 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3582, %pad.30)
  %slice.355 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2177), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.31 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.355, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3585 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3583, %pad.31)
  %get-tuple-element.386 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.3), index=18
  %convert.1830 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.386)
  %all-gather.253 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1830), channel_id=256, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.352 = bf16[2,8192,4096]{2,1,0} dot(%add.3585, %all-gather.253), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1679 = bf16[2,8192,4096]{2,1,0} copy(%dot.352)
  %add.3586 = bf16[2,8192,4096]{2,1,0} add(%copy.1677, %copy.1679)
  %copy.1680 = bf16[2,8192,4096]{2,1,0} copy(%add.3586)
  %get-tuple-element.387 = f32[4096]{0} get-tuple-element(%opt-barrier.3), index=15
  %convert.1832 = bf16[4096]{0} convert(%get-tuple-element.387)
  %broadcast.10613 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1832), dimensions={2}
  %multiply.4360 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1680, %broadcast.10613)
  %convert.1833 = f32[2,8192,4096]{2,1,0} convert(%multiply.4360)
  %convert.1834 = f32[2,8192,4096]{2,1,0} convert(%copy.1668)
  %multiply.4361 = f32[2,8192,4096]{2,1,0} multiply(%convert.1834, %convert.1834)
  %reduce.321 = f32[2,8192]{1,0} reduce(%multiply.4361, %constant.5451), dimensions={2}, to_apply=%region_209.11778
  %multiply.4362 = f32[2,8192]{1,0} multiply(%reduce.321, %broadcast.7109)
  %add.3587 = f32[2,8192]{1,0} add(%multiply.4362, %broadcast.7110)
  %reshape.10136 = f32[2,8192,1]{2,1,0} reshape(%add.3587)
  %rsqrt.136 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10136)
  %reshape.10137 = f32[2,8192]{1,0} reshape(%rsqrt.136)
  %broadcast.10616 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10137), dimensions={0,1}
  %multiply.4363 = f32[2,8192,4096]{2,1,0} multiply(%convert.1833, %broadcast.10616)
  %multiply.4364 = f32[2,8192,4096]{2,1,0} multiply(%convert.1834, %convert.1833)
  %reduce.322 = f32[2,8192]{1,0} reduce(%multiply.4364, %constant.5451), dimensions={2}, to_apply=%region_220.12217
  %reshape.10138 = f32[2,8192,1]{2,1,0} reshape(%reduce.322)
  %divide.807 = f32[2,8192,1]{2,1,0} divide(%rsqrt.136, %reshape.10136)
  %multiply.4365 = f32[2,8192,1]{2,1,0} multiply(%divide.807, %broadcast.10161)
  %multiply.4366 = f32[2,8192,1]{2,1,0} multiply(%reshape.10138, %multiply.4365)
  %multiply.4367 = f32[2,8192,1]{2,1,0} multiply(%multiply.4366, %broadcast.10163)
  %reshape.10139 = f32[2,8192]{1,0} reshape(%multiply.4367)
  %broadcast.10618 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10139), dimensions={0,1}
  %multiply.4368 = f32[2,8192,4096]{2,1,0} multiply(%convert.1834, %broadcast.10618)
  %add.3588 = f32[2,8192,4096]{2,1,0} add(%multiply.4363, %multiply.4368)
  %convert.1835 = bf16[2,8192,4096]{2,1,0} convert(%add.3588)
  %add.3589 = bf16[2,8192,4096]{2,1,0} add(%add.3552, %convert.1835)
  %copy.1681 = bf16[2,8192,4096]{2,1,0} copy(%add.3589)
  %tuple.101 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.189, %reduce-precision.190, %reduce-precision.191, %get-tuple-element.243, %get-tuple-element.244, /*index=5*/%reduce-precision.192, %reduce-precision.193, %reduce-precision.194, %reduce-precision.195, %constant.5507, /*index=10*/%constant.5507, %param.256, %param.257, %param.258, %param.255, /*index=15*/%param.250, %param.252, %param.254, %param.251, %param.253, /*index=20*/%copy.1541, %param.10, %param.7, %copy.1681)
  %opt-barrier.4 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.101)
  %get-tuple-element.388 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.4), index=23
  %copy.1682 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.388)
  %get-tuple-element.389 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.4), index=7
  %negate.875 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.389)
  %exponential.163 = bf16[2,8192,14336]{2,1,0} exponential(%negate.875)
  %add.3590 = bf16[2,8192,14336]{2,1,0} add(%exponential.163, %broadcast.7215)
  %divide.808 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3590)
  %multiply.4369 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.389, %divide.808)
  %copy.1683 = bf16[2,8192,4096]{2,1,0} copy(%copy.1682)
  %get-tuple-element.390 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.4), index=13
  %convert.1836 = bf16[14336,256]{1,0} convert(%get-tuple-element.390)
  %all-gather.254 = bf16[14336,4096]{1,0} all-gather(%convert.1836), channel_id=257, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.353 = bf16[2,8192,14336]{2,1,0} dot(%copy.1683, %all-gather.254), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1684 = bf16[2,8192,14336]{2,1,0} copy(%dot.353)
  %multiply.4370 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4369, %copy.1684)
  %get-tuple-element.391 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.4), index=12
  %convert.1837 = bf16[256,14336]{1,0} convert(%get-tuple-element.391)
  %all-gather.255 = bf16[4096,14336]{1,0} all-gather(%convert.1837), channel_id=258, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.354 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4370, %all-gather.255), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.392 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.4), index=8
  %multiply.4371 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1684, %get-tuple-element.392)
  %multiply.4372 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4371, %divide.808)
  %multiply.4373 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.389, %multiply.4371)
  %subtract.215 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.808)
  %multiply.4374 = bf16[2,8192,14336]{2,1,0} multiply(%divide.808, %subtract.215)
  %multiply.4375 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4373, %multiply.4374)
  %add.3591 = bf16[2,8192,14336]{2,1,0} add(%multiply.4372, %multiply.4375)
  %get-tuple-element.393 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.4), index=11
  %convert.1839 = bf16[256,14336]{1,0} convert(%get-tuple-element.393)
  %all-gather.256 = bf16[4096,14336]{1,0} all-gather(%convert.1839), channel_id=259, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.355 = bf16[2,8192,4096]{2,1,0} dot(%add.3591, %all-gather.256), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3592 = bf16[2,8192,4096]{2,1,0} add(%dot.354, %dot.355)
  %copy.1685 = bf16[2,8192,4096]{2,1,0} copy(%add.3592)
  %get-tuple-element.394 = f32[4096]{0} get-tuple-element(%opt-barrier.4), index=14
  %convert.1840 = bf16[4096]{0} convert(%get-tuple-element.394)
  %broadcast.10620 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1840), dimensions={2}
  %multiply.4376 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1685, %broadcast.10620)
  %convert.1841 = f32[2,8192,4096]{2,1,0} convert(%multiply.4376)
  %get-tuple-element.395 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.4), index=20
  %copy.1686 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.395)
  %get-tuple-element.396 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.4), index=6
  %copy.1687 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.396)
  %add.3593 = bf16[2,8192,4096]{2,1,0} add(%copy.1686, %copy.1687)
  %convert.1842 = f32[2,8192,4096]{2,1,0} convert(%add.3593)
  %multiply.4377 = f32[2,8192,4096]{2,1,0} multiply(%convert.1842, %convert.1842)
  %reduce.323 = f32[2,8192]{1,0} reduce(%multiply.4377, %constant.5451), dimensions={2}, to_apply=%region_226.12504
  %multiply.4378 = f32[2,8192]{1,0} multiply(%reduce.323, %broadcast.7109)
  %add.3594 = f32[2,8192]{1,0} add(%multiply.4378, %broadcast.7110)
  %reshape.10140 = f32[2,8192,1]{2,1,0} reshape(%add.3594)
  %rsqrt.137 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10140)
  %reshape.10141 = f32[2,8192]{1,0} reshape(%rsqrt.137)
  %broadcast.10624 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10141), dimensions={0,1}
  %multiply.4379 = f32[2,8192,4096]{2,1,0} multiply(%convert.1841, %broadcast.10624)
  %multiply.4380 = f32[2,8192,4096]{2,1,0} multiply(%convert.1842, %convert.1841)
  %reduce.324 = f32[2,8192]{1,0} reduce(%multiply.4380, %constant.5451), dimensions={2}, to_apply=%region_229.12575
  %reshape.10142 = f32[2,8192,1]{2,1,0} reshape(%reduce.324)
  %divide.809 = f32[2,8192,1]{2,1,0} divide(%rsqrt.137, %reshape.10140)
  %multiply.4381 = f32[2,8192,1]{2,1,0} multiply(%divide.809, %broadcast.10161)
  %multiply.4382 = f32[2,8192,1]{2,1,0} multiply(%reshape.10142, %multiply.4381)
  %multiply.4383 = f32[2,8192,1]{2,1,0} multiply(%multiply.4382, %broadcast.10163)
  %reshape.10143 = f32[2,8192]{1,0} reshape(%multiply.4383)
  %broadcast.10626 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10143), dimensions={0,1}
  %multiply.4384 = f32[2,8192,4096]{2,1,0} multiply(%convert.1842, %broadcast.10626)
  %add.3595 = f32[2,8192,4096]{2,1,0} add(%multiply.4379, %multiply.4384)
  %convert.1843 = bf16[2,8192,4096]{2,1,0} convert(%add.3595)
  %add.3596 = bf16[2,8192,4096]{2,1,0} add(%copy.1682, %convert.1843)
  %get-tuple-element.397 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.4), index=0
  %convert.1844 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.397)
  %get-tuple-element.398 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.4), index=22
  %convert.1845 = f32[2,8192]{1,0} convert(%get-tuple-element.398)
  %broadcast.10627 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.1845), dimensions={0,1}
  %divide.811 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.10627, %broadcast.7129)
  %cosine.73 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.811)
  %reshape.10145 = f32[2,8192,128]{2,1,0} reshape(%cosine.73)
  %broadcast.10636 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10145), dimensions={0,1,3}
  %multiply.4395 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1844, %broadcast.10636)
  %slice.356 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.397), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.357 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.397), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.144 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.356, %slice.357), dimensions={3}
  %slice.358 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.397), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.359 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.397), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.145 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.358, %slice.359), dimensions={3}
  %select.2181 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.144, %concatenate.145)
  %convert.1849 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2181)
  %sine.72 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.811)
  %reshape.10150 = f32[2,8192,128]{2,1,0} reshape(%sine.72)
  %broadcast.10644 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10150), dimensions={0,1,3}
  %multiply.4400 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1849, %broadcast.10644)
  %get-tuple-element.399 = s32[2]{0} get-tuple-element(%opt-barrier.4), index=9
  %broadcast.10646 = s32[64,2]{1,0} broadcast(%get-tuple-element.399), dimensions={1}
  %reshape.10151 = s32[128]{0} reshape(%broadcast.10646)
  %convert.1850 = f32[128]{0} convert(%reshape.10151)
  %broadcast.10648 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.1850), dimensions={3}
  %multiply.4401 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4400, %broadcast.10648)
  %add.3600 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.4395, %multiply.4401)
  %convert.1851 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3600)
  %copy.1688 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1851)
  %get-tuple-element.400 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.4), index=1
  %convert.1852 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.400)
  %broadcast.10660 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10145), dimensions={0,1,3}
  %multiply.4412 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1852, %broadcast.10660)
  %slice.360 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.400), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.361 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.400), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.146 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.360, %slice.361), dimensions={3}
  %slice.362 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.400), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.363 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.400), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.147 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.362, %slice.363), dimensions={3}
  %select.2185 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.146, %concatenate.147)
  %convert.1857 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2185)
  %broadcast.10666 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10150), dimensions={0,1,3}
  %multiply.4418 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1857, %broadcast.10666)
  %get-tuple-element.401 = s32[2]{0} get-tuple-element(%opt-barrier.4), index=10
  %broadcast.10667 = s32[64,2]{1,0} broadcast(%get-tuple-element.401), dimensions={1}
  %reshape.10162 = s32[128]{0} reshape(%broadcast.10667)
  %convert.1858 = f32[128]{0} convert(%reshape.10162)
  %broadcast.10668 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.1858), dimensions={3}
  %multiply.4419 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4418, %broadcast.10668)
  %add.3604 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.4412, %multiply.4419)
  %convert.1859 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3604)
  %copy.1689 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1859)
  %get-tuple-element.402 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.4), index=2
  %copy.1690 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.402)
  %get-tuple-element.403 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.4), index=3
  %get-tuple-element.404 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.4), index=4
  %get-tuple-element.405 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.4), index=5
  %copy.1691 = bf16[2,8192,4096]{2,1,0} copy(%add.3596)
  %get-tuple-element.406 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.4), index=17
  %convert.1860 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.406)
  %all-gather.257 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1860), channel_id=260, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.356 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1691, %all-gather.257), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1692 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.356)
  %get-tuple-element.407 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.4), index=21
  %broadcast.10669 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.407), dimensions={0,1}
  %broadcast.10670 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.407), dimensions={0,2}
  %compare.3486 = pred[2,8192,8192]{2,1,0} compare(%broadcast.10669, %broadcast.10670), direction=EQ
  %and.774 = pred[2,8192,8192]{2,1,0} and(%compare.3486, %broadcast.7176)
  %select.2186 = f32[2,8192,8192]{2,1,0} select(%and.774, %broadcast.7177, %broadcast.7179)
  %compare.3488 = pred[2,8192,8192]{2,1,0} compare(%select.2186, %broadcast.7177), direction=NE
  %not.100 = pred[2,8192,8192]{2,1,0} not(%compare.3488)
  %convert.1861 = s32[2,8192,8192]{2,1,0} convert(%not.100)
  %reduce.325 = s32[2,8192]{1,0} reduce(%convert.1861, %constant.5439), dimensions={1}, to_apply=%region_223.12479
  %reshape.10163 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.325)
  %slice.364 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10163), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10166 = s32[2,1]{1,0} reshape(%slice.364)
  %reshape.10176 = s32[2]{0} reshape(%reshape.10166)
  %compare.3501 = pred[2]{0} compare(%reshape.10176, %broadcast.7184), direction=LT
  %reduce-window.218 = s32[2]{0} reduce-window(%reshape.10176, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.4
  %select.2196 = s32[2]{0} select(%compare.3501, %broadcast.7199, %reduce-window.218)
  %scatter.364 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2196), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.4
  %reduce.326 = s32[2,8192]{1,0} reduce(%convert.1861, %constant.5439), dimensions={2}, to_apply=%region_224.12487
  %reshape.10168 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.326)
  %reduce.327 = s32[2,1]{1,0} reduce(%reshape.10168, %constant.5570), dimensions={3,2}, to_apply=%region_225.12492
  %reshape.10186 = s32[2]{0} reshape(%reduce.327)
  %compare.3514 = pred[2]{0} compare(%reshape.10186, %broadcast.7184), direction=LT
  %reduce-window.221 = s32[2]{0} reduce-window(%reshape.10186, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.4.clone
  %select.2206 = s32[2]{0} select(%compare.3514, %broadcast.7199, %reduce-window.221)
  %scatter.369 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2206), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.4
  %custom-call.34 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1688, %copy.1689, %copy.1690, %constant.5555, %get-tuple-element.403, /*index=5*/%get-tuple-element.404, %get-tuple-element.405, %copy.1692, %scatter.364, %scatter.369, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.414 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.34), index=2
  %copy.1693 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.414)
  %get-tuple-element.415 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.4), index=19
  %convert.1866 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.415)
  %all-gather.258 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1866), channel_id=261, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.357 = bf16[2,8192,4096]{2,1,0} dot(%copy.1693, %all-gather.258), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.416 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.34), index=1
  %copy.1694 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.416)
  %convert.1867 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1694)
  %multiply.4421 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1867, %broadcast.10660)
  %convert.1868 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4421)
  %multiply.4422 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1867, %broadcast.10668)
  %multiply.4423 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4422, %broadcast.10666)
  %convert.1869 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4423)
  %select.2207 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.1869, %broadcast.10254)
  %slice.365 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2207), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.32 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.365, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3619 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.1868, %pad.32)
  %slice.366 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2207), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.33 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.366, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3620 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3619, %pad.33)
  %select.2208 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.1869, %broadcast.10254)
  %slice.367 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2208), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.34 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.367, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3621 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3620, %pad.34)
  %slice.368 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2208), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.35 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.368, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3623 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3621, %pad.35)
  %get-tuple-element.417 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.4), index=16
  %convert.1870 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.417)
  %all-gather.259 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1870), channel_id=262, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.358 = bf16[2,8192,4096]{2,1,0} dot(%add.3623, %all-gather.259), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3624 = bf16[2,8192,4096]{2,1,0} add(%dot.357, %dot.358)
  %copy.1695 = bf16[2,8192,4096]{2,1,0} copy(%add.3624)
  %get-tuple-element.418 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.34), index=0
  %copy.1696 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.418)
  %convert.1871 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1696)
  %multiply.4433 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1871, %broadcast.10636)
  %convert.1872 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4433)
  %multiply.4434 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1871, %broadcast.10648)
  %multiply.4435 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4434, %broadcast.10644)
  %convert.1874 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4435)
  %select.2209 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.1874, %broadcast.10265)
  %slice.369 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2209), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.36 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.369, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3625 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.1872, %pad.36)
  %slice.370 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2209), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.37 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.370, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3626 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3625, %pad.37)
  %select.2210 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.1874, %broadcast.10265)
  %slice.371 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2210), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.38 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.371, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3627 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3626, %pad.38)
  %slice.372 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2210), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.39 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.372, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3628 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3627, %pad.39)
  %get-tuple-element.419 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.4), index=18
  %convert.1875 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.419)
  %all-gather.260 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1875), channel_id=263, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.359 = bf16[2,8192,4096]{2,1,0} dot(%add.3628, %all-gather.260), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1697 = bf16[2,8192,4096]{2,1,0} copy(%dot.359)
  %add.3629 = bf16[2,8192,4096]{2,1,0} add(%copy.1695, %copy.1697)
  %copy.1698 = bf16[2,8192,4096]{2,1,0} copy(%add.3629)
  %get-tuple-element.420 = f32[4096]{0} get-tuple-element(%opt-barrier.4), index=15
  %convert.1876 = bf16[4096]{0} convert(%get-tuple-element.420)
  %broadcast.10723 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1876), dimensions={2}
  %multiply.4446 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1698, %broadcast.10723)
  %convert.1877 = f32[2,8192,4096]{2,1,0} convert(%multiply.4446)
  %convert.1878 = f32[2,8192,4096]{2,1,0} convert(%copy.1686)
  %multiply.4447 = f32[2,8192,4096]{2,1,0} multiply(%convert.1878, %convert.1878)
  %reduce.328 = f32[2,8192]{1,0} reduce(%multiply.4447, %constant.5451), dimensions={2}, to_apply=%region_222.12270
  %multiply.4448 = f32[2,8192]{1,0} multiply(%reduce.328, %broadcast.7109)
  %add.3630 = f32[2,8192]{1,0} add(%multiply.4448, %broadcast.7110)
  %reshape.10209 = f32[2,8192,1]{2,1,0} reshape(%add.3630)
  %rsqrt.138 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10209)
  %reshape.10210 = f32[2,8192]{1,0} reshape(%rsqrt.138)
  %broadcast.10727 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10210), dimensions={0,1}
  %multiply.4449 = f32[2,8192,4096]{2,1,0} multiply(%convert.1877, %broadcast.10727)
  %multiply.4450 = f32[2,8192,4096]{2,1,0} multiply(%convert.1878, %convert.1877)
  %reduce.329 = f32[2,8192]{1,0} reduce(%multiply.4450, %constant.5451), dimensions={2}, to_apply=%region_233.12709
  %reshape.10211 = f32[2,8192,1]{2,1,0} reshape(%reduce.329)
  %divide.816 = f32[2,8192,1]{2,1,0} divide(%rsqrt.138, %reshape.10209)
  %multiply.4451 = f32[2,8192,1]{2,1,0} multiply(%divide.816, %broadcast.10161)
  %multiply.4452 = f32[2,8192,1]{2,1,0} multiply(%reshape.10211, %multiply.4451)
  %multiply.4453 = f32[2,8192,1]{2,1,0} multiply(%multiply.4452, %broadcast.10163)
  %reshape.10212 = f32[2,8192]{1,0} reshape(%multiply.4453)
  %broadcast.10730 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10212), dimensions={0,1}
  %multiply.4455 = f32[2,8192,4096]{2,1,0} multiply(%convert.1878, %broadcast.10730)
  %add.3631 = f32[2,8192,4096]{2,1,0} add(%multiply.4449, %multiply.4455)
  %convert.1879 = bf16[2,8192,4096]{2,1,0} convert(%add.3631)
  %add.3632 = bf16[2,8192,4096]{2,1,0} add(%add.3596, %convert.1879)
  %copy.1699 = bf16[2,8192,4096]{2,1,0} copy(%add.3632)
  %tuple.103 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.182, %reduce-precision.183, %reduce-precision.184, %get-tuple-element.241, %get-tuple-element.242, /*index=5*/%reduce-precision.185, %reduce-precision.186, %reduce-precision.187, %reduce-precision.188, %constant.5507, /*index=10*/%constant.5507, %param.247, %param.248, %param.249, %param.246, /*index=15*/%param.241, %param.243, %param.245, %param.242, %param.244, /*index=20*/%copy.1528, %param.10, %param.7, %copy.1699)
  %opt-barrier.5 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.103)
  %get-tuple-element.421 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.5), index=23
  %copy.1700 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.421)
  %get-tuple-element.422 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.5), index=7
  %negate.878 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.422)
  %exponential.164 = bf16[2,8192,14336]{2,1,0} exponential(%negate.878)
  %add.3633 = bf16[2,8192,14336]{2,1,0} add(%exponential.164, %broadcast.7215)
  %divide.817 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3633)
  %multiply.4456 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.422, %divide.817)
  %copy.1701 = bf16[2,8192,4096]{2,1,0} copy(%copy.1700)
  %get-tuple-element.423 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.5), index=13
  %convert.1880 = bf16[14336,256]{1,0} convert(%get-tuple-element.423)
  %all-gather.261 = bf16[14336,4096]{1,0} all-gather(%convert.1880), channel_id=264, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.360 = bf16[2,8192,14336]{2,1,0} dot(%copy.1701, %all-gather.261), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1702 = bf16[2,8192,14336]{2,1,0} copy(%dot.360)
  %multiply.4457 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4456, %copy.1702)
  %get-tuple-element.424 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.5), index=12
  %convert.1881 = bf16[256,14336]{1,0} convert(%get-tuple-element.424)
  %all-gather.262 = bf16[4096,14336]{1,0} all-gather(%convert.1881), channel_id=265, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.361 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4457, %all-gather.262), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.425 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.5), index=8
  %multiply.4458 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1702, %get-tuple-element.425)
  %multiply.4459 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4458, %divide.817)
  %multiply.4460 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.422, %multiply.4458)
  %subtract.220 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.817)
  %multiply.4461 = bf16[2,8192,14336]{2,1,0} multiply(%divide.817, %subtract.220)
  %multiply.4462 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4460, %multiply.4461)
  %add.3634 = bf16[2,8192,14336]{2,1,0} add(%multiply.4459, %multiply.4462)
  %get-tuple-element.426 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.5), index=11
  %convert.1882 = bf16[256,14336]{1,0} convert(%get-tuple-element.426)
  %all-gather.263 = bf16[4096,14336]{1,0} all-gather(%convert.1882), channel_id=266, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.362 = bf16[2,8192,4096]{2,1,0} dot(%add.3634, %all-gather.263), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3635 = bf16[2,8192,4096]{2,1,0} add(%dot.361, %dot.362)
  %copy.1703 = bf16[2,8192,4096]{2,1,0} copy(%add.3635)
  %get-tuple-element.427 = f32[4096]{0} get-tuple-element(%opt-barrier.5), index=14
  %convert.1883 = bf16[4096]{0} convert(%get-tuple-element.427)
  %broadcast.10732 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1883), dimensions={2}
  %multiply.4463 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1703, %broadcast.10732)
  %convert.1884 = f32[2,8192,4096]{2,1,0} convert(%multiply.4463)
  %get-tuple-element.428 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.5), index=20
  %copy.1704 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.428)
  %get-tuple-element.429 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.5), index=6
  %copy.1705 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.429)
  %add.3636 = bf16[2,8192,4096]{2,1,0} add(%copy.1704, %copy.1705)
  %convert.1885 = f32[2,8192,4096]{2,1,0} convert(%add.3636)
  %multiply.4464 = f32[2,8192,4096]{2,1,0} multiply(%convert.1885, %convert.1885)
  %reduce.330 = f32[2,8192]{1,0} reduce(%multiply.4464, %constant.5451), dimensions={2}, to_apply=%region_239.12996
  %multiply.4465 = f32[2,8192]{1,0} multiply(%reduce.330, %broadcast.7109)
  %add.3637 = f32[2,8192]{1,0} add(%multiply.4465, %broadcast.7110)
  %reshape.10213 = f32[2,8192,1]{2,1,0} reshape(%add.3637)
  %rsqrt.139 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10213)
  %reshape.10214 = f32[2,8192]{1,0} reshape(%rsqrt.139)
  %broadcast.10735 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10214), dimensions={0,1}
  %multiply.4466 = f32[2,8192,4096]{2,1,0} multiply(%convert.1884, %broadcast.10735)
  %multiply.4468 = f32[2,8192,4096]{2,1,0} multiply(%convert.1885, %convert.1884)
  %reduce.331 = f32[2,8192]{1,0} reduce(%multiply.4468, %constant.5451), dimensions={2}, to_apply=%region_242.13067
  %reshape.10215 = f32[2,8192,1]{2,1,0} reshape(%reduce.331)
  %divide.818 = f32[2,8192,1]{2,1,0} divide(%rsqrt.139, %reshape.10213)
  %multiply.4469 = f32[2,8192,1]{2,1,0} multiply(%divide.818, %broadcast.10161)
  %multiply.4470 = f32[2,8192,1]{2,1,0} multiply(%reshape.10215, %multiply.4469)
  %multiply.4471 = f32[2,8192,1]{2,1,0} multiply(%multiply.4470, %broadcast.10163)
  %reshape.10216 = f32[2,8192]{1,0} reshape(%multiply.4471)
  %broadcast.10737 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10216), dimensions={0,1}
  %multiply.4472 = f32[2,8192,4096]{2,1,0} multiply(%convert.1885, %broadcast.10737)
  %add.3638 = f32[2,8192,4096]{2,1,0} add(%multiply.4466, %multiply.4472)
  %convert.1886 = bf16[2,8192,4096]{2,1,0} convert(%add.3638)
  %add.3639 = bf16[2,8192,4096]{2,1,0} add(%copy.1700, %convert.1886)
  %get-tuple-element.430 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.5), index=0
  %convert.1887 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.430)
  %get-tuple-element.431 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.5), index=22
  %convert.1888 = f32[2,8192]{1,0} convert(%get-tuple-element.431)
  %broadcast.10738 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.1888), dimensions={0,1}
  %divide.820 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.10738, %broadcast.7129)
  %cosine.75 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.820)
  %reshape.10218 = f32[2,8192,128]{2,1,0} reshape(%cosine.75)
  %broadcast.10749 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10218), dimensions={0,1,3}
  %multiply.4484 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1887, %broadcast.10749)
  %slice.373 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.430), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.374 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.430), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.148 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.373, %slice.374), dimensions={3}
  %slice.375 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.430), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.376 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.430), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.149 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.375, %slice.376), dimensions={3}
  %select.2214 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.148, %concatenate.149)
  %convert.1893 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2214)
  %sine.74 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.820)
  %reshape.10223 = f32[2,8192,128]{2,1,0} reshape(%sine.74)
  %broadcast.10756 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10223), dimensions={0,1,3}
  %multiply.4489 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1893, %broadcast.10756)
  %get-tuple-element.432 = s32[2]{0} get-tuple-element(%opt-barrier.5), index=9
  %broadcast.10757 = s32[64,2]{1,0} broadcast(%get-tuple-element.432), dimensions={1}
  %reshape.10224 = s32[128]{0} reshape(%broadcast.10757)
  %convert.1894 = f32[128]{0} convert(%reshape.10224)
  %broadcast.10758 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.1894), dimensions={3}
  %multiply.4490 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4489, %broadcast.10758)
  %add.3643 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.4484, %multiply.4490)
  %convert.1896 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3643)
  %copy.1706 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1896)
  %get-tuple-element.433 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.5), index=1
  %convert.1897 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.433)
  %broadcast.10768 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10218), dimensions={0,1,3}
  %multiply.4501 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1897, %broadcast.10768)
  %slice.377 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.433), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.378 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.433), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.150 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.377, %slice.378), dimensions={3}
  %slice.379 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.433), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.380 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.433), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.151 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.379, %slice.380), dimensions={3}
  %select.2218 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.150, %concatenate.151)
  %convert.1902 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2218)
  %broadcast.10774 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10223), dimensions={0,1,3}
  %multiply.4507 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1902, %broadcast.10774)
  %get-tuple-element.434 = s32[2]{0} get-tuple-element(%opt-barrier.5), index=10
  %broadcast.10775 = s32[64,2]{1,0} broadcast(%get-tuple-element.434), dimensions={1}
  %reshape.10232 = s32[128]{0} reshape(%broadcast.10775)
  %convert.1903 = f32[128]{0} convert(%reshape.10232)
  %broadcast.10776 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.1903), dimensions={3}
  %multiply.4508 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4507, %broadcast.10776)
  %add.3647 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.4501, %multiply.4508)
  %convert.1904 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3647)
  %copy.1707 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1904)
  %get-tuple-element.435 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.5), index=2
  %copy.1708 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.435)
  %get-tuple-element.436 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.5), index=3
  %get-tuple-element.437 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.5), index=4
  %get-tuple-element.438 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.5), index=5
  %copy.1709 = bf16[2,8192,4096]{2,1,0} copy(%add.3639)
  %get-tuple-element.439 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.5), index=17
  %convert.1905 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.439)
  %all-gather.264 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1905), channel_id=267, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.363 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1709, %all-gather.264), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1710 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.363)
  %get-tuple-element.440 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.5), index=21
  %broadcast.10777 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.440), dimensions={0,1}
  %broadcast.10778 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.440), dimensions={0,2}
  %compare.3534 = pred[2,8192,8192]{2,1,0} compare(%broadcast.10777, %broadcast.10778), direction=EQ
  %and.783 = pred[2,8192,8192]{2,1,0} and(%compare.3534, %broadcast.7176)
  %select.2219 = f32[2,8192,8192]{2,1,0} select(%and.783, %broadcast.7177, %broadcast.7179)
  %compare.3537 = pred[2,8192,8192]{2,1,0} compare(%select.2219, %broadcast.7177), direction=NE
  %not.101 = pred[2,8192,8192]{2,1,0} not(%compare.3537)
  %convert.1906 = s32[2,8192,8192]{2,1,0} convert(%not.101)
  %reduce.332 = s32[2,8192]{1,0} reduce(%convert.1906, %constant.5439), dimensions={1}, to_apply=%region_236.12971
  %reshape.10233 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.332)
  %slice.381 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10233), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10235 = s32[2,1]{1,0} reshape(%slice.381)
  %reshape.10244 = s32[2]{0} reshape(%reshape.10235)
  %compare.3551 = pred[2]{0} compare(%reshape.10244, %broadcast.7184), direction=LT
  %reduce-window.224 = s32[2]{0} reduce-window(%reshape.10244, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.5
  %select.2229 = s32[2]{0} select(%compare.3551, %broadcast.7199, %reduce-window.224)
  %scatter.374 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2229), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.5
  %reduce.333 = s32[2,8192]{1,0} reduce(%convert.1906, %constant.5439), dimensions={2}, to_apply=%region_237.12979
  %reshape.10236 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.333)
  %reduce.334 = s32[2,1]{1,0} reduce(%reshape.10236, %constant.5570), dimensions={3,2}, to_apply=%region_238.12984
  %reshape.10253 = s32[2]{0} reshape(%reduce.334)
  %compare.3564 = pred[2]{0} compare(%reshape.10253, %broadcast.7184), direction=LT
  %reduce-window.227 = s32[2]{0} reduce-window(%reshape.10253, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.5.clone
  %select.2239 = s32[2]{0} select(%compare.3564, %broadcast.7199, %reduce-window.227)
  %scatter.379 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2239), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.5
  %custom-call.35 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1706, %copy.1707, %copy.1708, %constant.5555, %get-tuple-element.436, /*index=5*/%get-tuple-element.437, %get-tuple-element.438, %copy.1710, %scatter.374, %scatter.379, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.447 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.35), index=2
  %copy.1711 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.447)
  %get-tuple-element.448 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.5), index=19
  %convert.1912 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.448)
  %all-gather.265 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1912), channel_id=268, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.364 = bf16[2,8192,4096]{2,1,0} dot(%copy.1711, %all-gather.265), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.449 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.35), index=1
  %copy.1712 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.449)
  %convert.1913 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1712)
  %multiply.4510 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1913, %broadcast.10768)
  %convert.1914 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4510)
  %multiply.4511 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1913, %broadcast.10776)
  %multiply.4512 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4511, %broadcast.10774)
  %convert.1915 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4512)
  %select.2240 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.1915, %broadcast.10254)
  %slice.382 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2240), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.40 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.382, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3660 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.1914, %pad.40)
  %slice.383 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2240), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.41 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.383, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3661 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3660, %pad.41)
  %select.2241 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.1915, %broadcast.10254)
  %slice.384 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2241), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.42 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.384, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3662 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3661, %pad.42)
  %slice.385 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2241), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.43 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.385, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3663 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3662, %pad.43)
  %get-tuple-element.450 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.5), index=16
  %convert.1916 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.450)
  %all-gather.266 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1916), channel_id=269, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.365 = bf16[2,8192,4096]{2,1,0} dot(%add.3663, %all-gather.266), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3664 = bf16[2,8192,4096]{2,1,0} add(%dot.364, %dot.365)
  %copy.1713 = bf16[2,8192,4096]{2,1,0} copy(%add.3664)
  %get-tuple-element.451 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.35), index=0
  %copy.1714 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.451)
  %convert.1917 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1714)
  %multiply.4523 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1917, %broadcast.10749)
  %convert.1919 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4523)
  %multiply.4524 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1917, %broadcast.10758)
  %multiply.4525 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4524, %broadcast.10756)
  %convert.1920 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4525)
  %select.2242 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.1920, %broadcast.10265)
  %slice.386 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2242), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.44 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.386, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3665 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.1919, %pad.44)
  %slice.387 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2242), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.45 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.387, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3666 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3665, %pad.45)
  %select.2243 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.1920, %broadcast.10265)
  %slice.388 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2243), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.46 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.388, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3667 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3666, %pad.46)
  %slice.389 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2243), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.47 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.389, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3668 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3667, %pad.47)
  %get-tuple-element.452 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.5), index=18
  %convert.1921 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.452)
  %all-gather.267 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1921), channel_id=270, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.366 = bf16[2,8192,4096]{2,1,0} dot(%add.3668, %all-gather.267), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1715 = bf16[2,8192,4096]{2,1,0} copy(%dot.366)
  %add.3669 = bf16[2,8192,4096]{2,1,0} add(%copy.1713, %copy.1715)
  %copy.1716 = bf16[2,8192,4096]{2,1,0} copy(%add.3669)
  %get-tuple-element.453 = f32[4096]{0} get-tuple-element(%opt-barrier.5), index=15
  %convert.1923 = bf16[4096]{0} convert(%get-tuple-element.453)
  %broadcast.10831 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1923), dimensions={2}
  %multiply.4534 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1716, %broadcast.10831)
  %convert.1924 = f32[2,8192,4096]{2,1,0} convert(%multiply.4534)
  %convert.1925 = f32[2,8192,4096]{2,1,0} convert(%copy.1704)
  %multiply.4535 = f32[2,8192,4096]{2,1,0} multiply(%convert.1925, %convert.1925)
  %reduce.335 = f32[2,8192]{1,0} reduce(%multiply.4535, %constant.5451), dimensions={2}, to_apply=%region_235.12762
  %multiply.4536 = f32[2,8192]{1,0} multiply(%reduce.335, %broadcast.7109)
  %add.3670 = f32[2,8192]{1,0} add(%multiply.4536, %broadcast.7110)
  %reshape.10277 = f32[2,8192,1]{2,1,0} reshape(%add.3670)
  %rsqrt.140 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10277)
  %reshape.10278 = f32[2,8192]{1,0} reshape(%rsqrt.140)
  %broadcast.10834 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10278), dimensions={0,1}
  %multiply.4537 = f32[2,8192,4096]{2,1,0} multiply(%convert.1924, %broadcast.10834)
  %multiply.4538 = f32[2,8192,4096]{2,1,0} multiply(%convert.1925, %convert.1924)
  %reduce.336 = f32[2,8192]{1,0} reduce(%multiply.4538, %constant.5451), dimensions={2}, to_apply=%region_246.13201
  %reshape.10279 = f32[2,8192,1]{2,1,0} reshape(%reduce.336)
  %divide.825 = f32[2,8192,1]{2,1,0} divide(%rsqrt.140, %reshape.10277)
  %multiply.4539 = f32[2,8192,1]{2,1,0} multiply(%divide.825, %broadcast.10161)
  %multiply.4540 = f32[2,8192,1]{2,1,0} multiply(%reshape.10279, %multiply.4539)
  %multiply.4541 = f32[2,8192,1]{2,1,0} multiply(%multiply.4540, %broadcast.10163)
  %reshape.10280 = f32[2,8192]{1,0} reshape(%multiply.4541)
  %broadcast.10836 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10280), dimensions={0,1}
  %multiply.4542 = f32[2,8192,4096]{2,1,0} multiply(%convert.1925, %broadcast.10836)
  %add.3671 = f32[2,8192,4096]{2,1,0} add(%multiply.4537, %multiply.4542)
  %convert.1926 = bf16[2,8192,4096]{2,1,0} convert(%add.3671)
  %add.3672 = bf16[2,8192,4096]{2,1,0} add(%add.3639, %convert.1926)
  %copy.1717 = bf16[2,8192,4096]{2,1,0} copy(%add.3672)
  %tuple.105 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.175, %reduce-precision.176, %reduce-precision.177, %get-tuple-element.239, %get-tuple-element.240, /*index=5*/%reduce-precision.178, %reduce-precision.179, %reduce-precision.180, %reduce-precision.181, %constant.5507, /*index=10*/%constant.5507, %param.238, %param.239, %param.240, %param.237, /*index=15*/%param.232, %param.234, %param.236, %param.233, %param.235, /*index=20*/%copy.1515, %param.10, %param.7, %copy.1717)
  %opt-barrier.6 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.105)
  %get-tuple-element.454 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.6), index=23
  %copy.1718 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.454)
  %get-tuple-element.455 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.6), index=7
  %negate.881 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.455)
  %exponential.165 = bf16[2,8192,14336]{2,1,0} exponential(%negate.881)
  %add.3673 = bf16[2,8192,14336]{2,1,0} add(%exponential.165, %broadcast.7215)
  %divide.826 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3673)
  %multiply.4543 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.455, %divide.826)
  %copy.1719 = bf16[2,8192,4096]{2,1,0} copy(%copy.1718)
  %get-tuple-element.456 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.6), index=13
  %convert.1928 = bf16[14336,256]{1,0} convert(%get-tuple-element.456)
  %all-gather.268 = bf16[14336,4096]{1,0} all-gather(%convert.1928), channel_id=271, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.367 = bf16[2,8192,14336]{2,1,0} dot(%copy.1719, %all-gather.268), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1720 = bf16[2,8192,14336]{2,1,0} copy(%dot.367)
  %multiply.4544 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4543, %copy.1720)
  %get-tuple-element.457 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.6), index=12
  %convert.1929 = bf16[256,14336]{1,0} convert(%get-tuple-element.457)
  %all-gather.269 = bf16[4096,14336]{1,0} all-gather(%convert.1929), channel_id=272, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.368 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4544, %all-gather.269), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.458 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.6), index=8
  %multiply.4545 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1720, %get-tuple-element.458)
  %multiply.4546 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4545, %divide.826)
  %multiply.4547 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.455, %multiply.4545)
  %subtract.225 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.826)
  %multiply.4548 = bf16[2,8192,14336]{2,1,0} multiply(%divide.826, %subtract.225)
  %multiply.4550 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4547, %multiply.4548)
  %add.3674 = bf16[2,8192,14336]{2,1,0} add(%multiply.4546, %multiply.4550)
  %get-tuple-element.459 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.6), index=11
  %convert.1930 = bf16[256,14336]{1,0} convert(%get-tuple-element.459)
  %all-gather.270 = bf16[4096,14336]{1,0} all-gather(%convert.1930), channel_id=273, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.369 = bf16[2,8192,4096]{2,1,0} dot(%add.3674, %all-gather.270), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3675 = bf16[2,8192,4096]{2,1,0} add(%dot.368, %dot.369)
  %copy.1721 = bf16[2,8192,4096]{2,1,0} copy(%add.3675)
  %get-tuple-element.460 = f32[4096]{0} get-tuple-element(%opt-barrier.6), index=14
  %convert.1931 = bf16[4096]{0} convert(%get-tuple-element.460)
  %broadcast.10838 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1931), dimensions={2}
  %multiply.4551 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1721, %broadcast.10838)
  %convert.1932 = f32[2,8192,4096]{2,1,0} convert(%multiply.4551)
  %get-tuple-element.461 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.6), index=20
  %copy.1722 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.461)
  %get-tuple-element.462 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.6), index=6
  %copy.1723 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.462)
  %add.3676 = bf16[2,8192,4096]{2,1,0} add(%copy.1722, %copy.1723)
  %convert.1934 = f32[2,8192,4096]{2,1,0} convert(%add.3676)
  %multiply.4552 = f32[2,8192,4096]{2,1,0} multiply(%convert.1934, %convert.1934)
  %reduce.337 = f32[2,8192]{1,0} reduce(%multiply.4552, %constant.5451), dimensions={2}, to_apply=%region_252.13488
  %multiply.4553 = f32[2,8192]{1,0} multiply(%reduce.337, %broadcast.7109)
  %add.3677 = f32[2,8192]{1,0} add(%multiply.4553, %broadcast.7110)
  %reshape.10281 = f32[2,8192,1]{2,1,0} reshape(%add.3677)
  %rsqrt.141 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10281)
  %reshape.10282 = f32[2,8192]{1,0} reshape(%rsqrt.141)
  %broadcast.10842 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10282), dimensions={0,1}
  %multiply.4555 = f32[2,8192,4096]{2,1,0} multiply(%convert.1932, %broadcast.10842)
  %multiply.4556 = f32[2,8192,4096]{2,1,0} multiply(%convert.1934, %convert.1932)
  %reduce.338 = f32[2,8192]{1,0} reduce(%multiply.4556, %constant.5451), dimensions={2}, to_apply=%region_255.13559
  %reshape.10283 = f32[2,8192,1]{2,1,0} reshape(%reduce.338)
  %divide.827 = f32[2,8192,1]{2,1,0} divide(%rsqrt.141, %reshape.10281)
  %multiply.4557 = f32[2,8192,1]{2,1,0} multiply(%divide.827, %broadcast.10161)
  %multiply.4558 = f32[2,8192,1]{2,1,0} multiply(%reshape.10283, %multiply.4557)
  %multiply.4559 = f32[2,8192,1]{2,1,0} multiply(%multiply.4558, %broadcast.10163)
  %reshape.10284 = f32[2,8192]{1,0} reshape(%multiply.4559)
  %broadcast.10844 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10284), dimensions={0,1}
  %multiply.4561 = f32[2,8192,4096]{2,1,0} multiply(%convert.1934, %broadcast.10844)
  %add.3678 = f32[2,8192,4096]{2,1,0} add(%multiply.4555, %multiply.4561)
  %convert.1935 = bf16[2,8192,4096]{2,1,0} convert(%add.3678)
  %add.3679 = bf16[2,8192,4096]{2,1,0} add(%copy.1718, %convert.1935)
  %get-tuple-element.463 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.6), index=0
  %convert.1936 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.463)
  %get-tuple-element.464 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.6), index=22
  %convert.1937 = f32[2,8192]{1,0} convert(%get-tuple-element.464)
  %broadcast.10845 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.1937), dimensions={0,1}
  %divide.829 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.10845, %broadcast.7129)
  %cosine.77 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.829)
  %reshape.10286 = f32[2,8192,128]{2,1,0} reshape(%cosine.77)
  %broadcast.10854 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10286), dimensions={0,1,3}
  %multiply.4572 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1936, %broadcast.10854)
  %slice.390 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.463), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.391 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.463), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.152 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.390, %slice.391), dimensions={3}
  %slice.392 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.463), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.393 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.463), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.153 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.392, %slice.393), dimensions={3}
  %select.2247 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.152, %concatenate.153)
  %convert.1941 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2247)
  %sine.76 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.829)
  %reshape.10291 = f32[2,8192,128]{2,1,0} reshape(%sine.76)
  %broadcast.10860 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10291), dimensions={0,1,3}
  %multiply.4577 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1941, %broadcast.10860)
  %get-tuple-element.465 = s32[2]{0} get-tuple-element(%opt-barrier.6), index=9
  %broadcast.10861 = s32[64,2]{1,0} broadcast(%get-tuple-element.465), dimensions={1}
  %reshape.10292 = s32[128]{0} reshape(%broadcast.10861)
  %convert.1942 = f32[128]{0} convert(%reshape.10292)
  %broadcast.10862 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.1942), dimensions={3}
  %multiply.4578 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4577, %broadcast.10862)
  %add.3684 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.4572, %multiply.4578)
  %convert.1943 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3684)
  %copy.1724 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1943)
  %get-tuple-element.466 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.6), index=1
  %convert.1944 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.466)
  %broadcast.10878 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10286), dimensions={0,1,3}
  %multiply.4590 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1944, %broadcast.10878)
  %slice.394 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.466), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.395 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.466), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.154 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.394, %slice.395), dimensions={3}
  %slice.396 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.466), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.397 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.466), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.155 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.396, %slice.397), dimensions={3}
  %select.2251 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.154, %concatenate.155)
  %convert.1951 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2251)
  %broadcast.10888 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10291), dimensions={0,1,3}
  %multiply.4595 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1951, %broadcast.10888)
  %get-tuple-element.467 = s32[2]{0} get-tuple-element(%opt-barrier.6), index=10
  %broadcast.10889 = s32[64,2]{1,0} broadcast(%get-tuple-element.467), dimensions={1}
  %reshape.10300 = s32[128]{0} reshape(%broadcast.10889)
  %convert.1952 = f32[128]{0} convert(%reshape.10300)
  %broadcast.10891 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.1952), dimensions={3}
  %multiply.4597 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4595, %broadcast.10891)
  %add.3688 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.4590, %multiply.4597)
  %convert.1953 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3688)
  %copy.1725 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.1953)
  %get-tuple-element.468 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.6), index=2
  %copy.1726 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.468)
  %get-tuple-element.469 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.6), index=3
  %get-tuple-element.470 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.6), index=4
  %get-tuple-element.471 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.6), index=5
  %copy.1727 = bf16[2,8192,4096]{2,1,0} copy(%add.3679)
  %get-tuple-element.472 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.6), index=17
  %convert.1954 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.472)
  %all-gather.271 = bf16[32,128,4096]{2,1,0} all-gather(%convert.1954), channel_id=274, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.370 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1727, %all-gather.271), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1728 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.370)
  %get-tuple-element.473 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.6), index=21
  %broadcast.10893 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.473), dimensions={0,1}
  %broadcast.10894 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.473), dimensions={0,2}
  %compare.3583 = pred[2,8192,8192]{2,1,0} compare(%broadcast.10893, %broadcast.10894), direction=EQ
  %and.792 = pred[2,8192,8192]{2,1,0} and(%compare.3583, %broadcast.7176)
  %select.2252 = f32[2,8192,8192]{2,1,0} select(%and.792, %broadcast.7177, %broadcast.7179)
  %compare.3585 = pred[2,8192,8192]{2,1,0} compare(%select.2252, %broadcast.7177), direction=NE
  %not.102 = pred[2,8192,8192]{2,1,0} not(%compare.3585)
  %convert.1955 = s32[2,8192,8192]{2,1,0} convert(%not.102)
  %reduce.339 = s32[2,8192]{1,0} reduce(%convert.1955, %constant.5439), dimensions={1}, to_apply=%region_249.13463
  %reshape.10301 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.339)
  %slice.398 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10301), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10303 = s32[2,1]{1,0} reshape(%slice.398)
  %reshape.10316 = s32[2]{0} reshape(%reshape.10303)
  %compare.3598 = pred[2]{0} compare(%reshape.10316, %broadcast.7184), direction=LT
  %reduce-window.230 = s32[2]{0} reduce-window(%reshape.10316, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.6
  %select.2263 = s32[2]{0} select(%compare.3598, %broadcast.7199, %reduce-window.230)
  %scatter.384 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2263), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.6
  %reduce.340 = s32[2,8192]{1,0} reduce(%convert.1955, %constant.5439), dimensions={2}, to_apply=%region_250.13471
  %reshape.10304 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.340)
  %reduce.341 = s32[2,1]{1,0} reduce(%reshape.10304, %constant.5570), dimensions={3,2}, to_apply=%region_251.13476
  %reshape.10325 = s32[2]{0} reshape(%reduce.341)
  %compare.3611 = pred[2]{0} compare(%reshape.10325, %broadcast.7184), direction=LT
  %reduce-window.233 = s32[2]{0} reduce-window(%reshape.10325, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.6.clone
  %select.2273 = s32[2]{0} select(%compare.3611, %broadcast.7199, %reduce-window.233)
  %scatter.389 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2273), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.6
  %custom-call.36 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1724, %copy.1725, %copy.1726, %constant.5555, %get-tuple-element.469, /*index=5*/%get-tuple-element.470, %get-tuple-element.471, %copy.1728, %scatter.384, %scatter.389, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.480 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.36), index=2
  %copy.1729 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.480)
  %get-tuple-element.481 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.6), index=19
  %convert.1960 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.481)
  %all-gather.272 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1960), channel_id=275, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.371 = bf16[2,8192,4096]{2,1,0} dot(%copy.1729, %all-gather.272), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.482 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.36), index=1
  %copy.1730 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.482)
  %convert.1962 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1730)
  %multiply.4600 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1962, %broadcast.10878)
  %convert.1963 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4600)
  %multiply.4601 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1962, %broadcast.10891)
  %multiply.4602 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4601, %broadcast.10888)
  %convert.1965 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4602)
  %select.2274 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.1965, %broadcast.10254)
  %slice.399 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2274), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.48 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.399, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3701 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.1963, %pad.48)
  %slice.400 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2274), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.49 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.400, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3702 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3701, %pad.49)
  %select.2275 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.1965, %broadcast.10254)
  %slice.401 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2275), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.50 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.401, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3703 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3702, %pad.50)
  %slice.402 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2275), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.51 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.402, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3704 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3703, %pad.51)
  %get-tuple-element.483 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.6), index=16
  %convert.1966 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.483)
  %all-gather.273 = bf16[4096,8,128]{2,1,0} all-gather(%convert.1966), channel_id=276, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.372 = bf16[2,8192,4096]{2,1,0} dot(%add.3704, %all-gather.273), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3705 = bf16[2,8192,4096]{2,1,0} add(%dot.371, %dot.372)
  %copy.1731 = bf16[2,8192,4096]{2,1,0} copy(%add.3705)
  %get-tuple-element.484 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.36), index=0
  %copy.1732 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.484)
  %convert.1967 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1732)
  %multiply.4611 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1967, %broadcast.10854)
  %convert.1968 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4611)
  %multiply.4612 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1967, %broadcast.10862)
  %multiply.4613 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4612, %broadcast.10860)
  %convert.1969 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4613)
  %select.2276 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.1969, %broadcast.10265)
  %slice.403 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2276), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.52 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.403, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3706 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.1968, %pad.52)
  %slice.404 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2276), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.53 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.404, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3707 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3706, %pad.53)
  %select.2277 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.1969, %broadcast.10265)
  %slice.405 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2277), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.54 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.405, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3708 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3707, %pad.54)
  %slice.406 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2277), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.55 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.406, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3709 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3708, %pad.55)
  %get-tuple-element.485 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.6), index=18
  %convert.1970 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.485)
  %all-gather.274 = bf16[4096,32,128]{2,1,0} all-gather(%convert.1970), channel_id=277, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.373 = bf16[2,8192,4096]{2,1,0} dot(%add.3709, %all-gather.274), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1733 = bf16[2,8192,4096]{2,1,0} copy(%dot.373)
  %add.3710 = bf16[2,8192,4096]{2,1,0} add(%copy.1731, %copy.1733)
  %copy.1734 = bf16[2,8192,4096]{2,1,0} copy(%add.3710)
  %get-tuple-element.486 = f32[4096]{0} get-tuple-element(%opt-barrier.6), index=15
  %convert.1971 = bf16[4096]{0} convert(%get-tuple-element.486)
  %broadcast.10948 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1971), dimensions={2}
  %multiply.4622 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1734, %broadcast.10948)
  %convert.1972 = f32[2,8192,4096]{2,1,0} convert(%multiply.4622)
  %convert.1973 = f32[2,8192,4096]{2,1,0} convert(%copy.1722)
  %multiply.4623 = f32[2,8192,4096]{2,1,0} multiply(%convert.1973, %convert.1973)
  %reduce.342 = f32[2,8192]{1,0} reduce(%multiply.4623, %constant.5451), dimensions={2}, to_apply=%region_248.13254
  %multiply.4624 = f32[2,8192]{1,0} multiply(%reduce.342, %broadcast.7109)
  %add.3711 = f32[2,8192]{1,0} add(%multiply.4624, %broadcast.7110)
  %reshape.10349 = f32[2,8192,1]{2,1,0} reshape(%add.3711)
  %rsqrt.142 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10349)
  %reshape.10350 = f32[2,8192]{1,0} reshape(%rsqrt.142)
  %broadcast.10952 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10350), dimensions={0,1}
  %multiply.4626 = f32[2,8192,4096]{2,1,0} multiply(%convert.1972, %broadcast.10952)
  %multiply.4627 = f32[2,8192,4096]{2,1,0} multiply(%convert.1973, %convert.1972)
  %reduce.343 = f32[2,8192]{1,0} reduce(%multiply.4627, %constant.5451), dimensions={2}, to_apply=%region_259.13693
  %reshape.10351 = f32[2,8192,1]{2,1,0} reshape(%reduce.343)
  %divide.834 = f32[2,8192,1]{2,1,0} divide(%rsqrt.142, %reshape.10349)
  %multiply.4628 = f32[2,8192,1]{2,1,0} multiply(%divide.834, %broadcast.10161)
  %multiply.4629 = f32[2,8192,1]{2,1,0} multiply(%reshape.10351, %multiply.4628)
  %multiply.4631 = f32[2,8192,1]{2,1,0} multiply(%multiply.4629, %broadcast.10163)
  %reshape.10352 = f32[2,8192]{1,0} reshape(%multiply.4631)
  %broadcast.10955 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10352), dimensions={0,1}
  %multiply.4632 = f32[2,8192,4096]{2,1,0} multiply(%convert.1973, %broadcast.10955)
  %add.3712 = f32[2,8192,4096]{2,1,0} add(%multiply.4626, %multiply.4632)
  %convert.1974 = bf16[2,8192,4096]{2,1,0} convert(%add.3712)
  %add.3713 = bf16[2,8192,4096]{2,1,0} add(%add.3679, %convert.1974)
  %copy.1735 = bf16[2,8192,4096]{2,1,0} copy(%add.3713)
  %tuple.107 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.168, %reduce-precision.169, %reduce-precision.170, %get-tuple-element.237, %get-tuple-element.238, /*index=5*/%reduce-precision.171, %reduce-precision.172, %reduce-precision.173, %reduce-precision.174, %constant.5507, /*index=10*/%constant.5507, %param.229, %param.230, %param.231, %param.228, /*index=15*/%param.223, %param.225, %param.227, %param.224, %param.226, /*index=20*/%copy.1502, %param.10, %param.7, %copy.1735)
  %opt-barrier.7 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.107)
  %get-tuple-element.487 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.7), index=23
  %copy.1736 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.487)
  %get-tuple-element.488 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.7), index=7
  %negate.884 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.488)
  %exponential.166 = bf16[2,8192,14336]{2,1,0} exponential(%negate.884)
  %add.3714 = bf16[2,8192,14336]{2,1,0} add(%exponential.166, %broadcast.7215)
  %divide.835 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3714)
  %multiply.4633 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.488, %divide.835)
  %copy.1737 = bf16[2,8192,4096]{2,1,0} copy(%copy.1736)
  %get-tuple-element.489 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.7), index=13
  %convert.1975 = bf16[14336,256]{1,0} convert(%get-tuple-element.489)
  %all-gather.275 = bf16[14336,4096]{1,0} all-gather(%convert.1975), channel_id=278, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.374 = bf16[2,8192,14336]{2,1,0} dot(%copy.1737, %all-gather.275), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1738 = bf16[2,8192,14336]{2,1,0} copy(%dot.374)
  %multiply.4634 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4633, %copy.1738)
  %get-tuple-element.490 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.7), index=12
  %convert.1976 = bf16[256,14336]{1,0} convert(%get-tuple-element.490)
  %all-gather.276 = bf16[4096,14336]{1,0} all-gather(%convert.1976), channel_id=279, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.375 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4634, %all-gather.276), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.491 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.7), index=8
  %multiply.4635 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1738, %get-tuple-element.491)
  %multiply.4637 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4635, %divide.835)
  %multiply.4638 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.488, %multiply.4635)
  %subtract.230 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.835)
  %multiply.4639 = bf16[2,8192,14336]{2,1,0} multiply(%divide.835, %subtract.230)
  %multiply.4640 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4638, %multiply.4639)
  %add.3715 = bf16[2,8192,14336]{2,1,0} add(%multiply.4637, %multiply.4640)
  %get-tuple-element.492 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.7), index=11
  %convert.1977 = bf16[256,14336]{1,0} convert(%get-tuple-element.492)
  %all-gather.277 = bf16[4096,14336]{1,0} all-gather(%convert.1977), channel_id=280, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.376 = bf16[2,8192,4096]{2,1,0} dot(%add.3715, %all-gather.277), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3716 = bf16[2,8192,4096]{2,1,0} add(%dot.375, %dot.376)
  %copy.1739 = bf16[2,8192,4096]{2,1,0} copy(%add.3716)
  %get-tuple-element.493 = f32[4096]{0} get-tuple-element(%opt-barrier.7), index=14
  %convert.1978 = bf16[4096]{0} convert(%get-tuple-element.493)
  %broadcast.10959 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.1978), dimensions={2}
  %multiply.4641 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1739, %broadcast.10959)
  %convert.1979 = f32[2,8192,4096]{2,1,0} convert(%multiply.4641)
  %get-tuple-element.494 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.7), index=20
  %copy.1740 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.494)
  %get-tuple-element.495 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.7), index=6
  %copy.1741 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.495)
  %add.3717 = bf16[2,8192,4096]{2,1,0} add(%copy.1740, %copy.1741)
  %convert.1980 = f32[2,8192,4096]{2,1,0} convert(%add.3717)
  %multiply.4642 = f32[2,8192,4096]{2,1,0} multiply(%convert.1980, %convert.1980)
  %reduce.344 = f32[2,8192]{1,0} reduce(%multiply.4642, %constant.5451), dimensions={2}, to_apply=%region_265.13980
  %multiply.4643 = f32[2,8192]{1,0} multiply(%reduce.344, %broadcast.7109)
  %add.3718 = f32[2,8192]{1,0} add(%multiply.4643, %broadcast.7110)
  %reshape.10354 = f32[2,8192,1]{2,1,0} reshape(%add.3718)
  %rsqrt.143 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10354)
  %reshape.10356 = f32[2,8192]{1,0} reshape(%rsqrt.143)
  %broadcast.10964 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10356), dimensions={0,1}
  %multiply.4644 = f32[2,8192,4096]{2,1,0} multiply(%convert.1979, %broadcast.10964)
  %multiply.4645 = f32[2,8192,4096]{2,1,0} multiply(%convert.1980, %convert.1979)
  %reduce.345 = f32[2,8192]{1,0} reduce(%multiply.4645, %constant.5451), dimensions={2}, to_apply=%region_268.14051
  %reshape.10358 = f32[2,8192,1]{2,1,0} reshape(%reduce.345)
  %divide.836 = f32[2,8192,1]{2,1,0} divide(%rsqrt.143, %reshape.10354)
  %multiply.4646 = f32[2,8192,1]{2,1,0} multiply(%divide.836, %broadcast.10161)
  %multiply.4647 = f32[2,8192,1]{2,1,0} multiply(%reshape.10358, %multiply.4646)
  %multiply.4648 = f32[2,8192,1]{2,1,0} multiply(%multiply.4647, %broadcast.10163)
  %reshape.10359 = f32[2,8192]{1,0} reshape(%multiply.4648)
  %broadcast.10966 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10359), dimensions={0,1}
  %multiply.4649 = f32[2,8192,4096]{2,1,0} multiply(%convert.1980, %broadcast.10966)
  %add.3719 = f32[2,8192,4096]{2,1,0} add(%multiply.4644, %multiply.4649)
  %convert.1981 = bf16[2,8192,4096]{2,1,0} convert(%add.3719)
  %add.3720 = bf16[2,8192,4096]{2,1,0} add(%copy.1736, %convert.1981)
  %get-tuple-element.496 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.7), index=0
  %convert.1982 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.496)
  %get-tuple-element.497 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.7), index=22
  %convert.1983 = f32[2,8192]{1,0} convert(%get-tuple-element.497)
  %broadcast.10968 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.1983), dimensions={0,1}
  %divide.838 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.10968, %broadcast.7129)
  %cosine.79 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.838)
  %reshape.10362 = f32[2,8192,128]{2,1,0} reshape(%cosine.79)
  %broadcast.10979 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10362), dimensions={0,1,3}
  %multiply.4660 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1982, %broadcast.10979)
  %slice.407 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.496), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.408 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.496), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.156 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.407, %slice.408), dimensions={3}
  %slice.409 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.496), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.410 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.496), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.157 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.409, %slice.410), dimensions={3}
  %select.2281 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.156, %concatenate.157)
  %convert.1988 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2281)
  %sine.78 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.838)
  %reshape.10368 = f32[2,8192,128]{2,1,0} reshape(%sine.78)
  %broadcast.10990 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10368), dimensions={0,1,3}
  %multiply.4665 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.1988, %broadcast.10990)
  %get-tuple-element.498 = s32[2]{0} get-tuple-element(%opt-barrier.7), index=9
  %broadcast.10991 = s32[64,2]{1,0} broadcast(%get-tuple-element.498), dimensions={1}
  %reshape.10370 = s32[128]{0} reshape(%broadcast.10991)
  %convert.1989 = f32[128]{0} convert(%reshape.10370)
  %broadcast.10993 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.1989), dimensions={3}
  %multiply.4666 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4665, %broadcast.10993)
  %add.3725 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.4660, %multiply.4666)
  %convert.1990 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3725)
  %copy.1742 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.1990)
  %get-tuple-element.499 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.7), index=1
  %convert.1991 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.499)
  %broadcast.11004 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10362), dimensions={0,1,3}
  %multiply.4677 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1991, %broadcast.11004)
  %slice.411 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.499), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.412 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.499), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.158 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.411, %slice.412), dimensions={3}
  %slice.413 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.499), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.414 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.499), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.159 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.413, %slice.414), dimensions={3}
  %select.2285 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.158, %concatenate.159)
  %convert.1998 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2285)
  %broadcast.11010 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10368), dimensions={0,1,3}
  %multiply.4682 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.1998, %broadcast.11010)
  %get-tuple-element.500 = s32[2]{0} get-tuple-element(%opt-barrier.7), index=10
  %broadcast.11011 = s32[64,2]{1,0} broadcast(%get-tuple-element.500), dimensions={1}
  %reshape.10379 = s32[128]{0} reshape(%broadcast.11011)
  %convert.1999 = f32[128]{0} convert(%reshape.10379)
  %broadcast.11012 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.1999), dimensions={3}
  %multiply.4683 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4682, %broadcast.11012)
  %add.3729 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.4677, %multiply.4683)
  %convert.2000 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3729)
  %copy.1743 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2000)
  %get-tuple-element.501 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.7), index=2
  %copy.1744 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.501)
  %get-tuple-element.502 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.7), index=3
  %get-tuple-element.503 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.7), index=4
  %get-tuple-element.504 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.7), index=5
  %copy.1745 = bf16[2,8192,4096]{2,1,0} copy(%add.3720)
  %get-tuple-element.505 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.7), index=17
  %convert.2001 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.505)
  %all-gather.278 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2001), channel_id=281, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.377 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1745, %all-gather.278), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1746 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.377)
  %get-tuple-element.506 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.7), index=21
  %broadcast.11013 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.506), dimensions={0,1}
  %broadcast.11014 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.506), dimensions={0,2}
  %compare.3630 = pred[2,8192,8192]{2,1,0} compare(%broadcast.11013, %broadcast.11014), direction=EQ
  %and.801 = pred[2,8192,8192]{2,1,0} and(%compare.3630, %broadcast.7176)
  %select.2287 = f32[2,8192,8192]{2,1,0} select(%and.801, %broadcast.7177, %broadcast.7179)
  %compare.3632 = pred[2,8192,8192]{2,1,0} compare(%select.2287, %broadcast.7177), direction=NE
  %not.103 = pred[2,8192,8192]{2,1,0} not(%compare.3632)
  %convert.2002 = s32[2,8192,8192]{2,1,0} convert(%not.103)
  %reduce.346 = s32[2,8192]{1,0} reduce(%convert.2002, %constant.5439), dimensions={1}, to_apply=%region_262.13955
  %reshape.10380 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.346)
  %slice.415 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10380), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10382 = s32[2,1]{1,0} reshape(%slice.415)
  %reshape.10395 = s32[2]{0} reshape(%reshape.10382)
  %compare.3645 = pred[2]{0} compare(%reshape.10395, %broadcast.7184), direction=LT
  %reduce-window.236 = s32[2]{0} reduce-window(%reshape.10395, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.7
  %select.2298 = s32[2]{0} select(%compare.3645, %broadcast.7199, %reduce-window.236)
  %scatter.394 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2298), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.7
  %reduce.347 = s32[2,8192]{1,0} reduce(%convert.2002, %constant.5439), dimensions={2}, to_apply=%region_263.13963
  %reshape.10383 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.347)
  %reduce.348 = s32[2,1]{1,0} reduce(%reshape.10383, %constant.5570), dimensions={3,2}, to_apply=%region_264.13968
  %reshape.10404 = s32[2]{0} reshape(%reduce.348)
  %compare.3658 = pred[2]{0} compare(%reshape.10404, %broadcast.7184), direction=LT
  %reduce-window.239 = s32[2]{0} reduce-window(%reshape.10404, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.7.clone
  %select.2308 = s32[2]{0} select(%compare.3658, %broadcast.7199, %reduce-window.239)
  %scatter.399 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2308), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.7
  %custom-call.37 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1742, %copy.1743, %copy.1744, %constant.5555, %get-tuple-element.502, /*index=5*/%get-tuple-element.503, %get-tuple-element.504, %copy.1746, %scatter.394, %scatter.399, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.513 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.37), index=2
  %copy.1747 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.513)
  %get-tuple-element.514 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.7), index=19
  %convert.2006 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.514)
  %all-gather.279 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2006), channel_id=282, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.378 = bf16[2,8192,4096]{2,1,0} dot(%copy.1747, %all-gather.279), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.515 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.37), index=1
  %copy.1748 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.515)
  %convert.2007 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1748)
  %multiply.4685 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2007, %broadcast.11004)
  %convert.2008 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4685)
  %multiply.4686 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2007, %broadcast.11012)
  %multiply.4687 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4686, %broadcast.11010)
  %convert.2009 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4687)
  %select.2309 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2009, %broadcast.10254)
  %slice.416 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2309), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.56 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.416, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3742 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2008, %pad.56)
  %slice.417 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2309), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.57 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.417, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3743 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3742, %pad.57)
  %select.2310 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2009, %broadcast.10254)
  %slice.418 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2310), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.58 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.418, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3744 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3743, %pad.58)
  %slice.419 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2310), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.59 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.419, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3745 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3744, %pad.59)
  %get-tuple-element.516 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.7), index=16
  %convert.2010 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.516)
  %all-gather.280 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2010), channel_id=283, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.379 = bf16[2,8192,4096]{2,1,0} dot(%add.3745, %all-gather.280), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3746 = bf16[2,8192,4096]{2,1,0} add(%dot.378, %dot.379)
  %copy.1749 = bf16[2,8192,4096]{2,1,0} copy(%add.3746)
  %get-tuple-element.517 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.37), index=0
  %copy.1750 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.517)
  %convert.2012 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1750)
  %multiply.4697 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2012, %broadcast.10979)
  %convert.2013 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4697)
  %multiply.4698 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2012, %broadcast.10993)
  %multiply.4699 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4698, %broadcast.10990)
  %convert.2014 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4699)
  %select.2311 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2014, %broadcast.10265)
  %slice.420 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2311), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.60 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.420, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3747 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2013, %pad.60)
  %slice.421 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2311), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.61 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.421, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3748 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3747, %pad.61)
  %select.2312 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2014, %broadcast.10265)
  %slice.422 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2312), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.62 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.422, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3749 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3748, %pad.62)
  %slice.423 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2312), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.63 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.423, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3750 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3749, %pad.63)
  %get-tuple-element.518 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.7), index=18
  %convert.2015 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.518)
  %all-gather.281 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2015), channel_id=284, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.380 = bf16[2,8192,4096]{2,1,0} dot(%add.3750, %all-gather.281), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1751 = bf16[2,8192,4096]{2,1,0} copy(%dot.380)
  %add.3751 = bf16[2,8192,4096]{2,1,0} add(%copy.1749, %copy.1751)
  %copy.1752 = bf16[2,8192,4096]{2,1,0} copy(%add.3751)
  %get-tuple-element.519 = f32[4096]{0} get-tuple-element(%opt-barrier.7), index=15
  %convert.2016 = bf16[4096]{0} convert(%get-tuple-element.519)
  %broadcast.11065 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2016), dimensions={2}
  %multiply.4708 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1752, %broadcast.11065)
  %convert.2017 = f32[2,8192,4096]{2,1,0} convert(%multiply.4708)
  %convert.2018 = f32[2,8192,4096]{2,1,0} convert(%copy.1740)
  %multiply.4710 = f32[2,8192,4096]{2,1,0} multiply(%convert.2018, %convert.2018)
  %reduce.349 = f32[2,8192]{1,0} reduce(%multiply.4710, %constant.5451), dimensions={2}, to_apply=%region_261.13746
  %multiply.4711 = f32[2,8192]{1,0} multiply(%reduce.349, %broadcast.7109)
  %add.3752 = f32[2,8192]{1,0} add(%multiply.4711, %broadcast.7110)
  %reshape.10428 = f32[2,8192,1]{2,1,0} reshape(%add.3752)
  %rsqrt.144 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10428)
  %reshape.10429 = f32[2,8192]{1,0} reshape(%rsqrt.144)
  %broadcast.11068 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10429), dimensions={0,1}
  %multiply.4712 = f32[2,8192,4096]{2,1,0} multiply(%convert.2017, %broadcast.11068)
  %multiply.4713 = f32[2,8192,4096]{2,1,0} multiply(%convert.2018, %convert.2017)
  %reduce.350 = f32[2,8192]{1,0} reduce(%multiply.4713, %constant.5451), dimensions={2}, to_apply=%region_272.14185
  %reshape.10431 = f32[2,8192,1]{2,1,0} reshape(%reduce.350)
  %divide.843 = f32[2,8192,1]{2,1,0} divide(%rsqrt.144, %reshape.10428)
  %multiply.4714 = f32[2,8192,1]{2,1,0} multiply(%divide.843, %broadcast.10161)
  %multiply.4715 = f32[2,8192,1]{2,1,0} multiply(%reshape.10431, %multiply.4714)
  %multiply.4717 = f32[2,8192,1]{2,1,0} multiply(%multiply.4715, %broadcast.10163)
  %reshape.10433 = f32[2,8192]{1,0} reshape(%multiply.4717)
  %broadcast.11070 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10433), dimensions={0,1}
  %multiply.4718 = f32[2,8192,4096]{2,1,0} multiply(%convert.2018, %broadcast.11070)
  %add.3753 = f32[2,8192,4096]{2,1,0} add(%multiply.4712, %multiply.4718)
  %convert.2019 = bf16[2,8192,4096]{2,1,0} convert(%add.3753)
  %add.3754 = bf16[2,8192,4096]{2,1,0} add(%add.3720, %convert.2019)
  %copy.1753 = bf16[2,8192,4096]{2,1,0} copy(%add.3754)
  %tuple.109 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.161, %reduce-precision.162, %reduce-precision.163, %get-tuple-element.235, %get-tuple-element.236, /*index=5*/%reduce-precision.164, %reduce-precision.165, %reduce-precision.166, %reduce-precision.167, %constant.5507, /*index=10*/%constant.5507, %param.220, %param.221, %param.222, %param.219, /*index=15*/%param.214, %param.216, %param.218, %param.215, %param.217, /*index=20*/%copy.1489, %param.10, %param.7, %copy.1753)
  %opt-barrier.8 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.109)
  %get-tuple-element.520 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.8), index=23
  %copy.1754 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.520)
  %get-tuple-element.521 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.8), index=7
  %negate.887 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.521)
  %exponential.167 = bf16[2,8192,14336]{2,1,0} exponential(%negate.887)
  %add.3755 = bf16[2,8192,14336]{2,1,0} add(%exponential.167, %broadcast.7215)
  %divide.844 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3755)
  %multiply.4719 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.521, %divide.844)
  %copy.1755 = bf16[2,8192,4096]{2,1,0} copy(%copy.1754)
  %get-tuple-element.522 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.8), index=13
  %convert.2020 = bf16[14336,256]{1,0} convert(%get-tuple-element.522)
  %all-gather.282 = bf16[14336,4096]{1,0} all-gather(%convert.2020), channel_id=285, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.381 = bf16[2,8192,14336]{2,1,0} dot(%copy.1755, %all-gather.282), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1756 = bf16[2,8192,14336]{2,1,0} copy(%dot.381)
  %multiply.4720 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4719, %copy.1756)
  %get-tuple-element.523 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.8), index=12
  %convert.2021 = bf16[256,14336]{1,0} convert(%get-tuple-element.523)
  %all-gather.283 = bf16[4096,14336]{1,0} all-gather(%convert.2021), channel_id=286, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.382 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4720, %all-gather.283), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.524 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.8), index=8
  %multiply.4721 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1756, %get-tuple-element.524)
  %multiply.4722 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4721, %divide.844)
  %multiply.4723 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.521, %multiply.4721)
  %subtract.235 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.844)
  %multiply.4724 = bf16[2,8192,14336]{2,1,0} multiply(%divide.844, %subtract.235)
  %multiply.4726 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4723, %multiply.4724)
  %add.3756 = bf16[2,8192,14336]{2,1,0} add(%multiply.4722, %multiply.4726)
  %get-tuple-element.525 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.8), index=11
  %convert.2022 = bf16[256,14336]{1,0} convert(%get-tuple-element.525)
  %all-gather.284 = bf16[4096,14336]{1,0} all-gather(%convert.2022), channel_id=287, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.383 = bf16[2,8192,4096]{2,1,0} dot(%add.3756, %all-gather.284), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3757 = bf16[2,8192,4096]{2,1,0} add(%dot.382, %dot.383)
  %copy.1757 = bf16[2,8192,4096]{2,1,0} copy(%add.3757)
  %get-tuple-element.526 = f32[4096]{0} get-tuple-element(%opt-barrier.8), index=14
  %convert.2023 = bf16[4096]{0} convert(%get-tuple-element.526)
  %broadcast.11072 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2023), dimensions={2}
  %multiply.4727 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1757, %broadcast.11072)
  %convert.2024 = f32[2,8192,4096]{2,1,0} convert(%multiply.4727)
  %get-tuple-element.527 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.8), index=20
  %copy.1758 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.527)
  %get-tuple-element.528 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.8), index=6
  %copy.1759 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.528)
  %add.3758 = bf16[2,8192,4096]{2,1,0} add(%copy.1758, %copy.1759)
  %convert.2026 = f32[2,8192,4096]{2,1,0} convert(%add.3758)
  %multiply.4728 = f32[2,8192,4096]{2,1,0} multiply(%convert.2026, %convert.2026)
  %reduce.351 = f32[2,8192]{1,0} reduce(%multiply.4728, %constant.5451), dimensions={2}, to_apply=%region_278.14472
  %multiply.4729 = f32[2,8192]{1,0} multiply(%reduce.351, %broadcast.7109)
  %add.3760 = f32[2,8192]{1,0} add(%multiply.4729, %broadcast.7110)
  %reshape.10435 = f32[2,8192,1]{2,1,0} reshape(%add.3760)
  %rsqrt.145 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10435)
  %reshape.10436 = f32[2,8192]{1,0} reshape(%rsqrt.145)
  %broadcast.11075 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10436), dimensions={0,1}
  %multiply.4730 = f32[2,8192,4096]{2,1,0} multiply(%convert.2024, %broadcast.11075)
  %multiply.4731 = f32[2,8192,4096]{2,1,0} multiply(%convert.2026, %convert.2024)
  %reduce.352 = f32[2,8192]{1,0} reduce(%multiply.4731, %constant.5451), dimensions={2}, to_apply=%region_281.14543
  %reshape.10438 = f32[2,8192,1]{2,1,0} reshape(%reduce.352)
  %divide.845 = f32[2,8192,1]{2,1,0} divide(%rsqrt.145, %reshape.10435)
  %multiply.4732 = f32[2,8192,1]{2,1,0} multiply(%divide.845, %broadcast.10161)
  %multiply.4733 = f32[2,8192,1]{2,1,0} multiply(%reshape.10438, %multiply.4732)
  %multiply.4735 = f32[2,8192,1]{2,1,0} multiply(%multiply.4733, %broadcast.10163)
  %reshape.10439 = f32[2,8192]{1,0} reshape(%multiply.4735)
  %broadcast.11077 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10439), dimensions={0,1}
  %multiply.4736 = f32[2,8192,4096]{2,1,0} multiply(%convert.2026, %broadcast.11077)
  %add.3761 = f32[2,8192,4096]{2,1,0} add(%multiply.4730, %multiply.4736)
  %convert.2027 = bf16[2,8192,4096]{2,1,0} convert(%add.3761)
  %add.3762 = bf16[2,8192,4096]{2,1,0} add(%copy.1754, %convert.2027)
  %get-tuple-element.529 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.8), index=0
  %convert.2028 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.529)
  %get-tuple-element.530 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.8), index=22
  %convert.2029 = f32[2,8192]{1,0} convert(%get-tuple-element.530)
  %broadcast.11078 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2029), dimensions={0,1}
  %divide.847 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.11078, %broadcast.7129)
  %cosine.81 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.847)
  %reshape.10441 = f32[2,8192,128]{2,1,0} reshape(%cosine.81)
  %broadcast.11089 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10441), dimensions={0,1,3}
  %multiply.4748 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2028, %broadcast.11089)
  %slice.424 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.529), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.425 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.529), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.160 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.424, %slice.425), dimensions={3}
  %slice.426 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.529), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.427 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.529), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.161 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.426, %slice.427), dimensions={3}
  %select.2316 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.160, %concatenate.161)
  %convert.2034 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2316)
  %sine.80 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.847)
  %reshape.10449 = f32[2,8192,128]{2,1,0} reshape(%sine.80)
  %broadcast.11095 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10449), dimensions={0,1,3}
  %multiply.4753 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2034, %broadcast.11095)
  %get-tuple-element.531 = s32[2]{0} get-tuple-element(%opt-barrier.8), index=9
  %broadcast.11096 = s32[64,2]{1,0} broadcast(%get-tuple-element.531), dimensions={1}
  %reshape.10450 = s32[128]{0} reshape(%broadcast.11096)
  %convert.2036 = f32[128]{0} convert(%reshape.10450)
  %broadcast.11097 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2036), dimensions={3}
  %multiply.4755 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4753, %broadcast.11097)
  %add.3766 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.4748, %multiply.4755)
  %convert.2037 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3766)
  %copy.1760 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2037)
  %get-tuple-element.532 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.8), index=1
  %convert.2038 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.532)
  %broadcast.11109 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10441), dimensions={0,1,3}
  %multiply.4766 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2038, %broadcast.11109)
  %slice.428 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.532), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.429 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.532), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.162 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.428, %slice.429), dimensions={3}
  %slice.430 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.532), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.431 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.532), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.163 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.430, %slice.431), dimensions={3}
  %select.2320 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.162, %concatenate.163)
  %convert.2044 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2320)
  %broadcast.11116 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10449), dimensions={0,1,3}
  %multiply.4771 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2044, %broadcast.11116)
  %get-tuple-element.533 = s32[2]{0} get-tuple-element(%opt-barrier.8), index=10
  %broadcast.11117 = s32[64,2]{1,0} broadcast(%get-tuple-element.533), dimensions={1}
  %reshape.10461 = s32[128]{0} reshape(%broadcast.11117)
  %convert.2045 = f32[128]{0} convert(%reshape.10461)
  %broadcast.11118 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2045), dimensions={3}
  %multiply.4772 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4771, %broadcast.11118)
  %add.3770 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.4766, %multiply.4772)
  %convert.2046 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3770)
  %copy.1761 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2046)
  %get-tuple-element.534 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.8), index=2
  %copy.1762 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.534)
  %get-tuple-element.535 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.8), index=3
  %get-tuple-element.536 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.8), index=4
  %get-tuple-element.537 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.8), index=5
  %copy.1763 = bf16[2,8192,4096]{2,1,0} copy(%add.3762)
  %get-tuple-element.538 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.8), index=17
  %convert.2047 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.538)
  %all-gather.285 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2047), channel_id=288, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.384 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1763, %all-gather.285), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1764 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.384)
  %get-tuple-element.539 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.8), index=21
  %broadcast.11119 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.539), dimensions={0,1}
  %broadcast.11120 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.539), dimensions={0,2}
  %compare.3680 = pred[2,8192,8192]{2,1,0} compare(%broadcast.11119, %broadcast.11120), direction=EQ
  %and.810 = pred[2,8192,8192]{2,1,0} and(%compare.3680, %broadcast.7176)
  %select.2321 = f32[2,8192,8192]{2,1,0} select(%and.810, %broadcast.7177, %broadcast.7179)
  %compare.3682 = pred[2,8192,8192]{2,1,0} compare(%select.2321, %broadcast.7177), direction=NE
  %not.104 = pred[2,8192,8192]{2,1,0} not(%compare.3682)
  %convert.2048 = s32[2,8192,8192]{2,1,0} convert(%not.104)
  %reduce.353 = s32[2,8192]{1,0} reduce(%convert.2048, %constant.5439), dimensions={1}, to_apply=%region_275.14447
  %reshape.10463 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.353)
  %slice.432 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10463), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10466 = s32[2,1]{1,0} reshape(%slice.432)
  %reshape.10477 = s32[2]{0} reshape(%reshape.10466)
  %compare.3697 = pred[2]{0} compare(%reshape.10477, %broadcast.7184), direction=LT
  %reduce-window.242 = s32[2]{0} reduce-window(%reshape.10477, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.8
  %select.2331 = s32[2]{0} select(%compare.3697, %broadcast.7199, %reduce-window.242)
  %scatter.404 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2331), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.8
  %reduce.354 = s32[2,8192]{1,0} reduce(%convert.2048, %constant.5439), dimensions={2}, to_apply=%region_276.14455
  %reshape.10467 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.354)
  %reduce.355 = s32[2,1]{1,0} reduce(%reshape.10467, %constant.5570), dimensions={3,2}, to_apply=%region_277.14460
  %reshape.10485 = s32[2]{0} reshape(%reduce.355)
  %compare.3710 = pred[2]{0} compare(%reshape.10485, %broadcast.7184), direction=LT
  %reduce-window.245 = s32[2]{0} reduce-window(%reshape.10485, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.8.clone
  %select.2342 = s32[2]{0} select(%compare.3710, %broadcast.7199, %reduce-window.245)
  %scatter.409 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2342), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.8
  %custom-call.38 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1760, %copy.1761, %copy.1762, %constant.5555, %get-tuple-element.535, /*index=5*/%get-tuple-element.536, %get-tuple-element.537, %copy.1764, %scatter.404, %scatter.409, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.546 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.38), index=2
  %copy.1765 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.546)
  %get-tuple-element.547 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.8), index=19
  %convert.2052 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.547)
  %all-gather.286 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2052), channel_id=289, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.385 = bf16[2,8192,4096]{2,1,0} dot(%copy.1765, %all-gather.286), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.548 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.38), index=1
  %copy.1766 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.548)
  %convert.2053 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1766)
  %multiply.4774 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2053, %broadcast.11109)
  %convert.2054 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4774)
  %multiply.4775 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2053, %broadcast.11118)
  %multiply.4776 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4775, %broadcast.11116)
  %convert.2055 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4776)
  %select.2343 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2055, %broadcast.10254)
  %slice.433 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2343), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.64 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.433, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3783 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2054, %pad.64)
  %slice.434 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2343), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.65 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.434, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3784 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3783, %pad.65)
  %select.2344 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2055, %broadcast.10254)
  %slice.435 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2344), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.66 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.435, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3785 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3784, %pad.66)
  %slice.436 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2344), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.67 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.436, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3786 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3785, %pad.67)
  %get-tuple-element.549 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.8), index=16
  %convert.2056 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.549)
  %all-gather.287 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2056), channel_id=290, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.386 = bf16[2,8192,4096]{2,1,0} dot(%add.3786, %all-gather.287), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3787 = bf16[2,8192,4096]{2,1,0} add(%dot.385, %dot.386)
  %copy.1767 = bf16[2,8192,4096]{2,1,0} copy(%add.3787)
  %get-tuple-element.550 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.38), index=0
  %copy.1768 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.550)
  %convert.2057 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1768)
  %multiply.4786 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2057, %broadcast.11089)
  %convert.2058 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4786)
  %multiply.4787 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2057, %broadcast.11097)
  %multiply.4788 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4787, %broadcast.11095)
  %convert.2059 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4788)
  %select.2345 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2059, %broadcast.10265)
  %slice.437 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2345), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.68 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.437, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3788 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2058, %pad.68)
  %slice.438 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2345), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.69 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.438, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3789 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3788, %pad.69)
  %select.2346 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2059, %broadcast.10265)
  %slice.439 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2346), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.70 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.439, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3790 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3789, %pad.70)
  %slice.440 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2346), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.71 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.440, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3791 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3790, %pad.71)
  %get-tuple-element.551 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.8), index=18
  %convert.2060 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.551)
  %all-gather.288 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2060), channel_id=291, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.387 = bf16[2,8192,4096]{2,1,0} dot(%add.3791, %all-gather.288), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1769 = bf16[2,8192,4096]{2,1,0} copy(%dot.387)
  %add.3792 = bf16[2,8192,4096]{2,1,0} add(%copy.1767, %copy.1769)
  %copy.1770 = bf16[2,8192,4096]{2,1,0} copy(%add.3792)
  %get-tuple-element.552 = f32[4096]{0} get-tuple-element(%opt-barrier.8), index=15
  %convert.2062 = bf16[4096]{0} convert(%get-tuple-element.552)
  %broadcast.11179 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2062), dimensions={2}
  %multiply.4797 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1770, %broadcast.11179)
  %convert.2063 = f32[2,8192,4096]{2,1,0} convert(%multiply.4797)
  %convert.2064 = f32[2,8192,4096]{2,1,0} convert(%copy.1758)
  %multiply.4798 = f32[2,8192,4096]{2,1,0} multiply(%convert.2064, %convert.2064)
  %reduce.356 = f32[2,8192]{1,0} reduce(%multiply.4798, %constant.5451), dimensions={2}, to_apply=%region_274.14238
  %multiply.4799 = f32[2,8192]{1,0} multiply(%reduce.356, %broadcast.7109)
  %add.3793 = f32[2,8192]{1,0} add(%multiply.4799, %broadcast.7110)
  %reshape.10507 = f32[2,8192,1]{2,1,0} reshape(%add.3793)
  %rsqrt.146 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10507)
  %reshape.10508 = f32[2,8192]{1,0} reshape(%rsqrt.146)
  %broadcast.11182 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10508), dimensions={0,1}
  %multiply.4801 = f32[2,8192,4096]{2,1,0} multiply(%convert.2063, %broadcast.11182)
  %multiply.4803 = f32[2,8192,4096]{2,1,0} multiply(%convert.2064, %convert.2063)
  %reduce.357 = f32[2,8192]{1,0} reduce(%multiply.4803, %constant.5451), dimensions={2}, to_apply=%region_285.14677
  %reshape.10509 = f32[2,8192,1]{2,1,0} reshape(%reduce.357)
  %divide.852 = f32[2,8192,1]{2,1,0} divide(%rsqrt.146, %reshape.10507)
  %multiply.4804 = f32[2,8192,1]{2,1,0} multiply(%divide.852, %broadcast.10161)
  %multiply.4805 = f32[2,8192,1]{2,1,0} multiply(%reshape.10509, %multiply.4804)
  %multiply.4806 = f32[2,8192,1]{2,1,0} multiply(%multiply.4805, %broadcast.10163)
  %reshape.10510 = f32[2,8192]{1,0} reshape(%multiply.4806)
  %broadcast.11184 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10510), dimensions={0,1}
  %multiply.4807 = f32[2,8192,4096]{2,1,0} multiply(%convert.2064, %broadcast.11184)
  %add.3794 = f32[2,8192,4096]{2,1,0} add(%multiply.4801, %multiply.4807)
  %convert.2065 = bf16[2,8192,4096]{2,1,0} convert(%add.3794)
  %add.3795 = bf16[2,8192,4096]{2,1,0} add(%add.3762, %convert.2065)
  %copy.1771 = bf16[2,8192,4096]{2,1,0} copy(%add.3795)
  %tuple.111 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.154, %reduce-precision.155, %reduce-precision.156, %get-tuple-element.233, %get-tuple-element.234, /*index=5*/%reduce-precision.157, %reduce-precision.158, %reduce-precision.159, %reduce-precision.160, %constant.5507, /*index=10*/%constant.5507, %param.211, %param.212, %param.213, %param.210, /*index=15*/%param.205, %param.207, %param.209, %param.206, %param.208, /*index=20*/%copy.1476, %param.10, %param.7, %copy.1771)
  %opt-barrier.9 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.111)
  %get-tuple-element.553 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.9), index=23
  %copy.1772 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.553)
  %get-tuple-element.554 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.9), index=7
  %negate.890 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.554)
  %exponential.168 = bf16[2,8192,14336]{2,1,0} exponential(%negate.890)
  %add.3796 = bf16[2,8192,14336]{2,1,0} add(%exponential.168, %broadcast.7215)
  %divide.853 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3796)
  %multiply.4808 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.554, %divide.853)
  %copy.1773 = bf16[2,8192,4096]{2,1,0} copy(%copy.1772)
  %get-tuple-element.555 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.9), index=13
  %convert.2066 = bf16[14336,256]{1,0} convert(%get-tuple-element.555)
  %all-gather.289 = bf16[14336,4096]{1,0} all-gather(%convert.2066), channel_id=292, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.388 = bf16[2,8192,14336]{2,1,0} dot(%copy.1773, %all-gather.289), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1774 = bf16[2,8192,14336]{2,1,0} copy(%dot.388)
  %multiply.4809 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4808, %copy.1774)
  %get-tuple-element.556 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.9), index=12
  %convert.2067 = bf16[256,14336]{1,0} convert(%get-tuple-element.556)
  %all-gather.290 = bf16[4096,14336]{1,0} all-gather(%convert.2067), channel_id=293, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.389 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4809, %all-gather.290), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.557 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.9), index=8
  %multiply.4810 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1774, %get-tuple-element.557)
  %multiply.4811 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4810, %divide.853)
  %multiply.4812 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.554, %multiply.4810)
  %subtract.240 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.853)
  %multiply.4813 = bf16[2,8192,14336]{2,1,0} multiply(%divide.853, %subtract.240)
  %multiply.4814 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4812, %multiply.4813)
  %add.3798 = bf16[2,8192,14336]{2,1,0} add(%multiply.4811, %multiply.4814)
  %get-tuple-element.558 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.9), index=11
  %convert.2068 = bf16[256,14336]{1,0} convert(%get-tuple-element.558)
  %all-gather.291 = bf16[4096,14336]{1,0} all-gather(%convert.2068), channel_id=294, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.390 = bf16[2,8192,4096]{2,1,0} dot(%add.3798, %all-gather.291), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3799 = bf16[2,8192,4096]{2,1,0} add(%dot.389, %dot.390)
  %copy.1775 = bf16[2,8192,4096]{2,1,0} copy(%add.3799)
  %get-tuple-element.559 = f32[4096]{0} get-tuple-element(%opt-barrier.9), index=14
  %convert.2070 = bf16[4096]{0} convert(%get-tuple-element.559)
  %broadcast.11186 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2070), dimensions={2}
  %multiply.4815 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1775, %broadcast.11186)
  %convert.2072 = f32[2,8192,4096]{2,1,0} convert(%multiply.4815)
  %get-tuple-element.560 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.9), index=20
  %copy.1776 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.560)
  %get-tuple-element.561 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.9), index=6
  %copy.1777 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.561)
  %add.3800 = bf16[2,8192,4096]{2,1,0} add(%copy.1776, %copy.1777)
  %convert.2073 = f32[2,8192,4096]{2,1,0} convert(%add.3800)
  %multiply.4816 = f32[2,8192,4096]{2,1,0} multiply(%convert.2073, %convert.2073)
  %reduce.358 = f32[2,8192]{1,0} reduce(%multiply.4816, %constant.5451), dimensions={2}, to_apply=%region_291.14964
  %multiply.4817 = f32[2,8192]{1,0} multiply(%reduce.358, %broadcast.7109)
  %add.3801 = f32[2,8192]{1,0} add(%multiply.4817, %broadcast.7110)
  %reshape.10511 = f32[2,8192,1]{2,1,0} reshape(%add.3801)
  %rsqrt.147 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10511)
  %reshape.10512 = f32[2,8192]{1,0} reshape(%rsqrt.147)
  %broadcast.11189 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10512), dimensions={0,1}
  %multiply.4818 = f32[2,8192,4096]{2,1,0} multiply(%convert.2072, %broadcast.11189)
  %multiply.4819 = f32[2,8192,4096]{2,1,0} multiply(%convert.2073, %convert.2072)
  %reduce.359 = f32[2,8192]{1,0} reduce(%multiply.4819, %constant.5451), dimensions={2}, to_apply=%region_294.15035
  %reshape.10513 = f32[2,8192,1]{2,1,0} reshape(%reduce.359)
  %divide.854 = f32[2,8192,1]{2,1,0} divide(%rsqrt.147, %reshape.10511)
  %multiply.4820 = f32[2,8192,1]{2,1,0} multiply(%divide.854, %broadcast.10161)
  %multiply.4821 = f32[2,8192,1]{2,1,0} multiply(%reshape.10513, %multiply.4820)
  %multiply.4822 = f32[2,8192,1]{2,1,0} multiply(%multiply.4821, %broadcast.10163)
  %reshape.10514 = f32[2,8192]{1,0} reshape(%multiply.4822)
  %broadcast.11191 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10514), dimensions={0,1}
  %multiply.4823 = f32[2,8192,4096]{2,1,0} multiply(%convert.2073, %broadcast.11191)
  %add.3802 = f32[2,8192,4096]{2,1,0} add(%multiply.4818, %multiply.4823)
  %convert.2074 = bf16[2,8192,4096]{2,1,0} convert(%add.3802)
  %add.3803 = bf16[2,8192,4096]{2,1,0} add(%copy.1772, %convert.2074)
  %get-tuple-element.562 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.9), index=0
  %convert.2075 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.562)
  %get-tuple-element.563 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.9), index=22
  %convert.2076 = f32[2,8192]{1,0} convert(%get-tuple-element.563)
  %broadcast.11192 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2076), dimensions={0,1}
  %divide.856 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.11192, %broadcast.7129)
  %cosine.83 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.856)
  %reshape.10516 = f32[2,8192,128]{2,1,0} reshape(%cosine.83)
  %broadcast.11201 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10516), dimensions={0,1,3}
  %multiply.4836 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2075, %broadcast.11201)
  %slice.441 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.562), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.442 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.562), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.164 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.441, %slice.442), dimensions={3}
  %slice.443 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.562), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.444 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.562), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.165 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.443, %slice.444), dimensions={3}
  %select.2350 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.164, %concatenate.165)
  %convert.2080 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2350)
  %sine.82 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.856)
  %reshape.10522 = f32[2,8192,128]{2,1,0} reshape(%sine.82)
  %broadcast.11207 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10522), dimensions={0,1,3}
  %multiply.4842 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2080, %broadcast.11207)
  %get-tuple-element.564 = s32[2]{0} get-tuple-element(%opt-barrier.9), index=9
  %broadcast.11208 = s32[64,2]{1,0} broadcast(%get-tuple-element.564), dimensions={1}
  %reshape.10523 = s32[128]{0} reshape(%broadcast.11208)
  %convert.2081 = f32[128]{0} convert(%reshape.10523)
  %broadcast.11209 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2081), dimensions={3}
  %multiply.4843 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4842, %broadcast.11209)
  %add.3807 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.4836, %multiply.4843)
  %convert.2082 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3807)
  %copy.1778 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2082)
  %get-tuple-element.565 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.9), index=1
  %convert.2083 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.565)
  %broadcast.11221 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10516), dimensions={0,1,3}
  %multiply.4854 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2083, %broadcast.11221)
  %slice.445 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.565), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.446 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.565), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.166 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.445, %slice.446), dimensions={3}
  %slice.447 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.565), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.448 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.565), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.167 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.447, %slice.448), dimensions={3}
  %select.2354 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.166, %concatenate.167)
  %convert.2089 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2354)
  %broadcast.11227 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10522), dimensions={0,1,3}
  %multiply.4859 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2089, %broadcast.11227)
  %get-tuple-element.566 = s32[2]{0} get-tuple-element(%opt-barrier.9), index=10
  %broadcast.11228 = s32[64,2]{1,0} broadcast(%get-tuple-element.566), dimensions={1}
  %reshape.10534 = s32[128]{0} reshape(%broadcast.11228)
  %convert.2090 = f32[128]{0} convert(%reshape.10534)
  %broadcast.11229 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2090), dimensions={3}
  %multiply.4861 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4859, %broadcast.11229)
  %add.3811 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.4854, %multiply.4861)
  %convert.2091 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3811)
  %copy.1779 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2091)
  %get-tuple-element.567 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.9), index=2
  %copy.1780 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.567)
  %get-tuple-element.568 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.9), index=3
  %get-tuple-element.569 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.9), index=4
  %get-tuple-element.570 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.9), index=5
  %copy.1781 = bf16[2,8192,4096]{2,1,0} copy(%add.3803)
  %get-tuple-element.571 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.9), index=17
  %convert.2092 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.571)
  %all-gather.292 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2092), channel_id=295, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.391 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1781, %all-gather.292), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1782 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.391)
  %get-tuple-element.572 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.9), index=21
  %broadcast.11230 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.572), dimensions={0,1}
  %broadcast.11231 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.572), dimensions={0,2}
  %compare.3729 = pred[2,8192,8192]{2,1,0} compare(%broadcast.11230, %broadcast.11231), direction=EQ
  %and.819 = pred[2,8192,8192]{2,1,0} and(%compare.3729, %broadcast.7176)
  %select.2355 = f32[2,8192,8192]{2,1,0} select(%and.819, %broadcast.7177, %broadcast.7179)
  %compare.3731 = pred[2,8192,8192]{2,1,0} compare(%select.2355, %broadcast.7177), direction=NE
  %not.105 = pred[2,8192,8192]{2,1,0} not(%compare.3731)
  %convert.2093 = s32[2,8192,8192]{2,1,0} convert(%not.105)
  %reduce.360 = s32[2,8192]{1,0} reduce(%convert.2093, %constant.5439), dimensions={1}, to_apply=%region_288.14939
  %reshape.10535 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.360)
  %slice.449 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10535), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10537 = s32[2,1]{1,0} reshape(%slice.449)
  %reshape.10546 = s32[2]{0} reshape(%reshape.10537)
  %compare.3745 = pred[2]{0} compare(%reshape.10546, %broadcast.7184), direction=LT
  %reduce-window.248 = s32[2]{0} reduce-window(%reshape.10546, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.9
  %select.2367 = s32[2]{0} select(%compare.3745, %broadcast.7199, %reduce-window.248)
  %scatter.414 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2367), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.9
  %reduce.361 = s32[2,8192]{1,0} reduce(%convert.2093, %constant.5439), dimensions={2}, to_apply=%region_289.14947
  %reshape.10538 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.361)
  %reduce.362 = s32[2,1]{1,0} reduce(%reshape.10538, %constant.5570), dimensions={3,2}, to_apply=%region_290.14952
  %reshape.10554 = s32[2]{0} reshape(%reduce.362)
  %compare.3760 = pred[2]{0} compare(%reshape.10554, %broadcast.7184), direction=LT
  %reduce-window.251 = s32[2]{0} reduce-window(%reshape.10554, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.9.clone
  %select.2377 = s32[2]{0} select(%compare.3760, %broadcast.7199, %reduce-window.251)
  %scatter.419 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2377), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.9
  %custom-call.39 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1778, %copy.1779, %copy.1780, %constant.5555, %get-tuple-element.568, /*index=5*/%get-tuple-element.569, %get-tuple-element.570, %copy.1782, %scatter.414, %scatter.419, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.579 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.39), index=2
  %copy.1783 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.579)
  %get-tuple-element.580 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.9), index=19
  %convert.2097 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.580)
  %all-gather.293 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2097), channel_id=296, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.392 = bf16[2,8192,4096]{2,1,0} dot(%copy.1783, %all-gather.293), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.581 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.39), index=1
  %copy.1784 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.581)
  %convert.2098 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1784)
  %multiply.4863 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2098, %broadcast.11221)
  %convert.2099 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4863)
  %multiply.4864 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2098, %broadcast.11229)
  %multiply.4865 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4864, %broadcast.11227)
  %convert.2100 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4865)
  %select.2378 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2100, %broadcast.10254)
  %slice.450 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2378), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.72 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.450, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3824 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2099, %pad.72)
  %slice.451 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2378), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.73 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.451, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3825 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3824, %pad.73)
  %select.2379 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2100, %broadcast.10254)
  %slice.452 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2379), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.74 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.452, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3826 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3825, %pad.74)
  %slice.453 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2379), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.75 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.453, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3827 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3826, %pad.75)
  %get-tuple-element.582 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.9), index=16
  %convert.2102 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.582)
  %all-gather.294 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2102), channel_id=297, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.393 = bf16[2,8192,4096]{2,1,0} dot(%add.3827, %all-gather.294), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3829 = bf16[2,8192,4096]{2,1,0} add(%dot.392, %dot.393)
  %copy.1785 = bf16[2,8192,4096]{2,1,0} copy(%add.3829)
  %get-tuple-element.583 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.39), index=0
  %copy.1786 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.583)
  %convert.2103 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1786)
  %multiply.4874 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2103, %broadcast.11201)
  %convert.2104 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4874)
  %multiply.4875 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2103, %broadcast.11209)
  %multiply.4877 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4875, %broadcast.11207)
  %convert.2105 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4877)
  %select.2380 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2105, %broadcast.10265)
  %slice.454 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2380), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.76 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.454, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3830 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2104, %pad.76)
  %slice.455 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2380), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.77 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.455, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3831 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3830, %pad.77)
  %select.2381 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2105, %broadcast.10265)
  %slice.456 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2381), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.78 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.456, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3832 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3831, %pad.78)
  %slice.457 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2381), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.79 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.457, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3833 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3832, %pad.79)
  %get-tuple-element.584 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.9), index=18
  %convert.2107 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.584)
  %all-gather.295 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2107), channel_id=298, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.394 = bf16[2,8192,4096]{2,1,0} dot(%add.3833, %all-gather.295), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1787 = bf16[2,8192,4096]{2,1,0} copy(%dot.394)
  %add.3834 = bf16[2,8192,4096]{2,1,0} add(%copy.1785, %copy.1787)
  %copy.1788 = bf16[2,8192,4096]{2,1,0} copy(%add.3834)
  %get-tuple-element.585 = f32[4096]{0} get-tuple-element(%opt-barrier.9), index=15
  %convert.2108 = bf16[4096]{0} convert(%get-tuple-element.585)
  %broadcast.11281 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2108), dimensions={2}
  %multiply.4887 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1788, %broadcast.11281)
  %convert.2109 = f32[2,8192,4096]{2,1,0} convert(%multiply.4887)
  %convert.2110 = f32[2,8192,4096]{2,1,0} convert(%copy.1776)
  %multiply.4888 = f32[2,8192,4096]{2,1,0} multiply(%convert.2110, %convert.2110)
  %reduce.363 = f32[2,8192]{1,0} reduce(%multiply.4888, %constant.5451), dimensions={2}, to_apply=%region_287.14730
  %multiply.4889 = f32[2,8192]{1,0} multiply(%reduce.363, %broadcast.7109)
  %add.3835 = f32[2,8192]{1,0} add(%multiply.4889, %broadcast.7110)
  %reshape.10575 = f32[2,8192,1]{2,1,0} reshape(%add.3835)
  %rsqrt.148 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10575)
  %reshape.10576 = f32[2,8192]{1,0} reshape(%rsqrt.148)
  %broadcast.11284 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10576), dimensions={0,1}
  %multiply.4890 = f32[2,8192,4096]{2,1,0} multiply(%convert.2109, %broadcast.11284)
  %multiply.4891 = f32[2,8192,4096]{2,1,0} multiply(%convert.2110, %convert.2109)
  %reduce.364 = f32[2,8192]{1,0} reduce(%multiply.4891, %constant.5451), dimensions={2}, to_apply=%region_298.15169
  %reshape.10577 = f32[2,8192,1]{2,1,0} reshape(%reduce.364)
  %divide.861 = f32[2,8192,1]{2,1,0} divide(%rsqrt.148, %reshape.10575)
  %multiply.4892 = f32[2,8192,1]{2,1,0} multiply(%divide.861, %broadcast.10161)
  %multiply.4893 = f32[2,8192,1]{2,1,0} multiply(%reshape.10577, %multiply.4892)
  %multiply.4894 = f32[2,8192,1]{2,1,0} multiply(%multiply.4893, %broadcast.10163)
  %reshape.10578 = f32[2,8192]{1,0} reshape(%multiply.4894)
  %broadcast.11286 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10578), dimensions={0,1}
  %multiply.4895 = f32[2,8192,4096]{2,1,0} multiply(%convert.2110, %broadcast.11286)
  %add.3837 = f32[2,8192,4096]{2,1,0} add(%multiply.4890, %multiply.4895)
  %convert.2112 = bf16[2,8192,4096]{2,1,0} convert(%add.3837)
  %add.3838 = bf16[2,8192,4096]{2,1,0} add(%add.3803, %convert.2112)
  %copy.1789 = bf16[2,8192,4096]{2,1,0} copy(%add.3838)
  %tuple.113 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.147, %reduce-precision.148, %reduce-precision.149, %get-tuple-element.231, %get-tuple-element.232, /*index=5*/%reduce-precision.150, %reduce-precision.151, %reduce-precision.152, %reduce-precision.153, %constant.5507, /*index=10*/%constant.5507, %param.202, %param.203, %param.204, %param.201, /*index=15*/%param.196, %param.198, %param.200, %param.197, %param.199, /*index=20*/%copy.1463, %param.10, %param.7, %copy.1789)
  %opt-barrier.10 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.113)
  %get-tuple-element.586 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.10), index=23
  %copy.1790 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.586)
  %get-tuple-element.587 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.10), index=7
  %negate.893 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.587)
  %exponential.169 = bf16[2,8192,14336]{2,1,0} exponential(%negate.893)
  %add.3839 = bf16[2,8192,14336]{2,1,0} add(%exponential.169, %broadcast.7215)
  %divide.862 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3839)
  %multiply.4896 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.587, %divide.862)
  %copy.1791 = bf16[2,8192,4096]{2,1,0} copy(%copy.1790)
  %get-tuple-element.588 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.10), index=13
  %convert.2113 = bf16[14336,256]{1,0} convert(%get-tuple-element.588)
  %all-gather.296 = bf16[14336,4096]{1,0} all-gather(%convert.2113), channel_id=299, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.395 = bf16[2,8192,14336]{2,1,0} dot(%copy.1791, %all-gather.296), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1792 = bf16[2,8192,14336]{2,1,0} copy(%dot.395)
  %multiply.4897 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4896, %copy.1792)
  %get-tuple-element.589 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.10), index=12
  %convert.2114 = bf16[256,14336]{1,0} convert(%get-tuple-element.589)
  %all-gather.297 = bf16[4096,14336]{1,0} all-gather(%convert.2114), channel_id=300, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.396 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4897, %all-gather.297), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.590 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.10), index=8
  %multiply.4898 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1792, %get-tuple-element.590)
  %multiply.4899 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4898, %divide.862)
  %multiply.4900 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.587, %multiply.4898)
  %subtract.245 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.862)
  %multiply.4901 = bf16[2,8192,14336]{2,1,0} multiply(%divide.862, %subtract.245)
  %multiply.4902 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4900, %multiply.4901)
  %add.3840 = bf16[2,8192,14336]{2,1,0} add(%multiply.4899, %multiply.4902)
  %get-tuple-element.591 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.10), index=11
  %convert.2115 = bf16[256,14336]{1,0} convert(%get-tuple-element.591)
  %all-gather.298 = bf16[4096,14336]{1,0} all-gather(%convert.2115), channel_id=301, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.397 = bf16[2,8192,4096]{2,1,0} dot(%add.3840, %all-gather.298), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3841 = bf16[2,8192,4096]{2,1,0} add(%dot.396, %dot.397)
  %copy.1793 = bf16[2,8192,4096]{2,1,0} copy(%add.3841)
  %get-tuple-element.592 = f32[4096]{0} get-tuple-element(%opt-barrier.10), index=14
  %convert.2116 = bf16[4096]{0} convert(%get-tuple-element.592)
  %broadcast.11288 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2116), dimensions={2}
  %multiply.4903 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1793, %broadcast.11288)
  %convert.2117 = f32[2,8192,4096]{2,1,0} convert(%multiply.4903)
  %get-tuple-element.593 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.10), index=20
  %copy.1794 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.593)
  %get-tuple-element.594 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.10), index=6
  %copy.1795 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.594)
  %add.3842 = bf16[2,8192,4096]{2,1,0} add(%copy.1794, %copy.1795)
  %convert.2119 = f32[2,8192,4096]{2,1,0} convert(%add.3842)
  %multiply.4904 = f32[2,8192,4096]{2,1,0} multiply(%convert.2119, %convert.2119)
  %reduce.365 = f32[2,8192]{1,0} reduce(%multiply.4904, %constant.5451), dimensions={2}, to_apply=%region_304.15456
  %multiply.4906 = f32[2,8192]{1,0} multiply(%reduce.365, %broadcast.7109)
  %add.3843 = f32[2,8192]{1,0} add(%multiply.4906, %broadcast.7110)
  %reshape.10579 = f32[2,8192,1]{2,1,0} reshape(%add.3843)
  %rsqrt.149 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10579)
  %reshape.10580 = f32[2,8192]{1,0} reshape(%rsqrt.149)
  %broadcast.11291 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10580), dimensions={0,1}
  %multiply.4907 = f32[2,8192,4096]{2,1,0} multiply(%convert.2117, %broadcast.11291)
  %multiply.4908 = f32[2,8192,4096]{2,1,0} multiply(%convert.2119, %convert.2117)
  %reduce.366 = f32[2,8192]{1,0} reduce(%multiply.4908, %constant.5451), dimensions={2}, to_apply=%region_307.15527
  %reshape.10581 = f32[2,8192,1]{2,1,0} reshape(%reduce.366)
  %divide.863 = f32[2,8192,1]{2,1,0} divide(%rsqrt.149, %reshape.10579)
  %multiply.4909 = f32[2,8192,1]{2,1,0} multiply(%divide.863, %broadcast.10161)
  %multiply.4911 = f32[2,8192,1]{2,1,0} multiply(%reshape.10581, %multiply.4909)
  %multiply.4912 = f32[2,8192,1]{2,1,0} multiply(%multiply.4911, %broadcast.10163)
  %reshape.10582 = f32[2,8192]{1,0} reshape(%multiply.4912)
  %broadcast.11293 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10582), dimensions={0,1}
  %multiply.4913 = f32[2,8192,4096]{2,1,0} multiply(%convert.2119, %broadcast.11293)
  %add.3844 = f32[2,8192,4096]{2,1,0} add(%multiply.4907, %multiply.4913)
  %convert.2120 = bf16[2,8192,4096]{2,1,0} convert(%add.3844)
  %add.3845 = bf16[2,8192,4096]{2,1,0} add(%copy.1790, %convert.2120)
  %get-tuple-element.595 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.10), index=0
  %convert.2121 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.595)
  %get-tuple-element.596 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.10), index=22
  %convert.2122 = f32[2,8192]{1,0} convert(%get-tuple-element.596)
  %broadcast.11295 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2122), dimensions={0,1}
  %divide.865 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.11295, %broadcast.7129)
  %cosine.85 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.865)
  %reshape.10584 = f32[2,8192,128]{2,1,0} reshape(%cosine.85)
  %broadcast.11307 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10584), dimensions={0,1,3}
  %multiply.4925 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2121, %broadcast.11307)
  %slice.458 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.595), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.459 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.595), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.168 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.458, %slice.459), dimensions={3}
  %slice.460 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.595), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.461 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.595), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.169 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.460, %slice.461), dimensions={3}
  %select.2385 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.168, %concatenate.169)
  %convert.2126 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2385)
  %sine.84 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.865)
  %reshape.10589 = f32[2,8192,128]{2,1,0} reshape(%sine.84)
  %broadcast.11313 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10589), dimensions={0,1,3}
  %multiply.4930 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2126, %broadcast.11313)
  %get-tuple-element.597 = s32[2]{0} get-tuple-element(%opt-barrier.10), index=9
  %broadcast.11314 = s32[64,2]{1,0} broadcast(%get-tuple-element.597), dimensions={1}
  %reshape.10590 = s32[128]{0} reshape(%broadcast.11314)
  %convert.2127 = f32[128]{0} convert(%reshape.10590)
  %broadcast.11315 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2127), dimensions={3}
  %multiply.4931 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4930, %broadcast.11315)
  %add.3849 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.4925, %multiply.4931)
  %convert.2128 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3849)
  %copy.1796 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2128)
  %get-tuple-element.598 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.10), index=1
  %convert.2129 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.598)
  %broadcast.11327 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10584), dimensions={0,1,3}
  %multiply.4942 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2129, %broadcast.11327)
  %slice.462 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.598), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.463 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.598), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.170 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.462, %slice.463), dimensions={3}
  %slice.464 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.598), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.465 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.598), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.171 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.464, %slice.465), dimensions={3}
  %select.2389 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.170, %concatenate.171)
  %convert.2134 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2389)
  %broadcast.11334 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10589), dimensions={0,1,3}
  %multiply.4947 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2134, %broadcast.11334)
  %get-tuple-element.599 = s32[2]{0} get-tuple-element(%opt-barrier.10), index=10
  %broadcast.11335 = s32[64,2]{1,0} broadcast(%get-tuple-element.599), dimensions={1}
  %reshape.10600 = s32[128]{0} reshape(%broadcast.11335)
  %convert.2135 = f32[128]{0} convert(%reshape.10600)
  %broadcast.11336 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2135), dimensions={3}
  %multiply.4948 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4947, %broadcast.11336)
  %add.3853 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.4942, %multiply.4948)
  %convert.2136 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3853)
  %copy.1797 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2136)
  %get-tuple-element.600 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.10), index=2
  %copy.1798 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.600)
  %get-tuple-element.601 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.10), index=3
  %get-tuple-element.602 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.10), index=4
  %get-tuple-element.603 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.10), index=5
  %copy.1799 = bf16[2,8192,4096]{2,1,0} copy(%add.3845)
  %get-tuple-element.604 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.10), index=17
  %convert.2137 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.604)
  %all-gather.299 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2137), channel_id=302, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.398 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1799, %all-gather.299), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1800 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.398)
  %get-tuple-element.605 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.10), index=21
  %broadcast.11337 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.605), dimensions={0,1}
  %broadcast.11338 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.605), dimensions={0,2}
  %compare.3781 = pred[2,8192,8192]{2,1,0} compare(%broadcast.11337, %broadcast.11338), direction=EQ
  %and.828 = pred[2,8192,8192]{2,1,0} and(%compare.3781, %broadcast.7176)
  %select.2390 = f32[2,8192,8192]{2,1,0} select(%and.828, %broadcast.7177, %broadcast.7179)
  %compare.3783 = pred[2,8192,8192]{2,1,0} compare(%select.2390, %broadcast.7177), direction=NE
  %not.106 = pred[2,8192,8192]{2,1,0} not(%compare.3783)
  %convert.2138 = s32[2,8192,8192]{2,1,0} convert(%not.106)
  %reduce.367 = s32[2,8192]{1,0} reduce(%convert.2138, %constant.5439), dimensions={1}, to_apply=%region_301.15431
  %reshape.10601 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.367)
  %slice.466 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10601), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10603 = s32[2,1]{1,0} reshape(%slice.466)
  %reshape.10614 = s32[2]{0} reshape(%reshape.10603)
  %compare.3796 = pred[2]{0} compare(%reshape.10614, %broadcast.7184), direction=LT
  %reduce-window.254 = s32[2]{0} reduce-window(%reshape.10614, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.10
  %select.2400 = s32[2]{0} select(%compare.3796, %broadcast.7199, %reduce-window.254)
  %scatter.424 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2400), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.10
  %reduce.368 = s32[2,8192]{1,0} reduce(%convert.2138, %constant.5439), dimensions={2}, to_apply=%region_302.15439
  %reshape.10604 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.368)
  %reduce.369 = s32[2,1]{1,0} reduce(%reshape.10604, %constant.5570), dimensions={3,2}, to_apply=%region_303.15444
  %reshape.10622 = s32[2]{0} reshape(%reduce.369)
  %compare.3809 = pred[2]{0} compare(%reshape.10622, %broadcast.7184), direction=LT
  %reduce-window.257 = s32[2]{0} reduce-window(%reshape.10622, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.10.clone
  %select.2410 = s32[2]{0} select(%compare.3809, %broadcast.7199, %reduce-window.257)
  %scatter.429 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2410), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.10
  %custom-call.40 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1796, %copy.1797, %copy.1798, %constant.5555, %get-tuple-element.601, /*index=5*/%get-tuple-element.602, %get-tuple-element.603, %copy.1800, %scatter.424, %scatter.429, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.612 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.40), index=2
  %copy.1801 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.612)
  %get-tuple-element.613 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.10), index=19
  %convert.2142 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.613)
  %all-gather.300 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2142), channel_id=303, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.399 = bf16[2,8192,4096]{2,1,0} dot(%copy.1801, %all-gather.300), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.614 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.40), index=1
  %copy.1802 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.614)
  %convert.2143 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1802)
  %multiply.4950 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2143, %broadcast.11327)
  %convert.2144 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4950)
  %multiply.4951 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2143, %broadcast.11336)
  %multiply.4952 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.4951, %broadcast.11334)
  %convert.2146 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.4952)
  %select.2411 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2146, %broadcast.10254)
  %slice.467 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2411), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.80 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.467, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3869 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2144, %pad.80)
  %slice.468 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2411), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.81 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.468, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3870 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3869, %pad.81)
  %select.2412 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2146, %broadcast.10254)
  %slice.469 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2412), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.82 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.469, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3871 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3870, %pad.82)
  %slice.470 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2412), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.83 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.470, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3872 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3871, %pad.83)
  %get-tuple-element.615 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.10), index=16
  %convert.2147 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.615)
  %all-gather.301 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2147), channel_id=304, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.400 = bf16[2,8192,4096]{2,1,0} dot(%add.3872, %all-gather.301), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3873 = bf16[2,8192,4096]{2,1,0} add(%dot.399, %dot.400)
  %copy.1803 = bf16[2,8192,4096]{2,1,0} copy(%add.3873)
  %get-tuple-element.616 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.40), index=0
  %copy.1804 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.616)
  %convert.2148 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1804)
  %multiply.4961 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2148, %broadcast.11307)
  %convert.2149 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4961)
  %multiply.4962 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2148, %broadcast.11315)
  %multiply.4963 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.4962, %broadcast.11313)
  %convert.2150 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.4963)
  %select.2413 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2150, %broadcast.10265)
  %slice.471 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2413), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.84 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.471, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3874 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2149, %pad.84)
  %slice.472 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2413), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.85 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.472, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3875 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3874, %pad.85)
  %select.2414 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2150, %broadcast.10265)
  %slice.473 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2414), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.86 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.473, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3876 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3875, %pad.86)
  %slice.474 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2414), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.87 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.474, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3877 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3876, %pad.87)
  %get-tuple-element.617 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.10), index=18
  %convert.2151 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.617)
  %all-gather.302 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2151), channel_id=305, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.401 = bf16[2,8192,4096]{2,1,0} dot(%add.3877, %all-gather.302), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1805 = bf16[2,8192,4096]{2,1,0} copy(%dot.401)
  %add.3878 = bf16[2,8192,4096]{2,1,0} add(%copy.1803, %copy.1805)
  %copy.1806 = bf16[2,8192,4096]{2,1,0} copy(%add.3878)
  %get-tuple-element.618 = f32[4096]{0} get-tuple-element(%opt-barrier.10), index=15
  %convert.2152 = bf16[4096]{0} convert(%get-tuple-element.618)
  %broadcast.11398 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2152), dimensions={2}
  %multiply.4972 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1806, %broadcast.11398)
  %convert.2154 = f32[2,8192,4096]{2,1,0} convert(%multiply.4972)
  %convert.2155 = f32[2,8192,4096]{2,1,0} convert(%copy.1794)
  %multiply.4973 = f32[2,8192,4096]{2,1,0} multiply(%convert.2155, %convert.2155)
  %reduce.370 = f32[2,8192]{1,0} reduce(%multiply.4973, %constant.5451), dimensions={2}, to_apply=%region_300.15222
  %multiply.4974 = f32[2,8192]{1,0} multiply(%reduce.370, %broadcast.7109)
  %add.3879 = f32[2,8192]{1,0} add(%multiply.4974, %broadcast.7110)
  %reshape.10644 = f32[2,8192,1]{2,1,0} reshape(%add.3879)
  %rsqrt.150 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10644)
  %reshape.10645 = f32[2,8192]{1,0} reshape(%rsqrt.150)
  %broadcast.11402 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10645), dimensions={0,1}
  %multiply.4975 = f32[2,8192,4096]{2,1,0} multiply(%convert.2154, %broadcast.11402)
  %multiply.4977 = f32[2,8192,4096]{2,1,0} multiply(%convert.2155, %convert.2154)
  %reduce.371 = f32[2,8192]{1,0} reduce(%multiply.4977, %constant.5451), dimensions={2}, to_apply=%region_311.15661
  %reshape.10647 = f32[2,8192,1]{2,1,0} reshape(%reduce.371)
  %divide.870 = f32[2,8192,1]{2,1,0} divide(%rsqrt.150, %reshape.10644)
  %multiply.4978 = f32[2,8192,1]{2,1,0} multiply(%divide.870, %broadcast.10161)
  %multiply.4979 = f32[2,8192,1]{2,1,0} multiply(%reshape.10647, %multiply.4978)
  %multiply.4980 = f32[2,8192,1]{2,1,0} multiply(%multiply.4979, %broadcast.10163)
  %reshape.10648 = f32[2,8192]{1,0} reshape(%multiply.4980)
  %broadcast.11404 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10648), dimensions={0,1}
  %multiply.4981 = f32[2,8192,4096]{2,1,0} multiply(%convert.2155, %broadcast.11404)
  %add.3880 = f32[2,8192,4096]{2,1,0} add(%multiply.4975, %multiply.4981)
  %convert.2156 = bf16[2,8192,4096]{2,1,0} convert(%add.3880)
  %add.3881 = bf16[2,8192,4096]{2,1,0} add(%add.3845, %convert.2156)
  %copy.1807 = bf16[2,8192,4096]{2,1,0} copy(%add.3881)
  %tuple.115 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.140, %reduce-precision.141, %reduce-precision.142, %get-tuple-element.229, %get-tuple-element.230, /*index=5*/%reduce-precision.143, %reduce-precision.144, %reduce-precision.145, %reduce-precision.146, %constant.5507, /*index=10*/%constant.5507, %param.193, %param.194, %param.195, %param.192, /*index=15*/%param.187, %param.189, %param.191, %param.188, %param.190, /*index=20*/%copy.1450, %param.10, %param.7, %copy.1807)
  %opt-barrier.11 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.115)
  %get-tuple-element.619 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.11), index=23
  %copy.1808 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.619)
  %get-tuple-element.620 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.11), index=7
  %negate.896 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.620)
  %exponential.170 = bf16[2,8192,14336]{2,1,0} exponential(%negate.896)
  %add.3882 = bf16[2,8192,14336]{2,1,0} add(%exponential.170, %broadcast.7215)
  %divide.871 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3882)
  %multiply.4982 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.620, %divide.871)
  %copy.1809 = bf16[2,8192,4096]{2,1,0} copy(%copy.1808)
  %get-tuple-element.621 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.11), index=13
  %convert.2157 = bf16[14336,256]{1,0} convert(%get-tuple-element.621)
  %all-gather.303 = bf16[14336,4096]{1,0} all-gather(%convert.2157), channel_id=306, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.402 = bf16[2,8192,14336]{2,1,0} dot(%copy.1809, %all-gather.303), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1810 = bf16[2,8192,14336]{2,1,0} copy(%dot.402)
  %multiply.4983 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4982, %copy.1810)
  %get-tuple-element.622 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.11), index=12
  %convert.2158 = bf16[256,14336]{1,0} convert(%get-tuple-element.622)
  %all-gather.304 = bf16[4096,14336]{1,0} all-gather(%convert.2158), channel_id=307, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.403 = bf16[2,8192,4096]{2,1,0} dot(%multiply.4983, %all-gather.304), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.623 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.11), index=8
  %multiply.4984 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1810, %get-tuple-element.623)
  %multiply.4985 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4984, %divide.871)
  %multiply.4986 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.620, %multiply.4984)
  %subtract.250 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.871)
  %multiply.4987 = bf16[2,8192,14336]{2,1,0} multiply(%divide.871, %subtract.250)
  %multiply.4988 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4986, %multiply.4987)
  %add.3883 = bf16[2,8192,14336]{2,1,0} add(%multiply.4985, %multiply.4988)
  %get-tuple-element.624 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.11), index=11
  %convert.2159 = bf16[256,14336]{1,0} convert(%get-tuple-element.624)
  %all-gather.305 = bf16[4096,14336]{1,0} all-gather(%convert.2159), channel_id=308, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.404 = bf16[2,8192,4096]{2,1,0} dot(%add.3883, %all-gather.305), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3884 = bf16[2,8192,4096]{2,1,0} add(%dot.403, %dot.404)
  %copy.1811 = bf16[2,8192,4096]{2,1,0} copy(%add.3884)
  %get-tuple-element.625 = f32[4096]{0} get-tuple-element(%opt-barrier.11), index=14
  %convert.2160 = bf16[4096]{0} convert(%get-tuple-element.625)
  %broadcast.11406 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2160), dimensions={2}
  %multiply.4990 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1811, %broadcast.11406)
  %convert.2161 = f32[2,8192,4096]{2,1,0} convert(%multiply.4990)
  %get-tuple-element.626 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.11), index=20
  %copy.1812 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.626)
  %get-tuple-element.627 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.11), index=6
  %copy.1813 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.627)
  %add.3885 = bf16[2,8192,4096]{2,1,0} add(%copy.1812, %copy.1813)
  %convert.2162 = f32[2,8192,4096]{2,1,0} convert(%add.3885)
  %multiply.4991 = f32[2,8192,4096]{2,1,0} multiply(%convert.2162, %convert.2162)
  %reduce.372 = f32[2,8192]{1,0} reduce(%multiply.4991, %constant.5451), dimensions={2}, to_apply=%region_317.15948
  %multiply.4992 = f32[2,8192]{1,0} multiply(%reduce.372, %broadcast.7109)
  %add.3886 = f32[2,8192]{1,0} add(%multiply.4992, %broadcast.7110)
  %reshape.10649 = f32[2,8192,1]{2,1,0} reshape(%add.3886)
  %rsqrt.151 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10649)
  %reshape.10650 = f32[2,8192]{1,0} reshape(%rsqrt.151)
  %broadcast.11410 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10650), dimensions={0,1}
  %multiply.4993 = f32[2,8192,4096]{2,1,0} multiply(%convert.2161, %broadcast.11410)
  %multiply.4994 = f32[2,8192,4096]{2,1,0} multiply(%convert.2162, %convert.2161)
  %reduce.373 = f32[2,8192]{1,0} reduce(%multiply.4994, %constant.5451), dimensions={2}, to_apply=%region_320.16019
  %reshape.10652 = f32[2,8192,1]{2,1,0} reshape(%reduce.373)
  %divide.872 = f32[2,8192,1]{2,1,0} divide(%rsqrt.151, %reshape.10649)
  %multiply.4995 = f32[2,8192,1]{2,1,0} multiply(%divide.872, %broadcast.10161)
  %multiply.4997 = f32[2,8192,1]{2,1,0} multiply(%reshape.10652, %multiply.4995)
  %multiply.4998 = f32[2,8192,1]{2,1,0} multiply(%multiply.4997, %broadcast.10163)
  %reshape.10653 = f32[2,8192]{1,0} reshape(%multiply.4998)
  %broadcast.11412 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10653), dimensions={0,1}
  %multiply.4999 = f32[2,8192,4096]{2,1,0} multiply(%convert.2162, %broadcast.11412)
  %add.3887 = f32[2,8192,4096]{2,1,0} add(%multiply.4993, %multiply.4999)
  %convert.2163 = bf16[2,8192,4096]{2,1,0} convert(%add.3887)
  %add.3888 = bf16[2,8192,4096]{2,1,0} add(%copy.1808, %convert.2163)
  %get-tuple-element.628 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.11), index=0
  %convert.2164 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.628)
  %get-tuple-element.629 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.11), index=22
  %convert.2165 = f32[2,8192]{1,0} convert(%get-tuple-element.629)
  %broadcast.11413 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2165), dimensions={0,1}
  %divide.874 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.11413, %broadcast.7129)
  %cosine.87 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.874)
  %reshape.10655 = f32[2,8192,128]{2,1,0} reshape(%cosine.87)
  %broadcast.11422 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10655), dimensions={0,1,3}
  %multiply.5011 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2164, %broadcast.11422)
  %slice.475 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.628), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.476 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.628), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.172 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.475, %slice.476), dimensions={3}
  %slice.477 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.628), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.478 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.628), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.173 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.477, %slice.478), dimensions={3}
  %select.2418 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.172, %concatenate.173)
  %convert.2169 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2418)
  %sine.86 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.874)
  %reshape.10660 = f32[2,8192,128]{2,1,0} reshape(%sine.86)
  %broadcast.11428 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10660), dimensions={0,1,3}
  %multiply.5017 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2169, %broadcast.11428)
  %get-tuple-element.630 = s32[2]{0} get-tuple-element(%opt-barrier.11), index=9
  %broadcast.11429 = s32[64,2]{1,0} broadcast(%get-tuple-element.630), dimensions={1}
  %reshape.10661 = s32[128]{0} reshape(%broadcast.11429)
  %convert.2171 = f32[128]{0} convert(%reshape.10661)
  %broadcast.11430 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2171), dimensions={3}
  %multiply.5018 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5017, %broadcast.11430)
  %add.3893 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5011, %multiply.5018)
  %convert.2172 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3893)
  %copy.1814 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2172)
  %get-tuple-element.631 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.11), index=1
  %convert.2173 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.631)
  %broadcast.11446 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10655), dimensions={0,1,3}
  %multiply.5030 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2173, %broadcast.11446)
  %slice.479 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.631), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.480 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.631), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.174 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.479, %slice.480), dimensions={3}
  %slice.481 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.631), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.482 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.631), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.175 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.481, %slice.482), dimensions={3}
  %select.2422 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.174, %concatenate.175)
  %convert.2179 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2422)
  %broadcast.11456 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10660), dimensions={0,1,3}
  %multiply.5036 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2179, %broadcast.11456)
  %get-tuple-element.632 = s32[2]{0} get-tuple-element(%opt-barrier.11), index=10
  %broadcast.11457 = s32[64,2]{1,0} broadcast(%get-tuple-element.632), dimensions={1}
  %reshape.10669 = s32[128]{0} reshape(%broadcast.11457)
  %convert.2180 = f32[128]{0} convert(%reshape.10669)
  %broadcast.11458 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2180), dimensions={3}
  %multiply.5037 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5036, %broadcast.11458)
  %add.3898 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5030, %multiply.5037)
  %convert.2181 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3898)
  %copy.1815 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2181)
  %get-tuple-element.633 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.11), index=2
  %copy.1816 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.633)
  %get-tuple-element.634 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.11), index=3
  %get-tuple-element.635 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.11), index=4
  %get-tuple-element.636 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.11), index=5
  %copy.1817 = bf16[2,8192,4096]{2,1,0} copy(%add.3888)
  %get-tuple-element.637 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.11), index=17
  %convert.2182 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.637)
  %all-gather.306 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2182), channel_id=309, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.405 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1817, %all-gather.306), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1818 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.405)
  %get-tuple-element.638 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.11), index=21
  %broadcast.11460 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.638), dimensions={0,1}
  %broadcast.11462 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.638), dimensions={0,2}
  %compare.3831 = pred[2,8192,8192]{2,1,0} compare(%broadcast.11460, %broadcast.11462), direction=EQ
  %and.837 = pred[2,8192,8192]{2,1,0} and(%compare.3831, %broadcast.7176)
  %select.2423 = f32[2,8192,8192]{2,1,0} select(%and.837, %broadcast.7177, %broadcast.7179)
  %compare.3833 = pred[2,8192,8192]{2,1,0} compare(%select.2423, %broadcast.7177), direction=NE
  %not.107 = pred[2,8192,8192]{2,1,0} not(%compare.3833)
  %convert.2183 = s32[2,8192,8192]{2,1,0} convert(%not.107)
  %reduce.374 = s32[2,8192]{1,0} reduce(%convert.2183, %constant.5439), dimensions={1}, to_apply=%region_314.15923
  %reshape.10670 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.374)
  %slice.483 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10670), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10672 = s32[2,1]{1,0} reshape(%slice.483)
  %reshape.10684 = s32[2]{0} reshape(%reshape.10672)
  %compare.3846 = pred[2]{0} compare(%reshape.10684, %broadcast.7184), direction=LT
  %reduce-window.260 = s32[2]{0} reduce-window(%reshape.10684, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.11
  %select.2433 = s32[2]{0} select(%compare.3846, %broadcast.7199, %reduce-window.260)
  %scatter.434 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2433), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.11
  %reduce.375 = s32[2,8192]{1,0} reduce(%convert.2183, %constant.5439), dimensions={2}, to_apply=%region_315.15931
  %reshape.10674 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.375)
  %reduce.376 = s32[2,1]{1,0} reduce(%reshape.10674, %constant.5570), dimensions={3,2}, to_apply=%region_316.15936
  %reshape.10692 = s32[2]{0} reshape(%reduce.376)
  %compare.3859 = pred[2]{0} compare(%reshape.10692, %broadcast.7184), direction=LT
  %reduce-window.263 = s32[2]{0} reduce-window(%reshape.10692, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.11.clone
  %select.2443 = s32[2]{0} select(%compare.3859, %broadcast.7199, %reduce-window.263)
  %scatter.439 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2443), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.11
  %custom-call.41 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1814, %copy.1815, %copy.1816, %constant.5555, %get-tuple-element.634, /*index=5*/%get-tuple-element.635, %get-tuple-element.636, %copy.1818, %scatter.434, %scatter.439, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.645 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.41), index=2
  %copy.1819 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.645)
  %get-tuple-element.646 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.11), index=19
  %convert.2187 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.646)
  %all-gather.307 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2187), channel_id=310, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.406 = bf16[2,8192,4096]{2,1,0} dot(%copy.1819, %all-gather.307), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.647 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.41), index=1
  %copy.1820 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.647)
  %convert.2188 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1820)
  %multiply.5039 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2188, %broadcast.11446)
  %convert.2189 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5039)
  %multiply.5040 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2188, %broadcast.11458)
  %multiply.5041 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5040, %broadcast.11456)
  %convert.2192 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5041)
  %select.2444 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2192, %broadcast.10254)
  %slice.484 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2444), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.88 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.484, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3912 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2189, %pad.88)
  %slice.485 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2444), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.89 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.485, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3913 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3912, %pad.89)
  %select.2445 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2192, %broadcast.10254)
  %slice.486 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2445), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.90 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.486, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3914 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3913, %pad.90)
  %slice.487 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2445), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.91 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.487, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3915 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3914, %pad.91)
  %get-tuple-element.648 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.11), index=16
  %convert.2193 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.648)
  %all-gather.308 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2193), channel_id=311, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.407 = bf16[2,8192,4096]{2,1,0} dot(%add.3915, %all-gather.308), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3916 = bf16[2,8192,4096]{2,1,0} add(%dot.406, %dot.407)
  %copy.1821 = bf16[2,8192,4096]{2,1,0} copy(%add.3916)
  %get-tuple-element.649 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.41), index=0
  %copy.1822 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.649)
  %convert.2194 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1822)
  %multiply.5050 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2194, %broadcast.11422)
  %convert.2195 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5050)
  %multiply.5051 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2194, %broadcast.11430)
  %multiply.5052 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5051, %broadcast.11428)
  %convert.2196 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5052)
  %select.2446 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2196, %broadcast.10265)
  %slice.488 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2446), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.92 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.488, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3917 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2195, %pad.92)
  %slice.489 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2446), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.93 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.489, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3918 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3917, %pad.93)
  %select.2447 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2196, %broadcast.10265)
  %slice.490 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2447), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.94 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.490, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3919 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3918, %pad.94)
  %slice.491 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2447), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.95 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.491, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3920 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3919, %pad.95)
  %get-tuple-element.650 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.11), index=18
  %convert.2197 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.650)
  %all-gather.309 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2197), channel_id=312, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.408 = bf16[2,8192,4096]{2,1,0} dot(%add.3920, %all-gather.309), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1823 = bf16[2,8192,4096]{2,1,0} copy(%dot.408)
  %add.3921 = bf16[2,8192,4096]{2,1,0} add(%copy.1821, %copy.1823)
  %copy.1824 = bf16[2,8192,4096]{2,1,0} copy(%add.3921)
  %get-tuple-element.651 = f32[4096]{0} get-tuple-element(%opt-barrier.11), index=15
  %convert.2199 = bf16[4096]{0} convert(%get-tuple-element.651)
  %broadcast.11517 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2199), dimensions={2}
  %multiply.5061 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1824, %broadcast.11517)
  %convert.2200 = f32[2,8192,4096]{2,1,0} convert(%multiply.5061)
  %convert.2201 = f32[2,8192,4096]{2,1,0} convert(%copy.1812)
  %multiply.5062 = f32[2,8192,4096]{2,1,0} multiply(%convert.2201, %convert.2201)
  %reduce.377 = f32[2,8192]{1,0} reduce(%multiply.5062, %constant.5451), dimensions={2}, to_apply=%region_313.15714
  %multiply.5063 = f32[2,8192]{1,0} multiply(%reduce.377, %broadcast.7109)
  %add.3922 = f32[2,8192]{1,0} add(%multiply.5063, %broadcast.7110)
  %reshape.10713 = f32[2,8192,1]{2,1,0} reshape(%add.3922)
  %rsqrt.152 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10713)
  %reshape.10714 = f32[2,8192]{1,0} reshape(%rsqrt.152)
  %broadcast.11520 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10714), dimensions={0,1}
  %multiply.5065 = f32[2,8192,4096]{2,1,0} multiply(%convert.2200, %broadcast.11520)
  %multiply.5066 = f32[2,8192,4096]{2,1,0} multiply(%convert.2201, %convert.2200)
  %reduce.378 = f32[2,8192]{1,0} reduce(%multiply.5066, %constant.5451), dimensions={2}, to_apply=%region_324.16153
  %reshape.10715 = f32[2,8192,1]{2,1,0} reshape(%reduce.378)
  %divide.879 = f32[2,8192,1]{2,1,0} divide(%rsqrt.152, %reshape.10713)
  %multiply.5067 = f32[2,8192,1]{2,1,0} multiply(%divide.879, %broadcast.10161)
  %multiply.5068 = f32[2,8192,1]{2,1,0} multiply(%reshape.10715, %multiply.5067)
  %multiply.5069 = f32[2,8192,1]{2,1,0} multiply(%multiply.5068, %broadcast.10163)
  %reshape.10716 = f32[2,8192]{1,0} reshape(%multiply.5069)
  %broadcast.11522 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10716), dimensions={0,1}
  %multiply.5070 = f32[2,8192,4096]{2,1,0} multiply(%convert.2201, %broadcast.11522)
  %add.3923 = f32[2,8192,4096]{2,1,0} add(%multiply.5065, %multiply.5070)
  %convert.2203 = bf16[2,8192,4096]{2,1,0} convert(%add.3923)
  %add.3924 = bf16[2,8192,4096]{2,1,0} add(%add.3888, %convert.2203)
  %copy.1825 = bf16[2,8192,4096]{2,1,0} copy(%add.3924)
  %tuple.117 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.133, %reduce-precision.134, %reduce-precision.135, %get-tuple-element.227, %get-tuple-element.228, /*index=5*/%reduce-precision.136, %reduce-precision.137, %reduce-precision.138, %reduce-precision.139, %constant.5507, /*index=10*/%constant.5507, %param.184, %param.185, %param.186, %param.183, /*index=15*/%param.178, %param.180, %param.182, %param.179, %param.181, /*index=20*/%copy.1437, %param.10, %param.7, %copy.1825)
  %opt-barrier.12 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.117)
  %get-tuple-element.652 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.12), index=23
  %copy.1826 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.652)
  %get-tuple-element.653 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.12), index=7
  %negate.899 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.653)
  %exponential.171 = bf16[2,8192,14336]{2,1,0} exponential(%negate.899)
  %add.3925 = bf16[2,8192,14336]{2,1,0} add(%exponential.171, %broadcast.7215)
  %divide.880 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3925)
  %multiply.5071 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.653, %divide.880)
  %copy.1827 = bf16[2,8192,4096]{2,1,0} copy(%copy.1826)
  %get-tuple-element.654 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.12), index=13
  %convert.2204 = bf16[14336,256]{1,0} convert(%get-tuple-element.654)
  %all-gather.310 = bf16[14336,4096]{1,0} all-gather(%convert.2204), channel_id=313, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.409 = bf16[2,8192,14336]{2,1,0} dot(%copy.1827, %all-gather.310), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1828 = bf16[2,8192,14336]{2,1,0} copy(%dot.409)
  %multiply.5072 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5071, %copy.1828)
  %get-tuple-element.655 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.12), index=12
  %convert.2205 = bf16[256,14336]{1,0} convert(%get-tuple-element.655)
  %all-gather.311 = bf16[4096,14336]{1,0} all-gather(%convert.2205), channel_id=314, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.410 = bf16[2,8192,4096]{2,1,0} dot(%multiply.5072, %all-gather.311), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.656 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.12), index=8
  %multiply.5073 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1828, %get-tuple-element.656)
  %multiply.5074 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5073, %divide.880)
  %multiply.5075 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.653, %multiply.5073)
  %subtract.255 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.880)
  %multiply.5076 = bf16[2,8192,14336]{2,1,0} multiply(%divide.880, %subtract.255)
  %multiply.5077 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5075, %multiply.5076)
  %add.3926 = bf16[2,8192,14336]{2,1,0} add(%multiply.5074, %multiply.5077)
  %get-tuple-element.657 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.12), index=11
  %convert.2206 = bf16[256,14336]{1,0} convert(%get-tuple-element.657)
  %all-gather.312 = bf16[4096,14336]{1,0} all-gather(%convert.2206), channel_id=315, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.411 = bf16[2,8192,4096]{2,1,0} dot(%add.3926, %all-gather.312), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3927 = bf16[2,8192,4096]{2,1,0} add(%dot.410, %dot.411)
  %copy.1829 = bf16[2,8192,4096]{2,1,0} copy(%add.3927)
  %get-tuple-element.658 = f32[4096]{0} get-tuple-element(%opt-barrier.12), index=14
  %convert.2208 = bf16[4096]{0} convert(%get-tuple-element.658)
  %broadcast.11524 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2208), dimensions={2}
  %multiply.5078 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1829, %broadcast.11524)
  %convert.2209 = f32[2,8192,4096]{2,1,0} convert(%multiply.5078)
  %get-tuple-element.659 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.12), index=20
  %copy.1830 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.659)
  %get-tuple-element.660 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.12), index=6
  %copy.1831 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.660)
  %add.3928 = bf16[2,8192,4096]{2,1,0} add(%copy.1830, %copy.1831)
  %convert.2210 = f32[2,8192,4096]{2,1,0} convert(%add.3928)
  %multiply.5079 = f32[2,8192,4096]{2,1,0} multiply(%convert.2210, %convert.2210)
  %reduce.379 = f32[2,8192]{1,0} reduce(%multiply.5079, %constant.5451), dimensions={2}, to_apply=%region_330.16440
  %multiply.5081 = f32[2,8192]{1,0} multiply(%reduce.379, %broadcast.7109)
  %add.3929 = f32[2,8192]{1,0} add(%multiply.5081, %broadcast.7110)
  %reshape.10717 = f32[2,8192,1]{2,1,0} reshape(%add.3929)
  %rsqrt.153 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10717)
  %reshape.10718 = f32[2,8192]{1,0} reshape(%rsqrt.153)
  %broadcast.11527 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10718), dimensions={0,1}
  %multiply.5083 = f32[2,8192,4096]{2,1,0} multiply(%convert.2209, %broadcast.11527)
  %multiply.5084 = f32[2,8192,4096]{2,1,0} multiply(%convert.2210, %convert.2209)
  %reduce.380 = f32[2,8192]{1,0} reduce(%multiply.5084, %constant.5451), dimensions={2}, to_apply=%region_333.16511
  %reshape.10719 = f32[2,8192,1]{2,1,0} reshape(%reduce.380)
  %divide.881 = f32[2,8192,1]{2,1,0} divide(%rsqrt.153, %reshape.10717)
  %multiply.5085 = f32[2,8192,1]{2,1,0} multiply(%divide.881, %broadcast.10161)
  %multiply.5086 = f32[2,8192,1]{2,1,0} multiply(%reshape.10719, %multiply.5085)
  %multiply.5087 = f32[2,8192,1]{2,1,0} multiply(%multiply.5086, %broadcast.10163)
  %reshape.10720 = f32[2,8192]{1,0} reshape(%multiply.5087)
  %broadcast.11531 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10720), dimensions={0,1}
  %multiply.5088 = f32[2,8192,4096]{2,1,0} multiply(%convert.2210, %broadcast.11531)
  %add.3930 = f32[2,8192,4096]{2,1,0} add(%multiply.5083, %multiply.5088)
  %convert.2211 = bf16[2,8192,4096]{2,1,0} convert(%add.3930)
  %add.3931 = bf16[2,8192,4096]{2,1,0} add(%copy.1826, %convert.2211)
  %get-tuple-element.661 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.12), index=0
  %convert.2212 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.661)
  %get-tuple-element.662 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.12), index=22
  %convert.2214 = f32[2,8192]{1,0} convert(%get-tuple-element.662)
  %broadcast.11532 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2214), dimensions={0,1}
  %divide.883 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.11532, %broadcast.7129)
  %cosine.89 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.883)
  %reshape.10722 = f32[2,8192,128]{2,1,0} reshape(%cosine.89)
  %broadcast.11543 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10722), dimensions={0,1,3}
  %multiply.5099 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2212, %broadcast.11543)
  %slice.492 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.661), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.493 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.661), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.176 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.492, %slice.493), dimensions={3}
  %slice.494 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.661), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.495 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.661), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.177 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.494, %slice.495), dimensions={3}
  %select.2451 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.176, %concatenate.177)
  %convert.2218 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2451)
  %sine.88 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.883)
  %reshape.10729 = f32[2,8192,128]{2,1,0} reshape(%sine.88)
  %broadcast.11549 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10729), dimensions={0,1,3}
  %multiply.5104 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2218, %broadcast.11549)
  %get-tuple-element.663 = s32[2]{0} get-tuple-element(%opt-barrier.12), index=9
  %broadcast.11550 = s32[64,2]{1,0} broadcast(%get-tuple-element.663), dimensions={1}
  %reshape.10730 = s32[128]{0} reshape(%broadcast.11550)
  %convert.2219 = f32[128]{0} convert(%reshape.10730)
  %broadcast.11551 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2219), dimensions={3}
  %multiply.5105 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5104, %broadcast.11551)
  %add.3935 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5099, %multiply.5105)
  %convert.2220 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3935)
  %copy.1832 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2220)
  %get-tuple-element.664 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.12), index=1
  %convert.2221 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.664)
  %broadcast.11561 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10722), dimensions={0,1,3}
  %multiply.5118 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2221, %broadcast.11561)
  %slice.496 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.664), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.497 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.664), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.178 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.496, %slice.497), dimensions={3}
  %slice.498 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.664), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.499 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.664), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.179 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.498, %slice.499), dimensions={3}
  %select.2455 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.178, %concatenate.179)
  %convert.2226 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2455)
  %broadcast.11567 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10729), dimensions={0,1,3}
  %multiply.5124 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2226, %broadcast.11567)
  %get-tuple-element.665 = s32[2]{0} get-tuple-element(%opt-barrier.12), index=10
  %broadcast.11568 = s32[64,2]{1,0} broadcast(%get-tuple-element.665), dimensions={1}
  %reshape.10738 = s32[128]{0} reshape(%broadcast.11568)
  %convert.2227 = f32[128]{0} convert(%reshape.10738)
  %broadcast.11569 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2227), dimensions={3}
  %multiply.5125 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5124, %broadcast.11569)
  %add.3939 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5118, %multiply.5125)
  %convert.2230 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3939)
  %copy.1833 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2230)
  %get-tuple-element.666 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.12), index=2
  %copy.1834 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.666)
  %get-tuple-element.667 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.12), index=3
  %get-tuple-element.668 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.12), index=4
  %get-tuple-element.669 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.12), index=5
  %copy.1835 = bf16[2,8192,4096]{2,1,0} copy(%add.3931)
  %get-tuple-element.670 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.12), index=17
  %convert.2231 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.670)
  %all-gather.313 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2231), channel_id=316, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.412 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1835, %all-gather.313), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1836 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.412)
  %get-tuple-element.671 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.12), index=21
  %broadcast.11570 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.671), dimensions={0,1}
  %broadcast.11571 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.671), dimensions={0,2}
  %compare.3878 = pred[2,8192,8192]{2,1,0} compare(%broadcast.11570, %broadcast.11571), direction=EQ
  %and.846 = pred[2,8192,8192]{2,1,0} and(%compare.3878, %broadcast.7176)
  %select.2456 = f32[2,8192,8192]{2,1,0} select(%and.846, %broadcast.7177, %broadcast.7179)
  %compare.3880 = pred[2,8192,8192]{2,1,0} compare(%select.2456, %broadcast.7177), direction=NE
  %not.108 = pred[2,8192,8192]{2,1,0} not(%compare.3880)
  %convert.2232 = s32[2,8192,8192]{2,1,0} convert(%not.108)
  %reduce.381 = s32[2,8192]{1,0} reduce(%convert.2232, %constant.5439), dimensions={1}, to_apply=%region_327.16415
  %reshape.10739 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.381)
  %slice.500 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10739), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10741 = s32[2,1]{1,0} reshape(%slice.500)
  %reshape.10752 = s32[2]{0} reshape(%reshape.10741)
  %compare.3893 = pred[2]{0} compare(%reshape.10752, %broadcast.7184), direction=LT
  %reduce-window.266 = s32[2]{0} reduce-window(%reshape.10752, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.12
  %select.2466 = s32[2]{0} select(%compare.3893, %broadcast.7199, %reduce-window.266)
  %scatter.444 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2466), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.12
  %reduce.382 = s32[2,8192]{1,0} reduce(%convert.2232, %constant.5439), dimensions={2}, to_apply=%region_328.16423
  %reshape.10742 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.382)
  %reduce.383 = s32[2,1]{1,0} reduce(%reshape.10742, %constant.5570), dimensions={3,2}, to_apply=%region_329.16428
  %reshape.10760 = s32[2]{0} reshape(%reduce.383)
  %compare.3906 = pred[2]{0} compare(%reshape.10760, %broadcast.7184), direction=LT
  %reduce-window.269 = s32[2]{0} reduce-window(%reshape.10760, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.12.clone
  %select.2476 = s32[2]{0} select(%compare.3906, %broadcast.7199, %reduce-window.269)
  %scatter.449 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2476), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.12
  %custom-call.42 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1832, %copy.1833, %copy.1834, %constant.5555, %get-tuple-element.667, /*index=5*/%get-tuple-element.668, %get-tuple-element.669, %copy.1836, %scatter.444, %scatter.449, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.678 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.42), index=2
  %copy.1837 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.678)
  %get-tuple-element.679 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.12), index=19
  %convert.2236 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.679)
  %all-gather.314 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2236), channel_id=317, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.413 = bf16[2,8192,4096]{2,1,0} dot(%copy.1837, %all-gather.314), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.680 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.42), index=1
  %copy.1838 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.680)
  %convert.2237 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1838)
  %multiply.5127 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2237, %broadcast.11561)
  %convert.2239 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5127)
  %multiply.5128 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2237, %broadcast.11569)
  %multiply.5129 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5128, %broadcast.11567)
  %convert.2240 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5129)
  %select.2477 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2240, %broadcast.10254)
  %slice.501 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2477), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.96 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.501, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3952 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2239, %pad.96)
  %slice.502 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2477), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.97 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.502, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3953 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3952, %pad.97)
  %select.2478 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2240, %broadcast.10254)
  %slice.503 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2478), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.98 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.503, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3954 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3953, %pad.98)
  %slice.504 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2478), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.99 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.504, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3955 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3954, %pad.99)
  %get-tuple-element.681 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.12), index=16
  %convert.2242 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.681)
  %all-gather.315 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2242), channel_id=318, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.414 = bf16[2,8192,4096]{2,1,0} dot(%add.3955, %all-gather.315), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3956 = bf16[2,8192,4096]{2,1,0} add(%dot.413, %dot.414)
  %copy.1839 = bf16[2,8192,4096]{2,1,0} copy(%add.3956)
  %get-tuple-element.682 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.42), index=0
  %copy.1840 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.682)
  %convert.2243 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1840)
  %multiply.5138 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2243, %broadcast.11543)
  %convert.2245 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5138)
  %multiply.5139 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2243, %broadcast.11551)
  %multiply.5141 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5139, %broadcast.11549)
  %convert.2246 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5141)
  %select.2479 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2246, %broadcast.10265)
  %slice.505 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2479), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.100 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.505, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3957 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2245, %pad.100)
  %slice.506 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2479), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.101 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.506, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3958 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3957, %pad.101)
  %select.2480 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2246, %broadcast.10265)
  %slice.507 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2480), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.102 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.507, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3959 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3958, %pad.102)
  %slice.508 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2480), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.103 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.508, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3960 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3959, %pad.103)
  %get-tuple-element.683 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.12), index=18
  %convert.2247 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.683)
  %all-gather.316 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2247), channel_id=319, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.415 = bf16[2,8192,4096]{2,1,0} dot(%add.3960, %all-gather.316), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1841 = bf16[2,8192,4096]{2,1,0} copy(%dot.415)
  %add.3961 = bf16[2,8192,4096]{2,1,0} add(%copy.1839, %copy.1841)
  %copy.1842 = bf16[2,8192,4096]{2,1,0} copy(%add.3961)
  %get-tuple-element.684 = f32[4096]{0} get-tuple-element(%opt-barrier.12), index=15
  %convert.2248 = bf16[4096]{0} convert(%get-tuple-element.684)
  %broadcast.11623 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2248), dimensions={2}
  %multiply.5150 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1842, %broadcast.11623)
  %convert.2249 = f32[2,8192,4096]{2,1,0} convert(%multiply.5150)
  %convert.2250 = f32[2,8192,4096]{2,1,0} convert(%copy.1830)
  %multiply.5151 = f32[2,8192,4096]{2,1,0} multiply(%convert.2250, %convert.2250)
  %reduce.384 = f32[2,8192]{1,0} reduce(%multiply.5151, %constant.5451), dimensions={2}, to_apply=%region_326.16206
  %multiply.5152 = f32[2,8192]{1,0} multiply(%reduce.384, %broadcast.7109)
  %add.3962 = f32[2,8192]{1,0} add(%multiply.5152, %broadcast.7110)
  %reshape.10781 = f32[2,8192,1]{2,1,0} reshape(%add.3962)
  %rsqrt.154 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10781)
  %reshape.10782 = f32[2,8192]{1,0} reshape(%rsqrt.154)
  %broadcast.11628 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10782), dimensions={0,1}
  %multiply.5153 = f32[2,8192,4096]{2,1,0} multiply(%convert.2249, %broadcast.11628)
  %multiply.5154 = f32[2,8192,4096]{2,1,0} multiply(%convert.2250, %convert.2249)
  %reduce.385 = f32[2,8192]{1,0} reduce(%multiply.5154, %constant.5451), dimensions={2}, to_apply=%region_337.16645
  %reshape.10783 = f32[2,8192,1]{2,1,0} reshape(%reduce.385)
  %divide.888 = f32[2,8192,1]{2,1,0} divide(%rsqrt.154, %reshape.10781)
  %multiply.5155 = f32[2,8192,1]{2,1,0} multiply(%divide.888, %broadcast.10161)
  %multiply.5157 = f32[2,8192,1]{2,1,0} multiply(%reshape.10783, %multiply.5155)
  %multiply.5159 = f32[2,8192,1]{2,1,0} multiply(%multiply.5157, %broadcast.10163)
  %reshape.10784 = f32[2,8192]{1,0} reshape(%multiply.5159)
  %broadcast.11632 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10784), dimensions={0,1}
  %multiply.5160 = f32[2,8192,4096]{2,1,0} multiply(%convert.2250, %broadcast.11632)
  %add.3964 = f32[2,8192,4096]{2,1,0} add(%multiply.5153, %multiply.5160)
  %convert.2251 = bf16[2,8192,4096]{2,1,0} convert(%add.3964)
  %add.3965 = bf16[2,8192,4096]{2,1,0} add(%add.3931, %convert.2251)
  %copy.1843 = bf16[2,8192,4096]{2,1,0} copy(%add.3965)
  %tuple.119 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.126, %reduce-precision.127, %reduce-precision.128, %get-tuple-element.225, %get-tuple-element.226, /*index=5*/%reduce-precision.129, %reduce-precision.130, %reduce-precision.131, %reduce-precision.132, %constant.5507, /*index=10*/%constant.5507, %param.175, %param.176, %param.177, %param.174, /*index=15*/%param.169, %param.171, %param.173, %param.170, %param.172, /*index=20*/%copy.1424, %param.10, %param.7, %copy.1843)
  %opt-barrier.13 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.119)
  %get-tuple-element.685 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.13), index=23
  %copy.1844 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.685)
  %get-tuple-element.686 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.13), index=7
  %negate.902 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.686)
  %exponential.172 = bf16[2,8192,14336]{2,1,0} exponential(%negate.902)
  %add.3966 = bf16[2,8192,14336]{2,1,0} add(%exponential.172, %broadcast.7215)
  %divide.889 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.3966)
  %multiply.5161 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.686, %divide.889)
  %copy.1845 = bf16[2,8192,4096]{2,1,0} copy(%copy.1844)
  %get-tuple-element.687 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.13), index=13
  %convert.2252 = bf16[14336,256]{1,0} convert(%get-tuple-element.687)
  %all-gather.317 = bf16[14336,4096]{1,0} all-gather(%convert.2252), channel_id=320, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.416 = bf16[2,8192,14336]{2,1,0} dot(%copy.1845, %all-gather.317), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1846 = bf16[2,8192,14336]{2,1,0} copy(%dot.416)
  %multiply.5162 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5161, %copy.1846)
  %get-tuple-element.688 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.13), index=12
  %convert.2253 = bf16[256,14336]{1,0} convert(%get-tuple-element.688)
  %all-gather.318 = bf16[4096,14336]{1,0} all-gather(%convert.2253), channel_id=321, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.417 = bf16[2,8192,4096]{2,1,0} dot(%multiply.5162, %all-gather.318), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.689 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.13), index=8
  %multiply.5163 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1846, %get-tuple-element.689)
  %multiply.5164 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5163, %divide.889)
  %multiply.5165 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.686, %multiply.5163)
  %subtract.260 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.889)
  %multiply.5166 = bf16[2,8192,14336]{2,1,0} multiply(%divide.889, %subtract.260)
  %multiply.5167 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5165, %multiply.5166)
  %add.3967 = bf16[2,8192,14336]{2,1,0} add(%multiply.5164, %multiply.5167)
  %get-tuple-element.690 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.13), index=11
  %convert.2254 = bf16[256,14336]{1,0} convert(%get-tuple-element.690)
  %all-gather.319 = bf16[4096,14336]{1,0} all-gather(%convert.2254), channel_id=322, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.418 = bf16[2,8192,4096]{2,1,0} dot(%add.3967, %all-gather.319), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3968 = bf16[2,8192,4096]{2,1,0} add(%dot.417, %dot.418)
  %copy.1847 = bf16[2,8192,4096]{2,1,0} copy(%add.3968)
  %get-tuple-element.691 = f32[4096]{0} get-tuple-element(%opt-barrier.13), index=14
  %convert.2255 = bf16[4096]{0} convert(%get-tuple-element.691)
  %broadcast.11635 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2255), dimensions={2}
  %multiply.5168 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1847, %broadcast.11635)
  %convert.2256 = f32[2,8192,4096]{2,1,0} convert(%multiply.5168)
  %get-tuple-element.692 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.13), index=20
  %copy.1848 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.692)
  %get-tuple-element.693 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.13), index=6
  %copy.1849 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.693)
  %add.3969 = bf16[2,8192,4096]{2,1,0} add(%copy.1848, %copy.1849)
  %convert.2257 = f32[2,8192,4096]{2,1,0} convert(%add.3969)
  %multiply.5169 = f32[2,8192,4096]{2,1,0} multiply(%convert.2257, %convert.2257)
  %reduce.386 = f32[2,8192]{1,0} reduce(%multiply.5169, %constant.5451), dimensions={2}, to_apply=%region_343.16932
  %multiply.5170 = f32[2,8192]{1,0} multiply(%reduce.386, %broadcast.7109)
  %add.3970 = f32[2,8192]{1,0} add(%multiply.5170, %broadcast.7110)
  %reshape.10785 = f32[2,8192,1]{2,1,0} reshape(%add.3970)
  %rsqrt.155 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10785)
  %reshape.10786 = f32[2,8192]{1,0} reshape(%rsqrt.155)
  %broadcast.11639 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10786), dimensions={0,1}
  %multiply.5171 = f32[2,8192,4096]{2,1,0} multiply(%convert.2256, %broadcast.11639)
  %multiply.5172 = f32[2,8192,4096]{2,1,0} multiply(%convert.2257, %convert.2256)
  %reduce.387 = f32[2,8192]{1,0} reduce(%multiply.5172, %constant.5451), dimensions={2}, to_apply=%region_346.17003
  %reshape.10787 = f32[2,8192,1]{2,1,0} reshape(%reduce.387)
  %divide.890 = f32[2,8192,1]{2,1,0} divide(%rsqrt.155, %reshape.10785)
  %multiply.5173 = f32[2,8192,1]{2,1,0} multiply(%divide.890, %broadcast.10161)
  %multiply.5174 = f32[2,8192,1]{2,1,0} multiply(%reshape.10787, %multiply.5173)
  %multiply.5175 = f32[2,8192,1]{2,1,0} multiply(%multiply.5174, %broadcast.10163)
  %reshape.10788 = f32[2,8192]{1,0} reshape(%multiply.5175)
  %broadcast.11641 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10788), dimensions={0,1}
  %multiply.5176 = f32[2,8192,4096]{2,1,0} multiply(%convert.2257, %broadcast.11641)
  %add.3971 = f32[2,8192,4096]{2,1,0} add(%multiply.5171, %multiply.5176)
  %convert.2258 = bf16[2,8192,4096]{2,1,0} convert(%add.3971)
  %add.3972 = bf16[2,8192,4096]{2,1,0} add(%copy.1844, %convert.2258)
  %get-tuple-element.694 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.13), index=0
  %convert.2259 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.694)
  %get-tuple-element.695 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.13), index=22
  %convert.2260 = f32[2,8192]{1,0} convert(%get-tuple-element.695)
  %broadcast.11642 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2260), dimensions={0,1}
  %divide.892 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.11642, %broadcast.7129)
  %cosine.91 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.892)
  %reshape.10790 = f32[2,8192,128]{2,1,0} reshape(%cosine.91)
  %broadcast.11651 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10790), dimensions={0,1,3}
  %multiply.5188 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2259, %broadcast.11651)
  %slice.509 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.694), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.510 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.694), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.180 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.509, %slice.510), dimensions={3}
  %slice.511 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.694), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.512 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.694), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.181 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.511, %slice.512), dimensions={3}
  %select.2484 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.180, %concatenate.181)
  %convert.2264 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2484)
  %sine.90 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.892)
  %reshape.10795 = f32[2,8192,128]{2,1,0} reshape(%sine.90)
  %broadcast.11659 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10795), dimensions={0,1,3}
  %multiply.5194 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2264, %broadcast.11659)
  %get-tuple-element.696 = s32[2]{0} get-tuple-element(%opt-barrier.13), index=9
  %broadcast.11661 = s32[64,2]{1,0} broadcast(%get-tuple-element.696), dimensions={1}
  %reshape.10797 = s32[128]{0} reshape(%broadcast.11661)
  %convert.2266 = f32[128]{0} convert(%reshape.10797)
  %broadcast.11663 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2266), dimensions={3}
  %multiply.5195 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5194, %broadcast.11663)
  %add.3976 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5188, %multiply.5195)
  %convert.2267 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.3976)
  %copy.1850 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2267)
  %get-tuple-element.697 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.13), index=1
  %convert.2268 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.697)
  %broadcast.11675 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10790), dimensions={0,1,3}
  %multiply.5207 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2268, %broadcast.11675)
  %slice.513 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.697), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.514 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.697), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.182 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.513, %slice.514), dimensions={3}
  %slice.515 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.697), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.516 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.697), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.183 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.515, %slice.516), dimensions={3}
  %select.2488 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.182, %concatenate.183)
  %convert.2274 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2488)
  %broadcast.11681 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10795), dimensions={0,1,3}
  %multiply.5212 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2274, %broadcast.11681)
  %get-tuple-element.698 = s32[2]{0} get-tuple-element(%opt-barrier.13), index=10
  %broadcast.11682 = s32[64,2]{1,0} broadcast(%get-tuple-element.698), dimensions={1}
  %reshape.10806 = s32[128]{0} reshape(%broadcast.11682)
  %convert.2276 = f32[128]{0} convert(%reshape.10806)
  %broadcast.11683 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2276), dimensions={3}
  %multiply.5213 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5212, %broadcast.11683)
  %add.3980 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5207, %multiply.5213)
  %convert.2277 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.3980)
  %copy.1851 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2277)
  %get-tuple-element.699 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.13), index=2
  %copy.1852 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.699)
  %get-tuple-element.700 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.13), index=3
  %get-tuple-element.701 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.13), index=4
  %get-tuple-element.702 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.13), index=5
  %copy.1853 = bf16[2,8192,4096]{2,1,0} copy(%add.3972)
  %get-tuple-element.703 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.13), index=17
  %convert.2278 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.703)
  %all-gather.320 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2278), channel_id=323, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.419 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1853, %all-gather.320), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1854 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.419)
  %get-tuple-element.704 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.13), index=21
  %broadcast.11684 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.704), dimensions={0,1}
  %broadcast.11685 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.704), dimensions={0,2}
  %compare.3925 = pred[2,8192,8192]{2,1,0} compare(%broadcast.11684, %broadcast.11685), direction=EQ
  %and.855 = pred[2,8192,8192]{2,1,0} and(%compare.3925, %broadcast.7176)
  %select.2489 = f32[2,8192,8192]{2,1,0} select(%and.855, %broadcast.7177, %broadcast.7179)
  %compare.3927 = pred[2,8192,8192]{2,1,0} compare(%select.2489, %broadcast.7177), direction=NE
  %not.109 = pred[2,8192,8192]{2,1,0} not(%compare.3927)
  %convert.2279 = s32[2,8192,8192]{2,1,0} convert(%not.109)
  %reduce.388 = s32[2,8192]{1,0} reduce(%convert.2279, %constant.5439), dimensions={1}, to_apply=%region_340.16907
  %reshape.10807 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.388)
  %slice.517 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10807), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10811 = s32[2,1]{1,0} reshape(%slice.517)
  %reshape.10820 = s32[2]{0} reshape(%reshape.10811)
  %compare.3941 = pred[2]{0} compare(%reshape.10820, %broadcast.7184), direction=LT
  %reduce-window.272 = s32[2]{0} reduce-window(%reshape.10820, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.13
  %select.2499 = s32[2]{0} select(%compare.3941, %broadcast.7199, %reduce-window.272)
  %scatter.454 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2499), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.13
  %reduce.389 = s32[2,8192]{1,0} reduce(%convert.2279, %constant.5439), dimensions={2}, to_apply=%region_341.16915
  %reshape.10812 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.389)
  %reduce.390 = s32[2,1]{1,0} reduce(%reshape.10812, %constant.5570), dimensions={3,2}, to_apply=%region_342.16920
  %reshape.10830 = s32[2]{0} reshape(%reduce.390)
  %compare.3956 = pred[2]{0} compare(%reshape.10830, %broadcast.7184), direction=LT
  %reduce-window.275 = s32[2]{0} reduce-window(%reshape.10830, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.13.clone
  %select.2509 = s32[2]{0} select(%compare.3956, %broadcast.7199, %reduce-window.275)
  %scatter.459 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2509), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.13
  %custom-call.43 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1850, %copy.1851, %copy.1852, %constant.5555, %get-tuple-element.700, /*index=5*/%get-tuple-element.701, %get-tuple-element.702, %copy.1854, %scatter.454, %scatter.459, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.711 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.43), index=2
  %copy.1855 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.711)
  %get-tuple-element.712 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.13), index=19
  %convert.2283 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.712)
  %all-gather.321 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2283), channel_id=324, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.420 = bf16[2,8192,4096]{2,1,0} dot(%copy.1855, %all-gather.321), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.713 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.43), index=1
  %copy.1856 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.713)
  %convert.2284 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1856)
  %multiply.5215 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2284, %broadcast.11675)
  %convert.2285 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5215)
  %multiply.5216 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2284, %broadcast.11683)
  %multiply.5217 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5216, %broadcast.11681)
  %convert.2286 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5217)
  %select.2510 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2286, %broadcast.10254)
  %slice.518 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2510), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.104 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.518, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3993 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2285, %pad.104)
  %slice.519 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2510), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.105 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.519, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3994 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3993, %pad.105)
  %select.2511 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2286, %broadcast.10254)
  %slice.520 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2511), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.106 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.520, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.3995 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3994, %pad.106)
  %slice.521 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2511), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.107 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.521, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.3996 = bf16[2,8192,8,128]{3,2,1,0} add(%add.3995, %pad.107)
  %get-tuple-element.714 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.13), index=16
  %convert.2287 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.714)
  %all-gather.322 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2287), channel_id=325, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.421 = bf16[2,8192,4096]{2,1,0} dot(%add.3996, %all-gather.322), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3997 = bf16[2,8192,4096]{2,1,0} add(%dot.420, %dot.421)
  %copy.1857 = bf16[2,8192,4096]{2,1,0} copy(%add.3997)
  %get-tuple-element.715 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.43), index=0
  %copy.1858 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.715)
  %convert.2288 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1858)
  %multiply.5226 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2288, %broadcast.11651)
  %convert.2289 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5226)
  %multiply.5227 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2288, %broadcast.11663)
  %multiply.5228 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5227, %broadcast.11659)
  %convert.2290 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5228)
  %select.2512 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2290, %broadcast.10265)
  %slice.522 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2512), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.108 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.522, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.3998 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2289, %pad.108)
  %slice.523 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2512), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.109 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.523, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.3999 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3998, %pad.109)
  %select.2513 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2290, %broadcast.10265)
  %slice.524 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2513), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.110 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.524, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4000 = bf16[2,8192,32,128]{3,2,1,0} add(%add.3999, %pad.110)
  %slice.525 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2513), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.111 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.525, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4002 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4000, %pad.111)
  %get-tuple-element.716 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.13), index=18
  %convert.2292 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.716)
  %all-gather.323 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2292), channel_id=326, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.422 = bf16[2,8192,4096]{2,1,0} dot(%add.4002, %all-gather.323), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1859 = bf16[2,8192,4096]{2,1,0} copy(%dot.422)
  %add.4003 = bf16[2,8192,4096]{2,1,0} add(%copy.1857, %copy.1859)
  %copy.1860 = bf16[2,8192,4096]{2,1,0} copy(%add.4003)
  %get-tuple-element.717 = f32[4096]{0} get-tuple-element(%opt-barrier.13), index=15
  %convert.2293 = bf16[4096]{0} convert(%get-tuple-element.717)
  %broadcast.11736 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2293), dimensions={2}
  %multiply.5237 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1860, %broadcast.11736)
  %convert.2294 = f32[2,8192,4096]{2,1,0} convert(%multiply.5237)
  %convert.2295 = f32[2,8192,4096]{2,1,0} convert(%copy.1848)
  %multiply.5238 = f32[2,8192,4096]{2,1,0} multiply(%convert.2295, %convert.2295)
  %reduce.391 = f32[2,8192]{1,0} reduce(%multiply.5238, %constant.5451), dimensions={2}, to_apply=%region_339.16698
  %multiply.5239 = f32[2,8192]{1,0} multiply(%reduce.391, %broadcast.7109)
  %add.4004 = f32[2,8192]{1,0} add(%multiply.5239, %broadcast.7110)
  %reshape.10854 = f32[2,8192,1]{2,1,0} reshape(%add.4004)
  %rsqrt.156 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10854)
  %reshape.10855 = f32[2,8192]{1,0} reshape(%rsqrt.156)
  %broadcast.11740 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10855), dimensions={0,1}
  %multiply.5240 = f32[2,8192,4096]{2,1,0} multiply(%convert.2294, %broadcast.11740)
  %multiply.5241 = f32[2,8192,4096]{2,1,0} multiply(%convert.2295, %convert.2294)
  %reduce.392 = f32[2,8192]{1,0} reduce(%multiply.5241, %constant.5451), dimensions={2}, to_apply=%region_350.17137
  %reshape.10856 = f32[2,8192,1]{2,1,0} reshape(%reduce.392)
  %divide.897 = f32[2,8192,1]{2,1,0} divide(%rsqrt.156, %reshape.10854)
  %multiply.5242 = f32[2,8192,1]{2,1,0} multiply(%divide.897, %broadcast.10161)
  %multiply.5243 = f32[2,8192,1]{2,1,0} multiply(%reshape.10856, %multiply.5242)
  %multiply.5244 = f32[2,8192,1]{2,1,0} multiply(%multiply.5243, %broadcast.10163)
  %reshape.10857 = f32[2,8192]{1,0} reshape(%multiply.5244)
  %broadcast.11742 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10857), dimensions={0,1}
  %multiply.5245 = f32[2,8192,4096]{2,1,0} multiply(%convert.2295, %broadcast.11742)
  %add.4005 = f32[2,8192,4096]{2,1,0} add(%multiply.5240, %multiply.5245)
  %convert.2296 = bf16[2,8192,4096]{2,1,0} convert(%add.4005)
  %add.4006 = bf16[2,8192,4096]{2,1,0} add(%add.3972, %convert.2296)
  %copy.1861 = bf16[2,8192,4096]{2,1,0} copy(%add.4006)
  %tuple.121 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.119, %reduce-precision.120, %reduce-precision.121, %get-tuple-element.223, %get-tuple-element.224, /*index=5*/%reduce-precision.122, %reduce-precision.123, %reduce-precision.124, %reduce-precision.125, %constant.5507, /*index=10*/%constant.5507, %param.166, %param.167, %param.168, %param.165, /*index=15*/%param.160, %param.162, %param.164, %param.161, %param.163, /*index=20*/%copy.1411, %param.10, %param.7, %copy.1861)
  %opt-barrier.14 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.121)
  %get-tuple-element.718 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.14), index=23
  %copy.1862 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.718)
  %get-tuple-element.719 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.14), index=7
  %negate.905 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.719)
  %exponential.173 = bf16[2,8192,14336]{2,1,0} exponential(%negate.905)
  %add.4007 = bf16[2,8192,14336]{2,1,0} add(%exponential.173, %broadcast.7215)
  %divide.898 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4007)
  %multiply.5246 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.719, %divide.898)
  %copy.1863 = bf16[2,8192,4096]{2,1,0} copy(%copy.1862)
  %get-tuple-element.720 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.14), index=13
  %convert.2297 = bf16[14336,256]{1,0} convert(%get-tuple-element.720)
  %all-gather.324 = bf16[14336,4096]{1,0} all-gather(%convert.2297), channel_id=327, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.423 = bf16[2,8192,14336]{2,1,0} dot(%copy.1863, %all-gather.324), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1864 = bf16[2,8192,14336]{2,1,0} copy(%dot.423)
  %multiply.5247 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5246, %copy.1864)
  %get-tuple-element.721 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.14), index=12
  %convert.2298 = bf16[256,14336]{1,0} convert(%get-tuple-element.721)
  %all-gather.325 = bf16[4096,14336]{1,0} all-gather(%convert.2298), channel_id=328, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.424 = bf16[2,8192,4096]{2,1,0} dot(%multiply.5247, %all-gather.325), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.722 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.14), index=8
  %multiply.5248 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1864, %get-tuple-element.722)
  %multiply.5249 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5248, %divide.898)
  %multiply.5250 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.719, %multiply.5248)
  %subtract.265 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.898)
  %multiply.5251 = bf16[2,8192,14336]{2,1,0} multiply(%divide.898, %subtract.265)
  %multiply.5252 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5250, %multiply.5251)
  %add.4008 = bf16[2,8192,14336]{2,1,0} add(%multiply.5249, %multiply.5252)
  %get-tuple-element.723 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.14), index=11
  %convert.2299 = bf16[256,14336]{1,0} convert(%get-tuple-element.723)
  %all-gather.326 = bf16[4096,14336]{1,0} all-gather(%convert.2299), channel_id=329, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.425 = bf16[2,8192,4096]{2,1,0} dot(%add.4008, %all-gather.326), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4009 = bf16[2,8192,4096]{2,1,0} add(%dot.424, %dot.425)
  %copy.1865 = bf16[2,8192,4096]{2,1,0} copy(%add.4009)
  %get-tuple-element.724 = f32[4096]{0} get-tuple-element(%opt-barrier.14), index=14
  %convert.2300 = bf16[4096]{0} convert(%get-tuple-element.724)
  %broadcast.11744 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2300), dimensions={2}
  %multiply.5253 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1865, %broadcast.11744)
  %convert.2301 = f32[2,8192,4096]{2,1,0} convert(%multiply.5253)
  %get-tuple-element.725 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.14), index=20
  %copy.1866 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.725)
  %get-tuple-element.726 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.14), index=6
  %copy.1867 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.726)
  %add.4010 = bf16[2,8192,4096]{2,1,0} add(%copy.1866, %copy.1867)
  %convert.2302 = f32[2,8192,4096]{2,1,0} convert(%add.4010)
  %multiply.5254 = f32[2,8192,4096]{2,1,0} multiply(%convert.2302, %convert.2302)
  %reduce.393 = f32[2,8192]{1,0} reduce(%multiply.5254, %constant.5451), dimensions={2}, to_apply=%region_356.17424
  %multiply.5255 = f32[2,8192]{1,0} multiply(%reduce.393, %broadcast.7109)
  %add.4011 = f32[2,8192]{1,0} add(%multiply.5255, %broadcast.7110)
  %reshape.10858 = f32[2,8192,1]{2,1,0} reshape(%add.4011)
  %rsqrt.157 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10858)
  %reshape.10859 = f32[2,8192]{1,0} reshape(%rsqrt.157)
  %broadcast.11747 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10859), dimensions={0,1}
  %multiply.5257 = f32[2,8192,4096]{2,1,0} multiply(%convert.2301, %broadcast.11747)
  %multiply.5258 = f32[2,8192,4096]{2,1,0} multiply(%convert.2302, %convert.2301)
  %reduce.394 = f32[2,8192]{1,0} reduce(%multiply.5258, %constant.5451), dimensions={2}, to_apply=%region_359.17495
  %reshape.10860 = f32[2,8192,1]{2,1,0} reshape(%reduce.394)
  %divide.899 = f32[2,8192,1]{2,1,0} divide(%rsqrt.157, %reshape.10858)
  %multiply.5259 = f32[2,8192,1]{2,1,0} multiply(%divide.899, %broadcast.10161)
  %multiply.5260 = f32[2,8192,1]{2,1,0} multiply(%reshape.10860, %multiply.5259)
  %multiply.5261 = f32[2,8192,1]{2,1,0} multiply(%multiply.5260, %broadcast.10163)
  %reshape.10861 = f32[2,8192]{1,0} reshape(%multiply.5261)
  %broadcast.11749 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10861), dimensions={0,1}
  %multiply.5262 = f32[2,8192,4096]{2,1,0} multiply(%convert.2302, %broadcast.11749)
  %add.4012 = f32[2,8192,4096]{2,1,0} add(%multiply.5257, %multiply.5262)
  %convert.2303 = bf16[2,8192,4096]{2,1,0} convert(%add.4012)
  %add.4013 = bf16[2,8192,4096]{2,1,0} add(%copy.1862, %convert.2303)
  %get-tuple-element.727 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.14), index=0
  %convert.2304 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.727)
  %get-tuple-element.728 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.14), index=22
  %convert.2306 = f32[2,8192]{1,0} convert(%get-tuple-element.728)
  %broadcast.11750 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2306), dimensions={0,1}
  %divide.901 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.11750, %broadcast.7129)
  %cosine.93 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.901)
  %reshape.10864 = f32[2,8192,128]{2,1,0} reshape(%cosine.93)
  %broadcast.11759 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10864), dimensions={0,1,3}
  %multiply.5274 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2304, %broadcast.11759)
  %slice.526 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.727), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.527 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.727), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.184 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.526, %slice.527), dimensions={3}
  %slice.528 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.727), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.529 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.727), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.185 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.528, %slice.529), dimensions={3}
  %select.2517 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.184, %concatenate.185)
  %convert.2311 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2517)
  %sine.92 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.901)
  %reshape.10871 = f32[2,8192,128]{2,1,0} reshape(%sine.92)
  %broadcast.11765 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10871), dimensions={0,1,3}
  %multiply.5280 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2311, %broadcast.11765)
  %get-tuple-element.729 = s32[2]{0} get-tuple-element(%opt-barrier.14), index=9
  %broadcast.11766 = s32[64,2]{1,0} broadcast(%get-tuple-element.729), dimensions={1}
  %reshape.10872 = s32[128]{0} reshape(%broadcast.11766)
  %convert.2312 = f32[128]{0} convert(%reshape.10872)
  %broadcast.11767 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2312), dimensions={3}
  %multiply.5281 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5280, %broadcast.11767)
  %add.4017 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5274, %multiply.5281)
  %convert.2313 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4017)
  %copy.1868 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2313)
  %get-tuple-element.730 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.14), index=1
  %convert.2314 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.730)
  %broadcast.11777 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10864), dimensions={0,1,3}
  %multiply.5293 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2314, %broadcast.11777)
  %slice.530 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.730), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.531 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.730), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.186 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.530, %slice.531), dimensions={3}
  %slice.532 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.730), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.533 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.730), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.187 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.532, %slice.533), dimensions={3}
  %select.2521 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.186, %concatenate.187)
  %convert.2320 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2521)
  %broadcast.11783 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10871), dimensions={0,1,3}
  %multiply.5299 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2320, %broadcast.11783)
  %get-tuple-element.731 = s32[2]{0} get-tuple-element(%opt-barrier.14), index=10
  %broadcast.11784 = s32[64,2]{1,0} broadcast(%get-tuple-element.731), dimensions={1}
  %reshape.10884 = s32[128]{0} reshape(%broadcast.11784)
  %convert.2321 = f32[128]{0} convert(%reshape.10884)
  %broadcast.11785 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2321), dimensions={3}
  %multiply.5300 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5299, %broadcast.11785)
  %add.4021 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5293, %multiply.5300)
  %convert.2323 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4021)
  %copy.1869 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2323)
  %get-tuple-element.732 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.14), index=2
  %copy.1870 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.732)
  %get-tuple-element.733 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.14), index=3
  %get-tuple-element.734 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.14), index=4
  %get-tuple-element.735 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.14), index=5
  %copy.1871 = bf16[2,8192,4096]{2,1,0} copy(%add.4013)
  %get-tuple-element.736 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.14), index=17
  %convert.2324 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.736)
  %all-gather.327 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2324), channel_id=330, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.426 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1871, %all-gather.327), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1872 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.426)
  %get-tuple-element.737 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.14), index=21
  %broadcast.11787 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.737), dimensions={0,1}
  %broadcast.11789 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.737), dimensions={0,2}
  %compare.3977 = pred[2,8192,8192]{2,1,0} compare(%broadcast.11787, %broadcast.11789), direction=EQ
  %and.864 = pred[2,8192,8192]{2,1,0} and(%compare.3977, %broadcast.7176)
  %select.2522 = f32[2,8192,8192]{2,1,0} select(%and.864, %broadcast.7177, %broadcast.7179)
  %compare.3979 = pred[2,8192,8192]{2,1,0} compare(%select.2522, %broadcast.7177), direction=NE
  %not.110 = pred[2,8192,8192]{2,1,0} not(%compare.3979)
  %convert.2325 = s32[2,8192,8192]{2,1,0} convert(%not.110)
  %reduce.395 = s32[2,8192]{1,0} reduce(%convert.2325, %constant.5439), dimensions={1}, to_apply=%region_353.17399
  %reshape.10886 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.395)
  %slice.534 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10886), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10888 = s32[2,1]{1,0} reshape(%slice.534)
  %reshape.10899 = s32[2]{0} reshape(%reshape.10888)
  %compare.3992 = pred[2]{0} compare(%reshape.10899, %broadcast.7184), direction=LT
  %reduce-window.278 = s32[2]{0} reduce-window(%reshape.10899, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.14
  %select.2532 = s32[2]{0} select(%compare.3992, %broadcast.7199, %reduce-window.278)
  %scatter.464 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2532), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.14
  %reduce.396 = s32[2,8192]{1,0} reduce(%convert.2325, %constant.5439), dimensions={2}, to_apply=%region_354.17407
  %reshape.10890 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.396)
  %reduce.397 = s32[2,1]{1,0} reduce(%reshape.10890, %constant.5570), dimensions={3,2}, to_apply=%region_355.17412
  %reshape.10910 = s32[2]{0} reshape(%reduce.397)
  %compare.4005 = pred[2]{0} compare(%reshape.10910, %broadcast.7184), direction=LT
  %reduce-window.281 = s32[2]{0} reduce-window(%reshape.10910, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.14.clone
  %select.2543 = s32[2]{0} select(%compare.4005, %broadcast.7199, %reduce-window.281)
  %scatter.469 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2543), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.14
  %custom-call.44 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1868, %copy.1869, %copy.1870, %constant.5555, %get-tuple-element.733, /*index=5*/%get-tuple-element.734, %get-tuple-element.735, %copy.1872, %scatter.464, %scatter.469, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.744 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.44), index=2
  %copy.1873 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.744)
  %get-tuple-element.745 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.14), index=19
  %convert.2329 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.745)
  %all-gather.328 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2329), channel_id=331, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.427 = bf16[2,8192,4096]{2,1,0} dot(%copy.1873, %all-gather.328), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.746 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.44), index=1
  %copy.1874 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.746)
  %convert.2330 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1874)
  %multiply.5302 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2330, %broadcast.11777)
  %convert.2331 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5302)
  %multiply.5303 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2330, %broadcast.11785)
  %multiply.5304 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5303, %broadcast.11783)
  %convert.2332 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5304)
  %select.2544 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2332, %broadcast.10254)
  %slice.535 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2544), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.112 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.535, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4034 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2331, %pad.112)
  %slice.536 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2544), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.113 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.536, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4035 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4034, %pad.113)
  %select.2545 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2332, %broadcast.10254)
  %slice.537 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2545), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.114 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.537, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4036 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4035, %pad.114)
  %slice.538 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2545), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.115 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.538, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4037 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4036, %pad.115)
  %get-tuple-element.747 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.14), index=16
  %convert.2333 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.747)
  %all-gather.329 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2333), channel_id=332, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.428 = bf16[2,8192,4096]{2,1,0} dot(%add.4037, %all-gather.329), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4038 = bf16[2,8192,4096]{2,1,0} add(%dot.427, %dot.428)
  %copy.1875 = bf16[2,8192,4096]{2,1,0} copy(%add.4038)
  %get-tuple-element.748 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.44), index=0
  %copy.1876 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.748)
  %convert.2334 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1876)
  %multiply.5315 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2334, %broadcast.11759)
  %convert.2335 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5315)
  %multiply.5316 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2334, %broadcast.11767)
  %multiply.5317 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5316, %broadcast.11765)
  %convert.2336 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5317)
  %select.2546 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2336, %broadcast.10265)
  %slice.539 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2546), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.116 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.539, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4040 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2335, %pad.116)
  %slice.540 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2546), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.117 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.540, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4041 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4040, %pad.117)
  %select.2547 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2336, %broadcast.10265)
  %slice.541 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2547), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.118 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.541, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4042 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4041, %pad.118)
  %slice.542 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2547), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.119 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.542, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4043 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4042, %pad.119)
  %get-tuple-element.749 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.14), index=18
  %convert.2337 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.749)
  %all-gather.330 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2337), channel_id=333, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.429 = bf16[2,8192,4096]{2,1,0} dot(%add.4043, %all-gather.330), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1877 = bf16[2,8192,4096]{2,1,0} copy(%dot.429)
  %add.4044 = bf16[2,8192,4096]{2,1,0} add(%copy.1875, %copy.1877)
  %copy.1878 = bf16[2,8192,4096]{2,1,0} copy(%add.4044)
  %get-tuple-element.750 = f32[4096]{0} get-tuple-element(%opt-barrier.14), index=15
  %convert.2338 = bf16[4096]{0} convert(%get-tuple-element.750)
  %broadcast.11841 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2338), dimensions={2}
  %multiply.5326 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1878, %broadcast.11841)
  %convert.2339 = f32[2,8192,4096]{2,1,0} convert(%multiply.5326)
  %convert.2340 = f32[2,8192,4096]{2,1,0} convert(%copy.1866)
  %multiply.5327 = f32[2,8192,4096]{2,1,0} multiply(%convert.2340, %convert.2340)
  %reduce.398 = f32[2,8192]{1,0} reduce(%multiply.5327, %constant.5451), dimensions={2}, to_apply=%region_352.17190
  %multiply.5328 = f32[2,8192]{1,0} multiply(%reduce.398, %broadcast.7109)
  %add.4045 = f32[2,8192]{1,0} add(%multiply.5328, %broadcast.7110)
  %reshape.10933 = f32[2,8192,1]{2,1,0} reshape(%add.4045)
  %rsqrt.158 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10933)
  %reshape.10934 = f32[2,8192]{1,0} reshape(%rsqrt.158)
  %broadcast.11844 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10934), dimensions={0,1}
  %multiply.5329 = f32[2,8192,4096]{2,1,0} multiply(%convert.2339, %broadcast.11844)
  %multiply.5330 = f32[2,8192,4096]{2,1,0} multiply(%convert.2340, %convert.2339)
  %reduce.399 = f32[2,8192]{1,0} reduce(%multiply.5330, %constant.5451), dimensions={2}, to_apply=%region_363.17629
  %reshape.10935 = f32[2,8192,1]{2,1,0} reshape(%reduce.399)
  %divide.906 = f32[2,8192,1]{2,1,0} divide(%rsqrt.158, %reshape.10933)
  %multiply.5331 = f32[2,8192,1]{2,1,0} multiply(%divide.906, %broadcast.10161)
  %multiply.5332 = f32[2,8192,1]{2,1,0} multiply(%reshape.10935, %multiply.5331)
  %multiply.5333 = f32[2,8192,1]{2,1,0} multiply(%multiply.5332, %broadcast.10163)
  %reshape.10936 = f32[2,8192]{1,0} reshape(%multiply.5333)
  %broadcast.11846 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10936), dimensions={0,1}
  %multiply.5334 = f32[2,8192,4096]{2,1,0} multiply(%convert.2340, %broadcast.11846)
  %add.4046 = f32[2,8192,4096]{2,1,0} add(%multiply.5329, %multiply.5334)
  %convert.2342 = bf16[2,8192,4096]{2,1,0} convert(%add.4046)
  %add.4047 = bf16[2,8192,4096]{2,1,0} add(%add.4013, %convert.2342)
  %copy.1879 = bf16[2,8192,4096]{2,1,0} copy(%add.4047)
  %tuple.123 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.112, %reduce-precision.113, %reduce-precision.114, %get-tuple-element.221, %get-tuple-element.222, /*index=5*/%reduce-precision.115, %reduce-precision.116, %reduce-precision.117, %reduce-precision.118, %constant.5507, /*index=10*/%constant.5507, %param.157, %param.158, %param.159, %param.156, /*index=15*/%param.151, %param.153, %param.155, %param.152, %param.154, /*index=20*/%copy.1398, %param.10, %param.7, %copy.1879)
  %opt-barrier.15 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.123)
  %get-tuple-element.751 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.15), index=23
  %copy.1880 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.751)
  %get-tuple-element.752 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.15), index=7
  %negate.908 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.752)
  %exponential.174 = bf16[2,8192,14336]{2,1,0} exponential(%negate.908)
  %add.4048 = bf16[2,8192,14336]{2,1,0} add(%exponential.174, %broadcast.7215)
  %divide.907 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4048)
  %multiply.5335 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.752, %divide.907)
  %copy.1881 = bf16[2,8192,4096]{2,1,0} copy(%copy.1880)
  %get-tuple-element.753 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.15), index=13
  %convert.2343 = bf16[14336,256]{1,0} convert(%get-tuple-element.753)
  %all-gather.331 = bf16[14336,4096]{1,0} all-gather(%convert.2343), channel_id=334, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.430 = bf16[2,8192,14336]{2,1,0} dot(%copy.1881, %all-gather.331), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1882 = bf16[2,8192,14336]{2,1,0} copy(%dot.430)
  %multiply.5336 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5335, %copy.1882)
  %get-tuple-element.754 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.15), index=12
  %convert.2344 = bf16[256,14336]{1,0} convert(%get-tuple-element.754)
  %all-gather.332 = bf16[4096,14336]{1,0} all-gather(%convert.2344), channel_id=335, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.431 = bf16[2,8192,4096]{2,1,0} dot(%multiply.5336, %all-gather.332), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.755 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.15), index=8
  %multiply.5337 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1882, %get-tuple-element.755)
  %multiply.5338 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5337, %divide.907)
  %multiply.5339 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.752, %multiply.5337)
  %subtract.270 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.907)
  %multiply.5340 = bf16[2,8192,14336]{2,1,0} multiply(%divide.907, %subtract.270)
  %multiply.5341 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5339, %multiply.5340)
  %add.4049 = bf16[2,8192,14336]{2,1,0} add(%multiply.5338, %multiply.5341)
  %get-tuple-element.756 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.15), index=11
  %convert.2345 = bf16[256,14336]{1,0} convert(%get-tuple-element.756)
  %all-gather.333 = bf16[4096,14336]{1,0} all-gather(%convert.2345), channel_id=336, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.432 = bf16[2,8192,4096]{2,1,0} dot(%add.4049, %all-gather.333), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4050 = bf16[2,8192,4096]{2,1,0} add(%dot.431, %dot.432)
  %copy.1883 = bf16[2,8192,4096]{2,1,0} copy(%add.4050)
  %get-tuple-element.757 = f32[4096]{0} get-tuple-element(%opt-barrier.15), index=14
  %convert.2346 = bf16[4096]{0} convert(%get-tuple-element.757)
  %broadcast.11849 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2346), dimensions={2}
  %multiply.5342 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1883, %broadcast.11849)
  %convert.2347 = f32[2,8192,4096]{2,1,0} convert(%multiply.5342)
  %get-tuple-element.758 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.15), index=20
  %copy.1884 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.758)
  %get-tuple-element.759 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.15), index=6
  %copy.1885 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.759)
  %add.4051 = bf16[2,8192,4096]{2,1,0} add(%copy.1884, %copy.1885)
  %convert.2348 = f32[2,8192,4096]{2,1,0} convert(%add.4051)
  %multiply.5343 = f32[2,8192,4096]{2,1,0} multiply(%convert.2348, %convert.2348)
  %reduce.400 = f32[2,8192]{1,0} reduce(%multiply.5343, %constant.5451), dimensions={2}, to_apply=%region_369.17916
  %multiply.5345 = f32[2,8192]{1,0} multiply(%reduce.400, %broadcast.7109)
  %add.4052 = f32[2,8192]{1,0} add(%multiply.5345, %broadcast.7110)
  %reshape.10937 = f32[2,8192,1]{2,1,0} reshape(%add.4052)
  %rsqrt.159 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.10937)
  %reshape.10938 = f32[2,8192]{1,0} reshape(%rsqrt.159)
  %broadcast.11855 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10938), dimensions={0,1}
  %multiply.5346 = f32[2,8192,4096]{2,1,0} multiply(%convert.2347, %broadcast.11855)
  %multiply.5347 = f32[2,8192,4096]{2,1,0} multiply(%convert.2348, %convert.2347)
  %reduce.401 = f32[2,8192]{1,0} reduce(%multiply.5347, %constant.5451), dimensions={2}, to_apply=%region_372.17987
  %reshape.10940 = f32[2,8192,1]{2,1,0} reshape(%reduce.401)
  %divide.908 = f32[2,8192,1]{2,1,0} divide(%rsqrt.159, %reshape.10937)
  %multiply.5348 = f32[2,8192,1]{2,1,0} multiply(%divide.908, %broadcast.10161)
  %multiply.5349 = f32[2,8192,1]{2,1,0} multiply(%reshape.10940, %multiply.5348)
  %multiply.5350 = f32[2,8192,1]{2,1,0} multiply(%multiply.5349, %broadcast.10163)
  %reshape.10941 = f32[2,8192]{1,0} reshape(%multiply.5350)
  %broadcast.11857 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.10941), dimensions={0,1}
  %multiply.5351 = f32[2,8192,4096]{2,1,0} multiply(%convert.2348, %broadcast.11857)
  %add.4053 = f32[2,8192,4096]{2,1,0} add(%multiply.5346, %multiply.5351)
  %convert.2350 = bf16[2,8192,4096]{2,1,0} convert(%add.4053)
  %add.4054 = bf16[2,8192,4096]{2,1,0} add(%copy.1880, %convert.2350)
  %get-tuple-element.760 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.15), index=0
  %convert.2352 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.760)
  %get-tuple-element.761 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.15), index=22
  %convert.2353 = f32[2,8192]{1,0} convert(%get-tuple-element.761)
  %broadcast.11859 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2353), dimensions={0,1}
  %divide.910 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.11859, %broadcast.7129)
  %cosine.95 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.910)
  %reshape.10944 = f32[2,8192,128]{2,1,0} reshape(%cosine.95)
  %broadcast.11873 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10944), dimensions={0,1,3}
  %multiply.5364 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2352, %broadcast.11873)
  %slice.543 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.760), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.544 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.760), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.188 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.543, %slice.544), dimensions={3}
  %slice.545 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.760), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.546 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.760), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.189 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.545, %slice.546), dimensions={3}
  %select.2551 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.188, %concatenate.189)
  %convert.2357 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2551)
  %sine.94 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.910)
  %reshape.10951 = f32[2,8192,128]{2,1,0} reshape(%sine.94)
  %broadcast.11881 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.10951), dimensions={0,1,3}
  %multiply.5369 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2357, %broadcast.11881)
  %get-tuple-element.762 = s32[2]{0} get-tuple-element(%opt-barrier.15), index=9
  %broadcast.11882 = s32[64,2]{1,0} broadcast(%get-tuple-element.762), dimensions={1}
  %reshape.10953 = s32[128]{0} reshape(%broadcast.11882)
  %convert.2358 = f32[128]{0} convert(%reshape.10953)
  %broadcast.11883 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2358), dimensions={3}
  %multiply.5370 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5369, %broadcast.11883)
  %add.4058 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5364, %multiply.5370)
  %convert.2359 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4058)
  %copy.1886 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2359)
  %get-tuple-element.763 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.15), index=1
  %convert.2360 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.763)
  %broadcast.11895 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10944), dimensions={0,1,3}
  %multiply.5381 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2360, %broadcast.11895)
  %slice.547 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.763), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.548 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.763), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.190 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.547, %slice.548), dimensions={3}
  %slice.549 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.763), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.550 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.763), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.191 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.549, %slice.550), dimensions={3}
  %select.2555 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.190, %concatenate.191)
  %convert.2365 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2555)
  %broadcast.11902 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.10951), dimensions={0,1,3}
  %multiply.5386 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2365, %broadcast.11902)
  %get-tuple-element.764 = s32[2]{0} get-tuple-element(%opt-barrier.15), index=10
  %broadcast.11903 = s32[64,2]{1,0} broadcast(%get-tuple-element.764), dimensions={1}
  %reshape.10964 = s32[128]{0} reshape(%broadcast.11903)
  %convert.2366 = f32[128]{0} convert(%reshape.10964)
  %broadcast.11904 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2366), dimensions={3}
  %multiply.5387 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5386, %broadcast.11904)
  %add.4062 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5381, %multiply.5387)
  %convert.2368 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4062)
  %copy.1887 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2368)
  %get-tuple-element.765 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.15), index=2
  %copy.1888 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.765)
  %get-tuple-element.766 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.15), index=3
  %get-tuple-element.767 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.15), index=4
  %get-tuple-element.768 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.15), index=5
  %copy.1889 = bf16[2,8192,4096]{2,1,0} copy(%add.4054)
  %get-tuple-element.769 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.15), index=17
  %convert.2369 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.769)
  %all-gather.334 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2369), channel_id=337, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.433 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1889, %all-gather.334), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1890 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.433)
  %get-tuple-element.770 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.15), index=21
  %broadcast.11905 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.770), dimensions={0,1}
  %broadcast.11906 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.770), dimensions={0,2}
  %compare.4025 = pred[2,8192,8192]{2,1,0} compare(%broadcast.11905, %broadcast.11906), direction=EQ
  %and.873 = pred[2,8192,8192]{2,1,0} and(%compare.4025, %broadcast.7176)
  %select.2556 = f32[2,8192,8192]{2,1,0} select(%and.873, %broadcast.7177, %broadcast.7179)
  %compare.4027 = pred[2,8192,8192]{2,1,0} compare(%select.2556, %broadcast.7177), direction=NE
  %not.111 = pred[2,8192,8192]{2,1,0} not(%compare.4027)
  %convert.2370 = s32[2,8192,8192]{2,1,0} convert(%not.111)
  %reduce.402 = s32[2,8192]{1,0} reduce(%convert.2370, %constant.5439), dimensions={1}, to_apply=%region_366.17891
  %reshape.10965 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.402)
  %slice.551 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.10965), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.10969 = s32[2,1]{1,0} reshape(%slice.551)
  %reshape.10981 = s32[2]{0} reshape(%reshape.10969)
  %compare.4044 = pred[2]{0} compare(%reshape.10981, %broadcast.7184), direction=LT
  %reduce-window.284 = s32[2]{0} reduce-window(%reshape.10981, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.15
  %select.2567 = s32[2]{0} select(%compare.4044, %broadcast.7199, %reduce-window.284)
  %scatter.474 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2567), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.15
  %reduce.403 = s32[2,8192]{1,0} reduce(%convert.2370, %constant.5439), dimensions={2}, to_apply=%region_367.17899
  %reshape.10970 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.403)
  %reduce.404 = s32[2,1]{1,0} reduce(%reshape.10970, %constant.5570), dimensions={3,2}, to_apply=%region_368.17904
  %reshape.10992 = s32[2]{0} reshape(%reduce.404)
  %compare.4057 = pred[2]{0} compare(%reshape.10992, %broadcast.7184), direction=LT
  %reduce-window.287 = s32[2]{0} reduce-window(%reshape.10992, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.15.clone
  %select.2578 = s32[2]{0} select(%compare.4057, %broadcast.7199, %reduce-window.287)
  %scatter.479 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2578), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.15
  %custom-call.45 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1886, %copy.1887, %copy.1888, %constant.5555, %get-tuple-element.766, /*index=5*/%get-tuple-element.767, %get-tuple-element.768, %copy.1890, %scatter.474, %scatter.479, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.777 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.45), index=2
  %copy.1891 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.777)
  %get-tuple-element.778 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.15), index=19
  %convert.2374 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.778)
  %all-gather.335 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2374), channel_id=338, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.434 = bf16[2,8192,4096]{2,1,0} dot(%copy.1891, %all-gather.335), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.779 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.45), index=1
  %copy.1892 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.779)
  %convert.2375 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1892)
  %multiply.5390 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2375, %broadcast.11895)
  %convert.2376 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5390)
  %multiply.5391 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2375, %broadcast.11904)
  %multiply.5392 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5391, %broadcast.11902)
  %convert.2377 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5392)
  %select.2579 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2377, %broadcast.10254)
  %slice.552 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2579), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.120 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.552, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4075 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2376, %pad.120)
  %slice.553 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2579), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.121 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.553, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4076 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4075, %pad.121)
  %select.2580 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2377, %broadcast.10254)
  %slice.554 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2580), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.122 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.554, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4078 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4076, %pad.122)
  %slice.555 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2580), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.123 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.555, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4079 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4078, %pad.123)
  %get-tuple-element.780 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.15), index=16
  %convert.2378 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.780)
  %all-gather.336 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2378), channel_id=339, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.435 = bf16[2,8192,4096]{2,1,0} dot(%add.4079, %all-gather.336), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4080 = bf16[2,8192,4096]{2,1,0} add(%dot.434, %dot.435)
  %copy.1893 = bf16[2,8192,4096]{2,1,0} copy(%add.4080)
  %get-tuple-element.781 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.45), index=0
  %copy.1894 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.781)
  %convert.2379 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1894)
  %multiply.5403 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2379, %broadcast.11873)
  %convert.2380 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5403)
  %multiply.5404 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2379, %broadcast.11883)
  %multiply.5405 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5404, %broadcast.11881)
  %convert.2382 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5405)
  %select.2581 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2382, %broadcast.10265)
  %slice.556 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2581), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.124 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.556, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4081 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2380, %pad.124)
  %slice.557 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2581), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.125 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.557, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4082 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4081, %pad.125)
  %select.2582 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2382, %broadcast.10265)
  %slice.558 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2582), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.126 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.558, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4083 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4082, %pad.126)
  %slice.559 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2582), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.127 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.559, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4084 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4083, %pad.127)
  %get-tuple-element.782 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.15), index=18
  %convert.2383 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.782)
  %all-gather.337 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2383), channel_id=340, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.436 = bf16[2,8192,4096]{2,1,0} dot(%add.4084, %all-gather.337), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1895 = bf16[2,8192,4096]{2,1,0} copy(%dot.436)
  %add.4085 = bf16[2,8192,4096]{2,1,0} add(%copy.1893, %copy.1895)
  %copy.1896 = bf16[2,8192,4096]{2,1,0} copy(%add.4085)
  %get-tuple-element.783 = f32[4096]{0} get-tuple-element(%opt-barrier.15), index=15
  %convert.2384 = bf16[4096]{0} convert(%get-tuple-element.783)
  %broadcast.11969 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2384), dimensions={2}
  %multiply.5414 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1896, %broadcast.11969)
  %convert.2385 = f32[2,8192,4096]{2,1,0} convert(%multiply.5414)
  %convert.2387 = f32[2,8192,4096]{2,1,0} convert(%copy.1884)
  %multiply.5415 = f32[2,8192,4096]{2,1,0} multiply(%convert.2387, %convert.2387)
  %reduce.405 = f32[2,8192]{1,0} reduce(%multiply.5415, %constant.5451), dimensions={2}, to_apply=%region_365.17682
  %multiply.5416 = f32[2,8192]{1,0} multiply(%reduce.405, %broadcast.7109)
  %add.4086 = f32[2,8192]{1,0} add(%multiply.5416, %broadcast.7110)
  %reshape.11015 = f32[2,8192,1]{2,1,0} reshape(%add.4086)
  %rsqrt.160 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11015)
  %reshape.11016 = f32[2,8192]{1,0} reshape(%rsqrt.160)
  %broadcast.11974 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11016), dimensions={0,1}
  %multiply.5417 = f32[2,8192,4096]{2,1,0} multiply(%convert.2385, %broadcast.11974)
  %multiply.5418 = f32[2,8192,4096]{2,1,0} multiply(%convert.2387, %convert.2385)
  %reduce.406 = f32[2,8192]{1,0} reduce(%multiply.5418, %constant.5451), dimensions={2}, to_apply=%region_376.18121
  %reshape.11017 = f32[2,8192,1]{2,1,0} reshape(%reduce.406)
  %divide.915 = f32[2,8192,1]{2,1,0} divide(%rsqrt.160, %reshape.11015)
  %multiply.5419 = f32[2,8192,1]{2,1,0} multiply(%divide.915, %broadcast.10161)
  %multiply.5421 = f32[2,8192,1]{2,1,0} multiply(%reshape.11017, %multiply.5419)
  %multiply.5422 = f32[2,8192,1]{2,1,0} multiply(%multiply.5421, %broadcast.10163)
  %reshape.11018 = f32[2,8192]{1,0} reshape(%multiply.5422)
  %broadcast.11977 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11018), dimensions={0,1}
  %multiply.5423 = f32[2,8192,4096]{2,1,0} multiply(%convert.2387, %broadcast.11977)
  %add.4087 = f32[2,8192,4096]{2,1,0} add(%multiply.5417, %multiply.5423)
  %convert.2388 = bf16[2,8192,4096]{2,1,0} convert(%add.4087)
  %add.4088 = bf16[2,8192,4096]{2,1,0} add(%add.4054, %convert.2388)
  %copy.1897 = bf16[2,8192,4096]{2,1,0} copy(%add.4088)
  %tuple.125 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.105, %reduce-precision.106, %reduce-precision.107, %get-tuple-element.219, %get-tuple-element.220, /*index=5*/%reduce-precision.108, %reduce-precision.109, %reduce-precision.110, %reduce-precision.111, %constant.5507, /*index=10*/%constant.5507, %param.148, %param.149, %param.150, %param.147, /*index=15*/%param.142, %param.144, %param.146, %param.143, %param.145, /*index=20*/%copy.1385, %param.10, %param.7, %copy.1897)
  %opt-barrier.16 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.125)
  %get-tuple-element.784 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.16), index=23
  %copy.1898 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.784)
  %get-tuple-element.785 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.16), index=7
  %negate.911 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.785)
  %exponential.175 = bf16[2,8192,14336]{2,1,0} exponential(%negate.911)
  %add.4089 = bf16[2,8192,14336]{2,1,0} add(%exponential.175, %broadcast.7215)
  %divide.916 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4089)
  %multiply.5424 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.785, %divide.916)
  %copy.1899 = bf16[2,8192,4096]{2,1,0} copy(%copy.1898)
  %get-tuple-element.786 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.16), index=13
  %convert.2389 = bf16[14336,256]{1,0} convert(%get-tuple-element.786)
  %all-gather.338 = bf16[14336,4096]{1,0} all-gather(%convert.2389), channel_id=341, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.437 = bf16[2,8192,14336]{2,1,0} dot(%copy.1899, %all-gather.338), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1900 = bf16[2,8192,14336]{2,1,0} copy(%dot.437)
  %multiply.5425 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5424, %copy.1900)
  %get-tuple-element.787 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.16), index=12
  %convert.2390 = bf16[256,14336]{1,0} convert(%get-tuple-element.787)
  %all-gather.339 = bf16[4096,14336]{1,0} all-gather(%convert.2390), channel_id=342, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.438 = bf16[2,8192,4096]{2,1,0} dot(%multiply.5425, %all-gather.339), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.788 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.16), index=8
  %multiply.5426 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1900, %get-tuple-element.788)
  %multiply.5427 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5426, %divide.916)
  %multiply.5428 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.785, %multiply.5426)
  %subtract.275 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.916)
  %multiply.5429 = bf16[2,8192,14336]{2,1,0} multiply(%divide.916, %subtract.275)
  %multiply.5430 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5428, %multiply.5429)
  %add.4090 = bf16[2,8192,14336]{2,1,0} add(%multiply.5427, %multiply.5430)
  %get-tuple-element.789 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.16), index=11
  %convert.2392 = bf16[256,14336]{1,0} convert(%get-tuple-element.789)
  %all-gather.340 = bf16[4096,14336]{1,0} all-gather(%convert.2392), channel_id=343, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.439 = bf16[2,8192,4096]{2,1,0} dot(%add.4090, %all-gather.340), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4091 = bf16[2,8192,4096]{2,1,0} add(%dot.438, %dot.439)
  %copy.1901 = bf16[2,8192,4096]{2,1,0} copy(%add.4091)
  %get-tuple-element.790 = f32[4096]{0} get-tuple-element(%opt-barrier.16), index=14
  %convert.2393 = bf16[4096]{0} convert(%get-tuple-element.790)
  %broadcast.11980 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2393), dimensions={2}
  %multiply.5431 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1901, %broadcast.11980)
  %convert.2394 = f32[2,8192,4096]{2,1,0} convert(%multiply.5431)
  %get-tuple-element.791 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.16), index=20
  %copy.1902 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.791)
  %get-tuple-element.792 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.16), index=6
  %copy.1903 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.792)
  %add.4092 = bf16[2,8192,4096]{2,1,0} add(%copy.1902, %copy.1903)
  %convert.2395 = f32[2,8192,4096]{2,1,0} convert(%add.4092)
  %multiply.5432 = f32[2,8192,4096]{2,1,0} multiply(%convert.2395, %convert.2395)
  %reduce.407 = f32[2,8192]{1,0} reduce(%multiply.5432, %constant.5451), dimensions={2}, to_apply=%region_382.18408
  %multiply.5433 = f32[2,8192]{1,0} multiply(%reduce.407, %broadcast.7109)
  %add.4093 = f32[2,8192]{1,0} add(%multiply.5433, %broadcast.7110)
  %reshape.11019 = f32[2,8192,1]{2,1,0} reshape(%add.4093)
  %rsqrt.161 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11019)
  %reshape.11020 = f32[2,8192]{1,0} reshape(%rsqrt.161)
  %broadcast.11983 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11020), dimensions={0,1}
  %multiply.5434 = f32[2,8192,4096]{2,1,0} multiply(%convert.2394, %broadcast.11983)
  %multiply.5435 = f32[2,8192,4096]{2,1,0} multiply(%convert.2395, %convert.2394)
  %reduce.408 = f32[2,8192]{1,0} reduce(%multiply.5435, %constant.5451), dimensions={2}, to_apply=%region_385.18479
  %reshape.11021 = f32[2,8192,1]{2,1,0} reshape(%reduce.408)
  %divide.917 = f32[2,8192,1]{2,1,0} divide(%rsqrt.161, %reshape.11019)
  %multiply.5437 = f32[2,8192,1]{2,1,0} multiply(%divide.917, %broadcast.10161)
  %multiply.5439 = f32[2,8192,1]{2,1,0} multiply(%reshape.11021, %multiply.5437)
  %multiply.5440 = f32[2,8192,1]{2,1,0} multiply(%multiply.5439, %broadcast.10163)
  %reshape.11022 = f32[2,8192]{1,0} reshape(%multiply.5440)
  %broadcast.11985 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11022), dimensions={0,1}
  %multiply.5441 = f32[2,8192,4096]{2,1,0} multiply(%convert.2395, %broadcast.11985)
  %add.4094 = f32[2,8192,4096]{2,1,0} add(%multiply.5434, %multiply.5441)
  %convert.2396 = bf16[2,8192,4096]{2,1,0} convert(%add.4094)
  %add.4095 = bf16[2,8192,4096]{2,1,0} add(%copy.1898, %convert.2396)
  %get-tuple-element.793 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.16), index=0
  %convert.2397 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.793)
  %get-tuple-element.794 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.16), index=22
  %convert.2399 = f32[2,8192]{1,0} convert(%get-tuple-element.794)
  %broadcast.11986 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2399), dimensions={0,1}
  %divide.919 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.11986, %broadcast.7129)
  %cosine.97 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.919)
  %reshape.11024 = f32[2,8192,128]{2,1,0} reshape(%cosine.97)
  %broadcast.11995 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11024), dimensions={0,1,3}
  %multiply.5452 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2397, %broadcast.11995)
  %slice.560 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.793), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.561 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.793), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.192 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.560, %slice.561), dimensions={3}
  %slice.562 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.793), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.563 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.793), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.193 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.562, %slice.563), dimensions={3}
  %select.2586 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.192, %concatenate.193)
  %convert.2403 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2586)
  %sine.96 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.919)
  %reshape.11029 = f32[2,8192,128]{2,1,0} reshape(%sine.96)
  %broadcast.12001 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11029), dimensions={0,1,3}
  %multiply.5457 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2403, %broadcast.12001)
  %get-tuple-element.795 = s32[2]{0} get-tuple-element(%opt-barrier.16), index=9
  %broadcast.12002 = s32[64,2]{1,0} broadcast(%get-tuple-element.795), dimensions={1}
  %reshape.11031 = s32[128]{0} reshape(%broadcast.12002)
  %convert.2404 = f32[128]{0} convert(%reshape.11031)
  %broadcast.12003 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2404), dimensions={3}
  %multiply.5458 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5457, %broadcast.12003)
  %add.4099 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5452, %multiply.5458)
  %convert.2405 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4099)
  %copy.1904 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2405)
  %get-tuple-element.796 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.16), index=1
  %convert.2406 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.796)
  %broadcast.12013 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11024), dimensions={0,1,3}
  %multiply.5471 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2406, %broadcast.12013)
  %slice.564 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.796), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.565 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.796), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.194 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.564, %slice.565), dimensions={3}
  %slice.566 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.796), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.567 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.796), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.195 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.566, %slice.567), dimensions={3}
  %select.2590 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.194, %concatenate.195)
  %convert.2411 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2590)
  %broadcast.12019 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11029), dimensions={0,1,3}
  %multiply.5477 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2411, %broadcast.12019)
  %get-tuple-element.797 = s32[2]{0} get-tuple-element(%opt-barrier.16), index=10
  %broadcast.12021 = s32[64,2]{1,0} broadcast(%get-tuple-element.797), dimensions={1}
  %reshape.11040 = s32[128]{0} reshape(%broadcast.12021)
  %convert.2412 = f32[128]{0} convert(%reshape.11040)
  %broadcast.12023 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2412), dimensions={3}
  %multiply.5478 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5477, %broadcast.12023)
  %add.4103 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5471, %multiply.5478)
  %convert.2413 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4103)
  %copy.1905 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2413)
  %get-tuple-element.798 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.16), index=2
  %copy.1906 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.798)
  %get-tuple-element.799 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.16), index=3
  %get-tuple-element.800 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.16), index=4
  %get-tuple-element.801 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.16), index=5
  %copy.1907 = bf16[2,8192,4096]{2,1,0} copy(%add.4095)
  %get-tuple-element.802 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.16), index=17
  %convert.2414 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.802)
  %all-gather.341 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2414), channel_id=344, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.440 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1907, %all-gather.341), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1908 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.440)
  %get-tuple-element.803 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.16), index=21
  %broadcast.12024 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.803), dimensions={0,1}
  %broadcast.12025 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.803), dimensions={0,2}
  %compare.4076 = pred[2,8192,8192]{2,1,0} compare(%broadcast.12024, %broadcast.12025), direction=EQ
  %and.882 = pred[2,8192,8192]{2,1,0} and(%compare.4076, %broadcast.7176)
  %select.2591 = f32[2,8192,8192]{2,1,0} select(%and.882, %broadcast.7177, %broadcast.7179)
  %compare.4078 = pred[2,8192,8192]{2,1,0} compare(%select.2591, %broadcast.7177), direction=NE
  %not.112 = pred[2,8192,8192]{2,1,0} not(%compare.4078)
  %convert.2415 = s32[2,8192,8192]{2,1,0} convert(%not.112)
  %reduce.409 = s32[2,8192]{1,0} reduce(%convert.2415, %constant.5439), dimensions={1}, to_apply=%region_379.18383
  %reshape.11041 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.409)
  %slice.568 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11041), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11045 = s32[2,1]{1,0} reshape(%slice.568)
  %reshape.11054 = s32[2]{0} reshape(%reshape.11045)
  %compare.4092 = pred[2]{0} compare(%reshape.11054, %broadcast.7184), direction=LT
  %reduce-window.290 = s32[2]{0} reduce-window(%reshape.11054, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.16
  %select.2601 = s32[2]{0} select(%compare.4092, %broadcast.7199, %reduce-window.290)
  %scatter.484 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2601), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.16
  %reduce.410 = s32[2,8192]{1,0} reduce(%convert.2415, %constant.5439), dimensions={2}, to_apply=%region_380.18391
  %reshape.11046 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.410)
  %reduce.411 = s32[2,1]{1,0} reduce(%reshape.11046, %constant.5570), dimensions={3,2}, to_apply=%region_381.18396
  %reshape.11062 = s32[2]{0} reshape(%reduce.411)
  %compare.4107 = pred[2]{0} compare(%reshape.11062, %broadcast.7184), direction=LT
  %reduce-window.293 = s32[2]{0} reduce-window(%reshape.11062, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.16.clone
  %select.2611 = s32[2]{0} select(%compare.4107, %broadcast.7199, %reduce-window.293)
  %scatter.489 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2611), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.16
  %custom-call.46 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1904, %copy.1905, %copy.1906, %constant.5555, %get-tuple-element.799, /*index=5*/%get-tuple-element.800, %get-tuple-element.801, %copy.1908, %scatter.484, %scatter.489, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.810 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.46), index=2
  %copy.1909 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.810)
  %get-tuple-element.811 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.16), index=19
  %convert.2419 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.811)
  %all-gather.342 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2419), channel_id=345, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.441 = bf16[2,8192,4096]{2,1,0} dot(%copy.1909, %all-gather.342), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.812 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.46), index=1
  %copy.1910 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.812)
  %convert.2420 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1910)
  %multiply.5480 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2420, %broadcast.12013)
  %convert.2421 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5480)
  %multiply.5481 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2420, %broadcast.12023)
  %multiply.5482 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5481, %broadcast.12019)
  %convert.2422 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5482)
  %select.2612 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2422, %broadcast.10254)
  %slice.569 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2612), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.128 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.569, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4118 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2421, %pad.128)
  %slice.570 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2612), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.129 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.570, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4119 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4118, %pad.129)
  %select.2613 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2422, %broadcast.10254)
  %slice.571 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2613), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.130 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.571, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4120 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4119, %pad.130)
  %slice.572 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2613), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.131 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.572, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4121 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4120, %pad.131)
  %get-tuple-element.813 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.16), index=16
  %convert.2423 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.813)
  %all-gather.343 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2423), channel_id=346, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.442 = bf16[2,8192,4096]{2,1,0} dot(%add.4121, %all-gather.343), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4122 = bf16[2,8192,4096]{2,1,0} add(%dot.441, %dot.442)
  %copy.1911 = bf16[2,8192,4096]{2,1,0} copy(%add.4122)
  %get-tuple-element.814 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.46), index=0
  %copy.1912 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.814)
  %convert.2424 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1912)
  %multiply.5491 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2424, %broadcast.11995)
  %convert.2426 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5491)
  %multiply.5492 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2424, %broadcast.12003)
  %multiply.5493 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5492, %broadcast.12001)
  %convert.2427 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5493)
  %select.2614 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2427, %broadcast.10265)
  %slice.573 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2614), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.132 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.573, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4123 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2426, %pad.132)
  %slice.574 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2614), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.133 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.574, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4124 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4123, %pad.133)
  %select.2615 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2427, %broadcast.10265)
  %slice.575 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2615), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.134 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.575, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4125 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4124, %pad.134)
  %slice.576 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2615), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.135 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.576, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4126 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4125, %pad.135)
  %get-tuple-element.815 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.16), index=18
  %convert.2428 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.815)
  %all-gather.344 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2428), channel_id=347, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.443 = bf16[2,8192,4096]{2,1,0} dot(%add.4126, %all-gather.344), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1913 = bf16[2,8192,4096]{2,1,0} copy(%dot.443)
  %add.4127 = bf16[2,8192,4096]{2,1,0} add(%copy.1911, %copy.1913)
  %copy.1914 = bf16[2,8192,4096]{2,1,0} copy(%add.4127)
  %get-tuple-element.816 = f32[4096]{0} get-tuple-element(%opt-barrier.16), index=15
  %convert.2429 = bf16[4096]{0} convert(%get-tuple-element.816)
  %broadcast.12076 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2429), dimensions={2}
  %multiply.5502 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1914, %broadcast.12076)
  %convert.2430 = f32[2,8192,4096]{2,1,0} convert(%multiply.5502)
  %convert.2431 = f32[2,8192,4096]{2,1,0} convert(%copy.1902)
  %multiply.5503 = f32[2,8192,4096]{2,1,0} multiply(%convert.2431, %convert.2431)
  %reduce.412 = f32[2,8192]{1,0} reduce(%multiply.5503, %constant.5451), dimensions={2}, to_apply=%region_378.18174
  %multiply.5504 = f32[2,8192]{1,0} multiply(%reduce.412, %broadcast.7109)
  %add.4128 = f32[2,8192]{1,0} add(%multiply.5504, %broadcast.7110)
  %reshape.11084 = f32[2,8192,1]{2,1,0} reshape(%add.4128)
  %rsqrt.162 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11084)
  %reshape.11086 = f32[2,8192]{1,0} reshape(%rsqrt.162)
  %broadcast.12079 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11086), dimensions={0,1}
  %multiply.5505 = f32[2,8192,4096]{2,1,0} multiply(%convert.2430, %broadcast.12079)
  %multiply.5506 = f32[2,8192,4096]{2,1,0} multiply(%convert.2431, %convert.2430)
  %reduce.413 = f32[2,8192]{1,0} reduce(%multiply.5506, %constant.5451), dimensions={2}, to_apply=%region_389.18613
  %reshape.11087 = f32[2,8192,1]{2,1,0} reshape(%reduce.413)
  %divide.924 = f32[2,8192,1]{2,1,0} divide(%rsqrt.162, %reshape.11084)
  %multiply.5507 = f32[2,8192,1]{2,1,0} multiply(%divide.924, %broadcast.10161)
  %multiply.5508 = f32[2,8192,1]{2,1,0} multiply(%reshape.11087, %multiply.5507)
  %multiply.5509 = f32[2,8192,1]{2,1,0} multiply(%multiply.5508, %broadcast.10163)
  %reshape.11088 = f32[2,8192]{1,0} reshape(%multiply.5509)
  %broadcast.12081 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11088), dimensions={0,1}
  %multiply.5510 = f32[2,8192,4096]{2,1,0} multiply(%convert.2431, %broadcast.12081)
  %add.4129 = f32[2,8192,4096]{2,1,0} add(%multiply.5505, %multiply.5510)
  %convert.2432 = bf16[2,8192,4096]{2,1,0} convert(%add.4129)
  %add.4130 = bf16[2,8192,4096]{2,1,0} add(%add.4095, %convert.2432)
  %copy.1915 = bf16[2,8192,4096]{2,1,0} copy(%add.4130)
  %tuple.127 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.98, %reduce-precision.99, %reduce-precision.100, %get-tuple-element.217, %get-tuple-element.218, /*index=5*/%reduce-precision.101, %reduce-precision.102, %reduce-precision.103, %reduce-precision.104, %constant.5507, /*index=10*/%constant.5507, %param.139, %param.140, %param.141, %param.138, /*index=15*/%param.133, %param.135, %param.137, %param.134, %param.136, /*index=20*/%copy.1372, %param.10, %param.7, %copy.1915)
  %opt-barrier.17 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.127)
  %get-tuple-element.817 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.17), index=23
  %copy.1916 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.817)
  %get-tuple-element.818 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.17), index=7
  %negate.914 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.818)
  %exponential.176 = bf16[2,8192,14336]{2,1,0} exponential(%negate.914)
  %add.4131 = bf16[2,8192,14336]{2,1,0} add(%exponential.176, %broadcast.7215)
  %divide.925 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4131)
  %multiply.5511 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.818, %divide.925)
  %copy.1917 = bf16[2,8192,4096]{2,1,0} copy(%copy.1916)
  %get-tuple-element.819 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.17), index=13
  %convert.2434 = bf16[14336,256]{1,0} convert(%get-tuple-element.819)
  %all-gather.345 = bf16[14336,4096]{1,0} all-gather(%convert.2434), channel_id=348, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.444 = bf16[2,8192,14336]{2,1,0} dot(%copy.1917, %all-gather.345), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1918 = bf16[2,8192,14336]{2,1,0} copy(%dot.444)
  %multiply.5512 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5511, %copy.1918)
  %get-tuple-element.820 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.17), index=12
  %convert.2435 = bf16[256,14336]{1,0} convert(%get-tuple-element.820)
  %all-gather.346 = bf16[4096,14336]{1,0} all-gather(%convert.2435), channel_id=349, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.445 = bf16[2,8192,4096]{2,1,0} dot(%multiply.5512, %all-gather.346), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.821 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.17), index=8
  %multiply.5513 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1918, %get-tuple-element.821)
  %multiply.5514 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5513, %divide.925)
  %multiply.5515 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.818, %multiply.5513)
  %subtract.280 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.925)
  %multiply.5516 = bf16[2,8192,14336]{2,1,0} multiply(%divide.925, %subtract.280)
  %multiply.5517 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5515, %multiply.5516)
  %add.4132 = bf16[2,8192,14336]{2,1,0} add(%multiply.5514, %multiply.5517)
  %get-tuple-element.822 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.17), index=11
  %convert.2436 = bf16[256,14336]{1,0} convert(%get-tuple-element.822)
  %all-gather.347 = bf16[4096,14336]{1,0} all-gather(%convert.2436), channel_id=350, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.446 = bf16[2,8192,4096]{2,1,0} dot(%add.4132, %all-gather.347), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4133 = bf16[2,8192,4096]{2,1,0} add(%dot.445, %dot.446)
  %copy.1919 = bf16[2,8192,4096]{2,1,0} copy(%add.4133)
  %get-tuple-element.823 = f32[4096]{0} get-tuple-element(%opt-barrier.17), index=14
  %convert.2437 = bf16[4096]{0} convert(%get-tuple-element.823)
  %broadcast.12083 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2437), dimensions={2}
  %multiply.5518 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1919, %broadcast.12083)
  %convert.2438 = f32[2,8192,4096]{2,1,0} convert(%multiply.5518)
  %get-tuple-element.824 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.17), index=20
  %copy.1920 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.824)
  %get-tuple-element.825 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.17), index=6
  %copy.1921 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.825)
  %add.4135 = bf16[2,8192,4096]{2,1,0} add(%copy.1920, %copy.1921)
  %convert.2439 = f32[2,8192,4096]{2,1,0} convert(%add.4135)
  %multiply.5519 = f32[2,8192,4096]{2,1,0} multiply(%convert.2439, %convert.2439)
  %reduce.414 = f32[2,8192]{1,0} reduce(%multiply.5519, %constant.5451), dimensions={2}, to_apply=%region_395.18900
  %multiply.5520 = f32[2,8192]{1,0} multiply(%reduce.414, %broadcast.7109)
  %add.4136 = f32[2,8192]{1,0} add(%multiply.5520, %broadcast.7110)
  %reshape.11089 = f32[2,8192,1]{2,1,0} reshape(%add.4136)
  %rsqrt.163 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11089)
  %reshape.11090 = f32[2,8192]{1,0} reshape(%rsqrt.163)
  %broadcast.12087 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11090), dimensions={0,1}
  %multiply.5521 = f32[2,8192,4096]{2,1,0} multiply(%convert.2438, %broadcast.12087)
  %multiply.5522 = f32[2,8192,4096]{2,1,0} multiply(%convert.2439, %convert.2438)
  %reduce.415 = f32[2,8192]{1,0} reduce(%multiply.5522, %constant.5451), dimensions={2}, to_apply=%region_398.18971
  %reshape.11091 = f32[2,8192,1]{2,1,0} reshape(%reduce.415)
  %divide.926 = f32[2,8192,1]{2,1,0} divide(%rsqrt.163, %reshape.11089)
  %multiply.5523 = f32[2,8192,1]{2,1,0} multiply(%divide.926, %broadcast.10161)
  %multiply.5524 = f32[2,8192,1]{2,1,0} multiply(%reshape.11091, %multiply.5523)
  %multiply.5525 = f32[2,8192,1]{2,1,0} multiply(%multiply.5524, %broadcast.10163)
  %reshape.11092 = f32[2,8192]{1,0} reshape(%multiply.5525)
  %broadcast.12090 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11092), dimensions={0,1}
  %multiply.5526 = f32[2,8192,4096]{2,1,0} multiply(%convert.2439, %broadcast.12090)
  %add.4137 = f32[2,8192,4096]{2,1,0} add(%multiply.5521, %multiply.5526)
  %convert.2440 = bf16[2,8192,4096]{2,1,0} convert(%add.4137)
  %add.4138 = bf16[2,8192,4096]{2,1,0} add(%copy.1916, %convert.2440)
  %get-tuple-element.826 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.17), index=0
  %convert.2441 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.826)
  %get-tuple-element.827 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.17), index=22
  %convert.2442 = f32[2,8192]{1,0} convert(%get-tuple-element.827)
  %broadcast.12091 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2442), dimensions={0,1}
  %divide.928 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.12091, %broadcast.7129)
  %cosine.99 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.928)
  %reshape.11094 = f32[2,8192,128]{2,1,0} reshape(%cosine.99)
  %broadcast.12101 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11094), dimensions={0,1,3}
  %multiply.5538 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2441, %broadcast.12101)
  %slice.577 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.826), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.578 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.826), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.196 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.577, %slice.578), dimensions={3}
  %slice.579 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.826), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.580 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.826), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.197 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.579, %slice.580), dimensions={3}
  %select.2620 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.196, %concatenate.197)
  %convert.2446 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2620)
  %sine.98 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.928)
  %reshape.11099 = f32[2,8192,128]{2,1,0} reshape(%sine.98)
  %broadcast.12107 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11099), dimensions={0,1,3}
  %multiply.5543 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2446, %broadcast.12107)
  %get-tuple-element.828 = s32[2]{0} get-tuple-element(%opt-barrier.17), index=9
  %broadcast.12108 = s32[64,2]{1,0} broadcast(%get-tuple-element.828), dimensions={1}
  %reshape.11100 = s32[128]{0} reshape(%broadcast.12108)
  %convert.2447 = f32[128]{0} convert(%reshape.11100)
  %broadcast.12109 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2447), dimensions={3}
  %multiply.5544 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5543, %broadcast.12109)
  %add.4143 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5538, %multiply.5544)
  %convert.2448 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4143)
  %copy.1922 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2448)
  %get-tuple-element.829 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.17), index=1
  %convert.2449 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.829)
  %broadcast.12122 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11094), dimensions={0,1,3}
  %multiply.5557 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2449, %broadcast.12122)
  %slice.581 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.829), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.582 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.829), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.198 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.581, %slice.582), dimensions={3}
  %slice.583 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.829), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.584 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.829), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.199 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.583, %slice.584), dimensions={3}
  %select.2624 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.198, %concatenate.199)
  %convert.2456 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2624)
  %broadcast.12131 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11099), dimensions={0,1,3}
  %multiply.5562 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2456, %broadcast.12131)
  %get-tuple-element.830 = s32[2]{0} get-tuple-element(%opt-barrier.17), index=10
  %broadcast.12132 = s32[64,2]{1,0} broadcast(%get-tuple-element.830), dimensions={1}
  %reshape.11110 = s32[128]{0} reshape(%broadcast.12132)
  %convert.2457 = f32[128]{0} convert(%reshape.11110)
  %broadcast.12133 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2457), dimensions={3}
  %multiply.5563 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5562, %broadcast.12133)
  %add.4148 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5557, %multiply.5563)
  %convert.2458 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4148)
  %copy.1923 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2458)
  %get-tuple-element.831 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.17), index=2
  %copy.1924 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.831)
  %get-tuple-element.832 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.17), index=3
  %get-tuple-element.833 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.17), index=4
  %get-tuple-element.834 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.17), index=5
  %copy.1925 = bf16[2,8192,4096]{2,1,0} copy(%add.4138)
  %get-tuple-element.835 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.17), index=17
  %convert.2459 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.835)
  %all-gather.348 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2459), channel_id=351, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.447 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1925, %all-gather.348), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1926 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.447)
  %get-tuple-element.836 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.17), index=21
  %broadcast.12134 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.836), dimensions={0,1}
  %broadcast.12135 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.836), dimensions={0,2}
  %compare.4126 = pred[2,8192,8192]{2,1,0} compare(%broadcast.12134, %broadcast.12135), direction=EQ
  %and.891 = pred[2,8192,8192]{2,1,0} and(%compare.4126, %broadcast.7176)
  %select.2625 = f32[2,8192,8192]{2,1,0} select(%and.891, %broadcast.7177, %broadcast.7179)
  %compare.4128 = pred[2,8192,8192]{2,1,0} compare(%select.2625, %broadcast.7177), direction=NE
  %not.113 = pred[2,8192,8192]{2,1,0} not(%compare.4128)
  %convert.2460 = s32[2,8192,8192]{2,1,0} convert(%not.113)
  %reduce.416 = s32[2,8192]{1,0} reduce(%convert.2460, %constant.5439), dimensions={1}, to_apply=%region_392.18875
  %reshape.11111 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.416)
  %slice.585 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11111), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11113 = s32[2,1]{1,0} reshape(%slice.585)
  %reshape.11122 = s32[2]{0} reshape(%reshape.11113)
  %compare.4141 = pred[2]{0} compare(%reshape.11122, %broadcast.7184), direction=LT
  %reduce-window.296 = s32[2]{0} reduce-window(%reshape.11122, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.17
  %select.2635 = s32[2]{0} select(%compare.4141, %broadcast.7199, %reduce-window.296)
  %scatter.494 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2635), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.17
  %reduce.417 = s32[2,8192]{1,0} reduce(%convert.2460, %constant.5439), dimensions={2}, to_apply=%region_393.18883
  %reshape.11114 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.417)
  %reduce.418 = s32[2,1]{1,0} reduce(%reshape.11114, %constant.5570), dimensions={3,2}, to_apply=%region_394.18888
  %reshape.11130 = s32[2]{0} reshape(%reduce.418)
  %compare.4154 = pred[2]{0} compare(%reshape.11130, %broadcast.7184), direction=LT
  %reduce-window.299 = s32[2]{0} reduce-window(%reshape.11130, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.17.clone
  %select.2647 = s32[2]{0} select(%compare.4154, %broadcast.7199, %reduce-window.299)
  %scatter.499 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2647), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.17
  %custom-call.47 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1922, %copy.1923, %copy.1924, %constant.5555, %get-tuple-element.832, /*index=5*/%get-tuple-element.833, %get-tuple-element.834, %copy.1926, %scatter.494, %scatter.499, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.843 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.47), index=2
  %copy.1927 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.843)
  %get-tuple-element.844 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.17), index=19
  %convert.2464 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.844)
  %all-gather.349 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2464), channel_id=352, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.448 = bf16[2,8192,4096]{2,1,0} dot(%copy.1927, %all-gather.349), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.845 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.47), index=1
  %copy.1928 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.845)
  %convert.2465 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1928)
  %multiply.5566 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2465, %broadcast.12122)
  %convert.2466 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5566)
  %multiply.5567 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2465, %broadcast.12133)
  %multiply.5568 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5567, %broadcast.12131)
  %convert.2467 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5568)
  %select.2648 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2467, %broadcast.10254)
  %slice.586 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2648), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.136 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.586, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4161 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2466, %pad.136)
  %slice.587 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2648), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.137 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.587, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4162 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4161, %pad.137)
  %select.2649 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2467, %broadcast.10254)
  %slice.588 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2649), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.138 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.588, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4163 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4162, %pad.138)
  %slice.589 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2649), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.139 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.589, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4164 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4163, %pad.139)
  %get-tuple-element.846 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.17), index=16
  %convert.2468 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.846)
  %all-gather.350 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2468), channel_id=353, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.449 = bf16[2,8192,4096]{2,1,0} dot(%add.4164, %all-gather.350), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4165 = bf16[2,8192,4096]{2,1,0} add(%dot.448, %dot.449)
  %copy.1929 = bf16[2,8192,4096]{2,1,0} copy(%add.4165)
  %get-tuple-element.847 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.47), index=0
  %copy.1930 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.847)
  %convert.2469 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1930)
  %multiply.5578 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2469, %broadcast.12101)
  %convert.2472 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5578)
  %multiply.5579 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2469, %broadcast.12109)
  %multiply.5580 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5579, %broadcast.12107)
  %convert.2473 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5580)
  %select.2650 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2473, %broadcast.10265)
  %slice.590 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2650), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.140 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.590, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4166 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2472, %pad.140)
  %slice.591 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2650), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.141 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.591, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4167 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4166, %pad.141)
  %select.2651 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2473, %broadcast.10265)
  %slice.592 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2651), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.142 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.592, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4168 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4167, %pad.142)
  %slice.593 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2651), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.143 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.593, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4169 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4168, %pad.143)
  %get-tuple-element.848 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.17), index=18
  %convert.2474 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.848)
  %all-gather.351 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2474), channel_id=354, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.450 = bf16[2,8192,4096]{2,1,0} dot(%add.4169, %all-gather.351), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1931 = bf16[2,8192,4096]{2,1,0} copy(%dot.450)
  %add.4171 = bf16[2,8192,4096]{2,1,0} add(%copy.1929, %copy.1931)
  %copy.1932 = bf16[2,8192,4096]{2,1,0} copy(%add.4171)
  %get-tuple-element.849 = f32[4096]{0} get-tuple-element(%opt-barrier.17), index=15
  %convert.2475 = bf16[4096]{0} convert(%get-tuple-element.849)
  %broadcast.12188 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2475), dimensions={2}
  %multiply.5590 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1932, %broadcast.12188)
  %convert.2476 = f32[2,8192,4096]{2,1,0} convert(%multiply.5590)
  %convert.2477 = f32[2,8192,4096]{2,1,0} convert(%copy.1920)
  %multiply.5591 = f32[2,8192,4096]{2,1,0} multiply(%convert.2477, %convert.2477)
  %reduce.419 = f32[2,8192]{1,0} reduce(%multiply.5591, %constant.5451), dimensions={2}, to_apply=%region_391.18666
  %multiply.5592 = f32[2,8192]{1,0} multiply(%reduce.419, %broadcast.7109)
  %add.4172 = f32[2,8192]{1,0} add(%multiply.5592, %broadcast.7110)
  %reshape.11154 = f32[2,8192,1]{2,1,0} reshape(%add.4172)
  %rsqrt.164 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11154)
  %reshape.11155 = f32[2,8192]{1,0} reshape(%rsqrt.164)
  %broadcast.12191 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11155), dimensions={0,1}
  %multiply.5593 = f32[2,8192,4096]{2,1,0} multiply(%convert.2476, %broadcast.12191)
  %multiply.5595 = f32[2,8192,4096]{2,1,0} multiply(%convert.2477, %convert.2476)
  %reduce.420 = f32[2,8192]{1,0} reduce(%multiply.5595, %constant.5451), dimensions={2}, to_apply=%region_402.19105
  %reshape.11156 = f32[2,8192,1]{2,1,0} reshape(%reduce.420)
  %divide.933 = f32[2,8192,1]{2,1,0} divide(%rsqrt.164, %reshape.11154)
  %multiply.5596 = f32[2,8192,1]{2,1,0} multiply(%divide.933, %broadcast.10161)
  %multiply.5597 = f32[2,8192,1]{2,1,0} multiply(%reshape.11156, %multiply.5596)
  %multiply.5598 = f32[2,8192,1]{2,1,0} multiply(%multiply.5597, %broadcast.10163)
  %reshape.11157 = f32[2,8192]{1,0} reshape(%multiply.5598)
  %broadcast.12193 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11157), dimensions={0,1}
  %multiply.5599 = f32[2,8192,4096]{2,1,0} multiply(%convert.2477, %broadcast.12193)
  %add.4173 = f32[2,8192,4096]{2,1,0} add(%multiply.5593, %multiply.5599)
  %convert.2479 = bf16[2,8192,4096]{2,1,0} convert(%add.4173)
  %add.4174 = bf16[2,8192,4096]{2,1,0} add(%add.4138, %convert.2479)
  %copy.1933 = bf16[2,8192,4096]{2,1,0} copy(%add.4174)
  %tuple.129 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.91, %reduce-precision.92, %reduce-precision.93, %get-tuple-element.215, %get-tuple-element.216, /*index=5*/%reduce-precision.94, %reduce-precision.95, %reduce-precision.96, %reduce-precision.97, %constant.5507, /*index=10*/%constant.5507, %param.130, %param.131, %param.132, %param.129, /*index=15*/%param.124, %param.126, %param.128, %param.125, %param.127, /*index=20*/%copy.1359, %param.10, %param.7, %copy.1933)
  %opt-barrier.18 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.129)
  %get-tuple-element.850 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.18), index=23
  %copy.1934 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.850)
  %get-tuple-element.851 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.18), index=7
  %negate.917 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.851)
  %exponential.177 = bf16[2,8192,14336]{2,1,0} exponential(%negate.917)
  %add.4175 = bf16[2,8192,14336]{2,1,0} add(%exponential.177, %broadcast.7215)
  %divide.934 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4175)
  %multiply.5600 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.851, %divide.934)
  %copy.1935 = bf16[2,8192,4096]{2,1,0} copy(%copy.1934)
  %get-tuple-element.852 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.18), index=13
  %convert.2480 = bf16[14336,256]{1,0} convert(%get-tuple-element.852)
  %all-gather.352 = bf16[14336,4096]{1,0} all-gather(%convert.2480), channel_id=355, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.451 = bf16[2,8192,14336]{2,1,0} dot(%copy.1935, %all-gather.352), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1936 = bf16[2,8192,14336]{2,1,0} copy(%dot.451)
  %multiply.5601 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5600, %copy.1936)
  %get-tuple-element.853 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.18), index=12
  %convert.2481 = bf16[256,14336]{1,0} convert(%get-tuple-element.853)
  %all-gather.353 = bf16[4096,14336]{1,0} all-gather(%convert.2481), channel_id=356, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.452 = bf16[2,8192,4096]{2,1,0} dot(%multiply.5601, %all-gather.353), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.854 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.18), index=8
  %multiply.5602 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1936, %get-tuple-element.854)
  %multiply.5603 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5602, %divide.934)
  %multiply.5604 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.851, %multiply.5602)
  %subtract.285 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.934)
  %multiply.5605 = bf16[2,8192,14336]{2,1,0} multiply(%divide.934, %subtract.285)
  %multiply.5606 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5604, %multiply.5605)
  %add.4176 = bf16[2,8192,14336]{2,1,0} add(%multiply.5603, %multiply.5606)
  %get-tuple-element.855 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.18), index=11
  %convert.2483 = bf16[256,14336]{1,0} convert(%get-tuple-element.855)
  %all-gather.354 = bf16[4096,14336]{1,0} all-gather(%convert.2483), channel_id=357, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.453 = bf16[2,8192,4096]{2,1,0} dot(%add.4176, %all-gather.354), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4178 = bf16[2,8192,4096]{2,1,0} add(%dot.452, %dot.453)
  %copy.1937 = bf16[2,8192,4096]{2,1,0} copy(%add.4178)
  %get-tuple-element.856 = f32[4096]{0} get-tuple-element(%opt-barrier.18), index=14
  %convert.2484 = bf16[4096]{0} convert(%get-tuple-element.856)
  %broadcast.12195 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2484), dimensions={2}
  %multiply.5607 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1937, %broadcast.12195)
  %convert.2485 = f32[2,8192,4096]{2,1,0} convert(%multiply.5607)
  %get-tuple-element.857 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.18), index=20
  %copy.1938 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.857)
  %get-tuple-element.858 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.18), index=6
  %copy.1939 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.858)
  %add.4179 = bf16[2,8192,4096]{2,1,0} add(%copy.1938, %copy.1939)
  %convert.2486 = f32[2,8192,4096]{2,1,0} convert(%add.4179)
  %multiply.5608 = f32[2,8192,4096]{2,1,0} multiply(%convert.2486, %convert.2486)
  %reduce.421 = f32[2,8192]{1,0} reduce(%multiply.5608, %constant.5451), dimensions={2}, to_apply=%region_408.19392
  %multiply.5609 = f32[2,8192]{1,0} multiply(%reduce.421, %broadcast.7109)
  %add.4180 = f32[2,8192]{1,0} add(%multiply.5609, %broadcast.7110)
  %reshape.11158 = f32[2,8192,1]{2,1,0} reshape(%add.4180)
  %rsqrt.165 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11158)
  %reshape.11159 = f32[2,8192]{1,0} reshape(%rsqrt.165)
  %broadcast.12198 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11159), dimensions={0,1}
  %multiply.5610 = f32[2,8192,4096]{2,1,0} multiply(%convert.2485, %broadcast.12198)
  %multiply.5611 = f32[2,8192,4096]{2,1,0} multiply(%convert.2486, %convert.2485)
  %reduce.422 = f32[2,8192]{1,0} reduce(%multiply.5611, %constant.5451), dimensions={2}, to_apply=%region_411.19463
  %reshape.11160 = f32[2,8192,1]{2,1,0} reshape(%reduce.422)
  %divide.935 = f32[2,8192,1]{2,1,0} divide(%rsqrt.165, %reshape.11158)
  %multiply.5612 = f32[2,8192,1]{2,1,0} multiply(%divide.935, %broadcast.10161)
  %multiply.5613 = f32[2,8192,1]{2,1,0} multiply(%reshape.11160, %multiply.5612)
  %multiply.5614 = f32[2,8192,1]{2,1,0} multiply(%multiply.5613, %broadcast.10163)
  %reshape.11161 = f32[2,8192]{1,0} reshape(%multiply.5614)
  %broadcast.12200 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11161), dimensions={0,1}
  %multiply.5615 = f32[2,8192,4096]{2,1,0} multiply(%convert.2486, %broadcast.12200)
  %add.4181 = f32[2,8192,4096]{2,1,0} add(%multiply.5610, %multiply.5615)
  %convert.2488 = bf16[2,8192,4096]{2,1,0} convert(%add.4181)
  %add.4183 = bf16[2,8192,4096]{2,1,0} add(%copy.1934, %convert.2488)
  %get-tuple-element.859 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.18), index=0
  %convert.2489 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.859)
  %get-tuple-element.860 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.18), index=22
  %convert.2490 = f32[2,8192]{1,0} convert(%get-tuple-element.860)
  %broadcast.12201 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2490), dimensions={0,1}
  %divide.937 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.12201, %broadcast.7129)
  %cosine.101 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.937)
  %reshape.11163 = f32[2,8192,128]{2,1,0} reshape(%cosine.101)
  %broadcast.12212 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11163), dimensions={0,1,3}
  %multiply.5627 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2489, %broadcast.12212)
  %slice.594 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.859), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.595 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.859), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.200 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.594, %slice.595), dimensions={3}
  %slice.596 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.859), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.597 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.859), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.201 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.596, %slice.597), dimensions={3}
  %select.2655 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.200, %concatenate.201)
  %convert.2495 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2655)
  %sine.100 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.937)
  %reshape.11170 = f32[2,8192,128]{2,1,0} reshape(%sine.100)
  %broadcast.12218 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11170), dimensions={0,1,3}
  %multiply.5632 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2495, %broadcast.12218)
  %get-tuple-element.861 = s32[2]{0} get-tuple-element(%opt-barrier.18), index=9
  %broadcast.12219 = s32[64,2]{1,0} broadcast(%get-tuple-element.861), dimensions={1}
  %reshape.11171 = s32[128]{0} reshape(%broadcast.12219)
  %convert.2496 = f32[128]{0} convert(%reshape.11171)
  %broadcast.12221 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2496), dimensions={3}
  %multiply.5633 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5632, %broadcast.12221)
  %add.4187 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5627, %multiply.5633)
  %convert.2497 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4187)
  %copy.1940 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2497)
  %get-tuple-element.862 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.18), index=1
  %convert.2498 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.862)
  %broadcast.12233 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11163), dimensions={0,1,3}
  %multiply.5646 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2498, %broadcast.12233)
  %slice.598 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.862), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.599 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.862), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.202 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.598, %slice.599), dimensions={3}
  %slice.600 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.862), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.601 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.862), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.203 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.600, %slice.601), dimensions={3}
  %select.2659 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.202, %concatenate.203)
  %convert.2503 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2659)
  %broadcast.12239 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11170), dimensions={0,1,3}
  %multiply.5651 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2503, %broadcast.12239)
  %get-tuple-element.863 = s32[2]{0} get-tuple-element(%opt-barrier.18), index=10
  %broadcast.12240 = s32[64,2]{1,0} broadcast(%get-tuple-element.863), dimensions={1}
  %reshape.11180 = s32[128]{0} reshape(%broadcast.12240)
  %convert.2504 = f32[128]{0} convert(%reshape.11180)
  %broadcast.12241 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2504), dimensions={3}
  %multiply.5652 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5651, %broadcast.12241)
  %add.4191 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5646, %multiply.5652)
  %convert.2505 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4191)
  %copy.1941 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2505)
  %get-tuple-element.864 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.18), index=2
  %copy.1942 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.864)
  %get-tuple-element.865 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.18), index=3
  %get-tuple-element.866 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.18), index=4
  %get-tuple-element.867 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.18), index=5
  %copy.1943 = bf16[2,8192,4096]{2,1,0} copy(%add.4183)
  %get-tuple-element.868 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.18), index=17
  %convert.2506 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.868)
  %all-gather.355 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2506), channel_id=358, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.454 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1943, %all-gather.355), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1944 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.454)
  %get-tuple-element.869 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.18), index=21
  %broadcast.12242 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.869), dimensions={0,1}
  %broadcast.12243 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.869), dimensions={0,2}
  %compare.4173 = pred[2,8192,8192]{2,1,0} compare(%broadcast.12242, %broadcast.12243), direction=EQ
  %and.900 = pred[2,8192,8192]{2,1,0} and(%compare.4173, %broadcast.7176)
  %select.2660 = f32[2,8192,8192]{2,1,0} select(%and.900, %broadcast.7177, %broadcast.7179)
  %compare.4175 = pred[2,8192,8192]{2,1,0} compare(%select.2660, %broadcast.7177), direction=NE
  %not.114 = pred[2,8192,8192]{2,1,0} not(%compare.4175)
  %convert.2507 = s32[2,8192,8192]{2,1,0} convert(%not.114)
  %reduce.423 = s32[2,8192]{1,0} reduce(%convert.2507, %constant.5439), dimensions={1}, to_apply=%region_405.19367
  %reshape.11181 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.423)
  %slice.602 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11181), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11183 = s32[2,1]{1,0} reshape(%slice.602)
  %reshape.11192 = s32[2]{0} reshape(%reshape.11183)
  %compare.4188 = pred[2]{0} compare(%reshape.11192, %broadcast.7184), direction=LT
  %reduce-window.302 = s32[2]{0} reduce-window(%reshape.11192, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.18
  %select.2670 = s32[2]{0} select(%compare.4188, %broadcast.7199, %reduce-window.302)
  %scatter.504 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2670), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.18
  %reduce.424 = s32[2,8192]{1,0} reduce(%convert.2507, %constant.5439), dimensions={2}, to_apply=%region_406.19375
  %reshape.11184 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.424)
  %reduce.425 = s32[2,1]{1,0} reduce(%reshape.11184, %constant.5570), dimensions={3,2}, to_apply=%region_407.19380
  %reshape.11200 = s32[2]{0} reshape(%reduce.425)
  %compare.4201 = pred[2]{0} compare(%reshape.11200, %broadcast.7184), direction=LT
  %reduce-window.305 = s32[2]{0} reduce-window(%reshape.11200, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.18.clone
  %select.2680 = s32[2]{0} select(%compare.4201, %broadcast.7199, %reduce-window.305)
  %scatter.509 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2680), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.18
  %custom-call.48 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1940, %copy.1941, %copy.1942, %constant.5555, %get-tuple-element.865, /*index=5*/%get-tuple-element.866, %get-tuple-element.867, %copy.1944, %scatter.504, %scatter.509, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.876 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.48), index=2
  %copy.1945 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.876)
  %get-tuple-element.877 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.18), index=19
  %convert.2513 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.877)
  %all-gather.356 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2513), channel_id=359, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.455 = bf16[2,8192,4096]{2,1,0} dot(%copy.1945, %all-gather.356), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.878 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.48), index=1
  %copy.1946 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.878)
  %convert.2514 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1946)
  %multiply.5654 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2514, %broadcast.12233)
  %convert.2515 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5654)
  %multiply.5655 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2514, %broadcast.12241)
  %multiply.5656 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5655, %broadcast.12239)
  %convert.2516 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5656)
  %select.2681 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2516, %broadcast.10254)
  %slice.603 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2681), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.144 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.603, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4204 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2515, %pad.144)
  %slice.604 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2681), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.145 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.604, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4205 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4204, %pad.145)
  %select.2682 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2516, %broadcast.10254)
  %slice.605 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2682), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.146 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.605, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4206 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4205, %pad.146)
  %slice.606 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2682), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.147 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.606, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4207 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4206, %pad.147)
  %get-tuple-element.879 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.18), index=16
  %convert.2517 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.879)
  %all-gather.357 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2517), channel_id=360, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.456 = bf16[2,8192,4096]{2,1,0} dot(%add.4207, %all-gather.357), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4208 = bf16[2,8192,4096]{2,1,0} add(%dot.455, %dot.456)
  %copy.1947 = bf16[2,8192,4096]{2,1,0} copy(%add.4208)
  %get-tuple-element.880 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.48), index=0
  %copy.1948 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.880)
  %convert.2519 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1948)
  %multiply.5665 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2519, %broadcast.12212)
  %convert.2520 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5665)
  %multiply.5666 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2519, %broadcast.12221)
  %multiply.5667 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5666, %broadcast.12218)
  %convert.2522 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5667)
  %select.2683 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2522, %broadcast.10265)
  %slice.607 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2683), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.148 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.607, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4209 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2520, %pad.148)
  %slice.608 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2683), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.149 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.608, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4210 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4209, %pad.149)
  %select.2684 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2522, %broadcast.10265)
  %slice.609 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2684), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.150 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.609, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4211 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4210, %pad.150)
  %slice.610 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2684), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.151 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.610, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4212 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4211, %pad.151)
  %get-tuple-element.881 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.18), index=18
  %convert.2523 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.881)
  %all-gather.358 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2523), channel_id=361, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.457 = bf16[2,8192,4096]{2,1,0} dot(%add.4212, %all-gather.358), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1949 = bf16[2,8192,4096]{2,1,0} copy(%dot.457)
  %add.4213 = bf16[2,8192,4096]{2,1,0} add(%copy.1947, %copy.1949)
  %copy.1950 = bf16[2,8192,4096]{2,1,0} copy(%add.4213)
  %get-tuple-element.882 = f32[4096]{0} get-tuple-element(%opt-barrier.18), index=15
  %convert.2525 = bf16[4096]{0} convert(%get-tuple-element.882)
  %broadcast.12294 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2525), dimensions={2}
  %multiply.5678 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1950, %broadcast.12294)
  %convert.2526 = f32[2,8192,4096]{2,1,0} convert(%multiply.5678)
  %convert.2527 = f32[2,8192,4096]{2,1,0} convert(%copy.1938)
  %multiply.5679 = f32[2,8192,4096]{2,1,0} multiply(%convert.2527, %convert.2527)
  %reduce.426 = f32[2,8192]{1,0} reduce(%multiply.5679, %constant.5451), dimensions={2}, to_apply=%region_404.19158
  %multiply.5681 = f32[2,8192]{1,0} multiply(%reduce.426, %broadcast.7109)
  %add.4214 = f32[2,8192]{1,0} add(%multiply.5681, %broadcast.7110)
  %reshape.11223 = f32[2,8192,1]{2,1,0} reshape(%add.4214)
  %rsqrt.166 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11223)
  %reshape.11224 = f32[2,8192]{1,0} reshape(%rsqrt.166)
  %broadcast.12297 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11224), dimensions={0,1}
  %multiply.5682 = f32[2,8192,4096]{2,1,0} multiply(%convert.2526, %broadcast.12297)
  %multiply.5683 = f32[2,8192,4096]{2,1,0} multiply(%convert.2527, %convert.2526)
  %reduce.427 = f32[2,8192]{1,0} reduce(%multiply.5683, %constant.5451), dimensions={2}, to_apply=%region_415.19597
  %reshape.11225 = f32[2,8192,1]{2,1,0} reshape(%reduce.427)
  %divide.942 = f32[2,8192,1]{2,1,0} divide(%rsqrt.166, %reshape.11223)
  %multiply.5684 = f32[2,8192,1]{2,1,0} multiply(%divide.942, %broadcast.10161)
  %multiply.5685 = f32[2,8192,1]{2,1,0} multiply(%reshape.11225, %multiply.5684)
  %multiply.5686 = f32[2,8192,1]{2,1,0} multiply(%multiply.5685, %broadcast.10163)
  %reshape.11226 = f32[2,8192]{1,0} reshape(%multiply.5686)
  %broadcast.12299 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11226), dimensions={0,1}
  %multiply.5687 = f32[2,8192,4096]{2,1,0} multiply(%convert.2527, %broadcast.12299)
  %add.4215 = f32[2,8192,4096]{2,1,0} add(%multiply.5682, %multiply.5687)
  %convert.2528 = bf16[2,8192,4096]{2,1,0} convert(%add.4215)
  %add.4216 = bf16[2,8192,4096]{2,1,0} add(%add.4183, %convert.2528)
  %copy.1951 = bf16[2,8192,4096]{2,1,0} copy(%add.4216)
  %tuple.131 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.84, %reduce-precision.85, %reduce-precision.86, %get-tuple-element.213, %get-tuple-element.214, /*index=5*/%reduce-precision.87, %reduce-precision.88, %reduce-precision.89, %reduce-precision.90, %constant.5507, /*index=10*/%constant.5507, %param.121, %param.122, %param.123, %param.120, /*index=15*/%param.115, %param.117, %param.119, %param.116, %param.118, /*index=20*/%copy.1346, %param.10, %param.7, %copy.1951)
  %opt-barrier.19 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.131)
  %get-tuple-element.883 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.19), index=23
  %copy.1952 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.883)
  %get-tuple-element.884 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.19), index=7
  %negate.920 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.884)
  %exponential.178 = bf16[2,8192,14336]{2,1,0} exponential(%negate.920)
  %add.4217 = bf16[2,8192,14336]{2,1,0} add(%exponential.178, %broadcast.7215)
  %divide.943 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4217)
  %multiply.5688 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.884, %divide.943)
  %copy.1953 = bf16[2,8192,4096]{2,1,0} copy(%copy.1952)
  %get-tuple-element.885 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.19), index=13
  %convert.2529 = bf16[14336,256]{1,0} convert(%get-tuple-element.885)
  %all-gather.359 = bf16[14336,4096]{1,0} all-gather(%convert.2529), channel_id=362, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.458 = bf16[2,8192,14336]{2,1,0} dot(%copy.1953, %all-gather.359), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1954 = bf16[2,8192,14336]{2,1,0} copy(%dot.458)
  %multiply.5689 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5688, %copy.1954)
  %get-tuple-element.886 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.19), index=12
  %convert.2530 = bf16[256,14336]{1,0} convert(%get-tuple-element.886)
  %all-gather.360 = bf16[4096,14336]{1,0} all-gather(%convert.2530), channel_id=363, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.459 = bf16[2,8192,4096]{2,1,0} dot(%multiply.5689, %all-gather.360), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.887 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.19), index=8
  %multiply.5690 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1954, %get-tuple-element.887)
  %multiply.5691 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5690, %divide.943)
  %multiply.5692 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.884, %multiply.5690)
  %subtract.290 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.943)
  %multiply.5693 = bf16[2,8192,14336]{2,1,0} multiply(%divide.943, %subtract.290)
  %multiply.5694 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5692, %multiply.5693)
  %add.4218 = bf16[2,8192,14336]{2,1,0} add(%multiply.5691, %multiply.5694)
  %get-tuple-element.888 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.19), index=11
  %convert.2531 = bf16[256,14336]{1,0} convert(%get-tuple-element.888)
  %all-gather.361 = bf16[4096,14336]{1,0} all-gather(%convert.2531), channel_id=364, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.460 = bf16[2,8192,4096]{2,1,0} dot(%add.4218, %all-gather.361), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4219 = bf16[2,8192,4096]{2,1,0} add(%dot.459, %dot.460)
  %copy.1955 = bf16[2,8192,4096]{2,1,0} copy(%add.4219)
  %get-tuple-element.889 = f32[4096]{0} get-tuple-element(%opt-barrier.19), index=14
  %convert.2532 = bf16[4096]{0} convert(%get-tuple-element.889)
  %broadcast.12301 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2532), dimensions={2}
  %multiply.5695 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1955, %broadcast.12301)
  %convert.2533 = f32[2,8192,4096]{2,1,0} convert(%multiply.5695)
  %get-tuple-element.890 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.19), index=20
  %copy.1956 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.890)
  %get-tuple-element.891 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.19), index=6
  %copy.1957 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.891)
  %add.4220 = bf16[2,8192,4096]{2,1,0} add(%copy.1956, %copy.1957)
  %convert.2534 = f32[2,8192,4096]{2,1,0} convert(%add.4220)
  %multiply.5696 = f32[2,8192,4096]{2,1,0} multiply(%convert.2534, %convert.2534)
  %reduce.428 = f32[2,8192]{1,0} reduce(%multiply.5696, %constant.5451), dimensions={2}, to_apply=%region_421.19884
  %multiply.5697 = f32[2,8192]{1,0} multiply(%reduce.428, %broadcast.7109)
  %add.4221 = f32[2,8192]{1,0} add(%multiply.5697, %broadcast.7110)
  %reshape.11227 = f32[2,8192,1]{2,1,0} reshape(%add.4221)
  %rsqrt.167 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11227)
  %reshape.11228 = f32[2,8192]{1,0} reshape(%rsqrt.167)
  %broadcast.12305 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11228), dimensions={0,1}
  %multiply.5698 = f32[2,8192,4096]{2,1,0} multiply(%convert.2533, %broadcast.12305)
  %multiply.5699 = f32[2,8192,4096]{2,1,0} multiply(%convert.2534, %convert.2533)
  %reduce.429 = f32[2,8192]{1,0} reduce(%multiply.5699, %constant.5451), dimensions={2}, to_apply=%region_424.19955
  %reshape.11229 = f32[2,8192,1]{2,1,0} reshape(%reduce.429)
  %divide.944 = f32[2,8192,1]{2,1,0} divide(%rsqrt.167, %reshape.11227)
  %multiply.5701 = f32[2,8192,1]{2,1,0} multiply(%divide.944, %broadcast.10161)
  %multiply.5702 = f32[2,8192,1]{2,1,0} multiply(%reshape.11229, %multiply.5701)
  %multiply.5703 = f32[2,8192,1]{2,1,0} multiply(%multiply.5702, %broadcast.10163)
  %reshape.11230 = f32[2,8192]{1,0} reshape(%multiply.5703)
  %broadcast.12308 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11230), dimensions={0,1}
  %multiply.5704 = f32[2,8192,4096]{2,1,0} multiply(%convert.2534, %broadcast.12308)
  %add.4222 = f32[2,8192,4096]{2,1,0} add(%multiply.5698, %multiply.5704)
  %convert.2535 = bf16[2,8192,4096]{2,1,0} convert(%add.4222)
  %add.4223 = bf16[2,8192,4096]{2,1,0} add(%copy.1952, %convert.2535)
  %get-tuple-element.892 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.19), index=0
  %convert.2536 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.892)
  %get-tuple-element.893 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.19), index=22
  %convert.2537 = f32[2,8192]{1,0} convert(%get-tuple-element.893)
  %broadcast.12309 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2537), dimensions={0,1}
  %divide.946 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.12309, %broadcast.7129)
  %cosine.103 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.946)
  %reshape.11232 = f32[2,8192,128]{2,1,0} reshape(%cosine.103)
  %broadcast.12319 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11232), dimensions={0,1,3}
  %multiply.5715 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2536, %broadcast.12319)
  %slice.611 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.892), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.612 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.892), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.204 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.611, %slice.612), dimensions={3}
  %slice.613 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.892), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.614 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.892), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.205 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.613, %slice.614), dimensions={3}
  %select.2688 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.204, %concatenate.205)
  %convert.2541 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2688)
  %sine.102 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.946)
  %reshape.11239 = f32[2,8192,128]{2,1,0} reshape(%sine.102)
  %broadcast.12325 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11239), dimensions={0,1,3}
  %multiply.5722 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2541, %broadcast.12325)
  %get-tuple-element.894 = s32[2]{0} get-tuple-element(%opt-barrier.19), index=9
  %broadcast.12326 = s32[64,2]{1,0} broadcast(%get-tuple-element.894), dimensions={1}
  %reshape.11240 = s32[128]{0} reshape(%broadcast.12326)
  %convert.2542 = f32[128]{0} convert(%reshape.11240)
  %broadcast.12327 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2542), dimensions={3}
  %multiply.5723 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5722, %broadcast.12327)
  %add.4227 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5715, %multiply.5723)
  %convert.2543 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4227)
  %copy.1958 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2543)
  %get-tuple-element.895 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.19), index=1
  %convert.2544 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.895)
  %broadcast.12337 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11232), dimensions={0,1,3}
  %multiply.5734 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2544, %broadcast.12337)
  %slice.615 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.895), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.616 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.895), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.206 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.615, %slice.616), dimensions={3}
  %slice.617 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.895), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.618 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.895), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.207 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.617, %slice.618), dimensions={3}
  %select.2692 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.206, %concatenate.207)
  %convert.2550 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2692)
  %broadcast.12347 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11239), dimensions={0,1,3}
  %multiply.5739 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2550, %broadcast.12347)
  %get-tuple-element.896 = s32[2]{0} get-tuple-element(%opt-barrier.19), index=10
  %broadcast.12348 = s32[64,2]{1,0} broadcast(%get-tuple-element.896), dimensions={1}
  %reshape.11248 = s32[128]{0} reshape(%broadcast.12348)
  %convert.2551 = f32[128]{0} convert(%reshape.11248)
  %broadcast.12349 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2551), dimensions={3}
  %multiply.5740 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5739, %broadcast.12349)
  %add.4231 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5734, %multiply.5740)
  %convert.2552 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4231)
  %copy.1959 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2552)
  %get-tuple-element.897 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.19), index=2
  %copy.1960 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.897)
  %get-tuple-element.898 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.19), index=3
  %get-tuple-element.899 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.19), index=4
  %get-tuple-element.900 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.19), index=5
  %copy.1961 = bf16[2,8192,4096]{2,1,0} copy(%add.4223)
  %get-tuple-element.901 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.19), index=17
  %convert.2554 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.901)
  %all-gather.362 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2554), channel_id=365, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.461 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1961, %all-gather.362), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1962 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.461)
  %get-tuple-element.902 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.19), index=21
  %broadcast.12351 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.902), dimensions={0,1}
  %broadcast.12353 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.902), dimensions={0,2}
  %compare.4221 = pred[2,8192,8192]{2,1,0} compare(%broadcast.12351, %broadcast.12353), direction=EQ
  %and.909 = pred[2,8192,8192]{2,1,0} and(%compare.4221, %broadcast.7176)
  %select.2693 = f32[2,8192,8192]{2,1,0} select(%and.909, %broadcast.7177, %broadcast.7179)
  %compare.4223 = pred[2,8192,8192]{2,1,0} compare(%select.2693, %broadcast.7177), direction=NE
  %not.115 = pred[2,8192,8192]{2,1,0} not(%compare.4223)
  %convert.2556 = s32[2,8192,8192]{2,1,0} convert(%not.115)
  %reduce.430 = s32[2,8192]{1,0} reduce(%convert.2556, %constant.5439), dimensions={1}, to_apply=%region_418.19859
  %reshape.11249 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.430)
  %slice.619 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11249), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11251 = s32[2,1]{1,0} reshape(%slice.619)
  %reshape.11260 = s32[2]{0} reshape(%reshape.11251)
  %compare.4238 = pred[2]{0} compare(%reshape.11260, %broadcast.7184), direction=LT
  %reduce-window.308 = s32[2]{0} reduce-window(%reshape.11260, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.19
  %select.2703 = s32[2]{0} select(%compare.4238, %broadcast.7199, %reduce-window.308)
  %scatter.514 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2703), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.19
  %reduce.431 = s32[2,8192]{1,0} reduce(%convert.2556, %constant.5439), dimensions={2}, to_apply=%region_419.19867
  %reshape.11252 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.431)
  %reduce.432 = s32[2,1]{1,0} reduce(%reshape.11252, %constant.5570), dimensions={3,2}, to_apply=%region_420.19872
  %reshape.11268 = s32[2]{0} reshape(%reduce.432)
  %compare.4253 = pred[2]{0} compare(%reshape.11268, %broadcast.7184), direction=LT
  %reduce-window.311 = s32[2]{0} reduce-window(%reshape.11268, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.19.clone
  %select.2713 = s32[2]{0} select(%compare.4253, %broadcast.7199, %reduce-window.311)
  %scatter.519 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2713), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.19
  %custom-call.49 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1958, %copy.1959, %copy.1960, %constant.5555, %get-tuple-element.898, /*index=5*/%get-tuple-element.899, %get-tuple-element.900, %copy.1962, %scatter.514, %scatter.519, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.909 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.49), index=2
  %copy.1963 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.909)
  %get-tuple-element.910 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.19), index=19
  %convert.2560 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.910)
  %all-gather.363 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2560), channel_id=366, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.462 = bf16[2,8192,4096]{2,1,0} dot(%copy.1963, %all-gather.363), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.911 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.49), index=1
  %copy.1964 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.911)
  %convert.2561 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1964)
  %multiply.5742 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2561, %broadcast.12337)
  %convert.2562 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5742)
  %multiply.5743 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2561, %broadcast.12349)
  %multiply.5744 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5743, %broadcast.12347)
  %convert.2563 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5744)
  %select.2714 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2563, %broadcast.10254)
  %slice.620 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2714), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.152 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.620, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4245 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2562, %pad.152)
  %slice.621 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2714), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.153 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.621, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4246 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4245, %pad.153)
  %select.2715 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2563, %broadcast.10254)
  %slice.622 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2715), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.154 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.622, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4247 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4246, %pad.154)
  %slice.623 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2715), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.155 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.623, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4248 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4247, %pad.155)
  %get-tuple-element.912 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.19), index=16
  %convert.2564 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.912)
  %all-gather.364 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2564), channel_id=367, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.463 = bf16[2,8192,4096]{2,1,0} dot(%add.4248, %all-gather.364), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4249 = bf16[2,8192,4096]{2,1,0} add(%dot.462, %dot.463)
  %copy.1965 = bf16[2,8192,4096]{2,1,0} copy(%add.4249)
  %get-tuple-element.913 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.49), index=0
  %copy.1966 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.913)
  %convert.2565 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1966)
  %multiply.5755 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2565, %broadcast.12319)
  %convert.2566 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5755)
  %multiply.5757 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2565, %broadcast.12327)
  %multiply.5758 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5757, %broadcast.12325)
  %convert.2567 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5758)
  %select.2716 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2567, %broadcast.10265)
  %slice.624 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2716), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.156 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.624, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4250 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2566, %pad.156)
  %slice.625 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2716), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.157 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.625, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4251 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4250, %pad.157)
  %select.2717 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2567, %broadcast.10265)
  %slice.626 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2717), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.158 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.626, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4252 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4251, %pad.158)
  %slice.627 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2717), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.159 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.627, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4253 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4252, %pad.159)
  %get-tuple-element.914 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.19), index=18
  %convert.2568 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.914)
  %all-gather.365 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2568), channel_id=368, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.464 = bf16[2,8192,4096]{2,1,0} dot(%add.4253, %all-gather.365), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1967 = bf16[2,8192,4096]{2,1,0} copy(%dot.464)
  %add.4254 = bf16[2,8192,4096]{2,1,0} add(%copy.1965, %copy.1967)
  %copy.1968 = bf16[2,8192,4096]{2,1,0} copy(%add.4254)
  %get-tuple-element.915 = f32[4096]{0} get-tuple-element(%opt-barrier.19), index=15
  %convert.2569 = bf16[4096]{0} convert(%get-tuple-element.915)
  %broadcast.12409 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2569), dimensions={2}
  %multiply.5767 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1968, %broadcast.12409)
  %convert.2570 = f32[2,8192,4096]{2,1,0} convert(%multiply.5767)
  %convert.2572 = f32[2,8192,4096]{2,1,0} convert(%copy.1956)
  %multiply.5768 = f32[2,8192,4096]{2,1,0} multiply(%convert.2572, %convert.2572)
  %reduce.433 = f32[2,8192]{1,0} reduce(%multiply.5768, %constant.5451), dimensions={2}, to_apply=%region_417.19650
  %multiply.5769 = f32[2,8192]{1,0} multiply(%reduce.433, %broadcast.7109)
  %add.4255 = f32[2,8192]{1,0} add(%multiply.5769, %broadcast.7110)
  %reshape.11290 = f32[2,8192,1]{2,1,0} reshape(%add.4255)
  %rsqrt.168 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11290)
  %reshape.11291 = f32[2,8192]{1,0} reshape(%rsqrt.168)
  %broadcast.12412 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11291), dimensions={0,1}
  %multiply.5770 = f32[2,8192,4096]{2,1,0} multiply(%convert.2570, %broadcast.12412)
  %multiply.5771 = f32[2,8192,4096]{2,1,0} multiply(%convert.2572, %convert.2570)
  %reduce.434 = f32[2,8192]{1,0} reduce(%multiply.5771, %constant.5451), dimensions={2}, to_apply=%region_428.20089
  %reshape.11292 = f32[2,8192,1]{2,1,0} reshape(%reduce.434)
  %divide.951 = f32[2,8192,1]{2,1,0} divide(%rsqrt.168, %reshape.11290)
  %multiply.5772 = f32[2,8192,1]{2,1,0} multiply(%divide.951, %broadcast.10161)
  %multiply.5773 = f32[2,8192,1]{2,1,0} multiply(%reshape.11292, %multiply.5772)
  %multiply.5774 = f32[2,8192,1]{2,1,0} multiply(%multiply.5773, %broadcast.10163)
  %reshape.11293 = f32[2,8192]{1,0} reshape(%multiply.5774)
  %broadcast.12414 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11293), dimensions={0,1}
  %multiply.5775 = f32[2,8192,4096]{2,1,0} multiply(%convert.2572, %broadcast.12414)
  %add.4256 = f32[2,8192,4096]{2,1,0} add(%multiply.5770, %multiply.5775)
  %convert.2573 = bf16[2,8192,4096]{2,1,0} convert(%add.4256)
  %add.4257 = bf16[2,8192,4096]{2,1,0} add(%add.4223, %convert.2573)
  %copy.1969 = bf16[2,8192,4096]{2,1,0} copy(%add.4257)
  %tuple.133 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.77, %reduce-precision.78, %reduce-precision.79, %get-tuple-element.211, %get-tuple-element.212, /*index=5*/%reduce-precision.80, %reduce-precision.81, %reduce-precision.82, %reduce-precision.83, %constant.5507, /*index=10*/%constant.5507, %param.112, %param.113, %param.114, %param.111, /*index=15*/%param.106, %param.108, %param.110, %param.107, %param.109, /*index=20*/%copy.1333, %param.10, %param.7, %copy.1969)
  %opt-barrier.20 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.133)
  %get-tuple-element.916 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.20), index=23
  %copy.1970 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.916)
  %get-tuple-element.917 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.20), index=7
  %negate.923 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.917)
  %exponential.179 = bf16[2,8192,14336]{2,1,0} exponential(%negate.923)
  %add.4258 = bf16[2,8192,14336]{2,1,0} add(%exponential.179, %broadcast.7215)
  %divide.952 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4258)
  %multiply.5776 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.917, %divide.952)
  %copy.1971 = bf16[2,8192,4096]{2,1,0} copy(%copy.1970)
  %get-tuple-element.918 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.20), index=13
  %convert.2574 = bf16[14336,256]{1,0} convert(%get-tuple-element.918)
  %all-gather.366 = bf16[14336,4096]{1,0} all-gather(%convert.2574), channel_id=369, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.465 = bf16[2,8192,14336]{2,1,0} dot(%copy.1971, %all-gather.366), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1972 = bf16[2,8192,14336]{2,1,0} copy(%dot.465)
  %multiply.5777 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5776, %copy.1972)
  %get-tuple-element.919 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.20), index=12
  %convert.2575 = bf16[256,14336]{1,0} convert(%get-tuple-element.919)
  %all-gather.367 = bf16[4096,14336]{1,0} all-gather(%convert.2575), channel_id=370, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.466 = bf16[2,8192,4096]{2,1,0} dot(%multiply.5777, %all-gather.367), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.920 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.20), index=8
  %multiply.5778 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1972, %get-tuple-element.920)
  %multiply.5779 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5778, %divide.952)
  %multiply.5780 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.917, %multiply.5778)
  %subtract.295 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.952)
  %multiply.5781 = bf16[2,8192,14336]{2,1,0} multiply(%divide.952, %subtract.295)
  %multiply.5782 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5780, %multiply.5781)
  %add.4259 = bf16[2,8192,14336]{2,1,0} add(%multiply.5779, %multiply.5782)
  %get-tuple-element.921 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.20), index=11
  %convert.2576 = bf16[256,14336]{1,0} convert(%get-tuple-element.921)
  %all-gather.368 = bf16[4096,14336]{1,0} all-gather(%convert.2576), channel_id=371, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.467 = bf16[2,8192,4096]{2,1,0} dot(%add.4259, %all-gather.368), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4260 = bf16[2,8192,4096]{2,1,0} add(%dot.466, %dot.467)
  %copy.1973 = bf16[2,8192,4096]{2,1,0} copy(%add.4260)
  %get-tuple-element.922 = f32[4096]{0} get-tuple-element(%opt-barrier.20), index=14
  %convert.2577 = bf16[4096]{0} convert(%get-tuple-element.922)
  %broadcast.12416 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2577), dimensions={2}
  %multiply.5783 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1973, %broadcast.12416)
  %convert.2578 = f32[2,8192,4096]{2,1,0} convert(%multiply.5783)
  %get-tuple-element.923 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.20), index=20
  %copy.1974 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.923)
  %get-tuple-element.924 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.20), index=6
  %copy.1975 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.924)
  %add.4261 = bf16[2,8192,4096]{2,1,0} add(%copy.1974, %copy.1975)
  %convert.2579 = f32[2,8192,4096]{2,1,0} convert(%add.4261)
  %multiply.5784 = f32[2,8192,4096]{2,1,0} multiply(%convert.2579, %convert.2579)
  %reduce.435 = f32[2,8192]{1,0} reduce(%multiply.5784, %constant.5451), dimensions={2}, to_apply=%region_434.20376
  %multiply.5785 = f32[2,8192]{1,0} multiply(%reduce.435, %broadcast.7109)
  %add.4262 = f32[2,8192]{1,0} add(%multiply.5785, %broadcast.7110)
  %reshape.11294 = f32[2,8192,1]{2,1,0} reshape(%add.4262)
  %rsqrt.169 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11294)
  %reshape.11296 = f32[2,8192]{1,0} reshape(%rsqrt.169)
  %broadcast.12423 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11296), dimensions={0,1}
  %multiply.5786 = f32[2,8192,4096]{2,1,0} multiply(%convert.2578, %broadcast.12423)
  %multiply.5787 = f32[2,8192,4096]{2,1,0} multiply(%convert.2579, %convert.2578)
  %reduce.436 = f32[2,8192]{1,0} reduce(%multiply.5787, %constant.5451), dimensions={2}, to_apply=%region_437.20447
  %reshape.11297 = f32[2,8192,1]{2,1,0} reshape(%reduce.436)
  %divide.953 = f32[2,8192,1]{2,1,0} divide(%rsqrt.169, %reshape.11294)
  %multiply.5788 = f32[2,8192,1]{2,1,0} multiply(%divide.953, %broadcast.10161)
  %multiply.5789 = f32[2,8192,1]{2,1,0} multiply(%reshape.11297, %multiply.5788)
  %multiply.5790 = f32[2,8192,1]{2,1,0} multiply(%multiply.5789, %broadcast.10163)
  %reshape.11298 = f32[2,8192]{1,0} reshape(%multiply.5790)
  %broadcast.12425 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11298), dimensions={0,1}
  %multiply.5791 = f32[2,8192,4096]{2,1,0} multiply(%convert.2579, %broadcast.12425)
  %add.4263 = f32[2,8192,4096]{2,1,0} add(%multiply.5786, %multiply.5791)
  %convert.2580 = bf16[2,8192,4096]{2,1,0} convert(%add.4263)
  %add.4264 = bf16[2,8192,4096]{2,1,0} add(%copy.1970, %convert.2580)
  %get-tuple-element.925 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.20), index=0
  %convert.2581 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.925)
  %get-tuple-element.926 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.20), index=22
  %convert.2582 = f32[2,8192]{1,0} convert(%get-tuple-element.926)
  %broadcast.12426 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2582), dimensions={0,1}
  %divide.955 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.12426, %broadcast.7129)
  %cosine.105 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.955)
  %reshape.11301 = f32[2,8192,128]{2,1,0} reshape(%cosine.105)
  %broadcast.12441 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11301), dimensions={0,1,3}
  %multiply.5802 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2581, %broadcast.12441)
  %slice.628 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.925), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.629 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.925), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.208 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.628, %slice.629), dimensions={3}
  %slice.630 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.925), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.631 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.925), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.209 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.630, %slice.631), dimensions={3}
  %select.2721 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.208, %concatenate.209)
  %convert.2587 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2721)
  %sine.104 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.955)
  %reshape.11307 = f32[2,8192,128]{2,1,0} reshape(%sine.104)
  %broadcast.12449 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11307), dimensions={0,1,3}
  %multiply.5807 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2587, %broadcast.12449)
  %get-tuple-element.927 = s32[2]{0} get-tuple-element(%opt-barrier.20), index=9
  %broadcast.12450 = s32[64,2]{1,0} broadcast(%get-tuple-element.927), dimensions={1}
  %reshape.11308 = s32[128]{0} reshape(%broadcast.12450)
  %convert.2588 = f32[128]{0} convert(%reshape.11308)
  %broadcast.12451 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2588), dimensions={3}
  %multiply.5808 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5807, %broadcast.12451)
  %add.4268 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5802, %multiply.5808)
  %convert.2589 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4268)
  %copy.1976 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2589)
  %get-tuple-element.928 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.20), index=1
  %convert.2591 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.928)
  %broadcast.12467 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11301), dimensions={0,1,3}
  %multiply.5820 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2591, %broadcast.12467)
  %slice.632 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.928), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.633 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.928), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.210 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.632, %slice.633), dimensions={3}
  %slice.634 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.928), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.635 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.928), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.211 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.634, %slice.635), dimensions={3}
  %select.2725 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.210, %concatenate.211)
  %convert.2597 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2725)
  %broadcast.12475 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11307), dimensions={0,1,3}
  %multiply.5825 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2597, %broadcast.12475)
  %get-tuple-element.929 = s32[2]{0} get-tuple-element(%opt-barrier.20), index=10
  %broadcast.12476 = s32[64,2]{1,0} broadcast(%get-tuple-element.929), dimensions={1}
  %reshape.11316 = s32[128]{0} reshape(%broadcast.12476)
  %convert.2598 = f32[128]{0} convert(%reshape.11316)
  %broadcast.12477 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2598), dimensions={3}
  %multiply.5826 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5825, %broadcast.12477)
  %add.4272 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5820, %multiply.5826)
  %convert.2599 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4272)
  %copy.1977 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2599)
  %get-tuple-element.930 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.20), index=2
  %copy.1978 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.930)
  %get-tuple-element.931 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.20), index=3
  %get-tuple-element.932 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.20), index=4
  %get-tuple-element.933 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.20), index=5
  %copy.1979 = bf16[2,8192,4096]{2,1,0} copy(%add.4264)
  %get-tuple-element.934 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.20), index=17
  %convert.2600 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.934)
  %all-gather.369 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2600), channel_id=372, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.468 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1979, %all-gather.369), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1980 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.468)
  %get-tuple-element.935 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.20), index=21
  %broadcast.12478 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.935), dimensions={0,1}
  %broadcast.12479 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.935), dimensions={0,2}
  %compare.4272 = pred[2,8192,8192]{2,1,0} compare(%broadcast.12478, %broadcast.12479), direction=EQ
  %and.918 = pred[2,8192,8192]{2,1,0} and(%compare.4272, %broadcast.7176)
  %select.2726 = f32[2,8192,8192]{2,1,0} select(%and.918, %broadcast.7177, %broadcast.7179)
  %compare.4274 = pred[2,8192,8192]{2,1,0} compare(%select.2726, %broadcast.7177), direction=NE
  %not.116 = pred[2,8192,8192]{2,1,0} not(%compare.4274)
  %convert.2601 = s32[2,8192,8192]{2,1,0} convert(%not.116)
  %reduce.437 = s32[2,8192]{1,0} reduce(%convert.2601, %constant.5439), dimensions={1}, to_apply=%region_431.20351
  %reshape.11317 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.437)
  %slice.636 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11317), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11320 = s32[2,1]{1,0} reshape(%slice.636)
  %reshape.11333 = s32[2]{0} reshape(%reshape.11320)
  %compare.4287 = pred[2]{0} compare(%reshape.11333, %broadcast.7184), direction=LT
  %reduce-window.314 = s32[2]{0} reduce-window(%reshape.11333, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.20
  %select.2736 = s32[2]{0} select(%compare.4287, %broadcast.7199, %reduce-window.314)
  %scatter.524 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2736), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.20
  %reduce.438 = s32[2,8192]{1,0} reduce(%convert.2601, %constant.5439), dimensions={2}, to_apply=%region_432.20359
  %reshape.11322 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.438)
  %reduce.439 = s32[2,1]{1,0} reduce(%reshape.11322, %constant.5570), dimensions={3,2}, to_apply=%region_433.20364
  %reshape.11341 = s32[2]{0} reshape(%reduce.439)
  %compare.4301 = pred[2]{0} compare(%reshape.11341, %broadcast.7184), direction=LT
  %reduce-window.317 = s32[2]{0} reduce-window(%reshape.11341, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.20.clone
  %select.2746 = s32[2]{0} select(%compare.4301, %broadcast.7199, %reduce-window.317)
  %scatter.529 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2746), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.20
  %custom-call.50 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1976, %copy.1977, %copy.1978, %constant.5555, %get-tuple-element.931, /*index=5*/%get-tuple-element.932, %get-tuple-element.933, %copy.1980, %scatter.524, %scatter.529, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.942 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.50), index=2
  %copy.1981 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.942)
  %get-tuple-element.943 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.20), index=19
  %convert.2606 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.943)
  %all-gather.370 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2606), channel_id=373, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.469 = bf16[2,8192,4096]{2,1,0} dot(%copy.1981, %all-gather.370), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.944 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.50), index=1
  %copy.1982 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.944)
  %convert.2607 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.1982)
  %multiply.5828 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2607, %broadcast.12467)
  %convert.2608 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5828)
  %multiply.5830 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2607, %broadcast.12477)
  %multiply.5831 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5830, %broadcast.12475)
  %convert.2609 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5831)
  %select.2747 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2609, %broadcast.10254)
  %slice.637 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2747), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.160 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.637, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4286 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2608, %pad.160)
  %slice.638 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2747), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.161 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.638, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4287 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4286, %pad.161)
  %select.2748 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2609, %broadcast.10254)
  %slice.639 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2748), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.162 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.639, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4288 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4287, %pad.162)
  %slice.640 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2748), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.163 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.640, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4289 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4288, %pad.163)
  %get-tuple-element.945 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.20), index=16
  %convert.2610 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.945)
  %all-gather.371 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2610), channel_id=374, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.470 = bf16[2,8192,4096]{2,1,0} dot(%add.4289, %all-gather.371), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4290 = bf16[2,8192,4096]{2,1,0} add(%dot.469, %dot.470)
  %copy.1983 = bf16[2,8192,4096]{2,1,0} copy(%add.4290)
  %get-tuple-element.946 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.50), index=0
  %copy.1984 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.946)
  %convert.2611 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.1984)
  %multiply.5841 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2611, %broadcast.12441)
  %convert.2612 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5841)
  %multiply.5842 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2611, %broadcast.12451)
  %multiply.5843 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5842, %broadcast.12449)
  %convert.2613 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5843)
  %select.2749 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2613, %broadcast.10265)
  %slice.641 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2749), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.164 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.641, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4291 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2612, %pad.164)
  %slice.642 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2749), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.165 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.642, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4292 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4291, %pad.165)
  %select.2750 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2613, %broadcast.10265)
  %slice.643 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2750), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.166 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.643, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4293 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4292, %pad.166)
  %slice.644 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2750), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.167 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.644, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4294 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4293, %pad.167)
  %get-tuple-element.947 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.20), index=18
  %convert.2614 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.947)
  %all-gather.372 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2614), channel_id=375, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.471 = bf16[2,8192,4096]{2,1,0} dot(%add.4294, %all-gather.372), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.1985 = bf16[2,8192,4096]{2,1,0} copy(%dot.471)
  %add.4295 = bf16[2,8192,4096]{2,1,0} add(%copy.1983, %copy.1985)
  %copy.1986 = bf16[2,8192,4096]{2,1,0} copy(%add.4295)
  %get-tuple-element.948 = f32[4096]{0} get-tuple-element(%opt-barrier.20), index=15
  %convert.2615 = bf16[4096]{0} convert(%get-tuple-element.948)
  %broadcast.12530 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2615), dimensions={2}
  %multiply.5853 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1986, %broadcast.12530)
  %convert.2616 = f32[2,8192,4096]{2,1,0} convert(%multiply.5853)
  %convert.2617 = f32[2,8192,4096]{2,1,0} convert(%copy.1974)
  %multiply.5855 = f32[2,8192,4096]{2,1,0} multiply(%convert.2617, %convert.2617)
  %reduce.440 = f32[2,8192]{1,0} reduce(%multiply.5855, %constant.5451), dimensions={2}, to_apply=%region_430.20142
  %multiply.5856 = f32[2,8192]{1,0} multiply(%reduce.440, %broadcast.7109)
  %add.4296 = f32[2,8192]{1,0} add(%multiply.5856, %broadcast.7110)
  %reshape.11366 = f32[2,8192,1]{2,1,0} reshape(%add.4296)
  %rsqrt.170 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11366)
  %reshape.11368 = f32[2,8192]{1,0} reshape(%rsqrt.170)
  %broadcast.12533 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11368), dimensions={0,1}
  %multiply.5857 = f32[2,8192,4096]{2,1,0} multiply(%convert.2616, %broadcast.12533)
  %multiply.5858 = f32[2,8192,4096]{2,1,0} multiply(%convert.2617, %convert.2616)
  %reduce.441 = f32[2,8192]{1,0} reduce(%multiply.5858, %constant.5451), dimensions={2}, to_apply=%region_441.20581
  %reshape.11370 = f32[2,8192,1]{2,1,0} reshape(%reduce.441)
  %divide.960 = f32[2,8192,1]{2,1,0} divide(%rsqrt.170, %reshape.11366)
  %multiply.5859 = f32[2,8192,1]{2,1,0} multiply(%divide.960, %broadcast.10161)
  %multiply.5860 = f32[2,8192,1]{2,1,0} multiply(%reshape.11370, %multiply.5859)
  %multiply.5861 = f32[2,8192,1]{2,1,0} multiply(%multiply.5860, %broadcast.10163)
  %reshape.11371 = f32[2,8192]{1,0} reshape(%multiply.5861)
  %broadcast.12535 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11371), dimensions={0,1}
  %multiply.5862 = f32[2,8192,4096]{2,1,0} multiply(%convert.2617, %broadcast.12535)
  %add.4297 = f32[2,8192,4096]{2,1,0} add(%multiply.5857, %multiply.5862)
  %convert.2618 = bf16[2,8192,4096]{2,1,0} convert(%add.4297)
  %add.4298 = bf16[2,8192,4096]{2,1,0} add(%add.4264, %convert.2618)
  %copy.1987 = bf16[2,8192,4096]{2,1,0} copy(%add.4298)
  %tuple.135 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.70, %reduce-precision.71, %reduce-precision.72, %get-tuple-element.209, %get-tuple-element.210, /*index=5*/%reduce-precision.73, %reduce-precision.74, %reduce-precision.75, %reduce-precision.76, %constant.5507, /*index=10*/%constant.5507, %param.103, %param.104, %param.105, %param.102, /*index=15*/%param.97, %param.99, %param.101, %param.98, %param.100, /*index=20*/%copy.1320, %param.10, %param.7, %copy.1987)
  %opt-barrier.21 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.135)
  %get-tuple-element.949 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.21), index=23
  %copy.1988 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.949)
  %get-tuple-element.950 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.21), index=7
  %negate.926 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.950)
  %exponential.180 = bf16[2,8192,14336]{2,1,0} exponential(%negate.926)
  %add.4299 = bf16[2,8192,14336]{2,1,0} add(%exponential.180, %broadcast.7215)
  %divide.961 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4299)
  %multiply.5863 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.950, %divide.961)
  %copy.1989 = bf16[2,8192,4096]{2,1,0} copy(%copy.1988)
  %get-tuple-element.951 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.21), index=13
  %convert.2619 = bf16[14336,256]{1,0} convert(%get-tuple-element.951)
  %all-gather.373 = bf16[14336,4096]{1,0} all-gather(%convert.2619), channel_id=376, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.472 = bf16[2,8192,14336]{2,1,0} dot(%copy.1989, %all-gather.373), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.1990 = bf16[2,8192,14336]{2,1,0} copy(%dot.472)
  %multiply.5864 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5863, %copy.1990)
  %get-tuple-element.952 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.21), index=12
  %convert.2620 = bf16[256,14336]{1,0} convert(%get-tuple-element.952)
  %all-gather.374 = bf16[4096,14336]{1,0} all-gather(%convert.2620), channel_id=377, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.473 = bf16[2,8192,4096]{2,1,0} dot(%multiply.5864, %all-gather.374), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.953 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.21), index=8
  %multiply.5865 = bf16[2,8192,14336]{2,1,0} multiply(%copy.1990, %get-tuple-element.953)
  %multiply.5866 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5865, %divide.961)
  %multiply.5868 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.950, %multiply.5865)
  %subtract.300 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.961)
  %multiply.5869 = bf16[2,8192,14336]{2,1,0} multiply(%divide.961, %subtract.300)
  %multiply.5870 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5868, %multiply.5869)
  %add.4300 = bf16[2,8192,14336]{2,1,0} add(%multiply.5866, %multiply.5870)
  %get-tuple-element.954 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.21), index=11
  %convert.2622 = bf16[256,14336]{1,0} convert(%get-tuple-element.954)
  %all-gather.375 = bf16[4096,14336]{1,0} all-gather(%convert.2622), channel_id=378, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.474 = bf16[2,8192,4096]{2,1,0} dot(%add.4300, %all-gather.375), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4301 = bf16[2,8192,4096]{2,1,0} add(%dot.473, %dot.474)
  %copy.1991 = bf16[2,8192,4096]{2,1,0} copy(%add.4301)
  %get-tuple-element.955 = f32[4096]{0} get-tuple-element(%opt-barrier.21), index=14
  %convert.2623 = bf16[4096]{0} convert(%get-tuple-element.955)
  %broadcast.12537 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2623), dimensions={2}
  %multiply.5871 = bf16[2,8192,4096]{2,1,0} multiply(%copy.1991, %broadcast.12537)
  %convert.2624 = f32[2,8192,4096]{2,1,0} convert(%multiply.5871)
  %get-tuple-element.956 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.21), index=20
  %copy.1992 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.956)
  %get-tuple-element.957 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.21), index=6
  %copy.1993 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.957)
  %add.4302 = bf16[2,8192,4096]{2,1,0} add(%copy.1992, %copy.1993)
  %convert.2625 = f32[2,8192,4096]{2,1,0} convert(%add.4302)
  %multiply.5872 = f32[2,8192,4096]{2,1,0} multiply(%convert.2625, %convert.2625)
  %reduce.442 = f32[2,8192]{1,0} reduce(%multiply.5872, %constant.5451), dimensions={2}, to_apply=%region_447.20868
  %multiply.5873 = f32[2,8192]{1,0} multiply(%reduce.442, %broadcast.7109)
  %add.4303 = f32[2,8192]{1,0} add(%multiply.5873, %broadcast.7110)
  %reshape.11373 = f32[2,8192,1]{2,1,0} reshape(%add.4303)
  %rsqrt.171 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11373)
  %reshape.11374 = f32[2,8192]{1,0} reshape(%rsqrt.171)
  %broadcast.12540 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11374), dimensions={0,1}
  %multiply.5875 = f32[2,8192,4096]{2,1,0} multiply(%convert.2624, %broadcast.12540)
  %multiply.5876 = f32[2,8192,4096]{2,1,0} multiply(%convert.2625, %convert.2624)
  %reduce.443 = f32[2,8192]{1,0} reduce(%multiply.5876, %constant.5451), dimensions={2}, to_apply=%region_450.20939
  %reshape.11375 = f32[2,8192,1]{2,1,0} reshape(%reduce.443)
  %divide.962 = f32[2,8192,1]{2,1,0} divide(%rsqrt.171, %reshape.11373)
  %multiply.5877 = f32[2,8192,1]{2,1,0} multiply(%divide.962, %broadcast.10161)
  %multiply.5878 = f32[2,8192,1]{2,1,0} multiply(%reshape.11375, %multiply.5877)
  %multiply.5879 = f32[2,8192,1]{2,1,0} multiply(%multiply.5878, %broadcast.10163)
  %reshape.11376 = f32[2,8192]{1,0} reshape(%multiply.5879)
  %broadcast.12542 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11376), dimensions={0,1}
  %multiply.5880 = f32[2,8192,4096]{2,1,0} multiply(%convert.2625, %broadcast.12542)
  %add.4304 = f32[2,8192,4096]{2,1,0} add(%multiply.5875, %multiply.5880)
  %convert.2626 = bf16[2,8192,4096]{2,1,0} convert(%add.4304)
  %add.4305 = bf16[2,8192,4096]{2,1,0} add(%copy.1988, %convert.2626)
  %get-tuple-element.958 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.21), index=0
  %convert.2627 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.958)
  %get-tuple-element.959 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.21), index=22
  %convert.2628 = f32[2,8192]{1,0} convert(%get-tuple-element.959)
  %broadcast.12543 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2628), dimensions={0,1}
  %divide.964 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.12543, %broadcast.7129)
  %cosine.107 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.964)
  %reshape.11379 = f32[2,8192,128]{2,1,0} reshape(%cosine.107)
  %broadcast.12552 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11379), dimensions={0,1,3}
  %multiply.5891 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2627, %broadcast.12552)
  %slice.645 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.958), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.646 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.958), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.212 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.645, %slice.646), dimensions={3}
  %slice.647 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.958), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.648 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.958), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.213 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.647, %slice.648), dimensions={3}
  %select.2754 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.212, %concatenate.213)
  %convert.2634 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2754)
  %sine.106 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.964)
  %reshape.11386 = f32[2,8192,128]{2,1,0} reshape(%sine.106)
  %broadcast.12558 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11386), dimensions={0,1,3}
  %multiply.5896 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2634, %broadcast.12558)
  %get-tuple-element.960 = s32[2]{0} get-tuple-element(%opt-barrier.21), index=9
  %broadcast.12559 = s32[64,2]{1,0} broadcast(%get-tuple-element.960), dimensions={1}
  %reshape.11387 = s32[128]{0} reshape(%broadcast.12559)
  %convert.2635 = f32[128]{0} convert(%reshape.11387)
  %broadcast.12561 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2635), dimensions={3}
  %multiply.5897 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5896, %broadcast.12561)
  %add.4309 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5891, %multiply.5897)
  %convert.2636 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4309)
  %copy.1994 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2636)
  %get-tuple-element.961 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.21), index=1
  %convert.2637 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.961)
  %broadcast.12572 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11379), dimensions={0,1,3}
  %multiply.5909 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2637, %broadcast.12572)
  %slice.649 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.961), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.650 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.961), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.214 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.649, %slice.650), dimensions={3}
  %slice.651 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.961), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.652 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.961), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.215 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.651, %slice.652), dimensions={3}
  %select.2758 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.214, %concatenate.215)
  %convert.2642 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2758)
  %broadcast.12579 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11386), dimensions={0,1,3}
  %multiply.5914 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2642, %broadcast.12579)
  %get-tuple-element.962 = s32[2]{0} get-tuple-element(%opt-barrier.21), index=10
  %broadcast.12581 = s32[64,2]{1,0} broadcast(%get-tuple-element.962), dimensions={1}
  %reshape.11395 = s32[128]{0} reshape(%broadcast.12581)
  %convert.2643 = f32[128]{0} convert(%reshape.11395)
  %broadcast.12582 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2643), dimensions={3}
  %multiply.5915 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5914, %broadcast.12582)
  %add.4313 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5909, %multiply.5915)
  %convert.2644 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4313)
  %copy.1995 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2644)
  %get-tuple-element.963 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.21), index=2
  %copy.1996 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.963)
  %get-tuple-element.964 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.21), index=3
  %get-tuple-element.965 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.21), index=4
  %get-tuple-element.966 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.21), index=5
  %copy.1997 = bf16[2,8192,4096]{2,1,0} copy(%add.4305)
  %get-tuple-element.967 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.21), index=17
  %convert.2645 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.967)
  %all-gather.376 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2645), channel_id=379, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.475 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.1997, %all-gather.376), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.1998 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.475)
  %get-tuple-element.968 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.21), index=21
  %broadcast.12583 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.968), dimensions={0,1}
  %broadcast.12584 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.968), dimensions={0,2}
  %compare.4324 = pred[2,8192,8192]{2,1,0} compare(%broadcast.12583, %broadcast.12584), direction=EQ
  %and.927 = pred[2,8192,8192]{2,1,0} and(%compare.4324, %broadcast.7176)
  %select.2759 = f32[2,8192,8192]{2,1,0} select(%and.927, %broadcast.7177, %broadcast.7179)
  %compare.4326 = pred[2,8192,8192]{2,1,0} compare(%select.2759, %broadcast.7177), direction=NE
  %not.117 = pred[2,8192,8192]{2,1,0} not(%compare.4326)
  %convert.2646 = s32[2,8192,8192]{2,1,0} convert(%not.117)
  %reduce.444 = s32[2,8192]{1,0} reduce(%convert.2646, %constant.5439), dimensions={1}, to_apply=%region_444.20843
  %reshape.11397 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.444)
  %slice.653 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11397), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11401 = s32[2,1]{1,0} reshape(%slice.653)
  %reshape.11412 = s32[2]{0} reshape(%reshape.11401)
  %compare.4339 = pred[2]{0} compare(%reshape.11412, %broadcast.7184), direction=LT
  %reduce-window.320 = s32[2]{0} reduce-window(%reshape.11412, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.21
  %select.2769 = s32[2]{0} select(%compare.4339, %broadcast.7199, %reduce-window.320)
  %scatter.534 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2769), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.21
  %reduce.445 = s32[2,8192]{1,0} reduce(%convert.2646, %constant.5439), dimensions={2}, to_apply=%region_445.20851
  %reshape.11402 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.445)
  %reduce.446 = s32[2,1]{1,0} reduce(%reshape.11402, %constant.5570), dimensions={3,2}, to_apply=%region_446.20856
  %reshape.11420 = s32[2]{0} reshape(%reduce.446)
  %compare.4352 = pred[2]{0} compare(%reshape.11420, %broadcast.7184), direction=LT
  %reduce-window.323 = s32[2]{0} reduce-window(%reshape.11420, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.21.clone
  %select.2779 = s32[2]{0} select(%compare.4352, %broadcast.7199, %reduce-window.323)
  %scatter.539 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2779), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.21
  %custom-call.51 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.1994, %copy.1995, %copy.1996, %constant.5555, %get-tuple-element.964, /*index=5*/%get-tuple-element.965, %get-tuple-element.966, %copy.1998, %scatter.534, %scatter.539, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.975 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.51), index=2
  %copy.1999 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.975)
  %get-tuple-element.976 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.21), index=19
  %convert.2651 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.976)
  %all-gather.377 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2651), channel_id=380, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.476 = bf16[2,8192,4096]{2,1,0} dot(%copy.1999, %all-gather.377), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.977 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.51), index=1
  %copy.2000 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.977)
  %convert.2652 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.2000)
  %multiply.5917 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2652, %broadcast.12572)
  %convert.2653 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5917)
  %multiply.5918 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2652, %broadcast.12582)
  %multiply.5919 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.5918, %broadcast.12579)
  %convert.2654 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.5919)
  %select.2780 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2654, %broadcast.10254)
  %slice.654 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2780), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.168 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.654, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4327 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2653, %pad.168)
  %slice.655 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2780), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.169 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.655, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4328 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4327, %pad.169)
  %select.2781 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2654, %broadcast.10254)
  %slice.656 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2781), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.170 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.656, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4329 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4328, %pad.170)
  %slice.657 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2781), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.171 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.657, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4330 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4329, %pad.171)
  %get-tuple-element.978 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.21), index=16
  %convert.2655 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.978)
  %all-gather.378 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2655), channel_id=381, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.477 = bf16[2,8192,4096]{2,1,0} dot(%add.4330, %all-gather.378), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4331 = bf16[2,8192,4096]{2,1,0} add(%dot.476, %dot.477)
  %copy.2001 = bf16[2,8192,4096]{2,1,0} copy(%add.4331)
  %get-tuple-element.979 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.51), index=0
  %copy.2002 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.979)
  %convert.2656 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.2002)
  %multiply.5930 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2656, %broadcast.12552)
  %convert.2657 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5930)
  %multiply.5931 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2656, %broadcast.12561)
  %multiply.5932 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5931, %broadcast.12558)
  %convert.2658 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.5932)
  %select.2782 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2658, %broadcast.10265)
  %slice.658 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2782), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.172 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.658, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4332 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2657, %pad.172)
  %slice.659 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2782), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.173 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.659, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4333 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4332, %pad.173)
  %select.2783 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2658, %broadcast.10265)
  %slice.660 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2783), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.174 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.660, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4334 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4333, %pad.174)
  %slice.661 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2783), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.175 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.661, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4335 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4334, %pad.175)
  %get-tuple-element.980 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.21), index=18
  %convert.2659 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.980)
  %all-gather.379 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2659), channel_id=382, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.478 = bf16[2,8192,4096]{2,1,0} dot(%add.4335, %all-gather.379), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2003 = bf16[2,8192,4096]{2,1,0} copy(%dot.478)
  %add.4336 = bf16[2,8192,4096]{2,1,0} add(%copy.2001, %copy.2003)
  %copy.2004 = bf16[2,8192,4096]{2,1,0} copy(%add.4336)
  %get-tuple-element.981 = f32[4096]{0} get-tuple-element(%opt-barrier.21), index=15
  %convert.2660 = bf16[4096]{0} convert(%get-tuple-element.981)
  %broadcast.12638 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2660), dimensions={2}
  %multiply.5941 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2004, %broadcast.12638)
  %convert.2662 = f32[2,8192,4096]{2,1,0} convert(%multiply.5941)
  %convert.2663 = f32[2,8192,4096]{2,1,0} convert(%copy.1992)
  %multiply.5942 = f32[2,8192,4096]{2,1,0} multiply(%convert.2663, %convert.2663)
  %reduce.447 = f32[2,8192]{1,0} reduce(%multiply.5942, %constant.5451), dimensions={2}, to_apply=%region_443.20634
  %multiply.5943 = f32[2,8192]{1,0} multiply(%reduce.447, %broadcast.7109)
  %add.4337 = f32[2,8192]{1,0} add(%multiply.5943, %broadcast.7110)
  %reshape.11447 = f32[2,8192,1]{2,1,0} reshape(%add.4337)
  %rsqrt.172 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11447)
  %reshape.11448 = f32[2,8192]{1,0} reshape(%rsqrt.172)
  %broadcast.12643 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11448), dimensions={0,1}
  %multiply.5944 = f32[2,8192,4096]{2,1,0} multiply(%convert.2662, %broadcast.12643)
  %multiply.5945 = f32[2,8192,4096]{2,1,0} multiply(%convert.2663, %convert.2662)
  %reduce.448 = f32[2,8192]{1,0} reduce(%multiply.5945, %constant.5451), dimensions={2}, to_apply=%region_454.21073
  %reshape.11450 = f32[2,8192,1]{2,1,0} reshape(%reduce.448)
  %divide.969 = f32[2,8192,1]{2,1,0} divide(%rsqrt.172, %reshape.11447)
  %multiply.5946 = f32[2,8192,1]{2,1,0} multiply(%divide.969, %broadcast.10161)
  %multiply.5947 = f32[2,8192,1]{2,1,0} multiply(%reshape.11450, %multiply.5946)
  %multiply.5948 = f32[2,8192,1]{2,1,0} multiply(%multiply.5947, %broadcast.10163)
  %reshape.11451 = f32[2,8192]{1,0} reshape(%multiply.5948)
  %broadcast.12647 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11451), dimensions={0,1}
  %multiply.5950 = f32[2,8192,4096]{2,1,0} multiply(%convert.2663, %broadcast.12647)
  %add.4338 = f32[2,8192,4096]{2,1,0} add(%multiply.5944, %multiply.5950)
  %convert.2664 = bf16[2,8192,4096]{2,1,0} convert(%add.4338)
  %add.4339 = bf16[2,8192,4096]{2,1,0} add(%add.4305, %convert.2664)
  %copy.2005 = bf16[2,8192,4096]{2,1,0} copy(%add.4339)
  %tuple.137 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.63, %reduce-precision.64, %reduce-precision.65, %get-tuple-element.207, %get-tuple-element.208, /*index=5*/%reduce-precision.66, %reduce-precision.67, %reduce-precision.68, %reduce-precision.69, %constant.5507, /*index=10*/%constant.5507, %param.94, %param.95, %param.96, %param.93, /*index=15*/%param.88, %param.90, %param.92, %param.89, %param.91, /*index=20*/%copy.1307, %param.10, %param.7, %copy.2005)
  %opt-barrier.22 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.137)
  %get-tuple-element.982 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.22), index=23
  %copy.2006 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.982)
  %get-tuple-element.983 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.22), index=7
  %negate.929 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.983)
  %exponential.181 = bf16[2,8192,14336]{2,1,0} exponential(%negate.929)
  %add.4340 = bf16[2,8192,14336]{2,1,0} add(%exponential.181, %broadcast.7215)
  %divide.970 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4340)
  %multiply.5951 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.983, %divide.970)
  %copy.2007 = bf16[2,8192,4096]{2,1,0} copy(%copy.2006)
  %get-tuple-element.984 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.22), index=13
  %convert.2665 = bf16[14336,256]{1,0} convert(%get-tuple-element.984)
  %all-gather.380 = bf16[14336,4096]{1,0} all-gather(%convert.2665), channel_id=383, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.479 = bf16[2,8192,14336]{2,1,0} dot(%copy.2007, %all-gather.380), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.2008 = bf16[2,8192,14336]{2,1,0} copy(%dot.479)
  %multiply.5952 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5951, %copy.2008)
  %get-tuple-element.985 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.22), index=12
  %convert.2667 = bf16[256,14336]{1,0} convert(%get-tuple-element.985)
  %all-gather.381 = bf16[4096,14336]{1,0} all-gather(%convert.2667), channel_id=384, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.480 = bf16[2,8192,4096]{2,1,0} dot(%multiply.5952, %all-gather.381), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.986 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.22), index=8
  %multiply.5953 = bf16[2,8192,14336]{2,1,0} multiply(%copy.2008, %get-tuple-element.986)
  %multiply.5955 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5953, %divide.970)
  %multiply.5956 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.983, %multiply.5953)
  %subtract.305 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.970)
  %multiply.5957 = bf16[2,8192,14336]{2,1,0} multiply(%divide.970, %subtract.305)
  %multiply.5958 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5956, %multiply.5957)
  %add.4341 = bf16[2,8192,14336]{2,1,0} add(%multiply.5955, %multiply.5958)
  %get-tuple-element.987 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.22), index=11
  %convert.2668 = bf16[256,14336]{1,0} convert(%get-tuple-element.987)
  %all-gather.382 = bf16[4096,14336]{1,0} all-gather(%convert.2668), channel_id=385, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.481 = bf16[2,8192,4096]{2,1,0} dot(%add.4341, %all-gather.382), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4342 = bf16[2,8192,4096]{2,1,0} add(%dot.480, %dot.481)
  %copy.2009 = bf16[2,8192,4096]{2,1,0} copy(%add.4342)
  %get-tuple-element.988 = f32[4096]{0} get-tuple-element(%opt-barrier.22), index=14
  %convert.2669 = bf16[4096]{0} convert(%get-tuple-element.988)
  %broadcast.12650 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2669), dimensions={2}
  %multiply.5959 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2009, %broadcast.12650)
  %convert.2670 = f32[2,8192,4096]{2,1,0} convert(%multiply.5959)
  %get-tuple-element.989 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.22), index=20
  %copy.2010 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.989)
  %get-tuple-element.990 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.22), index=6
  %copy.2011 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.990)
  %add.4343 = bf16[2,8192,4096]{2,1,0} add(%copy.2010, %copy.2011)
  %convert.2672 = f32[2,8192,4096]{2,1,0} convert(%add.4343)
  %multiply.5961 = f32[2,8192,4096]{2,1,0} multiply(%convert.2672, %convert.2672)
  %reduce.449 = f32[2,8192]{1,0} reduce(%multiply.5961, %constant.5451), dimensions={2}, to_apply=%region_460.21360
  %multiply.5962 = f32[2,8192]{1,0} multiply(%reduce.449, %broadcast.7109)
  %add.4344 = f32[2,8192]{1,0} add(%multiply.5962, %broadcast.7110)
  %reshape.11452 = f32[2,8192,1]{2,1,0} reshape(%add.4344)
  %rsqrt.173 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11452)
  %reshape.11453 = f32[2,8192]{1,0} reshape(%rsqrt.173)
  %broadcast.12654 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11453), dimensions={0,1}
  %multiply.5963 = f32[2,8192,4096]{2,1,0} multiply(%convert.2670, %broadcast.12654)
  %multiply.5964 = f32[2,8192,4096]{2,1,0} multiply(%convert.2672, %convert.2670)
  %reduce.450 = f32[2,8192]{1,0} reduce(%multiply.5964, %constant.5451), dimensions={2}, to_apply=%region_463.21431
  %reshape.11455 = f32[2,8192,1]{2,1,0} reshape(%reduce.450)
  %divide.971 = f32[2,8192,1]{2,1,0} divide(%rsqrt.173, %reshape.11452)
  %multiply.5965 = f32[2,8192,1]{2,1,0} multiply(%divide.971, %broadcast.10161)
  %multiply.5966 = f32[2,8192,1]{2,1,0} multiply(%reshape.11455, %multiply.5965)
  %multiply.5967 = f32[2,8192,1]{2,1,0} multiply(%multiply.5966, %broadcast.10163)
  %reshape.11456 = f32[2,8192]{1,0} reshape(%multiply.5967)
  %broadcast.12656 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11456), dimensions={0,1}
  %multiply.5968 = f32[2,8192,4096]{2,1,0} multiply(%convert.2672, %broadcast.12656)
  %add.4345 = f32[2,8192,4096]{2,1,0} add(%multiply.5963, %multiply.5968)
  %convert.2673 = bf16[2,8192,4096]{2,1,0} convert(%add.4345)
  %add.4346 = bf16[2,8192,4096]{2,1,0} add(%copy.2006, %convert.2673)
  %get-tuple-element.991 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.22), index=0
  %convert.2674 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.991)
  %get-tuple-element.992 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.22), index=22
  %convert.2675 = f32[2,8192]{1,0} convert(%get-tuple-element.992)
  %broadcast.12657 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2675), dimensions={0,1}
  %divide.973 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.12657, %broadcast.7129)
  %cosine.109 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.973)
  %reshape.11459 = f32[2,8192,128]{2,1,0} reshape(%cosine.109)
  %broadcast.12666 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11459), dimensions={0,1,3}
  %multiply.5979 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2674, %broadcast.12666)
  %slice.662 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.991), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.663 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.991), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.216 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.662, %slice.663), dimensions={3}
  %slice.664 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.991), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.665 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.991), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.217 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.664, %slice.665), dimensions={3}
  %select.2787 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.216, %concatenate.217)
  %convert.2680 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2787)
  %sine.108 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.973)
  %reshape.11465 = f32[2,8192,128]{2,1,0} reshape(%sine.108)
  %broadcast.12672 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11465), dimensions={0,1,3}
  %multiply.5985 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2680, %broadcast.12672)
  %get-tuple-element.993 = s32[2]{0} get-tuple-element(%opt-barrier.22), index=9
  %broadcast.12673 = s32[64,2]{1,0} broadcast(%get-tuple-element.993), dimensions={1}
  %reshape.11466 = s32[128]{0} reshape(%broadcast.12673)
  %convert.2681 = f32[128]{0} convert(%reshape.11466)
  %broadcast.12674 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2681), dimensions={3}
  %multiply.5986 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.5985, %broadcast.12674)
  %add.4350 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.5979, %multiply.5986)
  %convert.2682 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4350)
  %copy.2012 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2682)
  %get-tuple-element.994 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.22), index=1
  %convert.2683 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.994)
  %broadcast.12684 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11459), dimensions={0,1,3}
  %multiply.5999 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2683, %broadcast.12684)
  %slice.666 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.994), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.667 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.994), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.218 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.666, %slice.667), dimensions={3}
  %slice.668 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.994), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.669 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.994), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.219 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.668, %slice.669), dimensions={3}
  %select.2791 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.218, %concatenate.219)
  %convert.2688 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2791)
  %broadcast.12690 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11465), dimensions={0,1,3}
  %multiply.6004 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2688, %broadcast.12690)
  %get-tuple-element.995 = s32[2]{0} get-tuple-element(%opt-barrier.22), index=10
  %broadcast.12691 = s32[64,2]{1,0} broadcast(%get-tuple-element.995), dimensions={1}
  %reshape.11479 = s32[128]{0} reshape(%broadcast.12691)
  %convert.2689 = f32[128]{0} convert(%reshape.11479)
  %broadcast.12692 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2689), dimensions={3}
  %multiply.6005 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6004, %broadcast.12692)
  %add.4354 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.5999, %multiply.6005)
  %convert.2690 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4354)
  %copy.2013 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2690)
  %get-tuple-element.996 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.22), index=2
  %copy.2014 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.996)
  %get-tuple-element.997 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.22), index=3
  %get-tuple-element.998 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.22), index=4
  %get-tuple-element.999 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.22), index=5
  %copy.2015 = bf16[2,8192,4096]{2,1,0} copy(%add.4346)
  %get-tuple-element.1000 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.22), index=17
  %convert.2691 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.1000)
  %all-gather.383 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2691), channel_id=386, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.482 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.2015, %all-gather.383), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2016 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.482)
  %get-tuple-element.1001 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.22), index=21
  %broadcast.12693 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1001), dimensions={0,1}
  %broadcast.12695 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1001), dimensions={0,2}
  %compare.4372 = pred[2,8192,8192]{2,1,0} compare(%broadcast.12693, %broadcast.12695), direction=EQ
  %and.936 = pred[2,8192,8192]{2,1,0} and(%compare.4372, %broadcast.7176)
  %select.2792 = f32[2,8192,8192]{2,1,0} select(%and.936, %broadcast.7177, %broadcast.7179)
  %compare.4374 = pred[2,8192,8192]{2,1,0} compare(%select.2792, %broadcast.7177), direction=NE
  %not.118 = pred[2,8192,8192]{2,1,0} not(%compare.4374)
  %convert.2692 = s32[2,8192,8192]{2,1,0} convert(%not.118)
  %reduce.451 = s32[2,8192]{1,0} reduce(%convert.2692, %constant.5439), dimensions={1}, to_apply=%region_457.21335
  %reshape.11480 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.451)
  %slice.670 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11480), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11482 = s32[2,1]{1,0} reshape(%slice.670)
  %reshape.11493 = s32[2]{0} reshape(%reshape.11482)
  %compare.4389 = pred[2]{0} compare(%reshape.11493, %broadcast.7184), direction=LT
  %reduce-window.326 = s32[2]{0} reduce-window(%reshape.11493, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.22
  %select.2802 = s32[2]{0} select(%compare.4389, %broadcast.7199, %reduce-window.326)
  %scatter.544 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2802), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.22
  %reduce.452 = s32[2,8192]{1,0} reduce(%convert.2692, %constant.5439), dimensions={2}, to_apply=%region_458.21343
  %reshape.11484 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.452)
  %reduce.453 = s32[2,1]{1,0} reduce(%reshape.11484, %constant.5570), dimensions={3,2}, to_apply=%region_459.21348
  %reshape.11502 = s32[2]{0} reshape(%reduce.453)
  %compare.4402 = pred[2]{0} compare(%reshape.11502, %broadcast.7184), direction=LT
  %reduce-window.329 = s32[2]{0} reduce-window(%reshape.11502, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.22.clone
  %select.2812 = s32[2]{0} select(%compare.4402, %broadcast.7199, %reduce-window.329)
  %scatter.549 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2812), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.22
  %custom-call.52 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.2012, %copy.2013, %copy.2014, %constant.5555, %get-tuple-element.997, /*index=5*/%get-tuple-element.998, %get-tuple-element.999, %copy.2016, %scatter.544, %scatter.549, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1008 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.52), index=2
  %copy.2017 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1008)
  %get-tuple-element.1009 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.22), index=19
  %convert.2696 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1009)
  %all-gather.384 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2696), channel_id=387, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.483 = bf16[2,8192,4096]{2,1,0} dot(%copy.2017, %all-gather.384), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1010 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.52), index=1
  %copy.2018 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1010)
  %convert.2697 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.2018)
  %multiply.6007 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2697, %broadcast.12684)
  %convert.2698 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6007)
  %multiply.6008 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2697, %broadcast.12692)
  %multiply.6009 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6008, %broadcast.12690)
  %convert.2699 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6009)
  %select.2813 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2699, %broadcast.10254)
  %slice.671 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2813), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.176 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.671, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4368 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2698, %pad.176)
  %slice.672 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2813), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.177 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.672, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4369 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4368, %pad.177)
  %select.2814 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2699, %broadcast.10254)
  %slice.673 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2814), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.178 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.673, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4370 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4369, %pad.178)
  %slice.674 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2814), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.179 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.674, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4371 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4370, %pad.179)
  %get-tuple-element.1011 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.22), index=16
  %convert.2700 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1011)
  %all-gather.385 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2700), channel_id=388, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.484 = bf16[2,8192,4096]{2,1,0} dot(%add.4371, %all-gather.385), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4372 = bf16[2,8192,4096]{2,1,0} add(%dot.483, %dot.484)
  %copy.2019 = bf16[2,8192,4096]{2,1,0} copy(%add.4372)
  %get-tuple-element.1012 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.52), index=0
  %copy.2020 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1012)
  %convert.2701 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.2020)
  %multiply.6018 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2701, %broadcast.12666)
  %convert.2702 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6018)
  %multiply.6019 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2701, %broadcast.12674)
  %multiply.6020 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6019, %broadcast.12672)
  %convert.2703 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6020)
  %select.2815 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2703, %broadcast.10265)
  %slice.675 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2815), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.180 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.675, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4373 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2702, %pad.180)
  %slice.676 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2815), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.181 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.676, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4374 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4373, %pad.181)
  %select.2816 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2703, %broadcast.10265)
  %slice.677 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2816), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.182 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.677, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4375 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4374, %pad.182)
  %slice.678 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2816), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.183 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.678, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4376 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4375, %pad.183)
  %get-tuple-element.1013 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.22), index=18
  %convert.2704 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.1013)
  %all-gather.386 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2704), channel_id=389, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.485 = bf16[2,8192,4096]{2,1,0} dot(%add.4376, %all-gather.386), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2021 = bf16[2,8192,4096]{2,1,0} copy(%dot.485)
  %add.4377 = bf16[2,8192,4096]{2,1,0} add(%copy.2019, %copy.2021)
  %copy.2022 = bf16[2,8192,4096]{2,1,0} copy(%add.4377)
  %get-tuple-element.1014 = f32[4096]{0} get-tuple-element(%opt-barrier.22), index=15
  %convert.2706 = bf16[4096]{0} convert(%get-tuple-element.1014)
  %broadcast.12746 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2706), dimensions={2}
  %multiply.6031 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2022, %broadcast.12746)
  %convert.2707 = f32[2,8192,4096]{2,1,0} convert(%multiply.6031)
  %convert.2708 = f32[2,8192,4096]{2,1,0} convert(%copy.2010)
  %multiply.6032 = f32[2,8192,4096]{2,1,0} multiply(%convert.2708, %convert.2708)
  %reduce.454 = f32[2,8192]{1,0} reduce(%multiply.6032, %constant.5451), dimensions={2}, to_apply=%region_456.21126
  %multiply.6033 = f32[2,8192]{1,0} multiply(%reduce.454, %broadcast.7109)
  %add.4378 = f32[2,8192]{1,0} add(%multiply.6033, %broadcast.7110)
  %reshape.11524 = f32[2,8192,1]{2,1,0} reshape(%add.4378)
  %rsqrt.174 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11524)
  %reshape.11525 = f32[2,8192]{1,0} reshape(%rsqrt.174)
  %broadcast.12749 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11525), dimensions={0,1}
  %multiply.6034 = f32[2,8192,4096]{2,1,0} multiply(%convert.2707, %broadcast.12749)
  %multiply.6035 = f32[2,8192,4096]{2,1,0} multiply(%convert.2708, %convert.2707)
  %reduce.455 = f32[2,8192]{1,0} reduce(%multiply.6035, %constant.5451), dimensions={2}, to_apply=%region_467.21565
  %reshape.11526 = f32[2,8192,1]{2,1,0} reshape(%reduce.455)
  %divide.978 = f32[2,8192,1]{2,1,0} divide(%rsqrt.174, %reshape.11524)
  %multiply.6037 = f32[2,8192,1]{2,1,0} multiply(%divide.978, %broadcast.10161)
  %multiply.6038 = f32[2,8192,1]{2,1,0} multiply(%reshape.11526, %multiply.6037)
  %multiply.6039 = f32[2,8192,1]{2,1,0} multiply(%multiply.6038, %broadcast.10163)
  %reshape.11527 = f32[2,8192]{1,0} reshape(%multiply.6039)
  %broadcast.12751 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11527), dimensions={0,1}
  %multiply.6040 = f32[2,8192,4096]{2,1,0} multiply(%convert.2708, %broadcast.12751)
  %add.4379 = f32[2,8192,4096]{2,1,0} add(%multiply.6034, %multiply.6040)
  %convert.2709 = bf16[2,8192,4096]{2,1,0} convert(%add.4379)
  %add.4380 = bf16[2,8192,4096]{2,1,0} add(%add.4346, %convert.2709)
  %copy.2023 = bf16[2,8192,4096]{2,1,0} copy(%add.4380)
  %tuple.139 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.56, %reduce-precision.57, %reduce-precision.58, %get-tuple-element.205, %get-tuple-element.206, /*index=5*/%reduce-precision.59, %reduce-precision.60, %reduce-precision.61, %reduce-precision.62, %constant.5507, /*index=10*/%constant.5507, %param.85, %param.86, %param.87, %param.84, /*index=15*/%param.79, %param.81, %param.83, %param.80, %param.82, /*index=20*/%copy.1294, %param.10, %param.7, %copy.2023)
  %opt-barrier.23 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.139)
  %get-tuple-element.1015 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.23), index=23
  %copy.2024 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1015)
  %get-tuple-element.1016 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.23), index=7
  %negate.932 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.1016)
  %exponential.182 = bf16[2,8192,14336]{2,1,0} exponential(%negate.932)
  %add.4381 = bf16[2,8192,14336]{2,1,0} add(%exponential.182, %broadcast.7215)
  %divide.979 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4381)
  %multiply.6041 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1016, %divide.979)
  %copy.2025 = bf16[2,8192,4096]{2,1,0} copy(%copy.2024)
  %get-tuple-element.1017 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.23), index=13
  %convert.2710 = bf16[14336,256]{1,0} convert(%get-tuple-element.1017)
  %all-gather.387 = bf16[14336,4096]{1,0} all-gather(%convert.2710), channel_id=390, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.486 = bf16[2,8192,14336]{2,1,0} dot(%copy.2025, %all-gather.387), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.2026 = bf16[2,8192,14336]{2,1,0} copy(%dot.486)
  %multiply.6042 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6041, %copy.2026)
  %get-tuple-element.1018 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.23), index=12
  %convert.2711 = bf16[256,14336]{1,0} convert(%get-tuple-element.1018)
  %all-gather.388 = bf16[4096,14336]{1,0} all-gather(%convert.2711), channel_id=391, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.487 = bf16[2,8192,4096]{2,1,0} dot(%multiply.6042, %all-gather.388), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.1019 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.23), index=8
  %multiply.6043 = bf16[2,8192,14336]{2,1,0} multiply(%copy.2026, %get-tuple-element.1019)
  %multiply.6044 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6043, %divide.979)
  %multiply.6045 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1016, %multiply.6043)
  %subtract.310 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.979)
  %multiply.6046 = bf16[2,8192,14336]{2,1,0} multiply(%divide.979, %subtract.310)
  %multiply.6047 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6045, %multiply.6046)
  %add.4382 = bf16[2,8192,14336]{2,1,0} add(%multiply.6044, %multiply.6047)
  %get-tuple-element.1020 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.23), index=11
  %convert.2712 = bf16[256,14336]{1,0} convert(%get-tuple-element.1020)
  %all-gather.389 = bf16[4096,14336]{1,0} all-gather(%convert.2712), channel_id=392, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.488 = bf16[2,8192,4096]{2,1,0} dot(%add.4382, %all-gather.389), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4383 = bf16[2,8192,4096]{2,1,0} add(%dot.487, %dot.488)
  %copy.2027 = bf16[2,8192,4096]{2,1,0} copy(%add.4383)
  %get-tuple-element.1021 = f32[4096]{0} get-tuple-element(%opt-barrier.23), index=14
  %convert.2714 = bf16[4096]{0} convert(%get-tuple-element.1021)
  %broadcast.12753 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2714), dimensions={2}
  %multiply.6048 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2027, %broadcast.12753)
  %convert.2715 = f32[2,8192,4096]{2,1,0} convert(%multiply.6048)
  %get-tuple-element.1022 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.23), index=20
  %copy.2028 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1022)
  %get-tuple-element.1023 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.23), index=6
  %copy.2029 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1023)
  %add.4384 = bf16[2,8192,4096]{2,1,0} add(%copy.2028, %copy.2029)
  %convert.2716 = f32[2,8192,4096]{2,1,0} convert(%add.4384)
  %multiply.6049 = f32[2,8192,4096]{2,1,0} multiply(%convert.2716, %convert.2716)
  %reduce.456 = f32[2,8192]{1,0} reduce(%multiply.6049, %constant.5451), dimensions={2}, to_apply=%region_473.21852
  %multiply.6050 = f32[2,8192]{1,0} multiply(%reduce.456, %broadcast.7109)
  %add.4385 = f32[2,8192]{1,0} add(%multiply.6050, %broadcast.7110)
  %reshape.11528 = f32[2,8192,1]{2,1,0} reshape(%add.4385)
  %rsqrt.175 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11528)
  %reshape.11530 = f32[2,8192]{1,0} reshape(%rsqrt.175)
  %broadcast.12756 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11530), dimensions={0,1}
  %multiply.6051 = f32[2,8192,4096]{2,1,0} multiply(%convert.2715, %broadcast.12756)
  %multiply.6052 = f32[2,8192,4096]{2,1,0} multiply(%convert.2716, %convert.2715)
  %reduce.457 = f32[2,8192]{1,0} reduce(%multiply.6052, %constant.5451), dimensions={2}, to_apply=%region_476.21923
  %reshape.11531 = f32[2,8192,1]{2,1,0} reshape(%reduce.457)
  %divide.980 = f32[2,8192,1]{2,1,0} divide(%rsqrt.175, %reshape.11528)
  %multiply.6053 = f32[2,8192,1]{2,1,0} multiply(%divide.980, %broadcast.10161)
  %multiply.6054 = f32[2,8192,1]{2,1,0} multiply(%reshape.11531, %multiply.6053)
  %multiply.6055 = f32[2,8192,1]{2,1,0} multiply(%multiply.6054, %broadcast.10163)
  %reshape.11532 = f32[2,8192]{1,0} reshape(%multiply.6055)
  %broadcast.12758 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11532), dimensions={0,1}
  %multiply.6056 = f32[2,8192,4096]{2,1,0} multiply(%convert.2716, %broadcast.12758)
  %add.4386 = f32[2,8192,4096]{2,1,0} add(%multiply.6051, %multiply.6056)
  %convert.2717 = bf16[2,8192,4096]{2,1,0} convert(%add.4386)
  %add.4387 = bf16[2,8192,4096]{2,1,0} add(%copy.2024, %convert.2717)
  %get-tuple-element.1024 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.23), index=0
  %convert.2718 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.1024)
  %get-tuple-element.1025 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.23), index=22
  %convert.2719 = f32[2,8192]{1,0} convert(%get-tuple-element.1025)
  %broadcast.12759 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2719), dimensions={0,1}
  %divide.982 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.12759, %broadcast.7129)
  %cosine.111 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.982)
  %reshape.11535 = f32[2,8192,128]{2,1,0} reshape(%cosine.111)
  %broadcast.12768 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11535), dimensions={0,1,3}
  %multiply.6067 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2718, %broadcast.12768)
  %slice.679 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1024), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.680 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1024), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.220 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.679, %slice.680), dimensions={3}
  %slice.681 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1024), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.682 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1024), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.221 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.681, %slice.682), dimensions={3}
  %select.2820 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.220, %concatenate.221)
  %convert.2723 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2820)
  %sine.110 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.982)
  %reshape.11541 = f32[2,8192,128]{2,1,0} reshape(%sine.110)
  %broadcast.12776 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11541), dimensions={0,1,3}
  %multiply.6072 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2723, %broadcast.12776)
  %get-tuple-element.1026 = s32[2]{0} get-tuple-element(%opt-barrier.23), index=9
  %broadcast.12778 = s32[64,2]{1,0} broadcast(%get-tuple-element.1026), dimensions={1}
  %reshape.11542 = s32[128]{0} reshape(%broadcast.12778)
  %convert.2724 = f32[128]{0} convert(%reshape.11542)
  %broadcast.12780 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2724), dimensions={3}
  %multiply.6073 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6072, %broadcast.12780)
  %add.4392 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.6067, %multiply.6073)
  %convert.2725 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4392)
  %copy.2030 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2725)
  %get-tuple-element.1027 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.23), index=1
  %convert.2726 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.1027)
  %broadcast.12790 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11535), dimensions={0,1,3}
  %multiply.6084 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2726, %broadcast.12790)
  %slice.683 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1027), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.684 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1027), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.222 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.683, %slice.684), dimensions={3}
  %slice.685 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1027), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.686 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1027), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.223 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.685, %slice.686), dimensions={3}
  %select.2825 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.222, %concatenate.223)
  %convert.2732 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2825)
  %broadcast.12797 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11541), dimensions={0,1,3}
  %multiply.6089 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2732, %broadcast.12797)
  %get-tuple-element.1028 = s32[2]{0} get-tuple-element(%opt-barrier.23), index=10
  %broadcast.12799 = s32[64,2]{1,0} broadcast(%get-tuple-element.1028), dimensions={1}
  %reshape.11550 = s32[128]{0} reshape(%broadcast.12799)
  %convert.2733 = f32[128]{0} convert(%reshape.11550)
  %broadcast.12800 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2733), dimensions={3}
  %multiply.6090 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6089, %broadcast.12800)
  %add.4397 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.6084, %multiply.6090)
  %convert.2734 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4397)
  %copy.2031 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2734)
  %get-tuple-element.1029 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.23), index=2
  %copy.2032 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1029)
  %get-tuple-element.1030 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.23), index=3
  %get-tuple-element.1031 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.23), index=4
  %get-tuple-element.1032 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.23), index=5
  %copy.2033 = bf16[2,8192,4096]{2,1,0} copy(%add.4387)
  %get-tuple-element.1033 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.23), index=17
  %convert.2736 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.1033)
  %all-gather.390 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2736), channel_id=393, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.489 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.2033, %all-gather.390), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2034 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.489)
  %get-tuple-element.1034 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.23), index=21
  %broadcast.12801 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1034), dimensions={0,1}
  %broadcast.12802 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1034), dimensions={0,2}
  %compare.4421 = pred[2,8192,8192]{2,1,0} compare(%broadcast.12801, %broadcast.12802), direction=EQ
  %and.945 = pred[2,8192,8192]{2,1,0} and(%compare.4421, %broadcast.7176)
  %select.2826 = f32[2,8192,8192]{2,1,0} select(%and.945, %broadcast.7177, %broadcast.7179)
  %compare.4423 = pred[2,8192,8192]{2,1,0} compare(%select.2826, %broadcast.7177), direction=NE
  %not.119 = pred[2,8192,8192]{2,1,0} not(%compare.4423)
  %convert.2737 = s32[2,8192,8192]{2,1,0} convert(%not.119)
  %reduce.458 = s32[2,8192]{1,0} reduce(%convert.2737, %constant.5439), dimensions={1}, to_apply=%region_470.21827
  %reshape.11551 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.458)
  %slice.687 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11551), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11553 = s32[2,1]{1,0} reshape(%slice.687)
  %reshape.11562 = s32[2]{0} reshape(%reshape.11553)
  %compare.4436 = pred[2]{0} compare(%reshape.11562, %broadcast.7184), direction=LT
  %reduce-window.332 = s32[2]{0} reduce-window(%reshape.11562, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.23
  %select.2836 = s32[2]{0} select(%compare.4436, %broadcast.7199, %reduce-window.332)
  %scatter.554 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2836), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.23
  %reduce.459 = s32[2,8192]{1,0} reduce(%convert.2737, %constant.5439), dimensions={2}, to_apply=%region_471.21835
  %reshape.11554 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.459)
  %reduce.460 = s32[2,1]{1,0} reduce(%reshape.11554, %constant.5570), dimensions={3,2}, to_apply=%region_472.21840
  %reshape.11570 = s32[2]{0} reshape(%reduce.460)
  %compare.4449 = pred[2]{0} compare(%reshape.11570, %broadcast.7184), direction=LT
  %reduce-window.335 = s32[2]{0} reduce-window(%reshape.11570, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.23.clone
  %select.2847 = s32[2]{0} select(%compare.4449, %broadcast.7199, %reduce-window.335)
  %scatter.559 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2847), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.23
  %custom-call.53 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.2030, %copy.2031, %copy.2032, %constant.5555, %get-tuple-element.1030, /*index=5*/%get-tuple-element.1031, %get-tuple-element.1032, %copy.2034, %scatter.554, %scatter.559, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1041 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.53), index=2
  %copy.2035 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1041)
  %get-tuple-element.1042 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.23), index=19
  %convert.2741 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1042)
  %all-gather.391 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2741), channel_id=394, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.490 = bf16[2,8192,4096]{2,1,0} dot(%copy.2035, %all-gather.391), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1043 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.53), index=1
  %copy.2036 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1043)
  %convert.2742 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.2036)
  %multiply.6092 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2742, %broadcast.12790)
  %convert.2743 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6092)
  %multiply.6093 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2742, %broadcast.12800)
  %multiply.6094 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6093, %broadcast.12797)
  %convert.2744 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6094)
  %select.2849 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2744, %broadcast.10254)
  %slice.688 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2849), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.184 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.688, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4410 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2743, %pad.184)
  %slice.689 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2849), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.185 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.689, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4411 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4410, %pad.185)
  %select.2850 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2744, %broadcast.10254)
  %slice.690 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2850), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.186 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.690, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4412 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4411, %pad.186)
  %slice.691 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2850), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.187 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.691, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4413 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4412, %pad.187)
  %get-tuple-element.1044 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.23), index=16
  %convert.2745 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1044)
  %all-gather.392 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2745), channel_id=395, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.491 = bf16[2,8192,4096]{2,1,0} dot(%add.4413, %all-gather.392), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4415 = bf16[2,8192,4096]{2,1,0} add(%dot.490, %dot.491)
  %copy.2037 = bf16[2,8192,4096]{2,1,0} copy(%add.4415)
  %get-tuple-element.1045 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.53), index=0
  %copy.2038 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1045)
  %convert.2746 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.2038)
  %multiply.6104 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2746, %broadcast.12768)
  %convert.2747 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6104)
  %multiply.6105 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2746, %broadcast.12780)
  %multiply.6106 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6105, %broadcast.12776)
  %convert.2748 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6106)
  %select.2851 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2748, %broadcast.10265)
  %slice.692 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2851), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.188 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.692, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4416 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2747, %pad.188)
  %slice.693 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2851), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.189 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.693, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4417 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4416, %pad.189)
  %select.2852 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2748, %broadcast.10265)
  %slice.694 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2852), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.190 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.694, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4418 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4417, %pad.190)
  %slice.695 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2852), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.191 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.695, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4420 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4418, %pad.191)
  %get-tuple-element.1046 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.23), index=18
  %convert.2749 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.1046)
  %all-gather.393 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2749), channel_id=396, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.492 = bf16[2,8192,4096]{2,1,0} dot(%add.4420, %all-gather.393), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2039 = bf16[2,8192,4096]{2,1,0} copy(%dot.492)
  %add.4421 = bf16[2,8192,4096]{2,1,0} add(%copy.2037, %copy.2039)
  %copy.2040 = bf16[2,8192,4096]{2,1,0} copy(%add.4421)
  %get-tuple-element.1047 = f32[4096]{0} get-tuple-element(%opt-barrier.23), index=15
  %convert.2752 = bf16[4096]{0} convert(%get-tuple-element.1047)
  %broadcast.12862 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2752), dimensions={2}
  %multiply.6117 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2040, %broadcast.12862)
  %convert.2753 = f32[2,8192,4096]{2,1,0} convert(%multiply.6117)
  %convert.2754 = f32[2,8192,4096]{2,1,0} convert(%copy.2028)
  %multiply.6118 = f32[2,8192,4096]{2,1,0} multiply(%convert.2754, %convert.2754)
  %reduce.461 = f32[2,8192]{1,0} reduce(%multiply.6118, %constant.5451), dimensions={2}, to_apply=%region_469.21618
  %multiply.6119 = f32[2,8192]{1,0} multiply(%reduce.461, %broadcast.7109)
  %add.4422 = f32[2,8192]{1,0} add(%multiply.6119, %broadcast.7110)
  %reshape.11594 = f32[2,8192,1]{2,1,0} reshape(%add.4422)
  %rsqrt.176 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11594)
  %reshape.11596 = f32[2,8192]{1,0} reshape(%rsqrt.176)
  %broadcast.12865 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11596), dimensions={0,1}
  %multiply.6120 = f32[2,8192,4096]{2,1,0} multiply(%convert.2753, %broadcast.12865)
  %multiply.6121 = f32[2,8192,4096]{2,1,0} multiply(%convert.2754, %convert.2753)
  %reduce.462 = f32[2,8192]{1,0} reduce(%multiply.6121, %constant.5451), dimensions={2}, to_apply=%region_480.22057
  %reshape.11597 = f32[2,8192,1]{2,1,0} reshape(%reduce.462)
  %divide.987 = f32[2,8192,1]{2,1,0} divide(%rsqrt.176, %reshape.11594)
  %multiply.6122 = f32[2,8192,1]{2,1,0} multiply(%divide.987, %broadcast.10161)
  %multiply.6123 = f32[2,8192,1]{2,1,0} multiply(%reshape.11597, %multiply.6122)
  %multiply.6124 = f32[2,8192,1]{2,1,0} multiply(%multiply.6123, %broadcast.10163)
  %reshape.11598 = f32[2,8192]{1,0} reshape(%multiply.6124)
  %broadcast.12867 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11598), dimensions={0,1}
  %multiply.6126 = f32[2,8192,4096]{2,1,0} multiply(%convert.2754, %broadcast.12867)
  %add.4423 = f32[2,8192,4096]{2,1,0} add(%multiply.6120, %multiply.6126)
  %convert.2755 = bf16[2,8192,4096]{2,1,0} convert(%add.4423)
  %add.4425 = bf16[2,8192,4096]{2,1,0} add(%add.4387, %convert.2755)
  %copy.2041 = bf16[2,8192,4096]{2,1,0} copy(%add.4425)
  %tuple.141 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.49, %reduce-precision.50, %reduce-precision.51, %get-tuple-element.203, %get-tuple-element.204, /*index=5*/%reduce-precision.52, %reduce-precision.53, %reduce-precision.54, %reduce-precision.55, %constant.5507, /*index=10*/%constant.5507, %param.76, %param.77, %param.78, %param.75, /*index=15*/%param.70, %param.72, %param.74, %param.71, %param.73, /*index=20*/%copy.1281, %param.10, %param.7, %copy.2041)
  %opt-barrier.24 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.141)
  %get-tuple-element.1048 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.24), index=23
  %copy.2042 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1048)
  %get-tuple-element.1049 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.24), index=7
  %negate.935 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.1049)
  %exponential.183 = bf16[2,8192,14336]{2,1,0} exponential(%negate.935)
  %add.4426 = bf16[2,8192,14336]{2,1,0} add(%exponential.183, %broadcast.7215)
  %divide.988 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4426)
  %multiply.6127 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1049, %divide.988)
  %copy.2043 = bf16[2,8192,4096]{2,1,0} copy(%copy.2042)
  %get-tuple-element.1050 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.24), index=13
  %convert.2756 = bf16[14336,256]{1,0} convert(%get-tuple-element.1050)
  %all-gather.394 = bf16[14336,4096]{1,0} all-gather(%convert.2756), channel_id=397, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.493 = bf16[2,8192,14336]{2,1,0} dot(%copy.2043, %all-gather.394), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.2044 = bf16[2,8192,14336]{2,1,0} copy(%dot.493)
  %multiply.6128 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6127, %copy.2044)
  %get-tuple-element.1051 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.24), index=12
  %convert.2757 = bf16[256,14336]{1,0} convert(%get-tuple-element.1051)
  %all-gather.395 = bf16[4096,14336]{1,0} all-gather(%convert.2757), channel_id=398, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.494 = bf16[2,8192,4096]{2,1,0} dot(%multiply.6128, %all-gather.395), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.1052 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.24), index=8
  %multiply.6129 = bf16[2,8192,14336]{2,1,0} multiply(%copy.2044, %get-tuple-element.1052)
  %multiply.6130 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6129, %divide.988)
  %multiply.6131 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1049, %multiply.6129)
  %subtract.315 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.988)
  %multiply.6132 = bf16[2,8192,14336]{2,1,0} multiply(%divide.988, %subtract.315)
  %multiply.6133 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6131, %multiply.6132)
  %add.4427 = bf16[2,8192,14336]{2,1,0} add(%multiply.6130, %multiply.6133)
  %get-tuple-element.1053 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.24), index=11
  %convert.2759 = bf16[256,14336]{1,0} convert(%get-tuple-element.1053)
  %all-gather.396 = bf16[4096,14336]{1,0} all-gather(%convert.2759), channel_id=399, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.495 = bf16[2,8192,4096]{2,1,0} dot(%add.4427, %all-gather.396), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4428 = bf16[2,8192,4096]{2,1,0} add(%dot.494, %dot.495)
  %copy.2045 = bf16[2,8192,4096]{2,1,0} copy(%add.4428)
  %get-tuple-element.1054 = f32[4096]{0} get-tuple-element(%opt-barrier.24), index=14
  %convert.2760 = bf16[4096]{0} convert(%get-tuple-element.1054)
  %broadcast.12869 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2760), dimensions={2}
  %multiply.6135 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2045, %broadcast.12869)
  %convert.2761 = f32[2,8192,4096]{2,1,0} convert(%multiply.6135)
  %get-tuple-element.1055 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.24), index=20
  %copy.2046 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1055)
  %get-tuple-element.1056 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.24), index=6
  %copy.2047 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1056)
  %add.4429 = bf16[2,8192,4096]{2,1,0} add(%copy.2046, %copy.2047)
  %convert.2763 = f32[2,8192,4096]{2,1,0} convert(%add.4429)
  %multiply.6136 = f32[2,8192,4096]{2,1,0} multiply(%convert.2763, %convert.2763)
  %reduce.463 = f32[2,8192]{1,0} reduce(%multiply.6136, %constant.5451), dimensions={2}, to_apply=%region_486.22344
  %multiply.6137 = f32[2,8192]{1,0} multiply(%reduce.463, %broadcast.7109)
  %add.4430 = f32[2,8192]{1,0} add(%multiply.6137, %broadcast.7110)
  %reshape.11599 = f32[2,8192,1]{2,1,0} reshape(%add.4430)
  %rsqrt.177 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11599)
  %reshape.11600 = f32[2,8192]{1,0} reshape(%rsqrt.177)
  %broadcast.12872 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11600), dimensions={0,1}
  %multiply.6138 = f32[2,8192,4096]{2,1,0} multiply(%convert.2761, %broadcast.12872)
  %multiply.6139 = f32[2,8192,4096]{2,1,0} multiply(%convert.2763, %convert.2761)
  %reduce.464 = f32[2,8192]{1,0} reduce(%multiply.6139, %constant.5451), dimensions={2}, to_apply=%region_489.22415
  %reshape.11601 = f32[2,8192,1]{2,1,0} reshape(%reduce.464)
  %divide.989 = f32[2,8192,1]{2,1,0} divide(%rsqrt.177, %reshape.11599)
  %multiply.6140 = f32[2,8192,1]{2,1,0} multiply(%divide.989, %broadcast.10161)
  %multiply.6141 = f32[2,8192,1]{2,1,0} multiply(%reshape.11601, %multiply.6140)
  %multiply.6142 = f32[2,8192,1]{2,1,0} multiply(%multiply.6141, %broadcast.10163)
  %reshape.11602 = f32[2,8192]{1,0} reshape(%multiply.6142)
  %broadcast.12876 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11602), dimensions={0,1}
  %multiply.6143 = f32[2,8192,4096]{2,1,0} multiply(%convert.2763, %broadcast.12876)
  %add.4431 = f32[2,8192,4096]{2,1,0} add(%multiply.6138, %multiply.6143)
  %convert.2764 = bf16[2,8192,4096]{2,1,0} convert(%add.4431)
  %add.4432 = bf16[2,8192,4096]{2,1,0} add(%copy.2042, %convert.2764)
  %get-tuple-element.1057 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.24), index=0
  %convert.2765 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.1057)
  %get-tuple-element.1058 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.24), index=22
  %convert.2766 = f32[2,8192]{1,0} convert(%get-tuple-element.1058)
  %broadcast.12877 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2766), dimensions={0,1}
  %divide.991 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.12877, %broadcast.7129)
  %cosine.113 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.991)
  %reshape.11604 = f32[2,8192,128]{2,1,0} reshape(%cosine.113)
  %broadcast.12887 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11604), dimensions={0,1,3}
  %multiply.6156 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2765, %broadcast.12887)
  %slice.696 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1057), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.697 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1057), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.224 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.696, %slice.697), dimensions={3}
  %slice.698 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1057), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.699 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1057), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.225 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.698, %slice.699), dimensions={3}
  %select.2856 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.224, %concatenate.225)
  %convert.2771 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2856)
  %sine.112 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.991)
  %reshape.11609 = f32[2,8192,128]{2,1,0} reshape(%sine.112)
  %broadcast.12893 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11609), dimensions={0,1,3}
  %multiply.6161 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2771, %broadcast.12893)
  %get-tuple-element.1059 = s32[2]{0} get-tuple-element(%opt-barrier.24), index=9
  %broadcast.12894 = s32[64,2]{1,0} broadcast(%get-tuple-element.1059), dimensions={1}
  %reshape.11610 = s32[128]{0} reshape(%broadcast.12894)
  %convert.2772 = f32[128]{0} convert(%reshape.11610)
  %broadcast.12895 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2772), dimensions={3}
  %multiply.6162 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6161, %broadcast.12895)
  %add.4436 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.6156, %multiply.6162)
  %convert.2774 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4436)
  %copy.2048 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2774)
  %get-tuple-element.1060 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.24), index=1
  %convert.2775 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.1060)
  %broadcast.12905 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11604), dimensions={0,1,3}
  %multiply.6173 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2775, %broadcast.12905)
  %slice.700 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1060), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.701 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1060), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.226 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.700, %slice.701), dimensions={3}
  %slice.702 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1060), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.703 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1060), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.227 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.702, %slice.703), dimensions={3}
  %select.2860 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.226, %concatenate.227)
  %convert.2780 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2860)
  %broadcast.12915 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11609), dimensions={0,1,3}
  %multiply.6178 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2780, %broadcast.12915)
  %get-tuple-element.1061 = s32[2]{0} get-tuple-element(%opt-barrier.24), index=10
  %broadcast.12916 = s32[64,2]{1,0} broadcast(%get-tuple-element.1061), dimensions={1}
  %reshape.11618 = s32[128]{0} reshape(%broadcast.12916)
  %convert.2781 = f32[128]{0} convert(%reshape.11618)
  %broadcast.12917 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2781), dimensions={3}
  %multiply.6179 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6178, %broadcast.12917)
  %add.4440 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.6173, %multiply.6179)
  %convert.2782 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4440)
  %copy.2049 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2782)
  %get-tuple-element.1062 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.24), index=2
  %copy.2050 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1062)
  %get-tuple-element.1063 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.24), index=3
  %get-tuple-element.1064 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.24), index=4
  %get-tuple-element.1065 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.24), index=5
  %copy.2051 = bf16[2,8192,4096]{2,1,0} copy(%add.4432)
  %get-tuple-element.1066 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.24), index=17
  %convert.2783 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.1066)
  %all-gather.397 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2783), channel_id=400, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.496 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.2051, %all-gather.397), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2052 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.496)
  %get-tuple-element.1067 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.24), index=21
  %broadcast.12918 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1067), dimensions={0,1}
  %broadcast.12920 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1067), dimensions={0,2}
  %compare.4468 = pred[2,8192,8192]{2,1,0} compare(%broadcast.12918, %broadcast.12920), direction=EQ
  %and.954 = pred[2,8192,8192]{2,1,0} and(%compare.4468, %broadcast.7176)
  %select.2861 = f32[2,8192,8192]{2,1,0} select(%and.954, %broadcast.7177, %broadcast.7179)
  %compare.4470 = pred[2,8192,8192]{2,1,0} compare(%select.2861, %broadcast.7177), direction=NE
  %not.120 = pred[2,8192,8192]{2,1,0} not(%compare.4470)
  %convert.2784 = s32[2,8192,8192]{2,1,0} convert(%not.120)
  %reduce.465 = s32[2,8192]{1,0} reduce(%convert.2784, %constant.5439), dimensions={1}, to_apply=%region_483.22319
  %reshape.11619 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.465)
  %slice.704 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11619), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11621 = s32[2,1]{1,0} reshape(%slice.704)
  %reshape.11632 = s32[2]{0} reshape(%reshape.11621)
  %compare.4483 = pred[2]{0} compare(%reshape.11632, %broadcast.7184), direction=LT
  %reduce-window.338 = s32[2]{0} reduce-window(%reshape.11632, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.24
  %select.2871 = s32[2]{0} select(%compare.4483, %broadcast.7199, %reduce-window.338)
  %scatter.564 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2871), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.24
  %reduce.466 = s32[2,8192]{1,0} reduce(%convert.2784, %constant.5439), dimensions={2}, to_apply=%region_484.22327
  %reshape.11622 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.466)
  %reduce.467 = s32[2,1]{1,0} reduce(%reshape.11622, %constant.5570), dimensions={3,2}, to_apply=%region_485.22332
  %reshape.11641 = s32[2]{0} reshape(%reduce.467)
  %compare.4496 = pred[2]{0} compare(%reshape.11641, %broadcast.7184), direction=LT
  %reduce-window.341 = s32[2]{0} reduce-window(%reshape.11641, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.24.clone
  %select.2881 = s32[2]{0} select(%compare.4496, %broadcast.7199, %reduce-window.341)
  %scatter.569 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2881), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.24
  %custom-call.54 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.2048, %copy.2049, %copy.2050, %constant.5555, %get-tuple-element.1063, /*index=5*/%get-tuple-element.1064, %get-tuple-element.1065, %copy.2052, %scatter.564, %scatter.569, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1074 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.54), index=2
  %copy.2053 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1074)
  %get-tuple-element.1075 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.24), index=19
  %convert.2790 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1075)
  %all-gather.398 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2790), channel_id=401, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.497 = bf16[2,8192,4096]{2,1,0} dot(%copy.2053, %all-gather.398), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1076 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.54), index=1
  %copy.2054 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1076)
  %convert.2791 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.2054)
  %multiply.6181 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2791, %broadcast.12905)
  %convert.2792 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6181)
  %multiply.6182 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2791, %broadcast.12917)
  %multiply.6183 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6182, %broadcast.12915)
  %convert.2793 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6183)
  %select.2882 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2793, %broadcast.10254)
  %slice.705 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2882), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.192 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.705, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4454 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2792, %pad.192)
  %slice.706 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2882), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.193 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.706, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4455 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4454, %pad.193)
  %select.2883 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2793, %broadcast.10254)
  %slice.707 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2883), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.194 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.707, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4456 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4455, %pad.194)
  %slice.708 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2883), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.195 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.708, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4458 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4456, %pad.195)
  %get-tuple-element.1077 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.24), index=16
  %convert.2794 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1077)
  %all-gather.399 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2794), channel_id=402, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.498 = bf16[2,8192,4096]{2,1,0} dot(%add.4458, %all-gather.399), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4459 = bf16[2,8192,4096]{2,1,0} add(%dot.497, %dot.498)
  %copy.2055 = bf16[2,8192,4096]{2,1,0} copy(%add.4459)
  %get-tuple-element.1078 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.54), index=0
  %copy.2056 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1078)
  %convert.2795 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.2056)
  %multiply.6193 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2795, %broadcast.12887)
  %convert.2796 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6193)
  %multiply.6194 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2795, %broadcast.12895)
  %multiply.6195 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6194, %broadcast.12893)
  %convert.2797 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6195)
  %select.2884 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2797, %broadcast.10265)
  %slice.709 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2884), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.196 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.709, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4460 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2796, %pad.196)
  %slice.710 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2884), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.197 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.710, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4461 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4460, %pad.197)
  %select.2885 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2797, %broadcast.10265)
  %slice.711 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2885), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.198 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.711, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4463 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4461, %pad.198)
  %slice.712 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2885), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.199 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.712, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4464 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4463, %pad.199)
  %get-tuple-element.1079 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.24), index=18
  %convert.2799 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.1079)
  %all-gather.400 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2799), channel_id=403, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.499 = bf16[2,8192,4096]{2,1,0} dot(%add.4464, %all-gather.400), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2057 = bf16[2,8192,4096]{2,1,0} copy(%dot.499)
  %add.4465 = bf16[2,8192,4096]{2,1,0} add(%copy.2055, %copy.2057)
  %copy.2058 = bf16[2,8192,4096]{2,1,0} copy(%add.4465)
  %get-tuple-element.1080 = f32[4096]{0} get-tuple-element(%opt-barrier.24), index=15
  %convert.2800 = bf16[4096]{0} convert(%get-tuple-element.1080)
  %broadcast.12982 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2800), dimensions={2}
  %multiply.6206 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2058, %broadcast.12982)
  %convert.2802 = f32[2,8192,4096]{2,1,0} convert(%multiply.6206)
  %convert.2803 = f32[2,8192,4096]{2,1,0} convert(%copy.2046)
  %multiply.6207 = f32[2,8192,4096]{2,1,0} multiply(%convert.2803, %convert.2803)
  %reduce.468 = f32[2,8192]{1,0} reduce(%multiply.6207, %constant.5451), dimensions={2}, to_apply=%region_482.22110
  %multiply.6208 = f32[2,8192]{1,0} multiply(%reduce.468, %broadcast.7109)
  %add.4466 = f32[2,8192]{1,0} add(%multiply.6208, %broadcast.7110)
  %reshape.11664 = f32[2,8192,1]{2,1,0} reshape(%add.4466)
  %rsqrt.178 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11664)
  %reshape.11665 = f32[2,8192]{1,0} reshape(%rsqrt.178)
  %broadcast.12985 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11665), dimensions={0,1}
  %multiply.6209 = f32[2,8192,4096]{2,1,0} multiply(%convert.2802, %broadcast.12985)
  %multiply.6210 = f32[2,8192,4096]{2,1,0} multiply(%convert.2803, %convert.2802)
  %reduce.469 = f32[2,8192]{1,0} reduce(%multiply.6210, %constant.5451), dimensions={2}, to_apply=%region_493.22549
  %reshape.11667 = f32[2,8192,1]{2,1,0} reshape(%reduce.469)
  %divide.996 = f32[2,8192,1]{2,1,0} divide(%rsqrt.178, %reshape.11664)
  %multiply.6211 = f32[2,8192,1]{2,1,0} multiply(%divide.996, %broadcast.10161)
  %multiply.6212 = f32[2,8192,1]{2,1,0} multiply(%reshape.11667, %multiply.6211)
  %multiply.6213 = f32[2,8192,1]{2,1,0} multiply(%multiply.6212, %broadcast.10163)
  %reshape.11668 = f32[2,8192]{1,0} reshape(%multiply.6213)
  %broadcast.12987 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11668), dimensions={0,1}
  %multiply.6214 = f32[2,8192,4096]{2,1,0} multiply(%convert.2803, %broadcast.12987)
  %add.4467 = f32[2,8192,4096]{2,1,0} add(%multiply.6209, %multiply.6214)
  %convert.2805 = bf16[2,8192,4096]{2,1,0} convert(%add.4467)
  %add.4468 = bf16[2,8192,4096]{2,1,0} add(%add.4432, %convert.2805)
  %copy.2059 = bf16[2,8192,4096]{2,1,0} copy(%add.4468)
  %tuple.143 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.42, %reduce-precision.43, %reduce-precision.44, %get-tuple-element.201, %get-tuple-element.202, /*index=5*/%reduce-precision.45, %reduce-precision.46, %reduce-precision.47, %reduce-precision.48, %constant.5507, /*index=10*/%constant.5507, %param.67, %param.68, %param.69, %param.66, /*index=15*/%param.61, %param.63, %param.65, %param.62, %param.64, /*index=20*/%copy.1268, %param.10, %param.7, %copy.2059)
  %opt-barrier.25 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.143)
  %get-tuple-element.1081 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.25), index=23
  %copy.2060 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1081)
  %get-tuple-element.1082 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.25), index=7
  %negate.938 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.1082)
  %exponential.184 = bf16[2,8192,14336]{2,1,0} exponential(%negate.938)
  %add.4469 = bf16[2,8192,14336]{2,1,0} add(%exponential.184, %broadcast.7215)
  %divide.997 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4469)
  %multiply.6215 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1082, %divide.997)
  %copy.2061 = bf16[2,8192,4096]{2,1,0} copy(%copy.2060)
  %get-tuple-element.1083 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.25), index=13
  %convert.2806 = bf16[14336,256]{1,0} convert(%get-tuple-element.1083)
  %all-gather.401 = bf16[14336,4096]{1,0} all-gather(%convert.2806), channel_id=404, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.500 = bf16[2,8192,14336]{2,1,0} dot(%copy.2061, %all-gather.401), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.2062 = bf16[2,8192,14336]{2,1,0} copy(%dot.500)
  %multiply.6216 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6215, %copy.2062)
  %get-tuple-element.1084 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.25), index=12
  %convert.2807 = bf16[256,14336]{1,0} convert(%get-tuple-element.1084)
  %all-gather.402 = bf16[4096,14336]{1,0} all-gather(%convert.2807), channel_id=405, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.501 = bf16[2,8192,4096]{2,1,0} dot(%multiply.6216, %all-gather.402), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.1085 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.25), index=8
  %multiply.6217 = bf16[2,8192,14336]{2,1,0} multiply(%copy.2062, %get-tuple-element.1085)
  %multiply.6218 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6217, %divide.997)
  %multiply.6219 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1082, %multiply.6217)
  %subtract.320 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.997)
  %multiply.6220 = bf16[2,8192,14336]{2,1,0} multiply(%divide.997, %subtract.320)
  %multiply.6221 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6219, %multiply.6220)
  %add.4470 = bf16[2,8192,14336]{2,1,0} add(%multiply.6218, %multiply.6221)
  %get-tuple-element.1086 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.25), index=11
  %convert.2808 = bf16[256,14336]{1,0} convert(%get-tuple-element.1086)
  %all-gather.403 = bf16[4096,14336]{1,0} all-gather(%convert.2808), channel_id=406, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.502 = bf16[2,8192,4096]{2,1,0} dot(%add.4470, %all-gather.403), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4471 = bf16[2,8192,4096]{2,1,0} add(%dot.501, %dot.502)
  %copy.2063 = bf16[2,8192,4096]{2,1,0} copy(%add.4471)
  %get-tuple-element.1087 = f32[4096]{0} get-tuple-element(%opt-barrier.25), index=14
  %convert.2809 = bf16[4096]{0} convert(%get-tuple-element.1087)
  %broadcast.12989 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2809), dimensions={2}
  %multiply.6222 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2063, %broadcast.12989)
  %convert.2810 = f32[2,8192,4096]{2,1,0} convert(%multiply.6222)
  %get-tuple-element.1088 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.25), index=20
  %copy.2064 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1088)
  %get-tuple-element.1089 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.25), index=6
  %copy.2065 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1089)
  %add.4472 = bf16[2,8192,4096]{2,1,0} add(%copy.2064, %copy.2065)
  %convert.2811 = f32[2,8192,4096]{2,1,0} convert(%add.4472)
  %multiply.6223 = f32[2,8192,4096]{2,1,0} multiply(%convert.2811, %convert.2811)
  %reduce.470 = f32[2,8192]{1,0} reduce(%multiply.6223, %constant.5451), dimensions={2}, to_apply=%region_499.22836
  %multiply.6224 = f32[2,8192]{1,0} multiply(%reduce.470, %broadcast.7109)
  %add.4473 = f32[2,8192]{1,0} add(%multiply.6224, %broadcast.7110)
  %reshape.11669 = f32[2,8192,1]{2,1,0} reshape(%add.4473)
  %rsqrt.179 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11669)
  %reshape.11670 = f32[2,8192]{1,0} reshape(%rsqrt.179)
  %broadcast.12992 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11670), dimensions={0,1}
  %multiply.6225 = f32[2,8192,4096]{2,1,0} multiply(%convert.2810, %broadcast.12992)
  %multiply.6226 = f32[2,8192,4096]{2,1,0} multiply(%convert.2811, %convert.2810)
  %reduce.471 = f32[2,8192]{1,0} reduce(%multiply.6226, %constant.5451), dimensions={2}, to_apply=%region_502.22907
  %reshape.11671 = f32[2,8192,1]{2,1,0} reshape(%reduce.471)
  %divide.998 = f32[2,8192,1]{2,1,0} divide(%rsqrt.179, %reshape.11669)
  %multiply.6227 = f32[2,8192,1]{2,1,0} multiply(%divide.998, %broadcast.10161)
  %multiply.6228 = f32[2,8192,1]{2,1,0} multiply(%reshape.11671, %multiply.6227)
  %multiply.6230 = f32[2,8192,1]{2,1,0} multiply(%multiply.6228, %broadcast.10163)
  %reshape.11672 = f32[2,8192]{1,0} reshape(%multiply.6230)
  %broadcast.12994 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11672), dimensions={0,1}
  %multiply.6231 = f32[2,8192,4096]{2,1,0} multiply(%convert.2811, %broadcast.12994)
  %add.4474 = f32[2,8192,4096]{2,1,0} add(%multiply.6225, %multiply.6231)
  %convert.2812 = bf16[2,8192,4096]{2,1,0} convert(%add.4474)
  %add.4475 = bf16[2,8192,4096]{2,1,0} add(%copy.2060, %convert.2812)
  %get-tuple-element.1090 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.25), index=0
  %convert.2813 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.1090)
  %get-tuple-element.1091 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.25), index=22
  %convert.2814 = f32[2,8192]{1,0} convert(%get-tuple-element.1091)
  %broadcast.12995 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2814), dimensions={0,1}
  %divide.1000 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.12995, %broadcast.7129)
  %cosine.115 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.1000)
  %reshape.11674 = f32[2,8192,128]{2,1,0} reshape(%cosine.115)
  %broadcast.13005 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11674), dimensions={0,1,3}
  %multiply.6244 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2813, %broadcast.13005)
  %slice.713 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1090), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.714 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1090), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.228 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.713, %slice.714), dimensions={3}
  %slice.715 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1090), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.716 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1090), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.229 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.715, %slice.716), dimensions={3}
  %select.2889 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.228, %concatenate.229)
  %convert.2818 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2889)
  %sine.114 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.1000)
  %reshape.11679 = f32[2,8192,128]{2,1,0} reshape(%sine.114)
  %broadcast.13014 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11679), dimensions={0,1,3}
  %multiply.6249 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2818, %broadcast.13014)
  %get-tuple-element.1092 = s32[2]{0} get-tuple-element(%opt-barrier.25), index=9
  %broadcast.13015 = s32[64,2]{1,0} broadcast(%get-tuple-element.1092), dimensions={1}
  %reshape.11680 = s32[128]{0} reshape(%broadcast.13015)
  %convert.2819 = f32[128]{0} convert(%reshape.11680)
  %broadcast.13016 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2819), dimensions={3}
  %multiply.6250 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6249, %broadcast.13016)
  %add.4479 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.6244, %multiply.6250)
  %convert.2820 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4479)
  %copy.2066 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2820)
  %get-tuple-element.1093 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.25), index=1
  %convert.2821 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.1093)
  %broadcast.13026 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11674), dimensions={0,1,3}
  %multiply.6262 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2821, %broadcast.13026)
  %slice.717 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1093), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.718 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1093), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.230 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.717, %slice.718), dimensions={3}
  %slice.719 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1093), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.720 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1093), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.231 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.719, %slice.720), dimensions={3}
  %select.2893 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.230, %concatenate.231)
  %convert.2827 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2893)
  %broadcast.13032 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11679), dimensions={0,1,3}
  %multiply.6267 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2827, %broadcast.13032)
  %get-tuple-element.1094 = s32[2]{0} get-tuple-element(%opt-barrier.25), index=10
  %broadcast.13033 = s32[64,2]{1,0} broadcast(%get-tuple-element.1094), dimensions={1}
  %reshape.11688 = s32[128]{0} reshape(%broadcast.13033)
  %convert.2828 = f32[128]{0} convert(%reshape.11688)
  %broadcast.13034 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2828), dimensions={3}
  %multiply.6268 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6267, %broadcast.13034)
  %add.4483 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.6262, %multiply.6268)
  %convert.2829 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4483)
  %copy.2067 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2829)
  %get-tuple-element.1095 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.25), index=2
  %copy.2068 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1095)
  %get-tuple-element.1096 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.25), index=3
  %get-tuple-element.1097 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.25), index=4
  %get-tuple-element.1098 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.25), index=5
  %copy.2069 = bf16[2,8192,4096]{2,1,0} copy(%add.4475)
  %get-tuple-element.1099 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.25), index=17
  %convert.2830 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.1099)
  %all-gather.404 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2830), channel_id=407, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.503 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.2069, %all-gather.404), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2070 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.503)
  %get-tuple-element.1100 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.25), index=21
  %broadcast.13035 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1100), dimensions={0,1}
  %broadcast.13036 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1100), dimensions={0,2}
  %compare.4518 = pred[2,8192,8192]{2,1,0} compare(%broadcast.13035, %broadcast.13036), direction=EQ
  %and.963 = pred[2,8192,8192]{2,1,0} and(%compare.4518, %broadcast.7176)
  %select.2894 = f32[2,8192,8192]{2,1,0} select(%and.963, %broadcast.7177, %broadcast.7179)
  %compare.4520 = pred[2,8192,8192]{2,1,0} compare(%select.2894, %broadcast.7177), direction=NE
  %not.121 = pred[2,8192,8192]{2,1,0} not(%compare.4520)
  %convert.2831 = s32[2,8192,8192]{2,1,0} convert(%not.121)
  %reduce.472 = s32[2,8192]{1,0} reduce(%convert.2831, %constant.5439), dimensions={1}, to_apply=%region_496.22811
  %reshape.11689 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.472)
  %slice.721 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11689), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11691 = s32[2,1]{1,0} reshape(%slice.721)
  %reshape.11700 = s32[2]{0} reshape(%reshape.11691)
  %compare.4535 = pred[2]{0} compare(%reshape.11700, %broadcast.7184), direction=LT
  %reduce-window.344 = s32[2]{0} reduce-window(%reshape.11700, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.25
  %select.2905 = s32[2]{0} select(%compare.4535, %broadcast.7199, %reduce-window.344)
  %scatter.574 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2905), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.25
  %reduce.473 = s32[2,8192]{1,0} reduce(%convert.2831, %constant.5439), dimensions={2}, to_apply=%region_497.22819
  %reshape.11692 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.473)
  %reduce.474 = s32[2,1]{1,0} reduce(%reshape.11692, %constant.5570), dimensions={3,2}, to_apply=%region_498.22824
  %reshape.11708 = s32[2]{0} reshape(%reduce.474)
  %compare.4548 = pred[2]{0} compare(%reshape.11708, %broadcast.7184), direction=LT
  %reduce-window.347 = s32[2]{0} reduce-window(%reshape.11708, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.25.clone
  %select.2915 = s32[2]{0} select(%compare.4548, %broadcast.7199, %reduce-window.347)
  %scatter.579 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2915), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.25
  %custom-call.55 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.2066, %copy.2067, %copy.2068, %constant.5555, %get-tuple-element.1096, /*index=5*/%get-tuple-element.1097, %get-tuple-element.1098, %copy.2070, %scatter.574, %scatter.579, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1107 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.55), index=2
  %copy.2071 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1107)
  %get-tuple-element.1108 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.25), index=19
  %convert.2837 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1108)
  %all-gather.405 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2837), channel_id=408, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.504 = bf16[2,8192,4096]{2,1,0} dot(%copy.2071, %all-gather.405), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1109 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.55), index=1
  %copy.2072 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1109)
  %convert.2838 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.2072)
  %multiply.6270 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2838, %broadcast.13026)
  %convert.2839 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6270)
  %multiply.6271 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2838, %broadcast.13034)
  %multiply.6272 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6271, %broadcast.13032)
  %convert.2840 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6272)
  %select.2916 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2840, %broadcast.10254)
  %slice.722 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2916), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.200 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.722, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4496 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2839, %pad.200)
  %slice.723 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2916), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.201 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.723, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4497 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4496, %pad.201)
  %select.2917 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2840, %broadcast.10254)
  %slice.724 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2917), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.202 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.724, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4498 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4497, %pad.202)
  %slice.725 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2917), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.203 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.725, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4499 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4498, %pad.203)
  %get-tuple-element.1110 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.25), index=16
  %convert.2841 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1110)
  %all-gather.406 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2841), channel_id=409, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.505 = bf16[2,8192,4096]{2,1,0} dot(%add.4499, %all-gather.406), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4500 = bf16[2,8192,4096]{2,1,0} add(%dot.504, %dot.505)
  %copy.2073 = bf16[2,8192,4096]{2,1,0} copy(%add.4500)
  %get-tuple-element.1111 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.55), index=0
  %copy.2074 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1111)
  %convert.2842 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.2074)
  %multiply.6283 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2842, %broadcast.13005)
  %convert.2843 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6283)
  %multiply.6284 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2842, %broadcast.13016)
  %multiply.6285 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6284, %broadcast.13014)
  %convert.2844 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6285)
  %select.2918 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2844, %broadcast.10265)
  %slice.726 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2918), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.204 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.726, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4501 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2843, %pad.204)
  %slice.727 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2918), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.205 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.727, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4502 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4501, %pad.205)
  %select.2919 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2844, %broadcast.10265)
  %slice.728 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2919), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.206 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.728, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4503 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4502, %pad.206)
  %slice.729 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2919), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.207 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.729, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4504 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4503, %pad.207)
  %get-tuple-element.1112 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.25), index=18
  %convert.2845 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.1112)
  %all-gather.407 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2845), channel_id=410, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.506 = bf16[2,8192,4096]{2,1,0} dot(%add.4504, %all-gather.407), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2075 = bf16[2,8192,4096]{2,1,0} copy(%dot.506)
  %add.4505 = bf16[2,8192,4096]{2,1,0} add(%copy.2073, %copy.2075)
  %copy.2076 = bf16[2,8192,4096]{2,1,0} copy(%add.4505)
  %get-tuple-element.1113 = f32[4096]{0} get-tuple-element(%opt-barrier.25), index=15
  %convert.2846 = bf16[4096]{0} convert(%get-tuple-element.1113)
  %broadcast.13088 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2846), dimensions={2}
  %multiply.6294 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2076, %broadcast.13088)
  %convert.2847 = f32[2,8192,4096]{2,1,0} convert(%multiply.6294)
  %convert.2848 = f32[2,8192,4096]{2,1,0} convert(%copy.2064)
  %multiply.6295 = f32[2,8192,4096]{2,1,0} multiply(%convert.2848, %convert.2848)
  %reduce.475 = f32[2,8192]{1,0} reduce(%multiply.6295, %constant.5451), dimensions={2}, to_apply=%region_495.22602
  %multiply.6296 = f32[2,8192]{1,0} multiply(%reduce.475, %broadcast.7109)
  %add.4506 = f32[2,8192]{1,0} add(%multiply.6296, %broadcast.7110)
  %reshape.11733 = f32[2,8192,1]{2,1,0} reshape(%add.4506)
  %rsqrt.180 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11733)
  %reshape.11734 = f32[2,8192]{1,0} reshape(%rsqrt.180)
  %broadcast.13091 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11734), dimensions={0,1}
  %multiply.6297 = f32[2,8192,4096]{2,1,0} multiply(%convert.2847, %broadcast.13091)
  %multiply.6298 = f32[2,8192,4096]{2,1,0} multiply(%convert.2848, %convert.2847)
  %reduce.476 = f32[2,8192]{1,0} reduce(%multiply.6298, %constant.5451), dimensions={2}, to_apply=%region_506.23041
  %reshape.11735 = f32[2,8192,1]{2,1,0} reshape(%reduce.476)
  %divide.1005 = f32[2,8192,1]{2,1,0} divide(%rsqrt.180, %reshape.11733)
  %multiply.6299 = f32[2,8192,1]{2,1,0} multiply(%divide.1005, %broadcast.10161)
  %multiply.6300 = f32[2,8192,1]{2,1,0} multiply(%reshape.11735, %multiply.6299)
  %multiply.6301 = f32[2,8192,1]{2,1,0} multiply(%multiply.6300, %broadcast.10163)
  %reshape.11736 = f32[2,8192]{1,0} reshape(%multiply.6301)
  %broadcast.13093 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11736), dimensions={0,1}
  %multiply.6302 = f32[2,8192,4096]{2,1,0} multiply(%convert.2848, %broadcast.13093)
  %add.4507 = f32[2,8192,4096]{2,1,0} add(%multiply.6297, %multiply.6302)
  %convert.2849 = bf16[2,8192,4096]{2,1,0} convert(%add.4507)
  %add.4508 = bf16[2,8192,4096]{2,1,0} add(%add.4475, %convert.2849)
  %copy.2077 = bf16[2,8192,4096]{2,1,0} copy(%add.4508)
  %tuple.145 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.35, %reduce-precision.36, %reduce-precision.37, %get-tuple-element.199, %get-tuple-element.200, /*index=5*/%reduce-precision.38, %reduce-precision.39, %reduce-precision.40, %reduce-precision.41, %constant.5507, /*index=10*/%constant.5507, %param.58, %param.59, %param.60, %param.57, /*index=15*/%param.52, %param.54, %param.56, %param.53, %param.55, /*index=20*/%copy.1255, %param.10, %param.7, %copy.2077)
  %opt-barrier.26 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.145)
  %get-tuple-element.1114 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.26), index=23
  %copy.2078 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1114)
  %get-tuple-element.1115 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.26), index=7
  %negate.941 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.1115)
  %exponential.185 = bf16[2,8192,14336]{2,1,0} exponential(%negate.941)
  %add.4509 = bf16[2,8192,14336]{2,1,0} add(%exponential.185, %broadcast.7215)
  %divide.1006 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4509)
  %multiply.6303 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1115, %divide.1006)
  %copy.2079 = bf16[2,8192,4096]{2,1,0} copy(%copy.2078)
  %get-tuple-element.1116 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.26), index=13
  %convert.2850 = bf16[14336,256]{1,0} convert(%get-tuple-element.1116)
  %all-gather.408 = bf16[14336,4096]{1,0} all-gather(%convert.2850), channel_id=411, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.507 = bf16[2,8192,14336]{2,1,0} dot(%copy.2079, %all-gather.408), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.2080 = bf16[2,8192,14336]{2,1,0} copy(%dot.507)
  %multiply.6304 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6303, %copy.2080)
  %get-tuple-element.1117 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.26), index=12
  %convert.2852 = bf16[256,14336]{1,0} convert(%get-tuple-element.1117)
  %all-gather.409 = bf16[4096,14336]{1,0} all-gather(%convert.2852), channel_id=412, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.508 = bf16[2,8192,4096]{2,1,0} dot(%multiply.6304, %all-gather.409), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.1118 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.26), index=8
  %multiply.6306 = bf16[2,8192,14336]{2,1,0} multiply(%copy.2080, %get-tuple-element.1118)
  %multiply.6307 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6306, %divide.1006)
  %multiply.6308 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1115, %multiply.6306)
  %subtract.325 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.1006)
  %multiply.6309 = bf16[2,8192,14336]{2,1,0} multiply(%divide.1006, %subtract.325)
  %multiply.6311 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6308, %multiply.6309)
  %add.4510 = bf16[2,8192,14336]{2,1,0} add(%multiply.6307, %multiply.6311)
  %get-tuple-element.1119 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.26), index=11
  %convert.2853 = bf16[256,14336]{1,0} convert(%get-tuple-element.1119)
  %all-gather.410 = bf16[4096,14336]{1,0} all-gather(%convert.2853), channel_id=413, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.509 = bf16[2,8192,4096]{2,1,0} dot(%add.4510, %all-gather.410), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4511 = bf16[2,8192,4096]{2,1,0} add(%dot.508, %dot.509)
  %copy.2081 = bf16[2,8192,4096]{2,1,0} copy(%add.4511)
  %get-tuple-element.1120 = f32[4096]{0} get-tuple-element(%opt-barrier.26), index=14
  %convert.2854 = bf16[4096]{0} convert(%get-tuple-element.1120)
  %broadcast.13095 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2854), dimensions={2}
  %multiply.6312 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2081, %broadcast.13095)
  %convert.2855 = f32[2,8192,4096]{2,1,0} convert(%multiply.6312)
  %get-tuple-element.1121 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.26), index=20
  %copy.2082 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1121)
  %get-tuple-element.1122 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.26), index=6
  %copy.2083 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1122)
  %add.4512 = bf16[2,8192,4096]{2,1,0} add(%copy.2082, %copy.2083)
  %convert.2856 = f32[2,8192,4096]{2,1,0} convert(%add.4512)
  %multiply.6313 = f32[2,8192,4096]{2,1,0} multiply(%convert.2856, %convert.2856)
  %reduce.477 = f32[2,8192]{1,0} reduce(%multiply.6313, %constant.5451), dimensions={2}, to_apply=%region_512.23328
  %multiply.6314 = f32[2,8192]{1,0} multiply(%reduce.477, %broadcast.7109)
  %add.4513 = f32[2,8192]{1,0} add(%multiply.6314, %broadcast.7110)
  %reshape.11737 = f32[2,8192,1]{2,1,0} reshape(%add.4513)
  %rsqrt.181 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11737)
  %reshape.11738 = f32[2,8192]{1,0} reshape(%rsqrt.181)
  %broadcast.13098 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11738), dimensions={0,1}
  %multiply.6315 = f32[2,8192,4096]{2,1,0} multiply(%convert.2855, %broadcast.13098)
  %multiply.6317 = f32[2,8192,4096]{2,1,0} multiply(%convert.2856, %convert.2855)
  %reduce.478 = f32[2,8192]{1,0} reduce(%multiply.6317, %constant.5451), dimensions={2}, to_apply=%region_515.23399
  %reshape.11739 = f32[2,8192,1]{2,1,0} reshape(%reduce.478)
  %divide.1007 = f32[2,8192,1]{2,1,0} divide(%rsqrt.181, %reshape.11737)
  %multiply.6318 = f32[2,8192,1]{2,1,0} multiply(%divide.1007, %broadcast.10161)
  %multiply.6319 = f32[2,8192,1]{2,1,0} multiply(%reshape.11739, %multiply.6318)
  %multiply.6320 = f32[2,8192,1]{2,1,0} multiply(%multiply.6319, %broadcast.10163)
  %reshape.11740 = f32[2,8192]{1,0} reshape(%multiply.6320)
  %broadcast.13100 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11740), dimensions={0,1}
  %multiply.6321 = f32[2,8192,4096]{2,1,0} multiply(%convert.2856, %broadcast.13100)
  %add.4514 = f32[2,8192,4096]{2,1,0} add(%multiply.6315, %multiply.6321)
  %convert.2857 = bf16[2,8192,4096]{2,1,0} convert(%add.4514)
  %add.4515 = bf16[2,8192,4096]{2,1,0} add(%copy.2078, %convert.2857)
  %get-tuple-element.1123 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.26), index=0
  %convert.2858 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.1123)
  %get-tuple-element.1124 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.26), index=22
  %convert.2859 = f32[2,8192]{1,0} convert(%get-tuple-element.1124)
  %broadcast.13102 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2859), dimensions={0,1}
  %divide.1009 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.13102, %broadcast.7129)
  %cosine.117 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.1009)
  %reshape.11742 = f32[2,8192,128]{2,1,0} reshape(%cosine.117)
  %broadcast.13116 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11742), dimensions={0,1,3}
  %multiply.6332 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2858, %broadcast.13116)
  %slice.730 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1123), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.731 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1123), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.232 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.730, %slice.731), dimensions={3}
  %slice.732 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1123), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.733 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1123), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.233 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.732, %slice.733), dimensions={3}
  %select.2925 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.232, %concatenate.233)
  %convert.2863 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2925)
  %sine.116 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.1009)
  %reshape.11747 = f32[2,8192,128]{2,1,0} reshape(%sine.116)
  %broadcast.13122 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11747), dimensions={0,1,3}
  %multiply.6337 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2863, %broadcast.13122)
  %get-tuple-element.1125 = s32[2]{0} get-tuple-element(%opt-barrier.26), index=9
  %broadcast.13123 = s32[64,2]{1,0} broadcast(%get-tuple-element.1125), dimensions={1}
  %reshape.11748 = s32[128]{0} reshape(%broadcast.13123)
  %convert.2864 = f32[128]{0} convert(%reshape.11748)
  %broadcast.13124 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2864), dimensions={3}
  %multiply.6338 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6337, %broadcast.13124)
  %add.4519 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.6332, %multiply.6338)
  %convert.2866 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4519)
  %copy.2084 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2866)
  %get-tuple-element.1126 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.26), index=1
  %convert.2867 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.1126)
  %broadcast.13137 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11742), dimensions={0,1,3}
  %multiply.6349 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2867, %broadcast.13137)
  %slice.734 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1126), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.735 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1126), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.234 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.734, %slice.735), dimensions={3}
  %slice.736 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1126), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.737 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1126), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.235 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.736, %slice.737), dimensions={3}
  %select.2929 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.234, %concatenate.235)
  %convert.2873 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2929)
  %broadcast.13146 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11747), dimensions={0,1,3}
  %multiply.6354 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2873, %broadcast.13146)
  %get-tuple-element.1127 = s32[2]{0} get-tuple-element(%opt-barrier.26), index=10
  %broadcast.13147 = s32[64,2]{1,0} broadcast(%get-tuple-element.1127), dimensions={1}
  %reshape.11756 = s32[128]{0} reshape(%broadcast.13147)
  %convert.2874 = f32[128]{0} convert(%reshape.11756)
  %broadcast.13148 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2874), dimensions={3}
  %multiply.6355 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6354, %broadcast.13148)
  %add.4524 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.6349, %multiply.6355)
  %convert.2876 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4524)
  %copy.2085 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2876)
  %get-tuple-element.1128 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.26), index=2
  %copy.2086 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1128)
  %get-tuple-element.1129 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.26), index=3
  %get-tuple-element.1130 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.26), index=4
  %get-tuple-element.1131 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.26), index=5
  %copy.2087 = bf16[2,8192,4096]{2,1,0} copy(%add.4515)
  %get-tuple-element.1132 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.26), index=17
  %convert.2877 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.1132)
  %all-gather.411 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2877), channel_id=414, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.510 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.2087, %all-gather.411), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2088 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.510)
  %get-tuple-element.1133 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.26), index=21
  %broadcast.13149 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1133), dimensions={0,1}
  %broadcast.13150 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1133), dimensions={0,2}
  %compare.4567 = pred[2,8192,8192]{2,1,0} compare(%broadcast.13149, %broadcast.13150), direction=EQ
  %and.972 = pred[2,8192,8192]{2,1,0} and(%compare.4567, %broadcast.7176)
  %select.2930 = f32[2,8192,8192]{2,1,0} select(%and.972, %broadcast.7177, %broadcast.7179)
  %compare.4569 = pred[2,8192,8192]{2,1,0} compare(%select.2930, %broadcast.7177), direction=NE
  %not.122 = pred[2,8192,8192]{2,1,0} not(%compare.4569)
  %convert.2878 = s32[2,8192,8192]{2,1,0} convert(%not.122)
  %reduce.479 = s32[2,8192]{1,0} reduce(%convert.2878, %constant.5439), dimensions={1}, to_apply=%region_509.23303
  %reshape.11757 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.479)
  %slice.738 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11757), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11759 = s32[2,1]{1,0} reshape(%slice.738)
  %reshape.11768 = s32[2]{0} reshape(%reshape.11759)
  %compare.4583 = pred[2]{0} compare(%reshape.11768, %broadcast.7184), direction=LT
  %reduce-window.350 = s32[2]{0} reduce-window(%reshape.11768, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.26
  %select.2940 = s32[2]{0} select(%compare.4583, %broadcast.7199, %reduce-window.350)
  %scatter.584 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2940), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.26
  %reduce.480 = s32[2,8192]{1,0} reduce(%convert.2878, %constant.5439), dimensions={2}, to_apply=%region_510.23311
  %reshape.11760 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.480)
  %reduce.481 = s32[2,1]{1,0} reduce(%reshape.11760, %constant.5570), dimensions={3,2}, to_apply=%region_511.23316
  %reshape.11776 = s32[2]{0} reshape(%reduce.481)
  %compare.4598 = pred[2]{0} compare(%reshape.11776, %broadcast.7184), direction=LT
  %reduce-window.353 = s32[2]{0} reduce-window(%reshape.11776, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.26.clone
  %select.2950 = s32[2]{0} select(%compare.4598, %broadcast.7199, %reduce-window.353)
  %scatter.589 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2950), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.26
  %custom-call.56 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.2084, %copy.2085, %copy.2086, %constant.5555, %get-tuple-element.1129, /*index=5*/%get-tuple-element.1130, %get-tuple-element.1131, %copy.2088, %scatter.584, %scatter.589, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1140 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.56), index=2
  %copy.2089 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1140)
  %get-tuple-element.1141 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.26), index=19
  %convert.2883 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1141)
  %all-gather.412 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2883), channel_id=415, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.511 = bf16[2,8192,4096]{2,1,0} dot(%copy.2089, %all-gather.412), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1142 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.56), index=1
  %copy.2090 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1142)
  %convert.2884 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.2090)
  %multiply.6357 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2884, %broadcast.13137)
  %convert.2885 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6357)
  %multiply.6358 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2884, %broadcast.13148)
  %multiply.6359 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6358, %broadcast.13146)
  %convert.2886 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6359)
  %select.2951 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2886, %broadcast.10254)
  %slice.739 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2951), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.208 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.739, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4537 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2885, %pad.208)
  %slice.740 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2951), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.209 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.740, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4538 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4537, %pad.209)
  %select.2952 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2886, %broadcast.10254)
  %slice.741 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2952), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.210 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.741, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4539 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4538, %pad.210)
  %slice.742 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2952), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.211 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.742, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4540 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4539, %pad.211)
  %get-tuple-element.1143 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.26), index=16
  %convert.2887 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1143)
  %all-gather.413 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2887), channel_id=416, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.512 = bf16[2,8192,4096]{2,1,0} dot(%add.4540, %all-gather.413), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4541 = bf16[2,8192,4096]{2,1,0} add(%dot.511, %dot.512)
  %copy.2091 = bf16[2,8192,4096]{2,1,0} copy(%add.4541)
  %get-tuple-element.1144 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.56), index=0
  %copy.2092 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1144)
  %convert.2888 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.2092)
  %multiply.6368 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2888, %broadcast.13116)
  %convert.2889 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6368)
  %multiply.6369 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2888, %broadcast.13124)
  %multiply.6370 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6369, %broadcast.13122)
  %convert.2890 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6370)
  %select.2953 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2890, %broadcast.10265)
  %slice.743 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2953), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.212 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.743, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4542 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2889, %pad.212)
  %slice.744 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2953), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.213 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.744, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4543 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4542, %pad.213)
  %select.2954 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2890, %broadcast.10265)
  %slice.745 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2954), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.214 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.745, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4544 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4543, %pad.214)
  %slice.746 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2954), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.215 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.746, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4545 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4544, %pad.215)
  %get-tuple-element.1145 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.26), index=18
  %convert.2891 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.1145)
  %all-gather.414 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2891), channel_id=417, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.513 = bf16[2,8192,4096]{2,1,0} dot(%add.4545, %all-gather.414), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2093 = bf16[2,8192,4096]{2,1,0} copy(%dot.513)
  %add.4546 = bf16[2,8192,4096]{2,1,0} add(%copy.2091, %copy.2093)
  %copy.2094 = bf16[2,8192,4096]{2,1,0} copy(%add.4546)
  %get-tuple-element.1146 = f32[4096]{0} get-tuple-element(%opt-barrier.26), index=15
  %convert.2892 = bf16[4096]{0} convert(%get-tuple-element.1146)
  %broadcast.13199 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2892), dimensions={2}
  %multiply.6380 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2094, %broadcast.13199)
  %convert.2893 = f32[2,8192,4096]{2,1,0} convert(%multiply.6380)
  %convert.2894 = f32[2,8192,4096]{2,1,0} convert(%copy.2082)
  %multiply.6381 = f32[2,8192,4096]{2,1,0} multiply(%convert.2894, %convert.2894)
  %reduce.482 = f32[2,8192]{1,0} reduce(%multiply.6381, %constant.5451), dimensions={2}, to_apply=%region_508.23094
  %multiply.6382 = f32[2,8192]{1,0} multiply(%reduce.482, %broadcast.7109)
  %add.4547 = f32[2,8192]{1,0} add(%multiply.6382, %broadcast.7110)
  %reshape.11801 = f32[2,8192,1]{2,1,0} reshape(%add.4547)
  %rsqrt.182 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11801)
  %reshape.11802 = f32[2,8192]{1,0} reshape(%rsqrt.182)
  %broadcast.13202 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11802), dimensions={0,1}
  %multiply.6383 = f32[2,8192,4096]{2,1,0} multiply(%convert.2893, %broadcast.13202)
  %multiply.6384 = f32[2,8192,4096]{2,1,0} multiply(%convert.2894, %convert.2893)
  %reduce.483 = f32[2,8192]{1,0} reduce(%multiply.6384, %constant.5451), dimensions={2}, to_apply=%region_519.23533
  %reshape.11803 = f32[2,8192,1]{2,1,0} reshape(%reduce.483)
  %divide.1014 = f32[2,8192,1]{2,1,0} divide(%rsqrt.182, %reshape.11801)
  %multiply.6385 = f32[2,8192,1]{2,1,0} multiply(%divide.1014, %broadcast.10161)
  %multiply.6386 = f32[2,8192,1]{2,1,0} multiply(%reshape.11803, %multiply.6385)
  %multiply.6387 = f32[2,8192,1]{2,1,0} multiply(%multiply.6386, %broadcast.10163)
  %reshape.11804 = f32[2,8192]{1,0} reshape(%multiply.6387)
  %broadcast.13205 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11804), dimensions={0,1}
  %multiply.6388 = f32[2,8192,4096]{2,1,0} multiply(%convert.2894, %broadcast.13205)
  %add.4548 = f32[2,8192,4096]{2,1,0} add(%multiply.6383, %multiply.6388)
  %convert.2895 = bf16[2,8192,4096]{2,1,0} convert(%add.4548)
  %add.4549 = bf16[2,8192,4096]{2,1,0} add(%add.4515, %convert.2895)
  %copy.2095 = bf16[2,8192,4096]{2,1,0} copy(%add.4549)
  %tuple.147 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.28, %reduce-precision.29, %reduce-precision.30, %get-tuple-element.197, %get-tuple-element.198, /*index=5*/%reduce-precision.31, %reduce-precision.32, %reduce-precision.33, %reduce-precision.34, %constant.5507, /*index=10*/%constant.5507, %param.49, %param.50, %param.51, %param.48, /*index=15*/%param.43, %param.45, %param.47, %param.44, %param.46, /*index=20*/%copy.1242, %param.10, %param.7, %copy.2095)
  %opt-barrier.27 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.147)
  %get-tuple-element.1147 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.27), index=23
  %copy.2096 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1147)
  %get-tuple-element.1148 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.27), index=7
  %negate.944 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.1148)
  %exponential.186 = bf16[2,8192,14336]{2,1,0} exponential(%negate.944)
  %add.4550 = bf16[2,8192,14336]{2,1,0} add(%exponential.186, %broadcast.7215)
  %divide.1015 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4550)
  %multiply.6390 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1148, %divide.1015)
  %copy.2097 = bf16[2,8192,4096]{2,1,0} copy(%copy.2096)
  %get-tuple-element.1149 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.27), index=13
  %convert.2896 = bf16[14336,256]{1,0} convert(%get-tuple-element.1149)
  %all-gather.415 = bf16[14336,4096]{1,0} all-gather(%convert.2896), channel_id=418, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.514 = bf16[2,8192,14336]{2,1,0} dot(%copy.2097, %all-gather.415), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.2098 = bf16[2,8192,14336]{2,1,0} copy(%dot.514)
  %multiply.6391 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6390, %copy.2098)
  %get-tuple-element.1150 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.27), index=12
  %convert.2897 = bf16[256,14336]{1,0} convert(%get-tuple-element.1150)
  %all-gather.416 = bf16[4096,14336]{1,0} all-gather(%convert.2897), channel_id=419, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.515 = bf16[2,8192,4096]{2,1,0} dot(%multiply.6391, %all-gather.416), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.1151 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.27), index=8
  %multiply.6392 = bf16[2,8192,14336]{2,1,0} multiply(%copy.2098, %get-tuple-element.1151)
  %multiply.6393 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6392, %divide.1015)
  %multiply.6394 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1148, %multiply.6392)
  %subtract.330 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.1015)
  %multiply.6395 = bf16[2,8192,14336]{2,1,0} multiply(%divide.1015, %subtract.330)
  %multiply.6397 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6394, %multiply.6395)
  %add.4551 = bf16[2,8192,14336]{2,1,0} add(%multiply.6393, %multiply.6397)
  %get-tuple-element.1152 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.27), index=11
  %convert.2898 = bf16[256,14336]{1,0} convert(%get-tuple-element.1152)
  %all-gather.417 = bf16[4096,14336]{1,0} all-gather(%convert.2898), channel_id=420, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.516 = bf16[2,8192,4096]{2,1,0} dot(%add.4551, %all-gather.417), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4552 = bf16[2,8192,4096]{2,1,0} add(%dot.515, %dot.516)
  %copy.2099 = bf16[2,8192,4096]{2,1,0} copy(%add.4552)
  %get-tuple-element.1153 = f32[4096]{0} get-tuple-element(%opt-barrier.27), index=14
  %convert.2899 = bf16[4096]{0} convert(%get-tuple-element.1153)
  %broadcast.13208 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2899), dimensions={2}
  %multiply.6398 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2099, %broadcast.13208)
  %convert.2900 = f32[2,8192,4096]{2,1,0} convert(%multiply.6398)
  %get-tuple-element.1154 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.27), index=20
  %copy.2100 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1154)
  %get-tuple-element.1155 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.27), index=6
  %copy.2101 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1155)
  %add.4553 = bf16[2,8192,4096]{2,1,0} add(%copy.2100, %copy.2101)
  %convert.2902 = f32[2,8192,4096]{2,1,0} convert(%add.4553)
  %multiply.6399 = f32[2,8192,4096]{2,1,0} multiply(%convert.2902, %convert.2902)
  %reduce.484 = f32[2,8192]{1,0} reduce(%multiply.6399, %constant.5451), dimensions={2}, to_apply=%region_525.23820
  %multiply.6400 = f32[2,8192]{1,0} multiply(%reduce.484, %broadcast.7109)
  %add.4554 = f32[2,8192]{1,0} add(%multiply.6400, %broadcast.7110)
  %reshape.11805 = f32[2,8192,1]{2,1,0} reshape(%add.4554)
  %rsqrt.183 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11805)
  %reshape.11806 = f32[2,8192]{1,0} reshape(%rsqrt.183)
  %broadcast.13211 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11806), dimensions={0,1}
  %multiply.6401 = f32[2,8192,4096]{2,1,0} multiply(%convert.2900, %broadcast.13211)
  %multiply.6402 = f32[2,8192,4096]{2,1,0} multiply(%convert.2902, %convert.2900)
  %reduce.485 = f32[2,8192]{1,0} reduce(%multiply.6402, %constant.5451), dimensions={2}, to_apply=%region_528.23891
  %reshape.11807 = f32[2,8192,1]{2,1,0} reshape(%reduce.485)
  %divide.1016 = f32[2,8192,1]{2,1,0} divide(%rsqrt.183, %reshape.11805)
  %multiply.6403 = f32[2,8192,1]{2,1,0} multiply(%divide.1016, %broadcast.10161)
  %multiply.6404 = f32[2,8192,1]{2,1,0} multiply(%reshape.11807, %multiply.6403)
  %multiply.6406 = f32[2,8192,1]{2,1,0} multiply(%multiply.6404, %broadcast.10163)
  %reshape.11808 = f32[2,8192]{1,0} reshape(%multiply.6406)
  %broadcast.13213 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11808), dimensions={0,1}
  %multiply.6407 = f32[2,8192,4096]{2,1,0} multiply(%convert.2902, %broadcast.13213)
  %add.4555 = f32[2,8192,4096]{2,1,0} add(%multiply.6401, %multiply.6407)
  %convert.2903 = bf16[2,8192,4096]{2,1,0} convert(%add.4555)
  %add.4556 = bf16[2,8192,4096]{2,1,0} add(%copy.2096, %convert.2903)
  %get-tuple-element.1156 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.27), index=0
  %convert.2904 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.1156)
  %get-tuple-element.1157 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.27), index=22
  %convert.2905 = f32[2,8192]{1,0} convert(%get-tuple-element.1157)
  %broadcast.13214 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2905), dimensions={0,1}
  %divide.1018 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.13214, %broadcast.7129)
  %cosine.119 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.1018)
  %reshape.11810 = f32[2,8192,128]{2,1,0} reshape(%cosine.119)
  %broadcast.13224 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11810), dimensions={0,1,3}
  %multiply.6419 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2904, %broadcast.13224)
  %slice.747 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1156), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.748 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1156), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.236 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.747, %slice.748), dimensions={3}
  %slice.749 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1156), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.750 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1156), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.237 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.749, %slice.750), dimensions={3}
  %select.2958 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.236, %concatenate.237)
  %convert.2910 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2958)
  %sine.118 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.1018)
  %reshape.11819 = f32[2,8192,128]{2,1,0} reshape(%sine.118)
  %broadcast.13230 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11819), dimensions={0,1,3}
  %multiply.6424 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2910, %broadcast.13230)
  %get-tuple-element.1158 = s32[2]{0} get-tuple-element(%opt-barrier.27), index=9
  %broadcast.13231 = s32[64,2]{1,0} broadcast(%get-tuple-element.1158), dimensions={1}
  %reshape.11820 = s32[128]{0} reshape(%broadcast.13231)
  %convert.2912 = f32[128]{0} convert(%reshape.11820)
  %broadcast.13232 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2912), dimensions={3}
  %multiply.6425 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6424, %broadcast.13232)
  %add.4560 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.6419, %multiply.6425)
  %convert.2913 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4560)
  %copy.2102 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2913)
  %get-tuple-element.1159 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.27), index=1
  %convert.2914 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.1159)
  %broadcast.13242 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11810), dimensions={0,1,3}
  %multiply.6438 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2914, %broadcast.13242)
  %slice.751 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1159), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.752 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1159), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.238 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.751, %slice.752), dimensions={3}
  %slice.753 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1159), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.754 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1159), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.239 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.753, %slice.754), dimensions={3}
  %select.2962 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.238, %concatenate.239)
  %convert.2919 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2962)
  %broadcast.13248 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11819), dimensions={0,1,3}
  %multiply.6443 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2919, %broadcast.13248)
  %get-tuple-element.1160 = s32[2]{0} get-tuple-element(%opt-barrier.27), index=10
  %broadcast.13249 = s32[64,2]{1,0} broadcast(%get-tuple-element.1160), dimensions={1}
  %reshape.11829 = s32[128]{0} reshape(%broadcast.13249)
  %convert.2920 = f32[128]{0} convert(%reshape.11829)
  %broadcast.13250 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2920), dimensions={3}
  %multiply.6444 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6443, %broadcast.13250)
  %add.4565 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.6438, %multiply.6444)
  %convert.2921 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4565)
  %copy.2103 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2921)
  %get-tuple-element.1161 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.27), index=2
  %copy.2104 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1161)
  %get-tuple-element.1162 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.27), index=3
  %get-tuple-element.1163 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.27), index=4
  %get-tuple-element.1164 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.27), index=5
  %copy.2105 = bf16[2,8192,4096]{2,1,0} copy(%add.4556)
  %get-tuple-element.1165 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.27), index=17
  %convert.2922 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.1165)
  %all-gather.418 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2922), channel_id=421, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.517 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.2105, %all-gather.418), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2106 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.517)
  %get-tuple-element.1166 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.27), index=21
  %broadcast.13251 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1166), dimensions={0,1}
  %broadcast.13252 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1166), dimensions={0,2}
  %compare.4619 = pred[2,8192,8192]{2,1,0} compare(%broadcast.13251, %broadcast.13252), direction=EQ
  %and.981 = pred[2,8192,8192]{2,1,0} and(%compare.4619, %broadcast.7176)
  %select.2963 = f32[2,8192,8192]{2,1,0} select(%and.981, %broadcast.7177, %broadcast.7179)
  %compare.4621 = pred[2,8192,8192]{2,1,0} compare(%select.2963, %broadcast.7177), direction=NE
  %not.123 = pred[2,8192,8192]{2,1,0} not(%compare.4621)
  %convert.2923 = s32[2,8192,8192]{2,1,0} convert(%not.123)
  %reduce.486 = s32[2,8192]{1,0} reduce(%convert.2923, %constant.5439), dimensions={1}, to_apply=%region_522.23795
  %reshape.11830 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.486)
  %slice.755 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11830), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11832 = s32[2,1]{1,0} reshape(%slice.755)
  %reshape.11841 = s32[2]{0} reshape(%reshape.11832)
  %compare.4634 = pred[2]{0} compare(%reshape.11841, %broadcast.7184), direction=LT
  %reduce-window.356 = s32[2]{0} reduce-window(%reshape.11841, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.27
  %select.2973 = s32[2]{0} select(%compare.4634, %broadcast.7199, %reduce-window.356)
  %scatter.594 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2973), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.27
  %reduce.487 = s32[2,8192]{1,0} reduce(%convert.2923, %constant.5439), dimensions={2}, to_apply=%region_523.23803
  %reshape.11833 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.487)
  %reduce.488 = s32[2,1]{1,0} reduce(%reshape.11833, %constant.5570), dimensions={3,2}, to_apply=%region_524.23808
  %reshape.11851 = s32[2]{0} reshape(%reduce.488)
  %compare.4647 = pred[2]{0} compare(%reshape.11851, %broadcast.7184), direction=LT
  %reduce-window.359 = s32[2]{0} reduce-window(%reshape.11851, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.27.clone
  %select.2983 = s32[2]{0} select(%compare.4647, %broadcast.7199, %reduce-window.359)
  %scatter.599 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.2983), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.27
  %custom-call.57 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.2102, %copy.2103, %copy.2104, %constant.5555, %get-tuple-element.1162, /*index=5*/%get-tuple-element.1163, %get-tuple-element.1164, %copy.2106, %scatter.594, %scatter.599, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1173 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.57), index=2
  %copy.2107 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1173)
  %get-tuple-element.1174 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.27), index=19
  %convert.2928 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1174)
  %all-gather.419 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2928), channel_id=422, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.518 = bf16[2,8192,4096]{2,1,0} dot(%copy.2107, %all-gather.419), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1175 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.57), index=1
  %copy.2108 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1175)
  %convert.2929 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.2108)
  %multiply.6446 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2929, %broadcast.13242)
  %convert.2930 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6446)
  %multiply.6447 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2929, %broadcast.13250)
  %multiply.6448 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6447, %broadcast.13248)
  %convert.2931 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6448)
  %select.2984 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2931, %broadcast.10254)
  %slice.756 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2984), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.216 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.756, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4578 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2930, %pad.216)
  %slice.757 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2984), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.217 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.757, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4579 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4578, %pad.217)
  %select.2985 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2931, %broadcast.10254)
  %slice.758 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.2985), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.218 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.758, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4580 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4579, %pad.218)
  %slice.759 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.2985), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.219 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.759, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4581 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4580, %pad.219)
  %get-tuple-element.1176 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.27), index=16
  %convert.2932 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1176)
  %all-gather.420 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2932), channel_id=423, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.519 = bf16[2,8192,4096]{2,1,0} dot(%add.4581, %all-gather.420), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4582 = bf16[2,8192,4096]{2,1,0} add(%dot.518, %dot.519)
  %copy.2109 = bf16[2,8192,4096]{2,1,0} copy(%add.4582)
  %get-tuple-element.1177 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.57), index=0
  %copy.2110 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1177)
  %convert.2933 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.2110)
  %multiply.6457 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2933, %broadcast.13224)
  %convert.2934 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6457)
  %multiply.6458 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2933, %broadcast.13232)
  %multiply.6459 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6458, %broadcast.13230)
  %convert.2935 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6459)
  %select.2986 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2935, %broadcast.10265)
  %slice.760 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2986), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.220 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.760, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4583 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2934, %pad.220)
  %slice.761 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2986), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.221 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.761, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4584 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4583, %pad.221)
  %select.2987 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2935, %broadcast.10265)
  %slice.762 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.2987), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.222 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.762, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4585 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4584, %pad.222)
  %slice.763 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.2987), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.223 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.763, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4586 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4585, %pad.223)
  %get-tuple-element.1178 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.27), index=18
  %convert.2936 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.1178)
  %all-gather.421 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2936), channel_id=424, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.520 = bf16[2,8192,4096]{2,1,0} dot(%add.4586, %all-gather.421), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2111 = bf16[2,8192,4096]{2,1,0} copy(%dot.520)
  %add.4587 = bf16[2,8192,4096]{2,1,0} add(%copy.2109, %copy.2111)
  %copy.2112 = bf16[2,8192,4096]{2,1,0} copy(%add.4587)
  %get-tuple-element.1179 = f32[4096]{0} get-tuple-element(%opt-barrier.27), index=15
  %convert.2937 = bf16[4096]{0} convert(%get-tuple-element.1179)
  %broadcast.13306 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2937), dimensions={2}
  %multiply.6469 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2112, %broadcast.13306)
  %convert.2938 = f32[2,8192,4096]{2,1,0} convert(%multiply.6469)
  %convert.2939 = f32[2,8192,4096]{2,1,0} convert(%copy.2100)
  %multiply.6470 = f32[2,8192,4096]{2,1,0} multiply(%convert.2939, %convert.2939)
  %reduce.489 = f32[2,8192]{1,0} reduce(%multiply.6470, %constant.5451), dimensions={2}, to_apply=%region_521.23586
  %multiply.6471 = f32[2,8192]{1,0} multiply(%reduce.489, %broadcast.7109)
  %add.4588 = f32[2,8192]{1,0} add(%multiply.6471, %broadcast.7110)
  %reshape.11880 = f32[2,8192,1]{2,1,0} reshape(%add.4588)
  %rsqrt.184 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11880)
  %reshape.11881 = f32[2,8192]{1,0} reshape(%rsqrt.184)
  %broadcast.13309 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11881), dimensions={0,1}
  %multiply.6472 = f32[2,8192,4096]{2,1,0} multiply(%convert.2938, %broadcast.13309)
  %multiply.6473 = f32[2,8192,4096]{2,1,0} multiply(%convert.2939, %convert.2938)
  %reduce.490 = f32[2,8192]{1,0} reduce(%multiply.6473, %constant.5451), dimensions={2}, to_apply=%region_532.24025
  %reshape.11882 = f32[2,8192,1]{2,1,0} reshape(%reduce.490)
  %divide.1023 = f32[2,8192,1]{2,1,0} divide(%rsqrt.184, %reshape.11880)
  %multiply.6474 = f32[2,8192,1]{2,1,0} multiply(%divide.1023, %broadcast.10161)
  %multiply.6475 = f32[2,8192,1]{2,1,0} multiply(%reshape.11882, %multiply.6474)
  %multiply.6476 = f32[2,8192,1]{2,1,0} multiply(%multiply.6475, %broadcast.10163)
  %reshape.11883 = f32[2,8192]{1,0} reshape(%multiply.6476)
  %broadcast.13311 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11883), dimensions={0,1}
  %multiply.6477 = f32[2,8192,4096]{2,1,0} multiply(%convert.2939, %broadcast.13311)
  %add.4589 = f32[2,8192,4096]{2,1,0} add(%multiply.6472, %multiply.6477)
  %convert.2940 = bf16[2,8192,4096]{2,1,0} convert(%add.4589)
  %add.4590 = bf16[2,8192,4096]{2,1,0} add(%add.4556, %convert.2940)
  %copy.2113 = bf16[2,8192,4096]{2,1,0} copy(%add.4590)
  %tuple.149 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.21, %reduce-precision.22, %reduce-precision.23, %get-tuple-element.195, %get-tuple-element.196, /*index=5*/%reduce-precision.24, %reduce-precision.25, %reduce-precision.26, %reduce-precision.27, %constant.5507, /*index=10*/%constant.5507, %param.40, %param.41, %param.42, %param.39, /*index=15*/%param.34, %param.36, %param.38, %param.35, %param.37, /*index=20*/%copy.1229, %param.10, %param.7, %copy.2113)
  %opt-barrier.28 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.149)
  %get-tuple-element.1180 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.28), index=23
  %copy.2114 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1180)
  %get-tuple-element.1181 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.28), index=7
  %negate.947 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.1181)
  %exponential.187 = bf16[2,8192,14336]{2,1,0} exponential(%negate.947)
  %add.4591 = bf16[2,8192,14336]{2,1,0} add(%exponential.187, %broadcast.7215)
  %divide.1024 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4591)
  %multiply.6478 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1181, %divide.1024)
  %copy.2115 = bf16[2,8192,4096]{2,1,0} copy(%copy.2114)
  %get-tuple-element.1182 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.28), index=13
  %convert.2942 = bf16[14336,256]{1,0} convert(%get-tuple-element.1182)
  %all-gather.422 = bf16[14336,4096]{1,0} all-gather(%convert.2942), channel_id=425, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.521 = bf16[2,8192,14336]{2,1,0} dot(%copy.2115, %all-gather.422), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.2116 = bf16[2,8192,14336]{2,1,0} copy(%dot.521)
  %multiply.6479 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6478, %copy.2116)
  %get-tuple-element.1183 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.28), index=12
  %convert.2943 = bf16[256,14336]{1,0} convert(%get-tuple-element.1183)
  %all-gather.423 = bf16[4096,14336]{1,0} all-gather(%convert.2943), channel_id=426, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.522 = bf16[2,8192,4096]{2,1,0} dot(%multiply.6479, %all-gather.423), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.1184 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.28), index=8
  %multiply.6481 = bf16[2,8192,14336]{2,1,0} multiply(%copy.2116, %get-tuple-element.1184)
  %multiply.6483 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6481, %divide.1024)
  %multiply.6484 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1181, %multiply.6481)
  %subtract.335 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.1024)
  %multiply.6485 = bf16[2,8192,14336]{2,1,0} multiply(%divide.1024, %subtract.335)
  %multiply.6486 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6484, %multiply.6485)
  %add.4592 = bf16[2,8192,14336]{2,1,0} add(%multiply.6483, %multiply.6486)
  %get-tuple-element.1185 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.28), index=11
  %convert.2944 = bf16[256,14336]{1,0} convert(%get-tuple-element.1185)
  %all-gather.424 = bf16[4096,14336]{1,0} all-gather(%convert.2944), channel_id=427, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.523 = bf16[2,8192,4096]{2,1,0} dot(%add.4592, %all-gather.424), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4593 = bf16[2,8192,4096]{2,1,0} add(%dot.522, %dot.523)
  %copy.2117 = bf16[2,8192,4096]{2,1,0} copy(%add.4593)
  %get-tuple-element.1186 = f32[4096]{0} get-tuple-element(%opt-barrier.28), index=14
  %convert.2945 = bf16[4096]{0} convert(%get-tuple-element.1186)
  %broadcast.13313 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2945), dimensions={2}
  %multiply.6487 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2117, %broadcast.13313)
  %convert.2947 = f32[2,8192,4096]{2,1,0} convert(%multiply.6487)
  %get-tuple-element.1187 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.28), index=20
  %copy.2118 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1187)
  %get-tuple-element.1188 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.28), index=6
  %copy.2119 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1188)
  %add.4594 = bf16[2,8192,4096]{2,1,0} add(%copy.2118, %copy.2119)
  %convert.2948 = f32[2,8192,4096]{2,1,0} convert(%add.4594)
  %multiply.6488 = f32[2,8192,4096]{2,1,0} multiply(%convert.2948, %convert.2948)
  %reduce.491 = f32[2,8192]{1,0} reduce(%multiply.6488, %constant.5451), dimensions={2}, to_apply=%region_538.24312
  %multiply.6489 = f32[2,8192]{1,0} multiply(%reduce.491, %broadcast.7109)
  %add.4595 = f32[2,8192]{1,0} add(%multiply.6489, %broadcast.7110)
  %reshape.11884 = f32[2,8192,1]{2,1,0} reshape(%add.4595)
  %rsqrt.185 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11884)
  %reshape.11885 = f32[2,8192]{1,0} reshape(%rsqrt.185)
  %broadcast.13316 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11885), dimensions={0,1}
  %multiply.6490 = f32[2,8192,4096]{2,1,0} multiply(%convert.2947, %broadcast.13316)
  %multiply.6491 = f32[2,8192,4096]{2,1,0} multiply(%convert.2948, %convert.2947)
  %reduce.492 = f32[2,8192]{1,0} reduce(%multiply.6491, %constant.5451), dimensions={2}, to_apply=%region_541.24383
  %reshape.11886 = f32[2,8192,1]{2,1,0} reshape(%reduce.492)
  %divide.1025 = f32[2,8192,1]{2,1,0} divide(%rsqrt.185, %reshape.11884)
  %multiply.6492 = f32[2,8192,1]{2,1,0} multiply(%divide.1025, %broadcast.10161)
  %multiply.6493 = f32[2,8192,1]{2,1,0} multiply(%reshape.11886, %multiply.6492)
  %multiply.6494 = f32[2,8192,1]{2,1,0} multiply(%multiply.6493, %broadcast.10163)
  %reshape.11887 = f32[2,8192]{1,0} reshape(%multiply.6494)
  %broadcast.13318 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11887), dimensions={0,1}
  %multiply.6495 = f32[2,8192,4096]{2,1,0} multiply(%convert.2948, %broadcast.13318)
  %add.4596 = f32[2,8192,4096]{2,1,0} add(%multiply.6490, %multiply.6495)
  %convert.2949 = bf16[2,8192,4096]{2,1,0} convert(%add.4596)
  %add.4597 = bf16[2,8192,4096]{2,1,0} add(%copy.2114, %convert.2949)
  %get-tuple-element.1189 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.28), index=0
  %convert.2950 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.1189)
  %get-tuple-element.1190 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.28), index=22
  %convert.2952 = f32[2,8192]{1,0} convert(%get-tuple-element.1190)
  %broadcast.13319 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2952), dimensions={0,1}
  %divide.1027 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.13319, %broadcast.7129)
  %cosine.121 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.1027)
  %reshape.11891 = f32[2,8192,128]{2,1,0} reshape(%cosine.121)
  %broadcast.13332 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11891), dimensions={0,1,3}
  %multiply.6506 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2950, %broadcast.13332)
  %slice.764 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1189), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.765 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1189), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.240 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.764, %slice.765), dimensions={3}
  %slice.766 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1189), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.767 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1189), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.241 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.766, %slice.767), dimensions={3}
  %select.2991 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.240, %concatenate.241)
  %convert.2956 = f32[2,8192,32,128]{3,2,1,0} convert(%select.2991)
  %sine.120 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.1027)
  %reshape.11898 = f32[2,8192,128]{2,1,0} reshape(%sine.120)
  %broadcast.13342 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11898), dimensions={0,1,3}
  %multiply.6512 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2956, %broadcast.13342)
  %get-tuple-element.1191 = s32[2]{0} get-tuple-element(%opt-barrier.28), index=9
  %broadcast.13343 = s32[64,2]{1,0} broadcast(%get-tuple-element.1191), dimensions={1}
  %reshape.11899 = s32[128]{0} reshape(%broadcast.13343)
  %convert.2957 = f32[128]{0} convert(%reshape.11899)
  %broadcast.13345 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.2957), dimensions={3}
  %multiply.6513 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6512, %broadcast.13345)
  %add.4602 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.6506, %multiply.6513)
  %convert.2959 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4602)
  %copy.2120 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.2959)
  %get-tuple-element.1192 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.28), index=1
  %convert.2960 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.1192)
  %broadcast.13358 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11891), dimensions={0,1,3}
  %multiply.6526 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2960, %broadcast.13358)
  %slice.768 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1192), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.769 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1192), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.242 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.768, %slice.769), dimensions={3}
  %slice.770 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1192), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.771 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1192), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.243 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.770, %slice.771), dimensions={3}
  %select.2995 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.242, %concatenate.243)
  %convert.2965 = f32[2,8192,8,128]{3,2,1,0} convert(%select.2995)
  %broadcast.13364 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11898), dimensions={0,1,3}
  %multiply.6531 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2965, %broadcast.13364)
  %get-tuple-element.1193 = s32[2]{0} get-tuple-element(%opt-barrier.28), index=10
  %broadcast.13366 = s32[64,2]{1,0} broadcast(%get-tuple-element.1193), dimensions={1}
  %reshape.11908 = s32[128]{0} reshape(%broadcast.13366)
  %convert.2966 = f32[128]{0} convert(%reshape.11908)
  %broadcast.13368 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.2966), dimensions={3}
  %multiply.6532 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6531, %broadcast.13368)
  %add.4606 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.6526, %multiply.6532)
  %convert.2967 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4606)
  %copy.2121 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.2967)
  %get-tuple-element.1194 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.28), index=2
  %copy.2122 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1194)
  %get-tuple-element.1195 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.28), index=3
  %get-tuple-element.1196 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.28), index=4
  %get-tuple-element.1197 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.28), index=5
  %copy.2123 = bf16[2,8192,4096]{2,1,0} copy(%add.4597)
  %get-tuple-element.1198 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.28), index=17
  %convert.2968 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.1198)
  %all-gather.425 = bf16[32,128,4096]{2,1,0} all-gather(%convert.2968), channel_id=428, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.524 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.2123, %all-gather.425), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2124 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.524)
  %get-tuple-element.1199 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.28), index=21
  %broadcast.13369 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1199), dimensions={0,1}
  %broadcast.13370 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1199), dimensions={0,2}
  %compare.4669 = pred[2,8192,8192]{2,1,0} compare(%broadcast.13369, %broadcast.13370), direction=EQ
  %and.990 = pred[2,8192,8192]{2,1,0} and(%compare.4669, %broadcast.7176)
  %select.2996 = f32[2,8192,8192]{2,1,0} select(%and.990, %broadcast.7177, %broadcast.7179)
  %compare.4671 = pred[2,8192,8192]{2,1,0} compare(%select.2996, %broadcast.7177), direction=NE
  %not.124 = pred[2,8192,8192]{2,1,0} not(%compare.4671)
  %convert.2969 = s32[2,8192,8192]{2,1,0} convert(%not.124)
  %reduce.493 = s32[2,8192]{1,0} reduce(%convert.2969, %constant.5439), dimensions={1}, to_apply=%region_535.24287
  %reshape.11909 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.493)
  %slice.772 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11909), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11911 = s32[2,1]{1,0} reshape(%slice.772)
  %reshape.11920 = s32[2]{0} reshape(%reshape.11911)
  %compare.4684 = pred[2]{0} compare(%reshape.11920, %broadcast.7184), direction=LT
  %reduce-window.362 = s32[2]{0} reduce-window(%reshape.11920, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.28
  %select.3006 = s32[2]{0} select(%compare.4684, %broadcast.7199, %reduce-window.362)
  %scatter.604 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.3006), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.28
  %reduce.494 = s32[2,8192]{1,0} reduce(%convert.2969, %constant.5439), dimensions={2}, to_apply=%region_536.24295
  %reshape.11912 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.494)
  %reduce.495 = s32[2,1]{1,0} reduce(%reshape.11912, %constant.5570), dimensions={3,2}, to_apply=%region_537.24300
  %reshape.11931 = s32[2]{0} reshape(%reduce.495)
  %compare.4697 = pred[2]{0} compare(%reshape.11931, %broadcast.7184), direction=LT
  %reduce-window.365 = s32[2]{0} reduce-window(%reshape.11931, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.28.clone
  %select.3016 = s32[2]{0} select(%compare.4697, %broadcast.7199, %reduce-window.365)
  %scatter.609 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.3016), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.28
  %custom-call.58 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.2120, %copy.2121, %copy.2122, %constant.5555, %get-tuple-element.1195, /*index=5*/%get-tuple-element.1196, %get-tuple-element.1197, %copy.2124, %scatter.604, %scatter.609, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1206 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.58), index=2
  %copy.2125 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1206)
  %get-tuple-element.1207 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.28), index=19
  %convert.2973 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1207)
  %all-gather.426 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2973), channel_id=429, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.525 = bf16[2,8192,4096]{2,1,0} dot(%copy.2125, %all-gather.426), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1208 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.58), index=1
  %copy.2126 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1208)
  %convert.2974 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.2126)
  %multiply.6534 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2974, %broadcast.13358)
  %convert.2975 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6534)
  %multiply.6535 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.2974, %broadcast.13368)
  %multiply.6536 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6535, %broadcast.13364)
  %convert.2976 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6536)
  %select.3017 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.2976, %broadcast.10254)
  %slice.773 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.3017), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.224 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.773, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4619 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.2975, %pad.224)
  %slice.774 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.3017), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.225 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.774, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4620 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4619, %pad.225)
  %select.3018 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.2976, %broadcast.10254)
  %slice.775 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.3018), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.226 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.775, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4621 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4620, %pad.226)
  %slice.776 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.3018), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.227 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.776, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4622 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4621, %pad.227)
  %get-tuple-element.1209 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.28), index=16
  %convert.2977 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1209)
  %all-gather.427 = bf16[4096,8,128]{2,1,0} all-gather(%convert.2977), channel_id=430, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.526 = bf16[2,8192,4096]{2,1,0} dot(%add.4622, %all-gather.427), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4623 = bf16[2,8192,4096]{2,1,0} add(%dot.525, %dot.526)
  %copy.2127 = bf16[2,8192,4096]{2,1,0} copy(%add.4623)
  %get-tuple-element.1210 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.58), index=0
  %copy.2128 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1210)
  %convert.2978 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.2128)
  %multiply.6546 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2978, %broadcast.13332)
  %convert.2979 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6546)
  %multiply.6547 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2978, %broadcast.13345)
  %multiply.6548 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6547, %broadcast.13342)
  %convert.2980 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6548)
  %select.3019 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.2980, %broadcast.10265)
  %slice.777 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.3019), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.228 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.777, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4624 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.2979, %pad.228)
  %slice.778 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.3019), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.229 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.778, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4625 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4624, %pad.229)
  %select.3020 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.2980, %broadcast.10265)
  %slice.779 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.3020), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.230 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.779, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4626 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4625, %pad.230)
  %slice.780 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.3020), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.231 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.780, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4627 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4626, %pad.231)
  %get-tuple-element.1211 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.28), index=18
  %convert.2981 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.1211)
  %all-gather.428 = bf16[4096,32,128]{2,1,0} all-gather(%convert.2981), channel_id=431, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.527 = bf16[2,8192,4096]{2,1,0} dot(%add.4627, %all-gather.428), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2129 = bf16[2,8192,4096]{2,1,0} copy(%dot.527)
  %add.4628 = bf16[2,8192,4096]{2,1,0} add(%copy.2127, %copy.2129)
  %copy.2130 = bf16[2,8192,4096]{2,1,0} copy(%add.4628)
  %get-tuple-element.1212 = f32[4096]{0} get-tuple-element(%opt-barrier.28), index=15
  %convert.2982 = bf16[4096]{0} convert(%get-tuple-element.1212)
  %broadcast.13430 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2982), dimensions={2}
  %multiply.6559 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2130, %broadcast.13430)
  %convert.2983 = f32[2,8192,4096]{2,1,0} convert(%multiply.6559)
  %convert.2984 = f32[2,8192,4096]{2,1,0} convert(%copy.2118)
  %multiply.6560 = f32[2,8192,4096]{2,1,0} multiply(%convert.2984, %convert.2984)
  %reduce.496 = f32[2,8192]{1,0} reduce(%multiply.6560, %constant.5451), dimensions={2}, to_apply=%region_534.24078
  %multiply.6561 = f32[2,8192]{1,0} multiply(%reduce.496, %broadcast.7109)
  %add.4629 = f32[2,8192]{1,0} add(%multiply.6561, %broadcast.7110)
  %reshape.11959 = f32[2,8192,1]{2,1,0} reshape(%add.4629)
  %rsqrt.186 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11959)
  %reshape.11962 = f32[2,8192]{1,0} reshape(%rsqrt.186)
  %broadcast.13433 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11962), dimensions={0,1}
  %multiply.6562 = f32[2,8192,4096]{2,1,0} multiply(%convert.2983, %broadcast.13433)
  %multiply.6563 = f32[2,8192,4096]{2,1,0} multiply(%convert.2984, %convert.2983)
  %reduce.497 = f32[2,8192]{1,0} reduce(%multiply.6563, %constant.5451), dimensions={2}, to_apply=%region_545.24517
  %reshape.11964 = f32[2,8192,1]{2,1,0} reshape(%reduce.497)
  %divide.1032 = f32[2,8192,1]{2,1,0} divide(%rsqrt.186, %reshape.11959)
  %multiply.6564 = f32[2,8192,1]{2,1,0} multiply(%divide.1032, %broadcast.10161)
  %multiply.6565 = f32[2,8192,1]{2,1,0} multiply(%reshape.11964, %multiply.6564)
  %multiply.6566 = f32[2,8192,1]{2,1,0} multiply(%multiply.6565, %broadcast.10163)
  %reshape.11965 = f32[2,8192]{1,0} reshape(%multiply.6566)
  %broadcast.13435 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11965), dimensions={0,1}
  %multiply.6567 = f32[2,8192,4096]{2,1,0} multiply(%convert.2984, %broadcast.13435)
  %add.4630 = f32[2,8192,4096]{2,1,0} add(%multiply.6562, %multiply.6567)
  %convert.2986 = bf16[2,8192,4096]{2,1,0} convert(%add.4630)
  %add.4631 = bf16[2,8192,4096]{2,1,0} add(%add.4597, %convert.2986)
  %copy.2131 = bf16[2,8192,4096]{2,1,0} copy(%add.4631)
  %tuple.151 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.14, %reduce-precision.15, %reduce-precision.16, %get-tuple-element.193, %get-tuple-element.194, /*index=5*/%reduce-precision.17, %reduce-precision.18, %reduce-precision.19, %reduce-precision.20, %constant.5507, /*index=10*/%constant.5507, %param.31, %param.32, %param.33, %param.30, /*index=15*/%param.25, %param.27, %param.29, %param.26, %param.28, /*index=20*/%copy.1216, %param.10, %param.7, %copy.2131)
  %opt-barrier.29 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.151)
  %get-tuple-element.1213 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.29), index=23
  %copy.2132 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1213)
  %get-tuple-element.1214 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.29), index=7
  %negate.950 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.1214)
  %exponential.188 = bf16[2,8192,14336]{2,1,0} exponential(%negate.950)
  %add.4632 = bf16[2,8192,14336]{2,1,0} add(%exponential.188, %broadcast.7215)
  %divide.1033 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4632)
  %multiply.6568 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1214, %divide.1033)
  %copy.2133 = bf16[2,8192,4096]{2,1,0} copy(%copy.2132)
  %get-tuple-element.1215 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.29), index=13
  %convert.2987 = bf16[14336,256]{1,0} convert(%get-tuple-element.1215)
  %all-gather.429 = bf16[14336,4096]{1,0} all-gather(%convert.2987), channel_id=432, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.528 = bf16[2,8192,14336]{2,1,0} dot(%copy.2133, %all-gather.429), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.2134 = bf16[2,8192,14336]{2,1,0} copy(%dot.528)
  %multiply.6569 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6568, %copy.2134)
  %get-tuple-element.1216 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.29), index=12
  %convert.2988 = bf16[256,14336]{1,0} convert(%get-tuple-element.1216)
  %all-gather.430 = bf16[4096,14336]{1,0} all-gather(%convert.2988), channel_id=433, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.529 = bf16[2,8192,4096]{2,1,0} dot(%multiply.6569, %all-gather.430), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.1217 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.29), index=8
  %multiply.6570 = bf16[2,8192,14336]{2,1,0} multiply(%copy.2134, %get-tuple-element.1217)
  %multiply.6571 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6570, %divide.1033)
  %multiply.6572 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1214, %multiply.6570)
  %subtract.340 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.1033)
  %multiply.6573 = bf16[2,8192,14336]{2,1,0} multiply(%divide.1033, %subtract.340)
  %multiply.6574 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6572, %multiply.6573)
  %add.4633 = bf16[2,8192,14336]{2,1,0} add(%multiply.6571, %multiply.6574)
  %get-tuple-element.1218 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.29), index=11
  %convert.2989 = bf16[256,14336]{1,0} convert(%get-tuple-element.1218)
  %all-gather.431 = bf16[4096,14336]{1,0} all-gather(%convert.2989), channel_id=434, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.530 = bf16[2,8192,4096]{2,1,0} dot(%add.4633, %all-gather.431), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4634 = bf16[2,8192,4096]{2,1,0} add(%dot.529, %dot.530)
  %copy.2135 = bf16[2,8192,4096]{2,1,0} copy(%add.4634)
  %get-tuple-element.1219 = f32[4096]{0} get-tuple-element(%opt-barrier.29), index=14
  %convert.2990 = bf16[4096]{0} convert(%get-tuple-element.1219)
  %broadcast.13437 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.2990), dimensions={2}
  %multiply.6575 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2135, %broadcast.13437)
  %convert.2991 = f32[2,8192,4096]{2,1,0} convert(%multiply.6575)
  %get-tuple-element.1220 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.29), index=20
  %copy.2136 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1220)
  %get-tuple-element.1221 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.29), index=6
  %copy.2137 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1221)
  %add.4635 = bf16[2,8192,4096]{2,1,0} add(%copy.2136, %copy.2137)
  %convert.2992 = f32[2,8192,4096]{2,1,0} convert(%add.4635)
  %multiply.6576 = f32[2,8192,4096]{2,1,0} multiply(%convert.2992, %convert.2992)
  %reduce.498 = f32[2,8192]{1,0} reduce(%multiply.6576, %constant.5451), dimensions={2}, to_apply=%region_551.24804
  %multiply.6577 = f32[2,8192]{1,0} multiply(%reduce.498, %broadcast.7109)
  %add.4636 = f32[2,8192]{1,0} add(%multiply.6577, %broadcast.7110)
  %reshape.11967 = f32[2,8192,1]{2,1,0} reshape(%add.4636)
  %rsqrt.187 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.11967)
  %reshape.11968 = f32[2,8192]{1,0} reshape(%rsqrt.187)
  %broadcast.13444 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11968), dimensions={0,1}
  %multiply.6578 = f32[2,8192,4096]{2,1,0} multiply(%convert.2991, %broadcast.13444)
  %multiply.6579 = f32[2,8192,4096]{2,1,0} multiply(%convert.2992, %convert.2991)
  %reduce.499 = f32[2,8192]{1,0} reduce(%multiply.6579, %constant.5451), dimensions={2}, to_apply=%region_554.24875
  %reshape.11970 = f32[2,8192,1]{2,1,0} reshape(%reduce.499)
  %divide.1034 = f32[2,8192,1]{2,1,0} divide(%rsqrt.187, %reshape.11967)
  %multiply.6580 = f32[2,8192,1]{2,1,0} multiply(%divide.1034, %broadcast.10161)
  %multiply.6581 = f32[2,8192,1]{2,1,0} multiply(%reshape.11970, %multiply.6580)
  %multiply.6582 = f32[2,8192,1]{2,1,0} multiply(%multiply.6581, %broadcast.10163)
  %reshape.11971 = f32[2,8192]{1,0} reshape(%multiply.6582)
  %broadcast.13446 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.11971), dimensions={0,1}
  %multiply.6583 = f32[2,8192,4096]{2,1,0} multiply(%convert.2992, %broadcast.13446)
  %add.4638 = f32[2,8192,4096]{2,1,0} add(%multiply.6578, %multiply.6583)
  %convert.2994 = bf16[2,8192,4096]{2,1,0} convert(%add.4638)
  %add.4639 = bf16[2,8192,4096]{2,1,0} add(%copy.2132, %convert.2994)
  %get-tuple-element.1222 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.29), index=0
  %convert.2995 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.1222)
  %get-tuple-element.1223 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.29), index=22
  %convert.2996 = f32[2,8192]{1,0} convert(%get-tuple-element.1223)
  %broadcast.13448 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.2996), dimensions={0,1}
  %divide.1036 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.13448, %broadcast.7129)
  %cosine.123 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.1036)
  %reshape.11973 = f32[2,8192,128]{2,1,0} reshape(%cosine.123)
  %broadcast.13460 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11973), dimensions={0,1,3}
  %multiply.6597 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.2995, %broadcast.13460)
  %slice.781 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1222), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.782 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1222), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.244 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.781, %slice.782), dimensions={3}
  %slice.783 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1222), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.784 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1222), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.245 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.783, %slice.784), dimensions={3}
  %select.3024 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.244, %concatenate.245)
  %convert.3000 = f32[2,8192,32,128]{3,2,1,0} convert(%select.3024)
  %sine.122 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.1036)
  %reshape.11980 = f32[2,8192,128]{2,1,0} reshape(%sine.122)
  %broadcast.13466 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.11980), dimensions={0,1,3}
  %multiply.6602 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.3000, %broadcast.13466)
  %get-tuple-element.1224 = s32[2]{0} get-tuple-element(%opt-barrier.29), index=9
  %broadcast.13467 = s32[64,2]{1,0} broadcast(%get-tuple-element.1224), dimensions={1}
  %reshape.11981 = s32[128]{0} reshape(%broadcast.13467)
  %convert.3001 = f32[128]{0} convert(%reshape.11981)
  %broadcast.13468 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.3001), dimensions={3}
  %multiply.6603 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6602, %broadcast.13468)
  %add.4643 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.6597, %multiply.6603)
  %convert.3002 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4643)
  %copy.2138 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.3002)
  %get-tuple-element.1225 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.29), index=1
  %convert.3003 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.1225)
  %broadcast.13478 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11973), dimensions={0,1,3}
  %multiply.6614 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3003, %broadcast.13478)
  %slice.785 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1225), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.786 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1225), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.246 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.785, %slice.786), dimensions={3}
  %slice.787 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1225), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.788 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1225), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.247 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.787, %slice.788), dimensions={3}
  %select.3028 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.246, %concatenate.247)
  %convert.3008 = f32[2,8192,8,128]{3,2,1,0} convert(%select.3028)
  %broadcast.13484 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.11980), dimensions={0,1,3}
  %multiply.6619 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3008, %broadcast.13484)
  %get-tuple-element.1226 = s32[2]{0} get-tuple-element(%opt-barrier.29), index=10
  %broadcast.13485 = s32[64,2]{1,0} broadcast(%get-tuple-element.1226), dimensions={1}
  %reshape.11989 = s32[128]{0} reshape(%broadcast.13485)
  %convert.3009 = f32[128]{0} convert(%reshape.11989)
  %broadcast.13486 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.3009), dimensions={3}
  %multiply.6620 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6619, %broadcast.13486)
  %add.4647 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.6614, %multiply.6620)
  %convert.3011 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4647)
  %copy.2139 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.3011)
  %get-tuple-element.1227 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.29), index=2
  %copy.2140 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1227)
  %get-tuple-element.1228 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.29), index=3
  %get-tuple-element.1229 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.29), index=4
  %get-tuple-element.1230 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.29), index=5
  %copy.2141 = bf16[2,8192,4096]{2,1,0} copy(%add.4639)
  %get-tuple-element.1231 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.29), index=17
  %convert.3012 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.1231)
  %all-gather.432 = bf16[32,128,4096]{2,1,0} all-gather(%convert.3012), channel_id=435, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.531 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.2141, %all-gather.432), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2142 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.531)
  %get-tuple-element.1232 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.29), index=21
  %broadcast.13487 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1232), dimensions={0,1}
  %broadcast.13488 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1232), dimensions={0,2}
  %compare.4716 = pred[2,8192,8192]{2,1,0} compare(%broadcast.13487, %broadcast.13488), direction=EQ
  %and.999 = pred[2,8192,8192]{2,1,0} and(%compare.4716, %broadcast.7176)
  %select.3029 = f32[2,8192,8192]{2,1,0} select(%and.999, %broadcast.7177, %broadcast.7179)
  %compare.4718 = pred[2,8192,8192]{2,1,0} compare(%select.3029, %broadcast.7177), direction=NE
  %not.125 = pred[2,8192,8192]{2,1,0} not(%compare.4718)
  %convert.3013 = s32[2,8192,8192]{2,1,0} convert(%not.125)
  %reduce.500 = s32[2,8192]{1,0} reduce(%convert.3013, %constant.5439), dimensions={1}, to_apply=%region_548.24779
  %reshape.11991 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.500)
  %slice.789 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.11991), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.11993 = s32[2,1]{1,0} reshape(%slice.789)
  %reshape.12002 = s32[2]{0} reshape(%reshape.11993)
  %compare.4731 = pred[2]{0} compare(%reshape.12002, %broadcast.7184), direction=LT
  %reduce-window.368 = s32[2]{0} reduce-window(%reshape.12002, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.29
  %select.3039 = s32[2]{0} select(%compare.4731, %broadcast.7199, %reduce-window.368)
  %scatter.614 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.3039), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.29
  %reduce.501 = s32[2,8192]{1,0} reduce(%convert.3013, %constant.5439), dimensions={2}, to_apply=%region_549.24787
  %reshape.11994 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.501)
  %reduce.502 = s32[2,1]{1,0} reduce(%reshape.11994, %constant.5570), dimensions={3,2}, to_apply=%region_550.24792
  %reshape.12010 = s32[2]{0} reshape(%reduce.502)
  %compare.4744 = pred[2]{0} compare(%reshape.12010, %broadcast.7184), direction=LT
  %reduce-window.371 = s32[2]{0} reduce-window(%reshape.12010, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.29.clone
  %select.3049 = s32[2]{0} select(%compare.4744, %broadcast.7199, %reduce-window.371)
  %scatter.619 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.3049), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.29
  %custom-call.59 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.2138, %copy.2139, %copy.2140, %constant.5555, %get-tuple-element.1228, /*index=5*/%get-tuple-element.1229, %get-tuple-element.1230, %copy.2142, %scatter.614, %scatter.619, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1239 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.59), index=2
  %copy.2143 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1239)
  %get-tuple-element.1240 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.29), index=19
  %convert.3018 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1240)
  %all-gather.433 = bf16[4096,8,128]{2,1,0} all-gather(%convert.3018), channel_id=436, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.532 = bf16[2,8192,4096]{2,1,0} dot(%copy.2143, %all-gather.433), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1241 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.59), index=1
  %copy.2144 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1241)
  %convert.3019 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.2144)
  %multiply.6622 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3019, %broadcast.13478)
  %convert.3020 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6622)
  %multiply.6623 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3019, %broadcast.13486)
  %multiply.6624 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6623, %broadcast.13484)
  %convert.3021 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6624)
  %select.3050 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.3021, %broadcast.10254)
  %slice.790 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.3050), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.232 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.790, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4660 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.3020, %pad.232)
  %slice.791 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.3050), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.233 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.791, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4661 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4660, %pad.233)
  %select.3051 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.3021, %broadcast.10254)
  %slice.792 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.3051), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.234 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.792, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4662 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4661, %pad.234)
  %slice.793 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.3051), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.235 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.793, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4663 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4662, %pad.235)
  %get-tuple-element.1242 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.29), index=16
  %convert.3022 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1242)
  %all-gather.434 = bf16[4096,8,128]{2,1,0} all-gather(%convert.3022), channel_id=437, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.533 = bf16[2,8192,4096]{2,1,0} dot(%add.4663, %all-gather.434), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4664 = bf16[2,8192,4096]{2,1,0} add(%dot.532, %dot.533)
  %copy.2145 = bf16[2,8192,4096]{2,1,0} copy(%add.4664)
  %get-tuple-element.1243 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.59), index=0
  %copy.2146 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1243)
  %convert.3023 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.2146)
  %multiply.6633 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.3023, %broadcast.13460)
  %convert.3024 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6633)
  %multiply.6634 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.3023, %broadcast.13468)
  %multiply.6635 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6634, %broadcast.13466)
  %convert.3025 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6635)
  %select.3052 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.3025, %broadcast.10265)
  %slice.794 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.3052), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.236 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.794, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4665 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.3024, %pad.236)
  %slice.795 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.3052), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.237 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.795, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4666 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4665, %pad.237)
  %select.3053 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.3025, %broadcast.10265)
  %slice.796 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.3053), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.238 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.796, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4667 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4666, %pad.238)
  %slice.797 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.3053), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.239 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.797, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4669 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4667, %pad.239)
  %get-tuple-element.1244 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.29), index=18
  %convert.3026 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.1244)
  %all-gather.435 = bf16[4096,32,128]{2,1,0} all-gather(%convert.3026), channel_id=438, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.534 = bf16[2,8192,4096]{2,1,0} dot(%add.4669, %all-gather.435), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2147 = bf16[2,8192,4096]{2,1,0} copy(%dot.534)
  %add.4670 = bf16[2,8192,4096]{2,1,0} add(%copy.2145, %copy.2147)
  %copy.2148 = bf16[2,8192,4096]{2,1,0} copy(%add.4670)
  %get-tuple-element.1245 = f32[4096]{0} get-tuple-element(%opt-barrier.29), index=15
  %convert.3027 = bf16[4096]{0} convert(%get-tuple-element.1245)
  %broadcast.13539 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.3027), dimensions={2}
  %multiply.6644 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2148, %broadcast.13539)
  %convert.3028 = f32[2,8192,4096]{2,1,0} convert(%multiply.6644)
  %convert.3029 = f32[2,8192,4096]{2,1,0} convert(%copy.2136)
  %multiply.6645 = f32[2,8192,4096]{2,1,0} multiply(%convert.3029, %convert.3029)
  %reduce.503 = f32[2,8192]{1,0} reduce(%multiply.6645, %constant.5451), dimensions={2}, to_apply=%region_547.24570
  %multiply.6646 = f32[2,8192]{1,0} multiply(%reduce.503, %broadcast.7109)
  %add.4671 = f32[2,8192]{1,0} add(%multiply.6646, %broadcast.7110)
  %reshape.12035 = f32[2,8192,1]{2,1,0} reshape(%add.4671)
  %rsqrt.188 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.12035)
  %reshape.12036 = f32[2,8192]{1,0} reshape(%rsqrt.188)
  %broadcast.13542 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.12036), dimensions={0,1}
  %multiply.6647 = f32[2,8192,4096]{2,1,0} multiply(%convert.3028, %broadcast.13542)
  %multiply.6648 = f32[2,8192,4096]{2,1,0} multiply(%convert.3029, %convert.3028)
  %reduce.504 = f32[2,8192]{1,0} reduce(%multiply.6648, %constant.5451), dimensions={2}, to_apply=%region_558.25009
  %reshape.12037 = f32[2,8192,1]{2,1,0} reshape(%reduce.504)
  %divide.1041 = f32[2,8192,1]{2,1,0} divide(%rsqrt.188, %reshape.12035)
  %multiply.6649 = f32[2,8192,1]{2,1,0} multiply(%divide.1041, %broadcast.10161)
  %multiply.6650 = f32[2,8192,1]{2,1,0} multiply(%reshape.12037, %multiply.6649)
  %multiply.6651 = f32[2,8192,1]{2,1,0} multiply(%multiply.6650, %broadcast.10163)
  %reshape.12038 = f32[2,8192]{1,0} reshape(%multiply.6651)
  %broadcast.13545 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.12038), dimensions={0,1}
  %multiply.6652 = f32[2,8192,4096]{2,1,0} multiply(%convert.3029, %broadcast.13545)
  %add.4672 = f32[2,8192,4096]{2,1,0} add(%multiply.6647, %multiply.6652)
  %convert.3032 = bf16[2,8192,4096]{2,1,0} convert(%add.4672)
  %add.4673 = bf16[2,8192,4096]{2,1,0} add(%add.4639, %convert.3032)
  %copy.2149 = bf16[2,8192,4096]{2,1,0} copy(%add.4673)
  %tuple.153 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.7, %reduce-precision.8, %reduce-precision.9, %get-tuple-element.191, %get-tuple-element.192, /*index=5*/%reduce-precision.10, %reduce-precision.11, %reduce-precision.12, %reduce-precision.13, %constant.5507, /*index=10*/%constant.5507, %param.22, %param.23, %param.24, %param.21, /*index=15*/%param.16, %param.18, %param.20, %param.17, %param.19, /*index=20*/%copy.1203, %param.10, %param.7, %copy.2149)
  %opt-barrier.30 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.153)
  %get-tuple-element.1246 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.30), index=23
  %copy.2150 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1246)
  %get-tuple-element.1247 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.30), index=7
  %negate.953 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.1247)
  %exponential.189 = bf16[2,8192,14336]{2,1,0} exponential(%negate.953)
  %add.4674 = bf16[2,8192,14336]{2,1,0} add(%exponential.189, %broadcast.7215)
  %divide.1042 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4674)
  %multiply.6653 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1247, %divide.1042)
  %copy.2151 = bf16[2,8192,4096]{2,1,0} copy(%copy.2150)
  %get-tuple-element.1248 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.30), index=13
  %convert.3033 = bf16[14336,256]{1,0} convert(%get-tuple-element.1248)
  %all-gather.436 = bf16[14336,4096]{1,0} all-gather(%convert.3033), channel_id=439, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.535 = bf16[2,8192,14336]{2,1,0} dot(%copy.2151, %all-gather.436), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.2152 = bf16[2,8192,14336]{2,1,0} copy(%dot.535)
  %multiply.6654 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6653, %copy.2152)
  %get-tuple-element.1249 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.30), index=12
  %convert.3034 = bf16[256,14336]{1,0} convert(%get-tuple-element.1249)
  %all-gather.437 = bf16[4096,14336]{1,0} all-gather(%convert.3034), channel_id=440, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.536 = bf16[2,8192,4096]{2,1,0} dot(%multiply.6654, %all-gather.437), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.1250 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.30), index=8
  %multiply.6655 = bf16[2,8192,14336]{2,1,0} multiply(%copy.2152, %get-tuple-element.1250)
  %multiply.6657 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6655, %divide.1042)
  %multiply.6658 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1247, %multiply.6655)
  %subtract.345 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.1042)
  %multiply.6659 = bf16[2,8192,14336]{2,1,0} multiply(%divide.1042, %subtract.345)
  %multiply.6660 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6658, %multiply.6659)
  %add.4675 = bf16[2,8192,14336]{2,1,0} add(%multiply.6657, %multiply.6660)
  %get-tuple-element.1251 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.30), index=11
  %convert.3035 = bf16[256,14336]{1,0} convert(%get-tuple-element.1251)
  %all-gather.438 = bf16[4096,14336]{1,0} all-gather(%convert.3035), channel_id=441, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.537 = bf16[2,8192,4096]{2,1,0} dot(%add.4675, %all-gather.438), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4677 = bf16[2,8192,4096]{2,1,0} add(%dot.536, %dot.537)
  %copy.2153 = bf16[2,8192,4096]{2,1,0} copy(%add.4677)
  %get-tuple-element.1252 = f32[4096]{0} get-tuple-element(%opt-barrier.30), index=14
  %convert.3036 = bf16[4096]{0} convert(%get-tuple-element.1252)
  %broadcast.13548 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.3036), dimensions={2}
  %multiply.6661 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2153, %broadcast.13548)
  %convert.3037 = f32[2,8192,4096]{2,1,0} convert(%multiply.6661)
  %get-tuple-element.1253 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.30), index=20
  %copy.2154 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1253)
  %get-tuple-element.1254 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.30), index=6
  %copy.2155 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1254)
  %add.4678 = bf16[2,8192,4096]{2,1,0} add(%copy.2154, %copy.2155)
  %convert.3039 = f32[2,8192,4096]{2,1,0} convert(%add.4678)
  %multiply.6662 = f32[2,8192,4096]{2,1,0} multiply(%convert.3039, %convert.3039)
  %reduce.505 = f32[2,8192]{1,0} reduce(%multiply.6662, %constant.5451), dimensions={2}, to_apply=%region_564.25296
  %multiply.6663 = f32[2,8192]{1,0} multiply(%reduce.505, %broadcast.7109)
  %add.4679 = f32[2,8192]{1,0} add(%multiply.6663, %broadcast.7110)
  %reshape.12039 = f32[2,8192,1]{2,1,0} reshape(%add.4679)
  %rsqrt.189 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.12039)
  %reshape.12040 = f32[2,8192]{1,0} reshape(%rsqrt.189)
  %broadcast.13551 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.12040), dimensions={0,1}
  %multiply.6664 = f32[2,8192,4096]{2,1,0} multiply(%convert.3037, %broadcast.13551)
  %multiply.6665 = f32[2,8192,4096]{2,1,0} multiply(%convert.3039, %convert.3037)
  %reduce.506 = f32[2,8192]{1,0} reduce(%multiply.6665, %constant.5451), dimensions={2}, to_apply=%region_567.25367
  %reshape.12041 = f32[2,8192,1]{2,1,0} reshape(%reduce.506)
  %divide.1043 = f32[2,8192,1]{2,1,0} divide(%rsqrt.189, %reshape.12039)
  %multiply.6666 = f32[2,8192,1]{2,1,0} multiply(%divide.1043, %broadcast.10161)
  %multiply.6667 = f32[2,8192,1]{2,1,0} multiply(%reshape.12041, %multiply.6666)
  %multiply.6668 = f32[2,8192,1]{2,1,0} multiply(%multiply.6667, %broadcast.10163)
  %reshape.12042 = f32[2,8192]{1,0} reshape(%multiply.6668)
  %broadcast.13553 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.12042), dimensions={0,1}
  %multiply.6670 = f32[2,8192,4096]{2,1,0} multiply(%convert.3039, %broadcast.13553)
  %add.4680 = f32[2,8192,4096]{2,1,0} add(%multiply.6664, %multiply.6670)
  %convert.3040 = bf16[2,8192,4096]{2,1,0} convert(%add.4680)
  %add.4681 = bf16[2,8192,4096]{2,1,0} add(%copy.2150, %convert.3040)
  %get-tuple-element.1255 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.30), index=0
  %convert.3041 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.1255)
  %get-tuple-element.1256 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.30), index=22
  %convert.3043 = f32[2,8192]{1,0} convert(%get-tuple-element.1256)
  %broadcast.13554 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.3043), dimensions={0,1}
  %divide.1045 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.13554, %broadcast.7129)
  %cosine.125 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.1045)
  %reshape.12044 = f32[2,8192,128]{2,1,0} reshape(%cosine.125)
  %broadcast.13565 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.12044), dimensions={0,1,3}
  %multiply.6682 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.3041, %broadcast.13565)
  %slice.798 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1255), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.799 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1255), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.248 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.798, %slice.799), dimensions={3}
  %slice.800 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1255), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.801 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1255), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.249 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.800, %slice.801), dimensions={3}
  %select.3057 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.248, %concatenate.249)
  %convert.3048 = f32[2,8192,32,128]{3,2,1,0} convert(%select.3057)
  %sine.124 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.1045)
  %reshape.12049 = f32[2,8192,128]{2,1,0} reshape(%sine.124)
  %broadcast.13571 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.12049), dimensions={0,1,3}
  %multiply.6688 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.3048, %broadcast.13571)
  %get-tuple-element.1257 = s32[2]{0} get-tuple-element(%opt-barrier.30), index=9
  %broadcast.13572 = s32[64,2]{1,0} broadcast(%get-tuple-element.1257), dimensions={1}
  %reshape.12050 = s32[128]{0} reshape(%broadcast.13572)
  %convert.3049 = f32[128]{0} convert(%reshape.12050)
  %broadcast.13574 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.3049), dimensions={3}
  %multiply.6689 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6688, %broadcast.13574)
  %add.4685 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.6682, %multiply.6689)
  %convert.3050 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4685)
  %copy.2156 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.3050)
  %get-tuple-element.1258 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.30), index=1
  %convert.3051 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.1258)
  %broadcast.13584 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.12044), dimensions={0,1,3}
  %multiply.6701 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3051, %broadcast.13584)
  %slice.802 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1258), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.803 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1258), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.250 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.802, %slice.803), dimensions={3}
  %slice.804 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1258), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.805 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1258), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.251 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.804, %slice.805), dimensions={3}
  %select.3061 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.250, %concatenate.251)
  %convert.3057 = f32[2,8192,8,128]{3,2,1,0} convert(%select.3061)
  %broadcast.13590 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.12049), dimensions={0,1,3}
  %multiply.6706 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3057, %broadcast.13590)
  %get-tuple-element.1259 = s32[2]{0} get-tuple-element(%opt-barrier.30), index=10
  %broadcast.13591 = s32[64,2]{1,0} broadcast(%get-tuple-element.1259), dimensions={1}
  %reshape.12058 = s32[128]{0} reshape(%broadcast.13591)
  %convert.3058 = f32[128]{0} convert(%reshape.12058)
  %broadcast.13592 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.3058), dimensions={3}
  %multiply.6708 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6706, %broadcast.13592)
  %add.4689 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.6701, %multiply.6708)
  %convert.3059 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4689)
  %copy.2157 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.3059)
  %get-tuple-element.1260 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.30), index=2
  %copy.2158 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1260)
  %get-tuple-element.1261 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.30), index=3
  %get-tuple-element.1262 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.30), index=4
  %get-tuple-element.1263 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.30), index=5
  %copy.2159 = bf16[2,8192,4096]{2,1,0} copy(%add.4681)
  %get-tuple-element.1264 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.30), index=17
  %convert.3060 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.1264)
  %all-gather.439 = bf16[32,128,4096]{2,1,0} all-gather(%convert.3060), channel_id=442, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.538 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.2159, %all-gather.439), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2160 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.538)
  %get-tuple-element.1265 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.30), index=21
  %broadcast.13594 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1265), dimensions={0,1}
  %broadcast.13596 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1265), dimensions={0,2}
  %compare.4763 = pred[2,8192,8192]{2,1,0} compare(%broadcast.13594, %broadcast.13596), direction=EQ
  %and.1008 = pred[2,8192,8192]{2,1,0} and(%compare.4763, %broadcast.7176)
  %select.3062 = f32[2,8192,8192]{2,1,0} select(%and.1008, %broadcast.7177, %broadcast.7179)
  %compare.4765 = pred[2,8192,8192]{2,1,0} compare(%select.3062, %broadcast.7177), direction=NE
  %not.126 = pred[2,8192,8192]{2,1,0} not(%compare.4765)
  %convert.3061 = s32[2,8192,8192]{2,1,0} convert(%not.126)
  %reduce.507 = s32[2,8192]{1,0} reduce(%convert.3061, %constant.5439), dimensions={1}, to_apply=%region_561.25271
  %reshape.12059 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.507)
  %slice.806 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.12059), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.12061 = s32[2,1]{1,0} reshape(%slice.806)
  %reshape.12072 = s32[2]{0} reshape(%reshape.12061)
  %compare.4778 = pred[2]{0} compare(%reshape.12072, %broadcast.7184), direction=LT
  %reduce-window.374 = s32[2]{0} reduce-window(%reshape.12072, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.30
  %select.3072 = s32[2]{0} select(%compare.4778, %broadcast.7199, %reduce-window.374)
  %scatter.624 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.3072), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.30
  %reduce.508 = s32[2,8192]{1,0} reduce(%convert.3061, %constant.5439), dimensions={2}, to_apply=%region_562.25279
  %reshape.12062 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.508)
  %reduce.509 = s32[2,1]{1,0} reduce(%reshape.12062, %constant.5570), dimensions={3,2}, to_apply=%region_563.25284
  %reshape.12080 = s32[2]{0} reshape(%reduce.509)
  %compare.4793 = pred[2]{0} compare(%reshape.12080, %broadcast.7184), direction=LT
  %reduce-window.377 = s32[2]{0} reduce-window(%reshape.12080, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.30.clone
  %select.3082 = s32[2]{0} select(%compare.4793, %broadcast.7199, %reduce-window.377)
  %scatter.629 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.3082), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.30
  %custom-call.60 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.2156, %copy.2157, %copy.2158, %constant.5555, %get-tuple-element.1261, /*index=5*/%get-tuple-element.1262, %get-tuple-element.1263, %copy.2160, %scatter.624, %scatter.629, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1272 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.60), index=2
  %copy.2161 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1272)
  %get-tuple-element.1273 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.30), index=19
  %convert.3065 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1273)
  %all-gather.440 = bf16[4096,8,128]{2,1,0} all-gather(%convert.3065), channel_id=443, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.539 = bf16[2,8192,4096]{2,1,0} dot(%copy.2161, %all-gather.440), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1274 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.60), index=1
  %copy.2162 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1274)
  %convert.3066 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.2162)
  %multiply.6710 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3066, %broadcast.13584)
  %convert.3067 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6710)
  %multiply.6711 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3066, %broadcast.13592)
  %multiply.6712 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6711, %broadcast.13590)
  %convert.3070 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6712)
  %select.3083 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.3070, %broadcast.10254)
  %slice.807 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.3083), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.240 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.807, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4705 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.3067, %pad.240)
  %slice.808 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.3083), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.241 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.808, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4706 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4705, %pad.241)
  %select.3084 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.3070, %broadcast.10254)
  %slice.809 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.3084), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.242 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.809, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4707 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4706, %pad.242)
  %slice.810 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.3084), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.243 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.810, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4708 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4707, %pad.243)
  %get-tuple-element.1275 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.30), index=16
  %convert.3071 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1275)
  %all-gather.441 = bf16[4096,8,128]{2,1,0} all-gather(%convert.3071), channel_id=444, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.540 = bf16[2,8192,4096]{2,1,0} dot(%add.4708, %all-gather.441), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4709 = bf16[2,8192,4096]{2,1,0} add(%dot.539, %dot.540)
  %copy.2163 = bf16[2,8192,4096]{2,1,0} copy(%add.4709)
  %get-tuple-element.1276 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.60), index=0
  %copy.2164 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1276)
  %convert.3072 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.2164)
  %multiply.6722 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.3072, %broadcast.13565)
  %convert.3073 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6722)
  %multiply.6723 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.3072, %broadcast.13574)
  %multiply.6724 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6723, %broadcast.13571)
  %convert.3074 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6724)
  %select.3085 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.3074, %broadcast.10265)
  %slice.811 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.3085), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.244 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.811, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4710 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.3073, %pad.244)
  %slice.812 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.3085), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.245 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.812, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4711 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4710, %pad.245)
  %select.3086 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.3074, %broadcast.10265)
  %slice.813 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.3086), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.246 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.813, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4712 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4711, %pad.246)
  %slice.814 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.3086), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.247 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.814, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4713 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4712, %pad.247)
  %get-tuple-element.1277 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.30), index=18
  %convert.3075 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.1277)
  %all-gather.442 = bf16[4096,32,128]{2,1,0} all-gather(%convert.3075), channel_id=445, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.541 = bf16[2,8192,4096]{2,1,0} dot(%add.4713, %all-gather.442), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2165 = bf16[2,8192,4096]{2,1,0} copy(%dot.541)
  %add.4714 = bf16[2,8192,4096]{2,1,0} add(%copy.2163, %copy.2165)
  %copy.2166 = bf16[2,8192,4096]{2,1,0} copy(%add.4714)
  %get-tuple-element.1278 = f32[4096]{0} get-tuple-element(%opt-barrier.30), index=15
  %convert.3076 = bf16[4096]{0} convert(%get-tuple-element.1278)
  %broadcast.13653 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.3076), dimensions={2}
  %multiply.6733 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2166, %broadcast.13653)
  %convert.3077 = f32[2,8192,4096]{2,1,0} convert(%multiply.6733)
  %convert.3079 = f32[2,8192,4096]{2,1,0} convert(%copy.2154)
  %multiply.6734 = f32[2,8192,4096]{2,1,0} multiply(%convert.3079, %convert.3079)
  %reduce.510 = f32[2,8192]{1,0} reduce(%multiply.6734, %constant.5451), dimensions={2}, to_apply=%region_560.25062
  %multiply.6735 = f32[2,8192]{1,0} multiply(%reduce.510, %broadcast.7109)
  %add.4715 = f32[2,8192]{1,0} add(%multiply.6735, %broadcast.7110)
  %reshape.12103 = f32[2,8192,1]{2,1,0} reshape(%add.4715)
  %rsqrt.190 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.12103)
  %reshape.12104 = f32[2,8192]{1,0} reshape(%rsqrt.190)
  %broadcast.13656 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.12104), dimensions={0,1}
  %multiply.6736 = f32[2,8192,4096]{2,1,0} multiply(%convert.3077, %broadcast.13656)
  %multiply.6737 = f32[2,8192,4096]{2,1,0} multiply(%convert.3079, %convert.3077)
  %reduce.511 = f32[2,8192]{1,0} reduce(%multiply.6737, %constant.5451), dimensions={2}, to_apply=%region_571.25501
  %reshape.12105 = f32[2,8192,1]{2,1,0} reshape(%reduce.511)
  %divide.1050 = f32[2,8192,1]{2,1,0} divide(%rsqrt.190, %reshape.12103)
  %multiply.6738 = f32[2,8192,1]{2,1,0} multiply(%divide.1050, %broadcast.10161)
  %multiply.6739 = f32[2,8192,1]{2,1,0} multiply(%reshape.12105, %multiply.6738)
  %multiply.6740 = f32[2,8192,1]{2,1,0} multiply(%multiply.6739, %broadcast.10163)
  %reshape.12106 = f32[2,8192]{1,0} reshape(%multiply.6740)
  %broadcast.13658 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.12106), dimensions={0,1}
  %multiply.6741 = f32[2,8192,4096]{2,1,0} multiply(%convert.3079, %broadcast.13658)
  %add.4716 = f32[2,8192,4096]{2,1,0} add(%multiply.6736, %multiply.6741)
  %convert.3080 = bf16[2,8192,4096]{2,1,0} convert(%add.4716)
  %add.4717 = bf16[2,8192,4096]{2,1,0} add(%add.4681, %convert.3080)
  %copy.2167 = bf16[2,8192,4096]{2,1,0} copy(%add.4717)
  %tuple.155 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) tuple(%reduce-precision.0, %reduce-precision.1, %reduce-precision.2, %get-tuple-element.189, %get-tuple-element.190, /*index=5*/%reduce-precision.3, %reduce-precision.4, %reduce-precision.5, %reduce-precision.6, %constant.5507, /*index=10*/%constant.5507, %param.13, %param.14, %param.15, %param.12, /*index=15*/%param.5, %param.8, %param.11, %param.6, %param.9, /*index=20*/%copy.1190, %param.10, %param.7, %copy.2167)
  %opt-barrier.31 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, /*index=5*/bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,4096]{2,1,0}, bf16[2,8192,14336]{2,1,0}, bf16[2,8192,14336]{2,1,0}, s32[2]{0}, /*index=10*/s32[2]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/bf16[2,8192,4096]{2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, bf16[2,8192,4096]{2,1,0}) opt-barrier(%tuple.155)
  %get-tuple-element.1279 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.31), index=20
  %copy.2168 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1279)
  %get-tuple-element.1280 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.31), index=6
  %copy.2169 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1280)
  %add.4718 = bf16[2,8192,4096]{2,1,0} add(%copy.2168, %copy.2169)
  %convert.3082 = f32[2,8192,4096]{2,1,0} convert(%add.4718)
  %multiply.6742 = f32[2,8192,4096]{2,1,0} multiply(%convert.3082, %convert.3082)
  %reduce.512 = f32[2,8192]{1,0} reduce(%multiply.6742, %constant.5451), dimensions={2}, to_apply=%region_577.25788
  %multiply.6743 = f32[2,8192]{1,0} multiply(%reduce.512, %broadcast.7109)
  %add.4719 = f32[2,8192]{1,0} add(%multiply.6743, %broadcast.7110)
  %reshape.12107 = f32[2,8192,1]{2,1,0} reshape(%add.4719)
  %rsqrt.191 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.12107)
  %reshape.12108 = f32[2,8192]{1,0} reshape(%rsqrt.191)
  %broadcast.13661 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.12108), dimensions={0,1}
  %multiply.6745 = f32[2,8192,4096]{2,1,0} multiply(%convert.3082, %broadcast.13661)
  %convert.3083 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6745)
  %get-tuple-element.1281 = f32[4096]{0} get-tuple-element(%opt-barrier.31), index=14
  %convert.3085 = bf16[4096]{0} convert(%get-tuple-element.1281)
  %broadcast.13662 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.3085), dimensions={2}
  %multiply.6746 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3083, %broadcast.13662)
  %copy.2170 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6746)
  %get-tuple-element.1282 = bf16[2,8192,4096]{2,1,0} get-tuple-element(%opt-barrier.31), index=23
  %copy.2171 = bf16[2,8192,4096]{2,1,0} copy(%get-tuple-element.1282)
  %copy.2172 = bf16[2,8192,4096]{2,1,0} copy(%copy.2171)
  %get-tuple-element.1283 = f32[14336,256]{1,0} get-tuple-element(%opt-barrier.31), index=13
  %convert.3086 = bf16[14336,256]{1,0} convert(%get-tuple-element.1283)
  %all-gather.443 = bf16[14336,4096]{1,0} all-gather(%convert.3086), channel_id=446, replica_groups=[1,16]<=[16], dimensions={1}, use_global_device_ids=true
  %dot.542 = bf16[2,8192,14336]{2,1,0} dot(%copy.2172, %all-gather.443), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.2173 = bf16[2,8192,14336]{2,1,0} copy(%dot.542)
  %get-tuple-element.1284 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.31), index=8
  %multiply.6747 = bf16[2,8192,14336]{2,1,0} multiply(%copy.2173, %get-tuple-element.1284)
  %get-tuple-element.1285 = bf16[2,8192,14336]{2,1,0} get-tuple-element(%opt-barrier.31), index=7
  %negate.956 = bf16[2,8192,14336]{2,1,0} negate(%get-tuple-element.1285)
  %exponential.190 = bf16[2,8192,14336]{2,1,0} exponential(%negate.956)
  %add.4720 = bf16[2,8192,14336]{2,1,0} add(%exponential.190, %broadcast.7215)
  %divide.1051 = bf16[2,8192,14336]{2,1,0} divide(%broadcast.7215, %add.4720)
  %multiply.6748 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6747, %divide.1051)
  %multiply.6749 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1285, %multiply.6747)
  %subtract.350 = bf16[2,8192,14336]{2,1,0} subtract(%broadcast.7215, %divide.1051)
  %multiply.6750 = bf16[2,8192,14336]{2,1,0} multiply(%divide.1051, %subtract.350)
  %multiply.6751 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6749, %multiply.6750)
  %add.4721 = bf16[2,8192,14336]{2,1,0} add(%multiply.6748, %multiply.6751)
  %dot.543 = bf16[4096,14336]{1,0} dot(%copy.2170, %add.4721), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.2 = bf16[4096,14336]{1,0} all-reduce(%dot.543), channel_id=447, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.clone
  %constant.19684 = s32[16]{0} constant({0, 256, 512, 768, 1024, 1280, 1536, 1792, 2048, 2304, 2560, 2816, 3072, 3328, 3584, 3840})
  %dynamic-slice.1065 = s32[1]{0} dynamic-slice(%constant.19684, %partition-id), dynamic_slice_sizes={1}
  %reshape.12109 = s32[] reshape(%dynamic-slice.1065)
  %dynamic-slice.1066 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.2, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3087 = f32[256,14336]{0,1} convert(%dynamic-slice.1066)
  %multiply.6752 = f32[256,14336]{0,1} multiply(%convert.3087, %convert.3087)
  %reduce.513 = f32[] reduce(%multiply.6752, %constant.5451), dimensions={0,1}, to_apply=%region_587.26027
  %all-reduce.3 = f32[] all-reduce(%reduce.513), channel_id=448, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_587.26027.clone
  %add.4722 = f32[] add(%reduce.293, %all-reduce.3)
  %multiply.6753 = bf16[2,8192,14336]{2,1,0} multiply(%get-tuple-element.1285, %divide.1051)
  %multiply.6754 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6753, %copy.2173)
  %dot.544 = bf16[4096,14336]{1,0} dot(%copy.2170, %multiply.6754), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.4 = bf16[4096,14336]{1,0} all-reduce(%dot.544), channel_id=449, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.1.clone
  %dynamic-slice.1068 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.4, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3088 = f32[256,14336]{0,1} convert(%dynamic-slice.1068)
  %multiply.6755 = f32[256,14336]{0,1} multiply(%convert.3088, %convert.3088)
  %reduce.514 = f32[] reduce(%multiply.6755, %constant.5451), dimensions={0,1}, to_apply=%region_588.26034
  %all-reduce.5 = f32[] all-reduce(%reduce.514), channel_id=450, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_588.26034.clone
  %add.4723 = f32[] add(%add.4722, %all-reduce.5)
  %multiply.6756 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6753, %get-tuple-element.1284)
  %copy.2174 = bf16[2,8192,14336]{2,1,0} copy(%multiply.6756)
  %dot.545 = bf16[14336,4096]{1,0} dot(%copy.2174, %copy.2172), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.6 = bf16[14336,4096]{1,0} all-reduce(%dot.545), channel_id=451, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.2.clone
  %dynamic-slice.1070 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.6, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3089 = f32[14336,256]{0,1} convert(%dynamic-slice.1070)
  %multiply.6757 = f32[14336,256]{0,1} multiply(%convert.3089, %convert.3089)
  %reduce.515 = f32[] reduce(%multiply.6757, %constant.5451), dimensions={0,1}, to_apply=%region_589.26041
  %all-reduce.7 = f32[] all-reduce(%reduce.515), channel_id=452, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_589.26041.clone
  %add.4724 = f32[] add(%add.4723, %all-reduce.7)
  %get-tuple-element.1286 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.31), index=12
  %convert.3090 = bf16[256,14336]{1,0} convert(%get-tuple-element.1286)
  %all-gather.444 = bf16[4096,14336]{1,0} all-gather(%convert.3090), channel_id=453, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.546 = bf16[2,8192,4096]{2,1,0} dot(%multiply.6754, %all-gather.444), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %get-tuple-element.1287 = f32[256,14336]{1,0} get-tuple-element(%opt-barrier.31), index=11
  %convert.3091 = bf16[256,14336]{1,0} convert(%get-tuple-element.1287)
  %all-gather.445 = bf16[4096,14336]{1,0} all-gather(%convert.3091), channel_id=454, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.547 = bf16[2,8192,4096]{2,1,0} dot(%add.4721, %all-gather.445), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4725 = bf16[2,8192,4096]{2,1,0} add(%dot.546, %dot.547)
  %copy.2175 = bf16[2,8192,4096]{2,1,0} copy(%add.4725)
  %multiply.6758 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3083, %copy.2175)
  %reduce.516 = bf16[4096]{0} reduce(%multiply.6758, %constant.10307), dimensions={0,1}, to_apply=%region_578.25841
  %all-reduce.8 = bf16[4096]{0} all-reduce(%reduce.516), channel_id=455, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_578.25841.clone
  %convert.3092 = f32[4096]{0} convert(%all-reduce.8)
  %multiply.6759 = f32[4096]{0} multiply(%convert.3092, %convert.3092)
  %reduce.517 = f32[] reduce(%multiply.6759, %constant.5451), dimensions={0}, to_apply=%region_590.26048
  %add.4726 = f32[] add(%add.4724, %reduce.517)
  %convert.3093 = f32[2,8192,4096]{2,1,0} convert(%copy.2168)
  %multiply.6761 = f32[2,8192,4096]{2,1,0} multiply(%convert.3093, %convert.3093)
  %reduce.518 = f32[2,8192]{1,0} reduce(%multiply.6761, %constant.5451), dimensions={2}, to_apply=%region_573.25554
  %multiply.6763 = f32[2,8192]{1,0} multiply(%reduce.518, %broadcast.7109)
  %add.4727 = f32[2,8192]{1,0} add(%multiply.6763, %broadcast.7110)
  %reshape.12112 = f32[2,8192,1]{2,1,0} reshape(%add.4727)
  %rsqrt.192 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.12112)
  %reshape.12113 = f32[2,8192]{1,0} reshape(%rsqrt.192)
  %broadcast.13666 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.12113), dimensions={0,1}
  %multiply.6764 = f32[2,8192,4096]{2,1,0} multiply(%convert.3093, %broadcast.13666)
  %convert.3094 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6764)
  %get-tuple-element.1288 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.31), index=0
  %convert.3095 = f32[2,8192,32,128]{3,2,1,0} convert(%get-tuple-element.1288)
  %get-tuple-element.1289 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.31), index=22
  %convert.3096 = f32[2,8192]{1,0} convert(%get-tuple-element.1289)
  %broadcast.13667 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.3096), dimensions={0,1}
  %divide.1053 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.13667, %broadcast.7129)
  %cosine.127 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.1053)
  %reshape.12115 = f32[2,8192,128]{2,1,0} reshape(%cosine.127)
  %broadcast.13676 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.12115), dimensions={0,1,3}
  %multiply.6775 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.3095, %broadcast.13676)
  %slice.815 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1288), slice={[0:2], [0:8192], [0:32], [1:128]}
  %slice.816 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1288), slice={[0:2], [0:8192], [0:32], [0:1]}
  %concatenate.252 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.815, %slice.816), dimensions={3}
  %slice.817 = bf16[2,8192,32,1]{3,2,1,0} slice(%get-tuple-element.1288), slice={[0:2], [0:8192], [0:32], [127:128]}
  %slice.818 = bf16[2,8192,32,127]{3,2,1,0} slice(%get-tuple-element.1288), slice={[0:2], [0:8192], [0:32], [0:127]}
  %concatenate.253 = bf16[2,8192,32,128]{3,2,1,0} concatenate(%slice.817, %slice.818), dimensions={3}
  %select.3090 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.7140, %concatenate.252, %concatenate.253)
  %convert.3100 = f32[2,8192,32,128]{3,2,1,0} convert(%select.3090)
  %sine.126 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.1053)
  %reshape.12121 = f32[2,8192,128]{2,1,0} reshape(%sine.126)
  %broadcast.13684 = f32[2,8192,32,128]{3,2,1,0} broadcast(%reshape.12121), dimensions={0,1,3}
  %multiply.6780 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.3100, %broadcast.13684)
  %get-tuple-element.1290 = s32[2]{0} get-tuple-element(%opt-barrier.31), index=9
  %broadcast.13685 = s32[64,2]{1,0} broadcast(%get-tuple-element.1290), dimensions={1}
  %reshape.12123 = s32[128]{0} reshape(%broadcast.13685)
  %convert.3101 = f32[128]{0} convert(%reshape.12123)
  %broadcast.13686 = f32[2,8192,32,128]{3,2,1,0} broadcast(%convert.3101), dimensions={3}
  %multiply.6781 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6780, %broadcast.13686)
  %add.4732 = f32[2,8192,32,128]{3,2,1,0} add(%multiply.6775, %multiply.6781)
  %convert.3102 = bf16[2,8192,32,128]{3,2,1,0} convert(%add.4732)
  %copy.2176 = bf16[2,8192,32,128]{3,2,1,0} copy(%convert.3102)
  %get-tuple-element.1291 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.31), index=1
  %convert.3103 = f32[2,8192,8,128]{3,2,1,0} convert(%get-tuple-element.1291)
  %broadcast.13697 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.12115), dimensions={0,1,3}
  %multiply.6793 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3103, %broadcast.13697)
  %slice.819 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1291), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.820 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1291), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.254 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.819, %slice.820), dimensions={3}
  %slice.821 = bf16[2,8192,8,1]{3,2,1,0} slice(%get-tuple-element.1291), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.822 = bf16[2,8192,8,127]{3,2,1,0} slice(%get-tuple-element.1291), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.255 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.821, %slice.822), dimensions={3}
  %select.3094 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.7165, %concatenate.254, %concatenate.255)
  %convert.3109 = f32[2,8192,8,128]{3,2,1,0} convert(%select.3094)
  %broadcast.13704 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.12121), dimensions={0,1,3}
  %multiply.6799 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3109, %broadcast.13704)
  %get-tuple-element.1292 = s32[2]{0} get-tuple-element(%opt-barrier.31), index=10
  %broadcast.13705 = s32[64,2]{1,0} broadcast(%get-tuple-element.1292), dimensions={1}
  %reshape.12132 = s32[128]{0} reshape(%broadcast.13705)
  %convert.3110 = f32[128]{0} convert(%reshape.12132)
  %broadcast.13706 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.3110), dimensions={3}
  %multiply.6801 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6799, %broadcast.13706)
  %add.4736 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.6793, %multiply.6801)
  %convert.3111 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.4736)
  %copy.2177 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.3111)
  %get-tuple-element.1293 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%opt-barrier.31), index=2
  %copy.2178 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1293)
  %get-tuple-element.1294 = f32[2,32,8192,1]{3,2,1,0} get-tuple-element(%opt-barrier.31), index=3
  %get-tuple-element.1295 = u32[2,4]{1,0} get-tuple-element(%opt-barrier.31), index=4
  %get-tuple-element.1296 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%opt-barrier.31), index=5
  %multiply.6802 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2175, %broadcast.13662)
  %convert.3112 = f32[2,8192,4096]{2,1,0} convert(%multiply.6802)
  %multiply.6803 = f32[2,8192,4096]{2,1,0} multiply(%convert.3112, %broadcast.13661)
  %multiply.6804 = f32[2,8192,4096]{2,1,0} multiply(%convert.3082, %convert.3112)
  %reduce.519 = f32[2,8192]{1,0} reduce(%multiply.6804, %constant.5451), dimensions={2}, to_apply=%region_580.25859
  %reshape.12134 = f32[2,8192,1]{2,1,0} reshape(%reduce.519)
  %divide.1056 = f32[2,8192,1]{2,1,0} divide(%rsqrt.191, %reshape.12107)
  %multiply.6805 = f32[2,8192,1]{2,1,0} multiply(%divide.1056, %broadcast.10161)
  %multiply.6806 = f32[2,8192,1]{2,1,0} multiply(%reshape.12134, %multiply.6805)
  %multiply.6807 = f32[2,8192,1]{2,1,0} multiply(%multiply.6806, %broadcast.10163)
  %reshape.12135 = f32[2,8192]{1,0} reshape(%multiply.6807)
  %broadcast.13711 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.12135), dimensions={0,1}
  %multiply.6808 = f32[2,8192,4096]{2,1,0} multiply(%convert.3082, %broadcast.13711)
  %add.4738 = f32[2,8192,4096]{2,1,0} add(%multiply.6803, %multiply.6808)
  %convert.3114 = bf16[2,8192,4096]{2,1,0} convert(%add.4738)
  %add.4739 = bf16[2,8192,4096]{2,1,0} add(%copy.2171, %convert.3114)
  %copy.2179 = bf16[2,8192,4096]{2,1,0} copy(%add.4739)
  %get-tuple-element.1297 = f32[32,128,256]{2,1,0} get-tuple-element(%opt-barrier.31), index=17
  %convert.3116 = bf16[32,128,256]{2,1,0} convert(%get-tuple-element.1297)
  %all-gather.446 = bf16[32,128,4096]{2,1,0} all-gather(%convert.3116), channel_id=456, replica_groups=[1,16]<=[16], dimensions={2}, use_global_device_ids=true
  %dot.548 = bf16[2,8192,32,128]{3,2,1,0} dot(%copy.2179, %all-gather.446), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2180 = bf16[2,8192,32,128]{3,2,1,0} copy(%dot.548)
  %get-tuple-element.1298 = s32[2,8192]{1,0} get-tuple-element(%opt-barrier.31), index=21
  %broadcast.13712 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1298), dimensions={0,1}
  %broadcast.13713 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.1298), dimensions={0,2}
  %compare.4815 = pred[2,8192,8192]{2,1,0} compare(%broadcast.13712, %broadcast.13713), direction=EQ
  %and.1017 = pred[2,8192,8192]{2,1,0} and(%compare.4815, %broadcast.7176)
  %select.3095 = f32[2,8192,8192]{2,1,0} select(%and.1017, %broadcast.7177, %broadcast.7179)
  %compare.4817 = pred[2,8192,8192]{2,1,0} compare(%select.3095, %broadcast.7177), direction=NE
  %not.127 = pred[2,8192,8192]{2,1,0} not(%compare.4817)
  %convert.3117 = s32[2,8192,8192]{2,1,0} convert(%not.127)
  %reduce.520 = s32[2,8192]{1,0} reduce(%convert.3117, %constant.5439), dimensions={1}, to_apply=%region_574.25763
  %reshape.12136 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.520)
  %slice.823 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.12136), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.12138 = s32[2,1]{1,0} reshape(%slice.823)
  %reshape.12147 = s32[2]{0} reshape(%reshape.12138)
  %compare.4830 = pred[2]{0} compare(%reshape.12147, %broadcast.7184), direction=LT
  %reduce-window.380 = s32[2]{0} reduce-window(%reshape.12147, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.31
  %select.3106 = s32[2]{0} select(%compare.4830, %broadcast.7199, %reduce-window.380)
  %scatter.634 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.3106), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.198._custom_call_lowering_rule.31
  %reduce.521 = s32[2,8192]{1,0} reduce(%convert.3117, %constant.5439), dimensions={2}, to_apply=%region_575.25771
  %reshape.12139 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.521)
  %reduce.522 = s32[2,1]{1,0} reduce(%reshape.12139, %constant.5570), dimensions={3,2}, to_apply=%region_576.25776
  %reshape.12157 = s32[2]{0} reshape(%reduce.522)
  %compare.4843 = pred[2]{0} compare(%reshape.12157, %broadcast.7184), direction=LT
  %reduce-window.383 = s32[2]{0} reduce-window(%reshape.12157, %constant.5439), window={size=2 pad=1_0}, to_apply=%region_0.42._custom_call_lowering_rule.31.clone
  %select.3116 = s32[2]{0} select(%compare.4843, %broadcast.7199, %reduce-window.383)
  %scatter.639 = s32[3]{0} scatter(%scatter.188, %reshape.8497, %select.3116), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.252._custom_call_lowering_rule.31
  %custom-call.61 = (bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[538968112]{0}) custom-call(%copy.2176, %copy.2177, %copy.2178, %constant.5555, %get-tuple-element.1294, /*index=5*/%get-tuple-element.1295, %get-tuple-element.1296, %copy.2180, %scatter.634, %scatter.639, /*index=10*/%constant.5555, %constant.5555), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,32,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,32,128]{3,2,1,0}, bf16[2,8192,32,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1305 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.61), index=2
  %copy.2181 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1305)
  %get-tuple-element.1306 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.31), index=19
  %convert.3121 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1306)
  %all-gather.447 = bf16[4096,8,128]{2,1,0} all-gather(%convert.3121), channel_id=457, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.549 = bf16[2,8192,4096]{2,1,0} dot(%copy.2181, %all-gather.447), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1307 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.61), index=1
  %copy.2182 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.1307)
  %convert.3122 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.2182)
  %multiply.6810 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3122, %broadcast.13697)
  %convert.3123 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6810)
  %multiply.6811 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.3122, %broadcast.13706)
  %multiply.6812 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.6811, %broadcast.13704)
  %convert.3124 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.6812)
  %select.3117 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10251, %convert.3124, %broadcast.10254)
  %slice.824 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.3117), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.248 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.824, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4753 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.3123, %pad.248)
  %slice.825 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.3117), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.249 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.825, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4754 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4753, %pad.249)
  %select.3118 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.10256, %convert.3124, %broadcast.10254)
  %slice.826 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.3118), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.250 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.826, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4755 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4754, %pad.250)
  %slice.827 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.3118), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.251 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.827, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4756 = bf16[2,8192,8,128]{3,2,1,0} add(%add.4755, %pad.251)
  %get-tuple-element.1308 = f32[256,8,128]{2,1,0} get-tuple-element(%opt-barrier.31), index=16
  %convert.3125 = bf16[256,8,128]{2,1,0} convert(%get-tuple-element.1308)
  %all-gather.448 = bf16[4096,8,128]{2,1,0} all-gather(%convert.3125), channel_id=458, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.550 = bf16[2,8192,4096]{2,1,0} dot(%add.4756, %all-gather.448), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4757 = bf16[2,8192,4096]{2,1,0} add(%dot.549, %dot.550)
  %copy.2183 = bf16[2,8192,4096]{2,1,0} copy(%add.4757)
  %get-tuple-element.1309 = bf16[2,8192,32,128]{3,2,1,0} get-tuple-element(%custom-call.61), index=0
  %copy.2184 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1309)
  %convert.3126 = f32[2,8192,32,128]{3,2,1,0} convert(%copy.2184)
  %multiply.6822 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.3126, %broadcast.13676)
  %convert.3127 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6822)
  %multiply.6823 = f32[2,8192,32,128]{3,2,1,0} multiply(%convert.3126, %broadcast.13686)
  %multiply.6824 = f32[2,8192,32,128]{3,2,1,0} multiply(%multiply.6823, %broadcast.13684)
  %convert.3128 = bf16[2,8192,32,128]{3,2,1,0} convert(%multiply.6824)
  %select.3119 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10261, %convert.3128, %broadcast.10265)
  %slice.828 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.3119), slice={[0:2], [0:8192], [0:32], [1:128]}
  %pad.252 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.828, %constant.10307), padding=0_0x0_0x0_0x0_1
  %add.4758 = bf16[2,8192,32,128]{3,2,1,0} add(%convert.3127, %pad.252)
  %slice.829 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.3119), slice={[0:2], [0:8192], [0:32], [0:1]}
  %pad.253 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.829, %constant.10307), padding=0_0x0_0x0_0x127_0
  %add.4759 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4758, %pad.253)
  %select.3120 = bf16[2,8192,32,128]{3,2,1,0} select(%broadcast.10268, %convert.3128, %broadcast.10265)
  %slice.830 = bf16[2,8192,32,1]{3,2,1,0} slice(%select.3120), slice={[0:2], [0:8192], [0:32], [127:128]}
  %pad.254 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.830, %constant.10307), padding=0_0x0_0x0_0x0_127
  %add.4760 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4759, %pad.254)
  %slice.831 = bf16[2,8192,32,127]{3,2,1,0} slice(%select.3120), slice={[0:2], [0:8192], [0:32], [0:127]}
  %pad.255 = bf16[2,8192,32,128]{3,2,1,0} pad(%slice.831, %constant.10307), padding=0_0x0_0x0_0x1_0
  %add.4761 = bf16[2,8192,32,128]{3,2,1,0} add(%add.4760, %pad.255)
  %get-tuple-element.1310 = f32[256,32,128]{2,1,0} get-tuple-element(%opt-barrier.31), index=18
  %convert.3129 = bf16[256,32,128]{2,1,0} convert(%get-tuple-element.1310)
  %all-gather.449 = bf16[4096,32,128]{2,1,0} all-gather(%convert.3129), channel_id=459, replica_groups=[1,16]<=[16], dimensions={0}, use_global_device_ids=true
  %dot.551 = bf16[2,8192,4096]{2,1,0} dot(%add.4761, %all-gather.449), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2185 = bf16[2,8192,4096]{2,1,0} copy(%dot.551)
  %add.4762 = bf16[2,8192,4096]{2,1,0} add(%copy.2183, %copy.2185)
  %copy.2186 = bf16[2,8192,4096]{2,1,0} copy(%add.4762)
  %multiply.6833 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3094, %copy.2186)
  %reduce.523 = bf16[4096]{0} reduce(%multiply.6833, %constant.10307), dimensions={0,1}, to_apply=%region_582.25975
  %all-reduce.9 = bf16[4096]{0} all-reduce(%reduce.523), channel_id=460, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_582.25975.clone
  %convert.3130 = f32[4096]{0} convert(%all-reduce.9)
  %multiply.6834 = f32[4096]{0} multiply(%convert.3130, %convert.3130)
  %reduce.524 = f32[] reduce(%multiply.6834, %constant.5451), dimensions={0}, to_apply=%region_591.26055
  %add.4763 = f32[] add(%add.4726, %reduce.524)
  %get-tuple-element.1311 = f32[4096]{0} get-tuple-element(%opt-barrier.31), index=15
  %convert.3132 = bf16[4096]{0} convert(%get-tuple-element.1311)
  %broadcast.13764 = bf16[2,8192,4096]{2,1,0} broadcast(%convert.3132), dimensions={2}
  %multiply.6835 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3094, %broadcast.13764)
  %copy.2187 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6835)
  %copy.2188 = bf16[2,8192,4096]{2,1,0} copy(%copy.2187)
  %dot.552 = bf16[8,128,4096]{2,1,0} dot(%add.4756, %copy.2188), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.10 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.552), channel_id=461, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.3.clone
  %dynamic-slice.1097 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.10, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3133 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1097)
  %transpose.384 = f32[256,8,128]{0,2,1} transpose(%convert.3133), dimensions={2,0,1}
  %multiply.6837 = f32[256,8,128]{0,2,1} multiply(%transpose.384, %transpose.384)
  %reduce.525 = f32[] reduce(%multiply.6837, %constant.5451), dimensions={0,1,2}, to_apply=%region_592.26062
  %all-reduce.11 = f32[] all-reduce(%reduce.525), channel_id=462, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_592.26062.clone
  %add.4764 = f32[] add(%add.4763, %all-reduce.11)
  %copy.2189 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1296)
  %dot.553 = bf16[4096,32,128]{2,1,0} dot(%copy.2179, %copy.2189), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.12 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.553), channel_id=463, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.4.clone
  %dynamic-slice.1099 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.12, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3134 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1099)
  %transpose.385 = f32[32,128,256]{1,0,2} transpose(%convert.3134), dimensions={1,2,0}
  %multiply.6839 = f32[32,128,256]{1,0,2} multiply(%transpose.385, %transpose.385)
  %reduce.526 = f32[] reduce(%multiply.6839, %constant.5451), dimensions={0,1,2}, to_apply=%region_593.26069
  %all-reduce.13 = f32[] all-reduce(%reduce.526), channel_id=464, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_593.26069.clone
  %add.4765 = f32[] add(%add.4764, %all-reduce.13)
  %dot.554 = bf16[32,128,4096]{2,1,0} dot(%add.4761, %copy.2188), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.14 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.554), channel_id=465, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.5.clone
  %dynamic-slice.1101 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.14, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3135 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1101)
  %transpose.386 = f32[256,32,128]{0,2,1} transpose(%convert.3135), dimensions={2,0,1}
  %multiply.6840 = f32[256,32,128]{0,2,1} multiply(%transpose.386, %transpose.386)
  %reduce.527 = f32[] reduce(%multiply.6840, %constant.5451), dimensions={0,1,2}, to_apply=%region_594.26076
  %all-reduce.15 = f32[] all-reduce(%reduce.527), channel_id=466, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_594.26076.clone
  %add.4766 = f32[] add(%add.4765, %all-reduce.15)
  %dot.555 = bf16[8,128,4096]{2,1,0} dot(%copy.2181, %copy.2188), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.16 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.555), channel_id=467, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.6.clone
  %dynamic-slice.1103 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.16, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3136 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1103)
  %transpose.387 = f32[256,8,128]{0,2,1} transpose(%convert.3136), dimensions={2,0,1}
  %multiply.6841 = f32[256,8,128]{0,2,1} multiply(%transpose.387, %transpose.387)
  %reduce.528 = f32[] reduce(%multiply.6841, %constant.5451), dimensions={0,1,2}, to_apply=%region_595.26083
  %all-reduce.17 = f32[] all-reduce(%reduce.528), channel_id=468, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_595.26083.clone
  %add.4767 = f32[] add(%add.4766, %all-reduce.17)
  %multiply.6842 = f32[2,8192,4096]{2,1,0} multiply(%convert.3039, %broadcast.13551)
  %convert.3137 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6842)
  %multiply.6843 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3137, %broadcast.13548)
  %copy.2191 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6843)
  %dot.556 = bf16[4096,14336]{1,0} dot(%copy.2191, %add.4675), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.18 = bf16[4096,14336]{1,0} all-reduce(%dot.556), channel_id=469, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.7.clone
  %dynamic-slice.1105 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.18, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3138 = f32[256,14336]{0,1} convert(%dynamic-slice.1105)
  %multiply.6844 = f32[256,14336]{0,1} multiply(%convert.3138, %convert.3138)
  %reduce.529 = f32[] reduce(%multiply.6844, %constant.5451), dimensions={0,1}, to_apply=%region_596.26090
  %all-reduce.19 = f32[] all-reduce(%reduce.529), channel_id=470, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_596.26090.clone
  %add.4768 = f32[] add(%add.4767, %all-reduce.19)
  %dot.557 = bf16[4096,14336]{1,0} dot(%copy.2191, %multiply.6654), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.20 = bf16[4096,14336]{1,0} all-reduce(%dot.557), channel_id=471, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.8.clone
  %dynamic-slice.1107 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.20, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3139 = f32[256,14336]{0,1} convert(%dynamic-slice.1107)
  %multiply.6845 = f32[256,14336]{0,1} multiply(%convert.3139, %convert.3139)
  %reduce.530 = f32[] reduce(%multiply.6845, %constant.5451), dimensions={0,1}, to_apply=%region_597.26097
  %all-reduce.21 = f32[] all-reduce(%reduce.530), channel_id=472, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_597.26097.clone
  %add.4769 = f32[] add(%add.4768, %all-reduce.21)
  %multiply.6846 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6653, %get-tuple-element.1250)
  %copy.2192 = bf16[2,8192,14336]{2,1,0} copy(%multiply.6846)
  %dot.558 = bf16[14336,4096]{1,0} dot(%copy.2192, %copy.2151), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.22 = bf16[14336,4096]{1,0} all-reduce(%dot.558), channel_id=473, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.9.clone
  %dynamic-slice.1109 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.22, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3140 = f32[14336,256]{0,1} convert(%dynamic-slice.1109)
  %multiply.6847 = f32[14336,256]{0,1} multiply(%convert.3140, %convert.3140)
  %reduce.531 = f32[] reduce(%multiply.6847, %constant.5451), dimensions={0,1}, to_apply=%region_598.26104
  %all-reduce.23 = f32[] all-reduce(%reduce.531), channel_id=474, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_598.26104.clone
  %add.4770 = f32[] add(%add.4769, %all-reduce.23)
  %multiply.6848 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3137, %copy.2153)
  %reduce.532 = bf16[4096]{0} reduce(%multiply.6848, %constant.10307), dimensions={0,1}, to_apply=%region_565.25349
  %all-reduce.24 = bf16[4096]{0} all-reduce(%reduce.532), channel_id=475, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_565.25349.clone
  %convert.3141 = f32[4096]{0} convert(%all-reduce.24)
  %multiply.6849 = f32[4096]{0} multiply(%convert.3141, %convert.3141)
  %reduce.533 = f32[] reduce(%multiply.6849, %constant.5451), dimensions={0}, to_apply=%region_599.26111
  %add.4771 = f32[] add(%add.4770, %reduce.533)
  %multiply.6850 = f32[2,8192,4096]{2,1,0} multiply(%convert.3079, %broadcast.13656)
  %convert.3142 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6850)
  %multiply.6851 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3142, %copy.2166)
  %reduce.534 = bf16[4096]{0} reduce(%multiply.6851, %constant.10307), dimensions={0,1}, to_apply=%region_569.25483
  %all-reduce.25 = bf16[4096]{0} all-reduce(%reduce.534), channel_id=476, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_569.25483.clone
  %convert.3143 = f32[4096]{0} convert(%all-reduce.25)
  %multiply.6852 = f32[4096]{0} multiply(%convert.3143, %convert.3143)
  %reduce.535 = f32[] reduce(%multiply.6852, %constant.5451), dimensions={0}, to_apply=%region_600.26118
  %add.4772 = f32[] add(%add.4771, %reduce.535)
  %multiply.6853 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3142, %broadcast.13653)
  %copy.2193 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6853)
  %copy.2194 = bf16[2,8192,4096]{2,1,0} copy(%copy.2193)
  %dot.559 = bf16[8,128,4096]{2,1,0} dot(%add.4708, %copy.2194), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.26 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.559), channel_id=477, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.10.clone
  %dynamic-slice.1111 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.26, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3144 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1111)
  %transpose.388 = f32[256,8,128]{0,2,1} transpose(%convert.3144), dimensions={2,0,1}
  %multiply.6854 = f32[256,8,128]{0,2,1} multiply(%transpose.388, %transpose.388)
  %reduce.536 = f32[] reduce(%multiply.6854, %constant.5451), dimensions={0,1,2}, to_apply=%region_601.26125
  %all-reduce.27 = f32[] all-reduce(%reduce.536), channel_id=478, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_601.26125.clone
  %add.4773 = f32[] add(%add.4772, %all-reduce.27)
  %copy.2195 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1263)
  %dot.560 = bf16[4096,32,128]{2,1,0} dot(%copy.2159, %copy.2195), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.28 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.560), channel_id=479, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.11.clone
  %dynamic-slice.1113 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.28, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3146 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1113)
  %transpose.389 = f32[32,128,256]{1,0,2} transpose(%convert.3146), dimensions={1,2,0}
  %multiply.6855 = f32[32,128,256]{1,0,2} multiply(%transpose.389, %transpose.389)
  %reduce.537 = f32[] reduce(%multiply.6855, %constant.5451), dimensions={0,1,2}, to_apply=%region_602.26132
  %all-reduce.29 = f32[] all-reduce(%reduce.537), channel_id=480, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_602.26132.clone
  %add.4774 = f32[] add(%add.4773, %all-reduce.29)
  %dot.561 = bf16[32,128,4096]{2,1,0} dot(%add.4713, %copy.2194), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.30 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.561), channel_id=481, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.12.clone
  %dynamic-slice.1115 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.30, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3147 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1115)
  %transpose.390 = f32[256,32,128]{0,2,1} transpose(%convert.3147), dimensions={2,0,1}
  %multiply.6856 = f32[256,32,128]{0,2,1} multiply(%transpose.390, %transpose.390)
  %reduce.538 = f32[] reduce(%multiply.6856, %constant.5451), dimensions={0,1,2}, to_apply=%region_603.26139
  %all-reduce.31 = f32[] all-reduce(%reduce.538), channel_id=482, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_603.26139.clone
  %add.4775 = f32[] add(%add.4774, %all-reduce.31)
  %dot.562 = bf16[8,128,4096]{2,1,0} dot(%copy.2161, %copy.2194), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.32 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.562), channel_id=483, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.13.clone
  %dynamic-slice.1117 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.32, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3148 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1117)
  %transpose.391 = f32[256,8,128]{0,2,1} transpose(%convert.3148), dimensions={2,0,1}
  %multiply.6857 = f32[256,8,128]{0,2,1} multiply(%transpose.391, %transpose.391)
  %reduce.539 = f32[] reduce(%multiply.6857, %constant.5451), dimensions={0,1,2}, to_apply=%region_604.26146
  %all-reduce.33 = f32[] all-reduce(%reduce.539), channel_id=484, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_604.26146.clone
  %add.4776 = f32[] add(%add.4775, %all-reduce.33)
  %multiply.6858 = f32[2,8192,4096]{2,1,0} multiply(%convert.2625, %broadcast.12540)
  %convert.3149 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6858)
  %multiply.6859 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3149, %broadcast.12537)
  %copy.2197 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6859)
  %dot.563 = bf16[4096,14336]{1,0} dot(%copy.2197, %add.4300), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.34 = bf16[4096,14336]{1,0} all-reduce(%dot.563), channel_id=485, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.14.clone
  %dynamic-slice.1119 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.34, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3151 = f32[256,14336]{0,1} convert(%dynamic-slice.1119)
  %multiply.6860 = f32[256,14336]{0,1} multiply(%convert.3151, %convert.3151)
  %reduce.540 = f32[] reduce(%multiply.6860, %constant.5451), dimensions={0,1}, to_apply=%region_605.26153
  %all-reduce.35 = f32[] all-reduce(%reduce.540), channel_id=486, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_605.26153.clone
  %add.4777 = f32[] add(%add.4776, %all-reduce.35)
  %dot.564 = bf16[4096,14336]{1,0} dot(%copy.2197, %multiply.5864), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.36 = bf16[4096,14336]{1,0} all-reduce(%dot.564), channel_id=487, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.15.clone
  %dynamic-slice.1121 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.36, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3152 = f32[256,14336]{0,1} convert(%dynamic-slice.1121)
  %multiply.6861 = f32[256,14336]{0,1} multiply(%convert.3152, %convert.3152)
  %reduce.541 = f32[] reduce(%multiply.6861, %constant.5451), dimensions={0,1}, to_apply=%region_606.26160
  %all-reduce.37 = f32[] all-reduce(%reduce.541), channel_id=488, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_606.26160.clone
  %add.4778 = f32[] add(%add.4777, %all-reduce.37)
  %multiply.6862 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5863, %get-tuple-element.953)
  %copy.2198 = bf16[2,8192,14336]{2,1,0} copy(%multiply.6862)
  %dot.565 = bf16[14336,4096]{1,0} dot(%copy.2198, %copy.1989), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.38 = bf16[14336,4096]{1,0} all-reduce(%dot.565), channel_id=489, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.16.clone
  %dynamic-slice.1123 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.38, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3153 = f32[14336,256]{0,1} convert(%dynamic-slice.1123)
  %multiply.6863 = f32[14336,256]{0,1} multiply(%convert.3153, %convert.3153)
  %reduce.542 = f32[] reduce(%multiply.6863, %constant.5451), dimensions={0,1}, to_apply=%region_607.26167
  %all-reduce.39 = f32[] all-reduce(%reduce.542), channel_id=490, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_607.26167.clone
  %add.4779 = f32[] add(%add.4778, %all-reduce.39)
  %multiply.6864 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3149, %copy.1991)
  %reduce.543 = bf16[4096]{0} reduce(%multiply.6864, %constant.10307), dimensions={0,1}, to_apply=%region_448.20921
  %all-reduce.40 = bf16[4096]{0} all-reduce(%reduce.543), channel_id=491, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_448.20921.clone
  %convert.3154 = f32[4096]{0} convert(%all-reduce.40)
  %multiply.6866 = f32[4096]{0} multiply(%convert.3154, %convert.3154)
  %reduce.544 = f32[] reduce(%multiply.6866, %constant.5451), dimensions={0}, to_apply=%region_608.26174
  %add.4780 = f32[] add(%add.4779, %reduce.544)
  %multiply.6867 = f32[2,8192,4096]{2,1,0} multiply(%convert.2663, %broadcast.12643)
  %convert.3156 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6867)
  %multiply.6868 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3156, %copy.2004)
  %reduce.545 = bf16[4096]{0} reduce(%multiply.6868, %constant.10307), dimensions={0,1}, to_apply=%region_452.21055
  %all-reduce.41 = bf16[4096]{0} all-reduce(%reduce.545), channel_id=492, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_452.21055.clone
  %convert.3157 = f32[4096]{0} convert(%all-reduce.41)
  %multiply.6869 = f32[4096]{0} multiply(%convert.3157, %convert.3157)
  %reduce.546 = f32[] reduce(%multiply.6869, %constant.5451), dimensions={0}, to_apply=%region_609.26181
  %add.4781 = f32[] add(%add.4780, %reduce.546)
  %multiply.6871 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3156, %broadcast.12638)
  %copy.2199 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6871)
  %copy.2200 = bf16[2,8192,4096]{2,1,0} copy(%copy.2199)
  %dot.566 = bf16[8,128,4096]{2,1,0} dot(%add.4330, %copy.2200), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.42 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.566), channel_id=493, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.17.clone
  %dynamic-slice.1125 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.42, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3158 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1125)
  %transpose.392 = f32[256,8,128]{0,2,1} transpose(%convert.3158), dimensions={2,0,1}
  %multiply.6872 = f32[256,8,128]{0,2,1} multiply(%transpose.392, %transpose.392)
  %reduce.547 = f32[] reduce(%multiply.6872, %constant.5451), dimensions={0,1,2}, to_apply=%region_610.26188
  %all-reduce.43 = f32[] all-reduce(%reduce.547), channel_id=494, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_610.26188.clone
  %add.4782 = f32[] add(%add.4781, %all-reduce.43)
  %copy.2201 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.966)
  %dot.567 = bf16[4096,32,128]{2,1,0} dot(%copy.1997, %copy.2201), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.44 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.567), channel_id=495, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.18.clone
  %dynamic-slice.1127 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.44, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3159 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1127)
  %transpose.393 = f32[32,128,256]{1,0,2} transpose(%convert.3159), dimensions={1,2,0}
  %multiply.6873 = f32[32,128,256]{1,0,2} multiply(%transpose.393, %transpose.393)
  %reduce.548 = f32[] reduce(%multiply.6873, %constant.5451), dimensions={0,1,2}, to_apply=%region_611.26195
  %all-reduce.45 = f32[] all-reduce(%reduce.548), channel_id=496, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_611.26195.clone
  %add.4783 = f32[] add(%add.4782, %all-reduce.45)
  %dot.568 = bf16[32,128,4096]{2,1,0} dot(%add.4335, %copy.2200), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.46 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.568), channel_id=497, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.19.clone
  %dynamic-slice.1129 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.46, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3160 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1129)
  %transpose.394 = f32[256,32,128]{0,2,1} transpose(%convert.3160), dimensions={2,0,1}
  %multiply.6874 = f32[256,32,128]{0,2,1} multiply(%transpose.394, %transpose.394)
  %reduce.549 = f32[] reduce(%multiply.6874, %constant.5451), dimensions={0,1,2}, to_apply=%region_612.26202
  %all-reduce.47 = f32[] all-reduce(%reduce.549), channel_id=498, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_612.26202.clone
  %add.4784 = f32[] add(%add.4783, %all-reduce.47)
  %dot.569 = bf16[8,128,4096]{2,1,0} dot(%copy.1999, %copy.2200), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.48 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.569), channel_id=499, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.20.clone
  %dynamic-slice.1131 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.48, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3161 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1131)
  %transpose.395 = f32[256,8,128]{0,2,1} transpose(%convert.3161), dimensions={2,0,1}
  %multiply.6875 = f32[256,8,128]{0,2,1} multiply(%transpose.395, %transpose.395)
  %reduce.550 = f32[] reduce(%multiply.6875, %constant.5451), dimensions={0,1,2}, to_apply=%region_613.26209
  %all-reduce.49 = f32[] all-reduce(%reduce.550), channel_id=500, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_613.26209.clone
  %add.4785 = f32[] add(%add.4784, %all-reduce.49)
  %multiply.6877 = f32[2,8192,4096]{2,1,0} multiply(%convert.2579, %broadcast.12423)
  %convert.3163 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6877)
  %multiply.6878 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3163, %broadcast.12416)
  %copy.2203 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6878)
  %dot.570 = bf16[4096,14336]{1,0} dot(%copy.2203, %add.4259), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.50 = bf16[4096,14336]{1,0} all-reduce(%dot.570), channel_id=501, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.21.clone
  %dynamic-slice.1133 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.50, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3164 = f32[256,14336]{0,1} convert(%dynamic-slice.1133)
  %multiply.6879 = f32[256,14336]{0,1} multiply(%convert.3164, %convert.3164)
  %reduce.551 = f32[] reduce(%multiply.6879, %constant.5451), dimensions={0,1}, to_apply=%region_614.26216
  %all-reduce.51 = f32[] all-reduce(%reduce.551), channel_id=502, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_614.26216.clone
  %add.4786 = f32[] add(%add.4785, %all-reduce.51)
  %dot.571 = bf16[4096,14336]{1,0} dot(%copy.2203, %multiply.5777), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.52 = bf16[4096,14336]{1,0} all-reduce(%dot.571), channel_id=503, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.22.clone
  %dynamic-slice.1135 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.52, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3165 = f32[256,14336]{0,1} convert(%dynamic-slice.1135)
  %multiply.6880 = f32[256,14336]{0,1} multiply(%convert.3165, %convert.3165)
  %reduce.552 = f32[] reduce(%multiply.6880, %constant.5451), dimensions={0,1}, to_apply=%region_615.26223
  %all-reduce.53 = f32[] all-reduce(%reduce.552), channel_id=504, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_615.26223.clone
  %add.4787 = f32[] add(%add.4786, %all-reduce.53)
  %multiply.6881 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5776, %get-tuple-element.920)
  %copy.2204 = bf16[2,8192,14336]{2,1,0} copy(%multiply.6881)
  %dot.572 = bf16[14336,4096]{1,0} dot(%copy.2204, %copy.1971), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.54 = bf16[14336,4096]{1,0} all-reduce(%dot.572), channel_id=505, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.23.clone
  %dynamic-slice.1137 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.54, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3166 = f32[14336,256]{0,1} convert(%dynamic-slice.1137)
  %multiply.6882 = f32[14336,256]{0,1} multiply(%convert.3166, %convert.3166)
  %reduce.553 = f32[] reduce(%multiply.6882, %constant.5451), dimensions={0,1}, to_apply=%region_616.26230
  %all-reduce.55 = f32[] all-reduce(%reduce.553), channel_id=506, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_616.26230.clone
  %add.4788 = f32[] add(%add.4787, %all-reduce.55)
  %multiply.6883 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3163, %copy.1973)
  %reduce.554 = bf16[4096]{0} reduce(%multiply.6883, %constant.10307), dimensions={0,1}, to_apply=%region_435.20429
  %all-reduce.56 = bf16[4096]{0} all-reduce(%reduce.554), channel_id=507, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_435.20429.clone
  %convert.3167 = f32[4096]{0} convert(%all-reduce.56)
  %multiply.6884 = f32[4096]{0} multiply(%convert.3167, %convert.3167)
  %reduce.555 = f32[] reduce(%multiply.6884, %constant.5451), dimensions={0}, to_apply=%region_617.26237
  %add.4789 = f32[] add(%add.4788, %reduce.555)
  %multiply.6885 = f32[2,8192,4096]{2,1,0} multiply(%convert.2617, %broadcast.12533)
  %convert.3168 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6885)
  %multiply.6886 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3168, %copy.1986)
  %reduce.556 = bf16[4096]{0} reduce(%multiply.6886, %constant.10307), dimensions={0,1}, to_apply=%region_439.20563
  %all-reduce.57 = bf16[4096]{0} all-reduce(%reduce.556), channel_id=508, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_439.20563.clone
  %convert.3169 = f32[4096]{0} convert(%all-reduce.57)
  %multiply.6887 = f32[4096]{0} multiply(%convert.3169, %convert.3169)
  %reduce.557 = f32[] reduce(%multiply.6887, %constant.5451), dimensions={0}, to_apply=%region_618.26244
  %add.4790 = f32[] add(%add.4789, %reduce.557)
  %multiply.6888 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3168, %broadcast.12530)
  %copy.2205 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6888)
  %copy.2206 = bf16[2,8192,4096]{2,1,0} copy(%copy.2205)
  %dot.573 = bf16[8,128,4096]{2,1,0} dot(%add.4289, %copy.2206), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.58 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.573), channel_id=509, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.24.clone
  %dynamic-slice.1139 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.58, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3170 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1139)
  %transpose.396 = f32[256,8,128]{0,2,1} transpose(%convert.3170), dimensions={2,0,1}
  %multiply.6889 = f32[256,8,128]{0,2,1} multiply(%transpose.396, %transpose.396)
  %reduce.558 = f32[] reduce(%multiply.6889, %constant.5451), dimensions={0,1,2}, to_apply=%region_619.26251
  %all-reduce.59 = f32[] all-reduce(%reduce.558), channel_id=510, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_619.26251.clone
  %add.4791 = f32[] add(%add.4790, %all-reduce.59)
  %copy.2207 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.933)
  %dot.574 = bf16[4096,32,128]{2,1,0} dot(%copy.1979, %copy.2207), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.60 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.574), channel_id=511, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.25.clone
  %dynamic-slice.1141 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.60, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3171 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1141)
  %transpose.397 = f32[32,128,256]{1,0,2} transpose(%convert.3171), dimensions={1,2,0}
  %multiply.6890 = f32[32,128,256]{1,0,2} multiply(%transpose.397, %transpose.397)
  %reduce.559 = f32[] reduce(%multiply.6890, %constant.5451), dimensions={0,1,2}, to_apply=%region_620.26258
  %all-reduce.61 = f32[] all-reduce(%reduce.559), channel_id=512, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_620.26258.clone
  %add.4792 = f32[] add(%add.4791, %all-reduce.61)
  %dot.575 = bf16[32,128,4096]{2,1,0} dot(%add.4294, %copy.2206), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.62 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.575), channel_id=513, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.26.clone
  %dynamic-slice.1143 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.62, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3172 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1143)
  %transpose.398 = f32[256,32,128]{0,2,1} transpose(%convert.3172), dimensions={2,0,1}
  %multiply.6891 = f32[256,32,128]{0,2,1} multiply(%transpose.398, %transpose.398)
  %reduce.560 = f32[] reduce(%multiply.6891, %constant.5451), dimensions={0,1,2}, to_apply=%region_621.26265
  %all-reduce.63 = f32[] all-reduce(%reduce.560), channel_id=514, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_621.26265.clone
  %add.4793 = f32[] add(%add.4792, %all-reduce.63)
  %dot.576 = bf16[8,128,4096]{2,1,0} dot(%copy.1981, %copy.2206), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.64 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.576), channel_id=515, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.27.clone
  %dynamic-slice.1145 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.64, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3173 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1145)
  %transpose.399 = f32[256,8,128]{0,2,1} transpose(%convert.3173), dimensions={2,0,1}
  %multiply.6892 = f32[256,8,128]{0,2,1} multiply(%transpose.399, %transpose.399)
  %reduce.561 = f32[] reduce(%multiply.6892, %constant.5451), dimensions={0,1,2}, to_apply=%region_622.26272
  %all-reduce.65 = f32[] all-reduce(%reduce.561), channel_id=516, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_622.26272.clone
  %add.4794 = f32[] add(%add.4793, %all-reduce.65)
  %multiply.6893 = f32[2,8192,4096]{2,1,0} multiply(%convert.2534, %broadcast.12305)
  %convert.3174 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6893)
  %multiply.6894 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3174, %broadcast.12301)
  %copy.2209 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6894)
  %dot.577 = bf16[4096,14336]{1,0} dot(%copy.2209, %add.4218), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.66 = bf16[4096,14336]{1,0} all-reduce(%dot.577), channel_id=517, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.28.clone
  %dynamic-slice.1147 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.66, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3175 = f32[256,14336]{0,1} convert(%dynamic-slice.1147)
  %multiply.6895 = f32[256,14336]{0,1} multiply(%convert.3175, %convert.3175)
  %reduce.562 = f32[] reduce(%multiply.6895, %constant.5451), dimensions={0,1}, to_apply=%region_623.26279
  %all-reduce.67 = f32[] all-reduce(%reduce.562), channel_id=518, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_623.26279.clone
  %add.4795 = f32[] add(%add.4794, %all-reduce.67)
  %dot.578 = bf16[4096,14336]{1,0} dot(%copy.2209, %multiply.5689), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.68 = bf16[4096,14336]{1,0} all-reduce(%dot.578), channel_id=519, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.29.clone
  %dynamic-slice.1149 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.68, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3176 = f32[256,14336]{0,1} convert(%dynamic-slice.1149)
  %multiply.6896 = f32[256,14336]{0,1} multiply(%convert.3176, %convert.3176)
  %reduce.563 = f32[] reduce(%multiply.6896, %constant.5451), dimensions={0,1}, to_apply=%region_624.26286
  %all-reduce.69 = f32[] all-reduce(%reduce.563), channel_id=520, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_624.26286.clone
  %add.4796 = f32[] add(%add.4795, %all-reduce.69)
  %multiply.6897 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5688, %get-tuple-element.887)
  %copy.2210 = bf16[2,8192,14336]{2,1,0} copy(%multiply.6897)
  %dot.579 = bf16[14336,4096]{1,0} dot(%copy.2210, %copy.1953), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.70 = bf16[14336,4096]{1,0} all-reduce(%dot.579), channel_id=521, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.30.clone
  %dynamic-slice.1151 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.70, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3177 = f32[14336,256]{0,1} convert(%dynamic-slice.1151)
  %multiply.6898 = f32[14336,256]{0,1} multiply(%convert.3177, %convert.3177)
  %reduce.564 = f32[] reduce(%multiply.6898, %constant.5451), dimensions={0,1}, to_apply=%region_625.26293
  %all-reduce.71 = f32[] all-reduce(%reduce.564), channel_id=522, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_625.26293.clone
  %add.4797 = f32[] add(%add.4796, %all-reduce.71)
  %multiply.6899 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3174, %copy.1955)
  %reduce.565 = bf16[4096]{0} reduce(%multiply.6899, %constant.10307), dimensions={0,1}, to_apply=%region_422.19937
  %all-reduce.72 = bf16[4096]{0} all-reduce(%reduce.565), channel_id=523, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_422.19937.clone
  %convert.3178 = f32[4096]{0} convert(%all-reduce.72)
  %multiply.6900 = f32[4096]{0} multiply(%convert.3178, %convert.3178)
  %reduce.566 = f32[] reduce(%multiply.6900, %constant.5451), dimensions={0}, to_apply=%region_626.26300
  %add.4798 = f32[] add(%add.4797, %reduce.566)
  %multiply.6901 = f32[2,8192,4096]{2,1,0} multiply(%convert.2572, %broadcast.12412)
  %convert.3179 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6901)
  %multiply.6902 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3179, %copy.1968)
  %reduce.567 = bf16[4096]{0} reduce(%multiply.6902, %constant.10307), dimensions={0,1}, to_apply=%region_426.20071
  %all-reduce.73 = bf16[4096]{0} all-reduce(%reduce.567), channel_id=524, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_426.20071.clone
  %convert.3180 = f32[4096]{0} convert(%all-reduce.73)
  %multiply.6903 = f32[4096]{0} multiply(%convert.3180, %convert.3180)
  %reduce.568 = f32[] reduce(%multiply.6903, %constant.5451), dimensions={0}, to_apply=%region_627.26307
  %add.4799 = f32[] add(%add.4798, %reduce.568)
  %multiply.6904 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3179, %broadcast.12409)
  %copy.2211 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6904)
  %copy.2212 = bf16[2,8192,4096]{2,1,0} copy(%copy.2211)
  %dot.580 = bf16[8,128,4096]{2,1,0} dot(%add.4248, %copy.2212), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.74 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.580), channel_id=525, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.31.clone
  %dynamic-slice.1153 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.74, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3182 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1153)
  %transpose.400 = f32[256,8,128]{0,2,1} transpose(%convert.3182), dimensions={2,0,1}
  %multiply.6905 = f32[256,8,128]{0,2,1} multiply(%transpose.400, %transpose.400)
  %reduce.569 = f32[] reduce(%multiply.6905, %constant.5451), dimensions={0,1,2}, to_apply=%region_628.26314
  %all-reduce.75 = f32[] all-reduce(%reduce.569), channel_id=526, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_628.26314.clone
  %add.4800 = f32[] add(%add.4799, %all-reduce.75)
  %copy.2213 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.900)
  %dot.581 = bf16[4096,32,128]{2,1,0} dot(%copy.1961, %copy.2213), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.76 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.581), channel_id=527, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.32.clone
  %dynamic-slice.1155 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.76, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3183 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1155)
  %transpose.401 = f32[32,128,256]{1,0,2} transpose(%convert.3183), dimensions={1,2,0}
  %multiply.6906 = f32[32,128,256]{1,0,2} multiply(%transpose.401, %transpose.401)
  %reduce.570 = f32[] reduce(%multiply.6906, %constant.5451), dimensions={0,1,2}, to_apply=%region_629.26321
  %all-reduce.77 = f32[] all-reduce(%reduce.570), channel_id=528, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_629.26321.clone
  %add.4801 = f32[] add(%add.4800, %all-reduce.77)
  %dot.582 = bf16[32,128,4096]{2,1,0} dot(%add.4253, %copy.2212), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.78 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.582), channel_id=529, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.33.clone
  %dynamic-slice.1157 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.78, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3184 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1157)
  %transpose.402 = f32[256,32,128]{0,2,1} transpose(%convert.3184), dimensions={2,0,1}
  %multiply.6907 = f32[256,32,128]{0,2,1} multiply(%transpose.402, %transpose.402)
  %reduce.571 = f32[] reduce(%multiply.6907, %constant.5451), dimensions={0,1,2}, to_apply=%region_630.26328
  %all-reduce.79 = f32[] all-reduce(%reduce.571), channel_id=530, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_630.26328.clone
  %add.4802 = f32[] add(%add.4801, %all-reduce.79)
  %dot.583 = bf16[8,128,4096]{2,1,0} dot(%copy.1963, %copy.2212), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.80 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.583), channel_id=531, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.34.clone
  %dynamic-slice.1159 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.80, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3185 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1159)
  %transpose.403 = f32[256,8,128]{0,2,1} transpose(%convert.3185), dimensions={2,0,1}
  %multiply.6908 = f32[256,8,128]{0,2,1} multiply(%transpose.403, %transpose.403)
  %reduce.572 = f32[] reduce(%multiply.6908, %constant.5451), dimensions={0,1,2}, to_apply=%region_631.26335
  %all-reduce.81 = f32[] all-reduce(%reduce.572), channel_id=532, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_631.26335.clone
  %add.4804 = f32[] add(%add.4802, %all-reduce.81)
  %multiply.6909 = f32[2,8192,4096]{2,1,0} multiply(%convert.2486, %broadcast.12198)
  %convert.3186 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6909)
  %multiply.6910 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3186, %broadcast.12195)
  %copy.2215 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6910)
  %dot.584 = bf16[4096,14336]{1,0} dot(%copy.2215, %add.4176), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.82 = bf16[4096,14336]{1,0} all-reduce(%dot.584), channel_id=533, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.35.clone
  %dynamic-slice.1161 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.82, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3187 = f32[256,14336]{0,1} convert(%dynamic-slice.1161)
  %multiply.6911 = f32[256,14336]{0,1} multiply(%convert.3187, %convert.3187)
  %reduce.573 = f32[] reduce(%multiply.6911, %constant.5451), dimensions={0,1}, to_apply=%region_632.26342
  %all-reduce.83 = f32[] all-reduce(%reduce.573), channel_id=534, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_632.26342.clone
  %add.4805 = f32[] add(%add.4804, %all-reduce.83)
  %dot.585 = bf16[4096,14336]{1,0} dot(%copy.2215, %multiply.5601), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.84 = bf16[4096,14336]{1,0} all-reduce(%dot.585), channel_id=535, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.36.clone
  %dynamic-slice.1163 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.84, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3188 = f32[256,14336]{0,1} convert(%dynamic-slice.1163)
  %multiply.6912 = f32[256,14336]{0,1} multiply(%convert.3188, %convert.3188)
  %reduce.574 = f32[] reduce(%multiply.6912, %constant.5451), dimensions={0,1}, to_apply=%region_633.26349
  %all-reduce.85 = f32[] all-reduce(%reduce.574), channel_id=536, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_633.26349.clone
  %add.4806 = f32[] add(%add.4805, %all-reduce.85)
  %multiply.6913 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5600, %get-tuple-element.854)
  %copy.2216 = bf16[2,8192,14336]{2,1,0} copy(%multiply.6913)
  %dot.586 = bf16[14336,4096]{1,0} dot(%copy.2216, %copy.1935), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.86 = bf16[14336,4096]{1,0} all-reduce(%dot.586), channel_id=537, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.37.clone
  %dynamic-slice.1165 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.86, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3190 = f32[14336,256]{0,1} convert(%dynamic-slice.1165)
  %multiply.6914 = f32[14336,256]{0,1} multiply(%convert.3190, %convert.3190)
  %reduce.575 = f32[] reduce(%multiply.6914, %constant.5451), dimensions={0,1}, to_apply=%region_634.26356
  %all-reduce.87 = f32[] all-reduce(%reduce.575), channel_id=538, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_634.26356.clone
  %add.4807 = f32[] add(%add.4806, %all-reduce.87)
  %multiply.6915 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3186, %copy.1937)
  %reduce.576 = bf16[4096]{0} reduce(%multiply.6915, %constant.10307), dimensions={0,1}, to_apply=%region_409.19445
  %all-reduce.88 = bf16[4096]{0} all-reduce(%reduce.576), channel_id=539, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_409.19445.clone
  %convert.3192 = f32[4096]{0} convert(%all-reduce.88)
  %multiply.6916 = f32[4096]{0} multiply(%convert.3192, %convert.3192)
  %reduce.577 = f32[] reduce(%multiply.6916, %constant.5451), dimensions={0}, to_apply=%region_635.26363
  %add.4808 = f32[] add(%add.4807, %reduce.577)
  %multiply.6917 = f32[2,8192,4096]{2,1,0} multiply(%convert.2527, %broadcast.12297)
  %convert.3193 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6917)
  %multiply.6918 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3193, %copy.1950)
  %reduce.578 = bf16[4096]{0} reduce(%multiply.6918, %constant.10307), dimensions={0,1}, to_apply=%region_413.19579
  %all-reduce.89 = bf16[4096]{0} all-reduce(%reduce.578), channel_id=540, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_413.19579.clone
  %convert.3194 = f32[4096]{0} convert(%all-reduce.89)
  %multiply.6919 = f32[4096]{0} multiply(%convert.3194, %convert.3194)
  %reduce.579 = f32[] reduce(%multiply.6919, %constant.5451), dimensions={0}, to_apply=%region_636.26370
  %add.4809 = f32[] add(%add.4808, %reduce.579)
  %multiply.6920 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3193, %broadcast.12294)
  %copy.2217 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6920)
  %copy.2218 = bf16[2,8192,4096]{2,1,0} copy(%copy.2217)
  %dot.587 = bf16[8,128,4096]{2,1,0} dot(%add.4207, %copy.2218), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.90 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.587), channel_id=541, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.38.clone
  %dynamic-slice.1167 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.90, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3195 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1167)
  %transpose.404 = f32[256,8,128]{0,2,1} transpose(%convert.3195), dimensions={2,0,1}
  %multiply.6921 = f32[256,8,128]{0,2,1} multiply(%transpose.404, %transpose.404)
  %reduce.580 = f32[] reduce(%multiply.6921, %constant.5451), dimensions={0,1,2}, to_apply=%region_637.26377
  %all-reduce.91 = f32[] all-reduce(%reduce.580), channel_id=542, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_637.26377.clone
  %add.4810 = f32[] add(%add.4809, %all-reduce.91)
  %copy.2219 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.867)
  %dot.588 = bf16[4096,32,128]{2,1,0} dot(%copy.1943, %copy.2219), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.92 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.588), channel_id=543, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.39.clone
  %dynamic-slice.1169 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.92, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3196 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1169)
  %transpose.405 = f32[32,128,256]{1,0,2} transpose(%convert.3196), dimensions={1,2,0}
  %multiply.6922 = f32[32,128,256]{1,0,2} multiply(%transpose.405, %transpose.405)
  %reduce.581 = f32[] reduce(%multiply.6922, %constant.5451), dimensions={0,1,2}, to_apply=%region_638.26384
  %all-reduce.93 = f32[] all-reduce(%reduce.581), channel_id=544, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_638.26384.clone
  %add.4811 = f32[] add(%add.4810, %all-reduce.93)
  %dot.589 = bf16[32,128,4096]{2,1,0} dot(%add.4212, %copy.2218), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.94 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.589), channel_id=545, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.40.clone
  %dynamic-slice.1171 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.94, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3197 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1171)
  %transpose.406 = f32[256,32,128]{0,2,1} transpose(%convert.3197), dimensions={2,0,1}
  %multiply.6923 = f32[256,32,128]{0,2,1} multiply(%transpose.406, %transpose.406)
  %reduce.582 = f32[] reduce(%multiply.6923, %constant.5451), dimensions={0,1,2}, to_apply=%region_639.26391
  %all-reduce.95 = f32[] all-reduce(%reduce.582), channel_id=546, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_639.26391.clone
  %add.4812 = f32[] add(%add.4811, %all-reduce.95)
  %dot.590 = bf16[8,128,4096]{2,1,0} dot(%copy.1945, %copy.2218), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.96 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.590), channel_id=547, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.41.clone
  %dynamic-slice.1173 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.96, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3198 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1173)
  %transpose.407 = f32[256,8,128]{0,2,1} transpose(%convert.3198), dimensions={2,0,1}
  %multiply.6924 = f32[256,8,128]{0,2,1} multiply(%transpose.407, %transpose.407)
  %reduce.583 = f32[] reduce(%multiply.6924, %constant.5451), dimensions={0,1,2}, to_apply=%region_640.26398
  %all-reduce.97 = f32[] all-reduce(%reduce.583), channel_id=548, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_640.26398.clone
  %add.4813 = f32[] add(%add.4812, %all-reduce.97)
  %multiply.6925 = f32[2,8192,4096]{2,1,0} multiply(%convert.2439, %broadcast.12087)
  %convert.3199 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6925)
  %multiply.6926 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3199, %broadcast.12083)
  %copy.2221 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6926)
  %dot.591 = bf16[4096,14336]{1,0} dot(%copy.2221, %add.4132), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.98 = bf16[4096,14336]{1,0} all-reduce(%dot.591), channel_id=549, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.42.clone
  %dynamic-slice.1175 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.98, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3200 = f32[256,14336]{0,1} convert(%dynamic-slice.1175)
  %multiply.6927 = f32[256,14336]{0,1} multiply(%convert.3200, %convert.3200)
  %reduce.584 = f32[] reduce(%multiply.6927, %constant.5451), dimensions={0,1}, to_apply=%region_641.26405
  %all-reduce.99 = f32[] all-reduce(%reduce.584), channel_id=550, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_641.26405.clone
  %add.4814 = f32[] add(%add.4813, %all-reduce.99)
  %dot.592 = bf16[4096,14336]{1,0} dot(%copy.2221, %multiply.5512), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.100 = bf16[4096,14336]{1,0} all-reduce(%dot.592), channel_id=551, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.43.clone
  %dynamic-slice.1177 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.100, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3201 = f32[256,14336]{0,1} convert(%dynamic-slice.1177)
  %multiply.6928 = f32[256,14336]{0,1} multiply(%convert.3201, %convert.3201)
  %reduce.585 = f32[] reduce(%multiply.6928, %constant.5451), dimensions={0,1}, to_apply=%region_642.26412
  %all-reduce.101 = f32[] all-reduce(%reduce.585), channel_id=552, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_642.26412.clone
  %add.4815 = f32[] add(%add.4814, %all-reduce.101)
  %multiply.6929 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5511, %get-tuple-element.821)
  %copy.2222 = bf16[2,8192,14336]{2,1,0} copy(%multiply.6929)
  %dot.593 = bf16[14336,4096]{1,0} dot(%copy.2222, %copy.1917), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.102 = bf16[14336,4096]{1,0} all-reduce(%dot.593), channel_id=553, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.44.clone
  %dynamic-slice.1179 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.102, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3202 = f32[14336,256]{0,1} convert(%dynamic-slice.1179)
  %multiply.6930 = f32[14336,256]{0,1} multiply(%convert.3202, %convert.3202)
  %reduce.586 = f32[] reduce(%multiply.6930, %constant.5451), dimensions={0,1}, to_apply=%region_643.26419
  %all-reduce.103 = f32[] all-reduce(%reduce.586), channel_id=554, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_643.26419.clone
  %add.4816 = f32[] add(%add.4815, %all-reduce.103)
  %multiply.6931 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3199, %copy.1919)
  %reduce.587 = bf16[4096]{0} reduce(%multiply.6931, %constant.10307), dimensions={0,1}, to_apply=%region_396.18953
  %all-reduce.104 = bf16[4096]{0} all-reduce(%reduce.587), channel_id=555, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_396.18953.clone
  %convert.3203 = f32[4096]{0} convert(%all-reduce.104)
  %multiply.6932 = f32[4096]{0} multiply(%convert.3203, %convert.3203)
  %reduce.588 = f32[] reduce(%multiply.6932, %constant.5451), dimensions={0}, to_apply=%region_644.26426
  %add.4817 = f32[] add(%add.4816, %reduce.588)
  %multiply.6933 = f32[2,8192,4096]{2,1,0} multiply(%convert.2477, %broadcast.12191)
  %convert.3204 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6933)
  %multiply.6934 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3204, %copy.1932)
  %reduce.589 = bf16[4096]{0} reduce(%multiply.6934, %constant.10307), dimensions={0,1}, to_apply=%region_400.19087
  %all-reduce.105 = bf16[4096]{0} all-reduce(%reduce.589), channel_id=556, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_400.19087.clone
  %convert.3205 = f32[4096]{0} convert(%all-reduce.105)
  %multiply.6935 = f32[4096]{0} multiply(%convert.3205, %convert.3205)
  %reduce.590 = f32[] reduce(%multiply.6935, %constant.5451), dimensions={0}, to_apply=%region_645.26433
  %add.4818 = f32[] add(%add.4817, %reduce.590)
  %multiply.6937 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3204, %broadcast.12188)
  %copy.2223 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6937)
  %copy.2224 = bf16[2,8192,4096]{2,1,0} copy(%copy.2223)
  %dot.594 = bf16[8,128,4096]{2,1,0} dot(%add.4164, %copy.2224), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.106 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.594), channel_id=557, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.45.clone
  %dynamic-slice.1181 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.106, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3206 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1181)
  %transpose.408 = f32[256,8,128]{0,2,1} transpose(%convert.3206), dimensions={2,0,1}
  %multiply.6938 = f32[256,8,128]{0,2,1} multiply(%transpose.408, %transpose.408)
  %reduce.591 = f32[] reduce(%multiply.6938, %constant.5451), dimensions={0,1,2}, to_apply=%region_646.26440
  %all-reduce.107 = f32[] all-reduce(%reduce.591), channel_id=558, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_646.26440.clone
  %add.4819 = f32[] add(%add.4818, %all-reduce.107)
  %copy.2225 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.834)
  %dot.595 = bf16[4096,32,128]{2,1,0} dot(%copy.1925, %copy.2225), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.108 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.595), channel_id=559, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.46.clone
  %dynamic-slice.1183 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.108, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3208 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1183)
  %transpose.409 = f32[32,128,256]{1,0,2} transpose(%convert.3208), dimensions={1,2,0}
  %multiply.6939 = f32[32,128,256]{1,0,2} multiply(%transpose.409, %transpose.409)
  %reduce.592 = f32[] reduce(%multiply.6939, %constant.5451), dimensions={0,1,2}, to_apply=%region_647.26447
  %all-reduce.109 = f32[] all-reduce(%reduce.592), channel_id=560, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_647.26447.clone
  %add.4820 = f32[] add(%add.4819, %all-reduce.109)
  %dot.596 = bf16[32,128,4096]{2,1,0} dot(%add.4169, %copy.2224), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.110 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.596), channel_id=561, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.47.clone
  %dynamic-slice.1185 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.110, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3209 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1185)
  %transpose.410 = f32[256,32,128]{0,2,1} transpose(%convert.3209), dimensions={2,0,1}
  %multiply.6940 = f32[256,32,128]{0,2,1} multiply(%transpose.410, %transpose.410)
  %reduce.593 = f32[] reduce(%multiply.6940, %constant.5451), dimensions={0,1,2}, to_apply=%region_648.26454
  %all-reduce.111 = f32[] all-reduce(%reduce.593), channel_id=562, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_648.26454.clone
  %add.4821 = f32[] add(%add.4820, %all-reduce.111)
  %dot.597 = bf16[8,128,4096]{2,1,0} dot(%copy.1927, %copy.2224), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.112 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.597), channel_id=563, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.48.clone
  %dynamic-slice.1187 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.112, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3210 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1187)
  %transpose.411 = f32[256,8,128]{0,2,1} transpose(%convert.3210), dimensions={2,0,1}
  %multiply.6941 = f32[256,8,128]{0,2,1} multiply(%transpose.411, %transpose.411)
  %reduce.594 = f32[] reduce(%multiply.6941, %constant.5451), dimensions={0,1,2}, to_apply=%region_649.26461
  %all-reduce.113 = f32[] all-reduce(%reduce.594), channel_id=564, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_649.26461.clone
  %add.4822 = f32[] add(%add.4821, %all-reduce.113)
  %multiply.6942 = f32[2,8192,4096]{2,1,0} multiply(%convert.2395, %broadcast.11983)
  %convert.3211 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6942)
  %multiply.6943 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3211, %broadcast.11980)
  %copy.2227 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6943)
  %dot.598 = bf16[4096,14336]{1,0} dot(%copy.2227, %add.4090), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.114 = bf16[4096,14336]{1,0} all-reduce(%dot.598), channel_id=565, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.49.clone
  %dynamic-slice.1189 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.114, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3212 = f32[256,14336]{0,1} convert(%dynamic-slice.1189)
  %multiply.6944 = f32[256,14336]{0,1} multiply(%convert.3212, %convert.3212)
  %reduce.595 = f32[] reduce(%multiply.6944, %constant.5451), dimensions={0,1}, to_apply=%region_650.26468
  %all-reduce.115 = f32[] all-reduce(%reduce.595), channel_id=566, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_650.26468.clone
  %add.4823 = f32[] add(%add.4822, %all-reduce.115)
  %dot.599 = bf16[4096,14336]{1,0} dot(%copy.2227, %multiply.5425), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.116 = bf16[4096,14336]{1,0} all-reduce(%dot.599), channel_id=567, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.50.clone
  %dynamic-slice.1191 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.116, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3213 = f32[256,14336]{0,1} convert(%dynamic-slice.1191)
  %multiply.6945 = f32[256,14336]{0,1} multiply(%convert.3213, %convert.3213)
  %reduce.596 = f32[] reduce(%multiply.6945, %constant.5451), dimensions={0,1}, to_apply=%region_651.26475
  %all-reduce.117 = f32[] all-reduce(%reduce.596), channel_id=568, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_651.26475.clone
  %add.4824 = f32[] add(%add.4823, %all-reduce.117)
  %multiply.6946 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5424, %get-tuple-element.788)
  %copy.2228 = bf16[2,8192,14336]{2,1,0} copy(%multiply.6946)
  %dot.600 = bf16[14336,4096]{1,0} dot(%copy.2228, %copy.1899), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.118 = bf16[14336,4096]{1,0} all-reduce(%dot.600), channel_id=569, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.51.clone
  %dynamic-slice.1193 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.118, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3214 = f32[14336,256]{0,1} convert(%dynamic-slice.1193)
  %multiply.6947 = f32[14336,256]{0,1} multiply(%convert.3214, %convert.3214)
  %reduce.597 = f32[] reduce(%multiply.6947, %constant.5451), dimensions={0,1}, to_apply=%region_652.26482
  %all-reduce.119 = f32[] all-reduce(%reduce.597), channel_id=570, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_652.26482.clone
  %add.4825 = f32[] add(%add.4824, %all-reduce.119)
  %multiply.6948 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3211, %copy.1901)
  %reduce.598 = bf16[4096]{0} reduce(%multiply.6948, %constant.10307), dimensions={0,1}, to_apply=%region_383.18461
  %all-reduce.120 = bf16[4096]{0} all-reduce(%reduce.598), channel_id=571, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_383.18461.clone
  %convert.3215 = f32[4096]{0} convert(%all-reduce.120)
  %multiply.6950 = f32[4096]{0} multiply(%convert.3215, %convert.3215)
  %reduce.599 = f32[] reduce(%multiply.6950, %constant.5451), dimensions={0}, to_apply=%region_653.26489
  %add.4826 = f32[] add(%add.4825, %reduce.599)
  %multiply.6951 = f32[2,8192,4096]{2,1,0} multiply(%convert.2431, %broadcast.12079)
  %convert.3216 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6951)
  %multiply.6952 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3216, %copy.1914)
  %reduce.600 = bf16[4096]{0} reduce(%multiply.6952, %constant.10307), dimensions={0,1}, to_apply=%region_387.18595
  %all-reduce.121 = bf16[4096]{0} all-reduce(%reduce.600), channel_id=572, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_387.18595.clone
  %convert.3217 = f32[4096]{0} convert(%all-reduce.121)
  %multiply.6953 = f32[4096]{0} multiply(%convert.3217, %convert.3217)
  %reduce.601 = f32[] reduce(%multiply.6953, %constant.5451), dimensions={0}, to_apply=%region_654.26496
  %add.4827 = f32[] add(%add.4826, %reduce.601)
  %multiply.6954 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3216, %broadcast.12076)
  %copy.2229 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6954)
  %copy.2230 = bf16[2,8192,4096]{2,1,0} copy(%copy.2229)
  %dot.601 = bf16[8,128,4096]{2,1,0} dot(%add.4121, %copy.2230), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.122 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.601), channel_id=573, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.52.clone
  %dynamic-slice.1195 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.122, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3218 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1195)
  %transpose.412 = f32[256,8,128]{0,2,1} transpose(%convert.3218), dimensions={2,0,1}
  %multiply.6955 = f32[256,8,128]{0,2,1} multiply(%transpose.412, %transpose.412)
  %reduce.602 = f32[] reduce(%multiply.6955, %constant.5451), dimensions={0,1,2}, to_apply=%region_655.26503
  %all-reduce.123 = f32[] all-reduce(%reduce.602), channel_id=574, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_655.26503.clone
  %add.4828 = f32[] add(%add.4827, %all-reduce.123)
  %copy.2231 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.801)
  %dot.602 = bf16[4096,32,128]{2,1,0} dot(%copy.1907, %copy.2231), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.124 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.602), channel_id=575, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.53.clone
  %dynamic-slice.1197 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.124, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3219 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1197)
  %transpose.413 = f32[32,128,256]{1,0,2} transpose(%convert.3219), dimensions={1,2,0}
  %multiply.6957 = f32[32,128,256]{1,0,2} multiply(%transpose.413, %transpose.413)
  %reduce.603 = f32[] reduce(%multiply.6957, %constant.5451), dimensions={0,1,2}, to_apply=%region_656.26510
  %all-reduce.125 = f32[] all-reduce(%reduce.603), channel_id=576, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_656.26510.clone
  %add.4829 = f32[] add(%add.4828, %all-reduce.125)
  %dot.603 = bf16[32,128,4096]{2,1,0} dot(%add.4126, %copy.2230), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.126 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.603), channel_id=577, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.54.clone
  %dynamic-slice.1199 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.126, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3220 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1199)
  %transpose.414 = f32[256,32,128]{0,2,1} transpose(%convert.3220), dimensions={2,0,1}
  %multiply.6958 = f32[256,32,128]{0,2,1} multiply(%transpose.414, %transpose.414)
  %reduce.604 = f32[] reduce(%multiply.6958, %constant.5451), dimensions={0,1,2}, to_apply=%region_657.26517
  %all-reduce.127 = f32[] all-reduce(%reduce.604), channel_id=578, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_657.26517.clone
  %add.4830 = f32[] add(%add.4829, %all-reduce.127)
  %dot.604 = bf16[8,128,4096]{2,1,0} dot(%copy.1909, %copy.2230), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.128 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.604), channel_id=579, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.55.clone
  %dynamic-slice.1201 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.128, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3222 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1201)
  %transpose.415 = f32[256,8,128]{0,2,1} transpose(%convert.3222), dimensions={2,0,1}
  %multiply.6959 = f32[256,8,128]{0,2,1} multiply(%transpose.415, %transpose.415)
  %reduce.605 = f32[] reduce(%multiply.6959, %constant.5451), dimensions={0,1,2}, to_apply=%region_658.26524
  %all-reduce.129 = f32[] all-reduce(%reduce.605), channel_id=580, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_658.26524.clone
  %add.4831 = f32[] add(%add.4830, %all-reduce.129)
  %multiply.6960 = f32[2,8192,4096]{2,1,0} multiply(%convert.2348, %broadcast.11855)
  %convert.3223 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6960)
  %multiply.6961 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3223, %broadcast.11849)
  %copy.2233 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6961)
  %dot.605 = bf16[4096,14336]{1,0} dot(%copy.2233, %add.4049), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.130 = bf16[4096,14336]{1,0} all-reduce(%dot.605), channel_id=581, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.56.clone
  %dynamic-slice.1203 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.130, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3224 = f32[256,14336]{0,1} convert(%dynamic-slice.1203)
  %multiply.6962 = f32[256,14336]{0,1} multiply(%convert.3224, %convert.3224)
  %reduce.606 = f32[] reduce(%multiply.6962, %constant.5451), dimensions={0,1}, to_apply=%region_659.26531
  %all-reduce.131 = f32[] all-reduce(%reduce.606), channel_id=582, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_659.26531.clone
  %add.4832 = f32[] add(%add.4831, %all-reduce.131)
  %dot.606 = bf16[4096,14336]{1,0} dot(%copy.2233, %multiply.5336), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.132 = bf16[4096,14336]{1,0} all-reduce(%dot.606), channel_id=583, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.57.clone
  %dynamic-slice.1205 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.132, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3225 = f32[256,14336]{0,1} convert(%dynamic-slice.1205)
  %multiply.6963 = f32[256,14336]{0,1} multiply(%convert.3225, %convert.3225)
  %reduce.607 = f32[] reduce(%multiply.6963, %constant.5451), dimensions={0,1}, to_apply=%region_660.26538
  %all-reduce.133 = f32[] all-reduce(%reduce.607), channel_id=584, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_660.26538.clone
  %add.4833 = f32[] add(%add.4832, %all-reduce.133)
  %multiply.6964 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5335, %get-tuple-element.755)
  %copy.2234 = bf16[2,8192,14336]{2,1,0} copy(%multiply.6964)
  %dot.607 = bf16[14336,4096]{1,0} dot(%copy.2234, %copy.1881), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.134 = bf16[14336,4096]{1,0} all-reduce(%dot.607), channel_id=585, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.58.clone
  %dynamic-slice.1207 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.134, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3227 = f32[14336,256]{0,1} convert(%dynamic-slice.1207)
  %multiply.6966 = f32[14336,256]{0,1} multiply(%convert.3227, %convert.3227)
  %reduce.608 = f32[] reduce(%multiply.6966, %constant.5451), dimensions={0,1}, to_apply=%region_661.26545
  %all-reduce.135 = f32[] all-reduce(%reduce.608), channel_id=586, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_661.26545.clone
  %add.4834 = f32[] add(%add.4833, %all-reduce.135)
  %multiply.6967 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3223, %copy.1883)
  %reduce.609 = bf16[4096]{0} reduce(%multiply.6967, %constant.10307), dimensions={0,1}, to_apply=%region_370.17969
  %all-reduce.136 = bf16[4096]{0} all-reduce(%reduce.609), channel_id=587, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_370.17969.clone
  %convert.3228 = f32[4096]{0} convert(%all-reduce.136)
  %multiply.6968 = f32[4096]{0} multiply(%convert.3228, %convert.3228)
  %reduce.610 = f32[] reduce(%multiply.6968, %constant.5451), dimensions={0}, to_apply=%region_662.26552
  %add.4835 = f32[] add(%add.4834, %reduce.610)
  %multiply.6969 = f32[2,8192,4096]{2,1,0} multiply(%convert.2387, %broadcast.11974)
  %convert.3229 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6969)
  %multiply.6970 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3229, %copy.1896)
  %reduce.611 = bf16[4096]{0} reduce(%multiply.6970, %constant.10307), dimensions={0,1}, to_apply=%region_374.18103
  %all-reduce.137 = bf16[4096]{0} all-reduce(%reduce.611), channel_id=588, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_374.18103.clone
  %convert.3230 = f32[4096]{0} convert(%all-reduce.137)
  %multiply.6971 = f32[4096]{0} multiply(%convert.3230, %convert.3230)
  %reduce.612 = f32[] reduce(%multiply.6971, %constant.5451), dimensions={0}, to_apply=%region_663.26559
  %add.4836 = f32[] add(%add.4835, %reduce.612)
  %multiply.6972 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3229, %broadcast.11969)
  %copy.2235 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6972)
  %copy.2236 = bf16[2,8192,4096]{2,1,0} copy(%copy.2235)
  %dot.608 = bf16[8,128,4096]{2,1,0} dot(%add.4079, %copy.2236), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.138 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.608), channel_id=589, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.59.clone
  %dynamic-slice.1209 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.138, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3232 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1209)
  %transpose.416 = f32[256,8,128]{0,2,1} transpose(%convert.3232), dimensions={2,0,1}
  %multiply.6973 = f32[256,8,128]{0,2,1} multiply(%transpose.416, %transpose.416)
  %reduce.613 = f32[] reduce(%multiply.6973, %constant.5451), dimensions={0,1,2}, to_apply=%region_664.26566
  %all-reduce.139 = f32[] all-reduce(%reduce.613), channel_id=590, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_664.26566.clone
  %add.4837 = f32[] add(%add.4836, %all-reduce.139)
  %copy.2237 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.768)
  %dot.609 = bf16[4096,32,128]{2,1,0} dot(%copy.1889, %copy.2237), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.140 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.609), channel_id=591, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.60.clone
  %dynamic-slice.1211 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.140, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3233 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1211)
  %transpose.417 = f32[32,128,256]{1,0,2} transpose(%convert.3233), dimensions={1,2,0}
  %multiply.6975 = f32[32,128,256]{1,0,2} multiply(%transpose.417, %transpose.417)
  %reduce.614 = f32[] reduce(%multiply.6975, %constant.5451), dimensions={0,1,2}, to_apply=%region_665.26573
  %all-reduce.141 = f32[] all-reduce(%reduce.614), channel_id=592, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_665.26573.clone
  %add.4838 = f32[] add(%add.4837, %all-reduce.141)
  %dot.610 = bf16[32,128,4096]{2,1,0} dot(%add.4084, %copy.2236), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.142 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.610), channel_id=593, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.61.clone
  %dynamic-slice.1213 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.142, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3234 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1213)
  %transpose.418 = f32[256,32,128]{0,2,1} transpose(%convert.3234), dimensions={2,0,1}
  %multiply.6976 = f32[256,32,128]{0,2,1} multiply(%transpose.418, %transpose.418)
  %reduce.615 = f32[] reduce(%multiply.6976, %constant.5451), dimensions={0,1,2}, to_apply=%region_666.26580
  %all-reduce.143 = f32[] all-reduce(%reduce.615), channel_id=594, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_666.26580.clone
  %add.4839 = f32[] add(%add.4838, %all-reduce.143)
  %dot.611 = bf16[8,128,4096]{2,1,0} dot(%copy.1891, %copy.2236), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.144 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.611), channel_id=595, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.62.clone
  %dynamic-slice.1215 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.144, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3235 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1215)
  %transpose.419 = f32[256,8,128]{0,2,1} transpose(%convert.3235), dimensions={2,0,1}
  %multiply.6977 = f32[256,8,128]{0,2,1} multiply(%transpose.419, %transpose.419)
  %reduce.616 = f32[] reduce(%multiply.6977, %constant.5451), dimensions={0,1,2}, to_apply=%region_667.26587
  %all-reduce.145 = f32[] all-reduce(%reduce.616), channel_id=596, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_667.26587.clone
  %add.4840 = f32[] add(%add.4839, %all-reduce.145)
  %multiply.6978 = f32[2,8192,4096]{2,1,0} multiply(%convert.2302, %broadcast.11747)
  %convert.3236 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6978)
  %multiply.6979 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3236, %broadcast.11744)
  %copy.2239 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6979)
  %dot.612 = bf16[4096,14336]{1,0} dot(%copy.2239, %add.4008), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.146 = bf16[4096,14336]{1,0} all-reduce(%dot.612), channel_id=597, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.63.clone
  %dynamic-slice.1217 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.146, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3237 = f32[256,14336]{0,1} convert(%dynamic-slice.1217)
  %multiply.6980 = f32[256,14336]{0,1} multiply(%convert.3237, %convert.3237)
  %reduce.617 = f32[] reduce(%multiply.6980, %constant.5451), dimensions={0,1}, to_apply=%region_668.26594
  %all-reduce.147 = f32[] all-reduce(%reduce.617), channel_id=598, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_668.26594.clone
  %add.4842 = f32[] add(%add.4840, %all-reduce.147)
  %dot.613 = bf16[4096,14336]{1,0} dot(%copy.2239, %multiply.5247), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.148 = bf16[4096,14336]{1,0} all-reduce(%dot.613), channel_id=599, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.64.clone
  %dynamic-slice.1219 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.148, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3239 = f32[256,14336]{0,1} convert(%dynamic-slice.1219)
  %multiply.6981 = f32[256,14336]{0,1} multiply(%convert.3239, %convert.3239)
  %reduce.618 = f32[] reduce(%multiply.6981, %constant.5451), dimensions={0,1}, to_apply=%region_669.26601
  %all-reduce.149 = f32[] all-reduce(%reduce.618), channel_id=600, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_669.26601.clone
  %add.4843 = f32[] add(%add.4842, %all-reduce.149)
  %multiply.6982 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5246, %get-tuple-element.722)
  %copy.2240 = bf16[2,8192,14336]{2,1,0} copy(%multiply.6982)
  %dot.614 = bf16[14336,4096]{1,0} dot(%copy.2240, %copy.1863), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.150 = bf16[14336,4096]{1,0} all-reduce(%dot.614), channel_id=601, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.65.clone
  %dynamic-slice.1221 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.150, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3240 = f32[14336,256]{0,1} convert(%dynamic-slice.1221)
  %multiply.6983 = f32[14336,256]{0,1} multiply(%convert.3240, %convert.3240)
  %reduce.619 = f32[] reduce(%multiply.6983, %constant.5451), dimensions={0,1}, to_apply=%region_670.26608
  %all-reduce.151 = f32[] all-reduce(%reduce.619), channel_id=602, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_670.26608.clone
  %add.4844 = f32[] add(%add.4843, %all-reduce.151)
  %multiply.6984 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3236, %copy.1865)
  %reduce.620 = bf16[4096]{0} reduce(%multiply.6984, %constant.10307), dimensions={0,1}, to_apply=%region_357.17477
  %all-reduce.152 = bf16[4096]{0} all-reduce(%reduce.620), channel_id=603, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_357.17477.clone
  %convert.3241 = f32[4096]{0} convert(%all-reduce.152)
  %multiply.6985 = f32[4096]{0} multiply(%convert.3241, %convert.3241)
  %reduce.621 = f32[] reduce(%multiply.6985, %constant.5451), dimensions={0}, to_apply=%region_671.26615
  %add.4845 = f32[] add(%add.4844, %reduce.621)
  %multiply.6986 = f32[2,8192,4096]{2,1,0} multiply(%convert.2340, %broadcast.11844)
  %convert.3242 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6986)
  %multiply.6988 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3242, %copy.1878)
  %reduce.622 = bf16[4096]{0} reduce(%multiply.6988, %constant.10307), dimensions={0,1}, to_apply=%region_361.17611
  %all-reduce.153 = bf16[4096]{0} all-reduce(%reduce.622), channel_id=604, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_361.17611.clone
  %convert.3243 = f32[4096]{0} convert(%all-reduce.153)
  %multiply.6989 = f32[4096]{0} multiply(%convert.3243, %convert.3243)
  %reduce.623 = f32[] reduce(%multiply.6989, %constant.5451), dimensions={0}, to_apply=%region_672.26622
  %add.4846 = f32[] add(%add.4845, %reduce.623)
  %multiply.6990 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3242, %broadcast.11841)
  %copy.2241 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6990)
  %copy.2242 = bf16[2,8192,4096]{2,1,0} copy(%copy.2241)
  %dot.615 = bf16[8,128,4096]{2,1,0} dot(%add.4037, %copy.2242), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.154 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.615), channel_id=605, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.66.clone
  %dynamic-slice.1223 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.154, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3244 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1223)
  %transpose.420 = f32[256,8,128]{0,2,1} transpose(%convert.3244), dimensions={2,0,1}
  %multiply.6991 = f32[256,8,128]{0,2,1} multiply(%transpose.420, %transpose.420)
  %reduce.624 = f32[] reduce(%multiply.6991, %constant.5451), dimensions={0,1,2}, to_apply=%region_673.26629
  %all-reduce.155 = f32[] all-reduce(%reduce.624), channel_id=606, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_673.26629.clone
  %add.4847 = f32[] add(%add.4846, %all-reduce.155)
  %copy.2243 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.735)
  %dot.616 = bf16[4096,32,128]{2,1,0} dot(%copy.1871, %copy.2243), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.156 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.616), channel_id=607, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.67.clone
  %dynamic-slice.1225 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.156, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3245 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1225)
  %transpose.421 = f32[32,128,256]{1,0,2} transpose(%convert.3245), dimensions={1,2,0}
  %multiply.6992 = f32[32,128,256]{1,0,2} multiply(%transpose.421, %transpose.421)
  %reduce.625 = f32[] reduce(%multiply.6992, %constant.5451), dimensions={0,1,2}, to_apply=%region_674.26636
  %all-reduce.157 = f32[] all-reduce(%reduce.625), channel_id=608, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_674.26636.clone
  %add.4848 = f32[] add(%add.4847, %all-reduce.157)
  %dot.617 = bf16[32,128,4096]{2,1,0} dot(%add.4043, %copy.2242), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.158 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.617), channel_id=609, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.68.clone
  %dynamic-slice.1227 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.158, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3246 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1227)
  %transpose.422 = f32[256,32,128]{0,2,1} transpose(%convert.3246), dimensions={2,0,1}
  %multiply.6993 = f32[256,32,128]{0,2,1} multiply(%transpose.422, %transpose.422)
  %reduce.626 = f32[] reduce(%multiply.6993, %constant.5451), dimensions={0,1,2}, to_apply=%region_675.26643
  %all-reduce.159 = f32[] all-reduce(%reduce.626), channel_id=610, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_675.26643.clone
  %add.4849 = f32[] add(%add.4848, %all-reduce.159)
  %dot.618 = bf16[8,128,4096]{2,1,0} dot(%copy.1873, %copy.2242), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.160 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.618), channel_id=611, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.69.clone
  %dynamic-slice.1229 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.160, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3247 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1229)
  %transpose.423 = f32[256,8,128]{0,2,1} transpose(%convert.3247), dimensions={2,0,1}
  %multiply.6995 = f32[256,8,128]{0,2,1} multiply(%transpose.423, %transpose.423)
  %reduce.627 = f32[] reduce(%multiply.6995, %constant.5451), dimensions={0,1,2}, to_apply=%region_676.26650
  %all-reduce.161 = f32[] all-reduce(%reduce.627), channel_id=612, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_676.26650.clone
  %add.4850 = f32[] add(%add.4849, %all-reduce.161)
  %multiply.6996 = f32[2,8192,4096]{2,1,0} multiply(%convert.2257, %broadcast.11639)
  %convert.3248 = bf16[2,8192,4096]{2,1,0} convert(%multiply.6996)
  %multiply.6997 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3248, %broadcast.11635)
  %copy.2245 = bf16[2,8192,4096]{2,1,0} copy(%multiply.6997)
  %dot.619 = bf16[4096,14336]{1,0} dot(%copy.2245, %add.3967), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.162 = bf16[4096,14336]{1,0} all-reduce(%dot.619), channel_id=613, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.70.clone
  %dynamic-slice.1231 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.162, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3249 = f32[256,14336]{0,1} convert(%dynamic-slice.1231)
  %multiply.6998 = f32[256,14336]{0,1} multiply(%convert.3249, %convert.3249)
  %reduce.628 = f32[] reduce(%multiply.6998, %constant.5451), dimensions={0,1}, to_apply=%region_677.26657
  %all-reduce.163 = f32[] all-reduce(%reduce.628), channel_id=614, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_677.26657.clone
  %add.4851 = f32[] add(%add.4850, %all-reduce.163)
  %dot.620 = bf16[4096,14336]{1,0} dot(%copy.2245, %multiply.5162), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.164 = bf16[4096,14336]{1,0} all-reduce(%dot.620), channel_id=615, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.71.clone
  %dynamic-slice.1233 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.164, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3250 = f32[256,14336]{0,1} convert(%dynamic-slice.1233)
  %multiply.6999 = f32[256,14336]{0,1} multiply(%convert.3250, %convert.3250)
  %reduce.629 = f32[] reduce(%multiply.6999, %constant.5451), dimensions={0,1}, to_apply=%region_678.26664
  %all-reduce.165 = f32[] all-reduce(%reduce.629), channel_id=616, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_678.26664.clone
  %add.4852 = f32[] add(%add.4851, %all-reduce.165)
  %multiply.7000 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5161, %get-tuple-element.689)
  %copy.2246 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7000)
  %dot.621 = bf16[14336,4096]{1,0} dot(%copy.2246, %copy.1845), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.166 = bf16[14336,4096]{1,0} all-reduce(%dot.621), channel_id=617, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.72.clone
  %dynamic-slice.1235 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.166, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3251 = f32[14336,256]{0,1} convert(%dynamic-slice.1235)
  %multiply.7001 = f32[14336,256]{0,1} multiply(%convert.3251, %convert.3251)
  %reduce.630 = f32[] reduce(%multiply.7001, %constant.5451), dimensions={0,1}, to_apply=%region_679.26671
  %all-reduce.167 = f32[] all-reduce(%reduce.630), channel_id=618, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_679.26671.clone
  %add.4853 = f32[] add(%add.4852, %all-reduce.167)
  %multiply.7002 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3248, %copy.1847)
  %reduce.631 = bf16[4096]{0} reduce(%multiply.7002, %constant.10307), dimensions={0,1}, to_apply=%region_344.16985
  %all-reduce.168 = bf16[4096]{0} all-reduce(%reduce.631), channel_id=619, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_344.16985.clone
  %convert.3252 = f32[4096]{0} convert(%all-reduce.168)
  %multiply.7003 = f32[4096]{0} multiply(%convert.3252, %convert.3252)
  %reduce.632 = f32[] reduce(%multiply.7003, %constant.5451), dimensions={0}, to_apply=%region_680.26678
  %add.4854 = f32[] add(%add.4853, %reduce.632)
  %multiply.7004 = f32[2,8192,4096]{2,1,0} multiply(%convert.2295, %broadcast.11740)
  %convert.3253 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7004)
  %multiply.7005 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3253, %copy.1860)
  %reduce.633 = bf16[4096]{0} reduce(%multiply.7005, %constant.10307), dimensions={0,1}, to_apply=%region_348.17119
  %all-reduce.169 = bf16[4096]{0} all-reduce(%reduce.633), channel_id=620, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_348.17119.clone
  %convert.3254 = f32[4096]{0} convert(%all-reduce.169)
  %multiply.7006 = f32[4096]{0} multiply(%convert.3254, %convert.3254)
  %reduce.634 = f32[] reduce(%multiply.7006, %constant.5451), dimensions={0}, to_apply=%region_681.26685
  %add.4855 = f32[] add(%add.4854, %reduce.634)
  %multiply.7007 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3253, %broadcast.11736)
  %copy.2247 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7007)
  %copy.2248 = bf16[2,8192,4096]{2,1,0} copy(%copy.2247)
  %dot.622 = bf16[8,128,4096]{2,1,0} dot(%add.3996, %copy.2248), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.170 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.622), channel_id=621, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.73.clone
  %dynamic-slice.1237 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.170, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3255 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1237)
  %transpose.424 = f32[256,8,128]{0,2,1} transpose(%convert.3255), dimensions={2,0,1}
  %multiply.7008 = f32[256,8,128]{0,2,1} multiply(%transpose.424, %transpose.424)
  %reduce.635 = f32[] reduce(%multiply.7008, %constant.5451), dimensions={0,1,2}, to_apply=%region_682.26692
  %all-reduce.171 = f32[] all-reduce(%reduce.635), channel_id=622, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_682.26692.clone
  %add.4856 = f32[] add(%add.4855, %all-reduce.171)
  %copy.2249 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.702)
  %dot.623 = bf16[4096,32,128]{2,1,0} dot(%copy.1853, %copy.2249), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.172 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.623), channel_id=623, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.74.clone
  %dynamic-slice.1239 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.172, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3256 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1239)
  %transpose.425 = f32[32,128,256]{1,0,2} transpose(%convert.3256), dimensions={1,2,0}
  %multiply.7009 = f32[32,128,256]{1,0,2} multiply(%transpose.425, %transpose.425)
  %reduce.636 = f32[] reduce(%multiply.7009, %constant.5451), dimensions={0,1,2}, to_apply=%region_683.26699
  %all-reduce.173 = f32[] all-reduce(%reduce.636), channel_id=624, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_683.26699.clone
  %add.4857 = f32[] add(%add.4856, %all-reduce.173)
  %dot.624 = bf16[32,128,4096]{2,1,0} dot(%add.4002, %copy.2248), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.174 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.624), channel_id=625, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.75.clone
  %dynamic-slice.1241 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.174, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3257 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1241)
  %transpose.426 = f32[256,32,128]{0,2,1} transpose(%convert.3257), dimensions={2,0,1}
  %multiply.7010 = f32[256,32,128]{0,2,1} multiply(%transpose.426, %transpose.426)
  %reduce.637 = f32[] reduce(%multiply.7010, %constant.5451), dimensions={0,1,2}, to_apply=%region_684.26706
  %all-reduce.175 = f32[] all-reduce(%reduce.637), channel_id=626, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_684.26706.clone
  %add.4858 = f32[] add(%add.4857, %all-reduce.175)
  %dot.625 = bf16[8,128,4096]{2,1,0} dot(%copy.1855, %copy.2248), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.176 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.625), channel_id=627, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.76.clone
  %dynamic-slice.1243 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.176, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3258 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1243)
  %transpose.427 = f32[256,8,128]{0,2,1} transpose(%convert.3258), dimensions={2,0,1}
  %multiply.7011 = f32[256,8,128]{0,2,1} multiply(%transpose.427, %transpose.427)
  %reduce.638 = f32[] reduce(%multiply.7011, %constant.5451), dimensions={0,1,2}, to_apply=%region_685.26713
  %all-reduce.177 = f32[] all-reduce(%reduce.638), channel_id=628, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_685.26713.clone
  %add.4859 = f32[] add(%add.4858, %all-reduce.177)
  %multiply.7012 = f32[2,8192,4096]{2,1,0} multiply(%convert.2210, %broadcast.11527)
  %convert.3259 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7012)
  %multiply.7013 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3259, %broadcast.11524)
  %copy.2251 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7013)
  %dot.626 = bf16[4096,14336]{1,0} dot(%copy.2251, %add.3926), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.178 = bf16[4096,14336]{1,0} all-reduce(%dot.626), channel_id=629, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.77.clone
  %dynamic-slice.1245 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.178, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3260 = f32[256,14336]{0,1} convert(%dynamic-slice.1245)
  %multiply.7014 = f32[256,14336]{0,1} multiply(%convert.3260, %convert.3260)
  %reduce.639 = f32[] reduce(%multiply.7014, %constant.5451), dimensions={0,1}, to_apply=%region_686.26720
  %all-reduce.179 = f32[] all-reduce(%reduce.639), channel_id=630, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_686.26720.clone
  %add.4860 = f32[] add(%add.4859, %all-reduce.179)
  %dot.627 = bf16[4096,14336]{1,0} dot(%copy.2251, %multiply.5072), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.180 = bf16[4096,14336]{1,0} all-reduce(%dot.627), channel_id=631, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.78.clone
  %dynamic-slice.1247 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.180, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3261 = f32[256,14336]{0,1} convert(%dynamic-slice.1247)
  %multiply.7015 = f32[256,14336]{0,1} multiply(%convert.3261, %convert.3261)
  %reduce.640 = f32[] reduce(%multiply.7015, %constant.5451), dimensions={0,1}, to_apply=%region_687.26727
  %all-reduce.181 = f32[] all-reduce(%reduce.640), channel_id=632, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_687.26727.clone
  %add.4861 = f32[] add(%add.4860, %all-reduce.181)
  %multiply.7016 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5071, %get-tuple-element.656)
  %copy.2252 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7016)
  %dot.628 = bf16[14336,4096]{1,0} dot(%copy.2252, %copy.1827), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.182 = bf16[14336,4096]{1,0} all-reduce(%dot.628), channel_id=633, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.79.clone
  %dynamic-slice.1249 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.182, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3262 = f32[14336,256]{0,1} convert(%dynamic-slice.1249)
  %multiply.7017 = f32[14336,256]{0,1} multiply(%convert.3262, %convert.3262)
  %reduce.641 = f32[] reduce(%multiply.7017, %constant.5451), dimensions={0,1}, to_apply=%region_688.26734
  %all-reduce.183 = f32[] all-reduce(%reduce.641), channel_id=634, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_688.26734.clone
  %add.4862 = f32[] add(%add.4861, %all-reduce.183)
  %multiply.7018 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3259, %copy.1829)
  %reduce.642 = bf16[4096]{0} reduce(%multiply.7018, %constant.10307), dimensions={0,1}, to_apply=%region_331.16493
  %all-reduce.184 = bf16[4096]{0} all-reduce(%reduce.642), channel_id=635, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_331.16493.clone
  %convert.3263 = f32[4096]{0} convert(%all-reduce.184)
  %multiply.7019 = f32[4096]{0} multiply(%convert.3263, %convert.3263)
  %reduce.643 = f32[] reduce(%multiply.7019, %constant.5451), dimensions={0}, to_apply=%region_689.26741
  %add.4863 = f32[] add(%add.4862, %reduce.643)
  %multiply.7020 = f32[2,8192,4096]{2,1,0} multiply(%convert.2250, %broadcast.11628)
  %convert.3264 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7020)
  %multiply.7021 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3264, %copy.1842)
  %reduce.644 = bf16[4096]{0} reduce(%multiply.7021, %constant.10307), dimensions={0,1}, to_apply=%region_335.16627
  %all-reduce.185 = bf16[4096]{0} all-reduce(%reduce.644), channel_id=636, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_335.16627.clone
  %convert.3266 = f32[4096]{0} convert(%all-reduce.185)
  %multiply.7022 = f32[4096]{0} multiply(%convert.3266, %convert.3266)
  %reduce.645 = f32[] reduce(%multiply.7022, %constant.5451), dimensions={0}, to_apply=%region_690.26748
  %add.4864 = f32[] add(%add.4863, %reduce.645)
  %multiply.7023 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3264, %broadcast.11623)
  %copy.2253 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7023)
  %copy.2254 = bf16[2,8192,4096]{2,1,0} copy(%copy.2253)
  %dot.629 = bf16[8,128,4096]{2,1,0} dot(%add.3955, %copy.2254), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.186 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.629), channel_id=637, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.80.clone
  %dynamic-slice.1251 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.186, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3267 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1251)
  %transpose.428 = f32[256,8,128]{0,2,1} transpose(%convert.3267), dimensions={2,0,1}
  %multiply.7025 = f32[256,8,128]{0,2,1} multiply(%transpose.428, %transpose.428)
  %reduce.646 = f32[] reduce(%multiply.7025, %constant.5451), dimensions={0,1,2}, to_apply=%region_691.26755
  %all-reduce.187 = f32[] all-reduce(%reduce.646), channel_id=638, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_691.26755.clone
  %add.4865 = f32[] add(%add.4864, %all-reduce.187)
  %copy.2255 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.669)
  %dot.630 = bf16[4096,32,128]{2,1,0} dot(%copy.1835, %copy.2255), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.188 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.630), channel_id=639, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.81.clone
  %dynamic-slice.1253 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.188, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3268 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1253)
  %transpose.429 = f32[32,128,256]{1,0,2} transpose(%convert.3268), dimensions={1,2,0}
  %multiply.7026 = f32[32,128,256]{1,0,2} multiply(%transpose.429, %transpose.429)
  %reduce.647 = f32[] reduce(%multiply.7026, %constant.5451), dimensions={0,1,2}, to_apply=%region_692.26762
  %all-reduce.189 = f32[] all-reduce(%reduce.647), channel_id=640, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_692.26762.clone
  %add.4866 = f32[] add(%add.4865, %all-reduce.189)
  %dot.631 = bf16[32,128,4096]{2,1,0} dot(%add.3960, %copy.2254), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.190 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.631), channel_id=641, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.82.clone
  %dynamic-slice.1255 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.190, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3269 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1255)
  %transpose.430 = f32[256,32,128]{0,2,1} transpose(%convert.3269), dimensions={2,0,1}
  %multiply.7027 = f32[256,32,128]{0,2,1} multiply(%transpose.430, %transpose.430)
  %reduce.648 = f32[] reduce(%multiply.7027, %constant.5451), dimensions={0,1,2}, to_apply=%region_693.26769
  %all-reduce.191 = f32[] all-reduce(%reduce.648), channel_id=642, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_693.26769.clone
  %add.4867 = f32[] add(%add.4866, %all-reduce.191)
  %dot.632 = bf16[8,128,4096]{2,1,0} dot(%copy.1837, %copy.2254), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.192 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.632), channel_id=643, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.83.clone
  %dynamic-slice.1257 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.192, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3270 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1257)
  %transpose.431 = f32[256,8,128]{0,2,1} transpose(%convert.3270), dimensions={2,0,1}
  %multiply.7028 = f32[256,8,128]{0,2,1} multiply(%transpose.431, %transpose.431)
  %reduce.649 = f32[] reduce(%multiply.7028, %constant.5451), dimensions={0,1,2}, to_apply=%region_694.26776
  %all-reduce.193 = f32[] all-reduce(%reduce.649), channel_id=644, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_694.26776.clone
  %add.4868 = f32[] add(%add.4867, %all-reduce.193)
  %multiply.7029 = f32[2,8192,4096]{2,1,0} multiply(%convert.2992, %broadcast.13444)
  %convert.3271 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7029)
  %multiply.7030 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3271, %broadcast.13437)
  %copy.2257 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7030)
  %dot.633 = bf16[4096,14336]{1,0} dot(%copy.2257, %add.4633), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.194 = bf16[4096,14336]{1,0} all-reduce(%dot.633), channel_id=645, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.84.clone
  %dynamic-slice.1259 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.194, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3272 = f32[256,14336]{0,1} convert(%dynamic-slice.1259)
  %multiply.7031 = f32[256,14336]{0,1} multiply(%convert.3272, %convert.3272)
  %reduce.650 = f32[] reduce(%multiply.7031, %constant.5451), dimensions={0,1}, to_apply=%region_695.26783
  %all-reduce.195 = f32[] all-reduce(%reduce.650), channel_id=646, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_695.26783.clone
  %add.4869 = f32[] add(%add.4868, %all-reduce.195)
  %dot.634 = bf16[4096,14336]{1,0} dot(%copy.2257, %multiply.6569), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.196 = bf16[4096,14336]{1,0} all-reduce(%dot.634), channel_id=647, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.85.clone
  %dynamic-slice.1261 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.196, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3274 = f32[256,14336]{0,1} convert(%dynamic-slice.1261)
  %multiply.7032 = f32[256,14336]{0,1} multiply(%convert.3274, %convert.3274)
  %reduce.651 = f32[] reduce(%multiply.7032, %constant.5451), dimensions={0,1}, to_apply=%region_696.26790
  %all-reduce.197 = f32[] all-reduce(%reduce.651), channel_id=648, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_696.26790.clone
  %add.4870 = f32[] add(%add.4869, %all-reduce.197)
  %multiply.7033 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6568, %get-tuple-element.1217)
  %copy.2258 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7033)
  %dot.635 = bf16[14336,4096]{1,0} dot(%copy.2258, %copy.2133), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.198 = bf16[14336,4096]{1,0} all-reduce(%dot.635), channel_id=649, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.86.clone
  %dynamic-slice.1263 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.198, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3275 = f32[14336,256]{0,1} convert(%dynamic-slice.1263)
  %multiply.7034 = f32[14336,256]{0,1} multiply(%convert.3275, %convert.3275)
  %reduce.652 = f32[] reduce(%multiply.7034, %constant.5451), dimensions={0,1}, to_apply=%region_697.26797
  %all-reduce.199 = f32[] all-reduce(%reduce.652), channel_id=650, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_697.26797.clone
  %add.4871 = f32[] add(%add.4870, %all-reduce.199)
  %multiply.7035 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3271, %copy.2135)
  %reduce.653 = bf16[4096]{0} reduce(%multiply.7035, %constant.10307), dimensions={0,1}, to_apply=%region_552.24857
  %all-reduce.200 = bf16[4096]{0} all-reduce(%reduce.653), channel_id=651, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_552.24857.clone
  %convert.3276 = f32[4096]{0} convert(%all-reduce.200)
  %multiply.7036 = f32[4096]{0} multiply(%convert.3276, %convert.3276)
  %reduce.654 = f32[] reduce(%multiply.7036, %constant.5451), dimensions={0}, to_apply=%region_698.26804
  %add.4872 = f32[] add(%add.4871, %reduce.654)
  %multiply.7037 = f32[2,8192,4096]{2,1,0} multiply(%convert.3029, %broadcast.13542)
  %convert.3277 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7037)
  %multiply.7038 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3277, %copy.2148)
  %reduce.655 = bf16[4096]{0} reduce(%multiply.7038, %constant.10307), dimensions={0,1}, to_apply=%region_556.24991
  %all-reduce.201 = bf16[4096]{0} all-reduce(%reduce.655), channel_id=652, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_556.24991.clone
  %convert.3278 = f32[4096]{0} convert(%all-reduce.201)
  %multiply.7039 = f32[4096]{0} multiply(%convert.3278, %convert.3278)
  %reduce.656 = f32[] reduce(%multiply.7039, %constant.5451), dimensions={0}, to_apply=%region_699.26811
  %add.4873 = f32[] add(%add.4872, %reduce.656)
  %multiply.7041 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3277, %broadcast.13539)
  %copy.2259 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7041)
  %copy.2260 = bf16[2,8192,4096]{2,1,0} copy(%copy.2259)
  %dot.636 = bf16[8,128,4096]{2,1,0} dot(%add.4663, %copy.2260), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.202 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.636), channel_id=653, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.87.clone
  %dynamic-slice.1265 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.202, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3279 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1265)
  %transpose.432 = f32[256,8,128]{0,2,1} transpose(%convert.3279), dimensions={2,0,1}
  %multiply.7043 = f32[256,8,128]{0,2,1} multiply(%transpose.432, %transpose.432)
  %reduce.657 = f32[] reduce(%multiply.7043, %constant.5451), dimensions={0,1,2}, to_apply=%region_700.26818
  %all-reduce.203 = f32[] all-reduce(%reduce.657), channel_id=654, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_700.26818.clone
  %add.4874 = f32[] add(%add.4873, %all-reduce.203)
  %copy.2261 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1230)
  %dot.637 = bf16[4096,32,128]{2,1,0} dot(%copy.2141, %copy.2261), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.204 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.637), channel_id=655, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.88.clone
  %dynamic-slice.1267 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.204, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3280 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1267)
  %transpose.433 = f32[32,128,256]{1,0,2} transpose(%convert.3280), dimensions={1,2,0}
  %multiply.7044 = f32[32,128,256]{1,0,2} multiply(%transpose.433, %transpose.433)
  %reduce.658 = f32[] reduce(%multiply.7044, %constant.5451), dimensions={0,1,2}, to_apply=%region_701.26825
  %all-reduce.205 = f32[] all-reduce(%reduce.658), channel_id=656, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_701.26825.clone
  %add.4875 = f32[] add(%add.4874, %all-reduce.205)
  %dot.638 = bf16[32,128,4096]{2,1,0} dot(%add.4669, %copy.2260), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.206 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.638), channel_id=657, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.89.clone
  %dynamic-slice.1269 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.206, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3281 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1269)
  %transpose.434 = f32[256,32,128]{0,2,1} transpose(%convert.3281), dimensions={2,0,1}
  %multiply.7045 = f32[256,32,128]{0,2,1} multiply(%transpose.434, %transpose.434)
  %reduce.659 = f32[] reduce(%multiply.7045, %constant.5451), dimensions={0,1,2}, to_apply=%region_702.26832
  %all-reduce.207 = f32[] all-reduce(%reduce.659), channel_id=658, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_702.26832.clone
  %add.4876 = f32[] add(%add.4875, %all-reduce.207)
  %dot.639 = bf16[8,128,4096]{2,1,0} dot(%copy.2143, %copy.2260), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.208 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.639), channel_id=659, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.90.clone
  %dynamic-slice.1271 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.208, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3282 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1271)
  %transpose.435 = f32[256,8,128]{0,2,1} transpose(%convert.3282), dimensions={2,0,1}
  %multiply.7046 = f32[256,8,128]{0,2,1} multiply(%transpose.435, %transpose.435)
  %reduce.660 = f32[] reduce(%multiply.7046, %constant.5451), dimensions={0,1,2}, to_apply=%region_703.26839
  %all-reduce.209 = f32[] all-reduce(%reduce.660), channel_id=660, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_703.26839.clone
  %add.4877 = f32[] add(%add.4876, %all-reduce.209)
  %multiply.7047 = f32[2,8192,4096]{2,1,0} multiply(%convert.2162, %broadcast.11410)
  %convert.3283 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7047)
  %multiply.7048 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3283, %broadcast.11406)
  %copy.2263 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7048)
  %dot.640 = bf16[4096,14336]{1,0} dot(%copy.2263, %add.3883), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.210 = bf16[4096,14336]{1,0} all-reduce(%dot.640), channel_id=661, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.91.clone
  %dynamic-slice.1273 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.210, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3284 = f32[256,14336]{0,1} convert(%dynamic-slice.1273)
  %multiply.7049 = f32[256,14336]{0,1} multiply(%convert.3284, %convert.3284)
  %reduce.661 = f32[] reduce(%multiply.7049, %constant.5451), dimensions={0,1}, to_apply=%region_704.26846
  %all-reduce.211 = f32[] all-reduce(%reduce.661), channel_id=662, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_704.26846.clone
  %add.4878 = f32[] add(%add.4877, %all-reduce.211)
  %dot.641 = bf16[4096,14336]{1,0} dot(%copy.2263, %multiply.4983), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.212 = bf16[4096,14336]{1,0} all-reduce(%dot.641), channel_id=663, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.92.clone
  %dynamic-slice.1275 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.212, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3285 = f32[256,14336]{0,1} convert(%dynamic-slice.1275)
  %multiply.7050 = f32[256,14336]{0,1} multiply(%convert.3285, %convert.3285)
  %reduce.662 = f32[] reduce(%multiply.7050, %constant.5451), dimensions={0,1}, to_apply=%region_705.26853
  %all-reduce.213 = f32[] all-reduce(%reduce.662), channel_id=664, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_705.26853.clone
  %add.4880 = f32[] add(%add.4878, %all-reduce.213)
  %multiply.7051 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4982, %get-tuple-element.623)
  %copy.2264 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7051)
  %dot.642 = bf16[14336,4096]{1,0} dot(%copy.2264, %copy.1809), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.214 = bf16[14336,4096]{1,0} all-reduce(%dot.642), channel_id=665, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.93.clone
  %dynamic-slice.1277 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.214, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3286 = f32[14336,256]{0,1} convert(%dynamic-slice.1277)
  %multiply.7052 = f32[14336,256]{0,1} multiply(%convert.3286, %convert.3286)
  %reduce.663 = f32[] reduce(%multiply.7052, %constant.5451), dimensions={0,1}, to_apply=%region_706.26860
  %all-reduce.215 = f32[] all-reduce(%reduce.663), channel_id=666, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_706.26860.clone
  %add.4881 = f32[] add(%add.4880, %all-reduce.215)
  %multiply.7053 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3283, %copy.1811)
  %reduce.664 = bf16[4096]{0} reduce(%multiply.7053, %constant.10307), dimensions={0,1}, to_apply=%region_318.16001
  %all-reduce.216 = bf16[4096]{0} all-reduce(%reduce.664), channel_id=667, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_318.16001.clone
  %convert.3287 = f32[4096]{0} convert(%all-reduce.216)
  %multiply.7054 = f32[4096]{0} multiply(%convert.3287, %convert.3287)
  %reduce.665 = f32[] reduce(%multiply.7054, %constant.5451), dimensions={0}, to_apply=%region_707.26867
  %add.4882 = f32[] add(%add.4881, %reduce.665)
  %multiply.7055 = f32[2,8192,4096]{2,1,0} multiply(%convert.2201, %broadcast.11520)
  %convert.3288 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7055)
  %multiply.7056 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3288, %copy.1824)
  %reduce.666 = bf16[4096]{0} reduce(%multiply.7056, %constant.10307), dimensions={0,1}, to_apply=%region_322.16135
  %all-reduce.217 = bf16[4096]{0} all-reduce(%reduce.666), channel_id=668, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_322.16135.clone
  %convert.3289 = f32[4096]{0} convert(%all-reduce.217)
  %multiply.7057 = f32[4096]{0} multiply(%convert.3289, %convert.3289)
  %reduce.667 = f32[] reduce(%multiply.7057, %constant.5451), dimensions={0}, to_apply=%region_708.26874
  %add.4883 = f32[] add(%add.4882, %reduce.667)
  %multiply.7058 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3288, %broadcast.11517)
  %copy.2265 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7058)
  %copy.2266 = bf16[2,8192,4096]{2,1,0} copy(%copy.2265)
  %dot.643 = bf16[8,128,4096]{2,1,0} dot(%add.3915, %copy.2266), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.218 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.643), channel_id=669, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.94.clone
  %dynamic-slice.1279 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.218, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3291 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1279)
  %transpose.436 = f32[256,8,128]{0,2,1} transpose(%convert.3291), dimensions={2,0,1}
  %multiply.7059 = f32[256,8,128]{0,2,1} multiply(%transpose.436, %transpose.436)
  %reduce.668 = f32[] reduce(%multiply.7059, %constant.5451), dimensions={0,1,2}, to_apply=%region_709.26881
  %all-reduce.219 = f32[] all-reduce(%reduce.668), channel_id=670, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_709.26881.clone
  %add.4884 = f32[] add(%add.4883, %all-reduce.219)
  %copy.2267 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.636)
  %dot.644 = bf16[4096,32,128]{2,1,0} dot(%copy.1817, %copy.2267), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.220 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.644), channel_id=671, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.95.clone
  %dynamic-slice.1281 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.220, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3292 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1281)
  %transpose.437 = f32[32,128,256]{1,0,2} transpose(%convert.3292), dimensions={1,2,0}
  %multiply.7060 = f32[32,128,256]{1,0,2} multiply(%transpose.437, %transpose.437)
  %reduce.669 = f32[] reduce(%multiply.7060, %constant.5451), dimensions={0,1,2}, to_apply=%region_710.26888
  %all-reduce.221 = f32[] all-reduce(%reduce.669), channel_id=672, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_710.26888.clone
  %add.4885 = f32[] add(%add.4884, %all-reduce.221)
  %dot.645 = bf16[32,128,4096]{2,1,0} dot(%add.3920, %copy.2266), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.222 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.645), channel_id=673, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.96.clone
  %dynamic-slice.1283 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.222, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3293 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1283)
  %transpose.438 = f32[256,32,128]{0,2,1} transpose(%convert.3293), dimensions={2,0,1}
  %multiply.7061 = f32[256,32,128]{0,2,1} multiply(%transpose.438, %transpose.438)
  %reduce.670 = f32[] reduce(%multiply.7061, %constant.5451), dimensions={0,1,2}, to_apply=%region_711.26895
  %all-reduce.223 = f32[] all-reduce(%reduce.670), channel_id=674, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_711.26895.clone
  %add.4886 = f32[] add(%add.4885, %all-reduce.223)
  %dot.646 = bf16[8,128,4096]{2,1,0} dot(%copy.1819, %copy.2266), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.224 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.646), channel_id=675, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.97.clone
  %dynamic-slice.1285 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.224, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3294 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1285)
  %transpose.439 = f32[256,8,128]{0,2,1} transpose(%convert.3294), dimensions={2,0,1}
  %multiply.7062 = f32[256,8,128]{0,2,1} multiply(%transpose.439, %transpose.439)
  %reduce.671 = f32[] reduce(%multiply.7062, %constant.5451), dimensions={0,1,2}, to_apply=%region_712.26902
  %all-reduce.225 = f32[] all-reduce(%reduce.671), channel_id=676, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_712.26902.clone
  %add.4887 = f32[] add(%add.4886, %all-reduce.225)
  %multiply.7063 = f32[2,8192,4096]{2,1,0} multiply(%convert.2119, %broadcast.11291)
  %convert.3296 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7063)
  %multiply.7064 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3296, %broadcast.11288)
  %copy.2269 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7064)
  %dot.647 = bf16[4096,14336]{1,0} dot(%copy.2269, %add.3840), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.226 = bf16[4096,14336]{1,0} all-reduce(%dot.647), channel_id=677, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.98.clone
  %dynamic-slice.1287 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.226, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3297 = f32[256,14336]{0,1} convert(%dynamic-slice.1287)
  %multiply.7065 = f32[256,14336]{0,1} multiply(%convert.3297, %convert.3297)
  %reduce.672 = f32[] reduce(%multiply.7065, %constant.5451), dimensions={0,1}, to_apply=%region_713.26909
  %all-reduce.227 = f32[] all-reduce(%reduce.672), channel_id=678, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_713.26909.clone
  %add.4888 = f32[] add(%add.4887, %all-reduce.227)
  %dot.648 = bf16[4096,14336]{1,0} dot(%copy.2269, %multiply.4897), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.228 = bf16[4096,14336]{1,0} all-reduce(%dot.648), channel_id=679, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.99.clone
  %dynamic-slice.1289 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.228, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3298 = f32[256,14336]{0,1} convert(%dynamic-slice.1289)
  %multiply.7066 = f32[256,14336]{0,1} multiply(%convert.3298, %convert.3298)
  %reduce.673 = f32[] reduce(%multiply.7066, %constant.5451), dimensions={0,1}, to_apply=%region_714.26916
  %all-reduce.229 = f32[] all-reduce(%reduce.673), channel_id=680, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_714.26916.clone
  %add.4889 = f32[] add(%add.4888, %all-reduce.229)
  %multiply.7067 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4896, %get-tuple-element.590)
  %copy.2270 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7067)
  %dot.649 = bf16[14336,4096]{1,0} dot(%copy.2270, %copy.1791), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.230 = bf16[14336,4096]{1,0} all-reduce(%dot.649), channel_id=681, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.100.clone
  %dynamic-slice.1291 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.230, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3299 = f32[14336,256]{0,1} convert(%dynamic-slice.1291)
  %multiply.7068 = f32[14336,256]{0,1} multiply(%convert.3299, %convert.3299)
  %reduce.674 = f32[] reduce(%multiply.7068, %constant.5451), dimensions={0,1}, to_apply=%region_715.26923
  %all-reduce.231 = f32[] all-reduce(%reduce.674), channel_id=682, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_715.26923.clone
  %add.4890 = f32[] add(%add.4889, %all-reduce.231)
  %multiply.7070 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3296, %copy.1793)
  %reduce.675 = bf16[4096]{0} reduce(%multiply.7070, %constant.10307), dimensions={0,1}, to_apply=%region_305.15509
  %all-reduce.232 = bf16[4096]{0} all-reduce(%reduce.675), channel_id=683, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_305.15509.clone
  %convert.3300 = f32[4096]{0} convert(%all-reduce.232)
  %multiply.7071 = f32[4096]{0} multiply(%convert.3300, %convert.3300)
  %reduce.676 = f32[] reduce(%multiply.7071, %constant.5451), dimensions={0}, to_apply=%region_716.26930
  %add.4891 = f32[] add(%add.4890, %reduce.676)
  %multiply.7072 = f32[2,8192,4096]{2,1,0} multiply(%convert.2155, %broadcast.11402)
  %convert.3301 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7072)
  %multiply.7073 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3301, %copy.1806)
  %reduce.677 = bf16[4096]{0} reduce(%multiply.7073, %constant.10307), dimensions={0,1}, to_apply=%region_309.15643
  %all-reduce.233 = bf16[4096]{0} all-reduce(%reduce.677), channel_id=684, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_309.15643.clone
  %convert.3302 = f32[4096]{0} convert(%all-reduce.233)
  %multiply.7075 = f32[4096]{0} multiply(%convert.3302, %convert.3302)
  %reduce.678 = f32[] reduce(%multiply.7075, %constant.5451), dimensions={0}, to_apply=%region_717.26937
  %add.4892 = f32[] add(%add.4891, %reduce.678)
  %multiply.7076 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3301, %broadcast.11398)
  %copy.2271 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7076)
  %copy.2272 = bf16[2,8192,4096]{2,1,0} copy(%copy.2271)
  %dot.650 = bf16[8,128,4096]{2,1,0} dot(%add.3872, %copy.2272), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.234 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.650), channel_id=685, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.101.clone
  %dynamic-slice.1293 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.234, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3303 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1293)
  %transpose.440 = f32[256,8,128]{0,2,1} transpose(%convert.3303), dimensions={2,0,1}
  %multiply.7077 = f32[256,8,128]{0,2,1} multiply(%transpose.440, %transpose.440)
  %reduce.679 = f32[] reduce(%multiply.7077, %constant.5451), dimensions={0,1,2}, to_apply=%region_718.26944
  %all-reduce.235 = f32[] all-reduce(%reduce.679), channel_id=686, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_718.26944.clone
  %add.4893 = f32[] add(%add.4892, %all-reduce.235)
  %copy.2273 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.603)
  %dot.651 = bf16[4096,32,128]{2,1,0} dot(%copy.1799, %copy.2273), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.236 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.651), channel_id=687, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.102.clone
  %dynamic-slice.1295 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.236, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3304 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1295)
  %transpose.441 = f32[32,128,256]{1,0,2} transpose(%convert.3304), dimensions={1,2,0}
  %multiply.7078 = f32[32,128,256]{1,0,2} multiply(%transpose.441, %transpose.441)
  %reduce.680 = f32[] reduce(%multiply.7078, %constant.5451), dimensions={0,1,2}, to_apply=%region_719.26951
  %all-reduce.237 = f32[] all-reduce(%reduce.680), channel_id=688, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_719.26951.clone
  %add.4894 = f32[] add(%add.4893, %all-reduce.237)
  %dot.652 = bf16[32,128,4096]{2,1,0} dot(%add.3877, %copy.2272), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.238 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.652), channel_id=689, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.103.clone
  %dynamic-slice.1297 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.238, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3305 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1297)
  %transpose.442 = f32[256,32,128]{0,2,1} transpose(%convert.3305), dimensions={2,0,1}
  %multiply.7079 = f32[256,32,128]{0,2,1} multiply(%transpose.442, %transpose.442)
  %reduce.681 = f32[] reduce(%multiply.7079, %constant.5451), dimensions={0,1,2}, to_apply=%region_720.26958
  %all-reduce.239 = f32[] all-reduce(%reduce.681), channel_id=690, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_720.26958.clone
  %add.4895 = f32[] add(%add.4894, %all-reduce.239)
  %dot.653 = bf16[8,128,4096]{2,1,0} dot(%copy.1801, %copy.2272), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.240 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.653), channel_id=691, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.104.clone
  %dynamic-slice.1299 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.240, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3306 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1299)
  %transpose.443 = f32[256,8,128]{0,2,1} transpose(%convert.3306), dimensions={2,0,1}
  %multiply.7081 = f32[256,8,128]{0,2,1} multiply(%transpose.443, %transpose.443)
  %reduce.682 = f32[] reduce(%multiply.7081, %constant.5451), dimensions={0,1,2}, to_apply=%region_721.26965
  %all-reduce.241 = f32[] all-reduce(%reduce.682), channel_id=692, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_721.26965.clone
  %add.4896 = f32[] add(%add.4895, %all-reduce.241)
  %multiply.7082 = f32[2,8192,4096]{2,1,0} multiply(%convert.2073, %broadcast.11189)
  %convert.3307 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7082)
  %multiply.7083 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3307, %broadcast.11186)
  %copy.2275 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7083)
  %dot.654 = bf16[4096,14336]{1,0} dot(%copy.2275, %add.3798), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.242 = bf16[4096,14336]{1,0} all-reduce(%dot.654), channel_id=693, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.105.clone
  %dynamic-slice.1301 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.242, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3308 = f32[256,14336]{0,1} convert(%dynamic-slice.1301)
  %multiply.7084 = f32[256,14336]{0,1} multiply(%convert.3308, %convert.3308)
  %reduce.683 = f32[] reduce(%multiply.7084, %constant.5451), dimensions={0,1}, to_apply=%region_722.26972
  %all-reduce.243 = f32[] all-reduce(%reduce.683), channel_id=694, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_722.26972.clone
  %add.4897 = f32[] add(%add.4896, %all-reduce.243)
  %dot.655 = bf16[4096,14336]{1,0} dot(%copy.2275, %multiply.4809), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.244 = bf16[4096,14336]{1,0} all-reduce(%dot.655), channel_id=695, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.106.clone
  %dynamic-slice.1303 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.244, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3309 = f32[256,14336]{0,1} convert(%dynamic-slice.1303)
  %multiply.7085 = f32[256,14336]{0,1} multiply(%convert.3309, %convert.3309)
  %reduce.684 = f32[] reduce(%multiply.7085, %constant.5451), dimensions={0,1}, to_apply=%region_723.26979
  %all-reduce.245 = f32[] all-reduce(%reduce.684), channel_id=696, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_723.26979.clone
  %add.4898 = f32[] add(%add.4897, %all-reduce.245)
  %multiply.7086 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4808, %get-tuple-element.557)
  %copy.2276 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7086)
  %dot.656 = bf16[14336,4096]{1,0} dot(%copy.2276, %copy.1773), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.246 = bf16[14336,4096]{1,0} all-reduce(%dot.656), channel_id=697, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.107.clone
  %dynamic-slice.1305 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.246, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3312 = f32[14336,256]{0,1} convert(%dynamic-slice.1305)
  %multiply.7087 = f32[14336,256]{0,1} multiply(%convert.3312, %convert.3312)
  %reduce.685 = f32[] reduce(%multiply.7087, %constant.5451), dimensions={0,1}, to_apply=%region_724.26986
  %all-reduce.247 = f32[] all-reduce(%reduce.685), channel_id=698, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_724.26986.clone
  %add.4899 = f32[] add(%add.4898, %all-reduce.247)
  %multiply.7088 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3307, %copy.1775)
  %reduce.686 = bf16[4096]{0} reduce(%multiply.7088, %constant.10307), dimensions={0,1}, to_apply=%region_292.15017
  %all-reduce.248 = bf16[4096]{0} all-reduce(%reduce.686), channel_id=699, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_292.15017.clone
  %convert.3313 = f32[4096]{0} convert(%all-reduce.248)
  %multiply.7089 = f32[4096]{0} multiply(%convert.3313, %convert.3313)
  %reduce.687 = f32[] reduce(%multiply.7089, %constant.5451), dimensions={0}, to_apply=%region_725.26993
  %add.4900 = f32[] add(%add.4899, %reduce.687)
  %multiply.7090 = f32[2,8192,4096]{2,1,0} multiply(%convert.2110, %broadcast.11284)
  %convert.3314 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7090)
  %multiply.7091 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3314, %copy.1788)
  %reduce.688 = bf16[4096]{0} reduce(%multiply.7091, %constant.10307), dimensions={0,1}, to_apply=%region_296.15151
  %all-reduce.249 = bf16[4096]{0} all-reduce(%reduce.688), channel_id=700, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_296.15151.clone
  %convert.3315 = f32[4096]{0} convert(%all-reduce.249)
  %multiply.7092 = f32[4096]{0} multiply(%convert.3315, %convert.3315)
  %reduce.689 = f32[] reduce(%multiply.7092, %constant.5451), dimensions={0}, to_apply=%region_726.27000
  %add.4901 = f32[] add(%add.4900, %reduce.689)
  %multiply.7093 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3314, %broadcast.11281)
  %copy.2277 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7093)
  %copy.2278 = bf16[2,8192,4096]{2,1,0} copy(%copy.2277)
  %dot.657 = bf16[8,128,4096]{2,1,0} dot(%add.3827, %copy.2278), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.250 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.657), channel_id=701, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.108.clone
  %dynamic-slice.1307 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.250, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3316 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1307)
  %transpose.444 = f32[256,8,128]{0,2,1} transpose(%convert.3316), dimensions={2,0,1}
  %multiply.7094 = f32[256,8,128]{0,2,1} multiply(%transpose.444, %transpose.444)
  %reduce.690 = f32[] reduce(%multiply.7094, %constant.5451), dimensions={0,1,2}, to_apply=%region_727.27007
  %all-reduce.251 = f32[] all-reduce(%reduce.690), channel_id=702, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_727.27007.clone
  %add.4902 = f32[] add(%add.4901, %all-reduce.251)
  %copy.2279 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.570)
  %dot.658 = bf16[4096,32,128]{2,1,0} dot(%copy.1781, %copy.2279), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.252 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.658), channel_id=703, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.109.clone
  %dynamic-slice.1309 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.252, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3317 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1309)
  %transpose.445 = f32[32,128,256]{1,0,2} transpose(%convert.3317), dimensions={1,2,0}
  %multiply.7095 = f32[32,128,256]{1,0,2} multiply(%transpose.445, %transpose.445)
  %reduce.691 = f32[] reduce(%multiply.7095, %constant.5451), dimensions={0,1,2}, to_apply=%region_728.27014
  %all-reduce.253 = f32[] all-reduce(%reduce.691), channel_id=704, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_728.27014.clone
  %add.4903 = f32[] add(%add.4902, %all-reduce.253)
  %dot.659 = bf16[32,128,4096]{2,1,0} dot(%add.3833, %copy.2278), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.254 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.659), channel_id=705, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.110.clone
  %dynamic-slice.1311 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.254, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3319 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1311)
  %transpose.446 = f32[256,32,128]{0,2,1} transpose(%convert.3319), dimensions={2,0,1}
  %multiply.7096 = f32[256,32,128]{0,2,1} multiply(%transpose.446, %transpose.446)
  %reduce.692 = f32[] reduce(%multiply.7096, %constant.5451), dimensions={0,1,2}, to_apply=%region_729.27021
  %all-reduce.255 = f32[] all-reduce(%reduce.692), channel_id=706, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_729.27021.clone
  %add.4904 = f32[] add(%add.4903, %all-reduce.255)
  %dot.660 = bf16[8,128,4096]{2,1,0} dot(%copy.1783, %copy.2278), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.256 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.660), channel_id=707, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.111.clone
  %dynamic-slice.1313 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.256, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3320 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1313)
  %transpose.447 = f32[256,8,128]{0,2,1} transpose(%convert.3320), dimensions={2,0,1}
  %multiply.7097 = f32[256,8,128]{0,2,1} multiply(%transpose.447, %transpose.447)
  %reduce.693 = f32[] reduce(%multiply.7097, %constant.5451), dimensions={0,1,2}, to_apply=%region_730.27028
  %all-reduce.257 = f32[] all-reduce(%reduce.693), channel_id=708, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_730.27028.clone
  %add.4905 = f32[] add(%add.4904, %all-reduce.257)
  %multiply.7098 = f32[2,8192,4096]{2,1,0} multiply(%convert.2026, %broadcast.11075)
  %convert.3321 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7098)
  %multiply.7099 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3321, %broadcast.11072)
  %copy.2281 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7099)
  %dot.661 = bf16[4096,14336]{1,0} dot(%copy.2281, %add.3756), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.258 = bf16[4096,14336]{1,0} all-reduce(%dot.661), channel_id=709, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.112.clone
  %dynamic-slice.1315 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.258, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3323 = f32[256,14336]{0,1} convert(%dynamic-slice.1315)
  %multiply.7101 = f32[256,14336]{0,1} multiply(%convert.3323, %convert.3323)
  %reduce.694 = f32[] reduce(%multiply.7101, %constant.5451), dimensions={0,1}, to_apply=%region_731.27035
  %all-reduce.259 = f32[] all-reduce(%reduce.694), channel_id=710, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_731.27035.clone
  %add.4906 = f32[] add(%add.4905, %all-reduce.259)
  %dot.662 = bf16[4096,14336]{1,0} dot(%copy.2281, %multiply.4720), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.260 = bf16[4096,14336]{1,0} all-reduce(%dot.662), channel_id=711, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.113.clone
  %dynamic-slice.1317 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.260, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3324 = f32[256,14336]{0,1} convert(%dynamic-slice.1317)
  %multiply.7102 = f32[256,14336]{0,1} multiply(%convert.3324, %convert.3324)
  %reduce.695 = f32[] reduce(%multiply.7102, %constant.5451), dimensions={0,1}, to_apply=%region_732.27042
  %all-reduce.261 = f32[] all-reduce(%reduce.695), channel_id=712, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_732.27042.clone
  %add.4907 = f32[] add(%add.4906, %all-reduce.261)
  %multiply.7103 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4719, %get-tuple-element.524)
  %copy.2282 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7103)
  %dot.663 = bf16[14336,4096]{1,0} dot(%copy.2282, %copy.1755), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.262 = bf16[14336,4096]{1,0} all-reduce(%dot.663), channel_id=713, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.114.clone
  %dynamic-slice.1319 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.262, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3325 = f32[14336,256]{0,1} convert(%dynamic-slice.1319)
  %multiply.7104 = f32[14336,256]{0,1} multiply(%convert.3325, %convert.3325)
  %reduce.696 = f32[] reduce(%multiply.7104, %constant.5451), dimensions={0,1}, to_apply=%region_733.27049
  %all-reduce.263 = f32[] all-reduce(%reduce.696), channel_id=714, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_733.27049.clone
  %add.4908 = f32[] add(%add.4907, %all-reduce.263)
  %multiply.7105 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3321, %copy.1757)
  %reduce.697 = bf16[4096]{0} reduce(%multiply.7105, %constant.10307), dimensions={0,1}, to_apply=%region_279.14525
  %all-reduce.264 = bf16[4096]{0} all-reduce(%reduce.697), channel_id=715, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_279.14525.clone
  %convert.3326 = f32[4096]{0} convert(%all-reduce.264)
  %multiply.7106 = f32[4096]{0} multiply(%convert.3326, %convert.3326)
  %reduce.698 = f32[] reduce(%multiply.7106, %constant.5451), dimensions={0}, to_apply=%region_734.27056
  %add.4909 = f32[] add(%add.4908, %reduce.698)
  %multiply.7107 = f32[2,8192,4096]{2,1,0} multiply(%convert.2064, %broadcast.11182)
  %convert.3328 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7107)
  %multiply.7108 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3328, %copy.1770)
  %reduce.699 = bf16[4096]{0} reduce(%multiply.7108, %constant.10307), dimensions={0,1}, to_apply=%region_283.14659
  %all-reduce.265 = bf16[4096]{0} all-reduce(%reduce.699), channel_id=716, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_283.14659.clone
  %convert.3329 = f32[4096]{0} convert(%all-reduce.265)
  %multiply.7109 = f32[4096]{0} multiply(%convert.3329, %convert.3329)
  %reduce.700 = f32[] reduce(%multiply.7109, %constant.5451), dimensions={0}, to_apply=%region_735.27063
  %add.4910 = f32[] add(%add.4909, %reduce.700)
  %multiply.7110 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3328, %broadcast.11179)
  %copy.2283 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7110)
  %copy.2284 = bf16[2,8192,4096]{2,1,0} copy(%copy.2283)
  %dot.664 = bf16[8,128,4096]{2,1,0} dot(%add.3786, %copy.2284), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.266 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.664), channel_id=717, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.115.clone
  %dynamic-slice.1321 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.266, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3330 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1321)
  %transpose.448 = f32[256,8,128]{0,2,1} transpose(%convert.3330), dimensions={2,0,1}
  %multiply.7111 = f32[256,8,128]{0,2,1} multiply(%transpose.448, %transpose.448)
  %reduce.701 = f32[] reduce(%multiply.7111, %constant.5451), dimensions={0,1,2}, to_apply=%region_736.27070
  %all-reduce.267 = f32[] all-reduce(%reduce.701), channel_id=718, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_736.27070.clone
  %add.4911 = f32[] add(%add.4910, %all-reduce.267)
  %copy.2285 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.537)
  %dot.665 = bf16[4096,32,128]{2,1,0} dot(%copy.1763, %copy.2285), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.268 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.665), channel_id=719, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.116.clone
  %dynamic-slice.1323 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.268, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3331 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1323)
  %transpose.449 = f32[32,128,256]{1,0,2} transpose(%convert.3331), dimensions={1,2,0}
  %multiply.7112 = f32[32,128,256]{1,0,2} multiply(%transpose.449, %transpose.449)
  %reduce.702 = f32[] reduce(%multiply.7112, %constant.5451), dimensions={0,1,2}, to_apply=%region_737.27077
  %all-reduce.269 = f32[] all-reduce(%reduce.702), channel_id=720, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_737.27077.clone
  %add.4912 = f32[] add(%add.4911, %all-reduce.269)
  %dot.666 = bf16[32,128,4096]{2,1,0} dot(%add.3791, %copy.2284), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.270 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.666), channel_id=721, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.117.clone
  %dynamic-slice.1325 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.270, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3332 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1325)
  %transpose.450 = f32[256,32,128]{0,2,1} transpose(%convert.3332), dimensions={2,0,1}
  %multiply.7113 = f32[256,32,128]{0,2,1} multiply(%transpose.450, %transpose.450)
  %reduce.703 = f32[] reduce(%multiply.7113, %constant.5451), dimensions={0,1,2}, to_apply=%region_738.27084
  %all-reduce.271 = f32[] all-reduce(%reduce.703), channel_id=722, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_738.27084.clone
  %add.4913 = f32[] add(%add.4912, %all-reduce.271)
  %dot.667 = bf16[8,128,4096]{2,1,0} dot(%copy.1765, %copy.2284), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.272 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.667), channel_id=723, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.118.clone
  %dynamic-slice.1327 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.272, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3334 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1327)
  %transpose.451 = f32[256,8,128]{0,2,1} transpose(%convert.3334), dimensions={2,0,1}
  %multiply.7114 = f32[256,8,128]{0,2,1} multiply(%transpose.451, %transpose.451)
  %reduce.704 = f32[] reduce(%multiply.7114, %constant.5451), dimensions={0,1,2}, to_apply=%region_739.27091
  %all-reduce.273 = f32[] all-reduce(%reduce.704), channel_id=724, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_739.27091.clone
  %add.4914 = f32[] add(%add.4913, %all-reduce.273)
  %multiply.7115 = f32[2,8192,4096]{2,1,0} multiply(%convert.1980, %broadcast.10964)
  %convert.3335 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7115)
  %multiply.7117 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3335, %broadcast.10959)
  %copy.2287 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7117)
  %dot.668 = bf16[4096,14336]{1,0} dot(%copy.2287, %add.3715), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.274 = bf16[4096,14336]{1,0} all-reduce(%dot.668), channel_id=725, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.119.clone
  %dynamic-slice.1329 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.274, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3336 = f32[256,14336]{0,1} convert(%dynamic-slice.1329)
  %multiply.7119 = f32[256,14336]{0,1} multiply(%convert.3336, %convert.3336)
  %reduce.705 = f32[] reduce(%multiply.7119, %constant.5451), dimensions={0,1}, to_apply=%region_740.27098
  %all-reduce.275 = f32[] all-reduce(%reduce.705), channel_id=726, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_740.27098.clone
  %add.4915 = f32[] add(%add.4914, %all-reduce.275)
  %dot.669 = bf16[4096,14336]{1,0} dot(%copy.2287, %multiply.4634), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.276 = bf16[4096,14336]{1,0} all-reduce(%dot.669), channel_id=727, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.120.clone
  %dynamic-slice.1331 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.276, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3337 = f32[256,14336]{0,1} convert(%dynamic-slice.1331)
  %multiply.7120 = f32[256,14336]{0,1} multiply(%convert.3337, %convert.3337)
  %reduce.706 = f32[] reduce(%multiply.7120, %constant.5451), dimensions={0,1}, to_apply=%region_741.27105
  %all-reduce.277 = f32[] all-reduce(%reduce.706), channel_id=728, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_741.27105.clone
  %add.4916 = f32[] add(%add.4915, %all-reduce.277)
  %multiply.7121 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4633, %get-tuple-element.491)
  %copy.2288 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7121)
  %dot.670 = bf16[14336,4096]{1,0} dot(%copy.2288, %copy.1737), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.278 = bf16[14336,4096]{1,0} all-reduce(%dot.670), channel_id=729, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.121.clone
  %dynamic-slice.1333 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.278, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3338 = f32[14336,256]{0,1} convert(%dynamic-slice.1333)
  %multiply.7122 = f32[14336,256]{0,1} multiply(%convert.3338, %convert.3338)
  %reduce.707 = f32[] reduce(%multiply.7122, %constant.5451), dimensions={0,1}, to_apply=%region_742.27112
  %all-reduce.279 = f32[] all-reduce(%reduce.707), channel_id=730, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_742.27112.clone
  %add.4918 = f32[] add(%add.4916, %all-reduce.279)
  %multiply.7123 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3335, %copy.1739)
  %reduce.708 = bf16[4096]{0} reduce(%multiply.7123, %constant.10307), dimensions={0,1}, to_apply=%region_266.14033
  %all-reduce.280 = bf16[4096]{0} all-reduce(%reduce.708), channel_id=731, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_266.14033.clone
  %convert.3339 = f32[4096]{0} convert(%all-reduce.280)
  %multiply.7124 = f32[4096]{0} multiply(%convert.3339, %convert.3339)
  %reduce.709 = f32[] reduce(%multiply.7124, %constant.5451), dimensions={0}, to_apply=%region_743.27119
  %add.4919 = f32[] add(%add.4918, %reduce.709)
  %multiply.7125 = f32[2,8192,4096]{2,1,0} multiply(%convert.2018, %broadcast.11068)
  %convert.3340 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7125)
  %multiply.7126 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3340, %copy.1752)
  %reduce.710 = bf16[4096]{0} reduce(%multiply.7126, %constant.10307), dimensions={0,1}, to_apply=%region_270.14167
  %all-reduce.281 = bf16[4096]{0} all-reduce(%reduce.710), channel_id=732, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_270.14167.clone
  %convert.3341 = f32[4096]{0} convert(%all-reduce.281)
  %multiply.7127 = f32[4096]{0} multiply(%convert.3341, %convert.3341)
  %reduce.711 = f32[] reduce(%multiply.7127, %constant.5451), dimensions={0}, to_apply=%region_744.27126
  %add.4920 = f32[] add(%add.4919, %reduce.711)
  %multiply.7128 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3340, %broadcast.11065)
  %copy.2289 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7128)
  %copy.2290 = bf16[2,8192,4096]{2,1,0} copy(%copy.2289)
  %dot.671 = bf16[8,128,4096]{2,1,0} dot(%add.3745, %copy.2290), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.282 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.671), channel_id=733, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.122.clone
  %dynamic-slice.1335 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.282, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3342 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1335)
  %transpose.452 = f32[256,8,128]{0,2,1} transpose(%convert.3342), dimensions={2,0,1}
  %multiply.7129 = f32[256,8,128]{0,2,1} multiply(%transpose.452, %transpose.452)
  %reduce.712 = f32[] reduce(%multiply.7129, %constant.5451), dimensions={0,1,2}, to_apply=%region_745.27133
  %all-reduce.283 = f32[] all-reduce(%reduce.712), channel_id=734, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_745.27133.clone
  %add.4921 = f32[] add(%add.4920, %all-reduce.283)
  %copy.2291 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.504)
  %dot.672 = bf16[4096,32,128]{2,1,0} dot(%copy.1745, %copy.2291), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.284 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.672), channel_id=735, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.123.clone
  %dynamic-slice.1337 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.284, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3343 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1337)
  %transpose.453 = f32[32,128,256]{1,0,2} transpose(%convert.3343), dimensions={1,2,0}
  %multiply.7130 = f32[32,128,256]{1,0,2} multiply(%transpose.453, %transpose.453)
  %reduce.713 = f32[] reduce(%multiply.7130, %constant.5451), dimensions={0,1,2}, to_apply=%region_746.27140
  %all-reduce.285 = f32[] all-reduce(%reduce.713), channel_id=736, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_746.27140.clone
  %add.4922 = f32[] add(%add.4921, %all-reduce.285)
  %dot.673 = bf16[32,128,4096]{2,1,0} dot(%add.3750, %copy.2290), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.286 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.673), channel_id=737, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.124.clone
  %dynamic-slice.1339 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.286, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3344 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1339)
  %transpose.454 = f32[256,32,128]{0,2,1} transpose(%convert.3344), dimensions={2,0,1}
  %multiply.7131 = f32[256,32,128]{0,2,1} multiply(%transpose.454, %transpose.454)
  %reduce.714 = f32[] reduce(%multiply.7131, %constant.5451), dimensions={0,1,2}, to_apply=%region_747.27147
  %all-reduce.287 = f32[] all-reduce(%reduce.714), channel_id=738, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_747.27147.clone
  %add.4923 = f32[] add(%add.4922, %all-reduce.287)
  %dot.674 = bf16[8,128,4096]{2,1,0} dot(%copy.1747, %copy.2290), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.288 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.674), channel_id=739, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.125.clone
  %dynamic-slice.1341 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.288, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3345 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1341)
  %transpose.455 = f32[256,8,128]{0,2,1} transpose(%convert.3345), dimensions={2,0,1}
  %multiply.7132 = f32[256,8,128]{0,2,1} multiply(%transpose.455, %transpose.455)
  %reduce.715 = f32[] reduce(%multiply.7132, %constant.5451), dimensions={0,1,2}, to_apply=%region_748.27154
  %all-reduce.289 = f32[] all-reduce(%reduce.715), channel_id=740, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_748.27154.clone
  %add.4924 = f32[] add(%add.4923, %all-reduce.289)
  %multiply.7133 = f32[2,8192,4096]{2,1,0} multiply(%convert.1934, %broadcast.10842)
  %convert.3346 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7133)
  %multiply.7134 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3346, %broadcast.10838)
  %copy.2293 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7134)
  %dot.675 = bf16[4096,14336]{1,0} dot(%copy.2293, %add.3674), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.290 = bf16[4096,14336]{1,0} all-reduce(%dot.675), channel_id=741, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.126.clone
  %dynamic-slice.1343 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.290, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3347 = f32[256,14336]{0,1} convert(%dynamic-slice.1343)
  %multiply.7135 = f32[256,14336]{0,1} multiply(%convert.3347, %convert.3347)
  %reduce.716 = f32[] reduce(%multiply.7135, %constant.5451), dimensions={0,1}, to_apply=%region_749.27161
  %all-reduce.291 = f32[] all-reduce(%reduce.716), channel_id=742, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_749.27161.clone
  %add.4925 = f32[] add(%add.4924, %all-reduce.291)
  %dot.676 = bf16[4096,14336]{1,0} dot(%copy.2293, %multiply.4544), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.292 = bf16[4096,14336]{1,0} all-reduce(%dot.676), channel_id=743, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.127.clone
  %dynamic-slice.1345 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.292, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3350 = f32[256,14336]{0,1} convert(%dynamic-slice.1345)
  %multiply.7136 = f32[256,14336]{0,1} multiply(%convert.3350, %convert.3350)
  %reduce.717 = f32[] reduce(%multiply.7136, %constant.5451), dimensions={0,1}, to_apply=%region_750.27168
  %all-reduce.293 = f32[] all-reduce(%reduce.717), channel_id=744, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_750.27168.clone
  %add.4926 = f32[] add(%add.4925, %all-reduce.293)
  %multiply.7137 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4543, %get-tuple-element.458)
  %copy.2294 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7137)
  %dot.677 = bf16[14336,4096]{1,0} dot(%copy.2294, %copy.1719), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.294 = bf16[14336,4096]{1,0} all-reduce(%dot.677), channel_id=745, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.128.clone
  %dynamic-slice.1347 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.294, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3351 = f32[14336,256]{0,1} convert(%dynamic-slice.1347)
  %multiply.7138 = f32[14336,256]{0,1} multiply(%convert.3351, %convert.3351)
  %reduce.718 = f32[] reduce(%multiply.7138, %constant.5451), dimensions={0,1}, to_apply=%region_751.27175
  %all-reduce.295 = f32[] all-reduce(%reduce.718), channel_id=746, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_751.27175.clone
  %add.4927 = f32[] add(%add.4926, %all-reduce.295)
  %multiply.7139 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3346, %copy.1721)
  %reduce.719 = bf16[4096]{0} reduce(%multiply.7139, %constant.10307), dimensions={0,1}, to_apply=%region_253.13541
  %all-reduce.296 = bf16[4096]{0} all-reduce(%reduce.719), channel_id=747, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_253.13541.clone
  %convert.3352 = f32[4096]{0} convert(%all-reduce.296)
  %multiply.7140 = f32[4096]{0} multiply(%convert.3352, %convert.3352)
  %reduce.720 = f32[] reduce(%multiply.7140, %constant.5451), dimensions={0}, to_apply=%region_752.27182
  %add.4928 = f32[] add(%add.4927, %reduce.720)
  %multiply.7141 = f32[2,8192,4096]{2,1,0} multiply(%convert.1973, %broadcast.10952)
  %convert.3353 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7141)
  %multiply.7142 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3353, %copy.1734)
  %reduce.721 = bf16[4096]{0} reduce(%multiply.7142, %constant.10307), dimensions={0,1}, to_apply=%region_257.13675
  %all-reduce.297 = bf16[4096]{0} all-reduce(%reduce.721), channel_id=748, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_257.13675.clone
  %convert.3354 = f32[4096]{0} convert(%all-reduce.297)
  %multiply.7143 = f32[4096]{0} multiply(%convert.3354, %convert.3354)
  %reduce.722 = f32[] reduce(%multiply.7143, %constant.5451), dimensions={0}, to_apply=%region_753.27189
  %add.4929 = f32[] add(%add.4928, %reduce.722)
  %multiply.7144 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3353, %broadcast.10948)
  %copy.2295 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7144)
  %copy.2296 = bf16[2,8192,4096]{2,1,0} copy(%copy.2295)
  %dot.678 = bf16[8,128,4096]{2,1,0} dot(%add.3704, %copy.2296), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.298 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.678), channel_id=749, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.129.clone
  %dynamic-slice.1349 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.298, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3355 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1349)
  %transpose.456 = f32[256,8,128]{0,2,1} transpose(%convert.3355), dimensions={2,0,1}
  %multiply.7146 = f32[256,8,128]{0,2,1} multiply(%transpose.456, %transpose.456)
  %reduce.723 = f32[] reduce(%multiply.7146, %constant.5451), dimensions={0,1,2}, to_apply=%region_754.27196
  %all-reduce.299 = f32[] all-reduce(%reduce.723), channel_id=750, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_754.27196.clone
  %add.4930 = f32[] add(%add.4929, %all-reduce.299)
  %copy.2297 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.471)
  %dot.679 = bf16[4096,32,128]{2,1,0} dot(%copy.1727, %copy.2297), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.300 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.679), channel_id=751, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.130.clone
  %dynamic-slice.1351 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.300, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3356 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1351)
  %transpose.457 = f32[32,128,256]{1,0,2} transpose(%convert.3356), dimensions={1,2,0}
  %multiply.7147 = f32[32,128,256]{1,0,2} multiply(%transpose.457, %transpose.457)
  %reduce.724 = f32[] reduce(%multiply.7147, %constant.5451), dimensions={0,1,2}, to_apply=%region_755.27203
  %all-reduce.301 = f32[] all-reduce(%reduce.724), channel_id=752, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_755.27203.clone
  %add.4931 = f32[] add(%add.4930, %all-reduce.301)
  %dot.680 = bf16[32,128,4096]{2,1,0} dot(%add.3709, %copy.2296), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.302 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.680), channel_id=753, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.131.clone
  %dynamic-slice.1353 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.302, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3357 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1353)
  %transpose.458 = f32[256,32,128]{0,2,1} transpose(%convert.3357), dimensions={2,0,1}
  %multiply.7148 = f32[256,32,128]{0,2,1} multiply(%transpose.458, %transpose.458)
  %reduce.725 = f32[] reduce(%multiply.7148, %constant.5451), dimensions={0,1,2}, to_apply=%region_756.27210
  %all-reduce.303 = f32[] all-reduce(%reduce.725), channel_id=754, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_756.27210.clone
  %add.4932 = f32[] add(%add.4931, %all-reduce.303)
  %dot.681 = bf16[8,128,4096]{2,1,0} dot(%copy.1729, %copy.2296), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.304 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.681), channel_id=755, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.132.clone
  %dynamic-slice.1355 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.304, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3359 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1355)
  %transpose.459 = f32[256,8,128]{0,2,1} transpose(%convert.3359), dimensions={2,0,1}
  %multiply.7149 = f32[256,8,128]{0,2,1} multiply(%transpose.459, %transpose.459)
  %reduce.726 = f32[] reduce(%multiply.7149, %constant.5451), dimensions={0,1,2}, to_apply=%region_757.27217
  %all-reduce.305 = f32[] all-reduce(%reduce.726), channel_id=756, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_757.27217.clone
  %add.4933 = f32[] add(%add.4932, %all-reduce.305)
  %multiply.7151 = f32[2,8192,4096]{2,1,0} multiply(%convert.1885, %broadcast.10735)
  %convert.3360 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7151)
  %multiply.7152 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3360, %broadcast.10732)
  %copy.2299 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7152)
  %dot.682 = bf16[4096,14336]{1,0} dot(%copy.2299, %add.3634), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.306 = bf16[4096,14336]{1,0} all-reduce(%dot.682), channel_id=757, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.133.clone
  %dynamic-slice.1357 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.306, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3362 = f32[256,14336]{0,1} convert(%dynamic-slice.1357)
  %multiply.7153 = f32[256,14336]{0,1} multiply(%convert.3362, %convert.3362)
  %reduce.727 = f32[] reduce(%multiply.7153, %constant.5451), dimensions={0,1}, to_apply=%region_758.27224
  %all-reduce.307 = f32[] all-reduce(%reduce.727), channel_id=758, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_758.27224.clone
  %add.4934 = f32[] add(%add.4933, %all-reduce.307)
  %dot.683 = bf16[4096,14336]{1,0} dot(%copy.2299, %multiply.4457), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.308 = bf16[4096,14336]{1,0} all-reduce(%dot.683), channel_id=759, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.134.clone
  %dynamic-slice.1359 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.308, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3363 = f32[256,14336]{0,1} convert(%dynamic-slice.1359)
  %multiply.7154 = f32[256,14336]{0,1} multiply(%convert.3363, %convert.3363)
  %reduce.728 = f32[] reduce(%multiply.7154, %constant.5451), dimensions={0,1}, to_apply=%region_759.27231
  %all-reduce.309 = f32[] all-reduce(%reduce.728), channel_id=760, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_759.27231.clone
  %add.4935 = f32[] add(%add.4934, %all-reduce.309)
  %multiply.7155 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4456, %get-tuple-element.425)
  %copy.2300 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7155)
  %dot.684 = bf16[14336,4096]{1,0} dot(%copy.2300, %copy.1701), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.310 = bf16[14336,4096]{1,0} all-reduce(%dot.684), channel_id=761, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.135.clone
  %dynamic-slice.1361 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.310, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3365 = f32[14336,256]{0,1} convert(%dynamic-slice.1361)
  %multiply.7157 = f32[14336,256]{0,1} multiply(%convert.3365, %convert.3365)
  %reduce.729 = f32[] reduce(%multiply.7157, %constant.5451), dimensions={0,1}, to_apply=%region_760.27238
  %all-reduce.311 = f32[] all-reduce(%reduce.729), channel_id=762, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_760.27238.clone
  %add.4936 = f32[] add(%add.4935, %all-reduce.311)
  %multiply.7158 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3360, %copy.1703)
  %reduce.730 = bf16[4096]{0} reduce(%multiply.7158, %constant.10307), dimensions={0,1}, to_apply=%region_240.13049
  %all-reduce.312 = bf16[4096]{0} all-reduce(%reduce.730), channel_id=763, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_240.13049.clone
  %convert.3366 = f32[4096]{0} convert(%all-reduce.312)
  %multiply.7159 = f32[4096]{0} multiply(%convert.3366, %convert.3366)
  %reduce.731 = f32[] reduce(%multiply.7159, %constant.5451), dimensions={0}, to_apply=%region_761.27245
  %add.4937 = f32[] add(%add.4936, %reduce.731)
  %multiply.7160 = f32[2,8192,4096]{2,1,0} multiply(%convert.1925, %broadcast.10834)
  %convert.3367 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7160)
  %multiply.7161 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3367, %copy.1716)
  %reduce.732 = bf16[4096]{0} reduce(%multiply.7161, %constant.10307), dimensions={0,1}, to_apply=%region_244.13183
  %all-reduce.313 = bf16[4096]{0} all-reduce(%reduce.732), channel_id=764, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_244.13183.clone
  %convert.3368 = f32[4096]{0} convert(%all-reduce.313)
  %multiply.7162 = f32[4096]{0} multiply(%convert.3368, %convert.3368)
  %reduce.733 = f32[] reduce(%multiply.7162, %constant.5451), dimensions={0}, to_apply=%region_762.27252
  %add.4938 = f32[] add(%add.4937, %reduce.733)
  %multiply.7163 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3367, %broadcast.10831)
  %copy.2301 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7163)
  %copy.2302 = bf16[2,8192,4096]{2,1,0} copy(%copy.2301)
  %dot.685 = bf16[8,128,4096]{2,1,0} dot(%add.3663, %copy.2302), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.314 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.685), channel_id=765, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.136.clone
  %dynamic-slice.1363 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.314, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3369 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1363)
  %transpose.460 = f32[256,8,128]{0,2,1} transpose(%convert.3369), dimensions={2,0,1}
  %multiply.7164 = f32[256,8,128]{0,2,1} multiply(%transpose.460, %transpose.460)
  %reduce.734 = f32[] reduce(%multiply.7164, %constant.5451), dimensions={0,1,2}, to_apply=%region_763.27259
  %all-reduce.315 = f32[] all-reduce(%reduce.734), channel_id=766, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_763.27259.clone
  %add.4939 = f32[] add(%add.4938, %all-reduce.315)
  %copy.2303 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.438)
  %dot.686 = bf16[4096,32,128]{2,1,0} dot(%copy.1709, %copy.2303), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.316 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.686), channel_id=767, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.137.clone
  %dynamic-slice.1365 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.316, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3370 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1365)
  %transpose.461 = f32[32,128,256]{1,0,2} transpose(%convert.3370), dimensions={1,2,0}
  %multiply.7165 = f32[32,128,256]{1,0,2} multiply(%transpose.461, %transpose.461)
  %reduce.735 = f32[] reduce(%multiply.7165, %constant.5451), dimensions={0,1,2}, to_apply=%region_764.27266
  %all-reduce.317 = f32[] all-reduce(%reduce.735), channel_id=768, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_764.27266.clone
  %add.4940 = f32[] add(%add.4939, %all-reduce.317)
  %dot.687 = bf16[32,128,4096]{2,1,0} dot(%add.3668, %copy.2302), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.318 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.687), channel_id=769, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.138.clone
  %dynamic-slice.1367 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.318, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3371 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1367)
  %transpose.462 = f32[256,32,128]{0,2,1} transpose(%convert.3371), dimensions={2,0,1}
  %multiply.7166 = f32[256,32,128]{0,2,1} multiply(%transpose.462, %transpose.462)
  %reduce.736 = f32[] reduce(%multiply.7166, %constant.5451), dimensions={0,1,2}, to_apply=%region_765.27273
  %all-reduce.319 = f32[] all-reduce(%reduce.736), channel_id=770, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_765.27273.clone
  %add.4941 = f32[] add(%add.4940, %all-reduce.319)
  %dot.688 = bf16[8,128,4096]{2,1,0} dot(%copy.1711, %copy.2302), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.320 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.688), channel_id=771, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.139.clone
  %dynamic-slice.1369 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.320, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3372 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1369)
  %transpose.463 = f32[256,8,128]{0,2,1} transpose(%convert.3372), dimensions={2,0,1}
  %multiply.7167 = f32[256,8,128]{0,2,1} multiply(%transpose.463, %transpose.463)
  %reduce.737 = f32[] reduce(%multiply.7167, %constant.5451), dimensions={0,1,2}, to_apply=%region_766.27280
  %all-reduce.321 = f32[] all-reduce(%reduce.737), channel_id=772, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_766.27280.clone
  %add.4942 = f32[] add(%add.4941, %all-reduce.321)
  %multiply.7168 = f32[2,8192,4096]{2,1,0} multiply(%convert.1842, %broadcast.10624)
  %convert.3373 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7168)
  %multiply.7169 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3373, %broadcast.10620)
  %copy.2305 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7169)
  %dot.689 = bf16[4096,14336]{1,0} dot(%copy.2305, %add.3591), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.322 = bf16[4096,14336]{1,0} all-reduce(%dot.689), channel_id=773, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.140.clone
  %dynamic-slice.1371 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.322, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3374 = f32[256,14336]{0,1} convert(%dynamic-slice.1371)
  %multiply.7170 = f32[256,14336]{0,1} multiply(%convert.3374, %convert.3374)
  %reduce.738 = f32[] reduce(%multiply.7170, %constant.5451), dimensions={0,1}, to_apply=%region_767.27287
  %all-reduce.323 = f32[] all-reduce(%reduce.738), channel_id=774, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_767.27287.clone
  %add.4943 = f32[] add(%add.4942, %all-reduce.323)
  %dot.690 = bf16[4096,14336]{1,0} dot(%copy.2305, %multiply.4370), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.324 = bf16[4096,14336]{1,0} all-reduce(%dot.690), channel_id=775, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.141.clone
  %dynamic-slice.1373 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.324, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3375 = f32[256,14336]{0,1} convert(%dynamic-slice.1373)
  %multiply.7171 = f32[256,14336]{0,1} multiply(%convert.3375, %convert.3375)
  %reduce.739 = f32[] reduce(%multiply.7171, %constant.5451), dimensions={0,1}, to_apply=%region_768.27294
  %all-reduce.325 = f32[] all-reduce(%reduce.739), channel_id=776, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_768.27294.clone
  %add.4944 = f32[] add(%add.4943, %all-reduce.325)
  %multiply.7172 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4369, %get-tuple-element.392)
  %copy.2306 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7172)
  %dot.691 = bf16[14336,4096]{1,0} dot(%copy.2306, %copy.1683), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.326 = bf16[14336,4096]{1,0} all-reduce(%dot.691), channel_id=777, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.142.clone
  %dynamic-slice.1375 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.326, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3376 = f32[14336,256]{0,1} convert(%dynamic-slice.1375)
  %multiply.7173 = f32[14336,256]{0,1} multiply(%convert.3376, %convert.3376)
  %reduce.740 = f32[] reduce(%multiply.7173, %constant.5451), dimensions={0,1}, to_apply=%region_769.27301
  %all-reduce.327 = f32[] all-reduce(%reduce.740), channel_id=778, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_769.27301.clone
  %add.4945 = f32[] add(%add.4944, %all-reduce.327)
  %multiply.7174 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3373, %copy.1685)
  %reduce.741 = bf16[4096]{0} reduce(%multiply.7174, %constant.10307), dimensions={0,1}, to_apply=%region_227.12557
  %all-reduce.328 = bf16[4096]{0} all-reduce(%reduce.741), channel_id=779, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_227.12557.clone
  %convert.3377 = f32[4096]{0} convert(%all-reduce.328)
  %multiply.7175 = f32[4096]{0} multiply(%convert.3377, %convert.3377)
  %reduce.742 = f32[] reduce(%multiply.7175, %constant.5451), dimensions={0}, to_apply=%region_770.27308
  %add.4946 = f32[] add(%add.4945, %reduce.742)
  %multiply.7176 = f32[2,8192,4096]{2,1,0} multiply(%convert.1878, %broadcast.10727)
  %convert.3378 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7176)
  %multiply.7177 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3378, %copy.1698)
  %reduce.743 = bf16[4096]{0} reduce(%multiply.7177, %constant.10307), dimensions={0,1}, to_apply=%region_231.12691
  %all-reduce.329 = bf16[4096]{0} all-reduce(%reduce.743), channel_id=780, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_231.12691.clone
  %convert.3379 = f32[4096]{0} convert(%all-reduce.329)
  %multiply.7178 = f32[4096]{0} multiply(%convert.3379, %convert.3379)
  %reduce.744 = f32[] reduce(%multiply.7178, %constant.5451), dimensions={0}, to_apply=%region_771.27315
  %add.4947 = f32[] add(%add.4946, %reduce.744)
  %multiply.7179 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3378, %broadcast.10723)
  %copy.2307 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7179)
  %copy.2308 = bf16[2,8192,4096]{2,1,0} copy(%copy.2307)
  %dot.692 = bf16[8,128,4096]{2,1,0} dot(%add.3623, %copy.2308), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.330 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.692), channel_id=781, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.143.clone
  %dynamic-slice.1377 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.330, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3380 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1377)
  %transpose.464 = f32[256,8,128]{0,2,1} transpose(%convert.3380), dimensions={2,0,1}
  %multiply.7180 = f32[256,8,128]{0,2,1} multiply(%transpose.464, %transpose.464)
  %reduce.745 = f32[] reduce(%multiply.7180, %constant.5451), dimensions={0,1,2}, to_apply=%region_772.27322
  %all-reduce.331 = f32[] all-reduce(%reduce.745), channel_id=782, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_772.27322.clone
  %add.4949 = f32[] add(%add.4947, %all-reduce.331)
  %copy.2309 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.405)
  %dot.693 = bf16[4096,32,128]{2,1,0} dot(%copy.1691, %copy.2309), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.332 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.693), channel_id=783, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.144.clone
  %dynamic-slice.1379 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.332, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3381 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1379)
  %transpose.465 = f32[32,128,256]{1,0,2} transpose(%convert.3381), dimensions={1,2,0}
  %multiply.7181 = f32[32,128,256]{1,0,2} multiply(%transpose.465, %transpose.465)
  %reduce.746 = f32[] reduce(%multiply.7181, %constant.5451), dimensions={0,1,2}, to_apply=%region_773.27329
  %all-reduce.333 = f32[] all-reduce(%reduce.746), channel_id=784, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_773.27329.clone
  %add.4950 = f32[] add(%add.4949, %all-reduce.333)
  %dot.694 = bf16[32,128,4096]{2,1,0} dot(%add.3628, %copy.2308), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.334 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.694), channel_id=785, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.145.clone
  %dynamic-slice.1381 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.334, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3382 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1381)
  %transpose.466 = f32[256,32,128]{0,2,1} transpose(%convert.3382), dimensions={2,0,1}
  %multiply.7182 = f32[256,32,128]{0,2,1} multiply(%transpose.466, %transpose.466)
  %reduce.747 = f32[] reduce(%multiply.7182, %constant.5451), dimensions={0,1,2}, to_apply=%region_774.27336
  %all-reduce.335 = f32[] all-reduce(%reduce.747), channel_id=786, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_774.27336.clone
  %add.4951 = f32[] add(%add.4950, %all-reduce.335)
  %dot.695 = bf16[8,128,4096]{2,1,0} dot(%copy.1693, %copy.2308), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.336 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.695), channel_id=787, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.146.clone
  %dynamic-slice.1383 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.336, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3383 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1383)
  %transpose.467 = f32[256,8,128]{0,2,1} transpose(%convert.3383), dimensions={2,0,1}
  %multiply.7183 = f32[256,8,128]{0,2,1} multiply(%transpose.467, %transpose.467)
  %reduce.748 = f32[] reduce(%multiply.7183, %constant.5451), dimensions={0,1,2}, to_apply=%region_775.27343
  %all-reduce.337 = f32[] all-reduce(%reduce.748), channel_id=788, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_775.27343.clone
  %add.4952 = f32[] add(%add.4951, %all-reduce.337)
  %multiply.7184 = f32[2,8192,4096]{2,1,0} multiply(%convert.1796, %broadcast.10517)
  %convert.3384 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7184)
  %multiply.7185 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3384, %broadcast.10514)
  %copy.2311 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7185)
  %dot.696 = bf16[4096,14336]{1,0} dot(%copy.2311, %add.3546), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.338 = bf16[4096,14336]{1,0} all-reduce(%dot.696), channel_id=789, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.147.clone
  %dynamic-slice.1385 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.338, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3386 = f32[256,14336]{0,1} convert(%dynamic-slice.1385)
  %multiply.7186 = f32[256,14336]{0,1} multiply(%convert.3386, %convert.3386)
  %reduce.749 = f32[] reduce(%multiply.7186, %constant.5451), dimensions={0,1}, to_apply=%region_776.27350
  %all-reduce.339 = f32[] all-reduce(%reduce.749), channel_id=790, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_776.27350.clone
  %add.4953 = f32[] add(%add.4952, %all-reduce.339)
  %dot.697 = bf16[4096,14336]{1,0} dot(%copy.2311, %multiply.4282), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.340 = bf16[4096,14336]{1,0} all-reduce(%dot.697), channel_id=791, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.148.clone
  %dynamic-slice.1387 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.340, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3387 = f32[256,14336]{0,1} convert(%dynamic-slice.1387)
  %multiply.7187 = f32[256,14336]{0,1} multiply(%convert.3387, %convert.3387)
  %reduce.750 = f32[] reduce(%multiply.7187, %constant.5451), dimensions={0,1}, to_apply=%region_777.27357
  %all-reduce.341 = f32[] all-reduce(%reduce.750), channel_id=792, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_777.27357.clone
  %add.4954 = f32[] add(%add.4953, %all-reduce.341)
  %multiply.7188 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4281, %get-tuple-element.359)
  %copy.2312 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7188)
  %dot.698 = bf16[14336,4096]{1,0} dot(%copy.2312, %copy.1665), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.342 = bf16[14336,4096]{1,0} all-reduce(%dot.698), channel_id=793, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.149.clone
  %dynamic-slice.1389 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.342, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3388 = f32[14336,256]{0,1} convert(%dynamic-slice.1389)
  %multiply.7189 = f32[14336,256]{0,1} multiply(%convert.3388, %convert.3388)
  %reduce.751 = f32[] reduce(%multiply.7189, %constant.5451), dimensions={0,1}, to_apply=%region_778.27364
  %all-reduce.343 = f32[] all-reduce(%reduce.751), channel_id=794, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_778.27364.clone
  %add.4955 = f32[] add(%add.4954, %all-reduce.343)
  %multiply.7190 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3384, %copy.1667)
  %reduce.752 = bf16[4096]{0} reduce(%multiply.7190, %constant.10307), dimensions={0,1}, to_apply=%region_214.12065
  %all-reduce.344 = bf16[4096]{0} all-reduce(%reduce.752), channel_id=795, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_214.12065.clone
  %convert.3389 = f32[4096]{0} convert(%all-reduce.344)
  %multiply.7191 = f32[4096]{0} multiply(%convert.3389, %convert.3389)
  %reduce.753 = f32[] reduce(%multiply.7191, %constant.5451), dimensions={0}, to_apply=%region_779.27371
  %add.4957 = f32[] add(%add.4955, %reduce.753)
  %multiply.7192 = f32[2,8192,4096]{2,1,0} multiply(%convert.1834, %broadcast.10616)
  %convert.3390 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7192)
  %multiply.7193 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3390, %copy.1680)
  %reduce.754 = bf16[4096]{0} reduce(%multiply.7193, %constant.10307), dimensions={0,1}, to_apply=%region_218.12199
  %all-reduce.345 = bf16[4096]{0} all-reduce(%reduce.754), channel_id=796, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_218.12199.clone
  %convert.3391 = f32[4096]{0} convert(%all-reduce.345)
  %multiply.7194 = f32[4096]{0} multiply(%convert.3391, %convert.3391)
  %reduce.755 = f32[] reduce(%multiply.7194, %constant.5451), dimensions={0}, to_apply=%region_780.27378
  %add.4958 = f32[] add(%add.4957, %reduce.755)
  %multiply.7195 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3390, %broadcast.10613)
  %copy.2313 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7195)
  %copy.2314 = bf16[2,8192,4096]{2,1,0} copy(%copy.2313)
  %dot.699 = bf16[8,128,4096]{2,1,0} dot(%add.3578, %copy.2314), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.346 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.699), channel_id=797, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.150.clone
  %dynamic-slice.1391 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.346, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3392 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1391)
  %transpose.468 = f32[256,8,128]{0,2,1} transpose(%convert.3392), dimensions={2,0,1}
  %multiply.7196 = f32[256,8,128]{0,2,1} multiply(%transpose.468, %transpose.468)
  %reduce.756 = f32[] reduce(%multiply.7196, %constant.5451), dimensions={0,1,2}, to_apply=%region_781.27385
  %all-reduce.347 = f32[] all-reduce(%reduce.756), channel_id=798, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_781.27385.clone
  %add.4959 = f32[] add(%add.4958, %all-reduce.347)
  %copy.2315 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.372)
  %dot.700 = bf16[4096,32,128]{2,1,0} dot(%copy.1673, %copy.2315), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.348 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.700), channel_id=799, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.151.clone
  %dynamic-slice.1393 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.348, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3394 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1393)
  %transpose.469 = f32[32,128,256]{1,0,2} transpose(%convert.3394), dimensions={1,2,0}
  %multiply.7197 = f32[32,128,256]{1,0,2} multiply(%transpose.469, %transpose.469)
  %reduce.757 = f32[] reduce(%multiply.7197, %constant.5451), dimensions={0,1,2}, to_apply=%region_782.27392
  %all-reduce.349 = f32[] all-reduce(%reduce.757), channel_id=800, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_782.27392.clone
  %add.4960 = f32[] add(%add.4959, %all-reduce.349)
  %dot.701 = bf16[32,128,4096]{2,1,0} dot(%add.3585, %copy.2314), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.350 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.701), channel_id=801, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.152.clone
  %dynamic-slice.1395 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.350, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3396 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1395)
  %transpose.470 = f32[256,32,128]{0,2,1} transpose(%convert.3396), dimensions={2,0,1}
  %multiply.7198 = f32[256,32,128]{0,2,1} multiply(%transpose.470, %transpose.470)
  %reduce.758 = f32[] reduce(%multiply.7198, %constant.5451), dimensions={0,1,2}, to_apply=%region_783.27399
  %all-reduce.351 = f32[] all-reduce(%reduce.758), channel_id=802, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_783.27399.clone
  %add.4961 = f32[] add(%add.4960, %all-reduce.351)
  %dot.702 = bf16[8,128,4096]{2,1,0} dot(%copy.1675, %copy.2314), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.352 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.702), channel_id=803, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.153.clone
  %dynamic-slice.1397 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.352, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3397 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1397)
  %transpose.471 = f32[256,8,128]{0,2,1} transpose(%convert.3397), dimensions={2,0,1}
  %multiply.7199 = f32[256,8,128]{0,2,1} multiply(%transpose.471, %transpose.471)
  %reduce.759 = f32[] reduce(%multiply.7199, %constant.5451), dimensions={0,1,2}, to_apply=%region_784.27406
  %all-reduce.353 = f32[] all-reduce(%reduce.759), channel_id=804, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_784.27406.clone
  %add.4962 = f32[] add(%add.4961, %all-reduce.353)
  %multiply.7200 = f32[2,8192,4096]{2,1,0} multiply(%convert.1749, %broadcast.10398)
  %convert.3398 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7200)
  %multiply.7201 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3398, %broadcast.10394)
  %copy.2317 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7201)
  %dot.703 = bf16[4096,14336]{1,0} dot(%copy.2317, %add.3505), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.354 = bf16[4096,14336]{1,0} all-reduce(%dot.703), channel_id=805, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.154.clone
  %dynamic-slice.1399 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.354, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3399 = f32[256,14336]{0,1} convert(%dynamic-slice.1399)
  %multiply.7202 = f32[256,14336]{0,1} multiply(%convert.3399, %convert.3399)
  %reduce.760 = f32[] reduce(%multiply.7202, %constant.5451), dimensions={0,1}, to_apply=%region_785.27413
  %all-reduce.355 = f32[] all-reduce(%reduce.760), channel_id=806, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_785.27413.clone
  %add.4963 = f32[] add(%add.4962, %all-reduce.355)
  %dot.704 = bf16[4096,14336]{1,0} dot(%copy.2317, %multiply.4193), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.356 = bf16[4096,14336]{1,0} all-reduce(%dot.704), channel_id=807, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.155.clone
  %dynamic-slice.1401 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.356, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3400 = f32[256,14336]{0,1} convert(%dynamic-slice.1401)
  %multiply.7203 = f32[256,14336]{0,1} multiply(%convert.3400, %convert.3400)
  %reduce.761 = f32[] reduce(%multiply.7203, %constant.5451), dimensions={0,1}, to_apply=%region_786.27420
  %all-reduce.357 = f32[] all-reduce(%reduce.761), channel_id=808, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_786.27420.clone
  %add.4964 = f32[] add(%add.4963, %all-reduce.357)
  %multiply.7204 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4192, %get-tuple-element.326)
  %copy.2318 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7204)
  %dot.705 = bf16[14336,4096]{1,0} dot(%copy.2318, %copy.1647), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.358 = bf16[14336,4096]{1,0} all-reduce(%dot.705), channel_id=809, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.156.clone
  %dynamic-slice.1403 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.358, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3401 = f32[14336,256]{0,1} convert(%dynamic-slice.1403)
  %multiply.7205 = f32[14336,256]{0,1} multiply(%convert.3401, %convert.3401)
  %reduce.762 = f32[] reduce(%multiply.7205, %constant.5451), dimensions={0,1}, to_apply=%region_787.27427
  %all-reduce.359 = f32[] all-reduce(%reduce.762), channel_id=810, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_787.27427.clone
  %add.4965 = f32[] add(%add.4964, %all-reduce.359)
  %multiply.7206 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3398, %copy.1649)
  %reduce.763 = bf16[4096]{0} reduce(%multiply.7206, %constant.10307), dimensions={0,1}, to_apply=%region_201.11573
  %all-reduce.360 = bf16[4096]{0} all-reduce(%reduce.763), channel_id=811, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_201.11573.clone
  %convert.3402 = f32[4096]{0} convert(%all-reduce.360)
  %multiply.7207 = f32[4096]{0} multiply(%convert.3402, %convert.3402)
  %reduce.764 = f32[] reduce(%multiply.7207, %constant.5451), dimensions={0}, to_apply=%region_788.27434
  %add.4966 = f32[] add(%add.4965, %reduce.764)
  %multiply.7208 = f32[2,8192,4096]{2,1,0} multiply(%convert.1787, %broadcast.10510)
  %convert.3403 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7208)
  %multiply.7209 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3403, %copy.1662)
  %reduce.765 = bf16[4096]{0} reduce(%multiply.7209, %constant.10307), dimensions={0,1}, to_apply=%region_205.11707
  %all-reduce.361 = bf16[4096]{0} all-reduce(%reduce.765), channel_id=812, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_205.11707.clone
  %convert.3404 = f32[4096]{0} convert(%all-reduce.361)
  %multiply.7210 = f32[4096]{0} multiply(%convert.3404, %convert.3404)
  %reduce.766 = f32[] reduce(%multiply.7210, %constant.5451), dimensions={0}, to_apply=%region_789.27441
  %add.4967 = f32[] add(%add.4966, %reduce.766)
  %multiply.7211 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3403, %broadcast.10507)
  %copy.2319 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7211)
  %copy.2320 = bf16[2,8192,4096]{2,1,0} copy(%copy.2319)
  %dot.706 = bf16[8,128,4096]{2,1,0} dot(%add.3535, %copy.2320), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.362 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.706), channel_id=813, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.157.clone
  %dynamic-slice.1405 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.362, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3405 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1405)
  %transpose.472 = f32[256,8,128]{0,2,1} transpose(%convert.3405), dimensions={2,0,1}
  %multiply.7212 = f32[256,8,128]{0,2,1} multiply(%transpose.472, %transpose.472)
  %reduce.767 = f32[] reduce(%multiply.7212, %constant.5451), dimensions={0,1,2}, to_apply=%region_790.27448
  %all-reduce.363 = f32[] all-reduce(%reduce.767), channel_id=814, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_790.27448.clone
  %add.4968 = f32[] add(%add.4967, %all-reduce.363)
  %copy.2321 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.339)
  %dot.707 = bf16[4096,32,128]{2,1,0} dot(%copy.1655, %copy.2321), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.364 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.707), channel_id=815, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.158.clone
  %dynamic-slice.1407 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.364, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3406 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1407)
  %transpose.473 = f32[32,128,256]{1,0,2} transpose(%convert.3406), dimensions={1,2,0}
  %multiply.7213 = f32[32,128,256]{1,0,2} multiply(%transpose.473, %transpose.473)
  %reduce.768 = f32[] reduce(%multiply.7213, %constant.5451), dimensions={0,1,2}, to_apply=%region_791.27455
  %all-reduce.365 = f32[] all-reduce(%reduce.768), channel_id=816, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_791.27455.clone
  %add.4969 = f32[] add(%add.4968, %all-reduce.365)
  %dot.708 = bf16[32,128,4096]{2,1,0} dot(%add.3540, %copy.2320), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.366 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.708), channel_id=817, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.159.clone
  %dynamic-slice.1409 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.366, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3407 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1409)
  %transpose.474 = f32[256,32,128]{0,2,1} transpose(%convert.3407), dimensions={2,0,1}
  %multiply.7214 = f32[256,32,128]{0,2,1} multiply(%transpose.474, %transpose.474)
  %reduce.769 = f32[] reduce(%multiply.7214, %constant.5451), dimensions={0,1,2}, to_apply=%region_792.27462
  %all-reduce.367 = f32[] all-reduce(%reduce.769), channel_id=818, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_792.27462.clone
  %add.4970 = f32[] add(%add.4969, %all-reduce.367)
  %dot.709 = bf16[8,128,4096]{2,1,0} dot(%copy.1657, %copy.2320), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.368 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.709), channel_id=819, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.160.clone
  %dynamic-slice.1411 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.368, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3408 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1411)
  %transpose.475 = f32[256,8,128]{0,2,1} transpose(%convert.3408), dimensions={2,0,1}
  %multiply.7215 = f32[256,8,128]{0,2,1} multiply(%transpose.475, %transpose.475)
  %reduce.770 = f32[] reduce(%multiply.7215, %constant.5451), dimensions={0,1,2}, to_apply=%region_793.27469
  %all-reduce.369 = f32[] all-reduce(%reduce.770), channel_id=820, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_793.27469.clone
  %add.4971 = f32[] add(%add.4970, %all-reduce.369)
  %multiply.7217 = f32[2,8192,4096]{2,1,0} multiply(%convert.2948, %broadcast.13316)
  %convert.3409 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7217)
  %multiply.7218 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3409, %broadcast.13313)
  %copy.2323 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7218)
  %dot.710 = bf16[4096,14336]{1,0} dot(%copy.2323, %add.4592), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.370 = bf16[4096,14336]{1,0} all-reduce(%dot.710), channel_id=821, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.161.clone
  %dynamic-slice.1413 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.370, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3410 = f32[256,14336]{0,1} convert(%dynamic-slice.1413)
  %multiply.7219 = f32[256,14336]{0,1} multiply(%convert.3410, %convert.3410)
  %reduce.771 = f32[] reduce(%multiply.7219, %constant.5451), dimensions={0,1}, to_apply=%region_794.27476
  %all-reduce.371 = f32[] all-reduce(%reduce.771), channel_id=822, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_794.27476.clone
  %add.4972 = f32[] add(%add.4971, %all-reduce.371)
  %dot.711 = bf16[4096,14336]{1,0} dot(%copy.2323, %multiply.6479), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.372 = bf16[4096,14336]{1,0} all-reduce(%dot.711), channel_id=823, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.162.clone
  %dynamic-slice.1415 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.372, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3412 = f32[256,14336]{0,1} convert(%dynamic-slice.1415)
  %multiply.7220 = f32[256,14336]{0,1} multiply(%convert.3412, %convert.3412)
  %reduce.772 = f32[] reduce(%multiply.7220, %constant.5451), dimensions={0,1}, to_apply=%region_795.27483
  %all-reduce.373 = f32[] all-reduce(%reduce.772), channel_id=824, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_795.27483.clone
  %add.4973 = f32[] add(%add.4972, %all-reduce.373)
  %multiply.7221 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6478, %get-tuple-element.1184)
  %copy.2324 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7221)
  %dot.712 = bf16[14336,4096]{1,0} dot(%copy.2324, %copy.2115), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.374 = bf16[14336,4096]{1,0} all-reduce(%dot.712), channel_id=825, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.163.clone
  %dynamic-slice.1417 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.374, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3413 = f32[14336,256]{0,1} convert(%dynamic-slice.1417)
  %multiply.7222 = f32[14336,256]{0,1} multiply(%convert.3413, %convert.3413)
  %reduce.773 = f32[] reduce(%multiply.7222, %constant.5451), dimensions={0,1}, to_apply=%region_796.27490
  %all-reduce.375 = f32[] all-reduce(%reduce.773), channel_id=826, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_796.27490.clone
  %add.4975 = f32[] add(%add.4973, %all-reduce.375)
  %multiply.7223 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3409, %copy.2117)
  %reduce.774 = bf16[4096]{0} reduce(%multiply.7223, %constant.10307), dimensions={0,1}, to_apply=%region_539.24365
  %all-reduce.376 = bf16[4096]{0} all-reduce(%reduce.774), channel_id=827, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_539.24365.clone
  %convert.3414 = f32[4096]{0} convert(%all-reduce.376)
  %multiply.7224 = f32[4096]{0} multiply(%convert.3414, %convert.3414)
  %reduce.775 = f32[] reduce(%multiply.7224, %constant.5451), dimensions={0}, to_apply=%region_797.27497
  %add.4976 = f32[] add(%add.4975, %reduce.775)
  %multiply.7225 = f32[2,8192,4096]{2,1,0} multiply(%convert.2984, %broadcast.13433)
  %convert.3415 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7225)
  %multiply.7226 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3415, %copy.2130)
  %reduce.776 = bf16[4096]{0} reduce(%multiply.7226, %constant.10307), dimensions={0,1}, to_apply=%region_543.24499
  %all-reduce.377 = bf16[4096]{0} all-reduce(%reduce.776), channel_id=828, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_543.24499.clone
  %convert.3416 = f32[4096]{0} convert(%all-reduce.377)
  %multiply.7227 = f32[4096]{0} multiply(%convert.3416, %convert.3416)
  %reduce.777 = f32[] reduce(%multiply.7227, %constant.5451), dimensions={0}, to_apply=%region_798.27504
  %add.4977 = f32[] add(%add.4976, %reduce.777)
  %multiply.7228 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3415, %broadcast.13430)
  %copy.2325 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7228)
  %copy.2326 = bf16[2,8192,4096]{2,1,0} copy(%copy.2325)
  %dot.713 = bf16[8,128,4096]{2,1,0} dot(%add.4622, %copy.2326), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.378 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.713), channel_id=829, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.164.clone
  %dynamic-slice.1419 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.378, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3417 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1419)
  %transpose.476 = f32[256,8,128]{0,2,1} transpose(%convert.3417), dimensions={2,0,1}
  %multiply.7230 = f32[256,8,128]{0,2,1} multiply(%transpose.476, %transpose.476)
  %reduce.778 = f32[] reduce(%multiply.7230, %constant.5451), dimensions={0,1,2}, to_apply=%region_799.27511
  %all-reduce.379 = f32[] all-reduce(%reduce.778), channel_id=830, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_799.27511.clone
  %add.4978 = f32[] add(%add.4977, %all-reduce.379)
  %copy.2327 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1197)
  %dot.714 = bf16[4096,32,128]{2,1,0} dot(%copy.2123, %copy.2327), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.380 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.714), channel_id=831, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.165.clone
  %dynamic-slice.1421 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.380, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3418 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1421)
  %transpose.477 = f32[32,128,256]{1,0,2} transpose(%convert.3418), dimensions={1,2,0}
  %multiply.7231 = f32[32,128,256]{1,0,2} multiply(%transpose.477, %transpose.477)
  %reduce.779 = f32[] reduce(%multiply.7231, %constant.5451), dimensions={0,1,2}, to_apply=%region_800.27518
  %all-reduce.381 = f32[] all-reduce(%reduce.779), channel_id=832, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_800.27518.clone
  %add.4980 = f32[] add(%add.4978, %all-reduce.381)
  %dot.715 = bf16[32,128,4096]{2,1,0} dot(%add.4627, %copy.2326), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.382 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.715), channel_id=833, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.166.clone
  %dynamic-slice.1423 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.382, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3419 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1423)
  %transpose.478 = f32[256,32,128]{0,2,1} transpose(%convert.3419), dimensions={2,0,1}
  %multiply.7232 = f32[256,32,128]{0,2,1} multiply(%transpose.478, %transpose.478)
  %reduce.780 = f32[] reduce(%multiply.7232, %constant.5451), dimensions={0,1,2}, to_apply=%region_801.27525
  %all-reduce.383 = f32[] all-reduce(%reduce.780), channel_id=834, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_801.27525.clone
  %add.4981 = f32[] add(%add.4980, %all-reduce.383)
  %dot.716 = bf16[8,128,4096]{2,1,0} dot(%copy.2125, %copy.2326), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.384 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.716), channel_id=835, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.167.clone
  %dynamic-slice.1425 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.384, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3420 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1425)
  %transpose.479 = f32[256,8,128]{0,2,1} transpose(%convert.3420), dimensions={2,0,1}
  %multiply.7233 = f32[256,8,128]{0,2,1} multiply(%transpose.479, %transpose.479)
  %reduce.781 = f32[] reduce(%multiply.7233, %constant.5451), dimensions={0,1,2}, to_apply=%region_802.27532
  %all-reduce.385 = f32[] all-reduce(%reduce.781), channel_id=836, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_802.27532.clone
  %add.4982 = f32[] add(%add.4981, %all-reduce.385)
  %multiply.7234 = f32[2,8192,4096]{2,1,0} multiply(%convert.1703, %broadcast.10279)
  %convert.3421 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7234)
  %multiply.7235 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3421, %broadcast.10276)
  %copy.2329 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7235)
  %dot.717 = bf16[4096,14336]{1,0} dot(%copy.2329, %add.3464), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.386 = bf16[4096,14336]{1,0} all-reduce(%dot.717), channel_id=837, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.168.clone
  %dynamic-slice.1427 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.386, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3422 = f32[256,14336]{0,1} convert(%dynamic-slice.1427)
  %multiply.7237 = f32[256,14336]{0,1} multiply(%convert.3422, %convert.3422)
  %reduce.782 = f32[] reduce(%multiply.7237, %constant.5451), dimensions={0,1}, to_apply=%region_803.27539
  %all-reduce.387 = f32[] all-reduce(%reduce.782), channel_id=838, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_803.27539.clone
  %add.4983 = f32[] add(%add.4982, %all-reduce.387)
  %dot.718 = bf16[4096,14336]{1,0} dot(%copy.2329, %multiply.4105), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.388 = bf16[4096,14336]{1,0} all-reduce(%dot.718), channel_id=839, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.169.clone
  %dynamic-slice.1429 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.388, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3423 = f32[256,14336]{0,1} convert(%dynamic-slice.1429)
  %multiply.7238 = f32[256,14336]{0,1} multiply(%convert.3423, %convert.3423)
  %reduce.783 = f32[] reduce(%multiply.7238, %constant.5451), dimensions={0,1}, to_apply=%region_804.27546
  %all-reduce.389 = f32[] all-reduce(%reduce.783), channel_id=840, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_804.27546.clone
  %add.4985 = f32[] add(%add.4983, %all-reduce.389)
  %multiply.7239 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4104, %get-tuple-element.293)
  %copy.2330 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7239)
  %dot.719 = bf16[14336,4096]{1,0} dot(%copy.2330, %copy.1629), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.390 = bf16[14336,4096]{1,0} all-reduce(%dot.719), channel_id=841, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.170.clone
  %dynamic-slice.1431 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.390, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3424 = f32[14336,256]{0,1} convert(%dynamic-slice.1431)
  %multiply.7240 = f32[14336,256]{0,1} multiply(%convert.3424, %convert.3424)
  %reduce.784 = f32[] reduce(%multiply.7240, %constant.5451), dimensions={0,1}, to_apply=%region_805.27553
  %all-reduce.391 = f32[] all-reduce(%reduce.784), channel_id=842, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_805.27553.clone
  %add.4986 = f32[] add(%add.4985, %all-reduce.391)
  %multiply.7241 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3421, %copy.1631)
  %reduce.785 = bf16[4096]{0} reduce(%multiply.7241, %constant.10307), dimensions={0,1}, to_apply=%region_188.11081
  %all-reduce.392 = bf16[4096]{0} all-reduce(%reduce.785), channel_id=843, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_188.11081.clone
  %convert.3426 = f32[4096]{0} convert(%all-reduce.392)
  %multiply.7242 = f32[4096]{0} multiply(%convert.3426, %convert.3426)
  %reduce.786 = f32[] reduce(%multiply.7242, %constant.5451), dimensions={0}, to_apply=%region_806.27560
  %add.4987 = f32[] add(%add.4986, %reduce.786)
  %multiply.7243 = f32[2,8192,4096]{2,1,0} multiply(%convert.1741, %broadcast.10390)
  %convert.3427 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7243)
  %multiply.7244 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3427, %copy.1644)
  %reduce.787 = bf16[4096]{0} reduce(%multiply.7244, %constant.10307), dimensions={0,1}, to_apply=%region_192.11215
  %all-reduce.393 = bf16[4096]{0} all-reduce(%reduce.787), channel_id=844, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_192.11215.clone
  %convert.3428 = f32[4096]{0} convert(%all-reduce.393)
  %multiply.7246 = f32[4096]{0} multiply(%convert.3428, %convert.3428)
  %reduce.788 = f32[] reduce(%multiply.7246, %constant.5451), dimensions={0}, to_apply=%region_807.27567
  %add.4988 = f32[] add(%add.4987, %reduce.788)
  %multiply.7247 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3427, %broadcast.10386)
  %copy.2331 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7247)
  %copy.2332 = bf16[2,8192,4096]{2,1,0} copy(%copy.2331)
  %dot.720 = bf16[8,128,4096]{2,1,0} dot(%add.3494, %copy.2332), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.394 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.720), channel_id=845, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.171.clone
  %dynamic-slice.1433 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.394, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3429 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1433)
  %transpose.480 = f32[256,8,128]{0,2,1} transpose(%convert.3429), dimensions={2,0,1}
  %multiply.7248 = f32[256,8,128]{0,2,1} multiply(%transpose.480, %transpose.480)
  %reduce.789 = f32[] reduce(%multiply.7248, %constant.5451), dimensions={0,1,2}, to_apply=%region_808.27574
  %all-reduce.395 = f32[] all-reduce(%reduce.789), channel_id=846, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_808.27574.clone
  %add.4989 = f32[] add(%add.4988, %all-reduce.395)
  %copy.2333 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.306)
  %dot.721 = bf16[4096,32,128]{2,1,0} dot(%copy.1637, %copy.2333), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.396 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.721), channel_id=847, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.172.clone
  %dynamic-slice.1435 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.396, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3431 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1435)
  %transpose.481 = f32[32,128,256]{1,0,2} transpose(%convert.3431), dimensions={1,2,0}
  %multiply.7249 = f32[32,128,256]{1,0,2} multiply(%transpose.481, %transpose.481)
  %reduce.790 = f32[] reduce(%multiply.7249, %constant.5451), dimensions={0,1,2}, to_apply=%region_809.27581
  %all-reduce.397 = f32[] all-reduce(%reduce.790), channel_id=848, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_809.27581.clone
  %add.4990 = f32[] add(%add.4989, %all-reduce.397)
  %dot.722 = bf16[32,128,4096]{2,1,0} dot(%add.3499, %copy.2332), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.398 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.722), channel_id=849, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.173.clone
  %dynamic-slice.1437 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.398, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3432 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1437)
  %transpose.482 = f32[256,32,128]{0,2,1} transpose(%convert.3432), dimensions={2,0,1}
  %multiply.7250 = f32[256,32,128]{0,2,1} multiply(%transpose.482, %transpose.482)
  %reduce.791 = f32[] reduce(%multiply.7250, %constant.5451), dimensions={0,1,2}, to_apply=%region_810.27588
  %all-reduce.399 = f32[] all-reduce(%reduce.791), channel_id=850, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_810.27588.clone
  %add.4991 = f32[] add(%add.4990, %all-reduce.399)
  %dot.723 = bf16[8,128,4096]{2,1,0} dot(%copy.1639, %copy.2332), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.400 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.723), channel_id=851, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.174.clone
  %dynamic-slice.1439 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.400, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3433 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1439)
  %transpose.483 = f32[256,8,128]{0,2,1} transpose(%convert.3433), dimensions={2,0,1}
  %multiply.7251 = f32[256,8,128]{0,2,1} multiply(%transpose.483, %transpose.483)
  %reduce.792 = f32[] reduce(%multiply.7251, %constant.5451), dimensions={0,1,2}, to_apply=%region_811.27595
  %all-reduce.401 = f32[] all-reduce(%reduce.792), channel_id=852, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_811.27595.clone
  %add.4992 = f32[] add(%add.4991, %all-reduce.401)
  %multiply.7252 = f32[2,8192,4096]{2,1,0} multiply(%convert.1657, %broadcast.10171)
  %convert.3434 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7252)
  %multiply.7253 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3434, %broadcast.10167)
  %copy.2335 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7253)
  %dot.724 = bf16[4096,14336]{1,0} dot(%copy.2335, %add.3423), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.402 = bf16[4096,14336]{1,0} all-reduce(%dot.724), channel_id=853, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.175.clone
  %dynamic-slice.1441 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.402, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3436 = f32[256,14336]{0,1} convert(%dynamic-slice.1441)
  %multiply.7255 = f32[256,14336]{0,1} multiply(%convert.3436, %convert.3436)
  %reduce.793 = f32[] reduce(%multiply.7255, %constant.5451), dimensions={0,1}, to_apply=%region_812.27602
  %all-reduce.403 = f32[] all-reduce(%reduce.793), channel_id=854, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_812.27602.clone
  %add.4993 = f32[] add(%add.4992, %all-reduce.403)
  %dot.725 = bf16[4096,14336]{1,0} dot(%copy.2335, %multiply.4017), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.404 = bf16[4096,14336]{1,0} all-reduce(%dot.725), channel_id=855, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.176.clone
  %dynamic-slice.1443 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.404, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3437 = f32[256,14336]{0,1} convert(%dynamic-slice.1443)
  %multiply.7256 = f32[256,14336]{0,1} multiply(%convert.3437, %convert.3437)
  %reduce.794 = f32[] reduce(%multiply.7256, %constant.5451), dimensions={0,1}, to_apply=%region_813.27609
  %all-reduce.405 = f32[] all-reduce(%reduce.794), channel_id=856, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_813.27609.clone
  %add.4994 = f32[] add(%add.4993, %all-reduce.405)
  %multiply.7257 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.4016, %get-tuple-element.260)
  %copy.2336 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7257)
  %dot.726 = bf16[14336,4096]{1,0} dot(%copy.2336, %copy.1611), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.406 = bf16[14336,4096]{1,0} all-reduce(%dot.726), channel_id=857, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.177.clone
  %dynamic-slice.1445 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.406, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3438 = f32[14336,256]{0,1} convert(%dynamic-slice.1445)
  %multiply.7258 = f32[14336,256]{0,1} multiply(%convert.3438, %convert.3438)
  %reduce.795 = f32[] reduce(%multiply.7258, %constant.5451), dimensions={0,1}, to_apply=%region_814.27616
  %all-reduce.407 = f32[] all-reduce(%reduce.795), channel_id=858, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_814.27616.clone
  %add.4995 = f32[] add(%add.4994, %all-reduce.407)
  %multiply.7259 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3434, %copy.1613)
  %reduce.796 = bf16[4096]{0} reduce(%multiply.7259, %constant.10307), dimensions={0,1}, to_apply=%region_175.10589
  %all-reduce.408 = bf16[4096]{0} all-reduce(%reduce.796), channel_id=859, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_175.10589.clone
  %convert.3439 = f32[4096]{0} convert(%all-reduce.408)
  %multiply.7260 = f32[4096]{0} multiply(%convert.3439, %convert.3439)
  %reduce.797 = f32[] reduce(%multiply.7260, %constant.5451), dimensions={0}, to_apply=%region_815.27623
  %add.4996 = f32[] add(%add.4995, %reduce.797)
  %multiply.7261 = f32[2,8192,4096]{2,1,0} multiply(%convert.1696, %broadcast.10272)
  %convert.3440 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7261)
  %multiply.7262 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3440, %copy.1626)
  %reduce.798 = bf16[4096]{0} reduce(%multiply.7262, %constant.10307), dimensions={0,1}, to_apply=%region_179.10723
  %all-reduce.409 = bf16[4096]{0} all-reduce(%reduce.798), channel_id=860, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_179.10723.clone
  %convert.3441 = f32[4096]{0} convert(%all-reduce.409)
  %multiply.7263 = f32[4096]{0} multiply(%convert.3441, %convert.3441)
  %reduce.799 = f32[] reduce(%multiply.7263, %constant.5451), dimensions={0}, to_apply=%region_816.27630
  %add.4997 = f32[] add(%add.4996, %reduce.799)
  %multiply.7264 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3440, %broadcast.10269)
  %copy.2337 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7264)
  %copy.2338 = bf16[2,8192,4096]{2,1,0} copy(%copy.2337)
  %dot.727 = bf16[8,128,4096]{2,1,0} dot(%add.3453, %copy.2338), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.410 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.727), channel_id=861, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.178.clone
  %dynamic-slice.1447 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.410, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3443 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1447)
  %transpose.484 = f32[256,8,128]{0,2,1} transpose(%convert.3443), dimensions={2,0,1}
  %multiply.7265 = f32[256,8,128]{0,2,1} multiply(%transpose.484, %transpose.484)
  %reduce.800 = f32[] reduce(%multiply.7265, %constant.5451), dimensions={0,1,2}, to_apply=%region_817.27637
  %all-reduce.411 = f32[] all-reduce(%reduce.800), channel_id=862, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_817.27637.clone
  %add.4998 = f32[] add(%add.4997, %all-reduce.411)
  %copy.2339 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.273)
  %dot.728 = bf16[4096,32,128]{2,1,0} dot(%copy.1619, %copy.2339), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.412 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.728), channel_id=863, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.179.clone
  %dynamic-slice.1449 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.412, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3444 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1449)
  %transpose.485 = f32[32,128,256]{1,0,2} transpose(%convert.3444), dimensions={1,2,0}
  %multiply.7266 = f32[32,128,256]{1,0,2} multiply(%transpose.485, %transpose.485)
  %reduce.801 = f32[] reduce(%multiply.7266, %constant.5451), dimensions={0,1,2}, to_apply=%region_818.27644
  %all-reduce.413 = f32[] all-reduce(%reduce.801), channel_id=864, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_818.27644.clone
  %add.4999 = f32[] add(%add.4998, %all-reduce.413)
  %dot.729 = bf16[32,128,4096]{2,1,0} dot(%add.3458, %copy.2338), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.414 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.729), channel_id=865, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.180.clone
  %dynamic-slice.1451 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.414, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3445 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1451)
  %transpose.486 = f32[256,32,128]{0,2,1} transpose(%convert.3445), dimensions={2,0,1}
  %multiply.7268 = f32[256,32,128]{0,2,1} multiply(%transpose.486, %transpose.486)
  %reduce.802 = f32[] reduce(%multiply.7268, %constant.5451), dimensions={0,1,2}, to_apply=%region_819.27651
  %all-reduce.415 = f32[] all-reduce(%reduce.802), channel_id=866, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_819.27651.clone
  %add.5000 = f32[] add(%add.4999, %all-reduce.415)
  %dot.730 = bf16[8,128,4096]{2,1,0} dot(%copy.1621, %copy.2338), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.416 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.730), channel_id=867, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.181.clone
  %dynamic-slice.1453 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.416, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3446 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1453)
  %transpose.487 = f32[256,8,128]{0,2,1} transpose(%convert.3446), dimensions={2,0,1}
  %multiply.7269 = f32[256,8,128]{0,2,1} multiply(%transpose.487, %transpose.487)
  %reduce.803 = f32[] reduce(%multiply.7269, %constant.5451), dimensions={0,1,2}, to_apply=%region_820.27658
  %all-reduce.417 = f32[] all-reduce(%reduce.803), channel_id=868, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_820.27658.clone
  %add.5001 = f32[] add(%add.5000, %all-reduce.417)
  %multiply.7270 = f32[2,8192,4096]{2,1,0} multiply(%convert.2902, %broadcast.13211)
  %convert.3447 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7270)
  %multiply.7271 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3447, %broadcast.13208)
  %copy.2341 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7271)
  %dot.731 = bf16[4096,14336]{1,0} dot(%copy.2341, %add.4551), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.418 = bf16[4096,14336]{1,0} all-reduce(%dot.731), channel_id=869, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.182.clone
  %dynamic-slice.1455 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.418, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3448 = f32[256,14336]{0,1} convert(%dynamic-slice.1455)
  %multiply.7272 = f32[256,14336]{0,1} multiply(%convert.3448, %convert.3448)
  %reduce.804 = f32[] reduce(%multiply.7272, %constant.5451), dimensions={0,1}, to_apply=%region_821.27665
  %all-reduce.419 = f32[] all-reduce(%reduce.804), channel_id=870, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_821.27665.clone
  %add.5002 = f32[] add(%add.5001, %all-reduce.419)
  %dot.732 = bf16[4096,14336]{1,0} dot(%copy.2341, %multiply.6391), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.420 = bf16[4096,14336]{1,0} all-reduce(%dot.732), channel_id=871, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.183.clone
  %dynamic-slice.1457 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.420, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3449 = f32[256,14336]{0,1} convert(%dynamic-slice.1457)
  %multiply.7273 = f32[256,14336]{0,1} multiply(%convert.3449, %convert.3449)
  %reduce.805 = f32[] reduce(%multiply.7273, %constant.5451), dimensions={0,1}, to_apply=%region_822.27672
  %all-reduce.421 = f32[] all-reduce(%reduce.805), channel_id=872, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_822.27672.clone
  %add.5003 = f32[] add(%add.5002, %all-reduce.421)
  %multiply.7275 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6390, %get-tuple-element.1151)
  %copy.2342 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7275)
  %dot.733 = bf16[14336,4096]{1,0} dot(%copy.2342, %copy.2097), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.422 = bf16[14336,4096]{1,0} all-reduce(%dot.733), channel_id=873, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.184.clone
  %dynamic-slice.1459 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.422, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3450 = f32[14336,256]{0,1} convert(%dynamic-slice.1459)
  %multiply.7276 = f32[14336,256]{0,1} multiply(%convert.3450, %convert.3450)
  %reduce.806 = f32[] reduce(%multiply.7276, %constant.5451), dimensions={0,1}, to_apply=%region_823.27679
  %all-reduce.423 = f32[] all-reduce(%reduce.806), channel_id=874, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_823.27679.clone
  %add.5004 = f32[] add(%add.5003, %all-reduce.423)
  %multiply.7277 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3447, %copy.2099)
  %reduce.807 = bf16[4096]{0} reduce(%multiply.7277, %constant.10307), dimensions={0,1}, to_apply=%region_526.23873
  %all-reduce.424 = bf16[4096]{0} all-reduce(%reduce.807), channel_id=875, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_526.23873.clone
  %convert.3451 = f32[4096]{0} convert(%all-reduce.424)
  %multiply.7278 = f32[4096]{0} multiply(%convert.3451, %convert.3451)
  %reduce.808 = f32[] reduce(%multiply.7278, %constant.5451), dimensions={0}, to_apply=%region_824.27686
  %add.5005 = f32[] add(%add.5004, %reduce.808)
  %multiply.7279 = f32[2,8192,4096]{2,1,0} multiply(%convert.2939, %broadcast.13309)
  %convert.3452 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7279)
  %multiply.7280 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3452, %copy.2112)
  %reduce.809 = bf16[4096]{0} reduce(%multiply.7280, %constant.10307), dimensions={0,1}, to_apply=%region_530.24007
  %all-reduce.425 = bf16[4096]{0} all-reduce(%reduce.809), channel_id=876, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_530.24007.clone
  %convert.3453 = f32[4096]{0} convert(%all-reduce.425)
  %multiply.7281 = f32[4096]{0} multiply(%convert.3453, %convert.3453)
  %reduce.810 = f32[] reduce(%multiply.7281, %constant.5451), dimensions={0}, to_apply=%region_825.27693
  %add.5006 = f32[] add(%add.5005, %reduce.810)
  %multiply.7282 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3452, %broadcast.13306)
  %copy.2343 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7282)
  %copy.2344 = bf16[2,8192,4096]{2,1,0} copy(%copy.2343)
  %dot.734 = bf16[8,128,4096]{2,1,0} dot(%add.4581, %copy.2344), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.426 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.734), channel_id=877, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.185.clone
  %dynamic-slice.1461 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.426, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3454 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1461)
  %transpose.488 = f32[256,8,128]{0,2,1} transpose(%convert.3454), dimensions={2,0,1}
  %multiply.7283 = f32[256,8,128]{0,2,1} multiply(%transpose.488, %transpose.488)
  %reduce.811 = f32[] reduce(%multiply.7283, %constant.5451), dimensions={0,1,2}, to_apply=%region_826.27700
  %all-reduce.427 = f32[] all-reduce(%reduce.811), channel_id=878, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_826.27700.clone
  %add.5007 = f32[] add(%add.5006, %all-reduce.427)
  %copy.2345 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1164)
  %dot.735 = bf16[4096,32,128]{2,1,0} dot(%copy.2105, %copy.2345), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.428 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.735), channel_id=879, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.186.clone
  %dynamic-slice.1463 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.428, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3455 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1463)
  %transpose.489 = f32[32,128,256]{1,0,2} transpose(%convert.3455), dimensions={1,2,0}
  %multiply.7284 = f32[32,128,256]{1,0,2} multiply(%transpose.489, %transpose.489)
  %reduce.812 = f32[] reduce(%multiply.7284, %constant.5451), dimensions={0,1,2}, to_apply=%region_827.27707
  %all-reduce.429 = f32[] all-reduce(%reduce.812), channel_id=880, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_827.27707.clone
  %add.5008 = f32[] add(%add.5007, %all-reduce.429)
  %dot.736 = bf16[32,128,4096]{2,1,0} dot(%add.4586, %copy.2344), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.430 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.736), channel_id=881, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.187.clone
  %dynamic-slice.1465 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.430, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3456 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1465)
  %transpose.490 = f32[256,32,128]{0,2,1} transpose(%convert.3456), dimensions={2,0,1}
  %multiply.7285 = f32[256,32,128]{0,2,1} multiply(%transpose.490, %transpose.490)
  %reduce.813 = f32[] reduce(%multiply.7285, %constant.5451), dimensions={0,1,2}, to_apply=%region_828.27714
  %all-reduce.431 = f32[] all-reduce(%reduce.813), channel_id=882, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_828.27714.clone
  %add.5009 = f32[] add(%add.5008, %all-reduce.431)
  %dot.737 = bf16[8,128,4096]{2,1,0} dot(%copy.2107, %copy.2344), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.432 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.737), channel_id=883, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.188.clone
  %dynamic-slice.1467 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.432, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3457 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1467)
  %transpose.491 = f32[256,8,128]{0,2,1} transpose(%convert.3457), dimensions={2,0,1}
  %multiply.7286 = f32[256,8,128]{0,2,1} multiply(%transpose.491, %transpose.491)
  %reduce.814 = f32[] reduce(%multiply.7286, %constant.5451), dimensions={0,1,2}, to_apply=%region_829.27721
  %all-reduce.433 = f32[] all-reduce(%reduce.814), channel_id=884, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_829.27721.clone
  %add.5011 = f32[] add(%add.5009, %all-reduce.433)
  %multiply.7287 = f32[2,8192,4096]{2,1,0} multiply(%convert.2856, %broadcast.13098)
  %convert.3458 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7287)
  %multiply.7288 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3458, %broadcast.13095)
  %copy.2347 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7288)
  %dot.738 = bf16[4096,14336]{1,0} dot(%copy.2347, %add.4510), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.434 = bf16[4096,14336]{1,0} all-reduce(%dot.738), channel_id=885, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.189.clone
  %dynamic-slice.1469 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.434, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3459 = f32[256,14336]{0,1} convert(%dynamic-slice.1469)
  %multiply.7289 = f32[256,14336]{0,1} multiply(%convert.3459, %convert.3459)
  %reduce.815 = f32[] reduce(%multiply.7289, %constant.5451), dimensions={0,1}, to_apply=%region_830.27728
  %all-reduce.435 = f32[] all-reduce(%reduce.815), channel_id=886, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_830.27728.clone
  %add.5012 = f32[] add(%add.5011, %all-reduce.435)
  %dot.739 = bf16[4096,14336]{1,0} dot(%copy.2347, %multiply.6304), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.436 = bf16[4096,14336]{1,0} all-reduce(%dot.739), channel_id=887, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.190.clone
  %dynamic-slice.1471 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.436, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3460 = f32[256,14336]{0,1} convert(%dynamic-slice.1471)
  %multiply.7290 = f32[256,14336]{0,1} multiply(%convert.3460, %convert.3460)
  %reduce.816 = f32[] reduce(%multiply.7290, %constant.5451), dimensions={0,1}, to_apply=%region_831.27735
  %all-reduce.437 = f32[] all-reduce(%reduce.816), channel_id=888, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_831.27735.clone
  %add.5013 = f32[] add(%add.5012, %all-reduce.437)
  %multiply.7291 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6303, %get-tuple-element.1118)
  %copy.2348 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7291)
  %dot.740 = bf16[14336,4096]{1,0} dot(%copy.2348, %copy.2079), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.438 = bf16[14336,4096]{1,0} all-reduce(%dot.740), channel_id=889, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.191.clone
  %dynamic-slice.1473 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.438, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3462 = f32[14336,256]{0,1} convert(%dynamic-slice.1473)
  %multiply.7292 = f32[14336,256]{0,1} multiply(%convert.3462, %convert.3462)
  %reduce.817 = f32[] reduce(%multiply.7292, %constant.5451), dimensions={0,1}, to_apply=%region_832.27742
  %all-reduce.439 = f32[] all-reduce(%reduce.817), channel_id=890, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_832.27742.clone
  %add.5014 = f32[] add(%add.5013, %all-reduce.439)
  %multiply.7293 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3458, %copy.2081)
  %reduce.818 = bf16[4096]{0} reduce(%multiply.7293, %constant.10307), dimensions={0,1}, to_apply=%region_513.23381
  %all-reduce.440 = bf16[4096]{0} all-reduce(%reduce.818), channel_id=891, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_513.23381.clone
  %convert.3463 = f32[4096]{0} convert(%all-reduce.440)
  %multiply.7294 = f32[4096]{0} multiply(%convert.3463, %convert.3463)
  %reduce.819 = f32[] reduce(%multiply.7294, %constant.5451), dimensions={0}, to_apply=%region_833.27749
  %add.5015 = f32[] add(%add.5014, %reduce.819)
  %multiply.7295 = f32[2,8192,4096]{2,1,0} multiply(%convert.2894, %broadcast.13202)
  %convert.3464 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7295)
  %multiply.7296 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3464, %copy.2094)
  %reduce.820 = bf16[4096]{0} reduce(%multiply.7296, %constant.10307), dimensions={0,1}, to_apply=%region_517.23515
  %all-reduce.441 = bf16[4096]{0} all-reduce(%reduce.820), channel_id=892, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_517.23515.clone
  %convert.3465 = f32[4096]{0} convert(%all-reduce.441)
  %multiply.7297 = f32[4096]{0} multiply(%convert.3465, %convert.3465)
  %reduce.821 = f32[] reduce(%multiply.7297, %constant.5451), dimensions={0}, to_apply=%region_834.27756
  %add.5016 = f32[] add(%add.5015, %reduce.821)
  %multiply.7298 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3464, %broadcast.13199)
  %copy.2349 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7298)
  %copy.2350 = bf16[2,8192,4096]{2,1,0} copy(%copy.2349)
  %dot.741 = bf16[8,128,4096]{2,1,0} dot(%add.4540, %copy.2350), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.442 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.741), channel_id=893, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.192.clone
  %dynamic-slice.1475 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.442, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3466 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1475)
  %transpose.492 = f32[256,8,128]{0,2,1} transpose(%convert.3466), dimensions={2,0,1}
  %multiply.7299 = f32[256,8,128]{0,2,1} multiply(%transpose.492, %transpose.492)
  %reduce.822 = f32[] reduce(%multiply.7299, %constant.5451), dimensions={0,1,2}, to_apply=%region_835.27763
  %all-reduce.443 = f32[] all-reduce(%reduce.822), channel_id=894, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_835.27763.clone
  %add.5018 = f32[] add(%add.5016, %all-reduce.443)
  %copy.2351 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1131)
  %dot.742 = bf16[4096,32,128]{2,1,0} dot(%copy.2087, %copy.2351), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.444 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.742), channel_id=895, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.193.clone
  %dynamic-slice.1477 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.444, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3467 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1477)
  %transpose.493 = f32[32,128,256]{1,0,2} transpose(%convert.3467), dimensions={1,2,0}
  %multiply.7300 = f32[32,128,256]{1,0,2} multiply(%transpose.493, %transpose.493)
  %reduce.823 = f32[] reduce(%multiply.7300, %constant.5451), dimensions={0,1,2}, to_apply=%region_836.27770
  %all-reduce.445 = f32[] all-reduce(%reduce.823), channel_id=896, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_836.27770.clone
  %add.5019 = f32[] add(%add.5018, %all-reduce.445)
  %dot.743 = bf16[32,128,4096]{2,1,0} dot(%add.4545, %copy.2350), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.446 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.743), channel_id=897, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.194.clone
  %dynamic-slice.1479 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.446, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3468 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1479)
  %transpose.494 = f32[256,32,128]{0,2,1} transpose(%convert.3468), dimensions={2,0,1}
  %multiply.7301 = f32[256,32,128]{0,2,1} multiply(%transpose.494, %transpose.494)
  %reduce.824 = f32[] reduce(%multiply.7301, %constant.5451), dimensions={0,1,2}, to_apply=%region_837.27777
  %all-reduce.447 = f32[] all-reduce(%reduce.824), channel_id=898, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_837.27777.clone
  %add.5020 = f32[] add(%add.5019, %all-reduce.447)
  %dot.744 = bf16[8,128,4096]{2,1,0} dot(%copy.2089, %copy.2350), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.448 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.744), channel_id=899, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.195.clone
  %dynamic-slice.1481 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.448, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3470 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1481)
  %transpose.495 = f32[256,8,128]{0,2,1} transpose(%convert.3470), dimensions={2,0,1}
  %multiply.7302 = f32[256,8,128]{0,2,1} multiply(%transpose.495, %transpose.495)
  %reduce.825 = f32[] reduce(%multiply.7302, %constant.5451), dimensions={0,1,2}, to_apply=%region_838.27784
  %all-reduce.449 = f32[] all-reduce(%reduce.825), channel_id=900, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_838.27784.clone
  %add.5021 = f32[] add(%add.5020, %all-reduce.449)
  %multiply.7303 = f32[2,8192,4096]{2,1,0} multiply(%convert.2811, %broadcast.12992)
  %convert.3472 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7303)
  %multiply.7305 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3472, %broadcast.12989)
  %copy.2353 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7305)
  %dot.745 = bf16[4096,14336]{1,0} dot(%copy.2353, %add.4470), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.450 = bf16[4096,14336]{1,0} all-reduce(%dot.745), channel_id=901, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.196.clone
  %dynamic-slice.1483 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.450, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3473 = f32[256,14336]{0,1} convert(%dynamic-slice.1483)
  %multiply.7306 = f32[256,14336]{0,1} multiply(%convert.3473, %convert.3473)
  %reduce.826 = f32[] reduce(%multiply.7306, %constant.5451), dimensions={0,1}, to_apply=%region_839.27791
  %all-reduce.451 = f32[] all-reduce(%reduce.826), channel_id=902, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_839.27791.clone
  %add.5023 = f32[] add(%add.5021, %all-reduce.451)
  %dot.746 = bf16[4096,14336]{1,0} dot(%copy.2353, %multiply.6216), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.452 = bf16[4096,14336]{1,0} all-reduce(%dot.746), channel_id=903, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.197.clone
  %dynamic-slice.1485 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.452, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3474 = f32[256,14336]{0,1} convert(%dynamic-slice.1485)
  %multiply.7307 = f32[256,14336]{0,1} multiply(%convert.3474, %convert.3474)
  %reduce.827 = f32[] reduce(%multiply.7307, %constant.5451), dimensions={0,1}, to_apply=%region_840.27798
  %all-reduce.453 = f32[] all-reduce(%reduce.827), channel_id=904, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_840.27798.clone
  %add.5024 = f32[] add(%add.5023, %all-reduce.453)
  %multiply.7308 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6215, %get-tuple-element.1085)
  %copy.2354 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7308)
  %dot.747 = bf16[14336,4096]{1,0} dot(%copy.2354, %copy.2061), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.454 = bf16[14336,4096]{1,0} all-reduce(%dot.747), channel_id=905, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.198.clone
  %dynamic-slice.1487 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.454, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3475 = f32[14336,256]{0,1} convert(%dynamic-slice.1487)
  %multiply.7309 = f32[14336,256]{0,1} multiply(%convert.3475, %convert.3475)
  %reduce.828 = f32[] reduce(%multiply.7309, %constant.5451), dimensions={0,1}, to_apply=%region_841.27805
  %all-reduce.455 = f32[] all-reduce(%reduce.828), channel_id=906, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_841.27805.clone
  %add.5025 = f32[] add(%add.5024, %all-reduce.455)
  %multiply.7310 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3472, %copy.2063)
  %reduce.829 = bf16[4096]{0} reduce(%multiply.7310, %constant.10307), dimensions={0,1}, to_apply=%region_500.22889
  %all-reduce.456 = bf16[4096]{0} all-reduce(%reduce.829), channel_id=907, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_500.22889.clone
  %convert.3476 = f32[4096]{0} convert(%all-reduce.456)
  %multiply.7311 = f32[4096]{0} multiply(%convert.3476, %convert.3476)
  %reduce.830 = f32[] reduce(%multiply.7311, %constant.5451), dimensions={0}, to_apply=%region_842.27812
  %add.5026 = f32[] add(%add.5025, %reduce.830)
  %multiply.7312 = f32[2,8192,4096]{2,1,0} multiply(%convert.2848, %broadcast.13091)
  %convert.3477 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7312)
  %multiply.7313 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3477, %copy.2076)
  %reduce.831 = bf16[4096]{0} reduce(%multiply.7313, %constant.10307), dimensions={0,1}, to_apply=%region_504.23023
  %all-reduce.457 = bf16[4096]{0} all-reduce(%reduce.831), channel_id=908, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_504.23023.clone
  %convert.3478 = f32[4096]{0} convert(%all-reduce.457)
  %multiply.7314 = f32[4096]{0} multiply(%convert.3478, %convert.3478)
  %reduce.832 = f32[] reduce(%multiply.7314, %constant.5451), dimensions={0}, to_apply=%region_843.27819
  %add.5027 = f32[] add(%add.5026, %reduce.832)
  %multiply.7315 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3477, %broadcast.13088)
  %copy.2355 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7315)
  %copy.2356 = bf16[2,8192,4096]{2,1,0} copy(%copy.2355)
  %dot.748 = bf16[8,128,4096]{2,1,0} dot(%add.4499, %copy.2356), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.458 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.748), channel_id=909, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.199.clone
  %dynamic-slice.1489 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.458, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3479 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1489)
  %transpose.496 = f32[256,8,128]{0,2,1} transpose(%convert.3479), dimensions={2,0,1}
  %multiply.7316 = f32[256,8,128]{0,2,1} multiply(%transpose.496, %transpose.496)
  %reduce.833 = f32[] reduce(%multiply.7316, %constant.5451), dimensions={0,1,2}, to_apply=%region_844.27826
  %all-reduce.459 = f32[] all-reduce(%reduce.833), channel_id=910, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_844.27826.clone
  %add.5028 = f32[] add(%add.5027, %all-reduce.459)
  %copy.2357 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1098)
  %dot.749 = bf16[4096,32,128]{2,1,0} dot(%copy.2069, %copy.2357), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.460 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.749), channel_id=911, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.200.clone
  %dynamic-slice.1491 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.460, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3480 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1491)
  %transpose.497 = f32[32,128,256]{1,0,2} transpose(%convert.3480), dimensions={1,2,0}
  %multiply.7317 = f32[32,128,256]{1,0,2} multiply(%transpose.497, %transpose.497)
  %reduce.834 = f32[] reduce(%multiply.7317, %constant.5451), dimensions={0,1,2}, to_apply=%region_845.27833
  %all-reduce.461 = f32[] all-reduce(%reduce.834), channel_id=912, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_845.27833.clone
  %add.5029 = f32[] add(%add.5028, %all-reduce.461)
  %dot.750 = bf16[32,128,4096]{2,1,0} dot(%add.4504, %copy.2356), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.462 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.750), channel_id=913, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.201.clone
  %dynamic-slice.1493 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.462, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3481 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1493)
  %transpose.498 = f32[256,32,128]{0,2,1} transpose(%convert.3481), dimensions={2,0,1}
  %multiply.7318 = f32[256,32,128]{0,2,1} multiply(%transpose.498, %transpose.498)
  %reduce.835 = f32[] reduce(%multiply.7318, %constant.5451), dimensions={0,1,2}, to_apply=%region_846.27840
  %all-reduce.463 = f32[] all-reduce(%reduce.835), channel_id=914, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_846.27840.clone
  %add.5030 = f32[] add(%add.5029, %all-reduce.463)
  %dot.751 = bf16[8,128,4096]{2,1,0} dot(%copy.2071, %copy.2356), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.464 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.751), channel_id=915, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.202.clone
  %dynamic-slice.1495 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.464, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3482 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1495)
  %transpose.499 = f32[256,8,128]{0,2,1} transpose(%convert.3482), dimensions={2,0,1}
  %multiply.7319 = f32[256,8,128]{0,2,1} multiply(%transpose.499, %transpose.499)
  %reduce.836 = f32[] reduce(%multiply.7319, %constant.5451), dimensions={0,1,2}, to_apply=%region_847.27847
  %all-reduce.465 = f32[] all-reduce(%reduce.836), channel_id=916, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_847.27847.clone
  %add.5031 = f32[] add(%add.5030, %all-reduce.465)
  %multiply.7321 = f32[2,8192,4096]{2,1,0} multiply(%convert.2763, %broadcast.12872)
  %convert.3483 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7321)
  %multiply.7323 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3483, %broadcast.12869)
  %copy.2359 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7323)
  %dot.752 = bf16[4096,14336]{1,0} dot(%copy.2359, %add.4427), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.466 = bf16[4096,14336]{1,0} all-reduce(%dot.752), channel_id=917, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.203.clone
  %dynamic-slice.1497 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.466, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3484 = f32[256,14336]{0,1} convert(%dynamic-slice.1497)
  %multiply.7324 = f32[256,14336]{0,1} multiply(%convert.3484, %convert.3484)
  %reduce.837 = f32[] reduce(%multiply.7324, %constant.5451), dimensions={0,1}, to_apply=%region_848.27854
  %all-reduce.467 = f32[] all-reduce(%reduce.837), channel_id=918, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_848.27854.clone
  %add.5032 = f32[] add(%add.5031, %all-reduce.467)
  %dot.753 = bf16[4096,14336]{1,0} dot(%copy.2359, %multiply.6128), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.468 = bf16[4096,14336]{1,0} all-reduce(%dot.753), channel_id=919, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.204.clone
  %dynamic-slice.1499 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.468, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3485 = f32[256,14336]{0,1} convert(%dynamic-slice.1499)
  %multiply.7325 = f32[256,14336]{0,1} multiply(%convert.3485, %convert.3485)
  %reduce.838 = f32[] reduce(%multiply.7325, %constant.5451), dimensions={0,1}, to_apply=%region_849.27861
  %all-reduce.469 = f32[] all-reduce(%reduce.838), channel_id=920, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_849.27861.clone
  %add.5033 = f32[] add(%add.5032, %all-reduce.469)
  %multiply.7326 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6127, %get-tuple-element.1052)
  %copy.2360 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7326)
  %dot.754 = bf16[14336,4096]{1,0} dot(%copy.2360, %copy.2043), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.470 = bf16[14336,4096]{1,0} all-reduce(%dot.754), channel_id=921, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.205.clone
  %dynamic-slice.1501 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.470, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3486 = f32[14336,256]{0,1} convert(%dynamic-slice.1501)
  %multiply.7327 = f32[14336,256]{0,1} multiply(%convert.3486, %convert.3486)
  %reduce.839 = f32[] reduce(%multiply.7327, %constant.5451), dimensions={0,1}, to_apply=%region_850.27868
  %all-reduce.471 = f32[] all-reduce(%reduce.839), channel_id=922, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_850.27868.clone
  %add.5034 = f32[] add(%add.5033, %all-reduce.471)
  %multiply.7328 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3483, %copy.2045)
  %reduce.840 = bf16[4096]{0} reduce(%multiply.7328, %constant.10307), dimensions={0,1}, to_apply=%region_487.22397
  %all-reduce.472 = bf16[4096]{0} all-reduce(%reduce.840), channel_id=923, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_487.22397.clone
  %convert.3488 = f32[4096]{0} convert(%all-reduce.472)
  %multiply.7329 = f32[4096]{0} multiply(%convert.3488, %convert.3488)
  %reduce.841 = f32[] reduce(%multiply.7329, %constant.5451), dimensions={0}, to_apply=%region_851.27875
  %add.5035 = f32[] add(%add.5034, %reduce.841)
  %multiply.7330 = f32[2,8192,4096]{2,1,0} multiply(%convert.2803, %broadcast.12985)
  %convert.3489 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7330)
  %multiply.7331 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3489, %copy.2058)
  %reduce.842 = bf16[4096]{0} reduce(%multiply.7331, %constant.10307), dimensions={0,1}, to_apply=%region_491.22531
  %all-reduce.473 = bf16[4096]{0} all-reduce(%reduce.842), channel_id=924, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_491.22531.clone
  %convert.3490 = f32[4096]{0} convert(%all-reduce.473)
  %multiply.7332 = f32[4096]{0} multiply(%convert.3490, %convert.3490)
  %reduce.843 = f32[] reduce(%multiply.7332, %constant.5451), dimensions={0}, to_apply=%region_852.27882
  %add.5036 = f32[] add(%add.5035, %reduce.843)
  %multiply.7333 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3489, %broadcast.12982)
  %copy.2361 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7333)
  %copy.2362 = bf16[2,8192,4096]{2,1,0} copy(%copy.2361)
  %dot.755 = bf16[8,128,4096]{2,1,0} dot(%add.4458, %copy.2362), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.474 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.755), channel_id=925, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.206.clone
  %dynamic-slice.1503 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.474, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3491 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1503)
  %transpose.500 = f32[256,8,128]{0,2,1} transpose(%convert.3491), dimensions={2,0,1}
  %multiply.7334 = f32[256,8,128]{0,2,1} multiply(%transpose.500, %transpose.500)
  %reduce.844 = f32[] reduce(%multiply.7334, %constant.5451), dimensions={0,1,2}, to_apply=%region_853.27889
  %all-reduce.475 = f32[] all-reduce(%reduce.844), channel_id=926, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_853.27889.clone
  %add.5037 = f32[] add(%add.5036, %all-reduce.475)
  %copy.2363 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1065)
  %dot.756 = bf16[4096,32,128]{2,1,0} dot(%copy.2051, %copy.2363), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.476 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.756), channel_id=927, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.207.clone
  %dynamic-slice.1505 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.476, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3492 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1505)
  %transpose.501 = f32[32,128,256]{1,0,2} transpose(%convert.3492), dimensions={1,2,0}
  %multiply.7335 = f32[32,128,256]{1,0,2} multiply(%transpose.501, %transpose.501)
  %reduce.845 = f32[] reduce(%multiply.7335, %constant.5451), dimensions={0,1,2}, to_apply=%region_854.27896
  %all-reduce.477 = f32[] all-reduce(%reduce.845), channel_id=928, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_854.27896.clone
  %add.5038 = f32[] add(%add.5037, %all-reduce.477)
  %dot.757 = bf16[32,128,4096]{2,1,0} dot(%add.4464, %copy.2362), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.478 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.757), channel_id=929, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.208.clone
  %dynamic-slice.1507 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.478, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3493 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1507)
  %transpose.502 = f32[256,32,128]{0,2,1} transpose(%convert.3493), dimensions={2,0,1}
  %multiply.7336 = f32[256,32,128]{0,2,1} multiply(%transpose.502, %transpose.502)
  %reduce.846 = f32[] reduce(%multiply.7336, %constant.5451), dimensions={0,1,2}, to_apply=%region_855.27903
  %all-reduce.479 = f32[] all-reduce(%reduce.846), channel_id=930, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_855.27903.clone
  %add.5039 = f32[] add(%add.5038, %all-reduce.479)
  %dot.758 = bf16[8,128,4096]{2,1,0} dot(%copy.2053, %copy.2362), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.480 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.758), channel_id=931, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.209.clone
  %dynamic-slice.1509 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.480, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3494 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1509)
  %transpose.503 = f32[256,8,128]{0,2,1} transpose(%convert.3494), dimensions={2,0,1}
  %multiply.7337 = f32[256,8,128]{0,2,1} multiply(%transpose.503, %transpose.503)
  %reduce.847 = f32[] reduce(%multiply.7337, %constant.5451), dimensions={0,1,2}, to_apply=%region_856.27910
  %all-reduce.481 = f32[] all-reduce(%reduce.847), channel_id=932, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_856.27910.clone
  %add.5040 = f32[] add(%add.5039, %all-reduce.481)
  %multiply.7338 = f32[2,8192,4096]{2,1,0} multiply(%convert.2716, %broadcast.12756)
  %convert.3495 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7338)
  %multiply.7339 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3495, %broadcast.12753)
  %copy.2365 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7339)
  %dot.759 = bf16[4096,14336]{1,0} dot(%copy.2365, %add.4382), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.482 = bf16[4096,14336]{1,0} all-reduce(%dot.759), channel_id=933, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.210.clone
  %dynamic-slice.1511 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.482, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3496 = f32[256,14336]{0,1} convert(%dynamic-slice.1511)
  %multiply.7340 = f32[256,14336]{0,1} multiply(%convert.3496, %convert.3496)
  %reduce.848 = f32[] reduce(%multiply.7340, %constant.5451), dimensions={0,1}, to_apply=%region_857.27917
  %all-reduce.483 = f32[] all-reduce(%reduce.848), channel_id=934, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_857.27917.clone
  %add.5041 = f32[] add(%add.5040, %all-reduce.483)
  %dot.760 = bf16[4096,14336]{1,0} dot(%copy.2365, %multiply.6042), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.484 = bf16[4096,14336]{1,0} all-reduce(%dot.760), channel_id=935, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.211.clone
  %dynamic-slice.1513 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.484, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3497 = f32[256,14336]{0,1} convert(%dynamic-slice.1513)
  %multiply.7341 = f32[256,14336]{0,1} multiply(%convert.3497, %convert.3497)
  %reduce.849 = f32[] reduce(%multiply.7341, %constant.5451), dimensions={0,1}, to_apply=%region_858.27924
  %all-reduce.485 = f32[] all-reduce(%reduce.849), channel_id=936, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_858.27924.clone
  %add.5042 = f32[] add(%add.5041, %all-reduce.485)
  %multiply.7342 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.6041, %get-tuple-element.1019)
  %copy.2366 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7342)
  %dot.761 = bf16[14336,4096]{1,0} dot(%copy.2366, %copy.2025), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.486 = bf16[14336,4096]{1,0} all-reduce(%dot.761), channel_id=937, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.212.clone
  %dynamic-slice.1515 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.486, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3498 = f32[14336,256]{0,1} convert(%dynamic-slice.1515)
  %multiply.7343 = f32[14336,256]{0,1} multiply(%convert.3498, %convert.3498)
  %reduce.850 = f32[] reduce(%multiply.7343, %constant.5451), dimensions={0,1}, to_apply=%region_859.27931
  %all-reduce.487 = f32[] all-reduce(%reduce.850), channel_id=938, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_859.27931.clone
  %add.5043 = f32[] add(%add.5042, %all-reduce.487)
  %multiply.7344 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3495, %copy.2027)
  %reduce.851 = bf16[4096]{0} reduce(%multiply.7344, %constant.10307), dimensions={0,1}, to_apply=%region_474.21905
  %all-reduce.488 = bf16[4096]{0} all-reduce(%reduce.851), channel_id=939, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_474.21905.clone
  %convert.3499 = f32[4096]{0} convert(%all-reduce.488)
  %multiply.7345 = f32[4096]{0} multiply(%convert.3499, %convert.3499)
  %reduce.852 = f32[] reduce(%multiply.7345, %constant.5451), dimensions={0}, to_apply=%region_860.27938
  %add.5044 = f32[] add(%add.5043, %reduce.852)
  %multiply.7346 = f32[2,8192,4096]{2,1,0} multiply(%convert.2754, %broadcast.12865)
  %convert.3500 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7346)
  %multiply.7347 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3500, %copy.2040)
  %reduce.853 = bf16[4096]{0} reduce(%multiply.7347, %constant.10307), dimensions={0,1}, to_apply=%region_478.22039
  %all-reduce.489 = bf16[4096]{0} all-reduce(%reduce.853), channel_id=940, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_478.22039.clone
  %convert.3502 = f32[4096]{0} convert(%all-reduce.489)
  %multiply.7348 = f32[4096]{0} multiply(%convert.3502, %convert.3502)
  %reduce.854 = f32[] reduce(%multiply.7348, %constant.5451), dimensions={0}, to_apply=%region_861.27945
  %add.5045 = f32[] add(%add.5044, %reduce.854)
  %multiply.7350 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3500, %broadcast.12862)
  %copy.2367 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7350)
  %copy.2368 = bf16[2,8192,4096]{2,1,0} copy(%copy.2367)
  %dot.762 = bf16[8,128,4096]{2,1,0} dot(%add.4413, %copy.2368), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.490 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.762), channel_id=941, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.213.clone
  %dynamic-slice.1517 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.490, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3503 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1517)
  %transpose.504 = f32[256,8,128]{0,2,1} transpose(%convert.3503), dimensions={2,0,1}
  %multiply.7351 = f32[256,8,128]{0,2,1} multiply(%transpose.504, %transpose.504)
  %reduce.855 = f32[] reduce(%multiply.7351, %constant.5451), dimensions={0,1,2}, to_apply=%region_862.27952
  %all-reduce.491 = f32[] all-reduce(%reduce.855), channel_id=942, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_862.27952.clone
  %add.5046 = f32[] add(%add.5045, %all-reduce.491)
  %copy.2369 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.1032)
  %dot.763 = bf16[4096,32,128]{2,1,0} dot(%copy.2033, %copy.2369), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.492 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.763), channel_id=943, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.214.clone
  %dynamic-slice.1519 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.492, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3504 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1519)
  %transpose.505 = f32[32,128,256]{1,0,2} transpose(%convert.3504), dimensions={1,2,0}
  %multiply.7352 = f32[32,128,256]{1,0,2} multiply(%transpose.505, %transpose.505)
  %reduce.856 = f32[] reduce(%multiply.7352, %constant.5451), dimensions={0,1,2}, to_apply=%region_863.27959
  %all-reduce.493 = f32[] all-reduce(%reduce.856), channel_id=944, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_863.27959.clone
  %add.5047 = f32[] add(%add.5046, %all-reduce.493)
  %dot.764 = bf16[32,128,4096]{2,1,0} dot(%add.4420, %copy.2368), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.494 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.764), channel_id=945, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.215.clone
  %dynamic-slice.1521 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.494, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3505 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1521)
  %transpose.506 = f32[256,32,128]{0,2,1} transpose(%convert.3505), dimensions={2,0,1}
  %multiply.7353 = f32[256,32,128]{0,2,1} multiply(%transpose.506, %transpose.506)
  %reduce.857 = f32[] reduce(%multiply.7353, %constant.5451), dimensions={0,1,2}, to_apply=%region_864.27966
  %all-reduce.495 = f32[] all-reduce(%reduce.857), channel_id=946, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_864.27966.clone
  %add.5048 = f32[] add(%add.5047, %all-reduce.495)
  %dot.765 = bf16[8,128,4096]{2,1,0} dot(%copy.2035, %copy.2368), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.496 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.765), channel_id=947, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.216.clone
  %dynamic-slice.1523 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.496, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3507 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1523)
  %transpose.507 = f32[256,8,128]{0,2,1} transpose(%convert.3507), dimensions={2,0,1}
  %multiply.7355 = f32[256,8,128]{0,2,1} multiply(%transpose.507, %transpose.507)
  %reduce.858 = f32[] reduce(%multiply.7355, %constant.5451), dimensions={0,1,2}, to_apply=%region_865.27973
  %all-reduce.497 = f32[] all-reduce(%reduce.858), channel_id=948, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_865.27973.clone
  %add.5049 = f32[] add(%add.5048, %all-reduce.497)
  %multiply.7356 = f32[2,8192,4096]{2,1,0} multiply(%convert.2672, %broadcast.12654)
  %convert.3508 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7356)
  %multiply.7357 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3508, %broadcast.12650)
  %copy.2371 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7357)
  %dot.766 = bf16[4096,14336]{1,0} dot(%copy.2371, %add.4341), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.498 = bf16[4096,14336]{1,0} all-reduce(%dot.766), channel_id=949, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.217.clone
  %dynamic-slice.1525 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.498, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3509 = f32[256,14336]{0,1} convert(%dynamic-slice.1525)
  %multiply.7358 = f32[256,14336]{0,1} multiply(%convert.3509, %convert.3509)
  %reduce.859 = f32[] reduce(%multiply.7358, %constant.5451), dimensions={0,1}, to_apply=%region_866.27980
  %all-reduce.499 = f32[] all-reduce(%reduce.859), channel_id=950, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_866.27980.clone
  %add.5050 = f32[] add(%add.5049, %all-reduce.499)
  %dot.767 = bf16[4096,14336]{1,0} dot(%copy.2371, %multiply.5952), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.500 = bf16[4096,14336]{1,0} all-reduce(%dot.767), channel_id=951, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.218.clone
  %dynamic-slice.1527 = bf16[256,14336]{1,0} dynamic-slice(%all-reduce.500, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,14336}
  %convert.3510 = f32[256,14336]{0,1} convert(%dynamic-slice.1527)
  %multiply.7359 = f32[256,14336]{0,1} multiply(%convert.3510, %convert.3510)
  %reduce.860 = f32[] reduce(%multiply.7359, %constant.5451), dimensions={0,1}, to_apply=%region_867.27987
  %all-reduce.501 = f32[] all-reduce(%reduce.860), channel_id=952, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_867.27987.clone
  %add.5051 = f32[] add(%add.5050, %all-reduce.501)
  %multiply.7361 = bf16[2,8192,14336]{2,1,0} multiply(%multiply.5951, %get-tuple-element.986)
  %copy.2372 = bf16[2,8192,14336]{2,1,0} copy(%multiply.7361)
  %dot.768 = bf16[14336,4096]{1,0} dot(%copy.2372, %copy.2007), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.502 = bf16[14336,4096]{1,0} all-reduce(%dot.768), channel_id=953, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.219.clone
  %dynamic-slice.1529 = bf16[14336,256]{1,0} dynamic-slice(%all-reduce.502, %constant.5439, %reshape.12109), dynamic_slice_sizes={14336,256}
  %convert.3512 = f32[14336,256]{0,1} convert(%dynamic-slice.1529)
  %multiply.7362 = f32[14336,256]{0,1} multiply(%convert.3512, %convert.3512)
  %reduce.861 = f32[] reduce(%multiply.7362, %constant.5451), dimensions={0,1}, to_apply=%region_868.27994
  %all-reduce.503 = f32[] all-reduce(%reduce.861), channel_id=954, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_868.27994.clone
  %add.5052 = f32[] add(%add.5051, %all-reduce.503)
  %multiply.7363 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3508, %copy.2009)
  %reduce.862 = bf16[4096]{0} reduce(%multiply.7363, %constant.10307), dimensions={0,1}, to_apply=%region_461.21413
  %all-reduce.504 = bf16[4096]{0} all-reduce(%reduce.862), channel_id=955, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_461.21413.clone
  %convert.3513 = f32[4096]{0} convert(%all-reduce.504)
  %multiply.7364 = f32[4096]{0} multiply(%convert.3513, %convert.3513)
  %reduce.863 = f32[] reduce(%multiply.7364, %constant.5451), dimensions={0}, to_apply=%region_869.28001
  %add.5053 = f32[] add(%add.5052, %reduce.863)
  %multiply.7365 = f32[2,8192,4096]{2,1,0} multiply(%convert.2708, %broadcast.12749)
  %convert.3514 = bf16[2,8192,4096]{2,1,0} convert(%multiply.7365)
  %multiply.7366 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3514, %copy.2022)
  %reduce.864 = bf16[4096]{0} reduce(%multiply.7366, %constant.10307), dimensions={0,1}, to_apply=%region_465.21547
  %all-reduce.505 = bf16[4096]{0} all-reduce(%reduce.864), channel_id=956, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_465.21547.clone
  %convert.3515 = f32[4096]{0} convert(%all-reduce.505)
  %multiply.7367 = f32[4096]{0} multiply(%convert.3515, %convert.3515)
  %reduce.865 = f32[] reduce(%multiply.7367, %constant.5451), dimensions={0}, to_apply=%region_870.28008
  %add.5054 = f32[] add(%add.5053, %reduce.865)
  %multiply.7368 = bf16[2,8192,4096]{2,1,0} multiply(%convert.3514, %broadcast.12746)
  %copy.2373 = bf16[2,8192,4096]{2,1,0} copy(%multiply.7368)
  %copy.2374 = bf16[2,8192,4096]{2,1,0} copy(%copy.2373)
  %dot.769 = bf16[8,128,4096]{2,1,0} dot(%add.4371, %copy.2374), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.506 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.769), channel_id=957, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.220.clone
  %dynamic-slice.1531 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.506, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3516 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1531)
  %transpose.508 = f32[256,8,128]{0,2,1} transpose(%convert.3516), dimensions={2,0,1}
  %multiply.7369 = f32[256,8,128]{0,2,1} multiply(%transpose.508, %transpose.508)
  %reduce.866 = f32[] reduce(%multiply.7369, %constant.5451), dimensions={0,1,2}, to_apply=%region_871.28015
  %all-reduce.507 = f32[] all-reduce(%reduce.866), channel_id=958, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_871.28015.clone
  %add.5055 = f32[] add(%add.5054, %all-reduce.507)
  %copy.2375 = bf16[2,8192,32,128]{3,2,1,0} copy(%get-tuple-element.999)
  %dot.770 = bf16[4096,32,128]{2,1,0} dot(%copy.2015, %copy.2375), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.508 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.770), channel_id=959, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.221.clone
  %dynamic-slice.1533 = bf16[256,32,128]{2,1,0} dynamic-slice(%all-reduce.508, %reshape.12109, %constant.5439, %constant.5439), dynamic_slice_sizes={256,32,128}
  %convert.3517 = f32[256,32,128]{2,1,0} convert(%dynamic-slice.1533)
  %transpose.509 = f32[32,128,256]{1,0,2} transpose(%convert.3517), dimensions={1,2,0}
  %multiply.7370 = f32[32,128,256]{1,0,2} multiply(%transpose.509, %transpose.509)
  %reduce.867 = f32[] reduce(%multiply.7370, %constant.5451), dimensions={0,1,2}, to_apply=%region_872.28022
  %all-reduce.509 = f32[] all-reduce(%reduce.867), channel_id=960, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_872.28022.clone
  %add.5056 = f32[] add(%add.5055, %all-reduce.509)
  %dot.771 = bf16[32,128,4096]{2,1,0} dot(%add.4376, %copy.2374), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.510 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.771), channel_id=961, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.222.clone
  %dynamic-slice.1535 = bf16[32,128,256]{2,1,0} dynamic-slice(%all-reduce.510, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={32,128,256}
  %convert.3519 = f32[32,128,256]{2,1,0} convert(%dynamic-slice.1535)
  %transpose.510 = f32[256,32,128]{0,2,1} transpose(%convert.3519), dimensions={2,0,1}
  %multiply.7371 = f32[256,32,128]{0,2,1} multiply(%transpose.510, %transpose.510)
  %reduce.868 = f32[] reduce(%multiply.7371, %constant.5451), dimensions={0,1,2}, to_apply=%region_873.28029
  %all-reduce.511 = f32[] all-reduce(%reduce.868), channel_id=962, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_873.28029.clone
  %add.5057 = f32[] add(%add.5056, %all-reduce.511)
  %dot.772 = bf16[8,128,4096]{2,1,0} dot(%copy.2017, %copy.2374), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.512 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.772), channel_id=963, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.223.clone
  %dynamic-slice.1537 = bf16[8,128,256]{2,1,0} dynamic-slice(%all-reduce.512, %constant.5439, %constant.5439, %reshape.12109), dynamic_slice_sizes={8,128,256}
  %convert.3520 = f32[8,128,256]{2,1,0} convert(%dynamic-slice.1537)
  %transpose.511 = f32[256,8,128]{0,2,1} transpose(%convert.3520), dimensions={2,0,1}
  %multiply.7372 = f32[256,8,128]{0,2,1} multiply(%transpose.511, %transpose.511)
  %reduce.869 = f32[] reduce(%multiply.7372, %constant.5451), dimensions={0,1,2}, to_apply=%region_874.28036
  %all-reduce.513 = f32[] all-reduce(%reduce.869), channel_id=964, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_874.28036.clone
  %add.5058 = f32[] add(%add.5057, %all-reduce.513)
  %dot.773 = bf16[4096,128256]{1,0} dot(%multiply.4003, %copy.1609), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.514 = bf16[4096,128256]{1,0} all-reduce(%dot.773), channel_id=965, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.224.clone
  %dynamic-slice.1539 = bf16[256,128256]{1,0} dynamic-slice(%all-reduce.514, %reshape.12109, %constant.5439), dynamic_slice_sizes={256,128256}
  %convert.3521 = f32[256,128256]{0,1} convert(%dynamic-slice.1539)
  %multiply.7373 = f32[256,128256]{0,1} multiply(%convert.3521, %convert.3521)
  %reduce.870 = f32[] reduce(%multiply.7373, %constant.5451), dimensions={0,1}, to_apply=%region_875.28043
  %all-reduce.515 = f32[] all-reduce(%reduce.870), channel_id=966, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_875.28043.clone
  %add.5059 = f32[] add(%add.5058, %all-reduce.515)
  %multiply.7374 = bf16[2,8192,4096]{2,1,0} multiply(%copy.2186, %broadcast.13764)
  %convert.3522 = f32[2,8192,4096]{2,1,0} convert(%multiply.7374)
  %multiply.7375 = f32[2,8192,4096]{2,1,0} multiply(%convert.3522, %broadcast.13666)
  %multiply.7376 = f32[2,8192,4096]{2,1,0} multiply(%convert.3093, %convert.3522)
  %reduce.871 = f32[2,8192]{1,0} reduce(%multiply.7376, %constant.5451), dimensions={2}, to_apply=%region_584.25993
  %reshape.12511 = f32[2,8192,1]{2,1,0} reshape(%reduce.871)
  %divide.1059 = f32[2,8192,1]{2,1,0} divide(%rsqrt.192, %reshape.12112)
  %multiply.7377 = f32[2,8192,1]{2,1,0} multiply(%divide.1059, %broadcast.10161)
  %multiply.7378 = f32[2,8192,1]{2,1,0} multiply(%reshape.12511, %multiply.7377)
  %multiply.7379 = f32[2,8192,1]{2,1,0} multiply(%multiply.7378, %broadcast.10163)
  %reshape.12512 = f32[2,8192]{1,0} reshape(%multiply.7379)
  %broadcast.13922 = f32[2,8192,4096]{2,1,0} broadcast(%reshape.12512), dimensions={0,1}
  %multiply.7381 = f32[2,8192,4096]{2,1,0} multiply(%convert.3093, %broadcast.13922)
  %add.5060 = f32[2,8192,4096]{2,1,0} add(%multiply.7375, %multiply.7381)
  %convert.3523 = bf16[2,8192,4096]{2,1,0} convert(%add.5060)
  %add.5061 = bf16[2,8192,4096]{2,1,0} add(%add.4739, %convert.3523)
  %copy.2377 = bf16[2,8192,4096]{2,1,0} copy(%add.5061)
  %copy.2378 = bf16[2,8192,4096]{2,1,0} copy(%copy.2377)
  %dot.774 = bf16[128256,4096]{1,0} dot(%convert.517, %copy.2378), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.516 = bf16[128256,4096]{1,0} all-reduce(%dot.774), channel_id=967, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%add.225.clone
  %dynamic-slice.1541 = bf16[128256,256]{1,0} dynamic-slice(%all-reduce.516, %constant.5439, %reshape.12109), dynamic_slice_sizes={128256,256}
  %convert.3524 = f32[128256,256]{0,1} convert(%dynamic-slice.1541)
  %multiply.7382 = f32[128256,256]{0,1} multiply(%convert.3524, %convert.3524)
  %reduce.872 = f32[] reduce(%multiply.7382, %constant.5451), dimensions={0,1}, to_apply=%region_876.28050
  %all-reduce.517 = f32[] all-reduce(%reduce.872), channel_id=968, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_876.28050.clone
  %add.5062 = f32[] add(%add.5059, %all-reduce.517)
  %sqrt.0 = f32[] sqrt(%add.5062)
  %compare.4848 = pred[] compare(%sqrt.0, %constant.5437), direction=LT
  %broadcast.13923 = pred[4096]{0} broadcast(%compare.4848), dimensions={}
  %broadcast.13924 = f32[4096]{0} broadcast(%sqrt.0), dimensions={}
  %divide.1061 = f32[4096]{0} divide(%convert.1648, %broadcast.13924)
  %select.3121 = f32[4096]{0} select(%broadcast.13923, %convert.1648, %divide.1061)
  %constant.21366 = f32[] constant(0.1)
  %broadcast.13925 = f32[4096]{0} broadcast(%constant.21366), dimensions={}
  %multiply.7383 = f32[4096]{0} multiply(%select.3121, %broadcast.13925)
  %param.298 = f32[4096]{0} parameter(293), sharding={replicated}
  %constant.21367 = f32[] constant(0.9)
  %broadcast.13926 = f32[4096]{0} broadcast(%constant.21367), dimensions={}
  %multiply.7384 = f32[4096]{0} multiply(%param.298, %broadcast.13926)
  %add.5063 = f32[4096]{0} add(%multiply.7383, %multiply.7384)
  %param.299 = s32[] parameter(292), sharding={replicated}
  %constant.21370 = s32[] constant(2147483647)
  %compare.4849 = pred[] compare(%param.299, %constant.21370), direction=LT
  %add.5064 = s32[] add(%param.299, %constant.5435)
  %select.3122 = s32[] select(%compare.4849, %add.5064, %constant.21370)
  %convert.3525 = f32[] convert(%select.3122)
  %power.512 = f32[] power(%constant.21367, %convert.3525)
  %subtract.355 = f32[] subtract(%constant.5437, %power.512)
  %broadcast.13927 = f32[4096]{0} broadcast(%subtract.355), dimensions={}
  %multiply.7385 = f32[4096]{0} multiply(%select.3121, %select.3121)
  %constant.21373 = f32[] constant(0.05)
  %broadcast.13928 = f32[4096]{0} broadcast(%constant.21373), dimensions={}
  %multiply.7386 = f32[4096]{0} multiply(%multiply.7385, %broadcast.13928)
  %param.300 = f32[4096]{0} parameter(584), sharding={replicated}
  %constant.21374 = f32[] constant(0.95)
  %broadcast.13929 = f32[4096]{0} broadcast(%constant.21374), dimensions={}
  %multiply.7387 = f32[4096]{0} multiply(%param.300, %broadcast.13929)
  %add.5065 = f32[4096]{0} add(%multiply.7386, %multiply.7387)
  %power.513 = f32[] power(%constant.21374, %convert.3525)
  %subtract.356 = f32[] subtract(%constant.5437, %power.513)
  %broadcast.13931 = f32[4096]{0} broadcast(%subtract.356), dimensions={}
  %divide.1062 = f32[4096]{0} divide(%add.5065, %broadcast.13931)
  %sqrt.1 = f32[4096]{0} sqrt(%divide.1062)
  %broadcast.13934 = f32[4096]{0} broadcast(%constant.10301), dimensions={}
  %add.5066 = f32[4096]{0} add(%sqrt.1, %broadcast.13934)
  %multiply.7388 = f32[4096]{0} multiply(%broadcast.13927, %add.5066)
  %divide.1063 = f32[4096]{0} divide(%add.5063, %multiply.7388)
  %multiply.7389 = f32[4096]{0} multiply(%param.1, %broadcast.13925)
  %add.5067 = f32[4096]{0} add(%divide.1063, %multiply.7389)
  %multiply.7390 = f32[4096]{0} multiply(%broadcast.7107, %add.5067)
  %add.5068 = f32[4096]{0} add(%param.1, %multiply.7390)
  %broadcast.13936 = f32[256,14336]{1,0} broadcast(%multiply.2451), dimensions={}
  %broadcast.13937 = pred[256,14336]{0,1} broadcast(%compare.4848), dimensions={}
  %broadcast.13938 = f32[256,14336]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1064 = f32[256,14336]{0,1} divide(%convert.3087, %broadcast.13938)
  %select.3123 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3087, %divide.1064)
  %broadcast.13940 = f32[256,14336]{1,0} broadcast(%constant.21366), dimensions={}
  %multiply.7391 = f32[256,14336]{0,1} multiply(%select.3123, %broadcast.13940)
  %param.301 = f32[256,14336]{1,0} parameter(294), sharding={devices=[16,1]<=[16]}
  %broadcast.13942 = f32[256,14336]{1,0} broadcast(%constant.21367), dimensions={}
  %multiply.7392 = f32[256,14336]{1,0} multiply(%param.301, %broadcast.13942)
  %add.5069 = f32[256,14336]{0,1} add(%multiply.7391, %multiply.7392)
  %broadcast.13943 = f32[256,14336]{1,0} broadcast(%subtract.355), dimensions={}
  %multiply.7393 = f32[256,14336]{0,1} multiply(%select.3123, %select.3123)
  %broadcast.13945 = f32[256,14336]{1,0} broadcast(%constant.21373), dimensions={}
  %multiply.7394 = f32[256,14336]{0,1} multiply(%multiply.7393, %broadcast.13945)
  %param.302 = f32[256,14336]{1,0} parameter(585), sharding={devices=[16,1]<=[16]}
  %broadcast.13947 = f32[256,14336]{1,0} broadcast(%constant.21374), dimensions={}
  %multiply.7395 = f32[256,14336]{1,0} multiply(%param.302, %broadcast.13947)
  %add.5070 = f32[256,14336]{0,1} add(%multiply.7394, %multiply.7395)
  %broadcast.13948 = f32[256,14336]{1,0} broadcast(%subtract.356), dimensions={}
  %divide.1065 = f32[256,14336]{0,1} divide(%add.5070, %broadcast.13948)
  %sqrt.2 = f32[256,14336]{0,1} sqrt(%divide.1065)
  %broadcast.13949 = f32[256,14336]{1,0} broadcast(%constant.10301), dimensions={}
  %add.5071 = f32[256,14336]{0,1} add(%sqrt.2, %broadcast.13949)
  %multiply.7397 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5071)
  %divide.1066 = f32[256,14336]{0,1} divide(%add.5069, %multiply.7397)
  %multiply.7399 = f32[256,14336]{1,0} multiply(%param.13, %broadcast.13940)
  %add.5072 = f32[256,14336]{0,1} add(%divide.1066, %multiply.7399)
  %multiply.7400 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5072)
  %add.5073 = f32[256,14336]{1,0} add(%param.13, %multiply.7400)
  %divide.1067 = f32[256,14336]{0,1} divide(%convert.3088, %broadcast.13938)
  %select.3124 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3088, %divide.1067)
  %multiply.7401 = f32[256,14336]{0,1} multiply(%select.3124, %broadcast.13940)
  %param.303 = f32[256,14336]{1,0} parameter(295), sharding={devices=[16,1]<=[16]}
  %multiply.7402 = f32[256,14336]{1,0} multiply(%param.303, %broadcast.13942)
  %add.5074 = f32[256,14336]{0,1} add(%multiply.7401, %multiply.7402)
  %multiply.7403 = f32[256,14336]{0,1} multiply(%select.3124, %select.3124)
  %multiply.7404 = f32[256,14336]{0,1} multiply(%multiply.7403, %broadcast.13945)
  %param.304 = f32[256,14336]{1,0} parameter(586), sharding={devices=[16,1]<=[16]}
  %multiply.7405 = f32[256,14336]{1,0} multiply(%param.304, %broadcast.13947)
  %add.5075 = f32[256,14336]{0,1} add(%multiply.7404, %multiply.7405)
  %divide.1068 = f32[256,14336]{0,1} divide(%add.5075, %broadcast.13948)
  %sqrt.3 = f32[256,14336]{0,1} sqrt(%divide.1068)
  %add.5076 = f32[256,14336]{0,1} add(%sqrt.3, %broadcast.13949)
  %multiply.7406 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5076)
  %divide.1069 = f32[256,14336]{0,1} divide(%add.5074, %multiply.7406)
  %multiply.7407 = f32[256,14336]{1,0} multiply(%param.14, %broadcast.13940)
  %add.5077 = f32[256,14336]{0,1} add(%divide.1069, %multiply.7407)
  %multiply.7408 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5077)
  %add.5078 = f32[256,14336]{1,0} add(%param.14, %multiply.7408)
  %broadcast.13955 = f32[14336,256]{1,0} broadcast(%multiply.2451), dimensions={}
  %broadcast.13956 = pred[14336,256]{0,1} broadcast(%compare.4848), dimensions={}
  %broadcast.13957 = f32[14336,256]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1070 = f32[14336,256]{0,1} divide(%convert.3089, %broadcast.13957)
  %select.3125 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3089, %divide.1070)
  %broadcast.13958 = f32[14336,256]{1,0} broadcast(%constant.21366), dimensions={}
  %multiply.7409 = f32[14336,256]{0,1} multiply(%select.3125, %broadcast.13958)
  %param.305 = f32[14336,256]{1,0} parameter(296), sharding={devices=[1,16]<=[16]}
  %broadcast.13959 = f32[14336,256]{1,0} broadcast(%constant.21367), dimensions={}
  %multiply.7410 = f32[14336,256]{1,0} multiply(%param.305, %broadcast.13959)
  %add.5079 = f32[14336,256]{0,1} add(%multiply.7409, %multiply.7410)
  %broadcast.13960 = f32[14336,256]{1,0} broadcast(%subtract.355), dimensions={}
  %multiply.7411 = f32[14336,256]{0,1} multiply(%select.3125, %select.3125)
  %broadcast.13961 = f32[14336,256]{1,0} broadcast(%constant.21373), dimensions={}
  %multiply.7412 = f32[14336,256]{0,1} multiply(%multiply.7411, %broadcast.13961)
  %param.306 = f32[14336,256]{1,0} parameter(587), sharding={devices=[1,16]<=[16]}
  %broadcast.13962 = f32[14336,256]{1,0} broadcast(%constant.21374), dimensions={}
  %multiply.7413 = f32[14336,256]{1,0} multiply(%param.306, %broadcast.13962)
  %add.5080 = f32[14336,256]{0,1} add(%multiply.7412, %multiply.7413)
  %broadcast.13963 = f32[14336,256]{1,0} broadcast(%subtract.356), dimensions={}
  %divide.1071 = f32[14336,256]{0,1} divide(%add.5080, %broadcast.13963)
  %sqrt.4 = f32[14336,256]{0,1} sqrt(%divide.1071)
  %broadcast.13964 = f32[14336,256]{1,0} broadcast(%constant.10301), dimensions={}
  %add.5081 = f32[14336,256]{0,1} add(%sqrt.4, %broadcast.13964)
  %multiply.7414 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5081)
  %divide.1072 = f32[14336,256]{0,1} divide(%add.5079, %multiply.7414)
  %multiply.7415 = f32[14336,256]{1,0} multiply(%param.15, %broadcast.13958)
  %add.5082 = f32[14336,256]{0,1} add(%divide.1072, %multiply.7415)
  %multiply.7416 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5082)
  %add.5084 = f32[14336,256]{1,0} add(%param.15, %multiply.7416)
  %divide.1073 = f32[4096]{0} divide(%convert.3092, %broadcast.13924)
  %select.3127 = f32[4096]{0} select(%broadcast.13923, %convert.3092, %divide.1073)
  %multiply.7417 = f32[4096]{0} multiply(%select.3127, %broadcast.13925)
  %param.307 = f32[4096]{0} parameter(297), sharding={replicated}
  %multiply.7418 = f32[4096]{0} multiply(%param.307, %broadcast.13926)
  %add.5085 = f32[4096]{0} add(%multiply.7417, %multiply.7418)
  %multiply.7419 = f32[4096]{0} multiply(%select.3127, %select.3127)
  %multiply.7420 = f32[4096]{0} multiply(%multiply.7419, %broadcast.13928)
  %param.308 = f32[4096]{0} parameter(588), sharding={replicated}
  %multiply.7421 = f32[4096]{0} multiply(%param.308, %broadcast.13929)
  %add.5086 = f32[4096]{0} add(%multiply.7420, %multiply.7421)
  %divide.1074 = f32[4096]{0} divide(%add.5086, %broadcast.13931)
  %sqrt.5 = f32[4096]{0} sqrt(%divide.1074)
  %add.5087 = f32[4096]{0} add(%sqrt.5, %broadcast.13934)
  %multiply.7422 = f32[4096]{0} multiply(%broadcast.13927, %add.5087)
  %divide.1075 = f32[4096]{0} divide(%add.5085, %multiply.7422)
  %multiply.7423 = f32[4096]{0} multiply(%param.12, %broadcast.13925)
  %add.5088 = f32[4096]{0} add(%divide.1075, %multiply.7423)
  %multiply.7424 = f32[4096]{0} multiply(%broadcast.7107, %add.5088)
  %add.5089 = f32[4096]{0} add(%param.12, %multiply.7424)
  %divide.1076 = f32[4096]{0} divide(%convert.3130, %broadcast.13924)
  %select.3129 = f32[4096]{0} select(%broadcast.13923, %convert.3130, %divide.1076)
  %multiply.7426 = f32[4096]{0} multiply(%select.3129, %broadcast.13925)
  %param.309 = f32[4096]{0} parameter(298), sharding={replicated}
  %multiply.7427 = f32[4096]{0} multiply(%param.309, %broadcast.13926)
  %add.5090 = f32[4096]{0} add(%multiply.7426, %multiply.7427)
  %multiply.7428 = f32[4096]{0} multiply(%select.3129, %select.3129)
  %multiply.7429 = f32[4096]{0} multiply(%multiply.7428, %broadcast.13928)
  %param.310 = f32[4096]{0} parameter(589), sharding={replicated}
  %multiply.7431 = f32[4096]{0} multiply(%param.310, %broadcast.13929)
  %add.5091 = f32[4096]{0} add(%multiply.7429, %multiply.7431)
  %divide.1077 = f32[4096]{0} divide(%add.5091, %broadcast.13931)
  %sqrt.6 = f32[4096]{0} sqrt(%divide.1077)
  %add.5092 = f32[4096]{0} add(%sqrt.6, %broadcast.13934)
  %multiply.7432 = f32[4096]{0} multiply(%broadcast.13927, %add.5092)
  %divide.1078 = f32[4096]{0} divide(%add.5090, %multiply.7432)
  %multiply.7433 = f32[4096]{0} multiply(%param.5, %broadcast.13925)
  %add.5093 = f32[4096]{0} add(%divide.1078, %multiply.7433)
  %multiply.7434 = f32[4096]{0} multiply(%broadcast.7107, %add.5093)
  %add.5094 = f32[4096]{0} add(%param.5, %multiply.7434)
  %broadcast.13975 = f32[256,8,128]{2,1,0} broadcast(%multiply.2451), dimensions={}
  %broadcast.13976 = pred[256,8,128]{0,2,1} broadcast(%compare.4848), dimensions={}
  %broadcast.13977 = f32[256,8,128]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1079 = f32[256,8,128]{0,2,1} divide(%transpose.384, %broadcast.13977)
  %select.3130 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.384, %divide.1079)
  %broadcast.13978 = f32[256,8,128]{2,1,0} broadcast(%constant.21366), dimensions={}
  %multiply.7435 = f32[256,8,128]{0,2,1} multiply(%select.3130, %broadcast.13978)
  %param.311 = f32[256,8,128]{2,1,0} parameter(299), sharding={devices=[16,1,1]<=[16]}
  %broadcast.13979 = f32[256,8,128]{2,1,0} broadcast(%constant.21367), dimensions={}
  %multiply.7437 = f32[256,8,128]{2,1,0} multiply(%param.311, %broadcast.13979)
  %add.5095 = f32[256,8,128]{0,2,1} add(%multiply.7435, %multiply.7437)
  %broadcast.13980 = f32[256,8,128]{2,1,0} broadcast(%subtract.355), dimensions={}
  %multiply.7438 = f32[256,8,128]{0,2,1} multiply(%select.3130, %select.3130)
  %broadcast.13981 = f32[256,8,128]{2,1,0} broadcast(%constant.21373), dimensions={}
  %multiply.7439 = f32[256,8,128]{0,2,1} multiply(%multiply.7438, %broadcast.13981)
  %param.312 = f32[256,8,128]{2,1,0} parameter(590), sharding={devices=[16,1,1]<=[16]}
  %broadcast.13982 = f32[256,8,128]{2,1,0} broadcast(%constant.21374), dimensions={}
  %multiply.7440 = f32[256,8,128]{2,1,0} multiply(%param.312, %broadcast.13982)
  %add.5096 = f32[256,8,128]{0,2,1} add(%multiply.7439, %multiply.7440)
  %broadcast.13983 = f32[256,8,128]{2,1,0} broadcast(%subtract.356), dimensions={}
  %divide.1080 = f32[256,8,128]{0,2,1} divide(%add.5096, %broadcast.13983)
  %sqrt.7 = f32[256,8,128]{0,2,1} sqrt(%divide.1080)
  %broadcast.13984 = f32[256,8,128]{2,1,0} broadcast(%constant.10301), dimensions={}
  %add.5097 = f32[256,8,128]{0,2,1} add(%sqrt.7, %broadcast.13984)
  %multiply.7441 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5097)
  %divide.1081 = f32[256,8,128]{0,2,1} divide(%add.5095, %multiply.7441)
  %multiply.7442 = f32[256,8,128]{2,1,0} multiply(%param.8, %broadcast.13978)
  %add.5098 = f32[256,8,128]{0,2,1} add(%divide.1081, %multiply.7442)
  %multiply.7443 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5098)
  %add.5099 = f32[256,8,128]{2,1,0} add(%param.8, %multiply.7443)
  %broadcast.13985 = f32[32,128,256]{2,1,0} broadcast(%multiply.2451), dimensions={}
  %broadcast.13986 = pred[32,128,256]{1,0,2} broadcast(%compare.4848), dimensions={}
  %broadcast.13987 = f32[32,128,256]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1082 = f32[32,128,256]{1,0,2} divide(%transpose.385, %broadcast.13987)
  %select.3131 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.385, %divide.1082)
  %broadcast.13989 = f32[32,128,256]{2,1,0} broadcast(%constant.21366), dimensions={}
  %multiply.7444 = f32[32,128,256]{1,0,2} multiply(%select.3131, %broadcast.13989)
  %param.313 = f32[32,128,256]{2,1,0} parameter(300), sharding={devices=[1,1,16]<=[16]}
  %broadcast.13991 = f32[32,128,256]{2,1,0} broadcast(%constant.21367), dimensions={}
  %multiply.7445 = f32[32,128,256]{2,1,0} multiply(%param.313, %broadcast.13991)
  %add.5100 = f32[32,128,256]{1,0,2} add(%multiply.7444, %multiply.7445)
  %broadcast.13992 = f32[32,128,256]{2,1,0} broadcast(%subtract.355), dimensions={}
  %multiply.7446 = f32[32,128,256]{1,0,2} multiply(%select.3131, %select.3131)
  %broadcast.13993 = f32[32,128,256]{2,1,0} broadcast(%constant.21373), dimensions={}
  %multiply.7447 = f32[32,128,256]{1,0,2} multiply(%multiply.7446, %broadcast.13993)
  %param.314 = f32[32,128,256]{2,1,0} parameter(591), sharding={devices=[1,1,16]<=[16]}
  %broadcast.13994 = f32[32,128,256]{2,1,0} broadcast(%constant.21374), dimensions={}
  %multiply.7448 = f32[32,128,256]{2,1,0} multiply(%param.314, %broadcast.13994)
  %add.5101 = f32[32,128,256]{1,0,2} add(%multiply.7447, %multiply.7448)
  %broadcast.13996 = f32[32,128,256]{2,1,0} broadcast(%subtract.356), dimensions={}
  %divide.1083 = f32[32,128,256]{1,0,2} divide(%add.5101, %broadcast.13996)
  %sqrt.8 = f32[32,128,256]{1,0,2} sqrt(%divide.1083)
  %broadcast.13998 = f32[32,128,256]{2,1,0} broadcast(%constant.10301), dimensions={}
  %add.5102 = f32[32,128,256]{1,0,2} add(%sqrt.8, %broadcast.13998)
  %multiply.7449 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5102)
  %divide.1084 = f32[32,128,256]{1,0,2} divide(%add.5100, %multiply.7449)
  %multiply.7450 = f32[32,128,256]{2,1,0} multiply(%param.11, %broadcast.13989)
  %add.5103 = f32[32,128,256]{1,0,2} add(%divide.1084, %multiply.7450)
  %multiply.7451 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5103)
  %add.5104 = f32[32,128,256]{2,1,0} add(%param.11, %multiply.7451)
  %broadcast.13999 = f32[256,32,128]{2,1,0} broadcast(%multiply.2451), dimensions={}
  %broadcast.14000 = pred[256,32,128]{0,2,1} broadcast(%compare.4848), dimensions={}
  %broadcast.14001 = f32[256,32,128]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1085 = f32[256,32,128]{0,2,1} divide(%transpose.386, %broadcast.14001)
  %select.3132 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.386, %divide.1085)
  %broadcast.14002 = f32[256,32,128]{2,1,0} broadcast(%constant.21366), dimensions={}
  %multiply.7452 = f32[256,32,128]{0,2,1} multiply(%select.3132, %broadcast.14002)
  %param.315 = f32[256,32,128]{2,1,0} parameter(301), sharding={devices=[16,1,1]<=[16]}
  %broadcast.14003 = f32[256,32,128]{2,1,0} broadcast(%constant.21367), dimensions={}
  %multiply.7453 = f32[256,32,128]{2,1,0} multiply(%param.315, %broadcast.14003)
  %add.5105 = f32[256,32,128]{0,2,1} add(%multiply.7452, %multiply.7453)
  %broadcast.14004 = f32[256,32,128]{2,1,0} broadcast(%subtract.355), dimensions={}
  %multiply.7454 = f32[256,32,128]{0,2,1} multiply(%select.3132, %select.3132)
  %broadcast.14005 = f32[256,32,128]{2,1,0} broadcast(%constant.21373), dimensions={}
  %multiply.7455 = f32[256,32,128]{0,2,1} multiply(%multiply.7454, %broadcast.14005)
  %param.316 = f32[256,32,128]{2,1,0} parameter(592), sharding={devices=[16,1,1]<=[16]}
  %broadcast.14006 = f32[256,32,128]{2,1,0} broadcast(%constant.21374), dimensions={}
  %multiply.7456 = f32[256,32,128]{2,1,0} multiply(%param.316, %broadcast.14006)
  %add.5106 = f32[256,32,128]{0,2,1} add(%multiply.7455, %multiply.7456)
  %broadcast.14007 = f32[256,32,128]{2,1,0} broadcast(%subtract.356), dimensions={}
  %divide.1086 = f32[256,32,128]{0,2,1} divide(%add.5106, %broadcast.14007)
  %sqrt.9 = f32[256,32,128]{0,2,1} sqrt(%divide.1086)
  %broadcast.14008 = f32[256,32,128]{2,1,0} broadcast(%constant.10301), dimensions={}
  %add.5107 = f32[256,32,128]{0,2,1} add(%sqrt.9, %broadcast.14008)
  %multiply.7457 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5107)
  %divide.1087 = f32[256,32,128]{0,2,1} divide(%add.5105, %multiply.7457)
  %multiply.7458 = f32[256,32,128]{2,1,0} multiply(%param.6, %broadcast.14002)
  %add.5108 = f32[256,32,128]{0,2,1} add(%divide.1087, %multiply.7458)
  %multiply.7459 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5108)
  %add.5109 = f32[256,32,128]{2,1,0} add(%param.6, %multiply.7459)
  %divide.1088 = f32[256,8,128]{0,2,1} divide(%transpose.387, %broadcast.13977)
  %select.3133 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.387, %divide.1088)
  %multiply.7460 = f32[256,8,128]{0,2,1} multiply(%select.3133, %broadcast.13978)
  %param.317 = f32[256,8,128]{2,1,0} parameter(302), sharding={devices=[16,1,1]<=[16]}
  %multiply.7461 = f32[256,8,128]{2,1,0} multiply(%param.317, %broadcast.13979)
  %add.5110 = f32[256,8,128]{0,2,1} add(%multiply.7460, %multiply.7461)
  %multiply.7462 = f32[256,8,128]{0,2,1} multiply(%select.3133, %select.3133)
  %multiply.7463 = f32[256,8,128]{0,2,1} multiply(%multiply.7462, %broadcast.13981)
  %param.318 = f32[256,8,128]{2,1,0} parameter(593), sharding={devices=[16,1,1]<=[16]}
  %multiply.7464 = f32[256,8,128]{2,1,0} multiply(%param.318, %broadcast.13982)
  %add.5111 = f32[256,8,128]{0,2,1} add(%multiply.7463, %multiply.7464)
  %divide.1089 = f32[256,8,128]{0,2,1} divide(%add.5111, %broadcast.13983)
  %sqrt.10 = f32[256,8,128]{0,2,1} sqrt(%divide.1089)
  %add.5112 = f32[256,8,128]{0,2,1} add(%sqrt.10, %broadcast.13984)
  %multiply.7465 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5112)
  %divide.1090 = f32[256,8,128]{0,2,1} divide(%add.5110, %multiply.7465)
  %multiply.7466 = f32[256,8,128]{2,1,0} multiply(%param.9, %broadcast.13978)
  %add.5113 = f32[256,8,128]{0,2,1} add(%divide.1090, %multiply.7466)
  %multiply.7467 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5113)
  %add.5114 = f32[256,8,128]{2,1,0} add(%param.9, %multiply.7467)
  %divide.1091 = f32[256,14336]{0,1} divide(%convert.3138, %broadcast.13938)
  %select.3134 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3138, %divide.1091)
  %multiply.7468 = f32[256,14336]{0,1} multiply(%select.3134, %broadcast.13940)
  %param.319 = f32[256,14336]{1,0} parameter(303), sharding={devices=[16,1]<=[16]}
  %multiply.7469 = f32[256,14336]{1,0} multiply(%param.319, %broadcast.13942)
  %add.5115 = f32[256,14336]{0,1} add(%multiply.7468, %multiply.7469)
  %multiply.7470 = f32[256,14336]{0,1} multiply(%select.3134, %select.3134)
  %multiply.7471 = f32[256,14336]{0,1} multiply(%multiply.7470, %broadcast.13945)
  %param.320 = f32[256,14336]{1,0} parameter(594), sharding={devices=[16,1]<=[16]}
  %multiply.7472 = f32[256,14336]{1,0} multiply(%param.320, %broadcast.13947)
  %add.5116 = f32[256,14336]{0,1} add(%multiply.7471, %multiply.7472)
  %divide.1092 = f32[256,14336]{0,1} divide(%add.5116, %broadcast.13948)
  %sqrt.11 = f32[256,14336]{0,1} sqrt(%divide.1092)
  %add.5117 = f32[256,14336]{0,1} add(%sqrt.11, %broadcast.13949)
  %multiply.7473 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5117)
  %divide.1093 = f32[256,14336]{0,1} divide(%add.5115, %multiply.7473)
  %multiply.7474 = f32[256,14336]{1,0} multiply(%param.22, %broadcast.13940)
  %add.5118 = f32[256,14336]{0,1} add(%divide.1093, %multiply.7474)
  %multiply.7475 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5118)
  %add.5119 = f32[256,14336]{1,0} add(%param.22, %multiply.7475)
  %divide.1094 = f32[256,14336]{0,1} divide(%convert.3139, %broadcast.13938)
  %select.3135 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3139, %divide.1094)
  %multiply.7476 = f32[256,14336]{0,1} multiply(%select.3135, %broadcast.13940)
  %param.321 = f32[256,14336]{1,0} parameter(304), sharding={devices=[16,1]<=[16]}
  %multiply.7477 = f32[256,14336]{1,0} multiply(%param.321, %broadcast.13942)
  %add.5120 = f32[256,14336]{0,1} add(%multiply.7476, %multiply.7477)
  %multiply.7478 = f32[256,14336]{0,1} multiply(%select.3135, %select.3135)
  %multiply.7479 = f32[256,14336]{0,1} multiply(%multiply.7478, %broadcast.13945)
  %param.322 = f32[256,14336]{1,0} parameter(595), sharding={devices=[16,1]<=[16]}
  %multiply.7480 = f32[256,14336]{1,0} multiply(%param.322, %broadcast.13947)
  %add.5122 = f32[256,14336]{0,1} add(%multiply.7479, %multiply.7480)
  %divide.1095 = f32[256,14336]{0,1} divide(%add.5122, %broadcast.13948)
  %sqrt.12 = f32[256,14336]{0,1} sqrt(%divide.1095)
  %add.5123 = f32[256,14336]{0,1} add(%sqrt.12, %broadcast.13949)
  %multiply.7481 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5123)
  %divide.1096 = f32[256,14336]{0,1} divide(%add.5120, %multiply.7481)
  %multiply.7482 = f32[256,14336]{1,0} multiply(%param.23, %broadcast.13940)
  %add.5124 = f32[256,14336]{0,1} add(%divide.1096, %multiply.7482)
  %multiply.7483 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5124)
  %add.5125 = f32[256,14336]{1,0} add(%param.23, %multiply.7483)
  %divide.1097 = f32[14336,256]{0,1} divide(%convert.3140, %broadcast.13957)
  %select.3136 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3140, %divide.1097)
  %multiply.7484 = f32[14336,256]{0,1} multiply(%select.3136, %broadcast.13958)
  %param.323 = f32[14336,256]{1,0} parameter(305), sharding={devices=[1,16]<=[16]}
  %multiply.7485 = f32[14336,256]{1,0} multiply(%param.323, %broadcast.13959)
  %add.5126 = f32[14336,256]{0,1} add(%multiply.7484, %multiply.7485)
  %multiply.7486 = f32[14336,256]{0,1} multiply(%select.3136, %select.3136)
  %multiply.7487 = f32[14336,256]{0,1} multiply(%multiply.7486, %broadcast.13961)
  %param.324 = f32[14336,256]{1,0} parameter(596), sharding={devices=[1,16]<=[16]}
  %multiply.7488 = f32[14336,256]{1,0} multiply(%param.324, %broadcast.13962)
  %add.5127 = f32[14336,256]{0,1} add(%multiply.7487, %multiply.7488)
  %divide.1098 = f32[14336,256]{0,1} divide(%add.5127, %broadcast.13963)
  %sqrt.13 = f32[14336,256]{0,1} sqrt(%divide.1098)
  %add.5128 = f32[14336,256]{0,1} add(%sqrt.13, %broadcast.13964)
  %multiply.7489 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5128)
  %divide.1099 = f32[14336,256]{0,1} divide(%add.5126, %multiply.7489)
  %multiply.7490 = f32[14336,256]{1,0} multiply(%param.24, %broadcast.13958)
  %add.5129 = f32[14336,256]{0,1} add(%divide.1099, %multiply.7490)
  %multiply.7491 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5129)
  %add.5130 = f32[14336,256]{1,0} add(%param.24, %multiply.7491)
  %divide.1100 = f32[4096]{0} divide(%convert.3141, %broadcast.13924)
  %select.3137 = f32[4096]{0} select(%broadcast.13923, %convert.3141, %divide.1100)
  %multiply.7492 = f32[4096]{0} multiply(%select.3137, %broadcast.13925)
  %param.325 = f32[4096]{0} parameter(306), sharding={replicated}
  %multiply.7493 = f32[4096]{0} multiply(%param.325, %broadcast.13926)
  %add.5131 = f32[4096]{0} add(%multiply.7492, %multiply.7493)
  %multiply.7494 = f32[4096]{0} multiply(%select.3137, %select.3137)
  %multiply.7495 = f32[4096]{0} multiply(%multiply.7494, %broadcast.13928)
  %param.326 = f32[4096]{0} parameter(597), sharding={replicated}
  %multiply.7497 = f32[4096]{0} multiply(%param.326, %broadcast.13929)
  %add.5132 = f32[4096]{0} add(%multiply.7495, %multiply.7497)
  %divide.1101 = f32[4096]{0} divide(%add.5132, %broadcast.13931)
  %sqrt.14 = f32[4096]{0} sqrt(%divide.1101)
  %add.5133 = f32[4096]{0} add(%sqrt.14, %broadcast.13934)
  %multiply.7498 = f32[4096]{0} multiply(%broadcast.13927, %add.5133)
  %divide.1102 = f32[4096]{0} divide(%add.5131, %multiply.7498)
  %multiply.7499 = f32[4096]{0} multiply(%param.21, %broadcast.13925)
  %add.5134 = f32[4096]{0} add(%divide.1102, %multiply.7499)
  %multiply.7500 = f32[4096]{0} multiply(%broadcast.7107, %add.5134)
  %add.5135 = f32[4096]{0} add(%param.21, %multiply.7500)
  %divide.1103 = f32[4096]{0} divide(%convert.3143, %broadcast.13924)
  %select.3138 = f32[4096]{0} select(%broadcast.13923, %convert.3143, %divide.1103)
  %multiply.7501 = f32[4096]{0} multiply(%select.3138, %broadcast.13925)
  %param.327 = f32[4096]{0} parameter(307), sharding={replicated}
  %multiply.7502 = f32[4096]{0} multiply(%param.327, %broadcast.13926)
  %add.5136 = f32[4096]{0} add(%multiply.7501, %multiply.7502)
  %multiply.7503 = f32[4096]{0} multiply(%select.3138, %select.3138)
  %multiply.7504 = f32[4096]{0} multiply(%multiply.7503, %broadcast.13928)
  %param.328 = f32[4096]{0} parameter(598), sharding={replicated}
  %multiply.7505 = f32[4096]{0} multiply(%param.328, %broadcast.13929)
  %add.5137 = f32[4096]{0} add(%multiply.7504, %multiply.7505)
  %divide.1104 = f32[4096]{0} divide(%add.5137, %broadcast.13931)
  %sqrt.15 = f32[4096]{0} sqrt(%divide.1104)
  %add.5138 = f32[4096]{0} add(%sqrt.15, %broadcast.13934)
  %multiply.7506 = f32[4096]{0} multiply(%broadcast.13927, %add.5138)
  %divide.1105 = f32[4096]{0} divide(%add.5136, %multiply.7506)
  %multiply.7507 = f32[4096]{0} multiply(%param.16, %broadcast.13925)
  %add.5139 = f32[4096]{0} add(%divide.1105, %multiply.7507)
  %multiply.7508 = f32[4096]{0} multiply(%broadcast.7107, %add.5139)
  %add.5140 = f32[4096]{0} add(%param.16, %multiply.7508)
  %divide.1106 = f32[256,8,128]{0,2,1} divide(%transpose.388, %broadcast.13977)
  %select.3139 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.388, %divide.1106)
  %multiply.7510 = f32[256,8,128]{0,2,1} multiply(%select.3139, %broadcast.13978)
  %param.329 = f32[256,8,128]{2,1,0} parameter(308), sharding={devices=[16,1,1]<=[16]}
  %multiply.7511 = f32[256,8,128]{2,1,0} multiply(%param.329, %broadcast.13979)
  %add.5141 = f32[256,8,128]{0,2,1} add(%multiply.7510, %multiply.7511)
  %multiply.7512 = f32[256,8,128]{0,2,1} multiply(%select.3139, %select.3139)
  %multiply.7513 = f32[256,8,128]{0,2,1} multiply(%multiply.7512, %broadcast.13981)
  %param.330 = f32[256,8,128]{2,1,0} parameter(599), sharding={devices=[16,1,1]<=[16]}
  %multiply.7514 = f32[256,8,128]{2,1,0} multiply(%param.330, %broadcast.13982)
  %add.5142 = f32[256,8,128]{0,2,1} add(%multiply.7513, %multiply.7514)
  %divide.1107 = f32[256,8,128]{0,2,1} divide(%add.5142, %broadcast.13983)
  %sqrt.16 = f32[256,8,128]{0,2,1} sqrt(%divide.1107)
  %add.5143 = f32[256,8,128]{0,2,1} add(%sqrt.16, %broadcast.13984)
  %multiply.7515 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5143)
  %divide.1108 = f32[256,8,128]{0,2,1} divide(%add.5141, %multiply.7515)
  %multiply.7517 = f32[256,8,128]{2,1,0} multiply(%param.18, %broadcast.13978)
  %add.5144 = f32[256,8,128]{0,2,1} add(%divide.1108, %multiply.7517)
  %multiply.7518 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5144)
  %add.5145 = f32[256,8,128]{2,1,0} add(%param.18, %multiply.7518)
  %divide.1109 = f32[32,128,256]{1,0,2} divide(%transpose.389, %broadcast.13987)
  %select.3140 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.389, %divide.1109)
  %multiply.7519 = f32[32,128,256]{1,0,2} multiply(%select.3140, %broadcast.13989)
  %param.331 = f32[32,128,256]{2,1,0} parameter(309), sharding={devices=[1,1,16]<=[16]}
  %multiply.7520 = f32[32,128,256]{2,1,0} multiply(%param.331, %broadcast.13991)
  %add.5146 = f32[32,128,256]{1,0,2} add(%multiply.7519, %multiply.7520)
  %multiply.7521 = f32[32,128,256]{1,0,2} multiply(%select.3140, %select.3140)
  %multiply.7522 = f32[32,128,256]{1,0,2} multiply(%multiply.7521, %broadcast.13993)
  %param.332 = f32[32,128,256]{2,1,0} parameter(600), sharding={devices=[1,1,16]<=[16]}
  %multiply.7523 = f32[32,128,256]{2,1,0} multiply(%param.332, %broadcast.13994)
  %add.5147 = f32[32,128,256]{1,0,2} add(%multiply.7522, %multiply.7523)
  %divide.1110 = f32[32,128,256]{1,0,2} divide(%add.5147, %broadcast.13996)
  %sqrt.17 = f32[32,128,256]{1,0,2} sqrt(%divide.1110)
  %add.5148 = f32[32,128,256]{1,0,2} add(%sqrt.17, %broadcast.13998)
  %multiply.7524 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5148)
  %divide.1111 = f32[32,128,256]{1,0,2} divide(%add.5146, %multiply.7524)
  %multiply.7526 = f32[32,128,256]{2,1,0} multiply(%param.20, %broadcast.13989)
  %add.5149 = f32[32,128,256]{1,0,2} add(%divide.1111, %multiply.7526)
  %multiply.7527 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5149)
  %add.5150 = f32[32,128,256]{2,1,0} add(%param.20, %multiply.7527)
  %divide.1112 = f32[256,32,128]{0,2,1} divide(%transpose.390, %broadcast.14001)
  %select.3141 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.390, %divide.1112)
  %multiply.7528 = f32[256,32,128]{0,2,1} multiply(%select.3141, %broadcast.14002)
  %param.333 = f32[256,32,128]{2,1,0} parameter(310), sharding={devices=[16,1,1]<=[16]}
  %multiply.7529 = f32[256,32,128]{2,1,0} multiply(%param.333, %broadcast.14003)
  %add.5151 = f32[256,32,128]{0,2,1} add(%multiply.7528, %multiply.7529)
  %multiply.7530 = f32[256,32,128]{0,2,1} multiply(%select.3141, %select.3141)
  %multiply.7531 = f32[256,32,128]{0,2,1} multiply(%multiply.7530, %broadcast.14005)
  %param.334 = f32[256,32,128]{2,1,0} parameter(601), sharding={devices=[16,1,1]<=[16]}
  %multiply.7532 = f32[256,32,128]{2,1,0} multiply(%param.334, %broadcast.14006)
  %add.5152 = f32[256,32,128]{0,2,1} add(%multiply.7531, %multiply.7532)
  %divide.1113 = f32[256,32,128]{0,2,1} divide(%add.5152, %broadcast.14007)
  %sqrt.18 = f32[256,32,128]{0,2,1} sqrt(%divide.1113)
  %add.5153 = f32[256,32,128]{0,2,1} add(%sqrt.18, %broadcast.14008)
  %multiply.7533 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5153)
  %divide.1114 = f32[256,32,128]{0,2,1} divide(%add.5151, %multiply.7533)
  %multiply.7535 = f32[256,32,128]{2,1,0} multiply(%param.17, %broadcast.14002)
  %add.5154 = f32[256,32,128]{0,2,1} add(%divide.1114, %multiply.7535)
  %multiply.7536 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5154)
  %add.5155 = f32[256,32,128]{2,1,0} add(%param.17, %multiply.7536)
  %divide.1115 = f32[256,8,128]{0,2,1} divide(%transpose.391, %broadcast.13977)
  %select.3142 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.391, %divide.1115)
  %multiply.7537 = f32[256,8,128]{0,2,1} multiply(%select.3142, %broadcast.13978)
  %param.335 = f32[256,8,128]{2,1,0} parameter(311), sharding={devices=[16,1,1]<=[16]}
  %multiply.7538 = f32[256,8,128]{2,1,0} multiply(%param.335, %broadcast.13979)
  %add.5156 = f32[256,8,128]{0,2,1} add(%multiply.7537, %multiply.7538)
  %multiply.7539 = f32[256,8,128]{0,2,1} multiply(%select.3142, %select.3142)
  %multiply.7540 = f32[256,8,128]{0,2,1} multiply(%multiply.7539, %broadcast.13981)
  %param.336 = f32[256,8,128]{2,1,0} parameter(602), sharding={devices=[16,1,1]<=[16]}
  %multiply.7541 = f32[256,8,128]{2,1,0} multiply(%param.336, %broadcast.13982)
  %add.5157 = f32[256,8,128]{0,2,1} add(%multiply.7540, %multiply.7541)
  %divide.1116 = f32[256,8,128]{0,2,1} divide(%add.5157, %broadcast.13983)
  %sqrt.19 = f32[256,8,128]{0,2,1} sqrt(%divide.1116)
  %add.5158 = f32[256,8,128]{0,2,1} add(%sqrt.19, %broadcast.13984)
  %multiply.7542 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5158)
  %divide.1117 = f32[256,8,128]{0,2,1} divide(%add.5156, %multiply.7542)
  %multiply.7543 = f32[256,8,128]{2,1,0} multiply(%param.19, %broadcast.13978)
  %add.5160 = f32[256,8,128]{0,2,1} add(%divide.1117, %multiply.7543)
  %multiply.7544 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5160)
  %add.5161 = f32[256,8,128]{2,1,0} add(%param.19, %multiply.7544)
  %divide.1118 = f32[256,14336]{0,1} divide(%convert.3151, %broadcast.13938)
  %select.3143 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3151, %divide.1118)
  %multiply.7545 = f32[256,14336]{0,1} multiply(%select.3143, %broadcast.13940)
  %param.337 = f32[256,14336]{1,0} parameter(312), sharding={devices=[16,1]<=[16]}
  %multiply.7546 = f32[256,14336]{1,0} multiply(%param.337, %broadcast.13942)
  %add.5162 = f32[256,14336]{0,1} add(%multiply.7545, %multiply.7546)
  %multiply.7548 = f32[256,14336]{0,1} multiply(%select.3143, %select.3143)
  %multiply.7549 = f32[256,14336]{0,1} multiply(%multiply.7548, %broadcast.13945)
  %param.338 = f32[256,14336]{1,0} parameter(603), sharding={devices=[16,1]<=[16]}
  %multiply.7550 = f32[256,14336]{1,0} multiply(%param.338, %broadcast.13947)
  %add.5163 = f32[256,14336]{0,1} add(%multiply.7549, %multiply.7550)
  %divide.1119 = f32[256,14336]{0,1} divide(%add.5163, %broadcast.13948)
  %sqrt.20 = f32[256,14336]{0,1} sqrt(%divide.1119)
  %add.5164 = f32[256,14336]{0,1} add(%sqrt.20, %broadcast.13949)
  %multiply.7551 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5164)
  %divide.1120 = f32[256,14336]{0,1} divide(%add.5162, %multiply.7551)
  %multiply.7552 = f32[256,14336]{1,0} multiply(%param.103, %broadcast.13940)
  %add.5165 = f32[256,14336]{0,1} add(%divide.1120, %multiply.7552)
  %multiply.7553 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5165)
  %add.5166 = f32[256,14336]{1,0} add(%param.103, %multiply.7553)
  %divide.1121 = f32[256,14336]{0,1} divide(%convert.3152, %broadcast.13938)
  %select.3144 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3152, %divide.1121)
  %multiply.7555 = f32[256,14336]{0,1} multiply(%select.3144, %broadcast.13940)
  %param.339 = f32[256,14336]{1,0} parameter(313), sharding={devices=[16,1]<=[16]}
  %multiply.7556 = f32[256,14336]{1,0} multiply(%param.339, %broadcast.13942)
  %add.5167 = f32[256,14336]{0,1} add(%multiply.7555, %multiply.7556)
  %multiply.7557 = f32[256,14336]{0,1} multiply(%select.3144, %select.3144)
  %multiply.7558 = f32[256,14336]{0,1} multiply(%multiply.7557, %broadcast.13945)
  %param.340 = f32[256,14336]{1,0} parameter(604), sharding={devices=[16,1]<=[16]}
  %multiply.7559 = f32[256,14336]{1,0} multiply(%param.340, %broadcast.13947)
  %add.5168 = f32[256,14336]{0,1} add(%multiply.7558, %multiply.7559)
  %divide.1122 = f32[256,14336]{0,1} divide(%add.5168, %broadcast.13948)
  %sqrt.21 = f32[256,14336]{0,1} sqrt(%divide.1122)
  %add.5169 = f32[256,14336]{0,1} add(%sqrt.21, %broadcast.13949)
  %multiply.7560 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5169)
  %divide.1123 = f32[256,14336]{0,1} divide(%add.5167, %multiply.7560)
  %multiply.7561 = f32[256,14336]{1,0} multiply(%param.104, %broadcast.13940)
  %add.5170 = f32[256,14336]{0,1} add(%divide.1123, %multiply.7561)
  %multiply.7562 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5170)
  %add.5171 = f32[256,14336]{1,0} add(%param.104, %multiply.7562)
  %divide.1124 = f32[14336,256]{0,1} divide(%convert.3153, %broadcast.13957)
  %select.3145 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3153, %divide.1124)
  %multiply.7563 = f32[14336,256]{0,1} multiply(%select.3145, %broadcast.13958)
  %param.341 = f32[14336,256]{1,0} parameter(314), sharding={devices=[1,16]<=[16]}
  %multiply.7564 = f32[14336,256]{1,0} multiply(%param.341, %broadcast.13959)
  %add.5172 = f32[14336,256]{0,1} add(%multiply.7563, %multiply.7564)
  %multiply.7565 = f32[14336,256]{0,1} multiply(%select.3145, %select.3145)
  %multiply.7566 = f32[14336,256]{0,1} multiply(%multiply.7565, %broadcast.13961)
  %param.342 = f32[14336,256]{1,0} parameter(605), sharding={devices=[1,16]<=[16]}
  %multiply.7567 = f32[14336,256]{1,0} multiply(%param.342, %broadcast.13962)
  %add.5173 = f32[14336,256]{0,1} add(%multiply.7566, %multiply.7567)
  %divide.1125 = f32[14336,256]{0,1} divide(%add.5173, %broadcast.13963)
  %sqrt.22 = f32[14336,256]{0,1} sqrt(%divide.1125)
  %add.5174 = f32[14336,256]{0,1} add(%sqrt.22, %broadcast.13964)
  %multiply.7568 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5174)
  %divide.1126 = f32[14336,256]{0,1} divide(%add.5172, %multiply.7568)
  %multiply.7569 = f32[14336,256]{1,0} multiply(%param.105, %broadcast.13958)
  %add.5175 = f32[14336,256]{0,1} add(%divide.1126, %multiply.7569)
  %multiply.7570 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5175)
  %add.5176 = f32[14336,256]{1,0} add(%param.105, %multiply.7570)
  %divide.1127 = f32[4096]{0} divide(%convert.3154, %broadcast.13924)
  %select.3146 = f32[4096]{0} select(%broadcast.13923, %convert.3154, %divide.1127)
  %multiply.7571 = f32[4096]{0} multiply(%select.3146, %broadcast.13925)
  %param.343 = f32[4096]{0} parameter(315), sharding={replicated}
  %multiply.7572 = f32[4096]{0} multiply(%param.343, %broadcast.13926)
  %add.5177 = f32[4096]{0} add(%multiply.7571, %multiply.7572)
  %multiply.7573 = f32[4096]{0} multiply(%select.3146, %select.3146)
  %multiply.7574 = f32[4096]{0} multiply(%multiply.7573, %broadcast.13928)
  %param.344 = f32[4096]{0} parameter(606), sharding={replicated}
  %multiply.7575 = f32[4096]{0} multiply(%param.344, %broadcast.13929)
  %add.5178 = f32[4096]{0} add(%multiply.7574, %multiply.7575)
  %divide.1128 = f32[4096]{0} divide(%add.5178, %broadcast.13931)
  %sqrt.23 = f32[4096]{0} sqrt(%divide.1128)
  %add.5179 = f32[4096]{0} add(%sqrt.23, %broadcast.13934)
  %multiply.7576 = f32[4096]{0} multiply(%broadcast.13927, %add.5179)
  %divide.1129 = f32[4096]{0} divide(%add.5177, %multiply.7576)
  %multiply.7577 = f32[4096]{0} multiply(%param.102, %broadcast.13925)
  %add.5180 = f32[4096]{0} add(%divide.1129, %multiply.7577)
  %multiply.7578 = f32[4096]{0} multiply(%broadcast.7107, %add.5180)
  %add.5181 = f32[4096]{0} add(%param.102, %multiply.7578)
  %divide.1131 = f32[4096]{0} divide(%convert.3157, %broadcast.13924)
  %select.3147 = f32[4096]{0} select(%broadcast.13923, %convert.3157, %divide.1131)
  %multiply.7579 = f32[4096]{0} multiply(%select.3147, %broadcast.13925)
  %param.345 = f32[4096]{0} parameter(316), sharding={replicated}
  %multiply.7580 = f32[4096]{0} multiply(%param.345, %broadcast.13926)
  %add.5182 = f32[4096]{0} add(%multiply.7579, %multiply.7580)
  %multiply.7581 = f32[4096]{0} multiply(%select.3147, %select.3147)
  %multiply.7582 = f32[4096]{0} multiply(%multiply.7581, %broadcast.13928)
  %param.346 = f32[4096]{0} parameter(607), sharding={replicated}
  %multiply.7583 = f32[4096]{0} multiply(%param.346, %broadcast.13929)
  %add.5183 = f32[4096]{0} add(%multiply.7582, %multiply.7583)
  %divide.1132 = f32[4096]{0} divide(%add.5183, %broadcast.13931)
  %sqrt.24 = f32[4096]{0} sqrt(%divide.1132)
  %add.5184 = f32[4096]{0} add(%sqrt.24, %broadcast.13934)
  %multiply.7585 = f32[4096]{0} multiply(%broadcast.13927, %add.5184)
  %divide.1133 = f32[4096]{0} divide(%add.5182, %multiply.7585)
  %multiply.7586 = f32[4096]{0} multiply(%param.97, %broadcast.13925)
  %add.5185 = f32[4096]{0} add(%divide.1133, %multiply.7586)
  %multiply.7587 = f32[4096]{0} multiply(%broadcast.7107, %add.5185)
  %add.5186 = f32[4096]{0} add(%param.97, %multiply.7587)
  %divide.1136 = f32[256,8,128]{0,2,1} divide(%transpose.392, %broadcast.13977)
  %select.3148 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.392, %divide.1136)
  %multiply.7588 = f32[256,8,128]{0,2,1} multiply(%select.3148, %broadcast.13978)
  %param.347 = f32[256,8,128]{2,1,0} parameter(317), sharding={devices=[16,1,1]<=[16]}
  %multiply.7589 = f32[256,8,128]{2,1,0} multiply(%param.347, %broadcast.13979)
  %add.5187 = f32[256,8,128]{0,2,1} add(%multiply.7588, %multiply.7589)
  %multiply.7590 = f32[256,8,128]{0,2,1} multiply(%select.3148, %select.3148)
  %multiply.7591 = f32[256,8,128]{0,2,1} multiply(%multiply.7590, %broadcast.13981)
  %param.348 = f32[256,8,128]{2,1,0} parameter(608), sharding={devices=[16,1,1]<=[16]}
  %multiply.7592 = f32[256,8,128]{2,1,0} multiply(%param.348, %broadcast.13982)
  %add.5188 = f32[256,8,128]{0,2,1} add(%multiply.7591, %multiply.7592)
  %divide.1137 = f32[256,8,128]{0,2,1} divide(%add.5188, %broadcast.13983)
  %sqrt.25 = f32[256,8,128]{0,2,1} sqrt(%divide.1137)
  %add.5189 = f32[256,8,128]{0,2,1} add(%sqrt.25, %broadcast.13984)
  %multiply.7593 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5189)
  %divide.1138 = f32[256,8,128]{0,2,1} divide(%add.5187, %multiply.7593)
  %multiply.7594 = f32[256,8,128]{2,1,0} multiply(%param.99, %broadcast.13978)
  %add.5190 = f32[256,8,128]{0,2,1} add(%divide.1138, %multiply.7594)
  %multiply.7595 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5190)
  %add.5191 = f32[256,8,128]{2,1,0} add(%param.99, %multiply.7595)
  %divide.1139 = f32[32,128,256]{1,0,2} divide(%transpose.393, %broadcast.13987)
  %select.3149 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.393, %divide.1139)
  %multiply.7596 = f32[32,128,256]{1,0,2} multiply(%select.3149, %broadcast.13989)
  %param.349 = f32[32,128,256]{2,1,0} parameter(318), sharding={devices=[1,1,16]<=[16]}
  %multiply.7597 = f32[32,128,256]{2,1,0} multiply(%param.349, %broadcast.13991)
  %add.5192 = f32[32,128,256]{1,0,2} add(%multiply.7596, %multiply.7597)
  %multiply.7598 = f32[32,128,256]{1,0,2} multiply(%select.3149, %select.3149)
  %multiply.7599 = f32[32,128,256]{1,0,2} multiply(%multiply.7598, %broadcast.13993)
  %param.350 = f32[32,128,256]{2,1,0} parameter(609), sharding={devices=[1,1,16]<=[16]}
  %multiply.7601 = f32[32,128,256]{2,1,0} multiply(%param.350, %broadcast.13994)
  %add.5193 = f32[32,128,256]{1,0,2} add(%multiply.7599, %multiply.7601)
  %divide.1141 = f32[32,128,256]{1,0,2} divide(%add.5193, %broadcast.13996)
  %sqrt.26 = f32[32,128,256]{1,0,2} sqrt(%divide.1141)
  %add.5194 = f32[32,128,256]{1,0,2} add(%sqrt.26, %broadcast.13998)
  %multiply.7603 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5194)
  %divide.1143 = f32[32,128,256]{1,0,2} divide(%add.5192, %multiply.7603)
  %multiply.7604 = f32[32,128,256]{2,1,0} multiply(%param.101, %broadcast.13989)
  %add.5195 = f32[32,128,256]{1,0,2} add(%divide.1143, %multiply.7604)
  %multiply.7605 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5195)
  %add.5196 = f32[32,128,256]{2,1,0} add(%param.101, %multiply.7605)
  %divide.1144 = f32[256,32,128]{0,2,1} divide(%transpose.394, %broadcast.14001)
  %select.3150 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.394, %divide.1144)
  %multiply.7606 = f32[256,32,128]{0,2,1} multiply(%select.3150, %broadcast.14002)
  %param.351 = f32[256,32,128]{2,1,0} parameter(319), sharding={devices=[16,1,1]<=[16]}
  %multiply.7607 = f32[256,32,128]{2,1,0} multiply(%param.351, %broadcast.14003)
  %add.5198 = f32[256,32,128]{0,2,1} add(%multiply.7606, %multiply.7607)
  %multiply.7608 = f32[256,32,128]{0,2,1} multiply(%select.3150, %select.3150)
  %multiply.7609 = f32[256,32,128]{0,2,1} multiply(%multiply.7608, %broadcast.14005)
  %param.352 = f32[256,32,128]{2,1,0} parameter(610), sharding={devices=[16,1,1]<=[16]}
  %multiply.7610 = f32[256,32,128]{2,1,0} multiply(%param.352, %broadcast.14006)
  %add.5199 = f32[256,32,128]{0,2,1} add(%multiply.7609, %multiply.7610)
  %divide.1146 = f32[256,32,128]{0,2,1} divide(%add.5199, %broadcast.14007)
  %sqrt.27 = f32[256,32,128]{0,2,1} sqrt(%divide.1146)
  %add.5200 = f32[256,32,128]{0,2,1} add(%sqrt.27, %broadcast.14008)
  %multiply.7611 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5200)
  %divide.1147 = f32[256,32,128]{0,2,1} divide(%add.5198, %multiply.7611)
  %multiply.7612 = f32[256,32,128]{2,1,0} multiply(%param.98, %broadcast.14002)
  %add.5201 = f32[256,32,128]{0,2,1} add(%divide.1147, %multiply.7612)
  %multiply.7613 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5201)
  %add.5202 = f32[256,32,128]{2,1,0} add(%param.98, %multiply.7613)
  %divide.1149 = f32[256,8,128]{0,2,1} divide(%transpose.395, %broadcast.13977)
  %select.3151 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.395, %divide.1149)
  %multiply.7614 = f32[256,8,128]{0,2,1} multiply(%select.3151, %broadcast.13978)
  %param.353 = f32[256,8,128]{2,1,0} parameter(320), sharding={devices=[16,1,1]<=[16]}
  %multiply.7615 = f32[256,8,128]{2,1,0} multiply(%param.353, %broadcast.13979)
  %add.5203 = f32[256,8,128]{0,2,1} add(%multiply.7614, %multiply.7615)
  %multiply.7616 = f32[256,8,128]{0,2,1} multiply(%select.3151, %select.3151)
  %multiply.7617 = f32[256,8,128]{0,2,1} multiply(%multiply.7616, %broadcast.13981)
  %param.354 = f32[256,8,128]{2,1,0} parameter(611), sharding={devices=[16,1,1]<=[16]}
  %multiply.7618 = f32[256,8,128]{2,1,0} multiply(%param.354, %broadcast.13982)
  %add.5204 = f32[256,8,128]{0,2,1} add(%multiply.7617, %multiply.7618)
  %divide.1150 = f32[256,8,128]{0,2,1} divide(%add.5204, %broadcast.13983)
  %sqrt.28 = f32[256,8,128]{0,2,1} sqrt(%divide.1150)
  %add.5205 = f32[256,8,128]{0,2,1} add(%sqrt.28, %broadcast.13984)
  %multiply.7619 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5205)
  %divide.1151 = f32[256,8,128]{0,2,1} divide(%add.5203, %multiply.7619)
  %multiply.7620 = f32[256,8,128]{2,1,0} multiply(%param.100, %broadcast.13978)
  %add.5206 = f32[256,8,128]{0,2,1} add(%divide.1151, %multiply.7620)
  %multiply.7621 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5206)
  %add.5207 = f32[256,8,128]{2,1,0} add(%param.100, %multiply.7621)
  %divide.1152 = f32[256,14336]{0,1} divide(%convert.3164, %broadcast.13938)
  %select.3152 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3164, %divide.1152)
  %multiply.7622 = f32[256,14336]{0,1} multiply(%select.3152, %broadcast.13940)
  %param.355 = f32[256,14336]{1,0} parameter(321), sharding={devices=[16,1]<=[16]}
  %multiply.7623 = f32[256,14336]{1,0} multiply(%param.355, %broadcast.13942)
  %add.5208 = f32[256,14336]{0,1} add(%multiply.7622, %multiply.7623)
  %multiply.7624 = f32[256,14336]{0,1} multiply(%select.3152, %select.3152)
  %multiply.7625 = f32[256,14336]{0,1} multiply(%multiply.7624, %broadcast.13945)
  %param.356 = f32[256,14336]{1,0} parameter(612), sharding={devices=[16,1]<=[16]}
  %multiply.7626 = f32[256,14336]{1,0} multiply(%param.356, %broadcast.13947)
  %add.5209 = f32[256,14336]{0,1} add(%multiply.7625, %multiply.7626)
  %divide.1154 = f32[256,14336]{0,1} divide(%add.5209, %broadcast.13948)
  %sqrt.29 = f32[256,14336]{0,1} sqrt(%divide.1154)
  %add.5210 = f32[256,14336]{0,1} add(%sqrt.29, %broadcast.13949)
  %multiply.7627 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5210)
  %divide.1155 = f32[256,14336]{0,1} divide(%add.5208, %multiply.7627)
  %multiply.7628 = f32[256,14336]{1,0} multiply(%param.112, %broadcast.13940)
  %add.5211 = f32[256,14336]{0,1} add(%divide.1155, %multiply.7628)
  %multiply.7630 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5211)
  %add.5212 = f32[256,14336]{1,0} add(%param.112, %multiply.7630)
  %divide.1156 = f32[256,14336]{0,1} divide(%convert.3165, %broadcast.13938)
  %select.3153 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3165, %divide.1156)
  %multiply.7631 = f32[256,14336]{0,1} multiply(%select.3153, %broadcast.13940)
  %param.357 = f32[256,14336]{1,0} parameter(322), sharding={devices=[16,1]<=[16]}
  %multiply.7632 = f32[256,14336]{1,0} multiply(%param.357, %broadcast.13942)
  %add.5213 = f32[256,14336]{0,1} add(%multiply.7631, %multiply.7632)
  %multiply.7633 = f32[256,14336]{0,1} multiply(%select.3153, %select.3153)
  %multiply.7635 = f32[256,14336]{0,1} multiply(%multiply.7633, %broadcast.13945)
  %param.358 = f32[256,14336]{1,0} parameter(613), sharding={devices=[16,1]<=[16]}
  %multiply.7636 = f32[256,14336]{1,0} multiply(%param.358, %broadcast.13947)
  %add.5214 = f32[256,14336]{0,1} add(%multiply.7635, %multiply.7636)
  %divide.1157 = f32[256,14336]{0,1} divide(%add.5214, %broadcast.13948)
  %sqrt.30 = f32[256,14336]{0,1} sqrt(%divide.1157)
  %add.5215 = f32[256,14336]{0,1} add(%sqrt.30, %broadcast.13949)
  %multiply.7637 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5215)
  %divide.1158 = f32[256,14336]{0,1} divide(%add.5213, %multiply.7637)
  %multiply.7638 = f32[256,14336]{1,0} multiply(%param.113, %broadcast.13940)
  %add.5216 = f32[256,14336]{0,1} add(%divide.1158, %multiply.7638)
  %multiply.7639 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5216)
  %add.5217 = f32[256,14336]{1,0} add(%param.113, %multiply.7639)
  %divide.1159 = f32[14336,256]{0,1} divide(%convert.3166, %broadcast.13957)
  %select.3154 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3166, %divide.1159)
  %multiply.7641 = f32[14336,256]{0,1} multiply(%select.3154, %broadcast.13958)
  %param.359 = f32[14336,256]{1,0} parameter(323), sharding={devices=[1,16]<=[16]}
  %multiply.7642 = f32[14336,256]{1,0} multiply(%param.359, %broadcast.13959)
  %add.5218 = f32[14336,256]{0,1} add(%multiply.7641, %multiply.7642)
  %multiply.7643 = f32[14336,256]{0,1} multiply(%select.3154, %select.3154)
  %multiply.7644 = f32[14336,256]{0,1} multiply(%multiply.7643, %broadcast.13961)
  %param.360 = f32[14336,256]{1,0} parameter(614), sharding={devices=[1,16]<=[16]}
  %multiply.7645 = f32[14336,256]{1,0} multiply(%param.360, %broadcast.13962)
  %add.5219 = f32[14336,256]{0,1} add(%multiply.7644, %multiply.7645)
  %divide.1160 = f32[14336,256]{0,1} divide(%add.5219, %broadcast.13963)
  %sqrt.31 = f32[14336,256]{0,1} sqrt(%divide.1160)
  %add.5220 = f32[14336,256]{0,1} add(%sqrt.31, %broadcast.13964)
  %multiply.7646 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5220)
  %divide.1161 = f32[14336,256]{0,1} divide(%add.5218, %multiply.7646)
  %multiply.7647 = f32[14336,256]{1,0} multiply(%param.114, %broadcast.13958)
  %add.5221 = f32[14336,256]{0,1} add(%divide.1161, %multiply.7647)
  %multiply.7648 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5221)
  %add.5222 = f32[14336,256]{1,0} add(%param.114, %multiply.7648)
  %divide.1163 = f32[4096]{0} divide(%convert.3167, %broadcast.13924)
  %select.3155 = f32[4096]{0} select(%broadcast.13923, %convert.3167, %divide.1163)
  %multiply.7649 = f32[4096]{0} multiply(%select.3155, %broadcast.13925)
  %param.361 = f32[4096]{0} parameter(324), sharding={replicated}
  %multiply.7650 = f32[4096]{0} multiply(%param.361, %broadcast.13926)
  %add.5223 = f32[4096]{0} add(%multiply.7649, %multiply.7650)
  %multiply.7651 = f32[4096]{0} multiply(%select.3155, %select.3155)
  %multiply.7652 = f32[4096]{0} multiply(%multiply.7651, %broadcast.13928)
  %param.362 = f32[4096]{0} parameter(615), sharding={replicated}
  %multiply.7653 = f32[4096]{0} multiply(%param.362, %broadcast.13929)
  %add.5224 = f32[4096]{0} add(%multiply.7652, %multiply.7653)
  %divide.1164 = f32[4096]{0} divide(%add.5224, %broadcast.13931)
  %sqrt.32 = f32[4096]{0} sqrt(%divide.1164)
  %add.5225 = f32[4096]{0} add(%sqrt.32, %broadcast.13934)
  %multiply.7654 = f32[4096]{0} multiply(%broadcast.13927, %add.5225)
  %divide.1165 = f32[4096]{0} divide(%add.5223, %multiply.7654)
  %multiply.7655 = f32[4096]{0} multiply(%param.111, %broadcast.13925)
  %add.5226 = f32[4096]{0} add(%divide.1165, %multiply.7655)
  %multiply.7656 = f32[4096]{0} multiply(%broadcast.7107, %add.5226)
  %add.5227 = f32[4096]{0} add(%param.111, %multiply.7656)
  %divide.1166 = f32[4096]{0} divide(%convert.3169, %broadcast.13924)
  %select.3156 = f32[4096]{0} select(%broadcast.13923, %convert.3169, %divide.1166)
  %multiply.7657 = f32[4096]{0} multiply(%select.3156, %broadcast.13925)
  %param.363 = f32[4096]{0} parameter(325), sharding={replicated}
  %multiply.7658 = f32[4096]{0} multiply(%param.363, %broadcast.13926)
  %add.5229 = f32[4096]{0} add(%multiply.7657, %multiply.7658)
  %multiply.7659 = f32[4096]{0} multiply(%select.3156, %select.3156)
  %multiply.7661 = f32[4096]{0} multiply(%multiply.7659, %broadcast.13928)
  %param.364 = f32[4096]{0} parameter(616), sharding={replicated}
  %multiply.7662 = f32[4096]{0} multiply(%param.364, %broadcast.13929)
  %add.5230 = f32[4096]{0} add(%multiply.7661, %multiply.7662)
  %divide.1167 = f32[4096]{0} divide(%add.5230, %broadcast.13931)
  %sqrt.33 = f32[4096]{0} sqrt(%divide.1167)
  %add.5231 = f32[4096]{0} add(%sqrt.33, %broadcast.13934)
  %multiply.7663 = f32[4096]{0} multiply(%broadcast.13927, %add.5231)
  %divide.1168 = f32[4096]{0} divide(%add.5229, %multiply.7663)
  %multiply.7664 = f32[4096]{0} multiply(%param.106, %broadcast.13925)
  %add.5232 = f32[4096]{0} add(%divide.1168, %multiply.7664)
  %multiply.7665 = f32[4096]{0} multiply(%broadcast.7107, %add.5232)
  %add.5233 = f32[4096]{0} add(%param.106, %multiply.7665)
  %divide.1169 = f32[256,8,128]{0,2,1} divide(%transpose.396, %broadcast.13977)
  %select.3157 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.396, %divide.1169)
  %multiply.7666 = f32[256,8,128]{0,2,1} multiply(%select.3157, %broadcast.13978)
  %param.365 = f32[256,8,128]{2,1,0} parameter(326), sharding={devices=[16,1,1]<=[16]}
  %multiply.7667 = f32[256,8,128]{2,1,0} multiply(%param.365, %broadcast.13979)
  %add.5234 = f32[256,8,128]{0,2,1} add(%multiply.7666, %multiply.7667)
  %multiply.7668 = f32[256,8,128]{0,2,1} multiply(%select.3157, %select.3157)
  %multiply.7669 = f32[256,8,128]{0,2,1} multiply(%multiply.7668, %broadcast.13981)
  %param.366 = f32[256,8,128]{2,1,0} parameter(617), sharding={devices=[16,1,1]<=[16]}
  %multiply.7670 = f32[256,8,128]{2,1,0} multiply(%param.366, %broadcast.13982)
  %add.5235 = f32[256,8,128]{0,2,1} add(%multiply.7669, %multiply.7670)
  %divide.1170 = f32[256,8,128]{0,2,1} divide(%add.5235, %broadcast.13983)
  %sqrt.34 = f32[256,8,128]{0,2,1} sqrt(%divide.1170)
  %add.5237 = f32[256,8,128]{0,2,1} add(%sqrt.34, %broadcast.13984)
  %multiply.7671 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5237)
  %divide.1171 = f32[256,8,128]{0,2,1} divide(%add.5234, %multiply.7671)
  %multiply.7672 = f32[256,8,128]{2,1,0} multiply(%param.108, %broadcast.13978)
  %add.5238 = f32[256,8,128]{0,2,1} add(%divide.1171, %multiply.7672)
  %multiply.7673 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5238)
  %add.5239 = f32[256,8,128]{2,1,0} add(%param.108, %multiply.7673)
  %divide.1172 = f32[32,128,256]{1,0,2} divide(%transpose.397, %broadcast.13987)
  %select.3158 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.397, %divide.1172)
  %multiply.7674 = f32[32,128,256]{1,0,2} multiply(%select.3158, %broadcast.13989)
  %param.367 = f32[32,128,256]{2,1,0} parameter(327), sharding={devices=[1,1,16]<=[16]}
  %multiply.7675 = f32[32,128,256]{2,1,0} multiply(%param.367, %broadcast.13991)
  %add.5240 = f32[32,128,256]{1,0,2} add(%multiply.7674, %multiply.7675)
  %multiply.7677 = f32[32,128,256]{1,0,2} multiply(%select.3158, %select.3158)
  %multiply.7679 = f32[32,128,256]{1,0,2} multiply(%multiply.7677, %broadcast.13993)
  %param.368 = f32[32,128,256]{2,1,0} parameter(618), sharding={devices=[1,1,16]<=[16]}
  %multiply.7680 = f32[32,128,256]{2,1,0} multiply(%param.368, %broadcast.13994)
  %add.5241 = f32[32,128,256]{1,0,2} add(%multiply.7679, %multiply.7680)
  %divide.1173 = f32[32,128,256]{1,0,2} divide(%add.5241, %broadcast.13996)
  %sqrt.35 = f32[32,128,256]{1,0,2} sqrt(%divide.1173)
  %add.5242 = f32[32,128,256]{1,0,2} add(%sqrt.35, %broadcast.13998)
  %multiply.7681 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5242)
  %divide.1174 = f32[32,128,256]{1,0,2} divide(%add.5240, %multiply.7681)
  %multiply.7682 = f32[32,128,256]{2,1,0} multiply(%param.110, %broadcast.13989)
  %add.5243 = f32[32,128,256]{1,0,2} add(%divide.1174, %multiply.7682)
  %multiply.7683 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5243)
  %add.5244 = f32[32,128,256]{2,1,0} add(%param.110, %multiply.7683)
  %divide.1175 = f32[256,32,128]{0,2,1} divide(%transpose.398, %broadcast.14001)
  %select.3159 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.398, %divide.1175)
  %multiply.7684 = f32[256,32,128]{0,2,1} multiply(%select.3159, %broadcast.14002)
  %param.369 = f32[256,32,128]{2,1,0} parameter(328), sharding={devices=[16,1,1]<=[16]}
  %multiply.7685 = f32[256,32,128]{2,1,0} multiply(%param.369, %broadcast.14003)
  %add.5245 = f32[256,32,128]{0,2,1} add(%multiply.7684, %multiply.7685)
  %multiply.7686 = f32[256,32,128]{0,2,1} multiply(%select.3159, %select.3159)
  %multiply.7687 = f32[256,32,128]{0,2,1} multiply(%multiply.7686, %broadcast.14005)
  %param.370 = f32[256,32,128]{2,1,0} parameter(619), sharding={devices=[16,1,1]<=[16]}
  %multiply.7688 = f32[256,32,128]{2,1,0} multiply(%param.370, %broadcast.14006)
  %add.5246 = f32[256,32,128]{0,2,1} add(%multiply.7687, %multiply.7688)
  %divide.1176 = f32[256,32,128]{0,2,1} divide(%add.5246, %broadcast.14007)
  %sqrt.36 = f32[256,32,128]{0,2,1} sqrt(%divide.1176)
  %add.5247 = f32[256,32,128]{0,2,1} add(%sqrt.36, %broadcast.14008)
  %multiply.7689 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5247)
  %divide.1177 = f32[256,32,128]{0,2,1} divide(%add.5245, %multiply.7689)
  %multiply.7690 = f32[256,32,128]{2,1,0} multiply(%param.107, %broadcast.14002)
  %add.5248 = f32[256,32,128]{0,2,1} add(%divide.1177, %multiply.7690)
  %multiply.7691 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5248)
  %add.5249 = f32[256,32,128]{2,1,0} add(%param.107, %multiply.7691)
  %divide.1178 = f32[256,8,128]{0,2,1} divide(%transpose.399, %broadcast.13977)
  %select.3160 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.399, %divide.1178)
  %multiply.7692 = f32[256,8,128]{0,2,1} multiply(%select.3160, %broadcast.13978)
  %param.371 = f32[256,8,128]{2,1,0} parameter(329), sharding={devices=[16,1,1]<=[16]}
  %multiply.7693 = f32[256,8,128]{2,1,0} multiply(%param.371, %broadcast.13979)
  %add.5250 = f32[256,8,128]{0,2,1} add(%multiply.7692, %multiply.7693)
  %multiply.7694 = f32[256,8,128]{0,2,1} multiply(%select.3160, %select.3160)
  %multiply.7695 = f32[256,8,128]{0,2,1} multiply(%multiply.7694, %broadcast.13981)
  %param.372 = f32[256,8,128]{2,1,0} parameter(620), sharding={devices=[16,1,1]<=[16]}
  %multiply.7696 = f32[256,8,128]{2,1,0} multiply(%param.372, %broadcast.13982)
  %add.5251 = f32[256,8,128]{0,2,1} add(%multiply.7695, %multiply.7696)
  %divide.1179 = f32[256,8,128]{0,2,1} divide(%add.5251, %broadcast.13983)
  %sqrt.37 = f32[256,8,128]{0,2,1} sqrt(%divide.1179)
  %add.5252 = f32[256,8,128]{0,2,1} add(%sqrt.37, %broadcast.13984)
  %multiply.7697 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5252)
  %divide.1180 = f32[256,8,128]{0,2,1} divide(%add.5250, %multiply.7697)
  %multiply.7698 = f32[256,8,128]{2,1,0} multiply(%param.109, %broadcast.13978)
  %add.5253 = f32[256,8,128]{0,2,1} add(%divide.1180, %multiply.7698)
  %multiply.7699 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5253)
  %add.5255 = f32[256,8,128]{2,1,0} add(%param.109, %multiply.7699)
  %divide.1181 = f32[256,14336]{0,1} divide(%convert.3175, %broadcast.13938)
  %select.3161 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3175, %divide.1181)
  %multiply.7700 = f32[256,14336]{0,1} multiply(%select.3161, %broadcast.13940)
  %param.373 = f32[256,14336]{1,0} parameter(330), sharding={devices=[16,1]<=[16]}
  %multiply.7701 = f32[256,14336]{1,0} multiply(%param.373, %broadcast.13942)
  %add.5256 = f32[256,14336]{0,1} add(%multiply.7700, %multiply.7701)
  %multiply.7702 = f32[256,14336]{0,1} multiply(%select.3161, %select.3161)
  %multiply.7703 = f32[256,14336]{0,1} multiply(%multiply.7702, %broadcast.13945)
  %param.374 = f32[256,14336]{1,0} parameter(621), sharding={devices=[16,1]<=[16]}
  %multiply.7704 = f32[256,14336]{1,0} multiply(%param.374, %broadcast.13947)
  %add.5257 = f32[256,14336]{0,1} add(%multiply.7703, %multiply.7704)
  %divide.1182 = f32[256,14336]{0,1} divide(%add.5257, %broadcast.13948)
  %sqrt.38 = f32[256,14336]{0,1} sqrt(%divide.1182)
  %add.5258 = f32[256,14336]{0,1} add(%sqrt.38, %broadcast.13949)
  %multiply.7706 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5258)
  %divide.1183 = f32[256,14336]{0,1} divide(%add.5256, %multiply.7706)
  %multiply.7707 = f32[256,14336]{1,0} multiply(%param.121, %broadcast.13940)
  %add.5260 = f32[256,14336]{0,1} add(%divide.1183, %multiply.7707)
  %multiply.7708 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5260)
  %add.5261 = f32[256,14336]{1,0} add(%param.121, %multiply.7708)
  %divide.1184 = f32[256,14336]{0,1} divide(%convert.3176, %broadcast.13938)
  %select.3162 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3176, %divide.1184)
  %multiply.7709 = f32[256,14336]{0,1} multiply(%select.3162, %broadcast.13940)
  %param.375 = f32[256,14336]{1,0} parameter(331), sharding={devices=[16,1]<=[16]}
  %multiply.7711 = f32[256,14336]{1,0} multiply(%param.375, %broadcast.13942)
  %add.5262 = f32[256,14336]{0,1} add(%multiply.7709, %multiply.7711)
  %multiply.7712 = f32[256,14336]{0,1} multiply(%select.3162, %select.3162)
  %multiply.7713 = f32[256,14336]{0,1} multiply(%multiply.7712, %broadcast.13945)
  %param.376 = f32[256,14336]{1,0} parameter(622), sharding={devices=[16,1]<=[16]}
  %multiply.7714 = f32[256,14336]{1,0} multiply(%param.376, %broadcast.13947)
  %add.5263 = f32[256,14336]{0,1} add(%multiply.7713, %multiply.7714)
  %divide.1185 = f32[256,14336]{0,1} divide(%add.5263, %broadcast.13948)
  %sqrt.39 = f32[256,14336]{0,1} sqrt(%divide.1185)
  %add.5265 = f32[256,14336]{0,1} add(%sqrt.39, %broadcast.13949)
  %multiply.7715 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5265)
  %divide.1186 = f32[256,14336]{0,1} divide(%add.5262, %multiply.7715)
  %multiply.7717 = f32[256,14336]{1,0} multiply(%param.122, %broadcast.13940)
  %add.5266 = f32[256,14336]{0,1} add(%divide.1186, %multiply.7717)
  %multiply.7718 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5266)
  %add.5267 = f32[256,14336]{1,0} add(%param.122, %multiply.7718)
  %divide.1187 = f32[14336,256]{0,1} divide(%convert.3177, %broadcast.13957)
  %select.3163 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3177, %divide.1187)
  %multiply.7719 = f32[14336,256]{0,1} multiply(%select.3163, %broadcast.13958)
  %param.377 = f32[14336,256]{1,0} parameter(332), sharding={devices=[1,16]<=[16]}
  %multiply.7720 = f32[14336,256]{1,0} multiply(%param.377, %broadcast.13959)
  %add.5268 = f32[14336,256]{0,1} add(%multiply.7719, %multiply.7720)
  %multiply.7721 = f32[14336,256]{0,1} multiply(%select.3163, %select.3163)
  %multiply.7722 = f32[14336,256]{0,1} multiply(%multiply.7721, %broadcast.13961)
  %param.378 = f32[14336,256]{1,0} parameter(623), sharding={devices=[1,16]<=[16]}
  %multiply.7723 = f32[14336,256]{1,0} multiply(%param.378, %broadcast.13962)
  %add.5269 = f32[14336,256]{0,1} add(%multiply.7722, %multiply.7723)
  %divide.1188 = f32[14336,256]{0,1} divide(%add.5269, %broadcast.13963)
  %sqrt.40 = f32[14336,256]{0,1} sqrt(%divide.1188)
  %add.5270 = f32[14336,256]{0,1} add(%sqrt.40, %broadcast.13964)
  %multiply.7724 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5270)
  %divide.1189 = f32[14336,256]{0,1} divide(%add.5268, %multiply.7724)
  %multiply.7725 = f32[14336,256]{1,0} multiply(%param.123, %broadcast.13958)
  %add.5271 = f32[14336,256]{0,1} add(%divide.1189, %multiply.7725)
  %multiply.7726 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5271)
  %add.5272 = f32[14336,256]{1,0} add(%param.123, %multiply.7726)
  %divide.1190 = f32[4096]{0} divide(%convert.3178, %broadcast.13924)
  %select.3164 = f32[4096]{0} select(%broadcast.13923, %convert.3178, %divide.1190)
  %multiply.7727 = f32[4096]{0} multiply(%select.3164, %broadcast.13925)
  %param.379 = f32[4096]{0} parameter(333), sharding={replicated}
  %multiply.7728 = f32[4096]{0} multiply(%param.379, %broadcast.13926)
  %add.5273 = f32[4096]{0} add(%multiply.7727, %multiply.7728)
  %multiply.7729 = f32[4096]{0} multiply(%select.3164, %select.3164)
  %multiply.7730 = f32[4096]{0} multiply(%multiply.7729, %broadcast.13928)
  %param.380 = f32[4096]{0} parameter(624), sharding={replicated}
  %multiply.7731 = f32[4096]{0} multiply(%param.380, %broadcast.13929)
  %add.5274 = f32[4096]{0} add(%multiply.7730, %multiply.7731)
  %divide.1191 = f32[4096]{0} divide(%add.5274, %broadcast.13931)
  %sqrt.41 = f32[4096]{0} sqrt(%divide.1191)
  %add.5275 = f32[4096]{0} add(%sqrt.41, %broadcast.13934)
  %multiply.7732 = f32[4096]{0} multiply(%broadcast.13927, %add.5275)
  %divide.1192 = f32[4096]{0} divide(%add.5273, %multiply.7732)
  %multiply.7733 = f32[4096]{0} multiply(%param.120, %broadcast.13925)
  %add.5276 = f32[4096]{0} add(%divide.1192, %multiply.7733)
  %multiply.7734 = f32[4096]{0} multiply(%broadcast.7107, %add.5276)
  %add.5277 = f32[4096]{0} add(%param.120, %multiply.7734)
  %divide.1193 = f32[4096]{0} divide(%convert.3180, %broadcast.13924)
  %select.3165 = f32[4096]{0} select(%broadcast.13923, %convert.3180, %divide.1193)
  %multiply.7735 = f32[4096]{0} multiply(%select.3165, %broadcast.13925)
  %param.381 = f32[4096]{0} parameter(334), sharding={replicated}
  %multiply.7736 = f32[4096]{0} multiply(%param.381, %broadcast.13926)
  %add.5278 = f32[4096]{0} add(%multiply.7735, %multiply.7736)
  %multiply.7737 = f32[4096]{0} multiply(%select.3165, %select.3165)
  %multiply.7738 = f32[4096]{0} multiply(%multiply.7737, %broadcast.13928)
  %param.382 = f32[4096]{0} parameter(625), sharding={replicated}
  %multiply.7739 = f32[4096]{0} multiply(%param.382, %broadcast.13929)
  %add.5279 = f32[4096]{0} add(%multiply.7738, %multiply.7739)
  %divide.1194 = f32[4096]{0} divide(%add.5279, %broadcast.13931)
  %sqrt.42 = f32[4096]{0} sqrt(%divide.1194)
  %add.5280 = f32[4096]{0} add(%sqrt.42, %broadcast.13934)
  %multiply.7740 = f32[4096]{0} multiply(%broadcast.13927, %add.5280)
  %divide.1195 = f32[4096]{0} divide(%add.5278, %multiply.7740)
  %multiply.7741 = f32[4096]{0} multiply(%param.115, %broadcast.13925)
  %add.5281 = f32[4096]{0} add(%divide.1195, %multiply.7741)
  %multiply.7742 = f32[4096]{0} multiply(%broadcast.7107, %add.5281)
  %add.5282 = f32[4096]{0} add(%param.115, %multiply.7742)
  %divide.1196 = f32[256,8,128]{0,2,1} divide(%transpose.400, %broadcast.13977)
  %select.3166 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.400, %divide.1196)
  %multiply.7743 = f32[256,8,128]{0,2,1} multiply(%select.3166, %broadcast.13978)
  %param.383 = f32[256,8,128]{2,1,0} parameter(335), sharding={devices=[16,1,1]<=[16]}
  %multiply.7744 = f32[256,8,128]{2,1,0} multiply(%param.383, %broadcast.13979)
  %add.5283 = f32[256,8,128]{0,2,1} add(%multiply.7743, %multiply.7744)
  %multiply.7745 = f32[256,8,128]{0,2,1} multiply(%select.3166, %select.3166)
  %multiply.7746 = f32[256,8,128]{0,2,1} multiply(%multiply.7745, %broadcast.13981)
  %param.384 = f32[256,8,128]{2,1,0} parameter(626), sharding={devices=[16,1,1]<=[16]}
  %multiply.7747 = f32[256,8,128]{2,1,0} multiply(%param.384, %broadcast.13982)
  %add.5284 = f32[256,8,128]{0,2,1} add(%multiply.7746, %multiply.7747)
  %divide.1197 = f32[256,8,128]{0,2,1} divide(%add.5284, %broadcast.13983)
  %sqrt.43 = f32[256,8,128]{0,2,1} sqrt(%divide.1197)
  %add.5285 = f32[256,8,128]{0,2,1} add(%sqrt.43, %broadcast.13984)
  %multiply.7748 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5285)
  %divide.1198 = f32[256,8,128]{0,2,1} divide(%add.5283, %multiply.7748)
  %multiply.7749 = f32[256,8,128]{2,1,0} multiply(%param.117, %broadcast.13978)
  %add.5286 = f32[256,8,128]{0,2,1} add(%divide.1198, %multiply.7749)
  %multiply.7750 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5286)
  %add.5287 = f32[256,8,128]{2,1,0} add(%param.117, %multiply.7750)
  %divide.1199 = f32[32,128,256]{1,0,2} divide(%transpose.401, %broadcast.13987)
  %select.3167 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.401, %divide.1199)
  %multiply.7751 = f32[32,128,256]{1,0,2} multiply(%select.3167, %broadcast.13989)
  %param.385 = f32[32,128,256]{2,1,0} parameter(336), sharding={devices=[1,1,16]<=[16]}
  %multiply.7752 = f32[32,128,256]{2,1,0} multiply(%param.385, %broadcast.13991)
  %add.5288 = f32[32,128,256]{1,0,2} add(%multiply.7751, %multiply.7752)
  %multiply.7753 = f32[32,128,256]{1,0,2} multiply(%select.3167, %select.3167)
  %multiply.7754 = f32[32,128,256]{1,0,2} multiply(%multiply.7753, %broadcast.13993)
  %param.386 = f32[32,128,256]{2,1,0} parameter(627), sharding={devices=[1,1,16]<=[16]}
  %multiply.7755 = f32[32,128,256]{2,1,0} multiply(%param.386, %broadcast.13994)
  %add.5289 = f32[32,128,256]{1,0,2} add(%multiply.7754, %multiply.7755)
  %divide.1200 = f32[32,128,256]{1,0,2} divide(%add.5289, %broadcast.13996)
  %sqrt.44 = f32[32,128,256]{1,0,2} sqrt(%divide.1200)
  %add.5291 = f32[32,128,256]{1,0,2} add(%sqrt.44, %broadcast.13998)
  %multiply.7756 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5291)
  %divide.1201 = f32[32,128,256]{1,0,2} divide(%add.5288, %multiply.7756)
  %multiply.7757 = f32[32,128,256]{2,1,0} multiply(%param.119, %broadcast.13989)
  %add.5292 = f32[32,128,256]{1,0,2} add(%divide.1201, %multiply.7757)
  %multiply.7758 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5292)
  %add.5293 = f32[32,128,256]{2,1,0} add(%param.119, %multiply.7758)
  %divide.1202 = f32[256,32,128]{0,2,1} divide(%transpose.402, %broadcast.14001)
  %select.3168 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.402, %divide.1202)
  %multiply.7759 = f32[256,32,128]{0,2,1} multiply(%select.3168, %broadcast.14002)
  %param.387 = f32[256,32,128]{2,1,0} parameter(337), sharding={devices=[16,1,1]<=[16]}
  %multiply.7760 = f32[256,32,128]{2,1,0} multiply(%param.387, %broadcast.14003)
  %add.5294 = f32[256,32,128]{0,2,1} add(%multiply.7759, %multiply.7760)
  %multiply.7761 = f32[256,32,128]{0,2,1} multiply(%select.3168, %select.3168)
  %multiply.7762 = f32[256,32,128]{0,2,1} multiply(%multiply.7761, %broadcast.14005)
  %param.388 = f32[256,32,128]{2,1,0} parameter(628), sharding={devices=[16,1,1]<=[16]}
  %multiply.7763 = f32[256,32,128]{2,1,0} multiply(%param.388, %broadcast.14006)
  %add.5295 = f32[256,32,128]{0,2,1} add(%multiply.7762, %multiply.7763)
  %divide.1203 = f32[256,32,128]{0,2,1} divide(%add.5295, %broadcast.14007)
  %sqrt.45 = f32[256,32,128]{0,2,1} sqrt(%divide.1203)
  %add.5296 = f32[256,32,128]{0,2,1} add(%sqrt.45, %broadcast.14008)
  %multiply.7764 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5296)
  %divide.1204 = f32[256,32,128]{0,2,1} divide(%add.5294, %multiply.7764)
  %multiply.7765 = f32[256,32,128]{2,1,0} multiply(%param.116, %broadcast.14002)
  %add.5298 = f32[256,32,128]{0,2,1} add(%divide.1204, %multiply.7765)
  %multiply.7766 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5298)
  %add.5299 = f32[256,32,128]{2,1,0} add(%param.116, %multiply.7766)
  %divide.1205 = f32[256,8,128]{0,2,1} divide(%transpose.403, %broadcast.13977)
  %select.3169 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.403, %divide.1205)
  %multiply.7767 = f32[256,8,128]{0,2,1} multiply(%select.3169, %broadcast.13978)
  %param.389 = f32[256,8,128]{2,1,0} parameter(338), sharding={devices=[16,1,1]<=[16]}
  %multiply.7768 = f32[256,8,128]{2,1,0} multiply(%param.389, %broadcast.13979)
  %add.5300 = f32[256,8,128]{0,2,1} add(%multiply.7767, %multiply.7768)
  %multiply.7769 = f32[256,8,128]{0,2,1} multiply(%select.3169, %select.3169)
  %multiply.7770 = f32[256,8,128]{0,2,1} multiply(%multiply.7769, %broadcast.13981)
  %param.390 = f32[256,8,128]{2,1,0} parameter(629), sharding={devices=[16,1,1]<=[16]}
  %multiply.7771 = f32[256,8,128]{2,1,0} multiply(%param.390, %broadcast.13982)
  %add.5301 = f32[256,8,128]{0,2,1} add(%multiply.7770, %multiply.7771)
  %divide.1207 = f32[256,8,128]{0,2,1} divide(%add.5301, %broadcast.13983)
  %sqrt.46 = f32[256,8,128]{0,2,1} sqrt(%divide.1207)
  %add.5303 = f32[256,8,128]{0,2,1} add(%sqrt.46, %broadcast.13984)
  %multiply.7772 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5303)
  %divide.1208 = f32[256,8,128]{0,2,1} divide(%add.5300, %multiply.7772)
  %multiply.7773 = f32[256,8,128]{2,1,0} multiply(%param.118, %broadcast.13978)
  %add.5304 = f32[256,8,128]{0,2,1} add(%divide.1208, %multiply.7773)
  %multiply.7774 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5304)
  %add.5305 = f32[256,8,128]{2,1,0} add(%param.118, %multiply.7774)
  %divide.1209 = f32[256,14336]{0,1} divide(%convert.3187, %broadcast.13938)
  %select.3170 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3187, %divide.1209)
  %multiply.7775 = f32[256,14336]{0,1} multiply(%select.3170, %broadcast.13940)
  %param.391 = f32[256,14336]{1,0} parameter(339), sharding={devices=[16,1]<=[16]}
  %multiply.7777 = f32[256,14336]{1,0} multiply(%param.391, %broadcast.13942)
  %add.5306 = f32[256,14336]{0,1} add(%multiply.7775, %multiply.7777)
  %multiply.7778 = f32[256,14336]{0,1} multiply(%select.3170, %select.3170)
  %multiply.7779 = f32[256,14336]{0,1} multiply(%multiply.7778, %broadcast.13945)
  %param.392 = f32[256,14336]{1,0} parameter(630), sharding={devices=[16,1]<=[16]}
  %multiply.7780 = f32[256,14336]{1,0} multiply(%param.392, %broadcast.13947)
  %add.5307 = f32[256,14336]{0,1} add(%multiply.7779, %multiply.7780)
  %divide.1212 = f32[256,14336]{0,1} divide(%add.5307, %broadcast.13948)
  %sqrt.47 = f32[256,14336]{0,1} sqrt(%divide.1212)
  %add.5308 = f32[256,14336]{0,1} add(%sqrt.47, %broadcast.13949)
  %multiply.7781 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5308)
  %divide.1213 = f32[256,14336]{0,1} divide(%add.5306, %multiply.7781)
  %multiply.7782 = f32[256,14336]{1,0} multiply(%param.130, %broadcast.13940)
  %add.5309 = f32[256,14336]{0,1} add(%divide.1213, %multiply.7782)
  %multiply.7783 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5309)
  %add.5310 = f32[256,14336]{1,0} add(%param.130, %multiply.7783)
  %divide.1214 = f32[256,14336]{0,1} divide(%convert.3188, %broadcast.13938)
  %select.3171 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3188, %divide.1214)
  %multiply.7784 = f32[256,14336]{0,1} multiply(%select.3171, %broadcast.13940)
  %param.393 = f32[256,14336]{1,0} parameter(340), sharding={devices=[16,1]<=[16]}
  %multiply.7785 = f32[256,14336]{1,0} multiply(%param.393, %broadcast.13942)
  %add.5311 = f32[256,14336]{0,1} add(%multiply.7784, %multiply.7785)
  %multiply.7786 = f32[256,14336]{0,1} multiply(%select.3171, %select.3171)
  %multiply.7787 = f32[256,14336]{0,1} multiply(%multiply.7786, %broadcast.13945)
  %param.394 = f32[256,14336]{1,0} parameter(631), sharding={devices=[16,1]<=[16]}
  %multiply.7788 = f32[256,14336]{1,0} multiply(%param.394, %broadcast.13947)
  %add.5312 = f32[256,14336]{0,1} add(%multiply.7787, %multiply.7788)
  %divide.1215 = f32[256,14336]{0,1} divide(%add.5312, %broadcast.13948)
  %sqrt.48 = f32[256,14336]{0,1} sqrt(%divide.1215)
  %add.5313 = f32[256,14336]{0,1} add(%sqrt.48, %broadcast.13949)
  %multiply.7790 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5313)
  %divide.1217 = f32[256,14336]{0,1} divide(%add.5311, %multiply.7790)
  %multiply.7791 = f32[256,14336]{1,0} multiply(%param.131, %broadcast.13940)
  %add.5314 = f32[256,14336]{0,1} add(%divide.1217, %multiply.7791)
  %multiply.7792 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5314)
  %add.5315 = f32[256,14336]{1,0} add(%param.131, %multiply.7792)
  %divide.1219 = f32[14336,256]{0,1} divide(%convert.3190, %broadcast.13957)
  %select.3172 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3190, %divide.1219)
  %multiply.7793 = f32[14336,256]{0,1} multiply(%select.3172, %broadcast.13958)
  %param.395 = f32[14336,256]{1,0} parameter(341), sharding={devices=[1,16]<=[16]}
  %multiply.7794 = f32[14336,256]{1,0} multiply(%param.395, %broadcast.13959)
  %add.5316 = f32[14336,256]{0,1} add(%multiply.7793, %multiply.7794)
  %multiply.7795 = f32[14336,256]{0,1} multiply(%select.3172, %select.3172)
  %multiply.7797 = f32[14336,256]{0,1} multiply(%multiply.7795, %broadcast.13961)
  %param.396 = f32[14336,256]{1,0} parameter(632), sharding={devices=[1,16]<=[16]}
  %multiply.7798 = f32[14336,256]{1,0} multiply(%param.396, %broadcast.13962)
  %add.5317 = f32[14336,256]{0,1} add(%multiply.7797, %multiply.7798)
  %divide.1220 = f32[14336,256]{0,1} divide(%add.5317, %broadcast.13963)
  %sqrt.49 = f32[14336,256]{0,1} sqrt(%divide.1220)
  %add.5318 = f32[14336,256]{0,1} add(%sqrt.49, %broadcast.13964)
  %multiply.7799 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5318)
  %divide.1222 = f32[14336,256]{0,1} divide(%add.5316, %multiply.7799)
  %multiply.7800 = f32[14336,256]{1,0} multiply(%param.132, %broadcast.13958)
  %add.5319 = f32[14336,256]{0,1} add(%divide.1222, %multiply.7800)
  %multiply.7801 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5319)
  %add.5320 = f32[14336,256]{1,0} add(%param.132, %multiply.7801)
  %divide.1223 = f32[4096]{0} divide(%convert.3192, %broadcast.13924)
  %select.3173 = f32[4096]{0} select(%broadcast.13923, %convert.3192, %divide.1223)
  %multiply.7802 = f32[4096]{0} multiply(%select.3173, %broadcast.13925)
  %param.397 = f32[4096]{0} parameter(342), sharding={replicated}
  %multiply.7803 = f32[4096]{0} multiply(%param.397, %broadcast.13926)
  %add.5321 = f32[4096]{0} add(%multiply.7802, %multiply.7803)
  %multiply.7804 = f32[4096]{0} multiply(%select.3173, %select.3173)
  %multiply.7806 = f32[4096]{0} multiply(%multiply.7804, %broadcast.13928)
  %param.398 = f32[4096]{0} parameter(633), sharding={replicated}
  %multiply.7807 = f32[4096]{0} multiply(%param.398, %broadcast.13929)
  %add.5322 = f32[4096]{0} add(%multiply.7806, %multiply.7807)
  %divide.1225 = f32[4096]{0} divide(%add.5322, %broadcast.13931)
  %sqrt.50 = f32[4096]{0} sqrt(%divide.1225)
  %add.5323 = f32[4096]{0} add(%sqrt.50, %broadcast.13934)
  %multiply.7808 = f32[4096]{0} multiply(%broadcast.13927, %add.5323)
  %divide.1226 = f32[4096]{0} divide(%add.5321, %multiply.7808)
  %multiply.7809 = f32[4096]{0} multiply(%param.129, %broadcast.13925)
  %add.5324 = f32[4096]{0} add(%divide.1226, %multiply.7809)
  %multiply.7810 = f32[4096]{0} multiply(%broadcast.7107, %add.5324)
  %add.5325 = f32[4096]{0} add(%param.129, %multiply.7810)
  %divide.1227 = f32[4096]{0} divide(%convert.3194, %broadcast.13924)
  %select.3174 = f32[4096]{0} select(%broadcast.13923, %convert.3194, %divide.1227)
  %multiply.7811 = f32[4096]{0} multiply(%select.3174, %broadcast.13925)
  %param.399 = f32[4096]{0} parameter(343), sharding={replicated}
  %multiply.7812 = f32[4096]{0} multiply(%param.399, %broadcast.13926)
  %add.5326 = f32[4096]{0} add(%multiply.7811, %multiply.7812)
  %multiply.7813 = f32[4096]{0} multiply(%select.3174, %select.3174)
  %multiply.7815 = f32[4096]{0} multiply(%multiply.7813, %broadcast.13928)
  %param.400 = f32[4096]{0} parameter(634), sharding={replicated}
  %multiply.7816 = f32[4096]{0} multiply(%param.400, %broadcast.13929)
  %add.5327 = f32[4096]{0} add(%multiply.7815, %multiply.7816)
  %divide.1228 = f32[4096]{0} divide(%add.5327, %broadcast.13931)
  %sqrt.51 = f32[4096]{0} sqrt(%divide.1228)
  %add.5328 = f32[4096]{0} add(%sqrt.51, %broadcast.13934)
  %multiply.7817 = f32[4096]{0} multiply(%broadcast.13927, %add.5328)
  %divide.1230 = f32[4096]{0} divide(%add.5326, %multiply.7817)
  %multiply.7818 = f32[4096]{0} multiply(%param.124, %broadcast.13925)
  %add.5329 = f32[4096]{0} add(%divide.1230, %multiply.7818)
  %multiply.7819 = f32[4096]{0} multiply(%broadcast.7107, %add.5329)
  %add.5330 = f32[4096]{0} add(%param.124, %multiply.7819)
  %divide.1231 = f32[256,8,128]{0,2,1} divide(%transpose.404, %broadcast.13977)
  %select.3175 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.404, %divide.1231)
  %multiply.7820 = f32[256,8,128]{0,2,1} multiply(%select.3175, %broadcast.13978)
  %param.401 = f32[256,8,128]{2,1,0} parameter(344), sharding={devices=[16,1,1]<=[16]}
  %multiply.7821 = f32[256,8,128]{2,1,0} multiply(%param.401, %broadcast.13979)
  %add.5331 = f32[256,8,128]{0,2,1} add(%multiply.7820, %multiply.7821)
  %multiply.7822 = f32[256,8,128]{0,2,1} multiply(%select.3175, %select.3175)
  %multiply.7823 = f32[256,8,128]{0,2,1} multiply(%multiply.7822, %broadcast.13981)
  %param.402 = f32[256,8,128]{2,1,0} parameter(635), sharding={devices=[16,1,1]<=[16]}
  %multiply.7824 = f32[256,8,128]{2,1,0} multiply(%param.402, %broadcast.13982)
  %add.5332 = f32[256,8,128]{0,2,1} add(%multiply.7823, %multiply.7824)
  %divide.1232 = f32[256,8,128]{0,2,1} divide(%add.5332, %broadcast.13983)
  %sqrt.52 = f32[256,8,128]{0,2,1} sqrt(%divide.1232)
  %add.5333 = f32[256,8,128]{0,2,1} add(%sqrt.52, %broadcast.13984)
  %multiply.7825 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5333)
  %divide.1233 = f32[256,8,128]{0,2,1} divide(%add.5331, %multiply.7825)
  %multiply.7826 = f32[256,8,128]{2,1,0} multiply(%param.126, %broadcast.13978)
  %add.5334 = f32[256,8,128]{0,2,1} add(%divide.1233, %multiply.7826)
  %multiply.7828 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5334)
  %add.5335 = f32[256,8,128]{2,1,0} add(%param.126, %multiply.7828)
  %divide.1234 = f32[32,128,256]{1,0,2} divide(%transpose.405, %broadcast.13987)
  %select.3176 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.405, %divide.1234)
  %multiply.7829 = f32[32,128,256]{1,0,2} multiply(%select.3176, %broadcast.13989)
  %param.403 = f32[32,128,256]{2,1,0} parameter(345), sharding={devices=[1,1,16]<=[16]}
  %multiply.7830 = f32[32,128,256]{2,1,0} multiply(%param.403, %broadcast.13991)
  %add.5336 = f32[32,128,256]{1,0,2} add(%multiply.7829, %multiply.7830)
  %multiply.7831 = f32[32,128,256]{1,0,2} multiply(%select.3176, %select.3176)
  %multiply.7832 = f32[32,128,256]{1,0,2} multiply(%multiply.7831, %broadcast.13993)
  %param.404 = f32[32,128,256]{2,1,0} parameter(636), sharding={devices=[1,1,16]<=[16]}
  %multiply.7833 = f32[32,128,256]{2,1,0} multiply(%param.404, %broadcast.13994)
  %add.5337 = f32[32,128,256]{1,0,2} add(%multiply.7832, %multiply.7833)
  %divide.1235 = f32[32,128,256]{1,0,2} divide(%add.5337, %broadcast.13996)
  %sqrt.53 = f32[32,128,256]{1,0,2} sqrt(%divide.1235)
  %add.5338 = f32[32,128,256]{1,0,2} add(%sqrt.53, %broadcast.13998)
  %multiply.7835 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5338)
  %divide.1236 = f32[32,128,256]{1,0,2} divide(%add.5336, %multiply.7835)
  %multiply.7836 = f32[32,128,256]{2,1,0} multiply(%param.128, %broadcast.13989)
  %add.5339 = f32[32,128,256]{1,0,2} add(%divide.1236, %multiply.7836)
  %multiply.7837 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5339)
  %add.5340 = f32[32,128,256]{2,1,0} add(%param.128, %multiply.7837)
  %divide.1237 = f32[256,32,128]{0,2,1} divide(%transpose.406, %broadcast.14001)
  %select.3178 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.406, %divide.1237)
  %multiply.7838 = f32[256,32,128]{0,2,1} multiply(%select.3178, %broadcast.14002)
  %param.405 = f32[256,32,128]{2,1,0} parameter(346), sharding={devices=[16,1,1]<=[16]}
  %multiply.7839 = f32[256,32,128]{2,1,0} multiply(%param.405, %broadcast.14003)
  %add.5341 = f32[256,32,128]{0,2,1} add(%multiply.7838, %multiply.7839)
  %multiply.7840 = f32[256,32,128]{0,2,1} multiply(%select.3178, %select.3178)
  %multiply.7841 = f32[256,32,128]{0,2,1} multiply(%multiply.7840, %broadcast.14005)
  %param.406 = f32[256,32,128]{2,1,0} parameter(637), sharding={devices=[16,1,1]<=[16]}
  %multiply.7842 = f32[256,32,128]{2,1,0} multiply(%param.406, %broadcast.14006)
  %add.5342 = f32[256,32,128]{0,2,1} add(%multiply.7841, %multiply.7842)
  %divide.1239 = f32[256,32,128]{0,2,1} divide(%add.5342, %broadcast.14007)
  %sqrt.54 = f32[256,32,128]{0,2,1} sqrt(%divide.1239)
  %add.5343 = f32[256,32,128]{0,2,1} add(%sqrt.54, %broadcast.14008)
  %multiply.7843 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5343)
  %divide.1240 = f32[256,32,128]{0,2,1} divide(%add.5341, %multiply.7843)
  %multiply.7844 = f32[256,32,128]{2,1,0} multiply(%param.125, %broadcast.14002)
  %add.5344 = f32[256,32,128]{0,2,1} add(%divide.1240, %multiply.7844)
  %multiply.7845 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5344)
  %add.5345 = f32[256,32,128]{2,1,0} add(%param.125, %multiply.7845)
  %divide.1241 = f32[256,8,128]{0,2,1} divide(%transpose.407, %broadcast.13977)
  %select.3179 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.407, %divide.1241)
  %multiply.7846 = f32[256,8,128]{0,2,1} multiply(%select.3179, %broadcast.13978)
  %param.407 = f32[256,8,128]{2,1,0} parameter(347), sharding={devices=[16,1,1]<=[16]}
  %multiply.7847 = f32[256,8,128]{2,1,0} multiply(%param.407, %broadcast.13979)
  %add.5346 = f32[256,8,128]{0,2,1} add(%multiply.7846, %multiply.7847)
  %multiply.7848 = f32[256,8,128]{0,2,1} multiply(%select.3179, %select.3179)
  %multiply.7849 = f32[256,8,128]{0,2,1} multiply(%multiply.7848, %broadcast.13981)
  %param.408 = f32[256,8,128]{2,1,0} parameter(638), sharding={devices=[16,1,1]<=[16]}
  %multiply.7850 = f32[256,8,128]{2,1,0} multiply(%param.408, %broadcast.13982)
  %add.5347 = f32[256,8,128]{0,2,1} add(%multiply.7849, %multiply.7850)
  %divide.1242 = f32[256,8,128]{0,2,1} divide(%add.5347, %broadcast.13983)
  %sqrt.55 = f32[256,8,128]{0,2,1} sqrt(%divide.1242)
  %add.5348 = f32[256,8,128]{0,2,1} add(%sqrt.55, %broadcast.13984)
  %multiply.7851 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5348)
  %divide.1243 = f32[256,8,128]{0,2,1} divide(%add.5346, %multiply.7851)
  %multiply.7852 = f32[256,8,128]{2,1,0} multiply(%param.127, %broadcast.13978)
  %add.5349 = f32[256,8,128]{0,2,1} add(%divide.1243, %multiply.7852)
  %multiply.7853 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5349)
  %add.5350 = f32[256,8,128]{2,1,0} add(%param.127, %multiply.7853)
  %divide.1244 = f32[256,14336]{0,1} divide(%convert.3200, %broadcast.13938)
  %select.3180 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3200, %divide.1244)
  %multiply.7854 = f32[256,14336]{0,1} multiply(%select.3180, %broadcast.13940)
  %param.409 = f32[256,14336]{1,0} parameter(348), sharding={devices=[16,1]<=[16]}
  %multiply.7855 = f32[256,14336]{1,0} multiply(%param.409, %broadcast.13942)
  %add.5351 = f32[256,14336]{0,1} add(%multiply.7854, %multiply.7855)
  %multiply.7856 = f32[256,14336]{0,1} multiply(%select.3180, %select.3180)
  %multiply.7857 = f32[256,14336]{0,1} multiply(%multiply.7856, %broadcast.13945)
  %param.410 = f32[256,14336]{1,0} parameter(639), sharding={devices=[16,1]<=[16]}
  %multiply.7858 = f32[256,14336]{1,0} multiply(%param.410, %broadcast.13947)
  %add.5352 = f32[256,14336]{0,1} add(%multiply.7857, %multiply.7858)
  %divide.1245 = f32[256,14336]{0,1} divide(%add.5352, %broadcast.13948)
  %sqrt.56 = f32[256,14336]{0,1} sqrt(%divide.1245)
  %add.5353 = f32[256,14336]{0,1} add(%sqrt.56, %broadcast.13949)
  %multiply.7859 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5353)
  %divide.1246 = f32[256,14336]{0,1} divide(%add.5351, %multiply.7859)
  %multiply.7860 = f32[256,14336]{1,0} multiply(%param.139, %broadcast.13940)
  %add.5354 = f32[256,14336]{0,1} add(%divide.1246, %multiply.7860)
  %multiply.7861 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5354)
  %add.5355 = f32[256,14336]{1,0} add(%param.139, %multiply.7861)
  %divide.1247 = f32[256,14336]{0,1} divide(%convert.3201, %broadcast.13938)
  %select.3181 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3201, %divide.1247)
  %multiply.7862 = f32[256,14336]{0,1} multiply(%select.3181, %broadcast.13940)
  %param.411 = f32[256,14336]{1,0} parameter(349), sharding={devices=[16,1]<=[16]}
  %multiply.7863 = f32[256,14336]{1,0} multiply(%param.411, %broadcast.13942)
  %add.5356 = f32[256,14336]{0,1} add(%multiply.7862, %multiply.7863)
  %multiply.7865 = f32[256,14336]{0,1} multiply(%select.3181, %select.3181)
  %multiply.7866 = f32[256,14336]{0,1} multiply(%multiply.7865, %broadcast.13945)
  %param.412 = f32[256,14336]{1,0} parameter(640), sharding={devices=[16,1]<=[16]}
  %multiply.7867 = f32[256,14336]{1,0} multiply(%param.412, %broadcast.13947)
  %add.5357 = f32[256,14336]{0,1} add(%multiply.7866, %multiply.7867)
  %divide.1248 = f32[256,14336]{0,1} divide(%add.5357, %broadcast.13948)
  %sqrt.57 = f32[256,14336]{0,1} sqrt(%divide.1248)
  %add.5358 = f32[256,14336]{0,1} add(%sqrt.57, %broadcast.13949)
  %multiply.7868 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5358)
  %divide.1249 = f32[256,14336]{0,1} divide(%add.5356, %multiply.7868)
  %multiply.7869 = f32[256,14336]{1,0} multiply(%param.140, %broadcast.13940)
  %add.5359 = f32[256,14336]{0,1} add(%divide.1249, %multiply.7869)
  %multiply.7870 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5359)
  %add.5360 = f32[256,14336]{1,0} add(%param.140, %multiply.7870)
  %divide.1250 = f32[14336,256]{0,1} divide(%convert.3202, %broadcast.13957)
  %select.3182 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3202, %divide.1250)
  %multiply.7871 = f32[14336,256]{0,1} multiply(%select.3182, %broadcast.13958)
  %param.413 = f32[14336,256]{1,0} parameter(350), sharding={devices=[1,16]<=[16]}
  %multiply.7872 = f32[14336,256]{1,0} multiply(%param.413, %broadcast.13959)
  %add.5361 = f32[14336,256]{0,1} add(%multiply.7871, %multiply.7872)
  %multiply.7873 = f32[14336,256]{0,1} multiply(%select.3182, %select.3182)
  %multiply.7874 = f32[14336,256]{0,1} multiply(%multiply.7873, %broadcast.13961)
  %param.414 = f32[14336,256]{1,0} parameter(641), sharding={devices=[1,16]<=[16]}
  %multiply.7875 = f32[14336,256]{1,0} multiply(%param.414, %broadcast.13962)
  %add.5362 = f32[14336,256]{0,1} add(%multiply.7874, %multiply.7875)
  %divide.1251 = f32[14336,256]{0,1} divide(%add.5362, %broadcast.13963)
  %sqrt.58 = f32[14336,256]{0,1} sqrt(%divide.1251)
  %add.5364 = f32[14336,256]{0,1} add(%sqrt.58, %broadcast.13964)
  %multiply.7876 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5364)
  %divide.1252 = f32[14336,256]{0,1} divide(%add.5361, %multiply.7876)
  %multiply.7877 = f32[14336,256]{1,0} multiply(%param.141, %broadcast.13958)
  %add.5365 = f32[14336,256]{0,1} add(%divide.1252, %multiply.7877)
  %multiply.7878 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5365)
  %add.5366 = f32[14336,256]{1,0} add(%param.141, %multiply.7878)
  %divide.1253 = f32[4096]{0} divide(%convert.3203, %broadcast.13924)
  %select.3183 = f32[4096]{0} select(%broadcast.13923, %convert.3203, %divide.1253)
  %multiply.7879 = f32[4096]{0} multiply(%select.3183, %broadcast.13925)
  %param.415 = f32[4096]{0} parameter(351), sharding={replicated}
  %multiply.7881 = f32[4096]{0} multiply(%param.415, %broadcast.13926)
  %add.5367 = f32[4096]{0} add(%multiply.7879, %multiply.7881)
  %multiply.7883 = f32[4096]{0} multiply(%select.3183, %select.3183)
  %multiply.7884 = f32[4096]{0} multiply(%multiply.7883, %broadcast.13928)
  %param.416 = f32[4096]{0} parameter(642), sharding={replicated}
  %multiply.7885 = f32[4096]{0} multiply(%param.416, %broadcast.13929)
  %add.5368 = f32[4096]{0} add(%multiply.7884, %multiply.7885)
  %divide.1254 = f32[4096]{0} divide(%add.5368, %broadcast.13931)
  %sqrt.59 = f32[4096]{0} sqrt(%divide.1254)
  %add.5369 = f32[4096]{0} add(%sqrt.59, %broadcast.13934)
  %multiply.7886 = f32[4096]{0} multiply(%broadcast.13927, %add.5369)
  %divide.1255 = f32[4096]{0} divide(%add.5367, %multiply.7886)
  %multiply.7887 = f32[4096]{0} multiply(%param.138, %broadcast.13925)
  %add.5370 = f32[4096]{0} add(%divide.1255, %multiply.7887)
  %multiply.7888 = f32[4096]{0} multiply(%broadcast.7107, %add.5370)
  %add.5371 = f32[4096]{0} add(%param.138, %multiply.7888)
  %divide.1256 = f32[4096]{0} divide(%convert.3205, %broadcast.13924)
  %select.3184 = f32[4096]{0} select(%broadcast.13923, %convert.3205, %divide.1256)
  %multiply.7889 = f32[4096]{0} multiply(%select.3184, %broadcast.13925)
  %param.417 = f32[4096]{0} parameter(352), sharding={replicated}
  %multiply.7890 = f32[4096]{0} multiply(%param.417, %broadcast.13926)
  %add.5372 = f32[4096]{0} add(%multiply.7889, %multiply.7890)
  %multiply.7891 = f32[4096]{0} multiply(%select.3184, %select.3184)
  %multiply.7892 = f32[4096]{0} multiply(%multiply.7891, %broadcast.13928)
  %param.418 = f32[4096]{0} parameter(643), sharding={replicated}
  %multiply.7893 = f32[4096]{0} multiply(%param.418, %broadcast.13929)
  %add.5373 = f32[4096]{0} add(%multiply.7892, %multiply.7893)
  %divide.1257 = f32[4096]{0} divide(%add.5373, %broadcast.13931)
  %sqrt.60 = f32[4096]{0} sqrt(%divide.1257)
  %add.5374 = f32[4096]{0} add(%sqrt.60, %broadcast.13934)
  %multiply.7894 = f32[4096]{0} multiply(%broadcast.13927, %add.5374)
  %divide.1258 = f32[4096]{0} divide(%add.5372, %multiply.7894)
  %multiply.7895 = f32[4096]{0} multiply(%param.133, %broadcast.13925)
  %add.5375 = f32[4096]{0} add(%divide.1258, %multiply.7895)
  %multiply.7896 = f32[4096]{0} multiply(%broadcast.7107, %add.5375)
  %add.5376 = f32[4096]{0} add(%param.133, %multiply.7896)
  %divide.1259 = f32[256,8,128]{0,2,1} divide(%transpose.408, %broadcast.13977)
  %select.3185 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.408, %divide.1259)
  %multiply.7897 = f32[256,8,128]{0,2,1} multiply(%select.3185, %broadcast.13978)
  %param.419 = f32[256,8,128]{2,1,0} parameter(353), sharding={devices=[16,1,1]<=[16]}
  %multiply.7898 = f32[256,8,128]{2,1,0} multiply(%param.419, %broadcast.13979)
  %add.5377 = f32[256,8,128]{0,2,1} add(%multiply.7897, %multiply.7898)
  %multiply.7899 = f32[256,8,128]{0,2,1} multiply(%select.3185, %select.3185)
  %multiply.7900 = f32[256,8,128]{0,2,1} multiply(%multiply.7899, %broadcast.13981)
  %param.420 = f32[256,8,128]{2,1,0} parameter(644), sharding={devices=[16,1,1]<=[16]}
  %multiply.7901 = f32[256,8,128]{2,1,0} multiply(%param.420, %broadcast.13982)
  %add.5378 = f32[256,8,128]{0,2,1} add(%multiply.7900, %multiply.7901)
  %divide.1260 = f32[256,8,128]{0,2,1} divide(%add.5378, %broadcast.13983)
  %sqrt.61 = f32[256,8,128]{0,2,1} sqrt(%divide.1260)
  %add.5379 = f32[256,8,128]{0,2,1} add(%sqrt.61, %broadcast.13984)
  %multiply.7902 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5379)
  %divide.1261 = f32[256,8,128]{0,2,1} divide(%add.5377, %multiply.7902)
  %multiply.7903 = f32[256,8,128]{2,1,0} multiply(%param.135, %broadcast.13978)
  %add.5380 = f32[256,8,128]{0,2,1} add(%divide.1261, %multiply.7903)
  %multiply.7904 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5380)
  %add.5381 = f32[256,8,128]{2,1,0} add(%param.135, %multiply.7904)
  %divide.1262 = f32[32,128,256]{1,0,2} divide(%transpose.409, %broadcast.13987)
  %select.3186 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.409, %divide.1262)
  %multiply.7905 = f32[32,128,256]{1,0,2} multiply(%select.3186, %broadcast.13989)
  %param.421 = f32[32,128,256]{2,1,0} parameter(354), sharding={devices=[1,1,16]<=[16]}
  %multiply.7906 = f32[32,128,256]{2,1,0} multiply(%param.421, %broadcast.13991)
  %add.5382 = f32[32,128,256]{1,0,2} add(%multiply.7905, %multiply.7906)
  %multiply.7907 = f32[32,128,256]{1,0,2} multiply(%select.3186, %select.3186)
  %multiply.7908 = f32[32,128,256]{1,0,2} multiply(%multiply.7907, %broadcast.13993)
  %param.422 = f32[32,128,256]{2,1,0} parameter(645), sharding={devices=[1,1,16]<=[16]}
  %multiply.7910 = f32[32,128,256]{2,1,0} multiply(%param.422, %broadcast.13994)
  %add.5383 = f32[32,128,256]{1,0,2} add(%multiply.7908, %multiply.7910)
  %divide.1263 = f32[32,128,256]{1,0,2} divide(%add.5383, %broadcast.13996)
  %sqrt.62 = f32[32,128,256]{1,0,2} sqrt(%divide.1263)
  %add.5384 = f32[32,128,256]{1,0,2} add(%sqrt.62, %broadcast.13998)
  %multiply.7911 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5384)
  %divide.1264 = f32[32,128,256]{1,0,2} divide(%add.5382, %multiply.7911)
  %multiply.7912 = f32[32,128,256]{2,1,0} multiply(%param.137, %broadcast.13989)
  %add.5385 = f32[32,128,256]{1,0,2} add(%divide.1264, %multiply.7912)
  %multiply.7913 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5385)
  %add.5386 = f32[32,128,256]{2,1,0} add(%param.137, %multiply.7913)
  %divide.1265 = f32[256,32,128]{0,2,1} divide(%transpose.410, %broadcast.14001)
  %select.3187 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.410, %divide.1265)
  %multiply.7915 = f32[256,32,128]{0,2,1} multiply(%select.3187, %broadcast.14002)
  %param.423 = f32[256,32,128]{2,1,0} parameter(355), sharding={devices=[16,1,1]<=[16]}
  %multiply.7916 = f32[256,32,128]{2,1,0} multiply(%param.423, %broadcast.14003)
  %add.5387 = f32[256,32,128]{0,2,1} add(%multiply.7915, %multiply.7916)
  %multiply.7917 = f32[256,32,128]{0,2,1} multiply(%select.3187, %select.3187)
  %multiply.7918 = f32[256,32,128]{0,2,1} multiply(%multiply.7917, %broadcast.14005)
  %param.424 = f32[256,32,128]{2,1,0} parameter(646), sharding={devices=[16,1,1]<=[16]}
  %multiply.7919 = f32[256,32,128]{2,1,0} multiply(%param.424, %broadcast.14006)
  %add.5388 = f32[256,32,128]{0,2,1} add(%multiply.7918, %multiply.7919)
  %divide.1266 = f32[256,32,128]{0,2,1} divide(%add.5388, %broadcast.14007)
  %sqrt.63 = f32[256,32,128]{0,2,1} sqrt(%divide.1266)
  %add.5389 = f32[256,32,128]{0,2,1} add(%sqrt.63, %broadcast.14008)
  %multiply.7921 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5389)
  %divide.1267 = f32[256,32,128]{0,2,1} divide(%add.5387, %multiply.7921)
  %multiply.7922 = f32[256,32,128]{2,1,0} multiply(%param.134, %broadcast.14002)
  %add.5390 = f32[256,32,128]{0,2,1} add(%divide.1267, %multiply.7922)
  %multiply.7923 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5390)
  %add.5391 = f32[256,32,128]{2,1,0} add(%param.134, %multiply.7923)
  %divide.1268 = f32[256,8,128]{0,2,1} divide(%transpose.411, %broadcast.13977)
  %select.3188 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.411, %divide.1268)
  %multiply.7924 = f32[256,8,128]{0,2,1} multiply(%select.3188, %broadcast.13978)
  %param.425 = f32[256,8,128]{2,1,0} parameter(356), sharding={devices=[16,1,1]<=[16]}
  %multiply.7925 = f32[256,8,128]{2,1,0} multiply(%param.425, %broadcast.13979)
  %add.5392 = f32[256,8,128]{0,2,1} add(%multiply.7924, %multiply.7925)
  %multiply.7926 = f32[256,8,128]{0,2,1} multiply(%select.3188, %select.3188)
  %multiply.7927 = f32[256,8,128]{0,2,1} multiply(%multiply.7926, %broadcast.13981)
  %param.426 = f32[256,8,128]{2,1,0} parameter(647), sharding={devices=[16,1,1]<=[16]}
  %multiply.7928 = f32[256,8,128]{2,1,0} multiply(%param.426, %broadcast.13982)
  %add.5393 = f32[256,8,128]{0,2,1} add(%multiply.7927, %multiply.7928)
  %divide.1269 = f32[256,8,128]{0,2,1} divide(%add.5393, %broadcast.13983)
  %sqrt.64 = f32[256,8,128]{0,2,1} sqrt(%divide.1269)
  %add.5394 = f32[256,8,128]{0,2,1} add(%sqrt.64, %broadcast.13984)
  %multiply.7929 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5394)
  %divide.1270 = f32[256,8,128]{0,2,1} divide(%add.5392, %multiply.7929)
  %multiply.7930 = f32[256,8,128]{2,1,0} multiply(%param.136, %broadcast.13978)
  %add.5395 = f32[256,8,128]{0,2,1} add(%divide.1270, %multiply.7930)
  %multiply.7931 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5395)
  %add.5396 = f32[256,8,128]{2,1,0} add(%param.136, %multiply.7931)
  %divide.1271 = f32[256,14336]{0,1} divide(%convert.3212, %broadcast.13938)
  %select.3189 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3212, %divide.1271)
  %multiply.7932 = f32[256,14336]{0,1} multiply(%select.3189, %broadcast.13940)
  %param.427 = f32[256,14336]{1,0} parameter(357), sharding={devices=[16,1]<=[16]}
  %multiply.7933 = f32[256,14336]{1,0} multiply(%param.427, %broadcast.13942)
  %add.5397 = f32[256,14336]{0,1} add(%multiply.7932, %multiply.7933)
  %multiply.7934 = f32[256,14336]{0,1} multiply(%select.3189, %select.3189)
  %multiply.7935 = f32[256,14336]{0,1} multiply(%multiply.7934, %broadcast.13945)
  %param.428 = f32[256,14336]{1,0} parameter(648), sharding={devices=[16,1]<=[16]}
  %multiply.7936 = f32[256,14336]{1,0} multiply(%param.428, %broadcast.13947)
  %add.5398 = f32[256,14336]{0,1} add(%multiply.7935, %multiply.7936)
  %divide.1272 = f32[256,14336]{0,1} divide(%add.5398, %broadcast.13948)
  %sqrt.65 = f32[256,14336]{0,1} sqrt(%divide.1272)
  %add.5399 = f32[256,14336]{0,1} add(%sqrt.65, %broadcast.13949)
  %multiply.7937 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5399)
  %divide.1273 = f32[256,14336]{0,1} divide(%add.5397, %multiply.7937)
  %multiply.7938 = f32[256,14336]{1,0} multiply(%param.148, %broadcast.13940)
  %add.5400 = f32[256,14336]{0,1} add(%divide.1273, %multiply.7938)
  %multiply.7939 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5400)
  %add.5402 = f32[256,14336]{1,0} add(%param.148, %multiply.7939)
  %divide.1274 = f32[256,14336]{0,1} divide(%convert.3213, %broadcast.13938)
  %select.3190 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3213, %divide.1274)
  %multiply.7941 = f32[256,14336]{0,1} multiply(%select.3190, %broadcast.13940)
  %param.429 = f32[256,14336]{1,0} parameter(358), sharding={devices=[16,1]<=[16]}
  %multiply.7942 = f32[256,14336]{1,0} multiply(%param.429, %broadcast.13942)
  %add.5403 = f32[256,14336]{0,1} add(%multiply.7941, %multiply.7942)
  %multiply.7943 = f32[256,14336]{0,1} multiply(%select.3190, %select.3190)
  %multiply.7944 = f32[256,14336]{0,1} multiply(%multiply.7943, %broadcast.13945)
  %param.430 = f32[256,14336]{1,0} parameter(649), sharding={devices=[16,1]<=[16]}
  %multiply.7945 = f32[256,14336]{1,0} multiply(%param.430, %broadcast.13947)
  %add.5404 = f32[256,14336]{0,1} add(%multiply.7944, %multiply.7945)
  %divide.1275 = f32[256,14336]{0,1} divide(%add.5404, %broadcast.13948)
  %sqrt.66 = f32[256,14336]{0,1} sqrt(%divide.1275)
  %add.5405 = f32[256,14336]{0,1} add(%sqrt.66, %broadcast.13949)
  %multiply.7946 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5405)
  %divide.1276 = f32[256,14336]{0,1} divide(%add.5403, %multiply.7946)
  %multiply.7947 = f32[256,14336]{1,0} multiply(%param.149, %broadcast.13940)
  %add.5406 = f32[256,14336]{0,1} add(%divide.1276, %multiply.7947)
  %multiply.7948 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5406)
  %add.5407 = f32[256,14336]{1,0} add(%param.149, %multiply.7948)
  %divide.1277 = f32[14336,256]{0,1} divide(%convert.3214, %broadcast.13957)
  %select.3191 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3214, %divide.1277)
  %multiply.7949 = f32[14336,256]{0,1} multiply(%select.3191, %broadcast.13958)
  %param.431 = f32[14336,256]{1,0} parameter(359), sharding={devices=[1,16]<=[16]}
  %multiply.7950 = f32[14336,256]{1,0} multiply(%param.431, %broadcast.13959)
  %add.5408 = f32[14336,256]{0,1} add(%multiply.7949, %multiply.7950)
  %multiply.7951 = f32[14336,256]{0,1} multiply(%select.3191, %select.3191)
  %multiply.7952 = f32[14336,256]{0,1} multiply(%multiply.7951, %broadcast.13961)
  %param.432 = f32[14336,256]{1,0} parameter(650), sharding={devices=[1,16]<=[16]}
  %multiply.7953 = f32[14336,256]{1,0} multiply(%param.432, %broadcast.13962)
  %add.5409 = f32[14336,256]{0,1} add(%multiply.7952, %multiply.7953)
  %divide.1278 = f32[14336,256]{0,1} divide(%add.5409, %broadcast.13963)
  %sqrt.67 = f32[14336,256]{0,1} sqrt(%divide.1278)
  %add.5410 = f32[14336,256]{0,1} add(%sqrt.67, %broadcast.13964)
  %multiply.7954 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5410)
  %divide.1279 = f32[14336,256]{0,1} divide(%add.5408, %multiply.7954)
  %multiply.7955 = f32[14336,256]{1,0} multiply(%param.150, %broadcast.13958)
  %add.5411 = f32[14336,256]{0,1} add(%divide.1279, %multiply.7955)
  %multiply.7957 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5411)
  %add.5412 = f32[14336,256]{1,0} add(%param.150, %multiply.7957)
  %divide.1280 = f32[4096]{0} divide(%convert.3215, %broadcast.13924)
  %select.3192 = f32[4096]{0} select(%broadcast.13923, %convert.3215, %divide.1280)
  %multiply.7959 = f32[4096]{0} multiply(%select.3192, %broadcast.13925)
  %param.433 = f32[4096]{0} parameter(360), sharding={replicated}
  %multiply.7960 = f32[4096]{0} multiply(%param.433, %broadcast.13926)
  %add.5413 = f32[4096]{0} add(%multiply.7959, %multiply.7960)
  %multiply.7961 = f32[4096]{0} multiply(%select.3192, %select.3192)
  %multiply.7962 = f32[4096]{0} multiply(%multiply.7961, %broadcast.13928)
  %param.434 = f32[4096]{0} parameter(651), sharding={replicated}
  %multiply.7963 = f32[4096]{0} multiply(%param.434, %broadcast.13929)
  %add.5414 = f32[4096]{0} add(%multiply.7962, %multiply.7963)
  %divide.1281 = f32[4096]{0} divide(%add.5414, %broadcast.13931)
  %sqrt.68 = f32[4096]{0} sqrt(%divide.1281)
  %add.5415 = f32[4096]{0} add(%sqrt.68, %broadcast.13934)
  %multiply.7964 = f32[4096]{0} multiply(%broadcast.13927, %add.5415)
  %divide.1282 = f32[4096]{0} divide(%add.5413, %multiply.7964)
  %multiply.7965 = f32[4096]{0} multiply(%param.147, %broadcast.13925)
  %add.5416 = f32[4096]{0} add(%divide.1282, %multiply.7965)
  %multiply.7966 = f32[4096]{0} multiply(%broadcast.7107, %add.5416)
  %add.5417 = f32[4096]{0} add(%param.147, %multiply.7966)
  %divide.1283 = f32[4096]{0} divide(%convert.3217, %broadcast.13924)
  %select.3193 = f32[4096]{0} select(%broadcast.13923, %convert.3217, %divide.1283)
  %multiply.7967 = f32[4096]{0} multiply(%select.3193, %broadcast.13925)
  %param.435 = f32[4096]{0} parameter(361), sharding={replicated}
  %multiply.7968 = f32[4096]{0} multiply(%param.435, %broadcast.13926)
  %add.5418 = f32[4096]{0} add(%multiply.7967, %multiply.7968)
  %multiply.7969 = f32[4096]{0} multiply(%select.3193, %select.3193)
  %multiply.7970 = f32[4096]{0} multiply(%multiply.7969, %broadcast.13928)
  %param.436 = f32[4096]{0} parameter(652), sharding={replicated}
  %multiply.7971 = f32[4096]{0} multiply(%param.436, %broadcast.13929)
  %add.5419 = f32[4096]{0} add(%multiply.7970, %multiply.7971)
  %divide.1284 = f32[4096]{0} divide(%add.5419, %broadcast.13931)
  %sqrt.69 = f32[4096]{0} sqrt(%divide.1284)
  %add.5420 = f32[4096]{0} add(%sqrt.69, %broadcast.13934)
  %multiply.7972 = f32[4096]{0} multiply(%broadcast.13927, %add.5420)
  %divide.1285 = f32[4096]{0} divide(%add.5418, %multiply.7972)
  %multiply.7973 = f32[4096]{0} multiply(%param.142, %broadcast.13925)
  %add.5421 = f32[4096]{0} add(%divide.1285, %multiply.7973)
  %multiply.7974 = f32[4096]{0} multiply(%broadcast.7107, %add.5421)
  %add.5422 = f32[4096]{0} add(%param.142, %multiply.7974)
  %divide.1286 = f32[256,8,128]{0,2,1} divide(%transpose.412, %broadcast.13977)
  %select.3194 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.412, %divide.1286)
  %multiply.7975 = f32[256,8,128]{0,2,1} multiply(%select.3194, %broadcast.13978)
  %param.437 = f32[256,8,128]{2,1,0} parameter(362), sharding={devices=[16,1,1]<=[16]}
  %multiply.7976 = f32[256,8,128]{2,1,0} multiply(%param.437, %broadcast.13979)
  %add.5423 = f32[256,8,128]{0,2,1} add(%multiply.7975, %multiply.7976)
  %multiply.7977 = f32[256,8,128]{0,2,1} multiply(%select.3194, %select.3194)
  %multiply.7978 = f32[256,8,128]{0,2,1} multiply(%multiply.7977, %broadcast.13981)
  %param.438 = f32[256,8,128]{2,1,0} parameter(653), sharding={devices=[16,1,1]<=[16]}
  %multiply.7979 = f32[256,8,128]{2,1,0} multiply(%param.438, %broadcast.13982)
  %add.5424 = f32[256,8,128]{0,2,1} add(%multiply.7978, %multiply.7979)
  %divide.1287 = f32[256,8,128]{0,2,1} divide(%add.5424, %broadcast.13983)
  %sqrt.70 = f32[256,8,128]{0,2,1} sqrt(%divide.1287)
  %add.5425 = f32[256,8,128]{0,2,1} add(%sqrt.70, %broadcast.13984)
  %multiply.7980 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5425)
  %divide.1288 = f32[256,8,128]{0,2,1} divide(%add.5423, %multiply.7980)
  %multiply.7981 = f32[256,8,128]{2,1,0} multiply(%param.144, %broadcast.13978)
  %add.5426 = f32[256,8,128]{0,2,1} add(%divide.1288, %multiply.7981)
  %multiply.7982 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5426)
  %add.5427 = f32[256,8,128]{2,1,0} add(%param.144, %multiply.7982)
  %divide.1289 = f32[32,128,256]{1,0,2} divide(%transpose.413, %broadcast.13987)
  %select.3195 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.413, %divide.1289)
  %multiply.7983 = f32[32,128,256]{1,0,2} multiply(%select.3195, %broadcast.13989)
  %param.439 = f32[32,128,256]{2,1,0} parameter(363), sharding={devices=[1,1,16]<=[16]}
  %multiply.7984 = f32[32,128,256]{2,1,0} multiply(%param.439, %broadcast.13991)
  %add.5428 = f32[32,128,256]{1,0,2} add(%multiply.7983, %multiply.7984)
  %multiply.7986 = f32[32,128,256]{1,0,2} multiply(%select.3195, %select.3195)
  %multiply.7987 = f32[32,128,256]{1,0,2} multiply(%multiply.7986, %broadcast.13993)
  %param.440 = f32[32,128,256]{2,1,0} parameter(654), sharding={devices=[1,1,16]<=[16]}
  %multiply.7988 = f32[32,128,256]{2,1,0} multiply(%param.440, %broadcast.13994)
  %add.5429 = f32[32,128,256]{1,0,2} add(%multiply.7987, %multiply.7988)
  %divide.1290 = f32[32,128,256]{1,0,2} divide(%add.5429, %broadcast.13996)
  %sqrt.71 = f32[32,128,256]{1,0,2} sqrt(%divide.1290)
  %add.5430 = f32[32,128,256]{1,0,2} add(%sqrt.71, %broadcast.13998)
  %multiply.7989 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5430)
  %divide.1291 = f32[32,128,256]{1,0,2} divide(%add.5428, %multiply.7989)
  %multiply.7991 = f32[32,128,256]{2,1,0} multiply(%param.146, %broadcast.13989)
  %add.5431 = f32[32,128,256]{1,0,2} add(%divide.1291, %multiply.7991)
  %multiply.7992 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5431)
  %add.5432 = f32[32,128,256]{2,1,0} add(%param.146, %multiply.7992)
  %divide.1292 = f32[256,32,128]{0,2,1} divide(%transpose.414, %broadcast.14001)
  %select.3196 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.414, %divide.1292)
  %multiply.7993 = f32[256,32,128]{0,2,1} multiply(%select.3196, %broadcast.14002)
  %param.441 = f32[256,32,128]{2,1,0} parameter(364), sharding={devices=[16,1,1]<=[16]}
  %multiply.7994 = f32[256,32,128]{2,1,0} multiply(%param.441, %broadcast.14003)
  %add.5433 = f32[256,32,128]{0,2,1} add(%multiply.7993, %multiply.7994)
  %multiply.7995 = f32[256,32,128]{0,2,1} multiply(%select.3196, %select.3196)
  %multiply.7997 = f32[256,32,128]{0,2,1} multiply(%multiply.7995, %broadcast.14005)
  %param.442 = f32[256,32,128]{2,1,0} parameter(655), sharding={devices=[16,1,1]<=[16]}
  %multiply.7998 = f32[256,32,128]{2,1,0} multiply(%param.442, %broadcast.14006)
  %add.5434 = f32[256,32,128]{0,2,1} add(%multiply.7997, %multiply.7998)
  %divide.1293 = f32[256,32,128]{0,2,1} divide(%add.5434, %broadcast.14007)
  %sqrt.72 = f32[256,32,128]{0,2,1} sqrt(%divide.1293)
  %add.5435 = f32[256,32,128]{0,2,1} add(%sqrt.72, %broadcast.14008)
  %multiply.7999 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5435)
  %divide.1294 = f32[256,32,128]{0,2,1} divide(%add.5433, %multiply.7999)
  %multiply.8000 = f32[256,32,128]{2,1,0} multiply(%param.143, %broadcast.14002)
  %add.5436 = f32[256,32,128]{0,2,1} add(%divide.1294, %multiply.8000)
  %multiply.8001 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5436)
  %add.5437 = f32[256,32,128]{2,1,0} add(%param.143, %multiply.8001)
  %divide.1295 = f32[256,8,128]{0,2,1} divide(%transpose.415, %broadcast.13977)
  %select.3197 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.415, %divide.1295)
  %multiply.8002 = f32[256,8,128]{0,2,1} multiply(%select.3197, %broadcast.13978)
  %param.443 = f32[256,8,128]{2,1,0} parameter(365), sharding={devices=[16,1,1]<=[16]}
  %multiply.8003 = f32[256,8,128]{2,1,0} multiply(%param.443, %broadcast.13979)
  %add.5438 = f32[256,8,128]{0,2,1} add(%multiply.8002, %multiply.8003)
  %multiply.8004 = f32[256,8,128]{0,2,1} multiply(%select.3197, %select.3197)
  %multiply.8005 = f32[256,8,128]{0,2,1} multiply(%multiply.8004, %broadcast.13981)
  %param.444 = f32[256,8,128]{2,1,0} parameter(656), sharding={devices=[16,1,1]<=[16]}
  %multiply.8006 = f32[256,8,128]{2,1,0} multiply(%param.444, %broadcast.13982)
  %add.5440 = f32[256,8,128]{0,2,1} add(%multiply.8005, %multiply.8006)
  %divide.1296 = f32[256,8,128]{0,2,1} divide(%add.5440, %broadcast.13983)
  %sqrt.73 = f32[256,8,128]{0,2,1} sqrt(%divide.1296)
  %add.5441 = f32[256,8,128]{0,2,1} add(%sqrt.73, %broadcast.13984)
  %multiply.8007 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5441)
  %divide.1297 = f32[256,8,128]{0,2,1} divide(%add.5438, %multiply.8007)
  %multiply.8008 = f32[256,8,128]{2,1,0} multiply(%param.145, %broadcast.13978)
  %add.5442 = f32[256,8,128]{0,2,1} add(%divide.1297, %multiply.8008)
  %multiply.8009 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5442)
  %add.5443 = f32[256,8,128]{2,1,0} add(%param.145, %multiply.8009)
  %divide.1298 = f32[256,14336]{0,1} divide(%convert.3224, %broadcast.13938)
  %select.3198 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3224, %divide.1298)
  %multiply.8010 = f32[256,14336]{0,1} multiply(%select.3198, %broadcast.13940)
  %param.445 = f32[256,14336]{1,0} parameter(366), sharding={devices=[16,1]<=[16]}
  %multiply.8011 = f32[256,14336]{1,0} multiply(%param.445, %broadcast.13942)
  %add.5444 = f32[256,14336]{0,1} add(%multiply.8010, %multiply.8011)
  %multiply.8012 = f32[256,14336]{0,1} multiply(%select.3198, %select.3198)
  %multiply.8013 = f32[256,14336]{0,1} multiply(%multiply.8012, %broadcast.13945)
  %param.446 = f32[256,14336]{1,0} parameter(657), sharding={devices=[16,1]<=[16]}
  %multiply.8014 = f32[256,14336]{1,0} multiply(%param.446, %broadcast.13947)
  %add.5445 = f32[256,14336]{0,1} add(%multiply.8013, %multiply.8014)
  %divide.1299 = f32[256,14336]{0,1} divide(%add.5445, %broadcast.13948)
  %sqrt.74 = f32[256,14336]{0,1} sqrt(%divide.1299)
  %add.5446 = f32[256,14336]{0,1} add(%sqrt.74, %broadcast.13949)
  %multiply.8015 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5446)
  %divide.1300 = f32[256,14336]{0,1} divide(%add.5444, %multiply.8015)
  %multiply.8016 = f32[256,14336]{1,0} multiply(%param.157, %broadcast.13940)
  %add.5447 = f32[256,14336]{0,1} add(%divide.1300, %multiply.8016)
  %multiply.8017 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5447)
  %add.5448 = f32[256,14336]{1,0} add(%param.157, %multiply.8017)
  %divide.1301 = f32[256,14336]{0,1} divide(%convert.3225, %broadcast.13938)
  %select.3199 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3225, %divide.1301)
  %multiply.8018 = f32[256,14336]{0,1} multiply(%select.3199, %broadcast.13940)
  %param.447 = f32[256,14336]{1,0} parameter(367), sharding={devices=[16,1]<=[16]}
  %multiply.8019 = f32[256,14336]{1,0} multiply(%param.447, %broadcast.13942)
  %add.5449 = f32[256,14336]{0,1} add(%multiply.8018, %multiply.8019)
  %multiply.8020 = f32[256,14336]{0,1} multiply(%select.3199, %select.3199)
  %multiply.8021 = f32[256,14336]{0,1} multiply(%multiply.8020, %broadcast.13945)
  %param.448 = f32[256,14336]{1,0} parameter(658), sharding={devices=[16,1]<=[16]}
  %multiply.8022 = f32[256,14336]{1,0} multiply(%param.448, %broadcast.13947)
  %add.5450 = f32[256,14336]{0,1} add(%multiply.8021, %multiply.8022)
  %divide.1302 = f32[256,14336]{0,1} divide(%add.5450, %broadcast.13948)
  %sqrt.75 = f32[256,14336]{0,1} sqrt(%divide.1302)
  %add.5451 = f32[256,14336]{0,1} add(%sqrt.75, %broadcast.13949)
  %multiply.8023 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5451)
  %divide.1303 = f32[256,14336]{0,1} divide(%add.5449, %multiply.8023)
  %multiply.8024 = f32[256,14336]{1,0} multiply(%param.158, %broadcast.13940)
  %add.5452 = f32[256,14336]{0,1} add(%divide.1303, %multiply.8024)
  %multiply.8025 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5452)
  %add.5453 = f32[256,14336]{1,0} add(%param.158, %multiply.8025)
  %divide.1304 = f32[14336,256]{0,1} divide(%convert.3227, %broadcast.13957)
  %select.3200 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3227, %divide.1304)
  %multiply.8026 = f32[14336,256]{0,1} multiply(%select.3200, %broadcast.13958)
  %param.449 = f32[14336,256]{1,0} parameter(368), sharding={devices=[1,16]<=[16]}
  %multiply.8027 = f32[14336,256]{1,0} multiply(%param.449, %broadcast.13959)
  %add.5454 = f32[14336,256]{0,1} add(%multiply.8026, %multiply.8027)
  %multiply.8028 = f32[14336,256]{0,1} multiply(%select.3200, %select.3200)
  %multiply.8029 = f32[14336,256]{0,1} multiply(%multiply.8028, %broadcast.13961)
  %param.450 = f32[14336,256]{1,0} parameter(659), sharding={devices=[1,16]<=[16]}
  %multiply.8030 = f32[14336,256]{1,0} multiply(%param.450, %broadcast.13962)
  %add.5455 = f32[14336,256]{0,1} add(%multiply.8029, %multiply.8030)
  %divide.1305 = f32[14336,256]{0,1} divide(%add.5455, %broadcast.13963)
  %sqrt.76 = f32[14336,256]{0,1} sqrt(%divide.1305)
  %add.5456 = f32[14336,256]{0,1} add(%sqrt.76, %broadcast.13964)
  %multiply.8031 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5456)
  %divide.1306 = f32[14336,256]{0,1} divide(%add.5454, %multiply.8031)
  %multiply.8032 = f32[14336,256]{1,0} multiply(%param.159, %broadcast.13958)
  %add.5457 = f32[14336,256]{0,1} add(%divide.1306, %multiply.8032)
  %multiply.8033 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5457)
  %add.5458 = f32[14336,256]{1,0} add(%param.159, %multiply.8033)
  %divide.1307 = f32[4096]{0} divide(%convert.3228, %broadcast.13924)
  %select.3201 = f32[4096]{0} select(%broadcast.13923, %convert.3228, %divide.1307)
  %multiply.8034 = f32[4096]{0} multiply(%select.3201, %broadcast.13925)
  %param.451 = f32[4096]{0} parameter(369), sharding={replicated}
  %multiply.8035 = f32[4096]{0} multiply(%param.451, %broadcast.13926)
  %add.5459 = f32[4096]{0} add(%multiply.8034, %multiply.8035)
  %multiply.8036 = f32[4096]{0} multiply(%select.3201, %select.3201)
  %multiply.8037 = f32[4096]{0} multiply(%multiply.8036, %broadcast.13928)
  %param.452 = f32[4096]{0} parameter(660), sharding={replicated}
  %multiply.8038 = f32[4096]{0} multiply(%param.452, %broadcast.13929)
  %add.5460 = f32[4096]{0} add(%multiply.8037, %multiply.8038)
  %divide.1308 = f32[4096]{0} divide(%add.5460, %broadcast.13931)
  %sqrt.77 = f32[4096]{0} sqrt(%divide.1308)
  %add.5461 = f32[4096]{0} add(%sqrt.77, %broadcast.13934)
  %multiply.8039 = f32[4096]{0} multiply(%broadcast.13927, %add.5461)
  %divide.1309 = f32[4096]{0} divide(%add.5459, %multiply.8039)
  %multiply.8040 = f32[4096]{0} multiply(%param.156, %broadcast.13925)
  %add.5462 = f32[4096]{0} add(%divide.1309, %multiply.8040)
  %multiply.8041 = f32[4096]{0} multiply(%broadcast.7107, %add.5462)
  %add.5463 = f32[4096]{0} add(%param.156, %multiply.8041)
  %divide.1310 = f32[4096]{0} divide(%convert.3230, %broadcast.13924)
  %select.3203 = f32[4096]{0} select(%broadcast.13923, %convert.3230, %divide.1310)
  %multiply.8042 = f32[4096]{0} multiply(%select.3203, %broadcast.13925)
  %param.453 = f32[4096]{0} parameter(370), sharding={replicated}
  %multiply.8043 = f32[4096]{0} multiply(%param.453, %broadcast.13926)
  %add.5464 = f32[4096]{0} add(%multiply.8042, %multiply.8043)
  %multiply.8044 = f32[4096]{0} multiply(%select.3203, %select.3203)
  %multiply.8045 = f32[4096]{0} multiply(%multiply.8044, %broadcast.13928)
  %param.454 = f32[4096]{0} parameter(661), sharding={replicated}
  %multiply.8046 = f32[4096]{0} multiply(%param.454, %broadcast.13929)
  %add.5465 = f32[4096]{0} add(%multiply.8045, %multiply.8046)
  %divide.1311 = f32[4096]{0} divide(%add.5465, %broadcast.13931)
  %sqrt.78 = f32[4096]{0} sqrt(%divide.1311)
  %add.5466 = f32[4096]{0} add(%sqrt.78, %broadcast.13934)
  %multiply.8047 = f32[4096]{0} multiply(%broadcast.13927, %add.5466)
  %divide.1312 = f32[4096]{0} divide(%add.5464, %multiply.8047)
  %multiply.8048 = f32[4096]{0} multiply(%param.151, %broadcast.13925)
  %add.5467 = f32[4096]{0} add(%divide.1312, %multiply.8048)
  %multiply.8049 = f32[4096]{0} multiply(%broadcast.7107, %add.5467)
  %add.5468 = f32[4096]{0} add(%param.151, %multiply.8049)
  %divide.1313 = f32[256,8,128]{0,2,1} divide(%transpose.416, %broadcast.13977)
  %select.3205 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.416, %divide.1313)
  %multiply.8050 = f32[256,8,128]{0,2,1} multiply(%select.3205, %broadcast.13978)
  %param.455 = f32[256,8,128]{2,1,0} parameter(371), sharding={devices=[16,1,1]<=[16]}
  %multiply.8051 = f32[256,8,128]{2,1,0} multiply(%param.455, %broadcast.13979)
  %add.5469 = f32[256,8,128]{0,2,1} add(%multiply.8050, %multiply.8051)
  %multiply.8052 = f32[256,8,128]{0,2,1} multiply(%select.3205, %select.3205)
  %multiply.8053 = f32[256,8,128]{0,2,1} multiply(%multiply.8052, %broadcast.13981)
  %param.456 = f32[256,8,128]{2,1,0} parameter(662), sharding={devices=[16,1,1]<=[16]}
  %multiply.8054 = f32[256,8,128]{2,1,0} multiply(%param.456, %broadcast.13982)
  %add.5470 = f32[256,8,128]{0,2,1} add(%multiply.8053, %multiply.8054)
  %divide.1314 = f32[256,8,128]{0,2,1} divide(%add.5470, %broadcast.13983)
  %sqrt.79 = f32[256,8,128]{0,2,1} sqrt(%divide.1314)
  %add.5471 = f32[256,8,128]{0,2,1} add(%sqrt.79, %broadcast.13984)
  %multiply.8055 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5471)
  %divide.1315 = f32[256,8,128]{0,2,1} divide(%add.5469, %multiply.8055)
  %multiply.8057 = f32[256,8,128]{2,1,0} multiply(%param.153, %broadcast.13978)
  %add.5472 = f32[256,8,128]{0,2,1} add(%divide.1315, %multiply.8057)
  %multiply.8058 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5472)
  %add.5473 = f32[256,8,128]{2,1,0} add(%param.153, %multiply.8058)
  %divide.1316 = f32[32,128,256]{1,0,2} divide(%transpose.417, %broadcast.13987)
  %select.3206 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.417, %divide.1316)
  %multiply.8059 = f32[32,128,256]{1,0,2} multiply(%select.3206, %broadcast.13989)
  %param.457 = f32[32,128,256]{2,1,0} parameter(372), sharding={devices=[1,1,16]<=[16]}
  %multiply.8060 = f32[32,128,256]{2,1,0} multiply(%param.457, %broadcast.13991)
  %add.5474 = f32[32,128,256]{1,0,2} add(%multiply.8059, %multiply.8060)
  %multiply.8061 = f32[32,128,256]{1,0,2} multiply(%select.3206, %select.3206)
  %multiply.8062 = f32[32,128,256]{1,0,2} multiply(%multiply.8061, %broadcast.13993)
  %param.458 = f32[32,128,256]{2,1,0} parameter(663), sharding={devices=[1,1,16]<=[16]}
  %multiply.8063 = f32[32,128,256]{2,1,0} multiply(%param.458, %broadcast.13994)
  %add.5475 = f32[32,128,256]{1,0,2} add(%multiply.8062, %multiply.8063)
  %divide.1317 = f32[32,128,256]{1,0,2} divide(%add.5475, %broadcast.13996)
  %sqrt.80 = f32[32,128,256]{1,0,2} sqrt(%divide.1317)
  %add.5476 = f32[32,128,256]{1,0,2} add(%sqrt.80, %broadcast.13998)
  %multiply.8064 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5476)
  %divide.1318 = f32[32,128,256]{1,0,2} divide(%add.5474, %multiply.8064)
  %multiply.8065 = f32[32,128,256]{2,1,0} multiply(%param.155, %broadcast.13989)
  %add.5478 = f32[32,128,256]{1,0,2} add(%divide.1318, %multiply.8065)
  %multiply.8066 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5478)
  %add.5479 = f32[32,128,256]{2,1,0} add(%param.155, %multiply.8066)
  %divide.1319 = f32[256,32,128]{0,2,1} divide(%transpose.418, %broadcast.14001)
  %select.3207 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.418, %divide.1319)
  %multiply.8067 = f32[256,32,128]{0,2,1} multiply(%select.3207, %broadcast.14002)
  %param.459 = f32[256,32,128]{2,1,0} parameter(373), sharding={devices=[16,1,1]<=[16]}
  %multiply.8068 = f32[256,32,128]{2,1,0} multiply(%param.459, %broadcast.14003)
  %add.5480 = f32[256,32,128]{0,2,1} add(%multiply.8067, %multiply.8068)
  %multiply.8070 = f32[256,32,128]{0,2,1} multiply(%select.3207, %select.3207)
  %multiply.8071 = f32[256,32,128]{0,2,1} multiply(%multiply.8070, %broadcast.14005)
  %param.460 = f32[256,32,128]{2,1,0} parameter(664), sharding={devices=[16,1,1]<=[16]}
  %multiply.8072 = f32[256,32,128]{2,1,0} multiply(%param.460, %broadcast.14006)
  %add.5481 = f32[256,32,128]{0,2,1} add(%multiply.8071, %multiply.8072)
  %divide.1320 = f32[256,32,128]{0,2,1} divide(%add.5481, %broadcast.14007)
  %sqrt.81 = f32[256,32,128]{0,2,1} sqrt(%divide.1320)
  %add.5482 = f32[256,32,128]{0,2,1} add(%sqrt.81, %broadcast.14008)
  %multiply.8073 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5482)
  %divide.1321 = f32[256,32,128]{0,2,1} divide(%add.5480, %multiply.8073)
  %multiply.8074 = f32[256,32,128]{2,1,0} multiply(%param.152, %broadcast.14002)
  %add.5483 = f32[256,32,128]{0,2,1} add(%divide.1321, %multiply.8074)
  %multiply.8075 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5483)
  %add.5484 = f32[256,32,128]{2,1,0} add(%param.152, %multiply.8075)
  %divide.1322 = f32[256,8,128]{0,2,1} divide(%transpose.419, %broadcast.13977)
  %select.3208 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.419, %divide.1322)
  %multiply.8077 = f32[256,8,128]{0,2,1} multiply(%select.3208, %broadcast.13978)
  %param.461 = f32[256,8,128]{2,1,0} parameter(374), sharding={devices=[16,1,1]<=[16]}
  %multiply.8078 = f32[256,8,128]{2,1,0} multiply(%param.461, %broadcast.13979)
  %add.5485 = f32[256,8,128]{0,2,1} add(%multiply.8077, %multiply.8078)
  %multiply.8079 = f32[256,8,128]{0,2,1} multiply(%select.3208, %select.3208)
  %multiply.8080 = f32[256,8,128]{0,2,1} multiply(%multiply.8079, %broadcast.13981)
  %param.462 = f32[256,8,128]{2,1,0} parameter(665), sharding={devices=[16,1,1]<=[16]}
  %multiply.8081 = f32[256,8,128]{2,1,0} multiply(%param.462, %broadcast.13982)
  %add.5486 = f32[256,8,128]{0,2,1} add(%multiply.8080, %multiply.8081)
  %divide.1323 = f32[256,8,128]{0,2,1} divide(%add.5486, %broadcast.13983)
  %sqrt.82 = f32[256,8,128]{0,2,1} sqrt(%divide.1323)
  %add.5487 = f32[256,8,128]{0,2,1} add(%sqrt.82, %broadcast.13984)
  %multiply.8082 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5487)
  %divide.1324 = f32[256,8,128]{0,2,1} divide(%add.5485, %multiply.8082)
  %multiply.8083 = f32[256,8,128]{2,1,0} multiply(%param.154, %broadcast.13978)
  %add.5488 = f32[256,8,128]{0,2,1} add(%divide.1324, %multiply.8083)
  %multiply.8084 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5488)
  %add.5489 = f32[256,8,128]{2,1,0} add(%param.154, %multiply.8084)
  %divide.1325 = f32[256,14336]{0,1} divide(%convert.3237, %broadcast.13938)
  %select.3209 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3237, %divide.1325)
  %multiply.8086 = f32[256,14336]{0,1} multiply(%select.3209, %broadcast.13940)
  %param.463 = f32[256,14336]{1,0} parameter(375), sharding={devices=[16,1]<=[16]}
  %multiply.8087 = f32[256,14336]{1,0} multiply(%param.463, %broadcast.13942)
  %add.5490 = f32[256,14336]{0,1} add(%multiply.8086, %multiply.8087)
  %multiply.8088 = f32[256,14336]{0,1} multiply(%select.3209, %select.3209)
  %multiply.8089 = f32[256,14336]{0,1} multiply(%multiply.8088, %broadcast.13945)
  %param.464 = f32[256,14336]{1,0} parameter(666), sharding={devices=[16,1]<=[16]}
  %multiply.8090 = f32[256,14336]{1,0} multiply(%param.464, %broadcast.13947)
  %add.5491 = f32[256,14336]{0,1} add(%multiply.8089, %multiply.8090)
  %divide.1326 = f32[256,14336]{0,1} divide(%add.5491, %broadcast.13948)
  %sqrt.83 = f32[256,14336]{0,1} sqrt(%divide.1326)
  %add.5492 = f32[256,14336]{0,1} add(%sqrt.83, %broadcast.13949)
  %multiply.8091 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5492)
  %divide.1327 = f32[256,14336]{0,1} divide(%add.5490, %multiply.8091)
  %multiply.8092 = f32[256,14336]{1,0} multiply(%param.166, %broadcast.13940)
  %add.5493 = f32[256,14336]{0,1} add(%divide.1327, %multiply.8092)
  %multiply.8093 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5493)
  %add.5494 = f32[256,14336]{1,0} add(%param.166, %multiply.8093)
  %divide.1328 = f32[256,14336]{0,1} divide(%convert.3239, %broadcast.13938)
  %select.3210 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3239, %divide.1328)
  %multiply.8095 = f32[256,14336]{0,1} multiply(%select.3210, %broadcast.13940)
  %param.465 = f32[256,14336]{1,0} parameter(376), sharding={devices=[16,1]<=[16]}
  %multiply.8096 = f32[256,14336]{1,0} multiply(%param.465, %broadcast.13942)
  %add.5495 = f32[256,14336]{0,1} add(%multiply.8095, %multiply.8096)
  %multiply.8097 = f32[256,14336]{0,1} multiply(%select.3210, %select.3210)
  %multiply.8098 = f32[256,14336]{0,1} multiply(%multiply.8097, %broadcast.13945)
  %param.466 = f32[256,14336]{1,0} parameter(667), sharding={devices=[16,1]<=[16]}
  %multiply.8099 = f32[256,14336]{1,0} multiply(%param.466, %broadcast.13947)
  %add.5496 = f32[256,14336]{0,1} add(%multiply.8098, %multiply.8099)
  %divide.1329 = f32[256,14336]{0,1} divide(%add.5496, %broadcast.13948)
  %sqrt.84 = f32[256,14336]{0,1} sqrt(%divide.1329)
  %add.5497 = f32[256,14336]{0,1} add(%sqrt.84, %broadcast.13949)
  %multiply.8100 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5497)
  %divide.1330 = f32[256,14336]{0,1} divide(%add.5495, %multiply.8100)
  %multiply.8101 = f32[256,14336]{1,0} multiply(%param.167, %broadcast.13940)
  %add.5498 = f32[256,14336]{0,1} add(%divide.1330, %multiply.8101)
  %multiply.8102 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5498)
  %add.5499 = f32[256,14336]{1,0} add(%param.167, %multiply.8102)
  %divide.1331 = f32[14336,256]{0,1} divide(%convert.3240, %broadcast.13957)
  %select.3211 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3240, %divide.1331)
  %multiply.8103 = f32[14336,256]{0,1} multiply(%select.3211, %broadcast.13958)
  %param.467 = f32[14336,256]{1,0} parameter(377), sharding={devices=[1,16]<=[16]}
  %multiply.8104 = f32[14336,256]{1,0} multiply(%param.467, %broadcast.13959)
  %add.5500 = f32[14336,256]{0,1} add(%multiply.8103, %multiply.8104)
  %multiply.8105 = f32[14336,256]{0,1} multiply(%select.3211, %select.3211)
  %multiply.8106 = f32[14336,256]{0,1} multiply(%multiply.8105, %broadcast.13961)
  %param.468 = f32[14336,256]{1,0} parameter(668), sharding={devices=[1,16]<=[16]}
  %multiply.8108 = f32[14336,256]{1,0} multiply(%param.468, %broadcast.13962)
  %add.5501 = f32[14336,256]{0,1} add(%multiply.8106, %multiply.8108)
  %divide.1332 = f32[14336,256]{0,1} divide(%add.5501, %broadcast.13963)
  %sqrt.85 = f32[14336,256]{0,1} sqrt(%divide.1332)
  %add.5502 = f32[14336,256]{0,1} add(%sqrt.85, %broadcast.13964)
  %multiply.8109 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5502)
  %divide.1333 = f32[14336,256]{0,1} divide(%add.5500, %multiply.8109)
  %multiply.8110 = f32[14336,256]{1,0} multiply(%param.168, %broadcast.13958)
  %add.5503 = f32[14336,256]{0,1} add(%divide.1333, %multiply.8110)
  %multiply.8111 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5503)
  %add.5504 = f32[14336,256]{1,0} add(%param.168, %multiply.8111)
  %divide.1335 = f32[4096]{0} divide(%convert.3241, %broadcast.13924)
  %select.3212 = f32[4096]{0} select(%broadcast.13923, %convert.3241, %divide.1335)
  %multiply.8112 = f32[4096]{0} multiply(%select.3212, %broadcast.13925)
  %param.469 = f32[4096]{0} parameter(378), sharding={replicated}
  %multiply.8113 = f32[4096]{0} multiply(%param.469, %broadcast.13926)
  %add.5505 = f32[4096]{0} add(%multiply.8112, %multiply.8113)
  %multiply.8115 = f32[4096]{0} multiply(%select.3212, %select.3212)
  %multiply.8116 = f32[4096]{0} multiply(%multiply.8115, %broadcast.13928)
  %param.470 = f32[4096]{0} parameter(669), sharding={replicated}
  %multiply.8117 = f32[4096]{0} multiply(%param.470, %broadcast.13929)
  %add.5506 = f32[4096]{0} add(%multiply.8116, %multiply.8117)
  %divide.1336 = f32[4096]{0} divide(%add.5506, %broadcast.13931)
  %sqrt.86 = f32[4096]{0} sqrt(%divide.1336)
  %add.5507 = f32[4096]{0} add(%sqrt.86, %broadcast.13934)
  %multiply.8118 = f32[4096]{0} multiply(%broadcast.13927, %add.5507)
  %divide.1337 = f32[4096]{0} divide(%add.5505, %multiply.8118)
  %multiply.8119 = f32[4096]{0} multiply(%param.165, %broadcast.13925)
  %add.5509 = f32[4096]{0} add(%divide.1337, %multiply.8119)
  %multiply.8120 = f32[4096]{0} multiply(%broadcast.7107, %add.5509)
  %add.5510 = f32[4096]{0} add(%param.165, %multiply.8120)
  %divide.1338 = f32[4096]{0} divide(%convert.3243, %broadcast.13924)
  %select.3213 = f32[4096]{0} select(%broadcast.13923, %convert.3243, %divide.1338)
  %multiply.8121 = f32[4096]{0} multiply(%select.3213, %broadcast.13925)
  %param.471 = f32[4096]{0} parameter(379), sharding={replicated}
  %multiply.8122 = f32[4096]{0} multiply(%param.471, %broadcast.13926)
  %add.5511 = f32[4096]{0} add(%multiply.8121, %multiply.8122)
  %multiply.8123 = f32[4096]{0} multiply(%select.3213, %select.3213)
  %multiply.8124 = f32[4096]{0} multiply(%multiply.8123, %broadcast.13928)
  %param.472 = f32[4096]{0} parameter(670), sharding={replicated}
  %multiply.8125 = f32[4096]{0} multiply(%param.472, %broadcast.13929)
  %add.5512 = f32[4096]{0} add(%multiply.8124, %multiply.8125)
  %divide.1339 = f32[4096]{0} divide(%add.5512, %broadcast.13931)
  %sqrt.87 = f32[4096]{0} sqrt(%divide.1339)
  %add.5513 = f32[4096]{0} add(%sqrt.87, %broadcast.13934)
  %multiply.8126 = f32[4096]{0} multiply(%broadcast.13927, %add.5513)
  %divide.1340 = f32[4096]{0} divide(%add.5511, %multiply.8126)
  %multiply.8127 = f32[4096]{0} multiply(%param.160, %broadcast.13925)
  %add.5514 = f32[4096]{0} add(%divide.1340, %multiply.8127)
  %multiply.8128 = f32[4096]{0} multiply(%broadcast.7107, %add.5514)
  %add.5515 = f32[4096]{0} add(%param.160, %multiply.8128)
  %divide.1341 = f32[256,8,128]{0,2,1} divide(%transpose.420, %broadcast.13977)
  %select.3214 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.420, %divide.1341)
  %multiply.8129 = f32[256,8,128]{0,2,1} multiply(%select.3214, %broadcast.13978)
  %param.473 = f32[256,8,128]{2,1,0} parameter(380), sharding={devices=[16,1,1]<=[16]}
  %multiply.8130 = f32[256,8,128]{2,1,0} multiply(%param.473, %broadcast.13979)
  %add.5517 = f32[256,8,128]{0,2,1} add(%multiply.8129, %multiply.8130)
  %multiply.8131 = f32[256,8,128]{0,2,1} multiply(%select.3214, %select.3214)
  %multiply.8132 = f32[256,8,128]{0,2,1} multiply(%multiply.8131, %broadcast.13981)
  %param.474 = f32[256,8,128]{2,1,0} parameter(671), sharding={devices=[16,1,1]<=[16]}
  %multiply.8133 = f32[256,8,128]{2,1,0} multiply(%param.474, %broadcast.13982)
  %add.5518 = f32[256,8,128]{0,2,1} add(%multiply.8132, %multiply.8133)
  %divide.1342 = f32[256,8,128]{0,2,1} divide(%add.5518, %broadcast.13983)
  %sqrt.88 = f32[256,8,128]{0,2,1} sqrt(%divide.1342)
  %add.5519 = f32[256,8,128]{0,2,1} add(%sqrt.88, %broadcast.13984)
  %multiply.8134 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5519)
  %divide.1343 = f32[256,8,128]{0,2,1} divide(%add.5517, %multiply.8134)
  %multiply.8135 = f32[256,8,128]{2,1,0} multiply(%param.162, %broadcast.13978)
  %add.5520 = f32[256,8,128]{0,2,1} add(%divide.1343, %multiply.8135)
  %multiply.8136 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5520)
  %add.5521 = f32[256,8,128]{2,1,0} add(%param.162, %multiply.8136)
  %divide.1344 = f32[32,128,256]{1,0,2} divide(%transpose.421, %broadcast.13987)
  %select.3215 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.421, %divide.1344)
  %multiply.8137 = f32[32,128,256]{1,0,2} multiply(%select.3215, %broadcast.13989)
  %param.475 = f32[32,128,256]{2,1,0} parameter(381), sharding={devices=[1,1,16]<=[16]}
  %multiply.8138 = f32[32,128,256]{2,1,0} multiply(%param.475, %broadcast.13991)
  %add.5522 = f32[32,128,256]{1,0,2} add(%multiply.8137, %multiply.8138)
  %multiply.8139 = f32[32,128,256]{1,0,2} multiply(%select.3215, %select.3215)
  %multiply.8140 = f32[32,128,256]{1,0,2} multiply(%multiply.8139, %broadcast.13993)
  %param.476 = f32[32,128,256]{2,1,0} parameter(672), sharding={devices=[1,1,16]<=[16]}
  %multiply.8141 = f32[32,128,256]{2,1,0} multiply(%param.476, %broadcast.13994)
  %add.5523 = f32[32,128,256]{1,0,2} add(%multiply.8140, %multiply.8141)
  %divide.1345 = f32[32,128,256]{1,0,2} divide(%add.5523, %broadcast.13996)
  %sqrt.89 = f32[32,128,256]{1,0,2} sqrt(%divide.1345)
  %add.5524 = f32[32,128,256]{1,0,2} add(%sqrt.89, %broadcast.13998)
  %multiply.8142 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5524)
  %divide.1346 = f32[32,128,256]{1,0,2} divide(%add.5522, %multiply.8142)
  %multiply.8143 = f32[32,128,256]{2,1,0} multiply(%param.164, %broadcast.13989)
  %add.5525 = f32[32,128,256]{1,0,2} add(%divide.1346, %multiply.8143)
  %multiply.8145 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5525)
  %add.5526 = f32[32,128,256]{2,1,0} add(%param.164, %multiply.8145)
  %divide.1347 = f32[256,32,128]{0,2,1} divide(%transpose.422, %broadcast.14001)
  %select.3216 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.422, %divide.1347)
  %multiply.8146 = f32[256,32,128]{0,2,1} multiply(%select.3216, %broadcast.14002)
  %param.477 = f32[256,32,128]{2,1,0} parameter(382), sharding={devices=[16,1,1]<=[16]}
  %multiply.8147 = f32[256,32,128]{2,1,0} multiply(%param.477, %broadcast.14003)
  %add.5527 = f32[256,32,128]{0,2,1} add(%multiply.8146, %multiply.8147)
  %multiply.8148 = f32[256,32,128]{0,2,1} multiply(%select.3216, %select.3216)
  %multiply.8149 = f32[256,32,128]{0,2,1} multiply(%multiply.8148, %broadcast.14005)
  %param.478 = f32[256,32,128]{2,1,0} parameter(673), sharding={devices=[16,1,1]<=[16]}
  %multiply.8150 = f32[256,32,128]{2,1,0} multiply(%param.478, %broadcast.14006)
  %add.5528 = f32[256,32,128]{0,2,1} add(%multiply.8149, %multiply.8150)
  %divide.1348 = f32[256,32,128]{0,2,1} divide(%add.5528, %broadcast.14007)
  %sqrt.90 = f32[256,32,128]{0,2,1} sqrt(%divide.1348)
  %add.5529 = f32[256,32,128]{0,2,1} add(%sqrt.90, %broadcast.14008)
  %multiply.8151 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5529)
  %divide.1349 = f32[256,32,128]{0,2,1} divide(%add.5527, %multiply.8151)
  %multiply.8152 = f32[256,32,128]{2,1,0} multiply(%param.161, %broadcast.14002)
  %add.5530 = f32[256,32,128]{0,2,1} add(%divide.1349, %multiply.8152)
  %multiply.8153 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5530)
  %add.5531 = f32[256,32,128]{2,1,0} add(%param.161, %multiply.8153)
  %divide.1350 = f32[256,8,128]{0,2,1} divide(%transpose.423, %broadcast.13977)
  %select.3217 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.423, %divide.1350)
  %multiply.8154 = f32[256,8,128]{0,2,1} multiply(%select.3217, %broadcast.13978)
  %param.479 = f32[256,8,128]{2,1,0} parameter(383), sharding={devices=[16,1,1]<=[16]}
  %multiply.8155 = f32[256,8,128]{2,1,0} multiply(%param.479, %broadcast.13979)
  %add.5532 = f32[256,8,128]{0,2,1} add(%multiply.8154, %multiply.8155)
  %multiply.8156 = f32[256,8,128]{0,2,1} multiply(%select.3217, %select.3217)
  %multiply.8157 = f32[256,8,128]{0,2,1} multiply(%multiply.8156, %broadcast.13981)
  %param.480 = f32[256,8,128]{2,1,0} parameter(674), sharding={devices=[16,1,1]<=[16]}
  %multiply.8158 = f32[256,8,128]{2,1,0} multiply(%param.480, %broadcast.13982)
  %add.5533 = f32[256,8,128]{0,2,1} add(%multiply.8157, %multiply.8158)
  %divide.1351 = f32[256,8,128]{0,2,1} divide(%add.5533, %broadcast.13983)
  %sqrt.91 = f32[256,8,128]{0,2,1} sqrt(%divide.1351)
  %add.5535 = f32[256,8,128]{0,2,1} add(%sqrt.91, %broadcast.13984)
  %multiply.8159 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5535)
  %divide.1352 = f32[256,8,128]{0,2,1} divide(%add.5532, %multiply.8159)
  %multiply.8161 = f32[256,8,128]{2,1,0} multiply(%param.163, %broadcast.13978)
  %add.5536 = f32[256,8,128]{0,2,1} add(%divide.1352, %multiply.8161)
  %multiply.8163 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5536)
  %add.5537 = f32[256,8,128]{2,1,0} add(%param.163, %multiply.8163)
  %divide.1353 = f32[256,14336]{0,1} divide(%convert.3249, %broadcast.13938)
  %select.3218 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3249, %divide.1353)
  %multiply.8164 = f32[256,14336]{0,1} multiply(%select.3218, %broadcast.13940)
  %param.481 = f32[256,14336]{1,0} parameter(384), sharding={devices=[16,1]<=[16]}
  %multiply.8165 = f32[256,14336]{1,0} multiply(%param.481, %broadcast.13942)
  %add.5538 = f32[256,14336]{0,1} add(%multiply.8164, %multiply.8165)
  %multiply.8166 = f32[256,14336]{0,1} multiply(%select.3218, %select.3218)
  %multiply.8167 = f32[256,14336]{0,1} multiply(%multiply.8166, %broadcast.13945)
  %param.482 = f32[256,14336]{1,0} parameter(675), sharding={devices=[16,1]<=[16]}
  %multiply.8168 = f32[256,14336]{1,0} multiply(%param.482, %broadcast.13947)
  %add.5540 = f32[256,14336]{0,1} add(%multiply.8167, %multiply.8168)
  %divide.1354 = f32[256,14336]{0,1} divide(%add.5540, %broadcast.13948)
  %sqrt.92 = f32[256,14336]{0,1} sqrt(%divide.1354)
  %add.5541 = f32[256,14336]{0,1} add(%sqrt.92, %broadcast.13949)
  %multiply.8169 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5541)
  %divide.1355 = f32[256,14336]{0,1} divide(%add.5538, %multiply.8169)
  %multiply.8170 = f32[256,14336]{1,0} multiply(%param.175, %broadcast.13940)
  %add.5542 = f32[256,14336]{0,1} add(%divide.1355, %multiply.8170)
  %multiply.8171 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5542)
  %add.5543 = f32[256,14336]{1,0} add(%param.175, %multiply.8171)
  %divide.1356 = f32[256,14336]{0,1} divide(%convert.3250, %broadcast.13938)
  %select.3219 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3250, %divide.1356)
  %multiply.8172 = f32[256,14336]{0,1} multiply(%select.3219, %broadcast.13940)
  %param.483 = f32[256,14336]{1,0} parameter(385), sharding={devices=[16,1]<=[16]}
  %multiply.8173 = f32[256,14336]{1,0} multiply(%param.483, %broadcast.13942)
  %add.5545 = f32[256,14336]{0,1} add(%multiply.8172, %multiply.8173)
  %multiply.8174 = f32[256,14336]{0,1} multiply(%select.3219, %select.3219)
  %multiply.8175 = f32[256,14336]{0,1} multiply(%multiply.8174, %broadcast.13945)
  %param.484 = f32[256,14336]{1,0} parameter(676), sharding={devices=[16,1]<=[16]}
  %multiply.8176 = f32[256,14336]{1,0} multiply(%param.484, %broadcast.13947)
  %add.5546 = f32[256,14336]{0,1} add(%multiply.8175, %multiply.8176)
  %divide.1357 = f32[256,14336]{0,1} divide(%add.5546, %broadcast.13948)
  %sqrt.93 = f32[256,14336]{0,1} sqrt(%divide.1357)
  %add.5547 = f32[256,14336]{0,1} add(%sqrt.93, %broadcast.13949)
  %multiply.8177 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5547)
  %divide.1359 = f32[256,14336]{0,1} divide(%add.5545, %multiply.8177)
  %multiply.8178 = f32[256,14336]{1,0} multiply(%param.176, %broadcast.13940)
  %add.5548 = f32[256,14336]{0,1} add(%divide.1359, %multiply.8178)
  %multiply.8179 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5548)
  %add.5549 = f32[256,14336]{1,0} add(%param.176, %multiply.8179)
  %divide.1360 = f32[14336,256]{0,1} divide(%convert.3251, %broadcast.13957)
  %select.3220 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3251, %divide.1360)
  %multiply.8180 = f32[14336,256]{0,1} multiply(%select.3220, %broadcast.13958)
  %param.485 = f32[14336,256]{1,0} parameter(386), sharding={devices=[1,16]<=[16]}
  %multiply.8181 = f32[14336,256]{1,0} multiply(%param.485, %broadcast.13959)
  %add.5550 = f32[14336,256]{0,1} add(%multiply.8180, %multiply.8181)
  %multiply.8182 = f32[14336,256]{0,1} multiply(%select.3220, %select.3220)
  %multiply.8183 = f32[14336,256]{0,1} multiply(%multiply.8182, %broadcast.13961)
  %param.486 = f32[14336,256]{1,0} parameter(677), sharding={devices=[1,16]<=[16]}
  %multiply.8184 = f32[14336,256]{1,0} multiply(%param.486, %broadcast.13962)
  %add.5551 = f32[14336,256]{0,1} add(%multiply.8183, %multiply.8184)
  %divide.1361 = f32[14336,256]{0,1} divide(%add.5551, %broadcast.13963)
  %sqrt.94 = f32[14336,256]{0,1} sqrt(%divide.1361)
  %add.5552 = f32[14336,256]{0,1} add(%sqrt.94, %broadcast.13964)
  %multiply.8185 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5552)
  %divide.1362 = f32[14336,256]{0,1} divide(%add.5550, %multiply.8185)
  %multiply.8186 = f32[14336,256]{1,0} multiply(%param.177, %broadcast.13958)
  %add.5553 = f32[14336,256]{0,1} add(%divide.1362, %multiply.8186)
  %multiply.8187 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5553)
  %add.5554 = f32[14336,256]{1,0} add(%param.177, %multiply.8187)
  %divide.1363 = f32[4096]{0} divide(%convert.3252, %broadcast.13924)
  %select.3221 = f32[4096]{0} select(%broadcast.13923, %convert.3252, %divide.1363)
  %multiply.8188 = f32[4096]{0} multiply(%select.3221, %broadcast.13925)
  %param.487 = f32[4096]{0} parameter(387), sharding={replicated}
  %multiply.8190 = f32[4096]{0} multiply(%param.487, %broadcast.13926)
  %add.5555 = f32[4096]{0} add(%multiply.8188, %multiply.8190)
  %multiply.8191 = f32[4096]{0} multiply(%select.3221, %select.3221)
  %multiply.8192 = f32[4096]{0} multiply(%multiply.8191, %broadcast.13928)
  %param.488 = f32[4096]{0} parameter(678), sharding={replicated}
  %multiply.8193 = f32[4096]{0} multiply(%param.488, %broadcast.13929)
  %add.5556 = f32[4096]{0} add(%multiply.8192, %multiply.8193)
  %divide.1364 = f32[4096]{0} divide(%add.5556, %broadcast.13931)
  %sqrt.95 = f32[4096]{0} sqrt(%divide.1364)
  %add.5557 = f32[4096]{0} add(%sqrt.95, %broadcast.13934)
  %multiply.8195 = f32[4096]{0} multiply(%broadcast.13927, %add.5557)
  %divide.1365 = f32[4096]{0} divide(%add.5555, %multiply.8195)
  %multiply.8196 = f32[4096]{0} multiply(%param.174, %broadcast.13925)
  %add.5558 = f32[4096]{0} add(%divide.1365, %multiply.8196)
  %multiply.8197 = f32[4096]{0} multiply(%broadcast.7107, %add.5558)
  %add.5559 = f32[4096]{0} add(%param.174, %multiply.8197)
  %divide.1366 = f32[4096]{0} divide(%convert.3254, %broadcast.13924)
  %select.3222 = f32[4096]{0} select(%broadcast.13923, %convert.3254, %divide.1366)
  %multiply.8198 = f32[4096]{0} multiply(%select.3222, %broadcast.13925)
  %param.489 = f32[4096]{0} parameter(388), sharding={replicated}
  %multiply.8199 = f32[4096]{0} multiply(%param.489, %broadcast.13926)
  %add.5560 = f32[4096]{0} add(%multiply.8198, %multiply.8199)
  %multiply.8201 = f32[4096]{0} multiply(%select.3222, %select.3222)
  %multiply.8202 = f32[4096]{0} multiply(%multiply.8201, %broadcast.13928)
  %param.490 = f32[4096]{0} parameter(679), sharding={replicated}
  %multiply.8203 = f32[4096]{0} multiply(%param.490, %broadcast.13929)
  %add.5561 = f32[4096]{0} add(%multiply.8202, %multiply.8203)
  %divide.1367 = f32[4096]{0} divide(%add.5561, %broadcast.13931)
  %sqrt.96 = f32[4096]{0} sqrt(%divide.1367)
  %add.5562 = f32[4096]{0} add(%sqrt.96, %broadcast.13934)
  %multiply.8204 = f32[4096]{0} multiply(%broadcast.13927, %add.5562)
  %divide.1368 = f32[4096]{0} divide(%add.5560, %multiply.8204)
  %multiply.8205 = f32[4096]{0} multiply(%param.169, %broadcast.13925)
  %add.5563 = f32[4096]{0} add(%divide.1368, %multiply.8205)
  %multiply.8206 = f32[4096]{0} multiply(%broadcast.7107, %add.5563)
  %add.5564 = f32[4096]{0} add(%param.169, %multiply.8206)
  %divide.1369 = f32[256,8,128]{0,2,1} divide(%transpose.424, %broadcast.13977)
  %select.3223 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.424, %divide.1369)
  %multiply.8207 = f32[256,8,128]{0,2,1} multiply(%select.3223, %broadcast.13978)
  %param.491 = f32[256,8,128]{2,1,0} parameter(389), sharding={devices=[16,1,1]<=[16]}
  %multiply.8208 = f32[256,8,128]{2,1,0} multiply(%param.491, %broadcast.13979)
  %add.5565 = f32[256,8,128]{0,2,1} add(%multiply.8207, %multiply.8208)
  %multiply.8209 = f32[256,8,128]{0,2,1} multiply(%select.3223, %select.3223)
  %multiply.8210 = f32[256,8,128]{0,2,1} multiply(%multiply.8209, %broadcast.13981)
  %param.492 = f32[256,8,128]{2,1,0} parameter(680), sharding={devices=[16,1,1]<=[16]}
  %multiply.8211 = f32[256,8,128]{2,1,0} multiply(%param.492, %broadcast.13982)
  %add.5566 = f32[256,8,128]{0,2,1} add(%multiply.8210, %multiply.8211)
  %divide.1370 = f32[256,8,128]{0,2,1} divide(%add.5566, %broadcast.13983)
  %sqrt.97 = f32[256,8,128]{0,2,1} sqrt(%divide.1370)
  %add.5567 = f32[256,8,128]{0,2,1} add(%sqrt.97, %broadcast.13984)
  %multiply.8212 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5567)
  %divide.1371 = f32[256,8,128]{0,2,1} divide(%add.5565, %multiply.8212)
  %multiply.8213 = f32[256,8,128]{2,1,0} multiply(%param.171, %broadcast.13978)
  %add.5568 = f32[256,8,128]{0,2,1} add(%divide.1371, %multiply.8213)
  %multiply.8214 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5568)
  %add.5569 = f32[256,8,128]{2,1,0} add(%param.171, %multiply.8214)
  %divide.1372 = f32[32,128,256]{1,0,2} divide(%transpose.425, %broadcast.13987)
  %select.3224 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.425, %divide.1372)
  %multiply.8215 = f32[32,128,256]{1,0,2} multiply(%select.3224, %broadcast.13989)
  %param.493 = f32[32,128,256]{2,1,0} parameter(390), sharding={devices=[1,1,16]<=[16]}
  %multiply.8216 = f32[32,128,256]{2,1,0} multiply(%param.493, %broadcast.13991)
  %add.5571 = f32[32,128,256]{1,0,2} add(%multiply.8215, %multiply.8216)
  %multiply.8217 = f32[32,128,256]{1,0,2} multiply(%select.3224, %select.3224)
  %multiply.8218 = f32[32,128,256]{1,0,2} multiply(%multiply.8217, %broadcast.13993)
  %param.494 = f32[32,128,256]{2,1,0} parameter(681), sharding={devices=[1,1,16]<=[16]}
  %multiply.8219 = f32[32,128,256]{2,1,0} multiply(%param.494, %broadcast.13994)
  %add.5572 = f32[32,128,256]{1,0,2} add(%multiply.8218, %multiply.8219)
  %divide.1373 = f32[32,128,256]{1,0,2} divide(%add.5572, %broadcast.13996)
  %sqrt.98 = f32[32,128,256]{1,0,2} sqrt(%divide.1373)
  %add.5573 = f32[32,128,256]{1,0,2} add(%sqrt.98, %broadcast.13998)
  %multiply.8221 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5573)
  %divide.1374 = f32[32,128,256]{1,0,2} divide(%add.5571, %multiply.8221)
  %multiply.8222 = f32[32,128,256]{2,1,0} multiply(%param.173, %broadcast.13989)
  %add.5574 = f32[32,128,256]{1,0,2} add(%divide.1374, %multiply.8222)
  %multiply.8223 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5574)
  %add.5575 = f32[32,128,256]{2,1,0} add(%param.173, %multiply.8223)
  %divide.1375 = f32[256,32,128]{0,2,1} divide(%transpose.426, %broadcast.14001)
  %select.3225 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.426, %divide.1375)
  %multiply.8224 = f32[256,32,128]{0,2,1} multiply(%select.3225, %broadcast.14002)
  %param.495 = f32[256,32,128]{2,1,0} parameter(391), sharding={devices=[16,1,1]<=[16]}
  %multiply.8225 = f32[256,32,128]{2,1,0} multiply(%param.495, %broadcast.14003)
  %add.5576 = f32[256,32,128]{0,2,1} add(%multiply.8224, %multiply.8225)
  %multiply.8226 = f32[256,32,128]{0,2,1} multiply(%select.3225, %select.3225)
  %multiply.8227 = f32[256,32,128]{0,2,1} multiply(%multiply.8226, %broadcast.14005)
  %param.496 = f32[256,32,128]{2,1,0} parameter(682), sharding={devices=[16,1,1]<=[16]}
  %multiply.8228 = f32[256,32,128]{2,1,0} multiply(%param.496, %broadcast.14006)
  %add.5578 = f32[256,32,128]{0,2,1} add(%multiply.8227, %multiply.8228)
  %divide.1376 = f32[256,32,128]{0,2,1} divide(%add.5578, %broadcast.14007)
  %sqrt.99 = f32[256,32,128]{0,2,1} sqrt(%divide.1376)
  %add.5579 = f32[256,32,128]{0,2,1} add(%sqrt.99, %broadcast.14008)
  %multiply.8229 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5579)
  %divide.1377 = f32[256,32,128]{0,2,1} divide(%add.5576, %multiply.8229)
  %multiply.8230 = f32[256,32,128]{2,1,0} multiply(%param.170, %broadcast.14002)
  %add.5580 = f32[256,32,128]{0,2,1} add(%divide.1377, %multiply.8230)
  %multiply.8231 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5580)
  %add.5581 = f32[256,32,128]{2,1,0} add(%param.170, %multiply.8231)
  %divide.1378 = f32[256,8,128]{0,2,1} divide(%transpose.427, %broadcast.13977)
  %select.3226 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.427, %divide.1378)
  %multiply.8232 = f32[256,8,128]{0,2,1} multiply(%select.3226, %broadcast.13978)
  %param.497 = f32[256,8,128]{2,1,0} parameter(392), sharding={devices=[16,1,1]<=[16]}
  %multiply.8233 = f32[256,8,128]{2,1,0} multiply(%param.497, %broadcast.13979)
  %add.5583 = f32[256,8,128]{0,2,1} add(%multiply.8232, %multiply.8233)
  %multiply.8234 = f32[256,8,128]{0,2,1} multiply(%select.3226, %select.3226)
  %multiply.8235 = f32[256,8,128]{0,2,1} multiply(%multiply.8234, %broadcast.13981)
  %param.498 = f32[256,8,128]{2,1,0} parameter(683), sharding={devices=[16,1,1]<=[16]}
  %multiply.8237 = f32[256,8,128]{2,1,0} multiply(%param.498, %broadcast.13982)
  %add.5584 = f32[256,8,128]{0,2,1} add(%multiply.8235, %multiply.8237)
  %divide.1379 = f32[256,8,128]{0,2,1} divide(%add.5584, %broadcast.13983)
  %sqrt.100 = f32[256,8,128]{0,2,1} sqrt(%divide.1379)
  %add.5585 = f32[256,8,128]{0,2,1} add(%sqrt.100, %broadcast.13984)
  %multiply.8239 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5585)
  %divide.1380 = f32[256,8,128]{0,2,1} divide(%add.5583, %multiply.8239)
  %multiply.8240 = f32[256,8,128]{2,1,0} multiply(%param.172, %broadcast.13978)
  %add.5586 = f32[256,8,128]{0,2,1} add(%divide.1380, %multiply.8240)
  %multiply.8241 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5586)
  %add.5587 = f32[256,8,128]{2,1,0} add(%param.172, %multiply.8241)
  %divide.1382 = f32[256,14336]{0,1} divide(%convert.3260, %broadcast.13938)
  %select.3227 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3260, %divide.1382)
  %multiply.8242 = f32[256,14336]{0,1} multiply(%select.3227, %broadcast.13940)
  %param.499 = f32[256,14336]{1,0} parameter(393), sharding={devices=[16,1]<=[16]}
  %multiply.8243 = f32[256,14336]{1,0} multiply(%param.499, %broadcast.13942)
  %add.5588 = f32[256,14336]{0,1} add(%multiply.8242, %multiply.8243)
  %multiply.8244 = f32[256,14336]{0,1} multiply(%select.3227, %select.3227)
  %multiply.8245 = f32[256,14336]{0,1} multiply(%multiply.8244, %broadcast.13945)
  %param.500 = f32[256,14336]{1,0} parameter(684), sharding={devices=[16,1]<=[16]}
  %multiply.8246 = f32[256,14336]{1,0} multiply(%param.500, %broadcast.13947)
  %add.5589 = f32[256,14336]{0,1} add(%multiply.8245, %multiply.8246)
  %divide.1383 = f32[256,14336]{0,1} divide(%add.5589, %broadcast.13948)
  %sqrt.101 = f32[256,14336]{0,1} sqrt(%divide.1383)
  %add.5590 = f32[256,14336]{0,1} add(%sqrt.101, %broadcast.13949)
  %multiply.8247 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5590)
  %divide.1384 = f32[256,14336]{0,1} divide(%add.5588, %multiply.8247)
  %multiply.8248 = f32[256,14336]{1,0} multiply(%param.184, %broadcast.13940)
  %add.5591 = f32[256,14336]{0,1} add(%divide.1384, %multiply.8248)
  %multiply.8249 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5591)
  %add.5592 = f32[256,14336]{1,0} add(%param.184, %multiply.8249)
  %divide.1385 = f32[256,14336]{0,1} divide(%convert.3261, %broadcast.13938)
  %select.3228 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3261, %divide.1385)
  %multiply.8250 = f32[256,14336]{0,1} multiply(%select.3228, %broadcast.13940)
  %param.501 = f32[256,14336]{1,0} parameter(394), sharding={devices=[16,1]<=[16]}
  %multiply.8251 = f32[256,14336]{1,0} multiply(%param.501, %broadcast.13942)
  %add.5593 = f32[256,14336]{0,1} add(%multiply.8250, %multiply.8251)
  %multiply.8252 = f32[256,14336]{0,1} multiply(%select.3228, %select.3228)
  %multiply.8253 = f32[256,14336]{0,1} multiply(%multiply.8252, %broadcast.13945)
  %param.502 = f32[256,14336]{1,0} parameter(685), sharding={devices=[16,1]<=[16]}
  %multiply.8254 = f32[256,14336]{1,0} multiply(%param.502, %broadcast.13947)
  %add.5594 = f32[256,14336]{0,1} add(%multiply.8253, %multiply.8254)
  %divide.1386 = f32[256,14336]{0,1} divide(%add.5594, %broadcast.13948)
  %sqrt.102 = f32[256,14336]{0,1} sqrt(%divide.1386)
  %add.5595 = f32[256,14336]{0,1} add(%sqrt.102, %broadcast.13949)
  %multiply.8255 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5595)
  %divide.1387 = f32[256,14336]{0,1} divide(%add.5593, %multiply.8255)
  %multiply.8256 = f32[256,14336]{1,0} multiply(%param.185, %broadcast.13940)
  %add.5596 = f32[256,14336]{0,1} add(%divide.1387, %multiply.8256)
  %multiply.8257 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5596)
  %add.5597 = f32[256,14336]{1,0} add(%param.185, %multiply.8257)
  %divide.1388 = f32[14336,256]{0,1} divide(%convert.3262, %broadcast.13957)
  %select.3229 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3262, %divide.1388)
  %multiply.8258 = f32[14336,256]{0,1} multiply(%select.3229, %broadcast.13958)
  %param.503 = f32[14336,256]{1,0} parameter(395), sharding={devices=[1,16]<=[16]}
  %multiply.8259 = f32[14336,256]{1,0} multiply(%param.503, %broadcast.13959)
  %add.5598 = f32[14336,256]{0,1} add(%multiply.8258, %multiply.8259)
  %multiply.8260 = f32[14336,256]{0,1} multiply(%select.3229, %select.3229)
  %multiply.8261 = f32[14336,256]{0,1} multiply(%multiply.8260, %broadcast.13961)
  %param.504 = f32[14336,256]{1,0} parameter(686), sharding={devices=[1,16]<=[16]}
  %multiply.8262 = f32[14336,256]{1,0} multiply(%param.504, %broadcast.13962)
  %add.5599 = f32[14336,256]{0,1} add(%multiply.8261, %multiply.8262)
  %divide.1389 = f32[14336,256]{0,1} divide(%add.5599, %broadcast.13963)
  %sqrt.103 = f32[14336,256]{0,1} sqrt(%divide.1389)
  %add.5600 = f32[14336,256]{0,1} add(%sqrt.103, %broadcast.13964)
  %multiply.8263 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5600)
  %divide.1390 = f32[14336,256]{0,1} divide(%add.5598, %multiply.8263)
  %multiply.8264 = f32[14336,256]{1,0} multiply(%param.186, %broadcast.13958)
  %add.5601 = f32[14336,256]{0,1} add(%divide.1390, %multiply.8264)
  %multiply.8266 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5601)
  %add.5602 = f32[14336,256]{1,0} add(%param.186, %multiply.8266)
  %divide.1391 = f32[4096]{0} divide(%convert.3263, %broadcast.13924)
  %select.3230 = f32[4096]{0} select(%broadcast.13923, %convert.3263, %divide.1391)
  %multiply.8267 = f32[4096]{0} multiply(%select.3230, %broadcast.13925)
  %param.505 = f32[4096]{0} parameter(396), sharding={replicated}
  %multiply.8268 = f32[4096]{0} multiply(%param.505, %broadcast.13926)
  %add.5603 = f32[4096]{0} add(%multiply.8267, %multiply.8268)
  %multiply.8269 = f32[4096]{0} multiply(%select.3230, %select.3230)
  %multiply.8271 = f32[4096]{0} multiply(%multiply.8269, %broadcast.13928)
  %param.506 = f32[4096]{0} parameter(687), sharding={replicated}
  %multiply.8272 = f32[4096]{0} multiply(%param.506, %broadcast.13929)
  %add.5604 = f32[4096]{0} add(%multiply.8271, %multiply.8272)
  %divide.1392 = f32[4096]{0} divide(%add.5604, %broadcast.13931)
  %sqrt.104 = f32[4096]{0} sqrt(%divide.1392)
  %add.5605 = f32[4096]{0} add(%sqrt.104, %broadcast.13934)
  %multiply.8273 = f32[4096]{0} multiply(%broadcast.13927, %add.5605)
  %divide.1393 = f32[4096]{0} divide(%add.5603, %multiply.8273)
  %multiply.8274 = f32[4096]{0} multiply(%param.183, %broadcast.13925)
  %add.5606 = f32[4096]{0} add(%divide.1393, %multiply.8274)
  %multiply.8275 = f32[4096]{0} multiply(%broadcast.7107, %add.5606)
  %add.5607 = f32[4096]{0} add(%param.183, %multiply.8275)
  %divide.1394 = f32[4096]{0} divide(%convert.3266, %broadcast.13924)
  %select.3231 = f32[4096]{0} select(%broadcast.13923, %convert.3266, %divide.1394)
  %multiply.8277 = f32[4096]{0} multiply(%select.3231, %broadcast.13925)
  %param.507 = f32[4096]{0} parameter(397), sharding={replicated}
  %multiply.8278 = f32[4096]{0} multiply(%param.507, %broadcast.13926)
  %add.5608 = f32[4096]{0} add(%multiply.8277, %multiply.8278)
  %multiply.8279 = f32[4096]{0} multiply(%select.3231, %select.3231)
  %multiply.8280 = f32[4096]{0} multiply(%multiply.8279, %broadcast.13928)
  %param.508 = f32[4096]{0} parameter(688), sharding={replicated}
  %multiply.8281 = f32[4096]{0} multiply(%param.508, %broadcast.13929)
  %add.5609 = f32[4096]{0} add(%multiply.8280, %multiply.8281)
  %divide.1395 = f32[4096]{0} divide(%add.5609, %broadcast.13931)
  %sqrt.105 = f32[4096]{0} sqrt(%divide.1395)
  %add.5610 = f32[4096]{0} add(%sqrt.105, %broadcast.13934)
  %multiply.8282 = f32[4096]{0} multiply(%broadcast.13927, %add.5610)
  %divide.1396 = f32[4096]{0} divide(%add.5608, %multiply.8282)
  %multiply.8283 = f32[4096]{0} multiply(%param.178, %broadcast.13925)
  %add.5611 = f32[4096]{0} add(%divide.1396, %multiply.8283)
  %multiply.8284 = f32[4096]{0} multiply(%broadcast.7107, %add.5611)
  %add.5612 = f32[4096]{0} add(%param.178, %multiply.8284)
  %divide.1397 = f32[256,8,128]{0,2,1} divide(%transpose.428, %broadcast.13977)
  %select.3232 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.428, %divide.1397)
  %multiply.8285 = f32[256,8,128]{0,2,1} multiply(%select.3232, %broadcast.13978)
  %param.509 = f32[256,8,128]{2,1,0} parameter(398), sharding={devices=[16,1,1]<=[16]}
  %multiply.8286 = f32[256,8,128]{2,1,0} multiply(%param.509, %broadcast.13979)
  %add.5613 = f32[256,8,128]{0,2,1} add(%multiply.8285, %multiply.8286)
  %multiply.8287 = f32[256,8,128]{0,2,1} multiply(%select.3232, %select.3232)
  %multiply.8288 = f32[256,8,128]{0,2,1} multiply(%multiply.8287, %broadcast.13981)
  %param.510 = f32[256,8,128]{2,1,0} parameter(689), sharding={devices=[16,1,1]<=[16]}
  %multiply.8289 = f32[256,8,128]{2,1,0} multiply(%param.510, %broadcast.13982)
  %add.5614 = f32[256,8,128]{0,2,1} add(%multiply.8288, %multiply.8289)
  %divide.1398 = f32[256,8,128]{0,2,1} divide(%add.5614, %broadcast.13983)
  %sqrt.106 = f32[256,8,128]{0,2,1} sqrt(%divide.1398)
  %add.5615 = f32[256,8,128]{0,2,1} add(%sqrt.106, %broadcast.13984)
  %multiply.8290 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5615)
  %divide.1399 = f32[256,8,128]{0,2,1} divide(%add.5613, %multiply.8290)
  %multiply.8291 = f32[256,8,128]{2,1,0} multiply(%param.180, %broadcast.13978)
  %add.5616 = f32[256,8,128]{0,2,1} add(%divide.1399, %multiply.8291)
  %multiply.8292 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5616)
  %add.5617 = f32[256,8,128]{2,1,0} add(%param.180, %multiply.8292)
  %divide.1400 = f32[32,128,256]{1,0,2} divide(%transpose.429, %broadcast.13987)
  %select.3233 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.429, %divide.1400)
  %multiply.8293 = f32[32,128,256]{1,0,2} multiply(%select.3233, %broadcast.13989)
  %param.511 = f32[32,128,256]{2,1,0} parameter(399), sharding={devices=[1,1,16]<=[16]}
  %multiply.8294 = f32[32,128,256]{2,1,0} multiply(%param.511, %broadcast.13991)
  %add.5618 = f32[32,128,256]{1,0,2} add(%multiply.8293, %multiply.8294)
  %multiply.8295 = f32[32,128,256]{1,0,2} multiply(%select.3233, %select.3233)
  %multiply.8296 = f32[32,128,256]{1,0,2} multiply(%multiply.8295, %broadcast.13993)
  %param.512 = f32[32,128,256]{2,1,0} parameter(690), sharding={devices=[1,1,16]<=[16]}
  %multiply.8297 = f32[32,128,256]{2,1,0} multiply(%param.512, %broadcast.13994)
  %add.5619 = f32[32,128,256]{1,0,2} add(%multiply.8296, %multiply.8297)
  %divide.1401 = f32[32,128,256]{1,0,2} divide(%add.5619, %broadcast.13996)
  %sqrt.107 = f32[32,128,256]{1,0,2} sqrt(%divide.1401)
  %add.5620 = f32[32,128,256]{1,0,2} add(%sqrt.107, %broadcast.13998)
  %multiply.8298 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5620)
  %divide.1402 = f32[32,128,256]{1,0,2} divide(%add.5618, %multiply.8298)
  %multiply.8299 = f32[32,128,256]{2,1,0} multiply(%param.182, %broadcast.13989)
  %add.5621 = f32[32,128,256]{1,0,2} add(%divide.1402, %multiply.8299)
  %multiply.8300 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5621)
  %add.5622 = f32[32,128,256]{2,1,0} add(%param.182, %multiply.8300)
  %divide.1403 = f32[256,32,128]{0,2,1} divide(%transpose.430, %broadcast.14001)
  %select.3234 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.430, %divide.1403)
  %multiply.8301 = f32[256,32,128]{0,2,1} multiply(%select.3234, %broadcast.14002)
  %param.513 = f32[256,32,128]{2,1,0} parameter(400), sharding={devices=[16,1,1]<=[16]}
  %multiply.8302 = f32[256,32,128]{2,1,0} multiply(%param.513, %broadcast.14003)
  %add.5623 = f32[256,32,128]{0,2,1} add(%multiply.8301, %multiply.8302)
  %multiply.8303 = f32[256,32,128]{0,2,1} multiply(%select.3234, %select.3234)
  %multiply.8304 = f32[256,32,128]{0,2,1} multiply(%multiply.8303, %broadcast.14005)
  %param.514 = f32[256,32,128]{2,1,0} parameter(691), sharding={devices=[16,1,1]<=[16]}
  %multiply.8305 = f32[256,32,128]{2,1,0} multiply(%param.514, %broadcast.14006)
  %add.5624 = f32[256,32,128]{0,2,1} add(%multiply.8304, %multiply.8305)
  %divide.1404 = f32[256,32,128]{0,2,1} divide(%add.5624, %broadcast.14007)
  %sqrt.108 = f32[256,32,128]{0,2,1} sqrt(%divide.1404)
  %add.5625 = f32[256,32,128]{0,2,1} add(%sqrt.108, %broadcast.14008)
  %multiply.8306 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5625)
  %divide.1405 = f32[256,32,128]{0,2,1} divide(%add.5623, %multiply.8306)
  %multiply.8307 = f32[256,32,128]{2,1,0} multiply(%param.179, %broadcast.14002)
  %add.5626 = f32[256,32,128]{0,2,1} add(%divide.1405, %multiply.8307)
  %multiply.8308 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5626)
  %add.5627 = f32[256,32,128]{2,1,0} add(%param.179, %multiply.8308)
  %divide.1406 = f32[256,8,128]{0,2,1} divide(%transpose.431, %broadcast.13977)
  %select.3235 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.431, %divide.1406)
  %multiply.8309 = f32[256,8,128]{0,2,1} multiply(%select.3235, %broadcast.13978)
  %param.515 = f32[256,8,128]{2,1,0} parameter(401), sharding={devices=[16,1,1]<=[16]}
  %multiply.8310 = f32[256,8,128]{2,1,0} multiply(%param.515, %broadcast.13979)
  %add.5628 = f32[256,8,128]{0,2,1} add(%multiply.8309, %multiply.8310)
  %multiply.8311 = f32[256,8,128]{0,2,1} multiply(%select.3235, %select.3235)
  %multiply.8312 = f32[256,8,128]{0,2,1} multiply(%multiply.8311, %broadcast.13981)
  %param.516 = f32[256,8,128]{2,1,0} parameter(692), sharding={devices=[16,1,1]<=[16]}
  %multiply.8313 = f32[256,8,128]{2,1,0} multiply(%param.516, %broadcast.13982)
  %add.5629 = f32[256,8,128]{0,2,1} add(%multiply.8312, %multiply.8313)
  %divide.1407 = f32[256,8,128]{0,2,1} divide(%add.5629, %broadcast.13983)
  %sqrt.109 = f32[256,8,128]{0,2,1} sqrt(%divide.1407)
  %add.5630 = f32[256,8,128]{0,2,1} add(%sqrt.109, %broadcast.13984)
  %multiply.8314 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5630)
  %divide.1408 = f32[256,8,128]{0,2,1} divide(%add.5628, %multiply.8314)
  %multiply.8315 = f32[256,8,128]{2,1,0} multiply(%param.181, %broadcast.13978)
  %add.5631 = f32[256,8,128]{0,2,1} add(%divide.1408, %multiply.8315)
  %multiply.8316 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5631)
  %add.5632 = f32[256,8,128]{2,1,0} add(%param.181, %multiply.8316)
  %divide.1409 = f32[256,14336]{0,1} divide(%convert.3272, %broadcast.13938)
  %select.3236 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3272, %divide.1409)
  %multiply.8317 = f32[256,14336]{0,1} multiply(%select.3236, %broadcast.13940)
  %param.517 = f32[256,14336]{1,0} parameter(402), sharding={devices=[16,1]<=[16]}
  %multiply.8318 = f32[256,14336]{1,0} multiply(%param.517, %broadcast.13942)
  %add.5633 = f32[256,14336]{0,1} add(%multiply.8317, %multiply.8318)
  %multiply.8319 = f32[256,14336]{0,1} multiply(%select.3236, %select.3236)
  %multiply.8320 = f32[256,14336]{0,1} multiply(%multiply.8319, %broadcast.13945)
  %param.518 = f32[256,14336]{1,0} parameter(693), sharding={devices=[16,1]<=[16]}
  %multiply.8321 = f32[256,14336]{1,0} multiply(%param.518, %broadcast.13947)
  %add.5634 = f32[256,14336]{0,1} add(%multiply.8320, %multiply.8321)
  %divide.1410 = f32[256,14336]{0,1} divide(%add.5634, %broadcast.13948)
  %sqrt.110 = f32[256,14336]{0,1} sqrt(%divide.1410)
  %add.5635 = f32[256,14336]{0,1} add(%sqrt.110, %broadcast.13949)
  %multiply.8322 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5635)
  %divide.1411 = f32[256,14336]{0,1} divide(%add.5633, %multiply.8322)
  %multiply.8323 = f32[256,14336]{1,0} multiply(%param.31, %broadcast.13940)
  %add.5636 = f32[256,14336]{0,1} add(%divide.1411, %multiply.8323)
  %multiply.8324 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5636)
  %add.5637 = f32[256,14336]{1,0} add(%param.31, %multiply.8324)
  %divide.1412 = f32[256,14336]{0,1} divide(%convert.3274, %broadcast.13938)
  %select.3237 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3274, %divide.1412)
  %multiply.8325 = f32[256,14336]{0,1} multiply(%select.3237, %broadcast.13940)
  %param.519 = f32[256,14336]{1,0} parameter(403), sharding={devices=[16,1]<=[16]}
  %multiply.8326 = f32[256,14336]{1,0} multiply(%param.519, %broadcast.13942)
  %add.5638 = f32[256,14336]{0,1} add(%multiply.8325, %multiply.8326)
  %multiply.8327 = f32[256,14336]{0,1} multiply(%select.3237, %select.3237)
  %multiply.8328 = f32[256,14336]{0,1} multiply(%multiply.8327, %broadcast.13945)
  %param.520 = f32[256,14336]{1,0} parameter(694), sharding={devices=[16,1]<=[16]}
  %multiply.8329 = f32[256,14336]{1,0} multiply(%param.520, %broadcast.13947)
  %add.5639 = f32[256,14336]{0,1} add(%multiply.8328, %multiply.8329)
  %divide.1413 = f32[256,14336]{0,1} divide(%add.5639, %broadcast.13948)
  %sqrt.111 = f32[256,14336]{0,1} sqrt(%divide.1413)
  %add.5640 = f32[256,14336]{0,1} add(%sqrt.111, %broadcast.13949)
  %multiply.8330 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5640)
  %divide.1414 = f32[256,14336]{0,1} divide(%add.5638, %multiply.8330)
  %multiply.8331 = f32[256,14336]{1,0} multiply(%param.32, %broadcast.13940)
  %add.5641 = f32[256,14336]{0,1} add(%divide.1414, %multiply.8331)
  %multiply.8332 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5641)
  %add.5642 = f32[256,14336]{1,0} add(%param.32, %multiply.8332)
  %divide.1415 = f32[14336,256]{0,1} divide(%convert.3275, %broadcast.13957)
  %select.3238 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3275, %divide.1415)
  %multiply.8333 = f32[14336,256]{0,1} multiply(%select.3238, %broadcast.13958)
  %param.521 = f32[14336,256]{1,0} parameter(404), sharding={devices=[1,16]<=[16]}
  %multiply.8334 = f32[14336,256]{1,0} multiply(%param.521, %broadcast.13959)
  %add.5644 = f32[14336,256]{0,1} add(%multiply.8333, %multiply.8334)
  %multiply.8335 = f32[14336,256]{0,1} multiply(%select.3238, %select.3238)
  %multiply.8337 = f32[14336,256]{0,1} multiply(%multiply.8335, %broadcast.13961)
  %param.522 = f32[14336,256]{1,0} parameter(695), sharding={devices=[1,16]<=[16]}
  %multiply.8338 = f32[14336,256]{1,0} multiply(%param.522, %broadcast.13962)
  %add.5645 = f32[14336,256]{0,1} add(%multiply.8337, %multiply.8338)
  %divide.1416 = f32[14336,256]{0,1} divide(%add.5645, %broadcast.13963)
  %sqrt.112 = f32[14336,256]{0,1} sqrt(%divide.1416)
  %add.5646 = f32[14336,256]{0,1} add(%sqrt.112, %broadcast.13964)
  %multiply.8339 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5646)
  %divide.1417 = f32[14336,256]{0,1} divide(%add.5644, %multiply.8339)
  %multiply.8340 = f32[14336,256]{1,0} multiply(%param.33, %broadcast.13958)
  %add.5647 = f32[14336,256]{0,1} add(%divide.1417, %multiply.8340)
  %multiply.8341 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5647)
  %add.5648 = f32[14336,256]{1,0} add(%param.33, %multiply.8341)
  %divide.1418 = f32[4096]{0} divide(%convert.3276, %broadcast.13924)
  %select.3239 = f32[4096]{0} select(%broadcast.13923, %convert.3276, %divide.1418)
  %multiply.8342 = f32[4096]{0} multiply(%select.3239, %broadcast.13925)
  %param.523 = f32[4096]{0} parameter(405), sharding={replicated}
  %multiply.8343 = f32[4096]{0} multiply(%param.523, %broadcast.13926)
  %add.5649 = f32[4096]{0} add(%multiply.8342, %multiply.8343)
  %multiply.8344 = f32[4096]{0} multiply(%select.3239, %select.3239)
  %multiply.8345 = f32[4096]{0} multiply(%multiply.8344, %broadcast.13928)
  %param.524 = f32[4096]{0} parameter(696), sharding={replicated}
  %multiply.8346 = f32[4096]{0} multiply(%param.524, %broadcast.13929)
  %add.5650 = f32[4096]{0} add(%multiply.8345, %multiply.8346)
  %divide.1419 = f32[4096]{0} divide(%add.5650, %broadcast.13931)
  %sqrt.113 = f32[4096]{0} sqrt(%divide.1419)
  %add.5651 = f32[4096]{0} add(%sqrt.113, %broadcast.13934)
  %multiply.8347 = f32[4096]{0} multiply(%broadcast.13927, %add.5651)
  %divide.1420 = f32[4096]{0} divide(%add.5649, %multiply.8347)
  %multiply.8348 = f32[4096]{0} multiply(%param.30, %broadcast.13925)
  %add.5652 = f32[4096]{0} add(%divide.1420, %multiply.8348)
  %multiply.8350 = f32[4096]{0} multiply(%broadcast.7107, %add.5652)
  %add.5653 = f32[4096]{0} add(%param.30, %multiply.8350)
  %divide.1421 = f32[4096]{0} divide(%convert.3278, %broadcast.13924)
  %select.3240 = f32[4096]{0} select(%broadcast.13923, %convert.3278, %divide.1421)
  %multiply.8351 = f32[4096]{0} multiply(%select.3240, %broadcast.13925)
  %param.525 = f32[4096]{0} parameter(406), sharding={replicated}
  %multiply.8352 = f32[4096]{0} multiply(%param.525, %broadcast.13926)
  %add.5654 = f32[4096]{0} add(%multiply.8351, %multiply.8352)
  %multiply.8353 = f32[4096]{0} multiply(%select.3240, %select.3240)
  %multiply.8354 = f32[4096]{0} multiply(%multiply.8353, %broadcast.13928)
  %param.526 = f32[4096]{0} parameter(697), sharding={replicated}
  %multiply.8355 = f32[4096]{0} multiply(%param.526, %broadcast.13929)
  %add.5655 = f32[4096]{0} add(%multiply.8354, %multiply.8355)
  %divide.1422 = f32[4096]{0} divide(%add.5655, %broadcast.13931)
  %sqrt.114 = f32[4096]{0} sqrt(%divide.1422)
  %add.5656 = f32[4096]{0} add(%sqrt.114, %broadcast.13934)
  %multiply.8357 = f32[4096]{0} multiply(%broadcast.13927, %add.5656)
  %divide.1423 = f32[4096]{0} divide(%add.5654, %multiply.8357)
  %multiply.8358 = f32[4096]{0} multiply(%param.25, %broadcast.13925)
  %add.5657 = f32[4096]{0} add(%divide.1423, %multiply.8358)
  %multiply.8359 = f32[4096]{0} multiply(%broadcast.7107, %add.5657)
  %add.5658 = f32[4096]{0} add(%param.25, %multiply.8359)
  %divide.1424 = f32[256,8,128]{0,2,1} divide(%transpose.432, %broadcast.13977)
  %select.3241 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.432, %divide.1424)
  %multiply.8360 = f32[256,8,128]{0,2,1} multiply(%select.3241, %broadcast.13978)
  %param.527 = f32[256,8,128]{2,1,0} parameter(407), sharding={devices=[16,1,1]<=[16]}
  %multiply.8361 = f32[256,8,128]{2,1,0} multiply(%param.527, %broadcast.13979)
  %add.5659 = f32[256,8,128]{0,2,1} add(%multiply.8360, %multiply.8361)
  %multiply.8362 = f32[256,8,128]{0,2,1} multiply(%select.3241, %select.3241)
  %multiply.8363 = f32[256,8,128]{0,2,1} multiply(%multiply.8362, %broadcast.13981)
  %param.528 = f32[256,8,128]{2,1,0} parameter(698), sharding={devices=[16,1,1]<=[16]}
  %multiply.8364 = f32[256,8,128]{2,1,0} multiply(%param.528, %broadcast.13982)
  %add.5660 = f32[256,8,128]{0,2,1} add(%multiply.8363, %multiply.8364)
  %divide.1425 = f32[256,8,128]{0,2,1} divide(%add.5660, %broadcast.13983)
  %sqrt.115 = f32[256,8,128]{0,2,1} sqrt(%divide.1425)
  %add.5661 = f32[256,8,128]{0,2,1} add(%sqrt.115, %broadcast.13984)
  %multiply.8366 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5661)
  %divide.1427 = f32[256,8,128]{0,2,1} divide(%add.5659, %multiply.8366)
  %multiply.8367 = f32[256,8,128]{2,1,0} multiply(%param.27, %broadcast.13978)
  %add.5662 = f32[256,8,128]{0,2,1} add(%divide.1427, %multiply.8367)
  %multiply.8368 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5662)
  %add.5663 = f32[256,8,128]{2,1,0} add(%param.27, %multiply.8368)
  %divide.1428 = f32[32,128,256]{1,0,2} divide(%transpose.433, %broadcast.13987)
  %select.3242 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.433, %divide.1428)
  %multiply.8369 = f32[32,128,256]{1,0,2} multiply(%select.3242, %broadcast.13989)
  %param.529 = f32[32,128,256]{2,1,0} parameter(408), sharding={devices=[1,1,16]<=[16]}
  %multiply.8370 = f32[32,128,256]{2,1,0} multiply(%param.529, %broadcast.13991)
  %add.5664 = f32[32,128,256]{1,0,2} add(%multiply.8369, %multiply.8370)
  %multiply.8371 = f32[32,128,256]{1,0,2} multiply(%select.3242, %select.3242)
  %multiply.8372 = f32[32,128,256]{1,0,2} multiply(%multiply.8371, %broadcast.13993)
  %param.530 = f32[32,128,256]{2,1,0} parameter(699), sharding={devices=[1,1,16]<=[16]}
  %multiply.8373 = f32[32,128,256]{2,1,0} multiply(%param.530, %broadcast.13994)
  %add.5665 = f32[32,128,256]{1,0,2} add(%multiply.8372, %multiply.8373)
  %divide.1429 = f32[32,128,256]{1,0,2} divide(%add.5665, %broadcast.13996)
  %sqrt.116 = f32[32,128,256]{1,0,2} sqrt(%divide.1429)
  %add.5666 = f32[32,128,256]{1,0,2} add(%sqrt.116, %broadcast.13998)
  %multiply.8375 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5666)
  %divide.1432 = f32[32,128,256]{1,0,2} divide(%add.5664, %multiply.8375)
  %multiply.8376 = f32[32,128,256]{2,1,0} multiply(%param.29, %broadcast.13989)
  %add.5667 = f32[32,128,256]{1,0,2} add(%divide.1432, %multiply.8376)
  %multiply.8377 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5667)
  %add.5668 = f32[32,128,256]{2,1,0} add(%param.29, %multiply.8377)
  %divide.1433 = f32[256,32,128]{0,2,1} divide(%transpose.434, %broadcast.14001)
  %select.3243 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.434, %divide.1433)
  %multiply.8378 = f32[256,32,128]{0,2,1} multiply(%select.3243, %broadcast.14002)
  %param.531 = f32[256,32,128]{2,1,0} parameter(409), sharding={devices=[16,1,1]<=[16]}
  %multiply.8379 = f32[256,32,128]{2,1,0} multiply(%param.531, %broadcast.14003)
  %add.5669 = f32[256,32,128]{0,2,1} add(%multiply.8378, %multiply.8379)
  %multiply.8380 = f32[256,32,128]{0,2,1} multiply(%select.3243, %select.3243)
  %multiply.8381 = f32[256,32,128]{0,2,1} multiply(%multiply.8380, %broadcast.14005)
  %param.532 = f32[256,32,128]{2,1,0} parameter(700), sharding={devices=[16,1,1]<=[16]}
  %multiply.8382 = f32[256,32,128]{2,1,0} multiply(%param.532, %broadcast.14006)
  %add.5670 = f32[256,32,128]{0,2,1} add(%multiply.8381, %multiply.8382)
  %divide.1434 = f32[256,32,128]{0,2,1} divide(%add.5670, %broadcast.14007)
  %sqrt.117 = f32[256,32,128]{0,2,1} sqrt(%divide.1434)
  %add.5671 = f32[256,32,128]{0,2,1} add(%sqrt.117, %broadcast.14008)
  %multiply.8383 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5671)
  %divide.1435 = f32[256,32,128]{0,2,1} divide(%add.5669, %multiply.8383)
  %multiply.8384 = f32[256,32,128]{2,1,0} multiply(%param.26, %broadcast.14002)
  %add.5672 = f32[256,32,128]{0,2,1} add(%divide.1435, %multiply.8384)
  %multiply.8385 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5672)
  %add.5673 = f32[256,32,128]{2,1,0} add(%param.26, %multiply.8385)
  %divide.1437 = f32[256,8,128]{0,2,1} divide(%transpose.435, %broadcast.13977)
  %select.3244 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.435, %divide.1437)
  %multiply.8386 = f32[256,8,128]{0,2,1} multiply(%select.3244, %broadcast.13978)
  %param.533 = f32[256,8,128]{2,1,0} parameter(410), sharding={devices=[16,1,1]<=[16]}
  %multiply.8388 = f32[256,8,128]{2,1,0} multiply(%param.533, %broadcast.13979)
  %add.5674 = f32[256,8,128]{0,2,1} add(%multiply.8386, %multiply.8388)
  %multiply.8389 = f32[256,8,128]{0,2,1} multiply(%select.3244, %select.3244)
  %multiply.8390 = f32[256,8,128]{0,2,1} multiply(%multiply.8389, %broadcast.13981)
  %param.534 = f32[256,8,128]{2,1,0} parameter(701), sharding={devices=[16,1,1]<=[16]}
  %multiply.8391 = f32[256,8,128]{2,1,0} multiply(%param.534, %broadcast.13982)
  %add.5675 = f32[256,8,128]{0,2,1} add(%multiply.8390, %multiply.8391)
  %divide.1439 = f32[256,8,128]{0,2,1} divide(%add.5675, %broadcast.13983)
  %sqrt.118 = f32[256,8,128]{0,2,1} sqrt(%divide.1439)
  %add.5676 = f32[256,8,128]{0,2,1} add(%sqrt.118, %broadcast.13984)
  %multiply.8392 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5676)
  %divide.1440 = f32[256,8,128]{0,2,1} divide(%add.5674, %multiply.8392)
  %multiply.8393 = f32[256,8,128]{2,1,0} multiply(%param.28, %broadcast.13978)
  %add.5677 = f32[256,8,128]{0,2,1} add(%divide.1440, %multiply.8393)
  %multiply.8395 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5677)
  %add.5678 = f32[256,8,128]{2,1,0} add(%param.28, %multiply.8395)
  %divide.1442 = f32[256,14336]{0,1} divide(%convert.3284, %broadcast.13938)
  %select.3245 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3284, %divide.1442)
  %multiply.8396 = f32[256,14336]{0,1} multiply(%select.3245, %broadcast.13940)
  %param.535 = f32[256,14336]{1,0} parameter(411), sharding={devices=[16,1]<=[16]}
  %multiply.8397 = f32[256,14336]{1,0} multiply(%param.535, %broadcast.13942)
  %add.5679 = f32[256,14336]{0,1} add(%multiply.8396, %multiply.8397)
  %multiply.8398 = f32[256,14336]{0,1} multiply(%select.3245, %select.3245)
  %multiply.8399 = f32[256,14336]{0,1} multiply(%multiply.8398, %broadcast.13945)
  %param.536 = f32[256,14336]{1,0} parameter(702), sharding={devices=[16,1]<=[16]}
  %multiply.8400 = f32[256,14336]{1,0} multiply(%param.536, %broadcast.13947)
  %add.5680 = f32[256,14336]{0,1} add(%multiply.8399, %multiply.8400)
  %divide.1443 = f32[256,14336]{0,1} divide(%add.5680, %broadcast.13948)
  %sqrt.119 = f32[256,14336]{0,1} sqrt(%divide.1443)
  %add.5682 = f32[256,14336]{0,1} add(%sqrt.119, %broadcast.13949)
  %multiply.8401 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5682)
  %divide.1445 = f32[256,14336]{0,1} divide(%add.5679, %multiply.8401)
  %multiply.8402 = f32[256,14336]{1,0} multiply(%param.193, %broadcast.13940)
  %add.5683 = f32[256,14336]{0,1} add(%divide.1445, %multiply.8402)
  %multiply.8403 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5683)
  %add.5684 = f32[256,14336]{1,0} add(%param.193, %multiply.8403)
  %divide.1446 = f32[256,14336]{0,1} divide(%convert.3285, %broadcast.13938)
  %select.3246 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3285, %divide.1446)
  %multiply.8404 = f32[256,14336]{0,1} multiply(%select.3246, %broadcast.13940)
  %param.537 = f32[256,14336]{1,0} parameter(412), sharding={devices=[16,1]<=[16]}
  %multiply.8405 = f32[256,14336]{1,0} multiply(%param.537, %broadcast.13942)
  %add.5685 = f32[256,14336]{0,1} add(%multiply.8404, %multiply.8405)
  %multiply.8406 = f32[256,14336]{0,1} multiply(%select.3246, %select.3246)
  %multiply.8407 = f32[256,14336]{0,1} multiply(%multiply.8406, %broadcast.13945)
  %param.538 = f32[256,14336]{1,0} parameter(703), sharding={devices=[16,1]<=[16]}
  %multiply.8408 = f32[256,14336]{1,0} multiply(%param.538, %broadcast.13947)
  %add.5686 = f32[256,14336]{0,1} add(%multiply.8407, %multiply.8408)
  %divide.1447 = f32[256,14336]{0,1} divide(%add.5686, %broadcast.13948)
  %sqrt.120 = f32[256,14336]{0,1} sqrt(%divide.1447)
  %add.5687 = f32[256,14336]{0,1} add(%sqrt.120, %broadcast.13949)
  %multiply.8409 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5687)
  %divide.1448 = f32[256,14336]{0,1} divide(%add.5685, %multiply.8409)
  %multiply.8410 = f32[256,14336]{1,0} multiply(%param.194, %broadcast.13940)
  %add.5688 = f32[256,14336]{0,1} add(%divide.1448, %multiply.8410)
  %multiply.8411 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5688)
  %add.5689 = f32[256,14336]{1,0} add(%param.194, %multiply.8411)
  %divide.1450 = f32[14336,256]{0,1} divide(%convert.3286, %broadcast.13957)
  %select.3247 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3286, %divide.1450)
  %multiply.8412 = f32[14336,256]{0,1} multiply(%select.3247, %broadcast.13958)
  %param.539 = f32[14336,256]{1,0} parameter(413), sharding={devices=[1,16]<=[16]}
  %multiply.8413 = f32[14336,256]{1,0} multiply(%param.539, %broadcast.13959)
  %add.5690 = f32[14336,256]{0,1} add(%multiply.8412, %multiply.8413)
  %multiply.8414 = f32[14336,256]{0,1} multiply(%select.3247, %select.3247)
  %multiply.8415 = f32[14336,256]{0,1} multiply(%multiply.8414, %broadcast.13961)
  %param.540 = f32[14336,256]{1,0} parameter(704), sharding={devices=[1,16]<=[16]}
  %multiply.8416 = f32[14336,256]{1,0} multiply(%param.540, %broadcast.13962)
  %add.5691 = f32[14336,256]{0,1} add(%multiply.8415, %multiply.8416)
  %divide.1451 = f32[14336,256]{0,1} divide(%add.5691, %broadcast.13963)
  %sqrt.121 = f32[14336,256]{0,1} sqrt(%divide.1451)
  %add.5692 = f32[14336,256]{0,1} add(%sqrt.121, %broadcast.13964)
  %multiply.8417 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5692)
  %divide.1452 = f32[14336,256]{0,1} divide(%add.5690, %multiply.8417)
  %multiply.8418 = f32[14336,256]{1,0} multiply(%param.195, %broadcast.13958)
  %add.5693 = f32[14336,256]{0,1} add(%divide.1452, %multiply.8418)
  %multiply.8419 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5693)
  %add.5694 = f32[14336,256]{1,0} add(%param.195, %multiply.8419)
  %divide.1453 = f32[4096]{0} divide(%convert.3287, %broadcast.13924)
  %select.3248 = f32[4096]{0} select(%broadcast.13923, %convert.3287, %divide.1453)
  %multiply.8420 = f32[4096]{0} multiply(%select.3248, %broadcast.13925)
  %param.541 = f32[4096]{0} parameter(414), sharding={replicated}
  %multiply.8421 = f32[4096]{0} multiply(%param.541, %broadcast.13926)
  %add.5695 = f32[4096]{0} add(%multiply.8420, %multiply.8421)
  %multiply.8422 = f32[4096]{0} multiply(%select.3248, %select.3248)
  %multiply.8423 = f32[4096]{0} multiply(%multiply.8422, %broadcast.13928)
  %param.542 = f32[4096]{0} parameter(705), sharding={replicated}
  %multiply.8425 = f32[4096]{0} multiply(%param.542, %broadcast.13929)
  %add.5696 = f32[4096]{0} add(%multiply.8423, %multiply.8425)
  %divide.1454 = f32[4096]{0} divide(%add.5696, %broadcast.13931)
  %sqrt.122 = f32[4096]{0} sqrt(%divide.1454)
  %add.5697 = f32[4096]{0} add(%sqrt.122, %broadcast.13934)
  %multiply.8426 = f32[4096]{0} multiply(%broadcast.13927, %add.5697)
  %divide.1455 = f32[4096]{0} divide(%add.5695, %multiply.8426)
  %multiply.8427 = f32[4096]{0} multiply(%param.192, %broadcast.13925)
  %add.5698 = f32[4096]{0} add(%divide.1455, %multiply.8427)
  %multiply.8428 = f32[4096]{0} multiply(%broadcast.7107, %add.5698)
  %add.5699 = f32[4096]{0} add(%param.192, %multiply.8428)
  %divide.1456 = f32[4096]{0} divide(%convert.3289, %broadcast.13924)
  %select.3249 = f32[4096]{0} select(%broadcast.13923, %convert.3289, %divide.1456)
  %multiply.8429 = f32[4096]{0} multiply(%select.3249, %broadcast.13925)
  %param.543 = f32[4096]{0} parameter(415), sharding={replicated}
  %multiply.8430 = f32[4096]{0} multiply(%param.543, %broadcast.13926)
  %add.5700 = f32[4096]{0} add(%multiply.8429, %multiply.8430)
  %multiply.8431 = f32[4096]{0} multiply(%select.3249, %select.3249)
  %multiply.8432 = f32[4096]{0} multiply(%multiply.8431, %broadcast.13928)
  %param.544 = f32[4096]{0} parameter(706), sharding={replicated}
  %multiply.8433 = f32[4096]{0} multiply(%param.544, %broadcast.13929)
  %add.5701 = f32[4096]{0} add(%multiply.8432, %multiply.8433)
  %divide.1457 = f32[4096]{0} divide(%add.5701, %broadcast.13931)
  %sqrt.123 = f32[4096]{0} sqrt(%divide.1457)
  %add.5702 = f32[4096]{0} add(%sqrt.123, %broadcast.13934)
  %multiply.8434 = f32[4096]{0} multiply(%broadcast.13927, %add.5702)
  %divide.1459 = f32[4096]{0} divide(%add.5700, %multiply.8434)
  %multiply.8435 = f32[4096]{0} multiply(%param.187, %broadcast.13925)
  %add.5703 = f32[4096]{0} add(%divide.1459, %multiply.8435)
  %multiply.8436 = f32[4096]{0} multiply(%broadcast.7107, %add.5703)
  %add.5704 = f32[4096]{0} add(%param.187, %multiply.8436)
  %divide.1460 = f32[256,8,128]{0,2,1} divide(%transpose.436, %broadcast.13977)
  %select.3250 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.436, %divide.1460)
  %multiply.8437 = f32[256,8,128]{0,2,1} multiply(%select.3250, %broadcast.13978)
  %param.545 = f32[256,8,128]{2,1,0} parameter(416), sharding={devices=[16,1,1]<=[16]}
  %multiply.8438 = f32[256,8,128]{2,1,0} multiply(%param.545, %broadcast.13979)
  %add.5705 = f32[256,8,128]{0,2,1} add(%multiply.8437, %multiply.8438)
  %multiply.8439 = f32[256,8,128]{0,2,1} multiply(%select.3250, %select.3250)
  %multiply.8441 = f32[256,8,128]{0,2,1} multiply(%multiply.8439, %broadcast.13981)
  %param.546 = f32[256,8,128]{2,1,0} parameter(707), sharding={devices=[16,1,1]<=[16]}
  %multiply.8443 = f32[256,8,128]{2,1,0} multiply(%param.546, %broadcast.13982)
  %add.5706 = f32[256,8,128]{0,2,1} add(%multiply.8441, %multiply.8443)
  %divide.1461 = f32[256,8,128]{0,2,1} divide(%add.5706, %broadcast.13983)
  %sqrt.124 = f32[256,8,128]{0,2,1} sqrt(%divide.1461)
  %add.5707 = f32[256,8,128]{0,2,1} add(%sqrt.124, %broadcast.13984)
  %multiply.8444 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5707)
  %divide.1462 = f32[256,8,128]{0,2,1} divide(%add.5705, %multiply.8444)
  %multiply.8445 = f32[256,8,128]{2,1,0} multiply(%param.189, %broadcast.13978)
  %add.5708 = f32[256,8,128]{0,2,1} add(%divide.1462, %multiply.8445)
  %multiply.8446 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5708)
  %add.5709 = f32[256,8,128]{2,1,0} add(%param.189, %multiply.8446)
  %divide.1463 = f32[32,128,256]{1,0,2} divide(%transpose.437, %broadcast.13987)
  %select.3251 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.437, %divide.1463)
  %multiply.8447 = f32[32,128,256]{1,0,2} multiply(%select.3251, %broadcast.13989)
  %param.547 = f32[32,128,256]{2,1,0} parameter(417), sharding={devices=[1,1,16]<=[16]}
  %multiply.8448 = f32[32,128,256]{2,1,0} multiply(%param.547, %broadcast.13991)
  %add.5710 = f32[32,128,256]{1,0,2} add(%multiply.8447, %multiply.8448)
  %multiply.8449 = f32[32,128,256]{1,0,2} multiply(%select.3251, %select.3251)
  %multiply.8450 = f32[32,128,256]{1,0,2} multiply(%multiply.8449, %broadcast.13993)
  %param.548 = f32[32,128,256]{2,1,0} parameter(708), sharding={devices=[1,1,16]<=[16]}
  %multiply.8451 = f32[32,128,256]{2,1,0} multiply(%param.548, %broadcast.13994)
  %add.5711 = f32[32,128,256]{1,0,2} add(%multiply.8450, %multiply.8451)
  %divide.1464 = f32[32,128,256]{1,0,2} divide(%add.5711, %broadcast.13996)
  %sqrt.125 = f32[32,128,256]{1,0,2} sqrt(%divide.1464)
  %add.5712 = f32[32,128,256]{1,0,2} add(%sqrt.125, %broadcast.13998)
  %multiply.8452 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5712)
  %divide.1465 = f32[32,128,256]{1,0,2} divide(%add.5710, %multiply.8452)
  %multiply.8453 = f32[32,128,256]{2,1,0} multiply(%param.191, %broadcast.13989)
  %add.5713 = f32[32,128,256]{1,0,2} add(%divide.1465, %multiply.8453)
  %multiply.8454 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5713)
  %add.5714 = f32[32,128,256]{2,1,0} add(%param.191, %multiply.8454)
  %divide.1466 = f32[256,32,128]{0,2,1} divide(%transpose.438, %broadcast.14001)
  %select.3252 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.438, %divide.1466)
  %multiply.8455 = f32[256,32,128]{0,2,1} multiply(%select.3252, %broadcast.14002)
  %param.549 = f32[256,32,128]{2,1,0} parameter(418), sharding={devices=[16,1,1]<=[16]}
  %multiply.8456 = f32[256,32,128]{2,1,0} multiply(%param.549, %broadcast.14003)
  %add.5715 = f32[256,32,128]{0,2,1} add(%multiply.8455, %multiply.8456)
  %multiply.8457 = f32[256,32,128]{0,2,1} multiply(%select.3252, %select.3252)
  %multiply.8458 = f32[256,32,128]{0,2,1} multiply(%multiply.8457, %broadcast.14005)
  %param.550 = f32[256,32,128]{2,1,0} parameter(709), sharding={devices=[16,1,1]<=[16]}
  %multiply.8459 = f32[256,32,128]{2,1,0} multiply(%param.550, %broadcast.14006)
  %add.5716 = f32[256,32,128]{0,2,1} add(%multiply.8458, %multiply.8459)
  %divide.1467 = f32[256,32,128]{0,2,1} divide(%add.5716, %broadcast.14007)
  %sqrt.126 = f32[256,32,128]{0,2,1} sqrt(%divide.1467)
  %add.5717 = f32[256,32,128]{0,2,1} add(%sqrt.126, %broadcast.14008)
  %multiply.8460 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5717)
  %divide.1468 = f32[256,32,128]{0,2,1} divide(%add.5715, %multiply.8460)
  %multiply.8461 = f32[256,32,128]{2,1,0} multiply(%param.188, %broadcast.14002)
  %add.5718 = f32[256,32,128]{0,2,1} add(%divide.1468, %multiply.8461)
  %multiply.8462 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5718)
  %add.5720 = f32[256,32,128]{2,1,0} add(%param.188, %multiply.8462)
  %divide.1469 = f32[256,8,128]{0,2,1} divide(%transpose.439, %broadcast.13977)
  %select.3253 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.439, %divide.1469)
  %multiply.8463 = f32[256,8,128]{0,2,1} multiply(%select.3253, %broadcast.13978)
  %param.551 = f32[256,8,128]{2,1,0} parameter(419), sharding={devices=[16,1,1]<=[16]}
  %multiply.8464 = f32[256,8,128]{2,1,0} multiply(%param.551, %broadcast.13979)
  %add.5721 = f32[256,8,128]{0,2,1} add(%multiply.8463, %multiply.8464)
  %multiply.8465 = f32[256,8,128]{0,2,1} multiply(%select.3253, %select.3253)
  %multiply.8466 = f32[256,8,128]{0,2,1} multiply(%multiply.8465, %broadcast.13981)
  %param.552 = f32[256,8,128]{2,1,0} parameter(710), sharding={devices=[16,1,1]<=[16]}
  %multiply.8467 = f32[256,8,128]{2,1,0} multiply(%param.552, %broadcast.13982)
  %add.5722 = f32[256,8,128]{0,2,1} add(%multiply.8466, %multiply.8467)
  %divide.1470 = f32[256,8,128]{0,2,1} divide(%add.5722, %broadcast.13983)
  %sqrt.127 = f32[256,8,128]{0,2,1} sqrt(%divide.1470)
  %add.5723 = f32[256,8,128]{0,2,1} add(%sqrt.127, %broadcast.13984)
  %multiply.8468 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5723)
  %divide.1471 = f32[256,8,128]{0,2,1} divide(%add.5721, %multiply.8468)
  %multiply.8470 = f32[256,8,128]{2,1,0} multiply(%param.190, %broadcast.13978)
  %add.5724 = f32[256,8,128]{0,2,1} add(%divide.1471, %multiply.8470)
  %multiply.8471 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5724)
  %add.5725 = f32[256,8,128]{2,1,0} add(%param.190, %multiply.8471)
  %divide.1472 = f32[256,14336]{0,1} divide(%convert.3297, %broadcast.13938)
  %select.3254 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3297, %divide.1472)
  %multiply.8472 = f32[256,14336]{0,1} multiply(%select.3254, %broadcast.13940)
  %param.553 = f32[256,14336]{1,0} parameter(420), sharding={devices=[16,1]<=[16]}
  %multiply.8473 = f32[256,14336]{1,0} multiply(%param.553, %broadcast.13942)
  %add.5726 = f32[256,14336]{0,1} add(%multiply.8472, %multiply.8473)
  %multiply.8475 = f32[256,14336]{0,1} multiply(%select.3254, %select.3254)
  %multiply.8476 = f32[256,14336]{0,1} multiply(%multiply.8475, %broadcast.13945)
  %param.554 = f32[256,14336]{1,0} parameter(711), sharding={devices=[16,1]<=[16]}
  %multiply.8477 = f32[256,14336]{1,0} multiply(%param.554, %broadcast.13947)
  %add.5727 = f32[256,14336]{0,1} add(%multiply.8476, %multiply.8477)
  %divide.1473 = f32[256,14336]{0,1} divide(%add.5727, %broadcast.13948)
  %sqrt.128 = f32[256,14336]{0,1} sqrt(%divide.1473)
  %add.5728 = f32[256,14336]{0,1} add(%sqrt.128, %broadcast.13949)
  %multiply.8478 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5728)
  %divide.1474 = f32[256,14336]{0,1} divide(%add.5726, %multiply.8478)
  %multiply.8479 = f32[256,14336]{1,0} multiply(%param.202, %broadcast.13940)
  %add.5729 = f32[256,14336]{0,1} add(%divide.1474, %multiply.8479)
  %multiply.8481 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5729)
  %add.5730 = f32[256,14336]{1,0} add(%param.202, %multiply.8481)
  %divide.1475 = f32[256,14336]{0,1} divide(%convert.3298, %broadcast.13938)
  %select.3255 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3298, %divide.1475)
  %multiply.8482 = f32[256,14336]{0,1} multiply(%select.3255, %broadcast.13940)
  %param.555 = f32[256,14336]{1,0} parameter(421), sharding={devices=[16,1]<=[16]}
  %multiply.8483 = f32[256,14336]{1,0} multiply(%param.555, %broadcast.13942)
  %add.5731 = f32[256,14336]{0,1} add(%multiply.8482, %multiply.8483)
  %multiply.8484 = f32[256,14336]{0,1} multiply(%select.3255, %select.3255)
  %multiply.8485 = f32[256,14336]{0,1} multiply(%multiply.8484, %broadcast.13945)
  %param.556 = f32[256,14336]{1,0} parameter(712), sharding={devices=[16,1]<=[16]}
  %multiply.8486 = f32[256,14336]{1,0} multiply(%param.556, %broadcast.13947)
  %add.5732 = f32[256,14336]{0,1} add(%multiply.8485, %multiply.8486)
  %divide.1476 = f32[256,14336]{0,1} divide(%add.5732, %broadcast.13948)
  %sqrt.129 = f32[256,14336]{0,1} sqrt(%divide.1476)
  %add.5733 = f32[256,14336]{0,1} add(%sqrt.129, %broadcast.13949)
  %multiply.8487 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5733)
  %divide.1477 = f32[256,14336]{0,1} divide(%add.5731, %multiply.8487)
  %multiply.8488 = f32[256,14336]{1,0} multiply(%param.203, %broadcast.13940)
  %add.5734 = f32[256,14336]{0,1} add(%divide.1477, %multiply.8488)
  %multiply.8489 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5734)
  %add.5735 = f32[256,14336]{1,0} add(%param.203, %multiply.8489)
  %divide.1478 = f32[14336,256]{0,1} divide(%convert.3299, %broadcast.13957)
  %select.3256 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3299, %divide.1478)
  %multiply.8490 = f32[14336,256]{0,1} multiply(%select.3256, %broadcast.13958)
  %param.557 = f32[14336,256]{1,0} parameter(422), sharding={devices=[1,16]<=[16]}
  %multiply.8491 = f32[14336,256]{1,0} multiply(%param.557, %broadcast.13959)
  %add.5736 = f32[14336,256]{0,1} add(%multiply.8490, %multiply.8491)
  %multiply.8492 = f32[14336,256]{0,1} multiply(%select.3256, %select.3256)
  %multiply.8493 = f32[14336,256]{0,1} multiply(%multiply.8492, %broadcast.13961)
  %param.558 = f32[14336,256]{1,0} parameter(713), sharding={devices=[1,16]<=[16]}
  %multiply.8494 = f32[14336,256]{1,0} multiply(%param.558, %broadcast.13962)
  %add.5737 = f32[14336,256]{0,1} add(%multiply.8493, %multiply.8494)
  %divide.1479 = f32[14336,256]{0,1} divide(%add.5737, %broadcast.13963)
  %sqrt.130 = f32[14336,256]{0,1} sqrt(%divide.1479)
  %add.5738 = f32[14336,256]{0,1} add(%sqrt.130, %broadcast.13964)
  %multiply.8495 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5738)
  %divide.1480 = f32[14336,256]{0,1} divide(%add.5736, %multiply.8495)
  %multiply.8496 = f32[14336,256]{1,0} multiply(%param.204, %broadcast.13958)
  %add.5739 = f32[14336,256]{0,1} add(%divide.1480, %multiply.8496)
  %multiply.8497 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5739)
  %add.5740 = f32[14336,256]{1,0} add(%param.204, %multiply.8497)
  %divide.1481 = f32[4096]{0} divide(%convert.3300, %broadcast.13924)
  %select.3257 = f32[4096]{0} select(%broadcast.13923, %convert.3300, %divide.1481)
  %multiply.8498 = f32[4096]{0} multiply(%select.3257, %broadcast.13925)
  %param.559 = f32[4096]{0} parameter(423), sharding={replicated}
  %multiply.8499 = f32[4096]{0} multiply(%param.559, %broadcast.13926)
  %add.5741 = f32[4096]{0} add(%multiply.8498, %multiply.8499)
  %multiply.8501 = f32[4096]{0} multiply(%select.3257, %select.3257)
  %multiply.8502 = f32[4096]{0} multiply(%multiply.8501, %broadcast.13928)
  %param.560 = f32[4096]{0} parameter(714), sharding={replicated}
  %multiply.8503 = f32[4096]{0} multiply(%param.560, %broadcast.13929)
  %add.5742 = f32[4096]{0} add(%multiply.8502, %multiply.8503)
  %divide.1482 = f32[4096]{0} divide(%add.5742, %broadcast.13931)
  %sqrt.131 = f32[4096]{0} sqrt(%divide.1482)
  %add.5743 = f32[4096]{0} add(%sqrt.131, %broadcast.13934)
  %multiply.8504 = f32[4096]{0} multiply(%broadcast.13927, %add.5743)
  %divide.1483 = f32[4096]{0} divide(%add.5741, %multiply.8504)
  %multiply.8505 = f32[4096]{0} multiply(%param.201, %broadcast.13925)
  %add.5744 = f32[4096]{0} add(%divide.1483, %multiply.8505)
  %multiply.8506 = f32[4096]{0} multiply(%broadcast.7107, %add.5744)
  %add.5745 = f32[4096]{0} add(%param.201, %multiply.8506)
  %divide.1484 = f32[4096]{0} divide(%convert.3302, %broadcast.13924)
  %select.3258 = f32[4096]{0} select(%broadcast.13923, %convert.3302, %divide.1484)
  %multiply.8507 = f32[4096]{0} multiply(%select.3258, %broadcast.13925)
  %param.561 = f32[4096]{0} parameter(424), sharding={replicated}
  %multiply.8508 = f32[4096]{0} multiply(%param.561, %broadcast.13926)
  %add.5746 = f32[4096]{0} add(%multiply.8507, %multiply.8508)
  %multiply.8509 = f32[4096]{0} multiply(%select.3258, %select.3258)
  %multiply.8510 = f32[4096]{0} multiply(%multiply.8509, %broadcast.13928)
  %param.562 = f32[4096]{0} parameter(715), sharding={replicated}
  %multiply.8511 = f32[4096]{0} multiply(%param.562, %broadcast.13929)
  %add.5747 = f32[4096]{0} add(%multiply.8510, %multiply.8511)
  %divide.1485 = f32[4096]{0} divide(%add.5747, %broadcast.13931)
  %sqrt.132 = f32[4096]{0} sqrt(%divide.1485)
  %add.5748 = f32[4096]{0} add(%sqrt.132, %broadcast.13934)
  %multiply.8512 = f32[4096]{0} multiply(%broadcast.13927, %add.5748)
  %divide.1486 = f32[4096]{0} divide(%add.5746, %multiply.8512)
  %multiply.8513 = f32[4096]{0} multiply(%param.196, %broadcast.13925)
  %add.5749 = f32[4096]{0} add(%divide.1486, %multiply.8513)
  %multiply.8514 = f32[4096]{0} multiply(%broadcast.7107, %add.5749)
  %add.5750 = f32[4096]{0} add(%param.196, %multiply.8514)
  %divide.1487 = f32[256,8,128]{0,2,1} divide(%transpose.440, %broadcast.13977)
  %select.3259 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.440, %divide.1487)
  %multiply.8515 = f32[256,8,128]{0,2,1} multiply(%select.3259, %broadcast.13978)
  %param.563 = f32[256,8,128]{2,1,0} parameter(425), sharding={devices=[16,1,1]<=[16]}
  %multiply.8517 = f32[256,8,128]{2,1,0} multiply(%param.563, %broadcast.13979)
  %add.5751 = f32[256,8,128]{0,2,1} add(%multiply.8515, %multiply.8517)
  %multiply.8519 = f32[256,8,128]{0,2,1} multiply(%select.3259, %select.3259)
  %multiply.8520 = f32[256,8,128]{0,2,1} multiply(%multiply.8519, %broadcast.13981)
  %param.564 = f32[256,8,128]{2,1,0} parameter(716), sharding={devices=[16,1,1]<=[16]}
  %multiply.8521 = f32[256,8,128]{2,1,0} multiply(%param.564, %broadcast.13982)
  %add.5752 = f32[256,8,128]{0,2,1} add(%multiply.8520, %multiply.8521)
  %divide.1488 = f32[256,8,128]{0,2,1} divide(%add.5752, %broadcast.13983)
  %sqrt.133 = f32[256,8,128]{0,2,1} sqrt(%divide.1488)
  %add.5753 = f32[256,8,128]{0,2,1} add(%sqrt.133, %broadcast.13984)
  %multiply.8522 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5753)
  %divide.1489 = f32[256,8,128]{0,2,1} divide(%add.5751, %multiply.8522)
  %multiply.8523 = f32[256,8,128]{2,1,0} multiply(%param.198, %broadcast.13978)
  %add.5754 = f32[256,8,128]{0,2,1} add(%divide.1489, %multiply.8523)
  %multiply.8524 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5754)
  %add.5755 = f32[256,8,128]{2,1,0} add(%param.198, %multiply.8524)
  %divide.1490 = f32[32,128,256]{1,0,2} divide(%transpose.441, %broadcast.13987)
  %select.3260 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.441, %divide.1490)
  %multiply.8525 = f32[32,128,256]{1,0,2} multiply(%select.3260, %broadcast.13989)
  %param.565 = f32[32,128,256]{2,1,0} parameter(426), sharding={devices=[1,1,16]<=[16]}
  %multiply.8526 = f32[32,128,256]{2,1,0} multiply(%param.565, %broadcast.13991)
  %add.5756 = f32[32,128,256]{1,0,2} add(%multiply.8525, %multiply.8526)
  %multiply.8527 = f32[32,128,256]{1,0,2} multiply(%select.3260, %select.3260)
  %multiply.8528 = f32[32,128,256]{1,0,2} multiply(%multiply.8527, %broadcast.13993)
  %param.566 = f32[32,128,256]{2,1,0} parameter(717), sharding={devices=[1,1,16]<=[16]}
  %multiply.8529 = f32[32,128,256]{2,1,0} multiply(%param.566, %broadcast.13994)
  %add.5758 = f32[32,128,256]{1,0,2} add(%multiply.8528, %multiply.8529)
  %divide.1491 = f32[32,128,256]{1,0,2} divide(%add.5758, %broadcast.13996)
  %sqrt.134 = f32[32,128,256]{1,0,2} sqrt(%divide.1491)
  %add.5759 = f32[32,128,256]{1,0,2} add(%sqrt.134, %broadcast.13998)
  %multiply.8530 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5759)
  %divide.1492 = f32[32,128,256]{1,0,2} divide(%add.5756, %multiply.8530)
  %multiply.8531 = f32[32,128,256]{2,1,0} multiply(%param.200, %broadcast.13989)
  %add.5760 = f32[32,128,256]{1,0,2} add(%divide.1492, %multiply.8531)
  %multiply.8532 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5760)
  %add.5761 = f32[32,128,256]{2,1,0} add(%param.200, %multiply.8532)
  %divide.1493 = f32[256,32,128]{0,2,1} divide(%transpose.442, %broadcast.14001)
  %select.3261 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.442, %divide.1493)
  %multiply.8533 = f32[256,32,128]{0,2,1} multiply(%select.3261, %broadcast.14002)
  %param.567 = f32[256,32,128]{2,1,0} parameter(427), sharding={devices=[16,1,1]<=[16]}
  %multiply.8534 = f32[256,32,128]{2,1,0} multiply(%param.567, %broadcast.14003)
  %add.5762 = f32[256,32,128]{0,2,1} add(%multiply.8533, %multiply.8534)
  %multiply.8535 = f32[256,32,128]{0,2,1} multiply(%select.3261, %select.3261)
  %multiply.8536 = f32[256,32,128]{0,2,1} multiply(%multiply.8535, %broadcast.14005)
  %param.568 = f32[256,32,128]{2,1,0} parameter(718), sharding={devices=[16,1,1]<=[16]}
  %multiply.8537 = f32[256,32,128]{2,1,0} multiply(%param.568, %broadcast.14006)
  %add.5763 = f32[256,32,128]{0,2,1} add(%multiply.8536, %multiply.8537)
  %divide.1494 = f32[256,32,128]{0,2,1} divide(%add.5763, %broadcast.14007)
  %sqrt.135 = f32[256,32,128]{0,2,1} sqrt(%divide.1494)
  %add.5764 = f32[256,32,128]{0,2,1} add(%sqrt.135, %broadcast.14008)
  %multiply.8538 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5764)
  %divide.1495 = f32[256,32,128]{0,2,1} divide(%add.5762, %multiply.8538)
  %multiply.8539 = f32[256,32,128]{2,1,0} multiply(%param.197, %broadcast.14002)
  %add.5765 = f32[256,32,128]{0,2,1} add(%divide.1495, %multiply.8539)
  %multiply.8540 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5765)
  %add.5766 = f32[256,32,128]{2,1,0} add(%param.197, %multiply.8540)
  %divide.1496 = f32[256,8,128]{0,2,1} divide(%transpose.443, %broadcast.13977)
  %select.3262 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.443, %divide.1496)
  %multiply.8541 = f32[256,8,128]{0,2,1} multiply(%select.3262, %broadcast.13978)
  %param.569 = f32[256,8,128]{2,1,0} parameter(428), sharding={devices=[16,1,1]<=[16]}
  %multiply.8542 = f32[256,8,128]{2,1,0} multiply(%param.569, %broadcast.13979)
  %add.5767 = f32[256,8,128]{0,2,1} add(%multiply.8541, %multiply.8542)
  %multiply.8543 = f32[256,8,128]{0,2,1} multiply(%select.3262, %select.3262)
  %multiply.8544 = f32[256,8,128]{0,2,1} multiply(%multiply.8543, %broadcast.13981)
  %param.570 = f32[256,8,128]{2,1,0} parameter(719), sharding={devices=[16,1,1]<=[16]}
  %multiply.8546 = f32[256,8,128]{2,1,0} multiply(%param.570, %broadcast.13982)
  %add.5768 = f32[256,8,128]{0,2,1} add(%multiply.8544, %multiply.8546)
  %divide.1497 = f32[256,8,128]{0,2,1} divide(%add.5768, %broadcast.13983)
  %sqrt.136 = f32[256,8,128]{0,2,1} sqrt(%divide.1497)
  %add.5769 = f32[256,8,128]{0,2,1} add(%sqrt.136, %broadcast.13984)
  %multiply.8547 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5769)
  %divide.1498 = f32[256,8,128]{0,2,1} divide(%add.5767, %multiply.8547)
  %multiply.8548 = f32[256,8,128]{2,1,0} multiply(%param.199, %broadcast.13978)
  %add.5770 = f32[256,8,128]{0,2,1} add(%divide.1498, %multiply.8548)
  %multiply.8549 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5770)
  %add.5771 = f32[256,8,128]{2,1,0} add(%param.199, %multiply.8549)
  %divide.1499 = f32[256,14336]{0,1} divide(%convert.3308, %broadcast.13938)
  %select.3263 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3308, %divide.1499)
  %multiply.8551 = f32[256,14336]{0,1} multiply(%select.3263, %broadcast.13940)
  %param.571 = f32[256,14336]{1,0} parameter(429), sharding={devices=[16,1]<=[16]}
  %multiply.8552 = f32[256,14336]{1,0} multiply(%param.571, %broadcast.13942)
  %add.5772 = f32[256,14336]{0,1} add(%multiply.8551, %multiply.8552)
  %multiply.8553 = f32[256,14336]{0,1} multiply(%select.3263, %select.3263)
  %multiply.8554 = f32[256,14336]{0,1} multiply(%multiply.8553, %broadcast.13945)
  %param.572 = f32[256,14336]{1,0} parameter(720), sharding={devices=[16,1]<=[16]}
  %multiply.8555 = f32[256,14336]{1,0} multiply(%param.572, %broadcast.13947)
  %add.5773 = f32[256,14336]{0,1} add(%multiply.8554, %multiply.8555)
  %divide.1500 = f32[256,14336]{0,1} divide(%add.5773, %broadcast.13948)
  %sqrt.137 = f32[256,14336]{0,1} sqrt(%divide.1500)
  %add.5774 = f32[256,14336]{0,1} add(%sqrt.137, %broadcast.13949)
  %multiply.8557 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5774)
  %divide.1501 = f32[256,14336]{0,1} divide(%add.5772, %multiply.8557)
  %multiply.8558 = f32[256,14336]{1,0} multiply(%param.211, %broadcast.13940)
  %add.5775 = f32[256,14336]{0,1} add(%divide.1501, %multiply.8558)
  %multiply.8559 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5775)
  %add.5776 = f32[256,14336]{1,0} add(%param.211, %multiply.8559)
  %divide.1503 = f32[256,14336]{0,1} divide(%convert.3309, %broadcast.13938)
  %select.3264 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3309, %divide.1503)
  %multiply.8560 = f32[256,14336]{0,1} multiply(%select.3264, %broadcast.13940)
  %param.573 = f32[256,14336]{1,0} parameter(430), sharding={devices=[16,1]<=[16]}
  %multiply.8561 = f32[256,14336]{1,0} multiply(%param.573, %broadcast.13942)
  %add.5777 = f32[256,14336]{0,1} add(%multiply.8560, %multiply.8561)
  %multiply.8562 = f32[256,14336]{0,1} multiply(%select.3264, %select.3264)
  %multiply.8563 = f32[256,14336]{0,1} multiply(%multiply.8562, %broadcast.13945)
  %param.574 = f32[256,14336]{1,0} parameter(721), sharding={devices=[16,1]<=[16]}
  %multiply.8564 = f32[256,14336]{1,0} multiply(%param.574, %broadcast.13947)
  %add.5778 = f32[256,14336]{0,1} add(%multiply.8563, %multiply.8564)
  %divide.1504 = f32[256,14336]{0,1} divide(%add.5778, %broadcast.13948)
  %sqrt.138 = f32[256,14336]{0,1} sqrt(%divide.1504)
  %add.5779 = f32[256,14336]{0,1} add(%sqrt.138, %broadcast.13949)
  %multiply.8565 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5779)
  %divide.1505 = f32[256,14336]{0,1} divide(%add.5777, %multiply.8565)
  %multiply.8566 = f32[256,14336]{1,0} multiply(%param.212, %broadcast.13940)
  %add.5780 = f32[256,14336]{0,1} add(%divide.1505, %multiply.8566)
  %multiply.8567 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5780)
  %add.5781 = f32[256,14336]{1,0} add(%param.212, %multiply.8567)
  %divide.1508 = f32[14336,256]{0,1} divide(%convert.3312, %broadcast.13957)
  %select.3265 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3312, %divide.1508)
  %multiply.8568 = f32[14336,256]{0,1} multiply(%select.3265, %broadcast.13958)
  %param.575 = f32[14336,256]{1,0} parameter(431), sharding={devices=[1,16]<=[16]}
  %multiply.8569 = f32[14336,256]{1,0} multiply(%param.575, %broadcast.13959)
  %add.5782 = f32[14336,256]{0,1} add(%multiply.8568, %multiply.8569)
  %multiply.8570 = f32[14336,256]{0,1} multiply(%select.3265, %select.3265)
  %multiply.8571 = f32[14336,256]{0,1} multiply(%multiply.8570, %broadcast.13961)
  %param.576 = f32[14336,256]{1,0} parameter(722), sharding={devices=[1,16]<=[16]}
  %multiply.8572 = f32[14336,256]{1,0} multiply(%param.576, %broadcast.13962)
  %add.5783 = f32[14336,256]{0,1} add(%multiply.8571, %multiply.8572)
  %divide.1509 = f32[14336,256]{0,1} divide(%add.5783, %broadcast.13963)
  %sqrt.139 = f32[14336,256]{0,1} sqrt(%divide.1509)
  %add.5784 = f32[14336,256]{0,1} add(%sqrt.139, %broadcast.13964)
  %multiply.8573 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5784)
  %divide.1510 = f32[14336,256]{0,1} divide(%add.5782, %multiply.8573)
  %multiply.8574 = f32[14336,256]{1,0} multiply(%param.213, %broadcast.13958)
  %add.5785 = f32[14336,256]{0,1} add(%divide.1510, %multiply.8574)
  %multiply.8575 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5785)
  %add.5786 = f32[14336,256]{1,0} add(%param.213, %multiply.8575)
  %divide.1511 = f32[4096]{0} divide(%convert.3313, %broadcast.13924)
  %select.3266 = f32[4096]{0} select(%broadcast.13923, %convert.3313, %divide.1511)
  %multiply.8576 = f32[4096]{0} multiply(%select.3266, %broadcast.13925)
  %param.577 = f32[4096]{0} parameter(432), sharding={replicated}
  %multiply.8577 = f32[4096]{0} multiply(%param.577, %broadcast.13926)
  %add.5787 = f32[4096]{0} add(%multiply.8576, %multiply.8577)
  %multiply.8578 = f32[4096]{0} multiply(%select.3266, %select.3266)
  %multiply.8579 = f32[4096]{0} multiply(%multiply.8578, %broadcast.13928)
  %param.578 = f32[4096]{0} parameter(723), sharding={replicated}
  %multiply.8580 = f32[4096]{0} multiply(%param.578, %broadcast.13929)
  %add.5789 = f32[4096]{0} add(%multiply.8579, %multiply.8580)
  %divide.1513 = f32[4096]{0} divide(%add.5789, %broadcast.13931)
  %sqrt.140 = f32[4096]{0} sqrt(%divide.1513)
  %add.5790 = f32[4096]{0} add(%sqrt.140, %broadcast.13934)
  %multiply.8581 = f32[4096]{0} multiply(%broadcast.13927, %add.5790)
  %divide.1515 = f32[4096]{0} divide(%add.5787, %multiply.8581)
  %multiply.8582 = f32[4096]{0} multiply(%param.210, %broadcast.13925)
  %add.5791 = f32[4096]{0} add(%divide.1515, %multiply.8582)
  %multiply.8583 = f32[4096]{0} multiply(%broadcast.7107, %add.5791)
  %add.5792 = f32[4096]{0} add(%param.210, %multiply.8583)
  %divide.1516 = f32[4096]{0} divide(%convert.3315, %broadcast.13924)
  %select.3267 = f32[4096]{0} select(%broadcast.13923, %convert.3315, %divide.1516)
  %multiply.8584 = f32[4096]{0} multiply(%select.3267, %broadcast.13925)
  %param.579 = f32[4096]{0} parameter(433), sharding={replicated}
  %multiply.8585 = f32[4096]{0} multiply(%param.579, %broadcast.13926)
  %add.5793 = f32[4096]{0} add(%multiply.8584, %multiply.8585)
  %multiply.8586 = f32[4096]{0} multiply(%select.3267, %select.3267)
  %multiply.8587 = f32[4096]{0} multiply(%multiply.8586, %broadcast.13928)
  %param.580 = f32[4096]{0} parameter(724), sharding={replicated}
  %multiply.8588 = f32[4096]{0} multiply(%param.580, %broadcast.13929)
  %add.5794 = f32[4096]{0} add(%multiply.8587, %multiply.8588)
  %divide.1518 = f32[4096]{0} divide(%add.5794, %broadcast.13931)
  %sqrt.141 = f32[4096]{0} sqrt(%divide.1518)
  %add.5795 = f32[4096]{0} add(%sqrt.141, %broadcast.13934)
  %multiply.8589 = f32[4096]{0} multiply(%broadcast.13927, %add.5795)
  %divide.1519 = f32[4096]{0} divide(%add.5793, %multiply.8589)
  %multiply.8590 = f32[4096]{0} multiply(%param.205, %broadcast.13925)
  %add.5797 = f32[4096]{0} add(%divide.1519, %multiply.8590)
  %multiply.8591 = f32[4096]{0} multiply(%broadcast.7107, %add.5797)
  %add.5798 = f32[4096]{0} add(%param.205, %multiply.8591)
  %divide.1521 = f32[256,8,128]{0,2,1} divide(%transpose.444, %broadcast.13977)
  %select.3268 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.444, %divide.1521)
  %multiply.8592 = f32[256,8,128]{0,2,1} multiply(%select.3268, %broadcast.13978)
  %param.581 = f32[256,8,128]{2,1,0} parameter(434), sharding={devices=[16,1,1]<=[16]}
  %multiply.8593 = f32[256,8,128]{2,1,0} multiply(%param.581, %broadcast.13979)
  %add.5799 = f32[256,8,128]{0,2,1} add(%multiply.8592, %multiply.8593)
  %multiply.8594 = f32[256,8,128]{0,2,1} multiply(%select.3268, %select.3268)
  %multiply.8595 = f32[256,8,128]{0,2,1} multiply(%multiply.8594, %broadcast.13981)
  %param.582 = f32[256,8,128]{2,1,0} parameter(725), sharding={devices=[16,1,1]<=[16]}
  %multiply.8596 = f32[256,8,128]{2,1,0} multiply(%param.582, %broadcast.13982)
  %add.5800 = f32[256,8,128]{0,2,1} add(%multiply.8595, %multiply.8596)
  %divide.1522 = f32[256,8,128]{0,2,1} divide(%add.5800, %broadcast.13983)
  %sqrt.142 = f32[256,8,128]{0,2,1} sqrt(%divide.1522)
  %add.5801 = f32[256,8,128]{0,2,1} add(%sqrt.142, %broadcast.13984)
  %multiply.8597 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5801)
  %divide.1523 = f32[256,8,128]{0,2,1} divide(%add.5799, %multiply.8597)
  %multiply.8598 = f32[256,8,128]{2,1,0} multiply(%param.207, %broadcast.13978)
  %add.5802 = f32[256,8,128]{0,2,1} add(%divide.1523, %multiply.8598)
  %multiply.8599 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5802)
  %add.5803 = f32[256,8,128]{2,1,0} add(%param.207, %multiply.8599)
  %divide.1524 = f32[32,128,256]{1,0,2} divide(%transpose.445, %broadcast.13987)
  %select.3269 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.445, %divide.1524)
  %multiply.8600 = f32[32,128,256]{1,0,2} multiply(%select.3269, %broadcast.13989)
  %param.583 = f32[32,128,256]{2,1,0} parameter(435), sharding={devices=[1,1,16]<=[16]}
  %multiply.8601 = f32[32,128,256]{2,1,0} multiply(%param.583, %broadcast.13991)
  %add.5804 = f32[32,128,256]{1,0,2} add(%multiply.8600, %multiply.8601)
  %multiply.8602 = f32[32,128,256]{1,0,2} multiply(%select.3269, %select.3269)
  %multiply.8603 = f32[32,128,256]{1,0,2} multiply(%multiply.8602, %broadcast.13993)
  %param.584 = f32[32,128,256]{2,1,0} parameter(726), sharding={devices=[1,1,16]<=[16]}
  %multiply.8604 = f32[32,128,256]{2,1,0} multiply(%param.584, %broadcast.13994)
  %add.5805 = f32[32,128,256]{1,0,2} add(%multiply.8603, %multiply.8604)
  %divide.1526 = f32[32,128,256]{1,0,2} divide(%add.5805, %broadcast.13996)
  %sqrt.143 = f32[32,128,256]{1,0,2} sqrt(%divide.1526)
  %add.5806 = f32[32,128,256]{1,0,2} add(%sqrt.143, %broadcast.13998)
  %multiply.8605 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5806)
  %divide.1527 = f32[32,128,256]{1,0,2} divide(%add.5804, %multiply.8605)
  %multiply.8606 = f32[32,128,256]{2,1,0} multiply(%param.209, %broadcast.13989)
  %add.5807 = f32[32,128,256]{1,0,2} add(%divide.1527, %multiply.8606)
  %multiply.8607 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5807)
  %add.5808 = f32[32,128,256]{2,1,0} add(%param.209, %multiply.8607)
  %divide.1528 = f32[256,32,128]{0,2,1} divide(%transpose.446, %broadcast.14001)
  %select.3270 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.446, %divide.1528)
  %multiply.8608 = f32[256,32,128]{0,2,1} multiply(%select.3270, %broadcast.14002)
  %param.585 = f32[256,32,128]{2,1,0} parameter(436), sharding={devices=[16,1,1]<=[16]}
  %multiply.8609 = f32[256,32,128]{2,1,0} multiply(%param.585, %broadcast.14003)
  %add.5809 = f32[256,32,128]{0,2,1} add(%multiply.8608, %multiply.8609)
  %multiply.8610 = f32[256,32,128]{0,2,1} multiply(%select.3270, %select.3270)
  %multiply.8611 = f32[256,32,128]{0,2,1} multiply(%multiply.8610, %broadcast.14005)
  %param.586 = f32[256,32,128]{2,1,0} parameter(727), sharding={devices=[16,1,1]<=[16]}
  %multiply.8612 = f32[256,32,128]{2,1,0} multiply(%param.586, %broadcast.14006)
  %add.5810 = f32[256,32,128]{0,2,1} add(%multiply.8611, %multiply.8612)
  %divide.1529 = f32[256,32,128]{0,2,1} divide(%add.5810, %broadcast.14007)
  %sqrt.144 = f32[256,32,128]{0,2,1} sqrt(%divide.1529)
  %add.5811 = f32[256,32,128]{0,2,1} add(%sqrt.144, %broadcast.14008)
  %multiply.8613 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5811)
  %divide.1530 = f32[256,32,128]{0,2,1} divide(%add.5809, %multiply.8613)
  %multiply.8614 = f32[256,32,128]{2,1,0} multiply(%param.206, %broadcast.14002)
  %add.5812 = f32[256,32,128]{0,2,1} add(%divide.1530, %multiply.8614)
  %multiply.8615 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5812)
  %add.5813 = f32[256,32,128]{2,1,0} add(%param.206, %multiply.8615)
  %divide.1531 = f32[256,8,128]{0,2,1} divide(%transpose.447, %broadcast.13977)
  %select.3271 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.447, %divide.1531)
  %multiply.8617 = f32[256,8,128]{0,2,1} multiply(%select.3271, %broadcast.13978)
  %param.587 = f32[256,8,128]{2,1,0} parameter(437), sharding={devices=[16,1,1]<=[16]}
  %multiply.8618 = f32[256,8,128]{2,1,0} multiply(%param.587, %broadcast.13979)
  %add.5815 = f32[256,8,128]{0,2,1} add(%multiply.8617, %multiply.8618)
  %multiply.8619 = f32[256,8,128]{0,2,1} multiply(%select.3271, %select.3271)
  %multiply.8620 = f32[256,8,128]{0,2,1} multiply(%multiply.8619, %broadcast.13981)
  %param.588 = f32[256,8,128]{2,1,0} parameter(728), sharding={devices=[16,1,1]<=[16]}
  %multiply.8621 = f32[256,8,128]{2,1,0} multiply(%param.588, %broadcast.13982)
  %add.5816 = f32[256,8,128]{0,2,1} add(%multiply.8620, %multiply.8621)
  %divide.1532 = f32[256,8,128]{0,2,1} divide(%add.5816, %broadcast.13983)
  %sqrt.145 = f32[256,8,128]{0,2,1} sqrt(%divide.1532)
  %add.5817 = f32[256,8,128]{0,2,1} add(%sqrt.145, %broadcast.13984)
  %multiply.8622 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5817)
  %divide.1533 = f32[256,8,128]{0,2,1} divide(%add.5815, %multiply.8622)
  %multiply.8623 = f32[256,8,128]{2,1,0} multiply(%param.208, %broadcast.13978)
  %add.5818 = f32[256,8,128]{0,2,1} add(%divide.1533, %multiply.8623)
  %multiply.8624 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5818)
  %add.5820 = f32[256,8,128]{2,1,0} add(%param.208, %multiply.8624)
  %divide.1535 = f32[256,14336]{0,1} divide(%convert.3323, %broadcast.13938)
  %select.3272 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3323, %divide.1535)
  %multiply.8625 = f32[256,14336]{0,1} multiply(%select.3272, %broadcast.13940)
  %param.589 = f32[256,14336]{1,0} parameter(438), sharding={devices=[16,1]<=[16]}
  %multiply.8626 = f32[256,14336]{1,0} multiply(%param.589, %broadcast.13942)
  %add.5821 = f32[256,14336]{0,1} add(%multiply.8625, %multiply.8626)
  %multiply.8627 = f32[256,14336]{0,1} multiply(%select.3272, %select.3272)
  %multiply.8628 = f32[256,14336]{0,1} multiply(%multiply.8627, %broadcast.13945)
  %param.590 = f32[256,14336]{1,0} parameter(729), sharding={devices=[16,1]<=[16]}
  %multiply.8630 = f32[256,14336]{1,0} multiply(%param.590, %broadcast.13947)
  %add.5822 = f32[256,14336]{0,1} add(%multiply.8628, %multiply.8630)
  %divide.1536 = f32[256,14336]{0,1} divide(%add.5822, %broadcast.13948)
  %sqrt.146 = f32[256,14336]{0,1} sqrt(%divide.1536)
  %add.5823 = f32[256,14336]{0,1} add(%sqrt.146, %broadcast.13949)
  %multiply.8631 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5823)
  %divide.1537 = f32[256,14336]{0,1} divide(%add.5821, %multiply.8631)
  %multiply.8632 = f32[256,14336]{1,0} multiply(%param.220, %broadcast.13940)
  %add.5825 = f32[256,14336]{0,1} add(%divide.1537, %multiply.8632)
  %multiply.8633 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5825)
  %add.5826 = f32[256,14336]{1,0} add(%param.220, %multiply.8633)
  %divide.1538 = f32[256,14336]{0,1} divide(%convert.3324, %broadcast.13938)
  %select.3273 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3324, %divide.1538)
  %multiply.8634 = f32[256,14336]{0,1} multiply(%select.3273, %broadcast.13940)
  %param.591 = f32[256,14336]{1,0} parameter(439), sharding={devices=[16,1]<=[16]}
  %multiply.8635 = f32[256,14336]{1,0} multiply(%param.591, %broadcast.13942)
  %add.5827 = f32[256,14336]{0,1} add(%multiply.8634, %multiply.8635)
  %multiply.8637 = f32[256,14336]{0,1} multiply(%select.3273, %select.3273)
  %multiply.8638 = f32[256,14336]{0,1} multiply(%multiply.8637, %broadcast.13945)
  %param.592 = f32[256,14336]{1,0} parameter(730), sharding={devices=[16,1]<=[16]}
  %multiply.8639 = f32[256,14336]{1,0} multiply(%param.592, %broadcast.13947)
  %add.5828 = f32[256,14336]{0,1} add(%multiply.8638, %multiply.8639)
  %divide.1539 = f32[256,14336]{0,1} divide(%add.5828, %broadcast.13948)
  %sqrt.147 = f32[256,14336]{0,1} sqrt(%divide.1539)
  %add.5829 = f32[256,14336]{0,1} add(%sqrt.147, %broadcast.13949)
  %multiply.8640 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5829)
  %divide.1540 = f32[256,14336]{0,1} divide(%add.5827, %multiply.8640)
  %multiply.8641 = f32[256,14336]{1,0} multiply(%param.221, %broadcast.13940)
  %add.5830 = f32[256,14336]{0,1} add(%divide.1540, %multiply.8641)
  %multiply.8642 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5830)
  %add.5831 = f32[256,14336]{1,0} add(%param.221, %multiply.8642)
  %divide.1541 = f32[14336,256]{0,1} divide(%convert.3325, %broadcast.13957)
  %select.3274 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3325, %divide.1541)
  %multiply.8643 = f32[14336,256]{0,1} multiply(%select.3274, %broadcast.13958)
  %param.593 = f32[14336,256]{1,0} parameter(440), sharding={devices=[1,16]<=[16]}
  %multiply.8644 = f32[14336,256]{1,0} multiply(%param.593, %broadcast.13959)
  %add.5832 = f32[14336,256]{0,1} add(%multiply.8643, %multiply.8644)
  %multiply.8646 = f32[14336,256]{0,1} multiply(%select.3274, %select.3274)
  %multiply.8647 = f32[14336,256]{0,1} multiply(%multiply.8646, %broadcast.13961)
  %param.594 = f32[14336,256]{1,0} parameter(731), sharding={devices=[1,16]<=[16]}
  %multiply.8648 = f32[14336,256]{1,0} multiply(%param.594, %broadcast.13962)
  %add.5833 = f32[14336,256]{0,1} add(%multiply.8647, %multiply.8648)
  %divide.1542 = f32[14336,256]{0,1} divide(%add.5833, %broadcast.13963)
  %sqrt.148 = f32[14336,256]{0,1} sqrt(%divide.1542)
  %add.5834 = f32[14336,256]{0,1} add(%sqrt.148, %broadcast.13964)
  %multiply.8649 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5834)
  %divide.1543 = f32[14336,256]{0,1} divide(%add.5832, %multiply.8649)
  %multiply.8650 = f32[14336,256]{1,0} multiply(%param.222, %broadcast.13958)
  %add.5835 = f32[14336,256]{0,1} add(%divide.1543, %multiply.8650)
  %multiply.8651 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5835)
  %add.5836 = f32[14336,256]{1,0} add(%param.222, %multiply.8651)
  %divide.1544 = f32[4096]{0} divide(%convert.3326, %broadcast.13924)
  %select.3275 = f32[4096]{0} select(%broadcast.13923, %convert.3326, %divide.1544)
  %multiply.8652 = f32[4096]{0} multiply(%select.3275, %broadcast.13925)
  %param.595 = f32[4096]{0} parameter(441), sharding={replicated}
  %multiply.8653 = f32[4096]{0} multiply(%param.595, %broadcast.13926)
  %add.5837 = f32[4096]{0} add(%multiply.8652, %multiply.8653)
  %multiply.8655 = f32[4096]{0} multiply(%select.3275, %select.3275)
  %multiply.8656 = f32[4096]{0} multiply(%multiply.8655, %broadcast.13928)
  %param.596 = f32[4096]{0} parameter(732), sharding={replicated}
  %multiply.8657 = f32[4096]{0} multiply(%param.596, %broadcast.13929)
  %add.5838 = f32[4096]{0} add(%multiply.8656, %multiply.8657)
  %divide.1545 = f32[4096]{0} divide(%add.5838, %broadcast.13931)
  %sqrt.149 = f32[4096]{0} sqrt(%divide.1545)
  %add.5839 = f32[4096]{0} add(%sqrt.149, %broadcast.13934)
  %multiply.8658 = f32[4096]{0} multiply(%broadcast.13927, %add.5839)
  %divide.1546 = f32[4096]{0} divide(%add.5837, %multiply.8658)
  %multiply.8659 = f32[4096]{0} multiply(%param.219, %broadcast.13925)
  %add.5840 = f32[4096]{0} add(%divide.1546, %multiply.8659)
  %multiply.8660 = f32[4096]{0} multiply(%broadcast.7107, %add.5840)
  %add.5841 = f32[4096]{0} add(%param.219, %multiply.8660)
  %divide.1547 = f32[4096]{0} divide(%convert.3329, %broadcast.13924)
  %select.3276 = f32[4096]{0} select(%broadcast.13923, %convert.3329, %divide.1547)
  %multiply.8661 = f32[4096]{0} multiply(%select.3276, %broadcast.13925)
  %param.597 = f32[4096]{0} parameter(442), sharding={replicated}
  %multiply.8662 = f32[4096]{0} multiply(%param.597, %broadcast.13926)
  %add.5842 = f32[4096]{0} add(%multiply.8661, %multiply.8662)
  %multiply.8663 = f32[4096]{0} multiply(%select.3276, %select.3276)
  %multiply.8664 = f32[4096]{0} multiply(%multiply.8663, %broadcast.13928)
  %param.598 = f32[4096]{0} parameter(733), sharding={replicated}
  %multiply.8665 = f32[4096]{0} multiply(%param.598, %broadcast.13929)
  %add.5843 = f32[4096]{0} add(%multiply.8664, %multiply.8665)
  %divide.1548 = f32[4096]{0} divide(%add.5843, %broadcast.13931)
  %sqrt.150 = f32[4096]{0} sqrt(%divide.1548)
  %add.5844 = f32[4096]{0} add(%sqrt.150, %broadcast.13934)
  %multiply.8666 = f32[4096]{0} multiply(%broadcast.13927, %add.5844)
  %divide.1549 = f32[4096]{0} divide(%add.5842, %multiply.8666)
  %multiply.8668 = f32[4096]{0} multiply(%param.214, %broadcast.13925)
  %add.5845 = f32[4096]{0} add(%divide.1549, %multiply.8668)
  %multiply.8669 = f32[4096]{0} multiply(%broadcast.7107, %add.5845)
  %add.5846 = f32[4096]{0} add(%param.214, %multiply.8669)
  %divide.1550 = f32[256,8,128]{0,2,1} divide(%transpose.448, %broadcast.13977)
  %select.3277 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.448, %divide.1550)
  %multiply.8670 = f32[256,8,128]{0,2,1} multiply(%select.3277, %broadcast.13978)
  %param.599 = f32[256,8,128]{2,1,0} parameter(443), sharding={devices=[16,1,1]<=[16]}
  %multiply.8671 = f32[256,8,128]{2,1,0} multiply(%param.599, %broadcast.13979)
  %add.5847 = f32[256,8,128]{0,2,1} add(%multiply.8670, %multiply.8671)
  %multiply.8672 = f32[256,8,128]{0,2,1} multiply(%select.3277, %select.3277)
  %multiply.8673 = f32[256,8,128]{0,2,1} multiply(%multiply.8672, %broadcast.13981)
  %param.600 = f32[256,8,128]{2,1,0} parameter(734), sharding={devices=[16,1,1]<=[16]}
  %multiply.8675 = f32[256,8,128]{2,1,0} multiply(%param.600, %broadcast.13982)
  %add.5848 = f32[256,8,128]{0,2,1} add(%multiply.8673, %multiply.8675)
  %divide.1551 = f32[256,8,128]{0,2,1} divide(%add.5848, %broadcast.13983)
  %sqrt.151 = f32[256,8,128]{0,2,1} sqrt(%divide.1551)
  %add.5849 = f32[256,8,128]{0,2,1} add(%sqrt.151, %broadcast.13984)
  %multiply.8676 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5849)
  %divide.1552 = f32[256,8,128]{0,2,1} divide(%add.5847, %multiply.8676)
  %multiply.8677 = f32[256,8,128]{2,1,0} multiply(%param.216, %broadcast.13978)
  %add.5851 = f32[256,8,128]{0,2,1} add(%divide.1552, %multiply.8677)
  %multiply.8678 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5851)
  %add.5852 = f32[256,8,128]{2,1,0} add(%param.216, %multiply.8678)
  %divide.1553 = f32[32,128,256]{1,0,2} divide(%transpose.449, %broadcast.13987)
  %select.3278 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.449, %divide.1553)
  %multiply.8679 = f32[32,128,256]{1,0,2} multiply(%select.3278, %broadcast.13989)
  %param.601 = f32[32,128,256]{2,1,0} parameter(444), sharding={devices=[1,1,16]<=[16]}
  %multiply.8680 = f32[32,128,256]{2,1,0} multiply(%param.601, %broadcast.13991)
  %add.5853 = f32[32,128,256]{1,0,2} add(%multiply.8679, %multiply.8680)
  %multiply.8681 = f32[32,128,256]{1,0,2} multiply(%select.3278, %select.3278)
  %multiply.8682 = f32[32,128,256]{1,0,2} multiply(%multiply.8681, %broadcast.13993)
  %param.602 = f32[32,128,256]{2,1,0} parameter(735), sharding={devices=[1,1,16]<=[16]}
  %multiply.8683 = f32[32,128,256]{2,1,0} multiply(%param.602, %broadcast.13994)
  %add.5854 = f32[32,128,256]{1,0,2} add(%multiply.8682, %multiply.8683)
  %divide.1554 = f32[32,128,256]{1,0,2} divide(%add.5854, %broadcast.13996)
  %sqrt.152 = f32[32,128,256]{1,0,2} sqrt(%divide.1554)
  %add.5855 = f32[32,128,256]{1,0,2} add(%sqrt.152, %broadcast.13998)
  %multiply.8684 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5855)
  %divide.1555 = f32[32,128,256]{1,0,2} divide(%add.5853, %multiply.8684)
  %multiply.8685 = f32[32,128,256]{2,1,0} multiply(%param.218, %broadcast.13989)
  %add.5856 = f32[32,128,256]{1,0,2} add(%divide.1555, %multiply.8685)
  %multiply.8686 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5856)
  %add.5858 = f32[32,128,256]{2,1,0} add(%param.218, %multiply.8686)
  %divide.1556 = f32[256,32,128]{0,2,1} divide(%transpose.450, %broadcast.14001)
  %select.3279 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.450, %divide.1556)
  %multiply.8687 = f32[256,32,128]{0,2,1} multiply(%select.3279, %broadcast.14002)
  %param.603 = f32[256,32,128]{2,1,0} parameter(445), sharding={devices=[16,1,1]<=[16]}
  %multiply.8688 = f32[256,32,128]{2,1,0} multiply(%param.603, %broadcast.14003)
  %add.5859 = f32[256,32,128]{0,2,1} add(%multiply.8687, %multiply.8688)
  %multiply.8689 = f32[256,32,128]{0,2,1} multiply(%select.3279, %select.3279)
  %multiply.8690 = f32[256,32,128]{0,2,1} multiply(%multiply.8689, %broadcast.14005)
  %param.604 = f32[256,32,128]{2,1,0} parameter(736), sharding={devices=[16,1,1]<=[16]}
  %multiply.8691 = f32[256,32,128]{2,1,0} multiply(%param.604, %broadcast.14006)
  %add.5860 = f32[256,32,128]{0,2,1} add(%multiply.8690, %multiply.8691)
  %divide.1557 = f32[256,32,128]{0,2,1} divide(%add.5860, %broadcast.14007)
  %sqrt.153 = f32[256,32,128]{0,2,1} sqrt(%divide.1557)
  %add.5861 = f32[256,32,128]{0,2,1} add(%sqrt.153, %broadcast.14008)
  %multiply.8692 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5861)
  %divide.1558 = f32[256,32,128]{0,2,1} divide(%add.5859, %multiply.8692)
  %multiply.8693 = f32[256,32,128]{2,1,0} multiply(%param.215, %broadcast.14002)
  %add.5863 = f32[256,32,128]{0,2,1} add(%divide.1558, %multiply.8693)
  %multiply.8694 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5863)
  %add.5864 = f32[256,32,128]{2,1,0} add(%param.215, %multiply.8694)
  %divide.1559 = f32[256,8,128]{0,2,1} divide(%transpose.451, %broadcast.13977)
  %select.3280 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.451, %divide.1559)
  %multiply.8695 = f32[256,8,128]{0,2,1} multiply(%select.3280, %broadcast.13978)
  %param.605 = f32[256,8,128]{2,1,0} parameter(446), sharding={devices=[16,1,1]<=[16]}
  %multiply.8696 = f32[256,8,128]{2,1,0} multiply(%param.605, %broadcast.13979)
  %add.5865 = f32[256,8,128]{0,2,1} add(%multiply.8695, %multiply.8696)
  %multiply.8697 = f32[256,8,128]{0,2,1} multiply(%select.3280, %select.3280)
  %multiply.8698 = f32[256,8,128]{0,2,1} multiply(%multiply.8697, %broadcast.13981)
  %param.606 = f32[256,8,128]{2,1,0} parameter(737), sharding={devices=[16,1,1]<=[16]}
  %multiply.8699 = f32[256,8,128]{2,1,0} multiply(%param.606, %broadcast.13982)
  %add.5866 = f32[256,8,128]{0,2,1} add(%multiply.8698, %multiply.8699)
  %divide.1560 = f32[256,8,128]{0,2,1} divide(%add.5866, %broadcast.13983)
  %sqrt.154 = f32[256,8,128]{0,2,1} sqrt(%divide.1560)
  %add.5867 = f32[256,8,128]{0,2,1} add(%sqrt.154, %broadcast.13984)
  %multiply.8700 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5867)
  %divide.1561 = f32[256,8,128]{0,2,1} divide(%add.5865, %multiply.8700)
  %multiply.8701 = f32[256,8,128]{2,1,0} multiply(%param.217, %broadcast.13978)
  %add.5868 = f32[256,8,128]{0,2,1} add(%divide.1561, %multiply.8701)
  %multiply.8702 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5868)
  %add.5869 = f32[256,8,128]{2,1,0} add(%param.217, %multiply.8702)
  %divide.1562 = f32[256,14336]{0,1} divide(%convert.3336, %broadcast.13938)
  %select.3281 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3336, %divide.1562)
  %multiply.8703 = f32[256,14336]{0,1} multiply(%select.3281, %broadcast.13940)
  %param.607 = f32[256,14336]{1,0} parameter(447), sharding={devices=[16,1]<=[16]}
  %multiply.8705 = f32[256,14336]{1,0} multiply(%param.607, %broadcast.13942)
  %add.5870 = f32[256,14336]{0,1} add(%multiply.8703, %multiply.8705)
  %multiply.8706 = f32[256,14336]{0,1} multiply(%select.3281, %select.3281)
  %multiply.8707 = f32[256,14336]{0,1} multiply(%multiply.8706, %broadcast.13945)
  %param.608 = f32[256,14336]{1,0} parameter(738), sharding={devices=[16,1]<=[16]}
  %multiply.8708 = f32[256,14336]{1,0} multiply(%param.608, %broadcast.13947)
  %add.5871 = f32[256,14336]{0,1} add(%multiply.8707, %multiply.8708)
  %divide.1563 = f32[256,14336]{0,1} divide(%add.5871, %broadcast.13948)
  %sqrt.155 = f32[256,14336]{0,1} sqrt(%divide.1563)
  %add.5872 = f32[256,14336]{0,1} add(%sqrt.155, %broadcast.13949)
  %multiply.8709 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5872)
  %divide.1564 = f32[256,14336]{0,1} divide(%add.5870, %multiply.8709)
  %multiply.8710 = f32[256,14336]{1,0} multiply(%param.229, %broadcast.13940)
  %add.5873 = f32[256,14336]{0,1} add(%divide.1564, %multiply.8710)
  %multiply.8711 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5873)
  %add.5874 = f32[256,14336]{1,0} add(%param.229, %multiply.8711)
  %divide.1565 = f32[256,14336]{0,1} divide(%convert.3337, %broadcast.13938)
  %select.3282 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3337, %divide.1565)
  %multiply.8712 = f32[256,14336]{0,1} multiply(%select.3282, %broadcast.13940)
  %param.609 = f32[256,14336]{1,0} parameter(448), sharding={devices=[16,1]<=[16]}
  %multiply.8713 = f32[256,14336]{1,0} multiply(%param.609, %broadcast.13942)
  %add.5875 = f32[256,14336]{0,1} add(%multiply.8712, %multiply.8713)
  %multiply.8714 = f32[256,14336]{0,1} multiply(%select.3282, %select.3282)
  %multiply.8715 = f32[256,14336]{0,1} multiply(%multiply.8714, %broadcast.13945)
  %param.610 = f32[256,14336]{1,0} parameter(739), sharding={devices=[16,1]<=[16]}
  %multiply.8716 = f32[256,14336]{1,0} multiply(%param.610, %broadcast.13947)
  %add.5876 = f32[256,14336]{0,1} add(%multiply.8715, %multiply.8716)
  %divide.1566 = f32[256,14336]{0,1} divide(%add.5876, %broadcast.13948)
  %sqrt.156 = f32[256,14336]{0,1} sqrt(%divide.1566)
  %add.5877 = f32[256,14336]{0,1} add(%sqrt.156, %broadcast.13949)
  %multiply.8717 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5877)
  %divide.1567 = f32[256,14336]{0,1} divide(%add.5875, %multiply.8717)
  %multiply.8718 = f32[256,14336]{1,0} multiply(%param.230, %broadcast.13940)
  %add.5878 = f32[256,14336]{0,1} add(%divide.1567, %multiply.8718)
  %multiply.8719 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5878)
  %add.5879 = f32[256,14336]{1,0} add(%param.230, %multiply.8719)
  %divide.1568 = f32[14336,256]{0,1} divide(%convert.3338, %broadcast.13957)
  %select.3283 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3338, %divide.1568)
  %multiply.8721 = f32[14336,256]{0,1} multiply(%select.3283, %broadcast.13958)
  %param.611 = f32[14336,256]{1,0} parameter(449), sharding={devices=[1,16]<=[16]}
  %multiply.8723 = f32[14336,256]{1,0} multiply(%param.611, %broadcast.13959)
  %add.5880 = f32[14336,256]{0,1} add(%multiply.8721, %multiply.8723)
  %multiply.8724 = f32[14336,256]{0,1} multiply(%select.3283, %select.3283)
  %multiply.8725 = f32[14336,256]{0,1} multiply(%multiply.8724, %broadcast.13961)
  %param.612 = f32[14336,256]{1,0} parameter(740), sharding={devices=[1,16]<=[16]}
  %multiply.8726 = f32[14336,256]{1,0} multiply(%param.612, %broadcast.13962)
  %add.5881 = f32[14336,256]{0,1} add(%multiply.8725, %multiply.8726)
  %divide.1569 = f32[14336,256]{0,1} divide(%add.5881, %broadcast.13963)
  %sqrt.157 = f32[14336,256]{0,1} sqrt(%divide.1569)
  %add.5882 = f32[14336,256]{0,1} add(%sqrt.157, %broadcast.13964)
  %multiply.8727 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5882)
  %divide.1570 = f32[14336,256]{0,1} divide(%add.5880, %multiply.8727)
  %multiply.8728 = f32[14336,256]{1,0} multiply(%param.231, %broadcast.13958)
  %add.5883 = f32[14336,256]{0,1} add(%divide.1570, %multiply.8728)
  %multiply.8729 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5883)
  %add.5884 = f32[14336,256]{1,0} add(%param.231, %multiply.8729)
  %divide.1571 = f32[4096]{0} divide(%convert.3339, %broadcast.13924)
  %select.3284 = f32[4096]{0} select(%broadcast.13923, %convert.3339, %divide.1571)
  %multiply.8730 = f32[4096]{0} multiply(%select.3284, %broadcast.13925)
  %param.613 = f32[4096]{0} parameter(450), sharding={replicated}
  %multiply.8731 = f32[4096]{0} multiply(%param.613, %broadcast.13926)
  %add.5885 = f32[4096]{0} add(%multiply.8730, %multiply.8731)
  %multiply.8732 = f32[4096]{0} multiply(%select.3284, %select.3284)
  %multiply.8733 = f32[4096]{0} multiply(%multiply.8732, %broadcast.13928)
  %param.614 = f32[4096]{0} parameter(741), sharding={replicated}
  %multiply.8734 = f32[4096]{0} multiply(%param.614, %broadcast.13929)
  %add.5886 = f32[4096]{0} add(%multiply.8733, %multiply.8734)
  %divide.1572 = f32[4096]{0} divide(%add.5886, %broadcast.13931)
  %sqrt.158 = f32[4096]{0} sqrt(%divide.1572)
  %add.5887 = f32[4096]{0} add(%sqrt.158, %broadcast.13934)
  %multiply.8735 = f32[4096]{0} multiply(%broadcast.13927, %add.5887)
  %divide.1573 = f32[4096]{0} divide(%add.5885, %multiply.8735)
  %multiply.8736 = f32[4096]{0} multiply(%param.228, %broadcast.13925)
  %add.5888 = f32[4096]{0} add(%divide.1573, %multiply.8736)
  %multiply.8737 = f32[4096]{0} multiply(%broadcast.7107, %add.5888)
  %add.5889 = f32[4096]{0} add(%param.228, %multiply.8737)
  %divide.1574 = f32[4096]{0} divide(%convert.3341, %broadcast.13924)
  %select.3285 = f32[4096]{0} select(%broadcast.13923, %convert.3341, %divide.1574)
  %multiply.8738 = f32[4096]{0} multiply(%select.3285, %broadcast.13925)
  %param.615 = f32[4096]{0} parameter(451), sharding={replicated}
  %multiply.8739 = f32[4096]{0} multiply(%param.615, %broadcast.13926)
  %add.5890 = f32[4096]{0} add(%multiply.8738, %multiply.8739)
  %multiply.8740 = f32[4096]{0} multiply(%select.3285, %select.3285)
  %multiply.8741 = f32[4096]{0} multiply(%multiply.8740, %broadcast.13928)
  %param.616 = f32[4096]{0} parameter(742), sharding={replicated}
  %multiply.8742 = f32[4096]{0} multiply(%param.616, %broadcast.13929)
  %add.5891 = f32[4096]{0} add(%multiply.8741, %multiply.8742)
  %divide.1575 = f32[4096]{0} divide(%add.5891, %broadcast.13931)
  %sqrt.159 = f32[4096]{0} sqrt(%divide.1575)
  %add.5892 = f32[4096]{0} add(%sqrt.159, %broadcast.13934)
  %multiply.8743 = f32[4096]{0} multiply(%broadcast.13927, %add.5892)
  %divide.1576 = f32[4096]{0} divide(%add.5890, %multiply.8743)
  %multiply.8744 = f32[4096]{0} multiply(%param.223, %broadcast.13925)
  %add.5893 = f32[4096]{0} add(%divide.1576, %multiply.8744)
  %multiply.8745 = f32[4096]{0} multiply(%broadcast.7107, %add.5893)
  %add.5894 = f32[4096]{0} add(%param.223, %multiply.8745)
  %divide.1577 = f32[256,8,128]{0,2,1} divide(%transpose.452, %broadcast.13977)
  %select.3286 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.452, %divide.1577)
  %multiply.8746 = f32[256,8,128]{0,2,1} multiply(%select.3286, %broadcast.13978)
  %param.617 = f32[256,8,128]{2,1,0} parameter(452), sharding={devices=[16,1,1]<=[16]}
  %multiply.8747 = f32[256,8,128]{2,1,0} multiply(%param.617, %broadcast.13979)
  %add.5895 = f32[256,8,128]{0,2,1} add(%multiply.8746, %multiply.8747)
  %multiply.8748 = f32[256,8,128]{0,2,1} multiply(%select.3286, %select.3286)
  %multiply.8750 = f32[256,8,128]{0,2,1} multiply(%multiply.8748, %broadcast.13981)
  %param.618 = f32[256,8,128]{2,1,0} parameter(743), sharding={devices=[16,1,1]<=[16]}
  %multiply.8751 = f32[256,8,128]{2,1,0} multiply(%param.618, %broadcast.13982)
  %add.5896 = f32[256,8,128]{0,2,1} add(%multiply.8750, %multiply.8751)
  %divide.1578 = f32[256,8,128]{0,2,1} divide(%add.5896, %broadcast.13983)
  %sqrt.160 = f32[256,8,128]{0,2,1} sqrt(%divide.1578)
  %add.5897 = f32[256,8,128]{0,2,1} add(%sqrt.160, %broadcast.13984)
  %multiply.8752 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5897)
  %divide.1579 = f32[256,8,128]{0,2,1} divide(%add.5895, %multiply.8752)
  %multiply.8753 = f32[256,8,128]{2,1,0} multiply(%param.225, %broadcast.13978)
  %add.5898 = f32[256,8,128]{0,2,1} add(%divide.1579, %multiply.8753)
  %multiply.8755 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5898)
  %add.5899 = f32[256,8,128]{2,1,0} add(%param.225, %multiply.8755)
  %divide.1580 = f32[32,128,256]{1,0,2} divide(%transpose.453, %broadcast.13987)
  %select.3287 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.453, %divide.1580)
  %multiply.8756 = f32[32,128,256]{1,0,2} multiply(%select.3287, %broadcast.13989)
  %param.619 = f32[32,128,256]{2,1,0} parameter(453), sharding={devices=[1,1,16]<=[16]}
  %multiply.8757 = f32[32,128,256]{2,1,0} multiply(%param.619, %broadcast.13991)
  %add.5900 = f32[32,128,256]{1,0,2} add(%multiply.8756, %multiply.8757)
  %multiply.8758 = f32[32,128,256]{1,0,2} multiply(%select.3287, %select.3287)
  %multiply.8759 = f32[32,128,256]{1,0,2} multiply(%multiply.8758, %broadcast.13993)
  %param.620 = f32[32,128,256]{2,1,0} parameter(744), sharding={devices=[1,1,16]<=[16]}
  %multiply.8761 = f32[32,128,256]{2,1,0} multiply(%param.620, %broadcast.13994)
  %add.5901 = f32[32,128,256]{1,0,2} add(%multiply.8759, %multiply.8761)
  %divide.1581 = f32[32,128,256]{1,0,2} divide(%add.5901, %broadcast.13996)
  %sqrt.161 = f32[32,128,256]{1,0,2} sqrt(%divide.1581)
  %add.5902 = f32[32,128,256]{1,0,2} add(%sqrt.161, %broadcast.13998)
  %multiply.8762 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5902)
  %divide.1582 = f32[32,128,256]{1,0,2} divide(%add.5900, %multiply.8762)
  %multiply.8763 = f32[32,128,256]{2,1,0} multiply(%param.227, %broadcast.13989)
  %add.5903 = f32[32,128,256]{1,0,2} add(%divide.1582, %multiply.8763)
  %multiply.8764 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5903)
  %add.5904 = f32[32,128,256]{2,1,0} add(%param.227, %multiply.8764)
  %divide.1583 = f32[256,32,128]{0,2,1} divide(%transpose.454, %broadcast.14001)
  %select.3288 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.454, %divide.1583)
  %multiply.8765 = f32[256,32,128]{0,2,1} multiply(%select.3288, %broadcast.14002)
  %param.621 = f32[256,32,128]{2,1,0} parameter(454), sharding={devices=[16,1,1]<=[16]}
  %multiply.8766 = f32[256,32,128]{2,1,0} multiply(%param.621, %broadcast.14003)
  %add.5905 = f32[256,32,128]{0,2,1} add(%multiply.8765, %multiply.8766)
  %multiply.8767 = f32[256,32,128]{0,2,1} multiply(%select.3288, %select.3288)
  %multiply.8768 = f32[256,32,128]{0,2,1} multiply(%multiply.8767, %broadcast.14005)
  %param.622 = f32[256,32,128]{2,1,0} parameter(745), sharding={devices=[16,1,1]<=[16]}
  %multiply.8769 = f32[256,32,128]{2,1,0} multiply(%param.622, %broadcast.14006)
  %add.5906 = f32[256,32,128]{0,2,1} add(%multiply.8768, %multiply.8769)
  %divide.1584 = f32[256,32,128]{0,2,1} divide(%add.5906, %broadcast.14007)
  %sqrt.162 = f32[256,32,128]{0,2,1} sqrt(%divide.1584)
  %add.5907 = f32[256,32,128]{0,2,1} add(%sqrt.162, %broadcast.14008)
  %multiply.8770 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5907)
  %divide.1585 = f32[256,32,128]{0,2,1} divide(%add.5905, %multiply.8770)
  %multiply.8771 = f32[256,32,128]{2,1,0} multiply(%param.224, %broadcast.14002)
  %add.5908 = f32[256,32,128]{0,2,1} add(%divide.1585, %multiply.8771)
  %multiply.8772 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5908)
  %add.5909 = f32[256,32,128]{2,1,0} add(%param.224, %multiply.8772)
  %divide.1586 = f32[256,8,128]{0,2,1} divide(%transpose.455, %broadcast.13977)
  %select.3289 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.455, %divide.1586)
  %multiply.8773 = f32[256,8,128]{0,2,1} multiply(%select.3289, %broadcast.13978)
  %param.623 = f32[256,8,128]{2,1,0} parameter(455), sharding={devices=[16,1,1]<=[16]}
  %multiply.8774 = f32[256,8,128]{2,1,0} multiply(%param.623, %broadcast.13979)
  %add.5910 = f32[256,8,128]{0,2,1} add(%multiply.8773, %multiply.8774)
  %multiply.8775 = f32[256,8,128]{0,2,1} multiply(%select.3289, %select.3289)
  %multiply.8776 = f32[256,8,128]{0,2,1} multiply(%multiply.8775, %broadcast.13981)
  %param.624 = f32[256,8,128]{2,1,0} parameter(746), sharding={devices=[16,1,1]<=[16]}
  %multiply.8777 = f32[256,8,128]{2,1,0} multiply(%param.624, %broadcast.13982)
  %add.5911 = f32[256,8,128]{0,2,1} add(%multiply.8776, %multiply.8777)
  %divide.1587 = f32[256,8,128]{0,2,1} divide(%add.5911, %broadcast.13983)
  %sqrt.163 = f32[256,8,128]{0,2,1} sqrt(%divide.1587)
  %add.5912 = f32[256,8,128]{0,2,1} add(%sqrt.163, %broadcast.13984)
  %multiply.8778 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5912)
  %divide.1588 = f32[256,8,128]{0,2,1} divide(%add.5910, %multiply.8778)
  %multiply.8779 = f32[256,8,128]{2,1,0} multiply(%param.226, %broadcast.13978)
  %add.5913 = f32[256,8,128]{0,2,1} add(%divide.1588, %multiply.8779)
  %multiply.8781 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5913)
  %add.5914 = f32[256,8,128]{2,1,0} add(%param.226, %multiply.8781)
  %divide.1589 = f32[256,14336]{0,1} divide(%convert.3347, %broadcast.13938)
  %select.3290 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3347, %divide.1589)
  %multiply.8782 = f32[256,14336]{0,1} multiply(%select.3290, %broadcast.13940)
  %param.625 = f32[256,14336]{1,0} parameter(456), sharding={devices=[16,1]<=[16]}
  %multiply.8783 = f32[256,14336]{1,0} multiply(%param.625, %broadcast.13942)
  %add.5915 = f32[256,14336]{0,1} add(%multiply.8782, %multiply.8783)
  %multiply.8784 = f32[256,14336]{0,1} multiply(%select.3290, %select.3290)
  %multiply.8785 = f32[256,14336]{0,1} multiply(%multiply.8784, %broadcast.13945)
  %param.626 = f32[256,14336]{1,0} parameter(747), sharding={devices=[16,1]<=[16]}
  %multiply.8786 = f32[256,14336]{1,0} multiply(%param.626, %broadcast.13947)
  %add.5916 = f32[256,14336]{0,1} add(%multiply.8785, %multiply.8786)
  %divide.1590 = f32[256,14336]{0,1} divide(%add.5916, %broadcast.13948)
  %sqrt.164 = f32[256,14336]{0,1} sqrt(%divide.1590)
  %add.5917 = f32[256,14336]{0,1} add(%sqrt.164, %broadcast.13949)
  %multiply.8787 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5917)
  %divide.1591 = f32[256,14336]{0,1} divide(%add.5915, %multiply.8787)
  %multiply.8788 = f32[256,14336]{1,0} multiply(%param.238, %broadcast.13940)
  %add.5918 = f32[256,14336]{0,1} add(%divide.1591, %multiply.8788)
  %multiply.8789 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5918)
  %add.5919 = f32[256,14336]{1,0} add(%param.238, %multiply.8789)
  %divide.1592 = f32[256,14336]{0,1} divide(%convert.3350, %broadcast.13938)
  %select.3291 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3350, %divide.1592)
  %multiply.8790 = f32[256,14336]{0,1} multiply(%select.3291, %broadcast.13940)
  %param.627 = f32[256,14336]{1,0} parameter(457), sharding={devices=[16,1]<=[16]}
  %multiply.8791 = f32[256,14336]{1,0} multiply(%param.627, %broadcast.13942)
  %add.5920 = f32[256,14336]{0,1} add(%multiply.8790, %multiply.8791)
  %multiply.8792 = f32[256,14336]{0,1} multiply(%select.3291, %select.3291)
  %multiply.8793 = f32[256,14336]{0,1} multiply(%multiply.8792, %broadcast.13945)
  %param.628 = f32[256,14336]{1,0} parameter(748), sharding={devices=[16,1]<=[16]}
  %multiply.8794 = f32[256,14336]{1,0} multiply(%param.628, %broadcast.13947)
  %add.5921 = f32[256,14336]{0,1} add(%multiply.8793, %multiply.8794)
  %divide.1593 = f32[256,14336]{0,1} divide(%add.5921, %broadcast.13948)
  %sqrt.165 = f32[256,14336]{0,1} sqrt(%divide.1593)
  %add.5922 = f32[256,14336]{0,1} add(%sqrt.165, %broadcast.13949)
  %multiply.8795 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5922)
  %divide.1594 = f32[256,14336]{0,1} divide(%add.5920, %multiply.8795)
  %multiply.8797 = f32[256,14336]{1,0} multiply(%param.239, %broadcast.13940)
  %add.5924 = f32[256,14336]{0,1} add(%divide.1594, %multiply.8797)
  %multiply.8799 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5924)
  %add.5925 = f32[256,14336]{1,0} add(%param.239, %multiply.8799)
  %divide.1595 = f32[14336,256]{0,1} divide(%convert.3351, %broadcast.13957)
  %select.3292 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3351, %divide.1595)
  %multiply.8800 = f32[14336,256]{0,1} multiply(%select.3292, %broadcast.13958)
  %param.629 = f32[14336,256]{1,0} parameter(458), sharding={devices=[1,16]<=[16]}
  %multiply.8801 = f32[14336,256]{1,0} multiply(%param.629, %broadcast.13959)
  %add.5926 = f32[14336,256]{0,1} add(%multiply.8800, %multiply.8801)
  %multiply.8802 = f32[14336,256]{0,1} multiply(%select.3292, %select.3292)
  %multiply.8803 = f32[14336,256]{0,1} multiply(%multiply.8802, %broadcast.13961)
  %param.630 = f32[14336,256]{1,0} parameter(749), sharding={devices=[1,16]<=[16]}
  %multiply.8804 = f32[14336,256]{1,0} multiply(%param.630, %broadcast.13962)
  %add.5927 = f32[14336,256]{0,1} add(%multiply.8803, %multiply.8804)
  %divide.1596 = f32[14336,256]{0,1} divide(%add.5927, %broadcast.13963)
  %sqrt.166 = f32[14336,256]{0,1} sqrt(%divide.1596)
  %add.5928 = f32[14336,256]{0,1} add(%sqrt.166, %broadcast.13964)
  %multiply.8805 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5928)
  %divide.1597 = f32[14336,256]{0,1} divide(%add.5926, %multiply.8805)
  %multiply.8806 = f32[14336,256]{1,0} multiply(%param.240, %broadcast.13958)
  %add.5929 = f32[14336,256]{0,1} add(%divide.1597, %multiply.8806)
  %multiply.8807 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5929)
  %add.5930 = f32[14336,256]{1,0} add(%param.240, %multiply.8807)
  %divide.1598 = f32[4096]{0} divide(%convert.3352, %broadcast.13924)
  %select.3293 = f32[4096]{0} select(%broadcast.13923, %convert.3352, %divide.1598)
  %multiply.8808 = f32[4096]{0} multiply(%select.3293, %broadcast.13925)
  %param.631 = f32[4096]{0} parameter(459), sharding={replicated}
  %multiply.8809 = f32[4096]{0} multiply(%param.631, %broadcast.13926)
  %add.5931 = f32[4096]{0} add(%multiply.8808, %multiply.8809)
  %multiply.8810 = f32[4096]{0} multiply(%select.3293, %select.3293)
  %multiply.8811 = f32[4096]{0} multiply(%multiply.8810, %broadcast.13928)
  %param.632 = f32[4096]{0} parameter(750), sharding={replicated}
  %multiply.8812 = f32[4096]{0} multiply(%param.632, %broadcast.13929)
  %add.5932 = f32[4096]{0} add(%multiply.8811, %multiply.8812)
  %divide.1599 = f32[4096]{0} divide(%add.5932, %broadcast.13931)
  %sqrt.167 = f32[4096]{0} sqrt(%divide.1599)
  %add.5933 = f32[4096]{0} add(%sqrt.167, %broadcast.13934)
  %multiply.8813 = f32[4096]{0} multiply(%broadcast.13927, %add.5933)
  %divide.1600 = f32[4096]{0} divide(%add.5931, %multiply.8813)
  %multiply.8814 = f32[4096]{0} multiply(%param.237, %broadcast.13925)
  %add.5934 = f32[4096]{0} add(%divide.1600, %multiply.8814)
  %multiply.8815 = f32[4096]{0} multiply(%broadcast.7107, %add.5934)
  %add.5935 = f32[4096]{0} add(%param.237, %multiply.8815)
  %divide.1601 = f32[4096]{0} divide(%convert.3354, %broadcast.13924)
  %select.3294 = f32[4096]{0} select(%broadcast.13923, %convert.3354, %divide.1601)
  %multiply.8816 = f32[4096]{0} multiply(%select.3294, %broadcast.13925)
  %param.633 = f32[4096]{0} parameter(460), sharding={replicated}
  %multiply.8817 = f32[4096]{0} multiply(%param.633, %broadcast.13926)
  %add.5936 = f32[4096]{0} add(%multiply.8816, %multiply.8817)
  %multiply.8818 = f32[4096]{0} multiply(%select.3294, %select.3294)
  %multiply.8819 = f32[4096]{0} multiply(%multiply.8818, %broadcast.13928)
  %param.634 = f32[4096]{0} parameter(751), sharding={replicated}
  %multiply.8820 = f32[4096]{0} multiply(%param.634, %broadcast.13929)
  %add.5937 = f32[4096]{0} add(%multiply.8819, %multiply.8820)
  %divide.1602 = f32[4096]{0} divide(%add.5937, %broadcast.13931)
  %sqrt.168 = f32[4096]{0} sqrt(%divide.1602)
  %add.5938 = f32[4096]{0} add(%sqrt.168, %broadcast.13934)
  %multiply.8821 = f32[4096]{0} multiply(%broadcast.13927, %add.5938)
  %divide.1603 = f32[4096]{0} divide(%add.5936, %multiply.8821)
  %multiply.8822 = f32[4096]{0} multiply(%param.232, %broadcast.13925)
  %add.5939 = f32[4096]{0} add(%divide.1603, %multiply.8822)
  %multiply.8823 = f32[4096]{0} multiply(%broadcast.7107, %add.5939)
  %add.5940 = f32[4096]{0} add(%param.232, %multiply.8823)
  %divide.1604 = f32[256,8,128]{0,2,1} divide(%transpose.456, %broadcast.13977)
  %select.3295 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.456, %divide.1604)
  %multiply.8824 = f32[256,8,128]{0,2,1} multiply(%select.3295, %broadcast.13978)
  %param.635 = f32[256,8,128]{2,1,0} parameter(461), sharding={devices=[16,1,1]<=[16]}
  %multiply.8826 = f32[256,8,128]{2,1,0} multiply(%param.635, %broadcast.13979)
  %add.5941 = f32[256,8,128]{0,2,1} add(%multiply.8824, %multiply.8826)
  %multiply.8827 = f32[256,8,128]{0,2,1} multiply(%select.3295, %select.3295)
  %multiply.8828 = f32[256,8,128]{0,2,1} multiply(%multiply.8827, %broadcast.13981)
  %param.636 = f32[256,8,128]{2,1,0} parameter(752), sharding={devices=[16,1,1]<=[16]}
  %multiply.8829 = f32[256,8,128]{2,1,0} multiply(%param.636, %broadcast.13982)
  %add.5942 = f32[256,8,128]{0,2,1} add(%multiply.8828, %multiply.8829)
  %divide.1605 = f32[256,8,128]{0,2,1} divide(%add.5942, %broadcast.13983)
  %sqrt.169 = f32[256,8,128]{0,2,1} sqrt(%divide.1605)
  %add.5943 = f32[256,8,128]{0,2,1} add(%sqrt.169, %broadcast.13984)
  %multiply.8831 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5943)
  %divide.1606 = f32[256,8,128]{0,2,1} divide(%add.5941, %multiply.8831)
  %multiply.8832 = f32[256,8,128]{2,1,0} multiply(%param.234, %broadcast.13978)
  %add.5944 = f32[256,8,128]{0,2,1} add(%divide.1606, %multiply.8832)
  %multiply.8833 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5944)
  %add.5945 = f32[256,8,128]{2,1,0} add(%param.234, %multiply.8833)
  %divide.1607 = f32[32,128,256]{1,0,2} divide(%transpose.457, %broadcast.13987)
  %select.3296 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.457, %divide.1607)
  %multiply.8834 = f32[32,128,256]{1,0,2} multiply(%select.3296, %broadcast.13989)
  %param.637 = f32[32,128,256]{2,1,0} parameter(462), sharding={devices=[1,1,16]<=[16]}
  %multiply.8835 = f32[32,128,256]{2,1,0} multiply(%param.637, %broadcast.13991)
  %add.5946 = f32[32,128,256]{1,0,2} add(%multiply.8834, %multiply.8835)
  %multiply.8837 = f32[32,128,256]{1,0,2} multiply(%select.3296, %select.3296)
  %multiply.8838 = f32[32,128,256]{1,0,2} multiply(%multiply.8837, %broadcast.13993)
  %param.638 = f32[32,128,256]{2,1,0} parameter(753), sharding={devices=[1,1,16]<=[16]}
  %multiply.8839 = f32[32,128,256]{2,1,0} multiply(%param.638, %broadcast.13994)
  %add.5947 = f32[32,128,256]{1,0,2} add(%multiply.8838, %multiply.8839)
  %divide.1608 = f32[32,128,256]{1,0,2} divide(%add.5947, %broadcast.13996)
  %sqrt.170 = f32[32,128,256]{1,0,2} sqrt(%divide.1608)
  %add.5948 = f32[32,128,256]{1,0,2} add(%sqrt.170, %broadcast.13998)
  %multiply.8840 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5948)
  %divide.1609 = f32[32,128,256]{1,0,2} divide(%add.5946, %multiply.8840)
  %multiply.8841 = f32[32,128,256]{2,1,0} multiply(%param.236, %broadcast.13989)
  %add.5949 = f32[32,128,256]{1,0,2} add(%divide.1609, %multiply.8841)
  %multiply.8842 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5949)
  %add.5950 = f32[32,128,256]{2,1,0} add(%param.236, %multiply.8842)
  %divide.1610 = f32[256,32,128]{0,2,1} divide(%transpose.458, %broadcast.14001)
  %select.3297 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.458, %divide.1610)
  %multiply.8843 = f32[256,32,128]{0,2,1} multiply(%select.3297, %broadcast.14002)
  %param.639 = f32[256,32,128]{2,1,0} parameter(463), sharding={devices=[16,1,1]<=[16]}
  %multiply.8844 = f32[256,32,128]{2,1,0} multiply(%param.639, %broadcast.14003)
  %add.5951 = f32[256,32,128]{0,2,1} add(%multiply.8843, %multiply.8844)
  %multiply.8845 = f32[256,32,128]{0,2,1} multiply(%select.3297, %select.3297)
  %multiply.8846 = f32[256,32,128]{0,2,1} multiply(%multiply.8845, %broadcast.14005)
  %param.640 = f32[256,32,128]{2,1,0} parameter(754), sharding={devices=[16,1,1]<=[16]}
  %multiply.8847 = f32[256,32,128]{2,1,0} multiply(%param.640, %broadcast.14006)
  %add.5952 = f32[256,32,128]{0,2,1} add(%multiply.8846, %multiply.8847)
  %divide.1611 = f32[256,32,128]{0,2,1} divide(%add.5952, %broadcast.14007)
  %sqrt.171 = f32[256,32,128]{0,2,1} sqrt(%divide.1611)
  %add.5953 = f32[256,32,128]{0,2,1} add(%sqrt.171, %broadcast.14008)
  %multiply.8848 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.5953)
  %divide.1612 = f32[256,32,128]{0,2,1} divide(%add.5951, %multiply.8848)
  %multiply.8849 = f32[256,32,128]{2,1,0} multiply(%param.233, %broadcast.14002)
  %add.5954 = f32[256,32,128]{0,2,1} add(%divide.1612, %multiply.8849)
  %multiply.8850 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.5954)
  %add.5955 = f32[256,32,128]{2,1,0} add(%param.233, %multiply.8850)
  %divide.1613 = f32[256,8,128]{0,2,1} divide(%transpose.459, %broadcast.13977)
  %select.3298 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.459, %divide.1613)
  %multiply.8851 = f32[256,8,128]{0,2,1} multiply(%select.3298, %broadcast.13978)
  %param.641 = f32[256,8,128]{2,1,0} parameter(464), sharding={devices=[16,1,1]<=[16]}
  %multiply.8852 = f32[256,8,128]{2,1,0} multiply(%param.641, %broadcast.13979)
  %add.5956 = f32[256,8,128]{0,2,1} add(%multiply.8851, %multiply.8852)
  %multiply.8853 = f32[256,8,128]{0,2,1} multiply(%select.3298, %select.3298)
  %multiply.8854 = f32[256,8,128]{0,2,1} multiply(%multiply.8853, %broadcast.13981)
  %param.642 = f32[256,8,128]{2,1,0} parameter(755), sharding={devices=[16,1,1]<=[16]}
  %multiply.8855 = f32[256,8,128]{2,1,0} multiply(%param.642, %broadcast.13982)
  %add.5957 = f32[256,8,128]{0,2,1} add(%multiply.8854, %multiply.8855)
  %divide.1614 = f32[256,8,128]{0,2,1} divide(%add.5957, %broadcast.13983)
  %sqrt.172 = f32[256,8,128]{0,2,1} sqrt(%divide.1614)
  %add.5958 = f32[256,8,128]{0,2,1} add(%sqrt.172, %broadcast.13984)
  %multiply.8856 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5958)
  %divide.1615 = f32[256,8,128]{0,2,1} divide(%add.5956, %multiply.8856)
  %multiply.8857 = f32[256,8,128]{2,1,0} multiply(%param.235, %broadcast.13978)
  %add.5959 = f32[256,8,128]{0,2,1} add(%divide.1615, %multiply.8857)
  %multiply.8858 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5959)
  %add.5960 = f32[256,8,128]{2,1,0} add(%param.235, %multiply.8858)
  %divide.1616 = f32[256,14336]{0,1} divide(%convert.3362, %broadcast.13938)
  %select.3299 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3362, %divide.1616)
  %multiply.8859 = f32[256,14336]{0,1} multiply(%select.3299, %broadcast.13940)
  %param.643 = f32[256,14336]{1,0} parameter(465), sharding={devices=[16,1]<=[16]}
  %multiply.8860 = f32[256,14336]{1,0} multiply(%param.643, %broadcast.13942)
  %add.5962 = f32[256,14336]{0,1} add(%multiply.8859, %multiply.8860)
  %multiply.8861 = f32[256,14336]{0,1} multiply(%select.3299, %select.3299)
  %multiply.8862 = f32[256,14336]{0,1} multiply(%multiply.8861, %broadcast.13945)
  %param.644 = f32[256,14336]{1,0} parameter(756), sharding={devices=[16,1]<=[16]}
  %multiply.8863 = f32[256,14336]{1,0} multiply(%param.644, %broadcast.13947)
  %add.5963 = f32[256,14336]{0,1} add(%multiply.8862, %multiply.8863)
  %divide.1617 = f32[256,14336]{0,1} divide(%add.5963, %broadcast.13948)
  %sqrt.173 = f32[256,14336]{0,1} sqrt(%divide.1617)
  %add.5964 = f32[256,14336]{0,1} add(%sqrt.173, %broadcast.13949)
  %multiply.8864 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5964)
  %divide.1618 = f32[256,14336]{0,1} divide(%add.5962, %multiply.8864)
  %multiply.8865 = f32[256,14336]{1,0} multiply(%param.247, %broadcast.13940)
  %add.5965 = f32[256,14336]{0,1} add(%divide.1618, %multiply.8865)
  %multiply.8866 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5965)
  %add.5966 = f32[256,14336]{1,0} add(%param.247, %multiply.8866)
  %divide.1619 = f32[256,14336]{0,1} divide(%convert.3363, %broadcast.13938)
  %select.3300 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3363, %divide.1619)
  %multiply.8867 = f32[256,14336]{0,1} multiply(%select.3300, %broadcast.13940)
  %param.645 = f32[256,14336]{1,0} parameter(466), sharding={devices=[16,1]<=[16]}
  %multiply.8868 = f32[256,14336]{1,0} multiply(%param.645, %broadcast.13942)
  %add.5967 = f32[256,14336]{0,1} add(%multiply.8867, %multiply.8868)
  %multiply.8869 = f32[256,14336]{0,1} multiply(%select.3300, %select.3300)
  %multiply.8870 = f32[256,14336]{0,1} multiply(%multiply.8869, %broadcast.13945)
  %param.646 = f32[256,14336]{1,0} parameter(757), sharding={devices=[16,1]<=[16]}
  %multiply.8871 = f32[256,14336]{1,0} multiply(%param.646, %broadcast.13947)
  %add.5968 = f32[256,14336]{0,1} add(%multiply.8870, %multiply.8871)
  %divide.1620 = f32[256,14336]{0,1} divide(%add.5968, %broadcast.13948)
  %sqrt.174 = f32[256,14336]{0,1} sqrt(%divide.1620)
  %add.5969 = f32[256,14336]{0,1} add(%sqrt.174, %broadcast.13949)
  %multiply.8872 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.5969)
  %divide.1621 = f32[256,14336]{0,1} divide(%add.5967, %multiply.8872)
  %multiply.8873 = f32[256,14336]{1,0} multiply(%param.248, %broadcast.13940)
  %add.5970 = f32[256,14336]{0,1} add(%divide.1621, %multiply.8873)
  %multiply.8874 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.5970)
  %add.5971 = f32[256,14336]{1,0} add(%param.248, %multiply.8874)
  %divide.1622 = f32[14336,256]{0,1} divide(%convert.3365, %broadcast.13957)
  %select.3301 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3365, %divide.1622)
  %multiply.8875 = f32[14336,256]{0,1} multiply(%select.3301, %broadcast.13958)
  %param.647 = f32[14336,256]{1,0} parameter(467), sharding={devices=[1,16]<=[16]}
  %multiply.8876 = f32[14336,256]{1,0} multiply(%param.647, %broadcast.13959)
  %add.5972 = f32[14336,256]{0,1} add(%multiply.8875, %multiply.8876)
  %multiply.8877 = f32[14336,256]{0,1} multiply(%select.3301, %select.3301)
  %multiply.8878 = f32[14336,256]{0,1} multiply(%multiply.8877, %broadcast.13961)
  %param.648 = f32[14336,256]{1,0} parameter(758), sharding={devices=[1,16]<=[16]}
  %multiply.8879 = f32[14336,256]{1,0} multiply(%param.648, %broadcast.13962)
  %add.5973 = f32[14336,256]{0,1} add(%multiply.8878, %multiply.8879)
  %divide.1624 = f32[14336,256]{0,1} divide(%add.5973, %broadcast.13963)
  %sqrt.175 = f32[14336,256]{0,1} sqrt(%divide.1624)
  %add.5974 = f32[14336,256]{0,1} add(%sqrt.175, %broadcast.13964)
  %multiply.8880 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.5974)
  %divide.1625 = f32[14336,256]{0,1} divide(%add.5972, %multiply.8880)
  %multiply.8881 = f32[14336,256]{1,0} multiply(%param.249, %broadcast.13958)
  %add.5975 = f32[14336,256]{0,1} add(%divide.1625, %multiply.8881)
  %multiply.8882 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.5975)
  %add.5976 = f32[14336,256]{1,0} add(%param.249, %multiply.8882)
  %divide.1626 = f32[4096]{0} divide(%convert.3366, %broadcast.13924)
  %select.3302 = f32[4096]{0} select(%broadcast.13923, %convert.3366, %divide.1626)
  %multiply.8883 = f32[4096]{0} multiply(%select.3302, %broadcast.13925)
  %param.649 = f32[4096]{0} parameter(468), sharding={replicated}
  %multiply.8884 = f32[4096]{0} multiply(%param.649, %broadcast.13926)
  %add.5977 = f32[4096]{0} add(%multiply.8883, %multiply.8884)
  %multiply.8885 = f32[4096]{0} multiply(%select.3302, %select.3302)
  %multiply.8886 = f32[4096]{0} multiply(%multiply.8885, %broadcast.13928)
  %param.650 = f32[4096]{0} parameter(759), sharding={replicated}
  %multiply.8887 = f32[4096]{0} multiply(%param.650, %broadcast.13929)
  %add.5978 = f32[4096]{0} add(%multiply.8886, %multiply.8887)
  %divide.1627 = f32[4096]{0} divide(%add.5978, %broadcast.13931)
  %sqrt.176 = f32[4096]{0} sqrt(%divide.1627)
  %add.5979 = f32[4096]{0} add(%sqrt.176, %broadcast.13934)
  %multiply.8888 = f32[4096]{0} multiply(%broadcast.13927, %add.5979)
  %divide.1628 = f32[4096]{0} divide(%add.5977, %multiply.8888)
  %multiply.8889 = f32[4096]{0} multiply(%param.246, %broadcast.13925)
  %add.5980 = f32[4096]{0} add(%divide.1628, %multiply.8889)
  %multiply.8890 = f32[4096]{0} multiply(%broadcast.7107, %add.5980)
  %add.5981 = f32[4096]{0} add(%param.246, %multiply.8890)
  %divide.1629 = f32[4096]{0} divide(%convert.3368, %broadcast.13924)
  %select.3303 = f32[4096]{0} select(%broadcast.13923, %convert.3368, %divide.1629)
  %multiply.8891 = f32[4096]{0} multiply(%select.3303, %broadcast.13925)
  %param.651 = f32[4096]{0} parameter(469), sharding={replicated}
  %multiply.8892 = f32[4096]{0} multiply(%param.651, %broadcast.13926)
  %add.5982 = f32[4096]{0} add(%multiply.8891, %multiply.8892)
  %multiply.8893 = f32[4096]{0} multiply(%select.3303, %select.3303)
  %multiply.8894 = f32[4096]{0} multiply(%multiply.8893, %broadcast.13928)
  %param.652 = f32[4096]{0} parameter(760), sharding={replicated}
  %multiply.8895 = f32[4096]{0} multiply(%param.652, %broadcast.13929)
  %add.5983 = f32[4096]{0} add(%multiply.8894, %multiply.8895)
  %divide.1630 = f32[4096]{0} divide(%add.5983, %broadcast.13931)
  %sqrt.177 = f32[4096]{0} sqrt(%divide.1630)
  %add.5984 = f32[4096]{0} add(%sqrt.177, %broadcast.13934)
  %multiply.8897 = f32[4096]{0} multiply(%broadcast.13927, %add.5984)
  %divide.1631 = f32[4096]{0} divide(%add.5982, %multiply.8897)
  %multiply.8898 = f32[4096]{0} multiply(%param.241, %broadcast.13925)
  %add.5985 = f32[4096]{0} add(%divide.1631, %multiply.8898)
  %multiply.8899 = f32[4096]{0} multiply(%broadcast.7107, %add.5985)
  %add.5986 = f32[4096]{0} add(%param.241, %multiply.8899)
  %divide.1632 = f32[256,8,128]{0,2,1} divide(%transpose.460, %broadcast.13977)
  %select.3304 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.460, %divide.1632)
  %multiply.8900 = f32[256,8,128]{0,2,1} multiply(%select.3304, %broadcast.13978)
  %param.653 = f32[256,8,128]{2,1,0} parameter(470), sharding={devices=[16,1,1]<=[16]}
  %multiply.8901 = f32[256,8,128]{2,1,0} multiply(%param.653, %broadcast.13979)
  %add.5987 = f32[256,8,128]{0,2,1} add(%multiply.8900, %multiply.8901)
  %multiply.8902 = f32[256,8,128]{0,2,1} multiply(%select.3304, %select.3304)
  %multiply.8903 = f32[256,8,128]{0,2,1} multiply(%multiply.8902, %broadcast.13981)
  %param.654 = f32[256,8,128]{2,1,0} parameter(761), sharding={devices=[16,1,1]<=[16]}
  %multiply.8904 = f32[256,8,128]{2,1,0} multiply(%param.654, %broadcast.13982)
  %add.5988 = f32[256,8,128]{0,2,1} add(%multiply.8903, %multiply.8904)
  %divide.1633 = f32[256,8,128]{0,2,1} divide(%add.5988, %broadcast.13983)
  %sqrt.178 = f32[256,8,128]{0,2,1} sqrt(%divide.1633)
  %add.5989 = f32[256,8,128]{0,2,1} add(%sqrt.178, %broadcast.13984)
  %multiply.8905 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.5989)
  %divide.1634 = f32[256,8,128]{0,2,1} divide(%add.5987, %multiply.8905)
  %multiply.8906 = f32[256,8,128]{2,1,0} multiply(%param.243, %broadcast.13978)
  %add.5990 = f32[256,8,128]{0,2,1} add(%divide.1634, %multiply.8906)
  %multiply.8907 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.5990)
  %add.5991 = f32[256,8,128]{2,1,0} add(%param.243, %multiply.8907)
  %divide.1635 = f32[32,128,256]{1,0,2} divide(%transpose.461, %broadcast.13987)
  %select.3305 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.461, %divide.1635)
  %multiply.8908 = f32[32,128,256]{1,0,2} multiply(%select.3305, %broadcast.13989)
  %param.655 = f32[32,128,256]{2,1,0} parameter(471), sharding={devices=[1,1,16]<=[16]}
  %multiply.8910 = f32[32,128,256]{2,1,0} multiply(%param.655, %broadcast.13991)
  %add.5992 = f32[32,128,256]{1,0,2} add(%multiply.8908, %multiply.8910)
  %multiply.8911 = f32[32,128,256]{1,0,2} multiply(%select.3305, %select.3305)
  %multiply.8912 = f32[32,128,256]{1,0,2} multiply(%multiply.8911, %broadcast.13993)
  %param.656 = f32[32,128,256]{2,1,0} parameter(762), sharding={devices=[1,1,16]<=[16]}
  %multiply.8913 = f32[32,128,256]{2,1,0} multiply(%param.656, %broadcast.13994)
  %add.5993 = f32[32,128,256]{1,0,2} add(%multiply.8912, %multiply.8913)
  %divide.1636 = f32[32,128,256]{1,0,2} divide(%add.5993, %broadcast.13996)
  %sqrt.179 = f32[32,128,256]{1,0,2} sqrt(%divide.1636)
  %add.5994 = f32[32,128,256]{1,0,2} add(%sqrt.179, %broadcast.13998)
  %multiply.8914 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.5994)
  %divide.1637 = f32[32,128,256]{1,0,2} divide(%add.5992, %multiply.8914)
  %multiply.8915 = f32[32,128,256]{2,1,0} multiply(%param.245, %broadcast.13989)
  %add.5995 = f32[32,128,256]{1,0,2} add(%divide.1637, %multiply.8915)
  %multiply.8917 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.5995)
  %add.5996 = f32[32,128,256]{2,1,0} add(%param.245, %multiply.8917)
  %divide.1638 = f32[256,32,128]{0,2,1} divide(%transpose.462, %broadcast.14001)
  %select.3306 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.462, %divide.1638)
  %multiply.8918 = f32[256,32,128]{0,2,1} multiply(%select.3306, %broadcast.14002)
  %param.657 = f32[256,32,128]{2,1,0} parameter(472), sharding={devices=[16,1,1]<=[16]}
  %multiply.8919 = f32[256,32,128]{2,1,0} multiply(%param.657, %broadcast.14003)
  %add.5997 = f32[256,32,128]{0,2,1} add(%multiply.8918, %multiply.8919)
  %multiply.8920 = f32[256,32,128]{0,2,1} multiply(%select.3306, %select.3306)
  %multiply.8921 = f32[256,32,128]{0,2,1} multiply(%multiply.8920, %broadcast.14005)
  %param.658 = f32[256,32,128]{2,1,0} parameter(763), sharding={devices=[16,1,1]<=[16]}
  %multiply.8922 = f32[256,32,128]{2,1,0} multiply(%param.658, %broadcast.14006)
  %add.5998 = f32[256,32,128]{0,2,1} add(%multiply.8921, %multiply.8922)
  %divide.1639 = f32[256,32,128]{0,2,1} divide(%add.5998, %broadcast.14007)
  %sqrt.180 = f32[256,32,128]{0,2,1} sqrt(%divide.1639)
  %add.6000 = f32[256,32,128]{0,2,1} add(%sqrt.180, %broadcast.14008)
  %multiply.8923 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6000)
  %divide.1640 = f32[256,32,128]{0,2,1} divide(%add.5997, %multiply.8923)
  %multiply.8924 = f32[256,32,128]{2,1,0} multiply(%param.242, %broadcast.14002)
  %add.6001 = f32[256,32,128]{0,2,1} add(%divide.1640, %multiply.8924)
  %multiply.8926 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6001)
  %add.6002 = f32[256,32,128]{2,1,0} add(%param.242, %multiply.8926)
  %divide.1641 = f32[256,8,128]{0,2,1} divide(%transpose.463, %broadcast.13977)
  %select.3307 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.463, %divide.1641)
  %multiply.8927 = f32[256,8,128]{0,2,1} multiply(%select.3307, %broadcast.13978)
  %param.659 = f32[256,8,128]{2,1,0} parameter(473), sharding={devices=[16,1,1]<=[16]}
  %multiply.8928 = f32[256,8,128]{2,1,0} multiply(%param.659, %broadcast.13979)
  %add.6003 = f32[256,8,128]{0,2,1} add(%multiply.8927, %multiply.8928)
  %multiply.8929 = f32[256,8,128]{0,2,1} multiply(%select.3307, %select.3307)
  %multiply.8930 = f32[256,8,128]{0,2,1} multiply(%multiply.8929, %broadcast.13981)
  %param.660 = f32[256,8,128]{2,1,0} parameter(764), sharding={devices=[16,1,1]<=[16]}
  %multiply.8931 = f32[256,8,128]{2,1,0} multiply(%param.660, %broadcast.13982)
  %add.6004 = f32[256,8,128]{0,2,1} add(%multiply.8930, %multiply.8931)
  %divide.1642 = f32[256,8,128]{0,2,1} divide(%add.6004, %broadcast.13983)
  %sqrt.181 = f32[256,8,128]{0,2,1} sqrt(%divide.1642)
  %add.6005 = f32[256,8,128]{0,2,1} add(%sqrt.181, %broadcast.13984)
  %multiply.8932 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6005)
  %divide.1643 = f32[256,8,128]{0,2,1} divide(%add.6003, %multiply.8932)
  %multiply.8933 = f32[256,8,128]{2,1,0} multiply(%param.244, %broadcast.13978)
  %add.6006 = f32[256,8,128]{0,2,1} add(%divide.1643, %multiply.8933)
  %multiply.8935 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6006)
  %add.6007 = f32[256,8,128]{2,1,0} add(%param.244, %multiply.8935)
  %divide.1644 = f32[256,14336]{0,1} divide(%convert.3374, %broadcast.13938)
  %select.3308 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3374, %divide.1644)
  %multiply.8936 = f32[256,14336]{0,1} multiply(%select.3308, %broadcast.13940)
  %param.661 = f32[256,14336]{1,0} parameter(474), sharding={devices=[16,1]<=[16]}
  %multiply.8937 = f32[256,14336]{1,0} multiply(%param.661, %broadcast.13942)
  %add.6008 = f32[256,14336]{0,1} add(%multiply.8936, %multiply.8937)
  %multiply.8938 = f32[256,14336]{0,1} multiply(%select.3308, %select.3308)
  %multiply.8939 = f32[256,14336]{0,1} multiply(%multiply.8938, %broadcast.13945)
  %param.662 = f32[256,14336]{1,0} parameter(765), sharding={devices=[16,1]<=[16]}
  %multiply.8940 = f32[256,14336]{1,0} multiply(%param.662, %broadcast.13947)
  %add.6009 = f32[256,14336]{0,1} add(%multiply.8939, %multiply.8940)
  %divide.1645 = f32[256,14336]{0,1} divide(%add.6009, %broadcast.13948)
  %sqrt.182 = f32[256,14336]{0,1} sqrt(%divide.1645)
  %add.6010 = f32[256,14336]{0,1} add(%sqrt.182, %broadcast.13949)
  %multiply.8941 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6010)
  %divide.1646 = f32[256,14336]{0,1} divide(%add.6008, %multiply.8941)
  %multiply.8942 = f32[256,14336]{1,0} multiply(%param.256, %broadcast.13940)
  %add.6011 = f32[256,14336]{0,1} add(%divide.1646, %multiply.8942)
  %multiply.8943 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6011)
  %add.6012 = f32[256,14336]{1,0} add(%param.256, %multiply.8943)
  %divide.1647 = f32[256,14336]{0,1} divide(%convert.3375, %broadcast.13938)
  %select.3309 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3375, %divide.1647)
  %multiply.8944 = f32[256,14336]{0,1} multiply(%select.3309, %broadcast.13940)
  %param.663 = f32[256,14336]{1,0} parameter(475), sharding={devices=[16,1]<=[16]}
  %multiply.8945 = f32[256,14336]{1,0} multiply(%param.663, %broadcast.13942)
  %add.6013 = f32[256,14336]{0,1} add(%multiply.8944, %multiply.8945)
  %multiply.8946 = f32[256,14336]{0,1} multiply(%select.3309, %select.3309)
  %multiply.8948 = f32[256,14336]{0,1} multiply(%multiply.8946, %broadcast.13945)
  %param.664 = f32[256,14336]{1,0} parameter(766), sharding={devices=[16,1]<=[16]}
  %multiply.8949 = f32[256,14336]{1,0} multiply(%param.664, %broadcast.13947)
  %add.6014 = f32[256,14336]{0,1} add(%multiply.8948, %multiply.8949)
  %divide.1648 = f32[256,14336]{0,1} divide(%add.6014, %broadcast.13948)
  %sqrt.183 = f32[256,14336]{0,1} sqrt(%divide.1648)
  %add.6015 = f32[256,14336]{0,1} add(%sqrt.183, %broadcast.13949)
  %multiply.8950 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6015)
  %divide.1649 = f32[256,14336]{0,1} divide(%add.6013, %multiply.8950)
  %multiply.8951 = f32[256,14336]{1,0} multiply(%param.257, %broadcast.13940)
  %add.6016 = f32[256,14336]{0,1} add(%divide.1649, %multiply.8951)
  %multiply.8952 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6016)
  %add.6017 = f32[256,14336]{1,0} add(%param.257, %multiply.8952)
  %divide.1650 = f32[14336,256]{0,1} divide(%convert.3376, %broadcast.13957)
  %select.3310 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3376, %divide.1650)
  %multiply.8953 = f32[14336,256]{0,1} multiply(%select.3310, %broadcast.13958)
  %param.665 = f32[14336,256]{1,0} parameter(476), sharding={devices=[1,16]<=[16]}
  %multiply.8955 = f32[14336,256]{1,0} multiply(%param.665, %broadcast.13959)
  %add.6018 = f32[14336,256]{0,1} add(%multiply.8953, %multiply.8955)
  %multiply.8956 = f32[14336,256]{0,1} multiply(%select.3310, %select.3310)
  %multiply.8957 = f32[14336,256]{0,1} multiply(%multiply.8956, %broadcast.13961)
  %param.666 = f32[14336,256]{1,0} parameter(767), sharding={devices=[1,16]<=[16]}
  %multiply.8958 = f32[14336,256]{1,0} multiply(%param.666, %broadcast.13962)
  %add.6019 = f32[14336,256]{0,1} add(%multiply.8957, %multiply.8958)
  %divide.1651 = f32[14336,256]{0,1} divide(%add.6019, %broadcast.13963)
  %sqrt.184 = f32[14336,256]{0,1} sqrt(%divide.1651)
  %add.6020 = f32[14336,256]{0,1} add(%sqrt.184, %broadcast.13964)
  %multiply.8959 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6020)
  %divide.1652 = f32[14336,256]{0,1} divide(%add.6018, %multiply.8959)
  %multiply.8960 = f32[14336,256]{1,0} multiply(%param.258, %broadcast.13958)
  %add.6021 = f32[14336,256]{0,1} add(%divide.1652, %multiply.8960)
  %multiply.8961 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6021)
  %add.6022 = f32[14336,256]{1,0} add(%param.258, %multiply.8961)
  %divide.1653 = f32[4096]{0} divide(%convert.3377, %broadcast.13924)
  %select.3311 = f32[4096]{0} select(%broadcast.13923, %convert.3377, %divide.1653)
  %multiply.8962 = f32[4096]{0} multiply(%select.3311, %broadcast.13925)
  %param.667 = f32[4096]{0} parameter(477), sharding={replicated}
  %multiply.8963 = f32[4096]{0} multiply(%param.667, %broadcast.13926)
  %add.6023 = f32[4096]{0} add(%multiply.8962, %multiply.8963)
  %multiply.8964 = f32[4096]{0} multiply(%select.3311, %select.3311)
  %multiply.8965 = f32[4096]{0} multiply(%multiply.8964, %broadcast.13928)
  %param.668 = f32[4096]{0} parameter(768), sharding={replicated}
  %multiply.8966 = f32[4096]{0} multiply(%param.668, %broadcast.13929)
  %add.6024 = f32[4096]{0} add(%multiply.8965, %multiply.8966)
  %divide.1654 = f32[4096]{0} divide(%add.6024, %broadcast.13931)
  %sqrt.185 = f32[4096]{0} sqrt(%divide.1654)
  %add.6025 = f32[4096]{0} add(%sqrt.185, %broadcast.13934)
  %multiply.8967 = f32[4096]{0} multiply(%broadcast.13927, %add.6025)
  %divide.1655 = f32[4096]{0} divide(%add.6023, %multiply.8967)
  %multiply.8968 = f32[4096]{0} multiply(%param.255, %broadcast.13925)
  %add.6026 = f32[4096]{0} add(%divide.1655, %multiply.8968)
  %multiply.8969 = f32[4096]{0} multiply(%broadcast.7107, %add.6026)
  %add.6027 = f32[4096]{0} add(%param.255, %multiply.8969)
  %divide.1656 = f32[4096]{0} divide(%convert.3379, %broadcast.13924)
  %select.3312 = f32[4096]{0} select(%broadcast.13923, %convert.3379, %divide.1656)
  %multiply.8970 = f32[4096]{0} multiply(%select.3312, %broadcast.13925)
  %param.669 = f32[4096]{0} parameter(478), sharding={replicated}
  %multiply.8971 = f32[4096]{0} multiply(%param.669, %broadcast.13926)
  %add.6028 = f32[4096]{0} add(%multiply.8970, %multiply.8971)
  %multiply.8972 = f32[4096]{0} multiply(%select.3312, %select.3312)
  %multiply.8973 = f32[4096]{0} multiply(%multiply.8972, %broadcast.13928)
  %param.670 = f32[4096]{0} parameter(769), sharding={replicated}
  %multiply.8974 = f32[4096]{0} multiply(%param.670, %broadcast.13929)
  %add.6029 = f32[4096]{0} add(%multiply.8973, %multiply.8974)
  %divide.1657 = f32[4096]{0} divide(%add.6029, %broadcast.13931)
  %sqrt.186 = f32[4096]{0} sqrt(%divide.1657)
  %add.6030 = f32[4096]{0} add(%sqrt.186, %broadcast.13934)
  %multiply.8975 = f32[4096]{0} multiply(%broadcast.13927, %add.6030)
  %divide.1658 = f32[4096]{0} divide(%add.6028, %multiply.8975)
  %multiply.8976 = f32[4096]{0} multiply(%param.250, %broadcast.13925)
  %add.6031 = f32[4096]{0} add(%divide.1658, %multiply.8976)
  %multiply.8977 = f32[4096]{0} multiply(%broadcast.7107, %add.6031)
  %add.6032 = f32[4096]{0} add(%param.250, %multiply.8977)
  %divide.1659 = f32[256,8,128]{0,2,1} divide(%transpose.464, %broadcast.13977)
  %select.3313 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.464, %divide.1659)
  %multiply.8978 = f32[256,8,128]{0,2,1} multiply(%select.3313, %broadcast.13978)
  %param.671 = f32[256,8,128]{2,1,0} parameter(479), sharding={devices=[16,1,1]<=[16]}
  %multiply.8979 = f32[256,8,128]{2,1,0} multiply(%param.671, %broadcast.13979)
  %add.6033 = f32[256,8,128]{0,2,1} add(%multiply.8978, %multiply.8979)
  %multiply.8980 = f32[256,8,128]{0,2,1} multiply(%select.3313, %select.3313)
  %multiply.8981 = f32[256,8,128]{0,2,1} multiply(%multiply.8980, %broadcast.13981)
  %param.672 = f32[256,8,128]{2,1,0} parameter(770), sharding={devices=[16,1,1]<=[16]}
  %multiply.8982 = f32[256,8,128]{2,1,0} multiply(%param.672, %broadcast.13982)
  %add.6034 = f32[256,8,128]{0,2,1} add(%multiply.8981, %multiply.8982)
  %divide.1660 = f32[256,8,128]{0,2,1} divide(%add.6034, %broadcast.13983)
  %sqrt.187 = f32[256,8,128]{0,2,1} sqrt(%divide.1660)
  %add.6035 = f32[256,8,128]{0,2,1} add(%sqrt.187, %broadcast.13984)
  %multiply.8983 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6035)
  %divide.1662 = f32[256,8,128]{0,2,1} divide(%add.6033, %multiply.8983)
  %multiply.8985 = f32[256,8,128]{2,1,0} multiply(%param.252, %broadcast.13978)
  %add.6036 = f32[256,8,128]{0,2,1} add(%divide.1662, %multiply.8985)
  %multiply.8986 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6036)
  %add.6038 = f32[256,8,128]{2,1,0} add(%param.252, %multiply.8986)
  %divide.1663 = f32[32,128,256]{1,0,2} divide(%transpose.465, %broadcast.13987)
  %select.3314 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.465, %divide.1663)
  %multiply.8987 = f32[32,128,256]{1,0,2} multiply(%select.3314, %broadcast.13989)
  %param.673 = f32[32,128,256]{2,1,0} parameter(480), sharding={devices=[1,1,16]<=[16]}
  %multiply.8988 = f32[32,128,256]{2,1,0} multiply(%param.673, %broadcast.13991)
  %add.6039 = f32[32,128,256]{1,0,2} add(%multiply.8987, %multiply.8988)
  %multiply.8989 = f32[32,128,256]{1,0,2} multiply(%select.3314, %select.3314)
  %multiply.8990 = f32[32,128,256]{1,0,2} multiply(%multiply.8989, %broadcast.13993)
  %param.674 = f32[32,128,256]{2,1,0} parameter(771), sharding={devices=[1,1,16]<=[16]}
  %multiply.8991 = f32[32,128,256]{2,1,0} multiply(%param.674, %broadcast.13994)
  %add.6040 = f32[32,128,256]{1,0,2} add(%multiply.8990, %multiply.8991)
  %divide.1664 = f32[32,128,256]{1,0,2} divide(%add.6040, %broadcast.13996)
  %sqrt.188 = f32[32,128,256]{1,0,2} sqrt(%divide.1664)
  %add.6041 = f32[32,128,256]{1,0,2} add(%sqrt.188, %broadcast.13998)
  %multiply.8992 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6041)
  %divide.1665 = f32[32,128,256]{1,0,2} divide(%add.6039, %multiply.8992)
  %multiply.8993 = f32[32,128,256]{2,1,0} multiply(%param.254, %broadcast.13989)
  %add.6042 = f32[32,128,256]{1,0,2} add(%divide.1665, %multiply.8993)
  %multiply.8994 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6042)
  %add.6043 = f32[32,128,256]{2,1,0} add(%param.254, %multiply.8994)
  %divide.1666 = f32[256,32,128]{0,2,1} divide(%transpose.466, %broadcast.14001)
  %select.3315 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.466, %divide.1666)
  %multiply.8995 = f32[256,32,128]{0,2,1} multiply(%select.3315, %broadcast.14002)
  %param.675 = f32[256,32,128]{2,1,0} parameter(481), sharding={devices=[16,1,1]<=[16]}
  %multiply.8996 = f32[256,32,128]{2,1,0} multiply(%param.675, %broadcast.14003)
  %add.6044 = f32[256,32,128]{0,2,1} add(%multiply.8995, %multiply.8996)
  %multiply.8997 = f32[256,32,128]{0,2,1} multiply(%select.3315, %select.3315)
  %multiply.8998 = f32[256,32,128]{0,2,1} multiply(%multiply.8997, %broadcast.14005)
  %param.676 = f32[256,32,128]{2,1,0} parameter(772), sharding={devices=[16,1,1]<=[16]}
  %multiply.8999 = f32[256,32,128]{2,1,0} multiply(%param.676, %broadcast.14006)
  %add.6045 = f32[256,32,128]{0,2,1} add(%multiply.8998, %multiply.8999)
  %divide.1667 = f32[256,32,128]{0,2,1} divide(%add.6045, %broadcast.14007)
  %sqrt.189 = f32[256,32,128]{0,2,1} sqrt(%divide.1667)
  %add.6046 = f32[256,32,128]{0,2,1} add(%sqrt.189, %broadcast.14008)
  %multiply.9001 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6046)
  %divide.1668 = f32[256,32,128]{0,2,1} divide(%add.6044, %multiply.9001)
  %multiply.9003 = f32[256,32,128]{2,1,0} multiply(%param.251, %broadcast.14002)
  %add.6047 = f32[256,32,128]{0,2,1} add(%divide.1668, %multiply.9003)
  %multiply.9004 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6047)
  %add.6048 = f32[256,32,128]{2,1,0} add(%param.251, %multiply.9004)
  %divide.1669 = f32[256,8,128]{0,2,1} divide(%transpose.467, %broadcast.13977)
  %select.3316 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.467, %divide.1669)
  %multiply.9005 = f32[256,8,128]{0,2,1} multiply(%select.3316, %broadcast.13978)
  %param.677 = f32[256,8,128]{2,1,0} parameter(482), sharding={devices=[16,1,1]<=[16]}
  %multiply.9006 = f32[256,8,128]{2,1,0} multiply(%param.677, %broadcast.13979)
  %add.6049 = f32[256,8,128]{0,2,1} add(%multiply.9005, %multiply.9006)
  %multiply.9007 = f32[256,8,128]{0,2,1} multiply(%select.3316, %select.3316)
  %multiply.9008 = f32[256,8,128]{0,2,1} multiply(%multiply.9007, %broadcast.13981)
  %param.678 = f32[256,8,128]{2,1,0} parameter(773), sharding={devices=[16,1,1]<=[16]}
  %multiply.9009 = f32[256,8,128]{2,1,0} multiply(%param.678, %broadcast.13982)
  %add.6050 = f32[256,8,128]{0,2,1} add(%multiply.9008, %multiply.9009)
  %divide.1670 = f32[256,8,128]{0,2,1} divide(%add.6050, %broadcast.13983)
  %sqrt.190 = f32[256,8,128]{0,2,1} sqrt(%divide.1670)
  %add.6051 = f32[256,8,128]{0,2,1} add(%sqrt.190, %broadcast.13984)
  %multiply.9010 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6051)
  %divide.1671 = f32[256,8,128]{0,2,1} divide(%add.6049, %multiply.9010)
  %multiply.9011 = f32[256,8,128]{2,1,0} multiply(%param.253, %broadcast.13978)
  %add.6052 = f32[256,8,128]{0,2,1} add(%divide.1671, %multiply.9011)
  %multiply.9012 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6052)
  %add.6053 = f32[256,8,128]{2,1,0} add(%param.253, %multiply.9012)
  %divide.1672 = f32[256,14336]{0,1} divide(%convert.3386, %broadcast.13938)
  %select.3317 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3386, %divide.1672)
  %multiply.9013 = f32[256,14336]{0,1} multiply(%select.3317, %broadcast.13940)
  %param.679 = f32[256,14336]{1,0} parameter(483), sharding={devices=[16,1]<=[16]}
  %multiply.9014 = f32[256,14336]{1,0} multiply(%param.679, %broadcast.13942)
  %add.6054 = f32[256,14336]{0,1} add(%multiply.9013, %multiply.9014)
  %multiply.9015 = f32[256,14336]{0,1} multiply(%select.3317, %select.3317)
  %multiply.9016 = f32[256,14336]{0,1} multiply(%multiply.9015, %broadcast.13945)
  %param.680 = f32[256,14336]{1,0} parameter(774), sharding={devices=[16,1]<=[16]}
  %multiply.9017 = f32[256,14336]{1,0} multiply(%param.680, %broadcast.13947)
  %add.6055 = f32[256,14336]{0,1} add(%multiply.9016, %multiply.9017)
  %divide.1673 = f32[256,14336]{0,1} divide(%add.6055, %broadcast.13948)
  %sqrt.191 = f32[256,14336]{0,1} sqrt(%divide.1673)
  %add.6056 = f32[256,14336]{0,1} add(%sqrt.191, %broadcast.13949)
  %multiply.9018 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6056)
  %divide.1674 = f32[256,14336]{0,1} divide(%add.6054, %multiply.9018)
  %multiply.9019 = f32[256,14336]{1,0} multiply(%param.265, %broadcast.13940)
  %add.6057 = f32[256,14336]{0,1} add(%divide.1674, %multiply.9019)
  %multiply.9020 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6057)
  %add.6058 = f32[256,14336]{1,0} add(%param.265, %multiply.9020)
  %divide.1675 = f32[256,14336]{0,1} divide(%convert.3387, %broadcast.13938)
  %select.3318 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3387, %divide.1675)
  %multiply.9021 = f32[256,14336]{0,1} multiply(%select.3318, %broadcast.13940)
  %param.681 = f32[256,14336]{1,0} parameter(484), sharding={devices=[16,1]<=[16]}
  %multiply.9022 = f32[256,14336]{1,0} multiply(%param.681, %broadcast.13942)
  %add.6059 = f32[256,14336]{0,1} add(%multiply.9021, %multiply.9022)
  %multiply.9023 = f32[256,14336]{0,1} multiply(%select.3318, %select.3318)
  %multiply.9024 = f32[256,14336]{0,1} multiply(%multiply.9023, %broadcast.13945)
  %param.682 = f32[256,14336]{1,0} parameter(775), sharding={devices=[16,1]<=[16]}
  %multiply.9025 = f32[256,14336]{1,0} multiply(%param.682, %broadcast.13947)
  %add.6060 = f32[256,14336]{0,1} add(%multiply.9024, %multiply.9025)
  %divide.1676 = f32[256,14336]{0,1} divide(%add.6060, %broadcast.13948)
  %sqrt.192 = f32[256,14336]{0,1} sqrt(%divide.1676)
  %add.6061 = f32[256,14336]{0,1} add(%sqrt.192, %broadcast.13949)
  %multiply.9026 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6061)
  %divide.1677 = f32[256,14336]{0,1} divide(%add.6059, %multiply.9026)
  %multiply.9027 = f32[256,14336]{1,0} multiply(%param.266, %broadcast.13940)
  %add.6062 = f32[256,14336]{0,1} add(%divide.1677, %multiply.9027)
  %multiply.9028 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6062)
  %add.6063 = f32[256,14336]{1,0} add(%param.266, %multiply.9028)
  %divide.1678 = f32[14336,256]{0,1} divide(%convert.3388, %broadcast.13957)
  %select.3319 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3388, %divide.1678)
  %multiply.9030 = f32[14336,256]{0,1} multiply(%select.3319, %broadcast.13958)
  %param.683 = f32[14336,256]{1,0} parameter(485), sharding={devices=[1,16]<=[16]}
  %multiply.9031 = f32[14336,256]{1,0} multiply(%param.683, %broadcast.13959)
  %add.6064 = f32[14336,256]{0,1} add(%multiply.9030, %multiply.9031)
  %multiply.9032 = f32[14336,256]{0,1} multiply(%select.3319, %select.3319)
  %multiply.9033 = f32[14336,256]{0,1} multiply(%multiply.9032, %broadcast.13961)
  %param.684 = f32[14336,256]{1,0} parameter(776), sharding={devices=[1,16]<=[16]}
  %multiply.9035 = f32[14336,256]{1,0} multiply(%param.684, %broadcast.13962)
  %add.6065 = f32[14336,256]{0,1} add(%multiply.9033, %multiply.9035)
  %divide.1679 = f32[14336,256]{0,1} divide(%add.6065, %broadcast.13963)
  %sqrt.193 = f32[14336,256]{0,1} sqrt(%divide.1679)
  %add.6066 = f32[14336,256]{0,1} add(%sqrt.193, %broadcast.13964)
  %multiply.9036 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6066)
  %divide.1680 = f32[14336,256]{0,1} divide(%add.6064, %multiply.9036)
  %multiply.9037 = f32[14336,256]{1,0} multiply(%param.267, %broadcast.13958)
  %add.6067 = f32[14336,256]{0,1} add(%divide.1680, %multiply.9037)
  %multiply.9038 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6067)
  %add.6069 = f32[14336,256]{1,0} add(%param.267, %multiply.9038)
  %divide.1681 = f32[4096]{0} divide(%convert.3389, %broadcast.13924)
  %select.3320 = f32[4096]{0} select(%broadcast.13923, %convert.3389, %divide.1681)
  %multiply.9039 = f32[4096]{0} multiply(%select.3320, %broadcast.13925)
  %param.685 = f32[4096]{0} parameter(486), sharding={replicated}
  %multiply.9041 = f32[4096]{0} multiply(%param.685, %broadcast.13926)
  %add.6070 = f32[4096]{0} add(%multiply.9039, %multiply.9041)
  %multiply.9042 = f32[4096]{0} multiply(%select.3320, %select.3320)
  %multiply.9043 = f32[4096]{0} multiply(%multiply.9042, %broadcast.13928)
  %param.686 = f32[4096]{0} parameter(777), sharding={replicated}
  %multiply.9044 = f32[4096]{0} multiply(%param.686, %broadcast.13929)
  %add.6071 = f32[4096]{0} add(%multiply.9043, %multiply.9044)
  %divide.1682 = f32[4096]{0} divide(%add.6071, %broadcast.13931)
  %sqrt.194 = f32[4096]{0} sqrt(%divide.1682)
  %add.6072 = f32[4096]{0} add(%sqrt.194, %broadcast.13934)
  %multiply.9045 = f32[4096]{0} multiply(%broadcast.13927, %add.6072)
  %divide.1683 = f32[4096]{0} divide(%add.6070, %multiply.9045)
  %multiply.9046 = f32[4096]{0} multiply(%param.264, %broadcast.13925)
  %add.6073 = f32[4096]{0} add(%divide.1683, %multiply.9046)
  %multiply.9047 = f32[4096]{0} multiply(%broadcast.7107, %add.6073)
  %add.6074 = f32[4096]{0} add(%param.264, %multiply.9047)
  %divide.1684 = f32[4096]{0} divide(%convert.3391, %broadcast.13924)
  %select.3321 = f32[4096]{0} select(%broadcast.13923, %convert.3391, %divide.1684)
  %multiply.9048 = f32[4096]{0} multiply(%select.3321, %broadcast.13925)
  %param.687 = f32[4096]{0} parameter(487), sharding={replicated}
  %multiply.9049 = f32[4096]{0} multiply(%param.687, %broadcast.13926)
  %add.6075 = f32[4096]{0} add(%multiply.9048, %multiply.9049)
  %multiply.9050 = f32[4096]{0} multiply(%select.3321, %select.3321)
  %multiply.9051 = f32[4096]{0} multiply(%multiply.9050, %broadcast.13928)
  %param.688 = f32[4096]{0} parameter(778), sharding={replicated}
  %multiply.9052 = f32[4096]{0} multiply(%param.688, %broadcast.13929)
  %add.6077 = f32[4096]{0} add(%multiply.9051, %multiply.9052)
  %divide.1685 = f32[4096]{0} divide(%add.6077, %broadcast.13931)
  %sqrt.195 = f32[4096]{0} sqrt(%divide.1685)
  %add.6078 = f32[4096]{0} add(%sqrt.195, %broadcast.13934)
  %multiply.9053 = f32[4096]{0} multiply(%broadcast.13927, %add.6078)
  %divide.1686 = f32[4096]{0} divide(%add.6075, %multiply.9053)
  %multiply.9054 = f32[4096]{0} multiply(%param.259, %broadcast.13925)
  %add.6079 = f32[4096]{0} add(%divide.1686, %multiply.9054)
  %multiply.9055 = f32[4096]{0} multiply(%broadcast.7107, %add.6079)
  %add.6080 = f32[4096]{0} add(%param.259, %multiply.9055)
  %divide.1687 = f32[256,8,128]{0,2,1} divide(%transpose.468, %broadcast.13977)
  %select.3322 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.468, %divide.1687)
  %multiply.9056 = f32[256,8,128]{0,2,1} multiply(%select.3322, %broadcast.13978)
  %param.689 = f32[256,8,128]{2,1,0} parameter(488), sharding={devices=[16,1,1]<=[16]}
  %multiply.9057 = f32[256,8,128]{2,1,0} multiply(%param.689, %broadcast.13979)
  %add.6081 = f32[256,8,128]{0,2,1} add(%multiply.9056, %multiply.9057)
  %multiply.9058 = f32[256,8,128]{0,2,1} multiply(%select.3322, %select.3322)
  %multiply.9059 = f32[256,8,128]{0,2,1} multiply(%multiply.9058, %broadcast.13981)
  %param.690 = f32[256,8,128]{2,1,0} parameter(779), sharding={devices=[16,1,1]<=[16]}
  %multiply.9061 = f32[256,8,128]{2,1,0} multiply(%param.690, %broadcast.13982)
  %add.6082 = f32[256,8,128]{0,2,1} add(%multiply.9059, %multiply.9061)
  %divide.1688 = f32[256,8,128]{0,2,1} divide(%add.6082, %broadcast.13983)
  %sqrt.196 = f32[256,8,128]{0,2,1} sqrt(%divide.1688)
  %add.6083 = f32[256,8,128]{0,2,1} add(%sqrt.196, %broadcast.13984)
  %multiply.9062 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6083)
  %divide.1689 = f32[256,8,128]{0,2,1} divide(%add.6081, %multiply.9062)
  %multiply.9063 = f32[256,8,128]{2,1,0} multiply(%param.261, %broadcast.13978)
  %add.6084 = f32[256,8,128]{0,2,1} add(%divide.1689, %multiply.9063)
  %multiply.9064 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6084)
  %add.6085 = f32[256,8,128]{2,1,0} add(%param.261, %multiply.9064)
  %divide.1690 = f32[32,128,256]{1,0,2} divide(%transpose.469, %broadcast.13987)
  %select.3323 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.469, %divide.1690)
  %multiply.9065 = f32[32,128,256]{1,0,2} multiply(%select.3323, %broadcast.13989)
  %param.691 = f32[32,128,256]{2,1,0} parameter(489), sharding={devices=[1,1,16]<=[16]}
  %multiply.9066 = f32[32,128,256]{2,1,0} multiply(%param.691, %broadcast.13991)
  %add.6086 = f32[32,128,256]{1,0,2} add(%multiply.9065, %multiply.9066)
  %multiply.9067 = f32[32,128,256]{1,0,2} multiply(%select.3323, %select.3323)
  %multiply.9068 = f32[32,128,256]{1,0,2} multiply(%multiply.9067, %broadcast.13993)
  %param.692 = f32[32,128,256]{2,1,0} parameter(780), sharding={devices=[1,1,16]<=[16]}
  %multiply.9069 = f32[32,128,256]{2,1,0} multiply(%param.692, %broadcast.13994)
  %add.6087 = f32[32,128,256]{1,0,2} add(%multiply.9068, %multiply.9069)
  %divide.1691 = f32[32,128,256]{1,0,2} divide(%add.6087, %broadcast.13996)
  %sqrt.197 = f32[32,128,256]{1,0,2} sqrt(%divide.1691)
  %add.6088 = f32[32,128,256]{1,0,2} add(%sqrt.197, %broadcast.13998)
  %multiply.9070 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6088)
  %divide.1692 = f32[32,128,256]{1,0,2} divide(%add.6086, %multiply.9070)
  %multiply.9071 = f32[32,128,256]{2,1,0} multiply(%param.263, %broadcast.13989)
  %add.6089 = f32[32,128,256]{1,0,2} add(%divide.1692, %multiply.9071)
  %multiply.9072 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6089)
  %add.6090 = f32[32,128,256]{2,1,0} add(%param.263, %multiply.9072)
  %divide.1693 = f32[256,32,128]{0,2,1} divide(%transpose.470, %broadcast.14001)
  %select.3324 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.470, %divide.1693)
  %multiply.9073 = f32[256,32,128]{0,2,1} multiply(%select.3324, %broadcast.14002)
  %param.693 = f32[256,32,128]{2,1,0} parameter(490), sharding={devices=[16,1,1]<=[16]}
  %multiply.9074 = f32[256,32,128]{2,1,0} multiply(%param.693, %broadcast.14003)
  %add.6091 = f32[256,32,128]{0,2,1} add(%multiply.9073, %multiply.9074)
  %multiply.9075 = f32[256,32,128]{0,2,1} multiply(%select.3324, %select.3324)
  %multiply.9077 = f32[256,32,128]{0,2,1} multiply(%multiply.9075, %broadcast.14005)
  %param.694 = f32[256,32,128]{2,1,0} parameter(781), sharding={devices=[16,1,1]<=[16]}
  %multiply.9079 = f32[256,32,128]{2,1,0} multiply(%param.694, %broadcast.14006)
  %add.6092 = f32[256,32,128]{0,2,1} add(%multiply.9077, %multiply.9079)
  %divide.1694 = f32[256,32,128]{0,2,1} divide(%add.6092, %broadcast.14007)
  %sqrt.198 = f32[256,32,128]{0,2,1} sqrt(%divide.1694)
  %add.6093 = f32[256,32,128]{0,2,1} add(%sqrt.198, %broadcast.14008)
  %multiply.9080 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6093)
  %divide.1695 = f32[256,32,128]{0,2,1} divide(%add.6091, %multiply.9080)
  %multiply.9081 = f32[256,32,128]{2,1,0} multiply(%param.260, %broadcast.14002)
  %add.6095 = f32[256,32,128]{0,2,1} add(%divide.1695, %multiply.9081)
  %multiply.9082 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6095)
  %add.6096 = f32[256,32,128]{2,1,0} add(%param.260, %multiply.9082)
  %divide.1696 = f32[256,8,128]{0,2,1} divide(%transpose.471, %broadcast.13977)
  %select.3325 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.471, %divide.1696)
  %multiply.9083 = f32[256,8,128]{0,2,1} multiply(%select.3325, %broadcast.13978)
  %param.695 = f32[256,8,128]{2,1,0} parameter(491), sharding={devices=[16,1,1]<=[16]}
  %multiply.9084 = f32[256,8,128]{2,1,0} multiply(%param.695, %broadcast.13979)
  %add.6097 = f32[256,8,128]{0,2,1} add(%multiply.9083, %multiply.9084)
  %multiply.9085 = f32[256,8,128]{0,2,1} multiply(%select.3325, %select.3325)
  %multiply.9086 = f32[256,8,128]{0,2,1} multiply(%multiply.9085, %broadcast.13981)
  %param.696 = f32[256,8,128]{2,1,0} parameter(782), sharding={devices=[16,1,1]<=[16]}
  %multiply.9087 = f32[256,8,128]{2,1,0} multiply(%param.696, %broadcast.13982)
  %add.6098 = f32[256,8,128]{0,2,1} add(%multiply.9086, %multiply.9087)
  %divide.1697 = f32[256,8,128]{0,2,1} divide(%add.6098, %broadcast.13983)
  %sqrt.199 = f32[256,8,128]{0,2,1} sqrt(%divide.1697)
  %add.6100 = f32[256,8,128]{0,2,1} add(%sqrt.199, %broadcast.13984)
  %multiply.9088 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6100)
  %divide.1698 = f32[256,8,128]{0,2,1} divide(%add.6097, %multiply.9088)
  %multiply.9089 = f32[256,8,128]{2,1,0} multiply(%param.262, %broadcast.13978)
  %add.6101 = f32[256,8,128]{0,2,1} add(%divide.1698, %multiply.9089)
  %multiply.9090 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6101)
  %add.6102 = f32[256,8,128]{2,1,0} add(%param.262, %multiply.9090)
  %divide.1699 = f32[256,14336]{0,1} divide(%convert.3399, %broadcast.13938)
  %select.3326 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3399, %divide.1699)
  %multiply.9091 = f32[256,14336]{0,1} multiply(%select.3326, %broadcast.13940)
  %param.697 = f32[256,14336]{1,0} parameter(492), sharding={devices=[16,1]<=[16]}
  %multiply.9092 = f32[256,14336]{1,0} multiply(%param.697, %broadcast.13942)
  %add.6103 = f32[256,14336]{0,1} add(%multiply.9091, %multiply.9092)
  %multiply.9093 = f32[256,14336]{0,1} multiply(%select.3326, %select.3326)
  %multiply.9094 = f32[256,14336]{0,1} multiply(%multiply.9093, %broadcast.13945)
  %param.698 = f32[256,14336]{1,0} parameter(783), sharding={devices=[16,1]<=[16]}
  %multiply.9095 = f32[256,14336]{1,0} multiply(%param.698, %broadcast.13947)
  %add.6105 = f32[256,14336]{0,1} add(%multiply.9094, %multiply.9095)
  %divide.1700 = f32[256,14336]{0,1} divide(%add.6105, %broadcast.13948)
  %sqrt.200 = f32[256,14336]{0,1} sqrt(%divide.1700)
  %add.6106 = f32[256,14336]{0,1} add(%sqrt.200, %broadcast.13949)
  %multiply.9096 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6106)
  %divide.1701 = f32[256,14336]{0,1} divide(%add.6103, %multiply.9096)
  %multiply.9097 = f32[256,14336]{1,0} multiply(%param.274, %broadcast.13940)
  %add.6107 = f32[256,14336]{0,1} add(%divide.1701, %multiply.9097)
  %multiply.9098 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6107)
  %add.6108 = f32[256,14336]{1,0} add(%param.274, %multiply.9098)
  %divide.1702 = f32[256,14336]{0,1} divide(%convert.3400, %broadcast.13938)
  %select.3327 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3400, %divide.1702)
  %multiply.9099 = f32[256,14336]{0,1} multiply(%select.3327, %broadcast.13940)
  %param.699 = f32[256,14336]{1,0} parameter(493), sharding={devices=[16,1]<=[16]}
  %multiply.9100 = f32[256,14336]{1,0} multiply(%param.699, %broadcast.13942)
  %add.6109 = f32[256,14336]{0,1} add(%multiply.9099, %multiply.9100)
  %multiply.9101 = f32[256,14336]{0,1} multiply(%select.3327, %select.3327)
  %multiply.9102 = f32[256,14336]{0,1} multiply(%multiply.9101, %broadcast.13945)
  %param.700 = f32[256,14336]{1,0} parameter(784), sharding={devices=[16,1]<=[16]}
  %multiply.9103 = f32[256,14336]{1,0} multiply(%param.700, %broadcast.13947)
  %add.6110 = f32[256,14336]{0,1} add(%multiply.9102, %multiply.9103)
  %divide.1703 = f32[256,14336]{0,1} divide(%add.6110, %broadcast.13948)
  %sqrt.201 = f32[256,14336]{0,1} sqrt(%divide.1703)
  %add.6111 = f32[256,14336]{0,1} add(%sqrt.201, %broadcast.13949)
  %multiply.9104 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6111)
  %divide.1704 = f32[256,14336]{0,1} divide(%add.6109, %multiply.9104)
  %multiply.9106 = f32[256,14336]{1,0} multiply(%param.275, %broadcast.13940)
  %add.6112 = f32[256,14336]{0,1} add(%divide.1704, %multiply.9106)
  %multiply.9107 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6112)
  %add.6113 = f32[256,14336]{1,0} add(%param.275, %multiply.9107)
  %divide.1705 = f32[14336,256]{0,1} divide(%convert.3401, %broadcast.13957)
  %select.3328 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3401, %divide.1705)
  %multiply.9108 = f32[14336,256]{0,1} multiply(%select.3328, %broadcast.13958)
  %param.701 = f32[14336,256]{1,0} parameter(494), sharding={devices=[1,16]<=[16]}
  %multiply.9109 = f32[14336,256]{1,0} multiply(%param.701, %broadcast.13959)
  %add.6114 = f32[14336,256]{0,1} add(%multiply.9108, %multiply.9109)
  %multiply.9111 = f32[14336,256]{0,1} multiply(%select.3328, %select.3328)
  %multiply.9112 = f32[14336,256]{0,1} multiply(%multiply.9111, %broadcast.13961)
  %param.702 = f32[14336,256]{1,0} parameter(785), sharding={devices=[1,16]<=[16]}
  %multiply.9113 = f32[14336,256]{1,0} multiply(%param.702, %broadcast.13962)
  %add.6115 = f32[14336,256]{0,1} add(%multiply.9112, %multiply.9113)
  %divide.1707 = f32[14336,256]{0,1} divide(%add.6115, %broadcast.13963)
  %sqrt.202 = f32[14336,256]{0,1} sqrt(%divide.1707)
  %add.6116 = f32[14336,256]{0,1} add(%sqrt.202, %broadcast.13964)
  %multiply.9114 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6116)
  %divide.1708 = f32[14336,256]{0,1} divide(%add.6114, %multiply.9114)
  %multiply.9115 = f32[14336,256]{1,0} multiply(%param.276, %broadcast.13958)
  %add.6117 = f32[14336,256]{0,1} add(%divide.1708, %multiply.9115)
  %multiply.9117 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6117)
  %add.6118 = f32[14336,256]{1,0} add(%param.276, %multiply.9117)
  %divide.1709 = f32[4096]{0} divide(%convert.3402, %broadcast.13924)
  %select.3329 = f32[4096]{0} select(%broadcast.13923, %convert.3402, %divide.1709)
  %multiply.9118 = f32[4096]{0} multiply(%select.3329, %broadcast.13925)
  %param.703 = f32[4096]{0} parameter(495), sharding={replicated}
  %multiply.9119 = f32[4096]{0} multiply(%param.703, %broadcast.13926)
  %add.6119 = f32[4096]{0} add(%multiply.9118, %multiply.9119)
  %multiply.9120 = f32[4096]{0} multiply(%select.3329, %select.3329)
  %multiply.9121 = f32[4096]{0} multiply(%multiply.9120, %broadcast.13928)
  %param.704 = f32[4096]{0} parameter(786), sharding={replicated}
  %multiply.9122 = f32[4096]{0} multiply(%param.704, %broadcast.13929)
  %add.6120 = f32[4096]{0} add(%multiply.9121, %multiply.9122)
  %divide.1712 = f32[4096]{0} divide(%add.6120, %broadcast.13931)
  %sqrt.203 = f32[4096]{0} sqrt(%divide.1712)
  %add.6121 = f32[4096]{0} add(%sqrt.203, %broadcast.13934)
  %multiply.9123 = f32[4096]{0} multiply(%broadcast.13927, %add.6121)
  %divide.1713 = f32[4096]{0} divide(%add.6119, %multiply.9123)
  %multiply.9124 = f32[4096]{0} multiply(%param.273, %broadcast.13925)
  %add.6122 = f32[4096]{0} add(%divide.1713, %multiply.9124)
  %multiply.9125 = f32[4096]{0} multiply(%broadcast.7107, %add.6122)
  %add.6123 = f32[4096]{0} add(%param.273, %multiply.9125)
  %divide.1714 = f32[4096]{0} divide(%convert.3404, %broadcast.13924)
  %select.3330 = f32[4096]{0} select(%broadcast.13923, %convert.3404, %divide.1714)
  %multiply.9126 = f32[4096]{0} multiply(%select.3330, %broadcast.13925)
  %param.705 = f32[4096]{0} parameter(496), sharding={replicated}
  %multiply.9127 = f32[4096]{0} multiply(%param.705, %broadcast.13926)
  %add.6124 = f32[4096]{0} add(%multiply.9126, %multiply.9127)
  %multiply.9128 = f32[4096]{0} multiply(%select.3330, %select.3330)
  %multiply.9129 = f32[4096]{0} multiply(%multiply.9128, %broadcast.13928)
  %param.706 = f32[4096]{0} parameter(787), sharding={replicated}
  %multiply.9130 = f32[4096]{0} multiply(%param.706, %broadcast.13929)
  %add.6125 = f32[4096]{0} add(%multiply.9129, %multiply.9130)
  %divide.1715 = f32[4096]{0} divide(%add.6125, %broadcast.13931)
  %sqrt.204 = f32[4096]{0} sqrt(%divide.1715)
  %add.6126 = f32[4096]{0} add(%sqrt.204, %broadcast.13934)
  %multiply.9131 = f32[4096]{0} multiply(%broadcast.13927, %add.6126)
  %divide.1717 = f32[4096]{0} divide(%add.6124, %multiply.9131)
  %multiply.9132 = f32[4096]{0} multiply(%param.268, %broadcast.13925)
  %add.6127 = f32[4096]{0} add(%divide.1717, %multiply.9132)
  %multiply.9133 = f32[4096]{0} multiply(%broadcast.7107, %add.6127)
  %add.6128 = f32[4096]{0} add(%param.268, %multiply.9133)
  %divide.1719 = f32[256,8,128]{0,2,1} divide(%transpose.472, %broadcast.13977)
  %select.3331 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.472, %divide.1719)
  %multiply.9134 = f32[256,8,128]{0,2,1} multiply(%select.3331, %broadcast.13978)
  %param.707 = f32[256,8,128]{2,1,0} parameter(497), sharding={devices=[16,1,1]<=[16]}
  %multiply.9135 = f32[256,8,128]{2,1,0} multiply(%param.707, %broadcast.13979)
  %add.6129 = f32[256,8,128]{0,2,1} add(%multiply.9134, %multiply.9135)
  %multiply.9136 = f32[256,8,128]{0,2,1} multiply(%select.3331, %select.3331)
  %multiply.9137 = f32[256,8,128]{0,2,1} multiply(%multiply.9136, %broadcast.13981)
  %param.708 = f32[256,8,128]{2,1,0} parameter(788), sharding={devices=[16,1,1]<=[16]}
  %multiply.9138 = f32[256,8,128]{2,1,0} multiply(%param.708, %broadcast.13982)
  %add.6131 = f32[256,8,128]{0,2,1} add(%multiply.9137, %multiply.9138)
  %divide.1720 = f32[256,8,128]{0,2,1} divide(%add.6131, %broadcast.13983)
  %sqrt.205 = f32[256,8,128]{0,2,1} sqrt(%divide.1720)
  %add.6132 = f32[256,8,128]{0,2,1} add(%sqrt.205, %broadcast.13984)
  %multiply.9139 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6132)
  %divide.1722 = f32[256,8,128]{0,2,1} divide(%add.6129, %multiply.9139)
  %multiply.9140 = f32[256,8,128]{2,1,0} multiply(%param.270, %broadcast.13978)
  %add.6133 = f32[256,8,128]{0,2,1} add(%divide.1722, %multiply.9140)
  %multiply.9141 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6133)
  %add.6134 = f32[256,8,128]{2,1,0} add(%param.270, %multiply.9141)
  %divide.1723 = f32[32,128,256]{1,0,2} divide(%transpose.473, %broadcast.13987)
  %select.3332 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.473, %divide.1723)
  %multiply.9142 = f32[32,128,256]{1,0,2} multiply(%select.3332, %broadcast.13989)
  %param.709 = f32[32,128,256]{2,1,0} parameter(498), sharding={devices=[1,1,16]<=[16]}
  %multiply.9143 = f32[32,128,256]{2,1,0} multiply(%param.709, %broadcast.13991)
  %add.6135 = f32[32,128,256]{1,0,2} add(%multiply.9142, %multiply.9143)
  %multiply.9144 = f32[32,128,256]{1,0,2} multiply(%select.3332, %select.3332)
  %multiply.9145 = f32[32,128,256]{1,0,2} multiply(%multiply.9144, %broadcast.13993)
  %param.710 = f32[32,128,256]{2,1,0} parameter(789), sharding={devices=[1,1,16]<=[16]}
  %multiply.9146 = f32[32,128,256]{2,1,0} multiply(%param.710, %broadcast.13994)
  %add.6136 = f32[32,128,256]{1,0,2} add(%multiply.9145, %multiply.9146)
  %divide.1725 = f32[32,128,256]{1,0,2} divide(%add.6136, %broadcast.13996)
  %sqrt.206 = f32[32,128,256]{1,0,2} sqrt(%divide.1725)
  %add.6138 = f32[32,128,256]{1,0,2} add(%sqrt.206, %broadcast.13998)
  %multiply.9147 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6138)
  %divide.1726 = f32[32,128,256]{1,0,2} divide(%add.6135, %multiply.9147)
  %multiply.9148 = f32[32,128,256]{2,1,0} multiply(%param.272, %broadcast.13989)
  %add.6139 = f32[32,128,256]{1,0,2} add(%divide.1726, %multiply.9148)
  %multiply.9149 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6139)
  %add.6140 = f32[32,128,256]{2,1,0} add(%param.272, %multiply.9149)
  %divide.1727 = f32[256,32,128]{0,2,1} divide(%transpose.474, %broadcast.14001)
  %select.3333 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.474, %divide.1727)
  %multiply.9150 = f32[256,32,128]{0,2,1} multiply(%select.3333, %broadcast.14002)
  %param.711 = f32[256,32,128]{2,1,0} parameter(499), sharding={devices=[16,1,1]<=[16]}
  %multiply.9151 = f32[256,32,128]{2,1,0} multiply(%param.711, %broadcast.14003)
  %add.6141 = f32[256,32,128]{0,2,1} add(%multiply.9150, %multiply.9151)
  %multiply.9152 = f32[256,32,128]{0,2,1} multiply(%select.3333, %select.3333)
  %multiply.9153 = f32[256,32,128]{0,2,1} multiply(%multiply.9152, %broadcast.14005)
  %param.712 = f32[256,32,128]{2,1,0} parameter(790), sharding={devices=[16,1,1]<=[16]}
  %multiply.9154 = f32[256,32,128]{2,1,0} multiply(%param.712, %broadcast.14006)
  %add.6143 = f32[256,32,128]{0,2,1} add(%multiply.9153, %multiply.9154)
  %divide.1728 = f32[256,32,128]{0,2,1} divide(%add.6143, %broadcast.14007)
  %sqrt.207 = f32[256,32,128]{0,2,1} sqrt(%divide.1728)
  %add.6144 = f32[256,32,128]{0,2,1} add(%sqrt.207, %broadcast.14008)
  %multiply.9155 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6144)
  %divide.1730 = f32[256,32,128]{0,2,1} divide(%add.6141, %multiply.9155)
  %multiply.9156 = f32[256,32,128]{2,1,0} multiply(%param.269, %broadcast.14002)
  %add.6145 = f32[256,32,128]{0,2,1} add(%divide.1730, %multiply.9156)
  %multiply.9157 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6145)
  %add.6146 = f32[256,32,128]{2,1,0} add(%param.269, %multiply.9157)
  %divide.1731 = f32[256,8,128]{0,2,1} divide(%transpose.475, %broadcast.13977)
  %select.3334 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.475, %divide.1731)
  %multiply.9158 = f32[256,8,128]{0,2,1} multiply(%select.3334, %broadcast.13978)
  %param.713 = f32[256,8,128]{2,1,0} parameter(500), sharding={devices=[16,1,1]<=[16]}
  %multiply.9159 = f32[256,8,128]{2,1,0} multiply(%param.713, %broadcast.13979)
  %add.6147 = f32[256,8,128]{0,2,1} add(%multiply.9158, %multiply.9159)
  %multiply.9160 = f32[256,8,128]{0,2,1} multiply(%select.3334, %select.3334)
  %multiply.9161 = f32[256,8,128]{0,2,1} multiply(%multiply.9160, %broadcast.13981)
  %param.714 = f32[256,8,128]{2,1,0} parameter(791), sharding={devices=[16,1,1]<=[16]}
  %multiply.9162 = f32[256,8,128]{2,1,0} multiply(%param.714, %broadcast.13982)
  %add.6148 = f32[256,8,128]{0,2,1} add(%multiply.9161, %multiply.9162)
  %divide.1732 = f32[256,8,128]{0,2,1} divide(%add.6148, %broadcast.13983)
  %sqrt.208 = f32[256,8,128]{0,2,1} sqrt(%divide.1732)
  %add.6149 = f32[256,8,128]{0,2,1} add(%sqrt.208, %broadcast.13984)
  %multiply.9163 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6149)
  %divide.1733 = f32[256,8,128]{0,2,1} divide(%add.6147, %multiply.9163)
  %multiply.9164 = f32[256,8,128]{2,1,0} multiply(%param.271, %broadcast.13978)
  %add.6150 = f32[256,8,128]{0,2,1} add(%divide.1733, %multiply.9164)
  %multiply.9165 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6150)
  %add.6151 = f32[256,8,128]{2,1,0} add(%param.271, %multiply.9165)
  %divide.1734 = f32[256,14336]{0,1} divide(%convert.3410, %broadcast.13938)
  %select.3335 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3410, %divide.1734)
  %multiply.9166 = f32[256,14336]{0,1} multiply(%select.3335, %broadcast.13940)
  %param.715 = f32[256,14336]{1,0} parameter(501), sharding={devices=[16,1]<=[16]}
  %multiply.9167 = f32[256,14336]{1,0} multiply(%param.715, %broadcast.13942)
  %add.6152 = f32[256,14336]{0,1} add(%multiply.9166, %multiply.9167)
  %multiply.9168 = f32[256,14336]{0,1} multiply(%select.3335, %select.3335)
  %multiply.9169 = f32[256,14336]{0,1} multiply(%multiply.9168, %broadcast.13945)
  %param.716 = f32[256,14336]{1,0} parameter(792), sharding={devices=[16,1]<=[16]}
  %multiply.9170 = f32[256,14336]{1,0} multiply(%param.716, %broadcast.13947)
  %add.6153 = f32[256,14336]{0,1} add(%multiply.9169, %multiply.9170)
  %divide.1735 = f32[256,14336]{0,1} divide(%add.6153, %broadcast.13948)
  %sqrt.209 = f32[256,14336]{0,1} sqrt(%divide.1735)
  %add.6154 = f32[256,14336]{0,1} add(%sqrt.209, %broadcast.13949)
  %multiply.9171 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6154)
  %divide.1736 = f32[256,14336]{0,1} divide(%add.6152, %multiply.9171)
  %multiply.9172 = f32[256,14336]{1,0} multiply(%param.40, %broadcast.13940)
  %add.6155 = f32[256,14336]{0,1} add(%divide.1736, %multiply.9172)
  %multiply.9173 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6155)
  %add.6156 = f32[256,14336]{1,0} add(%param.40, %multiply.9173)
  %divide.1737 = f32[256,14336]{0,1} divide(%convert.3412, %broadcast.13938)
  %select.3336 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3412, %divide.1737)
  %multiply.9174 = f32[256,14336]{0,1} multiply(%select.3336, %broadcast.13940)
  %param.717 = f32[256,14336]{1,0} parameter(502), sharding={devices=[16,1]<=[16]}
  %multiply.9175 = f32[256,14336]{1,0} multiply(%param.717, %broadcast.13942)
  %add.6157 = f32[256,14336]{0,1} add(%multiply.9174, %multiply.9175)
  %multiply.9177 = f32[256,14336]{0,1} multiply(%select.3336, %select.3336)
  %multiply.9178 = f32[256,14336]{0,1} multiply(%multiply.9177, %broadcast.13945)
  %param.718 = f32[256,14336]{1,0} parameter(793), sharding={devices=[16,1]<=[16]}
  %multiply.9179 = f32[256,14336]{1,0} multiply(%param.718, %broadcast.13947)
  %add.6158 = f32[256,14336]{0,1} add(%multiply.9178, %multiply.9179)
  %divide.1739 = f32[256,14336]{0,1} divide(%add.6158, %broadcast.13948)
  %sqrt.210 = f32[256,14336]{0,1} sqrt(%divide.1739)
  %add.6159 = f32[256,14336]{0,1} add(%sqrt.210, %broadcast.13949)
  %multiply.9180 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6159)
  %divide.1740 = f32[256,14336]{0,1} divide(%add.6157, %multiply.9180)
  %multiply.9181 = f32[256,14336]{1,0} multiply(%param.41, %broadcast.13940)
  %add.6160 = f32[256,14336]{0,1} add(%divide.1740, %multiply.9181)
  %multiply.9182 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6160)
  %add.6161 = f32[256,14336]{1,0} add(%param.41, %multiply.9182)
  %divide.1741 = f32[14336,256]{0,1} divide(%convert.3413, %broadcast.13957)
  %select.3337 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3413, %divide.1741)
  %multiply.9183 = f32[14336,256]{0,1} multiply(%select.3337, %broadcast.13958)
  %param.719 = f32[14336,256]{1,0} parameter(503), sharding={devices=[1,16]<=[16]}
  %multiply.9184 = f32[14336,256]{1,0} multiply(%param.719, %broadcast.13959)
  %add.6162 = f32[14336,256]{0,1} add(%multiply.9183, %multiply.9184)
  %multiply.9185 = f32[14336,256]{0,1} multiply(%select.3337, %select.3337)
  %multiply.9186 = f32[14336,256]{0,1} multiply(%multiply.9185, %broadcast.13961)
  %param.720 = f32[14336,256]{1,0} parameter(794), sharding={devices=[1,16]<=[16]}
  %multiply.9187 = f32[14336,256]{1,0} multiply(%param.720, %broadcast.13962)
  %add.6163 = f32[14336,256]{0,1} add(%multiply.9186, %multiply.9187)
  %divide.1742 = f32[14336,256]{0,1} divide(%add.6163, %broadcast.13963)
  %sqrt.211 = f32[14336,256]{0,1} sqrt(%divide.1742)
  %add.6164 = f32[14336,256]{0,1} add(%sqrt.211, %broadcast.13964)
  %multiply.9188 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6164)
  %divide.1743 = f32[14336,256]{0,1} divide(%add.6162, %multiply.9188)
  %multiply.9190 = f32[14336,256]{1,0} multiply(%param.42, %broadcast.13958)
  %add.6165 = f32[14336,256]{0,1} add(%divide.1743, %multiply.9190)
  %multiply.9191 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6165)
  %add.6166 = f32[14336,256]{1,0} add(%param.42, %multiply.9191)
  %divide.1744 = f32[4096]{0} divide(%convert.3414, %broadcast.13924)
  %select.3338 = f32[4096]{0} select(%broadcast.13923, %convert.3414, %divide.1744)
  %multiply.9192 = f32[4096]{0} multiply(%select.3338, %broadcast.13925)
  %param.721 = f32[4096]{0} parameter(504), sharding={replicated}
  %multiply.9193 = f32[4096]{0} multiply(%param.721, %broadcast.13926)
  %add.6167 = f32[4096]{0} add(%multiply.9192, %multiply.9193)
  %multiply.9194 = f32[4096]{0} multiply(%select.3338, %select.3338)
  %multiply.9195 = f32[4096]{0} multiply(%multiply.9194, %broadcast.13928)
  %param.722 = f32[4096]{0} parameter(795), sharding={replicated}
  %multiply.9197 = f32[4096]{0} multiply(%param.722, %broadcast.13929)
  %add.6168 = f32[4096]{0} add(%multiply.9195, %multiply.9197)
  %divide.1745 = f32[4096]{0} divide(%add.6168, %broadcast.13931)
  %sqrt.212 = f32[4096]{0} sqrt(%divide.1745)
  %add.6169 = f32[4096]{0} add(%sqrt.212, %broadcast.13934)
  %multiply.9198 = f32[4096]{0} multiply(%broadcast.13927, %add.6169)
  %divide.1746 = f32[4096]{0} divide(%add.6167, %multiply.9198)
  %multiply.9199 = f32[4096]{0} multiply(%param.39, %broadcast.13925)
  %add.6170 = f32[4096]{0} add(%divide.1746, %multiply.9199)
  %multiply.9200 = f32[4096]{0} multiply(%broadcast.7107, %add.6170)
  %add.6171 = f32[4096]{0} add(%param.39, %multiply.9200)
  %divide.1747 = f32[4096]{0} divide(%convert.3416, %broadcast.13924)
  %select.3339 = f32[4096]{0} select(%broadcast.13923, %convert.3416, %divide.1747)
  %multiply.9201 = f32[4096]{0} multiply(%select.3339, %broadcast.13925)
  %param.723 = f32[4096]{0} parameter(505), sharding={replicated}
  %multiply.9202 = f32[4096]{0} multiply(%param.723, %broadcast.13926)
  %add.6172 = f32[4096]{0} add(%multiply.9201, %multiply.9202)
  %multiply.9203 = f32[4096]{0} multiply(%select.3339, %select.3339)
  %multiply.9204 = f32[4096]{0} multiply(%multiply.9203, %broadcast.13928)
  %param.724 = f32[4096]{0} parameter(796), sharding={replicated}
  %multiply.9206 = f32[4096]{0} multiply(%param.724, %broadcast.13929)
  %add.6173 = f32[4096]{0} add(%multiply.9204, %multiply.9206)
  %divide.1748 = f32[4096]{0} divide(%add.6173, %broadcast.13931)
  %sqrt.213 = f32[4096]{0} sqrt(%divide.1748)
  %add.6174 = f32[4096]{0} add(%sqrt.213, %broadcast.13934)
  %multiply.9207 = f32[4096]{0} multiply(%broadcast.13927, %add.6174)
  %divide.1749 = f32[4096]{0} divide(%add.6172, %multiply.9207)
  %multiply.9208 = f32[4096]{0} multiply(%param.34, %broadcast.13925)
  %add.6175 = f32[4096]{0} add(%divide.1749, %multiply.9208)
  %multiply.9209 = f32[4096]{0} multiply(%broadcast.7107, %add.6175)
  %add.6176 = f32[4096]{0} add(%param.34, %multiply.9209)
  %divide.1750 = f32[256,8,128]{0,2,1} divide(%transpose.476, %broadcast.13977)
  %select.3340 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.476, %divide.1750)
  %multiply.9210 = f32[256,8,128]{0,2,1} multiply(%select.3340, %broadcast.13978)
  %param.725 = f32[256,8,128]{2,1,0} parameter(506), sharding={devices=[16,1,1]<=[16]}
  %multiply.9211 = f32[256,8,128]{2,1,0} multiply(%param.725, %broadcast.13979)
  %add.6177 = f32[256,8,128]{0,2,1} add(%multiply.9210, %multiply.9211)
  %multiply.9212 = f32[256,8,128]{0,2,1} multiply(%select.3340, %select.3340)
  %multiply.9213 = f32[256,8,128]{0,2,1} multiply(%multiply.9212, %broadcast.13981)
  %param.726 = f32[256,8,128]{2,1,0} parameter(797), sharding={devices=[16,1,1]<=[16]}
  %multiply.9215 = f32[256,8,128]{2,1,0} multiply(%param.726, %broadcast.13982)
  %add.6178 = f32[256,8,128]{0,2,1} add(%multiply.9213, %multiply.9215)
  %divide.1751 = f32[256,8,128]{0,2,1} divide(%add.6178, %broadcast.13983)
  %sqrt.214 = f32[256,8,128]{0,2,1} sqrt(%divide.1751)
  %add.6179 = f32[256,8,128]{0,2,1} add(%sqrt.214, %broadcast.13984)
  %multiply.9216 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6179)
  %divide.1752 = f32[256,8,128]{0,2,1} divide(%add.6177, %multiply.9216)
  %multiply.9217 = f32[256,8,128]{2,1,0} multiply(%param.36, %broadcast.13978)
  %add.6180 = f32[256,8,128]{0,2,1} add(%divide.1752, %multiply.9217)
  %multiply.9218 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6180)
  %add.6181 = f32[256,8,128]{2,1,0} add(%param.36, %multiply.9218)
  %divide.1753 = f32[32,128,256]{1,0,2} divide(%transpose.477, %broadcast.13987)
  %select.3341 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.477, %divide.1753)
  %multiply.9219 = f32[32,128,256]{1,0,2} multiply(%select.3341, %broadcast.13989)
  %param.727 = f32[32,128,256]{2,1,0} parameter(507), sharding={devices=[1,1,16]<=[16]}
  %multiply.9220 = f32[32,128,256]{2,1,0} multiply(%param.727, %broadcast.13991)
  %add.6182 = f32[32,128,256]{1,0,2} add(%multiply.9219, %multiply.9220)
  %multiply.9221 = f32[32,128,256]{1,0,2} multiply(%select.3341, %select.3341)
  %multiply.9222 = f32[32,128,256]{1,0,2} multiply(%multiply.9221, %broadcast.13993)
  %param.728 = f32[32,128,256]{2,1,0} parameter(798), sharding={devices=[1,1,16]<=[16]}
  %multiply.9223 = f32[32,128,256]{2,1,0} multiply(%param.728, %broadcast.13994)
  %add.6183 = f32[32,128,256]{1,0,2} add(%multiply.9222, %multiply.9223)
  %divide.1754 = f32[32,128,256]{1,0,2} divide(%add.6183, %broadcast.13996)
  %sqrt.215 = f32[32,128,256]{1,0,2} sqrt(%divide.1754)
  %add.6184 = f32[32,128,256]{1,0,2} add(%sqrt.215, %broadcast.13998)
  %multiply.9224 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6184)
  %divide.1755 = f32[32,128,256]{1,0,2} divide(%add.6182, %multiply.9224)
  %multiply.9225 = f32[32,128,256]{2,1,0} multiply(%param.38, %broadcast.13989)
  %add.6185 = f32[32,128,256]{1,0,2} add(%divide.1755, %multiply.9225)
  %multiply.9226 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6185)
  %add.6186 = f32[32,128,256]{2,1,0} add(%param.38, %multiply.9226)
  %divide.1756 = f32[256,32,128]{0,2,1} divide(%transpose.478, %broadcast.14001)
  %select.3342 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.478, %divide.1756)
  %multiply.9228 = f32[256,32,128]{0,2,1} multiply(%select.3342, %broadcast.14002)
  %param.729 = f32[256,32,128]{2,1,0} parameter(508), sharding={devices=[16,1,1]<=[16]}
  %multiply.9229 = f32[256,32,128]{2,1,0} multiply(%param.729, %broadcast.14003)
  %add.6187 = f32[256,32,128]{0,2,1} add(%multiply.9228, %multiply.9229)
  %multiply.9230 = f32[256,32,128]{0,2,1} multiply(%select.3342, %select.3342)
  %multiply.9231 = f32[256,32,128]{0,2,1} multiply(%multiply.9230, %broadcast.14005)
  %param.730 = f32[256,32,128]{2,1,0} parameter(799), sharding={devices=[16,1,1]<=[16]}
  %multiply.9232 = f32[256,32,128]{2,1,0} multiply(%param.730, %broadcast.14006)
  %add.6188 = f32[256,32,128]{0,2,1} add(%multiply.9231, %multiply.9232)
  %divide.1757 = f32[256,32,128]{0,2,1} divide(%add.6188, %broadcast.14007)
  %sqrt.216 = f32[256,32,128]{0,2,1} sqrt(%divide.1757)
  %add.6189 = f32[256,32,128]{0,2,1} add(%sqrt.216, %broadcast.14008)
  %multiply.9233 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6189)
  %divide.1758 = f32[256,32,128]{0,2,1} divide(%add.6187, %multiply.9233)
  %multiply.9235 = f32[256,32,128]{2,1,0} multiply(%param.35, %broadcast.14002)
  %add.6190 = f32[256,32,128]{0,2,1} add(%divide.1758, %multiply.9235)
  %multiply.9236 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6190)
  %add.6191 = f32[256,32,128]{2,1,0} add(%param.35, %multiply.9236)
  %divide.1759 = f32[256,8,128]{0,2,1} divide(%transpose.479, %broadcast.13977)
  %select.3343 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.479, %divide.1759)
  %multiply.9237 = f32[256,8,128]{0,2,1} multiply(%select.3343, %broadcast.13978)
  %param.731 = f32[256,8,128]{2,1,0} parameter(509), sharding={devices=[16,1,1]<=[16]}
  %multiply.9238 = f32[256,8,128]{2,1,0} multiply(%param.731, %broadcast.13979)
  %add.6192 = f32[256,8,128]{0,2,1} add(%multiply.9237, %multiply.9238)
  %multiply.9239 = f32[256,8,128]{0,2,1} multiply(%select.3343, %select.3343)
  %multiply.9240 = f32[256,8,128]{0,2,1} multiply(%multiply.9239, %broadcast.13981)
  %param.732 = f32[256,8,128]{2,1,0} parameter(800), sharding={devices=[16,1,1]<=[16]}
  %multiply.9241 = f32[256,8,128]{2,1,0} multiply(%param.732, %broadcast.13982)
  %add.6193 = f32[256,8,128]{0,2,1} add(%multiply.9240, %multiply.9241)
  %divide.1760 = f32[256,8,128]{0,2,1} divide(%add.6193, %broadcast.13983)
  %sqrt.217 = f32[256,8,128]{0,2,1} sqrt(%divide.1760)
  %add.6194 = f32[256,8,128]{0,2,1} add(%sqrt.217, %broadcast.13984)
  %multiply.9242 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6194)
  %divide.1761 = f32[256,8,128]{0,2,1} divide(%add.6192, %multiply.9242)
  %multiply.9243 = f32[256,8,128]{2,1,0} multiply(%param.37, %broadcast.13978)
  %add.6195 = f32[256,8,128]{0,2,1} add(%divide.1761, %multiply.9243)
  %multiply.9244 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6195)
  %add.6196 = f32[256,8,128]{2,1,0} add(%param.37, %multiply.9244)
  %divide.1762 = f32[256,14336]{0,1} divide(%convert.3422, %broadcast.13938)
  %select.3344 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3422, %divide.1762)
  %multiply.9245 = f32[256,14336]{0,1} multiply(%select.3344, %broadcast.13940)
  %param.733 = f32[256,14336]{1,0} parameter(510), sharding={devices=[16,1]<=[16]}
  %multiply.9246 = f32[256,14336]{1,0} multiply(%param.733, %broadcast.13942)
  %add.6197 = f32[256,14336]{0,1} add(%multiply.9245, %multiply.9246)
  %multiply.9247 = f32[256,14336]{0,1} multiply(%select.3344, %select.3344)
  %multiply.9248 = f32[256,14336]{0,1} multiply(%multiply.9247, %broadcast.13945)
  %param.734 = f32[256,14336]{1,0} parameter(801), sharding={devices=[16,1]<=[16]}
  %multiply.9249 = f32[256,14336]{1,0} multiply(%param.734, %broadcast.13947)
  %add.6198 = f32[256,14336]{0,1} add(%multiply.9248, %multiply.9249)
  %divide.1763 = f32[256,14336]{0,1} divide(%add.6198, %broadcast.13948)
  %sqrt.218 = f32[256,14336]{0,1} sqrt(%divide.1763)
  %add.6199 = f32[256,14336]{0,1} add(%sqrt.218, %broadcast.13949)
  %multiply.9250 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6199)
  %divide.1764 = f32[256,14336]{0,1} divide(%add.6197, %multiply.9250)
  %multiply.9251 = f32[256,14336]{1,0} multiply(%param.283, %broadcast.13940)
  %add.6200 = f32[256,14336]{0,1} add(%divide.1764, %multiply.9251)
  %multiply.9252 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6200)
  %add.6201 = f32[256,14336]{1,0} add(%param.283, %multiply.9252)
  %divide.1765 = f32[256,14336]{0,1} divide(%convert.3423, %broadcast.13938)
  %select.3345 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3423, %divide.1765)
  %multiply.9253 = f32[256,14336]{0,1} multiply(%select.3345, %broadcast.13940)
  %param.735 = f32[256,14336]{1,0} parameter(511), sharding={devices=[16,1]<=[16]}
  %multiply.9254 = f32[256,14336]{1,0} multiply(%param.735, %broadcast.13942)
  %add.6202 = f32[256,14336]{0,1} add(%multiply.9253, %multiply.9254)
  %multiply.9255 = f32[256,14336]{0,1} multiply(%select.3345, %select.3345)
  %multiply.9256 = f32[256,14336]{0,1} multiply(%multiply.9255, %broadcast.13945)
  %param.736 = f32[256,14336]{1,0} parameter(802), sharding={devices=[16,1]<=[16]}
  %multiply.9257 = f32[256,14336]{1,0} multiply(%param.736, %broadcast.13947)
  %add.6204 = f32[256,14336]{0,1} add(%multiply.9256, %multiply.9257)
  %divide.1766 = f32[256,14336]{0,1} divide(%add.6204, %broadcast.13948)
  %sqrt.219 = f32[256,14336]{0,1} sqrt(%divide.1766)
  %add.6205 = f32[256,14336]{0,1} add(%sqrt.219, %broadcast.13949)
  %multiply.9258 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6205)
  %divide.1767 = f32[256,14336]{0,1} divide(%add.6202, %multiply.9258)
  %multiply.9259 = f32[256,14336]{1,0} multiply(%param.284, %broadcast.13940)
  %add.6206 = f32[256,14336]{0,1} add(%divide.1767, %multiply.9259)
  %multiply.9260 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6206)
  %add.6207 = f32[256,14336]{1,0} add(%param.284, %multiply.9260)
  %divide.1768 = f32[14336,256]{0,1} divide(%convert.3424, %broadcast.13957)
  %select.3346 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3424, %divide.1768)
  %multiply.9261 = f32[14336,256]{0,1} multiply(%select.3346, %broadcast.13958)
  %param.737 = f32[14336,256]{1,0} parameter(512), sharding={devices=[1,16]<=[16]}
  %multiply.9262 = f32[14336,256]{1,0} multiply(%param.737, %broadcast.13959)
  %add.6208 = f32[14336,256]{0,1} add(%multiply.9261, %multiply.9262)
  %multiply.9263 = f32[14336,256]{0,1} multiply(%select.3346, %select.3346)
  %multiply.9265 = f32[14336,256]{0,1} multiply(%multiply.9263, %broadcast.13961)
  %param.738 = f32[14336,256]{1,0} parameter(803), sharding={devices=[1,16]<=[16]}
  %multiply.9266 = f32[14336,256]{1,0} multiply(%param.738, %broadcast.13962)
  %add.6209 = f32[14336,256]{0,1} add(%multiply.9265, %multiply.9266)
  %divide.1769 = f32[14336,256]{0,1} divide(%add.6209, %broadcast.13963)
  %sqrt.220 = f32[14336,256]{0,1} sqrt(%divide.1769)
  %add.6210 = f32[14336,256]{0,1} add(%sqrt.220, %broadcast.13964)
  %multiply.9267 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6210)
  %divide.1770 = f32[14336,256]{0,1} divide(%add.6208, %multiply.9267)
  %multiply.9268 = f32[14336,256]{1,0} multiply(%param.285, %broadcast.13958)
  %add.6211 = f32[14336,256]{0,1} add(%divide.1770, %multiply.9268)
  %multiply.9269 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6211)
  %add.6212 = f32[14336,256]{1,0} add(%param.285, %multiply.9269)
  %divide.1771 = f32[4096]{0} divide(%convert.3426, %broadcast.13924)
  %select.3347 = f32[4096]{0} select(%broadcast.13923, %convert.3426, %divide.1771)
  %multiply.9270 = f32[4096]{0} multiply(%select.3347, %broadcast.13925)
  %param.739 = f32[4096]{0} parameter(513), sharding={replicated}
  %multiply.9271 = f32[4096]{0} multiply(%param.739, %broadcast.13926)
  %add.6213 = f32[4096]{0} add(%multiply.9270, %multiply.9271)
  %multiply.9272 = f32[4096]{0} multiply(%select.3347, %select.3347)
  %multiply.9273 = f32[4096]{0} multiply(%multiply.9272, %broadcast.13928)
  %param.740 = f32[4096]{0} parameter(804), sharding={replicated}
  %multiply.9274 = f32[4096]{0} multiply(%param.740, %broadcast.13929)
  %add.6214 = f32[4096]{0} add(%multiply.9273, %multiply.9274)
  %divide.1772 = f32[4096]{0} divide(%add.6214, %broadcast.13931)
  %sqrt.221 = f32[4096]{0} sqrt(%divide.1772)
  %add.6215 = f32[4096]{0} add(%sqrt.221, %broadcast.13934)
  %multiply.9275 = f32[4096]{0} multiply(%broadcast.13927, %add.6215)
  %divide.1773 = f32[4096]{0} divide(%add.6213, %multiply.9275)
  %multiply.9276 = f32[4096]{0} multiply(%param.282, %broadcast.13925)
  %add.6216 = f32[4096]{0} add(%divide.1773, %multiply.9276)
  %multiply.9277 = f32[4096]{0} multiply(%broadcast.7107, %add.6216)
  %add.6217 = f32[4096]{0} add(%param.282, %multiply.9277)
  %divide.1774 = f32[4096]{0} divide(%convert.3428, %broadcast.13924)
  %select.3348 = f32[4096]{0} select(%broadcast.13923, %convert.3428, %divide.1774)
  %multiply.9278 = f32[4096]{0} multiply(%select.3348, %broadcast.13925)
  %param.741 = f32[4096]{0} parameter(514), sharding={replicated}
  %multiply.9279 = f32[4096]{0} multiply(%param.741, %broadcast.13926)
  %add.6218 = f32[4096]{0} add(%multiply.9278, %multiply.9279)
  %multiply.9281 = f32[4096]{0} multiply(%select.3348, %select.3348)
  %multiply.9283 = f32[4096]{0} multiply(%multiply.9281, %broadcast.13928)
  %param.742 = f32[4096]{0} parameter(805), sharding={replicated}
  %multiply.9284 = f32[4096]{0} multiply(%param.742, %broadcast.13929)
  %add.6219 = f32[4096]{0} add(%multiply.9283, %multiply.9284)
  %divide.1775 = f32[4096]{0} divide(%add.6219, %broadcast.13931)
  %sqrt.222 = f32[4096]{0} sqrt(%divide.1775)
  %add.6220 = f32[4096]{0} add(%sqrt.222, %broadcast.13934)
  %multiply.9285 = f32[4096]{0} multiply(%broadcast.13927, %add.6220)
  %divide.1776 = f32[4096]{0} divide(%add.6218, %multiply.9285)
  %multiply.9286 = f32[4096]{0} multiply(%param.277, %broadcast.13925)
  %add.6221 = f32[4096]{0} add(%divide.1776, %multiply.9286)
  %multiply.9287 = f32[4096]{0} multiply(%broadcast.7107, %add.6221)
  %add.6222 = f32[4096]{0} add(%param.277, %multiply.9287)
  %divide.1777 = f32[256,8,128]{0,2,1} divide(%transpose.480, %broadcast.13977)
  %select.3349 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.480, %divide.1777)
  %multiply.9288 = f32[256,8,128]{0,2,1} multiply(%select.3349, %broadcast.13978)
  %param.743 = f32[256,8,128]{2,1,0} parameter(515), sharding={devices=[16,1,1]<=[16]}
  %multiply.9289 = f32[256,8,128]{2,1,0} multiply(%param.743, %broadcast.13979)
  %add.6223 = f32[256,8,128]{0,2,1} add(%multiply.9288, %multiply.9289)
  %multiply.9290 = f32[256,8,128]{0,2,1} multiply(%select.3349, %select.3349)
  %multiply.9291 = f32[256,8,128]{0,2,1} multiply(%multiply.9290, %broadcast.13981)
  %param.744 = f32[256,8,128]{2,1,0} parameter(806), sharding={devices=[16,1,1]<=[16]}
  %multiply.9292 = f32[256,8,128]{2,1,0} multiply(%param.744, %broadcast.13982)
  %add.6224 = f32[256,8,128]{0,2,1} add(%multiply.9291, %multiply.9292)
  %divide.1778 = f32[256,8,128]{0,2,1} divide(%add.6224, %broadcast.13983)
  %sqrt.223 = f32[256,8,128]{0,2,1} sqrt(%divide.1778)
  %add.6225 = f32[256,8,128]{0,2,1} add(%sqrt.223, %broadcast.13984)
  %multiply.9293 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6225)
  %divide.1779 = f32[256,8,128]{0,2,1} divide(%add.6223, %multiply.9293)
  %multiply.9294 = f32[256,8,128]{2,1,0} multiply(%param.279, %broadcast.13978)
  %add.6226 = f32[256,8,128]{0,2,1} add(%divide.1779, %multiply.9294)
  %multiply.9295 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6226)
  %add.6227 = f32[256,8,128]{2,1,0} add(%param.279, %multiply.9295)
  %divide.1780 = f32[32,128,256]{1,0,2} divide(%transpose.481, %broadcast.13987)
  %select.3350 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.481, %divide.1780)
  %multiply.9296 = f32[32,128,256]{1,0,2} multiply(%select.3350, %broadcast.13989)
  %param.745 = f32[32,128,256]{2,1,0} parameter(516), sharding={devices=[1,1,16]<=[16]}
  %multiply.9297 = f32[32,128,256]{2,1,0} multiply(%param.745, %broadcast.13991)
  %add.6228 = f32[32,128,256]{1,0,2} add(%multiply.9296, %multiply.9297)
  %multiply.9298 = f32[32,128,256]{1,0,2} multiply(%select.3350, %select.3350)
  %multiply.9299 = f32[32,128,256]{1,0,2} multiply(%multiply.9298, %broadcast.13993)
  %param.746 = f32[32,128,256]{2,1,0} parameter(807), sharding={devices=[1,1,16]<=[16]}
  %multiply.9300 = f32[32,128,256]{2,1,0} multiply(%param.746, %broadcast.13994)
  %add.6229 = f32[32,128,256]{1,0,2} add(%multiply.9299, %multiply.9300)
  %divide.1781 = f32[32,128,256]{1,0,2} divide(%add.6229, %broadcast.13996)
  %sqrt.224 = f32[32,128,256]{1,0,2} sqrt(%divide.1781)
  %add.6230 = f32[32,128,256]{1,0,2} add(%sqrt.224, %broadcast.13998)
  %multiply.9301 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6230)
  %divide.1783 = f32[32,128,256]{1,0,2} divide(%add.6228, %multiply.9301)
  %multiply.9302 = f32[32,128,256]{2,1,0} multiply(%param.281, %broadcast.13989)
  %add.6231 = f32[32,128,256]{1,0,2} add(%divide.1783, %multiply.9302)
  %multiply.9303 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6231)
  %add.6232 = f32[32,128,256]{2,1,0} add(%param.281, %multiply.9303)
  %divide.1784 = f32[256,32,128]{0,2,1} divide(%transpose.482, %broadcast.14001)
  %select.3351 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.482, %divide.1784)
  %multiply.9304 = f32[256,32,128]{0,2,1} multiply(%select.3351, %broadcast.14002)
  %param.747 = f32[256,32,128]{2,1,0} parameter(517), sharding={devices=[16,1,1]<=[16]}
  %multiply.9305 = f32[256,32,128]{2,1,0} multiply(%param.747, %broadcast.14003)
  %add.6233 = f32[256,32,128]{0,2,1} add(%multiply.9304, %multiply.9305)
  %multiply.9306 = f32[256,32,128]{0,2,1} multiply(%select.3351, %select.3351)
  %multiply.9307 = f32[256,32,128]{0,2,1} multiply(%multiply.9306, %broadcast.14005)
  %param.748 = f32[256,32,128]{2,1,0} parameter(808), sharding={devices=[16,1,1]<=[16]}
  %multiply.9308 = f32[256,32,128]{2,1,0} multiply(%param.748, %broadcast.14006)
  %add.6234 = f32[256,32,128]{0,2,1} add(%multiply.9307, %multiply.9308)
  %divide.1785 = f32[256,32,128]{0,2,1} divide(%add.6234, %broadcast.14007)
  %sqrt.225 = f32[256,32,128]{0,2,1} sqrt(%divide.1785)
  %add.6235 = f32[256,32,128]{0,2,1} add(%sqrt.225, %broadcast.14008)
  %multiply.9310 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6235)
  %divide.1788 = f32[256,32,128]{0,2,1} divide(%add.6233, %multiply.9310)
  %multiply.9311 = f32[256,32,128]{2,1,0} multiply(%param.278, %broadcast.14002)
  %add.6236 = f32[256,32,128]{0,2,1} add(%divide.1788, %multiply.9311)
  %multiply.9312 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6236)
  %add.6237 = f32[256,32,128]{2,1,0} add(%param.278, %multiply.9312)
  %divide.1789 = f32[256,8,128]{0,2,1} divide(%transpose.483, %broadcast.13977)
  %select.3352 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.483, %divide.1789)
  %multiply.9313 = f32[256,8,128]{0,2,1} multiply(%select.3352, %broadcast.13978)
  %param.749 = f32[256,8,128]{2,1,0} parameter(518), sharding={devices=[16,1,1]<=[16]}
  %multiply.9315 = f32[256,8,128]{2,1,0} multiply(%param.749, %broadcast.13979)
  %add.6238 = f32[256,8,128]{0,2,1} add(%multiply.9313, %multiply.9315)
  %multiply.9316 = f32[256,8,128]{0,2,1} multiply(%select.3352, %select.3352)
  %multiply.9317 = f32[256,8,128]{0,2,1} multiply(%multiply.9316, %broadcast.13981)
  %param.750 = f32[256,8,128]{2,1,0} parameter(809), sharding={devices=[16,1,1]<=[16]}
  %multiply.9318 = f32[256,8,128]{2,1,0} multiply(%param.750, %broadcast.13982)
  %add.6239 = f32[256,8,128]{0,2,1} add(%multiply.9317, %multiply.9318)
  %divide.1790 = f32[256,8,128]{0,2,1} divide(%add.6239, %broadcast.13983)
  %sqrt.226 = f32[256,8,128]{0,2,1} sqrt(%divide.1790)
  %add.6240 = f32[256,8,128]{0,2,1} add(%sqrt.226, %broadcast.13984)
  %multiply.9319 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6240)
  %divide.1791 = f32[256,8,128]{0,2,1} divide(%add.6238, %multiply.9319)
  %multiply.9321 = f32[256,8,128]{2,1,0} multiply(%param.280, %broadcast.13978)
  %add.6242 = f32[256,8,128]{0,2,1} add(%divide.1791, %multiply.9321)
  %multiply.9322 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6242)
  %add.6243 = f32[256,8,128]{2,1,0} add(%param.280, %multiply.9322)
  %divide.1793 = f32[256,14336]{0,1} divide(%convert.3436, %broadcast.13938)
  %select.3353 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3436, %divide.1793)
  %multiply.9323 = f32[256,14336]{0,1} multiply(%select.3353, %broadcast.13940)
  %param.751 = f32[256,14336]{1,0} parameter(519), sharding={devices=[16,1]<=[16]}
  %multiply.9324 = f32[256,14336]{1,0} multiply(%param.751, %broadcast.13942)
  %add.6244 = f32[256,14336]{0,1} add(%multiply.9323, %multiply.9324)
  %multiply.9325 = f32[256,14336]{0,1} multiply(%select.3353, %select.3353)
  %multiply.9326 = f32[256,14336]{0,1} multiply(%multiply.9325, %broadcast.13945)
  %param.752 = f32[256,14336]{1,0} parameter(810), sharding={devices=[16,1]<=[16]}
  %multiply.9327 = f32[256,14336]{1,0} multiply(%param.752, %broadcast.13947)
  %add.6245 = f32[256,14336]{0,1} add(%multiply.9326, %multiply.9327)
  %divide.1795 = f32[256,14336]{0,1} divide(%add.6245, %broadcast.13948)
  %sqrt.227 = f32[256,14336]{0,1} sqrt(%divide.1795)
  %add.6246 = f32[256,14336]{0,1} add(%sqrt.227, %broadcast.13949)
  %multiply.9328 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6246)
  %divide.1796 = f32[256,14336]{0,1} divide(%add.6244, %multiply.9328)
  %multiply.9329 = f32[256,14336]{1,0} multiply(%param.292, %broadcast.13940)
  %add.6247 = f32[256,14336]{0,1} add(%divide.1796, %multiply.9329)
  %multiply.9330 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6247)
  %add.6248 = f32[256,14336]{1,0} add(%param.292, %multiply.9330)
  %divide.1798 = f32[256,14336]{0,1} divide(%convert.3437, %broadcast.13938)
  %select.3354 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3437, %divide.1798)
  %multiply.9331 = f32[256,14336]{0,1} multiply(%select.3354, %broadcast.13940)
  %param.753 = f32[256,14336]{1,0} parameter(520), sharding={devices=[16,1]<=[16]}
  %multiply.9332 = f32[256,14336]{1,0} multiply(%param.753, %broadcast.13942)
  %add.6249 = f32[256,14336]{0,1} add(%multiply.9331, %multiply.9332)
  %multiply.9333 = f32[256,14336]{0,1} multiply(%select.3354, %select.3354)
  %multiply.9334 = f32[256,14336]{0,1} multiply(%multiply.9333, %broadcast.13945)
  %param.754 = f32[256,14336]{1,0} parameter(811), sharding={devices=[16,1]<=[16]}
  %multiply.9335 = f32[256,14336]{1,0} multiply(%param.754, %broadcast.13947)
  %add.6250 = f32[256,14336]{0,1} add(%multiply.9334, %multiply.9335)
  %divide.1799 = f32[256,14336]{0,1} divide(%add.6250, %broadcast.13948)
  %sqrt.228 = f32[256,14336]{0,1} sqrt(%divide.1799)
  %add.6251 = f32[256,14336]{0,1} add(%sqrt.228, %broadcast.13949)
  %multiply.9336 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6251)
  %divide.1801 = f32[256,14336]{0,1} divide(%add.6249, %multiply.9336)
  %multiply.9337 = f32[256,14336]{1,0} multiply(%param.293, %broadcast.13940)
  %add.6252 = f32[256,14336]{0,1} add(%divide.1801, %multiply.9337)
  %multiply.9338 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6252)
  %add.6253 = f32[256,14336]{1,0} add(%param.293, %multiply.9338)
  %divide.1802 = f32[14336,256]{0,1} divide(%convert.3438, %broadcast.13957)
  %select.3355 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3438, %divide.1802)
  %multiply.9339 = f32[14336,256]{0,1} multiply(%select.3355, %broadcast.13958)
  %param.755 = f32[14336,256]{1,0} parameter(521), sharding={devices=[1,16]<=[16]}
  %multiply.9341 = f32[14336,256]{1,0} multiply(%param.755, %broadcast.13959)
  %add.6254 = f32[14336,256]{0,1} add(%multiply.9339, %multiply.9341)
  %multiply.9342 = f32[14336,256]{0,1} multiply(%select.3355, %select.3355)
  %multiply.9343 = f32[14336,256]{0,1} multiply(%multiply.9342, %broadcast.13961)
  %param.756 = f32[14336,256]{1,0} parameter(812), sharding={devices=[1,16]<=[16]}
  %multiply.9344 = f32[14336,256]{1,0} multiply(%param.756, %broadcast.13962)
  %add.6255 = f32[14336,256]{0,1} add(%multiply.9343, %multiply.9344)
  %divide.1803 = f32[14336,256]{0,1} divide(%add.6255, %broadcast.13963)
  %sqrt.229 = f32[14336,256]{0,1} sqrt(%divide.1803)
  %add.6256 = f32[14336,256]{0,1} add(%sqrt.229, %broadcast.13964)
  %multiply.9345 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6256)
  %divide.1804 = f32[14336,256]{0,1} divide(%add.6254, %multiply.9345)
  %multiply.9346 = f32[14336,256]{1,0} multiply(%param.294, %broadcast.13958)
  %add.6257 = f32[14336,256]{0,1} add(%divide.1804, %multiply.9346)
  %multiply.9347 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6257)
  %add.6258 = f32[14336,256]{1,0} add(%param.294, %multiply.9347)
  %divide.1806 = f32[4096]{0} divide(%convert.3439, %broadcast.13924)
  %select.3356 = f32[4096]{0} select(%broadcast.13923, %convert.3439, %divide.1806)
  %multiply.9348 = f32[4096]{0} multiply(%select.3356, %broadcast.13925)
  %param.757 = f32[4096]{0} parameter(522), sharding={replicated}
  %multiply.9349 = f32[4096]{0} multiply(%param.757, %broadcast.13926)
  %add.6259 = f32[4096]{0} add(%multiply.9348, %multiply.9349)
  %multiply.9350 = f32[4096]{0} multiply(%select.3356, %select.3356)
  %multiply.9351 = f32[4096]{0} multiply(%multiply.9350, %broadcast.13928)
  %param.758 = f32[4096]{0} parameter(813), sharding={replicated}
  %multiply.9352 = f32[4096]{0} multiply(%param.758, %broadcast.13929)
  %add.6260 = f32[4096]{0} add(%multiply.9351, %multiply.9352)
  %divide.1807 = f32[4096]{0} divide(%add.6260, %broadcast.13931)
  %sqrt.230 = f32[4096]{0} sqrt(%divide.1807)
  %add.6261 = f32[4096]{0} add(%sqrt.230, %broadcast.13934)
  %multiply.9353 = f32[4096]{0} multiply(%broadcast.13927, %add.6261)
  %divide.1808 = f32[4096]{0} divide(%add.6259, %multiply.9353)
  %multiply.9354 = f32[4096]{0} multiply(%param.291, %broadcast.13925)
  %add.6262 = f32[4096]{0} add(%divide.1808, %multiply.9354)
  %multiply.9355 = f32[4096]{0} multiply(%broadcast.7107, %add.6262)
  %add.6263 = f32[4096]{0} add(%param.291, %multiply.9355)
  %divide.1809 = f32[4096]{0} divide(%convert.3441, %broadcast.13924)
  %select.3357 = f32[4096]{0} select(%broadcast.13923, %convert.3441, %divide.1809)
  %multiply.9357 = f32[4096]{0} multiply(%select.3357, %broadcast.13925)
  %param.759 = f32[4096]{0} parameter(523), sharding={replicated}
  %multiply.9359 = f32[4096]{0} multiply(%param.759, %broadcast.13926)
  %add.6264 = f32[4096]{0} add(%multiply.9357, %multiply.9359)
  %multiply.9360 = f32[4096]{0} multiply(%select.3357, %select.3357)
  %multiply.9361 = f32[4096]{0} multiply(%multiply.9360, %broadcast.13928)
  %param.760 = f32[4096]{0} parameter(814), sharding={replicated}
  %multiply.9362 = f32[4096]{0} multiply(%param.760, %broadcast.13929)
  %add.6265 = f32[4096]{0} add(%multiply.9361, %multiply.9362)
  %divide.1810 = f32[4096]{0} divide(%add.6265, %broadcast.13931)
  %sqrt.231 = f32[4096]{0} sqrt(%divide.1810)
  %add.6266 = f32[4096]{0} add(%sqrt.231, %broadcast.13934)
  %multiply.9363 = f32[4096]{0} multiply(%broadcast.13927, %add.6266)
  %divide.1811 = f32[4096]{0} divide(%add.6264, %multiply.9363)
  %multiply.9364 = f32[4096]{0} multiply(%param.286, %broadcast.13925)
  %add.6267 = f32[4096]{0} add(%divide.1811, %multiply.9364)
  %multiply.9365 = f32[4096]{0} multiply(%broadcast.7107, %add.6267)
  %add.6268 = f32[4096]{0} add(%param.286, %multiply.9365)
  %divide.1812 = f32[256,8,128]{0,2,1} divide(%transpose.484, %broadcast.13977)
  %select.3358 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.484, %divide.1812)
  %multiply.9366 = f32[256,8,128]{0,2,1} multiply(%select.3358, %broadcast.13978)
  %param.761 = f32[256,8,128]{2,1,0} parameter(524), sharding={devices=[16,1,1]<=[16]}
  %multiply.9367 = f32[256,8,128]{2,1,0} multiply(%param.761, %broadcast.13979)
  %add.6269 = f32[256,8,128]{0,2,1} add(%multiply.9366, %multiply.9367)
  %multiply.9368 = f32[256,8,128]{0,2,1} multiply(%select.3358, %select.3358)
  %multiply.9369 = f32[256,8,128]{0,2,1} multiply(%multiply.9368, %broadcast.13981)
  %param.762 = f32[256,8,128]{2,1,0} parameter(815), sharding={devices=[16,1,1]<=[16]}
  %multiply.9370 = f32[256,8,128]{2,1,0} multiply(%param.762, %broadcast.13982)
  %add.6270 = f32[256,8,128]{0,2,1} add(%multiply.9369, %multiply.9370)
  %divide.1813 = f32[256,8,128]{0,2,1} divide(%add.6270, %broadcast.13983)
  %sqrt.232 = f32[256,8,128]{0,2,1} sqrt(%divide.1813)
  %add.6271 = f32[256,8,128]{0,2,1} add(%sqrt.232, %broadcast.13984)
  %multiply.9371 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6271)
  %divide.1815 = f32[256,8,128]{0,2,1} divide(%add.6269, %multiply.9371)
  %multiply.9372 = f32[256,8,128]{2,1,0} multiply(%param.288, %broadcast.13978)
  %add.6272 = f32[256,8,128]{0,2,1} add(%divide.1815, %multiply.9372)
  %multiply.9373 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6272)
  %add.6273 = f32[256,8,128]{2,1,0} add(%param.288, %multiply.9373)
  %divide.1816 = f32[32,128,256]{1,0,2} divide(%transpose.485, %broadcast.13987)
  %select.3359 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.485, %divide.1816)
  %multiply.9374 = f32[32,128,256]{1,0,2} multiply(%select.3359, %broadcast.13989)
  %param.763 = f32[32,128,256]{2,1,0} parameter(525), sharding={devices=[1,1,16]<=[16]}
  %multiply.9375 = f32[32,128,256]{2,1,0} multiply(%param.763, %broadcast.13991)
  %add.6274 = f32[32,128,256]{1,0,2} add(%multiply.9374, %multiply.9375)
  %multiply.9376 = f32[32,128,256]{1,0,2} multiply(%select.3359, %select.3359)
  %multiply.9377 = f32[32,128,256]{1,0,2} multiply(%multiply.9376, %broadcast.13993)
  %param.764 = f32[32,128,256]{2,1,0} parameter(816), sharding={devices=[1,1,16]<=[16]}
  %multiply.9378 = f32[32,128,256]{2,1,0} multiply(%param.764, %broadcast.13994)
  %add.6275 = f32[32,128,256]{1,0,2} add(%multiply.9377, %multiply.9378)
  %divide.1817 = f32[32,128,256]{1,0,2} divide(%add.6275, %broadcast.13996)
  %sqrt.233 = f32[32,128,256]{1,0,2} sqrt(%divide.1817)
  %add.6276 = f32[32,128,256]{1,0,2} add(%sqrt.233, %broadcast.13998)
  %multiply.9379 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6276)
  %divide.1818 = f32[32,128,256]{1,0,2} divide(%add.6274, %multiply.9379)
  %multiply.9380 = f32[32,128,256]{2,1,0} multiply(%param.290, %broadcast.13989)
  %add.6277 = f32[32,128,256]{1,0,2} add(%divide.1818, %multiply.9380)
  %multiply.9381 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6277)
  %add.6278 = f32[32,128,256]{2,1,0} add(%param.290, %multiply.9381)
  %divide.1819 = f32[256,32,128]{0,2,1} divide(%transpose.486, %broadcast.14001)
  %select.3360 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.486, %divide.1819)
  %multiply.9382 = f32[256,32,128]{0,2,1} multiply(%select.3360, %broadcast.14002)
  %param.765 = f32[256,32,128]{2,1,0} parameter(526), sharding={devices=[16,1,1]<=[16]}
  %multiply.9383 = f32[256,32,128]{2,1,0} multiply(%param.765, %broadcast.14003)
  %add.6280 = f32[256,32,128]{0,2,1} add(%multiply.9382, %multiply.9383)
  %multiply.9384 = f32[256,32,128]{0,2,1} multiply(%select.3360, %select.3360)
  %multiply.9386 = f32[256,32,128]{0,2,1} multiply(%multiply.9384, %broadcast.14005)
  %param.766 = f32[256,32,128]{2,1,0} parameter(817), sharding={devices=[16,1,1]<=[16]}
  %multiply.9387 = f32[256,32,128]{2,1,0} multiply(%param.766, %broadcast.14006)
  %add.6281 = f32[256,32,128]{0,2,1} add(%multiply.9386, %multiply.9387)
  %divide.1820 = f32[256,32,128]{0,2,1} divide(%add.6281, %broadcast.14007)
  %sqrt.234 = f32[256,32,128]{0,2,1} sqrt(%divide.1820)
  %add.6282 = f32[256,32,128]{0,2,1} add(%sqrt.234, %broadcast.14008)
  %multiply.9388 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6282)
  %divide.1821 = f32[256,32,128]{0,2,1} divide(%add.6280, %multiply.9388)
  %multiply.9389 = f32[256,32,128]{2,1,0} multiply(%param.287, %broadcast.14002)
  %add.6283 = f32[256,32,128]{0,2,1} add(%divide.1821, %multiply.9389)
  %multiply.9391 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6283)
  %add.6284 = f32[256,32,128]{2,1,0} add(%param.287, %multiply.9391)
  %divide.1822 = f32[256,8,128]{0,2,1} divide(%transpose.487, %broadcast.13977)
  %select.3361 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.487, %divide.1822)
  %multiply.9392 = f32[256,8,128]{0,2,1} multiply(%select.3361, %broadcast.13978)
  %param.767 = f32[256,8,128]{2,1,0} parameter(527), sharding={devices=[16,1,1]<=[16]}
  %multiply.9393 = f32[256,8,128]{2,1,0} multiply(%param.767, %broadcast.13979)
  %add.6285 = f32[256,8,128]{0,2,1} add(%multiply.9392, %multiply.9393)
  %multiply.9394 = f32[256,8,128]{0,2,1} multiply(%select.3361, %select.3361)
  %multiply.9395 = f32[256,8,128]{0,2,1} multiply(%multiply.9394, %broadcast.13981)
  %param.768 = f32[256,8,128]{2,1,0} parameter(818), sharding={devices=[16,1,1]<=[16]}
  %multiply.9397 = f32[256,8,128]{2,1,0} multiply(%param.768, %broadcast.13982)
  %add.6286 = f32[256,8,128]{0,2,1} add(%multiply.9395, %multiply.9397)
  %divide.1823 = f32[256,8,128]{0,2,1} divide(%add.6286, %broadcast.13983)
  %sqrt.235 = f32[256,8,128]{0,2,1} sqrt(%divide.1823)
  %add.6287 = f32[256,8,128]{0,2,1} add(%sqrt.235, %broadcast.13984)
  %multiply.9398 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6287)
  %divide.1824 = f32[256,8,128]{0,2,1} divide(%add.6285, %multiply.9398)
  %multiply.9399 = f32[256,8,128]{2,1,0} multiply(%param.289, %broadcast.13978)
  %add.6288 = f32[256,8,128]{0,2,1} add(%divide.1824, %multiply.9399)
  %multiply.9400 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6288)
  %add.6289 = f32[256,8,128]{2,1,0} add(%param.289, %multiply.9400)
  %divide.1825 = f32[256,14336]{0,1} divide(%convert.3448, %broadcast.13938)
  %select.3362 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3448, %divide.1825)
  %multiply.9401 = f32[256,14336]{0,1} multiply(%select.3362, %broadcast.13940)
  %param.769 = f32[256,14336]{1,0} parameter(528), sharding={devices=[16,1]<=[16]}
  %multiply.9402 = f32[256,14336]{1,0} multiply(%param.769, %broadcast.13942)
  %add.6290 = f32[256,14336]{0,1} add(%multiply.9401, %multiply.9402)
  %multiply.9403 = f32[256,14336]{0,1} multiply(%select.3362, %select.3362)
  %multiply.9404 = f32[256,14336]{0,1} multiply(%multiply.9403, %broadcast.13945)
  %param.770 = f32[256,14336]{1,0} parameter(819), sharding={devices=[16,1]<=[16]}
  %multiply.9405 = f32[256,14336]{1,0} multiply(%param.770, %broadcast.13947)
  %add.6291 = f32[256,14336]{0,1} add(%multiply.9404, %multiply.9405)
  %divide.1826 = f32[256,14336]{0,1} divide(%add.6291, %broadcast.13948)
  %sqrt.236 = f32[256,14336]{0,1} sqrt(%divide.1826)
  %add.6292 = f32[256,14336]{0,1} add(%sqrt.236, %broadcast.13949)
  %multiply.9406 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6292)
  %divide.1827 = f32[256,14336]{0,1} divide(%add.6290, %multiply.9406)
  %multiply.9407 = f32[256,14336]{1,0} multiply(%param.49, %broadcast.13940)
  %add.6293 = f32[256,14336]{0,1} add(%divide.1827, %multiply.9407)
  %multiply.9408 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6293)
  %add.6294 = f32[256,14336]{1,0} add(%param.49, %multiply.9408)
  %divide.1828 = f32[256,14336]{0,1} divide(%convert.3449, %broadcast.13938)
  %select.3363 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3449, %divide.1828)
  %multiply.9409 = f32[256,14336]{0,1} multiply(%select.3363, %broadcast.13940)
  %param.771 = f32[256,14336]{1,0} parameter(529), sharding={devices=[16,1]<=[16]}
  %multiply.9410 = f32[256,14336]{1,0} multiply(%param.771, %broadcast.13942)
  %add.6295 = f32[256,14336]{0,1} add(%multiply.9409, %multiply.9410)
  %multiply.9411 = f32[256,14336]{0,1} multiply(%select.3363, %select.3363)
  %multiply.9412 = f32[256,14336]{0,1} multiply(%multiply.9411, %broadcast.13945)
  %param.772 = f32[256,14336]{1,0} parameter(820), sharding={devices=[16,1]<=[16]}
  %multiply.9413 = f32[256,14336]{1,0} multiply(%param.772, %broadcast.13947)
  %add.6296 = f32[256,14336]{0,1} add(%multiply.9412, %multiply.9413)
  %divide.1829 = f32[256,14336]{0,1} divide(%add.6296, %broadcast.13948)
  %sqrt.237 = f32[256,14336]{0,1} sqrt(%divide.1829)
  %add.6297 = f32[256,14336]{0,1} add(%sqrt.237, %broadcast.13949)
  %multiply.9414 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6297)
  %divide.1830 = f32[256,14336]{0,1} divide(%add.6295, %multiply.9414)
  %multiply.9415 = f32[256,14336]{1,0} multiply(%param.50, %broadcast.13940)
  %add.6298 = f32[256,14336]{0,1} add(%divide.1830, %multiply.9415)
  %multiply.9416 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6298)
  %add.6299 = f32[256,14336]{1,0} add(%param.50, %multiply.9416)
  %divide.1831 = f32[14336,256]{0,1} divide(%convert.3450, %broadcast.13957)
  %select.3364 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3450, %divide.1831)
  %multiply.9417 = f32[14336,256]{0,1} multiply(%select.3364, %broadcast.13958)
  %param.773 = f32[14336,256]{1,0} parameter(530), sharding={devices=[1,16]<=[16]}
  %multiply.9418 = f32[14336,256]{1,0} multiply(%param.773, %broadcast.13959)
  %add.6300 = f32[14336,256]{0,1} add(%multiply.9417, %multiply.9418)
  %multiply.9419 = f32[14336,256]{0,1} multiply(%select.3364, %select.3364)
  %multiply.9420 = f32[14336,256]{0,1} multiply(%multiply.9419, %broadcast.13961)
  %param.774 = f32[14336,256]{1,0} parameter(821), sharding={devices=[1,16]<=[16]}
  %multiply.9421 = f32[14336,256]{1,0} multiply(%param.774, %broadcast.13962)
  %add.6301 = f32[14336,256]{0,1} add(%multiply.9420, %multiply.9421)
  %divide.1832 = f32[14336,256]{0,1} divide(%add.6301, %broadcast.13963)
  %sqrt.238 = f32[14336,256]{0,1} sqrt(%divide.1832)
  %add.6302 = f32[14336,256]{0,1} add(%sqrt.238, %broadcast.13964)
  %multiply.9422 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6302)
  %divide.1833 = f32[14336,256]{0,1} divide(%add.6300, %multiply.9422)
  %multiply.9423 = f32[14336,256]{1,0} multiply(%param.51, %broadcast.13958)
  %add.6303 = f32[14336,256]{0,1} add(%divide.1833, %multiply.9423)
  %multiply.9424 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6303)
  %add.6304 = f32[14336,256]{1,0} add(%param.51, %multiply.9424)
  %divide.1834 = f32[4096]{0} divide(%convert.3451, %broadcast.13924)
  %select.3365 = f32[4096]{0} select(%broadcast.13923, %convert.3451, %divide.1834)
  %multiply.9425 = f32[4096]{0} multiply(%select.3365, %broadcast.13925)
  %param.775 = f32[4096]{0} parameter(531), sharding={replicated}
  %multiply.9426 = f32[4096]{0} multiply(%param.775, %broadcast.13926)
  %add.6305 = f32[4096]{0} add(%multiply.9425, %multiply.9426)
  %multiply.9427 = f32[4096]{0} multiply(%select.3365, %select.3365)
  %multiply.9428 = f32[4096]{0} multiply(%multiply.9427, %broadcast.13928)
  %param.776 = f32[4096]{0} parameter(822), sharding={replicated}
  %multiply.9429 = f32[4096]{0} multiply(%param.776, %broadcast.13929)
  %add.6306 = f32[4096]{0} add(%multiply.9428, %multiply.9429)
  %divide.1835 = f32[4096]{0} divide(%add.6306, %broadcast.13931)
  %sqrt.239 = f32[4096]{0} sqrt(%divide.1835)
  %add.6307 = f32[4096]{0} add(%sqrt.239, %broadcast.13934)
  %multiply.9430 = f32[4096]{0} multiply(%broadcast.13927, %add.6307)
  %divide.1836 = f32[4096]{0} divide(%add.6305, %multiply.9430)
  %multiply.9431 = f32[4096]{0} multiply(%param.48, %broadcast.13925)
  %add.6308 = f32[4096]{0} add(%divide.1836, %multiply.9431)
  %multiply.9432 = f32[4096]{0} multiply(%broadcast.7107, %add.6308)
  %add.6309 = f32[4096]{0} add(%param.48, %multiply.9432)
  %divide.1837 = f32[4096]{0} divide(%convert.3453, %broadcast.13924)
  %select.3366 = f32[4096]{0} select(%broadcast.13923, %convert.3453, %divide.1837)
  %multiply.9433 = f32[4096]{0} multiply(%select.3366, %broadcast.13925)
  %param.777 = f32[4096]{0} parameter(532), sharding={replicated}
  %multiply.9434 = f32[4096]{0} multiply(%param.777, %broadcast.13926)
  %add.6310 = f32[4096]{0} add(%multiply.9433, %multiply.9434)
  %multiply.9435 = f32[4096]{0} multiply(%select.3366, %select.3366)
  %multiply.9436 = f32[4096]{0} multiply(%multiply.9435, %broadcast.13928)
  %param.778 = f32[4096]{0} parameter(823), sharding={replicated}
  %multiply.9437 = f32[4096]{0} multiply(%param.778, %broadcast.13929)
  %add.6311 = f32[4096]{0} add(%multiply.9436, %multiply.9437)
  %divide.1838 = f32[4096]{0} divide(%add.6311, %broadcast.13931)
  %sqrt.240 = f32[4096]{0} sqrt(%divide.1838)
  %add.6312 = f32[4096]{0} add(%sqrt.240, %broadcast.13934)
  %multiply.9438 = f32[4096]{0} multiply(%broadcast.13927, %add.6312)
  %divide.1839 = f32[4096]{0} divide(%add.6310, %multiply.9438)
  %multiply.9439 = f32[4096]{0} multiply(%param.43, %broadcast.13925)
  %add.6313 = f32[4096]{0} add(%divide.1839, %multiply.9439)
  %multiply.9440 = f32[4096]{0} multiply(%broadcast.7107, %add.6313)
  %add.6314 = f32[4096]{0} add(%param.43, %multiply.9440)
  %divide.1840 = f32[256,8,128]{0,2,1} divide(%transpose.488, %broadcast.13977)
  %select.3367 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.488, %divide.1840)
  %multiply.9441 = f32[256,8,128]{0,2,1} multiply(%select.3367, %broadcast.13978)
  %param.779 = f32[256,8,128]{2,1,0} parameter(533), sharding={devices=[16,1,1]<=[16]}
  %multiply.9442 = f32[256,8,128]{2,1,0} multiply(%param.779, %broadcast.13979)
  %add.6315 = f32[256,8,128]{0,2,1} add(%multiply.9441, %multiply.9442)
  %multiply.9443 = f32[256,8,128]{0,2,1} multiply(%select.3367, %select.3367)
  %multiply.9444 = f32[256,8,128]{0,2,1} multiply(%multiply.9443, %broadcast.13981)
  %param.780 = f32[256,8,128]{2,1,0} parameter(824), sharding={devices=[16,1,1]<=[16]}
  %multiply.9445 = f32[256,8,128]{2,1,0} multiply(%param.780, %broadcast.13982)
  %add.6316 = f32[256,8,128]{0,2,1} add(%multiply.9444, %multiply.9445)
  %divide.1841 = f32[256,8,128]{0,2,1} divide(%add.6316, %broadcast.13983)
  %sqrt.241 = f32[256,8,128]{0,2,1} sqrt(%divide.1841)
  %add.6318 = f32[256,8,128]{0,2,1} add(%sqrt.241, %broadcast.13984)
  %multiply.9446 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6318)
  %divide.1842 = f32[256,8,128]{0,2,1} divide(%add.6315, %multiply.9446)
  %multiply.9447 = f32[256,8,128]{2,1,0} multiply(%param.45, %broadcast.13978)
  %add.6319 = f32[256,8,128]{0,2,1} add(%divide.1842, %multiply.9447)
  %multiply.9448 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6319)
  %add.6320 = f32[256,8,128]{2,1,0} add(%param.45, %multiply.9448)
  %divide.1843 = f32[32,128,256]{1,0,2} divide(%transpose.489, %broadcast.13987)
  %select.3368 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.489, %divide.1843)
  %multiply.9449 = f32[32,128,256]{1,0,2} multiply(%select.3368, %broadcast.13989)
  %param.781 = f32[32,128,256]{2,1,0} parameter(534), sharding={devices=[1,1,16]<=[16]}
  %multiply.9450 = f32[32,128,256]{2,1,0} multiply(%param.781, %broadcast.13991)
  %add.6321 = f32[32,128,256]{1,0,2} add(%multiply.9449, %multiply.9450)
  %multiply.9451 = f32[32,128,256]{1,0,2} multiply(%select.3368, %select.3368)
  %multiply.9452 = f32[32,128,256]{1,0,2} multiply(%multiply.9451, %broadcast.13993)
  %param.782 = f32[32,128,256]{2,1,0} parameter(825), sharding={devices=[1,1,16]<=[16]}
  %multiply.9453 = f32[32,128,256]{2,1,0} multiply(%param.782, %broadcast.13994)
  %add.6322 = f32[32,128,256]{1,0,2} add(%multiply.9452, %multiply.9453)
  %divide.1844 = f32[32,128,256]{1,0,2} divide(%add.6322, %broadcast.13996)
  %sqrt.242 = f32[32,128,256]{1,0,2} sqrt(%divide.1844)
  %add.6323 = f32[32,128,256]{1,0,2} add(%sqrt.242, %broadcast.13998)
  %multiply.9454 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6323)
  %divide.1845 = f32[32,128,256]{1,0,2} divide(%add.6321, %multiply.9454)
  %multiply.9455 = f32[32,128,256]{2,1,0} multiply(%param.47, %broadcast.13989)
  %add.6324 = f32[32,128,256]{1,0,2} add(%divide.1845, %multiply.9455)
  %multiply.9457 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6324)
  %add.6325 = f32[32,128,256]{2,1,0} add(%param.47, %multiply.9457)
  %divide.1846 = f32[256,32,128]{0,2,1} divide(%transpose.490, %broadcast.14001)
  %select.3369 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.490, %divide.1846)
  %multiply.9458 = f32[256,32,128]{0,2,1} multiply(%select.3369, %broadcast.14002)
  %param.783 = f32[256,32,128]{2,1,0} parameter(535), sharding={devices=[16,1,1]<=[16]}
  %multiply.9459 = f32[256,32,128]{2,1,0} multiply(%param.783, %broadcast.14003)
  %add.6326 = f32[256,32,128]{0,2,1} add(%multiply.9458, %multiply.9459)
  %multiply.9460 = f32[256,32,128]{0,2,1} multiply(%select.3369, %select.3369)
  %multiply.9461 = f32[256,32,128]{0,2,1} multiply(%multiply.9460, %broadcast.14005)
  %param.784 = f32[256,32,128]{2,1,0} parameter(826), sharding={devices=[16,1,1]<=[16]}
  %multiply.9462 = f32[256,32,128]{2,1,0} multiply(%param.784, %broadcast.14006)
  %add.6327 = f32[256,32,128]{0,2,1} add(%multiply.9461, %multiply.9462)
  %divide.1847 = f32[256,32,128]{0,2,1} divide(%add.6327, %broadcast.14007)
  %sqrt.243 = f32[256,32,128]{0,2,1} sqrt(%divide.1847)
  %add.6328 = f32[256,32,128]{0,2,1} add(%sqrt.243, %broadcast.14008)
  %multiply.9463 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6328)
  %divide.1848 = f32[256,32,128]{0,2,1} divide(%add.6326, %multiply.9463)
  %multiply.9464 = f32[256,32,128]{2,1,0} multiply(%param.44, %broadcast.14002)
  %add.6329 = f32[256,32,128]{0,2,1} add(%divide.1848, %multiply.9464)
  %multiply.9465 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6329)
  %add.6330 = f32[256,32,128]{2,1,0} add(%param.44, %multiply.9465)
  %divide.1849 = f32[256,8,128]{0,2,1} divide(%transpose.491, %broadcast.13977)
  %select.3370 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.491, %divide.1849)
  %multiply.9466 = f32[256,8,128]{0,2,1} multiply(%select.3370, %broadcast.13978)
  %param.785 = f32[256,8,128]{2,1,0} parameter(536), sharding={devices=[16,1,1]<=[16]}
  %multiply.9467 = f32[256,8,128]{2,1,0} multiply(%param.785, %broadcast.13979)
  %add.6331 = f32[256,8,128]{0,2,1} add(%multiply.9466, %multiply.9467)
  %multiply.9468 = f32[256,8,128]{0,2,1} multiply(%select.3370, %select.3370)
  %multiply.9470 = f32[256,8,128]{0,2,1} multiply(%multiply.9468, %broadcast.13981)
  %param.786 = f32[256,8,128]{2,1,0} parameter(827), sharding={devices=[16,1,1]<=[16]}
  %multiply.9471 = f32[256,8,128]{2,1,0} multiply(%param.786, %broadcast.13982)
  %add.6332 = f32[256,8,128]{0,2,1} add(%multiply.9470, %multiply.9471)
  %divide.1850 = f32[256,8,128]{0,2,1} divide(%add.6332, %broadcast.13983)
  %sqrt.244 = f32[256,8,128]{0,2,1} sqrt(%divide.1850)
  %add.6333 = f32[256,8,128]{0,2,1} add(%sqrt.244, %broadcast.13984)
  %multiply.9472 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6333)
  %divide.1851 = f32[256,8,128]{0,2,1} divide(%add.6331, %multiply.9472)
  %multiply.9473 = f32[256,8,128]{2,1,0} multiply(%param.46, %broadcast.13978)
  %add.6334 = f32[256,8,128]{0,2,1} add(%divide.1851, %multiply.9473)
  %multiply.9474 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6334)
  %add.6335 = f32[256,8,128]{2,1,0} add(%param.46, %multiply.9474)
  %divide.1852 = f32[256,14336]{0,1} divide(%convert.3459, %broadcast.13938)
  %select.3371 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3459, %divide.1852)
  %multiply.9475 = f32[256,14336]{0,1} multiply(%select.3371, %broadcast.13940)
  %param.787 = f32[256,14336]{1,0} parameter(537), sharding={devices=[16,1]<=[16]}
  %multiply.9477 = f32[256,14336]{1,0} multiply(%param.787, %broadcast.13942)
  %add.6336 = f32[256,14336]{0,1} add(%multiply.9475, %multiply.9477)
  %multiply.9478 = f32[256,14336]{0,1} multiply(%select.3371, %select.3371)
  %multiply.9479 = f32[256,14336]{0,1} multiply(%multiply.9478, %broadcast.13945)
  %param.788 = f32[256,14336]{1,0} parameter(828), sharding={devices=[16,1]<=[16]}
  %multiply.9480 = f32[256,14336]{1,0} multiply(%param.788, %broadcast.13947)
  %add.6337 = f32[256,14336]{0,1} add(%multiply.9479, %multiply.9480)
  %divide.1853 = f32[256,14336]{0,1} divide(%add.6337, %broadcast.13948)
  %sqrt.245 = f32[256,14336]{0,1} sqrt(%divide.1853)
  %add.6338 = f32[256,14336]{0,1} add(%sqrt.245, %broadcast.13949)
  %multiply.9481 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6338)
  %divide.1854 = f32[256,14336]{0,1} divide(%add.6336, %multiply.9481)
  %multiply.9482 = f32[256,14336]{1,0} multiply(%param.58, %broadcast.13940)
  %add.6339 = f32[256,14336]{0,1} add(%divide.1854, %multiply.9482)
  %multiply.9483 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6339)
  %add.6340 = f32[256,14336]{1,0} add(%param.58, %multiply.9483)
  %divide.1855 = f32[256,14336]{0,1} divide(%convert.3460, %broadcast.13938)
  %select.3372 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3460, %divide.1855)
  %multiply.9484 = f32[256,14336]{0,1} multiply(%select.3372, %broadcast.13940)
  %param.789 = f32[256,14336]{1,0} parameter(538), sharding={devices=[16,1]<=[16]}
  %multiply.9486 = f32[256,14336]{1,0} multiply(%param.789, %broadcast.13942)
  %add.6341 = f32[256,14336]{0,1} add(%multiply.9484, %multiply.9486)
  %multiply.9487 = f32[256,14336]{0,1} multiply(%select.3372, %select.3372)
  %multiply.9488 = f32[256,14336]{0,1} multiply(%multiply.9487, %broadcast.13945)
  %param.790 = f32[256,14336]{1,0} parameter(829), sharding={devices=[16,1]<=[16]}
  %multiply.9489 = f32[256,14336]{1,0} multiply(%param.790, %broadcast.13947)
  %add.6342 = f32[256,14336]{0,1} add(%multiply.9488, %multiply.9489)
  %divide.1856 = f32[256,14336]{0,1} divide(%add.6342, %broadcast.13948)
  %sqrt.246 = f32[256,14336]{0,1} sqrt(%divide.1856)
  %add.6343 = f32[256,14336]{0,1} add(%sqrt.246, %broadcast.13949)
  %multiply.9490 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6343)
  %divide.1857 = f32[256,14336]{0,1} divide(%add.6341, %multiply.9490)
  %multiply.9491 = f32[256,14336]{1,0} multiply(%param.59, %broadcast.13940)
  %add.6344 = f32[256,14336]{0,1} add(%divide.1857, %multiply.9491)
  %multiply.9492 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6344)
  %add.6345 = f32[256,14336]{1,0} add(%param.59, %multiply.9492)
  %divide.1858 = f32[14336,256]{0,1} divide(%convert.3462, %broadcast.13957)
  %select.3373 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3462, %divide.1858)
  %multiply.9493 = f32[14336,256]{0,1} multiply(%select.3373, %broadcast.13958)
  %param.791 = f32[14336,256]{1,0} parameter(539), sharding={devices=[1,16]<=[16]}
  %multiply.9495 = f32[14336,256]{1,0} multiply(%param.791, %broadcast.13959)
  %add.6346 = f32[14336,256]{0,1} add(%multiply.9493, %multiply.9495)
  %multiply.9496 = f32[14336,256]{0,1} multiply(%select.3373, %select.3373)
  %multiply.9497 = f32[14336,256]{0,1} multiply(%multiply.9496, %broadcast.13961)
  %param.792 = f32[14336,256]{1,0} parameter(830), sharding={devices=[1,16]<=[16]}
  %multiply.9498 = f32[14336,256]{1,0} multiply(%param.792, %broadcast.13962)
  %add.6347 = f32[14336,256]{0,1} add(%multiply.9497, %multiply.9498)
  %divide.1859 = f32[14336,256]{0,1} divide(%add.6347, %broadcast.13963)
  %sqrt.247 = f32[14336,256]{0,1} sqrt(%divide.1859)
  %add.6349 = f32[14336,256]{0,1} add(%sqrt.247, %broadcast.13964)
  %multiply.9499 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6349)
  %divide.1860 = f32[14336,256]{0,1} divide(%add.6346, %multiply.9499)
  %multiply.9500 = f32[14336,256]{1,0} multiply(%param.60, %broadcast.13958)
  %add.6350 = f32[14336,256]{0,1} add(%divide.1860, %multiply.9500)
  %multiply.9501 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6350)
  %add.6351 = f32[14336,256]{1,0} add(%param.60, %multiply.9501)
  %divide.1861 = f32[4096]{0} divide(%convert.3463, %broadcast.13924)
  %select.3374 = f32[4096]{0} select(%broadcast.13923, %convert.3463, %divide.1861)
  %multiply.9502 = f32[4096]{0} multiply(%select.3374, %broadcast.13925)
  %param.793 = f32[4096]{0} parameter(540), sharding={replicated}
  %multiply.9503 = f32[4096]{0} multiply(%param.793, %broadcast.13926)
  %add.6352 = f32[4096]{0} add(%multiply.9502, %multiply.9503)
  %multiply.9504 = f32[4096]{0} multiply(%select.3374, %select.3374)
  %multiply.9505 = f32[4096]{0} multiply(%multiply.9504, %broadcast.13928)
  %param.794 = f32[4096]{0} parameter(831), sharding={replicated}
  %multiply.9506 = f32[4096]{0} multiply(%param.794, %broadcast.13929)
  %add.6353 = f32[4096]{0} add(%multiply.9505, %multiply.9506)
  %divide.1862 = f32[4096]{0} divide(%add.6353, %broadcast.13931)
  %sqrt.248 = f32[4096]{0} sqrt(%divide.1862)
  %add.6354 = f32[4096]{0} add(%sqrt.248, %broadcast.13934)
  %multiply.9508 = f32[4096]{0} multiply(%broadcast.13927, %add.6354)
  %divide.1863 = f32[4096]{0} divide(%add.6352, %multiply.9508)
  %multiply.9509 = f32[4096]{0} multiply(%param.57, %broadcast.13925)
  %add.6355 = f32[4096]{0} add(%divide.1863, %multiply.9509)
  %multiply.9510 = f32[4096]{0} multiply(%broadcast.7107, %add.6355)
  %add.6357 = f32[4096]{0} add(%param.57, %multiply.9510)
  %divide.1864 = f32[4096]{0} divide(%convert.3465, %broadcast.13924)
  %select.3375 = f32[4096]{0} select(%broadcast.13923, %convert.3465, %divide.1864)
  %multiply.9511 = f32[4096]{0} multiply(%select.3375, %broadcast.13925)
  %param.795 = f32[4096]{0} parameter(541), sharding={replicated}
  %multiply.9512 = f32[4096]{0} multiply(%param.795, %broadcast.13926)
  %add.6358 = f32[4096]{0} add(%multiply.9511, %multiply.9512)
  %multiply.9513 = f32[4096]{0} multiply(%select.3375, %select.3375)
  %multiply.9515 = f32[4096]{0} multiply(%multiply.9513, %broadcast.13928)
  %param.796 = f32[4096]{0} parameter(832), sharding={replicated}
  %multiply.9516 = f32[4096]{0} multiply(%param.796, %broadcast.13929)
  %add.6359 = f32[4096]{0} add(%multiply.9515, %multiply.9516)
  %divide.1865 = f32[4096]{0} divide(%add.6359, %broadcast.13931)
  %sqrt.249 = f32[4096]{0} sqrt(%divide.1865)
  %add.6360 = f32[4096]{0} add(%sqrt.249, %broadcast.13934)
  %multiply.9517 = f32[4096]{0} multiply(%broadcast.13927, %add.6360)
  %divide.1866 = f32[4096]{0} divide(%add.6358, %multiply.9517)
  %multiply.9518 = f32[4096]{0} multiply(%param.52, %broadcast.13925)
  %add.6361 = f32[4096]{0} add(%divide.1866, %multiply.9518)
  %multiply.9519 = f32[4096]{0} multiply(%broadcast.7107, %add.6361)
  %add.6362 = f32[4096]{0} add(%param.52, %multiply.9519)
  %divide.1867 = f32[256,8,128]{0,2,1} divide(%transpose.492, %broadcast.13977)
  %select.3376 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.492, %divide.1867)
  %multiply.9520 = f32[256,8,128]{0,2,1} multiply(%select.3376, %broadcast.13978)
  %param.797 = f32[256,8,128]{2,1,0} parameter(542), sharding={devices=[16,1,1]<=[16]}
  %multiply.9521 = f32[256,8,128]{2,1,0} multiply(%param.797, %broadcast.13979)
  %add.6363 = f32[256,8,128]{0,2,1} add(%multiply.9520, %multiply.9521)
  %multiply.9522 = f32[256,8,128]{0,2,1} multiply(%select.3376, %select.3376)
  %multiply.9523 = f32[256,8,128]{0,2,1} multiply(%multiply.9522, %broadcast.13981)
  %param.798 = f32[256,8,128]{2,1,0} parameter(833), sharding={devices=[16,1,1]<=[16]}
  %multiply.9524 = f32[256,8,128]{2,1,0} multiply(%param.798, %broadcast.13982)
  %add.6364 = f32[256,8,128]{0,2,1} add(%multiply.9523, %multiply.9524)
  %divide.1868 = f32[256,8,128]{0,2,1} divide(%add.6364, %broadcast.13983)
  %sqrt.250 = f32[256,8,128]{0,2,1} sqrt(%divide.1868)
  %add.6365 = f32[256,8,128]{0,2,1} add(%sqrt.250, %broadcast.13984)
  %multiply.9525 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6365)
  %divide.1869 = f32[256,8,128]{0,2,1} divide(%add.6363, %multiply.9525)
  %multiply.9526 = f32[256,8,128]{2,1,0} multiply(%param.54, %broadcast.13978)
  %add.6366 = f32[256,8,128]{0,2,1} add(%divide.1869, %multiply.9526)
  %multiply.9527 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6366)
  %add.6367 = f32[256,8,128]{2,1,0} add(%param.54, %multiply.9527)
  %divide.1870 = f32[32,128,256]{1,0,2} divide(%transpose.493, %broadcast.13987)
  %select.3377 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.493, %divide.1870)
  %multiply.9528 = f32[32,128,256]{1,0,2} multiply(%select.3377, %broadcast.13989)
  %param.799 = f32[32,128,256]{2,1,0} parameter(543), sharding={devices=[1,1,16]<=[16]}
  %multiply.9529 = f32[32,128,256]{2,1,0} multiply(%param.799, %broadcast.13991)
  %add.6368 = f32[32,128,256]{1,0,2} add(%multiply.9528, %multiply.9529)
  %multiply.9530 = f32[32,128,256]{1,0,2} multiply(%select.3377, %select.3377)
  %multiply.9531 = f32[32,128,256]{1,0,2} multiply(%multiply.9530, %broadcast.13993)
  %param.800 = f32[32,128,256]{2,1,0} parameter(834), sharding={devices=[1,1,16]<=[16]}
  %multiply.9532 = f32[32,128,256]{2,1,0} multiply(%param.800, %broadcast.13994)
  %add.6369 = f32[32,128,256]{1,0,2} add(%multiply.9531, %multiply.9532)
  %divide.1871 = f32[32,128,256]{1,0,2} divide(%add.6369, %broadcast.13996)
  %sqrt.251 = f32[32,128,256]{1,0,2} sqrt(%divide.1871)
  %add.6370 = f32[32,128,256]{1,0,2} add(%sqrt.251, %broadcast.13998)
  %multiply.9533 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6370)
  %divide.1872 = f32[32,128,256]{1,0,2} divide(%add.6368, %multiply.9533)
  %multiply.9534 = f32[32,128,256]{2,1,0} multiply(%param.56, %broadcast.13989)
  %add.6371 = f32[32,128,256]{1,0,2} add(%divide.1872, %multiply.9534)
  %multiply.9535 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6371)
  %add.6372 = f32[32,128,256]{2,1,0} add(%param.56, %multiply.9535)
  %divide.1873 = f32[256,32,128]{0,2,1} divide(%transpose.494, %broadcast.14001)
  %select.3378 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.494, %divide.1873)
  %multiply.9536 = f32[256,32,128]{0,2,1} multiply(%select.3378, %broadcast.14002)
  %param.801 = f32[256,32,128]{2,1,0} parameter(544), sharding={devices=[16,1,1]<=[16]}
  %multiply.9537 = f32[256,32,128]{2,1,0} multiply(%param.801, %broadcast.14003)
  %add.6373 = f32[256,32,128]{0,2,1} add(%multiply.9536, %multiply.9537)
  %multiply.9538 = f32[256,32,128]{0,2,1} multiply(%select.3378, %select.3378)
  %multiply.9539 = f32[256,32,128]{0,2,1} multiply(%multiply.9538, %broadcast.14005)
  %param.802 = f32[256,32,128]{2,1,0} parameter(835), sharding={devices=[16,1,1]<=[16]}
  %multiply.9540 = f32[256,32,128]{2,1,0} multiply(%param.802, %broadcast.14006)
  %add.6375 = f32[256,32,128]{0,2,1} add(%multiply.9539, %multiply.9540)
  %divide.1874 = f32[256,32,128]{0,2,1} divide(%add.6375, %broadcast.14007)
  %sqrt.252 = f32[256,32,128]{0,2,1} sqrt(%divide.1874)
  %add.6376 = f32[256,32,128]{0,2,1} add(%sqrt.252, %broadcast.14008)
  %multiply.9541 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6376)
  %divide.1875 = f32[256,32,128]{0,2,1} divide(%add.6373, %multiply.9541)
  %multiply.9542 = f32[256,32,128]{2,1,0} multiply(%param.53, %broadcast.14002)
  %add.6377 = f32[256,32,128]{0,2,1} add(%divide.1875, %multiply.9542)
  %multiply.9543 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6377)
  %add.6378 = f32[256,32,128]{2,1,0} add(%param.53, %multiply.9543)
  %divide.1876 = f32[256,8,128]{0,2,1} divide(%transpose.495, %broadcast.13977)
  %select.3379 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.495, %divide.1876)
  %multiply.9545 = f32[256,8,128]{0,2,1} multiply(%select.3379, %broadcast.13978)
  %param.803 = f32[256,8,128]{2,1,0} parameter(545), sharding={devices=[16,1,1]<=[16]}
  %multiply.9546 = f32[256,8,128]{2,1,0} multiply(%param.803, %broadcast.13979)
  %add.6380 = f32[256,8,128]{0,2,1} add(%multiply.9545, %multiply.9546)
  %multiply.9547 = f32[256,8,128]{0,2,1} multiply(%select.3379, %select.3379)
  %multiply.9548 = f32[256,8,128]{0,2,1} multiply(%multiply.9547, %broadcast.13981)
  %param.804 = f32[256,8,128]{2,1,0} parameter(836), sharding={devices=[16,1,1]<=[16]}
  %multiply.9549 = f32[256,8,128]{2,1,0} multiply(%param.804, %broadcast.13982)
  %add.6381 = f32[256,8,128]{0,2,1} add(%multiply.9548, %multiply.9549)
  %divide.1877 = f32[256,8,128]{0,2,1} divide(%add.6381, %broadcast.13983)
  %sqrt.253 = f32[256,8,128]{0,2,1} sqrt(%divide.1877)
  %add.6382 = f32[256,8,128]{0,2,1} add(%sqrt.253, %broadcast.13984)
  %multiply.9550 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6382)
  %divide.1878 = f32[256,8,128]{0,2,1} divide(%add.6380, %multiply.9550)
  %multiply.9551 = f32[256,8,128]{2,1,0} multiply(%param.55, %broadcast.13978)
  %add.6383 = f32[256,8,128]{0,2,1} add(%divide.1878, %multiply.9551)
  %multiply.9552 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6383)
  %add.6385 = f32[256,8,128]{2,1,0} add(%param.55, %multiply.9552)
  %divide.1879 = f32[256,14336]{0,1} divide(%convert.3473, %broadcast.13938)
  %select.3380 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3473, %divide.1879)
  %multiply.9553 = f32[256,14336]{0,1} multiply(%select.3380, %broadcast.13940)
  %param.805 = f32[256,14336]{1,0} parameter(546), sharding={devices=[16,1]<=[16]}
  %multiply.9554 = f32[256,14336]{1,0} multiply(%param.805, %broadcast.13942)
  %add.6386 = f32[256,14336]{0,1} add(%multiply.9553, %multiply.9554)
  %multiply.9555 = f32[256,14336]{0,1} multiply(%select.3380, %select.3380)
  %multiply.9556 = f32[256,14336]{0,1} multiply(%multiply.9555, %broadcast.13945)
  %param.806 = f32[256,14336]{1,0} parameter(837), sharding={devices=[16,1]<=[16]}
  %multiply.9557 = f32[256,14336]{1,0} multiply(%param.806, %broadcast.13947)
  %add.6387 = f32[256,14336]{0,1} add(%multiply.9556, %multiply.9557)
  %divide.1880 = f32[256,14336]{0,1} divide(%add.6387, %broadcast.13948)
  %sqrt.254 = f32[256,14336]{0,1} sqrt(%divide.1880)
  %add.6388 = f32[256,14336]{0,1} add(%sqrt.254, %broadcast.13949)
  %multiply.9558 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6388)
  %divide.1881 = f32[256,14336]{0,1} divide(%add.6386, %multiply.9558)
  %multiply.9559 = f32[256,14336]{1,0} multiply(%param.67, %broadcast.13940)
  %add.6389 = f32[256,14336]{0,1} add(%divide.1881, %multiply.9559)
  %multiply.9561 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6389)
  %add.6390 = f32[256,14336]{1,0} add(%param.67, %multiply.9561)
  %divide.1882 = f32[256,14336]{0,1} divide(%convert.3474, %broadcast.13938)
  %select.3382 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3474, %divide.1882)
  %multiply.9563 = f32[256,14336]{0,1} multiply(%select.3382, %broadcast.13940)
  %param.807 = f32[256,14336]{1,0} parameter(547), sharding={devices=[16,1]<=[16]}
  %multiply.9564 = f32[256,14336]{1,0} multiply(%param.807, %broadcast.13942)
  %add.6391 = f32[256,14336]{0,1} add(%multiply.9563, %multiply.9564)
  %multiply.9565 = f32[256,14336]{0,1} multiply(%select.3382, %select.3382)
  %multiply.9566 = f32[256,14336]{0,1} multiply(%multiply.9565, %broadcast.13945)
  %param.808 = f32[256,14336]{1,0} parameter(838), sharding={devices=[16,1]<=[16]}
  %multiply.9567 = f32[256,14336]{1,0} multiply(%param.808, %broadcast.13947)
  %add.6392 = f32[256,14336]{0,1} add(%multiply.9566, %multiply.9567)
  %divide.1883 = f32[256,14336]{0,1} divide(%add.6392, %broadcast.13948)
  %sqrt.255 = f32[256,14336]{0,1} sqrt(%divide.1883)
  %add.6393 = f32[256,14336]{0,1} add(%sqrt.255, %broadcast.13949)
  %multiply.9568 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6393)
  %divide.1884 = f32[256,14336]{0,1} divide(%add.6391, %multiply.9568)
  %multiply.9569 = f32[256,14336]{1,0} multiply(%param.68, %broadcast.13940)
  %add.6394 = f32[256,14336]{0,1} add(%divide.1884, %multiply.9569)
  %multiply.9570 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6394)
  %add.6395 = f32[256,14336]{1,0} add(%param.68, %multiply.9570)
  %divide.1885 = f32[14336,256]{0,1} divide(%convert.3475, %broadcast.13957)
  %select.3383 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3475, %divide.1885)
  %multiply.9571 = f32[14336,256]{0,1} multiply(%select.3383, %broadcast.13958)
  %param.809 = f32[14336,256]{1,0} parameter(548), sharding={devices=[1,16]<=[16]}
  %multiply.9572 = f32[14336,256]{1,0} multiply(%param.809, %broadcast.13959)
  %add.6396 = f32[14336,256]{0,1} add(%multiply.9571, %multiply.9572)
  %multiply.9573 = f32[14336,256]{0,1} multiply(%select.3383, %select.3383)
  %multiply.9574 = f32[14336,256]{0,1} multiply(%multiply.9573, %broadcast.13961)
  %param.810 = f32[14336,256]{1,0} parameter(839), sharding={devices=[1,16]<=[16]}
  %multiply.9575 = f32[14336,256]{1,0} multiply(%param.810, %broadcast.13962)
  %add.6397 = f32[14336,256]{0,1} add(%multiply.9574, %multiply.9575)
  %divide.1886 = f32[14336,256]{0,1} divide(%add.6397, %broadcast.13963)
  %sqrt.256 = f32[14336,256]{0,1} sqrt(%divide.1886)
  %add.6398 = f32[14336,256]{0,1} add(%sqrt.256, %broadcast.13964)
  %multiply.9576 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6398)
  %divide.1887 = f32[14336,256]{0,1} divide(%add.6396, %multiply.9576)
  %multiply.9577 = f32[14336,256]{1,0} multiply(%param.69, %broadcast.13958)
  %add.6399 = f32[14336,256]{0,1} add(%divide.1887, %multiply.9577)
  %multiply.9578 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6399)
  %add.6400 = f32[14336,256]{1,0} add(%param.69, %multiply.9578)
  %divide.1888 = f32[4096]{0} divide(%convert.3476, %broadcast.13924)
  %select.3384 = f32[4096]{0} select(%broadcast.13923, %convert.3476, %divide.1888)
  %multiply.9579 = f32[4096]{0} multiply(%select.3384, %broadcast.13925)
  %param.811 = f32[4096]{0} parameter(549), sharding={replicated}
  %multiply.9580 = f32[4096]{0} multiply(%param.811, %broadcast.13926)
  %add.6401 = f32[4096]{0} add(%multiply.9579, %multiply.9580)
  %multiply.9581 = f32[4096]{0} multiply(%select.3384, %select.3384)
  %multiply.9582 = f32[4096]{0} multiply(%multiply.9581, %broadcast.13928)
  %param.812 = f32[4096]{0} parameter(840), sharding={replicated}
  %multiply.9583 = f32[4096]{0} multiply(%param.812, %broadcast.13929)
  %add.6402 = f32[4096]{0} add(%multiply.9582, %multiply.9583)
  %divide.1889 = f32[4096]{0} divide(%add.6402, %broadcast.13931)
  %sqrt.257 = f32[4096]{0} sqrt(%divide.1889)
  %add.6403 = f32[4096]{0} add(%sqrt.257, %broadcast.13934)
  %multiply.9584 = f32[4096]{0} multiply(%broadcast.13927, %add.6403)
  %divide.1890 = f32[4096]{0} divide(%add.6401, %multiply.9584)
  %multiply.9585 = f32[4096]{0} multiply(%param.66, %broadcast.13925)
  %add.6404 = f32[4096]{0} add(%divide.1890, %multiply.9585)
  %multiply.9586 = f32[4096]{0} multiply(%broadcast.7107, %add.6404)
  %add.6405 = f32[4096]{0} add(%param.66, %multiply.9586)
  %divide.1891 = f32[4096]{0} divide(%convert.3478, %broadcast.13924)
  %select.3385 = f32[4096]{0} select(%broadcast.13923, %convert.3478, %divide.1891)
  %multiply.9587 = f32[4096]{0} multiply(%select.3385, %broadcast.13925)
  %param.813 = f32[4096]{0} parameter(550), sharding={replicated}
  %multiply.9588 = f32[4096]{0} multiply(%param.813, %broadcast.13926)
  %add.6406 = f32[4096]{0} add(%multiply.9587, %multiply.9588)
  %multiply.9590 = f32[4096]{0} multiply(%select.3385, %select.3385)
  %multiply.9591 = f32[4096]{0} multiply(%multiply.9590, %broadcast.13928)
  %param.814 = f32[4096]{0} parameter(841), sharding={replicated}
  %multiply.9592 = f32[4096]{0} multiply(%param.814, %broadcast.13929)
  %add.6407 = f32[4096]{0} add(%multiply.9591, %multiply.9592)
  %divide.1892 = f32[4096]{0} divide(%add.6407, %broadcast.13931)
  %sqrt.258 = f32[4096]{0} sqrt(%divide.1892)
  %add.6408 = f32[4096]{0} add(%sqrt.258, %broadcast.13934)
  %multiply.9593 = f32[4096]{0} multiply(%broadcast.13927, %add.6408)
  %divide.1893 = f32[4096]{0} divide(%add.6406, %multiply.9593)
  %multiply.9595 = f32[4096]{0} multiply(%param.61, %broadcast.13925)
  %add.6409 = f32[4096]{0} add(%divide.1893, %multiply.9595)
  %multiply.9596 = f32[4096]{0} multiply(%broadcast.7107, %add.6409)
  %add.6411 = f32[4096]{0} add(%param.61, %multiply.9596)
  %divide.1894 = f32[256,8,128]{0,2,1} divide(%transpose.496, %broadcast.13977)
  %select.3386 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.496, %divide.1894)
  %multiply.9597 = f32[256,8,128]{0,2,1} multiply(%select.3386, %broadcast.13978)
  %param.815 = f32[256,8,128]{2,1,0} parameter(551), sharding={devices=[16,1,1]<=[16]}
  %multiply.9598 = f32[256,8,128]{2,1,0} multiply(%param.815, %broadcast.13979)
  %add.6412 = f32[256,8,128]{0,2,1} add(%multiply.9597, %multiply.9598)
  %multiply.9599 = f32[256,8,128]{0,2,1} multiply(%select.3386, %select.3386)
  %multiply.9601 = f32[256,8,128]{0,2,1} multiply(%multiply.9599, %broadcast.13981)
  %param.816 = f32[256,8,128]{2,1,0} parameter(842), sharding={devices=[16,1,1]<=[16]}
  %multiply.9602 = f32[256,8,128]{2,1,0} multiply(%param.816, %broadcast.13982)
  %add.6413 = f32[256,8,128]{0,2,1} add(%multiply.9601, %multiply.9602)
  %divide.1895 = f32[256,8,128]{0,2,1} divide(%add.6413, %broadcast.13983)
  %sqrt.259 = f32[256,8,128]{0,2,1} sqrt(%divide.1895)
  %add.6414 = f32[256,8,128]{0,2,1} add(%sqrt.259, %broadcast.13984)
  %multiply.9603 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6414)
  %divide.1896 = f32[256,8,128]{0,2,1} divide(%add.6412, %multiply.9603)
  %multiply.9604 = f32[256,8,128]{2,1,0} multiply(%param.63, %broadcast.13978)
  %add.6415 = f32[256,8,128]{0,2,1} add(%divide.1896, %multiply.9604)
  %multiply.9605 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6415)
  %add.6416 = f32[256,8,128]{2,1,0} add(%param.63, %multiply.9605)
  %divide.1897 = f32[32,128,256]{1,0,2} divide(%transpose.497, %broadcast.13987)
  %select.3387 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.497, %divide.1897)
  %multiply.9606 = f32[32,128,256]{1,0,2} multiply(%select.3387, %broadcast.13989)
  %param.817 = f32[32,128,256]{2,1,0} parameter(552), sharding={devices=[1,1,16]<=[16]}
  %multiply.9607 = f32[32,128,256]{2,1,0} multiply(%param.817, %broadcast.13991)
  %add.6418 = f32[32,128,256]{1,0,2} add(%multiply.9606, %multiply.9607)
  %multiply.9608 = f32[32,128,256]{1,0,2} multiply(%select.3387, %select.3387)
  %multiply.9609 = f32[32,128,256]{1,0,2} multiply(%multiply.9608, %broadcast.13993)
  %param.818 = f32[32,128,256]{2,1,0} parameter(843), sharding={devices=[1,1,16]<=[16]}
  %multiply.9610 = f32[32,128,256]{2,1,0} multiply(%param.818, %broadcast.13994)
  %add.6419 = f32[32,128,256]{1,0,2} add(%multiply.9609, %multiply.9610)
  %divide.1898 = f32[32,128,256]{1,0,2} divide(%add.6419, %broadcast.13996)
  %sqrt.260 = f32[32,128,256]{1,0,2} sqrt(%divide.1898)
  %add.6420 = f32[32,128,256]{1,0,2} add(%sqrt.260, %broadcast.13998)
  %multiply.9611 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6420)
  %divide.1899 = f32[32,128,256]{1,0,2} divide(%add.6418, %multiply.9611)
  %multiply.9612 = f32[32,128,256]{2,1,0} multiply(%param.65, %broadcast.13989)
  %add.6421 = f32[32,128,256]{1,0,2} add(%divide.1899, %multiply.9612)
  %multiply.9613 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6421)
  %add.6423 = f32[32,128,256]{2,1,0} add(%param.65, %multiply.9613)
  %divide.1900 = f32[256,32,128]{0,2,1} divide(%transpose.498, %broadcast.14001)
  %select.3388 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.498, %divide.1900)
  %multiply.9614 = f32[256,32,128]{0,2,1} multiply(%select.3388, %broadcast.14002)
  %param.819 = f32[256,32,128]{2,1,0} parameter(553), sharding={devices=[16,1,1]<=[16]}
  %multiply.9615 = f32[256,32,128]{2,1,0} multiply(%param.819, %broadcast.14003)
  %add.6424 = f32[256,32,128]{0,2,1} add(%multiply.9614, %multiply.9615)
  %multiply.9616 = f32[256,32,128]{0,2,1} multiply(%select.3388, %select.3388)
  %multiply.9617 = f32[256,32,128]{0,2,1} multiply(%multiply.9616, %broadcast.14005)
  %param.820 = f32[256,32,128]{2,1,0} parameter(844), sharding={devices=[16,1,1]<=[16]}
  %multiply.9618 = f32[256,32,128]{2,1,0} multiply(%param.820, %broadcast.14006)
  %add.6425 = f32[256,32,128]{0,2,1} add(%multiply.9617, %multiply.9618)
  %divide.1901 = f32[256,32,128]{0,2,1} divide(%add.6425, %broadcast.14007)
  %sqrt.261 = f32[256,32,128]{0,2,1} sqrt(%divide.1901)
  %add.6426 = f32[256,32,128]{0,2,1} add(%sqrt.261, %broadcast.14008)
  %multiply.9619 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6426)
  %divide.1902 = f32[256,32,128]{0,2,1} divide(%add.6424, %multiply.9619)
  %multiply.9621 = f32[256,32,128]{2,1,0} multiply(%param.62, %broadcast.14002)
  %add.6427 = f32[256,32,128]{0,2,1} add(%divide.1902, %multiply.9621)
  %multiply.9622 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6427)
  %add.6428 = f32[256,32,128]{2,1,0} add(%param.62, %multiply.9622)
  %divide.1904 = f32[256,8,128]{0,2,1} divide(%transpose.499, %broadcast.13977)
  %select.3389 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.499, %divide.1904)
  %multiply.9623 = f32[256,8,128]{0,2,1} multiply(%select.3389, %broadcast.13978)
  %param.821 = f32[256,8,128]{2,1,0} parameter(554), sharding={devices=[16,1,1]<=[16]}
  %multiply.9624 = f32[256,8,128]{2,1,0} multiply(%param.821, %broadcast.13979)
  %add.6429 = f32[256,8,128]{0,2,1} add(%multiply.9623, %multiply.9624)
  %multiply.9625 = f32[256,8,128]{0,2,1} multiply(%select.3389, %select.3389)
  %multiply.9626 = f32[256,8,128]{0,2,1} multiply(%multiply.9625, %broadcast.13981)
  %param.822 = f32[256,8,128]{2,1,0} parameter(845), sharding={devices=[16,1,1]<=[16]}
  %multiply.9627 = f32[256,8,128]{2,1,0} multiply(%param.822, %broadcast.13982)
  %add.6430 = f32[256,8,128]{0,2,1} add(%multiply.9626, %multiply.9627)
  %divide.1905 = f32[256,8,128]{0,2,1} divide(%add.6430, %broadcast.13983)
  %sqrt.262 = f32[256,8,128]{0,2,1} sqrt(%divide.1905)
  %add.6431 = f32[256,8,128]{0,2,1} add(%sqrt.262, %broadcast.13984)
  %multiply.9628 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6431)
  %divide.1906 = f32[256,8,128]{0,2,1} divide(%add.6429, %multiply.9628)
  %multiply.9629 = f32[256,8,128]{2,1,0} multiply(%param.64, %broadcast.13978)
  %add.6432 = f32[256,8,128]{0,2,1} add(%divide.1906, %multiply.9629)
  %multiply.9630 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6432)
  %add.6433 = f32[256,8,128]{2,1,0} add(%param.64, %multiply.9630)
  %divide.1907 = f32[256,14336]{0,1} divide(%convert.3484, %broadcast.13938)
  %select.3390 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3484, %divide.1907)
  %multiply.9631 = f32[256,14336]{0,1} multiply(%select.3390, %broadcast.13940)
  %param.823 = f32[256,14336]{1,0} parameter(555), sharding={devices=[16,1]<=[16]}
  %multiply.9632 = f32[256,14336]{1,0} multiply(%param.823, %broadcast.13942)
  %add.6434 = f32[256,14336]{0,1} add(%multiply.9631, %multiply.9632)
  %multiply.9633 = f32[256,14336]{0,1} multiply(%select.3390, %select.3390)
  %multiply.9634 = f32[256,14336]{0,1} multiply(%multiply.9633, %broadcast.13945)
  %param.824 = f32[256,14336]{1,0} parameter(846), sharding={devices=[16,1]<=[16]}
  %multiply.9635 = f32[256,14336]{1,0} multiply(%param.824, %broadcast.13947)
  %add.6435 = f32[256,14336]{0,1} add(%multiply.9634, %multiply.9635)
  %divide.1908 = f32[256,14336]{0,1} divide(%add.6435, %broadcast.13948)
  %sqrt.263 = f32[256,14336]{0,1} sqrt(%divide.1908)
  %add.6436 = f32[256,14336]{0,1} add(%sqrt.263, %broadcast.13949)
  %multiply.9637 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6436)
  %divide.1909 = f32[256,14336]{0,1} divide(%add.6434, %multiply.9637)
  %multiply.9639 = f32[256,14336]{1,0} multiply(%param.76, %broadcast.13940)
  %add.6437 = f32[256,14336]{0,1} add(%divide.1909, %multiply.9639)
  %multiply.9640 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6437)
  %add.6438 = f32[256,14336]{1,0} add(%param.76, %multiply.9640)
  %divide.1910 = f32[256,14336]{0,1} divide(%convert.3485, %broadcast.13938)
  %select.3391 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3485, %divide.1910)
  %multiply.9641 = f32[256,14336]{0,1} multiply(%select.3391, %broadcast.13940)
  %param.825 = f32[256,14336]{1,0} parameter(556), sharding={devices=[16,1]<=[16]}
  %multiply.9642 = f32[256,14336]{1,0} multiply(%param.825, %broadcast.13942)
  %add.6439 = f32[256,14336]{0,1} add(%multiply.9641, %multiply.9642)
  %multiply.9643 = f32[256,14336]{0,1} multiply(%select.3391, %select.3391)
  %multiply.9644 = f32[256,14336]{0,1} multiply(%multiply.9643, %broadcast.13945)
  %param.826 = f32[256,14336]{1,0} parameter(847), sharding={devices=[16,1]<=[16]}
  %multiply.9645 = f32[256,14336]{1,0} multiply(%param.826, %broadcast.13947)
  %add.6440 = f32[256,14336]{0,1} add(%multiply.9644, %multiply.9645)
  %divide.1911 = f32[256,14336]{0,1} divide(%add.6440, %broadcast.13948)
  %sqrt.264 = f32[256,14336]{0,1} sqrt(%divide.1911)
  %add.6441 = f32[256,14336]{0,1} add(%sqrt.264, %broadcast.13949)
  %multiply.9646 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6441)
  %divide.1912 = f32[256,14336]{0,1} divide(%add.6439, %multiply.9646)
  %multiply.9647 = f32[256,14336]{1,0} multiply(%param.77, %broadcast.13940)
  %add.6442 = f32[256,14336]{0,1} add(%divide.1912, %multiply.9647)
  %multiply.9648 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6442)
  %add.6443 = f32[256,14336]{1,0} add(%param.77, %multiply.9648)
  %divide.1913 = f32[14336,256]{0,1} divide(%convert.3486, %broadcast.13957)
  %select.3392 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3486, %divide.1913)
  %multiply.9649 = f32[14336,256]{0,1} multiply(%select.3392, %broadcast.13958)
  %param.827 = f32[14336,256]{1,0} parameter(557), sharding={devices=[1,16]<=[16]}
  %multiply.9650 = f32[14336,256]{1,0} multiply(%param.827, %broadcast.13959)
  %add.6444 = f32[14336,256]{0,1} add(%multiply.9649, %multiply.9650)
  %multiply.9651 = f32[14336,256]{0,1} multiply(%select.3392, %select.3392)
  %multiply.9652 = f32[14336,256]{0,1} multiply(%multiply.9651, %broadcast.13961)
  %param.828 = f32[14336,256]{1,0} parameter(848), sharding={devices=[1,16]<=[16]}
  %multiply.9653 = f32[14336,256]{1,0} multiply(%param.828, %broadcast.13962)
  %add.6445 = f32[14336,256]{0,1} add(%multiply.9652, %multiply.9653)
  %divide.1914 = f32[14336,256]{0,1} divide(%add.6445, %broadcast.13963)
  %sqrt.265 = f32[14336,256]{0,1} sqrt(%divide.1914)
  %add.6446 = f32[14336,256]{0,1} add(%sqrt.265, %broadcast.13964)
  %multiply.9654 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6446)
  %divide.1915 = f32[14336,256]{0,1} divide(%add.6444, %multiply.9654)
  %multiply.9655 = f32[14336,256]{1,0} multiply(%param.78, %broadcast.13958)
  %add.6447 = f32[14336,256]{0,1} add(%divide.1915, %multiply.9655)
  %multiply.9656 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6447)
  %add.6448 = f32[14336,256]{1,0} add(%param.78, %multiply.9656)
  %divide.1916 = f32[4096]{0} divide(%convert.3488, %broadcast.13924)
  %select.3393 = f32[4096]{0} select(%broadcast.13923, %convert.3488, %divide.1916)
  %multiply.9657 = f32[4096]{0} multiply(%select.3393, %broadcast.13925)
  %param.829 = f32[4096]{0} parameter(558), sharding={replicated}
  %multiply.9658 = f32[4096]{0} multiply(%param.829, %broadcast.13926)
  %add.6449 = f32[4096]{0} add(%multiply.9657, %multiply.9658)
  %multiply.9659 = f32[4096]{0} multiply(%select.3393, %select.3393)
  %multiply.9660 = f32[4096]{0} multiply(%multiply.9659, %broadcast.13928)
  %param.830 = f32[4096]{0} parameter(849), sharding={replicated}
  %multiply.9661 = f32[4096]{0} multiply(%param.830, %broadcast.13929)
  %add.6450 = f32[4096]{0} add(%multiply.9660, %multiply.9661)
  %divide.1917 = f32[4096]{0} divide(%add.6450, %broadcast.13931)
  %sqrt.266 = f32[4096]{0} sqrt(%divide.1917)
  %add.6451 = f32[4096]{0} add(%sqrt.266, %broadcast.13934)
  %multiply.9662 = f32[4096]{0} multiply(%broadcast.13927, %add.6451)
  %divide.1918 = f32[4096]{0} divide(%add.6449, %multiply.9662)
  %multiply.9663 = f32[4096]{0} multiply(%param.75, %broadcast.13925)
  %add.6452 = f32[4096]{0} add(%divide.1918, %multiply.9663)
  %multiply.9664 = f32[4096]{0} multiply(%broadcast.7107, %add.6452)
  %add.6453 = f32[4096]{0} add(%param.75, %multiply.9664)
  %divide.1919 = f32[4096]{0} divide(%convert.3490, %broadcast.13924)
  %select.3394 = f32[4096]{0} select(%broadcast.13923, %convert.3490, %divide.1919)
  %multiply.9666 = f32[4096]{0} multiply(%select.3394, %broadcast.13925)
  %param.831 = f32[4096]{0} parameter(559), sharding={replicated}
  %multiply.9667 = f32[4096]{0} multiply(%param.831, %broadcast.13926)
  %add.6454 = f32[4096]{0} add(%multiply.9666, %multiply.9667)
  %multiply.9668 = f32[4096]{0} multiply(%select.3394, %select.3394)
  %multiply.9669 = f32[4096]{0} multiply(%multiply.9668, %broadcast.13928)
  %param.832 = f32[4096]{0} parameter(850), sharding={replicated}
  %multiply.9671 = f32[4096]{0} multiply(%param.832, %broadcast.13929)
  %add.6455 = f32[4096]{0} add(%multiply.9669, %multiply.9671)
  %divide.1920 = f32[4096]{0} divide(%add.6455, %broadcast.13931)
  %sqrt.267 = f32[4096]{0} sqrt(%divide.1920)
  %add.6456 = f32[4096]{0} add(%sqrt.267, %broadcast.13934)
  %multiply.9672 = f32[4096]{0} multiply(%broadcast.13927, %add.6456)
  %divide.1921 = f32[4096]{0} divide(%add.6454, %multiply.9672)
  %multiply.9673 = f32[4096]{0} multiply(%param.70, %broadcast.13925)
  %add.6457 = f32[4096]{0} add(%divide.1921, %multiply.9673)
  %multiply.9674 = f32[4096]{0} multiply(%broadcast.7107, %add.6457)
  %add.6458 = f32[4096]{0} add(%param.70, %multiply.9674)
  %divide.1922 = f32[256,8,128]{0,2,1} divide(%transpose.500, %broadcast.13977)
  %select.3395 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.500, %divide.1922)
  %multiply.9675 = f32[256,8,128]{0,2,1} multiply(%select.3395, %broadcast.13978)
  %param.833 = f32[256,8,128]{2,1,0} parameter(560), sharding={devices=[16,1,1]<=[16]}
  %multiply.9677 = f32[256,8,128]{2,1,0} multiply(%param.833, %broadcast.13979)
  %add.6459 = f32[256,8,128]{0,2,1} add(%multiply.9675, %multiply.9677)
  %multiply.9678 = f32[256,8,128]{0,2,1} multiply(%select.3395, %select.3395)
  %multiply.9679 = f32[256,8,128]{0,2,1} multiply(%multiply.9678, %broadcast.13981)
  %param.834 = f32[256,8,128]{2,1,0} parameter(851), sharding={devices=[16,1,1]<=[16]}
  %multiply.9680 = f32[256,8,128]{2,1,0} multiply(%param.834, %broadcast.13982)
  %add.6460 = f32[256,8,128]{0,2,1} add(%multiply.9679, %multiply.9680)
  %divide.1923 = f32[256,8,128]{0,2,1} divide(%add.6460, %broadcast.13983)
  %sqrt.268 = f32[256,8,128]{0,2,1} sqrt(%divide.1923)
  %add.6461 = f32[256,8,128]{0,2,1} add(%sqrt.268, %broadcast.13984)
  %multiply.9681 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6461)
  %divide.1924 = f32[256,8,128]{0,2,1} divide(%add.6459, %multiply.9681)
  %multiply.9682 = f32[256,8,128]{2,1,0} multiply(%param.72, %broadcast.13978)
  %add.6462 = f32[256,8,128]{0,2,1} add(%divide.1924, %multiply.9682)
  %multiply.9683 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6462)
  %add.6463 = f32[256,8,128]{2,1,0} add(%param.72, %multiply.9683)
  %divide.1925 = f32[32,128,256]{1,0,2} divide(%transpose.501, %broadcast.13987)
  %select.3396 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.501, %divide.1925)
  %multiply.9684 = f32[32,128,256]{1,0,2} multiply(%select.3396, %broadcast.13989)
  %param.835 = f32[32,128,256]{2,1,0} parameter(561), sharding={devices=[1,1,16]<=[16]}
  %multiply.9685 = f32[32,128,256]{2,1,0} multiply(%param.835, %broadcast.13991)
  %add.6464 = f32[32,128,256]{1,0,2} add(%multiply.9684, %multiply.9685)
  %multiply.9686 = f32[32,128,256]{1,0,2} multiply(%select.3396, %select.3396)
  %multiply.9687 = f32[32,128,256]{1,0,2} multiply(%multiply.9686, %broadcast.13993)
  %param.836 = f32[32,128,256]{2,1,0} parameter(852), sharding={devices=[1,1,16]<=[16]}
  %multiply.9688 = f32[32,128,256]{2,1,0} multiply(%param.836, %broadcast.13994)
  %add.6465 = f32[32,128,256]{1,0,2} add(%multiply.9687, %multiply.9688)
  %divide.1926 = f32[32,128,256]{1,0,2} divide(%add.6465, %broadcast.13996)
  %sqrt.269 = f32[32,128,256]{1,0,2} sqrt(%divide.1926)
  %add.6466 = f32[32,128,256]{1,0,2} add(%sqrt.269, %broadcast.13998)
  %multiply.9689 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6466)
  %divide.1927 = f32[32,128,256]{1,0,2} divide(%add.6464, %multiply.9689)
  %multiply.9690 = f32[32,128,256]{2,1,0} multiply(%param.74, %broadcast.13989)
  %add.6467 = f32[32,128,256]{1,0,2} add(%divide.1927, %multiply.9690)
  %multiply.9691 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6467)
  %add.6468 = f32[32,128,256]{2,1,0} add(%param.74, %multiply.9691)
  %divide.1928 = f32[256,32,128]{0,2,1} divide(%transpose.502, %broadcast.14001)
  %select.3397 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.502, %divide.1928)
  %multiply.9692 = f32[256,32,128]{0,2,1} multiply(%select.3397, %broadcast.14002)
  %param.837 = f32[256,32,128]{2,1,0} parameter(562), sharding={devices=[16,1,1]<=[16]}
  %multiply.9693 = f32[256,32,128]{2,1,0} multiply(%param.837, %broadcast.14003)
  %add.6469 = f32[256,32,128]{0,2,1} add(%multiply.9692, %multiply.9693)
  %multiply.9694 = f32[256,32,128]{0,2,1} multiply(%select.3397, %select.3397)
  %multiply.9695 = f32[256,32,128]{0,2,1} multiply(%multiply.9694, %broadcast.14005)
  %param.838 = f32[256,32,128]{2,1,0} parameter(853), sharding={devices=[16,1,1]<=[16]}
  %multiply.9696 = f32[256,32,128]{2,1,0} multiply(%param.838, %broadcast.14006)
  %add.6470 = f32[256,32,128]{0,2,1} add(%multiply.9695, %multiply.9696)
  %divide.1929 = f32[256,32,128]{0,2,1} divide(%add.6470, %broadcast.14007)
  %sqrt.270 = f32[256,32,128]{0,2,1} sqrt(%divide.1929)
  %add.6471 = f32[256,32,128]{0,2,1} add(%sqrt.270, %broadcast.14008)
  %multiply.9697 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6471)
  %divide.1930 = f32[256,32,128]{0,2,1} divide(%add.6469, %multiply.9697)
  %multiply.9698 = f32[256,32,128]{2,1,0} multiply(%param.71, %broadcast.14002)
  %add.6472 = f32[256,32,128]{0,2,1} add(%divide.1930, %multiply.9698)
  %multiply.9699 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6472)
  %add.6473 = f32[256,32,128]{2,1,0} add(%param.71, %multiply.9699)
  %divide.1931 = f32[256,8,128]{0,2,1} divide(%transpose.503, %broadcast.13977)
  %select.3398 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.503, %divide.1931)
  %multiply.9700 = f32[256,8,128]{0,2,1} multiply(%select.3398, %broadcast.13978)
  %param.839 = f32[256,8,128]{2,1,0} parameter(563), sharding={devices=[16,1,1]<=[16]}
  %multiply.9701 = f32[256,8,128]{2,1,0} multiply(%param.839, %broadcast.13979)
  %add.6474 = f32[256,8,128]{0,2,1} add(%multiply.9700, %multiply.9701)
  %multiply.9702 = f32[256,8,128]{0,2,1} multiply(%select.3398, %select.3398)
  %multiply.9703 = f32[256,8,128]{0,2,1} multiply(%multiply.9702, %broadcast.13981)
  %param.840 = f32[256,8,128]{2,1,0} parameter(854), sharding={devices=[16,1,1]<=[16]}
  %multiply.9704 = f32[256,8,128]{2,1,0} multiply(%param.840, %broadcast.13982)
  %add.6475 = f32[256,8,128]{0,2,1} add(%multiply.9703, %multiply.9704)
  %divide.1932 = f32[256,8,128]{0,2,1} divide(%add.6475, %broadcast.13983)
  %sqrt.271 = f32[256,8,128]{0,2,1} sqrt(%divide.1932)
  %add.6476 = f32[256,8,128]{0,2,1} add(%sqrt.271, %broadcast.13984)
  %multiply.9705 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6476)
  %divide.1933 = f32[256,8,128]{0,2,1} divide(%add.6474, %multiply.9705)
  %multiply.9706 = f32[256,8,128]{2,1,0} multiply(%param.73, %broadcast.13978)
  %add.6477 = f32[256,8,128]{0,2,1} add(%divide.1933, %multiply.9706)
  %multiply.9707 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6477)
  %add.6478 = f32[256,8,128]{2,1,0} add(%param.73, %multiply.9707)
  %divide.1934 = f32[256,14336]{0,1} divide(%convert.3496, %broadcast.13938)
  %select.3399 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3496, %divide.1934)
  %multiply.9708 = f32[256,14336]{0,1} multiply(%select.3399, %broadcast.13940)
  %param.841 = f32[256,14336]{1,0} parameter(564), sharding={devices=[16,1]<=[16]}
  %multiply.9709 = f32[256,14336]{1,0} multiply(%param.841, %broadcast.13942)
  %add.6479 = f32[256,14336]{0,1} add(%multiply.9708, %multiply.9709)
  %multiply.9710 = f32[256,14336]{0,1} multiply(%select.3399, %select.3399)
  %multiply.9711 = f32[256,14336]{0,1} multiply(%multiply.9710, %broadcast.13945)
  %param.842 = f32[256,14336]{1,0} parameter(855), sharding={devices=[16,1]<=[16]}
  %multiply.9712 = f32[256,14336]{1,0} multiply(%param.842, %broadcast.13947)
  %add.6480 = f32[256,14336]{0,1} add(%multiply.9711, %multiply.9712)
  %divide.1935 = f32[256,14336]{0,1} divide(%add.6480, %broadcast.13948)
  %sqrt.272 = f32[256,14336]{0,1} sqrt(%divide.1935)
  %add.6481 = f32[256,14336]{0,1} add(%sqrt.272, %broadcast.13949)
  %multiply.9713 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6481)
  %divide.1936 = f32[256,14336]{0,1} divide(%add.6479, %multiply.9713)
  %multiply.9714 = f32[256,14336]{1,0} multiply(%param.85, %broadcast.13940)
  %add.6482 = f32[256,14336]{0,1} add(%divide.1936, %multiply.9714)
  %multiply.9715 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6482)
  %add.6484 = f32[256,14336]{1,0} add(%param.85, %multiply.9715)
  %divide.1937 = f32[256,14336]{0,1} divide(%convert.3497, %broadcast.13938)
  %select.3400 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3497, %divide.1937)
  %multiply.9716 = f32[256,14336]{0,1} multiply(%select.3400, %broadcast.13940)
  %param.843 = f32[256,14336]{1,0} parameter(565), sharding={devices=[16,1]<=[16]}
  %multiply.9717 = f32[256,14336]{1,0} multiply(%param.843, %broadcast.13942)
  %add.6485 = f32[256,14336]{0,1} add(%multiply.9716, %multiply.9717)
  %multiply.9718 = f32[256,14336]{0,1} multiply(%select.3400, %select.3400)
  %multiply.9719 = f32[256,14336]{0,1} multiply(%multiply.9718, %broadcast.13945)
  %param.844 = f32[256,14336]{1,0} parameter(856), sharding={devices=[16,1]<=[16]}
  %multiply.9720 = f32[256,14336]{1,0} multiply(%param.844, %broadcast.13947)
  %add.6486 = f32[256,14336]{0,1} add(%multiply.9719, %multiply.9720)
  %divide.1938 = f32[256,14336]{0,1} divide(%add.6486, %broadcast.13948)
  %sqrt.273 = f32[256,14336]{0,1} sqrt(%divide.1938)
  %add.6487 = f32[256,14336]{0,1} add(%sqrt.273, %broadcast.13949)
  %multiply.9721 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6487)
  %divide.1939 = f32[256,14336]{0,1} divide(%add.6485, %multiply.9721)
  %multiply.9722 = f32[256,14336]{1,0} multiply(%param.86, %broadcast.13940)
  %add.6488 = f32[256,14336]{0,1} add(%divide.1939, %multiply.9722)
  %multiply.9723 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6488)
  %add.6489 = f32[256,14336]{1,0} add(%param.86, %multiply.9723)
  %divide.1940 = f32[14336,256]{0,1} divide(%convert.3498, %broadcast.13957)
  %select.3401 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3498, %divide.1940)
  %multiply.9724 = f32[14336,256]{0,1} multiply(%select.3401, %broadcast.13958)
  %param.845 = f32[14336,256]{1,0} parameter(566), sharding={devices=[1,16]<=[16]}
  %multiply.9725 = f32[14336,256]{1,0} multiply(%param.845, %broadcast.13959)
  %add.6490 = f32[14336,256]{0,1} add(%multiply.9724, %multiply.9725)
  %multiply.9726 = f32[14336,256]{0,1} multiply(%select.3401, %select.3401)
  %multiply.9727 = f32[14336,256]{0,1} multiply(%multiply.9726, %broadcast.13961)
  %param.846 = f32[14336,256]{1,0} parameter(857), sharding={devices=[1,16]<=[16]}
  %multiply.9728 = f32[14336,256]{1,0} multiply(%param.846, %broadcast.13962)
  %add.6491 = f32[14336,256]{0,1} add(%multiply.9727, %multiply.9728)
  %divide.1942 = f32[14336,256]{0,1} divide(%add.6491, %broadcast.13963)
  %sqrt.274 = f32[14336,256]{0,1} sqrt(%divide.1942)
  %add.6492 = f32[14336,256]{0,1} add(%sqrt.274, %broadcast.13964)
  %multiply.9729 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6492)
  %divide.1943 = f32[14336,256]{0,1} divide(%add.6490, %multiply.9729)
  %multiply.9730 = f32[14336,256]{1,0} multiply(%param.87, %broadcast.13958)
  %add.6493 = f32[14336,256]{0,1} add(%divide.1943, %multiply.9730)
  %multiply.9731 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6493)
  %add.6494 = f32[14336,256]{1,0} add(%param.87, %multiply.9731)
  %divide.1944 = f32[4096]{0} divide(%convert.3499, %broadcast.13924)
  %select.3402 = f32[4096]{0} select(%broadcast.13923, %convert.3499, %divide.1944)
  %multiply.9732 = f32[4096]{0} multiply(%select.3402, %broadcast.13925)
  %param.847 = f32[4096]{0} parameter(567), sharding={replicated}
  %multiply.9733 = f32[4096]{0} multiply(%param.847, %broadcast.13926)
  %add.6495 = f32[4096]{0} add(%multiply.9732, %multiply.9733)
  %multiply.9734 = f32[4096]{0} multiply(%select.3402, %select.3402)
  %multiply.9735 = f32[4096]{0} multiply(%multiply.9734, %broadcast.13928)
  %param.848 = f32[4096]{0} parameter(858), sharding={replicated}
  %multiply.9737 = f32[4096]{0} multiply(%param.848, %broadcast.13929)
  %add.6496 = f32[4096]{0} add(%multiply.9735, %multiply.9737)
  %divide.1945 = f32[4096]{0} divide(%add.6496, %broadcast.13931)
  %sqrt.275 = f32[4096]{0} sqrt(%divide.1945)
  %add.6497 = f32[4096]{0} add(%sqrt.275, %broadcast.13934)
  %multiply.9738 = f32[4096]{0} multiply(%broadcast.13927, %add.6497)
  %divide.1946 = f32[4096]{0} divide(%add.6495, %multiply.9738)
  %multiply.9739 = f32[4096]{0} multiply(%param.84, %broadcast.13925)
  %add.6498 = f32[4096]{0} add(%divide.1946, %multiply.9739)
  %multiply.9740 = f32[4096]{0} multiply(%broadcast.7107, %add.6498)
  %add.6499 = f32[4096]{0} add(%param.84, %multiply.9740)
  %divide.1947 = f32[4096]{0} divide(%convert.3502, %broadcast.13924)
  %select.3403 = f32[4096]{0} select(%broadcast.13923, %convert.3502, %divide.1947)
  %multiply.9741 = f32[4096]{0} multiply(%select.3403, %broadcast.13925)
  %param.849 = f32[4096]{0} parameter(568), sharding={replicated}
  %multiply.9742 = f32[4096]{0} multiply(%param.849, %broadcast.13926)
  %add.6500 = f32[4096]{0} add(%multiply.9741, %multiply.9742)
  %multiply.9743 = f32[4096]{0} multiply(%select.3403, %select.3403)
  %multiply.9744 = f32[4096]{0} multiply(%multiply.9743, %broadcast.13928)
  %param.850 = f32[4096]{0} parameter(859), sharding={replicated}
  %multiply.9745 = f32[4096]{0} multiply(%param.850, %broadcast.13929)
  %add.6501 = f32[4096]{0} add(%multiply.9744, %multiply.9745)
  %divide.1948 = f32[4096]{0} divide(%add.6501, %broadcast.13931)
  %sqrt.276 = f32[4096]{0} sqrt(%divide.1948)
  %add.6502 = f32[4096]{0} add(%sqrt.276, %broadcast.13934)
  %multiply.9746 = f32[4096]{0} multiply(%broadcast.13927, %add.6502)
  %divide.1949 = f32[4096]{0} divide(%add.6500, %multiply.9746)
  %multiply.9747 = f32[4096]{0} multiply(%param.79, %broadcast.13925)
  %add.6503 = f32[4096]{0} add(%divide.1949, %multiply.9747)
  %multiply.9748 = f32[4096]{0} multiply(%broadcast.7107, %add.6503)
  %add.6504 = f32[4096]{0} add(%param.79, %multiply.9748)
  %divide.1950 = f32[256,8,128]{0,2,1} divide(%transpose.504, %broadcast.13977)
  %select.3404 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.504, %divide.1950)
  %multiply.9750 = f32[256,8,128]{0,2,1} multiply(%select.3404, %broadcast.13978)
  %param.851 = f32[256,8,128]{2,1,0} parameter(569), sharding={devices=[16,1,1]<=[16]}
  %multiply.9751 = f32[256,8,128]{2,1,0} multiply(%param.851, %broadcast.13979)
  %add.6505 = f32[256,8,128]{0,2,1} add(%multiply.9750, %multiply.9751)
  %multiply.9752 = f32[256,8,128]{0,2,1} multiply(%select.3404, %select.3404)
  %multiply.9753 = f32[256,8,128]{0,2,1} multiply(%multiply.9752, %broadcast.13981)
  %param.852 = f32[256,8,128]{2,1,0} parameter(860), sharding={devices=[16,1,1]<=[16]}
  %multiply.9754 = f32[256,8,128]{2,1,0} multiply(%param.852, %broadcast.13982)
  %add.6506 = f32[256,8,128]{0,2,1} add(%multiply.9753, %multiply.9754)
  %divide.1951 = f32[256,8,128]{0,2,1} divide(%add.6506, %broadcast.13983)
  %sqrt.277 = f32[256,8,128]{0,2,1} sqrt(%divide.1951)
  %add.6507 = f32[256,8,128]{0,2,1} add(%sqrt.277, %broadcast.13984)
  %multiply.9755 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6507)
  %divide.1952 = f32[256,8,128]{0,2,1} divide(%add.6505, %multiply.9755)
  %multiply.9757 = f32[256,8,128]{2,1,0} multiply(%param.81, %broadcast.13978)
  %add.6508 = f32[256,8,128]{0,2,1} add(%divide.1952, %multiply.9757)
  %multiply.9758 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6508)
  %add.6509 = f32[256,8,128]{2,1,0} add(%param.81, %multiply.9758)
  %divide.1953 = f32[32,128,256]{1,0,2} divide(%transpose.505, %broadcast.13987)
  %select.3405 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.505, %divide.1953)
  %multiply.9759 = f32[32,128,256]{1,0,2} multiply(%select.3405, %broadcast.13989)
  %param.853 = f32[32,128,256]{2,1,0} parameter(570), sharding={devices=[1,1,16]<=[16]}
  %multiply.9760 = f32[32,128,256]{2,1,0} multiply(%param.853, %broadcast.13991)
  %add.6510 = f32[32,128,256]{1,0,2} add(%multiply.9759, %multiply.9760)
  %multiply.9761 = f32[32,128,256]{1,0,2} multiply(%select.3405, %select.3405)
  %multiply.9762 = f32[32,128,256]{1,0,2} multiply(%multiply.9761, %broadcast.13993)
  %param.854 = f32[32,128,256]{2,1,0} parameter(861), sharding={devices=[1,1,16]<=[16]}
  %multiply.9763 = f32[32,128,256]{2,1,0} multiply(%param.854, %broadcast.13994)
  %add.6511 = f32[32,128,256]{1,0,2} add(%multiply.9762, %multiply.9763)
  %divide.1954 = f32[32,128,256]{1,0,2} divide(%add.6511, %broadcast.13996)
  %sqrt.278 = f32[32,128,256]{1,0,2} sqrt(%divide.1954)
  %add.6512 = f32[32,128,256]{1,0,2} add(%sqrt.278, %broadcast.13998)
  %multiply.9764 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6512)
  %divide.1955 = f32[32,128,256]{1,0,2} divide(%add.6510, %multiply.9764)
  %multiply.9766 = f32[32,128,256]{2,1,0} multiply(%param.83, %broadcast.13989)
  %add.6513 = f32[32,128,256]{1,0,2} add(%divide.1955, %multiply.9766)
  %multiply.9767 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6513)
  %add.6514 = f32[32,128,256]{2,1,0} add(%param.83, %multiply.9767)
  %divide.1956 = f32[256,32,128]{0,2,1} divide(%transpose.506, %broadcast.14001)
  %select.3407 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.506, %divide.1956)
  %multiply.9768 = f32[256,32,128]{0,2,1} multiply(%select.3407, %broadcast.14002)
  %param.855 = f32[256,32,128]{2,1,0} parameter(571), sharding={devices=[16,1,1]<=[16]}
  %multiply.9769 = f32[256,32,128]{2,1,0} multiply(%param.855, %broadcast.14003)
  %add.6515 = f32[256,32,128]{0,2,1} add(%multiply.9768, %multiply.9769)
  %multiply.9770 = f32[256,32,128]{0,2,1} multiply(%select.3407, %select.3407)
  %multiply.9771 = f32[256,32,128]{0,2,1} multiply(%multiply.9770, %broadcast.14005)
  %param.856 = f32[256,32,128]{2,1,0} parameter(862), sharding={devices=[16,1,1]<=[16]}
  %multiply.9772 = f32[256,32,128]{2,1,0} multiply(%param.856, %broadcast.14006)
  %add.6516 = f32[256,32,128]{0,2,1} add(%multiply.9771, %multiply.9772)
  %divide.1957 = f32[256,32,128]{0,2,1} divide(%add.6516, %broadcast.14007)
  %sqrt.279 = f32[256,32,128]{0,2,1} sqrt(%divide.1957)
  %add.6517 = f32[256,32,128]{0,2,1} add(%sqrt.279, %broadcast.14008)
  %multiply.9773 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6517)
  %divide.1958 = f32[256,32,128]{0,2,1} divide(%add.6515, %multiply.9773)
  %multiply.9775 = f32[256,32,128]{2,1,0} multiply(%param.80, %broadcast.14002)
  %add.6518 = f32[256,32,128]{0,2,1} add(%divide.1958, %multiply.9775)
  %multiply.9776 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6518)
  %add.6519 = f32[256,32,128]{2,1,0} add(%param.80, %multiply.9776)
  %divide.1959 = f32[256,8,128]{0,2,1} divide(%transpose.507, %broadcast.13977)
  %select.3409 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.507, %divide.1959)
  %multiply.9777 = f32[256,8,128]{0,2,1} multiply(%select.3409, %broadcast.13978)
  %param.857 = f32[256,8,128]{2,1,0} parameter(572), sharding={devices=[16,1,1]<=[16]}
  %multiply.9778 = f32[256,8,128]{2,1,0} multiply(%param.857, %broadcast.13979)
  %add.6520 = f32[256,8,128]{0,2,1} add(%multiply.9777, %multiply.9778)
  %multiply.9779 = f32[256,8,128]{0,2,1} multiply(%select.3409, %select.3409)
  %multiply.9780 = f32[256,8,128]{0,2,1} multiply(%multiply.9779, %broadcast.13981)
  %param.858 = f32[256,8,128]{2,1,0} parameter(863), sharding={devices=[16,1,1]<=[16]}
  %multiply.9781 = f32[256,8,128]{2,1,0} multiply(%param.858, %broadcast.13982)
  %add.6522 = f32[256,8,128]{0,2,1} add(%multiply.9780, %multiply.9781)
  %divide.1960 = f32[256,8,128]{0,2,1} divide(%add.6522, %broadcast.13983)
  %sqrt.280 = f32[256,8,128]{0,2,1} sqrt(%divide.1960)
  %add.6523 = f32[256,8,128]{0,2,1} add(%sqrt.280, %broadcast.13984)
  %multiply.9782 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6523)
  %divide.1961 = f32[256,8,128]{0,2,1} divide(%add.6520, %multiply.9782)
  %multiply.9783 = f32[256,8,128]{2,1,0} multiply(%param.82, %broadcast.13978)
  %add.6524 = f32[256,8,128]{0,2,1} add(%divide.1961, %multiply.9783)
  %multiply.9784 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6524)
  %add.6525 = f32[256,8,128]{2,1,0} add(%param.82, %multiply.9784)
  %divide.1962 = f32[256,14336]{0,1} divide(%convert.3509, %broadcast.13938)
  %select.3410 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3509, %divide.1962)
  %multiply.9785 = f32[256,14336]{0,1} multiply(%select.3410, %broadcast.13940)
  %param.859 = f32[256,14336]{1,0} parameter(573), sharding={devices=[16,1]<=[16]}
  %multiply.9786 = f32[256,14336]{1,0} multiply(%param.859, %broadcast.13942)
  %add.6526 = f32[256,14336]{0,1} add(%multiply.9785, %multiply.9786)
  %multiply.9788 = f32[256,14336]{0,1} multiply(%select.3410, %select.3410)
  %multiply.9789 = f32[256,14336]{0,1} multiply(%multiply.9788, %broadcast.13945)
  %param.860 = f32[256,14336]{1,0} parameter(864), sharding={devices=[16,1]<=[16]}
  %multiply.9790 = f32[256,14336]{1,0} multiply(%param.860, %broadcast.13947)
  %add.6527 = f32[256,14336]{0,1} add(%multiply.9789, %multiply.9790)
  %divide.1963 = f32[256,14336]{0,1} divide(%add.6527, %broadcast.13948)
  %sqrt.281 = f32[256,14336]{0,1} sqrt(%divide.1963)
  %add.6528 = f32[256,14336]{0,1} add(%sqrt.281, %broadcast.13949)
  %multiply.9791 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6528)
  %divide.1964 = f32[256,14336]{0,1} divide(%add.6526, %multiply.9791)
  %multiply.9792 = f32[256,14336]{1,0} multiply(%param.94, %broadcast.13940)
  %add.6529 = f32[256,14336]{0,1} add(%divide.1964, %multiply.9792)
  %multiply.9793 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6529)
  %add.6530 = f32[256,14336]{1,0} add(%param.94, %multiply.9793)
  %divide.1965 = f32[256,14336]{0,1} divide(%convert.3510, %broadcast.13938)
  %select.3411 = f32[256,14336]{0,1} select(%broadcast.13937, %convert.3510, %divide.1965)
  %multiply.9795 = f32[256,14336]{0,1} multiply(%select.3411, %broadcast.13940)
  %param.861 = f32[256,14336]{1,0} parameter(574), sharding={devices=[16,1]<=[16]}
  %multiply.9796 = f32[256,14336]{1,0} multiply(%param.861, %broadcast.13942)
  %add.6531 = f32[256,14336]{0,1} add(%multiply.9795, %multiply.9796)
  %multiply.9797 = f32[256,14336]{0,1} multiply(%select.3411, %select.3411)
  %multiply.9798 = f32[256,14336]{0,1} multiply(%multiply.9797, %broadcast.13945)
  %param.862 = f32[256,14336]{1,0} parameter(865), sharding={devices=[16,1]<=[16]}
  %multiply.9799 = f32[256,14336]{1,0} multiply(%param.862, %broadcast.13947)
  %add.6532 = f32[256,14336]{0,1} add(%multiply.9798, %multiply.9799)
  %divide.1966 = f32[256,14336]{0,1} divide(%add.6532, %broadcast.13948)
  %sqrt.282 = f32[256,14336]{0,1} sqrt(%divide.1966)
  %add.6533 = f32[256,14336]{0,1} add(%sqrt.282, %broadcast.13949)
  %multiply.9800 = f32[256,14336]{1,0} multiply(%broadcast.13943, %add.6533)
  %divide.1967 = f32[256,14336]{0,1} divide(%add.6531, %multiply.9800)
  %multiply.9801 = f32[256,14336]{1,0} multiply(%param.95, %broadcast.13940)
  %add.6534 = f32[256,14336]{0,1} add(%divide.1967, %multiply.9801)
  %multiply.9802 = f32[256,14336]{1,0} multiply(%broadcast.13936, %add.6534)
  %add.6535 = f32[256,14336]{1,0} add(%param.95, %multiply.9802)
  %divide.1968 = f32[14336,256]{0,1} divide(%convert.3512, %broadcast.13957)
  %select.3412 = f32[14336,256]{0,1} select(%broadcast.13956, %convert.3512, %divide.1968)
  %multiply.9803 = f32[14336,256]{0,1} multiply(%select.3412, %broadcast.13958)
  %param.863 = f32[14336,256]{1,0} parameter(575), sharding={devices=[1,16]<=[16]}
  %multiply.9804 = f32[14336,256]{1,0} multiply(%param.863, %broadcast.13959)
  %add.6536 = f32[14336,256]{0,1} add(%multiply.9803, %multiply.9804)
  %multiply.9805 = f32[14336,256]{0,1} multiply(%select.3412, %select.3412)
  %multiply.9806 = f32[14336,256]{0,1} multiply(%multiply.9805, %broadcast.13961)
  %param.864 = f32[14336,256]{1,0} parameter(866), sharding={devices=[1,16]<=[16]}
  %multiply.9807 = f32[14336,256]{1,0} multiply(%param.864, %broadcast.13962)
  %add.6537 = f32[14336,256]{0,1} add(%multiply.9806, %multiply.9807)
  %divide.1969 = f32[14336,256]{0,1} divide(%add.6537, %broadcast.13963)
  %sqrt.283 = f32[14336,256]{0,1} sqrt(%divide.1969)
  %add.6538 = f32[14336,256]{0,1} add(%sqrt.283, %broadcast.13964)
  %multiply.9808 = f32[14336,256]{1,0} multiply(%broadcast.13960, %add.6538)
  %divide.1970 = f32[14336,256]{0,1} divide(%add.6536, %multiply.9808)
  %multiply.9809 = f32[14336,256]{1,0} multiply(%param.96, %broadcast.13958)
  %add.6539 = f32[14336,256]{0,1} add(%divide.1970, %multiply.9809)
  %multiply.9810 = f32[14336,256]{1,0} multiply(%broadcast.13955, %add.6539)
  %add.6540 = f32[14336,256]{1,0} add(%param.96, %multiply.9810)
  %divide.1971 = f32[4096]{0} divide(%convert.3513, %broadcast.13924)
  %select.3413 = f32[4096]{0} select(%broadcast.13923, %convert.3513, %divide.1971)
  %multiply.9811 = f32[4096]{0} multiply(%select.3413, %broadcast.13925)
  %param.865 = f32[4096]{0} parameter(576), sharding={replicated}
  %multiply.9812 = f32[4096]{0} multiply(%param.865, %broadcast.13926)
  %add.6541 = f32[4096]{0} add(%multiply.9811, %multiply.9812)
  %multiply.9813 = f32[4096]{0} multiply(%select.3413, %select.3413)
  %multiply.9814 = f32[4096]{0} multiply(%multiply.9813, %broadcast.13928)
  %param.866 = f32[4096]{0} parameter(867), sharding={replicated}
  %multiply.9815 = f32[4096]{0} multiply(%param.866, %broadcast.13929)
  %add.6542 = f32[4096]{0} add(%multiply.9814, %multiply.9815)
  %divide.1972 = f32[4096]{0} divide(%add.6542, %broadcast.13931)
  %sqrt.284 = f32[4096]{0} sqrt(%divide.1972)
  %add.6543 = f32[4096]{0} add(%sqrt.284, %broadcast.13934)
  %multiply.9816 = f32[4096]{0} multiply(%broadcast.13927, %add.6543)
  %divide.1973 = f32[4096]{0} divide(%add.6541, %multiply.9816)
  %multiply.9817 = f32[4096]{0} multiply(%param.93, %broadcast.13925)
  %add.6544 = f32[4096]{0} add(%divide.1973, %multiply.9817)
  %multiply.9818 = f32[4096]{0} multiply(%broadcast.7107, %add.6544)
  %add.6545 = f32[4096]{0} add(%param.93, %multiply.9818)
  %divide.1974 = f32[4096]{0} divide(%convert.3515, %broadcast.13924)
  %select.3414 = f32[4096]{0} select(%broadcast.13923, %convert.3515, %divide.1974)
  %multiply.9819 = f32[4096]{0} multiply(%select.3414, %broadcast.13925)
  %param.867 = f32[4096]{0} parameter(577), sharding={replicated}
  %multiply.9820 = f32[4096]{0} multiply(%param.867, %broadcast.13926)
  %add.6546 = f32[4096]{0} add(%multiply.9819, %multiply.9820)
  %multiply.9821 = f32[4096]{0} multiply(%select.3414, %select.3414)
  %multiply.9822 = f32[4096]{0} multiply(%multiply.9821, %broadcast.13928)
  %param.868 = f32[4096]{0} parameter(868), sharding={replicated}
  %multiply.9823 = f32[4096]{0} multiply(%param.868, %broadcast.13929)
  %add.6547 = f32[4096]{0} add(%multiply.9822, %multiply.9823)
  %divide.1975 = f32[4096]{0} divide(%add.6547, %broadcast.13931)
  %sqrt.285 = f32[4096]{0} sqrt(%divide.1975)
  %add.6548 = f32[4096]{0} add(%sqrt.285, %broadcast.13934)
  %multiply.9825 = f32[4096]{0} multiply(%broadcast.13927, %add.6548)
  %divide.1976 = f32[4096]{0} divide(%add.6546, %multiply.9825)
  %multiply.9826 = f32[4096]{0} multiply(%param.88, %broadcast.13925)
  %add.6549 = f32[4096]{0} add(%divide.1976, %multiply.9826)
  %multiply.9827 = f32[4096]{0} multiply(%broadcast.7107, %add.6549)
  %add.6550 = f32[4096]{0} add(%param.88, %multiply.9827)
  %divide.1977 = f32[256,8,128]{0,2,1} divide(%transpose.508, %broadcast.13977)
  %select.3415 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.508, %divide.1977)
  %multiply.9828 = f32[256,8,128]{0,2,1} multiply(%select.3415, %broadcast.13978)
  %param.869 = f32[256,8,128]{2,1,0} parameter(578), sharding={devices=[16,1,1]<=[16]}
  %multiply.9829 = f32[256,8,128]{2,1,0} multiply(%param.869, %broadcast.13979)
  %add.6551 = f32[256,8,128]{0,2,1} add(%multiply.9828, %multiply.9829)
  %multiply.9830 = f32[256,8,128]{0,2,1} multiply(%select.3415, %select.3415)
  %multiply.9831 = f32[256,8,128]{0,2,1} multiply(%multiply.9830, %broadcast.13981)
  %param.870 = f32[256,8,128]{2,1,0} parameter(869), sharding={devices=[16,1,1]<=[16]}
  %multiply.9832 = f32[256,8,128]{2,1,0} multiply(%param.870, %broadcast.13982)
  %add.6552 = f32[256,8,128]{0,2,1} add(%multiply.9831, %multiply.9832)
  %divide.1978 = f32[256,8,128]{0,2,1} divide(%add.6552, %broadcast.13983)
  %sqrt.286 = f32[256,8,128]{0,2,1} sqrt(%divide.1978)
  %add.6553 = f32[256,8,128]{0,2,1} add(%sqrt.286, %broadcast.13984)
  %multiply.9833 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6553)
  %divide.1979 = f32[256,8,128]{0,2,1} divide(%add.6551, %multiply.9833)
  %multiply.9834 = f32[256,8,128]{2,1,0} multiply(%param.90, %broadcast.13978)
  %add.6554 = f32[256,8,128]{0,2,1} add(%divide.1979, %multiply.9834)
  %multiply.9835 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6554)
  %add.6555 = f32[256,8,128]{2,1,0} add(%param.90, %multiply.9835)
  %divide.1980 = f32[32,128,256]{1,0,2} divide(%transpose.509, %broadcast.13987)
  %select.3416 = f32[32,128,256]{1,0,2} select(%broadcast.13986, %transpose.509, %divide.1980)
  %multiply.9836 = f32[32,128,256]{1,0,2} multiply(%select.3416, %broadcast.13989)
  %param.871 = f32[32,128,256]{2,1,0} parameter(579), sharding={devices=[1,1,16]<=[16]}
  %multiply.9837 = f32[32,128,256]{2,1,0} multiply(%param.871, %broadcast.13991)
  %add.6556 = f32[32,128,256]{1,0,2} add(%multiply.9836, %multiply.9837)
  %multiply.9838 = f32[32,128,256]{1,0,2} multiply(%select.3416, %select.3416)
  %multiply.9839 = f32[32,128,256]{1,0,2} multiply(%multiply.9838, %broadcast.13993)
  %param.872 = f32[32,128,256]{2,1,0} parameter(870), sharding={devices=[1,1,16]<=[16]}
  %multiply.9841 = f32[32,128,256]{2,1,0} multiply(%param.872, %broadcast.13994)
  %add.6557 = f32[32,128,256]{1,0,2} add(%multiply.9839, %multiply.9841)
  %divide.1981 = f32[32,128,256]{1,0,2} divide(%add.6557, %broadcast.13996)
  %sqrt.287 = f32[32,128,256]{1,0,2} sqrt(%divide.1981)
  %add.6558 = f32[32,128,256]{1,0,2} add(%sqrt.287, %broadcast.13998)
  %multiply.9843 = f32[32,128,256]{2,1,0} multiply(%broadcast.13992, %add.6558)
  %divide.1982 = f32[32,128,256]{1,0,2} divide(%add.6556, %multiply.9843)
  %multiply.9844 = f32[32,128,256]{2,1,0} multiply(%param.92, %broadcast.13989)
  %add.6560 = f32[32,128,256]{1,0,2} add(%divide.1982, %multiply.9844)
  %multiply.9845 = f32[32,128,256]{2,1,0} multiply(%broadcast.13985, %add.6560)
  %add.6561 = f32[32,128,256]{2,1,0} add(%param.92, %multiply.9845)
  %divide.1983 = f32[256,32,128]{0,2,1} divide(%transpose.510, %broadcast.14001)
  %select.3417 = f32[256,32,128]{0,2,1} select(%broadcast.14000, %transpose.510, %divide.1983)
  %multiply.9846 = f32[256,32,128]{0,2,1} multiply(%select.3417, %broadcast.14002)
  %param.873 = f32[256,32,128]{2,1,0} parameter(580), sharding={devices=[16,1,1]<=[16]}
  %multiply.9847 = f32[256,32,128]{2,1,0} multiply(%param.873, %broadcast.14003)
  %add.6562 = f32[256,32,128]{0,2,1} add(%multiply.9846, %multiply.9847)
  %multiply.9848 = f32[256,32,128]{0,2,1} multiply(%select.3417, %select.3417)
  %multiply.9849 = f32[256,32,128]{0,2,1} multiply(%multiply.9848, %broadcast.14005)
  %param.874 = f32[256,32,128]{2,1,0} parameter(871), sharding={devices=[16,1,1]<=[16]}
  %multiply.9850 = f32[256,32,128]{2,1,0} multiply(%param.874, %broadcast.14006)
  %add.6563 = f32[256,32,128]{0,2,1} add(%multiply.9849, %multiply.9850)
  %divide.1984 = f32[256,32,128]{0,2,1} divide(%add.6563, %broadcast.14007)
  %sqrt.288 = f32[256,32,128]{0,2,1} sqrt(%divide.1984)
  %add.6564 = f32[256,32,128]{0,2,1} add(%sqrt.288, %broadcast.14008)
  %multiply.9851 = f32[256,32,128]{2,1,0} multiply(%broadcast.14004, %add.6564)
  %divide.1985 = f32[256,32,128]{0,2,1} divide(%add.6562, %multiply.9851)
  %multiply.9852 = f32[256,32,128]{2,1,0} multiply(%param.89, %broadcast.14002)
  %add.6565 = f32[256,32,128]{0,2,1} add(%divide.1985, %multiply.9852)
  %multiply.9853 = f32[256,32,128]{2,1,0} multiply(%broadcast.13999, %add.6565)
  %add.6566 = f32[256,32,128]{2,1,0} add(%param.89, %multiply.9853)
  %divide.1987 = f32[256,8,128]{0,2,1} divide(%transpose.511, %broadcast.13977)
  %select.3418 = f32[256,8,128]{0,2,1} select(%broadcast.13976, %transpose.511, %divide.1987)
  %multiply.9854 = f32[256,8,128]{0,2,1} multiply(%select.3418, %broadcast.13978)
  %param.875 = f32[256,8,128]{2,1,0} parameter(581), sharding={devices=[16,1,1]<=[16]}
  %multiply.9855 = f32[256,8,128]{2,1,0} multiply(%param.875, %broadcast.13979)
  %add.6567 = f32[256,8,128]{0,2,1} add(%multiply.9854, %multiply.9855)
  %multiply.9856 = f32[256,8,128]{0,2,1} multiply(%select.3418, %select.3418)
  %multiply.9857 = f32[256,8,128]{0,2,1} multiply(%multiply.9856, %broadcast.13981)
  %param.876 = f32[256,8,128]{2,1,0} parameter(872), sharding={devices=[16,1,1]<=[16]}
  %multiply.9858 = f32[256,8,128]{2,1,0} multiply(%param.876, %broadcast.13982)
  %add.6568 = f32[256,8,128]{0,2,1} add(%multiply.9857, %multiply.9858)
  %divide.1988 = f32[256,8,128]{0,2,1} divide(%add.6568, %broadcast.13983)
  %sqrt.289 = f32[256,8,128]{0,2,1} sqrt(%divide.1988)
  %add.6569 = f32[256,8,128]{0,2,1} add(%sqrt.289, %broadcast.13984)
  %multiply.9859 = f32[256,8,128]{2,1,0} multiply(%broadcast.13980, %add.6569)
  %divide.1989 = f32[256,8,128]{0,2,1} divide(%add.6567, %multiply.9859)
  %multiply.9860 = f32[256,8,128]{2,1,0} multiply(%param.91, %broadcast.13978)
  %add.6570 = f32[256,8,128]{0,2,1} add(%divide.1989, %multiply.9860)
  %multiply.9861 = f32[256,8,128]{2,1,0} multiply(%broadcast.13975, %add.6570)
  %add.6571 = f32[256,8,128]{2,1,0} add(%param.91, %multiply.9861)
  %broadcast.15630 = f32[256,128256]{1,0} broadcast(%multiply.2451), dimensions={}
  %broadcast.15631 = pred[256,128256]{0,1} broadcast(%compare.4848), dimensions={}
  %broadcast.15632 = f32[256,128256]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1992 = f32[256,128256]{0,1} divide(%convert.3521, %broadcast.15632)
  %select.3419 = f32[256,128256]{0,1} select(%broadcast.15631, %convert.3521, %divide.1992)
  %broadcast.15633 = f32[256,128256]{1,0} broadcast(%constant.21366), dimensions={}
  %multiply.9862 = f32[256,128256]{0,1} multiply(%select.3419, %broadcast.15633)
  %param.877 = f32[256,128256]{1,0} parameter(582), sharding={devices=[16,1]<=[16]}
  %broadcast.15634 = f32[256,128256]{1,0} broadcast(%constant.21367), dimensions={}
  %multiply.9863 = f32[256,128256]{1,0} multiply(%param.877, %broadcast.15634)
  %add.6572 = f32[256,128256]{0,1} add(%multiply.9862, %multiply.9863)
  %broadcast.15635 = f32[256,128256]{1,0} broadcast(%subtract.355), dimensions={}
  %multiply.9864 = f32[256,128256]{0,1} multiply(%select.3419, %select.3419)
  %broadcast.15636 = f32[256,128256]{1,0} broadcast(%constant.21373), dimensions={}
  %multiply.9865 = f32[256,128256]{0,1} multiply(%multiply.9864, %broadcast.15636)
  %param.878 = f32[256,128256]{1,0} parameter(873), sharding={devices=[16,1]<=[16]}
  %broadcast.15637 = f32[256,128256]{1,0} broadcast(%constant.21374), dimensions={}
  %multiply.9866 = f32[256,128256]{1,0} multiply(%param.878, %broadcast.15637)
  %add.6573 = f32[256,128256]{0,1} add(%multiply.9865, %multiply.9866)
  %broadcast.15638 = f32[256,128256]{1,0} broadcast(%subtract.356), dimensions={}
  %divide.1993 = f32[256,128256]{0,1} divide(%add.6573, %broadcast.15638)
  %sqrt.290 = f32[256,128256]{0,1} sqrt(%divide.1993)
  %broadcast.15639 = f32[256,128256]{1,0} broadcast(%constant.10301), dimensions={}
  %add.6574 = f32[256,128256]{0,1} add(%sqrt.290, %broadcast.15639)
  %multiply.9867 = f32[256,128256]{1,0} multiply(%broadcast.15635, %add.6574)
  %divide.1994 = f32[256,128256]{0,1} divide(%add.6572, %multiply.9867)
  %multiply.9868 = f32[256,128256]{1,0} multiply(%param.296, %broadcast.15633)
  %add.6575 = f32[256,128256]{0,1} add(%divide.1994, %multiply.9868)
  %multiply.9870 = f32[256,128256]{1,0} multiply(%broadcast.15630, %add.6575)
  %add.6576 = f32[256,128256]{1,0} add(%param.296, %multiply.9870)
  %broadcast.15640 = f32[128256,256]{1,0} broadcast(%multiply.2451), dimensions={}
  %broadcast.15641 = pred[128256,256]{0,1} broadcast(%compare.4848), dimensions={}
  %broadcast.15642 = f32[128256,256]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1995 = f32[128256,256]{0,1} divide(%convert.3524, %broadcast.15642)
  %select.3420 = f32[128256,256]{0,1} select(%broadcast.15641, %convert.3524, %divide.1995)
  %broadcast.15643 = f32[128256,256]{1,0} broadcast(%constant.21366), dimensions={}
  %multiply.9871 = f32[128256,256]{0,1} multiply(%select.3420, %broadcast.15643)
  %param.879 = f32[128256,256]{1,0} parameter(583), sharding={devices=[1,16]<=[16]}
  %broadcast.15644 = f32[128256,256]{1,0} broadcast(%constant.21367), dimensions={}
  %multiply.9872 = f32[128256,256]{1,0} multiply(%param.879, %broadcast.15644)
  %add.6577 = f32[128256,256]{0,1} add(%multiply.9871, %multiply.9872)
  %broadcast.15645 = f32[128256,256]{1,0} broadcast(%subtract.355), dimensions={}
  %multiply.9873 = f32[128256,256]{0,1} multiply(%select.3420, %select.3420)
  %broadcast.15647 = f32[128256,256]{1,0} broadcast(%constant.21373), dimensions={}
  %multiply.9875 = f32[128256,256]{0,1} multiply(%multiply.9873, %broadcast.15647)
  %param.880 = f32[128256,256]{1,0} parameter(874), sharding={devices=[1,16]<=[16]}
  %broadcast.15649 = f32[128256,256]{1,0} broadcast(%constant.21374), dimensions={}
  %multiply.9876 = f32[128256,256]{1,0} multiply(%param.880, %broadcast.15649)
  %add.6578 = f32[128256,256]{0,1} add(%multiply.9875, %multiply.9876)
  %broadcast.15650 = f32[128256,256]{1,0} broadcast(%subtract.356), dimensions={}
  %divide.1997 = f32[128256,256]{0,1} divide(%add.6578, %broadcast.15650)
  %sqrt.291 = f32[128256,256]{0,1} sqrt(%divide.1997)
  %broadcast.15651 = f32[128256,256]{1,0} broadcast(%constant.10301), dimensions={}
  %add.6579 = f32[128256,256]{0,1} add(%sqrt.291, %broadcast.15651)
  %multiply.9877 = f32[128256,256]{1,0} multiply(%broadcast.15645, %add.6579)
  %divide.1999 = f32[128256,256]{0,1} divide(%add.6577, %multiply.9877)
  %multiply.9878 = f32[128256,256]{1,0} multiply(%param.4, %broadcast.15643)
  %add.6580 = f32[128256,256]{0,1} add(%divide.1999, %multiply.9878)
  %multiply.9879 = f32[128256,256]{1,0} multiply(%broadcast.15640, %add.6580)
  %add.6581 = f32[128256,256]{1,0} add(%param.4, %multiply.9879)
  %compare.4850 = pred[] compare(%param.2, %constant.21370), direction=LT
  %add.6582 = s32[] add(%param.2, %constant.5435)
  %select.3421 = s32[] select(%compare.4850, %add.6582, %constant.21370)
  %reduce.873 = f32[] reduce(%multiply.7385, %constant.5451), dimensions={0}, to_apply=%region_877.34802
  %reduce.874 = f32[] reduce(%multiply.7393, %constant.5451), dimensions={0,1}, to_apply=%region_878.34808
  %all-reduce.518 = f32[] all-reduce(%reduce.874), channel_id=969, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_878.34808.clone
  %add.6583 = f32[] add(%reduce.873, %all-reduce.518)
  %reduce.875 = f32[] reduce(%multiply.7403, %constant.5451), dimensions={0,1}, to_apply=%region_879.34815
  %all-reduce.519 = f32[] all-reduce(%reduce.875), channel_id=970, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_879.34815.clone
  %add.6584 = f32[] add(%add.6583, %all-reduce.519)
  %reduce.876 = f32[] reduce(%multiply.7411, %constant.5451), dimensions={0,1}, to_apply=%region_880.34822
  %all-reduce.520 = f32[] all-reduce(%reduce.876), channel_id=971, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_880.34822.clone
  %add.6585 = f32[] add(%add.6584, %all-reduce.520)
  %reduce.877 = f32[] reduce(%multiply.7419, %constant.5451), dimensions={0}, to_apply=%region_881.34829
  %add.6586 = f32[] add(%add.6585, %reduce.877)
  %reduce.878 = f32[] reduce(%multiply.7428, %constant.5451), dimensions={0}, to_apply=%region_882.34836
  %add.6587 = f32[] add(%add.6586, %reduce.878)
  %reduce.879 = f32[] reduce(%multiply.7438, %constant.5451), dimensions={0,1,2}, to_apply=%region_883.34843
  %all-reduce.521 = f32[] all-reduce(%reduce.879), channel_id=972, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_883.34843.clone
  %add.6588 = f32[] add(%add.6587, %all-reduce.521)
  %reduce.880 = f32[] reduce(%multiply.7446, %constant.5451), dimensions={0,1,2}, to_apply=%region_884.34850
  %all-reduce.522 = f32[] all-reduce(%reduce.880), channel_id=973, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_884.34850.clone
  %add.6589 = f32[] add(%add.6588, %all-reduce.522)
  %reduce.881 = f32[] reduce(%multiply.7454, %constant.5451), dimensions={0,1,2}, to_apply=%region_885.34857
  %all-reduce.523 = f32[] all-reduce(%reduce.881), channel_id=974, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_885.34857.clone
  %add.6590 = f32[] add(%add.6589, %all-reduce.523)
  %reduce.882 = f32[] reduce(%multiply.7462, %constant.5451), dimensions={0,1,2}, to_apply=%region_886.34864
  %all-reduce.524 = f32[] all-reduce(%reduce.882), channel_id=975, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_886.34864.clone
  %add.6591 = f32[] add(%add.6590, %all-reduce.524)
  %reduce.883 = f32[] reduce(%multiply.7470, %constant.5451), dimensions={0,1}, to_apply=%region_887.34871
  %all-reduce.525 = f32[] all-reduce(%reduce.883), channel_id=976, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_887.34871.clone
  %add.6592 = f32[] add(%add.6591, %all-reduce.525)
  %reduce.884 = f32[] reduce(%multiply.7478, %constant.5451), dimensions={0,1}, to_apply=%region_888.34878
  %all-reduce.526 = f32[] all-reduce(%reduce.884), channel_id=977, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_888.34878.clone
  %add.6593 = f32[] add(%add.6592, %all-reduce.526)
  %reduce.885 = f32[] reduce(%multiply.7486, %constant.5451), dimensions={0,1}, to_apply=%region_889.34885
  %all-reduce.527 = f32[] all-reduce(%reduce.885), channel_id=978, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_889.34885.clone
  %add.6594 = f32[] add(%add.6593, %all-reduce.527)
  %reduce.886 = f32[] reduce(%multiply.7494, %constant.5451), dimensions={0}, to_apply=%region_890.34892
  %add.6595 = f32[] add(%add.6594, %reduce.886)
  %reduce.887 = f32[] reduce(%multiply.7503, %constant.5451), dimensions={0}, to_apply=%region_891.34899
  %add.6596 = f32[] add(%add.6595, %reduce.887)
  %reduce.888 = f32[] reduce(%multiply.7512, %constant.5451), dimensions={0,1,2}, to_apply=%region_892.34906
  %all-reduce.528 = f32[] all-reduce(%reduce.888), channel_id=979, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_892.34906.clone
  %add.6598 = f32[] add(%add.6596, %all-reduce.528)
  %reduce.889 = f32[] reduce(%multiply.7521, %constant.5451), dimensions={0,1,2}, to_apply=%region_893.34913
  %all-reduce.529 = f32[] all-reduce(%reduce.889), channel_id=980, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_893.34913.clone
  %add.6599 = f32[] add(%add.6598, %all-reduce.529)
  %reduce.890 = f32[] reduce(%multiply.7530, %constant.5451), dimensions={0,1,2}, to_apply=%region_894.34920
  %all-reduce.530 = f32[] all-reduce(%reduce.890), channel_id=981, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_894.34920.clone
  %add.6600 = f32[] add(%add.6599, %all-reduce.530)
  %reduce.891 = f32[] reduce(%multiply.7539, %constant.5451), dimensions={0,1,2}, to_apply=%region_895.34927
  %all-reduce.531 = f32[] all-reduce(%reduce.891), channel_id=982, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_895.34927.clone
  %add.6601 = f32[] add(%add.6600, %all-reduce.531)
  %reduce.892 = f32[] reduce(%multiply.7548, %constant.5451), dimensions={0,1}, to_apply=%region_896.34934
  %all-reduce.532 = f32[] all-reduce(%reduce.892), channel_id=983, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_896.34934.clone
  %add.6602 = f32[] add(%add.6601, %all-reduce.532)
  %reduce.893 = f32[] reduce(%multiply.7557, %constant.5451), dimensions={0,1}, to_apply=%region_897.34941
  %all-reduce.533 = f32[] all-reduce(%reduce.893), channel_id=984, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_897.34941.clone
  %add.6603 = f32[] add(%add.6602, %all-reduce.533)
  %reduce.894 = f32[] reduce(%multiply.7565, %constant.5451), dimensions={0,1}, to_apply=%region_898.34948
  %all-reduce.534 = f32[] all-reduce(%reduce.894), channel_id=985, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_898.34948.clone
  %add.6604 = f32[] add(%add.6603, %all-reduce.534)
  %reduce.895 = f32[] reduce(%multiply.7573, %constant.5451), dimensions={0}, to_apply=%region_899.34955
  %add.6605 = f32[] add(%add.6604, %reduce.895)
  %reduce.896 = f32[] reduce(%multiply.7581, %constant.5451), dimensions={0}, to_apply=%region_900.34962
  %add.6606 = f32[] add(%add.6605, %reduce.896)
  %reduce.897 = f32[] reduce(%multiply.7590, %constant.5451), dimensions={0,1,2}, to_apply=%region_901.34969
  %all-reduce.535 = f32[] all-reduce(%reduce.897), channel_id=986, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_901.34969.clone
  %add.6607 = f32[] add(%add.6606, %all-reduce.535)
  %reduce.898 = f32[] reduce(%multiply.7598, %constant.5451), dimensions={0,1,2}, to_apply=%region_902.34976
  %all-reduce.536 = f32[] all-reduce(%reduce.898), channel_id=987, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_902.34976.clone
  %add.6608 = f32[] add(%add.6607, %all-reduce.536)
  %reduce.899 = f32[] reduce(%multiply.7608, %constant.5451), dimensions={0,1,2}, to_apply=%region_903.34983
  %all-reduce.537 = f32[] all-reduce(%reduce.899), channel_id=988, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_903.34983.clone
  %add.6609 = f32[] add(%add.6608, %all-reduce.537)
  %reduce.900 = f32[] reduce(%multiply.7616, %constant.5451), dimensions={0,1,2}, to_apply=%region_904.34990
  %all-reduce.538 = f32[] all-reduce(%reduce.900), channel_id=989, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_904.34990.clone
  %add.6610 = f32[] add(%add.6609, %all-reduce.538)
  %reduce.901 = f32[] reduce(%multiply.7624, %constant.5451), dimensions={0,1}, to_apply=%region_905.34997
  %all-reduce.539 = f32[] all-reduce(%reduce.901), channel_id=990, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_905.34997.clone
  %add.6611 = f32[] add(%add.6610, %all-reduce.539)
  %reduce.902 = f32[] reduce(%multiply.7633, %constant.5451), dimensions={0,1}, to_apply=%region_906.35004
  %all-reduce.540 = f32[] all-reduce(%reduce.902), channel_id=991, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_906.35004.clone
  %add.6612 = f32[] add(%add.6611, %all-reduce.540)
  %reduce.903 = f32[] reduce(%multiply.7643, %constant.5451), dimensions={0,1}, to_apply=%region_907.35011
  %all-reduce.541 = f32[] all-reduce(%reduce.903), channel_id=992, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_907.35011.clone
  %add.6613 = f32[] add(%add.6612, %all-reduce.541)
  %reduce.904 = f32[] reduce(%multiply.7651, %constant.5451), dimensions={0}, to_apply=%region_908.35018
  %add.6614 = f32[] add(%add.6613, %reduce.904)
  %reduce.905 = f32[] reduce(%multiply.7659, %constant.5451), dimensions={0}, to_apply=%region_909.35025
  %add.6615 = f32[] add(%add.6614, %reduce.905)
  %reduce.906 = f32[] reduce(%multiply.7668, %constant.5451), dimensions={0,1,2}, to_apply=%region_910.35032
  %all-reduce.542 = f32[] all-reduce(%reduce.906), channel_id=993, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_910.35032.clone
  %add.6616 = f32[] add(%add.6615, %all-reduce.542)
  %reduce.907 = f32[] reduce(%multiply.7677, %constant.5451), dimensions={0,1,2}, to_apply=%region_911.35039
  %all-reduce.543 = f32[] all-reduce(%reduce.907), channel_id=994, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_911.35039.clone
  %add.6617 = f32[] add(%add.6616, %all-reduce.543)
  %reduce.908 = f32[] reduce(%multiply.7686, %constant.5451), dimensions={0,1,2}, to_apply=%region_912.35046
  %all-reduce.544 = f32[] all-reduce(%reduce.908), channel_id=995, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_912.35046.clone
  %add.6618 = f32[] add(%add.6617, %all-reduce.544)
  %reduce.909 = f32[] reduce(%multiply.7694, %constant.5451), dimensions={0,1,2}, to_apply=%region_913.35053
  %all-reduce.545 = f32[] all-reduce(%reduce.909), channel_id=996, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_913.35053.clone
  %add.6619 = f32[] add(%add.6618, %all-reduce.545)
  %reduce.910 = f32[] reduce(%multiply.7702, %constant.5451), dimensions={0,1}, to_apply=%region_914.35060
  %all-reduce.546 = f32[] all-reduce(%reduce.910), channel_id=997, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_914.35060.clone
  %add.6620 = f32[] add(%add.6619, %all-reduce.546)
  %reduce.911 = f32[] reduce(%multiply.7712, %constant.5451), dimensions={0,1}, to_apply=%region_915.35067
  %all-reduce.547 = f32[] all-reduce(%reduce.911), channel_id=998, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_915.35067.clone
  %add.6621 = f32[] add(%add.6620, %all-reduce.547)
  %reduce.912 = f32[] reduce(%multiply.7721, %constant.5451), dimensions={0,1}, to_apply=%region_916.35074
  %all-reduce.548 = f32[] all-reduce(%reduce.912), channel_id=999, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_916.35074.clone
  %add.6622 = f32[] add(%add.6621, %all-reduce.548)
  %reduce.913 = f32[] reduce(%multiply.7729, %constant.5451), dimensions={0}, to_apply=%region_917.35081
  %add.6623 = f32[] add(%add.6622, %reduce.913)
  %reduce.914 = f32[] reduce(%multiply.7737, %constant.5451), dimensions={0}, to_apply=%region_918.35088
  %add.6624 = f32[] add(%add.6623, %reduce.914)
  %reduce.915 = f32[] reduce(%multiply.7745, %constant.5451), dimensions={0,1,2}, to_apply=%region_919.35095
  %all-reduce.549 = f32[] all-reduce(%reduce.915), channel_id=1000, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_919.35095.clone
  %add.6625 = f32[] add(%add.6624, %all-reduce.549)
  %reduce.916 = f32[] reduce(%multiply.7753, %constant.5451), dimensions={0,1,2}, to_apply=%region_920.35102
  %all-reduce.550 = f32[] all-reduce(%reduce.916), channel_id=1001, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_920.35102.clone
  %add.6626 = f32[] add(%add.6625, %all-reduce.550)
  %reduce.917 = f32[] reduce(%multiply.7761, %constant.5451), dimensions={0,1,2}, to_apply=%region_921.35109
  %all-reduce.551 = f32[] all-reduce(%reduce.917), channel_id=1002, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_921.35109.clone
  %add.6627 = f32[] add(%add.6626, %all-reduce.551)
  %reduce.918 = f32[] reduce(%multiply.7769, %constant.5451), dimensions={0,1,2}, to_apply=%region_922.35116
  %all-reduce.552 = f32[] all-reduce(%reduce.918), channel_id=1003, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_922.35116.clone
  %add.6629 = f32[] add(%add.6627, %all-reduce.552)
  %reduce.919 = f32[] reduce(%multiply.7778, %constant.5451), dimensions={0,1}, to_apply=%region_923.35123
  %all-reduce.553 = f32[] all-reduce(%reduce.919), channel_id=1004, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_923.35123.clone
  %add.6630 = f32[] add(%add.6629, %all-reduce.553)
  %reduce.920 = f32[] reduce(%multiply.7786, %constant.5451), dimensions={0,1}, to_apply=%region_924.35130
  %all-reduce.554 = f32[] all-reduce(%reduce.920), channel_id=1005, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_924.35130.clone
  %add.6631 = f32[] add(%add.6630, %all-reduce.554)
  %reduce.921 = f32[] reduce(%multiply.7795, %constant.5451), dimensions={0,1}, to_apply=%region_925.35137
  %all-reduce.555 = f32[] all-reduce(%reduce.921), channel_id=1006, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_925.35137.clone
  %add.6632 = f32[] add(%add.6631, %all-reduce.555)
  %reduce.922 = f32[] reduce(%multiply.7804, %constant.5451), dimensions={0}, to_apply=%region_926.35144
  %add.6633 = f32[] add(%add.6632, %reduce.922)
  %reduce.923 = f32[] reduce(%multiply.7813, %constant.5451), dimensions={0}, to_apply=%region_927.35151
  %add.6634 = f32[] add(%add.6633, %reduce.923)
  %reduce.924 = f32[] reduce(%multiply.7822, %constant.5451), dimensions={0,1,2}, to_apply=%region_928.35158
  %all-reduce.556 = f32[] all-reduce(%reduce.924), channel_id=1007, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_928.35158.clone
  %add.6635 = f32[] add(%add.6634, %all-reduce.556)
  %reduce.925 = f32[] reduce(%multiply.7831, %constant.5451), dimensions={0,1,2}, to_apply=%region_929.35165
  %all-reduce.557 = f32[] all-reduce(%reduce.925), channel_id=1008, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_929.35165.clone
  %add.6637 = f32[] add(%add.6635, %all-reduce.557)
  %reduce.926 = f32[] reduce(%multiply.7840, %constant.5451), dimensions={0,1,2}, to_apply=%region_930.35172
  %all-reduce.558 = f32[] all-reduce(%reduce.926), channel_id=1009, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_930.35172.clone
  %add.6638 = f32[] add(%add.6637, %all-reduce.558)
  %reduce.927 = f32[] reduce(%multiply.7848, %constant.5451), dimensions={0,1,2}, to_apply=%region_931.35179
  %all-reduce.559 = f32[] all-reduce(%reduce.927), channel_id=1010, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_931.35179.clone
  %add.6639 = f32[] add(%add.6638, %all-reduce.559)
  %reduce.928 = f32[] reduce(%multiply.7856, %constant.5451), dimensions={0,1}, to_apply=%region_932.35186
  %all-reduce.560 = f32[] all-reduce(%reduce.928), channel_id=1011, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_932.35186.clone
  %add.6640 = f32[] add(%add.6639, %all-reduce.560)
  %reduce.929 = f32[] reduce(%multiply.7865, %constant.5451), dimensions={0,1}, to_apply=%region_933.35193
  %all-reduce.561 = f32[] all-reduce(%reduce.929), channel_id=1012, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_933.35193.clone
  %add.6641 = f32[] add(%add.6640, %all-reduce.561)
  %reduce.930 = f32[] reduce(%multiply.7873, %constant.5451), dimensions={0,1}, to_apply=%region_934.35200
  %all-reduce.562 = f32[] all-reduce(%reduce.930), channel_id=1013, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_934.35200.clone
  %add.6642 = f32[] add(%add.6641, %all-reduce.562)
  %reduce.931 = f32[] reduce(%multiply.7883, %constant.5451), dimensions={0}, to_apply=%region_935.35207
  %add.6643 = f32[] add(%add.6642, %reduce.931)
  %reduce.932 = f32[] reduce(%multiply.7891, %constant.5451), dimensions={0}, to_apply=%region_936.35214
  %add.6644 = f32[] add(%add.6643, %reduce.932)
  %reduce.933 = f32[] reduce(%multiply.7899, %constant.5451), dimensions={0,1,2}, to_apply=%region_937.35221
  %all-reduce.563 = f32[] all-reduce(%reduce.933), channel_id=1014, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_937.35221.clone
  %add.6645 = f32[] add(%add.6644, %all-reduce.563)
  %reduce.934 = f32[] reduce(%multiply.7907, %constant.5451), dimensions={0,1,2}, to_apply=%region_938.35228
  %all-reduce.564 = f32[] all-reduce(%reduce.934), channel_id=1015, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_938.35228.clone
  %add.6646 = f32[] add(%add.6645, %all-reduce.564)
  %reduce.935 = f32[] reduce(%multiply.7917, %constant.5451), dimensions={0,1,2}, to_apply=%region_939.35235
  %all-reduce.565 = f32[] all-reduce(%reduce.935), channel_id=1016, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_939.35235.clone
  %add.6647 = f32[] add(%add.6646, %all-reduce.565)
  %reduce.936 = f32[] reduce(%multiply.7926, %constant.5451), dimensions={0,1,2}, to_apply=%region_940.35242
  %all-reduce.566 = f32[] all-reduce(%reduce.936), channel_id=1017, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_940.35242.clone
  %add.6648 = f32[] add(%add.6647, %all-reduce.566)
  %reduce.937 = f32[] reduce(%multiply.7934, %constant.5451), dimensions={0,1}, to_apply=%region_941.35249
  %all-reduce.567 = f32[] all-reduce(%reduce.937), channel_id=1018, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_941.35249.clone
  %add.6649 = f32[] add(%add.6648, %all-reduce.567)
  %reduce.938 = f32[] reduce(%multiply.7943, %constant.5451), dimensions={0,1}, to_apply=%region_942.35256
  %all-reduce.568 = f32[] all-reduce(%reduce.938), channel_id=1019, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_942.35256.clone
  %add.6650 = f32[] add(%add.6649, %all-reduce.568)
  %reduce.939 = f32[] reduce(%multiply.7951, %constant.5451), dimensions={0,1}, to_apply=%region_943.35263
  %all-reduce.569 = f32[] all-reduce(%reduce.939), channel_id=1020, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_943.35263.clone
  %add.6651 = f32[] add(%add.6650, %all-reduce.569)
  %reduce.940 = f32[] reduce(%multiply.7961, %constant.5451), dimensions={0}, to_apply=%region_944.35270
  %add.6652 = f32[] add(%add.6651, %reduce.940)
  %reduce.941 = f32[] reduce(%multiply.7969, %constant.5451), dimensions={0}, to_apply=%region_945.35277
  %add.6653 = f32[] add(%add.6652, %reduce.941)
  %reduce.942 = f32[] reduce(%multiply.7977, %constant.5451), dimensions={0,1,2}, to_apply=%region_946.35284
  %all-reduce.570 = f32[] all-reduce(%reduce.942), channel_id=1021, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_946.35284.clone
  %add.6655 = f32[] add(%add.6653, %all-reduce.570)
  %reduce.943 = f32[] reduce(%multiply.7986, %constant.5451), dimensions={0,1,2}, to_apply=%region_947.35291
  %all-reduce.571 = f32[] all-reduce(%reduce.943), channel_id=1022, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_947.35291.clone
  %add.6656 = f32[] add(%add.6655, %all-reduce.571)
  %reduce.944 = f32[] reduce(%multiply.7995, %constant.5451), dimensions={0,1,2}, to_apply=%region_948.35298
  %all-reduce.572 = f32[] all-reduce(%reduce.944), channel_id=1023, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_948.35298.clone
  %add.6657 = f32[] add(%add.6656, %all-reduce.572)
  %reduce.945 = f32[] reduce(%multiply.8004, %constant.5451), dimensions={0,1,2}, to_apply=%region_949.35305
  %all-reduce.573 = f32[] all-reduce(%reduce.945), channel_id=1024, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_949.35305.clone
  %add.6658 = f32[] add(%add.6657, %all-reduce.573)
  %reduce.946 = f32[] reduce(%multiply.8012, %constant.5451), dimensions={0,1}, to_apply=%region_950.35312
  %all-reduce.574 = f32[] all-reduce(%reduce.946), channel_id=1025, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_950.35312.clone
  %add.6660 = f32[] add(%add.6658, %all-reduce.574)
  %reduce.947 = f32[] reduce(%multiply.8020, %constant.5451), dimensions={0,1}, to_apply=%region_951.35319
  %all-reduce.575 = f32[] all-reduce(%reduce.947), channel_id=1026, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_951.35319.clone
  %add.6661 = f32[] add(%add.6660, %all-reduce.575)
  %reduce.948 = f32[] reduce(%multiply.8028, %constant.5451), dimensions={0,1}, to_apply=%region_952.35326
  %all-reduce.576 = f32[] all-reduce(%reduce.948), channel_id=1027, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_952.35326.clone
  %add.6662 = f32[] add(%add.6661, %all-reduce.576)
  %reduce.949 = f32[] reduce(%multiply.8036, %constant.5451), dimensions={0}, to_apply=%region_953.35333
  %add.6663 = f32[] add(%add.6662, %reduce.949)
  %reduce.950 = f32[] reduce(%multiply.8044, %constant.5451), dimensions={0}, to_apply=%region_954.35340
  %add.6665 = f32[] add(%add.6663, %reduce.950)
  %reduce.951 = f32[] reduce(%multiply.8052, %constant.5451), dimensions={0,1,2}, to_apply=%region_955.35347
  %all-reduce.577 = f32[] all-reduce(%reduce.951), channel_id=1028, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_955.35347.clone
  %add.6666 = f32[] add(%add.6665, %all-reduce.577)
  %reduce.952 = f32[] reduce(%multiply.8061, %constant.5451), dimensions={0,1,2}, to_apply=%region_956.35354
  %all-reduce.578 = f32[] all-reduce(%reduce.952), channel_id=1029, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_956.35354.clone
  %add.6667 = f32[] add(%add.6666, %all-reduce.578)
  %reduce.953 = f32[] reduce(%multiply.8070, %constant.5451), dimensions={0,1,2}, to_apply=%region_957.35361
  %all-reduce.579 = f32[] all-reduce(%reduce.953), channel_id=1030, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_957.35361.clone
  %add.6668 = f32[] add(%add.6667, %all-reduce.579)
  %reduce.954 = f32[] reduce(%multiply.8079, %constant.5451), dimensions={0,1,2}, to_apply=%region_958.35368
  %all-reduce.580 = f32[] all-reduce(%reduce.954), channel_id=1031, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_958.35368.clone
  %add.6669 = f32[] add(%add.6668, %all-reduce.580)
  %reduce.955 = f32[] reduce(%multiply.8088, %constant.5451), dimensions={0,1}, to_apply=%region_959.35375
  %all-reduce.581 = f32[] all-reduce(%reduce.955), channel_id=1032, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_959.35375.clone
  %add.6670 = f32[] add(%add.6669, %all-reduce.581)
  %reduce.956 = f32[] reduce(%multiply.8097, %constant.5451), dimensions={0,1}, to_apply=%region_960.35382
  %all-reduce.582 = f32[] all-reduce(%reduce.956), channel_id=1033, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_960.35382.clone
  %add.6671 = f32[] add(%add.6670, %all-reduce.582)
  %reduce.957 = f32[] reduce(%multiply.8105, %constant.5451), dimensions={0,1}, to_apply=%region_961.35389
  %all-reduce.583 = f32[] all-reduce(%reduce.957), channel_id=1034, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_961.35389.clone
  %add.6672 = f32[] add(%add.6671, %all-reduce.583)
  %reduce.958 = f32[] reduce(%multiply.8115, %constant.5451), dimensions={0}, to_apply=%region_962.35396
  %add.6673 = f32[] add(%add.6672, %reduce.958)
  %reduce.959 = f32[] reduce(%multiply.8123, %constant.5451), dimensions={0}, to_apply=%region_963.35403
  %add.6674 = f32[] add(%add.6673, %reduce.959)
  %reduce.960 = f32[] reduce(%multiply.8131, %constant.5451), dimensions={0,1,2}, to_apply=%region_964.35410
  %all-reduce.584 = f32[] all-reduce(%reduce.960), channel_id=1035, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_964.35410.clone
  %add.6675 = f32[] add(%add.6674, %all-reduce.584)
  %reduce.961 = f32[] reduce(%multiply.8139, %constant.5451), dimensions={0,1,2}, to_apply=%region_965.35417
  %all-reduce.585 = f32[] all-reduce(%reduce.961), channel_id=1036, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_965.35417.clone
  %add.6676 = f32[] add(%add.6675, %all-reduce.585)
  %reduce.962 = f32[] reduce(%multiply.8148, %constant.5451), dimensions={0,1,2}, to_apply=%region_966.35424
  %all-reduce.586 = f32[] all-reduce(%reduce.962), channel_id=1037, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_966.35424.clone
  %add.6677 = f32[] add(%add.6676, %all-reduce.586)
  %reduce.963 = f32[] reduce(%multiply.8156, %constant.5451), dimensions={0,1,2}, to_apply=%region_967.35431
  %all-reduce.587 = f32[] all-reduce(%reduce.963), channel_id=1038, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_967.35431.clone
  %add.6678 = f32[] add(%add.6677, %all-reduce.587)
  %reduce.964 = f32[] reduce(%multiply.8166, %constant.5451), dimensions={0,1}, to_apply=%region_968.35438
  %all-reduce.588 = f32[] all-reduce(%reduce.964), channel_id=1039, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_968.35438.clone
  %add.6679 = f32[] add(%add.6678, %all-reduce.588)
  %reduce.965 = f32[] reduce(%multiply.8174, %constant.5451), dimensions={0,1}, to_apply=%region_969.35445
  %all-reduce.589 = f32[] all-reduce(%reduce.965), channel_id=1040, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_969.35445.clone
  %add.6680 = f32[] add(%add.6679, %all-reduce.589)
  %reduce.966 = f32[] reduce(%multiply.8182, %constant.5451), dimensions={0,1}, to_apply=%region_970.35452
  %all-reduce.590 = f32[] all-reduce(%reduce.966), channel_id=1041, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_970.35452.clone
  %add.6681 = f32[] add(%add.6680, %all-reduce.590)
  %reduce.967 = f32[] reduce(%multiply.8191, %constant.5451), dimensions={0}, to_apply=%region_971.35459
  %add.6682 = f32[] add(%add.6681, %reduce.967)
  %reduce.968 = f32[] reduce(%multiply.8201, %constant.5451), dimensions={0}, to_apply=%region_972.35466
  %add.6683 = f32[] add(%add.6682, %reduce.968)
  %reduce.969 = f32[] reduce(%multiply.8209, %constant.5451), dimensions={0,1,2}, to_apply=%region_973.35473
  %all-reduce.591 = f32[] all-reduce(%reduce.969), channel_id=1042, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_973.35473.clone
  %add.6684 = f32[] add(%add.6683, %all-reduce.591)
  %reduce.970 = f32[] reduce(%multiply.8217, %constant.5451), dimensions={0,1,2}, to_apply=%region_974.35480
  %all-reduce.592 = f32[] all-reduce(%reduce.970), channel_id=1043, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_974.35480.clone
  %add.6685 = f32[] add(%add.6684, %all-reduce.592)
  %reduce.971 = f32[] reduce(%multiply.8226, %constant.5451), dimensions={0,1,2}, to_apply=%region_975.35487
  %all-reduce.593 = f32[] all-reduce(%reduce.971), channel_id=1044, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_975.35487.clone
  %add.6686 = f32[] add(%add.6685, %all-reduce.593)
  %reduce.972 = f32[] reduce(%multiply.8234, %constant.5451), dimensions={0,1,2}, to_apply=%region_976.35494
  %all-reduce.594 = f32[] all-reduce(%reduce.972), channel_id=1045, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_976.35494.clone
  %add.6687 = f32[] add(%add.6686, %all-reduce.594)
  %reduce.973 = f32[] reduce(%multiply.8244, %constant.5451), dimensions={0,1}, to_apply=%region_977.35501
  %all-reduce.595 = f32[] all-reduce(%reduce.973), channel_id=1046, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_977.35501.clone
  %add.6688 = f32[] add(%add.6687, %all-reduce.595)
  %reduce.974 = f32[] reduce(%multiply.8252, %constant.5451), dimensions={0,1}, to_apply=%region_978.35508
  %all-reduce.596 = f32[] all-reduce(%reduce.974), channel_id=1047, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_978.35508.clone
  %add.6689 = f32[] add(%add.6688, %all-reduce.596)
  %reduce.975 = f32[] reduce(%multiply.8260, %constant.5451), dimensions={0,1}, to_apply=%region_979.35515
  %all-reduce.597 = f32[] all-reduce(%reduce.975), channel_id=1048, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_979.35515.clone
  %add.6691 = f32[] add(%add.6689, %all-reduce.597)
  %reduce.976 = f32[] reduce(%multiply.8269, %constant.5451), dimensions={0}, to_apply=%region_980.35522
  %add.6692 = f32[] add(%add.6691, %reduce.976)
  %reduce.977 = f32[] reduce(%multiply.8279, %constant.5451), dimensions={0}, to_apply=%region_981.35529
  %add.6693 = f32[] add(%add.6692, %reduce.977)
  %reduce.978 = f32[] reduce(%multiply.8287, %constant.5451), dimensions={0,1,2}, to_apply=%region_982.35536
  %all-reduce.598 = f32[] all-reduce(%reduce.978), channel_id=1049, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_982.35536.clone
  %add.6694 = f32[] add(%add.6693, %all-reduce.598)
  %reduce.979 = f32[] reduce(%multiply.8295, %constant.5451), dimensions={0,1,2}, to_apply=%region_983.35543
  %all-reduce.599 = f32[] all-reduce(%reduce.979), channel_id=1050, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_983.35543.clone
  %add.6695 = f32[] add(%add.6694, %all-reduce.599)
  %reduce.980 = f32[] reduce(%multiply.8303, %constant.5451), dimensions={0,1,2}, to_apply=%region_984.35550
  %all-reduce.600 = f32[] all-reduce(%reduce.980), channel_id=1051, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_984.35550.clone
  %add.6696 = f32[] add(%add.6695, %all-reduce.600)
  %reduce.981 = f32[] reduce(%multiply.8311, %constant.5451), dimensions={0,1,2}, to_apply=%region_985.35557
  %all-reduce.601 = f32[] all-reduce(%reduce.981), channel_id=1052, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_985.35557.clone
  %add.6698 = f32[] add(%add.6696, %all-reduce.601)
  %reduce.982 = f32[] reduce(%multiply.8319, %constant.5451), dimensions={0,1}, to_apply=%region_986.35564
  %all-reduce.602 = f32[] all-reduce(%reduce.982), channel_id=1053, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_986.35564.clone
  %add.6699 = f32[] add(%add.6698, %all-reduce.602)
  %reduce.983 = f32[] reduce(%multiply.8327, %constant.5451), dimensions={0,1}, to_apply=%region_987.35571
  %all-reduce.603 = f32[] all-reduce(%reduce.983), channel_id=1054, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_987.35571.clone
  %add.6700 = f32[] add(%add.6699, %all-reduce.603)
  %reduce.984 = f32[] reduce(%multiply.8335, %constant.5451), dimensions={0,1}, to_apply=%region_988.35578
  %all-reduce.604 = f32[] all-reduce(%reduce.984), channel_id=1055, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_988.35578.clone
  %add.6701 = f32[] add(%add.6700, %all-reduce.604)
  %reduce.985 = f32[] reduce(%multiply.8344, %constant.5451), dimensions={0}, to_apply=%region_989.35585
  %add.6703 = f32[] add(%add.6701, %reduce.985)
  %reduce.986 = f32[] reduce(%multiply.8353, %constant.5451), dimensions={0}, to_apply=%region_990.35592
  %add.6704 = f32[] add(%add.6703, %reduce.986)
  %reduce.987 = f32[] reduce(%multiply.8362, %constant.5451), dimensions={0,1,2}, to_apply=%region_991.35599
  %all-reduce.605 = f32[] all-reduce(%reduce.987), channel_id=1056, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_991.35599.clone
  %add.6705 = f32[] add(%add.6704, %all-reduce.605)
  %reduce.988 = f32[] reduce(%multiply.8371, %constant.5451), dimensions={0,1,2}, to_apply=%region_992.35606
  %all-reduce.606 = f32[] all-reduce(%reduce.988), channel_id=1057, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_992.35606.clone
  %add.6706 = f32[] add(%add.6705, %all-reduce.606)
  %reduce.989 = f32[] reduce(%multiply.8380, %constant.5451), dimensions={0,1,2}, to_apply=%region_993.35613
  %all-reduce.607 = f32[] all-reduce(%reduce.989), channel_id=1058, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_993.35613.clone
  %add.6707 = f32[] add(%add.6706, %all-reduce.607)
  %reduce.990 = f32[] reduce(%multiply.8389, %constant.5451), dimensions={0,1,2}, to_apply=%region_994.35620
  %all-reduce.608 = f32[] all-reduce(%reduce.990), channel_id=1059, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_994.35620.clone
  %add.6708 = f32[] add(%add.6707, %all-reduce.608)
  %reduce.991 = f32[] reduce(%multiply.8398, %constant.5451), dimensions={0,1}, to_apply=%region_995.35627
  %all-reduce.609 = f32[] all-reduce(%reduce.991), channel_id=1060, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_995.35627.clone
  %add.6709 = f32[] add(%add.6708, %all-reduce.609)
  %reduce.992 = f32[] reduce(%multiply.8406, %constant.5451), dimensions={0,1}, to_apply=%region_996.35634
  %all-reduce.610 = f32[] all-reduce(%reduce.992), channel_id=1061, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_996.35634.clone
  %add.6710 = f32[] add(%add.6709, %all-reduce.610)
  %reduce.993 = f32[] reduce(%multiply.8414, %constant.5451), dimensions={0,1}, to_apply=%region_997.35641
  %all-reduce.611 = f32[] all-reduce(%reduce.993), channel_id=1062, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_997.35641.clone
  %add.6711 = f32[] add(%add.6710, %all-reduce.611)
  %reduce.994 = f32[] reduce(%multiply.8422, %constant.5451), dimensions={0}, to_apply=%region_998.35648
  %add.6712 = f32[] add(%add.6711, %reduce.994)
  %reduce.995 = f32[] reduce(%multiply.8431, %constant.5451), dimensions={0}, to_apply=%region_999.35655
  %add.6713 = f32[] add(%add.6712, %reduce.995)
  %reduce.996 = f32[] reduce(%multiply.8439, %constant.5451), dimensions={0,1,2}, to_apply=%region_1000.35662
  %all-reduce.612 = f32[] all-reduce(%reduce.996), channel_id=1063, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1000.35662.clone
  %add.6714 = f32[] add(%add.6713, %all-reduce.612)
  %reduce.997 = f32[] reduce(%multiply.8449, %constant.5451), dimensions={0,1,2}, to_apply=%region_1001.35669
  %all-reduce.613 = f32[] all-reduce(%reduce.997), channel_id=1064, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1001.35669.clone
  %add.6715 = f32[] add(%add.6714, %all-reduce.613)
  %reduce.998 = f32[] reduce(%multiply.8457, %constant.5451), dimensions={0,1,2}, to_apply=%region_1002.35676
  %all-reduce.614 = f32[] all-reduce(%reduce.998), channel_id=1065, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1002.35676.clone
  %add.6716 = f32[] add(%add.6715, %all-reduce.614)
  %reduce.999 = f32[] reduce(%multiply.8465, %constant.5451), dimensions={0,1,2}, to_apply=%region_1003.35683
  %all-reduce.615 = f32[] all-reduce(%reduce.999), channel_id=1066, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1003.35683.clone
  %add.6717 = f32[] add(%add.6716, %all-reduce.615)
  %reduce.1000 = f32[] reduce(%multiply.8475, %constant.5451), dimensions={0,1}, to_apply=%region_1004.35690
  %all-reduce.616 = f32[] all-reduce(%reduce.1000), channel_id=1067, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1004.35690.clone
  %add.6718 = f32[] add(%add.6717, %all-reduce.616)
  %reduce.1001 = f32[] reduce(%multiply.8484, %constant.5451), dimensions={0,1}, to_apply=%region_1005.35697
  %all-reduce.617 = f32[] all-reduce(%reduce.1001), channel_id=1068, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1005.35697.clone
  %add.6719 = f32[] add(%add.6718, %all-reduce.617)
  %reduce.1002 = f32[] reduce(%multiply.8492, %constant.5451), dimensions={0,1}, to_apply=%region_1006.35704
  %all-reduce.618 = f32[] all-reduce(%reduce.1002), channel_id=1069, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1006.35704.clone
  %add.6720 = f32[] add(%add.6719, %all-reduce.618)
  %reduce.1003 = f32[] reduce(%multiply.8501, %constant.5451), dimensions={0}, to_apply=%region_1007.35711
  %add.6721 = f32[] add(%add.6720, %reduce.1003)
  %reduce.1004 = f32[] reduce(%multiply.8509, %constant.5451), dimensions={0}, to_apply=%region_1008.35718
  %add.6722 = f32[] add(%add.6721, %reduce.1004)
  %reduce.1005 = f32[] reduce(%multiply.8519, %constant.5451), dimensions={0,1,2}, to_apply=%region_1009.35725
  %all-reduce.619 = f32[] all-reduce(%reduce.1005), channel_id=1070, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1009.35725.clone
  %add.6723 = f32[] add(%add.6722, %all-reduce.619)
  %reduce.1006 = f32[] reduce(%multiply.8527, %constant.5451), dimensions={0,1,2}, to_apply=%region_1010.35732
  %all-reduce.620 = f32[] all-reduce(%reduce.1006), channel_id=1071, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1010.35732.clone
  %add.6724 = f32[] add(%add.6723, %all-reduce.620)
  %reduce.1007 = f32[] reduce(%multiply.8535, %constant.5451), dimensions={0,1,2}, to_apply=%region_1011.35739
  %all-reduce.621 = f32[] all-reduce(%reduce.1007), channel_id=1072, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1011.35739.clone
  %add.6725 = f32[] add(%add.6724, %all-reduce.621)
  %reduce.1008 = f32[] reduce(%multiply.8543, %constant.5451), dimensions={0,1,2}, to_apply=%region_1012.35746
  %all-reduce.622 = f32[] all-reduce(%reduce.1008), channel_id=1073, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1012.35746.clone
  %add.6726 = f32[] add(%add.6725, %all-reduce.622)
  %reduce.1009 = f32[] reduce(%multiply.8553, %constant.5451), dimensions={0,1}, to_apply=%region_1013.35753
  %all-reduce.623 = f32[] all-reduce(%reduce.1009), channel_id=1074, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1013.35753.clone
  %add.6727 = f32[] add(%add.6726, %all-reduce.623)
  %reduce.1010 = f32[] reduce(%multiply.8562, %constant.5451), dimensions={0,1}, to_apply=%region_1014.35760
  %all-reduce.624 = f32[] all-reduce(%reduce.1010), channel_id=1075, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1014.35760.clone
  %add.6728 = f32[] add(%add.6727, %all-reduce.624)
  %reduce.1011 = f32[] reduce(%multiply.8570, %constant.5451), dimensions={0,1}, to_apply=%region_1015.35767
  %all-reduce.625 = f32[] all-reduce(%reduce.1011), channel_id=1076, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1015.35767.clone
  %add.6729 = f32[] add(%add.6728, %all-reduce.625)
  %reduce.1012 = f32[] reduce(%multiply.8578, %constant.5451), dimensions={0}, to_apply=%region_1016.35774
  %add.6730 = f32[] add(%add.6729, %reduce.1012)
  %reduce.1013 = f32[] reduce(%multiply.8586, %constant.5451), dimensions={0}, to_apply=%region_1017.35781
  %add.6731 = f32[] add(%add.6730, %reduce.1013)
  %reduce.1014 = f32[] reduce(%multiply.8594, %constant.5451), dimensions={0,1,2}, to_apply=%region_1018.35788
  %all-reduce.626 = f32[] all-reduce(%reduce.1014), channel_id=1077, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1018.35788.clone
  %add.6732 = f32[] add(%add.6731, %all-reduce.626)
  %reduce.1015 = f32[] reduce(%multiply.8602, %constant.5451), dimensions={0,1,2}, to_apply=%region_1019.35795
  %all-reduce.627 = f32[] all-reduce(%reduce.1015), channel_id=1078, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1019.35795.clone
  %add.6733 = f32[] add(%add.6732, %all-reduce.627)
  %reduce.1016 = f32[] reduce(%multiply.8610, %constant.5451), dimensions={0,1,2}, to_apply=%region_1020.35802
  %all-reduce.628 = f32[] all-reduce(%reduce.1016), channel_id=1079, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1020.35802.clone
  %add.6734 = f32[] add(%add.6733, %all-reduce.628)
  %reduce.1017 = f32[] reduce(%multiply.8619, %constant.5451), dimensions={0,1,2}, to_apply=%region_1021.35809
  %all-reduce.629 = f32[] all-reduce(%reduce.1017), channel_id=1080, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1021.35809.clone
  %add.6735 = f32[] add(%add.6734, %all-reduce.629)
  %reduce.1018 = f32[] reduce(%multiply.8627, %constant.5451), dimensions={0,1}, to_apply=%region_1022.35816
  %all-reduce.630 = f32[] all-reduce(%reduce.1018), channel_id=1081, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1022.35816.clone
  %add.6736 = f32[] add(%add.6735, %all-reduce.630)
  %reduce.1019 = f32[] reduce(%multiply.8637, %constant.5451), dimensions={0,1}, to_apply=%region_1023.35823
  %all-reduce.631 = f32[] all-reduce(%reduce.1019), channel_id=1082, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1023.35823.clone
  %add.6737 = f32[] add(%add.6736, %all-reduce.631)
  %reduce.1020 = f32[] reduce(%multiply.8646, %constant.5451), dimensions={0,1}, to_apply=%region_1024.35830
  %all-reduce.632 = f32[] all-reduce(%reduce.1020), channel_id=1083, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1024.35830.clone
  %add.6738 = f32[] add(%add.6737, %all-reduce.632)
  %reduce.1021 = f32[] reduce(%multiply.8655, %constant.5451), dimensions={0}, to_apply=%region_1025.35837
  %add.6739 = f32[] add(%add.6738, %reduce.1021)
  %reduce.1022 = f32[] reduce(%multiply.8663, %constant.5451), dimensions={0}, to_apply=%region_1026.35844
  %add.6740 = f32[] add(%add.6739, %reduce.1022)
  %reduce.1023 = f32[] reduce(%multiply.8672, %constant.5451), dimensions={0,1,2}, to_apply=%region_1027.35851
  %all-reduce.633 = f32[] all-reduce(%reduce.1023), channel_id=1084, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1027.35851.clone
  %add.6741 = f32[] add(%add.6740, %all-reduce.633)
  %reduce.1024 = f32[] reduce(%multiply.8681, %constant.5451), dimensions={0,1,2}, to_apply=%region_1028.35858
  %all-reduce.634 = f32[] all-reduce(%reduce.1024), channel_id=1085, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1028.35858.clone
  %add.6742 = f32[] add(%add.6741, %all-reduce.634)
  %reduce.1025 = f32[] reduce(%multiply.8689, %constant.5451), dimensions={0,1,2}, to_apply=%region_1029.35865
  %all-reduce.635 = f32[] all-reduce(%reduce.1025), channel_id=1086, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1029.35865.clone
  %add.6743 = f32[] add(%add.6742, %all-reduce.635)
  %reduce.1026 = f32[] reduce(%multiply.8697, %constant.5451), dimensions={0,1,2}, to_apply=%region_1030.35872
  %all-reduce.636 = f32[] all-reduce(%reduce.1026), channel_id=1087, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1030.35872.clone
  %add.6744 = f32[] add(%add.6743, %all-reduce.636)
  %reduce.1027 = f32[] reduce(%multiply.8706, %constant.5451), dimensions={0,1}, to_apply=%region_1031.35879
  %all-reduce.637 = f32[] all-reduce(%reduce.1027), channel_id=1088, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1031.35879.clone
  %add.6745 = f32[] add(%add.6744, %all-reduce.637)
  %reduce.1028 = f32[] reduce(%multiply.8714, %constant.5451), dimensions={0,1}, to_apply=%region_1032.35886
  %all-reduce.638 = f32[] all-reduce(%reduce.1028), channel_id=1089, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1032.35886.clone
  %add.6746 = f32[] add(%add.6745, %all-reduce.638)
  %reduce.1029 = f32[] reduce(%multiply.8724, %constant.5451), dimensions={0,1}, to_apply=%region_1033.35893
  %all-reduce.639 = f32[] all-reduce(%reduce.1029), channel_id=1090, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1033.35893.clone
  %add.6747 = f32[] add(%add.6746, %all-reduce.639)
  %reduce.1030 = f32[] reduce(%multiply.8732, %constant.5451), dimensions={0}, to_apply=%region_1034.35900
  %add.6748 = f32[] add(%add.6747, %reduce.1030)
  %reduce.1031 = f32[] reduce(%multiply.8740, %constant.5451), dimensions={0}, to_apply=%region_1035.35907
  %add.6749 = f32[] add(%add.6748, %reduce.1031)
  %reduce.1032 = f32[] reduce(%multiply.8748, %constant.5451), dimensions={0,1,2}, to_apply=%region_1036.35914
  %all-reduce.640 = f32[] all-reduce(%reduce.1032), channel_id=1091, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1036.35914.clone
  %add.6750 = f32[] add(%add.6749, %all-reduce.640)
  %reduce.1033 = f32[] reduce(%multiply.8758, %constant.5451), dimensions={0,1,2}, to_apply=%region_1037.35921
  %all-reduce.641 = f32[] all-reduce(%reduce.1033), channel_id=1092, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1037.35921.clone
  %add.6751 = f32[] add(%add.6750, %all-reduce.641)
  %reduce.1034 = f32[] reduce(%multiply.8767, %constant.5451), dimensions={0,1,2}, to_apply=%region_1038.35928
  %all-reduce.642 = f32[] all-reduce(%reduce.1034), channel_id=1093, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1038.35928.clone
  %add.6752 = f32[] add(%add.6751, %all-reduce.642)
  %reduce.1035 = f32[] reduce(%multiply.8775, %constant.5451), dimensions={0,1,2}, to_apply=%region_1039.35935
  %all-reduce.643 = f32[] all-reduce(%reduce.1035), channel_id=1094, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1039.35935.clone
  %add.6753 = f32[] add(%add.6752, %all-reduce.643)
  %reduce.1036 = f32[] reduce(%multiply.8784, %constant.5451), dimensions={0,1}, to_apply=%region_1040.35942
  %all-reduce.644 = f32[] all-reduce(%reduce.1036), channel_id=1095, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1040.35942.clone
  %add.6754 = f32[] add(%add.6753, %all-reduce.644)
  %reduce.1037 = f32[] reduce(%multiply.8792, %constant.5451), dimensions={0,1}, to_apply=%region_1041.35949
  %all-reduce.645 = f32[] all-reduce(%reduce.1037), channel_id=1096, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1041.35949.clone
  %add.6755 = f32[] add(%add.6754, %all-reduce.645)
  %reduce.1038 = f32[] reduce(%multiply.8802, %constant.5451), dimensions={0,1}, to_apply=%region_1042.35956
  %all-reduce.646 = f32[] all-reduce(%reduce.1038), channel_id=1097, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1042.35956.clone
  %add.6756 = f32[] add(%add.6755, %all-reduce.646)
  %reduce.1039 = f32[] reduce(%multiply.8810, %constant.5451), dimensions={0}, to_apply=%region_1043.35963
  %add.6757 = f32[] add(%add.6756, %reduce.1039)
  %reduce.1040 = f32[] reduce(%multiply.8818, %constant.5451), dimensions={0}, to_apply=%region_1044.35970
  %add.6758 = f32[] add(%add.6757, %reduce.1040)
  %reduce.1041 = f32[] reduce(%multiply.8827, %constant.5451), dimensions={0,1,2}, to_apply=%region_1045.35977
  %all-reduce.647 = f32[] all-reduce(%reduce.1041), channel_id=1098, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1045.35977.clone
  %add.6759 = f32[] add(%add.6758, %all-reduce.647)
  %reduce.1042 = f32[] reduce(%multiply.8837, %constant.5451), dimensions={0,1,2}, to_apply=%region_1046.35984
  %all-reduce.648 = f32[] all-reduce(%reduce.1042), channel_id=1099, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1046.35984.clone
  %add.6760 = f32[] add(%add.6759, %all-reduce.648)
  %reduce.1043 = f32[] reduce(%multiply.8845, %constant.5451), dimensions={0,1,2}, to_apply=%region_1047.35991
  %all-reduce.649 = f32[] all-reduce(%reduce.1043), channel_id=1100, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1047.35991.clone
  %add.6761 = f32[] add(%add.6760, %all-reduce.649)
  %reduce.1044 = f32[] reduce(%multiply.8853, %constant.5451), dimensions={0,1,2}, to_apply=%region_1048.35998
  %all-reduce.650 = f32[] all-reduce(%reduce.1044), channel_id=1101, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1048.35998.clone
  %add.6762 = f32[] add(%add.6761, %all-reduce.650)
  %reduce.1045 = f32[] reduce(%multiply.8861, %constant.5451), dimensions={0,1}, to_apply=%region_1049.36005
  %all-reduce.651 = f32[] all-reduce(%reduce.1045), channel_id=1102, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1049.36005.clone
  %add.6764 = f32[] add(%add.6762, %all-reduce.651)
  %reduce.1046 = f32[] reduce(%multiply.8869, %constant.5451), dimensions={0,1}, to_apply=%region_1050.36012
  %all-reduce.652 = f32[] all-reduce(%reduce.1046), channel_id=1103, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1050.36012.clone
  %add.6765 = f32[] add(%add.6764, %all-reduce.652)
  %reduce.1047 = f32[] reduce(%multiply.8877, %constant.5451), dimensions={0,1}, to_apply=%region_1051.36019
  %all-reduce.653 = f32[] all-reduce(%reduce.1047), channel_id=1104, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1051.36019.clone
  %add.6766 = f32[] add(%add.6765, %all-reduce.653)
  %reduce.1048 = f32[] reduce(%multiply.8885, %constant.5451), dimensions={0}, to_apply=%region_1052.36026
  %add.6767 = f32[] add(%add.6766, %reduce.1048)
  %reduce.1049 = f32[] reduce(%multiply.8893, %constant.5451), dimensions={0}, to_apply=%region_1053.36033
  %add.6768 = f32[] add(%add.6767, %reduce.1049)
  %reduce.1050 = f32[] reduce(%multiply.8902, %constant.5451), dimensions={0,1,2}, to_apply=%region_1054.36040
  %all-reduce.654 = f32[] all-reduce(%reduce.1050), channel_id=1105, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1054.36040.clone
  %add.6769 = f32[] add(%add.6768, %all-reduce.654)
  %reduce.1051 = f32[] reduce(%multiply.8911, %constant.5451), dimensions={0,1,2}, to_apply=%region_1055.36047
  %all-reduce.655 = f32[] all-reduce(%reduce.1051), channel_id=1106, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1055.36047.clone
  %add.6770 = f32[] add(%add.6769, %all-reduce.655)
  %reduce.1052 = f32[] reduce(%multiply.8920, %constant.5451), dimensions={0,1,2}, to_apply=%region_1056.36054
  %all-reduce.656 = f32[] all-reduce(%reduce.1052), channel_id=1107, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1056.36054.clone
  %add.6771 = f32[] add(%add.6770, %all-reduce.656)
  %reduce.1053 = f32[] reduce(%multiply.8929, %constant.5451), dimensions={0,1,2}, to_apply=%region_1057.36061
  %all-reduce.657 = f32[] all-reduce(%reduce.1053), channel_id=1108, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1057.36061.clone
  %add.6772 = f32[] add(%add.6771, %all-reduce.657)
  %reduce.1054 = f32[] reduce(%multiply.8938, %constant.5451), dimensions={0,1}, to_apply=%region_1058.36068
  %all-reduce.658 = f32[] all-reduce(%reduce.1054), channel_id=1109, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1058.36068.clone
  %add.6773 = f32[] add(%add.6772, %all-reduce.658)
  %reduce.1055 = f32[] reduce(%multiply.8946, %constant.5451), dimensions={0,1}, to_apply=%region_1059.36075
  %all-reduce.659 = f32[] all-reduce(%reduce.1055), channel_id=1110, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1059.36075.clone
  %add.6774 = f32[] add(%add.6773, %all-reduce.659)
  %reduce.1056 = f32[] reduce(%multiply.8956, %constant.5451), dimensions={0,1}, to_apply=%region_1060.36082
  %all-reduce.660 = f32[] all-reduce(%reduce.1056), channel_id=1111, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1060.36082.clone
  %add.6775 = f32[] add(%add.6774, %all-reduce.660)
  %reduce.1057 = f32[] reduce(%multiply.8964, %constant.5451), dimensions={0}, to_apply=%region_1061.36089
  %add.6776 = f32[] add(%add.6775, %reduce.1057)
  %reduce.1059 = f32[] reduce(%multiply.8972, %constant.5451), dimensions={0}, to_apply=%region_1062.36096
  %add.6777 = f32[] add(%add.6776, %reduce.1059)
  %reduce.1060 = f32[] reduce(%multiply.8980, %constant.5451), dimensions={0,1,2}, to_apply=%region_1063.36103
  %all-reduce.661 = f32[] all-reduce(%reduce.1060), channel_id=1112, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1063.36103.clone
  %add.6778 = f32[] add(%add.6777, %all-reduce.661)
  %reduce.1061 = f32[] reduce(%multiply.8989, %constant.5451), dimensions={0,1,2}, to_apply=%region_1064.36110
  %all-reduce.662 = f32[] all-reduce(%reduce.1061), channel_id=1113, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1064.36110.clone
  %add.6779 = f32[] add(%add.6778, %all-reduce.662)
  %reduce.1062 = f32[] reduce(%multiply.8997, %constant.5451), dimensions={0,1,2}, to_apply=%region_1065.36117
  %all-reduce.663 = f32[] all-reduce(%reduce.1062), channel_id=1114, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1065.36117.clone
  %add.6780 = f32[] add(%add.6779, %all-reduce.663)
  %reduce.1063 = f32[] reduce(%multiply.9007, %constant.5451), dimensions={0,1,2}, to_apply=%region_1066.36124
  %all-reduce.664 = f32[] all-reduce(%reduce.1063), channel_id=1115, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1066.36124.clone
  %add.6781 = f32[] add(%add.6780, %all-reduce.664)
  %reduce.1064 = f32[] reduce(%multiply.9015, %constant.5451), dimensions={0,1}, to_apply=%region_1067.36131
  %all-reduce.665 = f32[] all-reduce(%reduce.1064), channel_id=1116, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1067.36131.clone
  %add.6782 = f32[] add(%add.6781, %all-reduce.665)
  %reduce.1065 = f32[] reduce(%multiply.9023, %constant.5451), dimensions={0,1}, to_apply=%region_1068.36138
  %all-reduce.666 = f32[] all-reduce(%reduce.1065), channel_id=1117, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1068.36138.clone
  %add.6783 = f32[] add(%add.6782, %all-reduce.666)
  %reduce.1066 = f32[] reduce(%multiply.9032, %constant.5451), dimensions={0,1}, to_apply=%region_1069.36145
  %all-reduce.667 = f32[] all-reduce(%reduce.1066), channel_id=1118, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1069.36145.clone
  %add.6784 = f32[] add(%add.6783, %all-reduce.667)
  %reduce.1067 = f32[] reduce(%multiply.9042, %constant.5451), dimensions={0}, to_apply=%region_1070.36152
  %add.6785 = f32[] add(%add.6784, %reduce.1067)
  %reduce.1068 = f32[] reduce(%multiply.9050, %constant.5451), dimensions={0}, to_apply=%region_1071.36159
  %add.6786 = f32[] add(%add.6785, %reduce.1068)
  %reduce.1069 = f32[] reduce(%multiply.9058, %constant.5451), dimensions={0,1,2}, to_apply=%region_1072.36166
  %all-reduce.668 = f32[] all-reduce(%reduce.1069), channel_id=1119, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1072.36166.clone
  %add.6787 = f32[] add(%add.6786, %all-reduce.668)
  %reduce.1070 = f32[] reduce(%multiply.9067, %constant.5451), dimensions={0,1,2}, to_apply=%region_1073.36173
  %all-reduce.669 = f32[] all-reduce(%reduce.1070), channel_id=1120, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1073.36173.clone
  %add.6788 = f32[] add(%add.6787, %all-reduce.669)
  %reduce.1071 = f32[] reduce(%multiply.9075, %constant.5451), dimensions={0,1,2}, to_apply=%region_1074.36180
  %all-reduce.670 = f32[] all-reduce(%reduce.1071), channel_id=1121, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1074.36180.clone
  %add.6789 = f32[] add(%add.6788, %all-reduce.670)
  %reduce.1072 = f32[] reduce(%multiply.9085, %constant.5451), dimensions={0,1,2}, to_apply=%region_1075.36187
  %all-reduce.671 = f32[] all-reduce(%reduce.1072), channel_id=1122, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1075.36187.clone
  %add.6790 = f32[] add(%add.6789, %all-reduce.671)
  %reduce.1073 = f32[] reduce(%multiply.9093, %constant.5451), dimensions={0,1}, to_apply=%region_1076.36194
  %all-reduce.672 = f32[] all-reduce(%reduce.1073), channel_id=1123, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1076.36194.clone
  %add.6791 = f32[] add(%add.6790, %all-reduce.672)
  %reduce.1074 = f32[] reduce(%multiply.9101, %constant.5451), dimensions={0,1}, to_apply=%region_1077.36201
  %all-reduce.673 = f32[] all-reduce(%reduce.1074), channel_id=1124, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1077.36201.clone
  %add.6792 = f32[] add(%add.6791, %all-reduce.673)
  %reduce.1075 = f32[] reduce(%multiply.9111, %constant.5451), dimensions={0,1}, to_apply=%region_1078.36208
  %all-reduce.674 = f32[] all-reduce(%reduce.1075), channel_id=1125, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1078.36208.clone
  %add.6793 = f32[] add(%add.6792, %all-reduce.674)
  %reduce.1076 = f32[] reduce(%multiply.9120, %constant.5451), dimensions={0}, to_apply=%region_1079.36215
  %add.6794 = f32[] add(%add.6793, %reduce.1076)
  %reduce.1077 = f32[] reduce(%multiply.9128, %constant.5451), dimensions={0}, to_apply=%region_1080.36222
  %add.6795 = f32[] add(%add.6794, %reduce.1077)
  %reduce.1078 = f32[] reduce(%multiply.9136, %constant.5451), dimensions={0,1,2}, to_apply=%region_1081.36229
  %all-reduce.675 = f32[] all-reduce(%reduce.1078), channel_id=1126, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1081.36229.clone
  %add.6796 = f32[] add(%add.6795, %all-reduce.675)
  %reduce.1079 = f32[] reduce(%multiply.9144, %constant.5451), dimensions={0,1,2}, to_apply=%region_1082.36236
  %all-reduce.676 = f32[] all-reduce(%reduce.1079), channel_id=1127, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1082.36236.clone
  %add.6797 = f32[] add(%add.6796, %all-reduce.676)
  %reduce.1080 = f32[] reduce(%multiply.9152, %constant.5451), dimensions={0,1,2}, to_apply=%region_1083.36243
  %all-reduce.677 = f32[] all-reduce(%reduce.1080), channel_id=1128, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1083.36243.clone
  %add.6798 = f32[] add(%add.6797, %all-reduce.677)
  %reduce.1081 = f32[] reduce(%multiply.9160, %constant.5451), dimensions={0,1,2}, to_apply=%region_1084.36250
  %all-reduce.678 = f32[] all-reduce(%reduce.1081), channel_id=1129, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1084.36250.clone
  %add.6799 = f32[] add(%add.6798, %all-reduce.678)
  %reduce.1082 = f32[] reduce(%multiply.9168, %constant.5451), dimensions={0,1}, to_apply=%region_1085.36257
  %all-reduce.679 = f32[] all-reduce(%reduce.1082), channel_id=1130, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1085.36257.clone
  %add.6800 = f32[] add(%add.6799, %all-reduce.679)
  %reduce.1083 = f32[] reduce(%multiply.9177, %constant.5451), dimensions={0,1}, to_apply=%region_1086.36264
  %all-reduce.680 = f32[] all-reduce(%reduce.1083), channel_id=1131, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1086.36264.clone
  %add.6802 = f32[] add(%add.6800, %all-reduce.680)
  %reduce.1084 = f32[] reduce(%multiply.9185, %constant.5451), dimensions={0,1}, to_apply=%region_1087.36271
  %all-reduce.681 = f32[] all-reduce(%reduce.1084), channel_id=1132, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1087.36271.clone
  %add.6803 = f32[] add(%add.6802, %all-reduce.681)
  %reduce.1085 = f32[] reduce(%multiply.9194, %constant.5451), dimensions={0}, to_apply=%region_1088.36278
  %add.6804 = f32[] add(%add.6803, %reduce.1085)
  %reduce.1086 = f32[] reduce(%multiply.9203, %constant.5451), dimensions={0}, to_apply=%region_1089.36285
  %add.6805 = f32[] add(%add.6804, %reduce.1086)
  %reduce.1087 = f32[] reduce(%multiply.9212, %constant.5451), dimensions={0,1,2}, to_apply=%region_1090.36292
  %all-reduce.682 = f32[] all-reduce(%reduce.1087), channel_id=1133, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1090.36292.clone
  %add.6806 = f32[] add(%add.6805, %all-reduce.682)
  %reduce.1088 = f32[] reduce(%multiply.9221, %constant.5451), dimensions={0,1,2}, to_apply=%region_1091.36299
  %all-reduce.683 = f32[] all-reduce(%reduce.1088), channel_id=1134, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1091.36299.clone
  %add.6807 = f32[] add(%add.6806, %all-reduce.683)
  %reduce.1089 = f32[] reduce(%multiply.9230, %constant.5451), dimensions={0,1,2}, to_apply=%region_1092.36306
  %all-reduce.684 = f32[] all-reduce(%reduce.1089), channel_id=1135, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1092.36306.clone
  %add.6808 = f32[] add(%add.6807, %all-reduce.684)
  %reduce.1090 = f32[] reduce(%multiply.9239, %constant.5451), dimensions={0,1,2}, to_apply=%region_1093.36313
  %all-reduce.685 = f32[] all-reduce(%reduce.1090), channel_id=1136, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1093.36313.clone
  %add.6809 = f32[] add(%add.6808, %all-reduce.685)
  %reduce.1091 = f32[] reduce(%multiply.9247, %constant.5451), dimensions={0,1}, to_apply=%region_1094.36320
  %all-reduce.686 = f32[] all-reduce(%reduce.1091), channel_id=1137, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1094.36320.clone
  %add.6810 = f32[] add(%add.6809, %all-reduce.686)
  %reduce.1092 = f32[] reduce(%multiply.9255, %constant.5451), dimensions={0,1}, to_apply=%region_1095.36327
  %all-reduce.687 = f32[] all-reduce(%reduce.1092), channel_id=1138, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1095.36327.clone
  %add.6811 = f32[] add(%add.6810, %all-reduce.687)
  %reduce.1093 = f32[] reduce(%multiply.9263, %constant.5451), dimensions={0,1}, to_apply=%region_1096.36334
  %all-reduce.688 = f32[] all-reduce(%reduce.1093), channel_id=1139, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1096.36334.clone
  %add.6812 = f32[] add(%add.6811, %all-reduce.688)
  %reduce.1094 = f32[] reduce(%multiply.9272, %constant.5451), dimensions={0}, to_apply=%region_1097.36341
  %add.6813 = f32[] add(%add.6812, %reduce.1094)
  %reduce.1095 = f32[] reduce(%multiply.9281, %constant.5451), dimensions={0}, to_apply=%region_1098.36348
  %add.6814 = f32[] add(%add.6813, %reduce.1095)
  %reduce.1096 = f32[] reduce(%multiply.9290, %constant.5451), dimensions={0,1,2}, to_apply=%region_1099.36355
  %all-reduce.689 = f32[] all-reduce(%reduce.1096), channel_id=1140, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1099.36355.clone
  %add.6815 = f32[] add(%add.6814, %all-reduce.689)
  %reduce.1097 = f32[] reduce(%multiply.9298, %constant.5451), dimensions={0,1,2}, to_apply=%region_1100.36362
  %all-reduce.690 = f32[] all-reduce(%reduce.1097), channel_id=1141, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1100.36362.clone
  %add.6816 = f32[] add(%add.6815, %all-reduce.690)
  %reduce.1098 = f32[] reduce(%multiply.9306, %constant.5451), dimensions={0,1,2}, to_apply=%region_1101.36369
  %all-reduce.691 = f32[] all-reduce(%reduce.1098), channel_id=1142, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1101.36369.clone
  %add.6817 = f32[] add(%add.6816, %all-reduce.691)
  %reduce.1099 = f32[] reduce(%multiply.9316, %constant.5451), dimensions={0,1,2}, to_apply=%region_1102.36376
  %all-reduce.692 = f32[] all-reduce(%reduce.1099), channel_id=1143, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1102.36376.clone
  %add.6818 = f32[] add(%add.6817, %all-reduce.692)
  %reduce.1100 = f32[] reduce(%multiply.9325, %constant.5451), dimensions={0,1}, to_apply=%region_1103.36383
  %all-reduce.693 = f32[] all-reduce(%reduce.1100), channel_id=1144, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1103.36383.clone
  %add.6819 = f32[] add(%add.6818, %all-reduce.693)
  %reduce.1101 = f32[] reduce(%multiply.9333, %constant.5451), dimensions={0,1}, to_apply=%region_1104.36390
  %all-reduce.694 = f32[] all-reduce(%reduce.1101), channel_id=1145, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1104.36390.clone
  %add.6820 = f32[] add(%add.6819, %all-reduce.694)
  %reduce.1102 = f32[] reduce(%multiply.9342, %constant.5451), dimensions={0,1}, to_apply=%region_1105.36397
  %all-reduce.695 = f32[] all-reduce(%reduce.1102), channel_id=1146, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1105.36397.clone
  %add.6821 = f32[] add(%add.6820, %all-reduce.695)
  %reduce.1103 = f32[] reduce(%multiply.9350, %constant.5451), dimensions={0}, to_apply=%region_1106.36404
  %add.6822 = f32[] add(%add.6821, %reduce.1103)
  %reduce.1104 = f32[] reduce(%multiply.9360, %constant.5451), dimensions={0}, to_apply=%region_1107.36411
  %add.6823 = f32[] add(%add.6822, %reduce.1104)
  %reduce.1105 = f32[] reduce(%multiply.9368, %constant.5451), dimensions={0,1,2}, to_apply=%region_1108.36418
  %all-reduce.696 = f32[] all-reduce(%reduce.1105), channel_id=1147, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1108.36418.clone
  %add.6824 = f32[] add(%add.6823, %all-reduce.696)
  %reduce.1106 = f32[] reduce(%multiply.9376, %constant.5451), dimensions={0,1,2}, to_apply=%region_1109.36425
  %all-reduce.697 = f32[] all-reduce(%reduce.1106), channel_id=1148, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1109.36425.clone
  %add.6825 = f32[] add(%add.6824, %all-reduce.697)
  %reduce.1107 = f32[] reduce(%multiply.9384, %constant.5451), dimensions={0,1,2}, to_apply=%region_1110.36432
  %all-reduce.698 = f32[] all-reduce(%reduce.1107), channel_id=1149, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1110.36432.clone
  %add.6826 = f32[] add(%add.6825, %all-reduce.698)
  %reduce.1108 = f32[] reduce(%multiply.9394, %constant.5451), dimensions={0,1,2}, to_apply=%region_1111.36439
  %all-reduce.699 = f32[] all-reduce(%reduce.1108), channel_id=1150, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1111.36439.clone
  %add.6827 = f32[] add(%add.6826, %all-reduce.699)
  %reduce.1109 = f32[] reduce(%multiply.9403, %constant.5451), dimensions={0,1}, to_apply=%region_1112.36446
  %all-reduce.700 = f32[] all-reduce(%reduce.1109), channel_id=1151, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1112.36446.clone
  %add.6828 = f32[] add(%add.6827, %all-reduce.700)
  %reduce.1110 = f32[] reduce(%multiply.9411, %constant.5451), dimensions={0,1}, to_apply=%region_1113.36453
  %all-reduce.701 = f32[] all-reduce(%reduce.1110), channel_id=1152, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1113.36453.clone
  %add.6829 = f32[] add(%add.6828, %all-reduce.701)
  %reduce.1111 = f32[] reduce(%multiply.9419, %constant.5451), dimensions={0,1}, to_apply=%region_1114.36460
  %all-reduce.702 = f32[] all-reduce(%reduce.1111), channel_id=1153, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1114.36460.clone
  %add.6830 = f32[] add(%add.6829, %all-reduce.702)
  %reduce.1112 = f32[] reduce(%multiply.9427, %constant.5451), dimensions={0}, to_apply=%region_1115.36467
  %add.6831 = f32[] add(%add.6830, %reduce.1112)
  %reduce.1113 = f32[] reduce(%multiply.9435, %constant.5451), dimensions={0}, to_apply=%region_1116.36474
  %add.6832 = f32[] add(%add.6831, %reduce.1113)
  %reduce.1114 = f32[] reduce(%multiply.9443, %constant.5451), dimensions={0,1,2}, to_apply=%region_1117.36481
  %all-reduce.703 = f32[] all-reduce(%reduce.1114), channel_id=1154, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1117.36481.clone
  %add.6833 = f32[] add(%add.6832, %all-reduce.703)
  %reduce.1115 = f32[] reduce(%multiply.9451, %constant.5451), dimensions={0,1,2}, to_apply=%region_1118.36488
  %all-reduce.704 = f32[] all-reduce(%reduce.1115), channel_id=1155, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1118.36488.clone
  %add.6834 = f32[] add(%add.6833, %all-reduce.704)
  %reduce.1116 = f32[] reduce(%multiply.9460, %constant.5451), dimensions={0,1,2}, to_apply=%region_1119.36495
  %all-reduce.705 = f32[] all-reduce(%reduce.1116), channel_id=1156, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1119.36495.clone
  %add.6835 = f32[] add(%add.6834, %all-reduce.705)
  %reduce.1117 = f32[] reduce(%multiply.9468, %constant.5451), dimensions={0,1,2}, to_apply=%region_1120.36502
  %all-reduce.706 = f32[] all-reduce(%reduce.1117), channel_id=1157, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1120.36502.clone
  %add.6836 = f32[] add(%add.6835, %all-reduce.706)
  %reduce.1118 = f32[] reduce(%multiply.9478, %constant.5451), dimensions={0,1}, to_apply=%region_1121.36509
  %all-reduce.707 = f32[] all-reduce(%reduce.1118), channel_id=1158, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1121.36509.clone
  %add.6837 = f32[] add(%add.6836, %all-reduce.707)
  %reduce.1119 = f32[] reduce(%multiply.9487, %constant.5451), dimensions={0,1}, to_apply=%region_1122.36516
  %all-reduce.708 = f32[] all-reduce(%reduce.1119), channel_id=1159, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1122.36516.clone
  %add.6838 = f32[] add(%add.6837, %all-reduce.708)
  %reduce.1120 = f32[] reduce(%multiply.9496, %constant.5451), dimensions={0,1}, to_apply=%region_1123.36523
  %all-reduce.709 = f32[] all-reduce(%reduce.1120), channel_id=1160, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1123.36523.clone
  %add.6840 = f32[] add(%add.6838, %all-reduce.709)
  %reduce.1121 = f32[] reduce(%multiply.9504, %constant.5451), dimensions={0}, to_apply=%region_1124.36530
  %add.6841 = f32[] add(%add.6840, %reduce.1121)
  %reduce.1122 = f32[] reduce(%multiply.9513, %constant.5451), dimensions={0}, to_apply=%region_1125.36537
  %add.6842 = f32[] add(%add.6841, %reduce.1122)
  %reduce.1123 = f32[] reduce(%multiply.9522, %constant.5451), dimensions={0,1,2}, to_apply=%region_1126.36544
  %all-reduce.710 = f32[] all-reduce(%reduce.1123), channel_id=1161, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1126.36544.clone
  %add.6843 = f32[] add(%add.6842, %all-reduce.710)
  %reduce.1124 = f32[] reduce(%multiply.9530, %constant.5451), dimensions={0,1,2}, to_apply=%region_1127.36551
  %all-reduce.711 = f32[] all-reduce(%reduce.1124), channel_id=1162, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1127.36551.clone
  %add.6844 = f32[] add(%add.6843, %all-reduce.711)
  %reduce.1125 = f32[] reduce(%multiply.9538, %constant.5451), dimensions={0,1,2}, to_apply=%region_1128.36558
  %all-reduce.712 = f32[] all-reduce(%reduce.1125), channel_id=1163, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1128.36558.clone
  %add.6845 = f32[] add(%add.6844, %all-reduce.712)
  %reduce.1126 = f32[] reduce(%multiply.9547, %constant.5451), dimensions={0,1,2}, to_apply=%region_1129.36565
  %all-reduce.713 = f32[] all-reduce(%reduce.1126), channel_id=1164, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1129.36565.clone
  %add.6846 = f32[] add(%add.6845, %all-reduce.713)
  %reduce.1127 = f32[] reduce(%multiply.9555, %constant.5451), dimensions={0,1}, to_apply=%region_1130.36572
  %all-reduce.714 = f32[] all-reduce(%reduce.1127), channel_id=1165, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1130.36572.clone
  %add.6847 = f32[] add(%add.6846, %all-reduce.714)
  %reduce.1128 = f32[] reduce(%multiply.9565, %constant.5451), dimensions={0,1}, to_apply=%region_1131.36579
  %all-reduce.715 = f32[] all-reduce(%reduce.1128), channel_id=1166, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1131.36579.clone
  %add.6848 = f32[] add(%add.6847, %all-reduce.715)
  %reduce.1129 = f32[] reduce(%multiply.9573, %constant.5451), dimensions={0,1}, to_apply=%region_1132.36586
  %all-reduce.716 = f32[] all-reduce(%reduce.1129), channel_id=1167, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1132.36586.clone
  %add.6849 = f32[] add(%add.6848, %all-reduce.716)
  %reduce.1130 = f32[] reduce(%multiply.9581, %constant.5451), dimensions={0}, to_apply=%region_1133.36593
  %add.6850 = f32[] add(%add.6849, %reduce.1130)
  %reduce.1131 = f32[] reduce(%multiply.9590, %constant.5451), dimensions={0}, to_apply=%region_1134.36600
  %add.6851 = f32[] add(%add.6850, %reduce.1131)
  %reduce.1132 = f32[] reduce(%multiply.9599, %constant.5451), dimensions={0,1,2}, to_apply=%region_1135.36607
  %all-reduce.717 = f32[] all-reduce(%reduce.1132), channel_id=1168, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1135.36607.clone
  %add.6852 = f32[] add(%add.6851, %all-reduce.717)
  %reduce.1133 = f32[] reduce(%multiply.9608, %constant.5451), dimensions={0,1,2}, to_apply=%region_1136.36614
  %all-reduce.718 = f32[] all-reduce(%reduce.1133), channel_id=1169, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1136.36614.clone
  %add.6853 = f32[] add(%add.6852, %all-reduce.718)
  %reduce.1134 = f32[] reduce(%multiply.9616, %constant.5451), dimensions={0,1,2}, to_apply=%region_1137.36621
  %all-reduce.719 = f32[] all-reduce(%reduce.1134), channel_id=1170, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1137.36621.clone
  %add.6854 = f32[] add(%add.6853, %all-reduce.719)
  %reduce.1135 = f32[] reduce(%multiply.9625, %constant.5451), dimensions={0,1,2}, to_apply=%region_1138.36628
  %all-reduce.720 = f32[] all-reduce(%reduce.1135), channel_id=1171, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1138.36628.clone
  %add.6855 = f32[] add(%add.6854, %all-reduce.720)
  %reduce.1136 = f32[] reduce(%multiply.9633, %constant.5451), dimensions={0,1}, to_apply=%region_1139.36635
  %all-reduce.721 = f32[] all-reduce(%reduce.1136), channel_id=1172, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1139.36635.clone
  %add.6856 = f32[] add(%add.6855, %all-reduce.721)
  %reduce.1137 = f32[] reduce(%multiply.9643, %constant.5451), dimensions={0,1}, to_apply=%region_1140.36642
  %all-reduce.722 = f32[] all-reduce(%reduce.1137), channel_id=1173, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1140.36642.clone
  %add.6857 = f32[] add(%add.6856, %all-reduce.722)
  %reduce.1138 = f32[] reduce(%multiply.9651, %constant.5451), dimensions={0,1}, to_apply=%region_1141.36649
  %all-reduce.723 = f32[] all-reduce(%reduce.1138), channel_id=1174, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1141.36649.clone
  %add.6858 = f32[] add(%add.6857, %all-reduce.723)
  %reduce.1139 = f32[] reduce(%multiply.9659, %constant.5451), dimensions={0}, to_apply=%region_1142.36656
  %add.6859 = f32[] add(%add.6858, %reduce.1139)
  %reduce.1140 = f32[] reduce(%multiply.9668, %constant.5451), dimensions={0}, to_apply=%region_1143.36663
  %add.6860 = f32[] add(%add.6859, %reduce.1140)
  %reduce.1141 = f32[] reduce(%multiply.9678, %constant.5451), dimensions={0,1,2}, to_apply=%region_1144.36670
  %all-reduce.724 = f32[] all-reduce(%reduce.1141), channel_id=1175, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1144.36670.clone
  %add.6861 = f32[] add(%add.6860, %all-reduce.724)
  %reduce.1142 = f32[] reduce(%multiply.9686, %constant.5451), dimensions={0,1,2}, to_apply=%region_1145.36677
  %all-reduce.725 = f32[] all-reduce(%reduce.1142), channel_id=1176, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1145.36677.clone
  %add.6862 = f32[] add(%add.6861, %all-reduce.725)
  %reduce.1143 = f32[] reduce(%multiply.9694, %constant.5451), dimensions={0,1,2}, to_apply=%region_1146.36684
  %all-reduce.726 = f32[] all-reduce(%reduce.1143), channel_id=1177, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1146.36684.clone
  %add.6863 = f32[] add(%add.6862, %all-reduce.726)
  %reduce.1144 = f32[] reduce(%multiply.9702, %constant.5451), dimensions={0,1,2}, to_apply=%region_1147.36691
  %all-reduce.727 = f32[] all-reduce(%reduce.1144), channel_id=1178, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1147.36691.clone
  %add.6864 = f32[] add(%add.6863, %all-reduce.727)
  %reduce.1145 = f32[] reduce(%multiply.9710, %constant.5451), dimensions={0,1}, to_apply=%region_1148.36698
  %all-reduce.728 = f32[] all-reduce(%reduce.1145), channel_id=1179, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1148.36698.clone
  %add.6865 = f32[] add(%add.6864, %all-reduce.728)
  %reduce.1146 = f32[] reduce(%multiply.9718, %constant.5451), dimensions={0,1}, to_apply=%region_1149.36705
  %all-reduce.729 = f32[] all-reduce(%reduce.1146), channel_id=1180, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1149.36705.clone
  %add.6866 = f32[] add(%add.6865, %all-reduce.729)
  %reduce.1147 = f32[] reduce(%multiply.9726, %constant.5451), dimensions={0,1}, to_apply=%region_1150.36712
  %all-reduce.730 = f32[] all-reduce(%reduce.1147), channel_id=1181, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1150.36712.clone
  %add.6867 = f32[] add(%add.6866, %all-reduce.730)
  %reduce.1148 = f32[] reduce(%multiply.9734, %constant.5451), dimensions={0}, to_apply=%region_1151.36719
  %add.6868 = f32[] add(%add.6867, %reduce.1148)
  %reduce.1149 = f32[] reduce(%multiply.9743, %constant.5451), dimensions={0}, to_apply=%region_1152.36726
  %add.6869 = f32[] add(%add.6868, %reduce.1149)
  %reduce.1150 = f32[] reduce(%multiply.9752, %constant.5451), dimensions={0,1,2}, to_apply=%region_1153.36733
  %all-reduce.731 = f32[] all-reduce(%reduce.1150), channel_id=1182, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1153.36733.clone
  %add.6870 = f32[] add(%add.6869, %all-reduce.731)
  %reduce.1151 = f32[] reduce(%multiply.9761, %constant.5451), dimensions={0,1,2}, to_apply=%region_1154.36740
  %all-reduce.732 = f32[] all-reduce(%reduce.1151), channel_id=1183, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1154.36740.clone
  %add.6871 = f32[] add(%add.6870, %all-reduce.732)
  %reduce.1152 = f32[] reduce(%multiply.9770, %constant.5451), dimensions={0,1,2}, to_apply=%region_1155.36747
  %all-reduce.733 = f32[] all-reduce(%reduce.1152), channel_id=1184, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1155.36747.clone
  %add.6872 = f32[] add(%add.6871, %all-reduce.733)
  %reduce.1153 = f32[] reduce(%multiply.9779, %constant.5451), dimensions={0,1,2}, to_apply=%region_1156.36754
  %all-reduce.734 = f32[] all-reduce(%reduce.1153), channel_id=1185, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1156.36754.clone
  %add.6873 = f32[] add(%add.6872, %all-reduce.734)
  %reduce.1154 = f32[] reduce(%multiply.9788, %constant.5451), dimensions={0,1}, to_apply=%region_1157.36761
  %all-reduce.735 = f32[] all-reduce(%reduce.1154), channel_id=1186, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1157.36761.clone
  %add.6874 = f32[] add(%add.6873, %all-reduce.735)
  %reduce.1155 = f32[] reduce(%multiply.9797, %constant.5451), dimensions={0,1}, to_apply=%region_1158.36768
  %all-reduce.736 = f32[] all-reduce(%reduce.1155), channel_id=1187, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1158.36768.clone
  %add.6875 = f32[] add(%add.6874, %all-reduce.736)
  %reduce.1156 = f32[] reduce(%multiply.9805, %constant.5451), dimensions={0,1}, to_apply=%region_1159.36775
  %all-reduce.737 = f32[] all-reduce(%reduce.1156), channel_id=1188, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1159.36775.clone
  %add.6876 = f32[] add(%add.6875, %all-reduce.737)
  %reduce.1157 = f32[] reduce(%multiply.9813, %constant.5451), dimensions={0}, to_apply=%region_1160.36782
  %add.6878 = f32[] add(%add.6876, %reduce.1157)
  %reduce.1158 = f32[] reduce(%multiply.9821, %constant.5451), dimensions={0}, to_apply=%region_1161.36789
  %add.6879 = f32[] add(%add.6878, %reduce.1158)
  %reduce.1159 = f32[] reduce(%multiply.9830, %constant.5451), dimensions={0,1,2}, to_apply=%region_1162.36796
  %all-reduce.738 = f32[] all-reduce(%reduce.1159), channel_id=1189, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1162.36796.clone
  %add.6880 = f32[] add(%add.6879, %all-reduce.738)
  %reduce.1160 = f32[] reduce(%multiply.9838, %constant.5451), dimensions={0,1,2}, to_apply=%region_1163.36803
  %all-reduce.739 = f32[] all-reduce(%reduce.1160), channel_id=1190, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1163.36803.clone
  %add.6881 = f32[] add(%add.6880, %all-reduce.739)
  %reduce.1161 = f32[] reduce(%multiply.9848, %constant.5451), dimensions={0,1,2}, to_apply=%region_1164.36810
  %all-reduce.740 = f32[] all-reduce(%reduce.1161), channel_id=1191, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1164.36810.clone
  %add.6882 = f32[] add(%add.6881, %all-reduce.740)
  %reduce.1162 = f32[] reduce(%multiply.9856, %constant.5451), dimensions={0,1,2}, to_apply=%region_1165.36817
  %all-reduce.741 = f32[] all-reduce(%reduce.1162), channel_id=1192, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1165.36817.clone
  %add.6883 = f32[] add(%add.6882, %all-reduce.741)
  %reduce.1163 = f32[] reduce(%multiply.9864, %constant.5451), dimensions={0,1}, to_apply=%region_1166.36824
  %all-reduce.742 = f32[] all-reduce(%reduce.1163), channel_id=1193, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1166.36824.clone
  %add.6884 = f32[] add(%add.6883, %all-reduce.742)
  %reduce.1164 = f32[] reduce(%multiply.9873, %constant.5451), dimensions={0,1}, to_apply=%region_1167.36831
  %all-reduce.743 = f32[] all-reduce(%reduce.1164), channel_id=1194, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1167.36831.clone
  %add.6885 = f32[] add(%add.6884, %all-reduce.743)
  %sqrt.292 = f32[] sqrt(%add.6885)
  %broadcast.15652 = f32[2,8192,128256]{2,1,0} broadcast(%log.2), dimensions={0,1}
  %subtract.357 = f32[2,8192,128256]{2,1,0} subtract(%subtract.193, %broadcast.15652)
  %broadcast.15653 = f32[2,8192,128256]{2,1,0} broadcast(%constant.5451), dimensions={}
  %select.3422 = f32[2,8192,128256]{2,1,0} select(%compare.3273, %subtract.357, %broadcast.15653)
  %reduce.1165 = f32[2,8192]{1,0} reduce(%select.3422, %constant.5451), dimensions={2}, to_apply=%region_163.10121
  %negate.959 = f32[2,8192]{1,0} negate(%reduce.1165)
  %multiply.10198 = f32[2,8192]{1,0} multiply(%add.3419, %add.3419)
  %multiply.10199 = f32[2,8192]{1,0} multiply(%multiply.10198, %broadcast.10146)
  %add.6886 = f32[2,8192]{1,0} add(%negate.959, %multiply.10199)
  %copy.2379 = f32[2,8192]{1,0} copy(%add.6886)
  %select.3423 = f32[2,8192]{1,0} select(%compare.3271, %copy.2379, %broadcast.10146)
  %reduce.1166 = f32[] reduce(%select.3423, %constant.5451), dimensions={0,1}, to_apply=%region_164.10137
  %all-reduce.744 = f32[] all-reduce(%reduce.1166), channel_id=1195, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_164.10137.clone
  %divide.2000 = f32[] divide(%all-reduce.744, %add.3418)
  %multiply.10200 = f32[4096]{0} multiply(%add.5068, %add.5068)
  %reduce.1167 = f32[] reduce(%multiply.10200, %constant.5451), dimensions={0}, to_apply=%region_1459.38876
  %multiply.10201 = f32[256,14336]{1,0} multiply(%add.5073, %add.5073)
  %reduce.1168 = f32[] reduce(%multiply.10201, %constant.5451), dimensions={0,1}, to_apply=%region_1460.38882
  %all-reduce.745 = f32[] all-reduce(%reduce.1168), channel_id=1196, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1460.38882.clone
  %add.6887 = f32[] add(%reduce.1167, %all-reduce.745)
  %multiply.10202 = f32[256,14336]{1,0} multiply(%add.5078, %add.5078)
  %reduce.1169 = f32[] reduce(%multiply.10202, %constant.5451), dimensions={0,1}, to_apply=%region_1461.38889
  %all-reduce.746 = f32[] all-reduce(%reduce.1169), channel_id=1197, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1461.38889.clone
  %add.6888 = f32[] add(%add.6887, %all-reduce.746)
  %multiply.10203 = f32[14336,256]{1,0} multiply(%add.5084, %add.5084)
  %reduce.1170 = f32[] reduce(%multiply.10203, %constant.5451), dimensions={0,1}, to_apply=%region_1462.38896
  %all-reduce.747 = f32[] all-reduce(%reduce.1170), channel_id=1198, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1462.38896.clone
  %add.6889 = f32[] add(%add.6888, %all-reduce.747)
  %multiply.10206 = f32[4096]{0} multiply(%add.5089, %add.5089)
  %reduce.1171 = f32[] reduce(%multiply.10206, %constant.5451), dimensions={0}, to_apply=%region_1463.38903
  %add.6890 = f32[] add(%add.6889, %reduce.1171)
  %multiply.10207 = f32[4096]{0} multiply(%add.5094, %add.5094)
  %reduce.1172 = f32[] reduce(%multiply.10207, %constant.5451), dimensions={0}, to_apply=%region_1464.38910
  %add.6891 = f32[] add(%add.6890, %reduce.1172)
  %multiply.10208 = f32[256,8,128]{2,1,0} multiply(%add.5099, %add.5099)
  %reduce.1173 = f32[] reduce(%multiply.10208, %constant.5451), dimensions={0,1,2}, to_apply=%region_1465.38917
  %all-reduce.748 = f32[] all-reduce(%reduce.1173), channel_id=1199, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1465.38917.clone
  %add.6892 = f32[] add(%add.6891, %all-reduce.748)
  %multiply.10209 = f32[32,128,256]{2,1,0} multiply(%add.5104, %add.5104)
  %reduce.1174 = f32[] reduce(%multiply.10209, %constant.5451), dimensions={0,1,2}, to_apply=%region_1466.38924
  %all-reduce.749 = f32[] all-reduce(%reduce.1174), channel_id=1200, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1466.38924.clone
  %add.6893 = f32[] add(%add.6892, %all-reduce.749)
  %multiply.10210 = f32[256,32,128]{2,1,0} multiply(%add.5109, %add.5109)
  %reduce.1175 = f32[] reduce(%multiply.10210, %constant.5451), dimensions={0,1,2}, to_apply=%region_1467.38931
  %all-reduce.750 = f32[] all-reduce(%reduce.1175), channel_id=1201, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1467.38931.clone
  %add.6894 = f32[] add(%add.6893, %all-reduce.750)
  %multiply.10211 = f32[256,8,128]{2,1,0} multiply(%add.5114, %add.5114)
  %reduce.1176 = f32[] reduce(%multiply.10211, %constant.5451), dimensions={0,1,2}, to_apply=%region_1468.38938
  %all-reduce.751 = f32[] all-reduce(%reduce.1176), channel_id=1202, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1468.38938.clone
  %add.6895 = f32[] add(%add.6894, %all-reduce.751)
  %multiply.10212 = f32[256,14336]{1,0} multiply(%add.5119, %add.5119)
  %reduce.1177 = f32[] reduce(%multiply.10212, %constant.5451), dimensions={0,1}, to_apply=%region_1469.38945
  %all-reduce.752 = f32[] all-reduce(%reduce.1177), channel_id=1203, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1469.38945.clone
  %add.6896 = f32[] add(%add.6895, %all-reduce.752)
  %multiply.10214 = f32[256,14336]{1,0} multiply(%add.5125, %add.5125)
  %reduce.1178 = f32[] reduce(%multiply.10214, %constant.5451), dimensions={0,1}, to_apply=%region_1470.38952
  %all-reduce.753 = f32[] all-reduce(%reduce.1178), channel_id=1204, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1470.38952.clone
  %add.6897 = f32[] add(%add.6896, %all-reduce.753)
  %multiply.10215 = f32[14336,256]{1,0} multiply(%add.5130, %add.5130)
  %reduce.1179 = f32[] reduce(%multiply.10215, %constant.5451), dimensions={0,1}, to_apply=%region_1471.38959
  %all-reduce.754 = f32[] all-reduce(%reduce.1179), channel_id=1205, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1471.38959.clone
  %add.6898 = f32[] add(%add.6897, %all-reduce.754)
  %multiply.10216 = f32[4096]{0} multiply(%add.5135, %add.5135)
  %reduce.1180 = f32[] reduce(%multiply.10216, %constant.5451), dimensions={0}, to_apply=%region_1472.38966
  %add.6899 = f32[] add(%add.6898, %reduce.1180)
  %multiply.10217 = f32[4096]{0} multiply(%add.5140, %add.5140)
  %reduce.1181 = f32[] reduce(%multiply.10217, %constant.5451), dimensions={0}, to_apply=%region_1473.38973
  %add.6900 = f32[] add(%add.6899, %reduce.1181)
  %multiply.10218 = f32[256,8,128]{2,1,0} multiply(%add.5145, %add.5145)
  %reduce.1182 = f32[] reduce(%multiply.10218, %constant.5451), dimensions={0,1,2}, to_apply=%region_1474.38980
  %all-reduce.755 = f32[] all-reduce(%reduce.1182), channel_id=1206, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1474.38980.clone
  %add.6901 = f32[] add(%add.6900, %all-reduce.755)
  %multiply.10219 = f32[32,128,256]{2,1,0} multiply(%add.5150, %add.5150)
  %reduce.1183 = f32[] reduce(%multiply.10219, %constant.5451), dimensions={0,1,2}, to_apply=%region_1475.38987
  %all-reduce.756 = f32[] all-reduce(%reduce.1183), channel_id=1207, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1475.38987.clone
  %add.6902 = f32[] add(%add.6901, %all-reduce.756)
  %multiply.10220 = f32[256,32,128]{2,1,0} multiply(%add.5155, %add.5155)
  %reduce.1184 = f32[] reduce(%multiply.10220, %constant.5451), dimensions={0,1,2}, to_apply=%region_1476.38994
  %all-reduce.757 = f32[] all-reduce(%reduce.1184), channel_id=1208, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1476.38994.clone
  %add.6903 = f32[] add(%add.6902, %all-reduce.757)
  %multiply.10221 = f32[256,8,128]{2,1,0} multiply(%add.5161, %add.5161)
  %reduce.1185 = f32[] reduce(%multiply.10221, %constant.5451), dimensions={0,1,2}, to_apply=%region_1477.39001
  %all-reduce.758 = f32[] all-reduce(%reduce.1185), channel_id=1209, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1477.39001.clone
  %add.6904 = f32[] add(%add.6903, %all-reduce.758)
  %multiply.10222 = f32[256,14336]{1,0} multiply(%add.5166, %add.5166)
  %reduce.1186 = f32[] reduce(%multiply.10222, %constant.5451), dimensions={0,1}, to_apply=%region_1478.39008
  %all-reduce.759 = f32[] all-reduce(%reduce.1186), channel_id=1210, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1478.39008.clone
  %add.6905 = f32[] add(%add.6904, %all-reduce.759)
  %multiply.10223 = f32[256,14336]{1,0} multiply(%add.5171, %add.5171)
  %reduce.1187 = f32[] reduce(%multiply.10223, %constant.5451), dimensions={0,1}, to_apply=%region_1479.39015
  %all-reduce.760 = f32[] all-reduce(%reduce.1187), channel_id=1211, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1479.39015.clone
  %add.6906 = f32[] add(%add.6905, %all-reduce.760)
  %multiply.10224 = f32[14336,256]{1,0} multiply(%add.5176, %add.5176)
  %reduce.1188 = f32[] reduce(%multiply.10224, %constant.5451), dimensions={0,1}, to_apply=%region_1480.39022
  %all-reduce.761 = f32[] all-reduce(%reduce.1188), channel_id=1212, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1480.39022.clone
  %add.6907 = f32[] add(%add.6906, %all-reduce.761)
  %multiply.10225 = f32[4096]{0} multiply(%add.5181, %add.5181)
  %reduce.1189 = f32[] reduce(%multiply.10225, %constant.5451), dimensions={0}, to_apply=%region_1481.39029
  %add.6909 = f32[] add(%add.6907, %reduce.1189)
  %multiply.10226 = f32[4096]{0} multiply(%add.5186, %add.5186)
  %reduce.1190 = f32[] reduce(%multiply.10226, %constant.5451), dimensions={0}, to_apply=%region_1482.39036
  %add.6910 = f32[] add(%add.6909, %reduce.1190)
  %multiply.10227 = f32[256,8,128]{2,1,0} multiply(%add.5191, %add.5191)
  %reduce.1191 = f32[] reduce(%multiply.10227, %constant.5451), dimensions={0,1,2}, to_apply=%region_1483.39043
  %all-reduce.762 = f32[] all-reduce(%reduce.1191), channel_id=1213, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1483.39043.clone
  %add.6911 = f32[] add(%add.6910, %all-reduce.762)
  %multiply.10228 = f32[32,128,256]{2,1,0} multiply(%add.5196, %add.5196)
  %reduce.1192 = f32[] reduce(%multiply.10228, %constant.5451), dimensions={0,1,2}, to_apply=%region_1484.39050
  %all-reduce.763 = f32[] all-reduce(%reduce.1192), channel_id=1214, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1484.39050.clone
  %add.6912 = f32[] add(%add.6911, %all-reduce.763)
  %multiply.10229 = f32[256,32,128]{2,1,0} multiply(%add.5202, %add.5202)
  %reduce.1193 = f32[] reduce(%multiply.10229, %constant.5451), dimensions={0,1,2}, to_apply=%region_1485.39057
  %all-reduce.764 = f32[] all-reduce(%reduce.1193), channel_id=1215, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1485.39057.clone
  %add.6913 = f32[] add(%add.6912, %all-reduce.764)
  %multiply.10230 = f32[256,8,128]{2,1,0} multiply(%add.5207, %add.5207)
  %reduce.1194 = f32[] reduce(%multiply.10230, %constant.5451), dimensions={0,1,2}, to_apply=%region_1486.39064
  %all-reduce.765 = f32[] all-reduce(%reduce.1194), channel_id=1216, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1486.39064.clone
  %add.6914 = f32[] add(%add.6913, %all-reduce.765)
  %multiply.10231 = f32[256,14336]{1,0} multiply(%add.5212, %add.5212)
  %reduce.1195 = f32[] reduce(%multiply.10231, %constant.5451), dimensions={0,1}, to_apply=%region_1487.39071
  %all-reduce.766 = f32[] all-reduce(%reduce.1195), channel_id=1217, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1487.39071.clone
  %add.6915 = f32[] add(%add.6914, %all-reduce.766)
  %multiply.10232 = f32[256,14336]{1,0} multiply(%add.5217, %add.5217)
  %reduce.1196 = f32[] reduce(%multiply.10232, %constant.5451), dimensions={0,1}, to_apply=%region_1488.39078
  %all-reduce.767 = f32[] all-reduce(%reduce.1196), channel_id=1218, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1488.39078.clone
  %add.6917 = f32[] add(%add.6915, %all-reduce.767)
  %multiply.10233 = f32[14336,256]{1,0} multiply(%add.5222, %add.5222)
  %reduce.1197 = f32[] reduce(%multiply.10233, %constant.5451), dimensions={0,1}, to_apply=%region_1489.39085
  %all-reduce.768 = f32[] all-reduce(%reduce.1197), channel_id=1219, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1489.39085.clone
  %add.6918 = f32[] add(%add.6917, %all-reduce.768)
  %multiply.10234 = f32[4096]{0} multiply(%add.5227, %add.5227)
  %reduce.1198 = f32[] reduce(%multiply.10234, %constant.5451), dimensions={0}, to_apply=%region_1490.39092
  %add.6919 = f32[] add(%add.6918, %reduce.1198)
  %multiply.10235 = f32[4096]{0} multiply(%add.5233, %add.5233)
  %reduce.1199 = f32[] reduce(%multiply.10235, %constant.5451), dimensions={0}, to_apply=%region_1491.39099
  %add.6920 = f32[] add(%add.6919, %reduce.1199)
  %multiply.10236 = f32[256,8,128]{2,1,0} multiply(%add.5239, %add.5239)
  %reduce.1200 = f32[] reduce(%multiply.10236, %constant.5451), dimensions={0,1,2}, to_apply=%region_1492.39106
  %all-reduce.769 = f32[] all-reduce(%reduce.1200), channel_id=1220, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1492.39106.clone
  %add.6921 = f32[] add(%add.6920, %all-reduce.769)
  %multiply.10237 = f32[32,128,256]{2,1,0} multiply(%add.5244, %add.5244)
  %reduce.1201 = f32[] reduce(%multiply.10237, %constant.5451), dimensions={0,1,2}, to_apply=%region_1493.39113
  %all-reduce.770 = f32[] all-reduce(%reduce.1201), channel_id=1221, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1493.39113.clone
  %add.6922 = f32[] add(%add.6921, %all-reduce.770)
  %multiply.10238 = f32[256,32,128]{2,1,0} multiply(%add.5249, %add.5249)
  %reduce.1202 = f32[] reduce(%multiply.10238, %constant.5451), dimensions={0,1,2}, to_apply=%region_1494.39120
  %all-reduce.771 = f32[] all-reduce(%reduce.1202), channel_id=1222, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1494.39120.clone
  %add.6923 = f32[] add(%add.6922, %all-reduce.771)
  %multiply.10239 = f32[256,8,128]{2,1,0} multiply(%add.5255, %add.5255)
  %reduce.1203 = f32[] reduce(%multiply.10239, %constant.5451), dimensions={0,1,2}, to_apply=%region_1495.39127
  %all-reduce.772 = f32[] all-reduce(%reduce.1203), channel_id=1223, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1495.39127.clone
  %add.6924 = f32[] add(%add.6923, %all-reduce.772)
  %multiply.10240 = f32[256,14336]{1,0} multiply(%add.5261, %add.5261)
  %reduce.1204 = f32[] reduce(%multiply.10240, %constant.5451), dimensions={0,1}, to_apply=%region_1496.39134
  %all-reduce.773 = f32[] all-reduce(%reduce.1204), channel_id=1224, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1496.39134.clone
  %add.6925 = f32[] add(%add.6924, %all-reduce.773)
  %multiply.10241 = f32[256,14336]{1,0} multiply(%add.5267, %add.5267)
  %reduce.1205 = f32[] reduce(%multiply.10241, %constant.5451), dimensions={0,1}, to_apply=%region_1497.39141
  %all-reduce.774 = f32[] all-reduce(%reduce.1205), channel_id=1225, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1497.39141.clone
  %add.6926 = f32[] add(%add.6925, %all-reduce.774)
  %multiply.10242 = f32[14336,256]{1,0} multiply(%add.5272, %add.5272)
  %reduce.1206 = f32[] reduce(%multiply.10242, %constant.5451), dimensions={0,1}, to_apply=%region_1498.39148
  %all-reduce.775 = f32[] all-reduce(%reduce.1206), channel_id=1226, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1498.39148.clone
  %add.6927 = f32[] add(%add.6926, %all-reduce.775)
  %multiply.10243 = f32[4096]{0} multiply(%add.5277, %add.5277)
  %reduce.1207 = f32[] reduce(%multiply.10243, %constant.5451), dimensions={0}, to_apply=%region_1499.39155
  %add.6928 = f32[] add(%add.6927, %reduce.1207)
  %multiply.10246 = f32[4096]{0} multiply(%add.5282, %add.5282)
  %reduce.1208 = f32[] reduce(%multiply.10246, %constant.5451), dimensions={0}, to_apply=%region_1500.39162
  %add.6929 = f32[] add(%add.6928, %reduce.1208)
  %multiply.10247 = f32[256,8,128]{2,1,0} multiply(%add.5287, %add.5287)
  %reduce.1209 = f32[] reduce(%multiply.10247, %constant.5451), dimensions={0,1,2}, to_apply=%region_1501.39169
  %all-reduce.776 = f32[] all-reduce(%reduce.1209), channel_id=1227, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1501.39169.clone
  %add.6930 = f32[] add(%add.6929, %all-reduce.776)
  %multiply.10248 = f32[32,128,256]{2,1,0} multiply(%add.5293, %add.5293)
  %reduce.1210 = f32[] reduce(%multiply.10248, %constant.5451), dimensions={0,1,2}, to_apply=%region_1502.39176
  %all-reduce.777 = f32[] all-reduce(%reduce.1210), channel_id=1228, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1502.39176.clone
  %add.6931 = f32[] add(%add.6930, %all-reduce.777)
  %multiply.10249 = f32[256,32,128]{2,1,0} multiply(%add.5299, %add.5299)
  %reduce.1211 = f32[] reduce(%multiply.10249, %constant.5451), dimensions={0,1,2}, to_apply=%region_1503.39183
  %all-reduce.778 = f32[] all-reduce(%reduce.1211), channel_id=1229, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1503.39183.clone
  %add.6932 = f32[] add(%add.6931, %all-reduce.778)
  %multiply.10250 = f32[256,8,128]{2,1,0} multiply(%add.5305, %add.5305)
  %reduce.1212 = f32[] reduce(%multiply.10250, %constant.5451), dimensions={0,1,2}, to_apply=%region_1504.39190
  %all-reduce.779 = f32[] all-reduce(%reduce.1212), channel_id=1230, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1504.39190.clone
  %add.6933 = f32[] add(%add.6932, %all-reduce.779)
  %multiply.10251 = f32[256,14336]{1,0} multiply(%add.5310, %add.5310)
  %reduce.1213 = f32[] reduce(%multiply.10251, %constant.5451), dimensions={0,1}, to_apply=%region_1505.39197
  %all-reduce.780 = f32[] all-reduce(%reduce.1213), channel_id=1231, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1505.39197.clone
  %add.6935 = f32[] add(%add.6933, %all-reduce.780)
  %multiply.10252 = f32[256,14336]{1,0} multiply(%add.5315, %add.5315)
  %reduce.1214 = f32[] reduce(%multiply.10252, %constant.5451), dimensions={0,1}, to_apply=%region_1506.39204
  %all-reduce.781 = f32[] all-reduce(%reduce.1214), channel_id=1232, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1506.39204.clone
  %add.6936 = f32[] add(%add.6935, %all-reduce.781)
  %multiply.10253 = f32[14336,256]{1,0} multiply(%add.5320, %add.5320)
  %reduce.1215 = f32[] reduce(%multiply.10253, %constant.5451), dimensions={0,1}, to_apply=%region_1507.39211
  %all-reduce.782 = f32[] all-reduce(%reduce.1215), channel_id=1233, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1507.39211.clone
  %add.6937 = f32[] add(%add.6936, %all-reduce.782)
  %multiply.10254 = f32[4096]{0} multiply(%add.5325, %add.5325)
  %reduce.1216 = f32[] reduce(%multiply.10254, %constant.5451), dimensions={0}, to_apply=%region_1508.39218
  %add.6938 = f32[] add(%add.6937, %reduce.1216)
  %multiply.10255 = f32[4096]{0} multiply(%add.5330, %add.5330)
  %reduce.1217 = f32[] reduce(%multiply.10255, %constant.5451), dimensions={0}, to_apply=%region_1509.39225
  %add.6940 = f32[] add(%add.6938, %reduce.1217)
  %multiply.10257 = f32[256,8,128]{2,1,0} multiply(%add.5335, %add.5335)
  %reduce.1218 = f32[] reduce(%multiply.10257, %constant.5451), dimensions={0,1,2}, to_apply=%region_1510.39232
  %all-reduce.783 = f32[] all-reduce(%reduce.1218), channel_id=1234, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1510.39232.clone
  %add.6941 = f32[] add(%add.6940, %all-reduce.783)
  %multiply.10258 = f32[32,128,256]{2,1,0} multiply(%add.5340, %add.5340)
  %reduce.1219 = f32[] reduce(%multiply.10258, %constant.5451), dimensions={0,1,2}, to_apply=%region_1511.39239
  %all-reduce.784 = f32[] all-reduce(%reduce.1219), channel_id=1235, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1511.39239.clone
  %add.6942 = f32[] add(%add.6941, %all-reduce.784)
  %multiply.10259 = f32[256,32,128]{2,1,0} multiply(%add.5345, %add.5345)
  %reduce.1220 = f32[] reduce(%multiply.10259, %constant.5451), dimensions={0,1,2}, to_apply=%region_1512.39246
  %all-reduce.785 = f32[] all-reduce(%reduce.1220), channel_id=1236, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1512.39246.clone
  %add.6943 = f32[] add(%add.6942, %all-reduce.785)
  %multiply.10261 = f32[256,8,128]{2,1,0} multiply(%add.5350, %add.5350)
  %reduce.1221 = f32[] reduce(%multiply.10261, %constant.5451), dimensions={0,1,2}, to_apply=%region_1513.39253
  %all-reduce.786 = f32[] all-reduce(%reduce.1221), channel_id=1237, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1513.39253.clone
  %add.6945 = f32[] add(%add.6943, %all-reduce.786)
  %multiply.10262 = f32[256,14336]{1,0} multiply(%add.5355, %add.5355)
  %reduce.1222 = f32[] reduce(%multiply.10262, %constant.5451), dimensions={0,1}, to_apply=%region_1514.39260
  %all-reduce.787 = f32[] all-reduce(%reduce.1222), channel_id=1238, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1514.39260.clone
  %add.6946 = f32[] add(%add.6945, %all-reduce.787)
  %multiply.10263 = f32[256,14336]{1,0} multiply(%add.5360, %add.5360)
  %reduce.1223 = f32[] reduce(%multiply.10263, %constant.5451), dimensions={0,1}, to_apply=%region_1515.39267
  %all-reduce.788 = f32[] all-reduce(%reduce.1223), channel_id=1239, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1515.39267.clone
  %add.6947 = f32[] add(%add.6946, %all-reduce.788)
  %multiply.10264 = f32[14336,256]{1,0} multiply(%add.5366, %add.5366)
  %reduce.1224 = f32[] reduce(%multiply.10264, %constant.5451), dimensions={0,1}, to_apply=%region_1516.39274
  %all-reduce.789 = f32[] all-reduce(%reduce.1224), channel_id=1240, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1516.39274.clone
  %add.6948 = f32[] add(%add.6947, %all-reduce.789)
  %multiply.10265 = f32[4096]{0} multiply(%add.5371, %add.5371)
  %reduce.1225 = f32[] reduce(%multiply.10265, %constant.5451), dimensions={0}, to_apply=%region_1517.39281
  %add.6949 = f32[] add(%add.6948, %reduce.1225)
  %multiply.10266 = f32[4096]{0} multiply(%add.5376, %add.5376)
  %reduce.1226 = f32[] reduce(%multiply.10266, %constant.5451), dimensions={0}, to_apply=%region_1518.39288
  %add.6950 = f32[] add(%add.6949, %reduce.1226)
  %multiply.10268 = f32[256,8,128]{2,1,0} multiply(%add.5381, %add.5381)
  %reduce.1227 = f32[] reduce(%multiply.10268, %constant.5451), dimensions={0,1,2}, to_apply=%region_1519.39295
  %all-reduce.790 = f32[] all-reduce(%reduce.1227), channel_id=1241, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1519.39295.clone
  %add.6951 = f32[] add(%add.6950, %all-reduce.790)
  %multiply.10269 = f32[32,128,256]{2,1,0} multiply(%add.5386, %add.5386)
  %reduce.1228 = f32[] reduce(%multiply.10269, %constant.5451), dimensions={0,1,2}, to_apply=%region_1520.39302
  %all-reduce.791 = f32[] all-reduce(%reduce.1228), channel_id=1242, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1520.39302.clone
  %add.6952 = f32[] add(%add.6951, %all-reduce.791)
  %multiply.10270 = f32[256,32,128]{2,1,0} multiply(%add.5391, %add.5391)
  %reduce.1229 = f32[] reduce(%multiply.10270, %constant.5451), dimensions={0,1,2}, to_apply=%region_1521.39309
  %all-reduce.792 = f32[] all-reduce(%reduce.1229), channel_id=1243, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1521.39309.clone
  %add.6953 = f32[] add(%add.6952, %all-reduce.792)
  %multiply.10271 = f32[256,8,128]{2,1,0} multiply(%add.5396, %add.5396)
  %reduce.1230 = f32[] reduce(%multiply.10271, %constant.5451), dimensions={0,1,2}, to_apply=%region_1522.39316
  %all-reduce.793 = f32[] all-reduce(%reduce.1230), channel_id=1244, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1522.39316.clone
  %add.6954 = f32[] add(%add.6953, %all-reduce.793)
  %multiply.10272 = f32[256,14336]{1,0} multiply(%add.5402, %add.5402)
  %reduce.1231 = f32[] reduce(%multiply.10272, %constant.5451), dimensions={0,1}, to_apply=%region_1523.39323
  %all-reduce.794 = f32[] all-reduce(%reduce.1231), channel_id=1245, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1523.39323.clone
  %add.6955 = f32[] add(%add.6954, %all-reduce.794)
  %multiply.10273 = f32[256,14336]{1,0} multiply(%add.5407, %add.5407)
  %reduce.1232 = f32[] reduce(%multiply.10273, %constant.5451), dimensions={0,1}, to_apply=%region_1524.39330
  %all-reduce.795 = f32[] all-reduce(%reduce.1232), channel_id=1246, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1524.39330.clone
  %add.6956 = f32[] add(%add.6955, %all-reduce.795)
  %multiply.10274 = f32[14336,256]{1,0} multiply(%add.5412, %add.5412)
  %reduce.1233 = f32[] reduce(%multiply.10274, %constant.5451), dimensions={0,1}, to_apply=%region_1525.39337
  %all-reduce.796 = f32[] all-reduce(%reduce.1233), channel_id=1247, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1525.39337.clone
  %add.6957 = f32[] add(%add.6956, %all-reduce.796)
  %multiply.10275 = f32[4096]{0} multiply(%add.5417, %add.5417)
  %reduce.1234 = f32[] reduce(%multiply.10275, %constant.5451), dimensions={0}, to_apply=%region_1526.39344
  %add.6958 = f32[] add(%add.6957, %reduce.1234)
  %multiply.10276 = f32[4096]{0} multiply(%add.5422, %add.5422)
  %reduce.1235 = f32[] reduce(%multiply.10276, %constant.5451), dimensions={0}, to_apply=%region_1527.39351
  %add.6959 = f32[] add(%add.6958, %reduce.1235)
  %multiply.10277 = f32[256,8,128]{2,1,0} multiply(%add.5427, %add.5427)
  %reduce.1236 = f32[] reduce(%multiply.10277, %constant.5451), dimensions={0,1,2}, to_apply=%region_1528.39358
  %all-reduce.797 = f32[] all-reduce(%reduce.1236), channel_id=1248, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1528.39358.clone
  %add.6960 = f32[] add(%add.6959, %all-reduce.797)
  %multiply.10278 = f32[32,128,256]{2,1,0} multiply(%add.5432, %add.5432)
  %reduce.1237 = f32[] reduce(%multiply.10278, %constant.5451), dimensions={0,1,2}, to_apply=%region_1529.39365
  %all-reduce.798 = f32[] all-reduce(%reduce.1237), channel_id=1249, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1529.39365.clone
  %add.6961 = f32[] add(%add.6960, %all-reduce.798)
  %multiply.10279 = f32[256,32,128]{2,1,0} multiply(%add.5437, %add.5437)
  %reduce.1238 = f32[] reduce(%multiply.10279, %constant.5451), dimensions={0,1,2}, to_apply=%region_1530.39372
  %all-reduce.799 = f32[] all-reduce(%reduce.1238), channel_id=1250, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1530.39372.clone
  %add.6962 = f32[] add(%add.6961, %all-reduce.799)
  %multiply.10280 = f32[256,8,128]{2,1,0} multiply(%add.5443, %add.5443)
  %reduce.1239 = f32[] reduce(%multiply.10280, %constant.5451), dimensions={0,1,2}, to_apply=%region_1531.39379
  %all-reduce.800 = f32[] all-reduce(%reduce.1239), channel_id=1251, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1531.39379.clone
  %add.6963 = f32[] add(%add.6962, %all-reduce.800)
  %multiply.10281 = f32[256,14336]{1,0} multiply(%add.5448, %add.5448)
  %reduce.1240 = f32[] reduce(%multiply.10281, %constant.5451), dimensions={0,1}, to_apply=%region_1532.39386
  %all-reduce.801 = f32[] all-reduce(%reduce.1240), channel_id=1252, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1532.39386.clone
  %add.6964 = f32[] add(%add.6963, %all-reduce.801)
  %multiply.10282 = f32[256,14336]{1,0} multiply(%add.5453, %add.5453)
  %reduce.1241 = f32[] reduce(%multiply.10282, %constant.5451), dimensions={0,1}, to_apply=%region_1533.39393
  %all-reduce.802 = f32[] all-reduce(%reduce.1241), channel_id=1253, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1533.39393.clone
  %add.6965 = f32[] add(%add.6964, %all-reduce.802)
  %multiply.10283 = f32[14336,256]{1,0} multiply(%add.5458, %add.5458)
  %reduce.1242 = f32[] reduce(%multiply.10283, %constant.5451), dimensions={0,1}, to_apply=%region_1534.39400
  %all-reduce.803 = f32[] all-reduce(%reduce.1242), channel_id=1254, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1534.39400.clone
  %add.6966 = f32[] add(%add.6965, %all-reduce.803)
  %multiply.10284 = f32[4096]{0} multiply(%add.5463, %add.5463)
  %reduce.1243 = f32[] reduce(%multiply.10284, %constant.5451), dimensions={0}, to_apply=%region_1535.39407
  %add.6967 = f32[] add(%add.6966, %reduce.1243)
  %multiply.10285 = f32[4096]{0} multiply(%add.5468, %add.5468)
  %reduce.1244 = f32[] reduce(%multiply.10285, %constant.5451), dimensions={0}, to_apply=%region_1536.39414
  %add.6968 = f32[] add(%add.6967, %reduce.1244)
  %multiply.10286 = f32[256,8,128]{2,1,0} multiply(%add.5473, %add.5473)
  %reduce.1245 = f32[] reduce(%multiply.10286, %constant.5451), dimensions={0,1,2}, to_apply=%region_1537.39421
  %all-reduce.804 = f32[] all-reduce(%reduce.1245), channel_id=1255, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1537.39421.clone
  %add.6969 = f32[] add(%add.6968, %all-reduce.804)
  %multiply.10287 = f32[32,128,256]{2,1,0} multiply(%add.5479, %add.5479)
  %reduce.1246 = f32[] reduce(%multiply.10287, %constant.5451), dimensions={0,1,2}, to_apply=%region_1538.39428
  %all-reduce.805 = f32[] all-reduce(%reduce.1246), channel_id=1256, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1538.39428.clone
  %add.6971 = f32[] add(%add.6969, %all-reduce.805)
  %multiply.10288 = f32[256,32,128]{2,1,0} multiply(%add.5484, %add.5484)
  %reduce.1247 = f32[] reduce(%multiply.10288, %constant.5451), dimensions={0,1,2}, to_apply=%region_1539.39435
  %all-reduce.806 = f32[] all-reduce(%reduce.1247), channel_id=1257, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1539.39435.clone
  %add.6972 = f32[] add(%add.6971, %all-reduce.806)
  %multiply.10289 = f32[256,8,128]{2,1,0} multiply(%add.5489, %add.5489)
  %reduce.1248 = f32[] reduce(%multiply.10289, %constant.5451), dimensions={0,1,2}, to_apply=%region_1540.39442
  %all-reduce.807 = f32[] all-reduce(%reduce.1248), channel_id=1258, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1540.39442.clone
  %add.6973 = f32[] add(%add.6972, %all-reduce.807)
  %multiply.10290 = f32[256,14336]{1,0} multiply(%add.5494, %add.5494)
  %reduce.1249 = f32[] reduce(%multiply.10290, %constant.5451), dimensions={0,1}, to_apply=%region_1541.39449
  %all-reduce.808 = f32[] all-reduce(%reduce.1249), channel_id=1259, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1541.39449.clone
  %add.6974 = f32[] add(%add.6973, %all-reduce.808)
  %multiply.10291 = f32[256,14336]{1,0} multiply(%add.5499, %add.5499)
  %reduce.1250 = f32[] reduce(%multiply.10291, %constant.5451), dimensions={0,1}, to_apply=%region_1542.39456
  %all-reduce.809 = f32[] all-reduce(%reduce.1250), channel_id=1260, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1542.39456.clone
  %add.6975 = f32[] add(%add.6974, %all-reduce.809)
  %multiply.10292 = f32[14336,256]{1,0} multiply(%add.5504, %add.5504)
  %reduce.1251 = f32[] reduce(%multiply.10292, %constant.5451), dimensions={0,1}, to_apply=%region_1543.39463
  %all-reduce.810 = f32[] all-reduce(%reduce.1251), channel_id=1261, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1543.39463.clone
  %add.6976 = f32[] add(%add.6975, %all-reduce.810)
  %multiply.10293 = f32[4096]{0} multiply(%add.5510, %add.5510)
  %reduce.1252 = f32[] reduce(%multiply.10293, %constant.5451), dimensions={0}, to_apply=%region_1544.39470
  %add.6978 = f32[] add(%add.6976, %reduce.1252)
  %multiply.10294 = f32[4096]{0} multiply(%add.5515, %add.5515)
  %reduce.1253 = f32[] reduce(%multiply.10294, %constant.5451), dimensions={0}, to_apply=%region_1545.39477
  %add.6979 = f32[] add(%add.6978, %reduce.1253)
  %multiply.10295 = f32[256,8,128]{2,1,0} multiply(%add.5521, %add.5521)
  %reduce.1254 = f32[] reduce(%multiply.10295, %constant.5451), dimensions={0,1,2}, to_apply=%region_1546.39484
  %all-reduce.811 = f32[] all-reduce(%reduce.1254), channel_id=1262, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1546.39484.clone
  %add.6980 = f32[] add(%add.6979, %all-reduce.811)
  %multiply.10296 = f32[32,128,256]{2,1,0} multiply(%add.5526, %add.5526)
  %reduce.1255 = f32[] reduce(%multiply.10296, %constant.5451), dimensions={0,1,2}, to_apply=%region_1547.39491
  %all-reduce.812 = f32[] all-reduce(%reduce.1255), channel_id=1263, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1547.39491.clone
  %add.6981 = f32[] add(%add.6980, %all-reduce.812)
  %multiply.10297 = f32[256,32,128]{2,1,0} multiply(%add.5531, %add.5531)
  %reduce.1256 = f32[] reduce(%multiply.10297, %constant.5451), dimensions={0,1,2}, to_apply=%region_1548.39498
  %all-reduce.813 = f32[] all-reduce(%reduce.1256), channel_id=1264, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1548.39498.clone
  %add.6983 = f32[] add(%add.6981, %all-reduce.813)
  %multiply.10298 = f32[256,8,128]{2,1,0} multiply(%add.5537, %add.5537)
  %reduce.1257 = f32[] reduce(%multiply.10298, %constant.5451), dimensions={0,1,2}, to_apply=%region_1549.39505
  %all-reduce.814 = f32[] all-reduce(%reduce.1257), channel_id=1265, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1549.39505.clone
  %add.6984 = f32[] add(%add.6983, %all-reduce.814)
  %multiply.10299 = f32[256,14336]{1,0} multiply(%add.5543, %add.5543)
  %reduce.1258 = f32[] reduce(%multiply.10299, %constant.5451), dimensions={0,1}, to_apply=%region_1550.39512
  %all-reduce.815 = f32[] all-reduce(%reduce.1258), channel_id=1266, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1550.39512.clone
  %add.6985 = f32[] add(%add.6984, %all-reduce.815)
  %multiply.10300 = f32[256,14336]{1,0} multiply(%add.5549, %add.5549)
  %reduce.1259 = f32[] reduce(%multiply.10300, %constant.5451), dimensions={0,1}, to_apply=%region_1551.39519
  %all-reduce.816 = f32[] all-reduce(%reduce.1259), channel_id=1267, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1551.39519.clone
  %add.6986 = f32[] add(%add.6985, %all-reduce.816)
  %multiply.10301 = f32[14336,256]{1,0} multiply(%add.5554, %add.5554)
  %reduce.1260 = f32[] reduce(%multiply.10301, %constant.5451), dimensions={0,1}, to_apply=%region_1552.39526
  %all-reduce.817 = f32[] all-reduce(%reduce.1260), channel_id=1268, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1552.39526.clone
  %add.6987 = f32[] add(%add.6986, %all-reduce.817)
  %multiply.10302 = f32[4096]{0} multiply(%add.5559, %add.5559)
  %reduce.1261 = f32[] reduce(%multiply.10302, %constant.5451), dimensions={0}, to_apply=%region_1553.39533
  %add.6988 = f32[] add(%add.6987, %reduce.1261)
  %multiply.10303 = f32[4096]{0} multiply(%add.5564, %add.5564)
  %reduce.1262 = f32[] reduce(%multiply.10303, %constant.5451), dimensions={0}, to_apply=%region_1554.39540
  %add.6989 = f32[] add(%add.6988, %reduce.1262)
  %multiply.10304 = f32[256,8,128]{2,1,0} multiply(%add.5569, %add.5569)
  %reduce.1263 = f32[] reduce(%multiply.10304, %constant.5451), dimensions={0,1,2}, to_apply=%region_1555.39547
  %all-reduce.818 = f32[] all-reduce(%reduce.1263), channel_id=1269, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1555.39547.clone
  %add.6990 = f32[] add(%add.6989, %all-reduce.818)
  %multiply.10305 = f32[32,128,256]{2,1,0} multiply(%add.5575, %add.5575)
  %reduce.1264 = f32[] reduce(%multiply.10305, %constant.5451), dimensions={0,1,2}, to_apply=%region_1556.39554
  %all-reduce.819 = f32[] all-reduce(%reduce.1264), channel_id=1270, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1556.39554.clone
  %add.6991 = f32[] add(%add.6990, %all-reduce.819)
  %multiply.10306 = f32[256,32,128]{2,1,0} multiply(%add.5581, %add.5581)
  %reduce.1265 = f32[] reduce(%multiply.10306, %constant.5451), dimensions={0,1,2}, to_apply=%region_1557.39561
  %all-reduce.820 = f32[] all-reduce(%reduce.1265), channel_id=1271, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1557.39561.clone
  %add.6992 = f32[] add(%add.6991, %all-reduce.820)
  %multiply.10307 = f32[256,8,128]{2,1,0} multiply(%add.5587, %add.5587)
  %reduce.1266 = f32[] reduce(%multiply.10307, %constant.5451), dimensions={0,1,2}, to_apply=%region_1558.39568
  %all-reduce.821 = f32[] all-reduce(%reduce.1266), channel_id=1272, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1558.39568.clone
  %add.6993 = f32[] add(%add.6992, %all-reduce.821)
  %multiply.10308 = f32[256,14336]{1,0} multiply(%add.5592, %add.5592)
  %reduce.1267 = f32[] reduce(%multiply.10308, %constant.5451), dimensions={0,1}, to_apply=%region_1559.39575
  %all-reduce.822 = f32[] all-reduce(%reduce.1267), channel_id=1273, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1559.39575.clone
  %add.6994 = f32[] add(%add.6993, %all-reduce.822)
  %multiply.10309 = f32[256,14336]{1,0} multiply(%add.5597, %add.5597)
  %reduce.1268 = f32[] reduce(%multiply.10309, %constant.5451), dimensions={0,1}, to_apply=%region_1560.39582
  %all-reduce.823 = f32[] all-reduce(%reduce.1268), channel_id=1274, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1560.39582.clone
  %add.6995 = f32[] add(%add.6994, %all-reduce.823)
  %multiply.10310 = f32[14336,256]{1,0} multiply(%add.5602, %add.5602)
  %reduce.1269 = f32[] reduce(%multiply.10310, %constant.5451), dimensions={0,1}, to_apply=%region_1561.39589
  %all-reduce.824 = f32[] all-reduce(%reduce.1269), channel_id=1275, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1561.39589.clone
  %add.6996 = f32[] add(%add.6995, %all-reduce.824)
  %multiply.10311 = f32[4096]{0} multiply(%add.5607, %add.5607)
  %reduce.1270 = f32[] reduce(%multiply.10311, %constant.5451), dimensions={0}, to_apply=%region_1562.39596
  %add.6997 = f32[] add(%add.6996, %reduce.1270)
  %multiply.10312 = f32[4096]{0} multiply(%add.5612, %add.5612)
  %reduce.1271 = f32[] reduce(%multiply.10312, %constant.5451), dimensions={0}, to_apply=%region_1563.39603
  %add.6998 = f32[] add(%add.6997, %reduce.1271)
  %multiply.10313 = f32[256,8,128]{2,1,0} multiply(%add.5617, %add.5617)
  %reduce.1272 = f32[] reduce(%multiply.10313, %constant.5451), dimensions={0,1,2}, to_apply=%region_1564.39610
  %all-reduce.825 = f32[] all-reduce(%reduce.1272), channel_id=1276, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1564.39610.clone
  %add.6999 = f32[] add(%add.6998, %all-reduce.825)
  %multiply.10314 = f32[32,128,256]{2,1,0} multiply(%add.5622, %add.5622)
  %reduce.1273 = f32[] reduce(%multiply.10314, %constant.5451), dimensions={0,1,2}, to_apply=%region_1565.39617
  %all-reduce.826 = f32[] all-reduce(%reduce.1273), channel_id=1277, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1565.39617.clone
  %add.7000 = f32[] add(%add.6999, %all-reduce.826)
  %multiply.10315 = f32[256,32,128]{2,1,0} multiply(%add.5627, %add.5627)
  %reduce.1274 = f32[] reduce(%multiply.10315, %constant.5451), dimensions={0,1,2}, to_apply=%region_1566.39624
  %all-reduce.827 = f32[] all-reduce(%reduce.1274), channel_id=1278, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1566.39624.clone
  %add.7001 = f32[] add(%add.7000, %all-reduce.827)
  %multiply.10317 = f32[256,8,128]{2,1,0} multiply(%add.5632, %add.5632)
  %reduce.1275 = f32[] reduce(%multiply.10317, %constant.5451), dimensions={0,1,2}, to_apply=%region_1567.39631
  %all-reduce.828 = f32[] all-reduce(%reduce.1275), channel_id=1279, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1567.39631.clone
  %add.7002 = f32[] add(%add.7001, %all-reduce.828)
  %multiply.10318 = f32[256,14336]{1,0} multiply(%add.5637, %add.5637)
  %reduce.1276 = f32[] reduce(%multiply.10318, %constant.5451), dimensions={0,1}, to_apply=%region_1568.39638
  %all-reduce.829 = f32[] all-reduce(%reduce.1276), channel_id=1280, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1568.39638.clone
  %add.7003 = f32[] add(%add.7002, %all-reduce.829)
  %multiply.10319 = f32[256,14336]{1,0} multiply(%add.5642, %add.5642)
  %reduce.1277 = f32[] reduce(%multiply.10319, %constant.5451), dimensions={0,1}, to_apply=%region_1569.39645
  %all-reduce.830 = f32[] all-reduce(%reduce.1277), channel_id=1281, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1569.39645.clone
  %add.7004 = f32[] add(%add.7003, %all-reduce.830)
  %multiply.10320 = f32[14336,256]{1,0} multiply(%add.5648, %add.5648)
  %reduce.1278 = f32[] reduce(%multiply.10320, %constant.5451), dimensions={0,1}, to_apply=%region_1570.39652
  %all-reduce.831 = f32[] all-reduce(%reduce.1278), channel_id=1282, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1570.39652.clone
  %add.7005 = f32[] add(%add.7004, %all-reduce.831)
  %multiply.10321 = f32[4096]{0} multiply(%add.5653, %add.5653)
  %reduce.1279 = f32[] reduce(%multiply.10321, %constant.5451), dimensions={0}, to_apply=%region_1571.39659
  %add.7006 = f32[] add(%add.7005, %reduce.1279)
  %multiply.10322 = f32[4096]{0} multiply(%add.5658, %add.5658)
  %reduce.1280 = f32[] reduce(%multiply.10322, %constant.5451), dimensions={0}, to_apply=%region_1572.39666
  %add.7007 = f32[] add(%add.7006, %reduce.1280)
  %multiply.10323 = f32[256,8,128]{2,1,0} multiply(%add.5663, %add.5663)
  %reduce.1281 = f32[] reduce(%multiply.10323, %constant.5451), dimensions={0,1,2}, to_apply=%region_1573.39673
  %all-reduce.832 = f32[] all-reduce(%reduce.1281), channel_id=1283, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1573.39673.clone
  %add.7008 = f32[] add(%add.7007, %all-reduce.832)
  %multiply.10324 = f32[32,128,256]{2,1,0} multiply(%add.5668, %add.5668)
  %reduce.1282 = f32[] reduce(%multiply.10324, %constant.5451), dimensions={0,1,2}, to_apply=%region_1574.39680
  %all-reduce.833 = f32[] all-reduce(%reduce.1282), channel_id=1284, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1574.39680.clone
  %add.7009 = f32[] add(%add.7008, %all-reduce.833)
  %multiply.10325 = f32[256,32,128]{2,1,0} multiply(%add.5673, %add.5673)
  %reduce.1283 = f32[] reduce(%multiply.10325, %constant.5451), dimensions={0,1,2}, to_apply=%region_1575.39687
  %all-reduce.834 = f32[] all-reduce(%reduce.1283), channel_id=1285, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1575.39687.clone
  %add.7010 = f32[] add(%add.7009, %all-reduce.834)
  %multiply.10326 = f32[256,8,128]{2,1,0} multiply(%add.5678, %add.5678)
  %reduce.1284 = f32[] reduce(%multiply.10326, %constant.5451), dimensions={0,1,2}, to_apply=%region_1576.39694
  %all-reduce.835 = f32[] all-reduce(%reduce.1284), channel_id=1286, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1576.39694.clone
  %add.7011 = f32[] add(%add.7010, %all-reduce.835)
  %multiply.10327 = f32[256,14336]{1,0} multiply(%add.5684, %add.5684)
  %reduce.1285 = f32[] reduce(%multiply.10327, %constant.5451), dimensions={0,1}, to_apply=%region_1577.39701
  %all-reduce.836 = f32[] all-reduce(%reduce.1285), channel_id=1287, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1577.39701.clone
  %add.7012 = f32[] add(%add.7011, %all-reduce.836)
  %multiply.10328 = f32[256,14336]{1,0} multiply(%add.5689, %add.5689)
  %reduce.1286 = f32[] reduce(%multiply.10328, %constant.5451), dimensions={0,1}, to_apply=%region_1578.39708
  %all-reduce.837 = f32[] all-reduce(%reduce.1286), channel_id=1288, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1578.39708.clone
  %add.7013 = f32[] add(%add.7012, %all-reduce.837)
  %multiply.10329 = f32[14336,256]{1,0} multiply(%add.5694, %add.5694)
  %reduce.1287 = f32[] reduce(%multiply.10329, %constant.5451), dimensions={0,1}, to_apply=%region_1579.39715
  %all-reduce.838 = f32[] all-reduce(%reduce.1287), channel_id=1289, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1579.39715.clone
  %add.7014 = f32[] add(%add.7013, %all-reduce.838)
  %multiply.10330 = f32[4096]{0} multiply(%add.5699, %add.5699)
  %reduce.1288 = f32[] reduce(%multiply.10330, %constant.5451), dimensions={0}, to_apply=%region_1580.39722
  %add.7015 = f32[] add(%add.7014, %reduce.1288)
  %multiply.10331 = f32[4096]{0} multiply(%add.5704, %add.5704)
  %reduce.1289 = f32[] reduce(%multiply.10331, %constant.5451), dimensions={0}, to_apply=%region_1581.39729
  %add.7016 = f32[] add(%add.7015, %reduce.1289)
  %multiply.10333 = f32[256,8,128]{2,1,0} multiply(%add.5709, %add.5709)
  %reduce.1290 = f32[] reduce(%multiply.10333, %constant.5451), dimensions={0,1,2}, to_apply=%region_1582.39736
  %all-reduce.839 = f32[] all-reduce(%reduce.1290), channel_id=1290, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1582.39736.clone
  %add.7017 = f32[] add(%add.7016, %all-reduce.839)
  %multiply.10335 = f32[32,128,256]{2,1,0} multiply(%add.5714, %add.5714)
  %reduce.1291 = f32[] reduce(%multiply.10335, %constant.5451), dimensions={0,1,2}, to_apply=%region_1583.39743
  %all-reduce.840 = f32[] all-reduce(%reduce.1291), channel_id=1291, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1583.39743.clone
  %add.7018 = f32[] add(%add.7017, %all-reduce.840)
  %multiply.10336 = f32[256,32,128]{2,1,0} multiply(%add.5720, %add.5720)
  %reduce.1292 = f32[] reduce(%multiply.10336, %constant.5451), dimensions={0,1,2}, to_apply=%region_1584.39750
  %all-reduce.841 = f32[] all-reduce(%reduce.1292), channel_id=1292, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1584.39750.clone
  %add.7019 = f32[] add(%add.7018, %all-reduce.841)
  %multiply.10337 = f32[256,8,128]{2,1,0} multiply(%add.5725, %add.5725)
  %reduce.1293 = f32[] reduce(%multiply.10337, %constant.5451), dimensions={0,1,2}, to_apply=%region_1585.39757
  %all-reduce.842 = f32[] all-reduce(%reduce.1293), channel_id=1293, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1585.39757.clone
  %add.7020 = f32[] add(%add.7019, %all-reduce.842)
  %multiply.10338 = f32[256,14336]{1,0} multiply(%add.5730, %add.5730)
  %reduce.1294 = f32[] reduce(%multiply.10338, %constant.5451), dimensions={0,1}, to_apply=%region_1586.39764
  %all-reduce.843 = f32[] all-reduce(%reduce.1294), channel_id=1294, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1586.39764.clone
  %add.7021 = f32[] add(%add.7020, %all-reduce.843)
  %multiply.10339 = f32[256,14336]{1,0} multiply(%add.5735, %add.5735)
  %reduce.1295 = f32[] reduce(%multiply.10339, %constant.5451), dimensions={0,1}, to_apply=%region_1587.39771
  %all-reduce.844 = f32[] all-reduce(%reduce.1295), channel_id=1295, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1587.39771.clone
  %add.7022 = f32[] add(%add.7021, %all-reduce.844)
  %multiply.10340 = f32[14336,256]{1,0} multiply(%add.5740, %add.5740)
  %reduce.1296 = f32[] reduce(%multiply.10340, %constant.5451), dimensions={0,1}, to_apply=%region_1588.39778
  %all-reduce.845 = f32[] all-reduce(%reduce.1296), channel_id=1296, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1588.39778.clone
  %add.7023 = f32[] add(%add.7022, %all-reduce.845)
  %multiply.10341 = f32[4096]{0} multiply(%add.5745, %add.5745)
  %reduce.1297 = f32[] reduce(%multiply.10341, %constant.5451), dimensions={0}, to_apply=%region_1589.39785
  %add.7024 = f32[] add(%add.7023, %reduce.1297)
  %multiply.10342 = f32[4096]{0} multiply(%add.5750, %add.5750)
  %reduce.1298 = f32[] reduce(%multiply.10342, %constant.5451), dimensions={0}, to_apply=%region_1590.39792
  %add.7025 = f32[] add(%add.7024, %reduce.1298)
  %multiply.10343 = f32[256,8,128]{2,1,0} multiply(%add.5755, %add.5755)
  %reduce.1299 = f32[] reduce(%multiply.10343, %constant.5451), dimensions={0,1,2}, to_apply=%region_1591.39799
  %all-reduce.846 = f32[] all-reduce(%reduce.1299), channel_id=1297, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1591.39799.clone
  %add.7026 = f32[] add(%add.7025, %all-reduce.846)
  %multiply.10344 = f32[32,128,256]{2,1,0} multiply(%add.5761, %add.5761)
  %reduce.1300 = f32[] reduce(%multiply.10344, %constant.5451), dimensions={0,1,2}, to_apply=%region_1592.39806
  %all-reduce.847 = f32[] all-reduce(%reduce.1300), channel_id=1298, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1592.39806.clone
  %add.7027 = f32[] add(%add.7026, %all-reduce.847)
  %multiply.10345 = f32[256,32,128]{2,1,0} multiply(%add.5766, %add.5766)
  %reduce.1302 = f32[] reduce(%multiply.10345, %constant.5451), dimensions={0,1,2}, to_apply=%region_1593.39813
  %all-reduce.848 = f32[] all-reduce(%reduce.1302), channel_id=1299, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1593.39813.clone
  %add.7028 = f32[] add(%add.7027, %all-reduce.848)
  %multiply.10346 = f32[256,8,128]{2,1,0} multiply(%add.5771, %add.5771)
  %reduce.1303 = f32[] reduce(%multiply.10346, %constant.5451), dimensions={0,1,2}, to_apply=%region_1594.39820
  %all-reduce.849 = f32[] all-reduce(%reduce.1303), channel_id=1300, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1594.39820.clone
  %add.7029 = f32[] add(%add.7028, %all-reduce.849)
  %multiply.10347 = f32[256,14336]{1,0} multiply(%add.5776, %add.5776)
  %reduce.1304 = f32[] reduce(%multiply.10347, %constant.5451), dimensions={0,1}, to_apply=%region_1595.39827
  %all-reduce.850 = f32[] all-reduce(%reduce.1304), channel_id=1301, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1595.39827.clone
  %add.7030 = f32[] add(%add.7029, %all-reduce.850)
  %multiply.10348 = f32[256,14336]{1,0} multiply(%add.5781, %add.5781)
  %reduce.1305 = f32[] reduce(%multiply.10348, %constant.5451), dimensions={0,1}, to_apply=%region_1596.39834
  %all-reduce.851 = f32[] all-reduce(%reduce.1305), channel_id=1302, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1596.39834.clone
  %add.7031 = f32[] add(%add.7030, %all-reduce.851)
  %multiply.10349 = f32[14336,256]{1,0} multiply(%add.5786, %add.5786)
  %reduce.1306 = f32[] reduce(%multiply.10349, %constant.5451), dimensions={0,1}, to_apply=%region_1597.39841
  %all-reduce.852 = f32[] all-reduce(%reduce.1306), channel_id=1303, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1597.39841.clone
  %add.7032 = f32[] add(%add.7031, %all-reduce.852)
  %multiply.10350 = f32[4096]{0} multiply(%add.5792, %add.5792)
  %reduce.1307 = f32[] reduce(%multiply.10350, %constant.5451), dimensions={0}, to_apply=%region_1598.39848
  %add.7033 = f32[] add(%add.7032, %reduce.1307)
  %multiply.10351 = f32[4096]{0} multiply(%add.5798, %add.5798)
  %reduce.1308 = f32[] reduce(%multiply.10351, %constant.5451), dimensions={0}, to_apply=%region_1599.39855
  %add.7034 = f32[] add(%add.7033, %reduce.1308)
  %multiply.10352 = f32[256,8,128]{2,1,0} multiply(%add.5803, %add.5803)
  %reduce.1310 = f32[] reduce(%multiply.10352, %constant.5451), dimensions={0,1,2}, to_apply=%region_1600.39862
  %all-reduce.853 = f32[] all-reduce(%reduce.1310), channel_id=1304, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1600.39862.clone
  %add.7035 = f32[] add(%add.7034, %all-reduce.853)
  %multiply.10353 = f32[32,128,256]{2,1,0} multiply(%add.5808, %add.5808)
  %reduce.1311 = f32[] reduce(%multiply.10353, %constant.5451), dimensions={0,1,2}, to_apply=%region_1601.39869
  %all-reduce.854 = f32[] all-reduce(%reduce.1311), channel_id=1305, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1601.39869.clone
  %add.7036 = f32[] add(%add.7035, %all-reduce.854)
  %multiply.10354 = f32[256,32,128]{2,1,0} multiply(%add.5813, %add.5813)
  %reduce.1312 = f32[] reduce(%multiply.10354, %constant.5451), dimensions={0,1,2}, to_apply=%region_1602.39876
  %all-reduce.855 = f32[] all-reduce(%reduce.1312), channel_id=1306, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1602.39876.clone
  %add.7037 = f32[] add(%add.7036, %all-reduce.855)
  %multiply.10355 = f32[256,8,128]{2,1,0} multiply(%add.5820, %add.5820)
  %reduce.1313 = f32[] reduce(%multiply.10355, %constant.5451), dimensions={0,1,2}, to_apply=%region_1603.39883
  %all-reduce.856 = f32[] all-reduce(%reduce.1313), channel_id=1307, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1603.39883.clone
  %add.7038 = f32[] add(%add.7037, %all-reduce.856)
  %multiply.10356 = f32[256,14336]{1,0} multiply(%add.5826, %add.5826)
  %reduce.1315 = f32[] reduce(%multiply.10356, %constant.5451), dimensions={0,1}, to_apply=%region_1604.39890
  %all-reduce.857 = f32[] all-reduce(%reduce.1315), channel_id=1308, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1604.39890.clone
  %add.7039 = f32[] add(%add.7038, %all-reduce.857)
  %multiply.10357 = f32[256,14336]{1,0} multiply(%add.5831, %add.5831)
  %reduce.1316 = f32[] reduce(%multiply.10357, %constant.5451), dimensions={0,1}, to_apply=%region_1605.39897
  %all-reduce.858 = f32[] all-reduce(%reduce.1316), channel_id=1309, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1605.39897.clone
  %add.7040 = f32[] add(%add.7039, %all-reduce.858)
  %multiply.10358 = f32[14336,256]{1,0} multiply(%add.5836, %add.5836)
  %reduce.1317 = f32[] reduce(%multiply.10358, %constant.5451), dimensions={0,1}, to_apply=%region_1606.39904
  %all-reduce.859 = f32[] all-reduce(%reduce.1317), channel_id=1310, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1606.39904.clone
  %add.7041 = f32[] add(%add.7040, %all-reduce.859)
  %multiply.10359 = f32[4096]{0} multiply(%add.5841, %add.5841)
  %reduce.1318 = f32[] reduce(%multiply.10359, %constant.5451), dimensions={0}, to_apply=%region_1607.39911
  %add.7042 = f32[] add(%add.7041, %reduce.1318)
  %multiply.10360 = f32[4096]{0} multiply(%add.5846, %add.5846)
  %reduce.1319 = f32[] reduce(%multiply.10360, %constant.5451), dimensions={0}, to_apply=%region_1608.39918
  %add.7044 = f32[] add(%add.7042, %reduce.1319)
  %multiply.10361 = f32[256,8,128]{2,1,0} multiply(%add.5852, %add.5852)
  %reduce.1320 = f32[] reduce(%multiply.10361, %constant.5451), dimensions={0,1,2}, to_apply=%region_1609.39925
  %all-reduce.860 = f32[] all-reduce(%reduce.1320), channel_id=1311, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1609.39925.clone
  %add.7045 = f32[] add(%add.7044, %all-reduce.860)
  %multiply.10363 = f32[32,128,256]{2,1,0} multiply(%add.5858, %add.5858)
  %reduce.1321 = f32[] reduce(%multiply.10363, %constant.5451), dimensions={0,1,2}, to_apply=%region_1610.39932
  %all-reduce.861 = f32[] all-reduce(%reduce.1321), channel_id=1312, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1610.39932.clone
  %add.7046 = f32[] add(%add.7045, %all-reduce.861)
  %multiply.10364 = f32[256,32,128]{2,1,0} multiply(%add.5864, %add.5864)
  %reduce.1322 = f32[] reduce(%multiply.10364, %constant.5451), dimensions={0,1,2}, to_apply=%region_1611.39939
  %all-reduce.862 = f32[] all-reduce(%reduce.1322), channel_id=1313, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1611.39939.clone
  %add.7047 = f32[] add(%add.7046, %all-reduce.862)
  %multiply.10365 = f32[256,8,128]{2,1,0} multiply(%add.5869, %add.5869)
  %reduce.1323 = f32[] reduce(%multiply.10365, %constant.5451), dimensions={0,1,2}, to_apply=%region_1612.39946
  %all-reduce.863 = f32[] all-reduce(%reduce.1323), channel_id=1314, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1612.39946.clone
  %add.7048 = f32[] add(%add.7047, %all-reduce.863)
  %multiply.10366 = f32[256,14336]{1,0} multiply(%add.5874, %add.5874)
  %reduce.1324 = f32[] reduce(%multiply.10366, %constant.5451), dimensions={0,1}, to_apply=%region_1613.39953
  %all-reduce.864 = f32[] all-reduce(%reduce.1324), channel_id=1315, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1613.39953.clone
  %add.7049 = f32[] add(%add.7048, %all-reduce.864)
  %multiply.10368 = f32[256,14336]{1,0} multiply(%add.5879, %add.5879)
  %reduce.1325 = f32[] reduce(%multiply.10368, %constant.5451), dimensions={0,1}, to_apply=%region_1614.39960
  %all-reduce.865 = f32[] all-reduce(%reduce.1325), channel_id=1316, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1614.39960.clone
  %add.7050 = f32[] add(%add.7049, %all-reduce.865)
  %multiply.10369 = f32[14336,256]{1,0} multiply(%add.5884, %add.5884)
  %reduce.1326 = f32[] reduce(%multiply.10369, %constant.5451), dimensions={0,1}, to_apply=%region_1615.39967
  %all-reduce.866 = f32[] all-reduce(%reduce.1326), channel_id=1317, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1615.39967.clone
  %add.7051 = f32[] add(%add.7050, %all-reduce.866)
  %multiply.10370 = f32[4096]{0} multiply(%add.5889, %add.5889)
  %reduce.1327 = f32[] reduce(%multiply.10370, %constant.5451), dimensions={0}, to_apply=%region_1616.39974
  %add.7052 = f32[] add(%add.7051, %reduce.1327)
  %multiply.10371 = f32[4096]{0} multiply(%add.5894, %add.5894)
  %reduce.1328 = f32[] reduce(%multiply.10371, %constant.5451), dimensions={0}, to_apply=%region_1617.39981
  %add.7053 = f32[] add(%add.7052, %reduce.1328)
  %multiply.10372 = f32[256,8,128]{2,1,0} multiply(%add.5899, %add.5899)
  %reduce.1329 = f32[] reduce(%multiply.10372, %constant.5451), dimensions={0,1,2}, to_apply=%region_1618.39988
  %all-reduce.867 = f32[] all-reduce(%reduce.1329), channel_id=1318, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1618.39988.clone
  %add.7054 = f32[] add(%add.7053, %all-reduce.867)
  %multiply.10374 = f32[32,128,256]{2,1,0} multiply(%add.5904, %add.5904)
  %reduce.1330 = f32[] reduce(%multiply.10374, %constant.5451), dimensions={0,1,2}, to_apply=%region_1619.39995
  %all-reduce.868 = f32[] all-reduce(%reduce.1330), channel_id=1319, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1619.39995.clone
  %add.7055 = f32[] add(%add.7054, %all-reduce.868)
  %multiply.10375 = f32[256,32,128]{2,1,0} multiply(%add.5909, %add.5909)
  %reduce.1331 = f32[] reduce(%multiply.10375, %constant.5451), dimensions={0,1,2}, to_apply=%region_1620.40002
  %all-reduce.869 = f32[] all-reduce(%reduce.1331), channel_id=1320, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1620.40002.clone
  %add.7056 = f32[] add(%add.7055, %all-reduce.869)
  %multiply.10376 = f32[256,8,128]{2,1,0} multiply(%add.5914, %add.5914)
  %reduce.1333 = f32[] reduce(%multiply.10376, %constant.5451), dimensions={0,1,2}, to_apply=%region_1621.40009
  %all-reduce.870 = f32[] all-reduce(%reduce.1333), channel_id=1321, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1621.40009.clone
  %add.7057 = f32[] add(%add.7056, %all-reduce.870)
  %multiply.10377 = f32[256,14336]{1,0} multiply(%add.5919, %add.5919)
  %reduce.1334 = f32[] reduce(%multiply.10377, %constant.5451), dimensions={0,1}, to_apply=%region_1622.40016
  %all-reduce.871 = f32[] all-reduce(%reduce.1334), channel_id=1322, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1622.40016.clone
  %add.7058 = f32[] add(%add.7057, %all-reduce.871)
  %multiply.10378 = f32[256,14336]{1,0} multiply(%add.5925, %add.5925)
  %reduce.1335 = f32[] reduce(%multiply.10378, %constant.5451), dimensions={0,1}, to_apply=%region_1623.40023
  %all-reduce.872 = f32[] all-reduce(%reduce.1335), channel_id=1323, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1623.40023.clone
  %add.7059 = f32[] add(%add.7058, %all-reduce.872)
  %multiply.10379 = f32[14336,256]{1,0} multiply(%add.5930, %add.5930)
  %reduce.1336 = f32[] reduce(%multiply.10379, %constant.5451), dimensions={0,1}, to_apply=%region_1624.40030
  %all-reduce.873 = f32[] all-reduce(%reduce.1336), channel_id=1324, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1624.40030.clone
  %add.7060 = f32[] add(%add.7059, %all-reduce.873)
  %multiply.10380 = f32[4096]{0} multiply(%add.5935, %add.5935)
  %reduce.1337 = f32[] reduce(%multiply.10380, %constant.5451), dimensions={0}, to_apply=%region_1625.40037
  %add.7061 = f32[] add(%add.7060, %reduce.1337)
  %multiply.10381 = f32[4096]{0} multiply(%add.5940, %add.5940)
  %reduce.1338 = f32[] reduce(%multiply.10381, %constant.5451), dimensions={0}, to_apply=%region_1626.40044
  %add.7062 = f32[] add(%add.7061, %reduce.1338)
  %multiply.10382 = f32[256,8,128]{2,1,0} multiply(%add.5945, %add.5945)
  %reduce.1339 = f32[] reduce(%multiply.10382, %constant.5451), dimensions={0,1,2}, to_apply=%region_1627.40051
  %all-reduce.874 = f32[] all-reduce(%reduce.1339), channel_id=1325, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1627.40051.clone
  %add.7063 = f32[] add(%add.7062, %all-reduce.874)
  %multiply.10383 = f32[32,128,256]{2,1,0} multiply(%add.5950, %add.5950)
  %reduce.1340 = f32[] reduce(%multiply.10383, %constant.5451), dimensions={0,1,2}, to_apply=%region_1628.40058
  %all-reduce.875 = f32[] all-reduce(%reduce.1340), channel_id=1326, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1628.40058.clone
  %add.7064 = f32[] add(%add.7063, %all-reduce.875)
  %multiply.10384 = f32[256,32,128]{2,1,0} multiply(%add.5955, %add.5955)
  %reduce.1341 = f32[] reduce(%multiply.10384, %constant.5451), dimensions={0,1,2}, to_apply=%region_1629.40065
  %all-reduce.876 = f32[] all-reduce(%reduce.1341), channel_id=1327, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1629.40065.clone
  %add.7065 = f32[] add(%add.7064, %all-reduce.876)
  %multiply.10385 = f32[256,8,128]{2,1,0} multiply(%add.5960, %add.5960)
  %reduce.1342 = f32[] reduce(%multiply.10385, %constant.5451), dimensions={0,1,2}, to_apply=%region_1630.40072
  %all-reduce.877 = f32[] all-reduce(%reduce.1342), channel_id=1328, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1630.40072.clone
  %add.7066 = f32[] add(%add.7065, %all-reduce.877)
  %multiply.10386 = f32[256,14336]{1,0} multiply(%add.5966, %add.5966)
  %reduce.1343 = f32[] reduce(%multiply.10386, %constant.5451), dimensions={0,1}, to_apply=%region_1631.40079
  %all-reduce.878 = f32[] all-reduce(%reduce.1343), channel_id=1329, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1631.40079.clone
  %add.7067 = f32[] add(%add.7066, %all-reduce.878)
  %multiply.10387 = f32[256,14336]{1,0} multiply(%add.5971, %add.5971)
  %reduce.1344 = f32[] reduce(%multiply.10387, %constant.5451), dimensions={0,1}, to_apply=%region_1632.40086
  %all-reduce.879 = f32[] all-reduce(%reduce.1344), channel_id=1330, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1632.40086.clone
  %add.7068 = f32[] add(%add.7067, %all-reduce.879)
  %multiply.10388 = f32[14336,256]{1,0} multiply(%add.5976, %add.5976)
  %reduce.1345 = f32[] reduce(%multiply.10388, %constant.5451), dimensions={0,1}, to_apply=%region_1633.40093
  %all-reduce.880 = f32[] all-reduce(%reduce.1345), channel_id=1331, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1633.40093.clone
  %add.7069 = f32[] add(%add.7068, %all-reduce.880)
  %multiply.10389 = f32[4096]{0} multiply(%add.5981, %add.5981)
  %reduce.1346 = f32[] reduce(%multiply.10389, %constant.5451), dimensions={0}, to_apply=%region_1634.40100
  %add.7070 = f32[] add(%add.7069, %reduce.1346)
  %multiply.10390 = f32[4096]{0} multiply(%add.5986, %add.5986)
  %reduce.1347 = f32[] reduce(%multiply.10390, %constant.5451), dimensions={0}, to_apply=%region_1635.40107
  %add.7071 = f32[] add(%add.7070, %reduce.1347)
  %multiply.10391 = f32[256,8,128]{2,1,0} multiply(%add.5991, %add.5991)
  %reduce.1348 = f32[] reduce(%multiply.10391, %constant.5451), dimensions={0,1,2}, to_apply=%region_1636.40114
  %all-reduce.881 = f32[] all-reduce(%reduce.1348), channel_id=1332, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1636.40114.clone
  %add.7072 = f32[] add(%add.7071, %all-reduce.881)
  %multiply.10392 = f32[32,128,256]{2,1,0} multiply(%add.5996, %add.5996)
  %reduce.1349 = f32[] reduce(%multiply.10392, %constant.5451), dimensions={0,1,2}, to_apply=%region_1637.40121
  %all-reduce.882 = f32[] all-reduce(%reduce.1349), channel_id=1333, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1637.40121.clone
  %add.7073 = f32[] add(%add.7072, %all-reduce.882)
  %multiply.10394 = f32[256,32,128]{2,1,0} multiply(%add.6002, %add.6002)
  %reduce.1350 = f32[] reduce(%multiply.10394, %constant.5451), dimensions={0,1,2}, to_apply=%region_1638.40128
  %all-reduce.883 = f32[] all-reduce(%reduce.1350), channel_id=1334, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1638.40128.clone
  %add.7074 = f32[] add(%add.7073, %all-reduce.883)
  %multiply.10395 = f32[256,8,128]{2,1,0} multiply(%add.6007, %add.6007)
  %reduce.1351 = f32[] reduce(%multiply.10395, %constant.5451), dimensions={0,1,2}, to_apply=%region_1639.40135
  %all-reduce.884 = f32[] all-reduce(%reduce.1351), channel_id=1335, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1639.40135.clone
  %add.7075 = f32[] add(%add.7074, %all-reduce.884)
  %multiply.10396 = f32[256,14336]{1,0} multiply(%add.6012, %add.6012)
  %reduce.1352 = f32[] reduce(%multiply.10396, %constant.5451), dimensions={0,1}, to_apply=%region_1640.40142
  %all-reduce.885 = f32[] all-reduce(%reduce.1352), channel_id=1336, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1640.40142.clone
  %add.7076 = f32[] add(%add.7075, %all-reduce.885)
  %multiply.10397 = f32[256,14336]{1,0} multiply(%add.6017, %add.6017)
  %reduce.1353 = f32[] reduce(%multiply.10397, %constant.5451), dimensions={0,1}, to_apply=%region_1641.40149
  %all-reduce.886 = f32[] all-reduce(%reduce.1353), channel_id=1337, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1641.40149.clone
  %add.7077 = f32[] add(%add.7076, %all-reduce.886)
  %multiply.10398 = f32[14336,256]{1,0} multiply(%add.6022, %add.6022)
  %reduce.1354 = f32[] reduce(%multiply.10398, %constant.5451), dimensions={0,1}, to_apply=%region_1642.40156
  %all-reduce.887 = f32[] all-reduce(%reduce.1354), channel_id=1338, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1642.40156.clone
  %add.7078 = f32[] add(%add.7077, %all-reduce.887)
  %multiply.10399 = f32[4096]{0} multiply(%add.6027, %add.6027)
  %reduce.1355 = f32[] reduce(%multiply.10399, %constant.5451), dimensions={0}, to_apply=%region_1643.40163
  %add.7079 = f32[] add(%add.7078, %reduce.1355)
  %multiply.10400 = f32[4096]{0} multiply(%add.6032, %add.6032)
  %reduce.1356 = f32[] reduce(%multiply.10400, %constant.5451), dimensions={0}, to_apply=%region_1644.40170
  %add.7080 = f32[] add(%add.7079, %reduce.1356)
  %multiply.10401 = f32[256,8,128]{2,1,0} multiply(%add.6038, %add.6038)
  %reduce.1357 = f32[] reduce(%multiply.10401, %constant.5451), dimensions={0,1,2}, to_apply=%region_1645.40177
  %all-reduce.888 = f32[] all-reduce(%reduce.1357), channel_id=1339, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1645.40177.clone
  %add.7082 = f32[] add(%add.7080, %all-reduce.888)
  %multiply.10402 = f32[32,128,256]{2,1,0} multiply(%add.6043, %add.6043)
  %reduce.1358 = f32[] reduce(%multiply.10402, %constant.5451), dimensions={0,1,2}, to_apply=%region_1646.40184
  %all-reduce.889 = f32[] all-reduce(%reduce.1358), channel_id=1340, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1646.40184.clone
  %add.7083 = f32[] add(%add.7082, %all-reduce.889)
  %multiply.10403 = f32[256,32,128]{2,1,0} multiply(%add.6048, %add.6048)
  %reduce.1359 = f32[] reduce(%multiply.10403, %constant.5451), dimensions={0,1,2}, to_apply=%region_1647.40191
  %all-reduce.890 = f32[] all-reduce(%reduce.1359), channel_id=1341, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1647.40191.clone
  %add.7084 = f32[] add(%add.7083, %all-reduce.890)
  %multiply.10404 = f32[256,8,128]{2,1,0} multiply(%add.6053, %add.6053)
  %reduce.1360 = f32[] reduce(%multiply.10404, %constant.5451), dimensions={0,1,2}, to_apply=%region_1648.40198
  %all-reduce.891 = f32[] all-reduce(%reduce.1360), channel_id=1342, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1648.40198.clone
  %add.7085 = f32[] add(%add.7084, %all-reduce.891)
  %multiply.10405 = f32[256,14336]{1,0} multiply(%add.6058, %add.6058)
  %reduce.1361 = f32[] reduce(%multiply.10405, %constant.5451), dimensions={0,1}, to_apply=%region_1649.40205
  %all-reduce.892 = f32[] all-reduce(%reduce.1361), channel_id=1343, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1649.40205.clone
  %add.7086 = f32[] add(%add.7085, %all-reduce.892)
  %multiply.10406 = f32[256,14336]{1,0} multiply(%add.6063, %add.6063)
  %reduce.1362 = f32[] reduce(%multiply.10406, %constant.5451), dimensions={0,1}, to_apply=%region_1650.40212
  %all-reduce.893 = f32[] all-reduce(%reduce.1362), channel_id=1344, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1650.40212.clone
  %add.7087 = f32[] add(%add.7086, %all-reduce.893)
  %multiply.10407 = f32[14336,256]{1,0} multiply(%add.6069, %add.6069)
  %reduce.1363 = f32[] reduce(%multiply.10407, %constant.5451), dimensions={0,1}, to_apply=%region_1651.40219
  %all-reduce.894 = f32[] all-reduce(%reduce.1363), channel_id=1345, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1651.40219.clone
  %add.7088 = f32[] add(%add.7087, %all-reduce.894)
  %multiply.10408 = f32[4096]{0} multiply(%add.6074, %add.6074)
  %reduce.1364 = f32[] reduce(%multiply.10408, %constant.5451), dimensions={0}, to_apply=%region_1652.40226
  %add.7089 = f32[] add(%add.7088, %reduce.1364)
  %multiply.10410 = f32[4096]{0} multiply(%add.6080, %add.6080)
  %reduce.1365 = f32[] reduce(%multiply.10410, %constant.5451), dimensions={0}, to_apply=%region_1653.40233
  %add.7090 = f32[] add(%add.7089, %reduce.1365)
  %multiply.10412 = f32[256,8,128]{2,1,0} multiply(%add.6085, %add.6085)
  %reduce.1366 = f32[] reduce(%multiply.10412, %constant.5451), dimensions={0,1,2}, to_apply=%region_1654.40240
  %all-reduce.895 = f32[] all-reduce(%reduce.1366), channel_id=1346, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1654.40240.clone
  %add.7091 = f32[] add(%add.7090, %all-reduce.895)
  %multiply.10413 = f32[32,128,256]{2,1,0} multiply(%add.6090, %add.6090)
  %reduce.1367 = f32[] reduce(%multiply.10413, %constant.5451), dimensions={0,1,2}, to_apply=%region_1655.40247
  %all-reduce.896 = f32[] all-reduce(%reduce.1367), channel_id=1347, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1655.40247.clone
  %add.7092 = f32[] add(%add.7091, %all-reduce.896)
  %multiply.10414 = f32[256,32,128]{2,1,0} multiply(%add.6096, %add.6096)
  %reduce.1368 = f32[] reduce(%multiply.10414, %constant.5451), dimensions={0,1,2}, to_apply=%region_1656.40254
  %all-reduce.897 = f32[] all-reduce(%reduce.1368), channel_id=1348, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1656.40254.clone
  %add.7093 = f32[] add(%add.7092, %all-reduce.897)
  %multiply.10415 = f32[256,8,128]{2,1,0} multiply(%add.6102, %add.6102)
  %reduce.1369 = f32[] reduce(%multiply.10415, %constant.5451), dimensions={0,1,2}, to_apply=%region_1657.40261
  %all-reduce.898 = f32[] all-reduce(%reduce.1369), channel_id=1349, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1657.40261.clone
  %add.7094 = f32[] add(%add.7093, %all-reduce.898)
  %multiply.10416 = f32[256,14336]{1,0} multiply(%add.6108, %add.6108)
  %reduce.1370 = f32[] reduce(%multiply.10416, %constant.5451), dimensions={0,1}, to_apply=%region_1658.40268
  %all-reduce.899 = f32[] all-reduce(%reduce.1370), channel_id=1350, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1658.40268.clone
  %add.7095 = f32[] add(%add.7094, %all-reduce.899)
  %multiply.10417 = f32[256,14336]{1,0} multiply(%add.6113, %add.6113)
  %reduce.1371 = f32[] reduce(%multiply.10417, %constant.5451), dimensions={0,1}, to_apply=%region_1659.40275
  %all-reduce.900 = f32[] all-reduce(%reduce.1371), channel_id=1351, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1659.40275.clone
  %add.7096 = f32[] add(%add.7095, %all-reduce.900)
  %multiply.10418 = f32[14336,256]{1,0} multiply(%add.6118, %add.6118)
  %reduce.1372 = f32[] reduce(%multiply.10418, %constant.5451), dimensions={0,1}, to_apply=%region_1660.40282
  %all-reduce.901 = f32[] all-reduce(%reduce.1372), channel_id=1352, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1660.40282.clone
  %add.7097 = f32[] add(%add.7096, %all-reduce.901)
  %multiply.10419 = f32[4096]{0} multiply(%add.6123, %add.6123)
  %reduce.1373 = f32[] reduce(%multiply.10419, %constant.5451), dimensions={0}, to_apply=%region_1661.40289
  %add.7098 = f32[] add(%add.7097, %reduce.1373)
  %multiply.10420 = f32[4096]{0} multiply(%add.6128, %add.6128)
  %reduce.1374 = f32[] reduce(%multiply.10420, %constant.5451), dimensions={0}, to_apply=%region_1662.40296
  %add.7099 = f32[] add(%add.7098, %reduce.1374)
  %multiply.10421 = f32[256,8,128]{2,1,0} multiply(%add.6134, %add.6134)
  %reduce.1375 = f32[] reduce(%multiply.10421, %constant.5451), dimensions={0,1,2}, to_apply=%region_1663.40303
  %all-reduce.902 = f32[] all-reduce(%reduce.1375), channel_id=1353, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1663.40303.clone
  %add.7100 = f32[] add(%add.7099, %all-reduce.902)
  %multiply.10422 = f32[32,128,256]{2,1,0} multiply(%add.6140, %add.6140)
  %reduce.1376 = f32[] reduce(%multiply.10422, %constant.5451), dimensions={0,1,2}, to_apply=%region_1664.40310
  %all-reduce.903 = f32[] all-reduce(%reduce.1376), channel_id=1354, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1664.40310.clone
  %add.7101 = f32[] add(%add.7100, %all-reduce.903)
  %multiply.10423 = f32[256,32,128]{2,1,0} multiply(%add.6146, %add.6146)
  %reduce.1377 = f32[] reduce(%multiply.10423, %constant.5451), dimensions={0,1,2}, to_apply=%region_1665.40317
  %all-reduce.904 = f32[] all-reduce(%reduce.1377), channel_id=1355, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1665.40317.clone
  %add.7102 = f32[] add(%add.7101, %all-reduce.904)
  %multiply.10424 = f32[256,8,128]{2,1,0} multiply(%add.6151, %add.6151)
  %reduce.1378 = f32[] reduce(%multiply.10424, %constant.5451), dimensions={0,1,2}, to_apply=%region_1666.40324
  %all-reduce.905 = f32[] all-reduce(%reduce.1378), channel_id=1356, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1666.40324.clone
  %add.7103 = f32[] add(%add.7102, %all-reduce.905)
  %multiply.10425 = f32[256,14336]{1,0} multiply(%add.6156, %add.6156)
  %reduce.1380 = f32[] reduce(%multiply.10425, %constant.5451), dimensions={0,1}, to_apply=%region_1667.40331
  %all-reduce.906 = f32[] all-reduce(%reduce.1380), channel_id=1357, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1667.40331.clone
  %add.7104 = f32[] add(%add.7103, %all-reduce.906)
  %multiply.10426 = f32[256,14336]{1,0} multiply(%add.6161, %add.6161)
  %reduce.1381 = f32[] reduce(%multiply.10426, %constant.5451), dimensions={0,1}, to_apply=%region_1668.40338
  %all-reduce.907 = f32[] all-reduce(%reduce.1381), channel_id=1358, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1668.40338.clone
  %add.7105 = f32[] add(%add.7104, %all-reduce.907)
  %multiply.10427 = f32[14336,256]{1,0} multiply(%add.6166, %add.6166)
  %reduce.1382 = f32[] reduce(%multiply.10427, %constant.5451), dimensions={0,1}, to_apply=%region_1669.40345
  %all-reduce.908 = f32[] all-reduce(%reduce.1382), channel_id=1359, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1669.40345.clone
  %add.7106 = f32[] add(%add.7105, %all-reduce.908)
  %multiply.10428 = f32[4096]{0} multiply(%add.6171, %add.6171)
  %reduce.1383 = f32[] reduce(%multiply.10428, %constant.5451), dimensions={0}, to_apply=%region_1670.40352
  %add.7107 = f32[] add(%add.7106, %reduce.1383)
  %multiply.10429 = f32[4096]{0} multiply(%add.6176, %add.6176)
  %reduce.1384 = f32[] reduce(%multiply.10429, %constant.5451), dimensions={0}, to_apply=%region_1671.40359
  %add.7108 = f32[] add(%add.7107, %reduce.1384)
  %multiply.10430 = f32[256,8,128]{2,1,0} multiply(%add.6181, %add.6181)
  %reduce.1385 = f32[] reduce(%multiply.10430, %constant.5451), dimensions={0,1,2}, to_apply=%region_1672.40366
  %all-reduce.909 = f32[] all-reduce(%reduce.1385), channel_id=1360, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1672.40366.clone
  %add.7109 = f32[] add(%add.7108, %all-reduce.909)
  %multiply.10431 = f32[32,128,256]{2,1,0} multiply(%add.6186, %add.6186)
  %reduce.1386 = f32[] reduce(%multiply.10431, %constant.5451), dimensions={0,1,2}, to_apply=%region_1673.40373
  %all-reduce.910 = f32[] all-reduce(%reduce.1386), channel_id=1361, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1673.40373.clone
  %add.7110 = f32[] add(%add.7109, %all-reduce.910)
  %multiply.10432 = f32[256,32,128]{2,1,0} multiply(%add.6191, %add.6191)
  %reduce.1387 = f32[] reduce(%multiply.10432, %constant.5451), dimensions={0,1,2}, to_apply=%region_1674.40380
  %all-reduce.911 = f32[] all-reduce(%reduce.1387), channel_id=1362, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1674.40380.clone
  %add.7111 = f32[] add(%add.7110, %all-reduce.911)
  %multiply.10433 = f32[256,8,128]{2,1,0} multiply(%add.6196, %add.6196)
  %reduce.1388 = f32[] reduce(%multiply.10433, %constant.5451), dimensions={0,1,2}, to_apply=%region_1675.40387
  %all-reduce.912 = f32[] all-reduce(%reduce.1388), channel_id=1363, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1675.40387.clone
  %add.7112 = f32[] add(%add.7111, %all-reduce.912)
  %multiply.10434 = f32[256,14336]{1,0} multiply(%add.6201, %add.6201)
  %reduce.1389 = f32[] reduce(%multiply.10434, %constant.5451), dimensions={0,1}, to_apply=%region_1676.40394
  %all-reduce.913 = f32[] all-reduce(%reduce.1389), channel_id=1364, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1676.40394.clone
  %add.7113 = f32[] add(%add.7112, %all-reduce.913)
  %multiply.10435 = f32[256,14336]{1,0} multiply(%add.6207, %add.6207)
  %reduce.1390 = f32[] reduce(%multiply.10435, %constant.5451), dimensions={0,1}, to_apply=%region_1677.40401
  %all-reduce.914 = f32[] all-reduce(%reduce.1390), channel_id=1365, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1677.40401.clone
  %add.7114 = f32[] add(%add.7113, %all-reduce.914)
  %multiply.10436 = f32[14336,256]{1,0} multiply(%add.6212, %add.6212)
  %reduce.1391 = f32[] reduce(%multiply.10436, %constant.5451), dimensions={0,1}, to_apply=%region_1678.40408
  %all-reduce.915 = f32[] all-reduce(%reduce.1391), channel_id=1366, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1678.40408.clone
  %add.7115 = f32[] add(%add.7114, %all-reduce.915)
  %multiply.10437 = f32[4096]{0} multiply(%add.6217, %add.6217)
  %reduce.1392 = f32[] reduce(%multiply.10437, %constant.5451), dimensions={0}, to_apply=%region_1679.40415
  %add.7116 = f32[] add(%add.7115, %reduce.1392)
  %multiply.10438 = f32[4096]{0} multiply(%add.6222, %add.6222)
  %reduce.1393 = f32[] reduce(%multiply.10438, %constant.5451), dimensions={0}, to_apply=%region_1680.40422
  %add.7117 = f32[] add(%add.7116, %reduce.1393)
  %multiply.10440 = f32[256,8,128]{2,1,0} multiply(%add.6227, %add.6227)
  %reduce.1394 = f32[] reduce(%multiply.10440, %constant.5451), dimensions={0,1,2}, to_apply=%region_1681.40429
  %all-reduce.916 = f32[] all-reduce(%reduce.1394), channel_id=1367, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1681.40429.clone
  %add.7118 = f32[] add(%add.7117, %all-reduce.916)
  %multiply.10441 = f32[32,128,256]{2,1,0} multiply(%add.6232, %add.6232)
  %reduce.1395 = f32[] reduce(%multiply.10441, %constant.5451), dimensions={0,1,2}, to_apply=%region_1682.40436
  %all-reduce.917 = f32[] all-reduce(%reduce.1395), channel_id=1368, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1682.40436.clone
  %add.7120 = f32[] add(%add.7118, %all-reduce.917)
  %multiply.10442 = f32[256,32,128]{2,1,0} multiply(%add.6237, %add.6237)
  %reduce.1396 = f32[] reduce(%multiply.10442, %constant.5451), dimensions={0,1,2}, to_apply=%region_1683.40443
  %all-reduce.918 = f32[] all-reduce(%reduce.1396), channel_id=1369, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1683.40443.clone
  %add.7121 = f32[] add(%add.7120, %all-reduce.918)
  %multiply.10443 = f32[256,8,128]{2,1,0} multiply(%add.6243, %add.6243)
  %reduce.1397 = f32[] reduce(%multiply.10443, %constant.5451), dimensions={0,1,2}, to_apply=%region_1684.40450
  %all-reduce.919 = f32[] all-reduce(%reduce.1397), channel_id=1370, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1684.40450.clone
  %add.7122 = f32[] add(%add.7121, %all-reduce.919)
  %multiply.10445 = f32[256,14336]{1,0} multiply(%add.6248, %add.6248)
  %reduce.1398 = f32[] reduce(%multiply.10445, %constant.5451), dimensions={0,1}, to_apply=%region_1685.40457
  %all-reduce.920 = f32[] all-reduce(%reduce.1398), channel_id=1371, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1685.40457.clone
  %add.7123 = f32[] add(%add.7122, %all-reduce.920)
  %multiply.10446 = f32[256,14336]{1,0} multiply(%add.6253, %add.6253)
  %reduce.1399 = f32[] reduce(%multiply.10446, %constant.5451), dimensions={0,1}, to_apply=%region_1686.40464
  %all-reduce.921 = f32[] all-reduce(%reduce.1399), channel_id=1372, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1686.40464.clone
  %add.7124 = f32[] add(%add.7123, %all-reduce.921)
  %multiply.10447 = f32[14336,256]{1,0} multiply(%add.6258, %add.6258)
  %reduce.1400 = f32[] reduce(%multiply.10447, %constant.5451), dimensions={0,1}, to_apply=%region_1687.40471
  %all-reduce.922 = f32[] all-reduce(%reduce.1400), channel_id=1373, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1687.40471.clone
  %add.7125 = f32[] add(%add.7124, %all-reduce.922)
  %multiply.10448 = f32[4096]{0} multiply(%add.6263, %add.6263)
  %reduce.1401 = f32[] reduce(%multiply.10448, %constant.5451), dimensions={0}, to_apply=%region_1688.40478
  %add.7126 = f32[] add(%add.7125, %reduce.1401)
  %multiply.10449 = f32[4096]{0} multiply(%add.6268, %add.6268)
  %reduce.1402 = f32[] reduce(%multiply.10449, %constant.5451), dimensions={0}, to_apply=%region_1689.40485
  %add.7127 = f32[] add(%add.7126, %reduce.1402)
  %multiply.10451 = f32[256,8,128]{2,1,0} multiply(%add.6273, %add.6273)
  %reduce.1403 = f32[] reduce(%multiply.10451, %constant.5451), dimensions={0,1,2}, to_apply=%region_1690.40492
  %all-reduce.923 = f32[] all-reduce(%reduce.1403), channel_id=1374, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1690.40492.clone
  %add.7128 = f32[] add(%add.7127, %all-reduce.923)
  %multiply.10452 = f32[32,128,256]{2,1,0} multiply(%add.6278, %add.6278)
  %reduce.1404 = f32[] reduce(%multiply.10452, %constant.5451), dimensions={0,1,2}, to_apply=%region_1691.40499
  %all-reduce.924 = f32[] all-reduce(%reduce.1404), channel_id=1375, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1691.40499.clone
  %add.7129 = f32[] add(%add.7128, %all-reduce.924)
  %multiply.10453 = f32[256,32,128]{2,1,0} multiply(%add.6284, %add.6284)
  %reduce.1405 = f32[] reduce(%multiply.10453, %constant.5451), dimensions={0,1,2}, to_apply=%region_1692.40506
  %all-reduce.925 = f32[] all-reduce(%reduce.1405), channel_id=1376, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1692.40506.clone
  %add.7130 = f32[] add(%add.7129, %all-reduce.925)
  %multiply.10454 = f32[256,8,128]{2,1,0} multiply(%add.6289, %add.6289)
  %reduce.1406 = f32[] reduce(%multiply.10454, %constant.5451), dimensions={0,1,2}, to_apply=%region_1693.40513
  %all-reduce.926 = f32[] all-reduce(%reduce.1406), channel_id=1377, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1693.40513.clone
  %add.7131 = f32[] add(%add.7130, %all-reduce.926)
  %multiply.10455 = f32[256,14336]{1,0} multiply(%add.6294, %add.6294)
  %reduce.1407 = f32[] reduce(%multiply.10455, %constant.5451), dimensions={0,1}, to_apply=%region_1694.40520
  %all-reduce.927 = f32[] all-reduce(%reduce.1407), channel_id=1378, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1694.40520.clone
  %add.7132 = f32[] add(%add.7131, %all-reduce.927)
  %multiply.10456 = f32[256,14336]{1,0} multiply(%add.6299, %add.6299)
  %reduce.1408 = f32[] reduce(%multiply.10456, %constant.5451), dimensions={0,1}, to_apply=%region_1695.40527
  %all-reduce.928 = f32[] all-reduce(%reduce.1408), channel_id=1379, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1695.40527.clone
  %add.7133 = f32[] add(%add.7132, %all-reduce.928)
  %multiply.10457 = f32[14336,256]{1,0} multiply(%add.6304, %add.6304)
  %reduce.1409 = f32[] reduce(%multiply.10457, %constant.5451), dimensions={0,1}, to_apply=%region_1696.40534
  %all-reduce.929 = f32[] all-reduce(%reduce.1409), channel_id=1380, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1696.40534.clone
  %add.7134 = f32[] add(%add.7133, %all-reduce.929)
  %multiply.10458 = f32[4096]{0} multiply(%add.6309, %add.6309)
  %reduce.1410 = f32[] reduce(%multiply.10458, %constant.5451), dimensions={0}, to_apply=%region_1697.40541
  %add.7135 = f32[] add(%add.7134, %reduce.1410)
  %multiply.10459 = f32[4096]{0} multiply(%add.6314, %add.6314)
  %reduce.1411 = f32[] reduce(%multiply.10459, %constant.5451), dimensions={0}, to_apply=%region_1698.40548
  %add.7136 = f32[] add(%add.7135, %reduce.1411)
  %multiply.10460 = f32[256,8,128]{2,1,0} multiply(%add.6320, %add.6320)
  %reduce.1412 = f32[] reduce(%multiply.10460, %constant.5451), dimensions={0,1,2}, to_apply=%region_1699.40555
  %all-reduce.930 = f32[] all-reduce(%reduce.1412), channel_id=1381, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1699.40555.clone
  %add.7137 = f32[] add(%add.7136, %all-reduce.930)
  %multiply.10461 = f32[32,128,256]{2,1,0} multiply(%add.6325, %add.6325)
  %reduce.1413 = f32[] reduce(%multiply.10461, %constant.5451), dimensions={0,1,2}, to_apply=%region_1700.40562
  %all-reduce.931 = f32[] all-reduce(%reduce.1413), channel_id=1382, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1700.40562.clone
  %add.7138 = f32[] add(%add.7137, %all-reduce.931)
  %multiply.10462 = f32[256,32,128]{2,1,0} multiply(%add.6330, %add.6330)
  %reduce.1414 = f32[] reduce(%multiply.10462, %constant.5451), dimensions={0,1,2}, to_apply=%region_1701.40569
  %all-reduce.932 = f32[] all-reduce(%reduce.1414), channel_id=1383, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1701.40569.clone
  %add.7139 = f32[] add(%add.7138, %all-reduce.932)
  %multiply.10463 = f32[256,8,128]{2,1,0} multiply(%add.6335, %add.6335)
  %reduce.1415 = f32[] reduce(%multiply.10463, %constant.5451), dimensions={0,1,2}, to_apply=%region_1702.40576
  %all-reduce.933 = f32[] all-reduce(%reduce.1415), channel_id=1384, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1702.40576.clone
  %add.7140 = f32[] add(%add.7139, %all-reduce.933)
  %multiply.10464 = f32[256,14336]{1,0} multiply(%add.6340, %add.6340)
  %reduce.1416 = f32[] reduce(%multiply.10464, %constant.5451), dimensions={0,1}, to_apply=%region_1703.40583
  %all-reduce.934 = f32[] all-reduce(%reduce.1416), channel_id=1385, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1703.40583.clone
  %add.7141 = f32[] add(%add.7140, %all-reduce.934)
  %multiply.10465 = f32[256,14336]{1,0} multiply(%add.6345, %add.6345)
  %reduce.1417 = f32[] reduce(%multiply.10465, %constant.5451), dimensions={0,1}, to_apply=%region_1704.40590
  %all-reduce.935 = f32[] all-reduce(%reduce.1417), channel_id=1386, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1704.40590.clone
  %add.7142 = f32[] add(%add.7141, %all-reduce.935)
  %multiply.10466 = f32[14336,256]{1,0} multiply(%add.6351, %add.6351)
  %reduce.1418 = f32[] reduce(%multiply.10466, %constant.5451), dimensions={0,1}, to_apply=%region_1705.40597
  %all-reduce.936 = f32[] all-reduce(%reduce.1418), channel_id=1387, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1705.40597.clone
  %add.7143 = f32[] add(%add.7142, %all-reduce.936)
  %multiply.10467 = f32[4096]{0} multiply(%add.6357, %add.6357)
  %reduce.1419 = f32[] reduce(%multiply.10467, %constant.5451), dimensions={0}, to_apply=%region_1706.40604
  %add.7144 = f32[] add(%add.7143, %reduce.1419)
  %multiply.10468 = f32[4096]{0} multiply(%add.6362, %add.6362)
  %reduce.1420 = f32[] reduce(%multiply.10468, %constant.5451), dimensions={0}, to_apply=%region_1707.40611
  %add.7145 = f32[] add(%add.7144, %reduce.1420)
  %multiply.10469 = f32[256,8,128]{2,1,0} multiply(%add.6367, %add.6367)
  %reduce.1421 = f32[] reduce(%multiply.10469, %constant.5451), dimensions={0,1,2}, to_apply=%region_1708.40618
  %all-reduce.937 = f32[] all-reduce(%reduce.1421), channel_id=1388, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1708.40618.clone
  %add.7146 = f32[] add(%add.7145, %all-reduce.937)
  %multiply.10470 = f32[32,128,256]{2,1,0} multiply(%add.6372, %add.6372)
  %reduce.1422 = f32[] reduce(%multiply.10470, %constant.5451), dimensions={0,1,2}, to_apply=%region_1709.40625
  %all-reduce.938 = f32[] all-reduce(%reduce.1422), channel_id=1389, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1709.40625.clone
  %add.7147 = f32[] add(%add.7146, %all-reduce.938)
  %multiply.10471 = f32[256,32,128]{2,1,0} multiply(%add.6378, %add.6378)
  %reduce.1423 = f32[] reduce(%multiply.10471, %constant.5451), dimensions={0,1,2}, to_apply=%region_1710.40632
  %all-reduce.939 = f32[] all-reduce(%reduce.1423), channel_id=1390, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1710.40632.clone
  %add.7148 = f32[] add(%add.7147, %all-reduce.939)
  %multiply.10472 = f32[256,8,128]{2,1,0} multiply(%add.6385, %add.6385)
  %reduce.1424 = f32[] reduce(%multiply.10472, %constant.5451), dimensions={0,1,2}, to_apply=%region_1711.40639
  %all-reduce.940 = f32[] all-reduce(%reduce.1424), channel_id=1391, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1711.40639.clone
  %add.7149 = f32[] add(%add.7148, %all-reduce.940)
  %multiply.10473 = f32[256,14336]{1,0} multiply(%add.6390, %add.6390)
  %reduce.1425 = f32[] reduce(%multiply.10473, %constant.5451), dimensions={0,1}, to_apply=%region_1712.40646
  %all-reduce.941 = f32[] all-reduce(%reduce.1425), channel_id=1392, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1712.40646.clone
  %add.7150 = f32[] add(%add.7149, %all-reduce.941)
  %multiply.10474 = f32[256,14336]{1,0} multiply(%add.6395, %add.6395)
  %reduce.1426 = f32[] reduce(%multiply.10474, %constant.5451), dimensions={0,1}, to_apply=%region_1713.40653
  %all-reduce.942 = f32[] all-reduce(%reduce.1426), channel_id=1393, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1713.40653.clone
  %add.7151 = f32[] add(%add.7150, %all-reduce.942)
  %multiply.10475 = f32[14336,256]{1,0} multiply(%add.6400, %add.6400)
  %reduce.1427 = f32[] reduce(%multiply.10475, %constant.5451), dimensions={0,1}, to_apply=%region_1714.40660
  %all-reduce.943 = f32[] all-reduce(%reduce.1427), channel_id=1394, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1714.40660.clone
  %add.7152 = f32[] add(%add.7151, %all-reduce.943)
  %multiply.10476 = f32[4096]{0} multiply(%add.6405, %add.6405)
  %reduce.1428 = f32[] reduce(%multiply.10476, %constant.5451), dimensions={0}, to_apply=%region_1715.40667
  %add.7153 = f32[] add(%add.7152, %reduce.1428)
  %multiply.10477 = f32[4096]{0} multiply(%add.6411, %add.6411)
  %reduce.1429 = f32[] reduce(%multiply.10477, %constant.5451), dimensions={0}, to_apply=%region_1716.40674
  %add.7154 = f32[] add(%add.7153, %reduce.1429)
  %multiply.10478 = f32[256,8,128]{2,1,0} multiply(%add.6416, %add.6416)
  %reduce.1430 = f32[] reduce(%multiply.10478, %constant.5451), dimensions={0,1,2}, to_apply=%region_1717.40681
  %all-reduce.944 = f32[] all-reduce(%reduce.1430), channel_id=1395, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1717.40681.clone
  %add.7155 = f32[] add(%add.7154, %all-reduce.944)
  %multiply.10479 = f32[32,128,256]{2,1,0} multiply(%add.6423, %add.6423)
  %reduce.1431 = f32[] reduce(%multiply.10479, %constant.5451), dimensions={0,1,2}, to_apply=%region_1718.40688
  %all-reduce.945 = f32[] all-reduce(%reduce.1431), channel_id=1396, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1718.40688.clone
  %add.7156 = f32[] add(%add.7155, %all-reduce.945)
  %multiply.10480 = f32[256,32,128]{2,1,0} multiply(%add.6428, %add.6428)
  %reduce.1432 = f32[] reduce(%multiply.10480, %constant.5451), dimensions={0,1,2}, to_apply=%region_1719.40695
  %all-reduce.946 = f32[] all-reduce(%reduce.1432), channel_id=1397, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1719.40695.clone
  %add.7158 = f32[] add(%add.7156, %all-reduce.946)
  %multiply.10481 = f32[256,8,128]{2,1,0} multiply(%add.6433, %add.6433)
  %reduce.1433 = f32[] reduce(%multiply.10481, %constant.5451), dimensions={0,1,2}, to_apply=%region_1720.40702
  %all-reduce.947 = f32[] all-reduce(%reduce.1433), channel_id=1398, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1720.40702.clone
  %add.7159 = f32[] add(%add.7158, %all-reduce.947)
  %multiply.10482 = f32[256,14336]{1,0} multiply(%add.6438, %add.6438)
  %reduce.1434 = f32[] reduce(%multiply.10482, %constant.5451), dimensions={0,1}, to_apply=%region_1721.40709
  %all-reduce.948 = f32[] all-reduce(%reduce.1434), channel_id=1399, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1721.40709.clone
  %add.7160 = f32[] add(%add.7159, %all-reduce.948)
  %multiply.10483 = f32[256,14336]{1,0} multiply(%add.6443, %add.6443)
  %reduce.1435 = f32[] reduce(%multiply.10483, %constant.5451), dimensions={0,1}, to_apply=%region_1722.40716
  %all-reduce.949 = f32[] all-reduce(%reduce.1435), channel_id=1400, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1722.40716.clone
  %add.7161 = f32[] add(%add.7160, %all-reduce.949)
  %multiply.10484 = f32[14336,256]{1,0} multiply(%add.6448, %add.6448)
  %reduce.1436 = f32[] reduce(%multiply.10484, %constant.5451), dimensions={0,1}, to_apply=%region_1723.40723
  %all-reduce.950 = f32[] all-reduce(%reduce.1436), channel_id=1401, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1723.40723.clone
  %add.7162 = f32[] add(%add.7161, %all-reduce.950)
  %multiply.10485 = f32[4096]{0} multiply(%add.6453, %add.6453)
  %reduce.1437 = f32[] reduce(%multiply.10485, %constant.5451), dimensions={0}, to_apply=%region_1724.40730
  %add.7163 = f32[] add(%add.7162, %reduce.1437)
  %multiply.10486 = f32[4096]{0} multiply(%add.6458, %add.6458)
  %reduce.1438 = f32[] reduce(%multiply.10486, %constant.5451), dimensions={0}, to_apply=%region_1725.40737
  %add.7164 = f32[] add(%add.7163, %reduce.1438)
  %multiply.10487 = f32[256,8,128]{2,1,0} multiply(%add.6463, %add.6463)
  %reduce.1439 = f32[] reduce(%multiply.10487, %constant.5451), dimensions={0,1,2}, to_apply=%region_1726.40744
  %all-reduce.951 = f32[] all-reduce(%reduce.1439), channel_id=1402, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1726.40744.clone
  %add.7165 = f32[] add(%add.7164, %all-reduce.951)
  %multiply.10488 = f32[32,128,256]{2,1,0} multiply(%add.6468, %add.6468)
  %reduce.1440 = f32[] reduce(%multiply.10488, %constant.5451), dimensions={0,1,2}, to_apply=%region_1727.40751
  %all-reduce.952 = f32[] all-reduce(%reduce.1440), channel_id=1403, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1727.40751.clone
  %add.7166 = f32[] add(%add.7165, %all-reduce.952)
  %multiply.10489 = f32[256,32,128]{2,1,0} multiply(%add.6473, %add.6473)
  %reduce.1441 = f32[] reduce(%multiply.10489, %constant.5451), dimensions={0,1,2}, to_apply=%region_1728.40758
  %all-reduce.953 = f32[] all-reduce(%reduce.1441), channel_id=1404, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1728.40758.clone
  %add.7167 = f32[] add(%add.7166, %all-reduce.953)
  %multiply.10490 = f32[256,8,128]{2,1,0} multiply(%add.6478, %add.6478)
  %reduce.1442 = f32[] reduce(%multiply.10490, %constant.5451), dimensions={0,1,2}, to_apply=%region_1729.40765
  %all-reduce.954 = f32[] all-reduce(%reduce.1442), channel_id=1405, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1729.40765.clone
  %add.7168 = f32[] add(%add.7167, %all-reduce.954)
  %multiply.10491 = f32[256,14336]{1,0} multiply(%add.6484, %add.6484)
  %reduce.1443 = f32[] reduce(%multiply.10491, %constant.5451), dimensions={0,1}, to_apply=%region_1730.40772
  %all-reduce.955 = f32[] all-reduce(%reduce.1443), channel_id=1406, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1730.40772.clone
  %add.7169 = f32[] add(%add.7168, %all-reduce.955)
  %multiply.10492 = f32[256,14336]{1,0} multiply(%add.6489, %add.6489)
  %reduce.1444 = f32[] reduce(%multiply.10492, %constant.5451), dimensions={0,1}, to_apply=%region_1731.40779
  %all-reduce.956 = f32[] all-reduce(%reduce.1444), channel_id=1407, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1731.40779.clone
  %add.7170 = f32[] add(%add.7169, %all-reduce.956)
  %multiply.10493 = f32[14336,256]{1,0} multiply(%add.6494, %add.6494)
  %reduce.1445 = f32[] reduce(%multiply.10493, %constant.5451), dimensions={0,1}, to_apply=%region_1732.40786
  %all-reduce.957 = f32[] all-reduce(%reduce.1445), channel_id=1408, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1732.40786.clone
  %add.7171 = f32[] add(%add.7170, %all-reduce.957)
  %multiply.10494 = f32[4096]{0} multiply(%add.6499, %add.6499)
  %reduce.1446 = f32[] reduce(%multiply.10494, %constant.5451), dimensions={0}, to_apply=%region_1733.40793
  %add.7172 = f32[] add(%add.7171, %reduce.1446)
  %multiply.10495 = f32[4096]{0} multiply(%add.6504, %add.6504)
  %reduce.1447 = f32[] reduce(%multiply.10495, %constant.5451), dimensions={0}, to_apply=%region_1734.40800
  %add.7173 = f32[] add(%add.7172, %reduce.1447)
  %multiply.10496 = f32[256,8,128]{2,1,0} multiply(%add.6509, %add.6509)
  %reduce.1448 = f32[] reduce(%multiply.10496, %constant.5451), dimensions={0,1,2}, to_apply=%region_1735.40807
  %all-reduce.958 = f32[] all-reduce(%reduce.1448), channel_id=1409, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1735.40807.clone
  %add.7174 = f32[] add(%add.7173, %all-reduce.958)
  %multiply.10497 = f32[32,128,256]{2,1,0} multiply(%add.6514, %add.6514)
  %reduce.1449 = f32[] reduce(%multiply.10497, %constant.5451), dimensions={0,1,2}, to_apply=%region_1736.40814
  %all-reduce.959 = f32[] all-reduce(%reduce.1449), channel_id=1410, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1736.40814.clone
  %add.7175 = f32[] add(%add.7174, %all-reduce.959)
  %multiply.10498 = f32[256,32,128]{2,1,0} multiply(%add.6519, %add.6519)
  %reduce.1450 = f32[] reduce(%multiply.10498, %constant.5451), dimensions={0,1,2}, to_apply=%region_1737.40821
  %all-reduce.960 = f32[] all-reduce(%reduce.1450), channel_id=1411, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1737.40821.clone
  %add.7176 = f32[] add(%add.7175, %all-reduce.960)
  %multiply.10499 = f32[256,8,128]{2,1,0} multiply(%add.6525, %add.6525)
  %reduce.1451 = f32[] reduce(%multiply.10499, %constant.5451), dimensions={0,1,2}, to_apply=%region_1738.40828
  %all-reduce.961 = f32[] all-reduce(%reduce.1451), channel_id=1412, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1738.40828.clone
  %add.7177 = f32[] add(%add.7176, %all-reduce.961)
  %multiply.10500 = f32[256,14336]{1,0} multiply(%add.6530, %add.6530)
  %reduce.1452 = f32[] reduce(%multiply.10500, %constant.5451), dimensions={0,1}, to_apply=%region_1739.40835
  %all-reduce.962 = f32[] all-reduce(%reduce.1452), channel_id=1413, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1739.40835.clone
  %add.7178 = f32[] add(%add.7177, %all-reduce.962)
  %multiply.10501 = f32[256,14336]{1,0} multiply(%add.6535, %add.6535)
  %reduce.1453 = f32[] reduce(%multiply.10501, %constant.5451), dimensions={0,1}, to_apply=%region_1740.40842
  %all-reduce.963 = f32[] all-reduce(%reduce.1453), channel_id=1414, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1740.40842.clone
  %add.7179 = f32[] add(%add.7178, %all-reduce.963)
  %multiply.10502 = f32[14336,256]{1,0} multiply(%add.6540, %add.6540)
  %reduce.1454 = f32[] reduce(%multiply.10502, %constant.5451), dimensions={0,1}, to_apply=%region_1741.40849
  %all-reduce.964 = f32[] all-reduce(%reduce.1454), channel_id=1415, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1741.40849.clone
  %add.7180 = f32[] add(%add.7179, %all-reduce.964)
  %multiply.10503 = f32[4096]{0} multiply(%add.6545, %add.6545)
  %reduce.1455 = f32[] reduce(%multiply.10503, %constant.5451), dimensions={0}, to_apply=%region_1742.40856
  %add.7181 = f32[] add(%add.7180, %reduce.1455)
  %multiply.10504 = f32[4096]{0} multiply(%add.6550, %add.6550)
  %reduce.1456 = f32[] reduce(%multiply.10504, %constant.5451), dimensions={0}, to_apply=%region_1743.40863
  %add.7182 = f32[] add(%add.7181, %reduce.1456)
  %multiply.10505 = f32[256,8,128]{2,1,0} multiply(%add.6555, %add.6555)
  %reduce.1457 = f32[] reduce(%multiply.10505, %constant.5451), dimensions={0,1,2}, to_apply=%region_1744.40870
  %all-reduce.965 = f32[] all-reduce(%reduce.1457), channel_id=1416, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1744.40870.clone
  %add.7183 = f32[] add(%add.7182, %all-reduce.965)
  %multiply.10506 = f32[32,128,256]{2,1,0} multiply(%add.6561, %add.6561)
  %reduce.1458 = f32[] reduce(%multiply.10506, %constant.5451), dimensions={0,1,2}, to_apply=%region_1745.40877
  %all-reduce.966 = f32[] all-reduce(%reduce.1458), channel_id=1417, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1745.40877.clone
  %add.7184 = f32[] add(%add.7183, %all-reduce.966)
  %multiply.10507 = f32[256,32,128]{2,1,0} multiply(%add.6566, %add.6566)
  %reduce.1459 = f32[] reduce(%multiply.10507, %constant.5451), dimensions={0,1,2}, to_apply=%region_1746.40884
  %all-reduce.967 = f32[] all-reduce(%reduce.1459), channel_id=1418, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1746.40884.clone
  %add.7185 = f32[] add(%add.7184, %all-reduce.967)
  %multiply.10508 = f32[256,8,128]{2,1,0} multiply(%add.6571, %add.6571)
  %reduce.1460 = f32[] reduce(%multiply.10508, %constant.5451), dimensions={0,1,2}, to_apply=%region_1747.40891
  %all-reduce.968 = f32[] all-reduce(%reduce.1460), channel_id=1419, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1747.40891.clone
  %add.7186 = f32[] add(%add.7185, %all-reduce.968)
  %multiply.10509 = f32[256,128256]{1,0} multiply(%add.6576, %add.6576)
  %reduce.1461 = f32[] reduce(%multiply.10509, %constant.5451), dimensions={0,1}, to_apply=%region_1748.40898
  %all-reduce.969 = f32[] all-reduce(%reduce.1461), channel_id=1420, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1748.40898.clone
  %add.7187 = f32[] add(%add.7186, %all-reduce.969)
  %multiply.10512 = f32[128256,256]{1,0} multiply(%add.6581, %add.6581)
  %reduce.1462 = f32[] reduce(%multiply.10512, %constant.5451), dimensions={0,1}, to_apply=%region_1749.40905
  %all-reduce.970 = f32[] all-reduce(%reduce.1462), channel_id=1421, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1749.40905.clone
  %add.7189 = f32[] add(%add.7187, %all-reduce.970)
  %sqrt.293 = f32[] sqrt(%add.7189)
  %all-reduce.971 = f32[] all-reduce(%reduce.513), channel_id=1422, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1169.36845.clone
  %add.7190 = f32[] add(%reduce.293, %all-reduce.971)
  %all-reduce.972 = f32[] all-reduce(%reduce.514), channel_id=1423, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1170.36852.clone
  %add.7191 = f32[] add(%add.7190, %all-reduce.972)
  %all-reduce.973 = f32[] all-reduce(%reduce.515), channel_id=1424, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1171.36859.clone
  %add.7192 = f32[] add(%add.7191, %all-reduce.973)
  %add.7193 = f32[] add(%add.7192, %reduce.517)
  %add.7194 = f32[] add(%add.7193, %reduce.524)
  %all-reduce.974 = f32[] all-reduce(%reduce.525), channel_id=1425, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1174.36880.clone
  %add.7195 = f32[] add(%add.7194, %all-reduce.974)
  %all-reduce.975 = f32[] all-reduce(%reduce.526), channel_id=1426, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1175.36887.clone
  %add.7197 = f32[] add(%add.7195, %all-reduce.975)
  %all-reduce.976 = f32[] all-reduce(%reduce.527), channel_id=1427, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1176.36894.clone
  %add.7198 = f32[] add(%add.7197, %all-reduce.976)
  %all-reduce.977 = f32[] all-reduce(%reduce.528), channel_id=1428, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1177.36901.clone
  %add.7199 = f32[] add(%add.7198, %all-reduce.977)
  %all-reduce.978 = f32[] all-reduce(%reduce.529), channel_id=1429, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1178.36908.clone
  %add.7200 = f32[] add(%add.7199, %all-reduce.978)
  %all-reduce.979 = f32[] all-reduce(%reduce.530), channel_id=1430, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1179.36915.clone
  %add.7201 = f32[] add(%add.7200, %all-reduce.979)
  %all-reduce.980 = f32[] all-reduce(%reduce.531), channel_id=1431, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1180.36922.clone
  %add.7202 = f32[] add(%add.7201, %all-reduce.980)
  %add.7203 = f32[] add(%add.7202, %reduce.533)
  %add.7204 = f32[] add(%add.7203, %reduce.535)
  %all-reduce.981 = f32[] all-reduce(%reduce.536), channel_id=1432, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1183.36943.clone
  %add.7205 = f32[] add(%add.7204, %all-reduce.981)
  %all-reduce.982 = f32[] all-reduce(%reduce.537), channel_id=1433, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1184.36950.clone
  %add.7206 = f32[] add(%add.7205, %all-reduce.982)
  %all-reduce.983 = f32[] all-reduce(%reduce.538), channel_id=1434, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1185.36957.clone
  %add.7207 = f32[] add(%add.7206, %all-reduce.983)
  %all-reduce.984 = f32[] all-reduce(%reduce.539), channel_id=1435, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1186.36964.clone
  %add.7208 = f32[] add(%add.7207, %all-reduce.984)
  %all-reduce.985 = f32[] all-reduce(%reduce.540), channel_id=1436, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1187.36971.clone
  %add.7209 = f32[] add(%add.7208, %all-reduce.985)
  %all-reduce.986 = f32[] all-reduce(%reduce.541), channel_id=1437, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1188.36978.clone
  %add.7210 = f32[] add(%add.7209, %all-reduce.986)
  %all-reduce.987 = f32[] all-reduce(%reduce.542), channel_id=1438, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1189.36985.clone
  %add.7211 = f32[] add(%add.7210, %all-reduce.987)
  %add.7212 = f32[] add(%add.7211, %reduce.544)
  %add.7213 = f32[] add(%add.7212, %reduce.546)
  %all-reduce.988 = f32[] all-reduce(%reduce.547), channel_id=1439, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1192.37006.clone
  %add.7215 = f32[] add(%add.7213, %all-reduce.988)
  %all-reduce.989 = f32[] all-reduce(%reduce.548), channel_id=1440, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1193.37013.clone
  %add.7216 = f32[] add(%add.7215, %all-reduce.989)
  %all-reduce.990 = f32[] all-reduce(%reduce.549), channel_id=1441, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1194.37020.clone
  %add.7217 = f32[] add(%add.7216, %all-reduce.990)
  %all-reduce.991 = f32[] all-reduce(%reduce.550), channel_id=1442, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1195.37027.clone
  %add.7218 = f32[] add(%add.7217, %all-reduce.991)
  %all-reduce.992 = f32[] all-reduce(%reduce.551), channel_id=1443, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1196.37034.clone
  %add.7220 = f32[] add(%add.7218, %all-reduce.992)
  %all-reduce.993 = f32[] all-reduce(%reduce.552), channel_id=1444, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1197.37041.clone
  %add.7221 = f32[] add(%add.7220, %all-reduce.993)
  %all-reduce.994 = f32[] all-reduce(%reduce.553), channel_id=1445, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1198.37048.clone
  %add.7222 = f32[] add(%add.7221, %all-reduce.994)
  %add.7223 = f32[] add(%add.7222, %reduce.555)
  %add.7225 = f32[] add(%add.7223, %reduce.557)
  %all-reduce.995 = f32[] all-reduce(%reduce.558), channel_id=1446, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1201.37069.clone
  %add.7226 = f32[] add(%add.7225, %all-reduce.995)
  %all-reduce.996 = f32[] all-reduce(%reduce.559), channel_id=1447, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1202.37076.clone
  %add.7227 = f32[] add(%add.7226, %all-reduce.996)
  %all-reduce.997 = f32[] all-reduce(%reduce.560), channel_id=1448, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1203.37083.clone
  %add.7228 = f32[] add(%add.7227, %all-reduce.997)
  %all-reduce.998 = f32[] all-reduce(%reduce.561), channel_id=1449, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1204.37090.clone
  %add.7229 = f32[] add(%add.7228, %all-reduce.998)
  %all-reduce.999 = f32[] all-reduce(%reduce.562), channel_id=1450, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1205.37097.clone
  %add.7230 = f32[] add(%add.7229, %all-reduce.999)
  %all-reduce.1000 = f32[] all-reduce(%reduce.563), channel_id=1451, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1206.37104.clone
  %add.7231 = f32[] add(%add.7230, %all-reduce.1000)
  %all-reduce.1001 = f32[] all-reduce(%reduce.564), channel_id=1452, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1207.37111.clone
  %add.7232 = f32[] add(%add.7231, %all-reduce.1001)
  %add.7233 = f32[] add(%add.7232, %reduce.566)
  %add.7234 = f32[] add(%add.7233, %reduce.568)
  %all-reduce.1002 = f32[] all-reduce(%reduce.569), channel_id=1453, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1210.37132.clone
  %add.7235 = f32[] add(%add.7234, %all-reduce.1002)
  %all-reduce.1003 = f32[] all-reduce(%reduce.570), channel_id=1454, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1211.37139.clone
  %add.7236 = f32[] add(%add.7235, %all-reduce.1003)
  %all-reduce.1004 = f32[] all-reduce(%reduce.571), channel_id=1455, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1212.37146.clone
  %add.7237 = f32[] add(%add.7236, %all-reduce.1004)
  %all-reduce.1005 = f32[] all-reduce(%reduce.572), channel_id=1456, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1213.37153.clone
  %add.7238 = f32[] add(%add.7237, %all-reduce.1005)
  %all-reduce.1006 = f32[] all-reduce(%reduce.573), channel_id=1457, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1214.37160.clone
  %add.7239 = f32[] add(%add.7238, %all-reduce.1006)
  %all-reduce.1007 = f32[] all-reduce(%reduce.574), channel_id=1458, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1215.37167.clone
  %add.7240 = f32[] add(%add.7239, %all-reduce.1007)
  %all-reduce.1008 = f32[] all-reduce(%reduce.575), channel_id=1459, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1216.37174.clone
  %add.7241 = f32[] add(%add.7240, %all-reduce.1008)
  %add.7242 = f32[] add(%add.7241, %reduce.577)
  %add.7243 = f32[] add(%add.7242, %reduce.579)
  %all-reduce.1009 = f32[] all-reduce(%reduce.580), channel_id=1460, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1219.37195.clone
  %add.7244 = f32[] add(%add.7243, %all-reduce.1009)
  %all-reduce.1010 = f32[] all-reduce(%reduce.581), channel_id=1461, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1220.37202.clone
  %add.7245 = f32[] add(%add.7244, %all-reduce.1010)
  %all-reduce.1011 = f32[] all-reduce(%reduce.582), channel_id=1462, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1221.37209.clone
  %add.7246 = f32[] add(%add.7245, %all-reduce.1011)
  %all-reduce.1012 = f32[] all-reduce(%reduce.583), channel_id=1463, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1222.37216.clone
  %add.7247 = f32[] add(%add.7246, %all-reduce.1012)
  %all-reduce.1013 = f32[] all-reduce(%reduce.584), channel_id=1464, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1223.37223.clone
  %add.7248 = f32[] add(%add.7247, %all-reduce.1013)
  %all-reduce.1014 = f32[] all-reduce(%reduce.585), channel_id=1465, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1224.37230.clone
  %add.7249 = f32[] add(%add.7248, %all-reduce.1014)
  %all-reduce.1015 = f32[] all-reduce(%reduce.586), channel_id=1466, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1225.37237.clone
  %add.7251 = f32[] add(%add.7249, %all-reduce.1015)
  %add.7252 = f32[] add(%add.7251, %reduce.588)
  %add.7253 = f32[] add(%add.7252, %reduce.590)
  %all-reduce.1016 = f32[] all-reduce(%reduce.591), channel_id=1467, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1228.37258.clone
  %add.7254 = f32[] add(%add.7253, %all-reduce.1016)
  %all-reduce.1017 = f32[] all-reduce(%reduce.592), channel_id=1468, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1229.37265.clone
  %add.7255 = f32[] add(%add.7254, %all-reduce.1017)
  %all-reduce.1018 = f32[] all-reduce(%reduce.593), channel_id=1469, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1230.37272.clone
  %add.7256 = f32[] add(%add.7255, %all-reduce.1018)
  %all-reduce.1019 = f32[] all-reduce(%reduce.594), channel_id=1470, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1231.37279.clone
  %add.7258 = f32[] add(%add.7256, %all-reduce.1019)
  %all-reduce.1020 = f32[] all-reduce(%reduce.595), channel_id=1471, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1232.37286.clone
  %add.7259 = f32[] add(%add.7258, %all-reduce.1020)
  %all-reduce.1021 = f32[] all-reduce(%reduce.596), channel_id=1472, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1233.37293.clone
  %add.7260 = f32[] add(%add.7259, %all-reduce.1021)
  %all-reduce.1022 = f32[] all-reduce(%reduce.597), channel_id=1473, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1234.37300.clone
  %add.7261 = f32[] add(%add.7260, %all-reduce.1022)
  %add.7263 = f32[] add(%add.7261, %reduce.599)
  %add.7264 = f32[] add(%add.7263, %reduce.601)
  %all-reduce.1023 = f32[] all-reduce(%reduce.602), channel_id=1474, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1237.37321.clone
  %add.7265 = f32[] add(%add.7264, %all-reduce.1023)
  %all-reduce.1024 = f32[] all-reduce(%reduce.603), channel_id=1475, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1238.37328.clone
  %add.7266 = f32[] add(%add.7265, %all-reduce.1024)
  %all-reduce.1025 = f32[] all-reduce(%reduce.604), channel_id=1476, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1239.37335.clone
  %add.7267 = f32[] add(%add.7266, %all-reduce.1025)
  %all-reduce.1026 = f32[] all-reduce(%reduce.605), channel_id=1477, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1240.37342.clone
  %add.7268 = f32[] add(%add.7267, %all-reduce.1026)
  %all-reduce.1027 = f32[] all-reduce(%reduce.606), channel_id=1478, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1241.37349.clone
  %add.7269 = f32[] add(%add.7268, %all-reduce.1027)
  %all-reduce.1028 = f32[] all-reduce(%reduce.607), channel_id=1479, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1242.37356.clone
  %add.7270 = f32[] add(%add.7269, %all-reduce.1028)
  %all-reduce.1029 = f32[] all-reduce(%reduce.608), channel_id=1480, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1243.37363.clone
  %add.7271 = f32[] add(%add.7270, %all-reduce.1029)
  %add.7272 = f32[] add(%add.7271, %reduce.610)
  %add.7273 = f32[] add(%add.7272, %reduce.612)
  %all-reduce.1030 = f32[] all-reduce(%reduce.613), channel_id=1481, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1246.37384.clone
  %add.7274 = f32[] add(%add.7273, %all-reduce.1030)
  %all-reduce.1031 = f32[] all-reduce(%reduce.614), channel_id=1482, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1247.37391.clone
  %add.7275 = f32[] add(%add.7274, %all-reduce.1031)
  %all-reduce.1032 = f32[] all-reduce(%reduce.615), channel_id=1483, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1248.37398.clone
  %add.7276 = f32[] add(%add.7275, %all-reduce.1032)
  %all-reduce.1033 = f32[] all-reduce(%reduce.616), channel_id=1484, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1249.37405.clone
  %add.7277 = f32[] add(%add.7276, %all-reduce.1033)
  %all-reduce.1034 = f32[] all-reduce(%reduce.617), channel_id=1485, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1250.37412.clone
  %add.7278 = f32[] add(%add.7277, %all-reduce.1034)
  %all-reduce.1035 = f32[] all-reduce(%reduce.618), channel_id=1486, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1251.37419.clone
  %add.7279 = f32[] add(%add.7278, %all-reduce.1035)
  %all-reduce.1036 = f32[] all-reduce(%reduce.619), channel_id=1487, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1252.37426.clone
  %add.7280 = f32[] add(%add.7279, %all-reduce.1036)
  %add.7281 = f32[] add(%add.7280, %reduce.621)
  %add.7282 = f32[] add(%add.7281, %reduce.623)
  %all-reduce.1037 = f32[] all-reduce(%reduce.624), channel_id=1488, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1255.37447.clone
  %add.7283 = f32[] add(%add.7282, %all-reduce.1037)
  %all-reduce.1038 = f32[] all-reduce(%reduce.625), channel_id=1489, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1256.37454.clone
  %add.7284 = f32[] add(%add.7283, %all-reduce.1038)
  %all-reduce.1039 = f32[] all-reduce(%reduce.626), channel_id=1490, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1257.37461.clone
  %add.7285 = f32[] add(%add.7284, %all-reduce.1039)
  %all-reduce.1040 = f32[] all-reduce(%reduce.627), channel_id=1491, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1258.37468.clone
  %add.7286 = f32[] add(%add.7285, %all-reduce.1040)
  %all-reduce.1041 = f32[] all-reduce(%reduce.628), channel_id=1492, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1259.37475.clone
  %add.7287 = f32[] add(%add.7286, %all-reduce.1041)
  %all-reduce.1042 = f32[] all-reduce(%reduce.629), channel_id=1493, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1260.37482.clone
  %add.7288 = f32[] add(%add.7287, %all-reduce.1042)
  %all-reduce.1043 = f32[] all-reduce(%reduce.630), channel_id=1494, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1261.37489.clone
  %add.7289 = f32[] add(%add.7288, %all-reduce.1043)
  %add.7290 = f32[] add(%add.7289, %reduce.632)
  %add.7291 = f32[] add(%add.7290, %reduce.634)
  %all-reduce.1044 = f32[] all-reduce(%reduce.635), channel_id=1495, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1264.37510.clone
  %add.7292 = f32[] add(%add.7291, %all-reduce.1044)
  %all-reduce.1045 = f32[] all-reduce(%reduce.636), channel_id=1496, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1265.37517.clone
  %add.7293 = f32[] add(%add.7292, %all-reduce.1045)
  %all-reduce.1046 = f32[] all-reduce(%reduce.637), channel_id=1497, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1266.37524.clone
  %add.7294 = f32[] add(%add.7293, %all-reduce.1046)
  %all-reduce.1047 = f32[] all-reduce(%reduce.638), channel_id=1498, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1267.37531.clone
  %add.7295 = f32[] add(%add.7294, %all-reduce.1047)
  %all-reduce.1048 = f32[] all-reduce(%reduce.639), channel_id=1499, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1268.37538.clone
  %add.7296 = f32[] add(%add.7295, %all-reduce.1048)
  %all-reduce.1049 = f32[] all-reduce(%reduce.640), channel_id=1500, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1269.37545.clone
  %add.7297 = f32[] add(%add.7296, %all-reduce.1049)
  %all-reduce.1050 = f32[] all-reduce(%reduce.641), channel_id=1501, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1270.37552.clone
  %add.7298 = f32[] add(%add.7297, %all-reduce.1050)
  %add.7299 = f32[] add(%add.7298, %reduce.643)
  %add.7300 = f32[] add(%add.7299, %reduce.645)
  %all-reduce.1051 = f32[] all-reduce(%reduce.646), channel_id=1502, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1273.37573.clone
  %add.7301 = f32[] add(%add.7300, %all-reduce.1051)
  %all-reduce.1052 = f32[] all-reduce(%reduce.647), channel_id=1503, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1274.37580.clone
  %add.7302 = f32[] add(%add.7301, %all-reduce.1052)
  %all-reduce.1053 = f32[] all-reduce(%reduce.648), channel_id=1504, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1275.37587.clone
  %add.7303 = f32[] add(%add.7302, %all-reduce.1053)
  %all-reduce.1054 = f32[] all-reduce(%reduce.649), channel_id=1505, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1276.37594.clone
  %add.7304 = f32[] add(%add.7303, %all-reduce.1054)
  %all-reduce.1055 = f32[] all-reduce(%reduce.650), channel_id=1506, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1277.37601.clone
  %add.7305 = f32[] add(%add.7304, %all-reduce.1055)
  %all-reduce.1056 = f32[] all-reduce(%reduce.651), channel_id=1507, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1278.37608.clone
  %add.7306 = f32[] add(%add.7305, %all-reduce.1056)
  %all-reduce.1057 = f32[] all-reduce(%reduce.652), channel_id=1508, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1279.37615.clone
  %add.7307 = f32[] add(%add.7306, %all-reduce.1057)
  %add.7308 = f32[] add(%add.7307, %reduce.654)
  %add.7309 = f32[] add(%add.7308, %reduce.656)
  %all-reduce.1058 = f32[] all-reduce(%reduce.657), channel_id=1509, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1282.37636.clone
  %add.7310 = f32[] add(%add.7309, %all-reduce.1058)
  %all-reduce.1059 = f32[] all-reduce(%reduce.658), channel_id=1510, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1283.37643.clone
  %add.7311 = f32[] add(%add.7310, %all-reduce.1059)
  %all-reduce.1060 = f32[] all-reduce(%reduce.659), channel_id=1511, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1284.37650.clone
  %add.7312 = f32[] add(%add.7311, %all-reduce.1060)
  %all-reduce.1061 = f32[] all-reduce(%reduce.660), channel_id=1512, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1285.37657.clone
  %add.7313 = f32[] add(%add.7312, %all-reduce.1061)
  %all-reduce.1062 = f32[] all-reduce(%reduce.661), channel_id=1513, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1286.37664.clone
  %add.7314 = f32[] add(%add.7313, %all-reduce.1062)
  %all-reduce.1063 = f32[] all-reduce(%reduce.662), channel_id=1514, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1287.37671.clone
  %add.7315 = f32[] add(%add.7314, %all-reduce.1063)
  %all-reduce.1064 = f32[] all-reduce(%reduce.663), channel_id=1515, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1288.37678.clone
  %add.7316 = f32[] add(%add.7315, %all-reduce.1064)
  %add.7317 = f32[] add(%add.7316, %reduce.665)
  %add.7318 = f32[] add(%add.7317, %reduce.667)
  %all-reduce.1065 = f32[] all-reduce(%reduce.668), channel_id=1516, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1291.37699.clone
  %add.7319 = f32[] add(%add.7318, %all-reduce.1065)
  %all-reduce.1066 = f32[] all-reduce(%reduce.669), channel_id=1517, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1292.37706.clone
  %add.7320 = f32[] add(%add.7319, %all-reduce.1066)
  %all-reduce.1067 = f32[] all-reduce(%reduce.670), channel_id=1518, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1293.37713.clone
  %add.7321 = f32[] add(%add.7320, %all-reduce.1067)
  %all-reduce.1068 = f32[] all-reduce(%reduce.671), channel_id=1519, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1294.37720.clone
  %add.7322 = f32[] add(%add.7321, %all-reduce.1068)
  %all-reduce.1069 = f32[] all-reduce(%reduce.672), channel_id=1520, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1295.37727.clone
  %add.7324 = f32[] add(%add.7322, %all-reduce.1069)
  %all-reduce.1070 = f32[] all-reduce(%reduce.673), channel_id=1521, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1296.37734.clone
  %add.7325 = f32[] add(%add.7324, %all-reduce.1070)
  %all-reduce.1071 = f32[] all-reduce(%reduce.674), channel_id=1522, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1297.37741.clone
  %add.7326 = f32[] add(%add.7325, %all-reduce.1071)
  %add.7327 = f32[] add(%add.7326, %reduce.676)
  %add.7328 = f32[] add(%add.7327, %reduce.678)
  %all-reduce.1072 = f32[] all-reduce(%reduce.679), channel_id=1523, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1300.37762.clone
  %add.7329 = f32[] add(%add.7328, %all-reduce.1072)
  %all-reduce.1073 = f32[] all-reduce(%reduce.680), channel_id=1524, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1301.37769.clone
  %add.7330 = f32[] add(%add.7329, %all-reduce.1073)
  %all-reduce.1074 = f32[] all-reduce(%reduce.681), channel_id=1525, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1302.37776.clone
  %add.7331 = f32[] add(%add.7330, %all-reduce.1074)
  %all-reduce.1075 = f32[] all-reduce(%reduce.682), channel_id=1526, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1303.37783.clone
  %add.7332 = f32[] add(%add.7331, %all-reduce.1075)
  %all-reduce.1076 = f32[] all-reduce(%reduce.683), channel_id=1527, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1304.37790.clone
  %add.7333 = f32[] add(%add.7332, %all-reduce.1076)
  %all-reduce.1077 = f32[] all-reduce(%reduce.684), channel_id=1528, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1305.37797.clone
  %add.7334 = f32[] add(%add.7333, %all-reduce.1077)
  %all-reduce.1078 = f32[] all-reduce(%reduce.685), channel_id=1529, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1306.37804.clone
  %add.7335 = f32[] add(%add.7334, %all-reduce.1078)
  %add.7336 = f32[] add(%add.7335, %reduce.687)
  %add.7337 = f32[] add(%add.7336, %reduce.689)
  %all-reduce.1079 = f32[] all-reduce(%reduce.690), channel_id=1530, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1309.37825.clone
  %add.7338 = f32[] add(%add.7337, %all-reduce.1079)
  %all-reduce.1080 = f32[] all-reduce(%reduce.691), channel_id=1531, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1310.37832.clone
  %add.7339 = f32[] add(%add.7338, %all-reduce.1080)
  %all-reduce.1081 = f32[] all-reduce(%reduce.692), channel_id=1532, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1311.37839.clone
  %add.7340 = f32[] add(%add.7339, %all-reduce.1081)
  %all-reduce.1082 = f32[] all-reduce(%reduce.693), channel_id=1533, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1312.37846.clone
  %add.7341 = f32[] add(%add.7340, %all-reduce.1082)
  %all-reduce.1083 = f32[] all-reduce(%reduce.694), channel_id=1534, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1313.37853.clone
  %add.7342 = f32[] add(%add.7341, %all-reduce.1083)
  %all-reduce.1084 = f32[] all-reduce(%reduce.695), channel_id=1535, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1314.37860.clone
  %add.7343 = f32[] add(%add.7342, %all-reduce.1084)
  %all-reduce.1085 = f32[] all-reduce(%reduce.696), channel_id=1536, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1315.37867.clone
  %add.7344 = f32[] add(%add.7343, %all-reduce.1085)
  %add.7345 = f32[] add(%add.7344, %reduce.698)
  %add.7346 = f32[] add(%add.7345, %reduce.700)
  %all-reduce.1086 = f32[] all-reduce(%reduce.701), channel_id=1537, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1318.37888.clone
  %add.7347 = f32[] add(%add.7346, %all-reduce.1086)
  %all-reduce.1087 = f32[] all-reduce(%reduce.702), channel_id=1538, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1319.37895.clone
  %add.7348 = f32[] add(%add.7347, %all-reduce.1087)
  %all-reduce.1088 = f32[] all-reduce(%reduce.703), channel_id=1539, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1320.37902.clone
  %add.7349 = f32[] add(%add.7348, %all-reduce.1088)
  %all-reduce.1089 = f32[] all-reduce(%reduce.704), channel_id=1540, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1321.37909.clone
  %add.7350 = f32[] add(%add.7349, %all-reduce.1089)
  %all-reduce.1090 = f32[] all-reduce(%reduce.705), channel_id=1541, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1322.37916.clone
  %add.7351 = f32[] add(%add.7350, %all-reduce.1090)
  %all-reduce.1091 = f32[] all-reduce(%reduce.706), channel_id=1542, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1323.37923.clone
  %add.7352 = f32[] add(%add.7351, %all-reduce.1091)
  %all-reduce.1092 = f32[] all-reduce(%reduce.707), channel_id=1543, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1324.37930.clone
  %add.7353 = f32[] add(%add.7352, %all-reduce.1092)
  %add.7354 = f32[] add(%add.7353, %reduce.709)
  %add.7355 = f32[] add(%add.7354, %reduce.711)
  %all-reduce.1093 = f32[] all-reduce(%reduce.712), channel_id=1544, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1327.37951.clone
  %add.7356 = f32[] add(%add.7355, %all-reduce.1093)
  %all-reduce.1094 = f32[] all-reduce(%reduce.713), channel_id=1545, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1328.37958.clone
  %add.7357 = f32[] add(%add.7356, %all-reduce.1094)
  %all-reduce.1095 = f32[] all-reduce(%reduce.714), channel_id=1546, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1329.37965.clone
  %add.7358 = f32[] add(%add.7357, %all-reduce.1095)
  %all-reduce.1096 = f32[] all-reduce(%reduce.715), channel_id=1547, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1330.37972.clone
  %add.7359 = f32[] add(%add.7358, %all-reduce.1096)
  %all-reduce.1097 = f32[] all-reduce(%reduce.716), channel_id=1548, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1331.37979.clone
  %add.7360 = f32[] add(%add.7359, %all-reduce.1097)
  %all-reduce.1098 = f32[] all-reduce(%reduce.717), channel_id=1549, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1332.37986.clone
  %add.7362 = f32[] add(%add.7360, %all-reduce.1098)
  %all-reduce.1099 = f32[] all-reduce(%reduce.718), channel_id=1550, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1333.37993.clone
  %add.7363 = f32[] add(%add.7362, %all-reduce.1099)
  %add.7364 = f32[] add(%add.7363, %reduce.720)
  %add.7365 = f32[] add(%add.7364, %reduce.722)
  %all-reduce.1100 = f32[] all-reduce(%reduce.723), channel_id=1551, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1336.38014.clone
  %add.7366 = f32[] add(%add.7365, %all-reduce.1100)
  %all-reduce.1101 = f32[] all-reduce(%reduce.724), channel_id=1552, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1337.38021.clone
  %add.7367 = f32[] add(%add.7366, %all-reduce.1101)
  %all-reduce.1102 = f32[] all-reduce(%reduce.725), channel_id=1553, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1338.38028.clone
  %add.7368 = f32[] add(%add.7367, %all-reduce.1102)
  %all-reduce.1103 = f32[] all-reduce(%reduce.726), channel_id=1554, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1339.38035.clone
  %add.7369 = f32[] add(%add.7368, %all-reduce.1103)
  %all-reduce.1104 = f32[] all-reduce(%reduce.727), channel_id=1555, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1340.38042.clone
  %add.7370 = f32[] add(%add.7369, %all-reduce.1104)
  %all-reduce.1105 = f32[] all-reduce(%reduce.728), channel_id=1556, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1341.38049.clone
  %add.7371 = f32[] add(%add.7370, %all-reduce.1105)
  %all-reduce.1106 = f32[] all-reduce(%reduce.729), channel_id=1557, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1342.38056.clone
  %add.7372 = f32[] add(%add.7371, %all-reduce.1106)
  %add.7373 = f32[] add(%add.7372, %reduce.731)
  %add.7374 = f32[] add(%add.7373, %reduce.733)
  %all-reduce.1107 = f32[] all-reduce(%reduce.734), channel_id=1558, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1345.38077.clone
  %add.7375 = f32[] add(%add.7374, %all-reduce.1107)
  %all-reduce.1108 = f32[] all-reduce(%reduce.735), channel_id=1559, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1346.38084.clone
  %add.7376 = f32[] add(%add.7375, %all-reduce.1108)
  %all-reduce.1109 = f32[] all-reduce(%reduce.736), channel_id=1560, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1347.38091.clone
  %add.7377 = f32[] add(%add.7376, %all-reduce.1109)
  %all-reduce.1110 = f32[] all-reduce(%reduce.737), channel_id=1561, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1348.38098.clone
  %add.7378 = f32[] add(%add.7377, %all-reduce.1110)
  %all-reduce.1111 = f32[] all-reduce(%reduce.738), channel_id=1562, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1349.38105.clone
  %add.7379 = f32[] add(%add.7378, %all-reduce.1111)
  %all-reduce.1112 = f32[] all-reduce(%reduce.739), channel_id=1563, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1350.38112.clone
  %add.7380 = f32[] add(%add.7379, %all-reduce.1112)
  %all-reduce.1113 = f32[] all-reduce(%reduce.740), channel_id=1564, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1351.38119.clone
  %add.7381 = f32[] add(%add.7380, %all-reduce.1113)
  %add.7382 = f32[] add(%add.7381, %reduce.742)
  %add.7383 = f32[] add(%add.7382, %reduce.744)
  %all-reduce.1114 = f32[] all-reduce(%reduce.745), channel_id=1565, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1354.38140.clone
  %add.7384 = f32[] add(%add.7383, %all-reduce.1114)
  %all-reduce.1115 = f32[] all-reduce(%reduce.746), channel_id=1566, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1355.38147.clone
  %add.7385 = f32[] add(%add.7384, %all-reduce.1115)
  %all-reduce.1116 = f32[] all-reduce(%reduce.747), channel_id=1567, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1356.38154.clone
  %add.7386 = f32[] add(%add.7385, %all-reduce.1116)
  %all-reduce.1117 = f32[] all-reduce(%reduce.748), channel_id=1568, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1357.38161.clone
  %add.7387 = f32[] add(%add.7386, %all-reduce.1117)
  %all-reduce.1118 = f32[] all-reduce(%reduce.749), channel_id=1569, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1358.38168.clone
  %add.7388 = f32[] add(%add.7387, %all-reduce.1118)
  %all-reduce.1119 = f32[] all-reduce(%reduce.750), channel_id=1570, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1359.38175.clone
  %add.7389 = f32[] add(%add.7388, %all-reduce.1119)
  %all-reduce.1120 = f32[] all-reduce(%reduce.751), channel_id=1571, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1360.38182.clone
  %add.7390 = f32[] add(%add.7389, %all-reduce.1120)
  %add.7391 = f32[] add(%add.7390, %reduce.753)
  %add.7392 = f32[] add(%add.7391, %reduce.755)
  %all-reduce.1121 = f32[] all-reduce(%reduce.756), channel_id=1572, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1363.38203.clone
  %add.7393 = f32[] add(%add.7392, %all-reduce.1121)
  %all-reduce.1122 = f32[] all-reduce(%reduce.757), channel_id=1573, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1364.38210.clone
  %add.7394 = f32[] add(%add.7393, %all-reduce.1122)
  %all-reduce.1123 = f32[] all-reduce(%reduce.758), channel_id=1574, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1365.38217.clone
  %add.7395 = f32[] add(%add.7394, %all-reduce.1123)
  %all-reduce.1124 = f32[] all-reduce(%reduce.759), channel_id=1575, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1366.38224.clone
  %add.7396 = f32[] add(%add.7395, %all-reduce.1124)
  %all-reduce.1125 = f32[] all-reduce(%reduce.760), channel_id=1576, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1367.38231.clone
  %add.7397 = f32[] add(%add.7396, %all-reduce.1125)
  %all-reduce.1126 = f32[] all-reduce(%reduce.761), channel_id=1577, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1368.38238.clone
  %add.7398 = f32[] add(%add.7397, %all-reduce.1126)
  %all-reduce.1127 = f32[] all-reduce(%reduce.762), channel_id=1578, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1369.38245.clone
  %add.7400 = f32[] add(%add.7398, %all-reduce.1127)
  %add.7401 = f32[] add(%add.7400, %reduce.764)
  %add.7402 = f32[] add(%add.7401, %reduce.766)
  %all-reduce.1128 = f32[] all-reduce(%reduce.767), channel_id=1579, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1372.38266.clone
  %add.7403 = f32[] add(%add.7402, %all-reduce.1128)
  %all-reduce.1129 = f32[] all-reduce(%reduce.768), channel_id=1580, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1373.38273.clone
  %add.7404 = f32[] add(%add.7403, %all-reduce.1129)
  %all-reduce.1130 = f32[] all-reduce(%reduce.769), channel_id=1581, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1374.38280.clone
  %add.7405 = f32[] add(%add.7404, %all-reduce.1130)
  %all-reduce.1131 = f32[] all-reduce(%reduce.770), channel_id=1582, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1375.38287.clone
  %add.7406 = f32[] add(%add.7405, %all-reduce.1131)
  %all-reduce.1132 = f32[] all-reduce(%reduce.771), channel_id=1583, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1376.38294.clone
  %add.7407 = f32[] add(%add.7406, %all-reduce.1132)
  %all-reduce.1133 = f32[] all-reduce(%reduce.772), channel_id=1584, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1377.38301.clone
  %add.7408 = f32[] add(%add.7407, %all-reduce.1133)
  %all-reduce.1134 = f32[] all-reduce(%reduce.773), channel_id=1585, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1378.38308.clone
  %add.7409 = f32[] add(%add.7408, %all-reduce.1134)
  %add.7410 = f32[] add(%add.7409, %reduce.775)
  %add.7411 = f32[] add(%add.7410, %reduce.777)
  %all-reduce.1135 = f32[] all-reduce(%reduce.778), channel_id=1586, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1381.38329.clone
  %add.7412 = f32[] add(%add.7411, %all-reduce.1135)
  %all-reduce.1136 = f32[] all-reduce(%reduce.779), channel_id=1587, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1382.38336.clone
  %add.7413 = f32[] add(%add.7412, %all-reduce.1136)
  %all-reduce.1137 = f32[] all-reduce(%reduce.780), channel_id=1588, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1383.38343.clone
  %add.7414 = f32[] add(%add.7413, %all-reduce.1137)
  %all-reduce.1138 = f32[] all-reduce(%reduce.781), channel_id=1589, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1384.38350.clone
  %add.7415 = f32[] add(%add.7414, %all-reduce.1138)
  %all-reduce.1139 = f32[] all-reduce(%reduce.782), channel_id=1590, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1385.38357.clone
  %add.7416 = f32[] add(%add.7415, %all-reduce.1139)
  %all-reduce.1140 = f32[] all-reduce(%reduce.783), channel_id=1591, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1386.38364.clone
  %add.7417 = f32[] add(%add.7416, %all-reduce.1140)
  %all-reduce.1141 = f32[] all-reduce(%reduce.784), channel_id=1592, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1387.38371.clone
  %add.7418 = f32[] add(%add.7417, %all-reduce.1141)
  %add.7419 = f32[] add(%add.7418, %reduce.786)
  %add.7420 = f32[] add(%add.7419, %reduce.788)
  %all-reduce.1142 = f32[] all-reduce(%reduce.789), channel_id=1593, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1390.38392.clone
  %add.7421 = f32[] add(%add.7420, %all-reduce.1142)
  %all-reduce.1143 = f32[] all-reduce(%reduce.790), channel_id=1594, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1391.38399.clone
  %add.7422 = f32[] add(%add.7421, %all-reduce.1143)
  %all-reduce.1144 = f32[] all-reduce(%reduce.791), channel_id=1595, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1392.38406.clone
  %add.7423 = f32[] add(%add.7422, %all-reduce.1144)
  %all-reduce.1145 = f32[] all-reduce(%reduce.792), channel_id=1596, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1393.38413.clone
  %add.7424 = f32[] add(%add.7423, %all-reduce.1145)
  %all-reduce.1146 = f32[] all-reduce(%reduce.793), channel_id=1597, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1394.38420.clone
  %add.7425 = f32[] add(%add.7424, %all-reduce.1146)
  %all-reduce.1147 = f32[] all-reduce(%reduce.794), channel_id=1598, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1395.38427.clone
  %add.7426 = f32[] add(%add.7425, %all-reduce.1147)
  %all-reduce.1148 = f32[] all-reduce(%reduce.795), channel_id=1599, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1396.38434.clone
  %add.7427 = f32[] add(%add.7426, %all-reduce.1148)
  %add.7428 = f32[] add(%add.7427, %reduce.797)
  %add.7429 = f32[] add(%add.7428, %reduce.799)
  %all-reduce.1149 = f32[] all-reduce(%reduce.800), channel_id=1600, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1399.38455.clone
  %add.7430 = f32[] add(%add.7429, %all-reduce.1149)
  %all-reduce.1150 = f32[] all-reduce(%reduce.801), channel_id=1601, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1400.38462.clone
  %add.7431 = f32[] add(%add.7430, %all-reduce.1150)
  %all-reduce.1151 = f32[] all-reduce(%reduce.802), channel_id=1602, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1401.38469.clone
  %add.7432 = f32[] add(%add.7431, %all-reduce.1151)
  %all-reduce.1152 = f32[] all-reduce(%reduce.803), channel_id=1603, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1402.38476.clone
  %add.7433 = f32[] add(%add.7432, %all-reduce.1152)
  %all-reduce.1153 = f32[] all-reduce(%reduce.804), channel_id=1604, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1403.38483.clone
  %add.7434 = f32[] add(%add.7433, %all-reduce.1153)
  %all-reduce.1154 = f32[] all-reduce(%reduce.805), channel_id=1605, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1404.38490.clone
  %add.7435 = f32[] add(%add.7434, %all-reduce.1154)
  %all-reduce.1155 = f32[] all-reduce(%reduce.806), channel_id=1606, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1405.38497.clone
  %add.7436 = f32[] add(%add.7435, %all-reduce.1155)
  %add.7438 = f32[] add(%add.7436, %reduce.808)
  %add.7439 = f32[] add(%add.7438, %reduce.810)
  %all-reduce.1156 = f32[] all-reduce(%reduce.811), channel_id=1607, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1408.38518.clone
  %add.7440 = f32[] add(%add.7439, %all-reduce.1156)
  %all-reduce.1157 = f32[] all-reduce(%reduce.812), channel_id=1608, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1409.38525.clone
  %add.7441 = f32[] add(%add.7440, %all-reduce.1157)
  %all-reduce.1158 = f32[] all-reduce(%reduce.813), channel_id=1609, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1410.38532.clone
  %add.7442 = f32[] add(%add.7441, %all-reduce.1158)
  %all-reduce.1159 = f32[] all-reduce(%reduce.814), channel_id=1610, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1411.38539.clone
  %add.7443 = f32[] add(%add.7442, %all-reduce.1159)
  %all-reduce.1160 = f32[] all-reduce(%reduce.815), channel_id=1611, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1412.38546.clone
  %add.7444 = f32[] add(%add.7443, %all-reduce.1160)
  %all-reduce.1161 = f32[] all-reduce(%reduce.816), channel_id=1612, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1413.38553.clone
  %add.7445 = f32[] add(%add.7444, %all-reduce.1161)
  %all-reduce.1162 = f32[] all-reduce(%reduce.817), channel_id=1613, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1414.38560.clone
  %add.7446 = f32[] add(%add.7445, %all-reduce.1162)
  %add.7447 = f32[] add(%add.7446, %reduce.819)
  %add.7448 = f32[] add(%add.7447, %reduce.821)
  %all-reduce.1163 = f32[] all-reduce(%reduce.822), channel_id=1614, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1417.38581.clone
  %add.7449 = f32[] add(%add.7448, %all-reduce.1163)
  %all-reduce.1164 = f32[] all-reduce(%reduce.823), channel_id=1615, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1418.38588.clone
  %add.7450 = f32[] add(%add.7449, %all-reduce.1164)
  %all-reduce.1165 = f32[] all-reduce(%reduce.824), channel_id=1616, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1419.38595.clone
  %add.7451 = f32[] add(%add.7450, %all-reduce.1165)
  %all-reduce.1166 = f32[] all-reduce(%reduce.825), channel_id=1617, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1420.38602.clone
  %add.7452 = f32[] add(%add.7451, %all-reduce.1166)
  %all-reduce.1167 = f32[] all-reduce(%reduce.826), channel_id=1618, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1421.38609.clone
  %add.7453 = f32[] add(%add.7452, %all-reduce.1167)
  %all-reduce.1168 = f32[] all-reduce(%reduce.827), channel_id=1619, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1422.38616.clone
  %add.7454 = f32[] add(%add.7453, %all-reduce.1168)
  %all-reduce.1169 = f32[] all-reduce(%reduce.828), channel_id=1620, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1423.38623.clone
  %add.7455 = f32[] add(%add.7454, %all-reduce.1169)
  %add.7456 = f32[] add(%add.7455, %reduce.830)
  %add.7457 = f32[] add(%add.7456, %reduce.832)
  %all-reduce.1170 = f32[] all-reduce(%reduce.833), channel_id=1621, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1426.38644.clone
  %add.7458 = f32[] add(%add.7457, %all-reduce.1170)
  %all-reduce.1171 = f32[] all-reduce(%reduce.834), channel_id=1622, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1427.38651.clone
  %add.7459 = f32[] add(%add.7458, %all-reduce.1171)
  %all-reduce.1172 = f32[] all-reduce(%reduce.835), channel_id=1623, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1428.38658.clone
  %add.7460 = f32[] add(%add.7459, %all-reduce.1172)
  %all-reduce.1173 = f32[] all-reduce(%reduce.836), channel_id=1624, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1429.38665.clone
  %add.7461 = f32[] add(%add.7460, %all-reduce.1173)
  %all-reduce.1174 = f32[] all-reduce(%reduce.837), channel_id=1625, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1430.38672.clone
  %add.7462 = f32[] add(%add.7461, %all-reduce.1174)
  %all-reduce.1175 = f32[] all-reduce(%reduce.838), channel_id=1626, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1431.38679.clone
  %add.7463 = f32[] add(%add.7462, %all-reduce.1175)
  %all-reduce.1176 = f32[] all-reduce(%reduce.839), channel_id=1627, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1432.38686.clone
  %add.7464 = f32[] add(%add.7463, %all-reduce.1176)
  %add.7465 = f32[] add(%add.7464, %reduce.841)
  %add.7466 = f32[] add(%add.7465, %reduce.843)
  %all-reduce.1177 = f32[] all-reduce(%reduce.844), channel_id=1628, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1435.38707.clone
  %add.7467 = f32[] add(%add.7466, %all-reduce.1177)
  %all-reduce.1178 = f32[] all-reduce(%reduce.845), channel_id=1629, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1436.38714.clone
  %add.7469 = f32[] add(%add.7467, %all-reduce.1178)
  %all-reduce.1179 = f32[] all-reduce(%reduce.846), channel_id=1630, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1437.38721.clone
  %add.7470 = f32[] add(%add.7469, %all-reduce.1179)
  %all-reduce.1180 = f32[] all-reduce(%reduce.847), channel_id=1631, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1438.38728.clone
  %add.7471 = f32[] add(%add.7470, %all-reduce.1180)
  %all-reduce.1181 = f32[] all-reduce(%reduce.848), channel_id=1632, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1439.38735.clone
  %add.7472 = f32[] add(%add.7471, %all-reduce.1181)
  %all-reduce.1182 = f32[] all-reduce(%reduce.849), channel_id=1633, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1440.38742.clone
  %add.7473 = f32[] add(%add.7472, %all-reduce.1182)
  %all-reduce.1183 = f32[] all-reduce(%reduce.850), channel_id=1634, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1441.38749.clone
  %add.7474 = f32[] add(%add.7473, %all-reduce.1183)
  %add.7475 = f32[] add(%add.7474, %reduce.852)
  %add.7477 = f32[] add(%add.7475, %reduce.854)
  %all-reduce.1184 = f32[] all-reduce(%reduce.855), channel_id=1635, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1444.38770.clone
  %add.7478 = f32[] add(%add.7477, %all-reduce.1184)
  %all-reduce.1185 = f32[] all-reduce(%reduce.856), channel_id=1636, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1445.38777.clone
  %add.7479 = f32[] add(%add.7478, %all-reduce.1185)
  %all-reduce.1186 = f32[] all-reduce(%reduce.857), channel_id=1637, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1446.38784.clone
  %add.7480 = f32[] add(%add.7479, %all-reduce.1186)
  %all-reduce.1187 = f32[] all-reduce(%reduce.858), channel_id=1638, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1447.38791.clone
  %add.7481 = f32[] add(%add.7480, %all-reduce.1187)
  %all-reduce.1188 = f32[] all-reduce(%reduce.859), channel_id=1639, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1448.38798.clone
  %add.7482 = f32[] add(%add.7481, %all-reduce.1188)
  %all-reduce.1189 = f32[] all-reduce(%reduce.860), channel_id=1640, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1449.38805.clone
  %add.7483 = f32[] add(%add.7482, %all-reduce.1189)
  %all-reduce.1190 = f32[] all-reduce(%reduce.861), channel_id=1641, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1450.38812.clone
  %add.7484 = f32[] add(%add.7483, %all-reduce.1190)
  %add.7485 = f32[] add(%add.7484, %reduce.863)
  %add.7486 = f32[] add(%add.7485, %reduce.865)
  %all-reduce.1191 = f32[] all-reduce(%reduce.866), channel_id=1642, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1453.38833.clone
  %add.7487 = f32[] add(%add.7486, %all-reduce.1191)
  %all-reduce.1192 = f32[] all-reduce(%reduce.867), channel_id=1643, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1454.38840.clone
  %add.7488 = f32[] add(%add.7487, %all-reduce.1192)
  %all-reduce.1193 = f32[] all-reduce(%reduce.868), channel_id=1644, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1455.38847.clone
  %add.7489 = f32[] add(%add.7488, %all-reduce.1193)
  %all-reduce.1194 = f32[] all-reduce(%reduce.869), channel_id=1645, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1456.38854.clone
  %add.7490 = f32[] add(%add.7489, %all-reduce.1194)
  %all-reduce.1195 = f32[] all-reduce(%reduce.870), channel_id=1646, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1457.38861.clone
  %add.7491 = f32[] add(%add.7490, %all-reduce.1195)
  %all-reduce.1196 = f32[] all-reduce(%reduce.872), channel_id=1647, replica_groups=[1,16]<=[16], use_global_device_ids=true, to_apply=%region_1458.38868.clone
  %add.7492 = f32[] add(%add.7491, %all-reduce.1196)
  %sqrt.294 = f32[] sqrt(%add.7492)
  ROOT %tuple.157 = (s32[], f32[4096]{0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=5*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=10*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=15*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=20*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=25*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=30*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=35*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=40*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=45*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=50*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=55*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=60*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=65*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=70*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=75*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=80*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=85*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=90*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=95*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=100*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=105*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=110*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=115*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=120*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=125*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=130*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=135*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=140*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=145*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=150*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=155*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=160*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=165*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=170*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=175*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=180*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=185*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=190*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=195*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=200*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=205*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=210*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=215*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=220*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=225*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=230*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=235*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=240*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=245*/f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, /*index=250*/f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, /*index=255*/f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, /*index=260*/f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, /*index=265*/f32[14336,256]{1,0}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, /*index=270*/f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, /*index=275*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, /*index=280*/f32[256,8,128]{2,1,0}, f32[256,14336]{1,0}, f32[256,14336]{1,0}, f32[14336,256]{1,0}, f32[4096]{0}, /*index=285*/f32[4096]{0}, f32[256,8,128]{2,1,0}, f32[32,128,256]{2,1,0}, f32[256,32,128]{2,1,0}, f32[256,8,128]{2,1,0}, /*index=290*/f32[256,128256]{1,0}, f32[128256,256]{1,0}, s32[], f32[4096]{0}, f32[256,14336]{0,1}, /*index=295*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=300*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=305*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=310*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=315*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=320*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=325*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=330*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=335*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=340*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=345*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=350*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=355*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=360*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=365*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=370*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=375*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=380*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=385*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=390*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=395*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=400*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=405*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=410*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=415*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=420*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=425*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=430*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=435*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=440*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=445*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=450*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=455*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=460*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=465*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=470*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=475*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=480*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=485*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=490*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=495*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=500*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=505*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=510*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=515*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=520*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=525*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=530*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=535*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=540*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=545*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=550*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=555*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=560*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=565*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=570*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=575*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=580*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,128256]{0,1}, f32[128256,256]{0,1}, f32[4096]{0}, /*index=585*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=590*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=595*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=600*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=605*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=610*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=615*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=620*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=625*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=630*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=635*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=640*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=645*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=650*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=655*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=660*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=665*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=670*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=675*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=680*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=685*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=690*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=695*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=700*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=705*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=710*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=715*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=720*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=725*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=730*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=735*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=740*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=745*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=750*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=755*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=760*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=765*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=770*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=775*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=780*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=785*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=790*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=795*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=800*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=805*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=810*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=815*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=820*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=825*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, /*index=830*/f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, /*index=835*/f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, /*index=840*/f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, /*index=845*/f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, /*index=850*/f32[4096]{0}, f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, /*index=855*/f32[256,14336]{0,1}, f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, /*index=860*/f32[256,8,128]{0,2,1}, f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,14336]{0,1}, /*index=865*/f32[256,14336]{0,1}, f32[14336,256]{0,1}, f32[4096]{0}, f32[4096]{0}, f32[256,8,128]{0,2,1}, /*index=870*/f32[32,128,256]{1,0,2}, f32[256,32,128]{0,2,1}, f32[256,8,128]{0,2,1}, f32[256,128256]{0,1}, f32[128256,256]{0,1}, /*index=875*/s32[], f32[], f32[], f32[], f32[], /*index=880*/f32[], s32[]) tuple(%add.2576, %add.5068, %add.5073, %add.5078, %add.5084, /*index=5*/%add.5089, %add.5094, %add.5099, %add.5104, %add.5109, /*index=10*/%add.5114, %add.5119, %add.5125, %add.5130, %add.5135, /*index=15*/%add.5140, %add.5145, %add.5150, %add.5155, %add.5161, /*index=20*/%add.5166, %add.5171, %add.5176, %add.5181, %add.5186, /*index=25*/%add.5191, %add.5196, %add.5202, %add.5207, %add.5212, /*index=30*/%add.5217, %add.5222, %add.5227, %add.5233, %add.5239, /*index=35*/%add.5244, %add.5249, %add.5255, %add.5261, %add.5267, /*index=40*/%add.5272, %add.5277, %add.5282, %add.5287, %add.5293, /*index=45*/%add.5299, %add.5305, %add.5310, %add.5315, %add.5320, /*index=50*/%add.5325, %add.5330, %add.5335, %add.5340, %add.5345, /*index=55*/%add.5350, %add.5355, %add.5360, %add.5366, %add.5371, /*index=60*/%add.5376, %add.5381, %add.5386, %add.5391, %add.5396, /*index=65*/%add.5402, %add.5407, %add.5412, %add.5417, %add.5422, /*index=70*/%add.5427, %add.5432, %add.5437, %add.5443, %add.5448, /*index=75*/%add.5453, %add.5458, %add.5463, %add.5468, %add.5473, /*index=80*/%add.5479, %add.5484, %add.5489, %add.5494, %add.5499, /*index=85*/%add.5504, %add.5510, %add.5515, %add.5521, %add.5526, /*index=90*/%add.5531, %add.5537, %add.5543, %add.5549, %add.5554, /*index=95*/%add.5559, %add.5564, %add.5569, %add.5575, %add.5581, /*index=100*/%add.5587, %add.5592, %add.5597, %add.5602, %add.5607, /*index=105*/%add.5612, %add.5617, %add.5622, %add.5627, %add.5632, /*index=110*/%add.5637, %add.5642, %add.5648, %add.5653, %add.5658, /*index=115*/%add.5663, %add.5668, %add.5673, %add.5678, %add.5684, /*index=120*/%add.5689, %add.5694, %add.5699, %add.5704, %add.5709, /*index=125*/%add.5714, %add.5720, %add.5725, %add.5730, %add.5735, /*index=130*/%add.5740, %add.5745, %add.5750, %add.5755, %add.5761, /*index=135*/%add.5766, %add.5771, %add.5776, %add.5781, %add.5786, /*index=140*/%add.5792, %add.5798, %add.5803, %add.5808, %add.5813, /*index=145*/%add.5820, %add.5826, %add.5831, %add.5836, %add.5841, /*index=150*/%add.5846, %add.5852, %add.5858, %add.5864, %add.5869, /*index=155*/%add.5874, %add.5879, %add.5884, %add.5889, %add.5894, /*index=160*/%add.5899, %add.5904, %add.5909, %add.5914, %add.5919, /*index=165*/%add.5925, %add.5930, %add.5935, %add.5940, %add.5945, /*index=170*/%add.5950, %add.5955, %add.5960, %add.5966, %add.5971, /*index=175*/%add.5976, %add.5981, %add.5986, %add.5991, %add.5996, /*index=180*/%add.6002, %add.6007, %add.6012, %add.6017, %add.6022, /*index=185*/%add.6027, %add.6032, %add.6038, %add.6043, %add.6048, /*index=190*/%add.6053, %add.6058, %add.6063, %add.6069, %add.6074, /*index=195*/%add.6080, %add.6085, %add.6090, %add.6096, %add.6102, /*index=200*/%add.6108, %add.6113, %add.6118, %add.6123, %add.6128, /*index=205*/%add.6134, %add.6140, %add.6146, %add.6151, %add.6156, /*index=210*/%add.6161, %add.6166, %add.6171, %add.6176, %add.6181, /*index=215*/%add.6186, %add.6191, %add.6196, %add.6201, %add.6207, /*index=220*/%add.6212, %add.6217, %add.6222, %add.6227, %add.6232, /*index=225*/%add.6237, %add.6243, %add.6248, %add.6253, %add.6258, /*index=230*/%add.6263, %add.6268, %add.6273, %add.6278, %add.6284, /*index=235*/%add.6289, %add.6294, %add.6299, %add.6304, %add.6309, /*index=240*/%add.6314, %add.6320, %add.6325, %add.6330, %add.6335, /*index=245*/%add.6340, %add.6345, %add.6351, %add.6357, %add.6362, /*index=250*/%add.6367, %add.6372, %add.6378, %add.6385, %add.6390, /*index=255*/%add.6395, %add.6400, %add.6405, %add.6411, %add.6416, /*index=260*/%add.6423, %add.6428, %add.6433, %add.6438, %add.6443, /*index=265*/%add.6448, %add.6453, %add.6458, %add.6463, %add.6468, /*index=270*/%add.6473, %add.6478, %add.6484, %add.6489, %add.6494, /*index=275*/%add.6499, %add.6504, %add.6509, %add.6514, %add.6519, /*index=280*/%add.6525, %add.6530, %add.6535, %add.6540, %add.6545, /*index=285*/%add.6550, %add.6555, %add.6561, %add.6566, %add.6571, /*index=290*/%add.6576, %add.6581, %select.3122, %add.5063, %add.5069, /*index=295*/%add.5074, %add.5079, %add.5085, %add.5090, %add.5095, /*index=300*/%add.5100, %add.5105, %add.5110, %add.5115, %add.5120, /*index=305*/%add.5126, %add.5131, %add.5136, %add.5141, %add.5146, /*index=310*/%add.5151, %add.5156, %add.5162, %add.5167, %add.5172, /*index=315*/%add.5177, %add.5182, %add.5187, %add.5192, %add.5198, /*index=320*/%add.5203, %add.5208, %add.5213, %add.5218, %add.5223, /*index=325*/%add.5229, %add.5234, %add.5240, %add.5245, %add.5250, /*index=330*/%add.5256, %add.5262, %add.5268, %add.5273, %add.5278, /*index=335*/%add.5283, %add.5288, %add.5294, %add.5300, %add.5306, /*index=340*/%add.5311, %add.5316, %add.5321, %add.5326, %add.5331, /*index=345*/%add.5336, %add.5341, %add.5346, %add.5351, %add.5356, /*index=350*/%add.5361, %add.5367, %add.5372, %add.5377, %add.5382, /*index=355*/%add.5387, %add.5392, %add.5397, %add.5403, %add.5408, /*index=360*/%add.5413, %add.5418, %add.5423, %add.5428, %add.5433, /*index=365*/%add.5438, %add.5444, %add.5449, %add.5454, %add.5459, /*index=370*/%add.5464, %add.5469, %add.5474, %add.5480, %add.5485, /*index=375*/%add.5490, %add.5495, %add.5500, %add.5505, %add.5511, /*index=380*/%add.5517, %add.5522, %add.5527, %add.5532, %add.5538, /*index=385*/%add.5545, %add.5550, %add.5555, %add.5560, %add.5565, /*index=390*/%add.5571, %add.5576, %add.5583, %add.5588, %add.5593, /*index=395*/%add.5598, %add.5603, %add.5608, %add.5613, %add.5618, /*index=400*/%add.5623, %add.5628, %add.5633, %add.5638, %add.5644, /*index=405*/%add.5649, %add.5654, %add.5659, %add.5664, %add.5669, /*index=410*/%add.5674, %add.5679, %add.5685, %add.5690, %add.5695, /*index=415*/%add.5700, %add.5705, %add.5710, %add.5715, %add.5721, /*index=420*/%add.5726, %add.5731, %add.5736, %add.5741, %add.5746, /*index=425*/%add.5751, %add.5756, %add.5762, %add.5767, %add.5772, /*index=430*/%add.5777, %add.5782, %add.5787, %add.5793, %add.5799, /*index=435*/%add.5804, %add.5809, %add.5815, %add.5821, %add.5827, /*index=440*/%add.5832, %add.5837, %add.5842, %add.5847, %add.5853, /*index=445*/%add.5859, %add.5865, %add.5870, %add.5875, %add.5880, /*index=450*/%add.5885, %add.5890, %add.5895, %add.5900, %add.5905, /*index=455*/%add.5910, %add.5915, %add.5920, %add.5926, %add.5931, /*index=460*/%add.5936, %add.5941, %add.5946, %add.5951, %add.5956, /*index=465*/%add.5962, %add.5967, %add.5972, %add.5977, %add.5982, /*index=470*/%add.5987, %add.5992, %add.5997, %add.6003, %add.6008, /*index=475*/%add.6013, %add.6018, %add.6023, %add.6028, %add.6033, /*index=480*/%add.6039, %add.6044, %add.6049, %add.6054, %add.6059, /*index=485*/%add.6064, %add.6070, %add.6075, %add.6081, %add.6086, /*index=490*/%add.6091, %add.6097, %add.6103, %add.6109, %add.6114, /*index=495*/%add.6119, %add.6124, %add.6129, %add.6135, %add.6141, /*index=500*/%add.6147, %add.6152, %add.6157, %add.6162, %add.6167, /*index=505*/%add.6172, %add.6177, %add.6182, %add.6187, %add.6192, /*index=510*/%add.6197, %add.6202, %add.6208, %add.6213, %add.6218, /*index=515*/%add.6223, %add.6228, %add.6233, %add.6238, %add.6244, /*index=520*/%add.6249, %add.6254, %add.6259, %add.6264, %add.6269, /*index=525*/%add.6274, %add.6280, %add.6285, %add.6290, %add.6295, /*index=530*/%add.6300, %add.6305, %add.6310, %add.6315, %add.6321, /*index=535*/%add.6326, %add.6331, %add.6336, %add.6341, %add.6346, /*index=540*/%add.6352, %add.6358, %add.6363, %add.6368, %add.6373, /*index=545*/%add.6380, %add.6386, %add.6391, %add.6396, %add.6401, /*index=550*/%add.6406, %add.6412, %add.6418, %add.6424, %add.6429, /*index=555*/%add.6434, %add.6439, %add.6444, %add.6449, %add.6454, /*index=560*/%add.6459, %add.6464, %add.6469, %add.6474, %add.6479, /*index=565*/%add.6485, %add.6490, %add.6495, %add.6500, %add.6505, /*index=570*/%add.6510, %add.6515, %add.6520, %add.6526, %add.6531, /*index=575*/%add.6536, %add.6541, %add.6546, %add.6551, %add.6556, /*index=580*/%add.6562, %add.6567, %add.6572, %add.6577, %add.5065, /*index=585*/%add.5070, %add.5075, %add.5080, %add.5086, %add.5091, /*index=590*/%add.5096, %add.5101, %add.5106, %add.5111, %add.5116, /*index=595*/%add.5122, %add.5127, %add.5132, %add.5137, %add.5142, /*index=600*/%add.5147, %add.5152, %add.5157, %add.5163, %add.5168, /*index=605*/%add.5173, %add.5178, %add.5183, %add.5188, %add.5193, /*index=610*/%add.5199, %add.5204, %add.5209, %add.5214, %add.5219, /*index=615*/%add.5224, %add.5230, %add.5235, %add.5241, %add.5246, /*index=620*/%add.5251, %add.5257, %add.5263, %add.5269, %add.5274, /*index=625*/%add.5279, %add.5284, %add.5289, %add.5295, %add.5301, /*index=630*/%add.5307, %add.5312, %add.5317, %add.5322, %add.5327, /*index=635*/%add.5332, %add.5337, %add.5342, %add.5347, %add.5352, /*index=640*/%add.5357, %add.5362, %add.5368, %add.5373, %add.5378, /*index=645*/%add.5383, %add.5388, %add.5393, %add.5398, %add.5404, /*index=650*/%add.5409, %add.5414, %add.5419, %add.5424, %add.5429, /*index=655*/%add.5434, %add.5440, %add.5445, %add.5450, %add.5455, /*index=660*/%add.5460, %add.5465, %add.5470, %add.5475, %add.5481, /*index=665*/%add.5486, %add.5491, %add.5496, %add.5501, %add.5506, /*index=670*/%add.5512, %add.5518, %add.5523, %add.5528, %add.5533, /*index=675*/%add.5540, %add.5546, %add.5551, %add.5556, %add.5561, /*index=680*/%add.5566, %add.5572, %add.5578, %add.5584, %add.5589, /*index=685*/%add.5594, %add.5599, %add.5604, %add.5609, %add.5614, /*index=690*/%add.5619, %add.5624, %add.5629, %add.5634, %add.5639, /*index=695*/%add.5645, %add.5650, %add.5655, %add.5660, %add.5665, /*index=700*/%add.5670, %add.5675, %add.5680, %add.5686, %add.5691, /*index=705*/%add.5696, %add.5701, %add.5706, %add.5711, %add.5716, /*index=710*/%add.5722, %add.5727, %add.5732, %add.5737, %add.5742, /*index=715*/%add.5747, %add.5752, %add.5758, %add.5763, %add.5768, /*index=720*/%add.5773, %add.5778, %add.5783, %add.5789, %add.5794, /*index=725*/%add.5800, %add.5805, %add.5810, %add.5816, %add.5822, /*index=730*/%add.5828, %add.5833, %add.5838, %add.5843, %add.5848, /*index=735*/%add.5854, %add.5860, %add.5866, %add.5871, %add.5876, /*index=740*/%add.5881, %add.5886, %add.5891, %add.5896, %add.5901, /*index=745*/%add.5906, %add.5911, %add.5916, %add.5921, %add.5927, /*index=750*/%add.5932, %add.5937, %add.5942, %add.5947, %add.5952, /*index=755*/%add.5957, %add.5963, %add.5968, %add.5973, %add.5978, /*index=760*/%add.5983, %add.5988, %add.5993, %add.5998, %add.6004, /*index=765*/%add.6009, %add.6014, %add.6019, %add.6024, %add.6029, /*index=770*/%add.6034, %add.6040, %add.6045, %add.6050, %add.6055, /*index=775*/%add.6060, %add.6065, %add.6071, %add.6077, %add.6082, /*index=780*/%add.6087, %add.6092, %add.6098, %add.6105, %add.6110, /*index=785*/%add.6115, %add.6120, %add.6125, %add.6131, %add.6136, /*index=790*/%add.6143, %add.6148, %add.6153, %add.6158, %add.6163, /*index=795*/%add.6168, %add.6173, %add.6178, %add.6183, %add.6188, /*index=800*/%add.6193, %add.6198, %add.6204, %add.6209, %add.6214, /*index=805*/%add.6219, %add.6224, %add.6229, %add.6234, %add.6239, /*index=810*/%add.6245, %add.6250, %add.6255, %add.6260, %add.6265, /*index=815*/%add.6270, %add.6275, %add.6281, %add.6286, %add.6291, /*index=820*/%add.6296, %add.6301, %add.6306, %add.6311, %add.6316, /*index=825*/%add.6322, %add.6327, %add.6332, %add.6337, %add.6342, /*index=830*/%add.6347, %add.6353, %add.6359, %add.6364, %add.6369, /*index=835*/%add.6375, %add.6381, %add.6387, %add.6392, %add.6397, /*index=840*/%add.6402, %add.6407, %add.6413, %add.6419, %add.6425, /*index=845*/%add.6430, %add.6435, %add.6440, %add.6445, %add.6450, /*index=850*/%add.6455, %add.6460, %add.6465, %add.6470, %add.6475, /*index=855*/%add.6480, %add.6486, %add.6491, %add.6496, %add.6501, /*index=860*/%add.6506, %add.6511, %add.6516, %add.6522, %add.6527, /*index=865*/%add.6532, %add.6537, %add.6542, %add.6547, %add.6552, /*index=870*/%add.6557, %add.6563, %add.6568, %add.6573, %add.6578, /*index=875*/%select.3421, %sqrt.292, %divide.2000, %constant.5451, %sqrt.293, /*index=880*/%sqrt.294, %all-reduce)
}

