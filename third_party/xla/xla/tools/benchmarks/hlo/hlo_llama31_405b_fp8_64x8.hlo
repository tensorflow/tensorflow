HloModule jit_train_step, input_output_alias={ {0}: (0, {}, may-alias), {1}: (1, {}, may-alias), {2}: (2, {}, may-alias), {3}: (3, {}, may-alias), {4}: (4, {}, may-alias), {5}: (5, {}, may-alias), {6}: (6, {}, may-alias), {7}: (7, {}, may-alias), {8}: (8, {}, may-alias), {9}: (9, {}, may-alias), {10}: (10, {}, may-alias), {11}: (11, {}, may-alias), {12}: (12, {}, may-alias), {13}: (13, {}, may-alias), {14}: (14, {}, may-alias), {15}: (15, {}, may-alias), {16}: (16, {}, may-alias), {17}: (17, {}, may-alias), {18}: (18, {}, may-alias), {19}: (19, {}, may-alias), {20}: (20, {}, may-alias), {21}: (21, {}, may-alias), {22}: (22, {}, may-alias), {23}: (23, {}, may-alias), {24}: (24, {}, may-alias), {25}: (25, {}, may-alias), {26}: (26, {}, may-alias), {27}: (27, {}, may-alias), {28}: (28, {}, may-alias), {29}: (29, {}, may-alias), {30}: (30, {}, may-alias), {31}: (31, {}, may-alias), {32}: (32, {}, may-alias), {33}: (33, {}, may-alias), {34}: (34, {}, may-alias), {35}: (35, {}, may-alias), {36}: (36, {}, may-alias), {37}: (37, {}, may-alias), {38}: (38, {}, may-alias), {39}: (39, {}, may-alias), {40}: (40, {}, may-alias), {41}: (41, {}, may-alias), {42}: (42, {}, may-alias), {43}: (43, {}, may-alias), {44}: (44, {}, may-alias), {45}: (45, {}, may-alias), {46}: (46, {}, may-alias), {47}: (47, {}, may-alias), {48}: (48, {}, may-alias), {49}: (49, {}, may-alias), {50}: (50, {}, may-alias), {51}: (51, {}, may-alias), {52}: (52, {}, may-alias), {53}: (53, {}, may-alias), {54}: (54, {}, may-alias), {55}: (55, {}, may-alias), {56}: (56, {}, may-alias), {57}: (57, {}, may-alias), {58}: (58, {}, may-alias), {59}: (59, {}, may-alias), {60}: (60, {}, may-alias), {61}: (61, {}, may-alias), {62}: (62, {}, may-alias), {63}: (63, {}, may-alias), {64}: (64, {}, may-alias), {65}: (65, {}, may-alias), {66}: (66, {}, may-alias), {67}: (67, {}, may-alias), {68}: (68, {}, may-alias), {69}: (69, {}, may-alias), {70}: (70, {}, may-alias), {71}: (71, {}, may-alias), {72}: (72, {}, may-alias), {73}: (73, {}, may-alias), {74}: (74, {}, may-alias), {75}: (75, {}, may-alias), {76}: (76, {}, may-alias), {77}: (77, {}, may-alias), {78}: (78, {}, may-alias), {79}: (79, {}, may-alias), {80}: (80, {}, may-alias) }, entry_computation_layout={(s32[], f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=5*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=10*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=15*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=20*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=25*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=30*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=35*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=40*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[16384]{0}, f32[32,126,53248]{2,1,0}, /*index=45*/f32[32,126,53248]{2,1,0}, f32[53248,126,32]{2,1,0}, f32[16384,126]{1,0}, f32[16384,126]{1,0}, f32[32,126,8,128]{3,2,1,0}, /*index=50*/f32[128,126,128,32]{3,2,1,0}, f32[32,126,128,128]{3,2,1,0}, f32[32,126,8,128]{3,2,1,0}, f32[32,128256]{1,0}, f32[128256,32]{1,0}, /*index=55*/s32[], f32[16384]{0}, f32[32,126,53248]{2,1,0}, f32[32,126,53248]{2,1,0}, f32[53248,126,32]{2,1,0}, /*index=60*/f32[16384,126]{1,0}, f32[16384,126]{1,0}, f32[32,126,8,128]{3,2,1,0}, f32[128,126,128,32]{3,2,1,0}, f32[32,126,128,128]{3,2,1,0}, /*index=65*/f32[32,126,8,128]{3,2,1,0}, f32[32,128256]{1,0}, f32[128256,32]{1,0}, f32[16384]{0}, f32[32,126,53248]{2,1,0}, /*index=70*/f32[32,126,53248]{2,1,0}, f32[53248,126,32]{2,1,0}, f32[16384,126]{1,0}, f32[16384,126]{1,0}, f32[32,126,8,128]{3,2,1,0}, /*index=75*/f32[128,126,128,32]{3,2,1,0}, f32[32,126,128,128]{3,2,1,0}, f32[32,126,8,128]{3,2,1,0}, f32[32,128256]{1,0}, f32[128256,32]{1,0}, /*index=80*/s32[], s32[1,8192]{1,0}, s32[1,8192]{1,0}, s32[1,8192]{1,0}, s32[1,8192]{1,0}, /*index=85*/s32[1,8192]{1,0})->(s32[], f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=5*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=10*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=15*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=20*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=25*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=30*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=35*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=40*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[16384]{0}, f32[32,126,53248]{2,1,0}, /*index=45*/f32[32,126,53248]{2,1,0}, f32[53248,126,32]{2,1,0}, f32[16384,126]{1,0}, f32[16384,126]{1,0}, f32[32,126,8,128]{3,2,1,0}, /*index=50*/f32[128,126,128,32]{3,2,1,0}, f32[32,126,128,128]{3,2,1,0}, f32[32,126,8,128]{3,2,1,0}, f32[32,128256]{1,0}, f32[128256,32]{1,0}, /*index=55*/s32[], f32[16384]{0}, f32[32,126,53248]{2,1,0}, f32[32,126,53248]{2,1,0}, f32[53248,126,32]{2,1,0}, /*index=60*/f32[16384,126]{1,0}, f32[16384,126]{1,0}, f32[32,126,8,128]{3,2,1,0}, f32[128,126,128,32]{3,2,1,0}, f32[32,126,128,128]{3,2,1,0}, /*index=65*/f32[32,126,8,128]{3,2,1,0}, f32[32,128256]{1,0}, f32[128256,32]{1,0}, f32[16384]{0}, f32[32,126,53248]{2,1,0}, /*index=70*/f32[32,126,53248]{2,1,0}, f32[53248,126,32]{2,1,0}, f32[16384,126]{1,0}, f32[16384,126]{1,0}, f32[32,126,8,128]{3,2,1,0}, /*index=75*/f32[128,126,128,32]{3,2,1,0}, f32[32,126,128,128]{3,2,1,0}, f32[32,126,8,128]{3,2,1,0}, f32[32,128256]{1,0}, f32[128256,32]{1,0}, /*index=80*/s32[], f32[], f32[], f32[], f32[], /*index=85*/f32[], s32[])}

%region_34.1844 (Arg_0.1841: bf16[], Arg_1.1842: bf16[]) -> bf16[] {
  %Arg_0.1841 = bf16[] parameter(0)
  %Arg_1.1842 = bf16[] parameter(1)
  ROOT %maximum.1843 = bf16[] maximum(%Arg_0.1841, %Arg_1.1842)
}

%region_46.2017 (Arg_0.2014: bf16[], Arg_1.2015: bf16[]) -> bf16[] {
  %Arg_0.2014 = bf16[] parameter(0)
  %Arg_1.2015 = bf16[] parameter(1)
  ROOT %maximum.2016 = bf16[] maximum(%Arg_0.2014, %Arg_1.2015)
}

%region_68.2537 (Arg_0.2534: bf16[], Arg_1.2535: bf16[]) -> bf16[] {
  %Arg_0.2534 = bf16[] parameter(0)
  %Arg_1.2535 = bf16[] parameter(1)
  ROOT %maximum.2536 = bf16[] maximum(%Arg_0.2534, %Arg_1.2535)
}

%region_175.4369 (Arg_0.4366: f32[], Arg_1.4367: f32[]) -> f32[] {
  %Arg_0.4366 = f32[] parameter(0)
  %Arg_1.4367 = f32[] parameter(1)
  ROOT %add.4368 = f32[] add(%Arg_0.4366, %Arg_1.4367)
}

%region_176.4375 (Arg_0.4372: f32[], Arg_1.4373: f32[]) -> f32[] {
  %Arg_0.4372 = f32[] parameter(0)
  %Arg_1.4373 = f32[] parameter(1)
  ROOT %add.4374 = f32[] add(%Arg_0.4372, %Arg_1.4373)
}

%region_177.4382 (Arg_0.4379: f32[], Arg_1.4380: f32[]) -> f32[] {
  %Arg_0.4379 = f32[] parameter(0)
  %Arg_1.4380 = f32[] parameter(1)
  ROOT %add.4381 = f32[] add(%Arg_0.4379, %Arg_1.4380)
}

%region_178.4389 (Arg_0.4386: f32[], Arg_1.4387: f32[]) -> f32[] {
  %Arg_0.4386 = f32[] parameter(0)
  %Arg_1.4387 = f32[] parameter(1)
  ROOT %add.4388 = f32[] add(%Arg_0.4386, %Arg_1.4387)
}

%region_179.4396 (Arg_0.4393: f32[], Arg_1.4394: f32[]) -> f32[] {
  %Arg_0.4393 = f32[] parameter(0)
  %Arg_1.4394 = f32[] parameter(1)
  ROOT %add.4395 = f32[] add(%Arg_0.4393, %Arg_1.4394)
}

%region_180.4403 (Arg_0.4400: f32[], Arg_1.4401: f32[]) -> f32[] {
  %Arg_0.4400 = f32[] parameter(0)
  %Arg_1.4401 = f32[] parameter(1)
  ROOT %add.4402 = f32[] add(%Arg_0.4400, %Arg_1.4401)
}

%region_181.4410 (Arg_0.4407: f32[], Arg_1.4408: f32[]) -> f32[] {
  %Arg_0.4407 = f32[] parameter(0)
  %Arg_1.4408 = f32[] parameter(1)
  ROOT %add.4409 = f32[] add(%Arg_0.4407, %Arg_1.4408)
}

%region_182.4417 (Arg_0.4414: f32[], Arg_1.4415: f32[]) -> f32[] {
  %Arg_0.4414 = f32[] parameter(0)
  %Arg_1.4415 = f32[] parameter(1)
  ROOT %add.4416 = f32[] add(%Arg_0.4414, %Arg_1.4415)
}

%region_183.4424 (Arg_0.4421: f32[], Arg_1.4422: f32[]) -> f32[] {
  %Arg_0.4421 = f32[] parameter(0)
  %Arg_1.4422 = f32[] parameter(1)
  ROOT %add.4423 = f32[] add(%Arg_0.4421, %Arg_1.4422)
}

%region_184.4431 (Arg_0.4428: f32[], Arg_1.4429: f32[]) -> f32[] {
  %Arg_0.4428 = f32[] parameter(0)
  %Arg_1.4429 = f32[] parameter(1)
  ROOT %add.4430 = f32[] add(%Arg_0.4428, %Arg_1.4429)
}

%region_185.4438 (Arg_0.4435: f32[], Arg_1.4436: f32[]) -> f32[] {
  %Arg_0.4435 = f32[] parameter(0)
  %Arg_1.4436 = f32[] parameter(1)
  ROOT %add.4437 = f32[] add(%Arg_0.4435, %Arg_1.4436)
}

%region_186.4445 (Arg_0.4442: f32[], Arg_1.4443: f32[]) -> f32[] {
  %Arg_0.4442 = f32[] parameter(0)
  %Arg_1.4443 = f32[] parameter(1)
  ROOT %add.4444 = f32[] add(%Arg_0.4442, %Arg_1.4443)
}

%region_187.4452 (Arg_0.4449: f32[], Arg_1.4450: f32[]) -> f32[] {
  %Arg_0.4449 = f32[] parameter(0)
  %Arg_1.4450 = f32[] parameter(1)
  ROOT %add.4451 = f32[] add(%Arg_0.4449, %Arg_1.4450)
}

%region_188.4459 (Arg_0.4456: f32[], Arg_1.4457: f32[]) -> f32[] {
  %Arg_0.4456 = f32[] parameter(0)
  %Arg_1.4457 = f32[] parameter(1)
  ROOT %add.4458 = f32[] add(%Arg_0.4456, %Arg_1.4457)
}

%region_189.4466 (Arg_0.4463: f32[], Arg_1.4464: f32[]) -> f32[] {
  %Arg_0.4463 = f32[] parameter(0)
  %Arg_1.4464 = f32[] parameter(1)
  ROOT %add.4465 = f32[] add(%Arg_0.4463, %Arg_1.4464)
}

%region_190.4473 (Arg_0.4470: f32[], Arg_1.4471: f32[]) -> f32[] {
  %Arg_0.4470 = f32[] parameter(0)
  %Arg_1.4471 = f32[] parameter(1)
  ROOT %add.4472 = f32[] add(%Arg_0.4470, %Arg_1.4471)
}

%region_191.4480 (Arg_0.4477: f32[], Arg_1.4478: f32[]) -> f32[] {
  %Arg_0.4477 = f32[] parameter(0)
  %Arg_1.4478 = f32[] parameter(1)
  ROOT %add.4479 = f32[] add(%Arg_0.4477, %Arg_1.4478)
}

%region_192.4487 (Arg_0.4484: f32[], Arg_1.4485: f32[]) -> f32[] {
  %Arg_0.4484 = f32[] parameter(0)
  %Arg_1.4485 = f32[] parameter(1)
  ROOT %add.4486 = f32[] add(%Arg_0.4484, %Arg_1.4485)
}

%region_193.4494 (Arg_0.4491: f32[], Arg_1.4492: f32[]) -> f32[] {
  %Arg_0.4491 = f32[] parameter(0)
  %Arg_1.4492 = f32[] parameter(1)
  ROOT %add.4493 = f32[] add(%Arg_0.4491, %Arg_1.4492)
}

%region_194.4501 (Arg_0.4498: f32[], Arg_1.4499: f32[]) -> f32[] {
  %Arg_0.4498 = f32[] parameter(0)
  %Arg_1.4499 = f32[] parameter(1)
  ROOT %add.4500 = f32[] add(%Arg_0.4498, %Arg_1.4499)
}

%region_195.4508 (Arg_0.4505: f32[], Arg_1.4506: f32[]) -> f32[] {
  %Arg_0.4505 = f32[] parameter(0)
  %Arg_1.4506 = f32[] parameter(1)
  ROOT %add.4507 = f32[] add(%Arg_0.4505, %Arg_1.4506)
}

%region_196.4515 (Arg_0.4512: f32[], Arg_1.4513: f32[]) -> f32[] {
  %Arg_0.4512 = f32[] parameter(0)
  %Arg_1.4513 = f32[] parameter(1)
  ROOT %add.4514 = f32[] add(%Arg_0.4512, %Arg_1.4513)
}

%region_197.4522 (Arg_0.4519: f32[], Arg_1.4520: f32[]) -> f32[] {
  %Arg_0.4519 = f32[] parameter(0)
  %Arg_1.4520 = f32[] parameter(1)
  ROOT %add.4521 = f32[] add(%Arg_0.4519, %Arg_1.4520)
}

%region_198.4529 (Arg_0.4526: f32[], Arg_1.4527: f32[]) -> f32[] {
  %Arg_0.4526 = f32[] parameter(0)
  %Arg_1.4527 = f32[] parameter(1)
  ROOT %add.4528 = f32[] add(%Arg_0.4526, %Arg_1.4527)
}

%region_199.4536 (Arg_0.4533: f32[], Arg_1.4534: f32[]) -> f32[] {
  %Arg_0.4533 = f32[] parameter(0)
  %Arg_1.4534 = f32[] parameter(1)
  ROOT %add.4535 = f32[] add(%Arg_0.4533, %Arg_1.4534)
}

%region_200.4543 (Arg_0.4540: f32[], Arg_1.4541: f32[]) -> f32[] {
  %Arg_0.4540 = f32[] parameter(0)
  %Arg_1.4541 = f32[] parameter(1)
  ROOT %add.4542 = f32[] add(%Arg_0.4540, %Arg_1.4541)
}

%region_201.4550 (Arg_0.4547: f32[], Arg_1.4548: f32[]) -> f32[] {
  %Arg_0.4547 = f32[] parameter(0)
  %Arg_1.4548 = f32[] parameter(1)
  ROOT %add.4549 = f32[] add(%Arg_0.4547, %Arg_1.4548)
}

%region_202.4557 (Arg_0.4554: f32[], Arg_1.4555: f32[]) -> f32[] {
  %Arg_0.4554 = f32[] parameter(0)
  %Arg_1.4555 = f32[] parameter(1)
  ROOT %add.4556 = f32[] add(%Arg_0.4554, %Arg_1.4555)
}

%region_203.4564 (Arg_0.4561: f32[], Arg_1.4562: f32[]) -> f32[] {
  %Arg_0.4561 = f32[] parameter(0)
  %Arg_1.4562 = f32[] parameter(1)
  ROOT %add.4563 = f32[] add(%Arg_0.4561, %Arg_1.4562)
}

%region_204.4571 (Arg_0.4568: f32[], Arg_1.4569: f32[]) -> f32[] {
  %Arg_0.4568 = f32[] parameter(0)
  %Arg_1.4569 = f32[] parameter(1)
  ROOT %add.4570 = f32[] add(%Arg_0.4568, %Arg_1.4569)
}

%region_205.4578 (Arg_0.4575: f32[], Arg_1.4576: f32[]) -> f32[] {
  %Arg_0.4575 = f32[] parameter(0)
  %Arg_1.4576 = f32[] parameter(1)
  ROOT %add.4577 = f32[] add(%Arg_0.4575, %Arg_1.4576)
}

%region_206.4585 (Arg_0.4582: f32[], Arg_1.4583: f32[]) -> f32[] {
  %Arg_0.4582 = f32[] parameter(0)
  %Arg_1.4583 = f32[] parameter(1)
  ROOT %add.4584 = f32[] add(%Arg_0.4582, %Arg_1.4583)
}

%region_207.4592 (Arg_0.4589: f32[], Arg_1.4590: f32[]) -> f32[] {
  %Arg_0.4589 = f32[] parameter(0)
  %Arg_1.4590 = f32[] parameter(1)
  ROOT %add.4591 = f32[] add(%Arg_0.4589, %Arg_1.4590)
}

%region_208.4599 (Arg_0.4596: f32[], Arg_1.4597: f32[]) -> f32[] {
  %Arg_0.4596 = f32[] parameter(0)
  %Arg_1.4597 = f32[] parameter(1)
  ROOT %add.4598 = f32[] add(%Arg_0.4596, %Arg_1.4597)
}

%region_209.4606 (Arg_0.4603: f32[], Arg_1.4604: f32[]) -> f32[] {
  %Arg_0.4603 = f32[] parameter(0)
  %Arg_1.4604 = f32[] parameter(1)
  ROOT %add.4605 = f32[] add(%Arg_0.4603, %Arg_1.4604)
}

%region_210.4613 (Arg_0.4610: f32[], Arg_1.4611: f32[]) -> f32[] {
  %Arg_0.4610 = f32[] parameter(0)
  %Arg_1.4611 = f32[] parameter(1)
  ROOT %add.4612 = f32[] add(%Arg_0.4610, %Arg_1.4611)
}

%region_211.4620 (Arg_0.4617: f32[], Arg_1.4618: f32[]) -> f32[] {
  %Arg_0.4617 = f32[] parameter(0)
  %Arg_1.4618 = f32[] parameter(1)
  ROOT %add.4619 = f32[] add(%Arg_0.4617, %Arg_1.4618)
}

%region_212.4627 (Arg_0.4624: f32[], Arg_1.4625: f32[]) -> f32[] {
  %Arg_0.4624 = f32[] parameter(0)
  %Arg_1.4625 = f32[] parameter(1)
  ROOT %add.4626 = f32[] add(%Arg_0.4624, %Arg_1.4625)
}

%region_213.4634 (Arg_0.4631: f32[], Arg_1.4632: f32[]) -> f32[] {
  %Arg_0.4631 = f32[] parameter(0)
  %Arg_1.4632 = f32[] parameter(1)
  ROOT %add.4633 = f32[] add(%Arg_0.4631, %Arg_1.4632)
}

%region_214.4641 (Arg_0.4638: f32[], Arg_1.4639: f32[]) -> f32[] {
  %Arg_0.4638 = f32[] parameter(0)
  %Arg_1.4639 = f32[] parameter(1)
  ROOT %add.4640 = f32[] add(%Arg_0.4638, %Arg_1.4639)
}

%region_215.4648 (Arg_0.4645: f32[], Arg_1.4646: f32[]) -> f32[] {
  %Arg_0.4645 = f32[] parameter(0)
  %Arg_1.4646 = f32[] parameter(1)
  ROOT %add.4647 = f32[] add(%Arg_0.4645, %Arg_1.4646)
}

%region_216.4655 (Arg_0.4652: f32[], Arg_1.4653: f32[]) -> f32[] {
  %Arg_0.4652 = f32[] parameter(0)
  %Arg_1.4653 = f32[] parameter(1)
  ROOT %add.4654 = f32[] add(%Arg_0.4652, %Arg_1.4653)
}

%region_217.4662 (Arg_0.4659: f32[], Arg_1.4660: f32[]) -> f32[] {
  %Arg_0.4659 = f32[] parameter(0)
  %Arg_1.4660 = f32[] parameter(1)
  ROOT %add.4661 = f32[] add(%Arg_0.4659, %Arg_1.4660)
}

%region_218.4669 (Arg_0.4666: f32[], Arg_1.4667: f32[]) -> f32[] {
  %Arg_0.4666 = f32[] parameter(0)
  %Arg_1.4667 = f32[] parameter(1)
  ROOT %add.4668 = f32[] add(%Arg_0.4666, %Arg_1.4667)
}

%region_219.4676 (Arg_0.4673: f32[], Arg_1.4674: f32[]) -> f32[] {
  %Arg_0.4673 = f32[] parameter(0)
  %Arg_1.4674 = f32[] parameter(1)
  ROOT %add.4675 = f32[] add(%Arg_0.4673, %Arg_1.4674)
}

%region_220.4683 (Arg_0.4680: f32[], Arg_1.4681: f32[]) -> f32[] {
  %Arg_0.4680 = f32[] parameter(0)
  %Arg_1.4681 = f32[] parameter(1)
  ROOT %add.4682 = f32[] add(%Arg_0.4680, %Arg_1.4681)
}

%region_221.4690 (Arg_0.4687: f32[], Arg_1.4688: f32[]) -> f32[] {
  %Arg_0.4687 = f32[] parameter(0)
  %Arg_1.4688 = f32[] parameter(1)
  ROOT %add.4689 = f32[] add(%Arg_0.4687, %Arg_1.4688)
}

%region_222.4697 (Arg_0.4694: f32[], Arg_1.4695: f32[]) -> f32[] {
  %Arg_0.4694 = f32[] parameter(0)
  %Arg_1.4695 = f32[] parameter(1)
  ROOT %add.4696 = f32[] add(%Arg_0.4694, %Arg_1.4695)
}

%region_223.4704 (Arg_0.4701: f32[], Arg_1.4702: f32[]) -> f32[] {
  %Arg_0.4701 = f32[] parameter(0)
  %Arg_1.4702 = f32[] parameter(1)
  ROOT %add.4703 = f32[] add(%Arg_0.4701, %Arg_1.4702)
}

%region_224.4711 (Arg_0.4708: f32[], Arg_1.4709: f32[]) -> f32[] {
  %Arg_0.4708 = f32[] parameter(0)
  %Arg_1.4709 = f32[] parameter(1)
  ROOT %add.4710 = f32[] add(%Arg_0.4708, %Arg_1.4709)
}

%region_225.4718 (Arg_0.4715: f32[], Arg_1.4716: f32[]) -> f32[] {
  %Arg_0.4715 = f32[] parameter(0)
  %Arg_1.4716 = f32[] parameter(1)
  ROOT %add.4717 = f32[] add(%Arg_0.4715, %Arg_1.4716)
}

%region_226.4725 (Arg_0.4722: f32[], Arg_1.4723: f32[]) -> f32[] {
  %Arg_0.4722 = f32[] parameter(0)
  %Arg_1.4723 = f32[] parameter(1)
  ROOT %add.4724 = f32[] add(%Arg_0.4722, %Arg_1.4723)
}

%region_227.4732 (Arg_0.4729: f32[], Arg_1.4730: f32[]) -> f32[] {
  %Arg_0.4729 = f32[] parameter(0)
  %Arg_1.4730 = f32[] parameter(1)
  ROOT %add.4731 = f32[] add(%Arg_0.4729, %Arg_1.4730)
}

%region_228.4739 (Arg_0.4736: f32[], Arg_1.4737: f32[]) -> f32[] {
  %Arg_0.4736 = f32[] parameter(0)
  %Arg_1.4737 = f32[] parameter(1)
  ROOT %add.4738 = f32[] add(%Arg_0.4736, %Arg_1.4737)
}

%region_229.4747 (Arg_0.4744: f32[], Arg_1.4745: f32[]) -> f32[] {
  %Arg_0.4744 = f32[] parameter(0)
  %Arg_1.4745 = f32[] parameter(1)
  ROOT %add.4746 = f32[] add(%Arg_0.4744, %Arg_1.4745)
}

%region_230.4753 (Arg_0.4750: f32[], Arg_1.4751: f32[]) -> f32[] {
  %Arg_0.4750 = f32[] parameter(0)
  %Arg_1.4751 = f32[] parameter(1)
  ROOT %add.4752 = f32[] add(%Arg_0.4750, %Arg_1.4751)
}

%region_231.4760 (Arg_0.4757: f32[], Arg_1.4758: f32[]) -> f32[] {
  %Arg_0.4757 = f32[] parameter(0)
  %Arg_1.4758 = f32[] parameter(1)
  ROOT %add.4759 = f32[] add(%Arg_0.4757, %Arg_1.4758)
}

%region_232.4767 (Arg_0.4764: f32[], Arg_1.4765: f32[]) -> f32[] {
  %Arg_0.4764 = f32[] parameter(0)
  %Arg_1.4765 = f32[] parameter(1)
  ROOT %add.4766 = f32[] add(%Arg_0.4764, %Arg_1.4765)
}

%region_233.4774 (Arg_0.4771: f32[], Arg_1.4772: f32[]) -> f32[] {
  %Arg_0.4771 = f32[] parameter(0)
  %Arg_1.4772 = f32[] parameter(1)
  ROOT %add.4773 = f32[] add(%Arg_0.4771, %Arg_1.4772)
}

%region_234.4781 (Arg_0.4778: f32[], Arg_1.4779: f32[]) -> f32[] {
  %Arg_0.4778 = f32[] parameter(0)
  %Arg_1.4779 = f32[] parameter(1)
  ROOT %add.4780 = f32[] add(%Arg_0.4778, %Arg_1.4779)
}

%region_235.4788 (Arg_0.4785: f32[], Arg_1.4786: f32[]) -> f32[] {
  %Arg_0.4785 = f32[] parameter(0)
  %Arg_1.4786 = f32[] parameter(1)
  ROOT %add.4787 = f32[] add(%Arg_0.4785, %Arg_1.4786)
}

%region_236.4795 (Arg_0.4792: f32[], Arg_1.4793: f32[]) -> f32[] {
  %Arg_0.4792 = f32[] parameter(0)
  %Arg_1.4793 = f32[] parameter(1)
  ROOT %add.4794 = f32[] add(%Arg_0.4792, %Arg_1.4793)
}

%region_237.4802 (Arg_0.4799: f32[], Arg_1.4800: f32[]) -> f32[] {
  %Arg_0.4799 = f32[] parameter(0)
  %Arg_1.4800 = f32[] parameter(1)
  ROOT %add.4801 = f32[] add(%Arg_0.4799, %Arg_1.4800)
}

%region_238.4809 (Arg_0.4806: f32[], Arg_1.4807: f32[]) -> f32[] {
  %Arg_0.4806 = f32[] parameter(0)
  %Arg_1.4807 = f32[] parameter(1)
  ROOT %add.4808 = f32[] add(%Arg_0.4806, %Arg_1.4807)
}

%region_239.4816 (Arg_0.4813: f32[], Arg_1.4814: f32[]) -> f32[] {
  %Arg_0.4813 = f32[] parameter(0)
  %Arg_1.4814 = f32[] parameter(1)
  ROOT %add.4815 = f32[] add(%Arg_0.4813, %Arg_1.4814)
}

%region_240.4823 (Arg_0.4820: f32[], Arg_1.4821: f32[]) -> f32[] {
  %Arg_0.4820 = f32[] parameter(0)
  %Arg_1.4821 = f32[] parameter(1)
  ROOT %add.4822 = f32[] add(%Arg_0.4820, %Arg_1.4821)
}

%region_241.4830 (Arg_0.4827: f32[], Arg_1.4828: f32[]) -> f32[] {
  %Arg_0.4827 = f32[] parameter(0)
  %Arg_1.4828 = f32[] parameter(1)
  ROOT %add.4829 = f32[] add(%Arg_0.4827, %Arg_1.4828)
}

%region_242.4837 (Arg_0.4834: f32[], Arg_1.4835: f32[]) -> f32[] {
  %Arg_0.4834 = f32[] parameter(0)
  %Arg_1.4835 = f32[] parameter(1)
  ROOT %add.4836 = f32[] add(%Arg_0.4834, %Arg_1.4835)
}

%region_243.4844 (Arg_0.4841: f32[], Arg_1.4842: f32[]) -> f32[] {
  %Arg_0.4841 = f32[] parameter(0)
  %Arg_1.4842 = f32[] parameter(1)
  ROOT %add.4843 = f32[] add(%Arg_0.4841, %Arg_1.4842)
}

%region_244.4851 (Arg_0.4848: f32[], Arg_1.4849: f32[]) -> f32[] {
  %Arg_0.4848 = f32[] parameter(0)
  %Arg_1.4849 = f32[] parameter(1)
  ROOT %add.4850 = f32[] add(%Arg_0.4848, %Arg_1.4849)
}

%region_245.4858 (Arg_0.4855: f32[], Arg_1.4856: f32[]) -> f32[] {
  %Arg_0.4855 = f32[] parameter(0)
  %Arg_1.4856 = f32[] parameter(1)
  ROOT %add.4857 = f32[] add(%Arg_0.4855, %Arg_1.4856)
}

%region_246.4865 (Arg_0.4862: f32[], Arg_1.4863: f32[]) -> f32[] {
  %Arg_0.4862 = f32[] parameter(0)
  %Arg_1.4863 = f32[] parameter(1)
  ROOT %add.4864 = f32[] add(%Arg_0.4862, %Arg_1.4863)
}

%region_247.4872 (Arg_0.4869: f32[], Arg_1.4870: f32[]) -> f32[] {
  %Arg_0.4869 = f32[] parameter(0)
  %Arg_1.4870 = f32[] parameter(1)
  ROOT %add.4871 = f32[] add(%Arg_0.4869, %Arg_1.4870)
}

%region_248.4879 (Arg_0.4876: f32[], Arg_1.4877: f32[]) -> f32[] {
  %Arg_0.4876 = f32[] parameter(0)
  %Arg_1.4877 = f32[] parameter(1)
  ROOT %add.4878 = f32[] add(%Arg_0.4876, %Arg_1.4877)
}

%region_249.4886 (Arg_0.4883: f32[], Arg_1.4884: f32[]) -> f32[] {
  %Arg_0.4883 = f32[] parameter(0)
  %Arg_1.4884 = f32[] parameter(1)
  ROOT %add.4885 = f32[] add(%Arg_0.4883, %Arg_1.4884)
}

%region_250.4893 (Arg_0.4890: f32[], Arg_1.4891: f32[]) -> f32[] {
  %Arg_0.4890 = f32[] parameter(0)
  %Arg_1.4891 = f32[] parameter(1)
  ROOT %add.4892 = f32[] add(%Arg_0.4890, %Arg_1.4891)
}

%region_251.4900 (Arg_0.4897: f32[], Arg_1.4898: f32[]) -> f32[] {
  %Arg_0.4897 = f32[] parameter(0)
  %Arg_1.4898 = f32[] parameter(1)
  ROOT %add.4899 = f32[] add(%Arg_0.4897, %Arg_1.4898)
}

%region_252.4907 (Arg_0.4904: f32[], Arg_1.4905: f32[]) -> f32[] {
  %Arg_0.4904 = f32[] parameter(0)
  %Arg_1.4905 = f32[] parameter(1)
  ROOT %add.4906 = f32[] add(%Arg_0.4904, %Arg_1.4905)
}

%region_253.4914 (Arg_0.4911: f32[], Arg_1.4912: f32[]) -> f32[] {
  %Arg_0.4911 = f32[] parameter(0)
  %Arg_1.4912 = f32[] parameter(1)
  ROOT %add.4913 = f32[] add(%Arg_0.4911, %Arg_1.4912)
}

%region_254.4921 (Arg_0.4918: f32[], Arg_1.4919: f32[]) -> f32[] {
  %Arg_0.4918 = f32[] parameter(0)
  %Arg_1.4919 = f32[] parameter(1)
  ROOT %add.4920 = f32[] add(%Arg_0.4918, %Arg_1.4919)
}

%region_255.4928 (Arg_0.4925: f32[], Arg_1.4926: f32[]) -> f32[] {
  %Arg_0.4925 = f32[] parameter(0)
  %Arg_1.4926 = f32[] parameter(1)
  ROOT %add.4927 = f32[] add(%Arg_0.4925, %Arg_1.4926)
}

%region_256.4935 (Arg_0.4932: f32[], Arg_1.4933: f32[]) -> f32[] {
  %Arg_0.4932 = f32[] parameter(0)
  %Arg_1.4933 = f32[] parameter(1)
  ROOT %add.4934 = f32[] add(%Arg_0.4932, %Arg_1.4933)
}

%region_257.4942 (Arg_0.4939: f32[], Arg_1.4940: f32[]) -> f32[] {
  %Arg_0.4939 = f32[] parameter(0)
  %Arg_1.4940 = f32[] parameter(1)
  ROOT %add.4941 = f32[] add(%Arg_0.4939, %Arg_1.4940)
}

%region_258.4949 (Arg_0.4946: f32[], Arg_1.4947: f32[]) -> f32[] {
  %Arg_0.4946 = f32[] parameter(0)
  %Arg_1.4947 = f32[] parameter(1)
  ROOT %add.4948 = f32[] add(%Arg_0.4946, %Arg_1.4947)
}

%region_259.4956 (Arg_0.4953: f32[], Arg_1.4954: f32[]) -> f32[] {
  %Arg_0.4953 = f32[] parameter(0)
  %Arg_1.4954 = f32[] parameter(1)
  ROOT %add.4955 = f32[] add(%Arg_0.4953, %Arg_1.4954)
}

%region_260.4963 (Arg_0.4960: f32[], Arg_1.4961: f32[]) -> f32[] {
  %Arg_0.4960 = f32[] parameter(0)
  %Arg_1.4961 = f32[] parameter(1)
  ROOT %add.4962 = f32[] add(%Arg_0.4960, %Arg_1.4961)
}

%region_261.4970 (Arg_0.4967: f32[], Arg_1.4968: f32[]) -> f32[] {
  %Arg_0.4967 = f32[] parameter(0)
  %Arg_1.4968 = f32[] parameter(1)
  ROOT %add.4969 = f32[] add(%Arg_0.4967, %Arg_1.4968)
}

%region_262.4977 (Arg_0.4974: f32[], Arg_1.4975: f32[]) -> f32[] {
  %Arg_0.4974 = f32[] parameter(0)
  %Arg_1.4975 = f32[] parameter(1)
  ROOT %add.4976 = f32[] add(%Arg_0.4974, %Arg_1.4975)
}

%region_263.4984 (Arg_0.4981: f32[], Arg_1.4982: f32[]) -> f32[] {
  %Arg_0.4981 = f32[] parameter(0)
  %Arg_1.4982 = f32[] parameter(1)
  ROOT %add.4983 = f32[] add(%Arg_0.4981, %Arg_1.4982)
}

%region_264.4991 (Arg_0.4988: f32[], Arg_1.4989: f32[]) -> f32[] {
  %Arg_0.4988 = f32[] parameter(0)
  %Arg_1.4989 = f32[] parameter(1)
  ROOT %add.4990 = f32[] add(%Arg_0.4988, %Arg_1.4989)
}

%region_265.4998 (Arg_0.4995: f32[], Arg_1.4996: f32[]) -> f32[] {
  %Arg_0.4995 = f32[] parameter(0)
  %Arg_1.4996 = f32[] parameter(1)
  ROOT %add.4997 = f32[] add(%Arg_0.4995, %Arg_1.4996)
}

%region_266.5005 (Arg_0.5002: f32[], Arg_1.5003: f32[]) -> f32[] {
  %Arg_0.5002 = f32[] parameter(0)
  %Arg_1.5003 = f32[] parameter(1)
  ROOT %add.5004 = f32[] add(%Arg_0.5002, %Arg_1.5003)
}

%region_267.5012 (Arg_0.5009: f32[], Arg_1.5010: f32[]) -> f32[] {
  %Arg_0.5009 = f32[] parameter(0)
  %Arg_1.5010 = f32[] parameter(1)
  ROOT %add.5011 = f32[] add(%Arg_0.5009, %Arg_1.5010)
}

%region_268.5019 (Arg_0.5016: f32[], Arg_1.5017: f32[]) -> f32[] {
  %Arg_0.5016 = f32[] parameter(0)
  %Arg_1.5017 = f32[] parameter(1)
  ROOT %add.5018 = f32[] add(%Arg_0.5016, %Arg_1.5017)
}

%region_269.5026 (Arg_0.5023: f32[], Arg_1.5024: f32[]) -> f32[] {
  %Arg_0.5023 = f32[] parameter(0)
  %Arg_1.5024 = f32[] parameter(1)
  ROOT %add.5025 = f32[] add(%Arg_0.5023, %Arg_1.5024)
}

%region_270.5033 (Arg_0.5030: f32[], Arg_1.5031: f32[]) -> f32[] {
  %Arg_0.5030 = f32[] parameter(0)
  %Arg_1.5031 = f32[] parameter(1)
  ROOT %add.5032 = f32[] add(%Arg_0.5030, %Arg_1.5031)
}

%region_7.194._custom_call_lowering_rule (Arg_0.191: s32[], Arg_1.192: s32[]) -> s32[] {
  %Arg_0.191 = s32[] parameter(0)
  %Arg_1.192 = s32[] parameter(1)
  ROOT %add.193 = s32[] add(%Arg_0.191, %Arg_1.192)
}

%region_10.224._custom_call_lowering_rule (Arg_0.222: s32[], Arg_1.223: s32[]) -> s32[] {
  %Arg_0.222 = s32[] parameter(0)
  ROOT %Arg_1.223 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule (Arg_0.200: pred[], Arg_1.201: pred[]) -> pred[] {
  %Arg_0.200 = pred[] parameter(0)
  ROOT %Arg_1.201 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule (Arg_0.210: s32[], Arg_1.211: s32[]) -> s32[] {
  %Arg_0.210 = s32[] parameter(0)
  %Arg_1.211 = s32[] parameter(1)
  ROOT %add.212 = s32[] add(%Arg_0.210, %Arg_1.211)
}

%region_7.194._custom_call_lowering_rule.1 (Arg_0.117: s32[], Arg_1.97: s32[]) -> s32[] {
  %Arg_0.117 = s32[] parameter(0)
  %Arg_1.97 = s32[] parameter(1)
  ROOT %add.119 = s32[] add(%Arg_0.117, %Arg_1.97)
}

%region_10.224._custom_call_lowering_rule.1 (Arg_0.118: s32[], Arg_1.98: s32[]) -> s32[] {
  %Arg_0.118 = s32[] parameter(0)
  ROOT %Arg_1.98 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.1 (Arg_0.119: pred[], Arg_1.99: pred[]) -> pred[] {
  %Arg_0.119 = pred[] parameter(0)
  ROOT %Arg_1.99 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.1 (Arg_0.120: s32[], Arg_1.100: s32[]) -> s32[] {
  %Arg_0.120 = s32[] parameter(0)
  %Arg_1.100 = s32[] parameter(1)
  ROOT %add.120 = s32[] add(%Arg_0.120, %Arg_1.100)
}

%region_0.64._custom_call_lowering_rule (Arg_0.122: s32[], Arg_1.102: s32[], Arg_2.85: s32[], Arg_3.62: s32[]) -> pred[] {
  %Arg_2.85 = s32[] parameter(2)
  %Arg_3.62 = s32[] parameter(3)
  %Arg_0.122 = s32[] parameter(0)
  %Arg_1.102 = s32[] parameter(1)
  ROOT %compare.258 = pred[] compare(%Arg_0.122, %Arg_1.102), direction=LT
}

%region_1.77._custom_call_lowering_rule (Arg_0.123: s32[], Arg_1.103: s32[]) -> s32[] {
  %Arg_0.123 = s32[] parameter(0)
  %Arg_1.103 = s32[] parameter(1)
  ROOT %add.121 = s32[] add(%Arg_0.123, %Arg_1.103)
}

%region_5.173._custom_call_lowering_rule (Arg_0.171: s32[], Arg_1.172: s32[]) -> s32[] {
  %Arg_0.171 = s32[] parameter(0)
  ROOT %Arg_1.172 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule (Arg_0.124: pred[], Arg_1.104: pred[]) -> pred[] {
  %Arg_0.124 = pred[] parameter(0)
  ROOT %Arg_1.104 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule (Arg_0.125: s32[], Arg_1.105: s32[]) -> s32[] {
  %Arg_0.125 = s32[] parameter(0)
  %Arg_1.105 = s32[] parameter(1)
  ROOT %add.122 = s32[] add(%Arg_0.125, %Arg_1.105)
}

%region_4.113._custom_call_lowering_rule (Arg_0.126: s32[], Arg_1.111: s32[]) -> s32[] {
  %Arg_0.126 = s32[] parameter(0)
  %Arg_1.111 = s32[] parameter(1)
  ROOT %add.123 = s32[] add(%Arg_0.126, %Arg_1.111)
}

%region_6.181._custom_call_lowering_rule (Arg_0.179: s32[], Arg_1.180: s32[]) -> s32[] {
  %Arg_0.179 = s32[] parameter(0)
  ROOT %Arg_1.180 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule (Arg_0.194: s32[], Arg_1.195: s32[]) -> s32[] {
  %Arg_0.194 = s32[] parameter(0)
  %Arg_1.195 = s32[] parameter(1)
  ROOT %add.196 = s32[] add(%Arg_0.194, %Arg_1.195)
}

%region_10.227._custom_call_lowering_rule (Arg_0.225: s32[], Arg_1.226: s32[]) -> s32[] {
  %Arg_0.225 = s32[] parameter(0)
  ROOT %Arg_1.226 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule (Arg_0.203: pred[], Arg_1.204: pred[]) -> pred[] {
  %Arg_0.203 = pred[] parameter(0)
  ROOT %Arg_1.204 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule (Arg_0.213: s32[], Arg_1.214: s32[]) -> s32[] {
  %Arg_0.213 = s32[] parameter(0)
  %Arg_1.214 = s32[] parameter(1)
  ROOT %add.215 = s32[] add(%Arg_0.213, %Arg_1.214)
}

%region_11.235._custom_call_lowering_rule (Arg_0.233: s32[], Arg_1.234: s32[]) -> s32[] {
  %Arg_0.233 = s32[] parameter(0)
  ROOT %Arg_1.234 = s32[] parameter(1)
}

%region_26.1375 (Arg_0.1372: s32[], Arg_1.1373: s32[]) -> s32[] {
  %Arg_0.1372 = s32[] parameter(0)
  %Arg_1.1373 = s32[] parameter(1)
  ROOT %add.1374 = s32[] add(%Arg_0.1372, %Arg_1.1373)
}

%region_26.1375.clone (Arg_0.104: s32[], Arg_1.85: s32[]) -> s32[] {
  %Arg_0.104 = s32[] parameter(0)
  %Arg_1.85 = s32[] parameter(1)
  ROOT %add.99 = s32[] add(%Arg_0.104, %Arg_1.85)
}

%region_0.440 (Arg_0.437: s32[], Arg_1.438: s32[]) -> s32[] {
  %Arg_0.437 = s32[] parameter(0)
  %Arg_1.438 = s32[] parameter(1)
  ROOT %add.439 = s32[] add(%Arg_0.437, %Arg_1.438)
}

%region_1.448 (Arg_0.445: s32[], Arg_1.446: s32[]) -> s32[] {
  %Arg_0.445 = s32[] parameter(0)
  %Arg_1.446 = s32[] parameter(1)
  ROOT %add.447 = s32[] add(%Arg_0.445, %Arg_1.446)
}

%region_2.453 (Arg_0.450: s32[], Arg_1.451: s32[]) -> s32[] {
  %Arg_0.450 = s32[] parameter(0)
  %Arg_1.451 = s32[] parameter(1)
  ROOT %maximum.452 = s32[] maximum(%Arg_0.450, %Arg_1.451)
}

%region_4.685 (Arg_0.682: f32[], Arg_1.683: f32[]) -> f32[] {
  %Arg_0.682 = f32[] parameter(0)
  %Arg_1.683 = f32[] parameter(1)
  ROOT %add.684 = f32[] add(%Arg_0.682, %Arg_1.683)
}

%region_5.709 (Arg_0.706: f32[], Arg_1.707: f32[]) -> f32[] {
  %Arg_0.706 = f32[] parameter(0)
  %Arg_1.707 = f32[] parameter(1)
  ROOT %maximum.708 = f32[] maximum(%Arg_0.706, %Arg_1.707)
}

%region_6.750 (Arg_0.747: f32[], Arg_1.748: f32[]) -> f32[] {
  %Arg_0.747 = f32[] parameter(0)
  %Arg_1.748 = f32[] parameter(1)
  ROOT %maximum.749 = f32[] maximum(%Arg_0.747, %Arg_1.748)
}

%region_7.786 (Arg_0.783: f32[], Arg_1.784: f32[]) -> f32[] {
  %Arg_0.783 = f32[] parameter(0)
  %Arg_1.784 = f32[] parameter(1)
  ROOT %maximum.785 = f32[] maximum(%Arg_0.783, %Arg_1.784)
}

%region_8.806 (Arg_0.803: f32[], Arg_1.804: f32[]) -> f32[] {
  %Arg_0.803 = f32[] parameter(0)
  %Arg_1.804 = f32[] parameter(1)
  ROOT %maximum.805 = f32[] maximum(%Arg_0.803, %Arg_1.804)
}

%region_9.842 (Arg_0.839: f32[], Arg_1.840: f32[]) -> f32[] {
  %Arg_0.839 = f32[] parameter(0)
  %Arg_1.840 = f32[] parameter(1)
  ROOT %maximum.841 = f32[] maximum(%Arg_0.839, %Arg_1.840)
}

%region_10.862 (Arg_0.859: f32[], Arg_1.860: f32[]) -> f32[] {
  %Arg_0.859 = f32[] parameter(0)
  %Arg_1.860 = f32[] parameter(1)
  ROOT %maximum.861 = f32[] maximum(%Arg_0.859, %Arg_1.860)
}

%region_0.61._custom_call_lowering_rule (Arg_0.105: s32[], Arg_1.86: s32[], Arg_2.83: s32[], Arg_3.59: s32[]) -> pred[] {
  %Arg_2.83 = s32[] parameter(2)
  %Arg_3.59 = s32[] parameter(3)
  %Arg_0.105 = s32[] parameter(0)
  %Arg_1.86 = s32[] parameter(1)
  ROOT %compare.213 = pred[] compare(%Arg_0.105, %Arg_1.86), direction=LT
}

%region_1.74._custom_call_lowering_rule (Arg_0.106: s32[], Arg_1.87: s32[]) -> s32[] {
  %Arg_0.106 = s32[] parameter(0)
  %Arg_1.87 = s32[] parameter(1)
  ROOT %add.100 = s32[] add(%Arg_0.106, %Arg_1.87)
}

%region_5.170._custom_call_lowering_rule (Arg_0.168: s32[], Arg_1.169: s32[]) -> s32[] {
  %Arg_0.168 = s32[] parameter(0)
  ROOT %Arg_1.169 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule (Arg_0.107: pred[], Arg_1.88: pred[]) -> pred[] {
  %Arg_0.107 = pred[] parameter(0)
  ROOT %Arg_1.88 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule (Arg_0.108: s32[], Arg_1.89: s32[]) -> s32[] {
  %Arg_0.108 = s32[] parameter(0)
  %Arg_1.89 = s32[] parameter(1)
  ROOT %add.101 = s32[] add(%Arg_0.108, %Arg_1.89)
}

%region_4.110._custom_call_lowering_rule (Arg_0.109: s32[], Arg_1.108: s32[]) -> s32[] {
  %Arg_0.109 = s32[] parameter(0)
  %Arg_1.108 = s32[] parameter(1)
  ROOT %add.109 = s32[] add(%Arg_0.109, %Arg_1.108)
}

%region_6.178._custom_call_lowering_rule (Arg_0.176: s32[], Arg_1.177: s32[]) -> s32[] {
  %Arg_0.176 = s32[] parameter(0)
  ROOT %Arg_1.177 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule (Arg_0.230: s32[], Arg_1.231: s32[]) -> s32[] {
  %Arg_0.230 = s32[] parameter(0)
  ROOT %Arg_1.231 = s32[] parameter(1)
}

%region_11.946 (Arg_0.943: f32[], Arg_1.944: f32[]) -> f32[] {
  %Arg_0.943 = f32[] parameter(0)
  %Arg_1.944 = f32[] parameter(1)
  ROOT %maximum.945 = f32[] maximum(%Arg_0.943, %Arg_1.944)
}

%region_12.974 (Arg_0.971: f32[], Arg_1.972: f32[]) -> f32[] {
  %Arg_0.971 = f32[] parameter(0)
  %Arg_1.972 = f32[] parameter(1)
  ROOT %maximum.973 = f32[] maximum(%Arg_0.971, %Arg_1.972)
}

%region_13.1013 (Arg_0.1010: f32[], Arg_1.1011: f32[]) -> f32[] {
  %Arg_0.1010 = f32[] parameter(0)
  %Arg_1.1011 = f32[] parameter(1)
  ROOT %add.1012 = f32[] add(%Arg_0.1010, %Arg_1.1011)
}

%region_14.1035 (Arg_0.1032: f32[], Arg_1.1033: f32[]) -> f32[] {
  %Arg_0.1032 = f32[] parameter(0)
  %Arg_1.1033 = f32[] parameter(1)
  ROOT %maximum.1034 = f32[] maximum(%Arg_0.1032, %Arg_1.1033)
}

%region_15.1055 (Arg_0.1052: f32[], Arg_1.1053: f32[]) -> f32[] {
  %Arg_0.1052 = f32[] parameter(0)
  %Arg_1.1053 = f32[] parameter(1)
  ROOT %maximum.1054 = f32[] maximum(%Arg_0.1052, %Arg_1.1053)
}

%region_16.1101 (Arg_0.1098: f32[], Arg_1.1099: f32[]) -> f32[] {
  %Arg_0.1098 = f32[] parameter(0)
  %Arg_1.1099 = f32[] parameter(1)
  ROOT %maximum.1100 = f32[] maximum(%Arg_0.1098, %Arg_1.1099)
}

%region_17.1121 (Arg_0.1118: f32[], Arg_1.1119: f32[]) -> f32[] {
  %Arg_0.1118 = f32[] parameter(0)
  %Arg_1.1119 = f32[] parameter(1)
  ROOT %maximum.1120 = f32[] maximum(%Arg_0.1118, %Arg_1.1119)
}

%region_18.1151 (Arg_0.1148: f32[], Arg_1.1149: f32[]) -> f32[] {
  %Arg_0.1148 = f32[] parameter(0)
  %Arg_1.1149 = f32[] parameter(1)
  ROOT %maximum.1150 = f32[] maximum(%Arg_0.1148, %Arg_1.1149)
}

%region_19.1179 (Arg_0.1176: f32[], Arg_1.1177: f32[]) -> f32[] {
  %Arg_0.1176 = f32[] parameter(0)
  %Arg_1.1177 = f32[] parameter(1)
  ROOT %maximum.1178 = f32[] maximum(%Arg_0.1176, %Arg_1.1177)
}

%region_3.1223_spmd (param.43: (s32[], bf16[1,8192,16384], bf16[126,1,8192,16384], f32[126,32,53248], f32[126,32,53248], /*index=5*/f32[126,53248,32], f32[126,16384], f32[126,16384], f32[126,32,8,128], f32[126,128,128,32], /*index=10*/f32[126,32,128,128], f32[126,32,8,128], f32[126,1024], f32[126,1], f32[126,1024], /*index=15*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=20*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=25*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=30*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=35*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=40*/f32[1,8192,1,128], s32[1,8192,128,128], f32[1,8192,1,128], f32[1,1,1,128], f32[1,8192,1,128], /*index=45*/s32[1,8192,8,128], f32[1,8192,1,128], f32[1,1,1,128], s32[1,1], s32[1,1])) -> (s32[], bf16[1,8192,16384], bf16[126,1,8192,16384], f32[126,32,53248], f32[126,32,53248], /*index=5*/f32[126,53248,32], f32[126,16384], f32[126,16384], f32[126,32,8,128], f32[126,128,128,32], /*index=10*/f32[126,32,128,128], f32[126,32,8,128], f32[126,1024], f32[126,1], f32[126,1024], /*index=15*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=20*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=25*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=30*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=35*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=40*/f32[1,8192,1,128], s32[1,8192,128,128], f32[1,8192,1,128], f32[1,1,1,128], f32[1,8192,1,128], /*index=45*/s32[1,8192,8,128], f32[1,8192,1,128], f32[1,1,1,128], s32[1,1], s32[1,1]) {
  %param.43 = (s32[], bf16[1,8192,16384]{2,1,0}, bf16[126,1,8192,16384]{3,2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,32,53248]{2,1,0}, /*index=5*/f32[126,53248,32]{2,1,0}, f32[126,16384]{1,0}, f32[126,16384]{1,0}, f32[126,32,8,128]{3,2,1,0}, f32[126,128,128,32]{3,2,1,0}, /*index=10*/f32[126,32,128,128]{3,2,1,0}, f32[126,32,8,128]{3,2,1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=15*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=20*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=25*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=30*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=35*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=40*/f32[1,8192,1,128]{3,2,1,0}, s32[1,8192,128,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, /*index=45*/s32[1,8192,8,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, s32[1,1]{1,0}, s32[1,1]{1,0}) parameter(0)
  %get-tuple-element.266 = s32[] get-tuple-element(%param.43), index=0
  %constant.1524 = s32[] constant(1)
  %add.102 = s32[] add(%get-tuple-element.266, %constant.1524)
  %constant.1525 = bf16[] constant(-448)
  %broadcast.1662 = bf16[1,8192,53248]{2,1,0} broadcast(%constant.1525), dimensions={}
  %broadcast.1663 = bf16[1,8192,16384]{2,1,0} broadcast(%constant.1525), dimensions={}
  %get-tuple-element.267 = bf16[1,8192,16384]{2,1,0} get-tuple-element(%param.43), index=1
  %copy.43 = bf16[1,8192,16384]{2,1,0} copy(%get-tuple-element.267)
  %broadcast.1664 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%constant.1525), dimensions={}
  %convert.238 = f32[1,8192,16384]{2,1,0} convert(%copy.43)
  %multiply.210 = f32[1,8192,16384]{2,1,0} multiply(%convert.238, %convert.238)
  %constant.1529 = f32[] constant(0)
  %reduce.159 = f32[1,8192]{1,0} reduce(%multiply.210, %constant.1529), dimensions={2}, to_apply=%region_4.685
  %constant.1530 = f32[] constant(6.10351562e-05)
  %broadcast.1666 = f32[1,8192]{1,0} broadcast(%constant.1530), dimensions={}
  %multiply.211 = f32[1,8192]{1,0} multiply(%reduce.159, %broadcast.1666)
  %constant.1531 = f32[] constant(1e-05)
  %broadcast.1667 = f32[1,8192]{1,0} broadcast(%constant.1531), dimensions={}
  %add.103 = f32[1,8192]{1,0} add(%multiply.211, %broadcast.1667)
  %rsqrt.6 = f32[1,8192]{1,0} rsqrt(%add.103)
  %broadcast.1668 = f32[1,8192,16384]{2,1,0} broadcast(%rsqrt.6), dimensions={0,1}
  %multiply.212 = f32[1,8192,16384]{2,1,0} multiply(%convert.238, %broadcast.1668)
  %convert.239 = bf16[1,8192,16384]{2,1,0} convert(%multiply.212)
  %get-tuple-element.268 = f32[126,16384]{1,0} get-tuple-element(%param.43), index=7
  %constant.1532 = s32[] constant(0)
  %dynamic-slice.126 = f32[1,16384]{1,0} dynamic-slice(%get-tuple-element.268, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,16384}
  %convert.240 = bf16[1,16384]{1,0} convert(%dynamic-slice.126)
  %reshape.1571 = bf16[16384]{0} reshape(%convert.240)
  %broadcast.1669 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1571), dimensions={2}
  %multiply.213 = bf16[1,8192,16384]{2,1,0} multiply(%convert.239, %broadcast.1669)
  %copy.44 = bf16[1,8192,16384]{2,1,0} copy(%multiply.213)
  %copy.45 = bf16[1,8192,16384]{2,1,0} copy(%copy.44)
  %constant.1533 = f32[1]{0} constant({1})
  %get-tuple-element.269 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=32
  %dynamic-slice.127 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.269, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %constant.1535 = f32[] constant(-inf)
  %reduce.160 = f32[] reduce(%dynamic-slice.127, %constant.1535), dimensions={0,1}, to_apply=%region_5.709
  %is-finite.35 = pred[] is-finite(%reduce.160)
  %reshape.1573 = pred[1]{0} reshape(%is-finite.35)
  %compare.214 = pred[] compare(%reduce.160, %constant.1529), direction=GT
  %reshape.1575 = pred[1]{0} reshape(%compare.214)
  %constant.1537 = f32[] constant(448)
  %divide.270 = f32[] divide(%constant.1537, %reduce.160)
  %reshape.1577 = f32[1]{0} reshape(%divide.270)
  %constant.1538 = f32[1,1]{1,0} constant({ {1} })
  %get-tuple-element.270 = f32[126,1]{1,0} get-tuple-element(%param.43), index=33
  %dynamic-slice.128 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.270, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.271 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.128)
  %reshape.1579 = f32[1]{0} reshape(%divide.271)
  %select.299 = f32[1]{0} select(%reshape.1575, %reshape.1577, %reshape.1579)
  %select.300 = f32[1]{0} select(%reshape.1573, %select.299, %reshape.1579)
  %divide.272 = f32[1]{0} divide(%constant.1533, %select.300)
  %convert.241 = bf16[1]{0} convert(%divide.272)
  %reshape.1581 = bf16[] reshape(%convert.241)
  %broadcast.1670 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1581), dimensions={}
  %divide.273 = bf16[1,8192,16384]{2,1,0} divide(%copy.45, %broadcast.1670)
  %constant.1540 = bf16[] constant(448)
  %broadcast.1671 = bf16[1,8192,16384]{2,1,0} broadcast(%constant.1540), dimensions={}
  %clamp.49 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1663, %divide.273, %broadcast.1671)
  %convert.242 = f8e4m3fn[1,8192,16384]{2,1,0} convert(%clamp.49)
  %broadcast.1672 = bf16[1,32,128,128]{3,2,1,0} broadcast(%constant.1525), dimensions={}
  %get-tuple-element.271 = f32[126,32,128,128]{3,2,1,0} get-tuple-element(%param.43), index=10
  %dynamic-slice.129 = f32[1,32,128,128]{3,2,1,0} dynamic-slice(%get-tuple-element.271, %get-tuple-element.266, %constant.1532, %constant.1532, %constant.1532), dynamic_slice_sizes={1,32,128,128}
  %convert.243 = bf16[1,32,128,128]{3,2,1,0} convert(%dynamic-slice.129)
  %get-tuple-element.272 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=34
  %dynamic-slice.130 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.272, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.161 = f32[] reduce(%dynamic-slice.130, %constant.1535), dimensions={0,1}, to_apply=%region_6.750
  %is-finite.36 = pred[] is-finite(%reduce.161)
  %reshape.1583 = pred[1]{0} reshape(%is-finite.36)
  %compare.215 = pred[] compare(%reduce.161, %constant.1529), direction=GT
  %reshape.1585 = pred[1]{0} reshape(%compare.215)
  %divide.274 = f32[] divide(%constant.1537, %reduce.161)
  %reshape.1587 = f32[1]{0} reshape(%divide.274)
  %get-tuple-element.273 = f32[126,1]{1,0} get-tuple-element(%param.43), index=35
  %dynamic-slice.131 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.273, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.275 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.131)
  %reshape.1589 = f32[1]{0} reshape(%divide.275)
  %select.302 = f32[1]{0} select(%reshape.1585, %reshape.1587, %reshape.1589)
  %select.303 = f32[1]{0} select(%reshape.1583, %select.302, %reshape.1589)
  %divide.276 = f32[1]{0} divide(%constant.1533, %select.303)
  %convert.244 = bf16[1]{0} convert(%divide.276)
  %reshape.1591 = bf16[] reshape(%convert.244)
  %broadcast.1673 = bf16[1,32,128,128]{3,2,1,0} broadcast(%reshape.1591), dimensions={}
  %divide.277 = bf16[1,32,128,128]{3,2,1,0} divide(%convert.243, %broadcast.1673)
  %broadcast.1674 = bf16[1,32,128,128]{3,2,1,0} broadcast(%constant.1540), dimensions={}
  %clamp.50 = bf16[1,32,128,128]{3,2,1,0} clamp(%broadcast.1672, %divide.277, %broadcast.1674)
  %convert.245 = f8e4m3fn[1,32,128,128]{3,2,1,0} convert(%clamp.50)
  %reshape.1593 = f8e4m3fn[32,128,128]{2,1,0} reshape(%convert.245)
  %all-gather = f8e4m3fn[16384,128,128]{2,1,0} all-gather(%reshape.1593), channel_id=3, replica_groups=[1,512]<=[512], dimensions={0}, use_global_device_ids=true
  %dot.32 = bf16[1,8192,128,128]{3,2,1,0} dot(%convert.242, %all-gather), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.214 = f32[1]{0} multiply(%divide.272, %divide.276)
  %convert.246 = bf16[1]{0} convert(%multiply.214)
  %reshape.1595 = bf16[] reshape(%convert.246)
  %broadcast.1675 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%reshape.1595), dimensions={}
  %multiply.215 = bf16[1,8192,128,128]{3,2,1,0} multiply(%dot.32, %broadcast.1675)
  %convert.247 = f32[1,8192,128,128]{3,2,1,0} convert(%multiply.215)
  %get-tuple-element.274 = f32[1,8192,1,128]{3,2,1,0} get-tuple-element(%param.43), index=40
  %reshape.1597 = f32[1,8192,128]{2,1,0} reshape(%get-tuple-element.274)
  %broadcast.1676 = f32[1,8192,128,128]{3,2,1,0} broadcast(%reshape.1597), dimensions={0,1,3}
  %multiply.216 = f32[1,8192,128,128]{3,2,1,0} multiply(%convert.247, %broadcast.1676)
  %get-tuple-element.275 = s32[1,8192,128,128]{3,2,1,0} get-tuple-element(%param.43), index=41
  %broadcast.1677 = s32[1,8192,128,128]{3,2,1,0} broadcast(%constant.1524), dimensions={}
  %compare.216 = pred[1,8192,128,128]{3,2,1,0} compare(%get-tuple-element.275, %broadcast.1677), direction=LT
  %slice.399 = bf16[1,8192,128,127]{3,2,1,0} slice(%multiply.215), slice={[0:1], [0:8192], [0:128], [1:128]}
  %slice.400 = bf16[1,8192,128,1]{3,2,1,0} slice(%multiply.215), slice={[0:1], [0:8192], [0:128], [0:1]}
  %concatenate.111 = bf16[1,8192,128,128]{3,2,1,0} concatenate(%slice.399, %slice.400), dimensions={3}
  %slice.401 = bf16[1,8192,128,1]{3,2,1,0} slice(%multiply.215), slice={[0:1], [0:8192], [0:128], [127:128]}
  %slice.402 = bf16[1,8192,128,127]{3,2,1,0} slice(%multiply.215), slice={[0:1], [0:8192], [0:128], [0:127]}
  %concatenate.112 = bf16[1,8192,128,128]{3,2,1,0} concatenate(%slice.401, %slice.402), dimensions={3}
  %select.304 = bf16[1,8192,128,128]{3,2,1,0} select(%compare.216, %concatenate.111, %concatenate.112)
  %convert.248 = f32[1,8192,128,128]{3,2,1,0} convert(%select.304)
  %get-tuple-element.276 = f32[1,8192,1,128]{3,2,1,0} get-tuple-element(%param.43), index=42
  %reshape.1607 = f32[1,8192,128]{2,1,0} reshape(%get-tuple-element.276)
  %broadcast.1678 = f32[1,8192,128,128]{3,2,1,0} broadcast(%reshape.1607), dimensions={0,1,3}
  %multiply.221 = f32[1,8192,128,128]{3,2,1,0} multiply(%convert.248, %broadcast.1678)
  %get-tuple-element.277 = f32[1,1,1,128]{3,2,1,0} get-tuple-element(%param.43), index=43
  %reshape.1609 = f32[128]{0} reshape(%get-tuple-element.277)
  %broadcast.1679 = f32[1,8192,128,128]{3,2,1,0} broadcast(%reshape.1609), dimensions={3}
  %multiply.222 = f32[1,8192,128,128]{3,2,1,0} multiply(%multiply.221, %broadcast.1679)
  %add.104 = f32[1,8192,128,128]{3,2,1,0} add(%multiply.216, %multiply.222)
  %convert.249 = bf16[1,8192,128,128]{3,2,1,0} convert(%add.104)
  %copy.46 = bf16[1,8192,128,128]{3,2,1,0} copy(%convert.249)
  %get-tuple-element.278 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=24
  %dynamic-slice.136 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.278, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.162 = f32[] reduce(%dynamic-slice.136, %constant.1535), dimensions={0,1}, to_apply=%region_7.786
  %is-finite.37 = pred[] is-finite(%reduce.162)
  %reshape.1611 = pred[1]{0} reshape(%is-finite.37)
  %compare.217 = pred[] compare(%reduce.162, %constant.1529), direction=GT
  %reshape.1613 = pred[1]{0} reshape(%compare.217)
  %divide.278 = f32[] divide(%constant.1537, %reduce.162)
  %reshape.1615 = f32[1]{0} reshape(%divide.278)
  %get-tuple-element.279 = f32[126,1]{1,0} get-tuple-element(%param.43), index=25
  %dynamic-slice.137 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.279, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.279 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.137)
  %reshape.1617 = f32[1]{0} reshape(%divide.279)
  %select.305 = f32[1]{0} select(%reshape.1613, %reshape.1615, %reshape.1617)
  %select.306 = f32[1]{0} select(%reshape.1611, %select.305, %reshape.1617)
  %divide.280 = f32[1]{0} divide(%constant.1533, %select.306)
  %convert.250 = bf16[1]{0} convert(%divide.280)
  %reshape.1619 = bf16[] reshape(%convert.250)
  %broadcast.1681 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1619), dimensions={}
  %divide.281 = bf16[1,8192,16384]{2,1,0} divide(%copy.45, %broadcast.1681)
  %clamp.51 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1663, %divide.281, %broadcast.1671)
  %convert.251 = f8e4m3fn[1,8192,16384]{2,1,0} convert(%clamp.51)
  %broadcast.1683 = bf16[1,32,8,128]{3,2,1,0} broadcast(%constant.1525), dimensions={}
  %get-tuple-element.280 = f32[126,32,8,128]{3,2,1,0} get-tuple-element(%param.43), index=8
  %dynamic-slice.138 = f32[1,32,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.280, %get-tuple-element.266, %constant.1532, %constant.1532, %constant.1532), dynamic_slice_sizes={1,32,8,128}
  %convert.252 = bf16[1,32,8,128]{3,2,1,0} convert(%dynamic-slice.138)
  %get-tuple-element.281 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=26
  %dynamic-slice.139 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.281, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.163 = f32[] reduce(%dynamic-slice.139, %constant.1535), dimensions={0,1}, to_apply=%region_8.806
  %is-finite.38 = pred[] is-finite(%reduce.163)
  %reshape.1621 = pred[1]{0} reshape(%is-finite.38)
  %compare.218 = pred[] compare(%reduce.163, %constant.1529), direction=GT
  %reshape.1623 = pred[1]{0} reshape(%compare.218)
  %divide.282 = f32[] divide(%constant.1537, %reduce.163)
  %reshape.1625 = f32[1]{0} reshape(%divide.282)
  %get-tuple-element.282 = f32[126,1]{1,0} get-tuple-element(%param.43), index=27
  %dynamic-slice.140 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.282, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.283 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.140)
  %reshape.1627 = f32[1]{0} reshape(%divide.283)
  %select.307 = f32[1]{0} select(%reshape.1623, %reshape.1625, %reshape.1627)
  %select.308 = f32[1]{0} select(%reshape.1621, %select.307, %reshape.1627)
  %divide.284 = f32[1]{0} divide(%constant.1533, %select.308)
  %convert.253 = bf16[1]{0} convert(%divide.284)
  %reshape.1629 = bf16[] reshape(%convert.253)
  %broadcast.1684 = bf16[1,32,8,128]{3,2,1,0} broadcast(%reshape.1629), dimensions={}
  %divide.285 = bf16[1,32,8,128]{3,2,1,0} divide(%convert.252, %broadcast.1684)
  %broadcast.1685 = bf16[1,32,8,128]{3,2,1,0} broadcast(%constant.1540), dimensions={}
  %clamp.52 = bf16[1,32,8,128]{3,2,1,0} clamp(%broadcast.1683, %divide.285, %broadcast.1685)
  %convert.254 = f8e4m3fn[1,32,8,128]{3,2,1,0} convert(%clamp.52)
  %reshape.1631 = f8e4m3fn[32,8,128]{2,1,0} reshape(%convert.254)
  %all-gather.1 = f8e4m3fn[16384,8,128]{2,1,0} all-gather(%reshape.1631), channel_id=4, replica_groups=[1,512]<=[512], dimensions={0}, use_global_device_ids=true
  %dot.33 = bf16[1,8192,8,128]{3,2,1,0} dot(%convert.251, %all-gather.1), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.223 = f32[1]{0} multiply(%divide.280, %divide.284)
  %convert.255 = bf16[1]{0} convert(%multiply.223)
  %reshape.1633 = bf16[] reshape(%convert.255)
  %broadcast.1686 = bf16[1,8192,8,128]{3,2,1,0} broadcast(%reshape.1633), dimensions={}
  %multiply.224 = bf16[1,8192,8,128]{3,2,1,0} multiply(%dot.33, %broadcast.1686)
  %convert.256 = f32[1,8192,8,128]{3,2,1,0} convert(%multiply.224)
  %get-tuple-element.283 = f32[1,8192,1,128]{3,2,1,0} get-tuple-element(%param.43), index=44
  %reshape.1635 = f32[1,8192,128]{2,1,0} reshape(%get-tuple-element.283)
  %broadcast.1687 = f32[1,8192,8,128]{3,2,1,0} broadcast(%reshape.1635), dimensions={0,1,3}
  %multiply.225 = f32[1,8192,8,128]{3,2,1,0} multiply(%convert.256, %broadcast.1687)
  %get-tuple-element.284 = s32[1,8192,8,128]{3,2,1,0} get-tuple-element(%param.43), index=45
  %broadcast.1688 = s32[1,8192,8,128]{3,2,1,0} broadcast(%constant.1524), dimensions={}
  %compare.219 = pred[1,8192,8,128]{3,2,1,0} compare(%get-tuple-element.284, %broadcast.1688), direction=LT
  %slice.403 = bf16[1,8192,8,127]{3,2,1,0} slice(%multiply.224), slice={[0:1], [0:8192], [0:8], [1:128]}
  %slice.404 = bf16[1,8192,8,1]{3,2,1,0} slice(%multiply.224), slice={[0:1], [0:8192], [0:8], [0:1]}
  %concatenate.113 = bf16[1,8192,8,128]{3,2,1,0} concatenate(%slice.403, %slice.404), dimensions={3}
  %slice.405 = bf16[1,8192,8,1]{3,2,1,0} slice(%multiply.224), slice={[0:1], [0:8192], [0:8], [127:128]}
  %slice.406 = bf16[1,8192,8,127]{3,2,1,0} slice(%multiply.224), slice={[0:1], [0:8192], [0:8], [0:127]}
  %concatenate.114 = bf16[1,8192,8,128]{3,2,1,0} concatenate(%slice.405, %slice.406), dimensions={3}
  %select.309 = bf16[1,8192,8,128]{3,2,1,0} select(%compare.219, %concatenate.113, %concatenate.114)
  %convert.257 = f32[1,8192,8,128]{3,2,1,0} convert(%select.309)
  %get-tuple-element.285 = f32[1,8192,1,128]{3,2,1,0} get-tuple-element(%param.43), index=46
  %reshape.1645 = f32[1,8192,128]{2,1,0} reshape(%get-tuple-element.285)
  %broadcast.1689 = f32[1,8192,8,128]{3,2,1,0} broadcast(%reshape.1645), dimensions={0,1,3}
  %multiply.230 = f32[1,8192,8,128]{3,2,1,0} multiply(%convert.257, %broadcast.1689)
  %get-tuple-element.286 = f32[1,1,1,128]{3,2,1,0} get-tuple-element(%param.43), index=47
  %reshape.1647 = f32[128]{0} reshape(%get-tuple-element.286)
  %broadcast.1690 = f32[1,8192,8,128]{3,2,1,0} broadcast(%reshape.1647), dimensions={3}
  %multiply.231 = f32[1,8192,8,128]{3,2,1,0} multiply(%multiply.230, %broadcast.1690)
  %add.105 = f32[1,8192,8,128]{3,2,1,0} add(%multiply.225, %multiply.231)
  %convert.258 = bf16[1,8192,8,128]{3,2,1,0} convert(%add.105)
  %copy.48 = bf16[1,8192,8,128]{3,2,1,0} copy(%convert.258)
  %get-tuple-element.287 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=36
  %dynamic-slice.145 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.287, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.164 = f32[] reduce(%dynamic-slice.145, %constant.1535), dimensions={0,1}, to_apply=%region_9.842
  %is-finite.39 = pred[] is-finite(%reduce.164)
  %reshape.1649 = pred[1]{0} reshape(%is-finite.39)
  %compare.220 = pred[] compare(%reduce.164, %constant.1529), direction=GT
  %reshape.1651 = pred[1]{0} reshape(%compare.220)
  %divide.286 = f32[] divide(%constant.1537, %reduce.164)
  %reshape.1653 = f32[1]{0} reshape(%divide.286)
  %get-tuple-element.288 = f32[126,1]{1,0} get-tuple-element(%param.43), index=37
  %dynamic-slice.146 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.288, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.287 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.146)
  %reshape.1655 = f32[1]{0} reshape(%divide.287)
  %select.310 = f32[1]{0} select(%reshape.1651, %reshape.1653, %reshape.1655)
  %select.311 = f32[1]{0} select(%reshape.1649, %select.310, %reshape.1655)
  %divide.288 = f32[1]{0} divide(%constant.1533, %select.311)
  %convert.259 = bf16[1]{0} convert(%divide.288)
  %reshape.1657 = bf16[] reshape(%convert.259)
  %broadcast.1692 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1657), dimensions={}
  %divide.289 = bf16[1,8192,16384]{2,1,0} divide(%copy.45, %broadcast.1692)
  %clamp.53 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1663, %divide.289, %broadcast.1671)
  %convert.260 = f8e4m3fn[1,8192,16384]{2,1,0} convert(%clamp.53)
  %get-tuple-element.289 = f32[126,32,8,128]{3,2,1,0} get-tuple-element(%param.43), index=11
  %dynamic-slice.147 = f32[1,32,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.289, %get-tuple-element.266, %constant.1532, %constant.1532, %constant.1532), dynamic_slice_sizes={1,32,8,128}
  %convert.261 = bf16[1,32,8,128]{3,2,1,0} convert(%dynamic-slice.147)
  %get-tuple-element.290 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=38
  %dynamic-slice.148 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.290, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.165 = f32[] reduce(%dynamic-slice.148, %constant.1535), dimensions={0,1}, to_apply=%region_10.862
  %is-finite.40 = pred[] is-finite(%reduce.165)
  %reshape.1659 = pred[1]{0} reshape(%is-finite.40)
  %compare.221 = pred[] compare(%reduce.165, %constant.1529), direction=GT
  %reshape.1661 = pred[1]{0} reshape(%compare.221)
  %divide.290 = f32[] divide(%constant.1537, %reduce.165)
  %reshape.1663 = f32[1]{0} reshape(%divide.290)
  %get-tuple-element.291 = f32[126,1]{1,0} get-tuple-element(%param.43), index=39
  %dynamic-slice.149 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.291, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.291 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.149)
  %reshape.1665 = f32[1]{0} reshape(%divide.291)
  %select.312 = f32[1]{0} select(%reshape.1661, %reshape.1663, %reshape.1665)
  %select.313 = f32[1]{0} select(%reshape.1659, %select.312, %reshape.1665)
  %divide.292 = f32[1]{0} divide(%constant.1533, %select.313)
  %convert.262 = bf16[1]{0} convert(%divide.292)
  %reshape.1666 = bf16[] reshape(%convert.262)
  %broadcast.1695 = bf16[1,32,8,128]{3,2,1,0} broadcast(%reshape.1666), dimensions={}
  %divide.293 = bf16[1,32,8,128]{3,2,1,0} divide(%convert.261, %broadcast.1695)
  %clamp.54 = bf16[1,32,8,128]{3,2,1,0} clamp(%broadcast.1683, %divide.293, %broadcast.1685)
  %convert.263 = f8e4m3fn[1,32,8,128]{3,2,1,0} convert(%clamp.54)
  %reshape.1667 = f8e4m3fn[32,8,128]{2,1,0} reshape(%convert.263)
  %all-gather.2 = f8e4m3fn[16384,8,128]{2,1,0} all-gather(%reshape.1667), channel_id=5, replica_groups=[1,512]<=[512], dimensions={0}, use_global_device_ids=true
  %dot.34 = bf16[1,8192,8,128]{3,2,1,0} dot(%convert.260, %all-gather.2), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.232 = f32[1]{0} multiply(%divide.288, %divide.292)
  %convert.266 = bf16[1]{0} convert(%multiply.232)
  %reshape.1668 = bf16[] reshape(%convert.266)
  %broadcast.1697 = bf16[1,8192,8,128]{3,2,1,0} broadcast(%reshape.1668), dimensions={}
  %multiply.233 = bf16[1,8192,8,128]{3,2,1,0} multiply(%dot.34, %broadcast.1697)
  %copy.49 = bf16[1,8192,8,128]{3,2,1,0} copy(%multiply.233)
  %constant.1676 = bf16[0]{0} constant({})
  %broadcast.1699 = s32[2]{0} broadcast(%constant.1532), dimensions={}
  %reshape.1670 = s32[1]{0} reshape(%constant.1524)
  %reshape.1671 = s32[1]{0} reshape(%constant.1532)
  %constant.1682 = pred[1]{0} constant({0})
  %constant.1683 = s32[1]{0} constant({1})
  %constant.1684 = s32[1]{0} constant({0})
  %select.314 = s32[1]{0} select(%constant.1682, %constant.1683, %constant.1684)
  %maximum.86 = s32[1]{0} maximum(%reshape.1671, %select.314)
  %minimum.86 = s32[1]{0} minimum(%reshape.1670, %maximum.86)
  %sort.0 = (s32[1]{0}, s32[1]{0}) sort(%minimum.86, %constant.1684), dimensions={0}, is_stable=true, to_apply=%region_0.61._custom_call_lowering_rule
  %get-tuple-element.294 = s32[1]{0} get-tuple-element(%sort.0), index=1
  %compare.222 = pred[1]{0} compare(%get-tuple-element.294, %constant.1684), direction=LT
  %add.106 = s32[1]{0} add(%get-tuple-element.294, %constant.1683)
  %select.315 = s32[1]{0} select(%compare.222, %add.106, %get-tuple-element.294)
  %reshape.1672 = s32[1,1]{1,0} reshape(%select.315)
  %scatter.75 = s32[1]{0} scatter(%minimum.86, %reshape.1672, %constant.1684), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_1.74._custom_call_lowering_rule
  %compare.223 = pred[1]{0} compare(%scatter.75, %constant.1684), direction=LT
  %constant.1686 = s32[1]{0} constant({2})
  %add.165 = s32[1]{0} add(%scatter.75, %constant.1686)
  %select.316 = s32[1]{0} select(%compare.223, %add.165, %scatter.75)
  %reshape.1673 = s32[1,1]{1,0} reshape(%select.316)
  %scatter.171 = s32[2]{0} scatter(%broadcast.1699, %reshape.1673, %constant.1684), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_5.170._custom_call_lowering_rule
  %constant.1687 = pred[] constant(true)
  %broadcast.1701 = pred[2]{0} broadcast(%constant.1687), dimensions={}
  %scatter.83 = pred[2]{0} scatter(%broadcast.1701, %reshape.1673, %constant.1682), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_2.82._custom_call_lowering_rule
  %convert.267 = s32[2]{0} convert(%scatter.83)
  %reduce-window.1 = s32[2]{0} reduce-window(%convert.267, %constant.1532), window={size=2 pad=1_0}, to_apply=%region_3.91._custom_call_lowering_rule
  %maximum.87 = s32[2]{0} maximum(%broadcast.1699, %reduce-window.1)
  %compare.225 = pred[2]{0} compare(%maximum.87, %broadcast.1699), direction=LT
  %broadcast.1702 = s32[2]{0} broadcast(%constant.1524), dimensions={}
  %add.108 = s32[2]{0} add(%maximum.87, %broadcast.1702)
  %select.318 = s32[2]{0} select(%compare.225, %add.108, %maximum.87)
  %reshape.1675 = s32[2,1]{1,0} reshape(%select.318)
  %scatter.111 = s32[1]{0} scatter(%constant.1684, %reshape.1675, %broadcast.1702), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_4.110._custom_call_lowering_rule
  %sign.0 = s32[1]{0} sign(%scatter.111)
  %sign.1 = s32[] sign(%constant.1524)
  %reshape.1676 = s32[1]{0} reshape(%sign.1)
  %compare.226 = pred[1]{0} compare(%sign.0, %reshape.1676), direction=NE
  %remainder.8 = s32[1]{0} remainder(%scatter.111, %reshape.1670)
  %compare.227 = pred[1]{0} compare(%remainder.8, %constant.1684), direction=NE
  %and.78 = pred[1]{0} and(%compare.226, %compare.227)
  %divide.294 = s32[1]{0} divide(%scatter.111, %reshape.1670)
  %subtract.7 = s32[1]{0} subtract(%divide.294, %constant.1683)
  %select.319 = s32[1]{0} select(%and.78, %subtract.7, %divide.294)
  %constant.1692 = s32[] constant(2)
  %compare.228 = pred[] compare(%constant.1692, %constant.1532), direction=EQ
  %select.320 = s32[] select(%compare.228, %constant.1524, %constant.1692)
  %reshape.1679 = s32[1]{0} reshape(%select.320)
  %remainder.9 = s32[1]{0} remainder(%select.319, %reshape.1679)
  %compare.229 = pred[1]{0} compare(%remainder.9, %constant.1684), direction=LT
  %compare.230 = pred[] compare(%select.320, %constant.1532), direction=LT
  %reshape.1680 = pred[1]{0} reshape(%compare.230)
  %compare.231 = pred[1]{0} compare(%compare.229, %reshape.1680), direction=NE
  %compare.232 = pred[1]{0} compare(%remainder.9, %constant.1684), direction=NE
  %and.79 = pred[1]{0} and(%compare.231, %compare.232)
  %add.110 = s32[1]{0} add(%remainder.9, %reshape.1679)
  %select.321 = s32[1]{0} select(%and.79, %add.110, %remainder.9)
  %compare.233 = pred[1]{0} compare(%select.321, %constant.1684), direction=LT
  %add.173 = s32[1]{0} add(%select.321, %constant.1686)
  %select.322 = s32[1]{0} select(%compare.233, %add.173, %select.321)
  %reshape.1682 = s32[1,1]{1,0} reshape(%select.322)
  %get-tuple-element.292 = s32[1,1]{1,0} get-tuple-element(%param.43), index=48
  %reshape.1683 = s32[1]{0} reshape(%get-tuple-element.292)
  %compare.234 = pred[1]{0} compare(%reshape.1683, %constant.1684), direction=LT
  %constant.1696 = s32[] constant(-1)
  %reshape.1684 = s32[1]{0} reshape(%constant.1696)
  %select.323 = s32[1]{0} select(%compare.234, %reshape.1684, %reshape.1683)
  %scatter.179 = s32[2]{0} scatter(%scatter.171, %reshape.1682, %select.323), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule
  %get-tuple-element.293 = s32[1,1]{1,0} get-tuple-element(%param.43), index=49
  %reshape.1698 = s32[1]{0} reshape(%get-tuple-element.293)
  %compare.247 = pred[1]{0} compare(%reshape.1698, %constant.1684), direction=LT
  %select.334 = s32[1]{0} select(%compare.247, %reshape.1684, %reshape.1698)
  %scatter.233 = s32[2]{0} scatter(%scatter.171, %reshape.1682, %select.334), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule
  %constant.1677 = u32[] constant(0)
  %broadcast.1698 = u32[1024]{0} broadcast(%constant.1677), dimensions={}
  %constant.1678 = s32[512]{0} constant({0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022})
  %partition-id.1 = u32[] partition-id()
  %dynamic-slice.150 = s32[1]{0} dynamic-slice(%constant.1678, %partition-id.1), dynamic_slice_sizes={1}
  %reshape.1669 = s32[] reshape(%dynamic-slice.150)
  %dynamic-slice.151 = u32[2]{0} dynamic-slice(%broadcast.1698, %reshape.1669), dynamic_slice_sizes={2}
  %custom-call.234 = (bf16[1,8192,128,128]{3,2,1,0}, f32[1,128,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.46, %copy.48, %copy.49, %constant.1676, %scatter.179, /*index=5*/%scatter.233, %constant.1676, %constant.1676, %dynamic-slice.151), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,8192,128,128]{3,2,1,0}, bf16[1,8192,8,128]{3,2,1,0}, bf16[1,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 128 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.299 = bf16[1,8192,128,128]{3,2,1,0} get-tuple-element(%custom-call.234), index=0
  %copy.50 = bf16[1,8192,128,128]{3,2,1,0} copy(%get-tuple-element.299)
  %get-tuple-element.300 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=28
  %dynamic-slice.152 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.300, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.166 = f32[] reduce(%dynamic-slice.152, %constant.1535), dimensions={0,1}, to_apply=%region_11.946
  %is-finite.41 = pred[] is-finite(%reduce.166)
  %reshape.1700 = pred[1]{0} reshape(%is-finite.41)
  %compare.248 = pred[] compare(%reduce.166, %constant.1529), direction=GT
  %reshape.1701 = pred[1]{0} reshape(%compare.248)
  %divide.296 = f32[] divide(%constant.1537, %reduce.166)
  %reshape.1702 = f32[1]{0} reshape(%divide.296)
  %get-tuple-element.301 = f32[126,1]{1,0} get-tuple-element(%param.43), index=29
  %dynamic-slice.153 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.301, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.297 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.153)
  %reshape.1703 = f32[1]{0} reshape(%divide.297)
  %select.336 = f32[1]{0} select(%reshape.1701, %reshape.1702, %reshape.1703)
  %select.337 = f32[1]{0} select(%reshape.1700, %select.336, %reshape.1703)
  %divide.298 = f32[1]{0} divide(%constant.1533, %select.337)
  %convert.269 = bf16[1]{0} convert(%divide.298)
  %reshape.1704 = bf16[] reshape(%convert.269)
  %broadcast.1704 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%reshape.1704), dimensions={}
  %divide.299 = bf16[1,8192,128,128]{3,2,1,0} divide(%copy.50, %broadcast.1704)
  %broadcast.1705 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%constant.1540), dimensions={}
  %clamp.55 = bf16[1,8192,128,128]{3,2,1,0} clamp(%broadcast.1664, %divide.299, %broadcast.1705)
  %convert.270 = f8e4m3fn[1,8192,128,128]{3,2,1,0} convert(%clamp.55)
  %broadcast.1706 = bf16[1,128,128,32]{3,2,1,0} broadcast(%constant.1525), dimensions={}
  %get-tuple-element.302 = f32[126,128,128,32]{3,2,1,0} get-tuple-element(%param.43), index=9
  %dynamic-slice.154 = f32[1,128,128,32]{3,2,1,0} dynamic-slice(%get-tuple-element.302, %get-tuple-element.266, %constant.1532, %constant.1532, %constant.1532), dynamic_slice_sizes={1,128,128,32}
  %convert.271 = bf16[1,128,128,32]{3,2,1,0} convert(%dynamic-slice.154)
  %get-tuple-element.303 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=30
  %dynamic-slice.155 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.303, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.167 = f32[] reduce(%dynamic-slice.155, %constant.1535), dimensions={0,1}, to_apply=%region_12.974
  %is-finite.42 = pred[] is-finite(%reduce.167)
  %reshape.1705 = pred[1]{0} reshape(%is-finite.42)
  %compare.249 = pred[] compare(%reduce.167, %constant.1529), direction=GT
  %reshape.1706 = pred[1]{0} reshape(%compare.249)
  %divide.300 = f32[] divide(%constant.1537, %reduce.167)
  %reshape.1707 = f32[1]{0} reshape(%divide.300)
  %get-tuple-element.304 = f32[126,1]{1,0} get-tuple-element(%param.43), index=31
  %dynamic-slice.156 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.304, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.301 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.156)
  %reshape.1708 = f32[1]{0} reshape(%divide.301)
  %select.338 = f32[1]{0} select(%reshape.1706, %reshape.1707, %reshape.1708)
  %select.339 = f32[1]{0} select(%reshape.1705, %select.338, %reshape.1708)
  %divide.302 = f32[1]{0} divide(%constant.1533, %select.339)
  %convert.272 = bf16[1]{0} convert(%divide.302)
  %reshape.1709 = bf16[] reshape(%convert.272)
  %broadcast.1707 = bf16[1,128,128,32]{3,2,1,0} broadcast(%reshape.1709), dimensions={}
  %divide.303 = bf16[1,128,128,32]{3,2,1,0} divide(%convert.271, %broadcast.1707)
  %broadcast.1708 = bf16[1,128,128,32]{3,2,1,0} broadcast(%constant.1540), dimensions={}
  %clamp.56 = bf16[1,128,128,32]{3,2,1,0} clamp(%broadcast.1706, %divide.303, %broadcast.1708)
  %convert.273 = f8e4m3fn[1,128,128,32]{3,2,1,0} convert(%clamp.56)
  %reshape.1710 = f8e4m3fn[128,128,32]{2,1,0} reshape(%convert.273)
  %all-gather.3 = f8e4m3fn[128,128,16384]{2,1,0} all-gather(%reshape.1710), channel_id=6, replica_groups=[1,512]<=[512], dimensions={2}, use_global_device_ids=true
  %dot.35 = bf16[1,8192,16384]{2,1,0} dot(%convert.270, %all-gather.3), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %multiply.234 = f32[1]{0} multiply(%divide.298, %divide.302)
  %convert.274 = bf16[1]{0} convert(%multiply.234)
  %reshape.1711 = bf16[] reshape(%convert.274)
  %broadcast.1709 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1711), dimensions={}
  %multiply.235 = bf16[1,8192,16384]{2,1,0} multiply(%dot.35, %broadcast.1709)
  %copy.51 = bf16[1,8192,16384]{2,1,0} copy(%multiply.235)
  %add.112 = bf16[1,8192,16384]{2,1,0} add(%copy.43, %copy.51)
  %convert.275 = f32[1,8192,16384]{2,1,0} convert(%add.112)
  %multiply.236 = f32[1,8192,16384]{2,1,0} multiply(%convert.275, %convert.275)
  %reduce.168 = f32[1,8192]{1,0} reduce(%multiply.236, %constant.1529), dimensions={2}, to_apply=%region_13.1013
  %multiply.237 = f32[1,8192]{1,0} multiply(%reduce.168, %broadcast.1666)
  %add.113 = f32[1,8192]{1,0} add(%multiply.237, %broadcast.1667)
  %rsqrt.7 = f32[1,8192]{1,0} rsqrt(%add.113)
  %broadcast.1712 = f32[1,8192,16384]{2,1,0} broadcast(%rsqrt.7), dimensions={0,1}
  %multiply.238 = f32[1,8192,16384]{2,1,0} multiply(%convert.275, %broadcast.1712)
  %convert.276 = bf16[1,8192,16384]{2,1,0} convert(%multiply.238)
  %get-tuple-element.305 = f32[126,16384]{1,0} get-tuple-element(%param.43), index=6
  %dynamic-slice.157 = f32[1,16384]{1,0} dynamic-slice(%get-tuple-element.305, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,16384}
  %convert.277 = bf16[1,16384]{1,0} convert(%dynamic-slice.157)
  %reshape.1712 = bf16[16384]{0} reshape(%convert.277)
  %broadcast.1713 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1712), dimensions={2}
  %multiply.239 = bf16[1,8192,16384]{2,1,0} multiply(%convert.276, %broadcast.1713)
  %copy.52 = bf16[1,8192,16384]{2,1,0} copy(%multiply.239)
  %get-tuple-element.306 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=12
  %dynamic-slice.158 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.306, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.169 = f32[] reduce(%dynamic-slice.158, %constant.1535), dimensions={0,1}, to_apply=%region_14.1035
  %is-finite.43 = pred[] is-finite(%reduce.169)
  %reshape.1713 = pred[1]{0} reshape(%is-finite.43)
  %compare.250 = pred[] compare(%reduce.169, %constant.1529), direction=GT
  %reshape.1714 = pred[1]{0} reshape(%compare.250)
  %divide.304 = f32[] divide(%constant.1537, %reduce.169)
  %reshape.1715 = f32[1]{0} reshape(%divide.304)
  %get-tuple-element.307 = f32[126,1]{1,0} get-tuple-element(%param.43), index=13
  %dynamic-slice.159 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.307, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.305 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.159)
  %reshape.1716 = f32[1]{0} reshape(%divide.305)
  %select.340 = f32[1]{0} select(%reshape.1714, %reshape.1715, %reshape.1716)
  %select.341 = f32[1]{0} select(%reshape.1713, %select.340, %reshape.1716)
  %divide.306 = f32[1]{0} divide(%constant.1533, %select.341)
  %convert.278 = bf16[1]{0} convert(%divide.306)
  %reshape.1717 = bf16[] reshape(%convert.278)
  %broadcast.1714 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1717), dimensions={}
  %divide.307 = bf16[1,8192,16384]{2,1,0} divide(%copy.52, %broadcast.1714)
  %clamp.57 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1663, %divide.307, %broadcast.1671)
  %convert.279 = f8e4m3fn[1,8192,16384]{2,1,0} convert(%clamp.57)
  %broadcast.1716 = bf16[1,32,53248]{2,1,0} broadcast(%constant.1525), dimensions={}
  %get-tuple-element.308 = f32[126,32,53248]{2,1,0} get-tuple-element(%param.43), index=3
  %dynamic-slice.160 = f32[1,32,53248]{2,1,0} dynamic-slice(%get-tuple-element.308, %get-tuple-element.266, %constant.1532, %constant.1532), dynamic_slice_sizes={1,32,53248}
  %convert.280 = bf16[1,32,53248]{2,1,0} convert(%dynamic-slice.160)
  %get-tuple-element.309 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=14
  %dynamic-slice.161 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.309, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.170 = f32[] reduce(%dynamic-slice.161, %constant.1535), dimensions={0,1}, to_apply=%region_15.1055
  %is-finite.44 = pred[] is-finite(%reduce.170)
  %reshape.1718 = pred[1]{0} reshape(%is-finite.44)
  %compare.251 = pred[] compare(%reduce.170, %constant.1529), direction=GT
  %reshape.1719 = pred[1]{0} reshape(%compare.251)
  %divide.308 = f32[] divide(%constant.1537, %reduce.170)
  %reshape.1720 = f32[1]{0} reshape(%divide.308)
  %get-tuple-element.310 = f32[126,1]{1,0} get-tuple-element(%param.43), index=15
  %dynamic-slice.162 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.310, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.309 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.162)
  %reshape.1721 = f32[1]{0} reshape(%divide.309)
  %select.342 = f32[1]{0} select(%reshape.1719, %reshape.1720, %reshape.1721)
  %select.343 = f32[1]{0} select(%reshape.1718, %select.342, %reshape.1721)
  %divide.310 = f32[1]{0} divide(%constant.1533, %select.343)
  %convert.281 = bf16[1]{0} convert(%divide.310)
  %reshape.1722 = bf16[] reshape(%convert.281)
  %broadcast.1717 = bf16[1,32,53248]{2,1,0} broadcast(%reshape.1722), dimensions={}
  %divide.311 = bf16[1,32,53248]{2,1,0} divide(%convert.280, %broadcast.1717)
  %broadcast.1718 = bf16[1,32,53248]{2,1,0} broadcast(%constant.1540), dimensions={}
  %clamp.58 = bf16[1,32,53248]{2,1,0} clamp(%broadcast.1716, %divide.311, %broadcast.1718)
  %convert.282 = f8e4m3fn[1,32,53248]{2,1,0} convert(%clamp.58)
  %reshape.1723 = f8e4m3fn[32,53248]{1,0} reshape(%convert.282)
  %all-gather.4 = f8e4m3fn[16384,53248]{1,0} all-gather(%reshape.1723), channel_id=7, replica_groups=[1,512]<=[512], dimensions={0}, use_global_device_ids=true
  %dot.36 = bf16[1,8192,53248]{2,1,0} dot(%convert.279, %all-gather.4), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.240 = f32[1]{0} multiply(%divide.306, %divide.310)
  %convert.283 = bf16[1]{0} convert(%multiply.240)
  %reshape.1724 = bf16[] reshape(%convert.283)
  %broadcast.1719 = bf16[1,8192,53248]{2,1,0} broadcast(%reshape.1724), dimensions={}
  %multiply.241 = bf16[1,8192,53248]{2,1,0} multiply(%dot.36, %broadcast.1719)
  %constant.1789 = bf16[] constant(1)
  %broadcast.1720 = bf16[1,8192,53248]{2,1,0} broadcast(%constant.1789), dimensions={}
  %negate.26 = bf16[1,8192,53248]{2,1,0} negate(%multiply.241)
  %exponential.4 = bf16[1,8192,53248]{2,1,0} exponential(%negate.26)
  %add.114 = bf16[1,8192,53248]{2,1,0} add(%exponential.4, %broadcast.1720)
  %divide.312 = bf16[1,8192,53248]{2,1,0} divide(%broadcast.1720, %add.114)
  %multiply.242 = bf16[1,8192,53248]{2,1,0} multiply(%multiply.241, %divide.312)
  %get-tuple-element.311 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=16
  %dynamic-slice.163 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.311, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.171 = f32[] reduce(%dynamic-slice.163, %constant.1535), dimensions={0,1}, to_apply=%region_16.1101
  %is-finite.45 = pred[] is-finite(%reduce.171)
  %reshape.1725 = pred[1]{0} reshape(%is-finite.45)
  %compare.252 = pred[] compare(%reduce.171, %constant.1529), direction=GT
  %reshape.1726 = pred[1]{0} reshape(%compare.252)
  %divide.314 = f32[] divide(%constant.1537, %reduce.171)
  %reshape.1727 = f32[1]{0} reshape(%divide.314)
  %get-tuple-element.312 = f32[126,1]{1,0} get-tuple-element(%param.43), index=17
  %dynamic-slice.164 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.312, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.315 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.164)
  %reshape.1728 = f32[1]{0} reshape(%divide.315)
  %select.344 = f32[1]{0} select(%reshape.1726, %reshape.1727, %reshape.1728)
  %select.345 = f32[1]{0} select(%reshape.1725, %select.344, %reshape.1728)
  %divide.316 = f32[1]{0} divide(%constant.1533, %select.345)
  %convert.284 = bf16[1]{0} convert(%divide.316)
  %reshape.1729 = bf16[] reshape(%convert.284)
  %broadcast.1722 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1729), dimensions={}
  %divide.319 = bf16[1,8192,16384]{2,1,0} divide(%copy.52, %broadcast.1722)
  %clamp.59 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1663, %divide.319, %broadcast.1671)
  %convert.285 = f8e4m3fn[1,8192,16384]{2,1,0} convert(%clamp.59)
  %get-tuple-element.313 = f32[126,32,53248]{2,1,0} get-tuple-element(%param.43), index=4
  %dynamic-slice.165 = f32[1,32,53248]{2,1,0} dynamic-slice(%get-tuple-element.313, %get-tuple-element.266, %constant.1532, %constant.1532), dynamic_slice_sizes={1,32,53248}
  %convert.286 = bf16[1,32,53248]{2,1,0} convert(%dynamic-slice.165)
  %get-tuple-element.314 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=18
  %dynamic-slice.166 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.314, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.172 = f32[] reduce(%dynamic-slice.166, %constant.1535), dimensions={0,1}, to_apply=%region_17.1121
  %is-finite.46 = pred[] is-finite(%reduce.172)
  %reshape.1730 = pred[1]{0} reshape(%is-finite.46)
  %compare.253 = pred[] compare(%reduce.172, %constant.1529), direction=GT
  %reshape.1731 = pred[1]{0} reshape(%compare.253)
  %divide.320 = f32[] divide(%constant.1537, %reduce.172)
  %reshape.1732 = f32[1]{0} reshape(%divide.320)
  %get-tuple-element.315 = f32[126,1]{1,0} get-tuple-element(%param.43), index=19
  %dynamic-slice.167 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.315, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.321 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.167)
  %reshape.1733 = f32[1]{0} reshape(%divide.321)
  %select.346 = f32[1]{0} select(%reshape.1731, %reshape.1732, %reshape.1733)
  %select.347 = f32[1]{0} select(%reshape.1730, %select.346, %reshape.1733)
  %divide.322 = f32[1]{0} divide(%constant.1533, %select.347)
  %convert.287 = bf16[1]{0} convert(%divide.322)
  %reshape.1734 = bf16[] reshape(%convert.287)
  %broadcast.1728 = bf16[1,32,53248]{2,1,0} broadcast(%reshape.1734), dimensions={}
  %divide.324 = bf16[1,32,53248]{2,1,0} divide(%convert.286, %broadcast.1728)
  %clamp.60 = bf16[1,32,53248]{2,1,0} clamp(%broadcast.1716, %divide.324, %broadcast.1718)
  %convert.288 = f8e4m3fn[1,32,53248]{2,1,0} convert(%clamp.60)
  %reshape.1735 = f8e4m3fn[32,53248]{1,0} reshape(%convert.288)
  %all-gather.5 = f8e4m3fn[16384,53248]{1,0} all-gather(%reshape.1735), channel_id=8, replica_groups=[1,512]<=[512], dimensions={0}, use_global_device_ids=true
  %dot.37 = bf16[1,8192,53248]{2,1,0} dot(%convert.285, %all-gather.5), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.243 = f32[1]{0} multiply(%divide.316, %divide.322)
  %convert.289 = bf16[1]{0} convert(%multiply.243)
  %reshape.1736 = bf16[] reshape(%convert.289)
  %broadcast.1731 = bf16[1,8192,53248]{2,1,0} broadcast(%reshape.1736), dimensions={}
  %multiply.244 = bf16[1,8192,53248]{2,1,0} multiply(%dot.37, %broadcast.1731)
  %multiply.245 = bf16[1,8192,53248]{2,1,0} multiply(%multiply.242, %multiply.244)
  %copy.53 = bf16[1,8192,53248]{2,1,0} copy(%multiply.245)
  %get-tuple-element.316 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=20
  %dynamic-slice.168 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.316, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.173 = f32[] reduce(%dynamic-slice.168, %constant.1535), dimensions={0,1}, to_apply=%region_18.1151
  %is-finite.47 = pred[] is-finite(%reduce.173)
  %reshape.1737 = pred[1]{0} reshape(%is-finite.47)
  %compare.254 = pred[] compare(%reduce.173, %constant.1529), direction=GT
  %reshape.1738 = pred[1]{0} reshape(%compare.254)
  %divide.326 = f32[] divide(%constant.1537, %reduce.173)
  %reshape.1739 = f32[1]{0} reshape(%divide.326)
  %get-tuple-element.317 = f32[126,1]{1,0} get-tuple-element(%param.43), index=21
  %dynamic-slice.169 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.317, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.327 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.169)
  %reshape.1740 = f32[1]{0} reshape(%divide.327)
  %select.348 = f32[1]{0} select(%reshape.1738, %reshape.1739, %reshape.1740)
  %select.349 = f32[1]{0} select(%reshape.1737, %select.348, %reshape.1740)
  %divide.329 = f32[1]{0} divide(%constant.1533, %select.349)
  %convert.290 = bf16[1]{0} convert(%divide.329)
  %reshape.1741 = bf16[] reshape(%convert.290)
  %broadcast.1733 = bf16[1,8192,53248]{2,1,0} broadcast(%reshape.1741), dimensions={}
  %divide.330 = bf16[1,8192,53248]{2,1,0} divide(%copy.53, %broadcast.1733)
  %broadcast.1735 = bf16[1,8192,53248]{2,1,0} broadcast(%constant.1540), dimensions={}
  %clamp.61 = bf16[1,8192,53248]{2,1,0} clamp(%broadcast.1662, %divide.330, %broadcast.1735)
  %convert.291 = f8e4m3fn[1,8192,53248]{2,1,0} convert(%clamp.61)
  %broadcast.1737 = bf16[1,53248,32]{2,1,0} broadcast(%constant.1525), dimensions={}
  %get-tuple-element.318 = f32[126,53248,32]{2,1,0} get-tuple-element(%param.43), index=5
  %dynamic-slice.170 = f32[1,53248,32]{2,1,0} dynamic-slice(%get-tuple-element.318, %get-tuple-element.266, %constant.1532, %constant.1532), dynamic_slice_sizes={1,53248,32}
  %convert.292 = bf16[1,53248,32]{2,1,0} convert(%dynamic-slice.170)
  %get-tuple-element.319 = f32[126,1024]{1,0} get-tuple-element(%param.43), index=22
  %dynamic-slice.171 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.319, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1024}
  %reduce.174 = f32[] reduce(%dynamic-slice.171, %constant.1535), dimensions={0,1}, to_apply=%region_19.1179
  %is-finite.48 = pred[] is-finite(%reduce.174)
  %reshape.1742 = pred[1]{0} reshape(%is-finite.48)
  %compare.255 = pred[] compare(%reduce.174, %constant.1529), direction=GT
  %reshape.1743 = pred[1]{0} reshape(%compare.255)
  %divide.332 = f32[] divide(%constant.1537, %reduce.174)
  %reshape.1744 = f32[1]{0} reshape(%divide.332)
  %get-tuple-element.320 = f32[126,1]{1,0} get-tuple-element(%param.43), index=23
  %dynamic-slice.172 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.320, %get-tuple-element.266, %constant.1532), dynamic_slice_sizes={1,1}
  %divide.333 = f32[1,1]{1,0} divide(%constant.1538, %dynamic-slice.172)
  %reshape.1745 = f32[1]{0} reshape(%divide.333)
  %select.350 = f32[1]{0} select(%reshape.1743, %reshape.1744, %reshape.1745)
  %select.351 = f32[1]{0} select(%reshape.1742, %select.350, %reshape.1745)
  %divide.334 = f32[1]{0} divide(%constant.1533, %select.351)
  %convert.293 = bf16[1]{0} convert(%divide.334)
  %reshape.1746 = bf16[] reshape(%convert.293)
  %broadcast.1739 = bf16[1,53248,32]{2,1,0} broadcast(%reshape.1746), dimensions={}
  %divide.335 = bf16[1,53248,32]{2,1,0} divide(%convert.292, %broadcast.1739)
  %broadcast.1741 = bf16[1,53248,32]{2,1,0} broadcast(%constant.1540), dimensions={}
  %clamp.62 = bf16[1,53248,32]{2,1,0} clamp(%broadcast.1737, %divide.335, %broadcast.1741)
  %convert.294 = f8e4m3fn[1,53248,32]{2,1,0} convert(%clamp.62)
  %reshape.1747 = f8e4m3fn[53248,32]{1,0} reshape(%convert.294)
  %all-gather.6 = f8e4m3fn[53248,16384]{1,0} all-gather(%reshape.1747), channel_id=9, replica_groups=[1,512]<=[512], dimensions={1}, use_global_device_ids=true
  %dot.38 = bf16[1,8192,16384]{2,1,0} dot(%convert.291, %all-gather.6), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.246 = f32[1]{0} multiply(%divide.329, %divide.334)
  %convert.295 = bf16[1]{0} convert(%multiply.246)
  %reshape.1748 = bf16[] reshape(%convert.295)
  %broadcast.1743 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1748), dimensions={}
  %multiply.247 = bf16[1,8192,16384]{2,1,0} multiply(%dot.38, %broadcast.1743)
  %copy.54 = bf16[1,8192,16384]{2,1,0} copy(%multiply.247)
  %add.115 = bf16[1,8192,16384]{2,1,0} add(%copy.54, %add.112)
  %copy.55 = bf16[1,8192,16384]{2,1,0} copy(%add.115)
  %get-tuple-element.321 = bf16[126,1,8192,16384]{3,2,1,0} get-tuple-element(%param.43), index=2
  %reshape.1749 = bf16[1,1,8192,16384]{3,2,1,0} reshape(%get-tuple-element.267)
  %dynamic-update-slice.63 = bf16[126,1,8192,16384]{3,2,1,0} dynamic-update-slice(%get-tuple-element.321, %reshape.1749, %get-tuple-element.266, %constant.1532, %constant.1532, /*index=5*/%constant.1532)
  ROOT %tuple.109 = (s32[], bf16[1,8192,16384]{2,1,0}, bf16[126,1,8192,16384]{3,2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,32,53248]{2,1,0}, /*index=5*/f32[126,53248,32]{2,1,0}, f32[126,16384]{1,0}, f32[126,16384]{1,0}, f32[126,32,8,128]{3,2,1,0}, f32[126,128,128,32]{3,2,1,0}, /*index=10*/f32[126,32,128,128]{3,2,1,0}, f32[126,32,8,128]{3,2,1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=15*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=20*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=25*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=30*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=35*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=40*/f32[1,8192,1,128]{3,2,1,0}, s32[1,8192,128,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, /*index=45*/s32[1,8192,8,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, s32[1,1]{1,0}, s32[1,1]{1,0}) tuple(%add.102, %copy.55, %dynamic-update-slice.63, %get-tuple-element.308, %get-tuple-element.313, /*index=5*/%get-tuple-element.318, %get-tuple-element.305, %get-tuple-element.268, %get-tuple-element.280, %get-tuple-element.302, /*index=10*/%get-tuple-element.271, %get-tuple-element.289, %get-tuple-element.306, %get-tuple-element.307, %get-tuple-element.309, /*index=15*/%get-tuple-element.310, %get-tuple-element.311, %get-tuple-element.312, %get-tuple-element.314, %get-tuple-element.315, /*index=20*/%get-tuple-element.316, %get-tuple-element.317, %get-tuple-element.319, %get-tuple-element.320, %get-tuple-element.278, /*index=25*/%get-tuple-element.279, %get-tuple-element.281, %get-tuple-element.282, %get-tuple-element.300, %get-tuple-element.301, /*index=30*/%get-tuple-element.303, %get-tuple-element.304, %get-tuple-element.269, %get-tuple-element.270, %get-tuple-element.272, /*index=35*/%get-tuple-element.273, %get-tuple-element.287, %get-tuple-element.288, %get-tuple-element.290, %get-tuple-element.291, /*index=40*/%get-tuple-element.274, %get-tuple-element.275, %get-tuple-element.276, %get-tuple-element.277, %get-tuple-element.283, /*index=45*/%get-tuple-element.284, %get-tuple-element.285, %get-tuple-element.286, %get-tuple-element.292, %get-tuple-element.293)
}

%region_20.1277_spmd (param.42: (s32[], bf16[1,8192,16384], bf16[126,1,8192,16384], f32[126,32,53248], f32[126,32,53248], /*index=5*/f32[126,53248,32], f32[126,16384], f32[126,16384], f32[126,32,8,128], f32[126,128,128,32], /*index=10*/f32[126,32,128,128], f32[126,32,8,128], f32[126,1024], f32[126,1], f32[126,1024], /*index=15*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=20*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=25*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=30*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=35*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=40*/f32[1,8192,1,128], s32[1,8192,128,128], f32[1,8192,1,128], f32[1,1,1,128], f32[1,8192,1,128], /*index=45*/s32[1,8192,8,128], f32[1,8192,1,128], f32[1,1,1,128], s32[1,1], s32[1,1])) -> pred[] {
  %param.42 = (s32[], bf16[1,8192,16384]{2,1,0}, bf16[126,1,8192,16384]{3,2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,32,53248]{2,1,0}, /*index=5*/f32[126,53248,32]{2,1,0}, f32[126,16384]{1,0}, f32[126,16384]{1,0}, f32[126,32,8,128]{3,2,1,0}, f32[126,128,128,32]{3,2,1,0}, /*index=10*/f32[126,32,128,128]{3,2,1,0}, f32[126,32,8,128]{3,2,1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=15*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=20*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=25*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=30*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=35*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=40*/f32[1,8192,1,128]{3,2,1,0}, s32[1,8192,128,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, /*index=45*/s32[1,8192,8,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, s32[1,1]{1,0}, s32[1,1]{1,0}) parameter(0)
  %get-tuple-element.265 = s32[] get-tuple-element(%param.42), index=0
  %constant.1515 = s32[] constant(126)
  ROOT %compare.212 = pred[] compare(%get-tuple-element.265, %constant.1515), direction=LT
}

%region_21.1289 (Arg_0.1286: f32[], Arg_1.1287: f32[]) -> f32[] {
  %Arg_0.1286 = f32[] parameter(0)
  %Arg_1.1287 = f32[] parameter(1)
  ROOT %add.1288 = f32[] add(%Arg_0.1286, %Arg_1.1287)
}

%region_22.1329 (Arg_0.1326: f32[], Arg_1.1327: f32[]) -> f32[] {
  %Arg_0.1326 = f32[] parameter(0)
  %Arg_1.1327 = f32[] parameter(1)
  ROOT %maximum.1328 = f32[] maximum(%Arg_0.1326, %Arg_1.1327)
}

%region_23.1340 (Arg_0.1337: f32[], Arg_1.1338: f32[]) -> f32[] {
  %Arg_0.1337 = f32[] parameter(0)
  %Arg_1.1338 = f32[] parameter(1)
  ROOT %add.1339 = f32[] add(%Arg_0.1337, %Arg_1.1338)
}

%region_29.1429 (Arg_0.1426: f32[], Arg_1.1427: f32[]) -> f32[] {
  %Arg_0.1426 = f32[] parameter(0)
  %Arg_1.1427 = f32[] parameter(1)
  ROOT %add.1428 = f32[] add(%Arg_0.1426, %Arg_1.1427)
}

%region_32.1791 (Arg_0.1788: f32[], Arg_1.1789: f32[]) -> f32[] {
  %Arg_0.1788 = f32[] parameter(0)
  %Arg_1.1789 = f32[] parameter(1)
  ROOT %add.1790 = f32[] add(%Arg_0.1788, %Arg_1.1789)
}

%region_33.1817 (Arg_0.1814: f32[], Arg_1.1815: f32[]) -> f32[] {
  %Arg_0.1814 = f32[] parameter(0)
  %Arg_1.1815 = f32[] parameter(1)
  ROOT %maximum.1816 = f32[] maximum(%Arg_0.1814, %Arg_1.1815)
}

%region_36.1875 (Arg_0.1872: f32[], Arg_1.1873: f32[]) -> f32[] {
  %Arg_0.1872 = f32[] parameter(0)
  %Arg_1.1873 = f32[] parameter(1)
  ROOT %maximum.1874 = f32[] maximum(%Arg_0.1872, %Arg_1.1873)
}

%region_39.1923 (Arg_0.1920: f32[], Arg_1.1921: f32[]) -> f32[] {
  %Arg_0.1920 = f32[] parameter(0)
  %Arg_1.1921 = f32[] parameter(1)
  ROOT %maximum.1922 = f32[] maximum(%Arg_0.1920, %Arg_1.1921)
}

%region_42.1955 (Arg_0.1952: f32[], Arg_1.1953: f32[]) -> f32[] {
  %Arg_0.1952 = f32[] parameter(0)
  %Arg_1.1953 = f32[] parameter(1)
  ROOT %maximum.1954 = f32[] maximum(%Arg_0.1952, %Arg_1.1953)
}

%region_45.2003 (Arg_0.2000: f32[], Arg_1.2001: f32[]) -> f32[] {
  %Arg_0.2000 = f32[] parameter(0)
  %Arg_1.2001 = f32[] parameter(1)
  ROOT %maximum.2002 = f32[] maximum(%Arg_0.2000, %Arg_1.2001)
}

%region_48.2035 (Arg_0.2032: f32[], Arg_1.2033: f32[]) -> f32[] {
  %Arg_0.2032 = f32[] parameter(0)
  %Arg_1.2033 = f32[] parameter(1)
  ROOT %maximum.2034 = f32[] maximum(%Arg_0.2032, %Arg_1.2033)
}

%region_51.2287 (Arg_0.2284: s32[], Arg_1.2285: s32[]) -> s32[] {
  %Arg_0.2284 = s32[] parameter(0)
  %Arg_1.2285 = s32[] parameter(1)
  ROOT %add.2286 = s32[] add(%Arg_0.2284, %Arg_1.2285)
}

%region_52.2295 (Arg_0.2292: s32[], Arg_1.2293: s32[]) -> s32[] {
  %Arg_0.2292 = s32[] parameter(0)
  %Arg_1.2293 = s32[] parameter(1)
  ROOT %add.2294 = s32[] add(%Arg_0.2292, %Arg_1.2293)
}

%region_53.2300 (Arg_0.2297: s32[], Arg_1.2298: s32[]) -> s32[] {
  %Arg_0.2297 = s32[] parameter(0)
  %Arg_1.2298 = s32[] parameter(1)
  ROOT %maximum.2299 = s32[] maximum(%Arg_0.2297, %Arg_1.2298)
}

%region_0.61._custom_call_lowering_rule.1 (Arg_0.110: s32[], Arg_1.90: s32[], Arg_2.84: s32[], Arg_3.0: s32[]) -> pred[] {
  %Arg_2.84 = s32[] parameter(2)
  %Arg_3.0 = s32[] parameter(3)
  %Arg_0.110 = s32[] parameter(0)
  %Arg_1.90 = s32[] parameter(1)
  ROOT %compare.257 = pred[] compare(%Arg_0.110, %Arg_1.90), direction=LT
}

%region_1.74._custom_call_lowering_rule.1 (Arg_0.111: s32[], Arg_1.91: s32[]) -> s32[] {
  %Arg_0.111 = s32[] parameter(0)
  %Arg_1.91 = s32[] parameter(1)
  ROOT %add.116 = s32[] add(%Arg_0.111, %Arg_1.91)
}

%region_5.170._custom_call_lowering_rule.1 (Arg_0.112: s32[], Arg_1.92: s32[]) -> s32[] {
  %Arg_0.112 = s32[] parameter(0)
  ROOT %Arg_1.92 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.1 (Arg_0.113: pred[], Arg_1.93: pred[]) -> pred[] {
  %Arg_0.113 = pred[] parameter(0)
  ROOT %Arg_1.93 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.1 (Arg_0.114: s32[], Arg_1.94: s32[]) -> s32[] {
  %Arg_0.114 = s32[] parameter(0)
  %Arg_1.94 = s32[] parameter(1)
  ROOT %add.117 = s32[] add(%Arg_0.114, %Arg_1.94)
}

%region_4.110._custom_call_lowering_rule.1 (Arg_0.115: s32[], Arg_1.95: s32[]) -> s32[] {
  %Arg_0.115 = s32[] parameter(0)
  %Arg_1.95 = s32[] parameter(1)
  ROOT %add.118 = s32[] add(%Arg_0.115, %Arg_1.95)
}

%region_6.178._custom_call_lowering_rule.1 (Arg_0.116: s32[], Arg_1.96: s32[]) -> s32[] {
  %Arg_0.116 = s32[] parameter(0)
  ROOT %Arg_1.96 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.1 (Arg_0.121: s32[], Arg_1.101: s32[]) -> s32[] {
  %Arg_0.121 = s32[] parameter(0)
  ROOT %Arg_1.101 = s32[] parameter(1)
}

%region_54.2311 (Arg_0.2308: f32[], Arg_1.2309: f32[]) -> f32[] {
  %Arg_0.2308 = f32[] parameter(0)
  %Arg_1.2309 = f32[] parameter(1)
  ROOT %maximum.2310 = f32[] maximum(%Arg_0.2308, %Arg_1.2309)
}

%region_57.2351 (Arg_0.2348: f32[], Arg_1.2349: f32[]) -> f32[] {
  %Arg_0.2348 = f32[] parameter(0)
  %Arg_1.2349 = f32[] parameter(1)
  ROOT %maximum.2350 = f32[] maximum(%Arg_0.2348, %Arg_1.2349)
}

%region_60.2403 (Arg_0.2400: f32[], Arg_1.2401: f32[]) -> f32[] {
  %Arg_0.2400 = f32[] parameter(0)
  %Arg_1.2401 = f32[] parameter(1)
  ROOT %add.2402 = f32[] add(%Arg_0.2400, %Arg_1.2401)
}

%region_61.2427 (Arg_0.2424: f32[], Arg_1.2425: f32[]) -> f32[] {
  %Arg_0.2424 = f32[] parameter(0)
  %Arg_1.2425 = f32[] parameter(1)
  ROOT %maximum.2426 = f32[] maximum(%Arg_0.2424, %Arg_1.2425)
}

%region_64.2459 (Arg_0.2456: f32[], Arg_1.2457: f32[]) -> f32[] {
  %Arg_0.2456 = f32[] parameter(0)
  %Arg_1.2457 = f32[] parameter(1)
  ROOT %maximum.2458 = f32[] maximum(%Arg_0.2456, %Arg_1.2457)
}

%region_79.2679 (Arg_0.2676: f32[], Arg_1.2677: f32[]) -> f32[] {
  %Arg_0.2676 = f32[] parameter(0)
  %Arg_1.2677 = f32[] parameter(1)
  ROOT %maximum.2678 = f32[] maximum(%Arg_0.2676, %Arg_1.2677)
}

%region_76.2637 (Arg_0.2634: f32[], Arg_1.2635: f32[]) -> f32[] {
  %Arg_0.2634 = f32[] parameter(0)
  %Arg_1.2635 = f32[] parameter(1)
  ROOT %maximum.2636 = f32[] maximum(%Arg_0.2634, %Arg_1.2635)
}

%region_82.2756 (Arg_0.2753: f32[], Arg_1.2754: f32[]) -> f32[] {
  %Arg_0.2753 = f32[] parameter(0)
  %Arg_1.2754 = f32[] parameter(1)
  ROOT %maximum.2755 = f32[] maximum(%Arg_0.2753, %Arg_1.2754)
}

%region_70.2555 (Arg_0.2552: f32[], Arg_1.2553: f32[]) -> f32[] {
  %Arg_0.2552 = f32[] parameter(0)
  %Arg_1.2553 = f32[] parameter(1)
  ROOT %maximum.2554 = f32[] maximum(%Arg_0.2552, %Arg_1.2553)
}

%region_67.2523 (Arg_0.2520: f32[], Arg_1.2521: f32[]) -> f32[] {
  %Arg_0.2520 = f32[] parameter(0)
  %Arg_1.2521 = f32[] parameter(1)
  ROOT %maximum.2522 = f32[] maximum(%Arg_0.2520, %Arg_1.2521)
}

%region_85.2822 (Arg_0.2819: f32[], Arg_1.2820: f32[]) -> f32[] {
  %Arg_0.2819 = f32[] parameter(0)
  %Arg_1.2820 = f32[] parameter(1)
  ROOT %maximum.2821 = f32[] maximum(%Arg_0.2819, %Arg_1.2820)
}

%region_90.2891 (Arg_0.2888: f32[], Arg_1.2889: f32[]) -> f32[] {
  %Arg_0.2888 = f32[] parameter(0)
  %Arg_1.2889 = f32[] parameter(1)
  ROOT %add.2890 = f32[] add(%Arg_0.2888, %Arg_1.2889)
}

%region_92.2914 (Arg_0.2911: f32[], Arg_1.2912: f32[]) -> f32[] {
  %Arg_0.2911 = f32[] parameter(0)
  %Arg_1.2912 = f32[] parameter(1)
  ROOT %maximum.2913 = f32[] maximum(%Arg_0.2911, %Arg_1.2912)
}

%region_95.3033 (Arg_0.3030: f32[], Arg_1.3031: f32[]) -> f32[] {
  %Arg_0.3030 = f32[] parameter(0)
  %Arg_1.3031 = f32[] parameter(1)
  ROOT %maximum.3032 = f32[] maximum(%Arg_0.3030, %Arg_1.3031)
}

%region_98.3089 (Arg_0.3086: f32[], Arg_1.3087: f32[]) -> f32[] {
  %Arg_0.3086 = f32[] parameter(0)
  %Arg_1.3087 = f32[] parameter(1)
  ROOT %maximum.3088 = f32[] maximum(%Arg_0.3086, %Arg_1.3087)
}

%region_101.3138 (Arg_0.3135: f32[], Arg_1.3136: f32[]) -> f32[] {
  %Arg_0.3135 = f32[] parameter(0)
  %Arg_1.3136 = f32[] parameter(1)
  ROOT %maximum.3137 = f32[] maximum(%Arg_0.3135, %Arg_1.3136)
}

%region_106.3217 (Arg_0.3214: f32[], Arg_1.3215: f32[]) -> f32[] {
  %Arg_0.3214 = f32[] parameter(0)
  %Arg_1.3215 = f32[] parameter(1)
  ROOT %add.3216 = f32[] add(%Arg_0.3214, %Arg_1.3215)
}

%add.clone (x.1: bf16[], y.1: bf16[]) -> bf16[] {
  %x.1 = bf16[] parameter(0)
  %y.1 = bf16[] parameter(1)
  ROOT %add.125 = bf16[] add(%x.1, %y.1)
}

%add.1.clone (x.3: bf16[], y.3: bf16[]) -> bf16[] {
  %x.3 = bf16[] parameter(0)
  %y.3 = bf16[] parameter(1)
  ROOT %add.127 = bf16[] add(%x.3, %y.3)
}

%region_73.2597 (Arg_0.2594: f32[], Arg_1.2595: f32[]) -> f32[] {
  %Arg_0.2594 = f32[] parameter(0)
  %Arg_1.2595 = f32[] parameter(1)
  ROOT %maximum.2596 = f32[] maximum(%Arg_0.2594, %Arg_1.2595)
}

%add.2.clone (x.5: bf16[], y.5: bf16[]) -> bf16[] {
  %x.5 = bf16[] parameter(0)
  %y.5 = bf16[] parameter(1)
  ROOT %add.129 = bf16[] add(%x.5, %y.5)
}

%region_88.2873 (Arg_0.2870: bf16[], Arg_1.2871: bf16[]) -> bf16[] {
  %Arg_0.2870 = bf16[] parameter(0)
  %Arg_1.2871 = bf16[] parameter(1)
  ROOT %add.2872 = bf16[] add(%Arg_0.2870, %Arg_1.2871)
}

%region_88.2873.clone (Arg_0.127: bf16[], Arg_1.106: bf16[]) -> bf16[] {
  %Arg_0.127 = bf16[] parameter(0)
  %Arg_1.106 = bf16[] parameter(1)
  ROOT %add.130 = bf16[] add(%Arg_0.127, %Arg_1.106)
}

%region_104.3199 (Arg_0.3196: bf16[], Arg_1.3197: bf16[]) -> bf16[] {
  %Arg_0.3196 = bf16[] parameter(0)
  %Arg_1.3197 = bf16[] parameter(1)
  ROOT %add.3198 = bf16[] add(%Arg_0.3196, %Arg_1.3197)
}

%region_104.3199.clone (Arg_0.128: bf16[], Arg_1.107: bf16[]) -> bf16[] {
  %Arg_0.128 = bf16[] parameter(0)
  %Arg_1.107 = bf16[] parameter(1)
  ROOT %add.131 = bf16[] add(%Arg_0.128, %Arg_1.107)
}

%add.3.clone (x.7: bf16[], y.7: bf16[]) -> bf16[] {
  %x.7 = bf16[] parameter(0)
  %y.7 = bf16[] parameter(1)
  ROOT %add.133 = bf16[] add(%x.7, %y.7)
}

%add.4.clone (x.9: bf16[], y.9: bf16[]) -> bf16[] {
  %x.9 = bf16[] parameter(0)
  %y.9 = bf16[] parameter(1)
  ROOT %add.135 = bf16[] add(%x.9, %y.9)
}

%add.5.clone (x.11: bf16[], y.11: bf16[]) -> bf16[] {
  %x.11 = bf16[] parameter(0)
  %y.11 = bf16[] parameter(1)
  ROOT %add.137 = bf16[] add(%x.11, %y.11)
}

%add.6.clone (x.13: bf16[], y.13: bf16[]) -> bf16[] {
  %x.13 = bf16[] parameter(0)
  %y.13 = bf16[] parameter(1)
  ROOT %add.139 = bf16[] add(%x.13, %y.13)
}

%region_62.2441 (Arg_0.2438: bf16[], Arg_1.2439: bf16[]) -> bf16[] {
  %Arg_0.2438 = bf16[] parameter(0)
  %Arg_1.2439 = bf16[] parameter(1)
  ROOT %maximum.2440 = bf16[] maximum(%Arg_0.2438, %Arg_1.2439)
}

%region_62.2441.clone (Arg_0.129: bf16[], Arg_1.109: bf16[]) -> bf16[] {
  %Arg_0.129 = bf16[] parameter(0)
  %Arg_1.109 = bf16[] parameter(1)
  ROOT %maximum.90 = bf16[] maximum(%Arg_0.129, %Arg_1.109)
}

%region_65.2473 (Arg_0.2470: bf16[], Arg_1.2471: bf16[]) -> bf16[] {
  %Arg_0.2470 = bf16[] parameter(0)
  %Arg_1.2471 = bf16[] parameter(1)
  ROOT %maximum.2472 = bf16[] maximum(%Arg_0.2470, %Arg_1.2471)
}

%region_65.2473.clone (Arg_0.130: bf16[], Arg_1.110: bf16[]) -> bf16[] {
  %Arg_0.130 = bf16[] parameter(0)
  %Arg_1.110 = bf16[] parameter(1)
  ROOT %maximum.91 = bf16[] maximum(%Arg_0.130, %Arg_1.110)
}

%region_86.2836 (Arg_0.2833: bf16[], Arg_1.2834: bf16[]) -> bf16[] {
  %Arg_0.2833 = bf16[] parameter(0)
  %Arg_1.2834 = bf16[] parameter(1)
  ROOT %maximum.2835 = bf16[] maximum(%Arg_0.2833, %Arg_1.2834)
}

%region_86.2836.clone (Arg_0.131: bf16[], Arg_1.112: bf16[]) -> bf16[] {
  %Arg_0.131 = bf16[] parameter(0)
  %Arg_1.112 = bf16[] parameter(1)
  ROOT %maximum.92 = bf16[] maximum(%Arg_0.131, %Arg_1.112)
}

%region_68.2537.clone (Arg_0.132: bf16[], Arg_1.113: bf16[]) -> bf16[] {
  %Arg_0.132 = bf16[] parameter(0)
  %Arg_1.113 = bf16[] parameter(1)
  ROOT %maximum.93 = bf16[] maximum(%Arg_0.132, %Arg_1.113)
}

%region_71.2569 (Arg_0.2566: bf16[], Arg_1.2567: bf16[]) -> bf16[] {
  %Arg_0.2566 = bf16[] parameter(0)
  %Arg_1.2567 = bf16[] parameter(1)
  ROOT %maximum.2568 = bf16[] maximum(%Arg_0.2566, %Arg_1.2567)
}

%region_71.2569.clone (Arg_0.133: bf16[], Arg_1.114: bf16[]) -> bf16[] {
  %Arg_0.133 = bf16[] parameter(0)
  %Arg_1.114 = bf16[] parameter(1)
  ROOT %maximum.94 = bf16[] maximum(%Arg_0.133, %Arg_1.114)
}

%region_83.2770 (Arg_0.2767: bf16[], Arg_1.2768: bf16[]) -> bf16[] {
  %Arg_0.2767 = bf16[] parameter(0)
  %Arg_1.2768 = bf16[] parameter(1)
  ROOT %maximum.2769 = bf16[] maximum(%Arg_0.2767, %Arg_1.2768)
}

%region_83.2770.clone (Arg_0.134: bf16[], Arg_1.115: bf16[]) -> bf16[] {
  %Arg_0.134 = bf16[] parameter(0)
  %Arg_1.115 = bf16[] parameter(1)
  ROOT %maximum.95 = bf16[] maximum(%Arg_0.134, %Arg_1.115)
}

%region_74.2611 (Arg_0.2608: bf16[], Arg_1.2609: bf16[]) -> bf16[] {
  %Arg_0.2608 = bf16[] parameter(0)
  %Arg_1.2609 = bf16[] parameter(1)
  ROOT %maximum.2610 = bf16[] maximum(%Arg_0.2608, %Arg_1.2609)
}

%region_74.2611.clone (Arg_0.135: bf16[], Arg_1.116: bf16[]) -> bf16[] {
  %Arg_0.135 = bf16[] parameter(0)
  %Arg_1.116 = bf16[] parameter(1)
  ROOT %maximum.96 = bf16[] maximum(%Arg_0.135, %Arg_1.116)
}

%region_77.2651 (Arg_0.2648: bf16[], Arg_1.2649: bf16[]) -> bf16[] {
  %Arg_0.2648 = bf16[] parameter(0)
  %Arg_1.2649 = bf16[] parameter(1)
  ROOT %maximum.2650 = bf16[] maximum(%Arg_0.2648, %Arg_1.2649)
}

%region_77.2651.clone (Arg_0.136: bf16[], Arg_1.117: bf16[]) -> bf16[] {
  %Arg_0.136 = bf16[] parameter(0)
  %Arg_1.117 = bf16[] parameter(1)
  ROOT %maximum.97 = bf16[] maximum(%Arg_0.136, %Arg_1.117)
}

%region_80.2706 (Arg_0.2703: bf16[], Arg_1.2704: bf16[]) -> bf16[] {
  %Arg_0.2703 = bf16[] parameter(0)
  %Arg_1.2704 = bf16[] parameter(1)
  ROOT %maximum.2705 = bf16[] maximum(%Arg_0.2703, %Arg_1.2704)
}

%region_80.2706.clone (Arg_0.137: bf16[], Arg_1.118: bf16[]) -> bf16[] {
  %Arg_0.137 = bf16[] parameter(0)
  %Arg_1.118 = bf16[] parameter(1)
  ROOT %maximum.98 = bf16[] maximum(%Arg_0.137, %Arg_1.118)
}

%region_40.1937 (Arg_0.1934: bf16[], Arg_1.1935: bf16[]) -> bf16[] {
  %Arg_0.1934 = bf16[] parameter(0)
  %Arg_1.1935 = bf16[] parameter(1)
  ROOT %maximum.1936 = bf16[] maximum(%Arg_0.1934, %Arg_1.1935)
}

%region_40.1937.clone (Arg_0.138: bf16[], Arg_1.119: bf16[]) -> bf16[] {
  %Arg_0.138 = bf16[] parameter(0)
  %Arg_1.119 = bf16[] parameter(1)
  ROOT %maximum.99 = bf16[] maximum(%Arg_0.138, %Arg_1.119)
}

%region_43.1969 (Arg_0.1966: bf16[], Arg_1.1967: bf16[]) -> bf16[] {
  %Arg_0.1966 = bf16[] parameter(0)
  %Arg_1.1967 = bf16[] parameter(1)
  ROOT %maximum.1968 = bf16[] maximum(%Arg_0.1966, %Arg_1.1967)
}

%region_43.1969.clone (Arg_0.139: bf16[], Arg_1.120: bf16[]) -> bf16[] {
  %Arg_0.139 = bf16[] parameter(0)
  %Arg_1.120 = bf16[] parameter(1)
  ROOT %maximum.100 = bf16[] maximum(%Arg_0.139, %Arg_1.120)
}

%region_99.3103 (Arg_0.3100: bf16[], Arg_1.3101: bf16[]) -> bf16[] {
  %Arg_0.3100 = bf16[] parameter(0)
  %Arg_1.3101 = bf16[] parameter(1)
  ROOT %maximum.3102 = bf16[] maximum(%Arg_0.3100, %Arg_1.3101)
}

%region_99.3103.clone (Arg_0.140: bf16[], Arg_1.121: bf16[]) -> bf16[] {
  %Arg_0.140 = bf16[] parameter(0)
  %Arg_1.121 = bf16[] parameter(1)
  ROOT %maximum.101 = bf16[] maximum(%Arg_0.140, %Arg_1.121)
}

%region_55.2325 (Arg_0.2322: bf16[], Arg_1.2323: bf16[]) -> bf16[] {
  %Arg_0.2322 = bf16[] parameter(0)
  %Arg_1.2323 = bf16[] parameter(1)
  ROOT %maximum.2324 = bf16[] maximum(%Arg_0.2322, %Arg_1.2323)
}

%region_55.2325.clone (Arg_0.141: bf16[], Arg_1.122: bf16[]) -> bf16[] {
  %Arg_0.141 = bf16[] parameter(0)
  %Arg_1.122 = bf16[] parameter(1)
  ROOT %maximum.102 = bf16[] maximum(%Arg_0.141, %Arg_1.122)
}

%region_58.2365 (Arg_0.2362: bf16[], Arg_1.2363: bf16[]) -> bf16[] {
  %Arg_0.2362 = bf16[] parameter(0)
  %Arg_1.2363 = bf16[] parameter(1)
  ROOT %maximum.2364 = bf16[] maximum(%Arg_0.2362, %Arg_1.2363)
}

%region_58.2365.clone (Arg_0.142: bf16[], Arg_1.123: bf16[]) -> bf16[] {
  %Arg_0.142 = bf16[] parameter(0)
  %Arg_1.123 = bf16[] parameter(1)
  ROOT %maximum.103 = bf16[] maximum(%Arg_0.142, %Arg_1.123)
}

%region_93.2928 (Arg_0.2925: bf16[], Arg_1.2926: bf16[]) -> bf16[] {
  %Arg_0.2925 = bf16[] parameter(0)
  %Arg_1.2926 = bf16[] parameter(1)
  ROOT %maximum.2927 = bf16[] maximum(%Arg_0.2925, %Arg_1.2926)
}

%region_93.2928.clone (Arg_0.143: bf16[], Arg_1.124: bf16[]) -> bf16[] {
  %Arg_0.143 = bf16[] parameter(0)
  %Arg_1.124 = bf16[] parameter(1)
  ROOT %maximum.104 = bf16[] maximum(%Arg_0.143, %Arg_1.124)
}

%region_34.1844.clone (Arg_0.144: bf16[], Arg_1.125: bf16[]) -> bf16[] {
  %Arg_0.144 = bf16[] parameter(0)
  %Arg_1.125 = bf16[] parameter(1)
  ROOT %maximum.105 = bf16[] maximum(%Arg_0.144, %Arg_1.125)
}

%region_37.1889 (Arg_0.1886: bf16[], Arg_1.1887: bf16[]) -> bf16[] {
  %Arg_0.1886 = bf16[] parameter(0)
  %Arg_1.1887 = bf16[] parameter(1)
  ROOT %maximum.1888 = bf16[] maximum(%Arg_0.1886, %Arg_1.1887)
}

%region_37.1889.clone (Arg_0.145: bf16[], Arg_1.126: bf16[]) -> bf16[] {
  %Arg_0.145 = bf16[] parameter(0)
  %Arg_1.126 = bf16[] parameter(1)
  ROOT %maximum.106 = bf16[] maximum(%Arg_0.145, %Arg_1.126)
}

%region_102.3152 (Arg_0.3149: bf16[], Arg_1.3150: bf16[]) -> bf16[] {
  %Arg_0.3149 = bf16[] parameter(0)
  %Arg_1.3150 = bf16[] parameter(1)
  ROOT %maximum.3151 = bf16[] maximum(%Arg_0.3149, %Arg_1.3150)
}

%region_102.3152.clone (Arg_0.146: bf16[], Arg_1.127: bf16[]) -> bf16[] {
  %Arg_0.146 = bf16[] parameter(0)
  %Arg_1.127 = bf16[] parameter(1)
  ROOT %maximum.107 = bf16[] maximum(%Arg_0.146, %Arg_1.127)
}

%region_46.2017.clone (Arg_0.147: bf16[], Arg_1.128: bf16[]) -> bf16[] {
  %Arg_0.147 = bf16[] parameter(0)
  %Arg_1.128 = bf16[] parameter(1)
  ROOT %maximum.108 = bf16[] maximum(%Arg_0.147, %Arg_1.128)
}

%region_49.2049 (Arg_0.2046: bf16[], Arg_1.2047: bf16[]) -> bf16[] {
  %Arg_0.2046 = bf16[] parameter(0)
  %Arg_1.2047 = bf16[] parameter(1)
  ROOT %maximum.2048 = bf16[] maximum(%Arg_0.2046, %Arg_1.2047)
}

%region_49.2049.clone (Arg_0.148: bf16[], Arg_1.129: bf16[]) -> bf16[] {
  %Arg_0.148 = bf16[] parameter(0)
  %Arg_1.129 = bf16[] parameter(1)
  ROOT %maximum.109 = bf16[] maximum(%Arg_0.148, %Arg_1.129)
}

%region_96.3047 (Arg_0.3044: bf16[], Arg_1.3045: bf16[]) -> bf16[] {
  %Arg_0.3044 = bf16[] parameter(0)
  %Arg_1.3045 = bf16[] parameter(1)
  ROOT %maximum.3046 = bf16[] maximum(%Arg_0.3044, %Arg_1.3045)
}

%region_96.3047.clone (Arg_0.149: bf16[], Arg_1.130: bf16[]) -> bf16[] {
  %Arg_0.149 = bf16[] parameter(0)
  %Arg_1.130 = bf16[] parameter(1)
  ROOT %maximum.110 = bf16[] maximum(%Arg_0.149, %Arg_1.130)
}

%region_31.3396_spmd (param.45: (s32[], bf16[1,8192,16384], f32[126,32,53248], f32[126,32,53248], f32[126,53248,32], /*index=5*/f32[126,16384], f32[126,16384], f32[126,32,8,128], f32[126,128,128,32], f32[126,32,128,128], /*index=10*/f32[126,32,8,128], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=15*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=20*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=25*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=30*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=35*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=40*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=45*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=50*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=55*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=60*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=65*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=70*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=75*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=80*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=85*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=90*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=95*/f32[126,32,53248], f32[126,32,53248], f32[126,53248,32], f32[126,16384], f32[126,16384], /*index=100*/f32[126,32,8,128], f32[126,128,128,32], f32[126,32,128,128], f32[126,32,8,128], bf16[126,1,8192,16384], /*index=105*/s32[1,8192], s32[1,8192])) -> (s32[], bf16[1,8192,16384], f32[126,32,53248], f32[126,32,53248], f32[126,53248,32], /*index=5*/f32[126,16384], f32[126,16384], f32[126,32,8,128], f32[126,128,128,32], f32[126,32,128,128], /*index=10*/f32[126,32,8,128], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=15*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=20*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=25*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=30*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=35*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=40*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=45*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=50*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=55*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=60*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=65*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=70*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=75*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=80*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=85*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=90*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=95*/f32[126,32,53248], f32[126,32,53248], f32[126,53248,32], f32[126,16384], f32[126,16384], /*index=100*/f32[126,32,8,128], f32[126,128,128,32], f32[126,32,128,128], f32[126,32,8,128], bf16[126,1,8192,16384], /*index=105*/s32[1,8192], s32[1,8192]) {
  %param.45 = (s32[], bf16[1,8192,16384]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,53248,32]{2,1,0}, /*index=5*/f32[126,16384]{1,0}, f32[126,16384]{1,0}, f32[126,32,8,128]{3,2,1,0}, f32[126,128,128,32]{3,2,1,0}, f32[126,32,128,128]{3,2,1,0}, /*index=10*/f32[126,32,8,128]{3,2,1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=15*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=20*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=25*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=30*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=35*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=40*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=45*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=50*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=55*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=60*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=65*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=70*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=75*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=80*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=85*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=90*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=95*/f32[126,32,53248]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,53248,32]{2,1,0}, f32[126,16384]{1,0}, f32[126,16384]{1,0}, /*index=100*/f32[126,32,8,128]{3,2,1,0}, f32[126,128,128,32]{3,2,1,0}, f32[126,32,128,128]{3,2,1,0}, f32[126,32,8,128]{3,2,1,0}, bf16[126,1,8192,16384]{3,2,1,0}, /*index=105*/s32[1,8192]{1,0}, s32[1,8192]{1,0}) parameter(0)
  %get-tuple-element.323 = s32[] get-tuple-element(%param.45), index=0
  %constant.1854 = s32[] constant(1)
  %add.140 = s32[] add(%get-tuple-element.323, %constant.1854)
  %get-tuple-element.324 = bf16[1,8192,16384]{2,1,0} get-tuple-element(%param.45), index=1
  %copy.56 = bf16[1,8192,16384]{2,1,0} copy(%get-tuple-element.324)
  %constant.1855 = bf16[] constant(-5.734e+04)
  %broadcast.1745 = bf16[1,8192,53248]{2,1,0} broadcast(%constant.1855), dimensions={}
  %constant.1856 = bf16[] constant(-448)
  %broadcast.1747 = bf16[1,8192,16384]{2,1,0} broadcast(%constant.1856), dimensions={}
  %get-tuple-element.325 = bf16[126,1,8192,16384]{3,2,1,0} get-tuple-element(%param.45), index=104
  %constant.1857 = s32[] constant(125)
  %subtract.9 = s32[] subtract(%constant.1857, %get-tuple-element.323)
  %constant.1859 = s32[] constant(0)
  %dynamic-slice.173 = bf16[1,1,8192,16384]{3,2,1,0} dynamic-slice(%get-tuple-element.325, %subtract.9, %constant.1859, %constant.1859, %constant.1859), dynamic_slice_sizes={1,1,8192,16384}
  %reshape.1750 = bf16[1,8192,16384]{2,1,0} reshape(%dynamic-slice.173)
  %copy.57 = bf16[1,8192,16384]{2,1,0} copy(%reshape.1750)
  %broadcast.1749 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%constant.1856), dimensions={}
  %convert.296 = f32[1,8192,16384]{2,1,0} convert(%copy.57)
  %multiply.248 = f32[1,8192,16384]{2,1,0} multiply(%convert.296, %convert.296)
  %constant.1864 = f32[] constant(0)
  %reduce.175 = f32[1,8192]{1,0} reduce(%multiply.248, %constant.1864), dimensions={2}, to_apply=%region_32.1791
  %constant.1865 = f32[] constant(6.10351562e-05)
  %broadcast.1753 = f32[1,8192]{1,0} broadcast(%constant.1865), dimensions={}
  %multiply.249 = f32[1,8192]{1,0} multiply(%reduce.175, %broadcast.1753)
  %constant.1866 = f32[] constant(1e-05)
  %broadcast.1755 = f32[1,8192]{1,0} broadcast(%constant.1866), dimensions={}
  %add.141 = f32[1,8192]{1,0} add(%multiply.249, %broadcast.1755)
  %reshape.1751 = f32[1,8192,1]{2,1,0} reshape(%add.141)
  %rsqrt.8 = f32[1,8192,1]{2,1,0} rsqrt(%reshape.1751)
  %reshape.1752 = f32[1,8192]{1,0} reshape(%rsqrt.8)
  %broadcast.1757 = f32[1,8192,16384]{2,1,0} broadcast(%reshape.1752), dimensions={0,1}
  %multiply.250 = f32[1,8192,16384]{2,1,0} multiply(%convert.296, %broadcast.1757)
  %convert.297 = bf16[1,8192,16384]{2,1,0} convert(%multiply.250)
  %get-tuple-element.326 = f32[126,16384]{1,0} get-tuple-element(%param.45), index=99
  %dynamic-slice.174 = f32[1,16384]{1,0} dynamic-slice(%get-tuple-element.326, %subtract.9, %constant.1859), dynamic_slice_sizes={1,16384}
  %convert.298 = bf16[1,16384]{1,0} convert(%dynamic-slice.174)
  %reshape.1753 = bf16[16384]{0} reshape(%convert.298)
  %broadcast.1759 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1753), dimensions={2}
  %multiply.251 = bf16[1,8192,16384]{2,1,0} multiply(%convert.297, %broadcast.1759)
  %copy.58 = bf16[1,8192,16384]{2,1,0} copy(%multiply.251)
  %copy.59 = bf16[1,8192,16384]{2,1,0} copy(%copy.58)
  %constant.1868 = f32[1]{0} constant({1})
  %get-tuple-element.327 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=83
  %dynamic-slice.175 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.327, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %constant.1870 = f32[] constant(-inf)
  %reduce.176 = f32[] reduce(%dynamic-slice.175, %constant.1870), dimensions={0,1}, to_apply=%region_33.1817
  %is-finite.49 = pred[] is-finite(%reduce.176)
  %reshape.1754 = pred[1]{0} reshape(%is-finite.49)
  %compare.259 = pred[] compare(%reduce.176, %constant.1864), direction=GT
  %reshape.1755 = pred[1]{0} reshape(%compare.259)
  %constant.1872 = f32[] constant(448)
  %divide.337 = f32[] divide(%constant.1872, %reduce.176)
  %reshape.1756 = f32[1]{0} reshape(%divide.337)
  %constant.1873 = f32[1,1]{1,0} constant({ {1} })
  %get-tuple-element.328 = f32[126,1]{1,0} get-tuple-element(%param.45), index=84
  %dynamic-slice.176 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.328, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.338 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.176)
  %reshape.1757 = f32[1]{0} reshape(%divide.338)
  %select.352 = f32[1]{0} select(%reshape.1755, %reshape.1756, %reshape.1757)
  %select.353 = f32[1]{0} select(%reshape.1754, %select.352, %reshape.1757)
  %divide.339 = f32[1]{0} divide(%constant.1868, %select.353)
  %convert.299 = bf16[1]{0} convert(%divide.339)
  %reshape.1758 = bf16[] reshape(%convert.299)
  %broadcast.1760 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1758), dimensions={}
  %divide.340 = bf16[1,8192,16384]{2,1,0} divide(%copy.59, %broadcast.1760)
  %constant.1875 = bf16[] constant(448)
  %broadcast.1761 = bf16[1,8192,16384]{2,1,0} broadcast(%constant.1875), dimensions={}
  %clamp.63 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1747, %divide.340, %broadcast.1761)
  %convert.300 = f8e4m3fn[1,8192,16384]{2,1,0} convert(%clamp.63)
  %broadcast.1763 = bf16[1,32,128,128]{3,2,1,0} broadcast(%constant.1856), dimensions={}
  %get-tuple-element.329 = f32[126,32,128,128]{3,2,1,0} get-tuple-element(%param.45), index=102
  %dynamic-slice.177 = f32[1,32,128,128]{3,2,1,0} dynamic-slice(%get-tuple-element.329, %subtract.9, %constant.1859, %constant.1859, %constant.1859), dynamic_slice_sizes={1,32,128,128}
  %convert.301 = bf16[1,32,128,128]{3,2,1,0} convert(%dynamic-slice.177)
  %get-tuple-element.330 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=85
  %dynamic-slice.178 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.330, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.177 = f32[] reduce(%dynamic-slice.178, %constant.1870), dimensions={0,1}, to_apply=%region_36.1875
  %is-finite.50 = pred[] is-finite(%reduce.177)
  %reshape.1759 = pred[1]{0} reshape(%is-finite.50)
  %compare.260 = pred[] compare(%reduce.177, %constant.1864), direction=GT
  %reshape.1760 = pred[1]{0} reshape(%compare.260)
  %divide.341 = f32[] divide(%constant.1872, %reduce.177)
  %reshape.1761 = f32[1]{0} reshape(%divide.341)
  %get-tuple-element.331 = f32[126,1]{1,0} get-tuple-element(%param.45), index=86
  %dynamic-slice.179 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.331, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.342 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.179)
  %reshape.1762 = f32[1]{0} reshape(%divide.342)
  %select.354 = f32[1]{0} select(%reshape.1760, %reshape.1761, %reshape.1762)
  %select.355 = f32[1]{0} select(%reshape.1759, %select.354, %reshape.1762)
  %divide.343 = f32[1]{0} divide(%constant.1868, %select.355)
  %convert.302 = bf16[1]{0} convert(%divide.343)
  %reshape.1763 = bf16[] reshape(%convert.302)
  %broadcast.1765 = bf16[1,32,128,128]{3,2,1,0} broadcast(%reshape.1763), dimensions={}
  %divide.344 = bf16[1,32,128,128]{3,2,1,0} divide(%convert.301, %broadcast.1765)
  %broadcast.1767 = bf16[1,32,128,128]{3,2,1,0} broadcast(%constant.1875), dimensions={}
  %clamp.64 = bf16[1,32,128,128]{3,2,1,0} clamp(%broadcast.1763, %divide.344, %broadcast.1767)
  %convert.303 = f8e4m3fn[1,32,128,128]{3,2,1,0} convert(%clamp.64)
  %reshape.1764 = f8e4m3fn[32,128,128]{2,1,0} reshape(%convert.303)
  %all-gather.7 = f8e4m3fn[16384,128,128]{2,1,0} all-gather(%reshape.1764), channel_id=11, replica_groups=[1,512]<=[512], dimensions={0}, use_global_device_ids=true
  %dot.39 = bf16[1,8192,128,128]{3,2,1,0} dot(%convert.300, %all-gather.7), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.252 = f32[1]{0} multiply(%divide.339, %divide.343)
  %convert.304 = bf16[1]{0} convert(%multiply.252)
  %reshape.1765 = bf16[] reshape(%convert.304)
  %broadcast.1769 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%reshape.1765), dimensions={}
  %multiply.253 = bf16[1,8192,128,128]{3,2,1,0} multiply(%dot.39, %broadcast.1769)
  %convert.305 = f32[1,8192,128,128]{3,2,1,0} convert(%multiply.253)
  %get-tuple-element.332 = s32[1,8192]{1,0} get-tuple-element(%param.45), index=106
  %convert.306 = f32[1,8192]{1,0} convert(%get-tuple-element.332)
  %broadcast.1770 = f32[1,8192,1,128]{3,2,1,0} broadcast(%convert.306), dimensions={0,1}
  %constant.1889 = f32[] constant(1)
  %broadcast.1771 = f32[128]{0} broadcast(%constant.1889), dimensions={}
  %constant.1890 = f32[] constant(6.28318548)
  %broadcast.1772 = f32[128]{0} broadcast(%constant.1890), dimensions={}
  %constant.1891 = f32[] constant(500000)
  %broadcast.1773 = f32[128]{0} broadcast(%constant.1891), dimensions={}
  %iota.17 = s32[64]{0} iota(), iota_dimension=0
  %constant.1892 = s32[] constant(2)
  %broadcast.1774 = s32[64]{0} broadcast(%constant.1892), dimensions={}
  %multiply.254 = s32[64]{0} multiply(%iota.17, %broadcast.1774)
  %convert.307 = f32[64]{0} convert(%multiply.254)
  %constant.1893 = f32[] constant(0.0078125)
  %broadcast.1775 = f32[64]{0} broadcast(%constant.1893), dimensions={}
  %multiply.255 = f32[64]{0} multiply(%convert.307, %broadcast.1775)
  %broadcast.1776 = f32[64,2]{1,0} broadcast(%multiply.255), dimensions={0}
  %reshape.1766 = f32[128]{0} reshape(%broadcast.1776)
  %power.10 = f32[128]{0} power(%broadcast.1773, %reshape.1766)
  %multiply.256 = f32[128]{0} multiply(%broadcast.1772, %power.10)
  %constant.1894 = f32[] constant(2048)
  %broadcast.1777 = f32[128]{0} broadcast(%constant.1894), dimensions={}
  %compare.261 = pred[128]{0} compare(%multiply.256, %broadcast.1777), direction=LT
  %convert.308 = s32[128]{0} convert(%compare.261)
  %broadcast.1778 = s32[128]{0} broadcast(%constant.1854), dimensions={}
  %compare.262 = pred[128]{0} compare(%convert.308, %broadcast.1778), direction=LT
  %constant.1896 = f32[] constant(8192)
  %broadcast.1779 = f32[128]{0} broadcast(%constant.1896), dimensions={}
  %compare.264 = pred[128]{0} compare(%multiply.256, %broadcast.1779), direction=GT
  %convert.309 = s32[128]{0} convert(%compare.264)
  %compare.265 = pred[128]{0} compare(%convert.309, %broadcast.1778), direction=LT
  %negate.27 = f32[128]{0} negate(%reshape.1766)
  %power.11 = f32[128]{0} power(%broadcast.1773, %negate.27)
  %multiply.257 = f32[128]{0} multiply(%broadcast.1779, %power.11)
  %constant.1897 = f32[] constant(0.159154937)
  %broadcast.1780 = f32[128]{0} broadcast(%constant.1897), dimensions={}
  %multiply.258 = f32[128]{0} multiply(%multiply.257, %broadcast.1780)
  %constant.1898 = f32[] constant(-1)
  %broadcast.1781 = f32[128]{0} broadcast(%constant.1898), dimensions={}
  %add.142 = f32[128]{0} add(%multiply.258, %broadcast.1781)
  %constant.1899 = f32[] constant(0.333333343)
  %broadcast.1782 = f32[128]{0} broadcast(%constant.1899), dimensions={}
  %multiply.259 = f32[128]{0} multiply(%add.142, %broadcast.1782)
  %subtract.10 = f32[128]{0} subtract(%broadcast.1771, %multiply.259)
  %multiply.260 = f32[128]{0} multiply(%subtract.10, %power.11)
  %constant.1900 = f32[] constant(0.125)
  %broadcast.1783 = f32[128]{0} broadcast(%constant.1900), dimensions={}
  %multiply.261 = f32[128]{0} multiply(%multiply.260, %broadcast.1783)
  %multiply.262 = f32[128]{0} multiply(%multiply.259, %power.11)
  %add.143 = f32[128]{0} add(%multiply.261, %multiply.262)
  %multiply.263 = f32[128]{0} multiply(%power.11, %broadcast.1783)
  %select.356 = f32[128]{0} select(%compare.265, %add.143, %multiply.263)
  %select.357 = f32[128]{0} select(%compare.262, %select.356, %power.11)
  %divide.346 = f32[128]{0} divide(%broadcast.1771, %select.357)
  %broadcast.1785 = f32[1,8192,1,128]{3,2,1,0} broadcast(%divide.346), dimensions={3}
  %divide.347 = f32[1,8192,1,128]{3,2,1,0} divide(%broadcast.1770, %broadcast.1785)
  %cosine.2 = f32[1,8192,1,128]{3,2,1,0} cosine(%divide.347)
  %reshape.1767 = f32[1,8192,128]{2,1,0} reshape(%cosine.2)
  %broadcast.1786 = f32[1,8192,128,128]{3,2,1,0} broadcast(%reshape.1767), dimensions={0,1,3}
  %multiply.264 = f32[1,8192,128,128]{3,2,1,0} multiply(%convert.305, %broadcast.1786)
  %iota.18 = s32[128]{0} iota(), iota_dimension=0
  %and.82 = s32[128]{0} and(%iota.18, %broadcast.1778)
  %broadcast.1788 = s32[128]{0} broadcast(%constant.1859), dimensions={}
  %compare.266 = pred[128]{0} compare(%and.82, %broadcast.1788), direction=LT
  %compare.267 = pred[128]{0} compare(%and.82, %broadcast.1788), direction=NE
  %and.83 = pred[128]{0} and(%compare.266, %compare.267)
  %broadcast.1789 = s32[128]{0} broadcast(%constant.1892), dimensions={}
  %add.144 = s32[128]{0} add(%and.82, %broadcast.1789)
  %select.358 = s32[128]{0} select(%and.83, %add.144, %and.82)
  %compare.268 = pred[128]{0} compare(%select.358, %broadcast.1778), direction=LT
  %broadcast.1791 = pred[1,8192,128,128]{3,2,1,0} broadcast(%compare.268), dimensions={3}
  %slice.407 = bf16[1,8192,128,127]{3,2,1,0} slice(%multiply.253), slice={[0:1], [0:8192], [0:128], [1:128]}
  %slice.408 = bf16[1,8192,128,1]{3,2,1,0} slice(%multiply.253), slice={[0:1], [0:8192], [0:128], [0:1]}
  %concatenate.115 = bf16[1,8192,128,128]{3,2,1,0} concatenate(%slice.407, %slice.408), dimensions={3}
  %slice.409 = bf16[1,8192,128,1]{3,2,1,0} slice(%multiply.253), slice={[0:1], [0:8192], [0:128], [127:128]}
  %slice.410 = bf16[1,8192,128,127]{3,2,1,0} slice(%multiply.253), slice={[0:1], [0:8192], [0:128], [0:127]}
  %concatenate.116 = bf16[1,8192,128,128]{3,2,1,0} concatenate(%slice.409, %slice.410), dimensions={3}
  %select.359 = bf16[1,8192,128,128]{3,2,1,0} select(%broadcast.1791, %concatenate.115, %concatenate.116)
  %convert.310 = f32[1,8192,128,128]{3,2,1,0} convert(%select.359)
  %sine.2 = f32[1,8192,1,128]{3,2,1,0} sine(%divide.347)
  %reshape.1772 = f32[1,8192,128]{2,1,0} reshape(%sine.2)
  %broadcast.1792 = f32[1,8192,128,128]{3,2,1,0} broadcast(%reshape.1772), dimensions={0,1,3}
  %multiply.269 = f32[1,8192,128,128]{3,2,1,0} multiply(%convert.310, %broadcast.1792)
  %constant.1942 = s32[2]{0} constant({-1, 1})
  %broadcast.1793 = s32[64,2]{1,0} broadcast(%constant.1942), dimensions={1}
  %reshape.1773 = s32[128]{0} reshape(%broadcast.1793)
  %convert.311 = f32[128]{0} convert(%reshape.1773)
  %broadcast.1794 = f32[1,8192,128,128]{3,2,1,0} broadcast(%convert.311), dimensions={3}
  %multiply.270 = f32[1,8192,128,128]{3,2,1,0} multiply(%multiply.269, %broadcast.1794)
  %add.145 = f32[1,8192,128,128]{3,2,1,0} add(%multiply.264, %multiply.270)
  %convert.313 = bf16[1,8192,128,128]{3,2,1,0} convert(%add.145)
  %copy.60 = bf16[1,8192,128,128]{3,2,1,0} copy(%convert.313)
  %get-tuple-element.333 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=71
  %dynamic-slice.184 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.333, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.178 = f32[] reduce(%dynamic-slice.184, %constant.1870), dimensions={0,1}, to_apply=%region_39.1923
  %is-finite.51 = pred[] is-finite(%reduce.178)
  %reshape.1774 = pred[1]{0} reshape(%is-finite.51)
  %compare.269 = pred[] compare(%reduce.178, %constant.1864), direction=GT
  %reshape.1775 = pred[1]{0} reshape(%compare.269)
  %divide.348 = f32[] divide(%constant.1872, %reduce.178)
  %reshape.1776 = f32[1]{0} reshape(%divide.348)
  %get-tuple-element.334 = f32[126,1]{1,0} get-tuple-element(%param.45), index=72
  %dynamic-slice.185 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.334, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.349 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.185)
  %reshape.1777 = f32[1]{0} reshape(%divide.349)
  %select.360 = f32[1]{0} select(%reshape.1775, %reshape.1776, %reshape.1777)
  %select.361 = f32[1]{0} select(%reshape.1774, %select.360, %reshape.1777)
  %divide.350 = f32[1]{0} divide(%constant.1868, %select.361)
  %convert.314 = bf16[1]{0} convert(%divide.350)
  %reshape.1778 = bf16[] reshape(%convert.314)
  %broadcast.1796 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1778), dimensions={}
  %divide.351 = bf16[1,8192,16384]{2,1,0} divide(%copy.59, %broadcast.1796)
  %clamp.65 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1747, %divide.351, %broadcast.1761)
  %convert.315 = f8e4m3fn[1,8192,16384]{2,1,0} convert(%clamp.65)
  %broadcast.1798 = bf16[1,32,8,128]{3,2,1,0} broadcast(%constant.1856), dimensions={}
  %get-tuple-element.335 = f32[126,32,8,128]{3,2,1,0} get-tuple-element(%param.45), index=100
  %dynamic-slice.186 = f32[1,32,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.335, %subtract.9, %constant.1859, %constant.1859, %constant.1859), dynamic_slice_sizes={1,32,8,128}
  %convert.316 = bf16[1,32,8,128]{3,2,1,0} convert(%dynamic-slice.186)
  %get-tuple-element.336 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=73
  %dynamic-slice.187 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.336, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.179 = f32[] reduce(%dynamic-slice.187, %constant.1870), dimensions={0,1}, to_apply=%region_42.1955
  %is-finite.52 = pred[] is-finite(%reduce.179)
  %reshape.1779 = pred[1]{0} reshape(%is-finite.52)
  %compare.270 = pred[] compare(%reduce.179, %constant.1864), direction=GT
  %reshape.1780 = pred[1]{0} reshape(%compare.270)
  %divide.352 = f32[] divide(%constant.1872, %reduce.179)
  %reshape.1781 = f32[1]{0} reshape(%divide.352)
  %get-tuple-element.337 = f32[126,1]{1,0} get-tuple-element(%param.45), index=74
  %dynamic-slice.188 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.337, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.353 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.188)
  %reshape.1782 = f32[1]{0} reshape(%divide.353)
  %select.362 = f32[1]{0} select(%reshape.1780, %reshape.1781, %reshape.1782)
  %select.363 = f32[1]{0} select(%reshape.1779, %select.362, %reshape.1782)
  %divide.354 = f32[1]{0} divide(%constant.1868, %select.363)
  %convert.317 = bf16[1]{0} convert(%divide.354)
  %reshape.1783 = bf16[] reshape(%convert.317)
  %broadcast.1800 = bf16[1,32,8,128]{3,2,1,0} broadcast(%reshape.1783), dimensions={}
  %divide.355 = bf16[1,32,8,128]{3,2,1,0} divide(%convert.316, %broadcast.1800)
  %broadcast.1802 = bf16[1,32,8,128]{3,2,1,0} broadcast(%constant.1875), dimensions={}
  %clamp.66 = bf16[1,32,8,128]{3,2,1,0} clamp(%broadcast.1798, %divide.355, %broadcast.1802)
  %convert.318 = f8e4m3fn[1,32,8,128]{3,2,1,0} convert(%clamp.66)
  %reshape.1784 = f8e4m3fn[32,8,128]{2,1,0} reshape(%convert.318)
  %all-gather.8 = f8e4m3fn[16384,8,128]{2,1,0} all-gather(%reshape.1784), channel_id=12, replica_groups=[1,512]<=[512], dimensions={0}, use_global_device_ids=true
  %dot.40 = bf16[1,8192,8,128]{3,2,1,0} dot(%convert.315, %all-gather.8), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.271 = f32[1]{0} multiply(%divide.350, %divide.354)
  %convert.319 = bf16[1]{0} convert(%multiply.271)
  %reshape.1785 = bf16[] reshape(%convert.319)
  %broadcast.1803 = bf16[1,8192,8,128]{3,2,1,0} broadcast(%reshape.1785), dimensions={}
  %multiply.272 = bf16[1,8192,8,128]{3,2,1,0} multiply(%dot.40, %broadcast.1803)
  %convert.321 = f32[1,8192,8,128]{3,2,1,0} convert(%multiply.272)
  %broadcast.1815 = f32[1,8192,8,128]{3,2,1,0} broadcast(%reshape.1767), dimensions={0,1,3}
  %multiply.283 = f32[1,8192,8,128]{3,2,1,0} multiply(%convert.321, %broadcast.1815)
  %broadcast.1820 = pred[1,8192,8,128]{3,2,1,0} broadcast(%compare.268), dimensions={3}
  %slice.411 = bf16[1,8192,8,127]{3,2,1,0} slice(%multiply.272), slice={[0:1], [0:8192], [0:8], [1:128]}
  %slice.412 = bf16[1,8192,8,1]{3,2,1,0} slice(%multiply.272), slice={[0:1], [0:8192], [0:8], [0:1]}
  %concatenate.117 = bf16[1,8192,8,128]{3,2,1,0} concatenate(%slice.411, %slice.412), dimensions={3}
  %slice.413 = bf16[1,8192,8,1]{3,2,1,0} slice(%multiply.272), slice={[0:1], [0:8192], [0:8], [127:128]}
  %slice.414 = bf16[1,8192,8,127]{3,2,1,0} slice(%multiply.272), slice={[0:1], [0:8192], [0:8], [0:127]}
  %concatenate.118 = bf16[1,8192,8,128]{3,2,1,0} concatenate(%slice.413, %slice.414), dimensions={3}
  %select.367 = bf16[1,8192,8,128]{3,2,1,0} select(%broadcast.1820, %concatenate.117, %concatenate.118)
  %convert.327 = f32[1,8192,8,128]{3,2,1,0} convert(%select.367)
  %broadcast.1821 = f32[1,8192,8,128]{3,2,1,0} broadcast(%reshape.1772), dimensions={0,1,3}
  %multiply.288 = f32[1,8192,8,128]{3,2,1,0} multiply(%convert.327, %broadcast.1821)
  %broadcast.1823 = f32[1,8192,8,128]{3,2,1,0} broadcast(%convert.311), dimensions={3}
  %multiply.289 = f32[1,8192,8,128]{3,2,1,0} multiply(%multiply.288, %broadcast.1823)
  %add.149 = f32[1,8192,8,128]{3,2,1,0} add(%multiply.283, %multiply.289)
  %convert.329 = bf16[1,8192,8,128]{3,2,1,0} convert(%add.149)
  %copy.62 = bf16[1,8192,8,128]{3,2,1,0} copy(%convert.329)
  %get-tuple-element.338 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=89
  %dynamic-slice.193 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.338, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.180 = f32[] reduce(%dynamic-slice.193, %constant.1870), dimensions={0,1}, to_apply=%region_45.2003
  %is-finite.53 = pred[] is-finite(%reduce.180)
  %reshape.1795 = pred[1]{0} reshape(%is-finite.53)
  %compare.278 = pred[] compare(%reduce.180, %constant.1864), direction=GT
  %reshape.1796 = pred[1]{0} reshape(%compare.278)
  %divide.358 = f32[] divide(%constant.1872, %reduce.180)
  %reshape.1797 = f32[1]{0} reshape(%divide.358)
  %get-tuple-element.339 = f32[126,1]{1,0} get-tuple-element(%param.45), index=90
  %dynamic-slice.194 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.339, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.359 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.194)
  %reshape.1798 = f32[1]{0} reshape(%divide.359)
  %select.368 = f32[1]{0} select(%reshape.1796, %reshape.1797, %reshape.1798)
  %select.369 = f32[1]{0} select(%reshape.1795, %select.368, %reshape.1798)
  %divide.360 = f32[1]{0} divide(%constant.1868, %select.369)
  %convert.330 = bf16[1]{0} convert(%divide.360)
  %reshape.1799 = bf16[] reshape(%convert.330)
  %broadcast.1825 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1799), dimensions={}
  %divide.361 = bf16[1,8192,16384]{2,1,0} divide(%copy.59, %broadcast.1825)
  %clamp.67 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1747, %divide.361, %broadcast.1761)
  %convert.331 = f8e4m3fn[1,8192,16384]{2,1,0} convert(%clamp.67)
  %get-tuple-element.340 = f32[126,32,8,128]{3,2,1,0} get-tuple-element(%param.45), index=103
  %dynamic-slice.195 = f32[1,32,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.340, %subtract.9, %constant.1859, %constant.1859, %constant.1859), dynamic_slice_sizes={1,32,8,128}
  %convert.332 = bf16[1,32,8,128]{3,2,1,0} convert(%dynamic-slice.195)
  %get-tuple-element.341 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=91
  %dynamic-slice.196 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.341, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.181 = f32[] reduce(%dynamic-slice.196, %constant.1870), dimensions={0,1}, to_apply=%region_48.2035
  %is-finite.54 = pred[] is-finite(%reduce.181)
  %reshape.1801 = pred[1]{0} reshape(%is-finite.54)
  %compare.279 = pred[] compare(%reduce.181, %constant.1864), direction=GT
  %reshape.1802 = pred[1]{0} reshape(%compare.279)
  %divide.362 = f32[] divide(%constant.1872, %reduce.181)
  %reshape.1803 = f32[1]{0} reshape(%divide.362)
  %get-tuple-element.342 = f32[126,1]{1,0} get-tuple-element(%param.45), index=92
  %dynamic-slice.197 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.342, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.363 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.197)
  %reshape.1804 = f32[1]{0} reshape(%divide.363)
  %select.370 = f32[1]{0} select(%reshape.1802, %reshape.1803, %reshape.1804)
  %select.371 = f32[1]{0} select(%reshape.1801, %select.370, %reshape.1804)
  %divide.364 = f32[1]{0} divide(%constant.1868, %select.371)
  %convert.333 = bf16[1]{0} convert(%divide.364)
  %reshape.1806 = bf16[] reshape(%convert.333)
  %broadcast.1829 = bf16[1,32,8,128]{3,2,1,0} broadcast(%reshape.1806), dimensions={}
  %divide.366 = bf16[1,32,8,128]{3,2,1,0} divide(%convert.332, %broadcast.1829)
  %clamp.68 = bf16[1,32,8,128]{3,2,1,0} clamp(%broadcast.1798, %divide.366, %broadcast.1802)
  %convert.334 = f8e4m3fn[1,32,8,128]{3,2,1,0} convert(%clamp.68)
  %reshape.1808 = f8e4m3fn[32,8,128]{2,1,0} reshape(%convert.334)
  %all-gather.9 = f8e4m3fn[16384,8,128]{2,1,0} all-gather(%reshape.1808), channel_id=13, replica_groups=[1,512]<=[512], dimensions={0}, use_global_device_ids=true
  %dot.41 = bf16[1,8192,8,128]{3,2,1,0} dot(%convert.331, %all-gather.9), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.290 = f32[1]{0} multiply(%divide.360, %divide.364)
  %convert.335 = bf16[1]{0} convert(%multiply.290)
  %reshape.1809 = bf16[] reshape(%convert.335)
  %broadcast.1831 = bf16[1,8192,8,128]{3,2,1,0} broadcast(%reshape.1809), dimensions={}
  %multiply.291 = bf16[1,8192,8,128]{3,2,1,0} multiply(%dot.41, %broadcast.1831)
  %copy.63 = bf16[1,8192,8,128]{3,2,1,0} copy(%multiply.291)
  %constant.2034 = bf16[0]{0} constant({})
  %broadcast.1840 = s32[2]{0} broadcast(%constant.1859), dimensions={}
  %reshape.1815 = s32[1]{0} reshape(%constant.1854)
  %reshape.1816 = s32[1]{0} reshape(%constant.1859)
  %constant.2055 = pred[1]{0} constant({0})
  %constant.2056 = s32[1]{0} constant({1})
  %constant.2057 = s32[1]{0} constant({0})
  %select.373 = s32[1]{0} select(%constant.2055, %constant.2056, %constant.2057)
  %maximum.111 = s32[1]{0} maximum(%reshape.1816, %select.373)
  %minimum.88 = s32[1]{0} minimum(%reshape.1815, %maximum.111)
  %sort.2 = (s32[1]{0}, s32[1]{0}) sort(%minimum.88, %constant.2057), dimensions={0}, is_stable=true, to_apply=%region_0.61._custom_call_lowering_rule.1
  %get-tuple-element.344 = s32[1]{0} get-tuple-element(%sort.2), index=1
  %compare.283 = pred[1]{0} compare(%get-tuple-element.344, %constant.2057), direction=LT
  %add.150 = s32[1]{0} add(%get-tuple-element.344, %constant.2056)
  %select.374 = s32[1]{0} select(%compare.283, %add.150, %get-tuple-element.344)
  %reshape.1817 = s32[1,1]{1,0} reshape(%select.374)
  %scatter.21 = s32[1]{0} scatter(%minimum.88, %reshape.1817, %constant.2057), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_1.74._custom_call_lowering_rule.1
  %compare.285 = pred[1]{0} compare(%scatter.21, %constant.2057), direction=LT
  %constant.2059 = s32[1]{0} constant({2})
  %add.151 = s32[1]{0} add(%scatter.21, %constant.2059)
  %select.375 = s32[1]{0} select(%compare.285, %add.151, %scatter.21)
  %reshape.1818 = s32[1,1]{1,0} reshape(%select.375)
  %scatter.22 = s32[2]{0} scatter(%broadcast.1840, %reshape.1818, %constant.2057), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_5.170._custom_call_lowering_rule.1
  %constant.2060 = pred[] constant(true)
  %broadcast.1842 = pred[2]{0} broadcast(%constant.2060), dimensions={}
  %scatter.23 = pred[2]{0} scatter(%broadcast.1842, %reshape.1818, %constant.2055), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_2.82._custom_call_lowering_rule.1
  %convert.339 = s32[2]{0} convert(%scatter.23)
  %reduce-window.0 = s32[2]{0} reduce-window(%convert.339, %constant.1859), window={size=2 pad=1_0}, to_apply=%region_3.91._custom_call_lowering_rule.1
  %maximum.112 = s32[2]{0} maximum(%broadcast.1840, %reduce-window.0)
  %compare.287 = pred[2]{0} compare(%maximum.112, %broadcast.1840), direction=LT
  %broadcast.1843 = s32[2]{0} broadcast(%constant.1854), dimensions={}
  %add.153 = s32[2]{0} add(%maximum.112, %broadcast.1843)
  %select.377 = s32[2]{0} select(%compare.287, %add.153, %maximum.112)
  %reshape.1820 = s32[2,1]{1,0} reshape(%select.377)
  %scatter.24 = s32[1]{0} scatter(%constant.2057, %reshape.1820, %broadcast.1843), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_4.110._custom_call_lowering_rule.1
  %sign.4 = s32[1]{0} sign(%scatter.24)
  %sign.5 = s32[] sign(%constant.1854)
  %reshape.1821 = s32[1]{0} reshape(%sign.5)
  %compare.288 = pred[1]{0} compare(%sign.4, %reshape.1821), direction=NE
  %remainder.12 = s32[1]{0} remainder(%scatter.24, %reshape.1815)
  %compare.289 = pred[1]{0} compare(%remainder.12, %constant.2057), direction=NE
  %and.87 = pred[1]{0} and(%compare.288, %compare.289)
  %divide.367 = s32[1]{0} divide(%scatter.24, %reshape.1815)
  %subtract.12 = s32[1]{0} subtract(%divide.367, %constant.2056)
  %select.378 = s32[1]{0} select(%and.87, %subtract.12, %divide.367)
  %compare.290 = pred[] compare(%constant.1892, %constant.1859), direction=EQ
  %select.379 = s32[] select(%compare.290, %constant.1854, %constant.1892)
  %reshape.1824 = s32[1]{0} reshape(%select.379)
  %remainder.13 = s32[1]{0} remainder(%select.378, %reshape.1824)
  %compare.291 = pred[1]{0} compare(%remainder.13, %constant.2057), direction=LT
  %compare.292 = pred[] compare(%select.379, %constant.1859), direction=LT
  %reshape.1825 = pred[1]{0} reshape(%compare.292)
  %compare.296 = pred[1]{0} compare(%compare.291, %reshape.1825), direction=NE
  %compare.298 = pred[1]{0} compare(%remainder.13, %constant.2057), direction=NE
  %and.88 = pred[1]{0} and(%compare.296, %compare.298)
  %add.154 = s32[1]{0} add(%remainder.13, %reshape.1824)
  %select.380 = s32[1]{0} select(%and.88, %add.154, %remainder.13)
  %compare.299 = pred[1]{0} compare(%select.380, %constant.2057), direction=LT
  %add.155 = s32[1]{0} add(%select.380, %constant.2059)
  %select.381 = s32[1]{0} select(%compare.299, %add.155, %select.380)
  %reshape.1828 = s32[1,1]{1,0} reshape(%select.381)
  %get-tuple-element.343 = s32[1,8192]{1,0} get-tuple-element(%param.45), index=105
  %broadcast.1832 = s32[1,8192,8192]{2,1,0} broadcast(%get-tuple-element.343), dimensions={0,1}
  %broadcast.1833 = s32[1,8192,8192]{2,1,0} broadcast(%get-tuple-element.343), dimensions={0,2}
  %compare.280 = pred[1,8192,8192]{2,1,0} compare(%broadcast.1832, %broadcast.1833), direction=EQ
  %iota.21 = s32[8192,8192]{1,0} iota(), iota_dimension=1
  %iota.22 = s32[8192,8192]{1,0} iota(), iota_dimension=0
  %compare.281 = pred[8192,8192]{1,0} compare(%iota.21, %iota.22), direction=LE
  %broadcast.1834 = pred[1,8192,8192]{2,1,0} broadcast(%compare.281), dimensions={1,2}
  %and.86 = pred[1,8192,8192]{2,1,0} and(%compare.280, %broadcast.1834)
  %broadcast.1836 = f32[1,8192,8192]{2,1,0} broadcast(%constant.1864), dimensions={}
  %constant.2036 = f32[] constant(-2.38197633e+38)
  %broadcast.1837 = f32[1,8192,8192]{2,1,0} broadcast(%constant.2036), dimensions={}
  %select.372 = f32[1,8192,8192]{2,1,0} select(%and.86, %broadcast.1836, %broadcast.1837)
  %compare.282 = pred[1,8192,8192]{2,1,0} compare(%select.372, %broadcast.1836), direction=NE
  %not.3 = pred[1,8192,8192]{2,1,0} not(%compare.282)
  %convert.336 = s32[1,8192,8192]{2,1,0} convert(%not.3)
  %reduce.182 = s32[1,8192]{1,0} reduce(%convert.336, %constant.1859), dimensions={1}, to_apply=%region_51.2287
  %reshape.1810 = s32[1,1,1,8192]{3,2,1,0} reshape(%reduce.182)
  %slice.415 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.1810), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.1812 = s32[1,1]{1,0} reshape(%slice.415)
  %reshape.1829 = s32[1]{0} reshape(%reshape.1812)
  %compare.300 = pred[1]{0} compare(%reshape.1829, %constant.2057), direction=LT
  %constant.2069 = s32[] constant(-1)
  %reshape.1830 = s32[1]{0} reshape(%constant.2069)
  %select.382 = s32[1]{0} select(%compare.300, %reshape.1830, %reshape.1829)
  %scatter.25 = s32[2]{0} scatter(%scatter.22, %reshape.1828, %select.382), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.1
  %reduce.183 = s32[1,8192]{1,0} reduce(%convert.336, %constant.1859), dimensions={2}, to_apply=%region_52.2295
  %reshape.1813 = s32[1,1,1,8192]{3,2,1,0} reshape(%reduce.183)
  %constant.2049 = s32[] constant(-2147483648)
  %reduce.184 = s32[1,1]{1,0} reduce(%reshape.1813, %constant.2049), dimensions={3,2}, to_apply=%region_53.2300
  %reshape.1844 = s32[1]{0} reshape(%reduce.184)
  %compare.313 = pred[1]{0} compare(%reshape.1844, %constant.2057), direction=LT
  %select.394 = s32[1]{0} select(%compare.313, %reshape.1830, %reshape.1844)
  %scatter.30 = s32[2]{0} scatter(%scatter.22, %reshape.1828, %select.394), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.1
  %constant.2050 = u32[] constant(0)
  %broadcast.1839 = u32[1024]{0} broadcast(%constant.2050), dimensions={}
  %constant.2051 = s32[512]{0} constant({0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022})
  %partition-id.3 = u32[] partition-id()
  %dynamic-slice.199 = s32[1]{0} dynamic-slice(%constant.2051, %partition-id.3), dynamic_slice_sizes={1}
  %reshape.1814 = s32[] reshape(%dynamic-slice.199)
  %dynamic-slice.200 = u32[2]{0} dynamic-slice(%broadcast.1839, %reshape.1814), dynamic_slice_sizes={2}
  %custom-call.40 = (bf16[1,8192,128,128]{3,2,1,0}, f32[1,128,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.60, %copy.62, %copy.63, %constant.2034, %scatter.25, /*index=5*/%scatter.30, %constant.2034, %constant.2034, %dynamic-slice.200), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,8192,128,128]{3,2,1,0}, bf16[1,8192,8,128]{3,2,1,0}, bf16[1,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 128 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.349 = bf16[1,8192,128,128]{3,2,1,0} get-tuple-element(%custom-call.40), index=0
  %copy.64 = bf16[1,8192,128,128]{3,2,1,0} copy(%get-tuple-element.349)
  %get-tuple-element.350 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=77
  %dynamic-slice.201 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.350, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.185 = f32[] reduce(%dynamic-slice.201, %constant.1870), dimensions={0,1}, to_apply=%region_54.2311
  %is-finite.55 = pred[] is-finite(%reduce.185)
  %reshape.1846 = pred[1]{0} reshape(%is-finite.55)
  %compare.314 = pred[] compare(%reduce.185, %constant.1864), direction=GT
  %reshape.1847 = pred[1]{0} reshape(%compare.314)
  %divide.371 = f32[] divide(%constant.1872, %reduce.185)
  %reshape.1848 = f32[1]{0} reshape(%divide.371)
  %get-tuple-element.351 = f32[126,1]{1,0} get-tuple-element(%param.45), index=78
  %dynamic-slice.202 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.351, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.372 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.202)
  %reshape.1849 = f32[1]{0} reshape(%divide.372)
  %select.395 = f32[1]{0} select(%reshape.1847, %reshape.1848, %reshape.1849)
  %select.396 = f32[1]{0} select(%reshape.1846, %select.395, %reshape.1849)
  %divide.373 = f32[1]{0} divide(%constant.1868, %select.396)
  %convert.341 = bf16[1]{0} convert(%divide.373)
  %reshape.1850 = bf16[] reshape(%convert.341)
  %broadcast.1845 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%reshape.1850), dimensions={}
  %divide.374 = bf16[1,8192,128,128]{3,2,1,0} divide(%copy.64, %broadcast.1845)
  %broadcast.1846 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%constant.1875), dimensions={}
  %clamp.69 = bf16[1,8192,128,128]{3,2,1,0} clamp(%broadcast.1749, %divide.374, %broadcast.1846)
  %convert.342 = f8e4m3fn[1,8192,128,128]{3,2,1,0} convert(%clamp.69)
  %broadcast.1847 = bf16[1,128,128,32]{3,2,1,0} broadcast(%constant.1856), dimensions={}
  %get-tuple-element.352 = f32[126,128,128,32]{3,2,1,0} get-tuple-element(%param.45), index=101
  %dynamic-slice.203 = f32[1,128,128,32]{3,2,1,0} dynamic-slice(%get-tuple-element.352, %subtract.9, %constant.1859, %constant.1859, %constant.1859), dynamic_slice_sizes={1,128,128,32}
  %convert.343 = bf16[1,128,128,32]{3,2,1,0} convert(%dynamic-slice.203)
  %get-tuple-element.353 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=79
  %dynamic-slice.204 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.353, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.186 = f32[] reduce(%dynamic-slice.204, %constant.1870), dimensions={0,1}, to_apply=%region_57.2351
  %is-finite.56 = pred[] is-finite(%reduce.186)
  %reshape.1851 = pred[1]{0} reshape(%is-finite.56)
  %compare.315 = pred[] compare(%reduce.186, %constant.1864), direction=GT
  %reshape.1852 = pred[1]{0} reshape(%compare.315)
  %divide.376 = f32[] divide(%constant.1872, %reduce.186)
  %reshape.1853 = f32[1]{0} reshape(%divide.376)
  %get-tuple-element.354 = f32[126,1]{1,0} get-tuple-element(%param.45), index=80
  %dynamic-slice.205 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.354, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.378 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.205)
  %reshape.1854 = f32[1]{0} reshape(%divide.378)
  %select.397 = f32[1]{0} select(%reshape.1852, %reshape.1853, %reshape.1854)
  %select.398 = f32[1]{0} select(%reshape.1851, %select.397, %reshape.1854)
  %divide.379 = f32[1]{0} divide(%constant.1868, %select.398)
  %convert.344 = bf16[1]{0} convert(%divide.379)
  %reshape.1855 = bf16[] reshape(%convert.344)
  %broadcast.1848 = bf16[1,128,128,32]{3,2,1,0} broadcast(%reshape.1855), dimensions={}
  %divide.381 = bf16[1,128,128,32]{3,2,1,0} divide(%convert.343, %broadcast.1848)
  %broadcast.1849 = bf16[1,128,128,32]{3,2,1,0} broadcast(%constant.1875), dimensions={}
  %clamp.70 = bf16[1,128,128,32]{3,2,1,0} clamp(%broadcast.1847, %divide.381, %broadcast.1849)
  %convert.345 = f8e4m3fn[1,128,128,32]{3,2,1,0} convert(%clamp.70)
  %reshape.1856 = f8e4m3fn[128,128,32]{2,1,0} reshape(%convert.345)
  %all-gather.10 = f8e4m3fn[128,128,16384]{2,1,0} all-gather(%reshape.1856), channel_id=14, replica_groups=[1,512]<=[512], dimensions={2}, use_global_device_ids=true
  %dot.42 = bf16[1,8192,16384]{2,1,0} dot(%convert.342, %all-gather.10), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %multiply.293 = f32[1]{0} multiply(%divide.373, %divide.379)
  %convert.346 = bf16[1]{0} convert(%multiply.293)
  %reshape.1857 = bf16[] reshape(%convert.346)
  %broadcast.1850 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1857), dimensions={}
  %multiply.294 = bf16[1,8192,16384]{2,1,0} multiply(%dot.42, %broadcast.1850)
  %copy.65 = bf16[1,8192,16384]{2,1,0} copy(%multiply.294)
  %add.162 = bf16[1,8192,16384]{2,1,0} add(%copy.57, %copy.65)
  %convert.347 = f32[1,8192,16384]{2,1,0} convert(%add.162)
  %multiply.295 = f32[1,8192,16384]{2,1,0} multiply(%convert.347, %convert.347)
  %reduce.187 = f32[1,8192]{1,0} reduce(%multiply.295, %constant.1864), dimensions={2}, to_apply=%region_60.2403
  %multiply.296 = f32[1,8192]{1,0} multiply(%reduce.187, %broadcast.1753)
  %add.163 = f32[1,8192]{1,0} add(%multiply.296, %broadcast.1755)
  %reshape.1858 = f32[1,8192,1]{2,1,0} reshape(%add.163)
  %rsqrt.9 = f32[1,8192,1]{2,1,0} rsqrt(%reshape.1858)
  %reshape.1860 = f32[1,8192]{1,0} reshape(%rsqrt.9)
  %broadcast.1853 = f32[1,8192,16384]{2,1,0} broadcast(%reshape.1860), dimensions={0,1}
  %multiply.297 = f32[1,8192,16384]{2,1,0} multiply(%convert.347, %broadcast.1853)
  %convert.348 = bf16[1,8192,16384]{2,1,0} convert(%multiply.297)
  %get-tuple-element.355 = f32[126,16384]{1,0} get-tuple-element(%param.45), index=98
  %dynamic-slice.206 = f32[1,16384]{1,0} dynamic-slice(%get-tuple-element.355, %subtract.9, %constant.1859), dynamic_slice_sizes={1,16384}
  %convert.349 = bf16[1,16384]{1,0} convert(%dynamic-slice.206)
  %reshape.1861 = bf16[16384]{0} reshape(%convert.349)
  %broadcast.1854 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1861), dimensions={2}
  %multiply.298 = bf16[1,8192,16384]{2,1,0} multiply(%convert.348, %broadcast.1854)
  %copy.66 = bf16[1,8192,16384]{2,1,0} copy(%multiply.298)
  %get-tuple-element.356 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=53
  %dynamic-slice.207 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.356, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.188 = f32[] reduce(%dynamic-slice.207, %constant.1870), dimensions={0,1}, to_apply=%region_61.2427
  %is-finite.57 = pred[] is-finite(%reduce.188)
  %reshape.1862 = pred[1]{0} reshape(%is-finite.57)
  %compare.316 = pred[] compare(%reduce.188, %constant.1864), direction=GT
  %reshape.1863 = pred[1]{0} reshape(%compare.316)
  %divide.382 = f32[] divide(%constant.1872, %reduce.188)
  %reshape.1864 = f32[1]{0} reshape(%divide.382)
  %get-tuple-element.357 = f32[126,1]{1,0} get-tuple-element(%param.45), index=54
  %dynamic-slice.208 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.357, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.384 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.208)
  %reshape.1865 = f32[1]{0} reshape(%divide.384)
  %select.399 = f32[1]{0} select(%reshape.1863, %reshape.1864, %reshape.1865)
  %select.400 = f32[1]{0} select(%reshape.1862, %select.399, %reshape.1865)
  %divide.385 = f32[1]{0} divide(%constant.1868, %select.400)
  %convert.350 = bf16[1]{0} convert(%divide.385)
  %reshape.1866 = bf16[] reshape(%convert.350)
  %broadcast.1855 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1866), dimensions={}
  %divide.386 = bf16[1,8192,16384]{2,1,0} divide(%copy.66, %broadcast.1855)
  %clamp.71 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1747, %divide.386, %broadcast.1761)
  %convert.351 = f8e4m3fn[1,8192,16384]{2,1,0} convert(%clamp.71)
  %broadcast.1857 = bf16[1,32,53248]{2,1,0} broadcast(%constant.1856), dimensions={}
  %get-tuple-element.358 = f32[126,32,53248]{2,1,0} get-tuple-element(%param.45), index=95
  %dynamic-slice.209 = f32[1,32,53248]{2,1,0} dynamic-slice(%get-tuple-element.358, %subtract.9, %constant.1859, %constant.1859), dynamic_slice_sizes={1,32,53248}
  %convert.353 = bf16[1,32,53248]{2,1,0} convert(%dynamic-slice.209)
  %get-tuple-element.359 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=55
  %dynamic-slice.210 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.359, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.189 = f32[] reduce(%dynamic-slice.210, %constant.1870), dimensions={0,1}, to_apply=%region_64.2459
  %is-finite.58 = pred[] is-finite(%reduce.189)
  %reshape.1867 = pred[1]{0} reshape(%is-finite.58)
  %compare.317 = pred[] compare(%reduce.189, %constant.1864), direction=GT
  %reshape.1868 = pred[1]{0} reshape(%compare.317)
  %divide.387 = f32[] divide(%constant.1872, %reduce.189)
  %reshape.1869 = f32[1]{0} reshape(%divide.387)
  %get-tuple-element.360 = f32[126,1]{1,0} get-tuple-element(%param.45), index=56
  %dynamic-slice.211 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.360, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.389 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.211)
  %reshape.1870 = f32[1]{0} reshape(%divide.389)
  %select.401 = f32[1]{0} select(%reshape.1868, %reshape.1869, %reshape.1870)
  %select.402 = f32[1]{0} select(%reshape.1867, %select.401, %reshape.1870)
  %divide.390 = f32[1]{0} divide(%constant.1868, %select.402)
  %convert.354 = bf16[1]{0} convert(%divide.390)
  %reshape.1871 = bf16[] reshape(%convert.354)
  %broadcast.1859 = bf16[1,32,53248]{2,1,0} broadcast(%reshape.1871), dimensions={}
  %divide.391 = bf16[1,32,53248]{2,1,0} divide(%convert.353, %broadcast.1859)
  %broadcast.1861 = bf16[1,32,53248]{2,1,0} broadcast(%constant.1875), dimensions={}
  %clamp.72 = bf16[1,32,53248]{2,1,0} clamp(%broadcast.1857, %divide.391, %broadcast.1861)
  %convert.355 = f8e4m3fn[1,32,53248]{2,1,0} convert(%clamp.72)
  %reshape.1872 = f8e4m3fn[32,53248]{1,0} reshape(%convert.355)
  %all-gather.11 = f8e4m3fn[16384,53248]{1,0} all-gather(%reshape.1872), channel_id=15, replica_groups=[1,512]<=[512], dimensions={0}, use_global_device_ids=true
  %dot.43 = bf16[1,8192,53248]{2,1,0} dot(%convert.351, %all-gather.11), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.299 = f32[1]{0} multiply(%divide.385, %divide.390)
  %convert.356 = bf16[1]{0} convert(%multiply.299)
  %reshape.1873 = bf16[] reshape(%convert.356)
  %broadcast.1862 = bf16[1,8192,53248]{2,1,0} broadcast(%reshape.1873), dimensions={}
  %multiply.300 = bf16[1,8192,53248]{2,1,0} multiply(%dot.43, %broadcast.1862)
  %constant.2125 = bf16[] constant(1)
  %broadcast.1863 = bf16[1,8192,53248]{2,1,0} broadcast(%constant.2125), dimensions={}
  %negate.29 = bf16[1,8192,53248]{2,1,0} negate(%multiply.300)
  %exponential.5 = bf16[1,8192,53248]{2,1,0} exponential(%negate.29)
  %add.164 = bf16[1,8192,53248]{2,1,0} add(%exponential.5, %broadcast.1863)
  %divide.392 = bf16[1,8192,53248]{2,1,0} divide(%broadcast.1863, %add.164)
  %multiply.301 = bf16[1,8192,53248]{2,1,0} multiply(%multiply.300, %divide.392)
  %broadcast.1864 = bf16[1,8192,16384]{2,1,0} broadcast(%constant.1855), dimensions={}
  %copy.67 = bf16[1,8192,16384]{2,1,0} copy(%copy.56)
  %get-tuple-element.361 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=69
  %dynamic-slice.212 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.361, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.190 = f32[] reduce(%dynamic-slice.212, %constant.1870), dimensions={0,1}, to_apply=%region_79.2679
  %is-finite.59 = pred[] is-finite(%reduce.190)
  %reshape.1874 = pred[1]{0} reshape(%is-finite.59)
  %compare.318 = pred[] compare(%reduce.190, %constant.1864), direction=GT
  %reshape.1875 = pred[1]{0} reshape(%compare.318)
  %constant.2131 = f32[] constant(57344)
  %divide.393 = f32[] divide(%constant.2131, %reduce.190)
  %reshape.1876 = f32[1]{0} reshape(%divide.393)
  %get-tuple-element.362 = f32[126,1]{1,0} get-tuple-element(%param.45), index=70
  %dynamic-slice.213 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.362, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.394 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.213)
  %reshape.1877 = f32[1]{0} reshape(%divide.394)
  %select.403 = f32[1]{0} select(%reshape.1875, %reshape.1876, %reshape.1877)
  %select.404 = f32[1]{0} select(%reshape.1874, %select.403, %reshape.1877)
  %divide.395 = f32[1]{0} divide(%constant.1868, %select.404)
  %convert.357 = bf16[1]{0} convert(%divide.395)
  %reshape.1878 = bf16[] reshape(%convert.357)
  %broadcast.1866 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1878), dimensions={}
  %divide.396 = bf16[1,8192,16384]{2,1,0} divide(%copy.67, %broadcast.1866)
  %constant.2134 = bf16[] constant(5.734e+04)
  %broadcast.1868 = bf16[1,8192,16384]{2,1,0} broadcast(%constant.2134), dimensions={}
  %clamp.73 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1864, %divide.396, %broadcast.1868)
  %convert.358 = f8e5m2[1,8192,16384]{2,1,0} convert(%clamp.73)
  %broadcast.1869 = bf16[1,53248,32]{2,1,0} broadcast(%constant.1856), dimensions={}
  %get-tuple-element.363 = f32[126,53248,32]{2,1,0} get-tuple-element(%param.45), index=97
  %dynamic-slice.214 = f32[1,53248,32]{2,1,0} dynamic-slice(%get-tuple-element.363, %subtract.9, %constant.1859, %constant.1859), dynamic_slice_sizes={1,53248,32}
  %convert.359 = bf16[1,53248,32]{2,1,0} convert(%dynamic-slice.214)
  %get-tuple-element.364 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=67
  %dynamic-slice.215 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.364, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.191 = f32[] reduce(%dynamic-slice.215, %constant.1870), dimensions={0,1}, to_apply=%region_76.2637
  %is-finite.60 = pred[] is-finite(%reduce.191)
  %reshape.1879 = pred[1]{0} reshape(%is-finite.60)
  %compare.320 = pred[] compare(%reduce.191, %constant.1864), direction=GT
  %reshape.1880 = pred[1]{0} reshape(%compare.320)
  %divide.398 = f32[] divide(%constant.1872, %reduce.191)
  %reshape.1881 = f32[1]{0} reshape(%divide.398)
  %get-tuple-element.365 = f32[126,1]{1,0} get-tuple-element(%param.45), index=68
  %dynamic-slice.216 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.365, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.399 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.216)
  %reshape.1882 = f32[1]{0} reshape(%divide.399)
  %select.405 = f32[1]{0} select(%reshape.1880, %reshape.1881, %reshape.1882)
  %select.406 = f32[1]{0} select(%reshape.1879, %select.405, %reshape.1882)
  %divide.400 = f32[1]{0} divide(%constant.1868, %select.406)
  %convert.360 = bf16[1]{0} convert(%divide.400)
  %reshape.1883 = bf16[] reshape(%convert.360)
  %broadcast.1870 = bf16[1,53248,32]{2,1,0} broadcast(%reshape.1883), dimensions={}
  %divide.401 = bf16[1,53248,32]{2,1,0} divide(%convert.359, %broadcast.1870)
  %broadcast.1871 = bf16[1,53248,32]{2,1,0} broadcast(%constant.1875), dimensions={}
  %clamp.74 = bf16[1,53248,32]{2,1,0} clamp(%broadcast.1869, %divide.401, %broadcast.1871)
  %convert.361 = f8e4m3fn[1,53248,32]{2,1,0} convert(%clamp.74)
  %reshape.1884 = f8e4m3fn[53248,32]{1,0} reshape(%convert.361)
  %all-gather.12 = f8e4m3fn[53248,16384]{1,0} all-gather(%reshape.1884), channel_id=16, replica_groups=[1,512]<=[512], dimensions={1}, use_global_device_ids=true
  %dot.44 = bf16[1,8192,53248]{2,1,0} dot(%convert.358, %all-gather.12), lhs_contracting_dims={2}, rhs_contracting_dims={1}, operand_precision={highest,highest}
  %multiply.302 = f32[1]{0} multiply(%divide.400, %divide.395)
  %convert.362 = bf16[1]{0} convert(%multiply.302)
  %reshape.1885 = bf16[] reshape(%convert.362)
  %broadcast.1872 = bf16[1,8192,53248]{2,1,0} broadcast(%reshape.1885), dimensions={}
  %multiply.303 = bf16[1,8192,53248]{2,1,0} multiply(%dot.44, %broadcast.1872)
  %copy.68 = bf16[1,8192,53248]{2,1,0} copy(%multiply.303)
  %multiply.304 = bf16[1,8192,53248]{2,1,0} multiply(%multiply.301, %copy.68)
  %get-tuple-element.366 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=63
  %dynamic-slice.217 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.366, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.192 = f32[] reduce(%dynamic-slice.217, %constant.1870), dimensions={0,1}, to_apply=%region_82.2756
  %is-finite.61 = pred[] is-finite(%reduce.192)
  %reshape.1886 = pred[1]{0} reshape(%is-finite.61)
  %compare.322 = pred[] compare(%reduce.192, %constant.1864), direction=GT
  %reshape.1887 = pred[1]{0} reshape(%compare.322)
  %divide.402 = f32[] divide(%constant.2131, %reduce.192)
  %reshape.1888 = f32[1]{0} reshape(%divide.402)
  %get-tuple-element.367 = f32[126,1]{1,0} get-tuple-element(%param.45), index=64
  %dynamic-slice.218 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.367, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.403 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.218)
  %reshape.1889 = f32[1]{0} reshape(%divide.403)
  %select.407 = f32[1]{0} select(%reshape.1887, %reshape.1888, %reshape.1889)
  %select.408 = f32[1]{0} select(%reshape.1886, %select.407, %reshape.1889)
  %divide.404 = f32[1]{0} divide(%constant.1868, %select.408)
  %convert.363 = bf16[1]{0} convert(%divide.404)
  %reshape.1890 = bf16[] reshape(%convert.363)
  %broadcast.1873 = bf16[1,8192,53248]{2,1,0} broadcast(%reshape.1890), dimensions={}
  %divide.405 = bf16[1,8192,53248]{2,1,0} divide(%multiply.304, %broadcast.1873)
  %broadcast.1874 = bf16[1,8192,53248]{2,1,0} broadcast(%constant.2134), dimensions={}
  %clamp.75 = bf16[1,8192,53248]{2,1,0} clamp(%broadcast.1745, %divide.405, %broadcast.1874)
  %convert.365 = f8e5m2[1,8192,53248]{2,1,0} convert(%clamp.75)
  %get-tuple-element.368 = f32[126,32,53248]{2,1,0} get-tuple-element(%param.45), index=96
  %dynamic-slice.219 = f32[1,32,53248]{2,1,0} dynamic-slice(%get-tuple-element.368, %subtract.9, %constant.1859, %constant.1859), dynamic_slice_sizes={1,32,53248}
  %convert.366 = bf16[1,32,53248]{2,1,0} convert(%dynamic-slice.219)
  %get-tuple-element.369 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=61
  %dynamic-slice.220 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.369, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.193 = f32[] reduce(%dynamic-slice.220, %constant.1870), dimensions={0,1}, to_apply=%region_70.2555
  %is-finite.62 = pred[] is-finite(%reduce.193)
  %reshape.1891 = pred[1]{0} reshape(%is-finite.62)
  %compare.323 = pred[] compare(%reduce.193, %constant.1864), direction=GT
  %reshape.1892 = pred[1]{0} reshape(%compare.323)
  %divide.406 = f32[] divide(%constant.1872, %reduce.193)
  %reshape.1893 = f32[1]{0} reshape(%divide.406)
  %get-tuple-element.370 = f32[126,1]{1,0} get-tuple-element(%param.45), index=62
  %dynamic-slice.221 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.370, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.407 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.221)
  %reshape.1894 = f32[1]{0} reshape(%divide.407)
  %select.409 = f32[1]{0} select(%reshape.1892, %reshape.1893, %reshape.1894)
  %select.410 = f32[1]{0} select(%reshape.1891, %select.409, %reshape.1894)
  %divide.408 = f32[1]{0} divide(%constant.1868, %select.410)
  %convert.367 = bf16[1]{0} convert(%divide.408)
  %reshape.1895 = bf16[] reshape(%convert.367)
  %broadcast.1876 = bf16[1,32,53248]{2,1,0} broadcast(%reshape.1895), dimensions={}
  %divide.409 = bf16[1,32,53248]{2,1,0} divide(%convert.366, %broadcast.1876)
  %clamp.76 = bf16[1,32,53248]{2,1,0} clamp(%broadcast.1857, %divide.409, %broadcast.1861)
  %convert.368 = f8e4m3fn[1,32,53248]{2,1,0} convert(%clamp.76)
  %reshape.1896 = f8e4m3fn[32,53248]{1,0} reshape(%convert.368)
  %all-gather.13 = f8e4m3fn[16384,53248]{1,0} all-gather(%reshape.1896), channel_id=17, replica_groups=[1,512]<=[512], dimensions={0}, use_global_device_ids=true
  %dot.45 = bf16[1,8192,16384]{2,1,0} dot(%convert.365, %all-gather.13), lhs_contracting_dims={2}, rhs_contracting_dims={1}, operand_precision={highest,highest}
  %multiply.305 = f32[1]{0} multiply(%divide.408, %divide.404)
  %convert.369 = bf16[1]{0} convert(%multiply.305)
  %reshape.1897 = bf16[] reshape(%convert.369)
  %broadcast.1878 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1897), dimensions={}
  %multiply.306 = bf16[1,8192,16384]{2,1,0} multiply(%dot.45, %broadcast.1878)
  %get-tuple-element.371 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=59
  %dynamic-slice.222 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.371, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.194 = f32[] reduce(%dynamic-slice.222, %constant.1870), dimensions={0,1}, to_apply=%region_67.2523
  %is-finite.63 = pred[] is-finite(%reduce.194)
  %reshape.1898 = pred[1]{0} reshape(%is-finite.63)
  %compare.324 = pred[] compare(%reduce.194, %constant.1864), direction=GT
  %reshape.1900 = pred[1]{0} reshape(%compare.324)
  %divide.410 = f32[] divide(%constant.1872, %reduce.194)
  %reshape.1901 = f32[1]{0} reshape(%divide.410)
  %get-tuple-element.372 = f32[126,1]{1,0} get-tuple-element(%param.45), index=60
  %dynamic-slice.223 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.372, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.411 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.223)
  %reshape.1902 = f32[1]{0} reshape(%divide.411)
  %select.411 = f32[1]{0} select(%reshape.1900, %reshape.1901, %reshape.1902)
  %select.412 = f32[1]{0} select(%reshape.1898, %select.411, %reshape.1902)
  %divide.412 = f32[1]{0} divide(%constant.1868, %select.412)
  %convert.370 = bf16[1]{0} convert(%divide.412)
  %reshape.1903 = bf16[] reshape(%convert.370)
  %broadcast.1881 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1903), dimensions={}
  %divide.413 = bf16[1,8192,16384]{2,1,0} divide(%copy.66, %broadcast.1881)
  %clamp.77 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1747, %divide.413, %broadcast.1761)
  %convert.371 = f8e4m3fn[1,8192,16384]{2,1,0} convert(%clamp.77)
  %dot.46 = bf16[1,8192,53248]{2,1,0} dot(%convert.371, %all-gather.13), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.307 = f32[1]{0} multiply(%divide.412, %divide.408)
  %convert.373 = bf16[1]{0} convert(%multiply.307)
  %reshape.1904 = bf16[] reshape(%convert.373)
  %broadcast.1883 = bf16[1,8192,53248]{2,1,0} broadcast(%reshape.1904), dimensions={}
  %multiply.308 = bf16[1,8192,53248]{2,1,0} multiply(%dot.46, %broadcast.1883)
  %multiply.309 = bf16[1,8192,53248]{2,1,0} multiply(%copy.68, %multiply.308)
  %multiply.310 = bf16[1,8192,53248]{2,1,0} multiply(%multiply.309, %divide.392)
  %multiply.312 = bf16[1,8192,53248]{2,1,0} multiply(%multiply.300, %multiply.309)
  %subtract.14 = bf16[1,8192,53248]{2,1,0} subtract(%broadcast.1863, %divide.392)
  %multiply.313 = bf16[1,8192,53248]{2,1,0} multiply(%divide.392, %subtract.14)
  %multiply.314 = bf16[1,8192,53248]{2,1,0} multiply(%multiply.312, %multiply.313)
  %add.166 = bf16[1,8192,53248]{2,1,0} add(%multiply.310, %multiply.314)
  %get-tuple-element.373 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=57
  %dynamic-slice.224 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.373, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.195 = f32[] reduce(%dynamic-slice.224, %constant.1870), dimensions={0,1}, to_apply=%region_85.2822
  %is-finite.64 = pred[] is-finite(%reduce.195)
  %reshape.1905 = pred[1]{0} reshape(%is-finite.64)
  %compare.325 = pred[] compare(%reduce.195, %constant.1864), direction=GT
  %reshape.1906 = pred[1]{0} reshape(%compare.325)
  %divide.414 = f32[] divide(%constant.2131, %reduce.195)
  %reshape.1907 = f32[1]{0} reshape(%divide.414)
  %get-tuple-element.374 = f32[126,1]{1,0} get-tuple-element(%param.45), index=58
  %dynamic-slice.225 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.374, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.415 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.225)
  %reshape.1908 = f32[1]{0} reshape(%divide.415)
  %select.413 = f32[1]{0} select(%reshape.1906, %reshape.1907, %reshape.1908)
  %select.414 = f32[1]{0} select(%reshape.1905, %select.413, %reshape.1908)
  %divide.416 = f32[1]{0} divide(%constant.1868, %select.414)
  %convert.375 = bf16[1]{0} convert(%divide.416)
  %reshape.1909 = bf16[] reshape(%convert.375)
  %broadcast.1884 = bf16[1,8192,53248]{2,1,0} broadcast(%reshape.1909), dimensions={}
  %divide.417 = bf16[1,8192,53248]{2,1,0} divide(%add.166, %broadcast.1884)
  %clamp.78 = bf16[1,8192,53248]{2,1,0} clamp(%broadcast.1745, %divide.417, %broadcast.1874)
  %convert.376 = f8e5m2[1,8192,53248]{2,1,0} convert(%clamp.78)
  %dot.47 = bf16[1,8192,16384]{2,1,0} dot(%convert.376, %all-gather.11), lhs_contracting_dims={2}, rhs_contracting_dims={1}, operand_precision={highest,highest}
  %multiply.315 = f32[1]{0} multiply(%divide.390, %divide.416)
  %convert.377 = bf16[1]{0} convert(%multiply.315)
  %reshape.1910 = bf16[] reshape(%convert.377)
  %broadcast.1886 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1910), dimensions={}
  %multiply.316 = bf16[1,8192,16384]{2,1,0} multiply(%dot.47, %broadcast.1886)
  %add.167 = bf16[1,8192,16384]{2,1,0} add(%multiply.306, %multiply.316)
  %copy.69 = bf16[1,8192,16384]{2,1,0} copy(%add.167)
  %multiply.317 = bf16[1,8192,16384]{2,1,0} multiply(%copy.69, %broadcast.1854)
  %convert.378 = f32[1,8192,16384]{2,1,0} convert(%multiply.317)
  %multiply.318 = f32[1,8192,16384]{2,1,0} multiply(%convert.378, %broadcast.1853)
  %multiply.319 = f32[1,8192,16384]{2,1,0} multiply(%convert.347, %convert.378)
  %reduce.196 = f32[1,8192]{1,0} reduce(%multiply.319, %constant.1864), dimensions={2}, to_apply=%region_90.2891
  %reshape.1913 = f32[1,8192,1]{2,1,0} reshape(%reduce.196)
  %divide.418 = f32[1,8192,1]{2,1,0} divide(%rsqrt.9, %reshape.1858)
  %constant.2186 = f32[] constant(-0.5)
  %broadcast.1889 = f32[1,8192,1]{2,1,0} broadcast(%constant.2186), dimensions={}
  %multiply.320 = f32[1,8192,1]{2,1,0} multiply(%divide.418, %broadcast.1889)
  %multiply.321 = f32[1,8192,1]{2,1,0} multiply(%reshape.1913, %multiply.320)
  %constant.2187 = f32[] constant(0.000122070312)
  %broadcast.1890 = f32[1,8192,1]{2,1,0} broadcast(%constant.2187), dimensions={}
  %multiply.322 = f32[1,8192,1]{2,1,0} multiply(%multiply.321, %broadcast.1890)
  %reshape.1914 = f32[1,8192]{1,0} reshape(%multiply.322)
  %broadcast.1891 = f32[1,8192,16384]{2,1,0} broadcast(%reshape.1914), dimensions={0,1}
  %multiply.323 = f32[1,8192,16384]{2,1,0} multiply(%convert.347, %broadcast.1891)
  %add.168 = f32[1,8192,16384]{2,1,0} add(%multiply.318, %multiply.323)
  %convert.379 = bf16[1,8192,16384]{2,1,0} convert(%add.168)
  %add.169 = bf16[1,8192,16384]{2,1,0} add(%copy.56, %convert.379)
  %broadcast.1892 = bf16[1,8192,8,128]{3,2,1,0} broadcast(%constant.1855), dimensions={}
  %get-tuple-element.375 = f32[1,128,8192,1]{3,2,1,0} get-tuple-element(%custom-call.40), index=1
  %get-tuple-element.376 = u32[2,4]{1,0} get-tuple-element(%custom-call.40), index=2
  %copy.70 = bf16[1,8192,16384]{2,1,0} copy(%add.169)
  %get-tuple-element.377 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=81
  %dynamic-slice.226 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.377, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.197 = f32[] reduce(%dynamic-slice.226, %constant.1870), dimensions={0,1}, to_apply=%region_92.2914
  %is-finite.65 = pred[] is-finite(%reduce.197)
  %reshape.1915 = pred[1]{0} reshape(%is-finite.65)
  %compare.326 = pred[] compare(%reduce.197, %constant.1864), direction=GT
  %reshape.1917 = pred[1]{0} reshape(%compare.326)
  %divide.419 = f32[] divide(%constant.2131, %reduce.197)
  %reshape.1918 = f32[1]{0} reshape(%divide.419)
  %get-tuple-element.378 = f32[126,1]{1,0} get-tuple-element(%param.45), index=82
  %dynamic-slice.227 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.378, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.420 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.227)
  %reshape.1919 = f32[1]{0} reshape(%divide.420)
  %select.415 = f32[1]{0} select(%reshape.1917, %reshape.1918, %reshape.1919)
  %select.416 = f32[1]{0} select(%reshape.1915, %select.415, %reshape.1919)
  %divide.421 = f32[1]{0} divide(%constant.1868, %select.416)
  %convert.380 = bf16[1]{0} convert(%divide.421)
  %reshape.1920 = bf16[] reshape(%convert.380)
  %broadcast.1894 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1920), dimensions={}
  %divide.422 = bf16[1,8192,16384]{2,1,0} divide(%copy.70, %broadcast.1894)
  %clamp.79 = bf16[1,8192,16384]{2,1,0} clamp(%broadcast.1864, %divide.422, %broadcast.1868)
  %convert.381 = f8e5m2[1,8192,16384]{2,1,0} convert(%clamp.79)
  %dot.48 = bf16[1,8192,128,128]{3,2,1,0} dot(%convert.381, %all-gather.10), lhs_contracting_dims={2}, rhs_contracting_dims={2}, operand_precision={highest,highest}
  %multiply.324 = f32[1]{0} multiply(%divide.379, %divide.421)
  %convert.382 = bf16[1]{0} convert(%multiply.324)
  %reshape.1921 = bf16[] reshape(%convert.382)
  %broadcast.1896 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%reshape.1921), dimensions={}
  %multiply.325 = bf16[1,8192,128,128]{3,2,1,0} multiply(%dot.48, %broadcast.1896)
  %copy.71 = bf16[1,8192,128,128]{3,2,1,0} copy(%multiply.325)
  %custom-call.237 = (bf16[1,8192,128,128]{3,2,1,0}, bf16[1,8192,8,128]{3,2,1,0}, bf16[1,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[1077936176]{0}) custom-call(%copy.60, %copy.62, %copy.63, %constant.2034, %get-tuple-element.375, /*index=5*/%get-tuple-element.376, %get-tuple-element.349, %copy.71, %scatter.25, %scatter.30, /*index=10*/%constant.2034, %constant.2034), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,8192,128,128]{3,2,1,0}, bf16[1,8192,8,128]{3,2,1,0}, bf16[1,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,128,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,8192,128,128]{3,2,1,0}, bf16[1,8192,128,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 128 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.385 = bf16[1,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.237), index=2
  %copy.72 = bf16[1,8192,8,128]{3,2,1,0} copy(%get-tuple-element.385)
  %get-tuple-element.386 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=93
  %dynamic-slice.228 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.386, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.198 = f32[] reduce(%dynamic-slice.228, %constant.1870), dimensions={0,1}, to_apply=%region_95.3033
  %is-finite.66 = pred[] is-finite(%reduce.198)
  %reshape.1953 = pred[1]{0} reshape(%is-finite.66)
  %compare.355 = pred[] compare(%reduce.198, %constant.1864), direction=GT
  %reshape.1954 = pred[1]{0} reshape(%compare.355)
  %divide.425 = f32[] divide(%constant.2131, %reduce.198)
  %reshape.1955 = f32[1]{0} reshape(%divide.425)
  %get-tuple-element.387 = f32[126,1]{1,0} get-tuple-element(%param.45), index=94
  %dynamic-slice.229 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.387, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.426 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.229)
  %reshape.1956 = f32[1]{0} reshape(%divide.426)
  %select.438 = f32[1]{0} select(%reshape.1954, %reshape.1955, %reshape.1956)
  %select.439 = f32[1]{0} select(%reshape.1953, %select.438, %reshape.1956)
  %divide.427 = f32[1]{0} divide(%constant.1868, %select.439)
  %convert.385 = bf16[1]{0} convert(%divide.427)
  %reshape.1957 = bf16[] reshape(%convert.385)
  %broadcast.1904 = bf16[1,8192,8,128]{3,2,1,0} broadcast(%reshape.1957), dimensions={}
  %divide.428 = bf16[1,8192,8,128]{3,2,1,0} divide(%copy.72, %broadcast.1904)
  %broadcast.1906 = bf16[1,8192,8,128]{3,2,1,0} broadcast(%constant.2134), dimensions={}
  %clamp.80 = bf16[1,8192,8,128]{3,2,1,0} clamp(%broadcast.1892, %divide.428, %broadcast.1906)
  %convert.386 = f8e5m2[1,8192,8,128]{3,2,1,0} convert(%clamp.80)
  %dot.49 = bf16[1,8192,16384]{2,1,0} dot(%convert.386, %all-gather.9), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}, operand_precision={highest,highest}
  %multiply.326 = f32[1]{0} multiply(%divide.364, %divide.427)
  %convert.387 = bf16[1]{0} convert(%multiply.326)
  %reshape.1958 = bf16[] reshape(%convert.387)
  %broadcast.1908 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1958), dimensions={}
  %multiply.328 = bf16[1,8192,16384]{2,1,0} multiply(%dot.49, %broadcast.1908)
  %get-tuple-element.388 = bf16[1,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.237), index=1
  %copy.73 = bf16[1,8192,8,128]{3,2,1,0} copy(%get-tuple-element.388)
  %convert.388 = f32[1,8192,8,128]{3,2,1,0} convert(%copy.73)
  %multiply.330 = f32[1,8192,8,128]{3,2,1,0} multiply(%convert.388, %broadcast.1815)
  %convert.389 = bf16[1,8192,8,128]{3,2,1,0} convert(%multiply.330)
  %compare.356 = pred[128]{0} compare(%select.358, %broadcast.1778), direction=EQ
  %broadcast.1912 = pred[1,8192,8,128]{3,2,1,0} broadcast(%compare.356), dimensions={3}
  %multiply.331 = f32[1,8192,8,128]{3,2,1,0} multiply(%convert.388, %broadcast.1823)
  %multiply.332 = f32[1,8192,8,128]{3,2,1,0} multiply(%multiply.331, %broadcast.1821)
  %convert.391 = bf16[1,8192,8,128]{3,2,1,0} convert(%multiply.332)
  %constant.2234 = bf16[] constant(0)
  %broadcast.1916 = bf16[1,8192,8,128]{3,2,1,0} broadcast(%constant.2234), dimensions={}
  %select.440 = bf16[1,8192,8,128]{3,2,1,0} select(%broadcast.1912, %convert.391, %broadcast.1916)
  %slice.416 = bf16[1,8192,8,127]{3,2,1,0} slice(%select.440), slice={[0:1], [0:8192], [0:8], [1:128]}
  %pad.50 = bf16[1,8192,8,128]{3,2,1,0} pad(%slice.416, %constant.2234), padding=0_0x0_0x0_0x0_1
  %add.178 = bf16[1,8192,8,128]{3,2,1,0} add(%convert.389, %pad.50)
  %slice.417 = bf16[1,8192,8,1]{3,2,1,0} slice(%select.440), slice={[0:1], [0:8192], [0:8], [0:1]}
  %pad.51 = bf16[1,8192,8,128]{3,2,1,0} pad(%slice.417, %constant.2234), padding=0_0x0_0x0_0x127_0
  %add.179 = bf16[1,8192,8,128]{3,2,1,0} add(%add.178, %pad.51)
  %compare.357 = pred[128]{0} compare(%select.358, %broadcast.1788), direction=EQ
  %broadcast.1919 = pred[1,8192,8,128]{3,2,1,0} broadcast(%compare.357), dimensions={3}
  %select.441 = bf16[1,8192,8,128]{3,2,1,0} select(%broadcast.1919, %convert.391, %broadcast.1916)
  %slice.418 = bf16[1,8192,8,1]{3,2,1,0} slice(%select.441), slice={[0:1], [0:8192], [0:8], [127:128]}
  %pad.52 = bf16[1,8192,8,128]{3,2,1,0} pad(%slice.418, %constant.2234), padding=0_0x0_0x0_0x0_127
  %add.180 = bf16[1,8192,8,128]{3,2,1,0} add(%add.179, %pad.52)
  %slice.419 = bf16[1,8192,8,127]{3,2,1,0} slice(%select.441), slice={[0:1], [0:8192], [0:8], [0:127]}
  %pad.53 = bf16[1,8192,8,128]{3,2,1,0} pad(%slice.419, %constant.2234), padding=0_0x0_0x0_0x1_0
  %add.181 = bf16[1,8192,8,128]{3,2,1,0} add(%add.180, %pad.53)
  %get-tuple-element.389 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=75
  %dynamic-slice.238 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.389, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.199 = f32[] reduce(%dynamic-slice.238, %constant.1870), dimensions={0,1}, to_apply=%region_98.3089
  %is-finite.67 = pred[] is-finite(%reduce.199)
  %reshape.1969 = pred[1]{0} reshape(%is-finite.67)
  %compare.358 = pred[] compare(%reduce.199, %constant.1864), direction=GT
  %reshape.1970 = pred[1]{0} reshape(%compare.358)
  %divide.429 = f32[] divide(%constant.2131, %reduce.199)
  %reshape.1971 = f32[1]{0} reshape(%divide.429)
  %get-tuple-element.390 = f32[126,1]{1,0} get-tuple-element(%param.45), index=76
  %dynamic-slice.239 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.390, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.430 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.239)
  %reshape.1972 = f32[1]{0} reshape(%divide.430)
  %select.442 = f32[1]{0} select(%reshape.1970, %reshape.1971, %reshape.1972)
  %select.443 = f32[1]{0} select(%reshape.1969, %select.442, %reshape.1972)
  %divide.431 = f32[1]{0} divide(%constant.1868, %select.443)
  %convert.392 = bf16[1]{0} convert(%divide.431)
  %reshape.1973 = bf16[] reshape(%convert.392)
  %broadcast.1920 = bf16[1,8192,8,128]{3,2,1,0} broadcast(%reshape.1973), dimensions={}
  %divide.432 = bf16[1,8192,8,128]{3,2,1,0} divide(%add.181, %broadcast.1920)
  %clamp.81 = bf16[1,8192,8,128]{3,2,1,0} clamp(%broadcast.1892, %divide.432, %broadcast.1906)
  %convert.393 = f8e5m2[1,8192,8,128]{3,2,1,0} convert(%clamp.81)
  %dot.50 = bf16[1,8192,16384]{2,1,0} dot(%convert.393, %all-gather.8), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}, operand_precision={highest,highest}
  %multiply.341 = f32[1]{0} multiply(%divide.354, %divide.431)
  %convert.394 = bf16[1]{0} convert(%multiply.341)
  %reshape.1974 = bf16[] reshape(%convert.394)
  %broadcast.1922 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1974), dimensions={}
  %multiply.342 = bf16[1,8192,16384]{2,1,0} multiply(%dot.50, %broadcast.1922)
  %add.182 = bf16[1,8192,16384]{2,1,0} add(%multiply.328, %multiply.342)
  %copy.74 = bf16[1,8192,16384]{2,1,0} copy(%add.182)
  %broadcast.1923 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%constant.1855), dimensions={}
  %get-tuple-element.391 = bf16[1,8192,128,128]{3,2,1,0} get-tuple-element(%custom-call.237), index=0
  %copy.75 = bf16[1,8192,128,128]{3,2,1,0} copy(%get-tuple-element.391)
  %convert.395 = f32[1,8192,128,128]{3,2,1,0} convert(%copy.75)
  %multiply.343 = f32[1,8192,128,128]{3,2,1,0} multiply(%convert.395, %broadcast.1786)
  %convert.396 = bf16[1,8192,128,128]{3,2,1,0} convert(%multiply.343)
  %broadcast.1926 = pred[1,8192,128,128]{3,2,1,0} broadcast(%compare.356), dimensions={3}
  %multiply.344 = f32[1,8192,128,128]{3,2,1,0} multiply(%convert.395, %broadcast.1794)
  %multiply.345 = f32[1,8192,128,128]{3,2,1,0} multiply(%multiply.344, %broadcast.1792)
  %convert.397 = bf16[1,8192,128,128]{3,2,1,0} convert(%multiply.345)
  %broadcast.1929 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%constant.2234), dimensions={}
  %select.444 = bf16[1,8192,128,128]{3,2,1,0} select(%broadcast.1926, %convert.397, %broadcast.1929)
  %slice.420 = bf16[1,8192,128,127]{3,2,1,0} slice(%select.444), slice={[0:1], [0:8192], [0:128], [1:128]}
  %pad.54 = bf16[1,8192,128,128]{3,2,1,0} pad(%slice.420, %constant.2234), padding=0_0x0_0x0_0x0_1
  %add.183 = bf16[1,8192,128,128]{3,2,1,0} add(%convert.396, %pad.54)
  %slice.421 = bf16[1,8192,128,1]{3,2,1,0} slice(%select.444), slice={[0:1], [0:8192], [0:128], [0:1]}
  %pad.55 = bf16[1,8192,128,128]{3,2,1,0} pad(%slice.421, %constant.2234), padding=0_0x0_0x0_0x127_0
  %add.184 = bf16[1,8192,128,128]{3,2,1,0} add(%add.183, %pad.55)
  %broadcast.1931 = pred[1,8192,128,128]{3,2,1,0} broadcast(%compare.357), dimensions={3}
  %select.445 = bf16[1,8192,128,128]{3,2,1,0} select(%broadcast.1931, %convert.397, %broadcast.1929)
  %slice.422 = bf16[1,8192,128,1]{3,2,1,0} slice(%select.445), slice={[0:1], [0:8192], [0:128], [127:128]}
  %pad.56 = bf16[1,8192,128,128]{3,2,1,0} pad(%slice.422, %constant.2234), padding=0_0x0_0x0_0x0_127
  %add.185 = bf16[1,8192,128,128]{3,2,1,0} add(%add.184, %pad.56)
  %slice.423 = bf16[1,8192,128,127]{3,2,1,0} slice(%select.445), slice={[0:1], [0:8192], [0:128], [0:127]}
  %pad.57 = bf16[1,8192,128,128]{3,2,1,0} pad(%slice.423, %constant.2234), padding=0_0x0_0x0_0x1_0
  %add.186 = bf16[1,8192,128,128]{3,2,1,0} add(%add.185, %pad.57)
  %get-tuple-element.392 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=87
  %dynamic-slice.248 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.392, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.200 = f32[] reduce(%dynamic-slice.248, %constant.1870), dimensions={0,1}, to_apply=%region_101.3138
  %is-finite.68 = pred[] is-finite(%reduce.200)
  %reshape.1986 = pred[1]{0} reshape(%is-finite.68)
  %compare.361 = pred[] compare(%reduce.200, %constant.1864), direction=GT
  %reshape.1987 = pred[1]{0} reshape(%compare.361)
  %divide.433 = f32[] divide(%constant.2131, %reduce.200)
  %reshape.1988 = f32[1]{0} reshape(%divide.433)
  %get-tuple-element.393 = f32[126,1]{1,0} get-tuple-element(%param.45), index=88
  %dynamic-slice.249 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.393, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.434 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.249)
  %reshape.1989 = f32[1]{0} reshape(%divide.434)
  %select.446 = f32[1]{0} select(%reshape.1987, %reshape.1988, %reshape.1989)
  %select.447 = f32[1]{0} select(%reshape.1986, %select.446, %reshape.1989)
  %divide.435 = f32[1]{0} divide(%constant.1868, %select.447)
  %convert.398 = bf16[1]{0} convert(%divide.435)
  %reshape.1990 = bf16[] reshape(%convert.398)
  %broadcast.1932 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%reshape.1990), dimensions={}
  %divide.436 = bf16[1,8192,128,128]{3,2,1,0} divide(%add.186, %broadcast.1932)
  %broadcast.1933 = bf16[1,8192,128,128]{3,2,1,0} broadcast(%constant.2134), dimensions={}
  %clamp.82 = bf16[1,8192,128,128]{3,2,1,0} clamp(%broadcast.1923, %divide.436, %broadcast.1933)
  %convert.399 = f8e5m2[1,8192,128,128]{3,2,1,0} convert(%clamp.82)
  %dot.51 = bf16[1,8192,16384]{2,1,0} dot(%convert.399, %all-gather.7), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}, operand_precision={highest,highest}
  %multiply.354 = f32[1]{0} multiply(%divide.343, %divide.435)
  %convert.400 = bf16[1]{0} convert(%multiply.354)
  %reshape.1991 = bf16[] reshape(%convert.400)
  %broadcast.1934 = bf16[1,8192,16384]{2,1,0} broadcast(%reshape.1991), dimensions={}
  %multiply.355 = bf16[1,8192,16384]{2,1,0} multiply(%dot.51, %broadcast.1934)
  %copy.76 = bf16[1,8192,16384]{2,1,0} copy(%multiply.355)
  %add.187 = bf16[1,8192,16384]{2,1,0} add(%copy.74, %copy.76)
  %copy.77 = bf16[1,8192,16384]{2,1,0} copy(%add.187)
  %multiply.356 = bf16[1,8192,16384]{2,1,0} multiply(%copy.77, %broadcast.1759)
  %convert.401 = f32[1,8192,16384]{2,1,0} convert(%multiply.356)
  %multiply.357 = f32[1,8192,16384]{2,1,0} multiply(%convert.401, %broadcast.1757)
  %multiply.358 = f32[1,8192,16384]{2,1,0} multiply(%convert.296, %convert.401)
  %reduce.201 = f32[1,8192]{1,0} reduce(%multiply.358, %constant.1864), dimensions={2}, to_apply=%region_106.3217
  %reshape.1994 = f32[1,8192,1]{2,1,0} reshape(%reduce.201)
  %divide.437 = f32[1,8192,1]{2,1,0} divide(%rsqrt.8, %reshape.1751)
  %multiply.359 = f32[1,8192,1]{2,1,0} multiply(%divide.437, %broadcast.1889)
  %multiply.360 = f32[1,8192,1]{2,1,0} multiply(%reshape.1994, %multiply.359)
  %multiply.361 = f32[1,8192,1]{2,1,0} multiply(%multiply.360, %broadcast.1890)
  %reshape.1995 = f32[1,8192]{1,0} reshape(%multiply.361)
  %broadcast.1938 = f32[1,8192,16384]{2,1,0} broadcast(%reshape.1995), dimensions={0,1}
  %multiply.362 = f32[1,8192,16384]{2,1,0} multiply(%convert.296, %broadcast.1938)
  %add.189 = f32[1,8192,16384]{2,1,0} add(%multiply.357, %multiply.362)
  %convert.402 = bf16[1,8192,16384]{2,1,0} convert(%add.189)
  %add.190 = bf16[1,8192,16384]{2,1,0} add(%add.169, %convert.402)
  %copy.78 = bf16[1,8192,16384]{2,1,0} copy(%add.190)
  %get-tuple-element.394 = f32[126,32,53248]{2,1,0} get-tuple-element(%param.45), index=2
  %dot.52 = bf16[16384,53248]{1,0} dot(%convert.351, %convert.376), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce = bf16[16384,53248]{1,0} all-reduce(%dot.52), channel_id=18, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%add.clone
  %constant.2404 = s32[512]{0} constant({0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280, 1312, 1344, 1376, 1408, 1440, 1472, 1504, 1536, 1568, 1600, 1632, 1664, 1696, 1728, 1760, 1792, 1824, 1856, 1888, 1920, 1952, 1984, 2016, 2048, 2080, 2112, 2144, 2176, 2208, 2240, 2272, 2304, 2336, 2368, 2400, 2432, 2464, 2496, 2528, 2560, 2592, 2624, 2656, 2688, 2720, 2752, 2784, 2816, 2848, 2880, 2912, 2944, 2976, 3008, 3040, 3072, 3104, 3136, 3168, 3200, 3232, 3264, 3296, 3328, 3360, 3392, 3424, 3456, 3488, 3520, 3552, 3584, 3616, 3648, 3680, 3712, 3744, 3776, 3808, 3840, 3872, 3904, 3936, 3968, 4000, 4032, 4064, 4096, 4128, 4160, 4192, 4224, 4256, 4288, 4320, 4352, 4384, 4416, 4448, 4480, 4512, 4544, 4576, 4608, 4640, 4672, 4704, 4736, 4768, 4800, 4832, 4864, 4896, 4928, 4960, 4992, 5024, 5056, 5088, 5120, 5152, 5184, 5216, 5248, 5280, 5312, 5344, 5376, 5408, 5440, 5472, 5504, 5536, 5568, 5600, 5632, 5664, 5696, 5728, 5760, 5792, 5824, 5856, 5888, 5920, 5952, 5984, 6016, 6048, 6080, 6112, 6144, 6176, 6208, 6240, 6272, 6304, 6336, 6368, 6400, 6432, 6464, 6496, 6528, 6560, 6592, 6624, 6656, 6688, 6720, 6752, 6784, 6816, 6848, 6880, 6912, 6944, 6976, 7008, 7040, 7072, 7104, 7136, 7168, 7200, 7232, 7264, 7296, 7328, 7360, 7392, 7424, 7456, 7488, 7520, 7552, 7584, 7616, 7648, 7680, 7712, 7744, 7776, 7808, 7840, 7872, 7904, 7936, 7968, 8000, 8032, 8064, 8096, 8128, 8160, 8192, 8224, 8256, 8288, 8320, 8352, 8384, 8416, 8448, 8480, 8512, 8544, 8576, 8608, 8640, 8672, 8704, 8736, 8768, 8800, 8832, 8864, 8896, 8928, 8960, 8992, 9024, 9056, 9088, 9120, 9152, 9184, 9216, 9248, 9280, 9312, 9344, 9376, 9408, 9440, 9472, 9504, 9536, 9568, 9600, 9632, 9664, 9696, 9728, 9760, 9792, 9824, 9856, 9888, 9920, 9952, 9984, 10016, 10048, 10080, 10112, 10144, 10176, 10208, 10240, 10272, 10304, 10336, 10368, 10400, 10432, 10464, 10496, 10528, 10560, 10592, 10624, 10656, 10688, 10720, 10752, 10784, 10816, 10848, 10880, 10912, 10944, 10976, 11008, 11040, 11072, 11104, 11136, 11168, 11200, 11232, 11264, 11296, 11328, 11360, 11392, 11424, 11456, 11488, 11520, 11552, 11584, 11616, 11648, 11680, 11712, 11744, 11776, 11808, 11840, 11872, 11904, 11936, 11968, 12000, 12032, 12064, 12096, 12128, 12160, 12192, 12224, 12256, 12288, 12320, 12352, 12384, 12416, 12448, 12480, 12512, 12544, 12576, 12608, 12640, 12672, 12704, 12736, 12768, 12800, 12832, 12864, 12896, 12928, 12960, 12992, 13024, 13056, 13088, 13120, 13152, 13184, 13216, 13248, 13280, 13312, 13344, 13376, 13408, 13440, 13472, 13504, 13536, 13568, 13600, 13632, 13664, 13696, 13728, 13760, 13792, 13824, 13856, 13888, 13920, 13952, 13984, 14016, 14048, 14080, 14112, 14144, 14176, 14208, 14240, 14272, 14304, 14336, 14368, 14400, 14432, 14464, 14496, 14528, 14560, 14592, 14624, 14656, 14688, 14720, 14752, 14784, 14816, 14848, 14880, 14912, 14944, 14976, 15008, 15040, 15072, 15104, 15136, 15168, 15200, 15232, 15264, 15296, 15328, 15360, 15392, 15424, 15456, 15488, 15520, 15552, 15584, 15616, 15648, 15680, 15712, 15744, 15776, 15808, 15840, 15872, 15904, 15936, 15968, 16000, 16032, 16064, 16096, 16128, 16160, 16192, 16224, 16256, 16288, 16320, 16352})
  %dynamic-slice.250 = s32[1]{0} dynamic-slice(%constant.2404, %partition-id.3), dynamic_slice_sizes={1}
  %reshape.1997 = s32[] reshape(%dynamic-slice.250)
  %dynamic-slice.251 = bf16[32,53248]{1,0} dynamic-slice(%all-reduce, %reshape.1997, %constant.1859), dynamic_slice_sizes={32,53248}
  %multiply.364 = f32[1]{0} multiply(%divide.385, %divide.416)
  %convert.403 = bf16[1]{0} convert(%multiply.364)
  %reshape.1998 = bf16[] reshape(%convert.403)
  %broadcast.1939 = bf16[32,53248]{1,0} broadcast(%reshape.1998), dimensions={}
  %multiply.365 = bf16[32,53248]{0,1} multiply(%dynamic-slice.251, %broadcast.1939)
  %convert.405 = f32[32,53248]{0,1} convert(%multiply.365)
  %reshape.1999 = f32[1,32,53248]{2,1,0} reshape(%convert.405)
  %dynamic-update-slice.64 = f32[126,32,53248]{2,1,0} dynamic-update-slice(%get-tuple-element.394, %reshape.1999, %subtract.9, %constant.1859, %constant.1859)
  %get-tuple-element.395 = f32[126,32,53248]{2,1,0} get-tuple-element(%param.45), index=3
  %dot.53 = bf16[16384,53248]{1,0} dot(%convert.371, %convert.365), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.1 = bf16[16384,53248]{1,0} all-reduce(%dot.53), channel_id=19, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%add.1.clone
  %dynamic-slice.253 = bf16[32,53248]{1,0} dynamic-slice(%all-reduce.1, %reshape.1997, %constant.1859), dynamic_slice_sizes={32,53248}
  %multiply.366 = f32[1]{0} multiply(%divide.412, %divide.404)
  %convert.406 = bf16[1]{0} convert(%multiply.366)
  %reshape.2001 = bf16[] reshape(%convert.406)
  %broadcast.1940 = bf16[32,53248]{1,0} broadcast(%reshape.2001), dimensions={}
  %multiply.367 = bf16[32,53248]{0,1} multiply(%dynamic-slice.253, %broadcast.1940)
  %convert.407 = f32[32,53248]{0,1} convert(%multiply.367)
  %reshape.2002 = f32[1,32,53248]{2,1,0} reshape(%convert.407)
  %dynamic-update-slice.65 = f32[126,32,53248]{2,1,0} dynamic-update-slice(%get-tuple-element.395, %reshape.2002, %subtract.9, %constant.1859, %constant.1859)
  %get-tuple-element.396 = f32[126,53248,32]{2,1,0} get-tuple-element(%param.45), index=4
  %broadcast.1941 = bf16[1,8192,53248]{2,1,0} broadcast(%constant.1856), dimensions={}
  %multiply.368 = bf16[1,8192,53248]{2,1,0} multiply(%multiply.301, %multiply.308)
  %copy.79 = bf16[1,8192,53248]{2,1,0} copy(%multiply.368)
  %get-tuple-element.397 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=65
  %dynamic-slice.254 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.397, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1024}
  %reduce.202 = f32[] reduce(%dynamic-slice.254, %constant.1870), dimensions={0,1}, to_apply=%region_73.2597
  %is-finite.69 = pred[] is-finite(%reduce.202)
  %reshape.2003 = pred[1]{0} reshape(%is-finite.69)
  %compare.362 = pred[] compare(%reduce.202, %constant.1864), direction=GT
  %reshape.2004 = pred[1]{0} reshape(%compare.362)
  %divide.438 = f32[] divide(%constant.1872, %reduce.202)
  %reshape.2005 = f32[1]{0} reshape(%divide.438)
  %get-tuple-element.398 = f32[126,1]{1,0} get-tuple-element(%param.45), index=66
  %dynamic-slice.255 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.398, %subtract.9, %constant.1859), dynamic_slice_sizes={1,1}
  %divide.439 = f32[1,1]{1,0} divide(%constant.1873, %dynamic-slice.255)
  %reshape.2006 = f32[1]{0} reshape(%divide.439)
  %select.448 = f32[1]{0} select(%reshape.2004, %reshape.2005, %reshape.2006)
  %select.449 = f32[1]{0} select(%reshape.2003, %select.448, %reshape.2006)
  %divide.440 = f32[1]{0} divide(%constant.1868, %select.449)
  %convert.408 = bf16[1]{0} convert(%divide.440)
  %reshape.2007 = bf16[] reshape(%convert.408)
  %broadcast.1942 = bf16[1,8192,53248]{2,1,0} broadcast(%reshape.2007), dimensions={}
  %divide.441 = bf16[1,8192,53248]{2,1,0} divide(%copy.79, %broadcast.1942)
  %broadcast.1943 = bf16[1,8192,53248]{2,1,0} broadcast(%constant.1875), dimensions={}
  %clamp.83 = bf16[1,8192,53248]{2,1,0} clamp(%broadcast.1941, %divide.441, %broadcast.1943)
  %convert.409 = f8e4m3fn[1,8192,53248]{2,1,0} convert(%clamp.83)
  %dot.54 = bf16[53248,16384]{1,0} dot(%convert.409, %convert.358), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.2 = bf16[53248,16384]{1,0} all-reduce(%dot.54), channel_id=20, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%add.2.clone
  %dynamic-slice.257 = bf16[53248,32]{1,0} dynamic-slice(%all-reduce.2, %constant.1859, %reshape.1997), dynamic_slice_sizes={53248,32}
  %multiply.369 = f32[1]{0} multiply(%divide.440, %divide.395)
  %convert.410 = bf16[1]{0} convert(%multiply.369)
  %reshape.2009 = bf16[] reshape(%convert.410)
  %broadcast.1944 = bf16[53248,32]{1,0} broadcast(%reshape.2009), dimensions={}
  %multiply.370 = bf16[53248,32]{0,1} multiply(%dynamic-slice.257, %broadcast.1944)
  %convert.411 = f32[53248,32]{0,1} convert(%multiply.370)
  %reshape.2010 = f32[1,53248,32]{2,1,0} reshape(%convert.411)
  %dynamic-update-slice.66 = f32[126,53248,32]{2,1,0} dynamic-update-slice(%get-tuple-element.396, %reshape.2010, %subtract.9, %constant.1859, %constant.1859)
  %get-tuple-element.399 = f32[126,16384]{1,0} get-tuple-element(%param.45), index=5
  %multiply.371 = bf16[1,8192,16384]{2,1,0} multiply(%convert.348, %copy.69)
  %reduce.203 = bf16[16384]{0} reduce(%multiply.371, %constant.2234), dimensions={0,1}, to_apply=%region_88.2873
  %all-reduce.3 = bf16[16384]{0} all-reduce(%reduce.203), channel_id=21, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_88.2873.clone
  %convert.412 = f32[16384]{0} convert(%all-reduce.3)
  %reshape.2011 = f32[1,16384]{1,0} reshape(%convert.412)
  %dynamic-update-slice.67 = f32[126,16384]{1,0} dynamic-update-slice(%get-tuple-element.399, %reshape.2011, %subtract.9, %constant.1859)
  %get-tuple-element.400 = f32[126,16384]{1,0} get-tuple-element(%param.45), index=6
  %multiply.372 = bf16[1,8192,16384]{2,1,0} multiply(%convert.297, %copy.77)
  %reduce.204 = bf16[16384]{0} reduce(%multiply.372, %constant.2234), dimensions={0,1}, to_apply=%region_104.3199
  %all-reduce.4 = bf16[16384]{0} all-reduce(%reduce.204), channel_id=22, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_104.3199.clone
  %convert.413 = f32[16384]{0} convert(%all-reduce.4)
  %reshape.2012 = f32[1,16384]{1,0} reshape(%convert.413)
  %dynamic-update-slice.68 = f32[126,16384]{1,0} dynamic-update-slice(%get-tuple-element.400, %reshape.2012, %subtract.9, %constant.1859)
  %get-tuple-element.401 = f32[126,32,8,128]{3,2,1,0} get-tuple-element(%param.45), index=7
  %dot.55 = bf16[8,128,16384]{2,1,0} dot(%convert.393, %convert.315), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.5 = bf16[8,128,16384]{2,1,0} all-reduce(%dot.55), channel_id=23, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%add.3.clone
  %dynamic-slice.259 = bf16[8,128,32]{2,1,0} dynamic-slice(%all-reduce.5, %constant.1859, %constant.1859, %reshape.1997), dynamic_slice_sizes={8,128,32}
  %multiply.373 = f32[1]{0} multiply(%divide.350, %divide.431)
  %convert.414 = bf16[1]{0} convert(%multiply.373)
  %reshape.2014 = bf16[] reshape(%convert.414)
  %broadcast.1945 = bf16[8,128,32]{1,0,2} broadcast(%reshape.2014), dimensions={}
  %multiply.374 = bf16[8,128,32]{2,1,0} multiply(%dynamic-slice.259, %broadcast.1945)
  %convert.415 = f32[8,128,32]{2,1,0} convert(%multiply.374)
  %transpose.56 = f32[32,8,128]{0,2,1} transpose(%convert.415), dimensions={2,0,1}
  %reshape.2015 = f32[1,32,8,128]{3,2,1,0} reshape(%transpose.56)
  %dynamic-update-slice.69 = f32[126,32,8,128]{3,2,1,0} dynamic-update-slice(%get-tuple-element.401, %reshape.2015, %subtract.9, %constant.1859, %constant.1859, /*index=5*/%constant.1859)
  %get-tuple-element.402 = f32[126,128,128,32]{3,2,1,0} get-tuple-element(%param.45), index=8
  %dot.56 = bf16[16384,128,128]{2,1,0} dot(%convert.381, %convert.342), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.6 = bf16[16384,128,128]{2,1,0} all-reduce(%dot.56), channel_id=24, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%add.4.clone
  %dynamic-slice.261 = bf16[32,128,128]{2,1,0} dynamic-slice(%all-reduce.6, %reshape.1997, %constant.1859, %constant.1859), dynamic_slice_sizes={32,128,128}
  %multiply.375 = f32[1]{0} multiply(%divide.373, %divide.421)
  %convert.416 = bf16[1]{0} convert(%multiply.375)
  %reshape.2017 = bf16[] reshape(%convert.416)
  %broadcast.1947 = bf16[32,128,128]{0,2,1} broadcast(%reshape.2017), dimensions={}
  %multiply.376 = bf16[32,128,128]{2,1,0} multiply(%dynamic-slice.261, %broadcast.1947)
  %convert.417 = f32[32,128,128]{2,1,0} convert(%multiply.376)
  %transpose.57 = f32[128,128,32]{1,0,2} transpose(%convert.417), dimensions={1,2,0}
  %reshape.2018 = f32[1,128,128,32]{3,2,1,0} reshape(%transpose.57)
  %dynamic-update-slice.70 = f32[126,128,128,32]{3,2,1,0} dynamic-update-slice(%get-tuple-element.402, %reshape.2018, %subtract.9, %constant.1859, %constant.1859, /*index=5*/%constant.1859)
  %get-tuple-element.403 = f32[126,32,128,128]{3,2,1,0} get-tuple-element(%param.45), index=9
  %dot.57 = bf16[128,128,16384]{2,1,0} dot(%convert.399, %convert.300), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.7 = bf16[128,128,16384]{2,1,0} all-reduce(%dot.57), channel_id=25, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%add.5.clone
  %dynamic-slice.263 = bf16[128,128,32]{2,1,0} dynamic-slice(%all-reduce.7, %constant.1859, %constant.1859, %reshape.1997), dynamic_slice_sizes={128,128,32}
  %multiply.377 = f32[1]{0} multiply(%divide.339, %divide.435)
  %convert.418 = bf16[1]{0} convert(%multiply.377)
  %reshape.2020 = bf16[] reshape(%convert.418)
  %broadcast.1949 = bf16[128,128,32]{1,0,2} broadcast(%reshape.2020), dimensions={}
  %multiply.378 = bf16[128,128,32]{2,1,0} multiply(%dynamic-slice.263, %broadcast.1949)
  %convert.419 = f32[128,128,32]{2,1,0} convert(%multiply.378)
  %transpose.58 = f32[32,128,128]{0,2,1} transpose(%convert.419), dimensions={2,0,1}
  %reshape.2021 = f32[1,32,128,128]{3,2,1,0} reshape(%transpose.58)
  %dynamic-update-slice.71 = f32[126,32,128,128]{3,2,1,0} dynamic-update-slice(%get-tuple-element.403, %reshape.2021, %subtract.9, %constant.1859, %constant.1859, /*index=5*/%constant.1859)
  %get-tuple-element.404 = f32[126,32,8,128]{3,2,1,0} get-tuple-element(%param.45), index=10
  %dot.58 = bf16[8,128,16384]{2,1,0} dot(%convert.386, %convert.331), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.8 = bf16[8,128,16384]{2,1,0} all-reduce(%dot.58), channel_id=26, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%add.6.clone
  %dynamic-slice.265 = bf16[8,128,32]{2,1,0} dynamic-slice(%all-reduce.8, %constant.1859, %constant.1859, %reshape.1997), dynamic_slice_sizes={8,128,32}
  %multiply.380 = f32[1]{0} multiply(%divide.360, %divide.427)
  %convert.420 = bf16[1]{0} convert(%multiply.380)
  %reshape.2023 = bf16[] reshape(%convert.420)
  %broadcast.1950 = bf16[8,128,32]{1,0,2} broadcast(%reshape.2023), dimensions={}
  %multiply.382 = bf16[8,128,32]{2,1,0} multiply(%dynamic-slice.265, %broadcast.1950)
  %convert.421 = f32[8,128,32]{2,1,0} convert(%multiply.382)
  %transpose.59 = f32[32,8,128]{0,2,1} transpose(%convert.421), dimensions={2,0,1}
  %reshape.2024 = f32[1,32,8,128]{3,2,1,0} reshape(%transpose.59)
  %dynamic-update-slice.72 = f32[126,32,8,128]{3,2,1,0} dynamic-update-slice(%get-tuple-element.404, %reshape.2024, %subtract.9, %constant.1859, %constant.1859, /*index=5*/%constant.1859)
  %get-tuple-element.405 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=11
  %reshape.2025 = f32[1024]{0} reshape(%dynamic-slice.207)
  %slice.424 = f32[1023]{0} slice(%reshape.2025), slice={[1:1024]}
  %slice.425 = f32[1,1]{1,0} slice(%dynamic-slice.207), slice={[0:1], [0:1]}
  %reshape.2026 = f32[1]{0} reshape(%slice.425)
  %concatenate.119 = f32[1024]{0} concatenate(%slice.424, %reshape.2026), dimensions={0}
  %reshape.2028 = f32[1,1024]{1,0} reshape(%concatenate.119)
  %abs.28 = bf16[1,8192,16384]{2,1,0} abs(%copy.66)
  %constant.2472 = bf16[] constant(-inf)
  %reduce.205 = bf16[] reduce(%abs.28, %constant.2472), dimensions={0,1,2}, to_apply=%region_62.2441
  %all-reduce.9 = bf16[] all-reduce(%reduce.205), channel_id=27, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_62.2441.clone
  %convert.422 = f32[] convert(%all-reduce.9)
  %reshape.2029 = f32[1,1]{1,0} reshape(%convert.422)
  %dynamic-update-slice.73 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2028, %reshape.2029, %constant.1859, %constant.1859)
  %dynamic-update-slice.74 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.405, %dynamic-update-slice.73, %subtract.9, %constant.1859)
  %get-tuple-element.406 = f32[126,1]{1,0} get-tuple-element(%param.45), index=12
  %reshape.2030 = f32[1,1]{1,0} reshape(%divide.385)
  %dynamic-update-slice.75 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.406, %reshape.2030, %subtract.9, %constant.1859)
  %get-tuple-element.407 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=13
  %reshape.2031 = f32[1024]{0} reshape(%dynamic-slice.210)
  %slice.426 = f32[1023]{0} slice(%reshape.2031), slice={[1:1024]}
  %slice.427 = f32[1,1]{1,0} slice(%dynamic-slice.210), slice={[0:1], [0:1]}
  %reshape.2032 = f32[1]{0} reshape(%slice.427)
  %concatenate.120 = f32[1024]{0} concatenate(%slice.426, %reshape.2032), dimensions={0}
  %reshape.2033 = f32[1,1024]{1,0} reshape(%concatenate.120)
  %abs.29 = bf16[1,32,53248]{2,1,0} abs(%convert.353)
  %reduce.206 = bf16[] reduce(%abs.29, %constant.2472), dimensions={0,1,2}, to_apply=%region_65.2473
  %all-reduce.10 = bf16[] all-reduce(%reduce.206), channel_id=28, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_65.2473.clone
  %convert.423 = f32[] convert(%all-reduce.10)
  %reshape.2034 = f32[1,1]{1,0} reshape(%convert.423)
  %dynamic-update-slice.76 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2033, %reshape.2034, %constant.1859, %constant.1859)
  %dynamic-update-slice.77 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.407, %dynamic-update-slice.76, %subtract.9, %constant.1859)
  %get-tuple-element.408 = f32[126,1]{1,0} get-tuple-element(%param.45), index=14
  %reshape.2035 = f32[1,1]{1,0} reshape(%divide.390)
  %dynamic-update-slice.78 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.408, %reshape.2035, %subtract.9, %constant.1859)
  %get-tuple-element.409 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=15
  %reshape.2036 = f32[1024]{0} reshape(%dynamic-slice.224)
  %slice.428 = f32[1023]{0} slice(%reshape.2036), slice={[1:1024]}
  %slice.429 = f32[1,1]{1,0} slice(%dynamic-slice.224), slice={[0:1], [0:1]}
  %reshape.2037 = f32[1]{0} reshape(%slice.429)
  %concatenate.121 = f32[1024]{0} concatenate(%slice.428, %reshape.2037), dimensions={0}
  %reshape.2038 = f32[1,1024]{1,0} reshape(%concatenate.121)
  %abs.30 = bf16[1,8192,53248]{2,1,0} abs(%add.166)
  %reduce.207 = bf16[] reduce(%abs.30, %constant.2472), dimensions={0,1,2}, to_apply=%region_86.2836
  %all-reduce.11 = bf16[] all-reduce(%reduce.207), channel_id=29, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_86.2836.clone
  %convert.424 = f32[] convert(%all-reduce.11)
  %reshape.2039 = f32[1,1]{1,0} reshape(%convert.424)
  %dynamic-update-slice.79 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2038, %reshape.2039, %constant.1859, %constant.1859)
  %dynamic-update-slice.80 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.409, %dynamic-update-slice.79, %subtract.9, %constant.1859)
  %get-tuple-element.410 = f32[126,1]{1,0} get-tuple-element(%param.45), index=16
  %reshape.2040 = f32[1,1]{1,0} reshape(%divide.416)
  %dynamic-update-slice.81 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.410, %reshape.2040, %subtract.9, %constant.1859)
  %get-tuple-element.411 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=17
  %reshape.2041 = f32[1024]{0} reshape(%dynamic-slice.222)
  %slice.430 = f32[1023]{0} slice(%reshape.2041), slice={[1:1024]}
  %slice.431 = f32[1,1]{1,0} slice(%dynamic-slice.222), slice={[0:1], [0:1]}
  %reshape.2042 = f32[1]{0} reshape(%slice.431)
  %concatenate.122 = f32[1024]{0} concatenate(%slice.430, %reshape.2042), dimensions={0}
  %reshape.2043 = f32[1,1024]{1,0} reshape(%concatenate.122)
  %all-reduce.12 = bf16[] all-reduce(%reduce.205), channel_id=30, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_68.2537.clone
  %convert.425 = f32[] convert(%all-reduce.12)
  %reshape.2044 = f32[1,1]{1,0} reshape(%convert.425)
  %dynamic-update-slice.82 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2043, %reshape.2044, %constant.1859, %constant.1859)
  %dynamic-update-slice.83 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.411, %dynamic-update-slice.82, %subtract.9, %constant.1859)
  %get-tuple-element.412 = f32[126,1]{1,0} get-tuple-element(%param.45), index=18
  %reshape.2045 = f32[1,1]{1,0} reshape(%divide.412)
  %dynamic-update-slice.84 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.412, %reshape.2045, %subtract.9, %constant.1859)
  %get-tuple-element.413 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=19
  %reshape.2046 = f32[1024]{0} reshape(%dynamic-slice.220)
  %slice.432 = f32[1023]{0} slice(%reshape.2046), slice={[1:1024]}
  %slice.433 = f32[1,1]{1,0} slice(%dynamic-slice.220), slice={[0:1], [0:1]}
  %reshape.2047 = f32[1]{0} reshape(%slice.433)
  %concatenate.123 = f32[1024]{0} concatenate(%slice.432, %reshape.2047), dimensions={0}
  %reshape.2048 = f32[1,1024]{1,0} reshape(%concatenate.123)
  %abs.32 = bf16[1,32,53248]{2,1,0} abs(%convert.366)
  %reduce.209 = bf16[] reduce(%abs.32, %constant.2472), dimensions={0,1,2}, to_apply=%region_71.2569
  %all-reduce.13 = bf16[] all-reduce(%reduce.209), channel_id=31, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_71.2569.clone
  %convert.426 = f32[] convert(%all-reduce.13)
  %reshape.2049 = f32[1,1]{1,0} reshape(%convert.426)
  %dynamic-update-slice.85 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2048, %reshape.2049, %constant.1859, %constant.1859)
  %dynamic-update-slice.86 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.413, %dynamic-update-slice.85, %subtract.9, %constant.1859)
  %get-tuple-element.414 = f32[126,1]{1,0} get-tuple-element(%param.45), index=20
  %reshape.2050 = f32[1,1]{1,0} reshape(%divide.408)
  %dynamic-update-slice.87 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.414, %reshape.2050, %subtract.9, %constant.1859)
  %get-tuple-element.415 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=21
  %reshape.2051 = f32[1024]{0} reshape(%dynamic-slice.217)
  %slice.434 = f32[1023]{0} slice(%reshape.2051), slice={[1:1024]}
  %slice.435 = f32[1,1]{1,0} slice(%dynamic-slice.217), slice={[0:1], [0:1]}
  %reshape.2052 = f32[1]{0} reshape(%slice.435)
  %concatenate.124 = f32[1024]{0} concatenate(%slice.434, %reshape.2052), dimensions={0}
  %reshape.2053 = f32[1,1024]{1,0} reshape(%concatenate.124)
  %abs.33 = bf16[1,8192,53248]{2,1,0} abs(%multiply.304)
  %reduce.210 = bf16[] reduce(%abs.33, %constant.2472), dimensions={0,1,2}, to_apply=%region_83.2770
  %all-reduce.14 = bf16[] all-reduce(%reduce.210), channel_id=32, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_83.2770.clone
  %convert.427 = f32[] convert(%all-reduce.14)
  %reshape.2054 = f32[1,1]{1,0} reshape(%convert.427)
  %dynamic-update-slice.88 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2053, %reshape.2054, %constant.1859, %constant.1859)
  %dynamic-update-slice.89 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.415, %dynamic-update-slice.88, %subtract.9, %constant.1859)
  %get-tuple-element.416 = f32[126,1]{1,0} get-tuple-element(%param.45), index=22
  %reshape.2055 = f32[1,1]{1,0} reshape(%divide.404)
  %dynamic-update-slice.90 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.416, %reshape.2055, %subtract.9, %constant.1859)
  %get-tuple-element.417 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=23
  %reshape.2056 = f32[1024]{0} reshape(%dynamic-slice.254)
  %slice.436 = f32[1023]{0} slice(%reshape.2056), slice={[1:1024]}
  %slice.437 = f32[1,1]{1,0} slice(%dynamic-slice.254), slice={[0:1], [0:1]}
  %reshape.2057 = f32[1]{0} reshape(%slice.437)
  %concatenate.125 = f32[1024]{0} concatenate(%slice.436, %reshape.2057), dimensions={0}
  %reshape.2058 = f32[1,1024]{1,0} reshape(%concatenate.125)
  %abs.34 = bf16[1,8192,53248]{2,1,0} abs(%copy.79)
  %reduce.211 = bf16[] reduce(%abs.34, %constant.2472), dimensions={0,1,2}, to_apply=%region_74.2611
  %all-reduce.15 = bf16[] all-reduce(%reduce.211), channel_id=33, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_74.2611.clone
  %convert.428 = f32[] convert(%all-reduce.15)
  %reshape.2060 = f32[1,1]{1,0} reshape(%convert.428)
  %dynamic-update-slice.91 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2058, %reshape.2060, %constant.1859, %constant.1859)
  %dynamic-update-slice.92 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.417, %dynamic-update-slice.91, %subtract.9, %constant.1859)
  %get-tuple-element.418 = f32[126,1]{1,0} get-tuple-element(%param.45), index=24
  %reshape.2061 = f32[1,1]{1,0} reshape(%divide.440)
  %dynamic-update-slice.93 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.418, %reshape.2061, %subtract.9, %constant.1859)
  %get-tuple-element.419 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=25
  %reshape.2062 = f32[1024]{0} reshape(%dynamic-slice.215)
  %slice.438 = f32[1023]{0} slice(%reshape.2062), slice={[1:1024]}
  %slice.439 = f32[1,1]{1,0} slice(%dynamic-slice.215), slice={[0:1], [0:1]}
  %reshape.2063 = f32[1]{0} reshape(%slice.439)
  %concatenate.126 = f32[1024]{0} concatenate(%slice.438, %reshape.2063), dimensions={0}
  %reshape.2064 = f32[1,1024]{1,0} reshape(%concatenate.126)
  %abs.35 = bf16[1,53248,32]{2,1,0} abs(%convert.359)
  %reduce.212 = bf16[] reduce(%abs.35, %constant.2472), dimensions={0,1,2}, to_apply=%region_77.2651
  %all-reduce.16 = bf16[] all-reduce(%reduce.212), channel_id=34, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_77.2651.clone
  %convert.429 = f32[] convert(%all-reduce.16)
  %reshape.2065 = f32[1,1]{1,0} reshape(%convert.429)
  %dynamic-update-slice.94 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2064, %reshape.2065, %constant.1859, %constant.1859)
  %dynamic-update-slice.95 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.419, %dynamic-update-slice.94, %subtract.9, %constant.1859)
  %get-tuple-element.420 = f32[126,1]{1,0} get-tuple-element(%param.45), index=26
  %reshape.2066 = f32[1,1]{1,0} reshape(%divide.400)
  %dynamic-update-slice.96 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.420, %reshape.2066, %subtract.9, %constant.1859)
  %get-tuple-element.421 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=27
  %reshape.2067 = f32[1024]{0} reshape(%dynamic-slice.212)
  %slice.440 = f32[1023]{0} slice(%reshape.2067), slice={[1:1024]}
  %slice.441 = f32[1,1]{1,0} slice(%dynamic-slice.212), slice={[0:1], [0:1]}
  %reshape.2069 = f32[1]{0} reshape(%slice.441)
  %concatenate.127 = f32[1024]{0} concatenate(%slice.440, %reshape.2069), dimensions={0}
  %reshape.2070 = f32[1,1024]{1,0} reshape(%concatenate.127)
  %abs.36 = bf16[1,8192,16384]{2,1,0} abs(%copy.67)
  %reduce.213 = bf16[] reduce(%abs.36, %constant.2472), dimensions={0,1,2}, to_apply=%region_80.2706
  %all-reduce.17 = bf16[] all-reduce(%reduce.213), channel_id=35, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_80.2706.clone
  %convert.430 = f32[] convert(%all-reduce.17)
  %reshape.2071 = f32[1,1]{1,0} reshape(%convert.430)
  %dynamic-update-slice.97 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2070, %reshape.2071, %constant.1859, %constant.1859)
  %dynamic-update-slice.98 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.421, %dynamic-update-slice.97, %subtract.9, %constant.1859)
  %get-tuple-element.422 = f32[126,1]{1,0} get-tuple-element(%param.45), index=28
  %reshape.2072 = f32[1,1]{1,0} reshape(%divide.395)
  %dynamic-update-slice.99 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.422, %reshape.2072, %subtract.9, %constant.1859)
  %get-tuple-element.423 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=29
  %reshape.2073 = f32[1024]{0} reshape(%dynamic-slice.184)
  %slice.443 = f32[1023]{0} slice(%reshape.2073), slice={[1:1024]}
  %slice.444 = f32[1,1]{1,0} slice(%dynamic-slice.184), slice={[0:1], [0:1]}
  %reshape.2074 = f32[1]{0} reshape(%slice.444)
  %concatenate.128 = f32[1024]{0} concatenate(%slice.443, %reshape.2074), dimensions={0}
  %reshape.2075 = f32[1,1024]{1,0} reshape(%concatenate.128)
  %abs.37 = bf16[1,8192,16384]{2,1,0} abs(%copy.59)
  %reduce.214 = bf16[] reduce(%abs.37, %constant.2472), dimensions={0,1,2}, to_apply=%region_40.1937
  %all-reduce.18 = bf16[] all-reduce(%reduce.214), channel_id=36, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_40.1937.clone
  %convert.431 = f32[] convert(%all-reduce.18)
  %reshape.2076 = f32[1,1]{1,0} reshape(%convert.431)
  %dynamic-update-slice.100 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2075, %reshape.2076, %constant.1859, %constant.1859)
  %dynamic-update-slice.101 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.423, %dynamic-update-slice.100, %subtract.9, %constant.1859)
  %get-tuple-element.424 = f32[126,1]{1,0} get-tuple-element(%param.45), index=30
  %reshape.2077 = f32[1,1]{1,0} reshape(%divide.350)
  %dynamic-update-slice.102 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.424, %reshape.2077, %subtract.9, %constant.1859)
  %get-tuple-element.425 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=31
  %reshape.2078 = f32[1024]{0} reshape(%dynamic-slice.187)
  %slice.445 = f32[1023]{0} slice(%reshape.2078), slice={[1:1024]}
  %slice.446 = f32[1,1]{1,0} slice(%dynamic-slice.187), slice={[0:1], [0:1]}
  %reshape.2079 = f32[1]{0} reshape(%slice.446)
  %concatenate.129 = f32[1024]{0} concatenate(%slice.445, %reshape.2079), dimensions={0}
  %reshape.2080 = f32[1,1024]{1,0} reshape(%concatenate.129)
  %abs.38 = bf16[1,32,8,128]{3,2,1,0} abs(%convert.316)
  %reduce.215 = bf16[] reduce(%abs.38, %constant.2472), dimensions={0,1,2,3}, to_apply=%region_43.1969
  %all-reduce.19 = bf16[] all-reduce(%reduce.215), channel_id=37, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_43.1969.clone
  %convert.432 = f32[] convert(%all-reduce.19)
  %reshape.2081 = f32[1,1]{1,0} reshape(%convert.432)
  %dynamic-update-slice.103 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2080, %reshape.2081, %constant.1859, %constant.1859)
  %dynamic-update-slice.104 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.425, %dynamic-update-slice.103, %subtract.9, %constant.1859)
  %get-tuple-element.426 = f32[126,1]{1,0} get-tuple-element(%param.45), index=32
  %reshape.2082 = f32[1,1]{1,0} reshape(%divide.354)
  %dynamic-update-slice.105 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.426, %reshape.2082, %subtract.9, %constant.1859)
  %get-tuple-element.427 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=33
  %reshape.2083 = f32[1024]{0} reshape(%dynamic-slice.238)
  %slice.447 = f32[1023]{0} slice(%reshape.2083), slice={[1:1024]}
  %slice.448 = f32[1,1]{1,0} slice(%dynamic-slice.238), slice={[0:1], [0:1]}
  %reshape.2084 = f32[1]{0} reshape(%slice.448)
  %concatenate.130 = f32[1024]{0} concatenate(%slice.447, %reshape.2084), dimensions={0}
  %reshape.2085 = f32[1,1024]{1,0} reshape(%concatenate.130)
  %abs.39 = bf16[1,8192,8,128]{3,2,1,0} abs(%add.181)
  %reduce.216 = bf16[] reduce(%abs.39, %constant.2472), dimensions={0,1,2,3}, to_apply=%region_99.3103
  %all-reduce.20 = bf16[] all-reduce(%reduce.216), channel_id=38, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_99.3103.clone
  %convert.433 = f32[] convert(%all-reduce.20)
  %reshape.2086 = f32[1,1]{1,0} reshape(%convert.433)
  %dynamic-update-slice.106 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2085, %reshape.2086, %constant.1859, %constant.1859)
  %dynamic-update-slice.107 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.427, %dynamic-update-slice.106, %subtract.9, %constant.1859)
  %get-tuple-element.428 = f32[126,1]{1,0} get-tuple-element(%param.45), index=34
  %reshape.2087 = f32[1,1]{1,0} reshape(%divide.431)
  %dynamic-update-slice.108 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.428, %reshape.2087, %subtract.9, %constant.1859)
  %get-tuple-element.429 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=35
  %reshape.2088 = f32[1024]{0} reshape(%dynamic-slice.201)
  %slice.449 = f32[1023]{0} slice(%reshape.2088), slice={[1:1024]}
  %slice.450 = f32[1,1]{1,0} slice(%dynamic-slice.201), slice={[0:1], [0:1]}
  %reshape.2089 = f32[1]{0} reshape(%slice.450)
  %concatenate.131 = f32[1024]{0} concatenate(%slice.449, %reshape.2089), dimensions={0}
  %reshape.2090 = f32[1,1024]{1,0} reshape(%concatenate.131)
  %abs.40 = bf16[1,8192,128,128]{3,2,1,0} abs(%copy.64)
  %reduce.217 = bf16[] reduce(%abs.40, %constant.2472), dimensions={0,1,2,3}, to_apply=%region_55.2325
  %all-reduce.21 = bf16[] all-reduce(%reduce.217), channel_id=39, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_55.2325.clone
  %convert.434 = f32[] convert(%all-reduce.21)
  %reshape.2091 = f32[1,1]{1,0} reshape(%convert.434)
  %dynamic-update-slice.109 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2090, %reshape.2091, %constant.1859, %constant.1859)
  %dynamic-update-slice.110 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.429, %dynamic-update-slice.109, %subtract.9, %constant.1859)
  %get-tuple-element.430 = f32[126,1]{1,0} get-tuple-element(%param.45), index=36
  %reshape.2092 = f32[1,1]{1,0} reshape(%divide.373)
  %dynamic-update-slice.111 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.430, %reshape.2092, %subtract.9, %constant.1859)
  %get-tuple-element.431 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=37
  %reshape.2093 = f32[1024]{0} reshape(%dynamic-slice.204)
  %slice.451 = f32[1023]{0} slice(%reshape.2093), slice={[1:1024]}
  %slice.452 = f32[1,1]{1,0} slice(%dynamic-slice.204), slice={[0:1], [0:1]}
  %reshape.2094 = f32[1]{0} reshape(%slice.452)
  %concatenate.132 = f32[1024]{0} concatenate(%slice.451, %reshape.2094), dimensions={0}
  %reshape.2095 = f32[1,1024]{1,0} reshape(%concatenate.132)
  %abs.41 = bf16[1,128,128,32]{3,2,1,0} abs(%convert.343)
  %reduce.218 = bf16[] reduce(%abs.41, %constant.2472), dimensions={0,1,2,3}, to_apply=%region_58.2365
  %all-reduce.22 = bf16[] all-reduce(%reduce.218), channel_id=40, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_58.2365.clone
  %convert.435 = f32[] convert(%all-reduce.22)
  %reshape.2096 = f32[1,1]{1,0} reshape(%convert.435)
  %dynamic-update-slice.112 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2095, %reshape.2096, %constant.1859, %constant.1859)
  %dynamic-update-slice.113 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.431, %dynamic-update-slice.112, %subtract.9, %constant.1859)
  %get-tuple-element.432 = f32[126,1]{1,0} get-tuple-element(%param.45), index=38
  %reshape.2097 = f32[1,1]{1,0} reshape(%divide.379)
  %dynamic-update-slice.114 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.432, %reshape.2097, %subtract.9, %constant.1859)
  %get-tuple-element.433 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=39
  %reshape.2098 = f32[1024]{0} reshape(%dynamic-slice.226)
  %slice.453 = f32[1023]{0} slice(%reshape.2098), slice={[1:1024]}
  %slice.454 = f32[1,1]{1,0} slice(%dynamic-slice.226), slice={[0:1], [0:1]}
  %reshape.2099 = f32[1]{0} reshape(%slice.454)
  %concatenate.133 = f32[1024]{0} concatenate(%slice.453, %reshape.2099), dimensions={0}
  %reshape.2100 = f32[1,1024]{1,0} reshape(%concatenate.133)
  %abs.42 = bf16[1,8192,16384]{2,1,0} abs(%copy.70)
  %reduce.219 = bf16[] reduce(%abs.42, %constant.2472), dimensions={0,1,2}, to_apply=%region_93.2928
  %all-reduce.23 = bf16[] all-reduce(%reduce.219), channel_id=41, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_93.2928.clone
  %convert.437 = f32[] convert(%all-reduce.23)
  %reshape.2101 = f32[1,1]{1,0} reshape(%convert.437)
  %dynamic-update-slice.115 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2100, %reshape.2101, %constant.1859, %constant.1859)
  %dynamic-update-slice.116 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.433, %dynamic-update-slice.115, %subtract.9, %constant.1859)
  %get-tuple-element.434 = f32[126,1]{1,0} get-tuple-element(%param.45), index=40
  %reshape.2102 = f32[1,1]{1,0} reshape(%divide.421)
  %dynamic-update-slice.117 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.434, %reshape.2102, %subtract.9, %constant.1859)
  %get-tuple-element.435 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=41
  %reshape.2103 = f32[1024]{0} reshape(%dynamic-slice.175)
  %slice.455 = f32[1023]{0} slice(%reshape.2103), slice={[1:1024]}
  %slice.456 = f32[1,1]{1,0} slice(%dynamic-slice.175), slice={[0:1], [0:1]}
  %reshape.2105 = f32[1]{0} reshape(%slice.456)
  %concatenate.134 = f32[1024]{0} concatenate(%slice.455, %reshape.2105), dimensions={0}
  %reshape.2107 = f32[1,1024]{1,0} reshape(%concatenate.134)
  %all-reduce.24 = bf16[] all-reduce(%reduce.214), channel_id=42, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_34.1844.clone
  %convert.438 = f32[] convert(%all-reduce.24)
  %reshape.2109 = f32[1,1]{1,0} reshape(%convert.438)
  %dynamic-update-slice.118 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2107, %reshape.2109, %constant.1859, %constant.1859)
  %dynamic-update-slice.119 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.435, %dynamic-update-slice.118, %subtract.9, %constant.1859)
  %get-tuple-element.436 = f32[126,1]{1,0} get-tuple-element(%param.45), index=42
  %reshape.2110 = f32[1,1]{1,0} reshape(%divide.339)
  %dynamic-update-slice.120 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.436, %reshape.2110, %subtract.9, %constant.1859)
  %get-tuple-element.437 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=43
  %reshape.2112 = f32[1024]{0} reshape(%dynamic-slice.178)
  %slice.457 = f32[1023]{0} slice(%reshape.2112), slice={[1:1024]}
  %slice.458 = f32[1,1]{1,0} slice(%dynamic-slice.178), slice={[0:1], [0:1]}
  %reshape.2113 = f32[1]{0} reshape(%slice.458)
  %concatenate.135 = f32[1024]{0} concatenate(%slice.457, %reshape.2113), dimensions={0}
  %reshape.2114 = f32[1,1024]{1,0} reshape(%concatenate.135)
  %abs.44 = bf16[1,32,128,128]{3,2,1,0} abs(%convert.301)
  %reduce.221 = bf16[] reduce(%abs.44, %constant.2472), dimensions={0,1,2,3}, to_apply=%region_37.1889
  %all-reduce.25 = bf16[] all-reduce(%reduce.221), channel_id=43, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_37.1889.clone
  %convert.439 = f32[] convert(%all-reduce.25)
  %reshape.2115 = f32[1,1]{1,0} reshape(%convert.439)
  %dynamic-update-slice.121 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2114, %reshape.2115, %constant.1859, %constant.1859)
  %dynamic-update-slice.122 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.437, %dynamic-update-slice.121, %subtract.9, %constant.1859)
  %get-tuple-element.438 = f32[126,1]{1,0} get-tuple-element(%param.45), index=44
  %reshape.2116 = f32[1,1]{1,0} reshape(%divide.343)
  %dynamic-update-slice.123 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.438, %reshape.2116, %subtract.9, %constant.1859)
  %get-tuple-element.439 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=45
  %reshape.2118 = f32[1024]{0} reshape(%dynamic-slice.248)
  %slice.459 = f32[1023]{0} slice(%reshape.2118), slice={[1:1024]}
  %slice.460 = f32[1,1]{1,0} slice(%dynamic-slice.248), slice={[0:1], [0:1]}
  %reshape.2119 = f32[1]{0} reshape(%slice.460)
  %concatenate.136 = f32[1024]{0} concatenate(%slice.459, %reshape.2119), dimensions={0}
  %reshape.2120 = f32[1,1024]{1,0} reshape(%concatenate.136)
  %abs.45 = bf16[1,8192,128,128]{3,2,1,0} abs(%add.186)
  %reduce.222 = bf16[] reduce(%abs.45, %constant.2472), dimensions={0,1,2,3}, to_apply=%region_102.3152
  %all-reduce.26 = bf16[] all-reduce(%reduce.222), channel_id=44, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_102.3152.clone
  %convert.440 = f32[] convert(%all-reduce.26)
  %reshape.2121 = f32[1,1]{1,0} reshape(%convert.440)
  %dynamic-update-slice.124 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2120, %reshape.2121, %constant.1859, %constant.1859)
  %dynamic-update-slice.125 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.439, %dynamic-update-slice.124, %subtract.9, %constant.1859)
  %get-tuple-element.440 = f32[126,1]{1,0} get-tuple-element(%param.45), index=46
  %reshape.2122 = f32[1,1]{1,0} reshape(%divide.435)
  %dynamic-update-slice.126 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.440, %reshape.2122, %subtract.9, %constant.1859)
  %get-tuple-element.441 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=47
  %reshape.2123 = f32[1024]{0} reshape(%dynamic-slice.193)
  %slice.461 = f32[1023]{0} slice(%reshape.2123), slice={[1:1024]}
  %slice.462 = f32[1,1]{1,0} slice(%dynamic-slice.193), slice={[0:1], [0:1]}
  %reshape.2124 = f32[1]{0} reshape(%slice.462)
  %concatenate.137 = f32[1024]{0} concatenate(%slice.461, %reshape.2124), dimensions={0}
  %reshape.2125 = f32[1,1024]{1,0} reshape(%concatenate.137)
  %all-reduce.27 = bf16[] all-reduce(%reduce.214), channel_id=45, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_46.2017.clone
  %convert.441 = f32[] convert(%all-reduce.27)
  %reshape.2126 = f32[1,1]{1,0} reshape(%convert.441)
  %dynamic-update-slice.127 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2125, %reshape.2126, %constant.1859, %constant.1859)
  %dynamic-update-slice.128 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.441, %dynamic-update-slice.127, %subtract.9, %constant.1859)
  %get-tuple-element.442 = f32[126,1]{1,0} get-tuple-element(%param.45), index=48
  %reshape.2127 = f32[1,1]{1,0} reshape(%divide.360)
  %dynamic-update-slice.129 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.442, %reshape.2127, %subtract.9, %constant.1859)
  %get-tuple-element.443 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=49
  %reshape.2128 = f32[1024]{0} reshape(%dynamic-slice.196)
  %slice.463 = f32[1023]{0} slice(%reshape.2128), slice={[1:1024]}
  %slice.464 = f32[1,1]{1,0} slice(%dynamic-slice.196), slice={[0:1], [0:1]}
  %reshape.2129 = f32[1]{0} reshape(%slice.464)
  %concatenate.138 = f32[1024]{0} concatenate(%slice.463, %reshape.2129), dimensions={0}
  %reshape.2130 = f32[1,1024]{1,0} reshape(%concatenate.138)
  %abs.47 = bf16[1,32,8,128]{3,2,1,0} abs(%convert.332)
  %reduce.224 = bf16[] reduce(%abs.47, %constant.2472), dimensions={0,1,2,3}, to_apply=%region_49.2049
  %all-reduce.28 = bf16[] all-reduce(%reduce.224), channel_id=46, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_49.2049.clone
  %convert.442 = f32[] convert(%all-reduce.28)
  %reshape.2131 = f32[1,1]{1,0} reshape(%convert.442)
  %dynamic-update-slice.130 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2130, %reshape.2131, %constant.1859, %constant.1859)
  %dynamic-update-slice.131 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.443, %dynamic-update-slice.130, %subtract.9, %constant.1859)
  %get-tuple-element.444 = f32[126,1]{1,0} get-tuple-element(%param.45), index=50
  %reshape.2132 = f32[1,1]{1,0} reshape(%divide.364)
  %dynamic-update-slice.132 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.444, %reshape.2132, %subtract.9, %constant.1859)
  %get-tuple-element.445 = f32[126,1024]{1,0} get-tuple-element(%param.45), index=51
  %reshape.2133 = f32[1024]{0} reshape(%dynamic-slice.228)
  %slice.465 = f32[1023]{0} slice(%reshape.2133), slice={[1:1024]}
  %slice.466 = f32[1,1]{1,0} slice(%dynamic-slice.228), slice={[0:1], [0:1]}
  %reshape.2134 = f32[1]{0} reshape(%slice.466)
  %concatenate.139 = f32[1024]{0} concatenate(%slice.465, %reshape.2134), dimensions={0}
  %reshape.2135 = f32[1,1024]{1,0} reshape(%concatenate.139)
  %abs.48 = bf16[1,8192,8,128]{3,2,1,0} abs(%copy.72)
  %reduce.225 = bf16[] reduce(%abs.48, %constant.2472), dimensions={0,1,2,3}, to_apply=%region_96.3047
  %all-reduce.29 = bf16[] all-reduce(%reduce.225), channel_id=47, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_96.3047.clone
  %convert.443 = f32[] convert(%all-reduce.29)
  %reshape.2136 = f32[1,1]{1,0} reshape(%convert.443)
  %dynamic-update-slice.133 = f32[1,1024]{1,0} dynamic-update-slice(%reshape.2135, %reshape.2136, %constant.1859, %constant.1859)
  %dynamic-update-slice.134 = f32[126,1024]{1,0} dynamic-update-slice(%get-tuple-element.445, %dynamic-update-slice.133, %subtract.9, %constant.1859)
  %get-tuple-element.446 = f32[126,1]{1,0} get-tuple-element(%param.45), index=52
  %reshape.2137 = f32[1,1]{1,0} reshape(%divide.427)
  %dynamic-update-slice.135 = f32[126,1]{1,0} dynamic-update-slice(%get-tuple-element.446, %reshape.2137, %subtract.9, %constant.1859)
  ROOT %tuple.111 = (s32[], bf16[1,8192,16384]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,53248,32]{2,1,0}, /*index=5*/f32[126,16384]{1,0}, f32[126,16384]{1,0}, f32[126,32,8,128]{3,2,1,0}, f32[126,128,128,32]{3,2,1,0}, f32[126,32,128,128]{3,2,1,0}, /*index=10*/f32[126,32,8,128]{3,2,1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=15*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=20*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=25*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=30*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=35*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=40*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=45*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=50*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=55*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=60*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=65*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=70*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=75*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=80*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=85*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=90*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=95*/f32[126,32,53248]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,53248,32]{2,1,0}, f32[126,16384]{1,0}, f32[126,16384]{1,0}, /*index=100*/f32[126,32,8,128]{3,2,1,0}, f32[126,128,128,32]{3,2,1,0}, f32[126,32,128,128]{3,2,1,0}, f32[126,32,8,128]{3,2,1,0}, bf16[126,1,8192,16384]{3,2,1,0}, /*index=105*/s32[1,8192]{1,0}, s32[1,8192]{1,0}) tuple(%add.140, %copy.78, %dynamic-update-slice.64, %dynamic-update-slice.65, %dynamic-update-slice.66, /*index=5*/%dynamic-update-slice.67, %dynamic-update-slice.68, %dynamic-update-slice.69, %dynamic-update-slice.70, %dynamic-update-slice.71, /*index=10*/%dynamic-update-slice.72, %dynamic-update-slice.74, %dynamic-update-slice.75, %dynamic-update-slice.77, %dynamic-update-slice.78, /*index=15*/%dynamic-update-slice.80, %dynamic-update-slice.81, %dynamic-update-slice.83, %dynamic-update-slice.84, %dynamic-update-slice.86, /*index=20*/%dynamic-update-slice.87, %dynamic-update-slice.89, %dynamic-update-slice.90, %dynamic-update-slice.92, %dynamic-update-slice.93, /*index=25*/%dynamic-update-slice.95, %dynamic-update-slice.96, %dynamic-update-slice.98, %dynamic-update-slice.99, %dynamic-update-slice.101, /*index=30*/%dynamic-update-slice.102, %dynamic-update-slice.104, %dynamic-update-slice.105, %dynamic-update-slice.107, %dynamic-update-slice.108, /*index=35*/%dynamic-update-slice.110, %dynamic-update-slice.111, %dynamic-update-slice.113, %dynamic-update-slice.114, %dynamic-update-slice.116, /*index=40*/%dynamic-update-slice.117, %dynamic-update-slice.119, %dynamic-update-slice.120, %dynamic-update-slice.122, %dynamic-update-slice.123, /*index=45*/%dynamic-update-slice.125, %dynamic-update-slice.126, %dynamic-update-slice.128, %dynamic-update-slice.129, %dynamic-update-slice.131, /*index=50*/%dynamic-update-slice.132, %dynamic-update-slice.134, %dynamic-update-slice.135, %get-tuple-element.356, %get-tuple-element.357, /*index=55*/%get-tuple-element.359, %get-tuple-element.360, %get-tuple-element.373, %get-tuple-element.374, %get-tuple-element.371, /*index=60*/%get-tuple-element.372, %get-tuple-element.369, %get-tuple-element.370, %get-tuple-element.366, %get-tuple-element.367, /*index=65*/%get-tuple-element.397, %get-tuple-element.398, %get-tuple-element.364, %get-tuple-element.365, %get-tuple-element.361, /*index=70*/%get-tuple-element.362, %get-tuple-element.333, %get-tuple-element.334, %get-tuple-element.336, %get-tuple-element.337, /*index=75*/%get-tuple-element.389, %get-tuple-element.390, %get-tuple-element.350, %get-tuple-element.351, %get-tuple-element.353, /*index=80*/%get-tuple-element.354, %get-tuple-element.377, %get-tuple-element.378, %get-tuple-element.327, %get-tuple-element.328, /*index=85*/%get-tuple-element.330, %get-tuple-element.331, %get-tuple-element.392, %get-tuple-element.393, %get-tuple-element.338, /*index=90*/%get-tuple-element.339, %get-tuple-element.341, %get-tuple-element.342, %get-tuple-element.386, %get-tuple-element.387, /*index=95*/%get-tuple-element.358, %get-tuple-element.368, %get-tuple-element.363, %get-tuple-element.355, %get-tuple-element.326, /*index=100*/%get-tuple-element.335, %get-tuple-element.352, %get-tuple-element.329, %get-tuple-element.340, %get-tuple-element.325, /*index=105*/%get-tuple-element.343, %get-tuple-element.332)
}

%region_108.3507_spmd (param.44: (s32[], bf16[1,8192,16384], f32[126,32,53248], f32[126,32,53248], f32[126,53248,32], /*index=5*/f32[126,16384], f32[126,16384], f32[126,32,8,128], f32[126,128,128,32], f32[126,32,128,128], /*index=10*/f32[126,32,8,128], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=15*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=20*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=25*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=30*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=35*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=40*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=45*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=50*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=55*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=60*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=65*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=70*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=75*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=80*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=85*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=90*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=95*/f32[126,32,53248], f32[126,32,53248], f32[126,53248,32], f32[126,16384], f32[126,16384], /*index=100*/f32[126,32,8,128], f32[126,128,128,32], f32[126,32,128,128], f32[126,32,8,128], bf16[126,1,8192,16384], /*index=105*/s32[1,8192], s32[1,8192])) -> pred[] {
  %param.44 = (s32[], bf16[1,8192,16384]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,53248,32]{2,1,0}, /*index=5*/f32[126,16384]{1,0}, f32[126,16384]{1,0}, f32[126,32,8,128]{3,2,1,0}, f32[126,128,128,32]{3,2,1,0}, f32[126,32,128,128]{3,2,1,0}, /*index=10*/f32[126,32,8,128]{3,2,1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=15*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=20*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=25*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=30*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=35*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=40*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=45*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=50*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=55*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=60*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=65*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=70*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=75*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=80*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=85*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=90*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=95*/f32[126,32,53248]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,53248,32]{2,1,0}, f32[126,16384]{1,0}, f32[126,16384]{1,0}, /*index=100*/f32[126,32,8,128]{3,2,1,0}, f32[126,128,128,32]{3,2,1,0}, f32[126,32,128,128]{3,2,1,0}, f32[126,32,8,128]{3,2,1,0}, bf16[126,1,8192,16384]{3,2,1,0}, /*index=105*/s32[1,8192]{1,0}, s32[1,8192]{1,0}) parameter(0)
  %get-tuple-element.322 = s32[] get-tuple-element(%param.44), index=0
  %constant.1835 = s32[] constant(126)
  ROOT %compare.256 = pred[] compare(%get-tuple-element.322, %constant.1835), direction=LT
}

%region_27.1411 (Arg_0.1408: bf16[], Arg_1.1409: bf16[]) -> bf16[] {
  %Arg_0.1408 = bf16[] parameter(0)
  %Arg_1.1409 = bf16[] parameter(1)
  ROOT %add.1410 = bf16[] add(%Arg_0.1408, %Arg_1.1409)
}

%region_27.1411.clone (Arg_0.150: bf16[], Arg_1.131: bf16[]) -> bf16[] {
  %Arg_0.150 = bf16[] parameter(0)
  %Arg_1.131 = bf16[] parameter(1)
  ROOT %add.192 = bf16[] add(%Arg_0.150, %Arg_1.131)
}

%region_109.3580 (Arg_0.3577: f32[], Arg_1.3578: f32[]) -> f32[] {
  %Arg_0.3577 = f32[] parameter(0)
  %Arg_1.3578 = f32[] parameter(1)
  ROOT %add.3579 = f32[] add(%Arg_0.3577, %Arg_1.3578)
}

%region_110.3586 (Arg_0.3583: f32[], Arg_1.3584: f32[]) -> f32[] {
  %Arg_0.3583 = f32[] parameter(0)
  %Arg_1.3584 = f32[] parameter(1)
  ROOT %add.3585 = f32[] add(%Arg_0.3583, %Arg_1.3584)
}

%region_110.3586.clone (Arg_0.151: f32[], Arg_1.132: f32[]) -> f32[] {
  %Arg_0.151 = f32[] parameter(0)
  %Arg_1.132 = f32[] parameter(1)
  ROOT %add.194 = f32[] add(%Arg_0.151, %Arg_1.132)
}

%region_111.3593 (Arg_0.3590: f32[], Arg_1.3591: f32[]) -> f32[] {
  %Arg_0.3590 = f32[] parameter(0)
  %Arg_1.3591 = f32[] parameter(1)
  ROOT %add.3592 = f32[] add(%Arg_0.3590, %Arg_1.3591)
}

%region_111.3593.clone (Arg_0.152: f32[], Arg_1.133: f32[]) -> f32[] {
  %Arg_0.152 = f32[] parameter(0)
  %Arg_1.133 = f32[] parameter(1)
  ROOT %add.195 = f32[] add(%Arg_0.152, %Arg_1.133)
}

%region_112.3600 (Arg_0.3597: f32[], Arg_1.3598: f32[]) -> f32[] {
  %Arg_0.3597 = f32[] parameter(0)
  %Arg_1.3598 = f32[] parameter(1)
  ROOT %add.3599 = f32[] add(%Arg_0.3597, %Arg_1.3598)
}

%region_112.3600.clone (Arg_0.153: f32[], Arg_1.134: f32[]) -> f32[] {
  %Arg_0.153 = f32[] parameter(0)
  %Arg_1.134 = f32[] parameter(1)
  ROOT %add.198 = f32[] add(%Arg_0.153, %Arg_1.134)
}

%region_113.3607 (Arg_0.3604: f32[], Arg_1.3605: f32[]) -> f32[] {
  %Arg_0.3604 = f32[] parameter(0)
  %Arg_1.3605 = f32[] parameter(1)
  ROOT %add.3606 = f32[] add(%Arg_0.3604, %Arg_1.3605)
}

%region_114.3614 (Arg_0.3611: f32[], Arg_1.3612: f32[]) -> f32[] {
  %Arg_0.3611 = f32[] parameter(0)
  %Arg_1.3612 = f32[] parameter(1)
  ROOT %add.3613 = f32[] add(%Arg_0.3611, %Arg_1.3612)
}

%region_115.3621 (Arg_0.3618: f32[], Arg_1.3619: f32[]) -> f32[] {
  %Arg_0.3618 = f32[] parameter(0)
  %Arg_1.3619 = f32[] parameter(1)
  ROOT %add.3620 = f32[] add(%Arg_0.3618, %Arg_1.3619)
}

%region_115.3621.clone (Arg_0.154: f32[], Arg_1.135: f32[]) -> f32[] {
  %Arg_0.154 = f32[] parameter(0)
  %Arg_1.135 = f32[] parameter(1)
  ROOT %add.199 = f32[] add(%Arg_0.154, %Arg_1.135)
}

%region_116.3628 (Arg_0.3625: f32[], Arg_1.3626: f32[]) -> f32[] {
  %Arg_0.3625 = f32[] parameter(0)
  %Arg_1.3626 = f32[] parameter(1)
  ROOT %add.3627 = f32[] add(%Arg_0.3625, %Arg_1.3626)
}

%region_116.3628.clone (Arg_0.155: f32[], Arg_1.136: f32[]) -> f32[] {
  %Arg_0.155 = f32[] parameter(0)
  %Arg_1.136 = f32[] parameter(1)
  ROOT %add.201 = f32[] add(%Arg_0.155, %Arg_1.136)
}

%region_117.3635 (Arg_0.3632: f32[], Arg_1.3633: f32[]) -> f32[] {
  %Arg_0.3632 = f32[] parameter(0)
  %Arg_1.3633 = f32[] parameter(1)
  ROOT %add.3634 = f32[] add(%Arg_0.3632, %Arg_1.3633)
}

%region_117.3635.clone (Arg_0.156: f32[], Arg_1.137: f32[]) -> f32[] {
  %Arg_0.156 = f32[] parameter(0)
  %Arg_1.137 = f32[] parameter(1)
  ROOT %add.202 = f32[] add(%Arg_0.156, %Arg_1.137)
}

%region_118.3642 (Arg_0.3639: f32[], Arg_1.3640: f32[]) -> f32[] {
  %Arg_0.3639 = f32[] parameter(0)
  %Arg_1.3640 = f32[] parameter(1)
  ROOT %add.3641 = f32[] add(%Arg_0.3639, %Arg_1.3640)
}

%region_118.3642.clone (Arg_0.157: f32[], Arg_1.138: f32[]) -> f32[] {
  %Arg_0.157 = f32[] parameter(0)
  %Arg_1.138 = f32[] parameter(1)
  ROOT %add.203 = f32[] add(%Arg_0.157, %Arg_1.138)
}

%add.7.clone (x.15: bf16[], y.15: bf16[]) -> bf16[] {
  %x.15 = bf16[] parameter(0)
  %y.15 = bf16[] parameter(1)
  ROOT %add.205 = bf16[] add(%x.15, %y.15)
}

%region_119.3649 (Arg_0.3646: f32[], Arg_1.3647: f32[]) -> f32[] {
  %Arg_0.3646 = f32[] parameter(0)
  %Arg_1.3647 = f32[] parameter(1)
  ROOT %add.3648 = f32[] add(%Arg_0.3646, %Arg_1.3647)
}

%region_119.3649.clone (Arg_0.158: f32[], Arg_1.139: f32[]) -> f32[] {
  %Arg_0.158 = f32[] parameter(0)
  %Arg_1.139 = f32[] parameter(1)
  ROOT %add.206 = f32[] add(%Arg_0.158, %Arg_1.139)
}

%add.8.clone (x.17: bf16[], y.17: bf16[]) -> bf16[] {
  %x.17 = bf16[] parameter(0)
  %y.17 = bf16[] parameter(1)
  ROOT %add.209 = bf16[] add(%x.17, %y.17)
}

%region_120.3656 (Arg_0.3653: f32[], Arg_1.3654: f32[]) -> f32[] {
  %Arg_0.3653 = f32[] parameter(0)
  %Arg_1.3654 = f32[] parameter(1)
  ROOT %add.3655 = f32[] add(%Arg_0.3653, %Arg_1.3654)
}

%region_120.3656.clone (Arg_0.159: f32[], Arg_1.140: f32[]) -> f32[] {
  %Arg_0.159 = f32[] parameter(0)
  %Arg_1.140 = f32[] parameter(1)
  ROOT %add.211 = f32[] add(%Arg_0.159, %Arg_1.140)
}

%region_121.3991 (Arg_0.3988: f32[], Arg_1.3989: f32[]) -> f32[] {
  %Arg_0.3988 = f32[] parameter(0)
  %Arg_1.3989 = f32[] parameter(1)
  ROOT %add.3990 = f32[] add(%Arg_0.3988, %Arg_1.3989)
}

%region_122.3997 (Arg_0.3994: f32[], Arg_1.3995: f32[]) -> f32[] {
  %Arg_0.3994 = f32[] parameter(0)
  %Arg_1.3995 = f32[] parameter(1)
  ROOT %add.3996 = f32[] add(%Arg_0.3994, %Arg_1.3995)
}

%region_123.4004 (Arg_0.4001: f32[], Arg_1.4002: f32[]) -> f32[] {
  %Arg_0.4001 = f32[] parameter(0)
  %Arg_1.4002 = f32[] parameter(1)
  ROOT %add.4003 = f32[] add(%Arg_0.4001, %Arg_1.4002)
}

%region_124.4011 (Arg_0.4008: f32[], Arg_1.4009: f32[]) -> f32[] {
  %Arg_0.4008 = f32[] parameter(0)
  %Arg_1.4009 = f32[] parameter(1)
  ROOT %add.4010 = f32[] add(%Arg_0.4008, %Arg_1.4009)
}

%region_125.4018 (Arg_0.4015: f32[], Arg_1.4016: f32[]) -> f32[] {
  %Arg_0.4015 = f32[] parameter(0)
  %Arg_1.4016 = f32[] parameter(1)
  ROOT %add.4017 = f32[] add(%Arg_0.4015, %Arg_1.4016)
}

%region_126.4025 (Arg_0.4022: f32[], Arg_1.4023: f32[]) -> f32[] {
  %Arg_0.4022 = f32[] parameter(0)
  %Arg_1.4023 = f32[] parameter(1)
  ROOT %add.4024 = f32[] add(%Arg_0.4022, %Arg_1.4023)
}

%region_127.4032 (Arg_0.4029: f32[], Arg_1.4030: f32[]) -> f32[] {
  %Arg_0.4029 = f32[] parameter(0)
  %Arg_1.4030 = f32[] parameter(1)
  ROOT %add.4031 = f32[] add(%Arg_0.4029, %Arg_1.4030)
}

%region_128.4039 (Arg_0.4036: f32[], Arg_1.4037: f32[]) -> f32[] {
  %Arg_0.4036 = f32[] parameter(0)
  %Arg_1.4037 = f32[] parameter(1)
  ROOT %add.4038 = f32[] add(%Arg_0.4036, %Arg_1.4037)
}

%region_129.4046 (Arg_0.4043: f32[], Arg_1.4044: f32[]) -> f32[] {
  %Arg_0.4043 = f32[] parameter(0)
  %Arg_1.4044 = f32[] parameter(1)
  ROOT %add.4045 = f32[] add(%Arg_0.4043, %Arg_1.4044)
}

%region_130.4053 (Arg_0.4050: f32[], Arg_1.4051: f32[]) -> f32[] {
  %Arg_0.4050 = f32[] parameter(0)
  %Arg_1.4051 = f32[] parameter(1)
  ROOT %add.4052 = f32[] add(%Arg_0.4050, %Arg_1.4051)
}

%region_131.4060 (Arg_0.4057: f32[], Arg_1.4058: f32[]) -> f32[] {
  %Arg_0.4057 = f32[] parameter(0)
  %Arg_1.4058 = f32[] parameter(1)
  ROOT %add.4059 = f32[] add(%Arg_0.4057, %Arg_1.4058)
}

%region_132.4067 (Arg_0.4064: f32[], Arg_1.4065: f32[]) -> f32[] {
  %Arg_0.4064 = f32[] parameter(0)
  %Arg_1.4065 = f32[] parameter(1)
  ROOT %add.4066 = f32[] add(%Arg_0.4064, %Arg_1.4065)
}

%region_133.4074 (Arg_0.4071: f32[], Arg_1.4072: f32[]) -> f32[] {
  %Arg_0.4071 = f32[] parameter(0)
  %Arg_1.4072 = f32[] parameter(1)
  ROOT %add.4073 = f32[] add(%Arg_0.4071, %Arg_1.4072)
}

%region_134.4081 (Arg_0.4078: f32[], Arg_1.4079: f32[]) -> f32[] {
  %Arg_0.4078 = f32[] parameter(0)
  %Arg_1.4079 = f32[] parameter(1)
  ROOT %add.4080 = f32[] add(%Arg_0.4078, %Arg_1.4079)
}

%region_135.4088 (Arg_0.4085: f32[], Arg_1.4086: f32[]) -> f32[] {
  %Arg_0.4085 = f32[] parameter(0)
  %Arg_1.4086 = f32[] parameter(1)
  ROOT %add.4087 = f32[] add(%Arg_0.4085, %Arg_1.4086)
}

%region_136.4095 (Arg_0.4092: f32[], Arg_1.4093: f32[]) -> f32[] {
  %Arg_0.4092 = f32[] parameter(0)
  %Arg_1.4093 = f32[] parameter(1)
  ROOT %add.4094 = f32[] add(%Arg_0.4092, %Arg_1.4093)
}

%region_137.4102 (Arg_0.4099: f32[], Arg_1.4100: f32[]) -> f32[] {
  %Arg_0.4099 = f32[] parameter(0)
  %Arg_1.4100 = f32[] parameter(1)
  ROOT %add.4101 = f32[] add(%Arg_0.4099, %Arg_1.4100)
}

%region_138.4109 (Arg_0.4106: f32[], Arg_1.4107: f32[]) -> f32[] {
  %Arg_0.4106 = f32[] parameter(0)
  %Arg_1.4107 = f32[] parameter(1)
  ROOT %add.4108 = f32[] add(%Arg_0.4106, %Arg_1.4107)
}

%region_139.4116 (Arg_0.4113: f32[], Arg_1.4114: f32[]) -> f32[] {
  %Arg_0.4113 = f32[] parameter(0)
  %Arg_1.4114 = f32[] parameter(1)
  ROOT %add.4115 = f32[] add(%Arg_0.4113, %Arg_1.4114)
}

%region_140.4123 (Arg_0.4120: f32[], Arg_1.4121: f32[]) -> f32[] {
  %Arg_0.4120 = f32[] parameter(0)
  %Arg_1.4121 = f32[] parameter(1)
  ROOT %add.4122 = f32[] add(%Arg_0.4120, %Arg_1.4121)
}

%region_141.4130 (Arg_0.4127: f32[], Arg_1.4128: f32[]) -> f32[] {
  %Arg_0.4127 = f32[] parameter(0)
  %Arg_1.4128 = f32[] parameter(1)
  ROOT %add.4129 = f32[] add(%Arg_0.4127, %Arg_1.4128)
}

%region_142.4137 (Arg_0.4134: f32[], Arg_1.4135: f32[]) -> f32[] {
  %Arg_0.4134 = f32[] parameter(0)
  %Arg_1.4135 = f32[] parameter(1)
  ROOT %add.4136 = f32[] add(%Arg_0.4134, %Arg_1.4135)
}

%region_143.4144 (Arg_0.4141: f32[], Arg_1.4142: f32[]) -> f32[] {
  %Arg_0.4141 = f32[] parameter(0)
  %Arg_1.4142 = f32[] parameter(1)
  ROOT %add.4143 = f32[] add(%Arg_0.4141, %Arg_1.4142)
}

%region_144.4151 (Arg_0.4148: f32[], Arg_1.4149: f32[]) -> f32[] {
  %Arg_0.4148 = f32[] parameter(0)
  %Arg_1.4149 = f32[] parameter(1)
  ROOT %add.4150 = f32[] add(%Arg_0.4148, %Arg_1.4149)
}

%region_145.4158 (Arg_0.4155: f32[], Arg_1.4156: f32[]) -> f32[] {
  %Arg_0.4155 = f32[] parameter(0)
  %Arg_1.4156 = f32[] parameter(1)
  ROOT %add.4157 = f32[] add(%Arg_0.4155, %Arg_1.4156)
}

%region_146.4165 (Arg_0.4162: f32[], Arg_1.4163: f32[]) -> f32[] {
  %Arg_0.4162 = f32[] parameter(0)
  %Arg_1.4163 = f32[] parameter(1)
  ROOT %add.4164 = f32[] add(%Arg_0.4162, %Arg_1.4163)
}

%region_147.4172 (Arg_0.4169: f32[], Arg_1.4170: f32[]) -> f32[] {
  %Arg_0.4169 = f32[] parameter(0)
  %Arg_1.4170 = f32[] parameter(1)
  ROOT %add.4171 = f32[] add(%Arg_0.4169, %Arg_1.4170)
}

%region_148.4179 (Arg_0.4176: f32[], Arg_1.4177: f32[]) -> f32[] {
  %Arg_0.4176 = f32[] parameter(0)
  %Arg_1.4177 = f32[] parameter(1)
  ROOT %add.4178 = f32[] add(%Arg_0.4176, %Arg_1.4177)
}

%region_149.4186 (Arg_0.4183: f32[], Arg_1.4184: f32[]) -> f32[] {
  %Arg_0.4183 = f32[] parameter(0)
  %Arg_1.4184 = f32[] parameter(1)
  ROOT %add.4185 = f32[] add(%Arg_0.4183, %Arg_1.4184)
}

%region_150.4193 (Arg_0.4190: f32[], Arg_1.4191: f32[]) -> f32[] {
  %Arg_0.4190 = f32[] parameter(0)
  %Arg_1.4191 = f32[] parameter(1)
  ROOT %add.4192 = f32[] add(%Arg_0.4190, %Arg_1.4191)
}

%region_151.4200 (Arg_0.4197: f32[], Arg_1.4198: f32[]) -> f32[] {
  %Arg_0.4197 = f32[] parameter(0)
  %Arg_1.4198 = f32[] parameter(1)
  ROOT %add.4199 = f32[] add(%Arg_0.4197, %Arg_1.4198)
}

%region_152.4207 (Arg_0.4204: f32[], Arg_1.4205: f32[]) -> f32[] {
  %Arg_0.4204 = f32[] parameter(0)
  %Arg_1.4205 = f32[] parameter(1)
  ROOT %add.4206 = f32[] add(%Arg_0.4204, %Arg_1.4205)
}

%region_153.4214 (Arg_0.4211: f32[], Arg_1.4212: f32[]) -> f32[] {
  %Arg_0.4211 = f32[] parameter(0)
  %Arg_1.4212 = f32[] parameter(1)
  ROOT %add.4213 = f32[] add(%Arg_0.4211, %Arg_1.4212)
}

%region_154.4221 (Arg_0.4218: f32[], Arg_1.4219: f32[]) -> f32[] {
  %Arg_0.4218 = f32[] parameter(0)
  %Arg_1.4219 = f32[] parameter(1)
  ROOT %add.4220 = f32[] add(%Arg_0.4218, %Arg_1.4219)
}

%region_155.4228 (Arg_0.4225: f32[], Arg_1.4226: f32[]) -> f32[] {
  %Arg_0.4225 = f32[] parameter(0)
  %Arg_1.4226 = f32[] parameter(1)
  ROOT %add.4227 = f32[] add(%Arg_0.4225, %Arg_1.4226)
}

%region_156.4235 (Arg_0.4232: f32[], Arg_1.4233: f32[]) -> f32[] {
  %Arg_0.4232 = f32[] parameter(0)
  %Arg_1.4233 = f32[] parameter(1)
  ROOT %add.4234 = f32[] add(%Arg_0.4232, %Arg_1.4233)
}

%region_157.4242 (Arg_0.4239: f32[], Arg_1.4240: f32[]) -> f32[] {
  %Arg_0.4239 = f32[] parameter(0)
  %Arg_1.4240 = f32[] parameter(1)
  ROOT %add.4241 = f32[] add(%Arg_0.4239, %Arg_1.4240)
}

%region_158.4249 (Arg_0.4246: f32[], Arg_1.4247: f32[]) -> f32[] {
  %Arg_0.4246 = f32[] parameter(0)
  %Arg_1.4247 = f32[] parameter(1)
  ROOT %add.4248 = f32[] add(%Arg_0.4246, %Arg_1.4247)
}

%region_159.4256 (Arg_0.4253: f32[], Arg_1.4254: f32[]) -> f32[] {
  %Arg_0.4253 = f32[] parameter(0)
  %Arg_1.4254 = f32[] parameter(1)
  ROOT %add.4255 = f32[] add(%Arg_0.4253, %Arg_1.4254)
}

%region_160.4263 (Arg_0.4260: f32[], Arg_1.4261: f32[]) -> f32[] {
  %Arg_0.4260 = f32[] parameter(0)
  %Arg_1.4261 = f32[] parameter(1)
  ROOT %add.4262 = f32[] add(%Arg_0.4260, %Arg_1.4261)
}

%region_161.4270 (Arg_0.4267: f32[], Arg_1.4268: f32[]) -> f32[] {
  %Arg_0.4267 = f32[] parameter(0)
  %Arg_1.4268 = f32[] parameter(1)
  ROOT %add.4269 = f32[] add(%Arg_0.4267, %Arg_1.4268)
}

%region_162.4277 (Arg_0.4274: f32[], Arg_1.4275: f32[]) -> f32[] {
  %Arg_0.4274 = f32[] parameter(0)
  %Arg_1.4275 = f32[] parameter(1)
  ROOT %add.4276 = f32[] add(%Arg_0.4274, %Arg_1.4275)
}

%region_163.4284 (Arg_0.4281: f32[], Arg_1.4282: f32[]) -> f32[] {
  %Arg_0.4281 = f32[] parameter(0)
  %Arg_1.4282 = f32[] parameter(1)
  ROOT %add.4283 = f32[] add(%Arg_0.4281, %Arg_1.4282)
}

%region_164.4291 (Arg_0.4288: f32[], Arg_1.4289: f32[]) -> f32[] {
  %Arg_0.4288 = f32[] parameter(0)
  %Arg_1.4289 = f32[] parameter(1)
  ROOT %add.4290 = f32[] add(%Arg_0.4288, %Arg_1.4289)
}

%region_164.4291.clone (Arg_0.160: f32[], Arg_1.141: f32[]) -> f32[] {
  %Arg_0.160 = f32[] parameter(0)
  %Arg_1.141 = f32[] parameter(1)
  ROOT %add.213 = f32[] add(%Arg_0.160, %Arg_1.141)
}

%region_165.4298 (Arg_0.4295: f32[], Arg_1.4296: f32[]) -> f32[] {
  %Arg_0.4295 = f32[] parameter(0)
  %Arg_1.4296 = f32[] parameter(1)
  ROOT %add.4297 = f32[] add(%Arg_0.4295, %Arg_1.4296)
}

%region_165.4298.clone (Arg_0.161: f32[], Arg_1.142: f32[]) -> f32[] {
  %Arg_0.161 = f32[] parameter(0)
  %Arg_1.142 = f32[] parameter(1)
  ROOT %add.214 = f32[] add(%Arg_0.161, %Arg_1.142)
}

%region_166.4305 (Arg_0.4302: f32[], Arg_1.4303: f32[]) -> f32[] {
  %Arg_0.4302 = f32[] parameter(0)
  %Arg_1.4303 = f32[] parameter(1)
  ROOT %add.4304 = f32[] add(%Arg_0.4302, %Arg_1.4303)
}

%region_166.4305.clone (Arg_0.162: f32[], Arg_1.143: f32[]) -> f32[] {
  %Arg_0.162 = f32[] parameter(0)
  %Arg_1.143 = f32[] parameter(1)
  ROOT %add.216 = f32[] add(%Arg_0.162, %Arg_1.143)
}

%region_167.4312 (Arg_0.4309: f32[], Arg_1.4310: f32[]) -> f32[] {
  %Arg_0.4309 = f32[] parameter(0)
  %Arg_1.4310 = f32[] parameter(1)
  ROOT %add.4311 = f32[] add(%Arg_0.4309, %Arg_1.4310)
}

%region_168.4319 (Arg_0.4316: f32[], Arg_1.4317: f32[]) -> f32[] {
  %Arg_0.4316 = f32[] parameter(0)
  %Arg_1.4317 = f32[] parameter(1)
  ROOT %add.4318 = f32[] add(%Arg_0.4316, %Arg_1.4317)
}

%region_169.4326 (Arg_0.4323: f32[], Arg_1.4324: f32[]) -> f32[] {
  %Arg_0.4323 = f32[] parameter(0)
  %Arg_1.4324 = f32[] parameter(1)
  ROOT %add.4325 = f32[] add(%Arg_0.4323, %Arg_1.4324)
}

%region_169.4326.clone (Arg_0.163: f32[], Arg_1.144: f32[]) -> f32[] {
  %Arg_0.163 = f32[] parameter(0)
  %Arg_1.144 = f32[] parameter(1)
  ROOT %add.217 = f32[] add(%Arg_0.163, %Arg_1.144)
}

%region_170.4333 (Arg_0.4330: f32[], Arg_1.4331: f32[]) -> f32[] {
  %Arg_0.4330 = f32[] parameter(0)
  %Arg_1.4331 = f32[] parameter(1)
  ROOT %add.4332 = f32[] add(%Arg_0.4330, %Arg_1.4331)
}

%region_170.4333.clone (Arg_0.164: f32[], Arg_1.145: f32[]) -> f32[] {
  %Arg_0.164 = f32[] parameter(0)
  %Arg_1.145 = f32[] parameter(1)
  ROOT %add.218 = f32[] add(%Arg_0.164, %Arg_1.145)
}

%region_171.4340 (Arg_0.4337: f32[], Arg_1.4338: f32[]) -> f32[] {
  %Arg_0.4337 = f32[] parameter(0)
  %Arg_1.4338 = f32[] parameter(1)
  ROOT %add.4339 = f32[] add(%Arg_0.4337, %Arg_1.4338)
}

%region_171.4340.clone (Arg_0.165: f32[], Arg_1.146: f32[]) -> f32[] {
  %Arg_0.165 = f32[] parameter(0)
  %Arg_1.146 = f32[] parameter(1)
  ROOT %add.220 = f32[] add(%Arg_0.165, %Arg_1.146)
}

%region_172.4347 (Arg_0.4344: f32[], Arg_1.4345: f32[]) -> f32[] {
  %Arg_0.4344 = f32[] parameter(0)
  %Arg_1.4345 = f32[] parameter(1)
  ROOT %add.4346 = f32[] add(%Arg_0.4344, %Arg_1.4345)
}

%region_172.4347.clone (Arg_0.166: f32[], Arg_1.147: f32[]) -> f32[] {
  %Arg_0.166 = f32[] parameter(0)
  %Arg_1.147 = f32[] parameter(1)
  ROOT %add.221 = f32[] add(%Arg_0.166, %Arg_1.147)
}

%region_173.4354 (Arg_0.4351: f32[], Arg_1.4352: f32[]) -> f32[] {
  %Arg_0.4351 = f32[] parameter(0)
  %Arg_1.4352 = f32[] parameter(1)
  ROOT %add.4353 = f32[] add(%Arg_0.4351, %Arg_1.4352)
}

%region_173.4354.clone (Arg_0.167: f32[], Arg_1.148: f32[]) -> f32[] {
  %Arg_0.167 = f32[] parameter(0)
  %Arg_1.148 = f32[] parameter(1)
  ROOT %add.223 = f32[] add(%Arg_0.167, %Arg_1.148)
}

%region_174.4361 (Arg_0.4358: f32[], Arg_1.4359: f32[]) -> f32[] {
  %Arg_0.4358 = f32[] parameter(0)
  %Arg_1.4359 = f32[] parameter(1)
  ROOT %add.4360 = f32[] add(%Arg_0.4358, %Arg_1.4359)
}

%region_174.4361.clone (Arg_0.169: f32[], Arg_1.149: f32[]) -> f32[] {
  %Arg_0.169 = f32[] parameter(0)
  %Arg_1.149 = f32[] parameter(1)
  ROOT %add.224 = f32[] add(%Arg_0.169, %Arg_1.149)
}

%region_24.1352 (Arg_0.1349: f32[], Arg_1.1350: f32[]) -> f32[] {
  %Arg_0.1349 = f32[] parameter(0)
  %Arg_1.1350 = f32[] parameter(1)
  ROOT %add.1351 = f32[] add(%Arg_0.1349, %Arg_1.1350)
}

%region_25.1368 (Arg_0.1365: f32[], Arg_1.1366: f32[]) -> f32[] {
  %Arg_0.1365 = f32[] parameter(0)
  %Arg_1.1366 = f32[] parameter(1)
  ROOT %add.1367 = f32[] add(%Arg_0.1365, %Arg_1.1366)
}

%region_25.1368.clone (Arg_0.170: f32[], Arg_1.150: f32[]) -> f32[] {
  %Arg_0.170 = f32[] parameter(0)
  %Arg_1.150 = f32[] parameter(1)
  ROOT %add.225 = f32[] add(%Arg_0.170, %Arg_1.150)
}

%region_271.5040 (Arg_0.5037: f32[], Arg_1.5038: f32[]) -> f32[] {
  %Arg_0.5037 = f32[] parameter(0)
  %Arg_1.5038 = f32[] parameter(1)
  ROOT %add.5039 = f32[] add(%Arg_0.5037, %Arg_1.5038)
}

%region_272.5047 (Arg_0.5044: f32[], Arg_1.5045: f32[]) -> f32[] {
  %Arg_0.5044 = f32[] parameter(0)
  %Arg_1.5045 = f32[] parameter(1)
  ROOT %add.5046 = f32[] add(%Arg_0.5044, %Arg_1.5045)
}

%region_272.5047.clone (Arg_0.172: f32[], Arg_1.151: f32[]) -> f32[] {
  %Arg_0.172 = f32[] parameter(0)
  %Arg_1.151 = f32[] parameter(1)
  ROOT %add.226 = f32[] add(%Arg_0.172, %Arg_1.151)
}

%region_273.5054 (Arg_0.5051: f32[], Arg_1.5052: f32[]) -> f32[] {
  %Arg_0.5051 = f32[] parameter(0)
  %Arg_1.5052 = f32[] parameter(1)
  ROOT %add.5053 = f32[] add(%Arg_0.5051, %Arg_1.5052)
}

%region_273.5054.clone (Arg_0.173: f32[], Arg_1.152: f32[]) -> f32[] {
  %Arg_0.173 = f32[] parameter(0)
  %Arg_1.152 = f32[] parameter(1)
  ROOT %add.228 = f32[] add(%Arg_0.173, %Arg_1.152)
}

%region_274.5061 (Arg_0.5058: f32[], Arg_1.5059: f32[]) -> f32[] {
  %Arg_0.5058 = f32[] parameter(0)
  %Arg_1.5059 = f32[] parameter(1)
  ROOT %add.5060 = f32[] add(%Arg_0.5058, %Arg_1.5059)
}

%region_274.5061.clone (Arg_0.174: f32[], Arg_1.153: f32[]) -> f32[] {
  %Arg_0.174 = f32[] parameter(0)
  %Arg_1.153 = f32[] parameter(1)
  ROOT %add.229 = f32[] add(%Arg_0.174, %Arg_1.153)
}

%region_275.5068 (Arg_0.5065: f32[], Arg_1.5066: f32[]) -> f32[] {
  %Arg_0.5065 = f32[] parameter(0)
  %Arg_1.5066 = f32[] parameter(1)
  ROOT %add.5067 = f32[] add(%Arg_0.5065, %Arg_1.5066)
}

%region_276.5075 (Arg_0.5072: f32[], Arg_1.5073: f32[]) -> f32[] {
  %Arg_0.5072 = f32[] parameter(0)
  %Arg_1.5073 = f32[] parameter(1)
  ROOT %add.5074 = f32[] add(%Arg_0.5072, %Arg_1.5073)
}

%region_277.5082 (Arg_0.5079: f32[], Arg_1.5080: f32[]) -> f32[] {
  %Arg_0.5079 = f32[] parameter(0)
  %Arg_1.5080 = f32[] parameter(1)
  ROOT %add.5081 = f32[] add(%Arg_0.5079, %Arg_1.5080)
}

%region_277.5082.clone (Arg_0.175: f32[], Arg_1.154: f32[]) -> f32[] {
  %Arg_0.175 = f32[] parameter(0)
  %Arg_1.154 = f32[] parameter(1)
  ROOT %add.231 = f32[] add(%Arg_0.175, %Arg_1.154)
}

%region_278.5089 (Arg_0.5086: f32[], Arg_1.5087: f32[]) -> f32[] {
  %Arg_0.5086 = f32[] parameter(0)
  %Arg_1.5087 = f32[] parameter(1)
  ROOT %add.5088 = f32[] add(%Arg_0.5086, %Arg_1.5087)
}

%region_278.5089.clone (Arg_0.177: f32[], Arg_1.155: f32[]) -> f32[] {
  %Arg_0.177 = f32[] parameter(0)
  %Arg_1.155 = f32[] parameter(1)
  ROOT %add.232 = f32[] add(%Arg_0.177, %Arg_1.155)
}

%region_279.5096 (Arg_0.5093: f32[], Arg_1.5094: f32[]) -> f32[] {
  %Arg_0.5093 = f32[] parameter(0)
  %Arg_1.5094 = f32[] parameter(1)
  ROOT %add.5095 = f32[] add(%Arg_0.5093, %Arg_1.5094)
}

%region_279.5096.clone (Arg_0.178: f32[], Arg_1.156: f32[]) -> f32[] {
  %Arg_0.178 = f32[] parameter(0)
  %Arg_1.156 = f32[] parameter(1)
  ROOT %add.233 = f32[] add(%Arg_0.178, %Arg_1.156)
}

%region_280.5103 (Arg_0.5100: f32[], Arg_1.5101: f32[]) -> f32[] {
  %Arg_0.5100 = f32[] parameter(0)
  %Arg_1.5101 = f32[] parameter(1)
  ROOT %add.5102 = f32[] add(%Arg_0.5100, %Arg_1.5101)
}

%region_280.5103.clone (Arg_0.180: f32[], Arg_1.157: f32[]) -> f32[] {
  %Arg_0.180 = f32[] parameter(0)
  %Arg_1.157 = f32[] parameter(1)
  ROOT %add.234 = f32[] add(%Arg_0.180, %Arg_1.157)
}

%region_281.5110 (Arg_0.5107: f32[], Arg_1.5108: f32[]) -> f32[] {
  %Arg_0.5107 = f32[] parameter(0)
  %Arg_1.5108 = f32[] parameter(1)
  ROOT %add.5109 = f32[] add(%Arg_0.5107, %Arg_1.5108)
}

%region_281.5110.clone (Arg_0.181: f32[], Arg_1.158: f32[]) -> f32[] {
  %Arg_0.181 = f32[] parameter(0)
  %Arg_1.158 = f32[] parameter(1)
  ROOT %add.235 = f32[] add(%Arg_0.181, %Arg_1.158)
}

%region_282.5117 (Arg_0.5114: f32[], Arg_1.5115: f32[]) -> f32[] {
  %Arg_0.5114 = f32[] parameter(0)
  %Arg_1.5115 = f32[] parameter(1)
  ROOT %add.5116 = f32[] add(%Arg_0.5114, %Arg_1.5115)
}

%region_282.5117.clone (Arg_0.182: f32[], Arg_1.159: f32[]) -> f32[] {
  %Arg_0.182 = f32[] parameter(0)
  %Arg_1.159 = f32[] parameter(1)
  ROOT %add.236 = f32[] add(%Arg_0.182, %Arg_1.159)
}

%region_218.4669.clone (Arg_0.183: f32[], Arg_1.160: f32[]) -> f32[] {
  %Arg_0.183 = f32[] parameter(0)
  %Arg_1.160 = f32[] parameter(1)
  ROOT %add.237 = f32[] add(%Arg_0.183, %Arg_1.160)
}

%region_219.4676.clone (Arg_0.184: f32[], Arg_1.161: f32[]) -> f32[] {
  %Arg_0.184 = f32[] parameter(0)
  %Arg_1.161 = f32[] parameter(1)
  ROOT %add.238 = f32[] add(%Arg_0.184, %Arg_1.161)
}

%region_220.4683.clone (Arg_0.185: f32[], Arg_1.162: f32[]) -> f32[] {
  %Arg_0.185 = f32[] parameter(0)
  %Arg_1.162 = f32[] parameter(1)
  ROOT %add.239 = f32[] add(%Arg_0.185, %Arg_1.162)
}

%region_223.4704.clone (Arg_0.186: f32[], Arg_1.163: f32[]) -> f32[] {
  %Arg_0.186 = f32[] parameter(0)
  %Arg_1.163 = f32[] parameter(1)
  ROOT %add.240 = f32[] add(%Arg_0.186, %Arg_1.163)
}

%region_224.4711.clone (Arg_0.187: f32[], Arg_1.164: f32[]) -> f32[] {
  %Arg_0.187 = f32[] parameter(0)
  %Arg_1.164 = f32[] parameter(1)
  ROOT %add.241 = f32[] add(%Arg_0.187, %Arg_1.164)
}

%region_225.4718.clone (Arg_0.188: f32[], Arg_1.165: f32[]) -> f32[] {
  %Arg_0.188 = f32[] parameter(0)
  %Arg_1.165 = f32[] parameter(1)
  ROOT %add.242 = f32[] add(%Arg_0.188, %Arg_1.165)
}

%region_226.4725.clone (Arg_0.189: f32[], Arg_1.166: f32[]) -> f32[] {
  %Arg_0.189 = f32[] parameter(0)
  %Arg_1.166 = f32[] parameter(1)
  ROOT %add.243 = f32[] add(%Arg_0.189, %Arg_1.166)
}

%region_227.4732.clone (Arg_0.190: f32[], Arg_1.167: f32[]) -> f32[] {
  %Arg_0.190 = f32[] parameter(0)
  %Arg_1.167 = f32[] parameter(1)
  ROOT %add.244 = f32[] add(%Arg_0.190, %Arg_1.167)
}

%region_228.4739.clone (Arg_0.192: f32[], Arg_1.168: f32[]) -> f32[] {
  %Arg_0.192 = f32[] parameter(0)
  %Arg_1.168 = f32[] parameter(1)
  ROOT %add.245 = f32[] add(%Arg_0.192, %Arg_1.168)
}

ENTRY %main.5209_spmd (param.46: s32[], param.59: f32[126,1024], param.60: f32[126,1], param.61: f32[126,1024], param.62: f32[126,1], param.92: f32[126,1024], param.93: f32[126,1], param.63: f32[126,1024], param.64: f32[126,1], param.65: f32[126,1024], param.66: f32[126,1], param.94: f32[126,1024], param.95: f32[126,1], param.67: f32[126,1024], param.68: f32[126,1], param.69: f32[126,1024], param.70: f32[126,1], param.96: f32[126,1024], param.97: f32[126,1], param.71: f32[126,1024], param.72: f32[126,1], param.73: f32[126,1024], param.74: f32[126,1], param.98: f32[126,1024], param.99: f32[126,1], param.75: f32[126,1024], param.76: f32[126,1], param.77: f32[126,1024], param.78: f32[126,1], param.100: f32[126,1024], param.101: f32[126,1], param.79: f32[126,1024], param.80: f32[126,1], param.81: f32[126,1024], param.82: f32[126,1], param.102: f32[126,1024], param.103: f32[126,1], param.83: f32[126,1024], param.84: f32[126,1], param.85: f32[126,1024], param.86: f32[126,1], param.104: f32[126,1024], param.105: f32[126,1], param.89: f32[16384], param.50: f32[32,126,53248], param.51: f32[32,126,53248], param.52: f32[53248,126,32], param.53: f32[16384,126], param.54: f32[16384,126], param.55: f32[32,126,8,128], param.56: f32[128,126,128,32], param.57: f32[32,126,128,128], param.58: f32[32,126,8,128], param.90: f32[32,128256], param.49: f32[128256,32], param.108: s32[], param.107: f32[16384], param.110: f32[32,126,53248], param.112: f32[32,126,53248], param.114: f32[53248,126,32], param.116: f32[16384,126], param.118: f32[16384,126], param.120: f32[32,126,8,128], param.122: f32[128,126,128,32], param.124: f32[32,126,128,128], param.126: f32[32,126,8,128], param.128: f32[32,128256], param.130: f32[128256,32], param.109: f32[16384], param.111: f32[32,126,53248], param.113: f32[32,126,53248], param.115: f32[53248,126,32], param.117: f32[16384,126], param.119: f32[16384,126], param.121: f32[32,126,8,128], param.123: f32[128,126,128,32], param.125: f32[32,126,128,128], param.127: f32[32,126,8,128], param.129: f32[32,128256], param.131: f32[128256,32], param.106: s32[], param.48: s32[1,8192], param.87: s32[1,8192], param.88: s32[1,8192], param.91: s32[1,8192], param.47: s32[1,8192]) -> (s32[], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=5*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=10*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=15*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=20*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=25*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=30*/f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], /*index=35*/f32[126,1024], f32[126,1], f32[126,1024], f32[126,1], f32[126,1024], /*index=40*/f32[126,1], f32[126,1024], f32[126,1], f32[16384], f32[32,126,53248], /*index=45*/f32[32,126,53248], f32[53248,126,32], f32[16384,126], f32[16384,126], f32[32,126,8,128], /*index=50*/f32[128,126,128,32], f32[32,126,128,128], f32[32,126,8,128], f32[32,128256], f32[128256,32], /*index=55*/s32[], f32[16384], f32[32,126,53248], f32[32,126,53248], f32[53248,126,32], /*index=60*/f32[16384,126], f32[16384,126], f32[32,126,8,128], f32[128,126,128,32], f32[32,126,128,128], /*index=65*/f32[32,126,8,128], f32[32,128256], f32[128256,32], f32[16384], f32[32,126,53248], /*index=70*/f32[32,126,53248], f32[53248,126,32], f32[16384,126], f32[16384,126], f32[32,126,8,128], /*index=75*/f32[128,126,128,32], f32[32,126,128,128], f32[32,126,8,128], f32[32,128256], f32[128256,32], /*index=80*/s32[], f32[], f32[], f32[], f32[], /*index=85*/f32[], s32[]) {
  %param.46 = s32[] parameter(0), sharding={replicated}
  %constant.2585 = s32[] constant(1)
  %add.246 = s32[] add(%param.46, %constant.2585)
  %constant.2586 = s32[] constant(0)
  %param.47 = s32[1,8192]{1,0} parameter(85), sharding={devices=[512,1]<=[512]}
  %broadcast.1951 = s32[1,8192]{1,0} broadcast(%constant.2586), dimensions={}
  %compare.363 = pred[1,8192]{1,0} compare(%param.47, %broadcast.1951), direction=NE
  %constant.2588 = f32[] constant(1)
  %convert.445 = s32[1,8192]{1,0} convert(%compare.363)
  %reduce.226 = s32[] reduce(%convert.445, %constant.2586), dimensions={0,1}, to_apply=%region_26.1375
  %all-reduce.30 = s32[] all-reduce(%reduce.226), channel_id=1, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_26.1375.clone
  %convert.446 = f32[] convert(%all-reduce.30)
  %constant.2590 = f32[] constant(1e-08)
  %add.247 = f32[] add(%convert.446, %constant.2590)
  %divide.442 = f32[] divide(%constant.2588, %add.247)
  %broadcast.1952 = f32[1,8192]{1,0} broadcast(%divide.442), dimensions={}
  %constant.2591 = f32[] constant(0)
  %broadcast.1953 = f32[1,8192]{1,0} broadcast(%constant.2591), dimensions={}
  %select.450 = f32[1,8192]{1,0} select(%compare.363, %broadcast.1952, %broadcast.1953)
  %copy.80 = f32[1,8192]{1,0} copy(%select.450)
  %broadcast.1954 = f32[1,8192,128256]{2,1,0} broadcast(%copy.80), dimensions={0,1}
  %param.48 = s32[1,8192]{1,0} parameter(81), sharding={devices=[512,1]<=[512]}
  %broadcast.1955 = s32[1,8192,128256]{2,1,0} broadcast(%param.48), dimensions={0,1}
  %iota.23 = s32[1,8192,128256]{2,1,0} iota(), iota_dimension=2
  %compare.365 = pred[1,8192,128256]{2,1,0} compare(%broadcast.1955, %iota.23), direction=EQ
  %convert.447 = bf16[1,8192,128256]{2,1,0} convert(%compare.365)
  %param.49 = f32[128256,32]{1,0} parameter(54), sharding={devices=[1,512]<=[512]}
  %convert.448 = bf16[128256,32]{1,0} convert(%param.49)
  %all-gather.14 = bf16[128256,16384]{1,0} all-gather(%convert.448), channel_id=2, replica_groups=[1,512]<=[512], dimensions={1}, use_global_device_ids=true
  %dot.59 = bf16[1,8192,16384]{2,1,0} dot(%convert.447, %all-gather.14), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.81 = bf16[1,8192,16384]{2,1,0} copy(%dot.59)
  %constant.2593 = bf16[] constant(0)
  %broadcast.1956 = bf16[126,1,8192,16384]{3,2,1,0} broadcast(%constant.2593), dimensions={}
  %param.50 = f32[32,126,53248]{2,1,0} parameter(44), sharding={devices=[512,1,1]<=[512]}
  %transpose.60 = f32[126,32,53248]{2,0,1} transpose(%param.50), dimensions={1,0,2}
  %param.51 = f32[32,126,53248]{2,1,0} parameter(45), sharding={devices=[512,1,1]<=[512]}
  %transpose.61 = f32[126,32,53248]{2,0,1} transpose(%param.51), dimensions={1,0,2}
  %param.52 = f32[53248,126,32]{2,1,0} parameter(46), sharding={devices=[1,1,512]<=[512]}
  %transpose.62 = f32[126,53248,32]{2,0,1} transpose(%param.52), dimensions={1,0,2}
  %param.53 = f32[16384,126]{1,0} parameter(47), sharding={replicated}
  %transpose.63 = f32[126,16384]{0,1} transpose(%param.53), dimensions={1,0}
  %param.54 = f32[16384,126]{1,0} parameter(48), sharding={replicated}
  %transpose.64 = f32[126,16384]{0,1} transpose(%param.54), dimensions={1,0}
  %param.55 = f32[32,126,8,128]{3,2,1,0} parameter(49), sharding={devices=[512,1,1,1]<=[512]}
  %transpose.65 = f32[126,32,8,128]{3,2,0,1} transpose(%param.55), dimensions={1,0,2,3}
  %param.56 = f32[128,126,128,32]{3,2,1,0} parameter(50), sharding={devices=[1,1,1,512]<=[512]}
  %transpose.66 = f32[126,128,128,32]{3,2,0,1} transpose(%param.56), dimensions={1,0,2,3}
  %param.57 = f32[32,126,128,128]{3,2,1,0} parameter(51), sharding={devices=[512,1,1,1]<=[512]}
  %transpose.67 = f32[126,32,128,128]{3,2,0,1} transpose(%param.57), dimensions={1,0,2,3}
  %param.58 = f32[32,126,8,128]{3,2,1,0} parameter(52), sharding={devices=[512,1,1,1]<=[512]}
  %transpose.68 = f32[126,32,8,128]{3,2,0,1} transpose(%param.58), dimensions={1,0,2,3}
  %param.59 = f32[126,1024]{1,0} parameter(1), sharding={replicated}
  %param.60 = f32[126,1]{1,0} parameter(2), sharding={replicated}
  %param.61 = f32[126,1024]{1,0} parameter(3), sharding={replicated}
  %param.62 = f32[126,1]{1,0} parameter(4), sharding={replicated}
  %param.63 = f32[126,1024]{1,0} parameter(7), sharding={replicated}
  %param.64 = f32[126,1]{1,0} parameter(8), sharding={replicated}
  %param.65 = f32[126,1024]{1,0} parameter(9), sharding={replicated}
  %param.66 = f32[126,1]{1,0} parameter(10), sharding={replicated}
  %param.67 = f32[126,1024]{1,0} parameter(13), sharding={replicated}
  %param.68 = f32[126,1]{1,0} parameter(14), sharding={replicated}
  %param.69 = f32[126,1024]{1,0} parameter(15), sharding={replicated}
  %param.70 = f32[126,1]{1,0} parameter(16), sharding={replicated}
  %param.71 = f32[126,1024]{1,0} parameter(19), sharding={replicated}
  %param.72 = f32[126,1]{1,0} parameter(20), sharding={replicated}
  %param.73 = f32[126,1024]{1,0} parameter(21), sharding={replicated}
  %param.74 = f32[126,1]{1,0} parameter(22), sharding={replicated}
  %param.75 = f32[126,1024]{1,0} parameter(25), sharding={replicated}
  %param.76 = f32[126,1]{1,0} parameter(26), sharding={replicated}
  %param.77 = f32[126,1024]{1,0} parameter(27), sharding={replicated}
  %param.78 = f32[126,1]{1,0} parameter(28), sharding={replicated}
  %param.79 = f32[126,1024]{1,0} parameter(31), sharding={replicated}
  %param.80 = f32[126,1]{1,0} parameter(32), sharding={replicated}
  %param.81 = f32[126,1024]{1,0} parameter(33), sharding={replicated}
  %param.82 = f32[126,1]{1,0} parameter(34), sharding={replicated}
  %param.83 = f32[126,1024]{1,0} parameter(37), sharding={replicated}
  %param.84 = f32[126,1]{1,0} parameter(38), sharding={replicated}
  %param.85 = f32[126,1024]{1,0} parameter(39), sharding={replicated}
  %param.86 = f32[126,1]{1,0} parameter(40), sharding={replicated}
  %param.87 = s32[1,8192]{1,0} parameter(82), sharding={devices=[512,1]<=[512]}
  %convert.449 = f32[1,8192]{1,0} convert(%param.87)
  %broadcast.1957 = f32[1,8192,1,128]{3,2,1,0} broadcast(%convert.449), dimensions={0,1}
  %broadcast.1958 = f32[128]{0} broadcast(%constant.2588), dimensions={}
  %constant.2595 = f32[] constant(6.28318548)
  %broadcast.1959 = f32[128]{0} broadcast(%constant.2595), dimensions={}
  %constant.2596 = f32[] constant(500000)
  %broadcast.1960 = f32[128]{0} broadcast(%constant.2596), dimensions={}
  %iota.24 = s32[64]{0} iota(), iota_dimension=0
  %constant.2597 = s32[] constant(2)
  %broadcast.1961 = s32[64]{0} broadcast(%constant.2597), dimensions={}
  %multiply.383 = s32[64]{0} multiply(%iota.24, %broadcast.1961)
  %convert.450 = f32[64]{0} convert(%multiply.383)
  %constant.2598 = f32[] constant(0.0078125)
  %broadcast.1962 = f32[64]{0} broadcast(%constant.2598), dimensions={}
  %multiply.384 = f32[64]{0} multiply(%convert.450, %broadcast.1962)
  %broadcast.1963 = f32[64,2]{1,0} broadcast(%multiply.384), dimensions={0}
  %reshape.2138 = f32[128]{0} reshape(%broadcast.1963)
  %power.14 = f32[128]{0} power(%broadcast.1960, %reshape.2138)
  %multiply.385 = f32[128]{0} multiply(%broadcast.1959, %power.14)
  %constant.2599 = f32[] constant(2048)
  %broadcast.1964 = f32[128]{0} broadcast(%constant.2599), dimensions={}
  %compare.366 = pred[128]{0} compare(%multiply.385, %broadcast.1964), direction=LT
  %convert.451 = s32[128]{0} convert(%compare.366)
  %broadcast.1965 = s32[128]{0} broadcast(%constant.2585), dimensions={}
  %compare.367 = pred[128]{0} compare(%convert.451, %broadcast.1965), direction=LT
  %constant.2601 = f32[] constant(8192)
  %broadcast.1966 = f32[128]{0} broadcast(%constant.2601), dimensions={}
  %compare.368 = pred[128]{0} compare(%multiply.385, %broadcast.1966), direction=GT
  %convert.452 = s32[128]{0} convert(%compare.368)
  %compare.369 = pred[128]{0} compare(%convert.452, %broadcast.1965), direction=LT
  %negate.30 = f32[128]{0} negate(%reshape.2138)
  %power.15 = f32[128]{0} power(%broadcast.1960, %negate.30)
  %multiply.386 = f32[128]{0} multiply(%broadcast.1966, %power.15)
  %constant.2602 = f32[] constant(0.159154937)
  %broadcast.1967 = f32[128]{0} broadcast(%constant.2602), dimensions={}
  %multiply.387 = f32[128]{0} multiply(%multiply.386, %broadcast.1967)
  %constant.2603 = f32[] constant(-1)
  %broadcast.1968 = f32[128]{0} broadcast(%constant.2603), dimensions={}
  %add.248 = f32[128]{0} add(%multiply.387, %broadcast.1968)
  %constant.2604 = f32[] constant(0.333333343)
  %broadcast.1969 = f32[128]{0} broadcast(%constant.2604), dimensions={}
  %multiply.388 = f32[128]{0} multiply(%add.248, %broadcast.1969)
  %subtract.17 = f32[128]{0} subtract(%broadcast.1958, %multiply.388)
  %multiply.389 = f32[128]{0} multiply(%subtract.17, %power.15)
  %constant.2605 = f32[] constant(0.125)
  %broadcast.1970 = f32[128]{0} broadcast(%constant.2605), dimensions={}
  %multiply.390 = f32[128]{0} multiply(%multiply.389, %broadcast.1970)
  %multiply.391 = f32[128]{0} multiply(%multiply.388, %power.15)
  %add.249 = f32[128]{0} add(%multiply.390, %multiply.391)
  %multiply.392 = f32[128]{0} multiply(%power.15, %broadcast.1970)
  %select.451 = f32[128]{0} select(%compare.369, %add.249, %multiply.392)
  %select.452 = f32[128]{0} select(%compare.367, %select.451, %power.15)
  %divide.443 = f32[128]{0} divide(%broadcast.1958, %select.452)
  %broadcast.1972 = f32[1,8192,1,128]{3,2,1,0} broadcast(%divide.443), dimensions={3}
  %divide.444 = f32[1,8192,1,128]{3,2,1,0} divide(%broadcast.1957, %broadcast.1972)
  %cosine.4 = f32[1,8192,1,128]{3,2,1,0} cosine(%divide.444)
  %iota.25 = s32[128]{0} iota(), iota_dimension=0
  %and.95 = s32[128]{0} and(%iota.25, %broadcast.1965)
  %broadcast.1974 = s32[128]{0} broadcast(%constant.2586), dimensions={}
  %compare.370 = pred[128]{0} compare(%and.95, %broadcast.1974), direction=LT
  %compare.372 = pred[128]{0} compare(%and.95, %broadcast.1974), direction=NE
  %and.96 = pred[128]{0} and(%compare.370, %compare.372)
  %broadcast.1975 = s32[128]{0} broadcast(%constant.2597), dimensions={}
  %add.250 = s32[128]{0} add(%and.95, %broadcast.1975)
  %select.453 = s32[128]{0} select(%and.96, %add.250, %and.95)
  %broadcast.1976 = s32[1,8192,128,128]{3,2,1,0} broadcast(%select.453), dimensions={3}
  %sine.4 = f32[1,8192,1,128]{3,2,1,0} sine(%divide.444)
  %constant.2610 = s32[2]{0} constant({-1, 1})
  %broadcast.1977 = s32[64,2]{1,0} broadcast(%constant.2610), dimensions={1}
  %reshape.2140 = s32[128]{0} reshape(%broadcast.1977)
  %convert.453 = f32[128]{0} convert(%reshape.2140)
  %reshape.2141 = f32[1,1,1,128]{3,2,1,0} reshape(%convert.453)
  %broadcast.1994 = s32[1,8192,8,128]{3,2,1,0} broadcast(%select.453), dimensions={3}
  %param.88 = s32[1,8192]{1,0} parameter(83), sharding={devices=[512,1]<=[512]}
  %broadcast.1998 = s32[1,8192,8192]{2,1,0} broadcast(%param.88), dimensions={0,1}
  %broadcast.1999 = s32[1,8192,8192]{2,1,0} broadcast(%param.88), dimensions={0,2}
  %compare.380 = pred[1,8192,8192]{2,1,0} compare(%broadcast.1998, %broadcast.1999), direction=EQ
  %iota.28 = s32[8192,8192]{1,0} iota(), iota_dimension=1
  %iota.29 = s32[8192,8192]{1,0} iota(), iota_dimension=0
  %compare.381 = pred[8192,8192]{1,0} compare(%iota.28, %iota.29), direction=LE
  %broadcast.2000 = pred[1,8192,8192]{2,1,0} broadcast(%compare.381), dimensions={1,2}
  %and.99 = pred[1,8192,8192]{2,1,0} and(%compare.380, %broadcast.2000)
  %broadcast.2001 = f32[1,8192,8192]{2,1,0} broadcast(%constant.2591), dimensions={}
  %constant.2622 = f32[] constant(-2.38197633e+38)
  %broadcast.2002 = f32[1,8192,8192]{2,1,0} broadcast(%constant.2622), dimensions={}
  %select.457 = f32[1,8192,8192]{2,1,0} select(%and.99, %broadcast.2001, %broadcast.2002)
  %compare.382 = pred[1,8192,8192]{2,1,0} compare(%select.457, %broadcast.2001), direction=NE
  %not.4 = pred[1,8192,8192]{2,1,0} not(%compare.382)
  %convert.459 = s32[1,8192,8192]{2,1,0} convert(%not.4)
  %reduce.227 = s32[1,8192]{1,0} reduce(%convert.459, %constant.2586), dimensions={1}, to_apply=%region_0.440
  %reshape.2147 = s32[1,1,1,8192]{3,2,1,0} reshape(%reduce.227)
  %slice.467 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.2147), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.2149 = s32[1,1]{1,0} reshape(%slice.467)
  %reduce.228 = s32[1,8192]{1,0} reduce(%convert.459, %constant.2586), dimensions={2}, to_apply=%region_1.448
  %reshape.2151 = s32[1,1,1,8192]{3,2,1,0} reshape(%reduce.228)
  %constant.2635 = s32[] constant(-2147483648)
  %reduce.229 = s32[1,1]{1,0} reduce(%reshape.2151, %constant.2635), dimensions={3,2}, to_apply=%region_2.453
  %tuple.112 = (s32[], bf16[1,8192,16384]{2,1,0}, bf16[126,1,8192,16384]{3,2,1,0}, f32[126,32,53248]{2,0,1}, f32[126,32,53248]{2,0,1}, /*index=5*/f32[126,53248,32]{2,0,1}, f32[126,16384]{0,1}, f32[126,16384]{0,1}, f32[126,32,8,128]{3,2,0,1}, f32[126,128,128,32]{3,2,0,1}, /*index=10*/f32[126,32,128,128]{3,2,0,1}, f32[126,32,8,128]{3,2,0,1}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=15*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=20*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=25*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=30*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=35*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=40*/f32[1,8192,1,128]{3,2,1,0}, s32[1,8192,128,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, /*index=45*/s32[1,8192,8,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, s32[1,1]{1,0}, s32[1,1]{1,0}) tuple(%constant.2586, %copy.81, %broadcast.1956, %transpose.60, %transpose.61, /*index=5*/%transpose.62, %transpose.63, %transpose.64, %transpose.65, %transpose.66, /*index=10*/%transpose.67, %transpose.68, %param.59, %param.60, %param.61, /*index=15*/%param.62, %param.63, %param.64, %param.65, %param.66, /*index=20*/%param.67, %param.68, %param.69, %param.70, %param.71, /*index=25*/%param.72, %param.73, %param.74, %param.75, %param.76, /*index=30*/%param.77, %param.78, %param.79, %param.80, %param.81, /*index=35*/%param.82, %param.83, %param.84, %param.85, %param.86, /*index=40*/%cosine.4, %broadcast.1976, %sine.4, %reshape.2141, %cosine.4, /*index=45*/%broadcast.1994, %sine.4, %reshape.2141, %reshape.2149, %reduce.229)
  %while.21 = (s32[], bf16[1,8192,16384]{2,1,0}, bf16[126,1,8192,16384]{3,2,1,0}, f32[126,32,53248]{2,0,1}, f32[126,32,53248]{2,0,1}, /*index=5*/f32[126,53248,32]{2,0,1}, f32[126,16384]{0,1}, f32[126,16384]{0,1}, f32[126,32,8,128]{3,2,0,1}, f32[126,128,128,32]{3,2,0,1}, /*index=10*/f32[126,32,128,128]{3,2,0,1}, f32[126,32,8,128]{3,2,0,1}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=15*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=20*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=25*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=30*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=35*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=40*/f32[1,8192,1,128]{3,2,1,0}, s32[1,8192,128,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, /*index=45*/s32[1,8192,8,128]{3,2,1,0}, f32[1,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, s32[1,1]{1,0}, s32[1,1]{1,0}) while(%tuple.112), condition=%region_20.1277_spmd, body=%region_3.1223_spmd
  %get-tuple-element.447 = bf16[1,8192,16384]{2,1,0} get-tuple-element(%while.21), index=1
  %convert.461 = f32[1,8192,16384]{2,1,0} convert(%get-tuple-element.447)
  %multiply.404 = f32[1,8192,16384]{2,1,0} multiply(%convert.461, %convert.461)
  %reduce.230 = f32[1,8192]{1,0} reduce(%multiply.404, %constant.2591), dimensions={2}, to_apply=%region_21.1289
  %constant.2637 = f32[] constant(6.10351562e-05)
  %broadcast.2004 = f32[1,8192]{1,0} broadcast(%constant.2637), dimensions={}
  %multiply.405 = f32[1,8192]{1,0} multiply(%reduce.230, %broadcast.2004)
  %constant.2638 = f32[] constant(1e-05)
  %broadcast.2005 = f32[1,8192]{1,0} broadcast(%constant.2638), dimensions={}
  %add.254 = f32[1,8192]{1,0} add(%multiply.405, %broadcast.2005)
  %reshape.2153 = f32[1,8192,1]{2,1,0} reshape(%add.254)
  %rsqrt.10 = f32[1,8192,1]{2,1,0} rsqrt(%reshape.2153)
  %reshape.2155 = f32[1,8192]{1,0} reshape(%rsqrt.10)
  %broadcast.2006 = f32[1,8192,16384]{2,1,0} broadcast(%reshape.2155), dimensions={0,1}
  %multiply.406 = f32[1,8192,16384]{2,1,0} multiply(%convert.461, %broadcast.2006)
  %convert.462 = bf16[1,8192,16384]{2,1,0} convert(%multiply.406)
  %param.89 = f32[16384]{0} parameter(43), sharding={replicated}
  %convert.463 = bf16[16384]{0} convert(%param.89)
  %broadcast.2007 = bf16[1,8192,16384]{2,1,0} broadcast(%convert.463), dimensions={2}
  %multiply.407 = bf16[1,8192,16384]{2,1,0} multiply(%convert.462, %broadcast.2007)
  %param.90 = f32[32,128256]{1,0} parameter(53), sharding={devices=[512,1]<=[512]}
  %convert.464 = bf16[32,128256]{1,0} convert(%param.90)
  %all-gather.15 = bf16[16384,128256]{1,0} all-gather(%convert.464), channel_id=10, replica_groups=[1,512]<=[512], dimensions={0}, use_global_device_ids=true
  %dot.60 = bf16[1,8192,128256]{2,1,0} dot(%multiply.407, %all-gather.15), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.82 = bf16[1,8192,128256]{2,1,0} copy(%dot.60)
  %convert.465 = f32[1,8192,128256]{2,1,0} convert(%copy.82)
  %constant.2639 = f32[] constant(-inf)
  %reduce.231 = f32[1,8192]{1,0} reduce(%convert.465, %constant.2639), dimensions={2}, to_apply=%region_22.1329
  %broadcast.2008 = f32[1,8192,128256]{2,1,0} broadcast(%reduce.231), dimensions={0,1}
  %subtract.19 = f32[1,8192,128256]{2,1,0} subtract(%convert.465, %broadcast.2008)
  %exponential.6 = f32[1,8192,128256]{2,1,0} exponential(%subtract.19)
  %reduce.232 = f32[1,8192]{1,0} reduce(%exponential.6, %constant.2591), dimensions={2}, to_apply=%region_23.1340
  %log.2 = f32[1,8192]{1,0} log(%reduce.232)
  %add.255 = f32[1,8192]{1,0} add(%log.2, %reduce.231)
  %multiply.408 = f32[1,8192]{1,0} multiply(%add.255, %broadcast.1953)
  %broadcast.2010 = f32[1,8192]{1,0} broadcast(%constant.2588), dimensions={}
  %add.256 = f32[1,8192]{1,0} add(%multiply.408, %broadcast.2010)
  %broadcast.2011 = f32[1,8192,128256]{2,1,0} broadcast(%add.256), dimensions={0,1}
  %multiply.409 = f32[1,8192,128256]{2,1,0} multiply(%broadcast.2011, %exponential.6)
  %broadcast.2012 = f32[1,8192,128256]{2,1,0} broadcast(%reduce.232), dimensions={0,1}
  %divide.447 = f32[1,8192,128256]{2,1,0} divide(%multiply.409, %broadcast.2012)
  %param.91 = s32[1,8192]{1,0} parameter(84), sharding={devices=[512,1]<=[512]}
  %broadcast.2013 = s32[1,8192,128256]{2,1,0} broadcast(%param.91), dimensions={0,1}
  %iota.30 = s32[1,8192,128256]{2,1,0} iota(), iota_dimension=2
  %compare.383 = pred[1,8192,128256]{2,1,0} compare(%broadcast.2013, %iota.30), direction=EQ
  %convert.466 = f32[1,8192,128256]{2,1,0} convert(%compare.383)
  %subtract.20 = f32[1,8192,128256]{2,1,0} subtract(%divide.447, %convert.466)
  %multiply.410 = f32[1,8192,128256]{2,1,0} multiply(%broadcast.1954, %subtract.20)
  %convert.467 = bf16[1,8192,128256]{2,1,0} convert(%multiply.410)
  %copy.83 = bf16[1,8192,128256]{2,1,0} copy(%convert.467)
  %dot.61 = bf16[1,8192,16384]{2,1,0} dot(%copy.83, %all-gather.15), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %multiply.411 = bf16[1,8192,16384]{2,1,0} multiply(%dot.61, %broadcast.2007)
  %convert.468 = f32[1,8192,16384]{2,1,0} convert(%multiply.411)
  %multiply.412 = f32[1,8192,16384]{2,1,0} multiply(%convert.468, %broadcast.2006)
  %multiply.413 = f32[1,8192,16384]{2,1,0} multiply(%convert.461, %convert.468)
  %reduce.233 = f32[1,8192]{1,0} reduce(%multiply.413, %constant.2591), dimensions={2}, to_apply=%region_29.1429
  %reshape.2158 = f32[1,8192,1]{2,1,0} reshape(%reduce.233)
  %divide.448 = f32[1,8192,1]{2,1,0} divide(%rsqrt.10, %reshape.2153)
  %constant.2644 = f32[] constant(-0.5)
  %broadcast.2016 = f32[1,8192,1]{2,1,0} broadcast(%constant.2644), dimensions={}
  %multiply.414 = f32[1,8192,1]{2,1,0} multiply(%divide.448, %broadcast.2016)
  %multiply.415 = f32[1,8192,1]{2,1,0} multiply(%reshape.2158, %multiply.414)
  %constant.2645 = f32[] constant(0.000122070312)
  %broadcast.2017 = f32[1,8192,1]{2,1,0} broadcast(%constant.2645), dimensions={}
  %multiply.416 = f32[1,8192,1]{2,1,0} multiply(%multiply.415, %broadcast.2017)
  %reshape.2159 = f32[1,8192]{1,0} reshape(%multiply.416)
  %broadcast.2018 = f32[1,8192,16384]{2,1,0} broadcast(%reshape.2159), dimensions={0,1}
  %multiply.417 = f32[1,8192,16384]{2,1,0} multiply(%convert.461, %broadcast.2018)
  %add.257 = f32[1,8192,16384]{2,1,0} add(%multiply.412, %multiply.417)
  %convert.469 = bf16[1,8192,16384]{2,1,0} convert(%add.257)
  %broadcast.2019 = f32[126,32,53248]{2,1,0} broadcast(%constant.2591), dimensions={}
  %broadcast.2020 = f32[126,53248,32]{2,1,0} broadcast(%constant.2591), dimensions={}
  %broadcast.2021 = f32[126,16384]{1,0} broadcast(%constant.2591), dimensions={}
  %broadcast.2022 = f32[126,32,8,128]{3,2,1,0} broadcast(%constant.2591), dimensions={}
  %broadcast.2023 = f32[126,128,128,32]{3,2,1,0} broadcast(%constant.2591), dimensions={}
  %broadcast.2024 = f32[126,32,128,128]{3,2,1,0} broadcast(%constant.2591), dimensions={}
  %broadcast.2025 = f32[126,1024]{1,0} broadcast(%constant.2591), dimensions={}
  %broadcast.2027 = f32[126,1]{1,0} broadcast(%constant.2591), dimensions={}
  %param.92 = f32[126,1024]{1,0} parameter(5), sharding={replicated}
  %param.93 = f32[126,1]{1,0} parameter(6), sharding={replicated}
  %param.94 = f32[126,1024]{1,0} parameter(11), sharding={replicated}
  %param.95 = f32[126,1]{1,0} parameter(12), sharding={replicated}
  %param.96 = f32[126,1024]{1,0} parameter(17), sharding={replicated}
  %param.97 = f32[126,1]{1,0} parameter(18), sharding={replicated}
  %param.98 = f32[126,1024]{1,0} parameter(23), sharding={replicated}
  %param.99 = f32[126,1]{1,0} parameter(24), sharding={replicated}
  %param.100 = f32[126,1024]{1,0} parameter(29), sharding={replicated}
  %param.101 = f32[126,1]{1,0} parameter(30), sharding={replicated}
  %param.102 = f32[126,1024]{1,0} parameter(35), sharding={replicated}
  %param.103 = f32[126,1]{1,0} parameter(36), sharding={replicated}
  %param.104 = f32[126,1024]{1,0} parameter(41), sharding={replicated}
  %param.105 = f32[126,1]{1,0} parameter(42), sharding={replicated}
  %get-tuple-element.448 = bf16[126,1,8192,16384]{3,2,1,0} get-tuple-element(%while.21), index=2
  %tuple.113 = (s32[], bf16[1,8192,16384]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,53248,32]{2,1,0}, /*index=5*/f32[126,16384]{1,0}, f32[126,16384]{1,0}, f32[126,32,8,128]{3,2,1,0}, f32[126,128,128,32]{3,2,1,0}, f32[126,32,128,128]{3,2,1,0}, /*index=10*/f32[126,32,8,128]{3,2,1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=15*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=20*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=25*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=30*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=35*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=40*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=45*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=50*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=55*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=60*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=65*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=70*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=75*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=80*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=85*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=90*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=95*/f32[126,32,53248]{2,0,1}, f32[126,32,53248]{2,0,1}, f32[126,53248,32]{2,0,1}, f32[126,16384]{0,1}, f32[126,16384]{0,1}, /*index=100*/f32[126,32,8,128]{3,2,0,1}, f32[126,128,128,32]{3,2,0,1}, f32[126,32,128,128]{3,2,0,1}, f32[126,32,8,128]{3,2,0,1}, bf16[126,1,8192,16384]{3,2,1,0}, /*index=105*/s32[1,8192]{1,0}, s32[1,8192]{1,0}) tuple(%constant.2586, %convert.469, %broadcast.2019, %broadcast.2019, %broadcast.2020, /*index=5*/%broadcast.2021, %broadcast.2021, %broadcast.2022, %broadcast.2023, %broadcast.2024, /*index=10*/%broadcast.2022, %broadcast.2025, %broadcast.2027, %broadcast.2025, %broadcast.2027, /*index=15*/%broadcast.2025, %broadcast.2027, %broadcast.2025, %broadcast.2027, %broadcast.2025, /*index=20*/%broadcast.2027, %broadcast.2025, %broadcast.2027, %broadcast.2025, %broadcast.2027, /*index=25*/%broadcast.2025, %broadcast.2027, %broadcast.2025, %broadcast.2027, %broadcast.2025, /*index=30*/%broadcast.2027, %broadcast.2025, %broadcast.2027, %broadcast.2025, %broadcast.2027, /*index=35*/%broadcast.2025, %broadcast.2027, %broadcast.2025, %broadcast.2027, %broadcast.2025, /*index=40*/%broadcast.2027, %broadcast.2025, %broadcast.2027, %broadcast.2025, %broadcast.2027, /*index=45*/%broadcast.2025, %broadcast.2027, %broadcast.2025, %broadcast.2027, %broadcast.2025, /*index=50*/%broadcast.2027, %broadcast.2025, %broadcast.2027, %param.59, %param.60, /*index=55*/%param.61, %param.62, %param.92, %param.93, %param.63, /*index=60*/%param.64, %param.65, %param.66, %param.94, %param.95, /*index=65*/%param.67, %param.68, %param.69, %param.70, %param.96, /*index=70*/%param.97, %param.71, %param.72, %param.73, %param.74, /*index=75*/%param.98, %param.99, %param.75, %param.76, %param.77, /*index=80*/%param.78, %param.100, %param.101, %param.79, %param.80, /*index=85*/%param.81, %param.82, %param.102, %param.103, %param.83, /*index=90*/%param.84, %param.85, %param.86, %param.104, %param.105, /*index=95*/%transpose.60, %transpose.61, %transpose.62, %transpose.63, %transpose.64, /*index=100*/%transpose.65, %transpose.66, %transpose.67, %transpose.68, %get-tuple-element.448, /*index=105*/%param.88, %param.87)
  %while.22 = (s32[], bf16[1,8192,16384]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,32,53248]{2,1,0}, f32[126,53248,32]{2,1,0}, /*index=5*/f32[126,16384]{1,0}, f32[126,16384]{1,0}, f32[126,32,8,128]{3,2,1,0}, f32[126,128,128,32]{3,2,1,0}, f32[126,32,128,128]{3,2,1,0}, /*index=10*/f32[126,32,8,128]{3,2,1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=15*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=20*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=25*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=30*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=35*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=40*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=45*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=50*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=55*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=60*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=65*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=70*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=75*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=80*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=85*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=90*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=95*/f32[126,32,53248]{2,0,1}, f32[126,32,53248]{2,0,1}, f32[126,53248,32]{2,0,1}, f32[126,16384]{0,1}, f32[126,16384]{0,1}, /*index=100*/f32[126,32,8,128]{3,2,0,1}, f32[126,128,128,32]{3,2,0,1}, f32[126,32,128,128]{3,2,0,1}, f32[126,32,8,128]{3,2,0,1}, bf16[126,1,8192,16384]{3,2,1,0}, /*index=105*/s32[1,8192]{1,0}, s32[1,8192]{1,0}) while(%tuple.113), condition=%region_108.3507_spmd, body=%region_31.3396_spmd
  %get-tuple-element.449 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=11
  %get-tuple-element.450 = f32[126,1]{1,0} get-tuple-element(%while.22), index=12
  %get-tuple-element.451 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=13
  %get-tuple-element.452 = f32[126,1]{1,0} get-tuple-element(%while.22), index=14
  %get-tuple-element.453 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=15
  %get-tuple-element.454 = f32[126,1]{1,0} get-tuple-element(%while.22), index=16
  %get-tuple-element.455 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=17
  %get-tuple-element.506 = f32[126,1]{1,0} get-tuple-element(%while.22), index=18
  %get-tuple-element.507 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=19
  %get-tuple-element.508 = f32[126,1]{1,0} get-tuple-element(%while.22), index=20
  %get-tuple-element.509 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=21
  %get-tuple-element.510 = f32[126,1]{1,0} get-tuple-element(%while.22), index=22
  %get-tuple-element.511 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=23
  %get-tuple-element.512 = f32[126,1]{1,0} get-tuple-element(%while.22), index=24
  %get-tuple-element.513 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=25
  %get-tuple-element.514 = f32[126,1]{1,0} get-tuple-element(%while.22), index=26
  %get-tuple-element.515 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=27
  %get-tuple-element.516 = f32[126,1]{1,0} get-tuple-element(%while.22), index=28
  %get-tuple-element.517 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=29
  %get-tuple-element.518 = f32[126,1]{1,0} get-tuple-element(%while.22), index=30
  %get-tuple-element.519 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=31
  %get-tuple-element.520 = f32[126,1]{1,0} get-tuple-element(%while.22), index=32
  %get-tuple-element.521 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=33
  %get-tuple-element.522 = f32[126,1]{1,0} get-tuple-element(%while.22), index=34
  %get-tuple-element.523 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=35
  %get-tuple-element.524 = f32[126,1]{1,0} get-tuple-element(%while.22), index=36
  %get-tuple-element.525 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=37
  %get-tuple-element.526 = f32[126,1]{1,0} get-tuple-element(%while.22), index=38
  %get-tuple-element.527 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=39
  %get-tuple-element.528 = f32[126,1]{1,0} get-tuple-element(%while.22), index=40
  %get-tuple-element.529 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=41
  %get-tuple-element.530 = f32[126,1]{1,0} get-tuple-element(%while.22), index=42
  %get-tuple-element.531 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=43
  %get-tuple-element.532 = f32[126,1]{1,0} get-tuple-element(%while.22), index=44
  %get-tuple-element.533 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=45
  %get-tuple-element.534 = f32[126,1]{1,0} get-tuple-element(%while.22), index=46
  %get-tuple-element.535 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=47
  %get-tuple-element.536 = f32[126,1]{1,0} get-tuple-element(%while.22), index=48
  %get-tuple-element.537 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=49
  %get-tuple-element.538 = f32[126,1]{1,0} get-tuple-element(%while.22), index=50
  %get-tuple-element.539 = f32[126,1024]{1,0} get-tuple-element(%while.22), index=51
  %get-tuple-element.540 = f32[126,1]{1,0} get-tuple-element(%while.22), index=52
  %param.106 = s32[] parameter(80), sharding={replicated}
  %constant.2654 = s32[] constant(15000)
  %compare.385 = pred[] compare(%param.106, %constant.2654), direction=LT
  %maximum.119 = s32[] maximum(%constant.2586, %param.106)
  %minimum.92 = s32[] minimum(%constant.2654, %maximum.119)
  %convert.470 = f32[] convert(%minimum.92)
  %constant.2658 = f32[] constant(6.66666674e-05)
  %multiply.418 = f32[] multiply(%convert.470, %constant.2658)
  %subtract.21 = f32[] subtract(%constant.2588, %multiply.418)
  %constant.2659 = f32[] constant(-0.001)
  %multiply.419 = f32[] multiply(%subtract.21, %constant.2659)
  %constant.2660 = f32[] constant(0.001)
  %add.258 = f32[] add(%multiply.419, %constant.2660)
  %constant.2661 = s32[] constant(-15000)
  %add.259 = s32[] add(%param.106, %constant.2661)
  %convert.471 = f32[] convert(%add.259)
  %constant.2662 = f32[] constant(2.32708844e-05)
  %multiply.420 = f32[] multiply(%convert.471, %constant.2662)
  %cosine.6 = f32[] cosine(%multiply.420)
  %add.260 = f32[] add(%cosine.6, %constant.2588)
  %constant.2664 = f32[] constant(0.0005)
  %multiply.421 = f32[] multiply(%add.260, %constant.2664)
  %constant.2666 = f32[] constant(0.5)
  %multiply.422 = f32[] multiply(%add.260, %constant.2666)
  %subtract.22 = f32[] subtract(%constant.2588, %multiply.422)
  %constant.2667 = f32[] constant(0.0001)
  %multiply.423 = f32[] multiply(%subtract.22, %constant.2667)
  %add.261 = f32[] add(%multiply.421, %multiply.423)
  %select.458 = f32[] select(%compare.385, %add.258, %add.261)
  %multiply.424 = f32[] multiply(%select.458, %constant.2603)
  %broadcast.2029 = f32[16384]{0} broadcast(%multiply.424), dimensions={}
  %multiply.425 = bf16[1,8192,16384]{2,1,0} multiply(%convert.462, %dot.61)
  %reduce.234 = bf16[16384]{0} reduce(%multiply.425, %constant.2593), dimensions={0,1}, to_apply=%region_27.1411
  %all-reduce.31 = bf16[16384]{0} all-reduce(%reduce.234), channel_id=48, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_27.1411.clone
  %convert.472 = f32[16384]{0} convert(%all-reduce.31)
  %multiply.426 = f32[16384]{0} multiply(%convert.472, %convert.472)
  %reduce.235 = f32[] reduce(%multiply.426, %constant.2591), dimensions={0}, to_apply=%region_109.3580
  %get-tuple-element.541 = f32[126,32,53248]{2,1,0} get-tuple-element(%while.22), index=2
  %transpose.69 = f32[32,126,53248]{2,0,1} transpose(%get-tuple-element.541), dimensions={1,0,2}
  %multiply.427 = f32[32,126,53248]{2,0,1} multiply(%transpose.69, %transpose.69)
  %reduce.236 = f32[] reduce(%multiply.427, %constant.2591), dimensions={0,1,2}, to_apply=%region_110.3586
  %all-reduce.32 = f32[] all-reduce(%reduce.236), channel_id=49, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_110.3586.clone
  %add.262 = f32[] add(%reduce.235, %all-reduce.32)
  %get-tuple-element.542 = f32[126,32,53248]{2,1,0} get-tuple-element(%while.22), index=3
  %transpose.70 = f32[32,126,53248]{2,0,1} transpose(%get-tuple-element.542), dimensions={1,0,2}
  %multiply.428 = f32[32,126,53248]{2,0,1} multiply(%transpose.70, %transpose.70)
  %reduce.237 = f32[] reduce(%multiply.428, %constant.2591), dimensions={0,1,2}, to_apply=%region_111.3593
  %all-reduce.33 = f32[] all-reduce(%reduce.237), channel_id=50, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_111.3593.clone
  %add.263 = f32[] add(%add.262, %all-reduce.33)
  %get-tuple-element.543 = f32[126,53248,32]{2,1,0} get-tuple-element(%while.22), index=4
  %transpose.71 = f32[53248,126,32]{2,0,1} transpose(%get-tuple-element.543), dimensions={1,0,2}
  %multiply.429 = f32[53248,126,32]{2,0,1} multiply(%transpose.71, %transpose.71)
  %reduce.238 = f32[] reduce(%multiply.429, %constant.2591), dimensions={0,1,2}, to_apply=%region_112.3600
  %all-reduce.34 = f32[] all-reduce(%reduce.238), channel_id=51, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_112.3600.clone
  %add.264 = f32[] add(%add.263, %all-reduce.34)
  %get-tuple-element.544 = f32[126,16384]{1,0} get-tuple-element(%while.22), index=5
  %transpose.72 = f32[16384,126]{0,1} transpose(%get-tuple-element.544), dimensions={1,0}
  %multiply.430 = f32[16384,126]{0,1} multiply(%transpose.72, %transpose.72)
  %reduce.239 = f32[] reduce(%multiply.430, %constant.2591), dimensions={0,1}, to_apply=%region_113.3607
  %add.265 = f32[] add(%add.264, %reduce.239)
  %get-tuple-element.545 = f32[126,16384]{1,0} get-tuple-element(%while.22), index=6
  %transpose.73 = f32[16384,126]{0,1} transpose(%get-tuple-element.545), dimensions={1,0}
  %multiply.431 = f32[16384,126]{0,1} multiply(%transpose.73, %transpose.73)
  %reduce.240 = f32[] reduce(%multiply.431, %constant.2591), dimensions={0,1}, to_apply=%region_114.3614
  %add.266 = f32[] add(%add.265, %reduce.240)
  %get-tuple-element.546 = f32[126,32,8,128]{3,2,1,0} get-tuple-element(%while.22), index=7
  %transpose.74 = f32[32,126,8,128]{3,2,0,1} transpose(%get-tuple-element.546), dimensions={1,0,2,3}
  %multiply.432 = f32[32,126,8,128]{3,2,0,1} multiply(%transpose.74, %transpose.74)
  %reduce.241 = f32[] reduce(%multiply.432, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_115.3621
  %all-reduce.35 = f32[] all-reduce(%reduce.241), channel_id=52, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_115.3621.clone
  %add.267 = f32[] add(%add.266, %all-reduce.35)
  %get-tuple-element.547 = f32[126,128,128,32]{3,2,1,0} get-tuple-element(%while.22), index=8
  %transpose.75 = f32[128,126,128,32]{3,2,0,1} transpose(%get-tuple-element.547), dimensions={1,0,2,3}
  %multiply.433 = f32[128,126,128,32]{3,2,0,1} multiply(%transpose.75, %transpose.75)
  %reduce.242 = f32[] reduce(%multiply.433, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_116.3628
  %all-reduce.36 = f32[] all-reduce(%reduce.242), channel_id=53, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_116.3628.clone
  %add.268 = f32[] add(%add.267, %all-reduce.36)
  %get-tuple-element.548 = f32[126,32,128,128]{3,2,1,0} get-tuple-element(%while.22), index=9
  %transpose.76 = f32[32,126,128,128]{3,2,0,1} transpose(%get-tuple-element.548), dimensions={1,0,2,3}
  %multiply.434 = f32[32,126,128,128]{3,2,0,1} multiply(%transpose.76, %transpose.76)
  %reduce.243 = f32[] reduce(%multiply.434, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_117.3635
  %all-reduce.37 = f32[] all-reduce(%reduce.243), channel_id=54, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_117.3635.clone
  %add.269 = f32[] add(%add.268, %all-reduce.37)
  %get-tuple-element.549 = f32[126,32,8,128]{3,2,1,0} get-tuple-element(%while.22), index=10
  %transpose.77 = f32[32,126,8,128]{3,2,0,1} transpose(%get-tuple-element.549), dimensions={1,0,2,3}
  %multiply.435 = f32[32,126,8,128]{3,2,0,1} multiply(%transpose.77, %transpose.77)
  %reduce.244 = f32[] reduce(%multiply.435, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_118.3642
  %all-reduce.38 = f32[] all-reduce(%reduce.244), channel_id=55, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_118.3642.clone
  %add.270 = f32[] add(%add.269, %all-reduce.38)
  %dot.62 = bf16[16384,128256]{1,0} dot(%multiply.407, %copy.83), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.39 = bf16[16384,128256]{1,0} all-reduce(%dot.62), channel_id=56, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%add.7.clone
  %constant.2682 = s32[512]{0} constant({0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 1024, 1056, 1088, 1120, 1152, 1184, 1216, 1248, 1280, 1312, 1344, 1376, 1408, 1440, 1472, 1504, 1536, 1568, 1600, 1632, 1664, 1696, 1728, 1760, 1792, 1824, 1856, 1888, 1920, 1952, 1984, 2016, 2048, 2080, 2112, 2144, 2176, 2208, 2240, 2272, 2304, 2336, 2368, 2400, 2432, 2464, 2496, 2528, 2560, 2592, 2624, 2656, 2688, 2720, 2752, 2784, 2816, 2848, 2880, 2912, 2944, 2976, 3008, 3040, 3072, 3104, 3136, 3168, 3200, 3232, 3264, 3296, 3328, 3360, 3392, 3424, 3456, 3488, 3520, 3552, 3584, 3616, 3648, 3680, 3712, 3744, 3776, 3808, 3840, 3872, 3904, 3936, 3968, 4000, 4032, 4064, 4096, 4128, 4160, 4192, 4224, 4256, 4288, 4320, 4352, 4384, 4416, 4448, 4480, 4512, 4544, 4576, 4608, 4640, 4672, 4704, 4736, 4768, 4800, 4832, 4864, 4896, 4928, 4960, 4992, 5024, 5056, 5088, 5120, 5152, 5184, 5216, 5248, 5280, 5312, 5344, 5376, 5408, 5440, 5472, 5504, 5536, 5568, 5600, 5632, 5664, 5696, 5728, 5760, 5792, 5824, 5856, 5888, 5920, 5952, 5984, 6016, 6048, 6080, 6112, 6144, 6176, 6208, 6240, 6272, 6304, 6336, 6368, 6400, 6432, 6464, 6496, 6528, 6560, 6592, 6624, 6656, 6688, 6720, 6752, 6784, 6816, 6848, 6880, 6912, 6944, 6976, 7008, 7040, 7072, 7104, 7136, 7168, 7200, 7232, 7264, 7296, 7328, 7360, 7392, 7424, 7456, 7488, 7520, 7552, 7584, 7616, 7648, 7680, 7712, 7744, 7776, 7808, 7840, 7872, 7904, 7936, 7968, 8000, 8032, 8064, 8096, 8128, 8160, 8192, 8224, 8256, 8288, 8320, 8352, 8384, 8416, 8448, 8480, 8512, 8544, 8576, 8608, 8640, 8672, 8704, 8736, 8768, 8800, 8832, 8864, 8896, 8928, 8960, 8992, 9024, 9056, 9088, 9120, 9152, 9184, 9216, 9248, 9280, 9312, 9344, 9376, 9408, 9440, 9472, 9504, 9536, 9568, 9600, 9632, 9664, 9696, 9728, 9760, 9792, 9824, 9856, 9888, 9920, 9952, 9984, 10016, 10048, 10080, 10112, 10144, 10176, 10208, 10240, 10272, 10304, 10336, 10368, 10400, 10432, 10464, 10496, 10528, 10560, 10592, 10624, 10656, 10688, 10720, 10752, 10784, 10816, 10848, 10880, 10912, 10944, 10976, 11008, 11040, 11072, 11104, 11136, 11168, 11200, 11232, 11264, 11296, 11328, 11360, 11392, 11424, 11456, 11488, 11520, 11552, 11584, 11616, 11648, 11680, 11712, 11744, 11776, 11808, 11840, 11872, 11904, 11936, 11968, 12000, 12032, 12064, 12096, 12128, 12160, 12192, 12224, 12256, 12288, 12320, 12352, 12384, 12416, 12448, 12480, 12512, 12544, 12576, 12608, 12640, 12672, 12704, 12736, 12768, 12800, 12832, 12864, 12896, 12928, 12960, 12992, 13024, 13056, 13088, 13120, 13152, 13184, 13216, 13248, 13280, 13312, 13344, 13376, 13408, 13440, 13472, 13504, 13536, 13568, 13600, 13632, 13664, 13696, 13728, 13760, 13792, 13824, 13856, 13888, 13920, 13952, 13984, 14016, 14048, 14080, 14112, 14144, 14176, 14208, 14240, 14272, 14304, 14336, 14368, 14400, 14432, 14464, 14496, 14528, 14560, 14592, 14624, 14656, 14688, 14720, 14752, 14784, 14816, 14848, 14880, 14912, 14944, 14976, 15008, 15040, 15072, 15104, 15136, 15168, 15200, 15232, 15264, 15296, 15328, 15360, 15392, 15424, 15456, 15488, 15520, 15552, 15584, 15616, 15648, 15680, 15712, 15744, 15776, 15808, 15840, 15872, 15904, 15936, 15968, 16000, 16032, 16064, 16096, 16128, 16160, 16192, 16224, 16256, 16288, 16320, 16352})
  %partition-id.4 = u32[] partition-id()
  %dynamic-slice.267 = s32[1]{0} dynamic-slice(%constant.2682, %partition-id.4), dynamic_slice_sizes={1}
  %reshape.2160 = s32[] reshape(%dynamic-slice.267)
  %dynamic-slice.268 = bf16[32,128256]{1,0} dynamic-slice(%all-reduce.39, %reshape.2160, %constant.2586), dynamic_slice_sizes={32,128256}
  %convert.473 = f32[32,128256]{0,1} convert(%dynamic-slice.268)
  %multiply.436 = f32[32,128256]{0,1} multiply(%convert.473, %convert.473)
  %reduce.245 = f32[] reduce(%multiply.436, %constant.2591), dimensions={0,1}, to_apply=%region_119.3649
  %all-reduce.40 = f32[] all-reduce(%reduce.245), channel_id=57, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_119.3649.clone
  %add.271 = f32[] add(%add.270, %all-reduce.40)
  %get-tuple-element.550 = bf16[1,8192,16384]{2,1,0} get-tuple-element(%while.22), index=1
  %copy.84 = bf16[1,8192,16384]{2,1,0} copy(%get-tuple-element.550)
  %dot.63 = bf16[128256,16384]{1,0} dot(%convert.447, %copy.84), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.41 = bf16[128256,16384]{1,0} all-reduce(%dot.63), channel_id=58, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%add.8.clone
  %dynamic-slice.270 = bf16[128256,32]{1,0} dynamic-slice(%all-reduce.41, %constant.2586, %reshape.2160), dynamic_slice_sizes={128256,32}
  %convert.474 = f32[128256,32]{0,1} convert(%dynamic-slice.270)
  %multiply.437 = f32[128256,32]{0,1} multiply(%convert.474, %convert.474)
  %reduce.246 = f32[] reduce(%multiply.437, %constant.2591), dimensions={0,1}, to_apply=%region_120.3656
  %all-reduce.42 = f32[] all-reduce(%reduce.246), channel_id=59, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_120.3656.clone
  %add.272 = f32[] add(%add.271, %all-reduce.42)
  %sqrt.0 = f32[] sqrt(%add.272)
  %compare.387 = pred[] compare(%sqrt.0, %constant.2588), direction=LT
  %broadcast.2030 = pred[16384]{0} broadcast(%compare.387), dimensions={}
  %broadcast.2031 = f32[16384]{0} broadcast(%sqrt.0), dimensions={}
  %divide.449 = f32[16384]{0} divide(%convert.472, %broadcast.2031)
  %select.459 = f32[16384]{0} select(%broadcast.2030, %convert.472, %divide.449)
  %constant.2691 = f32[] constant(0.1)
  %broadcast.2032 = f32[16384]{0} broadcast(%constant.2691), dimensions={}
  %multiply.438 = f32[16384]{0} multiply(%select.459, %broadcast.2032)
  %param.107 = f32[16384]{0} parameter(56), sharding={replicated}
  %constant.2692 = f32[] constant(0.9)
  %broadcast.2033 = f32[16384]{0} broadcast(%constant.2692), dimensions={}
  %multiply.439 = f32[16384]{0} multiply(%param.107, %broadcast.2033)
  %add.273 = f32[16384]{0} add(%multiply.438, %multiply.439)
  %param.108 = s32[] parameter(55), sharding={replicated}
  %constant.2695 = s32[] constant(2147483647)
  %compare.388 = pred[] compare(%param.108, %constant.2695), direction=LT
  %add.274 = s32[] add(%param.108, %constant.2585)
  %select.460 = s32[] select(%compare.388, %add.274, %constant.2695)
  %convert.475 = f32[] convert(%select.460)
  %power.18 = f32[] power(%constant.2692, %convert.475)
  %subtract.23 = f32[] subtract(%constant.2588, %power.18)
  %broadcast.2034 = f32[16384]{0} broadcast(%subtract.23), dimensions={}
  %multiply.440 = f32[16384]{0} multiply(%select.459, %select.459)
  %constant.2698 = f32[] constant(0.05)
  %broadcast.2035 = f32[16384]{0} broadcast(%constant.2698), dimensions={}
  %multiply.441 = f32[16384]{0} multiply(%multiply.440, %broadcast.2035)
  %param.109 = f32[16384]{0} parameter(68), sharding={replicated}
  %constant.2699 = f32[] constant(0.95)
  %broadcast.2036 = f32[16384]{0} broadcast(%constant.2699), dimensions={}
  %multiply.442 = f32[16384]{0} multiply(%param.109, %broadcast.2036)
  %add.275 = f32[16384]{0} add(%multiply.441, %multiply.442)
  %power.19 = f32[] power(%constant.2699, %convert.475)
  %subtract.24 = f32[] subtract(%constant.2588, %power.19)
  %broadcast.2037 = f32[16384]{0} broadcast(%subtract.24), dimensions={}
  %divide.450 = f32[16384]{0} divide(%add.275, %broadcast.2037)
  %sqrt.1 = f32[16384]{0} sqrt(%divide.450)
  %broadcast.2038 = f32[16384]{0} broadcast(%constant.2590), dimensions={}
  %add.276 = f32[16384]{0} add(%sqrt.1, %broadcast.2038)
  %multiply.443 = f32[16384]{0} multiply(%broadcast.2034, %add.276)
  %divide.451 = f32[16384]{0} divide(%add.273, %multiply.443)
  %multiply.444 = f32[16384]{0} multiply(%param.89, %broadcast.2032)
  %add.277 = f32[16384]{0} add(%divide.451, %multiply.444)
  %multiply.445 = f32[16384]{0} multiply(%broadcast.2029, %add.277)
  %add.278 = f32[16384]{0} add(%param.89, %multiply.445)
  %broadcast.2039 = f32[32,126,53248]{2,1,0} broadcast(%multiply.424), dimensions={}
  %broadcast.2040 = pred[32,126,53248]{2,0,1} broadcast(%compare.387), dimensions={}
  %broadcast.2041 = f32[32,126,53248]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.452 = f32[32,126,53248]{2,0,1} divide(%transpose.69, %broadcast.2041)
  %select.461 = f32[32,126,53248]{2,0,1} select(%broadcast.2040, %transpose.69, %divide.452)
  %broadcast.2042 = f32[32,126,53248]{2,1,0} broadcast(%constant.2691), dimensions={}
  %multiply.446 = f32[32,126,53248]{2,0,1} multiply(%select.461, %broadcast.2042)
  %param.110 = f32[32,126,53248]{2,1,0} parameter(57), sharding={devices=[512,1,1]<=[512]}
  %broadcast.2043 = f32[32,126,53248]{2,1,0} broadcast(%constant.2692), dimensions={}
  %multiply.447 = f32[32,126,53248]{2,1,0} multiply(%param.110, %broadcast.2043)
  %add.279 = f32[32,126,53248]{2,0,1} add(%multiply.446, %multiply.447)
  %broadcast.2044 = f32[32,126,53248]{2,1,0} broadcast(%subtract.23), dimensions={}
  %multiply.448 = f32[32,126,53248]{2,0,1} multiply(%select.461, %select.461)
  %broadcast.2045 = f32[32,126,53248]{2,1,0} broadcast(%constant.2698), dimensions={}
  %multiply.449 = f32[32,126,53248]{2,0,1} multiply(%multiply.448, %broadcast.2045)
  %param.111 = f32[32,126,53248]{2,1,0} parameter(69), sharding={devices=[512,1,1]<=[512]}
  %broadcast.2046 = f32[32,126,53248]{2,1,0} broadcast(%constant.2699), dimensions={}
  %multiply.450 = f32[32,126,53248]{2,1,0} multiply(%param.111, %broadcast.2046)
  %add.280 = f32[32,126,53248]{2,0,1} add(%multiply.449, %multiply.450)
  %broadcast.2047 = f32[32,126,53248]{2,1,0} broadcast(%subtract.24), dimensions={}
  %divide.453 = f32[32,126,53248]{2,0,1} divide(%add.280, %broadcast.2047)
  %sqrt.2 = f32[32,126,53248]{2,0,1} sqrt(%divide.453)
  %broadcast.2048 = f32[32,126,53248]{2,1,0} broadcast(%constant.2590), dimensions={}
  %add.281 = f32[32,126,53248]{2,0,1} add(%sqrt.2, %broadcast.2048)
  %multiply.451 = f32[32,126,53248]{2,1,0} multiply(%broadcast.2044, %add.281)
  %divide.454 = f32[32,126,53248]{2,0,1} divide(%add.279, %multiply.451)
  %multiply.452 = f32[32,126,53248]{2,1,0} multiply(%param.50, %broadcast.2042)
  %add.282 = f32[32,126,53248]{2,0,1} add(%divide.454, %multiply.452)
  %multiply.453 = f32[32,126,53248]{2,1,0} multiply(%broadcast.2039, %add.282)
  %add.283 = f32[32,126,53248]{2,1,0} add(%param.50, %multiply.453)
  %divide.455 = f32[32,126,53248]{2,0,1} divide(%transpose.70, %broadcast.2041)
  %select.462 = f32[32,126,53248]{2,0,1} select(%broadcast.2040, %transpose.70, %divide.455)
  %multiply.454 = f32[32,126,53248]{2,0,1} multiply(%select.462, %broadcast.2042)
  %param.112 = f32[32,126,53248]{2,1,0} parameter(58), sharding={devices=[512,1,1]<=[512]}
  %multiply.455 = f32[32,126,53248]{2,1,0} multiply(%param.112, %broadcast.2043)
  %add.284 = f32[32,126,53248]{2,0,1} add(%multiply.454, %multiply.455)
  %multiply.456 = f32[32,126,53248]{2,0,1} multiply(%select.462, %select.462)
  %multiply.457 = f32[32,126,53248]{2,0,1} multiply(%multiply.456, %broadcast.2045)
  %param.113 = f32[32,126,53248]{2,1,0} parameter(70), sharding={devices=[512,1,1]<=[512]}
  %multiply.458 = f32[32,126,53248]{2,1,0} multiply(%param.113, %broadcast.2046)
  %add.285 = f32[32,126,53248]{2,0,1} add(%multiply.457, %multiply.458)
  %divide.456 = f32[32,126,53248]{2,0,1} divide(%add.285, %broadcast.2047)
  %sqrt.3 = f32[32,126,53248]{2,0,1} sqrt(%divide.456)
  %add.286 = f32[32,126,53248]{2,0,1} add(%sqrt.3, %broadcast.2048)
  %multiply.459 = f32[32,126,53248]{2,1,0} multiply(%broadcast.2044, %add.286)
  %divide.457 = f32[32,126,53248]{2,0,1} divide(%add.284, %multiply.459)
  %multiply.460 = f32[32,126,53248]{2,1,0} multiply(%param.51, %broadcast.2042)
  %add.287 = f32[32,126,53248]{2,0,1} add(%divide.457, %multiply.460)
  %multiply.461 = f32[32,126,53248]{2,1,0} multiply(%broadcast.2039, %add.287)
  %add.288 = f32[32,126,53248]{2,1,0} add(%param.51, %multiply.461)
  %broadcast.2054 = f32[53248,126,32]{2,1,0} broadcast(%multiply.424), dimensions={}
  %broadcast.2055 = pred[53248,126,32]{2,0,1} broadcast(%compare.387), dimensions={}
  %broadcast.2056 = f32[53248,126,32]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.458 = f32[53248,126,32]{2,0,1} divide(%transpose.71, %broadcast.2056)
  %select.463 = f32[53248,126,32]{2,0,1} select(%broadcast.2055, %transpose.71, %divide.458)
  %broadcast.2057 = f32[53248,126,32]{2,1,0} broadcast(%constant.2691), dimensions={}
  %multiply.462 = f32[53248,126,32]{2,0,1} multiply(%select.463, %broadcast.2057)
  %param.114 = f32[53248,126,32]{2,1,0} parameter(59), sharding={devices=[1,1,512]<=[512]}
  %broadcast.2059 = f32[53248,126,32]{2,1,0} broadcast(%constant.2692), dimensions={}
  %multiply.463 = f32[53248,126,32]{2,1,0} multiply(%param.114, %broadcast.2059)
  %add.289 = f32[53248,126,32]{2,0,1} add(%multiply.462, %multiply.463)
  %broadcast.2061 = f32[53248,126,32]{2,1,0} broadcast(%subtract.23), dimensions={}
  %multiply.464 = f32[53248,126,32]{2,0,1} multiply(%select.463, %select.463)
  %broadcast.2062 = f32[53248,126,32]{2,1,0} broadcast(%constant.2698), dimensions={}
  %multiply.465 = f32[53248,126,32]{2,0,1} multiply(%multiply.464, %broadcast.2062)
  %param.115 = f32[53248,126,32]{2,1,0} parameter(71), sharding={devices=[1,1,512]<=[512]}
  %broadcast.2063 = f32[53248,126,32]{2,1,0} broadcast(%constant.2699), dimensions={}
  %multiply.466 = f32[53248,126,32]{2,1,0} multiply(%param.115, %broadcast.2063)
  %add.290 = f32[53248,126,32]{2,0,1} add(%multiply.465, %multiply.466)
  %broadcast.2064 = f32[53248,126,32]{2,1,0} broadcast(%subtract.24), dimensions={}
  %divide.459 = f32[53248,126,32]{2,0,1} divide(%add.290, %broadcast.2064)
  %sqrt.4 = f32[53248,126,32]{2,0,1} sqrt(%divide.459)
  %broadcast.2065 = f32[53248,126,32]{2,1,0} broadcast(%constant.2590), dimensions={}
  %add.291 = f32[53248,126,32]{2,0,1} add(%sqrt.4, %broadcast.2065)
  %multiply.467 = f32[53248,126,32]{2,1,0} multiply(%broadcast.2061, %add.291)
  %divide.460 = f32[53248,126,32]{2,0,1} divide(%add.289, %multiply.467)
  %multiply.468 = f32[53248,126,32]{2,1,0} multiply(%param.52, %broadcast.2057)
  %add.292 = f32[53248,126,32]{2,0,1} add(%divide.460, %multiply.468)
  %multiply.469 = f32[53248,126,32]{2,1,0} multiply(%broadcast.2054, %add.292)
  %add.293 = f32[53248,126,32]{2,1,0} add(%param.52, %multiply.469)
  %broadcast.2066 = f32[16384,126]{1,0} broadcast(%multiply.424), dimensions={}
  %broadcast.2068 = pred[16384,126]{0,1} broadcast(%compare.387), dimensions={}
  %broadcast.2070 = f32[16384,126]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.461 = f32[16384,126]{0,1} divide(%transpose.72, %broadcast.2070)
  %select.464 = f32[16384,126]{0,1} select(%broadcast.2068, %transpose.72, %divide.461)
  %broadcast.2071 = f32[16384,126]{1,0} broadcast(%constant.2691), dimensions={}
  %multiply.470 = f32[16384,126]{0,1} multiply(%select.464, %broadcast.2071)
  %param.116 = f32[16384,126]{1,0} parameter(60), sharding={replicated}
  %broadcast.2072 = f32[16384,126]{1,0} broadcast(%constant.2692), dimensions={}
  %multiply.471 = f32[16384,126]{1,0} multiply(%param.116, %broadcast.2072)
  %add.294 = f32[16384,126]{0,1} add(%multiply.470, %multiply.471)
  %broadcast.2073 = f32[16384,126]{1,0} broadcast(%subtract.23), dimensions={}
  %multiply.472 = f32[16384,126]{0,1} multiply(%select.464, %select.464)
  %broadcast.2074 = f32[16384,126]{1,0} broadcast(%constant.2698), dimensions={}
  %multiply.473 = f32[16384,126]{0,1} multiply(%multiply.472, %broadcast.2074)
  %param.117 = f32[16384,126]{1,0} parameter(72), sharding={replicated}
  %broadcast.2075 = f32[16384,126]{1,0} broadcast(%constant.2699), dimensions={}
  %multiply.474 = f32[16384,126]{1,0} multiply(%param.117, %broadcast.2075)
  %add.295 = f32[16384,126]{0,1} add(%multiply.473, %multiply.474)
  %broadcast.2076 = f32[16384,126]{1,0} broadcast(%subtract.24), dimensions={}
  %divide.462 = f32[16384,126]{0,1} divide(%add.295, %broadcast.2076)
  %sqrt.5 = f32[16384,126]{0,1} sqrt(%divide.462)
  %broadcast.2077 = f32[16384,126]{1,0} broadcast(%constant.2590), dimensions={}
  %add.296 = f32[16384,126]{0,1} add(%sqrt.5, %broadcast.2077)
  %multiply.475 = f32[16384,126]{1,0} multiply(%broadcast.2073, %add.296)
  %divide.463 = f32[16384,126]{0,1} divide(%add.294, %multiply.475)
  %multiply.476 = f32[16384,126]{1,0} multiply(%param.53, %broadcast.2071)
  %add.297 = f32[16384,126]{0,1} add(%divide.463, %multiply.476)
  %multiply.477 = f32[16384,126]{1,0} multiply(%broadcast.2066, %add.297)
  %add.298 = f32[16384,126]{1,0} add(%param.53, %multiply.477)
  %divide.464 = f32[16384,126]{0,1} divide(%transpose.73, %broadcast.2070)
  %select.465 = f32[16384,126]{0,1} select(%broadcast.2068, %transpose.73, %divide.464)
  %multiply.478 = f32[16384,126]{0,1} multiply(%select.465, %broadcast.2071)
  %param.118 = f32[16384,126]{1,0} parameter(61), sharding={replicated}
  %multiply.479 = f32[16384,126]{1,0} multiply(%param.118, %broadcast.2072)
  %add.299 = f32[16384,126]{0,1} add(%multiply.478, %multiply.479)
  %multiply.480 = f32[16384,126]{0,1} multiply(%select.465, %select.465)
  %multiply.481 = f32[16384,126]{0,1} multiply(%multiply.480, %broadcast.2074)
  %param.119 = f32[16384,126]{1,0} parameter(73), sharding={replicated}
  %multiply.482 = f32[16384,126]{1,0} multiply(%param.119, %broadcast.2075)
  %add.301 = f32[16384,126]{0,1} add(%multiply.481, %multiply.482)
  %divide.465 = f32[16384,126]{0,1} divide(%add.301, %broadcast.2076)
  %sqrt.6 = f32[16384,126]{0,1} sqrt(%divide.465)
  %add.302 = f32[16384,126]{0,1} add(%sqrt.6, %broadcast.2077)
  %multiply.483 = f32[16384,126]{1,0} multiply(%broadcast.2073, %add.302)
  %divide.466 = f32[16384,126]{0,1} divide(%add.299, %multiply.483)
  %multiply.484 = f32[16384,126]{1,0} multiply(%param.54, %broadcast.2071)
  %add.303 = f32[16384,126]{0,1} add(%divide.466, %multiply.484)
  %multiply.485 = f32[16384,126]{1,0} multiply(%broadcast.2066, %add.303)
  %add.304 = f32[16384,126]{1,0} add(%param.54, %multiply.485)
  %broadcast.2084 = f32[32,126,8,128]{3,2,1,0} broadcast(%multiply.424), dimensions={}
  %broadcast.2085 = pred[32,126,8,128]{3,2,0,1} broadcast(%compare.387), dimensions={}
  %broadcast.2086 = f32[32,126,8,128]{3,2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.467 = f32[32,126,8,128]{3,2,0,1} divide(%transpose.74, %broadcast.2086)
  %select.466 = f32[32,126,8,128]{3,2,0,1} select(%broadcast.2085, %transpose.74, %divide.467)
  %broadcast.2087 = f32[32,126,8,128]{3,2,1,0} broadcast(%constant.2691), dimensions={}
  %multiply.486 = f32[32,126,8,128]{3,2,0,1} multiply(%select.466, %broadcast.2087)
  %param.120 = f32[32,126,8,128]{3,2,1,0} parameter(62), sharding={devices=[512,1,1,1]<=[512]}
  %broadcast.2088 = f32[32,126,8,128]{3,2,1,0} broadcast(%constant.2692), dimensions={}
  %multiply.487 = f32[32,126,8,128]{3,2,1,0} multiply(%param.120, %broadcast.2088)
  %add.305 = f32[32,126,8,128]{3,2,0,1} add(%multiply.486, %multiply.487)
  %broadcast.2089 = f32[32,126,8,128]{3,2,1,0} broadcast(%subtract.23), dimensions={}
  %multiply.488 = f32[32,126,8,128]{3,2,0,1} multiply(%select.466, %select.466)
  %broadcast.2090 = f32[32,126,8,128]{3,2,1,0} broadcast(%constant.2698), dimensions={}
  %multiply.489 = f32[32,126,8,128]{3,2,0,1} multiply(%multiply.488, %broadcast.2090)
  %param.121 = f32[32,126,8,128]{3,2,1,0} parameter(74), sharding={devices=[512,1,1,1]<=[512]}
  %broadcast.2092 = f32[32,126,8,128]{3,2,1,0} broadcast(%constant.2699), dimensions={}
  %multiply.490 = f32[32,126,8,128]{3,2,1,0} multiply(%param.121, %broadcast.2092)
  %add.306 = f32[32,126,8,128]{3,2,0,1} add(%multiply.489, %multiply.490)
  %broadcast.2093 = f32[32,126,8,128]{3,2,1,0} broadcast(%subtract.24), dimensions={}
  %divide.468 = f32[32,126,8,128]{3,2,0,1} divide(%add.306, %broadcast.2093)
  %sqrt.7 = f32[32,126,8,128]{3,2,0,1} sqrt(%divide.468)
  %broadcast.2094 = f32[32,126,8,128]{3,2,1,0} broadcast(%constant.2590), dimensions={}
  %add.307 = f32[32,126,8,128]{3,2,0,1} add(%sqrt.7, %broadcast.2094)
  %multiply.491 = f32[32,126,8,128]{3,2,1,0} multiply(%broadcast.2089, %add.307)
  %divide.469 = f32[32,126,8,128]{3,2,0,1} divide(%add.305, %multiply.491)
  %multiply.492 = f32[32,126,8,128]{3,2,1,0} multiply(%param.55, %broadcast.2087)
  %add.308 = f32[32,126,8,128]{3,2,0,1} add(%divide.469, %multiply.492)
  %multiply.493 = f32[32,126,8,128]{3,2,1,0} multiply(%broadcast.2084, %add.308)
  %add.309 = f32[32,126,8,128]{3,2,1,0} add(%param.55, %multiply.493)
  %broadcast.2095 = f32[128,126,128,32]{3,2,1,0} broadcast(%multiply.424), dimensions={}
  %broadcast.2097 = pred[128,126,128,32]{3,2,0,1} broadcast(%compare.387), dimensions={}
  %broadcast.2098 = f32[128,126,128,32]{3,2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.470 = f32[128,126,128,32]{3,2,0,1} divide(%transpose.75, %broadcast.2098)
  %select.467 = f32[128,126,128,32]{3,2,0,1} select(%broadcast.2097, %transpose.75, %divide.470)
  %broadcast.2100 = f32[128,126,128,32]{3,2,1,0} broadcast(%constant.2691), dimensions={}
  %multiply.494 = f32[128,126,128,32]{3,2,0,1} multiply(%select.467, %broadcast.2100)
  %param.122 = f32[128,126,128,32]{3,2,1,0} parameter(63), sharding={devices=[1,1,1,512]<=[512]}
  %broadcast.2101 = f32[128,126,128,32]{3,2,1,0} broadcast(%constant.2692), dimensions={}
  %multiply.495 = f32[128,126,128,32]{3,2,1,0} multiply(%param.122, %broadcast.2101)
  %add.310 = f32[128,126,128,32]{3,2,0,1} add(%multiply.494, %multiply.495)
  %broadcast.2102 = f32[128,126,128,32]{3,2,1,0} broadcast(%subtract.23), dimensions={}
  %multiply.496 = f32[128,126,128,32]{3,2,0,1} multiply(%select.467, %select.467)
  %broadcast.2103 = f32[128,126,128,32]{3,2,1,0} broadcast(%constant.2698), dimensions={}
  %multiply.497 = f32[128,126,128,32]{3,2,0,1} multiply(%multiply.496, %broadcast.2103)
  %param.123 = f32[128,126,128,32]{3,2,1,0} parameter(75), sharding={devices=[1,1,1,512]<=[512]}
  %broadcast.2104 = f32[128,126,128,32]{3,2,1,0} broadcast(%constant.2699), dimensions={}
  %multiply.498 = f32[128,126,128,32]{3,2,1,0} multiply(%param.123, %broadcast.2104)
  %add.311 = f32[128,126,128,32]{3,2,0,1} add(%multiply.497, %multiply.498)
  %broadcast.2106 = f32[128,126,128,32]{3,2,1,0} broadcast(%subtract.24), dimensions={}
  %divide.471 = f32[128,126,128,32]{3,2,0,1} divide(%add.311, %broadcast.2106)
  %sqrt.8 = f32[128,126,128,32]{3,2,0,1} sqrt(%divide.471)
  %broadcast.2108 = f32[128,126,128,32]{3,2,1,0} broadcast(%constant.2590), dimensions={}
  %add.312 = f32[128,126,128,32]{3,2,0,1} add(%sqrt.8, %broadcast.2108)
  %multiply.499 = f32[128,126,128,32]{3,2,1,0} multiply(%broadcast.2102, %add.312)
  %divide.472 = f32[128,126,128,32]{3,2,0,1} divide(%add.310, %multiply.499)
  %multiply.500 = f32[128,126,128,32]{3,2,1,0} multiply(%param.56, %broadcast.2100)
  %add.313 = f32[128,126,128,32]{3,2,0,1} add(%divide.472, %multiply.500)
  %multiply.501 = f32[128,126,128,32]{3,2,1,0} multiply(%broadcast.2095, %add.313)
  %add.314 = f32[128,126,128,32]{3,2,1,0} add(%param.56, %multiply.501)
  %broadcast.2109 = f32[32,126,128,128]{3,2,1,0} broadcast(%multiply.424), dimensions={}
  %broadcast.2110 = pred[32,126,128,128]{3,2,0,1} broadcast(%compare.387), dimensions={}
  %broadcast.2111 = f32[32,126,128,128]{3,2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.473 = f32[32,126,128,128]{3,2,0,1} divide(%transpose.76, %broadcast.2111)
  %select.468 = f32[32,126,128,128]{3,2,0,1} select(%broadcast.2110, %transpose.76, %divide.473)
  %broadcast.2112 = f32[32,126,128,128]{3,2,1,0} broadcast(%constant.2691), dimensions={}
  %multiply.502 = f32[32,126,128,128]{3,2,0,1} multiply(%select.468, %broadcast.2112)
  %param.124 = f32[32,126,128,128]{3,2,1,0} parameter(64), sharding={devices=[512,1,1,1]<=[512]}
  %broadcast.2113 = f32[32,126,128,128]{3,2,1,0} broadcast(%constant.2692), dimensions={}
  %multiply.503 = f32[32,126,128,128]{3,2,1,0} multiply(%param.124, %broadcast.2113)
  %add.315 = f32[32,126,128,128]{3,2,0,1} add(%multiply.502, %multiply.503)
  %broadcast.2114 = f32[32,126,128,128]{3,2,1,0} broadcast(%subtract.23), dimensions={}
  %multiply.504 = f32[32,126,128,128]{3,2,0,1} multiply(%select.468, %select.468)
  %broadcast.2115 = f32[32,126,128,128]{3,2,1,0} broadcast(%constant.2698), dimensions={}
  %multiply.505 = f32[32,126,128,128]{3,2,0,1} multiply(%multiply.504, %broadcast.2115)
  %param.125 = f32[32,126,128,128]{3,2,1,0} parameter(76), sharding={devices=[512,1,1,1]<=[512]}
  %broadcast.2117 = f32[32,126,128,128]{3,2,1,0} broadcast(%constant.2699), dimensions={}
  %multiply.506 = f32[32,126,128,128]{3,2,1,0} multiply(%param.125, %broadcast.2117)
  %add.316 = f32[32,126,128,128]{3,2,0,1} add(%multiply.505, %multiply.506)
  %broadcast.2118 = f32[32,126,128,128]{3,2,1,0} broadcast(%subtract.24), dimensions={}
  %divide.474 = f32[32,126,128,128]{3,2,0,1} divide(%add.316, %broadcast.2118)
  %sqrt.9 = f32[32,126,128,128]{3,2,0,1} sqrt(%divide.474)
  %broadcast.2119 = f32[32,126,128,128]{3,2,1,0} broadcast(%constant.2590), dimensions={}
  %add.317 = f32[32,126,128,128]{3,2,0,1} add(%sqrt.9, %broadcast.2119)
  %multiply.507 = f32[32,126,128,128]{3,2,1,0} multiply(%broadcast.2114, %add.317)
  %divide.475 = f32[32,126,128,128]{3,2,0,1} divide(%add.315, %multiply.507)
  %multiply.508 = f32[32,126,128,128]{3,2,1,0} multiply(%param.57, %broadcast.2112)
  %add.318 = f32[32,126,128,128]{3,2,0,1} add(%divide.475, %multiply.508)
  %multiply.509 = f32[32,126,128,128]{3,2,1,0} multiply(%broadcast.2109, %add.318)
  %add.319 = f32[32,126,128,128]{3,2,1,0} add(%param.57, %multiply.509)
  %divide.476 = f32[32,126,8,128]{3,2,0,1} divide(%transpose.77, %broadcast.2086)
  %select.469 = f32[32,126,8,128]{3,2,0,1} select(%broadcast.2085, %transpose.77, %divide.476)
  %multiply.510 = f32[32,126,8,128]{3,2,0,1} multiply(%select.469, %broadcast.2087)
  %param.126 = f32[32,126,8,128]{3,2,1,0} parameter(65), sharding={devices=[512,1,1,1]<=[512]}
  %multiply.511 = f32[32,126,8,128]{3,2,1,0} multiply(%param.126, %broadcast.2088)
  %add.320 = f32[32,126,8,128]{3,2,0,1} add(%multiply.510, %multiply.511)
  %multiply.512 = f32[32,126,8,128]{3,2,0,1} multiply(%select.469, %select.469)
  %multiply.513 = f32[32,126,8,128]{3,2,0,1} multiply(%multiply.512, %broadcast.2090)
  %param.127 = f32[32,126,8,128]{3,2,1,0} parameter(77), sharding={devices=[512,1,1,1]<=[512]}
  %multiply.514 = f32[32,126,8,128]{3,2,1,0} multiply(%param.127, %broadcast.2092)
  %add.321 = f32[32,126,8,128]{3,2,0,1} add(%multiply.513, %multiply.514)
  %divide.477 = f32[32,126,8,128]{3,2,0,1} divide(%add.321, %broadcast.2093)
  %sqrt.10 = f32[32,126,8,128]{3,2,0,1} sqrt(%divide.477)
  %add.322 = f32[32,126,8,128]{3,2,0,1} add(%sqrt.10, %broadcast.2094)
  %multiply.515 = f32[32,126,8,128]{3,2,1,0} multiply(%broadcast.2089, %add.322)
  %divide.478 = f32[32,126,8,128]{3,2,0,1} divide(%add.320, %multiply.515)
  %multiply.516 = f32[32,126,8,128]{3,2,1,0} multiply(%param.58, %broadcast.2087)
  %add.323 = f32[32,126,8,128]{3,2,0,1} add(%divide.478, %multiply.516)
  %multiply.517 = f32[32,126,8,128]{3,2,1,0} multiply(%broadcast.2084, %add.323)
  %add.324 = f32[32,126,8,128]{3,2,1,0} add(%param.58, %multiply.517)
  %broadcast.2125 = f32[32,128256]{1,0} broadcast(%multiply.424), dimensions={}
  %broadcast.2126 = pred[32,128256]{0,1} broadcast(%compare.387), dimensions={}
  %broadcast.2127 = f32[32,128256]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.479 = f32[32,128256]{0,1} divide(%convert.473, %broadcast.2127)
  %select.470 = f32[32,128256]{0,1} select(%broadcast.2126, %convert.473, %divide.479)
  %broadcast.2128 = f32[32,128256]{1,0} broadcast(%constant.2691), dimensions={}
  %multiply.518 = f32[32,128256]{0,1} multiply(%select.470, %broadcast.2128)
  %param.128 = f32[32,128256]{1,0} parameter(66), sharding={devices=[512,1]<=[512]}
  %broadcast.2129 = f32[32,128256]{1,0} broadcast(%constant.2692), dimensions={}
  %multiply.519 = f32[32,128256]{1,0} multiply(%param.128, %broadcast.2129)
  %add.325 = f32[32,128256]{0,1} add(%multiply.518, %multiply.519)
  %broadcast.2130 = f32[32,128256]{1,0} broadcast(%subtract.23), dimensions={}
  %multiply.520 = f32[32,128256]{0,1} multiply(%select.470, %select.470)
  %broadcast.2131 = f32[32,128256]{1,0} broadcast(%constant.2698), dimensions={}
  %multiply.521 = f32[32,128256]{0,1} multiply(%multiply.520, %broadcast.2131)
  %param.129 = f32[32,128256]{1,0} parameter(78), sharding={devices=[512,1]<=[512]}
  %broadcast.2132 = f32[32,128256]{1,0} broadcast(%constant.2699), dimensions={}
  %multiply.522 = f32[32,128256]{1,0} multiply(%param.129, %broadcast.2132)
  %add.326 = f32[32,128256]{0,1} add(%multiply.521, %multiply.522)
  %broadcast.2133 = f32[32,128256]{1,0} broadcast(%subtract.24), dimensions={}
  %divide.480 = f32[32,128256]{0,1} divide(%add.326, %broadcast.2133)
  %sqrt.11 = f32[32,128256]{0,1} sqrt(%divide.480)
  %broadcast.2134 = f32[32,128256]{1,0} broadcast(%constant.2590), dimensions={}
  %add.327 = f32[32,128256]{0,1} add(%sqrt.11, %broadcast.2134)
  %multiply.523 = f32[32,128256]{1,0} multiply(%broadcast.2130, %add.327)
  %divide.481 = f32[32,128256]{0,1} divide(%add.325, %multiply.523)
  %multiply.524 = f32[32,128256]{1,0} multiply(%param.90, %broadcast.2128)
  %add.328 = f32[32,128256]{0,1} add(%divide.481, %multiply.524)
  %multiply.525 = f32[32,128256]{1,0} multiply(%broadcast.2125, %add.328)
  %add.329 = f32[32,128256]{1,0} add(%param.90, %multiply.525)
  %broadcast.2135 = f32[128256,32]{1,0} broadcast(%multiply.424), dimensions={}
  %broadcast.2136 = pred[128256,32]{0,1} broadcast(%compare.387), dimensions={}
  %broadcast.2137 = f32[128256,32]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.482 = f32[128256,32]{0,1} divide(%convert.474, %broadcast.2137)
  %select.471 = f32[128256,32]{0,1} select(%broadcast.2136, %convert.474, %divide.482)
  %broadcast.2138 = f32[128256,32]{1,0} broadcast(%constant.2691), dimensions={}
  %multiply.526 = f32[128256,32]{0,1} multiply(%select.471, %broadcast.2138)
  %param.130 = f32[128256,32]{1,0} parameter(67), sharding={devices=[1,512]<=[512]}
  %broadcast.2139 = f32[128256,32]{1,0} broadcast(%constant.2692), dimensions={}
  %multiply.527 = f32[128256,32]{1,0} multiply(%param.130, %broadcast.2139)
  %add.331 = f32[128256,32]{0,1} add(%multiply.526, %multiply.527)
  %broadcast.2140 = f32[128256,32]{1,0} broadcast(%subtract.23), dimensions={}
  %multiply.528 = f32[128256,32]{0,1} multiply(%select.471, %select.471)
  %broadcast.2142 = f32[128256,32]{1,0} broadcast(%constant.2698), dimensions={}
  %multiply.529 = f32[128256,32]{0,1} multiply(%multiply.528, %broadcast.2142)
  %param.131 = f32[128256,32]{1,0} parameter(79), sharding={devices=[1,512]<=[512]}
  %broadcast.2145 = f32[128256,32]{1,0} broadcast(%constant.2699), dimensions={}
  %multiply.530 = f32[128256,32]{1,0} multiply(%param.131, %broadcast.2145)
  %add.332 = f32[128256,32]{0,1} add(%multiply.529, %multiply.530)
  %broadcast.2147 = f32[128256,32]{1,0} broadcast(%subtract.24), dimensions={}
  %divide.483 = f32[128256,32]{0,1} divide(%add.332, %broadcast.2147)
  %sqrt.12 = f32[128256,32]{0,1} sqrt(%divide.483)
  %broadcast.2148 = f32[128256,32]{1,0} broadcast(%constant.2590), dimensions={}
  %add.333 = f32[128256,32]{0,1} add(%sqrt.12, %broadcast.2148)
  %multiply.531 = f32[128256,32]{1,0} multiply(%broadcast.2140, %add.333)
  %divide.484 = f32[128256,32]{0,1} divide(%add.331, %multiply.531)
  %multiply.532 = f32[128256,32]{1,0} multiply(%param.49, %broadcast.2138)
  %add.334 = f32[128256,32]{0,1} add(%divide.484, %multiply.532)
  %multiply.533 = f32[128256,32]{1,0} multiply(%broadcast.2135, %add.334)
  %add.335 = f32[128256,32]{1,0} add(%param.49, %multiply.533)
  %compare.389 = pred[] compare(%param.106, %constant.2695), direction=LT
  %add.336 = s32[] add(%param.106, %constant.2585)
  %select.472 = s32[] select(%compare.389, %add.336, %constant.2695)
  %multiply.534 = f32[126,1024]{1,0} multiply(%get-tuple-element.449, %get-tuple-element.449)
  %reduce.247 = f32[] reduce(%multiply.534, %constant.2591), dimensions={0,1}, to_apply=%region_121.3991
  %multiply.535 = f32[126,1]{1,0} multiply(%get-tuple-element.450, %get-tuple-element.450)
  %reduce.248 = f32[] reduce(%multiply.535, %constant.2591), dimensions={0,1}, to_apply=%region_122.3997
  %add.337 = f32[] add(%reduce.247, %reduce.248)
  %multiply.536 = f32[126,1024]{1,0} multiply(%get-tuple-element.451, %get-tuple-element.451)
  %reduce.249 = f32[] reduce(%multiply.536, %constant.2591), dimensions={0,1}, to_apply=%region_123.4004
  %add.338 = f32[] add(%add.337, %reduce.249)
  %multiply.537 = f32[126,1]{1,0} multiply(%get-tuple-element.452, %get-tuple-element.452)
  %reduce.250 = f32[] reduce(%multiply.537, %constant.2591), dimensions={0,1}, to_apply=%region_124.4011
  %add.339 = f32[] add(%add.338, %reduce.250)
  %multiply.538 = f32[126,1024]{1,0} multiply(%get-tuple-element.453, %get-tuple-element.453)
  %reduce.251 = f32[] reduce(%multiply.538, %constant.2591), dimensions={0,1}, to_apply=%region_125.4018
  %add.340 = f32[] add(%add.339, %reduce.251)
  %multiply.539 = f32[126,1]{1,0} multiply(%get-tuple-element.454, %get-tuple-element.454)
  %reduce.252 = f32[] reduce(%multiply.539, %constant.2591), dimensions={0,1}, to_apply=%region_126.4025
  %add.341 = f32[] add(%add.340, %reduce.252)
  %multiply.540 = f32[126,1024]{1,0} multiply(%get-tuple-element.455, %get-tuple-element.455)
  %reduce.253 = f32[] reduce(%multiply.540, %constant.2591), dimensions={0,1}, to_apply=%region_127.4032
  %add.342 = f32[] add(%add.341, %reduce.253)
  %multiply.541 = f32[126,1]{1,0} multiply(%get-tuple-element.506, %get-tuple-element.506)
  %reduce.254 = f32[] reduce(%multiply.541, %constant.2591), dimensions={0,1}, to_apply=%region_128.4039
  %add.343 = f32[] add(%add.342, %reduce.254)
  %multiply.542 = f32[126,1024]{1,0} multiply(%get-tuple-element.507, %get-tuple-element.507)
  %reduce.255 = f32[] reduce(%multiply.542, %constant.2591), dimensions={0,1}, to_apply=%region_129.4046
  %add.344 = f32[] add(%add.343, %reduce.255)
  %multiply.543 = f32[126,1]{1,0} multiply(%get-tuple-element.508, %get-tuple-element.508)
  %reduce.256 = f32[] reduce(%multiply.543, %constant.2591), dimensions={0,1}, to_apply=%region_130.4053
  %add.345 = f32[] add(%add.344, %reduce.256)
  %multiply.544 = f32[126,1024]{1,0} multiply(%get-tuple-element.509, %get-tuple-element.509)
  %reduce.257 = f32[] reduce(%multiply.544, %constant.2591), dimensions={0,1}, to_apply=%region_131.4060
  %add.346 = f32[] add(%add.345, %reduce.257)
  %multiply.545 = f32[126,1]{1,0} multiply(%get-tuple-element.510, %get-tuple-element.510)
  %reduce.258 = f32[] reduce(%multiply.545, %constant.2591), dimensions={0,1}, to_apply=%region_132.4067
  %add.347 = f32[] add(%add.346, %reduce.258)
  %multiply.546 = f32[126,1024]{1,0} multiply(%get-tuple-element.511, %get-tuple-element.511)
  %reduce.259 = f32[] reduce(%multiply.546, %constant.2591), dimensions={0,1}, to_apply=%region_133.4074
  %add.348 = f32[] add(%add.347, %reduce.259)
  %multiply.547 = f32[126,1]{1,0} multiply(%get-tuple-element.512, %get-tuple-element.512)
  %reduce.260 = f32[] reduce(%multiply.547, %constant.2591), dimensions={0,1}, to_apply=%region_134.4081
  %add.349 = f32[] add(%add.348, %reduce.260)
  %multiply.548 = f32[126,1024]{1,0} multiply(%get-tuple-element.513, %get-tuple-element.513)
  %reduce.261 = f32[] reduce(%multiply.548, %constant.2591), dimensions={0,1}, to_apply=%region_135.4088
  %add.350 = f32[] add(%add.349, %reduce.261)
  %multiply.549 = f32[126,1]{1,0} multiply(%get-tuple-element.514, %get-tuple-element.514)
  %reduce.262 = f32[] reduce(%multiply.549, %constant.2591), dimensions={0,1}, to_apply=%region_136.4095
  %add.351 = f32[] add(%add.350, %reduce.262)
  %multiply.550 = f32[126,1024]{1,0} multiply(%get-tuple-element.515, %get-tuple-element.515)
  %reduce.263 = f32[] reduce(%multiply.550, %constant.2591), dimensions={0,1}, to_apply=%region_137.4102
  %add.352 = f32[] add(%add.351, %reduce.263)
  %multiply.551 = f32[126,1]{1,0} multiply(%get-tuple-element.516, %get-tuple-element.516)
  %reduce.264 = f32[] reduce(%multiply.551, %constant.2591), dimensions={0,1}, to_apply=%region_138.4109
  %add.353 = f32[] add(%add.352, %reduce.264)
  %multiply.552 = f32[126,1024]{1,0} multiply(%get-tuple-element.517, %get-tuple-element.517)
  %reduce.265 = f32[] reduce(%multiply.552, %constant.2591), dimensions={0,1}, to_apply=%region_139.4116
  %add.354 = f32[] add(%add.353, %reduce.265)
  %multiply.553 = f32[126,1]{1,0} multiply(%get-tuple-element.518, %get-tuple-element.518)
  %reduce.266 = f32[] reduce(%multiply.553, %constant.2591), dimensions={0,1}, to_apply=%region_140.4123
  %add.355 = f32[] add(%add.354, %reduce.266)
  %multiply.554 = f32[126,1024]{1,0} multiply(%get-tuple-element.519, %get-tuple-element.519)
  %reduce.267 = f32[] reduce(%multiply.554, %constant.2591), dimensions={0,1}, to_apply=%region_141.4130
  %add.356 = f32[] add(%add.355, %reduce.267)
  %multiply.555 = f32[126,1]{1,0} multiply(%get-tuple-element.520, %get-tuple-element.520)
  %reduce.268 = f32[] reduce(%multiply.555, %constant.2591), dimensions={0,1}, to_apply=%region_142.4137
  %add.357 = f32[] add(%add.356, %reduce.268)
  %multiply.556 = f32[126,1024]{1,0} multiply(%get-tuple-element.521, %get-tuple-element.521)
  %reduce.269 = f32[] reduce(%multiply.556, %constant.2591), dimensions={0,1}, to_apply=%region_143.4144
  %add.358 = f32[] add(%add.357, %reduce.269)
  %multiply.557 = f32[126,1]{1,0} multiply(%get-tuple-element.522, %get-tuple-element.522)
  %reduce.270 = f32[] reduce(%multiply.557, %constant.2591), dimensions={0,1}, to_apply=%region_144.4151
  %add.359 = f32[] add(%add.358, %reduce.270)
  %multiply.558 = f32[126,1024]{1,0} multiply(%get-tuple-element.523, %get-tuple-element.523)
  %reduce.271 = f32[] reduce(%multiply.558, %constant.2591), dimensions={0,1}, to_apply=%region_145.4158
  %add.360 = f32[] add(%add.359, %reduce.271)
  %multiply.559 = f32[126,1]{1,0} multiply(%get-tuple-element.524, %get-tuple-element.524)
  %reduce.272 = f32[] reduce(%multiply.559, %constant.2591), dimensions={0,1}, to_apply=%region_146.4165
  %add.361 = f32[] add(%add.360, %reduce.272)
  %multiply.560 = f32[126,1024]{1,0} multiply(%get-tuple-element.525, %get-tuple-element.525)
  %reduce.273 = f32[] reduce(%multiply.560, %constant.2591), dimensions={0,1}, to_apply=%region_147.4172
  %add.362 = f32[] add(%add.361, %reduce.273)
  %multiply.561 = f32[126,1]{1,0} multiply(%get-tuple-element.526, %get-tuple-element.526)
  %reduce.274 = f32[] reduce(%multiply.561, %constant.2591), dimensions={0,1}, to_apply=%region_148.4179
  %add.363 = f32[] add(%add.362, %reduce.274)
  %multiply.562 = f32[126,1024]{1,0} multiply(%get-tuple-element.527, %get-tuple-element.527)
  %reduce.275 = f32[] reduce(%multiply.562, %constant.2591), dimensions={0,1}, to_apply=%region_149.4186
  %add.364 = f32[] add(%add.363, %reduce.275)
  %multiply.563 = f32[126,1]{1,0} multiply(%get-tuple-element.528, %get-tuple-element.528)
  %reduce.276 = f32[] reduce(%multiply.563, %constant.2591), dimensions={0,1}, to_apply=%region_150.4193
  %add.365 = f32[] add(%add.364, %reduce.276)
  %multiply.564 = f32[126,1024]{1,0} multiply(%get-tuple-element.529, %get-tuple-element.529)
  %reduce.277 = f32[] reduce(%multiply.564, %constant.2591), dimensions={0,1}, to_apply=%region_151.4200
  %add.366 = f32[] add(%add.365, %reduce.277)
  %multiply.565 = f32[126,1]{1,0} multiply(%get-tuple-element.530, %get-tuple-element.530)
  %reduce.278 = f32[] reduce(%multiply.565, %constant.2591), dimensions={0,1}, to_apply=%region_152.4207
  %add.367 = f32[] add(%add.366, %reduce.278)
  %multiply.566 = f32[126,1024]{1,0} multiply(%get-tuple-element.531, %get-tuple-element.531)
  %reduce.279 = f32[] reduce(%multiply.566, %constant.2591), dimensions={0,1}, to_apply=%region_153.4214
  %add.368 = f32[] add(%add.367, %reduce.279)
  %multiply.567 = f32[126,1]{1,0} multiply(%get-tuple-element.532, %get-tuple-element.532)
  %reduce.280 = f32[] reduce(%multiply.567, %constant.2591), dimensions={0,1}, to_apply=%region_154.4221
  %add.369 = f32[] add(%add.368, %reduce.280)
  %multiply.568 = f32[126,1024]{1,0} multiply(%get-tuple-element.533, %get-tuple-element.533)
  %reduce.281 = f32[] reduce(%multiply.568, %constant.2591), dimensions={0,1}, to_apply=%region_155.4228
  %add.370 = f32[] add(%add.369, %reduce.281)
  %multiply.569 = f32[126,1]{1,0} multiply(%get-tuple-element.534, %get-tuple-element.534)
  %reduce.282 = f32[] reduce(%multiply.569, %constant.2591), dimensions={0,1}, to_apply=%region_156.4235
  %add.371 = f32[] add(%add.370, %reduce.282)
  %multiply.570 = f32[126,1024]{1,0} multiply(%get-tuple-element.535, %get-tuple-element.535)
  %reduce.283 = f32[] reduce(%multiply.570, %constant.2591), dimensions={0,1}, to_apply=%region_157.4242
  %add.372 = f32[] add(%add.371, %reduce.283)
  %multiply.571 = f32[126,1]{1,0} multiply(%get-tuple-element.536, %get-tuple-element.536)
  %reduce.284 = f32[] reduce(%multiply.571, %constant.2591), dimensions={0,1}, to_apply=%region_158.4249
  %add.373 = f32[] add(%add.372, %reduce.284)
  %multiply.572 = f32[126,1024]{1,0} multiply(%get-tuple-element.537, %get-tuple-element.537)
  %reduce.285 = f32[] reduce(%multiply.572, %constant.2591), dimensions={0,1}, to_apply=%region_159.4256
  %add.374 = f32[] add(%add.373, %reduce.285)
  %multiply.573 = f32[126,1]{1,0} multiply(%get-tuple-element.538, %get-tuple-element.538)
  %reduce.286 = f32[] reduce(%multiply.573, %constant.2591), dimensions={0,1}, to_apply=%region_160.4263
  %add.375 = f32[] add(%add.374, %reduce.286)
  %multiply.574 = f32[126,1024]{1,0} multiply(%get-tuple-element.539, %get-tuple-element.539)
  %reduce.287 = f32[] reduce(%multiply.574, %constant.2591), dimensions={0,1}, to_apply=%region_161.4270
  %add.376 = f32[] add(%add.375, %reduce.287)
  %multiply.575 = f32[126,1]{1,0} multiply(%get-tuple-element.540, %get-tuple-element.540)
  %reduce.288 = f32[] reduce(%multiply.575, %constant.2591), dimensions={0,1}, to_apply=%region_162.4277
  %add.377 = f32[] add(%add.376, %reduce.288)
  %reduce.289 = f32[] reduce(%multiply.440, %constant.2591), dimensions={0}, to_apply=%region_163.4284
  %add.378 = f32[] add(%add.377, %reduce.289)
  %reduce.290 = f32[] reduce(%multiply.448, %constant.2591), dimensions={0,1,2}, to_apply=%region_164.4291
  %all-reduce.43 = f32[] all-reduce(%reduce.290), channel_id=60, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_164.4291.clone
  %add.379 = f32[] add(%add.378, %all-reduce.43)
  %reduce.291 = f32[] reduce(%multiply.456, %constant.2591), dimensions={0,1,2}, to_apply=%region_165.4298
  %all-reduce.44 = f32[] all-reduce(%reduce.291), channel_id=61, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_165.4298.clone
  %add.380 = f32[] add(%add.379, %all-reduce.44)
  %reduce.292 = f32[] reduce(%multiply.464, %constant.2591), dimensions={0,1,2}, to_apply=%region_166.4305
  %all-reduce.45 = f32[] all-reduce(%reduce.292), channel_id=62, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_166.4305.clone
  %add.381 = f32[] add(%add.380, %all-reduce.45)
  %reduce.293 = f32[] reduce(%multiply.472, %constant.2591), dimensions={0,1}, to_apply=%region_167.4312
  %add.383 = f32[] add(%add.381, %reduce.293)
  %reduce.294 = f32[] reduce(%multiply.480, %constant.2591), dimensions={0,1}, to_apply=%region_168.4319
  %add.384 = f32[] add(%add.383, %reduce.294)
  %reduce.295 = f32[] reduce(%multiply.488, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_169.4326
  %all-reduce.46 = f32[] all-reduce(%reduce.295), channel_id=63, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_169.4326.clone
  %add.385 = f32[] add(%add.384, %all-reduce.46)
  %reduce.296 = f32[] reduce(%multiply.496, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_170.4333
  %all-reduce.47 = f32[] all-reduce(%reduce.296), channel_id=64, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_170.4333.clone
  %add.386 = f32[] add(%add.385, %all-reduce.47)
  %reduce.297 = f32[] reduce(%multiply.504, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_171.4340
  %all-reduce.48 = f32[] all-reduce(%reduce.297), channel_id=65, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_171.4340.clone
  %add.387 = f32[] add(%add.386, %all-reduce.48)
  %reduce.298 = f32[] reduce(%multiply.512, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_172.4347
  %all-reduce.49 = f32[] all-reduce(%reduce.298), channel_id=66, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_172.4347.clone
  %add.388 = f32[] add(%add.387, %all-reduce.49)
  %reduce.299 = f32[] reduce(%multiply.520, %constant.2591), dimensions={0,1}, to_apply=%region_173.4354
  %all-reduce.50 = f32[] all-reduce(%reduce.299), channel_id=67, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_173.4354.clone
  %add.389 = f32[] add(%add.388, %all-reduce.50)
  %reduce.300 = f32[] reduce(%multiply.528, %constant.2591), dimensions={0,1}, to_apply=%region_174.4361
  %all-reduce.51 = f32[] all-reduce(%reduce.300), channel_id=68, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_174.4361.clone
  %add.390 = f32[] add(%add.389, %all-reduce.51)
  %sqrt.13 = f32[] sqrt(%add.390)
  %broadcast.2149 = f32[1,8192,128256]{2,1,0} broadcast(%log.2), dimensions={0,1}
  %subtract.25 = f32[1,8192,128256]{2,1,0} subtract(%subtract.19, %broadcast.2149)
  %broadcast.2150 = f32[1,8192,128256]{2,1,0} broadcast(%constant.2591), dimensions={}
  %select.473 = f32[1,8192,128256]{2,1,0} select(%compare.383, %subtract.25, %broadcast.2150)
  %reduce.301 = f32[1,8192]{1,0} reduce(%select.473, %constant.2591), dimensions={2}, to_apply=%region_24.1352
  %negate.32 = f32[1,8192]{1,0} negate(%reduce.301)
  %multiply.588 = f32[1,8192]{1,0} multiply(%add.255, %add.255)
  %multiply.589 = f32[1,8192]{1,0} multiply(%multiply.588, %broadcast.1953)
  %add.391 = f32[1,8192]{1,0} add(%negate.32, %multiply.589)
  %copy.85 = f32[1,8192]{1,0} copy(%add.391)
  %select.474 = f32[1,8192]{1,0} select(%compare.363, %copy.85, %broadcast.1953)
  %reduce.302 = f32[] reduce(%select.474, %constant.2591), dimensions={0,1}, to_apply=%region_25.1368
  %all-reduce.52 = f32[] all-reduce(%reduce.302), channel_id=69, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_25.1368.clone
  %divide.485 = f32[] divide(%all-reduce.52, %add.247)
  %multiply.632 = f32[16384]{0} multiply(%add.278, %add.278)
  %reduce.345 = f32[] reduce(%multiply.632, %constant.2591), dimensions={0}, to_apply=%region_271.5040
  %add.433 = f32[] add(%add.377, %reduce.345)
  %multiply.633 = f32[32,126,53248]{2,1,0} multiply(%add.283, %add.283)
  %reduce.346 = f32[] reduce(%multiply.633, %constant.2591), dimensions={0,1,2}, to_apply=%region_272.5047
  %all-reduce.53 = f32[] all-reduce(%reduce.346), channel_id=70, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_272.5047.clone
  %add.434 = f32[] add(%add.433, %all-reduce.53)
  %multiply.634 = f32[32,126,53248]{2,1,0} multiply(%add.288, %add.288)
  %reduce.347 = f32[] reduce(%multiply.634, %constant.2591), dimensions={0,1,2}, to_apply=%region_273.5054
  %all-reduce.54 = f32[] all-reduce(%reduce.347), channel_id=71, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_273.5054.clone
  %add.435 = f32[] add(%add.434, %all-reduce.54)
  %multiply.635 = f32[53248,126,32]{2,1,0} multiply(%add.293, %add.293)
  %reduce.348 = f32[] reduce(%multiply.635, %constant.2591), dimensions={0,1,2}, to_apply=%region_274.5061
  %all-reduce.55 = f32[] all-reduce(%reduce.348), channel_id=72, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_274.5061.clone
  %add.436 = f32[] add(%add.435, %all-reduce.55)
  %multiply.636 = f32[16384,126]{1,0} multiply(%add.298, %add.298)
  %reduce.349 = f32[] reduce(%multiply.636, %constant.2591), dimensions={0,1}, to_apply=%region_275.5068
  %add.437 = f32[] add(%add.436, %reduce.349)
  %multiply.637 = f32[16384,126]{1,0} multiply(%add.304, %add.304)
  %reduce.350 = f32[] reduce(%multiply.637, %constant.2591), dimensions={0,1}, to_apply=%region_276.5075
  %add.438 = f32[] add(%add.437, %reduce.350)
  %multiply.638 = f32[32,126,8,128]{3,2,1,0} multiply(%add.309, %add.309)
  %reduce.351 = f32[] reduce(%multiply.638, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_277.5082
  %all-reduce.56 = f32[] all-reduce(%reduce.351), channel_id=73, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_277.5082.clone
  %add.440 = f32[] add(%add.438, %all-reduce.56)
  %multiply.639 = f32[128,126,128,32]{3,2,1,0} multiply(%add.314, %add.314)
  %reduce.352 = f32[] reduce(%multiply.639, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_278.5089
  %all-reduce.57 = f32[] all-reduce(%reduce.352), channel_id=74, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_278.5089.clone
  %add.441 = f32[] add(%add.440, %all-reduce.57)
  %multiply.640 = f32[32,126,128,128]{3,2,1,0} multiply(%add.319, %add.319)
  %reduce.353 = f32[] reduce(%multiply.640, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_279.5096
  %all-reduce.58 = f32[] all-reduce(%reduce.353), channel_id=75, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_279.5096.clone
  %add.442 = f32[] add(%add.441, %all-reduce.58)
  %multiply.641 = f32[32,126,8,128]{3,2,1,0} multiply(%add.324, %add.324)
  %reduce.354 = f32[] reduce(%multiply.641, %constant.2591), dimensions={0,1,2,3}, to_apply=%region_280.5103
  %all-reduce.59 = f32[] all-reduce(%reduce.354), channel_id=76, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_280.5103.clone
  %add.443 = f32[] add(%add.442, %all-reduce.59)
  %multiply.642 = f32[32,128256]{1,0} multiply(%add.329, %add.329)
  %reduce.355 = f32[] reduce(%multiply.642, %constant.2591), dimensions={0,1}, to_apply=%region_281.5110
  %all-reduce.60 = f32[] all-reduce(%reduce.355), channel_id=77, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_281.5110.clone
  %add.444 = f32[] add(%add.443, %all-reduce.60)
  %multiply.643 = f32[128256,32]{1,0} multiply(%add.335, %add.335)
  %reduce.356 = f32[] reduce(%multiply.643, %constant.2591), dimensions={0,1}, to_apply=%region_282.5117
  %all-reduce.61 = f32[] all-reduce(%reduce.356), channel_id=78, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_282.5117.clone
  %add.445 = f32[] add(%add.444, %all-reduce.61)
  %sqrt.14 = f32[] sqrt(%add.445)
  %add.488 = f32[] add(%add.377, %reduce.235)
  %all-reduce.62 = f32[] all-reduce(%reduce.236), channel_id=79, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_218.4669.clone
  %add.489 = f32[] add(%add.488, %all-reduce.62)
  %all-reduce.63 = f32[] all-reduce(%reduce.237), channel_id=80, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_219.4676.clone
  %add.490 = f32[] add(%add.489, %all-reduce.63)
  %all-reduce.64 = f32[] all-reduce(%reduce.238), channel_id=81, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_220.4683.clone
  %add.491 = f32[] add(%add.490, %all-reduce.64)
  %add.492 = f32[] add(%add.491, %reduce.239)
  %add.493 = f32[] add(%add.492, %reduce.240)
  %all-reduce.65 = f32[] all-reduce(%reduce.241), channel_id=82, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_223.4704.clone
  %add.494 = f32[] add(%add.493, %all-reduce.65)
  %all-reduce.66 = f32[] all-reduce(%reduce.242), channel_id=83, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_224.4711.clone
  %add.495 = f32[] add(%add.494, %all-reduce.66)
  %all-reduce.67 = f32[] all-reduce(%reduce.243), channel_id=84, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_225.4718.clone
  %add.496 = f32[] add(%add.495, %all-reduce.67)
  %all-reduce.68 = f32[] all-reduce(%reduce.244), channel_id=85, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_226.4725.clone
  %add.497 = f32[] add(%add.496, %all-reduce.68)
  %all-reduce.69 = f32[] all-reduce(%reduce.245), channel_id=86, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_227.4732.clone
  %add.498 = f32[] add(%add.497, %all-reduce.69)
  %all-reduce.70 = f32[] all-reduce(%reduce.246), channel_id=87, replica_groups=[1,512]<=[512], use_global_device_ids=true, to_apply=%region_228.4739.clone
  %add.499 = f32[] add(%add.498, %all-reduce.70)
  %sqrt.15 = f32[] sqrt(%add.499)
  ROOT %tuple.114 = (s32[], f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=5*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=10*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=15*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=20*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=25*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=30*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, /*index=35*/f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[126,1024]{1,0}, /*index=40*/f32[126,1]{1,0}, f32[126,1024]{1,0}, f32[126,1]{1,0}, f32[16384]{0}, f32[32,126,53248]{2,1,0}, /*index=45*/f32[32,126,53248]{2,1,0}, f32[53248,126,32]{2,1,0}, f32[16384,126]{1,0}, f32[16384,126]{1,0}, f32[32,126,8,128]{3,2,1,0}, /*index=50*/f32[128,126,128,32]{3,2,1,0}, f32[32,126,128,128]{3,2,1,0}, f32[32,126,8,128]{3,2,1,0}, f32[32,128256]{1,0}, f32[128256,32]{1,0}, /*index=55*/s32[], f32[16384]{0}, f32[32,126,53248]{2,0,1}, f32[32,126,53248]{2,0,1}, f32[53248,126,32]{2,0,1}, /*index=60*/f32[16384,126]{0,1}, f32[16384,126]{0,1}, f32[32,126,8,128]{3,2,0,1}, f32[128,126,128,32]{3,2,0,1}, f32[32,126,128,128]{3,2,0,1}, /*index=65*/f32[32,126,8,128]{3,2,0,1}, f32[32,128256]{0,1}, f32[128256,32]{0,1}, f32[16384]{0}, f32[32,126,53248]{2,0,1}, /*index=70*/f32[32,126,53248]{2,0,1}, f32[53248,126,32]{2,0,1}, f32[16384,126]{0,1}, f32[16384,126]{0,1}, f32[32,126,8,128]{3,2,0,1}, /*index=75*/f32[128,126,128,32]{3,2,0,1}, f32[32,126,128,128]{3,2,0,1}, f32[32,126,8,128]{3,2,0,1}, f32[32,128256]{0,1}, f32[128256,32]{0,1}, /*index=80*/s32[], f32[], f32[], f32[], f32[], /*index=85*/f32[], s32[]) tuple(%add.246, %get-tuple-element.449, %get-tuple-element.450, %get-tuple-element.451, %get-tuple-element.452, /*index=5*/%get-tuple-element.453, %get-tuple-element.454, %get-tuple-element.455, %get-tuple-element.506, %get-tuple-element.507, /*index=10*/%get-tuple-element.508, %get-tuple-element.509, %get-tuple-element.510, %get-tuple-element.511, %get-tuple-element.512, /*index=15*/%get-tuple-element.513, %get-tuple-element.514, %get-tuple-element.515, %get-tuple-element.516, %get-tuple-element.517, /*index=20*/%get-tuple-element.518, %get-tuple-element.519, %get-tuple-element.520, %get-tuple-element.521, %get-tuple-element.522, /*index=25*/%get-tuple-element.523, %get-tuple-element.524, %get-tuple-element.525, %get-tuple-element.526, %get-tuple-element.527, /*index=30*/%get-tuple-element.528, %get-tuple-element.529, %get-tuple-element.530, %get-tuple-element.531, %get-tuple-element.532, /*index=35*/%get-tuple-element.533, %get-tuple-element.534, %get-tuple-element.535, %get-tuple-element.536, %get-tuple-element.537, /*index=40*/%get-tuple-element.538, %get-tuple-element.539, %get-tuple-element.540, %add.278, %add.283, /*index=45*/%add.288, %add.293, %add.298, %add.304, %add.309, /*index=50*/%add.314, %add.319, %add.324, %add.329, %add.335, /*index=55*/%select.460, %add.273, %add.279, %add.284, %add.289, /*index=60*/%add.294, %add.299, %add.305, %add.310, %add.315, /*index=65*/%add.320, %add.325, %add.331, %add.275, %add.280, /*index=70*/%add.285, %add.290, %add.295, %add.301, %add.306, /*index=75*/%add.311, %add.316, %add.321, %add.326, %add.332, /*index=80*/%select.472, %sqrt.13, %divide.485, %constant.2591, %sqrt.14, /*index=85*/%sqrt.15, %all-reduce.30)
}

