HloModule jit_train_step, input_output_alias={ {0}: (0, {}, may-alias), {1}: (1, {}, may-alias), {2}: (2, {}, may-alias), {3}: (3, {}, may-alias), {4}: (4, {}, may-alias), {5}: (5, {}, may-alias), {6}: (6, {}, may-alias), {7}: (7, {}, may-alias), {8}: (8, {}, may-alias), {9}: (9, {}, may-alias), {10}: (10, {}, may-alias), {11}: (11, {}, may-alias), {12}: (12, {}, may-alias), {13}: (13, {}, may-alias), {14}: (14, {}, may-alias), {15}: (15, {}, may-alias), {16}: (16, {}, may-alias), {17}: (17, {}, may-alias), {18}: (18, {}, may-alias), {19}: (19, {}, may-alias), {20}: (20, {}, may-alias), {21}: (21, {}, may-alias), {22}: (22, {}, may-alias), {23}: (23, {}, may-alias), {24}: (24, {}, may-alias), {25}: (25, {}, may-alias), {26}: (26, {}, may-alias), {27}: (27, {}, may-alias), {28}: (28, {}, may-alias), {29}: (29, {}, may-alias), {30}: (30, {}, may-alias), {31}: (31, {}, may-alias), {32}: (32, {}, may-alias), {33}: (33, {}, may-alias), {34}: (34, {}, may-alias), {35}: (35, {}, may-alias), {36}: (36, {}, may-alias), {37}: (37, {}, may-alias), {38}: (38, {}, may-alias), {39}: (39, {}, may-alias), {40}: (40, {}, may-alias), {41}: (41, {}, may-alias), {42}: (42, {}, may-alias), {43}: (43, {}, may-alias), {44}: (44, {}, may-alias), {45}: (45, {}, may-alias), {46}: (46, {}, may-alias), {47}: (47, {}, may-alias), {48}: (48, {}, may-alias), {49}: (49, {}, may-alias), {50}: (50, {}, may-alias), {51}: (51, {}, may-alias), {52}: (52, {}, may-alias), {53}: (53, {}, may-alias), {54}: (54, {}, may-alias), {55}: (55, {}, may-alias), {56}: (56, {}, may-alias), {57}: (57, {}, may-alias), {58}: (58, {}, may-alias), {59}: (59, {}, may-alias), {60}: (60, {}, may-alias), {61}: (61, {}, may-alias), {62}: (62, {}, may-alias), {63}: (63, {}, may-alias), {64}: (64, {}, may-alias), {65}: (65, {}, may-alias), {66}: (66, {}, may-alias), {67}: (67, {}, may-alias), {68}: (68, {}, may-alias), {69}: (69, {}, may-alias), {70}: (70, {}, may-alias), {71}: (71, {}, may-alias), {72}: (72, {}, may-alias), {73}: (73, {}, may-alias), {74}: (74, {}, may-alias), {75}: (75, {}, may-alias), {76}: (76, {}, may-alias), {77}: (77, {}, may-alias), {78}: (78, {}, may-alias), {79}: (79, {}, may-alias), {80}: (80, {}, may-alias), {81}: (81, {}, may-alias), {82}: (82, {}, may-alias), {83}: (83, {}, may-alias), {84}: (84, {}, may-alias), {85}: (85, {}, may-alias), {86}: (86, {}, may-alias), {87}: (87, {}, may-alias), {88}: (88, {}, may-alias), {89}: (89, {}, may-alias), {90}: (90, {}, may-alias), {91}: (91, {}, may-alias), {92}: (92, {}, may-alias), {93}: (93, {}, may-alias), {94}: (94, {}, may-alias), {95}: (95, {}, may-alias), {96}: (96, {}, may-alias), {97}: (97, {}, may-alias), {98}: (98, {}, may-alias), {99}: (99, {}, may-alias), {100}: (100, {}, may-alias), {101}: (101, {}, may-alias), {102}: (102, {}, may-alias), {103}: (103, {}, may-alias), {104}: (104, {}, may-alias), {105}: (105, {}, may-alias), {106}: (106, {}, may-alias), {107}: (107, {}, may-alias), {108}: (108, {}, may-alias), {109}: (109, {}, may-alias), {110}: (110, {}, may-alias), {111}: (111, {}, may-alias), {112}: (112, {}, may-alias), {113}: (113, {}, may-alias), {114}: (114, {}, may-alias), {115}: (115, {}, may-alias), {116}: (116, {}, may-alias), {117}: (117, {}, may-alias), {118}: (118, {}, may-alias), {119}: (119, {}, may-alias), {120}: (120, {}, may-alias), {121}: (121, {}, may-alias), {122}: (122, {}, may-alias), {123}: (123, {}, may-alias), {124}: (124, {}, may-alias), {125}: (125, {}, may-alias), {126}: (126, {}, may-alias), {127}: (127, {}, may-alias), {128}: (128, {}, may-alias), {129}: (129, {}, may-alias), {130}: (130, {}, may-alias), {131}: (131, {}, may-alias), {132}: (132, {}, may-alias), {133}: (133, {}, may-alias), {134}: (134, {}, may-alias), {135}: (135, {}, may-alias), {136}: (136, {}, may-alias), {137}: (137, {}, may-alias), {138}: (138, {}, may-alias), {139}: (139, {}, may-alias), {140}: (140, {}, may-alias), {141}: (141, {}, may-alias), {142}: (142, {}, may-alias), {143}: (143, {}, may-alias), {144}: (144, {}, may-alias), {145}: (145, {}, may-alias), {146}: (146, {}, may-alias), {147}: (147, {}, may-alias), {148}: (148, {}, may-alias), {149}: (149, {}, may-alias), {150}: (150, {}, may-alias), {151}: (151, {}, may-alias), {152}: (152, {}, may-alias), {153}: (153, {}, may-alias), {154}: (154, {}, may-alias), {155}: (155, {}, may-alias), {156}: (156, {}, may-alias), {157}: (157, {}, may-alias), {158}: (158, {}, may-alias), {159}: (159, {}, may-alias), {160}: (160, {}, may-alias), {161}: (161, {}, may-alias), {162}: (162, {}, may-alias), {163}: (163, {}, may-alias), {164}: (164, {}, may-alias), {165}: (165, {}, may-alias), {166}: (166, {}, may-alias), {167}: (167, {}, may-alias), {168}: (168, {}, may-alias), {169}: (169, {}, may-alias), {170}: (170, {}, may-alias), {171}: (171, {}, may-alias), {172}: (172, {}, may-alias), {173}: (173, {}, may-alias), {174}: (174, {}, may-alias), {175}: (175, {}, may-alias), {176}: (176, {}, may-alias), {177}: (177, {}, may-alias), {178}: (178, {}, may-alias), {179}: (179, {}, may-alias), {180}: (180, {}, may-alias), {181}: (181, {}, may-alias), {182}: (182, {}, may-alias), {183}: (183, {}, may-alias), {184}: (184, {}, may-alias), {185}: (185, {}, may-alias), {186}: (186, {}, may-alias), {187}: (187, {}, may-alias), {188}: (188, {}, may-alias), {189}: (189, {}, may-alias), {190}: (190, {}, may-alias), {191}: (191, {}, may-alias), {192}: (192, {}, may-alias), {193}: (193, {}, may-alias), {194}: (194, {}, may-alias), {195}: (195, {}, may-alias), {196}: (196, {}, may-alias), {197}: (197, {}, may-alias), {198}: (198, {}, may-alias), {199}: (199, {}, may-alias), {200}: (200, {}, may-alias), {201}: (201, {}, may-alias), {202}: (202, {}, may-alias), {203}: (203, {}, may-alias), {204}: (204, {}, may-alias), {205}: (205, {}, may-alias), {206}: (206, {}, may-alias), {207}: (207, {}, may-alias), {208}: (208, {}, may-alias), {209}: (209, {}, may-alias), {210}: (210, {}, may-alias), {211}: (211, {}, may-alias), {212}: (212, {}, may-alias), {213}: (213, {}, may-alias), {214}: (214, {}, may-alias), {215}: (215, {}, may-alias), {216}: (216, {}, may-alias), {217}: (217, {}, may-alias), {218}: (218, {}, may-alias), {219}: (219, {}, may-alias), {220}: (220, {}, may-alias), {221}: (221, {}, may-alias), {222}: (222, {}, may-alias), {223}: (223, {}, may-alias), {224}: (224, {}, may-alias), {225}: (225, {}, may-alias), {226}: (226, {}, may-alias), {227}: (227, {}, may-alias), {228}: (228, {}, may-alias), {229}: (229, {}, may-alias), {230}: (230, {}, may-alias), {231}: (231, {}, may-alias), {232}: (232, {}, may-alias), {233}: (233, {}, may-alias), {234}: (234, {}, may-alias), {235}: (235, {}, may-alias), {236}: (236, {}, may-alias), {237}: (237, {}, may-alias), {238}: (238, {}, may-alias), {239}: (239, {}, may-alias), {240}: (240, {}, may-alias), {241}: (241, {}, may-alias), {242}: (242, {}, may-alias), {243}: (243, {}, may-alias), {244}: (244, {}, may-alias), {245}: (245, {}, may-alias), {246}: (246, {}, may-alias), {247}: (247, {}, may-alias), {248}: (248, {}, may-alias), {249}: (249, {}, may-alias), {250}: (250, {}, may-alias), {251}: (251, {}, may-alias), {252}: (252, {}, may-alias), {253}: (253, {}, may-alias), {254}: (254, {}, may-alias), {255}: (255, {}, may-alias), {256}: (256, {}, may-alias), {257}: (257, {}, may-alias), {258}: (258, {}, may-alias), {259}: (259, {}, may-alias), {260}: (260, {}, may-alias), {261}: (261, {}, may-alias), {262}: (262, {}, may-alias), {263}: (263, {}, may-alias), {264}: (264, {}, may-alias), {265}: (265, {}, may-alias), {266}: (266, {}, may-alias), {267}: (267, {}, may-alias), {268}: (268, {}, may-alias), {269}: (269, {}, may-alias), {270}: (270, {}, may-alias), {271}: (271, {}, may-alias), {272}: (272, {}, may-alias), {273}: (273, {}, may-alias), {274}: (274, {}, may-alias), {275}: (275, {}, may-alias), {276}: (276, {}, may-alias), {277}: (277, {}, may-alias), {278}: (278, {}, may-alias), {279}: (279, {}, may-alias), {280}: (280, {}, may-alias), {281}: (281, {}, may-alias), {282}: (282, {}, may-alias), {283}: (283, {}, may-alias), {284}: (284, {}, may-alias), {285}: (285, {}, may-alias), {286}: (286, {}, may-alias), {287}: (287, {}, may-alias), {288}: (288, {}, may-alias), {289}: (289, {}, may-alias), {290}: (290, {}, may-alias), {291}: (291, {}, may-alias), {292}: (292, {}, may-alias), {293}: (293, {}, may-alias), {294}: (294, {}, may-alias), {295}: (295, {}, may-alias), {296}: (296, {}, may-alias), {297}: (297, {}, may-alias), {298}: (298, {}, may-alias), {299}: (299, {}, may-alias), {300}: (300, {}, may-alias), {301}: (301, {}, may-alias), {302}: (302, {}, may-alias), {303}: (303, {}, may-alias), {304}: (304, {}, may-alias), {305}: (305, {}, may-alias), {306}: (306, {}, may-alias), {307}: (307, {}, may-alias), {308}: (308, {}, may-alias), {309}: (309, {}, may-alias), {310}: (310, {}, may-alias), {311}: (311, {}, may-alias), {312}: (312, {}, may-alias), {313}: (313, {}, may-alias), {314}: (314, {}, may-alias), {315}: (315, {}, may-alias), {316}: (316, {}, may-alias), {317}: (317, {}, may-alias), {318}: (318, {}, may-alias), {319}: (319, {}, may-alias), {320}: (320, {}, may-alias), {321}: (321, {}, may-alias), {322}: (322, {}, may-alias), {323}: (323, {}, may-alias), {324}: (324, {}, may-alias), {325}: (325, {}, may-alias), {326}: (326, {}, may-alias), {327}: (327, {}, may-alias), {328}: (328, {}, may-alias), {329}: (329, {}, may-alias), {330}: (330, {}, may-alias), {331}: (331, {}, may-alias), {332}: (332, {}, may-alias), {333}: (333, {}, may-alias), {334}: (334, {}, may-alias), {335}: (335, {}, may-alias), {336}: (336, {}, may-alias), {337}: (337, {}, may-alias), {338}: (338, {}, may-alias), {339}: (339, {}, may-alias), {340}: (340, {}, may-alias), {341}: (341, {}, may-alias), {342}: (342, {}, may-alias), {343}: (343, {}, may-alias), {344}: (344, {}, may-alias), {345}: (345, {}, may-alias), {346}: (346, {}, may-alias), {347}: (347, {}, may-alias), {348}: (348, {}, may-alias), {349}: (349, {}, may-alias), {350}: (350, {}, may-alias), {351}: (351, {}, may-alias), {352}: (352, {}, may-alias), {353}: (353, {}, may-alias), {354}: (354, {}, may-alias), {355}: (355, {}, may-alias), {356}: (356, {}, may-alias), {357}: (357, {}, may-alias), {358}: (358, {}, may-alias), {359}: (359, {}, may-alias), {360}: (360, {}, may-alias), {361}: (361, {}, may-alias), {362}: (362, {}, may-alias), {363}: (363, {}, may-alias), {364}: (364, {}, may-alias), {365}: (365, {}, may-alias), {366}: (366, {}, may-alias), {367}: (367, {}, may-alias), {368}: (368, {}, may-alias), {369}: (369, {}, may-alias), {370}: (370, {}, may-alias), {371}: (371, {}, may-alias), {372}: (372, {}, may-alias), {373}: (373, {}, may-alias), {374}: (374, {}, may-alias), {375}: (375, {}, may-alias), {376}: (376, {}, may-alias), {377}: (377, {}, may-alias), {378}: (378, {}, may-alias), {379}: (379, {}, may-alias), {380}: (380, {}, may-alias), {381}: (381, {}, may-alias), {382}: (382, {}, may-alias), {383}: (383, {}, may-alias), {384}: (384, {}, may-alias), {385}: (385, {}, may-alias), {386}: (386, {}, may-alias), {387}: (387, {}, may-alias), {388}: (388, {}, may-alias), {389}: (389, {}, may-alias), {390}: (390, {}, may-alias), {391}: (391, {}, may-alias), {392}: (392, {}, may-alias), {393}: (393, {}, may-alias), {394}: (394, {}, may-alias), {395}: (395, {}, may-alias), {396}: (396, {}, may-alias), {397}: (397, {}, may-alias), {398}: (398, {}, may-alias), {399}: (399, {}, may-alias), {400}: (400, {}, may-alias), {401}: (401, {}, may-alias), {402}: (402, {}, may-alias), {403}: (403, {}, may-alias), {404}: (404, {}, may-alias), {405}: (405, {}, may-alias), {406}: (406, {}, may-alias), {407}: (407, {}, may-alias), {408}: (408, {}, may-alias), {409}: (409, {}, may-alias), {410}: (410, {}, may-alias), {411}: (411, {}, may-alias), {412}: (412, {}, may-alias), {413}: (413, {}, may-alias), {414}: (414, {}, may-alias), {415}: (415, {}, may-alias), {416}: (416, {}, may-alias), {417}: (417, {}, may-alias), {418}: (418, {}, may-alias), {419}: (419, {}, may-alias), {420}: (420, {}, may-alias), {421}: (421, {}, may-alias), {422}: (422, {}, may-alias), {423}: (423, {}, may-alias), {424}: (424, {}, may-alias), {425}: (425, {}, may-alias), {426}: (426, {}, may-alias), {427}: (427, {}, may-alias), {428}: (428, {}, may-alias), {429}: (429, {}, may-alias), {430}: (430, {}, may-alias), {431}: (431, {}, may-alias), {432}: (432, {}, may-alias), {433}: (433, {}, may-alias), {434}: (434, {}, may-alias), {435}: (435, {}, may-alias), {436}: (436, {}, may-alias), {437}: (437, {}, may-alias), {438}: (438, {}, may-alias), {439}: (439, {}, may-alias), {440}: (440, {}, may-alias), {441}: (441, {}, may-alias), {442}: (442, {}, may-alias), {443}: (443, {}, may-alias), {444}: (444, {}, may-alias), {445}: (445, {}, may-alias), {446}: (446, {}, may-alias), {447}: (447, {}, may-alias), {448}: (448, {}, may-alias), {449}: (449, {}, may-alias), {450}: (450, {}, may-alias), {451}: (451, {}, may-alias), {452}: (452, {}, may-alias), {453}: (453, {}, may-alias), {454}: (454, {}, may-alias), {455}: (455, {}, may-alias), {456}: (456, {}, may-alias), {457}: (457, {}, may-alias), {458}: (458, {}, may-alias), {459}: (459, {}, may-alias), {460}: (460, {}, may-alias), {461}: (461, {}, may-alias), {462}: (462, {}, may-alias), {463}: (463, {}, may-alias), {464}: (464, {}, may-alias), {465}: (465, {}, may-alias), {466}: (466, {}, may-alias), {467}: (467, {}, may-alias), {468}: (468, {}, may-alias), {469}: (469, {}, may-alias), {470}: (470, {}, may-alias), {471}: (471, {}, may-alias), {472}: (472, {}, may-alias), {473}: (473, {}, may-alias), {474}: (474, {}, may-alias), {475}: (475, {}, may-alias), {476}: (476, {}, may-alias), {477}: (477, {}, may-alias), {478}: (478, {}, may-alias), {479}: (479, {}, may-alias), {480}: (480, {}, may-alias), {481}: (481, {}, may-alias), {482}: (482, {}, may-alias), {483}: (483, {}, may-alias), {484}: (484, {}, may-alias), {485}: (485, {}, may-alias), {486}: (486, {}, may-alias), {487}: (487, {}, may-alias), {488}: (488, {}, may-alias), {489}: (489, {}, may-alias), {490}: (490, {}, may-alias), {491}: (491, {}, may-alias), {492}: (492, {}, may-alias), {493}: (493, {}, may-alias), {494}: (494, {}, may-alias), {495}: (495, {}, may-alias), {496}: (496, {}, may-alias), {497}: (497, {}, may-alias), {498}: (498, {}, may-alias), {499}: (499, {}, may-alias), {500}: (500, {}, may-alias), {501}: (501, {}, may-alias), {502}: (502, {}, may-alias), {503}: (503, {}, may-alias), {504}: (504, {}, may-alias), {505}: (505, {}, may-alias), {506}: (506, {}, may-alias), {507}: (507, {}, may-alias), {508}: (508, {}, may-alias), {509}: (509, {}, may-alias), {510}: (510, {}, may-alias), {511}: (511, {}, may-alias), {512}: (512, {}, may-alias), {513}: (513, {}, may-alias), {514}: (514, {}, may-alias), {515}: (515, {}, may-alias), {516}: (516, {}, may-alias), {517}: (517, {}, may-alias), {518}: (518, {}, may-alias), {519}: (519, {}, may-alias), {520}: (520, {}, may-alias), {521}: (521, {}, may-alias), {522}: (522, {}, may-alias), {523}: (523, {}, may-alias), {524}: (524, {}, may-alias), {525}: (525, {}, may-alias), {526}: (526, {}, may-alias), {527}: (527, {}, may-alias), {528}: (528, {}, may-alias), {529}: (529, {}, may-alias), {530}: (530, {}, may-alias), {531}: (531, {}, may-alias), {532}: (532, {}, may-alias), {533}: (533, {}, may-alias), {534}: (534, {}, may-alias), {535}: (535, {}, may-alias), {536}: (536, {}, may-alias), {537}: (537, {}, may-alias), {538}: (538, {}, may-alias), {539}: (539, {}, may-alias), {540}: (540, {}, may-alias), {541}: (541, {}, may-alias), {542}: (542, {}, may-alias), {543}: (543, {}, may-alias), {544}: (544, {}, may-alias), {545}: (545, {}, may-alias), {546}: (546, {}, may-alias), {547}: (547, {}, may-alias), {548}: (548, {}, may-alias), {549}: (549, {}, may-alias), {550}: (550, {}, may-alias), {551}: (551, {}, may-alias), {552}: (552, {}, may-alias), {553}: (553, {}, may-alias), {554}: (554, {}, may-alias), {555}: (555, {}, may-alias), {556}: (556, {}, may-alias), {557}: (557, {}, may-alias), {558}: (558, {}, may-alias), {559}: (559, {}, may-alias), {560}: (560, {}, may-alias), {561}: (561, {}, may-alias), {562}: (562, {}, may-alias), {563}: (563, {}, may-alias), {564}: (564, {}, may-alias), {565}: (565, {}, may-alias), {566}: (566, {}, may-alias), {567}: (567, {}, may-alias), {568}: (568, {}, may-alias), {569}: (569, {}, may-alias), {570}: (570, {}, may-alias), {571}: (571, {}, may-alias), {572}: (572, {}, may-alias), {573}: (573, {}, may-alias), {574}: (574, {}, may-alias), {575}: (575, {}, may-alias), {576}: (576, {}, may-alias), {577}: (577, {}, may-alias), {578}: (578, {}, may-alias), {579}: (579, {}, may-alias), {580}: (580, {}, may-alias), {581}: (581, {}, may-alias), {582}: (582, {}, may-alias), {583}: (583, {}, may-alias), {584}: (584, {}, may-alias), {585}: (585, {}, may-alias), {586}: (586, {}, may-alias), {587}: (587, {}, may-alias), {588}: (588, {}, may-alias), {589}: (589, {}, may-alias), {590}: (590, {}, may-alias), {591}: (591, {}, may-alias), {592}: (592, {}, may-alias), {593}: (593, {}, may-alias), {594}: (594, {}, may-alias), {595}: (595, {}, may-alias), {596}: (596, {}, may-alias), {597}: (597, {}, may-alias), {598}: (598, {}, may-alias), {599}: (599, {}, may-alias), {600}: (600, {}, may-alias), {601}: (601, {}, may-alias), {602}: (602, {}, may-alias), {603}: (603, {}, may-alias), {604}: (604, {}, may-alias), {605}: (605, {}, may-alias), {606}: (606, {}, may-alias), {607}: (607, {}, may-alias), {608}: (608, {}, may-alias), {609}: (609, {}, may-alias), {610}: (610, {}, may-alias), {611}: (611, {}, may-alias), {612}: (612, {}, may-alias), {613}: (613, {}, may-alias), {614}: (614, {}, may-alias), {615}: (615, {}, may-alias), {616}: (616, {}, may-alias), {617}: (617, {}, may-alias), {618}: (618, {}, may-alias), {619}: (619, {}, may-alias), {620}: (620, {}, may-alias), {621}: (621, {}, may-alias), {622}: (622, {}, may-alias), {623}: (623, {}, may-alias), {624}: (624, {}, may-alias), {625}: (625, {}, may-alias), {626}: (626, {}, may-alias), {627}: (627, {}, may-alias), {628}: (628, {}, may-alias), {629}: (629, {}, may-alias), {630}: (630, {}, may-alias), {631}: (631, {}, may-alias), {632}: (632, {}, may-alias), {633}: (633, {}, may-alias), {634}: (634, {}, may-alias), {635}: (635, {}, may-alias), {636}: (636, {}, may-alias), {637}: (637, {}, may-alias), {638}: (638, {}, may-alias), {639}: (639, {}, may-alias), {640}: (640, {}, may-alias), {641}: (641, {}, may-alias), {642}: (642, {}, may-alias), {643}: (643, {}, may-alias), {644}: (644, {}, may-alias), {645}: (645, {}, may-alias), {646}: (646, {}, may-alias), {647}: (647, {}, may-alias), {648}: (648, {}, may-alias), {649}: (649, {}, may-alias), {650}: (650, {}, may-alias), {651}: (651, {}, may-alias), {652}: (652, {}, may-alias), {653}: (653, {}, may-alias), {654}: (654, {}, may-alias), {655}: (655, {}, may-alias), {656}: (656, {}, may-alias), {657}: (657, {}, may-alias), {658}: (658, {}, may-alias), {659}: (659, {}, may-alias), {660}: (660, {}, may-alias), {661}: (661, {}, may-alias), {662}: (662, {}, may-alias), {663}: (663, {}, may-alias), {664}: (664, {}, may-alias), {665}: (665, {}, may-alias), {666}: (666, {}, may-alias), {667}: (667, {}, may-alias), {668}: (668, {}, may-alias), {669}: (669, {}, may-alias), {670}: (670, {}, may-alias), {671}: (671, {}, may-alias), {672}: (672, {}, may-alias), {673}: (673, {}, may-alias), {674}: (674, {}, may-alias), {675}: (675, {}, may-alias), {676}: (676, {}, may-alias), {677}: (677, {}, may-alias), {678}: (678, {}, may-alias), {679}: (679, {}, may-alias), {680}: (680, {}, may-alias), {681}: (681, {}, may-alias), {682}: (682, {}, may-alias), {683}: (683, {}, may-alias), {684}: (684, {}, may-alias), {685}: (685, {}, may-alias), {686}: (686, {}, may-alias), {687}: (687, {}, may-alias), {688}: (688, {}, may-alias), {689}: (689, {}, may-alias), {690}: (690, {}, may-alias), {691}: (691, {}, may-alias), {692}: (692, {}, may-alias), {693}: (693, {}, may-alias), {694}: (694, {}, may-alias), {695}: (695, {}, may-alias), {696}: (696, {}, may-alias), {697}: (697, {}, may-alias), {698}: (698, {}, may-alias), {699}: (699, {}, may-alias), {700}: (700, {}, may-alias), {701}: (701, {}, may-alias), {702}: (702, {}, may-alias), {703}: (703, {}, may-alias), {704}: (704, {}, may-alias), {705}: (705, {}, may-alias), {706}: (706, {}, may-alias), {707}: (707, {}, may-alias), {708}: (708, {}, may-alias), {709}: (709, {}, may-alias), {710}: (710, {}, may-alias), {711}: (711, {}, may-alias), {712}: (712, {}, may-alias), {713}: (713, {}, may-alias), {714}: (714, {}, may-alias), {715}: (715, {}, may-alias), {716}: (716, {}, may-alias), {717}: (717, {}, may-alias), {718}: (718, {}, may-alias), {719}: (719, {}, may-alias), {720}: (720, {}, may-alias), {721}: (721, {}, may-alias), {722}: (722, {}, may-alias), {723}: (723, {}, may-alias), {724}: (724, {}, may-alias), {725}: (725, {}, may-alias), {726}: (726, {}, may-alias), {727}: (727, {}, may-alias), {728}: (728, {}, may-alias), {729}: (729, {}, may-alias), {730}: (730, {}, may-alias), {731}: (731, {}, may-alias), {732}: (732, {}, may-alias), {733}: (733, {}, may-alias), {734}: (734, {}, may-alias), {735}: (735, {}, may-alias), {736}: (736, {}, may-alias), {737}: (737, {}, may-alias), {738}: (738, {}, may-alias), {739}: (739, {}, may-alias), {740}: (740, {}, may-alias), {741}: (741, {}, may-alias), {742}: (742, {}, may-alias), {743}: (743, {}, may-alias), {744}: (744, {}, may-alias), {745}: (745, {}, may-alias), {746}: (746, {}, may-alias), {747}: (747, {}, may-alias), {748}: (748, {}, may-alias), {749}: (749, {}, may-alias), {750}: (750, {}, may-alias), {751}: (751, {}, may-alias), {752}: (752, {}, may-alias), {753}: (753, {}, may-alias), {754}: (754, {}, may-alias), {755}: (755, {}, may-alias), {756}: (756, {}, may-alias), {757}: (757, {}, may-alias), {758}: (758, {}, may-alias), {759}: (759, {}, may-alias), {760}: (760, {}, may-alias), {761}: (761, {}, may-alias), {762}: (762, {}, may-alias), {763}: (763, {}, may-alias), {764}: (764, {}, may-alias), {765}: (765, {}, may-alias), {766}: (766, {}, may-alias), {767}: (767, {}, may-alias), {768}: (768, {}, may-alias), {769}: (769, {}, may-alias), {770}: (770, {}, may-alias), {771}: (771, {}, may-alias), {772}: (772, {}, may-alias), {773}: (773, {}, may-alias), {774}: (774, {}, may-alias), {775}: (775, {}, may-alias), {776}: (776, {}, may-alias), {777}: (777, {}, may-alias), {778}: (778, {}, may-alias), {779}: (779, {}, may-alias), {780}: (780, {}, may-alias), {781}: (781, {}, may-alias), {782}: (782, {}, may-alias), {783}: (783, {}, may-alias), {784}: (784, {}, may-alias), {785}: (785, {}, may-alias), {786}: (786, {}, may-alias), {787}: (787, {}, may-alias), {788}: (788, {}, may-alias), {789}: (789, {}, may-alias), {790}: (790, {}, may-alias), {791}: (791, {}, may-alias), {792}: (792, {}, may-alias), {793}: (793, {}, may-alias), {794}: (794, {}, may-alias), {795}: (795, {}, may-alias), {796}: (796, {}, may-alias), {797}: (797, {}, may-alias), {798}: (798, {}, may-alias), {799}: (799, {}, may-alias), {800}: (800, {}, may-alias), {801}: (801, {}, may-alias), {802}: (802, {}, may-alias), {803}: (803, {}, may-alias), {804}: (804, {}, may-alias), {805}: (805, {}, may-alias), {806}: (806, {}, may-alias), {807}: (807, {}, may-alias), {808}: (808, {}, may-alias), {809}: (809, {}, may-alias), {810}: (810, {}, may-alias), {811}: (811, {}, may-alias), {812}: (812, {}, may-alias), {813}: (813, {}, may-alias), {814}: (814, {}, may-alias), {815}: (815, {}, may-alias), {816}: (816, {}, may-alias), {817}: (817, {}, may-alias), {818}: (818, {}, may-alias), {819}: (819, {}, may-alias), {820}: (820, {}, may-alias), {821}: (821, {}, may-alias), {822}: (822, {}, may-alias), {823}: (823, {}, may-alias), {824}: (824, {}, may-alias), {825}: (825, {}, may-alias), {826}: (826, {}, may-alias), {827}: (827, {}, may-alias), {828}: (828, {}, may-alias), {829}: (829, {}, may-alias), {830}: (830, {}, may-alias), {831}: (831, {}, may-alias), {832}: (832, {}, may-alias), {833}: (833, {}, may-alias), {834}: (834, {}, may-alias), {835}: (835, {}, may-alias), {836}: (836, {}, may-alias), {837}: (837, {}, may-alias), {838}: (838, {}, may-alias), {839}: (839, {}, may-alias), {840}: (840, {}, may-alias), {841}: (841, {}, may-alias), {842}: (842, {}, may-alias), {843}: (843, {}, may-alias), {844}: (844, {}, may-alias), {845}: (845, {}, may-alias), {846}: (846, {}, may-alias), {847}: (847, {}, may-alias), {848}: (848, {}, may-alias), {849}: (849, {}, may-alias), {850}: (850, {}, may-alias), {851}: (851, {}, may-alias), {852}: (852, {}, may-alias), {853}: (853, {}, may-alias), {854}: (854, {}, may-alias), {855}: (855, {}, may-alias), {856}: (856, {}, may-alias), {857}: (857, {}, may-alias), {858}: (858, {}, may-alias), {859}: (859, {}, may-alias), {860}: (860, {}, may-alias), {861}: (861, {}, may-alias), {862}: (862, {}, may-alias), {863}: (863, {}, may-alias), {864}: (864, {}, may-alias), {865}: (865, {}, may-alias), {866}: (866, {}, may-alias), {867}: (867, {}, may-alias), {868}: (868, {}, may-alias), {869}: (869, {}, may-alias), {870}: (870, {}, may-alias), {871}: (871, {}, may-alias), {872}: (872, {}, may-alias), {873}: (873, {}, may-alias), {874}: (874, {}, may-alias), {875}: (875, {}, may-alias), {876}: (876, {}, may-alias), {877}: (877, {}, may-alias), {878}: (878, {}, may-alias), {879}: (879, {}, may-alias), {880}: (880, {}, may-alias), {881}: (881, {}, may-alias), {882}: (882, {}, may-alias), {883}: (883, {}, may-alias), {884}: (884, {}, may-alias), {885}: (885, {}, may-alias), {886}: (886, {}, may-alias), {887}: (887, {}, may-alias), {888}: (888, {}, may-alias), {889}: (889, {}, may-alias), {890}: (890, {}, may-alias), {891}: (891, {}, may-alias), {892}: (892, {}, may-alias), {893}: (893, {}, may-alias), {894}: (894, {}, may-alias), {895}: (895, {}, may-alias), {896}: (896, {}, may-alias), {897}: (897, {}, may-alias), {898}: (898, {}, may-alias), {899}: (899, {}, may-alias), {900}: (900, {}, may-alias), {901}: (901, {}, may-alias), {902}: (902, {}, may-alias), {903}: (903, {}, may-alias), {904}: (904, {}, may-alias), {905}: (905, {}, may-alias), {906}: (906, {}, may-alias), {907}: (907, {}, may-alias), {908}: (908, {}, may-alias), {909}: (909, {}, may-alias), {910}: (910, {}, may-alias), {911}: (911, {}, may-alias), {912}: (912, {}, may-alias), {913}: (913, {}, may-alias), {914}: (914, {}, may-alias), {915}: (915, {}, may-alias), {916}: (916, {}, may-alias), {917}: (917, {}, may-alias), {918}: (918, {}, may-alias), {919}: (919, {}, may-alias), {920}: (920, {}, may-alias), {921}: (921, {}, may-alias), {922}: (922, {}, may-alias), {923}: (923, {}, may-alias), {924}: (924, {}, may-alias), {925}: (925, {}, may-alias), {926}: (926, {}, may-alias), {927}: (927, {}, may-alias), {928}: (928, {}, may-alias), {929}: (929, {}, may-alias), {930}: (930, {}, may-alias), {931}: (931, {}, may-alias), {932}: (932, {}, may-alias), {933}: (933, {}, may-alias), {934}: (934, {}, may-alias), {935}: (935, {}, may-alias), {936}: (936, {}, may-alias), {937}: (937, {}, may-alias), {938}: (938, {}, may-alias), {939}: (939, {}, may-alias), {940}: (940, {}, may-alias), {941}: (941, {}, may-alias), {942}: (942, {}, may-alias), {943}: (943, {}, may-alias), {944}: (944, {}, may-alias), {945}: (945, {}, may-alias), {946}: (946, {}, may-alias), {947}: (947, {}, may-alias), {948}: (948, {}, may-alias), {949}: (949, {}, may-alias), {950}: (950, {}, may-alias), {951}: (951, {}, may-alias), {952}: (952, {}, may-alias), {953}: (953, {}, may-alias), {954}: (954, {}, may-alias), {955}: (955, {}, may-alias), {956}: (956, {}, may-alias), {957}: (957, {}, may-alias), {958}: (958, {}, may-alias), {959}: (959, {}, may-alias), {960}: (960, {}, may-alias), {961}: (961, {}, may-alias), {962}: (962, {}, may-alias), {963}: (963, {}, may-alias), {964}: (964, {}, may-alias), {965}: (965, {}, may-alias), {966}: (966, {}, may-alias), {967}: (967, {}, may-alias), {968}: (968, {}, may-alias), {969}: (969, {}, may-alias), {970}: (970, {}, may-alias), {971}: (971, {}, may-alias) }, entry_computation_layout={(s32[], bf16[4096]{0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=5*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=10*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=15*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=20*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=25*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=30*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=35*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=40*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=45*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=50*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=55*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=60*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=65*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=70*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=75*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=80*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=85*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=90*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=95*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=100*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=105*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=110*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=115*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=120*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=125*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=130*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=135*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=140*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=145*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=150*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=155*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=160*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=165*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=170*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=175*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=180*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=185*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=190*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=195*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=200*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=205*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=210*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=215*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=220*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=225*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=230*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=235*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=240*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=245*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=250*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=255*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=260*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=265*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=270*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=275*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=280*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=285*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=290*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=295*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=300*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=305*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=310*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=315*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=320*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, bf16[32000,512]{1,0}, s32[], /*index=325*/bf16[4096]{0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=330*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=335*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=340*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=345*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=350*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=355*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=360*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=365*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=370*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=375*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=380*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=385*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=390*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=395*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=400*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=405*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=410*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=415*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=420*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=425*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=430*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=435*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=440*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=445*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=450*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=455*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=460*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=465*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=470*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=475*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=480*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=485*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=490*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=495*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=500*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=505*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=510*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=515*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=520*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=525*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=530*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=535*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=540*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=545*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=550*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=555*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=560*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=565*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=570*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=575*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=580*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=585*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=590*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=595*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=600*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=605*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=610*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=615*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=620*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=625*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=630*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=635*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=640*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=645*/bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, bf16[32000,512]{1,0}, bf16[4096]{0}, bf16[512,8]{1,0}, /*index=650*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=655*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=660*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=665*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=670*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=675*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=680*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=685*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=690*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=695*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=700*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=705*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=710*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=715*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=720*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=725*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=730*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=735*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=740*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=745*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=750*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=755*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=760*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=765*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=770*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=775*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=780*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=785*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=790*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=795*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=800*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=805*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=810*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=815*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=820*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=825*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=830*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=835*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=840*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=845*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=850*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=855*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=860*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=865*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=870*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=875*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=880*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=885*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=890*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=895*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=900*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=905*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=910*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=915*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=920*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=925*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=930*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=935*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=940*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=945*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=950*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=955*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=960*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=965*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, /*index=970*/bf16[32000,512]{1,0}, s32[], s32[1,4096]{1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, /*index=975*/s32[1,4096]{1,0}, s32[1,4096]{1,0})->(s32[], bf16[4096]{0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=5*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=10*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=15*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=20*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=25*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=30*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=35*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=40*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=45*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=50*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=55*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=60*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=65*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=70*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=75*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=80*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=85*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=90*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=95*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=100*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=105*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=110*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=115*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=120*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=125*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=130*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=135*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=140*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=145*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=150*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=155*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=160*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=165*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=170*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=175*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=180*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=185*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=190*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=195*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=200*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=205*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=210*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=215*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=220*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=225*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=230*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=235*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=240*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=245*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=250*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=255*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=260*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=265*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=270*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=275*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=280*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=285*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=290*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=295*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=300*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=305*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=310*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=315*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=320*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, bf16[32000,512]{1,0}, s32[], /*index=325*/bf16[4096]{0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=330*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=335*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=340*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=345*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=350*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=355*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=360*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=365*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=370*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=375*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=380*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=385*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=390*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=395*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=400*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=405*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=410*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=415*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=420*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=425*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=430*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=435*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=440*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=445*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=450*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=455*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=460*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=465*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=470*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=475*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=480*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=485*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=490*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=495*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=500*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=505*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=510*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=515*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=520*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=525*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=530*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=535*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=540*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=545*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=550*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=555*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=560*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=565*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=570*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=575*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=580*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=585*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=590*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=595*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=600*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=605*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=610*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=615*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=620*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=625*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=630*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=635*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=640*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=645*/bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, bf16[32000,512]{1,0}, bf16[4096]{0}, bf16[512,8]{1,0}, /*index=650*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=655*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=660*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=665*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=670*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=675*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=680*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=685*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=690*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=695*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=700*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=705*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=710*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=715*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=720*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=725*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=730*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=735*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=740*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=745*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=750*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=755*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=760*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=765*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=770*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=775*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=780*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=785*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=790*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=795*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=800*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=805*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=810*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=815*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=820*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=825*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=830*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=835*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=840*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=845*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=850*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=855*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=860*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=865*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=870*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=875*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=880*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=885*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=890*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=895*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=900*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=905*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=910*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=915*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=920*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=925*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=930*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=935*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=940*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=945*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=950*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=955*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=960*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=965*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, /*index=970*/bf16[32000,512]{1,0}, s32[], bf16[], f32[], f32[], /*index=975*/bf16[], bf16[], s32[])}

%region_13.1655 (Arg_0.1652: s32[], Arg_1.1653: s32[]) -> s32[] {
  %Arg_0.1652 = s32[] parameter(0)
  %Arg_1.1653 = s32[] parameter(1)
  ROOT %add.1654 = s32[] add(%Arg_0.1652, %Arg_1.1653)
}

%region_14.1663 (Arg_0.1660: s32[], Arg_1.1661: s32[]) -> s32[] {
  %Arg_0.1660 = s32[] parameter(0)
  %Arg_1.1661 = s32[] parameter(1)
  ROOT %add.1662 = s32[] add(%Arg_0.1660, %Arg_1.1661)
}

%region_15.1668 (Arg_0.1665: s32[], Arg_1.1666: s32[]) -> s32[] {
  %Arg_0.1665 = s32[] parameter(0)
  %Arg_1.1666 = s32[] parameter(1)
  ROOT %maximum.1667 = s32[] maximum(%Arg_0.1665, %Arg_1.1666)
}

%region_24.1959 (Arg_0.1956: s32[], Arg_1.1957: s32[]) -> s32[] {
  %Arg_0.1956 = s32[] parameter(0)
  %Arg_1.1957 = s32[] parameter(1)
  ROOT %add.1958 = s32[] add(%Arg_0.1956, %Arg_1.1957)
}

%region_25.1967 (Arg_0.1964: s32[], Arg_1.1965: s32[]) -> s32[] {
  %Arg_0.1964 = s32[] parameter(0)
  %Arg_1.1965 = s32[] parameter(1)
  ROOT %add.1966 = s32[] add(%Arg_0.1964, %Arg_1.1965)
}

%region_26.1972 (Arg_0.1969: s32[], Arg_1.1970: s32[]) -> s32[] {
  %Arg_0.1969 = s32[] parameter(0)
  %Arg_1.1970 = s32[] parameter(1)
  ROOT %maximum.1971 = s32[] maximum(%Arg_0.1969, %Arg_1.1970)
}

%region_35.2263 (Arg_0.2260: s32[], Arg_1.2261: s32[]) -> s32[] {
  %Arg_0.2260 = s32[] parameter(0)
  %Arg_1.2261 = s32[] parameter(1)
  ROOT %add.2262 = s32[] add(%Arg_0.2260, %Arg_1.2261)
}

%region_36.2271 (Arg_0.2268: s32[], Arg_1.2269: s32[]) -> s32[] {
  %Arg_0.2268 = s32[] parameter(0)
  %Arg_1.2269 = s32[] parameter(1)
  ROOT %add.2270 = s32[] add(%Arg_0.2268, %Arg_1.2269)
}

%region_37.2276 (Arg_0.2273: s32[], Arg_1.2274: s32[]) -> s32[] {
  %Arg_0.2273 = s32[] parameter(0)
  %Arg_1.2274 = s32[] parameter(1)
  ROOT %maximum.2275 = s32[] maximum(%Arg_0.2273, %Arg_1.2274)
}

%region_46.2567 (Arg_0.2564: s32[], Arg_1.2565: s32[]) -> s32[] {
  %Arg_0.2564 = s32[] parameter(0)
  %Arg_1.2565 = s32[] parameter(1)
  ROOT %add.2566 = s32[] add(%Arg_0.2564, %Arg_1.2565)
}

%region_47.2575 (Arg_0.2572: s32[], Arg_1.2573: s32[]) -> s32[] {
  %Arg_0.2572 = s32[] parameter(0)
  %Arg_1.2573 = s32[] parameter(1)
  ROOT %add.2574 = s32[] add(%Arg_0.2572, %Arg_1.2573)
}

%region_48.2580 (Arg_0.2577: s32[], Arg_1.2578: s32[]) -> s32[] {
  %Arg_0.2577 = s32[] parameter(0)
  %Arg_1.2578 = s32[] parameter(1)
  ROOT %maximum.2579 = s32[] maximum(%Arg_0.2577, %Arg_1.2578)
}

%region_57.2871 (Arg_0.2868: s32[], Arg_1.2869: s32[]) -> s32[] {
  %Arg_0.2868 = s32[] parameter(0)
  %Arg_1.2869 = s32[] parameter(1)
  ROOT %add.2870 = s32[] add(%Arg_0.2868, %Arg_1.2869)
}

%region_58.2879 (Arg_0.2876: s32[], Arg_1.2877: s32[]) -> s32[] {
  %Arg_0.2876 = s32[] parameter(0)
  %Arg_1.2877 = s32[] parameter(1)
  ROOT %add.2878 = s32[] add(%Arg_0.2876, %Arg_1.2877)
}

%region_59.2884 (Arg_0.2881: s32[], Arg_1.2882: s32[]) -> s32[] {
  %Arg_0.2881 = s32[] parameter(0)
  %Arg_1.2882 = s32[] parameter(1)
  ROOT %maximum.2883 = s32[] maximum(%Arg_0.2881, %Arg_1.2882)
}

%region_68.3175 (Arg_0.3172: s32[], Arg_1.3173: s32[]) -> s32[] {
  %Arg_0.3172 = s32[] parameter(0)
  %Arg_1.3173 = s32[] parameter(1)
  ROOT %add.3174 = s32[] add(%Arg_0.3172, %Arg_1.3173)
}

%region_69.3183 (Arg_0.3180: s32[], Arg_1.3181: s32[]) -> s32[] {
  %Arg_0.3180 = s32[] parameter(0)
  %Arg_1.3181 = s32[] parameter(1)
  ROOT %add.3182 = s32[] add(%Arg_0.3180, %Arg_1.3181)
}

%region_70.3188 (Arg_0.3185: s32[], Arg_1.3186: s32[]) -> s32[] {
  %Arg_0.3185 = s32[] parameter(0)
  %Arg_1.3186 = s32[] parameter(1)
  ROOT %maximum.3187 = s32[] maximum(%Arg_0.3185, %Arg_1.3186)
}

%region_79.3479 (Arg_0.3476: s32[], Arg_1.3477: s32[]) -> s32[] {
  %Arg_0.3476 = s32[] parameter(0)
  %Arg_1.3477 = s32[] parameter(1)
  ROOT %add.3478 = s32[] add(%Arg_0.3476, %Arg_1.3477)
}

%region_80.3487 (Arg_0.3484: s32[], Arg_1.3485: s32[]) -> s32[] {
  %Arg_0.3484 = s32[] parameter(0)
  %Arg_1.3485 = s32[] parameter(1)
  ROOT %add.3486 = s32[] add(%Arg_0.3484, %Arg_1.3485)
}

%region_81.3492 (Arg_0.3489: s32[], Arg_1.3490: s32[]) -> s32[] {
  %Arg_0.3489 = s32[] parameter(0)
  %Arg_1.3490 = s32[] parameter(1)
  ROOT %maximum.3491 = s32[] maximum(%Arg_0.3489, %Arg_1.3490)
}

%region_90.3783 (Arg_0.3780: s32[], Arg_1.3781: s32[]) -> s32[] {
  %Arg_0.3780 = s32[] parameter(0)
  %Arg_1.3781 = s32[] parameter(1)
  ROOT %add.3782 = s32[] add(%Arg_0.3780, %Arg_1.3781)
}

%region_91.3791 (Arg_0.3788: s32[], Arg_1.3789: s32[]) -> s32[] {
  %Arg_0.3788 = s32[] parameter(0)
  %Arg_1.3789 = s32[] parameter(1)
  ROOT %add.3790 = s32[] add(%Arg_0.3788, %Arg_1.3789)
}

%region_92.3796 (Arg_0.3793: s32[], Arg_1.3794: s32[]) -> s32[] {
  %Arg_0.3793 = s32[] parameter(0)
  %Arg_1.3794 = s32[] parameter(1)
  ROOT %maximum.3795 = s32[] maximum(%Arg_0.3793, %Arg_1.3794)
}

%region_101.4087 (Arg_0.4084: s32[], Arg_1.4085: s32[]) -> s32[] {
  %Arg_0.4084 = s32[] parameter(0)
  %Arg_1.4085 = s32[] parameter(1)
  ROOT %add.4086 = s32[] add(%Arg_0.4084, %Arg_1.4085)
}

%region_102.4095 (Arg_0.4092: s32[], Arg_1.4093: s32[]) -> s32[] {
  %Arg_0.4092 = s32[] parameter(0)
  %Arg_1.4093 = s32[] parameter(1)
  ROOT %add.4094 = s32[] add(%Arg_0.4092, %Arg_1.4093)
}

%region_103.4100 (Arg_0.4097: s32[], Arg_1.4098: s32[]) -> s32[] {
  %Arg_0.4097 = s32[] parameter(0)
  %Arg_1.4098 = s32[] parameter(1)
  ROOT %maximum.4099 = s32[] maximum(%Arg_0.4097, %Arg_1.4098)
}

%region_112.4391 (Arg_0.4388: s32[], Arg_1.4389: s32[]) -> s32[] {
  %Arg_0.4388 = s32[] parameter(0)
  %Arg_1.4389 = s32[] parameter(1)
  ROOT %add.4390 = s32[] add(%Arg_0.4388, %Arg_1.4389)
}

%region_113.4399 (Arg_0.4396: s32[], Arg_1.4397: s32[]) -> s32[] {
  %Arg_0.4396 = s32[] parameter(0)
  %Arg_1.4397 = s32[] parameter(1)
  ROOT %add.4398 = s32[] add(%Arg_0.4396, %Arg_1.4397)
}

%region_114.4404 (Arg_0.4401: s32[], Arg_1.4402: s32[]) -> s32[] {
  %Arg_0.4401 = s32[] parameter(0)
  %Arg_1.4402 = s32[] parameter(1)
  ROOT %maximum.4403 = s32[] maximum(%Arg_0.4401, %Arg_1.4402)
}

%region_123.4695 (Arg_0.4692: s32[], Arg_1.4693: s32[]) -> s32[] {
  %Arg_0.4692 = s32[] parameter(0)
  %Arg_1.4693 = s32[] parameter(1)
  ROOT %add.4694 = s32[] add(%Arg_0.4692, %Arg_1.4693)
}

%region_124.4703 (Arg_0.4700: s32[], Arg_1.4701: s32[]) -> s32[] {
  %Arg_0.4700 = s32[] parameter(0)
  %Arg_1.4701 = s32[] parameter(1)
  ROOT %add.4702 = s32[] add(%Arg_0.4700, %Arg_1.4701)
}

%region_125.4708 (Arg_0.4705: s32[], Arg_1.4706: s32[]) -> s32[] {
  %Arg_0.4705 = s32[] parameter(0)
  %Arg_1.4706 = s32[] parameter(1)
  ROOT %maximum.4707 = s32[] maximum(%Arg_0.4705, %Arg_1.4706)
}

%region_134.4999 (Arg_0.4996: s32[], Arg_1.4997: s32[]) -> s32[] {
  %Arg_0.4996 = s32[] parameter(0)
  %Arg_1.4997 = s32[] parameter(1)
  ROOT %add.4998 = s32[] add(%Arg_0.4996, %Arg_1.4997)
}

%region_135.5007 (Arg_0.5004: s32[], Arg_1.5005: s32[]) -> s32[] {
  %Arg_0.5004 = s32[] parameter(0)
  %Arg_1.5005 = s32[] parameter(1)
  ROOT %add.5006 = s32[] add(%Arg_0.5004, %Arg_1.5005)
}

%region_136.5012 (Arg_0.5009: s32[], Arg_1.5010: s32[]) -> s32[] {
  %Arg_0.5009 = s32[] parameter(0)
  %Arg_1.5010 = s32[] parameter(1)
  ROOT %maximum.5011 = s32[] maximum(%Arg_0.5009, %Arg_1.5010)
}

%region_145.5303 (Arg_0.5300: s32[], Arg_1.5301: s32[]) -> s32[] {
  %Arg_0.5300 = s32[] parameter(0)
  %Arg_1.5301 = s32[] parameter(1)
  ROOT %add.5302 = s32[] add(%Arg_0.5300, %Arg_1.5301)
}

%region_146.5311 (Arg_0.5308: s32[], Arg_1.5309: s32[]) -> s32[] {
  %Arg_0.5308 = s32[] parameter(0)
  %Arg_1.5309 = s32[] parameter(1)
  ROOT %add.5310 = s32[] add(%Arg_0.5308, %Arg_1.5309)
}

%region_147.5316 (Arg_0.5313: s32[], Arg_1.5314: s32[]) -> s32[] {
  %Arg_0.5313 = s32[] parameter(0)
  %Arg_1.5314 = s32[] parameter(1)
  ROOT %maximum.5315 = s32[] maximum(%Arg_0.5313, %Arg_1.5314)
}

%region_156.5607 (Arg_0.5604: s32[], Arg_1.5605: s32[]) -> s32[] {
  %Arg_0.5604 = s32[] parameter(0)
  %Arg_1.5605 = s32[] parameter(1)
  ROOT %add.5606 = s32[] add(%Arg_0.5604, %Arg_1.5605)
}

%region_157.5615 (Arg_0.5612: s32[], Arg_1.5613: s32[]) -> s32[] {
  %Arg_0.5612 = s32[] parameter(0)
  %Arg_1.5613 = s32[] parameter(1)
  ROOT %add.5614 = s32[] add(%Arg_0.5612, %Arg_1.5613)
}

%region_158.5620 (Arg_0.5617: s32[], Arg_1.5618: s32[]) -> s32[] {
  %Arg_0.5617 = s32[] parameter(0)
  %Arg_1.5618 = s32[] parameter(1)
  ROOT %maximum.5619 = s32[] maximum(%Arg_0.5617, %Arg_1.5618)
}

%region_167.5911 (Arg_0.5908: s32[], Arg_1.5909: s32[]) -> s32[] {
  %Arg_0.5908 = s32[] parameter(0)
  %Arg_1.5909 = s32[] parameter(1)
  ROOT %add.5910 = s32[] add(%Arg_0.5908, %Arg_1.5909)
}

%region_168.5919 (Arg_0.5916: s32[], Arg_1.5917: s32[]) -> s32[] {
  %Arg_0.5916 = s32[] parameter(0)
  %Arg_1.5917 = s32[] parameter(1)
  ROOT %add.5918 = s32[] add(%Arg_0.5916, %Arg_1.5917)
}

%region_169.5924 (Arg_0.5921: s32[], Arg_1.5922: s32[]) -> s32[] {
  %Arg_0.5921 = s32[] parameter(0)
  %Arg_1.5922 = s32[] parameter(1)
  ROOT %maximum.5923 = s32[] maximum(%Arg_0.5921, %Arg_1.5922)
}

%region_178.6215 (Arg_0.6212: s32[], Arg_1.6213: s32[]) -> s32[] {
  %Arg_0.6212 = s32[] parameter(0)
  %Arg_1.6213 = s32[] parameter(1)
  ROOT %add.6214 = s32[] add(%Arg_0.6212, %Arg_1.6213)
}

%region_179.6223 (Arg_0.6220: s32[], Arg_1.6221: s32[]) -> s32[] {
  %Arg_0.6220 = s32[] parameter(0)
  %Arg_1.6221 = s32[] parameter(1)
  ROOT %add.6222 = s32[] add(%Arg_0.6220, %Arg_1.6221)
}

%region_180.6228 (Arg_0.6225: s32[], Arg_1.6226: s32[]) -> s32[] {
  %Arg_0.6225 = s32[] parameter(0)
  %Arg_1.6226 = s32[] parameter(1)
  ROOT %maximum.6227 = s32[] maximum(%Arg_0.6225, %Arg_1.6226)
}

%region_189.6519 (Arg_0.6516: s32[], Arg_1.6517: s32[]) -> s32[] {
  %Arg_0.6516 = s32[] parameter(0)
  %Arg_1.6517 = s32[] parameter(1)
  ROOT %add.6518 = s32[] add(%Arg_0.6516, %Arg_1.6517)
}

%region_190.6527 (Arg_0.6524: s32[], Arg_1.6525: s32[]) -> s32[] {
  %Arg_0.6524 = s32[] parameter(0)
  %Arg_1.6525 = s32[] parameter(1)
  ROOT %add.6526 = s32[] add(%Arg_0.6524, %Arg_1.6525)
}

%region_191.6532 (Arg_0.6529: s32[], Arg_1.6530: s32[]) -> s32[] {
  %Arg_0.6529 = s32[] parameter(0)
  %Arg_1.6530 = s32[] parameter(1)
  ROOT %maximum.6531 = s32[] maximum(%Arg_0.6529, %Arg_1.6530)
}

%region_200.6823 (Arg_0.6820: s32[], Arg_1.6821: s32[]) -> s32[] {
  %Arg_0.6820 = s32[] parameter(0)
  %Arg_1.6821 = s32[] parameter(1)
  ROOT %add.6822 = s32[] add(%Arg_0.6820, %Arg_1.6821)
}

%region_201.6831 (Arg_0.6828: s32[], Arg_1.6829: s32[]) -> s32[] {
  %Arg_0.6828 = s32[] parameter(0)
  %Arg_1.6829 = s32[] parameter(1)
  ROOT %add.6830 = s32[] add(%Arg_0.6828, %Arg_1.6829)
}

%region_202.6836 (Arg_0.6833: s32[], Arg_1.6834: s32[]) -> s32[] {
  %Arg_0.6833 = s32[] parameter(0)
  %Arg_1.6834 = s32[] parameter(1)
  ROOT %maximum.6835 = s32[] maximum(%Arg_0.6833, %Arg_1.6834)
}

%region_211.7127 (Arg_0.7124: s32[], Arg_1.7125: s32[]) -> s32[] {
  %Arg_0.7124 = s32[] parameter(0)
  %Arg_1.7125 = s32[] parameter(1)
  ROOT %add.7126 = s32[] add(%Arg_0.7124, %Arg_1.7125)
}

%region_212.7135 (Arg_0.7132: s32[], Arg_1.7133: s32[]) -> s32[] {
  %Arg_0.7132 = s32[] parameter(0)
  %Arg_1.7133 = s32[] parameter(1)
  ROOT %add.7134 = s32[] add(%Arg_0.7132, %Arg_1.7133)
}

%region_213.7140 (Arg_0.7137: s32[], Arg_1.7138: s32[]) -> s32[] {
  %Arg_0.7137 = s32[] parameter(0)
  %Arg_1.7138 = s32[] parameter(1)
  ROOT %maximum.7139 = s32[] maximum(%Arg_0.7137, %Arg_1.7138)
}

%region_222.7431 (Arg_0.7428: s32[], Arg_1.7429: s32[]) -> s32[] {
  %Arg_0.7428 = s32[] parameter(0)
  %Arg_1.7429 = s32[] parameter(1)
  ROOT %add.7430 = s32[] add(%Arg_0.7428, %Arg_1.7429)
}

%region_223.7439 (Arg_0.7436: s32[], Arg_1.7437: s32[]) -> s32[] {
  %Arg_0.7436 = s32[] parameter(0)
  %Arg_1.7437 = s32[] parameter(1)
  ROOT %add.7438 = s32[] add(%Arg_0.7436, %Arg_1.7437)
}

%region_224.7444 (Arg_0.7441: s32[], Arg_1.7442: s32[]) -> s32[] {
  %Arg_0.7441 = s32[] parameter(0)
  %Arg_1.7442 = s32[] parameter(1)
  ROOT %maximum.7443 = s32[] maximum(%Arg_0.7441, %Arg_1.7442)
}

%region_233.7735 (Arg_0.7732: s32[], Arg_1.7733: s32[]) -> s32[] {
  %Arg_0.7732 = s32[] parameter(0)
  %Arg_1.7733 = s32[] parameter(1)
  ROOT %add.7734 = s32[] add(%Arg_0.7732, %Arg_1.7733)
}

%region_234.7743 (Arg_0.7740: s32[], Arg_1.7741: s32[]) -> s32[] {
  %Arg_0.7740 = s32[] parameter(0)
  %Arg_1.7741 = s32[] parameter(1)
  ROOT %add.7742 = s32[] add(%Arg_0.7740, %Arg_1.7741)
}

%region_235.7748 (Arg_0.7745: s32[], Arg_1.7746: s32[]) -> s32[] {
  %Arg_0.7745 = s32[] parameter(0)
  %Arg_1.7746 = s32[] parameter(1)
  ROOT %maximum.7747 = s32[] maximum(%Arg_0.7745, %Arg_1.7746)
}

%region_244.8039 (Arg_0.8036: s32[], Arg_1.8037: s32[]) -> s32[] {
  %Arg_0.8036 = s32[] parameter(0)
  %Arg_1.8037 = s32[] parameter(1)
  ROOT %add.8038 = s32[] add(%Arg_0.8036, %Arg_1.8037)
}

%region_245.8047 (Arg_0.8044: s32[], Arg_1.8045: s32[]) -> s32[] {
  %Arg_0.8044 = s32[] parameter(0)
  %Arg_1.8045 = s32[] parameter(1)
  ROOT %add.8046 = s32[] add(%Arg_0.8044, %Arg_1.8045)
}

%region_246.8052 (Arg_0.8049: s32[], Arg_1.8050: s32[]) -> s32[] {
  %Arg_0.8049 = s32[] parameter(0)
  %Arg_1.8050 = s32[] parameter(1)
  ROOT %maximum.8051 = s32[] maximum(%Arg_0.8049, %Arg_1.8050)
}

%region_255.8343 (Arg_0.8340: s32[], Arg_1.8341: s32[]) -> s32[] {
  %Arg_0.8340 = s32[] parameter(0)
  %Arg_1.8341 = s32[] parameter(1)
  ROOT %add.8342 = s32[] add(%Arg_0.8340, %Arg_1.8341)
}

%region_256.8351 (Arg_0.8348: s32[], Arg_1.8349: s32[]) -> s32[] {
  %Arg_0.8348 = s32[] parameter(0)
  %Arg_1.8349 = s32[] parameter(1)
  ROOT %add.8350 = s32[] add(%Arg_0.8348, %Arg_1.8349)
}

%region_257.8356 (Arg_0.8353: s32[], Arg_1.8354: s32[]) -> s32[] {
  %Arg_0.8353 = s32[] parameter(0)
  %Arg_1.8354 = s32[] parameter(1)
  ROOT %maximum.8355 = s32[] maximum(%Arg_0.8353, %Arg_1.8354)
}

%region_266.8647 (Arg_0.8644: s32[], Arg_1.8645: s32[]) -> s32[] {
  %Arg_0.8644 = s32[] parameter(0)
  %Arg_1.8645 = s32[] parameter(1)
  ROOT %add.8646 = s32[] add(%Arg_0.8644, %Arg_1.8645)
}

%region_267.8655 (Arg_0.8652: s32[], Arg_1.8653: s32[]) -> s32[] {
  %Arg_0.8652 = s32[] parameter(0)
  %Arg_1.8653 = s32[] parameter(1)
  ROOT %add.8654 = s32[] add(%Arg_0.8652, %Arg_1.8653)
}

%region_268.8660 (Arg_0.8657: s32[], Arg_1.8658: s32[]) -> s32[] {
  %Arg_0.8657 = s32[] parameter(0)
  %Arg_1.8658 = s32[] parameter(1)
  ROOT %maximum.8659 = s32[] maximum(%Arg_0.8657, %Arg_1.8658)
}

%region_277.8951 (Arg_0.8948: s32[], Arg_1.8949: s32[]) -> s32[] {
  %Arg_0.8948 = s32[] parameter(0)
  %Arg_1.8949 = s32[] parameter(1)
  ROOT %add.8950 = s32[] add(%Arg_0.8948, %Arg_1.8949)
}

%region_278.8959 (Arg_0.8956: s32[], Arg_1.8957: s32[]) -> s32[] {
  %Arg_0.8956 = s32[] parameter(0)
  %Arg_1.8957 = s32[] parameter(1)
  ROOT %add.8958 = s32[] add(%Arg_0.8956, %Arg_1.8957)
}

%region_279.8964 (Arg_0.8961: s32[], Arg_1.8962: s32[]) -> s32[] {
  %Arg_0.8961 = s32[] parameter(0)
  %Arg_1.8962 = s32[] parameter(1)
  ROOT %maximum.8963 = s32[] maximum(%Arg_0.8961, %Arg_1.8962)
}

%region_288.9255 (Arg_0.9252: s32[], Arg_1.9253: s32[]) -> s32[] {
  %Arg_0.9252 = s32[] parameter(0)
  %Arg_1.9253 = s32[] parameter(1)
  ROOT %add.9254 = s32[] add(%Arg_0.9252, %Arg_1.9253)
}

%region_289.9263 (Arg_0.9260: s32[], Arg_1.9261: s32[]) -> s32[] {
  %Arg_0.9260 = s32[] parameter(0)
  %Arg_1.9261 = s32[] parameter(1)
  ROOT %add.9262 = s32[] add(%Arg_0.9260, %Arg_1.9261)
}

%region_290.9268 (Arg_0.9265: s32[], Arg_1.9266: s32[]) -> s32[] {
  %Arg_0.9265 = s32[] parameter(0)
  %Arg_1.9266 = s32[] parameter(1)
  ROOT %maximum.9267 = s32[] maximum(%Arg_0.9265, %Arg_1.9266)
}

%region_299.9559 (Arg_0.9556: s32[], Arg_1.9557: s32[]) -> s32[] {
  %Arg_0.9556 = s32[] parameter(0)
  %Arg_1.9557 = s32[] parameter(1)
  ROOT %add.9558 = s32[] add(%Arg_0.9556, %Arg_1.9557)
}

%region_300.9567 (Arg_0.9564: s32[], Arg_1.9565: s32[]) -> s32[] {
  %Arg_0.9564 = s32[] parameter(0)
  %Arg_1.9565 = s32[] parameter(1)
  ROOT %add.9566 = s32[] add(%Arg_0.9564, %Arg_1.9565)
}

%region_301.9572 (Arg_0.9569: s32[], Arg_1.9570: s32[]) -> s32[] {
  %Arg_0.9569 = s32[] parameter(0)
  %Arg_1.9570 = s32[] parameter(1)
  ROOT %maximum.9571 = s32[] maximum(%Arg_0.9569, %Arg_1.9570)
}

%region_310.9863 (Arg_0.9860: s32[], Arg_1.9861: s32[]) -> s32[] {
  %Arg_0.9860 = s32[] parameter(0)
  %Arg_1.9861 = s32[] parameter(1)
  ROOT %add.9862 = s32[] add(%Arg_0.9860, %Arg_1.9861)
}

%region_311.9871 (Arg_0.9868: s32[], Arg_1.9869: s32[]) -> s32[] {
  %Arg_0.9868 = s32[] parameter(0)
  %Arg_1.9869 = s32[] parameter(1)
  ROOT %add.9870 = s32[] add(%Arg_0.9868, %Arg_1.9869)
}

%region_312.9876 (Arg_0.9873: s32[], Arg_1.9874: s32[]) -> s32[] {
  %Arg_0.9873 = s32[] parameter(0)
  %Arg_1.9874 = s32[] parameter(1)
  ROOT %maximum.9875 = s32[] maximum(%Arg_0.9873, %Arg_1.9874)
}

%region_321.10167 (Arg_0.10164: s32[], Arg_1.10165: s32[]) -> s32[] {
  %Arg_0.10164 = s32[] parameter(0)
  %Arg_1.10165 = s32[] parameter(1)
  ROOT %add.10166 = s32[] add(%Arg_0.10164, %Arg_1.10165)
}

%region_322.10175 (Arg_0.10172: s32[], Arg_1.10173: s32[]) -> s32[] {
  %Arg_0.10172 = s32[] parameter(0)
  %Arg_1.10173 = s32[] parameter(1)
  ROOT %add.10174 = s32[] add(%Arg_0.10172, %Arg_1.10173)
}

%region_323.10180 (Arg_0.10177: s32[], Arg_1.10178: s32[]) -> s32[] {
  %Arg_0.10177 = s32[] parameter(0)
  %Arg_1.10178 = s32[] parameter(1)
  ROOT %maximum.10179 = s32[] maximum(%Arg_0.10177, %Arg_1.10178)
}

%region_332.10471 (Arg_0.10468: s32[], Arg_1.10469: s32[]) -> s32[] {
  %Arg_0.10468 = s32[] parameter(0)
  %Arg_1.10469 = s32[] parameter(1)
  ROOT %add.10470 = s32[] add(%Arg_0.10468, %Arg_1.10469)
}

%region_333.10479 (Arg_0.10476: s32[], Arg_1.10477: s32[]) -> s32[] {
  %Arg_0.10476 = s32[] parameter(0)
  %Arg_1.10477 = s32[] parameter(1)
  ROOT %add.10478 = s32[] add(%Arg_0.10476, %Arg_1.10477)
}

%region_334.10484 (Arg_0.10481: s32[], Arg_1.10482: s32[]) -> s32[] {
  %Arg_0.10481 = s32[] parameter(0)
  %Arg_1.10482 = s32[] parameter(1)
  ROOT %maximum.10483 = s32[] maximum(%Arg_0.10481, %Arg_1.10482)
}

%region_343.10775 (Arg_0.10772: s32[], Arg_1.10773: s32[]) -> s32[] {
  %Arg_0.10772 = s32[] parameter(0)
  %Arg_1.10773 = s32[] parameter(1)
  ROOT %add.10774 = s32[] add(%Arg_0.10772, %Arg_1.10773)
}

%region_344.10783 (Arg_0.10780: s32[], Arg_1.10781: s32[]) -> s32[] {
  %Arg_0.10780 = s32[] parameter(0)
  %Arg_1.10781 = s32[] parameter(1)
  ROOT %add.10782 = s32[] add(%Arg_0.10780, %Arg_1.10781)
}

%region_345.10788 (Arg_0.10785: s32[], Arg_1.10786: s32[]) -> s32[] {
  %Arg_0.10785 = s32[] parameter(0)
  %Arg_1.10786 = s32[] parameter(1)
  ROOT %maximum.10787 = s32[] maximum(%Arg_0.10785, %Arg_1.10786)
}

%region_1809.43861 (Arg_0.43858: f32[], Arg_1.43859: f32[]) -> f32[] {
  %Arg_0.43858 = f32[] parameter(0)
  %Arg_1.43859 = f32[] parameter(1)
  ROOT %add.43860 = f32[] add(%Arg_0.43858, %Arg_1.43859)
}

%region_1810.43869 (Arg_0.43866: f32[], Arg_1.43867: f32[]) -> f32[] {
  %Arg_0.43866 = f32[] parameter(0)
  %Arg_1.43867 = f32[] parameter(1)
  ROOT %add.43868 = f32[] add(%Arg_0.43866, %Arg_1.43867)
}

%region_1811.43878 (Arg_0.43875: f32[], Arg_1.43876: f32[]) -> f32[] {
  %Arg_0.43875 = f32[] parameter(0)
  %Arg_1.43876 = f32[] parameter(1)
  ROOT %add.43877 = f32[] add(%Arg_0.43875, %Arg_1.43876)
}

%region_1812.43887 (Arg_0.43884: f32[], Arg_1.43885: f32[]) -> f32[] {
  %Arg_0.43884 = f32[] parameter(0)
  %Arg_1.43885 = f32[] parameter(1)
  ROOT %add.43886 = f32[] add(%Arg_0.43884, %Arg_1.43885)
}

%region_1813.43896 (Arg_0.43893: f32[], Arg_1.43894: f32[]) -> f32[] {
  %Arg_0.43893 = f32[] parameter(0)
  %Arg_1.43894 = f32[] parameter(1)
  ROOT %add.43895 = f32[] add(%Arg_0.43893, %Arg_1.43894)
}

%region_1814.43905 (Arg_0.43902: f32[], Arg_1.43903: f32[]) -> f32[] {
  %Arg_0.43902 = f32[] parameter(0)
  %Arg_1.43903 = f32[] parameter(1)
  ROOT %add.43904 = f32[] add(%Arg_0.43902, %Arg_1.43903)
}

%region_1815.43914 (Arg_0.43911: f32[], Arg_1.43912: f32[]) -> f32[] {
  %Arg_0.43911 = f32[] parameter(0)
  %Arg_1.43912 = f32[] parameter(1)
  ROOT %add.43913 = f32[] add(%Arg_0.43911, %Arg_1.43912)
}

%region_1816.43923 (Arg_0.43920: f32[], Arg_1.43921: f32[]) -> f32[] {
  %Arg_0.43920 = f32[] parameter(0)
  %Arg_1.43921 = f32[] parameter(1)
  ROOT %add.43922 = f32[] add(%Arg_0.43920, %Arg_1.43921)
}

%region_1817.43932 (Arg_0.43929: f32[], Arg_1.43930: f32[]) -> f32[] {
  %Arg_0.43929 = f32[] parameter(0)
  %Arg_1.43930 = f32[] parameter(1)
  ROOT %add.43931 = f32[] add(%Arg_0.43929, %Arg_1.43930)
}

%region_1818.43941 (Arg_0.43938: f32[], Arg_1.43939: f32[]) -> f32[] {
  %Arg_0.43938 = f32[] parameter(0)
  %Arg_1.43939 = f32[] parameter(1)
  ROOT %add.43940 = f32[] add(%Arg_0.43938, %Arg_1.43939)
}

%region_1819.43950 (Arg_0.43947: f32[], Arg_1.43948: f32[]) -> f32[] {
  %Arg_0.43947 = f32[] parameter(0)
  %Arg_1.43948 = f32[] parameter(1)
  ROOT %add.43949 = f32[] add(%Arg_0.43947, %Arg_1.43948)
}

%region_1820.43959 (Arg_0.43956: f32[], Arg_1.43957: f32[]) -> f32[] {
  %Arg_0.43956 = f32[] parameter(0)
  %Arg_1.43957 = f32[] parameter(1)
  ROOT %add.43958 = f32[] add(%Arg_0.43956, %Arg_1.43957)
}

%region_1821.43968 (Arg_0.43965: f32[], Arg_1.43966: f32[]) -> f32[] {
  %Arg_0.43965 = f32[] parameter(0)
  %Arg_1.43966 = f32[] parameter(1)
  ROOT %add.43967 = f32[] add(%Arg_0.43965, %Arg_1.43966)
}

%region_1822.43977 (Arg_0.43974: f32[], Arg_1.43975: f32[]) -> f32[] {
  %Arg_0.43974 = f32[] parameter(0)
  %Arg_1.43975 = f32[] parameter(1)
  ROOT %add.43976 = f32[] add(%Arg_0.43974, %Arg_1.43975)
}

%region_1823.43986 (Arg_0.43983: f32[], Arg_1.43984: f32[]) -> f32[] {
  %Arg_0.43983 = f32[] parameter(0)
  %Arg_1.43984 = f32[] parameter(1)
  ROOT %add.43985 = f32[] add(%Arg_0.43983, %Arg_1.43984)
}

%region_1824.43995 (Arg_0.43992: f32[], Arg_1.43993: f32[]) -> f32[] {
  %Arg_0.43992 = f32[] parameter(0)
  %Arg_1.43993 = f32[] parameter(1)
  ROOT %add.43994 = f32[] add(%Arg_0.43992, %Arg_1.43993)
}

%region_1825.44004 (Arg_0.44001: f32[], Arg_1.44002: f32[]) -> f32[] {
  %Arg_0.44001 = f32[] parameter(0)
  %Arg_1.44002 = f32[] parameter(1)
  ROOT %add.44003 = f32[] add(%Arg_0.44001, %Arg_1.44002)
}

%region_1826.44013 (Arg_0.44010: f32[], Arg_1.44011: f32[]) -> f32[] {
  %Arg_0.44010 = f32[] parameter(0)
  %Arg_1.44011 = f32[] parameter(1)
  ROOT %add.44012 = f32[] add(%Arg_0.44010, %Arg_1.44011)
}

%region_1827.44022 (Arg_0.44019: f32[], Arg_1.44020: f32[]) -> f32[] {
  %Arg_0.44019 = f32[] parameter(0)
  %Arg_1.44020 = f32[] parameter(1)
  ROOT %add.44021 = f32[] add(%Arg_0.44019, %Arg_1.44020)
}

%region_1828.44031 (Arg_0.44028: f32[], Arg_1.44029: f32[]) -> f32[] {
  %Arg_0.44028 = f32[] parameter(0)
  %Arg_1.44029 = f32[] parameter(1)
  ROOT %add.44030 = f32[] add(%Arg_0.44028, %Arg_1.44029)
}

%region_1829.44040 (Arg_0.44037: f32[], Arg_1.44038: f32[]) -> f32[] {
  %Arg_0.44037 = f32[] parameter(0)
  %Arg_1.44038 = f32[] parameter(1)
  ROOT %add.44039 = f32[] add(%Arg_0.44037, %Arg_1.44038)
}

%region_1830.44049 (Arg_0.44046: f32[], Arg_1.44047: f32[]) -> f32[] {
  %Arg_0.44046 = f32[] parameter(0)
  %Arg_1.44047 = f32[] parameter(1)
  ROOT %add.44048 = f32[] add(%Arg_0.44046, %Arg_1.44047)
}

%region_1831.44058 (Arg_0.44055: f32[], Arg_1.44056: f32[]) -> f32[] {
  %Arg_0.44055 = f32[] parameter(0)
  %Arg_1.44056 = f32[] parameter(1)
  ROOT %add.44057 = f32[] add(%Arg_0.44055, %Arg_1.44056)
}

%region_1832.44067 (Arg_0.44064: f32[], Arg_1.44065: f32[]) -> f32[] {
  %Arg_0.44064 = f32[] parameter(0)
  %Arg_1.44065 = f32[] parameter(1)
  ROOT %add.44066 = f32[] add(%Arg_0.44064, %Arg_1.44065)
}

%region_1833.44076 (Arg_0.44073: f32[], Arg_1.44074: f32[]) -> f32[] {
  %Arg_0.44073 = f32[] parameter(0)
  %Arg_1.44074 = f32[] parameter(1)
  ROOT %add.44075 = f32[] add(%Arg_0.44073, %Arg_1.44074)
}

%region_1834.44085 (Arg_0.44082: f32[], Arg_1.44083: f32[]) -> f32[] {
  %Arg_0.44082 = f32[] parameter(0)
  %Arg_1.44083 = f32[] parameter(1)
  ROOT %add.44084 = f32[] add(%Arg_0.44082, %Arg_1.44083)
}

%region_1835.44094 (Arg_0.44091: f32[], Arg_1.44092: f32[]) -> f32[] {
  %Arg_0.44091 = f32[] parameter(0)
  %Arg_1.44092 = f32[] parameter(1)
  ROOT %add.44093 = f32[] add(%Arg_0.44091, %Arg_1.44092)
}

%region_1836.44103 (Arg_0.44100: f32[], Arg_1.44101: f32[]) -> f32[] {
  %Arg_0.44100 = f32[] parameter(0)
  %Arg_1.44101 = f32[] parameter(1)
  ROOT %add.44102 = f32[] add(%Arg_0.44100, %Arg_1.44101)
}

%region_1837.44112 (Arg_0.44109: f32[], Arg_1.44110: f32[]) -> f32[] {
  %Arg_0.44109 = f32[] parameter(0)
  %Arg_1.44110 = f32[] parameter(1)
  ROOT %add.44111 = f32[] add(%Arg_0.44109, %Arg_1.44110)
}

%region_1838.44121 (Arg_0.44118: f32[], Arg_1.44119: f32[]) -> f32[] {
  %Arg_0.44118 = f32[] parameter(0)
  %Arg_1.44119 = f32[] parameter(1)
  ROOT %add.44120 = f32[] add(%Arg_0.44118, %Arg_1.44119)
}

%region_1839.44130 (Arg_0.44127: f32[], Arg_1.44128: f32[]) -> f32[] {
  %Arg_0.44127 = f32[] parameter(0)
  %Arg_1.44128 = f32[] parameter(1)
  ROOT %add.44129 = f32[] add(%Arg_0.44127, %Arg_1.44128)
}

%region_1840.44139 (Arg_0.44136: f32[], Arg_1.44137: f32[]) -> f32[] {
  %Arg_0.44136 = f32[] parameter(0)
  %Arg_1.44137 = f32[] parameter(1)
  ROOT %add.44138 = f32[] add(%Arg_0.44136, %Arg_1.44137)
}

%region_1841.44148 (Arg_0.44145: f32[], Arg_1.44146: f32[]) -> f32[] {
  %Arg_0.44145 = f32[] parameter(0)
  %Arg_1.44146 = f32[] parameter(1)
  ROOT %add.44147 = f32[] add(%Arg_0.44145, %Arg_1.44146)
}

%region_1842.44157 (Arg_0.44154: f32[], Arg_1.44155: f32[]) -> f32[] {
  %Arg_0.44154 = f32[] parameter(0)
  %Arg_1.44155 = f32[] parameter(1)
  ROOT %add.44156 = f32[] add(%Arg_0.44154, %Arg_1.44155)
}

%region_1843.44166 (Arg_0.44163: f32[], Arg_1.44164: f32[]) -> f32[] {
  %Arg_0.44163 = f32[] parameter(0)
  %Arg_1.44164 = f32[] parameter(1)
  ROOT %add.44165 = f32[] add(%Arg_0.44163, %Arg_1.44164)
}

%region_1844.44175 (Arg_0.44172: f32[], Arg_1.44173: f32[]) -> f32[] {
  %Arg_0.44172 = f32[] parameter(0)
  %Arg_1.44173 = f32[] parameter(1)
  ROOT %add.44174 = f32[] add(%Arg_0.44172, %Arg_1.44173)
}

%region_1845.44184 (Arg_0.44181: f32[], Arg_1.44182: f32[]) -> f32[] {
  %Arg_0.44181 = f32[] parameter(0)
  %Arg_1.44182 = f32[] parameter(1)
  ROOT %add.44183 = f32[] add(%Arg_0.44181, %Arg_1.44182)
}

%region_1846.44193 (Arg_0.44190: f32[], Arg_1.44191: f32[]) -> f32[] {
  %Arg_0.44190 = f32[] parameter(0)
  %Arg_1.44191 = f32[] parameter(1)
  ROOT %add.44192 = f32[] add(%Arg_0.44190, %Arg_1.44191)
}

%region_1847.44202 (Arg_0.44199: f32[], Arg_1.44200: f32[]) -> f32[] {
  %Arg_0.44199 = f32[] parameter(0)
  %Arg_1.44200 = f32[] parameter(1)
  ROOT %add.44201 = f32[] add(%Arg_0.44199, %Arg_1.44200)
}

%region_1848.44211 (Arg_0.44208: f32[], Arg_1.44209: f32[]) -> f32[] {
  %Arg_0.44208 = f32[] parameter(0)
  %Arg_1.44209 = f32[] parameter(1)
  ROOT %add.44210 = f32[] add(%Arg_0.44208, %Arg_1.44209)
}

%region_1849.44220 (Arg_0.44217: f32[], Arg_1.44218: f32[]) -> f32[] {
  %Arg_0.44217 = f32[] parameter(0)
  %Arg_1.44218 = f32[] parameter(1)
  ROOT %add.44219 = f32[] add(%Arg_0.44217, %Arg_1.44218)
}

%region_1850.44229 (Arg_0.44226: f32[], Arg_1.44227: f32[]) -> f32[] {
  %Arg_0.44226 = f32[] parameter(0)
  %Arg_1.44227 = f32[] parameter(1)
  ROOT %add.44228 = f32[] add(%Arg_0.44226, %Arg_1.44227)
}

%region_1851.44238 (Arg_0.44235: f32[], Arg_1.44236: f32[]) -> f32[] {
  %Arg_0.44235 = f32[] parameter(0)
  %Arg_1.44236 = f32[] parameter(1)
  ROOT %add.44237 = f32[] add(%Arg_0.44235, %Arg_1.44236)
}

%region_1852.44247 (Arg_0.44244: f32[], Arg_1.44245: f32[]) -> f32[] {
  %Arg_0.44244 = f32[] parameter(0)
  %Arg_1.44245 = f32[] parameter(1)
  ROOT %add.44246 = f32[] add(%Arg_0.44244, %Arg_1.44245)
}

%region_1853.44256 (Arg_0.44253: f32[], Arg_1.44254: f32[]) -> f32[] {
  %Arg_0.44253 = f32[] parameter(0)
  %Arg_1.44254 = f32[] parameter(1)
  ROOT %add.44255 = f32[] add(%Arg_0.44253, %Arg_1.44254)
}

%region_1854.44265 (Arg_0.44262: f32[], Arg_1.44263: f32[]) -> f32[] {
  %Arg_0.44262 = f32[] parameter(0)
  %Arg_1.44263 = f32[] parameter(1)
  ROOT %add.44264 = f32[] add(%Arg_0.44262, %Arg_1.44263)
}

%region_1855.44274 (Arg_0.44271: f32[], Arg_1.44272: f32[]) -> f32[] {
  %Arg_0.44271 = f32[] parameter(0)
  %Arg_1.44272 = f32[] parameter(1)
  ROOT %add.44273 = f32[] add(%Arg_0.44271, %Arg_1.44272)
}

%region_1856.44283 (Arg_0.44280: f32[], Arg_1.44281: f32[]) -> f32[] {
  %Arg_0.44280 = f32[] parameter(0)
  %Arg_1.44281 = f32[] parameter(1)
  ROOT %add.44282 = f32[] add(%Arg_0.44280, %Arg_1.44281)
}

%region_1857.44292 (Arg_0.44289: f32[], Arg_1.44290: f32[]) -> f32[] {
  %Arg_0.44289 = f32[] parameter(0)
  %Arg_1.44290 = f32[] parameter(1)
  ROOT %add.44291 = f32[] add(%Arg_0.44289, %Arg_1.44290)
}

%region_1858.44301 (Arg_0.44298: f32[], Arg_1.44299: f32[]) -> f32[] {
  %Arg_0.44298 = f32[] parameter(0)
  %Arg_1.44299 = f32[] parameter(1)
  ROOT %add.44300 = f32[] add(%Arg_0.44298, %Arg_1.44299)
}

%region_1859.44310 (Arg_0.44307: f32[], Arg_1.44308: f32[]) -> f32[] {
  %Arg_0.44307 = f32[] parameter(0)
  %Arg_1.44308 = f32[] parameter(1)
  ROOT %add.44309 = f32[] add(%Arg_0.44307, %Arg_1.44308)
}

%region_1860.44319 (Arg_0.44316: f32[], Arg_1.44317: f32[]) -> f32[] {
  %Arg_0.44316 = f32[] parameter(0)
  %Arg_1.44317 = f32[] parameter(1)
  ROOT %add.44318 = f32[] add(%Arg_0.44316, %Arg_1.44317)
}

%region_1861.44328 (Arg_0.44325: f32[], Arg_1.44326: f32[]) -> f32[] {
  %Arg_0.44325 = f32[] parameter(0)
  %Arg_1.44326 = f32[] parameter(1)
  ROOT %add.44327 = f32[] add(%Arg_0.44325, %Arg_1.44326)
}

%region_1862.44337 (Arg_0.44334: f32[], Arg_1.44335: f32[]) -> f32[] {
  %Arg_0.44334 = f32[] parameter(0)
  %Arg_1.44335 = f32[] parameter(1)
  ROOT %add.44336 = f32[] add(%Arg_0.44334, %Arg_1.44335)
}

%region_1863.44346 (Arg_0.44343: f32[], Arg_1.44344: f32[]) -> f32[] {
  %Arg_0.44343 = f32[] parameter(0)
  %Arg_1.44344 = f32[] parameter(1)
  ROOT %add.44345 = f32[] add(%Arg_0.44343, %Arg_1.44344)
}

%region_1864.44355 (Arg_0.44352: f32[], Arg_1.44353: f32[]) -> f32[] {
  %Arg_0.44352 = f32[] parameter(0)
  %Arg_1.44353 = f32[] parameter(1)
  ROOT %add.44354 = f32[] add(%Arg_0.44352, %Arg_1.44353)
}

%region_1865.44364 (Arg_0.44361: f32[], Arg_1.44362: f32[]) -> f32[] {
  %Arg_0.44361 = f32[] parameter(0)
  %Arg_1.44362 = f32[] parameter(1)
  ROOT %add.44363 = f32[] add(%Arg_0.44361, %Arg_1.44362)
}

%region_1866.44373 (Arg_0.44370: f32[], Arg_1.44371: f32[]) -> f32[] {
  %Arg_0.44370 = f32[] parameter(0)
  %Arg_1.44371 = f32[] parameter(1)
  ROOT %add.44372 = f32[] add(%Arg_0.44370, %Arg_1.44371)
}

%region_1867.44382 (Arg_0.44379: f32[], Arg_1.44380: f32[]) -> f32[] {
  %Arg_0.44379 = f32[] parameter(0)
  %Arg_1.44380 = f32[] parameter(1)
  ROOT %add.44381 = f32[] add(%Arg_0.44379, %Arg_1.44380)
}

%region_1868.44391 (Arg_0.44388: f32[], Arg_1.44389: f32[]) -> f32[] {
  %Arg_0.44388 = f32[] parameter(0)
  %Arg_1.44389 = f32[] parameter(1)
  ROOT %add.44390 = f32[] add(%Arg_0.44388, %Arg_1.44389)
}

%region_1869.44400 (Arg_0.44397: f32[], Arg_1.44398: f32[]) -> f32[] {
  %Arg_0.44397 = f32[] parameter(0)
  %Arg_1.44398 = f32[] parameter(1)
  ROOT %add.44399 = f32[] add(%Arg_0.44397, %Arg_1.44398)
}

%region_1870.44409 (Arg_0.44406: f32[], Arg_1.44407: f32[]) -> f32[] {
  %Arg_0.44406 = f32[] parameter(0)
  %Arg_1.44407 = f32[] parameter(1)
  ROOT %add.44408 = f32[] add(%Arg_0.44406, %Arg_1.44407)
}

%region_1871.44418 (Arg_0.44415: f32[], Arg_1.44416: f32[]) -> f32[] {
  %Arg_0.44415 = f32[] parameter(0)
  %Arg_1.44416 = f32[] parameter(1)
  ROOT %add.44417 = f32[] add(%Arg_0.44415, %Arg_1.44416)
}

%region_1872.44427 (Arg_0.44424: f32[], Arg_1.44425: f32[]) -> f32[] {
  %Arg_0.44424 = f32[] parameter(0)
  %Arg_1.44425 = f32[] parameter(1)
  ROOT %add.44426 = f32[] add(%Arg_0.44424, %Arg_1.44425)
}

%region_1873.44436 (Arg_0.44433: f32[], Arg_1.44434: f32[]) -> f32[] {
  %Arg_0.44433 = f32[] parameter(0)
  %Arg_1.44434 = f32[] parameter(1)
  ROOT %add.44435 = f32[] add(%Arg_0.44433, %Arg_1.44434)
}

%region_1874.44445 (Arg_0.44442: f32[], Arg_1.44443: f32[]) -> f32[] {
  %Arg_0.44442 = f32[] parameter(0)
  %Arg_1.44443 = f32[] parameter(1)
  ROOT %add.44444 = f32[] add(%Arg_0.44442, %Arg_1.44443)
}

%region_1875.44454 (Arg_0.44451: f32[], Arg_1.44452: f32[]) -> f32[] {
  %Arg_0.44451 = f32[] parameter(0)
  %Arg_1.44452 = f32[] parameter(1)
  ROOT %add.44453 = f32[] add(%Arg_0.44451, %Arg_1.44452)
}

%region_1876.44463 (Arg_0.44460: f32[], Arg_1.44461: f32[]) -> f32[] {
  %Arg_0.44460 = f32[] parameter(0)
  %Arg_1.44461 = f32[] parameter(1)
  ROOT %add.44462 = f32[] add(%Arg_0.44460, %Arg_1.44461)
}

%region_1877.44472 (Arg_0.44469: f32[], Arg_1.44470: f32[]) -> f32[] {
  %Arg_0.44469 = f32[] parameter(0)
  %Arg_1.44470 = f32[] parameter(1)
  ROOT %add.44471 = f32[] add(%Arg_0.44469, %Arg_1.44470)
}

%region_1878.44481 (Arg_0.44478: f32[], Arg_1.44479: f32[]) -> f32[] {
  %Arg_0.44478 = f32[] parameter(0)
  %Arg_1.44479 = f32[] parameter(1)
  ROOT %add.44480 = f32[] add(%Arg_0.44478, %Arg_1.44479)
}

%region_1879.44490 (Arg_0.44487: f32[], Arg_1.44488: f32[]) -> f32[] {
  %Arg_0.44487 = f32[] parameter(0)
  %Arg_1.44488 = f32[] parameter(1)
  ROOT %add.44489 = f32[] add(%Arg_0.44487, %Arg_1.44488)
}

%region_1880.44499 (Arg_0.44496: f32[], Arg_1.44497: f32[]) -> f32[] {
  %Arg_0.44496 = f32[] parameter(0)
  %Arg_1.44497 = f32[] parameter(1)
  ROOT %add.44498 = f32[] add(%Arg_0.44496, %Arg_1.44497)
}

%region_1881.44508 (Arg_0.44505: f32[], Arg_1.44506: f32[]) -> f32[] {
  %Arg_0.44505 = f32[] parameter(0)
  %Arg_1.44506 = f32[] parameter(1)
  ROOT %add.44507 = f32[] add(%Arg_0.44505, %Arg_1.44506)
}

%region_1882.44517 (Arg_0.44514: f32[], Arg_1.44515: f32[]) -> f32[] {
  %Arg_0.44514 = f32[] parameter(0)
  %Arg_1.44515 = f32[] parameter(1)
  ROOT %add.44516 = f32[] add(%Arg_0.44514, %Arg_1.44515)
}

%region_1883.44526 (Arg_0.44523: f32[], Arg_1.44524: f32[]) -> f32[] {
  %Arg_0.44523 = f32[] parameter(0)
  %Arg_1.44524 = f32[] parameter(1)
  ROOT %add.44525 = f32[] add(%Arg_0.44523, %Arg_1.44524)
}

%region_1884.44535 (Arg_0.44532: f32[], Arg_1.44533: f32[]) -> f32[] {
  %Arg_0.44532 = f32[] parameter(0)
  %Arg_1.44533 = f32[] parameter(1)
  ROOT %add.44534 = f32[] add(%Arg_0.44532, %Arg_1.44533)
}

%region_1885.44544 (Arg_0.44541: f32[], Arg_1.44542: f32[]) -> f32[] {
  %Arg_0.44541 = f32[] parameter(0)
  %Arg_1.44542 = f32[] parameter(1)
  ROOT %add.44543 = f32[] add(%Arg_0.44541, %Arg_1.44542)
}

%region_1886.44553 (Arg_0.44550: f32[], Arg_1.44551: f32[]) -> f32[] {
  %Arg_0.44550 = f32[] parameter(0)
  %Arg_1.44551 = f32[] parameter(1)
  ROOT %add.44552 = f32[] add(%Arg_0.44550, %Arg_1.44551)
}

%region_1887.44562 (Arg_0.44559: f32[], Arg_1.44560: f32[]) -> f32[] {
  %Arg_0.44559 = f32[] parameter(0)
  %Arg_1.44560 = f32[] parameter(1)
  ROOT %add.44561 = f32[] add(%Arg_0.44559, %Arg_1.44560)
}

%region_1888.44571 (Arg_0.44568: f32[], Arg_1.44569: f32[]) -> f32[] {
  %Arg_0.44568 = f32[] parameter(0)
  %Arg_1.44569 = f32[] parameter(1)
  ROOT %add.44570 = f32[] add(%Arg_0.44568, %Arg_1.44569)
}

%region_1889.44580 (Arg_0.44577: f32[], Arg_1.44578: f32[]) -> f32[] {
  %Arg_0.44577 = f32[] parameter(0)
  %Arg_1.44578 = f32[] parameter(1)
  ROOT %add.44579 = f32[] add(%Arg_0.44577, %Arg_1.44578)
}

%region_1890.44589 (Arg_0.44586: f32[], Arg_1.44587: f32[]) -> f32[] {
  %Arg_0.44586 = f32[] parameter(0)
  %Arg_1.44587 = f32[] parameter(1)
  ROOT %add.44588 = f32[] add(%Arg_0.44586, %Arg_1.44587)
}

%region_1891.44598 (Arg_0.44595: f32[], Arg_1.44596: f32[]) -> f32[] {
  %Arg_0.44595 = f32[] parameter(0)
  %Arg_1.44596 = f32[] parameter(1)
  ROOT %add.44597 = f32[] add(%Arg_0.44595, %Arg_1.44596)
}

%region_1892.44607 (Arg_0.44604: f32[], Arg_1.44605: f32[]) -> f32[] {
  %Arg_0.44604 = f32[] parameter(0)
  %Arg_1.44605 = f32[] parameter(1)
  ROOT %add.44606 = f32[] add(%Arg_0.44604, %Arg_1.44605)
}

%region_1893.44616 (Arg_0.44613: f32[], Arg_1.44614: f32[]) -> f32[] {
  %Arg_0.44613 = f32[] parameter(0)
  %Arg_1.44614 = f32[] parameter(1)
  ROOT %add.44615 = f32[] add(%Arg_0.44613, %Arg_1.44614)
}

%region_1894.44625 (Arg_0.44622: f32[], Arg_1.44623: f32[]) -> f32[] {
  %Arg_0.44622 = f32[] parameter(0)
  %Arg_1.44623 = f32[] parameter(1)
  ROOT %add.44624 = f32[] add(%Arg_0.44622, %Arg_1.44623)
}

%region_1895.44634 (Arg_0.44631: f32[], Arg_1.44632: f32[]) -> f32[] {
  %Arg_0.44631 = f32[] parameter(0)
  %Arg_1.44632 = f32[] parameter(1)
  ROOT %add.44633 = f32[] add(%Arg_0.44631, %Arg_1.44632)
}

%region_1896.44643 (Arg_0.44640: f32[], Arg_1.44641: f32[]) -> f32[] {
  %Arg_0.44640 = f32[] parameter(0)
  %Arg_1.44641 = f32[] parameter(1)
  ROOT %add.44642 = f32[] add(%Arg_0.44640, %Arg_1.44641)
}

%region_1897.44652 (Arg_0.44649: f32[], Arg_1.44650: f32[]) -> f32[] {
  %Arg_0.44649 = f32[] parameter(0)
  %Arg_1.44650 = f32[] parameter(1)
  ROOT %add.44651 = f32[] add(%Arg_0.44649, %Arg_1.44650)
}

%region_1898.44661 (Arg_0.44658: f32[], Arg_1.44659: f32[]) -> f32[] {
  %Arg_0.44658 = f32[] parameter(0)
  %Arg_1.44659 = f32[] parameter(1)
  ROOT %add.44660 = f32[] add(%Arg_0.44658, %Arg_1.44659)
}

%region_1899.44670 (Arg_0.44667: f32[], Arg_1.44668: f32[]) -> f32[] {
  %Arg_0.44667 = f32[] parameter(0)
  %Arg_1.44668 = f32[] parameter(1)
  ROOT %add.44669 = f32[] add(%Arg_0.44667, %Arg_1.44668)
}

%region_1900.44679 (Arg_0.44676: f32[], Arg_1.44677: f32[]) -> f32[] {
  %Arg_0.44676 = f32[] parameter(0)
  %Arg_1.44677 = f32[] parameter(1)
  ROOT %add.44678 = f32[] add(%Arg_0.44676, %Arg_1.44677)
}

%region_1901.44688 (Arg_0.44685: f32[], Arg_1.44686: f32[]) -> f32[] {
  %Arg_0.44685 = f32[] parameter(0)
  %Arg_1.44686 = f32[] parameter(1)
  ROOT %add.44687 = f32[] add(%Arg_0.44685, %Arg_1.44686)
}

%region_1902.44697 (Arg_0.44694: f32[], Arg_1.44695: f32[]) -> f32[] {
  %Arg_0.44694 = f32[] parameter(0)
  %Arg_1.44695 = f32[] parameter(1)
  ROOT %add.44696 = f32[] add(%Arg_0.44694, %Arg_1.44695)
}

%region_1903.44706 (Arg_0.44703: f32[], Arg_1.44704: f32[]) -> f32[] {
  %Arg_0.44703 = f32[] parameter(0)
  %Arg_1.44704 = f32[] parameter(1)
  ROOT %add.44705 = f32[] add(%Arg_0.44703, %Arg_1.44704)
}

%region_1904.44715 (Arg_0.44712: f32[], Arg_1.44713: f32[]) -> f32[] {
  %Arg_0.44712 = f32[] parameter(0)
  %Arg_1.44713 = f32[] parameter(1)
  ROOT %add.44714 = f32[] add(%Arg_0.44712, %Arg_1.44713)
}

%region_1905.44724 (Arg_0.44721: f32[], Arg_1.44722: f32[]) -> f32[] {
  %Arg_0.44721 = f32[] parameter(0)
  %Arg_1.44722 = f32[] parameter(1)
  ROOT %add.44723 = f32[] add(%Arg_0.44721, %Arg_1.44722)
}

%region_1906.44733 (Arg_0.44730: f32[], Arg_1.44731: f32[]) -> f32[] {
  %Arg_0.44730 = f32[] parameter(0)
  %Arg_1.44731 = f32[] parameter(1)
  ROOT %add.44732 = f32[] add(%Arg_0.44730, %Arg_1.44731)
}

%region_1907.44742 (Arg_0.44739: f32[], Arg_1.44740: f32[]) -> f32[] {
  %Arg_0.44739 = f32[] parameter(0)
  %Arg_1.44740 = f32[] parameter(1)
  ROOT %add.44741 = f32[] add(%Arg_0.44739, %Arg_1.44740)
}

%region_1908.44751 (Arg_0.44748: f32[], Arg_1.44749: f32[]) -> f32[] {
  %Arg_0.44748 = f32[] parameter(0)
  %Arg_1.44749 = f32[] parameter(1)
  ROOT %add.44750 = f32[] add(%Arg_0.44748, %Arg_1.44749)
}

%region_1909.44760 (Arg_0.44757: f32[], Arg_1.44758: f32[]) -> f32[] {
  %Arg_0.44757 = f32[] parameter(0)
  %Arg_1.44758 = f32[] parameter(1)
  ROOT %add.44759 = f32[] add(%Arg_0.44757, %Arg_1.44758)
}

%region_1910.44769 (Arg_0.44766: f32[], Arg_1.44767: f32[]) -> f32[] {
  %Arg_0.44766 = f32[] parameter(0)
  %Arg_1.44767 = f32[] parameter(1)
  ROOT %add.44768 = f32[] add(%Arg_0.44766, %Arg_1.44767)
}

%region_1911.44778 (Arg_0.44775: f32[], Arg_1.44776: f32[]) -> f32[] {
  %Arg_0.44775 = f32[] parameter(0)
  %Arg_1.44776 = f32[] parameter(1)
  ROOT %add.44777 = f32[] add(%Arg_0.44775, %Arg_1.44776)
}

%region_1912.44787 (Arg_0.44784: f32[], Arg_1.44785: f32[]) -> f32[] {
  %Arg_0.44784 = f32[] parameter(0)
  %Arg_1.44785 = f32[] parameter(1)
  ROOT %add.44786 = f32[] add(%Arg_0.44784, %Arg_1.44785)
}

%region_1913.44796 (Arg_0.44793: f32[], Arg_1.44794: f32[]) -> f32[] {
  %Arg_0.44793 = f32[] parameter(0)
  %Arg_1.44794 = f32[] parameter(1)
  ROOT %add.44795 = f32[] add(%Arg_0.44793, %Arg_1.44794)
}

%region_1914.44805 (Arg_0.44802: f32[], Arg_1.44803: f32[]) -> f32[] {
  %Arg_0.44802 = f32[] parameter(0)
  %Arg_1.44803 = f32[] parameter(1)
  ROOT %add.44804 = f32[] add(%Arg_0.44802, %Arg_1.44803)
}

%region_1915.44814 (Arg_0.44811: f32[], Arg_1.44812: f32[]) -> f32[] {
  %Arg_0.44811 = f32[] parameter(0)
  %Arg_1.44812 = f32[] parameter(1)
  ROOT %add.44813 = f32[] add(%Arg_0.44811, %Arg_1.44812)
}

%region_1916.44823 (Arg_0.44820: f32[], Arg_1.44821: f32[]) -> f32[] {
  %Arg_0.44820 = f32[] parameter(0)
  %Arg_1.44821 = f32[] parameter(1)
  ROOT %add.44822 = f32[] add(%Arg_0.44820, %Arg_1.44821)
}

%region_1917.44832 (Arg_0.44829: f32[], Arg_1.44830: f32[]) -> f32[] {
  %Arg_0.44829 = f32[] parameter(0)
  %Arg_1.44830 = f32[] parameter(1)
  ROOT %add.44831 = f32[] add(%Arg_0.44829, %Arg_1.44830)
}

%region_1918.44841 (Arg_0.44838: f32[], Arg_1.44839: f32[]) -> f32[] {
  %Arg_0.44838 = f32[] parameter(0)
  %Arg_1.44839 = f32[] parameter(1)
  ROOT %add.44840 = f32[] add(%Arg_0.44838, %Arg_1.44839)
}

%region_1919.44850 (Arg_0.44847: f32[], Arg_1.44848: f32[]) -> f32[] {
  %Arg_0.44847 = f32[] parameter(0)
  %Arg_1.44848 = f32[] parameter(1)
  ROOT %add.44849 = f32[] add(%Arg_0.44847, %Arg_1.44848)
}

%region_1920.44859 (Arg_0.44856: f32[], Arg_1.44857: f32[]) -> f32[] {
  %Arg_0.44856 = f32[] parameter(0)
  %Arg_1.44857 = f32[] parameter(1)
  ROOT %add.44858 = f32[] add(%Arg_0.44856, %Arg_1.44857)
}

%region_1921.44868 (Arg_0.44865: f32[], Arg_1.44866: f32[]) -> f32[] {
  %Arg_0.44865 = f32[] parameter(0)
  %Arg_1.44866 = f32[] parameter(1)
  ROOT %add.44867 = f32[] add(%Arg_0.44865, %Arg_1.44866)
}

%region_1922.44877 (Arg_0.44874: f32[], Arg_1.44875: f32[]) -> f32[] {
  %Arg_0.44874 = f32[] parameter(0)
  %Arg_1.44875 = f32[] parameter(1)
  ROOT %add.44876 = f32[] add(%Arg_0.44874, %Arg_1.44875)
}

%region_1923.44886 (Arg_0.44883: f32[], Arg_1.44884: f32[]) -> f32[] {
  %Arg_0.44883 = f32[] parameter(0)
  %Arg_1.44884 = f32[] parameter(1)
  ROOT %add.44885 = f32[] add(%Arg_0.44883, %Arg_1.44884)
}

%region_1924.44895 (Arg_0.44892: f32[], Arg_1.44893: f32[]) -> f32[] {
  %Arg_0.44892 = f32[] parameter(0)
  %Arg_1.44893 = f32[] parameter(1)
  ROOT %add.44894 = f32[] add(%Arg_0.44892, %Arg_1.44893)
}

%region_1925.44904 (Arg_0.44901: f32[], Arg_1.44902: f32[]) -> f32[] {
  %Arg_0.44901 = f32[] parameter(0)
  %Arg_1.44902 = f32[] parameter(1)
  ROOT %add.44903 = f32[] add(%Arg_0.44901, %Arg_1.44902)
}

%region_1926.44913 (Arg_0.44910: f32[], Arg_1.44911: f32[]) -> f32[] {
  %Arg_0.44910 = f32[] parameter(0)
  %Arg_1.44911 = f32[] parameter(1)
  ROOT %add.44912 = f32[] add(%Arg_0.44910, %Arg_1.44911)
}

%region_1927.44922 (Arg_0.44919: f32[], Arg_1.44920: f32[]) -> f32[] {
  %Arg_0.44919 = f32[] parameter(0)
  %Arg_1.44920 = f32[] parameter(1)
  ROOT %add.44921 = f32[] add(%Arg_0.44919, %Arg_1.44920)
}

%region_1928.44931 (Arg_0.44928: f32[], Arg_1.44929: f32[]) -> f32[] {
  %Arg_0.44928 = f32[] parameter(0)
  %Arg_1.44929 = f32[] parameter(1)
  ROOT %add.44930 = f32[] add(%Arg_0.44928, %Arg_1.44929)
}

%region_1929.44940 (Arg_0.44937: f32[], Arg_1.44938: f32[]) -> f32[] {
  %Arg_0.44937 = f32[] parameter(0)
  %Arg_1.44938 = f32[] parameter(1)
  ROOT %add.44939 = f32[] add(%Arg_0.44937, %Arg_1.44938)
}

%region_1930.44949 (Arg_0.44946: f32[], Arg_1.44947: f32[]) -> f32[] {
  %Arg_0.44946 = f32[] parameter(0)
  %Arg_1.44947 = f32[] parameter(1)
  ROOT %add.44948 = f32[] add(%Arg_0.44946, %Arg_1.44947)
}

%region_1931.44958 (Arg_0.44955: f32[], Arg_1.44956: f32[]) -> f32[] {
  %Arg_0.44955 = f32[] parameter(0)
  %Arg_1.44956 = f32[] parameter(1)
  ROOT %add.44957 = f32[] add(%Arg_0.44955, %Arg_1.44956)
}

%region_1932.44967 (Arg_0.44964: f32[], Arg_1.44965: f32[]) -> f32[] {
  %Arg_0.44964 = f32[] parameter(0)
  %Arg_1.44965 = f32[] parameter(1)
  ROOT %add.44966 = f32[] add(%Arg_0.44964, %Arg_1.44965)
}

%region_1933.44976 (Arg_0.44973: f32[], Arg_1.44974: f32[]) -> f32[] {
  %Arg_0.44973 = f32[] parameter(0)
  %Arg_1.44974 = f32[] parameter(1)
  ROOT %add.44975 = f32[] add(%Arg_0.44973, %Arg_1.44974)
}

%region_1934.44985 (Arg_0.44982: f32[], Arg_1.44983: f32[]) -> f32[] {
  %Arg_0.44982 = f32[] parameter(0)
  %Arg_1.44983 = f32[] parameter(1)
  ROOT %add.44984 = f32[] add(%Arg_0.44982, %Arg_1.44983)
}

%region_1935.44994 (Arg_0.44991: f32[], Arg_1.44992: f32[]) -> f32[] {
  %Arg_0.44991 = f32[] parameter(0)
  %Arg_1.44992 = f32[] parameter(1)
  ROOT %add.44993 = f32[] add(%Arg_0.44991, %Arg_1.44992)
}

%region_1936.45003 (Arg_0.45000: f32[], Arg_1.45001: f32[]) -> f32[] {
  %Arg_0.45000 = f32[] parameter(0)
  %Arg_1.45001 = f32[] parameter(1)
  ROOT %add.45002 = f32[] add(%Arg_0.45000, %Arg_1.45001)
}

%region_1937.45012 (Arg_0.45009: f32[], Arg_1.45010: f32[]) -> f32[] {
  %Arg_0.45009 = f32[] parameter(0)
  %Arg_1.45010 = f32[] parameter(1)
  ROOT %add.45011 = f32[] add(%Arg_0.45009, %Arg_1.45010)
}

%region_1938.45021 (Arg_0.45018: f32[], Arg_1.45019: f32[]) -> f32[] {
  %Arg_0.45018 = f32[] parameter(0)
  %Arg_1.45019 = f32[] parameter(1)
  ROOT %add.45020 = f32[] add(%Arg_0.45018, %Arg_1.45019)
}

%region_1939.45030 (Arg_0.45027: f32[], Arg_1.45028: f32[]) -> f32[] {
  %Arg_0.45027 = f32[] parameter(0)
  %Arg_1.45028 = f32[] parameter(1)
  ROOT %add.45029 = f32[] add(%Arg_0.45027, %Arg_1.45028)
}

%region_1940.45039 (Arg_0.45036: f32[], Arg_1.45037: f32[]) -> f32[] {
  %Arg_0.45036 = f32[] parameter(0)
  %Arg_1.45037 = f32[] parameter(1)
  ROOT %add.45038 = f32[] add(%Arg_0.45036, %Arg_1.45037)
}

%region_1941.45048 (Arg_0.45045: f32[], Arg_1.45046: f32[]) -> f32[] {
  %Arg_0.45045 = f32[] parameter(0)
  %Arg_1.45046 = f32[] parameter(1)
  ROOT %add.45047 = f32[] add(%Arg_0.45045, %Arg_1.45046)
}

%region_1942.45057 (Arg_0.45054: f32[], Arg_1.45055: f32[]) -> f32[] {
  %Arg_0.45054 = f32[] parameter(0)
  %Arg_1.45055 = f32[] parameter(1)
  ROOT %add.45056 = f32[] add(%Arg_0.45054, %Arg_1.45055)
}

%region_1943.45066 (Arg_0.45063: f32[], Arg_1.45064: f32[]) -> f32[] {
  %Arg_0.45063 = f32[] parameter(0)
  %Arg_1.45064 = f32[] parameter(1)
  ROOT %add.45065 = f32[] add(%Arg_0.45063, %Arg_1.45064)
}

%region_1944.45075 (Arg_0.45072: f32[], Arg_1.45073: f32[]) -> f32[] {
  %Arg_0.45072 = f32[] parameter(0)
  %Arg_1.45073 = f32[] parameter(1)
  ROOT %add.45074 = f32[] add(%Arg_0.45072, %Arg_1.45073)
}

%region_1945.45084 (Arg_0.45081: f32[], Arg_1.45082: f32[]) -> f32[] {
  %Arg_0.45081 = f32[] parameter(0)
  %Arg_1.45082 = f32[] parameter(1)
  ROOT %add.45083 = f32[] add(%Arg_0.45081, %Arg_1.45082)
}

%region_1946.45093 (Arg_0.45090: f32[], Arg_1.45091: f32[]) -> f32[] {
  %Arg_0.45090 = f32[] parameter(0)
  %Arg_1.45091 = f32[] parameter(1)
  ROOT %add.45092 = f32[] add(%Arg_0.45090, %Arg_1.45091)
}

%region_1947.45102 (Arg_0.45099: f32[], Arg_1.45100: f32[]) -> f32[] {
  %Arg_0.45099 = f32[] parameter(0)
  %Arg_1.45100 = f32[] parameter(1)
  ROOT %add.45101 = f32[] add(%Arg_0.45099, %Arg_1.45100)
}

%region_1948.45111 (Arg_0.45108: f32[], Arg_1.45109: f32[]) -> f32[] {
  %Arg_0.45108 = f32[] parameter(0)
  %Arg_1.45109 = f32[] parameter(1)
  ROOT %add.45110 = f32[] add(%Arg_0.45108, %Arg_1.45109)
}

%region_1949.45120 (Arg_0.45117: f32[], Arg_1.45118: f32[]) -> f32[] {
  %Arg_0.45117 = f32[] parameter(0)
  %Arg_1.45118 = f32[] parameter(1)
  ROOT %add.45119 = f32[] add(%Arg_0.45117, %Arg_1.45118)
}

%region_1950.45129 (Arg_0.45126: f32[], Arg_1.45127: f32[]) -> f32[] {
  %Arg_0.45126 = f32[] parameter(0)
  %Arg_1.45127 = f32[] parameter(1)
  ROOT %add.45128 = f32[] add(%Arg_0.45126, %Arg_1.45127)
}

%region_1951.45138 (Arg_0.45135: f32[], Arg_1.45136: f32[]) -> f32[] {
  %Arg_0.45135 = f32[] parameter(0)
  %Arg_1.45136 = f32[] parameter(1)
  ROOT %add.45137 = f32[] add(%Arg_0.45135, %Arg_1.45136)
}

%region_1952.45147 (Arg_0.45144: f32[], Arg_1.45145: f32[]) -> f32[] {
  %Arg_0.45144 = f32[] parameter(0)
  %Arg_1.45145 = f32[] parameter(1)
  ROOT %add.45146 = f32[] add(%Arg_0.45144, %Arg_1.45145)
}

%region_1953.45156 (Arg_0.45153: f32[], Arg_1.45154: f32[]) -> f32[] {
  %Arg_0.45153 = f32[] parameter(0)
  %Arg_1.45154 = f32[] parameter(1)
  ROOT %add.45155 = f32[] add(%Arg_0.45153, %Arg_1.45154)
}

%region_1954.45165 (Arg_0.45162: f32[], Arg_1.45163: f32[]) -> f32[] {
  %Arg_0.45162 = f32[] parameter(0)
  %Arg_1.45163 = f32[] parameter(1)
  ROOT %add.45164 = f32[] add(%Arg_0.45162, %Arg_1.45163)
}

%region_1955.45174 (Arg_0.45171: f32[], Arg_1.45172: f32[]) -> f32[] {
  %Arg_0.45171 = f32[] parameter(0)
  %Arg_1.45172 = f32[] parameter(1)
  ROOT %add.45173 = f32[] add(%Arg_0.45171, %Arg_1.45172)
}

%region_1956.45183 (Arg_0.45180: f32[], Arg_1.45181: f32[]) -> f32[] {
  %Arg_0.45180 = f32[] parameter(0)
  %Arg_1.45181 = f32[] parameter(1)
  ROOT %add.45182 = f32[] add(%Arg_0.45180, %Arg_1.45181)
}

%region_1957.45192 (Arg_0.45189: f32[], Arg_1.45190: f32[]) -> f32[] {
  %Arg_0.45189 = f32[] parameter(0)
  %Arg_1.45190 = f32[] parameter(1)
  ROOT %add.45191 = f32[] add(%Arg_0.45189, %Arg_1.45190)
}

%region_1958.45201 (Arg_0.45198: f32[], Arg_1.45199: f32[]) -> f32[] {
  %Arg_0.45198 = f32[] parameter(0)
  %Arg_1.45199 = f32[] parameter(1)
  ROOT %add.45200 = f32[] add(%Arg_0.45198, %Arg_1.45199)
}

%region_1959.45210 (Arg_0.45207: f32[], Arg_1.45208: f32[]) -> f32[] {
  %Arg_0.45207 = f32[] parameter(0)
  %Arg_1.45208 = f32[] parameter(1)
  ROOT %add.45209 = f32[] add(%Arg_0.45207, %Arg_1.45208)
}

%region_1960.45219 (Arg_0.45216: f32[], Arg_1.45217: f32[]) -> f32[] {
  %Arg_0.45216 = f32[] parameter(0)
  %Arg_1.45217 = f32[] parameter(1)
  ROOT %add.45218 = f32[] add(%Arg_0.45216, %Arg_1.45217)
}

%region_1961.45228 (Arg_0.45225: f32[], Arg_1.45226: f32[]) -> f32[] {
  %Arg_0.45225 = f32[] parameter(0)
  %Arg_1.45226 = f32[] parameter(1)
  ROOT %add.45227 = f32[] add(%Arg_0.45225, %Arg_1.45226)
}

%region_1962.45237 (Arg_0.45234: f32[], Arg_1.45235: f32[]) -> f32[] {
  %Arg_0.45234 = f32[] parameter(0)
  %Arg_1.45235 = f32[] parameter(1)
  ROOT %add.45236 = f32[] add(%Arg_0.45234, %Arg_1.45235)
}

%region_1963.45246 (Arg_0.45243: f32[], Arg_1.45244: f32[]) -> f32[] {
  %Arg_0.45243 = f32[] parameter(0)
  %Arg_1.45244 = f32[] parameter(1)
  ROOT %add.45245 = f32[] add(%Arg_0.45243, %Arg_1.45244)
}

%region_1964.45255 (Arg_0.45252: f32[], Arg_1.45253: f32[]) -> f32[] {
  %Arg_0.45252 = f32[] parameter(0)
  %Arg_1.45253 = f32[] parameter(1)
  ROOT %add.45254 = f32[] add(%Arg_0.45252, %Arg_1.45253)
}

%region_1965.45264 (Arg_0.45261: f32[], Arg_1.45262: f32[]) -> f32[] {
  %Arg_0.45261 = f32[] parameter(0)
  %Arg_1.45262 = f32[] parameter(1)
  ROOT %add.45263 = f32[] add(%Arg_0.45261, %Arg_1.45262)
}

%region_1966.45273 (Arg_0.45270: f32[], Arg_1.45271: f32[]) -> f32[] {
  %Arg_0.45270 = f32[] parameter(0)
  %Arg_1.45271 = f32[] parameter(1)
  ROOT %add.45272 = f32[] add(%Arg_0.45270, %Arg_1.45271)
}

%region_1967.45282 (Arg_0.45279: f32[], Arg_1.45280: f32[]) -> f32[] {
  %Arg_0.45279 = f32[] parameter(0)
  %Arg_1.45280 = f32[] parameter(1)
  ROOT %add.45281 = f32[] add(%Arg_0.45279, %Arg_1.45280)
}

%region_1968.45291 (Arg_0.45288: f32[], Arg_1.45289: f32[]) -> f32[] {
  %Arg_0.45288 = f32[] parameter(0)
  %Arg_1.45289 = f32[] parameter(1)
  ROOT %add.45290 = f32[] add(%Arg_0.45288, %Arg_1.45289)
}

%region_1969.45300 (Arg_0.45297: f32[], Arg_1.45298: f32[]) -> f32[] {
  %Arg_0.45297 = f32[] parameter(0)
  %Arg_1.45298 = f32[] parameter(1)
  ROOT %add.45299 = f32[] add(%Arg_0.45297, %Arg_1.45298)
}

%region_1970.45309 (Arg_0.45306: f32[], Arg_1.45307: f32[]) -> f32[] {
  %Arg_0.45306 = f32[] parameter(0)
  %Arg_1.45307 = f32[] parameter(1)
  ROOT %add.45308 = f32[] add(%Arg_0.45306, %Arg_1.45307)
}

%region_1971.45318 (Arg_0.45315: f32[], Arg_1.45316: f32[]) -> f32[] {
  %Arg_0.45315 = f32[] parameter(0)
  %Arg_1.45316 = f32[] parameter(1)
  ROOT %add.45317 = f32[] add(%Arg_0.45315, %Arg_1.45316)
}

%region_1972.45327 (Arg_0.45324: f32[], Arg_1.45325: f32[]) -> f32[] {
  %Arg_0.45324 = f32[] parameter(0)
  %Arg_1.45325 = f32[] parameter(1)
  ROOT %add.45326 = f32[] add(%Arg_0.45324, %Arg_1.45325)
}

%region_1973.45336 (Arg_0.45333: f32[], Arg_1.45334: f32[]) -> f32[] {
  %Arg_0.45333 = f32[] parameter(0)
  %Arg_1.45334 = f32[] parameter(1)
  ROOT %add.45335 = f32[] add(%Arg_0.45333, %Arg_1.45334)
}

%region_1974.45345 (Arg_0.45342: f32[], Arg_1.45343: f32[]) -> f32[] {
  %Arg_0.45342 = f32[] parameter(0)
  %Arg_1.45343 = f32[] parameter(1)
  ROOT %add.45344 = f32[] add(%Arg_0.45342, %Arg_1.45343)
}

%region_1975.45354 (Arg_0.45351: f32[], Arg_1.45352: f32[]) -> f32[] {
  %Arg_0.45351 = f32[] parameter(0)
  %Arg_1.45352 = f32[] parameter(1)
  ROOT %add.45353 = f32[] add(%Arg_0.45351, %Arg_1.45352)
}

%region_1976.45363 (Arg_0.45360: f32[], Arg_1.45361: f32[]) -> f32[] {
  %Arg_0.45360 = f32[] parameter(0)
  %Arg_1.45361 = f32[] parameter(1)
  ROOT %add.45362 = f32[] add(%Arg_0.45360, %Arg_1.45361)
}

%region_1977.45372 (Arg_0.45369: f32[], Arg_1.45370: f32[]) -> f32[] {
  %Arg_0.45369 = f32[] parameter(0)
  %Arg_1.45370 = f32[] parameter(1)
  ROOT %add.45371 = f32[] add(%Arg_0.45369, %Arg_1.45370)
}

%region_1978.45381 (Arg_0.45378: f32[], Arg_1.45379: f32[]) -> f32[] {
  %Arg_0.45378 = f32[] parameter(0)
  %Arg_1.45379 = f32[] parameter(1)
  ROOT %add.45380 = f32[] add(%Arg_0.45378, %Arg_1.45379)
}

%region_1979.45390 (Arg_0.45387: f32[], Arg_1.45388: f32[]) -> f32[] {
  %Arg_0.45387 = f32[] parameter(0)
  %Arg_1.45388 = f32[] parameter(1)
  ROOT %add.45389 = f32[] add(%Arg_0.45387, %Arg_1.45388)
}

%region_1980.45399 (Arg_0.45396: f32[], Arg_1.45397: f32[]) -> f32[] {
  %Arg_0.45396 = f32[] parameter(0)
  %Arg_1.45397 = f32[] parameter(1)
  ROOT %add.45398 = f32[] add(%Arg_0.45396, %Arg_1.45397)
}

%region_1981.45408 (Arg_0.45405: f32[], Arg_1.45406: f32[]) -> f32[] {
  %Arg_0.45405 = f32[] parameter(0)
  %Arg_1.45406 = f32[] parameter(1)
  ROOT %add.45407 = f32[] add(%Arg_0.45405, %Arg_1.45406)
}

%region_1982.45417 (Arg_0.45414: f32[], Arg_1.45415: f32[]) -> f32[] {
  %Arg_0.45414 = f32[] parameter(0)
  %Arg_1.45415 = f32[] parameter(1)
  ROOT %add.45416 = f32[] add(%Arg_0.45414, %Arg_1.45415)
}

%region_1983.45426 (Arg_0.45423: f32[], Arg_1.45424: f32[]) -> f32[] {
  %Arg_0.45423 = f32[] parameter(0)
  %Arg_1.45424 = f32[] parameter(1)
  ROOT %add.45425 = f32[] add(%Arg_0.45423, %Arg_1.45424)
}

%region_1984.45435 (Arg_0.45432: f32[], Arg_1.45433: f32[]) -> f32[] {
  %Arg_0.45432 = f32[] parameter(0)
  %Arg_1.45433 = f32[] parameter(1)
  ROOT %add.45434 = f32[] add(%Arg_0.45432, %Arg_1.45433)
}

%region_1985.45444 (Arg_0.45441: f32[], Arg_1.45442: f32[]) -> f32[] {
  %Arg_0.45441 = f32[] parameter(0)
  %Arg_1.45442 = f32[] parameter(1)
  ROOT %add.45443 = f32[] add(%Arg_0.45441, %Arg_1.45442)
}

%region_1986.45453 (Arg_0.45450: f32[], Arg_1.45451: f32[]) -> f32[] {
  %Arg_0.45450 = f32[] parameter(0)
  %Arg_1.45451 = f32[] parameter(1)
  ROOT %add.45452 = f32[] add(%Arg_0.45450, %Arg_1.45451)
}

%region_1987.45462 (Arg_0.45459: f32[], Arg_1.45460: f32[]) -> f32[] {
  %Arg_0.45459 = f32[] parameter(0)
  %Arg_1.45460 = f32[] parameter(1)
  ROOT %add.45461 = f32[] add(%Arg_0.45459, %Arg_1.45460)
}

%region_1988.45471 (Arg_0.45468: f32[], Arg_1.45469: f32[]) -> f32[] {
  %Arg_0.45468 = f32[] parameter(0)
  %Arg_1.45469 = f32[] parameter(1)
  ROOT %add.45470 = f32[] add(%Arg_0.45468, %Arg_1.45469)
}

%region_1989.45480 (Arg_0.45477: f32[], Arg_1.45478: f32[]) -> f32[] {
  %Arg_0.45477 = f32[] parameter(0)
  %Arg_1.45478 = f32[] parameter(1)
  ROOT %add.45479 = f32[] add(%Arg_0.45477, %Arg_1.45478)
}

%region_1990.45489 (Arg_0.45486: f32[], Arg_1.45487: f32[]) -> f32[] {
  %Arg_0.45486 = f32[] parameter(0)
  %Arg_1.45487 = f32[] parameter(1)
  ROOT %add.45488 = f32[] add(%Arg_0.45486, %Arg_1.45487)
}

%region_1991.45498 (Arg_0.45495: f32[], Arg_1.45496: f32[]) -> f32[] {
  %Arg_0.45495 = f32[] parameter(0)
  %Arg_1.45496 = f32[] parameter(1)
  ROOT %add.45497 = f32[] add(%Arg_0.45495, %Arg_1.45496)
}

%region_1992.45507 (Arg_0.45504: f32[], Arg_1.45505: f32[]) -> f32[] {
  %Arg_0.45504 = f32[] parameter(0)
  %Arg_1.45505 = f32[] parameter(1)
  ROOT %add.45506 = f32[] add(%Arg_0.45504, %Arg_1.45505)
}

%region_1993.45516 (Arg_0.45513: f32[], Arg_1.45514: f32[]) -> f32[] {
  %Arg_0.45513 = f32[] parameter(0)
  %Arg_1.45514 = f32[] parameter(1)
  ROOT %add.45515 = f32[] add(%Arg_0.45513, %Arg_1.45514)
}

%region_1994.45525 (Arg_0.45522: f32[], Arg_1.45523: f32[]) -> f32[] {
  %Arg_0.45522 = f32[] parameter(0)
  %Arg_1.45523 = f32[] parameter(1)
  ROOT %add.45524 = f32[] add(%Arg_0.45522, %Arg_1.45523)
}

%region_1995.45534 (Arg_0.45531: f32[], Arg_1.45532: f32[]) -> f32[] {
  %Arg_0.45531 = f32[] parameter(0)
  %Arg_1.45532 = f32[] parameter(1)
  ROOT %add.45533 = f32[] add(%Arg_0.45531, %Arg_1.45532)
}

%region_1996.45543 (Arg_0.45540: f32[], Arg_1.45541: f32[]) -> f32[] {
  %Arg_0.45540 = f32[] parameter(0)
  %Arg_1.45541 = f32[] parameter(1)
  ROOT %add.45542 = f32[] add(%Arg_0.45540, %Arg_1.45541)
}

%region_1997.45552 (Arg_0.45549: f32[], Arg_1.45550: f32[]) -> f32[] {
  %Arg_0.45549 = f32[] parameter(0)
  %Arg_1.45550 = f32[] parameter(1)
  ROOT %add.45551 = f32[] add(%Arg_0.45549, %Arg_1.45550)
}

%region_1998.45561 (Arg_0.45558: f32[], Arg_1.45559: f32[]) -> f32[] {
  %Arg_0.45558 = f32[] parameter(0)
  %Arg_1.45559 = f32[] parameter(1)
  ROOT %add.45560 = f32[] add(%Arg_0.45558, %Arg_1.45559)
}

%region_1999.45570 (Arg_0.45567: f32[], Arg_1.45568: f32[]) -> f32[] {
  %Arg_0.45567 = f32[] parameter(0)
  %Arg_1.45568 = f32[] parameter(1)
  ROOT %add.45569 = f32[] add(%Arg_0.45567, %Arg_1.45568)
}

%region_2000.45579 (Arg_0.45576: f32[], Arg_1.45577: f32[]) -> f32[] {
  %Arg_0.45576 = f32[] parameter(0)
  %Arg_1.45577 = f32[] parameter(1)
  ROOT %add.45578 = f32[] add(%Arg_0.45576, %Arg_1.45577)
}

%region_2001.45588 (Arg_0.45585: f32[], Arg_1.45586: f32[]) -> f32[] {
  %Arg_0.45585 = f32[] parameter(0)
  %Arg_1.45586 = f32[] parameter(1)
  ROOT %add.45587 = f32[] add(%Arg_0.45585, %Arg_1.45586)
}

%region_2002.45597 (Arg_0.45594: f32[], Arg_1.45595: f32[]) -> f32[] {
  %Arg_0.45594 = f32[] parameter(0)
  %Arg_1.45595 = f32[] parameter(1)
  ROOT %add.45596 = f32[] add(%Arg_0.45594, %Arg_1.45595)
}

%region_2003.45606 (Arg_0.45603: f32[], Arg_1.45604: f32[]) -> f32[] {
  %Arg_0.45603 = f32[] parameter(0)
  %Arg_1.45604 = f32[] parameter(1)
  ROOT %add.45605 = f32[] add(%Arg_0.45603, %Arg_1.45604)
}

%region_2004.45615 (Arg_0.45612: f32[], Arg_1.45613: f32[]) -> f32[] {
  %Arg_0.45612 = f32[] parameter(0)
  %Arg_1.45613 = f32[] parameter(1)
  ROOT %add.45614 = f32[] add(%Arg_0.45612, %Arg_1.45613)
}

%region_2005.45624 (Arg_0.45621: f32[], Arg_1.45622: f32[]) -> f32[] {
  %Arg_0.45621 = f32[] parameter(0)
  %Arg_1.45622 = f32[] parameter(1)
  ROOT %add.45623 = f32[] add(%Arg_0.45621, %Arg_1.45622)
}

%region_2006.45633 (Arg_0.45630: f32[], Arg_1.45631: f32[]) -> f32[] {
  %Arg_0.45630 = f32[] parameter(0)
  %Arg_1.45631 = f32[] parameter(1)
  ROOT %add.45632 = f32[] add(%Arg_0.45630, %Arg_1.45631)
}

%region_2007.45642 (Arg_0.45639: f32[], Arg_1.45640: f32[]) -> f32[] {
  %Arg_0.45639 = f32[] parameter(0)
  %Arg_1.45640 = f32[] parameter(1)
  ROOT %add.45641 = f32[] add(%Arg_0.45639, %Arg_1.45640)
}

%region_2008.45651 (Arg_0.45648: f32[], Arg_1.45649: f32[]) -> f32[] {
  %Arg_0.45648 = f32[] parameter(0)
  %Arg_1.45649 = f32[] parameter(1)
  ROOT %add.45650 = f32[] add(%Arg_0.45648, %Arg_1.45649)
}

%region_2009.45660 (Arg_0.45657: f32[], Arg_1.45658: f32[]) -> f32[] {
  %Arg_0.45657 = f32[] parameter(0)
  %Arg_1.45658 = f32[] parameter(1)
  ROOT %add.45659 = f32[] add(%Arg_0.45657, %Arg_1.45658)
}

%region_2010.45669 (Arg_0.45666: f32[], Arg_1.45667: f32[]) -> f32[] {
  %Arg_0.45666 = f32[] parameter(0)
  %Arg_1.45667 = f32[] parameter(1)
  ROOT %add.45668 = f32[] add(%Arg_0.45666, %Arg_1.45667)
}

%region_2011.45678 (Arg_0.45675: f32[], Arg_1.45676: f32[]) -> f32[] {
  %Arg_0.45675 = f32[] parameter(0)
  %Arg_1.45676 = f32[] parameter(1)
  ROOT %add.45677 = f32[] add(%Arg_0.45675, %Arg_1.45676)
}

%region_2012.45687 (Arg_0.45684: f32[], Arg_1.45685: f32[]) -> f32[] {
  %Arg_0.45684 = f32[] parameter(0)
  %Arg_1.45685 = f32[] parameter(1)
  ROOT %add.45686 = f32[] add(%Arg_0.45684, %Arg_1.45685)
}

%region_2013.45696 (Arg_0.45693: f32[], Arg_1.45694: f32[]) -> f32[] {
  %Arg_0.45693 = f32[] parameter(0)
  %Arg_1.45694 = f32[] parameter(1)
  ROOT %add.45695 = f32[] add(%Arg_0.45693, %Arg_1.45694)
}

%region_2014.45705 (Arg_0.45702: f32[], Arg_1.45703: f32[]) -> f32[] {
  %Arg_0.45702 = f32[] parameter(0)
  %Arg_1.45703 = f32[] parameter(1)
  ROOT %add.45704 = f32[] add(%Arg_0.45702, %Arg_1.45703)
}

%region_2015.45714 (Arg_0.45711: f32[], Arg_1.45712: f32[]) -> f32[] {
  %Arg_0.45711 = f32[] parameter(0)
  %Arg_1.45712 = f32[] parameter(1)
  ROOT %add.45713 = f32[] add(%Arg_0.45711, %Arg_1.45712)
}

%region_2016.45723 (Arg_0.45720: f32[], Arg_1.45721: f32[]) -> f32[] {
  %Arg_0.45720 = f32[] parameter(0)
  %Arg_1.45721 = f32[] parameter(1)
  ROOT %add.45722 = f32[] add(%Arg_0.45720, %Arg_1.45721)
}

%region_2017.45732 (Arg_0.45729: f32[], Arg_1.45730: f32[]) -> f32[] {
  %Arg_0.45729 = f32[] parameter(0)
  %Arg_1.45730 = f32[] parameter(1)
  ROOT %add.45731 = f32[] add(%Arg_0.45729, %Arg_1.45730)
}

%region_2018.45741 (Arg_0.45738: f32[], Arg_1.45739: f32[]) -> f32[] {
  %Arg_0.45738 = f32[] parameter(0)
  %Arg_1.45739 = f32[] parameter(1)
  ROOT %add.45740 = f32[] add(%Arg_0.45738, %Arg_1.45739)
}

%region_2019.45750 (Arg_0.45747: f32[], Arg_1.45748: f32[]) -> f32[] {
  %Arg_0.45747 = f32[] parameter(0)
  %Arg_1.45748 = f32[] parameter(1)
  ROOT %add.45749 = f32[] add(%Arg_0.45747, %Arg_1.45748)
}

%region_2020.45759 (Arg_0.45756: f32[], Arg_1.45757: f32[]) -> f32[] {
  %Arg_0.45756 = f32[] parameter(0)
  %Arg_1.45757 = f32[] parameter(1)
  ROOT %add.45758 = f32[] add(%Arg_0.45756, %Arg_1.45757)
}

%region_2021.45768 (Arg_0.45765: f32[], Arg_1.45766: f32[]) -> f32[] {
  %Arg_0.45765 = f32[] parameter(0)
  %Arg_1.45766 = f32[] parameter(1)
  ROOT %add.45767 = f32[] add(%Arg_0.45765, %Arg_1.45766)
}

%region_2022.45777 (Arg_0.45774: f32[], Arg_1.45775: f32[]) -> f32[] {
  %Arg_0.45774 = f32[] parameter(0)
  %Arg_1.45775 = f32[] parameter(1)
  ROOT %add.45776 = f32[] add(%Arg_0.45774, %Arg_1.45775)
}

%region_2023.45786 (Arg_0.45783: f32[], Arg_1.45784: f32[]) -> f32[] {
  %Arg_0.45783 = f32[] parameter(0)
  %Arg_1.45784 = f32[] parameter(1)
  ROOT %add.45785 = f32[] add(%Arg_0.45783, %Arg_1.45784)
}

%region_2024.45795 (Arg_0.45792: f32[], Arg_1.45793: f32[]) -> f32[] {
  %Arg_0.45792 = f32[] parameter(0)
  %Arg_1.45793 = f32[] parameter(1)
  ROOT %add.45794 = f32[] add(%Arg_0.45792, %Arg_1.45793)
}

%region_2025.45804 (Arg_0.45801: f32[], Arg_1.45802: f32[]) -> f32[] {
  %Arg_0.45801 = f32[] parameter(0)
  %Arg_1.45802 = f32[] parameter(1)
  ROOT %add.45803 = f32[] add(%Arg_0.45801, %Arg_1.45802)
}

%region_2026.45813 (Arg_0.45810: f32[], Arg_1.45811: f32[]) -> f32[] {
  %Arg_0.45810 = f32[] parameter(0)
  %Arg_1.45811 = f32[] parameter(1)
  ROOT %add.45812 = f32[] add(%Arg_0.45810, %Arg_1.45811)
}

%region_2027.45822 (Arg_0.45819: f32[], Arg_1.45820: f32[]) -> f32[] {
  %Arg_0.45819 = f32[] parameter(0)
  %Arg_1.45820 = f32[] parameter(1)
  ROOT %add.45821 = f32[] add(%Arg_0.45819, %Arg_1.45820)
}

%region_2028.45831 (Arg_0.45828: f32[], Arg_1.45829: f32[]) -> f32[] {
  %Arg_0.45828 = f32[] parameter(0)
  %Arg_1.45829 = f32[] parameter(1)
  ROOT %add.45830 = f32[] add(%Arg_0.45828, %Arg_1.45829)
}

%region_2029.45840 (Arg_0.45837: f32[], Arg_1.45838: f32[]) -> f32[] {
  %Arg_0.45837 = f32[] parameter(0)
  %Arg_1.45838 = f32[] parameter(1)
  ROOT %add.45839 = f32[] add(%Arg_0.45837, %Arg_1.45838)
}

%region_2030.45849 (Arg_0.45846: f32[], Arg_1.45847: f32[]) -> f32[] {
  %Arg_0.45846 = f32[] parameter(0)
  %Arg_1.45847 = f32[] parameter(1)
  ROOT %add.45848 = f32[] add(%Arg_0.45846, %Arg_1.45847)
}

%region_2031.45858 (Arg_0.45855: f32[], Arg_1.45856: f32[]) -> f32[] {
  %Arg_0.45855 = f32[] parameter(0)
  %Arg_1.45856 = f32[] parameter(1)
  ROOT %add.45857 = f32[] add(%Arg_0.45855, %Arg_1.45856)
}

%region_2032.45867 (Arg_0.45864: f32[], Arg_1.45865: f32[]) -> f32[] {
  %Arg_0.45864 = f32[] parameter(0)
  %Arg_1.45865 = f32[] parameter(1)
  ROOT %add.45866 = f32[] add(%Arg_0.45864, %Arg_1.45865)
}

%region_2033.45876 (Arg_0.45873: f32[], Arg_1.45874: f32[]) -> f32[] {
  %Arg_0.45873 = f32[] parameter(0)
  %Arg_1.45874 = f32[] parameter(1)
  ROOT %add.45875 = f32[] add(%Arg_0.45873, %Arg_1.45874)
}

%region_2034.45885 (Arg_0.45882: f32[], Arg_1.45883: f32[]) -> f32[] {
  %Arg_0.45882 = f32[] parameter(0)
  %Arg_1.45883 = f32[] parameter(1)
  ROOT %add.45884 = f32[] add(%Arg_0.45882, %Arg_1.45883)
}

%region_2035.45894 (Arg_0.45891: f32[], Arg_1.45892: f32[]) -> f32[] {
  %Arg_0.45891 = f32[] parameter(0)
  %Arg_1.45892 = f32[] parameter(1)
  ROOT %add.45893 = f32[] add(%Arg_0.45891, %Arg_1.45892)
}

%region_2036.45903 (Arg_0.45900: f32[], Arg_1.45901: f32[]) -> f32[] {
  %Arg_0.45900 = f32[] parameter(0)
  %Arg_1.45901 = f32[] parameter(1)
  ROOT %add.45902 = f32[] add(%Arg_0.45900, %Arg_1.45901)
}

%region_2037.45912 (Arg_0.45909: f32[], Arg_1.45910: f32[]) -> f32[] {
  %Arg_0.45909 = f32[] parameter(0)
  %Arg_1.45910 = f32[] parameter(1)
  ROOT %add.45911 = f32[] add(%Arg_0.45909, %Arg_1.45910)
}

%region_2038.45921 (Arg_0.45918: f32[], Arg_1.45919: f32[]) -> f32[] {
  %Arg_0.45918 = f32[] parameter(0)
  %Arg_1.45919 = f32[] parameter(1)
  ROOT %add.45920 = f32[] add(%Arg_0.45918, %Arg_1.45919)
}

%region_2039.45930 (Arg_0.45927: f32[], Arg_1.45928: f32[]) -> f32[] {
  %Arg_0.45927 = f32[] parameter(0)
  %Arg_1.45928 = f32[] parameter(1)
  ROOT %add.45929 = f32[] add(%Arg_0.45927, %Arg_1.45928)
}

%region_2040.45939 (Arg_0.45936: f32[], Arg_1.45937: f32[]) -> f32[] {
  %Arg_0.45936 = f32[] parameter(0)
  %Arg_1.45937 = f32[] parameter(1)
  ROOT %add.45938 = f32[] add(%Arg_0.45936, %Arg_1.45937)
}

%region_2041.45948 (Arg_0.45945: f32[], Arg_1.45946: f32[]) -> f32[] {
  %Arg_0.45945 = f32[] parameter(0)
  %Arg_1.45946 = f32[] parameter(1)
  ROOT %add.45947 = f32[] add(%Arg_0.45945, %Arg_1.45946)
}

%region_2042.45957 (Arg_0.45954: f32[], Arg_1.45955: f32[]) -> f32[] {
  %Arg_0.45954 = f32[] parameter(0)
  %Arg_1.45955 = f32[] parameter(1)
  ROOT %add.45956 = f32[] add(%Arg_0.45954, %Arg_1.45955)
}

%region_2043.45966 (Arg_0.45963: f32[], Arg_1.45964: f32[]) -> f32[] {
  %Arg_0.45963 = f32[] parameter(0)
  %Arg_1.45964 = f32[] parameter(1)
  ROOT %add.45965 = f32[] add(%Arg_0.45963, %Arg_1.45964)
}

%region_2044.45975 (Arg_0.45972: f32[], Arg_1.45973: f32[]) -> f32[] {
  %Arg_0.45972 = f32[] parameter(0)
  %Arg_1.45973 = f32[] parameter(1)
  ROOT %add.45974 = f32[] add(%Arg_0.45972, %Arg_1.45973)
}

%region_2045.45984 (Arg_0.45981: f32[], Arg_1.45982: f32[]) -> f32[] {
  %Arg_0.45981 = f32[] parameter(0)
  %Arg_1.45982 = f32[] parameter(1)
  ROOT %add.45983 = f32[] add(%Arg_0.45981, %Arg_1.45982)
}

%region_2046.45993 (Arg_0.45990: f32[], Arg_1.45991: f32[]) -> f32[] {
  %Arg_0.45990 = f32[] parameter(0)
  %Arg_1.45991 = f32[] parameter(1)
  ROOT %add.45992 = f32[] add(%Arg_0.45990, %Arg_1.45991)
}

%region_2047.46002 (Arg_0.45999: f32[], Arg_1.46000: f32[]) -> f32[] {
  %Arg_0.45999 = f32[] parameter(0)
  %Arg_1.46000 = f32[] parameter(1)
  ROOT %add.46001 = f32[] add(%Arg_0.45999, %Arg_1.46000)
}

%region_2048.46011 (Arg_0.46008: f32[], Arg_1.46009: f32[]) -> f32[] {
  %Arg_0.46008 = f32[] parameter(0)
  %Arg_1.46009 = f32[] parameter(1)
  ROOT %add.46010 = f32[] add(%Arg_0.46008, %Arg_1.46009)
}

%region_2049.46020 (Arg_0.46017: f32[], Arg_1.46018: f32[]) -> f32[] {
  %Arg_0.46017 = f32[] parameter(0)
  %Arg_1.46018 = f32[] parameter(1)
  ROOT %add.46019 = f32[] add(%Arg_0.46017, %Arg_1.46018)
}

%region_2050.46029 (Arg_0.46026: f32[], Arg_1.46027: f32[]) -> f32[] {
  %Arg_0.46026 = f32[] parameter(0)
  %Arg_1.46027 = f32[] parameter(1)
  ROOT %add.46028 = f32[] add(%Arg_0.46026, %Arg_1.46027)
}

%region_2051.46038 (Arg_0.46035: f32[], Arg_1.46036: f32[]) -> f32[] {
  %Arg_0.46035 = f32[] parameter(0)
  %Arg_1.46036 = f32[] parameter(1)
  ROOT %add.46037 = f32[] add(%Arg_0.46035, %Arg_1.46036)
}

%region_2052.46047 (Arg_0.46044: f32[], Arg_1.46045: f32[]) -> f32[] {
  %Arg_0.46044 = f32[] parameter(0)
  %Arg_1.46045 = f32[] parameter(1)
  ROOT %add.46046 = f32[] add(%Arg_0.46044, %Arg_1.46045)
}

%region_2053.46056 (Arg_0.46053: f32[], Arg_1.46054: f32[]) -> f32[] {
  %Arg_0.46053 = f32[] parameter(0)
  %Arg_1.46054 = f32[] parameter(1)
  ROOT %add.46055 = f32[] add(%Arg_0.46053, %Arg_1.46054)
}

%region_2054.46065 (Arg_0.46062: f32[], Arg_1.46063: f32[]) -> f32[] {
  %Arg_0.46062 = f32[] parameter(0)
  %Arg_1.46063 = f32[] parameter(1)
  ROOT %add.46064 = f32[] add(%Arg_0.46062, %Arg_1.46063)
}

%region_2055.46074 (Arg_0.46071: f32[], Arg_1.46072: f32[]) -> f32[] {
  %Arg_0.46071 = f32[] parameter(0)
  %Arg_1.46072 = f32[] parameter(1)
  ROOT %add.46073 = f32[] add(%Arg_0.46071, %Arg_1.46072)
}

%region_2056.46083 (Arg_0.46080: f32[], Arg_1.46081: f32[]) -> f32[] {
  %Arg_0.46080 = f32[] parameter(0)
  %Arg_1.46081 = f32[] parameter(1)
  ROOT %add.46082 = f32[] add(%Arg_0.46080, %Arg_1.46081)
}

%region_2057.46092 (Arg_0.46089: f32[], Arg_1.46090: f32[]) -> f32[] {
  %Arg_0.46089 = f32[] parameter(0)
  %Arg_1.46090 = f32[] parameter(1)
  ROOT %add.46091 = f32[] add(%Arg_0.46089, %Arg_1.46090)
}

%region_2058.46101 (Arg_0.46098: f32[], Arg_1.46099: f32[]) -> f32[] {
  %Arg_0.46098 = f32[] parameter(0)
  %Arg_1.46099 = f32[] parameter(1)
  ROOT %add.46100 = f32[] add(%Arg_0.46098, %Arg_1.46099)
}

%region_2059.46110 (Arg_0.46107: f32[], Arg_1.46108: f32[]) -> f32[] {
  %Arg_0.46107 = f32[] parameter(0)
  %Arg_1.46108 = f32[] parameter(1)
  ROOT %add.46109 = f32[] add(%Arg_0.46107, %Arg_1.46108)
}

%region_2060.46119 (Arg_0.46116: f32[], Arg_1.46117: f32[]) -> f32[] {
  %Arg_0.46116 = f32[] parameter(0)
  %Arg_1.46117 = f32[] parameter(1)
  ROOT %add.46118 = f32[] add(%Arg_0.46116, %Arg_1.46117)
}

%region_2061.46128 (Arg_0.46125: f32[], Arg_1.46126: f32[]) -> f32[] {
  %Arg_0.46125 = f32[] parameter(0)
  %Arg_1.46126 = f32[] parameter(1)
  ROOT %add.46127 = f32[] add(%Arg_0.46125, %Arg_1.46126)
}

%region_2062.46137 (Arg_0.46134: f32[], Arg_1.46135: f32[]) -> f32[] {
  %Arg_0.46134 = f32[] parameter(0)
  %Arg_1.46135 = f32[] parameter(1)
  ROOT %add.46136 = f32[] add(%Arg_0.46134, %Arg_1.46135)
}

%region_2063.46146 (Arg_0.46143: f32[], Arg_1.46144: f32[]) -> f32[] {
  %Arg_0.46143 = f32[] parameter(0)
  %Arg_1.46144 = f32[] parameter(1)
  ROOT %add.46145 = f32[] add(%Arg_0.46143, %Arg_1.46144)
}

%region_2064.46155 (Arg_0.46152: f32[], Arg_1.46153: f32[]) -> f32[] {
  %Arg_0.46152 = f32[] parameter(0)
  %Arg_1.46153 = f32[] parameter(1)
  ROOT %add.46154 = f32[] add(%Arg_0.46152, %Arg_1.46153)
}

%region_2065.46164 (Arg_0.46161: f32[], Arg_1.46162: f32[]) -> f32[] {
  %Arg_0.46161 = f32[] parameter(0)
  %Arg_1.46162 = f32[] parameter(1)
  ROOT %add.46163 = f32[] add(%Arg_0.46161, %Arg_1.46162)
}

%region_2066.46173 (Arg_0.46170: f32[], Arg_1.46171: f32[]) -> f32[] {
  %Arg_0.46170 = f32[] parameter(0)
  %Arg_1.46171 = f32[] parameter(1)
  ROOT %add.46172 = f32[] add(%Arg_0.46170, %Arg_1.46171)
}

%region_2067.46182 (Arg_0.46179: f32[], Arg_1.46180: f32[]) -> f32[] {
  %Arg_0.46179 = f32[] parameter(0)
  %Arg_1.46180 = f32[] parameter(1)
  ROOT %add.46181 = f32[] add(%Arg_0.46179, %Arg_1.46180)
}

%region_2068.46191 (Arg_0.46188: f32[], Arg_1.46189: f32[]) -> f32[] {
  %Arg_0.46188 = f32[] parameter(0)
  %Arg_1.46189 = f32[] parameter(1)
  ROOT %add.46190 = f32[] add(%Arg_0.46188, %Arg_1.46189)
}

%region_2069.46200 (Arg_0.46197: f32[], Arg_1.46198: f32[]) -> f32[] {
  %Arg_0.46197 = f32[] parameter(0)
  %Arg_1.46198 = f32[] parameter(1)
  ROOT %add.46199 = f32[] add(%Arg_0.46197, %Arg_1.46198)
}

%region_2070.46209 (Arg_0.46206: f32[], Arg_1.46207: f32[]) -> f32[] {
  %Arg_0.46206 = f32[] parameter(0)
  %Arg_1.46207 = f32[] parameter(1)
  ROOT %add.46208 = f32[] add(%Arg_0.46206, %Arg_1.46207)
}

%region_2071.46218 (Arg_0.46215: f32[], Arg_1.46216: f32[]) -> f32[] {
  %Arg_0.46215 = f32[] parameter(0)
  %Arg_1.46216 = f32[] parameter(1)
  ROOT %add.46217 = f32[] add(%Arg_0.46215, %Arg_1.46216)
}

%region_2072.46227 (Arg_0.46224: f32[], Arg_1.46225: f32[]) -> f32[] {
  %Arg_0.46224 = f32[] parameter(0)
  %Arg_1.46225 = f32[] parameter(1)
  ROOT %add.46226 = f32[] add(%Arg_0.46224, %Arg_1.46225)
}

%region_2073.46236 (Arg_0.46233: f32[], Arg_1.46234: f32[]) -> f32[] {
  %Arg_0.46233 = f32[] parameter(0)
  %Arg_1.46234 = f32[] parameter(1)
  ROOT %add.46235 = f32[] add(%Arg_0.46233, %Arg_1.46234)
}

%region_2074.46245 (Arg_0.46242: f32[], Arg_1.46243: f32[]) -> f32[] {
  %Arg_0.46242 = f32[] parameter(0)
  %Arg_1.46243 = f32[] parameter(1)
  ROOT %add.46244 = f32[] add(%Arg_0.46242, %Arg_1.46243)
}

%region_2075.46254 (Arg_0.46251: f32[], Arg_1.46252: f32[]) -> f32[] {
  %Arg_0.46251 = f32[] parameter(0)
  %Arg_1.46252 = f32[] parameter(1)
  ROOT %add.46253 = f32[] add(%Arg_0.46251, %Arg_1.46252)
}

%region_2076.46263 (Arg_0.46260: f32[], Arg_1.46261: f32[]) -> f32[] {
  %Arg_0.46260 = f32[] parameter(0)
  %Arg_1.46261 = f32[] parameter(1)
  ROOT %add.46262 = f32[] add(%Arg_0.46260, %Arg_1.46261)
}

%region_2077.46272 (Arg_0.46269: f32[], Arg_1.46270: f32[]) -> f32[] {
  %Arg_0.46269 = f32[] parameter(0)
  %Arg_1.46270 = f32[] parameter(1)
  ROOT %add.46271 = f32[] add(%Arg_0.46269, %Arg_1.46270)
}

%region_2078.46281 (Arg_0.46278: f32[], Arg_1.46279: f32[]) -> f32[] {
  %Arg_0.46278 = f32[] parameter(0)
  %Arg_1.46279 = f32[] parameter(1)
  ROOT %add.46280 = f32[] add(%Arg_0.46278, %Arg_1.46279)
}

%region_2079.46290 (Arg_0.46287: f32[], Arg_1.46288: f32[]) -> f32[] {
  %Arg_0.46287 = f32[] parameter(0)
  %Arg_1.46288 = f32[] parameter(1)
  ROOT %add.46289 = f32[] add(%Arg_0.46287, %Arg_1.46288)
}

%region_2080.46299 (Arg_0.46296: f32[], Arg_1.46297: f32[]) -> f32[] {
  %Arg_0.46296 = f32[] parameter(0)
  %Arg_1.46297 = f32[] parameter(1)
  ROOT %add.46298 = f32[] add(%Arg_0.46296, %Arg_1.46297)
}

%region_2081.46308 (Arg_0.46305: f32[], Arg_1.46306: f32[]) -> f32[] {
  %Arg_0.46305 = f32[] parameter(0)
  %Arg_1.46306 = f32[] parameter(1)
  ROOT %add.46307 = f32[] add(%Arg_0.46305, %Arg_1.46306)
}

%region_2082.46317 (Arg_0.46314: f32[], Arg_1.46315: f32[]) -> f32[] {
  %Arg_0.46314 = f32[] parameter(0)
  %Arg_1.46315 = f32[] parameter(1)
  ROOT %add.46316 = f32[] add(%Arg_0.46314, %Arg_1.46315)
}

%region_2083.46326 (Arg_0.46323: f32[], Arg_1.46324: f32[]) -> f32[] {
  %Arg_0.46323 = f32[] parameter(0)
  %Arg_1.46324 = f32[] parameter(1)
  ROOT %add.46325 = f32[] add(%Arg_0.46323, %Arg_1.46324)
}

%region_2084.46335 (Arg_0.46332: f32[], Arg_1.46333: f32[]) -> f32[] {
  %Arg_0.46332 = f32[] parameter(0)
  %Arg_1.46333 = f32[] parameter(1)
  ROOT %add.46334 = f32[] add(%Arg_0.46332, %Arg_1.46333)
}

%region_2085.46344 (Arg_0.46341: f32[], Arg_1.46342: f32[]) -> f32[] {
  %Arg_0.46341 = f32[] parameter(0)
  %Arg_1.46342 = f32[] parameter(1)
  ROOT %add.46343 = f32[] add(%Arg_0.46341, %Arg_1.46342)
}

%region_2086.46353 (Arg_0.46350: f32[], Arg_1.46351: f32[]) -> f32[] {
  %Arg_0.46350 = f32[] parameter(0)
  %Arg_1.46351 = f32[] parameter(1)
  ROOT %add.46352 = f32[] add(%Arg_0.46350, %Arg_1.46351)
}

%region_2087.46362 (Arg_0.46359: f32[], Arg_1.46360: f32[]) -> f32[] {
  %Arg_0.46359 = f32[] parameter(0)
  %Arg_1.46360 = f32[] parameter(1)
  ROOT %add.46361 = f32[] add(%Arg_0.46359, %Arg_1.46360)
}

%region_2088.46371 (Arg_0.46368: f32[], Arg_1.46369: f32[]) -> f32[] {
  %Arg_0.46368 = f32[] parameter(0)
  %Arg_1.46369 = f32[] parameter(1)
  ROOT %add.46370 = f32[] add(%Arg_0.46368, %Arg_1.46369)
}

%region_2089.46380 (Arg_0.46377: f32[], Arg_1.46378: f32[]) -> f32[] {
  %Arg_0.46377 = f32[] parameter(0)
  %Arg_1.46378 = f32[] parameter(1)
  ROOT %add.46379 = f32[] add(%Arg_0.46377, %Arg_1.46378)
}

%region_2090.46389 (Arg_0.46386: f32[], Arg_1.46387: f32[]) -> f32[] {
  %Arg_0.46386 = f32[] parameter(0)
  %Arg_1.46387 = f32[] parameter(1)
  ROOT %add.46388 = f32[] add(%Arg_0.46386, %Arg_1.46387)
}

%region_2091.46398 (Arg_0.46395: f32[], Arg_1.46396: f32[]) -> f32[] {
  %Arg_0.46395 = f32[] parameter(0)
  %Arg_1.46396 = f32[] parameter(1)
  ROOT %add.46397 = f32[] add(%Arg_0.46395, %Arg_1.46396)
}

%region_2092.46407 (Arg_0.46404: f32[], Arg_1.46405: f32[]) -> f32[] {
  %Arg_0.46404 = f32[] parameter(0)
  %Arg_1.46405 = f32[] parameter(1)
  ROOT %add.46406 = f32[] add(%Arg_0.46404, %Arg_1.46405)
}

%region_2093.46416 (Arg_0.46413: f32[], Arg_1.46414: f32[]) -> f32[] {
  %Arg_0.46413 = f32[] parameter(0)
  %Arg_1.46414 = f32[] parameter(1)
  ROOT %add.46415 = f32[] add(%Arg_0.46413, %Arg_1.46414)
}

%region_2094.46425 (Arg_0.46422: f32[], Arg_1.46423: f32[]) -> f32[] {
  %Arg_0.46422 = f32[] parameter(0)
  %Arg_1.46423 = f32[] parameter(1)
  ROOT %add.46424 = f32[] add(%Arg_0.46422, %Arg_1.46423)
}

%region_2095.46434 (Arg_0.46431: f32[], Arg_1.46432: f32[]) -> f32[] {
  %Arg_0.46431 = f32[] parameter(0)
  %Arg_1.46432 = f32[] parameter(1)
  ROOT %add.46433 = f32[] add(%Arg_0.46431, %Arg_1.46432)
}

%region_2096.46443 (Arg_0.46440: f32[], Arg_1.46441: f32[]) -> f32[] {
  %Arg_0.46440 = f32[] parameter(0)
  %Arg_1.46441 = f32[] parameter(1)
  ROOT %add.46442 = f32[] add(%Arg_0.46440, %Arg_1.46441)
}

%region_2097.46452 (Arg_0.46449: f32[], Arg_1.46450: f32[]) -> f32[] {
  %Arg_0.46449 = f32[] parameter(0)
  %Arg_1.46450 = f32[] parameter(1)
  ROOT %add.46451 = f32[] add(%Arg_0.46449, %Arg_1.46450)
}

%region_2098.46461 (Arg_0.46458: f32[], Arg_1.46459: f32[]) -> f32[] {
  %Arg_0.46458 = f32[] parameter(0)
  %Arg_1.46459 = f32[] parameter(1)
  ROOT %add.46460 = f32[] add(%Arg_0.46458, %Arg_1.46459)
}

%region_2099.46470 (Arg_0.46467: f32[], Arg_1.46468: f32[]) -> f32[] {
  %Arg_0.46467 = f32[] parameter(0)
  %Arg_1.46468 = f32[] parameter(1)
  ROOT %add.46469 = f32[] add(%Arg_0.46467, %Arg_1.46468)
}

%region_2100.46479 (Arg_0.46476: f32[], Arg_1.46477: f32[]) -> f32[] {
  %Arg_0.46476 = f32[] parameter(0)
  %Arg_1.46477 = f32[] parameter(1)
  ROOT %add.46478 = f32[] add(%Arg_0.46476, %Arg_1.46477)
}

%region_2101.46488 (Arg_0.46485: f32[], Arg_1.46486: f32[]) -> f32[] {
  %Arg_0.46485 = f32[] parameter(0)
  %Arg_1.46486 = f32[] parameter(1)
  ROOT %add.46487 = f32[] add(%Arg_0.46485, %Arg_1.46486)
}

%region_2102.46497 (Arg_0.46494: f32[], Arg_1.46495: f32[]) -> f32[] {
  %Arg_0.46494 = f32[] parameter(0)
  %Arg_1.46495 = f32[] parameter(1)
  ROOT %add.46496 = f32[] add(%Arg_0.46494, %Arg_1.46495)
}

%region_2103.46506 (Arg_0.46503: f32[], Arg_1.46504: f32[]) -> f32[] {
  %Arg_0.46503 = f32[] parameter(0)
  %Arg_1.46504 = f32[] parameter(1)
  ROOT %add.46505 = f32[] add(%Arg_0.46503, %Arg_1.46504)
}

%region_2104.46515 (Arg_0.46512: f32[], Arg_1.46513: f32[]) -> f32[] {
  %Arg_0.46512 = f32[] parameter(0)
  %Arg_1.46513 = f32[] parameter(1)
  ROOT %add.46514 = f32[] add(%Arg_0.46512, %Arg_1.46513)
}

%region_2105.46524 (Arg_0.46521: f32[], Arg_1.46522: f32[]) -> f32[] {
  %Arg_0.46521 = f32[] parameter(0)
  %Arg_1.46522 = f32[] parameter(1)
  ROOT %add.46523 = f32[] add(%Arg_0.46521, %Arg_1.46522)
}

%region_2106.46533 (Arg_0.46530: f32[], Arg_1.46531: f32[]) -> f32[] {
  %Arg_0.46530 = f32[] parameter(0)
  %Arg_1.46531 = f32[] parameter(1)
  ROOT %add.46532 = f32[] add(%Arg_0.46530, %Arg_1.46531)
}

%region_2107.46542 (Arg_0.46539: f32[], Arg_1.46540: f32[]) -> f32[] {
  %Arg_0.46539 = f32[] parameter(0)
  %Arg_1.46540 = f32[] parameter(1)
  ROOT %add.46541 = f32[] add(%Arg_0.46539, %Arg_1.46540)
}

%region_2108.46551 (Arg_0.46548: f32[], Arg_1.46549: f32[]) -> f32[] {
  %Arg_0.46548 = f32[] parameter(0)
  %Arg_1.46549 = f32[] parameter(1)
  ROOT %add.46550 = f32[] add(%Arg_0.46548, %Arg_1.46549)
}

%region_2109.46560 (Arg_0.46557: f32[], Arg_1.46558: f32[]) -> f32[] {
  %Arg_0.46557 = f32[] parameter(0)
  %Arg_1.46558 = f32[] parameter(1)
  ROOT %add.46559 = f32[] add(%Arg_0.46557, %Arg_1.46558)
}

%region_2110.46569 (Arg_0.46566: f32[], Arg_1.46567: f32[]) -> f32[] {
  %Arg_0.46566 = f32[] parameter(0)
  %Arg_1.46567 = f32[] parameter(1)
  ROOT %add.46568 = f32[] add(%Arg_0.46566, %Arg_1.46567)
}

%region_2111.46578 (Arg_0.46575: f32[], Arg_1.46576: f32[]) -> f32[] {
  %Arg_0.46575 = f32[] parameter(0)
  %Arg_1.46576 = f32[] parameter(1)
  ROOT %add.46577 = f32[] add(%Arg_0.46575, %Arg_1.46576)
}

%region_2112.46587 (Arg_0.46584: f32[], Arg_1.46585: f32[]) -> f32[] {
  %Arg_0.46584 = f32[] parameter(0)
  %Arg_1.46585 = f32[] parameter(1)
  ROOT %add.46586 = f32[] add(%Arg_0.46584, %Arg_1.46585)
}

%region_2113.46596 (Arg_0.46593: f32[], Arg_1.46594: f32[]) -> f32[] {
  %Arg_0.46593 = f32[] parameter(0)
  %Arg_1.46594 = f32[] parameter(1)
  ROOT %add.46595 = f32[] add(%Arg_0.46593, %Arg_1.46594)
}

%region_2114.46605 (Arg_0.46602: f32[], Arg_1.46603: f32[]) -> f32[] {
  %Arg_0.46602 = f32[] parameter(0)
  %Arg_1.46603 = f32[] parameter(1)
  ROOT %add.46604 = f32[] add(%Arg_0.46602, %Arg_1.46603)
}

%region_2115.46614 (Arg_0.46611: f32[], Arg_1.46612: f32[]) -> f32[] {
  %Arg_0.46611 = f32[] parameter(0)
  %Arg_1.46612 = f32[] parameter(1)
  ROOT %add.46613 = f32[] add(%Arg_0.46611, %Arg_1.46612)
}

%region_2116.46623 (Arg_0.46620: f32[], Arg_1.46621: f32[]) -> f32[] {
  %Arg_0.46620 = f32[] parameter(0)
  %Arg_1.46621 = f32[] parameter(1)
  ROOT %add.46622 = f32[] add(%Arg_0.46620, %Arg_1.46621)
}

%region_2117.46632 (Arg_0.46629: f32[], Arg_1.46630: f32[]) -> f32[] {
  %Arg_0.46629 = f32[] parameter(0)
  %Arg_1.46630 = f32[] parameter(1)
  ROOT %add.46631 = f32[] add(%Arg_0.46629, %Arg_1.46630)
}

%region_2118.46641 (Arg_0.46638: f32[], Arg_1.46639: f32[]) -> f32[] {
  %Arg_0.46638 = f32[] parameter(0)
  %Arg_1.46639 = f32[] parameter(1)
  ROOT %add.46640 = f32[] add(%Arg_0.46638, %Arg_1.46639)
}

%region_2119.46650 (Arg_0.46647: f32[], Arg_1.46648: f32[]) -> f32[] {
  %Arg_0.46647 = f32[] parameter(0)
  %Arg_1.46648 = f32[] parameter(1)
  ROOT %add.46649 = f32[] add(%Arg_0.46647, %Arg_1.46648)
}

%region_2120.46659 (Arg_0.46656: f32[], Arg_1.46657: f32[]) -> f32[] {
  %Arg_0.46656 = f32[] parameter(0)
  %Arg_1.46657 = f32[] parameter(1)
  ROOT %add.46658 = f32[] add(%Arg_0.46656, %Arg_1.46657)
}

%region_2121.46668 (Arg_0.46665: f32[], Arg_1.46666: f32[]) -> f32[] {
  %Arg_0.46665 = f32[] parameter(0)
  %Arg_1.46666 = f32[] parameter(1)
  ROOT %add.46667 = f32[] add(%Arg_0.46665, %Arg_1.46666)
}

%region_2122.46677 (Arg_0.46674: f32[], Arg_1.46675: f32[]) -> f32[] {
  %Arg_0.46674 = f32[] parameter(0)
  %Arg_1.46675 = f32[] parameter(1)
  ROOT %add.46676 = f32[] add(%Arg_0.46674, %Arg_1.46675)
}

%region_2123.46686 (Arg_0.46683: f32[], Arg_1.46684: f32[]) -> f32[] {
  %Arg_0.46683 = f32[] parameter(0)
  %Arg_1.46684 = f32[] parameter(1)
  ROOT %add.46685 = f32[] add(%Arg_0.46683, %Arg_1.46684)
}

%region_2124.46695 (Arg_0.46692: f32[], Arg_1.46693: f32[]) -> f32[] {
  %Arg_0.46692 = f32[] parameter(0)
  %Arg_1.46693 = f32[] parameter(1)
  ROOT %add.46694 = f32[] add(%Arg_0.46692, %Arg_1.46693)
}

%region_2125.46704 (Arg_0.46701: f32[], Arg_1.46702: f32[]) -> f32[] {
  %Arg_0.46701 = f32[] parameter(0)
  %Arg_1.46702 = f32[] parameter(1)
  ROOT %add.46703 = f32[] add(%Arg_0.46701, %Arg_1.46702)
}

%region_2126.46713 (Arg_0.46710: f32[], Arg_1.46711: f32[]) -> f32[] {
  %Arg_0.46710 = f32[] parameter(0)
  %Arg_1.46711 = f32[] parameter(1)
  ROOT %add.46712 = f32[] add(%Arg_0.46710, %Arg_1.46711)
}

%region_2127.46722 (Arg_0.46719: f32[], Arg_1.46720: f32[]) -> f32[] {
  %Arg_0.46719 = f32[] parameter(0)
  %Arg_1.46720 = f32[] parameter(1)
  ROOT %add.46721 = f32[] add(%Arg_0.46719, %Arg_1.46720)
}

%region_2128.46731 (Arg_0.46728: f32[], Arg_1.46729: f32[]) -> f32[] {
  %Arg_0.46728 = f32[] parameter(0)
  %Arg_1.46729 = f32[] parameter(1)
  ROOT %add.46730 = f32[] add(%Arg_0.46728, %Arg_1.46729)
}

%region_2129.46740 (Arg_0.46737: f32[], Arg_1.46738: f32[]) -> f32[] {
  %Arg_0.46737 = f32[] parameter(0)
  %Arg_1.46738 = f32[] parameter(1)
  ROOT %add.46739 = f32[] add(%Arg_0.46737, %Arg_1.46738)
}

%region_2130.46749 (Arg_0.46746: f32[], Arg_1.46747: f32[]) -> f32[] {
  %Arg_0.46746 = f32[] parameter(0)
  %Arg_1.46747 = f32[] parameter(1)
  ROOT %add.46748 = f32[] add(%Arg_0.46746, %Arg_1.46747)
}

%region_2131.46758 (Arg_0.46755: f32[], Arg_1.46756: f32[]) -> f32[] {
  %Arg_0.46755 = f32[] parameter(0)
  %Arg_1.46756 = f32[] parameter(1)
  ROOT %add.46757 = f32[] add(%Arg_0.46755, %Arg_1.46756)
}

%region_7.194._custom_call_lowering_rule (Arg_0.476: s32[], Arg_1.192: s32[]) -> s32[] {
  %Arg_0.476 = s32[] parameter(0)
  %Arg_1.192 = s32[] parameter(1)
  ROOT %add.516 = s32[] add(%Arg_0.476, %Arg_1.192)
}

%region_10.224._custom_call_lowering_rule (Arg_0.477: s32[], Arg_1.223: s32[]) -> s32[] {
  %Arg_0.477 = s32[] parameter(0)
  ROOT %Arg_1.223 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule (Arg_0.478: pred[], Arg_1.201: pred[]) -> pred[] {
  %Arg_0.478 = pred[] parameter(0)
  ROOT %Arg_1.201 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule (Arg_0.479: s32[], Arg_1.211: s32[]) -> s32[] {
  %Arg_0.479 = s32[] parameter(0)
  %Arg_1.211 = s32[] parameter(1)
  ROOT %add.517 = s32[] add(%Arg_0.479, %Arg_1.211)
}

%region_0.61._custom_call_lowering_rule.1 (Arg_0.481: s32[], Arg_1.163: s32[], Arg_2.96: s32[], Arg_3.32: s32[]) -> pred[] {
  %Arg_2.96 = s32[] parameter(2)
  %Arg_3.32 = s32[] parameter(3)
  %Arg_0.481 = s32[] parameter(0)
  %Arg_1.163 = s32[] parameter(1)
  ROOT %compare.386 = pred[] compare(%Arg_0.481, %Arg_1.163), direction=LT
}

%region_1.74._custom_call_lowering_rule.1 (Arg_0.482: s32[], Arg_1.164: s32[]) -> s32[] {
  %Arg_0.482 = s32[] parameter(0)
  %Arg_1.164 = s32[] parameter(1)
  ROOT %add.518 = s32[] add(%Arg_0.482, %Arg_1.164)
}

%region_5.170._custom_call_lowering_rule.1 (Arg_0.483: s32[], Arg_1.165: s32[]) -> s32[] {
  %Arg_0.483 = s32[] parameter(0)
  ROOT %Arg_1.165 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.1 (Arg_0.484: pred[], Arg_1.166: pred[]) -> pred[] {
  %Arg_0.484 = pred[] parameter(0)
  ROOT %Arg_1.166 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.1 (Arg_0.485: s32[], Arg_1.167: s32[]) -> s32[] {
  %Arg_0.485 = s32[] parameter(0)
  %Arg_1.167 = s32[] parameter(1)
  ROOT %add.519 = s32[] add(%Arg_0.485, %Arg_1.167)
}

%region_4.110._custom_call_lowering_rule.1 (Arg_0.486: s32[], Arg_1.168: s32[]) -> s32[] {
  %Arg_0.486 = s32[] parameter(0)
  %Arg_1.168 = s32[] parameter(1)
  ROOT %add.520 = s32[] add(%Arg_0.486, %Arg_1.168)
}

%region_6.178._custom_call_lowering_rule.1 (Arg_0.487: s32[], Arg_1.170: s32[]) -> s32[] {
  %Arg_0.487 = s32[] parameter(0)
  ROOT %Arg_1.170 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.1 (Arg_0.488: s32[], Arg_1.171: s32[]) -> s32[] {
  %Arg_0.488 = s32[] parameter(0)
  %Arg_1.171 = s32[] parameter(1)
  ROOT %add.521 = s32[] add(%Arg_0.488, %Arg_1.171)
}

%region_10.224._custom_call_lowering_rule.1 (Arg_0.489: s32[], Arg_1.172: s32[]) -> s32[] {
  %Arg_0.489 = s32[] parameter(0)
  ROOT %Arg_1.172 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.1 (Arg_0.490: pred[], Arg_1.173: pred[]) -> pred[] {
  %Arg_0.490 = pred[] parameter(0)
  ROOT %Arg_1.173 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.1 (Arg_0.491: s32[], Arg_1.174: s32[]) -> s32[] {
  %Arg_0.491 = s32[] parameter(0)
  %Arg_1.174 = s32[] parameter(1)
  ROOT %add.522 = s32[] add(%Arg_0.491, %Arg_1.174)
}

%region_11.232._custom_call_lowering_rule.1 (Arg_0.492: s32[], Arg_1.175: s32[]) -> s32[] {
  %Arg_0.492 = s32[] parameter(0)
  ROOT %Arg_1.175 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.2 (Arg_0.493: s32[], Arg_1.176: s32[], Arg_2.97: s32[], Arg_3.33: s32[]) -> pred[] {
  %Arg_2.97 = s32[] parameter(2)
  %Arg_3.33 = s32[] parameter(3)
  %Arg_0.493 = s32[] parameter(0)
  %Arg_1.176 = s32[] parameter(1)
  ROOT %compare.391 = pred[] compare(%Arg_0.493, %Arg_1.176), direction=LT
}

%region_1.74._custom_call_lowering_rule.2 (Arg_0.494: s32[], Arg_1.178: s32[]) -> s32[] {
  %Arg_0.494 = s32[] parameter(0)
  %Arg_1.178 = s32[] parameter(1)
  ROOT %add.523 = s32[] add(%Arg_0.494, %Arg_1.178)
}

%region_5.170._custom_call_lowering_rule.2 (Arg_0.495: s32[], Arg_1.179: s32[]) -> s32[] {
  %Arg_0.495 = s32[] parameter(0)
  ROOT %Arg_1.179 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.2 (Arg_0.496: pred[], Arg_1.180: pred[]) -> pred[] {
  %Arg_0.496 = pred[] parameter(0)
  ROOT %Arg_1.180 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.2 (Arg_0.497: s32[], Arg_1.181: s32[]) -> s32[] {
  %Arg_0.497 = s32[] parameter(0)
  %Arg_1.181 = s32[] parameter(1)
  ROOT %add.524 = s32[] add(%Arg_0.497, %Arg_1.181)
}

%region_4.110._custom_call_lowering_rule.2 (Arg_0.498: s32[], Arg_1.182: s32[]) -> s32[] {
  %Arg_0.498 = s32[] parameter(0)
  %Arg_1.182 = s32[] parameter(1)
  ROOT %add.525 = s32[] add(%Arg_0.498, %Arg_1.182)
}

%region_6.178._custom_call_lowering_rule.2 (Arg_0.499: s32[], Arg_1.183: s32[]) -> s32[] {
  %Arg_0.499 = s32[] parameter(0)
  ROOT %Arg_1.183 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.2 (Arg_0.500: s32[], Arg_1.184: s32[]) -> s32[] {
  %Arg_0.500 = s32[] parameter(0)
  %Arg_1.184 = s32[] parameter(1)
  ROOT %add.526 = s32[] add(%Arg_0.500, %Arg_1.184)
}

%region_10.224._custom_call_lowering_rule.2 (Arg_0.501: s32[], Arg_1.185: s32[]) -> s32[] {
  %Arg_0.501 = s32[] parameter(0)
  ROOT %Arg_1.185 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.2 (Arg_0.502: pred[], Arg_1.186: pred[]) -> pred[] {
  %Arg_0.502 = pred[] parameter(0)
  ROOT %Arg_1.186 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.2 (Arg_0.503: s32[], Arg_1.187: s32[]) -> s32[] {
  %Arg_0.503 = s32[] parameter(0)
  %Arg_1.187 = s32[] parameter(1)
  ROOT %add.527 = s32[] add(%Arg_0.503, %Arg_1.187)
}

%region_11.232._custom_call_lowering_rule.2 (Arg_0.504: s32[], Arg_1.188: s32[]) -> s32[] {
  %Arg_0.504 = s32[] parameter(0)
  ROOT %Arg_1.188 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.3 (Arg_0.505: s32[], Arg_1.189: s32[], Arg_2.98: s32[], Arg_3.34: s32[]) -> pred[] {
  %Arg_2.98 = s32[] parameter(2)
  %Arg_3.34 = s32[] parameter(3)
  %Arg_0.505 = s32[] parameter(0)
  %Arg_1.189 = s32[] parameter(1)
  ROOT %compare.396 = pred[] compare(%Arg_0.505, %Arg_1.189), direction=LT
}

%region_1.74._custom_call_lowering_rule.3 (Arg_0.506: s32[], Arg_1.190: s32[]) -> s32[] {
  %Arg_0.506 = s32[] parameter(0)
  %Arg_1.190 = s32[] parameter(1)
  ROOT %add.528 = s32[] add(%Arg_0.506, %Arg_1.190)
}

%region_5.170._custom_call_lowering_rule.3 (Arg_0.507: s32[], Arg_1.191: s32[]) -> s32[] {
  %Arg_0.507 = s32[] parameter(0)
  ROOT %Arg_1.191 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.3 (Arg_0.508: pred[], Arg_1.193: pred[]) -> pred[] {
  %Arg_0.508 = pred[] parameter(0)
  ROOT %Arg_1.193 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.3 (Arg_0.509: s32[], Arg_1.194: s32[]) -> s32[] {
  %Arg_0.509 = s32[] parameter(0)
  %Arg_1.194 = s32[] parameter(1)
  ROOT %add.529 = s32[] add(%Arg_0.509, %Arg_1.194)
}

%region_4.110._custom_call_lowering_rule.3 (Arg_0.510: s32[], Arg_1.195: s32[]) -> s32[] {
  %Arg_0.510 = s32[] parameter(0)
  %Arg_1.195 = s32[] parameter(1)
  ROOT %add.530 = s32[] add(%Arg_0.510, %Arg_1.195)
}

%region_6.178._custom_call_lowering_rule.3 (Arg_0.511: s32[], Arg_1.196: s32[]) -> s32[] {
  %Arg_0.511 = s32[] parameter(0)
  ROOT %Arg_1.196 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.3 (Arg_0.512: s32[], Arg_1.197: s32[]) -> s32[] {
  %Arg_0.512 = s32[] parameter(0)
  %Arg_1.197 = s32[] parameter(1)
  ROOT %add.531 = s32[] add(%Arg_0.512, %Arg_1.197)
}

%region_10.224._custom_call_lowering_rule.3 (Arg_0.513: s32[], Arg_1.198: s32[]) -> s32[] {
  %Arg_0.513 = s32[] parameter(0)
  ROOT %Arg_1.198 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.3 (Arg_0.514: pred[], Arg_1.199: pred[]) -> pred[] {
  %Arg_0.514 = pred[] parameter(0)
  ROOT %Arg_1.199 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.3 (Arg_0.515: s32[], Arg_1.200: s32[]) -> s32[] {
  %Arg_0.515 = s32[] parameter(0)
  %Arg_1.200 = s32[] parameter(1)
  ROOT %add.532 = s32[] add(%Arg_0.515, %Arg_1.200)
}

%region_11.232._custom_call_lowering_rule.3 (Arg_0.516: s32[], Arg_1.202: s32[]) -> s32[] {
  %Arg_0.516 = s32[] parameter(0)
  ROOT %Arg_1.202 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.4 (Arg_0.517: s32[], Arg_1.203: s32[], Arg_2.99: s32[], Arg_3.35: s32[]) -> pred[] {
  %Arg_2.99 = s32[] parameter(2)
  %Arg_3.35 = s32[] parameter(3)
  %Arg_0.517 = s32[] parameter(0)
  %Arg_1.203 = s32[] parameter(1)
  ROOT %compare.401 = pred[] compare(%Arg_0.517, %Arg_1.203), direction=LT
}

%region_1.74._custom_call_lowering_rule.4 (Arg_0.518: s32[], Arg_1.204: s32[]) -> s32[] {
  %Arg_0.518 = s32[] parameter(0)
  %Arg_1.204 = s32[] parameter(1)
  ROOT %add.533 = s32[] add(%Arg_0.518, %Arg_1.204)
}

%region_5.170._custom_call_lowering_rule.4 (Arg_0.519: s32[], Arg_1.205: s32[]) -> s32[] {
  %Arg_0.519 = s32[] parameter(0)
  ROOT %Arg_1.205 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.4 (Arg_0.520: pred[], Arg_1.206: pred[]) -> pred[] {
  %Arg_0.520 = pred[] parameter(0)
  ROOT %Arg_1.206 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.4 (Arg_0.521: s32[], Arg_1.207: s32[]) -> s32[] {
  %Arg_0.521 = s32[] parameter(0)
  %Arg_1.207 = s32[] parameter(1)
  ROOT %add.534 = s32[] add(%Arg_0.521, %Arg_1.207)
}

%region_4.110._custom_call_lowering_rule.4 (Arg_0.522: s32[], Arg_1.208: s32[]) -> s32[] {
  %Arg_0.522 = s32[] parameter(0)
  %Arg_1.208 = s32[] parameter(1)
  ROOT %add.535 = s32[] add(%Arg_0.522, %Arg_1.208)
}

%region_6.178._custom_call_lowering_rule.4 (Arg_0.523: s32[], Arg_1.209: s32[]) -> s32[] {
  %Arg_0.523 = s32[] parameter(0)
  ROOT %Arg_1.209 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.4 (Arg_0.524: s32[], Arg_1.210: s32[]) -> s32[] {
  %Arg_0.524 = s32[] parameter(0)
  %Arg_1.210 = s32[] parameter(1)
  ROOT %add.536 = s32[] add(%Arg_0.524, %Arg_1.210)
}

%region_10.224._custom_call_lowering_rule.4 (Arg_0.525: s32[], Arg_1.212: s32[]) -> s32[] {
  %Arg_0.525 = s32[] parameter(0)
  ROOT %Arg_1.212 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.4 (Arg_0.526: pred[], Arg_1.213: pred[]) -> pred[] {
  %Arg_0.526 = pred[] parameter(0)
  ROOT %Arg_1.213 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.4 (Arg_0.527: s32[], Arg_1.214: s32[]) -> s32[] {
  %Arg_0.527 = s32[] parameter(0)
  %Arg_1.214 = s32[] parameter(1)
  ROOT %add.537 = s32[] add(%Arg_0.527, %Arg_1.214)
}

%region_11.232._custom_call_lowering_rule.4 (Arg_0.528: s32[], Arg_1.215: s32[]) -> s32[] {
  %Arg_0.528 = s32[] parameter(0)
  ROOT %Arg_1.215 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.5 (Arg_0.529: s32[], Arg_1.216: s32[], Arg_2.100: s32[], Arg_3.36: s32[]) -> pred[] {
  %Arg_2.100 = s32[] parameter(2)
  %Arg_3.36 = s32[] parameter(3)
  %Arg_0.529 = s32[] parameter(0)
  %Arg_1.216 = s32[] parameter(1)
  ROOT %compare.406 = pred[] compare(%Arg_0.529, %Arg_1.216), direction=LT
}

%region_1.74._custom_call_lowering_rule.5 (Arg_0.530: s32[], Arg_1.217: s32[]) -> s32[] {
  %Arg_0.530 = s32[] parameter(0)
  %Arg_1.217 = s32[] parameter(1)
  ROOT %add.538 = s32[] add(%Arg_0.530, %Arg_1.217)
}

%region_5.170._custom_call_lowering_rule.5 (Arg_0.531: s32[], Arg_1.218: s32[]) -> s32[] {
  %Arg_0.531 = s32[] parameter(0)
  ROOT %Arg_1.218 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.5 (Arg_0.532: pred[], Arg_1.219: pred[]) -> pred[] {
  %Arg_0.532 = pred[] parameter(0)
  ROOT %Arg_1.219 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.5 (Arg_0.533: s32[], Arg_1.220: s32[]) -> s32[] {
  %Arg_0.533 = s32[] parameter(0)
  %Arg_1.220 = s32[] parameter(1)
  ROOT %add.539 = s32[] add(%Arg_0.533, %Arg_1.220)
}

%region_4.110._custom_call_lowering_rule.5 (Arg_0.534: s32[], Arg_1.221: s32[]) -> s32[] {
  %Arg_0.534 = s32[] parameter(0)
  %Arg_1.221 = s32[] parameter(1)
  ROOT %add.540 = s32[] add(%Arg_0.534, %Arg_1.221)
}

%region_6.178._custom_call_lowering_rule.5 (Arg_0.535: s32[], Arg_1.222: s32[]) -> s32[] {
  %Arg_0.535 = s32[] parameter(0)
  ROOT %Arg_1.222 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.5 (Arg_0.536: s32[], Arg_1.224: s32[]) -> s32[] {
  %Arg_0.536 = s32[] parameter(0)
  %Arg_1.224 = s32[] parameter(1)
  ROOT %add.541 = s32[] add(%Arg_0.536, %Arg_1.224)
}

%region_10.224._custom_call_lowering_rule.5 (Arg_0.537: s32[], Arg_1.225: s32[]) -> s32[] {
  %Arg_0.537 = s32[] parameter(0)
  ROOT %Arg_1.225 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.5 (Arg_0.538: pred[], Arg_1.226: pred[]) -> pred[] {
  %Arg_0.538 = pred[] parameter(0)
  ROOT %Arg_1.226 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.5 (Arg_0.539: s32[], Arg_1.227: s32[]) -> s32[] {
  %Arg_0.539 = s32[] parameter(0)
  %Arg_1.227 = s32[] parameter(1)
  ROOT %add.542 = s32[] add(%Arg_0.539, %Arg_1.227)
}

%region_11.232._custom_call_lowering_rule.5 (Arg_0.540: s32[], Arg_1.228: s32[]) -> s32[] {
  %Arg_0.540 = s32[] parameter(0)
  ROOT %Arg_1.228 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.6 (Arg_0.541: s32[], Arg_1.229: s32[], Arg_2.101: s32[], Arg_3.37: s32[]) -> pred[] {
  %Arg_2.101 = s32[] parameter(2)
  %Arg_3.37 = s32[] parameter(3)
  %Arg_0.541 = s32[] parameter(0)
  %Arg_1.229 = s32[] parameter(1)
  ROOT %compare.411 = pred[] compare(%Arg_0.541, %Arg_1.229), direction=LT
}

%region_1.74._custom_call_lowering_rule.6 (Arg_0.542: s32[], Arg_1.230: s32[]) -> s32[] {
  %Arg_0.542 = s32[] parameter(0)
  %Arg_1.230 = s32[] parameter(1)
  ROOT %add.543 = s32[] add(%Arg_0.542, %Arg_1.230)
}

%region_5.170._custom_call_lowering_rule.6 (Arg_0.543: s32[], Arg_1.232: s32[]) -> s32[] {
  %Arg_0.543 = s32[] parameter(0)
  ROOT %Arg_1.232 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.6 (Arg_0.544: pred[], Arg_1.233: pred[]) -> pred[] {
  %Arg_0.544 = pred[] parameter(0)
  ROOT %Arg_1.233 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.6 (Arg_0.545: s32[], Arg_1.234: s32[]) -> s32[] {
  %Arg_0.545 = s32[] parameter(0)
  %Arg_1.234 = s32[] parameter(1)
  ROOT %add.544 = s32[] add(%Arg_0.545, %Arg_1.234)
}

%region_4.110._custom_call_lowering_rule.6 (Arg_0.546: s32[], Arg_1.235: s32[]) -> s32[] {
  %Arg_0.546 = s32[] parameter(0)
  %Arg_1.235 = s32[] parameter(1)
  ROOT %add.545 = s32[] add(%Arg_0.546, %Arg_1.235)
}

%region_6.178._custom_call_lowering_rule.6 (Arg_0.547: s32[], Arg_1.236: s32[]) -> s32[] {
  %Arg_0.547 = s32[] parameter(0)
  ROOT %Arg_1.236 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.6 (Arg_0.548: s32[], Arg_1.237: s32[]) -> s32[] {
  %Arg_0.548 = s32[] parameter(0)
  %Arg_1.237 = s32[] parameter(1)
  ROOT %add.546 = s32[] add(%Arg_0.548, %Arg_1.237)
}

%region_10.224._custom_call_lowering_rule.6 (Arg_0.549: s32[], Arg_1.238: s32[]) -> s32[] {
  %Arg_0.549 = s32[] parameter(0)
  ROOT %Arg_1.238 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.6 (Arg_0.550: pred[], Arg_1.239: pred[]) -> pred[] {
  %Arg_0.550 = pred[] parameter(0)
  ROOT %Arg_1.239 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.6 (Arg_0.551: s32[], Arg_1.240: s32[]) -> s32[] {
  %Arg_0.551 = s32[] parameter(0)
  %Arg_1.240 = s32[] parameter(1)
  ROOT %add.547 = s32[] add(%Arg_0.551, %Arg_1.240)
}

%region_11.232._custom_call_lowering_rule.6 (Arg_0.552: s32[], Arg_1.241: s32[]) -> s32[] {
  %Arg_0.552 = s32[] parameter(0)
  ROOT %Arg_1.241 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.7 (Arg_0.553: s32[], Arg_1.242: s32[], Arg_2.102: s32[], Arg_3.38: s32[]) -> pred[] {
  %Arg_2.102 = s32[] parameter(2)
  %Arg_3.38 = s32[] parameter(3)
  %Arg_0.553 = s32[] parameter(0)
  %Arg_1.242 = s32[] parameter(1)
  ROOT %compare.416 = pred[] compare(%Arg_0.553, %Arg_1.242), direction=LT
}

%region_1.74._custom_call_lowering_rule.7 (Arg_0.554: s32[], Arg_1.243: s32[]) -> s32[] {
  %Arg_0.554 = s32[] parameter(0)
  %Arg_1.243 = s32[] parameter(1)
  ROOT %add.548 = s32[] add(%Arg_0.554, %Arg_1.243)
}

%region_5.170._custom_call_lowering_rule.7 (Arg_0.555: s32[], Arg_1.244: s32[]) -> s32[] {
  %Arg_0.555 = s32[] parameter(0)
  ROOT %Arg_1.244 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.7 (Arg_0.556: pred[], Arg_1.245: pred[]) -> pred[] {
  %Arg_0.556 = pred[] parameter(0)
  ROOT %Arg_1.245 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.7 (Arg_0.557: s32[], Arg_1.246: s32[]) -> s32[] {
  %Arg_0.557 = s32[] parameter(0)
  %Arg_1.246 = s32[] parameter(1)
  ROOT %add.549 = s32[] add(%Arg_0.557, %Arg_1.246)
}

%region_4.110._custom_call_lowering_rule.7 (Arg_0.558: s32[], Arg_1.247: s32[]) -> s32[] {
  %Arg_0.558 = s32[] parameter(0)
  %Arg_1.247 = s32[] parameter(1)
  ROOT %add.550 = s32[] add(%Arg_0.558, %Arg_1.247)
}

%region_6.178._custom_call_lowering_rule.7 (Arg_0.559: s32[], Arg_1.248: s32[]) -> s32[] {
  %Arg_0.559 = s32[] parameter(0)
  ROOT %Arg_1.248 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.7 (Arg_0.560: s32[], Arg_1.249: s32[]) -> s32[] {
  %Arg_0.560 = s32[] parameter(0)
  %Arg_1.249 = s32[] parameter(1)
  ROOT %add.551 = s32[] add(%Arg_0.560, %Arg_1.249)
}

%region_10.224._custom_call_lowering_rule.7 (Arg_0.561: s32[], Arg_1.250: s32[]) -> s32[] {
  %Arg_0.561 = s32[] parameter(0)
  ROOT %Arg_1.250 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.7 (Arg_0.562: pred[], Arg_1.251: pred[]) -> pred[] {
  %Arg_0.562 = pred[] parameter(0)
  ROOT %Arg_1.251 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.7 (Arg_0.563: s32[], Arg_1.252: s32[]) -> s32[] {
  %Arg_0.563 = s32[] parameter(0)
  %Arg_1.252 = s32[] parameter(1)
  ROOT %add.552 = s32[] add(%Arg_0.563, %Arg_1.252)
}

%region_11.232._custom_call_lowering_rule.7 (Arg_0.564: s32[], Arg_1.253: s32[]) -> s32[] {
  %Arg_0.564 = s32[] parameter(0)
  ROOT %Arg_1.253 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.8 (Arg_0.565: s32[], Arg_1.254: s32[], Arg_2.103: s32[], Arg_3.39: s32[]) -> pred[] {
  %Arg_2.103 = s32[] parameter(2)
  %Arg_3.39 = s32[] parameter(3)
  %Arg_0.565 = s32[] parameter(0)
  %Arg_1.254 = s32[] parameter(1)
  ROOT %compare.421 = pred[] compare(%Arg_0.565, %Arg_1.254), direction=LT
}

%region_1.74._custom_call_lowering_rule.8 (Arg_0.566: s32[], Arg_1.255: s32[]) -> s32[] {
  %Arg_0.566 = s32[] parameter(0)
  %Arg_1.255 = s32[] parameter(1)
  ROOT %add.553 = s32[] add(%Arg_0.566, %Arg_1.255)
}

%region_5.170._custom_call_lowering_rule.8 (Arg_0.567: s32[], Arg_1.256: s32[]) -> s32[] {
  %Arg_0.567 = s32[] parameter(0)
  ROOT %Arg_1.256 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.8 (Arg_0.568: pred[], Arg_1.257: pred[]) -> pred[] {
  %Arg_0.568 = pred[] parameter(0)
  ROOT %Arg_1.257 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.8 (Arg_0.569: s32[], Arg_1.258: s32[]) -> s32[] {
  %Arg_0.569 = s32[] parameter(0)
  %Arg_1.258 = s32[] parameter(1)
  ROOT %add.554 = s32[] add(%Arg_0.569, %Arg_1.258)
}

%region_4.110._custom_call_lowering_rule.8 (Arg_0.570: s32[], Arg_1.259: s32[]) -> s32[] {
  %Arg_0.570 = s32[] parameter(0)
  %Arg_1.259 = s32[] parameter(1)
  ROOT %add.555 = s32[] add(%Arg_0.570, %Arg_1.259)
}

%region_6.178._custom_call_lowering_rule.8 (Arg_0.571: s32[], Arg_1.260: s32[]) -> s32[] {
  %Arg_0.571 = s32[] parameter(0)
  ROOT %Arg_1.260 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.8 (Arg_0.572: s32[], Arg_1.261: s32[]) -> s32[] {
  %Arg_0.572 = s32[] parameter(0)
  %Arg_1.261 = s32[] parameter(1)
  ROOT %add.556 = s32[] add(%Arg_0.572, %Arg_1.261)
}

%region_10.224._custom_call_lowering_rule.8 (Arg_0.573: s32[], Arg_1.262: s32[]) -> s32[] {
  %Arg_0.573 = s32[] parameter(0)
  ROOT %Arg_1.262 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.8 (Arg_0.574: pred[], Arg_1.263: pred[]) -> pred[] {
  %Arg_0.574 = pred[] parameter(0)
  ROOT %Arg_1.263 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.8 (Arg_0.575: s32[], Arg_1.264: s32[]) -> s32[] {
  %Arg_0.575 = s32[] parameter(0)
  %Arg_1.264 = s32[] parameter(1)
  ROOT %add.557 = s32[] add(%Arg_0.575, %Arg_1.264)
}

%region_11.232._custom_call_lowering_rule.8 (Arg_0.576: s32[], Arg_1.265: s32[]) -> s32[] {
  %Arg_0.576 = s32[] parameter(0)
  ROOT %Arg_1.265 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.9 (Arg_0.577: s32[], Arg_1.266: s32[], Arg_2.104: s32[], Arg_3.40: s32[]) -> pred[] {
  %Arg_2.104 = s32[] parameter(2)
  %Arg_3.40 = s32[] parameter(3)
  %Arg_0.577 = s32[] parameter(0)
  %Arg_1.266 = s32[] parameter(1)
  ROOT %compare.426 = pred[] compare(%Arg_0.577, %Arg_1.266), direction=LT
}

%region_1.74._custom_call_lowering_rule.9 (Arg_0.578: s32[], Arg_1.267: s32[]) -> s32[] {
  %Arg_0.578 = s32[] parameter(0)
  %Arg_1.267 = s32[] parameter(1)
  ROOT %add.558 = s32[] add(%Arg_0.578, %Arg_1.267)
}

%region_5.170._custom_call_lowering_rule.9 (Arg_0.579: s32[], Arg_1.268: s32[]) -> s32[] {
  %Arg_0.579 = s32[] parameter(0)
  ROOT %Arg_1.268 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.9 (Arg_0.580: pred[], Arg_1.269: pred[]) -> pred[] {
  %Arg_0.580 = pred[] parameter(0)
  ROOT %Arg_1.269 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.9 (Arg_0.581: s32[], Arg_1.270: s32[]) -> s32[] {
  %Arg_0.581 = s32[] parameter(0)
  %Arg_1.270 = s32[] parameter(1)
  ROOT %add.559 = s32[] add(%Arg_0.581, %Arg_1.270)
}

%region_4.110._custom_call_lowering_rule.9 (Arg_0.582: s32[], Arg_1.271: s32[]) -> s32[] {
  %Arg_0.582 = s32[] parameter(0)
  %Arg_1.271 = s32[] parameter(1)
  ROOT %add.560 = s32[] add(%Arg_0.582, %Arg_1.271)
}

%region_6.178._custom_call_lowering_rule.9 (Arg_0.583: s32[], Arg_1.272: s32[]) -> s32[] {
  %Arg_0.583 = s32[] parameter(0)
  ROOT %Arg_1.272 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.9 (Arg_0.584: s32[], Arg_1.273: s32[]) -> s32[] {
  %Arg_0.584 = s32[] parameter(0)
  %Arg_1.273 = s32[] parameter(1)
  ROOT %add.561 = s32[] add(%Arg_0.584, %Arg_1.273)
}

%region_10.224._custom_call_lowering_rule.9 (Arg_0.585: s32[], Arg_1.274: s32[]) -> s32[] {
  %Arg_0.585 = s32[] parameter(0)
  ROOT %Arg_1.274 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.9 (Arg_0.586: pred[], Arg_1.275: pred[]) -> pred[] {
  %Arg_0.586 = pred[] parameter(0)
  ROOT %Arg_1.275 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.9 (Arg_0.587: s32[], Arg_1.276: s32[]) -> s32[] {
  %Arg_0.587 = s32[] parameter(0)
  %Arg_1.276 = s32[] parameter(1)
  ROOT %add.562 = s32[] add(%Arg_0.587, %Arg_1.276)
}

%region_11.232._custom_call_lowering_rule.9 (Arg_0.588: s32[], Arg_1.277: s32[]) -> s32[] {
  %Arg_0.588 = s32[] parameter(0)
  ROOT %Arg_1.277 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.10 (Arg_0.589: s32[], Arg_1.278: s32[], Arg_2.105: s32[], Arg_3.41: s32[]) -> pred[] {
  %Arg_2.105 = s32[] parameter(2)
  %Arg_3.41 = s32[] parameter(3)
  %Arg_0.589 = s32[] parameter(0)
  %Arg_1.278 = s32[] parameter(1)
  ROOT %compare.431 = pred[] compare(%Arg_0.589, %Arg_1.278), direction=LT
}

%region_1.74._custom_call_lowering_rule.10 (Arg_0.590: s32[], Arg_1.279: s32[]) -> s32[] {
  %Arg_0.590 = s32[] parameter(0)
  %Arg_1.279 = s32[] parameter(1)
  ROOT %add.563 = s32[] add(%Arg_0.590, %Arg_1.279)
}

%region_5.170._custom_call_lowering_rule.10 (Arg_0.591: s32[], Arg_1.280: s32[]) -> s32[] {
  %Arg_0.591 = s32[] parameter(0)
  ROOT %Arg_1.280 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.10 (Arg_0.592: pred[], Arg_1.281: pred[]) -> pred[] {
  %Arg_0.592 = pred[] parameter(0)
  ROOT %Arg_1.281 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.10 (Arg_0.593: s32[], Arg_1.282: s32[]) -> s32[] {
  %Arg_0.593 = s32[] parameter(0)
  %Arg_1.282 = s32[] parameter(1)
  ROOT %add.564 = s32[] add(%Arg_0.593, %Arg_1.282)
}

%region_4.110._custom_call_lowering_rule.10 (Arg_0.594: s32[], Arg_1.283: s32[]) -> s32[] {
  %Arg_0.594 = s32[] parameter(0)
  %Arg_1.283 = s32[] parameter(1)
  ROOT %add.565 = s32[] add(%Arg_0.594, %Arg_1.283)
}

%region_6.178._custom_call_lowering_rule.10 (Arg_0.595: s32[], Arg_1.284: s32[]) -> s32[] {
  %Arg_0.595 = s32[] parameter(0)
  ROOT %Arg_1.284 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.10 (Arg_0.596: s32[], Arg_1.285: s32[]) -> s32[] {
  %Arg_0.596 = s32[] parameter(0)
  %Arg_1.285 = s32[] parameter(1)
  ROOT %add.566 = s32[] add(%Arg_0.596, %Arg_1.285)
}

%region_10.224._custom_call_lowering_rule.10 (Arg_0.597: s32[], Arg_1.286: s32[]) -> s32[] {
  %Arg_0.597 = s32[] parameter(0)
  ROOT %Arg_1.286 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.10 (Arg_0.598: pred[], Arg_1.287: pred[]) -> pred[] {
  %Arg_0.598 = pred[] parameter(0)
  ROOT %Arg_1.287 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.10 (Arg_0.599: s32[], Arg_1.288: s32[]) -> s32[] {
  %Arg_0.599 = s32[] parameter(0)
  %Arg_1.288 = s32[] parameter(1)
  ROOT %add.567 = s32[] add(%Arg_0.599, %Arg_1.288)
}

%region_11.232._custom_call_lowering_rule.10 (Arg_0.600: s32[], Arg_1.289: s32[]) -> s32[] {
  %Arg_0.600 = s32[] parameter(0)
  ROOT %Arg_1.289 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.11 (Arg_0.601: s32[], Arg_1.290: s32[], Arg_2.106: s32[], Arg_3.42: s32[]) -> pred[] {
  %Arg_2.106 = s32[] parameter(2)
  %Arg_3.42 = s32[] parameter(3)
  %Arg_0.601 = s32[] parameter(0)
  %Arg_1.290 = s32[] parameter(1)
  ROOT %compare.436 = pred[] compare(%Arg_0.601, %Arg_1.290), direction=LT
}

%region_1.74._custom_call_lowering_rule.11 (Arg_0.602: s32[], Arg_1.291: s32[]) -> s32[] {
  %Arg_0.602 = s32[] parameter(0)
  %Arg_1.291 = s32[] parameter(1)
  ROOT %add.568 = s32[] add(%Arg_0.602, %Arg_1.291)
}

%region_5.170._custom_call_lowering_rule.11 (Arg_0.603: s32[], Arg_1.292: s32[]) -> s32[] {
  %Arg_0.603 = s32[] parameter(0)
  ROOT %Arg_1.292 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.11 (Arg_0.604: pred[], Arg_1.293: pred[]) -> pred[] {
  %Arg_0.604 = pred[] parameter(0)
  ROOT %Arg_1.293 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.11 (Arg_0.605: s32[], Arg_1.294: s32[]) -> s32[] {
  %Arg_0.605 = s32[] parameter(0)
  %Arg_1.294 = s32[] parameter(1)
  ROOT %add.569 = s32[] add(%Arg_0.605, %Arg_1.294)
}

%region_4.110._custom_call_lowering_rule.11 (Arg_0.606: s32[], Arg_1.295: s32[]) -> s32[] {
  %Arg_0.606 = s32[] parameter(0)
  %Arg_1.295 = s32[] parameter(1)
  ROOT %add.570 = s32[] add(%Arg_0.606, %Arg_1.295)
}

%region_6.178._custom_call_lowering_rule.11 (Arg_0.607: s32[], Arg_1.296: s32[]) -> s32[] {
  %Arg_0.607 = s32[] parameter(0)
  ROOT %Arg_1.296 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.11 (Arg_0.608: s32[], Arg_1.297: s32[]) -> s32[] {
  %Arg_0.608 = s32[] parameter(0)
  %Arg_1.297 = s32[] parameter(1)
  ROOT %add.571 = s32[] add(%Arg_0.608, %Arg_1.297)
}

%region_10.224._custom_call_lowering_rule.11 (Arg_0.609: s32[], Arg_1.298: s32[]) -> s32[] {
  %Arg_0.609 = s32[] parameter(0)
  ROOT %Arg_1.298 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.11 (Arg_0.610: pred[], Arg_1.299: pred[]) -> pred[] {
  %Arg_0.610 = pred[] parameter(0)
  ROOT %Arg_1.299 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.11 (Arg_0.611: s32[], Arg_1.300: s32[]) -> s32[] {
  %Arg_0.611 = s32[] parameter(0)
  %Arg_1.300 = s32[] parameter(1)
  ROOT %add.572 = s32[] add(%Arg_0.611, %Arg_1.300)
}

%region_11.232._custom_call_lowering_rule.11 (Arg_0.612: s32[], Arg_1.301: s32[]) -> s32[] {
  %Arg_0.612 = s32[] parameter(0)
  ROOT %Arg_1.301 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.12 (Arg_0.613: s32[], Arg_1.302: s32[], Arg_2.107: s32[], Arg_3.43: s32[]) -> pred[] {
  %Arg_2.107 = s32[] parameter(2)
  %Arg_3.43 = s32[] parameter(3)
  %Arg_0.613 = s32[] parameter(0)
  %Arg_1.302 = s32[] parameter(1)
  ROOT %compare.441 = pred[] compare(%Arg_0.613, %Arg_1.302), direction=LT
}

%region_1.74._custom_call_lowering_rule.12 (Arg_0.614: s32[], Arg_1.303: s32[]) -> s32[] {
  %Arg_0.614 = s32[] parameter(0)
  %Arg_1.303 = s32[] parameter(1)
  ROOT %add.573 = s32[] add(%Arg_0.614, %Arg_1.303)
}

%region_5.170._custom_call_lowering_rule.12 (Arg_0.615: s32[], Arg_1.304: s32[]) -> s32[] {
  %Arg_0.615 = s32[] parameter(0)
  ROOT %Arg_1.304 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.12 (Arg_0.616: pred[], Arg_1.305: pred[]) -> pred[] {
  %Arg_0.616 = pred[] parameter(0)
  ROOT %Arg_1.305 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.12 (Arg_0.617: s32[], Arg_1.306: s32[]) -> s32[] {
  %Arg_0.617 = s32[] parameter(0)
  %Arg_1.306 = s32[] parameter(1)
  ROOT %add.574 = s32[] add(%Arg_0.617, %Arg_1.306)
}

%region_4.110._custom_call_lowering_rule.12 (Arg_0.618: s32[], Arg_1.307: s32[]) -> s32[] {
  %Arg_0.618 = s32[] parameter(0)
  %Arg_1.307 = s32[] parameter(1)
  ROOT %add.575 = s32[] add(%Arg_0.618, %Arg_1.307)
}

%region_6.178._custom_call_lowering_rule.12 (Arg_0.619: s32[], Arg_1.308: s32[]) -> s32[] {
  %Arg_0.619 = s32[] parameter(0)
  ROOT %Arg_1.308 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.12 (Arg_0.620: s32[], Arg_1.309: s32[]) -> s32[] {
  %Arg_0.620 = s32[] parameter(0)
  %Arg_1.309 = s32[] parameter(1)
  ROOT %add.576 = s32[] add(%Arg_0.620, %Arg_1.309)
}

%region_10.224._custom_call_lowering_rule.12 (Arg_0.621: s32[], Arg_1.310: s32[]) -> s32[] {
  %Arg_0.621 = s32[] parameter(0)
  ROOT %Arg_1.310 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.12 (Arg_0.622: pred[], Arg_1.311: pred[]) -> pred[] {
  %Arg_0.622 = pred[] parameter(0)
  ROOT %Arg_1.311 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.12 (Arg_0.623: s32[], Arg_1.312: s32[]) -> s32[] {
  %Arg_0.623 = s32[] parameter(0)
  %Arg_1.312 = s32[] parameter(1)
  ROOT %add.577 = s32[] add(%Arg_0.623, %Arg_1.312)
}

%region_11.232._custom_call_lowering_rule.12 (Arg_0.624: s32[], Arg_1.313: s32[]) -> s32[] {
  %Arg_0.624 = s32[] parameter(0)
  ROOT %Arg_1.313 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.13 (Arg_0.625: s32[], Arg_1.314: s32[], Arg_2.108: s32[], Arg_3.44: s32[]) -> pred[] {
  %Arg_2.108 = s32[] parameter(2)
  %Arg_3.44 = s32[] parameter(3)
  %Arg_0.625 = s32[] parameter(0)
  %Arg_1.314 = s32[] parameter(1)
  ROOT %compare.446 = pred[] compare(%Arg_0.625, %Arg_1.314), direction=LT
}

%region_1.74._custom_call_lowering_rule.13 (Arg_0.626: s32[], Arg_1.315: s32[]) -> s32[] {
  %Arg_0.626 = s32[] parameter(0)
  %Arg_1.315 = s32[] parameter(1)
  ROOT %add.578 = s32[] add(%Arg_0.626, %Arg_1.315)
}

%region_5.170._custom_call_lowering_rule.13 (Arg_0.627: s32[], Arg_1.316: s32[]) -> s32[] {
  %Arg_0.627 = s32[] parameter(0)
  ROOT %Arg_1.316 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.13 (Arg_0.628: pred[], Arg_1.317: pred[]) -> pred[] {
  %Arg_0.628 = pred[] parameter(0)
  ROOT %Arg_1.317 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.13 (Arg_0.629: s32[], Arg_1.318: s32[]) -> s32[] {
  %Arg_0.629 = s32[] parameter(0)
  %Arg_1.318 = s32[] parameter(1)
  ROOT %add.579 = s32[] add(%Arg_0.629, %Arg_1.318)
}

%region_4.110._custom_call_lowering_rule.13 (Arg_0.630: s32[], Arg_1.319: s32[]) -> s32[] {
  %Arg_0.630 = s32[] parameter(0)
  %Arg_1.319 = s32[] parameter(1)
  ROOT %add.580 = s32[] add(%Arg_0.630, %Arg_1.319)
}

%region_6.178._custom_call_lowering_rule.13 (Arg_0.631: s32[], Arg_1.320: s32[]) -> s32[] {
  %Arg_0.631 = s32[] parameter(0)
  ROOT %Arg_1.320 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.13 (Arg_0.632: s32[], Arg_1.321: s32[]) -> s32[] {
  %Arg_0.632 = s32[] parameter(0)
  %Arg_1.321 = s32[] parameter(1)
  ROOT %add.581 = s32[] add(%Arg_0.632, %Arg_1.321)
}

%region_10.224._custom_call_lowering_rule.13 (Arg_0.633: s32[], Arg_1.322: s32[]) -> s32[] {
  %Arg_0.633 = s32[] parameter(0)
  ROOT %Arg_1.322 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.13 (Arg_0.634: pred[], Arg_1.323: pred[]) -> pred[] {
  %Arg_0.634 = pred[] parameter(0)
  ROOT %Arg_1.323 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.13 (Arg_0.635: s32[], Arg_1.324: s32[]) -> s32[] {
  %Arg_0.635 = s32[] parameter(0)
  %Arg_1.324 = s32[] parameter(1)
  ROOT %add.582 = s32[] add(%Arg_0.635, %Arg_1.324)
}

%region_11.232._custom_call_lowering_rule.13 (Arg_0.636: s32[], Arg_1.325: s32[]) -> s32[] {
  %Arg_0.636 = s32[] parameter(0)
  ROOT %Arg_1.325 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.14 (Arg_0.637: s32[], Arg_1.326: s32[], Arg_2.109: s32[], Arg_3.45: s32[]) -> pred[] {
  %Arg_2.109 = s32[] parameter(2)
  %Arg_3.45 = s32[] parameter(3)
  %Arg_0.637 = s32[] parameter(0)
  %Arg_1.326 = s32[] parameter(1)
  ROOT %compare.451 = pred[] compare(%Arg_0.637, %Arg_1.326), direction=LT
}

%region_1.74._custom_call_lowering_rule.14 (Arg_0.638: s32[], Arg_1.327: s32[]) -> s32[] {
  %Arg_0.638 = s32[] parameter(0)
  %Arg_1.327 = s32[] parameter(1)
  ROOT %add.583 = s32[] add(%Arg_0.638, %Arg_1.327)
}

%region_5.170._custom_call_lowering_rule.14 (Arg_0.639: s32[], Arg_1.328: s32[]) -> s32[] {
  %Arg_0.639 = s32[] parameter(0)
  ROOT %Arg_1.328 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.14 (Arg_0.640: pred[], Arg_1.329: pred[]) -> pred[] {
  %Arg_0.640 = pred[] parameter(0)
  ROOT %Arg_1.329 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.14 (Arg_0.641: s32[], Arg_1.330: s32[]) -> s32[] {
  %Arg_0.641 = s32[] parameter(0)
  %Arg_1.330 = s32[] parameter(1)
  ROOT %add.584 = s32[] add(%Arg_0.641, %Arg_1.330)
}

%region_4.110._custom_call_lowering_rule.14 (Arg_0.642: s32[], Arg_1.331: s32[]) -> s32[] {
  %Arg_0.642 = s32[] parameter(0)
  %Arg_1.331 = s32[] parameter(1)
  ROOT %add.585 = s32[] add(%Arg_0.642, %Arg_1.331)
}

%region_6.178._custom_call_lowering_rule.14 (Arg_0.643: s32[], Arg_1.332: s32[]) -> s32[] {
  %Arg_0.643 = s32[] parameter(0)
  ROOT %Arg_1.332 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.14 (Arg_0.644: s32[], Arg_1.333: s32[]) -> s32[] {
  %Arg_0.644 = s32[] parameter(0)
  %Arg_1.333 = s32[] parameter(1)
  ROOT %add.586 = s32[] add(%Arg_0.644, %Arg_1.333)
}

%region_10.224._custom_call_lowering_rule.14 (Arg_0.645: s32[], Arg_1.334: s32[]) -> s32[] {
  %Arg_0.645 = s32[] parameter(0)
  ROOT %Arg_1.334 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.14 (Arg_0.646: pred[], Arg_1.335: pred[]) -> pred[] {
  %Arg_0.646 = pred[] parameter(0)
  ROOT %Arg_1.335 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.14 (Arg_0.647: s32[], Arg_1.336: s32[]) -> s32[] {
  %Arg_0.647 = s32[] parameter(0)
  %Arg_1.336 = s32[] parameter(1)
  ROOT %add.587 = s32[] add(%Arg_0.647, %Arg_1.336)
}

%region_11.232._custom_call_lowering_rule.14 (Arg_0.648: s32[], Arg_1.337: s32[]) -> s32[] {
  %Arg_0.648 = s32[] parameter(0)
  ROOT %Arg_1.337 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.15 (Arg_0.649: s32[], Arg_1.338: s32[], Arg_2.110: s32[], Arg_3.46: s32[]) -> pred[] {
  %Arg_2.110 = s32[] parameter(2)
  %Arg_3.46 = s32[] parameter(3)
  %Arg_0.649 = s32[] parameter(0)
  %Arg_1.338 = s32[] parameter(1)
  ROOT %compare.456 = pred[] compare(%Arg_0.649, %Arg_1.338), direction=LT
}

%region_1.74._custom_call_lowering_rule.15 (Arg_0.650: s32[], Arg_1.339: s32[]) -> s32[] {
  %Arg_0.650 = s32[] parameter(0)
  %Arg_1.339 = s32[] parameter(1)
  ROOT %add.588 = s32[] add(%Arg_0.650, %Arg_1.339)
}

%region_5.170._custom_call_lowering_rule.15 (Arg_0.651: s32[], Arg_1.340: s32[]) -> s32[] {
  %Arg_0.651 = s32[] parameter(0)
  ROOT %Arg_1.340 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.15 (Arg_0.652: pred[], Arg_1.341: pred[]) -> pred[] {
  %Arg_0.652 = pred[] parameter(0)
  ROOT %Arg_1.341 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.15 (Arg_0.653: s32[], Arg_1.342: s32[]) -> s32[] {
  %Arg_0.653 = s32[] parameter(0)
  %Arg_1.342 = s32[] parameter(1)
  ROOT %add.589 = s32[] add(%Arg_0.653, %Arg_1.342)
}

%region_4.110._custom_call_lowering_rule.15 (Arg_0.654: s32[], Arg_1.343: s32[]) -> s32[] {
  %Arg_0.654 = s32[] parameter(0)
  %Arg_1.343 = s32[] parameter(1)
  ROOT %add.590 = s32[] add(%Arg_0.654, %Arg_1.343)
}

%region_6.178._custom_call_lowering_rule.15 (Arg_0.655: s32[], Arg_1.344: s32[]) -> s32[] {
  %Arg_0.655 = s32[] parameter(0)
  ROOT %Arg_1.344 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.15 (Arg_0.656: s32[], Arg_1.345: s32[]) -> s32[] {
  %Arg_0.656 = s32[] parameter(0)
  %Arg_1.345 = s32[] parameter(1)
  ROOT %add.591 = s32[] add(%Arg_0.656, %Arg_1.345)
}

%region_10.224._custom_call_lowering_rule.15 (Arg_0.657: s32[], Arg_1.346: s32[]) -> s32[] {
  %Arg_0.657 = s32[] parameter(0)
  ROOT %Arg_1.346 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.15 (Arg_0.658: pred[], Arg_1.347: pred[]) -> pred[] {
  %Arg_0.658 = pred[] parameter(0)
  ROOT %Arg_1.347 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.15 (Arg_0.659: s32[], Arg_1.348: s32[]) -> s32[] {
  %Arg_0.659 = s32[] parameter(0)
  %Arg_1.348 = s32[] parameter(1)
  ROOT %add.592 = s32[] add(%Arg_0.659, %Arg_1.348)
}

%region_11.232._custom_call_lowering_rule.15 (Arg_0.660: s32[], Arg_1.349: s32[]) -> s32[] {
  %Arg_0.660 = s32[] parameter(0)
  ROOT %Arg_1.349 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.16 (Arg_0.661: s32[], Arg_1.350: s32[], Arg_2.111: s32[], Arg_3.47: s32[]) -> pred[] {
  %Arg_2.111 = s32[] parameter(2)
  %Arg_3.47 = s32[] parameter(3)
  %Arg_0.661 = s32[] parameter(0)
  %Arg_1.350 = s32[] parameter(1)
  ROOT %compare.461 = pred[] compare(%Arg_0.661, %Arg_1.350), direction=LT
}

%region_1.74._custom_call_lowering_rule.16 (Arg_0.662: s32[], Arg_1.351: s32[]) -> s32[] {
  %Arg_0.662 = s32[] parameter(0)
  %Arg_1.351 = s32[] parameter(1)
  ROOT %add.593 = s32[] add(%Arg_0.662, %Arg_1.351)
}

%region_5.170._custom_call_lowering_rule.16 (Arg_0.663: s32[], Arg_1.352: s32[]) -> s32[] {
  %Arg_0.663 = s32[] parameter(0)
  ROOT %Arg_1.352 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.16 (Arg_0.664: pred[], Arg_1.353: pred[]) -> pred[] {
  %Arg_0.664 = pred[] parameter(0)
  ROOT %Arg_1.353 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.16 (Arg_0.665: s32[], Arg_1.354: s32[]) -> s32[] {
  %Arg_0.665 = s32[] parameter(0)
  %Arg_1.354 = s32[] parameter(1)
  ROOT %add.594 = s32[] add(%Arg_0.665, %Arg_1.354)
}

%region_4.110._custom_call_lowering_rule.16 (Arg_0.666: s32[], Arg_1.355: s32[]) -> s32[] {
  %Arg_0.666 = s32[] parameter(0)
  %Arg_1.355 = s32[] parameter(1)
  ROOT %add.595 = s32[] add(%Arg_0.666, %Arg_1.355)
}

%region_6.178._custom_call_lowering_rule.16 (Arg_0.667: s32[], Arg_1.356: s32[]) -> s32[] {
  %Arg_0.667 = s32[] parameter(0)
  ROOT %Arg_1.356 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.16 (Arg_0.668: s32[], Arg_1.357: s32[]) -> s32[] {
  %Arg_0.668 = s32[] parameter(0)
  %Arg_1.357 = s32[] parameter(1)
  ROOT %add.596 = s32[] add(%Arg_0.668, %Arg_1.357)
}

%region_10.224._custom_call_lowering_rule.16 (Arg_0.669: s32[], Arg_1.358: s32[]) -> s32[] {
  %Arg_0.669 = s32[] parameter(0)
  ROOT %Arg_1.358 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.16 (Arg_0.670: pred[], Arg_1.359: pred[]) -> pred[] {
  %Arg_0.670 = pred[] parameter(0)
  ROOT %Arg_1.359 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.16 (Arg_0.671: s32[], Arg_1.360: s32[]) -> s32[] {
  %Arg_0.671 = s32[] parameter(0)
  %Arg_1.360 = s32[] parameter(1)
  ROOT %add.597 = s32[] add(%Arg_0.671, %Arg_1.360)
}

%region_11.232._custom_call_lowering_rule.16 (Arg_0.672: s32[], Arg_1.361: s32[]) -> s32[] {
  %Arg_0.672 = s32[] parameter(0)
  ROOT %Arg_1.361 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.17 (Arg_0.673: s32[], Arg_1.362: s32[], Arg_2.112: s32[], Arg_3.48: s32[]) -> pred[] {
  %Arg_2.112 = s32[] parameter(2)
  %Arg_3.48 = s32[] parameter(3)
  %Arg_0.673 = s32[] parameter(0)
  %Arg_1.362 = s32[] parameter(1)
  ROOT %compare.466 = pred[] compare(%Arg_0.673, %Arg_1.362), direction=LT
}

%region_1.74._custom_call_lowering_rule.17 (Arg_0.674: s32[], Arg_1.363: s32[]) -> s32[] {
  %Arg_0.674 = s32[] parameter(0)
  %Arg_1.363 = s32[] parameter(1)
  ROOT %add.598 = s32[] add(%Arg_0.674, %Arg_1.363)
}

%region_5.170._custom_call_lowering_rule.17 (Arg_0.675: s32[], Arg_1.364: s32[]) -> s32[] {
  %Arg_0.675 = s32[] parameter(0)
  ROOT %Arg_1.364 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.17 (Arg_0.676: pred[], Arg_1.365: pred[]) -> pred[] {
  %Arg_0.676 = pred[] parameter(0)
  ROOT %Arg_1.365 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.17 (Arg_0.677: s32[], Arg_1.366: s32[]) -> s32[] {
  %Arg_0.677 = s32[] parameter(0)
  %Arg_1.366 = s32[] parameter(1)
  ROOT %add.599 = s32[] add(%Arg_0.677, %Arg_1.366)
}

%region_4.110._custom_call_lowering_rule.17 (Arg_0.678: s32[], Arg_1.367: s32[]) -> s32[] {
  %Arg_0.678 = s32[] parameter(0)
  %Arg_1.367 = s32[] parameter(1)
  ROOT %add.600 = s32[] add(%Arg_0.678, %Arg_1.367)
}

%region_6.178._custom_call_lowering_rule.17 (Arg_0.679: s32[], Arg_1.368: s32[]) -> s32[] {
  %Arg_0.679 = s32[] parameter(0)
  ROOT %Arg_1.368 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.17 (Arg_0.680: s32[], Arg_1.369: s32[]) -> s32[] {
  %Arg_0.680 = s32[] parameter(0)
  %Arg_1.369 = s32[] parameter(1)
  ROOT %add.601 = s32[] add(%Arg_0.680, %Arg_1.369)
}

%region_10.224._custom_call_lowering_rule.17 (Arg_0.681: s32[], Arg_1.370: s32[]) -> s32[] {
  %Arg_0.681 = s32[] parameter(0)
  ROOT %Arg_1.370 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.17 (Arg_0.682: pred[], Arg_1.371: pred[]) -> pred[] {
  %Arg_0.682 = pred[] parameter(0)
  ROOT %Arg_1.371 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.17 (Arg_0.683: s32[], Arg_1.372: s32[]) -> s32[] {
  %Arg_0.683 = s32[] parameter(0)
  %Arg_1.372 = s32[] parameter(1)
  ROOT %add.602 = s32[] add(%Arg_0.683, %Arg_1.372)
}

%region_11.232._custom_call_lowering_rule.17 (Arg_0.684: s32[], Arg_1.373: s32[]) -> s32[] {
  %Arg_0.684 = s32[] parameter(0)
  ROOT %Arg_1.373 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.18 (Arg_0.685: s32[], Arg_1.374: s32[], Arg_2.113: s32[], Arg_3.49: s32[]) -> pred[] {
  %Arg_2.113 = s32[] parameter(2)
  %Arg_3.49 = s32[] parameter(3)
  %Arg_0.685 = s32[] parameter(0)
  %Arg_1.374 = s32[] parameter(1)
  ROOT %compare.471 = pred[] compare(%Arg_0.685, %Arg_1.374), direction=LT
}

%region_1.74._custom_call_lowering_rule.18 (Arg_0.686: s32[], Arg_1.375: s32[]) -> s32[] {
  %Arg_0.686 = s32[] parameter(0)
  %Arg_1.375 = s32[] parameter(1)
  ROOT %add.603 = s32[] add(%Arg_0.686, %Arg_1.375)
}

%region_5.170._custom_call_lowering_rule.18 (Arg_0.687: s32[], Arg_1.376: s32[]) -> s32[] {
  %Arg_0.687 = s32[] parameter(0)
  ROOT %Arg_1.376 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.18 (Arg_0.688: pred[], Arg_1.377: pred[]) -> pred[] {
  %Arg_0.688 = pred[] parameter(0)
  ROOT %Arg_1.377 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.18 (Arg_0.689: s32[], Arg_1.378: s32[]) -> s32[] {
  %Arg_0.689 = s32[] parameter(0)
  %Arg_1.378 = s32[] parameter(1)
  ROOT %add.604 = s32[] add(%Arg_0.689, %Arg_1.378)
}

%region_4.110._custom_call_lowering_rule.18 (Arg_0.690: s32[], Arg_1.379: s32[]) -> s32[] {
  %Arg_0.690 = s32[] parameter(0)
  %Arg_1.379 = s32[] parameter(1)
  ROOT %add.605 = s32[] add(%Arg_0.690, %Arg_1.379)
}

%region_6.178._custom_call_lowering_rule.18 (Arg_0.691: s32[], Arg_1.380: s32[]) -> s32[] {
  %Arg_0.691 = s32[] parameter(0)
  ROOT %Arg_1.380 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.18 (Arg_0.692: s32[], Arg_1.381: s32[]) -> s32[] {
  %Arg_0.692 = s32[] parameter(0)
  %Arg_1.381 = s32[] parameter(1)
  ROOT %add.606 = s32[] add(%Arg_0.692, %Arg_1.381)
}

%region_10.224._custom_call_lowering_rule.18 (Arg_0.693: s32[], Arg_1.382: s32[]) -> s32[] {
  %Arg_0.693 = s32[] parameter(0)
  ROOT %Arg_1.382 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.18 (Arg_0.694: pred[], Arg_1.383: pred[]) -> pred[] {
  %Arg_0.694 = pred[] parameter(0)
  ROOT %Arg_1.383 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.18 (Arg_0.695: s32[], Arg_1.384: s32[]) -> s32[] {
  %Arg_0.695 = s32[] parameter(0)
  %Arg_1.384 = s32[] parameter(1)
  ROOT %add.607 = s32[] add(%Arg_0.695, %Arg_1.384)
}

%region_11.232._custom_call_lowering_rule.18 (Arg_0.696: s32[], Arg_1.385: s32[]) -> s32[] {
  %Arg_0.696 = s32[] parameter(0)
  ROOT %Arg_1.385 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.19 (Arg_0.697: s32[], Arg_1.386: s32[], Arg_2.114: s32[], Arg_3.50: s32[]) -> pred[] {
  %Arg_2.114 = s32[] parameter(2)
  %Arg_3.50 = s32[] parameter(3)
  %Arg_0.697 = s32[] parameter(0)
  %Arg_1.386 = s32[] parameter(1)
  ROOT %compare.476 = pred[] compare(%Arg_0.697, %Arg_1.386), direction=LT
}

%region_1.74._custom_call_lowering_rule.19 (Arg_0.698: s32[], Arg_1.387: s32[]) -> s32[] {
  %Arg_0.698 = s32[] parameter(0)
  %Arg_1.387 = s32[] parameter(1)
  ROOT %add.608 = s32[] add(%Arg_0.698, %Arg_1.387)
}

%region_5.170._custom_call_lowering_rule.19 (Arg_0.699: s32[], Arg_1.388: s32[]) -> s32[] {
  %Arg_0.699 = s32[] parameter(0)
  ROOT %Arg_1.388 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.19 (Arg_0.700: pred[], Arg_1.389: pred[]) -> pred[] {
  %Arg_0.700 = pred[] parameter(0)
  ROOT %Arg_1.389 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.19 (Arg_0.701: s32[], Arg_1.390: s32[]) -> s32[] {
  %Arg_0.701 = s32[] parameter(0)
  %Arg_1.390 = s32[] parameter(1)
  ROOT %add.609 = s32[] add(%Arg_0.701, %Arg_1.390)
}

%region_4.110._custom_call_lowering_rule.19 (Arg_0.702: s32[], Arg_1.391: s32[]) -> s32[] {
  %Arg_0.702 = s32[] parameter(0)
  %Arg_1.391 = s32[] parameter(1)
  ROOT %add.610 = s32[] add(%Arg_0.702, %Arg_1.391)
}

%region_6.178._custom_call_lowering_rule.19 (Arg_0.703: s32[], Arg_1.392: s32[]) -> s32[] {
  %Arg_0.703 = s32[] parameter(0)
  ROOT %Arg_1.392 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.19 (Arg_0.704: s32[], Arg_1.393: s32[]) -> s32[] {
  %Arg_0.704 = s32[] parameter(0)
  %Arg_1.393 = s32[] parameter(1)
  ROOT %add.611 = s32[] add(%Arg_0.704, %Arg_1.393)
}

%region_10.224._custom_call_lowering_rule.19 (Arg_0.705: s32[], Arg_1.394: s32[]) -> s32[] {
  %Arg_0.705 = s32[] parameter(0)
  ROOT %Arg_1.394 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.19 (Arg_0.706: pred[], Arg_1.395: pred[]) -> pred[] {
  %Arg_0.706 = pred[] parameter(0)
  ROOT %Arg_1.395 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.19 (Arg_0.707: s32[], Arg_1.396: s32[]) -> s32[] {
  %Arg_0.707 = s32[] parameter(0)
  %Arg_1.396 = s32[] parameter(1)
  ROOT %add.612 = s32[] add(%Arg_0.707, %Arg_1.396)
}

%region_11.232._custom_call_lowering_rule.19 (Arg_0.708: s32[], Arg_1.397: s32[]) -> s32[] {
  %Arg_0.708 = s32[] parameter(0)
  ROOT %Arg_1.397 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.20 (Arg_0.709: s32[], Arg_1.398: s32[], Arg_2.115: s32[], Arg_3.51: s32[]) -> pred[] {
  %Arg_2.115 = s32[] parameter(2)
  %Arg_3.51 = s32[] parameter(3)
  %Arg_0.709 = s32[] parameter(0)
  %Arg_1.398 = s32[] parameter(1)
  ROOT %compare.481 = pred[] compare(%Arg_0.709, %Arg_1.398), direction=LT
}

%region_1.74._custom_call_lowering_rule.20 (Arg_0.710: s32[], Arg_1.399: s32[]) -> s32[] {
  %Arg_0.710 = s32[] parameter(0)
  %Arg_1.399 = s32[] parameter(1)
  ROOT %add.613 = s32[] add(%Arg_0.710, %Arg_1.399)
}

%region_5.170._custom_call_lowering_rule.20 (Arg_0.711: s32[], Arg_1.400: s32[]) -> s32[] {
  %Arg_0.711 = s32[] parameter(0)
  ROOT %Arg_1.400 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.20 (Arg_0.712: pred[], Arg_1.401: pred[]) -> pred[] {
  %Arg_0.712 = pred[] parameter(0)
  ROOT %Arg_1.401 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.20 (Arg_0.713: s32[], Arg_1.402: s32[]) -> s32[] {
  %Arg_0.713 = s32[] parameter(0)
  %Arg_1.402 = s32[] parameter(1)
  ROOT %add.614 = s32[] add(%Arg_0.713, %Arg_1.402)
}

%region_4.110._custom_call_lowering_rule.20 (Arg_0.714: s32[], Arg_1.403: s32[]) -> s32[] {
  %Arg_0.714 = s32[] parameter(0)
  %Arg_1.403 = s32[] parameter(1)
  ROOT %add.615 = s32[] add(%Arg_0.714, %Arg_1.403)
}

%region_6.178._custom_call_lowering_rule.20 (Arg_0.715: s32[], Arg_1.404: s32[]) -> s32[] {
  %Arg_0.715 = s32[] parameter(0)
  ROOT %Arg_1.404 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.20 (Arg_0.716: s32[], Arg_1.405: s32[]) -> s32[] {
  %Arg_0.716 = s32[] parameter(0)
  %Arg_1.405 = s32[] parameter(1)
  ROOT %add.616 = s32[] add(%Arg_0.716, %Arg_1.405)
}

%region_10.224._custom_call_lowering_rule.20 (Arg_0.717: s32[], Arg_1.406: s32[]) -> s32[] {
  %Arg_0.717 = s32[] parameter(0)
  ROOT %Arg_1.406 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.20 (Arg_0.718: pred[], Arg_1.407: pred[]) -> pred[] {
  %Arg_0.718 = pred[] parameter(0)
  ROOT %Arg_1.407 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.20 (Arg_0.719: s32[], Arg_1.408: s32[]) -> s32[] {
  %Arg_0.719 = s32[] parameter(0)
  %Arg_1.408 = s32[] parameter(1)
  ROOT %add.617 = s32[] add(%Arg_0.719, %Arg_1.408)
}

%region_11.232._custom_call_lowering_rule.20 (Arg_0.720: s32[], Arg_1.409: s32[]) -> s32[] {
  %Arg_0.720 = s32[] parameter(0)
  ROOT %Arg_1.409 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.21 (Arg_0.721: s32[], Arg_1.410: s32[], Arg_2.116: s32[], Arg_3.52: s32[]) -> pred[] {
  %Arg_2.116 = s32[] parameter(2)
  %Arg_3.52 = s32[] parameter(3)
  %Arg_0.721 = s32[] parameter(0)
  %Arg_1.410 = s32[] parameter(1)
  ROOT %compare.486 = pred[] compare(%Arg_0.721, %Arg_1.410), direction=LT
}

%region_1.74._custom_call_lowering_rule.21 (Arg_0.722: s32[], Arg_1.411: s32[]) -> s32[] {
  %Arg_0.722 = s32[] parameter(0)
  %Arg_1.411 = s32[] parameter(1)
  ROOT %add.618 = s32[] add(%Arg_0.722, %Arg_1.411)
}

%region_5.170._custom_call_lowering_rule.21 (Arg_0.723: s32[], Arg_1.412: s32[]) -> s32[] {
  %Arg_0.723 = s32[] parameter(0)
  ROOT %Arg_1.412 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.21 (Arg_0.724: pred[], Arg_1.413: pred[]) -> pred[] {
  %Arg_0.724 = pred[] parameter(0)
  ROOT %Arg_1.413 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.21 (Arg_0.725: s32[], Arg_1.414: s32[]) -> s32[] {
  %Arg_0.725 = s32[] parameter(0)
  %Arg_1.414 = s32[] parameter(1)
  ROOT %add.619 = s32[] add(%Arg_0.725, %Arg_1.414)
}

%region_4.110._custom_call_lowering_rule.21 (Arg_0.726: s32[], Arg_1.415: s32[]) -> s32[] {
  %Arg_0.726 = s32[] parameter(0)
  %Arg_1.415 = s32[] parameter(1)
  ROOT %add.620 = s32[] add(%Arg_0.726, %Arg_1.415)
}

%region_6.178._custom_call_lowering_rule.21 (Arg_0.727: s32[], Arg_1.416: s32[]) -> s32[] {
  %Arg_0.727 = s32[] parameter(0)
  ROOT %Arg_1.416 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.21 (Arg_0.728: s32[], Arg_1.417: s32[]) -> s32[] {
  %Arg_0.728 = s32[] parameter(0)
  %Arg_1.417 = s32[] parameter(1)
  ROOT %add.621 = s32[] add(%Arg_0.728, %Arg_1.417)
}

%region_10.224._custom_call_lowering_rule.21 (Arg_0.729: s32[], Arg_1.418: s32[]) -> s32[] {
  %Arg_0.729 = s32[] parameter(0)
  ROOT %Arg_1.418 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.21 (Arg_0.730: pred[], Arg_1.419: pred[]) -> pred[] {
  %Arg_0.730 = pred[] parameter(0)
  ROOT %Arg_1.419 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.21 (Arg_0.731: s32[], Arg_1.420: s32[]) -> s32[] {
  %Arg_0.731 = s32[] parameter(0)
  %Arg_1.420 = s32[] parameter(1)
  ROOT %add.622 = s32[] add(%Arg_0.731, %Arg_1.420)
}

%region_11.232._custom_call_lowering_rule.21 (Arg_0.732: s32[], Arg_1.421: s32[]) -> s32[] {
  %Arg_0.732 = s32[] parameter(0)
  ROOT %Arg_1.421 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.22 (Arg_0.733: s32[], Arg_1.422: s32[], Arg_2.117: s32[], Arg_3.53: s32[]) -> pred[] {
  %Arg_2.117 = s32[] parameter(2)
  %Arg_3.53 = s32[] parameter(3)
  %Arg_0.733 = s32[] parameter(0)
  %Arg_1.422 = s32[] parameter(1)
  ROOT %compare.491 = pred[] compare(%Arg_0.733, %Arg_1.422), direction=LT
}

%region_1.74._custom_call_lowering_rule.22 (Arg_0.734: s32[], Arg_1.423: s32[]) -> s32[] {
  %Arg_0.734 = s32[] parameter(0)
  %Arg_1.423 = s32[] parameter(1)
  ROOT %add.623 = s32[] add(%Arg_0.734, %Arg_1.423)
}

%region_5.170._custom_call_lowering_rule.22 (Arg_0.735: s32[], Arg_1.424: s32[]) -> s32[] {
  %Arg_0.735 = s32[] parameter(0)
  ROOT %Arg_1.424 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.22 (Arg_0.736: pred[], Arg_1.425: pred[]) -> pred[] {
  %Arg_0.736 = pred[] parameter(0)
  ROOT %Arg_1.425 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.22 (Arg_0.737: s32[], Arg_1.426: s32[]) -> s32[] {
  %Arg_0.737 = s32[] parameter(0)
  %Arg_1.426 = s32[] parameter(1)
  ROOT %add.624 = s32[] add(%Arg_0.737, %Arg_1.426)
}

%region_4.110._custom_call_lowering_rule.22 (Arg_0.738: s32[], Arg_1.427: s32[]) -> s32[] {
  %Arg_0.738 = s32[] parameter(0)
  %Arg_1.427 = s32[] parameter(1)
  ROOT %add.625 = s32[] add(%Arg_0.738, %Arg_1.427)
}

%region_6.178._custom_call_lowering_rule.22 (Arg_0.739: s32[], Arg_1.428: s32[]) -> s32[] {
  %Arg_0.739 = s32[] parameter(0)
  ROOT %Arg_1.428 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.22 (Arg_0.740: s32[], Arg_1.429: s32[]) -> s32[] {
  %Arg_0.740 = s32[] parameter(0)
  %Arg_1.429 = s32[] parameter(1)
  ROOT %add.626 = s32[] add(%Arg_0.740, %Arg_1.429)
}

%region_10.224._custom_call_lowering_rule.22 (Arg_0.741: s32[], Arg_1.430: s32[]) -> s32[] {
  %Arg_0.741 = s32[] parameter(0)
  ROOT %Arg_1.430 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.22 (Arg_0.742: pred[], Arg_1.431: pred[]) -> pred[] {
  %Arg_0.742 = pred[] parameter(0)
  ROOT %Arg_1.431 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.22 (Arg_0.743: s32[], Arg_1.432: s32[]) -> s32[] {
  %Arg_0.743 = s32[] parameter(0)
  %Arg_1.432 = s32[] parameter(1)
  ROOT %add.627 = s32[] add(%Arg_0.743, %Arg_1.432)
}

%region_11.232._custom_call_lowering_rule.22 (Arg_0.744: s32[], Arg_1.433: s32[]) -> s32[] {
  %Arg_0.744 = s32[] parameter(0)
  ROOT %Arg_1.433 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.23 (Arg_0.745: s32[], Arg_1.434: s32[], Arg_2.118: s32[], Arg_3.54: s32[]) -> pred[] {
  %Arg_2.118 = s32[] parameter(2)
  %Arg_3.54 = s32[] parameter(3)
  %Arg_0.745 = s32[] parameter(0)
  %Arg_1.434 = s32[] parameter(1)
  ROOT %compare.496 = pred[] compare(%Arg_0.745, %Arg_1.434), direction=LT
}

%region_1.74._custom_call_lowering_rule.23 (Arg_0.746: s32[], Arg_1.435: s32[]) -> s32[] {
  %Arg_0.746 = s32[] parameter(0)
  %Arg_1.435 = s32[] parameter(1)
  ROOT %add.628 = s32[] add(%Arg_0.746, %Arg_1.435)
}

%region_5.170._custom_call_lowering_rule.23 (Arg_0.747: s32[], Arg_1.436: s32[]) -> s32[] {
  %Arg_0.747 = s32[] parameter(0)
  ROOT %Arg_1.436 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.23 (Arg_0.748: pred[], Arg_1.437: pred[]) -> pred[] {
  %Arg_0.748 = pred[] parameter(0)
  ROOT %Arg_1.437 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.23 (Arg_0.749: s32[], Arg_1.438: s32[]) -> s32[] {
  %Arg_0.749 = s32[] parameter(0)
  %Arg_1.438 = s32[] parameter(1)
  ROOT %add.629 = s32[] add(%Arg_0.749, %Arg_1.438)
}

%region_4.110._custom_call_lowering_rule.23 (Arg_0.750: s32[], Arg_1.439: s32[]) -> s32[] {
  %Arg_0.750 = s32[] parameter(0)
  %Arg_1.439 = s32[] parameter(1)
  ROOT %add.630 = s32[] add(%Arg_0.750, %Arg_1.439)
}

%region_6.178._custom_call_lowering_rule.23 (Arg_0.751: s32[], Arg_1.440: s32[]) -> s32[] {
  %Arg_0.751 = s32[] parameter(0)
  ROOT %Arg_1.440 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.23 (Arg_0.752: s32[], Arg_1.441: s32[]) -> s32[] {
  %Arg_0.752 = s32[] parameter(0)
  %Arg_1.441 = s32[] parameter(1)
  ROOT %add.631 = s32[] add(%Arg_0.752, %Arg_1.441)
}

%region_10.224._custom_call_lowering_rule.23 (Arg_0.753: s32[], Arg_1.442: s32[]) -> s32[] {
  %Arg_0.753 = s32[] parameter(0)
  ROOT %Arg_1.442 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.23 (Arg_0.754: pred[], Arg_1.443: pred[]) -> pred[] {
  %Arg_0.754 = pred[] parameter(0)
  ROOT %Arg_1.443 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.23 (Arg_0.755: s32[], Arg_1.444: s32[]) -> s32[] {
  %Arg_0.755 = s32[] parameter(0)
  %Arg_1.444 = s32[] parameter(1)
  ROOT %add.632 = s32[] add(%Arg_0.755, %Arg_1.444)
}

%region_11.232._custom_call_lowering_rule.23 (Arg_0.756: s32[], Arg_1.445: s32[]) -> s32[] {
  %Arg_0.756 = s32[] parameter(0)
  ROOT %Arg_1.445 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.24 (Arg_0.757: s32[], Arg_1.446: s32[], Arg_2.119: s32[], Arg_3.55: s32[]) -> pred[] {
  %Arg_2.119 = s32[] parameter(2)
  %Arg_3.55 = s32[] parameter(3)
  %Arg_0.757 = s32[] parameter(0)
  %Arg_1.446 = s32[] parameter(1)
  ROOT %compare.501 = pred[] compare(%Arg_0.757, %Arg_1.446), direction=LT
}

%region_1.74._custom_call_lowering_rule.24 (Arg_0.758: s32[], Arg_1.447: s32[]) -> s32[] {
  %Arg_0.758 = s32[] parameter(0)
  %Arg_1.447 = s32[] parameter(1)
  ROOT %add.633 = s32[] add(%Arg_0.758, %Arg_1.447)
}

%region_5.170._custom_call_lowering_rule.24 (Arg_0.759: s32[], Arg_1.448: s32[]) -> s32[] {
  %Arg_0.759 = s32[] parameter(0)
  ROOT %Arg_1.448 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.24 (Arg_0.760: pred[], Arg_1.449: pred[]) -> pred[] {
  %Arg_0.760 = pred[] parameter(0)
  ROOT %Arg_1.449 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.24 (Arg_0.761: s32[], Arg_1.450: s32[]) -> s32[] {
  %Arg_0.761 = s32[] parameter(0)
  %Arg_1.450 = s32[] parameter(1)
  ROOT %add.634 = s32[] add(%Arg_0.761, %Arg_1.450)
}

%region_4.110._custom_call_lowering_rule.24 (Arg_0.762: s32[], Arg_1.451: s32[]) -> s32[] {
  %Arg_0.762 = s32[] parameter(0)
  %Arg_1.451 = s32[] parameter(1)
  ROOT %add.635 = s32[] add(%Arg_0.762, %Arg_1.451)
}

%region_6.178._custom_call_lowering_rule.24 (Arg_0.763: s32[], Arg_1.452: s32[]) -> s32[] {
  %Arg_0.763 = s32[] parameter(0)
  ROOT %Arg_1.452 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.24 (Arg_0.764: s32[], Arg_1.453: s32[]) -> s32[] {
  %Arg_0.764 = s32[] parameter(0)
  %Arg_1.453 = s32[] parameter(1)
  ROOT %add.636 = s32[] add(%Arg_0.764, %Arg_1.453)
}

%region_10.224._custom_call_lowering_rule.24 (Arg_0.765: s32[], Arg_1.454: s32[]) -> s32[] {
  %Arg_0.765 = s32[] parameter(0)
  ROOT %Arg_1.454 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.24 (Arg_0.766: pred[], Arg_1.455: pred[]) -> pred[] {
  %Arg_0.766 = pred[] parameter(0)
  ROOT %Arg_1.455 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.24 (Arg_0.767: s32[], Arg_1.456: s32[]) -> s32[] {
  %Arg_0.767 = s32[] parameter(0)
  %Arg_1.456 = s32[] parameter(1)
  ROOT %add.637 = s32[] add(%Arg_0.767, %Arg_1.456)
}

%region_11.232._custom_call_lowering_rule.24 (Arg_0.768: s32[], Arg_1.457: s32[]) -> s32[] {
  %Arg_0.768 = s32[] parameter(0)
  ROOT %Arg_1.457 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.25 (Arg_0.769: s32[], Arg_1.458: s32[], Arg_2.120: s32[], Arg_3.56: s32[]) -> pred[] {
  %Arg_2.120 = s32[] parameter(2)
  %Arg_3.56 = s32[] parameter(3)
  %Arg_0.769 = s32[] parameter(0)
  %Arg_1.458 = s32[] parameter(1)
  ROOT %compare.506 = pred[] compare(%Arg_0.769, %Arg_1.458), direction=LT
}

%region_1.74._custom_call_lowering_rule.25 (Arg_0.770: s32[], Arg_1.459: s32[]) -> s32[] {
  %Arg_0.770 = s32[] parameter(0)
  %Arg_1.459 = s32[] parameter(1)
  ROOT %add.638 = s32[] add(%Arg_0.770, %Arg_1.459)
}

%region_5.170._custom_call_lowering_rule.25 (Arg_0.771: s32[], Arg_1.460: s32[]) -> s32[] {
  %Arg_0.771 = s32[] parameter(0)
  ROOT %Arg_1.460 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.25 (Arg_0.772: pred[], Arg_1.461: pred[]) -> pred[] {
  %Arg_0.772 = pred[] parameter(0)
  ROOT %Arg_1.461 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.25 (Arg_0.773: s32[], Arg_1.462: s32[]) -> s32[] {
  %Arg_0.773 = s32[] parameter(0)
  %Arg_1.462 = s32[] parameter(1)
  ROOT %add.639 = s32[] add(%Arg_0.773, %Arg_1.462)
}

%region_4.110._custom_call_lowering_rule.25 (Arg_0.774: s32[], Arg_1.463: s32[]) -> s32[] {
  %Arg_0.774 = s32[] parameter(0)
  %Arg_1.463 = s32[] parameter(1)
  ROOT %add.640 = s32[] add(%Arg_0.774, %Arg_1.463)
}

%region_6.178._custom_call_lowering_rule.25 (Arg_0.775: s32[], Arg_1.464: s32[]) -> s32[] {
  %Arg_0.775 = s32[] parameter(0)
  ROOT %Arg_1.464 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.25 (Arg_0.776: s32[], Arg_1.465: s32[]) -> s32[] {
  %Arg_0.776 = s32[] parameter(0)
  %Arg_1.465 = s32[] parameter(1)
  ROOT %add.641 = s32[] add(%Arg_0.776, %Arg_1.465)
}

%region_10.224._custom_call_lowering_rule.25 (Arg_0.777: s32[], Arg_1.466: s32[]) -> s32[] {
  %Arg_0.777 = s32[] parameter(0)
  ROOT %Arg_1.466 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.25 (Arg_0.778: pred[], Arg_1.467: pred[]) -> pred[] {
  %Arg_0.778 = pred[] parameter(0)
  ROOT %Arg_1.467 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.25 (Arg_0.779: s32[], Arg_1.468: s32[]) -> s32[] {
  %Arg_0.779 = s32[] parameter(0)
  %Arg_1.468 = s32[] parameter(1)
  ROOT %add.642 = s32[] add(%Arg_0.779, %Arg_1.468)
}

%region_11.232._custom_call_lowering_rule.25 (Arg_0.780: s32[], Arg_1.469: s32[]) -> s32[] {
  %Arg_0.780 = s32[] parameter(0)
  ROOT %Arg_1.469 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.26 (Arg_0.781: s32[], Arg_1.470: s32[], Arg_2.121: s32[], Arg_3.57: s32[]) -> pred[] {
  %Arg_2.121 = s32[] parameter(2)
  %Arg_3.57 = s32[] parameter(3)
  %Arg_0.781 = s32[] parameter(0)
  %Arg_1.470 = s32[] parameter(1)
  ROOT %compare.511 = pred[] compare(%Arg_0.781, %Arg_1.470), direction=LT
}

%region_1.74._custom_call_lowering_rule.26 (Arg_0.782: s32[], Arg_1.471: s32[]) -> s32[] {
  %Arg_0.782 = s32[] parameter(0)
  %Arg_1.471 = s32[] parameter(1)
  ROOT %add.643 = s32[] add(%Arg_0.782, %Arg_1.471)
}

%region_5.170._custom_call_lowering_rule.26 (Arg_0.783: s32[], Arg_1.472: s32[]) -> s32[] {
  %Arg_0.783 = s32[] parameter(0)
  ROOT %Arg_1.472 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.26 (Arg_0.784: pred[], Arg_1.473: pred[]) -> pred[] {
  %Arg_0.784 = pred[] parameter(0)
  ROOT %Arg_1.473 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.26 (Arg_0.785: s32[], Arg_1.474: s32[]) -> s32[] {
  %Arg_0.785 = s32[] parameter(0)
  %Arg_1.474 = s32[] parameter(1)
  ROOT %add.644 = s32[] add(%Arg_0.785, %Arg_1.474)
}

%region_4.110._custom_call_lowering_rule.26 (Arg_0.786: s32[], Arg_1.475: s32[]) -> s32[] {
  %Arg_0.786 = s32[] parameter(0)
  %Arg_1.475 = s32[] parameter(1)
  ROOT %add.645 = s32[] add(%Arg_0.786, %Arg_1.475)
}

%region_6.178._custom_call_lowering_rule.26 (Arg_0.787: s32[], Arg_1.476: s32[]) -> s32[] {
  %Arg_0.787 = s32[] parameter(0)
  ROOT %Arg_1.476 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.26 (Arg_0.788: s32[], Arg_1.477: s32[]) -> s32[] {
  %Arg_0.788 = s32[] parameter(0)
  %Arg_1.477 = s32[] parameter(1)
  ROOT %add.646 = s32[] add(%Arg_0.788, %Arg_1.477)
}

%region_10.224._custom_call_lowering_rule.26 (Arg_0.789: s32[], Arg_1.478: s32[]) -> s32[] {
  %Arg_0.789 = s32[] parameter(0)
  ROOT %Arg_1.478 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.26 (Arg_0.790: pred[], Arg_1.479: pred[]) -> pred[] {
  %Arg_0.790 = pred[] parameter(0)
  ROOT %Arg_1.479 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.26 (Arg_0.791: s32[], Arg_1.480: s32[]) -> s32[] {
  %Arg_0.791 = s32[] parameter(0)
  %Arg_1.480 = s32[] parameter(1)
  ROOT %add.647 = s32[] add(%Arg_0.791, %Arg_1.480)
}

%region_11.232._custom_call_lowering_rule.26 (Arg_0.792: s32[], Arg_1.481: s32[]) -> s32[] {
  %Arg_0.792 = s32[] parameter(0)
  ROOT %Arg_1.481 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.27 (Arg_0.793: s32[], Arg_1.482: s32[], Arg_2.122: s32[], Arg_3.58: s32[]) -> pred[] {
  %Arg_2.122 = s32[] parameter(2)
  %Arg_3.58 = s32[] parameter(3)
  %Arg_0.793 = s32[] parameter(0)
  %Arg_1.482 = s32[] parameter(1)
  ROOT %compare.516 = pred[] compare(%Arg_0.793, %Arg_1.482), direction=LT
}

%region_1.74._custom_call_lowering_rule.27 (Arg_0.794: s32[], Arg_1.483: s32[]) -> s32[] {
  %Arg_0.794 = s32[] parameter(0)
  %Arg_1.483 = s32[] parameter(1)
  ROOT %add.648 = s32[] add(%Arg_0.794, %Arg_1.483)
}

%region_5.170._custom_call_lowering_rule.27 (Arg_0.795: s32[], Arg_1.484: s32[]) -> s32[] {
  %Arg_0.795 = s32[] parameter(0)
  ROOT %Arg_1.484 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.27 (Arg_0.796: pred[], Arg_1.485: pred[]) -> pred[] {
  %Arg_0.796 = pred[] parameter(0)
  ROOT %Arg_1.485 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.27 (Arg_0.797: s32[], Arg_1.486: s32[]) -> s32[] {
  %Arg_0.797 = s32[] parameter(0)
  %Arg_1.486 = s32[] parameter(1)
  ROOT %add.649 = s32[] add(%Arg_0.797, %Arg_1.486)
}

%region_4.110._custom_call_lowering_rule.27 (Arg_0.798: s32[], Arg_1.487: s32[]) -> s32[] {
  %Arg_0.798 = s32[] parameter(0)
  %Arg_1.487 = s32[] parameter(1)
  ROOT %add.650 = s32[] add(%Arg_0.798, %Arg_1.487)
}

%region_6.178._custom_call_lowering_rule.27 (Arg_0.799: s32[], Arg_1.488: s32[]) -> s32[] {
  %Arg_0.799 = s32[] parameter(0)
  ROOT %Arg_1.488 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.27 (Arg_0.800: s32[], Arg_1.489: s32[]) -> s32[] {
  %Arg_0.800 = s32[] parameter(0)
  %Arg_1.489 = s32[] parameter(1)
  ROOT %add.651 = s32[] add(%Arg_0.800, %Arg_1.489)
}

%region_10.224._custom_call_lowering_rule.27 (Arg_0.801: s32[], Arg_1.490: s32[]) -> s32[] {
  %Arg_0.801 = s32[] parameter(0)
  ROOT %Arg_1.490 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.27 (Arg_0.802: pred[], Arg_1.491: pred[]) -> pred[] {
  %Arg_0.802 = pred[] parameter(0)
  ROOT %Arg_1.491 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.27 (Arg_0.803: s32[], Arg_1.492: s32[]) -> s32[] {
  %Arg_0.803 = s32[] parameter(0)
  %Arg_1.492 = s32[] parameter(1)
  ROOT %add.652 = s32[] add(%Arg_0.803, %Arg_1.492)
}

%region_11.232._custom_call_lowering_rule.27 (Arg_0.804: s32[], Arg_1.493: s32[]) -> s32[] {
  %Arg_0.804 = s32[] parameter(0)
  ROOT %Arg_1.493 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.28 (Arg_0.805: s32[], Arg_1.494: s32[], Arg_2.123: s32[], Arg_3.60: s32[]) -> pred[] {
  %Arg_2.123 = s32[] parameter(2)
  %Arg_3.60 = s32[] parameter(3)
  %Arg_0.805 = s32[] parameter(0)
  %Arg_1.494 = s32[] parameter(1)
  ROOT %compare.521 = pred[] compare(%Arg_0.805, %Arg_1.494), direction=LT
}

%region_1.74._custom_call_lowering_rule.28 (Arg_0.806: s32[], Arg_1.495: s32[]) -> s32[] {
  %Arg_0.806 = s32[] parameter(0)
  %Arg_1.495 = s32[] parameter(1)
  ROOT %add.653 = s32[] add(%Arg_0.806, %Arg_1.495)
}

%region_5.170._custom_call_lowering_rule.28 (Arg_0.807: s32[], Arg_1.496: s32[]) -> s32[] {
  %Arg_0.807 = s32[] parameter(0)
  ROOT %Arg_1.496 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.28 (Arg_0.808: pred[], Arg_1.497: pred[]) -> pred[] {
  %Arg_0.808 = pred[] parameter(0)
  ROOT %Arg_1.497 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.28 (Arg_0.809: s32[], Arg_1.498: s32[]) -> s32[] {
  %Arg_0.809 = s32[] parameter(0)
  %Arg_1.498 = s32[] parameter(1)
  ROOT %add.654 = s32[] add(%Arg_0.809, %Arg_1.498)
}

%region_4.110._custom_call_lowering_rule.28 (Arg_0.810: s32[], Arg_1.499: s32[]) -> s32[] {
  %Arg_0.810 = s32[] parameter(0)
  %Arg_1.499 = s32[] parameter(1)
  ROOT %add.655 = s32[] add(%Arg_0.810, %Arg_1.499)
}

%region_6.178._custom_call_lowering_rule.28 (Arg_0.811: s32[], Arg_1.500: s32[]) -> s32[] {
  %Arg_0.811 = s32[] parameter(0)
  ROOT %Arg_1.500 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.28 (Arg_0.812: s32[], Arg_1.501: s32[]) -> s32[] {
  %Arg_0.812 = s32[] parameter(0)
  %Arg_1.501 = s32[] parameter(1)
  ROOT %add.656 = s32[] add(%Arg_0.812, %Arg_1.501)
}

%region_10.224._custom_call_lowering_rule.28 (Arg_0.813: s32[], Arg_1.502: s32[]) -> s32[] {
  %Arg_0.813 = s32[] parameter(0)
  ROOT %Arg_1.502 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.28 (Arg_0.814: pred[], Arg_1.503: pred[]) -> pred[] {
  %Arg_0.814 = pred[] parameter(0)
  ROOT %Arg_1.503 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.28 (Arg_0.815: s32[], Arg_1.504: s32[]) -> s32[] {
  %Arg_0.815 = s32[] parameter(0)
  %Arg_1.504 = s32[] parameter(1)
  ROOT %add.657 = s32[] add(%Arg_0.815, %Arg_1.504)
}

%region_11.232._custom_call_lowering_rule.28 (Arg_0.816: s32[], Arg_1.505: s32[]) -> s32[] {
  %Arg_0.816 = s32[] parameter(0)
  ROOT %Arg_1.505 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.29 (Arg_0.817: s32[], Arg_1.506: s32[], Arg_2.124: s32[], Arg_3.61: s32[]) -> pred[] {
  %Arg_2.124 = s32[] parameter(2)
  %Arg_3.61 = s32[] parameter(3)
  %Arg_0.817 = s32[] parameter(0)
  %Arg_1.506 = s32[] parameter(1)
  ROOT %compare.526 = pred[] compare(%Arg_0.817, %Arg_1.506), direction=LT
}

%region_1.74._custom_call_lowering_rule.29 (Arg_0.818: s32[], Arg_1.507: s32[]) -> s32[] {
  %Arg_0.818 = s32[] parameter(0)
  %Arg_1.507 = s32[] parameter(1)
  ROOT %add.658 = s32[] add(%Arg_0.818, %Arg_1.507)
}

%region_5.170._custom_call_lowering_rule.29 (Arg_0.819: s32[], Arg_1.508: s32[]) -> s32[] {
  %Arg_0.819 = s32[] parameter(0)
  ROOT %Arg_1.508 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.29 (Arg_0.820: pred[], Arg_1.509: pred[]) -> pred[] {
  %Arg_0.820 = pred[] parameter(0)
  ROOT %Arg_1.509 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.29 (Arg_0.821: s32[], Arg_1.510: s32[]) -> s32[] {
  %Arg_0.821 = s32[] parameter(0)
  %Arg_1.510 = s32[] parameter(1)
  ROOT %add.659 = s32[] add(%Arg_0.821, %Arg_1.510)
}

%region_4.110._custom_call_lowering_rule.29 (Arg_0.822: s32[], Arg_1.511: s32[]) -> s32[] {
  %Arg_0.822 = s32[] parameter(0)
  %Arg_1.511 = s32[] parameter(1)
  ROOT %add.660 = s32[] add(%Arg_0.822, %Arg_1.511)
}

%region_6.178._custom_call_lowering_rule.29 (Arg_0.823: s32[], Arg_1.512: s32[]) -> s32[] {
  %Arg_0.823 = s32[] parameter(0)
  ROOT %Arg_1.512 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.29 (Arg_0.824: s32[], Arg_1.513: s32[]) -> s32[] {
  %Arg_0.824 = s32[] parameter(0)
  %Arg_1.513 = s32[] parameter(1)
  ROOT %add.661 = s32[] add(%Arg_0.824, %Arg_1.513)
}

%region_10.224._custom_call_lowering_rule.29 (Arg_0.825: s32[], Arg_1.514: s32[]) -> s32[] {
  %Arg_0.825 = s32[] parameter(0)
  ROOT %Arg_1.514 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.29 (Arg_0.826: pred[], Arg_1.515: pred[]) -> pred[] {
  %Arg_0.826 = pred[] parameter(0)
  ROOT %Arg_1.515 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.29 (Arg_0.827: s32[], Arg_1.516: s32[]) -> s32[] {
  %Arg_0.827 = s32[] parameter(0)
  %Arg_1.516 = s32[] parameter(1)
  ROOT %add.662 = s32[] add(%Arg_0.827, %Arg_1.516)
}

%region_11.232._custom_call_lowering_rule.29 (Arg_0.828: s32[], Arg_1.517: s32[]) -> s32[] {
  %Arg_0.828 = s32[] parameter(0)
  ROOT %Arg_1.517 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.30 (Arg_0.829: s32[], Arg_1.518: s32[], Arg_2.125: s32[], Arg_3.62: s32[]) -> pred[] {
  %Arg_2.125 = s32[] parameter(2)
  %Arg_3.62 = s32[] parameter(3)
  %Arg_0.829 = s32[] parameter(0)
  %Arg_1.518 = s32[] parameter(1)
  ROOT %compare.531 = pred[] compare(%Arg_0.829, %Arg_1.518), direction=LT
}

%region_1.74._custom_call_lowering_rule.30 (Arg_0.830: s32[], Arg_1.519: s32[]) -> s32[] {
  %Arg_0.830 = s32[] parameter(0)
  %Arg_1.519 = s32[] parameter(1)
  ROOT %add.663 = s32[] add(%Arg_0.830, %Arg_1.519)
}

%region_5.170._custom_call_lowering_rule.30 (Arg_0.831: s32[], Arg_1.520: s32[]) -> s32[] {
  %Arg_0.831 = s32[] parameter(0)
  ROOT %Arg_1.520 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.30 (Arg_0.832: pred[], Arg_1.521: pred[]) -> pred[] {
  %Arg_0.832 = pred[] parameter(0)
  ROOT %Arg_1.521 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.30 (Arg_0.833: s32[], Arg_1.522: s32[]) -> s32[] {
  %Arg_0.833 = s32[] parameter(0)
  %Arg_1.522 = s32[] parameter(1)
  ROOT %add.664 = s32[] add(%Arg_0.833, %Arg_1.522)
}

%region_4.110._custom_call_lowering_rule.30 (Arg_0.834: s32[], Arg_1.523: s32[]) -> s32[] {
  %Arg_0.834 = s32[] parameter(0)
  %Arg_1.523 = s32[] parameter(1)
  ROOT %add.665 = s32[] add(%Arg_0.834, %Arg_1.523)
}

%region_6.178._custom_call_lowering_rule.30 (Arg_0.835: s32[], Arg_1.524: s32[]) -> s32[] {
  %Arg_0.835 = s32[] parameter(0)
  ROOT %Arg_1.524 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.30 (Arg_0.836: s32[], Arg_1.525: s32[]) -> s32[] {
  %Arg_0.836 = s32[] parameter(0)
  %Arg_1.525 = s32[] parameter(1)
  ROOT %add.666 = s32[] add(%Arg_0.836, %Arg_1.525)
}

%region_10.224._custom_call_lowering_rule.30 (Arg_0.837: s32[], Arg_1.526: s32[]) -> s32[] {
  %Arg_0.837 = s32[] parameter(0)
  ROOT %Arg_1.526 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.30 (Arg_0.838: pred[], Arg_1.527: pred[]) -> pred[] {
  %Arg_0.838 = pred[] parameter(0)
  ROOT %Arg_1.527 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.30 (Arg_0.839: s32[], Arg_1.528: s32[]) -> s32[] {
  %Arg_0.839 = s32[] parameter(0)
  %Arg_1.528 = s32[] parameter(1)
  ROOT %add.667 = s32[] add(%Arg_0.839, %Arg_1.528)
}

%region_11.232._custom_call_lowering_rule.30 (Arg_0.840: s32[], Arg_1.529: s32[]) -> s32[] {
  %Arg_0.840 = s32[] parameter(0)
  ROOT %Arg_1.529 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.31 (Arg_0.841: s32[], Arg_1.530: s32[], Arg_2.126: s32[], Arg_3.63: s32[]) -> pred[] {
  %Arg_2.126 = s32[] parameter(2)
  %Arg_3.63 = s32[] parameter(3)
  %Arg_0.841 = s32[] parameter(0)
  %Arg_1.530 = s32[] parameter(1)
  ROOT %compare.536 = pred[] compare(%Arg_0.841, %Arg_1.530), direction=LT
}

%region_1.74._custom_call_lowering_rule.31 (Arg_0.842: s32[], Arg_1.531: s32[]) -> s32[] {
  %Arg_0.842 = s32[] parameter(0)
  %Arg_1.531 = s32[] parameter(1)
  ROOT %add.668 = s32[] add(%Arg_0.842, %Arg_1.531)
}

%region_5.170._custom_call_lowering_rule.31 (Arg_0.843: s32[], Arg_1.532: s32[]) -> s32[] {
  %Arg_0.843 = s32[] parameter(0)
  ROOT %Arg_1.532 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.31 (Arg_0.844: pred[], Arg_1.533: pred[]) -> pred[] {
  %Arg_0.844 = pred[] parameter(0)
  ROOT %Arg_1.533 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.31 (Arg_0.845: s32[], Arg_1.534: s32[]) -> s32[] {
  %Arg_0.845 = s32[] parameter(0)
  %Arg_1.534 = s32[] parameter(1)
  ROOT %add.669 = s32[] add(%Arg_0.845, %Arg_1.534)
}

%region_4.110._custom_call_lowering_rule.31 (Arg_0.846: s32[], Arg_1.535: s32[]) -> s32[] {
  %Arg_0.846 = s32[] parameter(0)
  %Arg_1.535 = s32[] parameter(1)
  ROOT %add.670 = s32[] add(%Arg_0.846, %Arg_1.535)
}

%region_6.178._custom_call_lowering_rule.31 (Arg_0.847: s32[], Arg_1.536: s32[]) -> s32[] {
  %Arg_0.847 = s32[] parameter(0)
  ROOT %Arg_1.536 = s32[] parameter(1)
}

%region_7.194._custom_call_lowering_rule.31 (Arg_0.848: s32[], Arg_1.537: s32[]) -> s32[] {
  %Arg_0.848 = s32[] parameter(0)
  %Arg_1.537 = s32[] parameter(1)
  ROOT %add.671 = s32[] add(%Arg_0.848, %Arg_1.537)
}

%region_10.224._custom_call_lowering_rule.31 (Arg_0.849: s32[], Arg_1.538: s32[]) -> s32[] {
  %Arg_0.849 = s32[] parameter(0)
  ROOT %Arg_1.538 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.31 (Arg_0.850: pred[], Arg_1.539: pred[]) -> pred[] {
  %Arg_0.850 = pred[] parameter(0)
  ROOT %Arg_1.539 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.31 (Arg_0.851: s32[], Arg_1.540: s32[]) -> s32[] {
  %Arg_0.851 = s32[] parameter(0)
  %Arg_1.540 = s32[] parameter(1)
  ROOT %add.672 = s32[] add(%Arg_0.851, %Arg_1.540)
}

%region_11.232._custom_call_lowering_rule.31 (Arg_0.852: s32[], Arg_1.541: s32[]) -> s32[] {
  %Arg_0.852 = s32[] parameter(0)
  ROOT %Arg_1.541 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.32 (Arg_0.855: s32[], Arg_1.544: s32[], Arg_2.127: s32[], Arg_3.64: s32[]) -> pred[] {
  %Arg_2.127 = s32[] parameter(2)
  %Arg_3.64 = s32[] parameter(3)
  %Arg_0.855 = s32[] parameter(0)
  %Arg_1.544 = s32[] parameter(1)
  ROOT %compare.541 = pred[] compare(%Arg_0.855, %Arg_1.544), direction=LT
}

%region_1.74._custom_call_lowering_rule.32 (Arg_0.856: s32[], Arg_1.545: s32[]) -> s32[] {
  %Arg_0.856 = s32[] parameter(0)
  %Arg_1.545 = s32[] parameter(1)
  ROOT %add.675 = s32[] add(%Arg_0.856, %Arg_1.545)
}

%region_5.170._custom_call_lowering_rule.32 (Arg_0.857: s32[], Arg_1.546: s32[]) -> s32[] {
  %Arg_0.857 = s32[] parameter(0)
  ROOT %Arg_1.546 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.32 (Arg_0.858: pred[], Arg_1.547: pred[]) -> pred[] {
  %Arg_0.858 = pred[] parameter(0)
  ROOT %Arg_1.547 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.32 (Arg_0.859: s32[], Arg_1.548: s32[]) -> s32[] {
  %Arg_0.859 = s32[] parameter(0)
  %Arg_1.548 = s32[] parameter(1)
  ROOT %add.676 = s32[] add(%Arg_0.859, %Arg_1.548)
}

%region_4.110._custom_call_lowering_rule.32 (Arg_0.860: s32[], Arg_1.549: s32[]) -> s32[] {
  %Arg_0.860 = s32[] parameter(0)
  %Arg_1.549 = s32[] parameter(1)
  ROOT %add.677 = s32[] add(%Arg_0.860, %Arg_1.549)
}

%region_7.194._custom_call_lowering_rule.32 (Arg_0.862: s32[], Arg_1.551: s32[]) -> s32[] {
  %Arg_0.862 = s32[] parameter(0)
  %Arg_1.551 = s32[] parameter(1)
  ROOT %add.678 = s32[] add(%Arg_0.862, %Arg_1.551)
}

%region_10.224._custom_call_lowering_rule.32 (Arg_0.863: s32[], Arg_1.552: s32[]) -> s32[] {
  %Arg_0.863 = s32[] parameter(0)
  ROOT %Arg_1.552 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.32 (Arg_0.864: pred[], Arg_1.553: pred[]) -> pred[] {
  %Arg_0.864 = pred[] parameter(0)
  ROOT %Arg_1.553 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.32 (Arg_0.865: s32[], Arg_1.554: s32[]) -> s32[] {
  %Arg_0.865 = s32[] parameter(0)
  %Arg_1.554 = s32[] parameter(1)
  ROOT %add.679 = s32[] add(%Arg_0.865, %Arg_1.554)
}

%region_0.64._custom_call_lowering_rule (Arg_0.867: s32[], Arg_1.556: s32[], Arg_2.128: s32[], Arg_3.65: s32[]) -> pred[] {
  %Arg_2.128 = s32[] parameter(2)
  %Arg_3.65 = s32[] parameter(3)
  %Arg_0.867 = s32[] parameter(0)
  %Arg_1.556 = s32[] parameter(1)
  ROOT %compare.546 = pred[] compare(%Arg_0.867, %Arg_1.556), direction=LT
}

%region_1.77._custom_call_lowering_rule (Arg_0.868: s32[], Arg_1.557: s32[]) -> s32[] {
  %Arg_0.868 = s32[] parameter(0)
  %Arg_1.557 = s32[] parameter(1)
  ROOT %add.680 = s32[] add(%Arg_0.868, %Arg_1.557)
}

%region_5.173._custom_call_lowering_rule (Arg_0.869: s32[], Arg_1.558: s32[]) -> s32[] {
  %Arg_0.869 = s32[] parameter(0)
  ROOT %Arg_1.558 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule (Arg_0.870: pred[], Arg_1.559: pred[]) -> pred[] {
  %Arg_0.870 = pred[] parameter(0)
  ROOT %Arg_1.559 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule (Arg_0.871: s32[], Arg_1.560: s32[]) -> s32[] {
  %Arg_0.871 = s32[] parameter(0)
  %Arg_1.560 = s32[] parameter(1)
  ROOT %add.681 = s32[] add(%Arg_0.871, %Arg_1.560)
}

%region_4.113._custom_call_lowering_rule (Arg_0.872: s32[], Arg_1.561: s32[]) -> s32[] {
  %Arg_0.872 = s32[] parameter(0)
  %Arg_1.561 = s32[] parameter(1)
  ROOT %add.682 = s32[] add(%Arg_0.872, %Arg_1.561)
}

%region_6.181._custom_call_lowering_rule (Arg_0.873: s32[], Arg_1.562: s32[]) -> s32[] {
  %Arg_0.873 = s32[] parameter(0)
  ROOT %Arg_1.562 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule (Arg_0.874: s32[], Arg_1.563: s32[]) -> s32[] {
  %Arg_0.874 = s32[] parameter(0)
  %Arg_1.563 = s32[] parameter(1)
  ROOT %add.683 = s32[] add(%Arg_0.874, %Arg_1.563)
}

%region_10.227._custom_call_lowering_rule (Arg_0.875: s32[], Arg_1.564: s32[]) -> s32[] {
  %Arg_0.875 = s32[] parameter(0)
  ROOT %Arg_1.564 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule (Arg_0.876: pred[], Arg_1.565: pred[]) -> pred[] {
  %Arg_0.876 = pred[] parameter(0)
  ROOT %Arg_1.565 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule (Arg_0.877: s32[], Arg_1.566: s32[]) -> s32[] {
  %Arg_0.877 = s32[] parameter(0)
  %Arg_1.566 = s32[] parameter(1)
  ROOT %add.684 = s32[] add(%Arg_0.877, %Arg_1.566)
}

%region_11.235._custom_call_lowering_rule (Arg_0.878: s32[], Arg_1.567: s32[]) -> s32[] {
  %Arg_0.878 = s32[] parameter(0)
  ROOT %Arg_1.567 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.33 (Arg_0.879: s32[], Arg_1.568: s32[], Arg_2.129: s32[], Arg_3.66: s32[]) -> pred[] {
  %Arg_2.129 = s32[] parameter(2)
  %Arg_3.66 = s32[] parameter(3)
  %Arg_0.879 = s32[] parameter(0)
  %Arg_1.568 = s32[] parameter(1)
  ROOT %compare.547 = pred[] compare(%Arg_0.879, %Arg_1.568), direction=LT
}

%region_1.74._custom_call_lowering_rule.33 (Arg_0.880: s32[], Arg_1.569: s32[]) -> s32[] {
  %Arg_0.880 = s32[] parameter(0)
  %Arg_1.569 = s32[] parameter(1)
  ROOT %add.685 = s32[] add(%Arg_0.880, %Arg_1.569)
}

%region_5.170._custom_call_lowering_rule.33 (Arg_0.881: s32[], Arg_1.570: s32[]) -> s32[] {
  %Arg_0.881 = s32[] parameter(0)
  ROOT %Arg_1.570 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.33 (Arg_0.882: pred[], Arg_1.571: pred[]) -> pred[] {
  %Arg_0.882 = pred[] parameter(0)
  ROOT %Arg_1.571 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.33 (Arg_0.883: s32[], Arg_1.572: s32[]) -> s32[] {
  %Arg_0.883 = s32[] parameter(0)
  %Arg_1.572 = s32[] parameter(1)
  ROOT %add.686 = s32[] add(%Arg_0.883, %Arg_1.572)
}

%region_4.110._custom_call_lowering_rule.33 (Arg_0.884: s32[], Arg_1.573: s32[]) -> s32[] {
  %Arg_0.884 = s32[] parameter(0)
  %Arg_1.573 = s32[] parameter(1)
  ROOT %add.687 = s32[] add(%Arg_0.884, %Arg_1.573)
}

%region_7.194._custom_call_lowering_rule.33 (Arg_0.886: s32[], Arg_1.575: s32[]) -> s32[] {
  %Arg_0.886 = s32[] parameter(0)
  %Arg_1.575 = s32[] parameter(1)
  ROOT %add.688 = s32[] add(%Arg_0.886, %Arg_1.575)
}

%region_10.224._custom_call_lowering_rule.33 (Arg_0.887: s32[], Arg_1.576: s32[]) -> s32[] {
  %Arg_0.887 = s32[] parameter(0)
  ROOT %Arg_1.576 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.33 (Arg_0.888: pred[], Arg_1.577: pred[]) -> pred[] {
  %Arg_0.888 = pred[] parameter(0)
  ROOT %Arg_1.577 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.33 (Arg_0.889: s32[], Arg_1.578: s32[]) -> s32[] {
  %Arg_0.889 = s32[] parameter(0)
  %Arg_1.578 = s32[] parameter(1)
  ROOT %add.689 = s32[] add(%Arg_0.889, %Arg_1.578)
}

%region_0.64._custom_call_lowering_rule.1 (Arg_0.891: s32[], Arg_1.580: s32[], Arg_2.130: s32[], Arg_3.67: s32[]) -> pred[] {
  %Arg_2.130 = s32[] parameter(2)
  %Arg_3.67 = s32[] parameter(3)
  %Arg_0.891 = s32[] parameter(0)
  %Arg_1.580 = s32[] parameter(1)
  ROOT %compare.552 = pred[] compare(%Arg_0.891, %Arg_1.580), direction=LT
}

%region_1.77._custom_call_lowering_rule.1 (Arg_0.892: s32[], Arg_1.581: s32[]) -> s32[] {
  %Arg_0.892 = s32[] parameter(0)
  %Arg_1.581 = s32[] parameter(1)
  ROOT %add.690 = s32[] add(%Arg_0.892, %Arg_1.581)
}

%region_5.173._custom_call_lowering_rule.1 (Arg_0.893: s32[], Arg_1.582: s32[]) -> s32[] {
  %Arg_0.893 = s32[] parameter(0)
  ROOT %Arg_1.582 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.1 (Arg_0.894: pred[], Arg_1.583: pred[]) -> pred[] {
  %Arg_0.894 = pred[] parameter(0)
  ROOT %Arg_1.583 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.1 (Arg_0.895: s32[], Arg_1.584: s32[]) -> s32[] {
  %Arg_0.895 = s32[] parameter(0)
  %Arg_1.584 = s32[] parameter(1)
  ROOT %add.691 = s32[] add(%Arg_0.895, %Arg_1.584)
}

%region_4.113._custom_call_lowering_rule.1 (Arg_0.896: s32[], Arg_1.585: s32[]) -> s32[] {
  %Arg_0.896 = s32[] parameter(0)
  %Arg_1.585 = s32[] parameter(1)
  ROOT %add.692 = s32[] add(%Arg_0.896, %Arg_1.585)
}

%region_6.181._custom_call_lowering_rule.1 (Arg_0.897: s32[], Arg_1.586: s32[]) -> s32[] {
  %Arg_0.897 = s32[] parameter(0)
  ROOT %Arg_1.586 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.1 (Arg_0.898: s32[], Arg_1.587: s32[]) -> s32[] {
  %Arg_0.898 = s32[] parameter(0)
  %Arg_1.587 = s32[] parameter(1)
  ROOT %add.693 = s32[] add(%Arg_0.898, %Arg_1.587)
}

%region_10.227._custom_call_lowering_rule.1 (Arg_0.899: s32[], Arg_1.588: s32[]) -> s32[] {
  %Arg_0.899 = s32[] parameter(0)
  ROOT %Arg_1.588 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.1 (Arg_0.900: pred[], Arg_1.589: pred[]) -> pred[] {
  %Arg_0.900 = pred[] parameter(0)
  ROOT %Arg_1.589 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.1 (Arg_0.901: s32[], Arg_1.590: s32[]) -> s32[] {
  %Arg_0.901 = s32[] parameter(0)
  %Arg_1.590 = s32[] parameter(1)
  ROOT %add.694 = s32[] add(%Arg_0.901, %Arg_1.590)
}

%region_11.235._custom_call_lowering_rule.1 (Arg_0.902: s32[], Arg_1.591: s32[]) -> s32[] {
  %Arg_0.902 = s32[] parameter(0)
  ROOT %Arg_1.591 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.34 (Arg_0.903: s32[], Arg_1.592: s32[], Arg_2.131: s32[], Arg_3.68: s32[]) -> pred[] {
  %Arg_2.131 = s32[] parameter(2)
  %Arg_3.68 = s32[] parameter(3)
  %Arg_0.903 = s32[] parameter(0)
  %Arg_1.592 = s32[] parameter(1)
  ROOT %compare.553 = pred[] compare(%Arg_0.903, %Arg_1.592), direction=LT
}

%region_1.74._custom_call_lowering_rule.34 (Arg_0.904: s32[], Arg_1.593: s32[]) -> s32[] {
  %Arg_0.904 = s32[] parameter(0)
  %Arg_1.593 = s32[] parameter(1)
  ROOT %add.695 = s32[] add(%Arg_0.904, %Arg_1.593)
}

%region_5.170._custom_call_lowering_rule.34 (Arg_0.905: s32[], Arg_1.594: s32[]) -> s32[] {
  %Arg_0.905 = s32[] parameter(0)
  ROOT %Arg_1.594 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.34 (Arg_0.906: pred[], Arg_1.595: pred[]) -> pred[] {
  %Arg_0.906 = pred[] parameter(0)
  ROOT %Arg_1.595 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.34 (Arg_0.907: s32[], Arg_1.596: s32[]) -> s32[] {
  %Arg_0.907 = s32[] parameter(0)
  %Arg_1.596 = s32[] parameter(1)
  ROOT %add.696 = s32[] add(%Arg_0.907, %Arg_1.596)
}

%region_4.110._custom_call_lowering_rule.34 (Arg_0.908: s32[], Arg_1.597: s32[]) -> s32[] {
  %Arg_0.908 = s32[] parameter(0)
  %Arg_1.597 = s32[] parameter(1)
  ROOT %add.697 = s32[] add(%Arg_0.908, %Arg_1.597)
}

%region_7.194._custom_call_lowering_rule.34 (Arg_0.910: s32[], Arg_1.599: s32[]) -> s32[] {
  %Arg_0.910 = s32[] parameter(0)
  %Arg_1.599 = s32[] parameter(1)
  ROOT %add.698 = s32[] add(%Arg_0.910, %Arg_1.599)
}

%region_10.224._custom_call_lowering_rule.34 (Arg_0.911: s32[], Arg_1.600: s32[]) -> s32[] {
  %Arg_0.911 = s32[] parameter(0)
  ROOT %Arg_1.600 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.34 (Arg_0.912: pred[], Arg_1.601: pred[]) -> pred[] {
  %Arg_0.912 = pred[] parameter(0)
  ROOT %Arg_1.601 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.34 (Arg_0.913: s32[], Arg_1.602: s32[]) -> s32[] {
  %Arg_0.913 = s32[] parameter(0)
  %Arg_1.602 = s32[] parameter(1)
  ROOT %add.699 = s32[] add(%Arg_0.913, %Arg_1.602)
}

%region_0.64._custom_call_lowering_rule.2 (Arg_0.915: s32[], Arg_1.604: s32[], Arg_2.132: s32[], Arg_3.69: s32[]) -> pred[] {
  %Arg_2.132 = s32[] parameter(2)
  %Arg_3.69 = s32[] parameter(3)
  %Arg_0.915 = s32[] parameter(0)
  %Arg_1.604 = s32[] parameter(1)
  ROOT %compare.558 = pred[] compare(%Arg_0.915, %Arg_1.604), direction=LT
}

%region_1.77._custom_call_lowering_rule.2 (Arg_0.916: s32[], Arg_1.605: s32[]) -> s32[] {
  %Arg_0.916 = s32[] parameter(0)
  %Arg_1.605 = s32[] parameter(1)
  ROOT %add.700 = s32[] add(%Arg_0.916, %Arg_1.605)
}

%region_5.173._custom_call_lowering_rule.2 (Arg_0.917: s32[], Arg_1.606: s32[]) -> s32[] {
  %Arg_0.917 = s32[] parameter(0)
  ROOT %Arg_1.606 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.2 (Arg_0.918: pred[], Arg_1.607: pred[]) -> pred[] {
  %Arg_0.918 = pred[] parameter(0)
  ROOT %Arg_1.607 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.2 (Arg_0.919: s32[], Arg_1.608: s32[]) -> s32[] {
  %Arg_0.919 = s32[] parameter(0)
  %Arg_1.608 = s32[] parameter(1)
  ROOT %add.701 = s32[] add(%Arg_0.919, %Arg_1.608)
}

%region_4.113._custom_call_lowering_rule.2 (Arg_0.920: s32[], Arg_1.609: s32[]) -> s32[] {
  %Arg_0.920 = s32[] parameter(0)
  %Arg_1.609 = s32[] parameter(1)
  ROOT %add.702 = s32[] add(%Arg_0.920, %Arg_1.609)
}

%region_6.181._custom_call_lowering_rule.2 (Arg_0.921: s32[], Arg_1.610: s32[]) -> s32[] {
  %Arg_0.921 = s32[] parameter(0)
  ROOT %Arg_1.610 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.2 (Arg_0.922: s32[], Arg_1.611: s32[]) -> s32[] {
  %Arg_0.922 = s32[] parameter(0)
  %Arg_1.611 = s32[] parameter(1)
  ROOT %add.703 = s32[] add(%Arg_0.922, %Arg_1.611)
}

%region_10.227._custom_call_lowering_rule.2 (Arg_0.923: s32[], Arg_1.612: s32[]) -> s32[] {
  %Arg_0.923 = s32[] parameter(0)
  ROOT %Arg_1.612 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.2 (Arg_0.924: pred[], Arg_1.613: pred[]) -> pred[] {
  %Arg_0.924 = pred[] parameter(0)
  ROOT %Arg_1.613 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.2 (Arg_0.925: s32[], Arg_1.614: s32[]) -> s32[] {
  %Arg_0.925 = s32[] parameter(0)
  %Arg_1.614 = s32[] parameter(1)
  ROOT %add.704 = s32[] add(%Arg_0.925, %Arg_1.614)
}

%region_11.235._custom_call_lowering_rule.2 (Arg_0.926: s32[], Arg_1.615: s32[]) -> s32[] {
  %Arg_0.926 = s32[] parameter(0)
  ROOT %Arg_1.615 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.35 (Arg_0.927: s32[], Arg_1.616: s32[], Arg_2.133: s32[], Arg_3.70: s32[]) -> pred[] {
  %Arg_2.133 = s32[] parameter(2)
  %Arg_3.70 = s32[] parameter(3)
  %Arg_0.927 = s32[] parameter(0)
  %Arg_1.616 = s32[] parameter(1)
  ROOT %compare.559 = pred[] compare(%Arg_0.927, %Arg_1.616), direction=LT
}

%region_1.74._custom_call_lowering_rule.35 (Arg_0.928: s32[], Arg_1.617: s32[]) -> s32[] {
  %Arg_0.928 = s32[] parameter(0)
  %Arg_1.617 = s32[] parameter(1)
  ROOT %add.705 = s32[] add(%Arg_0.928, %Arg_1.617)
}

%region_5.170._custom_call_lowering_rule.35 (Arg_0.929: s32[], Arg_1.618: s32[]) -> s32[] {
  %Arg_0.929 = s32[] parameter(0)
  ROOT %Arg_1.618 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.35 (Arg_0.930: pred[], Arg_1.619: pred[]) -> pred[] {
  %Arg_0.930 = pred[] parameter(0)
  ROOT %Arg_1.619 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.35 (Arg_0.931: s32[], Arg_1.620: s32[]) -> s32[] {
  %Arg_0.931 = s32[] parameter(0)
  %Arg_1.620 = s32[] parameter(1)
  ROOT %add.706 = s32[] add(%Arg_0.931, %Arg_1.620)
}

%region_4.110._custom_call_lowering_rule.35 (Arg_0.932: s32[], Arg_1.621: s32[]) -> s32[] {
  %Arg_0.932 = s32[] parameter(0)
  %Arg_1.621 = s32[] parameter(1)
  ROOT %add.707 = s32[] add(%Arg_0.932, %Arg_1.621)
}

%region_7.194._custom_call_lowering_rule.35 (Arg_0.934: s32[], Arg_1.623: s32[]) -> s32[] {
  %Arg_0.934 = s32[] parameter(0)
  %Arg_1.623 = s32[] parameter(1)
  ROOT %add.708 = s32[] add(%Arg_0.934, %Arg_1.623)
}

%region_10.224._custom_call_lowering_rule.35 (Arg_0.935: s32[], Arg_1.624: s32[]) -> s32[] {
  %Arg_0.935 = s32[] parameter(0)
  ROOT %Arg_1.624 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.35 (Arg_0.936: pred[], Arg_1.625: pred[]) -> pred[] {
  %Arg_0.936 = pred[] parameter(0)
  ROOT %Arg_1.625 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.35 (Arg_0.937: s32[], Arg_1.626: s32[]) -> s32[] {
  %Arg_0.937 = s32[] parameter(0)
  %Arg_1.626 = s32[] parameter(1)
  ROOT %add.709 = s32[] add(%Arg_0.937, %Arg_1.626)
}

%region_0.64._custom_call_lowering_rule.3 (Arg_0.939: s32[], Arg_1.628: s32[], Arg_2.134: s32[], Arg_3.71: s32[]) -> pred[] {
  %Arg_2.134 = s32[] parameter(2)
  %Arg_3.71 = s32[] parameter(3)
  %Arg_0.939 = s32[] parameter(0)
  %Arg_1.628 = s32[] parameter(1)
  ROOT %compare.564 = pred[] compare(%Arg_0.939, %Arg_1.628), direction=LT
}

%region_1.77._custom_call_lowering_rule.3 (Arg_0.940: s32[], Arg_1.629: s32[]) -> s32[] {
  %Arg_0.940 = s32[] parameter(0)
  %Arg_1.629 = s32[] parameter(1)
  ROOT %add.710 = s32[] add(%Arg_0.940, %Arg_1.629)
}

%region_5.173._custom_call_lowering_rule.3 (Arg_0.941: s32[], Arg_1.630: s32[]) -> s32[] {
  %Arg_0.941 = s32[] parameter(0)
  ROOT %Arg_1.630 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.3 (Arg_0.942: pred[], Arg_1.631: pred[]) -> pred[] {
  %Arg_0.942 = pred[] parameter(0)
  ROOT %Arg_1.631 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.3 (Arg_0.943: s32[], Arg_1.632: s32[]) -> s32[] {
  %Arg_0.943 = s32[] parameter(0)
  %Arg_1.632 = s32[] parameter(1)
  ROOT %add.711 = s32[] add(%Arg_0.943, %Arg_1.632)
}

%region_4.113._custom_call_lowering_rule.3 (Arg_0.944: s32[], Arg_1.633: s32[]) -> s32[] {
  %Arg_0.944 = s32[] parameter(0)
  %Arg_1.633 = s32[] parameter(1)
  ROOT %add.712 = s32[] add(%Arg_0.944, %Arg_1.633)
}

%region_6.181._custom_call_lowering_rule.3 (Arg_0.945: s32[], Arg_1.634: s32[]) -> s32[] {
  %Arg_0.945 = s32[] parameter(0)
  ROOT %Arg_1.634 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.3 (Arg_0.946: s32[], Arg_1.635: s32[]) -> s32[] {
  %Arg_0.946 = s32[] parameter(0)
  %Arg_1.635 = s32[] parameter(1)
  ROOT %add.713 = s32[] add(%Arg_0.946, %Arg_1.635)
}

%region_10.227._custom_call_lowering_rule.3 (Arg_0.947: s32[], Arg_1.636: s32[]) -> s32[] {
  %Arg_0.947 = s32[] parameter(0)
  ROOT %Arg_1.636 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.3 (Arg_0.948: pred[], Arg_1.637: pred[]) -> pred[] {
  %Arg_0.948 = pred[] parameter(0)
  ROOT %Arg_1.637 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.3 (Arg_0.949: s32[], Arg_1.638: s32[]) -> s32[] {
  %Arg_0.949 = s32[] parameter(0)
  %Arg_1.638 = s32[] parameter(1)
  ROOT %add.714 = s32[] add(%Arg_0.949, %Arg_1.638)
}

%region_11.235._custom_call_lowering_rule.3 (Arg_0.950: s32[], Arg_1.639: s32[]) -> s32[] {
  %Arg_0.950 = s32[] parameter(0)
  ROOT %Arg_1.639 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.36 (Arg_0.951: s32[], Arg_1.640: s32[], Arg_2.135: s32[], Arg_3.72: s32[]) -> pred[] {
  %Arg_2.135 = s32[] parameter(2)
  %Arg_3.72 = s32[] parameter(3)
  %Arg_0.951 = s32[] parameter(0)
  %Arg_1.640 = s32[] parameter(1)
  ROOT %compare.565 = pred[] compare(%Arg_0.951, %Arg_1.640), direction=LT
}

%region_1.74._custom_call_lowering_rule.36 (Arg_0.952: s32[], Arg_1.641: s32[]) -> s32[] {
  %Arg_0.952 = s32[] parameter(0)
  %Arg_1.641 = s32[] parameter(1)
  ROOT %add.715 = s32[] add(%Arg_0.952, %Arg_1.641)
}

%region_5.170._custom_call_lowering_rule.36 (Arg_0.953: s32[], Arg_1.642: s32[]) -> s32[] {
  %Arg_0.953 = s32[] parameter(0)
  ROOT %Arg_1.642 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.36 (Arg_0.954: pred[], Arg_1.643: pred[]) -> pred[] {
  %Arg_0.954 = pred[] parameter(0)
  ROOT %Arg_1.643 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.36 (Arg_0.955: s32[], Arg_1.644: s32[]) -> s32[] {
  %Arg_0.955 = s32[] parameter(0)
  %Arg_1.644 = s32[] parameter(1)
  ROOT %add.716 = s32[] add(%Arg_0.955, %Arg_1.644)
}

%region_4.110._custom_call_lowering_rule.36 (Arg_0.956: s32[], Arg_1.645: s32[]) -> s32[] {
  %Arg_0.956 = s32[] parameter(0)
  %Arg_1.645 = s32[] parameter(1)
  ROOT %add.717 = s32[] add(%Arg_0.956, %Arg_1.645)
}

%region_7.194._custom_call_lowering_rule.36 (Arg_0.958: s32[], Arg_1.647: s32[]) -> s32[] {
  %Arg_0.958 = s32[] parameter(0)
  %Arg_1.647 = s32[] parameter(1)
  ROOT %add.718 = s32[] add(%Arg_0.958, %Arg_1.647)
}

%region_10.224._custom_call_lowering_rule.36 (Arg_0.959: s32[], Arg_1.648: s32[]) -> s32[] {
  %Arg_0.959 = s32[] parameter(0)
  ROOT %Arg_1.648 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.36 (Arg_0.960: pred[], Arg_1.649: pred[]) -> pred[] {
  %Arg_0.960 = pred[] parameter(0)
  ROOT %Arg_1.649 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.36 (Arg_0.961: s32[], Arg_1.650: s32[]) -> s32[] {
  %Arg_0.961 = s32[] parameter(0)
  %Arg_1.650 = s32[] parameter(1)
  ROOT %add.719 = s32[] add(%Arg_0.961, %Arg_1.650)
}

%region_0.64._custom_call_lowering_rule.4 (Arg_0.963: s32[], Arg_1.652: s32[], Arg_2.136: s32[], Arg_3.73: s32[]) -> pred[] {
  %Arg_2.136 = s32[] parameter(2)
  %Arg_3.73 = s32[] parameter(3)
  %Arg_0.963 = s32[] parameter(0)
  %Arg_1.652 = s32[] parameter(1)
  ROOT %compare.570 = pred[] compare(%Arg_0.963, %Arg_1.652), direction=LT
}

%region_1.77._custom_call_lowering_rule.4 (Arg_0.964: s32[], Arg_1.653: s32[]) -> s32[] {
  %Arg_0.964 = s32[] parameter(0)
  %Arg_1.653 = s32[] parameter(1)
  ROOT %add.720 = s32[] add(%Arg_0.964, %Arg_1.653)
}

%region_5.173._custom_call_lowering_rule.4 (Arg_0.965: s32[], Arg_1.654: s32[]) -> s32[] {
  %Arg_0.965 = s32[] parameter(0)
  ROOT %Arg_1.654 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.4 (Arg_0.966: pred[], Arg_1.655: pred[]) -> pred[] {
  %Arg_0.966 = pred[] parameter(0)
  ROOT %Arg_1.655 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.4 (Arg_0.967: s32[], Arg_1.656: s32[]) -> s32[] {
  %Arg_0.967 = s32[] parameter(0)
  %Arg_1.656 = s32[] parameter(1)
  ROOT %add.721 = s32[] add(%Arg_0.967, %Arg_1.656)
}

%region_4.113._custom_call_lowering_rule.4 (Arg_0.968: s32[], Arg_1.657: s32[]) -> s32[] {
  %Arg_0.968 = s32[] parameter(0)
  %Arg_1.657 = s32[] parameter(1)
  ROOT %add.722 = s32[] add(%Arg_0.968, %Arg_1.657)
}

%region_6.181._custom_call_lowering_rule.4 (Arg_0.969: s32[], Arg_1.658: s32[]) -> s32[] {
  %Arg_0.969 = s32[] parameter(0)
  ROOT %Arg_1.658 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.4 (Arg_0.970: s32[], Arg_1.659: s32[]) -> s32[] {
  %Arg_0.970 = s32[] parameter(0)
  %Arg_1.659 = s32[] parameter(1)
  ROOT %add.723 = s32[] add(%Arg_0.970, %Arg_1.659)
}

%region_10.227._custom_call_lowering_rule.4 (Arg_0.971: s32[], Arg_1.660: s32[]) -> s32[] {
  %Arg_0.971 = s32[] parameter(0)
  ROOT %Arg_1.660 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.4 (Arg_0.972: pred[], Arg_1.661: pred[]) -> pred[] {
  %Arg_0.972 = pred[] parameter(0)
  ROOT %Arg_1.661 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.4 (Arg_0.973: s32[], Arg_1.662: s32[]) -> s32[] {
  %Arg_0.973 = s32[] parameter(0)
  %Arg_1.662 = s32[] parameter(1)
  ROOT %add.724 = s32[] add(%Arg_0.973, %Arg_1.662)
}

%region_11.235._custom_call_lowering_rule.4 (Arg_0.974: s32[], Arg_1.663: s32[]) -> s32[] {
  %Arg_0.974 = s32[] parameter(0)
  ROOT %Arg_1.663 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.37 (Arg_0.975: s32[], Arg_1.664: s32[], Arg_2.137: s32[], Arg_3.74: s32[]) -> pred[] {
  %Arg_2.137 = s32[] parameter(2)
  %Arg_3.74 = s32[] parameter(3)
  %Arg_0.975 = s32[] parameter(0)
  %Arg_1.664 = s32[] parameter(1)
  ROOT %compare.571 = pred[] compare(%Arg_0.975, %Arg_1.664), direction=LT
}

%region_1.74._custom_call_lowering_rule.37 (Arg_0.976: s32[], Arg_1.665: s32[]) -> s32[] {
  %Arg_0.976 = s32[] parameter(0)
  %Arg_1.665 = s32[] parameter(1)
  ROOT %add.725 = s32[] add(%Arg_0.976, %Arg_1.665)
}

%region_5.170._custom_call_lowering_rule.37 (Arg_0.977: s32[], Arg_1.666: s32[]) -> s32[] {
  %Arg_0.977 = s32[] parameter(0)
  ROOT %Arg_1.666 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.37 (Arg_0.978: pred[], Arg_1.667: pred[]) -> pred[] {
  %Arg_0.978 = pred[] parameter(0)
  ROOT %Arg_1.667 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.37 (Arg_0.979: s32[], Arg_1.668: s32[]) -> s32[] {
  %Arg_0.979 = s32[] parameter(0)
  %Arg_1.668 = s32[] parameter(1)
  ROOT %add.726 = s32[] add(%Arg_0.979, %Arg_1.668)
}

%region_4.110._custom_call_lowering_rule.37 (Arg_0.980: s32[], Arg_1.669: s32[]) -> s32[] {
  %Arg_0.980 = s32[] parameter(0)
  %Arg_1.669 = s32[] parameter(1)
  ROOT %add.727 = s32[] add(%Arg_0.980, %Arg_1.669)
}

%region_7.194._custom_call_lowering_rule.37 (Arg_0.982: s32[], Arg_1.671: s32[]) -> s32[] {
  %Arg_0.982 = s32[] parameter(0)
  %Arg_1.671 = s32[] parameter(1)
  ROOT %add.728 = s32[] add(%Arg_0.982, %Arg_1.671)
}

%region_10.224._custom_call_lowering_rule.37 (Arg_0.983: s32[], Arg_1.672: s32[]) -> s32[] {
  %Arg_0.983 = s32[] parameter(0)
  ROOT %Arg_1.672 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.37 (Arg_0.984: pred[], Arg_1.673: pred[]) -> pred[] {
  %Arg_0.984 = pred[] parameter(0)
  ROOT %Arg_1.673 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.37 (Arg_0.985: s32[], Arg_1.674: s32[]) -> s32[] {
  %Arg_0.985 = s32[] parameter(0)
  %Arg_1.674 = s32[] parameter(1)
  ROOT %add.729 = s32[] add(%Arg_0.985, %Arg_1.674)
}

%region_0.64._custom_call_lowering_rule.5 (Arg_0.987: s32[], Arg_1.676: s32[], Arg_2.138: s32[], Arg_3.75: s32[]) -> pred[] {
  %Arg_2.138 = s32[] parameter(2)
  %Arg_3.75 = s32[] parameter(3)
  %Arg_0.987 = s32[] parameter(0)
  %Arg_1.676 = s32[] parameter(1)
  ROOT %compare.576 = pred[] compare(%Arg_0.987, %Arg_1.676), direction=LT
}

%region_1.77._custom_call_lowering_rule.5 (Arg_0.988: s32[], Arg_1.677: s32[]) -> s32[] {
  %Arg_0.988 = s32[] parameter(0)
  %Arg_1.677 = s32[] parameter(1)
  ROOT %add.730 = s32[] add(%Arg_0.988, %Arg_1.677)
}

%region_5.173._custom_call_lowering_rule.5 (Arg_0.989: s32[], Arg_1.678: s32[]) -> s32[] {
  %Arg_0.989 = s32[] parameter(0)
  ROOT %Arg_1.678 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.5 (Arg_0.990: pred[], Arg_1.679: pred[]) -> pred[] {
  %Arg_0.990 = pred[] parameter(0)
  ROOT %Arg_1.679 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.5 (Arg_0.991: s32[], Arg_1.680: s32[]) -> s32[] {
  %Arg_0.991 = s32[] parameter(0)
  %Arg_1.680 = s32[] parameter(1)
  ROOT %add.731 = s32[] add(%Arg_0.991, %Arg_1.680)
}

%region_4.113._custom_call_lowering_rule.5 (Arg_0.992: s32[], Arg_1.681: s32[]) -> s32[] {
  %Arg_0.992 = s32[] parameter(0)
  %Arg_1.681 = s32[] parameter(1)
  ROOT %add.732 = s32[] add(%Arg_0.992, %Arg_1.681)
}

%region_6.181._custom_call_lowering_rule.5 (Arg_0.993: s32[], Arg_1.682: s32[]) -> s32[] {
  %Arg_0.993 = s32[] parameter(0)
  ROOT %Arg_1.682 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.5 (Arg_0.994: s32[], Arg_1.683: s32[]) -> s32[] {
  %Arg_0.994 = s32[] parameter(0)
  %Arg_1.683 = s32[] parameter(1)
  ROOT %add.733 = s32[] add(%Arg_0.994, %Arg_1.683)
}

%region_10.227._custom_call_lowering_rule.5 (Arg_0.995: s32[], Arg_1.684: s32[]) -> s32[] {
  %Arg_0.995 = s32[] parameter(0)
  ROOT %Arg_1.684 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.5 (Arg_0.996: pred[], Arg_1.685: pred[]) -> pred[] {
  %Arg_0.996 = pred[] parameter(0)
  ROOT %Arg_1.685 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.5 (Arg_0.997: s32[], Arg_1.686: s32[]) -> s32[] {
  %Arg_0.997 = s32[] parameter(0)
  %Arg_1.686 = s32[] parameter(1)
  ROOT %add.734 = s32[] add(%Arg_0.997, %Arg_1.686)
}

%region_11.235._custom_call_lowering_rule.5 (Arg_0.998: s32[], Arg_1.687: s32[]) -> s32[] {
  %Arg_0.998 = s32[] parameter(0)
  ROOT %Arg_1.687 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.38 (Arg_0.999: s32[], Arg_1.688: s32[], Arg_2.139: s32[], Arg_3.76: s32[]) -> pred[] {
  %Arg_2.139 = s32[] parameter(2)
  %Arg_3.76 = s32[] parameter(3)
  %Arg_0.999 = s32[] parameter(0)
  %Arg_1.688 = s32[] parameter(1)
  ROOT %compare.577 = pred[] compare(%Arg_0.999, %Arg_1.688), direction=LT
}

%region_1.74._custom_call_lowering_rule.38 (Arg_0.1000: s32[], Arg_1.689: s32[]) -> s32[] {
  %Arg_0.1000 = s32[] parameter(0)
  %Arg_1.689 = s32[] parameter(1)
  ROOT %add.735 = s32[] add(%Arg_0.1000, %Arg_1.689)
}

%region_5.170._custom_call_lowering_rule.38 (Arg_0.1001: s32[], Arg_1.690: s32[]) -> s32[] {
  %Arg_0.1001 = s32[] parameter(0)
  ROOT %Arg_1.690 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.38 (Arg_0.1002: pred[], Arg_1.691: pred[]) -> pred[] {
  %Arg_0.1002 = pred[] parameter(0)
  ROOT %Arg_1.691 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.38 (Arg_0.1003: s32[], Arg_1.692: s32[]) -> s32[] {
  %Arg_0.1003 = s32[] parameter(0)
  %Arg_1.692 = s32[] parameter(1)
  ROOT %add.736 = s32[] add(%Arg_0.1003, %Arg_1.692)
}

%region_4.110._custom_call_lowering_rule.38 (Arg_0.1004: s32[], Arg_1.693: s32[]) -> s32[] {
  %Arg_0.1004 = s32[] parameter(0)
  %Arg_1.693 = s32[] parameter(1)
  ROOT %add.737 = s32[] add(%Arg_0.1004, %Arg_1.693)
}

%region_7.194._custom_call_lowering_rule.38 (Arg_0.1006: s32[], Arg_1.695: s32[]) -> s32[] {
  %Arg_0.1006 = s32[] parameter(0)
  %Arg_1.695 = s32[] parameter(1)
  ROOT %add.738 = s32[] add(%Arg_0.1006, %Arg_1.695)
}

%region_10.224._custom_call_lowering_rule.38 (Arg_0.1007: s32[], Arg_1.696: s32[]) -> s32[] {
  %Arg_0.1007 = s32[] parameter(0)
  ROOT %Arg_1.696 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.38 (Arg_0.1008: pred[], Arg_1.697: pred[]) -> pred[] {
  %Arg_0.1008 = pred[] parameter(0)
  ROOT %Arg_1.697 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.38 (Arg_0.1009: s32[], Arg_1.698: s32[]) -> s32[] {
  %Arg_0.1009 = s32[] parameter(0)
  %Arg_1.698 = s32[] parameter(1)
  ROOT %add.739 = s32[] add(%Arg_0.1009, %Arg_1.698)
}

%region_0.64._custom_call_lowering_rule.6 (Arg_0.1011: s32[], Arg_1.700: s32[], Arg_2.140: s32[], Arg_3.77: s32[]) -> pred[] {
  %Arg_2.140 = s32[] parameter(2)
  %Arg_3.77 = s32[] parameter(3)
  %Arg_0.1011 = s32[] parameter(0)
  %Arg_1.700 = s32[] parameter(1)
  ROOT %compare.582 = pred[] compare(%Arg_0.1011, %Arg_1.700), direction=LT
}

%region_1.77._custom_call_lowering_rule.6 (Arg_0.1012: s32[], Arg_1.701: s32[]) -> s32[] {
  %Arg_0.1012 = s32[] parameter(0)
  %Arg_1.701 = s32[] parameter(1)
  ROOT %add.740 = s32[] add(%Arg_0.1012, %Arg_1.701)
}

%region_5.173._custom_call_lowering_rule.6 (Arg_0.1013: s32[], Arg_1.702: s32[]) -> s32[] {
  %Arg_0.1013 = s32[] parameter(0)
  ROOT %Arg_1.702 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.6 (Arg_0.1014: pred[], Arg_1.703: pred[]) -> pred[] {
  %Arg_0.1014 = pred[] parameter(0)
  ROOT %Arg_1.703 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.6 (Arg_0.1015: s32[], Arg_1.704: s32[]) -> s32[] {
  %Arg_0.1015 = s32[] parameter(0)
  %Arg_1.704 = s32[] parameter(1)
  ROOT %add.741 = s32[] add(%Arg_0.1015, %Arg_1.704)
}

%region_4.113._custom_call_lowering_rule.6 (Arg_0.1016: s32[], Arg_1.705: s32[]) -> s32[] {
  %Arg_0.1016 = s32[] parameter(0)
  %Arg_1.705 = s32[] parameter(1)
  ROOT %add.742 = s32[] add(%Arg_0.1016, %Arg_1.705)
}

%region_6.181._custom_call_lowering_rule.6 (Arg_0.1017: s32[], Arg_1.706: s32[]) -> s32[] {
  %Arg_0.1017 = s32[] parameter(0)
  ROOT %Arg_1.706 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.6 (Arg_0.1018: s32[], Arg_1.707: s32[]) -> s32[] {
  %Arg_0.1018 = s32[] parameter(0)
  %Arg_1.707 = s32[] parameter(1)
  ROOT %add.743 = s32[] add(%Arg_0.1018, %Arg_1.707)
}

%region_10.227._custom_call_lowering_rule.6 (Arg_0.1019: s32[], Arg_1.708: s32[]) -> s32[] {
  %Arg_0.1019 = s32[] parameter(0)
  ROOT %Arg_1.708 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.6 (Arg_0.1020: pred[], Arg_1.709: pred[]) -> pred[] {
  %Arg_0.1020 = pred[] parameter(0)
  ROOT %Arg_1.709 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.6 (Arg_0.1021: s32[], Arg_1.710: s32[]) -> s32[] {
  %Arg_0.1021 = s32[] parameter(0)
  %Arg_1.710 = s32[] parameter(1)
  ROOT %add.744 = s32[] add(%Arg_0.1021, %Arg_1.710)
}

%region_11.235._custom_call_lowering_rule.6 (Arg_0.1022: s32[], Arg_1.711: s32[]) -> s32[] {
  %Arg_0.1022 = s32[] parameter(0)
  ROOT %Arg_1.711 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.39 (Arg_0.1023: s32[], Arg_1.712: s32[], Arg_2.141: s32[], Arg_3.78: s32[]) -> pred[] {
  %Arg_2.141 = s32[] parameter(2)
  %Arg_3.78 = s32[] parameter(3)
  %Arg_0.1023 = s32[] parameter(0)
  %Arg_1.712 = s32[] parameter(1)
  ROOT %compare.583 = pred[] compare(%Arg_0.1023, %Arg_1.712), direction=LT
}

%region_1.74._custom_call_lowering_rule.39 (Arg_0.1024: s32[], Arg_1.713: s32[]) -> s32[] {
  %Arg_0.1024 = s32[] parameter(0)
  %Arg_1.713 = s32[] parameter(1)
  ROOT %add.745 = s32[] add(%Arg_0.1024, %Arg_1.713)
}

%region_5.170._custom_call_lowering_rule.39 (Arg_0.1025: s32[], Arg_1.714: s32[]) -> s32[] {
  %Arg_0.1025 = s32[] parameter(0)
  ROOT %Arg_1.714 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.39 (Arg_0.1026: pred[], Arg_1.715: pred[]) -> pred[] {
  %Arg_0.1026 = pred[] parameter(0)
  ROOT %Arg_1.715 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.39 (Arg_0.1027: s32[], Arg_1.716: s32[]) -> s32[] {
  %Arg_0.1027 = s32[] parameter(0)
  %Arg_1.716 = s32[] parameter(1)
  ROOT %add.746 = s32[] add(%Arg_0.1027, %Arg_1.716)
}

%region_4.110._custom_call_lowering_rule.39 (Arg_0.1028: s32[], Arg_1.717: s32[]) -> s32[] {
  %Arg_0.1028 = s32[] parameter(0)
  %Arg_1.717 = s32[] parameter(1)
  ROOT %add.747 = s32[] add(%Arg_0.1028, %Arg_1.717)
}

%region_7.194._custom_call_lowering_rule.39 (Arg_0.1030: s32[], Arg_1.719: s32[]) -> s32[] {
  %Arg_0.1030 = s32[] parameter(0)
  %Arg_1.719 = s32[] parameter(1)
  ROOT %add.748 = s32[] add(%Arg_0.1030, %Arg_1.719)
}

%region_10.224._custom_call_lowering_rule.39 (Arg_0.1031: s32[], Arg_1.720: s32[]) -> s32[] {
  %Arg_0.1031 = s32[] parameter(0)
  ROOT %Arg_1.720 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.39 (Arg_0.1032: pred[], Arg_1.721: pred[]) -> pred[] {
  %Arg_0.1032 = pred[] parameter(0)
  ROOT %Arg_1.721 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.39 (Arg_0.1033: s32[], Arg_1.722: s32[]) -> s32[] {
  %Arg_0.1033 = s32[] parameter(0)
  %Arg_1.722 = s32[] parameter(1)
  ROOT %add.749 = s32[] add(%Arg_0.1033, %Arg_1.722)
}

%region_0.64._custom_call_lowering_rule.7 (Arg_0.1035: s32[], Arg_1.724: s32[], Arg_2.142: s32[], Arg_3.79: s32[]) -> pred[] {
  %Arg_2.142 = s32[] parameter(2)
  %Arg_3.79 = s32[] parameter(3)
  %Arg_0.1035 = s32[] parameter(0)
  %Arg_1.724 = s32[] parameter(1)
  ROOT %compare.588 = pred[] compare(%Arg_0.1035, %Arg_1.724), direction=LT
}

%region_1.77._custom_call_lowering_rule.7 (Arg_0.1036: s32[], Arg_1.725: s32[]) -> s32[] {
  %Arg_0.1036 = s32[] parameter(0)
  %Arg_1.725 = s32[] parameter(1)
  ROOT %add.750 = s32[] add(%Arg_0.1036, %Arg_1.725)
}

%region_5.173._custom_call_lowering_rule.7 (Arg_0.1037: s32[], Arg_1.726: s32[]) -> s32[] {
  %Arg_0.1037 = s32[] parameter(0)
  ROOT %Arg_1.726 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.7 (Arg_0.1038: pred[], Arg_1.727: pred[]) -> pred[] {
  %Arg_0.1038 = pred[] parameter(0)
  ROOT %Arg_1.727 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.7 (Arg_0.1039: s32[], Arg_1.728: s32[]) -> s32[] {
  %Arg_0.1039 = s32[] parameter(0)
  %Arg_1.728 = s32[] parameter(1)
  ROOT %add.751 = s32[] add(%Arg_0.1039, %Arg_1.728)
}

%region_4.113._custom_call_lowering_rule.7 (Arg_0.1040: s32[], Arg_1.729: s32[]) -> s32[] {
  %Arg_0.1040 = s32[] parameter(0)
  %Arg_1.729 = s32[] parameter(1)
  ROOT %add.752 = s32[] add(%Arg_0.1040, %Arg_1.729)
}

%region_6.181._custom_call_lowering_rule.7 (Arg_0.1041: s32[], Arg_1.730: s32[]) -> s32[] {
  %Arg_0.1041 = s32[] parameter(0)
  ROOT %Arg_1.730 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.7 (Arg_0.1042: s32[], Arg_1.731: s32[]) -> s32[] {
  %Arg_0.1042 = s32[] parameter(0)
  %Arg_1.731 = s32[] parameter(1)
  ROOT %add.753 = s32[] add(%Arg_0.1042, %Arg_1.731)
}

%region_10.227._custom_call_lowering_rule.7 (Arg_0.1043: s32[], Arg_1.732: s32[]) -> s32[] {
  %Arg_0.1043 = s32[] parameter(0)
  ROOT %Arg_1.732 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.7 (Arg_0.1044: pred[], Arg_1.733: pred[]) -> pred[] {
  %Arg_0.1044 = pred[] parameter(0)
  ROOT %Arg_1.733 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.7 (Arg_0.1045: s32[], Arg_1.734: s32[]) -> s32[] {
  %Arg_0.1045 = s32[] parameter(0)
  %Arg_1.734 = s32[] parameter(1)
  ROOT %add.754 = s32[] add(%Arg_0.1045, %Arg_1.734)
}

%region_11.235._custom_call_lowering_rule.7 (Arg_0.1046: s32[], Arg_1.735: s32[]) -> s32[] {
  %Arg_0.1046 = s32[] parameter(0)
  ROOT %Arg_1.735 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.40 (Arg_0.1047: s32[], Arg_1.736: s32[], Arg_2.143: s32[], Arg_3.80: s32[]) -> pred[] {
  %Arg_2.143 = s32[] parameter(2)
  %Arg_3.80 = s32[] parameter(3)
  %Arg_0.1047 = s32[] parameter(0)
  %Arg_1.736 = s32[] parameter(1)
  ROOT %compare.589 = pred[] compare(%Arg_0.1047, %Arg_1.736), direction=LT
}

%region_1.74._custom_call_lowering_rule.40 (Arg_0.1048: s32[], Arg_1.737: s32[]) -> s32[] {
  %Arg_0.1048 = s32[] parameter(0)
  %Arg_1.737 = s32[] parameter(1)
  ROOT %add.755 = s32[] add(%Arg_0.1048, %Arg_1.737)
}

%region_5.170._custom_call_lowering_rule.40 (Arg_0.1049: s32[], Arg_1.738: s32[]) -> s32[] {
  %Arg_0.1049 = s32[] parameter(0)
  ROOT %Arg_1.738 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.40 (Arg_0.1050: pred[], Arg_1.739: pred[]) -> pred[] {
  %Arg_0.1050 = pred[] parameter(0)
  ROOT %Arg_1.739 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.40 (Arg_0.1051: s32[], Arg_1.740: s32[]) -> s32[] {
  %Arg_0.1051 = s32[] parameter(0)
  %Arg_1.740 = s32[] parameter(1)
  ROOT %add.756 = s32[] add(%Arg_0.1051, %Arg_1.740)
}

%region_4.110._custom_call_lowering_rule.40 (Arg_0.1052: s32[], Arg_1.741: s32[]) -> s32[] {
  %Arg_0.1052 = s32[] parameter(0)
  %Arg_1.741 = s32[] parameter(1)
  ROOT %add.757 = s32[] add(%Arg_0.1052, %Arg_1.741)
}

%region_7.194._custom_call_lowering_rule.40 (Arg_0.1054: s32[], Arg_1.743: s32[]) -> s32[] {
  %Arg_0.1054 = s32[] parameter(0)
  %Arg_1.743 = s32[] parameter(1)
  ROOT %add.758 = s32[] add(%Arg_0.1054, %Arg_1.743)
}

%region_10.224._custom_call_lowering_rule.40 (Arg_0.1055: s32[], Arg_1.744: s32[]) -> s32[] {
  %Arg_0.1055 = s32[] parameter(0)
  ROOT %Arg_1.744 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.40 (Arg_0.1056: pred[], Arg_1.745: pred[]) -> pred[] {
  %Arg_0.1056 = pred[] parameter(0)
  ROOT %Arg_1.745 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.40 (Arg_0.1057: s32[], Arg_1.746: s32[]) -> s32[] {
  %Arg_0.1057 = s32[] parameter(0)
  %Arg_1.746 = s32[] parameter(1)
  ROOT %add.759 = s32[] add(%Arg_0.1057, %Arg_1.746)
}

%region_0.64._custom_call_lowering_rule.8 (Arg_0.1059: s32[], Arg_1.748: s32[], Arg_2.144: s32[], Arg_3.81: s32[]) -> pred[] {
  %Arg_2.144 = s32[] parameter(2)
  %Arg_3.81 = s32[] parameter(3)
  %Arg_0.1059 = s32[] parameter(0)
  %Arg_1.748 = s32[] parameter(1)
  ROOT %compare.594 = pred[] compare(%Arg_0.1059, %Arg_1.748), direction=LT
}

%region_1.77._custom_call_lowering_rule.8 (Arg_0.1060: s32[], Arg_1.749: s32[]) -> s32[] {
  %Arg_0.1060 = s32[] parameter(0)
  %Arg_1.749 = s32[] parameter(1)
  ROOT %add.760 = s32[] add(%Arg_0.1060, %Arg_1.749)
}

%region_5.173._custom_call_lowering_rule.8 (Arg_0.1061: s32[], Arg_1.750: s32[]) -> s32[] {
  %Arg_0.1061 = s32[] parameter(0)
  ROOT %Arg_1.750 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.8 (Arg_0.1062: pred[], Arg_1.751: pred[]) -> pred[] {
  %Arg_0.1062 = pred[] parameter(0)
  ROOT %Arg_1.751 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.8 (Arg_0.1063: s32[], Arg_1.752: s32[]) -> s32[] {
  %Arg_0.1063 = s32[] parameter(0)
  %Arg_1.752 = s32[] parameter(1)
  ROOT %add.761 = s32[] add(%Arg_0.1063, %Arg_1.752)
}

%region_4.113._custom_call_lowering_rule.8 (Arg_0.1064: s32[], Arg_1.753: s32[]) -> s32[] {
  %Arg_0.1064 = s32[] parameter(0)
  %Arg_1.753 = s32[] parameter(1)
  ROOT %add.762 = s32[] add(%Arg_0.1064, %Arg_1.753)
}

%region_6.181._custom_call_lowering_rule.8 (Arg_0.1065: s32[], Arg_1.754: s32[]) -> s32[] {
  %Arg_0.1065 = s32[] parameter(0)
  ROOT %Arg_1.754 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.8 (Arg_0.1066: s32[], Arg_1.755: s32[]) -> s32[] {
  %Arg_0.1066 = s32[] parameter(0)
  %Arg_1.755 = s32[] parameter(1)
  ROOT %add.763 = s32[] add(%Arg_0.1066, %Arg_1.755)
}

%region_10.227._custom_call_lowering_rule.8 (Arg_0.1067: s32[], Arg_1.756: s32[]) -> s32[] {
  %Arg_0.1067 = s32[] parameter(0)
  ROOT %Arg_1.756 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.8 (Arg_0.1068: pred[], Arg_1.757: pred[]) -> pred[] {
  %Arg_0.1068 = pred[] parameter(0)
  ROOT %Arg_1.757 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.8 (Arg_0.1069: s32[], Arg_1.758: s32[]) -> s32[] {
  %Arg_0.1069 = s32[] parameter(0)
  %Arg_1.758 = s32[] parameter(1)
  ROOT %add.764 = s32[] add(%Arg_0.1069, %Arg_1.758)
}

%region_11.235._custom_call_lowering_rule.8 (Arg_0.1070: s32[], Arg_1.759: s32[]) -> s32[] {
  %Arg_0.1070 = s32[] parameter(0)
  ROOT %Arg_1.759 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.41 (Arg_0.1071: s32[], Arg_1.760: s32[], Arg_2.145: s32[], Arg_3.82: s32[]) -> pred[] {
  %Arg_2.145 = s32[] parameter(2)
  %Arg_3.82 = s32[] parameter(3)
  %Arg_0.1071 = s32[] parameter(0)
  %Arg_1.760 = s32[] parameter(1)
  ROOT %compare.595 = pred[] compare(%Arg_0.1071, %Arg_1.760), direction=LT
}

%region_1.74._custom_call_lowering_rule.41 (Arg_0.1072: s32[], Arg_1.761: s32[]) -> s32[] {
  %Arg_0.1072 = s32[] parameter(0)
  %Arg_1.761 = s32[] parameter(1)
  ROOT %add.765 = s32[] add(%Arg_0.1072, %Arg_1.761)
}

%region_5.170._custom_call_lowering_rule.41 (Arg_0.1073: s32[], Arg_1.762: s32[]) -> s32[] {
  %Arg_0.1073 = s32[] parameter(0)
  ROOT %Arg_1.762 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.41 (Arg_0.1074: pred[], Arg_1.763: pred[]) -> pred[] {
  %Arg_0.1074 = pred[] parameter(0)
  ROOT %Arg_1.763 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.41 (Arg_0.1075: s32[], Arg_1.764: s32[]) -> s32[] {
  %Arg_0.1075 = s32[] parameter(0)
  %Arg_1.764 = s32[] parameter(1)
  ROOT %add.766 = s32[] add(%Arg_0.1075, %Arg_1.764)
}

%region_4.110._custom_call_lowering_rule.41 (Arg_0.1076: s32[], Arg_1.765: s32[]) -> s32[] {
  %Arg_0.1076 = s32[] parameter(0)
  %Arg_1.765 = s32[] parameter(1)
  ROOT %add.767 = s32[] add(%Arg_0.1076, %Arg_1.765)
}

%region_7.194._custom_call_lowering_rule.41 (Arg_0.1078: s32[], Arg_1.767: s32[]) -> s32[] {
  %Arg_0.1078 = s32[] parameter(0)
  %Arg_1.767 = s32[] parameter(1)
  ROOT %add.768 = s32[] add(%Arg_0.1078, %Arg_1.767)
}

%region_10.224._custom_call_lowering_rule.41 (Arg_0.1079: s32[], Arg_1.768: s32[]) -> s32[] {
  %Arg_0.1079 = s32[] parameter(0)
  ROOT %Arg_1.768 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.41 (Arg_0.1080: pred[], Arg_1.769: pred[]) -> pred[] {
  %Arg_0.1080 = pred[] parameter(0)
  ROOT %Arg_1.769 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.41 (Arg_0.1081: s32[], Arg_1.770: s32[]) -> s32[] {
  %Arg_0.1081 = s32[] parameter(0)
  %Arg_1.770 = s32[] parameter(1)
  ROOT %add.769 = s32[] add(%Arg_0.1081, %Arg_1.770)
}

%region_0.64._custom_call_lowering_rule.9 (Arg_0.1083: s32[], Arg_1.772: s32[], Arg_2.146: s32[], Arg_3.83: s32[]) -> pred[] {
  %Arg_2.146 = s32[] parameter(2)
  %Arg_3.83 = s32[] parameter(3)
  %Arg_0.1083 = s32[] parameter(0)
  %Arg_1.772 = s32[] parameter(1)
  ROOT %compare.600 = pred[] compare(%Arg_0.1083, %Arg_1.772), direction=LT
}

%region_1.77._custom_call_lowering_rule.9 (Arg_0.1084: s32[], Arg_1.773: s32[]) -> s32[] {
  %Arg_0.1084 = s32[] parameter(0)
  %Arg_1.773 = s32[] parameter(1)
  ROOT %add.770 = s32[] add(%Arg_0.1084, %Arg_1.773)
}

%region_5.173._custom_call_lowering_rule.9 (Arg_0.1085: s32[], Arg_1.774: s32[]) -> s32[] {
  %Arg_0.1085 = s32[] parameter(0)
  ROOT %Arg_1.774 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.9 (Arg_0.1086: pred[], Arg_1.775: pred[]) -> pred[] {
  %Arg_0.1086 = pred[] parameter(0)
  ROOT %Arg_1.775 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.9 (Arg_0.1087: s32[], Arg_1.776: s32[]) -> s32[] {
  %Arg_0.1087 = s32[] parameter(0)
  %Arg_1.776 = s32[] parameter(1)
  ROOT %add.771 = s32[] add(%Arg_0.1087, %Arg_1.776)
}

%region_4.113._custom_call_lowering_rule.9 (Arg_0.1088: s32[], Arg_1.777: s32[]) -> s32[] {
  %Arg_0.1088 = s32[] parameter(0)
  %Arg_1.777 = s32[] parameter(1)
  ROOT %add.772 = s32[] add(%Arg_0.1088, %Arg_1.777)
}

%region_6.181._custom_call_lowering_rule.9 (Arg_0.1089: s32[], Arg_1.778: s32[]) -> s32[] {
  %Arg_0.1089 = s32[] parameter(0)
  ROOT %Arg_1.778 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.9 (Arg_0.1090: s32[], Arg_1.779: s32[]) -> s32[] {
  %Arg_0.1090 = s32[] parameter(0)
  %Arg_1.779 = s32[] parameter(1)
  ROOT %add.773 = s32[] add(%Arg_0.1090, %Arg_1.779)
}

%region_10.227._custom_call_lowering_rule.9 (Arg_0.1091: s32[], Arg_1.780: s32[]) -> s32[] {
  %Arg_0.1091 = s32[] parameter(0)
  ROOT %Arg_1.780 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.9 (Arg_0.1092: pred[], Arg_1.781: pred[]) -> pred[] {
  %Arg_0.1092 = pred[] parameter(0)
  ROOT %Arg_1.781 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.9 (Arg_0.1093: s32[], Arg_1.782: s32[]) -> s32[] {
  %Arg_0.1093 = s32[] parameter(0)
  %Arg_1.782 = s32[] parameter(1)
  ROOT %add.774 = s32[] add(%Arg_0.1093, %Arg_1.782)
}

%region_11.235._custom_call_lowering_rule.9 (Arg_0.1094: s32[], Arg_1.783: s32[]) -> s32[] {
  %Arg_0.1094 = s32[] parameter(0)
  ROOT %Arg_1.783 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.42 (Arg_0.1095: s32[], Arg_1.784: s32[], Arg_2.147: s32[], Arg_3.84: s32[]) -> pred[] {
  %Arg_2.147 = s32[] parameter(2)
  %Arg_3.84 = s32[] parameter(3)
  %Arg_0.1095 = s32[] parameter(0)
  %Arg_1.784 = s32[] parameter(1)
  ROOT %compare.601 = pred[] compare(%Arg_0.1095, %Arg_1.784), direction=LT
}

%region_1.74._custom_call_lowering_rule.42 (Arg_0.1096: s32[], Arg_1.785: s32[]) -> s32[] {
  %Arg_0.1096 = s32[] parameter(0)
  %Arg_1.785 = s32[] parameter(1)
  ROOT %add.775 = s32[] add(%Arg_0.1096, %Arg_1.785)
}

%region_5.170._custom_call_lowering_rule.42 (Arg_0.1097: s32[], Arg_1.786: s32[]) -> s32[] {
  %Arg_0.1097 = s32[] parameter(0)
  ROOT %Arg_1.786 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.42 (Arg_0.1098: pred[], Arg_1.787: pred[]) -> pred[] {
  %Arg_0.1098 = pred[] parameter(0)
  ROOT %Arg_1.787 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.42 (Arg_0.1099: s32[], Arg_1.788: s32[]) -> s32[] {
  %Arg_0.1099 = s32[] parameter(0)
  %Arg_1.788 = s32[] parameter(1)
  ROOT %add.776 = s32[] add(%Arg_0.1099, %Arg_1.788)
}

%region_4.110._custom_call_lowering_rule.42 (Arg_0.1100: s32[], Arg_1.789: s32[]) -> s32[] {
  %Arg_0.1100 = s32[] parameter(0)
  %Arg_1.789 = s32[] parameter(1)
  ROOT %add.777 = s32[] add(%Arg_0.1100, %Arg_1.789)
}

%region_7.194._custom_call_lowering_rule.42 (Arg_0.1102: s32[], Arg_1.791: s32[]) -> s32[] {
  %Arg_0.1102 = s32[] parameter(0)
  %Arg_1.791 = s32[] parameter(1)
  ROOT %add.778 = s32[] add(%Arg_0.1102, %Arg_1.791)
}

%region_10.224._custom_call_lowering_rule.42 (Arg_0.1103: s32[], Arg_1.792: s32[]) -> s32[] {
  %Arg_0.1103 = s32[] parameter(0)
  ROOT %Arg_1.792 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.42 (Arg_0.1104: pred[], Arg_1.793: pred[]) -> pred[] {
  %Arg_0.1104 = pred[] parameter(0)
  ROOT %Arg_1.793 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.42 (Arg_0.1105: s32[], Arg_1.794: s32[]) -> s32[] {
  %Arg_0.1105 = s32[] parameter(0)
  %Arg_1.794 = s32[] parameter(1)
  ROOT %add.779 = s32[] add(%Arg_0.1105, %Arg_1.794)
}

%region_0.64._custom_call_lowering_rule.10 (Arg_0.1107: s32[], Arg_1.796: s32[], Arg_2.148: s32[], Arg_3.85: s32[]) -> pred[] {
  %Arg_2.148 = s32[] parameter(2)
  %Arg_3.85 = s32[] parameter(3)
  %Arg_0.1107 = s32[] parameter(0)
  %Arg_1.796 = s32[] parameter(1)
  ROOT %compare.606 = pred[] compare(%Arg_0.1107, %Arg_1.796), direction=LT
}

%region_1.77._custom_call_lowering_rule.10 (Arg_0.1108: s32[], Arg_1.797: s32[]) -> s32[] {
  %Arg_0.1108 = s32[] parameter(0)
  %Arg_1.797 = s32[] parameter(1)
  ROOT %add.780 = s32[] add(%Arg_0.1108, %Arg_1.797)
}

%region_5.173._custom_call_lowering_rule.10 (Arg_0.1109: s32[], Arg_1.798: s32[]) -> s32[] {
  %Arg_0.1109 = s32[] parameter(0)
  ROOT %Arg_1.798 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.10 (Arg_0.1110: pred[], Arg_1.799: pred[]) -> pred[] {
  %Arg_0.1110 = pred[] parameter(0)
  ROOT %Arg_1.799 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.10 (Arg_0.1111: s32[], Arg_1.800: s32[]) -> s32[] {
  %Arg_0.1111 = s32[] parameter(0)
  %Arg_1.800 = s32[] parameter(1)
  ROOT %add.781 = s32[] add(%Arg_0.1111, %Arg_1.800)
}

%region_4.113._custom_call_lowering_rule.10 (Arg_0.1112: s32[], Arg_1.801: s32[]) -> s32[] {
  %Arg_0.1112 = s32[] parameter(0)
  %Arg_1.801 = s32[] parameter(1)
  ROOT %add.782 = s32[] add(%Arg_0.1112, %Arg_1.801)
}

%region_6.181._custom_call_lowering_rule.10 (Arg_0.1113: s32[], Arg_1.802: s32[]) -> s32[] {
  %Arg_0.1113 = s32[] parameter(0)
  ROOT %Arg_1.802 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.10 (Arg_0.1114: s32[], Arg_1.803: s32[]) -> s32[] {
  %Arg_0.1114 = s32[] parameter(0)
  %Arg_1.803 = s32[] parameter(1)
  ROOT %add.783 = s32[] add(%Arg_0.1114, %Arg_1.803)
}

%region_10.227._custom_call_lowering_rule.10 (Arg_0.1115: s32[], Arg_1.804: s32[]) -> s32[] {
  %Arg_0.1115 = s32[] parameter(0)
  ROOT %Arg_1.804 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.10 (Arg_0.1116: pred[], Arg_1.805: pred[]) -> pred[] {
  %Arg_0.1116 = pred[] parameter(0)
  ROOT %Arg_1.805 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.10 (Arg_0.1117: s32[], Arg_1.806: s32[]) -> s32[] {
  %Arg_0.1117 = s32[] parameter(0)
  %Arg_1.806 = s32[] parameter(1)
  ROOT %add.784 = s32[] add(%Arg_0.1117, %Arg_1.806)
}

%region_11.235._custom_call_lowering_rule.10 (Arg_0.1118: s32[], Arg_1.807: s32[]) -> s32[] {
  %Arg_0.1118 = s32[] parameter(0)
  ROOT %Arg_1.807 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.43 (Arg_0.1119: s32[], Arg_1.808: s32[], Arg_2.149: s32[], Arg_3.86: s32[]) -> pred[] {
  %Arg_2.149 = s32[] parameter(2)
  %Arg_3.86 = s32[] parameter(3)
  %Arg_0.1119 = s32[] parameter(0)
  %Arg_1.808 = s32[] parameter(1)
  ROOT %compare.607 = pred[] compare(%Arg_0.1119, %Arg_1.808), direction=LT
}

%region_1.74._custom_call_lowering_rule.43 (Arg_0.1120: s32[], Arg_1.809: s32[]) -> s32[] {
  %Arg_0.1120 = s32[] parameter(0)
  %Arg_1.809 = s32[] parameter(1)
  ROOT %add.785 = s32[] add(%Arg_0.1120, %Arg_1.809)
}

%region_5.170._custom_call_lowering_rule.43 (Arg_0.1121: s32[], Arg_1.810: s32[]) -> s32[] {
  %Arg_0.1121 = s32[] parameter(0)
  ROOT %Arg_1.810 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.43 (Arg_0.1122: pred[], Arg_1.811: pred[]) -> pred[] {
  %Arg_0.1122 = pred[] parameter(0)
  ROOT %Arg_1.811 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.43 (Arg_0.1123: s32[], Arg_1.812: s32[]) -> s32[] {
  %Arg_0.1123 = s32[] parameter(0)
  %Arg_1.812 = s32[] parameter(1)
  ROOT %add.786 = s32[] add(%Arg_0.1123, %Arg_1.812)
}

%region_4.110._custom_call_lowering_rule.43 (Arg_0.1124: s32[], Arg_1.813: s32[]) -> s32[] {
  %Arg_0.1124 = s32[] parameter(0)
  %Arg_1.813 = s32[] parameter(1)
  ROOT %add.787 = s32[] add(%Arg_0.1124, %Arg_1.813)
}

%region_7.194._custom_call_lowering_rule.43 (Arg_0.1126: s32[], Arg_1.815: s32[]) -> s32[] {
  %Arg_0.1126 = s32[] parameter(0)
  %Arg_1.815 = s32[] parameter(1)
  ROOT %add.788 = s32[] add(%Arg_0.1126, %Arg_1.815)
}

%region_10.224._custom_call_lowering_rule.43 (Arg_0.1127: s32[], Arg_1.816: s32[]) -> s32[] {
  %Arg_0.1127 = s32[] parameter(0)
  ROOT %Arg_1.816 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.43 (Arg_0.1128: pred[], Arg_1.817: pred[]) -> pred[] {
  %Arg_0.1128 = pred[] parameter(0)
  ROOT %Arg_1.817 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.43 (Arg_0.1129: s32[], Arg_1.818: s32[]) -> s32[] {
  %Arg_0.1129 = s32[] parameter(0)
  %Arg_1.818 = s32[] parameter(1)
  ROOT %add.789 = s32[] add(%Arg_0.1129, %Arg_1.818)
}

%region_0.64._custom_call_lowering_rule.11 (Arg_0.1131: s32[], Arg_1.820: s32[], Arg_2.150: s32[], Arg_3.87: s32[]) -> pred[] {
  %Arg_2.150 = s32[] parameter(2)
  %Arg_3.87 = s32[] parameter(3)
  %Arg_0.1131 = s32[] parameter(0)
  %Arg_1.820 = s32[] parameter(1)
  ROOT %compare.612 = pred[] compare(%Arg_0.1131, %Arg_1.820), direction=LT
}

%region_1.77._custom_call_lowering_rule.11 (Arg_0.1132: s32[], Arg_1.821: s32[]) -> s32[] {
  %Arg_0.1132 = s32[] parameter(0)
  %Arg_1.821 = s32[] parameter(1)
  ROOT %add.790 = s32[] add(%Arg_0.1132, %Arg_1.821)
}

%region_5.173._custom_call_lowering_rule.11 (Arg_0.1133: s32[], Arg_1.822: s32[]) -> s32[] {
  %Arg_0.1133 = s32[] parameter(0)
  ROOT %Arg_1.822 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.11 (Arg_0.1134: pred[], Arg_1.823: pred[]) -> pred[] {
  %Arg_0.1134 = pred[] parameter(0)
  ROOT %Arg_1.823 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.11 (Arg_0.1135: s32[], Arg_1.824: s32[]) -> s32[] {
  %Arg_0.1135 = s32[] parameter(0)
  %Arg_1.824 = s32[] parameter(1)
  ROOT %add.791 = s32[] add(%Arg_0.1135, %Arg_1.824)
}

%region_4.113._custom_call_lowering_rule.11 (Arg_0.1136: s32[], Arg_1.825: s32[]) -> s32[] {
  %Arg_0.1136 = s32[] parameter(0)
  %Arg_1.825 = s32[] parameter(1)
  ROOT %add.792 = s32[] add(%Arg_0.1136, %Arg_1.825)
}

%region_6.181._custom_call_lowering_rule.11 (Arg_0.1137: s32[], Arg_1.826: s32[]) -> s32[] {
  %Arg_0.1137 = s32[] parameter(0)
  ROOT %Arg_1.826 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.11 (Arg_0.1138: s32[], Arg_1.827: s32[]) -> s32[] {
  %Arg_0.1138 = s32[] parameter(0)
  %Arg_1.827 = s32[] parameter(1)
  ROOT %add.793 = s32[] add(%Arg_0.1138, %Arg_1.827)
}

%region_10.227._custom_call_lowering_rule.11 (Arg_0.1139: s32[], Arg_1.828: s32[]) -> s32[] {
  %Arg_0.1139 = s32[] parameter(0)
  ROOT %Arg_1.828 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.11 (Arg_0.1140: pred[], Arg_1.829: pred[]) -> pred[] {
  %Arg_0.1140 = pred[] parameter(0)
  ROOT %Arg_1.829 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.11 (Arg_0.1141: s32[], Arg_1.830: s32[]) -> s32[] {
  %Arg_0.1141 = s32[] parameter(0)
  %Arg_1.830 = s32[] parameter(1)
  ROOT %add.794 = s32[] add(%Arg_0.1141, %Arg_1.830)
}

%region_11.235._custom_call_lowering_rule.11 (Arg_0.1142: s32[], Arg_1.831: s32[]) -> s32[] {
  %Arg_0.1142 = s32[] parameter(0)
  ROOT %Arg_1.831 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.44 (Arg_0.1143: s32[], Arg_1.832: s32[], Arg_2.151: s32[], Arg_3.88: s32[]) -> pred[] {
  %Arg_2.151 = s32[] parameter(2)
  %Arg_3.88 = s32[] parameter(3)
  %Arg_0.1143 = s32[] parameter(0)
  %Arg_1.832 = s32[] parameter(1)
  ROOT %compare.613 = pred[] compare(%Arg_0.1143, %Arg_1.832), direction=LT
}

%region_1.74._custom_call_lowering_rule.44 (Arg_0.1144: s32[], Arg_1.833: s32[]) -> s32[] {
  %Arg_0.1144 = s32[] parameter(0)
  %Arg_1.833 = s32[] parameter(1)
  ROOT %add.795 = s32[] add(%Arg_0.1144, %Arg_1.833)
}

%region_5.170._custom_call_lowering_rule.44 (Arg_0.1145: s32[], Arg_1.834: s32[]) -> s32[] {
  %Arg_0.1145 = s32[] parameter(0)
  ROOT %Arg_1.834 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.44 (Arg_0.1146: pred[], Arg_1.835: pred[]) -> pred[] {
  %Arg_0.1146 = pred[] parameter(0)
  ROOT %Arg_1.835 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.44 (Arg_0.1147: s32[], Arg_1.836: s32[]) -> s32[] {
  %Arg_0.1147 = s32[] parameter(0)
  %Arg_1.836 = s32[] parameter(1)
  ROOT %add.796 = s32[] add(%Arg_0.1147, %Arg_1.836)
}

%region_4.110._custom_call_lowering_rule.44 (Arg_0.1148: s32[], Arg_1.837: s32[]) -> s32[] {
  %Arg_0.1148 = s32[] parameter(0)
  %Arg_1.837 = s32[] parameter(1)
  ROOT %add.797 = s32[] add(%Arg_0.1148, %Arg_1.837)
}

%region_7.194._custom_call_lowering_rule.44 (Arg_0.1150: s32[], Arg_1.839: s32[]) -> s32[] {
  %Arg_0.1150 = s32[] parameter(0)
  %Arg_1.839 = s32[] parameter(1)
  ROOT %add.798 = s32[] add(%Arg_0.1150, %Arg_1.839)
}

%region_10.224._custom_call_lowering_rule.44 (Arg_0.1151: s32[], Arg_1.840: s32[]) -> s32[] {
  %Arg_0.1151 = s32[] parameter(0)
  ROOT %Arg_1.840 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.44 (Arg_0.1152: pred[], Arg_1.841: pred[]) -> pred[] {
  %Arg_0.1152 = pred[] parameter(0)
  ROOT %Arg_1.841 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.44 (Arg_0.1153: s32[], Arg_1.842: s32[]) -> s32[] {
  %Arg_0.1153 = s32[] parameter(0)
  %Arg_1.842 = s32[] parameter(1)
  ROOT %add.799 = s32[] add(%Arg_0.1153, %Arg_1.842)
}

%region_0.64._custom_call_lowering_rule.12 (Arg_0.1155: s32[], Arg_1.844: s32[], Arg_2.152: s32[], Arg_3.89: s32[]) -> pred[] {
  %Arg_2.152 = s32[] parameter(2)
  %Arg_3.89 = s32[] parameter(3)
  %Arg_0.1155 = s32[] parameter(0)
  %Arg_1.844 = s32[] parameter(1)
  ROOT %compare.618 = pred[] compare(%Arg_0.1155, %Arg_1.844), direction=LT
}

%region_1.77._custom_call_lowering_rule.12 (Arg_0.1156: s32[], Arg_1.845: s32[]) -> s32[] {
  %Arg_0.1156 = s32[] parameter(0)
  %Arg_1.845 = s32[] parameter(1)
  ROOT %add.800 = s32[] add(%Arg_0.1156, %Arg_1.845)
}

%region_5.173._custom_call_lowering_rule.12 (Arg_0.1157: s32[], Arg_1.846: s32[]) -> s32[] {
  %Arg_0.1157 = s32[] parameter(0)
  ROOT %Arg_1.846 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.12 (Arg_0.1158: pred[], Arg_1.847: pred[]) -> pred[] {
  %Arg_0.1158 = pred[] parameter(0)
  ROOT %Arg_1.847 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.12 (Arg_0.1159: s32[], Arg_1.848: s32[]) -> s32[] {
  %Arg_0.1159 = s32[] parameter(0)
  %Arg_1.848 = s32[] parameter(1)
  ROOT %add.801 = s32[] add(%Arg_0.1159, %Arg_1.848)
}

%region_4.113._custom_call_lowering_rule.12 (Arg_0.1160: s32[], Arg_1.849: s32[]) -> s32[] {
  %Arg_0.1160 = s32[] parameter(0)
  %Arg_1.849 = s32[] parameter(1)
  ROOT %add.802 = s32[] add(%Arg_0.1160, %Arg_1.849)
}

%region_6.181._custom_call_lowering_rule.12 (Arg_0.1161: s32[], Arg_1.850: s32[]) -> s32[] {
  %Arg_0.1161 = s32[] parameter(0)
  ROOT %Arg_1.850 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.12 (Arg_0.1162: s32[], Arg_1.851: s32[]) -> s32[] {
  %Arg_0.1162 = s32[] parameter(0)
  %Arg_1.851 = s32[] parameter(1)
  ROOT %add.803 = s32[] add(%Arg_0.1162, %Arg_1.851)
}

%region_10.227._custom_call_lowering_rule.12 (Arg_0.1164: s32[], Arg_1.852: s32[]) -> s32[] {
  %Arg_0.1164 = s32[] parameter(0)
  ROOT %Arg_1.852 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.12 (Arg_0.1165: pred[], Arg_1.853: pred[]) -> pred[] {
  %Arg_0.1165 = pred[] parameter(0)
  ROOT %Arg_1.853 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.12 (Arg_0.1166: s32[], Arg_1.854: s32[]) -> s32[] {
  %Arg_0.1166 = s32[] parameter(0)
  %Arg_1.854 = s32[] parameter(1)
  ROOT %add.804 = s32[] add(%Arg_0.1166, %Arg_1.854)
}

%region_11.235._custom_call_lowering_rule.12 (Arg_0.1167: s32[], Arg_1.855: s32[]) -> s32[] {
  %Arg_0.1167 = s32[] parameter(0)
  ROOT %Arg_1.855 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.45 (Arg_0.1168: s32[], Arg_1.856: s32[], Arg_2.153: s32[], Arg_3.90: s32[]) -> pred[] {
  %Arg_2.153 = s32[] parameter(2)
  %Arg_3.90 = s32[] parameter(3)
  %Arg_0.1168 = s32[] parameter(0)
  %Arg_1.856 = s32[] parameter(1)
  ROOT %compare.619 = pred[] compare(%Arg_0.1168, %Arg_1.856), direction=LT
}

%region_1.74._custom_call_lowering_rule.45 (Arg_0.1169: s32[], Arg_1.857: s32[]) -> s32[] {
  %Arg_0.1169 = s32[] parameter(0)
  %Arg_1.857 = s32[] parameter(1)
  ROOT %add.805 = s32[] add(%Arg_0.1169, %Arg_1.857)
}

%region_5.170._custom_call_lowering_rule.45 (Arg_0.1170: s32[], Arg_1.858: s32[]) -> s32[] {
  %Arg_0.1170 = s32[] parameter(0)
  ROOT %Arg_1.858 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.45 (Arg_0.1171: pred[], Arg_1.859: pred[]) -> pred[] {
  %Arg_0.1171 = pred[] parameter(0)
  ROOT %Arg_1.859 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.45 (Arg_0.1172: s32[], Arg_1.860: s32[]) -> s32[] {
  %Arg_0.1172 = s32[] parameter(0)
  %Arg_1.860 = s32[] parameter(1)
  ROOT %add.806 = s32[] add(%Arg_0.1172, %Arg_1.860)
}

%region_4.110._custom_call_lowering_rule.45 (Arg_0.1173: s32[], Arg_1.861: s32[]) -> s32[] {
  %Arg_0.1173 = s32[] parameter(0)
  %Arg_1.861 = s32[] parameter(1)
  ROOT %add.807 = s32[] add(%Arg_0.1173, %Arg_1.861)
}

%region_7.194._custom_call_lowering_rule.45 (Arg_0.1175: s32[], Arg_1.863: s32[]) -> s32[] {
  %Arg_0.1175 = s32[] parameter(0)
  %Arg_1.863 = s32[] parameter(1)
  ROOT %add.808 = s32[] add(%Arg_0.1175, %Arg_1.863)
}

%region_10.224._custom_call_lowering_rule.45 (Arg_0.1176: s32[], Arg_1.864: s32[]) -> s32[] {
  %Arg_0.1176 = s32[] parameter(0)
  ROOT %Arg_1.864 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.45 (Arg_0.1177: pred[], Arg_1.865: pred[]) -> pred[] {
  %Arg_0.1177 = pred[] parameter(0)
  ROOT %Arg_1.865 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.45 (Arg_0.1178: s32[], Arg_1.866: s32[]) -> s32[] {
  %Arg_0.1178 = s32[] parameter(0)
  %Arg_1.866 = s32[] parameter(1)
  ROOT %add.809 = s32[] add(%Arg_0.1178, %Arg_1.866)
}

%region_0.64._custom_call_lowering_rule.13 (Arg_0.1180: s32[], Arg_1.868: s32[], Arg_2.154: s32[], Arg_3.91: s32[]) -> pred[] {
  %Arg_2.154 = s32[] parameter(2)
  %Arg_3.91 = s32[] parameter(3)
  %Arg_0.1180 = s32[] parameter(0)
  %Arg_1.868 = s32[] parameter(1)
  ROOT %compare.624 = pred[] compare(%Arg_0.1180, %Arg_1.868), direction=LT
}

%region_1.77._custom_call_lowering_rule.13 (Arg_0.1181: s32[], Arg_1.869: s32[]) -> s32[] {
  %Arg_0.1181 = s32[] parameter(0)
  %Arg_1.869 = s32[] parameter(1)
  ROOT %add.810 = s32[] add(%Arg_0.1181, %Arg_1.869)
}

%region_5.173._custom_call_lowering_rule.13 (Arg_0.1182: s32[], Arg_1.870: s32[]) -> s32[] {
  %Arg_0.1182 = s32[] parameter(0)
  ROOT %Arg_1.870 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.13 (Arg_0.1183: pred[], Arg_1.871: pred[]) -> pred[] {
  %Arg_0.1183 = pred[] parameter(0)
  ROOT %Arg_1.871 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.13 (Arg_0.1184: s32[], Arg_1.872: s32[]) -> s32[] {
  %Arg_0.1184 = s32[] parameter(0)
  %Arg_1.872 = s32[] parameter(1)
  ROOT %add.811 = s32[] add(%Arg_0.1184, %Arg_1.872)
}

%region_4.113._custom_call_lowering_rule.13 (Arg_0.1185: s32[], Arg_1.873: s32[]) -> s32[] {
  %Arg_0.1185 = s32[] parameter(0)
  %Arg_1.873 = s32[] parameter(1)
  ROOT %add.812 = s32[] add(%Arg_0.1185, %Arg_1.873)
}

%region_6.181._custom_call_lowering_rule.13 (Arg_0.1186: s32[], Arg_1.874: s32[]) -> s32[] {
  %Arg_0.1186 = s32[] parameter(0)
  ROOT %Arg_1.874 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.13 (Arg_0.1187: s32[], Arg_1.875: s32[]) -> s32[] {
  %Arg_0.1187 = s32[] parameter(0)
  %Arg_1.875 = s32[] parameter(1)
  ROOT %add.813 = s32[] add(%Arg_0.1187, %Arg_1.875)
}

%region_10.227._custom_call_lowering_rule.13 (Arg_0.1188: s32[], Arg_1.876: s32[]) -> s32[] {
  %Arg_0.1188 = s32[] parameter(0)
  ROOT %Arg_1.876 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.13 (Arg_0.1189: pred[], Arg_1.877: pred[]) -> pred[] {
  %Arg_0.1189 = pred[] parameter(0)
  ROOT %Arg_1.877 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.13 (Arg_0.1190: s32[], Arg_1.878: s32[]) -> s32[] {
  %Arg_0.1190 = s32[] parameter(0)
  %Arg_1.878 = s32[] parameter(1)
  ROOT %add.814 = s32[] add(%Arg_0.1190, %Arg_1.878)
}

%region_11.235._custom_call_lowering_rule.13 (Arg_0.1191: s32[], Arg_1.879: s32[]) -> s32[] {
  %Arg_0.1191 = s32[] parameter(0)
  ROOT %Arg_1.879 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.46 (Arg_0.1192: s32[], Arg_1.880: s32[], Arg_2.155: s32[], Arg_3.92: s32[]) -> pred[] {
  %Arg_2.155 = s32[] parameter(2)
  %Arg_3.92 = s32[] parameter(3)
  %Arg_0.1192 = s32[] parameter(0)
  %Arg_1.880 = s32[] parameter(1)
  ROOT %compare.625 = pred[] compare(%Arg_0.1192, %Arg_1.880), direction=LT
}

%region_1.74._custom_call_lowering_rule.46 (Arg_0.1193: s32[], Arg_1.881: s32[]) -> s32[] {
  %Arg_0.1193 = s32[] parameter(0)
  %Arg_1.881 = s32[] parameter(1)
  ROOT %add.815 = s32[] add(%Arg_0.1193, %Arg_1.881)
}

%region_5.170._custom_call_lowering_rule.46 (Arg_0.1194: s32[], Arg_1.882: s32[]) -> s32[] {
  %Arg_0.1194 = s32[] parameter(0)
  ROOT %Arg_1.882 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.46 (Arg_0.1195: pred[], Arg_1.883: pred[]) -> pred[] {
  %Arg_0.1195 = pred[] parameter(0)
  ROOT %Arg_1.883 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.46 (Arg_0.1196: s32[], Arg_1.884: s32[]) -> s32[] {
  %Arg_0.1196 = s32[] parameter(0)
  %Arg_1.884 = s32[] parameter(1)
  ROOT %add.816 = s32[] add(%Arg_0.1196, %Arg_1.884)
}

%region_4.110._custom_call_lowering_rule.46 (Arg_0.1197: s32[], Arg_1.885: s32[]) -> s32[] {
  %Arg_0.1197 = s32[] parameter(0)
  %Arg_1.885 = s32[] parameter(1)
  ROOT %add.817 = s32[] add(%Arg_0.1197, %Arg_1.885)
}

%region_7.194._custom_call_lowering_rule.46 (Arg_0.1199: s32[], Arg_1.887: s32[]) -> s32[] {
  %Arg_0.1199 = s32[] parameter(0)
  %Arg_1.887 = s32[] parameter(1)
  ROOT %add.818 = s32[] add(%Arg_0.1199, %Arg_1.887)
}

%region_10.224._custom_call_lowering_rule.46 (Arg_0.1200: s32[], Arg_1.888: s32[]) -> s32[] {
  %Arg_0.1200 = s32[] parameter(0)
  ROOT %Arg_1.888 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.46 (Arg_0.1201: pred[], Arg_1.889: pred[]) -> pred[] {
  %Arg_0.1201 = pred[] parameter(0)
  ROOT %Arg_1.889 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.46 (Arg_0.1202: s32[], Arg_1.890: s32[]) -> s32[] {
  %Arg_0.1202 = s32[] parameter(0)
  %Arg_1.890 = s32[] parameter(1)
  ROOT %add.819 = s32[] add(%Arg_0.1202, %Arg_1.890)
}

%region_0.64._custom_call_lowering_rule.14 (Arg_0.1204: s32[], Arg_1.892: s32[], Arg_2.156: s32[], Arg_3.93: s32[]) -> pred[] {
  %Arg_2.156 = s32[] parameter(2)
  %Arg_3.93 = s32[] parameter(3)
  %Arg_0.1204 = s32[] parameter(0)
  %Arg_1.892 = s32[] parameter(1)
  ROOT %compare.630 = pred[] compare(%Arg_0.1204, %Arg_1.892), direction=LT
}

%region_1.77._custom_call_lowering_rule.14 (Arg_0.1205: s32[], Arg_1.893: s32[]) -> s32[] {
  %Arg_0.1205 = s32[] parameter(0)
  %Arg_1.893 = s32[] parameter(1)
  ROOT %add.820 = s32[] add(%Arg_0.1205, %Arg_1.893)
}

%region_5.173._custom_call_lowering_rule.14 (Arg_0.1206: s32[], Arg_1.894: s32[]) -> s32[] {
  %Arg_0.1206 = s32[] parameter(0)
  ROOT %Arg_1.894 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.14 (Arg_0.1207: pred[], Arg_1.895: pred[]) -> pred[] {
  %Arg_0.1207 = pred[] parameter(0)
  ROOT %Arg_1.895 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.14 (Arg_0.1208: s32[], Arg_1.896: s32[]) -> s32[] {
  %Arg_0.1208 = s32[] parameter(0)
  %Arg_1.896 = s32[] parameter(1)
  ROOT %add.821 = s32[] add(%Arg_0.1208, %Arg_1.896)
}

%region_4.113._custom_call_lowering_rule.14 (Arg_0.1209: s32[], Arg_1.897: s32[]) -> s32[] {
  %Arg_0.1209 = s32[] parameter(0)
  %Arg_1.897 = s32[] parameter(1)
  ROOT %add.822 = s32[] add(%Arg_0.1209, %Arg_1.897)
}

%region_6.181._custom_call_lowering_rule.14 (Arg_0.1210: s32[], Arg_1.898: s32[]) -> s32[] {
  %Arg_0.1210 = s32[] parameter(0)
  ROOT %Arg_1.898 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.14 (Arg_0.1211: s32[], Arg_1.899: s32[]) -> s32[] {
  %Arg_0.1211 = s32[] parameter(0)
  %Arg_1.899 = s32[] parameter(1)
  ROOT %add.823 = s32[] add(%Arg_0.1211, %Arg_1.899)
}

%region_10.227._custom_call_lowering_rule.14 (Arg_0.1212: s32[], Arg_1.900: s32[]) -> s32[] {
  %Arg_0.1212 = s32[] parameter(0)
  ROOT %Arg_1.900 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.14 (Arg_0.1213: pred[], Arg_1.901: pred[]) -> pred[] {
  %Arg_0.1213 = pred[] parameter(0)
  ROOT %Arg_1.901 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.14 (Arg_0.1214: s32[], Arg_1.902: s32[]) -> s32[] {
  %Arg_0.1214 = s32[] parameter(0)
  %Arg_1.902 = s32[] parameter(1)
  ROOT %add.824 = s32[] add(%Arg_0.1214, %Arg_1.902)
}

%region_11.235._custom_call_lowering_rule.14 (Arg_0.1215: s32[], Arg_1.903: s32[]) -> s32[] {
  %Arg_0.1215 = s32[] parameter(0)
  ROOT %Arg_1.903 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.47 (Arg_0.1216: s32[], Arg_1.904: s32[], Arg_2.157: s32[], Arg_3.94: s32[]) -> pred[] {
  %Arg_2.157 = s32[] parameter(2)
  %Arg_3.94 = s32[] parameter(3)
  %Arg_0.1216 = s32[] parameter(0)
  %Arg_1.904 = s32[] parameter(1)
  ROOT %compare.631 = pred[] compare(%Arg_0.1216, %Arg_1.904), direction=LT
}

%region_1.74._custom_call_lowering_rule.47 (Arg_0.1217: s32[], Arg_1.905: s32[]) -> s32[] {
  %Arg_0.1217 = s32[] parameter(0)
  %Arg_1.905 = s32[] parameter(1)
  ROOT %add.825 = s32[] add(%Arg_0.1217, %Arg_1.905)
}

%region_5.170._custom_call_lowering_rule.47 (Arg_0.1218: s32[], Arg_1.906: s32[]) -> s32[] {
  %Arg_0.1218 = s32[] parameter(0)
  ROOT %Arg_1.906 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.47 (Arg_0.1219: pred[], Arg_1.907: pred[]) -> pred[] {
  %Arg_0.1219 = pred[] parameter(0)
  ROOT %Arg_1.907 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.47 (Arg_0.1220: s32[], Arg_1.908: s32[]) -> s32[] {
  %Arg_0.1220 = s32[] parameter(0)
  %Arg_1.908 = s32[] parameter(1)
  ROOT %add.826 = s32[] add(%Arg_0.1220, %Arg_1.908)
}

%region_4.110._custom_call_lowering_rule.47 (Arg_0.1221: s32[], Arg_1.909: s32[]) -> s32[] {
  %Arg_0.1221 = s32[] parameter(0)
  %Arg_1.909 = s32[] parameter(1)
  ROOT %add.827 = s32[] add(%Arg_0.1221, %Arg_1.909)
}

%region_7.194._custom_call_lowering_rule.47 (Arg_0.1223: s32[], Arg_1.911: s32[]) -> s32[] {
  %Arg_0.1223 = s32[] parameter(0)
  %Arg_1.911 = s32[] parameter(1)
  ROOT %add.828 = s32[] add(%Arg_0.1223, %Arg_1.911)
}

%region_10.224._custom_call_lowering_rule.47 (Arg_0.1224: s32[], Arg_1.912: s32[]) -> s32[] {
  %Arg_0.1224 = s32[] parameter(0)
  ROOT %Arg_1.912 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.47 (Arg_0.1225: pred[], Arg_1.913: pred[]) -> pred[] {
  %Arg_0.1225 = pred[] parameter(0)
  ROOT %Arg_1.913 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.47 (Arg_0.1226: s32[], Arg_1.914: s32[]) -> s32[] {
  %Arg_0.1226 = s32[] parameter(0)
  %Arg_1.914 = s32[] parameter(1)
  ROOT %add.829 = s32[] add(%Arg_0.1226, %Arg_1.914)
}

%region_0.64._custom_call_lowering_rule.15 (Arg_0.1228: s32[], Arg_1.916: s32[], Arg_2.158: s32[], Arg_3.95: s32[]) -> pred[] {
  %Arg_2.158 = s32[] parameter(2)
  %Arg_3.95 = s32[] parameter(3)
  %Arg_0.1228 = s32[] parameter(0)
  %Arg_1.916 = s32[] parameter(1)
  ROOT %compare.636 = pred[] compare(%Arg_0.1228, %Arg_1.916), direction=LT
}

%region_1.77._custom_call_lowering_rule.15 (Arg_0.1229: s32[], Arg_1.917: s32[]) -> s32[] {
  %Arg_0.1229 = s32[] parameter(0)
  %Arg_1.917 = s32[] parameter(1)
  ROOT %add.830 = s32[] add(%Arg_0.1229, %Arg_1.917)
}

%region_5.173._custom_call_lowering_rule.15 (Arg_0.1230: s32[], Arg_1.918: s32[]) -> s32[] {
  %Arg_0.1230 = s32[] parameter(0)
  ROOT %Arg_1.918 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.15 (Arg_0.1231: pred[], Arg_1.919: pred[]) -> pred[] {
  %Arg_0.1231 = pred[] parameter(0)
  ROOT %Arg_1.919 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.15 (Arg_0.1232: s32[], Arg_1.920: s32[]) -> s32[] {
  %Arg_0.1232 = s32[] parameter(0)
  %Arg_1.920 = s32[] parameter(1)
  ROOT %add.831 = s32[] add(%Arg_0.1232, %Arg_1.920)
}

%region_4.113._custom_call_lowering_rule.15 (Arg_0.1233: s32[], Arg_1.921: s32[]) -> s32[] {
  %Arg_0.1233 = s32[] parameter(0)
  %Arg_1.921 = s32[] parameter(1)
  ROOT %add.832 = s32[] add(%Arg_0.1233, %Arg_1.921)
}

%region_6.181._custom_call_lowering_rule.15 (Arg_0.1234: s32[], Arg_1.922: s32[]) -> s32[] {
  %Arg_0.1234 = s32[] parameter(0)
  ROOT %Arg_1.922 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.15 (Arg_0.1235: s32[], Arg_1.923: s32[]) -> s32[] {
  %Arg_0.1235 = s32[] parameter(0)
  %Arg_1.923 = s32[] parameter(1)
  ROOT %add.833 = s32[] add(%Arg_0.1235, %Arg_1.923)
}

%region_10.227._custom_call_lowering_rule.15 (Arg_0.1236: s32[], Arg_1.924: s32[]) -> s32[] {
  %Arg_0.1236 = s32[] parameter(0)
  ROOT %Arg_1.924 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.15 (Arg_0.1237: pred[], Arg_1.925: pred[]) -> pred[] {
  %Arg_0.1237 = pred[] parameter(0)
  ROOT %Arg_1.925 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.15 (Arg_0.1238: s32[], Arg_1.926: s32[]) -> s32[] {
  %Arg_0.1238 = s32[] parameter(0)
  %Arg_1.926 = s32[] parameter(1)
  ROOT %add.834 = s32[] add(%Arg_0.1238, %Arg_1.926)
}

%region_11.235._custom_call_lowering_rule.15 (Arg_0.1239: s32[], Arg_1.927: s32[]) -> s32[] {
  %Arg_0.1239 = s32[] parameter(0)
  ROOT %Arg_1.927 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.48 (Arg_0.1240: s32[], Arg_1.928: s32[], Arg_2.159: s32[], Arg_3.96: s32[]) -> pred[] {
  %Arg_2.159 = s32[] parameter(2)
  %Arg_3.96 = s32[] parameter(3)
  %Arg_0.1240 = s32[] parameter(0)
  %Arg_1.928 = s32[] parameter(1)
  ROOT %compare.637 = pred[] compare(%Arg_0.1240, %Arg_1.928), direction=LT
}

%region_1.74._custom_call_lowering_rule.48 (Arg_0.1241: s32[], Arg_1.929: s32[]) -> s32[] {
  %Arg_0.1241 = s32[] parameter(0)
  %Arg_1.929 = s32[] parameter(1)
  ROOT %add.835 = s32[] add(%Arg_0.1241, %Arg_1.929)
}

%region_5.170._custom_call_lowering_rule.48 (Arg_0.1242: s32[], Arg_1.930: s32[]) -> s32[] {
  %Arg_0.1242 = s32[] parameter(0)
  ROOT %Arg_1.930 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.48 (Arg_0.1243: pred[], Arg_1.931: pred[]) -> pred[] {
  %Arg_0.1243 = pred[] parameter(0)
  ROOT %Arg_1.931 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.48 (Arg_0.1244: s32[], Arg_1.932: s32[]) -> s32[] {
  %Arg_0.1244 = s32[] parameter(0)
  %Arg_1.932 = s32[] parameter(1)
  ROOT %add.836 = s32[] add(%Arg_0.1244, %Arg_1.932)
}

%region_4.110._custom_call_lowering_rule.48 (Arg_0.1245: s32[], Arg_1.933: s32[]) -> s32[] {
  %Arg_0.1245 = s32[] parameter(0)
  %Arg_1.933 = s32[] parameter(1)
  ROOT %add.837 = s32[] add(%Arg_0.1245, %Arg_1.933)
}

%region_7.194._custom_call_lowering_rule.48 (Arg_0.1247: s32[], Arg_1.935: s32[]) -> s32[] {
  %Arg_0.1247 = s32[] parameter(0)
  %Arg_1.935 = s32[] parameter(1)
  ROOT %add.838 = s32[] add(%Arg_0.1247, %Arg_1.935)
}

%region_10.224._custom_call_lowering_rule.48 (Arg_0.1248: s32[], Arg_1.936: s32[]) -> s32[] {
  %Arg_0.1248 = s32[] parameter(0)
  ROOT %Arg_1.936 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.48 (Arg_0.1249: pred[], Arg_1.937: pred[]) -> pred[] {
  %Arg_0.1249 = pred[] parameter(0)
  ROOT %Arg_1.937 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.48 (Arg_0.1250: s32[], Arg_1.938: s32[]) -> s32[] {
  %Arg_0.1250 = s32[] parameter(0)
  %Arg_1.938 = s32[] parameter(1)
  ROOT %add.839 = s32[] add(%Arg_0.1250, %Arg_1.938)
}

%region_0.64._custom_call_lowering_rule.16 (Arg_0.1252: s32[], Arg_1.940: s32[], Arg_2.160: s32[], Arg_3.97: s32[]) -> pred[] {
  %Arg_2.160 = s32[] parameter(2)
  %Arg_3.97 = s32[] parameter(3)
  %Arg_0.1252 = s32[] parameter(0)
  %Arg_1.940 = s32[] parameter(1)
  ROOT %compare.642 = pred[] compare(%Arg_0.1252, %Arg_1.940), direction=LT
}

%region_1.77._custom_call_lowering_rule.16 (Arg_0.1253: s32[], Arg_1.941: s32[]) -> s32[] {
  %Arg_0.1253 = s32[] parameter(0)
  %Arg_1.941 = s32[] parameter(1)
  ROOT %add.840 = s32[] add(%Arg_0.1253, %Arg_1.941)
}

%region_5.173._custom_call_lowering_rule.16 (Arg_0.1254: s32[], Arg_1.942: s32[]) -> s32[] {
  %Arg_0.1254 = s32[] parameter(0)
  ROOT %Arg_1.942 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.16 (Arg_0.1255: pred[], Arg_1.943: pred[]) -> pred[] {
  %Arg_0.1255 = pred[] parameter(0)
  ROOT %Arg_1.943 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.16 (Arg_0.1256: s32[], Arg_1.944: s32[]) -> s32[] {
  %Arg_0.1256 = s32[] parameter(0)
  %Arg_1.944 = s32[] parameter(1)
  ROOT %add.841 = s32[] add(%Arg_0.1256, %Arg_1.944)
}

%region_4.113._custom_call_lowering_rule.16 (Arg_0.1257: s32[], Arg_1.945: s32[]) -> s32[] {
  %Arg_0.1257 = s32[] parameter(0)
  %Arg_1.945 = s32[] parameter(1)
  ROOT %add.842 = s32[] add(%Arg_0.1257, %Arg_1.945)
}

%region_6.181._custom_call_lowering_rule.16 (Arg_0.1258: s32[], Arg_1.946: s32[]) -> s32[] {
  %Arg_0.1258 = s32[] parameter(0)
  ROOT %Arg_1.946 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.16 (Arg_0.1259: s32[], Arg_1.947: s32[]) -> s32[] {
  %Arg_0.1259 = s32[] parameter(0)
  %Arg_1.947 = s32[] parameter(1)
  ROOT %add.843 = s32[] add(%Arg_0.1259, %Arg_1.947)
}

%region_10.227._custom_call_lowering_rule.16 (Arg_0.1260: s32[], Arg_1.948: s32[]) -> s32[] {
  %Arg_0.1260 = s32[] parameter(0)
  ROOT %Arg_1.948 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.16 (Arg_0.1261: pred[], Arg_1.949: pred[]) -> pred[] {
  %Arg_0.1261 = pred[] parameter(0)
  ROOT %Arg_1.949 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.16 (Arg_0.1262: s32[], Arg_1.950: s32[]) -> s32[] {
  %Arg_0.1262 = s32[] parameter(0)
  %Arg_1.950 = s32[] parameter(1)
  ROOT %add.844 = s32[] add(%Arg_0.1262, %Arg_1.950)
}

%region_11.235._custom_call_lowering_rule.16 (Arg_0.1263: s32[], Arg_1.951: s32[]) -> s32[] {
  %Arg_0.1263 = s32[] parameter(0)
  ROOT %Arg_1.951 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.49 (Arg_0.1264: s32[], Arg_1.952: s32[], Arg_2.161: s32[], Arg_3.98: s32[]) -> pred[] {
  %Arg_2.161 = s32[] parameter(2)
  %Arg_3.98 = s32[] parameter(3)
  %Arg_0.1264 = s32[] parameter(0)
  %Arg_1.952 = s32[] parameter(1)
  ROOT %compare.643 = pred[] compare(%Arg_0.1264, %Arg_1.952), direction=LT
}

%region_1.74._custom_call_lowering_rule.49 (Arg_0.1265: s32[], Arg_1.953: s32[]) -> s32[] {
  %Arg_0.1265 = s32[] parameter(0)
  %Arg_1.953 = s32[] parameter(1)
  ROOT %add.845 = s32[] add(%Arg_0.1265, %Arg_1.953)
}

%region_5.170._custom_call_lowering_rule.49 (Arg_0.1266: s32[], Arg_1.954: s32[]) -> s32[] {
  %Arg_0.1266 = s32[] parameter(0)
  ROOT %Arg_1.954 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.49 (Arg_0.1267: pred[], Arg_1.955: pred[]) -> pred[] {
  %Arg_0.1267 = pred[] parameter(0)
  ROOT %Arg_1.955 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.49 (Arg_0.1268: s32[], Arg_1.956: s32[]) -> s32[] {
  %Arg_0.1268 = s32[] parameter(0)
  %Arg_1.956 = s32[] parameter(1)
  ROOT %add.846 = s32[] add(%Arg_0.1268, %Arg_1.956)
}

%region_4.110._custom_call_lowering_rule.49 (Arg_0.1269: s32[], Arg_1.957: s32[]) -> s32[] {
  %Arg_0.1269 = s32[] parameter(0)
  %Arg_1.957 = s32[] parameter(1)
  ROOT %add.847 = s32[] add(%Arg_0.1269, %Arg_1.957)
}

%region_7.194._custom_call_lowering_rule.49 (Arg_0.1271: s32[], Arg_1.959: s32[]) -> s32[] {
  %Arg_0.1271 = s32[] parameter(0)
  %Arg_1.959 = s32[] parameter(1)
  ROOT %add.848 = s32[] add(%Arg_0.1271, %Arg_1.959)
}

%region_10.224._custom_call_lowering_rule.49 (Arg_0.1272: s32[], Arg_1.960: s32[]) -> s32[] {
  %Arg_0.1272 = s32[] parameter(0)
  ROOT %Arg_1.960 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.49 (Arg_0.1273: pred[], Arg_1.961: pred[]) -> pred[] {
  %Arg_0.1273 = pred[] parameter(0)
  ROOT %Arg_1.961 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.49 (Arg_0.1274: s32[], Arg_1.962: s32[]) -> s32[] {
  %Arg_0.1274 = s32[] parameter(0)
  %Arg_1.962 = s32[] parameter(1)
  ROOT %add.849 = s32[] add(%Arg_0.1274, %Arg_1.962)
}

%region_0.64._custom_call_lowering_rule.17 (Arg_0.1276: s32[], Arg_1.964: s32[], Arg_2.162: s32[], Arg_3.99: s32[]) -> pred[] {
  %Arg_2.162 = s32[] parameter(2)
  %Arg_3.99 = s32[] parameter(3)
  %Arg_0.1276 = s32[] parameter(0)
  %Arg_1.964 = s32[] parameter(1)
  ROOT %compare.648 = pred[] compare(%Arg_0.1276, %Arg_1.964), direction=LT
}

%region_1.77._custom_call_lowering_rule.17 (Arg_0.1277: s32[], Arg_1.965: s32[]) -> s32[] {
  %Arg_0.1277 = s32[] parameter(0)
  %Arg_1.965 = s32[] parameter(1)
  ROOT %add.850 = s32[] add(%Arg_0.1277, %Arg_1.965)
}

%region_5.173._custom_call_lowering_rule.17 (Arg_0.1278: s32[], Arg_1.966: s32[]) -> s32[] {
  %Arg_0.1278 = s32[] parameter(0)
  ROOT %Arg_1.966 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.17 (Arg_0.1279: pred[], Arg_1.967: pred[]) -> pred[] {
  %Arg_0.1279 = pred[] parameter(0)
  ROOT %Arg_1.967 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.17 (Arg_0.1280: s32[], Arg_1.968: s32[]) -> s32[] {
  %Arg_0.1280 = s32[] parameter(0)
  %Arg_1.968 = s32[] parameter(1)
  ROOT %add.851 = s32[] add(%Arg_0.1280, %Arg_1.968)
}

%region_4.113._custom_call_lowering_rule.17 (Arg_0.1281: s32[], Arg_1.969: s32[]) -> s32[] {
  %Arg_0.1281 = s32[] parameter(0)
  %Arg_1.969 = s32[] parameter(1)
  ROOT %add.852 = s32[] add(%Arg_0.1281, %Arg_1.969)
}

%region_6.181._custom_call_lowering_rule.17 (Arg_0.1282: s32[], Arg_1.970: s32[]) -> s32[] {
  %Arg_0.1282 = s32[] parameter(0)
  ROOT %Arg_1.970 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.17 (Arg_0.1283: s32[], Arg_1.971: s32[]) -> s32[] {
  %Arg_0.1283 = s32[] parameter(0)
  %Arg_1.971 = s32[] parameter(1)
  ROOT %add.853 = s32[] add(%Arg_0.1283, %Arg_1.971)
}

%region_10.227._custom_call_lowering_rule.17 (Arg_0.1284: s32[], Arg_1.972: s32[]) -> s32[] {
  %Arg_0.1284 = s32[] parameter(0)
  ROOT %Arg_1.972 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.17 (Arg_0.1285: pred[], Arg_1.973: pred[]) -> pred[] {
  %Arg_0.1285 = pred[] parameter(0)
  ROOT %Arg_1.973 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.17 (Arg_0.1286: s32[], Arg_1.974: s32[]) -> s32[] {
  %Arg_0.1286 = s32[] parameter(0)
  %Arg_1.974 = s32[] parameter(1)
  ROOT %add.854 = s32[] add(%Arg_0.1286, %Arg_1.974)
}

%region_11.235._custom_call_lowering_rule.17 (Arg_0.1287: s32[], Arg_1.975: s32[]) -> s32[] {
  %Arg_0.1287 = s32[] parameter(0)
  ROOT %Arg_1.975 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.50 (Arg_0.1288: s32[], Arg_1.976: s32[], Arg_2.163: s32[], Arg_3.100: s32[]) -> pred[] {
  %Arg_2.163 = s32[] parameter(2)
  %Arg_3.100 = s32[] parameter(3)
  %Arg_0.1288 = s32[] parameter(0)
  %Arg_1.976 = s32[] parameter(1)
  ROOT %compare.649 = pred[] compare(%Arg_0.1288, %Arg_1.976), direction=LT
}

%region_1.74._custom_call_lowering_rule.50 (Arg_0.1289: s32[], Arg_1.977: s32[]) -> s32[] {
  %Arg_0.1289 = s32[] parameter(0)
  %Arg_1.977 = s32[] parameter(1)
  ROOT %add.855 = s32[] add(%Arg_0.1289, %Arg_1.977)
}

%region_5.170._custom_call_lowering_rule.50 (Arg_0.1290: s32[], Arg_1.978: s32[]) -> s32[] {
  %Arg_0.1290 = s32[] parameter(0)
  ROOT %Arg_1.978 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.50 (Arg_0.1292: pred[], Arg_1.979: pred[]) -> pred[] {
  %Arg_0.1292 = pred[] parameter(0)
  ROOT %Arg_1.979 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.50 (Arg_0.1293: s32[], Arg_1.980: s32[]) -> s32[] {
  %Arg_0.1293 = s32[] parameter(0)
  %Arg_1.980 = s32[] parameter(1)
  ROOT %add.856 = s32[] add(%Arg_0.1293, %Arg_1.980)
}

%region_4.110._custom_call_lowering_rule.50 (Arg_0.1294: s32[], Arg_1.981: s32[]) -> s32[] {
  %Arg_0.1294 = s32[] parameter(0)
  %Arg_1.981 = s32[] parameter(1)
  ROOT %add.857 = s32[] add(%Arg_0.1294, %Arg_1.981)
}

%region_7.194._custom_call_lowering_rule.50 (Arg_0.1296: s32[], Arg_1.983: s32[]) -> s32[] {
  %Arg_0.1296 = s32[] parameter(0)
  %Arg_1.983 = s32[] parameter(1)
  ROOT %add.858 = s32[] add(%Arg_0.1296, %Arg_1.983)
}

%region_10.224._custom_call_lowering_rule.50 (Arg_0.1297: s32[], Arg_1.984: s32[]) -> s32[] {
  %Arg_0.1297 = s32[] parameter(0)
  ROOT %Arg_1.984 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.50 (Arg_0.1298: pred[], Arg_1.985: pred[]) -> pred[] {
  %Arg_0.1298 = pred[] parameter(0)
  ROOT %Arg_1.985 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.50 (Arg_0.1299: s32[], Arg_1.986: s32[]) -> s32[] {
  %Arg_0.1299 = s32[] parameter(0)
  %Arg_1.986 = s32[] parameter(1)
  ROOT %add.859 = s32[] add(%Arg_0.1299, %Arg_1.986)
}

%region_0.64._custom_call_lowering_rule.18 (Arg_0.1301: s32[], Arg_1.988: s32[], Arg_2.164: s32[], Arg_3.101: s32[]) -> pred[] {
  %Arg_2.164 = s32[] parameter(2)
  %Arg_3.101 = s32[] parameter(3)
  %Arg_0.1301 = s32[] parameter(0)
  %Arg_1.988 = s32[] parameter(1)
  ROOT %compare.654 = pred[] compare(%Arg_0.1301, %Arg_1.988), direction=LT
}

%region_1.77._custom_call_lowering_rule.18 (Arg_0.1303: s32[], Arg_1.989: s32[]) -> s32[] {
  %Arg_0.1303 = s32[] parameter(0)
  %Arg_1.989 = s32[] parameter(1)
  ROOT %add.860 = s32[] add(%Arg_0.1303, %Arg_1.989)
}

%region_5.173._custom_call_lowering_rule.18 (Arg_0.1304: s32[], Arg_1.990: s32[]) -> s32[] {
  %Arg_0.1304 = s32[] parameter(0)
  ROOT %Arg_1.990 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.18 (Arg_0.1305: pred[], Arg_1.991: pred[]) -> pred[] {
  %Arg_0.1305 = pred[] parameter(0)
  ROOT %Arg_1.991 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.18 (Arg_0.1306: s32[], Arg_1.992: s32[]) -> s32[] {
  %Arg_0.1306 = s32[] parameter(0)
  %Arg_1.992 = s32[] parameter(1)
  ROOT %add.861 = s32[] add(%Arg_0.1306, %Arg_1.992)
}

%region_4.113._custom_call_lowering_rule.18 (Arg_0.1307: s32[], Arg_1.993: s32[]) -> s32[] {
  %Arg_0.1307 = s32[] parameter(0)
  %Arg_1.993 = s32[] parameter(1)
  ROOT %add.862 = s32[] add(%Arg_0.1307, %Arg_1.993)
}

%region_6.181._custom_call_lowering_rule.18 (Arg_0.1308: s32[], Arg_1.994: s32[]) -> s32[] {
  %Arg_0.1308 = s32[] parameter(0)
  ROOT %Arg_1.994 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.18 (Arg_0.1309: s32[], Arg_1.995: s32[]) -> s32[] {
  %Arg_0.1309 = s32[] parameter(0)
  %Arg_1.995 = s32[] parameter(1)
  ROOT %add.863 = s32[] add(%Arg_0.1309, %Arg_1.995)
}

%region_10.227._custom_call_lowering_rule.18 (Arg_0.1311: s32[], Arg_1.996: s32[]) -> s32[] {
  %Arg_0.1311 = s32[] parameter(0)
  ROOT %Arg_1.996 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.18 (Arg_0.1312: pred[], Arg_1.997: pred[]) -> pred[] {
  %Arg_0.1312 = pred[] parameter(0)
  ROOT %Arg_1.997 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.18 (Arg_0.1313: s32[], Arg_1.998: s32[]) -> s32[] {
  %Arg_0.1313 = s32[] parameter(0)
  %Arg_1.998 = s32[] parameter(1)
  ROOT %add.864 = s32[] add(%Arg_0.1313, %Arg_1.998)
}

%region_11.235._custom_call_lowering_rule.18 (Arg_0.1314: s32[], Arg_1.999: s32[]) -> s32[] {
  %Arg_0.1314 = s32[] parameter(0)
  ROOT %Arg_1.999 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.51 (Arg_0.1316: s32[], Arg_1.1000: s32[], Arg_2.165: s32[], Arg_3.102: s32[]) -> pred[] {
  %Arg_2.165 = s32[] parameter(2)
  %Arg_3.102 = s32[] parameter(3)
  %Arg_0.1316 = s32[] parameter(0)
  %Arg_1.1000 = s32[] parameter(1)
  ROOT %compare.655 = pred[] compare(%Arg_0.1316, %Arg_1.1000), direction=LT
}

%region_1.74._custom_call_lowering_rule.51 (Arg_0.1317: s32[], Arg_1.1001: s32[]) -> s32[] {
  %Arg_0.1317 = s32[] parameter(0)
  %Arg_1.1001 = s32[] parameter(1)
  ROOT %add.865 = s32[] add(%Arg_0.1317, %Arg_1.1001)
}

%region_5.170._custom_call_lowering_rule.51 (Arg_0.1318: s32[], Arg_1.1002: s32[]) -> s32[] {
  %Arg_0.1318 = s32[] parameter(0)
  ROOT %Arg_1.1002 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.51 (Arg_0.1319: pred[], Arg_1.1003: pred[]) -> pred[] {
  %Arg_0.1319 = pred[] parameter(0)
  ROOT %Arg_1.1003 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.51 (Arg_0.1320: s32[], Arg_1.1004: s32[]) -> s32[] {
  %Arg_0.1320 = s32[] parameter(0)
  %Arg_1.1004 = s32[] parameter(1)
  ROOT %add.866 = s32[] add(%Arg_0.1320, %Arg_1.1004)
}

%region_4.110._custom_call_lowering_rule.51 (Arg_0.1321: s32[], Arg_1.1005: s32[]) -> s32[] {
  %Arg_0.1321 = s32[] parameter(0)
  %Arg_1.1005 = s32[] parameter(1)
  ROOT %add.867 = s32[] add(%Arg_0.1321, %Arg_1.1005)
}

%region_7.194._custom_call_lowering_rule.51 (Arg_0.1323: s32[], Arg_1.1007: s32[]) -> s32[] {
  %Arg_0.1323 = s32[] parameter(0)
  %Arg_1.1007 = s32[] parameter(1)
  ROOT %add.868 = s32[] add(%Arg_0.1323, %Arg_1.1007)
}

%region_10.224._custom_call_lowering_rule.51 (Arg_0.1324: s32[], Arg_1.1008: s32[]) -> s32[] {
  %Arg_0.1324 = s32[] parameter(0)
  ROOT %Arg_1.1008 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.51 (Arg_0.1325: pred[], Arg_1.1009: pred[]) -> pred[] {
  %Arg_0.1325 = pred[] parameter(0)
  ROOT %Arg_1.1009 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.51 (Arg_0.1326: s32[], Arg_1.1010: s32[]) -> s32[] {
  %Arg_0.1326 = s32[] parameter(0)
  %Arg_1.1010 = s32[] parameter(1)
  ROOT %add.869 = s32[] add(%Arg_0.1326, %Arg_1.1010)
}

%region_0.64._custom_call_lowering_rule.19 (Arg_0.1328: s32[], Arg_1.1012: s32[], Arg_2.166: s32[], Arg_3.103: s32[]) -> pred[] {
  %Arg_2.166 = s32[] parameter(2)
  %Arg_3.103 = s32[] parameter(3)
  %Arg_0.1328 = s32[] parameter(0)
  %Arg_1.1012 = s32[] parameter(1)
  ROOT %compare.660 = pred[] compare(%Arg_0.1328, %Arg_1.1012), direction=LT
}

%region_1.77._custom_call_lowering_rule.19 (Arg_0.1329: s32[], Arg_1.1013: s32[]) -> s32[] {
  %Arg_0.1329 = s32[] parameter(0)
  %Arg_1.1013 = s32[] parameter(1)
  ROOT %add.870 = s32[] add(%Arg_0.1329, %Arg_1.1013)
}

%region_5.173._custom_call_lowering_rule.19 (Arg_0.1331: s32[], Arg_1.1014: s32[]) -> s32[] {
  %Arg_0.1331 = s32[] parameter(0)
  ROOT %Arg_1.1014 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.19 (Arg_0.1332: pred[], Arg_1.1015: pred[]) -> pred[] {
  %Arg_0.1332 = pred[] parameter(0)
  ROOT %Arg_1.1015 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.19 (Arg_0.1333: s32[], Arg_1.1016: s32[]) -> s32[] {
  %Arg_0.1333 = s32[] parameter(0)
  %Arg_1.1016 = s32[] parameter(1)
  ROOT %add.871 = s32[] add(%Arg_0.1333, %Arg_1.1016)
}

%region_4.113._custom_call_lowering_rule.19 (Arg_0.1334: s32[], Arg_1.1017: s32[]) -> s32[] {
  %Arg_0.1334 = s32[] parameter(0)
  %Arg_1.1017 = s32[] parameter(1)
  ROOT %add.872 = s32[] add(%Arg_0.1334, %Arg_1.1017)
}

%region_6.181._custom_call_lowering_rule.19 (Arg_0.1335: s32[], Arg_1.1018: s32[]) -> s32[] {
  %Arg_0.1335 = s32[] parameter(0)
  ROOT %Arg_1.1018 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.19 (Arg_0.1336: s32[], Arg_1.1019: s32[]) -> s32[] {
  %Arg_0.1336 = s32[] parameter(0)
  %Arg_1.1019 = s32[] parameter(1)
  ROOT %add.873 = s32[] add(%Arg_0.1336, %Arg_1.1019)
}

%region_10.227._custom_call_lowering_rule.19 (Arg_0.1337: s32[], Arg_1.1020: s32[]) -> s32[] {
  %Arg_0.1337 = s32[] parameter(0)
  ROOT %Arg_1.1020 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.19 (Arg_0.1338: pred[], Arg_1.1021: pred[]) -> pred[] {
  %Arg_0.1338 = pred[] parameter(0)
  ROOT %Arg_1.1021 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.19 (Arg_0.1339: s32[], Arg_1.1022: s32[]) -> s32[] {
  %Arg_0.1339 = s32[] parameter(0)
  %Arg_1.1022 = s32[] parameter(1)
  ROOT %add.874 = s32[] add(%Arg_0.1339, %Arg_1.1022)
}

%region_11.235._custom_call_lowering_rule.19 (Arg_0.1340: s32[], Arg_1.1023: s32[]) -> s32[] {
  %Arg_0.1340 = s32[] parameter(0)
  ROOT %Arg_1.1023 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.52 (Arg_0.1341: s32[], Arg_1.1024: s32[], Arg_2.167: s32[], Arg_3.104: s32[]) -> pred[] {
  %Arg_2.167 = s32[] parameter(2)
  %Arg_3.104 = s32[] parameter(3)
  %Arg_0.1341 = s32[] parameter(0)
  %Arg_1.1024 = s32[] parameter(1)
  ROOT %compare.661 = pred[] compare(%Arg_0.1341, %Arg_1.1024), direction=LT
}

%region_1.74._custom_call_lowering_rule.52 (Arg_0.1342: s32[], Arg_1.1025: s32[]) -> s32[] {
  %Arg_0.1342 = s32[] parameter(0)
  %Arg_1.1025 = s32[] parameter(1)
  ROOT %add.875 = s32[] add(%Arg_0.1342, %Arg_1.1025)
}

%region_5.170._custom_call_lowering_rule.52 (Arg_0.1343: s32[], Arg_1.1026: s32[]) -> s32[] {
  %Arg_0.1343 = s32[] parameter(0)
  ROOT %Arg_1.1026 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.52 (Arg_0.1344: pred[], Arg_1.1027: pred[]) -> pred[] {
  %Arg_0.1344 = pred[] parameter(0)
  ROOT %Arg_1.1027 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.52 (Arg_0.1345: s32[], Arg_1.1028: s32[]) -> s32[] {
  %Arg_0.1345 = s32[] parameter(0)
  %Arg_1.1028 = s32[] parameter(1)
  ROOT %add.876 = s32[] add(%Arg_0.1345, %Arg_1.1028)
}

%region_4.110._custom_call_lowering_rule.52 (Arg_0.1346: s32[], Arg_1.1029: s32[]) -> s32[] {
  %Arg_0.1346 = s32[] parameter(0)
  %Arg_1.1029 = s32[] parameter(1)
  ROOT %add.877 = s32[] add(%Arg_0.1346, %Arg_1.1029)
}

%region_7.194._custom_call_lowering_rule.52 (Arg_0.1348: s32[], Arg_1.1031: s32[]) -> s32[] {
  %Arg_0.1348 = s32[] parameter(0)
  %Arg_1.1031 = s32[] parameter(1)
  ROOT %add.878 = s32[] add(%Arg_0.1348, %Arg_1.1031)
}

%region_10.224._custom_call_lowering_rule.52 (Arg_0.1349: s32[], Arg_1.1032: s32[]) -> s32[] {
  %Arg_0.1349 = s32[] parameter(0)
  ROOT %Arg_1.1032 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.52 (Arg_0.1350: pred[], Arg_1.1033: pred[]) -> pred[] {
  %Arg_0.1350 = pred[] parameter(0)
  ROOT %Arg_1.1033 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.52 (Arg_0.1351: s32[], Arg_1.1034: s32[]) -> s32[] {
  %Arg_0.1351 = s32[] parameter(0)
  %Arg_1.1034 = s32[] parameter(1)
  ROOT %add.879 = s32[] add(%Arg_0.1351, %Arg_1.1034)
}

%region_0.64._custom_call_lowering_rule.20 (Arg_0.1353: s32[], Arg_1.1036: s32[], Arg_2.168: s32[], Arg_3.105: s32[]) -> pred[] {
  %Arg_2.168 = s32[] parameter(2)
  %Arg_3.105 = s32[] parameter(3)
  %Arg_0.1353 = s32[] parameter(0)
  %Arg_1.1036 = s32[] parameter(1)
  ROOT %compare.666 = pred[] compare(%Arg_0.1353, %Arg_1.1036), direction=LT
}

%region_1.77._custom_call_lowering_rule.20 (Arg_0.1354: s32[], Arg_1.1037: s32[]) -> s32[] {
  %Arg_0.1354 = s32[] parameter(0)
  %Arg_1.1037 = s32[] parameter(1)
  ROOT %add.880 = s32[] add(%Arg_0.1354, %Arg_1.1037)
}

%region_5.173._custom_call_lowering_rule.20 (Arg_0.1355: s32[], Arg_1.1038: s32[]) -> s32[] {
  %Arg_0.1355 = s32[] parameter(0)
  ROOT %Arg_1.1038 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.20 (Arg_0.1357: pred[], Arg_1.1039: pred[]) -> pred[] {
  %Arg_0.1357 = pred[] parameter(0)
  ROOT %Arg_1.1039 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.20 (Arg_0.1358: s32[], Arg_1.1040: s32[]) -> s32[] {
  %Arg_0.1358 = s32[] parameter(0)
  %Arg_1.1040 = s32[] parameter(1)
  ROOT %add.881 = s32[] add(%Arg_0.1358, %Arg_1.1040)
}

%region_4.113._custom_call_lowering_rule.20 (Arg_0.1359: s32[], Arg_1.1041: s32[]) -> s32[] {
  %Arg_0.1359 = s32[] parameter(0)
  %Arg_1.1041 = s32[] parameter(1)
  ROOT %add.882 = s32[] add(%Arg_0.1359, %Arg_1.1041)
}

%region_6.181._custom_call_lowering_rule.20 (Arg_0.1360: s32[], Arg_1.1042: s32[]) -> s32[] {
  %Arg_0.1360 = s32[] parameter(0)
  ROOT %Arg_1.1042 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.20 (Arg_0.1361: s32[], Arg_1.1043: s32[]) -> s32[] {
  %Arg_0.1361 = s32[] parameter(0)
  %Arg_1.1043 = s32[] parameter(1)
  ROOT %add.883 = s32[] add(%Arg_0.1361, %Arg_1.1043)
}

%region_10.227._custom_call_lowering_rule.20 (Arg_0.1362: s32[], Arg_1.1044: s32[]) -> s32[] {
  %Arg_0.1362 = s32[] parameter(0)
  ROOT %Arg_1.1044 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.20 (Arg_0.1363: pred[], Arg_1.1045: pred[]) -> pred[] {
  %Arg_0.1363 = pred[] parameter(0)
  ROOT %Arg_1.1045 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.20 (Arg_0.1364: s32[], Arg_1.1046: s32[]) -> s32[] {
  %Arg_0.1364 = s32[] parameter(0)
  %Arg_1.1046 = s32[] parameter(1)
  ROOT %add.884 = s32[] add(%Arg_0.1364, %Arg_1.1046)
}

%region_11.235._custom_call_lowering_rule.20 (Arg_0.1365: s32[], Arg_1.1047: s32[]) -> s32[] {
  %Arg_0.1365 = s32[] parameter(0)
  ROOT %Arg_1.1047 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.53 (Arg_0.1366: s32[], Arg_1.1048: s32[], Arg_2.169: s32[], Arg_3.106: s32[]) -> pred[] {
  %Arg_2.169 = s32[] parameter(2)
  %Arg_3.106 = s32[] parameter(3)
  %Arg_0.1366 = s32[] parameter(0)
  %Arg_1.1048 = s32[] parameter(1)
  ROOT %compare.667 = pred[] compare(%Arg_0.1366, %Arg_1.1048), direction=LT
}

%region_1.74._custom_call_lowering_rule.53 (Arg_0.1367: s32[], Arg_1.1049: s32[]) -> s32[] {
  %Arg_0.1367 = s32[] parameter(0)
  %Arg_1.1049 = s32[] parameter(1)
  ROOT %add.885 = s32[] add(%Arg_0.1367, %Arg_1.1049)
}

%region_5.170._custom_call_lowering_rule.53 (Arg_0.1369: s32[], Arg_1.1050: s32[]) -> s32[] {
  %Arg_0.1369 = s32[] parameter(0)
  ROOT %Arg_1.1050 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.53 (Arg_0.1370: pred[], Arg_1.1051: pred[]) -> pred[] {
  %Arg_0.1370 = pred[] parameter(0)
  ROOT %Arg_1.1051 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.53 (Arg_0.1371: s32[], Arg_1.1052: s32[]) -> s32[] {
  %Arg_0.1371 = s32[] parameter(0)
  %Arg_1.1052 = s32[] parameter(1)
  ROOT %add.886 = s32[] add(%Arg_0.1371, %Arg_1.1052)
}

%region_4.110._custom_call_lowering_rule.53 (Arg_0.1372: s32[], Arg_1.1053: s32[]) -> s32[] {
  %Arg_0.1372 = s32[] parameter(0)
  %Arg_1.1053 = s32[] parameter(1)
  ROOT %add.887 = s32[] add(%Arg_0.1372, %Arg_1.1053)
}

%region_7.194._custom_call_lowering_rule.53 (Arg_0.1374: s32[], Arg_1.1055: s32[]) -> s32[] {
  %Arg_0.1374 = s32[] parameter(0)
  %Arg_1.1055 = s32[] parameter(1)
  ROOT %add.888 = s32[] add(%Arg_0.1374, %Arg_1.1055)
}

%region_10.224._custom_call_lowering_rule.53 (Arg_0.1375: s32[], Arg_1.1056: s32[]) -> s32[] {
  %Arg_0.1375 = s32[] parameter(0)
  ROOT %Arg_1.1056 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.53 (Arg_0.1376: pred[], Arg_1.1057: pred[]) -> pred[] {
  %Arg_0.1376 = pred[] parameter(0)
  ROOT %Arg_1.1057 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.53 (Arg_0.1377: s32[], Arg_1.1058: s32[]) -> s32[] {
  %Arg_0.1377 = s32[] parameter(0)
  %Arg_1.1058 = s32[] parameter(1)
  ROOT %add.889 = s32[] add(%Arg_0.1377, %Arg_1.1058)
}

%region_0.64._custom_call_lowering_rule.21 (Arg_0.1379: s32[], Arg_1.1060: s32[], Arg_2.170: s32[], Arg_3.107: s32[]) -> pred[] {
  %Arg_2.170 = s32[] parameter(2)
  %Arg_3.107 = s32[] parameter(3)
  %Arg_0.1379 = s32[] parameter(0)
  %Arg_1.1060 = s32[] parameter(1)
  ROOT %compare.672 = pred[] compare(%Arg_0.1379, %Arg_1.1060), direction=LT
}

%region_1.77._custom_call_lowering_rule.21 (Arg_0.1380: s32[], Arg_1.1061: s32[]) -> s32[] {
  %Arg_0.1380 = s32[] parameter(0)
  %Arg_1.1061 = s32[] parameter(1)
  ROOT %add.890 = s32[] add(%Arg_0.1380, %Arg_1.1061)
}

%region_5.173._custom_call_lowering_rule.21 (Arg_0.1381: s32[], Arg_1.1062: s32[]) -> s32[] {
  %Arg_0.1381 = s32[] parameter(0)
  ROOT %Arg_1.1062 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.21 (Arg_0.1382: pred[], Arg_1.1063: pred[]) -> pred[] {
  %Arg_0.1382 = pred[] parameter(0)
  ROOT %Arg_1.1063 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.21 (Arg_0.1383: s32[], Arg_1.1064: s32[]) -> s32[] {
  %Arg_0.1383 = s32[] parameter(0)
  %Arg_1.1064 = s32[] parameter(1)
  ROOT %add.891 = s32[] add(%Arg_0.1383, %Arg_1.1064)
}

%region_4.113._custom_call_lowering_rule.21 (Arg_0.1384: s32[], Arg_1.1065: s32[]) -> s32[] {
  %Arg_0.1384 = s32[] parameter(0)
  %Arg_1.1065 = s32[] parameter(1)
  ROOT %add.892 = s32[] add(%Arg_0.1384, %Arg_1.1065)
}

%region_6.181._custom_call_lowering_rule.21 (Arg_0.1385: s32[], Arg_1.1066: s32[]) -> s32[] {
  %Arg_0.1385 = s32[] parameter(0)
  ROOT %Arg_1.1066 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.21 (Arg_0.1386: s32[], Arg_1.1067: s32[]) -> s32[] {
  %Arg_0.1386 = s32[] parameter(0)
  %Arg_1.1067 = s32[] parameter(1)
  ROOT %add.893 = s32[] add(%Arg_0.1386, %Arg_1.1067)
}

%region_10.227._custom_call_lowering_rule.21 (Arg_0.1387: s32[], Arg_1.1068: s32[]) -> s32[] {
  %Arg_0.1387 = s32[] parameter(0)
  ROOT %Arg_1.1068 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.21 (Arg_0.1388: pred[], Arg_1.1069: pred[]) -> pred[] {
  %Arg_0.1388 = pred[] parameter(0)
  ROOT %Arg_1.1069 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.21 (Arg_0.1389: s32[], Arg_1.1070: s32[]) -> s32[] {
  %Arg_0.1389 = s32[] parameter(0)
  %Arg_1.1070 = s32[] parameter(1)
  ROOT %add.894 = s32[] add(%Arg_0.1389, %Arg_1.1070)
}

%region_11.235._custom_call_lowering_rule.21 (Arg_0.1390: s32[], Arg_1.1071: s32[]) -> s32[] {
  %Arg_0.1390 = s32[] parameter(0)
  ROOT %Arg_1.1071 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.54 (Arg_0.1391: s32[], Arg_1.1072: s32[], Arg_2.171: s32[], Arg_3.108: s32[]) -> pred[] {
  %Arg_2.171 = s32[] parameter(2)
  %Arg_3.108 = s32[] parameter(3)
  %Arg_0.1391 = s32[] parameter(0)
  %Arg_1.1072 = s32[] parameter(1)
  ROOT %compare.673 = pred[] compare(%Arg_0.1391, %Arg_1.1072), direction=LT
}

%region_1.74._custom_call_lowering_rule.54 (Arg_0.1392: s32[], Arg_1.1073: s32[]) -> s32[] {
  %Arg_0.1392 = s32[] parameter(0)
  %Arg_1.1073 = s32[] parameter(1)
  ROOT %add.895 = s32[] add(%Arg_0.1392, %Arg_1.1073)
}

%region_5.170._custom_call_lowering_rule.54 (Arg_0.1393: s32[], Arg_1.1074: s32[]) -> s32[] {
  %Arg_0.1393 = s32[] parameter(0)
  ROOT %Arg_1.1074 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.54 (Arg_0.1394: pred[], Arg_1.1075: pred[]) -> pred[] {
  %Arg_0.1394 = pred[] parameter(0)
  ROOT %Arg_1.1075 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.54 (Arg_0.1395: s32[], Arg_1.1076: s32[]) -> s32[] {
  %Arg_0.1395 = s32[] parameter(0)
  %Arg_1.1076 = s32[] parameter(1)
  ROOT %add.896 = s32[] add(%Arg_0.1395, %Arg_1.1076)
}

%region_4.110._custom_call_lowering_rule.54 (Arg_0.1396: s32[], Arg_1.1077: s32[]) -> s32[] {
  %Arg_0.1396 = s32[] parameter(0)
  %Arg_1.1077 = s32[] parameter(1)
  ROOT %add.897 = s32[] add(%Arg_0.1396, %Arg_1.1077)
}

%region_7.194._custom_call_lowering_rule.54 (Arg_0.1398: s32[], Arg_1.1079: s32[]) -> s32[] {
  %Arg_0.1398 = s32[] parameter(0)
  %Arg_1.1079 = s32[] parameter(1)
  ROOT %add.898 = s32[] add(%Arg_0.1398, %Arg_1.1079)
}

%region_10.224._custom_call_lowering_rule.54 (Arg_0.1399: s32[], Arg_1.1080: s32[]) -> s32[] {
  %Arg_0.1399 = s32[] parameter(0)
  ROOT %Arg_1.1080 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.54 (Arg_0.1400: pred[], Arg_1.1081: pred[]) -> pred[] {
  %Arg_0.1400 = pred[] parameter(0)
  ROOT %Arg_1.1081 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.54 (Arg_0.1401: s32[], Arg_1.1082: s32[]) -> s32[] {
  %Arg_0.1401 = s32[] parameter(0)
  %Arg_1.1082 = s32[] parameter(1)
  ROOT %add.899 = s32[] add(%Arg_0.1401, %Arg_1.1082)
}

%region_0.64._custom_call_lowering_rule.22 (Arg_0.1403: s32[], Arg_1.1084: s32[], Arg_2.172: s32[], Arg_3.109: s32[]) -> pred[] {
  %Arg_2.172 = s32[] parameter(2)
  %Arg_3.109 = s32[] parameter(3)
  %Arg_0.1403 = s32[] parameter(0)
  %Arg_1.1084 = s32[] parameter(1)
  ROOT %compare.678 = pred[] compare(%Arg_0.1403, %Arg_1.1084), direction=LT
}

%region_1.77._custom_call_lowering_rule.22 (Arg_0.1404: s32[], Arg_1.1085: s32[]) -> s32[] {
  %Arg_0.1404 = s32[] parameter(0)
  %Arg_1.1085 = s32[] parameter(1)
  ROOT %add.900 = s32[] add(%Arg_0.1404, %Arg_1.1085)
}

%region_5.173._custom_call_lowering_rule.22 (Arg_0.1406: s32[], Arg_1.1086: s32[]) -> s32[] {
  %Arg_0.1406 = s32[] parameter(0)
  ROOT %Arg_1.1086 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.22 (Arg_0.1407: pred[], Arg_1.1087: pred[]) -> pred[] {
  %Arg_0.1407 = pred[] parameter(0)
  ROOT %Arg_1.1087 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.22 (Arg_0.1408: s32[], Arg_1.1088: s32[]) -> s32[] {
  %Arg_0.1408 = s32[] parameter(0)
  %Arg_1.1088 = s32[] parameter(1)
  ROOT %add.901 = s32[] add(%Arg_0.1408, %Arg_1.1088)
}

%region_4.113._custom_call_lowering_rule.22 (Arg_0.1409: s32[], Arg_1.1089: s32[]) -> s32[] {
  %Arg_0.1409 = s32[] parameter(0)
  %Arg_1.1089 = s32[] parameter(1)
  ROOT %add.902 = s32[] add(%Arg_0.1409, %Arg_1.1089)
}

%region_6.181._custom_call_lowering_rule.22 (Arg_0.1410: s32[], Arg_1.1090: s32[]) -> s32[] {
  %Arg_0.1410 = s32[] parameter(0)
  ROOT %Arg_1.1090 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.22 (Arg_0.1411: s32[], Arg_1.1091: s32[]) -> s32[] {
  %Arg_0.1411 = s32[] parameter(0)
  %Arg_1.1091 = s32[] parameter(1)
  ROOT %add.903 = s32[] add(%Arg_0.1411, %Arg_1.1091)
}

%region_10.227._custom_call_lowering_rule.22 (Arg_0.1413: s32[], Arg_1.1092: s32[]) -> s32[] {
  %Arg_0.1413 = s32[] parameter(0)
  ROOT %Arg_1.1092 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.22 (Arg_0.1414: pred[], Arg_1.1093: pred[]) -> pred[] {
  %Arg_0.1414 = pred[] parameter(0)
  ROOT %Arg_1.1093 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.22 (Arg_0.1415: s32[], Arg_1.1094: s32[]) -> s32[] {
  %Arg_0.1415 = s32[] parameter(0)
  %Arg_1.1094 = s32[] parameter(1)
  ROOT %add.904 = s32[] add(%Arg_0.1415, %Arg_1.1094)
}

%region_11.235._custom_call_lowering_rule.22 (Arg_0.1416: s32[], Arg_1.1095: s32[]) -> s32[] {
  %Arg_0.1416 = s32[] parameter(0)
  ROOT %Arg_1.1095 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.55 (Arg_0.1418: s32[], Arg_1.1096: s32[], Arg_2.173: s32[], Arg_3.110: s32[]) -> pred[] {
  %Arg_2.173 = s32[] parameter(2)
  %Arg_3.110 = s32[] parameter(3)
  %Arg_0.1418 = s32[] parameter(0)
  %Arg_1.1096 = s32[] parameter(1)
  ROOT %compare.679 = pred[] compare(%Arg_0.1418, %Arg_1.1096), direction=LT
}

%region_1.74._custom_call_lowering_rule.55 (Arg_0.1419: s32[], Arg_1.1097: s32[]) -> s32[] {
  %Arg_0.1419 = s32[] parameter(0)
  %Arg_1.1097 = s32[] parameter(1)
  ROOT %add.905 = s32[] add(%Arg_0.1419, %Arg_1.1097)
}

%region_5.170._custom_call_lowering_rule.55 (Arg_0.1420: s32[], Arg_1.1098: s32[]) -> s32[] {
  %Arg_0.1420 = s32[] parameter(0)
  ROOT %Arg_1.1098 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.55 (Arg_0.1421: pred[], Arg_1.1099: pred[]) -> pred[] {
  %Arg_0.1421 = pred[] parameter(0)
  ROOT %Arg_1.1099 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.55 (Arg_0.1422: s32[], Arg_1.1100: s32[]) -> s32[] {
  %Arg_0.1422 = s32[] parameter(0)
  %Arg_1.1100 = s32[] parameter(1)
  ROOT %add.906 = s32[] add(%Arg_0.1422, %Arg_1.1100)
}

%region_4.110._custom_call_lowering_rule.55 (Arg_0.1423: s32[], Arg_1.1101: s32[]) -> s32[] {
  %Arg_0.1423 = s32[] parameter(0)
  %Arg_1.1101 = s32[] parameter(1)
  ROOT %add.907 = s32[] add(%Arg_0.1423, %Arg_1.1101)
}

%region_7.194._custom_call_lowering_rule.55 (Arg_0.1425: s32[], Arg_1.1103: s32[]) -> s32[] {
  %Arg_0.1425 = s32[] parameter(0)
  %Arg_1.1103 = s32[] parameter(1)
  ROOT %add.908 = s32[] add(%Arg_0.1425, %Arg_1.1103)
}

%region_10.224._custom_call_lowering_rule.55 (Arg_0.1426: s32[], Arg_1.1104: s32[]) -> s32[] {
  %Arg_0.1426 = s32[] parameter(0)
  ROOT %Arg_1.1104 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.55 (Arg_0.1427: pred[], Arg_1.1105: pred[]) -> pred[] {
  %Arg_0.1427 = pred[] parameter(0)
  ROOT %Arg_1.1105 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.55 (Arg_0.1428: s32[], Arg_1.1106: s32[]) -> s32[] {
  %Arg_0.1428 = s32[] parameter(0)
  %Arg_1.1106 = s32[] parameter(1)
  ROOT %add.909 = s32[] add(%Arg_0.1428, %Arg_1.1106)
}

%region_0.64._custom_call_lowering_rule.23 (Arg_0.1430: s32[], Arg_1.1108: s32[], Arg_2.174: s32[], Arg_3.111: s32[]) -> pred[] {
  %Arg_2.174 = s32[] parameter(2)
  %Arg_3.111 = s32[] parameter(3)
  %Arg_0.1430 = s32[] parameter(0)
  %Arg_1.1108 = s32[] parameter(1)
  ROOT %compare.684 = pred[] compare(%Arg_0.1430, %Arg_1.1108), direction=LT
}

%region_1.77._custom_call_lowering_rule.23 (Arg_0.1431: s32[], Arg_1.1109: s32[]) -> s32[] {
  %Arg_0.1431 = s32[] parameter(0)
  %Arg_1.1109 = s32[] parameter(1)
  ROOT %add.910 = s32[] add(%Arg_0.1431, %Arg_1.1109)
}

%region_5.173._custom_call_lowering_rule.23 (Arg_0.1432: s32[], Arg_1.1110: s32[]) -> s32[] {
  %Arg_0.1432 = s32[] parameter(0)
  ROOT %Arg_1.1110 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.23 (Arg_0.1435: pred[], Arg_1.1111: pred[]) -> pred[] {
  %Arg_0.1435 = pred[] parameter(0)
  ROOT %Arg_1.1111 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.23 (Arg_0.1437: s32[], Arg_1.1112: s32[]) -> s32[] {
  %Arg_0.1437 = s32[] parameter(0)
  %Arg_1.1112 = s32[] parameter(1)
  ROOT %add.911 = s32[] add(%Arg_0.1437, %Arg_1.1112)
}

%region_4.113._custom_call_lowering_rule.23 (Arg_0.1438: s32[], Arg_1.1113: s32[]) -> s32[] {
  %Arg_0.1438 = s32[] parameter(0)
  %Arg_1.1113 = s32[] parameter(1)
  ROOT %add.912 = s32[] add(%Arg_0.1438, %Arg_1.1113)
}

%region_6.181._custom_call_lowering_rule.23 (Arg_0.1439: s32[], Arg_1.1114: s32[]) -> s32[] {
  %Arg_0.1439 = s32[] parameter(0)
  ROOT %Arg_1.1114 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.23 (Arg_0.1440: s32[], Arg_1.1115: s32[]) -> s32[] {
  %Arg_0.1440 = s32[] parameter(0)
  %Arg_1.1115 = s32[] parameter(1)
  ROOT %add.913 = s32[] add(%Arg_0.1440, %Arg_1.1115)
}

%region_10.227._custom_call_lowering_rule.23 (Arg_0.1441: s32[], Arg_1.1116: s32[]) -> s32[] {
  %Arg_0.1441 = s32[] parameter(0)
  ROOT %Arg_1.1116 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.23 (Arg_0.1442: pred[], Arg_1.1117: pred[]) -> pred[] {
  %Arg_0.1442 = pred[] parameter(0)
  ROOT %Arg_1.1117 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.23 (Arg_0.1443: s32[], Arg_1.1118: s32[]) -> s32[] {
  %Arg_0.1443 = s32[] parameter(0)
  %Arg_1.1118 = s32[] parameter(1)
  ROOT %add.914 = s32[] add(%Arg_0.1443, %Arg_1.1118)
}

%region_11.235._custom_call_lowering_rule.23 (Arg_0.1444: s32[], Arg_1.1119: s32[]) -> s32[] {
  %Arg_0.1444 = s32[] parameter(0)
  ROOT %Arg_1.1119 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.56 (Arg_0.1445: s32[], Arg_1.1120: s32[], Arg_2.175: s32[], Arg_3.112: s32[]) -> pred[] {
  %Arg_2.175 = s32[] parameter(2)
  %Arg_3.112 = s32[] parameter(3)
  %Arg_0.1445 = s32[] parameter(0)
  %Arg_1.1120 = s32[] parameter(1)
  ROOT %compare.685 = pred[] compare(%Arg_0.1445, %Arg_1.1120), direction=LT
}

%region_1.74._custom_call_lowering_rule.56 (Arg_0.1446: s32[], Arg_1.1121: s32[]) -> s32[] {
  %Arg_0.1446 = s32[] parameter(0)
  %Arg_1.1121 = s32[] parameter(1)
  ROOT %add.915 = s32[] add(%Arg_0.1446, %Arg_1.1121)
}

%region_5.170._custom_call_lowering_rule.56 (Arg_0.1447: s32[], Arg_1.1122: s32[]) -> s32[] {
  %Arg_0.1447 = s32[] parameter(0)
  ROOT %Arg_1.1122 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.56 (Arg_0.1448: pred[], Arg_1.1123: pred[]) -> pred[] {
  %Arg_0.1448 = pred[] parameter(0)
  ROOT %Arg_1.1123 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.56 (Arg_0.1449: s32[], Arg_1.1124: s32[]) -> s32[] {
  %Arg_0.1449 = s32[] parameter(0)
  %Arg_1.1124 = s32[] parameter(1)
  ROOT %add.916 = s32[] add(%Arg_0.1449, %Arg_1.1124)
}

%region_4.110._custom_call_lowering_rule.56 (Arg_0.1451: s32[], Arg_1.1125: s32[]) -> s32[] {
  %Arg_0.1451 = s32[] parameter(0)
  %Arg_1.1125 = s32[] parameter(1)
  ROOT %add.917 = s32[] add(%Arg_0.1451, %Arg_1.1125)
}

%region_7.194._custom_call_lowering_rule.56 (Arg_0.1453: s32[], Arg_1.1127: s32[]) -> s32[] {
  %Arg_0.1453 = s32[] parameter(0)
  %Arg_1.1127 = s32[] parameter(1)
  ROOT %add.918 = s32[] add(%Arg_0.1453, %Arg_1.1127)
}

%region_10.224._custom_call_lowering_rule.56 (Arg_0.1454: s32[], Arg_1.1128: s32[]) -> s32[] {
  %Arg_0.1454 = s32[] parameter(0)
  ROOT %Arg_1.1128 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.56 (Arg_0.1455: pred[], Arg_1.1129: pred[]) -> pred[] {
  %Arg_0.1455 = pred[] parameter(0)
  ROOT %Arg_1.1129 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.56 (Arg_0.1456: s32[], Arg_1.1130: s32[]) -> s32[] {
  %Arg_0.1456 = s32[] parameter(0)
  %Arg_1.1130 = s32[] parameter(1)
  ROOT %add.919 = s32[] add(%Arg_0.1456, %Arg_1.1130)
}

%region_0.64._custom_call_lowering_rule.24 (Arg_0.1458: s32[], Arg_1.1132: s32[], Arg_2.176: s32[], Arg_3.113: s32[]) -> pred[] {
  %Arg_2.176 = s32[] parameter(2)
  %Arg_3.113 = s32[] parameter(3)
  %Arg_0.1458 = s32[] parameter(0)
  %Arg_1.1132 = s32[] parameter(1)
  ROOT %compare.690 = pred[] compare(%Arg_0.1458, %Arg_1.1132), direction=LT
}

%region_1.77._custom_call_lowering_rule.24 (Arg_0.1460: s32[], Arg_1.1133: s32[]) -> s32[] {
  %Arg_0.1460 = s32[] parameter(0)
  %Arg_1.1133 = s32[] parameter(1)
  ROOT %add.920 = s32[] add(%Arg_0.1460, %Arg_1.1133)
}

%region_5.173._custom_call_lowering_rule.24 (Arg_0.1461: s32[], Arg_1.1134: s32[]) -> s32[] {
  %Arg_0.1461 = s32[] parameter(0)
  ROOT %Arg_1.1134 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.24 (Arg_0.1462: pred[], Arg_1.1135: pred[]) -> pred[] {
  %Arg_0.1462 = pred[] parameter(0)
  ROOT %Arg_1.1135 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.24 (Arg_0.1463: s32[], Arg_1.1136: s32[]) -> s32[] {
  %Arg_0.1463 = s32[] parameter(0)
  %Arg_1.1136 = s32[] parameter(1)
  ROOT %add.921 = s32[] add(%Arg_0.1463, %Arg_1.1136)
}

%region_4.113._custom_call_lowering_rule.24 (Arg_0.1464: s32[], Arg_1.1137: s32[]) -> s32[] {
  %Arg_0.1464 = s32[] parameter(0)
  %Arg_1.1137 = s32[] parameter(1)
  ROOT %add.922 = s32[] add(%Arg_0.1464, %Arg_1.1137)
}

%region_6.181._custom_call_lowering_rule.24 (Arg_0.1466: s32[], Arg_1.1138: s32[]) -> s32[] {
  %Arg_0.1466 = s32[] parameter(0)
  ROOT %Arg_1.1138 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.24 (Arg_0.1467: s32[], Arg_1.1139: s32[]) -> s32[] {
  %Arg_0.1467 = s32[] parameter(0)
  %Arg_1.1139 = s32[] parameter(1)
  ROOT %add.923 = s32[] add(%Arg_0.1467, %Arg_1.1139)
}

%region_10.227._custom_call_lowering_rule.24 (Arg_0.1468: s32[], Arg_1.1140: s32[]) -> s32[] {
  %Arg_0.1468 = s32[] parameter(0)
  ROOT %Arg_1.1140 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.24 (Arg_0.1469: pred[], Arg_1.1141: pred[]) -> pred[] {
  %Arg_0.1469 = pred[] parameter(0)
  ROOT %Arg_1.1141 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.24 (Arg_0.1470: s32[], Arg_1.1142: s32[]) -> s32[] {
  %Arg_0.1470 = s32[] parameter(0)
  %Arg_1.1142 = s32[] parameter(1)
  ROOT %add.924 = s32[] add(%Arg_0.1470, %Arg_1.1142)
}

%region_11.235._custom_call_lowering_rule.24 (Arg_0.1471: s32[], Arg_1.1143: s32[]) -> s32[] {
  %Arg_0.1471 = s32[] parameter(0)
  ROOT %Arg_1.1143 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.57 (Arg_0.1472: s32[], Arg_1.1144: s32[], Arg_2.177: s32[], Arg_3.114: s32[]) -> pred[] {
  %Arg_2.177 = s32[] parameter(2)
  %Arg_3.114 = s32[] parameter(3)
  %Arg_0.1472 = s32[] parameter(0)
  %Arg_1.1144 = s32[] parameter(1)
  ROOT %compare.691 = pred[] compare(%Arg_0.1472, %Arg_1.1144), direction=LT
}

%region_1.74._custom_call_lowering_rule.57 (Arg_0.1473: s32[], Arg_1.1145: s32[]) -> s32[] {
  %Arg_0.1473 = s32[] parameter(0)
  %Arg_1.1145 = s32[] parameter(1)
  ROOT %add.925 = s32[] add(%Arg_0.1473, %Arg_1.1145)
}

%region_5.170._custom_call_lowering_rule.57 (Arg_0.1474: s32[], Arg_1.1146: s32[]) -> s32[] {
  %Arg_0.1474 = s32[] parameter(0)
  ROOT %Arg_1.1146 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.57 (Arg_0.1475: pred[], Arg_1.1147: pred[]) -> pred[] {
  %Arg_0.1475 = pred[] parameter(0)
  ROOT %Arg_1.1147 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.57 (Arg_0.1476: s32[], Arg_1.1148: s32[]) -> s32[] {
  %Arg_0.1476 = s32[] parameter(0)
  %Arg_1.1148 = s32[] parameter(1)
  ROOT %add.926 = s32[] add(%Arg_0.1476, %Arg_1.1148)
}

%region_4.110._custom_call_lowering_rule.57 (Arg_0.1477: s32[], Arg_1.1149: s32[]) -> s32[] {
  %Arg_0.1477 = s32[] parameter(0)
  %Arg_1.1149 = s32[] parameter(1)
  ROOT %add.927 = s32[] add(%Arg_0.1477, %Arg_1.1149)
}

%region_7.194._custom_call_lowering_rule.57 (Arg_0.1479: s32[], Arg_1.1151: s32[]) -> s32[] {
  %Arg_0.1479 = s32[] parameter(0)
  %Arg_1.1151 = s32[] parameter(1)
  ROOT %add.928 = s32[] add(%Arg_0.1479, %Arg_1.1151)
}

%region_10.224._custom_call_lowering_rule.57 (Arg_0.1480: s32[], Arg_1.1152: s32[]) -> s32[] {
  %Arg_0.1480 = s32[] parameter(0)
  ROOT %Arg_1.1152 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.57 (Arg_0.1481: pred[], Arg_1.1153: pred[]) -> pred[] {
  %Arg_0.1481 = pred[] parameter(0)
  ROOT %Arg_1.1153 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.57 (Arg_0.1482: s32[], Arg_1.1154: s32[]) -> s32[] {
  %Arg_0.1482 = s32[] parameter(0)
  %Arg_1.1154 = s32[] parameter(1)
  ROOT %add.929 = s32[] add(%Arg_0.1482, %Arg_1.1154)
}

%region_0.64._custom_call_lowering_rule.25 (Arg_0.1484: s32[], Arg_1.1156: s32[], Arg_2.178: s32[], Arg_3.115: s32[]) -> pred[] {
  %Arg_2.178 = s32[] parameter(2)
  %Arg_3.115 = s32[] parameter(3)
  %Arg_0.1484 = s32[] parameter(0)
  %Arg_1.1156 = s32[] parameter(1)
  ROOT %compare.696 = pred[] compare(%Arg_0.1484, %Arg_1.1156), direction=LT
}

%region_1.77._custom_call_lowering_rule.25 (Arg_0.1485: s32[], Arg_1.1157: s32[]) -> s32[] {
  %Arg_0.1485 = s32[] parameter(0)
  %Arg_1.1157 = s32[] parameter(1)
  ROOT %add.930 = s32[] add(%Arg_0.1485, %Arg_1.1157)
}

%region_5.173._custom_call_lowering_rule.25 (Arg_0.1486: s32[], Arg_1.1158: s32[]) -> s32[] {
  %Arg_0.1486 = s32[] parameter(0)
  ROOT %Arg_1.1158 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.25 (Arg_0.1487: pred[], Arg_1.1159: pred[]) -> pred[] {
  %Arg_0.1487 = pred[] parameter(0)
  ROOT %Arg_1.1159 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.25 (Arg_0.1488: s32[], Arg_1.1160: s32[]) -> s32[] {
  %Arg_0.1488 = s32[] parameter(0)
  %Arg_1.1160 = s32[] parameter(1)
  ROOT %add.931 = s32[] add(%Arg_0.1488, %Arg_1.1160)
}

%region_4.113._custom_call_lowering_rule.25 (Arg_0.1489: s32[], Arg_1.1161: s32[]) -> s32[] {
  %Arg_0.1489 = s32[] parameter(0)
  %Arg_1.1161 = s32[] parameter(1)
  ROOT %add.932 = s32[] add(%Arg_0.1489, %Arg_1.1161)
}

%region_6.181._custom_call_lowering_rule.25 (Arg_0.1490: s32[], Arg_1.1162: s32[]) -> s32[] {
  %Arg_0.1490 = s32[] parameter(0)
  ROOT %Arg_1.1162 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.25 (Arg_0.1491: s32[], Arg_1.1163: s32[]) -> s32[] {
  %Arg_0.1491 = s32[] parameter(0)
  %Arg_1.1163 = s32[] parameter(1)
  ROOT %add.933 = s32[] add(%Arg_0.1491, %Arg_1.1163)
}

%region_10.227._custom_call_lowering_rule.25 (Arg_0.1492: s32[], Arg_1.1165: s32[]) -> s32[] {
  %Arg_0.1492 = s32[] parameter(0)
  ROOT %Arg_1.1165 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.25 (Arg_0.1493: pred[], Arg_1.1166: pred[]) -> pred[] {
  %Arg_0.1493 = pred[] parameter(0)
  ROOT %Arg_1.1166 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.25 (Arg_0.1494: s32[], Arg_1.1167: s32[]) -> s32[] {
  %Arg_0.1494 = s32[] parameter(0)
  %Arg_1.1167 = s32[] parameter(1)
  ROOT %add.934 = s32[] add(%Arg_0.1494, %Arg_1.1167)
}

%region_11.235._custom_call_lowering_rule.25 (Arg_0.1495: s32[], Arg_1.1168: s32[]) -> s32[] {
  %Arg_0.1495 = s32[] parameter(0)
  ROOT %Arg_1.1168 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.58 (Arg_0.1496: s32[], Arg_1.1169: s32[], Arg_2.179: s32[], Arg_3.116: s32[]) -> pred[] {
  %Arg_2.179 = s32[] parameter(2)
  %Arg_3.116 = s32[] parameter(3)
  %Arg_0.1496 = s32[] parameter(0)
  %Arg_1.1169 = s32[] parameter(1)
  ROOT %compare.697 = pred[] compare(%Arg_0.1496, %Arg_1.1169), direction=LT
}

%region_1.74._custom_call_lowering_rule.58 (Arg_0.1497: s32[], Arg_1.1170: s32[]) -> s32[] {
  %Arg_0.1497 = s32[] parameter(0)
  %Arg_1.1170 = s32[] parameter(1)
  ROOT %add.935 = s32[] add(%Arg_0.1497, %Arg_1.1170)
}

%region_5.170._custom_call_lowering_rule.58 (Arg_0.1498: s32[], Arg_1.1171: s32[]) -> s32[] {
  %Arg_0.1498 = s32[] parameter(0)
  ROOT %Arg_1.1171 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.58 (Arg_0.1500: pred[], Arg_1.1172: pred[]) -> pred[] {
  %Arg_0.1500 = pred[] parameter(0)
  ROOT %Arg_1.1172 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.58 (Arg_0.1501: s32[], Arg_1.1173: s32[]) -> s32[] {
  %Arg_0.1501 = s32[] parameter(0)
  %Arg_1.1173 = s32[] parameter(1)
  ROOT %add.936 = s32[] add(%Arg_0.1501, %Arg_1.1173)
}

%region_4.110._custom_call_lowering_rule.58 (Arg_0.1502: s32[], Arg_1.1174: s32[]) -> s32[] {
  %Arg_0.1502 = s32[] parameter(0)
  %Arg_1.1174 = s32[] parameter(1)
  ROOT %add.937 = s32[] add(%Arg_0.1502, %Arg_1.1174)
}

%region_7.194._custom_call_lowering_rule.58 (Arg_0.1504: s32[], Arg_1.1176: s32[]) -> s32[] {
  %Arg_0.1504 = s32[] parameter(0)
  %Arg_1.1176 = s32[] parameter(1)
  ROOT %add.938 = s32[] add(%Arg_0.1504, %Arg_1.1176)
}

%region_10.224._custom_call_lowering_rule.58 (Arg_0.1505: s32[], Arg_1.1177: s32[]) -> s32[] {
  %Arg_0.1505 = s32[] parameter(0)
  ROOT %Arg_1.1177 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.58 (Arg_0.1506: pred[], Arg_1.1178: pred[]) -> pred[] {
  %Arg_0.1506 = pred[] parameter(0)
  ROOT %Arg_1.1178 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.58 (Arg_0.1507: s32[], Arg_1.1179: s32[]) -> s32[] {
  %Arg_0.1507 = s32[] parameter(0)
  %Arg_1.1179 = s32[] parameter(1)
  ROOT %add.939 = s32[] add(%Arg_0.1507, %Arg_1.1179)
}

%region_0.64._custom_call_lowering_rule.26 (Arg_0.1509: s32[], Arg_1.1181: s32[], Arg_2.180: s32[], Arg_3.117: s32[]) -> pred[] {
  %Arg_2.180 = s32[] parameter(2)
  %Arg_3.117 = s32[] parameter(3)
  %Arg_0.1509 = s32[] parameter(0)
  %Arg_1.1181 = s32[] parameter(1)
  ROOT %compare.702 = pred[] compare(%Arg_0.1509, %Arg_1.1181), direction=LT
}

%region_1.77._custom_call_lowering_rule.26 (Arg_0.1510: s32[], Arg_1.1182: s32[]) -> s32[] {
  %Arg_0.1510 = s32[] parameter(0)
  %Arg_1.1182 = s32[] parameter(1)
  ROOT %add.940 = s32[] add(%Arg_0.1510, %Arg_1.1182)
}

%region_5.173._custom_call_lowering_rule.26 (Arg_0.1511: s32[], Arg_1.1183: s32[]) -> s32[] {
  %Arg_0.1511 = s32[] parameter(0)
  ROOT %Arg_1.1183 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.26 (Arg_0.1512: pred[], Arg_1.1184: pred[]) -> pred[] {
  %Arg_0.1512 = pred[] parameter(0)
  ROOT %Arg_1.1184 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.26 (Arg_0.1513: s32[], Arg_1.1185: s32[]) -> s32[] {
  %Arg_0.1513 = s32[] parameter(0)
  %Arg_1.1185 = s32[] parameter(1)
  ROOT %add.941 = s32[] add(%Arg_0.1513, %Arg_1.1185)
}

%region_4.113._custom_call_lowering_rule.26 (Arg_0.1514: s32[], Arg_1.1186: s32[]) -> s32[] {
  %Arg_0.1514 = s32[] parameter(0)
  %Arg_1.1186 = s32[] parameter(1)
  ROOT %add.942 = s32[] add(%Arg_0.1514, %Arg_1.1186)
}

%region_6.181._custom_call_lowering_rule.26 (Arg_0.1515: s32[], Arg_1.1187: s32[]) -> s32[] {
  %Arg_0.1515 = s32[] parameter(0)
  ROOT %Arg_1.1187 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.26 (Arg_0.1516: s32[], Arg_1.1188: s32[]) -> s32[] {
  %Arg_0.1516 = s32[] parameter(0)
  %Arg_1.1188 = s32[] parameter(1)
  ROOT %add.943 = s32[] add(%Arg_0.1516, %Arg_1.1188)
}

%region_10.227._custom_call_lowering_rule.26 (Arg_0.1517: s32[], Arg_1.1189: s32[]) -> s32[] {
  %Arg_0.1517 = s32[] parameter(0)
  ROOT %Arg_1.1189 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.26 (Arg_0.1518: pred[], Arg_1.1190: pred[]) -> pred[] {
  %Arg_0.1518 = pred[] parameter(0)
  ROOT %Arg_1.1190 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.26 (Arg_0.1519: s32[], Arg_1.1191: s32[]) -> s32[] {
  %Arg_0.1519 = s32[] parameter(0)
  %Arg_1.1191 = s32[] parameter(1)
  ROOT %add.944 = s32[] add(%Arg_0.1519, %Arg_1.1191)
}

%region_11.235._custom_call_lowering_rule.26 (Arg_0.1521: s32[], Arg_1.1192: s32[]) -> s32[] {
  %Arg_0.1521 = s32[] parameter(0)
  ROOT %Arg_1.1192 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.59 (Arg_0.1522: s32[], Arg_1.1193: s32[], Arg_2.181: s32[], Arg_3.118: s32[]) -> pred[] {
  %Arg_2.181 = s32[] parameter(2)
  %Arg_3.118 = s32[] parameter(3)
  %Arg_0.1522 = s32[] parameter(0)
  %Arg_1.1193 = s32[] parameter(1)
  ROOT %compare.703 = pred[] compare(%Arg_0.1522, %Arg_1.1193), direction=LT
}

%region_1.74._custom_call_lowering_rule.59 (Arg_0.1523: s32[], Arg_1.1194: s32[]) -> s32[] {
  %Arg_0.1523 = s32[] parameter(0)
  %Arg_1.1194 = s32[] parameter(1)
  ROOT %add.945 = s32[] add(%Arg_0.1523, %Arg_1.1194)
}

%region_5.170._custom_call_lowering_rule.59 (Arg_0.1524: s32[], Arg_1.1195: s32[]) -> s32[] {
  %Arg_0.1524 = s32[] parameter(0)
  ROOT %Arg_1.1195 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.59 (Arg_0.1525: pred[], Arg_1.1196: pred[]) -> pred[] {
  %Arg_0.1525 = pred[] parameter(0)
  ROOT %Arg_1.1196 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.59 (Arg_0.1526: s32[], Arg_1.1197: s32[]) -> s32[] {
  %Arg_0.1526 = s32[] parameter(0)
  %Arg_1.1197 = s32[] parameter(1)
  ROOT %add.946 = s32[] add(%Arg_0.1526, %Arg_1.1197)
}

%region_4.110._custom_call_lowering_rule.59 (Arg_0.1527: s32[], Arg_1.1198: s32[]) -> s32[] {
  %Arg_0.1527 = s32[] parameter(0)
  %Arg_1.1198 = s32[] parameter(1)
  ROOT %add.947 = s32[] add(%Arg_0.1527, %Arg_1.1198)
}

%region_7.194._custom_call_lowering_rule.59 (Arg_0.1529: s32[], Arg_1.1200: s32[]) -> s32[] {
  %Arg_0.1529 = s32[] parameter(0)
  %Arg_1.1200 = s32[] parameter(1)
  ROOT %add.948 = s32[] add(%Arg_0.1529, %Arg_1.1200)
}

%region_10.224._custom_call_lowering_rule.59 (Arg_0.1530: s32[], Arg_1.1201: s32[]) -> s32[] {
  %Arg_0.1530 = s32[] parameter(0)
  ROOT %Arg_1.1201 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.59 (Arg_0.1531: pred[], Arg_1.1202: pred[]) -> pred[] {
  %Arg_0.1531 = pred[] parameter(0)
  ROOT %Arg_1.1202 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.59 (Arg_0.1532: s32[], Arg_1.1203: s32[]) -> s32[] {
  %Arg_0.1532 = s32[] parameter(0)
  %Arg_1.1203 = s32[] parameter(1)
  ROOT %add.949 = s32[] add(%Arg_0.1532, %Arg_1.1203)
}

%region_0.64._custom_call_lowering_rule.27 (Arg_0.1534: s32[], Arg_1.1205: s32[], Arg_2.182: s32[], Arg_3.119: s32[]) -> pred[] {
  %Arg_2.182 = s32[] parameter(2)
  %Arg_3.119 = s32[] parameter(3)
  %Arg_0.1534 = s32[] parameter(0)
  %Arg_1.1205 = s32[] parameter(1)
  ROOT %compare.708 = pred[] compare(%Arg_0.1534, %Arg_1.1205), direction=LT
}

%region_1.77._custom_call_lowering_rule.27 (Arg_0.1535: s32[], Arg_1.1206: s32[]) -> s32[] {
  %Arg_0.1535 = s32[] parameter(0)
  %Arg_1.1206 = s32[] parameter(1)
  ROOT %add.950 = s32[] add(%Arg_0.1535, %Arg_1.1206)
}

%region_5.173._custom_call_lowering_rule.27 (Arg_0.1536: s32[], Arg_1.1207: s32[]) -> s32[] {
  %Arg_0.1536 = s32[] parameter(0)
  ROOT %Arg_1.1207 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.27 (Arg_0.1537: pred[], Arg_1.1208: pred[]) -> pred[] {
  %Arg_0.1537 = pred[] parameter(0)
  ROOT %Arg_1.1208 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.27 (Arg_0.1538: s32[], Arg_1.1209: s32[]) -> s32[] {
  %Arg_0.1538 = s32[] parameter(0)
  %Arg_1.1209 = s32[] parameter(1)
  ROOT %add.951 = s32[] add(%Arg_0.1538, %Arg_1.1209)
}

%region_4.113._custom_call_lowering_rule.27 (Arg_0.1539: s32[], Arg_1.1210: s32[]) -> s32[] {
  %Arg_0.1539 = s32[] parameter(0)
  %Arg_1.1210 = s32[] parameter(1)
  ROOT %add.952 = s32[] add(%Arg_0.1539, %Arg_1.1210)
}

%region_6.181._custom_call_lowering_rule.27 (Arg_0.1540: s32[], Arg_1.1211: s32[]) -> s32[] {
  %Arg_0.1540 = s32[] parameter(0)
  ROOT %Arg_1.1211 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.27 (Arg_0.1541: s32[], Arg_1.1212: s32[]) -> s32[] {
  %Arg_0.1541 = s32[] parameter(0)
  %Arg_1.1212 = s32[] parameter(1)
  ROOT %add.953 = s32[] add(%Arg_0.1541, %Arg_1.1212)
}

%region_10.227._custom_call_lowering_rule.27 (Arg_0.1542: s32[], Arg_1.1213: s32[]) -> s32[] {
  %Arg_0.1542 = s32[] parameter(0)
  ROOT %Arg_1.1213 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.27 (Arg_0.1543: pred[], Arg_1.1214: pred[]) -> pred[] {
  %Arg_0.1543 = pred[] parameter(0)
  ROOT %Arg_1.1214 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.27 (Arg_0.1544: s32[], Arg_1.1215: s32[]) -> s32[] {
  %Arg_0.1544 = s32[] parameter(0)
  %Arg_1.1215 = s32[] parameter(1)
  ROOT %add.954 = s32[] add(%Arg_0.1544, %Arg_1.1215)
}

%region_11.235._custom_call_lowering_rule.27 (Arg_0.1545: s32[], Arg_1.1216: s32[]) -> s32[] {
  %Arg_0.1545 = s32[] parameter(0)
  ROOT %Arg_1.1216 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.60 (Arg_0.1546: s32[], Arg_1.1217: s32[], Arg_2.183: s32[], Arg_3.120: s32[]) -> pred[] {
  %Arg_2.183 = s32[] parameter(2)
  %Arg_3.120 = s32[] parameter(3)
  %Arg_0.1546 = s32[] parameter(0)
  %Arg_1.1217 = s32[] parameter(1)
  ROOT %compare.709 = pred[] compare(%Arg_0.1546, %Arg_1.1217), direction=LT
}

%region_1.74._custom_call_lowering_rule.60 (Arg_0.1547: s32[], Arg_1.1218: s32[]) -> s32[] {
  %Arg_0.1547 = s32[] parameter(0)
  %Arg_1.1218 = s32[] parameter(1)
  ROOT %add.955 = s32[] add(%Arg_0.1547, %Arg_1.1218)
}

%region_5.170._custom_call_lowering_rule.60 (Arg_0.1548: s32[], Arg_1.1219: s32[]) -> s32[] {
  %Arg_0.1548 = s32[] parameter(0)
  ROOT %Arg_1.1219 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.60 (Arg_0.1549: pred[], Arg_1.1220: pred[]) -> pred[] {
  %Arg_0.1549 = pred[] parameter(0)
  ROOT %Arg_1.1220 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.60 (Arg_0.1550: s32[], Arg_1.1221: s32[]) -> s32[] {
  %Arg_0.1550 = s32[] parameter(0)
  %Arg_1.1221 = s32[] parameter(1)
  ROOT %add.956 = s32[] add(%Arg_0.1550, %Arg_1.1221)
}

%region_4.110._custom_call_lowering_rule.60 (Arg_0.1551: s32[], Arg_1.1222: s32[]) -> s32[] {
  %Arg_0.1551 = s32[] parameter(0)
  %Arg_1.1222 = s32[] parameter(1)
  ROOT %add.957 = s32[] add(%Arg_0.1551, %Arg_1.1222)
}

%region_7.194._custom_call_lowering_rule.60 (Arg_0.1553: s32[], Arg_1.1224: s32[]) -> s32[] {
  %Arg_0.1553 = s32[] parameter(0)
  %Arg_1.1224 = s32[] parameter(1)
  ROOT %add.958 = s32[] add(%Arg_0.1553, %Arg_1.1224)
}

%region_10.224._custom_call_lowering_rule.60 (Arg_0.1554: s32[], Arg_1.1225: s32[]) -> s32[] {
  %Arg_0.1554 = s32[] parameter(0)
  ROOT %Arg_1.1225 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.60 (Arg_0.1555: pred[], Arg_1.1226: pred[]) -> pred[] {
  %Arg_0.1555 = pred[] parameter(0)
  ROOT %Arg_1.1226 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.60 (Arg_0.1556: s32[], Arg_1.1227: s32[]) -> s32[] {
  %Arg_0.1556 = s32[] parameter(0)
  %Arg_1.1227 = s32[] parameter(1)
  ROOT %add.959 = s32[] add(%Arg_0.1556, %Arg_1.1227)
}

%region_0.64._custom_call_lowering_rule.28 (Arg_0.1558: s32[], Arg_1.1229: s32[], Arg_2.184: s32[], Arg_3.121: s32[]) -> pred[] {
  %Arg_2.184 = s32[] parameter(2)
  %Arg_3.121 = s32[] parameter(3)
  %Arg_0.1558 = s32[] parameter(0)
  %Arg_1.1229 = s32[] parameter(1)
  ROOT %compare.714 = pred[] compare(%Arg_0.1558, %Arg_1.1229), direction=LT
}

%region_1.77._custom_call_lowering_rule.28 (Arg_0.1559: s32[], Arg_1.1230: s32[]) -> s32[] {
  %Arg_0.1559 = s32[] parameter(0)
  %Arg_1.1230 = s32[] parameter(1)
  ROOT %add.960 = s32[] add(%Arg_0.1559, %Arg_1.1230)
}

%region_5.173._custom_call_lowering_rule.28 (Arg_0.1560: s32[], Arg_1.1231: s32[]) -> s32[] {
  %Arg_0.1560 = s32[] parameter(0)
  ROOT %Arg_1.1231 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.28 (Arg_0.1561: pred[], Arg_1.1232: pred[]) -> pred[] {
  %Arg_0.1561 = pred[] parameter(0)
  ROOT %Arg_1.1232 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.28 (Arg_0.1562: s32[], Arg_1.1233: s32[]) -> s32[] {
  %Arg_0.1562 = s32[] parameter(0)
  %Arg_1.1233 = s32[] parameter(1)
  ROOT %add.961 = s32[] add(%Arg_0.1562, %Arg_1.1233)
}

%region_4.113._custom_call_lowering_rule.28 (Arg_0.1563: s32[], Arg_1.1234: s32[]) -> s32[] {
  %Arg_0.1563 = s32[] parameter(0)
  %Arg_1.1234 = s32[] parameter(1)
  ROOT %add.962 = s32[] add(%Arg_0.1563, %Arg_1.1234)
}

%region_6.181._custom_call_lowering_rule.28 (Arg_0.1564: s32[], Arg_1.1235: s32[]) -> s32[] {
  %Arg_0.1564 = s32[] parameter(0)
  ROOT %Arg_1.1235 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.28 (Arg_0.1565: s32[], Arg_1.1236: s32[]) -> s32[] {
  %Arg_0.1565 = s32[] parameter(0)
  %Arg_1.1236 = s32[] parameter(1)
  ROOT %add.963 = s32[] add(%Arg_0.1565, %Arg_1.1236)
}

%region_10.227._custom_call_lowering_rule.28 (Arg_0.1566: s32[], Arg_1.1237: s32[]) -> s32[] {
  %Arg_0.1566 = s32[] parameter(0)
  ROOT %Arg_1.1237 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.28 (Arg_0.1567: pred[], Arg_1.1238: pred[]) -> pred[] {
  %Arg_0.1567 = pred[] parameter(0)
  ROOT %Arg_1.1238 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.28 (Arg_0.1568: s32[], Arg_1.1239: s32[]) -> s32[] {
  %Arg_0.1568 = s32[] parameter(0)
  %Arg_1.1239 = s32[] parameter(1)
  ROOT %add.964 = s32[] add(%Arg_0.1568, %Arg_1.1239)
}

%region_11.235._custom_call_lowering_rule.28 (Arg_0.1569: s32[], Arg_1.1240: s32[]) -> s32[] {
  %Arg_0.1569 = s32[] parameter(0)
  ROOT %Arg_1.1240 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.61 (Arg_0.1570: s32[], Arg_1.1241: s32[], Arg_2.185: s32[], Arg_3.122: s32[]) -> pred[] {
  %Arg_2.185 = s32[] parameter(2)
  %Arg_3.122 = s32[] parameter(3)
  %Arg_0.1570 = s32[] parameter(0)
  %Arg_1.1241 = s32[] parameter(1)
  ROOT %compare.715 = pred[] compare(%Arg_0.1570, %Arg_1.1241), direction=LT
}

%region_1.74._custom_call_lowering_rule.61 (Arg_0.1571: s32[], Arg_1.1242: s32[]) -> s32[] {
  %Arg_0.1571 = s32[] parameter(0)
  %Arg_1.1242 = s32[] parameter(1)
  ROOT %add.965 = s32[] add(%Arg_0.1571, %Arg_1.1242)
}

%region_5.170._custom_call_lowering_rule.61 (Arg_0.1572: s32[], Arg_1.1243: s32[]) -> s32[] {
  %Arg_0.1572 = s32[] parameter(0)
  ROOT %Arg_1.1243 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.61 (Arg_0.1573: pred[], Arg_1.1244: pred[]) -> pred[] {
  %Arg_0.1573 = pred[] parameter(0)
  ROOT %Arg_1.1244 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.61 (Arg_0.1574: s32[], Arg_1.1245: s32[]) -> s32[] {
  %Arg_0.1574 = s32[] parameter(0)
  %Arg_1.1245 = s32[] parameter(1)
  ROOT %add.966 = s32[] add(%Arg_0.1574, %Arg_1.1245)
}

%region_4.110._custom_call_lowering_rule.61 (Arg_0.1575: s32[], Arg_1.1246: s32[]) -> s32[] {
  %Arg_0.1575 = s32[] parameter(0)
  %Arg_1.1246 = s32[] parameter(1)
  ROOT %add.967 = s32[] add(%Arg_0.1575, %Arg_1.1246)
}

%region_7.194._custom_call_lowering_rule.61 (Arg_0.1577: s32[], Arg_1.1248: s32[]) -> s32[] {
  %Arg_0.1577 = s32[] parameter(0)
  %Arg_1.1248 = s32[] parameter(1)
  ROOT %add.968 = s32[] add(%Arg_0.1577, %Arg_1.1248)
}

%region_10.224._custom_call_lowering_rule.61 (Arg_0.1578: s32[], Arg_1.1249: s32[]) -> s32[] {
  %Arg_0.1578 = s32[] parameter(0)
  ROOT %Arg_1.1249 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.61 (Arg_0.1579: pred[], Arg_1.1250: pred[]) -> pred[] {
  %Arg_0.1579 = pred[] parameter(0)
  ROOT %Arg_1.1250 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.61 (Arg_0.1580: s32[], Arg_1.1251: s32[]) -> s32[] {
  %Arg_0.1580 = s32[] parameter(0)
  %Arg_1.1251 = s32[] parameter(1)
  ROOT %add.969 = s32[] add(%Arg_0.1580, %Arg_1.1251)
}

%region_0.64._custom_call_lowering_rule.29 (Arg_0.1582: s32[], Arg_1.1253: s32[], Arg_2.186: s32[], Arg_3.123: s32[]) -> pred[] {
  %Arg_2.186 = s32[] parameter(2)
  %Arg_3.123 = s32[] parameter(3)
  %Arg_0.1582 = s32[] parameter(0)
  %Arg_1.1253 = s32[] parameter(1)
  ROOT %compare.720 = pred[] compare(%Arg_0.1582, %Arg_1.1253), direction=LT
}

%region_1.77._custom_call_lowering_rule.29 (Arg_0.1583: s32[], Arg_1.1254: s32[]) -> s32[] {
  %Arg_0.1583 = s32[] parameter(0)
  %Arg_1.1254 = s32[] parameter(1)
  ROOT %add.970 = s32[] add(%Arg_0.1583, %Arg_1.1254)
}

%region_5.173._custom_call_lowering_rule.29 (Arg_0.1584: s32[], Arg_1.1255: s32[]) -> s32[] {
  %Arg_0.1584 = s32[] parameter(0)
  ROOT %Arg_1.1255 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.29 (Arg_0.1585: pred[], Arg_1.1256: pred[]) -> pred[] {
  %Arg_0.1585 = pred[] parameter(0)
  ROOT %Arg_1.1256 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.29 (Arg_0.1586: s32[], Arg_1.1257: s32[]) -> s32[] {
  %Arg_0.1586 = s32[] parameter(0)
  %Arg_1.1257 = s32[] parameter(1)
  ROOT %add.971 = s32[] add(%Arg_0.1586, %Arg_1.1257)
}

%region_4.113._custom_call_lowering_rule.29 (Arg_0.1587: s32[], Arg_1.1258: s32[]) -> s32[] {
  %Arg_0.1587 = s32[] parameter(0)
  %Arg_1.1258 = s32[] parameter(1)
  ROOT %add.972 = s32[] add(%Arg_0.1587, %Arg_1.1258)
}

%region_6.181._custom_call_lowering_rule.29 (Arg_0.1588: s32[], Arg_1.1259: s32[]) -> s32[] {
  %Arg_0.1588 = s32[] parameter(0)
  ROOT %Arg_1.1259 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.29 (Arg_0.1589: s32[], Arg_1.1260: s32[]) -> s32[] {
  %Arg_0.1589 = s32[] parameter(0)
  %Arg_1.1260 = s32[] parameter(1)
  ROOT %add.973 = s32[] add(%Arg_0.1589, %Arg_1.1260)
}

%region_10.227._custom_call_lowering_rule.29 (Arg_0.1590: s32[], Arg_1.1261: s32[]) -> s32[] {
  %Arg_0.1590 = s32[] parameter(0)
  ROOT %Arg_1.1261 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.29 (Arg_0.1591: pred[], Arg_1.1262: pred[]) -> pred[] {
  %Arg_0.1591 = pred[] parameter(0)
  ROOT %Arg_1.1262 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.29 (Arg_0.1592: s32[], Arg_1.1263: s32[]) -> s32[] {
  %Arg_0.1592 = s32[] parameter(0)
  %Arg_1.1263 = s32[] parameter(1)
  ROOT %add.974 = s32[] add(%Arg_0.1592, %Arg_1.1263)
}

%region_11.235._custom_call_lowering_rule.29 (Arg_0.1593: s32[], Arg_1.1264: s32[]) -> s32[] {
  %Arg_0.1593 = s32[] parameter(0)
  ROOT %Arg_1.1264 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.62 (Arg_0.1594: s32[], Arg_1.1265: s32[], Arg_2.187: s32[], Arg_3.124: s32[]) -> pred[] {
  %Arg_2.187 = s32[] parameter(2)
  %Arg_3.124 = s32[] parameter(3)
  %Arg_0.1594 = s32[] parameter(0)
  %Arg_1.1265 = s32[] parameter(1)
  ROOT %compare.721 = pred[] compare(%Arg_0.1594, %Arg_1.1265), direction=LT
}

%region_1.74._custom_call_lowering_rule.62 (Arg_0.1595: s32[], Arg_1.1266: s32[]) -> s32[] {
  %Arg_0.1595 = s32[] parameter(0)
  %Arg_1.1266 = s32[] parameter(1)
  ROOT %add.975 = s32[] add(%Arg_0.1595, %Arg_1.1266)
}

%region_5.170._custom_call_lowering_rule.62 (Arg_0.1596: s32[], Arg_1.1267: s32[]) -> s32[] {
  %Arg_0.1596 = s32[] parameter(0)
  ROOT %Arg_1.1267 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.62 (Arg_0.1597: pred[], Arg_1.1268: pred[]) -> pred[] {
  %Arg_0.1597 = pred[] parameter(0)
  ROOT %Arg_1.1268 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.62 (Arg_0.1598: s32[], Arg_1.1269: s32[]) -> s32[] {
  %Arg_0.1598 = s32[] parameter(0)
  %Arg_1.1269 = s32[] parameter(1)
  ROOT %add.976 = s32[] add(%Arg_0.1598, %Arg_1.1269)
}

%region_4.110._custom_call_lowering_rule.62 (Arg_0.1599: s32[], Arg_1.1270: s32[]) -> s32[] {
  %Arg_0.1599 = s32[] parameter(0)
  %Arg_1.1270 = s32[] parameter(1)
  ROOT %add.977 = s32[] add(%Arg_0.1599, %Arg_1.1270)
}

%region_7.194._custom_call_lowering_rule.62 (Arg_0.1601: s32[], Arg_1.1272: s32[]) -> s32[] {
  %Arg_0.1601 = s32[] parameter(0)
  %Arg_1.1272 = s32[] parameter(1)
  ROOT %add.978 = s32[] add(%Arg_0.1601, %Arg_1.1272)
}

%region_10.224._custom_call_lowering_rule.62 (Arg_0.1602: s32[], Arg_1.1273: s32[]) -> s32[] {
  %Arg_0.1602 = s32[] parameter(0)
  ROOT %Arg_1.1273 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.62 (Arg_0.1603: pred[], Arg_1.1274: pred[]) -> pred[] {
  %Arg_0.1603 = pred[] parameter(0)
  ROOT %Arg_1.1274 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.62 (Arg_0.1604: s32[], Arg_1.1275: s32[]) -> s32[] {
  %Arg_0.1604 = s32[] parameter(0)
  %Arg_1.1275 = s32[] parameter(1)
  ROOT %add.979 = s32[] add(%Arg_0.1604, %Arg_1.1275)
}

%region_0.64._custom_call_lowering_rule.30 (Arg_0.1606: s32[], Arg_1.1277: s32[], Arg_2.188: s32[], Arg_3.125: s32[]) -> pred[] {
  %Arg_2.188 = s32[] parameter(2)
  %Arg_3.125 = s32[] parameter(3)
  %Arg_0.1606 = s32[] parameter(0)
  %Arg_1.1277 = s32[] parameter(1)
  ROOT %compare.726 = pred[] compare(%Arg_0.1606, %Arg_1.1277), direction=LT
}

%region_1.77._custom_call_lowering_rule.30 (Arg_0.1607: s32[], Arg_1.1278: s32[]) -> s32[] {
  %Arg_0.1607 = s32[] parameter(0)
  %Arg_1.1278 = s32[] parameter(1)
  ROOT %add.980 = s32[] add(%Arg_0.1607, %Arg_1.1278)
}

%region_5.173._custom_call_lowering_rule.30 (Arg_0.1608: s32[], Arg_1.1279: s32[]) -> s32[] {
  %Arg_0.1608 = s32[] parameter(0)
  ROOT %Arg_1.1279 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.30 (Arg_0.1609: pred[], Arg_1.1280: pred[]) -> pred[] {
  %Arg_0.1609 = pred[] parameter(0)
  ROOT %Arg_1.1280 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.30 (Arg_0.1610: s32[], Arg_1.1281: s32[]) -> s32[] {
  %Arg_0.1610 = s32[] parameter(0)
  %Arg_1.1281 = s32[] parameter(1)
  ROOT %add.981 = s32[] add(%Arg_0.1610, %Arg_1.1281)
}

%region_4.113._custom_call_lowering_rule.30 (Arg_0.1611: s32[], Arg_1.1282: s32[]) -> s32[] {
  %Arg_0.1611 = s32[] parameter(0)
  %Arg_1.1282 = s32[] parameter(1)
  ROOT %add.982 = s32[] add(%Arg_0.1611, %Arg_1.1282)
}

%region_6.181._custom_call_lowering_rule.30 (Arg_0.1612: s32[], Arg_1.1283: s32[]) -> s32[] {
  %Arg_0.1612 = s32[] parameter(0)
  ROOT %Arg_1.1283 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.30 (Arg_0.1613: s32[], Arg_1.1284: s32[]) -> s32[] {
  %Arg_0.1613 = s32[] parameter(0)
  %Arg_1.1284 = s32[] parameter(1)
  ROOT %add.983 = s32[] add(%Arg_0.1613, %Arg_1.1284)
}

%region_10.227._custom_call_lowering_rule.30 (Arg_0.1614: s32[], Arg_1.1285: s32[]) -> s32[] {
  %Arg_0.1614 = s32[] parameter(0)
  ROOT %Arg_1.1285 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.30 (Arg_0.1615: pred[], Arg_1.1286: pred[]) -> pred[] {
  %Arg_0.1615 = pred[] parameter(0)
  ROOT %Arg_1.1286 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.30 (Arg_0.1616: s32[], Arg_1.1287: s32[]) -> s32[] {
  %Arg_0.1616 = s32[] parameter(0)
  %Arg_1.1287 = s32[] parameter(1)
  ROOT %add.984 = s32[] add(%Arg_0.1616, %Arg_1.1287)
}

%region_11.235._custom_call_lowering_rule.30 (Arg_0.1617: s32[], Arg_1.1288: s32[]) -> s32[] {
  %Arg_0.1617 = s32[] parameter(0)
  ROOT %Arg_1.1288 = s32[] parameter(1)
}

%region_0.61._custom_call_lowering_rule.63 (Arg_0.1618: s32[], Arg_1.1289: s32[], Arg_2.189: s32[], Arg_3.126: s32[]) -> pred[] {
  %Arg_2.189 = s32[] parameter(2)
  %Arg_3.126 = s32[] parameter(3)
  %Arg_0.1618 = s32[] parameter(0)
  %Arg_1.1289 = s32[] parameter(1)
  ROOT %compare.727 = pred[] compare(%Arg_0.1618, %Arg_1.1289), direction=LT
}

%region_1.74._custom_call_lowering_rule.63 (Arg_0.1619: s32[], Arg_1.1290: s32[]) -> s32[] {
  %Arg_0.1619 = s32[] parameter(0)
  %Arg_1.1290 = s32[] parameter(1)
  ROOT %add.985 = s32[] add(%Arg_0.1619, %Arg_1.1290)
}

%region_5.170._custom_call_lowering_rule.63 (Arg_0.1620: s32[], Arg_1.1291: s32[]) -> s32[] {
  %Arg_0.1620 = s32[] parameter(0)
  ROOT %Arg_1.1291 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule.63 (Arg_0.1621: pred[], Arg_1.1293: pred[]) -> pred[] {
  %Arg_0.1621 = pred[] parameter(0)
  ROOT %Arg_1.1293 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule.63 (Arg_0.1622: s32[], Arg_1.1294: s32[]) -> s32[] {
  %Arg_0.1622 = s32[] parameter(0)
  %Arg_1.1294 = s32[] parameter(1)
  ROOT %add.986 = s32[] add(%Arg_0.1622, %Arg_1.1294)
}

%region_4.110._custom_call_lowering_rule.63 (Arg_0.1623: s32[], Arg_1.1295: s32[]) -> s32[] {
  %Arg_0.1623 = s32[] parameter(0)
  %Arg_1.1295 = s32[] parameter(1)
  ROOT %add.987 = s32[] add(%Arg_0.1623, %Arg_1.1295)
}

%region_7.194._custom_call_lowering_rule.63 (Arg_0.1625: s32[], Arg_1.1297: s32[]) -> s32[] {
  %Arg_0.1625 = s32[] parameter(0)
  %Arg_1.1297 = s32[] parameter(1)
  ROOT %add.988 = s32[] add(%Arg_0.1625, %Arg_1.1297)
}

%region_10.224._custom_call_lowering_rule.63 (Arg_0.1626: s32[], Arg_1.1298: s32[]) -> s32[] {
  %Arg_0.1626 = s32[] parameter(0)
  ROOT %Arg_1.1298 = s32[] parameter(1)
}

%region_8.202._custom_call_lowering_rule.63 (Arg_0.1627: pred[], Arg_1.1299: pred[]) -> pred[] {
  %Arg_0.1627 = pred[] parameter(0)
  ROOT %Arg_1.1299 = pred[] parameter(1)
}

%region_9.213._custom_call_lowering_rule.63 (Arg_0.1628: s32[], Arg_1.1300: s32[]) -> s32[] {
  %Arg_0.1628 = s32[] parameter(0)
  %Arg_1.1300 = s32[] parameter(1)
  ROOT %add.989 = s32[] add(%Arg_0.1628, %Arg_1.1300)
}

%region_0.64._custom_call_lowering_rule.31 (Arg_0.1635: s32[], Arg_1.1308: s32[], Arg_2.190: s32[], Arg_3.127: s32[]) -> pred[] {
  %Arg_2.190 = s32[] parameter(2)
  %Arg_3.127 = s32[] parameter(3)
  %Arg_0.1635 = s32[] parameter(0)
  %Arg_1.1308 = s32[] parameter(1)
  ROOT %compare.732 = pred[] compare(%Arg_0.1635, %Arg_1.1308), direction=LT
}

%region_1.77._custom_call_lowering_rule.31 (Arg_0.1636: s32[], Arg_1.1309: s32[]) -> s32[] {
  %Arg_0.1636 = s32[] parameter(0)
  %Arg_1.1309 = s32[] parameter(1)
  ROOT %add.997 = s32[] add(%Arg_0.1636, %Arg_1.1309)
}

%region_5.173._custom_call_lowering_rule.31 (Arg_0.1637: s32[], Arg_1.1310: s32[]) -> s32[] {
  %Arg_0.1637 = s32[] parameter(0)
  ROOT %Arg_1.1310 = s32[] parameter(1)
}

%region_2.85._custom_call_lowering_rule.31 (Arg_0.1638: pred[], Arg_1.1312: pred[]) -> pred[] {
  %Arg_0.1638 = pred[] parameter(0)
  ROOT %Arg_1.1312 = pred[] parameter(1)
}

%region_3.94._custom_call_lowering_rule.31 (Arg_0.1639: s32[], Arg_1.1313: s32[]) -> s32[] {
  %Arg_0.1639 = s32[] parameter(0)
  %Arg_1.1313 = s32[] parameter(1)
  ROOT %add.998 = s32[] add(%Arg_0.1639, %Arg_1.1313)
}

%region_4.113._custom_call_lowering_rule.31 (Arg_0.1640: s32[], Arg_1.1314: s32[]) -> s32[] {
  %Arg_0.1640 = s32[] parameter(0)
  %Arg_1.1314 = s32[] parameter(1)
  ROOT %add.999 = s32[] add(%Arg_0.1640, %Arg_1.1314)
}

%region_6.181._custom_call_lowering_rule.31 (Arg_0.1641: s32[], Arg_1.1315: s32[]) -> s32[] {
  %Arg_0.1641 = s32[] parameter(0)
  ROOT %Arg_1.1315 = s32[] parameter(1)
}

%region_7.197._custom_call_lowering_rule.31 (Arg_0.1642: s32[], Arg_1.1317: s32[]) -> s32[] {
  %Arg_0.1642 = s32[] parameter(0)
  %Arg_1.1317 = s32[] parameter(1)
  ROOT %add.1000 = s32[] add(%Arg_0.1642, %Arg_1.1317)
}

%region_10.227._custom_call_lowering_rule.31 (Arg_0.1643: s32[], Arg_1.1318: s32[]) -> s32[] {
  %Arg_0.1643 = s32[] parameter(0)
  ROOT %Arg_1.1318 = s32[] parameter(1)
}

%region_8.205._custom_call_lowering_rule.31 (Arg_0.1644: pred[], Arg_1.1319: pred[]) -> pred[] {
  %Arg_0.1644 = pred[] parameter(0)
  ROOT %Arg_1.1319 = pred[] parameter(1)
}

%region_9.216._custom_call_lowering_rule.31 (Arg_0.1645: s32[], Arg_1.1320: s32[]) -> s32[] {
  %Arg_0.1645 = s32[] parameter(0)
  %Arg_1.1320 = s32[] parameter(1)
  ROOT %add.1001 = s32[] add(%Arg_0.1645, %Arg_1.1320)
}

%region_11.235._custom_call_lowering_rule.31 (Arg_0.1646: s32[], Arg_1.1321: s32[]) -> s32[] {
  %Arg_0.1646 = s32[] parameter(0)
  ROOT %Arg_1.1321 = s32[] parameter(1)
}

%region_0.1166 (Arg_0.1163: f32[], Arg_1.1164: f32[]) -> f32[] {
  %Arg_0.1163 = f32[] parameter(0)
  %Arg_1.1164 = f32[] parameter(1)
  ROOT %add.1165 = f32[] add(%Arg_0.1163, %Arg_1.1164)
}

%region_1.1305 (Arg_0.1302: s32[], Arg_1.1303: s32[]) -> s32[] {
  %Arg_0.1302 = s32[] parameter(0)
  %Arg_1.1303 = s32[] parameter(1)
  ROOT %add.1304 = s32[] add(%Arg_0.1302, %Arg_1.1303)
}

%region_2.1313 (Arg_0.1310: s32[], Arg_1.1311: s32[]) -> s32[] {
  %Arg_0.1310 = s32[] parameter(0)
  %Arg_1.1311 = s32[] parameter(1)
  ROOT %add.1312 = s32[] add(%Arg_0.1310, %Arg_1.1311)
}

%region_3.1318 (Arg_0.1315: s32[], Arg_1.1316: s32[]) -> s32[] {
  %Arg_0.1315 = s32[] parameter(0)
  %Arg_1.1316 = s32[] parameter(1)
  ROOT %maximum.1317 = s32[] maximum(%Arg_0.1315, %Arg_1.1316)
}

%region_0.61._custom_call_lowering_rule (Arg_0.469: s32[], Arg_1.158: s32[], Arg_2.95: s32[], Arg_3.59: s32[]) -> pred[] {
  %Arg_2.95 = s32[] parameter(2)
  %Arg_3.59 = s32[] parameter(3)
  %Arg_0.469 = s32[] parameter(0)
  %Arg_1.158 = s32[] parameter(1)
  ROOT %compare.381 = pred[] compare(%Arg_0.469, %Arg_1.158), direction=LT
}

%region_1.74._custom_call_lowering_rule (Arg_0.470: s32[], Arg_1.159: s32[]) -> s32[] {
  %Arg_0.470 = s32[] parameter(0)
  %Arg_1.159 = s32[] parameter(1)
  ROOT %add.513 = s32[] add(%Arg_0.470, %Arg_1.159)
}

%region_5.170._custom_call_lowering_rule (Arg_0.471: s32[], Arg_1.169: s32[]) -> s32[] {
  %Arg_0.471 = s32[] parameter(0)
  ROOT %Arg_1.169 = s32[] parameter(1)
}

%region_2.82._custom_call_lowering_rule (Arg_0.472: pred[], Arg_1.160: pred[]) -> pred[] {
  %Arg_0.472 = pred[] parameter(0)
  ROOT %Arg_1.160 = pred[] parameter(1)
}

%region_3.91._custom_call_lowering_rule (Arg_0.473: s32[], Arg_1.161: s32[]) -> s32[] {
  %Arg_0.473 = s32[] parameter(0)
  %Arg_1.161 = s32[] parameter(1)
  ROOT %add.514 = s32[] add(%Arg_0.473, %Arg_1.161)
}

%region_4.110._custom_call_lowering_rule (Arg_0.474: s32[], Arg_1.162: s32[]) -> s32[] {
  %Arg_0.474 = s32[] parameter(0)
  %Arg_1.162 = s32[] parameter(1)
  ROOT %add.515 = s32[] add(%Arg_0.474, %Arg_1.162)
}

%region_6.178._custom_call_lowering_rule (Arg_0.475: s32[], Arg_1.177: s32[]) -> s32[] {
  %Arg_0.475 = s32[] parameter(0)
  ROOT %Arg_1.177 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule (Arg_0.480: s32[], Arg_1.231: s32[]) -> s32[] {
  %Arg_0.480 = s32[] parameter(0)
  ROOT %Arg_1.231 = s32[] parameter(1)
}

%region_4.1333 (Arg_0.1330: f32[], Arg_1.1331: f32[]) -> f32[] {
  %Arg_0.1330 = f32[] parameter(0)
  %Arg_1.1331 = f32[] parameter(1)
  ROOT %add.1332 = f32[] add(%Arg_0.1330, %Arg_1.1331)
}

%compare-greater-than.6.clone (p.0.lhs.64: bf16[], p.0.rhs.64: bf16[], p.1.lhs.64: s32[], p.1.rhs.64: s32[]) -> pred[] {
  %p.1.lhs.64 = s32[] parameter(2)
  %p.1.rhs.64 = s32[] parameter(3)
  %p.0.lhs.64 = bf16[] parameter(0)
  %p.0.rhs.64 = bf16[] parameter(1)
  ROOT %compare.382 = pred[] compare(%p.0.lhs.64, %p.0.rhs.64), direction=GT, type=TOTALORDER
}

%compare-value-and-index.9 (p.0.lhs.65: bf16[], p.0.rhs.65: bf16[], p.1.lhs.65: s32[], p.1.rhs.65: s32[]) -> pred[] {
  %p.0.lhs.65 = bf16[] parameter(0)
  %p.0.rhs.65 = bf16[] parameter(1)
  %compare.384 = pred[] compare(%p.0.lhs.65, %p.0.rhs.65), direction=EQ, type=TOTALORDER
  %p.1.lhs.65 = s32[] parameter(2)
  %p.1.rhs.65 = s32[] parameter(3)
  %compare.385 = pred[] compare(%p.1.lhs.65, %p.1.rhs.65), direction=LT
  %compare.383 = pred[] compare(%p.0.lhs.65, %p.0.rhs.65), direction=GT
  ROOT %select.261 = pred[] select(%compare.384, %compare.385, %compare.383)
}

%region_7.1407 (Arg_0.1405: u32[], Arg_1.1406: u32[]) -> u32[] {
  %Arg_0.1405 = u32[] parameter(0)
  ROOT %Arg_1.1406 = u32[] parameter(1)
}

%region_5.1359 (Arg_0.1356: f32[], Arg_1.1357: f32[]) -> f32[] {
  %Arg_0.1356 = f32[] parameter(0)
  %Arg_1.1357 = f32[] parameter(1)
  ROOT %maximum.1358 = f32[] maximum(%Arg_0.1356, %Arg_1.1357)
}

%region_6.1371 (Arg_0.1368: f32[], Arg_1.1369: f32[]) -> f32[] {
  %Arg_0.1368 = f32[] parameter(0)
  %Arg_1.1369 = f32[] parameter(1)
  ROOT %add.1370 = f32[] add(%Arg_0.1368, %Arg_1.1369)
}

%region_8.1415 (Arg_0.1412: bf16[], Arg_1.1413: bf16[]) -> bf16[] {
  %Arg_0.1412 = bf16[] parameter(0)
  %Arg_1.1413 = bf16[] parameter(1)
  ROOT %add.1414 = bf16[] add(%Arg_0.1412, %Arg_1.1413)
}

%region_9.1439 (Arg_0.1436: s32[], Arg_1.1437: s32[]) -> s32[] {
  %Arg_0.1436 = s32[] parameter(0)
  %Arg_1.1437 = s32[] parameter(1)
  ROOT %add.1438 = s32[] add(%Arg_0.1436, %Arg_1.1437)
}

%region_10.1453 (Arg_0.1450: s32[], Arg_1.1451: s32[]) -> s32[] {
  %Arg_0.1450 = s32[] parameter(0)
  %Arg_1.1451 = s32[] parameter(1)
  ROOT %add.1452 = s32[] add(%Arg_0.1450, %Arg_1.1451)
}

%region_11.1462 (Arg_0.1459: s32[], Arg_1.1460: s32[]) -> s32[] {
  %Arg_0.1459 = s32[] parameter(0)
  %Arg_1.1460 = s32[] parameter(1)
  ROOT %add.1461 = s32[] add(%Arg_0.1459, %Arg_1.1460)
}

%region_12.1523 (Arg_0.1520: f32[], Arg_1.1521: f32[]) -> f32[] {
  %Arg_0.1520 = f32[] parameter(0)
  %Arg_1.1521 = f32[] parameter(1)
  ROOT %add.1522 = f32[] add(%Arg_0.1520, %Arg_1.1521)
}

%region_16.1683 (Arg_0.1680: f32[], Arg_1.1681: f32[]) -> f32[] {
  %Arg_0.1680 = f32[] parameter(0)
  %Arg_1.1681 = f32[] parameter(1)
  ROOT %add.1682 = f32[] add(%Arg_0.1680, %Arg_1.1681)
}

%compare-greater-than.0.clone (p.0.lhs.66: bf16[], p.0.rhs.66: bf16[], p.1.lhs.66: s32[], p.1.rhs.66: s32[]) -> pred[] {
  %p.1.lhs.66 = s32[] parameter(2)
  %p.1.rhs.66 = s32[] parameter(3)
  %p.0.lhs.66 = bf16[] parameter(0)
  %p.0.rhs.66 = bf16[] parameter(1)
  ROOT %compare.387 = pred[] compare(%p.0.lhs.66, %p.0.rhs.66), direction=GT, type=TOTALORDER
}

%compare-value-and-index.0 (p.0.lhs.67: bf16[], p.0.rhs.67: bf16[], p.1.lhs.67: s32[], p.1.rhs.67: s32[]) -> pred[] {
  %p.0.lhs.67 = bf16[] parameter(0)
  %p.0.rhs.67 = bf16[] parameter(1)
  %compare.389 = pred[] compare(%p.0.lhs.67, %p.0.rhs.67), direction=EQ, type=TOTALORDER
  %p.1.lhs.67 = s32[] parameter(2)
  %p.1.rhs.67 = s32[] parameter(3)
  %compare.390 = pred[] compare(%p.1.lhs.67, %p.1.rhs.67), direction=LT
  %compare.388 = pred[] compare(%p.0.lhs.67, %p.0.rhs.67), direction=GT
  ROOT %select.262 = pred[] select(%compare.389, %compare.390, %compare.388)
}

%region_19.1757 (Arg_0.1755: u32[], Arg_1.1756: u32[]) -> u32[] {
  %Arg_0.1755 = u32[] parameter(0)
  ROOT %Arg_1.1756 = u32[] parameter(1)
}

%region_17.1709 (Arg_0.1706: f32[], Arg_1.1707: f32[]) -> f32[] {
  %Arg_0.1706 = f32[] parameter(0)
  %Arg_1.1707 = f32[] parameter(1)
  ROOT %maximum.1708 = f32[] maximum(%Arg_0.1706, %Arg_1.1707)
}

%region_18.1721 (Arg_0.1718: f32[], Arg_1.1719: f32[]) -> f32[] {
  %Arg_0.1718 = f32[] parameter(0)
  %Arg_1.1719 = f32[] parameter(1)
  ROOT %add.1720 = f32[] add(%Arg_0.1718, %Arg_1.1719)
}

%region_20.1765 (Arg_0.1762: bf16[], Arg_1.1763: bf16[]) -> bf16[] {
  %Arg_0.1762 = bf16[] parameter(0)
  %Arg_1.1763 = bf16[] parameter(1)
  ROOT %add.1764 = bf16[] add(%Arg_0.1762, %Arg_1.1763)
}

%region_9.1439.clone.1 (Arg_0.67: s32[], Arg_1.33: s32[]) -> s32[] {
  %Arg_0.67 = s32[] parameter(0)
  %Arg_1.33 = s32[] parameter(1)
  ROOT %add.1 = s32[] add(%Arg_0.67, %Arg_1.33)
}

%region_21.1779 (Arg_0.1776: s32[], Arg_1.1777: s32[]) -> s32[] {
  %Arg_0.1776 = s32[] parameter(0)
  %Arg_1.1777 = s32[] parameter(1)
  ROOT %add.1778 = s32[] add(%Arg_0.1776, %Arg_1.1777)
}

%region_22.1788 (Arg_0.1785: s32[], Arg_1.1786: s32[]) -> s32[] {
  %Arg_0.1785 = s32[] parameter(0)
  %Arg_1.1786 = s32[] parameter(1)
  ROOT %add.1787 = s32[] add(%Arg_0.1785, %Arg_1.1786)
}

%region_23.1827 (Arg_0.1824: f32[], Arg_1.1825: f32[]) -> f32[] {
  %Arg_0.1824 = f32[] parameter(0)
  %Arg_1.1825 = f32[] parameter(1)
  ROOT %add.1826 = f32[] add(%Arg_0.1824, %Arg_1.1825)
}

%region_27.1987 (Arg_0.1984: f32[], Arg_1.1985: f32[]) -> f32[] {
  %Arg_0.1984 = f32[] parameter(0)
  %Arg_1.1985 = f32[] parameter(1)
  ROOT %add.1986 = f32[] add(%Arg_0.1984, %Arg_1.1985)
}

%compare-greater-than.1.clone (p.0.lhs.68: bf16[], p.0.rhs.68: bf16[], p.1.lhs.68: s32[], p.1.rhs.68: s32[]) -> pred[] {
  %p.1.lhs.68 = s32[] parameter(2)
  %p.1.rhs.68 = s32[] parameter(3)
  %p.0.lhs.68 = bf16[] parameter(0)
  %p.0.rhs.68 = bf16[] parameter(1)
  ROOT %compare.392 = pred[] compare(%p.0.lhs.68, %p.0.rhs.68), direction=GT, type=TOTALORDER
}

%compare-value-and-index.1 (p.0.lhs.69: bf16[], p.0.rhs.69: bf16[], p.1.lhs.69: s32[], p.1.rhs.69: s32[]) -> pred[] {
  %p.0.lhs.69 = bf16[] parameter(0)
  %p.0.rhs.69 = bf16[] parameter(1)
  %compare.394 = pred[] compare(%p.0.lhs.69, %p.0.rhs.69), direction=EQ, type=TOTALORDER
  %p.1.lhs.69 = s32[] parameter(2)
  %p.1.rhs.69 = s32[] parameter(3)
  %compare.395 = pred[] compare(%p.1.lhs.69, %p.1.rhs.69), direction=LT
  %compare.393 = pred[] compare(%p.0.lhs.69, %p.0.rhs.69), direction=GT
  ROOT %select.263 = pred[] select(%compare.394, %compare.395, %compare.393)
}

%region_30.2061 (Arg_0.2059: u32[], Arg_1.2060: u32[]) -> u32[] {
  %Arg_0.2059 = u32[] parameter(0)
  ROOT %Arg_1.2060 = u32[] parameter(1)
}

%region_28.2013 (Arg_0.2010: f32[], Arg_1.2011: f32[]) -> f32[] {
  %Arg_0.2010 = f32[] parameter(0)
  %Arg_1.2011 = f32[] parameter(1)
  ROOT %maximum.2012 = f32[] maximum(%Arg_0.2010, %Arg_1.2011)
}

%region_29.2025 (Arg_0.2022: f32[], Arg_1.2023: f32[]) -> f32[] {
  %Arg_0.2022 = f32[] parameter(0)
  %Arg_1.2023 = f32[] parameter(1)
  ROOT %add.2024 = f32[] add(%Arg_0.2022, %Arg_1.2023)
}

%region_31.2069 (Arg_0.2066: bf16[], Arg_1.2067: bf16[]) -> bf16[] {
  %Arg_0.2066 = bf16[] parameter(0)
  %Arg_1.2067 = bf16[] parameter(1)
  ROOT %add.2068 = bf16[] add(%Arg_0.2066, %Arg_1.2067)
}

%region_9.1439.clone.2 (Arg_0.70: s32[], Arg_1.34: s32[]) -> s32[] {
  %Arg_0.70 = s32[] parameter(0)
  %Arg_1.34 = s32[] parameter(1)
  ROOT %add.2 = s32[] add(%Arg_0.70, %Arg_1.34)
}

%region_32.2083 (Arg_0.2080: s32[], Arg_1.2081: s32[]) -> s32[] {
  %Arg_0.2080 = s32[] parameter(0)
  %Arg_1.2081 = s32[] parameter(1)
  ROOT %add.2082 = s32[] add(%Arg_0.2080, %Arg_1.2081)
}

%region_33.2092 (Arg_0.2089: s32[], Arg_1.2090: s32[]) -> s32[] {
  %Arg_0.2089 = s32[] parameter(0)
  %Arg_1.2090 = s32[] parameter(1)
  ROOT %add.2091 = s32[] add(%Arg_0.2089, %Arg_1.2090)
}

%region_34.2131 (Arg_0.2128: f32[], Arg_1.2129: f32[]) -> f32[] {
  %Arg_0.2128 = f32[] parameter(0)
  %Arg_1.2129 = f32[] parameter(1)
  ROOT %add.2130 = f32[] add(%Arg_0.2128, %Arg_1.2129)
}

%region_38.2291 (Arg_0.2288: f32[], Arg_1.2289: f32[]) -> f32[] {
  %Arg_0.2288 = f32[] parameter(0)
  %Arg_1.2289 = f32[] parameter(1)
  ROOT %add.2290 = f32[] add(%Arg_0.2288, %Arg_1.2289)
}

%compare-greater-than.2.clone (p.0.lhs.70: bf16[], p.0.rhs.70: bf16[], p.1.lhs.70: s32[], p.1.rhs.70: s32[]) -> pred[] {
  %p.1.lhs.70 = s32[] parameter(2)
  %p.1.rhs.70 = s32[] parameter(3)
  %p.0.lhs.70 = bf16[] parameter(0)
  %p.0.rhs.70 = bf16[] parameter(1)
  ROOT %compare.397 = pred[] compare(%p.0.lhs.70, %p.0.rhs.70), direction=GT, type=TOTALORDER
}

%compare-value-and-index.2 (p.0.lhs.71: bf16[], p.0.rhs.71: bf16[], p.1.lhs.71: s32[], p.1.rhs.71: s32[]) -> pred[] {
  %p.0.lhs.71 = bf16[] parameter(0)
  %p.0.rhs.71 = bf16[] parameter(1)
  %compare.399 = pred[] compare(%p.0.lhs.71, %p.0.rhs.71), direction=EQ, type=TOTALORDER
  %p.1.lhs.71 = s32[] parameter(2)
  %p.1.rhs.71 = s32[] parameter(3)
  %compare.400 = pred[] compare(%p.1.lhs.71, %p.1.rhs.71), direction=LT
  %compare.398 = pred[] compare(%p.0.lhs.71, %p.0.rhs.71), direction=GT
  ROOT %select.264 = pred[] select(%compare.399, %compare.400, %compare.398)
}

%region_41.2365 (Arg_0.2363: u32[], Arg_1.2364: u32[]) -> u32[] {
  %Arg_0.2363 = u32[] parameter(0)
  ROOT %Arg_1.2364 = u32[] parameter(1)
}

%region_39.2317 (Arg_0.2314: f32[], Arg_1.2315: f32[]) -> f32[] {
  %Arg_0.2314 = f32[] parameter(0)
  %Arg_1.2315 = f32[] parameter(1)
  ROOT %maximum.2316 = f32[] maximum(%Arg_0.2314, %Arg_1.2315)
}

%region_40.2329 (Arg_0.2326: f32[], Arg_1.2327: f32[]) -> f32[] {
  %Arg_0.2326 = f32[] parameter(0)
  %Arg_1.2327 = f32[] parameter(1)
  ROOT %add.2328 = f32[] add(%Arg_0.2326, %Arg_1.2327)
}

%region_42.2373 (Arg_0.2370: bf16[], Arg_1.2371: bf16[]) -> bf16[] {
  %Arg_0.2370 = bf16[] parameter(0)
  %Arg_1.2371 = bf16[] parameter(1)
  ROOT %add.2372 = bf16[] add(%Arg_0.2370, %Arg_1.2371)
}

%region_9.1439.clone.3 (Arg_0.73: s32[], Arg_1.35: s32[]) -> s32[] {
  %Arg_0.73 = s32[] parameter(0)
  %Arg_1.35 = s32[] parameter(1)
  ROOT %add.3 = s32[] add(%Arg_0.73, %Arg_1.35)
}

%region_43.2387 (Arg_0.2384: s32[], Arg_1.2385: s32[]) -> s32[] {
  %Arg_0.2384 = s32[] parameter(0)
  %Arg_1.2385 = s32[] parameter(1)
  ROOT %add.2386 = s32[] add(%Arg_0.2384, %Arg_1.2385)
}

%region_44.2396 (Arg_0.2393: s32[], Arg_1.2394: s32[]) -> s32[] {
  %Arg_0.2393 = s32[] parameter(0)
  %Arg_1.2394 = s32[] parameter(1)
  ROOT %add.2395 = s32[] add(%Arg_0.2393, %Arg_1.2394)
}

%region_45.2435 (Arg_0.2432: f32[], Arg_1.2433: f32[]) -> f32[] {
  %Arg_0.2432 = f32[] parameter(0)
  %Arg_1.2433 = f32[] parameter(1)
  ROOT %add.2434 = f32[] add(%Arg_0.2432, %Arg_1.2433)
}

%region_49.2595 (Arg_0.2592: f32[], Arg_1.2593: f32[]) -> f32[] {
  %Arg_0.2592 = f32[] parameter(0)
  %Arg_1.2593 = f32[] parameter(1)
  ROOT %add.2594 = f32[] add(%Arg_0.2592, %Arg_1.2593)
}

%compare-greater-than.3.clone (p.0.lhs.72: bf16[], p.0.rhs.72: bf16[], p.1.lhs.72: s32[], p.1.rhs.72: s32[]) -> pred[] {
  %p.1.lhs.72 = s32[] parameter(2)
  %p.1.rhs.72 = s32[] parameter(3)
  %p.0.lhs.72 = bf16[] parameter(0)
  %p.0.rhs.72 = bf16[] parameter(1)
  ROOT %compare.402 = pred[] compare(%p.0.lhs.72, %p.0.rhs.72), direction=GT, type=TOTALORDER
}

%compare-value-and-index.3 (p.0.lhs.73: bf16[], p.0.rhs.73: bf16[], p.1.lhs.73: s32[], p.1.rhs.73: s32[]) -> pred[] {
  %p.0.lhs.73 = bf16[] parameter(0)
  %p.0.rhs.73 = bf16[] parameter(1)
  %compare.404 = pred[] compare(%p.0.lhs.73, %p.0.rhs.73), direction=EQ, type=TOTALORDER
  %p.1.lhs.73 = s32[] parameter(2)
  %p.1.rhs.73 = s32[] parameter(3)
  %compare.405 = pred[] compare(%p.1.lhs.73, %p.1.rhs.73), direction=LT
  %compare.403 = pred[] compare(%p.0.lhs.73, %p.0.rhs.73), direction=GT
  ROOT %select.265 = pred[] select(%compare.404, %compare.405, %compare.403)
}

%region_52.2669 (Arg_0.2667: u32[], Arg_1.2668: u32[]) -> u32[] {
  %Arg_0.2667 = u32[] parameter(0)
  ROOT %Arg_1.2668 = u32[] parameter(1)
}

%region_50.2621 (Arg_0.2618: f32[], Arg_1.2619: f32[]) -> f32[] {
  %Arg_0.2618 = f32[] parameter(0)
  %Arg_1.2619 = f32[] parameter(1)
  ROOT %maximum.2620 = f32[] maximum(%Arg_0.2618, %Arg_1.2619)
}

%region_51.2633 (Arg_0.2630: f32[], Arg_1.2631: f32[]) -> f32[] {
  %Arg_0.2630 = f32[] parameter(0)
  %Arg_1.2631 = f32[] parameter(1)
  ROOT %add.2632 = f32[] add(%Arg_0.2630, %Arg_1.2631)
}

%region_53.2677 (Arg_0.2674: bf16[], Arg_1.2675: bf16[]) -> bf16[] {
  %Arg_0.2674 = bf16[] parameter(0)
  %Arg_1.2675 = bf16[] parameter(1)
  ROOT %add.2676 = bf16[] add(%Arg_0.2674, %Arg_1.2675)
}

%region_9.1439.clone.4 (Arg_0.76: s32[], Arg_1.36: s32[]) -> s32[] {
  %Arg_0.76 = s32[] parameter(0)
  %Arg_1.36 = s32[] parameter(1)
  ROOT %add.4 = s32[] add(%Arg_0.76, %Arg_1.36)
}

%region_54.2691 (Arg_0.2688: s32[], Arg_1.2689: s32[]) -> s32[] {
  %Arg_0.2688 = s32[] parameter(0)
  %Arg_1.2689 = s32[] parameter(1)
  ROOT %add.2690 = s32[] add(%Arg_0.2688, %Arg_1.2689)
}

%region_55.2700 (Arg_0.2697: s32[], Arg_1.2698: s32[]) -> s32[] {
  %Arg_0.2697 = s32[] parameter(0)
  %Arg_1.2698 = s32[] parameter(1)
  ROOT %add.2699 = s32[] add(%Arg_0.2697, %Arg_1.2698)
}

%region_56.2739 (Arg_0.2736: f32[], Arg_1.2737: f32[]) -> f32[] {
  %Arg_0.2736 = f32[] parameter(0)
  %Arg_1.2737 = f32[] parameter(1)
  ROOT %add.2738 = f32[] add(%Arg_0.2736, %Arg_1.2737)
}

%region_60.2899 (Arg_0.2896: f32[], Arg_1.2897: f32[]) -> f32[] {
  %Arg_0.2896 = f32[] parameter(0)
  %Arg_1.2897 = f32[] parameter(1)
  ROOT %add.2898 = f32[] add(%Arg_0.2896, %Arg_1.2897)
}

%compare-greater-than.4.clone (p.0.lhs.74: bf16[], p.0.rhs.74: bf16[], p.1.lhs.74: s32[], p.1.rhs.74: s32[]) -> pred[] {
  %p.1.lhs.74 = s32[] parameter(2)
  %p.1.rhs.74 = s32[] parameter(3)
  %p.0.lhs.74 = bf16[] parameter(0)
  %p.0.rhs.74 = bf16[] parameter(1)
  ROOT %compare.407 = pred[] compare(%p.0.lhs.74, %p.0.rhs.74), direction=GT, type=TOTALORDER
}

%compare-value-and-index.4 (p.0.lhs.75: bf16[], p.0.rhs.75: bf16[], p.1.lhs.75: s32[], p.1.rhs.75: s32[]) -> pred[] {
  %p.0.lhs.75 = bf16[] parameter(0)
  %p.0.rhs.75 = bf16[] parameter(1)
  %compare.409 = pred[] compare(%p.0.lhs.75, %p.0.rhs.75), direction=EQ, type=TOTALORDER
  %p.1.lhs.75 = s32[] parameter(2)
  %p.1.rhs.75 = s32[] parameter(3)
  %compare.410 = pred[] compare(%p.1.lhs.75, %p.1.rhs.75), direction=LT
  %compare.408 = pred[] compare(%p.0.lhs.75, %p.0.rhs.75), direction=GT
  ROOT %select.266 = pred[] select(%compare.409, %compare.410, %compare.408)
}

%region_63.2973 (Arg_0.2971: u32[], Arg_1.2972: u32[]) -> u32[] {
  %Arg_0.2971 = u32[] parameter(0)
  ROOT %Arg_1.2972 = u32[] parameter(1)
}

%region_61.2925 (Arg_0.2922: f32[], Arg_1.2923: f32[]) -> f32[] {
  %Arg_0.2922 = f32[] parameter(0)
  %Arg_1.2923 = f32[] parameter(1)
  ROOT %maximum.2924 = f32[] maximum(%Arg_0.2922, %Arg_1.2923)
}

%region_62.2937 (Arg_0.2934: f32[], Arg_1.2935: f32[]) -> f32[] {
  %Arg_0.2934 = f32[] parameter(0)
  %Arg_1.2935 = f32[] parameter(1)
  ROOT %add.2936 = f32[] add(%Arg_0.2934, %Arg_1.2935)
}

%region_64.2981 (Arg_0.2978: bf16[], Arg_1.2979: bf16[]) -> bf16[] {
  %Arg_0.2978 = bf16[] parameter(0)
  %Arg_1.2979 = bf16[] parameter(1)
  ROOT %add.2980 = bf16[] add(%Arg_0.2978, %Arg_1.2979)
}

%region_9.1439.clone.5 (Arg_0.79: s32[], Arg_1.37: s32[]) -> s32[] {
  %Arg_0.79 = s32[] parameter(0)
  %Arg_1.37 = s32[] parameter(1)
  ROOT %add.5 = s32[] add(%Arg_0.79, %Arg_1.37)
}

%region_65.2995 (Arg_0.2992: s32[], Arg_1.2993: s32[]) -> s32[] {
  %Arg_0.2992 = s32[] parameter(0)
  %Arg_1.2993 = s32[] parameter(1)
  ROOT %add.2994 = s32[] add(%Arg_0.2992, %Arg_1.2993)
}

%region_66.3004 (Arg_0.3001: s32[], Arg_1.3002: s32[]) -> s32[] {
  %Arg_0.3001 = s32[] parameter(0)
  %Arg_1.3002 = s32[] parameter(1)
  ROOT %add.3003 = s32[] add(%Arg_0.3001, %Arg_1.3002)
}

%region_67.3043 (Arg_0.3040: f32[], Arg_1.3041: f32[]) -> f32[] {
  %Arg_0.3040 = f32[] parameter(0)
  %Arg_1.3041 = f32[] parameter(1)
  ROOT %add.3042 = f32[] add(%Arg_0.3040, %Arg_1.3041)
}

%region_71.3203 (Arg_0.3200: f32[], Arg_1.3201: f32[]) -> f32[] {
  %Arg_0.3200 = f32[] parameter(0)
  %Arg_1.3201 = f32[] parameter(1)
  ROOT %add.3202 = f32[] add(%Arg_0.3200, %Arg_1.3201)
}

%compare-greater-than.5.clone (p.0.lhs.76: bf16[], p.0.rhs.76: bf16[], p.1.lhs.76: s32[], p.1.rhs.76: s32[]) -> pred[] {
  %p.1.lhs.76 = s32[] parameter(2)
  %p.1.rhs.76 = s32[] parameter(3)
  %p.0.lhs.76 = bf16[] parameter(0)
  %p.0.rhs.76 = bf16[] parameter(1)
  ROOT %compare.412 = pred[] compare(%p.0.lhs.76, %p.0.rhs.76), direction=GT, type=TOTALORDER
}

%compare-value-and-index.5 (p.0.lhs.77: bf16[], p.0.rhs.77: bf16[], p.1.lhs.77: s32[], p.1.rhs.77: s32[]) -> pred[] {
  %p.0.lhs.77 = bf16[] parameter(0)
  %p.0.rhs.77 = bf16[] parameter(1)
  %compare.414 = pred[] compare(%p.0.lhs.77, %p.0.rhs.77), direction=EQ, type=TOTALORDER
  %p.1.lhs.77 = s32[] parameter(2)
  %p.1.rhs.77 = s32[] parameter(3)
  %compare.415 = pred[] compare(%p.1.lhs.77, %p.1.rhs.77), direction=LT
  %compare.413 = pred[] compare(%p.0.lhs.77, %p.0.rhs.77), direction=GT
  ROOT %select.267 = pred[] select(%compare.414, %compare.415, %compare.413)
}

%region_74.3277 (Arg_0.3275: u32[], Arg_1.3276: u32[]) -> u32[] {
  %Arg_0.3275 = u32[] parameter(0)
  ROOT %Arg_1.3276 = u32[] parameter(1)
}

%region_72.3229 (Arg_0.3226: f32[], Arg_1.3227: f32[]) -> f32[] {
  %Arg_0.3226 = f32[] parameter(0)
  %Arg_1.3227 = f32[] parameter(1)
  ROOT %maximum.3228 = f32[] maximum(%Arg_0.3226, %Arg_1.3227)
}

%region_73.3241 (Arg_0.3238: f32[], Arg_1.3239: f32[]) -> f32[] {
  %Arg_0.3238 = f32[] parameter(0)
  %Arg_1.3239 = f32[] parameter(1)
  ROOT %add.3240 = f32[] add(%Arg_0.3238, %Arg_1.3239)
}

%region_75.3285 (Arg_0.3282: bf16[], Arg_1.3283: bf16[]) -> bf16[] {
  %Arg_0.3282 = bf16[] parameter(0)
  %Arg_1.3283 = bf16[] parameter(1)
  ROOT %add.3284 = bf16[] add(%Arg_0.3282, %Arg_1.3283)
}

%region_9.1439.clone.6 (Arg_0.82: s32[], Arg_1.38: s32[]) -> s32[] {
  %Arg_0.82 = s32[] parameter(0)
  %Arg_1.38 = s32[] parameter(1)
  ROOT %add.6 = s32[] add(%Arg_0.82, %Arg_1.38)
}

%region_76.3299 (Arg_0.3296: s32[], Arg_1.3297: s32[]) -> s32[] {
  %Arg_0.3296 = s32[] parameter(0)
  %Arg_1.3297 = s32[] parameter(1)
  ROOT %add.3298 = s32[] add(%Arg_0.3296, %Arg_1.3297)
}

%region_77.3308 (Arg_0.3305: s32[], Arg_1.3306: s32[]) -> s32[] {
  %Arg_0.3305 = s32[] parameter(0)
  %Arg_1.3306 = s32[] parameter(1)
  ROOT %add.3307 = s32[] add(%Arg_0.3305, %Arg_1.3306)
}

%region_78.3347 (Arg_0.3344: f32[], Arg_1.3345: f32[]) -> f32[] {
  %Arg_0.3344 = f32[] parameter(0)
  %Arg_1.3345 = f32[] parameter(1)
  ROOT %add.3346 = f32[] add(%Arg_0.3344, %Arg_1.3345)
}

%region_82.3507 (Arg_0.3504: f32[], Arg_1.3505: f32[]) -> f32[] {
  %Arg_0.3504 = f32[] parameter(0)
  %Arg_1.3505 = f32[] parameter(1)
  ROOT %add.3506 = f32[] add(%Arg_0.3504, %Arg_1.3505)
}

%compare-greater-than.7.clone (p.0.lhs.78: bf16[], p.0.rhs.78: bf16[], p.1.lhs.78: s32[], p.1.rhs.78: s32[]) -> pred[] {
  %p.1.lhs.78 = s32[] parameter(2)
  %p.1.rhs.78 = s32[] parameter(3)
  %p.0.lhs.78 = bf16[] parameter(0)
  %p.0.rhs.78 = bf16[] parameter(1)
  ROOT %compare.417 = pred[] compare(%p.0.lhs.78, %p.0.rhs.78), direction=GT, type=TOTALORDER
}

%compare-value-and-index.6 (p.0.lhs.79: bf16[], p.0.rhs.79: bf16[], p.1.lhs.79: s32[], p.1.rhs.79: s32[]) -> pred[] {
  %p.0.lhs.79 = bf16[] parameter(0)
  %p.0.rhs.79 = bf16[] parameter(1)
  %compare.419 = pred[] compare(%p.0.lhs.79, %p.0.rhs.79), direction=EQ, type=TOTALORDER
  %p.1.lhs.79 = s32[] parameter(2)
  %p.1.rhs.79 = s32[] parameter(3)
  %compare.420 = pred[] compare(%p.1.lhs.79, %p.1.rhs.79), direction=LT
  %compare.418 = pred[] compare(%p.0.lhs.79, %p.0.rhs.79), direction=GT
  ROOT %select.268 = pred[] select(%compare.419, %compare.420, %compare.418)
}

%region_85.3581 (Arg_0.3579: u32[], Arg_1.3580: u32[]) -> u32[] {
  %Arg_0.3579 = u32[] parameter(0)
  ROOT %Arg_1.3580 = u32[] parameter(1)
}

%region_83.3533 (Arg_0.3530: f32[], Arg_1.3531: f32[]) -> f32[] {
  %Arg_0.3530 = f32[] parameter(0)
  %Arg_1.3531 = f32[] parameter(1)
  ROOT %maximum.3532 = f32[] maximum(%Arg_0.3530, %Arg_1.3531)
}

%region_84.3545 (Arg_0.3542: f32[], Arg_1.3543: f32[]) -> f32[] {
  %Arg_0.3542 = f32[] parameter(0)
  %Arg_1.3543 = f32[] parameter(1)
  ROOT %add.3544 = f32[] add(%Arg_0.3542, %Arg_1.3543)
}

%region_86.3589 (Arg_0.3586: bf16[], Arg_1.3587: bf16[]) -> bf16[] {
  %Arg_0.3586 = bf16[] parameter(0)
  %Arg_1.3587 = bf16[] parameter(1)
  ROOT %add.3588 = bf16[] add(%Arg_0.3586, %Arg_1.3587)
}

%region_9.1439.clone.7 (Arg_0.85: s32[], Arg_1.39: s32[]) -> s32[] {
  %Arg_0.85 = s32[] parameter(0)
  %Arg_1.39 = s32[] parameter(1)
  ROOT %add.7 = s32[] add(%Arg_0.85, %Arg_1.39)
}

%region_87.3603 (Arg_0.3600: s32[], Arg_1.3601: s32[]) -> s32[] {
  %Arg_0.3600 = s32[] parameter(0)
  %Arg_1.3601 = s32[] parameter(1)
  ROOT %add.3602 = s32[] add(%Arg_0.3600, %Arg_1.3601)
}

%region_88.3612 (Arg_0.3609: s32[], Arg_1.3610: s32[]) -> s32[] {
  %Arg_0.3609 = s32[] parameter(0)
  %Arg_1.3610 = s32[] parameter(1)
  ROOT %add.3611 = s32[] add(%Arg_0.3609, %Arg_1.3610)
}

%region_89.3651 (Arg_0.3648: f32[], Arg_1.3649: f32[]) -> f32[] {
  %Arg_0.3648 = f32[] parameter(0)
  %Arg_1.3649 = f32[] parameter(1)
  ROOT %add.3650 = f32[] add(%Arg_0.3648, %Arg_1.3649)
}

%region_93.3811 (Arg_0.3808: f32[], Arg_1.3809: f32[]) -> f32[] {
  %Arg_0.3808 = f32[] parameter(0)
  %Arg_1.3809 = f32[] parameter(1)
  ROOT %add.3810 = f32[] add(%Arg_0.3808, %Arg_1.3809)
}

%compare-greater-than.8.clone (p.0.lhs.80: bf16[], p.0.rhs.80: bf16[], p.1.lhs.80: s32[], p.1.rhs.80: s32[]) -> pred[] {
  %p.1.lhs.80 = s32[] parameter(2)
  %p.1.rhs.80 = s32[] parameter(3)
  %p.0.lhs.80 = bf16[] parameter(0)
  %p.0.rhs.80 = bf16[] parameter(1)
  ROOT %compare.422 = pred[] compare(%p.0.lhs.80, %p.0.rhs.80), direction=GT, type=TOTALORDER
}

%compare-value-and-index.7 (p.0.lhs.81: bf16[], p.0.rhs.81: bf16[], p.1.lhs.81: s32[], p.1.rhs.81: s32[]) -> pred[] {
  %p.0.lhs.81 = bf16[] parameter(0)
  %p.0.rhs.81 = bf16[] parameter(1)
  %compare.424 = pred[] compare(%p.0.lhs.81, %p.0.rhs.81), direction=EQ, type=TOTALORDER
  %p.1.lhs.81 = s32[] parameter(2)
  %p.1.rhs.81 = s32[] parameter(3)
  %compare.425 = pred[] compare(%p.1.lhs.81, %p.1.rhs.81), direction=LT
  %compare.423 = pred[] compare(%p.0.lhs.81, %p.0.rhs.81), direction=GT
  ROOT %select.269 = pred[] select(%compare.424, %compare.425, %compare.423)
}

%region_96.3885 (Arg_0.3883: u32[], Arg_1.3884: u32[]) -> u32[] {
  %Arg_0.3883 = u32[] parameter(0)
  ROOT %Arg_1.3884 = u32[] parameter(1)
}

%region_94.3837 (Arg_0.3834: f32[], Arg_1.3835: f32[]) -> f32[] {
  %Arg_0.3834 = f32[] parameter(0)
  %Arg_1.3835 = f32[] parameter(1)
  ROOT %maximum.3836 = f32[] maximum(%Arg_0.3834, %Arg_1.3835)
}

%region_95.3849 (Arg_0.3846: f32[], Arg_1.3847: f32[]) -> f32[] {
  %Arg_0.3846 = f32[] parameter(0)
  %Arg_1.3847 = f32[] parameter(1)
  ROOT %add.3848 = f32[] add(%Arg_0.3846, %Arg_1.3847)
}

%region_97.3893 (Arg_0.3890: bf16[], Arg_1.3891: bf16[]) -> bf16[] {
  %Arg_0.3890 = bf16[] parameter(0)
  %Arg_1.3891 = bf16[] parameter(1)
  ROOT %add.3892 = bf16[] add(%Arg_0.3890, %Arg_1.3891)
}

%region_9.1439.clone.8 (Arg_0.88: s32[], Arg_1.40: s32[]) -> s32[] {
  %Arg_0.88 = s32[] parameter(0)
  %Arg_1.40 = s32[] parameter(1)
  ROOT %add.8 = s32[] add(%Arg_0.88, %Arg_1.40)
}

%region_98.3907 (Arg_0.3904: s32[], Arg_1.3905: s32[]) -> s32[] {
  %Arg_0.3904 = s32[] parameter(0)
  %Arg_1.3905 = s32[] parameter(1)
  ROOT %add.3906 = s32[] add(%Arg_0.3904, %Arg_1.3905)
}

%region_99.3916 (Arg_0.3913: s32[], Arg_1.3914: s32[]) -> s32[] {
  %Arg_0.3913 = s32[] parameter(0)
  %Arg_1.3914 = s32[] parameter(1)
  ROOT %add.3915 = s32[] add(%Arg_0.3913, %Arg_1.3914)
}

%region_100.3955 (Arg_0.3952: f32[], Arg_1.3953: f32[]) -> f32[] {
  %Arg_0.3952 = f32[] parameter(0)
  %Arg_1.3953 = f32[] parameter(1)
  ROOT %add.3954 = f32[] add(%Arg_0.3952, %Arg_1.3953)
}

%region_104.4115 (Arg_0.4112: f32[], Arg_1.4113: f32[]) -> f32[] {
  %Arg_0.4112 = f32[] parameter(0)
  %Arg_1.4113 = f32[] parameter(1)
  ROOT %add.4114 = f32[] add(%Arg_0.4112, %Arg_1.4113)
}

%compare-greater-than.9.clone (p.0.lhs.82: bf16[], p.0.rhs.82: bf16[], p.1.lhs.82: s32[], p.1.rhs.82: s32[]) -> pred[] {
  %p.1.lhs.82 = s32[] parameter(2)
  %p.1.rhs.82 = s32[] parameter(3)
  %p.0.lhs.82 = bf16[] parameter(0)
  %p.0.rhs.82 = bf16[] parameter(1)
  ROOT %compare.427 = pred[] compare(%p.0.lhs.82, %p.0.rhs.82), direction=GT, type=TOTALORDER
}

%compare-value-and-index.8 (p.0.lhs.83: bf16[], p.0.rhs.83: bf16[], p.1.lhs.83: s32[], p.1.rhs.83: s32[]) -> pred[] {
  %p.0.lhs.83 = bf16[] parameter(0)
  %p.0.rhs.83 = bf16[] parameter(1)
  %compare.429 = pred[] compare(%p.0.lhs.83, %p.0.rhs.83), direction=EQ, type=TOTALORDER
  %p.1.lhs.83 = s32[] parameter(2)
  %p.1.rhs.83 = s32[] parameter(3)
  %compare.430 = pred[] compare(%p.1.lhs.83, %p.1.rhs.83), direction=LT
  %compare.428 = pred[] compare(%p.0.lhs.83, %p.0.rhs.83), direction=GT
  ROOT %select.270 = pred[] select(%compare.429, %compare.430, %compare.428)
}

%region_107.4189 (Arg_0.4187: u32[], Arg_1.4188: u32[]) -> u32[] {
  %Arg_0.4187 = u32[] parameter(0)
  ROOT %Arg_1.4188 = u32[] parameter(1)
}

%region_105.4141 (Arg_0.4138: f32[], Arg_1.4139: f32[]) -> f32[] {
  %Arg_0.4138 = f32[] parameter(0)
  %Arg_1.4139 = f32[] parameter(1)
  ROOT %maximum.4140 = f32[] maximum(%Arg_0.4138, %Arg_1.4139)
}

%region_106.4153 (Arg_0.4150: f32[], Arg_1.4151: f32[]) -> f32[] {
  %Arg_0.4150 = f32[] parameter(0)
  %Arg_1.4151 = f32[] parameter(1)
  ROOT %add.4152 = f32[] add(%Arg_0.4150, %Arg_1.4151)
}

%region_108.4197 (Arg_0.4194: bf16[], Arg_1.4195: bf16[]) -> bf16[] {
  %Arg_0.4194 = bf16[] parameter(0)
  %Arg_1.4195 = bf16[] parameter(1)
  ROOT %add.4196 = bf16[] add(%Arg_0.4194, %Arg_1.4195)
}

%region_9.1439.clone.9 (Arg_0.91: s32[], Arg_1.41: s32[]) -> s32[] {
  %Arg_0.91 = s32[] parameter(0)
  %Arg_1.41 = s32[] parameter(1)
  ROOT %add.9 = s32[] add(%Arg_0.91, %Arg_1.41)
}

%region_109.4211 (Arg_0.4208: s32[], Arg_1.4209: s32[]) -> s32[] {
  %Arg_0.4208 = s32[] parameter(0)
  %Arg_1.4209 = s32[] parameter(1)
  ROOT %add.4210 = s32[] add(%Arg_0.4208, %Arg_1.4209)
}

%region_110.4220 (Arg_0.4217: s32[], Arg_1.4218: s32[]) -> s32[] {
  %Arg_0.4217 = s32[] parameter(0)
  %Arg_1.4218 = s32[] parameter(1)
  ROOT %add.4219 = s32[] add(%Arg_0.4217, %Arg_1.4218)
}

%region_111.4259 (Arg_0.4256: f32[], Arg_1.4257: f32[]) -> f32[] {
  %Arg_0.4256 = f32[] parameter(0)
  %Arg_1.4257 = f32[] parameter(1)
  ROOT %add.4258 = f32[] add(%Arg_0.4256, %Arg_1.4257)
}

%region_115.4419 (Arg_0.4416: f32[], Arg_1.4417: f32[]) -> f32[] {
  %Arg_0.4416 = f32[] parameter(0)
  %Arg_1.4417 = f32[] parameter(1)
  ROOT %add.4418 = f32[] add(%Arg_0.4416, %Arg_1.4417)
}

%compare-greater-than.10.clone (p.0.lhs.84: bf16[], p.0.rhs.84: bf16[], p.1.lhs.84: s32[], p.1.rhs.84: s32[]) -> pred[] {
  %p.1.lhs.84 = s32[] parameter(2)
  %p.1.rhs.84 = s32[] parameter(3)
  %p.0.lhs.84 = bf16[] parameter(0)
  %p.0.rhs.84 = bf16[] parameter(1)
  ROOT %compare.432 = pred[] compare(%p.0.lhs.84, %p.0.rhs.84), direction=GT, type=TOTALORDER
}

%compare-value-and-index.10 (p.0.lhs.85: bf16[], p.0.rhs.85: bf16[], p.1.lhs.85: s32[], p.1.rhs.85: s32[]) -> pred[] {
  %p.0.lhs.85 = bf16[] parameter(0)
  %p.0.rhs.85 = bf16[] parameter(1)
  %compare.434 = pred[] compare(%p.0.lhs.85, %p.0.rhs.85), direction=EQ, type=TOTALORDER
  %p.1.lhs.85 = s32[] parameter(2)
  %p.1.rhs.85 = s32[] parameter(3)
  %compare.435 = pred[] compare(%p.1.lhs.85, %p.1.rhs.85), direction=LT
  %compare.433 = pred[] compare(%p.0.lhs.85, %p.0.rhs.85), direction=GT
  ROOT %select.271 = pred[] select(%compare.434, %compare.435, %compare.433)
}

%region_118.4493 (Arg_0.4491: u32[], Arg_1.4492: u32[]) -> u32[] {
  %Arg_0.4491 = u32[] parameter(0)
  ROOT %Arg_1.4492 = u32[] parameter(1)
}

%region_116.4445 (Arg_0.4442: f32[], Arg_1.4443: f32[]) -> f32[] {
  %Arg_0.4442 = f32[] parameter(0)
  %Arg_1.4443 = f32[] parameter(1)
  ROOT %maximum.4444 = f32[] maximum(%Arg_0.4442, %Arg_1.4443)
}

%region_117.4457 (Arg_0.4454: f32[], Arg_1.4455: f32[]) -> f32[] {
  %Arg_0.4454 = f32[] parameter(0)
  %Arg_1.4455 = f32[] parameter(1)
  ROOT %add.4456 = f32[] add(%Arg_0.4454, %Arg_1.4455)
}

%region_119.4501 (Arg_0.4498: bf16[], Arg_1.4499: bf16[]) -> bf16[] {
  %Arg_0.4498 = bf16[] parameter(0)
  %Arg_1.4499 = bf16[] parameter(1)
  ROOT %add.4500 = bf16[] add(%Arg_0.4498, %Arg_1.4499)
}

%region_9.1439.clone.10 (Arg_0.94: s32[], Arg_1.42: s32[]) -> s32[] {
  %Arg_0.94 = s32[] parameter(0)
  %Arg_1.42 = s32[] parameter(1)
  ROOT %add.10 = s32[] add(%Arg_0.94, %Arg_1.42)
}

%region_120.4515 (Arg_0.4512: s32[], Arg_1.4513: s32[]) -> s32[] {
  %Arg_0.4512 = s32[] parameter(0)
  %Arg_1.4513 = s32[] parameter(1)
  ROOT %add.4514 = s32[] add(%Arg_0.4512, %Arg_1.4513)
}

%region_121.4524 (Arg_0.4521: s32[], Arg_1.4522: s32[]) -> s32[] {
  %Arg_0.4521 = s32[] parameter(0)
  %Arg_1.4522 = s32[] parameter(1)
  ROOT %add.4523 = s32[] add(%Arg_0.4521, %Arg_1.4522)
}

%region_122.4563 (Arg_0.4560: f32[], Arg_1.4561: f32[]) -> f32[] {
  %Arg_0.4560 = f32[] parameter(0)
  %Arg_1.4561 = f32[] parameter(1)
  ROOT %add.4562 = f32[] add(%Arg_0.4560, %Arg_1.4561)
}

%region_126.4723 (Arg_0.4720: f32[], Arg_1.4721: f32[]) -> f32[] {
  %Arg_0.4720 = f32[] parameter(0)
  %Arg_1.4721 = f32[] parameter(1)
  ROOT %add.4722 = f32[] add(%Arg_0.4720, %Arg_1.4721)
}

%compare-greater-than.11.clone (p.0.lhs.86: bf16[], p.0.rhs.86: bf16[], p.1.lhs.86: s32[], p.1.rhs.86: s32[]) -> pred[] {
  %p.1.lhs.86 = s32[] parameter(2)
  %p.1.rhs.86 = s32[] parameter(3)
  %p.0.lhs.86 = bf16[] parameter(0)
  %p.0.rhs.86 = bf16[] parameter(1)
  ROOT %compare.437 = pred[] compare(%p.0.lhs.86, %p.0.rhs.86), direction=GT, type=TOTALORDER
}

%compare-value-and-index.11 (p.0.lhs.87: bf16[], p.0.rhs.87: bf16[], p.1.lhs.87: s32[], p.1.rhs.87: s32[]) -> pred[] {
  %p.0.lhs.87 = bf16[] parameter(0)
  %p.0.rhs.87 = bf16[] parameter(1)
  %compare.439 = pred[] compare(%p.0.lhs.87, %p.0.rhs.87), direction=EQ, type=TOTALORDER
  %p.1.lhs.87 = s32[] parameter(2)
  %p.1.rhs.87 = s32[] parameter(3)
  %compare.440 = pred[] compare(%p.1.lhs.87, %p.1.rhs.87), direction=LT
  %compare.438 = pred[] compare(%p.0.lhs.87, %p.0.rhs.87), direction=GT
  ROOT %select.272 = pred[] select(%compare.439, %compare.440, %compare.438)
}

%region_129.4797 (Arg_0.4795: u32[], Arg_1.4796: u32[]) -> u32[] {
  %Arg_0.4795 = u32[] parameter(0)
  ROOT %Arg_1.4796 = u32[] parameter(1)
}

%region_127.4749 (Arg_0.4746: f32[], Arg_1.4747: f32[]) -> f32[] {
  %Arg_0.4746 = f32[] parameter(0)
  %Arg_1.4747 = f32[] parameter(1)
  ROOT %maximum.4748 = f32[] maximum(%Arg_0.4746, %Arg_1.4747)
}

%region_128.4761 (Arg_0.4758: f32[], Arg_1.4759: f32[]) -> f32[] {
  %Arg_0.4758 = f32[] parameter(0)
  %Arg_1.4759 = f32[] parameter(1)
  ROOT %add.4760 = f32[] add(%Arg_0.4758, %Arg_1.4759)
}

%region_130.4805 (Arg_0.4802: bf16[], Arg_1.4803: bf16[]) -> bf16[] {
  %Arg_0.4802 = bf16[] parameter(0)
  %Arg_1.4803 = bf16[] parameter(1)
  ROOT %add.4804 = bf16[] add(%Arg_0.4802, %Arg_1.4803)
}

%region_9.1439.clone.11 (Arg_0.97: s32[], Arg_1.43: s32[]) -> s32[] {
  %Arg_0.97 = s32[] parameter(0)
  %Arg_1.43 = s32[] parameter(1)
  ROOT %add.11 = s32[] add(%Arg_0.97, %Arg_1.43)
}

%region_131.4819 (Arg_0.4816: s32[], Arg_1.4817: s32[]) -> s32[] {
  %Arg_0.4816 = s32[] parameter(0)
  %Arg_1.4817 = s32[] parameter(1)
  ROOT %add.4818 = s32[] add(%Arg_0.4816, %Arg_1.4817)
}

%region_132.4828 (Arg_0.4825: s32[], Arg_1.4826: s32[]) -> s32[] {
  %Arg_0.4825 = s32[] parameter(0)
  %Arg_1.4826 = s32[] parameter(1)
  ROOT %add.4827 = s32[] add(%Arg_0.4825, %Arg_1.4826)
}

%region_133.4867 (Arg_0.4864: f32[], Arg_1.4865: f32[]) -> f32[] {
  %Arg_0.4864 = f32[] parameter(0)
  %Arg_1.4865 = f32[] parameter(1)
  ROOT %add.4866 = f32[] add(%Arg_0.4864, %Arg_1.4865)
}

%region_137.5027 (Arg_0.5024: f32[], Arg_1.5025: f32[]) -> f32[] {
  %Arg_0.5024 = f32[] parameter(0)
  %Arg_1.5025 = f32[] parameter(1)
  ROOT %add.5026 = f32[] add(%Arg_0.5024, %Arg_1.5025)
}

%compare-greater-than.12.clone (p.0.lhs.88: bf16[], p.0.rhs.88: bf16[], p.1.lhs.88: s32[], p.1.rhs.88: s32[]) -> pred[] {
  %p.1.lhs.88 = s32[] parameter(2)
  %p.1.rhs.88 = s32[] parameter(3)
  %p.0.lhs.88 = bf16[] parameter(0)
  %p.0.rhs.88 = bf16[] parameter(1)
  ROOT %compare.442 = pred[] compare(%p.0.lhs.88, %p.0.rhs.88), direction=GT, type=TOTALORDER
}

%compare-value-and-index.12 (p.0.lhs.89: bf16[], p.0.rhs.89: bf16[], p.1.lhs.89: s32[], p.1.rhs.89: s32[]) -> pred[] {
  %p.0.lhs.89 = bf16[] parameter(0)
  %p.0.rhs.89 = bf16[] parameter(1)
  %compare.444 = pred[] compare(%p.0.lhs.89, %p.0.rhs.89), direction=EQ, type=TOTALORDER
  %p.1.lhs.89 = s32[] parameter(2)
  %p.1.rhs.89 = s32[] parameter(3)
  %compare.445 = pred[] compare(%p.1.lhs.89, %p.1.rhs.89), direction=LT
  %compare.443 = pred[] compare(%p.0.lhs.89, %p.0.rhs.89), direction=GT
  ROOT %select.273 = pred[] select(%compare.444, %compare.445, %compare.443)
}

%region_140.5101 (Arg_0.5099: u32[], Arg_1.5100: u32[]) -> u32[] {
  %Arg_0.5099 = u32[] parameter(0)
  ROOT %Arg_1.5100 = u32[] parameter(1)
}

%region_138.5053 (Arg_0.5050: f32[], Arg_1.5051: f32[]) -> f32[] {
  %Arg_0.5050 = f32[] parameter(0)
  %Arg_1.5051 = f32[] parameter(1)
  ROOT %maximum.5052 = f32[] maximum(%Arg_0.5050, %Arg_1.5051)
}

%region_139.5065 (Arg_0.5062: f32[], Arg_1.5063: f32[]) -> f32[] {
  %Arg_0.5062 = f32[] parameter(0)
  %Arg_1.5063 = f32[] parameter(1)
  ROOT %add.5064 = f32[] add(%Arg_0.5062, %Arg_1.5063)
}

%region_141.5109 (Arg_0.5106: bf16[], Arg_1.5107: bf16[]) -> bf16[] {
  %Arg_0.5106 = bf16[] parameter(0)
  %Arg_1.5107 = bf16[] parameter(1)
  ROOT %add.5108 = bf16[] add(%Arg_0.5106, %Arg_1.5107)
}

%region_9.1439.clone.12 (Arg_0.100: s32[], Arg_1.44: s32[]) -> s32[] {
  %Arg_0.100 = s32[] parameter(0)
  %Arg_1.44 = s32[] parameter(1)
  ROOT %add.12 = s32[] add(%Arg_0.100, %Arg_1.44)
}

%region_142.5123 (Arg_0.5120: s32[], Arg_1.5121: s32[]) -> s32[] {
  %Arg_0.5120 = s32[] parameter(0)
  %Arg_1.5121 = s32[] parameter(1)
  ROOT %add.5122 = s32[] add(%Arg_0.5120, %Arg_1.5121)
}

%region_143.5132 (Arg_0.5129: s32[], Arg_1.5130: s32[]) -> s32[] {
  %Arg_0.5129 = s32[] parameter(0)
  %Arg_1.5130 = s32[] parameter(1)
  ROOT %add.5131 = s32[] add(%Arg_0.5129, %Arg_1.5130)
}

%region_144.5171 (Arg_0.5168: f32[], Arg_1.5169: f32[]) -> f32[] {
  %Arg_0.5168 = f32[] parameter(0)
  %Arg_1.5169 = f32[] parameter(1)
  ROOT %add.5170 = f32[] add(%Arg_0.5168, %Arg_1.5169)
}

%region_148.5331 (Arg_0.5328: f32[], Arg_1.5329: f32[]) -> f32[] {
  %Arg_0.5328 = f32[] parameter(0)
  %Arg_1.5329 = f32[] parameter(1)
  ROOT %add.5330 = f32[] add(%Arg_0.5328, %Arg_1.5329)
}

%compare-greater-than.13.clone (p.0.lhs.90: bf16[], p.0.rhs.90: bf16[], p.1.lhs.90: s32[], p.1.rhs.90: s32[]) -> pred[] {
  %p.1.lhs.90 = s32[] parameter(2)
  %p.1.rhs.90 = s32[] parameter(3)
  %p.0.lhs.90 = bf16[] parameter(0)
  %p.0.rhs.90 = bf16[] parameter(1)
  ROOT %compare.447 = pred[] compare(%p.0.lhs.90, %p.0.rhs.90), direction=GT, type=TOTALORDER
}

%compare-value-and-index.13 (p.0.lhs.91: bf16[], p.0.rhs.91: bf16[], p.1.lhs.91: s32[], p.1.rhs.91: s32[]) -> pred[] {
  %p.0.lhs.91 = bf16[] parameter(0)
  %p.0.rhs.91 = bf16[] parameter(1)
  %compare.449 = pred[] compare(%p.0.lhs.91, %p.0.rhs.91), direction=EQ, type=TOTALORDER
  %p.1.lhs.91 = s32[] parameter(2)
  %p.1.rhs.91 = s32[] parameter(3)
  %compare.450 = pred[] compare(%p.1.lhs.91, %p.1.rhs.91), direction=LT
  %compare.448 = pred[] compare(%p.0.lhs.91, %p.0.rhs.91), direction=GT
  ROOT %select.274 = pred[] select(%compare.449, %compare.450, %compare.448)
}

%region_151.5405 (Arg_0.5403: u32[], Arg_1.5404: u32[]) -> u32[] {
  %Arg_0.5403 = u32[] parameter(0)
  ROOT %Arg_1.5404 = u32[] parameter(1)
}

%region_149.5357 (Arg_0.5354: f32[], Arg_1.5355: f32[]) -> f32[] {
  %Arg_0.5354 = f32[] parameter(0)
  %Arg_1.5355 = f32[] parameter(1)
  ROOT %maximum.5356 = f32[] maximum(%Arg_0.5354, %Arg_1.5355)
}

%region_150.5369 (Arg_0.5366: f32[], Arg_1.5367: f32[]) -> f32[] {
  %Arg_0.5366 = f32[] parameter(0)
  %Arg_1.5367 = f32[] parameter(1)
  ROOT %add.5368 = f32[] add(%Arg_0.5366, %Arg_1.5367)
}

%region_152.5413 (Arg_0.5410: bf16[], Arg_1.5411: bf16[]) -> bf16[] {
  %Arg_0.5410 = bf16[] parameter(0)
  %Arg_1.5411 = bf16[] parameter(1)
  ROOT %add.5412 = bf16[] add(%Arg_0.5410, %Arg_1.5411)
}

%region_9.1439.clone.13 (Arg_0.103: s32[], Arg_1.45: s32[]) -> s32[] {
  %Arg_0.103 = s32[] parameter(0)
  %Arg_1.45 = s32[] parameter(1)
  ROOT %add.13 = s32[] add(%Arg_0.103, %Arg_1.45)
}

%region_153.5427 (Arg_0.5424: s32[], Arg_1.5425: s32[]) -> s32[] {
  %Arg_0.5424 = s32[] parameter(0)
  %Arg_1.5425 = s32[] parameter(1)
  ROOT %add.5426 = s32[] add(%Arg_0.5424, %Arg_1.5425)
}

%region_154.5436 (Arg_0.5433: s32[], Arg_1.5434: s32[]) -> s32[] {
  %Arg_0.5433 = s32[] parameter(0)
  %Arg_1.5434 = s32[] parameter(1)
  ROOT %add.5435 = s32[] add(%Arg_0.5433, %Arg_1.5434)
}

%region_155.5475 (Arg_0.5472: f32[], Arg_1.5473: f32[]) -> f32[] {
  %Arg_0.5472 = f32[] parameter(0)
  %Arg_1.5473 = f32[] parameter(1)
  ROOT %add.5474 = f32[] add(%Arg_0.5472, %Arg_1.5473)
}

%region_159.5635 (Arg_0.5632: f32[], Arg_1.5633: f32[]) -> f32[] {
  %Arg_0.5632 = f32[] parameter(0)
  %Arg_1.5633 = f32[] parameter(1)
  ROOT %add.5634 = f32[] add(%Arg_0.5632, %Arg_1.5633)
}

%compare-greater-than.14.clone (p.0.lhs.92: bf16[], p.0.rhs.92: bf16[], p.1.lhs.92: s32[], p.1.rhs.92: s32[]) -> pred[] {
  %p.1.lhs.92 = s32[] parameter(2)
  %p.1.rhs.92 = s32[] parameter(3)
  %p.0.lhs.92 = bf16[] parameter(0)
  %p.0.rhs.92 = bf16[] parameter(1)
  ROOT %compare.452 = pred[] compare(%p.0.lhs.92, %p.0.rhs.92), direction=GT, type=TOTALORDER
}

%compare-value-and-index.14 (p.0.lhs.93: bf16[], p.0.rhs.93: bf16[], p.1.lhs.93: s32[], p.1.rhs.93: s32[]) -> pred[] {
  %p.0.lhs.93 = bf16[] parameter(0)
  %p.0.rhs.93 = bf16[] parameter(1)
  %compare.454 = pred[] compare(%p.0.lhs.93, %p.0.rhs.93), direction=EQ, type=TOTALORDER
  %p.1.lhs.93 = s32[] parameter(2)
  %p.1.rhs.93 = s32[] parameter(3)
  %compare.455 = pred[] compare(%p.1.lhs.93, %p.1.rhs.93), direction=LT
  %compare.453 = pred[] compare(%p.0.lhs.93, %p.0.rhs.93), direction=GT
  ROOT %select.275 = pred[] select(%compare.454, %compare.455, %compare.453)
}

%region_162.5709 (Arg_0.5707: u32[], Arg_1.5708: u32[]) -> u32[] {
  %Arg_0.5707 = u32[] parameter(0)
  ROOT %Arg_1.5708 = u32[] parameter(1)
}

%region_160.5661 (Arg_0.5658: f32[], Arg_1.5659: f32[]) -> f32[] {
  %Arg_0.5658 = f32[] parameter(0)
  %Arg_1.5659 = f32[] parameter(1)
  ROOT %maximum.5660 = f32[] maximum(%Arg_0.5658, %Arg_1.5659)
}

%region_161.5673 (Arg_0.5670: f32[], Arg_1.5671: f32[]) -> f32[] {
  %Arg_0.5670 = f32[] parameter(0)
  %Arg_1.5671 = f32[] parameter(1)
  ROOT %add.5672 = f32[] add(%Arg_0.5670, %Arg_1.5671)
}

%region_163.5717 (Arg_0.5714: bf16[], Arg_1.5715: bf16[]) -> bf16[] {
  %Arg_0.5714 = bf16[] parameter(0)
  %Arg_1.5715 = bf16[] parameter(1)
  ROOT %add.5716 = bf16[] add(%Arg_0.5714, %Arg_1.5715)
}

%region_9.1439.clone.14 (Arg_0.106: s32[], Arg_1.46: s32[]) -> s32[] {
  %Arg_0.106 = s32[] parameter(0)
  %Arg_1.46 = s32[] parameter(1)
  ROOT %add.14 = s32[] add(%Arg_0.106, %Arg_1.46)
}

%region_164.5731 (Arg_0.5728: s32[], Arg_1.5729: s32[]) -> s32[] {
  %Arg_0.5728 = s32[] parameter(0)
  %Arg_1.5729 = s32[] parameter(1)
  ROOT %add.5730 = s32[] add(%Arg_0.5728, %Arg_1.5729)
}

%region_165.5740 (Arg_0.5737: s32[], Arg_1.5738: s32[]) -> s32[] {
  %Arg_0.5737 = s32[] parameter(0)
  %Arg_1.5738 = s32[] parameter(1)
  ROOT %add.5739 = s32[] add(%Arg_0.5737, %Arg_1.5738)
}

%region_166.5779 (Arg_0.5776: f32[], Arg_1.5777: f32[]) -> f32[] {
  %Arg_0.5776 = f32[] parameter(0)
  %Arg_1.5777 = f32[] parameter(1)
  ROOT %add.5778 = f32[] add(%Arg_0.5776, %Arg_1.5777)
}

%region_170.5939 (Arg_0.5936: f32[], Arg_1.5937: f32[]) -> f32[] {
  %Arg_0.5936 = f32[] parameter(0)
  %Arg_1.5937 = f32[] parameter(1)
  ROOT %add.5938 = f32[] add(%Arg_0.5936, %Arg_1.5937)
}

%compare-greater-than.15.clone (p.0.lhs.94: bf16[], p.0.rhs.94: bf16[], p.1.lhs.94: s32[], p.1.rhs.94: s32[]) -> pred[] {
  %p.1.lhs.94 = s32[] parameter(2)
  %p.1.rhs.94 = s32[] parameter(3)
  %p.0.lhs.94 = bf16[] parameter(0)
  %p.0.rhs.94 = bf16[] parameter(1)
  ROOT %compare.457 = pred[] compare(%p.0.lhs.94, %p.0.rhs.94), direction=GT, type=TOTALORDER
}

%compare-value-and-index.15 (p.0.lhs.95: bf16[], p.0.rhs.95: bf16[], p.1.lhs.95: s32[], p.1.rhs.95: s32[]) -> pred[] {
  %p.0.lhs.95 = bf16[] parameter(0)
  %p.0.rhs.95 = bf16[] parameter(1)
  %compare.459 = pred[] compare(%p.0.lhs.95, %p.0.rhs.95), direction=EQ, type=TOTALORDER
  %p.1.lhs.95 = s32[] parameter(2)
  %p.1.rhs.95 = s32[] parameter(3)
  %compare.460 = pred[] compare(%p.1.lhs.95, %p.1.rhs.95), direction=LT
  %compare.458 = pred[] compare(%p.0.lhs.95, %p.0.rhs.95), direction=GT
  ROOT %select.276 = pred[] select(%compare.459, %compare.460, %compare.458)
}

%region_173.6013 (Arg_0.6011: u32[], Arg_1.6012: u32[]) -> u32[] {
  %Arg_0.6011 = u32[] parameter(0)
  ROOT %Arg_1.6012 = u32[] parameter(1)
}

%region_171.5965 (Arg_0.5962: f32[], Arg_1.5963: f32[]) -> f32[] {
  %Arg_0.5962 = f32[] parameter(0)
  %Arg_1.5963 = f32[] parameter(1)
  ROOT %maximum.5964 = f32[] maximum(%Arg_0.5962, %Arg_1.5963)
}

%region_172.5977 (Arg_0.5974: f32[], Arg_1.5975: f32[]) -> f32[] {
  %Arg_0.5974 = f32[] parameter(0)
  %Arg_1.5975 = f32[] parameter(1)
  ROOT %add.5976 = f32[] add(%Arg_0.5974, %Arg_1.5975)
}

%region_174.6021 (Arg_0.6018: bf16[], Arg_1.6019: bf16[]) -> bf16[] {
  %Arg_0.6018 = bf16[] parameter(0)
  %Arg_1.6019 = bf16[] parameter(1)
  ROOT %add.6020 = bf16[] add(%Arg_0.6018, %Arg_1.6019)
}

%region_9.1439.clone.15 (Arg_0.109: s32[], Arg_1.47: s32[]) -> s32[] {
  %Arg_0.109 = s32[] parameter(0)
  %Arg_1.47 = s32[] parameter(1)
  ROOT %add.15 = s32[] add(%Arg_0.109, %Arg_1.47)
}

%region_175.6035 (Arg_0.6032: s32[], Arg_1.6033: s32[]) -> s32[] {
  %Arg_0.6032 = s32[] parameter(0)
  %Arg_1.6033 = s32[] parameter(1)
  ROOT %add.6034 = s32[] add(%Arg_0.6032, %Arg_1.6033)
}

%region_176.6044 (Arg_0.6041: s32[], Arg_1.6042: s32[]) -> s32[] {
  %Arg_0.6041 = s32[] parameter(0)
  %Arg_1.6042 = s32[] parameter(1)
  ROOT %add.6043 = s32[] add(%Arg_0.6041, %Arg_1.6042)
}

%region_177.6083 (Arg_0.6080: f32[], Arg_1.6081: f32[]) -> f32[] {
  %Arg_0.6080 = f32[] parameter(0)
  %Arg_1.6081 = f32[] parameter(1)
  ROOT %add.6082 = f32[] add(%Arg_0.6080, %Arg_1.6081)
}

%region_181.6243 (Arg_0.6240: f32[], Arg_1.6241: f32[]) -> f32[] {
  %Arg_0.6240 = f32[] parameter(0)
  %Arg_1.6241 = f32[] parameter(1)
  ROOT %add.6242 = f32[] add(%Arg_0.6240, %Arg_1.6241)
}

%compare-greater-than.16.clone (p.0.lhs.96: bf16[], p.0.rhs.96: bf16[], p.1.lhs.96: s32[], p.1.rhs.96: s32[]) -> pred[] {
  %p.1.lhs.96 = s32[] parameter(2)
  %p.1.rhs.96 = s32[] parameter(3)
  %p.0.lhs.96 = bf16[] parameter(0)
  %p.0.rhs.96 = bf16[] parameter(1)
  ROOT %compare.462 = pred[] compare(%p.0.lhs.96, %p.0.rhs.96), direction=GT, type=TOTALORDER
}

%compare-value-and-index.16 (p.0.lhs.97: bf16[], p.0.rhs.97: bf16[], p.1.lhs.97: s32[], p.1.rhs.97: s32[]) -> pred[] {
  %p.0.lhs.97 = bf16[] parameter(0)
  %p.0.rhs.97 = bf16[] parameter(1)
  %compare.464 = pred[] compare(%p.0.lhs.97, %p.0.rhs.97), direction=EQ, type=TOTALORDER
  %p.1.lhs.97 = s32[] parameter(2)
  %p.1.rhs.97 = s32[] parameter(3)
  %compare.465 = pred[] compare(%p.1.lhs.97, %p.1.rhs.97), direction=LT
  %compare.463 = pred[] compare(%p.0.lhs.97, %p.0.rhs.97), direction=GT
  ROOT %select.277 = pred[] select(%compare.464, %compare.465, %compare.463)
}

%region_184.6317 (Arg_0.6315: u32[], Arg_1.6316: u32[]) -> u32[] {
  %Arg_0.6315 = u32[] parameter(0)
  ROOT %Arg_1.6316 = u32[] parameter(1)
}

%region_182.6269 (Arg_0.6266: f32[], Arg_1.6267: f32[]) -> f32[] {
  %Arg_0.6266 = f32[] parameter(0)
  %Arg_1.6267 = f32[] parameter(1)
  ROOT %maximum.6268 = f32[] maximum(%Arg_0.6266, %Arg_1.6267)
}

%region_183.6281 (Arg_0.6278: f32[], Arg_1.6279: f32[]) -> f32[] {
  %Arg_0.6278 = f32[] parameter(0)
  %Arg_1.6279 = f32[] parameter(1)
  ROOT %add.6280 = f32[] add(%Arg_0.6278, %Arg_1.6279)
}

%region_185.6325 (Arg_0.6322: bf16[], Arg_1.6323: bf16[]) -> bf16[] {
  %Arg_0.6322 = bf16[] parameter(0)
  %Arg_1.6323 = bf16[] parameter(1)
  ROOT %add.6324 = bf16[] add(%Arg_0.6322, %Arg_1.6323)
}

%region_9.1439.clone.16 (Arg_0.112: s32[], Arg_1.48: s32[]) -> s32[] {
  %Arg_0.112 = s32[] parameter(0)
  %Arg_1.48 = s32[] parameter(1)
  ROOT %add.16 = s32[] add(%Arg_0.112, %Arg_1.48)
}

%region_186.6339 (Arg_0.6336: s32[], Arg_1.6337: s32[]) -> s32[] {
  %Arg_0.6336 = s32[] parameter(0)
  %Arg_1.6337 = s32[] parameter(1)
  ROOT %add.6338 = s32[] add(%Arg_0.6336, %Arg_1.6337)
}

%region_187.6348 (Arg_0.6345: s32[], Arg_1.6346: s32[]) -> s32[] {
  %Arg_0.6345 = s32[] parameter(0)
  %Arg_1.6346 = s32[] parameter(1)
  ROOT %add.6347 = s32[] add(%Arg_0.6345, %Arg_1.6346)
}

%region_188.6387 (Arg_0.6384: f32[], Arg_1.6385: f32[]) -> f32[] {
  %Arg_0.6384 = f32[] parameter(0)
  %Arg_1.6385 = f32[] parameter(1)
  ROOT %add.6386 = f32[] add(%Arg_0.6384, %Arg_1.6385)
}

%region_192.6547 (Arg_0.6544: f32[], Arg_1.6545: f32[]) -> f32[] {
  %Arg_0.6544 = f32[] parameter(0)
  %Arg_1.6545 = f32[] parameter(1)
  ROOT %add.6546 = f32[] add(%Arg_0.6544, %Arg_1.6545)
}

%compare-greater-than.17.clone (p.0.lhs.98: bf16[], p.0.rhs.98: bf16[], p.1.lhs.98: s32[], p.1.rhs.98: s32[]) -> pred[] {
  %p.1.lhs.98 = s32[] parameter(2)
  %p.1.rhs.98 = s32[] parameter(3)
  %p.0.lhs.98 = bf16[] parameter(0)
  %p.0.rhs.98 = bf16[] parameter(1)
  ROOT %compare.467 = pred[] compare(%p.0.lhs.98, %p.0.rhs.98), direction=GT, type=TOTALORDER
}

%compare-value-and-index.17 (p.0.lhs.99: bf16[], p.0.rhs.99: bf16[], p.1.lhs.99: s32[], p.1.rhs.99: s32[]) -> pred[] {
  %p.0.lhs.99 = bf16[] parameter(0)
  %p.0.rhs.99 = bf16[] parameter(1)
  %compare.469 = pred[] compare(%p.0.lhs.99, %p.0.rhs.99), direction=EQ, type=TOTALORDER
  %p.1.lhs.99 = s32[] parameter(2)
  %p.1.rhs.99 = s32[] parameter(3)
  %compare.470 = pred[] compare(%p.1.lhs.99, %p.1.rhs.99), direction=LT
  %compare.468 = pred[] compare(%p.0.lhs.99, %p.0.rhs.99), direction=GT
  ROOT %select.278 = pred[] select(%compare.469, %compare.470, %compare.468)
}

%region_195.6621 (Arg_0.6619: u32[], Arg_1.6620: u32[]) -> u32[] {
  %Arg_0.6619 = u32[] parameter(0)
  ROOT %Arg_1.6620 = u32[] parameter(1)
}

%region_193.6573 (Arg_0.6570: f32[], Arg_1.6571: f32[]) -> f32[] {
  %Arg_0.6570 = f32[] parameter(0)
  %Arg_1.6571 = f32[] parameter(1)
  ROOT %maximum.6572 = f32[] maximum(%Arg_0.6570, %Arg_1.6571)
}

%region_194.6585 (Arg_0.6582: f32[], Arg_1.6583: f32[]) -> f32[] {
  %Arg_0.6582 = f32[] parameter(0)
  %Arg_1.6583 = f32[] parameter(1)
  ROOT %add.6584 = f32[] add(%Arg_0.6582, %Arg_1.6583)
}

%region_196.6629 (Arg_0.6626: bf16[], Arg_1.6627: bf16[]) -> bf16[] {
  %Arg_0.6626 = bf16[] parameter(0)
  %Arg_1.6627 = bf16[] parameter(1)
  ROOT %add.6628 = bf16[] add(%Arg_0.6626, %Arg_1.6627)
}

%region_9.1439.clone.17 (Arg_0.115: s32[], Arg_1.49: s32[]) -> s32[] {
  %Arg_0.115 = s32[] parameter(0)
  %Arg_1.49 = s32[] parameter(1)
  ROOT %add.17 = s32[] add(%Arg_0.115, %Arg_1.49)
}

%region_197.6643 (Arg_0.6640: s32[], Arg_1.6641: s32[]) -> s32[] {
  %Arg_0.6640 = s32[] parameter(0)
  %Arg_1.6641 = s32[] parameter(1)
  ROOT %add.6642 = s32[] add(%Arg_0.6640, %Arg_1.6641)
}

%region_198.6652 (Arg_0.6649: s32[], Arg_1.6650: s32[]) -> s32[] {
  %Arg_0.6649 = s32[] parameter(0)
  %Arg_1.6650 = s32[] parameter(1)
  ROOT %add.6651 = s32[] add(%Arg_0.6649, %Arg_1.6650)
}

%region_199.6691 (Arg_0.6688: f32[], Arg_1.6689: f32[]) -> f32[] {
  %Arg_0.6688 = f32[] parameter(0)
  %Arg_1.6689 = f32[] parameter(1)
  ROOT %add.6690 = f32[] add(%Arg_0.6688, %Arg_1.6689)
}

%region_203.6851 (Arg_0.6848: f32[], Arg_1.6849: f32[]) -> f32[] {
  %Arg_0.6848 = f32[] parameter(0)
  %Arg_1.6849 = f32[] parameter(1)
  ROOT %add.6850 = f32[] add(%Arg_0.6848, %Arg_1.6849)
}

%compare-greater-than.18.clone (p.0.lhs.100: bf16[], p.0.rhs.100: bf16[], p.1.lhs.100: s32[], p.1.rhs.100: s32[]) -> pred[] {
  %p.1.lhs.100 = s32[] parameter(2)
  %p.1.rhs.100 = s32[] parameter(3)
  %p.0.lhs.100 = bf16[] parameter(0)
  %p.0.rhs.100 = bf16[] parameter(1)
  ROOT %compare.472 = pred[] compare(%p.0.lhs.100, %p.0.rhs.100), direction=GT, type=TOTALORDER
}

%compare-value-and-index.18 (p.0.lhs.101: bf16[], p.0.rhs.101: bf16[], p.1.lhs.101: s32[], p.1.rhs.101: s32[]) -> pred[] {
  %p.0.lhs.101 = bf16[] parameter(0)
  %p.0.rhs.101 = bf16[] parameter(1)
  %compare.474 = pred[] compare(%p.0.lhs.101, %p.0.rhs.101), direction=EQ, type=TOTALORDER
  %p.1.lhs.101 = s32[] parameter(2)
  %p.1.rhs.101 = s32[] parameter(3)
  %compare.475 = pred[] compare(%p.1.lhs.101, %p.1.rhs.101), direction=LT
  %compare.473 = pred[] compare(%p.0.lhs.101, %p.0.rhs.101), direction=GT
  ROOT %select.279 = pred[] select(%compare.474, %compare.475, %compare.473)
}

%region_206.6925 (Arg_0.6923: u32[], Arg_1.6924: u32[]) -> u32[] {
  %Arg_0.6923 = u32[] parameter(0)
  ROOT %Arg_1.6924 = u32[] parameter(1)
}

%region_204.6877 (Arg_0.6874: f32[], Arg_1.6875: f32[]) -> f32[] {
  %Arg_0.6874 = f32[] parameter(0)
  %Arg_1.6875 = f32[] parameter(1)
  ROOT %maximum.6876 = f32[] maximum(%Arg_0.6874, %Arg_1.6875)
}

%region_205.6889 (Arg_0.6886: f32[], Arg_1.6887: f32[]) -> f32[] {
  %Arg_0.6886 = f32[] parameter(0)
  %Arg_1.6887 = f32[] parameter(1)
  ROOT %add.6888 = f32[] add(%Arg_0.6886, %Arg_1.6887)
}

%region_207.6933 (Arg_0.6930: bf16[], Arg_1.6931: bf16[]) -> bf16[] {
  %Arg_0.6930 = bf16[] parameter(0)
  %Arg_1.6931 = bf16[] parameter(1)
  ROOT %add.6932 = bf16[] add(%Arg_0.6930, %Arg_1.6931)
}

%region_9.1439.clone.18 (Arg_0.118: s32[], Arg_1.50: s32[]) -> s32[] {
  %Arg_0.118 = s32[] parameter(0)
  %Arg_1.50 = s32[] parameter(1)
  ROOT %add.18 = s32[] add(%Arg_0.118, %Arg_1.50)
}

%region_208.6947 (Arg_0.6944: s32[], Arg_1.6945: s32[]) -> s32[] {
  %Arg_0.6944 = s32[] parameter(0)
  %Arg_1.6945 = s32[] parameter(1)
  ROOT %add.6946 = s32[] add(%Arg_0.6944, %Arg_1.6945)
}

%region_209.6956 (Arg_0.6953: s32[], Arg_1.6954: s32[]) -> s32[] {
  %Arg_0.6953 = s32[] parameter(0)
  %Arg_1.6954 = s32[] parameter(1)
  ROOT %add.6955 = s32[] add(%Arg_0.6953, %Arg_1.6954)
}

%region_210.6995 (Arg_0.6992: f32[], Arg_1.6993: f32[]) -> f32[] {
  %Arg_0.6992 = f32[] parameter(0)
  %Arg_1.6993 = f32[] parameter(1)
  ROOT %add.6994 = f32[] add(%Arg_0.6992, %Arg_1.6993)
}

%region_214.7155 (Arg_0.7152: f32[], Arg_1.7153: f32[]) -> f32[] {
  %Arg_0.7152 = f32[] parameter(0)
  %Arg_1.7153 = f32[] parameter(1)
  ROOT %add.7154 = f32[] add(%Arg_0.7152, %Arg_1.7153)
}

%compare-greater-than.19.clone (p.0.lhs.102: bf16[], p.0.rhs.102: bf16[], p.1.lhs.102: s32[], p.1.rhs.102: s32[]) -> pred[] {
  %p.1.lhs.102 = s32[] parameter(2)
  %p.1.rhs.102 = s32[] parameter(3)
  %p.0.lhs.102 = bf16[] parameter(0)
  %p.0.rhs.102 = bf16[] parameter(1)
  ROOT %compare.477 = pred[] compare(%p.0.lhs.102, %p.0.rhs.102), direction=GT, type=TOTALORDER
}

%compare-value-and-index.19 (p.0.lhs.103: bf16[], p.0.rhs.103: bf16[], p.1.lhs.103: s32[], p.1.rhs.103: s32[]) -> pred[] {
  %p.0.lhs.103 = bf16[] parameter(0)
  %p.0.rhs.103 = bf16[] parameter(1)
  %compare.479 = pred[] compare(%p.0.lhs.103, %p.0.rhs.103), direction=EQ, type=TOTALORDER
  %p.1.lhs.103 = s32[] parameter(2)
  %p.1.rhs.103 = s32[] parameter(3)
  %compare.480 = pred[] compare(%p.1.lhs.103, %p.1.rhs.103), direction=LT
  %compare.478 = pred[] compare(%p.0.lhs.103, %p.0.rhs.103), direction=GT
  ROOT %select.280 = pred[] select(%compare.479, %compare.480, %compare.478)
}

%region_217.7229 (Arg_0.7227: u32[], Arg_1.7228: u32[]) -> u32[] {
  %Arg_0.7227 = u32[] parameter(0)
  ROOT %Arg_1.7228 = u32[] parameter(1)
}

%region_215.7181 (Arg_0.7178: f32[], Arg_1.7179: f32[]) -> f32[] {
  %Arg_0.7178 = f32[] parameter(0)
  %Arg_1.7179 = f32[] parameter(1)
  ROOT %maximum.7180 = f32[] maximum(%Arg_0.7178, %Arg_1.7179)
}

%region_216.7193 (Arg_0.7190: f32[], Arg_1.7191: f32[]) -> f32[] {
  %Arg_0.7190 = f32[] parameter(0)
  %Arg_1.7191 = f32[] parameter(1)
  ROOT %add.7192 = f32[] add(%Arg_0.7190, %Arg_1.7191)
}

%region_218.7237 (Arg_0.7234: bf16[], Arg_1.7235: bf16[]) -> bf16[] {
  %Arg_0.7234 = bf16[] parameter(0)
  %Arg_1.7235 = bf16[] parameter(1)
  ROOT %add.7236 = bf16[] add(%Arg_0.7234, %Arg_1.7235)
}

%region_9.1439.clone.19 (Arg_0.121: s32[], Arg_1.51: s32[]) -> s32[] {
  %Arg_0.121 = s32[] parameter(0)
  %Arg_1.51 = s32[] parameter(1)
  ROOT %add.19 = s32[] add(%Arg_0.121, %Arg_1.51)
}

%region_219.7251 (Arg_0.7248: s32[], Arg_1.7249: s32[]) -> s32[] {
  %Arg_0.7248 = s32[] parameter(0)
  %Arg_1.7249 = s32[] parameter(1)
  ROOT %add.7250 = s32[] add(%Arg_0.7248, %Arg_1.7249)
}

%region_220.7260 (Arg_0.7257: s32[], Arg_1.7258: s32[]) -> s32[] {
  %Arg_0.7257 = s32[] parameter(0)
  %Arg_1.7258 = s32[] parameter(1)
  ROOT %add.7259 = s32[] add(%Arg_0.7257, %Arg_1.7258)
}

%region_221.7299 (Arg_0.7296: f32[], Arg_1.7297: f32[]) -> f32[] {
  %Arg_0.7296 = f32[] parameter(0)
  %Arg_1.7297 = f32[] parameter(1)
  ROOT %add.7298 = f32[] add(%Arg_0.7296, %Arg_1.7297)
}

%region_225.7459 (Arg_0.7456: f32[], Arg_1.7457: f32[]) -> f32[] {
  %Arg_0.7456 = f32[] parameter(0)
  %Arg_1.7457 = f32[] parameter(1)
  ROOT %add.7458 = f32[] add(%Arg_0.7456, %Arg_1.7457)
}

%compare-greater-than.20.clone (p.0.lhs.104: bf16[], p.0.rhs.104: bf16[], p.1.lhs.104: s32[], p.1.rhs.104: s32[]) -> pred[] {
  %p.1.lhs.104 = s32[] parameter(2)
  %p.1.rhs.104 = s32[] parameter(3)
  %p.0.lhs.104 = bf16[] parameter(0)
  %p.0.rhs.104 = bf16[] parameter(1)
  ROOT %compare.482 = pred[] compare(%p.0.lhs.104, %p.0.rhs.104), direction=GT, type=TOTALORDER
}

%compare-value-and-index.20 (p.0.lhs.105: bf16[], p.0.rhs.105: bf16[], p.1.lhs.105: s32[], p.1.rhs.105: s32[]) -> pred[] {
  %p.0.lhs.105 = bf16[] parameter(0)
  %p.0.rhs.105 = bf16[] parameter(1)
  %compare.484 = pred[] compare(%p.0.lhs.105, %p.0.rhs.105), direction=EQ, type=TOTALORDER
  %p.1.lhs.105 = s32[] parameter(2)
  %p.1.rhs.105 = s32[] parameter(3)
  %compare.485 = pred[] compare(%p.1.lhs.105, %p.1.rhs.105), direction=LT
  %compare.483 = pred[] compare(%p.0.lhs.105, %p.0.rhs.105), direction=GT
  ROOT %select.281 = pred[] select(%compare.484, %compare.485, %compare.483)
}

%region_228.7533 (Arg_0.7531: u32[], Arg_1.7532: u32[]) -> u32[] {
  %Arg_0.7531 = u32[] parameter(0)
  ROOT %Arg_1.7532 = u32[] parameter(1)
}

%region_226.7485 (Arg_0.7482: f32[], Arg_1.7483: f32[]) -> f32[] {
  %Arg_0.7482 = f32[] parameter(0)
  %Arg_1.7483 = f32[] parameter(1)
  ROOT %maximum.7484 = f32[] maximum(%Arg_0.7482, %Arg_1.7483)
}

%region_227.7497 (Arg_0.7494: f32[], Arg_1.7495: f32[]) -> f32[] {
  %Arg_0.7494 = f32[] parameter(0)
  %Arg_1.7495 = f32[] parameter(1)
  ROOT %add.7496 = f32[] add(%Arg_0.7494, %Arg_1.7495)
}

%region_229.7541 (Arg_0.7538: bf16[], Arg_1.7539: bf16[]) -> bf16[] {
  %Arg_0.7538 = bf16[] parameter(0)
  %Arg_1.7539 = bf16[] parameter(1)
  ROOT %add.7540 = bf16[] add(%Arg_0.7538, %Arg_1.7539)
}

%region_9.1439.clone.20 (Arg_0.124: s32[], Arg_1.52: s32[]) -> s32[] {
  %Arg_0.124 = s32[] parameter(0)
  %Arg_1.52 = s32[] parameter(1)
  ROOT %add.20 = s32[] add(%Arg_0.124, %Arg_1.52)
}

%region_230.7555 (Arg_0.7552: s32[], Arg_1.7553: s32[]) -> s32[] {
  %Arg_0.7552 = s32[] parameter(0)
  %Arg_1.7553 = s32[] parameter(1)
  ROOT %add.7554 = s32[] add(%Arg_0.7552, %Arg_1.7553)
}

%region_231.7564 (Arg_0.7561: s32[], Arg_1.7562: s32[]) -> s32[] {
  %Arg_0.7561 = s32[] parameter(0)
  %Arg_1.7562 = s32[] parameter(1)
  ROOT %add.7563 = s32[] add(%Arg_0.7561, %Arg_1.7562)
}

%region_232.7603 (Arg_0.7600: f32[], Arg_1.7601: f32[]) -> f32[] {
  %Arg_0.7600 = f32[] parameter(0)
  %Arg_1.7601 = f32[] parameter(1)
  ROOT %add.7602 = f32[] add(%Arg_0.7600, %Arg_1.7601)
}

%region_236.7763 (Arg_0.7760: f32[], Arg_1.7761: f32[]) -> f32[] {
  %Arg_0.7760 = f32[] parameter(0)
  %Arg_1.7761 = f32[] parameter(1)
  ROOT %add.7762 = f32[] add(%Arg_0.7760, %Arg_1.7761)
}

%compare-greater-than.21.clone (p.0.lhs.106: bf16[], p.0.rhs.106: bf16[], p.1.lhs.106: s32[], p.1.rhs.106: s32[]) -> pred[] {
  %p.1.lhs.106 = s32[] parameter(2)
  %p.1.rhs.106 = s32[] parameter(3)
  %p.0.lhs.106 = bf16[] parameter(0)
  %p.0.rhs.106 = bf16[] parameter(1)
  ROOT %compare.487 = pred[] compare(%p.0.lhs.106, %p.0.rhs.106), direction=GT, type=TOTALORDER
}

%compare-value-and-index.21 (p.0.lhs.107: bf16[], p.0.rhs.107: bf16[], p.1.lhs.107: s32[], p.1.rhs.107: s32[]) -> pred[] {
  %p.0.lhs.107 = bf16[] parameter(0)
  %p.0.rhs.107 = bf16[] parameter(1)
  %compare.489 = pred[] compare(%p.0.lhs.107, %p.0.rhs.107), direction=EQ, type=TOTALORDER
  %p.1.lhs.107 = s32[] parameter(2)
  %p.1.rhs.107 = s32[] parameter(3)
  %compare.490 = pred[] compare(%p.1.lhs.107, %p.1.rhs.107), direction=LT
  %compare.488 = pred[] compare(%p.0.lhs.107, %p.0.rhs.107), direction=GT
  ROOT %select.282 = pred[] select(%compare.489, %compare.490, %compare.488)
}

%region_239.7837 (Arg_0.7835: u32[], Arg_1.7836: u32[]) -> u32[] {
  %Arg_0.7835 = u32[] parameter(0)
  ROOT %Arg_1.7836 = u32[] parameter(1)
}

%region_237.7789 (Arg_0.7786: f32[], Arg_1.7787: f32[]) -> f32[] {
  %Arg_0.7786 = f32[] parameter(0)
  %Arg_1.7787 = f32[] parameter(1)
  ROOT %maximum.7788 = f32[] maximum(%Arg_0.7786, %Arg_1.7787)
}

%region_238.7801 (Arg_0.7798: f32[], Arg_1.7799: f32[]) -> f32[] {
  %Arg_0.7798 = f32[] parameter(0)
  %Arg_1.7799 = f32[] parameter(1)
  ROOT %add.7800 = f32[] add(%Arg_0.7798, %Arg_1.7799)
}

%region_240.7845 (Arg_0.7842: bf16[], Arg_1.7843: bf16[]) -> bf16[] {
  %Arg_0.7842 = bf16[] parameter(0)
  %Arg_1.7843 = bf16[] parameter(1)
  ROOT %add.7844 = bf16[] add(%Arg_0.7842, %Arg_1.7843)
}

%region_9.1439.clone.21 (Arg_0.127: s32[], Arg_1.53: s32[]) -> s32[] {
  %Arg_0.127 = s32[] parameter(0)
  %Arg_1.53 = s32[] parameter(1)
  ROOT %add.21 = s32[] add(%Arg_0.127, %Arg_1.53)
}

%region_241.7859 (Arg_0.7856: s32[], Arg_1.7857: s32[]) -> s32[] {
  %Arg_0.7856 = s32[] parameter(0)
  %Arg_1.7857 = s32[] parameter(1)
  ROOT %add.7858 = s32[] add(%Arg_0.7856, %Arg_1.7857)
}

%region_242.7868 (Arg_0.7865: s32[], Arg_1.7866: s32[]) -> s32[] {
  %Arg_0.7865 = s32[] parameter(0)
  %Arg_1.7866 = s32[] parameter(1)
  ROOT %add.7867 = s32[] add(%Arg_0.7865, %Arg_1.7866)
}

%region_243.7907 (Arg_0.7904: f32[], Arg_1.7905: f32[]) -> f32[] {
  %Arg_0.7904 = f32[] parameter(0)
  %Arg_1.7905 = f32[] parameter(1)
  ROOT %add.7906 = f32[] add(%Arg_0.7904, %Arg_1.7905)
}

%region_247.8067 (Arg_0.8064: f32[], Arg_1.8065: f32[]) -> f32[] {
  %Arg_0.8064 = f32[] parameter(0)
  %Arg_1.8065 = f32[] parameter(1)
  ROOT %add.8066 = f32[] add(%Arg_0.8064, %Arg_1.8065)
}

%compare-greater-than.22.clone (p.0.lhs.108: bf16[], p.0.rhs.108: bf16[], p.1.lhs.108: s32[], p.1.rhs.108: s32[]) -> pred[] {
  %p.1.lhs.108 = s32[] parameter(2)
  %p.1.rhs.108 = s32[] parameter(3)
  %p.0.lhs.108 = bf16[] parameter(0)
  %p.0.rhs.108 = bf16[] parameter(1)
  ROOT %compare.492 = pred[] compare(%p.0.lhs.108, %p.0.rhs.108), direction=GT, type=TOTALORDER
}

%compare-value-and-index.22 (p.0.lhs.109: bf16[], p.0.rhs.109: bf16[], p.1.lhs.109: s32[], p.1.rhs.109: s32[]) -> pred[] {
  %p.0.lhs.109 = bf16[] parameter(0)
  %p.0.rhs.109 = bf16[] parameter(1)
  %compare.494 = pred[] compare(%p.0.lhs.109, %p.0.rhs.109), direction=EQ, type=TOTALORDER
  %p.1.lhs.109 = s32[] parameter(2)
  %p.1.rhs.109 = s32[] parameter(3)
  %compare.495 = pred[] compare(%p.1.lhs.109, %p.1.rhs.109), direction=LT
  %compare.493 = pred[] compare(%p.0.lhs.109, %p.0.rhs.109), direction=GT
  ROOT %select.283 = pred[] select(%compare.494, %compare.495, %compare.493)
}

%region_250.8141 (Arg_0.8139: u32[], Arg_1.8140: u32[]) -> u32[] {
  %Arg_0.8139 = u32[] parameter(0)
  ROOT %Arg_1.8140 = u32[] parameter(1)
}

%region_248.8093 (Arg_0.8090: f32[], Arg_1.8091: f32[]) -> f32[] {
  %Arg_0.8090 = f32[] parameter(0)
  %Arg_1.8091 = f32[] parameter(1)
  ROOT %maximum.8092 = f32[] maximum(%Arg_0.8090, %Arg_1.8091)
}

%region_249.8105 (Arg_0.8102: f32[], Arg_1.8103: f32[]) -> f32[] {
  %Arg_0.8102 = f32[] parameter(0)
  %Arg_1.8103 = f32[] parameter(1)
  ROOT %add.8104 = f32[] add(%Arg_0.8102, %Arg_1.8103)
}

%region_251.8149 (Arg_0.8146: bf16[], Arg_1.8147: bf16[]) -> bf16[] {
  %Arg_0.8146 = bf16[] parameter(0)
  %Arg_1.8147 = bf16[] parameter(1)
  ROOT %add.8148 = bf16[] add(%Arg_0.8146, %Arg_1.8147)
}

%region_9.1439.clone.22 (Arg_0.130: s32[], Arg_1.54: s32[]) -> s32[] {
  %Arg_0.130 = s32[] parameter(0)
  %Arg_1.54 = s32[] parameter(1)
  ROOT %add.22 = s32[] add(%Arg_0.130, %Arg_1.54)
}

%region_252.8163 (Arg_0.8160: s32[], Arg_1.8161: s32[]) -> s32[] {
  %Arg_0.8160 = s32[] parameter(0)
  %Arg_1.8161 = s32[] parameter(1)
  ROOT %add.8162 = s32[] add(%Arg_0.8160, %Arg_1.8161)
}

%region_253.8172 (Arg_0.8169: s32[], Arg_1.8170: s32[]) -> s32[] {
  %Arg_0.8169 = s32[] parameter(0)
  %Arg_1.8170 = s32[] parameter(1)
  ROOT %add.8171 = s32[] add(%Arg_0.8169, %Arg_1.8170)
}

%region_254.8211 (Arg_0.8208: f32[], Arg_1.8209: f32[]) -> f32[] {
  %Arg_0.8208 = f32[] parameter(0)
  %Arg_1.8209 = f32[] parameter(1)
  ROOT %add.8210 = f32[] add(%Arg_0.8208, %Arg_1.8209)
}

%region_258.8371 (Arg_0.8368: f32[], Arg_1.8369: f32[]) -> f32[] {
  %Arg_0.8368 = f32[] parameter(0)
  %Arg_1.8369 = f32[] parameter(1)
  ROOT %add.8370 = f32[] add(%Arg_0.8368, %Arg_1.8369)
}

%compare-greater-than.23.clone (p.0.lhs.110: bf16[], p.0.rhs.110: bf16[], p.1.lhs.110: s32[], p.1.rhs.110: s32[]) -> pred[] {
  %p.1.lhs.110 = s32[] parameter(2)
  %p.1.rhs.110 = s32[] parameter(3)
  %p.0.lhs.110 = bf16[] parameter(0)
  %p.0.rhs.110 = bf16[] parameter(1)
  ROOT %compare.497 = pred[] compare(%p.0.lhs.110, %p.0.rhs.110), direction=GT, type=TOTALORDER
}

%compare-value-and-index.23 (p.0.lhs.111: bf16[], p.0.rhs.111: bf16[], p.1.lhs.111: s32[], p.1.rhs.111: s32[]) -> pred[] {
  %p.0.lhs.111 = bf16[] parameter(0)
  %p.0.rhs.111 = bf16[] parameter(1)
  %compare.499 = pred[] compare(%p.0.lhs.111, %p.0.rhs.111), direction=EQ, type=TOTALORDER
  %p.1.lhs.111 = s32[] parameter(2)
  %p.1.rhs.111 = s32[] parameter(3)
  %compare.500 = pred[] compare(%p.1.lhs.111, %p.1.rhs.111), direction=LT
  %compare.498 = pred[] compare(%p.0.lhs.111, %p.0.rhs.111), direction=GT
  ROOT %select.284 = pred[] select(%compare.499, %compare.500, %compare.498)
}

%region_261.8445 (Arg_0.8443: u32[], Arg_1.8444: u32[]) -> u32[] {
  %Arg_0.8443 = u32[] parameter(0)
  ROOT %Arg_1.8444 = u32[] parameter(1)
}

%region_259.8397 (Arg_0.8394: f32[], Arg_1.8395: f32[]) -> f32[] {
  %Arg_0.8394 = f32[] parameter(0)
  %Arg_1.8395 = f32[] parameter(1)
  ROOT %maximum.8396 = f32[] maximum(%Arg_0.8394, %Arg_1.8395)
}

%region_260.8409 (Arg_0.8406: f32[], Arg_1.8407: f32[]) -> f32[] {
  %Arg_0.8406 = f32[] parameter(0)
  %Arg_1.8407 = f32[] parameter(1)
  ROOT %add.8408 = f32[] add(%Arg_0.8406, %Arg_1.8407)
}

%region_262.8453 (Arg_0.8450: bf16[], Arg_1.8451: bf16[]) -> bf16[] {
  %Arg_0.8450 = bf16[] parameter(0)
  %Arg_1.8451 = bf16[] parameter(1)
  ROOT %add.8452 = bf16[] add(%Arg_0.8450, %Arg_1.8451)
}

%region_9.1439.clone.23 (Arg_0.133: s32[], Arg_1.55: s32[]) -> s32[] {
  %Arg_0.133 = s32[] parameter(0)
  %Arg_1.55 = s32[] parameter(1)
  ROOT %add.23 = s32[] add(%Arg_0.133, %Arg_1.55)
}

%region_263.8467 (Arg_0.8464: s32[], Arg_1.8465: s32[]) -> s32[] {
  %Arg_0.8464 = s32[] parameter(0)
  %Arg_1.8465 = s32[] parameter(1)
  ROOT %add.8466 = s32[] add(%Arg_0.8464, %Arg_1.8465)
}

%region_264.8476 (Arg_0.8473: s32[], Arg_1.8474: s32[]) -> s32[] {
  %Arg_0.8473 = s32[] parameter(0)
  %Arg_1.8474 = s32[] parameter(1)
  ROOT %add.8475 = s32[] add(%Arg_0.8473, %Arg_1.8474)
}

%region_265.8515 (Arg_0.8512: f32[], Arg_1.8513: f32[]) -> f32[] {
  %Arg_0.8512 = f32[] parameter(0)
  %Arg_1.8513 = f32[] parameter(1)
  ROOT %add.8514 = f32[] add(%Arg_0.8512, %Arg_1.8513)
}

%region_269.8675 (Arg_0.8672: f32[], Arg_1.8673: f32[]) -> f32[] {
  %Arg_0.8672 = f32[] parameter(0)
  %Arg_1.8673 = f32[] parameter(1)
  ROOT %add.8674 = f32[] add(%Arg_0.8672, %Arg_1.8673)
}

%compare-greater-than.24.clone (p.0.lhs.112: bf16[], p.0.rhs.112: bf16[], p.1.lhs.112: s32[], p.1.rhs.112: s32[]) -> pred[] {
  %p.1.lhs.112 = s32[] parameter(2)
  %p.1.rhs.112 = s32[] parameter(3)
  %p.0.lhs.112 = bf16[] parameter(0)
  %p.0.rhs.112 = bf16[] parameter(1)
  ROOT %compare.502 = pred[] compare(%p.0.lhs.112, %p.0.rhs.112), direction=GT, type=TOTALORDER
}

%compare-value-and-index.24 (p.0.lhs.113: bf16[], p.0.rhs.113: bf16[], p.1.lhs.113: s32[], p.1.rhs.113: s32[]) -> pred[] {
  %p.0.lhs.113 = bf16[] parameter(0)
  %p.0.rhs.113 = bf16[] parameter(1)
  %compare.504 = pred[] compare(%p.0.lhs.113, %p.0.rhs.113), direction=EQ, type=TOTALORDER
  %p.1.lhs.113 = s32[] parameter(2)
  %p.1.rhs.113 = s32[] parameter(3)
  %compare.505 = pred[] compare(%p.1.lhs.113, %p.1.rhs.113), direction=LT
  %compare.503 = pred[] compare(%p.0.lhs.113, %p.0.rhs.113), direction=GT
  ROOT %select.285 = pred[] select(%compare.504, %compare.505, %compare.503)
}

%region_272.8749 (Arg_0.8747: u32[], Arg_1.8748: u32[]) -> u32[] {
  %Arg_0.8747 = u32[] parameter(0)
  ROOT %Arg_1.8748 = u32[] parameter(1)
}

%region_270.8701 (Arg_0.8698: f32[], Arg_1.8699: f32[]) -> f32[] {
  %Arg_0.8698 = f32[] parameter(0)
  %Arg_1.8699 = f32[] parameter(1)
  ROOT %maximum.8700 = f32[] maximum(%Arg_0.8698, %Arg_1.8699)
}

%region_271.8713 (Arg_0.8710: f32[], Arg_1.8711: f32[]) -> f32[] {
  %Arg_0.8710 = f32[] parameter(0)
  %Arg_1.8711 = f32[] parameter(1)
  ROOT %add.8712 = f32[] add(%Arg_0.8710, %Arg_1.8711)
}

%region_273.8757 (Arg_0.8754: bf16[], Arg_1.8755: bf16[]) -> bf16[] {
  %Arg_0.8754 = bf16[] parameter(0)
  %Arg_1.8755 = bf16[] parameter(1)
  ROOT %add.8756 = bf16[] add(%Arg_0.8754, %Arg_1.8755)
}

%region_9.1439.clone.24 (Arg_0.136: s32[], Arg_1.56: s32[]) -> s32[] {
  %Arg_0.136 = s32[] parameter(0)
  %Arg_1.56 = s32[] parameter(1)
  ROOT %add.24 = s32[] add(%Arg_0.136, %Arg_1.56)
}

%region_274.8771 (Arg_0.8768: s32[], Arg_1.8769: s32[]) -> s32[] {
  %Arg_0.8768 = s32[] parameter(0)
  %Arg_1.8769 = s32[] parameter(1)
  ROOT %add.8770 = s32[] add(%Arg_0.8768, %Arg_1.8769)
}

%region_275.8780 (Arg_0.8777: s32[], Arg_1.8778: s32[]) -> s32[] {
  %Arg_0.8777 = s32[] parameter(0)
  %Arg_1.8778 = s32[] parameter(1)
  ROOT %add.8779 = s32[] add(%Arg_0.8777, %Arg_1.8778)
}

%region_276.8819 (Arg_0.8816: f32[], Arg_1.8817: f32[]) -> f32[] {
  %Arg_0.8816 = f32[] parameter(0)
  %Arg_1.8817 = f32[] parameter(1)
  ROOT %add.8818 = f32[] add(%Arg_0.8816, %Arg_1.8817)
}

%region_280.8979 (Arg_0.8976: f32[], Arg_1.8977: f32[]) -> f32[] {
  %Arg_0.8976 = f32[] parameter(0)
  %Arg_1.8977 = f32[] parameter(1)
  ROOT %add.8978 = f32[] add(%Arg_0.8976, %Arg_1.8977)
}

%compare-greater-than.25.clone (p.0.lhs.114: bf16[], p.0.rhs.114: bf16[], p.1.lhs.114: s32[], p.1.rhs.114: s32[]) -> pred[] {
  %p.1.lhs.114 = s32[] parameter(2)
  %p.1.rhs.114 = s32[] parameter(3)
  %p.0.lhs.114 = bf16[] parameter(0)
  %p.0.rhs.114 = bf16[] parameter(1)
  ROOT %compare.507 = pred[] compare(%p.0.lhs.114, %p.0.rhs.114), direction=GT, type=TOTALORDER
}

%compare-value-and-index.25 (p.0.lhs.115: bf16[], p.0.rhs.115: bf16[], p.1.lhs.115: s32[], p.1.rhs.115: s32[]) -> pred[] {
  %p.0.lhs.115 = bf16[] parameter(0)
  %p.0.rhs.115 = bf16[] parameter(1)
  %compare.509 = pred[] compare(%p.0.lhs.115, %p.0.rhs.115), direction=EQ, type=TOTALORDER
  %p.1.lhs.115 = s32[] parameter(2)
  %p.1.rhs.115 = s32[] parameter(3)
  %compare.510 = pred[] compare(%p.1.lhs.115, %p.1.rhs.115), direction=LT
  %compare.508 = pred[] compare(%p.0.lhs.115, %p.0.rhs.115), direction=GT
  ROOT %select.286 = pred[] select(%compare.509, %compare.510, %compare.508)
}

%region_283.9053 (Arg_0.9051: u32[], Arg_1.9052: u32[]) -> u32[] {
  %Arg_0.9051 = u32[] parameter(0)
  ROOT %Arg_1.9052 = u32[] parameter(1)
}

%region_281.9005 (Arg_0.9002: f32[], Arg_1.9003: f32[]) -> f32[] {
  %Arg_0.9002 = f32[] parameter(0)
  %Arg_1.9003 = f32[] parameter(1)
  ROOT %maximum.9004 = f32[] maximum(%Arg_0.9002, %Arg_1.9003)
}

%region_282.9017 (Arg_0.9014: f32[], Arg_1.9015: f32[]) -> f32[] {
  %Arg_0.9014 = f32[] parameter(0)
  %Arg_1.9015 = f32[] parameter(1)
  ROOT %add.9016 = f32[] add(%Arg_0.9014, %Arg_1.9015)
}

%region_284.9061 (Arg_0.9058: bf16[], Arg_1.9059: bf16[]) -> bf16[] {
  %Arg_0.9058 = bf16[] parameter(0)
  %Arg_1.9059 = bf16[] parameter(1)
  ROOT %add.9060 = bf16[] add(%Arg_0.9058, %Arg_1.9059)
}

%region_9.1439.clone.25 (Arg_0.139: s32[], Arg_1.57: s32[]) -> s32[] {
  %Arg_0.139 = s32[] parameter(0)
  %Arg_1.57 = s32[] parameter(1)
  ROOT %add.25 = s32[] add(%Arg_0.139, %Arg_1.57)
}

%region_285.9075 (Arg_0.9072: s32[], Arg_1.9073: s32[]) -> s32[] {
  %Arg_0.9072 = s32[] parameter(0)
  %Arg_1.9073 = s32[] parameter(1)
  ROOT %add.9074 = s32[] add(%Arg_0.9072, %Arg_1.9073)
}

%region_286.9084 (Arg_0.9081: s32[], Arg_1.9082: s32[]) -> s32[] {
  %Arg_0.9081 = s32[] parameter(0)
  %Arg_1.9082 = s32[] parameter(1)
  ROOT %add.9083 = s32[] add(%Arg_0.9081, %Arg_1.9082)
}

%region_287.9123 (Arg_0.9120: f32[], Arg_1.9121: f32[]) -> f32[] {
  %Arg_0.9120 = f32[] parameter(0)
  %Arg_1.9121 = f32[] parameter(1)
  ROOT %add.9122 = f32[] add(%Arg_0.9120, %Arg_1.9121)
}

%region_291.9283 (Arg_0.9280: f32[], Arg_1.9281: f32[]) -> f32[] {
  %Arg_0.9280 = f32[] parameter(0)
  %Arg_1.9281 = f32[] parameter(1)
  ROOT %add.9282 = f32[] add(%Arg_0.9280, %Arg_1.9281)
}

%compare-greater-than.26.clone (p.0.lhs.116: bf16[], p.0.rhs.116: bf16[], p.1.lhs.116: s32[], p.1.rhs.116: s32[]) -> pred[] {
  %p.1.lhs.116 = s32[] parameter(2)
  %p.1.rhs.116 = s32[] parameter(3)
  %p.0.lhs.116 = bf16[] parameter(0)
  %p.0.rhs.116 = bf16[] parameter(1)
  ROOT %compare.512 = pred[] compare(%p.0.lhs.116, %p.0.rhs.116), direction=GT, type=TOTALORDER
}

%compare-value-and-index.26 (p.0.lhs.117: bf16[], p.0.rhs.117: bf16[], p.1.lhs.117: s32[], p.1.rhs.117: s32[]) -> pred[] {
  %p.0.lhs.117 = bf16[] parameter(0)
  %p.0.rhs.117 = bf16[] parameter(1)
  %compare.514 = pred[] compare(%p.0.lhs.117, %p.0.rhs.117), direction=EQ, type=TOTALORDER
  %p.1.lhs.117 = s32[] parameter(2)
  %p.1.rhs.117 = s32[] parameter(3)
  %compare.515 = pred[] compare(%p.1.lhs.117, %p.1.rhs.117), direction=LT
  %compare.513 = pred[] compare(%p.0.lhs.117, %p.0.rhs.117), direction=GT
  ROOT %select.287 = pred[] select(%compare.514, %compare.515, %compare.513)
}

%region_294.9357 (Arg_0.9355: u32[], Arg_1.9356: u32[]) -> u32[] {
  %Arg_0.9355 = u32[] parameter(0)
  ROOT %Arg_1.9356 = u32[] parameter(1)
}

%region_292.9309 (Arg_0.9306: f32[], Arg_1.9307: f32[]) -> f32[] {
  %Arg_0.9306 = f32[] parameter(0)
  %Arg_1.9307 = f32[] parameter(1)
  ROOT %maximum.9308 = f32[] maximum(%Arg_0.9306, %Arg_1.9307)
}

%region_293.9321 (Arg_0.9318: f32[], Arg_1.9319: f32[]) -> f32[] {
  %Arg_0.9318 = f32[] parameter(0)
  %Arg_1.9319 = f32[] parameter(1)
  ROOT %add.9320 = f32[] add(%Arg_0.9318, %Arg_1.9319)
}

%region_295.9365 (Arg_0.9362: bf16[], Arg_1.9363: bf16[]) -> bf16[] {
  %Arg_0.9362 = bf16[] parameter(0)
  %Arg_1.9363 = bf16[] parameter(1)
  ROOT %add.9364 = bf16[] add(%Arg_0.9362, %Arg_1.9363)
}

%region_9.1439.clone.26 (Arg_0.142: s32[], Arg_1.58: s32[]) -> s32[] {
  %Arg_0.142 = s32[] parameter(0)
  %Arg_1.58 = s32[] parameter(1)
  ROOT %add.26 = s32[] add(%Arg_0.142, %Arg_1.58)
}

%region_296.9379 (Arg_0.9376: s32[], Arg_1.9377: s32[]) -> s32[] {
  %Arg_0.9376 = s32[] parameter(0)
  %Arg_1.9377 = s32[] parameter(1)
  ROOT %add.9378 = s32[] add(%Arg_0.9376, %Arg_1.9377)
}

%region_297.9388 (Arg_0.9385: s32[], Arg_1.9386: s32[]) -> s32[] {
  %Arg_0.9385 = s32[] parameter(0)
  %Arg_1.9386 = s32[] parameter(1)
  ROOT %add.9387 = s32[] add(%Arg_0.9385, %Arg_1.9386)
}

%region_298.9427 (Arg_0.9424: f32[], Arg_1.9425: f32[]) -> f32[] {
  %Arg_0.9424 = f32[] parameter(0)
  %Arg_1.9425 = f32[] parameter(1)
  ROOT %add.9426 = f32[] add(%Arg_0.9424, %Arg_1.9425)
}

%region_302.9587 (Arg_0.9584: f32[], Arg_1.9585: f32[]) -> f32[] {
  %Arg_0.9584 = f32[] parameter(0)
  %Arg_1.9585 = f32[] parameter(1)
  ROOT %add.9586 = f32[] add(%Arg_0.9584, %Arg_1.9585)
}

%compare-greater-than.27.clone (p.0.lhs.118: bf16[], p.0.rhs.118: bf16[], p.1.lhs.118: s32[], p.1.rhs.118: s32[]) -> pred[] {
  %p.1.lhs.118 = s32[] parameter(2)
  %p.1.rhs.118 = s32[] parameter(3)
  %p.0.lhs.118 = bf16[] parameter(0)
  %p.0.rhs.118 = bf16[] parameter(1)
  ROOT %compare.517 = pred[] compare(%p.0.lhs.118, %p.0.rhs.118), direction=GT, type=TOTALORDER
}

%compare-value-and-index.27 (p.0.lhs.119: bf16[], p.0.rhs.119: bf16[], p.1.lhs.119: s32[], p.1.rhs.119: s32[]) -> pred[] {
  %p.0.lhs.119 = bf16[] parameter(0)
  %p.0.rhs.119 = bf16[] parameter(1)
  %compare.519 = pred[] compare(%p.0.lhs.119, %p.0.rhs.119), direction=EQ, type=TOTALORDER
  %p.1.lhs.119 = s32[] parameter(2)
  %p.1.rhs.119 = s32[] parameter(3)
  %compare.520 = pred[] compare(%p.1.lhs.119, %p.1.rhs.119), direction=LT
  %compare.518 = pred[] compare(%p.0.lhs.119, %p.0.rhs.119), direction=GT
  ROOT %select.288 = pred[] select(%compare.519, %compare.520, %compare.518)
}

%region_305.9661 (Arg_0.9659: u32[], Arg_1.9660: u32[]) -> u32[] {
  %Arg_0.9659 = u32[] parameter(0)
  ROOT %Arg_1.9660 = u32[] parameter(1)
}

%region_303.9613 (Arg_0.9610: f32[], Arg_1.9611: f32[]) -> f32[] {
  %Arg_0.9610 = f32[] parameter(0)
  %Arg_1.9611 = f32[] parameter(1)
  ROOT %maximum.9612 = f32[] maximum(%Arg_0.9610, %Arg_1.9611)
}

%region_304.9625 (Arg_0.9622: f32[], Arg_1.9623: f32[]) -> f32[] {
  %Arg_0.9622 = f32[] parameter(0)
  %Arg_1.9623 = f32[] parameter(1)
  ROOT %add.9624 = f32[] add(%Arg_0.9622, %Arg_1.9623)
}

%region_306.9669 (Arg_0.9666: bf16[], Arg_1.9667: bf16[]) -> bf16[] {
  %Arg_0.9666 = bf16[] parameter(0)
  %Arg_1.9667 = bf16[] parameter(1)
  ROOT %add.9668 = bf16[] add(%Arg_0.9666, %Arg_1.9667)
}

%region_9.1439.clone.27 (Arg_0.145: s32[], Arg_1.59: s32[]) -> s32[] {
  %Arg_0.145 = s32[] parameter(0)
  %Arg_1.59 = s32[] parameter(1)
  ROOT %add.27 = s32[] add(%Arg_0.145, %Arg_1.59)
}

%region_307.9683 (Arg_0.9680: s32[], Arg_1.9681: s32[]) -> s32[] {
  %Arg_0.9680 = s32[] parameter(0)
  %Arg_1.9681 = s32[] parameter(1)
  ROOT %add.9682 = s32[] add(%Arg_0.9680, %Arg_1.9681)
}

%region_308.9692 (Arg_0.9689: s32[], Arg_1.9690: s32[]) -> s32[] {
  %Arg_0.9689 = s32[] parameter(0)
  %Arg_1.9690 = s32[] parameter(1)
  ROOT %add.9691 = s32[] add(%Arg_0.9689, %Arg_1.9690)
}

%region_309.9731 (Arg_0.9728: f32[], Arg_1.9729: f32[]) -> f32[] {
  %Arg_0.9728 = f32[] parameter(0)
  %Arg_1.9729 = f32[] parameter(1)
  ROOT %add.9730 = f32[] add(%Arg_0.9728, %Arg_1.9729)
}

%region_313.9891 (Arg_0.9888: f32[], Arg_1.9889: f32[]) -> f32[] {
  %Arg_0.9888 = f32[] parameter(0)
  %Arg_1.9889 = f32[] parameter(1)
  ROOT %add.9890 = f32[] add(%Arg_0.9888, %Arg_1.9889)
}

%compare-greater-than.28.clone (p.0.lhs.120: bf16[], p.0.rhs.120: bf16[], p.1.lhs.120: s32[], p.1.rhs.120: s32[]) -> pred[] {
  %p.1.lhs.120 = s32[] parameter(2)
  %p.1.rhs.120 = s32[] parameter(3)
  %p.0.lhs.120 = bf16[] parameter(0)
  %p.0.rhs.120 = bf16[] parameter(1)
  ROOT %compare.522 = pred[] compare(%p.0.lhs.120, %p.0.rhs.120), direction=GT, type=TOTALORDER
}

%compare-value-and-index.28 (p.0.lhs.121: bf16[], p.0.rhs.121: bf16[], p.1.lhs.121: s32[], p.1.rhs.121: s32[]) -> pred[] {
  %p.0.lhs.121 = bf16[] parameter(0)
  %p.0.rhs.121 = bf16[] parameter(1)
  %compare.524 = pred[] compare(%p.0.lhs.121, %p.0.rhs.121), direction=EQ, type=TOTALORDER
  %p.1.lhs.121 = s32[] parameter(2)
  %p.1.rhs.121 = s32[] parameter(3)
  %compare.525 = pred[] compare(%p.1.lhs.121, %p.1.rhs.121), direction=LT
  %compare.523 = pred[] compare(%p.0.lhs.121, %p.0.rhs.121), direction=GT
  ROOT %select.289 = pred[] select(%compare.524, %compare.525, %compare.523)
}

%region_316.9965 (Arg_0.9963: u32[], Arg_1.9964: u32[]) -> u32[] {
  %Arg_0.9963 = u32[] parameter(0)
  ROOT %Arg_1.9964 = u32[] parameter(1)
}

%region_314.9917 (Arg_0.9914: f32[], Arg_1.9915: f32[]) -> f32[] {
  %Arg_0.9914 = f32[] parameter(0)
  %Arg_1.9915 = f32[] parameter(1)
  ROOT %maximum.9916 = f32[] maximum(%Arg_0.9914, %Arg_1.9915)
}

%region_315.9929 (Arg_0.9926: f32[], Arg_1.9927: f32[]) -> f32[] {
  %Arg_0.9926 = f32[] parameter(0)
  %Arg_1.9927 = f32[] parameter(1)
  ROOT %add.9928 = f32[] add(%Arg_0.9926, %Arg_1.9927)
}

%region_317.9973 (Arg_0.9970: bf16[], Arg_1.9971: bf16[]) -> bf16[] {
  %Arg_0.9970 = bf16[] parameter(0)
  %Arg_1.9971 = bf16[] parameter(1)
  ROOT %add.9972 = bf16[] add(%Arg_0.9970, %Arg_1.9971)
}

%region_9.1439.clone.28 (Arg_0.148: s32[], Arg_1.60: s32[]) -> s32[] {
  %Arg_0.148 = s32[] parameter(0)
  %Arg_1.60 = s32[] parameter(1)
  ROOT %add.28 = s32[] add(%Arg_0.148, %Arg_1.60)
}

%region_318.9987 (Arg_0.9984: s32[], Arg_1.9985: s32[]) -> s32[] {
  %Arg_0.9984 = s32[] parameter(0)
  %Arg_1.9985 = s32[] parameter(1)
  ROOT %add.9986 = s32[] add(%Arg_0.9984, %Arg_1.9985)
}

%region_319.9996 (Arg_0.9993: s32[], Arg_1.9994: s32[]) -> s32[] {
  %Arg_0.9993 = s32[] parameter(0)
  %Arg_1.9994 = s32[] parameter(1)
  ROOT %add.9995 = s32[] add(%Arg_0.9993, %Arg_1.9994)
}

%region_320.10035 (Arg_0.10032: f32[], Arg_1.10033: f32[]) -> f32[] {
  %Arg_0.10032 = f32[] parameter(0)
  %Arg_1.10033 = f32[] parameter(1)
  ROOT %add.10034 = f32[] add(%Arg_0.10032, %Arg_1.10033)
}

%region_324.10195 (Arg_0.10192: f32[], Arg_1.10193: f32[]) -> f32[] {
  %Arg_0.10192 = f32[] parameter(0)
  %Arg_1.10193 = f32[] parameter(1)
  ROOT %add.10194 = f32[] add(%Arg_0.10192, %Arg_1.10193)
}

%compare-greater-than.29.clone (p.0.lhs.122: bf16[], p.0.rhs.122: bf16[], p.1.lhs.122: s32[], p.1.rhs.122: s32[]) -> pred[] {
  %p.1.lhs.122 = s32[] parameter(2)
  %p.1.rhs.122 = s32[] parameter(3)
  %p.0.lhs.122 = bf16[] parameter(0)
  %p.0.rhs.122 = bf16[] parameter(1)
  ROOT %compare.527 = pred[] compare(%p.0.lhs.122, %p.0.rhs.122), direction=GT, type=TOTALORDER
}

%compare-value-and-index.29 (p.0.lhs.123: bf16[], p.0.rhs.123: bf16[], p.1.lhs.123: s32[], p.1.rhs.123: s32[]) -> pred[] {
  %p.0.lhs.123 = bf16[] parameter(0)
  %p.0.rhs.123 = bf16[] parameter(1)
  %compare.529 = pred[] compare(%p.0.lhs.123, %p.0.rhs.123), direction=EQ, type=TOTALORDER
  %p.1.lhs.123 = s32[] parameter(2)
  %p.1.rhs.123 = s32[] parameter(3)
  %compare.530 = pred[] compare(%p.1.lhs.123, %p.1.rhs.123), direction=LT
  %compare.528 = pred[] compare(%p.0.lhs.123, %p.0.rhs.123), direction=GT
  ROOT %select.290 = pred[] select(%compare.529, %compare.530, %compare.528)
}

%region_327.10269 (Arg_0.10267: u32[], Arg_1.10268: u32[]) -> u32[] {
  %Arg_0.10267 = u32[] parameter(0)
  ROOT %Arg_1.10268 = u32[] parameter(1)
}

%region_325.10221 (Arg_0.10218: f32[], Arg_1.10219: f32[]) -> f32[] {
  %Arg_0.10218 = f32[] parameter(0)
  %Arg_1.10219 = f32[] parameter(1)
  ROOT %maximum.10220 = f32[] maximum(%Arg_0.10218, %Arg_1.10219)
}

%region_326.10233 (Arg_0.10230: f32[], Arg_1.10231: f32[]) -> f32[] {
  %Arg_0.10230 = f32[] parameter(0)
  %Arg_1.10231 = f32[] parameter(1)
  ROOT %add.10232 = f32[] add(%Arg_0.10230, %Arg_1.10231)
}

%region_328.10277 (Arg_0.10274: bf16[], Arg_1.10275: bf16[]) -> bf16[] {
  %Arg_0.10274 = bf16[] parameter(0)
  %Arg_1.10275 = bf16[] parameter(1)
  ROOT %add.10276 = bf16[] add(%Arg_0.10274, %Arg_1.10275)
}

%region_9.1439.clone.29 (Arg_0.151: s32[], Arg_1.61: s32[]) -> s32[] {
  %Arg_0.151 = s32[] parameter(0)
  %Arg_1.61 = s32[] parameter(1)
  ROOT %add.29 = s32[] add(%Arg_0.151, %Arg_1.61)
}

%region_329.10291 (Arg_0.10288: s32[], Arg_1.10289: s32[]) -> s32[] {
  %Arg_0.10288 = s32[] parameter(0)
  %Arg_1.10289 = s32[] parameter(1)
  ROOT %add.10290 = s32[] add(%Arg_0.10288, %Arg_1.10289)
}

%region_330.10300 (Arg_0.10297: s32[], Arg_1.10298: s32[]) -> s32[] {
  %Arg_0.10297 = s32[] parameter(0)
  %Arg_1.10298 = s32[] parameter(1)
  ROOT %add.10299 = s32[] add(%Arg_0.10297, %Arg_1.10298)
}

%region_331.10339 (Arg_0.10336: f32[], Arg_1.10337: f32[]) -> f32[] {
  %Arg_0.10336 = f32[] parameter(0)
  %Arg_1.10337 = f32[] parameter(1)
  ROOT %add.10338 = f32[] add(%Arg_0.10336, %Arg_1.10337)
}

%region_335.10499 (Arg_0.10496: f32[], Arg_1.10497: f32[]) -> f32[] {
  %Arg_0.10496 = f32[] parameter(0)
  %Arg_1.10497 = f32[] parameter(1)
  ROOT %add.10498 = f32[] add(%Arg_0.10496, %Arg_1.10497)
}

%compare-greater-than.30.clone (p.0.lhs.124: bf16[], p.0.rhs.124: bf16[], p.1.lhs.124: s32[], p.1.rhs.124: s32[]) -> pred[] {
  %p.1.lhs.124 = s32[] parameter(2)
  %p.1.rhs.124 = s32[] parameter(3)
  %p.0.lhs.124 = bf16[] parameter(0)
  %p.0.rhs.124 = bf16[] parameter(1)
  ROOT %compare.532 = pred[] compare(%p.0.lhs.124, %p.0.rhs.124), direction=GT, type=TOTALORDER
}

%compare-value-and-index.30 (p.0.lhs.125: bf16[], p.0.rhs.125: bf16[], p.1.lhs.125: s32[], p.1.rhs.125: s32[]) -> pred[] {
  %p.0.lhs.125 = bf16[] parameter(0)
  %p.0.rhs.125 = bf16[] parameter(1)
  %compare.534 = pred[] compare(%p.0.lhs.125, %p.0.rhs.125), direction=EQ, type=TOTALORDER
  %p.1.lhs.125 = s32[] parameter(2)
  %p.1.rhs.125 = s32[] parameter(3)
  %compare.535 = pred[] compare(%p.1.lhs.125, %p.1.rhs.125), direction=LT
  %compare.533 = pred[] compare(%p.0.lhs.125, %p.0.rhs.125), direction=GT
  ROOT %select.291 = pred[] select(%compare.534, %compare.535, %compare.533)
}

%region_338.10573 (Arg_0.10571: u32[], Arg_1.10572: u32[]) -> u32[] {
  %Arg_0.10571 = u32[] parameter(0)
  ROOT %Arg_1.10572 = u32[] parameter(1)
}

%region_336.10525 (Arg_0.10522: f32[], Arg_1.10523: f32[]) -> f32[] {
  %Arg_0.10522 = f32[] parameter(0)
  %Arg_1.10523 = f32[] parameter(1)
  ROOT %maximum.10524 = f32[] maximum(%Arg_0.10522, %Arg_1.10523)
}

%region_337.10537 (Arg_0.10534: f32[], Arg_1.10535: f32[]) -> f32[] {
  %Arg_0.10534 = f32[] parameter(0)
  %Arg_1.10535 = f32[] parameter(1)
  ROOT %add.10536 = f32[] add(%Arg_0.10534, %Arg_1.10535)
}

%region_339.10581 (Arg_0.10578: bf16[], Arg_1.10579: bf16[]) -> bf16[] {
  %Arg_0.10578 = bf16[] parameter(0)
  %Arg_1.10579 = bf16[] parameter(1)
  ROOT %add.10580 = bf16[] add(%Arg_0.10578, %Arg_1.10579)
}

%region_9.1439.clone.30 (Arg_0.154: s32[], Arg_1.62: s32[]) -> s32[] {
  %Arg_0.154 = s32[] parameter(0)
  %Arg_1.62 = s32[] parameter(1)
  ROOT %add.30 = s32[] add(%Arg_0.154, %Arg_1.62)
}

%region_340.10595 (Arg_0.10592: s32[], Arg_1.10593: s32[]) -> s32[] {
  %Arg_0.10592 = s32[] parameter(0)
  %Arg_1.10593 = s32[] parameter(1)
  ROOT %add.10594 = s32[] add(%Arg_0.10592, %Arg_1.10593)
}

%region_341.10604 (Arg_0.10601: s32[], Arg_1.10602: s32[]) -> s32[] {
  %Arg_0.10601 = s32[] parameter(0)
  %Arg_1.10602 = s32[] parameter(1)
  ROOT %add.10603 = s32[] add(%Arg_0.10601, %Arg_1.10602)
}

%region_342.10643 (Arg_0.10640: f32[], Arg_1.10641: f32[]) -> f32[] {
  %Arg_0.10640 = f32[] parameter(0)
  %Arg_1.10641 = f32[] parameter(1)
  ROOT %add.10642 = f32[] add(%Arg_0.10640, %Arg_1.10641)
}

%region_346.10803 (Arg_0.10800: f32[], Arg_1.10801: f32[]) -> f32[] {
  %Arg_0.10800 = f32[] parameter(0)
  %Arg_1.10801 = f32[] parameter(1)
  ROOT %add.10802 = f32[] add(%Arg_0.10800, %Arg_1.10801)
}

%compare-greater-than.31.clone (p.0.lhs.126: bf16[], p.0.rhs.126: bf16[], p.1.lhs.126: s32[], p.1.rhs.126: s32[]) -> pred[] {
  %p.1.lhs.126 = s32[] parameter(2)
  %p.1.rhs.126 = s32[] parameter(3)
  %p.0.lhs.126 = bf16[] parameter(0)
  %p.0.rhs.126 = bf16[] parameter(1)
  ROOT %compare.537 = pred[] compare(%p.0.lhs.126, %p.0.rhs.126), direction=GT, type=TOTALORDER
}

%compare-value-and-index.31 (p.0.lhs.127: bf16[], p.0.rhs.127: bf16[], p.1.lhs.127: s32[], p.1.rhs.127: s32[]) -> pred[] {
  %p.0.lhs.127 = bf16[] parameter(0)
  %p.0.rhs.127 = bf16[] parameter(1)
  %compare.539 = pred[] compare(%p.0.lhs.127, %p.0.rhs.127), direction=EQ, type=TOTALORDER
  %p.1.lhs.127 = s32[] parameter(2)
  %p.1.rhs.127 = s32[] parameter(3)
  %compare.540 = pred[] compare(%p.1.lhs.127, %p.1.rhs.127), direction=LT
  %compare.538 = pred[] compare(%p.0.lhs.127, %p.0.rhs.127), direction=GT
  ROOT %select.292 = pred[] select(%compare.539, %compare.540, %compare.538)
}

%region_349.10877 (Arg_0.10875: u32[], Arg_1.10876: u32[]) -> u32[] {
  %Arg_0.10875 = u32[] parameter(0)
  ROOT %Arg_1.10876 = u32[] parameter(1)
}

%region_347.10829 (Arg_0.10826: f32[], Arg_1.10827: f32[]) -> f32[] {
  %Arg_0.10826 = f32[] parameter(0)
  %Arg_1.10827 = f32[] parameter(1)
  ROOT %maximum.10828 = f32[] maximum(%Arg_0.10826, %Arg_1.10827)
}

%region_348.10841 (Arg_0.10838: f32[], Arg_1.10839: f32[]) -> f32[] {
  %Arg_0.10838 = f32[] parameter(0)
  %Arg_1.10839 = f32[] parameter(1)
  ROOT %add.10840 = f32[] add(%Arg_0.10838, %Arg_1.10839)
}

%region_350.10885 (Arg_0.10882: bf16[], Arg_1.10883: bf16[]) -> bf16[] {
  %Arg_0.10882 = bf16[] parameter(0)
  %Arg_1.10883 = bf16[] parameter(1)
  ROOT %add.10884 = bf16[] add(%Arg_0.10882, %Arg_1.10883)
}

%region_9.1439.clone.31 (Arg_0.157: s32[], Arg_1.63: s32[]) -> s32[] {
  %Arg_0.157 = s32[] parameter(0)
  %Arg_1.63 = s32[] parameter(1)
  ROOT %add.31 = s32[] add(%Arg_0.157, %Arg_1.63)
}

%region_351.10899 (Arg_0.10896: s32[], Arg_1.10897: s32[]) -> s32[] {
  %Arg_0.10896 = s32[] parameter(0)
  %Arg_1.10897 = s32[] parameter(1)
  ROOT %add.10898 = s32[] add(%Arg_0.10896, %Arg_1.10897)
}

%region_352.10908 (Arg_0.10905: s32[], Arg_1.10906: s32[]) -> s32[] {
  %Arg_0.10905 = s32[] parameter(0)
  %Arg_1.10906 = s32[] parameter(1)
  ROOT %add.10907 = s32[] add(%Arg_0.10905, %Arg_1.10906)
}

%region_353.10947 (Arg_0.10944: f32[], Arg_1.10945: f32[]) -> f32[] {
  %Arg_0.10944 = f32[] parameter(0)
  %Arg_1.10945 = f32[] parameter(1)
  ROOT %add.10946 = f32[] add(%Arg_0.10944, %Arg_1.10945)
}

%region_358.11031 (Arg_0.11028: s32[], Arg_1.11029: s32[]) -> s32[] {
  %Arg_0.11028 = s32[] parameter(0)
  %Arg_1.11029 = s32[] parameter(1)
  ROOT %add.11030 = s32[] add(%Arg_0.11028, %Arg_1.11029)
}

%region_358.11031.clone (Arg_0.853: s32[], Arg_1.542: s32[]) -> s32[] {
  %Arg_0.853 = s32[] parameter(0)
  %Arg_1.542 = s32[] parameter(1)
  ROOT %add.673 = s32[] add(%Arg_0.853, %Arg_1.542)
}

%region_354.10985 (Arg_0.10982: f32[], Arg_1.10983: f32[]) -> f32[] {
  %Arg_0.10982 = f32[] parameter(0)
  %Arg_1.10983 = f32[] parameter(1)
  ROOT %maximum.10984 = f32[] maximum(%Arg_0.10982, %Arg_1.10983)
}

%region_355.10996 (Arg_0.10993: f32[], Arg_1.10994: f32[]) -> f32[] {
  %Arg_0.10993 = f32[] parameter(0)
  %Arg_1.10994 = f32[] parameter(1)
  ROOT %add.10995 = f32[] add(%Arg_0.10993, %Arg_1.10994)
}

%region_359.11066 (Arg_0.11063: bf16[], Arg_1.11064: bf16[]) -> bf16[] {
  %Arg_0.11063 = bf16[] parameter(0)
  %Arg_1.11064 = bf16[] parameter(1)
  ROOT %add.11065 = bf16[] add(%Arg_0.11063, %Arg_1.11064)
}

%region_359.11066.clone (Arg_0.854: bf16[], Arg_1.543: bf16[]) -> bf16[] {
  %Arg_0.854 = bf16[] parameter(0)
  %Arg_1.543 = bf16[] parameter(1)
  ROOT %add.674 = bf16[] add(%Arg_0.854, %Arg_1.543)
}

%region_1163.29598 (Arg_0.29595: f32[], Arg_1.29596: f32[]) -> f32[] {
  %Arg_0.29595 = f32[] parameter(0)
  %Arg_1.29596 = f32[] parameter(1)
  ROOT %add.29597 = f32[] add(%Arg_0.29595, %Arg_1.29596)
}

%region_361.11083 (Arg_0.11080: f32[], Arg_1.11081: f32[]) -> f32[] {
  %Arg_0.11080 = f32[] parameter(0)
  %Arg_1.11081 = f32[] parameter(1)
  ROOT %add.11082 = f32[] add(%Arg_0.11080, %Arg_1.11081)
}

%region_363.11124 (Arg_0.11121: f32[], Arg_1.11122: f32[]) -> f32[] {
  %Arg_0.11121 = f32[] parameter(0)
  %Arg_1.11122 = f32[] parameter(1)
  ROOT %add.11123 = f32[] add(%Arg_0.11121, %Arg_1.11122)
}

%region_364.11265 (Arg_0.11262: s32[], Arg_1.11263: s32[]) -> s32[] {
  %Arg_0.11262 = s32[] parameter(0)
  %Arg_1.11263 = s32[] parameter(1)
  ROOT %add.11264 = s32[] add(%Arg_0.11262, %Arg_1.11263)
}

%region_365.11273 (Arg_0.11270: s32[], Arg_1.11271: s32[]) -> s32[] {
  %Arg_0.11270 = s32[] parameter(0)
  %Arg_1.11271 = s32[] parameter(1)
  ROOT %add.11272 = s32[] add(%Arg_0.11270, %Arg_1.11271)
}

%region_366.11278 (Arg_0.11275: s32[], Arg_1.11276: s32[]) -> s32[] {
  %Arg_0.11275 = s32[] parameter(0)
  %Arg_1.11276 = s32[] parameter(1)
  ROOT %maximum.11277 = s32[] maximum(%Arg_0.11275, %Arg_1.11276)
}

%region_6.178._custom_call_lowering_rule.32 (Arg_0.861: s32[], Arg_1.550: s32[]) -> s32[] {
  %Arg_0.861 = s32[] parameter(0)
  ROOT %Arg_1.550 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.32 (Arg_0.866: s32[], Arg_1.555: s32[]) -> s32[] {
  %Arg_0.866 = s32[] parameter(0)
  ROOT %Arg_1.555 = s32[] parameter(1)
}

%region_367.11294 (Arg_0.11291: f32[], Arg_1.11292: f32[]) -> f32[] {
  %Arg_0.11291 = f32[] parameter(0)
  %Arg_1.11292 = f32[] parameter(1)
  ROOT %add.11293 = f32[] add(%Arg_0.11291, %Arg_1.11292)
}

%compare-greater-than.32.clone (p.0.lhs.128: bf16[], p.0.rhs.128: bf16[], p.1.lhs.128: s32[], p.1.rhs.128: s32[]) -> pred[] {
  %p.1.lhs.128 = s32[] parameter(2)
  %p.1.rhs.128 = s32[] parameter(3)
  %p.0.lhs.128 = bf16[] parameter(0)
  %p.0.rhs.128 = bf16[] parameter(1)
  ROOT %compare.542 = pred[] compare(%p.0.lhs.128, %p.0.rhs.128), direction=GT, type=TOTALORDER
}

%compare-value-and-index.32 (p.0.lhs.129: bf16[], p.0.rhs.129: bf16[], p.1.lhs.129: s32[], p.1.rhs.129: s32[]) -> pred[] {
  %p.0.lhs.129 = bf16[] parameter(0)
  %p.0.rhs.129 = bf16[] parameter(1)
  %compare.544 = pred[] compare(%p.0.lhs.129, %p.0.rhs.129), direction=EQ, type=TOTALORDER
  %p.1.lhs.129 = s32[] parameter(2)
  %p.1.rhs.129 = s32[] parameter(3)
  %compare.545 = pred[] compare(%p.1.lhs.129, %p.1.rhs.129), direction=LT
  %compare.543 = pred[] compare(%p.0.lhs.129, %p.0.rhs.129), direction=GT
  ROOT %select.293 = pred[] select(%compare.544, %compare.545, %compare.543)
}

%region_370.11373 (Arg_0.11371: u32[], Arg_1.11372: u32[]) -> u32[] {
  %Arg_0.11371 = u32[] parameter(0)
  ROOT %Arg_1.11372 = u32[] parameter(1)
}

%region_368.11323 (Arg_0.11320: f32[], Arg_1.11321: f32[]) -> f32[] {
  %Arg_0.11320 = f32[] parameter(0)
  %Arg_1.11321 = f32[] parameter(1)
  ROOT %maximum.11322 = f32[] maximum(%Arg_0.11320, %Arg_1.11321)
}

%region_369.11335 (Arg_0.11332: f32[], Arg_1.11333: f32[]) -> f32[] {
  %Arg_0.11332 = f32[] parameter(0)
  %Arg_1.11333 = f32[] parameter(1)
  ROOT %add.11334 = f32[] add(%Arg_0.11332, %Arg_1.11333)
}

%region_371.11382 (Arg_0.11379: bf16[], Arg_1.11380: bf16[]) -> bf16[] {
  %Arg_0.11379 = bf16[] parameter(0)
  %Arg_1.11380 = bf16[] parameter(1)
  ROOT %add.11381 = bf16[] add(%Arg_0.11379, %Arg_1.11380)
}

%region_9.1439.clone (Arg_0.64: s32[], Arg_1.32: s32[]) -> s32[] {
  %Arg_0.64 = s32[] parameter(0)
  %Arg_1.32 = s32[] parameter(1)
  ROOT %add.0 = s32[] add(%Arg_0.64, %Arg_1.32)
}

%region_372.11412 (Arg_0.11409: s32[], Arg_1.11410: s32[]) -> s32[] {
  %Arg_0.11409 = s32[] parameter(0)
  %Arg_1.11410 = s32[] parameter(1)
  ROOT %add.11411 = s32[] add(%Arg_0.11409, %Arg_1.11410)
}

%region_373.11421 (Arg_0.11418: s32[], Arg_1.11419: s32[]) -> s32[] {
  %Arg_0.11418 = s32[] parameter(0)
  %Arg_1.11419 = s32[] parameter(1)
  ROOT %add.11420 = s32[] add(%Arg_0.11418, %Arg_1.11419)
}

%region_376.11540 (Arg_0.11537: pred[], Arg_1.11538: pred[]) -> pred[] {
  %Arg_0.11537 = pred[] parameter(0)
  %Arg_1.11538 = pred[] parameter(1)
  ROOT %and.11539 = pred[] and(%Arg_0.11537, %Arg_1.11538)
}

%region_374.11522 (Arg_0.11519: bf16[], Arg_1.11520: bf16[]) -> bf16[] {
  %Arg_0.11519 = bf16[] parameter(0)
  %Arg_1.11520 = bf16[] parameter(1)
  ROOT %add.11521 = bf16[] add(%Arg_0.11519, %Arg_1.11520)
}

%region_377.11554 (Arg_0.11551: f32[], Arg_1.11552: f32[]) -> f32[] {
  %Arg_0.11551 = f32[] parameter(0)
  %Arg_1.11552 = f32[] parameter(1)
  ROOT %add.11553 = f32[] add(%Arg_0.11551, %Arg_1.11552)
}

%region_379.11574 (Arg_0.11571: bf16[], Arg_1.11572: bf16[]) -> bf16[] {
  %Arg_0.11571 = bf16[] parameter(0)
  %Arg_1.11572 = bf16[] parameter(1)
  ROOT %add.11573 = bf16[] add(%Arg_0.11571, %Arg_1.11572)
}

%region_382.11603 (Arg_0.11600: f32[], Arg_1.11601: f32[]) -> f32[] {
  %Arg_0.11600 = f32[] parameter(0)
  %Arg_1.11601 = f32[] parameter(1)
  ROOT %add.11602 = f32[] add(%Arg_0.11600, %Arg_1.11601)
}

%region_386.11714 (Arg_0.11711: f32[], Arg_1.11712: f32[]) -> f32[] {
  %Arg_0.11711 = f32[] parameter(0)
  %Arg_1.11712 = f32[] parameter(1)
  ROOT %add.11713 = f32[] add(%Arg_0.11711, %Arg_1.11712)
}

%region_388.11757 (Arg_0.11754: f32[], Arg_1.11755: f32[]) -> f32[] {
  %Arg_0.11754 = f32[] parameter(0)
  %Arg_1.11755 = f32[] parameter(1)
  ROOT %add.11756 = f32[] add(%Arg_0.11754, %Arg_1.11755)
}

%region_389.11891 (Arg_0.11888: s32[], Arg_1.11889: s32[]) -> s32[] {
  %Arg_0.11888 = s32[] parameter(0)
  %Arg_1.11889 = s32[] parameter(1)
  ROOT %add.11890 = s32[] add(%Arg_0.11888, %Arg_1.11889)
}

%region_390.11899 (Arg_0.11896: s32[], Arg_1.11897: s32[]) -> s32[] {
  %Arg_0.11896 = s32[] parameter(0)
  %Arg_1.11897 = s32[] parameter(1)
  ROOT %add.11898 = s32[] add(%Arg_0.11896, %Arg_1.11897)
}

%region_391.11904 (Arg_0.11901: s32[], Arg_1.11902: s32[]) -> s32[] {
  %Arg_0.11901 = s32[] parameter(0)
  %Arg_1.11902 = s32[] parameter(1)
  ROOT %maximum.11903 = s32[] maximum(%Arg_0.11901, %Arg_1.11902)
}

%region_6.178._custom_call_lowering_rule.33 (Arg_0.885: s32[], Arg_1.574: s32[]) -> s32[] {
  %Arg_0.885 = s32[] parameter(0)
  ROOT %Arg_1.574 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.33 (Arg_0.890: s32[], Arg_1.579: s32[]) -> s32[] {
  %Arg_0.890 = s32[] parameter(0)
  ROOT %Arg_1.579 = s32[] parameter(1)
}

%region_392.11920 (Arg_0.11917: f32[], Arg_1.11918: f32[]) -> f32[] {
  %Arg_0.11917 = f32[] parameter(0)
  %Arg_1.11918 = f32[] parameter(1)
  ROOT %add.11919 = f32[] add(%Arg_0.11917, %Arg_1.11918)
}

%compare-greater-than.33.clone (p.0.lhs.130: bf16[], p.0.rhs.130: bf16[], p.1.lhs.130: s32[], p.1.rhs.130: s32[]) -> pred[] {
  %p.1.lhs.130 = s32[] parameter(2)
  %p.1.rhs.130 = s32[] parameter(3)
  %p.0.lhs.130 = bf16[] parameter(0)
  %p.0.rhs.130 = bf16[] parameter(1)
  ROOT %compare.548 = pred[] compare(%p.0.lhs.130, %p.0.rhs.130), direction=GT, type=TOTALORDER
}

%compare-value-and-index.33 (p.0.lhs.131: bf16[], p.0.rhs.131: bf16[], p.1.lhs.131: s32[], p.1.rhs.131: s32[]) -> pred[] {
  %p.0.lhs.131 = bf16[] parameter(0)
  %p.0.rhs.131 = bf16[] parameter(1)
  %compare.550 = pred[] compare(%p.0.lhs.131, %p.0.rhs.131), direction=EQ, type=TOTALORDER
  %p.1.lhs.131 = s32[] parameter(2)
  %p.1.rhs.131 = s32[] parameter(3)
  %compare.551 = pred[] compare(%p.1.lhs.131, %p.1.rhs.131), direction=LT
  %compare.549 = pred[] compare(%p.0.lhs.131, %p.0.rhs.131), direction=GT
  ROOT %select.294 = pred[] select(%compare.550, %compare.551, %compare.549)
}

%region_395.11999 (Arg_0.11997: u32[], Arg_1.11998: u32[]) -> u32[] {
  %Arg_0.11997 = u32[] parameter(0)
  ROOT %Arg_1.11998 = u32[] parameter(1)
}

%region_393.11949 (Arg_0.11946: f32[], Arg_1.11947: f32[]) -> f32[] {
  %Arg_0.11946 = f32[] parameter(0)
  %Arg_1.11947 = f32[] parameter(1)
  ROOT %maximum.11948 = f32[] maximum(%Arg_0.11946, %Arg_1.11947)
}

%region_394.11961 (Arg_0.11958: f32[], Arg_1.11959: f32[]) -> f32[] {
  %Arg_0.11958 = f32[] parameter(0)
  %Arg_1.11959 = f32[] parameter(1)
  ROOT %add.11960 = f32[] add(%Arg_0.11958, %Arg_1.11959)
}

%region_396.12008 (Arg_0.12005: bf16[], Arg_1.12006: bf16[]) -> bf16[] {
  %Arg_0.12005 = bf16[] parameter(0)
  %Arg_1.12006 = bf16[] parameter(1)
  ROOT %add.12007 = bf16[] add(%Arg_0.12005, %Arg_1.12006)
}

%region_9.1439.clone.clone (Arg_0.284: s32[], Arg_1.95: s32[]) -> s32[] {
  %Arg_0.284 = s32[] parameter(0)
  %Arg_1.95 = s32[] parameter(1)
  ROOT %add.63 = s32[] add(%Arg_0.284, %Arg_1.95)
}

%region_397.12022 (Arg_0.12019: s32[], Arg_1.12020: s32[]) -> s32[] {
  %Arg_0.12019 = s32[] parameter(0)
  %Arg_1.12020 = s32[] parameter(1)
  ROOT %add.12021 = s32[] add(%Arg_0.12019, %Arg_1.12020)
}

%region_398.12031 (Arg_0.12028: s32[], Arg_1.12029: s32[]) -> s32[] {
  %Arg_0.12028 = s32[] parameter(0)
  %Arg_1.12029 = s32[] parameter(1)
  ROOT %add.12030 = s32[] add(%Arg_0.12028, %Arg_1.12029)
}

%region_401.12116 (Arg_0.12113: pred[], Arg_1.12114: pred[]) -> pred[] {
  %Arg_0.12113 = pred[] parameter(0)
  %Arg_1.12114 = pred[] parameter(1)
  ROOT %and.12115 = pred[] and(%Arg_0.12113, %Arg_1.12114)
}

%region_399.12098 (Arg_0.12095: bf16[], Arg_1.12096: bf16[]) -> bf16[] {
  %Arg_0.12095 = bf16[] parameter(0)
  %Arg_1.12096 = bf16[] parameter(1)
  ROOT %add.12097 = bf16[] add(%Arg_0.12095, %Arg_1.12096)
}

%region_402.12130 (Arg_0.12127: f32[], Arg_1.12128: f32[]) -> f32[] {
  %Arg_0.12127 = f32[] parameter(0)
  %Arg_1.12128 = f32[] parameter(1)
  ROOT %add.12129 = f32[] add(%Arg_0.12127, %Arg_1.12128)
}

%region_404.12150 (Arg_0.12147: bf16[], Arg_1.12148: bf16[]) -> bf16[] {
  %Arg_0.12147 = bf16[] parameter(0)
  %Arg_1.12148 = bf16[] parameter(1)
  ROOT %add.12149 = bf16[] add(%Arg_0.12147, %Arg_1.12148)
}

%region_407.12179 (Arg_0.12176: f32[], Arg_1.12177: f32[]) -> f32[] {
  %Arg_0.12176 = f32[] parameter(0)
  %Arg_1.12177 = f32[] parameter(1)
  ROOT %add.12178 = f32[] add(%Arg_0.12176, %Arg_1.12177)
}

%region_411.12290 (Arg_0.12287: f32[], Arg_1.12288: f32[]) -> f32[] {
  %Arg_0.12287 = f32[] parameter(0)
  %Arg_1.12288 = f32[] parameter(1)
  ROOT %add.12289 = f32[] add(%Arg_0.12287, %Arg_1.12288)
}

%region_413.12333 (Arg_0.12330: f32[], Arg_1.12331: f32[]) -> f32[] {
  %Arg_0.12330 = f32[] parameter(0)
  %Arg_1.12331 = f32[] parameter(1)
  ROOT %add.12332 = f32[] add(%Arg_0.12330, %Arg_1.12331)
}

%region_414.12467 (Arg_0.12464: s32[], Arg_1.12465: s32[]) -> s32[] {
  %Arg_0.12464 = s32[] parameter(0)
  %Arg_1.12465 = s32[] parameter(1)
  ROOT %add.12466 = s32[] add(%Arg_0.12464, %Arg_1.12465)
}

%region_415.12475 (Arg_0.12472: s32[], Arg_1.12473: s32[]) -> s32[] {
  %Arg_0.12472 = s32[] parameter(0)
  %Arg_1.12473 = s32[] parameter(1)
  ROOT %add.12474 = s32[] add(%Arg_0.12472, %Arg_1.12473)
}

%region_416.12480 (Arg_0.12477: s32[], Arg_1.12478: s32[]) -> s32[] {
  %Arg_0.12477 = s32[] parameter(0)
  %Arg_1.12478 = s32[] parameter(1)
  ROOT %maximum.12479 = s32[] maximum(%Arg_0.12477, %Arg_1.12478)
}

%region_6.178._custom_call_lowering_rule.34 (Arg_0.909: s32[], Arg_1.598: s32[]) -> s32[] {
  %Arg_0.909 = s32[] parameter(0)
  ROOT %Arg_1.598 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.34 (Arg_0.914: s32[], Arg_1.603: s32[]) -> s32[] {
  %Arg_0.914 = s32[] parameter(0)
  ROOT %Arg_1.603 = s32[] parameter(1)
}

%region_417.12496 (Arg_0.12493: f32[], Arg_1.12494: f32[]) -> f32[] {
  %Arg_0.12493 = f32[] parameter(0)
  %Arg_1.12494 = f32[] parameter(1)
  ROOT %add.12495 = f32[] add(%Arg_0.12493, %Arg_1.12494)
}

%compare-greater-than.34.clone (p.0.lhs.132: bf16[], p.0.rhs.132: bf16[], p.1.lhs.132: s32[], p.1.rhs.132: s32[]) -> pred[] {
  %p.1.lhs.132 = s32[] parameter(2)
  %p.1.rhs.132 = s32[] parameter(3)
  %p.0.lhs.132 = bf16[] parameter(0)
  %p.0.rhs.132 = bf16[] parameter(1)
  ROOT %compare.554 = pred[] compare(%p.0.lhs.132, %p.0.rhs.132), direction=GT, type=TOTALORDER
}

%compare-value-and-index.34 (p.0.lhs.133: bf16[], p.0.rhs.133: bf16[], p.1.lhs.133: s32[], p.1.rhs.133: s32[]) -> pred[] {
  %p.0.lhs.133 = bf16[] parameter(0)
  %p.0.rhs.133 = bf16[] parameter(1)
  %compare.556 = pred[] compare(%p.0.lhs.133, %p.0.rhs.133), direction=EQ, type=TOTALORDER
  %p.1.lhs.133 = s32[] parameter(2)
  %p.1.rhs.133 = s32[] parameter(3)
  %compare.557 = pred[] compare(%p.1.lhs.133, %p.1.rhs.133), direction=LT
  %compare.555 = pred[] compare(%p.0.lhs.133, %p.0.rhs.133), direction=GT
  ROOT %select.295 = pred[] select(%compare.556, %compare.557, %compare.555)
}

%region_420.12575 (Arg_0.12573: u32[], Arg_1.12574: u32[]) -> u32[] {
  %Arg_0.12573 = u32[] parameter(0)
  ROOT %Arg_1.12574 = u32[] parameter(1)
}

%region_418.12525 (Arg_0.12522: f32[], Arg_1.12523: f32[]) -> f32[] {
  %Arg_0.12522 = f32[] parameter(0)
  %Arg_1.12523 = f32[] parameter(1)
  ROOT %maximum.12524 = f32[] maximum(%Arg_0.12522, %Arg_1.12523)
}

%region_419.12537 (Arg_0.12534: f32[], Arg_1.12535: f32[]) -> f32[] {
  %Arg_0.12534 = f32[] parameter(0)
  %Arg_1.12535 = f32[] parameter(1)
  ROOT %add.12536 = f32[] add(%Arg_0.12534, %Arg_1.12535)
}

%region_421.12584 (Arg_0.12581: bf16[], Arg_1.12582: bf16[]) -> bf16[] {
  %Arg_0.12581 = bf16[] parameter(0)
  %Arg_1.12582 = bf16[] parameter(1)
  ROOT %add.12583 = bf16[] add(%Arg_0.12581, %Arg_1.12582)
}

%region_9.1439.clone.clone.1 (Arg_0.287: s32[], Arg_1.96: s32[]) -> s32[] {
  %Arg_0.287 = s32[] parameter(0)
  %Arg_1.96 = s32[] parameter(1)
  ROOT %add.64 = s32[] add(%Arg_0.287, %Arg_1.96)
}

%region_422.12598 (Arg_0.12595: s32[], Arg_1.12596: s32[]) -> s32[] {
  %Arg_0.12595 = s32[] parameter(0)
  %Arg_1.12596 = s32[] parameter(1)
  ROOT %add.12597 = s32[] add(%Arg_0.12595, %Arg_1.12596)
}

%region_423.12607 (Arg_0.12604: s32[], Arg_1.12605: s32[]) -> s32[] {
  %Arg_0.12604 = s32[] parameter(0)
  %Arg_1.12605 = s32[] parameter(1)
  ROOT %add.12606 = s32[] add(%Arg_0.12604, %Arg_1.12605)
}

%region_426.12692 (Arg_0.12689: pred[], Arg_1.12690: pred[]) -> pred[] {
  %Arg_0.12689 = pred[] parameter(0)
  %Arg_1.12690 = pred[] parameter(1)
  ROOT %and.12691 = pred[] and(%Arg_0.12689, %Arg_1.12690)
}

%region_424.12674 (Arg_0.12671: bf16[], Arg_1.12672: bf16[]) -> bf16[] {
  %Arg_0.12671 = bf16[] parameter(0)
  %Arg_1.12672 = bf16[] parameter(1)
  ROOT %add.12673 = bf16[] add(%Arg_0.12671, %Arg_1.12672)
}

%region_427.12706 (Arg_0.12703: f32[], Arg_1.12704: f32[]) -> f32[] {
  %Arg_0.12703 = f32[] parameter(0)
  %Arg_1.12704 = f32[] parameter(1)
  ROOT %add.12705 = f32[] add(%Arg_0.12703, %Arg_1.12704)
}

%region_429.12726 (Arg_0.12723: bf16[], Arg_1.12724: bf16[]) -> bf16[] {
  %Arg_0.12723 = bf16[] parameter(0)
  %Arg_1.12724 = bf16[] parameter(1)
  ROOT %add.12725 = bf16[] add(%Arg_0.12723, %Arg_1.12724)
}

%region_432.12755 (Arg_0.12752: f32[], Arg_1.12753: f32[]) -> f32[] {
  %Arg_0.12752 = f32[] parameter(0)
  %Arg_1.12753 = f32[] parameter(1)
  ROOT %add.12754 = f32[] add(%Arg_0.12752, %Arg_1.12753)
}

%region_436.12866 (Arg_0.12863: f32[], Arg_1.12864: f32[]) -> f32[] {
  %Arg_0.12863 = f32[] parameter(0)
  %Arg_1.12864 = f32[] parameter(1)
  ROOT %add.12865 = f32[] add(%Arg_0.12863, %Arg_1.12864)
}

%region_438.12909 (Arg_0.12906: f32[], Arg_1.12907: f32[]) -> f32[] {
  %Arg_0.12906 = f32[] parameter(0)
  %Arg_1.12907 = f32[] parameter(1)
  ROOT %add.12908 = f32[] add(%Arg_0.12906, %Arg_1.12907)
}

%region_439.13043 (Arg_0.13040: s32[], Arg_1.13041: s32[]) -> s32[] {
  %Arg_0.13040 = s32[] parameter(0)
  %Arg_1.13041 = s32[] parameter(1)
  ROOT %add.13042 = s32[] add(%Arg_0.13040, %Arg_1.13041)
}

%region_440.13051 (Arg_0.13048: s32[], Arg_1.13049: s32[]) -> s32[] {
  %Arg_0.13048 = s32[] parameter(0)
  %Arg_1.13049 = s32[] parameter(1)
  ROOT %add.13050 = s32[] add(%Arg_0.13048, %Arg_1.13049)
}

%region_441.13056 (Arg_0.13053: s32[], Arg_1.13054: s32[]) -> s32[] {
  %Arg_0.13053 = s32[] parameter(0)
  %Arg_1.13054 = s32[] parameter(1)
  ROOT %maximum.13055 = s32[] maximum(%Arg_0.13053, %Arg_1.13054)
}

%region_6.178._custom_call_lowering_rule.35 (Arg_0.933: s32[], Arg_1.622: s32[]) -> s32[] {
  %Arg_0.933 = s32[] parameter(0)
  ROOT %Arg_1.622 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.35 (Arg_0.938: s32[], Arg_1.627: s32[]) -> s32[] {
  %Arg_0.938 = s32[] parameter(0)
  ROOT %Arg_1.627 = s32[] parameter(1)
}

%region_442.13072 (Arg_0.13069: f32[], Arg_1.13070: f32[]) -> f32[] {
  %Arg_0.13069 = f32[] parameter(0)
  %Arg_1.13070 = f32[] parameter(1)
  ROOT %add.13071 = f32[] add(%Arg_0.13069, %Arg_1.13070)
}

%compare-greater-than.35.clone (p.0.lhs.134: bf16[], p.0.rhs.134: bf16[], p.1.lhs.134: s32[], p.1.rhs.134: s32[]) -> pred[] {
  %p.1.lhs.134 = s32[] parameter(2)
  %p.1.rhs.134 = s32[] parameter(3)
  %p.0.lhs.134 = bf16[] parameter(0)
  %p.0.rhs.134 = bf16[] parameter(1)
  ROOT %compare.560 = pred[] compare(%p.0.lhs.134, %p.0.rhs.134), direction=GT, type=TOTALORDER
}

%compare-value-and-index.35 (p.0.lhs.135: bf16[], p.0.rhs.135: bf16[], p.1.lhs.135: s32[], p.1.rhs.135: s32[]) -> pred[] {
  %p.0.lhs.135 = bf16[] parameter(0)
  %p.0.rhs.135 = bf16[] parameter(1)
  %compare.562 = pred[] compare(%p.0.lhs.135, %p.0.rhs.135), direction=EQ, type=TOTALORDER
  %p.1.lhs.135 = s32[] parameter(2)
  %p.1.rhs.135 = s32[] parameter(3)
  %compare.563 = pred[] compare(%p.1.lhs.135, %p.1.rhs.135), direction=LT
  %compare.561 = pred[] compare(%p.0.lhs.135, %p.0.rhs.135), direction=GT
  ROOT %select.296 = pred[] select(%compare.562, %compare.563, %compare.561)
}

%region_445.13151 (Arg_0.13149: u32[], Arg_1.13150: u32[]) -> u32[] {
  %Arg_0.13149 = u32[] parameter(0)
  ROOT %Arg_1.13150 = u32[] parameter(1)
}

%region_443.13101 (Arg_0.13098: f32[], Arg_1.13099: f32[]) -> f32[] {
  %Arg_0.13098 = f32[] parameter(0)
  %Arg_1.13099 = f32[] parameter(1)
  ROOT %maximum.13100 = f32[] maximum(%Arg_0.13098, %Arg_1.13099)
}

%region_444.13113 (Arg_0.13110: f32[], Arg_1.13111: f32[]) -> f32[] {
  %Arg_0.13110 = f32[] parameter(0)
  %Arg_1.13111 = f32[] parameter(1)
  ROOT %add.13112 = f32[] add(%Arg_0.13110, %Arg_1.13111)
}

%region_446.13160 (Arg_0.13157: bf16[], Arg_1.13158: bf16[]) -> bf16[] {
  %Arg_0.13157 = bf16[] parameter(0)
  %Arg_1.13158 = bf16[] parameter(1)
  ROOT %add.13159 = bf16[] add(%Arg_0.13157, %Arg_1.13158)
}

%region_9.1439.clone.clone.2 (Arg_0.290: s32[], Arg_1.97: s32[]) -> s32[] {
  %Arg_0.290 = s32[] parameter(0)
  %Arg_1.97 = s32[] parameter(1)
  ROOT %add.65 = s32[] add(%Arg_0.290, %Arg_1.97)
}

%region_447.13174 (Arg_0.13171: s32[], Arg_1.13172: s32[]) -> s32[] {
  %Arg_0.13171 = s32[] parameter(0)
  %Arg_1.13172 = s32[] parameter(1)
  ROOT %add.13173 = s32[] add(%Arg_0.13171, %Arg_1.13172)
}

%region_448.13183 (Arg_0.13180: s32[], Arg_1.13181: s32[]) -> s32[] {
  %Arg_0.13180 = s32[] parameter(0)
  %Arg_1.13181 = s32[] parameter(1)
  ROOT %add.13182 = s32[] add(%Arg_0.13180, %Arg_1.13181)
}

%region_451.13268 (Arg_0.13265: pred[], Arg_1.13266: pred[]) -> pred[] {
  %Arg_0.13265 = pred[] parameter(0)
  %Arg_1.13266 = pred[] parameter(1)
  ROOT %and.13267 = pred[] and(%Arg_0.13265, %Arg_1.13266)
}

%region_449.13250 (Arg_0.13247: bf16[], Arg_1.13248: bf16[]) -> bf16[] {
  %Arg_0.13247 = bf16[] parameter(0)
  %Arg_1.13248 = bf16[] parameter(1)
  ROOT %add.13249 = bf16[] add(%Arg_0.13247, %Arg_1.13248)
}

%region_452.13282 (Arg_0.13279: f32[], Arg_1.13280: f32[]) -> f32[] {
  %Arg_0.13279 = f32[] parameter(0)
  %Arg_1.13280 = f32[] parameter(1)
  ROOT %add.13281 = f32[] add(%Arg_0.13279, %Arg_1.13280)
}

%region_454.13302 (Arg_0.13299: bf16[], Arg_1.13300: bf16[]) -> bf16[] {
  %Arg_0.13299 = bf16[] parameter(0)
  %Arg_1.13300 = bf16[] parameter(1)
  ROOT %add.13301 = bf16[] add(%Arg_0.13299, %Arg_1.13300)
}

%region_457.13331 (Arg_0.13328: f32[], Arg_1.13329: f32[]) -> f32[] {
  %Arg_0.13328 = f32[] parameter(0)
  %Arg_1.13329 = f32[] parameter(1)
  ROOT %add.13330 = f32[] add(%Arg_0.13328, %Arg_1.13329)
}

%region_461.13442 (Arg_0.13439: f32[], Arg_1.13440: f32[]) -> f32[] {
  %Arg_0.13439 = f32[] parameter(0)
  %Arg_1.13440 = f32[] parameter(1)
  ROOT %add.13441 = f32[] add(%Arg_0.13439, %Arg_1.13440)
}

%region_463.13485 (Arg_0.13482: f32[], Arg_1.13483: f32[]) -> f32[] {
  %Arg_0.13482 = f32[] parameter(0)
  %Arg_1.13483 = f32[] parameter(1)
  ROOT %add.13484 = f32[] add(%Arg_0.13482, %Arg_1.13483)
}

%region_464.13619 (Arg_0.13616: s32[], Arg_1.13617: s32[]) -> s32[] {
  %Arg_0.13616 = s32[] parameter(0)
  %Arg_1.13617 = s32[] parameter(1)
  ROOT %add.13618 = s32[] add(%Arg_0.13616, %Arg_1.13617)
}

%region_465.13627 (Arg_0.13624: s32[], Arg_1.13625: s32[]) -> s32[] {
  %Arg_0.13624 = s32[] parameter(0)
  %Arg_1.13625 = s32[] parameter(1)
  ROOT %add.13626 = s32[] add(%Arg_0.13624, %Arg_1.13625)
}

%region_466.13632 (Arg_0.13629: s32[], Arg_1.13630: s32[]) -> s32[] {
  %Arg_0.13629 = s32[] parameter(0)
  %Arg_1.13630 = s32[] parameter(1)
  ROOT %maximum.13631 = s32[] maximum(%Arg_0.13629, %Arg_1.13630)
}

%region_6.178._custom_call_lowering_rule.36 (Arg_0.957: s32[], Arg_1.646: s32[]) -> s32[] {
  %Arg_0.957 = s32[] parameter(0)
  ROOT %Arg_1.646 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.36 (Arg_0.962: s32[], Arg_1.651: s32[]) -> s32[] {
  %Arg_0.962 = s32[] parameter(0)
  ROOT %Arg_1.651 = s32[] parameter(1)
}

%region_467.13648 (Arg_0.13645: f32[], Arg_1.13646: f32[]) -> f32[] {
  %Arg_0.13645 = f32[] parameter(0)
  %Arg_1.13646 = f32[] parameter(1)
  ROOT %add.13647 = f32[] add(%Arg_0.13645, %Arg_1.13646)
}

%compare-greater-than.36.clone (p.0.lhs.136: bf16[], p.0.rhs.136: bf16[], p.1.lhs.136: s32[], p.1.rhs.136: s32[]) -> pred[] {
  %p.1.lhs.136 = s32[] parameter(2)
  %p.1.rhs.136 = s32[] parameter(3)
  %p.0.lhs.136 = bf16[] parameter(0)
  %p.0.rhs.136 = bf16[] parameter(1)
  ROOT %compare.566 = pred[] compare(%p.0.lhs.136, %p.0.rhs.136), direction=GT, type=TOTALORDER
}

%compare-value-and-index.36 (p.0.lhs.137: bf16[], p.0.rhs.137: bf16[], p.1.lhs.137: s32[], p.1.rhs.137: s32[]) -> pred[] {
  %p.0.lhs.137 = bf16[] parameter(0)
  %p.0.rhs.137 = bf16[] parameter(1)
  %compare.568 = pred[] compare(%p.0.lhs.137, %p.0.rhs.137), direction=EQ, type=TOTALORDER
  %p.1.lhs.137 = s32[] parameter(2)
  %p.1.rhs.137 = s32[] parameter(3)
  %compare.569 = pred[] compare(%p.1.lhs.137, %p.1.rhs.137), direction=LT
  %compare.567 = pred[] compare(%p.0.lhs.137, %p.0.rhs.137), direction=GT
  ROOT %select.297 = pred[] select(%compare.568, %compare.569, %compare.567)
}

%region_470.13727 (Arg_0.13725: u32[], Arg_1.13726: u32[]) -> u32[] {
  %Arg_0.13725 = u32[] parameter(0)
  ROOT %Arg_1.13726 = u32[] parameter(1)
}

%region_468.13677 (Arg_0.13674: f32[], Arg_1.13675: f32[]) -> f32[] {
  %Arg_0.13674 = f32[] parameter(0)
  %Arg_1.13675 = f32[] parameter(1)
  ROOT %maximum.13676 = f32[] maximum(%Arg_0.13674, %Arg_1.13675)
}

%region_469.13689 (Arg_0.13686: f32[], Arg_1.13687: f32[]) -> f32[] {
  %Arg_0.13686 = f32[] parameter(0)
  %Arg_1.13687 = f32[] parameter(1)
  ROOT %add.13688 = f32[] add(%Arg_0.13686, %Arg_1.13687)
}

%region_471.13736 (Arg_0.13733: bf16[], Arg_1.13734: bf16[]) -> bf16[] {
  %Arg_0.13733 = bf16[] parameter(0)
  %Arg_1.13734 = bf16[] parameter(1)
  ROOT %add.13735 = bf16[] add(%Arg_0.13733, %Arg_1.13734)
}

%region_9.1439.clone.clone.3 (Arg_0.293: s32[], Arg_1.98: s32[]) -> s32[] {
  %Arg_0.293 = s32[] parameter(0)
  %Arg_1.98 = s32[] parameter(1)
  ROOT %add.66 = s32[] add(%Arg_0.293, %Arg_1.98)
}

%region_472.13750 (Arg_0.13747: s32[], Arg_1.13748: s32[]) -> s32[] {
  %Arg_0.13747 = s32[] parameter(0)
  %Arg_1.13748 = s32[] parameter(1)
  ROOT %add.13749 = s32[] add(%Arg_0.13747, %Arg_1.13748)
}

%region_473.13759 (Arg_0.13756: s32[], Arg_1.13757: s32[]) -> s32[] {
  %Arg_0.13756 = s32[] parameter(0)
  %Arg_1.13757 = s32[] parameter(1)
  ROOT %add.13758 = s32[] add(%Arg_0.13756, %Arg_1.13757)
}

%region_476.13844 (Arg_0.13841: pred[], Arg_1.13842: pred[]) -> pred[] {
  %Arg_0.13841 = pred[] parameter(0)
  %Arg_1.13842 = pred[] parameter(1)
  ROOT %and.13843 = pred[] and(%Arg_0.13841, %Arg_1.13842)
}

%region_474.13826 (Arg_0.13823: bf16[], Arg_1.13824: bf16[]) -> bf16[] {
  %Arg_0.13823 = bf16[] parameter(0)
  %Arg_1.13824 = bf16[] parameter(1)
  ROOT %add.13825 = bf16[] add(%Arg_0.13823, %Arg_1.13824)
}

%region_477.13858 (Arg_0.13855: f32[], Arg_1.13856: f32[]) -> f32[] {
  %Arg_0.13855 = f32[] parameter(0)
  %Arg_1.13856 = f32[] parameter(1)
  ROOT %add.13857 = f32[] add(%Arg_0.13855, %Arg_1.13856)
}

%region_479.13878 (Arg_0.13875: bf16[], Arg_1.13876: bf16[]) -> bf16[] {
  %Arg_0.13875 = bf16[] parameter(0)
  %Arg_1.13876 = bf16[] parameter(1)
  ROOT %add.13877 = bf16[] add(%Arg_0.13875, %Arg_1.13876)
}

%region_482.13907 (Arg_0.13904: f32[], Arg_1.13905: f32[]) -> f32[] {
  %Arg_0.13904 = f32[] parameter(0)
  %Arg_1.13905 = f32[] parameter(1)
  ROOT %add.13906 = f32[] add(%Arg_0.13904, %Arg_1.13905)
}

%region_486.14018 (Arg_0.14015: f32[], Arg_1.14016: f32[]) -> f32[] {
  %Arg_0.14015 = f32[] parameter(0)
  %Arg_1.14016 = f32[] parameter(1)
  ROOT %add.14017 = f32[] add(%Arg_0.14015, %Arg_1.14016)
}

%region_488.14061 (Arg_0.14058: f32[], Arg_1.14059: f32[]) -> f32[] {
  %Arg_0.14058 = f32[] parameter(0)
  %Arg_1.14059 = f32[] parameter(1)
  ROOT %add.14060 = f32[] add(%Arg_0.14058, %Arg_1.14059)
}

%region_489.14195 (Arg_0.14192: s32[], Arg_1.14193: s32[]) -> s32[] {
  %Arg_0.14192 = s32[] parameter(0)
  %Arg_1.14193 = s32[] parameter(1)
  ROOT %add.14194 = s32[] add(%Arg_0.14192, %Arg_1.14193)
}

%region_490.14203 (Arg_0.14200: s32[], Arg_1.14201: s32[]) -> s32[] {
  %Arg_0.14200 = s32[] parameter(0)
  %Arg_1.14201 = s32[] parameter(1)
  ROOT %add.14202 = s32[] add(%Arg_0.14200, %Arg_1.14201)
}

%region_491.14208 (Arg_0.14205: s32[], Arg_1.14206: s32[]) -> s32[] {
  %Arg_0.14205 = s32[] parameter(0)
  %Arg_1.14206 = s32[] parameter(1)
  ROOT %maximum.14207 = s32[] maximum(%Arg_0.14205, %Arg_1.14206)
}

%region_6.178._custom_call_lowering_rule.37 (Arg_0.981: s32[], Arg_1.670: s32[]) -> s32[] {
  %Arg_0.981 = s32[] parameter(0)
  ROOT %Arg_1.670 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.37 (Arg_0.986: s32[], Arg_1.675: s32[]) -> s32[] {
  %Arg_0.986 = s32[] parameter(0)
  ROOT %Arg_1.675 = s32[] parameter(1)
}

%region_492.14224 (Arg_0.14221: f32[], Arg_1.14222: f32[]) -> f32[] {
  %Arg_0.14221 = f32[] parameter(0)
  %Arg_1.14222 = f32[] parameter(1)
  ROOT %add.14223 = f32[] add(%Arg_0.14221, %Arg_1.14222)
}

%compare-greater-than.37.clone (p.0.lhs.138: bf16[], p.0.rhs.138: bf16[], p.1.lhs.138: s32[], p.1.rhs.138: s32[]) -> pred[] {
  %p.1.lhs.138 = s32[] parameter(2)
  %p.1.rhs.138 = s32[] parameter(3)
  %p.0.lhs.138 = bf16[] parameter(0)
  %p.0.rhs.138 = bf16[] parameter(1)
  ROOT %compare.572 = pred[] compare(%p.0.lhs.138, %p.0.rhs.138), direction=GT, type=TOTALORDER
}

%compare-value-and-index.37 (p.0.lhs.139: bf16[], p.0.rhs.139: bf16[], p.1.lhs.139: s32[], p.1.rhs.139: s32[]) -> pred[] {
  %p.0.lhs.139 = bf16[] parameter(0)
  %p.0.rhs.139 = bf16[] parameter(1)
  %compare.574 = pred[] compare(%p.0.lhs.139, %p.0.rhs.139), direction=EQ, type=TOTALORDER
  %p.1.lhs.139 = s32[] parameter(2)
  %p.1.rhs.139 = s32[] parameter(3)
  %compare.575 = pred[] compare(%p.1.lhs.139, %p.1.rhs.139), direction=LT
  %compare.573 = pred[] compare(%p.0.lhs.139, %p.0.rhs.139), direction=GT
  ROOT %select.298 = pred[] select(%compare.574, %compare.575, %compare.573)
}

%region_495.14303 (Arg_0.14301: u32[], Arg_1.14302: u32[]) -> u32[] {
  %Arg_0.14301 = u32[] parameter(0)
  ROOT %Arg_1.14302 = u32[] parameter(1)
}

%region_493.14253 (Arg_0.14250: f32[], Arg_1.14251: f32[]) -> f32[] {
  %Arg_0.14250 = f32[] parameter(0)
  %Arg_1.14251 = f32[] parameter(1)
  ROOT %maximum.14252 = f32[] maximum(%Arg_0.14250, %Arg_1.14251)
}

%region_494.14265 (Arg_0.14262: f32[], Arg_1.14263: f32[]) -> f32[] {
  %Arg_0.14262 = f32[] parameter(0)
  %Arg_1.14263 = f32[] parameter(1)
  ROOT %add.14264 = f32[] add(%Arg_0.14262, %Arg_1.14263)
}

%region_496.14312 (Arg_0.14309: bf16[], Arg_1.14310: bf16[]) -> bf16[] {
  %Arg_0.14309 = bf16[] parameter(0)
  %Arg_1.14310 = bf16[] parameter(1)
  ROOT %add.14311 = bf16[] add(%Arg_0.14309, %Arg_1.14310)
}

%region_9.1439.clone.clone.4 (Arg_0.296: s32[], Arg_1.99: s32[]) -> s32[] {
  %Arg_0.296 = s32[] parameter(0)
  %Arg_1.99 = s32[] parameter(1)
  ROOT %add.67 = s32[] add(%Arg_0.296, %Arg_1.99)
}

%region_497.14326 (Arg_0.14323: s32[], Arg_1.14324: s32[]) -> s32[] {
  %Arg_0.14323 = s32[] parameter(0)
  %Arg_1.14324 = s32[] parameter(1)
  ROOT %add.14325 = s32[] add(%Arg_0.14323, %Arg_1.14324)
}

%region_498.14335 (Arg_0.14332: s32[], Arg_1.14333: s32[]) -> s32[] {
  %Arg_0.14332 = s32[] parameter(0)
  %Arg_1.14333 = s32[] parameter(1)
  ROOT %add.14334 = s32[] add(%Arg_0.14332, %Arg_1.14333)
}

%region_501.14420 (Arg_0.14417: pred[], Arg_1.14418: pred[]) -> pred[] {
  %Arg_0.14417 = pred[] parameter(0)
  %Arg_1.14418 = pred[] parameter(1)
  ROOT %and.14419 = pred[] and(%Arg_0.14417, %Arg_1.14418)
}

%region_499.14402 (Arg_0.14399: bf16[], Arg_1.14400: bf16[]) -> bf16[] {
  %Arg_0.14399 = bf16[] parameter(0)
  %Arg_1.14400 = bf16[] parameter(1)
  ROOT %add.14401 = bf16[] add(%Arg_0.14399, %Arg_1.14400)
}

%region_502.14434 (Arg_0.14431: f32[], Arg_1.14432: f32[]) -> f32[] {
  %Arg_0.14431 = f32[] parameter(0)
  %Arg_1.14432 = f32[] parameter(1)
  ROOT %add.14433 = f32[] add(%Arg_0.14431, %Arg_1.14432)
}

%region_504.14454 (Arg_0.14451: bf16[], Arg_1.14452: bf16[]) -> bf16[] {
  %Arg_0.14451 = bf16[] parameter(0)
  %Arg_1.14452 = bf16[] parameter(1)
  ROOT %add.14453 = bf16[] add(%Arg_0.14451, %Arg_1.14452)
}

%region_507.14483 (Arg_0.14480: f32[], Arg_1.14481: f32[]) -> f32[] {
  %Arg_0.14480 = f32[] parameter(0)
  %Arg_1.14481 = f32[] parameter(1)
  ROOT %add.14482 = f32[] add(%Arg_0.14480, %Arg_1.14481)
}

%region_511.14594 (Arg_0.14591: f32[], Arg_1.14592: f32[]) -> f32[] {
  %Arg_0.14591 = f32[] parameter(0)
  %Arg_1.14592 = f32[] parameter(1)
  ROOT %add.14593 = f32[] add(%Arg_0.14591, %Arg_1.14592)
}

%region_513.14637 (Arg_0.14634: f32[], Arg_1.14635: f32[]) -> f32[] {
  %Arg_0.14634 = f32[] parameter(0)
  %Arg_1.14635 = f32[] parameter(1)
  ROOT %add.14636 = f32[] add(%Arg_0.14634, %Arg_1.14635)
}

%region_514.14771 (Arg_0.14768: s32[], Arg_1.14769: s32[]) -> s32[] {
  %Arg_0.14768 = s32[] parameter(0)
  %Arg_1.14769 = s32[] parameter(1)
  ROOT %add.14770 = s32[] add(%Arg_0.14768, %Arg_1.14769)
}

%region_515.14779 (Arg_0.14776: s32[], Arg_1.14777: s32[]) -> s32[] {
  %Arg_0.14776 = s32[] parameter(0)
  %Arg_1.14777 = s32[] parameter(1)
  ROOT %add.14778 = s32[] add(%Arg_0.14776, %Arg_1.14777)
}

%region_516.14784 (Arg_0.14781: s32[], Arg_1.14782: s32[]) -> s32[] {
  %Arg_0.14781 = s32[] parameter(0)
  %Arg_1.14782 = s32[] parameter(1)
  ROOT %maximum.14783 = s32[] maximum(%Arg_0.14781, %Arg_1.14782)
}

%region_6.178._custom_call_lowering_rule.38 (Arg_0.1005: s32[], Arg_1.694: s32[]) -> s32[] {
  %Arg_0.1005 = s32[] parameter(0)
  ROOT %Arg_1.694 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.38 (Arg_0.1010: s32[], Arg_1.699: s32[]) -> s32[] {
  %Arg_0.1010 = s32[] parameter(0)
  ROOT %Arg_1.699 = s32[] parameter(1)
}

%region_517.14800 (Arg_0.14797: f32[], Arg_1.14798: f32[]) -> f32[] {
  %Arg_0.14797 = f32[] parameter(0)
  %Arg_1.14798 = f32[] parameter(1)
  ROOT %add.14799 = f32[] add(%Arg_0.14797, %Arg_1.14798)
}

%compare-greater-than.38.clone (p.0.lhs.140: bf16[], p.0.rhs.140: bf16[], p.1.lhs.140: s32[], p.1.rhs.140: s32[]) -> pred[] {
  %p.1.lhs.140 = s32[] parameter(2)
  %p.1.rhs.140 = s32[] parameter(3)
  %p.0.lhs.140 = bf16[] parameter(0)
  %p.0.rhs.140 = bf16[] parameter(1)
  ROOT %compare.578 = pred[] compare(%p.0.lhs.140, %p.0.rhs.140), direction=GT, type=TOTALORDER
}

%compare-value-and-index.38 (p.0.lhs.141: bf16[], p.0.rhs.141: bf16[], p.1.lhs.141: s32[], p.1.rhs.141: s32[]) -> pred[] {
  %p.0.lhs.141 = bf16[] parameter(0)
  %p.0.rhs.141 = bf16[] parameter(1)
  %compare.580 = pred[] compare(%p.0.lhs.141, %p.0.rhs.141), direction=EQ, type=TOTALORDER
  %p.1.lhs.141 = s32[] parameter(2)
  %p.1.rhs.141 = s32[] parameter(3)
  %compare.581 = pred[] compare(%p.1.lhs.141, %p.1.rhs.141), direction=LT
  %compare.579 = pred[] compare(%p.0.lhs.141, %p.0.rhs.141), direction=GT
  ROOT %select.299 = pred[] select(%compare.580, %compare.581, %compare.579)
}

%region_520.14879 (Arg_0.14877: u32[], Arg_1.14878: u32[]) -> u32[] {
  %Arg_0.14877 = u32[] parameter(0)
  ROOT %Arg_1.14878 = u32[] parameter(1)
}

%region_518.14829 (Arg_0.14826: f32[], Arg_1.14827: f32[]) -> f32[] {
  %Arg_0.14826 = f32[] parameter(0)
  %Arg_1.14827 = f32[] parameter(1)
  ROOT %maximum.14828 = f32[] maximum(%Arg_0.14826, %Arg_1.14827)
}

%region_519.14841 (Arg_0.14838: f32[], Arg_1.14839: f32[]) -> f32[] {
  %Arg_0.14838 = f32[] parameter(0)
  %Arg_1.14839 = f32[] parameter(1)
  ROOT %add.14840 = f32[] add(%Arg_0.14838, %Arg_1.14839)
}

%region_521.14888 (Arg_0.14885: bf16[], Arg_1.14886: bf16[]) -> bf16[] {
  %Arg_0.14885 = bf16[] parameter(0)
  %Arg_1.14886 = bf16[] parameter(1)
  ROOT %add.14887 = bf16[] add(%Arg_0.14885, %Arg_1.14886)
}

%region_9.1439.clone.clone.5 (Arg_0.299: s32[], Arg_1.100: s32[]) -> s32[] {
  %Arg_0.299 = s32[] parameter(0)
  %Arg_1.100 = s32[] parameter(1)
  ROOT %add.68 = s32[] add(%Arg_0.299, %Arg_1.100)
}

%region_522.14902 (Arg_0.14899: s32[], Arg_1.14900: s32[]) -> s32[] {
  %Arg_0.14899 = s32[] parameter(0)
  %Arg_1.14900 = s32[] parameter(1)
  ROOT %add.14901 = s32[] add(%Arg_0.14899, %Arg_1.14900)
}

%region_523.14911 (Arg_0.14908: s32[], Arg_1.14909: s32[]) -> s32[] {
  %Arg_0.14908 = s32[] parameter(0)
  %Arg_1.14909 = s32[] parameter(1)
  ROOT %add.14910 = s32[] add(%Arg_0.14908, %Arg_1.14909)
}

%region_526.14996 (Arg_0.14993: pred[], Arg_1.14994: pred[]) -> pred[] {
  %Arg_0.14993 = pred[] parameter(0)
  %Arg_1.14994 = pred[] parameter(1)
  ROOT %and.14995 = pred[] and(%Arg_0.14993, %Arg_1.14994)
}

%region_524.14978 (Arg_0.14975: bf16[], Arg_1.14976: bf16[]) -> bf16[] {
  %Arg_0.14975 = bf16[] parameter(0)
  %Arg_1.14976 = bf16[] parameter(1)
  ROOT %add.14977 = bf16[] add(%Arg_0.14975, %Arg_1.14976)
}

%region_527.15010 (Arg_0.15007: f32[], Arg_1.15008: f32[]) -> f32[] {
  %Arg_0.15007 = f32[] parameter(0)
  %Arg_1.15008 = f32[] parameter(1)
  ROOT %add.15009 = f32[] add(%Arg_0.15007, %Arg_1.15008)
}

%region_529.15030 (Arg_0.15027: bf16[], Arg_1.15028: bf16[]) -> bf16[] {
  %Arg_0.15027 = bf16[] parameter(0)
  %Arg_1.15028 = bf16[] parameter(1)
  ROOT %add.15029 = bf16[] add(%Arg_0.15027, %Arg_1.15028)
}

%region_532.15059 (Arg_0.15056: f32[], Arg_1.15057: f32[]) -> f32[] {
  %Arg_0.15056 = f32[] parameter(0)
  %Arg_1.15057 = f32[] parameter(1)
  ROOT %add.15058 = f32[] add(%Arg_0.15056, %Arg_1.15057)
}

%region_536.15170 (Arg_0.15167: f32[], Arg_1.15168: f32[]) -> f32[] {
  %Arg_0.15167 = f32[] parameter(0)
  %Arg_1.15168 = f32[] parameter(1)
  ROOT %add.15169 = f32[] add(%Arg_0.15167, %Arg_1.15168)
}

%region_538.15213 (Arg_0.15210: f32[], Arg_1.15211: f32[]) -> f32[] {
  %Arg_0.15210 = f32[] parameter(0)
  %Arg_1.15211 = f32[] parameter(1)
  ROOT %add.15212 = f32[] add(%Arg_0.15210, %Arg_1.15211)
}

%region_539.15347 (Arg_0.15344: s32[], Arg_1.15345: s32[]) -> s32[] {
  %Arg_0.15344 = s32[] parameter(0)
  %Arg_1.15345 = s32[] parameter(1)
  ROOT %add.15346 = s32[] add(%Arg_0.15344, %Arg_1.15345)
}

%region_540.15355 (Arg_0.15352: s32[], Arg_1.15353: s32[]) -> s32[] {
  %Arg_0.15352 = s32[] parameter(0)
  %Arg_1.15353 = s32[] parameter(1)
  ROOT %add.15354 = s32[] add(%Arg_0.15352, %Arg_1.15353)
}

%region_541.15360 (Arg_0.15357: s32[], Arg_1.15358: s32[]) -> s32[] {
  %Arg_0.15357 = s32[] parameter(0)
  %Arg_1.15358 = s32[] parameter(1)
  ROOT %maximum.15359 = s32[] maximum(%Arg_0.15357, %Arg_1.15358)
}

%region_6.178._custom_call_lowering_rule.39 (Arg_0.1029: s32[], Arg_1.718: s32[]) -> s32[] {
  %Arg_0.1029 = s32[] parameter(0)
  ROOT %Arg_1.718 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.39 (Arg_0.1034: s32[], Arg_1.723: s32[]) -> s32[] {
  %Arg_0.1034 = s32[] parameter(0)
  ROOT %Arg_1.723 = s32[] parameter(1)
}

%region_542.15376 (Arg_0.15373: f32[], Arg_1.15374: f32[]) -> f32[] {
  %Arg_0.15373 = f32[] parameter(0)
  %Arg_1.15374 = f32[] parameter(1)
  ROOT %add.15375 = f32[] add(%Arg_0.15373, %Arg_1.15374)
}

%compare-greater-than.39.clone (p.0.lhs.142: bf16[], p.0.rhs.142: bf16[], p.1.lhs.142: s32[], p.1.rhs.142: s32[]) -> pred[] {
  %p.1.lhs.142 = s32[] parameter(2)
  %p.1.rhs.142 = s32[] parameter(3)
  %p.0.lhs.142 = bf16[] parameter(0)
  %p.0.rhs.142 = bf16[] parameter(1)
  ROOT %compare.584 = pred[] compare(%p.0.lhs.142, %p.0.rhs.142), direction=GT, type=TOTALORDER
}

%compare-value-and-index.39 (p.0.lhs.143: bf16[], p.0.rhs.143: bf16[], p.1.lhs.143: s32[], p.1.rhs.143: s32[]) -> pred[] {
  %p.0.lhs.143 = bf16[] parameter(0)
  %p.0.rhs.143 = bf16[] parameter(1)
  %compare.586 = pred[] compare(%p.0.lhs.143, %p.0.rhs.143), direction=EQ, type=TOTALORDER
  %p.1.lhs.143 = s32[] parameter(2)
  %p.1.rhs.143 = s32[] parameter(3)
  %compare.587 = pred[] compare(%p.1.lhs.143, %p.1.rhs.143), direction=LT
  %compare.585 = pred[] compare(%p.0.lhs.143, %p.0.rhs.143), direction=GT
  ROOT %select.300 = pred[] select(%compare.586, %compare.587, %compare.585)
}

%region_545.15455 (Arg_0.15453: u32[], Arg_1.15454: u32[]) -> u32[] {
  %Arg_0.15453 = u32[] parameter(0)
  ROOT %Arg_1.15454 = u32[] parameter(1)
}

%region_543.15405 (Arg_0.15402: f32[], Arg_1.15403: f32[]) -> f32[] {
  %Arg_0.15402 = f32[] parameter(0)
  %Arg_1.15403 = f32[] parameter(1)
  ROOT %maximum.15404 = f32[] maximum(%Arg_0.15402, %Arg_1.15403)
}

%region_544.15417 (Arg_0.15414: f32[], Arg_1.15415: f32[]) -> f32[] {
  %Arg_0.15414 = f32[] parameter(0)
  %Arg_1.15415 = f32[] parameter(1)
  ROOT %add.15416 = f32[] add(%Arg_0.15414, %Arg_1.15415)
}

%region_546.15464 (Arg_0.15461: bf16[], Arg_1.15462: bf16[]) -> bf16[] {
  %Arg_0.15461 = bf16[] parameter(0)
  %Arg_1.15462 = bf16[] parameter(1)
  ROOT %add.15463 = bf16[] add(%Arg_0.15461, %Arg_1.15462)
}

%region_9.1439.clone.clone.6 (Arg_0.302: s32[], Arg_1.101: s32[]) -> s32[] {
  %Arg_0.302 = s32[] parameter(0)
  %Arg_1.101 = s32[] parameter(1)
  ROOT %add.69 = s32[] add(%Arg_0.302, %Arg_1.101)
}

%region_547.15478 (Arg_0.15475: s32[], Arg_1.15476: s32[]) -> s32[] {
  %Arg_0.15475 = s32[] parameter(0)
  %Arg_1.15476 = s32[] parameter(1)
  ROOT %add.15477 = s32[] add(%Arg_0.15475, %Arg_1.15476)
}

%region_548.15487 (Arg_0.15484: s32[], Arg_1.15485: s32[]) -> s32[] {
  %Arg_0.15484 = s32[] parameter(0)
  %Arg_1.15485 = s32[] parameter(1)
  ROOT %add.15486 = s32[] add(%Arg_0.15484, %Arg_1.15485)
}

%region_551.15572 (Arg_0.15569: pred[], Arg_1.15570: pred[]) -> pred[] {
  %Arg_0.15569 = pred[] parameter(0)
  %Arg_1.15570 = pred[] parameter(1)
  ROOT %and.15571 = pred[] and(%Arg_0.15569, %Arg_1.15570)
}

%region_549.15554 (Arg_0.15551: bf16[], Arg_1.15552: bf16[]) -> bf16[] {
  %Arg_0.15551 = bf16[] parameter(0)
  %Arg_1.15552 = bf16[] parameter(1)
  ROOT %add.15553 = bf16[] add(%Arg_0.15551, %Arg_1.15552)
}

%region_552.15586 (Arg_0.15583: f32[], Arg_1.15584: f32[]) -> f32[] {
  %Arg_0.15583 = f32[] parameter(0)
  %Arg_1.15584 = f32[] parameter(1)
  ROOT %add.15585 = f32[] add(%Arg_0.15583, %Arg_1.15584)
}

%region_554.15606 (Arg_0.15603: bf16[], Arg_1.15604: bf16[]) -> bf16[] {
  %Arg_0.15603 = bf16[] parameter(0)
  %Arg_1.15604 = bf16[] parameter(1)
  ROOT %add.15605 = bf16[] add(%Arg_0.15603, %Arg_1.15604)
}

%region_557.15635 (Arg_0.15632: f32[], Arg_1.15633: f32[]) -> f32[] {
  %Arg_0.15632 = f32[] parameter(0)
  %Arg_1.15633 = f32[] parameter(1)
  ROOT %add.15634 = f32[] add(%Arg_0.15632, %Arg_1.15633)
}

%region_561.15746 (Arg_0.15743: f32[], Arg_1.15744: f32[]) -> f32[] {
  %Arg_0.15743 = f32[] parameter(0)
  %Arg_1.15744 = f32[] parameter(1)
  ROOT %add.15745 = f32[] add(%Arg_0.15743, %Arg_1.15744)
}

%region_563.15789 (Arg_0.15786: f32[], Arg_1.15787: f32[]) -> f32[] {
  %Arg_0.15786 = f32[] parameter(0)
  %Arg_1.15787 = f32[] parameter(1)
  ROOT %add.15788 = f32[] add(%Arg_0.15786, %Arg_1.15787)
}

%region_564.15923 (Arg_0.15920: s32[], Arg_1.15921: s32[]) -> s32[] {
  %Arg_0.15920 = s32[] parameter(0)
  %Arg_1.15921 = s32[] parameter(1)
  ROOT %add.15922 = s32[] add(%Arg_0.15920, %Arg_1.15921)
}

%region_565.15931 (Arg_0.15928: s32[], Arg_1.15929: s32[]) -> s32[] {
  %Arg_0.15928 = s32[] parameter(0)
  %Arg_1.15929 = s32[] parameter(1)
  ROOT %add.15930 = s32[] add(%Arg_0.15928, %Arg_1.15929)
}

%region_566.15936 (Arg_0.15933: s32[], Arg_1.15934: s32[]) -> s32[] {
  %Arg_0.15933 = s32[] parameter(0)
  %Arg_1.15934 = s32[] parameter(1)
  ROOT %maximum.15935 = s32[] maximum(%Arg_0.15933, %Arg_1.15934)
}

%region_6.178._custom_call_lowering_rule.40 (Arg_0.1053: s32[], Arg_1.742: s32[]) -> s32[] {
  %Arg_0.1053 = s32[] parameter(0)
  ROOT %Arg_1.742 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.40 (Arg_0.1058: s32[], Arg_1.747: s32[]) -> s32[] {
  %Arg_0.1058 = s32[] parameter(0)
  ROOT %Arg_1.747 = s32[] parameter(1)
}

%region_567.15952 (Arg_0.15949: f32[], Arg_1.15950: f32[]) -> f32[] {
  %Arg_0.15949 = f32[] parameter(0)
  %Arg_1.15950 = f32[] parameter(1)
  ROOT %add.15951 = f32[] add(%Arg_0.15949, %Arg_1.15950)
}

%compare-greater-than.40.clone (p.0.lhs.144: bf16[], p.0.rhs.144: bf16[], p.1.lhs.144: s32[], p.1.rhs.144: s32[]) -> pred[] {
  %p.1.lhs.144 = s32[] parameter(2)
  %p.1.rhs.144 = s32[] parameter(3)
  %p.0.lhs.144 = bf16[] parameter(0)
  %p.0.rhs.144 = bf16[] parameter(1)
  ROOT %compare.590 = pred[] compare(%p.0.lhs.144, %p.0.rhs.144), direction=GT, type=TOTALORDER
}

%compare-value-and-index.40 (p.0.lhs.145: bf16[], p.0.rhs.145: bf16[], p.1.lhs.145: s32[], p.1.rhs.145: s32[]) -> pred[] {
  %p.0.lhs.145 = bf16[] parameter(0)
  %p.0.rhs.145 = bf16[] parameter(1)
  %compare.592 = pred[] compare(%p.0.lhs.145, %p.0.rhs.145), direction=EQ, type=TOTALORDER
  %p.1.lhs.145 = s32[] parameter(2)
  %p.1.rhs.145 = s32[] parameter(3)
  %compare.593 = pred[] compare(%p.1.lhs.145, %p.1.rhs.145), direction=LT
  %compare.591 = pred[] compare(%p.0.lhs.145, %p.0.rhs.145), direction=GT
  ROOT %select.301 = pred[] select(%compare.592, %compare.593, %compare.591)
}

%region_570.16031 (Arg_0.16029: u32[], Arg_1.16030: u32[]) -> u32[] {
  %Arg_0.16029 = u32[] parameter(0)
  ROOT %Arg_1.16030 = u32[] parameter(1)
}

%region_568.15981 (Arg_0.15978: f32[], Arg_1.15979: f32[]) -> f32[] {
  %Arg_0.15978 = f32[] parameter(0)
  %Arg_1.15979 = f32[] parameter(1)
  ROOT %maximum.15980 = f32[] maximum(%Arg_0.15978, %Arg_1.15979)
}

%region_569.15993 (Arg_0.15990: f32[], Arg_1.15991: f32[]) -> f32[] {
  %Arg_0.15990 = f32[] parameter(0)
  %Arg_1.15991 = f32[] parameter(1)
  ROOT %add.15992 = f32[] add(%Arg_0.15990, %Arg_1.15991)
}

%region_571.16040 (Arg_0.16037: bf16[], Arg_1.16038: bf16[]) -> bf16[] {
  %Arg_0.16037 = bf16[] parameter(0)
  %Arg_1.16038 = bf16[] parameter(1)
  ROOT %add.16039 = bf16[] add(%Arg_0.16037, %Arg_1.16038)
}

%region_9.1439.clone.clone.7 (Arg_0.305: s32[], Arg_1.102: s32[]) -> s32[] {
  %Arg_0.305 = s32[] parameter(0)
  %Arg_1.102 = s32[] parameter(1)
  ROOT %add.70 = s32[] add(%Arg_0.305, %Arg_1.102)
}

%region_572.16054 (Arg_0.16051: s32[], Arg_1.16052: s32[]) -> s32[] {
  %Arg_0.16051 = s32[] parameter(0)
  %Arg_1.16052 = s32[] parameter(1)
  ROOT %add.16053 = s32[] add(%Arg_0.16051, %Arg_1.16052)
}

%region_573.16063 (Arg_0.16060: s32[], Arg_1.16061: s32[]) -> s32[] {
  %Arg_0.16060 = s32[] parameter(0)
  %Arg_1.16061 = s32[] parameter(1)
  ROOT %add.16062 = s32[] add(%Arg_0.16060, %Arg_1.16061)
}

%region_576.16148 (Arg_0.16145: pred[], Arg_1.16146: pred[]) -> pred[] {
  %Arg_0.16145 = pred[] parameter(0)
  %Arg_1.16146 = pred[] parameter(1)
  ROOT %and.16147 = pred[] and(%Arg_0.16145, %Arg_1.16146)
}

%region_574.16130 (Arg_0.16127: bf16[], Arg_1.16128: bf16[]) -> bf16[] {
  %Arg_0.16127 = bf16[] parameter(0)
  %Arg_1.16128 = bf16[] parameter(1)
  ROOT %add.16129 = bf16[] add(%Arg_0.16127, %Arg_1.16128)
}

%region_577.16162 (Arg_0.16159: f32[], Arg_1.16160: f32[]) -> f32[] {
  %Arg_0.16159 = f32[] parameter(0)
  %Arg_1.16160 = f32[] parameter(1)
  ROOT %add.16161 = f32[] add(%Arg_0.16159, %Arg_1.16160)
}

%region_579.16182 (Arg_0.16179: bf16[], Arg_1.16180: bf16[]) -> bf16[] {
  %Arg_0.16179 = bf16[] parameter(0)
  %Arg_1.16180 = bf16[] parameter(1)
  ROOT %add.16181 = bf16[] add(%Arg_0.16179, %Arg_1.16180)
}

%region_582.16211 (Arg_0.16208: f32[], Arg_1.16209: f32[]) -> f32[] {
  %Arg_0.16208 = f32[] parameter(0)
  %Arg_1.16209 = f32[] parameter(1)
  ROOT %add.16210 = f32[] add(%Arg_0.16208, %Arg_1.16209)
}

%region_586.16322 (Arg_0.16319: f32[], Arg_1.16320: f32[]) -> f32[] {
  %Arg_0.16319 = f32[] parameter(0)
  %Arg_1.16320 = f32[] parameter(1)
  ROOT %add.16321 = f32[] add(%Arg_0.16319, %Arg_1.16320)
}

%region_588.16365 (Arg_0.16362: f32[], Arg_1.16363: f32[]) -> f32[] {
  %Arg_0.16362 = f32[] parameter(0)
  %Arg_1.16363 = f32[] parameter(1)
  ROOT %add.16364 = f32[] add(%Arg_0.16362, %Arg_1.16363)
}

%region_589.16499 (Arg_0.16496: s32[], Arg_1.16497: s32[]) -> s32[] {
  %Arg_0.16496 = s32[] parameter(0)
  %Arg_1.16497 = s32[] parameter(1)
  ROOT %add.16498 = s32[] add(%Arg_0.16496, %Arg_1.16497)
}

%region_590.16507 (Arg_0.16504: s32[], Arg_1.16505: s32[]) -> s32[] {
  %Arg_0.16504 = s32[] parameter(0)
  %Arg_1.16505 = s32[] parameter(1)
  ROOT %add.16506 = s32[] add(%Arg_0.16504, %Arg_1.16505)
}

%region_591.16512 (Arg_0.16509: s32[], Arg_1.16510: s32[]) -> s32[] {
  %Arg_0.16509 = s32[] parameter(0)
  %Arg_1.16510 = s32[] parameter(1)
  ROOT %maximum.16511 = s32[] maximum(%Arg_0.16509, %Arg_1.16510)
}

%region_6.178._custom_call_lowering_rule.41 (Arg_0.1077: s32[], Arg_1.766: s32[]) -> s32[] {
  %Arg_0.1077 = s32[] parameter(0)
  ROOT %Arg_1.766 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.41 (Arg_0.1082: s32[], Arg_1.771: s32[]) -> s32[] {
  %Arg_0.1082 = s32[] parameter(0)
  ROOT %Arg_1.771 = s32[] parameter(1)
}

%region_592.16528 (Arg_0.16525: f32[], Arg_1.16526: f32[]) -> f32[] {
  %Arg_0.16525 = f32[] parameter(0)
  %Arg_1.16526 = f32[] parameter(1)
  ROOT %add.16527 = f32[] add(%Arg_0.16525, %Arg_1.16526)
}

%compare-greater-than.41.clone (p.0.lhs.146: bf16[], p.0.rhs.146: bf16[], p.1.lhs.146: s32[], p.1.rhs.146: s32[]) -> pred[] {
  %p.1.lhs.146 = s32[] parameter(2)
  %p.1.rhs.146 = s32[] parameter(3)
  %p.0.lhs.146 = bf16[] parameter(0)
  %p.0.rhs.146 = bf16[] parameter(1)
  ROOT %compare.596 = pred[] compare(%p.0.lhs.146, %p.0.rhs.146), direction=GT, type=TOTALORDER
}

%compare-value-and-index.41 (p.0.lhs.147: bf16[], p.0.rhs.147: bf16[], p.1.lhs.147: s32[], p.1.rhs.147: s32[]) -> pred[] {
  %p.0.lhs.147 = bf16[] parameter(0)
  %p.0.rhs.147 = bf16[] parameter(1)
  %compare.598 = pred[] compare(%p.0.lhs.147, %p.0.rhs.147), direction=EQ, type=TOTALORDER
  %p.1.lhs.147 = s32[] parameter(2)
  %p.1.rhs.147 = s32[] parameter(3)
  %compare.599 = pred[] compare(%p.1.lhs.147, %p.1.rhs.147), direction=LT
  %compare.597 = pred[] compare(%p.0.lhs.147, %p.0.rhs.147), direction=GT
  ROOT %select.302 = pred[] select(%compare.598, %compare.599, %compare.597)
}

%region_595.16607 (Arg_0.16605: u32[], Arg_1.16606: u32[]) -> u32[] {
  %Arg_0.16605 = u32[] parameter(0)
  ROOT %Arg_1.16606 = u32[] parameter(1)
}

%region_593.16557 (Arg_0.16554: f32[], Arg_1.16555: f32[]) -> f32[] {
  %Arg_0.16554 = f32[] parameter(0)
  %Arg_1.16555 = f32[] parameter(1)
  ROOT %maximum.16556 = f32[] maximum(%Arg_0.16554, %Arg_1.16555)
}

%region_594.16569 (Arg_0.16566: f32[], Arg_1.16567: f32[]) -> f32[] {
  %Arg_0.16566 = f32[] parameter(0)
  %Arg_1.16567 = f32[] parameter(1)
  ROOT %add.16568 = f32[] add(%Arg_0.16566, %Arg_1.16567)
}

%region_596.16616 (Arg_0.16613: bf16[], Arg_1.16614: bf16[]) -> bf16[] {
  %Arg_0.16613 = bf16[] parameter(0)
  %Arg_1.16614 = bf16[] parameter(1)
  ROOT %add.16615 = bf16[] add(%Arg_0.16613, %Arg_1.16614)
}

%region_9.1439.clone.clone.8 (Arg_0.308: s32[], Arg_1.103: s32[]) -> s32[] {
  %Arg_0.308 = s32[] parameter(0)
  %Arg_1.103 = s32[] parameter(1)
  ROOT %add.71 = s32[] add(%Arg_0.308, %Arg_1.103)
}

%region_597.16630 (Arg_0.16627: s32[], Arg_1.16628: s32[]) -> s32[] {
  %Arg_0.16627 = s32[] parameter(0)
  %Arg_1.16628 = s32[] parameter(1)
  ROOT %add.16629 = s32[] add(%Arg_0.16627, %Arg_1.16628)
}

%region_598.16639 (Arg_0.16636: s32[], Arg_1.16637: s32[]) -> s32[] {
  %Arg_0.16636 = s32[] parameter(0)
  %Arg_1.16637 = s32[] parameter(1)
  ROOT %add.16638 = s32[] add(%Arg_0.16636, %Arg_1.16637)
}

%region_601.16724 (Arg_0.16721: pred[], Arg_1.16722: pred[]) -> pred[] {
  %Arg_0.16721 = pred[] parameter(0)
  %Arg_1.16722 = pred[] parameter(1)
  ROOT %and.16723 = pred[] and(%Arg_0.16721, %Arg_1.16722)
}

%region_599.16706 (Arg_0.16703: bf16[], Arg_1.16704: bf16[]) -> bf16[] {
  %Arg_0.16703 = bf16[] parameter(0)
  %Arg_1.16704 = bf16[] parameter(1)
  ROOT %add.16705 = bf16[] add(%Arg_0.16703, %Arg_1.16704)
}

%region_602.16738 (Arg_0.16735: f32[], Arg_1.16736: f32[]) -> f32[] {
  %Arg_0.16735 = f32[] parameter(0)
  %Arg_1.16736 = f32[] parameter(1)
  ROOT %add.16737 = f32[] add(%Arg_0.16735, %Arg_1.16736)
}

%region_604.16758 (Arg_0.16755: bf16[], Arg_1.16756: bf16[]) -> bf16[] {
  %Arg_0.16755 = bf16[] parameter(0)
  %Arg_1.16756 = bf16[] parameter(1)
  ROOT %add.16757 = bf16[] add(%Arg_0.16755, %Arg_1.16756)
}

%region_607.16787 (Arg_0.16784: f32[], Arg_1.16785: f32[]) -> f32[] {
  %Arg_0.16784 = f32[] parameter(0)
  %Arg_1.16785 = f32[] parameter(1)
  ROOT %add.16786 = f32[] add(%Arg_0.16784, %Arg_1.16785)
}

%region_611.16898 (Arg_0.16895: f32[], Arg_1.16896: f32[]) -> f32[] {
  %Arg_0.16895 = f32[] parameter(0)
  %Arg_1.16896 = f32[] parameter(1)
  ROOT %add.16897 = f32[] add(%Arg_0.16895, %Arg_1.16896)
}

%region_613.16941 (Arg_0.16938: f32[], Arg_1.16939: f32[]) -> f32[] {
  %Arg_0.16938 = f32[] parameter(0)
  %Arg_1.16939 = f32[] parameter(1)
  ROOT %add.16940 = f32[] add(%Arg_0.16938, %Arg_1.16939)
}

%region_614.17075 (Arg_0.17072: s32[], Arg_1.17073: s32[]) -> s32[] {
  %Arg_0.17072 = s32[] parameter(0)
  %Arg_1.17073 = s32[] parameter(1)
  ROOT %add.17074 = s32[] add(%Arg_0.17072, %Arg_1.17073)
}

%region_615.17083 (Arg_0.17080: s32[], Arg_1.17081: s32[]) -> s32[] {
  %Arg_0.17080 = s32[] parameter(0)
  %Arg_1.17081 = s32[] parameter(1)
  ROOT %add.17082 = s32[] add(%Arg_0.17080, %Arg_1.17081)
}

%region_616.17088 (Arg_0.17085: s32[], Arg_1.17086: s32[]) -> s32[] {
  %Arg_0.17085 = s32[] parameter(0)
  %Arg_1.17086 = s32[] parameter(1)
  ROOT %maximum.17087 = s32[] maximum(%Arg_0.17085, %Arg_1.17086)
}

%region_6.178._custom_call_lowering_rule.42 (Arg_0.1101: s32[], Arg_1.790: s32[]) -> s32[] {
  %Arg_0.1101 = s32[] parameter(0)
  ROOT %Arg_1.790 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.42 (Arg_0.1106: s32[], Arg_1.795: s32[]) -> s32[] {
  %Arg_0.1106 = s32[] parameter(0)
  ROOT %Arg_1.795 = s32[] parameter(1)
}

%region_617.17104 (Arg_0.17101: f32[], Arg_1.17102: f32[]) -> f32[] {
  %Arg_0.17101 = f32[] parameter(0)
  %Arg_1.17102 = f32[] parameter(1)
  ROOT %add.17103 = f32[] add(%Arg_0.17101, %Arg_1.17102)
}

%compare-greater-than.42.clone (p.0.lhs.148: bf16[], p.0.rhs.148: bf16[], p.1.lhs.148: s32[], p.1.rhs.148: s32[]) -> pred[] {
  %p.1.lhs.148 = s32[] parameter(2)
  %p.1.rhs.148 = s32[] parameter(3)
  %p.0.lhs.148 = bf16[] parameter(0)
  %p.0.rhs.148 = bf16[] parameter(1)
  ROOT %compare.602 = pred[] compare(%p.0.lhs.148, %p.0.rhs.148), direction=GT, type=TOTALORDER
}

%compare-value-and-index.42 (p.0.lhs.149: bf16[], p.0.rhs.149: bf16[], p.1.lhs.149: s32[], p.1.rhs.149: s32[]) -> pred[] {
  %p.0.lhs.149 = bf16[] parameter(0)
  %p.0.rhs.149 = bf16[] parameter(1)
  %compare.604 = pred[] compare(%p.0.lhs.149, %p.0.rhs.149), direction=EQ, type=TOTALORDER
  %p.1.lhs.149 = s32[] parameter(2)
  %p.1.rhs.149 = s32[] parameter(3)
  %compare.605 = pred[] compare(%p.1.lhs.149, %p.1.rhs.149), direction=LT
  %compare.603 = pred[] compare(%p.0.lhs.149, %p.0.rhs.149), direction=GT
  ROOT %select.303 = pred[] select(%compare.604, %compare.605, %compare.603)
}

%region_620.17183 (Arg_0.17181: u32[], Arg_1.17182: u32[]) -> u32[] {
  %Arg_0.17181 = u32[] parameter(0)
  ROOT %Arg_1.17182 = u32[] parameter(1)
}

%region_618.17133 (Arg_0.17130: f32[], Arg_1.17131: f32[]) -> f32[] {
  %Arg_0.17130 = f32[] parameter(0)
  %Arg_1.17131 = f32[] parameter(1)
  ROOT %maximum.17132 = f32[] maximum(%Arg_0.17130, %Arg_1.17131)
}

%region_619.17145 (Arg_0.17142: f32[], Arg_1.17143: f32[]) -> f32[] {
  %Arg_0.17142 = f32[] parameter(0)
  %Arg_1.17143 = f32[] parameter(1)
  ROOT %add.17144 = f32[] add(%Arg_0.17142, %Arg_1.17143)
}

%region_621.17192 (Arg_0.17189: bf16[], Arg_1.17190: bf16[]) -> bf16[] {
  %Arg_0.17189 = bf16[] parameter(0)
  %Arg_1.17190 = bf16[] parameter(1)
  ROOT %add.17191 = bf16[] add(%Arg_0.17189, %Arg_1.17190)
}

%region_9.1439.clone.clone.9 (Arg_0.311: s32[], Arg_1.104: s32[]) -> s32[] {
  %Arg_0.311 = s32[] parameter(0)
  %Arg_1.104 = s32[] parameter(1)
  ROOT %add.72 = s32[] add(%Arg_0.311, %Arg_1.104)
}

%region_622.17206 (Arg_0.17203: s32[], Arg_1.17204: s32[]) -> s32[] {
  %Arg_0.17203 = s32[] parameter(0)
  %Arg_1.17204 = s32[] parameter(1)
  ROOT %add.17205 = s32[] add(%Arg_0.17203, %Arg_1.17204)
}

%region_623.17215 (Arg_0.17212: s32[], Arg_1.17213: s32[]) -> s32[] {
  %Arg_0.17212 = s32[] parameter(0)
  %Arg_1.17213 = s32[] parameter(1)
  ROOT %add.17214 = s32[] add(%Arg_0.17212, %Arg_1.17213)
}

%region_626.17300 (Arg_0.17297: pred[], Arg_1.17298: pred[]) -> pred[] {
  %Arg_0.17297 = pred[] parameter(0)
  %Arg_1.17298 = pred[] parameter(1)
  ROOT %and.17299 = pred[] and(%Arg_0.17297, %Arg_1.17298)
}

%region_624.17282 (Arg_0.17279: bf16[], Arg_1.17280: bf16[]) -> bf16[] {
  %Arg_0.17279 = bf16[] parameter(0)
  %Arg_1.17280 = bf16[] parameter(1)
  ROOT %add.17281 = bf16[] add(%Arg_0.17279, %Arg_1.17280)
}

%region_627.17314 (Arg_0.17311: f32[], Arg_1.17312: f32[]) -> f32[] {
  %Arg_0.17311 = f32[] parameter(0)
  %Arg_1.17312 = f32[] parameter(1)
  ROOT %add.17313 = f32[] add(%Arg_0.17311, %Arg_1.17312)
}

%region_629.17334 (Arg_0.17331: bf16[], Arg_1.17332: bf16[]) -> bf16[] {
  %Arg_0.17331 = bf16[] parameter(0)
  %Arg_1.17332 = bf16[] parameter(1)
  ROOT %add.17333 = bf16[] add(%Arg_0.17331, %Arg_1.17332)
}

%region_632.17363 (Arg_0.17360: f32[], Arg_1.17361: f32[]) -> f32[] {
  %Arg_0.17360 = f32[] parameter(0)
  %Arg_1.17361 = f32[] parameter(1)
  ROOT %add.17362 = f32[] add(%Arg_0.17360, %Arg_1.17361)
}

%region_636.17474 (Arg_0.17471: f32[], Arg_1.17472: f32[]) -> f32[] {
  %Arg_0.17471 = f32[] parameter(0)
  %Arg_1.17472 = f32[] parameter(1)
  ROOT %add.17473 = f32[] add(%Arg_0.17471, %Arg_1.17472)
}

%region_638.17517 (Arg_0.17514: f32[], Arg_1.17515: f32[]) -> f32[] {
  %Arg_0.17514 = f32[] parameter(0)
  %Arg_1.17515 = f32[] parameter(1)
  ROOT %add.17516 = f32[] add(%Arg_0.17514, %Arg_1.17515)
}

%region_639.17651 (Arg_0.17648: s32[], Arg_1.17649: s32[]) -> s32[] {
  %Arg_0.17648 = s32[] parameter(0)
  %Arg_1.17649 = s32[] parameter(1)
  ROOT %add.17650 = s32[] add(%Arg_0.17648, %Arg_1.17649)
}

%region_640.17659 (Arg_0.17656: s32[], Arg_1.17657: s32[]) -> s32[] {
  %Arg_0.17656 = s32[] parameter(0)
  %Arg_1.17657 = s32[] parameter(1)
  ROOT %add.17658 = s32[] add(%Arg_0.17656, %Arg_1.17657)
}

%region_641.17664 (Arg_0.17661: s32[], Arg_1.17662: s32[]) -> s32[] {
  %Arg_0.17661 = s32[] parameter(0)
  %Arg_1.17662 = s32[] parameter(1)
  ROOT %maximum.17663 = s32[] maximum(%Arg_0.17661, %Arg_1.17662)
}

%region_6.178._custom_call_lowering_rule.43 (Arg_0.1125: s32[], Arg_1.814: s32[]) -> s32[] {
  %Arg_0.1125 = s32[] parameter(0)
  ROOT %Arg_1.814 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.43 (Arg_0.1130: s32[], Arg_1.819: s32[]) -> s32[] {
  %Arg_0.1130 = s32[] parameter(0)
  ROOT %Arg_1.819 = s32[] parameter(1)
}

%region_642.17680 (Arg_0.17677: f32[], Arg_1.17678: f32[]) -> f32[] {
  %Arg_0.17677 = f32[] parameter(0)
  %Arg_1.17678 = f32[] parameter(1)
  ROOT %add.17679 = f32[] add(%Arg_0.17677, %Arg_1.17678)
}

%compare-greater-than.43.clone (p.0.lhs.150: bf16[], p.0.rhs.150: bf16[], p.1.lhs.150: s32[], p.1.rhs.150: s32[]) -> pred[] {
  %p.1.lhs.150 = s32[] parameter(2)
  %p.1.rhs.150 = s32[] parameter(3)
  %p.0.lhs.150 = bf16[] parameter(0)
  %p.0.rhs.150 = bf16[] parameter(1)
  ROOT %compare.608 = pred[] compare(%p.0.lhs.150, %p.0.rhs.150), direction=GT, type=TOTALORDER
}

%compare-value-and-index.43 (p.0.lhs.151: bf16[], p.0.rhs.151: bf16[], p.1.lhs.151: s32[], p.1.rhs.151: s32[]) -> pred[] {
  %p.0.lhs.151 = bf16[] parameter(0)
  %p.0.rhs.151 = bf16[] parameter(1)
  %compare.610 = pred[] compare(%p.0.lhs.151, %p.0.rhs.151), direction=EQ, type=TOTALORDER
  %p.1.lhs.151 = s32[] parameter(2)
  %p.1.rhs.151 = s32[] parameter(3)
  %compare.611 = pred[] compare(%p.1.lhs.151, %p.1.rhs.151), direction=LT
  %compare.609 = pred[] compare(%p.0.lhs.151, %p.0.rhs.151), direction=GT
  ROOT %select.304 = pred[] select(%compare.610, %compare.611, %compare.609)
}

%region_645.17759 (Arg_0.17757: u32[], Arg_1.17758: u32[]) -> u32[] {
  %Arg_0.17757 = u32[] parameter(0)
  ROOT %Arg_1.17758 = u32[] parameter(1)
}

%region_643.17709 (Arg_0.17706: f32[], Arg_1.17707: f32[]) -> f32[] {
  %Arg_0.17706 = f32[] parameter(0)
  %Arg_1.17707 = f32[] parameter(1)
  ROOT %maximum.17708 = f32[] maximum(%Arg_0.17706, %Arg_1.17707)
}

%region_644.17721 (Arg_0.17718: f32[], Arg_1.17719: f32[]) -> f32[] {
  %Arg_0.17718 = f32[] parameter(0)
  %Arg_1.17719 = f32[] parameter(1)
  ROOT %add.17720 = f32[] add(%Arg_0.17718, %Arg_1.17719)
}

%region_646.17768 (Arg_0.17765: bf16[], Arg_1.17766: bf16[]) -> bf16[] {
  %Arg_0.17765 = bf16[] parameter(0)
  %Arg_1.17766 = bf16[] parameter(1)
  ROOT %add.17767 = bf16[] add(%Arg_0.17765, %Arg_1.17766)
}

%region_9.1439.clone.clone.10 (Arg_0.314: s32[], Arg_1.105: s32[]) -> s32[] {
  %Arg_0.314 = s32[] parameter(0)
  %Arg_1.105 = s32[] parameter(1)
  ROOT %add.73 = s32[] add(%Arg_0.314, %Arg_1.105)
}

%region_647.17782 (Arg_0.17779: s32[], Arg_1.17780: s32[]) -> s32[] {
  %Arg_0.17779 = s32[] parameter(0)
  %Arg_1.17780 = s32[] parameter(1)
  ROOT %add.17781 = s32[] add(%Arg_0.17779, %Arg_1.17780)
}

%region_648.17791 (Arg_0.17788: s32[], Arg_1.17789: s32[]) -> s32[] {
  %Arg_0.17788 = s32[] parameter(0)
  %Arg_1.17789 = s32[] parameter(1)
  ROOT %add.17790 = s32[] add(%Arg_0.17788, %Arg_1.17789)
}

%region_651.17876 (Arg_0.17873: pred[], Arg_1.17874: pred[]) -> pred[] {
  %Arg_0.17873 = pred[] parameter(0)
  %Arg_1.17874 = pred[] parameter(1)
  ROOT %and.17875 = pred[] and(%Arg_0.17873, %Arg_1.17874)
}

%region_649.17858 (Arg_0.17855: bf16[], Arg_1.17856: bf16[]) -> bf16[] {
  %Arg_0.17855 = bf16[] parameter(0)
  %Arg_1.17856 = bf16[] parameter(1)
  ROOT %add.17857 = bf16[] add(%Arg_0.17855, %Arg_1.17856)
}

%region_652.17890 (Arg_0.17887: f32[], Arg_1.17888: f32[]) -> f32[] {
  %Arg_0.17887 = f32[] parameter(0)
  %Arg_1.17888 = f32[] parameter(1)
  ROOT %add.17889 = f32[] add(%Arg_0.17887, %Arg_1.17888)
}

%region_654.17910 (Arg_0.17907: bf16[], Arg_1.17908: bf16[]) -> bf16[] {
  %Arg_0.17907 = bf16[] parameter(0)
  %Arg_1.17908 = bf16[] parameter(1)
  ROOT %add.17909 = bf16[] add(%Arg_0.17907, %Arg_1.17908)
}

%region_657.17939 (Arg_0.17936: f32[], Arg_1.17937: f32[]) -> f32[] {
  %Arg_0.17936 = f32[] parameter(0)
  %Arg_1.17937 = f32[] parameter(1)
  ROOT %add.17938 = f32[] add(%Arg_0.17936, %Arg_1.17937)
}

%region_661.18050 (Arg_0.18047: f32[], Arg_1.18048: f32[]) -> f32[] {
  %Arg_0.18047 = f32[] parameter(0)
  %Arg_1.18048 = f32[] parameter(1)
  ROOT %add.18049 = f32[] add(%Arg_0.18047, %Arg_1.18048)
}

%region_663.18093 (Arg_0.18090: f32[], Arg_1.18091: f32[]) -> f32[] {
  %Arg_0.18090 = f32[] parameter(0)
  %Arg_1.18091 = f32[] parameter(1)
  ROOT %add.18092 = f32[] add(%Arg_0.18090, %Arg_1.18091)
}

%region_664.18227 (Arg_0.18224: s32[], Arg_1.18225: s32[]) -> s32[] {
  %Arg_0.18224 = s32[] parameter(0)
  %Arg_1.18225 = s32[] parameter(1)
  ROOT %add.18226 = s32[] add(%Arg_0.18224, %Arg_1.18225)
}

%region_665.18235 (Arg_0.18232: s32[], Arg_1.18233: s32[]) -> s32[] {
  %Arg_0.18232 = s32[] parameter(0)
  %Arg_1.18233 = s32[] parameter(1)
  ROOT %add.18234 = s32[] add(%Arg_0.18232, %Arg_1.18233)
}

%region_666.18240 (Arg_0.18237: s32[], Arg_1.18238: s32[]) -> s32[] {
  %Arg_0.18237 = s32[] parameter(0)
  %Arg_1.18238 = s32[] parameter(1)
  ROOT %maximum.18239 = s32[] maximum(%Arg_0.18237, %Arg_1.18238)
}

%region_6.178._custom_call_lowering_rule.44 (Arg_0.1149: s32[], Arg_1.838: s32[]) -> s32[] {
  %Arg_0.1149 = s32[] parameter(0)
  ROOT %Arg_1.838 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.44 (Arg_0.1154: s32[], Arg_1.843: s32[]) -> s32[] {
  %Arg_0.1154 = s32[] parameter(0)
  ROOT %Arg_1.843 = s32[] parameter(1)
}

%region_667.18256 (Arg_0.18253: f32[], Arg_1.18254: f32[]) -> f32[] {
  %Arg_0.18253 = f32[] parameter(0)
  %Arg_1.18254 = f32[] parameter(1)
  ROOT %add.18255 = f32[] add(%Arg_0.18253, %Arg_1.18254)
}

%compare-greater-than.44.clone (p.0.lhs.152: bf16[], p.0.rhs.152: bf16[], p.1.lhs.152: s32[], p.1.rhs.152: s32[]) -> pred[] {
  %p.1.lhs.152 = s32[] parameter(2)
  %p.1.rhs.152 = s32[] parameter(3)
  %p.0.lhs.152 = bf16[] parameter(0)
  %p.0.rhs.152 = bf16[] parameter(1)
  ROOT %compare.614 = pred[] compare(%p.0.lhs.152, %p.0.rhs.152), direction=GT, type=TOTALORDER
}

%compare-value-and-index.44 (p.0.lhs.153: bf16[], p.0.rhs.153: bf16[], p.1.lhs.153: s32[], p.1.rhs.153: s32[]) -> pred[] {
  %p.0.lhs.153 = bf16[] parameter(0)
  %p.0.rhs.153 = bf16[] parameter(1)
  %compare.616 = pred[] compare(%p.0.lhs.153, %p.0.rhs.153), direction=EQ, type=TOTALORDER
  %p.1.lhs.153 = s32[] parameter(2)
  %p.1.rhs.153 = s32[] parameter(3)
  %compare.617 = pred[] compare(%p.1.lhs.153, %p.1.rhs.153), direction=LT
  %compare.615 = pred[] compare(%p.0.lhs.153, %p.0.rhs.153), direction=GT
  ROOT %select.305 = pred[] select(%compare.616, %compare.617, %compare.615)
}

%region_670.18335 (Arg_0.18333: u32[], Arg_1.18334: u32[]) -> u32[] {
  %Arg_0.18333 = u32[] parameter(0)
  ROOT %Arg_1.18334 = u32[] parameter(1)
}

%region_668.18285 (Arg_0.18282: f32[], Arg_1.18283: f32[]) -> f32[] {
  %Arg_0.18282 = f32[] parameter(0)
  %Arg_1.18283 = f32[] parameter(1)
  ROOT %maximum.18284 = f32[] maximum(%Arg_0.18282, %Arg_1.18283)
}

%region_669.18297 (Arg_0.18294: f32[], Arg_1.18295: f32[]) -> f32[] {
  %Arg_0.18294 = f32[] parameter(0)
  %Arg_1.18295 = f32[] parameter(1)
  ROOT %add.18296 = f32[] add(%Arg_0.18294, %Arg_1.18295)
}

%region_671.18344 (Arg_0.18341: bf16[], Arg_1.18342: bf16[]) -> bf16[] {
  %Arg_0.18341 = bf16[] parameter(0)
  %Arg_1.18342 = bf16[] parameter(1)
  ROOT %add.18343 = bf16[] add(%Arg_0.18341, %Arg_1.18342)
}

%region_9.1439.clone.clone.11 (Arg_0.317: s32[], Arg_1.106: s32[]) -> s32[] {
  %Arg_0.317 = s32[] parameter(0)
  %Arg_1.106 = s32[] parameter(1)
  ROOT %add.74 = s32[] add(%Arg_0.317, %Arg_1.106)
}

%region_672.18358 (Arg_0.18355: s32[], Arg_1.18356: s32[]) -> s32[] {
  %Arg_0.18355 = s32[] parameter(0)
  %Arg_1.18356 = s32[] parameter(1)
  ROOT %add.18357 = s32[] add(%Arg_0.18355, %Arg_1.18356)
}

%region_673.18367 (Arg_0.18364: s32[], Arg_1.18365: s32[]) -> s32[] {
  %Arg_0.18364 = s32[] parameter(0)
  %Arg_1.18365 = s32[] parameter(1)
  ROOT %add.18366 = s32[] add(%Arg_0.18364, %Arg_1.18365)
}

%region_676.18452 (Arg_0.18449: pred[], Arg_1.18450: pred[]) -> pred[] {
  %Arg_0.18449 = pred[] parameter(0)
  %Arg_1.18450 = pred[] parameter(1)
  ROOT %and.18451 = pred[] and(%Arg_0.18449, %Arg_1.18450)
}

%region_674.18434 (Arg_0.18431: bf16[], Arg_1.18432: bf16[]) -> bf16[] {
  %Arg_0.18431 = bf16[] parameter(0)
  %Arg_1.18432 = bf16[] parameter(1)
  ROOT %add.18433 = bf16[] add(%Arg_0.18431, %Arg_1.18432)
}

%region_677.18466 (Arg_0.18463: f32[], Arg_1.18464: f32[]) -> f32[] {
  %Arg_0.18463 = f32[] parameter(0)
  %Arg_1.18464 = f32[] parameter(1)
  ROOT %add.18465 = f32[] add(%Arg_0.18463, %Arg_1.18464)
}

%region_679.18486 (Arg_0.18483: bf16[], Arg_1.18484: bf16[]) -> bf16[] {
  %Arg_0.18483 = bf16[] parameter(0)
  %Arg_1.18484 = bf16[] parameter(1)
  ROOT %add.18485 = bf16[] add(%Arg_0.18483, %Arg_1.18484)
}

%region_682.18515 (Arg_0.18512: f32[], Arg_1.18513: f32[]) -> f32[] {
  %Arg_0.18512 = f32[] parameter(0)
  %Arg_1.18513 = f32[] parameter(1)
  ROOT %add.18514 = f32[] add(%Arg_0.18512, %Arg_1.18513)
}

%region_686.18626 (Arg_0.18623: f32[], Arg_1.18624: f32[]) -> f32[] {
  %Arg_0.18623 = f32[] parameter(0)
  %Arg_1.18624 = f32[] parameter(1)
  ROOT %add.18625 = f32[] add(%Arg_0.18623, %Arg_1.18624)
}

%region_688.18669 (Arg_0.18666: f32[], Arg_1.18667: f32[]) -> f32[] {
  %Arg_0.18666 = f32[] parameter(0)
  %Arg_1.18667 = f32[] parameter(1)
  ROOT %add.18668 = f32[] add(%Arg_0.18666, %Arg_1.18667)
}

%region_689.18803 (Arg_0.18800: s32[], Arg_1.18801: s32[]) -> s32[] {
  %Arg_0.18800 = s32[] parameter(0)
  %Arg_1.18801 = s32[] parameter(1)
  ROOT %add.18802 = s32[] add(%Arg_0.18800, %Arg_1.18801)
}

%region_690.18811 (Arg_0.18808: s32[], Arg_1.18809: s32[]) -> s32[] {
  %Arg_0.18808 = s32[] parameter(0)
  %Arg_1.18809 = s32[] parameter(1)
  ROOT %add.18810 = s32[] add(%Arg_0.18808, %Arg_1.18809)
}

%region_691.18816 (Arg_0.18813: s32[], Arg_1.18814: s32[]) -> s32[] {
  %Arg_0.18813 = s32[] parameter(0)
  %Arg_1.18814 = s32[] parameter(1)
  ROOT %maximum.18815 = s32[] maximum(%Arg_0.18813, %Arg_1.18814)
}

%region_6.178._custom_call_lowering_rule.45 (Arg_0.1174: s32[], Arg_1.862: s32[]) -> s32[] {
  %Arg_0.1174 = s32[] parameter(0)
  ROOT %Arg_1.862 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.45 (Arg_0.1179: s32[], Arg_1.867: s32[]) -> s32[] {
  %Arg_0.1179 = s32[] parameter(0)
  ROOT %Arg_1.867 = s32[] parameter(1)
}

%region_692.18832 (Arg_0.18829: f32[], Arg_1.18830: f32[]) -> f32[] {
  %Arg_0.18829 = f32[] parameter(0)
  %Arg_1.18830 = f32[] parameter(1)
  ROOT %add.18831 = f32[] add(%Arg_0.18829, %Arg_1.18830)
}

%compare-greater-than.45.clone (p.0.lhs.154: bf16[], p.0.rhs.154: bf16[], p.1.lhs.154: s32[], p.1.rhs.154: s32[]) -> pred[] {
  %p.1.lhs.154 = s32[] parameter(2)
  %p.1.rhs.154 = s32[] parameter(3)
  %p.0.lhs.154 = bf16[] parameter(0)
  %p.0.rhs.154 = bf16[] parameter(1)
  ROOT %compare.620 = pred[] compare(%p.0.lhs.154, %p.0.rhs.154), direction=GT, type=TOTALORDER
}

%compare-value-and-index.45 (p.0.lhs.155: bf16[], p.0.rhs.155: bf16[], p.1.lhs.155: s32[], p.1.rhs.155: s32[]) -> pred[] {
  %p.0.lhs.155 = bf16[] parameter(0)
  %p.0.rhs.155 = bf16[] parameter(1)
  %compare.622 = pred[] compare(%p.0.lhs.155, %p.0.rhs.155), direction=EQ, type=TOTALORDER
  %p.1.lhs.155 = s32[] parameter(2)
  %p.1.rhs.155 = s32[] parameter(3)
  %compare.623 = pred[] compare(%p.1.lhs.155, %p.1.rhs.155), direction=LT
  %compare.621 = pred[] compare(%p.0.lhs.155, %p.0.rhs.155), direction=GT
  ROOT %select.306 = pred[] select(%compare.622, %compare.623, %compare.621)
}

%region_695.18911 (Arg_0.18909: u32[], Arg_1.18910: u32[]) -> u32[] {
  %Arg_0.18909 = u32[] parameter(0)
  ROOT %Arg_1.18910 = u32[] parameter(1)
}

%region_693.18861 (Arg_0.18858: f32[], Arg_1.18859: f32[]) -> f32[] {
  %Arg_0.18858 = f32[] parameter(0)
  %Arg_1.18859 = f32[] parameter(1)
  ROOT %maximum.18860 = f32[] maximum(%Arg_0.18858, %Arg_1.18859)
}

%region_694.18873 (Arg_0.18870: f32[], Arg_1.18871: f32[]) -> f32[] {
  %Arg_0.18870 = f32[] parameter(0)
  %Arg_1.18871 = f32[] parameter(1)
  ROOT %add.18872 = f32[] add(%Arg_0.18870, %Arg_1.18871)
}

%region_696.18920 (Arg_0.18917: bf16[], Arg_1.18918: bf16[]) -> bf16[] {
  %Arg_0.18917 = bf16[] parameter(0)
  %Arg_1.18918 = bf16[] parameter(1)
  ROOT %add.18919 = bf16[] add(%Arg_0.18917, %Arg_1.18918)
}

%region_9.1439.clone.clone.12 (Arg_0.320: s32[], Arg_1.107: s32[]) -> s32[] {
  %Arg_0.320 = s32[] parameter(0)
  %Arg_1.107 = s32[] parameter(1)
  ROOT %add.75 = s32[] add(%Arg_0.320, %Arg_1.107)
}

%region_697.18934 (Arg_0.18931: s32[], Arg_1.18932: s32[]) -> s32[] {
  %Arg_0.18931 = s32[] parameter(0)
  %Arg_1.18932 = s32[] parameter(1)
  ROOT %add.18933 = s32[] add(%Arg_0.18931, %Arg_1.18932)
}

%region_698.18943 (Arg_0.18940: s32[], Arg_1.18941: s32[]) -> s32[] {
  %Arg_0.18940 = s32[] parameter(0)
  %Arg_1.18941 = s32[] parameter(1)
  ROOT %add.18942 = s32[] add(%Arg_0.18940, %Arg_1.18941)
}

%region_701.19028 (Arg_0.19025: pred[], Arg_1.19026: pred[]) -> pred[] {
  %Arg_0.19025 = pred[] parameter(0)
  %Arg_1.19026 = pred[] parameter(1)
  ROOT %and.19027 = pred[] and(%Arg_0.19025, %Arg_1.19026)
}

%region_699.19010 (Arg_0.19007: bf16[], Arg_1.19008: bf16[]) -> bf16[] {
  %Arg_0.19007 = bf16[] parameter(0)
  %Arg_1.19008 = bf16[] parameter(1)
  ROOT %add.19009 = bf16[] add(%Arg_0.19007, %Arg_1.19008)
}

%region_702.19042 (Arg_0.19039: f32[], Arg_1.19040: f32[]) -> f32[] {
  %Arg_0.19039 = f32[] parameter(0)
  %Arg_1.19040 = f32[] parameter(1)
  ROOT %add.19041 = f32[] add(%Arg_0.19039, %Arg_1.19040)
}

%region_704.19062 (Arg_0.19059: bf16[], Arg_1.19060: bf16[]) -> bf16[] {
  %Arg_0.19059 = bf16[] parameter(0)
  %Arg_1.19060 = bf16[] parameter(1)
  ROOT %add.19061 = bf16[] add(%Arg_0.19059, %Arg_1.19060)
}

%region_707.19091 (Arg_0.19088: f32[], Arg_1.19089: f32[]) -> f32[] {
  %Arg_0.19088 = f32[] parameter(0)
  %Arg_1.19089 = f32[] parameter(1)
  ROOT %add.19090 = f32[] add(%Arg_0.19088, %Arg_1.19089)
}

%region_711.19202 (Arg_0.19199: f32[], Arg_1.19200: f32[]) -> f32[] {
  %Arg_0.19199 = f32[] parameter(0)
  %Arg_1.19200 = f32[] parameter(1)
  ROOT %add.19201 = f32[] add(%Arg_0.19199, %Arg_1.19200)
}

%region_713.19245 (Arg_0.19242: f32[], Arg_1.19243: f32[]) -> f32[] {
  %Arg_0.19242 = f32[] parameter(0)
  %Arg_1.19243 = f32[] parameter(1)
  ROOT %add.19244 = f32[] add(%Arg_0.19242, %Arg_1.19243)
}

%region_714.19379 (Arg_0.19376: s32[], Arg_1.19377: s32[]) -> s32[] {
  %Arg_0.19376 = s32[] parameter(0)
  %Arg_1.19377 = s32[] parameter(1)
  ROOT %add.19378 = s32[] add(%Arg_0.19376, %Arg_1.19377)
}

%region_715.19387 (Arg_0.19384: s32[], Arg_1.19385: s32[]) -> s32[] {
  %Arg_0.19384 = s32[] parameter(0)
  %Arg_1.19385 = s32[] parameter(1)
  ROOT %add.19386 = s32[] add(%Arg_0.19384, %Arg_1.19385)
}

%region_716.19392 (Arg_0.19389: s32[], Arg_1.19390: s32[]) -> s32[] {
  %Arg_0.19389 = s32[] parameter(0)
  %Arg_1.19390 = s32[] parameter(1)
  ROOT %maximum.19391 = s32[] maximum(%Arg_0.19389, %Arg_1.19390)
}

%region_6.178._custom_call_lowering_rule.46 (Arg_0.1198: s32[], Arg_1.886: s32[]) -> s32[] {
  %Arg_0.1198 = s32[] parameter(0)
  ROOT %Arg_1.886 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.46 (Arg_0.1203: s32[], Arg_1.891: s32[]) -> s32[] {
  %Arg_0.1203 = s32[] parameter(0)
  ROOT %Arg_1.891 = s32[] parameter(1)
}

%region_717.19408 (Arg_0.19405: f32[], Arg_1.19406: f32[]) -> f32[] {
  %Arg_0.19405 = f32[] parameter(0)
  %Arg_1.19406 = f32[] parameter(1)
  ROOT %add.19407 = f32[] add(%Arg_0.19405, %Arg_1.19406)
}

%compare-greater-than.46.clone (p.0.lhs.156: bf16[], p.0.rhs.156: bf16[], p.1.lhs.156: s32[], p.1.rhs.156: s32[]) -> pred[] {
  %p.1.lhs.156 = s32[] parameter(2)
  %p.1.rhs.156 = s32[] parameter(3)
  %p.0.lhs.156 = bf16[] parameter(0)
  %p.0.rhs.156 = bf16[] parameter(1)
  ROOT %compare.626 = pred[] compare(%p.0.lhs.156, %p.0.rhs.156), direction=GT, type=TOTALORDER
}

%compare-value-and-index.46 (p.0.lhs.157: bf16[], p.0.rhs.157: bf16[], p.1.lhs.157: s32[], p.1.rhs.157: s32[]) -> pred[] {
  %p.0.lhs.157 = bf16[] parameter(0)
  %p.0.rhs.157 = bf16[] parameter(1)
  %compare.628 = pred[] compare(%p.0.lhs.157, %p.0.rhs.157), direction=EQ, type=TOTALORDER
  %p.1.lhs.157 = s32[] parameter(2)
  %p.1.rhs.157 = s32[] parameter(3)
  %compare.629 = pred[] compare(%p.1.lhs.157, %p.1.rhs.157), direction=LT
  %compare.627 = pred[] compare(%p.0.lhs.157, %p.0.rhs.157), direction=GT
  ROOT %select.307 = pred[] select(%compare.628, %compare.629, %compare.627)
}

%region_720.19487 (Arg_0.19485: u32[], Arg_1.19486: u32[]) -> u32[] {
  %Arg_0.19485 = u32[] parameter(0)
  ROOT %Arg_1.19486 = u32[] parameter(1)
}

%region_718.19437 (Arg_0.19434: f32[], Arg_1.19435: f32[]) -> f32[] {
  %Arg_0.19434 = f32[] parameter(0)
  %Arg_1.19435 = f32[] parameter(1)
  ROOT %maximum.19436 = f32[] maximum(%Arg_0.19434, %Arg_1.19435)
}

%region_719.19449 (Arg_0.19446: f32[], Arg_1.19447: f32[]) -> f32[] {
  %Arg_0.19446 = f32[] parameter(0)
  %Arg_1.19447 = f32[] parameter(1)
  ROOT %add.19448 = f32[] add(%Arg_0.19446, %Arg_1.19447)
}

%region_721.19496 (Arg_0.19493: bf16[], Arg_1.19494: bf16[]) -> bf16[] {
  %Arg_0.19493 = bf16[] parameter(0)
  %Arg_1.19494 = bf16[] parameter(1)
  ROOT %add.19495 = bf16[] add(%Arg_0.19493, %Arg_1.19494)
}

%region_9.1439.clone.clone.13 (Arg_0.323: s32[], Arg_1.108: s32[]) -> s32[] {
  %Arg_0.323 = s32[] parameter(0)
  %Arg_1.108 = s32[] parameter(1)
  ROOT %add.76 = s32[] add(%Arg_0.323, %Arg_1.108)
}

%region_722.19510 (Arg_0.19507: s32[], Arg_1.19508: s32[]) -> s32[] {
  %Arg_0.19507 = s32[] parameter(0)
  %Arg_1.19508 = s32[] parameter(1)
  ROOT %add.19509 = s32[] add(%Arg_0.19507, %Arg_1.19508)
}

%region_723.19519 (Arg_0.19516: s32[], Arg_1.19517: s32[]) -> s32[] {
  %Arg_0.19516 = s32[] parameter(0)
  %Arg_1.19517 = s32[] parameter(1)
  ROOT %add.19518 = s32[] add(%Arg_0.19516, %Arg_1.19517)
}

%region_726.19604 (Arg_0.19601: pred[], Arg_1.19602: pred[]) -> pred[] {
  %Arg_0.19601 = pred[] parameter(0)
  %Arg_1.19602 = pred[] parameter(1)
  ROOT %and.19603 = pred[] and(%Arg_0.19601, %Arg_1.19602)
}

%region_724.19586 (Arg_0.19583: bf16[], Arg_1.19584: bf16[]) -> bf16[] {
  %Arg_0.19583 = bf16[] parameter(0)
  %Arg_1.19584 = bf16[] parameter(1)
  ROOT %add.19585 = bf16[] add(%Arg_0.19583, %Arg_1.19584)
}

%region_727.19618 (Arg_0.19615: f32[], Arg_1.19616: f32[]) -> f32[] {
  %Arg_0.19615 = f32[] parameter(0)
  %Arg_1.19616 = f32[] parameter(1)
  ROOT %add.19617 = f32[] add(%Arg_0.19615, %Arg_1.19616)
}

%region_729.19638 (Arg_0.19635: bf16[], Arg_1.19636: bf16[]) -> bf16[] {
  %Arg_0.19635 = bf16[] parameter(0)
  %Arg_1.19636 = bf16[] parameter(1)
  ROOT %add.19637 = bf16[] add(%Arg_0.19635, %Arg_1.19636)
}

%region_732.19667 (Arg_0.19664: f32[], Arg_1.19665: f32[]) -> f32[] {
  %Arg_0.19664 = f32[] parameter(0)
  %Arg_1.19665 = f32[] parameter(1)
  ROOT %add.19666 = f32[] add(%Arg_0.19664, %Arg_1.19665)
}

%region_736.19778 (Arg_0.19775: f32[], Arg_1.19776: f32[]) -> f32[] {
  %Arg_0.19775 = f32[] parameter(0)
  %Arg_1.19776 = f32[] parameter(1)
  ROOT %add.19777 = f32[] add(%Arg_0.19775, %Arg_1.19776)
}

%region_738.19821 (Arg_0.19818: f32[], Arg_1.19819: f32[]) -> f32[] {
  %Arg_0.19818 = f32[] parameter(0)
  %Arg_1.19819 = f32[] parameter(1)
  ROOT %add.19820 = f32[] add(%Arg_0.19818, %Arg_1.19819)
}

%region_739.19955 (Arg_0.19952: s32[], Arg_1.19953: s32[]) -> s32[] {
  %Arg_0.19952 = s32[] parameter(0)
  %Arg_1.19953 = s32[] parameter(1)
  ROOT %add.19954 = s32[] add(%Arg_0.19952, %Arg_1.19953)
}

%region_740.19963 (Arg_0.19960: s32[], Arg_1.19961: s32[]) -> s32[] {
  %Arg_0.19960 = s32[] parameter(0)
  %Arg_1.19961 = s32[] parameter(1)
  ROOT %add.19962 = s32[] add(%Arg_0.19960, %Arg_1.19961)
}

%region_741.19968 (Arg_0.19965: s32[], Arg_1.19966: s32[]) -> s32[] {
  %Arg_0.19965 = s32[] parameter(0)
  %Arg_1.19966 = s32[] parameter(1)
  ROOT %maximum.19967 = s32[] maximum(%Arg_0.19965, %Arg_1.19966)
}

%region_6.178._custom_call_lowering_rule.47 (Arg_0.1222: s32[], Arg_1.910: s32[]) -> s32[] {
  %Arg_0.1222 = s32[] parameter(0)
  ROOT %Arg_1.910 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.47 (Arg_0.1227: s32[], Arg_1.915: s32[]) -> s32[] {
  %Arg_0.1227 = s32[] parameter(0)
  ROOT %Arg_1.915 = s32[] parameter(1)
}

%region_742.19984 (Arg_0.19981: f32[], Arg_1.19982: f32[]) -> f32[] {
  %Arg_0.19981 = f32[] parameter(0)
  %Arg_1.19982 = f32[] parameter(1)
  ROOT %add.19983 = f32[] add(%Arg_0.19981, %Arg_1.19982)
}

%compare-greater-than.47.clone (p.0.lhs.158: bf16[], p.0.rhs.158: bf16[], p.1.lhs.158: s32[], p.1.rhs.158: s32[]) -> pred[] {
  %p.1.lhs.158 = s32[] parameter(2)
  %p.1.rhs.158 = s32[] parameter(3)
  %p.0.lhs.158 = bf16[] parameter(0)
  %p.0.rhs.158 = bf16[] parameter(1)
  ROOT %compare.632 = pred[] compare(%p.0.lhs.158, %p.0.rhs.158), direction=GT, type=TOTALORDER
}

%compare-value-and-index.47 (p.0.lhs.159: bf16[], p.0.rhs.159: bf16[], p.1.lhs.159: s32[], p.1.rhs.159: s32[]) -> pred[] {
  %p.0.lhs.159 = bf16[] parameter(0)
  %p.0.rhs.159 = bf16[] parameter(1)
  %compare.634 = pred[] compare(%p.0.lhs.159, %p.0.rhs.159), direction=EQ, type=TOTALORDER
  %p.1.lhs.159 = s32[] parameter(2)
  %p.1.rhs.159 = s32[] parameter(3)
  %compare.635 = pred[] compare(%p.1.lhs.159, %p.1.rhs.159), direction=LT
  %compare.633 = pred[] compare(%p.0.lhs.159, %p.0.rhs.159), direction=GT
  ROOT %select.308 = pred[] select(%compare.634, %compare.635, %compare.633)
}

%region_745.20063 (Arg_0.20061: u32[], Arg_1.20062: u32[]) -> u32[] {
  %Arg_0.20061 = u32[] parameter(0)
  ROOT %Arg_1.20062 = u32[] parameter(1)
}

%region_743.20013 (Arg_0.20010: f32[], Arg_1.20011: f32[]) -> f32[] {
  %Arg_0.20010 = f32[] parameter(0)
  %Arg_1.20011 = f32[] parameter(1)
  ROOT %maximum.20012 = f32[] maximum(%Arg_0.20010, %Arg_1.20011)
}

%region_744.20025 (Arg_0.20022: f32[], Arg_1.20023: f32[]) -> f32[] {
  %Arg_0.20022 = f32[] parameter(0)
  %Arg_1.20023 = f32[] parameter(1)
  ROOT %add.20024 = f32[] add(%Arg_0.20022, %Arg_1.20023)
}

%region_746.20072 (Arg_0.20069: bf16[], Arg_1.20070: bf16[]) -> bf16[] {
  %Arg_0.20069 = bf16[] parameter(0)
  %Arg_1.20070 = bf16[] parameter(1)
  ROOT %add.20071 = bf16[] add(%Arg_0.20069, %Arg_1.20070)
}

%region_9.1439.clone.clone.14 (Arg_0.326: s32[], Arg_1.109: s32[]) -> s32[] {
  %Arg_0.326 = s32[] parameter(0)
  %Arg_1.109 = s32[] parameter(1)
  ROOT %add.77 = s32[] add(%Arg_0.326, %Arg_1.109)
}

%region_747.20086 (Arg_0.20083: s32[], Arg_1.20084: s32[]) -> s32[] {
  %Arg_0.20083 = s32[] parameter(0)
  %Arg_1.20084 = s32[] parameter(1)
  ROOT %add.20085 = s32[] add(%Arg_0.20083, %Arg_1.20084)
}

%region_748.20095 (Arg_0.20092: s32[], Arg_1.20093: s32[]) -> s32[] {
  %Arg_0.20092 = s32[] parameter(0)
  %Arg_1.20093 = s32[] parameter(1)
  ROOT %add.20094 = s32[] add(%Arg_0.20092, %Arg_1.20093)
}

%region_751.20180 (Arg_0.20177: pred[], Arg_1.20178: pred[]) -> pred[] {
  %Arg_0.20177 = pred[] parameter(0)
  %Arg_1.20178 = pred[] parameter(1)
  ROOT %and.20179 = pred[] and(%Arg_0.20177, %Arg_1.20178)
}

%region_749.20162 (Arg_0.20159: bf16[], Arg_1.20160: bf16[]) -> bf16[] {
  %Arg_0.20159 = bf16[] parameter(0)
  %Arg_1.20160 = bf16[] parameter(1)
  ROOT %add.20161 = bf16[] add(%Arg_0.20159, %Arg_1.20160)
}

%region_752.20194 (Arg_0.20191: f32[], Arg_1.20192: f32[]) -> f32[] {
  %Arg_0.20191 = f32[] parameter(0)
  %Arg_1.20192 = f32[] parameter(1)
  ROOT %add.20193 = f32[] add(%Arg_0.20191, %Arg_1.20192)
}

%region_754.20214 (Arg_0.20211: bf16[], Arg_1.20212: bf16[]) -> bf16[] {
  %Arg_0.20211 = bf16[] parameter(0)
  %Arg_1.20212 = bf16[] parameter(1)
  ROOT %add.20213 = bf16[] add(%Arg_0.20211, %Arg_1.20212)
}

%region_757.20243 (Arg_0.20240: f32[], Arg_1.20241: f32[]) -> f32[] {
  %Arg_0.20240 = f32[] parameter(0)
  %Arg_1.20241 = f32[] parameter(1)
  ROOT %add.20242 = f32[] add(%Arg_0.20240, %Arg_1.20241)
}

%region_761.20354 (Arg_0.20351: f32[], Arg_1.20352: f32[]) -> f32[] {
  %Arg_0.20351 = f32[] parameter(0)
  %Arg_1.20352 = f32[] parameter(1)
  ROOT %add.20353 = f32[] add(%Arg_0.20351, %Arg_1.20352)
}

%region_763.20397 (Arg_0.20394: f32[], Arg_1.20395: f32[]) -> f32[] {
  %Arg_0.20394 = f32[] parameter(0)
  %Arg_1.20395 = f32[] parameter(1)
  ROOT %add.20396 = f32[] add(%Arg_0.20394, %Arg_1.20395)
}

%region_764.20531 (Arg_0.20528: s32[], Arg_1.20529: s32[]) -> s32[] {
  %Arg_0.20528 = s32[] parameter(0)
  %Arg_1.20529 = s32[] parameter(1)
  ROOT %add.20530 = s32[] add(%Arg_0.20528, %Arg_1.20529)
}

%region_765.20539 (Arg_0.20536: s32[], Arg_1.20537: s32[]) -> s32[] {
  %Arg_0.20536 = s32[] parameter(0)
  %Arg_1.20537 = s32[] parameter(1)
  ROOT %add.20538 = s32[] add(%Arg_0.20536, %Arg_1.20537)
}

%region_766.20544 (Arg_0.20541: s32[], Arg_1.20542: s32[]) -> s32[] {
  %Arg_0.20541 = s32[] parameter(0)
  %Arg_1.20542 = s32[] parameter(1)
  ROOT %maximum.20543 = s32[] maximum(%Arg_0.20541, %Arg_1.20542)
}

%region_6.178._custom_call_lowering_rule.48 (Arg_0.1246: s32[], Arg_1.934: s32[]) -> s32[] {
  %Arg_0.1246 = s32[] parameter(0)
  ROOT %Arg_1.934 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.48 (Arg_0.1251: s32[], Arg_1.939: s32[]) -> s32[] {
  %Arg_0.1251 = s32[] parameter(0)
  ROOT %Arg_1.939 = s32[] parameter(1)
}

%region_767.20560 (Arg_0.20557: f32[], Arg_1.20558: f32[]) -> f32[] {
  %Arg_0.20557 = f32[] parameter(0)
  %Arg_1.20558 = f32[] parameter(1)
  ROOT %add.20559 = f32[] add(%Arg_0.20557, %Arg_1.20558)
}

%compare-greater-than.48.clone (p.0.lhs.160: bf16[], p.0.rhs.160: bf16[], p.1.lhs.160: s32[], p.1.rhs.160: s32[]) -> pred[] {
  %p.1.lhs.160 = s32[] parameter(2)
  %p.1.rhs.160 = s32[] parameter(3)
  %p.0.lhs.160 = bf16[] parameter(0)
  %p.0.rhs.160 = bf16[] parameter(1)
  ROOT %compare.638 = pred[] compare(%p.0.lhs.160, %p.0.rhs.160), direction=GT, type=TOTALORDER
}

%compare-value-and-index.48 (p.0.lhs.161: bf16[], p.0.rhs.161: bf16[], p.1.lhs.161: s32[], p.1.rhs.161: s32[]) -> pred[] {
  %p.0.lhs.161 = bf16[] parameter(0)
  %p.0.rhs.161 = bf16[] parameter(1)
  %compare.640 = pred[] compare(%p.0.lhs.161, %p.0.rhs.161), direction=EQ, type=TOTALORDER
  %p.1.lhs.161 = s32[] parameter(2)
  %p.1.rhs.161 = s32[] parameter(3)
  %compare.641 = pred[] compare(%p.1.lhs.161, %p.1.rhs.161), direction=LT
  %compare.639 = pred[] compare(%p.0.lhs.161, %p.0.rhs.161), direction=GT
  ROOT %select.309 = pred[] select(%compare.640, %compare.641, %compare.639)
}

%region_770.20639 (Arg_0.20637: u32[], Arg_1.20638: u32[]) -> u32[] {
  %Arg_0.20637 = u32[] parameter(0)
  ROOT %Arg_1.20638 = u32[] parameter(1)
}

%region_768.20589 (Arg_0.20586: f32[], Arg_1.20587: f32[]) -> f32[] {
  %Arg_0.20586 = f32[] parameter(0)
  %Arg_1.20587 = f32[] parameter(1)
  ROOT %maximum.20588 = f32[] maximum(%Arg_0.20586, %Arg_1.20587)
}

%region_769.20601 (Arg_0.20598: f32[], Arg_1.20599: f32[]) -> f32[] {
  %Arg_0.20598 = f32[] parameter(0)
  %Arg_1.20599 = f32[] parameter(1)
  ROOT %add.20600 = f32[] add(%Arg_0.20598, %Arg_1.20599)
}

%region_771.20648 (Arg_0.20645: bf16[], Arg_1.20646: bf16[]) -> bf16[] {
  %Arg_0.20645 = bf16[] parameter(0)
  %Arg_1.20646 = bf16[] parameter(1)
  ROOT %add.20647 = bf16[] add(%Arg_0.20645, %Arg_1.20646)
}

%region_9.1439.clone.clone.15 (Arg_0.329: s32[], Arg_1.110: s32[]) -> s32[] {
  %Arg_0.329 = s32[] parameter(0)
  %Arg_1.110 = s32[] parameter(1)
  ROOT %add.78 = s32[] add(%Arg_0.329, %Arg_1.110)
}

%region_772.20662 (Arg_0.20659: s32[], Arg_1.20660: s32[]) -> s32[] {
  %Arg_0.20659 = s32[] parameter(0)
  %Arg_1.20660 = s32[] parameter(1)
  ROOT %add.20661 = s32[] add(%Arg_0.20659, %Arg_1.20660)
}

%region_773.20671 (Arg_0.20668: s32[], Arg_1.20669: s32[]) -> s32[] {
  %Arg_0.20668 = s32[] parameter(0)
  %Arg_1.20669 = s32[] parameter(1)
  ROOT %add.20670 = s32[] add(%Arg_0.20668, %Arg_1.20669)
}

%region_776.20756 (Arg_0.20753: pred[], Arg_1.20754: pred[]) -> pred[] {
  %Arg_0.20753 = pred[] parameter(0)
  %Arg_1.20754 = pred[] parameter(1)
  ROOT %and.20755 = pred[] and(%Arg_0.20753, %Arg_1.20754)
}

%region_774.20738 (Arg_0.20735: bf16[], Arg_1.20736: bf16[]) -> bf16[] {
  %Arg_0.20735 = bf16[] parameter(0)
  %Arg_1.20736 = bf16[] parameter(1)
  ROOT %add.20737 = bf16[] add(%Arg_0.20735, %Arg_1.20736)
}

%region_777.20770 (Arg_0.20767: f32[], Arg_1.20768: f32[]) -> f32[] {
  %Arg_0.20767 = f32[] parameter(0)
  %Arg_1.20768 = f32[] parameter(1)
  ROOT %add.20769 = f32[] add(%Arg_0.20767, %Arg_1.20768)
}

%region_779.20790 (Arg_0.20787: bf16[], Arg_1.20788: bf16[]) -> bf16[] {
  %Arg_0.20787 = bf16[] parameter(0)
  %Arg_1.20788 = bf16[] parameter(1)
  ROOT %add.20789 = bf16[] add(%Arg_0.20787, %Arg_1.20788)
}

%region_782.20819 (Arg_0.20816: f32[], Arg_1.20817: f32[]) -> f32[] {
  %Arg_0.20816 = f32[] parameter(0)
  %Arg_1.20817 = f32[] parameter(1)
  ROOT %add.20818 = f32[] add(%Arg_0.20816, %Arg_1.20817)
}

%region_786.20930 (Arg_0.20927: f32[], Arg_1.20928: f32[]) -> f32[] {
  %Arg_0.20927 = f32[] parameter(0)
  %Arg_1.20928 = f32[] parameter(1)
  ROOT %add.20929 = f32[] add(%Arg_0.20927, %Arg_1.20928)
}

%region_788.20973 (Arg_0.20970: f32[], Arg_1.20971: f32[]) -> f32[] {
  %Arg_0.20970 = f32[] parameter(0)
  %Arg_1.20971 = f32[] parameter(1)
  ROOT %add.20972 = f32[] add(%Arg_0.20970, %Arg_1.20971)
}

%region_789.21107 (Arg_0.21104: s32[], Arg_1.21105: s32[]) -> s32[] {
  %Arg_0.21104 = s32[] parameter(0)
  %Arg_1.21105 = s32[] parameter(1)
  ROOT %add.21106 = s32[] add(%Arg_0.21104, %Arg_1.21105)
}

%region_790.21115 (Arg_0.21112: s32[], Arg_1.21113: s32[]) -> s32[] {
  %Arg_0.21112 = s32[] parameter(0)
  %Arg_1.21113 = s32[] parameter(1)
  ROOT %add.21114 = s32[] add(%Arg_0.21112, %Arg_1.21113)
}

%region_791.21120 (Arg_0.21117: s32[], Arg_1.21118: s32[]) -> s32[] {
  %Arg_0.21117 = s32[] parameter(0)
  %Arg_1.21118 = s32[] parameter(1)
  ROOT %maximum.21119 = s32[] maximum(%Arg_0.21117, %Arg_1.21118)
}

%region_6.178._custom_call_lowering_rule.49 (Arg_0.1270: s32[], Arg_1.958: s32[]) -> s32[] {
  %Arg_0.1270 = s32[] parameter(0)
  ROOT %Arg_1.958 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.49 (Arg_0.1275: s32[], Arg_1.963: s32[]) -> s32[] {
  %Arg_0.1275 = s32[] parameter(0)
  ROOT %Arg_1.963 = s32[] parameter(1)
}

%region_792.21136 (Arg_0.21133: f32[], Arg_1.21134: f32[]) -> f32[] {
  %Arg_0.21133 = f32[] parameter(0)
  %Arg_1.21134 = f32[] parameter(1)
  ROOT %add.21135 = f32[] add(%Arg_0.21133, %Arg_1.21134)
}

%compare-greater-than.49.clone (p.0.lhs.162: bf16[], p.0.rhs.162: bf16[], p.1.lhs.162: s32[], p.1.rhs.162: s32[]) -> pred[] {
  %p.1.lhs.162 = s32[] parameter(2)
  %p.1.rhs.162 = s32[] parameter(3)
  %p.0.lhs.162 = bf16[] parameter(0)
  %p.0.rhs.162 = bf16[] parameter(1)
  ROOT %compare.644 = pred[] compare(%p.0.lhs.162, %p.0.rhs.162), direction=GT, type=TOTALORDER
}

%compare-value-and-index.49 (p.0.lhs.163: bf16[], p.0.rhs.163: bf16[], p.1.lhs.163: s32[], p.1.rhs.163: s32[]) -> pred[] {
  %p.0.lhs.163 = bf16[] parameter(0)
  %p.0.rhs.163 = bf16[] parameter(1)
  %compare.646 = pred[] compare(%p.0.lhs.163, %p.0.rhs.163), direction=EQ, type=TOTALORDER
  %p.1.lhs.163 = s32[] parameter(2)
  %p.1.rhs.163 = s32[] parameter(3)
  %compare.647 = pred[] compare(%p.1.lhs.163, %p.1.rhs.163), direction=LT
  %compare.645 = pred[] compare(%p.0.lhs.163, %p.0.rhs.163), direction=GT
  ROOT %select.310 = pred[] select(%compare.646, %compare.647, %compare.645)
}

%region_795.21215 (Arg_0.21213: u32[], Arg_1.21214: u32[]) -> u32[] {
  %Arg_0.21213 = u32[] parameter(0)
  ROOT %Arg_1.21214 = u32[] parameter(1)
}

%region_793.21165 (Arg_0.21162: f32[], Arg_1.21163: f32[]) -> f32[] {
  %Arg_0.21162 = f32[] parameter(0)
  %Arg_1.21163 = f32[] parameter(1)
  ROOT %maximum.21164 = f32[] maximum(%Arg_0.21162, %Arg_1.21163)
}

%region_794.21177 (Arg_0.21174: f32[], Arg_1.21175: f32[]) -> f32[] {
  %Arg_0.21174 = f32[] parameter(0)
  %Arg_1.21175 = f32[] parameter(1)
  ROOT %add.21176 = f32[] add(%Arg_0.21174, %Arg_1.21175)
}

%region_796.21224 (Arg_0.21221: bf16[], Arg_1.21222: bf16[]) -> bf16[] {
  %Arg_0.21221 = bf16[] parameter(0)
  %Arg_1.21222 = bf16[] parameter(1)
  ROOT %add.21223 = bf16[] add(%Arg_0.21221, %Arg_1.21222)
}

%region_9.1439.clone.clone.16 (Arg_0.332: s32[], Arg_1.111: s32[]) -> s32[] {
  %Arg_0.332 = s32[] parameter(0)
  %Arg_1.111 = s32[] parameter(1)
  ROOT %add.79 = s32[] add(%Arg_0.332, %Arg_1.111)
}

%region_797.21238 (Arg_0.21235: s32[], Arg_1.21236: s32[]) -> s32[] {
  %Arg_0.21235 = s32[] parameter(0)
  %Arg_1.21236 = s32[] parameter(1)
  ROOT %add.21237 = s32[] add(%Arg_0.21235, %Arg_1.21236)
}

%region_798.21247 (Arg_0.21244: s32[], Arg_1.21245: s32[]) -> s32[] {
  %Arg_0.21244 = s32[] parameter(0)
  %Arg_1.21245 = s32[] parameter(1)
  ROOT %add.21246 = s32[] add(%Arg_0.21244, %Arg_1.21245)
}

%region_801.21332 (Arg_0.21329: pred[], Arg_1.21330: pred[]) -> pred[] {
  %Arg_0.21329 = pred[] parameter(0)
  %Arg_1.21330 = pred[] parameter(1)
  ROOT %and.21331 = pred[] and(%Arg_0.21329, %Arg_1.21330)
}

%region_799.21314 (Arg_0.21311: bf16[], Arg_1.21312: bf16[]) -> bf16[] {
  %Arg_0.21311 = bf16[] parameter(0)
  %Arg_1.21312 = bf16[] parameter(1)
  ROOT %add.21313 = bf16[] add(%Arg_0.21311, %Arg_1.21312)
}

%region_802.21346 (Arg_0.21343: f32[], Arg_1.21344: f32[]) -> f32[] {
  %Arg_0.21343 = f32[] parameter(0)
  %Arg_1.21344 = f32[] parameter(1)
  ROOT %add.21345 = f32[] add(%Arg_0.21343, %Arg_1.21344)
}

%region_804.21366 (Arg_0.21363: bf16[], Arg_1.21364: bf16[]) -> bf16[] {
  %Arg_0.21363 = bf16[] parameter(0)
  %Arg_1.21364 = bf16[] parameter(1)
  ROOT %add.21365 = bf16[] add(%Arg_0.21363, %Arg_1.21364)
}

%region_807.21395 (Arg_0.21392: f32[], Arg_1.21393: f32[]) -> f32[] {
  %Arg_0.21392 = f32[] parameter(0)
  %Arg_1.21393 = f32[] parameter(1)
  ROOT %add.21394 = f32[] add(%Arg_0.21392, %Arg_1.21393)
}

%region_811.21506 (Arg_0.21503: f32[], Arg_1.21504: f32[]) -> f32[] {
  %Arg_0.21503 = f32[] parameter(0)
  %Arg_1.21504 = f32[] parameter(1)
  ROOT %add.21505 = f32[] add(%Arg_0.21503, %Arg_1.21504)
}

%region_813.21549 (Arg_0.21546: f32[], Arg_1.21547: f32[]) -> f32[] {
  %Arg_0.21546 = f32[] parameter(0)
  %Arg_1.21547 = f32[] parameter(1)
  ROOT %add.21548 = f32[] add(%Arg_0.21546, %Arg_1.21547)
}

%region_814.21683 (Arg_0.21680: s32[], Arg_1.21681: s32[]) -> s32[] {
  %Arg_0.21680 = s32[] parameter(0)
  %Arg_1.21681 = s32[] parameter(1)
  ROOT %add.21682 = s32[] add(%Arg_0.21680, %Arg_1.21681)
}

%region_815.21691 (Arg_0.21688: s32[], Arg_1.21689: s32[]) -> s32[] {
  %Arg_0.21688 = s32[] parameter(0)
  %Arg_1.21689 = s32[] parameter(1)
  ROOT %add.21690 = s32[] add(%Arg_0.21688, %Arg_1.21689)
}

%region_816.21696 (Arg_0.21693: s32[], Arg_1.21694: s32[]) -> s32[] {
  %Arg_0.21693 = s32[] parameter(0)
  %Arg_1.21694 = s32[] parameter(1)
  ROOT %maximum.21695 = s32[] maximum(%Arg_0.21693, %Arg_1.21694)
}

%region_6.178._custom_call_lowering_rule.50 (Arg_0.1295: s32[], Arg_1.982: s32[]) -> s32[] {
  %Arg_0.1295 = s32[] parameter(0)
  ROOT %Arg_1.982 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.50 (Arg_0.1300: s32[], Arg_1.987: s32[]) -> s32[] {
  %Arg_0.1300 = s32[] parameter(0)
  ROOT %Arg_1.987 = s32[] parameter(1)
}

%region_817.21712 (Arg_0.21709: f32[], Arg_1.21710: f32[]) -> f32[] {
  %Arg_0.21709 = f32[] parameter(0)
  %Arg_1.21710 = f32[] parameter(1)
  ROOT %add.21711 = f32[] add(%Arg_0.21709, %Arg_1.21710)
}

%compare-greater-than.50.clone (p.0.lhs.164: bf16[], p.0.rhs.164: bf16[], p.1.lhs.164: s32[], p.1.rhs.164: s32[]) -> pred[] {
  %p.1.lhs.164 = s32[] parameter(2)
  %p.1.rhs.164 = s32[] parameter(3)
  %p.0.lhs.164 = bf16[] parameter(0)
  %p.0.rhs.164 = bf16[] parameter(1)
  ROOT %compare.650 = pred[] compare(%p.0.lhs.164, %p.0.rhs.164), direction=GT, type=TOTALORDER
}

%compare-value-and-index.50 (p.0.lhs.165: bf16[], p.0.rhs.165: bf16[], p.1.lhs.165: s32[], p.1.rhs.165: s32[]) -> pred[] {
  %p.0.lhs.165 = bf16[] parameter(0)
  %p.0.rhs.165 = bf16[] parameter(1)
  %compare.652 = pred[] compare(%p.0.lhs.165, %p.0.rhs.165), direction=EQ, type=TOTALORDER
  %p.1.lhs.165 = s32[] parameter(2)
  %p.1.rhs.165 = s32[] parameter(3)
  %compare.653 = pred[] compare(%p.1.lhs.165, %p.1.rhs.165), direction=LT
  %compare.651 = pred[] compare(%p.0.lhs.165, %p.0.rhs.165), direction=GT
  ROOT %select.311 = pred[] select(%compare.652, %compare.653, %compare.651)
}

%region_820.21791 (Arg_0.21789: u32[], Arg_1.21790: u32[]) -> u32[] {
  %Arg_0.21789 = u32[] parameter(0)
  ROOT %Arg_1.21790 = u32[] parameter(1)
}

%region_818.21741 (Arg_0.21738: f32[], Arg_1.21739: f32[]) -> f32[] {
  %Arg_0.21738 = f32[] parameter(0)
  %Arg_1.21739 = f32[] parameter(1)
  ROOT %maximum.21740 = f32[] maximum(%Arg_0.21738, %Arg_1.21739)
}

%region_819.21753 (Arg_0.21750: f32[], Arg_1.21751: f32[]) -> f32[] {
  %Arg_0.21750 = f32[] parameter(0)
  %Arg_1.21751 = f32[] parameter(1)
  ROOT %add.21752 = f32[] add(%Arg_0.21750, %Arg_1.21751)
}

%region_821.21800 (Arg_0.21797: bf16[], Arg_1.21798: bf16[]) -> bf16[] {
  %Arg_0.21797 = bf16[] parameter(0)
  %Arg_1.21798 = bf16[] parameter(1)
  ROOT %add.21799 = bf16[] add(%Arg_0.21797, %Arg_1.21798)
}

%region_9.1439.clone.clone.17 (Arg_0.335: s32[], Arg_1.112: s32[]) -> s32[] {
  %Arg_0.335 = s32[] parameter(0)
  %Arg_1.112 = s32[] parameter(1)
  ROOT %add.80 = s32[] add(%Arg_0.335, %Arg_1.112)
}

%region_822.21814 (Arg_0.21811: s32[], Arg_1.21812: s32[]) -> s32[] {
  %Arg_0.21811 = s32[] parameter(0)
  %Arg_1.21812 = s32[] parameter(1)
  ROOT %add.21813 = s32[] add(%Arg_0.21811, %Arg_1.21812)
}

%region_823.21823 (Arg_0.21820: s32[], Arg_1.21821: s32[]) -> s32[] {
  %Arg_0.21820 = s32[] parameter(0)
  %Arg_1.21821 = s32[] parameter(1)
  ROOT %add.21822 = s32[] add(%Arg_0.21820, %Arg_1.21821)
}

%region_826.21908 (Arg_0.21905: pred[], Arg_1.21906: pred[]) -> pred[] {
  %Arg_0.21905 = pred[] parameter(0)
  %Arg_1.21906 = pred[] parameter(1)
  ROOT %and.21907 = pred[] and(%Arg_0.21905, %Arg_1.21906)
}

%region_824.21890 (Arg_0.21887: bf16[], Arg_1.21888: bf16[]) -> bf16[] {
  %Arg_0.21887 = bf16[] parameter(0)
  %Arg_1.21888 = bf16[] parameter(1)
  ROOT %add.21889 = bf16[] add(%Arg_0.21887, %Arg_1.21888)
}

%region_827.21922 (Arg_0.21919: f32[], Arg_1.21920: f32[]) -> f32[] {
  %Arg_0.21919 = f32[] parameter(0)
  %Arg_1.21920 = f32[] parameter(1)
  ROOT %add.21921 = f32[] add(%Arg_0.21919, %Arg_1.21920)
}

%region_829.21942 (Arg_0.21939: bf16[], Arg_1.21940: bf16[]) -> bf16[] {
  %Arg_0.21939 = bf16[] parameter(0)
  %Arg_1.21940 = bf16[] parameter(1)
  ROOT %add.21941 = bf16[] add(%Arg_0.21939, %Arg_1.21940)
}

%region_832.21971 (Arg_0.21968: f32[], Arg_1.21969: f32[]) -> f32[] {
  %Arg_0.21968 = f32[] parameter(0)
  %Arg_1.21969 = f32[] parameter(1)
  ROOT %add.21970 = f32[] add(%Arg_0.21968, %Arg_1.21969)
}

%region_836.22082 (Arg_0.22079: f32[], Arg_1.22080: f32[]) -> f32[] {
  %Arg_0.22079 = f32[] parameter(0)
  %Arg_1.22080 = f32[] parameter(1)
  ROOT %add.22081 = f32[] add(%Arg_0.22079, %Arg_1.22080)
}

%region_838.22125 (Arg_0.22122: f32[], Arg_1.22123: f32[]) -> f32[] {
  %Arg_0.22122 = f32[] parameter(0)
  %Arg_1.22123 = f32[] parameter(1)
  ROOT %add.22124 = f32[] add(%Arg_0.22122, %Arg_1.22123)
}

%region_839.22259 (Arg_0.22256: s32[], Arg_1.22257: s32[]) -> s32[] {
  %Arg_0.22256 = s32[] parameter(0)
  %Arg_1.22257 = s32[] parameter(1)
  ROOT %add.22258 = s32[] add(%Arg_0.22256, %Arg_1.22257)
}

%region_840.22267 (Arg_0.22264: s32[], Arg_1.22265: s32[]) -> s32[] {
  %Arg_0.22264 = s32[] parameter(0)
  %Arg_1.22265 = s32[] parameter(1)
  ROOT %add.22266 = s32[] add(%Arg_0.22264, %Arg_1.22265)
}

%region_841.22272 (Arg_0.22269: s32[], Arg_1.22270: s32[]) -> s32[] {
  %Arg_0.22269 = s32[] parameter(0)
  %Arg_1.22270 = s32[] parameter(1)
  ROOT %maximum.22271 = s32[] maximum(%Arg_0.22269, %Arg_1.22270)
}

%region_6.178._custom_call_lowering_rule.51 (Arg_0.1322: s32[], Arg_1.1006: s32[]) -> s32[] {
  %Arg_0.1322 = s32[] parameter(0)
  ROOT %Arg_1.1006 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.51 (Arg_0.1327: s32[], Arg_1.1011: s32[]) -> s32[] {
  %Arg_0.1327 = s32[] parameter(0)
  ROOT %Arg_1.1011 = s32[] parameter(1)
}

%region_842.22288 (Arg_0.22285: f32[], Arg_1.22286: f32[]) -> f32[] {
  %Arg_0.22285 = f32[] parameter(0)
  %Arg_1.22286 = f32[] parameter(1)
  ROOT %add.22287 = f32[] add(%Arg_0.22285, %Arg_1.22286)
}

%compare-greater-than.51.clone (p.0.lhs.166: bf16[], p.0.rhs.166: bf16[], p.1.lhs.166: s32[], p.1.rhs.166: s32[]) -> pred[] {
  %p.1.lhs.166 = s32[] parameter(2)
  %p.1.rhs.166 = s32[] parameter(3)
  %p.0.lhs.166 = bf16[] parameter(0)
  %p.0.rhs.166 = bf16[] parameter(1)
  ROOT %compare.656 = pred[] compare(%p.0.lhs.166, %p.0.rhs.166), direction=GT, type=TOTALORDER
}

%compare-value-and-index.51 (p.0.lhs.167: bf16[], p.0.rhs.167: bf16[], p.1.lhs.167: s32[], p.1.rhs.167: s32[]) -> pred[] {
  %p.0.lhs.167 = bf16[] parameter(0)
  %p.0.rhs.167 = bf16[] parameter(1)
  %compare.658 = pred[] compare(%p.0.lhs.167, %p.0.rhs.167), direction=EQ, type=TOTALORDER
  %p.1.lhs.167 = s32[] parameter(2)
  %p.1.rhs.167 = s32[] parameter(3)
  %compare.659 = pred[] compare(%p.1.lhs.167, %p.1.rhs.167), direction=LT
  %compare.657 = pred[] compare(%p.0.lhs.167, %p.0.rhs.167), direction=GT
  ROOT %select.312 = pred[] select(%compare.658, %compare.659, %compare.657)
}

%region_845.22367 (Arg_0.22365: u32[], Arg_1.22366: u32[]) -> u32[] {
  %Arg_0.22365 = u32[] parameter(0)
  ROOT %Arg_1.22366 = u32[] parameter(1)
}

%region_843.22317 (Arg_0.22314: f32[], Arg_1.22315: f32[]) -> f32[] {
  %Arg_0.22314 = f32[] parameter(0)
  %Arg_1.22315 = f32[] parameter(1)
  ROOT %maximum.22316 = f32[] maximum(%Arg_0.22314, %Arg_1.22315)
}

%region_844.22329 (Arg_0.22326: f32[], Arg_1.22327: f32[]) -> f32[] {
  %Arg_0.22326 = f32[] parameter(0)
  %Arg_1.22327 = f32[] parameter(1)
  ROOT %add.22328 = f32[] add(%Arg_0.22326, %Arg_1.22327)
}

%region_846.22376 (Arg_0.22373: bf16[], Arg_1.22374: bf16[]) -> bf16[] {
  %Arg_0.22373 = bf16[] parameter(0)
  %Arg_1.22374 = bf16[] parameter(1)
  ROOT %add.22375 = bf16[] add(%Arg_0.22373, %Arg_1.22374)
}

%region_9.1439.clone.clone.18 (Arg_0.338: s32[], Arg_1.113: s32[]) -> s32[] {
  %Arg_0.338 = s32[] parameter(0)
  %Arg_1.113 = s32[] parameter(1)
  ROOT %add.81 = s32[] add(%Arg_0.338, %Arg_1.113)
}

%region_847.22390 (Arg_0.22387: s32[], Arg_1.22388: s32[]) -> s32[] {
  %Arg_0.22387 = s32[] parameter(0)
  %Arg_1.22388 = s32[] parameter(1)
  ROOT %add.22389 = s32[] add(%Arg_0.22387, %Arg_1.22388)
}

%region_848.22399 (Arg_0.22396: s32[], Arg_1.22397: s32[]) -> s32[] {
  %Arg_0.22396 = s32[] parameter(0)
  %Arg_1.22397 = s32[] parameter(1)
  ROOT %add.22398 = s32[] add(%Arg_0.22396, %Arg_1.22397)
}

%region_851.22484 (Arg_0.22481: pred[], Arg_1.22482: pred[]) -> pred[] {
  %Arg_0.22481 = pred[] parameter(0)
  %Arg_1.22482 = pred[] parameter(1)
  ROOT %and.22483 = pred[] and(%Arg_0.22481, %Arg_1.22482)
}

%region_849.22466 (Arg_0.22463: bf16[], Arg_1.22464: bf16[]) -> bf16[] {
  %Arg_0.22463 = bf16[] parameter(0)
  %Arg_1.22464 = bf16[] parameter(1)
  ROOT %add.22465 = bf16[] add(%Arg_0.22463, %Arg_1.22464)
}

%region_852.22498 (Arg_0.22495: f32[], Arg_1.22496: f32[]) -> f32[] {
  %Arg_0.22495 = f32[] parameter(0)
  %Arg_1.22496 = f32[] parameter(1)
  ROOT %add.22497 = f32[] add(%Arg_0.22495, %Arg_1.22496)
}

%region_854.22518 (Arg_0.22515: bf16[], Arg_1.22516: bf16[]) -> bf16[] {
  %Arg_0.22515 = bf16[] parameter(0)
  %Arg_1.22516 = bf16[] parameter(1)
  ROOT %add.22517 = bf16[] add(%Arg_0.22515, %Arg_1.22516)
}

%region_857.22547 (Arg_0.22544: f32[], Arg_1.22545: f32[]) -> f32[] {
  %Arg_0.22544 = f32[] parameter(0)
  %Arg_1.22545 = f32[] parameter(1)
  ROOT %add.22546 = f32[] add(%Arg_0.22544, %Arg_1.22545)
}

%region_861.22658 (Arg_0.22655: f32[], Arg_1.22656: f32[]) -> f32[] {
  %Arg_0.22655 = f32[] parameter(0)
  %Arg_1.22656 = f32[] parameter(1)
  ROOT %add.22657 = f32[] add(%Arg_0.22655, %Arg_1.22656)
}

%region_863.22701 (Arg_0.22698: f32[], Arg_1.22699: f32[]) -> f32[] {
  %Arg_0.22698 = f32[] parameter(0)
  %Arg_1.22699 = f32[] parameter(1)
  ROOT %add.22700 = f32[] add(%Arg_0.22698, %Arg_1.22699)
}

%region_864.22835 (Arg_0.22832: s32[], Arg_1.22833: s32[]) -> s32[] {
  %Arg_0.22832 = s32[] parameter(0)
  %Arg_1.22833 = s32[] parameter(1)
  ROOT %add.22834 = s32[] add(%Arg_0.22832, %Arg_1.22833)
}

%region_865.22843 (Arg_0.22840: s32[], Arg_1.22841: s32[]) -> s32[] {
  %Arg_0.22840 = s32[] parameter(0)
  %Arg_1.22841 = s32[] parameter(1)
  ROOT %add.22842 = s32[] add(%Arg_0.22840, %Arg_1.22841)
}

%region_866.22848 (Arg_0.22845: s32[], Arg_1.22846: s32[]) -> s32[] {
  %Arg_0.22845 = s32[] parameter(0)
  %Arg_1.22846 = s32[] parameter(1)
  ROOT %maximum.22847 = s32[] maximum(%Arg_0.22845, %Arg_1.22846)
}

%region_6.178._custom_call_lowering_rule.52 (Arg_0.1347: s32[], Arg_1.1030: s32[]) -> s32[] {
  %Arg_0.1347 = s32[] parameter(0)
  ROOT %Arg_1.1030 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.52 (Arg_0.1352: s32[], Arg_1.1035: s32[]) -> s32[] {
  %Arg_0.1352 = s32[] parameter(0)
  ROOT %Arg_1.1035 = s32[] parameter(1)
}

%region_867.22864 (Arg_0.22861: f32[], Arg_1.22862: f32[]) -> f32[] {
  %Arg_0.22861 = f32[] parameter(0)
  %Arg_1.22862 = f32[] parameter(1)
  ROOT %add.22863 = f32[] add(%Arg_0.22861, %Arg_1.22862)
}

%compare-greater-than.52.clone (p.0.lhs.168: bf16[], p.0.rhs.168: bf16[], p.1.lhs.168: s32[], p.1.rhs.168: s32[]) -> pred[] {
  %p.1.lhs.168 = s32[] parameter(2)
  %p.1.rhs.168 = s32[] parameter(3)
  %p.0.lhs.168 = bf16[] parameter(0)
  %p.0.rhs.168 = bf16[] parameter(1)
  ROOT %compare.662 = pred[] compare(%p.0.lhs.168, %p.0.rhs.168), direction=GT, type=TOTALORDER
}

%compare-value-and-index.52 (p.0.lhs.169: bf16[], p.0.rhs.169: bf16[], p.1.lhs.169: s32[], p.1.rhs.169: s32[]) -> pred[] {
  %p.0.lhs.169 = bf16[] parameter(0)
  %p.0.rhs.169 = bf16[] parameter(1)
  %compare.664 = pred[] compare(%p.0.lhs.169, %p.0.rhs.169), direction=EQ, type=TOTALORDER
  %p.1.lhs.169 = s32[] parameter(2)
  %p.1.rhs.169 = s32[] parameter(3)
  %compare.665 = pred[] compare(%p.1.lhs.169, %p.1.rhs.169), direction=LT
  %compare.663 = pred[] compare(%p.0.lhs.169, %p.0.rhs.169), direction=GT
  ROOT %select.313 = pred[] select(%compare.664, %compare.665, %compare.663)
}

%region_870.22943 (Arg_0.22941: u32[], Arg_1.22942: u32[]) -> u32[] {
  %Arg_0.22941 = u32[] parameter(0)
  ROOT %Arg_1.22942 = u32[] parameter(1)
}

%region_868.22893 (Arg_0.22890: f32[], Arg_1.22891: f32[]) -> f32[] {
  %Arg_0.22890 = f32[] parameter(0)
  %Arg_1.22891 = f32[] parameter(1)
  ROOT %maximum.22892 = f32[] maximum(%Arg_0.22890, %Arg_1.22891)
}

%region_869.22905 (Arg_0.22902: f32[], Arg_1.22903: f32[]) -> f32[] {
  %Arg_0.22902 = f32[] parameter(0)
  %Arg_1.22903 = f32[] parameter(1)
  ROOT %add.22904 = f32[] add(%Arg_0.22902, %Arg_1.22903)
}

%region_871.22952 (Arg_0.22949: bf16[], Arg_1.22950: bf16[]) -> bf16[] {
  %Arg_0.22949 = bf16[] parameter(0)
  %Arg_1.22950 = bf16[] parameter(1)
  ROOT %add.22951 = bf16[] add(%Arg_0.22949, %Arg_1.22950)
}

%region_9.1439.clone.clone.19 (Arg_0.341: s32[], Arg_1.114: s32[]) -> s32[] {
  %Arg_0.341 = s32[] parameter(0)
  %Arg_1.114 = s32[] parameter(1)
  ROOT %add.82 = s32[] add(%Arg_0.341, %Arg_1.114)
}

%region_872.22966 (Arg_0.22963: s32[], Arg_1.22964: s32[]) -> s32[] {
  %Arg_0.22963 = s32[] parameter(0)
  %Arg_1.22964 = s32[] parameter(1)
  ROOT %add.22965 = s32[] add(%Arg_0.22963, %Arg_1.22964)
}

%region_873.22975 (Arg_0.22972: s32[], Arg_1.22973: s32[]) -> s32[] {
  %Arg_0.22972 = s32[] parameter(0)
  %Arg_1.22973 = s32[] parameter(1)
  ROOT %add.22974 = s32[] add(%Arg_0.22972, %Arg_1.22973)
}

%region_876.23060 (Arg_0.23057: pred[], Arg_1.23058: pred[]) -> pred[] {
  %Arg_0.23057 = pred[] parameter(0)
  %Arg_1.23058 = pred[] parameter(1)
  ROOT %and.23059 = pred[] and(%Arg_0.23057, %Arg_1.23058)
}

%region_874.23042 (Arg_0.23039: bf16[], Arg_1.23040: bf16[]) -> bf16[] {
  %Arg_0.23039 = bf16[] parameter(0)
  %Arg_1.23040 = bf16[] parameter(1)
  ROOT %add.23041 = bf16[] add(%Arg_0.23039, %Arg_1.23040)
}

%region_877.23074 (Arg_0.23071: f32[], Arg_1.23072: f32[]) -> f32[] {
  %Arg_0.23071 = f32[] parameter(0)
  %Arg_1.23072 = f32[] parameter(1)
  ROOT %add.23073 = f32[] add(%Arg_0.23071, %Arg_1.23072)
}

%region_879.23094 (Arg_0.23091: bf16[], Arg_1.23092: bf16[]) -> bf16[] {
  %Arg_0.23091 = bf16[] parameter(0)
  %Arg_1.23092 = bf16[] parameter(1)
  ROOT %add.23093 = bf16[] add(%Arg_0.23091, %Arg_1.23092)
}

%region_882.23123 (Arg_0.23120: f32[], Arg_1.23121: f32[]) -> f32[] {
  %Arg_0.23120 = f32[] parameter(0)
  %Arg_1.23121 = f32[] parameter(1)
  ROOT %add.23122 = f32[] add(%Arg_0.23120, %Arg_1.23121)
}

%region_886.23234 (Arg_0.23231: f32[], Arg_1.23232: f32[]) -> f32[] {
  %Arg_0.23231 = f32[] parameter(0)
  %Arg_1.23232 = f32[] parameter(1)
  ROOT %add.23233 = f32[] add(%Arg_0.23231, %Arg_1.23232)
}

%region_888.23277 (Arg_0.23274: f32[], Arg_1.23275: f32[]) -> f32[] {
  %Arg_0.23274 = f32[] parameter(0)
  %Arg_1.23275 = f32[] parameter(1)
  ROOT %add.23276 = f32[] add(%Arg_0.23274, %Arg_1.23275)
}

%region_889.23411 (Arg_0.23408: s32[], Arg_1.23409: s32[]) -> s32[] {
  %Arg_0.23408 = s32[] parameter(0)
  %Arg_1.23409 = s32[] parameter(1)
  ROOT %add.23410 = s32[] add(%Arg_0.23408, %Arg_1.23409)
}

%region_890.23419 (Arg_0.23416: s32[], Arg_1.23417: s32[]) -> s32[] {
  %Arg_0.23416 = s32[] parameter(0)
  %Arg_1.23417 = s32[] parameter(1)
  ROOT %add.23418 = s32[] add(%Arg_0.23416, %Arg_1.23417)
}

%region_891.23424 (Arg_0.23421: s32[], Arg_1.23422: s32[]) -> s32[] {
  %Arg_0.23421 = s32[] parameter(0)
  %Arg_1.23422 = s32[] parameter(1)
  ROOT %maximum.23423 = s32[] maximum(%Arg_0.23421, %Arg_1.23422)
}

%region_6.178._custom_call_lowering_rule.53 (Arg_0.1373: s32[], Arg_1.1054: s32[]) -> s32[] {
  %Arg_0.1373 = s32[] parameter(0)
  ROOT %Arg_1.1054 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.53 (Arg_0.1378: s32[], Arg_1.1059: s32[]) -> s32[] {
  %Arg_0.1378 = s32[] parameter(0)
  ROOT %Arg_1.1059 = s32[] parameter(1)
}

%region_892.23440 (Arg_0.23437: f32[], Arg_1.23438: f32[]) -> f32[] {
  %Arg_0.23437 = f32[] parameter(0)
  %Arg_1.23438 = f32[] parameter(1)
  ROOT %add.23439 = f32[] add(%Arg_0.23437, %Arg_1.23438)
}

%compare-greater-than.53.clone (p.0.lhs.170: bf16[], p.0.rhs.170: bf16[], p.1.lhs.170: s32[], p.1.rhs.170: s32[]) -> pred[] {
  %p.1.lhs.170 = s32[] parameter(2)
  %p.1.rhs.170 = s32[] parameter(3)
  %p.0.lhs.170 = bf16[] parameter(0)
  %p.0.rhs.170 = bf16[] parameter(1)
  ROOT %compare.668 = pred[] compare(%p.0.lhs.170, %p.0.rhs.170), direction=GT, type=TOTALORDER
}

%compare-value-and-index.53 (p.0.lhs.171: bf16[], p.0.rhs.171: bf16[], p.1.lhs.171: s32[], p.1.rhs.171: s32[]) -> pred[] {
  %p.0.lhs.171 = bf16[] parameter(0)
  %p.0.rhs.171 = bf16[] parameter(1)
  %compare.670 = pred[] compare(%p.0.lhs.171, %p.0.rhs.171), direction=EQ, type=TOTALORDER
  %p.1.lhs.171 = s32[] parameter(2)
  %p.1.rhs.171 = s32[] parameter(3)
  %compare.671 = pred[] compare(%p.1.lhs.171, %p.1.rhs.171), direction=LT
  %compare.669 = pred[] compare(%p.0.lhs.171, %p.0.rhs.171), direction=GT
  ROOT %select.314 = pred[] select(%compare.670, %compare.671, %compare.669)
}

%region_895.23519 (Arg_0.23517: u32[], Arg_1.23518: u32[]) -> u32[] {
  %Arg_0.23517 = u32[] parameter(0)
  ROOT %Arg_1.23518 = u32[] parameter(1)
}

%region_893.23469 (Arg_0.23466: f32[], Arg_1.23467: f32[]) -> f32[] {
  %Arg_0.23466 = f32[] parameter(0)
  %Arg_1.23467 = f32[] parameter(1)
  ROOT %maximum.23468 = f32[] maximum(%Arg_0.23466, %Arg_1.23467)
}

%region_894.23481 (Arg_0.23478: f32[], Arg_1.23479: f32[]) -> f32[] {
  %Arg_0.23478 = f32[] parameter(0)
  %Arg_1.23479 = f32[] parameter(1)
  ROOT %add.23480 = f32[] add(%Arg_0.23478, %Arg_1.23479)
}

%region_896.23528 (Arg_0.23525: bf16[], Arg_1.23526: bf16[]) -> bf16[] {
  %Arg_0.23525 = bf16[] parameter(0)
  %Arg_1.23526 = bf16[] parameter(1)
  ROOT %add.23527 = bf16[] add(%Arg_0.23525, %Arg_1.23526)
}

%region_9.1439.clone.clone.20 (Arg_0.344: s32[], Arg_1.115: s32[]) -> s32[] {
  %Arg_0.344 = s32[] parameter(0)
  %Arg_1.115 = s32[] parameter(1)
  ROOT %add.83 = s32[] add(%Arg_0.344, %Arg_1.115)
}

%region_897.23542 (Arg_0.23539: s32[], Arg_1.23540: s32[]) -> s32[] {
  %Arg_0.23539 = s32[] parameter(0)
  %Arg_1.23540 = s32[] parameter(1)
  ROOT %add.23541 = s32[] add(%Arg_0.23539, %Arg_1.23540)
}

%region_898.23551 (Arg_0.23548: s32[], Arg_1.23549: s32[]) -> s32[] {
  %Arg_0.23548 = s32[] parameter(0)
  %Arg_1.23549 = s32[] parameter(1)
  ROOT %add.23550 = s32[] add(%Arg_0.23548, %Arg_1.23549)
}

%region_901.23636 (Arg_0.23633: pred[], Arg_1.23634: pred[]) -> pred[] {
  %Arg_0.23633 = pred[] parameter(0)
  %Arg_1.23634 = pred[] parameter(1)
  ROOT %and.23635 = pred[] and(%Arg_0.23633, %Arg_1.23634)
}

%region_899.23618 (Arg_0.23615: bf16[], Arg_1.23616: bf16[]) -> bf16[] {
  %Arg_0.23615 = bf16[] parameter(0)
  %Arg_1.23616 = bf16[] parameter(1)
  ROOT %add.23617 = bf16[] add(%Arg_0.23615, %Arg_1.23616)
}

%region_902.23650 (Arg_0.23647: f32[], Arg_1.23648: f32[]) -> f32[] {
  %Arg_0.23647 = f32[] parameter(0)
  %Arg_1.23648 = f32[] parameter(1)
  ROOT %add.23649 = f32[] add(%Arg_0.23647, %Arg_1.23648)
}

%region_904.23670 (Arg_0.23667: bf16[], Arg_1.23668: bf16[]) -> bf16[] {
  %Arg_0.23667 = bf16[] parameter(0)
  %Arg_1.23668 = bf16[] parameter(1)
  ROOT %add.23669 = bf16[] add(%Arg_0.23667, %Arg_1.23668)
}

%region_907.23699 (Arg_0.23696: f32[], Arg_1.23697: f32[]) -> f32[] {
  %Arg_0.23696 = f32[] parameter(0)
  %Arg_1.23697 = f32[] parameter(1)
  ROOT %add.23698 = f32[] add(%Arg_0.23696, %Arg_1.23697)
}

%region_911.23810 (Arg_0.23807: f32[], Arg_1.23808: f32[]) -> f32[] {
  %Arg_0.23807 = f32[] parameter(0)
  %Arg_1.23808 = f32[] parameter(1)
  ROOT %add.23809 = f32[] add(%Arg_0.23807, %Arg_1.23808)
}

%region_913.23853 (Arg_0.23850: f32[], Arg_1.23851: f32[]) -> f32[] {
  %Arg_0.23850 = f32[] parameter(0)
  %Arg_1.23851 = f32[] parameter(1)
  ROOT %add.23852 = f32[] add(%Arg_0.23850, %Arg_1.23851)
}

%region_914.23987 (Arg_0.23984: s32[], Arg_1.23985: s32[]) -> s32[] {
  %Arg_0.23984 = s32[] parameter(0)
  %Arg_1.23985 = s32[] parameter(1)
  ROOT %add.23986 = s32[] add(%Arg_0.23984, %Arg_1.23985)
}

%region_915.23995 (Arg_0.23992: s32[], Arg_1.23993: s32[]) -> s32[] {
  %Arg_0.23992 = s32[] parameter(0)
  %Arg_1.23993 = s32[] parameter(1)
  ROOT %add.23994 = s32[] add(%Arg_0.23992, %Arg_1.23993)
}

%region_916.24000 (Arg_0.23997: s32[], Arg_1.23998: s32[]) -> s32[] {
  %Arg_0.23997 = s32[] parameter(0)
  %Arg_1.23998 = s32[] parameter(1)
  ROOT %maximum.23999 = s32[] maximum(%Arg_0.23997, %Arg_1.23998)
}

%region_6.178._custom_call_lowering_rule.54 (Arg_0.1397: s32[], Arg_1.1078: s32[]) -> s32[] {
  %Arg_0.1397 = s32[] parameter(0)
  ROOT %Arg_1.1078 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.54 (Arg_0.1402: s32[], Arg_1.1083: s32[]) -> s32[] {
  %Arg_0.1402 = s32[] parameter(0)
  ROOT %Arg_1.1083 = s32[] parameter(1)
}

%region_917.24016 (Arg_0.24013: f32[], Arg_1.24014: f32[]) -> f32[] {
  %Arg_0.24013 = f32[] parameter(0)
  %Arg_1.24014 = f32[] parameter(1)
  ROOT %add.24015 = f32[] add(%Arg_0.24013, %Arg_1.24014)
}

%compare-greater-than.54.clone (p.0.lhs.172: bf16[], p.0.rhs.172: bf16[], p.1.lhs.172: s32[], p.1.rhs.172: s32[]) -> pred[] {
  %p.1.lhs.172 = s32[] parameter(2)
  %p.1.rhs.172 = s32[] parameter(3)
  %p.0.lhs.172 = bf16[] parameter(0)
  %p.0.rhs.172 = bf16[] parameter(1)
  ROOT %compare.674 = pred[] compare(%p.0.lhs.172, %p.0.rhs.172), direction=GT, type=TOTALORDER
}

%compare-value-and-index.54 (p.0.lhs.173: bf16[], p.0.rhs.173: bf16[], p.1.lhs.173: s32[], p.1.rhs.173: s32[]) -> pred[] {
  %p.0.lhs.173 = bf16[] parameter(0)
  %p.0.rhs.173 = bf16[] parameter(1)
  %compare.676 = pred[] compare(%p.0.lhs.173, %p.0.rhs.173), direction=EQ, type=TOTALORDER
  %p.1.lhs.173 = s32[] parameter(2)
  %p.1.rhs.173 = s32[] parameter(3)
  %compare.677 = pred[] compare(%p.1.lhs.173, %p.1.rhs.173), direction=LT
  %compare.675 = pred[] compare(%p.0.lhs.173, %p.0.rhs.173), direction=GT
  ROOT %select.315 = pred[] select(%compare.676, %compare.677, %compare.675)
}

%region_920.24095 (Arg_0.24093: u32[], Arg_1.24094: u32[]) -> u32[] {
  %Arg_0.24093 = u32[] parameter(0)
  ROOT %Arg_1.24094 = u32[] parameter(1)
}

%region_918.24045 (Arg_0.24042: f32[], Arg_1.24043: f32[]) -> f32[] {
  %Arg_0.24042 = f32[] parameter(0)
  %Arg_1.24043 = f32[] parameter(1)
  ROOT %maximum.24044 = f32[] maximum(%Arg_0.24042, %Arg_1.24043)
}

%region_919.24057 (Arg_0.24054: f32[], Arg_1.24055: f32[]) -> f32[] {
  %Arg_0.24054 = f32[] parameter(0)
  %Arg_1.24055 = f32[] parameter(1)
  ROOT %add.24056 = f32[] add(%Arg_0.24054, %Arg_1.24055)
}

%region_921.24104 (Arg_0.24101: bf16[], Arg_1.24102: bf16[]) -> bf16[] {
  %Arg_0.24101 = bf16[] parameter(0)
  %Arg_1.24102 = bf16[] parameter(1)
  ROOT %add.24103 = bf16[] add(%Arg_0.24101, %Arg_1.24102)
}

%region_9.1439.clone.clone.21 (Arg_0.347: s32[], Arg_1.116: s32[]) -> s32[] {
  %Arg_0.347 = s32[] parameter(0)
  %Arg_1.116 = s32[] parameter(1)
  ROOT %add.84 = s32[] add(%Arg_0.347, %Arg_1.116)
}

%region_922.24118 (Arg_0.24115: s32[], Arg_1.24116: s32[]) -> s32[] {
  %Arg_0.24115 = s32[] parameter(0)
  %Arg_1.24116 = s32[] parameter(1)
  ROOT %add.24117 = s32[] add(%Arg_0.24115, %Arg_1.24116)
}

%region_923.24127 (Arg_0.24124: s32[], Arg_1.24125: s32[]) -> s32[] {
  %Arg_0.24124 = s32[] parameter(0)
  %Arg_1.24125 = s32[] parameter(1)
  ROOT %add.24126 = s32[] add(%Arg_0.24124, %Arg_1.24125)
}

%region_926.24212 (Arg_0.24209: pred[], Arg_1.24210: pred[]) -> pred[] {
  %Arg_0.24209 = pred[] parameter(0)
  %Arg_1.24210 = pred[] parameter(1)
  ROOT %and.24211 = pred[] and(%Arg_0.24209, %Arg_1.24210)
}

%region_924.24194 (Arg_0.24191: bf16[], Arg_1.24192: bf16[]) -> bf16[] {
  %Arg_0.24191 = bf16[] parameter(0)
  %Arg_1.24192 = bf16[] parameter(1)
  ROOT %add.24193 = bf16[] add(%Arg_0.24191, %Arg_1.24192)
}

%region_927.24226 (Arg_0.24223: f32[], Arg_1.24224: f32[]) -> f32[] {
  %Arg_0.24223 = f32[] parameter(0)
  %Arg_1.24224 = f32[] parameter(1)
  ROOT %add.24225 = f32[] add(%Arg_0.24223, %Arg_1.24224)
}

%region_929.24246 (Arg_0.24243: bf16[], Arg_1.24244: bf16[]) -> bf16[] {
  %Arg_0.24243 = bf16[] parameter(0)
  %Arg_1.24244 = bf16[] parameter(1)
  ROOT %add.24245 = bf16[] add(%Arg_0.24243, %Arg_1.24244)
}

%region_932.24275 (Arg_0.24272: f32[], Arg_1.24273: f32[]) -> f32[] {
  %Arg_0.24272 = f32[] parameter(0)
  %Arg_1.24273 = f32[] parameter(1)
  ROOT %add.24274 = f32[] add(%Arg_0.24272, %Arg_1.24273)
}

%region_936.24386 (Arg_0.24383: f32[], Arg_1.24384: f32[]) -> f32[] {
  %Arg_0.24383 = f32[] parameter(0)
  %Arg_1.24384 = f32[] parameter(1)
  ROOT %add.24385 = f32[] add(%Arg_0.24383, %Arg_1.24384)
}

%region_938.24429 (Arg_0.24426: f32[], Arg_1.24427: f32[]) -> f32[] {
  %Arg_0.24426 = f32[] parameter(0)
  %Arg_1.24427 = f32[] parameter(1)
  ROOT %add.24428 = f32[] add(%Arg_0.24426, %Arg_1.24427)
}

%region_939.24563 (Arg_0.24560: s32[], Arg_1.24561: s32[]) -> s32[] {
  %Arg_0.24560 = s32[] parameter(0)
  %Arg_1.24561 = s32[] parameter(1)
  ROOT %add.24562 = s32[] add(%Arg_0.24560, %Arg_1.24561)
}

%region_940.24571 (Arg_0.24568: s32[], Arg_1.24569: s32[]) -> s32[] {
  %Arg_0.24568 = s32[] parameter(0)
  %Arg_1.24569 = s32[] parameter(1)
  ROOT %add.24570 = s32[] add(%Arg_0.24568, %Arg_1.24569)
}

%region_941.24576 (Arg_0.24573: s32[], Arg_1.24574: s32[]) -> s32[] {
  %Arg_0.24573 = s32[] parameter(0)
  %Arg_1.24574 = s32[] parameter(1)
  ROOT %maximum.24575 = s32[] maximum(%Arg_0.24573, %Arg_1.24574)
}

%region_6.178._custom_call_lowering_rule.55 (Arg_0.1424: s32[], Arg_1.1102: s32[]) -> s32[] {
  %Arg_0.1424 = s32[] parameter(0)
  ROOT %Arg_1.1102 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.55 (Arg_0.1429: s32[], Arg_1.1107: s32[]) -> s32[] {
  %Arg_0.1429 = s32[] parameter(0)
  ROOT %Arg_1.1107 = s32[] parameter(1)
}

%region_942.24592 (Arg_0.24589: f32[], Arg_1.24590: f32[]) -> f32[] {
  %Arg_0.24589 = f32[] parameter(0)
  %Arg_1.24590 = f32[] parameter(1)
  ROOT %add.24591 = f32[] add(%Arg_0.24589, %Arg_1.24590)
}

%compare-greater-than.55.clone (p.0.lhs.174: bf16[], p.0.rhs.174: bf16[], p.1.lhs.174: s32[], p.1.rhs.174: s32[]) -> pred[] {
  %p.1.lhs.174 = s32[] parameter(2)
  %p.1.rhs.174 = s32[] parameter(3)
  %p.0.lhs.174 = bf16[] parameter(0)
  %p.0.rhs.174 = bf16[] parameter(1)
  ROOT %compare.680 = pred[] compare(%p.0.lhs.174, %p.0.rhs.174), direction=GT, type=TOTALORDER
}

%compare-value-and-index.55 (p.0.lhs.175: bf16[], p.0.rhs.175: bf16[], p.1.lhs.175: s32[], p.1.rhs.175: s32[]) -> pred[] {
  %p.0.lhs.175 = bf16[] parameter(0)
  %p.0.rhs.175 = bf16[] parameter(1)
  %compare.682 = pred[] compare(%p.0.lhs.175, %p.0.rhs.175), direction=EQ, type=TOTALORDER
  %p.1.lhs.175 = s32[] parameter(2)
  %p.1.rhs.175 = s32[] parameter(3)
  %compare.683 = pred[] compare(%p.1.lhs.175, %p.1.rhs.175), direction=LT
  %compare.681 = pred[] compare(%p.0.lhs.175, %p.0.rhs.175), direction=GT
  ROOT %select.316 = pred[] select(%compare.682, %compare.683, %compare.681)
}

%region_945.24671 (Arg_0.24669: u32[], Arg_1.24670: u32[]) -> u32[] {
  %Arg_0.24669 = u32[] parameter(0)
  ROOT %Arg_1.24670 = u32[] parameter(1)
}

%region_943.24621 (Arg_0.24618: f32[], Arg_1.24619: f32[]) -> f32[] {
  %Arg_0.24618 = f32[] parameter(0)
  %Arg_1.24619 = f32[] parameter(1)
  ROOT %maximum.24620 = f32[] maximum(%Arg_0.24618, %Arg_1.24619)
}

%region_944.24633 (Arg_0.24630: f32[], Arg_1.24631: f32[]) -> f32[] {
  %Arg_0.24630 = f32[] parameter(0)
  %Arg_1.24631 = f32[] parameter(1)
  ROOT %add.24632 = f32[] add(%Arg_0.24630, %Arg_1.24631)
}

%region_946.24680 (Arg_0.24677: bf16[], Arg_1.24678: bf16[]) -> bf16[] {
  %Arg_0.24677 = bf16[] parameter(0)
  %Arg_1.24678 = bf16[] parameter(1)
  ROOT %add.24679 = bf16[] add(%Arg_0.24677, %Arg_1.24678)
}

%region_9.1439.clone.clone.22 (Arg_0.350: s32[], Arg_1.117: s32[]) -> s32[] {
  %Arg_0.350 = s32[] parameter(0)
  %Arg_1.117 = s32[] parameter(1)
  ROOT %add.85 = s32[] add(%Arg_0.350, %Arg_1.117)
}

%region_947.24694 (Arg_0.24691: s32[], Arg_1.24692: s32[]) -> s32[] {
  %Arg_0.24691 = s32[] parameter(0)
  %Arg_1.24692 = s32[] parameter(1)
  ROOT %add.24693 = s32[] add(%Arg_0.24691, %Arg_1.24692)
}

%region_948.24703 (Arg_0.24700: s32[], Arg_1.24701: s32[]) -> s32[] {
  %Arg_0.24700 = s32[] parameter(0)
  %Arg_1.24701 = s32[] parameter(1)
  ROOT %add.24702 = s32[] add(%Arg_0.24700, %Arg_1.24701)
}

%region_951.24788 (Arg_0.24785: pred[], Arg_1.24786: pred[]) -> pred[] {
  %Arg_0.24785 = pred[] parameter(0)
  %Arg_1.24786 = pred[] parameter(1)
  ROOT %and.24787 = pred[] and(%Arg_0.24785, %Arg_1.24786)
}

%region_949.24770 (Arg_0.24767: bf16[], Arg_1.24768: bf16[]) -> bf16[] {
  %Arg_0.24767 = bf16[] parameter(0)
  %Arg_1.24768 = bf16[] parameter(1)
  ROOT %add.24769 = bf16[] add(%Arg_0.24767, %Arg_1.24768)
}

%region_952.24802 (Arg_0.24799: f32[], Arg_1.24800: f32[]) -> f32[] {
  %Arg_0.24799 = f32[] parameter(0)
  %Arg_1.24800 = f32[] parameter(1)
  ROOT %add.24801 = f32[] add(%Arg_0.24799, %Arg_1.24800)
}

%region_954.24822 (Arg_0.24819: bf16[], Arg_1.24820: bf16[]) -> bf16[] {
  %Arg_0.24819 = bf16[] parameter(0)
  %Arg_1.24820 = bf16[] parameter(1)
  ROOT %add.24821 = bf16[] add(%Arg_0.24819, %Arg_1.24820)
}

%region_957.24851 (Arg_0.24848: f32[], Arg_1.24849: f32[]) -> f32[] {
  %Arg_0.24848 = f32[] parameter(0)
  %Arg_1.24849 = f32[] parameter(1)
  ROOT %add.24850 = f32[] add(%Arg_0.24848, %Arg_1.24849)
}

%region_961.24962 (Arg_0.24959: f32[], Arg_1.24960: f32[]) -> f32[] {
  %Arg_0.24959 = f32[] parameter(0)
  %Arg_1.24960 = f32[] parameter(1)
  ROOT %add.24961 = f32[] add(%Arg_0.24959, %Arg_1.24960)
}

%region_963.25005 (Arg_0.25002: f32[], Arg_1.25003: f32[]) -> f32[] {
  %Arg_0.25002 = f32[] parameter(0)
  %Arg_1.25003 = f32[] parameter(1)
  ROOT %add.25004 = f32[] add(%Arg_0.25002, %Arg_1.25003)
}

%region_964.25139 (Arg_0.25136: s32[], Arg_1.25137: s32[]) -> s32[] {
  %Arg_0.25136 = s32[] parameter(0)
  %Arg_1.25137 = s32[] parameter(1)
  ROOT %add.25138 = s32[] add(%Arg_0.25136, %Arg_1.25137)
}

%region_965.25147 (Arg_0.25144: s32[], Arg_1.25145: s32[]) -> s32[] {
  %Arg_0.25144 = s32[] parameter(0)
  %Arg_1.25145 = s32[] parameter(1)
  ROOT %add.25146 = s32[] add(%Arg_0.25144, %Arg_1.25145)
}

%region_966.25152 (Arg_0.25149: s32[], Arg_1.25150: s32[]) -> s32[] {
  %Arg_0.25149 = s32[] parameter(0)
  %Arg_1.25150 = s32[] parameter(1)
  ROOT %maximum.25151 = s32[] maximum(%Arg_0.25149, %Arg_1.25150)
}

%region_6.178._custom_call_lowering_rule.56 (Arg_0.1452: s32[], Arg_1.1126: s32[]) -> s32[] {
  %Arg_0.1452 = s32[] parameter(0)
  ROOT %Arg_1.1126 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.56 (Arg_0.1457: s32[], Arg_1.1131: s32[]) -> s32[] {
  %Arg_0.1457 = s32[] parameter(0)
  ROOT %Arg_1.1131 = s32[] parameter(1)
}

%region_967.25168 (Arg_0.25165: f32[], Arg_1.25166: f32[]) -> f32[] {
  %Arg_0.25165 = f32[] parameter(0)
  %Arg_1.25166 = f32[] parameter(1)
  ROOT %add.25167 = f32[] add(%Arg_0.25165, %Arg_1.25166)
}

%compare-greater-than.56.clone (p.0.lhs.176: bf16[], p.0.rhs.176: bf16[], p.1.lhs.176: s32[], p.1.rhs.176: s32[]) -> pred[] {
  %p.1.lhs.176 = s32[] parameter(2)
  %p.1.rhs.176 = s32[] parameter(3)
  %p.0.lhs.176 = bf16[] parameter(0)
  %p.0.rhs.176 = bf16[] parameter(1)
  ROOT %compare.686 = pred[] compare(%p.0.lhs.176, %p.0.rhs.176), direction=GT, type=TOTALORDER
}

%compare-value-and-index.56 (p.0.lhs.177: bf16[], p.0.rhs.177: bf16[], p.1.lhs.177: s32[], p.1.rhs.177: s32[]) -> pred[] {
  %p.0.lhs.177 = bf16[] parameter(0)
  %p.0.rhs.177 = bf16[] parameter(1)
  %compare.688 = pred[] compare(%p.0.lhs.177, %p.0.rhs.177), direction=EQ, type=TOTALORDER
  %p.1.lhs.177 = s32[] parameter(2)
  %p.1.rhs.177 = s32[] parameter(3)
  %compare.689 = pred[] compare(%p.1.lhs.177, %p.1.rhs.177), direction=LT
  %compare.687 = pred[] compare(%p.0.lhs.177, %p.0.rhs.177), direction=GT
  ROOT %select.317 = pred[] select(%compare.688, %compare.689, %compare.687)
}

%region_970.25247 (Arg_0.25245: u32[], Arg_1.25246: u32[]) -> u32[] {
  %Arg_0.25245 = u32[] parameter(0)
  ROOT %Arg_1.25246 = u32[] parameter(1)
}

%region_968.25197 (Arg_0.25194: f32[], Arg_1.25195: f32[]) -> f32[] {
  %Arg_0.25194 = f32[] parameter(0)
  %Arg_1.25195 = f32[] parameter(1)
  ROOT %maximum.25196 = f32[] maximum(%Arg_0.25194, %Arg_1.25195)
}

%region_969.25209 (Arg_0.25206: f32[], Arg_1.25207: f32[]) -> f32[] {
  %Arg_0.25206 = f32[] parameter(0)
  %Arg_1.25207 = f32[] parameter(1)
  ROOT %add.25208 = f32[] add(%Arg_0.25206, %Arg_1.25207)
}

%region_971.25256 (Arg_0.25253: bf16[], Arg_1.25254: bf16[]) -> bf16[] {
  %Arg_0.25253 = bf16[] parameter(0)
  %Arg_1.25254 = bf16[] parameter(1)
  ROOT %add.25255 = bf16[] add(%Arg_0.25253, %Arg_1.25254)
}

%region_9.1439.clone.clone.23 (Arg_0.353: s32[], Arg_1.118: s32[]) -> s32[] {
  %Arg_0.353 = s32[] parameter(0)
  %Arg_1.118 = s32[] parameter(1)
  ROOT %add.86 = s32[] add(%Arg_0.353, %Arg_1.118)
}

%region_972.25270 (Arg_0.25267: s32[], Arg_1.25268: s32[]) -> s32[] {
  %Arg_0.25267 = s32[] parameter(0)
  %Arg_1.25268 = s32[] parameter(1)
  ROOT %add.25269 = s32[] add(%Arg_0.25267, %Arg_1.25268)
}

%region_973.25279 (Arg_0.25276: s32[], Arg_1.25277: s32[]) -> s32[] {
  %Arg_0.25276 = s32[] parameter(0)
  %Arg_1.25277 = s32[] parameter(1)
  ROOT %add.25278 = s32[] add(%Arg_0.25276, %Arg_1.25277)
}

%region_976.25364 (Arg_0.25361: pred[], Arg_1.25362: pred[]) -> pred[] {
  %Arg_0.25361 = pred[] parameter(0)
  %Arg_1.25362 = pred[] parameter(1)
  ROOT %and.25363 = pred[] and(%Arg_0.25361, %Arg_1.25362)
}

%region_974.25346 (Arg_0.25343: bf16[], Arg_1.25344: bf16[]) -> bf16[] {
  %Arg_0.25343 = bf16[] parameter(0)
  %Arg_1.25344 = bf16[] parameter(1)
  ROOT %add.25345 = bf16[] add(%Arg_0.25343, %Arg_1.25344)
}

%region_977.25378 (Arg_0.25375: f32[], Arg_1.25376: f32[]) -> f32[] {
  %Arg_0.25375 = f32[] parameter(0)
  %Arg_1.25376 = f32[] parameter(1)
  ROOT %add.25377 = f32[] add(%Arg_0.25375, %Arg_1.25376)
}

%region_979.25398 (Arg_0.25395: bf16[], Arg_1.25396: bf16[]) -> bf16[] {
  %Arg_0.25395 = bf16[] parameter(0)
  %Arg_1.25396 = bf16[] parameter(1)
  ROOT %add.25397 = bf16[] add(%Arg_0.25395, %Arg_1.25396)
}

%region_982.25427 (Arg_0.25424: f32[], Arg_1.25425: f32[]) -> f32[] {
  %Arg_0.25424 = f32[] parameter(0)
  %Arg_1.25425 = f32[] parameter(1)
  ROOT %add.25426 = f32[] add(%Arg_0.25424, %Arg_1.25425)
}

%region_986.25538 (Arg_0.25535: f32[], Arg_1.25536: f32[]) -> f32[] {
  %Arg_0.25535 = f32[] parameter(0)
  %Arg_1.25536 = f32[] parameter(1)
  ROOT %add.25537 = f32[] add(%Arg_0.25535, %Arg_1.25536)
}

%region_988.25581 (Arg_0.25578: f32[], Arg_1.25579: f32[]) -> f32[] {
  %Arg_0.25578 = f32[] parameter(0)
  %Arg_1.25579 = f32[] parameter(1)
  ROOT %add.25580 = f32[] add(%Arg_0.25578, %Arg_1.25579)
}

%region_989.25715 (Arg_0.25712: s32[], Arg_1.25713: s32[]) -> s32[] {
  %Arg_0.25712 = s32[] parameter(0)
  %Arg_1.25713 = s32[] parameter(1)
  ROOT %add.25714 = s32[] add(%Arg_0.25712, %Arg_1.25713)
}

%region_990.25723 (Arg_0.25720: s32[], Arg_1.25721: s32[]) -> s32[] {
  %Arg_0.25720 = s32[] parameter(0)
  %Arg_1.25721 = s32[] parameter(1)
  ROOT %add.25722 = s32[] add(%Arg_0.25720, %Arg_1.25721)
}

%region_991.25728 (Arg_0.25725: s32[], Arg_1.25726: s32[]) -> s32[] {
  %Arg_0.25725 = s32[] parameter(0)
  %Arg_1.25726 = s32[] parameter(1)
  ROOT %maximum.25727 = s32[] maximum(%Arg_0.25725, %Arg_1.25726)
}

%region_6.178._custom_call_lowering_rule.57 (Arg_0.1478: s32[], Arg_1.1150: s32[]) -> s32[] {
  %Arg_0.1478 = s32[] parameter(0)
  ROOT %Arg_1.1150 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.57 (Arg_0.1483: s32[], Arg_1.1155: s32[]) -> s32[] {
  %Arg_0.1483 = s32[] parameter(0)
  ROOT %Arg_1.1155 = s32[] parameter(1)
}

%region_992.25744 (Arg_0.25741: f32[], Arg_1.25742: f32[]) -> f32[] {
  %Arg_0.25741 = f32[] parameter(0)
  %Arg_1.25742 = f32[] parameter(1)
  ROOT %add.25743 = f32[] add(%Arg_0.25741, %Arg_1.25742)
}

%compare-greater-than.57.clone (p.0.lhs.178: bf16[], p.0.rhs.178: bf16[], p.1.lhs.178: s32[], p.1.rhs.178: s32[]) -> pred[] {
  %p.1.lhs.178 = s32[] parameter(2)
  %p.1.rhs.178 = s32[] parameter(3)
  %p.0.lhs.178 = bf16[] parameter(0)
  %p.0.rhs.178 = bf16[] parameter(1)
  ROOT %compare.692 = pred[] compare(%p.0.lhs.178, %p.0.rhs.178), direction=GT, type=TOTALORDER
}

%compare-value-and-index.57 (p.0.lhs.179: bf16[], p.0.rhs.179: bf16[], p.1.lhs.179: s32[], p.1.rhs.179: s32[]) -> pred[] {
  %p.0.lhs.179 = bf16[] parameter(0)
  %p.0.rhs.179 = bf16[] parameter(1)
  %compare.694 = pred[] compare(%p.0.lhs.179, %p.0.rhs.179), direction=EQ, type=TOTALORDER
  %p.1.lhs.179 = s32[] parameter(2)
  %p.1.rhs.179 = s32[] parameter(3)
  %compare.695 = pred[] compare(%p.1.lhs.179, %p.1.rhs.179), direction=LT
  %compare.693 = pred[] compare(%p.0.lhs.179, %p.0.rhs.179), direction=GT
  ROOT %select.318 = pred[] select(%compare.694, %compare.695, %compare.693)
}

%region_995.25823 (Arg_0.25821: u32[], Arg_1.25822: u32[]) -> u32[] {
  %Arg_0.25821 = u32[] parameter(0)
  ROOT %Arg_1.25822 = u32[] parameter(1)
}

%region_993.25773 (Arg_0.25770: f32[], Arg_1.25771: f32[]) -> f32[] {
  %Arg_0.25770 = f32[] parameter(0)
  %Arg_1.25771 = f32[] parameter(1)
  ROOT %maximum.25772 = f32[] maximum(%Arg_0.25770, %Arg_1.25771)
}

%region_994.25785 (Arg_0.25782: f32[], Arg_1.25783: f32[]) -> f32[] {
  %Arg_0.25782 = f32[] parameter(0)
  %Arg_1.25783 = f32[] parameter(1)
  ROOT %add.25784 = f32[] add(%Arg_0.25782, %Arg_1.25783)
}

%region_996.25832 (Arg_0.25829: bf16[], Arg_1.25830: bf16[]) -> bf16[] {
  %Arg_0.25829 = bf16[] parameter(0)
  %Arg_1.25830 = bf16[] parameter(1)
  ROOT %add.25831 = bf16[] add(%Arg_0.25829, %Arg_1.25830)
}

%region_9.1439.clone.clone.24 (Arg_0.356: s32[], Arg_1.119: s32[]) -> s32[] {
  %Arg_0.356 = s32[] parameter(0)
  %Arg_1.119 = s32[] parameter(1)
  ROOT %add.87 = s32[] add(%Arg_0.356, %Arg_1.119)
}

%region_997.25846 (Arg_0.25843: s32[], Arg_1.25844: s32[]) -> s32[] {
  %Arg_0.25843 = s32[] parameter(0)
  %Arg_1.25844 = s32[] parameter(1)
  ROOT %add.25845 = s32[] add(%Arg_0.25843, %Arg_1.25844)
}

%region_998.25855 (Arg_0.25852: s32[], Arg_1.25853: s32[]) -> s32[] {
  %Arg_0.25852 = s32[] parameter(0)
  %Arg_1.25853 = s32[] parameter(1)
  ROOT %add.25854 = s32[] add(%Arg_0.25852, %Arg_1.25853)
}

%region_1001.25940 (Arg_0.25937: pred[], Arg_1.25938: pred[]) -> pred[] {
  %Arg_0.25937 = pred[] parameter(0)
  %Arg_1.25938 = pred[] parameter(1)
  ROOT %and.25939 = pred[] and(%Arg_0.25937, %Arg_1.25938)
}

%region_999.25922 (Arg_0.25919: bf16[], Arg_1.25920: bf16[]) -> bf16[] {
  %Arg_0.25919 = bf16[] parameter(0)
  %Arg_1.25920 = bf16[] parameter(1)
  ROOT %add.25921 = bf16[] add(%Arg_0.25919, %Arg_1.25920)
}

%region_1002.25954 (Arg_0.25951: f32[], Arg_1.25952: f32[]) -> f32[] {
  %Arg_0.25951 = f32[] parameter(0)
  %Arg_1.25952 = f32[] parameter(1)
  ROOT %add.25953 = f32[] add(%Arg_0.25951, %Arg_1.25952)
}

%region_1004.25974 (Arg_0.25971: bf16[], Arg_1.25972: bf16[]) -> bf16[] {
  %Arg_0.25971 = bf16[] parameter(0)
  %Arg_1.25972 = bf16[] parameter(1)
  ROOT %add.25973 = bf16[] add(%Arg_0.25971, %Arg_1.25972)
}

%region_1007.26003 (Arg_0.26000: f32[], Arg_1.26001: f32[]) -> f32[] {
  %Arg_0.26000 = f32[] parameter(0)
  %Arg_1.26001 = f32[] parameter(1)
  ROOT %add.26002 = f32[] add(%Arg_0.26000, %Arg_1.26001)
}

%region_1011.26114 (Arg_0.26111: f32[], Arg_1.26112: f32[]) -> f32[] {
  %Arg_0.26111 = f32[] parameter(0)
  %Arg_1.26112 = f32[] parameter(1)
  ROOT %add.26113 = f32[] add(%Arg_0.26111, %Arg_1.26112)
}

%region_1013.26157 (Arg_0.26154: f32[], Arg_1.26155: f32[]) -> f32[] {
  %Arg_0.26154 = f32[] parameter(0)
  %Arg_1.26155 = f32[] parameter(1)
  ROOT %add.26156 = f32[] add(%Arg_0.26154, %Arg_1.26155)
}

%region_1014.26291 (Arg_0.26288: s32[], Arg_1.26289: s32[]) -> s32[] {
  %Arg_0.26288 = s32[] parameter(0)
  %Arg_1.26289 = s32[] parameter(1)
  ROOT %add.26290 = s32[] add(%Arg_0.26288, %Arg_1.26289)
}

%region_1015.26299 (Arg_0.26296: s32[], Arg_1.26297: s32[]) -> s32[] {
  %Arg_0.26296 = s32[] parameter(0)
  %Arg_1.26297 = s32[] parameter(1)
  ROOT %add.26298 = s32[] add(%Arg_0.26296, %Arg_1.26297)
}

%region_1016.26304 (Arg_0.26301: s32[], Arg_1.26302: s32[]) -> s32[] {
  %Arg_0.26301 = s32[] parameter(0)
  %Arg_1.26302 = s32[] parameter(1)
  ROOT %maximum.26303 = s32[] maximum(%Arg_0.26301, %Arg_1.26302)
}

%region_6.178._custom_call_lowering_rule.58 (Arg_0.1503: s32[], Arg_1.1175: s32[]) -> s32[] {
  %Arg_0.1503 = s32[] parameter(0)
  ROOT %Arg_1.1175 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.58 (Arg_0.1508: s32[], Arg_1.1180: s32[]) -> s32[] {
  %Arg_0.1508 = s32[] parameter(0)
  ROOT %Arg_1.1180 = s32[] parameter(1)
}

%region_1017.26320 (Arg_0.26317: f32[], Arg_1.26318: f32[]) -> f32[] {
  %Arg_0.26317 = f32[] parameter(0)
  %Arg_1.26318 = f32[] parameter(1)
  ROOT %add.26319 = f32[] add(%Arg_0.26317, %Arg_1.26318)
}

%compare-greater-than.58.clone (p.0.lhs.180: bf16[], p.0.rhs.180: bf16[], p.1.lhs.180: s32[], p.1.rhs.180: s32[]) -> pred[] {
  %p.1.lhs.180 = s32[] parameter(2)
  %p.1.rhs.180 = s32[] parameter(3)
  %p.0.lhs.180 = bf16[] parameter(0)
  %p.0.rhs.180 = bf16[] parameter(1)
  ROOT %compare.698 = pred[] compare(%p.0.lhs.180, %p.0.rhs.180), direction=GT, type=TOTALORDER
}

%compare-value-and-index.58 (p.0.lhs.181: bf16[], p.0.rhs.181: bf16[], p.1.lhs.181: s32[], p.1.rhs.181: s32[]) -> pred[] {
  %p.0.lhs.181 = bf16[] parameter(0)
  %p.0.rhs.181 = bf16[] parameter(1)
  %compare.700 = pred[] compare(%p.0.lhs.181, %p.0.rhs.181), direction=EQ, type=TOTALORDER
  %p.1.lhs.181 = s32[] parameter(2)
  %p.1.rhs.181 = s32[] parameter(3)
  %compare.701 = pred[] compare(%p.1.lhs.181, %p.1.rhs.181), direction=LT
  %compare.699 = pred[] compare(%p.0.lhs.181, %p.0.rhs.181), direction=GT
  ROOT %select.319 = pred[] select(%compare.700, %compare.701, %compare.699)
}

%region_1020.26399 (Arg_0.26397: u32[], Arg_1.26398: u32[]) -> u32[] {
  %Arg_0.26397 = u32[] parameter(0)
  ROOT %Arg_1.26398 = u32[] parameter(1)
}

%region_1018.26349 (Arg_0.26346: f32[], Arg_1.26347: f32[]) -> f32[] {
  %Arg_0.26346 = f32[] parameter(0)
  %Arg_1.26347 = f32[] parameter(1)
  ROOT %maximum.26348 = f32[] maximum(%Arg_0.26346, %Arg_1.26347)
}

%region_1019.26361 (Arg_0.26358: f32[], Arg_1.26359: f32[]) -> f32[] {
  %Arg_0.26358 = f32[] parameter(0)
  %Arg_1.26359 = f32[] parameter(1)
  ROOT %add.26360 = f32[] add(%Arg_0.26358, %Arg_1.26359)
}

%region_1021.26408 (Arg_0.26405: bf16[], Arg_1.26406: bf16[]) -> bf16[] {
  %Arg_0.26405 = bf16[] parameter(0)
  %Arg_1.26406 = bf16[] parameter(1)
  ROOT %add.26407 = bf16[] add(%Arg_0.26405, %Arg_1.26406)
}

%region_9.1439.clone.clone.25 (Arg_0.359: s32[], Arg_1.120: s32[]) -> s32[] {
  %Arg_0.359 = s32[] parameter(0)
  %Arg_1.120 = s32[] parameter(1)
  ROOT %add.88 = s32[] add(%Arg_0.359, %Arg_1.120)
}

%region_1022.26422 (Arg_0.26419: s32[], Arg_1.26420: s32[]) -> s32[] {
  %Arg_0.26419 = s32[] parameter(0)
  %Arg_1.26420 = s32[] parameter(1)
  ROOT %add.26421 = s32[] add(%Arg_0.26419, %Arg_1.26420)
}

%region_1023.26431 (Arg_0.26428: s32[], Arg_1.26429: s32[]) -> s32[] {
  %Arg_0.26428 = s32[] parameter(0)
  %Arg_1.26429 = s32[] parameter(1)
  ROOT %add.26430 = s32[] add(%Arg_0.26428, %Arg_1.26429)
}

%region_1026.26516 (Arg_0.26513: pred[], Arg_1.26514: pred[]) -> pred[] {
  %Arg_0.26513 = pred[] parameter(0)
  %Arg_1.26514 = pred[] parameter(1)
  ROOT %and.26515 = pred[] and(%Arg_0.26513, %Arg_1.26514)
}

%region_1024.26498 (Arg_0.26495: bf16[], Arg_1.26496: bf16[]) -> bf16[] {
  %Arg_0.26495 = bf16[] parameter(0)
  %Arg_1.26496 = bf16[] parameter(1)
  ROOT %add.26497 = bf16[] add(%Arg_0.26495, %Arg_1.26496)
}

%region_1027.26530 (Arg_0.26527: f32[], Arg_1.26528: f32[]) -> f32[] {
  %Arg_0.26527 = f32[] parameter(0)
  %Arg_1.26528 = f32[] parameter(1)
  ROOT %add.26529 = f32[] add(%Arg_0.26527, %Arg_1.26528)
}

%region_1029.26550 (Arg_0.26547: bf16[], Arg_1.26548: bf16[]) -> bf16[] {
  %Arg_0.26547 = bf16[] parameter(0)
  %Arg_1.26548 = bf16[] parameter(1)
  ROOT %add.26549 = bf16[] add(%Arg_0.26547, %Arg_1.26548)
}

%region_1032.26579 (Arg_0.26576: f32[], Arg_1.26577: f32[]) -> f32[] {
  %Arg_0.26576 = f32[] parameter(0)
  %Arg_1.26577 = f32[] parameter(1)
  ROOT %add.26578 = f32[] add(%Arg_0.26576, %Arg_1.26577)
}

%region_1036.26690 (Arg_0.26687: f32[], Arg_1.26688: f32[]) -> f32[] {
  %Arg_0.26687 = f32[] parameter(0)
  %Arg_1.26688 = f32[] parameter(1)
  ROOT %add.26689 = f32[] add(%Arg_0.26687, %Arg_1.26688)
}

%region_1038.26733 (Arg_0.26730: f32[], Arg_1.26731: f32[]) -> f32[] {
  %Arg_0.26730 = f32[] parameter(0)
  %Arg_1.26731 = f32[] parameter(1)
  ROOT %add.26732 = f32[] add(%Arg_0.26730, %Arg_1.26731)
}

%region_1039.26867 (Arg_0.26864: s32[], Arg_1.26865: s32[]) -> s32[] {
  %Arg_0.26864 = s32[] parameter(0)
  %Arg_1.26865 = s32[] parameter(1)
  ROOT %add.26866 = s32[] add(%Arg_0.26864, %Arg_1.26865)
}

%region_1040.26875 (Arg_0.26872: s32[], Arg_1.26873: s32[]) -> s32[] {
  %Arg_0.26872 = s32[] parameter(0)
  %Arg_1.26873 = s32[] parameter(1)
  ROOT %add.26874 = s32[] add(%Arg_0.26872, %Arg_1.26873)
}

%region_1041.26880 (Arg_0.26877: s32[], Arg_1.26878: s32[]) -> s32[] {
  %Arg_0.26877 = s32[] parameter(0)
  %Arg_1.26878 = s32[] parameter(1)
  ROOT %maximum.26879 = s32[] maximum(%Arg_0.26877, %Arg_1.26878)
}

%region_6.178._custom_call_lowering_rule.59 (Arg_0.1528: s32[], Arg_1.1199: s32[]) -> s32[] {
  %Arg_0.1528 = s32[] parameter(0)
  ROOT %Arg_1.1199 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.59 (Arg_0.1533: s32[], Arg_1.1204: s32[]) -> s32[] {
  %Arg_0.1533 = s32[] parameter(0)
  ROOT %Arg_1.1204 = s32[] parameter(1)
}

%region_1042.26896 (Arg_0.26893: f32[], Arg_1.26894: f32[]) -> f32[] {
  %Arg_0.26893 = f32[] parameter(0)
  %Arg_1.26894 = f32[] parameter(1)
  ROOT %add.26895 = f32[] add(%Arg_0.26893, %Arg_1.26894)
}

%compare-greater-than.59.clone (p.0.lhs.182: bf16[], p.0.rhs.182: bf16[], p.1.lhs.182: s32[], p.1.rhs.182: s32[]) -> pred[] {
  %p.1.lhs.182 = s32[] parameter(2)
  %p.1.rhs.182 = s32[] parameter(3)
  %p.0.lhs.182 = bf16[] parameter(0)
  %p.0.rhs.182 = bf16[] parameter(1)
  ROOT %compare.704 = pred[] compare(%p.0.lhs.182, %p.0.rhs.182), direction=GT, type=TOTALORDER
}

%compare-value-and-index.59 (p.0.lhs.183: bf16[], p.0.rhs.183: bf16[], p.1.lhs.183: s32[], p.1.rhs.183: s32[]) -> pred[] {
  %p.0.lhs.183 = bf16[] parameter(0)
  %p.0.rhs.183 = bf16[] parameter(1)
  %compare.706 = pred[] compare(%p.0.lhs.183, %p.0.rhs.183), direction=EQ, type=TOTALORDER
  %p.1.lhs.183 = s32[] parameter(2)
  %p.1.rhs.183 = s32[] parameter(3)
  %compare.707 = pred[] compare(%p.1.lhs.183, %p.1.rhs.183), direction=LT
  %compare.705 = pred[] compare(%p.0.lhs.183, %p.0.rhs.183), direction=GT
  ROOT %select.320 = pred[] select(%compare.706, %compare.707, %compare.705)
}

%region_1045.26975 (Arg_0.26973: u32[], Arg_1.26974: u32[]) -> u32[] {
  %Arg_0.26973 = u32[] parameter(0)
  ROOT %Arg_1.26974 = u32[] parameter(1)
}

%region_1043.26925 (Arg_0.26922: f32[], Arg_1.26923: f32[]) -> f32[] {
  %Arg_0.26922 = f32[] parameter(0)
  %Arg_1.26923 = f32[] parameter(1)
  ROOT %maximum.26924 = f32[] maximum(%Arg_0.26922, %Arg_1.26923)
}

%region_1044.26937 (Arg_0.26934: f32[], Arg_1.26935: f32[]) -> f32[] {
  %Arg_0.26934 = f32[] parameter(0)
  %Arg_1.26935 = f32[] parameter(1)
  ROOT %add.26936 = f32[] add(%Arg_0.26934, %Arg_1.26935)
}

%region_1046.26984 (Arg_0.26981: bf16[], Arg_1.26982: bf16[]) -> bf16[] {
  %Arg_0.26981 = bf16[] parameter(0)
  %Arg_1.26982 = bf16[] parameter(1)
  ROOT %add.26983 = bf16[] add(%Arg_0.26981, %Arg_1.26982)
}

%region_9.1439.clone.clone.26 (Arg_0.362: s32[], Arg_1.121: s32[]) -> s32[] {
  %Arg_0.362 = s32[] parameter(0)
  %Arg_1.121 = s32[] parameter(1)
  ROOT %add.89 = s32[] add(%Arg_0.362, %Arg_1.121)
}

%region_1047.26998 (Arg_0.26995: s32[], Arg_1.26996: s32[]) -> s32[] {
  %Arg_0.26995 = s32[] parameter(0)
  %Arg_1.26996 = s32[] parameter(1)
  ROOT %add.26997 = s32[] add(%Arg_0.26995, %Arg_1.26996)
}

%region_1048.27007 (Arg_0.27004: s32[], Arg_1.27005: s32[]) -> s32[] {
  %Arg_0.27004 = s32[] parameter(0)
  %Arg_1.27005 = s32[] parameter(1)
  ROOT %add.27006 = s32[] add(%Arg_0.27004, %Arg_1.27005)
}

%region_1051.27092 (Arg_0.27089: pred[], Arg_1.27090: pred[]) -> pred[] {
  %Arg_0.27089 = pred[] parameter(0)
  %Arg_1.27090 = pred[] parameter(1)
  ROOT %and.27091 = pred[] and(%Arg_0.27089, %Arg_1.27090)
}

%region_1049.27074 (Arg_0.27071: bf16[], Arg_1.27072: bf16[]) -> bf16[] {
  %Arg_0.27071 = bf16[] parameter(0)
  %Arg_1.27072 = bf16[] parameter(1)
  ROOT %add.27073 = bf16[] add(%Arg_0.27071, %Arg_1.27072)
}

%region_1052.27106 (Arg_0.27103: f32[], Arg_1.27104: f32[]) -> f32[] {
  %Arg_0.27103 = f32[] parameter(0)
  %Arg_1.27104 = f32[] parameter(1)
  ROOT %add.27105 = f32[] add(%Arg_0.27103, %Arg_1.27104)
}

%region_1054.27126 (Arg_0.27123: bf16[], Arg_1.27124: bf16[]) -> bf16[] {
  %Arg_0.27123 = bf16[] parameter(0)
  %Arg_1.27124 = bf16[] parameter(1)
  ROOT %add.27125 = bf16[] add(%Arg_0.27123, %Arg_1.27124)
}

%region_1057.27155 (Arg_0.27152: f32[], Arg_1.27153: f32[]) -> f32[] {
  %Arg_0.27152 = f32[] parameter(0)
  %Arg_1.27153 = f32[] parameter(1)
  ROOT %add.27154 = f32[] add(%Arg_0.27152, %Arg_1.27153)
}

%region_1061.27266 (Arg_0.27263: f32[], Arg_1.27264: f32[]) -> f32[] {
  %Arg_0.27263 = f32[] parameter(0)
  %Arg_1.27264 = f32[] parameter(1)
  ROOT %add.27265 = f32[] add(%Arg_0.27263, %Arg_1.27264)
}

%region_1063.27309 (Arg_0.27306: f32[], Arg_1.27307: f32[]) -> f32[] {
  %Arg_0.27306 = f32[] parameter(0)
  %Arg_1.27307 = f32[] parameter(1)
  ROOT %add.27308 = f32[] add(%Arg_0.27306, %Arg_1.27307)
}

%region_1064.27443 (Arg_0.27440: s32[], Arg_1.27441: s32[]) -> s32[] {
  %Arg_0.27440 = s32[] parameter(0)
  %Arg_1.27441 = s32[] parameter(1)
  ROOT %add.27442 = s32[] add(%Arg_0.27440, %Arg_1.27441)
}

%region_1065.27451 (Arg_0.27448: s32[], Arg_1.27449: s32[]) -> s32[] {
  %Arg_0.27448 = s32[] parameter(0)
  %Arg_1.27449 = s32[] parameter(1)
  ROOT %add.27450 = s32[] add(%Arg_0.27448, %Arg_1.27449)
}

%region_1066.27456 (Arg_0.27453: s32[], Arg_1.27454: s32[]) -> s32[] {
  %Arg_0.27453 = s32[] parameter(0)
  %Arg_1.27454 = s32[] parameter(1)
  ROOT %maximum.27455 = s32[] maximum(%Arg_0.27453, %Arg_1.27454)
}

%region_6.178._custom_call_lowering_rule.60 (Arg_0.1552: s32[], Arg_1.1223: s32[]) -> s32[] {
  %Arg_0.1552 = s32[] parameter(0)
  ROOT %Arg_1.1223 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.60 (Arg_0.1557: s32[], Arg_1.1228: s32[]) -> s32[] {
  %Arg_0.1557 = s32[] parameter(0)
  ROOT %Arg_1.1228 = s32[] parameter(1)
}

%region_1067.27472 (Arg_0.27469: f32[], Arg_1.27470: f32[]) -> f32[] {
  %Arg_0.27469 = f32[] parameter(0)
  %Arg_1.27470 = f32[] parameter(1)
  ROOT %add.27471 = f32[] add(%Arg_0.27469, %Arg_1.27470)
}

%compare-greater-than.60.clone (p.0.lhs.184: bf16[], p.0.rhs.184: bf16[], p.1.lhs.184: s32[], p.1.rhs.184: s32[]) -> pred[] {
  %p.1.lhs.184 = s32[] parameter(2)
  %p.1.rhs.184 = s32[] parameter(3)
  %p.0.lhs.184 = bf16[] parameter(0)
  %p.0.rhs.184 = bf16[] parameter(1)
  ROOT %compare.710 = pred[] compare(%p.0.lhs.184, %p.0.rhs.184), direction=GT, type=TOTALORDER
}

%compare-value-and-index.60 (p.0.lhs.185: bf16[], p.0.rhs.185: bf16[], p.1.lhs.185: s32[], p.1.rhs.185: s32[]) -> pred[] {
  %p.0.lhs.185 = bf16[] parameter(0)
  %p.0.rhs.185 = bf16[] parameter(1)
  %compare.712 = pred[] compare(%p.0.lhs.185, %p.0.rhs.185), direction=EQ, type=TOTALORDER
  %p.1.lhs.185 = s32[] parameter(2)
  %p.1.rhs.185 = s32[] parameter(3)
  %compare.713 = pred[] compare(%p.1.lhs.185, %p.1.rhs.185), direction=LT
  %compare.711 = pred[] compare(%p.0.lhs.185, %p.0.rhs.185), direction=GT
  ROOT %select.321 = pred[] select(%compare.712, %compare.713, %compare.711)
}

%region_1070.27551 (Arg_0.27549: u32[], Arg_1.27550: u32[]) -> u32[] {
  %Arg_0.27549 = u32[] parameter(0)
  ROOT %Arg_1.27550 = u32[] parameter(1)
}

%region_1068.27501 (Arg_0.27498: f32[], Arg_1.27499: f32[]) -> f32[] {
  %Arg_0.27498 = f32[] parameter(0)
  %Arg_1.27499 = f32[] parameter(1)
  ROOT %maximum.27500 = f32[] maximum(%Arg_0.27498, %Arg_1.27499)
}

%region_1069.27513 (Arg_0.27510: f32[], Arg_1.27511: f32[]) -> f32[] {
  %Arg_0.27510 = f32[] parameter(0)
  %Arg_1.27511 = f32[] parameter(1)
  ROOT %add.27512 = f32[] add(%Arg_0.27510, %Arg_1.27511)
}

%region_1071.27560 (Arg_0.27557: bf16[], Arg_1.27558: bf16[]) -> bf16[] {
  %Arg_0.27557 = bf16[] parameter(0)
  %Arg_1.27558 = bf16[] parameter(1)
  ROOT %add.27559 = bf16[] add(%Arg_0.27557, %Arg_1.27558)
}

%region_9.1439.clone.clone.27 (Arg_0.365: s32[], Arg_1.122: s32[]) -> s32[] {
  %Arg_0.365 = s32[] parameter(0)
  %Arg_1.122 = s32[] parameter(1)
  ROOT %add.90 = s32[] add(%Arg_0.365, %Arg_1.122)
}

%region_1072.27574 (Arg_0.27571: s32[], Arg_1.27572: s32[]) -> s32[] {
  %Arg_0.27571 = s32[] parameter(0)
  %Arg_1.27572 = s32[] parameter(1)
  ROOT %add.27573 = s32[] add(%Arg_0.27571, %Arg_1.27572)
}

%region_1073.27583 (Arg_0.27580: s32[], Arg_1.27581: s32[]) -> s32[] {
  %Arg_0.27580 = s32[] parameter(0)
  %Arg_1.27581 = s32[] parameter(1)
  ROOT %add.27582 = s32[] add(%Arg_0.27580, %Arg_1.27581)
}

%region_1076.27668 (Arg_0.27665: pred[], Arg_1.27666: pred[]) -> pred[] {
  %Arg_0.27665 = pred[] parameter(0)
  %Arg_1.27666 = pred[] parameter(1)
  ROOT %and.27667 = pred[] and(%Arg_0.27665, %Arg_1.27666)
}

%region_1074.27650 (Arg_0.27647: bf16[], Arg_1.27648: bf16[]) -> bf16[] {
  %Arg_0.27647 = bf16[] parameter(0)
  %Arg_1.27648 = bf16[] parameter(1)
  ROOT %add.27649 = bf16[] add(%Arg_0.27647, %Arg_1.27648)
}

%region_1077.27682 (Arg_0.27679: f32[], Arg_1.27680: f32[]) -> f32[] {
  %Arg_0.27679 = f32[] parameter(0)
  %Arg_1.27680 = f32[] parameter(1)
  ROOT %add.27681 = f32[] add(%Arg_0.27679, %Arg_1.27680)
}

%region_1079.27702 (Arg_0.27699: bf16[], Arg_1.27700: bf16[]) -> bf16[] {
  %Arg_0.27699 = bf16[] parameter(0)
  %Arg_1.27700 = bf16[] parameter(1)
  ROOT %add.27701 = bf16[] add(%Arg_0.27699, %Arg_1.27700)
}

%region_1082.27731 (Arg_0.27728: f32[], Arg_1.27729: f32[]) -> f32[] {
  %Arg_0.27728 = f32[] parameter(0)
  %Arg_1.27729 = f32[] parameter(1)
  ROOT %add.27730 = f32[] add(%Arg_0.27728, %Arg_1.27729)
}

%region_1086.27842 (Arg_0.27839: f32[], Arg_1.27840: f32[]) -> f32[] {
  %Arg_0.27839 = f32[] parameter(0)
  %Arg_1.27840 = f32[] parameter(1)
  ROOT %add.27841 = f32[] add(%Arg_0.27839, %Arg_1.27840)
}

%region_1088.27885 (Arg_0.27882: f32[], Arg_1.27883: f32[]) -> f32[] {
  %Arg_0.27882 = f32[] parameter(0)
  %Arg_1.27883 = f32[] parameter(1)
  ROOT %add.27884 = f32[] add(%Arg_0.27882, %Arg_1.27883)
}

%region_1089.28019 (Arg_0.28016: s32[], Arg_1.28017: s32[]) -> s32[] {
  %Arg_0.28016 = s32[] parameter(0)
  %Arg_1.28017 = s32[] parameter(1)
  ROOT %add.28018 = s32[] add(%Arg_0.28016, %Arg_1.28017)
}

%region_1090.28027 (Arg_0.28024: s32[], Arg_1.28025: s32[]) -> s32[] {
  %Arg_0.28024 = s32[] parameter(0)
  %Arg_1.28025 = s32[] parameter(1)
  ROOT %add.28026 = s32[] add(%Arg_0.28024, %Arg_1.28025)
}

%region_1091.28032 (Arg_0.28029: s32[], Arg_1.28030: s32[]) -> s32[] {
  %Arg_0.28029 = s32[] parameter(0)
  %Arg_1.28030 = s32[] parameter(1)
  ROOT %maximum.28031 = s32[] maximum(%Arg_0.28029, %Arg_1.28030)
}

%region_6.178._custom_call_lowering_rule.61 (Arg_0.1576: s32[], Arg_1.1247: s32[]) -> s32[] {
  %Arg_0.1576 = s32[] parameter(0)
  ROOT %Arg_1.1247 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.61 (Arg_0.1581: s32[], Arg_1.1252: s32[]) -> s32[] {
  %Arg_0.1581 = s32[] parameter(0)
  ROOT %Arg_1.1252 = s32[] parameter(1)
}

%region_1092.28048 (Arg_0.28045: f32[], Arg_1.28046: f32[]) -> f32[] {
  %Arg_0.28045 = f32[] parameter(0)
  %Arg_1.28046 = f32[] parameter(1)
  ROOT %add.28047 = f32[] add(%Arg_0.28045, %Arg_1.28046)
}

%compare-greater-than.61.clone (p.0.lhs.186: bf16[], p.0.rhs.186: bf16[], p.1.lhs.186: s32[], p.1.rhs.186: s32[]) -> pred[] {
  %p.1.lhs.186 = s32[] parameter(2)
  %p.1.rhs.186 = s32[] parameter(3)
  %p.0.lhs.186 = bf16[] parameter(0)
  %p.0.rhs.186 = bf16[] parameter(1)
  ROOT %compare.716 = pred[] compare(%p.0.lhs.186, %p.0.rhs.186), direction=GT, type=TOTALORDER
}

%compare-value-and-index.61 (p.0.lhs.187: bf16[], p.0.rhs.187: bf16[], p.1.lhs.187: s32[], p.1.rhs.187: s32[]) -> pred[] {
  %p.0.lhs.187 = bf16[] parameter(0)
  %p.0.rhs.187 = bf16[] parameter(1)
  %compare.718 = pred[] compare(%p.0.lhs.187, %p.0.rhs.187), direction=EQ, type=TOTALORDER
  %p.1.lhs.187 = s32[] parameter(2)
  %p.1.rhs.187 = s32[] parameter(3)
  %compare.719 = pred[] compare(%p.1.lhs.187, %p.1.rhs.187), direction=LT
  %compare.717 = pred[] compare(%p.0.lhs.187, %p.0.rhs.187), direction=GT
  ROOT %select.322 = pred[] select(%compare.718, %compare.719, %compare.717)
}

%region_1095.28127 (Arg_0.28125: u32[], Arg_1.28126: u32[]) -> u32[] {
  %Arg_0.28125 = u32[] parameter(0)
  ROOT %Arg_1.28126 = u32[] parameter(1)
}

%region_1093.28077 (Arg_0.28074: f32[], Arg_1.28075: f32[]) -> f32[] {
  %Arg_0.28074 = f32[] parameter(0)
  %Arg_1.28075 = f32[] parameter(1)
  ROOT %maximum.28076 = f32[] maximum(%Arg_0.28074, %Arg_1.28075)
}

%region_1094.28089 (Arg_0.28086: f32[], Arg_1.28087: f32[]) -> f32[] {
  %Arg_0.28086 = f32[] parameter(0)
  %Arg_1.28087 = f32[] parameter(1)
  ROOT %add.28088 = f32[] add(%Arg_0.28086, %Arg_1.28087)
}

%region_1096.28136 (Arg_0.28133: bf16[], Arg_1.28134: bf16[]) -> bf16[] {
  %Arg_0.28133 = bf16[] parameter(0)
  %Arg_1.28134 = bf16[] parameter(1)
  ROOT %add.28135 = bf16[] add(%Arg_0.28133, %Arg_1.28134)
}

%region_9.1439.clone.clone.28 (Arg_0.368: s32[], Arg_1.123: s32[]) -> s32[] {
  %Arg_0.368 = s32[] parameter(0)
  %Arg_1.123 = s32[] parameter(1)
  ROOT %add.91 = s32[] add(%Arg_0.368, %Arg_1.123)
}

%region_1097.28150 (Arg_0.28147: s32[], Arg_1.28148: s32[]) -> s32[] {
  %Arg_0.28147 = s32[] parameter(0)
  %Arg_1.28148 = s32[] parameter(1)
  ROOT %add.28149 = s32[] add(%Arg_0.28147, %Arg_1.28148)
}

%region_1098.28159 (Arg_0.28156: s32[], Arg_1.28157: s32[]) -> s32[] {
  %Arg_0.28156 = s32[] parameter(0)
  %Arg_1.28157 = s32[] parameter(1)
  ROOT %add.28158 = s32[] add(%Arg_0.28156, %Arg_1.28157)
}

%region_1101.28244 (Arg_0.28241: pred[], Arg_1.28242: pred[]) -> pred[] {
  %Arg_0.28241 = pred[] parameter(0)
  %Arg_1.28242 = pred[] parameter(1)
  ROOT %and.28243 = pred[] and(%Arg_0.28241, %Arg_1.28242)
}

%region_1099.28226 (Arg_0.28223: bf16[], Arg_1.28224: bf16[]) -> bf16[] {
  %Arg_0.28223 = bf16[] parameter(0)
  %Arg_1.28224 = bf16[] parameter(1)
  ROOT %add.28225 = bf16[] add(%Arg_0.28223, %Arg_1.28224)
}

%region_1102.28258 (Arg_0.28255: f32[], Arg_1.28256: f32[]) -> f32[] {
  %Arg_0.28255 = f32[] parameter(0)
  %Arg_1.28256 = f32[] parameter(1)
  ROOT %add.28257 = f32[] add(%Arg_0.28255, %Arg_1.28256)
}

%region_1104.28278 (Arg_0.28275: bf16[], Arg_1.28276: bf16[]) -> bf16[] {
  %Arg_0.28275 = bf16[] parameter(0)
  %Arg_1.28276 = bf16[] parameter(1)
  ROOT %add.28277 = bf16[] add(%Arg_0.28275, %Arg_1.28276)
}

%region_1107.28307 (Arg_0.28304: f32[], Arg_1.28305: f32[]) -> f32[] {
  %Arg_0.28304 = f32[] parameter(0)
  %Arg_1.28305 = f32[] parameter(1)
  ROOT %add.28306 = f32[] add(%Arg_0.28304, %Arg_1.28305)
}

%region_1111.28418 (Arg_0.28415: f32[], Arg_1.28416: f32[]) -> f32[] {
  %Arg_0.28415 = f32[] parameter(0)
  %Arg_1.28416 = f32[] parameter(1)
  ROOT %add.28417 = f32[] add(%Arg_0.28415, %Arg_1.28416)
}

%region_1113.28461 (Arg_0.28458: f32[], Arg_1.28459: f32[]) -> f32[] {
  %Arg_0.28458 = f32[] parameter(0)
  %Arg_1.28459 = f32[] parameter(1)
  ROOT %add.28460 = f32[] add(%Arg_0.28458, %Arg_1.28459)
}

%region_1114.28595 (Arg_0.28592: s32[], Arg_1.28593: s32[]) -> s32[] {
  %Arg_0.28592 = s32[] parameter(0)
  %Arg_1.28593 = s32[] parameter(1)
  ROOT %add.28594 = s32[] add(%Arg_0.28592, %Arg_1.28593)
}

%region_1115.28603 (Arg_0.28600: s32[], Arg_1.28601: s32[]) -> s32[] {
  %Arg_0.28600 = s32[] parameter(0)
  %Arg_1.28601 = s32[] parameter(1)
  ROOT %add.28602 = s32[] add(%Arg_0.28600, %Arg_1.28601)
}

%region_1116.28608 (Arg_0.28605: s32[], Arg_1.28606: s32[]) -> s32[] {
  %Arg_0.28605 = s32[] parameter(0)
  %Arg_1.28606 = s32[] parameter(1)
  ROOT %maximum.28607 = s32[] maximum(%Arg_0.28605, %Arg_1.28606)
}

%region_6.178._custom_call_lowering_rule.62 (Arg_0.1600: s32[], Arg_1.1271: s32[]) -> s32[] {
  %Arg_0.1600 = s32[] parameter(0)
  ROOT %Arg_1.1271 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.62 (Arg_0.1605: s32[], Arg_1.1276: s32[]) -> s32[] {
  %Arg_0.1605 = s32[] parameter(0)
  ROOT %Arg_1.1276 = s32[] parameter(1)
}

%region_1117.28624 (Arg_0.28621: f32[], Arg_1.28622: f32[]) -> f32[] {
  %Arg_0.28621 = f32[] parameter(0)
  %Arg_1.28622 = f32[] parameter(1)
  ROOT %add.28623 = f32[] add(%Arg_0.28621, %Arg_1.28622)
}

%compare-greater-than.62.clone (p.0.lhs.188: bf16[], p.0.rhs.188: bf16[], p.1.lhs.188: s32[], p.1.rhs.188: s32[]) -> pred[] {
  %p.1.lhs.188 = s32[] parameter(2)
  %p.1.rhs.188 = s32[] parameter(3)
  %p.0.lhs.188 = bf16[] parameter(0)
  %p.0.rhs.188 = bf16[] parameter(1)
  ROOT %compare.722 = pred[] compare(%p.0.lhs.188, %p.0.rhs.188), direction=GT, type=TOTALORDER
}

%compare-value-and-index.62 (p.0.lhs.189: bf16[], p.0.rhs.189: bf16[], p.1.lhs.189: s32[], p.1.rhs.189: s32[]) -> pred[] {
  %p.0.lhs.189 = bf16[] parameter(0)
  %p.0.rhs.189 = bf16[] parameter(1)
  %compare.724 = pred[] compare(%p.0.lhs.189, %p.0.rhs.189), direction=EQ, type=TOTALORDER
  %p.1.lhs.189 = s32[] parameter(2)
  %p.1.rhs.189 = s32[] parameter(3)
  %compare.725 = pred[] compare(%p.1.lhs.189, %p.1.rhs.189), direction=LT
  %compare.723 = pred[] compare(%p.0.lhs.189, %p.0.rhs.189), direction=GT
  ROOT %select.323 = pred[] select(%compare.724, %compare.725, %compare.723)
}

%region_1120.28703 (Arg_0.28701: u32[], Arg_1.28702: u32[]) -> u32[] {
  %Arg_0.28701 = u32[] parameter(0)
  ROOT %Arg_1.28702 = u32[] parameter(1)
}

%region_1118.28653 (Arg_0.28650: f32[], Arg_1.28651: f32[]) -> f32[] {
  %Arg_0.28650 = f32[] parameter(0)
  %Arg_1.28651 = f32[] parameter(1)
  ROOT %maximum.28652 = f32[] maximum(%Arg_0.28650, %Arg_1.28651)
}

%region_1119.28665 (Arg_0.28662: f32[], Arg_1.28663: f32[]) -> f32[] {
  %Arg_0.28662 = f32[] parameter(0)
  %Arg_1.28663 = f32[] parameter(1)
  ROOT %add.28664 = f32[] add(%Arg_0.28662, %Arg_1.28663)
}

%region_1121.28712 (Arg_0.28709: bf16[], Arg_1.28710: bf16[]) -> bf16[] {
  %Arg_0.28709 = bf16[] parameter(0)
  %Arg_1.28710 = bf16[] parameter(1)
  ROOT %add.28711 = bf16[] add(%Arg_0.28709, %Arg_1.28710)
}

%region_9.1439.clone.clone.29 (Arg_0.371: s32[], Arg_1.124: s32[]) -> s32[] {
  %Arg_0.371 = s32[] parameter(0)
  %Arg_1.124 = s32[] parameter(1)
  ROOT %add.92 = s32[] add(%Arg_0.371, %Arg_1.124)
}

%region_1122.28726 (Arg_0.28723: s32[], Arg_1.28724: s32[]) -> s32[] {
  %Arg_0.28723 = s32[] parameter(0)
  %Arg_1.28724 = s32[] parameter(1)
  ROOT %add.28725 = s32[] add(%Arg_0.28723, %Arg_1.28724)
}

%region_1123.28735 (Arg_0.28732: s32[], Arg_1.28733: s32[]) -> s32[] {
  %Arg_0.28732 = s32[] parameter(0)
  %Arg_1.28733 = s32[] parameter(1)
  ROOT %add.28734 = s32[] add(%Arg_0.28732, %Arg_1.28733)
}

%region_1126.28820 (Arg_0.28817: pred[], Arg_1.28818: pred[]) -> pred[] {
  %Arg_0.28817 = pred[] parameter(0)
  %Arg_1.28818 = pred[] parameter(1)
  ROOT %and.28819 = pred[] and(%Arg_0.28817, %Arg_1.28818)
}

%region_1124.28802 (Arg_0.28799: bf16[], Arg_1.28800: bf16[]) -> bf16[] {
  %Arg_0.28799 = bf16[] parameter(0)
  %Arg_1.28800 = bf16[] parameter(1)
  ROOT %add.28801 = bf16[] add(%Arg_0.28799, %Arg_1.28800)
}

%region_1127.28834 (Arg_0.28831: f32[], Arg_1.28832: f32[]) -> f32[] {
  %Arg_0.28831 = f32[] parameter(0)
  %Arg_1.28832 = f32[] parameter(1)
  ROOT %add.28833 = f32[] add(%Arg_0.28831, %Arg_1.28832)
}

%region_1129.28854 (Arg_0.28851: bf16[], Arg_1.28852: bf16[]) -> bf16[] {
  %Arg_0.28851 = bf16[] parameter(0)
  %Arg_1.28852 = bf16[] parameter(1)
  ROOT %add.28853 = bf16[] add(%Arg_0.28851, %Arg_1.28852)
}

%region_1132.28883 (Arg_0.28880: f32[], Arg_1.28881: f32[]) -> f32[] {
  %Arg_0.28880 = f32[] parameter(0)
  %Arg_1.28881 = f32[] parameter(1)
  ROOT %add.28882 = f32[] add(%Arg_0.28880, %Arg_1.28881)
}

%region_1136.28994 (Arg_0.28991: f32[], Arg_1.28992: f32[]) -> f32[] {
  %Arg_0.28991 = f32[] parameter(0)
  %Arg_1.28992 = f32[] parameter(1)
  ROOT %add.28993 = f32[] add(%Arg_0.28991, %Arg_1.28992)
}

%region_1138.29037 (Arg_0.29034: f32[], Arg_1.29035: f32[]) -> f32[] {
  %Arg_0.29034 = f32[] parameter(0)
  %Arg_1.29035 = f32[] parameter(1)
  ROOT %add.29036 = f32[] add(%Arg_0.29034, %Arg_1.29035)
}

%region_1139.29171 (Arg_0.29168: s32[], Arg_1.29169: s32[]) -> s32[] {
  %Arg_0.29168 = s32[] parameter(0)
  %Arg_1.29169 = s32[] parameter(1)
  ROOT %add.29170 = s32[] add(%Arg_0.29168, %Arg_1.29169)
}

%region_1140.29179 (Arg_0.29176: s32[], Arg_1.29177: s32[]) -> s32[] {
  %Arg_0.29176 = s32[] parameter(0)
  %Arg_1.29177 = s32[] parameter(1)
  ROOT %add.29178 = s32[] add(%Arg_0.29176, %Arg_1.29177)
}

%region_1141.29184 (Arg_0.29181: s32[], Arg_1.29182: s32[]) -> s32[] {
  %Arg_0.29181 = s32[] parameter(0)
  %Arg_1.29182 = s32[] parameter(1)
  ROOT %maximum.29183 = s32[] maximum(%Arg_0.29181, %Arg_1.29182)
}

%region_6.178._custom_call_lowering_rule.63 (Arg_0.1624: s32[], Arg_1.1296: s32[]) -> s32[] {
  %Arg_0.1624 = s32[] parameter(0)
  ROOT %Arg_1.1296 = s32[] parameter(1)
}

%region_11.232._custom_call_lowering_rule.63 (Arg_0.1629: s32[], Arg_1.1301: s32[]) -> s32[] {
  %Arg_0.1629 = s32[] parameter(0)
  ROOT %Arg_1.1301 = s32[] parameter(1)
}

%region_1142.29200 (Arg_0.29197: f32[], Arg_1.29198: f32[]) -> f32[] {
  %Arg_0.29197 = f32[] parameter(0)
  %Arg_1.29198 = f32[] parameter(1)
  ROOT %add.29199 = f32[] add(%Arg_0.29197, %Arg_1.29198)
}

%compare-greater-than.63.clone (p.0.lhs.190: bf16[], p.0.rhs.190: bf16[], p.1.lhs.190: s32[], p.1.rhs.190: s32[]) -> pred[] {
  %p.1.lhs.190 = s32[] parameter(2)
  %p.1.rhs.190 = s32[] parameter(3)
  %p.0.lhs.190 = bf16[] parameter(0)
  %p.0.rhs.190 = bf16[] parameter(1)
  ROOT %compare.728 = pred[] compare(%p.0.lhs.190, %p.0.rhs.190), direction=GT, type=TOTALORDER
}

%compare-value-and-index.63 (p.0.lhs.191: bf16[], p.0.rhs.191: bf16[], p.1.lhs.191: s32[], p.1.rhs.191: s32[]) -> pred[] {
  %p.0.lhs.191 = bf16[] parameter(0)
  %p.0.rhs.191 = bf16[] parameter(1)
  %compare.730 = pred[] compare(%p.0.lhs.191, %p.0.rhs.191), direction=EQ, type=TOTALORDER
  %p.1.lhs.191 = s32[] parameter(2)
  %p.1.rhs.191 = s32[] parameter(3)
  %compare.731 = pred[] compare(%p.1.lhs.191, %p.1.rhs.191), direction=LT
  %compare.729 = pred[] compare(%p.0.lhs.191, %p.0.rhs.191), direction=GT
  ROOT %select.324 = pred[] select(%compare.730, %compare.731, %compare.729)
}

%region_1145.29279 (Arg_0.29277: u32[], Arg_1.29278: u32[]) -> u32[] {
  %Arg_0.29277 = u32[] parameter(0)
  ROOT %Arg_1.29278 = u32[] parameter(1)
}

%region_1151.29396 (Arg_0.29393: pred[], Arg_1.29394: pred[]) -> pred[] {
  %Arg_0.29393 = pred[] parameter(0)
  %Arg_1.29394 = pred[] parameter(1)
  ROOT %and.29395 = pred[] and(%Arg_0.29393, %Arg_1.29394)
}

%region_1143.29229 (Arg_0.29226: f32[], Arg_1.29227: f32[]) -> f32[] {
  %Arg_0.29226 = f32[] parameter(0)
  %Arg_1.29227 = f32[] parameter(1)
  ROOT %maximum.29228 = f32[] maximum(%Arg_0.29226, %Arg_1.29227)
}

%region_1144.29241 (Arg_0.29238: f32[], Arg_1.29239: f32[]) -> f32[] {
  %Arg_0.29238 = f32[] parameter(0)
  %Arg_1.29239 = f32[] parameter(1)
  ROOT %add.29240 = f32[] add(%Arg_0.29238, %Arg_1.29239)
}

%region_1146.29288 (Arg_0.29285: bf16[], Arg_1.29286: bf16[]) -> bf16[] {
  %Arg_0.29285 = bf16[] parameter(0)
  %Arg_1.29286 = bf16[] parameter(1)
  ROOT %add.29287 = bf16[] add(%Arg_0.29285, %Arg_1.29286)
}

%region_9.1439.clone.clone.30 (Arg_0.374: s32[], Arg_1.125: s32[]) -> s32[] {
  %Arg_0.374 = s32[] parameter(0)
  %Arg_1.125 = s32[] parameter(1)
  ROOT %add.93 = s32[] add(%Arg_0.374, %Arg_1.125)
}

%region_1147.29302 (Arg_0.29299: s32[], Arg_1.29300: s32[]) -> s32[] {
  %Arg_0.29299 = s32[] parameter(0)
  %Arg_1.29300 = s32[] parameter(1)
  ROOT %add.29301 = s32[] add(%Arg_0.29299, %Arg_1.29300)
}

%region_1148.29311 (Arg_0.29308: s32[], Arg_1.29309: s32[]) -> s32[] {
  %Arg_0.29308 = s32[] parameter(0)
  %Arg_1.29309 = s32[] parameter(1)
  ROOT %add.29310 = s32[] add(%Arg_0.29308, %Arg_1.29309)
}

%region_1149.29378 (Arg_0.29375: bf16[], Arg_1.29376: bf16[]) -> bf16[] {
  %Arg_0.29375 = bf16[] parameter(0)
  %Arg_1.29376 = bf16[] parameter(1)
  ROOT %add.29377 = bf16[] add(%Arg_0.29375, %Arg_1.29376)
}

%region_1152.29410 (Arg_0.29407: f32[], Arg_1.29408: f32[]) -> f32[] {
  %Arg_0.29407 = f32[] parameter(0)
  %Arg_1.29408 = f32[] parameter(1)
  ROOT %add.29409 = f32[] add(%Arg_0.29407, %Arg_1.29408)
}

%region_1154.29430 (Arg_0.29427: bf16[], Arg_1.29428: bf16[]) -> bf16[] {
  %Arg_0.29427 = bf16[] parameter(0)
  %Arg_1.29428 = bf16[] parameter(1)
  ROOT %add.29429 = bf16[] add(%Arg_0.29427, %Arg_1.29428)
}

%add.clone (x.1: bf16[], y.1: bf16[]) -> bf16[] {
  %x.1 = bf16[] parameter(0)
  %y.1 = bf16[] parameter(1)
  ROOT %add.991 = bf16[] add(%x.1, %y.1)
}

%region_1164.29606 (Arg_0.29603: f32[], Arg_1.29604: f32[]) -> f32[] {
  %Arg_0.29603 = f32[] parameter(0)
  %Arg_1.29604 = f32[] parameter(1)
  ROOT %add.29605 = f32[] add(%Arg_0.29603, %Arg_1.29604)
}

%region_1164.29606.clone (Arg_0.1630: f32[], Arg_1.1302: f32[]) -> f32[] {
  %Arg_0.1630 = f32[] parameter(0)
  %Arg_1.1302 = f32[] parameter(1)
  ROOT %add.992 = f32[] add(%Arg_0.1630, %Arg_1.1302)
}

%region_1165.29615 (Arg_0.29612: f32[], Arg_1.29613: f32[]) -> f32[] {
  %Arg_0.29612 = f32[] parameter(0)
  %Arg_1.29613 = f32[] parameter(1)
  ROOT %add.29614 = f32[] add(%Arg_0.29612, %Arg_1.29613)
}

%region_1165.29615.clone (Arg_0.1631: f32[], Arg_1.1304: f32[]) -> f32[] {
  %Arg_0.1631 = f32[] parameter(0)
  %Arg_1.1304 = f32[] parameter(1)
  ROOT %add.993 = f32[] add(%Arg_0.1631, %Arg_1.1304)
}

%region_1166.29624 (Arg_0.29621: f32[], Arg_1.29622: f32[]) -> f32[] {
  %Arg_0.29621 = f32[] parameter(0)
  %Arg_1.29622 = f32[] parameter(1)
  ROOT %add.29623 = f32[] add(%Arg_0.29621, %Arg_1.29622)
}

%region_1166.29624.clone (Arg_0.1632: f32[], Arg_1.1305: f32[]) -> f32[] {
  %Arg_0.1632 = f32[] parameter(0)
  %Arg_1.1305 = f32[] parameter(1)
  ROOT %add.994 = f32[] add(%Arg_0.1632, %Arg_1.1305)
}

%region_1167.29633 (Arg_0.29630: f32[], Arg_1.29631: f32[]) -> f32[] {
  %Arg_0.29630 = f32[] parameter(0)
  %Arg_1.29631 = f32[] parameter(1)
  ROOT %add.29632 = f32[] add(%Arg_0.29630, %Arg_1.29631)
}

%region_1167.29633.clone (Arg_0.1633: f32[], Arg_1.1306: f32[]) -> f32[] {
  %Arg_0.1633 = f32[] parameter(0)
  %Arg_1.1306 = f32[] parameter(1)
  ROOT %add.995 = f32[] add(%Arg_0.1633, %Arg_1.1306)
}

%region_1155.29442 (Arg_0.29439: bf16[], Arg_1.29440: bf16[]) -> bf16[] {
  %Arg_0.29439 = bf16[] parameter(0)
  %Arg_1.29440 = bf16[] parameter(1)
  ROOT %add.29441 = bf16[] add(%Arg_0.29439, %Arg_1.29440)
}

%region_1155.29442.clone (Arg_0.1634: bf16[], Arg_1.1307: bf16[]) -> bf16[] {
  %Arg_0.1634 = bf16[] parameter(0)
  %Arg_1.1307 = bf16[] parameter(1)
  ROOT %add.996 = bf16[] add(%Arg_0.1634, %Arg_1.1307)
}

%region_1168.29642 (Arg_0.29639: f32[], Arg_1.29640: f32[]) -> f32[] {
  %Arg_0.29639 = f32[] parameter(0)
  %Arg_1.29640 = f32[] parameter(1)
  ROOT %add.29641 = f32[] add(%Arg_0.29639, %Arg_1.29640)
}

%region_1157.29459 (Arg_0.29456: f32[], Arg_1.29457: f32[]) -> f32[] {
  %Arg_0.29456 = f32[] parameter(0)
  %Arg_1.29457 = f32[] parameter(1)
  ROOT %add.29458 = f32[] add(%Arg_0.29456, %Arg_1.29457)
}

%region_1159.29553 (Arg_0.29550: bf16[], Arg_1.29551: bf16[]) -> bf16[] {
  %Arg_0.29550 = bf16[] parameter(0)
  %Arg_1.29551 = bf16[] parameter(1)
  ROOT %add.29552 = bf16[] add(%Arg_0.29550, %Arg_1.29551)
}

%region_1159.29553.clone (Arg_0.1647: bf16[], Arg_1.1322: bf16[]) -> bf16[] {
  %Arg_0.1647 = bf16[] parameter(0)
  %Arg_1.1322 = bf16[] parameter(1)
  ROOT %add.1002 = bf16[] add(%Arg_0.1647, %Arg_1.1322)
}

%region_1169.29651 (Arg_0.29648: f32[], Arg_1.29649: f32[]) -> f32[] {
  %Arg_0.29648 = f32[] parameter(0)
  %Arg_1.29649 = f32[] parameter(1)
  ROOT %add.29650 = f32[] add(%Arg_0.29648, %Arg_1.29649)
}

%add.1.clone (x.3: bf16[], y.3: bf16[]) -> bf16[] {
  %x.3 = bf16[] parameter(0)
  %y.3 = bf16[] parameter(1)
  ROOT %add.1004 = bf16[] add(%x.3, %y.3)
}

%region_1170.29660 (Arg_0.29657: f32[], Arg_1.29658: f32[]) -> f32[] {
  %Arg_0.29657 = f32[] parameter(0)
  %Arg_1.29658 = f32[] parameter(1)
  ROOT %add.29659 = f32[] add(%Arg_0.29657, %Arg_1.29658)
}

%region_1170.29660.clone (Arg_0.1648: f32[], Arg_1.1323: f32[]) -> f32[] {
  %Arg_0.1648 = f32[] parameter(0)
  %Arg_1.1323 = f32[] parameter(1)
  ROOT %add.1005 = f32[] add(%Arg_0.1648, %Arg_1.1323)
}

%add.2.clone (x.5: bf16[], y.5: bf16[]) -> bf16[] {
  %x.5 = bf16[] parameter(0)
  %y.5 = bf16[] parameter(1)
  ROOT %add.1007 = bf16[] add(%x.5, %y.5)
}

%region_1171.29669 (Arg_0.29666: f32[], Arg_1.29667: f32[]) -> f32[] {
  %Arg_0.29666 = f32[] parameter(0)
  %Arg_1.29667 = f32[] parameter(1)
  ROOT %add.29668 = f32[] add(%Arg_0.29666, %Arg_1.29667)
}

%region_1171.29669.clone (Arg_0.1649: f32[], Arg_1.1324: f32[]) -> f32[] {
  %Arg_0.1649 = f32[] parameter(0)
  %Arg_1.1324 = f32[] parameter(1)
  ROOT %add.1008 = f32[] add(%Arg_0.1649, %Arg_1.1324)
}

%add.3.clone (x.7: bf16[], y.7: bf16[]) -> bf16[] {
  %x.7 = bf16[] parameter(0)
  %y.7 = bf16[] parameter(1)
  ROOT %add.1010 = bf16[] add(%x.7, %y.7)
}

%region_1172.29678 (Arg_0.29675: f32[], Arg_1.29676: f32[]) -> f32[] {
  %Arg_0.29675 = f32[] parameter(0)
  %Arg_1.29676 = f32[] parameter(1)
  ROOT %add.29677 = f32[] add(%Arg_0.29675, %Arg_1.29676)
}

%region_1172.29678.clone (Arg_0.1650: f32[], Arg_1.1325: f32[]) -> f32[] {
  %Arg_0.1650 = f32[] parameter(0)
  %Arg_1.1325 = f32[] parameter(1)
  ROOT %add.1011 = f32[] add(%Arg_0.1650, %Arg_1.1325)
}

%add.4.clone (x.9: bf16[], y.9: bf16[]) -> bf16[] {
  %x.9 = bf16[] parameter(0)
  %y.9 = bf16[] parameter(1)
  ROOT %add.1013 = bf16[] add(%x.9, %y.9)
}

%region_1173.29687 (Arg_0.29684: f32[], Arg_1.29685: f32[]) -> f32[] {
  %Arg_0.29684 = f32[] parameter(0)
  %Arg_1.29685 = f32[] parameter(1)
  ROOT %add.29686 = f32[] add(%Arg_0.29684, %Arg_1.29685)
}

%region_1173.29687.clone (Arg_0.1651: f32[], Arg_1.1326: f32[]) -> f32[] {
  %Arg_0.1651 = f32[] parameter(0)
  %Arg_1.1326 = f32[] parameter(1)
  ROOT %add.1014 = f32[] add(%Arg_0.1651, %Arg_1.1326)
}

%add.5.clone (x.11: bf16[], y.11: bf16[]) -> bf16[] {
  %x.11 = bf16[] parameter(0)
  %y.11 = bf16[] parameter(1)
  ROOT %add.1016 = bf16[] add(%x.11, %y.11)
}

%region_1174.29696 (Arg_0.29693: f32[], Arg_1.29694: f32[]) -> f32[] {
  %Arg_0.29693 = f32[] parameter(0)
  %Arg_1.29694 = f32[] parameter(1)
  ROOT %add.29695 = f32[] add(%Arg_0.29693, %Arg_1.29694)
}

%region_1174.29696.clone (Arg_0.1653: f32[], Arg_1.1327: f32[]) -> f32[] {
  %Arg_0.1653 = f32[] parameter(0)
  %Arg_1.1327 = f32[] parameter(1)
  ROOT %add.1017 = f32[] add(%Arg_0.1653, %Arg_1.1327)
}

%region_1175.29705 (Arg_0.29702: f32[], Arg_1.29703: f32[]) -> f32[] {
  %Arg_0.29702 = f32[] parameter(0)
  %Arg_1.29703 = f32[] parameter(1)
  ROOT %add.29704 = f32[] add(%Arg_0.29702, %Arg_1.29703)
}

%region_1175.29705.clone (Arg_0.1654: f32[], Arg_1.1328: f32[]) -> f32[] {
  %Arg_0.1654 = f32[] parameter(0)
  %Arg_1.1328 = f32[] parameter(1)
  ROOT %add.1018 = f32[] add(%Arg_0.1654, %Arg_1.1328)
}

%region_1176.29714 (Arg_0.29711: f32[], Arg_1.29712: f32[]) -> f32[] {
  %Arg_0.29711 = f32[] parameter(0)
  %Arg_1.29712 = f32[] parameter(1)
  ROOT %add.29713 = f32[] add(%Arg_0.29711, %Arg_1.29712)
}

%region_1176.29714.clone (Arg_0.1655: f32[], Arg_1.1329: f32[]) -> f32[] {
  %Arg_0.1655 = f32[] parameter(0)
  %Arg_1.1329 = f32[] parameter(1)
  ROOT %add.1019 = f32[] add(%Arg_0.1655, %Arg_1.1329)
}

%region_1177.29723 (Arg_0.29720: f32[], Arg_1.29721: f32[]) -> f32[] {
  %Arg_0.29720 = f32[] parameter(0)
  %Arg_1.29721 = f32[] parameter(1)
  ROOT %add.29722 = f32[] add(%Arg_0.29720, %Arg_1.29721)
}

%region_1177.29723.clone (Arg_0.1656: f32[], Arg_1.1330: f32[]) -> f32[] {
  %Arg_0.1656 = f32[] parameter(0)
  %Arg_1.1330 = f32[] parameter(1)
  ROOT %add.1020 = f32[] add(%Arg_0.1656, %Arg_1.1330)
}

%region_1130.28866 (Arg_0.28863: bf16[], Arg_1.28864: bf16[]) -> bf16[] {
  %Arg_0.28863 = bf16[] parameter(0)
  %Arg_1.28864 = bf16[] parameter(1)
  ROOT %add.28865 = bf16[] add(%Arg_0.28863, %Arg_1.28864)
}

%region_1130.28866.clone (Arg_0.1657: bf16[], Arg_1.1332: bf16[]) -> bf16[] {
  %Arg_0.1657 = bf16[] parameter(0)
  %Arg_1.1332 = bf16[] parameter(1)
  ROOT %add.1021 = bf16[] add(%Arg_0.1657, %Arg_1.1332)
}

%region_1178.29732 (Arg_0.29729: f32[], Arg_1.29730: f32[]) -> f32[] {
  %Arg_0.29729 = f32[] parameter(0)
  %Arg_1.29730 = f32[] parameter(1)
  ROOT %add.29731 = f32[] add(%Arg_0.29729, %Arg_1.29730)
}

%region_1134.28977 (Arg_0.28974: bf16[], Arg_1.28975: bf16[]) -> bf16[] {
  %Arg_0.28974 = bf16[] parameter(0)
  %Arg_1.28975 = bf16[] parameter(1)
  ROOT %add.28976 = bf16[] add(%Arg_0.28974, %Arg_1.28975)
}

%region_1134.28977.clone (Arg_0.1658: bf16[], Arg_1.1333: bf16[]) -> bf16[] {
  %Arg_0.1658 = bf16[] parameter(0)
  %Arg_1.1333 = bf16[] parameter(1)
  ROOT %add.1022 = bf16[] add(%Arg_0.1658, %Arg_1.1333)
}

%region_1179.29741 (Arg_0.29738: f32[], Arg_1.29739: f32[]) -> f32[] {
  %Arg_0.29738 = f32[] parameter(0)
  %Arg_1.29739 = f32[] parameter(1)
  ROOT %add.29740 = f32[] add(%Arg_0.29738, %Arg_1.29739)
}

%add.6.clone (x.13: bf16[], y.13: bf16[]) -> bf16[] {
  %x.13 = bf16[] parameter(0)
  %y.13 = bf16[] parameter(1)
  ROOT %add.1024 = bf16[] add(%x.13, %y.13)
}

%region_1180.29750 (Arg_0.29747: f32[], Arg_1.29748: f32[]) -> f32[] {
  %Arg_0.29747 = f32[] parameter(0)
  %Arg_1.29748 = f32[] parameter(1)
  ROOT %add.29749 = f32[] add(%Arg_0.29747, %Arg_1.29748)
}

%region_1180.29750.clone (Arg_0.1659: f32[], Arg_1.1334: f32[]) -> f32[] {
  %Arg_0.1659 = f32[] parameter(0)
  %Arg_1.1334 = f32[] parameter(1)
  ROOT %add.1025 = f32[] add(%Arg_0.1659, %Arg_1.1334)
}

%add.7.clone (x.15: bf16[], y.15: bf16[]) -> bf16[] {
  %x.15 = bf16[] parameter(0)
  %y.15 = bf16[] parameter(1)
  ROOT %add.1027 = bf16[] add(%x.15, %y.15)
}

%region_1181.29759 (Arg_0.29756: f32[], Arg_1.29757: f32[]) -> f32[] {
  %Arg_0.29756 = f32[] parameter(0)
  %Arg_1.29757 = f32[] parameter(1)
  ROOT %add.29758 = f32[] add(%Arg_0.29756, %Arg_1.29757)
}

%region_1181.29759.clone (Arg_0.1661: f32[], Arg_1.1335: f32[]) -> f32[] {
  %Arg_0.1661 = f32[] parameter(0)
  %Arg_1.1335 = f32[] parameter(1)
  ROOT %add.1028 = f32[] add(%Arg_0.1661, %Arg_1.1335)
}

%add.8.clone (x.17: bf16[], y.17: bf16[]) -> bf16[] {
  %x.17 = bf16[] parameter(0)
  %y.17 = bf16[] parameter(1)
  ROOT %add.1030 = bf16[] add(%x.17, %y.17)
}

%region_1182.29768 (Arg_0.29765: f32[], Arg_1.29766: f32[]) -> f32[] {
  %Arg_0.29765 = f32[] parameter(0)
  %Arg_1.29766 = f32[] parameter(1)
  ROOT %add.29767 = f32[] add(%Arg_0.29765, %Arg_1.29766)
}

%region_1182.29768.clone (Arg_0.1662: f32[], Arg_1.1336: f32[]) -> f32[] {
  %Arg_0.1662 = f32[] parameter(0)
  %Arg_1.1336 = f32[] parameter(1)
  ROOT %add.1031 = f32[] add(%Arg_0.1662, %Arg_1.1336)
}

%add.9.clone (x.19: bf16[], y.19: bf16[]) -> bf16[] {
  %x.19 = bf16[] parameter(0)
  %y.19 = bf16[] parameter(1)
  ROOT %add.1033 = bf16[] add(%x.19, %y.19)
}

%region_1183.29777 (Arg_0.29774: f32[], Arg_1.29775: f32[]) -> f32[] {
  %Arg_0.29774 = f32[] parameter(0)
  %Arg_1.29775 = f32[] parameter(1)
  ROOT %add.29776 = f32[] add(%Arg_0.29774, %Arg_1.29775)
}

%region_1183.29777.clone (Arg_0.1663: f32[], Arg_1.1337: f32[]) -> f32[] {
  %Arg_0.1663 = f32[] parameter(0)
  %Arg_1.1337 = f32[] parameter(1)
  ROOT %add.1034 = f32[] add(%Arg_0.1663, %Arg_1.1337)
}

%add.10.clone (x.21: bf16[], y.21: bf16[]) -> bf16[] {
  %x.21 = bf16[] parameter(0)
  %y.21 = bf16[] parameter(1)
  ROOT %add.1036 = bf16[] add(%x.21, %y.21)
}

%region_1184.29786 (Arg_0.29783: f32[], Arg_1.29784: f32[]) -> f32[] {
  %Arg_0.29783 = f32[] parameter(0)
  %Arg_1.29784 = f32[] parameter(1)
  ROOT %add.29785 = f32[] add(%Arg_0.29783, %Arg_1.29784)
}

%region_1184.29786.clone (Arg_0.1664: f32[], Arg_1.1338: f32[]) -> f32[] {
  %Arg_0.1664 = f32[] parameter(0)
  %Arg_1.1338 = f32[] parameter(1)
  ROOT %add.1037 = f32[] add(%Arg_0.1664, %Arg_1.1338)
}

%region_1185.29795 (Arg_0.29792: f32[], Arg_1.29793: f32[]) -> f32[] {
  %Arg_0.29792 = f32[] parameter(0)
  %Arg_1.29793 = f32[] parameter(1)
  ROOT %add.29794 = f32[] add(%Arg_0.29792, %Arg_1.29793)
}

%region_1185.29795.clone (Arg_0.1666: f32[], Arg_1.1339: f32[]) -> f32[] {
  %Arg_0.1666 = f32[] parameter(0)
  %Arg_1.1339 = f32[] parameter(1)
  ROOT %add.1038 = f32[] add(%Arg_0.1666, %Arg_1.1339)
}

%region_1186.29804 (Arg_0.29801: f32[], Arg_1.29802: f32[]) -> f32[] {
  %Arg_0.29801 = f32[] parameter(0)
  %Arg_1.29802 = f32[] parameter(1)
  ROOT %add.29803 = f32[] add(%Arg_0.29801, %Arg_1.29802)
}

%region_1186.29804.clone (Arg_0.1667: f32[], Arg_1.1340: f32[]) -> f32[] {
  %Arg_0.1667 = f32[] parameter(0)
  %Arg_1.1340 = f32[] parameter(1)
  ROOT %add.1039 = f32[] add(%Arg_0.1667, %Arg_1.1340)
}

%region_1187.29813 (Arg_0.29810: f32[], Arg_1.29811: f32[]) -> f32[] {
  %Arg_0.29810 = f32[] parameter(0)
  %Arg_1.29811 = f32[] parameter(1)
  ROOT %add.29812 = f32[] add(%Arg_0.29810, %Arg_1.29811)
}

%region_1187.29813.clone (Arg_0.1668: f32[], Arg_1.1341: f32[]) -> f32[] {
  %Arg_0.1668 = f32[] parameter(0)
  %Arg_1.1341 = f32[] parameter(1)
  ROOT %add.1040 = f32[] add(%Arg_0.1668, %Arg_1.1341)
}

%region_905.23682 (Arg_0.23679: bf16[], Arg_1.23680: bf16[]) -> bf16[] {
  %Arg_0.23679 = bf16[] parameter(0)
  %Arg_1.23680 = bf16[] parameter(1)
  ROOT %add.23681 = bf16[] add(%Arg_0.23679, %Arg_1.23680)
}

%region_905.23682.clone (Arg_0.1669: bf16[], Arg_1.1342: bf16[]) -> bf16[] {
  %Arg_0.1669 = bf16[] parameter(0)
  %Arg_1.1342 = bf16[] parameter(1)
  ROOT %add.1041 = bf16[] add(%Arg_0.1669, %Arg_1.1342)
}

%region_1188.29822 (Arg_0.29819: f32[], Arg_1.29820: f32[]) -> f32[] {
  %Arg_0.29819 = f32[] parameter(0)
  %Arg_1.29820 = f32[] parameter(1)
  ROOT %add.29821 = f32[] add(%Arg_0.29819, %Arg_1.29820)
}

%region_909.23793 (Arg_0.23790: bf16[], Arg_1.23791: bf16[]) -> bf16[] {
  %Arg_0.23790 = bf16[] parameter(0)
  %Arg_1.23791 = bf16[] parameter(1)
  ROOT %add.23792 = bf16[] add(%Arg_0.23790, %Arg_1.23791)
}

%region_909.23793.clone (Arg_0.1670: bf16[], Arg_1.1343: bf16[]) -> bf16[] {
  %Arg_0.1670 = bf16[] parameter(0)
  %Arg_1.1343 = bf16[] parameter(1)
  ROOT %add.1042 = bf16[] add(%Arg_0.1670, %Arg_1.1343)
}

%region_1189.29831 (Arg_0.29828: f32[], Arg_1.29829: f32[]) -> f32[] {
  %Arg_0.29828 = f32[] parameter(0)
  %Arg_1.29829 = f32[] parameter(1)
  ROOT %add.29830 = f32[] add(%Arg_0.29828, %Arg_1.29829)
}

%add.11.clone (x.23: bf16[], y.23: bf16[]) -> bf16[] {
  %x.23 = bf16[] parameter(0)
  %y.23 = bf16[] parameter(1)
  ROOT %add.1044 = bf16[] add(%x.23, %y.23)
}

%region_1190.29840 (Arg_0.29837: f32[], Arg_1.29838: f32[]) -> f32[] {
  %Arg_0.29837 = f32[] parameter(0)
  %Arg_1.29838 = f32[] parameter(1)
  ROOT %add.29839 = f32[] add(%Arg_0.29837, %Arg_1.29838)
}

%region_1190.29840.clone (Arg_0.1671: f32[], Arg_1.1344: f32[]) -> f32[] {
  %Arg_0.1671 = f32[] parameter(0)
  %Arg_1.1344 = f32[] parameter(1)
  ROOT %add.1045 = f32[] add(%Arg_0.1671, %Arg_1.1344)
}

%add.12.clone (x.25: bf16[], y.25: bf16[]) -> bf16[] {
  %x.25 = bf16[] parameter(0)
  %y.25 = bf16[] parameter(1)
  ROOT %add.1047 = bf16[] add(%x.25, %y.25)
}

%region_1191.29849 (Arg_0.29846: f32[], Arg_1.29847: f32[]) -> f32[] {
  %Arg_0.29846 = f32[] parameter(0)
  %Arg_1.29847 = f32[] parameter(1)
  ROOT %add.29848 = f32[] add(%Arg_0.29846, %Arg_1.29847)
}

%region_1191.29849.clone (Arg_0.1672: f32[], Arg_1.1345: f32[]) -> f32[] {
  %Arg_0.1672 = f32[] parameter(0)
  %Arg_1.1345 = f32[] parameter(1)
  ROOT %add.1048 = f32[] add(%Arg_0.1672, %Arg_1.1345)
}

%add.13.clone (x.27: bf16[], y.27: bf16[]) -> bf16[] {
  %x.27 = bf16[] parameter(0)
  %y.27 = bf16[] parameter(1)
  ROOT %add.1050 = bf16[] add(%x.27, %y.27)
}

%region_1192.29858 (Arg_0.29855: f32[], Arg_1.29856: f32[]) -> f32[] {
  %Arg_0.29855 = f32[] parameter(0)
  %Arg_1.29856 = f32[] parameter(1)
  ROOT %add.29857 = f32[] add(%Arg_0.29855, %Arg_1.29856)
}

%region_1192.29858.clone (Arg_0.1673: f32[], Arg_1.1346: f32[]) -> f32[] {
  %Arg_0.1673 = f32[] parameter(0)
  %Arg_1.1346 = f32[] parameter(1)
  ROOT %add.1051 = f32[] add(%Arg_0.1673, %Arg_1.1346)
}

%add.14.clone (x.29: bf16[], y.29: bf16[]) -> bf16[] {
  %x.29 = bf16[] parameter(0)
  %y.29 = bf16[] parameter(1)
  ROOT %add.1053 = bf16[] add(%x.29, %y.29)
}

%region_1193.29867 (Arg_0.29864: f32[], Arg_1.29865: f32[]) -> f32[] {
  %Arg_0.29864 = f32[] parameter(0)
  %Arg_1.29865 = f32[] parameter(1)
  ROOT %add.29866 = f32[] add(%Arg_0.29864, %Arg_1.29865)
}

%region_1193.29867.clone (Arg_0.1674: f32[], Arg_1.1347: f32[]) -> f32[] {
  %Arg_0.1674 = f32[] parameter(0)
  %Arg_1.1347 = f32[] parameter(1)
  ROOT %add.1054 = f32[] add(%Arg_0.1674, %Arg_1.1347)
}

%add.15.clone (x.31: bf16[], y.31: bf16[]) -> bf16[] {
  %x.31 = bf16[] parameter(0)
  %y.31 = bf16[] parameter(1)
  ROOT %add.1056 = bf16[] add(%x.31, %y.31)
}

%region_1194.29876 (Arg_0.29873: f32[], Arg_1.29874: f32[]) -> f32[] {
  %Arg_0.29873 = f32[] parameter(0)
  %Arg_1.29874 = f32[] parameter(1)
  ROOT %add.29875 = f32[] add(%Arg_0.29873, %Arg_1.29874)
}

%region_1194.29876.clone (Arg_0.1675: f32[], Arg_1.1348: f32[]) -> f32[] {
  %Arg_0.1675 = f32[] parameter(0)
  %Arg_1.1348 = f32[] parameter(1)
  ROOT %add.1057 = f32[] add(%Arg_0.1675, %Arg_1.1348)
}

%region_1195.29885 (Arg_0.29882: f32[], Arg_1.29883: f32[]) -> f32[] {
  %Arg_0.29882 = f32[] parameter(0)
  %Arg_1.29883 = f32[] parameter(1)
  ROOT %add.29884 = f32[] add(%Arg_0.29882, %Arg_1.29883)
}

%region_1195.29885.clone (Arg_0.1676: f32[], Arg_1.1349: f32[]) -> f32[] {
  %Arg_0.1676 = f32[] parameter(0)
  %Arg_1.1349 = f32[] parameter(1)
  ROOT %add.1058 = f32[] add(%Arg_0.1676, %Arg_1.1349)
}

%region_1196.29894 (Arg_0.29891: f32[], Arg_1.29892: f32[]) -> f32[] {
  %Arg_0.29891 = f32[] parameter(0)
  %Arg_1.29892 = f32[] parameter(1)
  ROOT %add.29893 = f32[] add(%Arg_0.29891, %Arg_1.29892)
}

%region_1196.29894.clone (Arg_0.1677: f32[], Arg_1.1350: f32[]) -> f32[] {
  %Arg_0.1677 = f32[] parameter(0)
  %Arg_1.1350 = f32[] parameter(1)
  ROOT %add.1059 = f32[] add(%Arg_0.1677, %Arg_1.1350)
}

%region_1197.29903 (Arg_0.29900: f32[], Arg_1.29901: f32[]) -> f32[] {
  %Arg_0.29900 = f32[] parameter(0)
  %Arg_1.29901 = f32[] parameter(1)
  ROOT %add.29902 = f32[] add(%Arg_0.29900, %Arg_1.29901)
}

%region_1197.29903.clone (Arg_0.1678: f32[], Arg_1.1351: f32[]) -> f32[] {
  %Arg_0.1678 = f32[] parameter(0)
  %Arg_1.1351 = f32[] parameter(1)
  ROOT %add.1060 = f32[] add(%Arg_0.1678, %Arg_1.1351)
}

%region_880.23106 (Arg_0.23103: bf16[], Arg_1.23104: bf16[]) -> bf16[] {
  %Arg_0.23103 = bf16[] parameter(0)
  %Arg_1.23104 = bf16[] parameter(1)
  ROOT %add.23105 = bf16[] add(%Arg_0.23103, %Arg_1.23104)
}

%region_880.23106.clone (Arg_0.1679: bf16[], Arg_1.1352: bf16[]) -> bf16[] {
  %Arg_0.1679 = bf16[] parameter(0)
  %Arg_1.1352 = bf16[] parameter(1)
  ROOT %add.1061 = bf16[] add(%Arg_0.1679, %Arg_1.1352)
}

%region_1198.29912 (Arg_0.29909: f32[], Arg_1.29910: f32[]) -> f32[] {
  %Arg_0.29909 = f32[] parameter(0)
  %Arg_1.29910 = f32[] parameter(1)
  ROOT %add.29911 = f32[] add(%Arg_0.29909, %Arg_1.29910)
}

%region_884.23217 (Arg_0.23214: bf16[], Arg_1.23215: bf16[]) -> bf16[] {
  %Arg_0.23214 = bf16[] parameter(0)
  %Arg_1.23215 = bf16[] parameter(1)
  ROOT %add.23216 = bf16[] add(%Arg_0.23214, %Arg_1.23215)
}

%region_884.23217.clone (Arg_0.1681: bf16[], Arg_1.1353: bf16[]) -> bf16[] {
  %Arg_0.1681 = bf16[] parameter(0)
  %Arg_1.1353 = bf16[] parameter(1)
  ROOT %add.1062 = bf16[] add(%Arg_0.1681, %Arg_1.1353)
}

%region_1199.29921 (Arg_0.29918: f32[], Arg_1.29919: f32[]) -> f32[] {
  %Arg_0.29918 = f32[] parameter(0)
  %Arg_1.29919 = f32[] parameter(1)
  ROOT %add.29920 = f32[] add(%Arg_0.29918, %Arg_1.29919)
}

%add.16.clone (x.33: bf16[], y.33: bf16[]) -> bf16[] {
  %x.33 = bf16[] parameter(0)
  %y.33 = bf16[] parameter(1)
  ROOT %add.1064 = bf16[] add(%x.33, %y.33)
}

%region_1200.29930 (Arg_0.29927: f32[], Arg_1.29928: f32[]) -> f32[] {
  %Arg_0.29927 = f32[] parameter(0)
  %Arg_1.29928 = f32[] parameter(1)
  ROOT %add.29929 = f32[] add(%Arg_0.29927, %Arg_1.29928)
}

%region_1200.29930.clone (Arg_0.1682: f32[], Arg_1.1354: f32[]) -> f32[] {
  %Arg_0.1682 = f32[] parameter(0)
  %Arg_1.1354 = f32[] parameter(1)
  ROOT %add.1065 = f32[] add(%Arg_0.1682, %Arg_1.1354)
}

%add.17.clone (x.35: bf16[], y.35: bf16[]) -> bf16[] {
  %x.35 = bf16[] parameter(0)
  %y.35 = bf16[] parameter(1)
  ROOT %add.1067 = bf16[] add(%x.35, %y.35)
}

%region_1201.29939 (Arg_0.29936: f32[], Arg_1.29937: f32[]) -> f32[] {
  %Arg_0.29936 = f32[] parameter(0)
  %Arg_1.29937 = f32[] parameter(1)
  ROOT %add.29938 = f32[] add(%Arg_0.29936, %Arg_1.29937)
}

%region_1201.29939.clone (Arg_0.1683: f32[], Arg_1.1355: f32[]) -> f32[] {
  %Arg_0.1683 = f32[] parameter(0)
  %Arg_1.1355 = f32[] parameter(1)
  ROOT %add.1068 = f32[] add(%Arg_0.1683, %Arg_1.1355)
}

%add.18.clone (x.37: bf16[], y.37: bf16[]) -> bf16[] {
  %x.37 = bf16[] parameter(0)
  %y.37 = bf16[] parameter(1)
  ROOT %add.1070 = bf16[] add(%x.37, %y.37)
}

%region_1202.29948 (Arg_0.29945: f32[], Arg_1.29946: f32[]) -> f32[] {
  %Arg_0.29945 = f32[] parameter(0)
  %Arg_1.29946 = f32[] parameter(1)
  ROOT %add.29947 = f32[] add(%Arg_0.29945, %Arg_1.29946)
}

%region_1202.29948.clone (Arg_0.1684: f32[], Arg_1.1356: f32[]) -> f32[] {
  %Arg_0.1684 = f32[] parameter(0)
  %Arg_1.1356 = f32[] parameter(1)
  ROOT %add.1071 = f32[] add(%Arg_0.1684, %Arg_1.1356)
}

%add.19.clone (x.39: bf16[], y.39: bf16[]) -> bf16[] {
  %x.39 = bf16[] parameter(0)
  %y.39 = bf16[] parameter(1)
  ROOT %add.1073 = bf16[] add(%x.39, %y.39)
}

%region_1203.29957 (Arg_0.29954: f32[], Arg_1.29955: f32[]) -> f32[] {
  %Arg_0.29954 = f32[] parameter(0)
  %Arg_1.29955 = f32[] parameter(1)
  ROOT %add.29956 = f32[] add(%Arg_0.29954, %Arg_1.29955)
}

%region_1203.29957.clone (Arg_0.1685: f32[], Arg_1.1358: f32[]) -> f32[] {
  %Arg_0.1685 = f32[] parameter(0)
  %Arg_1.1358 = f32[] parameter(1)
  ROOT %add.1074 = f32[] add(%Arg_0.1685, %Arg_1.1358)
}

%add.20.clone (x.41: bf16[], y.41: bf16[]) -> bf16[] {
  %x.41 = bf16[] parameter(0)
  %y.41 = bf16[] parameter(1)
  ROOT %add.1076 = bf16[] add(%x.41, %y.41)
}

%region_1204.29966 (Arg_0.29963: f32[], Arg_1.29964: f32[]) -> f32[] {
  %Arg_0.29963 = f32[] parameter(0)
  %Arg_1.29964 = f32[] parameter(1)
  ROOT %add.29965 = f32[] add(%Arg_0.29963, %Arg_1.29964)
}

%region_1204.29966.clone (Arg_0.1686: f32[], Arg_1.1359: f32[]) -> f32[] {
  %Arg_0.1686 = f32[] parameter(0)
  %Arg_1.1359 = f32[] parameter(1)
  ROOT %add.1077 = f32[] add(%Arg_0.1686, %Arg_1.1359)
}

%region_1205.29975 (Arg_0.29972: f32[], Arg_1.29973: f32[]) -> f32[] {
  %Arg_0.29972 = f32[] parameter(0)
  %Arg_1.29973 = f32[] parameter(1)
  ROOT %add.29974 = f32[] add(%Arg_0.29972, %Arg_1.29973)
}

%region_1205.29975.clone (Arg_0.1687: f32[], Arg_1.1360: f32[]) -> f32[] {
  %Arg_0.1687 = f32[] parameter(0)
  %Arg_1.1360 = f32[] parameter(1)
  ROOT %add.1078 = f32[] add(%Arg_0.1687, %Arg_1.1360)
}

%region_1206.29984 (Arg_0.29981: f32[], Arg_1.29982: f32[]) -> f32[] {
  %Arg_0.29981 = f32[] parameter(0)
  %Arg_1.29982 = f32[] parameter(1)
  ROOT %add.29983 = f32[] add(%Arg_0.29981, %Arg_1.29982)
}

%region_1206.29984.clone (Arg_0.1688: f32[], Arg_1.1361: f32[]) -> f32[] {
  %Arg_0.1688 = f32[] parameter(0)
  %Arg_1.1361 = f32[] parameter(1)
  ROOT %add.1079 = f32[] add(%Arg_0.1688, %Arg_1.1361)
}

%region_1207.29993 (Arg_0.29990: f32[], Arg_1.29991: f32[]) -> f32[] {
  %Arg_0.29990 = f32[] parameter(0)
  %Arg_1.29991 = f32[] parameter(1)
  ROOT %add.29992 = f32[] add(%Arg_0.29990, %Arg_1.29991)
}

%region_1207.29993.clone (Arg_0.1689: f32[], Arg_1.1362: f32[]) -> f32[] {
  %Arg_0.1689 = f32[] parameter(0)
  %Arg_1.1362 = f32[] parameter(1)
  ROOT %add.1080 = f32[] add(%Arg_0.1689, %Arg_1.1362)
}

%region_855.22530 (Arg_0.22527: bf16[], Arg_1.22528: bf16[]) -> bf16[] {
  %Arg_0.22527 = bf16[] parameter(0)
  %Arg_1.22528 = bf16[] parameter(1)
  ROOT %add.22529 = bf16[] add(%Arg_0.22527, %Arg_1.22528)
}

%region_855.22530.clone (Arg_0.1690: bf16[], Arg_1.1363: bf16[]) -> bf16[] {
  %Arg_0.1690 = bf16[] parameter(0)
  %Arg_1.1363 = bf16[] parameter(1)
  ROOT %add.1081 = bf16[] add(%Arg_0.1690, %Arg_1.1363)
}

%region_1208.30002 (Arg_0.29999: f32[], Arg_1.30000: f32[]) -> f32[] {
  %Arg_0.29999 = f32[] parameter(0)
  %Arg_1.30000 = f32[] parameter(1)
  ROOT %add.30001 = f32[] add(%Arg_0.29999, %Arg_1.30000)
}

%region_859.22641 (Arg_0.22638: bf16[], Arg_1.22639: bf16[]) -> bf16[] {
  %Arg_0.22638 = bf16[] parameter(0)
  %Arg_1.22639 = bf16[] parameter(1)
  ROOT %add.22640 = bf16[] add(%Arg_0.22638, %Arg_1.22639)
}

%region_859.22641.clone (Arg_0.1691: bf16[], Arg_1.1364: bf16[]) -> bf16[] {
  %Arg_0.1691 = bf16[] parameter(0)
  %Arg_1.1364 = bf16[] parameter(1)
  ROOT %add.1082 = bf16[] add(%Arg_0.1691, %Arg_1.1364)
}

%region_1209.30011 (Arg_0.30008: f32[], Arg_1.30009: f32[]) -> f32[] {
  %Arg_0.30008 = f32[] parameter(0)
  %Arg_1.30009 = f32[] parameter(1)
  ROOT %add.30010 = f32[] add(%Arg_0.30008, %Arg_1.30009)
}

%add.21.clone (x.43: bf16[], y.43: bf16[]) -> bf16[] {
  %x.43 = bf16[] parameter(0)
  %y.43 = bf16[] parameter(1)
  ROOT %add.1084 = bf16[] add(%x.43, %y.43)
}

%region_1210.30020 (Arg_0.30017: f32[], Arg_1.30018: f32[]) -> f32[] {
  %Arg_0.30017 = f32[] parameter(0)
  %Arg_1.30018 = f32[] parameter(1)
  ROOT %add.30019 = f32[] add(%Arg_0.30017, %Arg_1.30018)
}

%region_1210.30020.clone (Arg_0.1692: f32[], Arg_1.1365: f32[]) -> f32[] {
  %Arg_0.1692 = f32[] parameter(0)
  %Arg_1.1365 = f32[] parameter(1)
  ROOT %add.1085 = f32[] add(%Arg_0.1692, %Arg_1.1365)
}

%add.22.clone (x.45: bf16[], y.45: bf16[]) -> bf16[] {
  %x.45 = bf16[] parameter(0)
  %y.45 = bf16[] parameter(1)
  ROOT %add.1087 = bf16[] add(%x.45, %y.45)
}

%region_1211.30029 (Arg_0.30026: f32[], Arg_1.30027: f32[]) -> f32[] {
  %Arg_0.30026 = f32[] parameter(0)
  %Arg_1.30027 = f32[] parameter(1)
  ROOT %add.30028 = f32[] add(%Arg_0.30026, %Arg_1.30027)
}

%region_1211.30029.clone (Arg_0.1693: f32[], Arg_1.1366: f32[]) -> f32[] {
  %Arg_0.1693 = f32[] parameter(0)
  %Arg_1.1366 = f32[] parameter(1)
  ROOT %add.1088 = f32[] add(%Arg_0.1693, %Arg_1.1366)
}

%add.23.clone (x.47: bf16[], y.47: bf16[]) -> bf16[] {
  %x.47 = bf16[] parameter(0)
  %y.47 = bf16[] parameter(1)
  ROOT %add.1090 = bf16[] add(%x.47, %y.47)
}

%region_1212.30038 (Arg_0.30035: f32[], Arg_1.30036: f32[]) -> f32[] {
  %Arg_0.30035 = f32[] parameter(0)
  %Arg_1.30036 = f32[] parameter(1)
  ROOT %add.30037 = f32[] add(%Arg_0.30035, %Arg_1.30036)
}

%region_1212.30038.clone (Arg_0.1694: f32[], Arg_1.1367: f32[]) -> f32[] {
  %Arg_0.1694 = f32[] parameter(0)
  %Arg_1.1367 = f32[] parameter(1)
  ROOT %add.1091 = f32[] add(%Arg_0.1694, %Arg_1.1367)
}

%add.24.clone (x.49: bf16[], y.49: bf16[]) -> bf16[] {
  %x.49 = bf16[] parameter(0)
  %y.49 = bf16[] parameter(1)
  ROOT %add.1093 = bf16[] add(%x.49, %y.49)
}

%region_1213.30047 (Arg_0.30044: f32[], Arg_1.30045: f32[]) -> f32[] {
  %Arg_0.30044 = f32[] parameter(0)
  %Arg_1.30045 = f32[] parameter(1)
  ROOT %add.30046 = f32[] add(%Arg_0.30044, %Arg_1.30045)
}

%region_1213.30047.clone (Arg_0.1695: f32[], Arg_1.1368: f32[]) -> f32[] {
  %Arg_0.1695 = f32[] parameter(0)
  %Arg_1.1368 = f32[] parameter(1)
  ROOT %add.1094 = f32[] add(%Arg_0.1695, %Arg_1.1368)
}

%add.25.clone (x.51: bf16[], y.51: bf16[]) -> bf16[] {
  %x.51 = bf16[] parameter(0)
  %y.51 = bf16[] parameter(1)
  ROOT %add.1096 = bf16[] add(%x.51, %y.51)
}

%region_1214.30056 (Arg_0.30053: f32[], Arg_1.30054: f32[]) -> f32[] {
  %Arg_0.30053 = f32[] parameter(0)
  %Arg_1.30054 = f32[] parameter(1)
  ROOT %add.30055 = f32[] add(%Arg_0.30053, %Arg_1.30054)
}

%region_1214.30056.clone (Arg_0.1696: f32[], Arg_1.1370: f32[]) -> f32[] {
  %Arg_0.1696 = f32[] parameter(0)
  %Arg_1.1370 = f32[] parameter(1)
  ROOT %add.1097 = f32[] add(%Arg_0.1696, %Arg_1.1370)
}

%region_1215.30065 (Arg_0.30062: f32[], Arg_1.30063: f32[]) -> f32[] {
  %Arg_0.30062 = f32[] parameter(0)
  %Arg_1.30063 = f32[] parameter(1)
  ROOT %add.30064 = f32[] add(%Arg_0.30062, %Arg_1.30063)
}

%region_1215.30065.clone (Arg_0.1697: f32[], Arg_1.1371: f32[]) -> f32[] {
  %Arg_0.1697 = f32[] parameter(0)
  %Arg_1.1371 = f32[] parameter(1)
  ROOT %add.1098 = f32[] add(%Arg_0.1697, %Arg_1.1371)
}

%region_1216.30074 (Arg_0.30071: f32[], Arg_1.30072: f32[]) -> f32[] {
  %Arg_0.30071 = f32[] parameter(0)
  %Arg_1.30072 = f32[] parameter(1)
  ROOT %add.30073 = f32[] add(%Arg_0.30071, %Arg_1.30072)
}

%region_1216.30074.clone (Arg_0.1698: f32[], Arg_1.1372: f32[]) -> f32[] {
  %Arg_0.1698 = f32[] parameter(0)
  %Arg_1.1372 = f32[] parameter(1)
  ROOT %add.1099 = f32[] add(%Arg_0.1698, %Arg_1.1372)
}

%region_1217.30083 (Arg_0.30080: f32[], Arg_1.30081: f32[]) -> f32[] {
  %Arg_0.30080 = f32[] parameter(0)
  %Arg_1.30081 = f32[] parameter(1)
  ROOT %add.30082 = f32[] add(%Arg_0.30080, %Arg_1.30081)
}

%region_1217.30083.clone (Arg_0.1699: f32[], Arg_1.1373: f32[]) -> f32[] {
  %Arg_0.1699 = f32[] parameter(0)
  %Arg_1.1373 = f32[] parameter(1)
  ROOT %add.1100 = f32[] add(%Arg_0.1699, %Arg_1.1373)
}

%region_830.21954 (Arg_0.21951: bf16[], Arg_1.21952: bf16[]) -> bf16[] {
  %Arg_0.21951 = bf16[] parameter(0)
  %Arg_1.21952 = bf16[] parameter(1)
  ROOT %add.21953 = bf16[] add(%Arg_0.21951, %Arg_1.21952)
}

%region_830.21954.clone (Arg_0.1700: bf16[], Arg_1.1374: bf16[]) -> bf16[] {
  %Arg_0.1700 = bf16[] parameter(0)
  %Arg_1.1374 = bf16[] parameter(1)
  ROOT %add.1101 = bf16[] add(%Arg_0.1700, %Arg_1.1374)
}

%region_1218.30092 (Arg_0.30089: f32[], Arg_1.30090: f32[]) -> f32[] {
  %Arg_0.30089 = f32[] parameter(0)
  %Arg_1.30090 = f32[] parameter(1)
  ROOT %add.30091 = f32[] add(%Arg_0.30089, %Arg_1.30090)
}

%region_834.22065 (Arg_0.22062: bf16[], Arg_1.22063: bf16[]) -> bf16[] {
  %Arg_0.22062 = bf16[] parameter(0)
  %Arg_1.22063 = bf16[] parameter(1)
  ROOT %add.22064 = bf16[] add(%Arg_0.22062, %Arg_1.22063)
}

%region_834.22065.clone (Arg_0.1701: bf16[], Arg_1.1375: bf16[]) -> bf16[] {
  %Arg_0.1701 = bf16[] parameter(0)
  %Arg_1.1375 = bf16[] parameter(1)
  ROOT %add.1102 = bf16[] add(%Arg_0.1701, %Arg_1.1375)
}

%region_1219.30101 (Arg_0.30098: f32[], Arg_1.30099: f32[]) -> f32[] {
  %Arg_0.30098 = f32[] parameter(0)
  %Arg_1.30099 = f32[] parameter(1)
  ROOT %add.30100 = f32[] add(%Arg_0.30098, %Arg_1.30099)
}

%add.26.clone (x.53: bf16[], y.53: bf16[]) -> bf16[] {
  %x.53 = bf16[] parameter(0)
  %y.53 = bf16[] parameter(1)
  ROOT %add.1104 = bf16[] add(%x.53, %y.53)
}

%region_1220.30110 (Arg_0.30107: f32[], Arg_1.30108: f32[]) -> f32[] {
  %Arg_0.30107 = f32[] parameter(0)
  %Arg_1.30108 = f32[] parameter(1)
  ROOT %add.30109 = f32[] add(%Arg_0.30107, %Arg_1.30108)
}

%region_1220.30110.clone (Arg_0.1702: f32[], Arg_1.1376: f32[]) -> f32[] {
  %Arg_0.1702 = f32[] parameter(0)
  %Arg_1.1376 = f32[] parameter(1)
  ROOT %add.1105 = f32[] add(%Arg_0.1702, %Arg_1.1376)
}

%add.27.clone (x.55: bf16[], y.55: bf16[]) -> bf16[] {
  %x.55 = bf16[] parameter(0)
  %y.55 = bf16[] parameter(1)
  ROOT %add.1107 = bf16[] add(%x.55, %y.55)
}

%region_1221.30119 (Arg_0.30116: f32[], Arg_1.30117: f32[]) -> f32[] {
  %Arg_0.30116 = f32[] parameter(0)
  %Arg_1.30117 = f32[] parameter(1)
  ROOT %add.30118 = f32[] add(%Arg_0.30116, %Arg_1.30117)
}

%region_1221.30119.clone (Arg_0.1703: f32[], Arg_1.1377: f32[]) -> f32[] {
  %Arg_0.1703 = f32[] parameter(0)
  %Arg_1.1377 = f32[] parameter(1)
  ROOT %add.1108 = f32[] add(%Arg_0.1703, %Arg_1.1377)
}

%add.28.clone (x.57: bf16[], y.57: bf16[]) -> bf16[] {
  %x.57 = bf16[] parameter(0)
  %y.57 = bf16[] parameter(1)
  ROOT %add.1110 = bf16[] add(%x.57, %y.57)
}

%region_1222.30128 (Arg_0.30125: f32[], Arg_1.30126: f32[]) -> f32[] {
  %Arg_0.30125 = f32[] parameter(0)
  %Arg_1.30126 = f32[] parameter(1)
  ROOT %add.30127 = f32[] add(%Arg_0.30125, %Arg_1.30126)
}

%region_1222.30128.clone (Arg_0.1704: f32[], Arg_1.1378: f32[]) -> f32[] {
  %Arg_0.1704 = f32[] parameter(0)
  %Arg_1.1378 = f32[] parameter(1)
  ROOT %add.1111 = f32[] add(%Arg_0.1704, %Arg_1.1378)
}

%add.29.clone (x.59: bf16[], y.59: bf16[]) -> bf16[] {
  %x.59 = bf16[] parameter(0)
  %y.59 = bf16[] parameter(1)
  ROOT %add.1113 = bf16[] add(%x.59, %y.59)
}

%region_1223.30137 (Arg_0.30134: f32[], Arg_1.30135: f32[]) -> f32[] {
  %Arg_0.30134 = f32[] parameter(0)
  %Arg_1.30135 = f32[] parameter(1)
  ROOT %add.30136 = f32[] add(%Arg_0.30134, %Arg_1.30135)
}

%region_1223.30137.clone (Arg_0.1705: f32[], Arg_1.1379: f32[]) -> f32[] {
  %Arg_0.1705 = f32[] parameter(0)
  %Arg_1.1379 = f32[] parameter(1)
  ROOT %add.1114 = f32[] add(%Arg_0.1705, %Arg_1.1379)
}

%add.30.clone (x.61: bf16[], y.61: bf16[]) -> bf16[] {
  %x.61 = bf16[] parameter(0)
  %y.61 = bf16[] parameter(1)
  ROOT %add.1116 = bf16[] add(%x.61, %y.61)
}

%region_1224.30146 (Arg_0.30143: f32[], Arg_1.30144: f32[]) -> f32[] {
  %Arg_0.30143 = f32[] parameter(0)
  %Arg_1.30144 = f32[] parameter(1)
  ROOT %add.30145 = f32[] add(%Arg_0.30143, %Arg_1.30144)
}

%region_1224.30146.clone (Arg_0.1707: f32[], Arg_1.1380: f32[]) -> f32[] {
  %Arg_0.1707 = f32[] parameter(0)
  %Arg_1.1380 = f32[] parameter(1)
  ROOT %add.1117 = f32[] add(%Arg_0.1707, %Arg_1.1380)
}

%region_1225.30155 (Arg_0.30152: f32[], Arg_1.30153: f32[]) -> f32[] {
  %Arg_0.30152 = f32[] parameter(0)
  %Arg_1.30153 = f32[] parameter(1)
  ROOT %add.30154 = f32[] add(%Arg_0.30152, %Arg_1.30153)
}

%region_1225.30155.clone (Arg_0.1708: f32[], Arg_1.1381: f32[]) -> f32[] {
  %Arg_0.1708 = f32[] parameter(0)
  %Arg_1.1381 = f32[] parameter(1)
  ROOT %add.1118 = f32[] add(%Arg_0.1708, %Arg_1.1381)
}

%region_1226.30164 (Arg_0.30161: f32[], Arg_1.30162: f32[]) -> f32[] {
  %Arg_0.30161 = f32[] parameter(0)
  %Arg_1.30162 = f32[] parameter(1)
  ROOT %add.30163 = f32[] add(%Arg_0.30161, %Arg_1.30162)
}

%region_1226.30164.clone (Arg_0.1709: f32[], Arg_1.1382: f32[]) -> f32[] {
  %Arg_0.1709 = f32[] parameter(0)
  %Arg_1.1382 = f32[] parameter(1)
  ROOT %add.1119 = f32[] add(%Arg_0.1709, %Arg_1.1382)
}

%region_1227.30173 (Arg_0.30170: f32[], Arg_1.30171: f32[]) -> f32[] {
  %Arg_0.30170 = f32[] parameter(0)
  %Arg_1.30171 = f32[] parameter(1)
  ROOT %add.30172 = f32[] add(%Arg_0.30170, %Arg_1.30171)
}

%region_1227.30173.clone (Arg_0.1710: f32[], Arg_1.1383: f32[]) -> f32[] {
  %Arg_0.1710 = f32[] parameter(0)
  %Arg_1.1383 = f32[] parameter(1)
  ROOT %add.1120 = f32[] add(%Arg_0.1710, %Arg_1.1383)
}

%region_805.21378 (Arg_0.21375: bf16[], Arg_1.21376: bf16[]) -> bf16[] {
  %Arg_0.21375 = bf16[] parameter(0)
  %Arg_1.21376 = bf16[] parameter(1)
  ROOT %add.21377 = bf16[] add(%Arg_0.21375, %Arg_1.21376)
}

%region_805.21378.clone (Arg_0.1711: bf16[], Arg_1.1384: bf16[]) -> bf16[] {
  %Arg_0.1711 = bf16[] parameter(0)
  %Arg_1.1384 = bf16[] parameter(1)
  ROOT %add.1121 = bf16[] add(%Arg_0.1711, %Arg_1.1384)
}

%region_1228.30182 (Arg_0.30179: f32[], Arg_1.30180: f32[]) -> f32[] {
  %Arg_0.30179 = f32[] parameter(0)
  %Arg_1.30180 = f32[] parameter(1)
  ROOT %add.30181 = f32[] add(%Arg_0.30179, %Arg_1.30180)
}

%region_809.21489 (Arg_0.21486: bf16[], Arg_1.21487: bf16[]) -> bf16[] {
  %Arg_0.21486 = bf16[] parameter(0)
  %Arg_1.21487 = bf16[] parameter(1)
  ROOT %add.21488 = bf16[] add(%Arg_0.21486, %Arg_1.21487)
}

%region_809.21489.clone (Arg_0.1712: bf16[], Arg_1.1385: bf16[]) -> bf16[] {
  %Arg_0.1712 = bf16[] parameter(0)
  %Arg_1.1385 = bf16[] parameter(1)
  ROOT %add.1122 = bf16[] add(%Arg_0.1712, %Arg_1.1385)
}

%region_1229.30191 (Arg_0.30188: f32[], Arg_1.30189: f32[]) -> f32[] {
  %Arg_0.30188 = f32[] parameter(0)
  %Arg_1.30189 = f32[] parameter(1)
  ROOT %add.30190 = f32[] add(%Arg_0.30188, %Arg_1.30189)
}

%add.31.clone (x.63: bf16[], y.63: bf16[]) -> bf16[] {
  %x.63 = bf16[] parameter(0)
  %y.63 = bf16[] parameter(1)
  ROOT %add.1124 = bf16[] add(%x.63, %y.63)
}

%region_1230.30200 (Arg_0.30197: f32[], Arg_1.30198: f32[]) -> f32[] {
  %Arg_0.30197 = f32[] parameter(0)
  %Arg_1.30198 = f32[] parameter(1)
  ROOT %add.30199 = f32[] add(%Arg_0.30197, %Arg_1.30198)
}

%region_1230.30200.clone (Arg_0.1713: f32[], Arg_1.1386: f32[]) -> f32[] {
  %Arg_0.1713 = f32[] parameter(0)
  %Arg_1.1386 = f32[] parameter(1)
  ROOT %add.1125 = f32[] add(%Arg_0.1713, %Arg_1.1386)
}

%add.32.clone (x.65: bf16[], y.65: bf16[]) -> bf16[] {
  %x.65 = bf16[] parameter(0)
  %y.65 = bf16[] parameter(1)
  ROOT %add.1127 = bf16[] add(%x.65, %y.65)
}

%region_1231.30209 (Arg_0.30206: f32[], Arg_1.30207: f32[]) -> f32[] {
  %Arg_0.30206 = f32[] parameter(0)
  %Arg_1.30207 = f32[] parameter(1)
  ROOT %add.30208 = f32[] add(%Arg_0.30206, %Arg_1.30207)
}

%region_1231.30209.clone (Arg_0.1714: f32[], Arg_1.1387: f32[]) -> f32[] {
  %Arg_0.1714 = f32[] parameter(0)
  %Arg_1.1387 = f32[] parameter(1)
  ROOT %add.1128 = f32[] add(%Arg_0.1714, %Arg_1.1387)
}

%add.33.clone (x.67: bf16[], y.67: bf16[]) -> bf16[] {
  %x.67 = bf16[] parameter(0)
  %y.67 = bf16[] parameter(1)
  ROOT %add.1130 = bf16[] add(%x.67, %y.67)
}

%region_1232.30218 (Arg_0.30215: f32[], Arg_1.30216: f32[]) -> f32[] {
  %Arg_0.30215 = f32[] parameter(0)
  %Arg_1.30216 = f32[] parameter(1)
  ROOT %add.30217 = f32[] add(%Arg_0.30215, %Arg_1.30216)
}

%region_1232.30218.clone (Arg_0.1715: f32[], Arg_1.1388: f32[]) -> f32[] {
  %Arg_0.1715 = f32[] parameter(0)
  %Arg_1.1388 = f32[] parameter(1)
  ROOT %add.1131 = f32[] add(%Arg_0.1715, %Arg_1.1388)
}

%add.34.clone (x.69: bf16[], y.69: bf16[]) -> bf16[] {
  %x.69 = bf16[] parameter(0)
  %y.69 = bf16[] parameter(1)
  ROOT %add.1133 = bf16[] add(%x.69, %y.69)
}

%region_1233.30227 (Arg_0.30224: f32[], Arg_1.30225: f32[]) -> f32[] {
  %Arg_0.30224 = f32[] parameter(0)
  %Arg_1.30225 = f32[] parameter(1)
  ROOT %add.30226 = f32[] add(%Arg_0.30224, %Arg_1.30225)
}

%region_1233.30227.clone (Arg_0.1716: f32[], Arg_1.1389: f32[]) -> f32[] {
  %Arg_0.1716 = f32[] parameter(0)
  %Arg_1.1389 = f32[] parameter(1)
  ROOT %add.1134 = f32[] add(%Arg_0.1716, %Arg_1.1389)
}

%add.35.clone (x.71: bf16[], y.71: bf16[]) -> bf16[] {
  %x.71 = bf16[] parameter(0)
  %y.71 = bf16[] parameter(1)
  ROOT %add.1136 = bf16[] add(%x.71, %y.71)
}

%region_1234.30236 (Arg_0.30233: f32[], Arg_1.30234: f32[]) -> f32[] {
  %Arg_0.30233 = f32[] parameter(0)
  %Arg_1.30234 = f32[] parameter(1)
  ROOT %add.30235 = f32[] add(%Arg_0.30233, %Arg_1.30234)
}

%region_1234.30236.clone (Arg_0.1717: f32[], Arg_1.1390: f32[]) -> f32[] {
  %Arg_0.1717 = f32[] parameter(0)
  %Arg_1.1390 = f32[] parameter(1)
  ROOT %add.1137 = f32[] add(%Arg_0.1717, %Arg_1.1390)
}

%region_1235.30245 (Arg_0.30242: f32[], Arg_1.30243: f32[]) -> f32[] {
  %Arg_0.30242 = f32[] parameter(0)
  %Arg_1.30243 = f32[] parameter(1)
  ROOT %add.30244 = f32[] add(%Arg_0.30242, %Arg_1.30243)
}

%region_1235.30245.clone (Arg_0.1719: f32[], Arg_1.1391: f32[]) -> f32[] {
  %Arg_0.1719 = f32[] parameter(0)
  %Arg_1.1391 = f32[] parameter(1)
  ROOT %add.1138 = f32[] add(%Arg_0.1719, %Arg_1.1391)
}

%region_1236.30254 (Arg_0.30251: f32[], Arg_1.30252: f32[]) -> f32[] {
  %Arg_0.30251 = f32[] parameter(0)
  %Arg_1.30252 = f32[] parameter(1)
  ROOT %add.30253 = f32[] add(%Arg_0.30251, %Arg_1.30252)
}

%region_1236.30254.clone (Arg_0.1720: f32[], Arg_1.1392: f32[]) -> f32[] {
  %Arg_0.1720 = f32[] parameter(0)
  %Arg_1.1392 = f32[] parameter(1)
  ROOT %add.1139 = f32[] add(%Arg_0.1720, %Arg_1.1392)
}

%region_1237.30263 (Arg_0.30260: f32[], Arg_1.30261: f32[]) -> f32[] {
  %Arg_0.30260 = f32[] parameter(0)
  %Arg_1.30261 = f32[] parameter(1)
  ROOT %add.30262 = f32[] add(%Arg_0.30260, %Arg_1.30261)
}

%region_1237.30263.clone (Arg_0.1721: f32[], Arg_1.1393: f32[]) -> f32[] {
  %Arg_0.1721 = f32[] parameter(0)
  %Arg_1.1393 = f32[] parameter(1)
  ROOT %add.1140 = f32[] add(%Arg_0.1721, %Arg_1.1393)
}

%region_780.20802 (Arg_0.20799: bf16[], Arg_1.20800: bf16[]) -> bf16[] {
  %Arg_0.20799 = bf16[] parameter(0)
  %Arg_1.20800 = bf16[] parameter(1)
  ROOT %add.20801 = bf16[] add(%Arg_0.20799, %Arg_1.20800)
}

%region_780.20802.clone (Arg_0.1722: bf16[], Arg_1.1394: bf16[]) -> bf16[] {
  %Arg_0.1722 = bf16[] parameter(0)
  %Arg_1.1394 = bf16[] parameter(1)
  ROOT %add.1141 = bf16[] add(%Arg_0.1722, %Arg_1.1394)
}

%region_1238.30272 (Arg_0.30269: f32[], Arg_1.30270: f32[]) -> f32[] {
  %Arg_0.30269 = f32[] parameter(0)
  %Arg_1.30270 = f32[] parameter(1)
  ROOT %add.30271 = f32[] add(%Arg_0.30269, %Arg_1.30270)
}

%region_784.20913 (Arg_0.20910: bf16[], Arg_1.20911: bf16[]) -> bf16[] {
  %Arg_0.20910 = bf16[] parameter(0)
  %Arg_1.20911 = bf16[] parameter(1)
  ROOT %add.20912 = bf16[] add(%Arg_0.20910, %Arg_1.20911)
}

%region_784.20913.clone (Arg_0.1723: bf16[], Arg_1.1395: bf16[]) -> bf16[] {
  %Arg_0.1723 = bf16[] parameter(0)
  %Arg_1.1395 = bf16[] parameter(1)
  ROOT %add.1142 = bf16[] add(%Arg_0.1723, %Arg_1.1395)
}

%region_1239.30281 (Arg_0.30278: f32[], Arg_1.30279: f32[]) -> f32[] {
  %Arg_0.30278 = f32[] parameter(0)
  %Arg_1.30279 = f32[] parameter(1)
  ROOT %add.30280 = f32[] add(%Arg_0.30278, %Arg_1.30279)
}

%add.36.clone (x.73: bf16[], y.73: bf16[]) -> bf16[] {
  %x.73 = bf16[] parameter(0)
  %y.73 = bf16[] parameter(1)
  ROOT %add.1144 = bf16[] add(%x.73, %y.73)
}

%region_1240.30290 (Arg_0.30287: f32[], Arg_1.30288: f32[]) -> f32[] {
  %Arg_0.30287 = f32[] parameter(0)
  %Arg_1.30288 = f32[] parameter(1)
  ROOT %add.30289 = f32[] add(%Arg_0.30287, %Arg_1.30288)
}

%region_1240.30290.clone (Arg_0.1724: f32[], Arg_1.1396: f32[]) -> f32[] {
  %Arg_0.1724 = f32[] parameter(0)
  %Arg_1.1396 = f32[] parameter(1)
  ROOT %add.1145 = f32[] add(%Arg_0.1724, %Arg_1.1396)
}

%add.37.clone (x.75: bf16[], y.75: bf16[]) -> bf16[] {
  %x.75 = bf16[] parameter(0)
  %y.75 = bf16[] parameter(1)
  ROOT %add.1147 = bf16[] add(%x.75, %y.75)
}

%region_1241.30299 (Arg_0.30296: f32[], Arg_1.30297: f32[]) -> f32[] {
  %Arg_0.30296 = f32[] parameter(0)
  %Arg_1.30297 = f32[] parameter(1)
  ROOT %add.30298 = f32[] add(%Arg_0.30296, %Arg_1.30297)
}

%region_1241.30299.clone (Arg_0.1725: f32[], Arg_1.1397: f32[]) -> f32[] {
  %Arg_0.1725 = f32[] parameter(0)
  %Arg_1.1397 = f32[] parameter(1)
  ROOT %add.1148 = f32[] add(%Arg_0.1725, %Arg_1.1397)
}

%add.38.clone (x.77: bf16[], y.77: bf16[]) -> bf16[] {
  %x.77 = bf16[] parameter(0)
  %y.77 = bf16[] parameter(1)
  ROOT %add.1150 = bf16[] add(%x.77, %y.77)
}

%region_1242.30308 (Arg_0.30305: f32[], Arg_1.30306: f32[]) -> f32[] {
  %Arg_0.30305 = f32[] parameter(0)
  %Arg_1.30306 = f32[] parameter(1)
  ROOT %add.30307 = f32[] add(%Arg_0.30305, %Arg_1.30306)
}

%region_1242.30308.clone (Arg_0.1726: f32[], Arg_1.1398: f32[]) -> f32[] {
  %Arg_0.1726 = f32[] parameter(0)
  %Arg_1.1398 = f32[] parameter(1)
  ROOT %add.1151 = f32[] add(%Arg_0.1726, %Arg_1.1398)
}

%add.39.clone (x.79: bf16[], y.79: bf16[]) -> bf16[] {
  %x.79 = bf16[] parameter(0)
  %y.79 = bf16[] parameter(1)
  ROOT %add.1153 = bf16[] add(%x.79, %y.79)
}

%region_1243.30317 (Arg_0.30314: f32[], Arg_1.30315: f32[]) -> f32[] {
  %Arg_0.30314 = f32[] parameter(0)
  %Arg_1.30315 = f32[] parameter(1)
  ROOT %add.30316 = f32[] add(%Arg_0.30314, %Arg_1.30315)
}

%region_1243.30317.clone (Arg_0.1727: f32[], Arg_1.1399: f32[]) -> f32[] {
  %Arg_0.1727 = f32[] parameter(0)
  %Arg_1.1399 = f32[] parameter(1)
  ROOT %add.1154 = f32[] add(%Arg_0.1727, %Arg_1.1399)
}

%add.40.clone (x.81: bf16[], y.81: bf16[]) -> bf16[] {
  %x.81 = bf16[] parameter(0)
  %y.81 = bf16[] parameter(1)
  ROOT %add.1156 = bf16[] add(%x.81, %y.81)
}

%region_1244.30326 (Arg_0.30323: f32[], Arg_1.30324: f32[]) -> f32[] {
  %Arg_0.30323 = f32[] parameter(0)
  %Arg_1.30324 = f32[] parameter(1)
  ROOT %add.30325 = f32[] add(%Arg_0.30323, %Arg_1.30324)
}

%region_1244.30326.clone (Arg_0.1728: f32[], Arg_1.1400: f32[]) -> f32[] {
  %Arg_0.1728 = f32[] parameter(0)
  %Arg_1.1400 = f32[] parameter(1)
  ROOT %add.1157 = f32[] add(%Arg_0.1728, %Arg_1.1400)
}

%region_1245.30335 (Arg_0.30332: f32[], Arg_1.30333: f32[]) -> f32[] {
  %Arg_0.30332 = f32[] parameter(0)
  %Arg_1.30333 = f32[] parameter(1)
  ROOT %add.30334 = f32[] add(%Arg_0.30332, %Arg_1.30333)
}

%region_1245.30335.clone (Arg_0.1729: f32[], Arg_1.1401: f32[]) -> f32[] {
  %Arg_0.1729 = f32[] parameter(0)
  %Arg_1.1401 = f32[] parameter(1)
  ROOT %add.1158 = f32[] add(%Arg_0.1729, %Arg_1.1401)
}

%region_1246.30344 (Arg_0.30341: f32[], Arg_1.30342: f32[]) -> f32[] {
  %Arg_0.30341 = f32[] parameter(0)
  %Arg_1.30342 = f32[] parameter(1)
  ROOT %add.30343 = f32[] add(%Arg_0.30341, %Arg_1.30342)
}

%region_1246.30344.clone (Arg_0.1730: f32[], Arg_1.1402: f32[]) -> f32[] {
  %Arg_0.1730 = f32[] parameter(0)
  %Arg_1.1402 = f32[] parameter(1)
  ROOT %add.1159 = f32[] add(%Arg_0.1730, %Arg_1.1402)
}

%region_1247.30353 (Arg_0.30350: f32[], Arg_1.30351: f32[]) -> f32[] {
  %Arg_0.30350 = f32[] parameter(0)
  %Arg_1.30351 = f32[] parameter(1)
  ROOT %add.30352 = f32[] add(%Arg_0.30350, %Arg_1.30351)
}

%region_1247.30353.clone (Arg_0.1731: f32[], Arg_1.1403: f32[]) -> f32[] {
  %Arg_0.1731 = f32[] parameter(0)
  %Arg_1.1403 = f32[] parameter(1)
  ROOT %add.1160 = f32[] add(%Arg_0.1731, %Arg_1.1403)
}

%region_755.20226 (Arg_0.20223: bf16[], Arg_1.20224: bf16[]) -> bf16[] {
  %Arg_0.20223 = bf16[] parameter(0)
  %Arg_1.20224 = bf16[] parameter(1)
  ROOT %add.20225 = bf16[] add(%Arg_0.20223, %Arg_1.20224)
}

%region_755.20226.clone (Arg_0.1732: bf16[], Arg_1.1404: bf16[]) -> bf16[] {
  %Arg_0.1732 = bf16[] parameter(0)
  %Arg_1.1404 = bf16[] parameter(1)
  ROOT %add.1161 = bf16[] add(%Arg_0.1732, %Arg_1.1404)
}

%region_1248.30362 (Arg_0.30359: f32[], Arg_1.30360: f32[]) -> f32[] {
  %Arg_0.30359 = f32[] parameter(0)
  %Arg_1.30360 = f32[] parameter(1)
  ROOT %add.30361 = f32[] add(%Arg_0.30359, %Arg_1.30360)
}

%region_759.20337 (Arg_0.20334: bf16[], Arg_1.20335: bf16[]) -> bf16[] {
  %Arg_0.20334 = bf16[] parameter(0)
  %Arg_1.20335 = bf16[] parameter(1)
  ROOT %add.20336 = bf16[] add(%Arg_0.20334, %Arg_1.20335)
}

%region_759.20337.clone (Arg_0.1733: bf16[], Arg_1.1405: bf16[]) -> bf16[] {
  %Arg_0.1733 = bf16[] parameter(0)
  %Arg_1.1405 = bf16[] parameter(1)
  ROOT %add.1162 = bf16[] add(%Arg_0.1733, %Arg_1.1405)
}

%region_1249.30371 (Arg_0.30368: f32[], Arg_1.30369: f32[]) -> f32[] {
  %Arg_0.30368 = f32[] parameter(0)
  %Arg_1.30369 = f32[] parameter(1)
  ROOT %add.30370 = f32[] add(%Arg_0.30368, %Arg_1.30369)
}

%add.41.clone (x.83: bf16[], y.83: bf16[]) -> bf16[] {
  %x.83 = bf16[] parameter(0)
  %y.83 = bf16[] parameter(1)
  ROOT %add.1164 = bf16[] add(%x.83, %y.83)
}

%region_1250.30380 (Arg_0.30377: f32[], Arg_1.30378: f32[]) -> f32[] {
  %Arg_0.30377 = f32[] parameter(0)
  %Arg_1.30378 = f32[] parameter(1)
  ROOT %add.30379 = f32[] add(%Arg_0.30377, %Arg_1.30378)
}

%region_1250.30380.clone (Arg_0.1734: f32[], Arg_1.1407: f32[]) -> f32[] {
  %Arg_0.1734 = f32[] parameter(0)
  %Arg_1.1407 = f32[] parameter(1)
  ROOT %add.1166 = f32[] add(%Arg_0.1734, %Arg_1.1407)
}

%add.42.clone (x.85: bf16[], y.85: bf16[]) -> bf16[] {
  %x.85 = bf16[] parameter(0)
  %y.85 = bf16[] parameter(1)
  ROOT %add.1168 = bf16[] add(%x.85, %y.85)
}

%region_1251.30389 (Arg_0.30386: f32[], Arg_1.30387: f32[]) -> f32[] {
  %Arg_0.30386 = f32[] parameter(0)
  %Arg_1.30387 = f32[] parameter(1)
  ROOT %add.30388 = f32[] add(%Arg_0.30386, %Arg_1.30387)
}

%region_1251.30389.clone (Arg_0.1735: f32[], Arg_1.1408: f32[]) -> f32[] {
  %Arg_0.1735 = f32[] parameter(0)
  %Arg_1.1408 = f32[] parameter(1)
  ROOT %add.1169 = f32[] add(%Arg_0.1735, %Arg_1.1408)
}

%add.43.clone (x.87: bf16[], y.87: bf16[]) -> bf16[] {
  %x.87 = bf16[] parameter(0)
  %y.87 = bf16[] parameter(1)
  ROOT %add.1172 = bf16[] add(%x.87, %y.87)
}

%region_1252.30398 (Arg_0.30395: f32[], Arg_1.30396: f32[]) -> f32[] {
  %Arg_0.30395 = f32[] parameter(0)
  %Arg_1.30396 = f32[] parameter(1)
  ROOT %add.30397 = f32[] add(%Arg_0.30395, %Arg_1.30396)
}

%region_1252.30398.clone (Arg_0.1736: f32[], Arg_1.1409: f32[]) -> f32[] {
  %Arg_0.1736 = f32[] parameter(0)
  %Arg_1.1409 = f32[] parameter(1)
  ROOT %add.1173 = f32[] add(%Arg_0.1736, %Arg_1.1409)
}

%add.44.clone (x.89: bf16[], y.89: bf16[]) -> bf16[] {
  %x.89 = bf16[] parameter(0)
  %y.89 = bf16[] parameter(1)
  ROOT %add.1175 = bf16[] add(%x.89, %y.89)
}

%region_1253.30407 (Arg_0.30404: f32[], Arg_1.30405: f32[]) -> f32[] {
  %Arg_0.30404 = f32[] parameter(0)
  %Arg_1.30405 = f32[] parameter(1)
  ROOT %add.30406 = f32[] add(%Arg_0.30404, %Arg_1.30405)
}

%region_1253.30407.clone (Arg_0.1737: f32[], Arg_1.1410: f32[]) -> f32[] {
  %Arg_0.1737 = f32[] parameter(0)
  %Arg_1.1410 = f32[] parameter(1)
  ROOT %add.1176 = f32[] add(%Arg_0.1737, %Arg_1.1410)
}

%add.45.clone (x.91: bf16[], y.91: bf16[]) -> bf16[] {
  %x.91 = bf16[] parameter(0)
  %y.91 = bf16[] parameter(1)
  ROOT %add.1178 = bf16[] add(%x.91, %y.91)
}

%region_1254.30416 (Arg_0.30413: f32[], Arg_1.30414: f32[]) -> f32[] {
  %Arg_0.30413 = f32[] parameter(0)
  %Arg_1.30414 = f32[] parameter(1)
  ROOT %add.30415 = f32[] add(%Arg_0.30413, %Arg_1.30414)
}

%region_1254.30416.clone (Arg_0.1738: f32[], Arg_1.1411: f32[]) -> f32[] {
  %Arg_0.1738 = f32[] parameter(0)
  %Arg_1.1411 = f32[] parameter(1)
  ROOT %add.1179 = f32[] add(%Arg_0.1738, %Arg_1.1411)
}

%region_1255.30425 (Arg_0.30422: f32[], Arg_1.30423: f32[]) -> f32[] {
  %Arg_0.30422 = f32[] parameter(0)
  %Arg_1.30423 = f32[] parameter(1)
  ROOT %add.30424 = f32[] add(%Arg_0.30422, %Arg_1.30423)
}

%region_1255.30425.clone (Arg_0.1739: f32[], Arg_1.1412: f32[]) -> f32[] {
  %Arg_0.1739 = f32[] parameter(0)
  %Arg_1.1412 = f32[] parameter(1)
  ROOT %add.1180 = f32[] add(%Arg_0.1739, %Arg_1.1412)
}

%region_1256.30434 (Arg_0.30431: f32[], Arg_1.30432: f32[]) -> f32[] {
  %Arg_0.30431 = f32[] parameter(0)
  %Arg_1.30432 = f32[] parameter(1)
  ROOT %add.30433 = f32[] add(%Arg_0.30431, %Arg_1.30432)
}

%region_1256.30434.clone (Arg_0.1740: f32[], Arg_1.1414: f32[]) -> f32[] {
  %Arg_0.1740 = f32[] parameter(0)
  %Arg_1.1414 = f32[] parameter(1)
  ROOT %add.1181 = f32[] add(%Arg_0.1740, %Arg_1.1414)
}

%region_1257.30443 (Arg_0.30440: f32[], Arg_1.30441: f32[]) -> f32[] {
  %Arg_0.30440 = f32[] parameter(0)
  %Arg_1.30441 = f32[] parameter(1)
  ROOT %add.30442 = f32[] add(%Arg_0.30440, %Arg_1.30441)
}

%region_1257.30443.clone (Arg_0.1741: f32[], Arg_1.1415: f32[]) -> f32[] {
  %Arg_0.1741 = f32[] parameter(0)
  %Arg_1.1415 = f32[] parameter(1)
  ROOT %add.1182 = f32[] add(%Arg_0.1741, %Arg_1.1415)
}

%region_730.19650 (Arg_0.19647: bf16[], Arg_1.19648: bf16[]) -> bf16[] {
  %Arg_0.19647 = bf16[] parameter(0)
  %Arg_1.19648 = bf16[] parameter(1)
  ROOT %add.19649 = bf16[] add(%Arg_0.19647, %Arg_1.19648)
}

%region_730.19650.clone (Arg_0.1742: bf16[], Arg_1.1416: bf16[]) -> bf16[] {
  %Arg_0.1742 = bf16[] parameter(0)
  %Arg_1.1416 = bf16[] parameter(1)
  ROOT %add.1183 = bf16[] add(%Arg_0.1742, %Arg_1.1416)
}

%region_1258.30452 (Arg_0.30449: f32[], Arg_1.30450: f32[]) -> f32[] {
  %Arg_0.30449 = f32[] parameter(0)
  %Arg_1.30450 = f32[] parameter(1)
  ROOT %add.30451 = f32[] add(%Arg_0.30449, %Arg_1.30450)
}

%region_734.19761 (Arg_0.19758: bf16[], Arg_1.19759: bf16[]) -> bf16[] {
  %Arg_0.19758 = bf16[] parameter(0)
  %Arg_1.19759 = bf16[] parameter(1)
  ROOT %add.19760 = bf16[] add(%Arg_0.19758, %Arg_1.19759)
}

%region_734.19761.clone (Arg_0.1743: bf16[], Arg_1.1417: bf16[]) -> bf16[] {
  %Arg_0.1743 = bf16[] parameter(0)
  %Arg_1.1417 = bf16[] parameter(1)
  ROOT %add.1184 = bf16[] add(%Arg_0.1743, %Arg_1.1417)
}

%region_1259.30461 (Arg_0.30458: f32[], Arg_1.30459: f32[]) -> f32[] {
  %Arg_0.30458 = f32[] parameter(0)
  %Arg_1.30459 = f32[] parameter(1)
  ROOT %add.30460 = f32[] add(%Arg_0.30458, %Arg_1.30459)
}

%add.46.clone (x.93: bf16[], y.93: bf16[]) -> bf16[] {
  %x.93 = bf16[] parameter(0)
  %y.93 = bf16[] parameter(1)
  ROOT %add.1186 = bf16[] add(%x.93, %y.93)
}

%region_1260.30470 (Arg_0.30467: f32[], Arg_1.30468: f32[]) -> f32[] {
  %Arg_0.30467 = f32[] parameter(0)
  %Arg_1.30468 = f32[] parameter(1)
  ROOT %add.30469 = f32[] add(%Arg_0.30467, %Arg_1.30468)
}

%region_1260.30470.clone (Arg_0.1744: f32[], Arg_1.1418: f32[]) -> f32[] {
  %Arg_0.1744 = f32[] parameter(0)
  %Arg_1.1418 = f32[] parameter(1)
  ROOT %add.1187 = f32[] add(%Arg_0.1744, %Arg_1.1418)
}

%add.47.clone (x.95: bf16[], y.95: bf16[]) -> bf16[] {
  %x.95 = bf16[] parameter(0)
  %y.95 = bf16[] parameter(1)
  ROOT %add.1189 = bf16[] add(%x.95, %y.95)
}

%region_1261.30479 (Arg_0.30476: f32[], Arg_1.30477: f32[]) -> f32[] {
  %Arg_0.30476 = f32[] parameter(0)
  %Arg_1.30477 = f32[] parameter(1)
  ROOT %add.30478 = f32[] add(%Arg_0.30476, %Arg_1.30477)
}

%region_1261.30479.clone (Arg_0.1745: f32[], Arg_1.1419: f32[]) -> f32[] {
  %Arg_0.1745 = f32[] parameter(0)
  %Arg_1.1419 = f32[] parameter(1)
  ROOT %add.1190 = f32[] add(%Arg_0.1745, %Arg_1.1419)
}

%add.48.clone (x.97: bf16[], y.97: bf16[]) -> bf16[] {
  %x.97 = bf16[] parameter(0)
  %y.97 = bf16[] parameter(1)
  ROOT %add.1192 = bf16[] add(%x.97, %y.97)
}

%region_1262.30488 (Arg_0.30485: f32[], Arg_1.30486: f32[]) -> f32[] {
  %Arg_0.30485 = f32[] parameter(0)
  %Arg_1.30486 = f32[] parameter(1)
  ROOT %add.30487 = f32[] add(%Arg_0.30485, %Arg_1.30486)
}

%region_1262.30488.clone (Arg_0.1746: f32[], Arg_1.1420: f32[]) -> f32[] {
  %Arg_0.1746 = f32[] parameter(0)
  %Arg_1.1420 = f32[] parameter(1)
  ROOT %add.1193 = f32[] add(%Arg_0.1746, %Arg_1.1420)
}

%add.49.clone (x.99: bf16[], y.99: bf16[]) -> bf16[] {
  %x.99 = bf16[] parameter(0)
  %y.99 = bf16[] parameter(1)
  ROOT %add.1195 = bf16[] add(%x.99, %y.99)
}

%region_1263.30497 (Arg_0.30494: f32[], Arg_1.30495: f32[]) -> f32[] {
  %Arg_0.30494 = f32[] parameter(0)
  %Arg_1.30495 = f32[] parameter(1)
  ROOT %add.30496 = f32[] add(%Arg_0.30494, %Arg_1.30495)
}

%region_1263.30497.clone (Arg_0.1747: f32[], Arg_1.1421: f32[]) -> f32[] {
  %Arg_0.1747 = f32[] parameter(0)
  %Arg_1.1421 = f32[] parameter(1)
  ROOT %add.1196 = f32[] add(%Arg_0.1747, %Arg_1.1421)
}

%add.50.clone (x.101: bf16[], y.101: bf16[]) -> bf16[] {
  %x.101 = bf16[] parameter(0)
  %y.101 = bf16[] parameter(1)
  ROOT %add.1198 = bf16[] add(%x.101, %y.101)
}

%region_1264.30506 (Arg_0.30503: f32[], Arg_1.30504: f32[]) -> f32[] {
  %Arg_0.30503 = f32[] parameter(0)
  %Arg_1.30504 = f32[] parameter(1)
  ROOT %add.30505 = f32[] add(%Arg_0.30503, %Arg_1.30504)
}

%region_1264.30506.clone (Arg_0.1748: f32[], Arg_1.1422: f32[]) -> f32[] {
  %Arg_0.1748 = f32[] parameter(0)
  %Arg_1.1422 = f32[] parameter(1)
  ROOT %add.1199 = f32[] add(%Arg_0.1748, %Arg_1.1422)
}

%region_1265.30515 (Arg_0.30512: f32[], Arg_1.30513: f32[]) -> f32[] {
  %Arg_0.30512 = f32[] parameter(0)
  %Arg_1.30513 = f32[] parameter(1)
  ROOT %add.30514 = f32[] add(%Arg_0.30512, %Arg_1.30513)
}

%region_1265.30515.clone (Arg_0.1749: f32[], Arg_1.1423: f32[]) -> f32[] {
  %Arg_0.1749 = f32[] parameter(0)
  %Arg_1.1423 = f32[] parameter(1)
  ROOT %add.1200 = f32[] add(%Arg_0.1749, %Arg_1.1423)
}

%region_1266.30524 (Arg_0.30521: f32[], Arg_1.30522: f32[]) -> f32[] {
  %Arg_0.30521 = f32[] parameter(0)
  %Arg_1.30522 = f32[] parameter(1)
  ROOT %add.30523 = f32[] add(%Arg_0.30521, %Arg_1.30522)
}

%region_1266.30524.clone (Arg_0.1750: f32[], Arg_1.1424: f32[]) -> f32[] {
  %Arg_0.1750 = f32[] parameter(0)
  %Arg_1.1424 = f32[] parameter(1)
  ROOT %add.1201 = f32[] add(%Arg_0.1750, %Arg_1.1424)
}

%region_1267.30533 (Arg_0.30530: f32[], Arg_1.30531: f32[]) -> f32[] {
  %Arg_0.30530 = f32[] parameter(0)
  %Arg_1.30531 = f32[] parameter(1)
  ROOT %add.30532 = f32[] add(%Arg_0.30530, %Arg_1.30531)
}

%region_1267.30533.clone (Arg_0.1751: f32[], Arg_1.1425: f32[]) -> f32[] {
  %Arg_0.1751 = f32[] parameter(0)
  %Arg_1.1425 = f32[] parameter(1)
  ROOT %add.1202 = f32[] add(%Arg_0.1751, %Arg_1.1425)
}

%region_705.19074 (Arg_0.19071: bf16[], Arg_1.19072: bf16[]) -> bf16[] {
  %Arg_0.19071 = bf16[] parameter(0)
  %Arg_1.19072 = bf16[] parameter(1)
  ROOT %add.19073 = bf16[] add(%Arg_0.19071, %Arg_1.19072)
}

%region_705.19074.clone (Arg_0.1752: bf16[], Arg_1.1426: bf16[]) -> bf16[] {
  %Arg_0.1752 = bf16[] parameter(0)
  %Arg_1.1426 = bf16[] parameter(1)
  ROOT %add.1203 = bf16[] add(%Arg_0.1752, %Arg_1.1426)
}

%region_1268.30542 (Arg_0.30539: f32[], Arg_1.30540: f32[]) -> f32[] {
  %Arg_0.30539 = f32[] parameter(0)
  %Arg_1.30540 = f32[] parameter(1)
  ROOT %add.30541 = f32[] add(%Arg_0.30539, %Arg_1.30540)
}

%region_709.19185 (Arg_0.19182: bf16[], Arg_1.19183: bf16[]) -> bf16[] {
  %Arg_0.19182 = bf16[] parameter(0)
  %Arg_1.19183 = bf16[] parameter(1)
  ROOT %add.19184 = bf16[] add(%Arg_0.19182, %Arg_1.19183)
}

%region_709.19185.clone (Arg_0.1753: bf16[], Arg_1.1427: bf16[]) -> bf16[] {
  %Arg_0.1753 = bf16[] parameter(0)
  %Arg_1.1427 = bf16[] parameter(1)
  ROOT %add.1204 = bf16[] add(%Arg_0.1753, %Arg_1.1427)
}

%region_1269.30551 (Arg_0.30548: f32[], Arg_1.30549: f32[]) -> f32[] {
  %Arg_0.30548 = f32[] parameter(0)
  %Arg_1.30549 = f32[] parameter(1)
  ROOT %add.30550 = f32[] add(%Arg_0.30548, %Arg_1.30549)
}

%add.51.clone (x.103: bf16[], y.103: bf16[]) -> bf16[] {
  %x.103 = bf16[] parameter(0)
  %y.103 = bf16[] parameter(1)
  ROOT %add.1206 = bf16[] add(%x.103, %y.103)
}

%region_1270.30560 (Arg_0.30557: f32[], Arg_1.30558: f32[]) -> f32[] {
  %Arg_0.30557 = f32[] parameter(0)
  %Arg_1.30558 = f32[] parameter(1)
  ROOT %add.30559 = f32[] add(%Arg_0.30557, %Arg_1.30558)
}

%region_1270.30560.clone (Arg_0.1754: f32[], Arg_1.1428: f32[]) -> f32[] {
  %Arg_0.1754 = f32[] parameter(0)
  %Arg_1.1428 = f32[] parameter(1)
  ROOT %add.1207 = f32[] add(%Arg_0.1754, %Arg_1.1428)
}

%add.52.clone (x.105: bf16[], y.105: bf16[]) -> bf16[] {
  %x.105 = bf16[] parameter(0)
  %y.105 = bf16[] parameter(1)
  ROOT %add.1209 = bf16[] add(%x.105, %y.105)
}

%region_1271.30569 (Arg_0.30566: f32[], Arg_1.30567: f32[]) -> f32[] {
  %Arg_0.30566 = f32[] parameter(0)
  %Arg_1.30567 = f32[] parameter(1)
  ROOT %add.30568 = f32[] add(%Arg_0.30566, %Arg_1.30567)
}

%region_1271.30569.clone (Arg_0.1756: f32[], Arg_1.1429: f32[]) -> f32[] {
  %Arg_0.1756 = f32[] parameter(0)
  %Arg_1.1429 = f32[] parameter(1)
  ROOT %add.1210 = f32[] add(%Arg_0.1756, %Arg_1.1429)
}

%add.53.clone (x.107: bf16[], y.107: bf16[]) -> bf16[] {
  %x.107 = bf16[] parameter(0)
  %y.107 = bf16[] parameter(1)
  ROOT %add.1212 = bf16[] add(%x.107, %y.107)
}

%region_1272.30578 (Arg_0.30575: f32[], Arg_1.30576: f32[]) -> f32[] {
  %Arg_0.30575 = f32[] parameter(0)
  %Arg_1.30576 = f32[] parameter(1)
  ROOT %add.30577 = f32[] add(%Arg_0.30575, %Arg_1.30576)
}

%region_1272.30578.clone (Arg_0.1757: f32[], Arg_1.1430: f32[]) -> f32[] {
  %Arg_0.1757 = f32[] parameter(0)
  %Arg_1.1430 = f32[] parameter(1)
  ROOT %add.1213 = f32[] add(%Arg_0.1757, %Arg_1.1430)
}

%add.54.clone (x.109: bf16[], y.109: bf16[]) -> bf16[] {
  %x.109 = bf16[] parameter(0)
  %y.109 = bf16[] parameter(1)
  ROOT %add.1215 = bf16[] add(%x.109, %y.109)
}

%region_1273.30587 (Arg_0.30584: f32[], Arg_1.30585: f32[]) -> f32[] {
  %Arg_0.30584 = f32[] parameter(0)
  %Arg_1.30585 = f32[] parameter(1)
  ROOT %add.30586 = f32[] add(%Arg_0.30584, %Arg_1.30585)
}

%region_1273.30587.clone (Arg_0.1758: f32[], Arg_1.1431: f32[]) -> f32[] {
  %Arg_0.1758 = f32[] parameter(0)
  %Arg_1.1431 = f32[] parameter(1)
  ROOT %add.1216 = f32[] add(%Arg_0.1758, %Arg_1.1431)
}

%add.55.clone (x.111: bf16[], y.111: bf16[]) -> bf16[] {
  %x.111 = bf16[] parameter(0)
  %y.111 = bf16[] parameter(1)
  ROOT %add.1218 = bf16[] add(%x.111, %y.111)
}

%region_1274.30596 (Arg_0.30593: f32[], Arg_1.30594: f32[]) -> f32[] {
  %Arg_0.30593 = f32[] parameter(0)
  %Arg_1.30594 = f32[] parameter(1)
  ROOT %add.30595 = f32[] add(%Arg_0.30593, %Arg_1.30594)
}

%region_1274.30596.clone (Arg_0.1759: f32[], Arg_1.1432: f32[]) -> f32[] {
  %Arg_0.1759 = f32[] parameter(0)
  %Arg_1.1432 = f32[] parameter(1)
  ROOT %add.1219 = f32[] add(%Arg_0.1759, %Arg_1.1432)
}

%region_1275.30605 (Arg_0.30602: f32[], Arg_1.30603: f32[]) -> f32[] {
  %Arg_0.30602 = f32[] parameter(0)
  %Arg_1.30603 = f32[] parameter(1)
  ROOT %add.30604 = f32[] add(%Arg_0.30602, %Arg_1.30603)
}

%region_1275.30605.clone (Arg_0.1760: f32[], Arg_1.1433: f32[]) -> f32[] {
  %Arg_0.1760 = f32[] parameter(0)
  %Arg_1.1433 = f32[] parameter(1)
  ROOT %add.1220 = f32[] add(%Arg_0.1760, %Arg_1.1433)
}

%region_1276.30614 (Arg_0.30611: f32[], Arg_1.30612: f32[]) -> f32[] {
  %Arg_0.30611 = f32[] parameter(0)
  %Arg_1.30612 = f32[] parameter(1)
  ROOT %add.30613 = f32[] add(%Arg_0.30611, %Arg_1.30612)
}

%region_1276.30614.clone (Arg_0.1761: f32[], Arg_1.1434: f32[]) -> f32[] {
  %Arg_0.1761 = f32[] parameter(0)
  %Arg_1.1434 = f32[] parameter(1)
  ROOT %add.1221 = f32[] add(%Arg_0.1761, %Arg_1.1434)
}

%region_1277.30623 (Arg_0.30620: f32[], Arg_1.30621: f32[]) -> f32[] {
  %Arg_0.30620 = f32[] parameter(0)
  %Arg_1.30621 = f32[] parameter(1)
  ROOT %add.30622 = f32[] add(%Arg_0.30620, %Arg_1.30621)
}

%region_1277.30623.clone (Arg_0.1763: f32[], Arg_1.1435: f32[]) -> f32[] {
  %Arg_0.1763 = f32[] parameter(0)
  %Arg_1.1435 = f32[] parameter(1)
  ROOT %add.1222 = f32[] add(%Arg_0.1763, %Arg_1.1435)
}

%region_680.18498 (Arg_0.18495: bf16[], Arg_1.18496: bf16[]) -> bf16[] {
  %Arg_0.18495 = bf16[] parameter(0)
  %Arg_1.18496 = bf16[] parameter(1)
  ROOT %add.18497 = bf16[] add(%Arg_0.18495, %Arg_1.18496)
}

%region_680.18498.clone (Arg_0.1764: bf16[], Arg_1.1436: bf16[]) -> bf16[] {
  %Arg_0.1764 = bf16[] parameter(0)
  %Arg_1.1436 = bf16[] parameter(1)
  ROOT %add.1223 = bf16[] add(%Arg_0.1764, %Arg_1.1436)
}

%region_1278.30632 (Arg_0.30629: f32[], Arg_1.30630: f32[]) -> f32[] {
  %Arg_0.30629 = f32[] parameter(0)
  %Arg_1.30630 = f32[] parameter(1)
  ROOT %add.30631 = f32[] add(%Arg_0.30629, %Arg_1.30630)
}

%region_684.18609 (Arg_0.18606: bf16[], Arg_1.18607: bf16[]) -> bf16[] {
  %Arg_0.18606 = bf16[] parameter(0)
  %Arg_1.18607 = bf16[] parameter(1)
  ROOT %add.18608 = bf16[] add(%Arg_0.18606, %Arg_1.18607)
}

%region_684.18609.clone (Arg_0.1765: bf16[], Arg_1.1438: bf16[]) -> bf16[] {
  %Arg_0.1765 = bf16[] parameter(0)
  %Arg_1.1438 = bf16[] parameter(1)
  ROOT %add.1224 = bf16[] add(%Arg_0.1765, %Arg_1.1438)
}

%region_1279.30641 (Arg_0.30638: f32[], Arg_1.30639: f32[]) -> f32[] {
  %Arg_0.30638 = f32[] parameter(0)
  %Arg_1.30639 = f32[] parameter(1)
  ROOT %add.30640 = f32[] add(%Arg_0.30638, %Arg_1.30639)
}

%add.56.clone (x.113: bf16[], y.113: bf16[]) -> bf16[] {
  %x.113 = bf16[] parameter(0)
  %y.113 = bf16[] parameter(1)
  ROOT %add.1227 = bf16[] add(%x.113, %y.113)
}

%region_1280.30650 (Arg_0.30647: f32[], Arg_1.30648: f32[]) -> f32[] {
  %Arg_0.30647 = f32[] parameter(0)
  %Arg_1.30648 = f32[] parameter(1)
  ROOT %add.30649 = f32[] add(%Arg_0.30647, %Arg_1.30648)
}

%region_1280.30650.clone (Arg_0.1766: f32[], Arg_1.1439: f32[]) -> f32[] {
  %Arg_0.1766 = f32[] parameter(0)
  %Arg_1.1439 = f32[] parameter(1)
  ROOT %add.1228 = f32[] add(%Arg_0.1766, %Arg_1.1439)
}

%add.57.clone (x.115: bf16[], y.115: bf16[]) -> bf16[] {
  %x.115 = bf16[] parameter(0)
  %y.115 = bf16[] parameter(1)
  ROOT %add.1230 = bf16[] add(%x.115, %y.115)
}

%region_1281.30659 (Arg_0.30656: f32[], Arg_1.30657: f32[]) -> f32[] {
  %Arg_0.30656 = f32[] parameter(0)
  %Arg_1.30657 = f32[] parameter(1)
  ROOT %add.30658 = f32[] add(%Arg_0.30656, %Arg_1.30657)
}

%region_1281.30659.clone (Arg_0.1767: f32[], Arg_1.1440: f32[]) -> f32[] {
  %Arg_0.1767 = f32[] parameter(0)
  %Arg_1.1440 = f32[] parameter(1)
  ROOT %add.1231 = f32[] add(%Arg_0.1767, %Arg_1.1440)
}

%add.58.clone (x.117: bf16[], y.117: bf16[]) -> bf16[] {
  %x.117 = bf16[] parameter(0)
  %y.117 = bf16[] parameter(1)
  ROOT %add.1233 = bf16[] add(%x.117, %y.117)
}

%region_1282.30668 (Arg_0.30665: f32[], Arg_1.30666: f32[]) -> f32[] {
  %Arg_0.30665 = f32[] parameter(0)
  %Arg_1.30666 = f32[] parameter(1)
  ROOT %add.30667 = f32[] add(%Arg_0.30665, %Arg_1.30666)
}

%region_1282.30668.clone (Arg_0.1768: f32[], Arg_1.1441: f32[]) -> f32[] {
  %Arg_0.1768 = f32[] parameter(0)
  %Arg_1.1441 = f32[] parameter(1)
  ROOT %add.1234 = f32[] add(%Arg_0.1768, %Arg_1.1441)
}

%add.59.clone (x.119: bf16[], y.119: bf16[]) -> bf16[] {
  %x.119 = bf16[] parameter(0)
  %y.119 = bf16[] parameter(1)
  ROOT %add.1236 = bf16[] add(%x.119, %y.119)
}

%region_1283.30677 (Arg_0.30674: f32[], Arg_1.30675: f32[]) -> f32[] {
  %Arg_0.30674 = f32[] parameter(0)
  %Arg_1.30675 = f32[] parameter(1)
  ROOT %add.30676 = f32[] add(%Arg_0.30674, %Arg_1.30675)
}

%region_1283.30677.clone (Arg_0.1769: f32[], Arg_1.1442: f32[]) -> f32[] {
  %Arg_0.1769 = f32[] parameter(0)
  %Arg_1.1442 = f32[] parameter(1)
  ROOT %add.1237 = f32[] add(%Arg_0.1769, %Arg_1.1442)
}

%add.60.clone (x.121: bf16[], y.121: bf16[]) -> bf16[] {
  %x.121 = bf16[] parameter(0)
  %y.121 = bf16[] parameter(1)
  ROOT %add.1239 = bf16[] add(%x.121, %y.121)
}

%region_1284.30686 (Arg_0.30683: f32[], Arg_1.30684: f32[]) -> f32[] {
  %Arg_0.30683 = f32[] parameter(0)
  %Arg_1.30684 = f32[] parameter(1)
  ROOT %add.30685 = f32[] add(%Arg_0.30683, %Arg_1.30684)
}

%region_1284.30686.clone (Arg_0.1770: f32[], Arg_1.1443: f32[]) -> f32[] {
  %Arg_0.1770 = f32[] parameter(0)
  %Arg_1.1443 = f32[] parameter(1)
  ROOT %add.1240 = f32[] add(%Arg_0.1770, %Arg_1.1443)
}

%region_1285.30695 (Arg_0.30692: f32[], Arg_1.30693: f32[]) -> f32[] {
  %Arg_0.30692 = f32[] parameter(0)
  %Arg_1.30693 = f32[] parameter(1)
  ROOT %add.30694 = f32[] add(%Arg_0.30692, %Arg_1.30693)
}

%region_1285.30695.clone (Arg_0.1771: f32[], Arg_1.1444: f32[]) -> f32[] {
  %Arg_0.1771 = f32[] parameter(0)
  %Arg_1.1444 = f32[] parameter(1)
  ROOT %add.1241 = f32[] add(%Arg_0.1771, %Arg_1.1444)
}

%region_1286.30704 (Arg_0.30701: f32[], Arg_1.30702: f32[]) -> f32[] {
  %Arg_0.30701 = f32[] parameter(0)
  %Arg_1.30702 = f32[] parameter(1)
  ROOT %add.30703 = f32[] add(%Arg_0.30701, %Arg_1.30702)
}

%region_1286.30704.clone (Arg_0.1772: f32[], Arg_1.1445: f32[]) -> f32[] {
  %Arg_0.1772 = f32[] parameter(0)
  %Arg_1.1445 = f32[] parameter(1)
  ROOT %add.1242 = f32[] add(%Arg_0.1772, %Arg_1.1445)
}

%region_1287.30713 (Arg_0.30710: f32[], Arg_1.30711: f32[]) -> f32[] {
  %Arg_0.30710 = f32[] parameter(0)
  %Arg_1.30711 = f32[] parameter(1)
  ROOT %add.30712 = f32[] add(%Arg_0.30710, %Arg_1.30711)
}

%region_1287.30713.clone (Arg_0.1773: f32[], Arg_1.1446: f32[]) -> f32[] {
  %Arg_0.1773 = f32[] parameter(0)
  %Arg_1.1446 = f32[] parameter(1)
  ROOT %add.1243 = f32[] add(%Arg_0.1773, %Arg_1.1446)
}

%region_1105.28290 (Arg_0.28287: bf16[], Arg_1.28288: bf16[]) -> bf16[] {
  %Arg_0.28287 = bf16[] parameter(0)
  %Arg_1.28288 = bf16[] parameter(1)
  ROOT %add.28289 = bf16[] add(%Arg_0.28287, %Arg_1.28288)
}

%region_1105.28290.clone (Arg_0.1774: bf16[], Arg_1.1447: bf16[]) -> bf16[] {
  %Arg_0.1774 = bf16[] parameter(0)
  %Arg_1.1447 = bf16[] parameter(1)
  ROOT %add.1244 = bf16[] add(%Arg_0.1774, %Arg_1.1447)
}

%region_1288.30722 (Arg_0.30719: f32[], Arg_1.30720: f32[]) -> f32[] {
  %Arg_0.30719 = f32[] parameter(0)
  %Arg_1.30720 = f32[] parameter(1)
  ROOT %add.30721 = f32[] add(%Arg_0.30719, %Arg_1.30720)
}

%region_1109.28401 (Arg_0.28398: bf16[], Arg_1.28399: bf16[]) -> bf16[] {
  %Arg_0.28398 = bf16[] parameter(0)
  %Arg_1.28399 = bf16[] parameter(1)
  ROOT %add.28400 = bf16[] add(%Arg_0.28398, %Arg_1.28399)
}

%region_1109.28401.clone (Arg_0.1775: bf16[], Arg_1.1448: bf16[]) -> bf16[] {
  %Arg_0.1775 = bf16[] parameter(0)
  %Arg_1.1448 = bf16[] parameter(1)
  ROOT %add.1245 = bf16[] add(%Arg_0.1775, %Arg_1.1448)
}

%region_1289.30731 (Arg_0.30728: f32[], Arg_1.30729: f32[]) -> f32[] {
  %Arg_0.30728 = f32[] parameter(0)
  %Arg_1.30729 = f32[] parameter(1)
  ROOT %add.30730 = f32[] add(%Arg_0.30728, %Arg_1.30729)
}

%add.61.clone (x.123: bf16[], y.123: bf16[]) -> bf16[] {
  %x.123 = bf16[] parameter(0)
  %y.123 = bf16[] parameter(1)
  ROOT %add.1247 = bf16[] add(%x.123, %y.123)
}

%region_1290.30740 (Arg_0.30737: f32[], Arg_1.30738: f32[]) -> f32[] {
  %Arg_0.30737 = f32[] parameter(0)
  %Arg_1.30738 = f32[] parameter(1)
  ROOT %add.30739 = f32[] add(%Arg_0.30737, %Arg_1.30738)
}

%region_1290.30740.clone (Arg_0.1777: f32[], Arg_1.1449: f32[]) -> f32[] {
  %Arg_0.1777 = f32[] parameter(0)
  %Arg_1.1449 = f32[] parameter(1)
  ROOT %add.1248 = f32[] add(%Arg_0.1777, %Arg_1.1449)
}

%add.62.clone (x.125: bf16[], y.125: bf16[]) -> bf16[] {
  %x.125 = bf16[] parameter(0)
  %y.125 = bf16[] parameter(1)
  ROOT %add.1250 = bf16[] add(%x.125, %y.125)
}

%region_1291.30749 (Arg_0.30746: f32[], Arg_1.30747: f32[]) -> f32[] {
  %Arg_0.30746 = f32[] parameter(0)
  %Arg_1.30747 = f32[] parameter(1)
  ROOT %add.30748 = f32[] add(%Arg_0.30746, %Arg_1.30747)
}

%region_1291.30749.clone (Arg_0.1778: f32[], Arg_1.1450: f32[]) -> f32[] {
  %Arg_0.1778 = f32[] parameter(0)
  %Arg_1.1450 = f32[] parameter(1)
  ROOT %add.1251 = f32[] add(%Arg_0.1778, %Arg_1.1450)
}

%add.63.clone (x.127: bf16[], y.127: bf16[]) -> bf16[] {
  %x.127 = bf16[] parameter(0)
  %y.127 = bf16[] parameter(1)
  ROOT %add.1253 = bf16[] add(%x.127, %y.127)
}

%region_1292.30758 (Arg_0.30755: f32[], Arg_1.30756: f32[]) -> f32[] {
  %Arg_0.30755 = f32[] parameter(0)
  %Arg_1.30756 = f32[] parameter(1)
  ROOT %add.30757 = f32[] add(%Arg_0.30755, %Arg_1.30756)
}

%region_1292.30758.clone (Arg_0.1779: f32[], Arg_1.1452: f32[]) -> f32[] {
  %Arg_0.1779 = f32[] parameter(0)
  %Arg_1.1452 = f32[] parameter(1)
  ROOT %add.1254 = f32[] add(%Arg_0.1779, %Arg_1.1452)
}

%add.64.clone (x.129: bf16[], y.129: bf16[]) -> bf16[] {
  %x.129 = bf16[] parameter(0)
  %y.129 = bf16[] parameter(1)
  ROOT %add.1256 = bf16[] add(%x.129, %y.129)
}

%region_1293.30767 (Arg_0.30764: f32[], Arg_1.30765: f32[]) -> f32[] {
  %Arg_0.30764 = f32[] parameter(0)
  %Arg_1.30765 = f32[] parameter(1)
  ROOT %add.30766 = f32[] add(%Arg_0.30764, %Arg_1.30765)
}

%region_1293.30767.clone (Arg_0.1780: f32[], Arg_1.1453: f32[]) -> f32[] {
  %Arg_0.1780 = f32[] parameter(0)
  %Arg_1.1453 = f32[] parameter(1)
  ROOT %add.1257 = f32[] add(%Arg_0.1780, %Arg_1.1453)
}

%add.65.clone (x.131: bf16[], y.131: bf16[]) -> bf16[] {
  %x.131 = bf16[] parameter(0)
  %y.131 = bf16[] parameter(1)
  ROOT %add.1259 = bf16[] add(%x.131, %y.131)
}

%region_1294.30776 (Arg_0.30773: f32[], Arg_1.30774: f32[]) -> f32[] {
  %Arg_0.30773 = f32[] parameter(0)
  %Arg_1.30774 = f32[] parameter(1)
  ROOT %add.30775 = f32[] add(%Arg_0.30773, %Arg_1.30774)
}

%region_1294.30776.clone (Arg_0.1781: f32[], Arg_1.1454: f32[]) -> f32[] {
  %Arg_0.1781 = f32[] parameter(0)
  %Arg_1.1454 = f32[] parameter(1)
  ROOT %add.1260 = f32[] add(%Arg_0.1781, %Arg_1.1454)
}

%region_1295.30785 (Arg_0.30782: f32[], Arg_1.30783: f32[]) -> f32[] {
  %Arg_0.30782 = f32[] parameter(0)
  %Arg_1.30783 = f32[] parameter(1)
  ROOT %add.30784 = f32[] add(%Arg_0.30782, %Arg_1.30783)
}

%region_1295.30785.clone (Arg_0.1782: f32[], Arg_1.1455: f32[]) -> f32[] {
  %Arg_0.1782 = f32[] parameter(0)
  %Arg_1.1455 = f32[] parameter(1)
  ROOT %add.1261 = f32[] add(%Arg_0.1782, %Arg_1.1455)
}

%region_1296.30794 (Arg_0.30791: f32[], Arg_1.30792: f32[]) -> f32[] {
  %Arg_0.30791 = f32[] parameter(0)
  %Arg_1.30792 = f32[] parameter(1)
  ROOT %add.30793 = f32[] add(%Arg_0.30791, %Arg_1.30792)
}

%region_1296.30794.clone (Arg_0.1783: f32[], Arg_1.1456: f32[]) -> f32[] {
  %Arg_0.1783 = f32[] parameter(0)
  %Arg_1.1456 = f32[] parameter(1)
  ROOT %add.1262 = f32[] add(%Arg_0.1783, %Arg_1.1456)
}

%region_1297.30803 (Arg_0.30800: f32[], Arg_1.30801: f32[]) -> f32[] {
  %Arg_0.30800 = f32[] parameter(0)
  %Arg_1.30801 = f32[] parameter(1)
  ROOT %add.30802 = f32[] add(%Arg_0.30800, %Arg_1.30801)
}

%region_1297.30803.clone (Arg_0.1784: f32[], Arg_1.1457: f32[]) -> f32[] {
  %Arg_0.1784 = f32[] parameter(0)
  %Arg_1.1457 = f32[] parameter(1)
  ROOT %add.1263 = f32[] add(%Arg_0.1784, %Arg_1.1457)
}

%region_655.17922 (Arg_0.17919: bf16[], Arg_1.17920: bf16[]) -> bf16[] {
  %Arg_0.17919 = bf16[] parameter(0)
  %Arg_1.17920 = bf16[] parameter(1)
  ROOT %add.17921 = bf16[] add(%Arg_0.17919, %Arg_1.17920)
}

%region_655.17922.clone (Arg_0.1786: bf16[], Arg_1.1458: bf16[]) -> bf16[] {
  %Arg_0.1786 = bf16[] parameter(0)
  %Arg_1.1458 = bf16[] parameter(1)
  ROOT %add.1264 = bf16[] add(%Arg_0.1786, %Arg_1.1458)
}

%region_1298.30812 (Arg_0.30809: f32[], Arg_1.30810: f32[]) -> f32[] {
  %Arg_0.30809 = f32[] parameter(0)
  %Arg_1.30810 = f32[] parameter(1)
  ROOT %add.30811 = f32[] add(%Arg_0.30809, %Arg_1.30810)
}

%region_659.18033 (Arg_0.18030: bf16[], Arg_1.18031: bf16[]) -> bf16[] {
  %Arg_0.18030 = bf16[] parameter(0)
  %Arg_1.18031 = bf16[] parameter(1)
  ROOT %add.18032 = bf16[] add(%Arg_0.18030, %Arg_1.18031)
}

%region_659.18033.clone (Arg_0.1787: bf16[], Arg_1.1459: bf16[]) -> bf16[] {
  %Arg_0.1787 = bf16[] parameter(0)
  %Arg_1.1459 = bf16[] parameter(1)
  ROOT %add.1265 = bf16[] add(%Arg_0.1787, %Arg_1.1459)
}

%region_1299.30821 (Arg_0.30818: f32[], Arg_1.30819: f32[]) -> f32[] {
  %Arg_0.30818 = f32[] parameter(0)
  %Arg_1.30819 = f32[] parameter(1)
  ROOT %add.30820 = f32[] add(%Arg_0.30818, %Arg_1.30819)
}

%add.66.clone (x.133: bf16[], y.133: bf16[]) -> bf16[] {
  %x.133 = bf16[] parameter(0)
  %y.133 = bf16[] parameter(1)
  ROOT %add.1268 = bf16[] add(%x.133, %y.133)
}

%region_1300.30830 (Arg_0.30827: f32[], Arg_1.30828: f32[]) -> f32[] {
  %Arg_0.30827 = f32[] parameter(0)
  %Arg_1.30828 = f32[] parameter(1)
  ROOT %add.30829 = f32[] add(%Arg_0.30827, %Arg_1.30828)
}

%region_1300.30830.clone (Arg_0.1788: f32[], Arg_1.1461: f32[]) -> f32[] {
  %Arg_0.1788 = f32[] parameter(0)
  %Arg_1.1461 = f32[] parameter(1)
  ROOT %add.1269 = f32[] add(%Arg_0.1788, %Arg_1.1461)
}

%add.67.clone (x.135: bf16[], y.135: bf16[]) -> bf16[] {
  %x.135 = bf16[] parameter(0)
  %y.135 = bf16[] parameter(1)
  ROOT %add.1271 = bf16[] add(%x.135, %y.135)
}

%region_1301.30839 (Arg_0.30836: f32[], Arg_1.30837: f32[]) -> f32[] {
  %Arg_0.30836 = f32[] parameter(0)
  %Arg_1.30837 = f32[] parameter(1)
  ROOT %add.30838 = f32[] add(%Arg_0.30836, %Arg_1.30837)
}

%region_1301.30839.clone (Arg_0.1789: f32[], Arg_1.1462: f32[]) -> f32[] {
  %Arg_0.1789 = f32[] parameter(0)
  %Arg_1.1462 = f32[] parameter(1)
  ROOT %add.1272 = f32[] add(%Arg_0.1789, %Arg_1.1462)
}

%add.68.clone (x.137: bf16[], y.137: bf16[]) -> bf16[] {
  %x.137 = bf16[] parameter(0)
  %y.137 = bf16[] parameter(1)
  ROOT %add.1274 = bf16[] add(%x.137, %y.137)
}

%region_1302.30848 (Arg_0.30845: f32[], Arg_1.30846: f32[]) -> f32[] {
  %Arg_0.30845 = f32[] parameter(0)
  %Arg_1.30846 = f32[] parameter(1)
  ROOT %add.30847 = f32[] add(%Arg_0.30845, %Arg_1.30846)
}

%region_1302.30848.clone (Arg_0.1790: f32[], Arg_1.1463: f32[]) -> f32[] {
  %Arg_0.1790 = f32[] parameter(0)
  %Arg_1.1463 = f32[] parameter(1)
  ROOT %add.1275 = f32[] add(%Arg_0.1790, %Arg_1.1463)
}

%add.69.clone (x.139: bf16[], y.139: bf16[]) -> bf16[] {
  %x.139 = bf16[] parameter(0)
  %y.139 = bf16[] parameter(1)
  ROOT %add.1277 = bf16[] add(%x.139, %y.139)
}

%region_1303.30857 (Arg_0.30854: f32[], Arg_1.30855: f32[]) -> f32[] {
  %Arg_0.30854 = f32[] parameter(0)
  %Arg_1.30855 = f32[] parameter(1)
  ROOT %add.30856 = f32[] add(%Arg_0.30854, %Arg_1.30855)
}

%region_1303.30857.clone (Arg_0.1791: f32[], Arg_1.1464: f32[]) -> f32[] {
  %Arg_0.1791 = f32[] parameter(0)
  %Arg_1.1464 = f32[] parameter(1)
  ROOT %add.1278 = f32[] add(%Arg_0.1791, %Arg_1.1464)
}

%add.70.clone (x.141: bf16[], y.141: bf16[]) -> bf16[] {
  %x.141 = bf16[] parameter(0)
  %y.141 = bf16[] parameter(1)
  ROOT %add.1280 = bf16[] add(%x.141, %y.141)
}

%region_1304.30866 (Arg_0.30863: f32[], Arg_1.30864: f32[]) -> f32[] {
  %Arg_0.30863 = f32[] parameter(0)
  %Arg_1.30864 = f32[] parameter(1)
  ROOT %add.30865 = f32[] add(%Arg_0.30863, %Arg_1.30864)
}

%region_1304.30866.clone (Arg_0.1792: f32[], Arg_1.1465: f32[]) -> f32[] {
  %Arg_0.1792 = f32[] parameter(0)
  %Arg_1.1465 = f32[] parameter(1)
  ROOT %add.1281 = f32[] add(%Arg_0.1792, %Arg_1.1465)
}

%region_1305.30875 (Arg_0.30872: f32[], Arg_1.30873: f32[]) -> f32[] {
  %Arg_0.30872 = f32[] parameter(0)
  %Arg_1.30873 = f32[] parameter(1)
  ROOT %add.30874 = f32[] add(%Arg_0.30872, %Arg_1.30873)
}

%region_1305.30875.clone (Arg_0.1793: f32[], Arg_1.1466: f32[]) -> f32[] {
  %Arg_0.1793 = f32[] parameter(0)
  %Arg_1.1466 = f32[] parameter(1)
  ROOT %add.1282 = f32[] add(%Arg_0.1793, %Arg_1.1466)
}

%region_1306.30884 (Arg_0.30881: f32[], Arg_1.30882: f32[]) -> f32[] {
  %Arg_0.30881 = f32[] parameter(0)
  %Arg_1.30882 = f32[] parameter(1)
  ROOT %add.30883 = f32[] add(%Arg_0.30881, %Arg_1.30882)
}

%region_1306.30884.clone (Arg_0.1794: f32[], Arg_1.1467: f32[]) -> f32[] {
  %Arg_0.1794 = f32[] parameter(0)
  %Arg_1.1467 = f32[] parameter(1)
  ROOT %add.1283 = f32[] add(%Arg_0.1794, %Arg_1.1467)
}

%region_1307.30893 (Arg_0.30890: f32[], Arg_1.30891: f32[]) -> f32[] {
  %Arg_0.30890 = f32[] parameter(0)
  %Arg_1.30891 = f32[] parameter(1)
  ROOT %add.30892 = f32[] add(%Arg_0.30890, %Arg_1.30891)
}

%region_1307.30893.clone (Arg_0.1795: f32[], Arg_1.1468: f32[]) -> f32[] {
  %Arg_0.1795 = f32[] parameter(0)
  %Arg_1.1468 = f32[] parameter(1)
  ROOT %add.1284 = f32[] add(%Arg_0.1795, %Arg_1.1468)
}

%region_630.17346 (Arg_0.17343: bf16[], Arg_1.17344: bf16[]) -> bf16[] {
  %Arg_0.17343 = bf16[] parameter(0)
  %Arg_1.17344 = bf16[] parameter(1)
  ROOT %add.17345 = bf16[] add(%Arg_0.17343, %Arg_1.17344)
}

%region_630.17346.clone (Arg_0.1796: bf16[], Arg_1.1469: bf16[]) -> bf16[] {
  %Arg_0.1796 = bf16[] parameter(0)
  %Arg_1.1469 = bf16[] parameter(1)
  ROOT %add.1285 = bf16[] add(%Arg_0.1796, %Arg_1.1469)
}

%region_1308.30902 (Arg_0.30899: f32[], Arg_1.30900: f32[]) -> f32[] {
  %Arg_0.30899 = f32[] parameter(0)
  %Arg_1.30900 = f32[] parameter(1)
  ROOT %add.30901 = f32[] add(%Arg_0.30899, %Arg_1.30900)
}

%region_634.17457 (Arg_0.17454: bf16[], Arg_1.17455: bf16[]) -> bf16[] {
  %Arg_0.17454 = bf16[] parameter(0)
  %Arg_1.17455 = bf16[] parameter(1)
  ROOT %add.17456 = bf16[] add(%Arg_0.17454, %Arg_1.17455)
}

%region_634.17457.clone (Arg_0.1797: bf16[], Arg_1.1470: bf16[]) -> bf16[] {
  %Arg_0.1797 = bf16[] parameter(0)
  %Arg_1.1470 = bf16[] parameter(1)
  ROOT %add.1286 = bf16[] add(%Arg_0.1797, %Arg_1.1470)
}

%region_1309.30911 (Arg_0.30908: f32[], Arg_1.30909: f32[]) -> f32[] {
  %Arg_0.30908 = f32[] parameter(0)
  %Arg_1.30909 = f32[] parameter(1)
  ROOT %add.30910 = f32[] add(%Arg_0.30908, %Arg_1.30909)
}

%add.71.clone (x.143: bf16[], y.143: bf16[]) -> bf16[] {
  %x.143 = bf16[] parameter(0)
  %y.143 = bf16[] parameter(1)
  ROOT %add.1288 = bf16[] add(%x.143, %y.143)
}

%region_1310.30920 (Arg_0.30917: f32[], Arg_1.30918: f32[]) -> f32[] {
  %Arg_0.30917 = f32[] parameter(0)
  %Arg_1.30918 = f32[] parameter(1)
  ROOT %add.30919 = f32[] add(%Arg_0.30917, %Arg_1.30918)
}

%region_1310.30920.clone (Arg_0.1798: f32[], Arg_1.1471: f32[]) -> f32[] {
  %Arg_0.1798 = f32[] parameter(0)
  %Arg_1.1471 = f32[] parameter(1)
  ROOT %add.1289 = f32[] add(%Arg_0.1798, %Arg_1.1471)
}

%add.72.clone (x.145: bf16[], y.145: bf16[]) -> bf16[] {
  %x.145 = bf16[] parameter(0)
  %y.145 = bf16[] parameter(1)
  ROOT %add.1291 = bf16[] add(%x.145, %y.145)
}

%region_1311.30929 (Arg_0.30926: f32[], Arg_1.30927: f32[]) -> f32[] {
  %Arg_0.30926 = f32[] parameter(0)
  %Arg_1.30927 = f32[] parameter(1)
  ROOT %add.30928 = f32[] add(%Arg_0.30926, %Arg_1.30927)
}

%region_1311.30929.clone (Arg_0.1799: f32[], Arg_1.1472: f32[]) -> f32[] {
  %Arg_0.1799 = f32[] parameter(0)
  %Arg_1.1472 = f32[] parameter(1)
  ROOT %add.1292 = f32[] add(%Arg_0.1799, %Arg_1.1472)
}

%add.73.clone (x.147: bf16[], y.147: bf16[]) -> bf16[] {
  %x.147 = bf16[] parameter(0)
  %y.147 = bf16[] parameter(1)
  ROOT %add.1294 = bf16[] add(%x.147, %y.147)
}

%region_1312.30938 (Arg_0.30935: f32[], Arg_1.30936: f32[]) -> f32[] {
  %Arg_0.30935 = f32[] parameter(0)
  %Arg_1.30936 = f32[] parameter(1)
  ROOT %add.30937 = f32[] add(%Arg_0.30935, %Arg_1.30936)
}

%region_1312.30938.clone (Arg_0.1800: f32[], Arg_1.1473: f32[]) -> f32[] {
  %Arg_0.1800 = f32[] parameter(0)
  %Arg_1.1473 = f32[] parameter(1)
  ROOT %add.1295 = f32[] add(%Arg_0.1800, %Arg_1.1473)
}

%add.74.clone (x.149: bf16[], y.149: bf16[]) -> bf16[] {
  %x.149 = bf16[] parameter(0)
  %y.149 = bf16[] parameter(1)
  ROOT %add.1297 = bf16[] add(%x.149, %y.149)
}

%region_1313.30947 (Arg_0.30944: f32[], Arg_1.30945: f32[]) -> f32[] {
  %Arg_0.30944 = f32[] parameter(0)
  %Arg_1.30945 = f32[] parameter(1)
  ROOT %add.30946 = f32[] add(%Arg_0.30944, %Arg_1.30945)
}

%region_1313.30947.clone (Arg_0.1801: f32[], Arg_1.1474: f32[]) -> f32[] {
  %Arg_0.1801 = f32[] parameter(0)
  %Arg_1.1474 = f32[] parameter(1)
  ROOT %add.1298 = f32[] add(%Arg_0.1801, %Arg_1.1474)
}

%add.75.clone (x.151: bf16[], y.151: bf16[]) -> bf16[] {
  %x.151 = bf16[] parameter(0)
  %y.151 = bf16[] parameter(1)
  ROOT %add.1300 = bf16[] add(%x.151, %y.151)
}

%region_1314.30956 (Arg_0.30953: f32[], Arg_1.30954: f32[]) -> f32[] {
  %Arg_0.30953 = f32[] parameter(0)
  %Arg_1.30954 = f32[] parameter(1)
  ROOT %add.30955 = f32[] add(%Arg_0.30953, %Arg_1.30954)
}

%region_1314.30956.clone (Arg_0.1802: f32[], Arg_1.1475: f32[]) -> f32[] {
  %Arg_0.1802 = f32[] parameter(0)
  %Arg_1.1475 = f32[] parameter(1)
  ROOT %add.1301 = f32[] add(%Arg_0.1802, %Arg_1.1475)
}

%region_1315.30965 (Arg_0.30962: f32[], Arg_1.30963: f32[]) -> f32[] {
  %Arg_0.30962 = f32[] parameter(0)
  %Arg_1.30963 = f32[] parameter(1)
  ROOT %add.30964 = f32[] add(%Arg_0.30962, %Arg_1.30963)
}

%region_1315.30965.clone (Arg_0.1803: f32[], Arg_1.1476: f32[]) -> f32[] {
  %Arg_0.1803 = f32[] parameter(0)
  %Arg_1.1476 = f32[] parameter(1)
  ROOT %add.1302 = f32[] add(%Arg_0.1803, %Arg_1.1476)
}

%region_1316.30974 (Arg_0.30971: f32[], Arg_1.30972: f32[]) -> f32[] {
  %Arg_0.30971 = f32[] parameter(0)
  %Arg_1.30972 = f32[] parameter(1)
  ROOT %add.30973 = f32[] add(%Arg_0.30971, %Arg_1.30972)
}

%region_1316.30974.clone (Arg_0.1804: f32[], Arg_1.1477: f32[]) -> f32[] {
  %Arg_0.1804 = f32[] parameter(0)
  %Arg_1.1477 = f32[] parameter(1)
  ROOT %add.1303 = f32[] add(%Arg_0.1804, %Arg_1.1477)
}

%region_1317.30983 (Arg_0.30980: f32[], Arg_1.30981: f32[]) -> f32[] {
  %Arg_0.30980 = f32[] parameter(0)
  %Arg_1.30981 = f32[] parameter(1)
  ROOT %add.30982 = f32[] add(%Arg_0.30980, %Arg_1.30981)
}

%region_1317.30983.clone (Arg_0.1805: f32[], Arg_1.1478: f32[]) -> f32[] {
  %Arg_0.1805 = f32[] parameter(0)
  %Arg_1.1478 = f32[] parameter(1)
  ROOT %add.1305 = f32[] add(%Arg_0.1805, %Arg_1.1478)
}

%region_605.16770 (Arg_0.16767: bf16[], Arg_1.16768: bf16[]) -> bf16[] {
  %Arg_0.16767 = bf16[] parameter(0)
  %Arg_1.16768 = bf16[] parameter(1)
  ROOT %add.16769 = bf16[] add(%Arg_0.16767, %Arg_1.16768)
}

%region_605.16770.clone (Arg_0.1806: bf16[], Arg_1.1479: bf16[]) -> bf16[] {
  %Arg_0.1806 = bf16[] parameter(0)
  %Arg_1.1479 = bf16[] parameter(1)
  ROOT %add.1306 = bf16[] add(%Arg_0.1806, %Arg_1.1479)
}

%region_1318.30992 (Arg_0.30989: f32[], Arg_1.30990: f32[]) -> f32[] {
  %Arg_0.30989 = f32[] parameter(0)
  %Arg_1.30990 = f32[] parameter(1)
  ROOT %add.30991 = f32[] add(%Arg_0.30989, %Arg_1.30990)
}

%region_609.16881 (Arg_0.16878: bf16[], Arg_1.16879: bf16[]) -> bf16[] {
  %Arg_0.16878 = bf16[] parameter(0)
  %Arg_1.16879 = bf16[] parameter(1)
  ROOT %add.16880 = bf16[] add(%Arg_0.16878, %Arg_1.16879)
}

%region_609.16881.clone (Arg_0.1807: bf16[], Arg_1.1480: bf16[]) -> bf16[] {
  %Arg_0.1807 = bf16[] parameter(0)
  %Arg_1.1480 = bf16[] parameter(1)
  ROOT %add.1307 = bf16[] add(%Arg_0.1807, %Arg_1.1480)
}

%region_1319.31001 (Arg_0.30998: f32[], Arg_1.30999: f32[]) -> f32[] {
  %Arg_0.30998 = f32[] parameter(0)
  %Arg_1.30999 = f32[] parameter(1)
  ROOT %add.31000 = f32[] add(%Arg_0.30998, %Arg_1.30999)
}

%add.76.clone (x.153: bf16[], y.153: bf16[]) -> bf16[] {
  %x.153 = bf16[] parameter(0)
  %y.153 = bf16[] parameter(1)
  ROOT %add.1309 = bf16[] add(%x.153, %y.153)
}

%region_1320.31010 (Arg_0.31007: f32[], Arg_1.31008: f32[]) -> f32[] {
  %Arg_0.31007 = f32[] parameter(0)
  %Arg_1.31008 = f32[] parameter(1)
  ROOT %add.31009 = f32[] add(%Arg_0.31007, %Arg_1.31008)
}

%region_1320.31010.clone (Arg_0.1808: f32[], Arg_1.1481: f32[]) -> f32[] {
  %Arg_0.1808 = f32[] parameter(0)
  %Arg_1.1481 = f32[] parameter(1)
  ROOT %add.1310 = f32[] add(%Arg_0.1808, %Arg_1.1481)
}

%add.77.clone (x.155: bf16[], y.155: bf16[]) -> bf16[] {
  %x.155 = bf16[] parameter(0)
  %y.155 = bf16[] parameter(1)
  ROOT %add.1313 = bf16[] add(%x.155, %y.155)
}

%region_1321.31019 (Arg_0.31016: f32[], Arg_1.31017: f32[]) -> f32[] {
  %Arg_0.31016 = f32[] parameter(0)
  %Arg_1.31017 = f32[] parameter(1)
  ROOT %add.31018 = f32[] add(%Arg_0.31016, %Arg_1.31017)
}

%region_1321.31019.clone (Arg_0.1809: f32[], Arg_1.1482: f32[]) -> f32[] {
  %Arg_0.1809 = f32[] parameter(0)
  %Arg_1.1482 = f32[] parameter(1)
  ROOT %add.1314 = f32[] add(%Arg_0.1809, %Arg_1.1482)
}

%add.78.clone (x.157: bf16[], y.157: bf16[]) -> bf16[] {
  %x.157 = bf16[] parameter(0)
  %y.157 = bf16[] parameter(1)
  ROOT %add.1316 = bf16[] add(%x.157, %y.157)
}

%region_1322.31028 (Arg_0.31025: f32[], Arg_1.31026: f32[]) -> f32[] {
  %Arg_0.31025 = f32[] parameter(0)
  %Arg_1.31026 = f32[] parameter(1)
  ROOT %add.31027 = f32[] add(%Arg_0.31025, %Arg_1.31026)
}

%region_1322.31028.clone (Arg_0.1810: f32[], Arg_1.1483: f32[]) -> f32[] {
  %Arg_0.1810 = f32[] parameter(0)
  %Arg_1.1483 = f32[] parameter(1)
  ROOT %add.1317 = f32[] add(%Arg_0.1810, %Arg_1.1483)
}

%add.79.clone (x.159: bf16[], y.159: bf16[]) -> bf16[] {
  %x.159 = bf16[] parameter(0)
  %y.159 = bf16[] parameter(1)
  ROOT %add.1319 = bf16[] add(%x.159, %y.159)
}

%region_1323.31037 (Arg_0.31034: f32[], Arg_1.31035: f32[]) -> f32[] {
  %Arg_0.31034 = f32[] parameter(0)
  %Arg_1.31035 = f32[] parameter(1)
  ROOT %add.31036 = f32[] add(%Arg_0.31034, %Arg_1.31035)
}

%region_1323.31037.clone (Arg_0.1811: f32[], Arg_1.1484: f32[]) -> f32[] {
  %Arg_0.1811 = f32[] parameter(0)
  %Arg_1.1484 = f32[] parameter(1)
  ROOT %add.1320 = f32[] add(%Arg_0.1811, %Arg_1.1484)
}

%add.80.clone (x.161: bf16[], y.161: bf16[]) -> bf16[] {
  %x.161 = bf16[] parameter(0)
  %y.161 = bf16[] parameter(1)
  ROOT %add.1322 = bf16[] add(%x.161, %y.161)
}

%region_1324.31046 (Arg_0.31043: f32[], Arg_1.31044: f32[]) -> f32[] {
  %Arg_0.31043 = f32[] parameter(0)
  %Arg_1.31044 = f32[] parameter(1)
  ROOT %add.31045 = f32[] add(%Arg_0.31043, %Arg_1.31044)
}

%region_1324.31046.clone (Arg_0.1812: f32[], Arg_1.1485: f32[]) -> f32[] {
  %Arg_0.1812 = f32[] parameter(0)
  %Arg_1.1485 = f32[] parameter(1)
  ROOT %add.1323 = f32[] add(%Arg_0.1812, %Arg_1.1485)
}

%region_1325.31055 (Arg_0.31052: f32[], Arg_1.31053: f32[]) -> f32[] {
  %Arg_0.31052 = f32[] parameter(0)
  %Arg_1.31053 = f32[] parameter(1)
  ROOT %add.31054 = f32[] add(%Arg_0.31052, %Arg_1.31053)
}

%region_1325.31055.clone (Arg_0.1813: f32[], Arg_1.1486: f32[]) -> f32[] {
  %Arg_0.1813 = f32[] parameter(0)
  %Arg_1.1486 = f32[] parameter(1)
  ROOT %add.1324 = f32[] add(%Arg_0.1813, %Arg_1.1486)
}

%region_1326.31064 (Arg_0.31061: f32[], Arg_1.31062: f32[]) -> f32[] {
  %Arg_0.31061 = f32[] parameter(0)
  %Arg_1.31062 = f32[] parameter(1)
  ROOT %add.31063 = f32[] add(%Arg_0.31061, %Arg_1.31062)
}

%region_1326.31064.clone (Arg_0.1814: f32[], Arg_1.1487: f32[]) -> f32[] {
  %Arg_0.1814 = f32[] parameter(0)
  %Arg_1.1487 = f32[] parameter(1)
  ROOT %add.1325 = f32[] add(%Arg_0.1814, %Arg_1.1487)
}

%region_1327.31073 (Arg_0.31070: f32[], Arg_1.31071: f32[]) -> f32[] {
  %Arg_0.31070 = f32[] parameter(0)
  %Arg_1.31071 = f32[] parameter(1)
  ROOT %add.31072 = f32[] add(%Arg_0.31070, %Arg_1.31071)
}

%region_1327.31073.clone (Arg_0.1815: f32[], Arg_1.1488: f32[]) -> f32[] {
  %Arg_0.1815 = f32[] parameter(0)
  %Arg_1.1488 = f32[] parameter(1)
  ROOT %add.1326 = f32[] add(%Arg_0.1815, %Arg_1.1488)
}

%region_580.16194 (Arg_0.16191: bf16[], Arg_1.16192: bf16[]) -> bf16[] {
  %Arg_0.16191 = bf16[] parameter(0)
  %Arg_1.16192 = bf16[] parameter(1)
  ROOT %add.16193 = bf16[] add(%Arg_0.16191, %Arg_1.16192)
}

%region_580.16194.clone (Arg_0.1816: bf16[], Arg_1.1489: bf16[]) -> bf16[] {
  %Arg_0.1816 = bf16[] parameter(0)
  %Arg_1.1489 = bf16[] parameter(1)
  ROOT %add.1328 = bf16[] add(%Arg_0.1816, %Arg_1.1489)
}

%region_1328.31082 (Arg_0.31079: f32[], Arg_1.31080: f32[]) -> f32[] {
  %Arg_0.31079 = f32[] parameter(0)
  %Arg_1.31080 = f32[] parameter(1)
  ROOT %add.31081 = f32[] add(%Arg_0.31079, %Arg_1.31080)
}

%region_584.16305 (Arg_0.16302: bf16[], Arg_1.16303: bf16[]) -> bf16[] {
  %Arg_0.16302 = bf16[] parameter(0)
  %Arg_1.16303 = bf16[] parameter(1)
  ROOT %add.16304 = bf16[] add(%Arg_0.16302, %Arg_1.16303)
}

%region_584.16305.clone (Arg_0.1817: bf16[], Arg_1.1490: bf16[]) -> bf16[] {
  %Arg_0.1817 = bf16[] parameter(0)
  %Arg_1.1490 = bf16[] parameter(1)
  ROOT %add.1329 = bf16[] add(%Arg_0.1817, %Arg_1.1490)
}

%region_1329.31091 (Arg_0.31088: f32[], Arg_1.31089: f32[]) -> f32[] {
  %Arg_0.31088 = f32[] parameter(0)
  %Arg_1.31089 = f32[] parameter(1)
  ROOT %add.31090 = f32[] add(%Arg_0.31088, %Arg_1.31089)
}

%add.81.clone (x.163: bf16[], y.163: bf16[]) -> bf16[] {
  %x.163 = bf16[] parameter(0)
  %y.163 = bf16[] parameter(1)
  ROOT %add.1331 = bf16[] add(%x.163, %y.163)
}

%region_1330.31100 (Arg_0.31097: f32[], Arg_1.31098: f32[]) -> f32[] {
  %Arg_0.31097 = f32[] parameter(0)
  %Arg_1.31098 = f32[] parameter(1)
  ROOT %add.31099 = f32[] add(%Arg_0.31097, %Arg_1.31098)
}

%region_1330.31100.clone (Arg_0.1818: f32[], Arg_1.1491: f32[]) -> f32[] {
  %Arg_0.1818 = f32[] parameter(0)
  %Arg_1.1491 = f32[] parameter(1)
  ROOT %add.1333 = f32[] add(%Arg_0.1818, %Arg_1.1491)
}

%add.82.clone (x.165: bf16[], y.165: bf16[]) -> bf16[] {
  %x.165 = bf16[] parameter(0)
  %y.165 = bf16[] parameter(1)
  ROOT %add.1335 = bf16[] add(%x.165, %y.165)
}

%region_1331.31109 (Arg_0.31106: f32[], Arg_1.31107: f32[]) -> f32[] {
  %Arg_0.31106 = f32[] parameter(0)
  %Arg_1.31107 = f32[] parameter(1)
  ROOT %add.31108 = f32[] add(%Arg_0.31106, %Arg_1.31107)
}

%region_1331.31109.clone (Arg_0.1819: f32[], Arg_1.1492: f32[]) -> f32[] {
  %Arg_0.1819 = f32[] parameter(0)
  %Arg_1.1492 = f32[] parameter(1)
  ROOT %add.1336 = f32[] add(%Arg_0.1819, %Arg_1.1492)
}

%add.83.clone (x.167: bf16[], y.167: bf16[]) -> bf16[] {
  %x.167 = bf16[] parameter(0)
  %y.167 = bf16[] parameter(1)
  ROOT %add.1339 = bf16[] add(%x.167, %y.167)
}

%region_1332.31118 (Arg_0.31115: f32[], Arg_1.31116: f32[]) -> f32[] {
  %Arg_0.31115 = f32[] parameter(0)
  %Arg_1.31116 = f32[] parameter(1)
  ROOT %add.31117 = f32[] add(%Arg_0.31115, %Arg_1.31116)
}

%region_1332.31118.clone (Arg_0.1820: f32[], Arg_1.1493: f32[]) -> f32[] {
  %Arg_0.1820 = f32[] parameter(0)
  %Arg_1.1493 = f32[] parameter(1)
  ROOT %add.1340 = f32[] add(%Arg_0.1820, %Arg_1.1493)
}

%add.84.clone (x.169: bf16[], y.169: bf16[]) -> bf16[] {
  %x.169 = bf16[] parameter(0)
  %y.169 = bf16[] parameter(1)
  ROOT %add.1342 = bf16[] add(%x.169, %y.169)
}

%region_1333.31127 (Arg_0.31124: f32[], Arg_1.31125: f32[]) -> f32[] {
  %Arg_0.31124 = f32[] parameter(0)
  %Arg_1.31125 = f32[] parameter(1)
  ROOT %add.31126 = f32[] add(%Arg_0.31124, %Arg_1.31125)
}

%region_1333.31127.clone (Arg_0.1821: f32[], Arg_1.1494: f32[]) -> f32[] {
  %Arg_0.1821 = f32[] parameter(0)
  %Arg_1.1494 = f32[] parameter(1)
  ROOT %add.1343 = f32[] add(%Arg_0.1821, %Arg_1.1494)
}

%add.85.clone (x.171: bf16[], y.171: bf16[]) -> bf16[] {
  %x.171 = bf16[] parameter(0)
  %y.171 = bf16[] parameter(1)
  ROOT %add.1345 = bf16[] add(%x.171, %y.171)
}

%region_1334.31136 (Arg_0.31133: f32[], Arg_1.31134: f32[]) -> f32[] {
  %Arg_0.31133 = f32[] parameter(0)
  %Arg_1.31134 = f32[] parameter(1)
  ROOT %add.31135 = f32[] add(%Arg_0.31133, %Arg_1.31134)
}

%region_1334.31136.clone (Arg_0.1822: f32[], Arg_1.1495: f32[]) -> f32[] {
  %Arg_0.1822 = f32[] parameter(0)
  %Arg_1.1495 = f32[] parameter(1)
  ROOT %add.1346 = f32[] add(%Arg_0.1822, %Arg_1.1495)
}

%region_1335.31145 (Arg_0.31142: f32[], Arg_1.31143: f32[]) -> f32[] {
  %Arg_0.31142 = f32[] parameter(0)
  %Arg_1.31143 = f32[] parameter(1)
  ROOT %add.31144 = f32[] add(%Arg_0.31142, %Arg_1.31143)
}

%region_1335.31145.clone (Arg_0.1823: f32[], Arg_1.1496: f32[]) -> f32[] {
  %Arg_0.1823 = f32[] parameter(0)
  %Arg_1.1496 = f32[] parameter(1)
  ROOT %add.1347 = f32[] add(%Arg_0.1823, %Arg_1.1496)
}

%region_1336.31154 (Arg_0.31151: f32[], Arg_1.31152: f32[]) -> f32[] {
  %Arg_0.31151 = f32[] parameter(0)
  %Arg_1.31152 = f32[] parameter(1)
  ROOT %add.31153 = f32[] add(%Arg_0.31151, %Arg_1.31152)
}

%region_1336.31154.clone (Arg_0.1825: f32[], Arg_1.1497: f32[]) -> f32[] {
  %Arg_0.1825 = f32[] parameter(0)
  %Arg_1.1497 = f32[] parameter(1)
  ROOT %add.1348 = f32[] add(%Arg_0.1825, %Arg_1.1497)
}

%region_1337.31163 (Arg_0.31160: f32[], Arg_1.31161: f32[]) -> f32[] {
  %Arg_0.31160 = f32[] parameter(0)
  %Arg_1.31161 = f32[] parameter(1)
  ROOT %add.31162 = f32[] add(%Arg_0.31160, %Arg_1.31161)
}

%region_1337.31163.clone (Arg_0.1826: f32[], Arg_1.1498: f32[]) -> f32[] {
  %Arg_0.1826 = f32[] parameter(0)
  %Arg_1.1498 = f32[] parameter(1)
  ROOT %add.1349 = f32[] add(%Arg_0.1826, %Arg_1.1498)
}

%region_555.15618 (Arg_0.15615: bf16[], Arg_1.15616: bf16[]) -> bf16[] {
  %Arg_0.15615 = bf16[] parameter(0)
  %Arg_1.15616 = bf16[] parameter(1)
  ROOT %add.15617 = bf16[] add(%Arg_0.15615, %Arg_1.15616)
}

%region_555.15618.clone (Arg_0.1827: bf16[], Arg_1.1499: bf16[]) -> bf16[] {
  %Arg_0.1827 = bf16[] parameter(0)
  %Arg_1.1499 = bf16[] parameter(1)
  ROOT %add.1350 = bf16[] add(%Arg_0.1827, %Arg_1.1499)
}

%region_1338.31172 (Arg_0.31169: f32[], Arg_1.31170: f32[]) -> f32[] {
  %Arg_0.31169 = f32[] parameter(0)
  %Arg_1.31170 = f32[] parameter(1)
  ROOT %add.31171 = f32[] add(%Arg_0.31169, %Arg_1.31170)
}

%region_559.15729 (Arg_0.15726: bf16[], Arg_1.15727: bf16[]) -> bf16[] {
  %Arg_0.15726 = bf16[] parameter(0)
  %Arg_1.15727 = bf16[] parameter(1)
  ROOT %add.15728 = bf16[] add(%Arg_0.15726, %Arg_1.15727)
}

%region_559.15729.clone (Arg_0.1828: bf16[], Arg_1.1500: bf16[]) -> bf16[] {
  %Arg_0.1828 = bf16[] parameter(0)
  %Arg_1.1500 = bf16[] parameter(1)
  ROOT %add.1351 = bf16[] add(%Arg_0.1828, %Arg_1.1500)
}

%region_1339.31181 (Arg_0.31178: f32[], Arg_1.31179: f32[]) -> f32[] {
  %Arg_0.31178 = f32[] parameter(0)
  %Arg_1.31179 = f32[] parameter(1)
  ROOT %add.31180 = f32[] add(%Arg_0.31178, %Arg_1.31179)
}

%add.86.clone (x.173: bf16[], y.173: bf16[]) -> bf16[] {
  %x.173 = bf16[] parameter(0)
  %y.173 = bf16[] parameter(1)
  ROOT %add.1353 = bf16[] add(%x.173, %y.173)
}

%region_1340.31190 (Arg_0.31187: f32[], Arg_1.31188: f32[]) -> f32[] {
  %Arg_0.31187 = f32[] parameter(0)
  %Arg_1.31188 = f32[] parameter(1)
  ROOT %add.31189 = f32[] add(%Arg_0.31187, %Arg_1.31188)
}

%region_1340.31190.clone (Arg_0.1829: f32[], Arg_1.1501: f32[]) -> f32[] {
  %Arg_0.1829 = f32[] parameter(0)
  %Arg_1.1501 = f32[] parameter(1)
  ROOT %add.1354 = f32[] add(%Arg_0.1829, %Arg_1.1501)
}

%add.87.clone (x.175: bf16[], y.175: bf16[]) -> bf16[] {
  %x.175 = bf16[] parameter(0)
  %y.175 = bf16[] parameter(1)
  ROOT %add.1356 = bf16[] add(%x.175, %y.175)
}

%region_1341.31199 (Arg_0.31196: f32[], Arg_1.31197: f32[]) -> f32[] {
  %Arg_0.31196 = f32[] parameter(0)
  %Arg_1.31197 = f32[] parameter(1)
  ROOT %add.31198 = f32[] add(%Arg_0.31196, %Arg_1.31197)
}

%region_1341.31199.clone (Arg_0.1830: f32[], Arg_1.1502: f32[]) -> f32[] {
  %Arg_0.1830 = f32[] parameter(0)
  %Arg_1.1502 = f32[] parameter(1)
  ROOT %add.1357 = f32[] add(%Arg_0.1830, %Arg_1.1502)
}

%add.88.clone (x.177: bf16[], y.177: bf16[]) -> bf16[] {
  %x.177 = bf16[] parameter(0)
  %y.177 = bf16[] parameter(1)
  ROOT %add.1359 = bf16[] add(%x.177, %y.177)
}

%region_1342.31208 (Arg_0.31205: f32[], Arg_1.31206: f32[]) -> f32[] {
  %Arg_0.31205 = f32[] parameter(0)
  %Arg_1.31206 = f32[] parameter(1)
  ROOT %add.31207 = f32[] add(%Arg_0.31205, %Arg_1.31206)
}

%region_1342.31208.clone (Arg_0.1831: f32[], Arg_1.1503: f32[]) -> f32[] {
  %Arg_0.1831 = f32[] parameter(0)
  %Arg_1.1503 = f32[] parameter(1)
  ROOT %add.1360 = f32[] add(%Arg_0.1831, %Arg_1.1503)
}

%add.89.clone (x.179: bf16[], y.179: bf16[]) -> bf16[] {
  %x.179 = bf16[] parameter(0)
  %y.179 = bf16[] parameter(1)
  ROOT %add.1362 = bf16[] add(%x.179, %y.179)
}

%region_1343.31217 (Arg_0.31214: f32[], Arg_1.31215: f32[]) -> f32[] {
  %Arg_0.31214 = f32[] parameter(0)
  %Arg_1.31215 = f32[] parameter(1)
  ROOT %add.31216 = f32[] add(%Arg_0.31214, %Arg_1.31215)
}

%region_1343.31217.clone (Arg_0.1832: f32[], Arg_1.1504: f32[]) -> f32[] {
  %Arg_0.1832 = f32[] parameter(0)
  %Arg_1.1504 = f32[] parameter(1)
  ROOT %add.1363 = f32[] add(%Arg_0.1832, %Arg_1.1504)
}

%add.90.clone (x.181: bf16[], y.181: bf16[]) -> bf16[] {
  %x.181 = bf16[] parameter(0)
  %y.181 = bf16[] parameter(1)
  ROOT %add.1365 = bf16[] add(%x.181, %y.181)
}

%region_1344.31226 (Arg_0.31223: f32[], Arg_1.31224: f32[]) -> f32[] {
  %Arg_0.31223 = f32[] parameter(0)
  %Arg_1.31224 = f32[] parameter(1)
  ROOT %add.31225 = f32[] add(%Arg_0.31223, %Arg_1.31224)
}

%region_1344.31226.clone (Arg_0.1833: f32[], Arg_1.1505: f32[]) -> f32[] {
  %Arg_0.1833 = f32[] parameter(0)
  %Arg_1.1505 = f32[] parameter(1)
  ROOT %add.1366 = f32[] add(%Arg_0.1833, %Arg_1.1505)
}

%region_1345.31235 (Arg_0.31232: f32[], Arg_1.31233: f32[]) -> f32[] {
  %Arg_0.31232 = f32[] parameter(0)
  %Arg_1.31233 = f32[] parameter(1)
  ROOT %add.31234 = f32[] add(%Arg_0.31232, %Arg_1.31233)
}

%region_1345.31235.clone (Arg_0.1834: f32[], Arg_1.1506: f32[]) -> f32[] {
  %Arg_0.1834 = f32[] parameter(0)
  %Arg_1.1506 = f32[] parameter(1)
  ROOT %add.1367 = f32[] add(%Arg_0.1834, %Arg_1.1506)
}

%region_1346.31244 (Arg_0.31241: f32[], Arg_1.31242: f32[]) -> f32[] {
  %Arg_0.31241 = f32[] parameter(0)
  %Arg_1.31242 = f32[] parameter(1)
  ROOT %add.31243 = f32[] add(%Arg_0.31241, %Arg_1.31242)
}

%region_1346.31244.clone (Arg_0.1835: f32[], Arg_1.1507: f32[]) -> f32[] {
  %Arg_0.1835 = f32[] parameter(0)
  %Arg_1.1507 = f32[] parameter(1)
  ROOT %add.1368 = f32[] add(%Arg_0.1835, %Arg_1.1507)
}

%region_1347.31253 (Arg_0.31250: f32[], Arg_1.31251: f32[]) -> f32[] {
  %Arg_0.31250 = f32[] parameter(0)
  %Arg_1.31251 = f32[] parameter(1)
  ROOT %add.31252 = f32[] add(%Arg_0.31250, %Arg_1.31251)
}

%region_1347.31253.clone (Arg_0.1836: f32[], Arg_1.1508: f32[]) -> f32[] {
  %Arg_0.1836 = f32[] parameter(0)
  %Arg_1.1508 = f32[] parameter(1)
  ROOT %add.1369 = f32[] add(%Arg_0.1836, %Arg_1.1508)
}

%region_530.15042 (Arg_0.15039: bf16[], Arg_1.15040: bf16[]) -> bf16[] {
  %Arg_0.15039 = bf16[] parameter(0)
  %Arg_1.15040 = bf16[] parameter(1)
  ROOT %add.15041 = bf16[] add(%Arg_0.15039, %Arg_1.15040)
}

%region_530.15042.clone (Arg_0.1837: bf16[], Arg_1.1509: bf16[]) -> bf16[] {
  %Arg_0.1837 = bf16[] parameter(0)
  %Arg_1.1509 = bf16[] parameter(1)
  ROOT %add.1371 = bf16[] add(%Arg_0.1837, %Arg_1.1509)
}

%region_1348.31262 (Arg_0.31259: f32[], Arg_1.31260: f32[]) -> f32[] {
  %Arg_0.31259 = f32[] parameter(0)
  %Arg_1.31260 = f32[] parameter(1)
  ROOT %add.31261 = f32[] add(%Arg_0.31259, %Arg_1.31260)
}

%region_534.15153 (Arg_0.15150: bf16[], Arg_1.15151: bf16[]) -> bf16[] {
  %Arg_0.15150 = bf16[] parameter(0)
  %Arg_1.15151 = bf16[] parameter(1)
  ROOT %add.15152 = bf16[] add(%Arg_0.15150, %Arg_1.15151)
}

%region_534.15153.clone (Arg_0.1838: bf16[], Arg_1.1510: bf16[]) -> bf16[] {
  %Arg_0.1838 = bf16[] parameter(0)
  %Arg_1.1510 = bf16[] parameter(1)
  ROOT %add.1372 = bf16[] add(%Arg_0.1838, %Arg_1.1510)
}

%region_1349.31271 (Arg_0.31268: f32[], Arg_1.31269: f32[]) -> f32[] {
  %Arg_0.31268 = f32[] parameter(0)
  %Arg_1.31269 = f32[] parameter(1)
  ROOT %add.31270 = f32[] add(%Arg_0.31268, %Arg_1.31269)
}

%add.91.clone (x.183: bf16[], y.183: bf16[]) -> bf16[] {
  %x.183 = bf16[] parameter(0)
  %y.183 = bf16[] parameter(1)
  ROOT %add.1374 = bf16[] add(%x.183, %y.183)
}

%region_1350.31280 (Arg_0.31277: f32[], Arg_1.31278: f32[]) -> f32[] {
  %Arg_0.31277 = f32[] parameter(0)
  %Arg_1.31278 = f32[] parameter(1)
  ROOT %add.31279 = f32[] add(%Arg_0.31277, %Arg_1.31278)
}

%region_1350.31280.clone (Arg_0.1839: f32[], Arg_1.1511: f32[]) -> f32[] {
  %Arg_0.1839 = f32[] parameter(0)
  %Arg_1.1511 = f32[] parameter(1)
  ROOT %add.1375 = f32[] add(%Arg_0.1839, %Arg_1.1511)
}

%add.92.clone (x.185: bf16[], y.185: bf16[]) -> bf16[] {
  %x.185 = bf16[] parameter(0)
  %y.185 = bf16[] parameter(1)
  ROOT %add.1377 = bf16[] add(%x.185, %y.185)
}

%region_1351.31289 (Arg_0.31286: f32[], Arg_1.31287: f32[]) -> f32[] {
  %Arg_0.31286 = f32[] parameter(0)
  %Arg_1.31287 = f32[] parameter(1)
  ROOT %add.31288 = f32[] add(%Arg_0.31286, %Arg_1.31287)
}

%region_1351.31289.clone (Arg_0.1840: f32[], Arg_1.1512: f32[]) -> f32[] {
  %Arg_0.1840 = f32[] parameter(0)
  %Arg_1.1512 = f32[] parameter(1)
  ROOT %add.1378 = f32[] add(%Arg_0.1840, %Arg_1.1512)
}

%add.93.clone (x.187: bf16[], y.187: bf16[]) -> bf16[] {
  %x.187 = bf16[] parameter(0)
  %y.187 = bf16[] parameter(1)
  ROOT %add.1380 = bf16[] add(%x.187, %y.187)
}

%region_1352.31298 (Arg_0.31295: f32[], Arg_1.31296: f32[]) -> f32[] {
  %Arg_0.31295 = f32[] parameter(0)
  %Arg_1.31296 = f32[] parameter(1)
  ROOT %add.31297 = f32[] add(%Arg_0.31295, %Arg_1.31296)
}

%region_1352.31298.clone (Arg_0.1841: f32[], Arg_1.1513: f32[]) -> f32[] {
  %Arg_0.1841 = f32[] parameter(0)
  %Arg_1.1513 = f32[] parameter(1)
  ROOT %add.1381 = f32[] add(%Arg_0.1841, %Arg_1.1513)
}

%add.94.clone (x.189: bf16[], y.189: bf16[]) -> bf16[] {
  %x.189 = bf16[] parameter(0)
  %y.189 = bf16[] parameter(1)
  ROOT %add.1383 = bf16[] add(%x.189, %y.189)
}

%region_1353.31307 (Arg_0.31304: f32[], Arg_1.31305: f32[]) -> f32[] {
  %Arg_0.31304 = f32[] parameter(0)
  %Arg_1.31305 = f32[] parameter(1)
  ROOT %add.31306 = f32[] add(%Arg_0.31304, %Arg_1.31305)
}

%region_1353.31307.clone (Arg_0.1842: f32[], Arg_1.1514: f32[]) -> f32[] {
  %Arg_0.1842 = f32[] parameter(0)
  %Arg_1.1514 = f32[] parameter(1)
  ROOT %add.1385 = f32[] add(%Arg_0.1842, %Arg_1.1514)
}

%add.95.clone (x.191: bf16[], y.191: bf16[]) -> bf16[] {
  %x.191 = bf16[] parameter(0)
  %y.191 = bf16[] parameter(1)
  ROOT %add.1388 = bf16[] add(%x.191, %y.191)
}

%region_1354.31316 (Arg_0.31313: f32[], Arg_1.31314: f32[]) -> f32[] {
  %Arg_0.31313 = f32[] parameter(0)
  %Arg_1.31314 = f32[] parameter(1)
  ROOT %add.31315 = f32[] add(%Arg_0.31313, %Arg_1.31314)
}

%region_1354.31316.clone (Arg_0.1843: f32[], Arg_1.1515: f32[]) -> f32[] {
  %Arg_0.1843 = f32[] parameter(0)
  %Arg_1.1515 = f32[] parameter(1)
  ROOT %add.1389 = f32[] add(%Arg_0.1843, %Arg_1.1515)
}

%region_1355.31325 (Arg_0.31322: f32[], Arg_1.31323: f32[]) -> f32[] {
  %Arg_0.31322 = f32[] parameter(0)
  %Arg_1.31323 = f32[] parameter(1)
  ROOT %add.31324 = f32[] add(%Arg_0.31322, %Arg_1.31323)
}

%region_1355.31325.clone (Arg_0.1844: f32[], Arg_1.1516: f32[]) -> f32[] {
  %Arg_0.1844 = f32[] parameter(0)
  %Arg_1.1516 = f32[] parameter(1)
  ROOT %add.1391 = f32[] add(%Arg_0.1844, %Arg_1.1516)
}

%region_1356.31334 (Arg_0.31331: f32[], Arg_1.31332: f32[]) -> f32[] {
  %Arg_0.31331 = f32[] parameter(0)
  %Arg_1.31332 = f32[] parameter(1)
  ROOT %add.31333 = f32[] add(%Arg_0.31331, %Arg_1.31332)
}

%region_1356.31334.clone (Arg_0.1845: f32[], Arg_1.1517: f32[]) -> f32[] {
  %Arg_0.1845 = f32[] parameter(0)
  %Arg_1.1517 = f32[] parameter(1)
  ROOT %add.1392 = f32[] add(%Arg_0.1845, %Arg_1.1517)
}

%region_1357.31343 (Arg_0.31340: f32[], Arg_1.31341: f32[]) -> f32[] {
  %Arg_0.31340 = f32[] parameter(0)
  %Arg_1.31341 = f32[] parameter(1)
  ROOT %add.31342 = f32[] add(%Arg_0.31340, %Arg_1.31341)
}

%region_1357.31343.clone (Arg_0.1846: f32[], Arg_1.1518: f32[]) -> f32[] {
  %Arg_0.1846 = f32[] parameter(0)
  %Arg_1.1518 = f32[] parameter(1)
  ROOT %add.1393 = f32[] add(%Arg_0.1846, %Arg_1.1518)
}

%region_505.14466 (Arg_0.14463: bf16[], Arg_1.14464: bf16[]) -> bf16[] {
  %Arg_0.14463 = bf16[] parameter(0)
  %Arg_1.14464 = bf16[] parameter(1)
  ROOT %add.14465 = bf16[] add(%Arg_0.14463, %Arg_1.14464)
}

%region_505.14466.clone (Arg_0.1847: bf16[], Arg_1.1519: bf16[]) -> bf16[] {
  %Arg_0.1847 = bf16[] parameter(0)
  %Arg_1.1519 = bf16[] parameter(1)
  ROOT %add.1394 = bf16[] add(%Arg_0.1847, %Arg_1.1519)
}

%region_1358.31352 (Arg_0.31349: f32[], Arg_1.31350: f32[]) -> f32[] {
  %Arg_0.31349 = f32[] parameter(0)
  %Arg_1.31350 = f32[] parameter(1)
  ROOT %add.31351 = f32[] add(%Arg_0.31349, %Arg_1.31350)
}

%region_509.14577 (Arg_0.14574: bf16[], Arg_1.14575: bf16[]) -> bf16[] {
  %Arg_0.14574 = bf16[] parameter(0)
  %Arg_1.14575 = bf16[] parameter(1)
  ROOT %add.14576 = bf16[] add(%Arg_0.14574, %Arg_1.14575)
}

%region_509.14577.clone (Arg_0.1848: bf16[], Arg_1.1520: bf16[]) -> bf16[] {
  %Arg_0.1848 = bf16[] parameter(0)
  %Arg_1.1520 = bf16[] parameter(1)
  ROOT %add.1395 = bf16[] add(%Arg_0.1848, %Arg_1.1520)
}

%region_1359.31361 (Arg_0.31358: f32[], Arg_1.31359: f32[]) -> f32[] {
  %Arg_0.31358 = f32[] parameter(0)
  %Arg_1.31359 = f32[] parameter(1)
  ROOT %add.31360 = f32[] add(%Arg_0.31358, %Arg_1.31359)
}

%add.96.clone (x.193: bf16[], y.193: bf16[]) -> bf16[] {
  %x.193 = bf16[] parameter(0)
  %y.193 = bf16[] parameter(1)
  ROOT %add.1397 = bf16[] add(%x.193, %y.193)
}

%region_1360.31370 (Arg_0.31367: f32[], Arg_1.31368: f32[]) -> f32[] {
  %Arg_0.31367 = f32[] parameter(0)
  %Arg_1.31368 = f32[] parameter(1)
  ROOT %add.31369 = f32[] add(%Arg_0.31367, %Arg_1.31368)
}

%region_1360.31370.clone (Arg_0.1849: f32[], Arg_1.1522: f32[]) -> f32[] {
  %Arg_0.1849 = f32[] parameter(0)
  %Arg_1.1522 = f32[] parameter(1)
  ROOT %add.1398 = f32[] add(%Arg_0.1849, %Arg_1.1522)
}

%add.97.clone (x.195: bf16[], y.195: bf16[]) -> bf16[] {
  %x.195 = bf16[] parameter(0)
  %y.195 = bf16[] parameter(1)
  ROOT %add.1400 = bf16[] add(%x.195, %y.195)
}

%region_1361.31379 (Arg_0.31376: f32[], Arg_1.31377: f32[]) -> f32[] {
  %Arg_0.31376 = f32[] parameter(0)
  %Arg_1.31377 = f32[] parameter(1)
  ROOT %add.31378 = f32[] add(%Arg_0.31376, %Arg_1.31377)
}

%region_1361.31379.clone (Arg_0.1850: f32[], Arg_1.1523: f32[]) -> f32[] {
  %Arg_0.1850 = f32[] parameter(0)
  %Arg_1.1523 = f32[] parameter(1)
  ROOT %add.1401 = f32[] add(%Arg_0.1850, %Arg_1.1523)
}

%add.98.clone (x.197: bf16[], y.197: bf16[]) -> bf16[] {
  %x.197 = bf16[] parameter(0)
  %y.197 = bf16[] parameter(1)
  ROOT %add.1403 = bf16[] add(%x.197, %y.197)
}

%region_1362.31388 (Arg_0.31385: f32[], Arg_1.31386: f32[]) -> f32[] {
  %Arg_0.31385 = f32[] parameter(0)
  %Arg_1.31386 = f32[] parameter(1)
  ROOT %add.31387 = f32[] add(%Arg_0.31385, %Arg_1.31386)
}

%region_1362.31388.clone (Arg_0.1851: f32[], Arg_1.1524: f32[]) -> f32[] {
  %Arg_0.1851 = f32[] parameter(0)
  %Arg_1.1524 = f32[] parameter(1)
  ROOT %add.1405 = f32[] add(%Arg_0.1851, %Arg_1.1524)
}

%add.99.clone (x.199: bf16[], y.199: bf16[]) -> bf16[] {
  %x.199 = bf16[] parameter(0)
  %y.199 = bf16[] parameter(1)
  ROOT %add.1407 = bf16[] add(%x.199, %y.199)
}

%region_1363.31397 (Arg_0.31394: f32[], Arg_1.31395: f32[]) -> f32[] {
  %Arg_0.31394 = f32[] parameter(0)
  %Arg_1.31395 = f32[] parameter(1)
  ROOT %add.31396 = f32[] add(%Arg_0.31394, %Arg_1.31395)
}

%region_1363.31397.clone (Arg_0.1852: f32[], Arg_1.1525: f32[]) -> f32[] {
  %Arg_0.1852 = f32[] parameter(0)
  %Arg_1.1525 = f32[] parameter(1)
  ROOT %add.1408 = f32[] add(%Arg_0.1852, %Arg_1.1525)
}

%add.100.clone (x.201: bf16[], y.201: bf16[]) -> bf16[] {
  %x.201 = bf16[] parameter(0)
  %y.201 = bf16[] parameter(1)
  ROOT %add.1410 = bf16[] add(%x.201, %y.201)
}

%region_1364.31406 (Arg_0.31403: f32[], Arg_1.31404: f32[]) -> f32[] {
  %Arg_0.31403 = f32[] parameter(0)
  %Arg_1.31404 = f32[] parameter(1)
  ROOT %add.31405 = f32[] add(%Arg_0.31403, %Arg_1.31404)
}

%region_1364.31406.clone (Arg_0.1853: f32[], Arg_1.1526: f32[]) -> f32[] {
  %Arg_0.1853 = f32[] parameter(0)
  %Arg_1.1526 = f32[] parameter(1)
  ROOT %add.1411 = f32[] add(%Arg_0.1853, %Arg_1.1526)
}

%region_1365.31415 (Arg_0.31412: f32[], Arg_1.31413: f32[]) -> f32[] {
  %Arg_0.31412 = f32[] parameter(0)
  %Arg_1.31413 = f32[] parameter(1)
  ROOT %add.31414 = f32[] add(%Arg_0.31412, %Arg_1.31413)
}

%region_1365.31415.clone (Arg_0.1854: f32[], Arg_1.1527: f32[]) -> f32[] {
  %Arg_0.1854 = f32[] parameter(0)
  %Arg_1.1527 = f32[] parameter(1)
  ROOT %add.1412 = f32[] add(%Arg_0.1854, %Arg_1.1527)
}

%region_1366.31424 (Arg_0.31421: f32[], Arg_1.31422: f32[]) -> f32[] {
  %Arg_0.31421 = f32[] parameter(0)
  %Arg_1.31422 = f32[] parameter(1)
  ROOT %add.31423 = f32[] add(%Arg_0.31421, %Arg_1.31422)
}

%region_1366.31424.clone (Arg_0.1855: f32[], Arg_1.1528: f32[]) -> f32[] {
  %Arg_0.1855 = f32[] parameter(0)
  %Arg_1.1528 = f32[] parameter(1)
  ROOT %add.1413 = f32[] add(%Arg_0.1855, %Arg_1.1528)
}

%region_1367.31433 (Arg_0.31430: f32[], Arg_1.31431: f32[]) -> f32[] {
  %Arg_0.31430 = f32[] parameter(0)
  %Arg_1.31431 = f32[] parameter(1)
  ROOT %add.31432 = f32[] add(%Arg_0.31430, %Arg_1.31431)
}

%region_1367.31433.clone (Arg_0.1856: f32[], Arg_1.1529: f32[]) -> f32[] {
  %Arg_0.1856 = f32[] parameter(0)
  %Arg_1.1529 = f32[] parameter(1)
  ROOT %add.1415 = f32[] add(%Arg_0.1856, %Arg_1.1529)
}

%region_480.13890 (Arg_0.13887: bf16[], Arg_1.13888: bf16[]) -> bf16[] {
  %Arg_0.13887 = bf16[] parameter(0)
  %Arg_1.13888 = bf16[] parameter(1)
  ROOT %add.13889 = bf16[] add(%Arg_0.13887, %Arg_1.13888)
}

%region_480.13890.clone (Arg_0.1857: bf16[], Arg_1.1530: bf16[]) -> bf16[] {
  %Arg_0.1857 = bf16[] parameter(0)
  %Arg_1.1530 = bf16[] parameter(1)
  ROOT %add.1416 = bf16[] add(%Arg_0.1857, %Arg_1.1530)
}

%region_1368.31442 (Arg_0.31439: f32[], Arg_1.31440: f32[]) -> f32[] {
  %Arg_0.31439 = f32[] parameter(0)
  %Arg_1.31440 = f32[] parameter(1)
  ROOT %add.31441 = f32[] add(%Arg_0.31439, %Arg_1.31440)
}

%region_484.14001 (Arg_0.13998: bf16[], Arg_1.13999: bf16[]) -> bf16[] {
  %Arg_0.13998 = bf16[] parameter(0)
  %Arg_1.13999 = bf16[] parameter(1)
  ROOT %add.14000 = bf16[] add(%Arg_0.13998, %Arg_1.13999)
}

%region_484.14001.clone (Arg_0.1858: bf16[], Arg_1.1531: bf16[]) -> bf16[] {
  %Arg_0.1858 = bf16[] parameter(0)
  %Arg_1.1531 = bf16[] parameter(1)
  ROOT %add.1417 = bf16[] add(%Arg_0.1858, %Arg_1.1531)
}

%region_1369.31451 (Arg_0.31448: f32[], Arg_1.31449: f32[]) -> f32[] {
  %Arg_0.31448 = f32[] parameter(0)
  %Arg_1.31449 = f32[] parameter(1)
  ROOT %add.31450 = f32[] add(%Arg_0.31448, %Arg_1.31449)
}

%add.101.clone (x.203: bf16[], y.203: bf16[]) -> bf16[] {
  %x.203 = bf16[] parameter(0)
  %y.203 = bf16[] parameter(1)
  ROOT %add.1419 = bf16[] add(%x.203, %y.203)
}

%region_1370.31460 (Arg_0.31457: f32[], Arg_1.31458: f32[]) -> f32[] {
  %Arg_0.31457 = f32[] parameter(0)
  %Arg_1.31458 = f32[] parameter(1)
  ROOT %add.31459 = f32[] add(%Arg_0.31457, %Arg_1.31458)
}

%region_1370.31460.clone (Arg_0.1859: f32[], Arg_1.1532: f32[]) -> f32[] {
  %Arg_0.1859 = f32[] parameter(0)
  %Arg_1.1532 = f32[] parameter(1)
  ROOT %add.1420 = f32[] add(%Arg_0.1859, %Arg_1.1532)
}

%add.102.clone (x.205: bf16[], y.205: bf16[]) -> bf16[] {
  %x.205 = bf16[] parameter(0)
  %y.205 = bf16[] parameter(1)
  ROOT %add.1422 = bf16[] add(%x.205, %y.205)
}

%region_1371.31469 (Arg_0.31466: f32[], Arg_1.31467: f32[]) -> f32[] {
  %Arg_0.31466 = f32[] parameter(0)
  %Arg_1.31467 = f32[] parameter(1)
  ROOT %add.31468 = f32[] add(%Arg_0.31466, %Arg_1.31467)
}

%region_1371.31469.clone (Arg_0.1860: f32[], Arg_1.1533: f32[]) -> f32[] {
  %Arg_0.1860 = f32[] parameter(0)
  %Arg_1.1533 = f32[] parameter(1)
  ROOT %add.1423 = f32[] add(%Arg_0.1860, %Arg_1.1533)
}

%add.103.clone (x.207: bf16[], y.207: bf16[]) -> bf16[] {
  %x.207 = bf16[] parameter(0)
  %y.207 = bf16[] parameter(1)
  ROOT %add.1425 = bf16[] add(%x.207, %y.207)
}

%region_1372.31478 (Arg_0.31475: f32[], Arg_1.31476: f32[]) -> f32[] {
  %Arg_0.31475 = f32[] parameter(0)
  %Arg_1.31476 = f32[] parameter(1)
  ROOT %add.31477 = f32[] add(%Arg_0.31475, %Arg_1.31476)
}

%region_1372.31478.clone (Arg_0.1861: f32[], Arg_1.1534: f32[]) -> f32[] {
  %Arg_0.1861 = f32[] parameter(0)
  %Arg_1.1534 = f32[] parameter(1)
  ROOT %add.1426 = f32[] add(%Arg_0.1861, %Arg_1.1534)
}

%add.104.clone (x.209: bf16[], y.209: bf16[]) -> bf16[] {
  %x.209 = bf16[] parameter(0)
  %y.209 = bf16[] parameter(1)
  ROOT %add.1428 = bf16[] add(%x.209, %y.209)
}

%region_1373.31487 (Arg_0.31484: f32[], Arg_1.31485: f32[]) -> f32[] {
  %Arg_0.31484 = f32[] parameter(0)
  %Arg_1.31485 = f32[] parameter(1)
  ROOT %add.31486 = f32[] add(%Arg_0.31484, %Arg_1.31485)
}

%region_1373.31487.clone (Arg_0.1862: f32[], Arg_1.1535: f32[]) -> f32[] {
  %Arg_0.1862 = f32[] parameter(0)
  %Arg_1.1535 = f32[] parameter(1)
  ROOT %add.1429 = f32[] add(%Arg_0.1862, %Arg_1.1535)
}

%add.105.clone (x.211: bf16[], y.211: bf16[]) -> bf16[] {
  %x.211 = bf16[] parameter(0)
  %y.211 = bf16[] parameter(1)
  ROOT %add.1431 = bf16[] add(%x.211, %y.211)
}

%region_1374.31496 (Arg_0.31493: f32[], Arg_1.31494: f32[]) -> f32[] {
  %Arg_0.31493 = f32[] parameter(0)
  %Arg_1.31494 = f32[] parameter(1)
  ROOT %add.31495 = f32[] add(%Arg_0.31493, %Arg_1.31494)
}

%region_1374.31496.clone (Arg_0.1863: f32[], Arg_1.1536: f32[]) -> f32[] {
  %Arg_0.1863 = f32[] parameter(0)
  %Arg_1.1536 = f32[] parameter(1)
  ROOT %add.1432 = f32[] add(%Arg_0.1863, %Arg_1.1536)
}

%region_1375.31505 (Arg_0.31502: f32[], Arg_1.31503: f32[]) -> f32[] {
  %Arg_0.31502 = f32[] parameter(0)
  %Arg_1.31503 = f32[] parameter(1)
  ROOT %add.31504 = f32[] add(%Arg_0.31502, %Arg_1.31503)
}

%region_1375.31505.clone (Arg_0.1864: f32[], Arg_1.1537: f32[]) -> f32[] {
  %Arg_0.1864 = f32[] parameter(0)
  %Arg_1.1537 = f32[] parameter(1)
  ROOT %add.1433 = f32[] add(%Arg_0.1864, %Arg_1.1537)
}

%region_1376.31514 (Arg_0.31511: f32[], Arg_1.31512: f32[]) -> f32[] {
  %Arg_0.31511 = f32[] parameter(0)
  %Arg_1.31512 = f32[] parameter(1)
  ROOT %add.31513 = f32[] add(%Arg_0.31511, %Arg_1.31512)
}

%region_1376.31514.clone (Arg_0.1865: f32[], Arg_1.1538: f32[]) -> f32[] {
  %Arg_0.1865 = f32[] parameter(0)
  %Arg_1.1538 = f32[] parameter(1)
  ROOT %add.1434 = f32[] add(%Arg_0.1865, %Arg_1.1538)
}

%region_1377.31523 (Arg_0.31520: f32[], Arg_1.31521: f32[]) -> f32[] {
  %Arg_0.31520 = f32[] parameter(0)
  %Arg_1.31521 = f32[] parameter(1)
  ROOT %add.31522 = f32[] add(%Arg_0.31520, %Arg_1.31521)
}

%region_1377.31523.clone (Arg_0.1866: f32[], Arg_1.1539: f32[]) -> f32[] {
  %Arg_0.1866 = f32[] parameter(0)
  %Arg_1.1539 = f32[] parameter(1)
  ROOT %add.1435 = f32[] add(%Arg_0.1866, %Arg_1.1539)
}

%region_455.13314 (Arg_0.13311: bf16[], Arg_1.13312: bf16[]) -> bf16[] {
  %Arg_0.13311 = bf16[] parameter(0)
  %Arg_1.13312 = bf16[] parameter(1)
  ROOT %add.13313 = bf16[] add(%Arg_0.13311, %Arg_1.13312)
}

%region_455.13314.clone (Arg_0.1867: bf16[], Arg_1.1540: bf16[]) -> bf16[] {
  %Arg_0.1867 = bf16[] parameter(0)
  %Arg_1.1540 = bf16[] parameter(1)
  ROOT %add.1436 = bf16[] add(%Arg_0.1867, %Arg_1.1540)
}

%region_1378.31532 (Arg_0.31529: f32[], Arg_1.31530: f32[]) -> f32[] {
  %Arg_0.31529 = f32[] parameter(0)
  %Arg_1.31530 = f32[] parameter(1)
  ROOT %add.31531 = f32[] add(%Arg_0.31529, %Arg_1.31530)
}

%region_459.13425 (Arg_0.13422: bf16[], Arg_1.13423: bf16[]) -> bf16[] {
  %Arg_0.13422 = bf16[] parameter(0)
  %Arg_1.13423 = bf16[] parameter(1)
  ROOT %add.13424 = bf16[] add(%Arg_0.13422, %Arg_1.13423)
}

%region_459.13425.clone (Arg_0.1868: bf16[], Arg_1.1541: bf16[]) -> bf16[] {
  %Arg_0.1868 = bf16[] parameter(0)
  %Arg_1.1541 = bf16[] parameter(1)
  ROOT %add.1437 = bf16[] add(%Arg_0.1868, %Arg_1.1541)
}

%region_1379.31541 (Arg_0.31538: f32[], Arg_1.31539: f32[]) -> f32[] {
  %Arg_0.31538 = f32[] parameter(0)
  %Arg_1.31539 = f32[] parameter(1)
  ROOT %add.31540 = f32[] add(%Arg_0.31538, %Arg_1.31539)
}

%add.106.clone (x.213: bf16[], y.213: bf16[]) -> bf16[] {
  %x.213 = bf16[] parameter(0)
  %y.213 = bf16[] parameter(1)
  ROOT %add.1440 = bf16[] add(%x.213, %y.213)
}

%region_1380.31550 (Arg_0.31547: f32[], Arg_1.31548: f32[]) -> f32[] {
  %Arg_0.31547 = f32[] parameter(0)
  %Arg_1.31548 = f32[] parameter(1)
  ROOT %add.31549 = f32[] add(%Arg_0.31547, %Arg_1.31548)
}

%region_1380.31550.clone (Arg_0.1869: f32[], Arg_1.1542: f32[]) -> f32[] {
  %Arg_0.1869 = f32[] parameter(0)
  %Arg_1.1542 = f32[] parameter(1)
  ROOT %add.1441 = f32[] add(%Arg_0.1869, %Arg_1.1542)
}

%add.107.clone (x.215: bf16[], y.215: bf16[]) -> bf16[] {
  %x.215 = bf16[] parameter(0)
  %y.215 = bf16[] parameter(1)
  ROOT %add.1443 = bf16[] add(%x.215, %y.215)
}

%region_1381.31559 (Arg_0.31556: f32[], Arg_1.31557: f32[]) -> f32[] {
  %Arg_0.31556 = f32[] parameter(0)
  %Arg_1.31557 = f32[] parameter(1)
  ROOT %add.31558 = f32[] add(%Arg_0.31556, %Arg_1.31557)
}

%region_1381.31559.clone (Arg_0.1870: f32[], Arg_1.1543: f32[]) -> f32[] {
  %Arg_0.1870 = f32[] parameter(0)
  %Arg_1.1543 = f32[] parameter(1)
  ROOT %add.1444 = f32[] add(%Arg_0.1870, %Arg_1.1543)
}

%add.108.clone (x.217: bf16[], y.217: bf16[]) -> bf16[] {
  %x.217 = bf16[] parameter(0)
  %y.217 = bf16[] parameter(1)
  ROOT %add.1446 = bf16[] add(%x.217, %y.217)
}

%region_1382.31568 (Arg_0.31565: f32[], Arg_1.31566: f32[]) -> f32[] {
  %Arg_0.31565 = f32[] parameter(0)
  %Arg_1.31566 = f32[] parameter(1)
  ROOT %add.31567 = f32[] add(%Arg_0.31565, %Arg_1.31566)
}

%region_1382.31568.clone (Arg_0.1871: f32[], Arg_1.1544: f32[]) -> f32[] {
  %Arg_0.1871 = f32[] parameter(0)
  %Arg_1.1544 = f32[] parameter(1)
  ROOT %add.1447 = f32[] add(%Arg_0.1871, %Arg_1.1544)
}

%add.109.clone (x.219: bf16[], y.219: bf16[]) -> bf16[] {
  %x.219 = bf16[] parameter(0)
  %y.219 = bf16[] parameter(1)
  ROOT %add.1449 = bf16[] add(%x.219, %y.219)
}

%region_1383.31577 (Arg_0.31574: f32[], Arg_1.31575: f32[]) -> f32[] {
  %Arg_0.31574 = f32[] parameter(0)
  %Arg_1.31575 = f32[] parameter(1)
  ROOT %add.31576 = f32[] add(%Arg_0.31574, %Arg_1.31575)
}

%region_1383.31577.clone (Arg_0.1872: f32[], Arg_1.1545: f32[]) -> f32[] {
  %Arg_0.1872 = f32[] parameter(0)
  %Arg_1.1545 = f32[] parameter(1)
  ROOT %add.1450 = f32[] add(%Arg_0.1872, %Arg_1.1545)
}

%add.110.clone (x.221: bf16[], y.221: bf16[]) -> bf16[] {
  %x.221 = bf16[] parameter(0)
  %y.221 = bf16[] parameter(1)
  ROOT %add.1453 = bf16[] add(%x.221, %y.221)
}

%region_1384.31586 (Arg_0.31583: f32[], Arg_1.31584: f32[]) -> f32[] {
  %Arg_0.31583 = f32[] parameter(0)
  %Arg_1.31584 = f32[] parameter(1)
  ROOT %add.31585 = f32[] add(%Arg_0.31583, %Arg_1.31584)
}

%region_1384.31586.clone (Arg_0.1873: f32[], Arg_1.1546: f32[]) -> f32[] {
  %Arg_0.1873 = f32[] parameter(0)
  %Arg_1.1546 = f32[] parameter(1)
  ROOT %add.1454 = f32[] add(%Arg_0.1873, %Arg_1.1546)
}

%region_1385.31595 (Arg_0.31592: f32[], Arg_1.31593: f32[]) -> f32[] {
  %Arg_0.31592 = f32[] parameter(0)
  %Arg_1.31593 = f32[] parameter(1)
  ROOT %add.31594 = f32[] add(%Arg_0.31592, %Arg_1.31593)
}

%region_1385.31595.clone (Arg_0.1874: f32[], Arg_1.1547: f32[]) -> f32[] {
  %Arg_0.1874 = f32[] parameter(0)
  %Arg_1.1547 = f32[] parameter(1)
  ROOT %add.1455 = f32[] add(%Arg_0.1874, %Arg_1.1547)
}

%region_1386.31604 (Arg_0.31601: f32[], Arg_1.31602: f32[]) -> f32[] {
  %Arg_0.31601 = f32[] parameter(0)
  %Arg_1.31602 = f32[] parameter(1)
  ROOT %add.31603 = f32[] add(%Arg_0.31601, %Arg_1.31602)
}

%region_1386.31604.clone (Arg_0.1875: f32[], Arg_1.1548: f32[]) -> f32[] {
  %Arg_0.1875 = f32[] parameter(0)
  %Arg_1.1548 = f32[] parameter(1)
  ROOT %add.1456 = f32[] add(%Arg_0.1875, %Arg_1.1548)
}

%region_1387.31613 (Arg_0.31610: f32[], Arg_1.31611: f32[]) -> f32[] {
  %Arg_0.31610 = f32[] parameter(0)
  %Arg_1.31611 = f32[] parameter(1)
  ROOT %add.31612 = f32[] add(%Arg_0.31610, %Arg_1.31611)
}

%region_1387.31613.clone (Arg_0.1876: f32[], Arg_1.1549: f32[]) -> f32[] {
  %Arg_0.1876 = f32[] parameter(0)
  %Arg_1.1549 = f32[] parameter(1)
  ROOT %add.1457 = f32[] add(%Arg_0.1876, %Arg_1.1549)
}

%region_430.12738 (Arg_0.12735: bf16[], Arg_1.12736: bf16[]) -> bf16[] {
  %Arg_0.12735 = bf16[] parameter(0)
  %Arg_1.12736 = bf16[] parameter(1)
  ROOT %add.12737 = bf16[] add(%Arg_0.12735, %Arg_1.12736)
}

%region_430.12738.clone (Arg_0.1877: bf16[], Arg_1.1550: bf16[]) -> bf16[] {
  %Arg_0.1877 = bf16[] parameter(0)
  %Arg_1.1550 = bf16[] parameter(1)
  ROOT %add.1458 = bf16[] add(%Arg_0.1877, %Arg_1.1550)
}

%region_1388.31622 (Arg_0.31619: f32[], Arg_1.31620: f32[]) -> f32[] {
  %Arg_0.31619 = f32[] parameter(0)
  %Arg_1.31620 = f32[] parameter(1)
  ROOT %add.31621 = f32[] add(%Arg_0.31619, %Arg_1.31620)
}

%region_434.12849 (Arg_0.12846: bf16[], Arg_1.12847: bf16[]) -> bf16[] {
  %Arg_0.12846 = bf16[] parameter(0)
  %Arg_1.12847 = bf16[] parameter(1)
  ROOT %add.12848 = bf16[] add(%Arg_0.12846, %Arg_1.12847)
}

%region_434.12849.clone (Arg_0.1878: bf16[], Arg_1.1551: bf16[]) -> bf16[] {
  %Arg_0.1878 = bf16[] parameter(0)
  %Arg_1.1551 = bf16[] parameter(1)
  ROOT %add.1459 = bf16[] add(%Arg_0.1878, %Arg_1.1551)
}

%region_1389.31631 (Arg_0.31628: f32[], Arg_1.31629: f32[]) -> f32[] {
  %Arg_0.31628 = f32[] parameter(0)
  %Arg_1.31629 = f32[] parameter(1)
  ROOT %add.31630 = f32[] add(%Arg_0.31628, %Arg_1.31629)
}

%add.111.clone (x.223: bf16[], y.223: bf16[]) -> bf16[] {
  %x.223 = bf16[] parameter(0)
  %y.223 = bf16[] parameter(1)
  ROOT %add.1462 = bf16[] add(%x.223, %y.223)
}

%region_1390.31640 (Arg_0.31637: f32[], Arg_1.31638: f32[]) -> f32[] {
  %Arg_0.31637 = f32[] parameter(0)
  %Arg_1.31638 = f32[] parameter(1)
  ROOT %add.31639 = f32[] add(%Arg_0.31637, %Arg_1.31638)
}

%region_1390.31640.clone (Arg_0.1879: f32[], Arg_1.1552: f32[]) -> f32[] {
  %Arg_0.1879 = f32[] parameter(0)
  %Arg_1.1552 = f32[] parameter(1)
  ROOT %add.1463 = f32[] add(%Arg_0.1879, %Arg_1.1552)
}

%add.112.clone (x.225: bf16[], y.225: bf16[]) -> bf16[] {
  %x.225 = bf16[] parameter(0)
  %y.225 = bf16[] parameter(1)
  ROOT %add.1465 = bf16[] add(%x.225, %y.225)
}

%region_1391.31649 (Arg_0.31646: f32[], Arg_1.31647: f32[]) -> f32[] {
  %Arg_0.31646 = f32[] parameter(0)
  %Arg_1.31647 = f32[] parameter(1)
  ROOT %add.31648 = f32[] add(%Arg_0.31646, %Arg_1.31647)
}

%region_1391.31649.clone (Arg_0.1880: f32[], Arg_1.1553: f32[]) -> f32[] {
  %Arg_0.1880 = f32[] parameter(0)
  %Arg_1.1553 = f32[] parameter(1)
  ROOT %add.1466 = f32[] add(%Arg_0.1880, %Arg_1.1553)
}

%add.113.clone (x.227: bf16[], y.227: bf16[]) -> bf16[] {
  %x.227 = bf16[] parameter(0)
  %y.227 = bf16[] parameter(1)
  ROOT %add.1468 = bf16[] add(%x.227, %y.227)
}

%region_1392.31658 (Arg_0.31655: f32[], Arg_1.31656: f32[]) -> f32[] {
  %Arg_0.31655 = f32[] parameter(0)
  %Arg_1.31656 = f32[] parameter(1)
  ROOT %add.31657 = f32[] add(%Arg_0.31655, %Arg_1.31656)
}

%region_1392.31658.clone (Arg_0.1881: f32[], Arg_1.1554: f32[]) -> f32[] {
  %Arg_0.1881 = f32[] parameter(0)
  %Arg_1.1554 = f32[] parameter(1)
  ROOT %add.1469 = f32[] add(%Arg_0.1881, %Arg_1.1554)
}

%add.114.clone (x.229: bf16[], y.229: bf16[]) -> bf16[] {
  %x.229 = bf16[] parameter(0)
  %y.229 = bf16[] parameter(1)
  ROOT %add.1471 = bf16[] add(%x.229, %y.229)
}

%region_1393.31667 (Arg_0.31664: f32[], Arg_1.31665: f32[]) -> f32[] {
  %Arg_0.31664 = f32[] parameter(0)
  %Arg_1.31665 = f32[] parameter(1)
  ROOT %add.31666 = f32[] add(%Arg_0.31664, %Arg_1.31665)
}

%region_1393.31667.clone (Arg_0.1882: f32[], Arg_1.1555: f32[]) -> f32[] {
  %Arg_0.1882 = f32[] parameter(0)
  %Arg_1.1555 = f32[] parameter(1)
  ROOT %add.1472 = f32[] add(%Arg_0.1882, %Arg_1.1555)
}

%add.115.clone (x.231: bf16[], y.231: bf16[]) -> bf16[] {
  %x.231 = bf16[] parameter(0)
  %y.231 = bf16[] parameter(1)
  ROOT %add.1474 = bf16[] add(%x.231, %y.231)
}

%region_1394.31676 (Arg_0.31673: f32[], Arg_1.31674: f32[]) -> f32[] {
  %Arg_0.31673 = f32[] parameter(0)
  %Arg_1.31674 = f32[] parameter(1)
  ROOT %add.31675 = f32[] add(%Arg_0.31673, %Arg_1.31674)
}

%region_1394.31676.clone (Arg_0.1883: f32[], Arg_1.1556: f32[]) -> f32[] {
  %Arg_0.1883 = f32[] parameter(0)
  %Arg_1.1556 = f32[] parameter(1)
  ROOT %add.1475 = f32[] add(%Arg_0.1883, %Arg_1.1556)
}

%region_1395.31685 (Arg_0.31682: f32[], Arg_1.31683: f32[]) -> f32[] {
  %Arg_0.31682 = f32[] parameter(0)
  %Arg_1.31683 = f32[] parameter(1)
  ROOT %add.31684 = f32[] add(%Arg_0.31682, %Arg_1.31683)
}

%region_1395.31685.clone (Arg_0.1884: f32[], Arg_1.1557: f32[]) -> f32[] {
  %Arg_0.1884 = f32[] parameter(0)
  %Arg_1.1557 = f32[] parameter(1)
  ROOT %add.1476 = f32[] add(%Arg_0.1884, %Arg_1.1557)
}

%region_1396.31694 (Arg_0.31691: f32[], Arg_1.31692: f32[]) -> f32[] {
  %Arg_0.31691 = f32[] parameter(0)
  %Arg_1.31692 = f32[] parameter(1)
  ROOT %add.31693 = f32[] add(%Arg_0.31691, %Arg_1.31692)
}

%region_1396.31694.clone (Arg_0.1885: f32[], Arg_1.1558: f32[]) -> f32[] {
  %Arg_0.1885 = f32[] parameter(0)
  %Arg_1.1558 = f32[] parameter(1)
  ROOT %add.1477 = f32[] add(%Arg_0.1885, %Arg_1.1558)
}

%region_1397.31703 (Arg_0.31700: f32[], Arg_1.31701: f32[]) -> f32[] {
  %Arg_0.31700 = f32[] parameter(0)
  %Arg_1.31701 = f32[] parameter(1)
  ROOT %add.31702 = f32[] add(%Arg_0.31700, %Arg_1.31701)
}

%region_1397.31703.clone (Arg_0.1886: f32[], Arg_1.1559: f32[]) -> f32[] {
  %Arg_0.1886 = f32[] parameter(0)
  %Arg_1.1559 = f32[] parameter(1)
  ROOT %add.1478 = f32[] add(%Arg_0.1886, %Arg_1.1559)
}

%region_1080.27714 (Arg_0.27711: bf16[], Arg_1.27712: bf16[]) -> bf16[] {
  %Arg_0.27711 = bf16[] parameter(0)
  %Arg_1.27712 = bf16[] parameter(1)
  ROOT %add.27713 = bf16[] add(%Arg_0.27711, %Arg_1.27712)
}

%region_1080.27714.clone (Arg_0.1887: bf16[], Arg_1.1560: bf16[]) -> bf16[] {
  %Arg_0.1887 = bf16[] parameter(0)
  %Arg_1.1560 = bf16[] parameter(1)
  ROOT %add.1479 = bf16[] add(%Arg_0.1887, %Arg_1.1560)
}

%region_1398.31712 (Arg_0.31709: f32[], Arg_1.31710: f32[]) -> f32[] {
  %Arg_0.31709 = f32[] parameter(0)
  %Arg_1.31710 = f32[] parameter(1)
  ROOT %add.31711 = f32[] add(%Arg_0.31709, %Arg_1.31710)
}

%region_1084.27825 (Arg_0.27822: bf16[], Arg_1.27823: bf16[]) -> bf16[] {
  %Arg_0.27822 = bf16[] parameter(0)
  %Arg_1.27823 = bf16[] parameter(1)
  ROOT %add.27824 = bf16[] add(%Arg_0.27822, %Arg_1.27823)
}

%region_1084.27825.clone (Arg_0.1888: bf16[], Arg_1.1561: bf16[]) -> bf16[] {
  %Arg_0.1888 = bf16[] parameter(0)
  %Arg_1.1561 = bf16[] parameter(1)
  ROOT %add.1480 = bf16[] add(%Arg_0.1888, %Arg_1.1561)
}

%region_1399.31721 (Arg_0.31718: f32[], Arg_1.31719: f32[]) -> f32[] {
  %Arg_0.31718 = f32[] parameter(0)
  %Arg_1.31719 = f32[] parameter(1)
  ROOT %add.31720 = f32[] add(%Arg_0.31718, %Arg_1.31719)
}

%add.116.clone (x.233: bf16[], y.233: bf16[]) -> bf16[] {
  %x.233 = bf16[] parameter(0)
  %y.233 = bf16[] parameter(1)
  ROOT %add.1482 = bf16[] add(%x.233, %y.233)
}

%region_1400.31730 (Arg_0.31727: f32[], Arg_1.31728: f32[]) -> f32[] {
  %Arg_0.31727 = f32[] parameter(0)
  %Arg_1.31728 = f32[] parameter(1)
  ROOT %add.31729 = f32[] add(%Arg_0.31727, %Arg_1.31728)
}

%region_1400.31730.clone (Arg_0.1889: f32[], Arg_1.1562: f32[]) -> f32[] {
  %Arg_0.1889 = f32[] parameter(0)
  %Arg_1.1562 = f32[] parameter(1)
  ROOT %add.1483 = f32[] add(%Arg_0.1889, %Arg_1.1562)
}

%add.117.clone (x.235: bf16[], y.235: bf16[]) -> bf16[] {
  %x.235 = bf16[] parameter(0)
  %y.235 = bf16[] parameter(1)
  ROOT %add.1485 = bf16[] add(%x.235, %y.235)
}

%region_1401.31739 (Arg_0.31736: f32[], Arg_1.31737: f32[]) -> f32[] {
  %Arg_0.31736 = f32[] parameter(0)
  %Arg_1.31737 = f32[] parameter(1)
  ROOT %add.31738 = f32[] add(%Arg_0.31736, %Arg_1.31737)
}

%region_1401.31739.clone (Arg_0.1890: f32[], Arg_1.1563: f32[]) -> f32[] {
  %Arg_0.1890 = f32[] parameter(0)
  %Arg_1.1563 = f32[] parameter(1)
  ROOT %add.1486 = f32[] add(%Arg_0.1890, %Arg_1.1563)
}

%add.118.clone (x.237: bf16[], y.237: bf16[]) -> bf16[] {
  %x.237 = bf16[] parameter(0)
  %y.237 = bf16[] parameter(1)
  ROOT %add.1488 = bf16[] add(%x.237, %y.237)
}

%region_1402.31748 (Arg_0.31745: f32[], Arg_1.31746: f32[]) -> f32[] {
  %Arg_0.31745 = f32[] parameter(0)
  %Arg_1.31746 = f32[] parameter(1)
  ROOT %add.31747 = f32[] add(%Arg_0.31745, %Arg_1.31746)
}

%region_1402.31748.clone (Arg_0.1891: f32[], Arg_1.1564: f32[]) -> f32[] {
  %Arg_0.1891 = f32[] parameter(0)
  %Arg_1.1564 = f32[] parameter(1)
  ROOT %add.1489 = f32[] add(%Arg_0.1891, %Arg_1.1564)
}

%add.119.clone (x.239: bf16[], y.239: bf16[]) -> bf16[] {
  %x.239 = bf16[] parameter(0)
  %y.239 = bf16[] parameter(1)
  ROOT %add.1491 = bf16[] add(%x.239, %y.239)
}

%region_1403.31757 (Arg_0.31754: f32[], Arg_1.31755: f32[]) -> f32[] {
  %Arg_0.31754 = f32[] parameter(0)
  %Arg_1.31755 = f32[] parameter(1)
  ROOT %add.31756 = f32[] add(%Arg_0.31754, %Arg_1.31755)
}

%region_1403.31757.clone (Arg_0.1892: f32[], Arg_1.1565: f32[]) -> f32[] {
  %Arg_0.1892 = f32[] parameter(0)
  %Arg_1.1565 = f32[] parameter(1)
  ROOT %add.1492 = f32[] add(%Arg_0.1892, %Arg_1.1565)
}

%add.120.clone (x.241: bf16[], y.241: bf16[]) -> bf16[] {
  %x.241 = bf16[] parameter(0)
  %y.241 = bf16[] parameter(1)
  ROOT %add.1494 = bf16[] add(%x.241, %y.241)
}

%region_1404.31766 (Arg_0.31763: f32[], Arg_1.31764: f32[]) -> f32[] {
  %Arg_0.31763 = f32[] parameter(0)
  %Arg_1.31764 = f32[] parameter(1)
  ROOT %add.31765 = f32[] add(%Arg_0.31763, %Arg_1.31764)
}

%region_1404.31766.clone (Arg_0.1893: f32[], Arg_1.1566: f32[]) -> f32[] {
  %Arg_0.1893 = f32[] parameter(0)
  %Arg_1.1566 = f32[] parameter(1)
  ROOT %add.1495 = f32[] add(%Arg_0.1893, %Arg_1.1566)
}

%region_1405.31775 (Arg_0.31772: f32[], Arg_1.31773: f32[]) -> f32[] {
  %Arg_0.31772 = f32[] parameter(0)
  %Arg_1.31773 = f32[] parameter(1)
  ROOT %add.31774 = f32[] add(%Arg_0.31772, %Arg_1.31773)
}

%region_1405.31775.clone (Arg_0.1894: f32[], Arg_1.1567: f32[]) -> f32[] {
  %Arg_0.1894 = f32[] parameter(0)
  %Arg_1.1567 = f32[] parameter(1)
  ROOT %add.1496 = f32[] add(%Arg_0.1894, %Arg_1.1567)
}

%region_1406.31784 (Arg_0.31781: f32[], Arg_1.31782: f32[]) -> f32[] {
  %Arg_0.31781 = f32[] parameter(0)
  %Arg_1.31782 = f32[] parameter(1)
  ROOT %add.31783 = f32[] add(%Arg_0.31781, %Arg_1.31782)
}

%region_1406.31784.clone (Arg_0.1895: f32[], Arg_1.1568: f32[]) -> f32[] {
  %Arg_0.1895 = f32[] parameter(0)
  %Arg_1.1568 = f32[] parameter(1)
  ROOT %add.1497 = f32[] add(%Arg_0.1895, %Arg_1.1568)
}

%region_1407.31793 (Arg_0.31790: f32[], Arg_1.31791: f32[]) -> f32[] {
  %Arg_0.31790 = f32[] parameter(0)
  %Arg_1.31791 = f32[] parameter(1)
  ROOT %add.31792 = f32[] add(%Arg_0.31790, %Arg_1.31791)
}

%region_1407.31793.clone (Arg_0.1896: f32[], Arg_1.1569: f32[]) -> f32[] {
  %Arg_0.1896 = f32[] parameter(0)
  %Arg_1.1569 = f32[] parameter(1)
  ROOT %add.1498 = f32[] add(%Arg_0.1896, %Arg_1.1569)
}

%region_405.12162 (Arg_0.12159: bf16[], Arg_1.12160: bf16[]) -> bf16[] {
  %Arg_0.12159 = bf16[] parameter(0)
  %Arg_1.12160 = bf16[] parameter(1)
  ROOT %add.12161 = bf16[] add(%Arg_0.12159, %Arg_1.12160)
}

%region_405.12162.clone (Arg_0.1897: bf16[], Arg_1.1570: bf16[]) -> bf16[] {
  %Arg_0.1897 = bf16[] parameter(0)
  %Arg_1.1570 = bf16[] parameter(1)
  ROOT %add.1499 = bf16[] add(%Arg_0.1897, %Arg_1.1570)
}

%region_1408.31802 (Arg_0.31799: f32[], Arg_1.31800: f32[]) -> f32[] {
  %Arg_0.31799 = f32[] parameter(0)
  %Arg_1.31800 = f32[] parameter(1)
  ROOT %add.31801 = f32[] add(%Arg_0.31799, %Arg_1.31800)
}

%region_409.12273 (Arg_0.12270: bf16[], Arg_1.12271: bf16[]) -> bf16[] {
  %Arg_0.12270 = bf16[] parameter(0)
  %Arg_1.12271 = bf16[] parameter(1)
  ROOT %add.12272 = bf16[] add(%Arg_0.12270, %Arg_1.12271)
}

%region_409.12273.clone (Arg_0.1898: bf16[], Arg_1.1571: bf16[]) -> bf16[] {
  %Arg_0.1898 = bf16[] parameter(0)
  %Arg_1.1571 = bf16[] parameter(1)
  ROOT %add.1500 = bf16[] add(%Arg_0.1898, %Arg_1.1571)
}

%region_1409.31811 (Arg_0.31808: f32[], Arg_1.31809: f32[]) -> f32[] {
  %Arg_0.31808 = f32[] parameter(0)
  %Arg_1.31809 = f32[] parameter(1)
  ROOT %add.31810 = f32[] add(%Arg_0.31808, %Arg_1.31809)
}

%add.121.clone (x.243: bf16[], y.243: bf16[]) -> bf16[] {
  %x.243 = bf16[] parameter(0)
  %y.243 = bf16[] parameter(1)
  ROOT %add.1502 = bf16[] add(%x.243, %y.243)
}

%region_1410.31820 (Arg_0.31817: f32[], Arg_1.31818: f32[]) -> f32[] {
  %Arg_0.31817 = f32[] parameter(0)
  %Arg_1.31818 = f32[] parameter(1)
  ROOT %add.31819 = f32[] add(%Arg_0.31817, %Arg_1.31818)
}

%region_1410.31820.clone (Arg_0.1899: f32[], Arg_1.1572: f32[]) -> f32[] {
  %Arg_0.1899 = f32[] parameter(0)
  %Arg_1.1572 = f32[] parameter(1)
  ROOT %add.1503 = f32[] add(%Arg_0.1899, %Arg_1.1572)
}

%add.122.clone (x.245: bf16[], y.245: bf16[]) -> bf16[] {
  %x.245 = bf16[] parameter(0)
  %y.245 = bf16[] parameter(1)
  ROOT %add.1506 = bf16[] add(%x.245, %y.245)
}

%region_1411.31829 (Arg_0.31826: f32[], Arg_1.31827: f32[]) -> f32[] {
  %Arg_0.31826 = f32[] parameter(0)
  %Arg_1.31827 = f32[] parameter(1)
  ROOT %add.31828 = f32[] add(%Arg_0.31826, %Arg_1.31827)
}

%region_1411.31829.clone (Arg_0.1900: f32[], Arg_1.1573: f32[]) -> f32[] {
  %Arg_0.1900 = f32[] parameter(0)
  %Arg_1.1573 = f32[] parameter(1)
  ROOT %add.1507 = f32[] add(%Arg_0.1900, %Arg_1.1573)
}

%add.123.clone (x.247: bf16[], y.247: bf16[]) -> bf16[] {
  %x.247 = bf16[] parameter(0)
  %y.247 = bf16[] parameter(1)
  ROOT %add.1509 = bf16[] add(%x.247, %y.247)
}

%region_1412.31838 (Arg_0.31835: f32[], Arg_1.31836: f32[]) -> f32[] {
  %Arg_0.31835 = f32[] parameter(0)
  %Arg_1.31836 = f32[] parameter(1)
  ROOT %add.31837 = f32[] add(%Arg_0.31835, %Arg_1.31836)
}

%region_1412.31838.clone (Arg_0.1901: f32[], Arg_1.1574: f32[]) -> f32[] {
  %Arg_0.1901 = f32[] parameter(0)
  %Arg_1.1574 = f32[] parameter(1)
  ROOT %add.1510 = f32[] add(%Arg_0.1901, %Arg_1.1574)
}

%add.124.clone (x.249: bf16[], y.249: bf16[]) -> bf16[] {
  %x.249 = bf16[] parameter(0)
  %y.249 = bf16[] parameter(1)
  ROOT %add.1512 = bf16[] add(%x.249, %y.249)
}

%region_1413.31847 (Arg_0.31844: f32[], Arg_1.31845: f32[]) -> f32[] {
  %Arg_0.31844 = f32[] parameter(0)
  %Arg_1.31845 = f32[] parameter(1)
  ROOT %add.31846 = f32[] add(%Arg_0.31844, %Arg_1.31845)
}

%region_1413.31847.clone (Arg_0.1902: f32[], Arg_1.1575: f32[]) -> f32[] {
  %Arg_0.1902 = f32[] parameter(0)
  %Arg_1.1575 = f32[] parameter(1)
  ROOT %add.1513 = f32[] add(%Arg_0.1902, %Arg_1.1575)
}

%add.125.clone (x.251: bf16[], y.251: bf16[]) -> bf16[] {
  %x.251 = bf16[] parameter(0)
  %y.251 = bf16[] parameter(1)
  ROOT %add.1516 = bf16[] add(%x.251, %y.251)
}

%region_1414.31856 (Arg_0.31853: f32[], Arg_1.31854: f32[]) -> f32[] {
  %Arg_0.31853 = f32[] parameter(0)
  %Arg_1.31854 = f32[] parameter(1)
  ROOT %add.31855 = f32[] add(%Arg_0.31853, %Arg_1.31854)
}

%region_1414.31856.clone (Arg_0.1903: f32[], Arg_1.1576: f32[]) -> f32[] {
  %Arg_0.1903 = f32[] parameter(0)
  %Arg_1.1576 = f32[] parameter(1)
  ROOT %add.1517 = f32[] add(%Arg_0.1903, %Arg_1.1576)
}

%region_1415.31865 (Arg_0.31862: f32[], Arg_1.31863: f32[]) -> f32[] {
  %Arg_0.31862 = f32[] parameter(0)
  %Arg_1.31863 = f32[] parameter(1)
  ROOT %add.31864 = f32[] add(%Arg_0.31862, %Arg_1.31863)
}

%region_1415.31865.clone (Arg_0.1904: f32[], Arg_1.1577: f32[]) -> f32[] {
  %Arg_0.1904 = f32[] parameter(0)
  %Arg_1.1577 = f32[] parameter(1)
  ROOT %add.1518 = f32[] add(%Arg_0.1904, %Arg_1.1577)
}

%region_1416.31874 (Arg_0.31871: f32[], Arg_1.31872: f32[]) -> f32[] {
  %Arg_0.31871 = f32[] parameter(0)
  %Arg_1.31872 = f32[] parameter(1)
  ROOT %add.31873 = f32[] add(%Arg_0.31871, %Arg_1.31872)
}

%region_1416.31874.clone (Arg_0.1905: f32[], Arg_1.1578: f32[]) -> f32[] {
  %Arg_0.1905 = f32[] parameter(0)
  %Arg_1.1578 = f32[] parameter(1)
  ROOT %add.1519 = f32[] add(%Arg_0.1905, %Arg_1.1578)
}

%region_1417.31883 (Arg_0.31880: f32[], Arg_1.31881: f32[]) -> f32[] {
  %Arg_0.31880 = f32[] parameter(0)
  %Arg_1.31881 = f32[] parameter(1)
  ROOT %add.31882 = f32[] add(%Arg_0.31880, %Arg_1.31881)
}

%region_1417.31883.clone (Arg_0.1906: f32[], Arg_1.1579: f32[]) -> f32[] {
  %Arg_0.1906 = f32[] parameter(0)
  %Arg_1.1579 = f32[] parameter(1)
  ROOT %add.1520 = f32[] add(%Arg_0.1906, %Arg_1.1579)
}

%region_380.11586 (Arg_0.11583: bf16[], Arg_1.11584: bf16[]) -> bf16[] {
  %Arg_0.11583 = bf16[] parameter(0)
  %Arg_1.11584 = bf16[] parameter(1)
  ROOT %add.11585 = bf16[] add(%Arg_0.11583, %Arg_1.11584)
}

%region_380.11586.clone (Arg_0.1907: bf16[], Arg_1.1580: bf16[]) -> bf16[] {
  %Arg_0.1907 = bf16[] parameter(0)
  %Arg_1.1580 = bf16[] parameter(1)
  ROOT %add.1521 = bf16[] add(%Arg_0.1907, %Arg_1.1580)
}

%region_1418.31892 (Arg_0.31889: f32[], Arg_1.31890: f32[]) -> f32[] {
  %Arg_0.31889 = f32[] parameter(0)
  %Arg_1.31890 = f32[] parameter(1)
  ROOT %add.31891 = f32[] add(%Arg_0.31889, %Arg_1.31890)
}

%region_384.11697 (Arg_0.11694: bf16[], Arg_1.11695: bf16[]) -> bf16[] {
  %Arg_0.11694 = bf16[] parameter(0)
  %Arg_1.11695 = bf16[] parameter(1)
  ROOT %add.11696 = bf16[] add(%Arg_0.11694, %Arg_1.11695)
}

%region_384.11697.clone (Arg_0.1908: bf16[], Arg_1.1581: bf16[]) -> bf16[] {
  %Arg_0.1908 = bf16[] parameter(0)
  %Arg_1.1581 = bf16[] parameter(1)
  ROOT %add.1523 = bf16[] add(%Arg_0.1908, %Arg_1.1581)
}

%region_1419.31901 (Arg_0.31898: f32[], Arg_1.31899: f32[]) -> f32[] {
  %Arg_0.31898 = f32[] parameter(0)
  %Arg_1.31899 = f32[] parameter(1)
  ROOT %add.31900 = f32[] add(%Arg_0.31898, %Arg_1.31899)
}

%add.126.clone (x.253: bf16[], y.253: bf16[]) -> bf16[] {
  %x.253 = bf16[] parameter(0)
  %y.253 = bf16[] parameter(1)
  ROOT %add.1525 = bf16[] add(%x.253, %y.253)
}

%region_1420.31910 (Arg_0.31907: f32[], Arg_1.31908: f32[]) -> f32[] {
  %Arg_0.31907 = f32[] parameter(0)
  %Arg_1.31908 = f32[] parameter(1)
  ROOT %add.31909 = f32[] add(%Arg_0.31907, %Arg_1.31908)
}

%region_1420.31910.clone (Arg_0.1909: f32[], Arg_1.1582: f32[]) -> f32[] {
  %Arg_0.1909 = f32[] parameter(0)
  %Arg_1.1582 = f32[] parameter(1)
  ROOT %add.1526 = f32[] add(%Arg_0.1909, %Arg_1.1582)
}

%add.127.clone (x.255: bf16[], y.255: bf16[]) -> bf16[] {
  %x.255 = bf16[] parameter(0)
  %y.255 = bf16[] parameter(1)
  ROOT %add.1529 = bf16[] add(%x.255, %y.255)
}

%region_1421.31919 (Arg_0.31916: f32[], Arg_1.31917: f32[]) -> f32[] {
  %Arg_0.31916 = f32[] parameter(0)
  %Arg_1.31917 = f32[] parameter(1)
  ROOT %add.31918 = f32[] add(%Arg_0.31916, %Arg_1.31917)
}

%region_1421.31919.clone (Arg_0.1910: f32[], Arg_1.1583: f32[]) -> f32[] {
  %Arg_0.1910 = f32[] parameter(0)
  %Arg_1.1583 = f32[] parameter(1)
  ROOT %add.1530 = f32[] add(%Arg_0.1910, %Arg_1.1583)
}

%add.128.clone (x.257: bf16[], y.257: bf16[]) -> bf16[] {
  %x.257 = bf16[] parameter(0)
  %y.257 = bf16[] parameter(1)
  ROOT %add.1532 = bf16[] add(%x.257, %y.257)
}

%region_1422.31928 (Arg_0.31925: f32[], Arg_1.31926: f32[]) -> f32[] {
  %Arg_0.31925 = f32[] parameter(0)
  %Arg_1.31926 = f32[] parameter(1)
  ROOT %add.31927 = f32[] add(%Arg_0.31925, %Arg_1.31926)
}

%region_1422.31928.clone (Arg_0.1911: f32[], Arg_1.1584: f32[]) -> f32[] {
  %Arg_0.1911 = f32[] parameter(0)
  %Arg_1.1584 = f32[] parameter(1)
  ROOT %add.1533 = f32[] add(%Arg_0.1911, %Arg_1.1584)
}

%add.129.clone (x.259: bf16[], y.259: bf16[]) -> bf16[] {
  %x.259 = bf16[] parameter(0)
  %y.259 = bf16[] parameter(1)
  ROOT %add.1535 = bf16[] add(%x.259, %y.259)
}

%region_1423.31937 (Arg_0.31934: f32[], Arg_1.31935: f32[]) -> f32[] {
  %Arg_0.31934 = f32[] parameter(0)
  %Arg_1.31935 = f32[] parameter(1)
  ROOT %add.31936 = f32[] add(%Arg_0.31934, %Arg_1.31935)
}

%region_1423.31937.clone (Arg_0.1912: f32[], Arg_1.1585: f32[]) -> f32[] {
  %Arg_0.1912 = f32[] parameter(0)
  %Arg_1.1585 = f32[] parameter(1)
  ROOT %add.1536 = f32[] add(%Arg_0.1912, %Arg_1.1585)
}

%add.130.clone (x.261: bf16[], y.261: bf16[]) -> bf16[] {
  %x.261 = bf16[] parameter(0)
  %y.261 = bf16[] parameter(1)
  ROOT %add.1538 = bf16[] add(%x.261, %y.261)
}

%region_1424.31946 (Arg_0.31943: f32[], Arg_1.31944: f32[]) -> f32[] {
  %Arg_0.31943 = f32[] parameter(0)
  %Arg_1.31944 = f32[] parameter(1)
  ROOT %add.31945 = f32[] add(%Arg_0.31943, %Arg_1.31944)
}

%region_1424.31946.clone (Arg_0.1913: f32[], Arg_1.1586: f32[]) -> f32[] {
  %Arg_0.1913 = f32[] parameter(0)
  %Arg_1.1586 = f32[] parameter(1)
  ROOT %add.1539 = f32[] add(%Arg_0.1913, %Arg_1.1586)
}

%region_1425.31955 (Arg_0.31952: f32[], Arg_1.31953: f32[]) -> f32[] {
  %Arg_0.31952 = f32[] parameter(0)
  %Arg_1.31953 = f32[] parameter(1)
  ROOT %add.31954 = f32[] add(%Arg_0.31952, %Arg_1.31953)
}

%region_1425.31955.clone (Arg_0.1914: f32[], Arg_1.1587: f32[]) -> f32[] {
  %Arg_0.1914 = f32[] parameter(0)
  %Arg_1.1587 = f32[] parameter(1)
  ROOT %add.1540 = f32[] add(%Arg_0.1914, %Arg_1.1587)
}

%region_1426.31964 (Arg_0.31961: f32[], Arg_1.31962: f32[]) -> f32[] {
  %Arg_0.31961 = f32[] parameter(0)
  %Arg_1.31962 = f32[] parameter(1)
  ROOT %add.31963 = f32[] add(%Arg_0.31961, %Arg_1.31962)
}

%region_1426.31964.clone (Arg_0.1915: f32[], Arg_1.1588: f32[]) -> f32[] {
  %Arg_0.1915 = f32[] parameter(0)
  %Arg_1.1588 = f32[] parameter(1)
  ROOT %add.1541 = f32[] add(%Arg_0.1915, %Arg_1.1588)
}

%region_1427.31973 (Arg_0.31970: f32[], Arg_1.31971: f32[]) -> f32[] {
  %Arg_0.31970 = f32[] parameter(0)
  %Arg_1.31971 = f32[] parameter(1)
  ROOT %add.31972 = f32[] add(%Arg_0.31970, %Arg_1.31971)
}

%region_1427.31973.clone (Arg_0.1916: f32[], Arg_1.1589: f32[]) -> f32[] {
  %Arg_0.1916 = f32[] parameter(0)
  %Arg_1.1589 = f32[] parameter(1)
  ROOT %add.1542 = f32[] add(%Arg_0.1916, %Arg_1.1589)
}

%region_1055.27138 (Arg_0.27135: bf16[], Arg_1.27136: bf16[]) -> bf16[] {
  %Arg_0.27135 = bf16[] parameter(0)
  %Arg_1.27136 = bf16[] parameter(1)
  ROOT %add.27137 = bf16[] add(%Arg_0.27135, %Arg_1.27136)
}

%region_1055.27138.clone (Arg_0.1917: bf16[], Arg_1.1590: bf16[]) -> bf16[] {
  %Arg_0.1917 = bf16[] parameter(0)
  %Arg_1.1590 = bf16[] parameter(1)
  ROOT %add.1543 = bf16[] add(%Arg_0.1917, %Arg_1.1590)
}

%region_1428.31982 (Arg_0.31979: f32[], Arg_1.31980: f32[]) -> f32[] {
  %Arg_0.31979 = f32[] parameter(0)
  %Arg_1.31980 = f32[] parameter(1)
  ROOT %add.31981 = f32[] add(%Arg_0.31979, %Arg_1.31980)
}

%region_1059.27249 (Arg_0.27246: bf16[], Arg_1.27247: bf16[]) -> bf16[] {
  %Arg_0.27246 = bf16[] parameter(0)
  %Arg_1.27247 = bf16[] parameter(1)
  ROOT %add.27248 = bf16[] add(%Arg_0.27246, %Arg_1.27247)
}

%region_1059.27249.clone (Arg_0.1918: bf16[], Arg_1.1591: bf16[]) -> bf16[] {
  %Arg_0.1918 = bf16[] parameter(0)
  %Arg_1.1591 = bf16[] parameter(1)
  ROOT %add.1544 = bf16[] add(%Arg_0.1918, %Arg_1.1591)
}

%region_1429.31991 (Arg_0.31988: f32[], Arg_1.31989: f32[]) -> f32[] {
  %Arg_0.31988 = f32[] parameter(0)
  %Arg_1.31989 = f32[] parameter(1)
  ROOT %add.31990 = f32[] add(%Arg_0.31988, %Arg_1.31989)
}

%add.131.clone (x.263: bf16[], y.263: bf16[]) -> bf16[] {
  %x.263 = bf16[] parameter(0)
  %y.263 = bf16[] parameter(1)
  ROOT %add.1546 = bf16[] add(%x.263, %y.263)
}

%region_1430.32000 (Arg_0.31997: f32[], Arg_1.31998: f32[]) -> f32[] {
  %Arg_0.31997 = f32[] parameter(0)
  %Arg_1.31998 = f32[] parameter(1)
  ROOT %add.31999 = f32[] add(%Arg_0.31997, %Arg_1.31998)
}

%region_1430.32000.clone (Arg_0.1919: f32[], Arg_1.1592: f32[]) -> f32[] {
  %Arg_0.1919 = f32[] parameter(0)
  %Arg_1.1592 = f32[] parameter(1)
  ROOT %add.1547 = f32[] add(%Arg_0.1919, %Arg_1.1592)
}

%add.132.clone (x.265: bf16[], y.265: bf16[]) -> bf16[] {
  %x.265 = bf16[] parameter(0)
  %y.265 = bf16[] parameter(1)
  ROOT %add.1549 = bf16[] add(%x.265, %y.265)
}

%region_1431.32009 (Arg_0.32006: f32[], Arg_1.32007: f32[]) -> f32[] {
  %Arg_0.32006 = f32[] parameter(0)
  %Arg_1.32007 = f32[] parameter(1)
  ROOT %add.32008 = f32[] add(%Arg_0.32006, %Arg_1.32007)
}

%region_1431.32009.clone (Arg_0.1920: f32[], Arg_1.1593: f32[]) -> f32[] {
  %Arg_0.1920 = f32[] parameter(0)
  %Arg_1.1593 = f32[] parameter(1)
  ROOT %add.1550 = f32[] add(%Arg_0.1920, %Arg_1.1593)
}

%add.133.clone (x.267: bf16[], y.267: bf16[]) -> bf16[] {
  %x.267 = bf16[] parameter(0)
  %y.267 = bf16[] parameter(1)
  ROOT %add.1552 = bf16[] add(%x.267, %y.267)
}

%region_1432.32018 (Arg_0.32015: f32[], Arg_1.32016: f32[]) -> f32[] {
  %Arg_0.32015 = f32[] parameter(0)
  %Arg_1.32016 = f32[] parameter(1)
  ROOT %add.32017 = f32[] add(%Arg_0.32015, %Arg_1.32016)
}

%region_1432.32018.clone (Arg_0.1921: f32[], Arg_1.1594: f32[]) -> f32[] {
  %Arg_0.1921 = f32[] parameter(0)
  %Arg_1.1594 = f32[] parameter(1)
  ROOT %add.1553 = f32[] add(%Arg_0.1921, %Arg_1.1594)
}

%add.134.clone (x.269: bf16[], y.269: bf16[]) -> bf16[] {
  %x.269 = bf16[] parameter(0)
  %y.269 = bf16[] parameter(1)
  ROOT %add.1555 = bf16[] add(%x.269, %y.269)
}

%region_1433.32027 (Arg_0.32024: f32[], Arg_1.32025: f32[]) -> f32[] {
  %Arg_0.32024 = f32[] parameter(0)
  %Arg_1.32025 = f32[] parameter(1)
  ROOT %add.32026 = f32[] add(%Arg_0.32024, %Arg_1.32025)
}

%region_1433.32027.clone (Arg_0.1922: f32[], Arg_1.1595: f32[]) -> f32[] {
  %Arg_0.1922 = f32[] parameter(0)
  %Arg_1.1595 = f32[] parameter(1)
  ROOT %add.1556 = f32[] add(%Arg_0.1922, %Arg_1.1595)
}

%add.135.clone (x.271: bf16[], y.271: bf16[]) -> bf16[] {
  %x.271 = bf16[] parameter(0)
  %y.271 = bf16[] parameter(1)
  ROOT %add.1558 = bf16[] add(%x.271, %y.271)
}

%region_1434.32036 (Arg_0.32033: f32[], Arg_1.32034: f32[]) -> f32[] {
  %Arg_0.32033 = f32[] parameter(0)
  %Arg_1.32034 = f32[] parameter(1)
  ROOT %add.32035 = f32[] add(%Arg_0.32033, %Arg_1.32034)
}

%region_1434.32036.clone (Arg_0.1923: f32[], Arg_1.1596: f32[]) -> f32[] {
  %Arg_0.1923 = f32[] parameter(0)
  %Arg_1.1596 = f32[] parameter(1)
  ROOT %add.1559 = f32[] add(%Arg_0.1923, %Arg_1.1596)
}

%region_1435.32045 (Arg_0.32042: f32[], Arg_1.32043: f32[]) -> f32[] {
  %Arg_0.32042 = f32[] parameter(0)
  %Arg_1.32043 = f32[] parameter(1)
  ROOT %add.32044 = f32[] add(%Arg_0.32042, %Arg_1.32043)
}

%region_1435.32045.clone (Arg_0.1924: f32[], Arg_1.1597: f32[]) -> f32[] {
  %Arg_0.1924 = f32[] parameter(0)
  %Arg_1.1597 = f32[] parameter(1)
  ROOT %add.1560 = f32[] add(%Arg_0.1924, %Arg_1.1597)
}

%region_1436.32054 (Arg_0.32051: f32[], Arg_1.32052: f32[]) -> f32[] {
  %Arg_0.32051 = f32[] parameter(0)
  %Arg_1.32052 = f32[] parameter(1)
  ROOT %add.32053 = f32[] add(%Arg_0.32051, %Arg_1.32052)
}

%region_1436.32054.clone (Arg_0.1925: f32[], Arg_1.1598: f32[]) -> f32[] {
  %Arg_0.1925 = f32[] parameter(0)
  %Arg_1.1598 = f32[] parameter(1)
  ROOT %add.1561 = f32[] add(%Arg_0.1925, %Arg_1.1598)
}

%region_1437.32063 (Arg_0.32060: f32[], Arg_1.32061: f32[]) -> f32[] {
  %Arg_0.32060 = f32[] parameter(0)
  %Arg_1.32061 = f32[] parameter(1)
  ROOT %add.32062 = f32[] add(%Arg_0.32060, %Arg_1.32061)
}

%region_1437.32063.clone (Arg_0.1926: f32[], Arg_1.1599: f32[]) -> f32[] {
  %Arg_0.1926 = f32[] parameter(0)
  %Arg_1.1599 = f32[] parameter(1)
  ROOT %add.1562 = f32[] add(%Arg_0.1926, %Arg_1.1599)
}

%region_1030.26562 (Arg_0.26559: bf16[], Arg_1.26560: bf16[]) -> bf16[] {
  %Arg_0.26559 = bf16[] parameter(0)
  %Arg_1.26560 = bf16[] parameter(1)
  ROOT %add.26561 = bf16[] add(%Arg_0.26559, %Arg_1.26560)
}

%region_1030.26562.clone (Arg_0.1927: bf16[], Arg_1.1600: bf16[]) -> bf16[] {
  %Arg_0.1927 = bf16[] parameter(0)
  %Arg_1.1600 = bf16[] parameter(1)
  ROOT %add.1563 = bf16[] add(%Arg_0.1927, %Arg_1.1600)
}

%region_1438.32072 (Arg_0.32069: f32[], Arg_1.32070: f32[]) -> f32[] {
  %Arg_0.32069 = f32[] parameter(0)
  %Arg_1.32070 = f32[] parameter(1)
  ROOT %add.32071 = f32[] add(%Arg_0.32069, %Arg_1.32070)
}

%region_1034.26673 (Arg_0.26670: bf16[], Arg_1.26671: bf16[]) -> bf16[] {
  %Arg_0.26670 = bf16[] parameter(0)
  %Arg_1.26671 = bf16[] parameter(1)
  ROOT %add.26672 = bf16[] add(%Arg_0.26670, %Arg_1.26671)
}

%region_1034.26673.clone (Arg_0.1928: bf16[], Arg_1.1601: bf16[]) -> bf16[] {
  %Arg_0.1928 = bf16[] parameter(0)
  %Arg_1.1601 = bf16[] parameter(1)
  ROOT %add.1564 = bf16[] add(%Arg_0.1928, %Arg_1.1601)
}

%region_1439.32081 (Arg_0.32078: f32[], Arg_1.32079: f32[]) -> f32[] {
  %Arg_0.32078 = f32[] parameter(0)
  %Arg_1.32079 = f32[] parameter(1)
  ROOT %add.32080 = f32[] add(%Arg_0.32078, %Arg_1.32079)
}

%add.136.clone (x.273: bf16[], y.273: bf16[]) -> bf16[] {
  %x.273 = bf16[] parameter(0)
  %y.273 = bf16[] parameter(1)
  ROOT %add.1566 = bf16[] add(%x.273, %y.273)
}

%region_1440.32090 (Arg_0.32087: f32[], Arg_1.32088: f32[]) -> f32[] {
  %Arg_0.32087 = f32[] parameter(0)
  %Arg_1.32088 = f32[] parameter(1)
  ROOT %add.32089 = f32[] add(%Arg_0.32087, %Arg_1.32088)
}

%region_1440.32090.clone (Arg_0.1929: f32[], Arg_1.1602: f32[]) -> f32[] {
  %Arg_0.1929 = f32[] parameter(0)
  %Arg_1.1602 = f32[] parameter(1)
  ROOT %add.1567 = f32[] add(%Arg_0.1929, %Arg_1.1602)
}

%add.137.clone (x.275: bf16[], y.275: bf16[]) -> bf16[] {
  %x.275 = bf16[] parameter(0)
  %y.275 = bf16[] parameter(1)
  ROOT %add.1569 = bf16[] add(%x.275, %y.275)
}

%region_1441.32099 (Arg_0.32096: f32[], Arg_1.32097: f32[]) -> f32[] {
  %Arg_0.32096 = f32[] parameter(0)
  %Arg_1.32097 = f32[] parameter(1)
  ROOT %add.32098 = f32[] add(%Arg_0.32096, %Arg_1.32097)
}

%region_1441.32099.clone (Arg_0.1930: f32[], Arg_1.1603: f32[]) -> f32[] {
  %Arg_0.1930 = f32[] parameter(0)
  %Arg_1.1603 = f32[] parameter(1)
  ROOT %add.1570 = f32[] add(%Arg_0.1930, %Arg_1.1603)
}

%add.138.clone (x.277: bf16[], y.277: bf16[]) -> bf16[] {
  %x.277 = bf16[] parameter(0)
  %y.277 = bf16[] parameter(1)
  ROOT %add.1572 = bf16[] add(%x.277, %y.277)
}

%region_1442.32108 (Arg_0.32105: f32[], Arg_1.32106: f32[]) -> f32[] {
  %Arg_0.32105 = f32[] parameter(0)
  %Arg_1.32106 = f32[] parameter(1)
  ROOT %add.32107 = f32[] add(%Arg_0.32105, %Arg_1.32106)
}

%region_1442.32108.clone (Arg_0.1931: f32[], Arg_1.1604: f32[]) -> f32[] {
  %Arg_0.1931 = f32[] parameter(0)
  %Arg_1.1604 = f32[] parameter(1)
  ROOT %add.1573 = f32[] add(%Arg_0.1931, %Arg_1.1604)
}

%add.139.clone (x.279: bf16[], y.279: bf16[]) -> bf16[] {
  %x.279 = bf16[] parameter(0)
  %y.279 = bf16[] parameter(1)
  ROOT %add.1575 = bf16[] add(%x.279, %y.279)
}

%region_1443.32117 (Arg_0.32114: f32[], Arg_1.32115: f32[]) -> f32[] {
  %Arg_0.32114 = f32[] parameter(0)
  %Arg_1.32115 = f32[] parameter(1)
  ROOT %add.32116 = f32[] add(%Arg_0.32114, %Arg_1.32115)
}

%region_1443.32117.clone (Arg_0.1932: f32[], Arg_1.1605: f32[]) -> f32[] {
  %Arg_0.1932 = f32[] parameter(0)
  %Arg_1.1605 = f32[] parameter(1)
  ROOT %add.1576 = f32[] add(%Arg_0.1932, %Arg_1.1605)
}

%add.140.clone (x.281: bf16[], y.281: bf16[]) -> bf16[] {
  %x.281 = bf16[] parameter(0)
  %y.281 = bf16[] parameter(1)
  ROOT %add.1578 = bf16[] add(%x.281, %y.281)
}

%region_1444.32126 (Arg_0.32123: f32[], Arg_1.32124: f32[]) -> f32[] {
  %Arg_0.32123 = f32[] parameter(0)
  %Arg_1.32124 = f32[] parameter(1)
  ROOT %add.32125 = f32[] add(%Arg_0.32123, %Arg_1.32124)
}

%region_1444.32126.clone (Arg_0.1933: f32[], Arg_1.1606: f32[]) -> f32[] {
  %Arg_0.1933 = f32[] parameter(0)
  %Arg_1.1606 = f32[] parameter(1)
  ROOT %add.1579 = f32[] add(%Arg_0.1933, %Arg_1.1606)
}

%region_1445.32135 (Arg_0.32132: f32[], Arg_1.32133: f32[]) -> f32[] {
  %Arg_0.32132 = f32[] parameter(0)
  %Arg_1.32133 = f32[] parameter(1)
  ROOT %add.32134 = f32[] add(%Arg_0.32132, %Arg_1.32133)
}

%region_1445.32135.clone (Arg_0.1934: f32[], Arg_1.1607: f32[]) -> f32[] {
  %Arg_0.1934 = f32[] parameter(0)
  %Arg_1.1607 = f32[] parameter(1)
  ROOT %add.1580 = f32[] add(%Arg_0.1934, %Arg_1.1607)
}

%region_1446.32144 (Arg_0.32141: f32[], Arg_1.32142: f32[]) -> f32[] {
  %Arg_0.32141 = f32[] parameter(0)
  %Arg_1.32142 = f32[] parameter(1)
  ROOT %add.32143 = f32[] add(%Arg_0.32141, %Arg_1.32142)
}

%region_1446.32144.clone (Arg_0.1935: f32[], Arg_1.1608: f32[]) -> f32[] {
  %Arg_0.1935 = f32[] parameter(0)
  %Arg_1.1608 = f32[] parameter(1)
  ROOT %add.1581 = f32[] add(%Arg_0.1935, %Arg_1.1608)
}

%region_1447.32153 (Arg_0.32150: f32[], Arg_1.32151: f32[]) -> f32[] {
  %Arg_0.32150 = f32[] parameter(0)
  %Arg_1.32151 = f32[] parameter(1)
  ROOT %add.32152 = f32[] add(%Arg_0.32150, %Arg_1.32151)
}

%region_1447.32153.clone (Arg_0.1936: f32[], Arg_1.1609: f32[]) -> f32[] {
  %Arg_0.1936 = f32[] parameter(0)
  %Arg_1.1609 = f32[] parameter(1)
  ROOT %add.1582 = f32[] add(%Arg_0.1936, %Arg_1.1609)
}

%region_1005.25986 (Arg_0.25983: bf16[], Arg_1.25984: bf16[]) -> bf16[] {
  %Arg_0.25983 = bf16[] parameter(0)
  %Arg_1.25984 = bf16[] parameter(1)
  ROOT %add.25985 = bf16[] add(%Arg_0.25983, %Arg_1.25984)
}

%region_1005.25986.clone (Arg_0.1937: bf16[], Arg_1.1610: bf16[]) -> bf16[] {
  %Arg_0.1937 = bf16[] parameter(0)
  %Arg_1.1610 = bf16[] parameter(1)
  ROOT %add.1584 = bf16[] add(%Arg_0.1937, %Arg_1.1610)
}

%region_1448.32162 (Arg_0.32159: f32[], Arg_1.32160: f32[]) -> f32[] {
  %Arg_0.32159 = f32[] parameter(0)
  %Arg_1.32160 = f32[] parameter(1)
  ROOT %add.32161 = f32[] add(%Arg_0.32159, %Arg_1.32160)
}

%region_1009.26097 (Arg_0.26094: bf16[], Arg_1.26095: bf16[]) -> bf16[] {
  %Arg_0.26094 = bf16[] parameter(0)
  %Arg_1.26095 = bf16[] parameter(1)
  ROOT %add.26096 = bf16[] add(%Arg_0.26094, %Arg_1.26095)
}

%region_1009.26097.clone (Arg_0.1938: bf16[], Arg_1.1611: bf16[]) -> bf16[] {
  %Arg_0.1938 = bf16[] parameter(0)
  %Arg_1.1611 = bf16[] parameter(1)
  ROOT %add.1585 = bf16[] add(%Arg_0.1938, %Arg_1.1611)
}

%region_1449.32171 (Arg_0.32168: f32[], Arg_1.32169: f32[]) -> f32[] {
  %Arg_0.32168 = f32[] parameter(0)
  %Arg_1.32169 = f32[] parameter(1)
  ROOT %add.32170 = f32[] add(%Arg_0.32168, %Arg_1.32169)
}

%add.141.clone (x.283: bf16[], y.283: bf16[]) -> bf16[] {
  %x.283 = bf16[] parameter(0)
  %y.283 = bf16[] parameter(1)
  ROOT %add.1587 = bf16[] add(%x.283, %y.283)
}

%region_1450.32180 (Arg_0.32177: f32[], Arg_1.32178: f32[]) -> f32[] {
  %Arg_0.32177 = f32[] parameter(0)
  %Arg_1.32178 = f32[] parameter(1)
  ROOT %add.32179 = f32[] add(%Arg_0.32177, %Arg_1.32178)
}

%region_1450.32180.clone (Arg_0.1939: f32[], Arg_1.1612: f32[]) -> f32[] {
  %Arg_0.1939 = f32[] parameter(0)
  %Arg_1.1612 = f32[] parameter(1)
  ROOT %add.1588 = f32[] add(%Arg_0.1939, %Arg_1.1612)
}

%add.142.clone (x.285: bf16[], y.285: bf16[]) -> bf16[] {
  %x.285 = bf16[] parameter(0)
  %y.285 = bf16[] parameter(1)
  ROOT %add.1590 = bf16[] add(%x.285, %y.285)
}

%region_1451.32189 (Arg_0.32186: f32[], Arg_1.32187: f32[]) -> f32[] {
  %Arg_0.32186 = f32[] parameter(0)
  %Arg_1.32187 = f32[] parameter(1)
  ROOT %add.32188 = f32[] add(%Arg_0.32186, %Arg_1.32187)
}

%region_1451.32189.clone (Arg_0.1940: f32[], Arg_1.1613: f32[]) -> f32[] {
  %Arg_0.1940 = f32[] parameter(0)
  %Arg_1.1613 = f32[] parameter(1)
  ROOT %add.1591 = f32[] add(%Arg_0.1940, %Arg_1.1613)
}

%add.143.clone (x.287: bf16[], y.287: bf16[]) -> bf16[] {
  %x.287 = bf16[] parameter(0)
  %y.287 = bf16[] parameter(1)
  ROOT %add.1593 = bf16[] add(%x.287, %y.287)
}

%region_1452.32198 (Arg_0.32195: f32[], Arg_1.32196: f32[]) -> f32[] {
  %Arg_0.32195 = f32[] parameter(0)
  %Arg_1.32196 = f32[] parameter(1)
  ROOT %add.32197 = f32[] add(%Arg_0.32195, %Arg_1.32196)
}

%region_1452.32198.clone (Arg_0.1941: f32[], Arg_1.1614: f32[]) -> f32[] {
  %Arg_0.1941 = f32[] parameter(0)
  %Arg_1.1614 = f32[] parameter(1)
  ROOT %add.1594 = f32[] add(%Arg_0.1941, %Arg_1.1614)
}

%add.144.clone (x.289: bf16[], y.289: bf16[]) -> bf16[] {
  %x.289 = bf16[] parameter(0)
  %y.289 = bf16[] parameter(1)
  ROOT %add.1596 = bf16[] add(%x.289, %y.289)
}

%region_1453.32207 (Arg_0.32204: f32[], Arg_1.32205: f32[]) -> f32[] {
  %Arg_0.32204 = f32[] parameter(0)
  %Arg_1.32205 = f32[] parameter(1)
  ROOT %add.32206 = f32[] add(%Arg_0.32204, %Arg_1.32205)
}

%region_1453.32207.clone (Arg_0.1942: f32[], Arg_1.1615: f32[]) -> f32[] {
  %Arg_0.1942 = f32[] parameter(0)
  %Arg_1.1615 = f32[] parameter(1)
  ROOT %add.1597 = f32[] add(%Arg_0.1942, %Arg_1.1615)
}

%add.145.clone (x.291: bf16[], y.291: bf16[]) -> bf16[] {
  %x.291 = bf16[] parameter(0)
  %y.291 = bf16[] parameter(1)
  ROOT %add.1599 = bf16[] add(%x.291, %y.291)
}

%region_1454.32216 (Arg_0.32213: f32[], Arg_1.32214: f32[]) -> f32[] {
  %Arg_0.32213 = f32[] parameter(0)
  %Arg_1.32214 = f32[] parameter(1)
  ROOT %add.32215 = f32[] add(%Arg_0.32213, %Arg_1.32214)
}

%region_1454.32216.clone (Arg_0.1943: f32[], Arg_1.1616: f32[]) -> f32[] {
  %Arg_0.1943 = f32[] parameter(0)
  %Arg_1.1616 = f32[] parameter(1)
  ROOT %add.1600 = f32[] add(%Arg_0.1943, %Arg_1.1616)
}

%region_1455.32225 (Arg_0.32222: f32[], Arg_1.32223: f32[]) -> f32[] {
  %Arg_0.32222 = f32[] parameter(0)
  %Arg_1.32223 = f32[] parameter(1)
  ROOT %add.32224 = f32[] add(%Arg_0.32222, %Arg_1.32223)
}

%region_1455.32225.clone (Arg_0.1944: f32[], Arg_1.1617: f32[]) -> f32[] {
  %Arg_0.1944 = f32[] parameter(0)
  %Arg_1.1617 = f32[] parameter(1)
  ROOT %add.1601 = f32[] add(%Arg_0.1944, %Arg_1.1617)
}

%region_1456.32234 (Arg_0.32231: f32[], Arg_1.32232: f32[]) -> f32[] {
  %Arg_0.32231 = f32[] parameter(0)
  %Arg_1.32232 = f32[] parameter(1)
  ROOT %add.32233 = f32[] add(%Arg_0.32231, %Arg_1.32232)
}

%region_1456.32234.clone (Arg_0.1945: f32[], Arg_1.1618: f32[]) -> f32[] {
  %Arg_0.1945 = f32[] parameter(0)
  %Arg_1.1618 = f32[] parameter(1)
  ROOT %add.1602 = f32[] add(%Arg_0.1945, %Arg_1.1618)
}

%region_1457.32243 (Arg_0.32240: f32[], Arg_1.32241: f32[]) -> f32[] {
  %Arg_0.32240 = f32[] parameter(0)
  %Arg_1.32241 = f32[] parameter(1)
  ROOT %add.32242 = f32[] add(%Arg_0.32240, %Arg_1.32241)
}

%region_1457.32243.clone (Arg_0.1946: f32[], Arg_1.1619: f32[]) -> f32[] {
  %Arg_0.1946 = f32[] parameter(0)
  %Arg_1.1619 = f32[] parameter(1)
  ROOT %add.1603 = f32[] add(%Arg_0.1946, %Arg_1.1619)
}

%region_980.25410 (Arg_0.25407: bf16[], Arg_1.25408: bf16[]) -> bf16[] {
  %Arg_0.25407 = bf16[] parameter(0)
  %Arg_1.25408 = bf16[] parameter(1)
  ROOT %add.25409 = bf16[] add(%Arg_0.25407, %Arg_1.25408)
}

%region_980.25410.clone (Arg_0.1947: bf16[], Arg_1.1620: bf16[]) -> bf16[] {
  %Arg_0.1947 = bf16[] parameter(0)
  %Arg_1.1620 = bf16[] parameter(1)
  ROOT %add.1604 = bf16[] add(%Arg_0.1947, %Arg_1.1620)
}

%region_1458.32252 (Arg_0.32249: f32[], Arg_1.32250: f32[]) -> f32[] {
  %Arg_0.32249 = f32[] parameter(0)
  %Arg_1.32250 = f32[] parameter(1)
  ROOT %add.32251 = f32[] add(%Arg_0.32249, %Arg_1.32250)
}

%region_984.25521 (Arg_0.25518: bf16[], Arg_1.25519: bf16[]) -> bf16[] {
  %Arg_0.25518 = bf16[] parameter(0)
  %Arg_1.25519 = bf16[] parameter(1)
  ROOT %add.25520 = bf16[] add(%Arg_0.25518, %Arg_1.25519)
}

%region_984.25521.clone (Arg_0.1948: bf16[], Arg_1.1621: bf16[]) -> bf16[] {
  %Arg_0.1948 = bf16[] parameter(0)
  %Arg_1.1621 = bf16[] parameter(1)
  ROOT %add.1605 = bf16[] add(%Arg_0.1948, %Arg_1.1621)
}

%region_1459.32261 (Arg_0.32258: f32[], Arg_1.32259: f32[]) -> f32[] {
  %Arg_0.32258 = f32[] parameter(0)
  %Arg_1.32259 = f32[] parameter(1)
  ROOT %add.32260 = f32[] add(%Arg_0.32258, %Arg_1.32259)
}

%add.146.clone (x.293: bf16[], y.293: bf16[]) -> bf16[] {
  %x.293 = bf16[] parameter(0)
  %y.293 = bf16[] parameter(1)
  ROOT %add.1607 = bf16[] add(%x.293, %y.293)
}

%region_1460.32270 (Arg_0.32267: f32[], Arg_1.32268: f32[]) -> f32[] {
  %Arg_0.32267 = f32[] parameter(0)
  %Arg_1.32268 = f32[] parameter(1)
  ROOT %add.32269 = f32[] add(%Arg_0.32267, %Arg_1.32268)
}

%region_1460.32270.clone (Arg_0.1949: f32[], Arg_1.1622: f32[]) -> f32[] {
  %Arg_0.1949 = f32[] parameter(0)
  %Arg_1.1622 = f32[] parameter(1)
  ROOT %add.1608 = f32[] add(%Arg_0.1949, %Arg_1.1622)
}

%add.147.clone (x.295: bf16[], y.295: bf16[]) -> bf16[] {
  %x.295 = bf16[] parameter(0)
  %y.295 = bf16[] parameter(1)
  ROOT %add.1610 = bf16[] add(%x.295, %y.295)
}

%region_1461.32279 (Arg_0.32276: f32[], Arg_1.32277: f32[]) -> f32[] {
  %Arg_0.32276 = f32[] parameter(0)
  %Arg_1.32277 = f32[] parameter(1)
  ROOT %add.32278 = f32[] add(%Arg_0.32276, %Arg_1.32277)
}

%region_1461.32279.clone (Arg_0.1950: f32[], Arg_1.1623: f32[]) -> f32[] {
  %Arg_0.1950 = f32[] parameter(0)
  %Arg_1.1623 = f32[] parameter(1)
  ROOT %add.1611 = f32[] add(%Arg_0.1950, %Arg_1.1623)
}

%add.148.clone (x.297: bf16[], y.297: bf16[]) -> bf16[] {
  %x.297 = bf16[] parameter(0)
  %y.297 = bf16[] parameter(1)
  ROOT %add.1613 = bf16[] add(%x.297, %y.297)
}

%region_1462.32288 (Arg_0.32285: f32[], Arg_1.32286: f32[]) -> f32[] {
  %Arg_0.32285 = f32[] parameter(0)
  %Arg_1.32286 = f32[] parameter(1)
  ROOT %add.32287 = f32[] add(%Arg_0.32285, %Arg_1.32286)
}

%region_1462.32288.clone (Arg_0.1951: f32[], Arg_1.1624: f32[]) -> f32[] {
  %Arg_0.1951 = f32[] parameter(0)
  %Arg_1.1624 = f32[] parameter(1)
  ROOT %add.1614 = f32[] add(%Arg_0.1951, %Arg_1.1624)
}

%add.149.clone (x.299: bf16[], y.299: bf16[]) -> bf16[] {
  %x.299 = bf16[] parameter(0)
  %y.299 = bf16[] parameter(1)
  ROOT %add.1616 = bf16[] add(%x.299, %y.299)
}

%region_1463.32297 (Arg_0.32294: f32[], Arg_1.32295: f32[]) -> f32[] {
  %Arg_0.32294 = f32[] parameter(0)
  %Arg_1.32295 = f32[] parameter(1)
  ROOT %add.32296 = f32[] add(%Arg_0.32294, %Arg_1.32295)
}

%region_1463.32297.clone (Arg_0.1952: f32[], Arg_1.1625: f32[]) -> f32[] {
  %Arg_0.1952 = f32[] parameter(0)
  %Arg_1.1625 = f32[] parameter(1)
  ROOT %add.1617 = f32[] add(%Arg_0.1952, %Arg_1.1625)
}

%add.150.clone (x.301: bf16[], y.301: bf16[]) -> bf16[] {
  %x.301 = bf16[] parameter(0)
  %y.301 = bf16[] parameter(1)
  ROOT %add.1619 = bf16[] add(%x.301, %y.301)
}

%region_1464.32306 (Arg_0.32303: f32[], Arg_1.32304: f32[]) -> f32[] {
  %Arg_0.32303 = f32[] parameter(0)
  %Arg_1.32304 = f32[] parameter(1)
  ROOT %add.32305 = f32[] add(%Arg_0.32303, %Arg_1.32304)
}

%region_1464.32306.clone (Arg_0.1953: f32[], Arg_1.1626: f32[]) -> f32[] {
  %Arg_0.1953 = f32[] parameter(0)
  %Arg_1.1626 = f32[] parameter(1)
  ROOT %add.1620 = f32[] add(%Arg_0.1953, %Arg_1.1626)
}

%region_1465.32315 (Arg_0.32312: f32[], Arg_1.32313: f32[]) -> f32[] {
  %Arg_0.32312 = f32[] parameter(0)
  %Arg_1.32313 = f32[] parameter(1)
  ROOT %add.32314 = f32[] add(%Arg_0.32312, %Arg_1.32313)
}

%region_1465.32315.clone (Arg_0.1954: f32[], Arg_1.1627: f32[]) -> f32[] {
  %Arg_0.1954 = f32[] parameter(0)
  %Arg_1.1627 = f32[] parameter(1)
  ROOT %add.1621 = f32[] add(%Arg_0.1954, %Arg_1.1627)
}

%region_1466.32324 (Arg_0.32321: f32[], Arg_1.32322: f32[]) -> f32[] {
  %Arg_0.32321 = f32[] parameter(0)
  %Arg_1.32322 = f32[] parameter(1)
  ROOT %add.32323 = f32[] add(%Arg_0.32321, %Arg_1.32322)
}

%region_1466.32324.clone (Arg_0.1955: f32[], Arg_1.1628: f32[]) -> f32[] {
  %Arg_0.1955 = f32[] parameter(0)
  %Arg_1.1628 = f32[] parameter(1)
  ROOT %add.1622 = f32[] add(%Arg_0.1955, %Arg_1.1628)
}

%region_1467.32333 (Arg_0.32330: f32[], Arg_1.32331: f32[]) -> f32[] {
  %Arg_0.32330 = f32[] parameter(0)
  %Arg_1.32331 = f32[] parameter(1)
  ROOT %add.32332 = f32[] add(%Arg_0.32330, %Arg_1.32331)
}

%region_1467.32333.clone (Arg_0.1957: f32[], Arg_1.1629: f32[]) -> f32[] {
  %Arg_0.1957 = f32[] parameter(0)
  %Arg_1.1629 = f32[] parameter(1)
  ROOT %add.1624 = f32[] add(%Arg_0.1957, %Arg_1.1629)
}

%region_955.24834 (Arg_0.24831: bf16[], Arg_1.24832: bf16[]) -> bf16[] {
  %Arg_0.24831 = bf16[] parameter(0)
  %Arg_1.24832 = bf16[] parameter(1)
  ROOT %add.24833 = bf16[] add(%Arg_0.24831, %Arg_1.24832)
}

%region_955.24834.clone (Arg_0.1958: bf16[], Arg_1.1630: bf16[]) -> bf16[] {
  %Arg_0.1958 = bf16[] parameter(0)
  %Arg_1.1630 = bf16[] parameter(1)
  ROOT %add.1625 = bf16[] add(%Arg_0.1958, %Arg_1.1630)
}

%region_1468.32342 (Arg_0.32339: f32[], Arg_1.32340: f32[]) -> f32[] {
  %Arg_0.32339 = f32[] parameter(0)
  %Arg_1.32340 = f32[] parameter(1)
  ROOT %add.32341 = f32[] add(%Arg_0.32339, %Arg_1.32340)
}

%region_959.24945 (Arg_0.24942: bf16[], Arg_1.24943: bf16[]) -> bf16[] {
  %Arg_0.24942 = bf16[] parameter(0)
  %Arg_1.24943 = bf16[] parameter(1)
  ROOT %add.24944 = bf16[] add(%Arg_0.24942, %Arg_1.24943)
}

%region_959.24945.clone (Arg_0.1959: bf16[], Arg_1.1631: bf16[]) -> bf16[] {
  %Arg_0.1959 = bf16[] parameter(0)
  %Arg_1.1631 = bf16[] parameter(1)
  ROOT %add.1626 = bf16[] add(%Arg_0.1959, %Arg_1.1631)
}

%region_1469.32351 (Arg_0.32348: f32[], Arg_1.32349: f32[]) -> f32[] {
  %Arg_0.32348 = f32[] parameter(0)
  %Arg_1.32349 = f32[] parameter(1)
  ROOT %add.32350 = f32[] add(%Arg_0.32348, %Arg_1.32349)
}

%add.151.clone (x.303: bf16[], y.303: bf16[]) -> bf16[] {
  %x.303 = bf16[] parameter(0)
  %y.303 = bf16[] parameter(1)
  ROOT %add.1628 = bf16[] add(%x.303, %y.303)
}

%region_1470.32360 (Arg_0.32357: f32[], Arg_1.32358: f32[]) -> f32[] {
  %Arg_0.32357 = f32[] parameter(0)
  %Arg_1.32358 = f32[] parameter(1)
  ROOT %add.32359 = f32[] add(%Arg_0.32357, %Arg_1.32358)
}

%region_1470.32360.clone (Arg_0.1960: f32[], Arg_1.1632: f32[]) -> f32[] {
  %Arg_0.1960 = f32[] parameter(0)
  %Arg_1.1632 = f32[] parameter(1)
  ROOT %add.1629 = f32[] add(%Arg_0.1960, %Arg_1.1632)
}

%add.152.clone (x.305: bf16[], y.305: bf16[]) -> bf16[] {
  %x.305 = bf16[] parameter(0)
  %y.305 = bf16[] parameter(1)
  ROOT %add.1631 = bf16[] add(%x.305, %y.305)
}

%region_1471.32369 (Arg_0.32366: f32[], Arg_1.32367: f32[]) -> f32[] {
  %Arg_0.32366 = f32[] parameter(0)
  %Arg_1.32367 = f32[] parameter(1)
  ROOT %add.32368 = f32[] add(%Arg_0.32366, %Arg_1.32367)
}

%region_1471.32369.clone (Arg_0.1961: f32[], Arg_1.1633: f32[]) -> f32[] {
  %Arg_0.1961 = f32[] parameter(0)
  %Arg_1.1633 = f32[] parameter(1)
  ROOT %add.1632 = f32[] add(%Arg_0.1961, %Arg_1.1633)
}

%add.153.clone (x.307: bf16[], y.307: bf16[]) -> bf16[] {
  %x.307 = bf16[] parameter(0)
  %y.307 = bf16[] parameter(1)
  ROOT %add.1634 = bf16[] add(%x.307, %y.307)
}

%region_1472.32378 (Arg_0.32375: f32[], Arg_1.32376: f32[]) -> f32[] {
  %Arg_0.32375 = f32[] parameter(0)
  %Arg_1.32376 = f32[] parameter(1)
  ROOT %add.32377 = f32[] add(%Arg_0.32375, %Arg_1.32376)
}

%region_1472.32378.clone (Arg_0.1962: f32[], Arg_1.1634: f32[]) -> f32[] {
  %Arg_0.1962 = f32[] parameter(0)
  %Arg_1.1634 = f32[] parameter(1)
  ROOT %add.1635 = f32[] add(%Arg_0.1962, %Arg_1.1634)
}

%add.154.clone (x.309: bf16[], y.309: bf16[]) -> bf16[] {
  %x.309 = bf16[] parameter(0)
  %y.309 = bf16[] parameter(1)
  ROOT %add.1637 = bf16[] add(%x.309, %y.309)
}

%region_1473.32387 (Arg_0.32384: f32[], Arg_1.32385: f32[]) -> f32[] {
  %Arg_0.32384 = f32[] parameter(0)
  %Arg_1.32385 = f32[] parameter(1)
  ROOT %add.32386 = f32[] add(%Arg_0.32384, %Arg_1.32385)
}

%region_1473.32387.clone (Arg_0.1963: f32[], Arg_1.1635: f32[]) -> f32[] {
  %Arg_0.1963 = f32[] parameter(0)
  %Arg_1.1635 = f32[] parameter(1)
  ROOT %add.1638 = f32[] add(%Arg_0.1963, %Arg_1.1635)
}

%add.155.clone (x.311: bf16[], y.311: bf16[]) -> bf16[] {
  %x.311 = bf16[] parameter(0)
  %y.311 = bf16[] parameter(1)
  ROOT %add.1640 = bf16[] add(%x.311, %y.311)
}

%region_1474.32396 (Arg_0.32393: f32[], Arg_1.32394: f32[]) -> f32[] {
  %Arg_0.32393 = f32[] parameter(0)
  %Arg_1.32394 = f32[] parameter(1)
  ROOT %add.32395 = f32[] add(%Arg_0.32393, %Arg_1.32394)
}

%region_1474.32396.clone (Arg_0.1965: f32[], Arg_1.1636: f32[]) -> f32[] {
  %Arg_0.1965 = f32[] parameter(0)
  %Arg_1.1636 = f32[] parameter(1)
  ROOT %add.1641 = f32[] add(%Arg_0.1965, %Arg_1.1636)
}

%region_1475.32405 (Arg_0.32402: f32[], Arg_1.32403: f32[]) -> f32[] {
  %Arg_0.32402 = f32[] parameter(0)
  %Arg_1.32403 = f32[] parameter(1)
  ROOT %add.32404 = f32[] add(%Arg_0.32402, %Arg_1.32403)
}

%region_1475.32405.clone (Arg_0.1966: f32[], Arg_1.1637: f32[]) -> f32[] {
  %Arg_0.1966 = f32[] parameter(0)
  %Arg_1.1637 = f32[] parameter(1)
  ROOT %add.1642 = f32[] add(%Arg_0.1966, %Arg_1.1637)
}

%region_1476.32414 (Arg_0.32411: f32[], Arg_1.32412: f32[]) -> f32[] {
  %Arg_0.32411 = f32[] parameter(0)
  %Arg_1.32412 = f32[] parameter(1)
  ROOT %add.32413 = f32[] add(%Arg_0.32411, %Arg_1.32412)
}

%region_1476.32414.clone (Arg_0.1967: f32[], Arg_1.1638: f32[]) -> f32[] {
  %Arg_0.1967 = f32[] parameter(0)
  %Arg_1.1638 = f32[] parameter(1)
  ROOT %add.1643 = f32[] add(%Arg_0.1967, %Arg_1.1638)
}

%region_1477.32423 (Arg_0.32420: f32[], Arg_1.32421: f32[]) -> f32[] {
  %Arg_0.32420 = f32[] parameter(0)
  %Arg_1.32421 = f32[] parameter(1)
  ROOT %add.32422 = f32[] add(%Arg_0.32420, %Arg_1.32421)
}

%region_1477.32423.clone (Arg_0.1968: f32[], Arg_1.1639: f32[]) -> f32[] {
  %Arg_0.1968 = f32[] parameter(0)
  %Arg_1.1639 = f32[] parameter(1)
  ROOT %add.1644 = f32[] add(%Arg_0.1968, %Arg_1.1639)
}

%region_930.24258 (Arg_0.24255: bf16[], Arg_1.24256: bf16[]) -> bf16[] {
  %Arg_0.24255 = bf16[] parameter(0)
  %Arg_1.24256 = bf16[] parameter(1)
  ROOT %add.24257 = bf16[] add(%Arg_0.24255, %Arg_1.24256)
}

%region_930.24258.clone (Arg_0.1970: bf16[], Arg_1.1640: bf16[]) -> bf16[] {
  %Arg_0.1970 = bf16[] parameter(0)
  %Arg_1.1640 = bf16[] parameter(1)
  ROOT %add.1645 = bf16[] add(%Arg_0.1970, %Arg_1.1640)
}

%region_1478.32432 (Arg_0.32429: f32[], Arg_1.32430: f32[]) -> f32[] {
  %Arg_0.32429 = f32[] parameter(0)
  %Arg_1.32430 = f32[] parameter(1)
  ROOT %add.32431 = f32[] add(%Arg_0.32429, %Arg_1.32430)
}

%region_934.24369 (Arg_0.24366: bf16[], Arg_1.24367: bf16[]) -> bf16[] {
  %Arg_0.24366 = bf16[] parameter(0)
  %Arg_1.24367 = bf16[] parameter(1)
  ROOT %add.24368 = bf16[] add(%Arg_0.24366, %Arg_1.24367)
}

%region_934.24369.clone (Arg_0.1971: bf16[], Arg_1.1641: bf16[]) -> bf16[] {
  %Arg_0.1971 = bf16[] parameter(0)
  %Arg_1.1641 = bf16[] parameter(1)
  ROOT %add.1646 = bf16[] add(%Arg_0.1971, %Arg_1.1641)
}

%region_1479.32441 (Arg_0.32438: f32[], Arg_1.32439: f32[]) -> f32[] {
  %Arg_0.32438 = f32[] parameter(0)
  %Arg_1.32439 = f32[] parameter(1)
  ROOT %add.32440 = f32[] add(%Arg_0.32438, %Arg_1.32439)
}

%add.156.clone (x.313: bf16[], y.313: bf16[]) -> bf16[] {
  %x.313 = bf16[] parameter(0)
  %y.313 = bf16[] parameter(1)
  ROOT %add.1648 = bf16[] add(%x.313, %y.313)
}

%region_1480.32450 (Arg_0.32447: f32[], Arg_1.32448: f32[]) -> f32[] {
  %Arg_0.32447 = f32[] parameter(0)
  %Arg_1.32448 = f32[] parameter(1)
  ROOT %add.32449 = f32[] add(%Arg_0.32447, %Arg_1.32448)
}

%region_1480.32450.clone (Arg_0.1972: f32[], Arg_1.1642: f32[]) -> f32[] {
  %Arg_0.1972 = f32[] parameter(0)
  %Arg_1.1642 = f32[] parameter(1)
  ROOT %add.1649 = f32[] add(%Arg_0.1972, %Arg_1.1642)
}

%add.157.clone (x.315: bf16[], y.315: bf16[]) -> bf16[] {
  %x.315 = bf16[] parameter(0)
  %y.315 = bf16[] parameter(1)
  ROOT %add.1651 = bf16[] add(%x.315, %y.315)
}

%region_1481.32459 (Arg_0.32456: f32[], Arg_1.32457: f32[]) -> f32[] {
  %Arg_0.32456 = f32[] parameter(0)
  %Arg_1.32457 = f32[] parameter(1)
  ROOT %add.32458 = f32[] add(%Arg_0.32456, %Arg_1.32457)
}

%region_1481.32459.clone (Arg_0.1973: f32[], Arg_1.1643: f32[]) -> f32[] {
  %Arg_0.1973 = f32[] parameter(0)
  %Arg_1.1643 = f32[] parameter(1)
  ROOT %add.1652 = f32[] add(%Arg_0.1973, %Arg_1.1643)
}

%add.158.clone (x.317: bf16[], y.317: bf16[]) -> bf16[] {
  %x.317 = bf16[] parameter(0)
  %y.317 = bf16[] parameter(1)
  ROOT %add.1655 = bf16[] add(%x.317, %y.317)
}

%region_1482.32468 (Arg_0.32465: f32[], Arg_1.32466: f32[]) -> f32[] {
  %Arg_0.32465 = f32[] parameter(0)
  %Arg_1.32466 = f32[] parameter(1)
  ROOT %add.32467 = f32[] add(%Arg_0.32465, %Arg_1.32466)
}

%region_1482.32468.clone (Arg_0.1974: f32[], Arg_1.1644: f32[]) -> f32[] {
  %Arg_0.1974 = f32[] parameter(0)
  %Arg_1.1644 = f32[] parameter(1)
  ROOT %add.1656 = f32[] add(%Arg_0.1974, %Arg_1.1644)
}

%add.159.clone (x.319: bf16[], y.319: bf16[]) -> bf16[] {
  %x.319 = bf16[] parameter(0)
  %y.319 = bf16[] parameter(1)
  ROOT %add.1658 = bf16[] add(%x.319, %y.319)
}

%region_1483.32477 (Arg_0.32474: f32[], Arg_1.32475: f32[]) -> f32[] {
  %Arg_0.32474 = f32[] parameter(0)
  %Arg_1.32475 = f32[] parameter(1)
  ROOT %add.32476 = f32[] add(%Arg_0.32474, %Arg_1.32475)
}

%region_1483.32477.clone (Arg_0.1975: f32[], Arg_1.1645: f32[]) -> f32[] {
  %Arg_0.1975 = f32[] parameter(0)
  %Arg_1.1645 = f32[] parameter(1)
  ROOT %add.1659 = f32[] add(%Arg_0.1975, %Arg_1.1645)
}

%add.160.clone (x.321: bf16[], y.321: bf16[]) -> bf16[] {
  %x.321 = bf16[] parameter(0)
  %y.321 = bf16[] parameter(1)
  ROOT %add.1661 = bf16[] add(%x.321, %y.321)
}

%region_1484.32486 (Arg_0.32483: f32[], Arg_1.32484: f32[]) -> f32[] {
  %Arg_0.32483 = f32[] parameter(0)
  %Arg_1.32484 = f32[] parameter(1)
  ROOT %add.32485 = f32[] add(%Arg_0.32483, %Arg_1.32484)
}

%region_1484.32486.clone (Arg_0.1976: f32[], Arg_1.1646: f32[]) -> f32[] {
  %Arg_0.1976 = f32[] parameter(0)
  %Arg_1.1646 = f32[] parameter(1)
  ROOT %add.1663 = f32[] add(%Arg_0.1976, %Arg_1.1646)
}

%region_1161.29570 (Arg_0.29567: f32[], Arg_1.29568: f32[]) -> f32[] {
  %Arg_0.29567 = f32[] parameter(0)
  %Arg_1.29568 = f32[] parameter(1)
  ROOT %add.29569 = f32[] add(%Arg_0.29567, %Arg_1.29568)
}

%add.161.clone (x.323: bf16[], y.323: bf16[]) -> bf16[] {
  %x.323 = bf16[] parameter(0)
  %y.323 = bf16[] parameter(1)
  ROOT %add.1665 = bf16[] add(%x.323, %y.323)
}

%region_1485.32495 (Arg_0.32492: f32[], Arg_1.32493: f32[]) -> f32[] {
  %Arg_0.32492 = f32[] parameter(0)
  %Arg_1.32493 = f32[] parameter(1)
  ROOT %add.32494 = f32[] add(%Arg_0.32492, %Arg_1.32493)
}

%region_1485.32495.clone (Arg_0.1977: f32[], Arg_1.1647: f32[]) -> f32[] {
  %Arg_0.1977 = f32[] parameter(0)
  %Arg_1.1647 = f32[] parameter(1)
  ROOT %add.1666 = f32[] add(%Arg_0.1977, %Arg_1.1647)
}

%region_1486.40954 (Arg_0.40951: f32[], Arg_1.40952: f32[]) -> f32[] {
  %Arg_0.40951 = f32[] parameter(0)
  %Arg_1.40952 = f32[] parameter(1)
  ROOT %add.40953 = f32[] add(%Arg_0.40951, %Arg_1.40952)
}

%region_1487.40962 (Arg_0.40959: f32[], Arg_1.40960: f32[]) -> f32[] {
  %Arg_0.40959 = f32[] parameter(0)
  %Arg_1.40960 = f32[] parameter(1)
  ROOT %add.40961 = f32[] add(%Arg_0.40959, %Arg_1.40960)
}

%region_1487.40962.clone (Arg_0.1978: f32[], Arg_1.1648: f32[]) -> f32[] {
  %Arg_0.1978 = f32[] parameter(0)
  %Arg_1.1648 = f32[] parameter(1)
  ROOT %add.1667 = f32[] add(%Arg_0.1978, %Arg_1.1648)
}

%region_1488.40971 (Arg_0.40968: f32[], Arg_1.40969: f32[]) -> f32[] {
  %Arg_0.40968 = f32[] parameter(0)
  %Arg_1.40969 = f32[] parameter(1)
  ROOT %add.40970 = f32[] add(%Arg_0.40968, %Arg_1.40969)
}

%region_1488.40971.clone (Arg_0.1979: f32[], Arg_1.1649: f32[]) -> f32[] {
  %Arg_0.1979 = f32[] parameter(0)
  %Arg_1.1649 = f32[] parameter(1)
  ROOT %add.1668 = f32[] add(%Arg_0.1979, %Arg_1.1649)
}

%region_1489.40980 (Arg_0.40977: f32[], Arg_1.40978: f32[]) -> f32[] {
  %Arg_0.40977 = f32[] parameter(0)
  %Arg_1.40978 = f32[] parameter(1)
  ROOT %add.40979 = f32[] add(%Arg_0.40977, %Arg_1.40978)
}

%region_1489.40980.clone (Arg_0.1980: f32[], Arg_1.1650: f32[]) -> f32[] {
  %Arg_0.1980 = f32[] parameter(0)
  %Arg_1.1650 = f32[] parameter(1)
  ROOT %add.1669 = f32[] add(%Arg_0.1980, %Arg_1.1650)
}

%region_1490.40989 (Arg_0.40986: f32[], Arg_1.40987: f32[]) -> f32[] {
  %Arg_0.40986 = f32[] parameter(0)
  %Arg_1.40987 = f32[] parameter(1)
  ROOT %add.40988 = f32[] add(%Arg_0.40986, %Arg_1.40987)
}

%region_1490.40989.clone (Arg_0.1981: f32[], Arg_1.1651: f32[]) -> f32[] {
  %Arg_0.1981 = f32[] parameter(0)
  %Arg_1.1651 = f32[] parameter(1)
  ROOT %add.1670 = f32[] add(%Arg_0.1981, %Arg_1.1651)
}

%region_1491.40998 (Arg_0.40995: f32[], Arg_1.40996: f32[]) -> f32[] {
  %Arg_0.40995 = f32[] parameter(0)
  %Arg_1.40996 = f32[] parameter(1)
  ROOT %add.40997 = f32[] add(%Arg_0.40995, %Arg_1.40996)
}

%region_1492.41007 (Arg_0.41004: f32[], Arg_1.41005: f32[]) -> f32[] {
  %Arg_0.41004 = f32[] parameter(0)
  %Arg_1.41005 = f32[] parameter(1)
  ROOT %add.41006 = f32[] add(%Arg_0.41004, %Arg_1.41005)
}

%region_1493.41016 (Arg_0.41013: f32[], Arg_1.41014: f32[]) -> f32[] {
  %Arg_0.41013 = f32[] parameter(0)
  %Arg_1.41014 = f32[] parameter(1)
  ROOT %add.41015 = f32[] add(%Arg_0.41013, %Arg_1.41014)
}

%region_1493.41016.clone (Arg_0.1982: f32[], Arg_1.1652: f32[]) -> f32[] {
  %Arg_0.1982 = f32[] parameter(0)
  %Arg_1.1652 = f32[] parameter(1)
  ROOT %add.1671 = f32[] add(%Arg_0.1982, %Arg_1.1652)
}

%region_1494.41025 (Arg_0.41022: f32[], Arg_1.41023: f32[]) -> f32[] {
  %Arg_0.41022 = f32[] parameter(0)
  %Arg_1.41023 = f32[] parameter(1)
  ROOT %add.41024 = f32[] add(%Arg_0.41022, %Arg_1.41023)
}

%region_1494.41025.clone (Arg_0.1983: f32[], Arg_1.1654: f32[]) -> f32[] {
  %Arg_0.1983 = f32[] parameter(0)
  %Arg_1.1654 = f32[] parameter(1)
  ROOT %add.1672 = f32[] add(%Arg_0.1983, %Arg_1.1654)
}

%region_1495.41034 (Arg_0.41031: f32[], Arg_1.41032: f32[]) -> f32[] {
  %Arg_0.41031 = f32[] parameter(0)
  %Arg_1.41032 = f32[] parameter(1)
  ROOT %add.41033 = f32[] add(%Arg_0.41031, %Arg_1.41032)
}

%region_1495.41034.clone (Arg_0.1985: f32[], Arg_1.1655: f32[]) -> f32[] {
  %Arg_0.1985 = f32[] parameter(0)
  %Arg_1.1655 = f32[] parameter(1)
  ROOT %add.1673 = f32[] add(%Arg_0.1985, %Arg_1.1655)
}

%region_1496.41043 (Arg_0.41040: f32[], Arg_1.41041: f32[]) -> f32[] {
  %Arg_0.41040 = f32[] parameter(0)
  %Arg_1.41041 = f32[] parameter(1)
  ROOT %add.41042 = f32[] add(%Arg_0.41040, %Arg_1.41041)
}

%region_1496.41043.clone (Arg_0.1986: f32[], Arg_1.1656: f32[]) -> f32[] {
  %Arg_0.1986 = f32[] parameter(0)
  %Arg_1.1656 = f32[] parameter(1)
  ROOT %add.1674 = f32[] add(%Arg_0.1986, %Arg_1.1656)
}

%region_1497.41052 (Arg_0.41049: f32[], Arg_1.41050: f32[]) -> f32[] {
  %Arg_0.41049 = f32[] parameter(0)
  %Arg_1.41050 = f32[] parameter(1)
  ROOT %add.41051 = f32[] add(%Arg_0.41049, %Arg_1.41050)
}

%region_1497.41052.clone (Arg_0.1987: f32[], Arg_1.1657: f32[]) -> f32[] {
  %Arg_0.1987 = f32[] parameter(0)
  %Arg_1.1657 = f32[] parameter(1)
  ROOT %add.1675 = f32[] add(%Arg_0.1987, %Arg_1.1657)
}

%region_1498.41061 (Arg_0.41058: f32[], Arg_1.41059: f32[]) -> f32[] {
  %Arg_0.41058 = f32[] parameter(0)
  %Arg_1.41059 = f32[] parameter(1)
  ROOT %add.41060 = f32[] add(%Arg_0.41058, %Arg_1.41059)
}

%region_1498.41061.clone (Arg_0.1988: f32[], Arg_1.1658: f32[]) -> f32[] {
  %Arg_0.1988 = f32[] parameter(0)
  %Arg_1.1658 = f32[] parameter(1)
  ROOT %add.1676 = f32[] add(%Arg_0.1988, %Arg_1.1658)
}

%region_1499.41070 (Arg_0.41067: f32[], Arg_1.41068: f32[]) -> f32[] {
  %Arg_0.41067 = f32[] parameter(0)
  %Arg_1.41068 = f32[] parameter(1)
  ROOT %add.41069 = f32[] add(%Arg_0.41067, %Arg_1.41068)
}

%region_1499.41070.clone (Arg_0.1989: f32[], Arg_1.1659: f32[]) -> f32[] {
  %Arg_0.1989 = f32[] parameter(0)
  %Arg_1.1659 = f32[] parameter(1)
  ROOT %add.1678 = f32[] add(%Arg_0.1989, %Arg_1.1659)
}

%region_1500.41079 (Arg_0.41076: f32[], Arg_1.41077: f32[]) -> f32[] {
  %Arg_0.41076 = f32[] parameter(0)
  %Arg_1.41077 = f32[] parameter(1)
  ROOT %add.41078 = f32[] add(%Arg_0.41076, %Arg_1.41077)
}

%region_1500.41079.clone (Arg_0.1990: f32[], Arg_1.1660: f32[]) -> f32[] {
  %Arg_0.1990 = f32[] parameter(0)
  %Arg_1.1660 = f32[] parameter(1)
  ROOT %add.1679 = f32[] add(%Arg_0.1990, %Arg_1.1660)
}

%region_1501.41088 (Arg_0.41085: f32[], Arg_1.41086: f32[]) -> f32[] {
  %Arg_0.41085 = f32[] parameter(0)
  %Arg_1.41086 = f32[] parameter(1)
  ROOT %add.41087 = f32[] add(%Arg_0.41085, %Arg_1.41086)
}

%region_1502.41097 (Arg_0.41094: f32[], Arg_1.41095: f32[]) -> f32[] {
  %Arg_0.41094 = f32[] parameter(0)
  %Arg_1.41095 = f32[] parameter(1)
  ROOT %add.41096 = f32[] add(%Arg_0.41094, %Arg_1.41095)
}

%region_1503.41106 (Arg_0.41103: f32[], Arg_1.41104: f32[]) -> f32[] {
  %Arg_0.41103 = f32[] parameter(0)
  %Arg_1.41104 = f32[] parameter(1)
  ROOT %add.41105 = f32[] add(%Arg_0.41103, %Arg_1.41104)
}

%region_1503.41106.clone (Arg_0.1991: f32[], Arg_1.1662: f32[]) -> f32[] {
  %Arg_0.1991 = f32[] parameter(0)
  %Arg_1.1662 = f32[] parameter(1)
  ROOT %add.1680 = f32[] add(%Arg_0.1991, %Arg_1.1662)
}

%region_1504.41115 (Arg_0.41112: f32[], Arg_1.41113: f32[]) -> f32[] {
  %Arg_0.41112 = f32[] parameter(0)
  %Arg_1.41113 = f32[] parameter(1)
  ROOT %add.41114 = f32[] add(%Arg_0.41112, %Arg_1.41113)
}

%region_1504.41115.clone (Arg_0.1992: f32[], Arg_1.1663: f32[]) -> f32[] {
  %Arg_0.1992 = f32[] parameter(0)
  %Arg_1.1663 = f32[] parameter(1)
  ROOT %add.1681 = f32[] add(%Arg_0.1992, %Arg_1.1663)
}

%region_1505.41124 (Arg_0.41121: f32[], Arg_1.41122: f32[]) -> f32[] {
  %Arg_0.41121 = f32[] parameter(0)
  %Arg_1.41122 = f32[] parameter(1)
  ROOT %add.41123 = f32[] add(%Arg_0.41121, %Arg_1.41122)
}

%region_1505.41124.clone (Arg_0.1993: f32[], Arg_1.1664: f32[]) -> f32[] {
  %Arg_0.1993 = f32[] parameter(0)
  %Arg_1.1664 = f32[] parameter(1)
  ROOT %add.1683 = f32[] add(%Arg_0.1993, %Arg_1.1664)
}

%region_1506.41133 (Arg_0.41130: f32[], Arg_1.41131: f32[]) -> f32[] {
  %Arg_0.41130 = f32[] parameter(0)
  %Arg_1.41131 = f32[] parameter(1)
  ROOT %add.41132 = f32[] add(%Arg_0.41130, %Arg_1.41131)
}

%region_1506.41133.clone (Arg_0.1994: f32[], Arg_1.1665: f32[]) -> f32[] {
  %Arg_0.1994 = f32[] parameter(0)
  %Arg_1.1665 = f32[] parameter(1)
  ROOT %add.1684 = f32[] add(%Arg_0.1994, %Arg_1.1665)
}

%region_1507.41142 (Arg_0.41139: f32[], Arg_1.41140: f32[]) -> f32[] {
  %Arg_0.41139 = f32[] parameter(0)
  %Arg_1.41140 = f32[] parameter(1)
  ROOT %add.41141 = f32[] add(%Arg_0.41139, %Arg_1.41140)
}

%region_1507.41142.clone (Arg_0.1995: f32[], Arg_1.1667: f32[]) -> f32[] {
  %Arg_0.1995 = f32[] parameter(0)
  %Arg_1.1667 = f32[] parameter(1)
  ROOT %add.1685 = f32[] add(%Arg_0.1995, %Arg_1.1667)
}

%region_1508.41151 (Arg_0.41148: f32[], Arg_1.41149: f32[]) -> f32[] {
  %Arg_0.41148 = f32[] parameter(0)
  %Arg_1.41149 = f32[] parameter(1)
  ROOT %add.41150 = f32[] add(%Arg_0.41148, %Arg_1.41149)
}

%region_1508.41151.clone (Arg_0.1996: f32[], Arg_1.1668: f32[]) -> f32[] {
  %Arg_0.1996 = f32[] parameter(0)
  %Arg_1.1668 = f32[] parameter(1)
  ROOT %add.1686 = f32[] add(%Arg_0.1996, %Arg_1.1668)
}

%region_1509.41160 (Arg_0.41157: f32[], Arg_1.41158: f32[]) -> f32[] {
  %Arg_0.41157 = f32[] parameter(0)
  %Arg_1.41158 = f32[] parameter(1)
  ROOT %add.41159 = f32[] add(%Arg_0.41157, %Arg_1.41158)
}

%region_1509.41160.clone (Arg_0.1997: f32[], Arg_1.1669: f32[]) -> f32[] {
  %Arg_0.1997 = f32[] parameter(0)
  %Arg_1.1669 = f32[] parameter(1)
  ROOT %add.1688 = f32[] add(%Arg_0.1997, %Arg_1.1669)
}

%region_1510.41169 (Arg_0.41166: f32[], Arg_1.41167: f32[]) -> f32[] {
  %Arg_0.41166 = f32[] parameter(0)
  %Arg_1.41167 = f32[] parameter(1)
  ROOT %add.41168 = f32[] add(%Arg_0.41166, %Arg_1.41167)
}

%region_1510.41169.clone (Arg_0.1998: f32[], Arg_1.1670: f32[]) -> f32[] {
  %Arg_0.1998 = f32[] parameter(0)
  %Arg_1.1670 = f32[] parameter(1)
  ROOT %add.1689 = f32[] add(%Arg_0.1998, %Arg_1.1670)
}

%region_1511.41178 (Arg_0.41175: f32[], Arg_1.41176: f32[]) -> f32[] {
  %Arg_0.41175 = f32[] parameter(0)
  %Arg_1.41176 = f32[] parameter(1)
  ROOT %add.41177 = f32[] add(%Arg_0.41175, %Arg_1.41176)
}

%region_1512.41187 (Arg_0.41184: f32[], Arg_1.41185: f32[]) -> f32[] {
  %Arg_0.41184 = f32[] parameter(0)
  %Arg_1.41185 = f32[] parameter(1)
  ROOT %add.41186 = f32[] add(%Arg_0.41184, %Arg_1.41185)
}

%region_1513.41196 (Arg_0.41193: f32[], Arg_1.41194: f32[]) -> f32[] {
  %Arg_0.41193 = f32[] parameter(0)
  %Arg_1.41194 = f32[] parameter(1)
  ROOT %add.41195 = f32[] add(%Arg_0.41193, %Arg_1.41194)
}

%region_1513.41196.clone (Arg_0.1999: f32[], Arg_1.1671: f32[]) -> f32[] {
  %Arg_0.1999 = f32[] parameter(0)
  %Arg_1.1671 = f32[] parameter(1)
  ROOT %add.1690 = f32[] add(%Arg_0.1999, %Arg_1.1671)
}

%region_1514.41205 (Arg_0.41202: f32[], Arg_1.41203: f32[]) -> f32[] {
  %Arg_0.41202 = f32[] parameter(0)
  %Arg_1.41203 = f32[] parameter(1)
  ROOT %add.41204 = f32[] add(%Arg_0.41202, %Arg_1.41203)
}

%region_1514.41205.clone (Arg_0.2000: f32[], Arg_1.1672: f32[]) -> f32[] {
  %Arg_0.2000 = f32[] parameter(0)
  %Arg_1.1672 = f32[] parameter(1)
  ROOT %add.1691 = f32[] add(%Arg_0.2000, %Arg_1.1672)
}

%region_1515.41214 (Arg_0.41211: f32[], Arg_1.41212: f32[]) -> f32[] {
  %Arg_0.41211 = f32[] parameter(0)
  %Arg_1.41212 = f32[] parameter(1)
  ROOT %add.41213 = f32[] add(%Arg_0.41211, %Arg_1.41212)
}

%region_1515.41214.clone (Arg_0.2001: f32[], Arg_1.1673: f32[]) -> f32[] {
  %Arg_0.2001 = f32[] parameter(0)
  %Arg_1.1673 = f32[] parameter(1)
  ROOT %add.1692 = f32[] add(%Arg_0.2001, %Arg_1.1673)
}

%region_1516.41223 (Arg_0.41220: f32[], Arg_1.41221: f32[]) -> f32[] {
  %Arg_0.41220 = f32[] parameter(0)
  %Arg_1.41221 = f32[] parameter(1)
  ROOT %add.41222 = f32[] add(%Arg_0.41220, %Arg_1.41221)
}

%region_1516.41223.clone (Arg_0.2002: f32[], Arg_1.1674: f32[]) -> f32[] {
  %Arg_0.2002 = f32[] parameter(0)
  %Arg_1.1674 = f32[] parameter(1)
  ROOT %add.1693 = f32[] add(%Arg_0.2002, %Arg_1.1674)
}

%region_1517.41232 (Arg_0.41229: f32[], Arg_1.41230: f32[]) -> f32[] {
  %Arg_0.41229 = f32[] parameter(0)
  %Arg_1.41230 = f32[] parameter(1)
  ROOT %add.41231 = f32[] add(%Arg_0.41229, %Arg_1.41230)
}

%region_1517.41232.clone (Arg_0.2003: f32[], Arg_1.1675: f32[]) -> f32[] {
  %Arg_0.2003 = f32[] parameter(0)
  %Arg_1.1675 = f32[] parameter(1)
  ROOT %add.1694 = f32[] add(%Arg_0.2003, %Arg_1.1675)
}

%region_1518.41241 (Arg_0.41238: f32[], Arg_1.41239: f32[]) -> f32[] {
  %Arg_0.41238 = f32[] parameter(0)
  %Arg_1.41239 = f32[] parameter(1)
  ROOT %add.41240 = f32[] add(%Arg_0.41238, %Arg_1.41239)
}

%region_1518.41241.clone (Arg_0.2004: f32[], Arg_1.1676: f32[]) -> f32[] {
  %Arg_0.2004 = f32[] parameter(0)
  %Arg_1.1676 = f32[] parameter(1)
  ROOT %add.1695 = f32[] add(%Arg_0.2004, %Arg_1.1676)
}

%region_1519.41250 (Arg_0.41247: f32[], Arg_1.41248: f32[]) -> f32[] {
  %Arg_0.41247 = f32[] parameter(0)
  %Arg_1.41248 = f32[] parameter(1)
  ROOT %add.41249 = f32[] add(%Arg_0.41247, %Arg_1.41248)
}

%region_1519.41250.clone (Arg_0.2005: f32[], Arg_1.1677: f32[]) -> f32[] {
  %Arg_0.2005 = f32[] parameter(0)
  %Arg_1.1677 = f32[] parameter(1)
  ROOT %add.1696 = f32[] add(%Arg_0.2005, %Arg_1.1677)
}

%region_1520.41259 (Arg_0.41256: f32[], Arg_1.41257: f32[]) -> f32[] {
  %Arg_0.41256 = f32[] parameter(0)
  %Arg_1.41257 = f32[] parameter(1)
  ROOT %add.41258 = f32[] add(%Arg_0.41256, %Arg_1.41257)
}

%region_1520.41259.clone (Arg_0.2006: f32[], Arg_1.1678: f32[]) -> f32[] {
  %Arg_0.2006 = f32[] parameter(0)
  %Arg_1.1678 = f32[] parameter(1)
  ROOT %add.1697 = f32[] add(%Arg_0.2006, %Arg_1.1678)
}

%region_1521.41268 (Arg_0.41265: f32[], Arg_1.41266: f32[]) -> f32[] {
  %Arg_0.41265 = f32[] parameter(0)
  %Arg_1.41266 = f32[] parameter(1)
  ROOT %add.41267 = f32[] add(%Arg_0.41265, %Arg_1.41266)
}

%region_1522.41277 (Arg_0.41274: f32[], Arg_1.41275: f32[]) -> f32[] {
  %Arg_0.41274 = f32[] parameter(0)
  %Arg_1.41275 = f32[] parameter(1)
  ROOT %add.41276 = f32[] add(%Arg_0.41274, %Arg_1.41275)
}

%region_1523.41286 (Arg_0.41283: f32[], Arg_1.41284: f32[]) -> f32[] {
  %Arg_0.41283 = f32[] parameter(0)
  %Arg_1.41284 = f32[] parameter(1)
  ROOT %add.41285 = f32[] add(%Arg_0.41283, %Arg_1.41284)
}

%region_1523.41286.clone (Arg_0.2007: f32[], Arg_1.1679: f32[]) -> f32[] {
  %Arg_0.2007 = f32[] parameter(0)
  %Arg_1.1679 = f32[] parameter(1)
  ROOT %add.1698 = f32[] add(%Arg_0.2007, %Arg_1.1679)
}

%region_1524.41295 (Arg_0.41292: f32[], Arg_1.41293: f32[]) -> f32[] {
  %Arg_0.41292 = f32[] parameter(0)
  %Arg_1.41293 = f32[] parameter(1)
  ROOT %add.41294 = f32[] add(%Arg_0.41292, %Arg_1.41293)
}

%region_1524.41295.clone (Arg_0.2008: f32[], Arg_1.1680: f32[]) -> f32[] {
  %Arg_0.2008 = f32[] parameter(0)
  %Arg_1.1680 = f32[] parameter(1)
  ROOT %add.1699 = f32[] add(%Arg_0.2008, %Arg_1.1680)
}

%region_1525.41304 (Arg_0.41301: f32[], Arg_1.41302: f32[]) -> f32[] {
  %Arg_0.41301 = f32[] parameter(0)
  %Arg_1.41302 = f32[] parameter(1)
  ROOT %add.41303 = f32[] add(%Arg_0.41301, %Arg_1.41302)
}

%region_1525.41304.clone (Arg_0.2009: f32[], Arg_1.1682: f32[]) -> f32[] {
  %Arg_0.2009 = f32[] parameter(0)
  %Arg_1.1682 = f32[] parameter(1)
  ROOT %add.1700 = f32[] add(%Arg_0.2009, %Arg_1.1682)
}

%region_1526.41313 (Arg_0.41310: f32[], Arg_1.41311: f32[]) -> f32[] {
  %Arg_0.41310 = f32[] parameter(0)
  %Arg_1.41311 = f32[] parameter(1)
  ROOT %add.41312 = f32[] add(%Arg_0.41310, %Arg_1.41311)
}

%region_1526.41313.clone (Arg_0.2011: f32[], Arg_1.1683: f32[]) -> f32[] {
  %Arg_0.2011 = f32[] parameter(0)
  %Arg_1.1683 = f32[] parameter(1)
  ROOT %add.1701 = f32[] add(%Arg_0.2011, %Arg_1.1683)
}

%region_1527.41322 (Arg_0.41319: f32[], Arg_1.41320: f32[]) -> f32[] {
  %Arg_0.41319 = f32[] parameter(0)
  %Arg_1.41320 = f32[] parameter(1)
  ROOT %add.41321 = f32[] add(%Arg_0.41319, %Arg_1.41320)
}

%region_1527.41322.clone (Arg_0.2012: f32[], Arg_1.1684: f32[]) -> f32[] {
  %Arg_0.2012 = f32[] parameter(0)
  %Arg_1.1684 = f32[] parameter(1)
  ROOT %add.1702 = f32[] add(%Arg_0.2012, %Arg_1.1684)
}

%region_1528.41331 (Arg_0.41328: f32[], Arg_1.41329: f32[]) -> f32[] {
  %Arg_0.41328 = f32[] parameter(0)
  %Arg_1.41329 = f32[] parameter(1)
  ROOT %add.41330 = f32[] add(%Arg_0.41328, %Arg_1.41329)
}

%region_1528.41331.clone (Arg_0.2013: f32[], Arg_1.1685: f32[]) -> f32[] {
  %Arg_0.2013 = f32[] parameter(0)
  %Arg_1.1685 = f32[] parameter(1)
  ROOT %add.1703 = f32[] add(%Arg_0.2013, %Arg_1.1685)
}

%region_1529.41340 (Arg_0.41337: f32[], Arg_1.41338: f32[]) -> f32[] {
  %Arg_0.41337 = f32[] parameter(0)
  %Arg_1.41338 = f32[] parameter(1)
  ROOT %add.41339 = f32[] add(%Arg_0.41337, %Arg_1.41338)
}

%region_1529.41340.clone (Arg_0.2014: f32[], Arg_1.1686: f32[]) -> f32[] {
  %Arg_0.2014 = f32[] parameter(0)
  %Arg_1.1686 = f32[] parameter(1)
  ROOT %add.1704 = f32[] add(%Arg_0.2014, %Arg_1.1686)
}

%region_1530.41349 (Arg_0.41346: f32[], Arg_1.41347: f32[]) -> f32[] {
  %Arg_0.41346 = f32[] parameter(0)
  %Arg_1.41347 = f32[] parameter(1)
  ROOT %add.41348 = f32[] add(%Arg_0.41346, %Arg_1.41347)
}

%region_1530.41349.clone (Arg_0.2015: f32[], Arg_1.1687: f32[]) -> f32[] {
  %Arg_0.2015 = f32[] parameter(0)
  %Arg_1.1687 = f32[] parameter(1)
  ROOT %add.1705 = f32[] add(%Arg_0.2015, %Arg_1.1687)
}

%region_1531.41358 (Arg_0.41355: f32[], Arg_1.41356: f32[]) -> f32[] {
  %Arg_0.41355 = f32[] parameter(0)
  %Arg_1.41356 = f32[] parameter(1)
  ROOT %add.41357 = f32[] add(%Arg_0.41355, %Arg_1.41356)
}

%region_1532.41367 (Arg_0.41364: f32[], Arg_1.41365: f32[]) -> f32[] {
  %Arg_0.41364 = f32[] parameter(0)
  %Arg_1.41365 = f32[] parameter(1)
  ROOT %add.41366 = f32[] add(%Arg_0.41364, %Arg_1.41365)
}

%region_1533.41376 (Arg_0.41373: f32[], Arg_1.41374: f32[]) -> f32[] {
  %Arg_0.41373 = f32[] parameter(0)
  %Arg_1.41374 = f32[] parameter(1)
  ROOT %add.41375 = f32[] add(%Arg_0.41373, %Arg_1.41374)
}

%region_1533.41376.clone (Arg_0.2016: f32[], Arg_1.1688: f32[]) -> f32[] {
  %Arg_0.2016 = f32[] parameter(0)
  %Arg_1.1688 = f32[] parameter(1)
  ROOT %add.1706 = f32[] add(%Arg_0.2016, %Arg_1.1688)
}

%region_1534.41385 (Arg_0.41382: f32[], Arg_1.41383: f32[]) -> f32[] {
  %Arg_0.41382 = f32[] parameter(0)
  %Arg_1.41383 = f32[] parameter(1)
  ROOT %add.41384 = f32[] add(%Arg_0.41382, %Arg_1.41383)
}

%region_1534.41385.clone (Arg_0.2017: f32[], Arg_1.1689: f32[]) -> f32[] {
  %Arg_0.2017 = f32[] parameter(0)
  %Arg_1.1689 = f32[] parameter(1)
  ROOT %add.1707 = f32[] add(%Arg_0.2017, %Arg_1.1689)
}

%region_1535.41394 (Arg_0.41391: f32[], Arg_1.41392: f32[]) -> f32[] {
  %Arg_0.41391 = f32[] parameter(0)
  %Arg_1.41392 = f32[] parameter(1)
  ROOT %add.41393 = f32[] add(%Arg_0.41391, %Arg_1.41392)
}

%region_1535.41394.clone (Arg_0.2018: f32[], Arg_1.1690: f32[]) -> f32[] {
  %Arg_0.2018 = f32[] parameter(0)
  %Arg_1.1690 = f32[] parameter(1)
  ROOT %add.1708 = f32[] add(%Arg_0.2018, %Arg_1.1690)
}

%region_1536.41403 (Arg_0.41400: f32[], Arg_1.41401: f32[]) -> f32[] {
  %Arg_0.41400 = f32[] parameter(0)
  %Arg_1.41401 = f32[] parameter(1)
  ROOT %add.41402 = f32[] add(%Arg_0.41400, %Arg_1.41401)
}

%region_1536.41403.clone (Arg_0.2019: f32[], Arg_1.1691: f32[]) -> f32[] {
  %Arg_0.2019 = f32[] parameter(0)
  %Arg_1.1691 = f32[] parameter(1)
  ROOT %add.1709 = f32[] add(%Arg_0.2019, %Arg_1.1691)
}

%region_1537.41412 (Arg_0.41409: f32[], Arg_1.41410: f32[]) -> f32[] {
  %Arg_0.41409 = f32[] parameter(0)
  %Arg_1.41410 = f32[] parameter(1)
  ROOT %add.41411 = f32[] add(%Arg_0.41409, %Arg_1.41410)
}

%region_1537.41412.clone (Arg_0.2020: f32[], Arg_1.1692: f32[]) -> f32[] {
  %Arg_0.2020 = f32[] parameter(0)
  %Arg_1.1692 = f32[] parameter(1)
  ROOT %add.1710 = f32[] add(%Arg_0.2020, %Arg_1.1692)
}

%region_1538.41421 (Arg_0.41418: f32[], Arg_1.41419: f32[]) -> f32[] {
  %Arg_0.41418 = f32[] parameter(0)
  %Arg_1.41419 = f32[] parameter(1)
  ROOT %add.41420 = f32[] add(%Arg_0.41418, %Arg_1.41419)
}

%region_1538.41421.clone (Arg_0.2021: f32[], Arg_1.1693: f32[]) -> f32[] {
  %Arg_0.2021 = f32[] parameter(0)
  %Arg_1.1693 = f32[] parameter(1)
  ROOT %add.1711 = f32[] add(%Arg_0.2021, %Arg_1.1693)
}

%region_1539.41430 (Arg_0.41427: f32[], Arg_1.41428: f32[]) -> f32[] {
  %Arg_0.41427 = f32[] parameter(0)
  %Arg_1.41428 = f32[] parameter(1)
  ROOT %add.41429 = f32[] add(%Arg_0.41427, %Arg_1.41428)
}

%region_1539.41430.clone (Arg_0.2023: f32[], Arg_1.1694: f32[]) -> f32[] {
  %Arg_0.2023 = f32[] parameter(0)
  %Arg_1.1694 = f32[] parameter(1)
  ROOT %add.1712 = f32[] add(%Arg_0.2023, %Arg_1.1694)
}

%region_1540.41439 (Arg_0.41436: f32[], Arg_1.41437: f32[]) -> f32[] {
  %Arg_0.41436 = f32[] parameter(0)
  %Arg_1.41437 = f32[] parameter(1)
  ROOT %add.41438 = f32[] add(%Arg_0.41436, %Arg_1.41437)
}

%region_1540.41439.clone (Arg_0.2024: f32[], Arg_1.1695: f32[]) -> f32[] {
  %Arg_0.2024 = f32[] parameter(0)
  %Arg_1.1695 = f32[] parameter(1)
  ROOT %add.1713 = f32[] add(%Arg_0.2024, %Arg_1.1695)
}

%region_1541.41448 (Arg_0.41445: f32[], Arg_1.41446: f32[]) -> f32[] {
  %Arg_0.41445 = f32[] parameter(0)
  %Arg_1.41446 = f32[] parameter(1)
  ROOT %add.41447 = f32[] add(%Arg_0.41445, %Arg_1.41446)
}

%region_1542.41457 (Arg_0.41454: f32[], Arg_1.41455: f32[]) -> f32[] {
  %Arg_0.41454 = f32[] parameter(0)
  %Arg_1.41455 = f32[] parameter(1)
  ROOT %add.41456 = f32[] add(%Arg_0.41454, %Arg_1.41455)
}

%region_1543.41466 (Arg_0.41463: f32[], Arg_1.41464: f32[]) -> f32[] {
  %Arg_0.41463 = f32[] parameter(0)
  %Arg_1.41464 = f32[] parameter(1)
  ROOT %add.41465 = f32[] add(%Arg_0.41463, %Arg_1.41464)
}

%region_1543.41466.clone (Arg_0.2025: f32[], Arg_1.1696: f32[]) -> f32[] {
  %Arg_0.2025 = f32[] parameter(0)
  %Arg_1.1696 = f32[] parameter(1)
  ROOT %add.1714 = f32[] add(%Arg_0.2025, %Arg_1.1696)
}

%region_1544.41475 (Arg_0.41472: f32[], Arg_1.41473: f32[]) -> f32[] {
  %Arg_0.41472 = f32[] parameter(0)
  %Arg_1.41473 = f32[] parameter(1)
  ROOT %add.41474 = f32[] add(%Arg_0.41472, %Arg_1.41473)
}

%region_1544.41475.clone (Arg_0.2026: f32[], Arg_1.1697: f32[]) -> f32[] {
  %Arg_0.2026 = f32[] parameter(0)
  %Arg_1.1697 = f32[] parameter(1)
  ROOT %add.1715 = f32[] add(%Arg_0.2026, %Arg_1.1697)
}

%region_1545.41484 (Arg_0.41481: f32[], Arg_1.41482: f32[]) -> f32[] {
  %Arg_0.41481 = f32[] parameter(0)
  %Arg_1.41482 = f32[] parameter(1)
  ROOT %add.41483 = f32[] add(%Arg_0.41481, %Arg_1.41482)
}

%region_1545.41484.clone (Arg_0.2027: f32[], Arg_1.1698: f32[]) -> f32[] {
  %Arg_0.2027 = f32[] parameter(0)
  %Arg_1.1698 = f32[] parameter(1)
  ROOT %add.1716 = f32[] add(%Arg_0.2027, %Arg_1.1698)
}

%region_1546.41493 (Arg_0.41490: f32[], Arg_1.41491: f32[]) -> f32[] {
  %Arg_0.41490 = f32[] parameter(0)
  %Arg_1.41491 = f32[] parameter(1)
  ROOT %add.41492 = f32[] add(%Arg_0.41490, %Arg_1.41491)
}

%region_1546.41493.clone (Arg_0.2028: f32[], Arg_1.1699: f32[]) -> f32[] {
  %Arg_0.2028 = f32[] parameter(0)
  %Arg_1.1699 = f32[] parameter(1)
  ROOT %add.1717 = f32[] add(%Arg_0.2028, %Arg_1.1699)
}

%region_1547.41502 (Arg_0.41499: f32[], Arg_1.41500: f32[]) -> f32[] {
  %Arg_0.41499 = f32[] parameter(0)
  %Arg_1.41500 = f32[] parameter(1)
  ROOT %add.41501 = f32[] add(%Arg_0.41499, %Arg_1.41500)
}

%region_1547.41502.clone (Arg_0.2029: f32[], Arg_1.1700: f32[]) -> f32[] {
  %Arg_0.2029 = f32[] parameter(0)
  %Arg_1.1700 = f32[] parameter(1)
  ROOT %add.1718 = f32[] add(%Arg_0.2029, %Arg_1.1700)
}

%region_1548.41511 (Arg_0.41508: f32[], Arg_1.41509: f32[]) -> f32[] {
  %Arg_0.41508 = f32[] parameter(0)
  %Arg_1.41509 = f32[] parameter(1)
  ROOT %add.41510 = f32[] add(%Arg_0.41508, %Arg_1.41509)
}

%region_1548.41511.clone (Arg_0.2030: f32[], Arg_1.1701: f32[]) -> f32[] {
  %Arg_0.2030 = f32[] parameter(0)
  %Arg_1.1701 = f32[] parameter(1)
  ROOT %add.1719 = f32[] add(%Arg_0.2030, %Arg_1.1701)
}

%region_1549.41520 (Arg_0.41517: f32[], Arg_1.41518: f32[]) -> f32[] {
  %Arg_0.41517 = f32[] parameter(0)
  %Arg_1.41518 = f32[] parameter(1)
  ROOT %add.41519 = f32[] add(%Arg_0.41517, %Arg_1.41518)
}

%region_1549.41520.clone (Arg_0.2031: f32[], Arg_1.1702: f32[]) -> f32[] {
  %Arg_0.2031 = f32[] parameter(0)
  %Arg_1.1702 = f32[] parameter(1)
  ROOT %add.1721 = f32[] add(%Arg_0.2031, %Arg_1.1702)
}

%region_1550.41529 (Arg_0.41526: f32[], Arg_1.41527: f32[]) -> f32[] {
  %Arg_0.41526 = f32[] parameter(0)
  %Arg_1.41527 = f32[] parameter(1)
  ROOT %add.41528 = f32[] add(%Arg_0.41526, %Arg_1.41527)
}

%region_1550.41529.clone (Arg_0.2032: f32[], Arg_1.1703: f32[]) -> f32[] {
  %Arg_0.2032 = f32[] parameter(0)
  %Arg_1.1703 = f32[] parameter(1)
  ROOT %add.1722 = f32[] add(%Arg_0.2032, %Arg_1.1703)
}

%region_1551.41538 (Arg_0.41535: f32[], Arg_1.41536: f32[]) -> f32[] {
  %Arg_0.41535 = f32[] parameter(0)
  %Arg_1.41536 = f32[] parameter(1)
  ROOT %add.41537 = f32[] add(%Arg_0.41535, %Arg_1.41536)
}

%region_1552.41547 (Arg_0.41544: f32[], Arg_1.41545: f32[]) -> f32[] {
  %Arg_0.41544 = f32[] parameter(0)
  %Arg_1.41545 = f32[] parameter(1)
  ROOT %add.41546 = f32[] add(%Arg_0.41544, %Arg_1.41545)
}

%region_1553.41556 (Arg_0.41553: f32[], Arg_1.41554: f32[]) -> f32[] {
  %Arg_0.41553 = f32[] parameter(0)
  %Arg_1.41554 = f32[] parameter(1)
  ROOT %add.41555 = f32[] add(%Arg_0.41553, %Arg_1.41554)
}

%region_1553.41556.clone (Arg_0.2033: f32[], Arg_1.1704: f32[]) -> f32[] {
  %Arg_0.2033 = f32[] parameter(0)
  %Arg_1.1704 = f32[] parameter(1)
  ROOT %add.1723 = f32[] add(%Arg_0.2033, %Arg_1.1704)
}

%region_1554.41565 (Arg_0.41562: f32[], Arg_1.41563: f32[]) -> f32[] {
  %Arg_0.41562 = f32[] parameter(0)
  %Arg_1.41563 = f32[] parameter(1)
  ROOT %add.41564 = f32[] add(%Arg_0.41562, %Arg_1.41563)
}

%region_1554.41565.clone (Arg_0.2034: f32[], Arg_1.1705: f32[]) -> f32[] {
  %Arg_0.2034 = f32[] parameter(0)
  %Arg_1.1705 = f32[] parameter(1)
  ROOT %add.1724 = f32[] add(%Arg_0.2034, %Arg_1.1705)
}

%region_1555.41574 (Arg_0.41571: f32[], Arg_1.41572: f32[]) -> f32[] {
  %Arg_0.41571 = f32[] parameter(0)
  %Arg_1.41572 = f32[] parameter(1)
  ROOT %add.41573 = f32[] add(%Arg_0.41571, %Arg_1.41572)
}

%region_1555.41574.clone (Arg_0.2035: f32[], Arg_1.1706: f32[]) -> f32[] {
  %Arg_0.2035 = f32[] parameter(0)
  %Arg_1.1706 = f32[] parameter(1)
  ROOT %add.1725 = f32[] add(%Arg_0.2035, %Arg_1.1706)
}

%region_1556.41583 (Arg_0.41580: f32[], Arg_1.41581: f32[]) -> f32[] {
  %Arg_0.41580 = f32[] parameter(0)
  %Arg_1.41581 = f32[] parameter(1)
  ROOT %add.41582 = f32[] add(%Arg_0.41580, %Arg_1.41581)
}

%region_1556.41583.clone (Arg_0.2036: f32[], Arg_1.1708: f32[]) -> f32[] {
  %Arg_0.2036 = f32[] parameter(0)
  %Arg_1.1708 = f32[] parameter(1)
  ROOT %add.1726 = f32[] add(%Arg_0.2036, %Arg_1.1708)
}

%region_1557.41592 (Arg_0.41589: f32[], Arg_1.41590: f32[]) -> f32[] {
  %Arg_0.41589 = f32[] parameter(0)
  %Arg_1.41590 = f32[] parameter(1)
  ROOT %add.41591 = f32[] add(%Arg_0.41589, %Arg_1.41590)
}

%region_1557.41592.clone (Arg_0.2037: f32[], Arg_1.1709: f32[]) -> f32[] {
  %Arg_0.2037 = f32[] parameter(0)
  %Arg_1.1709 = f32[] parameter(1)
  ROOT %add.1727 = f32[] add(%Arg_0.2037, %Arg_1.1709)
}

%region_1558.41601 (Arg_0.41598: f32[], Arg_1.41599: f32[]) -> f32[] {
  %Arg_0.41598 = f32[] parameter(0)
  %Arg_1.41599 = f32[] parameter(1)
  ROOT %add.41600 = f32[] add(%Arg_0.41598, %Arg_1.41599)
}

%region_1558.41601.clone (Arg_0.2038: f32[], Arg_1.1710: f32[]) -> f32[] {
  %Arg_0.2038 = f32[] parameter(0)
  %Arg_1.1710 = f32[] parameter(1)
  ROOT %add.1728 = f32[] add(%Arg_0.2038, %Arg_1.1710)
}

%region_1559.41610 (Arg_0.41607: f32[], Arg_1.41608: f32[]) -> f32[] {
  %Arg_0.41607 = f32[] parameter(0)
  %Arg_1.41608 = f32[] parameter(1)
  ROOT %add.41609 = f32[] add(%Arg_0.41607, %Arg_1.41608)
}

%region_1559.41610.clone (Arg_0.2039: f32[], Arg_1.1711: f32[]) -> f32[] {
  %Arg_0.2039 = f32[] parameter(0)
  %Arg_1.1711 = f32[] parameter(1)
  ROOT %add.1729 = f32[] add(%Arg_0.2039, %Arg_1.1711)
}

%region_1560.41619 (Arg_0.41616: f32[], Arg_1.41617: f32[]) -> f32[] {
  %Arg_0.41616 = f32[] parameter(0)
  %Arg_1.41617 = f32[] parameter(1)
  ROOT %add.41618 = f32[] add(%Arg_0.41616, %Arg_1.41617)
}

%region_1560.41619.clone (Arg_0.2040: f32[], Arg_1.1712: f32[]) -> f32[] {
  %Arg_0.2040 = f32[] parameter(0)
  %Arg_1.1712 = f32[] parameter(1)
  ROOT %add.1730 = f32[] add(%Arg_0.2040, %Arg_1.1712)
}

%region_1561.41628 (Arg_0.41625: f32[], Arg_1.41626: f32[]) -> f32[] {
  %Arg_0.41625 = f32[] parameter(0)
  %Arg_1.41626 = f32[] parameter(1)
  ROOT %add.41627 = f32[] add(%Arg_0.41625, %Arg_1.41626)
}

%region_1562.41637 (Arg_0.41634: f32[], Arg_1.41635: f32[]) -> f32[] {
  %Arg_0.41634 = f32[] parameter(0)
  %Arg_1.41635 = f32[] parameter(1)
  ROOT %add.41636 = f32[] add(%Arg_0.41634, %Arg_1.41635)
}

%region_1563.41646 (Arg_0.41643: f32[], Arg_1.41644: f32[]) -> f32[] {
  %Arg_0.41643 = f32[] parameter(0)
  %Arg_1.41644 = f32[] parameter(1)
  ROOT %add.41645 = f32[] add(%Arg_0.41643, %Arg_1.41644)
}

%region_1563.41646.clone (Arg_0.2041: f32[], Arg_1.1713: f32[]) -> f32[] {
  %Arg_0.2041 = f32[] parameter(0)
  %Arg_1.1713 = f32[] parameter(1)
  ROOT %add.1731 = f32[] add(%Arg_0.2041, %Arg_1.1713)
}

%region_1564.41655 (Arg_0.41652: f32[], Arg_1.41653: f32[]) -> f32[] {
  %Arg_0.41652 = f32[] parameter(0)
  %Arg_1.41653 = f32[] parameter(1)
  ROOT %add.41654 = f32[] add(%Arg_0.41652, %Arg_1.41653)
}

%region_1564.41655.clone (Arg_0.2042: f32[], Arg_1.1714: f32[]) -> f32[] {
  %Arg_0.2042 = f32[] parameter(0)
  %Arg_1.1714 = f32[] parameter(1)
  ROOT %add.1732 = f32[] add(%Arg_0.2042, %Arg_1.1714)
}

%region_1565.41664 (Arg_0.41661: f32[], Arg_1.41662: f32[]) -> f32[] {
  %Arg_0.41661 = f32[] parameter(0)
  %Arg_1.41662 = f32[] parameter(1)
  ROOT %add.41663 = f32[] add(%Arg_0.41661, %Arg_1.41662)
}

%region_1565.41664.clone (Arg_0.2043: f32[], Arg_1.1715: f32[]) -> f32[] {
  %Arg_0.2043 = f32[] parameter(0)
  %Arg_1.1715 = f32[] parameter(1)
  ROOT %add.1733 = f32[] add(%Arg_0.2043, %Arg_1.1715)
}

%region_1566.41673 (Arg_0.41670: f32[], Arg_1.41671: f32[]) -> f32[] {
  %Arg_0.41670 = f32[] parameter(0)
  %Arg_1.41671 = f32[] parameter(1)
  ROOT %add.41672 = f32[] add(%Arg_0.41670, %Arg_1.41671)
}

%region_1566.41673.clone (Arg_0.2044: f32[], Arg_1.1716: f32[]) -> f32[] {
  %Arg_0.2044 = f32[] parameter(0)
  %Arg_1.1716 = f32[] parameter(1)
  ROOT %add.1735 = f32[] add(%Arg_0.2044, %Arg_1.1716)
}

%region_1567.41682 (Arg_0.41679: f32[], Arg_1.41680: f32[]) -> f32[] {
  %Arg_0.41679 = f32[] parameter(0)
  %Arg_1.41680 = f32[] parameter(1)
  ROOT %add.41681 = f32[] add(%Arg_0.41679, %Arg_1.41680)
}

%region_1567.41682.clone (Arg_0.2045: f32[], Arg_1.1717: f32[]) -> f32[] {
  %Arg_0.2045 = f32[] parameter(0)
  %Arg_1.1717 = f32[] parameter(1)
  ROOT %add.1736 = f32[] add(%Arg_0.2045, %Arg_1.1717)
}

%region_1568.41691 (Arg_0.41688: f32[], Arg_1.41689: f32[]) -> f32[] {
  %Arg_0.41688 = f32[] parameter(0)
  %Arg_1.41689 = f32[] parameter(1)
  ROOT %add.41690 = f32[] add(%Arg_0.41688, %Arg_1.41689)
}

%region_1568.41691.clone (Arg_0.2046: f32[], Arg_1.1718: f32[]) -> f32[] {
  %Arg_0.2046 = f32[] parameter(0)
  %Arg_1.1718 = f32[] parameter(1)
  ROOT %add.1738 = f32[] add(%Arg_0.2046, %Arg_1.1718)
}

%region_1569.41700 (Arg_0.41697: f32[], Arg_1.41698: f32[]) -> f32[] {
  %Arg_0.41697 = f32[] parameter(0)
  %Arg_1.41698 = f32[] parameter(1)
  ROOT %add.41699 = f32[] add(%Arg_0.41697, %Arg_1.41698)
}

%region_1569.41700.clone (Arg_0.2047: f32[], Arg_1.1720: f32[]) -> f32[] {
  %Arg_0.2047 = f32[] parameter(0)
  %Arg_1.1720 = f32[] parameter(1)
  ROOT %add.1739 = f32[] add(%Arg_0.2047, %Arg_1.1720)
}

%region_1570.41709 (Arg_0.41706: f32[], Arg_1.41707: f32[]) -> f32[] {
  %Arg_0.41706 = f32[] parameter(0)
  %Arg_1.41707 = f32[] parameter(1)
  ROOT %add.41708 = f32[] add(%Arg_0.41706, %Arg_1.41707)
}

%region_1570.41709.clone (Arg_0.2048: f32[], Arg_1.1721: f32[]) -> f32[] {
  %Arg_0.2048 = f32[] parameter(0)
  %Arg_1.1721 = f32[] parameter(1)
  ROOT %add.1741 = f32[] add(%Arg_0.2048, %Arg_1.1721)
}

%region_1571.41718 (Arg_0.41715: f32[], Arg_1.41716: f32[]) -> f32[] {
  %Arg_0.41715 = f32[] parameter(0)
  %Arg_1.41716 = f32[] parameter(1)
  ROOT %add.41717 = f32[] add(%Arg_0.41715, %Arg_1.41716)
}

%region_1572.41727 (Arg_0.41724: f32[], Arg_1.41725: f32[]) -> f32[] {
  %Arg_0.41724 = f32[] parameter(0)
  %Arg_1.41725 = f32[] parameter(1)
  ROOT %add.41726 = f32[] add(%Arg_0.41724, %Arg_1.41725)
}

%region_1573.41736 (Arg_0.41733: f32[], Arg_1.41734: f32[]) -> f32[] {
  %Arg_0.41733 = f32[] parameter(0)
  %Arg_1.41734 = f32[] parameter(1)
  ROOT %add.41735 = f32[] add(%Arg_0.41733, %Arg_1.41734)
}

%region_1573.41736.clone (Arg_0.2049: f32[], Arg_1.1722: f32[]) -> f32[] {
  %Arg_0.2049 = f32[] parameter(0)
  %Arg_1.1722 = f32[] parameter(1)
  ROOT %add.1742 = f32[] add(%Arg_0.2049, %Arg_1.1722)
}

%region_1574.41745 (Arg_0.41742: f32[], Arg_1.41743: f32[]) -> f32[] {
  %Arg_0.41742 = f32[] parameter(0)
  %Arg_1.41743 = f32[] parameter(1)
  ROOT %add.41744 = f32[] add(%Arg_0.41742, %Arg_1.41743)
}

%region_1574.41745.clone (Arg_0.2050: f32[], Arg_1.1723: f32[]) -> f32[] {
  %Arg_0.2050 = f32[] parameter(0)
  %Arg_1.1723 = f32[] parameter(1)
  ROOT %add.1743 = f32[] add(%Arg_0.2050, %Arg_1.1723)
}

%region_1575.41754 (Arg_0.41751: f32[], Arg_1.41752: f32[]) -> f32[] {
  %Arg_0.41751 = f32[] parameter(0)
  %Arg_1.41752 = f32[] parameter(1)
  ROOT %add.41753 = f32[] add(%Arg_0.41751, %Arg_1.41752)
}

%region_1575.41754.clone (Arg_0.2051: f32[], Arg_1.1724: f32[]) -> f32[] {
  %Arg_0.2051 = f32[] parameter(0)
  %Arg_1.1724 = f32[] parameter(1)
  ROOT %add.1744 = f32[] add(%Arg_0.2051, %Arg_1.1724)
}

%region_1576.41763 (Arg_0.41760: f32[], Arg_1.41761: f32[]) -> f32[] {
  %Arg_0.41760 = f32[] parameter(0)
  %Arg_1.41761 = f32[] parameter(1)
  ROOT %add.41762 = f32[] add(%Arg_0.41760, %Arg_1.41761)
}

%region_1576.41763.clone (Arg_0.2052: f32[], Arg_1.1725: f32[]) -> f32[] {
  %Arg_0.2052 = f32[] parameter(0)
  %Arg_1.1725 = f32[] parameter(1)
  ROOT %add.1745 = f32[] add(%Arg_0.2052, %Arg_1.1725)
}

%region_1577.41772 (Arg_0.41769: f32[], Arg_1.41770: f32[]) -> f32[] {
  %Arg_0.41769 = f32[] parameter(0)
  %Arg_1.41770 = f32[] parameter(1)
  ROOT %add.41771 = f32[] add(%Arg_0.41769, %Arg_1.41770)
}

%region_1577.41772.clone (Arg_0.2053: f32[], Arg_1.1726: f32[]) -> f32[] {
  %Arg_0.2053 = f32[] parameter(0)
  %Arg_1.1726 = f32[] parameter(1)
  ROOT %add.1746 = f32[] add(%Arg_0.2053, %Arg_1.1726)
}

%region_1578.41781 (Arg_0.41778: f32[], Arg_1.41779: f32[]) -> f32[] {
  %Arg_0.41778 = f32[] parameter(0)
  %Arg_1.41779 = f32[] parameter(1)
  ROOT %add.41780 = f32[] add(%Arg_0.41778, %Arg_1.41779)
}

%region_1578.41781.clone (Arg_0.2054: f32[], Arg_1.1727: f32[]) -> f32[] {
  %Arg_0.2054 = f32[] parameter(0)
  %Arg_1.1727 = f32[] parameter(1)
  ROOT %add.1747 = f32[] add(%Arg_0.2054, %Arg_1.1727)
}

%region_1579.41790 (Arg_0.41787: f32[], Arg_1.41788: f32[]) -> f32[] {
  %Arg_0.41787 = f32[] parameter(0)
  %Arg_1.41788 = f32[] parameter(1)
  ROOT %add.41789 = f32[] add(%Arg_0.41787, %Arg_1.41788)
}

%region_1579.41790.clone (Arg_0.2055: f32[], Arg_1.1728: f32[]) -> f32[] {
  %Arg_0.2055 = f32[] parameter(0)
  %Arg_1.1728 = f32[] parameter(1)
  ROOT %add.1748 = f32[] add(%Arg_0.2055, %Arg_1.1728)
}

%region_1580.41799 (Arg_0.41796: f32[], Arg_1.41797: f32[]) -> f32[] {
  %Arg_0.41796 = f32[] parameter(0)
  %Arg_1.41797 = f32[] parameter(1)
  ROOT %add.41798 = f32[] add(%Arg_0.41796, %Arg_1.41797)
}

%region_1580.41799.clone (Arg_0.2056: f32[], Arg_1.1729: f32[]) -> f32[] {
  %Arg_0.2056 = f32[] parameter(0)
  %Arg_1.1729 = f32[] parameter(1)
  ROOT %add.1749 = f32[] add(%Arg_0.2056, %Arg_1.1729)
}

%region_1581.41808 (Arg_0.41805: f32[], Arg_1.41806: f32[]) -> f32[] {
  %Arg_0.41805 = f32[] parameter(0)
  %Arg_1.41806 = f32[] parameter(1)
  ROOT %add.41807 = f32[] add(%Arg_0.41805, %Arg_1.41806)
}

%region_1582.41817 (Arg_0.41814: f32[], Arg_1.41815: f32[]) -> f32[] {
  %Arg_0.41814 = f32[] parameter(0)
  %Arg_1.41815 = f32[] parameter(1)
  ROOT %add.41816 = f32[] add(%Arg_0.41814, %Arg_1.41815)
}

%region_1583.41826 (Arg_0.41823: f32[], Arg_1.41824: f32[]) -> f32[] {
  %Arg_0.41823 = f32[] parameter(0)
  %Arg_1.41824 = f32[] parameter(1)
  ROOT %add.41825 = f32[] add(%Arg_0.41823, %Arg_1.41824)
}

%region_1583.41826.clone (Arg_0.2057: f32[], Arg_1.1730: f32[]) -> f32[] {
  %Arg_0.2057 = f32[] parameter(0)
  %Arg_1.1730 = f32[] parameter(1)
  ROOT %add.1750 = f32[] add(%Arg_0.2057, %Arg_1.1730)
}

%region_1584.41835 (Arg_0.41832: f32[], Arg_1.41833: f32[]) -> f32[] {
  %Arg_0.41832 = f32[] parameter(0)
  %Arg_1.41833 = f32[] parameter(1)
  ROOT %add.41834 = f32[] add(%Arg_0.41832, %Arg_1.41833)
}

%region_1584.41835.clone (Arg_0.2058: f32[], Arg_1.1731: f32[]) -> f32[] {
  %Arg_0.2058 = f32[] parameter(0)
  %Arg_1.1731 = f32[] parameter(1)
  ROOT %add.1751 = f32[] add(%Arg_0.2058, %Arg_1.1731)
}

%region_1585.41844 (Arg_0.41841: f32[], Arg_1.41842: f32[]) -> f32[] {
  %Arg_0.41841 = f32[] parameter(0)
  %Arg_1.41842 = f32[] parameter(1)
  ROOT %add.41843 = f32[] add(%Arg_0.41841, %Arg_1.41842)
}

%region_1585.41844.clone (Arg_0.2060: f32[], Arg_1.1732: f32[]) -> f32[] {
  %Arg_0.2060 = f32[] parameter(0)
  %Arg_1.1732 = f32[] parameter(1)
  ROOT %add.1752 = f32[] add(%Arg_0.2060, %Arg_1.1732)
}

%region_1586.41853 (Arg_0.41850: f32[], Arg_1.41851: f32[]) -> f32[] {
  %Arg_0.41850 = f32[] parameter(0)
  %Arg_1.41851 = f32[] parameter(1)
  ROOT %add.41852 = f32[] add(%Arg_0.41850, %Arg_1.41851)
}

%region_1586.41853.clone (Arg_0.2061: f32[], Arg_1.1733: f32[]) -> f32[] {
  %Arg_0.2061 = f32[] parameter(0)
  %Arg_1.1733 = f32[] parameter(1)
  ROOT %add.1753 = f32[] add(%Arg_0.2061, %Arg_1.1733)
}

%region_1587.41862 (Arg_0.41859: f32[], Arg_1.41860: f32[]) -> f32[] {
  %Arg_0.41859 = f32[] parameter(0)
  %Arg_1.41860 = f32[] parameter(1)
  ROOT %add.41861 = f32[] add(%Arg_0.41859, %Arg_1.41860)
}

%region_1587.41862.clone (Arg_0.2062: f32[], Arg_1.1734: f32[]) -> f32[] {
  %Arg_0.2062 = f32[] parameter(0)
  %Arg_1.1734 = f32[] parameter(1)
  ROOT %add.1755 = f32[] add(%Arg_0.2062, %Arg_1.1734)
}

%region_1588.41871 (Arg_0.41868: f32[], Arg_1.41869: f32[]) -> f32[] {
  %Arg_0.41868 = f32[] parameter(0)
  %Arg_1.41869 = f32[] parameter(1)
  ROOT %add.41870 = f32[] add(%Arg_0.41868, %Arg_1.41869)
}

%region_1588.41871.clone (Arg_0.2063: f32[], Arg_1.1735: f32[]) -> f32[] {
  %Arg_0.2063 = f32[] parameter(0)
  %Arg_1.1735 = f32[] parameter(1)
  ROOT %add.1756 = f32[] add(%Arg_0.2063, %Arg_1.1735)
}

%region_1589.41880 (Arg_0.41877: f32[], Arg_1.41878: f32[]) -> f32[] {
  %Arg_0.41877 = f32[] parameter(0)
  %Arg_1.41878 = f32[] parameter(1)
  ROOT %add.41879 = f32[] add(%Arg_0.41877, %Arg_1.41878)
}

%region_1589.41880.clone (Arg_0.2064: f32[], Arg_1.1736: f32[]) -> f32[] {
  %Arg_0.2064 = f32[] parameter(0)
  %Arg_1.1736 = f32[] parameter(1)
  ROOT %add.1757 = f32[] add(%Arg_0.2064, %Arg_1.1736)
}

%region_1590.41889 (Arg_0.41886: f32[], Arg_1.41887: f32[]) -> f32[] {
  %Arg_0.41886 = f32[] parameter(0)
  %Arg_1.41887 = f32[] parameter(1)
  ROOT %add.41888 = f32[] add(%Arg_0.41886, %Arg_1.41887)
}

%region_1590.41889.clone (Arg_0.2065: f32[], Arg_1.1737: f32[]) -> f32[] {
  %Arg_0.2065 = f32[] parameter(0)
  %Arg_1.1737 = f32[] parameter(1)
  ROOT %add.1758 = f32[] add(%Arg_0.2065, %Arg_1.1737)
}

%region_1591.41898 (Arg_0.41895: f32[], Arg_1.41896: f32[]) -> f32[] {
  %Arg_0.41895 = f32[] parameter(0)
  %Arg_1.41896 = f32[] parameter(1)
  ROOT %add.41897 = f32[] add(%Arg_0.41895, %Arg_1.41896)
}

%region_1592.41907 (Arg_0.41904: f32[], Arg_1.41905: f32[]) -> f32[] {
  %Arg_0.41904 = f32[] parameter(0)
  %Arg_1.41905 = f32[] parameter(1)
  ROOT %add.41906 = f32[] add(%Arg_0.41904, %Arg_1.41905)
}

%region_1593.41916 (Arg_0.41913: f32[], Arg_1.41914: f32[]) -> f32[] {
  %Arg_0.41913 = f32[] parameter(0)
  %Arg_1.41914 = f32[] parameter(1)
  ROOT %add.41915 = f32[] add(%Arg_0.41913, %Arg_1.41914)
}

%region_1593.41916.clone (Arg_0.2067: f32[], Arg_1.1738: f32[]) -> f32[] {
  %Arg_0.2067 = f32[] parameter(0)
  %Arg_1.1738 = f32[] parameter(1)
  ROOT %add.1759 = f32[] add(%Arg_0.2067, %Arg_1.1738)
}

%region_1594.41925 (Arg_0.41922: f32[], Arg_1.41923: f32[]) -> f32[] {
  %Arg_0.41922 = f32[] parameter(0)
  %Arg_1.41923 = f32[] parameter(1)
  ROOT %add.41924 = f32[] add(%Arg_0.41922, %Arg_1.41923)
}

%region_1594.41925.clone (Arg_0.2068: f32[], Arg_1.1739: f32[]) -> f32[] {
  %Arg_0.2068 = f32[] parameter(0)
  %Arg_1.1739 = f32[] parameter(1)
  ROOT %add.1760 = f32[] add(%Arg_0.2068, %Arg_1.1739)
}

%region_1595.41934 (Arg_0.41931: f32[], Arg_1.41932: f32[]) -> f32[] {
  %Arg_0.41931 = f32[] parameter(0)
  %Arg_1.41932 = f32[] parameter(1)
  ROOT %add.41933 = f32[] add(%Arg_0.41931, %Arg_1.41932)
}

%region_1595.41934.clone (Arg_0.2069: f32[], Arg_1.1740: f32[]) -> f32[] {
  %Arg_0.2069 = f32[] parameter(0)
  %Arg_1.1740 = f32[] parameter(1)
  ROOT %add.1761 = f32[] add(%Arg_0.2069, %Arg_1.1740)
}

%region_1596.41943 (Arg_0.41940: f32[], Arg_1.41941: f32[]) -> f32[] {
  %Arg_0.41940 = f32[] parameter(0)
  %Arg_1.41941 = f32[] parameter(1)
  ROOT %add.41942 = f32[] add(%Arg_0.41940, %Arg_1.41941)
}

%region_1596.41943.clone (Arg_0.2070: f32[], Arg_1.1741: f32[]) -> f32[] {
  %Arg_0.2070 = f32[] parameter(0)
  %Arg_1.1741 = f32[] parameter(1)
  ROOT %add.1762 = f32[] add(%Arg_0.2070, %Arg_1.1741)
}

%region_1597.41952 (Arg_0.41949: f32[], Arg_1.41950: f32[]) -> f32[] {
  %Arg_0.41949 = f32[] parameter(0)
  %Arg_1.41950 = f32[] parameter(1)
  ROOT %add.41951 = f32[] add(%Arg_0.41949, %Arg_1.41950)
}

%region_1597.41952.clone (Arg_0.2071: f32[], Arg_1.1742: f32[]) -> f32[] {
  %Arg_0.2071 = f32[] parameter(0)
  %Arg_1.1742 = f32[] parameter(1)
  ROOT %add.1763 = f32[] add(%Arg_0.2071, %Arg_1.1742)
}

%region_1598.41961 (Arg_0.41958: f32[], Arg_1.41959: f32[]) -> f32[] {
  %Arg_0.41958 = f32[] parameter(0)
  %Arg_1.41959 = f32[] parameter(1)
  ROOT %add.41960 = f32[] add(%Arg_0.41958, %Arg_1.41959)
}

%region_1598.41961.clone (Arg_0.2072: f32[], Arg_1.1743: f32[]) -> f32[] {
  %Arg_0.2072 = f32[] parameter(0)
  %Arg_1.1743 = f32[] parameter(1)
  ROOT %add.1765 = f32[] add(%Arg_0.2072, %Arg_1.1743)
}

%region_1599.41970 (Arg_0.41967: f32[], Arg_1.41968: f32[]) -> f32[] {
  %Arg_0.41967 = f32[] parameter(0)
  %Arg_1.41968 = f32[] parameter(1)
  ROOT %add.41969 = f32[] add(%Arg_0.41967, %Arg_1.41968)
}

%region_1599.41970.clone (Arg_0.2073: f32[], Arg_1.1744: f32[]) -> f32[] {
  %Arg_0.2073 = f32[] parameter(0)
  %Arg_1.1744 = f32[] parameter(1)
  ROOT %add.1766 = f32[] add(%Arg_0.2073, %Arg_1.1744)
}

%region_1600.41979 (Arg_0.41976: f32[], Arg_1.41977: f32[]) -> f32[] {
  %Arg_0.41976 = f32[] parameter(0)
  %Arg_1.41977 = f32[] parameter(1)
  ROOT %add.41978 = f32[] add(%Arg_0.41976, %Arg_1.41977)
}

%region_1600.41979.clone (Arg_0.2074: f32[], Arg_1.1745: f32[]) -> f32[] {
  %Arg_0.2074 = f32[] parameter(0)
  %Arg_1.1745 = f32[] parameter(1)
  ROOT %add.1767 = f32[] add(%Arg_0.2074, %Arg_1.1745)
}

%region_1601.41988 (Arg_0.41985: f32[], Arg_1.41986: f32[]) -> f32[] {
  %Arg_0.41985 = f32[] parameter(0)
  %Arg_1.41986 = f32[] parameter(1)
  ROOT %add.41987 = f32[] add(%Arg_0.41985, %Arg_1.41986)
}

%region_1602.41997 (Arg_0.41994: f32[], Arg_1.41995: f32[]) -> f32[] {
  %Arg_0.41994 = f32[] parameter(0)
  %Arg_1.41995 = f32[] parameter(1)
  ROOT %add.41996 = f32[] add(%Arg_0.41994, %Arg_1.41995)
}

%region_1603.42006 (Arg_0.42003: f32[], Arg_1.42004: f32[]) -> f32[] {
  %Arg_0.42003 = f32[] parameter(0)
  %Arg_1.42004 = f32[] parameter(1)
  ROOT %add.42005 = f32[] add(%Arg_0.42003, %Arg_1.42004)
}

%region_1603.42006.clone (Arg_0.2075: f32[], Arg_1.1746: f32[]) -> f32[] {
  %Arg_0.2075 = f32[] parameter(0)
  %Arg_1.1746 = f32[] parameter(1)
  ROOT %add.1768 = f32[] add(%Arg_0.2075, %Arg_1.1746)
}

%region_1604.42015 (Arg_0.42012: f32[], Arg_1.42013: f32[]) -> f32[] {
  %Arg_0.42012 = f32[] parameter(0)
  %Arg_1.42013 = f32[] parameter(1)
  ROOT %add.42014 = f32[] add(%Arg_0.42012, %Arg_1.42013)
}

%region_1604.42015.clone (Arg_0.2076: f32[], Arg_1.1747: f32[]) -> f32[] {
  %Arg_0.2076 = f32[] parameter(0)
  %Arg_1.1747 = f32[] parameter(1)
  ROOT %add.1769 = f32[] add(%Arg_0.2076, %Arg_1.1747)
}

%region_1605.42024 (Arg_0.42021: f32[], Arg_1.42022: f32[]) -> f32[] {
  %Arg_0.42021 = f32[] parameter(0)
  %Arg_1.42022 = f32[] parameter(1)
  ROOT %add.42023 = f32[] add(%Arg_0.42021, %Arg_1.42022)
}

%region_1605.42024.clone (Arg_0.2077: f32[], Arg_1.1748: f32[]) -> f32[] {
  %Arg_0.2077 = f32[] parameter(0)
  %Arg_1.1748 = f32[] parameter(1)
  ROOT %add.1770 = f32[] add(%Arg_0.2077, %Arg_1.1748)
}

%region_1606.42033 (Arg_0.42030: f32[], Arg_1.42031: f32[]) -> f32[] {
  %Arg_0.42030 = f32[] parameter(0)
  %Arg_1.42031 = f32[] parameter(1)
  ROOT %add.42032 = f32[] add(%Arg_0.42030, %Arg_1.42031)
}

%region_1606.42033.clone (Arg_0.2078: f32[], Arg_1.1749: f32[]) -> f32[] {
  %Arg_0.2078 = f32[] parameter(0)
  %Arg_1.1749 = f32[] parameter(1)
  ROOT %add.1771 = f32[] add(%Arg_0.2078, %Arg_1.1749)
}

%region_1607.42042 (Arg_0.42039: f32[], Arg_1.42040: f32[]) -> f32[] {
  %Arg_0.42039 = f32[] parameter(0)
  %Arg_1.42040 = f32[] parameter(1)
  ROOT %add.42041 = f32[] add(%Arg_0.42039, %Arg_1.42040)
}

%region_1607.42042.clone (Arg_0.2079: f32[], Arg_1.1750: f32[]) -> f32[] {
  %Arg_0.2079 = f32[] parameter(0)
  %Arg_1.1750 = f32[] parameter(1)
  ROOT %add.1772 = f32[] add(%Arg_0.2079, %Arg_1.1750)
}

%region_1608.42051 (Arg_0.42048: f32[], Arg_1.42049: f32[]) -> f32[] {
  %Arg_0.42048 = f32[] parameter(0)
  %Arg_1.42049 = f32[] parameter(1)
  ROOT %add.42050 = f32[] add(%Arg_0.42048, %Arg_1.42049)
}

%region_1608.42051.clone (Arg_0.2081: f32[], Arg_1.1751: f32[]) -> f32[] {
  %Arg_0.2081 = f32[] parameter(0)
  %Arg_1.1751 = f32[] parameter(1)
  ROOT %add.1773 = f32[] add(%Arg_0.2081, %Arg_1.1751)
}

%region_1609.42060 (Arg_0.42057: f32[], Arg_1.42058: f32[]) -> f32[] {
  %Arg_0.42057 = f32[] parameter(0)
  %Arg_1.42058 = f32[] parameter(1)
  ROOT %add.42059 = f32[] add(%Arg_0.42057, %Arg_1.42058)
}

%region_1609.42060.clone (Arg_0.2082: f32[], Arg_1.1752: f32[]) -> f32[] {
  %Arg_0.2082 = f32[] parameter(0)
  %Arg_1.1752 = f32[] parameter(1)
  ROOT %add.1774 = f32[] add(%Arg_0.2082, %Arg_1.1752)
}

%region_1610.42069 (Arg_0.42066: f32[], Arg_1.42067: f32[]) -> f32[] {
  %Arg_0.42066 = f32[] parameter(0)
  %Arg_1.42067 = f32[] parameter(1)
  ROOT %add.42068 = f32[] add(%Arg_0.42066, %Arg_1.42067)
}

%region_1610.42069.clone (Arg_0.2083: f32[], Arg_1.1753: f32[]) -> f32[] {
  %Arg_0.2083 = f32[] parameter(0)
  %Arg_1.1753 = f32[] parameter(1)
  ROOT %add.1775 = f32[] add(%Arg_0.2083, %Arg_1.1753)
}

%region_1611.42078 (Arg_0.42075: f32[], Arg_1.42076: f32[]) -> f32[] {
  %Arg_0.42075 = f32[] parameter(0)
  %Arg_1.42076 = f32[] parameter(1)
  ROOT %add.42077 = f32[] add(%Arg_0.42075, %Arg_1.42076)
}

%region_1612.42087 (Arg_0.42084: f32[], Arg_1.42085: f32[]) -> f32[] {
  %Arg_0.42084 = f32[] parameter(0)
  %Arg_1.42085 = f32[] parameter(1)
  ROOT %add.42086 = f32[] add(%Arg_0.42084, %Arg_1.42085)
}

%region_1613.42096 (Arg_0.42093: f32[], Arg_1.42094: f32[]) -> f32[] {
  %Arg_0.42093 = f32[] parameter(0)
  %Arg_1.42094 = f32[] parameter(1)
  ROOT %add.42095 = f32[] add(%Arg_0.42093, %Arg_1.42094)
}

%region_1613.42096.clone (Arg_0.2084: f32[], Arg_1.1754: f32[]) -> f32[] {
  %Arg_0.2084 = f32[] parameter(0)
  %Arg_1.1754 = f32[] parameter(1)
  ROOT %add.1776 = f32[] add(%Arg_0.2084, %Arg_1.1754)
}

%region_1614.42105 (Arg_0.42102: f32[], Arg_1.42103: f32[]) -> f32[] {
  %Arg_0.42102 = f32[] parameter(0)
  %Arg_1.42103 = f32[] parameter(1)
  ROOT %add.42104 = f32[] add(%Arg_0.42102, %Arg_1.42103)
}

%region_1614.42105.clone (Arg_0.2085: f32[], Arg_1.1755: f32[]) -> f32[] {
  %Arg_0.2085 = f32[] parameter(0)
  %Arg_1.1755 = f32[] parameter(1)
  ROOT %add.1777 = f32[] add(%Arg_0.2085, %Arg_1.1755)
}

%region_1615.42114 (Arg_0.42111: f32[], Arg_1.42112: f32[]) -> f32[] {
  %Arg_0.42111 = f32[] parameter(0)
  %Arg_1.42112 = f32[] parameter(1)
  ROOT %add.42113 = f32[] add(%Arg_0.42111, %Arg_1.42112)
}

%region_1615.42114.clone (Arg_0.2086: f32[], Arg_1.1757: f32[]) -> f32[] {
  %Arg_0.2086 = f32[] parameter(0)
  %Arg_1.1757 = f32[] parameter(1)
  ROOT %add.1779 = f32[] add(%Arg_0.2086, %Arg_1.1757)
}

%region_1616.42123 (Arg_0.42120: f32[], Arg_1.42121: f32[]) -> f32[] {
  %Arg_0.42120 = f32[] parameter(0)
  %Arg_1.42121 = f32[] parameter(1)
  ROOT %add.42122 = f32[] add(%Arg_0.42120, %Arg_1.42121)
}

%region_1616.42123.clone (Arg_0.2087: f32[], Arg_1.1758: f32[]) -> f32[] {
  %Arg_0.2087 = f32[] parameter(0)
  %Arg_1.1758 = f32[] parameter(1)
  ROOT %add.1780 = f32[] add(%Arg_0.2087, %Arg_1.1758)
}

%region_1617.42132 (Arg_0.42129: f32[], Arg_1.42130: f32[]) -> f32[] {
  %Arg_0.42129 = f32[] parameter(0)
  %Arg_1.42130 = f32[] parameter(1)
  ROOT %add.42131 = f32[] add(%Arg_0.42129, %Arg_1.42130)
}

%region_1617.42132.clone (Arg_0.2088: f32[], Arg_1.1759: f32[]) -> f32[] {
  %Arg_0.2088 = f32[] parameter(0)
  %Arg_1.1759 = f32[] parameter(1)
  ROOT %add.1781 = f32[] add(%Arg_0.2088, %Arg_1.1759)
}

%region_1618.42141 (Arg_0.42138: f32[], Arg_1.42139: f32[]) -> f32[] {
  %Arg_0.42138 = f32[] parameter(0)
  %Arg_1.42139 = f32[] parameter(1)
  ROOT %add.42140 = f32[] add(%Arg_0.42138, %Arg_1.42139)
}

%region_1618.42141.clone (Arg_0.2090: f32[], Arg_1.1760: f32[]) -> f32[] {
  %Arg_0.2090 = f32[] parameter(0)
  %Arg_1.1760 = f32[] parameter(1)
  ROOT %add.1782 = f32[] add(%Arg_0.2090, %Arg_1.1760)
}

%region_1619.42150 (Arg_0.42147: f32[], Arg_1.42148: f32[]) -> f32[] {
  %Arg_0.42147 = f32[] parameter(0)
  %Arg_1.42148 = f32[] parameter(1)
  ROOT %add.42149 = f32[] add(%Arg_0.42147, %Arg_1.42148)
}

%region_1619.42150.clone (Arg_0.2091: f32[], Arg_1.1761: f32[]) -> f32[] {
  %Arg_0.2091 = f32[] parameter(0)
  %Arg_1.1761 = f32[] parameter(1)
  ROOT %add.1783 = f32[] add(%Arg_0.2091, %Arg_1.1761)
}

%region_1620.42159 (Arg_0.42156: f32[], Arg_1.42157: f32[]) -> f32[] {
  %Arg_0.42156 = f32[] parameter(0)
  %Arg_1.42157 = f32[] parameter(1)
  ROOT %add.42158 = f32[] add(%Arg_0.42156, %Arg_1.42157)
}

%region_1620.42159.clone (Arg_0.2092: f32[], Arg_1.1762: f32[]) -> f32[] {
  %Arg_0.2092 = f32[] parameter(0)
  %Arg_1.1762 = f32[] parameter(1)
  ROOT %add.1784 = f32[] add(%Arg_0.2092, %Arg_1.1762)
}

%region_1621.42168 (Arg_0.42165: f32[], Arg_1.42166: f32[]) -> f32[] {
  %Arg_0.42165 = f32[] parameter(0)
  %Arg_1.42166 = f32[] parameter(1)
  ROOT %add.42167 = f32[] add(%Arg_0.42165, %Arg_1.42166)
}

%region_1622.42177 (Arg_0.42174: f32[], Arg_1.42175: f32[]) -> f32[] {
  %Arg_0.42174 = f32[] parameter(0)
  %Arg_1.42175 = f32[] parameter(1)
  ROOT %add.42176 = f32[] add(%Arg_0.42174, %Arg_1.42175)
}

%region_1623.42186 (Arg_0.42183: f32[], Arg_1.42184: f32[]) -> f32[] {
  %Arg_0.42183 = f32[] parameter(0)
  %Arg_1.42184 = f32[] parameter(1)
  ROOT %add.42185 = f32[] add(%Arg_0.42183, %Arg_1.42184)
}

%region_1623.42186.clone (Arg_0.2093: f32[], Arg_1.1764: f32[]) -> f32[] {
  %Arg_0.2093 = f32[] parameter(0)
  %Arg_1.1764 = f32[] parameter(1)
  ROOT %add.1785 = f32[] add(%Arg_0.2093, %Arg_1.1764)
}

%region_1624.42195 (Arg_0.42192: f32[], Arg_1.42193: f32[]) -> f32[] {
  %Arg_0.42192 = f32[] parameter(0)
  %Arg_1.42193 = f32[] parameter(1)
  ROOT %add.42194 = f32[] add(%Arg_0.42192, %Arg_1.42193)
}

%region_1624.42195.clone (Arg_0.2094: f32[], Arg_1.1765: f32[]) -> f32[] {
  %Arg_0.2094 = f32[] parameter(0)
  %Arg_1.1765 = f32[] parameter(1)
  ROOT %add.1786 = f32[] add(%Arg_0.2094, %Arg_1.1765)
}

%region_1625.42204 (Arg_0.42201: f32[], Arg_1.42202: f32[]) -> f32[] {
  %Arg_0.42201 = f32[] parameter(0)
  %Arg_1.42202 = f32[] parameter(1)
  ROOT %add.42203 = f32[] add(%Arg_0.42201, %Arg_1.42202)
}

%region_1625.42204.clone (Arg_0.2095: f32[], Arg_1.1766: f32[]) -> f32[] {
  %Arg_0.2095 = f32[] parameter(0)
  %Arg_1.1766 = f32[] parameter(1)
  ROOT %add.1788 = f32[] add(%Arg_0.2095, %Arg_1.1766)
}

%region_1626.42213 (Arg_0.42210: f32[], Arg_1.42211: f32[]) -> f32[] {
  %Arg_0.42210 = f32[] parameter(0)
  %Arg_1.42211 = f32[] parameter(1)
  ROOT %add.42212 = f32[] add(%Arg_0.42210, %Arg_1.42211)
}

%region_1626.42213.clone (Arg_0.2096: f32[], Arg_1.1767: f32[]) -> f32[] {
  %Arg_0.2096 = f32[] parameter(0)
  %Arg_1.1767 = f32[] parameter(1)
  ROOT %add.1789 = f32[] add(%Arg_0.2096, %Arg_1.1767)
}

%region_1627.42222 (Arg_0.42219: f32[], Arg_1.42220: f32[]) -> f32[] {
  %Arg_0.42219 = f32[] parameter(0)
  %Arg_1.42220 = f32[] parameter(1)
  ROOT %add.42221 = f32[] add(%Arg_0.42219, %Arg_1.42220)
}

%region_1627.42222.clone (Arg_0.2097: f32[], Arg_1.1768: f32[]) -> f32[] {
  %Arg_0.2097 = f32[] parameter(0)
  %Arg_1.1768 = f32[] parameter(1)
  ROOT %add.1790 = f32[] add(%Arg_0.2097, %Arg_1.1768)
}

%region_1628.42231 (Arg_0.42228: f32[], Arg_1.42229: f32[]) -> f32[] {
  %Arg_0.42228 = f32[] parameter(0)
  %Arg_1.42229 = f32[] parameter(1)
  ROOT %add.42230 = f32[] add(%Arg_0.42228, %Arg_1.42229)
}

%region_1628.42231.clone (Arg_0.2098: f32[], Arg_1.1769: f32[]) -> f32[] {
  %Arg_0.2098 = f32[] parameter(0)
  %Arg_1.1769 = f32[] parameter(1)
  ROOT %add.1791 = f32[] add(%Arg_0.2098, %Arg_1.1769)
}

%region_1629.42240 (Arg_0.42237: f32[], Arg_1.42238: f32[]) -> f32[] {
  %Arg_0.42237 = f32[] parameter(0)
  %Arg_1.42238 = f32[] parameter(1)
  ROOT %add.42239 = f32[] add(%Arg_0.42237, %Arg_1.42238)
}

%region_1629.42240.clone (Arg_0.2099: f32[], Arg_1.1770: f32[]) -> f32[] {
  %Arg_0.2099 = f32[] parameter(0)
  %Arg_1.1770 = f32[] parameter(1)
  ROOT %add.1792 = f32[] add(%Arg_0.2099, %Arg_1.1770)
}

%region_1630.42249 (Arg_0.42246: f32[], Arg_1.42247: f32[]) -> f32[] {
  %Arg_0.42246 = f32[] parameter(0)
  %Arg_1.42247 = f32[] parameter(1)
  ROOT %add.42248 = f32[] add(%Arg_0.42246, %Arg_1.42247)
}

%region_1630.42249.clone (Arg_0.2100: f32[], Arg_1.1771: f32[]) -> f32[] {
  %Arg_0.2100 = f32[] parameter(0)
  %Arg_1.1771 = f32[] parameter(1)
  ROOT %add.1793 = f32[] add(%Arg_0.2100, %Arg_1.1771)
}

%region_1631.42258 (Arg_0.42255: f32[], Arg_1.42256: f32[]) -> f32[] {
  %Arg_0.42255 = f32[] parameter(0)
  %Arg_1.42256 = f32[] parameter(1)
  ROOT %add.42257 = f32[] add(%Arg_0.42255, %Arg_1.42256)
}

%region_1632.42267 (Arg_0.42264: f32[], Arg_1.42265: f32[]) -> f32[] {
  %Arg_0.42264 = f32[] parameter(0)
  %Arg_1.42265 = f32[] parameter(1)
  ROOT %add.42266 = f32[] add(%Arg_0.42264, %Arg_1.42265)
}

%region_1633.42276 (Arg_0.42273: f32[], Arg_1.42274: f32[]) -> f32[] {
  %Arg_0.42273 = f32[] parameter(0)
  %Arg_1.42274 = f32[] parameter(1)
  ROOT %add.42275 = f32[] add(%Arg_0.42273, %Arg_1.42274)
}

%region_1633.42276.clone (Arg_0.2101: f32[], Arg_1.1772: f32[]) -> f32[] {
  %Arg_0.2101 = f32[] parameter(0)
  %Arg_1.1772 = f32[] parameter(1)
  ROOT %add.1794 = f32[] add(%Arg_0.2101, %Arg_1.1772)
}

%region_1634.42285 (Arg_0.42282: f32[], Arg_1.42283: f32[]) -> f32[] {
  %Arg_0.42282 = f32[] parameter(0)
  %Arg_1.42283 = f32[] parameter(1)
  ROOT %add.42284 = f32[] add(%Arg_0.42282, %Arg_1.42283)
}

%region_1634.42285.clone (Arg_0.2102: f32[], Arg_1.1773: f32[]) -> f32[] {
  %Arg_0.2102 = f32[] parameter(0)
  %Arg_1.1773 = f32[] parameter(1)
  ROOT %add.1795 = f32[] add(%Arg_0.2102, %Arg_1.1773)
}

%region_1635.42294 (Arg_0.42291: f32[], Arg_1.42292: f32[]) -> f32[] {
  %Arg_0.42291 = f32[] parameter(0)
  %Arg_1.42292 = f32[] parameter(1)
  ROOT %add.42293 = f32[] add(%Arg_0.42291, %Arg_1.42292)
}

%region_1635.42294.clone (Arg_0.2103: f32[], Arg_1.1774: f32[]) -> f32[] {
  %Arg_0.2103 = f32[] parameter(0)
  %Arg_1.1774 = f32[] parameter(1)
  ROOT %add.1796 = f32[] add(%Arg_0.2103, %Arg_1.1774)
}

%region_1636.42303 (Arg_0.42300: f32[], Arg_1.42301: f32[]) -> f32[] {
  %Arg_0.42300 = f32[] parameter(0)
  %Arg_1.42301 = f32[] parameter(1)
  ROOT %add.42302 = f32[] add(%Arg_0.42300, %Arg_1.42301)
}

%region_1636.42303.clone (Arg_0.2104: f32[], Arg_1.1775: f32[]) -> f32[] {
  %Arg_0.2104 = f32[] parameter(0)
  %Arg_1.1775 = f32[] parameter(1)
  ROOT %add.1797 = f32[] add(%Arg_0.2104, %Arg_1.1775)
}

%region_1637.42312 (Arg_0.42309: f32[], Arg_1.42310: f32[]) -> f32[] {
  %Arg_0.42309 = f32[] parameter(0)
  %Arg_1.42310 = f32[] parameter(1)
  ROOT %add.42311 = f32[] add(%Arg_0.42309, %Arg_1.42310)
}

%region_1637.42312.clone (Arg_0.2105: f32[], Arg_1.1776: f32[]) -> f32[] {
  %Arg_0.2105 = f32[] parameter(0)
  %Arg_1.1776 = f32[] parameter(1)
  ROOT %add.1798 = f32[] add(%Arg_0.2105, %Arg_1.1776)
}

%region_1638.42321 (Arg_0.42318: f32[], Arg_1.42319: f32[]) -> f32[] {
  %Arg_0.42318 = f32[] parameter(0)
  %Arg_1.42319 = f32[] parameter(1)
  ROOT %add.42320 = f32[] add(%Arg_0.42318, %Arg_1.42319)
}

%region_1638.42321.clone (Arg_0.2106: f32[], Arg_1.1778: f32[]) -> f32[] {
  %Arg_0.2106 = f32[] parameter(0)
  %Arg_1.1778 = f32[] parameter(1)
  ROOT %add.1799 = f32[] add(%Arg_0.2106, %Arg_1.1778)
}

%region_1639.42330 (Arg_0.42327: f32[], Arg_1.42328: f32[]) -> f32[] {
  %Arg_0.42327 = f32[] parameter(0)
  %Arg_1.42328 = f32[] parameter(1)
  ROOT %add.42329 = f32[] add(%Arg_0.42327, %Arg_1.42328)
}

%region_1639.42330.clone (Arg_0.2107: f32[], Arg_1.1779: f32[]) -> f32[] {
  %Arg_0.2107 = f32[] parameter(0)
  %Arg_1.1779 = f32[] parameter(1)
  ROOT %add.1800 = f32[] add(%Arg_0.2107, %Arg_1.1779)
}

%region_1640.42339 (Arg_0.42336: f32[], Arg_1.42337: f32[]) -> f32[] {
  %Arg_0.42336 = f32[] parameter(0)
  %Arg_1.42337 = f32[] parameter(1)
  ROOT %add.42338 = f32[] add(%Arg_0.42336, %Arg_1.42337)
}

%region_1640.42339.clone (Arg_0.2108: f32[], Arg_1.1780: f32[]) -> f32[] {
  %Arg_0.2108 = f32[] parameter(0)
  %Arg_1.1780 = f32[] parameter(1)
  ROOT %add.1801 = f32[] add(%Arg_0.2108, %Arg_1.1780)
}

%region_1641.42348 (Arg_0.42345: f32[], Arg_1.42346: f32[]) -> f32[] {
  %Arg_0.42345 = f32[] parameter(0)
  %Arg_1.42346 = f32[] parameter(1)
  ROOT %add.42347 = f32[] add(%Arg_0.42345, %Arg_1.42346)
}

%region_1642.42357 (Arg_0.42354: f32[], Arg_1.42355: f32[]) -> f32[] {
  %Arg_0.42354 = f32[] parameter(0)
  %Arg_1.42355 = f32[] parameter(1)
  ROOT %add.42356 = f32[] add(%Arg_0.42354, %Arg_1.42355)
}

%region_1643.42366 (Arg_0.42363: f32[], Arg_1.42364: f32[]) -> f32[] {
  %Arg_0.42363 = f32[] parameter(0)
  %Arg_1.42364 = f32[] parameter(1)
  ROOT %add.42365 = f32[] add(%Arg_0.42363, %Arg_1.42364)
}

%region_1643.42366.clone (Arg_0.2109: f32[], Arg_1.1781: f32[]) -> f32[] {
  %Arg_0.2109 = f32[] parameter(0)
  %Arg_1.1781 = f32[] parameter(1)
  ROOT %add.1802 = f32[] add(%Arg_0.2109, %Arg_1.1781)
}

%region_1644.42375 (Arg_0.42372: f32[], Arg_1.42373: f32[]) -> f32[] {
  %Arg_0.42372 = f32[] parameter(0)
  %Arg_1.42373 = f32[] parameter(1)
  ROOT %add.42374 = f32[] add(%Arg_0.42372, %Arg_1.42373)
}

%region_1644.42375.clone (Arg_0.2110: f32[], Arg_1.1782: f32[]) -> f32[] {
  %Arg_0.2110 = f32[] parameter(0)
  %Arg_1.1782 = f32[] parameter(1)
  ROOT %add.1803 = f32[] add(%Arg_0.2110, %Arg_1.1782)
}

%region_1645.42384 (Arg_0.42381: f32[], Arg_1.42382: f32[]) -> f32[] {
  %Arg_0.42381 = f32[] parameter(0)
  %Arg_1.42382 = f32[] parameter(1)
  ROOT %add.42383 = f32[] add(%Arg_0.42381, %Arg_1.42382)
}

%region_1645.42384.clone (Arg_0.2111: f32[], Arg_1.1783: f32[]) -> f32[] {
  %Arg_0.2111 = f32[] parameter(0)
  %Arg_1.1783 = f32[] parameter(1)
  ROOT %add.1804 = f32[] add(%Arg_0.2111, %Arg_1.1783)
}

%region_1646.42393 (Arg_0.42390: f32[], Arg_1.42391: f32[]) -> f32[] {
  %Arg_0.42390 = f32[] parameter(0)
  %Arg_1.42391 = f32[] parameter(1)
  ROOT %add.42392 = f32[] add(%Arg_0.42390, %Arg_1.42391)
}

%region_1646.42393.clone (Arg_0.2112: f32[], Arg_1.1784: f32[]) -> f32[] {
  %Arg_0.2112 = f32[] parameter(0)
  %Arg_1.1784 = f32[] parameter(1)
  ROOT %add.1805 = f32[] add(%Arg_0.2112, %Arg_1.1784)
}

%region_1647.42402 (Arg_0.42399: f32[], Arg_1.42400: f32[]) -> f32[] {
  %Arg_0.42399 = f32[] parameter(0)
  %Arg_1.42400 = f32[] parameter(1)
  ROOT %add.42401 = f32[] add(%Arg_0.42399, %Arg_1.42400)
}

%region_1647.42402.clone (Arg_0.2113: f32[], Arg_1.1785: f32[]) -> f32[] {
  %Arg_0.2113 = f32[] parameter(0)
  %Arg_1.1785 = f32[] parameter(1)
  ROOT %add.1806 = f32[] add(%Arg_0.2113, %Arg_1.1785)
}

%region_1648.42411 (Arg_0.42408: f32[], Arg_1.42409: f32[]) -> f32[] {
  %Arg_0.42408 = f32[] parameter(0)
  %Arg_1.42409 = f32[] parameter(1)
  ROOT %add.42410 = f32[] add(%Arg_0.42408, %Arg_1.42409)
}

%region_1648.42411.clone (Arg_0.2114: f32[], Arg_1.1787: f32[]) -> f32[] {
  %Arg_0.2114 = f32[] parameter(0)
  %Arg_1.1787 = f32[] parameter(1)
  ROOT %add.1807 = f32[] add(%Arg_0.2114, %Arg_1.1787)
}

%region_1649.42420 (Arg_0.42417: f32[], Arg_1.42418: f32[]) -> f32[] {
  %Arg_0.42417 = f32[] parameter(0)
  %Arg_1.42418 = f32[] parameter(1)
  ROOT %add.42419 = f32[] add(%Arg_0.42417, %Arg_1.42418)
}

%region_1649.42420.clone (Arg_0.2115: f32[], Arg_1.1788: f32[]) -> f32[] {
  %Arg_0.2115 = f32[] parameter(0)
  %Arg_1.1788 = f32[] parameter(1)
  ROOT %add.1808 = f32[] add(%Arg_0.2115, %Arg_1.1788)
}

%region_1650.42429 (Arg_0.42426: f32[], Arg_1.42427: f32[]) -> f32[] {
  %Arg_0.42426 = f32[] parameter(0)
  %Arg_1.42427 = f32[] parameter(1)
  ROOT %add.42428 = f32[] add(%Arg_0.42426, %Arg_1.42427)
}

%region_1650.42429.clone (Arg_0.2116: f32[], Arg_1.1789: f32[]) -> f32[] {
  %Arg_0.2116 = f32[] parameter(0)
  %Arg_1.1789 = f32[] parameter(1)
  ROOT %add.1809 = f32[] add(%Arg_0.2116, %Arg_1.1789)
}

%region_1651.42438 (Arg_0.42435: f32[], Arg_1.42436: f32[]) -> f32[] {
  %Arg_0.42435 = f32[] parameter(0)
  %Arg_1.42436 = f32[] parameter(1)
  ROOT %add.42437 = f32[] add(%Arg_0.42435, %Arg_1.42436)
}

%region_1652.42447 (Arg_0.42444: f32[], Arg_1.42445: f32[]) -> f32[] {
  %Arg_0.42444 = f32[] parameter(0)
  %Arg_1.42445 = f32[] parameter(1)
  ROOT %add.42446 = f32[] add(%Arg_0.42444, %Arg_1.42445)
}

%region_1653.42456 (Arg_0.42453: f32[], Arg_1.42454: f32[]) -> f32[] {
  %Arg_0.42453 = f32[] parameter(0)
  %Arg_1.42454 = f32[] parameter(1)
  ROOT %add.42455 = f32[] add(%Arg_0.42453, %Arg_1.42454)
}

%region_1653.42456.clone (Arg_0.2117: f32[], Arg_1.1790: f32[]) -> f32[] {
  %Arg_0.2117 = f32[] parameter(0)
  %Arg_1.1790 = f32[] parameter(1)
  ROOT %add.1810 = f32[] add(%Arg_0.2117, %Arg_1.1790)
}

%region_1654.42465 (Arg_0.42462: f32[], Arg_1.42463: f32[]) -> f32[] {
  %Arg_0.42462 = f32[] parameter(0)
  %Arg_1.42463 = f32[] parameter(1)
  ROOT %add.42464 = f32[] add(%Arg_0.42462, %Arg_1.42463)
}

%region_1654.42465.clone (Arg_0.2118: f32[], Arg_1.1791: f32[]) -> f32[] {
  %Arg_0.2118 = f32[] parameter(0)
  %Arg_1.1791 = f32[] parameter(1)
  ROOT %add.1811 = f32[] add(%Arg_0.2118, %Arg_1.1791)
}

%region_1655.42474 (Arg_0.42471: f32[], Arg_1.42472: f32[]) -> f32[] {
  %Arg_0.42471 = f32[] parameter(0)
  %Arg_1.42472 = f32[] parameter(1)
  ROOT %add.42473 = f32[] add(%Arg_0.42471, %Arg_1.42472)
}

%region_1655.42474.clone (Arg_0.2119: f32[], Arg_1.1792: f32[]) -> f32[] {
  %Arg_0.2119 = f32[] parameter(0)
  %Arg_1.1792 = f32[] parameter(1)
  ROOT %add.1812 = f32[] add(%Arg_0.2119, %Arg_1.1792)
}

%region_1656.42483 (Arg_0.42480: f32[], Arg_1.42481: f32[]) -> f32[] {
  %Arg_0.42480 = f32[] parameter(0)
  %Arg_1.42481 = f32[] parameter(1)
  ROOT %add.42482 = f32[] add(%Arg_0.42480, %Arg_1.42481)
}

%region_1656.42483.clone (Arg_0.2120: f32[], Arg_1.1793: f32[]) -> f32[] {
  %Arg_0.2120 = f32[] parameter(0)
  %Arg_1.1793 = f32[] parameter(1)
  ROOT %add.1813 = f32[] add(%Arg_0.2120, %Arg_1.1793)
}

%region_1657.42492 (Arg_0.42489: f32[], Arg_1.42490: f32[]) -> f32[] {
  %Arg_0.42489 = f32[] parameter(0)
  %Arg_1.42490 = f32[] parameter(1)
  ROOT %add.42491 = f32[] add(%Arg_0.42489, %Arg_1.42490)
}

%region_1657.42492.clone (Arg_0.2121: f32[], Arg_1.1794: f32[]) -> f32[] {
  %Arg_0.2121 = f32[] parameter(0)
  %Arg_1.1794 = f32[] parameter(1)
  ROOT %add.1814 = f32[] add(%Arg_0.2121, %Arg_1.1794)
}

%region_1658.42501 (Arg_0.42498: f32[], Arg_1.42499: f32[]) -> f32[] {
  %Arg_0.42498 = f32[] parameter(0)
  %Arg_1.42499 = f32[] parameter(1)
  ROOT %add.42500 = f32[] add(%Arg_0.42498, %Arg_1.42499)
}

%region_1658.42501.clone (Arg_0.2122: f32[], Arg_1.1795: f32[]) -> f32[] {
  %Arg_0.2122 = f32[] parameter(0)
  %Arg_1.1795 = f32[] parameter(1)
  ROOT %add.1815 = f32[] add(%Arg_0.2122, %Arg_1.1795)
}

%region_1659.42510 (Arg_0.42507: f32[], Arg_1.42508: f32[]) -> f32[] {
  %Arg_0.42507 = f32[] parameter(0)
  %Arg_1.42508 = f32[] parameter(1)
  ROOT %add.42509 = f32[] add(%Arg_0.42507, %Arg_1.42508)
}

%region_1659.42510.clone (Arg_0.2123: f32[], Arg_1.1796: f32[]) -> f32[] {
  %Arg_0.2123 = f32[] parameter(0)
  %Arg_1.1796 = f32[] parameter(1)
  ROOT %add.1816 = f32[] add(%Arg_0.2123, %Arg_1.1796)
}

%region_1660.42519 (Arg_0.42516: f32[], Arg_1.42517: f32[]) -> f32[] {
  %Arg_0.42516 = f32[] parameter(0)
  %Arg_1.42517 = f32[] parameter(1)
  ROOT %add.42518 = f32[] add(%Arg_0.42516, %Arg_1.42517)
}

%region_1660.42519.clone (Arg_0.2124: f32[], Arg_1.1797: f32[]) -> f32[] {
  %Arg_0.2124 = f32[] parameter(0)
  %Arg_1.1797 = f32[] parameter(1)
  ROOT %add.1817 = f32[] add(%Arg_0.2124, %Arg_1.1797)
}

%region_1661.42528 (Arg_0.42525: f32[], Arg_1.42526: f32[]) -> f32[] {
  %Arg_0.42525 = f32[] parameter(0)
  %Arg_1.42526 = f32[] parameter(1)
  ROOT %add.42527 = f32[] add(%Arg_0.42525, %Arg_1.42526)
}

%region_1662.42537 (Arg_0.42534: f32[], Arg_1.42535: f32[]) -> f32[] {
  %Arg_0.42534 = f32[] parameter(0)
  %Arg_1.42535 = f32[] parameter(1)
  ROOT %add.42536 = f32[] add(%Arg_0.42534, %Arg_1.42535)
}

%region_1663.42546 (Arg_0.42543: f32[], Arg_1.42544: f32[]) -> f32[] {
  %Arg_0.42543 = f32[] parameter(0)
  %Arg_1.42544 = f32[] parameter(1)
  ROOT %add.42545 = f32[] add(%Arg_0.42543, %Arg_1.42544)
}

%region_1663.42546.clone (Arg_0.2125: f32[], Arg_1.1798: f32[]) -> f32[] {
  %Arg_0.2125 = f32[] parameter(0)
  %Arg_1.1798 = f32[] parameter(1)
  ROOT %add.1818 = f32[] add(%Arg_0.2125, %Arg_1.1798)
}

%region_1664.42555 (Arg_0.42552: f32[], Arg_1.42553: f32[]) -> f32[] {
  %Arg_0.42552 = f32[] parameter(0)
  %Arg_1.42553 = f32[] parameter(1)
  ROOT %add.42554 = f32[] add(%Arg_0.42552, %Arg_1.42553)
}

%region_1664.42555.clone (Arg_0.2126: f32[], Arg_1.1799: f32[]) -> f32[] {
  %Arg_0.2126 = f32[] parameter(0)
  %Arg_1.1799 = f32[] parameter(1)
  ROOT %add.1820 = f32[] add(%Arg_0.2126, %Arg_1.1799)
}

%region_1665.42564 (Arg_0.42561: f32[], Arg_1.42562: f32[]) -> f32[] {
  %Arg_0.42561 = f32[] parameter(0)
  %Arg_1.42562 = f32[] parameter(1)
  ROOT %add.42563 = f32[] add(%Arg_0.42561, %Arg_1.42562)
}

%region_1665.42564.clone (Arg_0.2127: f32[], Arg_1.1800: f32[]) -> f32[] {
  %Arg_0.2127 = f32[] parameter(0)
  %Arg_1.1800 = f32[] parameter(1)
  ROOT %add.1821 = f32[] add(%Arg_0.2127, %Arg_1.1800)
}

%region_1666.42573 (Arg_0.42570: f32[], Arg_1.42571: f32[]) -> f32[] {
  %Arg_0.42570 = f32[] parameter(0)
  %Arg_1.42571 = f32[] parameter(1)
  ROOT %add.42572 = f32[] add(%Arg_0.42570, %Arg_1.42571)
}

%region_1666.42573.clone (Arg_0.2129: f32[], Arg_1.1801: f32[]) -> f32[] {
  %Arg_0.2129 = f32[] parameter(0)
  %Arg_1.1801 = f32[] parameter(1)
  ROOT %add.1822 = f32[] add(%Arg_0.2129, %Arg_1.1801)
}

%region_1667.42582 (Arg_0.42579: f32[], Arg_1.42580: f32[]) -> f32[] {
  %Arg_0.42579 = f32[] parameter(0)
  %Arg_1.42580 = f32[] parameter(1)
  ROOT %add.42581 = f32[] add(%Arg_0.42579, %Arg_1.42580)
}

%region_1667.42582.clone (Arg_0.2130: f32[], Arg_1.1802: f32[]) -> f32[] {
  %Arg_0.2130 = f32[] parameter(0)
  %Arg_1.1802 = f32[] parameter(1)
  ROOT %add.1823 = f32[] add(%Arg_0.2130, %Arg_1.1802)
}

%region_1668.42591 (Arg_0.42588: f32[], Arg_1.42589: f32[]) -> f32[] {
  %Arg_0.42588 = f32[] parameter(0)
  %Arg_1.42589 = f32[] parameter(1)
  ROOT %add.42590 = f32[] add(%Arg_0.42588, %Arg_1.42589)
}

%region_1668.42591.clone (Arg_0.2131: f32[], Arg_1.1803: f32[]) -> f32[] {
  %Arg_0.2131 = f32[] parameter(0)
  %Arg_1.1803 = f32[] parameter(1)
  ROOT %add.1824 = f32[] add(%Arg_0.2131, %Arg_1.1803)
}

%region_1669.42600 (Arg_0.42597: f32[], Arg_1.42598: f32[]) -> f32[] {
  %Arg_0.42597 = f32[] parameter(0)
  %Arg_1.42598 = f32[] parameter(1)
  ROOT %add.42599 = f32[] add(%Arg_0.42597, %Arg_1.42598)
}

%region_1669.42600.clone (Arg_0.2132: f32[], Arg_1.1804: f32[]) -> f32[] {
  %Arg_0.2132 = f32[] parameter(0)
  %Arg_1.1804 = f32[] parameter(1)
  ROOT %add.1825 = f32[] add(%Arg_0.2132, %Arg_1.1804)
}

%region_1670.42609 (Arg_0.42606: f32[], Arg_1.42607: f32[]) -> f32[] {
  %Arg_0.42606 = f32[] parameter(0)
  %Arg_1.42607 = f32[] parameter(1)
  ROOT %add.42608 = f32[] add(%Arg_0.42606, %Arg_1.42607)
}

%region_1670.42609.clone (Arg_0.2133: f32[], Arg_1.1805: f32[]) -> f32[] {
  %Arg_0.2133 = f32[] parameter(0)
  %Arg_1.1805 = f32[] parameter(1)
  ROOT %add.1827 = f32[] add(%Arg_0.2133, %Arg_1.1805)
}

%region_1671.42618 (Arg_0.42615: f32[], Arg_1.42616: f32[]) -> f32[] {
  %Arg_0.42615 = f32[] parameter(0)
  %Arg_1.42616 = f32[] parameter(1)
  ROOT %add.42617 = f32[] add(%Arg_0.42615, %Arg_1.42616)
}

%region_1672.42627 (Arg_0.42624: f32[], Arg_1.42625: f32[]) -> f32[] {
  %Arg_0.42624 = f32[] parameter(0)
  %Arg_1.42625 = f32[] parameter(1)
  ROOT %add.42626 = f32[] add(%Arg_0.42624, %Arg_1.42625)
}

%region_1673.42636 (Arg_0.42633: f32[], Arg_1.42634: f32[]) -> f32[] {
  %Arg_0.42633 = f32[] parameter(0)
  %Arg_1.42634 = f32[] parameter(1)
  ROOT %add.42635 = f32[] add(%Arg_0.42633, %Arg_1.42634)
}

%region_1673.42636.clone (Arg_0.2134: f32[], Arg_1.1806: f32[]) -> f32[] {
  %Arg_0.2134 = f32[] parameter(0)
  %Arg_1.1806 = f32[] parameter(1)
  ROOT %add.1828 = f32[] add(%Arg_0.2134, %Arg_1.1806)
}

%region_1674.42645 (Arg_0.42642: f32[], Arg_1.42643: f32[]) -> f32[] {
  %Arg_0.42642 = f32[] parameter(0)
  %Arg_1.42643 = f32[] parameter(1)
  ROOT %add.42644 = f32[] add(%Arg_0.42642, %Arg_1.42643)
}

%region_1674.42645.clone (Arg_0.2135: f32[], Arg_1.1807: f32[]) -> f32[] {
  %Arg_0.2135 = f32[] parameter(0)
  %Arg_1.1807 = f32[] parameter(1)
  ROOT %add.1829 = f32[] add(%Arg_0.2135, %Arg_1.1807)
}

%region_1675.42654 (Arg_0.42651: f32[], Arg_1.42652: f32[]) -> f32[] {
  %Arg_0.42651 = f32[] parameter(0)
  %Arg_1.42652 = f32[] parameter(1)
  ROOT %add.42653 = f32[] add(%Arg_0.42651, %Arg_1.42652)
}

%region_1675.42654.clone (Arg_0.2136: f32[], Arg_1.1808: f32[]) -> f32[] {
  %Arg_0.2136 = f32[] parameter(0)
  %Arg_1.1808 = f32[] parameter(1)
  ROOT %add.1830 = f32[] add(%Arg_0.2136, %Arg_1.1808)
}

%region_1676.42663 (Arg_0.42660: f32[], Arg_1.42661: f32[]) -> f32[] {
  %Arg_0.42660 = f32[] parameter(0)
  %Arg_1.42661 = f32[] parameter(1)
  ROOT %add.42662 = f32[] add(%Arg_0.42660, %Arg_1.42661)
}

%region_1676.42663.clone (Arg_0.2137: f32[], Arg_1.1809: f32[]) -> f32[] {
  %Arg_0.2137 = f32[] parameter(0)
  %Arg_1.1809 = f32[] parameter(1)
  ROOT %add.1832 = f32[] add(%Arg_0.2137, %Arg_1.1809)
}

%region_1677.42672 (Arg_0.42669: f32[], Arg_1.42670: f32[]) -> f32[] {
  %Arg_0.42669 = f32[] parameter(0)
  %Arg_1.42670 = f32[] parameter(1)
  ROOT %add.42671 = f32[] add(%Arg_0.42669, %Arg_1.42670)
}

%region_1677.42672.clone (Arg_0.2138: f32[], Arg_1.1810: f32[]) -> f32[] {
  %Arg_0.2138 = f32[] parameter(0)
  %Arg_1.1810 = f32[] parameter(1)
  ROOT %add.1833 = f32[] add(%Arg_0.2138, %Arg_1.1810)
}

%region_1678.42681 (Arg_0.42678: f32[], Arg_1.42679: f32[]) -> f32[] {
  %Arg_0.42678 = f32[] parameter(0)
  %Arg_1.42679 = f32[] parameter(1)
  ROOT %add.42680 = f32[] add(%Arg_0.42678, %Arg_1.42679)
}

%region_1678.42681.clone (Arg_0.2139: f32[], Arg_1.1811: f32[]) -> f32[] {
  %Arg_0.2139 = f32[] parameter(0)
  %Arg_1.1811 = f32[] parameter(1)
  ROOT %add.1834 = f32[] add(%Arg_0.2139, %Arg_1.1811)
}

%region_1679.42690 (Arg_0.42687: f32[], Arg_1.42688: f32[]) -> f32[] {
  %Arg_0.42687 = f32[] parameter(0)
  %Arg_1.42688 = f32[] parameter(1)
  ROOT %add.42689 = f32[] add(%Arg_0.42687, %Arg_1.42688)
}

%region_1679.42690.clone (Arg_0.2140: f32[], Arg_1.1812: f32[]) -> f32[] {
  %Arg_0.2140 = f32[] parameter(0)
  %Arg_1.1812 = f32[] parameter(1)
  ROOT %add.1835 = f32[] add(%Arg_0.2140, %Arg_1.1812)
}

%region_1680.42699 (Arg_0.42696: f32[], Arg_1.42697: f32[]) -> f32[] {
  %Arg_0.42696 = f32[] parameter(0)
  %Arg_1.42697 = f32[] parameter(1)
  ROOT %add.42698 = f32[] add(%Arg_0.42696, %Arg_1.42697)
}

%region_1680.42699.clone (Arg_0.2141: f32[], Arg_1.1813: f32[]) -> f32[] {
  %Arg_0.2141 = f32[] parameter(0)
  %Arg_1.1813 = f32[] parameter(1)
  ROOT %add.1836 = f32[] add(%Arg_0.2141, %Arg_1.1813)
}

%region_1681.42708 (Arg_0.42705: f32[], Arg_1.42706: f32[]) -> f32[] {
  %Arg_0.42705 = f32[] parameter(0)
  %Arg_1.42706 = f32[] parameter(1)
  ROOT %add.42707 = f32[] add(%Arg_0.42705, %Arg_1.42706)
}

%region_1682.42717 (Arg_0.42714: f32[], Arg_1.42715: f32[]) -> f32[] {
  %Arg_0.42714 = f32[] parameter(0)
  %Arg_1.42715 = f32[] parameter(1)
  ROOT %add.42716 = f32[] add(%Arg_0.42714, %Arg_1.42715)
}

%region_1683.42726 (Arg_0.42723: f32[], Arg_1.42724: f32[]) -> f32[] {
  %Arg_0.42723 = f32[] parameter(0)
  %Arg_1.42724 = f32[] parameter(1)
  ROOT %add.42725 = f32[] add(%Arg_0.42723, %Arg_1.42724)
}

%region_1683.42726.clone (Arg_0.2142: f32[], Arg_1.1814: f32[]) -> f32[] {
  %Arg_0.2142 = f32[] parameter(0)
  %Arg_1.1814 = f32[] parameter(1)
  ROOT %add.1837 = f32[] add(%Arg_0.2142, %Arg_1.1814)
}

%region_1684.42735 (Arg_0.42732: f32[], Arg_1.42733: f32[]) -> f32[] {
  %Arg_0.42732 = f32[] parameter(0)
  %Arg_1.42733 = f32[] parameter(1)
  ROOT %add.42734 = f32[] add(%Arg_0.42732, %Arg_1.42733)
}

%region_1684.42735.clone (Arg_0.2143: f32[], Arg_1.1815: f32[]) -> f32[] {
  %Arg_0.2143 = f32[] parameter(0)
  %Arg_1.1815 = f32[] parameter(1)
  ROOT %add.1838 = f32[] add(%Arg_0.2143, %Arg_1.1815)
}

%region_1685.42744 (Arg_0.42741: f32[], Arg_1.42742: f32[]) -> f32[] {
  %Arg_0.42741 = f32[] parameter(0)
  %Arg_1.42742 = f32[] parameter(1)
  ROOT %add.42743 = f32[] add(%Arg_0.42741, %Arg_1.42742)
}

%region_1685.42744.clone (Arg_0.2144: f32[], Arg_1.1816: f32[]) -> f32[] {
  %Arg_0.2144 = f32[] parameter(0)
  %Arg_1.1816 = f32[] parameter(1)
  ROOT %add.1839 = f32[] add(%Arg_0.2144, %Arg_1.1816)
}

%region_1686.42753 (Arg_0.42750: f32[], Arg_1.42751: f32[]) -> f32[] {
  %Arg_0.42750 = f32[] parameter(0)
  %Arg_1.42751 = f32[] parameter(1)
  ROOT %add.42752 = f32[] add(%Arg_0.42750, %Arg_1.42751)
}

%region_1686.42753.clone (Arg_0.2145: f32[], Arg_1.1817: f32[]) -> f32[] {
  %Arg_0.2145 = f32[] parameter(0)
  %Arg_1.1817 = f32[] parameter(1)
  ROOT %add.1840 = f32[] add(%Arg_0.2145, %Arg_1.1817)
}

%region_1687.42762 (Arg_0.42759: f32[], Arg_1.42760: f32[]) -> f32[] {
  %Arg_0.42759 = f32[] parameter(0)
  %Arg_1.42760 = f32[] parameter(1)
  ROOT %add.42761 = f32[] add(%Arg_0.42759, %Arg_1.42760)
}

%region_1687.42762.clone (Arg_0.2146: f32[], Arg_1.1818: f32[]) -> f32[] {
  %Arg_0.2146 = f32[] parameter(0)
  %Arg_1.1818 = f32[] parameter(1)
  ROOT %add.1841 = f32[] add(%Arg_0.2146, %Arg_1.1818)
}

%region_1688.42771 (Arg_0.42768: f32[], Arg_1.42769: f32[]) -> f32[] {
  %Arg_0.42768 = f32[] parameter(0)
  %Arg_1.42769 = f32[] parameter(1)
  ROOT %add.42770 = f32[] add(%Arg_0.42768, %Arg_1.42769)
}

%region_1688.42771.clone (Arg_0.2147: f32[], Arg_1.1819: f32[]) -> f32[] {
  %Arg_0.2147 = f32[] parameter(0)
  %Arg_1.1819 = f32[] parameter(1)
  ROOT %add.1842 = f32[] add(%Arg_0.2147, %Arg_1.1819)
}

%region_1689.42780 (Arg_0.42777: f32[], Arg_1.42778: f32[]) -> f32[] {
  %Arg_0.42777 = f32[] parameter(0)
  %Arg_1.42778 = f32[] parameter(1)
  ROOT %add.42779 = f32[] add(%Arg_0.42777, %Arg_1.42778)
}

%region_1689.42780.clone (Arg_0.2148: f32[], Arg_1.1820: f32[]) -> f32[] {
  %Arg_0.2148 = f32[] parameter(0)
  %Arg_1.1820 = f32[] parameter(1)
  ROOT %add.1843 = f32[] add(%Arg_0.2148, %Arg_1.1820)
}

%region_1690.42789 (Arg_0.42786: f32[], Arg_1.42787: f32[]) -> f32[] {
  %Arg_0.42786 = f32[] parameter(0)
  %Arg_1.42787 = f32[] parameter(1)
  ROOT %add.42788 = f32[] add(%Arg_0.42786, %Arg_1.42787)
}

%region_1690.42789.clone (Arg_0.2149: f32[], Arg_1.1821: f32[]) -> f32[] {
  %Arg_0.2149 = f32[] parameter(0)
  %Arg_1.1821 = f32[] parameter(1)
  ROOT %add.1844 = f32[] add(%Arg_0.2149, %Arg_1.1821)
}

%region_1691.42798 (Arg_0.42795: f32[], Arg_1.42796: f32[]) -> f32[] {
  %Arg_0.42795 = f32[] parameter(0)
  %Arg_1.42796 = f32[] parameter(1)
  ROOT %add.42797 = f32[] add(%Arg_0.42795, %Arg_1.42796)
}

%region_1692.42807 (Arg_0.42804: f32[], Arg_1.42805: f32[]) -> f32[] {
  %Arg_0.42804 = f32[] parameter(0)
  %Arg_1.42805 = f32[] parameter(1)
  ROOT %add.42806 = f32[] add(%Arg_0.42804, %Arg_1.42805)
}

%region_1693.42816 (Arg_0.42813: f32[], Arg_1.42814: f32[]) -> f32[] {
  %Arg_0.42813 = f32[] parameter(0)
  %Arg_1.42814 = f32[] parameter(1)
  ROOT %add.42815 = f32[] add(%Arg_0.42813, %Arg_1.42814)
}

%region_1693.42816.clone (Arg_0.2150: f32[], Arg_1.1822: f32[]) -> f32[] {
  %Arg_0.2150 = f32[] parameter(0)
  %Arg_1.1822 = f32[] parameter(1)
  ROOT %add.1845 = f32[] add(%Arg_0.2150, %Arg_1.1822)
}

%region_1694.42825 (Arg_0.42822: f32[], Arg_1.42823: f32[]) -> f32[] {
  %Arg_0.42822 = f32[] parameter(0)
  %Arg_1.42823 = f32[] parameter(1)
  ROOT %add.42824 = f32[] add(%Arg_0.42822, %Arg_1.42823)
}

%region_1694.42825.clone (Arg_0.2151: f32[], Arg_1.1823: f32[]) -> f32[] {
  %Arg_0.2151 = f32[] parameter(0)
  %Arg_1.1823 = f32[] parameter(1)
  ROOT %add.1846 = f32[] add(%Arg_0.2151, %Arg_1.1823)
}

%region_1695.42834 (Arg_0.42831: f32[], Arg_1.42832: f32[]) -> f32[] {
  %Arg_0.42831 = f32[] parameter(0)
  %Arg_1.42832 = f32[] parameter(1)
  ROOT %add.42833 = f32[] add(%Arg_0.42831, %Arg_1.42832)
}

%region_1695.42834.clone (Arg_0.2152: f32[], Arg_1.1824: f32[]) -> f32[] {
  %Arg_0.2152 = f32[] parameter(0)
  %Arg_1.1824 = f32[] parameter(1)
  ROOT %add.1847 = f32[] add(%Arg_0.2152, %Arg_1.1824)
}

%region_1696.42843 (Arg_0.42840: f32[], Arg_1.42841: f32[]) -> f32[] {
  %Arg_0.42840 = f32[] parameter(0)
  %Arg_1.42841 = f32[] parameter(1)
  ROOT %add.42842 = f32[] add(%Arg_0.42840, %Arg_1.42841)
}

%region_1696.42843.clone (Arg_0.2153: f32[], Arg_1.1826: f32[]) -> f32[] {
  %Arg_0.2153 = f32[] parameter(0)
  %Arg_1.1826 = f32[] parameter(1)
  ROOT %add.1848 = f32[] add(%Arg_0.2153, %Arg_1.1826)
}

%region_1697.42852 (Arg_0.42849: f32[], Arg_1.42850: f32[]) -> f32[] {
  %Arg_0.42849 = f32[] parameter(0)
  %Arg_1.42850 = f32[] parameter(1)
  ROOT %add.42851 = f32[] add(%Arg_0.42849, %Arg_1.42850)
}

%region_1697.42852.clone (Arg_0.2154: f32[], Arg_1.1827: f32[]) -> f32[] {
  %Arg_0.2154 = f32[] parameter(0)
  %Arg_1.1827 = f32[] parameter(1)
  ROOT %add.1849 = f32[] add(%Arg_0.2154, %Arg_1.1827)
}

%region_1698.42861 (Arg_0.42858: f32[], Arg_1.42859: f32[]) -> f32[] {
  %Arg_0.42858 = f32[] parameter(0)
  %Arg_1.42859 = f32[] parameter(1)
  ROOT %add.42860 = f32[] add(%Arg_0.42858, %Arg_1.42859)
}

%region_1698.42861.clone (Arg_0.2155: f32[], Arg_1.1828: f32[]) -> f32[] {
  %Arg_0.2155 = f32[] parameter(0)
  %Arg_1.1828 = f32[] parameter(1)
  ROOT %add.1850 = f32[] add(%Arg_0.2155, %Arg_1.1828)
}

%region_1699.42870 (Arg_0.42867: f32[], Arg_1.42868: f32[]) -> f32[] {
  %Arg_0.42867 = f32[] parameter(0)
  %Arg_1.42868 = f32[] parameter(1)
  ROOT %add.42869 = f32[] add(%Arg_0.42867, %Arg_1.42868)
}

%region_1699.42870.clone (Arg_0.2156: f32[], Arg_1.1829: f32[]) -> f32[] {
  %Arg_0.2156 = f32[] parameter(0)
  %Arg_1.1829 = f32[] parameter(1)
  ROOT %add.1851 = f32[] add(%Arg_0.2156, %Arg_1.1829)
}

%region_1700.42879 (Arg_0.42876: f32[], Arg_1.42877: f32[]) -> f32[] {
  %Arg_0.42876 = f32[] parameter(0)
  %Arg_1.42877 = f32[] parameter(1)
  ROOT %add.42878 = f32[] add(%Arg_0.42876, %Arg_1.42877)
}

%region_1700.42879.clone (Arg_0.2157: f32[], Arg_1.1830: f32[]) -> f32[] {
  %Arg_0.2157 = f32[] parameter(0)
  %Arg_1.1830 = f32[] parameter(1)
  ROOT %add.1852 = f32[] add(%Arg_0.2157, %Arg_1.1830)
}

%region_1701.42888 (Arg_0.42885: f32[], Arg_1.42886: f32[]) -> f32[] {
  %Arg_0.42885 = f32[] parameter(0)
  %Arg_1.42886 = f32[] parameter(1)
  ROOT %add.42887 = f32[] add(%Arg_0.42885, %Arg_1.42886)
}

%region_1702.42897 (Arg_0.42894: f32[], Arg_1.42895: f32[]) -> f32[] {
  %Arg_0.42894 = f32[] parameter(0)
  %Arg_1.42895 = f32[] parameter(1)
  ROOT %add.42896 = f32[] add(%Arg_0.42894, %Arg_1.42895)
}

%region_1703.42906 (Arg_0.42903: f32[], Arg_1.42904: f32[]) -> f32[] {
  %Arg_0.42903 = f32[] parameter(0)
  %Arg_1.42904 = f32[] parameter(1)
  ROOT %add.42905 = f32[] add(%Arg_0.42903, %Arg_1.42904)
}

%region_1703.42906.clone (Arg_0.2158: f32[], Arg_1.1831: f32[]) -> f32[] {
  %Arg_0.2158 = f32[] parameter(0)
  %Arg_1.1831 = f32[] parameter(1)
  ROOT %add.1853 = f32[] add(%Arg_0.2158, %Arg_1.1831)
}

%region_1704.42915 (Arg_0.42912: f32[], Arg_1.42913: f32[]) -> f32[] {
  %Arg_0.42912 = f32[] parameter(0)
  %Arg_1.42913 = f32[] parameter(1)
  ROOT %add.42914 = f32[] add(%Arg_0.42912, %Arg_1.42913)
}

%region_1704.42915.clone (Arg_0.2159: f32[], Arg_1.1832: f32[]) -> f32[] {
  %Arg_0.2159 = f32[] parameter(0)
  %Arg_1.1832 = f32[] parameter(1)
  ROOT %add.1854 = f32[] add(%Arg_0.2159, %Arg_1.1832)
}

%region_1705.42924 (Arg_0.42921: f32[], Arg_1.42922: f32[]) -> f32[] {
  %Arg_0.42921 = f32[] parameter(0)
  %Arg_1.42922 = f32[] parameter(1)
  ROOT %add.42923 = f32[] add(%Arg_0.42921, %Arg_1.42922)
}

%region_1705.42924.clone (Arg_0.2160: f32[], Arg_1.1833: f32[]) -> f32[] {
  %Arg_0.2160 = f32[] parameter(0)
  %Arg_1.1833 = f32[] parameter(1)
  ROOT %add.1855 = f32[] add(%Arg_0.2160, %Arg_1.1833)
}

%region_1706.42933 (Arg_0.42930: f32[], Arg_1.42931: f32[]) -> f32[] {
  %Arg_0.42930 = f32[] parameter(0)
  %Arg_1.42931 = f32[] parameter(1)
  ROOT %add.42932 = f32[] add(%Arg_0.42930, %Arg_1.42931)
}

%region_1706.42933.clone (Arg_0.2161: f32[], Arg_1.1834: f32[]) -> f32[] {
  %Arg_0.2161 = f32[] parameter(0)
  %Arg_1.1834 = f32[] parameter(1)
  ROOT %add.1856 = f32[] add(%Arg_0.2161, %Arg_1.1834)
}

%region_1707.42942 (Arg_0.42939: f32[], Arg_1.42940: f32[]) -> f32[] {
  %Arg_0.42939 = f32[] parameter(0)
  %Arg_1.42940 = f32[] parameter(1)
  ROOT %add.42941 = f32[] add(%Arg_0.42939, %Arg_1.42940)
}

%region_1707.42942.clone (Arg_0.2162: f32[], Arg_1.1835: f32[]) -> f32[] {
  %Arg_0.2162 = f32[] parameter(0)
  %Arg_1.1835 = f32[] parameter(1)
  ROOT %add.1857 = f32[] add(%Arg_0.2162, %Arg_1.1835)
}

%region_1708.42951 (Arg_0.42948: f32[], Arg_1.42949: f32[]) -> f32[] {
  %Arg_0.42948 = f32[] parameter(0)
  %Arg_1.42949 = f32[] parameter(1)
  ROOT %add.42950 = f32[] add(%Arg_0.42948, %Arg_1.42949)
}

%region_1708.42951.clone (Arg_0.2163: f32[], Arg_1.1836: f32[]) -> f32[] {
  %Arg_0.2163 = f32[] parameter(0)
  %Arg_1.1836 = f32[] parameter(1)
  ROOT %add.1858 = f32[] add(%Arg_0.2163, %Arg_1.1836)
}

%region_1709.42960 (Arg_0.42957: f32[], Arg_1.42958: f32[]) -> f32[] {
  %Arg_0.42957 = f32[] parameter(0)
  %Arg_1.42958 = f32[] parameter(1)
  ROOT %add.42959 = f32[] add(%Arg_0.42957, %Arg_1.42958)
}

%region_1709.42960.clone (Arg_0.2164: f32[], Arg_1.1837: f32[]) -> f32[] {
  %Arg_0.2164 = f32[] parameter(0)
  %Arg_1.1837 = f32[] parameter(1)
  ROOT %add.1859 = f32[] add(%Arg_0.2164, %Arg_1.1837)
}

%region_1710.42969 (Arg_0.42966: f32[], Arg_1.42967: f32[]) -> f32[] {
  %Arg_0.42966 = f32[] parameter(0)
  %Arg_1.42967 = f32[] parameter(1)
  ROOT %add.42968 = f32[] add(%Arg_0.42966, %Arg_1.42967)
}

%region_1710.42969.clone (Arg_0.2165: f32[], Arg_1.1838: f32[]) -> f32[] {
  %Arg_0.2165 = f32[] parameter(0)
  %Arg_1.1838 = f32[] parameter(1)
  ROOT %add.1860 = f32[] add(%Arg_0.2165, %Arg_1.1838)
}

%region_1711.42978 (Arg_0.42975: f32[], Arg_1.42976: f32[]) -> f32[] {
  %Arg_0.42975 = f32[] parameter(0)
  %Arg_1.42976 = f32[] parameter(1)
  ROOT %add.42977 = f32[] add(%Arg_0.42975, %Arg_1.42976)
}

%region_1712.42987 (Arg_0.42984: f32[], Arg_1.42985: f32[]) -> f32[] {
  %Arg_0.42984 = f32[] parameter(0)
  %Arg_1.42985 = f32[] parameter(1)
  ROOT %add.42986 = f32[] add(%Arg_0.42984, %Arg_1.42985)
}

%region_1713.42996 (Arg_0.42993: f32[], Arg_1.42994: f32[]) -> f32[] {
  %Arg_0.42993 = f32[] parameter(0)
  %Arg_1.42994 = f32[] parameter(1)
  ROOT %add.42995 = f32[] add(%Arg_0.42993, %Arg_1.42994)
}

%region_1713.42996.clone (Arg_0.2166: f32[], Arg_1.1839: f32[]) -> f32[] {
  %Arg_0.2166 = f32[] parameter(0)
  %Arg_1.1839 = f32[] parameter(1)
  ROOT %add.1861 = f32[] add(%Arg_0.2166, %Arg_1.1839)
}

%region_1714.43005 (Arg_0.43002: f32[], Arg_1.43003: f32[]) -> f32[] {
  %Arg_0.43002 = f32[] parameter(0)
  %Arg_1.43003 = f32[] parameter(1)
  ROOT %add.43004 = f32[] add(%Arg_0.43002, %Arg_1.43003)
}

%region_1714.43005.clone (Arg_0.2167: f32[], Arg_1.1840: f32[]) -> f32[] {
  %Arg_0.2167 = f32[] parameter(0)
  %Arg_1.1840 = f32[] parameter(1)
  ROOT %add.1862 = f32[] add(%Arg_0.2167, %Arg_1.1840)
}

%region_1715.43014 (Arg_0.43011: f32[], Arg_1.43012: f32[]) -> f32[] {
  %Arg_0.43011 = f32[] parameter(0)
  %Arg_1.43012 = f32[] parameter(1)
  ROOT %add.43013 = f32[] add(%Arg_0.43011, %Arg_1.43012)
}

%region_1715.43014.clone (Arg_0.2168: f32[], Arg_1.1841: f32[]) -> f32[] {
  %Arg_0.2168 = f32[] parameter(0)
  %Arg_1.1841 = f32[] parameter(1)
  ROOT %add.1863 = f32[] add(%Arg_0.2168, %Arg_1.1841)
}

%region_1716.43023 (Arg_0.43020: f32[], Arg_1.43021: f32[]) -> f32[] {
  %Arg_0.43020 = f32[] parameter(0)
  %Arg_1.43021 = f32[] parameter(1)
  ROOT %add.43022 = f32[] add(%Arg_0.43020, %Arg_1.43021)
}

%region_1716.43023.clone (Arg_0.2169: f32[], Arg_1.1842: f32[]) -> f32[] {
  %Arg_0.2169 = f32[] parameter(0)
  %Arg_1.1842 = f32[] parameter(1)
  ROOT %add.1864 = f32[] add(%Arg_0.2169, %Arg_1.1842)
}

%region_1717.43032 (Arg_0.43029: f32[], Arg_1.43030: f32[]) -> f32[] {
  %Arg_0.43029 = f32[] parameter(0)
  %Arg_1.43030 = f32[] parameter(1)
  ROOT %add.43031 = f32[] add(%Arg_0.43029, %Arg_1.43030)
}

%region_1717.43032.clone (Arg_0.2170: f32[], Arg_1.1843: f32[]) -> f32[] {
  %Arg_0.2170 = f32[] parameter(0)
  %Arg_1.1843 = f32[] parameter(1)
  ROOT %add.1865 = f32[] add(%Arg_0.2170, %Arg_1.1843)
}

%region_1718.43041 (Arg_0.43038: f32[], Arg_1.43039: f32[]) -> f32[] {
  %Arg_0.43038 = f32[] parameter(0)
  %Arg_1.43039 = f32[] parameter(1)
  ROOT %add.43040 = f32[] add(%Arg_0.43038, %Arg_1.43039)
}

%region_1718.43041.clone (Arg_0.2171: f32[], Arg_1.1844: f32[]) -> f32[] {
  %Arg_0.2171 = f32[] parameter(0)
  %Arg_1.1844 = f32[] parameter(1)
  ROOT %add.1866 = f32[] add(%Arg_0.2171, %Arg_1.1844)
}

%region_1719.43050 (Arg_0.43047: f32[], Arg_1.43048: f32[]) -> f32[] {
  %Arg_0.43047 = f32[] parameter(0)
  %Arg_1.43048 = f32[] parameter(1)
  ROOT %add.43049 = f32[] add(%Arg_0.43047, %Arg_1.43048)
}

%region_1719.43050.clone (Arg_0.2172: f32[], Arg_1.1845: f32[]) -> f32[] {
  %Arg_0.2172 = f32[] parameter(0)
  %Arg_1.1845 = f32[] parameter(1)
  ROOT %add.1867 = f32[] add(%Arg_0.2172, %Arg_1.1845)
}

%region_1720.43059 (Arg_0.43056: f32[], Arg_1.43057: f32[]) -> f32[] {
  %Arg_0.43056 = f32[] parameter(0)
  %Arg_1.43057 = f32[] parameter(1)
  ROOT %add.43058 = f32[] add(%Arg_0.43056, %Arg_1.43057)
}

%region_1720.43059.clone (Arg_0.2173: f32[], Arg_1.1846: f32[]) -> f32[] {
  %Arg_0.2173 = f32[] parameter(0)
  %Arg_1.1846 = f32[] parameter(1)
  ROOT %add.1868 = f32[] add(%Arg_0.2173, %Arg_1.1846)
}

%region_1721.43068 (Arg_0.43065: f32[], Arg_1.43066: f32[]) -> f32[] {
  %Arg_0.43065 = f32[] parameter(0)
  %Arg_1.43066 = f32[] parameter(1)
  ROOT %add.43067 = f32[] add(%Arg_0.43065, %Arg_1.43066)
}

%region_1722.43077 (Arg_0.43074: f32[], Arg_1.43075: f32[]) -> f32[] {
  %Arg_0.43074 = f32[] parameter(0)
  %Arg_1.43075 = f32[] parameter(1)
  ROOT %add.43076 = f32[] add(%Arg_0.43074, %Arg_1.43075)
}

%region_1723.43086 (Arg_0.43083: f32[], Arg_1.43084: f32[]) -> f32[] {
  %Arg_0.43083 = f32[] parameter(0)
  %Arg_1.43084 = f32[] parameter(1)
  ROOT %add.43085 = f32[] add(%Arg_0.43083, %Arg_1.43084)
}

%region_1723.43086.clone (Arg_0.2174: f32[], Arg_1.1847: f32[]) -> f32[] {
  %Arg_0.2174 = f32[] parameter(0)
  %Arg_1.1847 = f32[] parameter(1)
  ROOT %add.1869 = f32[] add(%Arg_0.2174, %Arg_1.1847)
}

%region_1724.43095 (Arg_0.43092: f32[], Arg_1.43093: f32[]) -> f32[] {
  %Arg_0.43092 = f32[] parameter(0)
  %Arg_1.43093 = f32[] parameter(1)
  ROOT %add.43094 = f32[] add(%Arg_0.43092, %Arg_1.43093)
}

%region_1724.43095.clone (Arg_0.2175: f32[], Arg_1.1848: f32[]) -> f32[] {
  %Arg_0.2175 = f32[] parameter(0)
  %Arg_1.1848 = f32[] parameter(1)
  ROOT %add.1870 = f32[] add(%Arg_0.2175, %Arg_1.1848)
}

%region_1725.43104 (Arg_0.43101: f32[], Arg_1.43102: f32[]) -> f32[] {
  %Arg_0.43101 = f32[] parameter(0)
  %Arg_1.43102 = f32[] parameter(1)
  ROOT %add.43103 = f32[] add(%Arg_0.43101, %Arg_1.43102)
}

%region_1725.43104.clone (Arg_0.2176: f32[], Arg_1.1849: f32[]) -> f32[] {
  %Arg_0.2176 = f32[] parameter(0)
  %Arg_1.1849 = f32[] parameter(1)
  ROOT %add.1871 = f32[] add(%Arg_0.2176, %Arg_1.1849)
}

%region_1726.43113 (Arg_0.43110: f32[], Arg_1.43111: f32[]) -> f32[] {
  %Arg_0.43110 = f32[] parameter(0)
  %Arg_1.43111 = f32[] parameter(1)
  ROOT %add.43112 = f32[] add(%Arg_0.43110, %Arg_1.43111)
}

%region_1726.43113.clone (Arg_0.2177: f32[], Arg_1.1850: f32[]) -> f32[] {
  %Arg_0.2177 = f32[] parameter(0)
  %Arg_1.1850 = f32[] parameter(1)
  ROOT %add.1872 = f32[] add(%Arg_0.2177, %Arg_1.1850)
}

%region_1727.43122 (Arg_0.43119: f32[], Arg_1.43120: f32[]) -> f32[] {
  %Arg_0.43119 = f32[] parameter(0)
  %Arg_1.43120 = f32[] parameter(1)
  ROOT %add.43121 = f32[] add(%Arg_0.43119, %Arg_1.43120)
}

%region_1727.43122.clone (Arg_0.2178: f32[], Arg_1.1851: f32[]) -> f32[] {
  %Arg_0.2178 = f32[] parameter(0)
  %Arg_1.1851 = f32[] parameter(1)
  ROOT %add.1873 = f32[] add(%Arg_0.2178, %Arg_1.1851)
}

%region_1728.43131 (Arg_0.43128: f32[], Arg_1.43129: f32[]) -> f32[] {
  %Arg_0.43128 = f32[] parameter(0)
  %Arg_1.43129 = f32[] parameter(1)
  ROOT %add.43130 = f32[] add(%Arg_0.43128, %Arg_1.43129)
}

%region_1728.43131.clone (Arg_0.2179: f32[], Arg_1.1852: f32[]) -> f32[] {
  %Arg_0.2179 = f32[] parameter(0)
  %Arg_1.1852 = f32[] parameter(1)
  ROOT %add.1874 = f32[] add(%Arg_0.2179, %Arg_1.1852)
}

%region_1729.43140 (Arg_0.43137: f32[], Arg_1.43138: f32[]) -> f32[] {
  %Arg_0.43137 = f32[] parameter(0)
  %Arg_1.43138 = f32[] parameter(1)
  ROOT %add.43139 = f32[] add(%Arg_0.43137, %Arg_1.43138)
}

%region_1729.43140.clone (Arg_0.2180: f32[], Arg_1.1853: f32[]) -> f32[] {
  %Arg_0.2180 = f32[] parameter(0)
  %Arg_1.1853 = f32[] parameter(1)
  ROOT %add.1875 = f32[] add(%Arg_0.2180, %Arg_1.1853)
}

%region_1730.43149 (Arg_0.43146: f32[], Arg_1.43147: f32[]) -> f32[] {
  %Arg_0.43146 = f32[] parameter(0)
  %Arg_1.43147 = f32[] parameter(1)
  ROOT %add.43148 = f32[] add(%Arg_0.43146, %Arg_1.43147)
}

%region_1730.43149.clone (Arg_0.2181: f32[], Arg_1.1854: f32[]) -> f32[] {
  %Arg_0.2181 = f32[] parameter(0)
  %Arg_1.1854 = f32[] parameter(1)
  ROOT %add.1876 = f32[] add(%Arg_0.2181, %Arg_1.1854)
}

%region_1731.43158 (Arg_0.43155: f32[], Arg_1.43156: f32[]) -> f32[] {
  %Arg_0.43155 = f32[] parameter(0)
  %Arg_1.43156 = f32[] parameter(1)
  ROOT %add.43157 = f32[] add(%Arg_0.43155, %Arg_1.43156)
}

%region_1732.43167 (Arg_0.43164: f32[], Arg_1.43165: f32[]) -> f32[] {
  %Arg_0.43164 = f32[] parameter(0)
  %Arg_1.43165 = f32[] parameter(1)
  ROOT %add.43166 = f32[] add(%Arg_0.43164, %Arg_1.43165)
}

%region_1733.43176 (Arg_0.43173: f32[], Arg_1.43174: f32[]) -> f32[] {
  %Arg_0.43173 = f32[] parameter(0)
  %Arg_1.43174 = f32[] parameter(1)
  ROOT %add.43175 = f32[] add(%Arg_0.43173, %Arg_1.43174)
}

%region_1733.43176.clone (Arg_0.2182: f32[], Arg_1.1855: f32[]) -> f32[] {
  %Arg_0.2182 = f32[] parameter(0)
  %Arg_1.1855 = f32[] parameter(1)
  ROOT %add.1877 = f32[] add(%Arg_0.2182, %Arg_1.1855)
}

%region_1734.43185 (Arg_0.43182: f32[], Arg_1.43183: f32[]) -> f32[] {
  %Arg_0.43182 = f32[] parameter(0)
  %Arg_1.43183 = f32[] parameter(1)
  ROOT %add.43184 = f32[] add(%Arg_0.43182, %Arg_1.43183)
}

%region_1734.43185.clone (Arg_0.2183: f32[], Arg_1.1856: f32[]) -> f32[] {
  %Arg_0.2183 = f32[] parameter(0)
  %Arg_1.1856 = f32[] parameter(1)
  ROOT %add.1878 = f32[] add(%Arg_0.2183, %Arg_1.1856)
}

%region_1735.43194 (Arg_0.43191: f32[], Arg_1.43192: f32[]) -> f32[] {
  %Arg_0.43191 = f32[] parameter(0)
  %Arg_1.43192 = f32[] parameter(1)
  ROOT %add.43193 = f32[] add(%Arg_0.43191, %Arg_1.43192)
}

%region_1735.43194.clone (Arg_0.2184: f32[], Arg_1.1857: f32[]) -> f32[] {
  %Arg_0.2184 = f32[] parameter(0)
  %Arg_1.1857 = f32[] parameter(1)
  ROOT %add.1879 = f32[] add(%Arg_0.2184, %Arg_1.1857)
}

%region_1736.43203 (Arg_0.43200: f32[], Arg_1.43201: f32[]) -> f32[] {
  %Arg_0.43200 = f32[] parameter(0)
  %Arg_1.43201 = f32[] parameter(1)
  ROOT %add.43202 = f32[] add(%Arg_0.43200, %Arg_1.43201)
}

%region_1736.43203.clone (Arg_0.2185: f32[], Arg_1.1858: f32[]) -> f32[] {
  %Arg_0.2185 = f32[] parameter(0)
  %Arg_1.1858 = f32[] parameter(1)
  ROOT %add.1880 = f32[] add(%Arg_0.2185, %Arg_1.1858)
}

%region_1737.43212 (Arg_0.43209: f32[], Arg_1.43210: f32[]) -> f32[] {
  %Arg_0.43209 = f32[] parameter(0)
  %Arg_1.43210 = f32[] parameter(1)
  ROOT %add.43211 = f32[] add(%Arg_0.43209, %Arg_1.43210)
}

%region_1737.43212.clone (Arg_0.2186: f32[], Arg_1.1859: f32[]) -> f32[] {
  %Arg_0.2186 = f32[] parameter(0)
  %Arg_1.1859 = f32[] parameter(1)
  ROOT %add.1881 = f32[] add(%Arg_0.2186, %Arg_1.1859)
}

%region_1738.43221 (Arg_0.43218: f32[], Arg_1.43219: f32[]) -> f32[] {
  %Arg_0.43218 = f32[] parameter(0)
  %Arg_1.43219 = f32[] parameter(1)
  ROOT %add.43220 = f32[] add(%Arg_0.43218, %Arg_1.43219)
}

%region_1738.43221.clone (Arg_0.2187: f32[], Arg_1.1860: f32[]) -> f32[] {
  %Arg_0.2187 = f32[] parameter(0)
  %Arg_1.1860 = f32[] parameter(1)
  ROOT %add.1882 = f32[] add(%Arg_0.2187, %Arg_1.1860)
}

%region_1739.43230 (Arg_0.43227: f32[], Arg_1.43228: f32[]) -> f32[] {
  %Arg_0.43227 = f32[] parameter(0)
  %Arg_1.43228 = f32[] parameter(1)
  ROOT %add.43229 = f32[] add(%Arg_0.43227, %Arg_1.43228)
}

%region_1739.43230.clone (Arg_0.2188: f32[], Arg_1.1861: f32[]) -> f32[] {
  %Arg_0.2188 = f32[] parameter(0)
  %Arg_1.1861 = f32[] parameter(1)
  ROOT %add.1883 = f32[] add(%Arg_0.2188, %Arg_1.1861)
}

%region_1740.43239 (Arg_0.43236: f32[], Arg_1.43237: f32[]) -> f32[] {
  %Arg_0.43236 = f32[] parameter(0)
  %Arg_1.43237 = f32[] parameter(1)
  ROOT %add.43238 = f32[] add(%Arg_0.43236, %Arg_1.43237)
}

%region_1740.43239.clone (Arg_0.2189: f32[], Arg_1.1862: f32[]) -> f32[] {
  %Arg_0.2189 = f32[] parameter(0)
  %Arg_1.1862 = f32[] parameter(1)
  ROOT %add.1884 = f32[] add(%Arg_0.2189, %Arg_1.1862)
}

%region_1741.43248 (Arg_0.43245: f32[], Arg_1.43246: f32[]) -> f32[] {
  %Arg_0.43245 = f32[] parameter(0)
  %Arg_1.43246 = f32[] parameter(1)
  ROOT %add.43247 = f32[] add(%Arg_0.43245, %Arg_1.43246)
}

%region_1742.43257 (Arg_0.43254: f32[], Arg_1.43255: f32[]) -> f32[] {
  %Arg_0.43254 = f32[] parameter(0)
  %Arg_1.43255 = f32[] parameter(1)
  ROOT %add.43256 = f32[] add(%Arg_0.43254, %Arg_1.43255)
}

%region_1743.43266 (Arg_0.43263: f32[], Arg_1.43264: f32[]) -> f32[] {
  %Arg_0.43263 = f32[] parameter(0)
  %Arg_1.43264 = f32[] parameter(1)
  ROOT %add.43265 = f32[] add(%Arg_0.43263, %Arg_1.43264)
}

%region_1743.43266.clone (Arg_0.2190: f32[], Arg_1.1863: f32[]) -> f32[] {
  %Arg_0.2190 = f32[] parameter(0)
  %Arg_1.1863 = f32[] parameter(1)
  ROOT %add.1885 = f32[] add(%Arg_0.2190, %Arg_1.1863)
}

%region_1744.43275 (Arg_0.43272: f32[], Arg_1.43273: f32[]) -> f32[] {
  %Arg_0.43272 = f32[] parameter(0)
  %Arg_1.43273 = f32[] parameter(1)
  ROOT %add.43274 = f32[] add(%Arg_0.43272, %Arg_1.43273)
}

%region_1744.43275.clone (Arg_0.2191: f32[], Arg_1.1864: f32[]) -> f32[] {
  %Arg_0.2191 = f32[] parameter(0)
  %Arg_1.1864 = f32[] parameter(1)
  ROOT %add.1886 = f32[] add(%Arg_0.2191, %Arg_1.1864)
}

%region_1745.43284 (Arg_0.43281: f32[], Arg_1.43282: f32[]) -> f32[] {
  %Arg_0.43281 = f32[] parameter(0)
  %Arg_1.43282 = f32[] parameter(1)
  ROOT %add.43283 = f32[] add(%Arg_0.43281, %Arg_1.43282)
}

%region_1745.43284.clone (Arg_0.2192: f32[], Arg_1.1865: f32[]) -> f32[] {
  %Arg_0.2192 = f32[] parameter(0)
  %Arg_1.1865 = f32[] parameter(1)
  ROOT %add.1888 = f32[] add(%Arg_0.2192, %Arg_1.1865)
}

%region_1746.43293 (Arg_0.43290: f32[], Arg_1.43291: f32[]) -> f32[] {
  %Arg_0.43290 = f32[] parameter(0)
  %Arg_1.43291 = f32[] parameter(1)
  ROOT %add.43292 = f32[] add(%Arg_0.43290, %Arg_1.43291)
}

%region_1746.43293.clone (Arg_0.2193: f32[], Arg_1.1866: f32[]) -> f32[] {
  %Arg_0.2193 = f32[] parameter(0)
  %Arg_1.1866 = f32[] parameter(1)
  ROOT %add.1889 = f32[] add(%Arg_0.2193, %Arg_1.1866)
}

%region_1747.43302 (Arg_0.43299: f32[], Arg_1.43300: f32[]) -> f32[] {
  %Arg_0.43299 = f32[] parameter(0)
  %Arg_1.43300 = f32[] parameter(1)
  ROOT %add.43301 = f32[] add(%Arg_0.43299, %Arg_1.43300)
}

%region_1747.43302.clone (Arg_0.2194: f32[], Arg_1.1867: f32[]) -> f32[] {
  %Arg_0.2194 = f32[] parameter(0)
  %Arg_1.1867 = f32[] parameter(1)
  ROOT %add.1890 = f32[] add(%Arg_0.2194, %Arg_1.1867)
}

%region_1748.43311 (Arg_0.43308: f32[], Arg_1.43309: f32[]) -> f32[] {
  %Arg_0.43308 = f32[] parameter(0)
  %Arg_1.43309 = f32[] parameter(1)
  ROOT %add.43310 = f32[] add(%Arg_0.43308, %Arg_1.43309)
}

%region_1748.43311.clone (Arg_0.2195: f32[], Arg_1.1868: f32[]) -> f32[] {
  %Arg_0.2195 = f32[] parameter(0)
  %Arg_1.1868 = f32[] parameter(1)
  ROOT %add.1891 = f32[] add(%Arg_0.2195, %Arg_1.1868)
}

%region_1749.43320 (Arg_0.43317: f32[], Arg_1.43318: f32[]) -> f32[] {
  %Arg_0.43317 = f32[] parameter(0)
  %Arg_1.43318 = f32[] parameter(1)
  ROOT %add.43319 = f32[] add(%Arg_0.43317, %Arg_1.43318)
}

%region_1749.43320.clone (Arg_0.2196: f32[], Arg_1.1869: f32[]) -> f32[] {
  %Arg_0.2196 = f32[] parameter(0)
  %Arg_1.1869 = f32[] parameter(1)
  ROOT %add.1892 = f32[] add(%Arg_0.2196, %Arg_1.1869)
}

%region_1750.43329 (Arg_0.43326: f32[], Arg_1.43327: f32[]) -> f32[] {
  %Arg_0.43326 = f32[] parameter(0)
  %Arg_1.43327 = f32[] parameter(1)
  ROOT %add.43328 = f32[] add(%Arg_0.43326, %Arg_1.43327)
}

%region_1750.43329.clone (Arg_0.2197: f32[], Arg_1.1870: f32[]) -> f32[] {
  %Arg_0.2197 = f32[] parameter(0)
  %Arg_1.1870 = f32[] parameter(1)
  ROOT %add.1893 = f32[] add(%Arg_0.2197, %Arg_1.1870)
}

%region_1751.43338 (Arg_0.43335: f32[], Arg_1.43336: f32[]) -> f32[] {
  %Arg_0.43335 = f32[] parameter(0)
  %Arg_1.43336 = f32[] parameter(1)
  ROOT %add.43337 = f32[] add(%Arg_0.43335, %Arg_1.43336)
}

%region_1752.43347 (Arg_0.43344: f32[], Arg_1.43345: f32[]) -> f32[] {
  %Arg_0.43344 = f32[] parameter(0)
  %Arg_1.43345 = f32[] parameter(1)
  ROOT %add.43346 = f32[] add(%Arg_0.43344, %Arg_1.43345)
}

%region_1753.43356 (Arg_0.43353: f32[], Arg_1.43354: f32[]) -> f32[] {
  %Arg_0.43353 = f32[] parameter(0)
  %Arg_1.43354 = f32[] parameter(1)
  ROOT %add.43355 = f32[] add(%Arg_0.43353, %Arg_1.43354)
}

%region_1753.43356.clone (Arg_0.2198: f32[], Arg_1.1871: f32[]) -> f32[] {
  %Arg_0.2198 = f32[] parameter(0)
  %Arg_1.1871 = f32[] parameter(1)
  ROOT %add.1894 = f32[] add(%Arg_0.2198, %Arg_1.1871)
}

%region_1754.43365 (Arg_0.43362: f32[], Arg_1.43363: f32[]) -> f32[] {
  %Arg_0.43362 = f32[] parameter(0)
  %Arg_1.43363 = f32[] parameter(1)
  ROOT %add.43364 = f32[] add(%Arg_0.43362, %Arg_1.43363)
}

%region_1754.43365.clone (Arg_0.2199: f32[], Arg_1.1872: f32[]) -> f32[] {
  %Arg_0.2199 = f32[] parameter(0)
  %Arg_1.1872 = f32[] parameter(1)
  ROOT %add.1895 = f32[] add(%Arg_0.2199, %Arg_1.1872)
}

%region_1755.43374 (Arg_0.43371: f32[], Arg_1.43372: f32[]) -> f32[] {
  %Arg_0.43371 = f32[] parameter(0)
  %Arg_1.43372 = f32[] parameter(1)
  ROOT %add.43373 = f32[] add(%Arg_0.43371, %Arg_1.43372)
}

%region_1755.43374.clone (Arg_0.2200: f32[], Arg_1.1873: f32[]) -> f32[] {
  %Arg_0.2200 = f32[] parameter(0)
  %Arg_1.1873 = f32[] parameter(1)
  ROOT %add.1896 = f32[] add(%Arg_0.2200, %Arg_1.1873)
}

%region_1756.43383 (Arg_0.43380: f32[], Arg_1.43381: f32[]) -> f32[] {
  %Arg_0.43380 = f32[] parameter(0)
  %Arg_1.43381 = f32[] parameter(1)
  ROOT %add.43382 = f32[] add(%Arg_0.43380, %Arg_1.43381)
}

%region_1756.43383.clone (Arg_0.2201: f32[], Arg_1.1874: f32[]) -> f32[] {
  %Arg_0.2201 = f32[] parameter(0)
  %Arg_1.1874 = f32[] parameter(1)
  ROOT %add.1897 = f32[] add(%Arg_0.2201, %Arg_1.1874)
}

%region_1757.43392 (Arg_0.43389: f32[], Arg_1.43390: f32[]) -> f32[] {
  %Arg_0.43389 = f32[] parameter(0)
  %Arg_1.43390 = f32[] parameter(1)
  ROOT %add.43391 = f32[] add(%Arg_0.43389, %Arg_1.43390)
}

%region_1757.43392.clone (Arg_0.2202: f32[], Arg_1.1875: f32[]) -> f32[] {
  %Arg_0.2202 = f32[] parameter(0)
  %Arg_1.1875 = f32[] parameter(1)
  ROOT %add.1898 = f32[] add(%Arg_0.2202, %Arg_1.1875)
}

%region_1758.43401 (Arg_0.43398: f32[], Arg_1.43399: f32[]) -> f32[] {
  %Arg_0.43398 = f32[] parameter(0)
  %Arg_1.43399 = f32[] parameter(1)
  ROOT %add.43400 = f32[] add(%Arg_0.43398, %Arg_1.43399)
}

%region_1758.43401.clone (Arg_0.2203: f32[], Arg_1.1876: f32[]) -> f32[] {
  %Arg_0.2203 = f32[] parameter(0)
  %Arg_1.1876 = f32[] parameter(1)
  ROOT %add.1899 = f32[] add(%Arg_0.2203, %Arg_1.1876)
}

%region_1759.43410 (Arg_0.43407: f32[], Arg_1.43408: f32[]) -> f32[] {
  %Arg_0.43407 = f32[] parameter(0)
  %Arg_1.43408 = f32[] parameter(1)
  ROOT %add.43409 = f32[] add(%Arg_0.43407, %Arg_1.43408)
}

%region_1759.43410.clone (Arg_0.2204: f32[], Arg_1.1877: f32[]) -> f32[] {
  %Arg_0.2204 = f32[] parameter(0)
  %Arg_1.1877 = f32[] parameter(1)
  ROOT %add.1900 = f32[] add(%Arg_0.2204, %Arg_1.1877)
}

%region_1760.43419 (Arg_0.43416: f32[], Arg_1.43417: f32[]) -> f32[] {
  %Arg_0.43416 = f32[] parameter(0)
  %Arg_1.43417 = f32[] parameter(1)
  ROOT %add.43418 = f32[] add(%Arg_0.43416, %Arg_1.43417)
}

%region_1760.43419.clone (Arg_0.2205: f32[], Arg_1.1878: f32[]) -> f32[] {
  %Arg_0.2205 = f32[] parameter(0)
  %Arg_1.1878 = f32[] parameter(1)
  ROOT %add.1901 = f32[] add(%Arg_0.2205, %Arg_1.1878)
}

%region_1761.43428 (Arg_0.43425: f32[], Arg_1.43426: f32[]) -> f32[] {
  %Arg_0.43425 = f32[] parameter(0)
  %Arg_1.43426 = f32[] parameter(1)
  ROOT %add.43427 = f32[] add(%Arg_0.43425, %Arg_1.43426)
}

%region_1762.43437 (Arg_0.43434: f32[], Arg_1.43435: f32[]) -> f32[] {
  %Arg_0.43434 = f32[] parameter(0)
  %Arg_1.43435 = f32[] parameter(1)
  ROOT %add.43436 = f32[] add(%Arg_0.43434, %Arg_1.43435)
}

%region_1763.43446 (Arg_0.43443: f32[], Arg_1.43444: f32[]) -> f32[] {
  %Arg_0.43443 = f32[] parameter(0)
  %Arg_1.43444 = f32[] parameter(1)
  ROOT %add.43445 = f32[] add(%Arg_0.43443, %Arg_1.43444)
}

%region_1763.43446.clone (Arg_0.2206: f32[], Arg_1.1879: f32[]) -> f32[] {
  %Arg_0.2206 = f32[] parameter(0)
  %Arg_1.1879 = f32[] parameter(1)
  ROOT %add.1902 = f32[] add(%Arg_0.2206, %Arg_1.1879)
}

%region_1764.43455 (Arg_0.43452: f32[], Arg_1.43453: f32[]) -> f32[] {
  %Arg_0.43452 = f32[] parameter(0)
  %Arg_1.43453 = f32[] parameter(1)
  ROOT %add.43454 = f32[] add(%Arg_0.43452, %Arg_1.43453)
}

%region_1764.43455.clone (Arg_0.2207: f32[], Arg_1.1880: f32[]) -> f32[] {
  %Arg_0.2207 = f32[] parameter(0)
  %Arg_1.1880 = f32[] parameter(1)
  ROOT %add.1903 = f32[] add(%Arg_0.2207, %Arg_1.1880)
}

%region_1765.43464 (Arg_0.43461: f32[], Arg_1.43462: f32[]) -> f32[] {
  %Arg_0.43461 = f32[] parameter(0)
  %Arg_1.43462 = f32[] parameter(1)
  ROOT %add.43463 = f32[] add(%Arg_0.43461, %Arg_1.43462)
}

%region_1765.43464.clone (Arg_0.2208: f32[], Arg_1.1881: f32[]) -> f32[] {
  %Arg_0.2208 = f32[] parameter(0)
  %Arg_1.1881 = f32[] parameter(1)
  ROOT %add.1904 = f32[] add(%Arg_0.2208, %Arg_1.1881)
}

%region_1766.43473 (Arg_0.43470: f32[], Arg_1.43471: f32[]) -> f32[] {
  %Arg_0.43470 = f32[] parameter(0)
  %Arg_1.43471 = f32[] parameter(1)
  ROOT %add.43472 = f32[] add(%Arg_0.43470, %Arg_1.43471)
}

%region_1766.43473.clone (Arg_0.2209: f32[], Arg_1.1882: f32[]) -> f32[] {
  %Arg_0.2209 = f32[] parameter(0)
  %Arg_1.1882 = f32[] parameter(1)
  ROOT %add.1905 = f32[] add(%Arg_0.2209, %Arg_1.1882)
}

%region_1767.43482 (Arg_0.43479: f32[], Arg_1.43480: f32[]) -> f32[] {
  %Arg_0.43479 = f32[] parameter(0)
  %Arg_1.43480 = f32[] parameter(1)
  ROOT %add.43481 = f32[] add(%Arg_0.43479, %Arg_1.43480)
}

%region_1767.43482.clone (Arg_0.2210: f32[], Arg_1.1883: f32[]) -> f32[] {
  %Arg_0.2210 = f32[] parameter(0)
  %Arg_1.1883 = f32[] parameter(1)
  ROOT %add.1906 = f32[] add(%Arg_0.2210, %Arg_1.1883)
}

%region_1768.43491 (Arg_0.43488: f32[], Arg_1.43489: f32[]) -> f32[] {
  %Arg_0.43488 = f32[] parameter(0)
  %Arg_1.43489 = f32[] parameter(1)
  ROOT %add.43490 = f32[] add(%Arg_0.43488, %Arg_1.43489)
}

%region_1768.43491.clone (Arg_0.2211: f32[], Arg_1.1884: f32[]) -> f32[] {
  %Arg_0.2211 = f32[] parameter(0)
  %Arg_1.1884 = f32[] parameter(1)
  ROOT %add.1907 = f32[] add(%Arg_0.2211, %Arg_1.1884)
}

%region_1769.43500 (Arg_0.43497: f32[], Arg_1.43498: f32[]) -> f32[] {
  %Arg_0.43497 = f32[] parameter(0)
  %Arg_1.43498 = f32[] parameter(1)
  ROOT %add.43499 = f32[] add(%Arg_0.43497, %Arg_1.43498)
}

%region_1769.43500.clone (Arg_0.2212: f32[], Arg_1.1885: f32[]) -> f32[] {
  %Arg_0.2212 = f32[] parameter(0)
  %Arg_1.1885 = f32[] parameter(1)
  ROOT %add.1908 = f32[] add(%Arg_0.2212, %Arg_1.1885)
}

%region_1770.43509 (Arg_0.43506: f32[], Arg_1.43507: f32[]) -> f32[] {
  %Arg_0.43506 = f32[] parameter(0)
  %Arg_1.43507 = f32[] parameter(1)
  ROOT %add.43508 = f32[] add(%Arg_0.43506, %Arg_1.43507)
}

%region_1770.43509.clone (Arg_0.2213: f32[], Arg_1.1886: f32[]) -> f32[] {
  %Arg_0.2213 = f32[] parameter(0)
  %Arg_1.1886 = f32[] parameter(1)
  ROOT %add.1909 = f32[] add(%Arg_0.2213, %Arg_1.1886)
}

%region_1771.43518 (Arg_0.43515: f32[], Arg_1.43516: f32[]) -> f32[] {
  %Arg_0.43515 = f32[] parameter(0)
  %Arg_1.43516 = f32[] parameter(1)
  ROOT %add.43517 = f32[] add(%Arg_0.43515, %Arg_1.43516)
}

%region_1772.43527 (Arg_0.43524: f32[], Arg_1.43525: f32[]) -> f32[] {
  %Arg_0.43524 = f32[] parameter(0)
  %Arg_1.43525 = f32[] parameter(1)
  ROOT %add.43526 = f32[] add(%Arg_0.43524, %Arg_1.43525)
}

%region_1773.43536 (Arg_0.43533: f32[], Arg_1.43534: f32[]) -> f32[] {
  %Arg_0.43533 = f32[] parameter(0)
  %Arg_1.43534 = f32[] parameter(1)
  ROOT %add.43535 = f32[] add(%Arg_0.43533, %Arg_1.43534)
}

%region_1773.43536.clone (Arg_0.2214: f32[], Arg_1.1887: f32[]) -> f32[] {
  %Arg_0.2214 = f32[] parameter(0)
  %Arg_1.1887 = f32[] parameter(1)
  ROOT %add.1910 = f32[] add(%Arg_0.2214, %Arg_1.1887)
}

%region_1774.43545 (Arg_0.43542: f32[], Arg_1.43543: f32[]) -> f32[] {
  %Arg_0.43542 = f32[] parameter(0)
  %Arg_1.43543 = f32[] parameter(1)
  ROOT %add.43544 = f32[] add(%Arg_0.43542, %Arg_1.43543)
}

%region_1774.43545.clone (Arg_0.2215: f32[], Arg_1.1888: f32[]) -> f32[] {
  %Arg_0.2215 = f32[] parameter(0)
  %Arg_1.1888 = f32[] parameter(1)
  ROOT %add.1911 = f32[] add(%Arg_0.2215, %Arg_1.1888)
}

%region_1775.43554 (Arg_0.43551: f32[], Arg_1.43552: f32[]) -> f32[] {
  %Arg_0.43551 = f32[] parameter(0)
  %Arg_1.43552 = f32[] parameter(1)
  ROOT %add.43553 = f32[] add(%Arg_0.43551, %Arg_1.43552)
}

%region_1775.43554.clone (Arg_0.2216: f32[], Arg_1.1889: f32[]) -> f32[] {
  %Arg_0.2216 = f32[] parameter(0)
  %Arg_1.1889 = f32[] parameter(1)
  ROOT %add.1912 = f32[] add(%Arg_0.2216, %Arg_1.1889)
}

%region_1776.43563 (Arg_0.43560: f32[], Arg_1.43561: f32[]) -> f32[] {
  %Arg_0.43560 = f32[] parameter(0)
  %Arg_1.43561 = f32[] parameter(1)
  ROOT %add.43562 = f32[] add(%Arg_0.43560, %Arg_1.43561)
}

%region_1776.43563.clone (Arg_0.2217: f32[], Arg_1.1890: f32[]) -> f32[] {
  %Arg_0.2217 = f32[] parameter(0)
  %Arg_1.1890 = f32[] parameter(1)
  ROOT %add.1913 = f32[] add(%Arg_0.2217, %Arg_1.1890)
}

%region_1777.43572 (Arg_0.43569: f32[], Arg_1.43570: f32[]) -> f32[] {
  %Arg_0.43569 = f32[] parameter(0)
  %Arg_1.43570 = f32[] parameter(1)
  ROOT %add.43571 = f32[] add(%Arg_0.43569, %Arg_1.43570)
}

%region_1777.43572.clone (Arg_0.2218: f32[], Arg_1.1891: f32[]) -> f32[] {
  %Arg_0.2218 = f32[] parameter(0)
  %Arg_1.1891 = f32[] parameter(1)
  ROOT %add.1914 = f32[] add(%Arg_0.2218, %Arg_1.1891)
}

%region_1778.43581 (Arg_0.43578: f32[], Arg_1.43579: f32[]) -> f32[] {
  %Arg_0.43578 = f32[] parameter(0)
  %Arg_1.43579 = f32[] parameter(1)
  ROOT %add.43580 = f32[] add(%Arg_0.43578, %Arg_1.43579)
}

%region_1778.43581.clone (Arg_0.2219: f32[], Arg_1.1892: f32[]) -> f32[] {
  %Arg_0.2219 = f32[] parameter(0)
  %Arg_1.1892 = f32[] parameter(1)
  ROOT %add.1915 = f32[] add(%Arg_0.2219, %Arg_1.1892)
}

%region_1779.43590 (Arg_0.43587: f32[], Arg_1.43588: f32[]) -> f32[] {
  %Arg_0.43587 = f32[] parameter(0)
  %Arg_1.43588 = f32[] parameter(1)
  ROOT %add.43589 = f32[] add(%Arg_0.43587, %Arg_1.43588)
}

%region_1779.43590.clone (Arg_0.2220: f32[], Arg_1.1893: f32[]) -> f32[] {
  %Arg_0.2220 = f32[] parameter(0)
  %Arg_1.1893 = f32[] parameter(1)
  ROOT %add.1916 = f32[] add(%Arg_0.2220, %Arg_1.1893)
}

%region_1780.43599 (Arg_0.43596: f32[], Arg_1.43597: f32[]) -> f32[] {
  %Arg_0.43596 = f32[] parameter(0)
  %Arg_1.43597 = f32[] parameter(1)
  ROOT %add.43598 = f32[] add(%Arg_0.43596, %Arg_1.43597)
}

%region_1780.43599.clone (Arg_0.2221: f32[], Arg_1.1894: f32[]) -> f32[] {
  %Arg_0.2221 = f32[] parameter(0)
  %Arg_1.1894 = f32[] parameter(1)
  ROOT %add.1917 = f32[] add(%Arg_0.2221, %Arg_1.1894)
}

%region_1781.43608 (Arg_0.43605: f32[], Arg_1.43606: f32[]) -> f32[] {
  %Arg_0.43605 = f32[] parameter(0)
  %Arg_1.43606 = f32[] parameter(1)
  ROOT %add.43607 = f32[] add(%Arg_0.43605, %Arg_1.43606)
}

%region_1782.43617 (Arg_0.43614: f32[], Arg_1.43615: f32[]) -> f32[] {
  %Arg_0.43614 = f32[] parameter(0)
  %Arg_1.43615 = f32[] parameter(1)
  ROOT %add.43616 = f32[] add(%Arg_0.43614, %Arg_1.43615)
}

%region_1783.43626 (Arg_0.43623: f32[], Arg_1.43624: f32[]) -> f32[] {
  %Arg_0.43623 = f32[] parameter(0)
  %Arg_1.43624 = f32[] parameter(1)
  ROOT %add.43625 = f32[] add(%Arg_0.43623, %Arg_1.43624)
}

%region_1783.43626.clone (Arg_0.2222: f32[], Arg_1.1895: f32[]) -> f32[] {
  %Arg_0.2222 = f32[] parameter(0)
  %Arg_1.1895 = f32[] parameter(1)
  ROOT %add.1918 = f32[] add(%Arg_0.2222, %Arg_1.1895)
}

%region_1784.43635 (Arg_0.43632: f32[], Arg_1.43633: f32[]) -> f32[] {
  %Arg_0.43632 = f32[] parameter(0)
  %Arg_1.43633 = f32[] parameter(1)
  ROOT %add.43634 = f32[] add(%Arg_0.43632, %Arg_1.43633)
}

%region_1784.43635.clone (Arg_0.2223: f32[], Arg_1.1896: f32[]) -> f32[] {
  %Arg_0.2223 = f32[] parameter(0)
  %Arg_1.1896 = f32[] parameter(1)
  ROOT %add.1919 = f32[] add(%Arg_0.2223, %Arg_1.1896)
}

%region_1785.43644 (Arg_0.43641: f32[], Arg_1.43642: f32[]) -> f32[] {
  %Arg_0.43641 = f32[] parameter(0)
  %Arg_1.43642 = f32[] parameter(1)
  ROOT %add.43643 = f32[] add(%Arg_0.43641, %Arg_1.43642)
}

%region_1785.43644.clone (Arg_0.2224: f32[], Arg_1.1897: f32[]) -> f32[] {
  %Arg_0.2224 = f32[] parameter(0)
  %Arg_1.1897 = f32[] parameter(1)
  ROOT %add.1920 = f32[] add(%Arg_0.2224, %Arg_1.1897)
}

%region_1786.43653 (Arg_0.43650: f32[], Arg_1.43651: f32[]) -> f32[] {
  %Arg_0.43650 = f32[] parameter(0)
  %Arg_1.43651 = f32[] parameter(1)
  ROOT %add.43652 = f32[] add(%Arg_0.43650, %Arg_1.43651)
}

%region_1786.43653.clone (Arg_0.2225: f32[], Arg_1.1898: f32[]) -> f32[] {
  %Arg_0.2225 = f32[] parameter(0)
  %Arg_1.1898 = f32[] parameter(1)
  ROOT %add.1921 = f32[] add(%Arg_0.2225, %Arg_1.1898)
}

%region_1787.43662 (Arg_0.43659: f32[], Arg_1.43660: f32[]) -> f32[] {
  %Arg_0.43659 = f32[] parameter(0)
  %Arg_1.43660 = f32[] parameter(1)
  ROOT %add.43661 = f32[] add(%Arg_0.43659, %Arg_1.43660)
}

%region_1787.43662.clone (Arg_0.2226: f32[], Arg_1.1899: f32[]) -> f32[] {
  %Arg_0.2226 = f32[] parameter(0)
  %Arg_1.1899 = f32[] parameter(1)
  ROOT %add.1922 = f32[] add(%Arg_0.2226, %Arg_1.1899)
}

%region_1788.43671 (Arg_0.43668: f32[], Arg_1.43669: f32[]) -> f32[] {
  %Arg_0.43668 = f32[] parameter(0)
  %Arg_1.43669 = f32[] parameter(1)
  ROOT %add.43670 = f32[] add(%Arg_0.43668, %Arg_1.43669)
}

%region_1788.43671.clone (Arg_0.2227: f32[], Arg_1.1900: f32[]) -> f32[] {
  %Arg_0.2227 = f32[] parameter(0)
  %Arg_1.1900 = f32[] parameter(1)
  ROOT %add.1923 = f32[] add(%Arg_0.2227, %Arg_1.1900)
}

%region_1789.43680 (Arg_0.43677: f32[], Arg_1.43678: f32[]) -> f32[] {
  %Arg_0.43677 = f32[] parameter(0)
  %Arg_1.43678 = f32[] parameter(1)
  ROOT %add.43679 = f32[] add(%Arg_0.43677, %Arg_1.43678)
}

%region_1789.43680.clone (Arg_0.2228: f32[], Arg_1.1901: f32[]) -> f32[] {
  %Arg_0.2228 = f32[] parameter(0)
  %Arg_1.1901 = f32[] parameter(1)
  ROOT %add.1924 = f32[] add(%Arg_0.2228, %Arg_1.1901)
}

%region_1790.43689 (Arg_0.43686: f32[], Arg_1.43687: f32[]) -> f32[] {
  %Arg_0.43686 = f32[] parameter(0)
  %Arg_1.43687 = f32[] parameter(1)
  ROOT %add.43688 = f32[] add(%Arg_0.43686, %Arg_1.43687)
}

%region_1790.43689.clone (Arg_0.2229: f32[], Arg_1.1902: f32[]) -> f32[] {
  %Arg_0.2229 = f32[] parameter(0)
  %Arg_1.1902 = f32[] parameter(1)
  ROOT %add.1925 = f32[] add(%Arg_0.2229, %Arg_1.1902)
}

%region_1791.43698 (Arg_0.43695: f32[], Arg_1.43696: f32[]) -> f32[] {
  %Arg_0.43695 = f32[] parameter(0)
  %Arg_1.43696 = f32[] parameter(1)
  ROOT %add.43697 = f32[] add(%Arg_0.43695, %Arg_1.43696)
}

%region_1792.43707 (Arg_0.43704: f32[], Arg_1.43705: f32[]) -> f32[] {
  %Arg_0.43704 = f32[] parameter(0)
  %Arg_1.43705 = f32[] parameter(1)
  ROOT %add.43706 = f32[] add(%Arg_0.43704, %Arg_1.43705)
}

%region_1793.43716 (Arg_0.43713: f32[], Arg_1.43714: f32[]) -> f32[] {
  %Arg_0.43713 = f32[] parameter(0)
  %Arg_1.43714 = f32[] parameter(1)
  ROOT %add.43715 = f32[] add(%Arg_0.43713, %Arg_1.43714)
}

%region_1793.43716.clone (Arg_0.2230: f32[], Arg_1.1903: f32[]) -> f32[] {
  %Arg_0.2230 = f32[] parameter(0)
  %Arg_1.1903 = f32[] parameter(1)
  ROOT %add.1926 = f32[] add(%Arg_0.2230, %Arg_1.1903)
}

%region_1794.43725 (Arg_0.43722: f32[], Arg_1.43723: f32[]) -> f32[] {
  %Arg_0.43722 = f32[] parameter(0)
  %Arg_1.43723 = f32[] parameter(1)
  ROOT %add.43724 = f32[] add(%Arg_0.43722, %Arg_1.43723)
}

%region_1794.43725.clone (Arg_0.2231: f32[], Arg_1.1904: f32[]) -> f32[] {
  %Arg_0.2231 = f32[] parameter(0)
  %Arg_1.1904 = f32[] parameter(1)
  ROOT %add.1928 = f32[] add(%Arg_0.2231, %Arg_1.1904)
}

%region_1795.43734 (Arg_0.43731: f32[], Arg_1.43732: f32[]) -> f32[] {
  %Arg_0.43731 = f32[] parameter(0)
  %Arg_1.43732 = f32[] parameter(1)
  ROOT %add.43733 = f32[] add(%Arg_0.43731, %Arg_1.43732)
}

%region_1795.43734.clone (Arg_0.2232: f32[], Arg_1.1905: f32[]) -> f32[] {
  %Arg_0.2232 = f32[] parameter(0)
  %Arg_1.1905 = f32[] parameter(1)
  ROOT %add.1929 = f32[] add(%Arg_0.2232, %Arg_1.1905)
}

%region_1796.43743 (Arg_0.43740: f32[], Arg_1.43741: f32[]) -> f32[] {
  %Arg_0.43740 = f32[] parameter(0)
  %Arg_1.43741 = f32[] parameter(1)
  ROOT %add.43742 = f32[] add(%Arg_0.43740, %Arg_1.43741)
}

%region_1796.43743.clone (Arg_0.2233: f32[], Arg_1.1906: f32[]) -> f32[] {
  %Arg_0.2233 = f32[] parameter(0)
  %Arg_1.1906 = f32[] parameter(1)
  ROOT %add.1930 = f32[] add(%Arg_0.2233, %Arg_1.1906)
}

%region_1797.43752 (Arg_0.43749: f32[], Arg_1.43750: f32[]) -> f32[] {
  %Arg_0.43749 = f32[] parameter(0)
  %Arg_1.43750 = f32[] parameter(1)
  ROOT %add.43751 = f32[] add(%Arg_0.43749, %Arg_1.43750)
}

%region_1797.43752.clone (Arg_0.2234: f32[], Arg_1.1907: f32[]) -> f32[] {
  %Arg_0.2234 = f32[] parameter(0)
  %Arg_1.1907 = f32[] parameter(1)
  ROOT %add.1931 = f32[] add(%Arg_0.2234, %Arg_1.1907)
}

%region_1798.43761 (Arg_0.43758: f32[], Arg_1.43759: f32[]) -> f32[] {
  %Arg_0.43758 = f32[] parameter(0)
  %Arg_1.43759 = f32[] parameter(1)
  ROOT %add.43760 = f32[] add(%Arg_0.43758, %Arg_1.43759)
}

%region_1798.43761.clone (Arg_0.2235: f32[], Arg_1.1908: f32[]) -> f32[] {
  %Arg_0.2235 = f32[] parameter(0)
  %Arg_1.1908 = f32[] parameter(1)
  ROOT %add.1932 = f32[] add(%Arg_0.2235, %Arg_1.1908)
}

%region_1799.43770 (Arg_0.43767: f32[], Arg_1.43768: f32[]) -> f32[] {
  %Arg_0.43767 = f32[] parameter(0)
  %Arg_1.43768 = f32[] parameter(1)
  ROOT %add.43769 = f32[] add(%Arg_0.43767, %Arg_1.43768)
}

%region_1799.43770.clone (Arg_0.2236: f32[], Arg_1.1909: f32[]) -> f32[] {
  %Arg_0.2236 = f32[] parameter(0)
  %Arg_1.1909 = f32[] parameter(1)
  ROOT %add.1933 = f32[] add(%Arg_0.2236, %Arg_1.1909)
}

%region_1800.43779 (Arg_0.43776: f32[], Arg_1.43777: f32[]) -> f32[] {
  %Arg_0.43776 = f32[] parameter(0)
  %Arg_1.43777 = f32[] parameter(1)
  ROOT %add.43778 = f32[] add(%Arg_0.43776, %Arg_1.43777)
}

%region_1800.43779.clone (Arg_0.2237: f32[], Arg_1.1910: f32[]) -> f32[] {
  %Arg_0.2237 = f32[] parameter(0)
  %Arg_1.1910 = f32[] parameter(1)
  ROOT %add.1934 = f32[] add(%Arg_0.2237, %Arg_1.1910)
}

%region_1801.43788 (Arg_0.43785: f32[], Arg_1.43786: f32[]) -> f32[] {
  %Arg_0.43785 = f32[] parameter(0)
  %Arg_1.43786 = f32[] parameter(1)
  ROOT %add.43787 = f32[] add(%Arg_0.43785, %Arg_1.43786)
}

%region_1802.43797 (Arg_0.43794: f32[], Arg_1.43795: f32[]) -> f32[] {
  %Arg_0.43794 = f32[] parameter(0)
  %Arg_1.43795 = f32[] parameter(1)
  ROOT %add.43796 = f32[] add(%Arg_0.43794, %Arg_1.43795)
}

%region_1803.43806 (Arg_0.43803: f32[], Arg_1.43804: f32[]) -> f32[] {
  %Arg_0.43803 = f32[] parameter(0)
  %Arg_1.43804 = f32[] parameter(1)
  ROOT %add.43805 = f32[] add(%Arg_0.43803, %Arg_1.43804)
}

%region_1803.43806.clone (Arg_0.2238: f32[], Arg_1.1911: f32[]) -> f32[] {
  %Arg_0.2238 = f32[] parameter(0)
  %Arg_1.1911 = f32[] parameter(1)
  ROOT %add.1935 = f32[] add(%Arg_0.2238, %Arg_1.1911)
}

%region_1804.43815 (Arg_0.43812: f32[], Arg_1.43813: f32[]) -> f32[] {
  %Arg_0.43812 = f32[] parameter(0)
  %Arg_1.43813 = f32[] parameter(1)
  ROOT %add.43814 = f32[] add(%Arg_0.43812, %Arg_1.43813)
}

%region_1804.43815.clone (Arg_0.2239: f32[], Arg_1.1912: f32[]) -> f32[] {
  %Arg_0.2239 = f32[] parameter(0)
  %Arg_1.1912 = f32[] parameter(1)
  ROOT %add.1936 = f32[] add(%Arg_0.2239, %Arg_1.1912)
}

%region_1805.43824 (Arg_0.43821: f32[], Arg_1.43822: f32[]) -> f32[] {
  %Arg_0.43821 = f32[] parameter(0)
  %Arg_1.43822 = f32[] parameter(1)
  ROOT %add.43823 = f32[] add(%Arg_0.43821, %Arg_1.43822)
}

%region_1805.43824.clone (Arg_0.2240: f32[], Arg_1.1913: f32[]) -> f32[] {
  %Arg_0.2240 = f32[] parameter(0)
  %Arg_1.1913 = f32[] parameter(1)
  ROOT %add.1937 = f32[] add(%Arg_0.2240, %Arg_1.1913)
}

%region_1806.43833 (Arg_0.43830: f32[], Arg_1.43831: f32[]) -> f32[] {
  %Arg_0.43830 = f32[] parameter(0)
  %Arg_1.43831 = f32[] parameter(1)
  ROOT %add.43832 = f32[] add(%Arg_0.43830, %Arg_1.43831)
}

%region_1806.43833.clone (Arg_0.2241: f32[], Arg_1.1914: f32[]) -> f32[] {
  %Arg_0.2241 = f32[] parameter(0)
  %Arg_1.1914 = f32[] parameter(1)
  ROOT %add.1938 = f32[] add(%Arg_0.2241, %Arg_1.1914)
}

%region_1807.43842 (Arg_0.43839: f32[], Arg_1.43840: f32[]) -> f32[] {
  %Arg_0.43839 = f32[] parameter(0)
  %Arg_1.43840 = f32[] parameter(1)
  ROOT %add.43841 = f32[] add(%Arg_0.43839, %Arg_1.43840)
}

%region_1807.43842.clone (Arg_0.2242: f32[], Arg_1.1915: f32[]) -> f32[] {
  %Arg_0.2242 = f32[] parameter(0)
  %Arg_1.1915 = f32[] parameter(1)
  ROOT %add.1939 = f32[] add(%Arg_0.2242, %Arg_1.1915)
}

%region_1808.43851 (Arg_0.43848: f32[], Arg_1.43849: f32[]) -> f32[] {
  %Arg_0.43848 = f32[] parameter(0)
  %Arg_1.43849 = f32[] parameter(1)
  ROOT %add.43850 = f32[] add(%Arg_0.43848, %Arg_1.43849)
}

%region_1808.43851.clone (Arg_0.2243: f32[], Arg_1.1916: f32[]) -> f32[] {
  %Arg_0.2243 = f32[] parameter(0)
  %Arg_1.1916 = f32[] parameter(1)
  ROOT %add.1940 = f32[] add(%Arg_0.2243, %Arg_1.1916)
}

%region_356.11008 (Arg_0.11005: f32[], Arg_1.11006: f32[]) -> f32[] {
  %Arg_0.11005 = f32[] parameter(0)
  %Arg_1.11006 = f32[] parameter(1)
  ROOT %add.11007 = f32[] add(%Arg_0.11005, %Arg_1.11006)
}

%region_357.11024 (Arg_0.11021: f32[], Arg_1.11022: f32[]) -> f32[] {
  %Arg_0.11021 = f32[] parameter(0)
  %Arg_1.11022 = f32[] parameter(1)
  ROOT %add.11023 = f32[] add(%Arg_0.11021, %Arg_1.11022)
}

%region_357.11024.clone (Arg_0.2244: f32[], Arg_1.1917: f32[]) -> f32[] {
  %Arg_0.2244 = f32[] parameter(0)
  %Arg_1.1917 = f32[] parameter(1)
  ROOT %add.1941 = f32[] add(%Arg_0.2244, %Arg_1.1917)
}

%region_2132.46768 (Arg_0.46765: f32[], Arg_1.46766: f32[]) -> f32[] {
  %Arg_0.46765 = f32[] parameter(0)
  %Arg_1.46766 = f32[] parameter(1)
  ROOT %add.46767 = f32[] add(%Arg_0.46765, %Arg_1.46766)
}

%region_2133.46776 (Arg_0.46773: f32[], Arg_1.46774: f32[]) -> f32[] {
  %Arg_0.46773 = f32[] parameter(0)
  %Arg_1.46774 = f32[] parameter(1)
  ROOT %add.46775 = f32[] add(%Arg_0.46773, %Arg_1.46774)
}

%region_2133.46776.clone (Arg_0.2245: f32[], Arg_1.1918: f32[]) -> f32[] {
  %Arg_0.2245 = f32[] parameter(0)
  %Arg_1.1918 = f32[] parameter(1)
  ROOT %add.1942 = f32[] add(%Arg_0.2245, %Arg_1.1918)
}

%region_2134.46785 (Arg_0.46782: f32[], Arg_1.46783: f32[]) -> f32[] {
  %Arg_0.46782 = f32[] parameter(0)
  %Arg_1.46783 = f32[] parameter(1)
  ROOT %add.46784 = f32[] add(%Arg_0.46782, %Arg_1.46783)
}

%region_2134.46785.clone (Arg_0.2246: f32[], Arg_1.1919: f32[]) -> f32[] {
  %Arg_0.2246 = f32[] parameter(0)
  %Arg_1.1919 = f32[] parameter(1)
  ROOT %add.1943 = f32[] add(%Arg_0.2246, %Arg_1.1919)
}

%region_2135.46794 (Arg_0.46791: f32[], Arg_1.46792: f32[]) -> f32[] {
  %Arg_0.46791 = f32[] parameter(0)
  %Arg_1.46792 = f32[] parameter(1)
  ROOT %add.46793 = f32[] add(%Arg_0.46791, %Arg_1.46792)
}

%region_2135.46794.clone (Arg_0.2247: f32[], Arg_1.1920: f32[]) -> f32[] {
  %Arg_0.2247 = f32[] parameter(0)
  %Arg_1.1920 = f32[] parameter(1)
  ROOT %add.1944 = f32[] add(%Arg_0.2247, %Arg_1.1920)
}

%region_2136.46803 (Arg_0.46800: f32[], Arg_1.46801: f32[]) -> f32[] {
  %Arg_0.46800 = f32[] parameter(0)
  %Arg_1.46801 = f32[] parameter(1)
  ROOT %add.46802 = f32[] add(%Arg_0.46800, %Arg_1.46801)
}

%region_2136.46803.clone (Arg_0.2248: f32[], Arg_1.1921: f32[]) -> f32[] {
  %Arg_0.2248 = f32[] parameter(0)
  %Arg_1.1921 = f32[] parameter(1)
  ROOT %add.1945 = f32[] add(%Arg_0.2248, %Arg_1.1921)
}

%region_2137.46812 (Arg_0.46809: f32[], Arg_1.46810: f32[]) -> f32[] {
  %Arg_0.46809 = f32[] parameter(0)
  %Arg_1.46810 = f32[] parameter(1)
  ROOT %add.46811 = f32[] add(%Arg_0.46809, %Arg_1.46810)
}

%region_2138.46821 (Arg_0.46818: f32[], Arg_1.46819: f32[]) -> f32[] {
  %Arg_0.46818 = f32[] parameter(0)
  %Arg_1.46819 = f32[] parameter(1)
  ROOT %add.46820 = f32[] add(%Arg_0.46818, %Arg_1.46819)
}

%region_2139.46830 (Arg_0.46827: f32[], Arg_1.46828: f32[]) -> f32[] {
  %Arg_0.46827 = f32[] parameter(0)
  %Arg_1.46828 = f32[] parameter(1)
  ROOT %add.46829 = f32[] add(%Arg_0.46827, %Arg_1.46828)
}

%region_2139.46830.clone (Arg_0.2249: f32[], Arg_1.1922: f32[]) -> f32[] {
  %Arg_0.2249 = f32[] parameter(0)
  %Arg_1.1922 = f32[] parameter(1)
  ROOT %add.1946 = f32[] add(%Arg_0.2249, %Arg_1.1922)
}

%region_2140.46839 (Arg_0.46836: f32[], Arg_1.46837: f32[]) -> f32[] {
  %Arg_0.46836 = f32[] parameter(0)
  %Arg_1.46837 = f32[] parameter(1)
  ROOT %add.46838 = f32[] add(%Arg_0.46836, %Arg_1.46837)
}

%region_2140.46839.clone (Arg_0.2250: f32[], Arg_1.1923: f32[]) -> f32[] {
  %Arg_0.2250 = f32[] parameter(0)
  %Arg_1.1923 = f32[] parameter(1)
  ROOT %add.1947 = f32[] add(%Arg_0.2250, %Arg_1.1923)
}

%region_2141.46848 (Arg_0.46845: f32[], Arg_1.46846: f32[]) -> f32[] {
  %Arg_0.46845 = f32[] parameter(0)
  %Arg_1.46846 = f32[] parameter(1)
  ROOT %add.46847 = f32[] add(%Arg_0.46845, %Arg_1.46846)
}

%region_2141.46848.clone (Arg_0.2251: f32[], Arg_1.1924: f32[]) -> f32[] {
  %Arg_0.2251 = f32[] parameter(0)
  %Arg_1.1924 = f32[] parameter(1)
  ROOT %add.1948 = f32[] add(%Arg_0.2251, %Arg_1.1924)
}

%region_2142.46857 (Arg_0.46854: f32[], Arg_1.46855: f32[]) -> f32[] {
  %Arg_0.46854 = f32[] parameter(0)
  %Arg_1.46855 = f32[] parameter(1)
  ROOT %add.46856 = f32[] add(%Arg_0.46854, %Arg_1.46855)
}

%region_2142.46857.clone (Arg_0.2252: f32[], Arg_1.1925: f32[]) -> f32[] {
  %Arg_0.2252 = f32[] parameter(0)
  %Arg_1.1925 = f32[] parameter(1)
  ROOT %add.1949 = f32[] add(%Arg_0.2252, %Arg_1.1925)
}

%region_2143.46866 (Arg_0.46863: f32[], Arg_1.46864: f32[]) -> f32[] {
  %Arg_0.46863 = f32[] parameter(0)
  %Arg_1.46864 = f32[] parameter(1)
  ROOT %add.46865 = f32[] add(%Arg_0.46863, %Arg_1.46864)
}

%region_2143.46866.clone (Arg_0.2253: f32[], Arg_1.1926: f32[]) -> f32[] {
  %Arg_0.2253 = f32[] parameter(0)
  %Arg_1.1926 = f32[] parameter(1)
  ROOT %add.1950 = f32[] add(%Arg_0.2253, %Arg_1.1926)
}

%region_2144.46875 (Arg_0.46872: f32[], Arg_1.46873: f32[]) -> f32[] {
  %Arg_0.46872 = f32[] parameter(0)
  %Arg_1.46873 = f32[] parameter(1)
  ROOT %add.46874 = f32[] add(%Arg_0.46872, %Arg_1.46873)
}

%region_2144.46875.clone (Arg_0.2254: f32[], Arg_1.1927: f32[]) -> f32[] {
  %Arg_0.2254 = f32[] parameter(0)
  %Arg_1.1927 = f32[] parameter(1)
  ROOT %add.1951 = f32[] add(%Arg_0.2254, %Arg_1.1927)
}

%region_2145.46884 (Arg_0.46881: f32[], Arg_1.46882: f32[]) -> f32[] {
  %Arg_0.46881 = f32[] parameter(0)
  %Arg_1.46882 = f32[] parameter(1)
  ROOT %add.46883 = f32[] add(%Arg_0.46881, %Arg_1.46882)
}

%region_2145.46884.clone (Arg_0.2255: f32[], Arg_1.1928: f32[]) -> f32[] {
  %Arg_0.2255 = f32[] parameter(0)
  %Arg_1.1928 = f32[] parameter(1)
  ROOT %add.1952 = f32[] add(%Arg_0.2255, %Arg_1.1928)
}

%region_2146.46893 (Arg_0.46890: f32[], Arg_1.46891: f32[]) -> f32[] {
  %Arg_0.46890 = f32[] parameter(0)
  %Arg_1.46891 = f32[] parameter(1)
  ROOT %add.46892 = f32[] add(%Arg_0.46890, %Arg_1.46891)
}

%region_2146.46893.clone (Arg_0.2256: f32[], Arg_1.1929: f32[]) -> f32[] {
  %Arg_0.2256 = f32[] parameter(0)
  %Arg_1.1929 = f32[] parameter(1)
  ROOT %add.1953 = f32[] add(%Arg_0.2256, %Arg_1.1929)
}

%region_2147.46902 (Arg_0.46899: f32[], Arg_1.46900: f32[]) -> f32[] {
  %Arg_0.46899 = f32[] parameter(0)
  %Arg_1.46900 = f32[] parameter(1)
  ROOT %add.46901 = f32[] add(%Arg_0.46899, %Arg_1.46900)
}

%region_2148.46911 (Arg_0.46908: f32[], Arg_1.46909: f32[]) -> f32[] {
  %Arg_0.46908 = f32[] parameter(0)
  %Arg_1.46909 = f32[] parameter(1)
  ROOT %add.46910 = f32[] add(%Arg_0.46908, %Arg_1.46909)
}

%region_2149.46920 (Arg_0.46917: f32[], Arg_1.46918: f32[]) -> f32[] {
  %Arg_0.46917 = f32[] parameter(0)
  %Arg_1.46918 = f32[] parameter(1)
  ROOT %add.46919 = f32[] add(%Arg_0.46917, %Arg_1.46918)
}

%region_2149.46920.clone (Arg_0.2257: f32[], Arg_1.1930: f32[]) -> f32[] {
  %Arg_0.2257 = f32[] parameter(0)
  %Arg_1.1930 = f32[] parameter(1)
  ROOT %add.1954 = f32[] add(%Arg_0.2257, %Arg_1.1930)
}

%region_2150.46929 (Arg_0.46926: f32[], Arg_1.46927: f32[]) -> f32[] {
  %Arg_0.46926 = f32[] parameter(0)
  %Arg_1.46927 = f32[] parameter(1)
  ROOT %add.46928 = f32[] add(%Arg_0.46926, %Arg_1.46927)
}

%region_2150.46929.clone (Arg_0.2258: f32[], Arg_1.1931: f32[]) -> f32[] {
  %Arg_0.2258 = f32[] parameter(0)
  %Arg_1.1931 = f32[] parameter(1)
  ROOT %add.1955 = f32[] add(%Arg_0.2258, %Arg_1.1931)
}

%region_2151.46938 (Arg_0.46935: f32[], Arg_1.46936: f32[]) -> f32[] {
  %Arg_0.46935 = f32[] parameter(0)
  %Arg_1.46936 = f32[] parameter(1)
  ROOT %add.46937 = f32[] add(%Arg_0.46935, %Arg_1.46936)
}

%region_2151.46938.clone (Arg_0.2259: f32[], Arg_1.1932: f32[]) -> f32[] {
  %Arg_0.2259 = f32[] parameter(0)
  %Arg_1.1932 = f32[] parameter(1)
  ROOT %add.1956 = f32[] add(%Arg_0.2259, %Arg_1.1932)
}

%region_2152.46947 (Arg_0.46944: f32[], Arg_1.46945: f32[]) -> f32[] {
  %Arg_0.46944 = f32[] parameter(0)
  %Arg_1.46945 = f32[] parameter(1)
  ROOT %add.46946 = f32[] add(%Arg_0.46944, %Arg_1.46945)
}

%region_2152.46947.clone (Arg_0.2261: f32[], Arg_1.1933: f32[]) -> f32[] {
  %Arg_0.2261 = f32[] parameter(0)
  %Arg_1.1933 = f32[] parameter(1)
  ROOT %add.1957 = f32[] add(%Arg_0.2261, %Arg_1.1933)
}

%region_2153.46956 (Arg_0.46953: f32[], Arg_1.46954: f32[]) -> f32[] {
  %Arg_0.46953 = f32[] parameter(0)
  %Arg_1.46954 = f32[] parameter(1)
  ROOT %add.46955 = f32[] add(%Arg_0.46953, %Arg_1.46954)
}

%region_2153.46956.clone (Arg_0.2262: f32[], Arg_1.1934: f32[]) -> f32[] {
  %Arg_0.2262 = f32[] parameter(0)
  %Arg_1.1934 = f32[] parameter(1)
  ROOT %add.1959 = f32[] add(%Arg_0.2262, %Arg_1.1934)
}

%region_2154.46965 (Arg_0.46962: f32[], Arg_1.46963: f32[]) -> f32[] {
  %Arg_0.46962 = f32[] parameter(0)
  %Arg_1.46963 = f32[] parameter(1)
  ROOT %add.46964 = f32[] add(%Arg_0.46962, %Arg_1.46963)
}

%region_2154.46965.clone (Arg_0.2263: f32[], Arg_1.1935: f32[]) -> f32[] {
  %Arg_0.2263 = f32[] parameter(0)
  %Arg_1.1935 = f32[] parameter(1)
  ROOT %add.1960 = f32[] add(%Arg_0.2263, %Arg_1.1935)
}

%region_2155.46974 (Arg_0.46971: f32[], Arg_1.46972: f32[]) -> f32[] {
  %Arg_0.46971 = f32[] parameter(0)
  %Arg_1.46972 = f32[] parameter(1)
  ROOT %add.46973 = f32[] add(%Arg_0.46971, %Arg_1.46972)
}

%region_2155.46974.clone (Arg_0.2264: f32[], Arg_1.1936: f32[]) -> f32[] {
  %Arg_0.2264 = f32[] parameter(0)
  %Arg_1.1936 = f32[] parameter(1)
  ROOT %add.1961 = f32[] add(%Arg_0.2264, %Arg_1.1936)
}

%region_2156.46983 (Arg_0.46980: f32[], Arg_1.46981: f32[]) -> f32[] {
  %Arg_0.46980 = f32[] parameter(0)
  %Arg_1.46981 = f32[] parameter(1)
  ROOT %add.46982 = f32[] add(%Arg_0.46980, %Arg_1.46981)
}

%region_2156.46983.clone (Arg_0.2265: f32[], Arg_1.1937: f32[]) -> f32[] {
  %Arg_0.2265 = f32[] parameter(0)
  %Arg_1.1937 = f32[] parameter(1)
  ROOT %add.1962 = f32[] add(%Arg_0.2265, %Arg_1.1937)
}

%region_2157.46992 (Arg_0.46989: f32[], Arg_1.46990: f32[]) -> f32[] {
  %Arg_0.46989 = f32[] parameter(0)
  %Arg_1.46990 = f32[] parameter(1)
  ROOT %add.46991 = f32[] add(%Arg_0.46989, %Arg_1.46990)
}

%region_2158.47001 (Arg_0.46998: f32[], Arg_1.46999: f32[]) -> f32[] {
  %Arg_0.46998 = f32[] parameter(0)
  %Arg_1.46999 = f32[] parameter(1)
  ROOT %add.47000 = f32[] add(%Arg_0.46998, %Arg_1.46999)
}

%region_2159.47010 (Arg_0.47007: f32[], Arg_1.47008: f32[]) -> f32[] {
  %Arg_0.47007 = f32[] parameter(0)
  %Arg_1.47008 = f32[] parameter(1)
  ROOT %add.47009 = f32[] add(%Arg_0.47007, %Arg_1.47008)
}

%region_2159.47010.clone (Arg_0.2266: f32[], Arg_1.1938: f32[]) -> f32[] {
  %Arg_0.2266 = f32[] parameter(0)
  %Arg_1.1938 = f32[] parameter(1)
  ROOT %add.1963 = f32[] add(%Arg_0.2266, %Arg_1.1938)
}

%region_2160.47019 (Arg_0.47016: f32[], Arg_1.47017: f32[]) -> f32[] {
  %Arg_0.47016 = f32[] parameter(0)
  %Arg_1.47017 = f32[] parameter(1)
  ROOT %add.47018 = f32[] add(%Arg_0.47016, %Arg_1.47017)
}

%region_2160.47019.clone (Arg_0.2267: f32[], Arg_1.1939: f32[]) -> f32[] {
  %Arg_0.2267 = f32[] parameter(0)
  %Arg_1.1939 = f32[] parameter(1)
  ROOT %add.1964 = f32[] add(%Arg_0.2267, %Arg_1.1939)
}

%region_2161.47028 (Arg_0.47025: f32[], Arg_1.47026: f32[]) -> f32[] {
  %Arg_0.47025 = f32[] parameter(0)
  %Arg_1.47026 = f32[] parameter(1)
  ROOT %add.47027 = f32[] add(%Arg_0.47025, %Arg_1.47026)
}

%region_2161.47028.clone (Arg_0.2269: f32[], Arg_1.1940: f32[]) -> f32[] {
  %Arg_0.2269 = f32[] parameter(0)
  %Arg_1.1940 = f32[] parameter(1)
  ROOT %add.1965 = f32[] add(%Arg_0.2269, %Arg_1.1940)
}

%region_2162.47037 (Arg_0.47034: f32[], Arg_1.47035: f32[]) -> f32[] {
  %Arg_0.47034 = f32[] parameter(0)
  %Arg_1.47035 = f32[] parameter(1)
  ROOT %add.47036 = f32[] add(%Arg_0.47034, %Arg_1.47035)
}

%region_2162.47037.clone (Arg_0.2270: f32[], Arg_1.1941: f32[]) -> f32[] {
  %Arg_0.2270 = f32[] parameter(0)
  %Arg_1.1941 = f32[] parameter(1)
  ROOT %add.1967 = f32[] add(%Arg_0.2270, %Arg_1.1941)
}

%region_2163.47046 (Arg_0.47043: f32[], Arg_1.47044: f32[]) -> f32[] {
  %Arg_0.47043 = f32[] parameter(0)
  %Arg_1.47044 = f32[] parameter(1)
  ROOT %add.47045 = f32[] add(%Arg_0.47043, %Arg_1.47044)
}

%region_2163.47046.clone (Arg_0.2271: f32[], Arg_1.1942: f32[]) -> f32[] {
  %Arg_0.2271 = f32[] parameter(0)
  %Arg_1.1942 = f32[] parameter(1)
  ROOT %add.1968 = f32[] add(%Arg_0.2271, %Arg_1.1942)
}

%region_2164.47055 (Arg_0.47052: f32[], Arg_1.47053: f32[]) -> f32[] {
  %Arg_0.47052 = f32[] parameter(0)
  %Arg_1.47053 = f32[] parameter(1)
  ROOT %add.47054 = f32[] add(%Arg_0.47052, %Arg_1.47053)
}

%region_2164.47055.clone (Arg_0.2272: f32[], Arg_1.1943: f32[]) -> f32[] {
  %Arg_0.2272 = f32[] parameter(0)
  %Arg_1.1943 = f32[] parameter(1)
  ROOT %add.1969 = f32[] add(%Arg_0.2272, %Arg_1.1943)
}

%region_2165.47064 (Arg_0.47061: f32[], Arg_1.47062: f32[]) -> f32[] {
  %Arg_0.47061 = f32[] parameter(0)
  %Arg_1.47062 = f32[] parameter(1)
  ROOT %add.47063 = f32[] add(%Arg_0.47061, %Arg_1.47062)
}

%region_2165.47064.clone (Arg_0.2274: f32[], Arg_1.1944: f32[]) -> f32[] {
  %Arg_0.2274 = f32[] parameter(0)
  %Arg_1.1944 = f32[] parameter(1)
  ROOT %add.1970 = f32[] add(%Arg_0.2274, %Arg_1.1944)
}

%region_2166.47073 (Arg_0.47070: f32[], Arg_1.47071: f32[]) -> f32[] {
  %Arg_0.47070 = f32[] parameter(0)
  %Arg_1.47071 = f32[] parameter(1)
  ROOT %add.47072 = f32[] add(%Arg_0.47070, %Arg_1.47071)
}

%region_2166.47073.clone (Arg_0.2275: f32[], Arg_1.1945: f32[]) -> f32[] {
  %Arg_0.2275 = f32[] parameter(0)
  %Arg_1.1945 = f32[] parameter(1)
  ROOT %add.1971 = f32[] add(%Arg_0.2275, %Arg_1.1945)
}

%region_2167.47082 (Arg_0.47079: f32[], Arg_1.47080: f32[]) -> f32[] {
  %Arg_0.47079 = f32[] parameter(0)
  %Arg_1.47080 = f32[] parameter(1)
  ROOT %add.47081 = f32[] add(%Arg_0.47079, %Arg_1.47080)
}

%region_2168.47091 (Arg_0.47088: f32[], Arg_1.47089: f32[]) -> f32[] {
  %Arg_0.47088 = f32[] parameter(0)
  %Arg_1.47089 = f32[] parameter(1)
  ROOT %add.47090 = f32[] add(%Arg_0.47088, %Arg_1.47089)
}

%region_2169.47100 (Arg_0.47097: f32[], Arg_1.47098: f32[]) -> f32[] {
  %Arg_0.47097 = f32[] parameter(0)
  %Arg_1.47098 = f32[] parameter(1)
  ROOT %add.47099 = f32[] add(%Arg_0.47097, %Arg_1.47098)
}

%region_2169.47100.clone (Arg_0.2276: f32[], Arg_1.1946: f32[]) -> f32[] {
  %Arg_0.2276 = f32[] parameter(0)
  %Arg_1.1946 = f32[] parameter(1)
  ROOT %add.1972 = f32[] add(%Arg_0.2276, %Arg_1.1946)
}

%region_2170.47109 (Arg_0.47106: f32[], Arg_1.47107: f32[]) -> f32[] {
  %Arg_0.47106 = f32[] parameter(0)
  %Arg_1.47107 = f32[] parameter(1)
  ROOT %add.47108 = f32[] add(%Arg_0.47106, %Arg_1.47107)
}

%region_2170.47109.clone (Arg_0.2277: f32[], Arg_1.1947: f32[]) -> f32[] {
  %Arg_0.2277 = f32[] parameter(0)
  %Arg_1.1947 = f32[] parameter(1)
  ROOT %add.1973 = f32[] add(%Arg_0.2277, %Arg_1.1947)
}

%region_2171.47118 (Arg_0.47115: f32[], Arg_1.47116: f32[]) -> f32[] {
  %Arg_0.47115 = f32[] parameter(0)
  %Arg_1.47116 = f32[] parameter(1)
  ROOT %add.47117 = f32[] add(%Arg_0.47115, %Arg_1.47116)
}

%region_2171.47118.clone (Arg_0.2278: f32[], Arg_1.1948: f32[]) -> f32[] {
  %Arg_0.2278 = f32[] parameter(0)
  %Arg_1.1948 = f32[] parameter(1)
  ROOT %add.1974 = f32[] add(%Arg_0.2278, %Arg_1.1948)
}

%region_2172.47127 (Arg_0.47124: f32[], Arg_1.47125: f32[]) -> f32[] {
  %Arg_0.47124 = f32[] parameter(0)
  %Arg_1.47125 = f32[] parameter(1)
  ROOT %add.47126 = f32[] add(%Arg_0.47124, %Arg_1.47125)
}

%region_2172.47127.clone (Arg_0.2279: f32[], Arg_1.1949: f32[]) -> f32[] {
  %Arg_0.2279 = f32[] parameter(0)
  %Arg_1.1949 = f32[] parameter(1)
  ROOT %add.1975 = f32[] add(%Arg_0.2279, %Arg_1.1949)
}

%region_2173.47136 (Arg_0.47133: f32[], Arg_1.47134: f32[]) -> f32[] {
  %Arg_0.47133 = f32[] parameter(0)
  %Arg_1.47134 = f32[] parameter(1)
  ROOT %add.47135 = f32[] add(%Arg_0.47133, %Arg_1.47134)
}

%region_2173.47136.clone (Arg_0.2280: f32[], Arg_1.1950: f32[]) -> f32[] {
  %Arg_0.2280 = f32[] parameter(0)
  %Arg_1.1950 = f32[] parameter(1)
  ROOT %add.1976 = f32[] add(%Arg_0.2280, %Arg_1.1950)
}

%region_2174.47145 (Arg_0.47142: f32[], Arg_1.47143: f32[]) -> f32[] {
  %Arg_0.47142 = f32[] parameter(0)
  %Arg_1.47143 = f32[] parameter(1)
  ROOT %add.47144 = f32[] add(%Arg_0.47142, %Arg_1.47143)
}

%region_2174.47145.clone (Arg_0.2281: f32[], Arg_1.1951: f32[]) -> f32[] {
  %Arg_0.2281 = f32[] parameter(0)
  %Arg_1.1951 = f32[] parameter(1)
  ROOT %add.1977 = f32[] add(%Arg_0.2281, %Arg_1.1951)
}

%region_2175.47154 (Arg_0.47151: f32[], Arg_1.47152: f32[]) -> f32[] {
  %Arg_0.47151 = f32[] parameter(0)
  %Arg_1.47152 = f32[] parameter(1)
  ROOT %add.47153 = f32[] add(%Arg_0.47151, %Arg_1.47152)
}

%region_2175.47154.clone (Arg_0.2282: f32[], Arg_1.1952: f32[]) -> f32[] {
  %Arg_0.2282 = f32[] parameter(0)
  %Arg_1.1952 = f32[] parameter(1)
  ROOT %add.1978 = f32[] add(%Arg_0.2282, %Arg_1.1952)
}

%region_2176.47163 (Arg_0.47160: f32[], Arg_1.47161: f32[]) -> f32[] {
  %Arg_0.47160 = f32[] parameter(0)
  %Arg_1.47161 = f32[] parameter(1)
  ROOT %add.47162 = f32[] add(%Arg_0.47160, %Arg_1.47161)
}

%region_2176.47163.clone (Arg_0.2283: f32[], Arg_1.1953: f32[]) -> f32[] {
  %Arg_0.2283 = f32[] parameter(0)
  %Arg_1.1953 = f32[] parameter(1)
  ROOT %add.1979 = f32[] add(%Arg_0.2283, %Arg_1.1953)
}

%region_2177.47172 (Arg_0.47169: f32[], Arg_1.47170: f32[]) -> f32[] {
  %Arg_0.47169 = f32[] parameter(0)
  %Arg_1.47170 = f32[] parameter(1)
  ROOT %add.47171 = f32[] add(%Arg_0.47169, %Arg_1.47170)
}

%region_2178.47181 (Arg_0.47178: f32[], Arg_1.47179: f32[]) -> f32[] {
  %Arg_0.47178 = f32[] parameter(0)
  %Arg_1.47179 = f32[] parameter(1)
  ROOT %add.47180 = f32[] add(%Arg_0.47178, %Arg_1.47179)
}

%region_2179.47190 (Arg_0.47187: f32[], Arg_1.47188: f32[]) -> f32[] {
  %Arg_0.47187 = f32[] parameter(0)
  %Arg_1.47188 = f32[] parameter(1)
  ROOT %add.47189 = f32[] add(%Arg_0.47187, %Arg_1.47188)
}

%region_2179.47190.clone (Arg_0.2284: f32[], Arg_1.1954: f32[]) -> f32[] {
  %Arg_0.2284 = f32[] parameter(0)
  %Arg_1.1954 = f32[] parameter(1)
  ROOT %add.1980 = f32[] add(%Arg_0.2284, %Arg_1.1954)
}

%region_2180.47199 (Arg_0.47196: f32[], Arg_1.47197: f32[]) -> f32[] {
  %Arg_0.47196 = f32[] parameter(0)
  %Arg_1.47197 = f32[] parameter(1)
  ROOT %add.47198 = f32[] add(%Arg_0.47196, %Arg_1.47197)
}

%region_2180.47199.clone (Arg_0.2285: f32[], Arg_1.1955: f32[]) -> f32[] {
  %Arg_0.2285 = f32[] parameter(0)
  %Arg_1.1955 = f32[] parameter(1)
  ROOT %add.1982 = f32[] add(%Arg_0.2285, %Arg_1.1955)
}

%region_2181.47208 (Arg_0.47205: f32[], Arg_1.47206: f32[]) -> f32[] {
  %Arg_0.47205 = f32[] parameter(0)
  %Arg_1.47206 = f32[] parameter(1)
  ROOT %add.47207 = f32[] add(%Arg_0.47205, %Arg_1.47206)
}

%region_2181.47208.clone (Arg_0.2286: f32[], Arg_1.1956: f32[]) -> f32[] {
  %Arg_0.2286 = f32[] parameter(0)
  %Arg_1.1956 = f32[] parameter(1)
  ROOT %add.1983 = f32[] add(%Arg_0.2286, %Arg_1.1956)
}

%region_2182.47217 (Arg_0.47214: f32[], Arg_1.47215: f32[]) -> f32[] {
  %Arg_0.47214 = f32[] parameter(0)
  %Arg_1.47215 = f32[] parameter(1)
  ROOT %add.47216 = f32[] add(%Arg_0.47214, %Arg_1.47215)
}

%region_2182.47217.clone (Arg_0.2287: f32[], Arg_1.1958: f32[]) -> f32[] {
  %Arg_0.2287 = f32[] parameter(0)
  %Arg_1.1958 = f32[] parameter(1)
  ROOT %add.1984 = f32[] add(%Arg_0.2287, %Arg_1.1958)
}

%region_2183.47226 (Arg_0.47223: f32[], Arg_1.47224: f32[]) -> f32[] {
  %Arg_0.47223 = f32[] parameter(0)
  %Arg_1.47224 = f32[] parameter(1)
  ROOT %add.47225 = f32[] add(%Arg_0.47223, %Arg_1.47224)
}

%region_2183.47226.clone (Arg_0.2289: f32[], Arg_1.1959: f32[]) -> f32[] {
  %Arg_0.2289 = f32[] parameter(0)
  %Arg_1.1959 = f32[] parameter(1)
  ROOT %add.1985 = f32[] add(%Arg_0.2289, %Arg_1.1959)
}

%region_2184.47235 (Arg_0.47232: f32[], Arg_1.47233: f32[]) -> f32[] {
  %Arg_0.47232 = f32[] parameter(0)
  %Arg_1.47233 = f32[] parameter(1)
  ROOT %add.47234 = f32[] add(%Arg_0.47232, %Arg_1.47233)
}

%region_2184.47235.clone (Arg_0.2290: f32[], Arg_1.1960: f32[]) -> f32[] {
  %Arg_0.2290 = f32[] parameter(0)
  %Arg_1.1960 = f32[] parameter(1)
  ROOT %add.1987 = f32[] add(%Arg_0.2290, %Arg_1.1960)
}

%region_2185.47244 (Arg_0.47241: f32[], Arg_1.47242: f32[]) -> f32[] {
  %Arg_0.47241 = f32[] parameter(0)
  %Arg_1.47242 = f32[] parameter(1)
  ROOT %add.47243 = f32[] add(%Arg_0.47241, %Arg_1.47242)
}

%region_2185.47244.clone (Arg_0.2291: f32[], Arg_1.1961: f32[]) -> f32[] {
  %Arg_0.2291 = f32[] parameter(0)
  %Arg_1.1961 = f32[] parameter(1)
  ROOT %add.1988 = f32[] add(%Arg_0.2291, %Arg_1.1961)
}

%region_2186.47253 (Arg_0.47250: f32[], Arg_1.47251: f32[]) -> f32[] {
  %Arg_0.47250 = f32[] parameter(0)
  %Arg_1.47251 = f32[] parameter(1)
  ROOT %add.47252 = f32[] add(%Arg_0.47250, %Arg_1.47251)
}

%region_2186.47253.clone (Arg_0.2292: f32[], Arg_1.1962: f32[]) -> f32[] {
  %Arg_0.2292 = f32[] parameter(0)
  %Arg_1.1962 = f32[] parameter(1)
  ROOT %add.1989 = f32[] add(%Arg_0.2292, %Arg_1.1962)
}

%region_2187.47262 (Arg_0.47259: f32[], Arg_1.47260: f32[]) -> f32[] {
  %Arg_0.47259 = f32[] parameter(0)
  %Arg_1.47260 = f32[] parameter(1)
  ROOT %add.47261 = f32[] add(%Arg_0.47259, %Arg_1.47260)
}

%region_2188.47271 (Arg_0.47268: f32[], Arg_1.47269: f32[]) -> f32[] {
  %Arg_0.47268 = f32[] parameter(0)
  %Arg_1.47269 = f32[] parameter(1)
  ROOT %add.47270 = f32[] add(%Arg_0.47268, %Arg_1.47269)
}

%region_2189.47280 (Arg_0.47277: f32[], Arg_1.47278: f32[]) -> f32[] {
  %Arg_0.47277 = f32[] parameter(0)
  %Arg_1.47278 = f32[] parameter(1)
  ROOT %add.47279 = f32[] add(%Arg_0.47277, %Arg_1.47278)
}

%region_2189.47280.clone (Arg_0.2293: f32[], Arg_1.1963: f32[]) -> f32[] {
  %Arg_0.2293 = f32[] parameter(0)
  %Arg_1.1963 = f32[] parameter(1)
  ROOT %add.1990 = f32[] add(%Arg_0.2293, %Arg_1.1963)
}

%region_2190.47289 (Arg_0.47286: f32[], Arg_1.47287: f32[]) -> f32[] {
  %Arg_0.47286 = f32[] parameter(0)
  %Arg_1.47287 = f32[] parameter(1)
  ROOT %add.47288 = f32[] add(%Arg_0.47286, %Arg_1.47287)
}

%region_2190.47289.clone (Arg_0.2294: f32[], Arg_1.1964: f32[]) -> f32[] {
  %Arg_0.2294 = f32[] parameter(0)
  %Arg_1.1964 = f32[] parameter(1)
  ROOT %add.1992 = f32[] add(%Arg_0.2294, %Arg_1.1964)
}

%region_2191.47298 (Arg_0.47295: f32[], Arg_1.47296: f32[]) -> f32[] {
  %Arg_0.47295 = f32[] parameter(0)
  %Arg_1.47296 = f32[] parameter(1)
  ROOT %add.47297 = f32[] add(%Arg_0.47295, %Arg_1.47296)
}

%region_2191.47298.clone (Arg_0.2295: f32[], Arg_1.1966: f32[]) -> f32[] {
  %Arg_0.2295 = f32[] parameter(0)
  %Arg_1.1966 = f32[] parameter(1)
  ROOT %add.1993 = f32[] add(%Arg_0.2295, %Arg_1.1966)
}

%region_2192.47307 (Arg_0.47304: f32[], Arg_1.47305: f32[]) -> f32[] {
  %Arg_0.47304 = f32[] parameter(0)
  %Arg_1.47305 = f32[] parameter(1)
  ROOT %add.47306 = f32[] add(%Arg_0.47304, %Arg_1.47305)
}

%region_2192.47307.clone (Arg_0.2296: f32[], Arg_1.1967: f32[]) -> f32[] {
  %Arg_0.2296 = f32[] parameter(0)
  %Arg_1.1967 = f32[] parameter(1)
  ROOT %add.1994 = f32[] add(%Arg_0.2296, %Arg_1.1967)
}

%region_2193.47316 (Arg_0.47313: f32[], Arg_1.47314: f32[]) -> f32[] {
  %Arg_0.47313 = f32[] parameter(0)
  %Arg_1.47314 = f32[] parameter(1)
  ROOT %add.47315 = f32[] add(%Arg_0.47313, %Arg_1.47314)
}

%region_2193.47316.clone (Arg_0.2297: f32[], Arg_1.1968: f32[]) -> f32[] {
  %Arg_0.2297 = f32[] parameter(0)
  %Arg_1.1968 = f32[] parameter(1)
  ROOT %add.1995 = f32[] add(%Arg_0.2297, %Arg_1.1968)
}

%region_2194.47325 (Arg_0.47322: f32[], Arg_1.47323: f32[]) -> f32[] {
  %Arg_0.47322 = f32[] parameter(0)
  %Arg_1.47323 = f32[] parameter(1)
  ROOT %add.47324 = f32[] add(%Arg_0.47322, %Arg_1.47323)
}

%region_2194.47325.clone (Arg_0.2298: f32[], Arg_1.1969: f32[]) -> f32[] {
  %Arg_0.2298 = f32[] parameter(0)
  %Arg_1.1969 = f32[] parameter(1)
  ROOT %add.1996 = f32[] add(%Arg_0.2298, %Arg_1.1969)
}

%region_2195.47334 (Arg_0.47331: f32[], Arg_1.47332: f32[]) -> f32[] {
  %Arg_0.47331 = f32[] parameter(0)
  %Arg_1.47332 = f32[] parameter(1)
  ROOT %add.47333 = f32[] add(%Arg_0.47331, %Arg_1.47332)
}

%region_2195.47334.clone (Arg_0.2299: f32[], Arg_1.1971: f32[]) -> f32[] {
  %Arg_0.2299 = f32[] parameter(0)
  %Arg_1.1971 = f32[] parameter(1)
  ROOT %add.1997 = f32[] add(%Arg_0.2299, %Arg_1.1971)
}

%region_2196.47343 (Arg_0.47340: f32[], Arg_1.47341: f32[]) -> f32[] {
  %Arg_0.47340 = f32[] parameter(0)
  %Arg_1.47341 = f32[] parameter(1)
  ROOT %add.47342 = f32[] add(%Arg_0.47340, %Arg_1.47341)
}

%region_2196.47343.clone (Arg_0.2300: f32[], Arg_1.1972: f32[]) -> f32[] {
  %Arg_0.2300 = f32[] parameter(0)
  %Arg_1.1972 = f32[] parameter(1)
  ROOT %add.1998 = f32[] add(%Arg_0.2300, %Arg_1.1972)
}

%region_2197.47352 (Arg_0.47349: f32[], Arg_1.47350: f32[]) -> f32[] {
  %Arg_0.47349 = f32[] parameter(0)
  %Arg_1.47350 = f32[] parameter(1)
  ROOT %add.47351 = f32[] add(%Arg_0.47349, %Arg_1.47350)
}

%region_2198.47361 (Arg_0.47358: f32[], Arg_1.47359: f32[]) -> f32[] {
  %Arg_0.47358 = f32[] parameter(0)
  %Arg_1.47359 = f32[] parameter(1)
  ROOT %add.47360 = f32[] add(%Arg_0.47358, %Arg_1.47359)
}

%region_2199.47370 (Arg_0.47367: f32[], Arg_1.47368: f32[]) -> f32[] {
  %Arg_0.47367 = f32[] parameter(0)
  %Arg_1.47368 = f32[] parameter(1)
  ROOT %add.47369 = f32[] add(%Arg_0.47367, %Arg_1.47368)
}

%region_2199.47370.clone (Arg_0.2301: f32[], Arg_1.1973: f32[]) -> f32[] {
  %Arg_0.2301 = f32[] parameter(0)
  %Arg_1.1973 = f32[] parameter(1)
  ROOT %add.1999 = f32[] add(%Arg_0.2301, %Arg_1.1973)
}

%region_2200.47379 (Arg_0.47376: f32[], Arg_1.47377: f32[]) -> f32[] {
  %Arg_0.47376 = f32[] parameter(0)
  %Arg_1.47377 = f32[] parameter(1)
  ROOT %add.47378 = f32[] add(%Arg_0.47376, %Arg_1.47377)
}

%region_2200.47379.clone (Arg_0.2302: f32[], Arg_1.1974: f32[]) -> f32[] {
  %Arg_0.2302 = f32[] parameter(0)
  %Arg_1.1974 = f32[] parameter(1)
  ROOT %add.2000 = f32[] add(%Arg_0.2302, %Arg_1.1974)
}

%region_2201.47388 (Arg_0.47385: f32[], Arg_1.47386: f32[]) -> f32[] {
  %Arg_0.47385 = f32[] parameter(0)
  %Arg_1.47386 = f32[] parameter(1)
  ROOT %add.47387 = f32[] add(%Arg_0.47385, %Arg_1.47386)
}

%region_2201.47388.clone (Arg_0.2303: f32[], Arg_1.1975: f32[]) -> f32[] {
  %Arg_0.2303 = f32[] parameter(0)
  %Arg_1.1975 = f32[] parameter(1)
  ROOT %add.2001 = f32[] add(%Arg_0.2303, %Arg_1.1975)
}

%region_2202.47397 (Arg_0.47394: f32[], Arg_1.47395: f32[]) -> f32[] {
  %Arg_0.47394 = f32[] parameter(0)
  %Arg_1.47395 = f32[] parameter(1)
  ROOT %add.47396 = f32[] add(%Arg_0.47394, %Arg_1.47395)
}

%region_2202.47397.clone (Arg_0.2304: f32[], Arg_1.1976: f32[]) -> f32[] {
  %Arg_0.2304 = f32[] parameter(0)
  %Arg_1.1976 = f32[] parameter(1)
  ROOT %add.2002 = f32[] add(%Arg_0.2304, %Arg_1.1976)
}

%region_2203.47406 (Arg_0.47403: f32[], Arg_1.47404: f32[]) -> f32[] {
  %Arg_0.47403 = f32[] parameter(0)
  %Arg_1.47404 = f32[] parameter(1)
  ROOT %add.47405 = f32[] add(%Arg_0.47403, %Arg_1.47404)
}

%region_2203.47406.clone (Arg_0.2305: f32[], Arg_1.1977: f32[]) -> f32[] {
  %Arg_0.2305 = f32[] parameter(0)
  %Arg_1.1977 = f32[] parameter(1)
  ROOT %add.2003 = f32[] add(%Arg_0.2305, %Arg_1.1977)
}

%region_2204.47415 (Arg_0.47412: f32[], Arg_1.47413: f32[]) -> f32[] {
  %Arg_0.47412 = f32[] parameter(0)
  %Arg_1.47413 = f32[] parameter(1)
  ROOT %add.47414 = f32[] add(%Arg_0.47412, %Arg_1.47413)
}

%region_2204.47415.clone (Arg_0.2306: f32[], Arg_1.1978: f32[]) -> f32[] {
  %Arg_0.2306 = f32[] parameter(0)
  %Arg_1.1978 = f32[] parameter(1)
  ROOT %add.2004 = f32[] add(%Arg_0.2306, %Arg_1.1978)
}

%region_2205.47424 (Arg_0.47421: f32[], Arg_1.47422: f32[]) -> f32[] {
  %Arg_0.47421 = f32[] parameter(0)
  %Arg_1.47422 = f32[] parameter(1)
  ROOT %add.47423 = f32[] add(%Arg_0.47421, %Arg_1.47422)
}

%region_2205.47424.clone (Arg_0.2307: f32[], Arg_1.1979: f32[]) -> f32[] {
  %Arg_0.2307 = f32[] parameter(0)
  %Arg_1.1979 = f32[] parameter(1)
  ROOT %add.2005 = f32[] add(%Arg_0.2307, %Arg_1.1979)
}

%region_2206.47433 (Arg_0.47430: f32[], Arg_1.47431: f32[]) -> f32[] {
  %Arg_0.47430 = f32[] parameter(0)
  %Arg_1.47431 = f32[] parameter(1)
  ROOT %add.47432 = f32[] add(%Arg_0.47430, %Arg_1.47431)
}

%region_2206.47433.clone (Arg_0.2308: f32[], Arg_1.1980: f32[]) -> f32[] {
  %Arg_0.2308 = f32[] parameter(0)
  %Arg_1.1980 = f32[] parameter(1)
  ROOT %add.2006 = f32[] add(%Arg_0.2308, %Arg_1.1980)
}

%region_2207.47442 (Arg_0.47439: f32[], Arg_1.47440: f32[]) -> f32[] {
  %Arg_0.47439 = f32[] parameter(0)
  %Arg_1.47440 = f32[] parameter(1)
  ROOT %add.47441 = f32[] add(%Arg_0.47439, %Arg_1.47440)
}

%region_2208.47451 (Arg_0.47448: f32[], Arg_1.47449: f32[]) -> f32[] {
  %Arg_0.47448 = f32[] parameter(0)
  %Arg_1.47449 = f32[] parameter(1)
  ROOT %add.47450 = f32[] add(%Arg_0.47448, %Arg_1.47449)
}

%region_2209.47460 (Arg_0.47457: f32[], Arg_1.47458: f32[]) -> f32[] {
  %Arg_0.47457 = f32[] parameter(0)
  %Arg_1.47458 = f32[] parameter(1)
  ROOT %add.47459 = f32[] add(%Arg_0.47457, %Arg_1.47458)
}

%region_2209.47460.clone (Arg_0.2309: f32[], Arg_1.1981: f32[]) -> f32[] {
  %Arg_0.2309 = f32[] parameter(0)
  %Arg_1.1981 = f32[] parameter(1)
  ROOT %add.2007 = f32[] add(%Arg_0.2309, %Arg_1.1981)
}

%region_2210.47469 (Arg_0.47466: f32[], Arg_1.47467: f32[]) -> f32[] {
  %Arg_0.47466 = f32[] parameter(0)
  %Arg_1.47467 = f32[] parameter(1)
  ROOT %add.47468 = f32[] add(%Arg_0.47466, %Arg_1.47467)
}

%region_2210.47469.clone (Arg_0.2310: f32[], Arg_1.1982: f32[]) -> f32[] {
  %Arg_0.2310 = f32[] parameter(0)
  %Arg_1.1982 = f32[] parameter(1)
  ROOT %add.2008 = f32[] add(%Arg_0.2310, %Arg_1.1982)
}

%region_2211.47478 (Arg_0.47475: f32[], Arg_1.47476: f32[]) -> f32[] {
  %Arg_0.47475 = f32[] parameter(0)
  %Arg_1.47476 = f32[] parameter(1)
  ROOT %add.47477 = f32[] add(%Arg_0.47475, %Arg_1.47476)
}

%region_2211.47478.clone (Arg_0.2311: f32[], Arg_1.1983: f32[]) -> f32[] {
  %Arg_0.2311 = f32[] parameter(0)
  %Arg_1.1983 = f32[] parameter(1)
  ROOT %add.2009 = f32[] add(%Arg_0.2311, %Arg_1.1983)
}

%region_2212.47487 (Arg_0.47484: f32[], Arg_1.47485: f32[]) -> f32[] {
  %Arg_0.47484 = f32[] parameter(0)
  %Arg_1.47485 = f32[] parameter(1)
  ROOT %add.47486 = f32[] add(%Arg_0.47484, %Arg_1.47485)
}

%region_2212.47487.clone (Arg_0.2312: f32[], Arg_1.1984: f32[]) -> f32[] {
  %Arg_0.2312 = f32[] parameter(0)
  %Arg_1.1984 = f32[] parameter(1)
  ROOT %add.2010 = f32[] add(%Arg_0.2312, %Arg_1.1984)
}

%region_2213.47496 (Arg_0.47493: f32[], Arg_1.47494: f32[]) -> f32[] {
  %Arg_0.47493 = f32[] parameter(0)
  %Arg_1.47494 = f32[] parameter(1)
  ROOT %add.47495 = f32[] add(%Arg_0.47493, %Arg_1.47494)
}

%region_2213.47496.clone (Arg_0.2313: f32[], Arg_1.1986: f32[]) -> f32[] {
  %Arg_0.2313 = f32[] parameter(0)
  %Arg_1.1986 = f32[] parameter(1)
  ROOT %add.2011 = f32[] add(%Arg_0.2313, %Arg_1.1986)
}

%region_2214.47505 (Arg_0.47502: f32[], Arg_1.47503: f32[]) -> f32[] {
  %Arg_0.47502 = f32[] parameter(0)
  %Arg_1.47503 = f32[] parameter(1)
  ROOT %add.47504 = f32[] add(%Arg_0.47502, %Arg_1.47503)
}

%region_2214.47505.clone (Arg_0.2315: f32[], Arg_1.1987: f32[]) -> f32[] {
  %Arg_0.2315 = f32[] parameter(0)
  %Arg_1.1987 = f32[] parameter(1)
  ROOT %add.2012 = f32[] add(%Arg_0.2315, %Arg_1.1987)
}

%region_2215.47514 (Arg_0.47511: f32[], Arg_1.47512: f32[]) -> f32[] {
  %Arg_0.47511 = f32[] parameter(0)
  %Arg_1.47512 = f32[] parameter(1)
  ROOT %add.47513 = f32[] add(%Arg_0.47511, %Arg_1.47512)
}

%region_2215.47514.clone (Arg_0.2316: f32[], Arg_1.1988: f32[]) -> f32[] {
  %Arg_0.2316 = f32[] parameter(0)
  %Arg_1.1988 = f32[] parameter(1)
  ROOT %add.2013 = f32[] add(%Arg_0.2316, %Arg_1.1988)
}

%region_2216.47523 (Arg_0.47520: f32[], Arg_1.47521: f32[]) -> f32[] {
  %Arg_0.47520 = f32[] parameter(0)
  %Arg_1.47521 = f32[] parameter(1)
  ROOT %add.47522 = f32[] add(%Arg_0.47520, %Arg_1.47521)
}

%region_2216.47523.clone (Arg_0.2317: f32[], Arg_1.1989: f32[]) -> f32[] {
  %Arg_0.2317 = f32[] parameter(0)
  %Arg_1.1989 = f32[] parameter(1)
  ROOT %add.2014 = f32[] add(%Arg_0.2317, %Arg_1.1989)
}

%region_2217.47532 (Arg_0.47529: f32[], Arg_1.47530: f32[]) -> f32[] {
  %Arg_0.47529 = f32[] parameter(0)
  %Arg_1.47530 = f32[] parameter(1)
  ROOT %add.47531 = f32[] add(%Arg_0.47529, %Arg_1.47530)
}

%region_2218.47541 (Arg_0.47538: f32[], Arg_1.47539: f32[]) -> f32[] {
  %Arg_0.47538 = f32[] parameter(0)
  %Arg_1.47539 = f32[] parameter(1)
  ROOT %add.47540 = f32[] add(%Arg_0.47538, %Arg_1.47539)
}

%region_2219.47550 (Arg_0.47547: f32[], Arg_1.47548: f32[]) -> f32[] {
  %Arg_0.47547 = f32[] parameter(0)
  %Arg_1.47548 = f32[] parameter(1)
  ROOT %add.47549 = f32[] add(%Arg_0.47547, %Arg_1.47548)
}

%region_2219.47550.clone (Arg_0.2318: f32[], Arg_1.1990: f32[]) -> f32[] {
  %Arg_0.2318 = f32[] parameter(0)
  %Arg_1.1990 = f32[] parameter(1)
  ROOT %add.2015 = f32[] add(%Arg_0.2318, %Arg_1.1990)
}

%region_2220.47559 (Arg_0.47556: f32[], Arg_1.47557: f32[]) -> f32[] {
  %Arg_0.47556 = f32[] parameter(0)
  %Arg_1.47557 = f32[] parameter(1)
  ROOT %add.47558 = f32[] add(%Arg_0.47556, %Arg_1.47557)
}

%region_2220.47559.clone (Arg_0.2319: f32[], Arg_1.1991: f32[]) -> f32[] {
  %Arg_0.2319 = f32[] parameter(0)
  %Arg_1.1991 = f32[] parameter(1)
  ROOT %add.2016 = f32[] add(%Arg_0.2319, %Arg_1.1991)
}

%region_2221.47568 (Arg_0.47565: f32[], Arg_1.47566: f32[]) -> f32[] {
  %Arg_0.47565 = f32[] parameter(0)
  %Arg_1.47566 = f32[] parameter(1)
  ROOT %add.47567 = f32[] add(%Arg_0.47565, %Arg_1.47566)
}

%region_2221.47568.clone (Arg_0.2320: f32[], Arg_1.1992: f32[]) -> f32[] {
  %Arg_0.2320 = f32[] parameter(0)
  %Arg_1.1992 = f32[] parameter(1)
  ROOT %add.2017 = f32[] add(%Arg_0.2320, %Arg_1.1992)
}

%region_2222.47577 (Arg_0.47574: f32[], Arg_1.47575: f32[]) -> f32[] {
  %Arg_0.47574 = f32[] parameter(0)
  %Arg_1.47575 = f32[] parameter(1)
  ROOT %add.47576 = f32[] add(%Arg_0.47574, %Arg_1.47575)
}

%region_2222.47577.clone (Arg_0.2321: f32[], Arg_1.1993: f32[]) -> f32[] {
  %Arg_0.2321 = f32[] parameter(0)
  %Arg_1.1993 = f32[] parameter(1)
  ROOT %add.2018 = f32[] add(%Arg_0.2321, %Arg_1.1993)
}

%region_2223.47586 (Arg_0.47583: f32[], Arg_1.47584: f32[]) -> f32[] {
  %Arg_0.47583 = f32[] parameter(0)
  %Arg_1.47584 = f32[] parameter(1)
  ROOT %add.47585 = f32[] add(%Arg_0.47583, %Arg_1.47584)
}

%region_2223.47586.clone (Arg_0.2322: f32[], Arg_1.1994: f32[]) -> f32[] {
  %Arg_0.2322 = f32[] parameter(0)
  %Arg_1.1994 = f32[] parameter(1)
  ROOT %add.2019 = f32[] add(%Arg_0.2322, %Arg_1.1994)
}

%region_2224.47595 (Arg_0.47592: f32[], Arg_1.47593: f32[]) -> f32[] {
  %Arg_0.47592 = f32[] parameter(0)
  %Arg_1.47593 = f32[] parameter(1)
  ROOT %add.47594 = f32[] add(%Arg_0.47592, %Arg_1.47593)
}

%region_2224.47595.clone (Arg_0.2323: f32[], Arg_1.1995: f32[]) -> f32[] {
  %Arg_0.2323 = f32[] parameter(0)
  %Arg_1.1995 = f32[] parameter(1)
  ROOT %add.2020 = f32[] add(%Arg_0.2323, %Arg_1.1995)
}

%region_2225.47604 (Arg_0.47601: f32[], Arg_1.47602: f32[]) -> f32[] {
  %Arg_0.47601 = f32[] parameter(0)
  %Arg_1.47602 = f32[] parameter(1)
  ROOT %add.47603 = f32[] add(%Arg_0.47601, %Arg_1.47602)
}

%region_2225.47604.clone (Arg_0.2324: f32[], Arg_1.1996: f32[]) -> f32[] {
  %Arg_0.2324 = f32[] parameter(0)
  %Arg_1.1996 = f32[] parameter(1)
  ROOT %add.2021 = f32[] add(%Arg_0.2324, %Arg_1.1996)
}

%region_2226.47613 (Arg_0.47610: f32[], Arg_1.47611: f32[]) -> f32[] {
  %Arg_0.47610 = f32[] parameter(0)
  %Arg_1.47611 = f32[] parameter(1)
  ROOT %add.47612 = f32[] add(%Arg_0.47610, %Arg_1.47611)
}

%region_2226.47613.clone (Arg_0.2325: f32[], Arg_1.1997: f32[]) -> f32[] {
  %Arg_0.2325 = f32[] parameter(0)
  %Arg_1.1997 = f32[] parameter(1)
  ROOT %add.2022 = f32[] add(%Arg_0.2325, %Arg_1.1997)
}

%region_2227.47622 (Arg_0.47619: f32[], Arg_1.47620: f32[]) -> f32[] {
  %Arg_0.47619 = f32[] parameter(0)
  %Arg_1.47620 = f32[] parameter(1)
  ROOT %add.47621 = f32[] add(%Arg_0.47619, %Arg_1.47620)
}

%region_2228.47631 (Arg_0.47628: f32[], Arg_1.47629: f32[]) -> f32[] {
  %Arg_0.47628 = f32[] parameter(0)
  %Arg_1.47629 = f32[] parameter(1)
  ROOT %add.47630 = f32[] add(%Arg_0.47628, %Arg_1.47629)
}

%region_2229.47640 (Arg_0.47637: f32[], Arg_1.47638: f32[]) -> f32[] {
  %Arg_0.47637 = f32[] parameter(0)
  %Arg_1.47638 = f32[] parameter(1)
  ROOT %add.47639 = f32[] add(%Arg_0.47637, %Arg_1.47638)
}

%region_2229.47640.clone (Arg_0.2327: f32[], Arg_1.1998: f32[]) -> f32[] {
  %Arg_0.2327 = f32[] parameter(0)
  %Arg_1.1998 = f32[] parameter(1)
  ROOT %add.2023 = f32[] add(%Arg_0.2327, %Arg_1.1998)
}

%region_2230.47649 (Arg_0.47646: f32[], Arg_1.47647: f32[]) -> f32[] {
  %Arg_0.47646 = f32[] parameter(0)
  %Arg_1.47647 = f32[] parameter(1)
  ROOT %add.47648 = f32[] add(%Arg_0.47646, %Arg_1.47647)
}

%region_2230.47649.clone (Arg_0.2328: f32[], Arg_1.1999: f32[]) -> f32[] {
  %Arg_0.2328 = f32[] parameter(0)
  %Arg_1.1999 = f32[] parameter(1)
  ROOT %add.2025 = f32[] add(%Arg_0.2328, %Arg_1.1999)
}

%region_2231.47658 (Arg_0.47655: f32[], Arg_1.47656: f32[]) -> f32[] {
  %Arg_0.47655 = f32[] parameter(0)
  %Arg_1.47656 = f32[] parameter(1)
  ROOT %add.47657 = f32[] add(%Arg_0.47655, %Arg_1.47656)
}

%region_2231.47658.clone (Arg_0.2329: f32[], Arg_1.2000: f32[]) -> f32[] {
  %Arg_0.2329 = f32[] parameter(0)
  %Arg_1.2000 = f32[] parameter(1)
  ROOT %add.2026 = f32[] add(%Arg_0.2329, %Arg_1.2000)
}

%region_2232.47667 (Arg_0.47664: f32[], Arg_1.47665: f32[]) -> f32[] {
  %Arg_0.47664 = f32[] parameter(0)
  %Arg_1.47665 = f32[] parameter(1)
  ROOT %add.47666 = f32[] add(%Arg_0.47664, %Arg_1.47665)
}

%region_2232.47667.clone (Arg_0.2330: f32[], Arg_1.2001: f32[]) -> f32[] {
  %Arg_0.2330 = f32[] parameter(0)
  %Arg_1.2001 = f32[] parameter(1)
  ROOT %add.2027 = f32[] add(%Arg_0.2330, %Arg_1.2001)
}

%region_2233.47676 (Arg_0.47673: f32[], Arg_1.47674: f32[]) -> f32[] {
  %Arg_0.47673 = f32[] parameter(0)
  %Arg_1.47674 = f32[] parameter(1)
  ROOT %add.47675 = f32[] add(%Arg_0.47673, %Arg_1.47674)
}

%region_2233.47676.clone (Arg_0.2331: f32[], Arg_1.2002: f32[]) -> f32[] {
  %Arg_0.2331 = f32[] parameter(0)
  %Arg_1.2002 = f32[] parameter(1)
  ROOT %add.2028 = f32[] add(%Arg_0.2331, %Arg_1.2002)
}

%region_2234.47685 (Arg_0.47682: f32[], Arg_1.47683: f32[]) -> f32[] {
  %Arg_0.47682 = f32[] parameter(0)
  %Arg_1.47683 = f32[] parameter(1)
  ROOT %add.47684 = f32[] add(%Arg_0.47682, %Arg_1.47683)
}

%region_2234.47685.clone (Arg_0.2332: f32[], Arg_1.2003: f32[]) -> f32[] {
  %Arg_0.2332 = f32[] parameter(0)
  %Arg_1.2003 = f32[] parameter(1)
  ROOT %add.2029 = f32[] add(%Arg_0.2332, %Arg_1.2003)
}

%region_2235.47694 (Arg_0.47691: f32[], Arg_1.47692: f32[]) -> f32[] {
  %Arg_0.47691 = f32[] parameter(0)
  %Arg_1.47692 = f32[] parameter(1)
  ROOT %add.47693 = f32[] add(%Arg_0.47691, %Arg_1.47692)
}

%region_2235.47694.clone (Arg_0.2333: f32[], Arg_1.2004: f32[]) -> f32[] {
  %Arg_0.2333 = f32[] parameter(0)
  %Arg_1.2004 = f32[] parameter(1)
  ROOT %add.2030 = f32[] add(%Arg_0.2333, %Arg_1.2004)
}

%region_2236.47703 (Arg_0.47700: f32[], Arg_1.47701: f32[]) -> f32[] {
  %Arg_0.47700 = f32[] parameter(0)
  %Arg_1.47701 = f32[] parameter(1)
  ROOT %add.47702 = f32[] add(%Arg_0.47700, %Arg_1.47701)
}

%region_2236.47703.clone (Arg_0.2334: f32[], Arg_1.2005: f32[]) -> f32[] {
  %Arg_0.2334 = f32[] parameter(0)
  %Arg_1.2005 = f32[] parameter(1)
  ROOT %add.2031 = f32[] add(%Arg_0.2334, %Arg_1.2005)
}

%region_2237.47712 (Arg_0.47709: f32[], Arg_1.47710: f32[]) -> f32[] {
  %Arg_0.47709 = f32[] parameter(0)
  %Arg_1.47710 = f32[] parameter(1)
  ROOT %add.47711 = f32[] add(%Arg_0.47709, %Arg_1.47710)
}

%region_2238.47721 (Arg_0.47718: f32[], Arg_1.47719: f32[]) -> f32[] {
  %Arg_0.47718 = f32[] parameter(0)
  %Arg_1.47719 = f32[] parameter(1)
  ROOT %add.47720 = f32[] add(%Arg_0.47718, %Arg_1.47719)
}

%region_2239.47730 (Arg_0.47727: f32[], Arg_1.47728: f32[]) -> f32[] {
  %Arg_0.47727 = f32[] parameter(0)
  %Arg_1.47728 = f32[] parameter(1)
  ROOT %add.47729 = f32[] add(%Arg_0.47727, %Arg_1.47728)
}

%region_2239.47730.clone (Arg_0.2335: f32[], Arg_1.2006: f32[]) -> f32[] {
  %Arg_0.2335 = f32[] parameter(0)
  %Arg_1.2006 = f32[] parameter(1)
  ROOT %add.2032 = f32[] add(%Arg_0.2335, %Arg_1.2006)
}

%region_2240.47739 (Arg_0.47736: f32[], Arg_1.47737: f32[]) -> f32[] {
  %Arg_0.47736 = f32[] parameter(0)
  %Arg_1.47737 = f32[] parameter(1)
  ROOT %add.47738 = f32[] add(%Arg_0.47736, %Arg_1.47737)
}

%region_2240.47739.clone (Arg_0.2336: f32[], Arg_1.2007: f32[]) -> f32[] {
  %Arg_0.2336 = f32[] parameter(0)
  %Arg_1.2007 = f32[] parameter(1)
  ROOT %add.2033 = f32[] add(%Arg_0.2336, %Arg_1.2007)
}

%region_2241.47748 (Arg_0.47745: f32[], Arg_1.47746: f32[]) -> f32[] {
  %Arg_0.47745 = f32[] parameter(0)
  %Arg_1.47746 = f32[] parameter(1)
  ROOT %add.47747 = f32[] add(%Arg_0.47745, %Arg_1.47746)
}

%region_2241.47748.clone (Arg_0.2337: f32[], Arg_1.2008: f32[]) -> f32[] {
  %Arg_0.2337 = f32[] parameter(0)
  %Arg_1.2008 = f32[] parameter(1)
  ROOT %add.2034 = f32[] add(%Arg_0.2337, %Arg_1.2008)
}

%region_2242.47757 (Arg_0.47754: f32[], Arg_1.47755: f32[]) -> f32[] {
  %Arg_0.47754 = f32[] parameter(0)
  %Arg_1.47755 = f32[] parameter(1)
  ROOT %add.47756 = f32[] add(%Arg_0.47754, %Arg_1.47755)
}

%region_2242.47757.clone (Arg_0.2338: f32[], Arg_1.2009: f32[]) -> f32[] {
  %Arg_0.2338 = f32[] parameter(0)
  %Arg_1.2009 = f32[] parameter(1)
  ROOT %add.2035 = f32[] add(%Arg_0.2338, %Arg_1.2009)
}

%region_2243.47766 (Arg_0.47763: f32[], Arg_1.47764: f32[]) -> f32[] {
  %Arg_0.47763 = f32[] parameter(0)
  %Arg_1.47764 = f32[] parameter(1)
  ROOT %add.47765 = f32[] add(%Arg_0.47763, %Arg_1.47764)
}

%region_2243.47766.clone (Arg_0.2339: f32[], Arg_1.2010: f32[]) -> f32[] {
  %Arg_0.2339 = f32[] parameter(0)
  %Arg_1.2010 = f32[] parameter(1)
  ROOT %add.2036 = f32[] add(%Arg_0.2339, %Arg_1.2010)
}

%region_2244.47775 (Arg_0.47772: f32[], Arg_1.47773: f32[]) -> f32[] {
  %Arg_0.47772 = f32[] parameter(0)
  %Arg_1.47773 = f32[] parameter(1)
  ROOT %add.47774 = f32[] add(%Arg_0.47772, %Arg_1.47773)
}

%region_2244.47775.clone (Arg_0.2340: f32[], Arg_1.2012: f32[]) -> f32[] {
  %Arg_0.2340 = f32[] parameter(0)
  %Arg_1.2012 = f32[] parameter(1)
  ROOT %add.2037 = f32[] add(%Arg_0.2340, %Arg_1.2012)
}

%region_2245.47784 (Arg_0.47781: f32[], Arg_1.47782: f32[]) -> f32[] {
  %Arg_0.47781 = f32[] parameter(0)
  %Arg_1.47782 = f32[] parameter(1)
  ROOT %add.47783 = f32[] add(%Arg_0.47781, %Arg_1.47782)
}

%region_2245.47784.clone (Arg_0.2341: f32[], Arg_1.2013: f32[]) -> f32[] {
  %Arg_0.2341 = f32[] parameter(0)
  %Arg_1.2013 = f32[] parameter(1)
  ROOT %add.2039 = f32[] add(%Arg_0.2341, %Arg_1.2013)
}

%region_2246.47793 (Arg_0.47790: f32[], Arg_1.47791: f32[]) -> f32[] {
  %Arg_0.47790 = f32[] parameter(0)
  %Arg_1.47791 = f32[] parameter(1)
  ROOT %add.47792 = f32[] add(%Arg_0.47790, %Arg_1.47791)
}

%region_2246.47793.clone (Arg_0.2342: f32[], Arg_1.2014: f32[]) -> f32[] {
  %Arg_0.2342 = f32[] parameter(0)
  %Arg_1.2014 = f32[] parameter(1)
  ROOT %add.2040 = f32[] add(%Arg_0.2342, %Arg_1.2014)
}

%region_2247.47802 (Arg_0.47799: f32[], Arg_1.47800: f32[]) -> f32[] {
  %Arg_0.47799 = f32[] parameter(0)
  %Arg_1.47800 = f32[] parameter(1)
  ROOT %add.47801 = f32[] add(%Arg_0.47799, %Arg_1.47800)
}

%region_2248.47811 (Arg_0.47808: f32[], Arg_1.47809: f32[]) -> f32[] {
  %Arg_0.47808 = f32[] parameter(0)
  %Arg_1.47809 = f32[] parameter(1)
  ROOT %add.47810 = f32[] add(%Arg_0.47808, %Arg_1.47809)
}

%region_2249.47820 (Arg_0.47817: f32[], Arg_1.47818: f32[]) -> f32[] {
  %Arg_0.47817 = f32[] parameter(0)
  %Arg_1.47818 = f32[] parameter(1)
  ROOT %add.47819 = f32[] add(%Arg_0.47817, %Arg_1.47818)
}

%region_2249.47820.clone (Arg_0.2343: f32[], Arg_1.2015: f32[]) -> f32[] {
  %Arg_0.2343 = f32[] parameter(0)
  %Arg_1.2015 = f32[] parameter(1)
  ROOT %add.2042 = f32[] add(%Arg_0.2343, %Arg_1.2015)
}

%region_2250.47829 (Arg_0.47826: f32[], Arg_1.47827: f32[]) -> f32[] {
  %Arg_0.47826 = f32[] parameter(0)
  %Arg_1.47827 = f32[] parameter(1)
  ROOT %add.47828 = f32[] add(%Arg_0.47826, %Arg_1.47827)
}

%region_2250.47829.clone (Arg_0.2344: f32[], Arg_1.2016: f32[]) -> f32[] {
  %Arg_0.2344 = f32[] parameter(0)
  %Arg_1.2016 = f32[] parameter(1)
  ROOT %add.2043 = f32[] add(%Arg_0.2344, %Arg_1.2016)
}

%region_2251.47838 (Arg_0.47835: f32[], Arg_1.47836: f32[]) -> f32[] {
  %Arg_0.47835 = f32[] parameter(0)
  %Arg_1.47836 = f32[] parameter(1)
  ROOT %add.47837 = f32[] add(%Arg_0.47835, %Arg_1.47836)
}

%region_2251.47838.clone (Arg_0.2345: f32[], Arg_1.2017: f32[]) -> f32[] {
  %Arg_0.2345 = f32[] parameter(0)
  %Arg_1.2017 = f32[] parameter(1)
  ROOT %add.2045 = f32[] add(%Arg_0.2345, %Arg_1.2017)
}

%region_2252.47847 (Arg_0.47844: f32[], Arg_1.47845: f32[]) -> f32[] {
  %Arg_0.47844 = f32[] parameter(0)
  %Arg_1.47845 = f32[] parameter(1)
  ROOT %add.47846 = f32[] add(%Arg_0.47844, %Arg_1.47845)
}

%region_2252.47847.clone (Arg_0.2346: f32[], Arg_1.2018: f32[]) -> f32[] {
  %Arg_0.2346 = f32[] parameter(0)
  %Arg_1.2018 = f32[] parameter(1)
  ROOT %add.2046 = f32[] add(%Arg_0.2346, %Arg_1.2018)
}

%region_2253.47856 (Arg_0.47853: f32[], Arg_1.47854: f32[]) -> f32[] {
  %Arg_0.47853 = f32[] parameter(0)
  %Arg_1.47854 = f32[] parameter(1)
  ROOT %add.47855 = f32[] add(%Arg_0.47853, %Arg_1.47854)
}

%region_2253.47856.clone (Arg_0.2347: f32[], Arg_1.2019: f32[]) -> f32[] {
  %Arg_0.2347 = f32[] parameter(0)
  %Arg_1.2019 = f32[] parameter(1)
  ROOT %add.2047 = f32[] add(%Arg_0.2347, %Arg_1.2019)
}

%region_2254.47865 (Arg_0.47862: f32[], Arg_1.47863: f32[]) -> f32[] {
  %Arg_0.47862 = f32[] parameter(0)
  %Arg_1.47863 = f32[] parameter(1)
  ROOT %add.47864 = f32[] add(%Arg_0.47862, %Arg_1.47863)
}

%region_2254.47865.clone (Arg_0.2348: f32[], Arg_1.2020: f32[]) -> f32[] {
  %Arg_0.2348 = f32[] parameter(0)
  %Arg_1.2020 = f32[] parameter(1)
  ROOT %add.2048 = f32[] add(%Arg_0.2348, %Arg_1.2020)
}

%region_2255.47874 (Arg_0.47871: f32[], Arg_1.47872: f32[]) -> f32[] {
  %Arg_0.47871 = f32[] parameter(0)
  %Arg_1.47872 = f32[] parameter(1)
  ROOT %add.47873 = f32[] add(%Arg_0.47871, %Arg_1.47872)
}

%region_2255.47874.clone (Arg_0.2349: f32[], Arg_1.2021: f32[]) -> f32[] {
  %Arg_0.2349 = f32[] parameter(0)
  %Arg_1.2021 = f32[] parameter(1)
  ROOT %add.2049 = f32[] add(%Arg_0.2349, %Arg_1.2021)
}

%region_2256.47883 (Arg_0.47880: f32[], Arg_1.47881: f32[]) -> f32[] {
  %Arg_0.47880 = f32[] parameter(0)
  %Arg_1.47881 = f32[] parameter(1)
  ROOT %add.47882 = f32[] add(%Arg_0.47880, %Arg_1.47881)
}

%region_2256.47883.clone (Arg_0.2350: f32[], Arg_1.2022: f32[]) -> f32[] {
  %Arg_0.2350 = f32[] parameter(0)
  %Arg_1.2022 = f32[] parameter(1)
  ROOT %add.2050 = f32[] add(%Arg_0.2350, %Arg_1.2022)
}

%region_2257.47892 (Arg_0.47889: f32[], Arg_1.47890: f32[]) -> f32[] {
  %Arg_0.47889 = f32[] parameter(0)
  %Arg_1.47890 = f32[] parameter(1)
  ROOT %add.47891 = f32[] add(%Arg_0.47889, %Arg_1.47890)
}

%region_2258.47901 (Arg_0.47898: f32[], Arg_1.47899: f32[]) -> f32[] {
  %Arg_0.47898 = f32[] parameter(0)
  %Arg_1.47899 = f32[] parameter(1)
  ROOT %add.47900 = f32[] add(%Arg_0.47898, %Arg_1.47899)
}

%region_2259.47910 (Arg_0.47907: f32[], Arg_1.47908: f32[]) -> f32[] {
  %Arg_0.47907 = f32[] parameter(0)
  %Arg_1.47908 = f32[] parameter(1)
  ROOT %add.47909 = f32[] add(%Arg_0.47907, %Arg_1.47908)
}

%region_2259.47910.clone (Arg_0.2351: f32[], Arg_1.2024: f32[]) -> f32[] {
  %Arg_0.2351 = f32[] parameter(0)
  %Arg_1.2024 = f32[] parameter(1)
  ROOT %add.2051 = f32[] add(%Arg_0.2351, %Arg_1.2024)
}

%region_2260.47919 (Arg_0.47916: f32[], Arg_1.47917: f32[]) -> f32[] {
  %Arg_0.47916 = f32[] parameter(0)
  %Arg_1.47917 = f32[] parameter(1)
  ROOT %add.47918 = f32[] add(%Arg_0.47916, %Arg_1.47917)
}

%region_2260.47919.clone (Arg_0.2352: f32[], Arg_1.2025: f32[]) -> f32[] {
  %Arg_0.2352 = f32[] parameter(0)
  %Arg_1.2025 = f32[] parameter(1)
  ROOT %add.2052 = f32[] add(%Arg_0.2352, %Arg_1.2025)
}

%region_2261.47928 (Arg_0.47925: f32[], Arg_1.47926: f32[]) -> f32[] {
  %Arg_0.47925 = f32[] parameter(0)
  %Arg_1.47926 = f32[] parameter(1)
  ROOT %add.47927 = f32[] add(%Arg_0.47925, %Arg_1.47926)
}

%region_2261.47928.clone (Arg_0.2353: f32[], Arg_1.2026: f32[]) -> f32[] {
  %Arg_0.2353 = f32[] parameter(0)
  %Arg_1.2026 = f32[] parameter(1)
  ROOT %add.2053 = f32[] add(%Arg_0.2353, %Arg_1.2026)
}

%region_2262.47937 (Arg_0.47934: f32[], Arg_1.47935: f32[]) -> f32[] {
  %Arg_0.47934 = f32[] parameter(0)
  %Arg_1.47935 = f32[] parameter(1)
  ROOT %add.47936 = f32[] add(%Arg_0.47934, %Arg_1.47935)
}

%region_2262.47937.clone (Arg_0.2354: f32[], Arg_1.2027: f32[]) -> f32[] {
  %Arg_0.2354 = f32[] parameter(0)
  %Arg_1.2027 = f32[] parameter(1)
  ROOT %add.2054 = f32[] add(%Arg_0.2354, %Arg_1.2027)
}

%region_2263.47946 (Arg_0.47943: f32[], Arg_1.47944: f32[]) -> f32[] {
  %Arg_0.47943 = f32[] parameter(0)
  %Arg_1.47944 = f32[] parameter(1)
  ROOT %add.47945 = f32[] add(%Arg_0.47943, %Arg_1.47944)
}

%region_2263.47946.clone (Arg_0.2355: f32[], Arg_1.2028: f32[]) -> f32[] {
  %Arg_0.2355 = f32[] parameter(0)
  %Arg_1.2028 = f32[] parameter(1)
  ROOT %add.2055 = f32[] add(%Arg_0.2355, %Arg_1.2028)
}

%region_2264.47955 (Arg_0.47952: f32[], Arg_1.47953: f32[]) -> f32[] {
  %Arg_0.47952 = f32[] parameter(0)
  %Arg_1.47953 = f32[] parameter(1)
  ROOT %add.47954 = f32[] add(%Arg_0.47952, %Arg_1.47953)
}

%region_2264.47955.clone (Arg_0.2356: f32[], Arg_1.2029: f32[]) -> f32[] {
  %Arg_0.2356 = f32[] parameter(0)
  %Arg_1.2029 = f32[] parameter(1)
  ROOT %add.2056 = f32[] add(%Arg_0.2356, %Arg_1.2029)
}

%region_2265.47964 (Arg_0.47961: f32[], Arg_1.47962: f32[]) -> f32[] {
  %Arg_0.47961 = f32[] parameter(0)
  %Arg_1.47962 = f32[] parameter(1)
  ROOT %add.47963 = f32[] add(%Arg_0.47961, %Arg_1.47962)
}

%region_2265.47964.clone (Arg_0.2357: f32[], Arg_1.2030: f32[]) -> f32[] {
  %Arg_0.2357 = f32[] parameter(0)
  %Arg_1.2030 = f32[] parameter(1)
  ROOT %add.2057 = f32[] add(%Arg_0.2357, %Arg_1.2030)
}

%region_2266.47973 (Arg_0.47970: f32[], Arg_1.47971: f32[]) -> f32[] {
  %Arg_0.47970 = f32[] parameter(0)
  %Arg_1.47971 = f32[] parameter(1)
  ROOT %add.47972 = f32[] add(%Arg_0.47970, %Arg_1.47971)
}

%region_2266.47973.clone (Arg_0.2358: f32[], Arg_1.2031: f32[]) -> f32[] {
  %Arg_0.2358 = f32[] parameter(0)
  %Arg_1.2031 = f32[] parameter(1)
  ROOT %add.2059 = f32[] add(%Arg_0.2358, %Arg_1.2031)
}

%region_2267.47982 (Arg_0.47979: f32[], Arg_1.47980: f32[]) -> f32[] {
  %Arg_0.47979 = f32[] parameter(0)
  %Arg_1.47980 = f32[] parameter(1)
  ROOT %add.47981 = f32[] add(%Arg_0.47979, %Arg_1.47980)
}

%region_2268.47991 (Arg_0.47988: f32[], Arg_1.47989: f32[]) -> f32[] {
  %Arg_0.47988 = f32[] parameter(0)
  %Arg_1.47989 = f32[] parameter(1)
  ROOT %add.47990 = f32[] add(%Arg_0.47988, %Arg_1.47989)
}

%region_2269.48000 (Arg_0.47997: f32[], Arg_1.47998: f32[]) -> f32[] {
  %Arg_0.47997 = f32[] parameter(0)
  %Arg_1.47998 = f32[] parameter(1)
  ROOT %add.47999 = f32[] add(%Arg_0.47997, %Arg_1.47998)
}

%region_2269.48000.clone (Arg_0.2359: f32[], Arg_1.2032: f32[]) -> f32[] {
  %Arg_0.2359 = f32[] parameter(0)
  %Arg_1.2032 = f32[] parameter(1)
  ROOT %add.2060 = f32[] add(%Arg_0.2359, %Arg_1.2032)
}

%region_2270.48009 (Arg_0.48006: f32[], Arg_1.48007: f32[]) -> f32[] {
  %Arg_0.48006 = f32[] parameter(0)
  %Arg_1.48007 = f32[] parameter(1)
  ROOT %add.48008 = f32[] add(%Arg_0.48006, %Arg_1.48007)
}

%region_2270.48009.clone (Arg_0.2360: f32[], Arg_1.2033: f32[]) -> f32[] {
  %Arg_0.2360 = f32[] parameter(0)
  %Arg_1.2033 = f32[] parameter(1)
  ROOT %add.2061 = f32[] add(%Arg_0.2360, %Arg_1.2033)
}

%region_2271.48018 (Arg_0.48015: f32[], Arg_1.48016: f32[]) -> f32[] {
  %Arg_0.48015 = f32[] parameter(0)
  %Arg_1.48016 = f32[] parameter(1)
  ROOT %add.48017 = f32[] add(%Arg_0.48015, %Arg_1.48016)
}

%region_2271.48018.clone (Arg_0.2361: f32[], Arg_1.2034: f32[]) -> f32[] {
  %Arg_0.2361 = f32[] parameter(0)
  %Arg_1.2034 = f32[] parameter(1)
  ROOT %add.2062 = f32[] add(%Arg_0.2361, %Arg_1.2034)
}

%region_2272.48027 (Arg_0.48024: f32[], Arg_1.48025: f32[]) -> f32[] {
  %Arg_0.48024 = f32[] parameter(0)
  %Arg_1.48025 = f32[] parameter(1)
  ROOT %add.48026 = f32[] add(%Arg_0.48024, %Arg_1.48025)
}

%region_2272.48027.clone (Arg_0.2362: f32[], Arg_1.2035: f32[]) -> f32[] {
  %Arg_0.2362 = f32[] parameter(0)
  %Arg_1.2035 = f32[] parameter(1)
  ROOT %add.2063 = f32[] add(%Arg_0.2362, %Arg_1.2035)
}

%region_2273.48036 (Arg_0.48033: f32[], Arg_1.48034: f32[]) -> f32[] {
  %Arg_0.48033 = f32[] parameter(0)
  %Arg_1.48034 = f32[] parameter(1)
  ROOT %add.48035 = f32[] add(%Arg_0.48033, %Arg_1.48034)
}

%region_2273.48036.clone (Arg_0.2364: f32[], Arg_1.2036: f32[]) -> f32[] {
  %Arg_0.2364 = f32[] parameter(0)
  %Arg_1.2036 = f32[] parameter(1)
  ROOT %add.2064 = f32[] add(%Arg_0.2364, %Arg_1.2036)
}

%region_2274.48045 (Arg_0.48042: f32[], Arg_1.48043: f32[]) -> f32[] {
  %Arg_0.48042 = f32[] parameter(0)
  %Arg_1.48043 = f32[] parameter(1)
  ROOT %add.48044 = f32[] add(%Arg_0.48042, %Arg_1.48043)
}

%region_2274.48045.clone (Arg_0.2365: f32[], Arg_1.2037: f32[]) -> f32[] {
  %Arg_0.2365 = f32[] parameter(0)
  %Arg_1.2037 = f32[] parameter(1)
  ROOT %add.2065 = f32[] add(%Arg_0.2365, %Arg_1.2037)
}

%region_2275.48054 (Arg_0.48051: f32[], Arg_1.48052: f32[]) -> f32[] {
  %Arg_0.48051 = f32[] parameter(0)
  %Arg_1.48052 = f32[] parameter(1)
  ROOT %add.48053 = f32[] add(%Arg_0.48051, %Arg_1.48052)
}

%region_2275.48054.clone (Arg_0.2366: f32[], Arg_1.2038: f32[]) -> f32[] {
  %Arg_0.2366 = f32[] parameter(0)
  %Arg_1.2038 = f32[] parameter(1)
  ROOT %add.2066 = f32[] add(%Arg_0.2366, %Arg_1.2038)
}

%region_2276.48063 (Arg_0.48060: f32[], Arg_1.48061: f32[]) -> f32[] {
  %Arg_0.48060 = f32[] parameter(0)
  %Arg_1.48061 = f32[] parameter(1)
  ROOT %add.48062 = f32[] add(%Arg_0.48060, %Arg_1.48061)
}

%region_2276.48063.clone (Arg_0.2367: f32[], Arg_1.2039: f32[]) -> f32[] {
  %Arg_0.2367 = f32[] parameter(0)
  %Arg_1.2039 = f32[] parameter(1)
  ROOT %add.2067 = f32[] add(%Arg_0.2367, %Arg_1.2039)
}

%region_2277.48072 (Arg_0.48069: f32[], Arg_1.48070: f32[]) -> f32[] {
  %Arg_0.48069 = f32[] parameter(0)
  %Arg_1.48070 = f32[] parameter(1)
  ROOT %add.48071 = f32[] add(%Arg_0.48069, %Arg_1.48070)
}

%region_2278.48081 (Arg_0.48078: f32[], Arg_1.48079: f32[]) -> f32[] {
  %Arg_0.48078 = f32[] parameter(0)
  %Arg_1.48079 = f32[] parameter(1)
  ROOT %add.48080 = f32[] add(%Arg_0.48078, %Arg_1.48079)
}

%region_2279.48090 (Arg_0.48087: f32[], Arg_1.48088: f32[]) -> f32[] {
  %Arg_0.48087 = f32[] parameter(0)
  %Arg_1.48088 = f32[] parameter(1)
  ROOT %add.48089 = f32[] add(%Arg_0.48087, %Arg_1.48088)
}

%region_2279.48090.clone (Arg_0.2368: f32[], Arg_1.2040: f32[]) -> f32[] {
  %Arg_0.2368 = f32[] parameter(0)
  %Arg_1.2040 = f32[] parameter(1)
  ROOT %add.2069 = f32[] add(%Arg_0.2368, %Arg_1.2040)
}

%region_2280.48099 (Arg_0.48096: f32[], Arg_1.48097: f32[]) -> f32[] {
  %Arg_0.48096 = f32[] parameter(0)
  %Arg_1.48097 = f32[] parameter(1)
  ROOT %add.48098 = f32[] add(%Arg_0.48096, %Arg_1.48097)
}

%region_2280.48099.clone (Arg_0.2369: f32[], Arg_1.2041: f32[]) -> f32[] {
  %Arg_0.2369 = f32[] parameter(0)
  %Arg_1.2041 = f32[] parameter(1)
  ROOT %add.2070 = f32[] add(%Arg_0.2369, %Arg_1.2041)
}

%region_2281.48108 (Arg_0.48105: f32[], Arg_1.48106: f32[]) -> f32[] {
  %Arg_0.48105 = f32[] parameter(0)
  %Arg_1.48106 = f32[] parameter(1)
  ROOT %add.48107 = f32[] add(%Arg_0.48105, %Arg_1.48106)
}

%region_2281.48108.clone (Arg_0.2371: f32[], Arg_1.2042: f32[]) -> f32[] {
  %Arg_0.2371 = f32[] parameter(0)
  %Arg_1.2042 = f32[] parameter(1)
  ROOT %add.2071 = f32[] add(%Arg_0.2371, %Arg_1.2042)
}

%region_2282.48117 (Arg_0.48114: f32[], Arg_1.48115: f32[]) -> f32[] {
  %Arg_0.48114 = f32[] parameter(0)
  %Arg_1.48115 = f32[] parameter(1)
  ROOT %add.48116 = f32[] add(%Arg_0.48114, %Arg_1.48115)
}

%region_2282.48117.clone (Arg_0.2372: f32[], Arg_1.2043: f32[]) -> f32[] {
  %Arg_0.2372 = f32[] parameter(0)
  %Arg_1.2043 = f32[] parameter(1)
  ROOT %add.2072 = f32[] add(%Arg_0.2372, %Arg_1.2043)
}

%region_2283.48126 (Arg_0.48123: f32[], Arg_1.48124: f32[]) -> f32[] {
  %Arg_0.48123 = f32[] parameter(0)
  %Arg_1.48124 = f32[] parameter(1)
  ROOT %add.48125 = f32[] add(%Arg_0.48123, %Arg_1.48124)
}

%region_2283.48126.clone (Arg_0.2373: f32[], Arg_1.2044: f32[]) -> f32[] {
  %Arg_0.2373 = f32[] parameter(0)
  %Arg_1.2044 = f32[] parameter(1)
  ROOT %add.2073 = f32[] add(%Arg_0.2373, %Arg_1.2044)
}

%region_2284.48135 (Arg_0.48132: f32[], Arg_1.48133: f32[]) -> f32[] {
  %Arg_0.48132 = f32[] parameter(0)
  %Arg_1.48133 = f32[] parameter(1)
  ROOT %add.48134 = f32[] add(%Arg_0.48132, %Arg_1.48133)
}

%region_2284.48135.clone (Arg_0.2374: f32[], Arg_1.2045: f32[]) -> f32[] {
  %Arg_0.2374 = f32[] parameter(0)
  %Arg_1.2045 = f32[] parameter(1)
  ROOT %add.2074 = f32[] add(%Arg_0.2374, %Arg_1.2045)
}

%region_2285.48144 (Arg_0.48141: f32[], Arg_1.48142: f32[]) -> f32[] {
  %Arg_0.48141 = f32[] parameter(0)
  %Arg_1.48142 = f32[] parameter(1)
  ROOT %add.48143 = f32[] add(%Arg_0.48141, %Arg_1.48142)
}

%region_2285.48144.clone (Arg_0.2375: f32[], Arg_1.2046: f32[]) -> f32[] {
  %Arg_0.2375 = f32[] parameter(0)
  %Arg_1.2046 = f32[] parameter(1)
  ROOT %add.2075 = f32[] add(%Arg_0.2375, %Arg_1.2046)
}

%region_2286.48153 (Arg_0.48150: f32[], Arg_1.48151: f32[]) -> f32[] {
  %Arg_0.48150 = f32[] parameter(0)
  %Arg_1.48151 = f32[] parameter(1)
  ROOT %add.48152 = f32[] add(%Arg_0.48150, %Arg_1.48151)
}

%region_2286.48153.clone (Arg_0.2376: f32[], Arg_1.2047: f32[]) -> f32[] {
  %Arg_0.2376 = f32[] parameter(0)
  %Arg_1.2047 = f32[] parameter(1)
  ROOT %add.2076 = f32[] add(%Arg_0.2376, %Arg_1.2047)
}

%region_2287.48162 (Arg_0.48159: f32[], Arg_1.48160: f32[]) -> f32[] {
  %Arg_0.48159 = f32[] parameter(0)
  %Arg_1.48160 = f32[] parameter(1)
  ROOT %add.48161 = f32[] add(%Arg_0.48159, %Arg_1.48160)
}

%region_2288.48171 (Arg_0.48168: f32[], Arg_1.48169: f32[]) -> f32[] {
  %Arg_0.48168 = f32[] parameter(0)
  %Arg_1.48169 = f32[] parameter(1)
  ROOT %add.48170 = f32[] add(%Arg_0.48168, %Arg_1.48169)
}

%region_2289.48180 (Arg_0.48177: f32[], Arg_1.48178: f32[]) -> f32[] {
  %Arg_0.48177 = f32[] parameter(0)
  %Arg_1.48178 = f32[] parameter(1)
  ROOT %add.48179 = f32[] add(%Arg_0.48177, %Arg_1.48178)
}

%region_2289.48180.clone (Arg_0.2377: f32[], Arg_1.2048: f32[]) -> f32[] {
  %Arg_0.2377 = f32[] parameter(0)
  %Arg_1.2048 = f32[] parameter(1)
  ROOT %add.2077 = f32[] add(%Arg_0.2377, %Arg_1.2048)
}

%region_2290.48189 (Arg_0.48186: f32[], Arg_1.48187: f32[]) -> f32[] {
  %Arg_0.48186 = f32[] parameter(0)
  %Arg_1.48187 = f32[] parameter(1)
  ROOT %add.48188 = f32[] add(%Arg_0.48186, %Arg_1.48187)
}

%region_2290.48189.clone (Arg_0.2378: f32[], Arg_1.2049: f32[]) -> f32[] {
  %Arg_0.2378 = f32[] parameter(0)
  %Arg_1.2049 = f32[] parameter(1)
  ROOT %add.2078 = f32[] add(%Arg_0.2378, %Arg_1.2049)
}

%region_2291.48198 (Arg_0.48195: f32[], Arg_1.48196: f32[]) -> f32[] {
  %Arg_0.48195 = f32[] parameter(0)
  %Arg_1.48196 = f32[] parameter(1)
  ROOT %add.48197 = f32[] add(%Arg_0.48195, %Arg_1.48196)
}

%region_2291.48198.clone (Arg_0.2379: f32[], Arg_1.2050: f32[]) -> f32[] {
  %Arg_0.2379 = f32[] parameter(0)
  %Arg_1.2050 = f32[] parameter(1)
  ROOT %add.2079 = f32[] add(%Arg_0.2379, %Arg_1.2050)
}

%region_2292.48207 (Arg_0.48204: f32[], Arg_1.48205: f32[]) -> f32[] {
  %Arg_0.48204 = f32[] parameter(0)
  %Arg_1.48205 = f32[] parameter(1)
  ROOT %add.48206 = f32[] add(%Arg_0.48204, %Arg_1.48205)
}

%region_2292.48207.clone (Arg_0.2380: f32[], Arg_1.2051: f32[]) -> f32[] {
  %Arg_0.2380 = f32[] parameter(0)
  %Arg_1.2051 = f32[] parameter(1)
  ROOT %add.2080 = f32[] add(%Arg_0.2380, %Arg_1.2051)
}

%region_2293.48216 (Arg_0.48213: f32[], Arg_1.48214: f32[]) -> f32[] {
  %Arg_0.48213 = f32[] parameter(0)
  %Arg_1.48214 = f32[] parameter(1)
  ROOT %add.48215 = f32[] add(%Arg_0.48213, %Arg_1.48214)
}

%region_2293.48216.clone (Arg_0.2381: f32[], Arg_1.2052: f32[]) -> f32[] {
  %Arg_0.2381 = f32[] parameter(0)
  %Arg_1.2052 = f32[] parameter(1)
  ROOT %add.2081 = f32[] add(%Arg_0.2381, %Arg_1.2052)
}

%region_2294.48225 (Arg_0.48222: f32[], Arg_1.48223: f32[]) -> f32[] {
  %Arg_0.48222 = f32[] parameter(0)
  %Arg_1.48223 = f32[] parameter(1)
  ROOT %add.48224 = f32[] add(%Arg_0.48222, %Arg_1.48223)
}

%region_2294.48225.clone (Arg_0.2382: f32[], Arg_1.2053: f32[]) -> f32[] {
  %Arg_0.2382 = f32[] parameter(0)
  %Arg_1.2053 = f32[] parameter(1)
  ROOT %add.2083 = f32[] add(%Arg_0.2382, %Arg_1.2053)
}

%region_2295.48234 (Arg_0.48231: f32[], Arg_1.48232: f32[]) -> f32[] {
  %Arg_0.48231 = f32[] parameter(0)
  %Arg_1.48232 = f32[] parameter(1)
  ROOT %add.48233 = f32[] add(%Arg_0.48231, %Arg_1.48232)
}

%region_2295.48234.clone (Arg_0.2383: f32[], Arg_1.2054: f32[]) -> f32[] {
  %Arg_0.2383 = f32[] parameter(0)
  %Arg_1.2054 = f32[] parameter(1)
  ROOT %add.2084 = f32[] add(%Arg_0.2383, %Arg_1.2054)
}

%region_2296.48243 (Arg_0.48240: f32[], Arg_1.48241: f32[]) -> f32[] {
  %Arg_0.48240 = f32[] parameter(0)
  %Arg_1.48241 = f32[] parameter(1)
  ROOT %add.48242 = f32[] add(%Arg_0.48240, %Arg_1.48241)
}

%region_2296.48243.clone (Arg_0.2385: f32[], Arg_1.2055: f32[]) -> f32[] {
  %Arg_0.2385 = f32[] parameter(0)
  %Arg_1.2055 = f32[] parameter(1)
  ROOT %add.2085 = f32[] add(%Arg_0.2385, %Arg_1.2055)
}

%region_2297.48252 (Arg_0.48249: f32[], Arg_1.48250: f32[]) -> f32[] {
  %Arg_0.48249 = f32[] parameter(0)
  %Arg_1.48250 = f32[] parameter(1)
  ROOT %add.48251 = f32[] add(%Arg_0.48249, %Arg_1.48250)
}

%region_2298.48261 (Arg_0.48258: f32[], Arg_1.48259: f32[]) -> f32[] {
  %Arg_0.48258 = f32[] parameter(0)
  %Arg_1.48259 = f32[] parameter(1)
  ROOT %add.48260 = f32[] add(%Arg_0.48258, %Arg_1.48259)
}

%region_2299.48270 (Arg_0.48267: f32[], Arg_1.48268: f32[]) -> f32[] {
  %Arg_0.48267 = f32[] parameter(0)
  %Arg_1.48268 = f32[] parameter(1)
  ROOT %add.48269 = f32[] add(%Arg_0.48267, %Arg_1.48268)
}

%region_2299.48270.clone (Arg_0.2386: f32[], Arg_1.2056: f32[]) -> f32[] {
  %Arg_0.2386 = f32[] parameter(0)
  %Arg_1.2056 = f32[] parameter(1)
  ROOT %add.2086 = f32[] add(%Arg_0.2386, %Arg_1.2056)
}

%region_2300.48279 (Arg_0.48276: f32[], Arg_1.48277: f32[]) -> f32[] {
  %Arg_0.48276 = f32[] parameter(0)
  %Arg_1.48277 = f32[] parameter(1)
  ROOT %add.48278 = f32[] add(%Arg_0.48276, %Arg_1.48277)
}

%region_2300.48279.clone (Arg_0.2387: f32[], Arg_1.2057: f32[]) -> f32[] {
  %Arg_0.2387 = f32[] parameter(0)
  %Arg_1.2057 = f32[] parameter(1)
  ROOT %add.2087 = f32[] add(%Arg_0.2387, %Arg_1.2057)
}

%region_2301.48288 (Arg_0.48285: f32[], Arg_1.48286: f32[]) -> f32[] {
  %Arg_0.48285 = f32[] parameter(0)
  %Arg_1.48286 = f32[] parameter(1)
  ROOT %add.48287 = f32[] add(%Arg_0.48285, %Arg_1.48286)
}

%region_2301.48288.clone (Arg_0.2388: f32[], Arg_1.2058: f32[]) -> f32[] {
  %Arg_0.2388 = f32[] parameter(0)
  %Arg_1.2058 = f32[] parameter(1)
  ROOT %add.2088 = f32[] add(%Arg_0.2388, %Arg_1.2058)
}

%region_2302.48297 (Arg_0.48294: f32[], Arg_1.48295: f32[]) -> f32[] {
  %Arg_0.48294 = f32[] parameter(0)
  %Arg_1.48295 = f32[] parameter(1)
  ROOT %add.48296 = f32[] add(%Arg_0.48294, %Arg_1.48295)
}

%region_2302.48297.clone (Arg_0.2389: f32[], Arg_1.2059: f32[]) -> f32[] {
  %Arg_0.2389 = f32[] parameter(0)
  %Arg_1.2059 = f32[] parameter(1)
  ROOT %add.2089 = f32[] add(%Arg_0.2389, %Arg_1.2059)
}

%region_2303.48306 (Arg_0.48303: f32[], Arg_1.48304: f32[]) -> f32[] {
  %Arg_0.48303 = f32[] parameter(0)
  %Arg_1.48304 = f32[] parameter(1)
  ROOT %add.48305 = f32[] add(%Arg_0.48303, %Arg_1.48304)
}

%region_2303.48306.clone (Arg_0.2390: f32[], Arg_1.2061: f32[]) -> f32[] {
  %Arg_0.2390 = f32[] parameter(0)
  %Arg_1.2061 = f32[] parameter(1)
  ROOT %add.2090 = f32[] add(%Arg_0.2390, %Arg_1.2061)
}

%region_2304.48315 (Arg_0.48312: f32[], Arg_1.48313: f32[]) -> f32[] {
  %Arg_0.48312 = f32[] parameter(0)
  %Arg_1.48313 = f32[] parameter(1)
  ROOT %add.48314 = f32[] add(%Arg_0.48312, %Arg_1.48313)
}

%region_2304.48315.clone (Arg_0.2391: f32[], Arg_1.2062: f32[]) -> f32[] {
  %Arg_0.2391 = f32[] parameter(0)
  %Arg_1.2062 = f32[] parameter(1)
  ROOT %add.2092 = f32[] add(%Arg_0.2391, %Arg_1.2062)
}

%region_2305.48324 (Arg_0.48321: f32[], Arg_1.48322: f32[]) -> f32[] {
  %Arg_0.48321 = f32[] parameter(0)
  %Arg_1.48322 = f32[] parameter(1)
  ROOT %add.48323 = f32[] add(%Arg_0.48321, %Arg_1.48322)
}

%region_2305.48324.clone (Arg_0.2392: f32[], Arg_1.2063: f32[]) -> f32[] {
  %Arg_0.2392 = f32[] parameter(0)
  %Arg_1.2063 = f32[] parameter(1)
  ROOT %add.2093 = f32[] add(%Arg_0.2392, %Arg_1.2063)
}

%region_2306.48333 (Arg_0.48330: f32[], Arg_1.48331: f32[]) -> f32[] {
  %Arg_0.48330 = f32[] parameter(0)
  %Arg_1.48331 = f32[] parameter(1)
  ROOT %add.48332 = f32[] add(%Arg_0.48330, %Arg_1.48331)
}

%region_2306.48333.clone (Arg_0.2394: f32[], Arg_1.2064: f32[]) -> f32[] {
  %Arg_0.2394 = f32[] parameter(0)
  %Arg_1.2064 = f32[] parameter(1)
  ROOT %add.2094 = f32[] add(%Arg_0.2394, %Arg_1.2064)
}

%region_2307.48342 (Arg_0.48339: f32[], Arg_1.48340: f32[]) -> f32[] {
  %Arg_0.48339 = f32[] parameter(0)
  %Arg_1.48340 = f32[] parameter(1)
  ROOT %add.48341 = f32[] add(%Arg_0.48339, %Arg_1.48340)
}

%region_2308.48351 (Arg_0.48348: f32[], Arg_1.48349: f32[]) -> f32[] {
  %Arg_0.48348 = f32[] parameter(0)
  %Arg_1.48349 = f32[] parameter(1)
  ROOT %add.48350 = f32[] add(%Arg_0.48348, %Arg_1.48349)
}

%region_2309.48360 (Arg_0.48357: f32[], Arg_1.48358: f32[]) -> f32[] {
  %Arg_0.48357 = f32[] parameter(0)
  %Arg_1.48358 = f32[] parameter(1)
  ROOT %add.48359 = f32[] add(%Arg_0.48357, %Arg_1.48358)
}

%region_2309.48360.clone (Arg_0.2395: f32[], Arg_1.2065: f32[]) -> f32[] {
  %Arg_0.2395 = f32[] parameter(0)
  %Arg_1.2065 = f32[] parameter(1)
  ROOT %add.2095 = f32[] add(%Arg_0.2395, %Arg_1.2065)
}

%region_2310.48369 (Arg_0.48366: f32[], Arg_1.48367: f32[]) -> f32[] {
  %Arg_0.48366 = f32[] parameter(0)
  %Arg_1.48367 = f32[] parameter(1)
  ROOT %add.48368 = f32[] add(%Arg_0.48366, %Arg_1.48367)
}

%region_2310.48369.clone (Arg_0.2396: f32[], Arg_1.2066: f32[]) -> f32[] {
  %Arg_0.2396 = f32[] parameter(0)
  %Arg_1.2066 = f32[] parameter(1)
  ROOT %add.2096 = f32[] add(%Arg_0.2396, %Arg_1.2066)
}

%region_2311.48378 (Arg_0.48375: f32[], Arg_1.48376: f32[]) -> f32[] {
  %Arg_0.48375 = f32[] parameter(0)
  %Arg_1.48376 = f32[] parameter(1)
  ROOT %add.48377 = f32[] add(%Arg_0.48375, %Arg_1.48376)
}

%region_2311.48378.clone (Arg_0.2397: f32[], Arg_1.2068: f32[]) -> f32[] {
  %Arg_0.2397 = f32[] parameter(0)
  %Arg_1.2068 = f32[] parameter(1)
  ROOT %add.2097 = f32[] add(%Arg_0.2397, %Arg_1.2068)
}

%region_2312.48387 (Arg_0.48384: f32[], Arg_1.48385: f32[]) -> f32[] {
  %Arg_0.48384 = f32[] parameter(0)
  %Arg_1.48385 = f32[] parameter(1)
  ROOT %add.48386 = f32[] add(%Arg_0.48384, %Arg_1.48385)
}

%region_2312.48387.clone (Arg_0.2398: f32[], Arg_1.2069: f32[]) -> f32[] {
  %Arg_0.2398 = f32[] parameter(0)
  %Arg_1.2069 = f32[] parameter(1)
  ROOT %add.2098 = f32[] add(%Arg_0.2398, %Arg_1.2069)
}

%region_2313.48396 (Arg_0.48393: f32[], Arg_1.48394: f32[]) -> f32[] {
  %Arg_0.48393 = f32[] parameter(0)
  %Arg_1.48394 = f32[] parameter(1)
  ROOT %add.48395 = f32[] add(%Arg_0.48393, %Arg_1.48394)
}

%region_2313.48396.clone (Arg_0.2399: f32[], Arg_1.2070: f32[]) -> f32[] {
  %Arg_0.2399 = f32[] parameter(0)
  %Arg_1.2070 = f32[] parameter(1)
  ROOT %add.2099 = f32[] add(%Arg_0.2399, %Arg_1.2070)
}

%region_2314.48405 (Arg_0.48402: f32[], Arg_1.48403: f32[]) -> f32[] {
  %Arg_0.48402 = f32[] parameter(0)
  %Arg_1.48403 = f32[] parameter(1)
  ROOT %add.48404 = f32[] add(%Arg_0.48402, %Arg_1.48403)
}

%region_2314.48405.clone (Arg_0.2400: f32[], Arg_1.2071: f32[]) -> f32[] {
  %Arg_0.2400 = f32[] parameter(0)
  %Arg_1.2071 = f32[] parameter(1)
  ROOT %add.2100 = f32[] add(%Arg_0.2400, %Arg_1.2071)
}

%region_2315.48414 (Arg_0.48411: f32[], Arg_1.48412: f32[]) -> f32[] {
  %Arg_0.48411 = f32[] parameter(0)
  %Arg_1.48412 = f32[] parameter(1)
  ROOT %add.48413 = f32[] add(%Arg_0.48411, %Arg_1.48412)
}

%region_2315.48414.clone (Arg_0.2401: f32[], Arg_1.2072: f32[]) -> f32[] {
  %Arg_0.2401 = f32[] parameter(0)
  %Arg_1.2072 = f32[] parameter(1)
  ROOT %add.2101 = f32[] add(%Arg_0.2401, %Arg_1.2072)
}

%region_2316.48423 (Arg_0.48420: f32[], Arg_1.48421: f32[]) -> f32[] {
  %Arg_0.48420 = f32[] parameter(0)
  %Arg_1.48421 = f32[] parameter(1)
  ROOT %add.48422 = f32[] add(%Arg_0.48420, %Arg_1.48421)
}

%region_2316.48423.clone (Arg_0.2402: f32[], Arg_1.2073: f32[]) -> f32[] {
  %Arg_0.2402 = f32[] parameter(0)
  %Arg_1.2073 = f32[] parameter(1)
  ROOT %add.2102 = f32[] add(%Arg_0.2402, %Arg_1.2073)
}

%region_2317.48432 (Arg_0.48429: f32[], Arg_1.48430: f32[]) -> f32[] {
  %Arg_0.48429 = f32[] parameter(0)
  %Arg_1.48430 = f32[] parameter(1)
  ROOT %add.48431 = f32[] add(%Arg_0.48429, %Arg_1.48430)
}

%region_2318.48441 (Arg_0.48438: f32[], Arg_1.48439: f32[]) -> f32[] {
  %Arg_0.48438 = f32[] parameter(0)
  %Arg_1.48439 = f32[] parameter(1)
  ROOT %add.48440 = f32[] add(%Arg_0.48438, %Arg_1.48439)
}

%region_2319.48450 (Arg_0.48447: f32[], Arg_1.48448: f32[]) -> f32[] {
  %Arg_0.48447 = f32[] parameter(0)
  %Arg_1.48448 = f32[] parameter(1)
  ROOT %add.48449 = f32[] add(%Arg_0.48447, %Arg_1.48448)
}

%region_2319.48450.clone (Arg_0.2403: f32[], Arg_1.2074: f32[]) -> f32[] {
  %Arg_0.2403 = f32[] parameter(0)
  %Arg_1.2074 = f32[] parameter(1)
  ROOT %add.2103 = f32[] add(%Arg_0.2403, %Arg_1.2074)
}

%region_2320.48459 (Arg_0.48456: f32[], Arg_1.48457: f32[]) -> f32[] {
  %Arg_0.48456 = f32[] parameter(0)
  %Arg_1.48457 = f32[] parameter(1)
  ROOT %add.48458 = f32[] add(%Arg_0.48456, %Arg_1.48457)
}

%region_2320.48459.clone (Arg_0.2404: f32[], Arg_1.2075: f32[]) -> f32[] {
  %Arg_0.2404 = f32[] parameter(0)
  %Arg_1.2075 = f32[] parameter(1)
  ROOT %add.2104 = f32[] add(%Arg_0.2404, %Arg_1.2075)
}

%region_2321.48468 (Arg_0.48465: f32[], Arg_1.48466: f32[]) -> f32[] {
  %Arg_0.48465 = f32[] parameter(0)
  %Arg_1.48466 = f32[] parameter(1)
  ROOT %add.48467 = f32[] add(%Arg_0.48465, %Arg_1.48466)
}

%region_2321.48468.clone (Arg_0.2405: f32[], Arg_1.2076: f32[]) -> f32[] {
  %Arg_0.2405 = f32[] parameter(0)
  %Arg_1.2076 = f32[] parameter(1)
  ROOT %add.2105 = f32[] add(%Arg_0.2405, %Arg_1.2076)
}

%region_2322.48477 (Arg_0.48474: f32[], Arg_1.48475: f32[]) -> f32[] {
  %Arg_0.48474 = f32[] parameter(0)
  %Arg_1.48475 = f32[] parameter(1)
  ROOT %add.48476 = f32[] add(%Arg_0.48474, %Arg_1.48475)
}

%region_2322.48477.clone (Arg_0.2406: f32[], Arg_1.2077: f32[]) -> f32[] {
  %Arg_0.2406 = f32[] parameter(0)
  %Arg_1.2077 = f32[] parameter(1)
  ROOT %add.2106 = f32[] add(%Arg_0.2406, %Arg_1.2077)
}

%region_2323.48486 (Arg_0.48483: f32[], Arg_1.48484: f32[]) -> f32[] {
  %Arg_0.48483 = f32[] parameter(0)
  %Arg_1.48484 = f32[] parameter(1)
  ROOT %add.48485 = f32[] add(%Arg_0.48483, %Arg_1.48484)
}

%region_2323.48486.clone (Arg_0.2407: f32[], Arg_1.2078: f32[]) -> f32[] {
  %Arg_0.2407 = f32[] parameter(0)
  %Arg_1.2078 = f32[] parameter(1)
  ROOT %add.2107 = f32[] add(%Arg_0.2407, %Arg_1.2078)
}

%region_2324.48495 (Arg_0.48492: f32[], Arg_1.48493: f32[]) -> f32[] {
  %Arg_0.48492 = f32[] parameter(0)
  %Arg_1.48493 = f32[] parameter(1)
  ROOT %add.48494 = f32[] add(%Arg_0.48492, %Arg_1.48493)
}

%region_2324.48495.clone (Arg_0.2408: f32[], Arg_1.2079: f32[]) -> f32[] {
  %Arg_0.2408 = f32[] parameter(0)
  %Arg_1.2079 = f32[] parameter(1)
  ROOT %add.2108 = f32[] add(%Arg_0.2408, %Arg_1.2079)
}

%region_2325.48504 (Arg_0.48501: f32[], Arg_1.48502: f32[]) -> f32[] {
  %Arg_0.48501 = f32[] parameter(0)
  %Arg_1.48502 = f32[] parameter(1)
  ROOT %add.48503 = f32[] add(%Arg_0.48501, %Arg_1.48502)
}

%region_2325.48504.clone (Arg_0.2409: f32[], Arg_1.2080: f32[]) -> f32[] {
  %Arg_0.2409 = f32[] parameter(0)
  %Arg_1.2080 = f32[] parameter(1)
  ROOT %add.2109 = f32[] add(%Arg_0.2409, %Arg_1.2080)
}

%region_2326.48513 (Arg_0.48510: f32[], Arg_1.48511: f32[]) -> f32[] {
  %Arg_0.48510 = f32[] parameter(0)
  %Arg_1.48511 = f32[] parameter(1)
  ROOT %add.48512 = f32[] add(%Arg_0.48510, %Arg_1.48511)
}

%region_2326.48513.clone (Arg_0.2410: f32[], Arg_1.2082: f32[]) -> f32[] {
  %Arg_0.2410 = f32[] parameter(0)
  %Arg_1.2082 = f32[] parameter(1)
  ROOT %add.2110 = f32[] add(%Arg_0.2410, %Arg_1.2082)
}

%region_2327.48522 (Arg_0.48519: f32[], Arg_1.48520: f32[]) -> f32[] {
  %Arg_0.48519 = f32[] parameter(0)
  %Arg_1.48520 = f32[] parameter(1)
  ROOT %add.48521 = f32[] add(%Arg_0.48519, %Arg_1.48520)
}

%region_2328.48531 (Arg_0.48528: f32[], Arg_1.48529: f32[]) -> f32[] {
  %Arg_0.48528 = f32[] parameter(0)
  %Arg_1.48529 = f32[] parameter(1)
  ROOT %add.48530 = f32[] add(%Arg_0.48528, %Arg_1.48529)
}

%region_2329.48540 (Arg_0.48537: f32[], Arg_1.48538: f32[]) -> f32[] {
  %Arg_0.48537 = f32[] parameter(0)
  %Arg_1.48538 = f32[] parameter(1)
  ROOT %add.48539 = f32[] add(%Arg_0.48537, %Arg_1.48538)
}

%region_2329.48540.clone (Arg_0.2411: f32[], Arg_1.2083: f32[]) -> f32[] {
  %Arg_0.2411 = f32[] parameter(0)
  %Arg_1.2083 = f32[] parameter(1)
  ROOT %add.2111 = f32[] add(%Arg_0.2411, %Arg_1.2083)
}

%region_2330.48549 (Arg_0.48546: f32[], Arg_1.48547: f32[]) -> f32[] {
  %Arg_0.48546 = f32[] parameter(0)
  %Arg_1.48547 = f32[] parameter(1)
  ROOT %add.48548 = f32[] add(%Arg_0.48546, %Arg_1.48547)
}

%region_2330.48549.clone (Arg_0.2412: f32[], Arg_1.2084: f32[]) -> f32[] {
  %Arg_0.2412 = f32[] parameter(0)
  %Arg_1.2084 = f32[] parameter(1)
  ROOT %add.2112 = f32[] add(%Arg_0.2412, %Arg_1.2084)
}

%region_2331.48558 (Arg_0.48555: f32[], Arg_1.48556: f32[]) -> f32[] {
  %Arg_0.48555 = f32[] parameter(0)
  %Arg_1.48556 = f32[] parameter(1)
  ROOT %add.48557 = f32[] add(%Arg_0.48555, %Arg_1.48556)
}

%region_2331.48558.clone (Arg_0.2413: f32[], Arg_1.2085: f32[]) -> f32[] {
  %Arg_0.2413 = f32[] parameter(0)
  %Arg_1.2085 = f32[] parameter(1)
  ROOT %add.2113 = f32[] add(%Arg_0.2413, %Arg_1.2085)
}

%region_2332.48567 (Arg_0.48564: f32[], Arg_1.48565: f32[]) -> f32[] {
  %Arg_0.48564 = f32[] parameter(0)
  %Arg_1.48565 = f32[] parameter(1)
  ROOT %add.48566 = f32[] add(%Arg_0.48564, %Arg_1.48565)
}

%region_2332.48567.clone (Arg_0.2414: f32[], Arg_1.2086: f32[]) -> f32[] {
  %Arg_0.2414 = f32[] parameter(0)
  %Arg_1.2086 = f32[] parameter(1)
  ROOT %add.2114 = f32[] add(%Arg_0.2414, %Arg_1.2086)
}

%region_2333.48576 (Arg_0.48573: f32[], Arg_1.48574: f32[]) -> f32[] {
  %Arg_0.48573 = f32[] parameter(0)
  %Arg_1.48574 = f32[] parameter(1)
  ROOT %add.48575 = f32[] add(%Arg_0.48573, %Arg_1.48574)
}

%region_2333.48576.clone (Arg_0.2415: f32[], Arg_1.2087: f32[]) -> f32[] {
  %Arg_0.2415 = f32[] parameter(0)
  %Arg_1.2087 = f32[] parameter(1)
  ROOT %add.2115 = f32[] add(%Arg_0.2415, %Arg_1.2087)
}

%region_2334.48585 (Arg_0.48582: f32[], Arg_1.48583: f32[]) -> f32[] {
  %Arg_0.48582 = f32[] parameter(0)
  %Arg_1.48583 = f32[] parameter(1)
  ROOT %add.48584 = f32[] add(%Arg_0.48582, %Arg_1.48583)
}

%region_2334.48585.clone (Arg_0.2416: f32[], Arg_1.2088: f32[]) -> f32[] {
  %Arg_0.2416 = f32[] parameter(0)
  %Arg_1.2088 = f32[] parameter(1)
  ROOT %add.2116 = f32[] add(%Arg_0.2416, %Arg_1.2088)
}

%region_2335.48594 (Arg_0.48591: f32[], Arg_1.48592: f32[]) -> f32[] {
  %Arg_0.48591 = f32[] parameter(0)
  %Arg_1.48592 = f32[] parameter(1)
  ROOT %add.48593 = f32[] add(%Arg_0.48591, %Arg_1.48592)
}

%region_2335.48594.clone (Arg_0.2417: f32[], Arg_1.2089: f32[]) -> f32[] {
  %Arg_0.2417 = f32[] parameter(0)
  %Arg_1.2089 = f32[] parameter(1)
  ROOT %add.2117 = f32[] add(%Arg_0.2417, %Arg_1.2089)
}

%region_2336.48603 (Arg_0.48600: f32[], Arg_1.48601: f32[]) -> f32[] {
  %Arg_0.48600 = f32[] parameter(0)
  %Arg_1.48601 = f32[] parameter(1)
  ROOT %add.48602 = f32[] add(%Arg_0.48600, %Arg_1.48601)
}

%region_2336.48603.clone (Arg_0.2418: f32[], Arg_1.2091: f32[]) -> f32[] {
  %Arg_0.2418 = f32[] parameter(0)
  %Arg_1.2091 = f32[] parameter(1)
  ROOT %add.2118 = f32[] add(%Arg_0.2418, %Arg_1.2091)
}

%region_2337.48612 (Arg_0.48609: f32[], Arg_1.48610: f32[]) -> f32[] {
  %Arg_0.48609 = f32[] parameter(0)
  %Arg_1.48610 = f32[] parameter(1)
  ROOT %add.48611 = f32[] add(%Arg_0.48609, %Arg_1.48610)
}

%region_2338.48621 (Arg_0.48618: f32[], Arg_1.48619: f32[]) -> f32[] {
  %Arg_0.48618 = f32[] parameter(0)
  %Arg_1.48619 = f32[] parameter(1)
  ROOT %add.48620 = f32[] add(%Arg_0.48618, %Arg_1.48619)
}

%region_2339.48630 (Arg_0.48627: f32[], Arg_1.48628: f32[]) -> f32[] {
  %Arg_0.48627 = f32[] parameter(0)
  %Arg_1.48628 = f32[] parameter(1)
  ROOT %add.48629 = f32[] add(%Arg_0.48627, %Arg_1.48628)
}

%region_2339.48630.clone (Arg_0.2419: f32[], Arg_1.2092: f32[]) -> f32[] {
  %Arg_0.2419 = f32[] parameter(0)
  %Arg_1.2092 = f32[] parameter(1)
  ROOT %add.2119 = f32[] add(%Arg_0.2419, %Arg_1.2092)
}

%region_2340.48639 (Arg_0.48636: f32[], Arg_1.48637: f32[]) -> f32[] {
  %Arg_0.48636 = f32[] parameter(0)
  %Arg_1.48637 = f32[] parameter(1)
  ROOT %add.48638 = f32[] add(%Arg_0.48636, %Arg_1.48637)
}

%region_2340.48639.clone (Arg_0.2420: f32[], Arg_1.2093: f32[]) -> f32[] {
  %Arg_0.2420 = f32[] parameter(0)
  %Arg_1.2093 = f32[] parameter(1)
  ROOT %add.2120 = f32[] add(%Arg_0.2420, %Arg_1.2093)
}

%region_2341.48648 (Arg_0.48645: f32[], Arg_1.48646: f32[]) -> f32[] {
  %Arg_0.48645 = f32[] parameter(0)
  %Arg_1.48646 = f32[] parameter(1)
  ROOT %add.48647 = f32[] add(%Arg_0.48645, %Arg_1.48646)
}

%region_2341.48648.clone (Arg_0.2421: f32[], Arg_1.2094: f32[]) -> f32[] {
  %Arg_0.2421 = f32[] parameter(0)
  %Arg_1.2094 = f32[] parameter(1)
  ROOT %add.2121 = f32[] add(%Arg_0.2421, %Arg_1.2094)
}

%region_2342.48657 (Arg_0.48654: f32[], Arg_1.48655: f32[]) -> f32[] {
  %Arg_0.48654 = f32[] parameter(0)
  %Arg_1.48655 = f32[] parameter(1)
  ROOT %add.48656 = f32[] add(%Arg_0.48654, %Arg_1.48655)
}

%region_2342.48657.clone (Arg_0.2422: f32[], Arg_1.2095: f32[]) -> f32[] {
  %Arg_0.2422 = f32[] parameter(0)
  %Arg_1.2095 = f32[] parameter(1)
  ROOT %add.2122 = f32[] add(%Arg_0.2422, %Arg_1.2095)
}

%region_2343.48666 (Arg_0.48663: f32[], Arg_1.48664: f32[]) -> f32[] {
  %Arg_0.48663 = f32[] parameter(0)
  %Arg_1.48664 = f32[] parameter(1)
  ROOT %add.48665 = f32[] add(%Arg_0.48663, %Arg_1.48664)
}

%region_2343.48666.clone (Arg_0.2423: f32[], Arg_1.2096: f32[]) -> f32[] {
  %Arg_0.2423 = f32[] parameter(0)
  %Arg_1.2096 = f32[] parameter(1)
  ROOT %add.2124 = f32[] add(%Arg_0.2423, %Arg_1.2096)
}

%region_2344.48675 (Arg_0.48672: f32[], Arg_1.48673: f32[]) -> f32[] {
  %Arg_0.48672 = f32[] parameter(0)
  %Arg_1.48673 = f32[] parameter(1)
  ROOT %add.48674 = f32[] add(%Arg_0.48672, %Arg_1.48673)
}

%region_2344.48675.clone (Arg_0.2424: f32[], Arg_1.2097: f32[]) -> f32[] {
  %Arg_0.2424 = f32[] parameter(0)
  %Arg_1.2097 = f32[] parameter(1)
  ROOT %add.2125 = f32[] add(%Arg_0.2424, %Arg_1.2097)
}

%region_2345.48684 (Arg_0.48681: f32[], Arg_1.48682: f32[]) -> f32[] {
  %Arg_0.48681 = f32[] parameter(0)
  %Arg_1.48682 = f32[] parameter(1)
  ROOT %add.48683 = f32[] add(%Arg_0.48681, %Arg_1.48682)
}

%region_2345.48684.clone (Arg_0.2425: f32[], Arg_1.2098: f32[]) -> f32[] {
  %Arg_0.2425 = f32[] parameter(0)
  %Arg_1.2098 = f32[] parameter(1)
  ROOT %add.2126 = f32[] add(%Arg_0.2425, %Arg_1.2098)
}

%region_2346.48693 (Arg_0.48690: f32[], Arg_1.48691: f32[]) -> f32[] {
  %Arg_0.48690 = f32[] parameter(0)
  %Arg_1.48691 = f32[] parameter(1)
  ROOT %add.48692 = f32[] add(%Arg_0.48690, %Arg_1.48691)
}

%region_2346.48693.clone (Arg_0.2426: f32[], Arg_1.2099: f32[]) -> f32[] {
  %Arg_0.2426 = f32[] parameter(0)
  %Arg_1.2099 = f32[] parameter(1)
  ROOT %add.2127 = f32[] add(%Arg_0.2426, %Arg_1.2099)
}

%region_2347.48702 (Arg_0.48699: f32[], Arg_1.48700: f32[]) -> f32[] {
  %Arg_0.48699 = f32[] parameter(0)
  %Arg_1.48700 = f32[] parameter(1)
  ROOT %add.48701 = f32[] add(%Arg_0.48699, %Arg_1.48700)
}

%region_2348.48711 (Arg_0.48708: f32[], Arg_1.48709: f32[]) -> f32[] {
  %Arg_0.48708 = f32[] parameter(0)
  %Arg_1.48709 = f32[] parameter(1)
  ROOT %add.48710 = f32[] add(%Arg_0.48708, %Arg_1.48709)
}

%region_2349.48720 (Arg_0.48717: f32[], Arg_1.48718: f32[]) -> f32[] {
  %Arg_0.48717 = f32[] parameter(0)
  %Arg_1.48718 = f32[] parameter(1)
  ROOT %add.48719 = f32[] add(%Arg_0.48717, %Arg_1.48718)
}

%region_2349.48720.clone (Arg_0.2427: f32[], Arg_1.2100: f32[]) -> f32[] {
  %Arg_0.2427 = f32[] parameter(0)
  %Arg_1.2100 = f32[] parameter(1)
  ROOT %add.2128 = f32[] add(%Arg_0.2427, %Arg_1.2100)
}

%region_2350.48729 (Arg_0.48726: f32[], Arg_1.48727: f32[]) -> f32[] {
  %Arg_0.48726 = f32[] parameter(0)
  %Arg_1.48727 = f32[] parameter(1)
  ROOT %add.48728 = f32[] add(%Arg_0.48726, %Arg_1.48727)
}

%region_2350.48729.clone (Arg_0.2428: f32[], Arg_1.2101: f32[]) -> f32[] {
  %Arg_0.2428 = f32[] parameter(0)
  %Arg_1.2101 = f32[] parameter(1)
  ROOT %add.2129 = f32[] add(%Arg_0.2428, %Arg_1.2101)
}

%region_2351.48738 (Arg_0.48735: f32[], Arg_1.48736: f32[]) -> f32[] {
  %Arg_0.48735 = f32[] parameter(0)
  %Arg_1.48736 = f32[] parameter(1)
  ROOT %add.48737 = f32[] add(%Arg_0.48735, %Arg_1.48736)
}

%region_2351.48738.clone (Arg_0.2429: f32[], Arg_1.2102: f32[]) -> f32[] {
  %Arg_0.2429 = f32[] parameter(0)
  %Arg_1.2102 = f32[] parameter(1)
  ROOT %add.2131 = f32[] add(%Arg_0.2429, %Arg_1.2102)
}

%region_2352.48747 (Arg_0.48744: f32[], Arg_1.48745: f32[]) -> f32[] {
  %Arg_0.48744 = f32[] parameter(0)
  %Arg_1.48745 = f32[] parameter(1)
  ROOT %add.48746 = f32[] add(%Arg_0.48744, %Arg_1.48745)
}

%region_2352.48747.clone (Arg_0.2430: f32[], Arg_1.2103: f32[]) -> f32[] {
  %Arg_0.2430 = f32[] parameter(0)
  %Arg_1.2103 = f32[] parameter(1)
  ROOT %add.2132 = f32[] add(%Arg_0.2430, %Arg_1.2103)
}

%region_2353.48756 (Arg_0.48753: f32[], Arg_1.48754: f32[]) -> f32[] {
  %Arg_0.48753 = f32[] parameter(0)
  %Arg_1.48754 = f32[] parameter(1)
  ROOT %add.48755 = f32[] add(%Arg_0.48753, %Arg_1.48754)
}

%region_2353.48756.clone (Arg_0.2431: f32[], Arg_1.2104: f32[]) -> f32[] {
  %Arg_0.2431 = f32[] parameter(0)
  %Arg_1.2104 = f32[] parameter(1)
  ROOT %add.2133 = f32[] add(%Arg_0.2431, %Arg_1.2104)
}

%region_2354.48765 (Arg_0.48762: f32[], Arg_1.48763: f32[]) -> f32[] {
  %Arg_0.48762 = f32[] parameter(0)
  %Arg_1.48763 = f32[] parameter(1)
  ROOT %add.48764 = f32[] add(%Arg_0.48762, %Arg_1.48763)
}

%region_2354.48765.clone (Arg_0.2433: f32[], Arg_1.2105: f32[]) -> f32[] {
  %Arg_0.2433 = f32[] parameter(0)
  %Arg_1.2105 = f32[] parameter(1)
  ROOT %add.2134 = f32[] add(%Arg_0.2433, %Arg_1.2105)
}

%region_2355.48774 (Arg_0.48771: f32[], Arg_1.48772: f32[]) -> f32[] {
  %Arg_0.48771 = f32[] parameter(0)
  %Arg_1.48772 = f32[] parameter(1)
  ROOT %add.48773 = f32[] add(%Arg_0.48771, %Arg_1.48772)
}

%region_2355.48774.clone (Arg_0.2434: f32[], Arg_1.2106: f32[]) -> f32[] {
  %Arg_0.2434 = f32[] parameter(0)
  %Arg_1.2106 = f32[] parameter(1)
  ROOT %add.2136 = f32[] add(%Arg_0.2434, %Arg_1.2106)
}

%region_2356.48783 (Arg_0.48780: f32[], Arg_1.48781: f32[]) -> f32[] {
  %Arg_0.48780 = f32[] parameter(0)
  %Arg_1.48781 = f32[] parameter(1)
  ROOT %add.48782 = f32[] add(%Arg_0.48780, %Arg_1.48781)
}

%region_2356.48783.clone (Arg_0.2435: f32[], Arg_1.2107: f32[]) -> f32[] {
  %Arg_0.2435 = f32[] parameter(0)
  %Arg_1.2107 = f32[] parameter(1)
  ROOT %add.2137 = f32[] add(%Arg_0.2435, %Arg_1.2107)
}

%region_2357.48792 (Arg_0.48789: f32[], Arg_1.48790: f32[]) -> f32[] {
  %Arg_0.48789 = f32[] parameter(0)
  %Arg_1.48790 = f32[] parameter(1)
  ROOT %add.48791 = f32[] add(%Arg_0.48789, %Arg_1.48790)
}

%region_2358.48801 (Arg_0.48798: f32[], Arg_1.48799: f32[]) -> f32[] {
  %Arg_0.48798 = f32[] parameter(0)
  %Arg_1.48799 = f32[] parameter(1)
  ROOT %add.48800 = f32[] add(%Arg_0.48798, %Arg_1.48799)
}

%region_2359.48810 (Arg_0.48807: f32[], Arg_1.48808: f32[]) -> f32[] {
  %Arg_0.48807 = f32[] parameter(0)
  %Arg_1.48808 = f32[] parameter(1)
  ROOT %add.48809 = f32[] add(%Arg_0.48807, %Arg_1.48808)
}

%region_2359.48810.clone (Arg_0.2436: f32[], Arg_1.2108: f32[]) -> f32[] {
  %Arg_0.2436 = f32[] parameter(0)
  %Arg_1.2108 = f32[] parameter(1)
  ROOT %add.2138 = f32[] add(%Arg_0.2436, %Arg_1.2108)
}

%region_2360.48819 (Arg_0.48816: f32[], Arg_1.48817: f32[]) -> f32[] {
  %Arg_0.48816 = f32[] parameter(0)
  %Arg_1.48817 = f32[] parameter(1)
  ROOT %add.48818 = f32[] add(%Arg_0.48816, %Arg_1.48817)
}

%region_2360.48819.clone (Arg_0.2437: f32[], Arg_1.2109: f32[]) -> f32[] {
  %Arg_0.2437 = f32[] parameter(0)
  %Arg_1.2109 = f32[] parameter(1)
  ROOT %add.2139 = f32[] add(%Arg_0.2437, %Arg_1.2109)
}

%region_2361.48828 (Arg_0.48825: f32[], Arg_1.48826: f32[]) -> f32[] {
  %Arg_0.48825 = f32[] parameter(0)
  %Arg_1.48826 = f32[] parameter(1)
  ROOT %add.48827 = f32[] add(%Arg_0.48825, %Arg_1.48826)
}

%region_2361.48828.clone (Arg_0.2438: f32[], Arg_1.2110: f32[]) -> f32[] {
  %Arg_0.2438 = f32[] parameter(0)
  %Arg_1.2110 = f32[] parameter(1)
  ROOT %add.2140 = f32[] add(%Arg_0.2438, %Arg_1.2110)
}

%region_2362.48837 (Arg_0.48834: f32[], Arg_1.48835: f32[]) -> f32[] {
  %Arg_0.48834 = f32[] parameter(0)
  %Arg_1.48835 = f32[] parameter(1)
  ROOT %add.48836 = f32[] add(%Arg_0.48834, %Arg_1.48835)
}

%region_2362.48837.clone (Arg_0.2439: f32[], Arg_1.2111: f32[]) -> f32[] {
  %Arg_0.2439 = f32[] parameter(0)
  %Arg_1.2111 = f32[] parameter(1)
  ROOT %add.2141 = f32[] add(%Arg_0.2439, %Arg_1.2111)
}

%region_2363.48846 (Arg_0.48843: f32[], Arg_1.48844: f32[]) -> f32[] {
  %Arg_0.48843 = f32[] parameter(0)
  %Arg_1.48844 = f32[] parameter(1)
  ROOT %add.48845 = f32[] add(%Arg_0.48843, %Arg_1.48844)
}

%region_2363.48846.clone (Arg_0.2440: f32[], Arg_1.2112: f32[]) -> f32[] {
  %Arg_0.2440 = f32[] parameter(0)
  %Arg_1.2112 = f32[] parameter(1)
  ROOT %add.2142 = f32[] add(%Arg_0.2440, %Arg_1.2112)
}

%region_2364.48855 (Arg_0.48852: f32[], Arg_1.48853: f32[]) -> f32[] {
  %Arg_0.48852 = f32[] parameter(0)
  %Arg_1.48853 = f32[] parameter(1)
  ROOT %add.48854 = f32[] add(%Arg_0.48852, %Arg_1.48853)
}

%region_2364.48855.clone (Arg_0.2441: f32[], Arg_1.2113: f32[]) -> f32[] {
  %Arg_0.2441 = f32[] parameter(0)
  %Arg_1.2113 = f32[] parameter(1)
  ROOT %add.2143 = f32[] add(%Arg_0.2441, %Arg_1.2113)
}

%region_2365.48864 (Arg_0.48861: f32[], Arg_1.48862: f32[]) -> f32[] {
  %Arg_0.48861 = f32[] parameter(0)
  %Arg_1.48862 = f32[] parameter(1)
  ROOT %add.48863 = f32[] add(%Arg_0.48861, %Arg_1.48862)
}

%region_2365.48864.clone (Arg_0.2442: f32[], Arg_1.2114: f32[]) -> f32[] {
  %Arg_0.2442 = f32[] parameter(0)
  %Arg_1.2114 = f32[] parameter(1)
  ROOT %add.2144 = f32[] add(%Arg_0.2442, %Arg_1.2114)
}

%region_2366.48873 (Arg_0.48870: f32[], Arg_1.48871: f32[]) -> f32[] {
  %Arg_0.48870 = f32[] parameter(0)
  %Arg_1.48871 = f32[] parameter(1)
  ROOT %add.48872 = f32[] add(%Arg_0.48870, %Arg_1.48871)
}

%region_2366.48873.clone (Arg_0.2443: f32[], Arg_1.2115: f32[]) -> f32[] {
  %Arg_0.2443 = f32[] parameter(0)
  %Arg_1.2115 = f32[] parameter(1)
  ROOT %add.2145 = f32[] add(%Arg_0.2443, %Arg_1.2115)
}

%region_2367.48882 (Arg_0.48879: f32[], Arg_1.48880: f32[]) -> f32[] {
  %Arg_0.48879 = f32[] parameter(0)
  %Arg_1.48880 = f32[] parameter(1)
  ROOT %add.48881 = f32[] add(%Arg_0.48879, %Arg_1.48880)
}

%region_2368.48891 (Arg_0.48888: f32[], Arg_1.48889: f32[]) -> f32[] {
  %Arg_0.48888 = f32[] parameter(0)
  %Arg_1.48889 = f32[] parameter(1)
  ROOT %add.48890 = f32[] add(%Arg_0.48888, %Arg_1.48889)
}

%region_2369.48900 (Arg_0.48897: f32[], Arg_1.48898: f32[]) -> f32[] {
  %Arg_0.48897 = f32[] parameter(0)
  %Arg_1.48898 = f32[] parameter(1)
  ROOT %add.48899 = f32[] add(%Arg_0.48897, %Arg_1.48898)
}

%region_2369.48900.clone (Arg_0.2444: f32[], Arg_1.2116: f32[]) -> f32[] {
  %Arg_0.2444 = f32[] parameter(0)
  %Arg_1.2116 = f32[] parameter(1)
  ROOT %add.2146 = f32[] add(%Arg_0.2444, %Arg_1.2116)
}

%region_2370.48909 (Arg_0.48906: f32[], Arg_1.48907: f32[]) -> f32[] {
  %Arg_0.48906 = f32[] parameter(0)
  %Arg_1.48907 = f32[] parameter(1)
  ROOT %add.48908 = f32[] add(%Arg_0.48906, %Arg_1.48907)
}

%region_2370.48909.clone (Arg_0.2445: f32[], Arg_1.2117: f32[]) -> f32[] {
  %Arg_0.2445 = f32[] parameter(0)
  %Arg_1.2117 = f32[] parameter(1)
  ROOT %add.2147 = f32[] add(%Arg_0.2445, %Arg_1.2117)
}

%region_2371.48918 (Arg_0.48915: f32[], Arg_1.48916: f32[]) -> f32[] {
  %Arg_0.48915 = f32[] parameter(0)
  %Arg_1.48916 = f32[] parameter(1)
  ROOT %add.48917 = f32[] add(%Arg_0.48915, %Arg_1.48916)
}

%region_2371.48918.clone (Arg_0.2446: f32[], Arg_1.2118: f32[]) -> f32[] {
  %Arg_0.2446 = f32[] parameter(0)
  %Arg_1.2118 = f32[] parameter(1)
  ROOT %add.2148 = f32[] add(%Arg_0.2446, %Arg_1.2118)
}

%region_2372.48927 (Arg_0.48924: f32[], Arg_1.48925: f32[]) -> f32[] {
  %Arg_0.48924 = f32[] parameter(0)
  %Arg_1.48925 = f32[] parameter(1)
  ROOT %add.48926 = f32[] add(%Arg_0.48924, %Arg_1.48925)
}

%region_2372.48927.clone (Arg_0.2447: f32[], Arg_1.2119: f32[]) -> f32[] {
  %Arg_0.2447 = f32[] parameter(0)
  %Arg_1.2119 = f32[] parameter(1)
  ROOT %add.2149 = f32[] add(%Arg_0.2447, %Arg_1.2119)
}

%region_2373.48936 (Arg_0.48933: f32[], Arg_1.48934: f32[]) -> f32[] {
  %Arg_0.48933 = f32[] parameter(0)
  %Arg_1.48934 = f32[] parameter(1)
  ROOT %add.48935 = f32[] add(%Arg_0.48933, %Arg_1.48934)
}

%region_2373.48936.clone (Arg_0.2448: f32[], Arg_1.2120: f32[]) -> f32[] {
  %Arg_0.2448 = f32[] parameter(0)
  %Arg_1.2120 = f32[] parameter(1)
  ROOT %add.2150 = f32[] add(%Arg_0.2448, %Arg_1.2120)
}

%region_2374.48945 (Arg_0.48942: f32[], Arg_1.48943: f32[]) -> f32[] {
  %Arg_0.48942 = f32[] parameter(0)
  %Arg_1.48943 = f32[] parameter(1)
  ROOT %add.48944 = f32[] add(%Arg_0.48942, %Arg_1.48943)
}

%region_2374.48945.clone (Arg_0.2449: f32[], Arg_1.2121: f32[]) -> f32[] {
  %Arg_0.2449 = f32[] parameter(0)
  %Arg_1.2121 = f32[] parameter(1)
  ROOT %add.2151 = f32[] add(%Arg_0.2449, %Arg_1.2121)
}

%region_2375.48954 (Arg_0.48951: f32[], Arg_1.48952: f32[]) -> f32[] {
  %Arg_0.48951 = f32[] parameter(0)
  %Arg_1.48952 = f32[] parameter(1)
  ROOT %add.48953 = f32[] add(%Arg_0.48951, %Arg_1.48952)
}

%region_2375.48954.clone (Arg_0.2450: f32[], Arg_1.2122: f32[]) -> f32[] {
  %Arg_0.2450 = f32[] parameter(0)
  %Arg_1.2122 = f32[] parameter(1)
  ROOT %add.2152 = f32[] add(%Arg_0.2450, %Arg_1.2122)
}

%region_2376.48963 (Arg_0.48960: f32[], Arg_1.48961: f32[]) -> f32[] {
  %Arg_0.48960 = f32[] parameter(0)
  %Arg_1.48961 = f32[] parameter(1)
  ROOT %add.48962 = f32[] add(%Arg_0.48960, %Arg_1.48961)
}

%region_2376.48963.clone (Arg_0.2451: f32[], Arg_1.2123: f32[]) -> f32[] {
  %Arg_0.2451 = f32[] parameter(0)
  %Arg_1.2123 = f32[] parameter(1)
  ROOT %add.2153 = f32[] add(%Arg_0.2451, %Arg_1.2123)
}

%region_2377.48972 (Arg_0.48969: f32[], Arg_1.48970: f32[]) -> f32[] {
  %Arg_0.48969 = f32[] parameter(0)
  %Arg_1.48970 = f32[] parameter(1)
  ROOT %add.48971 = f32[] add(%Arg_0.48969, %Arg_1.48970)
}

%region_2378.48981 (Arg_0.48978: f32[], Arg_1.48979: f32[]) -> f32[] {
  %Arg_0.48978 = f32[] parameter(0)
  %Arg_1.48979 = f32[] parameter(1)
  ROOT %add.48980 = f32[] add(%Arg_0.48978, %Arg_1.48979)
}

%region_2379.48990 (Arg_0.48987: f32[], Arg_1.48988: f32[]) -> f32[] {
  %Arg_0.48987 = f32[] parameter(0)
  %Arg_1.48988 = f32[] parameter(1)
  ROOT %add.48989 = f32[] add(%Arg_0.48987, %Arg_1.48988)
}

%region_2379.48990.clone (Arg_0.2452: f32[], Arg_1.2124: f32[]) -> f32[] {
  %Arg_0.2452 = f32[] parameter(0)
  %Arg_1.2124 = f32[] parameter(1)
  ROOT %add.2154 = f32[] add(%Arg_0.2452, %Arg_1.2124)
}

%region_2380.48999 (Arg_0.48996: f32[], Arg_1.48997: f32[]) -> f32[] {
  %Arg_0.48996 = f32[] parameter(0)
  %Arg_1.48997 = f32[] parameter(1)
  ROOT %add.48998 = f32[] add(%Arg_0.48996, %Arg_1.48997)
}

%region_2380.48999.clone (Arg_0.2453: f32[], Arg_1.2125: f32[]) -> f32[] {
  %Arg_0.2453 = f32[] parameter(0)
  %Arg_1.2125 = f32[] parameter(1)
  ROOT %add.2155 = f32[] add(%Arg_0.2453, %Arg_1.2125)
}

%region_2381.49008 (Arg_0.49005: f32[], Arg_1.49006: f32[]) -> f32[] {
  %Arg_0.49005 = f32[] parameter(0)
  %Arg_1.49006 = f32[] parameter(1)
  ROOT %add.49007 = f32[] add(%Arg_0.49005, %Arg_1.49006)
}

%region_2381.49008.clone (Arg_0.2454: f32[], Arg_1.2126: f32[]) -> f32[] {
  %Arg_0.2454 = f32[] parameter(0)
  %Arg_1.2126 = f32[] parameter(1)
  ROOT %add.2156 = f32[] add(%Arg_0.2454, %Arg_1.2126)
}

%region_2382.49017 (Arg_0.49014: f32[], Arg_1.49015: f32[]) -> f32[] {
  %Arg_0.49014 = f32[] parameter(0)
  %Arg_1.49015 = f32[] parameter(1)
  ROOT %add.49016 = f32[] add(%Arg_0.49014, %Arg_1.49015)
}

%region_2382.49017.clone (Arg_0.2455: f32[], Arg_1.2127: f32[]) -> f32[] {
  %Arg_0.2455 = f32[] parameter(0)
  %Arg_1.2127 = f32[] parameter(1)
  ROOT %add.2157 = f32[] add(%Arg_0.2455, %Arg_1.2127)
}

%region_2383.49026 (Arg_0.49023: f32[], Arg_1.49024: f32[]) -> f32[] {
  %Arg_0.49023 = f32[] parameter(0)
  %Arg_1.49024 = f32[] parameter(1)
  ROOT %add.49025 = f32[] add(%Arg_0.49023, %Arg_1.49024)
}

%region_2383.49026.clone (Arg_0.2456: f32[], Arg_1.2128: f32[]) -> f32[] {
  %Arg_0.2456 = f32[] parameter(0)
  %Arg_1.2128 = f32[] parameter(1)
  ROOT %add.2158 = f32[] add(%Arg_0.2456, %Arg_1.2128)
}

%region_2384.49035 (Arg_0.49032: f32[], Arg_1.49033: f32[]) -> f32[] {
  %Arg_0.49032 = f32[] parameter(0)
  %Arg_1.49033 = f32[] parameter(1)
  ROOT %add.49034 = f32[] add(%Arg_0.49032, %Arg_1.49033)
}

%region_2384.49035.clone (Arg_0.2457: f32[], Arg_1.2130: f32[]) -> f32[] {
  %Arg_0.2457 = f32[] parameter(0)
  %Arg_1.2130 = f32[] parameter(1)
  ROOT %add.2159 = f32[] add(%Arg_0.2457, %Arg_1.2130)
}

%region_2385.49044 (Arg_0.49041: f32[], Arg_1.49042: f32[]) -> f32[] {
  %Arg_0.49041 = f32[] parameter(0)
  %Arg_1.49042 = f32[] parameter(1)
  ROOT %add.49043 = f32[] add(%Arg_0.49041, %Arg_1.49042)
}

%region_2385.49044.clone (Arg_0.2458: f32[], Arg_1.2131: f32[]) -> f32[] {
  %Arg_0.2458 = f32[] parameter(0)
  %Arg_1.2131 = f32[] parameter(1)
  ROOT %add.2160 = f32[] add(%Arg_0.2458, %Arg_1.2131)
}

%region_2386.49053 (Arg_0.49050: f32[], Arg_1.49051: f32[]) -> f32[] {
  %Arg_0.49050 = f32[] parameter(0)
  %Arg_1.49051 = f32[] parameter(1)
  ROOT %add.49052 = f32[] add(%Arg_0.49050, %Arg_1.49051)
}

%region_2386.49053.clone (Arg_0.2459: f32[], Arg_1.2132: f32[]) -> f32[] {
  %Arg_0.2459 = f32[] parameter(0)
  %Arg_1.2132 = f32[] parameter(1)
  ROOT %add.2161 = f32[] add(%Arg_0.2459, %Arg_1.2132)
}

%region_2387.49062 (Arg_0.49059: f32[], Arg_1.49060: f32[]) -> f32[] {
  %Arg_0.49059 = f32[] parameter(0)
  %Arg_1.49060 = f32[] parameter(1)
  ROOT %add.49061 = f32[] add(%Arg_0.49059, %Arg_1.49060)
}

%region_2388.49071 (Arg_0.49068: f32[], Arg_1.49069: f32[]) -> f32[] {
  %Arg_0.49068 = f32[] parameter(0)
  %Arg_1.49069 = f32[] parameter(1)
  ROOT %add.49070 = f32[] add(%Arg_0.49068, %Arg_1.49069)
}

%region_2389.49080 (Arg_0.49077: f32[], Arg_1.49078: f32[]) -> f32[] {
  %Arg_0.49077 = f32[] parameter(0)
  %Arg_1.49078 = f32[] parameter(1)
  ROOT %add.49079 = f32[] add(%Arg_0.49077, %Arg_1.49078)
}

%region_2389.49080.clone (Arg_0.2460: f32[], Arg_1.2133: f32[]) -> f32[] {
  %Arg_0.2460 = f32[] parameter(0)
  %Arg_1.2133 = f32[] parameter(1)
  ROOT %add.2162 = f32[] add(%Arg_0.2460, %Arg_1.2133)
}

%region_2390.49089 (Arg_0.49086: f32[], Arg_1.49087: f32[]) -> f32[] {
  %Arg_0.49086 = f32[] parameter(0)
  %Arg_1.49087 = f32[] parameter(1)
  ROOT %add.49088 = f32[] add(%Arg_0.49086, %Arg_1.49087)
}

%region_2390.49089.clone (Arg_0.2461: f32[], Arg_1.2134: f32[]) -> f32[] {
  %Arg_0.2461 = f32[] parameter(0)
  %Arg_1.2134 = f32[] parameter(1)
  ROOT %add.2163 = f32[] add(%Arg_0.2461, %Arg_1.2134)
}

%region_2391.49098 (Arg_0.49095: f32[], Arg_1.49096: f32[]) -> f32[] {
  %Arg_0.49095 = f32[] parameter(0)
  %Arg_1.49096 = f32[] parameter(1)
  ROOT %add.49097 = f32[] add(%Arg_0.49095, %Arg_1.49096)
}

%region_2391.49098.clone (Arg_0.2462: f32[], Arg_1.2135: f32[]) -> f32[] {
  %Arg_0.2462 = f32[] parameter(0)
  %Arg_1.2135 = f32[] parameter(1)
  ROOT %add.2164 = f32[] add(%Arg_0.2462, %Arg_1.2135)
}

%region_2392.49107 (Arg_0.49104: f32[], Arg_1.49105: f32[]) -> f32[] {
  %Arg_0.49104 = f32[] parameter(0)
  %Arg_1.49105 = f32[] parameter(1)
  ROOT %add.49106 = f32[] add(%Arg_0.49104, %Arg_1.49105)
}

%region_2392.49107.clone (Arg_0.2463: f32[], Arg_1.2136: f32[]) -> f32[] {
  %Arg_0.2463 = f32[] parameter(0)
  %Arg_1.2136 = f32[] parameter(1)
  ROOT %add.2165 = f32[] add(%Arg_0.2463, %Arg_1.2136)
}

%region_2393.49116 (Arg_0.49113: f32[], Arg_1.49114: f32[]) -> f32[] {
  %Arg_0.49113 = f32[] parameter(0)
  %Arg_1.49114 = f32[] parameter(1)
  ROOT %add.49115 = f32[] add(%Arg_0.49113, %Arg_1.49114)
}

%region_2393.49116.clone (Arg_0.2464: f32[], Arg_1.2137: f32[]) -> f32[] {
  %Arg_0.2464 = f32[] parameter(0)
  %Arg_1.2137 = f32[] parameter(1)
  ROOT %add.2166 = f32[] add(%Arg_0.2464, %Arg_1.2137)
}

%region_2394.49125 (Arg_0.49122: f32[], Arg_1.49123: f32[]) -> f32[] {
  %Arg_0.49122 = f32[] parameter(0)
  %Arg_1.49123 = f32[] parameter(1)
  ROOT %add.49124 = f32[] add(%Arg_0.49122, %Arg_1.49123)
}

%region_2394.49125.clone (Arg_0.2465: f32[], Arg_1.2138: f32[]) -> f32[] {
  %Arg_0.2465 = f32[] parameter(0)
  %Arg_1.2138 = f32[] parameter(1)
  ROOT %add.2167 = f32[] add(%Arg_0.2465, %Arg_1.2138)
}

%region_2395.49134 (Arg_0.49131: f32[], Arg_1.49132: f32[]) -> f32[] {
  %Arg_0.49131 = f32[] parameter(0)
  %Arg_1.49132 = f32[] parameter(1)
  ROOT %add.49133 = f32[] add(%Arg_0.49131, %Arg_1.49132)
}

%region_2395.49134.clone (Arg_0.2466: f32[], Arg_1.2139: f32[]) -> f32[] {
  %Arg_0.2466 = f32[] parameter(0)
  %Arg_1.2139 = f32[] parameter(1)
  ROOT %add.2168 = f32[] add(%Arg_0.2466, %Arg_1.2139)
}

%region_2396.49143 (Arg_0.49140: f32[], Arg_1.49141: f32[]) -> f32[] {
  %Arg_0.49140 = f32[] parameter(0)
  %Arg_1.49141 = f32[] parameter(1)
  ROOT %add.49142 = f32[] add(%Arg_0.49140, %Arg_1.49141)
}

%region_2396.49143.clone (Arg_0.2467: f32[], Arg_1.2140: f32[]) -> f32[] {
  %Arg_0.2467 = f32[] parameter(0)
  %Arg_1.2140 = f32[] parameter(1)
  ROOT %add.2169 = f32[] add(%Arg_0.2467, %Arg_1.2140)
}

%region_2397.49152 (Arg_0.49149: f32[], Arg_1.49150: f32[]) -> f32[] {
  %Arg_0.49149 = f32[] parameter(0)
  %Arg_1.49150 = f32[] parameter(1)
  ROOT %add.49151 = f32[] add(%Arg_0.49149, %Arg_1.49150)
}

%region_2398.49161 (Arg_0.49158: f32[], Arg_1.49159: f32[]) -> f32[] {
  %Arg_0.49158 = f32[] parameter(0)
  %Arg_1.49159 = f32[] parameter(1)
  ROOT %add.49160 = f32[] add(%Arg_0.49158, %Arg_1.49159)
}

%region_2399.49170 (Arg_0.49167: f32[], Arg_1.49168: f32[]) -> f32[] {
  %Arg_0.49167 = f32[] parameter(0)
  %Arg_1.49168 = f32[] parameter(1)
  ROOT %add.49169 = f32[] add(%Arg_0.49167, %Arg_1.49168)
}

%region_2399.49170.clone (Arg_0.2468: f32[], Arg_1.2141: f32[]) -> f32[] {
  %Arg_0.2468 = f32[] parameter(0)
  %Arg_1.2141 = f32[] parameter(1)
  ROOT %add.2170 = f32[] add(%Arg_0.2468, %Arg_1.2141)
}

%region_2400.49179 (Arg_0.49176: f32[], Arg_1.49177: f32[]) -> f32[] {
  %Arg_0.49176 = f32[] parameter(0)
  %Arg_1.49177 = f32[] parameter(1)
  ROOT %add.49178 = f32[] add(%Arg_0.49176, %Arg_1.49177)
}

%region_2400.49179.clone (Arg_0.2469: f32[], Arg_1.2142: f32[]) -> f32[] {
  %Arg_0.2469 = f32[] parameter(0)
  %Arg_1.2142 = f32[] parameter(1)
  ROOT %add.2171 = f32[] add(%Arg_0.2469, %Arg_1.2142)
}

%region_2401.49188 (Arg_0.49185: f32[], Arg_1.49186: f32[]) -> f32[] {
  %Arg_0.49185 = f32[] parameter(0)
  %Arg_1.49186 = f32[] parameter(1)
  ROOT %add.49187 = f32[] add(%Arg_0.49185, %Arg_1.49186)
}

%region_2401.49188.clone (Arg_0.2470: f32[], Arg_1.2143: f32[]) -> f32[] {
  %Arg_0.2470 = f32[] parameter(0)
  %Arg_1.2143 = f32[] parameter(1)
  ROOT %add.2172 = f32[] add(%Arg_0.2470, %Arg_1.2143)
}

%region_2402.49197 (Arg_0.49194: f32[], Arg_1.49195: f32[]) -> f32[] {
  %Arg_0.49194 = f32[] parameter(0)
  %Arg_1.49195 = f32[] parameter(1)
  ROOT %add.49196 = f32[] add(%Arg_0.49194, %Arg_1.49195)
}

%region_2402.49197.clone (Arg_0.2471: f32[], Arg_1.2144: f32[]) -> f32[] {
  %Arg_0.2471 = f32[] parameter(0)
  %Arg_1.2144 = f32[] parameter(1)
  ROOT %add.2173 = f32[] add(%Arg_0.2471, %Arg_1.2144)
}

%region_2403.49206 (Arg_0.49203: f32[], Arg_1.49204: f32[]) -> f32[] {
  %Arg_0.49203 = f32[] parameter(0)
  %Arg_1.49204 = f32[] parameter(1)
  ROOT %add.49205 = f32[] add(%Arg_0.49203, %Arg_1.49204)
}

%region_2403.49206.clone (Arg_0.2472: f32[], Arg_1.2145: f32[]) -> f32[] {
  %Arg_0.2472 = f32[] parameter(0)
  %Arg_1.2145 = f32[] parameter(1)
  ROOT %add.2174 = f32[] add(%Arg_0.2472, %Arg_1.2145)
}

%region_2404.49215 (Arg_0.49212: f32[], Arg_1.49213: f32[]) -> f32[] {
  %Arg_0.49212 = f32[] parameter(0)
  %Arg_1.49213 = f32[] parameter(1)
  ROOT %add.49214 = f32[] add(%Arg_0.49212, %Arg_1.49213)
}

%region_2404.49215.clone (Arg_0.2473: f32[], Arg_1.2146: f32[]) -> f32[] {
  %Arg_0.2473 = f32[] parameter(0)
  %Arg_1.2146 = f32[] parameter(1)
  ROOT %add.2175 = f32[] add(%Arg_0.2473, %Arg_1.2146)
}

%region_2405.49224 (Arg_0.49221: f32[], Arg_1.49222: f32[]) -> f32[] {
  %Arg_0.49221 = f32[] parameter(0)
  %Arg_1.49222 = f32[] parameter(1)
  ROOT %add.49223 = f32[] add(%Arg_0.49221, %Arg_1.49222)
}

%region_2405.49224.clone (Arg_0.2474: f32[], Arg_1.2147: f32[]) -> f32[] {
  %Arg_0.2474 = f32[] parameter(0)
  %Arg_1.2147 = f32[] parameter(1)
  ROOT %add.2176 = f32[] add(%Arg_0.2474, %Arg_1.2147)
}

%region_2406.49233 (Arg_0.49230: f32[], Arg_1.49231: f32[]) -> f32[] {
  %Arg_0.49230 = f32[] parameter(0)
  %Arg_1.49231 = f32[] parameter(1)
  ROOT %add.49232 = f32[] add(%Arg_0.49230, %Arg_1.49231)
}

%region_2406.49233.clone (Arg_0.2475: f32[], Arg_1.2148: f32[]) -> f32[] {
  %Arg_0.2475 = f32[] parameter(0)
  %Arg_1.2148 = f32[] parameter(1)
  ROOT %add.2177 = f32[] add(%Arg_0.2475, %Arg_1.2148)
}

%region_2407.49242 (Arg_0.49239: f32[], Arg_1.49240: f32[]) -> f32[] {
  %Arg_0.49239 = f32[] parameter(0)
  %Arg_1.49240 = f32[] parameter(1)
  ROOT %add.49241 = f32[] add(%Arg_0.49239, %Arg_1.49240)
}

%region_2408.49251 (Arg_0.49248: f32[], Arg_1.49249: f32[]) -> f32[] {
  %Arg_0.49248 = f32[] parameter(0)
  %Arg_1.49249 = f32[] parameter(1)
  ROOT %add.49250 = f32[] add(%Arg_0.49248, %Arg_1.49249)
}

%region_2409.49260 (Arg_0.49257: f32[], Arg_1.49258: f32[]) -> f32[] {
  %Arg_0.49257 = f32[] parameter(0)
  %Arg_1.49258 = f32[] parameter(1)
  ROOT %add.49259 = f32[] add(%Arg_0.49257, %Arg_1.49258)
}

%region_2409.49260.clone (Arg_0.2476: f32[], Arg_1.2149: f32[]) -> f32[] {
  %Arg_0.2476 = f32[] parameter(0)
  %Arg_1.2149 = f32[] parameter(1)
  ROOT %add.2178 = f32[] add(%Arg_0.2476, %Arg_1.2149)
}

%region_2410.49269 (Arg_0.49266: f32[], Arg_1.49267: f32[]) -> f32[] {
  %Arg_0.49266 = f32[] parameter(0)
  %Arg_1.49267 = f32[] parameter(1)
  ROOT %add.49268 = f32[] add(%Arg_0.49266, %Arg_1.49267)
}

%region_2410.49269.clone (Arg_0.2477: f32[], Arg_1.2150: f32[]) -> f32[] {
  %Arg_0.2477 = f32[] parameter(0)
  %Arg_1.2150 = f32[] parameter(1)
  ROOT %add.2179 = f32[] add(%Arg_0.2477, %Arg_1.2150)
}

%region_2411.49278 (Arg_0.49275: f32[], Arg_1.49276: f32[]) -> f32[] {
  %Arg_0.49275 = f32[] parameter(0)
  %Arg_1.49276 = f32[] parameter(1)
  ROOT %add.49277 = f32[] add(%Arg_0.49275, %Arg_1.49276)
}

%region_2411.49278.clone (Arg_0.2478: f32[], Arg_1.2151: f32[]) -> f32[] {
  %Arg_0.2478 = f32[] parameter(0)
  %Arg_1.2151 = f32[] parameter(1)
  ROOT %add.2180 = f32[] add(%Arg_0.2478, %Arg_1.2151)
}

%region_2412.49287 (Arg_0.49284: f32[], Arg_1.49285: f32[]) -> f32[] {
  %Arg_0.49284 = f32[] parameter(0)
  %Arg_1.49285 = f32[] parameter(1)
  ROOT %add.49286 = f32[] add(%Arg_0.49284, %Arg_1.49285)
}

%region_2412.49287.clone (Arg_0.2479: f32[], Arg_1.2152: f32[]) -> f32[] {
  %Arg_0.2479 = f32[] parameter(0)
  %Arg_1.2152 = f32[] parameter(1)
  ROOT %add.2181 = f32[] add(%Arg_0.2479, %Arg_1.2152)
}

%region_2413.49296 (Arg_0.49293: f32[], Arg_1.49294: f32[]) -> f32[] {
  %Arg_0.49293 = f32[] parameter(0)
  %Arg_1.49294 = f32[] parameter(1)
  ROOT %add.49295 = f32[] add(%Arg_0.49293, %Arg_1.49294)
}

%region_2413.49296.clone (Arg_0.2480: f32[], Arg_1.2153: f32[]) -> f32[] {
  %Arg_0.2480 = f32[] parameter(0)
  %Arg_1.2153 = f32[] parameter(1)
  ROOT %add.2182 = f32[] add(%Arg_0.2480, %Arg_1.2153)
}

%region_2414.49305 (Arg_0.49302: f32[], Arg_1.49303: f32[]) -> f32[] {
  %Arg_0.49302 = f32[] parameter(0)
  %Arg_1.49303 = f32[] parameter(1)
  ROOT %add.49304 = f32[] add(%Arg_0.49302, %Arg_1.49303)
}

%region_2414.49305.clone (Arg_0.2481: f32[], Arg_1.2154: f32[]) -> f32[] {
  %Arg_0.2481 = f32[] parameter(0)
  %Arg_1.2154 = f32[] parameter(1)
  ROOT %add.2183 = f32[] add(%Arg_0.2481, %Arg_1.2154)
}

%region_2415.49314 (Arg_0.49311: f32[], Arg_1.49312: f32[]) -> f32[] {
  %Arg_0.49311 = f32[] parameter(0)
  %Arg_1.49312 = f32[] parameter(1)
  ROOT %add.49313 = f32[] add(%Arg_0.49311, %Arg_1.49312)
}

%region_2415.49314.clone (Arg_0.2482: f32[], Arg_1.2155: f32[]) -> f32[] {
  %Arg_0.2482 = f32[] parameter(0)
  %Arg_1.2155 = f32[] parameter(1)
  ROOT %add.2184 = f32[] add(%Arg_0.2482, %Arg_1.2155)
}

%region_2416.49323 (Arg_0.49320: f32[], Arg_1.49321: f32[]) -> f32[] {
  %Arg_0.49320 = f32[] parameter(0)
  %Arg_1.49321 = f32[] parameter(1)
  ROOT %add.49322 = f32[] add(%Arg_0.49320, %Arg_1.49321)
}

%region_2416.49323.clone (Arg_0.2483: f32[], Arg_1.2156: f32[]) -> f32[] {
  %Arg_0.2483 = f32[] parameter(0)
  %Arg_1.2156 = f32[] parameter(1)
  ROOT %add.2185 = f32[] add(%Arg_0.2483, %Arg_1.2156)
}

%region_2417.49332 (Arg_0.49329: f32[], Arg_1.49330: f32[]) -> f32[] {
  %Arg_0.49329 = f32[] parameter(0)
  %Arg_1.49330 = f32[] parameter(1)
  ROOT %add.49331 = f32[] add(%Arg_0.49329, %Arg_1.49330)
}

%region_2418.49341 (Arg_0.49338: f32[], Arg_1.49339: f32[]) -> f32[] {
  %Arg_0.49338 = f32[] parameter(0)
  %Arg_1.49339 = f32[] parameter(1)
  ROOT %add.49340 = f32[] add(%Arg_0.49338, %Arg_1.49339)
}

%region_2419.49350 (Arg_0.49347: f32[], Arg_1.49348: f32[]) -> f32[] {
  %Arg_0.49347 = f32[] parameter(0)
  %Arg_1.49348 = f32[] parameter(1)
  ROOT %add.49349 = f32[] add(%Arg_0.49347, %Arg_1.49348)
}

%region_2419.49350.clone (Arg_0.2484: f32[], Arg_1.2157: f32[]) -> f32[] {
  %Arg_0.2484 = f32[] parameter(0)
  %Arg_1.2157 = f32[] parameter(1)
  ROOT %add.2186 = f32[] add(%Arg_0.2484, %Arg_1.2157)
}

%region_2420.49359 (Arg_0.49356: f32[], Arg_1.49357: f32[]) -> f32[] {
  %Arg_0.49356 = f32[] parameter(0)
  %Arg_1.49357 = f32[] parameter(1)
  ROOT %add.49358 = f32[] add(%Arg_0.49356, %Arg_1.49357)
}

%region_2420.49359.clone (Arg_0.2485: f32[], Arg_1.2158: f32[]) -> f32[] {
  %Arg_0.2485 = f32[] parameter(0)
  %Arg_1.2158 = f32[] parameter(1)
  ROOT %add.2187 = f32[] add(%Arg_0.2485, %Arg_1.2158)
}

%region_2421.49368 (Arg_0.49365: f32[], Arg_1.49366: f32[]) -> f32[] {
  %Arg_0.49365 = f32[] parameter(0)
  %Arg_1.49366 = f32[] parameter(1)
  ROOT %add.49367 = f32[] add(%Arg_0.49365, %Arg_1.49366)
}

%region_2421.49368.clone (Arg_0.2486: f32[], Arg_1.2159: f32[]) -> f32[] {
  %Arg_0.2486 = f32[] parameter(0)
  %Arg_1.2159 = f32[] parameter(1)
  ROOT %add.2188 = f32[] add(%Arg_0.2486, %Arg_1.2159)
}

%region_2422.49377 (Arg_0.49374: f32[], Arg_1.49375: f32[]) -> f32[] {
  %Arg_0.49374 = f32[] parameter(0)
  %Arg_1.49375 = f32[] parameter(1)
  ROOT %add.49376 = f32[] add(%Arg_0.49374, %Arg_1.49375)
}

%region_2422.49377.clone (Arg_0.2487: f32[], Arg_1.2160: f32[]) -> f32[] {
  %Arg_0.2487 = f32[] parameter(0)
  %Arg_1.2160 = f32[] parameter(1)
  ROOT %add.2189 = f32[] add(%Arg_0.2487, %Arg_1.2160)
}

%region_2423.49386 (Arg_0.49383: f32[], Arg_1.49384: f32[]) -> f32[] {
  %Arg_0.49383 = f32[] parameter(0)
  %Arg_1.49384 = f32[] parameter(1)
  ROOT %add.49385 = f32[] add(%Arg_0.49383, %Arg_1.49384)
}

%region_2423.49386.clone (Arg_0.2488: f32[], Arg_1.2161: f32[]) -> f32[] {
  %Arg_0.2488 = f32[] parameter(0)
  %Arg_1.2161 = f32[] parameter(1)
  ROOT %add.2190 = f32[] add(%Arg_0.2488, %Arg_1.2161)
}

%region_2424.49395 (Arg_0.49392: f32[], Arg_1.49393: f32[]) -> f32[] {
  %Arg_0.49392 = f32[] parameter(0)
  %Arg_1.49393 = f32[] parameter(1)
  ROOT %add.49394 = f32[] add(%Arg_0.49392, %Arg_1.49393)
}

%region_2424.49395.clone (Arg_0.2489: f32[], Arg_1.2162: f32[]) -> f32[] {
  %Arg_0.2489 = f32[] parameter(0)
  %Arg_1.2162 = f32[] parameter(1)
  ROOT %add.2192 = f32[] add(%Arg_0.2489, %Arg_1.2162)
}

%region_2425.49404 (Arg_0.49401: f32[], Arg_1.49402: f32[]) -> f32[] {
  %Arg_0.49401 = f32[] parameter(0)
  %Arg_1.49402 = f32[] parameter(1)
  ROOT %add.49403 = f32[] add(%Arg_0.49401, %Arg_1.49402)
}

%region_2425.49404.clone (Arg_0.2490: f32[], Arg_1.2163: f32[]) -> f32[] {
  %Arg_0.2490 = f32[] parameter(0)
  %Arg_1.2163 = f32[] parameter(1)
  ROOT %add.2193 = f32[] add(%Arg_0.2490, %Arg_1.2163)
}

%region_2426.49413 (Arg_0.49410: f32[], Arg_1.49411: f32[]) -> f32[] {
  %Arg_0.49410 = f32[] parameter(0)
  %Arg_1.49411 = f32[] parameter(1)
  ROOT %add.49412 = f32[] add(%Arg_0.49410, %Arg_1.49411)
}

%region_2426.49413.clone (Arg_0.2491: f32[], Arg_1.2164: f32[]) -> f32[] {
  %Arg_0.2491 = f32[] parameter(0)
  %Arg_1.2164 = f32[] parameter(1)
  ROOT %add.2194 = f32[] add(%Arg_0.2491, %Arg_1.2164)
}

%region_2427.49422 (Arg_0.49419: f32[], Arg_1.49420: f32[]) -> f32[] {
  %Arg_0.49419 = f32[] parameter(0)
  %Arg_1.49420 = f32[] parameter(1)
  ROOT %add.49421 = f32[] add(%Arg_0.49419, %Arg_1.49420)
}

%region_2428.49431 (Arg_0.49428: f32[], Arg_1.49429: f32[]) -> f32[] {
  %Arg_0.49428 = f32[] parameter(0)
  %Arg_1.49429 = f32[] parameter(1)
  ROOT %add.49430 = f32[] add(%Arg_0.49428, %Arg_1.49429)
}

%region_2429.49440 (Arg_0.49437: f32[], Arg_1.49438: f32[]) -> f32[] {
  %Arg_0.49437 = f32[] parameter(0)
  %Arg_1.49438 = f32[] parameter(1)
  ROOT %add.49439 = f32[] add(%Arg_0.49437, %Arg_1.49438)
}

%region_2429.49440.clone (Arg_0.2492: f32[], Arg_1.2165: f32[]) -> f32[] {
  %Arg_0.2492 = f32[] parameter(0)
  %Arg_1.2165 = f32[] parameter(1)
  ROOT %add.2195 = f32[] add(%Arg_0.2492, %Arg_1.2165)
}

%region_2430.49449 (Arg_0.49446: f32[], Arg_1.49447: f32[]) -> f32[] {
  %Arg_0.49446 = f32[] parameter(0)
  %Arg_1.49447 = f32[] parameter(1)
  ROOT %add.49448 = f32[] add(%Arg_0.49446, %Arg_1.49447)
}

%region_2430.49449.clone (Arg_0.2493: f32[], Arg_1.2166: f32[]) -> f32[] {
  %Arg_0.2493 = f32[] parameter(0)
  %Arg_1.2166 = f32[] parameter(1)
  ROOT %add.2196 = f32[] add(%Arg_0.2493, %Arg_1.2166)
}

%region_2431.49458 (Arg_0.49455: f32[], Arg_1.49456: f32[]) -> f32[] {
  %Arg_0.49455 = f32[] parameter(0)
  %Arg_1.49456 = f32[] parameter(1)
  ROOT %add.49457 = f32[] add(%Arg_0.49455, %Arg_1.49456)
}

%region_2431.49458.clone (Arg_0.2494: f32[], Arg_1.2167: f32[]) -> f32[] {
  %Arg_0.2494 = f32[] parameter(0)
  %Arg_1.2167 = f32[] parameter(1)
  ROOT %add.2197 = f32[] add(%Arg_0.2494, %Arg_1.2167)
}

%region_2432.49467 (Arg_0.49464: f32[], Arg_1.49465: f32[]) -> f32[] {
  %Arg_0.49464 = f32[] parameter(0)
  %Arg_1.49465 = f32[] parameter(1)
  ROOT %add.49466 = f32[] add(%Arg_0.49464, %Arg_1.49465)
}

%region_2432.49467.clone (Arg_0.2495: f32[], Arg_1.2168: f32[]) -> f32[] {
  %Arg_0.2495 = f32[] parameter(0)
  %Arg_1.2168 = f32[] parameter(1)
  ROOT %add.2198 = f32[] add(%Arg_0.2495, %Arg_1.2168)
}

%region_2433.49476 (Arg_0.49473: f32[], Arg_1.49474: f32[]) -> f32[] {
  %Arg_0.49473 = f32[] parameter(0)
  %Arg_1.49474 = f32[] parameter(1)
  ROOT %add.49475 = f32[] add(%Arg_0.49473, %Arg_1.49474)
}

%region_2433.49476.clone (Arg_0.2496: f32[], Arg_1.2169: f32[]) -> f32[] {
  %Arg_0.2496 = f32[] parameter(0)
  %Arg_1.2169 = f32[] parameter(1)
  ROOT %add.2199 = f32[] add(%Arg_0.2496, %Arg_1.2169)
}

%region_2434.49485 (Arg_0.49482: f32[], Arg_1.49483: f32[]) -> f32[] {
  %Arg_0.49482 = f32[] parameter(0)
  %Arg_1.49483 = f32[] parameter(1)
  ROOT %add.49484 = f32[] add(%Arg_0.49482, %Arg_1.49483)
}

%region_2434.49485.clone (Arg_0.2497: f32[], Arg_1.2170: f32[]) -> f32[] {
  %Arg_0.2497 = f32[] parameter(0)
  %Arg_1.2170 = f32[] parameter(1)
  ROOT %add.2200 = f32[] add(%Arg_0.2497, %Arg_1.2170)
}

%region_2435.49494 (Arg_0.49491: f32[], Arg_1.49492: f32[]) -> f32[] {
  %Arg_0.49491 = f32[] parameter(0)
  %Arg_1.49492 = f32[] parameter(1)
  ROOT %add.49493 = f32[] add(%Arg_0.49491, %Arg_1.49492)
}

%region_2435.49494.clone (Arg_0.2498: f32[], Arg_1.2171: f32[]) -> f32[] {
  %Arg_0.2498 = f32[] parameter(0)
  %Arg_1.2171 = f32[] parameter(1)
  ROOT %add.2201 = f32[] add(%Arg_0.2498, %Arg_1.2171)
}

%region_2436.49503 (Arg_0.49500: f32[], Arg_1.49501: f32[]) -> f32[] {
  %Arg_0.49500 = f32[] parameter(0)
  %Arg_1.49501 = f32[] parameter(1)
  ROOT %add.49502 = f32[] add(%Arg_0.49500, %Arg_1.49501)
}

%region_2436.49503.clone (Arg_0.2499: f32[], Arg_1.2172: f32[]) -> f32[] {
  %Arg_0.2499 = f32[] parameter(0)
  %Arg_1.2172 = f32[] parameter(1)
  ROOT %add.2202 = f32[] add(%Arg_0.2499, %Arg_1.2172)
}

%region_2437.49512 (Arg_0.49509: f32[], Arg_1.49510: f32[]) -> f32[] {
  %Arg_0.49509 = f32[] parameter(0)
  %Arg_1.49510 = f32[] parameter(1)
  ROOT %add.49511 = f32[] add(%Arg_0.49509, %Arg_1.49510)
}

%region_2438.49521 (Arg_0.49518: f32[], Arg_1.49519: f32[]) -> f32[] {
  %Arg_0.49518 = f32[] parameter(0)
  %Arg_1.49519 = f32[] parameter(1)
  ROOT %add.49520 = f32[] add(%Arg_0.49518, %Arg_1.49519)
}

%region_2439.49530 (Arg_0.49527: f32[], Arg_1.49528: f32[]) -> f32[] {
  %Arg_0.49527 = f32[] parameter(0)
  %Arg_1.49528 = f32[] parameter(1)
  ROOT %add.49529 = f32[] add(%Arg_0.49527, %Arg_1.49528)
}

%region_2439.49530.clone (Arg_0.2500: f32[], Arg_1.2173: f32[]) -> f32[] {
  %Arg_0.2500 = f32[] parameter(0)
  %Arg_1.2173 = f32[] parameter(1)
  ROOT %add.2203 = f32[] add(%Arg_0.2500, %Arg_1.2173)
}

%region_2440.49539 (Arg_0.49536: f32[], Arg_1.49537: f32[]) -> f32[] {
  %Arg_0.49536 = f32[] parameter(0)
  %Arg_1.49537 = f32[] parameter(1)
  ROOT %add.49538 = f32[] add(%Arg_0.49536, %Arg_1.49537)
}

%region_2440.49539.clone (Arg_0.2501: f32[], Arg_1.2174: f32[]) -> f32[] {
  %Arg_0.2501 = f32[] parameter(0)
  %Arg_1.2174 = f32[] parameter(1)
  ROOT %add.2204 = f32[] add(%Arg_0.2501, %Arg_1.2174)
}

%region_2441.49548 (Arg_0.49545: f32[], Arg_1.49546: f32[]) -> f32[] {
  %Arg_0.49545 = f32[] parameter(0)
  %Arg_1.49546 = f32[] parameter(1)
  ROOT %add.49547 = f32[] add(%Arg_0.49545, %Arg_1.49546)
}

%region_2441.49548.clone (Arg_0.2502: f32[], Arg_1.2175: f32[]) -> f32[] {
  %Arg_0.2502 = f32[] parameter(0)
  %Arg_1.2175 = f32[] parameter(1)
  ROOT %add.2205 = f32[] add(%Arg_0.2502, %Arg_1.2175)
}

%region_2442.49557 (Arg_0.49554: f32[], Arg_1.49555: f32[]) -> f32[] {
  %Arg_0.49554 = f32[] parameter(0)
  %Arg_1.49555 = f32[] parameter(1)
  ROOT %add.49556 = f32[] add(%Arg_0.49554, %Arg_1.49555)
}

%region_2442.49557.clone (Arg_0.2503: f32[], Arg_1.2176: f32[]) -> f32[] {
  %Arg_0.2503 = f32[] parameter(0)
  %Arg_1.2176 = f32[] parameter(1)
  ROOT %add.2206 = f32[] add(%Arg_0.2503, %Arg_1.2176)
}

%region_2443.49566 (Arg_0.49563: f32[], Arg_1.49564: f32[]) -> f32[] {
  %Arg_0.49563 = f32[] parameter(0)
  %Arg_1.49564 = f32[] parameter(1)
  ROOT %add.49565 = f32[] add(%Arg_0.49563, %Arg_1.49564)
}

%region_2443.49566.clone (Arg_0.2504: f32[], Arg_1.2177: f32[]) -> f32[] {
  %Arg_0.2504 = f32[] parameter(0)
  %Arg_1.2177 = f32[] parameter(1)
  ROOT %add.2207 = f32[] add(%Arg_0.2504, %Arg_1.2177)
}

%region_2444.49575 (Arg_0.49572: f32[], Arg_1.49573: f32[]) -> f32[] {
  %Arg_0.49572 = f32[] parameter(0)
  %Arg_1.49573 = f32[] parameter(1)
  ROOT %add.49574 = f32[] add(%Arg_0.49572, %Arg_1.49573)
}

%region_2444.49575.clone (Arg_0.2505: f32[], Arg_1.2178: f32[]) -> f32[] {
  %Arg_0.2505 = f32[] parameter(0)
  %Arg_1.2178 = f32[] parameter(1)
  ROOT %add.2208 = f32[] add(%Arg_0.2505, %Arg_1.2178)
}

%region_2445.49584 (Arg_0.49581: f32[], Arg_1.49582: f32[]) -> f32[] {
  %Arg_0.49581 = f32[] parameter(0)
  %Arg_1.49582 = f32[] parameter(1)
  ROOT %add.49583 = f32[] add(%Arg_0.49581, %Arg_1.49582)
}

%region_2445.49584.clone (Arg_0.2506: f32[], Arg_1.2179: f32[]) -> f32[] {
  %Arg_0.2506 = f32[] parameter(0)
  %Arg_1.2179 = f32[] parameter(1)
  ROOT %add.2209 = f32[] add(%Arg_0.2506, %Arg_1.2179)
}

%region_2446.49593 (Arg_0.49590: f32[], Arg_1.49591: f32[]) -> f32[] {
  %Arg_0.49590 = f32[] parameter(0)
  %Arg_1.49591 = f32[] parameter(1)
  ROOT %add.49592 = f32[] add(%Arg_0.49590, %Arg_1.49591)
}

%region_2446.49593.clone (Arg_0.2507: f32[], Arg_1.2180: f32[]) -> f32[] {
  %Arg_0.2507 = f32[] parameter(0)
  %Arg_1.2180 = f32[] parameter(1)
  ROOT %add.2210 = f32[] add(%Arg_0.2507, %Arg_1.2180)
}

%region_2447.49602 (Arg_0.49599: f32[], Arg_1.49600: f32[]) -> f32[] {
  %Arg_0.49599 = f32[] parameter(0)
  %Arg_1.49600 = f32[] parameter(1)
  ROOT %add.49601 = f32[] add(%Arg_0.49599, %Arg_1.49600)
}

%region_2448.49611 (Arg_0.49608: f32[], Arg_1.49609: f32[]) -> f32[] {
  %Arg_0.49608 = f32[] parameter(0)
  %Arg_1.49609 = f32[] parameter(1)
  ROOT %add.49610 = f32[] add(%Arg_0.49608, %Arg_1.49609)
}

%region_2449.49620 (Arg_0.49617: f32[], Arg_1.49618: f32[]) -> f32[] {
  %Arg_0.49617 = f32[] parameter(0)
  %Arg_1.49618 = f32[] parameter(1)
  ROOT %add.49619 = f32[] add(%Arg_0.49617, %Arg_1.49618)
}

%region_2449.49620.clone (Arg_0.2508: f32[], Arg_1.2181: f32[]) -> f32[] {
  %Arg_0.2508 = f32[] parameter(0)
  %Arg_1.2181 = f32[] parameter(1)
  ROOT %add.2211 = f32[] add(%Arg_0.2508, %Arg_1.2181)
}

%region_2450.49629 (Arg_0.49626: f32[], Arg_1.49627: f32[]) -> f32[] {
  %Arg_0.49626 = f32[] parameter(0)
  %Arg_1.49627 = f32[] parameter(1)
  ROOT %add.49628 = f32[] add(%Arg_0.49626, %Arg_1.49627)
}

%region_2450.49629.clone (Arg_0.2509: f32[], Arg_1.2182: f32[]) -> f32[] {
  %Arg_0.2509 = f32[] parameter(0)
  %Arg_1.2182 = f32[] parameter(1)
  ROOT %add.2212 = f32[] add(%Arg_0.2509, %Arg_1.2182)
}

%region_2451.49638 (Arg_0.49635: f32[], Arg_1.49636: f32[]) -> f32[] {
  %Arg_0.49635 = f32[] parameter(0)
  %Arg_1.49636 = f32[] parameter(1)
  ROOT %add.49637 = f32[] add(%Arg_0.49635, %Arg_1.49636)
}

%region_2451.49638.clone (Arg_0.2510: f32[], Arg_1.2183: f32[]) -> f32[] {
  %Arg_0.2510 = f32[] parameter(0)
  %Arg_1.2183 = f32[] parameter(1)
  ROOT %add.2213 = f32[] add(%Arg_0.2510, %Arg_1.2183)
}

%region_2452.49647 (Arg_0.49644: f32[], Arg_1.49645: f32[]) -> f32[] {
  %Arg_0.49644 = f32[] parameter(0)
  %Arg_1.49645 = f32[] parameter(1)
  ROOT %add.49646 = f32[] add(%Arg_0.49644, %Arg_1.49645)
}

%region_2452.49647.clone (Arg_0.2511: f32[], Arg_1.2184: f32[]) -> f32[] {
  %Arg_0.2511 = f32[] parameter(0)
  %Arg_1.2184 = f32[] parameter(1)
  ROOT %add.2214 = f32[] add(%Arg_0.2511, %Arg_1.2184)
}

%region_2453.49656 (Arg_0.49653: f32[], Arg_1.49654: f32[]) -> f32[] {
  %Arg_0.49653 = f32[] parameter(0)
  %Arg_1.49654 = f32[] parameter(1)
  ROOT %add.49655 = f32[] add(%Arg_0.49653, %Arg_1.49654)
}

%region_2453.49656.clone (Arg_0.2512: f32[], Arg_1.2185: f32[]) -> f32[] {
  %Arg_0.2512 = f32[] parameter(0)
  %Arg_1.2185 = f32[] parameter(1)
  ROOT %add.2215 = f32[] add(%Arg_0.2512, %Arg_1.2185)
}

%region_2454.49665 (Arg_0.49662: f32[], Arg_1.49663: f32[]) -> f32[] {
  %Arg_0.49662 = f32[] parameter(0)
  %Arg_1.49663 = f32[] parameter(1)
  ROOT %add.49664 = f32[] add(%Arg_0.49662, %Arg_1.49663)
}

%region_2454.49665.clone (Arg_0.2513: f32[], Arg_1.2186: f32[]) -> f32[] {
  %Arg_0.2513 = f32[] parameter(0)
  %Arg_1.2186 = f32[] parameter(1)
  ROOT %add.2216 = f32[] add(%Arg_0.2513, %Arg_1.2186)
}

%region_1810.43869.clone (Arg_0.2514: f32[], Arg_1.2187: f32[]) -> f32[] {
  %Arg_0.2514 = f32[] parameter(0)
  %Arg_1.2187 = f32[] parameter(1)
  ROOT %add.2217 = f32[] add(%Arg_0.2514, %Arg_1.2187)
}

%region_1811.43878.clone (Arg_0.2515: f32[], Arg_1.2188: f32[]) -> f32[] {
  %Arg_0.2515 = f32[] parameter(0)
  %Arg_1.2188 = f32[] parameter(1)
  ROOT %add.2218 = f32[] add(%Arg_0.2515, %Arg_1.2188)
}

%region_1812.43887.clone (Arg_0.2516: f32[], Arg_1.2189: f32[]) -> f32[] {
  %Arg_0.2516 = f32[] parameter(0)
  %Arg_1.2189 = f32[] parameter(1)
  ROOT %add.2219 = f32[] add(%Arg_0.2516, %Arg_1.2189)
}

%region_1813.43896.clone (Arg_0.2517: f32[], Arg_1.2190: f32[]) -> f32[] {
  %Arg_0.2517 = f32[] parameter(0)
  %Arg_1.2190 = f32[] parameter(1)
  ROOT %add.2220 = f32[] add(%Arg_0.2517, %Arg_1.2190)
}

%region_1816.43923.clone (Arg_0.2518: f32[], Arg_1.2191: f32[]) -> f32[] {
  %Arg_0.2518 = f32[] parameter(0)
  %Arg_1.2191 = f32[] parameter(1)
  ROOT %add.2221 = f32[] add(%Arg_0.2518, %Arg_1.2191)
}

%region_1817.43932.clone (Arg_0.2519: f32[], Arg_1.2192: f32[]) -> f32[] {
  %Arg_0.2519 = f32[] parameter(0)
  %Arg_1.2192 = f32[] parameter(1)
  ROOT %add.2222 = f32[] add(%Arg_0.2519, %Arg_1.2192)
}

%region_1818.43941.clone (Arg_0.2520: f32[], Arg_1.2193: f32[]) -> f32[] {
  %Arg_0.2520 = f32[] parameter(0)
  %Arg_1.2193 = f32[] parameter(1)
  ROOT %add.2223 = f32[] add(%Arg_0.2520, %Arg_1.2193)
}

%region_1819.43950.clone (Arg_0.2521: f32[], Arg_1.2194: f32[]) -> f32[] {
  %Arg_0.2521 = f32[] parameter(0)
  %Arg_1.2194 = f32[] parameter(1)
  ROOT %add.2224 = f32[] add(%Arg_0.2521, %Arg_1.2194)
}

%region_1820.43959.clone (Arg_0.2522: f32[], Arg_1.2195: f32[]) -> f32[] {
  %Arg_0.2522 = f32[] parameter(0)
  %Arg_1.2195 = f32[] parameter(1)
  ROOT %add.2225 = f32[] add(%Arg_0.2522, %Arg_1.2195)
}

%region_1821.43968.clone (Arg_0.2523: f32[], Arg_1.2196: f32[]) -> f32[] {
  %Arg_0.2523 = f32[] parameter(0)
  %Arg_1.2196 = f32[] parameter(1)
  ROOT %add.2226 = f32[] add(%Arg_0.2523, %Arg_1.2196)
}

%region_1822.43977.clone (Arg_0.2524: f32[], Arg_1.2197: f32[]) -> f32[] {
  %Arg_0.2524 = f32[] parameter(0)
  %Arg_1.2197 = f32[] parameter(1)
  ROOT %add.2227 = f32[] add(%Arg_0.2524, %Arg_1.2197)
}

%region_1823.43986.clone (Arg_0.2525: f32[], Arg_1.2198: f32[]) -> f32[] {
  %Arg_0.2525 = f32[] parameter(0)
  %Arg_1.2198 = f32[] parameter(1)
  ROOT %add.2228 = f32[] add(%Arg_0.2525, %Arg_1.2198)
}

%region_1826.44013.clone (Arg_0.2526: f32[], Arg_1.2199: f32[]) -> f32[] {
  %Arg_0.2526 = f32[] parameter(0)
  %Arg_1.2199 = f32[] parameter(1)
  ROOT %add.2229 = f32[] add(%Arg_0.2526, %Arg_1.2199)
}

%region_1827.44022.clone (Arg_0.2527: f32[], Arg_1.2200: f32[]) -> f32[] {
  %Arg_0.2527 = f32[] parameter(0)
  %Arg_1.2200 = f32[] parameter(1)
  ROOT %add.2230 = f32[] add(%Arg_0.2527, %Arg_1.2200)
}

%region_1828.44031.clone (Arg_0.2528: f32[], Arg_1.2201: f32[]) -> f32[] {
  %Arg_0.2528 = f32[] parameter(0)
  %Arg_1.2201 = f32[] parameter(1)
  ROOT %add.2232 = f32[] add(%Arg_0.2528, %Arg_1.2201)
}

%region_1829.44040.clone (Arg_0.2529: f32[], Arg_1.2202: f32[]) -> f32[] {
  %Arg_0.2529 = f32[] parameter(0)
  %Arg_1.2202 = f32[] parameter(1)
  ROOT %add.2233 = f32[] add(%Arg_0.2529, %Arg_1.2202)
}

%region_1830.44049.clone (Arg_0.2530: f32[], Arg_1.2203: f32[]) -> f32[] {
  %Arg_0.2530 = f32[] parameter(0)
  %Arg_1.2203 = f32[] parameter(1)
  ROOT %add.2234 = f32[] add(%Arg_0.2530, %Arg_1.2203)
}

%region_1831.44058.clone (Arg_0.2531: f32[], Arg_1.2204: f32[]) -> f32[] {
  %Arg_0.2531 = f32[] parameter(0)
  %Arg_1.2204 = f32[] parameter(1)
  ROOT %add.2235 = f32[] add(%Arg_0.2531, %Arg_1.2204)
}

%region_1832.44067.clone (Arg_0.2532: f32[], Arg_1.2205: f32[]) -> f32[] {
  %Arg_0.2532 = f32[] parameter(0)
  %Arg_1.2205 = f32[] parameter(1)
  ROOT %add.2236 = f32[] add(%Arg_0.2532, %Arg_1.2205)
}

%region_1833.44076.clone (Arg_0.2533: f32[], Arg_1.2206: f32[]) -> f32[] {
  %Arg_0.2533 = f32[] parameter(0)
  %Arg_1.2206 = f32[] parameter(1)
  ROOT %add.2237 = f32[] add(%Arg_0.2533, %Arg_1.2206)
}

%region_1836.44103.clone (Arg_0.2534: f32[], Arg_1.2207: f32[]) -> f32[] {
  %Arg_0.2534 = f32[] parameter(0)
  %Arg_1.2207 = f32[] parameter(1)
  ROOT %add.2238 = f32[] add(%Arg_0.2534, %Arg_1.2207)
}

%region_1837.44112.clone (Arg_0.2535: f32[], Arg_1.2208: f32[]) -> f32[] {
  %Arg_0.2535 = f32[] parameter(0)
  %Arg_1.2208 = f32[] parameter(1)
  ROOT %add.2239 = f32[] add(%Arg_0.2535, %Arg_1.2208)
}

%region_1838.44121.clone (Arg_0.2536: f32[], Arg_1.2209: f32[]) -> f32[] {
  %Arg_0.2536 = f32[] parameter(0)
  %Arg_1.2209 = f32[] parameter(1)
  ROOT %add.2240 = f32[] add(%Arg_0.2536, %Arg_1.2209)
}

%region_1839.44130.clone (Arg_0.2537: f32[], Arg_1.2210: f32[]) -> f32[] {
  %Arg_0.2537 = f32[] parameter(0)
  %Arg_1.2210 = f32[] parameter(1)
  ROOT %add.2241 = f32[] add(%Arg_0.2537, %Arg_1.2210)
}

%region_1840.44139.clone (Arg_0.2538: f32[], Arg_1.2211: f32[]) -> f32[] {
  %Arg_0.2538 = f32[] parameter(0)
  %Arg_1.2211 = f32[] parameter(1)
  ROOT %add.2242 = f32[] add(%Arg_0.2538, %Arg_1.2211)
}

%region_1841.44148.clone (Arg_0.2539: f32[], Arg_1.2212: f32[]) -> f32[] {
  %Arg_0.2539 = f32[] parameter(0)
  %Arg_1.2212 = f32[] parameter(1)
  ROOT %add.2243 = f32[] add(%Arg_0.2539, %Arg_1.2212)
}

%region_1842.44157.clone (Arg_0.2540: f32[], Arg_1.2213: f32[]) -> f32[] {
  %Arg_0.2540 = f32[] parameter(0)
  %Arg_1.2213 = f32[] parameter(1)
  ROOT %add.2244 = f32[] add(%Arg_0.2540, %Arg_1.2213)
}

%region_1843.44166.clone (Arg_0.2541: f32[], Arg_1.2214: f32[]) -> f32[] {
  %Arg_0.2541 = f32[] parameter(0)
  %Arg_1.2214 = f32[] parameter(1)
  ROOT %add.2245 = f32[] add(%Arg_0.2541, %Arg_1.2214)
}

%region_1846.44193.clone (Arg_0.2542: f32[], Arg_1.2215: f32[]) -> f32[] {
  %Arg_0.2542 = f32[] parameter(0)
  %Arg_1.2215 = f32[] parameter(1)
  ROOT %add.2246 = f32[] add(%Arg_0.2542, %Arg_1.2215)
}

%region_1847.44202.clone (Arg_0.2543: f32[], Arg_1.2216: f32[]) -> f32[] {
  %Arg_0.2543 = f32[] parameter(0)
  %Arg_1.2216 = f32[] parameter(1)
  ROOT %add.2247 = f32[] add(%Arg_0.2543, %Arg_1.2216)
}

%region_1848.44211.clone (Arg_0.2544: f32[], Arg_1.2217: f32[]) -> f32[] {
  %Arg_0.2544 = f32[] parameter(0)
  %Arg_1.2217 = f32[] parameter(1)
  ROOT %add.2248 = f32[] add(%Arg_0.2544, %Arg_1.2217)
}

%region_1849.44220.clone (Arg_0.2545: f32[], Arg_1.2218: f32[]) -> f32[] {
  %Arg_0.2545 = f32[] parameter(0)
  %Arg_1.2218 = f32[] parameter(1)
  ROOT %add.2249 = f32[] add(%Arg_0.2545, %Arg_1.2218)
}

%region_1850.44229.clone (Arg_0.2546: f32[], Arg_1.2219: f32[]) -> f32[] {
  %Arg_0.2546 = f32[] parameter(0)
  %Arg_1.2219 = f32[] parameter(1)
  ROOT %add.2250 = f32[] add(%Arg_0.2546, %Arg_1.2219)
}

%region_1851.44238.clone (Arg_0.2547: f32[], Arg_1.2220: f32[]) -> f32[] {
  %Arg_0.2547 = f32[] parameter(0)
  %Arg_1.2220 = f32[] parameter(1)
  ROOT %add.2251 = f32[] add(%Arg_0.2547, %Arg_1.2220)
}

%region_1852.44247.clone (Arg_0.2548: f32[], Arg_1.2221: f32[]) -> f32[] {
  %Arg_0.2548 = f32[] parameter(0)
  %Arg_1.2221 = f32[] parameter(1)
  ROOT %add.2252 = f32[] add(%Arg_0.2548, %Arg_1.2221)
}

%region_1853.44256.clone (Arg_0.2549: f32[], Arg_1.2222: f32[]) -> f32[] {
  %Arg_0.2549 = f32[] parameter(0)
  %Arg_1.2222 = f32[] parameter(1)
  ROOT %add.2253 = f32[] add(%Arg_0.2549, %Arg_1.2222)
}

%region_1856.44283.clone (Arg_0.2550: f32[], Arg_1.2223: f32[]) -> f32[] {
  %Arg_0.2550 = f32[] parameter(0)
  %Arg_1.2223 = f32[] parameter(1)
  ROOT %add.2254 = f32[] add(%Arg_0.2550, %Arg_1.2223)
}

%region_1857.44292.clone (Arg_0.2551: f32[], Arg_1.2224: f32[]) -> f32[] {
  %Arg_0.2551 = f32[] parameter(0)
  %Arg_1.2224 = f32[] parameter(1)
  ROOT %add.2255 = f32[] add(%Arg_0.2551, %Arg_1.2224)
}

%region_1858.44301.clone (Arg_0.2552: f32[], Arg_1.2225: f32[]) -> f32[] {
  %Arg_0.2552 = f32[] parameter(0)
  %Arg_1.2225 = f32[] parameter(1)
  ROOT %add.2256 = f32[] add(%Arg_0.2552, %Arg_1.2225)
}

%region_1859.44310.clone (Arg_0.2553: f32[], Arg_1.2226: f32[]) -> f32[] {
  %Arg_0.2553 = f32[] parameter(0)
  %Arg_1.2226 = f32[] parameter(1)
  ROOT %add.2257 = f32[] add(%Arg_0.2553, %Arg_1.2226)
}

%region_1860.44319.clone (Arg_0.2554: f32[], Arg_1.2227: f32[]) -> f32[] {
  %Arg_0.2554 = f32[] parameter(0)
  %Arg_1.2227 = f32[] parameter(1)
  ROOT %add.2258 = f32[] add(%Arg_0.2554, %Arg_1.2227)
}

%region_1861.44328.clone (Arg_0.2555: f32[], Arg_1.2228: f32[]) -> f32[] {
  %Arg_0.2555 = f32[] parameter(0)
  %Arg_1.2228 = f32[] parameter(1)
  ROOT %add.2259 = f32[] add(%Arg_0.2555, %Arg_1.2228)
}

%region_1862.44337.clone (Arg_0.2556: f32[], Arg_1.2229: f32[]) -> f32[] {
  %Arg_0.2556 = f32[] parameter(0)
  %Arg_1.2229 = f32[] parameter(1)
  ROOT %add.2260 = f32[] add(%Arg_0.2556, %Arg_1.2229)
}

%region_1863.44346.clone (Arg_0.2557: f32[], Arg_1.2230: f32[]) -> f32[] {
  %Arg_0.2557 = f32[] parameter(0)
  %Arg_1.2230 = f32[] parameter(1)
  ROOT %add.2261 = f32[] add(%Arg_0.2557, %Arg_1.2230)
}

%region_1866.44373.clone (Arg_0.2558: f32[], Arg_1.2231: f32[]) -> f32[] {
  %Arg_0.2558 = f32[] parameter(0)
  %Arg_1.2231 = f32[] parameter(1)
  ROOT %add.2263 = f32[] add(%Arg_0.2558, %Arg_1.2231)
}

%region_1867.44382.clone (Arg_0.2559: f32[], Arg_1.2232: f32[]) -> f32[] {
  %Arg_0.2559 = f32[] parameter(0)
  %Arg_1.2232 = f32[] parameter(1)
  ROOT %add.2264 = f32[] add(%Arg_0.2559, %Arg_1.2232)
}

%region_1868.44391.clone (Arg_0.2560: f32[], Arg_1.2233: f32[]) -> f32[] {
  %Arg_0.2560 = f32[] parameter(0)
  %Arg_1.2233 = f32[] parameter(1)
  ROOT %add.2265 = f32[] add(%Arg_0.2560, %Arg_1.2233)
}

%region_1869.44400.clone (Arg_0.2561: f32[], Arg_1.2234: f32[]) -> f32[] {
  %Arg_0.2561 = f32[] parameter(0)
  %Arg_1.2234 = f32[] parameter(1)
  ROOT %add.2266 = f32[] add(%Arg_0.2561, %Arg_1.2234)
}

%region_1870.44409.clone (Arg_0.2562: f32[], Arg_1.2235: f32[]) -> f32[] {
  %Arg_0.2562 = f32[] parameter(0)
  %Arg_1.2235 = f32[] parameter(1)
  ROOT %add.2267 = f32[] add(%Arg_0.2562, %Arg_1.2235)
}

%region_1871.44418.clone (Arg_0.2563: f32[], Arg_1.2236: f32[]) -> f32[] {
  %Arg_0.2563 = f32[] parameter(0)
  %Arg_1.2236 = f32[] parameter(1)
  ROOT %add.2268 = f32[] add(%Arg_0.2563, %Arg_1.2236)
}

%region_1872.44427.clone (Arg_0.2565: f32[], Arg_1.2237: f32[]) -> f32[] {
  %Arg_0.2565 = f32[] parameter(0)
  %Arg_1.2237 = f32[] parameter(1)
  ROOT %add.2269 = f32[] add(%Arg_0.2565, %Arg_1.2237)
}

%region_1873.44436.clone (Arg_0.2566: f32[], Arg_1.2238: f32[]) -> f32[] {
  %Arg_0.2566 = f32[] parameter(0)
  %Arg_1.2238 = f32[] parameter(1)
  ROOT %add.2271 = f32[] add(%Arg_0.2566, %Arg_1.2238)
}

%region_1876.44463.clone (Arg_0.2567: f32[], Arg_1.2239: f32[]) -> f32[] {
  %Arg_0.2567 = f32[] parameter(0)
  %Arg_1.2239 = f32[] parameter(1)
  ROOT %add.2272 = f32[] add(%Arg_0.2567, %Arg_1.2239)
}

%region_1877.44472.clone (Arg_0.2568: f32[], Arg_1.2240: f32[]) -> f32[] {
  %Arg_0.2568 = f32[] parameter(0)
  %Arg_1.2240 = f32[] parameter(1)
  ROOT %add.2273 = f32[] add(%Arg_0.2568, %Arg_1.2240)
}

%region_1878.44481.clone (Arg_0.2569: f32[], Arg_1.2241: f32[]) -> f32[] {
  %Arg_0.2569 = f32[] parameter(0)
  %Arg_1.2241 = f32[] parameter(1)
  ROOT %add.2274 = f32[] add(%Arg_0.2569, %Arg_1.2241)
}

%region_1879.44490.clone (Arg_0.2570: f32[], Arg_1.2242: f32[]) -> f32[] {
  %Arg_0.2570 = f32[] parameter(0)
  %Arg_1.2242 = f32[] parameter(1)
  ROOT %add.2275 = f32[] add(%Arg_0.2570, %Arg_1.2242)
}

%region_1880.44499.clone (Arg_0.2571: f32[], Arg_1.2243: f32[]) -> f32[] {
  %Arg_0.2571 = f32[] parameter(0)
  %Arg_1.2243 = f32[] parameter(1)
  ROOT %add.2276 = f32[] add(%Arg_0.2571, %Arg_1.2243)
}

%region_1881.44508.clone (Arg_0.2573: f32[], Arg_1.2244: f32[]) -> f32[] {
  %Arg_0.2573 = f32[] parameter(0)
  %Arg_1.2244 = f32[] parameter(1)
  ROOT %add.2277 = f32[] add(%Arg_0.2573, %Arg_1.2244)
}

%region_1882.44517.clone (Arg_0.2574: f32[], Arg_1.2245: f32[]) -> f32[] {
  %Arg_0.2574 = f32[] parameter(0)
  %Arg_1.2245 = f32[] parameter(1)
  ROOT %add.2278 = f32[] add(%Arg_0.2574, %Arg_1.2245)
}

%region_1883.44526.clone (Arg_0.2575: f32[], Arg_1.2246: f32[]) -> f32[] {
  %Arg_0.2575 = f32[] parameter(0)
  %Arg_1.2246 = f32[] parameter(1)
  ROOT %add.2279 = f32[] add(%Arg_0.2575, %Arg_1.2246)
}

%region_1886.44553.clone (Arg_0.2576: f32[], Arg_1.2247: f32[]) -> f32[] {
  %Arg_0.2576 = f32[] parameter(0)
  %Arg_1.2247 = f32[] parameter(1)
  ROOT %add.2280 = f32[] add(%Arg_0.2576, %Arg_1.2247)
}

%region_1887.44562.clone (Arg_0.2578: f32[], Arg_1.2248: f32[]) -> f32[] {
  %Arg_0.2578 = f32[] parameter(0)
  %Arg_1.2248 = f32[] parameter(1)
  ROOT %add.2281 = f32[] add(%Arg_0.2578, %Arg_1.2248)
}

%region_1888.44571.clone (Arg_0.2579: f32[], Arg_1.2249: f32[]) -> f32[] {
  %Arg_0.2579 = f32[] parameter(0)
  %Arg_1.2249 = f32[] parameter(1)
  ROOT %add.2282 = f32[] add(%Arg_0.2579, %Arg_1.2249)
}

%region_1889.44580.clone (Arg_0.2580: f32[], Arg_1.2250: f32[]) -> f32[] {
  %Arg_0.2580 = f32[] parameter(0)
  %Arg_1.2250 = f32[] parameter(1)
  ROOT %add.2283 = f32[] add(%Arg_0.2580, %Arg_1.2250)
}

%region_1890.44589.clone (Arg_0.2581: f32[], Arg_1.2251: f32[]) -> f32[] {
  %Arg_0.2581 = f32[] parameter(0)
  %Arg_1.2251 = f32[] parameter(1)
  ROOT %add.2284 = f32[] add(%Arg_0.2581, %Arg_1.2251)
}

%region_1891.44598.clone (Arg_0.2582: f32[], Arg_1.2252: f32[]) -> f32[] {
  %Arg_0.2582 = f32[] parameter(0)
  %Arg_1.2252 = f32[] parameter(1)
  ROOT %add.2286 = f32[] add(%Arg_0.2582, %Arg_1.2252)
}

%region_1892.44607.clone (Arg_0.2583: f32[], Arg_1.2253: f32[]) -> f32[] {
  %Arg_0.2583 = f32[] parameter(0)
  %Arg_1.2253 = f32[] parameter(1)
  ROOT %add.2287 = f32[] add(%Arg_0.2583, %Arg_1.2253)
}

%region_1893.44616.clone (Arg_0.2584: f32[], Arg_1.2254: f32[]) -> f32[] {
  %Arg_0.2584 = f32[] parameter(0)
  %Arg_1.2254 = f32[] parameter(1)
  ROOT %add.2288 = f32[] add(%Arg_0.2584, %Arg_1.2254)
}

%region_1896.44643.clone (Arg_0.2585: f32[], Arg_1.2255: f32[]) -> f32[] {
  %Arg_0.2585 = f32[] parameter(0)
  %Arg_1.2255 = f32[] parameter(1)
  ROOT %add.2289 = f32[] add(%Arg_0.2585, %Arg_1.2255)
}

%region_1897.44652.clone (Arg_0.2586: f32[], Arg_1.2256: f32[]) -> f32[] {
  %Arg_0.2586 = f32[] parameter(0)
  %Arg_1.2256 = f32[] parameter(1)
  ROOT %add.2291 = f32[] add(%Arg_0.2586, %Arg_1.2256)
}

%region_1898.44661.clone (Arg_0.2587: f32[], Arg_1.2257: f32[]) -> f32[] {
  %Arg_0.2587 = f32[] parameter(0)
  %Arg_1.2257 = f32[] parameter(1)
  ROOT %add.2292 = f32[] add(%Arg_0.2587, %Arg_1.2257)
}

%region_1899.44670.clone (Arg_0.2588: f32[], Arg_1.2258: f32[]) -> f32[] {
  %Arg_0.2588 = f32[] parameter(0)
  %Arg_1.2258 = f32[] parameter(1)
  ROOT %add.2293 = f32[] add(%Arg_0.2588, %Arg_1.2258)
}

%region_1900.44679.clone (Arg_0.2589: f32[], Arg_1.2259: f32[]) -> f32[] {
  %Arg_0.2589 = f32[] parameter(0)
  %Arg_1.2259 = f32[] parameter(1)
  ROOT %add.2294 = f32[] add(%Arg_0.2589, %Arg_1.2259)
}

%region_1901.44688.clone (Arg_0.2590: f32[], Arg_1.2260: f32[]) -> f32[] {
  %Arg_0.2590 = f32[] parameter(0)
  %Arg_1.2260 = f32[] parameter(1)
  ROOT %add.2296 = f32[] add(%Arg_0.2590, %Arg_1.2260)
}

%region_1902.44697.clone (Arg_0.2591: f32[], Arg_1.2262: f32[]) -> f32[] {
  %Arg_0.2591 = f32[] parameter(0)
  %Arg_1.2262 = f32[] parameter(1)
  ROOT %add.2297 = f32[] add(%Arg_0.2591, %Arg_1.2262)
}

%region_1903.44706.clone (Arg_0.2593: f32[], Arg_1.2263: f32[]) -> f32[] {
  %Arg_0.2593 = f32[] parameter(0)
  %Arg_1.2263 = f32[] parameter(1)
  ROOT %add.2298 = f32[] add(%Arg_0.2593, %Arg_1.2263)
}

%region_1906.44733.clone (Arg_0.2594: f32[], Arg_1.2264: f32[]) -> f32[] {
  %Arg_0.2594 = f32[] parameter(0)
  %Arg_1.2264 = f32[] parameter(1)
  ROOT %add.2299 = f32[] add(%Arg_0.2594, %Arg_1.2264)
}

%region_1907.44742.clone (Arg_0.2595: f32[], Arg_1.2265: f32[]) -> f32[] {
  %Arg_0.2595 = f32[] parameter(0)
  %Arg_1.2265 = f32[] parameter(1)
  ROOT %add.2300 = f32[] add(%Arg_0.2595, %Arg_1.2265)
}

%region_1908.44751.clone (Arg_0.2596: f32[], Arg_1.2266: f32[]) -> f32[] {
  %Arg_0.2596 = f32[] parameter(0)
  %Arg_1.2266 = f32[] parameter(1)
  ROOT %add.2301 = f32[] add(%Arg_0.2596, %Arg_1.2266)
}

%region_1909.44760.clone (Arg_0.2597: f32[], Arg_1.2267: f32[]) -> f32[] {
  %Arg_0.2597 = f32[] parameter(0)
  %Arg_1.2267 = f32[] parameter(1)
  ROOT %add.2302 = f32[] add(%Arg_0.2597, %Arg_1.2267)
}

%region_1910.44769.clone (Arg_0.2598: f32[], Arg_1.2268: f32[]) -> f32[] {
  %Arg_0.2598 = f32[] parameter(0)
  %Arg_1.2268 = f32[] parameter(1)
  ROOT %add.2303 = f32[] add(%Arg_0.2598, %Arg_1.2268)
}

%region_1911.44778.clone (Arg_0.2599: f32[], Arg_1.2270: f32[]) -> f32[] {
  %Arg_0.2599 = f32[] parameter(0)
  %Arg_1.2270 = f32[] parameter(1)
  ROOT %add.2304 = f32[] add(%Arg_0.2599, %Arg_1.2270)
}

%region_1912.44787.clone (Arg_0.2600: f32[], Arg_1.2271: f32[]) -> f32[] {
  %Arg_0.2600 = f32[] parameter(0)
  %Arg_1.2271 = f32[] parameter(1)
  ROOT %add.2305 = f32[] add(%Arg_0.2600, %Arg_1.2271)
}

%region_1913.44796.clone (Arg_0.2601: f32[], Arg_1.2272: f32[]) -> f32[] {
  %Arg_0.2601 = f32[] parameter(0)
  %Arg_1.2272 = f32[] parameter(1)
  ROOT %add.2306 = f32[] add(%Arg_0.2601, %Arg_1.2272)
}

%region_1916.44823.clone (Arg_0.2602: f32[], Arg_1.2273: f32[]) -> f32[] {
  %Arg_0.2602 = f32[] parameter(0)
  %Arg_1.2273 = f32[] parameter(1)
  ROOT %add.2307 = f32[] add(%Arg_0.2602, %Arg_1.2273)
}

%region_1917.44832.clone (Arg_0.2603: f32[], Arg_1.2275: f32[]) -> f32[] {
  %Arg_0.2603 = f32[] parameter(0)
  %Arg_1.2275 = f32[] parameter(1)
  ROOT %add.2308 = f32[] add(%Arg_0.2603, %Arg_1.2275)
}

%region_1918.44841.clone (Arg_0.2604: f32[], Arg_1.2276: f32[]) -> f32[] {
  %Arg_0.2604 = f32[] parameter(0)
  %Arg_1.2276 = f32[] parameter(1)
  ROOT %add.2309 = f32[] add(%Arg_0.2604, %Arg_1.2276)
}

%region_1919.44850.clone (Arg_0.2605: f32[], Arg_1.2277: f32[]) -> f32[] {
  %Arg_0.2605 = f32[] parameter(0)
  %Arg_1.2277 = f32[] parameter(1)
  ROOT %add.2310 = f32[] add(%Arg_0.2605, %Arg_1.2277)
}

%region_1920.44859.clone (Arg_0.2606: f32[], Arg_1.2278: f32[]) -> f32[] {
  %Arg_0.2606 = f32[] parameter(0)
  %Arg_1.2278 = f32[] parameter(1)
  ROOT %add.2311 = f32[] add(%Arg_0.2606, %Arg_1.2278)
}

%region_1921.44868.clone (Arg_0.2607: f32[], Arg_1.2279: f32[]) -> f32[] {
  %Arg_0.2607 = f32[] parameter(0)
  %Arg_1.2279 = f32[] parameter(1)
  ROOT %add.2312 = f32[] add(%Arg_0.2607, %Arg_1.2279)
}

%region_1922.44877.clone (Arg_0.2608: f32[], Arg_1.2280: f32[]) -> f32[] {
  %Arg_0.2608 = f32[] parameter(0)
  %Arg_1.2280 = f32[] parameter(1)
  ROOT %add.2313 = f32[] add(%Arg_0.2608, %Arg_1.2280)
}

%region_1923.44886.clone (Arg_0.2609: f32[], Arg_1.2281: f32[]) -> f32[] {
  %Arg_0.2609 = f32[] parameter(0)
  %Arg_1.2281 = f32[] parameter(1)
  ROOT %add.2314 = f32[] add(%Arg_0.2609, %Arg_1.2281)
}

%region_1926.44913.clone (Arg_0.2610: f32[], Arg_1.2282: f32[]) -> f32[] {
  %Arg_0.2610 = f32[] parameter(0)
  %Arg_1.2282 = f32[] parameter(1)
  ROOT %add.2315 = f32[] add(%Arg_0.2610, %Arg_1.2282)
}

%region_1927.44922.clone (Arg_0.2611: f32[], Arg_1.2283: f32[]) -> f32[] {
  %Arg_0.2611 = f32[] parameter(0)
  %Arg_1.2283 = f32[] parameter(1)
  ROOT %add.2316 = f32[] add(%Arg_0.2611, %Arg_1.2283)
}

%region_1928.44931.clone (Arg_0.2612: f32[], Arg_1.2284: f32[]) -> f32[] {
  %Arg_0.2612 = f32[] parameter(0)
  %Arg_1.2284 = f32[] parameter(1)
  ROOT %add.2317 = f32[] add(%Arg_0.2612, %Arg_1.2284)
}

%region_1929.44940.clone (Arg_0.2613: f32[], Arg_1.2285: f32[]) -> f32[] {
  %Arg_0.2613 = f32[] parameter(0)
  %Arg_1.2285 = f32[] parameter(1)
  ROOT %add.2318 = f32[] add(%Arg_0.2613, %Arg_1.2285)
}

%region_1930.44949.clone (Arg_0.2614: f32[], Arg_1.2286: f32[]) -> f32[] {
  %Arg_0.2614 = f32[] parameter(0)
  %Arg_1.2286 = f32[] parameter(1)
  ROOT %add.2319 = f32[] add(%Arg_0.2614, %Arg_1.2286)
}

%region_1931.44958.clone (Arg_0.2615: f32[], Arg_1.2287: f32[]) -> f32[] {
  %Arg_0.2615 = f32[] parameter(0)
  %Arg_1.2287 = f32[] parameter(1)
  ROOT %add.2320 = f32[] add(%Arg_0.2615, %Arg_1.2287)
}

%region_1932.44967.clone (Arg_0.2616: f32[], Arg_1.2288: f32[]) -> f32[] {
  %Arg_0.2616 = f32[] parameter(0)
  %Arg_1.2288 = f32[] parameter(1)
  ROOT %add.2321 = f32[] add(%Arg_0.2616, %Arg_1.2288)
}

%region_1933.44976.clone (Arg_0.2617: f32[], Arg_1.2290: f32[]) -> f32[] {
  %Arg_0.2617 = f32[] parameter(0)
  %Arg_1.2290 = f32[] parameter(1)
  ROOT %add.2322 = f32[] add(%Arg_0.2617, %Arg_1.2290)
}

%region_1936.45003.clone (Arg_0.2619: f32[], Arg_1.2291: f32[]) -> f32[] {
  %Arg_0.2619 = f32[] parameter(0)
  %Arg_1.2291 = f32[] parameter(1)
  ROOT %add.2323 = f32[] add(%Arg_0.2619, %Arg_1.2291)
}

%region_1937.45012.clone (Arg_0.2620: f32[], Arg_1.2292: f32[]) -> f32[] {
  %Arg_0.2620 = f32[] parameter(0)
  %Arg_1.2292 = f32[] parameter(1)
  ROOT %add.2324 = f32[] add(%Arg_0.2620, %Arg_1.2292)
}

%region_1938.45021.clone (Arg_0.2621: f32[], Arg_1.2293: f32[]) -> f32[] {
  %Arg_0.2621 = f32[] parameter(0)
  %Arg_1.2293 = f32[] parameter(1)
  ROOT %add.2325 = f32[] add(%Arg_0.2621, %Arg_1.2293)
}

%region_1939.45030.clone (Arg_0.2622: f32[], Arg_1.2294: f32[]) -> f32[] {
  %Arg_0.2622 = f32[] parameter(0)
  %Arg_1.2294 = f32[] parameter(1)
  ROOT %add.2326 = f32[] add(%Arg_0.2622, %Arg_1.2294)
}

%region_1940.45039.clone (Arg_0.2623: f32[], Arg_1.2295: f32[]) -> f32[] {
  %Arg_0.2623 = f32[] parameter(0)
  %Arg_1.2295 = f32[] parameter(1)
  ROOT %add.2327 = f32[] add(%Arg_0.2623, %Arg_1.2295)
}

%region_1941.45048.clone (Arg_0.2624: f32[], Arg_1.2296: f32[]) -> f32[] {
  %Arg_0.2624 = f32[] parameter(0)
  %Arg_1.2296 = f32[] parameter(1)
  ROOT %add.2329 = f32[] add(%Arg_0.2624, %Arg_1.2296)
}

%region_1942.45057.clone (Arg_0.2625: f32[], Arg_1.2297: f32[]) -> f32[] {
  %Arg_0.2625 = f32[] parameter(0)
  %Arg_1.2297 = f32[] parameter(1)
  ROOT %add.2330 = f32[] add(%Arg_0.2625, %Arg_1.2297)
}

%region_1943.45066.clone (Arg_0.2626: f32[], Arg_1.2298: f32[]) -> f32[] {
  %Arg_0.2626 = f32[] parameter(0)
  %Arg_1.2298 = f32[] parameter(1)
  ROOT %add.2331 = f32[] add(%Arg_0.2626, %Arg_1.2298)
}

%region_1946.45093.clone (Arg_0.2627: f32[], Arg_1.2299: f32[]) -> f32[] {
  %Arg_0.2627 = f32[] parameter(0)
  %Arg_1.2299 = f32[] parameter(1)
  ROOT %add.2332 = f32[] add(%Arg_0.2627, %Arg_1.2299)
}

%region_1947.45102.clone (Arg_0.2628: f32[], Arg_1.2300: f32[]) -> f32[] {
  %Arg_0.2628 = f32[] parameter(0)
  %Arg_1.2300 = f32[] parameter(1)
  ROOT %add.2333 = f32[] add(%Arg_0.2628, %Arg_1.2300)
}

%region_1948.45111.clone (Arg_0.2629: f32[], Arg_1.2301: f32[]) -> f32[] {
  %Arg_0.2629 = f32[] parameter(0)
  %Arg_1.2301 = f32[] parameter(1)
  ROOT %add.2334 = f32[] add(%Arg_0.2629, %Arg_1.2301)
}

%region_1949.45120.clone (Arg_0.2631: f32[], Arg_1.2302: f32[]) -> f32[] {
  %Arg_0.2631 = f32[] parameter(0)
  %Arg_1.2302 = f32[] parameter(1)
  ROOT %add.2335 = f32[] add(%Arg_0.2631, %Arg_1.2302)
}

%region_1950.45129.clone (Arg_0.2632: f32[], Arg_1.2303: f32[]) -> f32[] {
  %Arg_0.2632 = f32[] parameter(0)
  %Arg_1.2303 = f32[] parameter(1)
  ROOT %add.2336 = f32[] add(%Arg_0.2632, %Arg_1.2303)
}

%region_1951.45138.clone (Arg_0.2633: f32[], Arg_1.2304: f32[]) -> f32[] {
  %Arg_0.2633 = f32[] parameter(0)
  %Arg_1.2304 = f32[] parameter(1)
  ROOT %add.2337 = f32[] add(%Arg_0.2633, %Arg_1.2304)
}

%region_1952.45147.clone (Arg_0.2634: f32[], Arg_1.2305: f32[]) -> f32[] {
  %Arg_0.2634 = f32[] parameter(0)
  %Arg_1.2305 = f32[] parameter(1)
  ROOT %add.2338 = f32[] add(%Arg_0.2634, %Arg_1.2305)
}

%region_1953.45156.clone (Arg_0.2635: f32[], Arg_1.2306: f32[]) -> f32[] {
  %Arg_0.2635 = f32[] parameter(0)
  %Arg_1.2306 = f32[] parameter(1)
  ROOT %add.2339 = f32[] add(%Arg_0.2635, %Arg_1.2306)
}

%region_1956.45183.clone (Arg_0.2636: f32[], Arg_1.2307: f32[]) -> f32[] {
  %Arg_0.2636 = f32[] parameter(0)
  %Arg_1.2307 = f32[] parameter(1)
  ROOT %add.2340 = f32[] add(%Arg_0.2636, %Arg_1.2307)
}

%region_1957.45192.clone (Arg_0.2637: f32[], Arg_1.2308: f32[]) -> f32[] {
  %Arg_0.2637 = f32[] parameter(0)
  %Arg_1.2308 = f32[] parameter(1)
  ROOT %add.2341 = f32[] add(%Arg_0.2637, %Arg_1.2308)
}

%region_1958.45201.clone (Arg_0.2638: f32[], Arg_1.2309: f32[]) -> f32[] {
  %Arg_0.2638 = f32[] parameter(0)
  %Arg_1.2309 = f32[] parameter(1)
  ROOT %add.2343 = f32[] add(%Arg_0.2638, %Arg_1.2309)
}

%region_1959.45210.clone (Arg_0.2639: f32[], Arg_1.2310: f32[]) -> f32[] {
  %Arg_0.2639 = f32[] parameter(0)
  %Arg_1.2310 = f32[] parameter(1)
  ROOT %add.2344 = f32[] add(%Arg_0.2639, %Arg_1.2310)
}

%region_1960.45219.clone (Arg_0.2640: f32[], Arg_1.2311: f32[]) -> f32[] {
  %Arg_0.2640 = f32[] parameter(0)
  %Arg_1.2311 = f32[] parameter(1)
  ROOT %add.2346 = f32[] add(%Arg_0.2640, %Arg_1.2311)
}

%region_1961.45228.clone (Arg_0.2641: f32[], Arg_1.2312: f32[]) -> f32[] {
  %Arg_0.2641 = f32[] parameter(0)
  %Arg_1.2312 = f32[] parameter(1)
  ROOT %add.2347 = f32[] add(%Arg_0.2641, %Arg_1.2312)
}

%region_1962.45237.clone (Arg_0.2642: f32[], Arg_1.2313: f32[]) -> f32[] {
  %Arg_0.2642 = f32[] parameter(0)
  %Arg_1.2313 = f32[] parameter(1)
  ROOT %add.2349 = f32[] add(%Arg_0.2642, %Arg_1.2313)
}

%region_1963.45246.clone (Arg_0.2643: f32[], Arg_1.2314: f32[]) -> f32[] {
  %Arg_0.2643 = f32[] parameter(0)
  %Arg_1.2314 = f32[] parameter(1)
  ROOT %add.2350 = f32[] add(%Arg_0.2643, %Arg_1.2314)
}

%region_1966.45273.clone (Arg_0.2644: f32[], Arg_1.2316: f32[]) -> f32[] {
  %Arg_0.2644 = f32[] parameter(0)
  %Arg_1.2316 = f32[] parameter(1)
  ROOT %add.2351 = f32[] add(%Arg_0.2644, %Arg_1.2316)
}

%region_1967.45282.clone (Arg_0.2645: f32[], Arg_1.2317: f32[]) -> f32[] {
  %Arg_0.2645 = f32[] parameter(0)
  %Arg_1.2317 = f32[] parameter(1)
  ROOT %add.2352 = f32[] add(%Arg_0.2645, %Arg_1.2317)
}

%region_1968.45291.clone (Arg_0.2646: f32[], Arg_1.2318: f32[]) -> f32[] {
  %Arg_0.2646 = f32[] parameter(0)
  %Arg_1.2318 = f32[] parameter(1)
  ROOT %add.2353 = f32[] add(%Arg_0.2646, %Arg_1.2318)
}

%region_1969.45300.clone (Arg_0.2647: f32[], Arg_1.2319: f32[]) -> f32[] {
  %Arg_0.2647 = f32[] parameter(0)
  %Arg_1.2319 = f32[] parameter(1)
  ROOT %add.2354 = f32[] add(%Arg_0.2647, %Arg_1.2319)
}

%region_1970.45309.clone (Arg_0.2648: f32[], Arg_1.2320: f32[]) -> f32[] {
  %Arg_0.2648 = f32[] parameter(0)
  %Arg_1.2320 = f32[] parameter(1)
  ROOT %add.2355 = f32[] add(%Arg_0.2648, %Arg_1.2320)
}

%region_1971.45318.clone (Arg_0.2649: f32[], Arg_1.2321: f32[]) -> f32[] {
  %Arg_0.2649 = f32[] parameter(0)
  %Arg_1.2321 = f32[] parameter(1)
  ROOT %add.2356 = f32[] add(%Arg_0.2649, %Arg_1.2321)
}

%region_1972.45327.clone (Arg_0.2650: f32[], Arg_1.2322: f32[]) -> f32[] {
  %Arg_0.2650 = f32[] parameter(0)
  %Arg_1.2322 = f32[] parameter(1)
  ROOT %add.2357 = f32[] add(%Arg_0.2650, %Arg_1.2322)
}

%region_1973.45336.clone (Arg_0.2651: f32[], Arg_1.2323: f32[]) -> f32[] {
  %Arg_0.2651 = f32[] parameter(0)
  %Arg_1.2323 = f32[] parameter(1)
  ROOT %add.2358 = f32[] add(%Arg_0.2651, %Arg_1.2323)
}

%region_1976.45363.clone (Arg_0.2652: f32[], Arg_1.2324: f32[]) -> f32[] {
  %Arg_0.2652 = f32[] parameter(0)
  %Arg_1.2324 = f32[] parameter(1)
  ROOT %add.2359 = f32[] add(%Arg_0.2652, %Arg_1.2324)
}

%region_1977.45372.clone (Arg_0.2653: f32[], Arg_1.2325: f32[]) -> f32[] {
  %Arg_0.2653 = f32[] parameter(0)
  %Arg_1.2325 = f32[] parameter(1)
  ROOT %add.2360 = f32[] add(%Arg_0.2653, %Arg_1.2325)
}

%region_1978.45381.clone (Arg_0.2654: f32[], Arg_1.2326: f32[]) -> f32[] {
  %Arg_0.2654 = f32[] parameter(0)
  %Arg_1.2326 = f32[] parameter(1)
  ROOT %add.2361 = f32[] add(%Arg_0.2654, %Arg_1.2326)
}

%region_1979.45390.clone (Arg_0.2655: f32[], Arg_1.2328: f32[]) -> f32[] {
  %Arg_0.2655 = f32[] parameter(0)
  %Arg_1.2328 = f32[] parameter(1)
  ROOT %add.2363 = f32[] add(%Arg_0.2655, %Arg_1.2328)
}

%region_1980.45399.clone (Arg_0.2656: f32[], Arg_1.2329: f32[]) -> f32[] {
  %Arg_0.2656 = f32[] parameter(0)
  %Arg_1.2329 = f32[] parameter(1)
  ROOT %add.2364 = f32[] add(%Arg_0.2656, %Arg_1.2329)
}

%region_1981.45408.clone (Arg_0.2657: f32[], Arg_1.2330: f32[]) -> f32[] {
  %Arg_0.2657 = f32[] parameter(0)
  %Arg_1.2330 = f32[] parameter(1)
  ROOT %add.2365 = f32[] add(%Arg_0.2657, %Arg_1.2330)
}

%region_1982.45417.clone (Arg_0.2658: f32[], Arg_1.2331: f32[]) -> f32[] {
  %Arg_0.2658 = f32[] parameter(0)
  %Arg_1.2331 = f32[] parameter(1)
  ROOT %add.2366 = f32[] add(%Arg_0.2658, %Arg_1.2331)
}

%region_1983.45426.clone (Arg_0.2659: f32[], Arg_1.2332: f32[]) -> f32[] {
  %Arg_0.2659 = f32[] parameter(0)
  %Arg_1.2332 = f32[] parameter(1)
  ROOT %add.2367 = f32[] add(%Arg_0.2659, %Arg_1.2332)
}

%region_1986.45453.clone (Arg_0.2660: f32[], Arg_1.2333: f32[]) -> f32[] {
  %Arg_0.2660 = f32[] parameter(0)
  %Arg_1.2333 = f32[] parameter(1)
  ROOT %add.2368 = f32[] add(%Arg_0.2660, %Arg_1.2333)
}

%region_1987.45462.clone (Arg_0.2661: f32[], Arg_1.2334: f32[]) -> f32[] {
  %Arg_0.2661 = f32[] parameter(0)
  %Arg_1.2334 = f32[] parameter(1)
  ROOT %add.2369 = f32[] add(%Arg_0.2661, %Arg_1.2334)
}

%region_1988.45471.clone (Arg_0.2662: f32[], Arg_1.2335: f32[]) -> f32[] {
  %Arg_0.2662 = f32[] parameter(0)
  %Arg_1.2335 = f32[] parameter(1)
  ROOT %add.2370 = f32[] add(%Arg_0.2662, %Arg_1.2335)
}

%region_1989.45480.clone (Arg_0.2663: f32[], Arg_1.2336: f32[]) -> f32[] {
  %Arg_0.2663 = f32[] parameter(0)
  %Arg_1.2336 = f32[] parameter(1)
  ROOT %add.2371 = f32[] add(%Arg_0.2663, %Arg_1.2336)
}

%region_1990.45489.clone (Arg_0.2664: f32[], Arg_1.2337: f32[]) -> f32[] {
  %Arg_0.2664 = f32[] parameter(0)
  %Arg_1.2337 = f32[] parameter(1)
  ROOT %add.2373 = f32[] add(%Arg_0.2664, %Arg_1.2337)
}

%region_1991.45498.clone (Arg_0.2665: f32[], Arg_1.2338: f32[]) -> f32[] {
  %Arg_0.2665 = f32[] parameter(0)
  %Arg_1.2338 = f32[] parameter(1)
  ROOT %add.2374 = f32[] add(%Arg_0.2665, %Arg_1.2338)
}

%region_1992.45507.clone (Arg_0.2666: f32[], Arg_1.2339: f32[]) -> f32[] {
  %Arg_0.2666 = f32[] parameter(0)
  %Arg_1.2339 = f32[] parameter(1)
  ROOT %add.2375 = f32[] add(%Arg_0.2666, %Arg_1.2339)
}

%region_1993.45516.clone (Arg_0.2668: f32[], Arg_1.2340: f32[]) -> f32[] {
  %Arg_0.2668 = f32[] parameter(0)
  %Arg_1.2340 = f32[] parameter(1)
  ROOT %add.2376 = f32[] add(%Arg_0.2668, %Arg_1.2340)
}

%region_1996.45543.clone (Arg_0.2669: f32[], Arg_1.2341: f32[]) -> f32[] {
  %Arg_0.2669 = f32[] parameter(0)
  %Arg_1.2341 = f32[] parameter(1)
  ROOT %add.2377 = f32[] add(%Arg_0.2669, %Arg_1.2341)
}

%region_1997.45552.clone (Arg_0.2670: f32[], Arg_1.2342: f32[]) -> f32[] {
  %Arg_0.2670 = f32[] parameter(0)
  %Arg_1.2342 = f32[] parameter(1)
  ROOT %add.2378 = f32[] add(%Arg_0.2670, %Arg_1.2342)
}

%region_1998.45561.clone (Arg_0.2671: f32[], Arg_1.2343: f32[]) -> f32[] {
  %Arg_0.2671 = f32[] parameter(0)
  %Arg_1.2343 = f32[] parameter(1)
  ROOT %add.2379 = f32[] add(%Arg_0.2671, %Arg_1.2343)
}

%region_1999.45570.clone (Arg_0.2672: f32[], Arg_1.2344: f32[]) -> f32[] {
  %Arg_0.2672 = f32[] parameter(0)
  %Arg_1.2344 = f32[] parameter(1)
  ROOT %add.2380 = f32[] add(%Arg_0.2672, %Arg_1.2344)
}

%region_2000.45579.clone (Arg_0.2673: f32[], Arg_1.2345: f32[]) -> f32[] {
  %Arg_0.2673 = f32[] parameter(0)
  %Arg_1.2345 = f32[] parameter(1)
  ROOT %add.2381 = f32[] add(%Arg_0.2673, %Arg_1.2345)
}

%region_2001.45588.clone (Arg_0.2675: f32[], Arg_1.2346: f32[]) -> f32[] {
  %Arg_0.2675 = f32[] parameter(0)
  %Arg_1.2346 = f32[] parameter(1)
  ROOT %add.2382 = f32[] add(%Arg_0.2675, %Arg_1.2346)
}

%region_2002.45597.clone (Arg_0.2676: f32[], Arg_1.2347: f32[]) -> f32[] {
  %Arg_0.2676 = f32[] parameter(0)
  %Arg_1.2347 = f32[] parameter(1)
  ROOT %add.2383 = f32[] add(%Arg_0.2676, %Arg_1.2347)
}

%region_2003.45606.clone (Arg_0.2677: f32[], Arg_1.2348: f32[]) -> f32[] {
  %Arg_0.2677 = f32[] parameter(0)
  %Arg_1.2348 = f32[] parameter(1)
  ROOT %add.2384 = f32[] add(%Arg_0.2677, %Arg_1.2348)
}

%region_2006.45633.clone (Arg_0.2678: f32[], Arg_1.2349: f32[]) -> f32[] {
  %Arg_0.2678 = f32[] parameter(0)
  %Arg_1.2349 = f32[] parameter(1)
  ROOT %add.2385 = f32[] add(%Arg_0.2678, %Arg_1.2349)
}

%region_2007.45642.clone (Arg_0.2679: f32[], Arg_1.2350: f32[]) -> f32[] {
  %Arg_0.2679 = f32[] parameter(0)
  %Arg_1.2350 = f32[] parameter(1)
  ROOT %add.2387 = f32[] add(%Arg_0.2679, %Arg_1.2350)
}

%region_2008.45651.clone (Arg_0.2680: f32[], Arg_1.2351: f32[]) -> f32[] {
  %Arg_0.2680 = f32[] parameter(0)
  %Arg_1.2351 = f32[] parameter(1)
  ROOT %add.2388 = f32[] add(%Arg_0.2680, %Arg_1.2351)
}

%region_2009.45660.clone (Arg_0.2681: f32[], Arg_1.2352: f32[]) -> f32[] {
  %Arg_0.2681 = f32[] parameter(0)
  %Arg_1.2352 = f32[] parameter(1)
  ROOT %add.2389 = f32[] add(%Arg_0.2681, %Arg_1.2352)
}

%region_2010.45669.clone (Arg_0.2682: f32[], Arg_1.2353: f32[]) -> f32[] {
  %Arg_0.2682 = f32[] parameter(0)
  %Arg_1.2353 = f32[] parameter(1)
  ROOT %add.2390 = f32[] add(%Arg_0.2682, %Arg_1.2353)
}

%region_2011.45678.clone (Arg_0.2683: f32[], Arg_1.2354: f32[]) -> f32[] {
  %Arg_0.2683 = f32[] parameter(0)
  %Arg_1.2354 = f32[] parameter(1)
  ROOT %add.2391 = f32[] add(%Arg_0.2683, %Arg_1.2354)
}

%region_2012.45687.clone (Arg_0.2684: f32[], Arg_1.2355: f32[]) -> f32[] {
  %Arg_0.2684 = f32[] parameter(0)
  %Arg_1.2355 = f32[] parameter(1)
  ROOT %add.2392 = f32[] add(%Arg_0.2684, %Arg_1.2355)
}

%region_2013.45696.clone (Arg_0.2685: f32[], Arg_1.2356: f32[]) -> f32[] {
  %Arg_0.2685 = f32[] parameter(0)
  %Arg_1.2356 = f32[] parameter(1)
  ROOT %add.2393 = f32[] add(%Arg_0.2685, %Arg_1.2356)
}

%region_2016.45723.clone (Arg_0.2686: f32[], Arg_1.2357: f32[]) -> f32[] {
  %Arg_0.2686 = f32[] parameter(0)
  %Arg_1.2357 = f32[] parameter(1)
  ROOT %add.2394 = f32[] add(%Arg_0.2686, %Arg_1.2357)
}

%region_2017.45732.clone (Arg_0.2687: f32[], Arg_1.2358: f32[]) -> f32[] {
  %Arg_0.2687 = f32[] parameter(0)
  %Arg_1.2358 = f32[] parameter(1)
  ROOT %add.2396 = f32[] add(%Arg_0.2687, %Arg_1.2358)
}

%region_2018.45741.clone (Arg_0.2689: f32[], Arg_1.2359: f32[]) -> f32[] {
  %Arg_0.2689 = f32[] parameter(0)
  %Arg_1.2359 = f32[] parameter(1)
  ROOT %add.2397 = f32[] add(%Arg_0.2689, %Arg_1.2359)
}

%region_2019.45750.clone (Arg_0.2690: f32[], Arg_1.2360: f32[]) -> f32[] {
  %Arg_0.2690 = f32[] parameter(0)
  %Arg_1.2360 = f32[] parameter(1)
  ROOT %add.2398 = f32[] add(%Arg_0.2690, %Arg_1.2360)
}

%region_2020.45759.clone (Arg_0.2691: f32[], Arg_1.2361: f32[]) -> f32[] {
  %Arg_0.2691 = f32[] parameter(0)
  %Arg_1.2361 = f32[] parameter(1)
  ROOT %add.2399 = f32[] add(%Arg_0.2691, %Arg_1.2361)
}

%region_2021.45768.clone (Arg_0.2692: f32[], Arg_1.2362: f32[]) -> f32[] {
  %Arg_0.2692 = f32[] parameter(0)
  %Arg_1.2362 = f32[] parameter(1)
  ROOT %add.2400 = f32[] add(%Arg_0.2692, %Arg_1.2362)
}

%region_2022.45777.clone (Arg_0.2693: f32[], Arg_1.2363: f32[]) -> f32[] {
  %Arg_0.2693 = f32[] parameter(0)
  %Arg_1.2363 = f32[] parameter(1)
  ROOT %add.2401 = f32[] add(%Arg_0.2693, %Arg_1.2363)
}

%region_2023.45786.clone (Arg_0.2694: f32[], Arg_1.2365: f32[]) -> f32[] {
  %Arg_0.2694 = f32[] parameter(0)
  %Arg_1.2365 = f32[] parameter(1)
  ROOT %add.2402 = f32[] add(%Arg_0.2694, %Arg_1.2365)
}

%region_2026.45813.clone (Arg_0.2695: f32[], Arg_1.2366: f32[]) -> f32[] {
  %Arg_0.2695 = f32[] parameter(0)
  %Arg_1.2366 = f32[] parameter(1)
  ROOT %add.2403 = f32[] add(%Arg_0.2695, %Arg_1.2366)
}

%region_2027.45822.clone (Arg_0.2696: f32[], Arg_1.2367: f32[]) -> f32[] {
  %Arg_0.2696 = f32[] parameter(0)
  %Arg_1.2367 = f32[] parameter(1)
  ROOT %add.2404 = f32[] add(%Arg_0.2696, %Arg_1.2367)
}

%region_2028.45831.clone (Arg_0.2698: f32[], Arg_1.2368: f32[]) -> f32[] {
  %Arg_0.2698 = f32[] parameter(0)
  %Arg_1.2368 = f32[] parameter(1)
  ROOT %add.2405 = f32[] add(%Arg_0.2698, %Arg_1.2368)
}

%region_2029.45840.clone (Arg_0.2699: f32[], Arg_1.2369: f32[]) -> f32[] {
  %Arg_0.2699 = f32[] parameter(0)
  %Arg_1.2369 = f32[] parameter(1)
  ROOT %add.2406 = f32[] add(%Arg_0.2699, %Arg_1.2369)
}

%region_2030.45849.clone (Arg_0.2700: f32[], Arg_1.2370: f32[]) -> f32[] {
  %Arg_0.2700 = f32[] parameter(0)
  %Arg_1.2370 = f32[] parameter(1)
  ROOT %add.2407 = f32[] add(%Arg_0.2700, %Arg_1.2370)
}

%region_2031.45858.clone (Arg_0.2701: f32[], Arg_1.2372: f32[]) -> f32[] {
  %Arg_0.2701 = f32[] parameter(0)
  %Arg_1.2372 = f32[] parameter(1)
  ROOT %add.2408 = f32[] add(%Arg_0.2701, %Arg_1.2372)
}

%region_2032.45867.clone (Arg_0.2702: f32[], Arg_1.2373: f32[]) -> f32[] {
  %Arg_0.2702 = f32[] parameter(0)
  %Arg_1.2373 = f32[] parameter(1)
  ROOT %add.2409 = f32[] add(%Arg_0.2702, %Arg_1.2373)
}

%region_2033.45876.clone (Arg_0.2703: f32[], Arg_1.2374: f32[]) -> f32[] {
  %Arg_0.2703 = f32[] parameter(0)
  %Arg_1.2374 = f32[] parameter(1)
  ROOT %add.2410 = f32[] add(%Arg_0.2703, %Arg_1.2374)
}

%region_2036.45903.clone (Arg_0.2704: f32[], Arg_1.2375: f32[]) -> f32[] {
  %Arg_0.2704 = f32[] parameter(0)
  %Arg_1.2375 = f32[] parameter(1)
  ROOT %add.2411 = f32[] add(%Arg_0.2704, %Arg_1.2375)
}

%region_2037.45912.clone (Arg_0.2705: f32[], Arg_1.2376: f32[]) -> f32[] {
  %Arg_0.2705 = f32[] parameter(0)
  %Arg_1.2376 = f32[] parameter(1)
  ROOT %add.2412 = f32[] add(%Arg_0.2705, %Arg_1.2376)
}

%region_2038.45921.clone (Arg_0.2706: f32[], Arg_1.2377: f32[]) -> f32[] {
  %Arg_0.2706 = f32[] parameter(0)
  %Arg_1.2377 = f32[] parameter(1)
  ROOT %add.2413 = f32[] add(%Arg_0.2706, %Arg_1.2377)
}

%region_2039.45930.clone (Arg_0.2707: f32[], Arg_1.2378: f32[]) -> f32[] {
  %Arg_0.2707 = f32[] parameter(0)
  %Arg_1.2378 = f32[] parameter(1)
  ROOT %add.2414 = f32[] add(%Arg_0.2707, %Arg_1.2378)
}

%region_2040.45939.clone (Arg_0.2708: f32[], Arg_1.2379: f32[]) -> f32[] {
  %Arg_0.2708 = f32[] parameter(0)
  %Arg_1.2379 = f32[] parameter(1)
  ROOT %add.2415 = f32[] add(%Arg_0.2708, %Arg_1.2379)
}

%region_2041.45948.clone (Arg_0.2709: f32[], Arg_1.2380: f32[]) -> f32[] {
  %Arg_0.2709 = f32[] parameter(0)
  %Arg_1.2380 = f32[] parameter(1)
  ROOT %add.2416 = f32[] add(%Arg_0.2709, %Arg_1.2380)
}

%region_2042.45957.clone (Arg_0.2710: f32[], Arg_1.2381: f32[]) -> f32[] {
  %Arg_0.2710 = f32[] parameter(0)
  %Arg_1.2381 = f32[] parameter(1)
  ROOT %add.2417 = f32[] add(%Arg_0.2710, %Arg_1.2381)
}

%region_2043.45966.clone (Arg_0.2711: f32[], Arg_1.2382: f32[]) -> f32[] {
  %Arg_0.2711 = f32[] parameter(0)
  %Arg_1.2382 = f32[] parameter(1)
  ROOT %add.2418 = f32[] add(%Arg_0.2711, %Arg_1.2382)
}

%region_2046.45993.clone (Arg_0.2712: f32[], Arg_1.2383: f32[]) -> f32[] {
  %Arg_0.2712 = f32[] parameter(0)
  %Arg_1.2383 = f32[] parameter(1)
  ROOT %add.2419 = f32[] add(%Arg_0.2712, %Arg_1.2383)
}

%region_2047.46002.clone (Arg_0.2713: f32[], Arg_1.2384: f32[]) -> f32[] {
  %Arg_0.2713 = f32[] parameter(0)
  %Arg_1.2384 = f32[] parameter(1)
  ROOT %add.2420 = f32[] add(%Arg_0.2713, %Arg_1.2384)
}

%region_2048.46011.clone (Arg_0.2714: f32[], Arg_1.2386: f32[]) -> f32[] {
  %Arg_0.2714 = f32[] parameter(0)
  %Arg_1.2386 = f32[] parameter(1)
  ROOT %add.2421 = f32[] add(%Arg_0.2714, %Arg_1.2386)
}

%region_2049.46020.clone (Arg_0.2715: f32[], Arg_1.2387: f32[]) -> f32[] {
  %Arg_0.2715 = f32[] parameter(0)
  %Arg_1.2387 = f32[] parameter(1)
  ROOT %add.2422 = f32[] add(%Arg_0.2715, %Arg_1.2387)
}

%region_2050.46029.clone (Arg_0.2716: f32[], Arg_1.2388: f32[]) -> f32[] {
  %Arg_0.2716 = f32[] parameter(0)
  %Arg_1.2388 = f32[] parameter(1)
  ROOT %add.2423 = f32[] add(%Arg_0.2716, %Arg_1.2388)
}

%region_2051.46038.clone (Arg_0.2717: f32[], Arg_1.2389: f32[]) -> f32[] {
  %Arg_0.2717 = f32[] parameter(0)
  %Arg_1.2389 = f32[] parameter(1)
  ROOT %add.2424 = f32[] add(%Arg_0.2717, %Arg_1.2389)
}

%region_2052.46047.clone (Arg_0.2718: f32[], Arg_1.2390: f32[]) -> f32[] {
  %Arg_0.2718 = f32[] parameter(0)
  %Arg_1.2390 = f32[] parameter(1)
  ROOT %add.2425 = f32[] add(%Arg_0.2718, %Arg_1.2390)
}

%region_2053.46056.clone (Arg_0.2719: f32[], Arg_1.2391: f32[]) -> f32[] {
  %Arg_0.2719 = f32[] parameter(0)
  %Arg_1.2391 = f32[] parameter(1)
  ROOT %add.2426 = f32[] add(%Arg_0.2719, %Arg_1.2391)
}

%region_2056.46083.clone (Arg_0.2720: f32[], Arg_1.2392: f32[]) -> f32[] {
  %Arg_0.2720 = f32[] parameter(0)
  %Arg_1.2392 = f32[] parameter(1)
  ROOT %add.2428 = f32[] add(%Arg_0.2720, %Arg_1.2392)
}

%region_2057.46092.clone (Arg_0.2721: f32[], Arg_1.2393: f32[]) -> f32[] {
  %Arg_0.2721 = f32[] parameter(0)
  %Arg_1.2393 = f32[] parameter(1)
  ROOT %add.2429 = f32[] add(%Arg_0.2721, %Arg_1.2393)
}

%region_2058.46101.clone (Arg_0.2722: f32[], Arg_1.2395: f32[]) -> f32[] {
  %Arg_0.2722 = f32[] parameter(0)
  %Arg_1.2395 = f32[] parameter(1)
  ROOT %add.2430 = f32[] add(%Arg_0.2722, %Arg_1.2395)
}

%region_2059.46110.clone (Arg_0.2723: f32[], Arg_1.2396: f32[]) -> f32[] {
  %Arg_0.2723 = f32[] parameter(0)
  %Arg_1.2396 = f32[] parameter(1)
  ROOT %add.2431 = f32[] add(%Arg_0.2723, %Arg_1.2396)
}

%region_2060.46119.clone (Arg_0.2724: f32[], Arg_1.2397: f32[]) -> f32[] {
  %Arg_0.2724 = f32[] parameter(0)
  %Arg_1.2397 = f32[] parameter(1)
  ROOT %add.2432 = f32[] add(%Arg_0.2724, %Arg_1.2397)
}

%region_2061.46128.clone (Arg_0.2725: f32[], Arg_1.2398: f32[]) -> f32[] {
  %Arg_0.2725 = f32[] parameter(0)
  %Arg_1.2398 = f32[] parameter(1)
  ROOT %add.2433 = f32[] add(%Arg_0.2725, %Arg_1.2398)
}

%region_2062.46137.clone (Arg_0.2726: f32[], Arg_1.2399: f32[]) -> f32[] {
  %Arg_0.2726 = f32[] parameter(0)
  %Arg_1.2399 = f32[] parameter(1)
  ROOT %add.2435 = f32[] add(%Arg_0.2726, %Arg_1.2399)
}

%region_2063.46146.clone (Arg_0.2727: f32[], Arg_1.2400: f32[]) -> f32[] {
  %Arg_0.2727 = f32[] parameter(0)
  %Arg_1.2400 = f32[] parameter(1)
  ROOT %add.2436 = f32[] add(%Arg_0.2727, %Arg_1.2400)
}

%region_2066.46173.clone (Arg_0.2728: f32[], Arg_1.2401: f32[]) -> f32[] {
  %Arg_0.2728 = f32[] parameter(0)
  %Arg_1.2401 = f32[] parameter(1)
  ROOT %add.2437 = f32[] add(%Arg_0.2728, %Arg_1.2401)
}

%region_2067.46182.clone (Arg_0.2729: f32[], Arg_1.2402: f32[]) -> f32[] {
  %Arg_0.2729 = f32[] parameter(0)
  %Arg_1.2402 = f32[] parameter(1)
  ROOT %add.2438 = f32[] add(%Arg_0.2729, %Arg_1.2402)
}

%region_2068.46191.clone (Arg_0.2730: f32[], Arg_1.2403: f32[]) -> f32[] {
  %Arg_0.2730 = f32[] parameter(0)
  %Arg_1.2403 = f32[] parameter(1)
  ROOT %add.2440 = f32[] add(%Arg_0.2730, %Arg_1.2403)
}

%region_2069.46200.clone (Arg_0.2731: f32[], Arg_1.2404: f32[]) -> f32[] {
  %Arg_0.2731 = f32[] parameter(0)
  %Arg_1.2404 = f32[] parameter(1)
  ROOT %add.2441 = f32[] add(%Arg_0.2731, %Arg_1.2404)
}

%region_2070.46209.clone (Arg_0.2732: f32[], Arg_1.2405: f32[]) -> f32[] {
  %Arg_0.2732 = f32[] parameter(0)
  %Arg_1.2405 = f32[] parameter(1)
  ROOT %add.2442 = f32[] add(%Arg_0.2732, %Arg_1.2405)
}

%region_2071.46218.clone (Arg_0.2733: f32[], Arg_1.2406: f32[]) -> f32[] {
  %Arg_0.2733 = f32[] parameter(0)
  %Arg_1.2406 = f32[] parameter(1)
  ROOT %add.2443 = f32[] add(%Arg_0.2733, %Arg_1.2406)
}

%region_2072.46227.clone (Arg_0.2734: f32[], Arg_1.2407: f32[]) -> f32[] {
  %Arg_0.2734 = f32[] parameter(0)
  %Arg_1.2407 = f32[] parameter(1)
  ROOT %add.2444 = f32[] add(%Arg_0.2734, %Arg_1.2407)
}

%region_2073.46236.clone (Arg_0.2735: f32[], Arg_1.2408: f32[]) -> f32[] {
  %Arg_0.2735 = f32[] parameter(0)
  %Arg_1.2408 = f32[] parameter(1)
  ROOT %add.2445 = f32[] add(%Arg_0.2735, %Arg_1.2408)
}

%region_2076.46263.clone (Arg_0.2737: f32[], Arg_1.2409: f32[]) -> f32[] {
  %Arg_0.2737 = f32[] parameter(0)
  %Arg_1.2409 = f32[] parameter(1)
  ROOT %add.2446 = f32[] add(%Arg_0.2737, %Arg_1.2409)
}

%region_2077.46272.clone (Arg_0.2738: f32[], Arg_1.2410: f32[]) -> f32[] {
  %Arg_0.2738 = f32[] parameter(0)
  %Arg_1.2410 = f32[] parameter(1)
  ROOT %add.2447 = f32[] add(%Arg_0.2738, %Arg_1.2410)
}

%region_2078.46281.clone (Arg_0.2739: f32[], Arg_1.2411: f32[]) -> f32[] {
  %Arg_0.2739 = f32[] parameter(0)
  %Arg_1.2411 = f32[] parameter(1)
  ROOT %add.2448 = f32[] add(%Arg_0.2739, %Arg_1.2411)
}

%region_2079.46290.clone (Arg_0.2740: f32[], Arg_1.2412: f32[]) -> f32[] {
  %Arg_0.2740 = f32[] parameter(0)
  %Arg_1.2412 = f32[] parameter(1)
  ROOT %add.2449 = f32[] add(%Arg_0.2740, %Arg_1.2412)
}

%region_2080.46299.clone (Arg_0.2741: f32[], Arg_1.2413: f32[]) -> f32[] {
  %Arg_0.2741 = f32[] parameter(0)
  %Arg_1.2413 = f32[] parameter(1)
  ROOT %add.2450 = f32[] add(%Arg_0.2741, %Arg_1.2413)
}

%region_2081.46308.clone (Arg_0.2742: f32[], Arg_1.2414: f32[]) -> f32[] {
  %Arg_0.2742 = f32[] parameter(0)
  %Arg_1.2414 = f32[] parameter(1)
  ROOT %add.2451 = f32[] add(%Arg_0.2742, %Arg_1.2414)
}

%region_2082.46317.clone (Arg_0.2743: f32[], Arg_1.2415: f32[]) -> f32[] {
  %Arg_0.2743 = f32[] parameter(0)
  %Arg_1.2415 = f32[] parameter(1)
  ROOT %add.2452 = f32[] add(%Arg_0.2743, %Arg_1.2415)
}

%region_2083.46326.clone (Arg_0.2744: f32[], Arg_1.2416: f32[]) -> f32[] {
  %Arg_0.2744 = f32[] parameter(0)
  %Arg_1.2416 = f32[] parameter(1)
  ROOT %add.2453 = f32[] add(%Arg_0.2744, %Arg_1.2416)
}

%region_2086.46353.clone (Arg_0.2745: f32[], Arg_1.2417: f32[]) -> f32[] {
  %Arg_0.2745 = f32[] parameter(0)
  %Arg_1.2417 = f32[] parameter(1)
  ROOT %add.2454 = f32[] add(%Arg_0.2745, %Arg_1.2417)
}

%region_2087.46362.clone (Arg_0.2746: f32[], Arg_1.2418: f32[]) -> f32[] {
  %Arg_0.2746 = f32[] parameter(0)
  %Arg_1.2418 = f32[] parameter(1)
  ROOT %add.2455 = f32[] add(%Arg_0.2746, %Arg_1.2418)
}

%region_2088.46371.clone (Arg_0.2747: f32[], Arg_1.2419: f32[]) -> f32[] {
  %Arg_0.2747 = f32[] parameter(0)
  %Arg_1.2419 = f32[] parameter(1)
  ROOT %add.2456 = f32[] add(%Arg_0.2747, %Arg_1.2419)
}

%region_2089.46380.clone (Arg_0.2748: f32[], Arg_1.2420: f32[]) -> f32[] {
  %Arg_0.2748 = f32[] parameter(0)
  %Arg_1.2420 = f32[] parameter(1)
  ROOT %add.2457 = f32[] add(%Arg_0.2748, %Arg_1.2420)
}

%region_2090.46389.clone (Arg_0.2749: f32[], Arg_1.2421: f32[]) -> f32[] {
  %Arg_0.2749 = f32[] parameter(0)
  %Arg_1.2421 = f32[] parameter(1)
  ROOT %add.2458 = f32[] add(%Arg_0.2749, %Arg_1.2421)
}

%region_2091.46398.clone (Arg_0.2750: f32[], Arg_1.2422: f32[]) -> f32[] {
  %Arg_0.2750 = f32[] parameter(0)
  %Arg_1.2422 = f32[] parameter(1)
  ROOT %add.2459 = f32[] add(%Arg_0.2750, %Arg_1.2422)
}

%region_2092.46407.clone (Arg_0.2751: f32[], Arg_1.2423: f32[]) -> f32[] {
  %Arg_0.2751 = f32[] parameter(0)
  %Arg_1.2423 = f32[] parameter(1)
  ROOT %add.2460 = f32[] add(%Arg_0.2751, %Arg_1.2423)
}

%region_2093.46416.clone (Arg_0.2752: f32[], Arg_1.2424: f32[]) -> f32[] {
  %Arg_0.2752 = f32[] parameter(0)
  %Arg_1.2424 = f32[] parameter(1)
  ROOT %add.2461 = f32[] add(%Arg_0.2752, %Arg_1.2424)
}

%region_2096.46443.clone (Arg_0.2753: f32[], Arg_1.2425: f32[]) -> f32[] {
  %Arg_0.2753 = f32[] parameter(0)
  %Arg_1.2425 = f32[] parameter(1)
  ROOT %add.2462 = f32[] add(%Arg_0.2753, %Arg_1.2425)
}

%region_2097.46452.clone (Arg_0.2754: f32[], Arg_1.2426: f32[]) -> f32[] {
  %Arg_0.2754 = f32[] parameter(0)
  %Arg_1.2426 = f32[] parameter(1)
  ROOT %add.2463 = f32[] add(%Arg_0.2754, %Arg_1.2426)
}

%region_2098.46461.clone (Arg_0.2755: f32[], Arg_1.2427: f32[]) -> f32[] {
  %Arg_0.2755 = f32[] parameter(0)
  %Arg_1.2427 = f32[] parameter(1)
  ROOT %add.2464 = f32[] add(%Arg_0.2755, %Arg_1.2427)
}

%region_2099.46470.clone (Arg_0.2756: f32[], Arg_1.2428: f32[]) -> f32[] {
  %Arg_0.2756 = f32[] parameter(0)
  %Arg_1.2428 = f32[] parameter(1)
  ROOT %add.2465 = f32[] add(%Arg_0.2756, %Arg_1.2428)
}

%region_2100.46479.clone (Arg_0.2757: f32[], Arg_1.2429: f32[]) -> f32[] {
  %Arg_0.2757 = f32[] parameter(0)
  %Arg_1.2429 = f32[] parameter(1)
  ROOT %add.2466 = f32[] add(%Arg_0.2757, %Arg_1.2429)
}

%region_2101.46488.clone (Arg_0.2758: f32[], Arg_1.2430: f32[]) -> f32[] {
  %Arg_0.2758 = f32[] parameter(0)
  %Arg_1.2430 = f32[] parameter(1)
  ROOT %add.2467 = f32[] add(%Arg_0.2758, %Arg_1.2430)
}

%region_2102.46497.clone (Arg_0.2759: f32[], Arg_1.2431: f32[]) -> f32[] {
  %Arg_0.2759 = f32[] parameter(0)
  %Arg_1.2431 = f32[] parameter(1)
  ROOT %add.2468 = f32[] add(%Arg_0.2759, %Arg_1.2431)
}

%region_2103.46506.clone (Arg_0.2760: f32[], Arg_1.2432: f32[]) -> f32[] {
  %Arg_0.2760 = f32[] parameter(0)
  %Arg_1.2432 = f32[] parameter(1)
  ROOT %add.2469 = f32[] add(%Arg_0.2760, %Arg_1.2432)
}

%region_2106.46533.clone (Arg_0.2761: f32[], Arg_1.2434: f32[]) -> f32[] {
  %Arg_0.2761 = f32[] parameter(0)
  %Arg_1.2434 = f32[] parameter(1)
  ROOT %add.2470 = f32[] add(%Arg_0.2761, %Arg_1.2434)
}

%region_2107.46542.clone (Arg_0.2762: f32[], Arg_1.2435: f32[]) -> f32[] {
  %Arg_0.2762 = f32[] parameter(0)
  %Arg_1.2435 = f32[] parameter(1)
  ROOT %add.2471 = f32[] add(%Arg_0.2762, %Arg_1.2435)
}

%region_2108.46551.clone (Arg_0.2763: f32[], Arg_1.2436: f32[]) -> f32[] {
  %Arg_0.2763 = f32[] parameter(0)
  %Arg_1.2436 = f32[] parameter(1)
  ROOT %add.2472 = f32[] add(%Arg_0.2763, %Arg_1.2436)
}

%region_2109.46560.clone (Arg_0.2764: f32[], Arg_1.2437: f32[]) -> f32[] {
  %Arg_0.2764 = f32[] parameter(0)
  %Arg_1.2437 = f32[] parameter(1)
  ROOT %add.2473 = f32[] add(%Arg_0.2764, %Arg_1.2437)
}

%region_2110.46569.clone (Arg_0.2765: f32[], Arg_1.2438: f32[]) -> f32[] {
  %Arg_0.2765 = f32[] parameter(0)
  %Arg_1.2438 = f32[] parameter(1)
  ROOT %add.2474 = f32[] add(%Arg_0.2765, %Arg_1.2438)
}

%region_2111.46578.clone (Arg_0.2766: f32[], Arg_1.2439: f32[]) -> f32[] {
  %Arg_0.2766 = f32[] parameter(0)
  %Arg_1.2439 = f32[] parameter(1)
  ROOT %add.2475 = f32[] add(%Arg_0.2766, %Arg_1.2439)
}

%region_2112.46587.clone (Arg_0.2767: f32[], Arg_1.2440: f32[]) -> f32[] {
  %Arg_0.2767 = f32[] parameter(0)
  %Arg_1.2440 = f32[] parameter(1)
  ROOT %add.2476 = f32[] add(%Arg_0.2767, %Arg_1.2440)
}

%region_2113.46596.clone (Arg_0.2768: f32[], Arg_1.2441: f32[]) -> f32[] {
  %Arg_0.2768 = f32[] parameter(0)
  %Arg_1.2441 = f32[] parameter(1)
  ROOT %add.2477 = f32[] add(%Arg_0.2768, %Arg_1.2441)
}

%region_2116.46623.clone (Arg_0.2769: f32[], Arg_1.2442: f32[]) -> f32[] {
  %Arg_0.2769 = f32[] parameter(0)
  %Arg_1.2442 = f32[] parameter(1)
  ROOT %add.2478 = f32[] add(%Arg_0.2769, %Arg_1.2442)
}

%region_2117.46632.clone (Arg_0.2770: f32[], Arg_1.2443: f32[]) -> f32[] {
  %Arg_0.2770 = f32[] parameter(0)
  %Arg_1.2443 = f32[] parameter(1)
  ROOT %add.2479 = f32[] add(%Arg_0.2770, %Arg_1.2443)
}

%region_2118.46641.clone (Arg_0.2771: f32[], Arg_1.2444: f32[]) -> f32[] {
  %Arg_0.2771 = f32[] parameter(0)
  %Arg_1.2444 = f32[] parameter(1)
  ROOT %add.2480 = f32[] add(%Arg_0.2771, %Arg_1.2444)
}

%region_2119.46650.clone (Arg_0.2772: f32[], Arg_1.2445: f32[]) -> f32[] {
  %Arg_0.2772 = f32[] parameter(0)
  %Arg_1.2445 = f32[] parameter(1)
  ROOT %add.2481 = f32[] add(%Arg_0.2772, %Arg_1.2445)
}

%region_2120.46659.clone (Arg_0.2773: f32[], Arg_1.2446: f32[]) -> f32[] {
  %Arg_0.2773 = f32[] parameter(0)
  %Arg_1.2446 = f32[] parameter(1)
  ROOT %add.2482 = f32[] add(%Arg_0.2773, %Arg_1.2446)
}

%region_2121.46668.clone (Arg_0.2774: f32[], Arg_1.2447: f32[]) -> f32[] {
  %Arg_0.2774 = f32[] parameter(0)
  %Arg_1.2447 = f32[] parameter(1)
  ROOT %add.2483 = f32[] add(%Arg_0.2774, %Arg_1.2447)
}

%region_2122.46677.clone (Arg_0.2775: f32[], Arg_1.2448: f32[]) -> f32[] {
  %Arg_0.2775 = f32[] parameter(0)
  %Arg_1.2448 = f32[] parameter(1)
  ROOT %add.2484 = f32[] add(%Arg_0.2775, %Arg_1.2448)
}

%region_2123.46686.clone (Arg_0.2776: f32[], Arg_1.2449: f32[]) -> f32[] {
  %Arg_0.2776 = f32[] parameter(0)
  %Arg_1.2449 = f32[] parameter(1)
  ROOT %add.2485 = f32[] add(%Arg_0.2776, %Arg_1.2449)
}

%region_2126.46713.clone (Arg_0.2777: f32[], Arg_1.2450: f32[]) -> f32[] {
  %Arg_0.2777 = f32[] parameter(0)
  %Arg_1.2450 = f32[] parameter(1)
  ROOT %add.2486 = f32[] add(%Arg_0.2777, %Arg_1.2450)
}

%region_2127.46722.clone (Arg_0.2778: f32[], Arg_1.2451: f32[]) -> f32[] {
  %Arg_0.2778 = f32[] parameter(0)
  %Arg_1.2451 = f32[] parameter(1)
  ROOT %add.2487 = f32[] add(%Arg_0.2778, %Arg_1.2451)
}

%region_2128.46731.clone (Arg_0.2779: f32[], Arg_1.2452: f32[]) -> f32[] {
  %Arg_0.2779 = f32[] parameter(0)
  %Arg_1.2452 = f32[] parameter(1)
  ROOT %add.2488 = f32[] add(%Arg_0.2779, %Arg_1.2452)
}

%region_2129.46740.clone (Arg_0.2780: f32[], Arg_1.2453: f32[]) -> f32[] {
  %Arg_0.2780 = f32[] parameter(0)
  %Arg_1.2453 = f32[] parameter(1)
  ROOT %add.2489 = f32[] add(%Arg_0.2780, %Arg_1.2453)
}

%region_2130.46749.clone (Arg_0.2781: f32[], Arg_1.2454: f32[]) -> f32[] {
  %Arg_0.2781 = f32[] parameter(0)
  %Arg_1.2454 = f32[] parameter(1)
  ROOT %add.2490 = f32[] add(%Arg_0.2781, %Arg_1.2454)
}

%region_2131.46758.clone (Arg_0.2782: f32[], Arg_1.2455: f32[]) -> f32[] {
  %Arg_0.2782 = f32[] parameter(0)
  %Arg_1.2455 = f32[] parameter(1)
  ROOT %add.2491 = f32[] add(%Arg_0.2782, %Arg_1.2455)
}

ENTRY %main.50649_spmd (param: s32[], param.1: bf16[4096], param.13: bf16[512,8], param.14: bf16[1,4096,14336], param.15: bf16[1,4096,14336], param.16: bf16[1,14336,4096], param.12: bf16[4096], param.5: bf16[4096], param.8: bf16[512,8,128], param.11: bf16[32,128,512], param.6: bf16[512,32,128], param.9: bf16[512,8,128], param.23: bf16[512,8], param.24: bf16[1,4096,14336], param.25: bf16[1,4096,14336], param.26: bf16[1,14336,4096], param.22: bf16[4096], param.17: bf16[4096], param.19: bf16[512,8,128], param.21: bf16[32,128,512], param.18: bf16[512,32,128], param.20: bf16[512,8,128], param.113: bf16[512,8], param.114: bf16[1,4096,14336], param.115: bf16[1,4096,14336], param.116: bf16[1,14336,4096], param.112: bf16[4096], param.107: bf16[4096], param.109: bf16[512,8,128], param.111: bf16[32,128,512], param.108: bf16[512,32,128], param.110: bf16[512,8,128], param.123: bf16[512,8], param.124: bf16[1,4096,14336], param.125: bf16[1,4096,14336], param.126: bf16[1,14336,4096], param.122: bf16[4096], param.117: bf16[4096], param.119: bf16[512,8,128], param.121: bf16[32,128,512], param.118: bf16[512,32,128], param.120: bf16[512,8,128], param.133: bf16[512,8], param.134: bf16[1,4096,14336], param.135: bf16[1,4096,14336], param.136: bf16[1,14336,4096], param.132: bf16[4096], param.127: bf16[4096], param.129: bf16[512,8,128], param.131: bf16[32,128,512], param.128: bf16[512,32,128], param.130: bf16[512,8,128], param.143: bf16[512,8], param.144: bf16[1,4096,14336], param.145: bf16[1,4096,14336], param.146: bf16[1,14336,4096], param.142: bf16[4096], param.137: bf16[4096], param.139: bf16[512,8,128], param.141: bf16[32,128,512], param.138: bf16[512,32,128], param.140: bf16[512,8,128], param.153: bf16[512,8], param.154: bf16[1,4096,14336], param.155: bf16[1,4096,14336], param.156: bf16[1,14336,4096], param.152: bf16[4096], param.147: bf16[4096], param.149: bf16[512,8,128], param.151: bf16[32,128,512], param.148: bf16[512,32,128], param.150: bf16[512,8,128], param.163: bf16[512,8], param.164: bf16[1,4096,14336], param.165: bf16[1,4096,14336], param.166: bf16[1,14336,4096], param.162: bf16[4096], param.157: bf16[4096], param.159: bf16[512,8,128], param.161: bf16[32,128,512], param.158: bf16[512,32,128], param.160: bf16[512,8,128], param.173: bf16[512,8], param.174: bf16[1,4096,14336], param.175: bf16[1,4096,14336], param.176: bf16[1,14336,4096], param.172: bf16[4096], param.167: bf16[4096], param.169: bf16[512,8,128], param.171: bf16[32,128,512], param.168: bf16[512,32,128], param.170: bf16[512,8,128], param.183: bf16[512,8], param.184: bf16[1,4096,14336], param.185: bf16[1,4096,14336], param.186: bf16[1,14336,4096], param.182: bf16[4096], param.177: bf16[4096], param.179: bf16[512,8,128], param.181: bf16[32,128,512], param.178: bf16[512,32,128], param.180: bf16[512,8,128], param.193: bf16[512,8], param.194: bf16[1,4096,14336], param.195: bf16[1,4096,14336], param.196: bf16[1,14336,4096], param.192: bf16[4096], param.187: bf16[4096], param.189: bf16[512,8,128], param.191: bf16[32,128,512], param.188: bf16[512,32,128], param.190: bf16[512,8,128], param.203: bf16[512,8], param.204: bf16[1,4096,14336], param.205: bf16[1,4096,14336], param.206: bf16[1,14336,4096], param.202: bf16[4096], param.197: bf16[4096], param.199: bf16[512,8,128], param.201: bf16[32,128,512], param.198: bf16[512,32,128], param.200: bf16[512,8,128], param.33: bf16[512,8], param.34: bf16[1,4096,14336], param.35: bf16[1,4096,14336], param.36: bf16[1,14336,4096], param.32: bf16[4096], param.27: bf16[4096], param.29: bf16[512,8,128], param.31: bf16[32,128,512], param.28: bf16[512,32,128], param.30: bf16[512,8,128], param.213: bf16[512,8], param.214: bf16[1,4096,14336], param.215: bf16[1,4096,14336], param.216: bf16[1,14336,4096], param.212: bf16[4096], param.207: bf16[4096], param.209: bf16[512,8,128], param.211: bf16[32,128,512], param.208: bf16[512,32,128], param.210: bf16[512,8,128], param.223: bf16[512,8], param.224: bf16[1,4096,14336], param.225: bf16[1,4096,14336], param.226: bf16[1,14336,4096], param.222: bf16[4096], param.217: bf16[4096], param.219: bf16[512,8,128], param.221: bf16[32,128,512], param.218: bf16[512,32,128], param.220: bf16[512,8,128], param.233: bf16[512,8], param.234: bf16[1,4096,14336], param.235: bf16[1,4096,14336], param.236: bf16[1,14336,4096], param.232: bf16[4096], param.227: bf16[4096], param.229: bf16[512,8,128], param.231: bf16[32,128,512], param.228: bf16[512,32,128], param.230: bf16[512,8,128], param.243: bf16[512,8], param.244: bf16[1,4096,14336], param.245: bf16[1,4096,14336], param.246: bf16[1,14336,4096], param.242: bf16[4096], param.237: bf16[4096], param.239: bf16[512,8,128], param.241: bf16[32,128,512], param.238: bf16[512,32,128], param.240: bf16[512,8,128], param.253: bf16[512,8], param.254: bf16[1,4096,14336], param.255: bf16[1,4096,14336], param.256: bf16[1,14336,4096], param.252: bf16[4096], param.247: bf16[4096], param.249: bf16[512,8,128], param.251: bf16[32,128,512], param.248: bf16[512,32,128], param.250: bf16[512,8,128], param.263: bf16[512,8], param.264: bf16[1,4096,14336], param.265: bf16[1,4096,14336], param.266: bf16[1,14336,4096], param.262: bf16[4096], param.257: bf16[4096], param.259: bf16[512,8,128], param.261: bf16[32,128,512], param.258: bf16[512,32,128], param.260: bf16[512,8,128], param.273: bf16[512,8], param.274: bf16[1,4096,14336], param.275: bf16[1,4096,14336], param.276: bf16[1,14336,4096], param.272: bf16[4096], param.267: bf16[4096], param.269: bf16[512,8,128], param.271: bf16[32,128,512], param.268: bf16[512,32,128], param.270: bf16[512,8,128], param.283: bf16[512,8], param.284: bf16[1,4096,14336], param.285: bf16[1,4096,14336], param.286: bf16[1,14336,4096], param.282: bf16[4096], param.277: bf16[4096], param.279: bf16[512,8,128], param.281: bf16[32,128,512], param.278: bf16[512,32,128], param.280: bf16[512,8,128], param.293: bf16[512,8], param.294: bf16[1,4096,14336], param.295: bf16[1,4096,14336], param.296: bf16[1,14336,4096], param.292: bf16[4096], param.287: bf16[4096], param.289: bf16[512,8,128], param.291: bf16[32,128,512], param.288: bf16[512,32,128], param.290: bf16[512,8,128], param.303: bf16[512,8], param.304: bf16[1,4096,14336], param.305: bf16[1,4096,14336], param.306: bf16[1,14336,4096], param.302: bf16[4096], param.297: bf16[4096], param.299: bf16[512,8,128], param.301: bf16[32,128,512], param.298: bf16[512,32,128], param.300: bf16[512,8,128], param.43: bf16[512,8], param.44: bf16[1,4096,14336], param.45: bf16[1,4096,14336], param.46: bf16[1,14336,4096], param.42: bf16[4096], param.37: bf16[4096], param.39: bf16[512,8,128], param.41: bf16[32,128,512], param.38: bf16[512,32,128], param.40: bf16[512,8,128], param.313: bf16[512,8], param.314: bf16[1,4096,14336], param.315: bf16[1,4096,14336], param.316: bf16[1,14336,4096], param.312: bf16[4096], param.307: bf16[4096], param.309: bf16[512,8,128], param.311: bf16[32,128,512], param.308: bf16[512,32,128], param.310: bf16[512,8,128], param.323: bf16[512,8], param.324: bf16[1,4096,14336], param.325: bf16[1,4096,14336], param.326: bf16[1,14336,4096], param.322: bf16[4096], param.317: bf16[4096], param.319: bf16[512,8,128], param.321: bf16[32,128,512], param.318: bf16[512,32,128], param.320: bf16[512,8,128], param.53: bf16[512,8], param.54: bf16[1,4096,14336], param.55: bf16[1,4096,14336], param.56: bf16[1,14336,4096], param.52: bf16[4096], param.47: bf16[4096], param.49: bf16[512,8,128], param.51: bf16[32,128,512], param.48: bf16[512,32,128], param.50: bf16[512,8,128], param.63: bf16[512,8], param.64: bf16[1,4096,14336], param.65: bf16[1,4096,14336], param.66: bf16[1,14336,4096], param.62: bf16[4096], param.57: bf16[4096], param.59: bf16[512,8,128], param.61: bf16[32,128,512], param.58: bf16[512,32,128], param.60: bf16[512,8,128], param.73: bf16[512,8], param.74: bf16[1,4096,14336], param.75: bf16[1,4096,14336], param.76: bf16[1,14336,4096], param.72: bf16[4096], param.67: bf16[4096], param.69: bf16[512,8,128], param.71: bf16[32,128,512], param.68: bf16[512,32,128], param.70: bf16[512,8,128], param.83: bf16[512,8], param.84: bf16[1,4096,14336], param.85: bf16[1,4096,14336], param.86: bf16[1,14336,4096], param.82: bf16[4096], param.77: bf16[4096], param.79: bf16[512,8,128], param.81: bf16[32,128,512], param.78: bf16[512,32,128], param.80: bf16[512,8,128], param.93: bf16[512,8], param.94: bf16[1,4096,14336], param.95: bf16[1,4096,14336], param.96: bf16[1,14336,4096], param.92: bf16[4096], param.87: bf16[4096], param.89: bf16[512,8,128], param.91: bf16[32,128,512], param.88: bf16[512,32,128], param.90: bf16[512,8,128], param.103: bf16[512,8], param.104: bf16[1,4096,14336], param.105: bf16[1,4096,14336], param.106: bf16[1,14336,4096], param.102: bf16[4096], param.97: bf16[4096], param.99: bf16[512,8,128], param.101: bf16[32,128,512], param.98: bf16[512,32,128], param.100: bf16[512,8,128], param.328: bf16[512,32000], param.4: bf16[32000,512], param.331: s32[], param.330: bf16[4096], param.333: bf16[512,8], param.335: bf16[1,4096,14336], param.337: bf16[1,4096,14336], param.339: bf16[1,14336,4096], param.341: bf16[4096], param.343: bf16[4096], param.345: bf16[512,8,128], param.347: bf16[32,128,512], param.349: bf16[512,32,128], param.351: bf16[512,8,128], param.353: bf16[512,8], param.355: bf16[1,4096,14336], param.357: bf16[1,4096,14336], param.359: bf16[1,14336,4096], param.361: bf16[4096], param.363: bf16[4096], param.365: bf16[512,8,128], param.367: bf16[32,128,512], param.369: bf16[512,32,128], param.371: bf16[512,8,128], param.373: bf16[512,8], param.375: bf16[1,4096,14336], param.377: bf16[1,4096,14336], param.379: bf16[1,14336,4096], param.381: bf16[4096], param.383: bf16[4096], param.385: bf16[512,8,128], param.387: bf16[32,128,512], param.389: bf16[512,32,128], param.391: bf16[512,8,128], param.393: bf16[512,8], param.395: bf16[1,4096,14336], param.397: bf16[1,4096,14336], param.399: bf16[1,14336,4096], param.401: bf16[4096], param.403: bf16[4096], param.405: bf16[512,8,128], param.407: bf16[32,128,512], param.409: bf16[512,32,128], param.411: bf16[512,8,128], param.413: bf16[512,8], param.415: bf16[1,4096,14336], param.417: bf16[1,4096,14336], param.419: bf16[1,14336,4096], param.421: bf16[4096], param.423: bf16[4096], param.425: bf16[512,8,128], param.427: bf16[32,128,512], param.429: bf16[512,32,128], param.431: bf16[512,8,128], param.433: bf16[512,8], param.435: bf16[1,4096,14336], param.437: bf16[1,4096,14336], param.439: bf16[1,14336,4096], param.441: bf16[4096], param.443: bf16[4096], param.445: bf16[512,8,128], param.447: bf16[32,128,512], param.449: bf16[512,32,128], param.451: bf16[512,8,128], param.453: bf16[512,8], param.455: bf16[1,4096,14336], param.457: bf16[1,4096,14336], param.459: bf16[1,14336,4096], param.461: bf16[4096], param.463: bf16[4096], param.465: bf16[512,8,128], param.467: bf16[32,128,512], param.469: bf16[512,32,128], param.471: bf16[512,8,128], param.473: bf16[512,8], param.475: bf16[1,4096,14336], param.477: bf16[1,4096,14336], param.479: bf16[1,14336,4096], param.481: bf16[4096], param.483: bf16[4096], param.485: bf16[512,8,128], param.487: bf16[32,128,512], param.489: bf16[512,32,128], param.491: bf16[512,8,128], param.493: bf16[512,8], param.495: bf16[1,4096,14336], param.497: bf16[1,4096,14336], param.499: bf16[1,14336,4096], param.501: bf16[4096], param.503: bf16[4096], param.505: bf16[512,8,128], param.507: bf16[32,128,512], param.509: bf16[512,32,128], param.511: bf16[512,8,128], param.513: bf16[512,8], param.515: bf16[1,4096,14336], param.517: bf16[1,4096,14336], param.519: bf16[1,14336,4096], param.521: bf16[4096], param.523: bf16[4096], param.525: bf16[512,8,128], param.527: bf16[32,128,512], param.529: bf16[512,32,128], param.531: bf16[512,8,128], param.533: bf16[512,8], param.535: bf16[1,4096,14336], param.537: bf16[1,4096,14336], param.539: bf16[1,14336,4096], param.541: bf16[4096], param.543: bf16[4096], param.545: bf16[512,8,128], param.547: bf16[32,128,512], param.549: bf16[512,32,128], param.551: bf16[512,8,128], param.553: bf16[512,8], param.555: bf16[1,4096,14336], param.557: bf16[1,4096,14336], param.559: bf16[1,14336,4096], param.561: bf16[4096], param.563: bf16[4096], param.565: bf16[512,8,128], param.567: bf16[32,128,512], param.569: bf16[512,32,128], param.571: bf16[512,8,128], param.573: bf16[512,8], param.575: bf16[1,4096,14336], param.577: bf16[1,4096,14336], param.579: bf16[1,14336,4096], param.581: bf16[4096], param.583: bf16[4096], param.585: bf16[512,8,128], param.587: bf16[32,128,512], param.589: bf16[512,32,128], param.591: bf16[512,8,128], param.593: bf16[512,8], param.595: bf16[1,4096,14336], param.597: bf16[1,4096,14336], param.599: bf16[1,14336,4096], param.601: bf16[4096], param.603: bf16[4096], param.605: bf16[512,8,128], param.607: bf16[32,128,512], param.609: bf16[512,32,128], param.611: bf16[512,8,128], param.613: bf16[512,8], param.615: bf16[1,4096,14336], param.617: bf16[1,4096,14336], param.619: bf16[1,14336,4096], param.621: bf16[4096], param.623: bf16[4096], param.625: bf16[512,8,128], param.627: bf16[32,128,512], param.629: bf16[512,32,128], param.631: bf16[512,8,128], param.633: bf16[512,8], param.635: bf16[1,4096,14336], param.637: bf16[1,4096,14336], param.639: bf16[1,14336,4096], param.641: bf16[4096], param.643: bf16[4096], param.645: bf16[512,8,128], param.647: bf16[32,128,512], param.649: bf16[512,32,128], param.651: bf16[512,8,128], param.653: bf16[512,8], param.655: bf16[1,4096,14336], param.657: bf16[1,4096,14336], param.659: bf16[1,14336,4096], param.661: bf16[4096], param.663: bf16[4096], param.665: bf16[512,8,128], param.667: bf16[32,128,512], param.669: bf16[512,32,128], param.671: bf16[512,8,128], param.673: bf16[512,8], param.675: bf16[1,4096,14336], param.677: bf16[1,4096,14336], param.679: bf16[1,14336,4096], param.681: bf16[4096], param.683: bf16[4096], param.685: bf16[512,8,128], param.687: bf16[32,128,512], param.689: bf16[512,32,128], param.691: bf16[512,8,128], param.693: bf16[512,8], param.695: bf16[1,4096,14336], param.697: bf16[1,4096,14336], param.699: bf16[1,14336,4096], param.701: bf16[4096], param.703: bf16[4096], param.705: bf16[512,8,128], param.707: bf16[32,128,512], param.709: bf16[512,32,128], param.711: bf16[512,8,128], param.713: bf16[512,8], param.715: bf16[1,4096,14336], param.717: bf16[1,4096,14336], param.719: bf16[1,14336,4096], param.721: bf16[4096], param.723: bf16[4096], param.725: bf16[512,8,128], param.727: bf16[32,128,512], param.729: bf16[512,32,128], param.731: bf16[512,8,128], param.733: bf16[512,8], param.735: bf16[1,4096,14336], param.737: bf16[1,4096,14336], param.739: bf16[1,14336,4096], param.741: bf16[4096], param.743: bf16[4096], param.745: bf16[512,8,128], param.747: bf16[32,128,512], param.749: bf16[512,32,128], param.751: bf16[512,8,128], param.753: bf16[512,8], param.755: bf16[1,4096,14336], param.757: bf16[1,4096,14336], param.759: bf16[1,14336,4096], param.761: bf16[4096], param.763: bf16[4096], param.765: bf16[512,8,128], param.767: bf16[32,128,512], param.769: bf16[512,32,128], param.771: bf16[512,8,128], param.773: bf16[512,8], param.775: bf16[1,4096,14336], param.777: bf16[1,4096,14336], param.779: bf16[1,14336,4096], param.781: bf16[4096], param.783: bf16[4096], param.785: bf16[512,8,128], param.787: bf16[32,128,512], param.789: bf16[512,32,128], param.791: bf16[512,8,128], param.793: bf16[512,8], param.795: bf16[1,4096,14336], param.797: bf16[1,4096,14336], param.799: bf16[1,14336,4096], param.801: bf16[4096], param.803: bf16[4096], param.805: bf16[512,8,128], param.807: bf16[32,128,512], param.809: bf16[512,32,128], param.811: bf16[512,8,128], param.813: bf16[512,8], param.815: bf16[1,4096,14336], param.817: bf16[1,4096,14336], param.819: bf16[1,14336,4096], param.821: bf16[4096], param.823: bf16[4096], param.825: bf16[512,8,128], param.827: bf16[32,128,512], param.829: bf16[512,32,128], param.831: bf16[512,8,128], param.833: bf16[512,8], param.835: bf16[1,4096,14336], param.837: bf16[1,4096,14336], param.839: bf16[1,14336,4096], param.841: bf16[4096], param.843: bf16[4096], param.845: bf16[512,8,128], param.847: bf16[32,128,512], param.849: bf16[512,32,128], param.851: bf16[512,8,128], param.853: bf16[512,8], param.855: bf16[1,4096,14336], param.857: bf16[1,4096,14336], param.859: bf16[1,14336,4096], param.861: bf16[4096], param.863: bf16[4096], param.865: bf16[512,8,128], param.867: bf16[32,128,512], param.869: bf16[512,32,128], param.871: bf16[512,8,128], param.873: bf16[512,8], param.875: bf16[1,4096,14336], param.877: bf16[1,4096,14336], param.879: bf16[1,14336,4096], param.881: bf16[4096], param.883: bf16[4096], param.885: bf16[512,8,128], param.887: bf16[32,128,512], param.889: bf16[512,32,128], param.891: bf16[512,8,128], param.893: bf16[512,8], param.895: bf16[1,4096,14336], param.897: bf16[1,4096,14336], param.899: bf16[1,14336,4096], param.901: bf16[4096], param.903: bf16[4096], param.905: bf16[512,8,128], param.907: bf16[32,128,512], param.909: bf16[512,32,128], param.911: bf16[512,8,128], param.913: bf16[512,8], param.915: bf16[1,4096,14336], param.917: bf16[1,4096,14336], param.919: bf16[1,14336,4096], param.921: bf16[4096], param.923: bf16[4096], param.925: bf16[512,8,128], param.927: bf16[32,128,512], param.929: bf16[512,32,128], param.931: bf16[512,8,128], param.933: bf16[512,8], param.935: bf16[1,4096,14336], param.937: bf16[1,4096,14336], param.939: bf16[1,14336,4096], param.941: bf16[4096], param.943: bf16[4096], param.945: bf16[512,8,128], param.947: bf16[32,128,512], param.949: bf16[512,32,128], param.951: bf16[512,8,128], param.953: bf16[512,8], param.955: bf16[1,4096,14336], param.957: bf16[1,4096,14336], param.959: bf16[1,14336,4096], param.961: bf16[4096], param.963: bf16[4096], param.965: bf16[512,8,128], param.967: bf16[32,128,512], param.969: bf16[512,32,128], param.971: bf16[512,8,128], param.973: bf16[512,32000], param.975: bf16[32000,512], param.332: bf16[4096], param.334: bf16[512,8], param.336: bf16[1,4096,14336], param.338: bf16[1,4096,14336], param.340: bf16[1,14336,4096], param.342: bf16[4096], param.344: bf16[4096], param.346: bf16[512,8,128], param.348: bf16[32,128,512], param.350: bf16[512,32,128], param.352: bf16[512,8,128], param.354: bf16[512,8], param.356: bf16[1,4096,14336], param.358: bf16[1,4096,14336], param.360: bf16[1,14336,4096], param.362: bf16[4096], param.364: bf16[4096], param.366: bf16[512,8,128], param.368: bf16[32,128,512], param.370: bf16[512,32,128], param.372: bf16[512,8,128], param.374: bf16[512,8], param.376: bf16[1,4096,14336], param.378: bf16[1,4096,14336], param.380: bf16[1,14336,4096], param.382: bf16[4096], param.384: bf16[4096], param.386: bf16[512,8,128], param.388: bf16[32,128,512], param.390: bf16[512,32,128], param.392: bf16[512,8,128], param.394: bf16[512,8], param.396: bf16[1,4096,14336], param.398: bf16[1,4096,14336], param.400: bf16[1,14336,4096], param.402: bf16[4096], param.404: bf16[4096], param.406: bf16[512,8,128], param.408: bf16[32,128,512], param.410: bf16[512,32,128], param.412: bf16[512,8,128], param.414: bf16[512,8], param.416: bf16[1,4096,14336], param.418: bf16[1,4096,14336], param.420: bf16[1,14336,4096], param.422: bf16[4096], param.424: bf16[4096], param.426: bf16[512,8,128], param.428: bf16[32,128,512], param.430: bf16[512,32,128], param.432: bf16[512,8,128], param.434: bf16[512,8], param.436: bf16[1,4096,14336], param.438: bf16[1,4096,14336], param.440: bf16[1,14336,4096], param.442: bf16[4096], param.444: bf16[4096], param.446: bf16[512,8,128], param.448: bf16[32,128,512], param.450: bf16[512,32,128], param.452: bf16[512,8,128], param.454: bf16[512,8], param.456: bf16[1,4096,14336], param.458: bf16[1,4096,14336], param.460: bf16[1,14336,4096], param.462: bf16[4096], param.464: bf16[4096], param.466: bf16[512,8,128], param.468: bf16[32,128,512], param.470: bf16[512,32,128], param.472: bf16[512,8,128], param.474: bf16[512,8], param.476: bf16[1,4096,14336], param.478: bf16[1,4096,14336], param.480: bf16[1,14336,4096], param.482: bf16[4096], param.484: bf16[4096], param.486: bf16[512,8,128], param.488: bf16[32,128,512], param.490: bf16[512,32,128], param.492: bf16[512,8,128], param.494: bf16[512,8], param.496: bf16[1,4096,14336], param.498: bf16[1,4096,14336], param.500: bf16[1,14336,4096], param.502: bf16[4096], param.504: bf16[4096], param.506: bf16[512,8,128], param.508: bf16[32,128,512], param.510: bf16[512,32,128], param.512: bf16[512,8,128], param.514: bf16[512,8], param.516: bf16[1,4096,14336], param.518: bf16[1,4096,14336], param.520: bf16[1,14336,4096], param.522: bf16[4096], param.524: bf16[4096], param.526: bf16[512,8,128], param.528: bf16[32,128,512], param.530: bf16[512,32,128], param.532: bf16[512,8,128], param.534: bf16[512,8], param.536: bf16[1,4096,14336], param.538: bf16[1,4096,14336], param.540: bf16[1,14336,4096], param.542: bf16[4096], param.544: bf16[4096], param.546: bf16[512,8,128], param.548: bf16[32,128,512], param.550: bf16[512,32,128], param.552: bf16[512,8,128], param.554: bf16[512,8], param.556: bf16[1,4096,14336], param.558: bf16[1,4096,14336], param.560: bf16[1,14336,4096], param.562: bf16[4096], param.564: bf16[4096], param.566: bf16[512,8,128], param.568: bf16[32,128,512], param.570: bf16[512,32,128], param.572: bf16[512,8,128], param.574: bf16[512,8], param.576: bf16[1,4096,14336], param.578: bf16[1,4096,14336], param.580: bf16[1,14336,4096], param.582: bf16[4096], param.584: bf16[4096], param.586: bf16[512,8,128], param.588: bf16[32,128,512], param.590: bf16[512,32,128], param.592: bf16[512,8,128], param.594: bf16[512,8], param.596: bf16[1,4096,14336], param.598: bf16[1,4096,14336], param.600: bf16[1,14336,4096], param.602: bf16[4096], param.604: bf16[4096], param.606: bf16[512,8,128], param.608: bf16[32,128,512], param.610: bf16[512,32,128], param.612: bf16[512,8,128], param.614: bf16[512,8], param.616: bf16[1,4096,14336], param.618: bf16[1,4096,14336], param.620: bf16[1,14336,4096], param.622: bf16[4096], param.624: bf16[4096], param.626: bf16[512,8,128], param.628: bf16[32,128,512], param.630: bf16[512,32,128], param.632: bf16[512,8,128], param.634: bf16[512,8], param.636: bf16[1,4096,14336], param.638: bf16[1,4096,14336], param.640: bf16[1,14336,4096], param.642: bf16[4096], param.644: bf16[4096], param.646: bf16[512,8,128], param.648: bf16[32,128,512], param.650: bf16[512,32,128], param.652: bf16[512,8,128], param.654: bf16[512,8], param.656: bf16[1,4096,14336], param.658: bf16[1,4096,14336], param.660: bf16[1,14336,4096], param.662: bf16[4096], param.664: bf16[4096], param.666: bf16[512,8,128], param.668: bf16[32,128,512], param.670: bf16[512,32,128], param.672: bf16[512,8,128], param.674: bf16[512,8], param.676: bf16[1,4096,14336], param.678: bf16[1,4096,14336], param.680: bf16[1,14336,4096], param.682: bf16[4096], param.684: bf16[4096], param.686: bf16[512,8,128], param.688: bf16[32,128,512], param.690: bf16[512,32,128], param.692: bf16[512,8,128], param.694: bf16[512,8], param.696: bf16[1,4096,14336], param.698: bf16[1,4096,14336], param.700: bf16[1,14336,4096], param.702: bf16[4096], param.704: bf16[4096], param.706: bf16[512,8,128], param.708: bf16[32,128,512], param.710: bf16[512,32,128], param.712: bf16[512,8,128], param.714: bf16[512,8], param.716: bf16[1,4096,14336], param.718: bf16[1,4096,14336], param.720: bf16[1,14336,4096], param.722: bf16[4096], param.724: bf16[4096], param.726: bf16[512,8,128], param.728: bf16[32,128,512], param.730: bf16[512,32,128], param.732: bf16[512,8,128], param.734: bf16[512,8], param.736: bf16[1,4096,14336], param.738: bf16[1,4096,14336], param.740: bf16[1,14336,4096], param.742: bf16[4096], param.744: bf16[4096], param.746: bf16[512,8,128], param.748: bf16[32,128,512], param.750: bf16[512,32,128], param.752: bf16[512,8,128], param.754: bf16[512,8], param.756: bf16[1,4096,14336], param.758: bf16[1,4096,14336], param.760: bf16[1,14336,4096], param.762: bf16[4096], param.764: bf16[4096], param.766: bf16[512,8,128], param.768: bf16[32,128,512], param.770: bf16[512,32,128], param.772: bf16[512,8,128], param.774: bf16[512,8], param.776: bf16[1,4096,14336], param.778: bf16[1,4096,14336], param.780: bf16[1,14336,4096], param.782: bf16[4096], param.784: bf16[4096], param.786: bf16[512,8,128], param.788: bf16[32,128,512], param.790: bf16[512,32,128], param.792: bf16[512,8,128], param.794: bf16[512,8], param.796: bf16[1,4096,14336], param.798: bf16[1,4096,14336], param.800: bf16[1,14336,4096], param.802: bf16[4096], param.804: bf16[4096], param.806: bf16[512,8,128], param.808: bf16[32,128,512], param.810: bf16[512,32,128], param.812: bf16[512,8,128], param.814: bf16[512,8], param.816: bf16[1,4096,14336], param.818: bf16[1,4096,14336], param.820: bf16[1,14336,4096], param.822: bf16[4096], param.824: bf16[4096], param.826: bf16[512,8,128], param.828: bf16[32,128,512], param.830: bf16[512,32,128], param.832: bf16[512,8,128], param.834: bf16[512,8], param.836: bf16[1,4096,14336], param.838: bf16[1,4096,14336], param.840: bf16[1,14336,4096], param.842: bf16[4096], param.844: bf16[4096], param.846: bf16[512,8,128], param.848: bf16[32,128,512], param.850: bf16[512,32,128], param.852: bf16[512,8,128], param.854: bf16[512,8], param.856: bf16[1,4096,14336], param.858: bf16[1,4096,14336], param.860: bf16[1,14336,4096], param.862: bf16[4096], param.864: bf16[4096], param.866: bf16[512,8,128], param.868: bf16[32,128,512], param.870: bf16[512,32,128], param.872: bf16[512,8,128], param.874: bf16[512,8], param.876: bf16[1,4096,14336], param.878: bf16[1,4096,14336], param.880: bf16[1,14336,4096], param.882: bf16[4096], param.884: bf16[4096], param.886: bf16[512,8,128], param.888: bf16[32,128,512], param.890: bf16[512,32,128], param.892: bf16[512,8,128], param.894: bf16[512,8], param.896: bf16[1,4096,14336], param.898: bf16[1,4096,14336], param.900: bf16[1,14336,4096], param.902: bf16[4096], param.904: bf16[4096], param.906: bf16[512,8,128], param.908: bf16[32,128,512], param.910: bf16[512,32,128], param.912: bf16[512,8,128], param.914: bf16[512,8], param.916: bf16[1,4096,14336], param.918: bf16[1,4096,14336], param.920: bf16[1,14336,4096], param.922: bf16[4096], param.924: bf16[4096], param.926: bf16[512,8,128], param.928: bf16[32,128,512], param.930: bf16[512,32,128], param.932: bf16[512,8,128], param.934: bf16[512,8], param.936: bf16[1,4096,14336], param.938: bf16[1,4096,14336], param.940: bf16[1,14336,4096], param.942: bf16[4096], param.944: bf16[4096], param.946: bf16[512,8,128], param.948: bf16[32,128,512], param.950: bf16[512,32,128], param.952: bf16[512,8,128], param.954: bf16[512,8], param.956: bf16[1,4096,14336], param.958: bf16[1,4096,14336], param.960: bf16[1,14336,4096], param.962: bf16[4096], param.964: bf16[4096], param.966: bf16[512,8,128], param.968: bf16[32,128,512], param.970: bf16[512,32,128], param.972: bf16[512,8,128], param.974: bf16[512,32000], param.976: bf16[32000,512], param.2: s32[], param.3: s32[1,4096], param.7: s32[1,4096], param.10: s32[1,4096], param.329: s32[1,4096], param.327: s32[1,4096]) -> (s32[], bf16[4096], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=5*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=10*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=15*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=20*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=25*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=30*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=35*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=40*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=45*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=50*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=55*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=60*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=65*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=70*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=75*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=80*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=85*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=90*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=95*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=100*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=105*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=110*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=115*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=120*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=125*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=130*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=135*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=140*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=145*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=150*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=155*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=160*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=165*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=170*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=175*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=180*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=185*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=190*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=195*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=200*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=205*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=210*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=215*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=220*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=225*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=230*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=235*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=240*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=245*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=250*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=255*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=260*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=265*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=270*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=275*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=280*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=285*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=290*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=295*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=300*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=305*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=310*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=315*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=320*/bf16[512,32,128], bf16[512,8,128], bf16[512,32000], bf16[32000,512], s32[], /*index=325*/bf16[4096], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=330*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=335*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=340*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=345*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=350*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=355*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=360*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=365*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=370*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=375*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=380*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=385*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=390*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=395*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=400*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=405*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=410*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=415*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=420*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=425*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=430*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=435*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=440*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=445*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=450*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=455*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=460*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=465*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=470*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=475*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=480*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=485*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=490*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=495*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=500*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=505*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=510*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=515*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=520*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=525*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=530*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=535*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=540*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=545*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=550*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=555*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=560*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=565*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=570*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=575*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=580*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=585*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=590*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=595*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=600*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=605*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=610*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=615*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=620*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=625*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=630*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=635*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=640*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=645*/bf16[512,8,128], bf16[512,32000], bf16[32000,512], bf16[4096], bf16[512,8], /*index=650*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=655*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=660*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=665*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=670*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=675*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=680*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=685*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=690*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=695*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=700*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=705*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=710*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=715*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=720*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=725*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=730*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=735*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=740*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=745*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=750*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=755*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=760*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=765*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=770*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=775*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=780*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=785*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=790*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=795*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=800*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=805*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=810*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=815*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=820*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=825*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=830*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=835*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=840*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=845*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=850*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=855*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=860*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=865*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=870*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=875*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=880*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=885*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=890*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=895*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=900*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=905*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=910*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=915*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=920*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=925*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=930*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=935*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=940*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=945*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=950*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=955*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=960*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=965*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,32000], /*index=970*/bf16[32000,512], s32[], bf16[], f32[], f32[], /*index=975*/bf16[], bf16[], s32[]) {
  %param = s32[] parameter(0), sharding={replicated}
  %constant.3779 = s32[] constant(1)
  %add.2492 = s32[] add(%param, %constant.3779)
  %param.1 = bf16[4096]{0} parameter(1), sharding={replicated}
  %param.2 = s32[] parameter(971), sharding={replicated}
  %constant.3780 = s32[] constant(15000)
  %compare.733 = pred[] compare(%param.2, %constant.3780), direction=LT
  %constant.3781 = f32[] constant(1)
  %constant.3783 = s32[] constant(0)
  %maximum.1 = s32[] maximum(%constant.3783, %param.2)
  %minimum.1 = s32[] minimum(%constant.3780, %maximum.1)
  %convert.573 = f32[] convert(%minimum.1)
  %constant.3784 = f32[] constant(6.66666674e-05)
  %multiply.1686 = f32[] multiply(%convert.573, %constant.3784)
  %subtract.63 = f32[] subtract(%constant.3781, %multiply.1686)
  %constant.3785 = f32[] constant(-3e-05)
  %multiply.1687 = f32[] multiply(%subtract.63, %constant.3785)
  %constant.3786 = f32[] constant(3e-05)
  %add.2493 = f32[] add(%multiply.1687, %constant.3786)
  %constant.3787 = s32[] constant(-15000)
  %add.2494 = s32[] add(%param.2, %constant.3787)
  %convert.574 = f32[] convert(%add.2494)
  %constant.3788 = f32[] constant(2.32708844e-05)
  %multiply.1688 = f32[] multiply(%convert.574, %constant.3788)
  %cosine.0 = f32[] cosine(%multiply.1688)
  %add.2496 = f32[] add(%cosine.0, %constant.3781)
  %constant.3790 = f32[] constant(1.5e-05)
  %multiply.1689 = f32[] multiply(%add.2496, %constant.3790)
  %constant.3792 = f32[] constant(0.5)
  %multiply.1690 = f32[] multiply(%add.2496, %constant.3792)
  %subtract.64 = f32[] subtract(%constant.3781, %multiply.1690)
  %constant.3793 = f32[] constant(3e-06)
  %multiply.1691 = f32[] multiply(%subtract.64, %constant.3793)
  %add.2497 = f32[] add(%multiply.1689, %multiply.1691)
  %select.325 = f32[] select(%compare.733, %add.2493, %add.2497)
  %constant.3794 = f32[] constant(-1)
  %multiply.1693 = f32[] multiply(%select.325, %constant.3794)
  %convert.575 = bf16[] convert(%multiply.1693)
  %broadcast.5338 = bf16[4096]{0} broadcast(%convert.575), dimensions={}
  %constant.3795 = bf16[] constant(0)
  %broadcast.5340 = bf16[1,4096,8]{2,1,0} broadcast(%constant.3795), dimensions={}
  %iota.1550 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=0
  %constant.3796 = s32[8]{0} constant({0, 1, 2, 3, 4, 5, 6, 7})
  %partition-id = u32[] partition-id()
  %dynamic-slice = s32[1]{0} dynamic-slice(%constant.3796, %partition-id), dynamic_slice_sizes={1}
  %reshape.11399 = s32[] reshape(%dynamic-slice)
  %multiply.1694 = s32[] multiply(%reshape.11399, %constant.3779)
  %broadcast.5341 = s32[1,4096,2,1]{3,2,1,0} broadcast(%multiply.1694), dimensions={}
  %add.2498 = s32[1,4096,2,1]{3,2,1,0} add(%iota.1550, %broadcast.5341)
  %iota.1551 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1553 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1555 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1557 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1559 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1561 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1563 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1565 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1567 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1569 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1571 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1573 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1575 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1577 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1579 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1581 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1583 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1585 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1588 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1590 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1592 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1594 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1596 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1598 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1600 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1602 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1604 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1606 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1608 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1610 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1612 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1614 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %param.3 = s32[1,4096]{1,0} parameter(972), sharding={devices=[8,1]<=[8]}
  %broadcast.5379 = s32[1,4096,32000]{2,1,0} broadcast(%param.3), dimensions={0,1}
  %iota.1615 = s32[1,4096,32000]{2,1,0} iota(), iota_dimension=2
  %compare.734 = pred[1,4096,32000]{2,1,0} compare(%broadcast.5379, %iota.1615), direction=EQ
  %convert.576 = bf16[1,4096,32000]{2,1,0} convert(%compare.734)
  %param.4 = bf16[32000,512]{1,0} parameter(323), sharding={devices=[1,8]<=[8]}
  %all-gather = bf16[32000,4096]{1,0} all-gather(%param.4), channel_id=1, replica_groups=[1,8]<=[8], dimensions={1}, use_global_device_ids=true
  %dot.162 = bf16[1,4096,4096]{2,1,0} dot(%convert.576, %all-gather), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2150 = bf16[1,4096,4096]{2,1,0} copy(%dot.162)
  %copy.2151 = bf16[1,4096,4096]{2,1,0} copy(%copy.2150)
  %convert.577 = f32[1,4096,4096]{2,1,0} convert(%copy.2151)
  %multiply.1727 = f32[1,4096,4096]{2,1,0} multiply(%convert.577, %convert.577)
  %constant.3956 = f32[] constant(0)
  %reduce.192 = f32[1,4096]{1,0} reduce(%multiply.1727, %constant.3956), dimensions={2}, to_apply=%region_0.1166
  %constant.3957 = f32[] constant(0.000244140625)
  %broadcast.5380 = f32[1,4096]{1,0} broadcast(%constant.3957), dimensions={}
  %multiply.1728 = f32[1,4096]{1,0} multiply(%reduce.192, %broadcast.5380)
  %constant.3958 = f32[] constant(1e-05)
  %broadcast.5381 = f32[1,4096]{1,0} broadcast(%constant.3958), dimensions={}
  %add.2530 = f32[1,4096]{1,0} add(%multiply.1728, %broadcast.5381)
  %rsqrt.64 = f32[1,4096]{1,0} rsqrt(%add.2530)
  %broadcast.5382 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.64), dimensions={0,1}
  %multiply.1729 = f32[1,4096,4096]{2,1,0} multiply(%convert.577, %broadcast.5382)
  %convert.578 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1729)
  %param.5 = bf16[4096]{0} parameter(7), sharding={replicated}
  %broadcast.5383 = bf16[1,4096,4096]{2,1,0} broadcast(%param.5), dimensions={2}
  %multiply.1730 = bf16[1,4096,4096]{2,1,0} multiply(%convert.578, %broadcast.5383)
  %copy.2152 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1730)
  %copy.2153 = bf16[1,4096,4096]{2,1,0} copy(%copy.2152)
  %param.6 = bf16[512,32,128]{2,1,0} parameter(10), sharding={devices=[8,1,1]<=[8]}
  %all-gather.1 = bf16[4096,32,128]{2,1,0} all-gather(%param.6), channel_id=2, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.163 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2153, %all-gather.1), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.128 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.163), slice={[0:1], [0:4096], [0:32], [0:64]}
  %param.7 = s32[1,4096]{1,0} parameter(973), sharding={devices=[8,1]<=[8]}
  %convert.579 = f32[1,4096]{1,0} convert(%param.7)
  %broadcast.5384 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.579), dimensions={0,1}
  %constant.3968 = f32[] constant(1e+06)
  %broadcast.5385 = f32[64]{0} broadcast(%constant.3968), dimensions={}
  %iota.1616 = s32[64]{0} iota(), iota_dimension=0
  %constant.3969 = s32[] constant(2)
  %broadcast.5386 = s32[64]{0} broadcast(%constant.3969), dimensions={}
  %multiply.1732 = s32[64]{0} multiply(%iota.1616, %broadcast.5386)
  %convert.580 = f32[64]{0} convert(%multiply.1732)
  %constant.3970 = f32[] constant(0.0078125)
  %broadcast.5387 = f32[64]{0} broadcast(%constant.3970), dimensions={}
  %multiply.1733 = f32[64]{0} multiply(%convert.580, %broadcast.5387)
  %power.0 = f32[64]{0} power(%broadcast.5385, %multiply.1733)
  %broadcast.5388 = f32[1,4096,1,64]{3,2,1,0} broadcast(%power.0), dimensions={3}
  %divide.481 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.5384, %broadcast.5388)
  %cosine.1 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.481)
  %convert.581 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.1)
  %reshape.11439 = bf16[1,4096,64]{2,1,0} reshape(%convert.581)
  %broadcast.5389 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.11439), dimensions={0,1,3}
  %multiply.1734 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.128, %broadcast.5389)
  %slice.129 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.163), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.0 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.481)
  %convert.582 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.0)
  %reshape.11442 = bf16[1,4096,64]{2,1,0} reshape(%convert.582)
  %broadcast.5391 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.11442), dimensions={0,1,3}
  %multiply.1736 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.129, %broadcast.5391)
  %subtract.65 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.1734, %multiply.1736)
  %multiply.1737 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.129, %broadcast.5389)
  %multiply.1738 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.128, %broadcast.5391)
  %add.2531 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.1737, %multiply.1738)
  %concatenate.0 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.65, %add.2531), dimensions={3}
  %copy.2154 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.0)
  %param.8 = bf16[512,8,128]{2,1,0} parameter(8), sharding={devices=[8,1,1]<=[8]}
  %all-gather.2 = bf16[4096,8,128]{2,1,0} all-gather(%param.8), channel_id=3, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.164 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2153, %all-gather.2), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.130 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.164), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.5400 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.11439), dimensions={0,1,3}
  %multiply.1742 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.130, %broadcast.5400)
  %slice.131 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.164), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.5401 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.11442), dimensions={0,1,3}
  %multiply.1744 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.131, %broadcast.5401)
  %subtract.66 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.1742, %multiply.1744)
  %multiply.1745 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.131, %broadcast.5400)
  %multiply.1746 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.130, %broadcast.5401)
  %add.2532 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.1745, %multiply.1746)
  %concatenate.1 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.66, %add.2532), dimensions={3}
  %copy.2156 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.1)
  %param.9 = bf16[512,8,128]{2,1,0} parameter(11), sharding={devices=[8,1,1]<=[8]}
  %all-gather.3 = bf16[4096,8,128]{2,1,0} all-gather(%param.9), channel_id=4, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.165 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2153, %all-gather.3), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2157 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.165)
  %constant.3999 = bf16[0]{0} constant({})
  %broadcast.5411 = s32[2]{0} broadcast(%constant.3783), dimensions={}
  %reshape.11456 = s32[1]{0} reshape(%constant.3779)
  %reshape.11457 = s32[1]{0} reshape(%constant.3783)
  %constant.4020 = pred[1]{0} constant({0})
  %constant.4021 = s32[1]{0} constant({1})
  %constant.4022 = s32[1]{0} constant({0})
  %select.327 = s32[1]{0} select(%constant.4020, %constant.4021, %constant.4022)
  %maximum.2 = s32[1]{0} maximum(%reshape.11457, %select.327)
  %minimum.2 = s32[1]{0} minimum(%reshape.11456, %maximum.2)
  %sort.64 = (s32[1]{0}, s32[1]{0}) sort(%minimum.2, %constant.4022), dimensions={0}, is_stable=true, to_apply=%region_0.61._custom_call_lowering_rule
  %get-tuple-element.256 = s32[1]{0} get-tuple-element(%sort.64), index=1
  %compare.738 = pred[1]{0} compare(%get-tuple-element.256, %constant.4022), direction=LT
  %add.2533 = s32[1]{0} add(%get-tuple-element.256, %constant.4021)
  %select.328 = s32[1]{0} select(%compare.738, %add.2533, %get-tuple-element.256)
  %reshape.11458 = s32[1,1]{1,0} reshape(%select.328)
  %scatter.75 = s32[1]{0} scatter(%minimum.2, %reshape.11458, %constant.4022), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_1.74._custom_call_lowering_rule
  %compare.739 = pred[1]{0} compare(%scatter.75, %constant.4022), direction=LT
  %constant.4024 = s32[1]{0} constant({2})
  %add.2534 = s32[1]{0} add(%scatter.75, %constant.4024)
  %select.329 = s32[1]{0} select(%compare.739, %add.2534, %scatter.75)
  %reshape.11459 = s32[1,1]{1,0} reshape(%select.329)
  %scatter.171 = s32[2]{0} scatter(%broadcast.5411, %reshape.11459, %constant.4022), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_5.170._custom_call_lowering_rule
  %constant.4025 = pred[] constant(true)
  %broadcast.5413 = pred[2]{0} broadcast(%constant.4025), dimensions={}
  %scatter.83 = pred[2]{0} scatter(%broadcast.5413, %reshape.11459, %constant.4020), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_2.82._custom_call_lowering_rule
  %convert.589 = s32[2]{0} convert(%scatter.83)
  %reduce-window.191 = s32[2]{0} reduce-window(%convert.589, %constant.3783), window={size=2 pad=1_0}, to_apply=%region_3.91._custom_call_lowering_rule
  %maximum.3 = s32[2]{0} maximum(%broadcast.5411, %reduce-window.191)
  %compare.741 = pred[2]{0} compare(%maximum.3, %broadcast.5411), direction=LT
  %broadcast.5414 = s32[2]{0} broadcast(%constant.3779), dimensions={}
  %add.2537 = s32[2]{0} add(%maximum.3, %broadcast.5414)
  %select.331 = s32[2]{0} select(%compare.741, %add.2537, %maximum.3)
  %reshape.11461 = s32[2,1]{1,0} reshape(%select.331)
  %scatter.111 = s32[1]{0} scatter(%constant.4022, %reshape.11461, %broadcast.5414), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_4.110._custom_call_lowering_rule
  %sign.0 = s32[1]{0} sign(%scatter.111)
  %sign.1 = s32[] sign(%constant.3779)
  %reshape.11462 = s32[1]{0} reshape(%sign.1)
  %compare.742 = pred[1]{0} compare(%sign.0, %reshape.11462), direction=NE
  %remainder.0 = s32[1]{0} remainder(%scatter.111, %reshape.11456)
  %compare.743 = pred[1]{0} compare(%remainder.0, %constant.4022), direction=NE
  %and.65 = pred[1]{0} and(%compare.742, %compare.743)
  %divide.483 = s32[1]{0} divide(%scatter.111, %reshape.11456)
  %subtract.67 = s32[1]{0} subtract(%divide.483, %constant.4021)
  %select.332 = s32[1]{0} select(%and.65, %subtract.67, %divide.483)
  %compare.744 = pred[] compare(%constant.3969, %constant.3783), direction=EQ
  %select.333 = s32[] select(%compare.744, %constant.3779, %constant.3969)
  %reshape.11465 = s32[1]{0} reshape(%select.333)
  %remainder.1 = s32[1]{0} remainder(%select.332, %reshape.11465)
  %compare.745 = pred[1]{0} compare(%remainder.1, %constant.4022), direction=LT
  %compare.746 = pred[] compare(%select.333, %constant.3783), direction=LT
  %reshape.11466 = pred[1]{0} reshape(%compare.746)
  %compare.747 = pred[1]{0} compare(%compare.745, %reshape.11466), direction=NE
  %compare.748 = pred[1]{0} compare(%remainder.1, %constant.4022), direction=NE
  %and.66 = pred[1]{0} and(%compare.747, %compare.748)
  %add.2538 = s32[1]{0} add(%remainder.1, %reshape.11465)
  %select.334 = s32[1]{0} select(%and.66, %add.2538, %remainder.1)
  %compare.749 = pred[1]{0} compare(%select.334, %constant.4022), direction=LT
  %add.2539 = s32[1]{0} add(%select.334, %constant.4024)
  %select.335 = s32[1]{0} select(%compare.749, %add.2539, %select.334)
  %reshape.11468 = s32[1,1]{1,0} reshape(%select.335)
  %param.10 = s32[1,4096]{1,0} parameter(974), sharding={devices=[8,1]<=[8]}
  %broadcast.5404 = s32[1,4096,4096]{2,1,0} broadcast(%param.10), dimensions={0,1}
  %broadcast.5405 = s32[1,4096,4096]{2,1,0} broadcast(%param.10), dimensions={0,2}
  %compare.735 = pred[1,4096,4096]{2,1,0} compare(%broadcast.5404, %broadcast.5405), direction=EQ
  %iota.1618 = s32[4096,4096]{1,0} iota(), iota_dimension=1
  %iota.1619 = s32[4096,4096]{1,0} iota(), iota_dimension=0
  %compare.736 = pred[4096,4096]{1,0} compare(%iota.1618, %iota.1619), direction=LE
  %broadcast.5406 = pred[1,4096,4096]{2,1,0} broadcast(%compare.736), dimensions={1,2}
  %and.64 = pred[1,4096,4096]{2,1,0} and(%compare.735, %broadcast.5406)
  %broadcast.5407 = f32[1,4096,4096]{2,1,0} broadcast(%constant.3956), dimensions={}
  %constant.4001 = f32[] constant(-2.38197633e+38)
  %broadcast.5408 = f32[1,4096,4096]{2,1,0} broadcast(%constant.4001), dimensions={}
  %select.326 = f32[1,4096,4096]{2,1,0} select(%and.64, %broadcast.5407, %broadcast.5408)
  %compare.737 = pred[1,4096,4096]{2,1,0} compare(%select.326, %broadcast.5407), direction=NE
  %not.64 = pred[1,4096,4096]{2,1,0} not(%compare.737)
  %convert.587 = s32[1,4096,4096]{2,1,0} convert(%not.64)
  %reduce.193 = s32[1,4096]{1,0} reduce(%convert.587, %constant.3783), dimensions={1}, to_apply=%region_1.1305
  %reshape.11451 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.193)
  %slice.132 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.11451), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.11453 = s32[1,1]{1,0} reshape(%slice.132)
  %reshape.11469 = s32[1]{0} reshape(%reshape.11453)
  %compare.750 = pred[1]{0} compare(%reshape.11469, %constant.4022), direction=LT
  %constant.4034 = s32[] constant(-1)
  %reshape.11470 = s32[1]{0} reshape(%constant.4034)
  %select.336 = s32[1]{0} select(%compare.750, %reshape.11470, %reshape.11469)
  %scatter.179 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.336), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule
  %reduce.194 = s32[1,4096]{1,0} reduce(%convert.587, %constant.3783), dimensions={2}, to_apply=%region_2.1313
  %reshape.11454 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.194)
  %constant.4014 = s32[] constant(-2147483648)
  %reduce.195 = s32[1,1]{1,0} reduce(%reshape.11454, %constant.4014), dimensions={3,2}, to_apply=%region_3.1318
  %reshape.11484 = s32[1]{0} reshape(%reduce.195)
  %compare.763 = pred[1]{0} compare(%reshape.11484, %constant.4022), direction=LT
  %select.346 = s32[1]{0} select(%compare.763, %reshape.11470, %reshape.11484)
  %scatter.233 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.346), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule
  %constant.4015 = u32[] constant(0)
  %broadcast.5410 = u32[16]{0} broadcast(%constant.4015), dimensions={}
  %constant.4016 = s32[8]{0} constant({0, 2, 4, 6, 8, 10, 12, 14})
  %dynamic-slice.37 = s32[1]{0} dynamic-slice(%constant.4016, %partition-id), dynamic_slice_sizes={1}
  %reshape.11455 = s32[] reshape(%dynamic-slice.37)
  %dynamic-slice.38 = u32[2]{0} dynamic-slice(%broadcast.5410, %reshape.11455), dynamic_slice_sizes={2}
  %custom-call.234 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2154, %copy.2156, %copy.2157, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.261 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.234), index=0
  %copy.2158 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.261)
  %param.11 = bf16[32,128,512]{2,1,0} parameter(9), sharding={devices=[1,1,8]<=[8]}
  %all-gather.4 = bf16[32,128,4096]{2,1,0} all-gather(%param.11), channel_id=5, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.166 = bf16[1,4096,4096]{2,1,0} dot(%copy.2158, %all-gather.4), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2159 = bf16[1,4096,4096]{2,1,0} copy(%dot.166)
  %add.2546 = bf16[1,4096,4096]{2,1,0} add(%copy.2151, %copy.2159)
  %convert.591 = f32[1,4096,4096]{2,1,0} convert(%add.2546)
  %multiply.1748 = f32[1,4096,4096]{2,1,0} multiply(%convert.591, %convert.591)
  %reduce.196 = f32[1,4096]{1,0} reduce(%multiply.1748, %constant.3956), dimensions={2}, to_apply=%region_4.1333
  %multiply.1749 = f32[1,4096]{1,0} multiply(%reduce.196, %broadcast.5380)
  %add.2547 = f32[1,4096]{1,0} add(%multiply.1749, %broadcast.5381)
  %rsqrt.65 = f32[1,4096]{1,0} rsqrt(%add.2547)
  %broadcast.5418 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.65), dimensions={0,1}
  %multiply.1750 = f32[1,4096,4096]{2,1,0} multiply(%convert.591, %broadcast.5418)
  %convert.592 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1750)
  %param.12 = bf16[4096]{0} parameter(6), sharding={replicated}
  %broadcast.5419 = bf16[1,4096,4096]{2,1,0} broadcast(%param.12), dimensions={2}
  %multiply.1751 = bf16[1,4096,4096]{2,1,0} multiply(%convert.592, %broadcast.5419)
  %copy.2160 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1751)
  %param.13 = bf16[512,8]{1,0} parameter(2), sharding={devices=[8,1]<=[8]}
  %all-gather.5 = bf16[4096,8]{1,0} all-gather(%param.13), channel_id=6, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.167 = bf16[1,4096,8]{2,1,0} dot(%copy.2160, %all-gather.5), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2161 = bf16[1,4096,8]{2,1,0} copy(%dot.167)
  %reshape.11486 = bf16[4096,8]{1,0} reshape(%copy.2161)
  %custom-call.64 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.11486), custom_call_target="TopK", called_computations={%compare-greater-than.6.clone}
  %get-tuple-element.262 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.64), index=0
  %get-tuple-element.263 = s32[4096,2]{1,0} get-tuple-element(%custom-call.64), index=1
  %constant.4046 = u32[8]{0} constant({0, 0, 0, 0, 0, 0, 0, 0})
  %dynamic-slice.39 = u32[1]{0} dynamic-slice(%constant.4046, %partition-id), dynamic_slice_sizes={1}
  %reshape.11487 = u32[] reshape(%dynamic-slice.39)
  %convert.593 = s32[] convert(%reshape.11487)
  %constant.4047 = s32[] constant(8)
  %multiply.1752 = s32[] multiply(%convert.593, %constant.4047)
  %broadcast.5420 = s32[4096,2]{1,0} broadcast(%multiply.1752), dimensions={}
  %add.2548 = s32[4096,2]{1,0} add(%get-tuple-element.263, %broadcast.5420)
  %sort.66 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.262, %add.2548), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.9
  %get-tuple-element.265 = s32[4096,2]{1,0} get-tuple-element(%sort.66), index=1
  %slice.134 = s32[4096,2]{1,0} slice(%get-tuple-element.265), slice={[0:4096], [0:2]}
  %all-gather.7 = s32[32768,2]{1,0} all-gather(%slice.134), channel_id=8, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %constant.4048 = s32[8]{0} constant({0, 4096, 8192, 12288, 16384, 20480, 24576, 28672})
  %dynamic-slice.40 = s32[1]{0} dynamic-slice(%constant.4048, %partition-id), dynamic_slice_sizes={1}
  %reshape.11488 = s32[] reshape(%dynamic-slice.40)
  %dynamic-slice.41 = s32[4096,2]{1,0} dynamic-slice(%all-gather.7, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.11489 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.41)
  %broadcast.5421 = s32[1,4096,2]{2,1,0} broadcast(%constant.3783), dimensions={}
  %compare.764 = pred[1,4096,2]{2,1,0} compare(%reshape.11489, %broadcast.5421), direction=LT
  %broadcast.5422 = s32[1,4096,2]{2,1,0} broadcast(%constant.4047), dimensions={}
  %add.2549 = s32[1,4096,2]{2,1,0} add(%reshape.11489, %broadcast.5422)
  %select.347 = s32[1,4096,2]{2,1,0} select(%compare.764, %add.2549, %reshape.11489)
  %reshape.11490 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.347)
  %concatenate.2 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1614, %reshape.11490), dimensions={3}
  %reshape.11509 = s32[1]{0} reshape(%reshape.11399)
  %concatenate.5 = s32[3]{0} concatenate(%reshape.11509, %reshape.11457, %reshape.11457), dimensions={0}
  %broadcast.5433 = s32[1,4096,2,3]{3,2,1,0} broadcast(%concatenate.5), dimensions={3}
  %subtract.72 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.2, %broadcast.5433)
  %iota.1620 = u32[1,4096,2]{2,1,0} iota(), iota_dimension=2
  %iota.1621 = u32[1,4096,2]{2,1,0} iota(), iota_dimension=1
  %constant.4052 = u32[] constant(2)
  %broadcast.5423 = u32[1,4096,2]{2,1,0} broadcast(%constant.4052), dimensions={}
  %multiply.1753 = u32[1,4096,2]{2,1,0} multiply(%iota.1621, %broadcast.5423)
  %add.2550 = u32[1,4096,2]{2,1,0} add(%iota.1620, %multiply.1753)
  %iota.1622 = u32[1,4096,2]{2,1,0} iota(), iota_dimension=0
  %convert.594 = u32[] convert(%multiply.1694)
  %broadcast.5424 = u32[1,4096,2]{2,1,0} broadcast(%convert.594), dimensions={}
  %add.2551 = u32[1,4096,2]{2,1,0} add(%iota.1622, %broadcast.5424)
  %constant.4057 = u32[] constant(8192)
  %broadcast.5425 = u32[1,4096,2]{2,1,0} broadcast(%constant.4057), dimensions={}
  %multiply.1755 = u32[1,4096,2]{2,1,0} multiply(%add.2551, %broadcast.5425)
  %add.2552 = u32[1,4096,2]{2,1,0} add(%add.2550, %multiply.1755)
  %constant.4058 = u32[] constant(1)
  %broadcast.5426 = u32[1,4096,2]{2,1,0} broadcast(%constant.4058), dimensions={}
  %add.2553 = u32[1,4096,2]{2,1,0} add(%add.2552, %broadcast.5426)
  %broadcast.5427 = u32[1,4096,8]{2,1,0} broadcast(%constant.4015), dimensions={}
  %scatter = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.72, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_7.1407
  %gather = u32[1,4096,2]{2,1,0} gather(%scatter, %subtract.72), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.765 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather), direction=EQ
  %get-tuple-element.264 = bf16[4096,2]{1,0} get-tuple-element(%sort.66), index=0
  %slice.133 = bf16[4096,2]{1,0} slice(%get-tuple-element.264), slice={[0:4096], [0:2]}
  %all-gather.6 = bf16[32768,2]{1,0} all-gather(%slice.133), channel_id=7, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.51 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.6, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.595 = f32[4096,2]{1,0} convert(%dynamic-slice.51)
  %reshape.11506 = f32[1,4096,2]{2,1,0} reshape(%convert.595)
  %constant.4073 = f32[] constant(-inf)
  %reduce.197 = f32[4096]{0} reduce(%convert.595, %constant.4073), dimensions={1}, to_apply=%region_5.1359
  %reshape.11507 = f32[1,4096]{1,0} reshape(%reduce.197)
  %broadcast.5430 = f32[1,4096,2]{2,1,0} broadcast(%reshape.11507), dimensions={0,1}
  %subtract.71 = f32[1,4096,2]{2,1,0} subtract(%reshape.11506, %broadcast.5430)
  %exponential.126 = f32[1,4096,2]{2,1,0} exponential(%subtract.71)
  %reduce.198 = f32[1,4096]{1,0} reduce(%exponential.126, %constant.3956), dimensions={2}, to_apply=%region_6.1371
  %broadcast.5431 = f32[1,4096,2]{2,1,0} broadcast(%reduce.198), dimensions={0,1}
  %divide.485 = f32[1,4096,2]{2,1,0} divide(%exponential.126, %broadcast.5431)
  %convert.596 = bf16[1,4096,2]{2,1,0} convert(%divide.485)
  %broadcast.5432 = bf16[1,4096,2]{2,1,0} broadcast(%constant.3795), dimensions={}
  %select.348 = bf16[1,4096,2]{2,1,0} select(%compare.765, %convert.596, %broadcast.5432)
  %scatter.1 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.72, %select.348), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_8.1415
  %broadcast.5434 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.11489), dimensions={0,1,2}
  %iota.1623 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.766 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.5434, %iota.1623), direction=EQ
  %convert.597 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.766)
  %reshape.11516 = s32[1,8192,8]{2,1,0} reshape(%convert.597)
  %copy.2162 = s32[1,8192,8]{2,1,0} copy(%reshape.11516)
  %reduce-window.193 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2162, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439
  %reshape.11518 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.193)
  %copy.2163 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11518)
  %constant.4089 = s32[] constant(1024)
  %broadcast.5435 = s32[1,4096,2,8]{3,2,1,0} broadcast(%constant.4089), dimensions={}
  %compare.767 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2163, %broadcast.5435), direction=LE
  %broadcast.5436 = s32[1,4096,2,8]{3,2,1,0} broadcast(%constant.3783), dimensions={}
  %select.349 = s32[1,4096,2,8]{3,2,1,0} select(%compare.767, %convert.597, %broadcast.5436)
  %reduce.199 = s32[1,4096,8]{2,1,0} reduce(%select.349, %constant.3783), dimensions={2}, to_apply=%region_10.1453
  %convert.598 = bf16[1,4096,8]{2,1,0} convert(%reduce.199)
  %multiply.1757 = bf16[1,4096,8]{2,1,0} multiply(%scatter.1, %convert.598)
  %broadcast.5437 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1757), dimensions={0,1,2}
  %multiply.1758 = s32[1,8192,8]{2,1,0} multiply(%copy.2162, %reduce-window.193)
  %reshape.11519 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.1758)
  %reduce.200 = s32[1,4096,8]{2,1,0} reduce(%reshape.11519, %constant.3783), dimensions={2}, to_apply=%region_11.1462
  %multiply.1759 = s32[1,4096,8]{2,1,0} multiply(%reduce.200, %reduce.199)
  %broadcast.5438 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1759), dimensions={0,1,2}
  %iota.1624 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.768 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.5438, %iota.1624), direction=EQ
  %convert.599 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.768)
  %convert.600 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.599)
  %multiply.1760 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.5437, %convert.600)
  %slice.135 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.1760), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2164 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.135)
  %broadcast.5439 = bf16[1,4096,8,1024]{3,2,1,0} broadcast(%constant.3795), dimensions={}
  %compare.769 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.135, %broadcast.5439), direction=NE
  %copy.2165 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.769)
  %convert.601 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2165)
  %dot.168 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.601, %copy.2160), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11522 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.168)
  %all-to-all = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11522), channel_id=15, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all), dimensions={1,0,2,3,4}
  %reshape.11523 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose)
  %transpose.1 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11523), dimensions={1,0,2,3}
  %copy.2166 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.1)
  %param.14 = bf16[1,4096,14336]{2,1,0} parameter(3), sharding={devices=[8,1,1]<=[8]}
  %copy.2167 = bf16[1,4096,14336]{2,1,0} copy(%param.14)
  %dot.169 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2166, %copy.2167), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2168 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.169)
  %constant.4121 = bf16[] constant(1)
  %broadcast.5440 = bf16[1,8,1024,14336]{3,2,1,0} broadcast(%constant.4121), dimensions={}
  %negate.159 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2168)
  %exponential.127 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.159)
  %add.2554 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.127, %broadcast.5440)
  %divide.486 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2554)
  %multiply.1764 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2168, %divide.486)
  %param.15 = bf16[1,4096,14336]{2,1,0} parameter(4), sharding={devices=[8,1,1]<=[8]}
  %copy.2169 = bf16[1,4096,14336]{2,1,0} copy(%param.15)
  %dot.170 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2166, %copy.2169), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2170 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.170)
  %multiply.1765 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.1764, %copy.2170)
  %param.16 = bf16[1,14336,4096]{2,1,0} parameter(5), sharding={devices=[8,1,1]<=[8]}
  %copy.2171 = bf16[1,14336,4096]{2,1,0} copy(%param.16)
  %dot.171 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.1765, %copy.2171), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2172 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.171)
  %reshape.11527 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2172)
  %all-to-all.1 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11527), channel_id=16, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.2 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.1), dimensions={1,0,2,3,4}
  %reshape.11528 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.2)
  %dot.172 = bf16[1,4096,4096]{2,1,0} dot(%copy.2164, %reshape.11528), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2173 = bf16[1,4096,4096]{2,1,0} copy(%dot.172)
  %add.2555 = bf16[1,4096,4096]{2,1,0} add(%copy.2173, %add.2546)
  %copy.2174 = bf16[1,4096,4096]{2,1,0} copy(%add.2555)
  %copy.2175 = bf16[1,4096,4096]{2,1,0} copy(%copy.2174)
  %convert.602 = f32[1,4096,4096]{2,1,0} convert(%copy.2175)
  %multiply.1768 = f32[1,4096,4096]{2,1,0} multiply(%convert.602, %convert.602)
  %reduce.201 = f32[1,4096]{1,0} reduce(%multiply.1768, %constant.3956), dimensions={2}, to_apply=%region_12.1523
  %multiply.1769 = f32[1,4096]{1,0} multiply(%reduce.201, %broadcast.5380)
  %add.2556 = f32[1,4096]{1,0} add(%multiply.1769, %broadcast.5381)
  %rsqrt.66 = f32[1,4096]{1,0} rsqrt(%add.2556)
  %broadcast.5445 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.66), dimensions={0,1}
  %multiply.1770 = f32[1,4096,4096]{2,1,0} multiply(%convert.602, %broadcast.5445)
  %convert.603 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1770)
  %param.17 = bf16[4096]{0} parameter(17), sharding={replicated}
  %broadcast.5446 = bf16[1,4096,4096]{2,1,0} broadcast(%param.17), dimensions={2}
  %multiply.1771 = bf16[1,4096,4096]{2,1,0} multiply(%convert.603, %broadcast.5446)
  %copy.2176 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1771)
  %copy.2177 = bf16[1,4096,4096]{2,1,0} copy(%copy.2176)
  %param.18 = bf16[512,32,128]{2,1,0} parameter(20), sharding={devices=[8,1,1]<=[8]}
  %all-gather.8 = bf16[4096,32,128]{2,1,0} all-gather(%param.18), channel_id=17, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.173 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2177, %all-gather.8), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.136 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.173), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.1776 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.136, %broadcast.5389)
  %slice.137 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.173), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.1778 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.137, %broadcast.5391)
  %subtract.73 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.1776, %multiply.1778)
  %multiply.1779 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.137, %broadcast.5389)
  %multiply.1780 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.136, %broadcast.5391)
  %add.2557 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.1779, %multiply.1780)
  %concatenate.6 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.73, %add.2557), dimensions={3}
  %copy.2178 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.6)
  %param.19 = bf16[512,8,128]{2,1,0} parameter(18), sharding={devices=[8,1,1]<=[8]}
  %all-gather.9 = bf16[4096,8,128]{2,1,0} all-gather(%param.19), channel_id=18, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.174 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2177, %all-gather.9), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.138 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.174), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.1786 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.138, %broadcast.5400)
  %slice.139 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.174), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.1788 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.139, %broadcast.5401)
  %subtract.74 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.1786, %multiply.1788)
  %multiply.1789 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.139, %broadcast.5400)
  %multiply.1791 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.138, %broadcast.5401)
  %add.2558 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.1789, %multiply.1791)
  %concatenate.7 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.74, %add.2558), dimensions={3}
  %copy.2180 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.7)
  %param.20 = bf16[512,8,128]{2,1,0} parameter(21), sharding={devices=[8,1,1]<=[8]}
  %all-gather.10 = bf16[4096,8,128]{2,1,0} all-gather(%param.20), channel_id=19, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.175 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2177, %all-gather.10), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2181 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.175)
  %custom-call.65 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2178, %copy.2180, %copy.2181, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.275 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.65), index=0
  %copy.2182 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.275)
  %param.21 = bf16[32,128,512]{2,1,0} parameter(19), sharding={devices=[1,1,8]<=[8]}
  %all-gather.11 = bf16[32,128,4096]{2,1,0} all-gather(%param.21), channel_id=20, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.176 = bf16[1,4096,4096]{2,1,0} dot(%copy.2182, %all-gather.11), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2183 = bf16[1,4096,4096]{2,1,0} copy(%dot.176)
  %add.2572 = bf16[1,4096,4096]{2,1,0} add(%copy.2175, %copy.2183)
  %convert.616 = f32[1,4096,4096]{2,1,0} convert(%add.2572)
  %multiply.1793 = f32[1,4096,4096]{2,1,0} multiply(%convert.616, %convert.616)
  %reduce.205 = f32[1,4096]{1,0} reduce(%multiply.1793, %constant.3956), dimensions={2}, to_apply=%region_16.1683
  %multiply.1794 = f32[1,4096]{1,0} multiply(%reduce.205, %broadcast.5380)
  %add.2573 = f32[1,4096]{1,0} add(%multiply.1794, %broadcast.5381)
  %rsqrt.67 = f32[1,4096]{1,0} rsqrt(%add.2573)
  %broadcast.5474 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.67), dimensions={0,1}
  %multiply.1795 = f32[1,4096,4096]{2,1,0} multiply(%convert.616, %broadcast.5474)
  %convert.617 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1795)
  %param.22 = bf16[4096]{0} parameter(16), sharding={replicated}
  %broadcast.5475 = bf16[1,4096,4096]{2,1,0} broadcast(%param.22), dimensions={2}
  %multiply.1796 = bf16[1,4096,4096]{2,1,0} multiply(%convert.617, %broadcast.5475)
  %copy.2184 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1796)
  %param.23 = bf16[512,8]{1,0} parameter(12), sharding={devices=[8,1]<=[8]}
  %all-gather.12 = bf16[4096,8]{1,0} all-gather(%param.23), channel_id=21, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.177 = bf16[1,4096,8]{2,1,0} dot(%copy.2184, %all-gather.12), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2185 = bf16[1,4096,8]{2,1,0} copy(%dot.177)
  %reshape.11580 = bf16[4096,8]{1,0} reshape(%copy.2185)
  %custom-call.66 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.11580), custom_call_target="TopK", called_computations={%compare-greater-than.0.clone}
  %get-tuple-element.276 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.66), index=0
  %get-tuple-element.277 = s32[4096,2]{1,0} get-tuple-element(%custom-call.66), index=1
  %add.2575 = s32[4096,2]{1,0} add(%get-tuple-element.277, %broadcast.5420)
  %sort.69 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.276, %add.2575), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.0
  %get-tuple-element.279 = s32[4096,2]{1,0} get-tuple-element(%sort.69), index=1
  %slice.142 = s32[4096,2]{1,0} slice(%get-tuple-element.279), slice={[0:4096], [0:2]}
  %all-gather.14 = s32[32768,2]{1,0} all-gather(%slice.142), channel_id=23, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.69 = s32[4096,2]{1,0} dynamic-slice(%all-gather.14, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.11583 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.69)
  %compare.799 = pred[1,4096,2]{2,1,0} compare(%reshape.11583, %broadcast.5421), direction=LT
  %add.2576 = s32[1,4096,2]{2,1,0} add(%reshape.11583, %broadcast.5422)
  %select.371 = s32[1,4096,2]{2,1,0} select(%compare.799, %add.2576, %reshape.11583)
  %reshape.11584 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.371)
  %concatenate.8 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1612, %reshape.11584), dimensions={3}
  %subtract.80 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.8, %broadcast.5433)
  %scatter.12 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.80, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_19.1757
  %gather.1 = u32[1,4096,2]{2,1,0} gather(%scatter.12, %subtract.80), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.800 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.1), direction=EQ
  %get-tuple-element.278 = bf16[4096,2]{1,0} get-tuple-element(%sort.69), index=0
  %slice.141 = bf16[4096,2]{1,0} slice(%get-tuple-element.278), slice={[0:4096], [0:2]}
  %all-gather.13 = bf16[32768,2]{1,0} all-gather(%slice.141), channel_id=22, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.79 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.13, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.620 = f32[4096,2]{1,0} convert(%dynamic-slice.79)
  %reshape.11602 = f32[1,4096,2]{2,1,0} reshape(%convert.620)
  %reduce.206 = f32[4096]{0} reduce(%convert.620, %constant.4073), dimensions={1}, to_apply=%region_17.1709
  %reshape.11603 = f32[1,4096]{1,0} reshape(%reduce.206)
  %broadcast.5484 = f32[1,4096,2]{2,1,0} broadcast(%reshape.11603), dimensions={0,1}
  %subtract.79 = f32[1,4096,2]{2,1,0} subtract(%reshape.11602, %broadcast.5484)
  %exponential.128 = f32[1,4096,2]{2,1,0} exponential(%subtract.79)
  %reduce.207 = f32[1,4096]{1,0} reduce(%exponential.128, %constant.3956), dimensions={2}, to_apply=%region_18.1721
  %broadcast.5485 = f32[1,4096,2]{2,1,0} broadcast(%reduce.207), dimensions={0,1}
  %divide.491 = f32[1,4096,2]{2,1,0} divide(%exponential.128, %broadcast.5485)
  %convert.621 = bf16[1,4096,2]{2,1,0} convert(%divide.491)
  %select.372 = bf16[1,4096,2]{2,1,0} select(%compare.800, %convert.621, %broadcast.5432)
  %scatter.13 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.80, %select.372), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_20.1765
  %broadcast.5488 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.11583), dimensions={0,1,2}
  %iota.1632 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.801 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.5488, %iota.1632), direction=EQ
  %convert.622 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.801)
  %reshape.11614 = s32[1,8192,8]{2,1,0} reshape(%convert.622)
  %copy.2186 = s32[1,8192,8]{2,1,0} copy(%reshape.11614)
  %reduce-window.196 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2186, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.1
  %reshape.11616 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.196)
  %copy.2187 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11616)
  %compare.802 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2187, %broadcast.5435), direction=LE
  %select.373 = s32[1,4096,2,8]{3,2,1,0} select(%compare.802, %convert.622, %broadcast.5436)
  %reduce.208 = s32[1,4096,8]{2,1,0} reduce(%select.373, %constant.3783), dimensions={2}, to_apply=%region_21.1779
  %convert.623 = bf16[1,4096,8]{2,1,0} convert(%reduce.208)
  %multiply.1803 = bf16[1,4096,8]{2,1,0} multiply(%scatter.13, %convert.623)
  %broadcast.5491 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1803), dimensions={0,1,2}
  %multiply.1804 = s32[1,8192,8]{2,1,0} multiply(%copy.2186, %reduce-window.196)
  %reshape.11617 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.1804)
  %reduce.209 = s32[1,4096,8]{2,1,0} reduce(%reshape.11617, %constant.3783), dimensions={2}, to_apply=%region_22.1788
  %multiply.1805 = s32[1,4096,8]{2,1,0} multiply(%reduce.209, %reduce.208)
  %broadcast.5492 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1805), dimensions={0,1,2}
  %iota.1633 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.803 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.5492, %iota.1633), direction=EQ
  %convert.624 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.803)
  %convert.625 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.624)
  %multiply.1806 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.5491, %convert.625)
  %slice.143 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.1806), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2188 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.143)
  %compare.804 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.143, %broadcast.5439), direction=NE
  %copy.2189 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.804)
  %convert.626 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2189)
  %dot.178 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.626, %copy.2184), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11620 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.178)
  %all-to-all.2 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11620), channel_id=30, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.3 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.2), dimensions={1,0,2,3,4}
  %reshape.11621 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.3)
  %transpose.4 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11621), dimensions={1,0,2,3}
  %copy.2190 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.4)
  %param.24 = bf16[1,4096,14336]{2,1,0} parameter(13), sharding={devices=[8,1,1]<=[8]}
  %copy.2191 = bf16[1,4096,14336]{2,1,0} copy(%param.24)
  %dot.179 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2190, %copy.2191), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2192 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.179)
  %negate.160 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2192)
  %exponential.129 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.160)
  %add.2581 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.129, %broadcast.5440)
  %divide.492 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2581)
  %multiply.1810 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2192, %divide.492)
  %param.25 = bf16[1,4096,14336]{2,1,0} parameter(14), sharding={devices=[8,1,1]<=[8]}
  %copy.2193 = bf16[1,4096,14336]{2,1,0} copy(%param.25)
  %dot.180 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2190, %copy.2193), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2194 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.180)
  %multiply.1811 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.1810, %copy.2194)
  %param.26 = bf16[1,14336,4096]{2,1,0} parameter(15), sharding={devices=[8,1,1]<=[8]}
  %copy.2195 = bf16[1,14336,4096]{2,1,0} copy(%param.26)
  %dot.181 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.1811, %copy.2195), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2196 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.181)
  %reshape.11624 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2196)
  %all-to-all.3 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11624), channel_id=31, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.5 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.3), dimensions={1,0,2,3,4}
  %reshape.11625 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.5)
  %dot.182 = bf16[1,4096,4096]{2,1,0} dot(%copy.2188, %reshape.11625), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2197 = bf16[1,4096,4096]{2,1,0} copy(%dot.182)
  %add.2582 = bf16[1,4096,4096]{2,1,0} add(%copy.2197, %add.2572)
  %copy.2198 = bf16[1,4096,4096]{2,1,0} copy(%add.2582)
  %copy.2199 = bf16[1,4096,4096]{2,1,0} copy(%copy.2198)
  %convert.627 = f32[1,4096,4096]{2,1,0} convert(%copy.2199)
  %multiply.1815 = f32[1,4096,4096]{2,1,0} multiply(%convert.627, %convert.627)
  %reduce.210 = f32[1,4096]{1,0} reduce(%multiply.1815, %constant.3956), dimensions={2}, to_apply=%region_23.1827
  %multiply.1816 = f32[1,4096]{1,0} multiply(%reduce.210, %broadcast.5380)
  %add.2583 = f32[1,4096]{1,0} add(%multiply.1816, %broadcast.5381)
  %rsqrt.68 = f32[1,4096]{1,0} rsqrt(%add.2583)
  %broadcast.5496 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.68), dimensions={0,1}
  %multiply.1817 = f32[1,4096,4096]{2,1,0} multiply(%convert.627, %broadcast.5496)
  %convert.628 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1817)
  %param.27 = bf16[4096]{0} parameter(127), sharding={replicated}
  %broadcast.5497 = bf16[1,4096,4096]{2,1,0} broadcast(%param.27), dimensions={2}
  %multiply.1818 = bf16[1,4096,4096]{2,1,0} multiply(%convert.628, %broadcast.5497)
  %copy.2200 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1818)
  %copy.2201 = bf16[1,4096,4096]{2,1,0} copy(%copy.2200)
  %param.28 = bf16[512,32,128]{2,1,0} parameter(130), sharding={devices=[8,1,1]<=[8]}
  %all-gather.15 = bf16[4096,32,128]{2,1,0} all-gather(%param.28), channel_id=32, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.183 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2201, %all-gather.15), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.144 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.183), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.1822 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.144, %broadcast.5389)
  %slice.145 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.183), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.1825 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.145, %broadcast.5391)
  %subtract.81 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.1822, %multiply.1825)
  %multiply.1826 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.145, %broadcast.5389)
  %multiply.1827 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.144, %broadcast.5391)
  %add.2584 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.1826, %multiply.1827)
  %concatenate.12 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.81, %add.2584), dimensions={3}
  %copy.2202 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.12)
  %param.29 = bf16[512,8,128]{2,1,0} parameter(128), sharding={devices=[8,1,1]<=[8]}
  %all-gather.16 = bf16[4096,8,128]{2,1,0} all-gather(%param.29), channel_id=33, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.184 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2201, %all-gather.16), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.146 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.184), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.1831 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.146, %broadcast.5400)
  %slice.147 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.184), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.1833 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.147, %broadcast.5401)
  %subtract.82 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.1831, %multiply.1833)
  %multiply.1834 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.147, %broadcast.5400)
  %multiply.1835 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.146, %broadcast.5401)
  %add.2585 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.1834, %multiply.1835)
  %concatenate.13 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.82, %add.2585), dimensions={3}
  %copy.2204 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.13)
  %param.30 = bf16[512,8,128]{2,1,0} parameter(131), sharding={devices=[8,1,1]<=[8]}
  %all-gather.17 = bf16[4096,8,128]{2,1,0} all-gather(%param.30), channel_id=34, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.185 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2201, %all-gather.17), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2205 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.185)
  %custom-call.67 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2202, %copy.2204, %copy.2205, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.289 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.67), index=0
  %copy.2206 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.289)
  %param.31 = bf16[32,128,512]{2,1,0} parameter(129), sharding={devices=[1,1,8]<=[8]}
  %all-gather.18 = bf16[32,128,4096]{2,1,0} all-gather(%param.31), channel_id=35, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.186 = bf16[1,4096,4096]{2,1,0} dot(%copy.2206, %all-gather.18), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2207 = bf16[1,4096,4096]{2,1,0} copy(%dot.186)
  %add.2601 = bf16[1,4096,4096]{2,1,0} add(%copy.2199, %copy.2207)
  %convert.641 = f32[1,4096,4096]{2,1,0} convert(%add.2601)
  %multiply.1838 = f32[1,4096,4096]{2,1,0} multiply(%convert.641, %convert.641)
  %reduce.214 = f32[1,4096]{1,0} reduce(%multiply.1838, %constant.3956), dimensions={2}, to_apply=%region_27.1987
  %multiply.1839 = f32[1,4096]{1,0} multiply(%reduce.214, %broadcast.5380)
  %add.2602 = f32[1,4096]{1,0} add(%multiply.1839, %broadcast.5381)
  %rsqrt.69 = f32[1,4096]{1,0} rsqrt(%add.2602)
  %broadcast.5537 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.69), dimensions={0,1}
  %multiply.1840 = f32[1,4096,4096]{2,1,0} multiply(%convert.641, %broadcast.5537)
  %convert.642 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1840)
  %param.32 = bf16[4096]{0} parameter(126), sharding={replicated}
  %broadcast.5538 = bf16[1,4096,4096]{2,1,0} broadcast(%param.32), dimensions={2}
  %multiply.1841 = bf16[1,4096,4096]{2,1,0} multiply(%convert.642, %broadcast.5538)
  %copy.2208 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1841)
  %param.33 = bf16[512,8]{1,0} parameter(122), sharding={devices=[8,1]<=[8]}
  %all-gather.19 = bf16[4096,8]{1,0} all-gather(%param.33), channel_id=36, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.187 = bf16[1,4096,8]{2,1,0} dot(%copy.2208, %all-gather.19), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2209 = bf16[1,4096,8]{2,1,0} copy(%dot.187)
  %reshape.11681 = bf16[4096,8]{1,0} reshape(%copy.2209)
  %custom-call.68 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.11681), custom_call_target="TopK", called_computations={%compare-greater-than.1.clone}
  %get-tuple-element.290 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.68), index=0
  %get-tuple-element.291 = s32[4096,2]{1,0} get-tuple-element(%custom-call.68), index=1
  %add.2603 = s32[4096,2]{1,0} add(%get-tuple-element.291, %broadcast.5420)
  %sort.72 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.290, %add.2603), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.1
  %get-tuple-element.293 = s32[4096,2]{1,0} get-tuple-element(%sort.72), index=1
  %slice.150 = s32[4096,2]{1,0} slice(%get-tuple-element.293), slice={[0:4096], [0:2]}
  %all-gather.21 = s32[32768,2]{1,0} all-gather(%slice.150), channel_id=38, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.97 = s32[4096,2]{1,0} dynamic-slice(%all-gather.21, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.11684 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.97)
  %compare.834 = pred[1,4096,2]{2,1,0} compare(%reshape.11684, %broadcast.5421), direction=LT
  %add.2604 = s32[1,4096,2]{2,1,0} add(%reshape.11684, %broadcast.5422)
  %select.395 = s32[1,4096,2]{2,1,0} select(%compare.834, %add.2604, %reshape.11684)
  %reshape.11685 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.395)
  %concatenate.14 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1610, %reshape.11685), dimensions={3}
  %subtract.88 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.14, %broadcast.5433)
  %scatter.24 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.88, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_30.2061
  %gather.2 = u32[1,4096,2]{2,1,0} gather(%scatter.24, %subtract.88), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.835 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.2), direction=EQ
  %get-tuple-element.292 = bf16[4096,2]{1,0} get-tuple-element(%sort.72), index=0
  %slice.149 = bf16[4096,2]{1,0} slice(%get-tuple-element.292), slice={[0:4096], [0:2]}
  %all-gather.20 = bf16[32768,2]{1,0} all-gather(%slice.149), channel_id=37, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.107 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.20, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.645 = f32[4096,2]{1,0} convert(%dynamic-slice.107)
  %reshape.11703 = f32[1,4096,2]{2,1,0} reshape(%convert.645)
  %reduce.215 = f32[4096]{0} reduce(%convert.645, %constant.4073), dimensions={1}, to_apply=%region_28.2013
  %reshape.11704 = f32[1,4096]{1,0} reshape(%reduce.215)
  %broadcast.5546 = f32[1,4096,2]{2,1,0} broadcast(%reshape.11704), dimensions={0,1}
  %subtract.87 = f32[1,4096,2]{2,1,0} subtract(%reshape.11703, %broadcast.5546)
  %exponential.130 = f32[1,4096,2]{2,1,0} exponential(%subtract.87)
  %reduce.216 = f32[1,4096]{1,0} reduce(%exponential.130, %constant.3956), dimensions={2}, to_apply=%region_29.2025
  %broadcast.5549 = f32[1,4096,2]{2,1,0} broadcast(%reduce.216), dimensions={0,1}
  %divide.497 = f32[1,4096,2]{2,1,0} divide(%exponential.130, %broadcast.5549)
  %convert.646 = bf16[1,4096,2]{2,1,0} convert(%divide.497)
  %select.396 = bf16[1,4096,2]{2,1,0} select(%compare.835, %convert.646, %broadcast.5432)
  %scatter.25 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.88, %select.396), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_31.2069
  %broadcast.5552 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.11684), dimensions={0,1,2}
  %iota.1643 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.836 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.5552, %iota.1643), direction=EQ
  %convert.647 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.836)
  %reshape.11713 = s32[1,8192,8]{2,1,0} reshape(%convert.647)
  %copy.2210 = s32[1,8192,8]{2,1,0} copy(%reshape.11713)
  %reduce-window.199 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2210, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.2
  %reshape.11715 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.199)
  %copy.2211 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11715)
  %compare.837 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2211, %broadcast.5435), direction=LE
  %select.397 = s32[1,4096,2,8]{3,2,1,0} select(%compare.837, %convert.647, %broadcast.5436)
  %reduce.217 = s32[1,4096,8]{2,1,0} reduce(%select.397, %constant.3783), dimensions={2}, to_apply=%region_32.2083
  %convert.648 = bf16[1,4096,8]{2,1,0} convert(%reduce.217)
  %multiply.1848 = bf16[1,4096,8]{2,1,0} multiply(%scatter.25, %convert.648)
  %broadcast.5554 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1848), dimensions={0,1,2}
  %multiply.1849 = s32[1,8192,8]{2,1,0} multiply(%copy.2210, %reduce-window.199)
  %reshape.11717 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.1849)
  %reduce.218 = s32[1,4096,8]{2,1,0} reduce(%reshape.11717, %constant.3783), dimensions={2}, to_apply=%region_33.2092
  %multiply.1850 = s32[1,4096,8]{2,1,0} multiply(%reduce.218, %reduce.217)
  %broadcast.5555 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1850), dimensions={0,1,2}
  %iota.1644 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.838 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.5555, %iota.1644), direction=EQ
  %convert.649 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.838)
  %convert.650 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.649)
  %multiply.1852 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.5554, %convert.650)
  %slice.151 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.1852), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2212 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.151)
  %compare.839 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.151, %broadcast.5439), direction=NE
  %copy.2213 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.839)
  %convert.651 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2213)
  %dot.188 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.651, %copy.2208), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11721 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.188)
  %all-to-all.4 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11721), channel_id=45, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.6 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.4), dimensions={1,0,2,3,4}
  %reshape.11722 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.6)
  %transpose.7 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11722), dimensions={1,0,2,3}
  %copy.2214 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.7)
  %param.34 = bf16[1,4096,14336]{2,1,0} parameter(123), sharding={devices=[8,1,1]<=[8]}
  %copy.2215 = bf16[1,4096,14336]{2,1,0} copy(%param.34)
  %dot.189 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2214, %copy.2215), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2216 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.189)
  %negate.161 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2216)
  %exponential.131 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.161)
  %add.2609 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.131, %broadcast.5440)
  %divide.498 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2609)
  %multiply.1856 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2216, %divide.498)
  %param.35 = bf16[1,4096,14336]{2,1,0} parameter(124), sharding={devices=[8,1,1]<=[8]}
  %copy.2217 = bf16[1,4096,14336]{2,1,0} copy(%param.35)
  %dot.190 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2214, %copy.2217), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2218 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.190)
  %multiply.1857 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.1856, %copy.2218)
  %param.36 = bf16[1,14336,4096]{2,1,0} parameter(125), sharding={devices=[8,1,1]<=[8]}
  %copy.2219 = bf16[1,14336,4096]{2,1,0} copy(%param.36)
  %dot.191 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.1857, %copy.2219), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2220 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.191)
  %reshape.11725 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2220)
  %all-to-all.5 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11725), channel_id=46, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.8 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.5), dimensions={1,0,2,3,4}
  %reshape.11726 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.8)
  %dot.192 = bf16[1,4096,4096]{2,1,0} dot(%copy.2212, %reshape.11726), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2221 = bf16[1,4096,4096]{2,1,0} copy(%dot.192)
  %add.2610 = bf16[1,4096,4096]{2,1,0} add(%copy.2221, %add.2601)
  %copy.2222 = bf16[1,4096,4096]{2,1,0} copy(%add.2610)
  %copy.2223 = bf16[1,4096,4096]{2,1,0} copy(%copy.2222)
  %convert.652 = f32[1,4096,4096]{2,1,0} convert(%copy.2223)
  %multiply.1860 = f32[1,4096,4096]{2,1,0} multiply(%convert.652, %convert.652)
  %reduce.219 = f32[1,4096]{1,0} reduce(%multiply.1860, %constant.3956), dimensions={2}, to_apply=%region_34.2131
  %multiply.1861 = f32[1,4096]{1,0} multiply(%reduce.219, %broadcast.5380)
  %add.2611 = f32[1,4096]{1,0} add(%multiply.1861, %broadcast.5381)
  %rsqrt.70 = f32[1,4096]{1,0} rsqrt(%add.2611)
  %broadcast.5561 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.70), dimensions={0,1}
  %multiply.1862 = f32[1,4096,4096]{2,1,0} multiply(%convert.652, %broadcast.5561)
  %convert.653 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1862)
  %param.37 = bf16[4096]{0} parameter(237), sharding={replicated}
  %broadcast.5563 = bf16[1,4096,4096]{2,1,0} broadcast(%param.37), dimensions={2}
  %multiply.1863 = bf16[1,4096,4096]{2,1,0} multiply(%convert.653, %broadcast.5563)
  %copy.2224 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1863)
  %copy.2225 = bf16[1,4096,4096]{2,1,0} copy(%copy.2224)
  %param.38 = bf16[512,32,128]{2,1,0} parameter(240), sharding={devices=[8,1,1]<=[8]}
  %all-gather.22 = bf16[4096,32,128]{2,1,0} all-gather(%param.38), channel_id=47, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.193 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2225, %all-gather.22), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.152 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.193), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.1867 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.152, %broadcast.5389)
  %slice.153 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.193), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.1869 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.153, %broadcast.5391)
  %subtract.89 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.1867, %multiply.1869)
  %multiply.1870 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.153, %broadcast.5389)
  %multiply.1871 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.152, %broadcast.5391)
  %add.2612 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.1870, %multiply.1871)
  %concatenate.18 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.89, %add.2612), dimensions={3}
  %copy.2226 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.18)
  %param.39 = bf16[512,8,128]{2,1,0} parameter(238), sharding={devices=[8,1,1]<=[8]}
  %all-gather.23 = bf16[4096,8,128]{2,1,0} all-gather(%param.39), channel_id=48, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.194 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2225, %all-gather.23), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.154 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.194), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.1876 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.154, %broadcast.5400)
  %slice.155 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.194), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.1879 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.155, %broadcast.5401)
  %subtract.90 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.1876, %multiply.1879)
  %multiply.1880 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.155, %broadcast.5400)
  %multiply.1881 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.154, %broadcast.5401)
  %add.2613 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.1880, %multiply.1881)
  %concatenate.19 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.90, %add.2613), dimensions={3}
  %copy.2228 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.19)
  %param.40 = bf16[512,8,128]{2,1,0} parameter(241), sharding={devices=[8,1,1]<=[8]}
  %all-gather.24 = bf16[4096,8,128]{2,1,0} all-gather(%param.40), channel_id=49, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.195 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2225, %all-gather.24), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2229 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.195)
  %custom-call.69 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2226, %copy.2228, %copy.2229, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.303 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.69), index=0
  %copy.2230 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.303)
  %param.41 = bf16[32,128,512]{2,1,0} parameter(239), sharding={devices=[1,1,8]<=[8]}
  %all-gather.25 = bf16[32,128,4096]{2,1,0} all-gather(%param.41), channel_id=50, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.196 = bf16[1,4096,4096]{2,1,0} dot(%copy.2230, %all-gather.25), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2231 = bf16[1,4096,4096]{2,1,0} copy(%dot.196)
  %add.2626 = bf16[1,4096,4096]{2,1,0} add(%copy.2223, %copy.2231)
  %convert.666 = f32[1,4096,4096]{2,1,0} convert(%add.2626)
  %multiply.1884 = f32[1,4096,4096]{2,1,0} multiply(%convert.666, %convert.666)
  %reduce.223 = f32[1,4096]{1,0} reduce(%multiply.1884, %constant.3956), dimensions={2}, to_apply=%region_38.2291
  %multiply.1885 = f32[1,4096]{1,0} multiply(%reduce.223, %broadcast.5380)
  %add.2627 = f32[1,4096]{1,0} add(%multiply.1885, %broadcast.5381)
  %rsqrt.71 = f32[1,4096]{1,0} rsqrt(%add.2627)
  %broadcast.5604 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.71), dimensions={0,1}
  %multiply.1887 = f32[1,4096,4096]{2,1,0} multiply(%convert.666, %broadcast.5604)
  %convert.667 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1887)
  %param.42 = bf16[4096]{0} parameter(236), sharding={replicated}
  %broadcast.5605 = bf16[1,4096,4096]{2,1,0} broadcast(%param.42), dimensions={2}
  %multiply.1888 = bf16[1,4096,4096]{2,1,0} multiply(%convert.667, %broadcast.5605)
  %copy.2232 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1888)
  %param.43 = bf16[512,8]{1,0} parameter(232), sharding={devices=[8,1]<=[8]}
  %all-gather.26 = bf16[4096,8]{1,0} all-gather(%param.43), channel_id=51, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.197 = bf16[1,4096,8]{2,1,0} dot(%copy.2232, %all-gather.26), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2233 = bf16[1,4096,8]{2,1,0} copy(%dot.197)
  %reshape.11778 = bf16[4096,8]{1,0} reshape(%copy.2233)
  %custom-call.70 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.11778), custom_call_target="TopK", called_computations={%compare-greater-than.2.clone}
  %get-tuple-element.304 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.70), index=0
  %get-tuple-element.305 = s32[4096,2]{1,0} get-tuple-element(%custom-call.70), index=1
  %add.2628 = s32[4096,2]{1,0} add(%get-tuple-element.305, %broadcast.5420)
  %sort.75 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.304, %add.2628), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.2
  %get-tuple-element.307 = s32[4096,2]{1,0} get-tuple-element(%sort.75), index=1
  %slice.158 = s32[4096,2]{1,0} slice(%get-tuple-element.307), slice={[0:4096], [0:2]}
  %all-gather.28 = s32[32768,2]{1,0} all-gather(%slice.158), channel_id=53, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.125 = s32[4096,2]{1,0} dynamic-slice(%all-gather.28, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.11782 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.125)
  %compare.869 = pred[1,4096,2]{2,1,0} compare(%reshape.11782, %broadcast.5421), direction=LT
  %add.2629 = s32[1,4096,2]{2,1,0} add(%reshape.11782, %broadcast.5422)
  %select.419 = s32[1,4096,2]{2,1,0} select(%compare.869, %add.2629, %reshape.11782)
  %reshape.11783 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.419)
  %concatenate.20 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1608, %reshape.11783), dimensions={3}
  %subtract.96 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.20, %broadcast.5433)
  %scatter.36 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.96, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_41.2365
  %gather.3 = u32[1,4096,2]{2,1,0} gather(%scatter.36, %subtract.96), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.870 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.3), direction=EQ
  %get-tuple-element.306 = bf16[4096,2]{1,0} get-tuple-element(%sort.75), index=0
  %slice.157 = bf16[4096,2]{1,0} slice(%get-tuple-element.306), slice={[0:4096], [0:2]}
  %all-gather.27 = bf16[32768,2]{1,0} all-gather(%slice.157), channel_id=52, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.135 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.27, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.670 = f32[4096,2]{1,0} convert(%dynamic-slice.135)
  %reshape.11802 = f32[1,4096,2]{2,1,0} reshape(%convert.670)
  %reduce.224 = f32[4096]{0} reduce(%convert.670, %constant.4073), dimensions={1}, to_apply=%region_39.2317
  %reshape.11804 = f32[1,4096]{1,0} reshape(%reduce.224)
  %broadcast.5612 = f32[1,4096,2]{2,1,0} broadcast(%reshape.11804), dimensions={0,1}
  %subtract.95 = f32[1,4096,2]{2,1,0} subtract(%reshape.11802, %broadcast.5612)
  %exponential.132 = f32[1,4096,2]{2,1,0} exponential(%subtract.95)
  %reduce.225 = f32[1,4096]{1,0} reduce(%exponential.132, %constant.3956), dimensions={2}, to_apply=%region_40.2329
  %broadcast.5613 = f32[1,4096,2]{2,1,0} broadcast(%reduce.225), dimensions={0,1}
  %divide.503 = f32[1,4096,2]{2,1,0} divide(%exponential.132, %broadcast.5613)
  %convert.671 = bf16[1,4096,2]{2,1,0} convert(%divide.503)
  %select.420 = bf16[1,4096,2]{2,1,0} select(%compare.870, %convert.671, %broadcast.5432)
  %scatter.37 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.96, %select.420), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_42.2373
  %broadcast.5615 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.11782), dimensions={0,1,2}
  %iota.1652 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.871 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.5615, %iota.1652), direction=EQ
  %convert.672 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.871)
  %reshape.11815 = s32[1,8192,8]{2,1,0} reshape(%convert.672)
  %copy.2234 = s32[1,8192,8]{2,1,0} copy(%reshape.11815)
  %reduce-window.202 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2234, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.3
  %reshape.11818 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.202)
  %copy.2235 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11818)
  %compare.872 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2235, %broadcast.5435), direction=LE
  %select.421 = s32[1,4096,2,8]{3,2,1,0} select(%compare.872, %convert.672, %broadcast.5436)
  %reduce.226 = s32[1,4096,8]{2,1,0} reduce(%select.421, %constant.3783), dimensions={2}, to_apply=%region_43.2387
  %convert.673 = bf16[1,4096,8]{2,1,0} convert(%reduce.226)
  %multiply.1895 = bf16[1,4096,8]{2,1,0} multiply(%scatter.37, %convert.673)
  %broadcast.5617 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1895), dimensions={0,1,2}
  %multiply.1896 = s32[1,8192,8]{2,1,0} multiply(%copy.2234, %reduce-window.202)
  %reshape.11819 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.1896)
  %reduce.227 = s32[1,4096,8]{2,1,0} reduce(%reshape.11819, %constant.3783), dimensions={2}, to_apply=%region_44.2396
  %multiply.1897 = s32[1,4096,8]{2,1,0} multiply(%reduce.227, %reduce.226)
  %broadcast.5618 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1897), dimensions={0,1,2}
  %iota.1653 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.873 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.5618, %iota.1653), direction=EQ
  %convert.674 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.873)
  %convert.675 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.674)
  %multiply.1898 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.5617, %convert.675)
  %slice.159 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.1898), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2236 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.159)
  %compare.874 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.159, %broadcast.5439), direction=NE
  %copy.2237 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.874)
  %convert.676 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2237)
  %dot.198 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.676, %copy.2232), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11823 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.198)
  %all-to-all.6 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11823), channel_id=60, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.9 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.6), dimensions={1,0,2,3,4}
  %reshape.11824 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.9)
  %transpose.10 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11824), dimensions={1,0,2,3}
  %copy.2238 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.10)
  %param.44 = bf16[1,4096,14336]{2,1,0} parameter(233), sharding={devices=[8,1,1]<=[8]}
  %copy.2239 = bf16[1,4096,14336]{2,1,0} copy(%param.44)
  %dot.199 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2238, %copy.2239), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2240 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.199)
  %negate.162 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2240)
  %exponential.133 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.162)
  %add.2635 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.133, %broadcast.5440)
  %divide.504 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2635)
  %multiply.1902 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2240, %divide.504)
  %param.45 = bf16[1,4096,14336]{2,1,0} parameter(234), sharding={devices=[8,1,1]<=[8]}
  %copy.2241 = bf16[1,4096,14336]{2,1,0} copy(%param.45)
  %dot.200 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2238, %copy.2241), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2242 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.200)
  %multiply.1903 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.1902, %copy.2242)
  %param.46 = bf16[1,14336,4096]{2,1,0} parameter(235), sharding={devices=[8,1,1]<=[8]}
  %copy.2243 = bf16[1,14336,4096]{2,1,0} copy(%param.46)
  %dot.201 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.1903, %copy.2243), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2244 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.201)
  %reshape.11827 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2244)
  %all-to-all.7 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11827), channel_id=61, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.11 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.7), dimensions={1,0,2,3,4}
  %reshape.11829 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.11)
  %dot.202 = bf16[1,4096,4096]{2,1,0} dot(%copy.2236, %reshape.11829), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2245 = bf16[1,4096,4096]{2,1,0} copy(%dot.202)
  %add.2636 = bf16[1,4096,4096]{2,1,0} add(%copy.2245, %add.2626)
  %copy.2246 = bf16[1,4096,4096]{2,1,0} copy(%add.2636)
  %copy.2247 = bf16[1,4096,4096]{2,1,0} copy(%copy.2246)
  %convert.677 = f32[1,4096,4096]{2,1,0} convert(%copy.2247)
  %multiply.1906 = f32[1,4096,4096]{2,1,0} multiply(%convert.677, %convert.677)
  %reduce.228 = f32[1,4096]{1,0} reduce(%multiply.1906, %constant.3956), dimensions={2}, to_apply=%region_45.2435
  %multiply.1907 = f32[1,4096]{1,0} multiply(%reduce.228, %broadcast.5380)
  %add.2637 = f32[1,4096]{1,0} add(%multiply.1907, %broadcast.5381)
  %rsqrt.72 = f32[1,4096]{1,0} rsqrt(%add.2637)
  %broadcast.5622 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.72), dimensions={0,1}
  %multiply.1908 = f32[1,4096,4096]{2,1,0} multiply(%convert.677, %broadcast.5622)
  %convert.678 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1908)
  %param.47 = bf16[4096]{0} parameter(267), sharding={replicated}
  %broadcast.5623 = bf16[1,4096,4096]{2,1,0} broadcast(%param.47), dimensions={2}
  %multiply.1909 = bf16[1,4096,4096]{2,1,0} multiply(%convert.678, %broadcast.5623)
  %copy.2248 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1909)
  %copy.2249 = bf16[1,4096,4096]{2,1,0} copy(%copy.2248)
  %param.48 = bf16[512,32,128]{2,1,0} parameter(270), sharding={devices=[8,1,1]<=[8]}
  %all-gather.29 = bf16[4096,32,128]{2,1,0} all-gather(%param.48), channel_id=62, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.203 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2249, %all-gather.29), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.160 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.203), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.1914 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.160, %broadcast.5389)
  %slice.161 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.203), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.1916 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.161, %broadcast.5391)
  %subtract.97 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.1914, %multiply.1916)
  %multiply.1918 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.161, %broadcast.5389)
  %multiply.1919 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.160, %broadcast.5391)
  %add.2638 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.1918, %multiply.1919)
  %concatenate.24 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.97, %add.2638), dimensions={3}
  %copy.2250 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.24)
  %param.49 = bf16[512,8,128]{2,1,0} parameter(268), sharding={devices=[8,1,1]<=[8]}
  %all-gather.30 = bf16[4096,8,128]{2,1,0} all-gather(%param.49), channel_id=63, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.204 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2249, %all-gather.30), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.162 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.204), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.1924 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.162, %broadcast.5400)
  %slice.163 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.204), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.1927 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.163, %broadcast.5401)
  %subtract.98 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.1924, %multiply.1927)
  %multiply.1928 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.163, %broadcast.5400)
  %multiply.1929 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.162, %broadcast.5401)
  %add.2639 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.1928, %multiply.1929)
  %concatenate.25 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.98, %add.2639), dimensions={3}
  %copy.2252 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.25)
  %param.50 = bf16[512,8,128]{2,1,0} parameter(271), sharding={devices=[8,1,1]<=[8]}
  %all-gather.31 = bf16[4096,8,128]{2,1,0} all-gather(%param.50), channel_id=64, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.205 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2249, %all-gather.31), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2253 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.205)
  %custom-call.71 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2250, %copy.2252, %copy.2253, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.317 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.71), index=0
  %copy.2254 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.317)
  %param.51 = bf16[32,128,512]{2,1,0} parameter(269), sharding={devices=[1,1,8]<=[8]}
  %all-gather.32 = bf16[32,128,4096]{2,1,0} all-gather(%param.51), channel_id=65, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.206 = bf16[1,4096,4096]{2,1,0} dot(%copy.2254, %all-gather.32), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2255 = bf16[1,4096,4096]{2,1,0} copy(%dot.206)
  %add.2655 = bf16[1,4096,4096]{2,1,0} add(%copy.2247, %copy.2255)
  %convert.691 = f32[1,4096,4096]{2,1,0} convert(%add.2655)
  %multiply.1931 = f32[1,4096,4096]{2,1,0} multiply(%convert.691, %convert.691)
  %reduce.232 = f32[1,4096]{1,0} reduce(%multiply.1931, %constant.3956), dimensions={2}, to_apply=%region_49.2595
  %multiply.1932 = f32[1,4096]{1,0} multiply(%reduce.232, %broadcast.5380)
  %add.2656 = f32[1,4096]{1,0} add(%multiply.1932, %broadcast.5381)
  %rsqrt.73 = f32[1,4096]{1,0} rsqrt(%add.2656)
  %broadcast.5655 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.73), dimensions={0,1}
  %multiply.1933 = f32[1,4096,4096]{2,1,0} multiply(%convert.691, %broadcast.5655)
  %convert.692 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1933)
  %param.52 = bf16[4096]{0} parameter(266), sharding={replicated}
  %broadcast.5656 = bf16[1,4096,4096]{2,1,0} broadcast(%param.52), dimensions={2}
  %multiply.1934 = bf16[1,4096,4096]{2,1,0} multiply(%convert.692, %broadcast.5656)
  %copy.2256 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1934)
  %param.53 = bf16[512,8]{1,0} parameter(262), sharding={devices=[8,1]<=[8]}
  %all-gather.33 = bf16[4096,8]{1,0} all-gather(%param.53), channel_id=66, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.207 = bf16[1,4096,8]{2,1,0} dot(%copy.2256, %all-gather.33), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2257 = bf16[1,4096,8]{2,1,0} copy(%dot.207)
  %reshape.11890 = bf16[4096,8]{1,0} reshape(%copy.2257)
  %custom-call.72 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.11890), custom_call_target="TopK", called_computations={%compare-greater-than.3.clone}
  %get-tuple-element.318 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.72), index=0
  %get-tuple-element.319 = s32[4096,2]{1,0} get-tuple-element(%custom-call.72), index=1
  %add.2657 = s32[4096,2]{1,0} add(%get-tuple-element.319, %broadcast.5420)
  %sort.78 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.318, %add.2657), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.3
  %get-tuple-element.321 = s32[4096,2]{1,0} get-tuple-element(%sort.78), index=1
  %slice.166 = s32[4096,2]{1,0} slice(%get-tuple-element.321), slice={[0:4096], [0:2]}
  %all-gather.35 = s32[32768,2]{1,0} all-gather(%slice.166), channel_id=68, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.153 = s32[4096,2]{1,0} dynamic-slice(%all-gather.35, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.11893 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.153)
  %compare.904 = pred[1,4096,2]{2,1,0} compare(%reshape.11893, %broadcast.5421), direction=LT
  %add.2658 = s32[1,4096,2]{2,1,0} add(%reshape.11893, %broadcast.5422)
  %select.443 = s32[1,4096,2]{2,1,0} select(%compare.904, %add.2658, %reshape.11893)
  %reshape.11895 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.443)
  %concatenate.26 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1606, %reshape.11895), dimensions={3}
  %subtract.104 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.26, %broadcast.5433)
  %scatter.48 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.104, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_52.2669
  %gather.4 = u32[1,4096,2]{2,1,0} gather(%scatter.48, %subtract.104), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.905 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.4), direction=EQ
  %get-tuple-element.320 = bf16[4096,2]{1,0} get-tuple-element(%sort.78), index=0
  %slice.165 = bf16[4096,2]{1,0} slice(%get-tuple-element.320), slice={[0:4096], [0:2]}
  %all-gather.34 = bf16[32768,2]{1,0} all-gather(%slice.165), channel_id=67, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.163 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.34, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.695 = f32[4096,2]{1,0} convert(%dynamic-slice.163)
  %reshape.11911 = f32[1,4096,2]{2,1,0} reshape(%convert.695)
  %reduce.233 = f32[4096]{0} reduce(%convert.695, %constant.4073), dimensions={1}, to_apply=%region_50.2621
  %reshape.11912 = f32[1,4096]{1,0} reshape(%reduce.233)
  %broadcast.5663 = f32[1,4096,2]{2,1,0} broadcast(%reshape.11912), dimensions={0,1}
  %subtract.103 = f32[1,4096,2]{2,1,0} subtract(%reshape.11911, %broadcast.5663)
  %exponential.134 = f32[1,4096,2]{2,1,0} exponential(%subtract.103)
  %reduce.234 = f32[1,4096]{1,0} reduce(%exponential.134, %constant.3956), dimensions={2}, to_apply=%region_51.2633
  %broadcast.5664 = f32[1,4096,2]{2,1,0} broadcast(%reduce.234), dimensions={0,1}
  %divide.509 = f32[1,4096,2]{2,1,0} divide(%exponential.134, %broadcast.5664)
  %convert.696 = bf16[1,4096,2]{2,1,0} convert(%divide.509)
  %select.444 = bf16[1,4096,2]{2,1,0} select(%compare.905, %convert.696, %broadcast.5432)
  %scatter.49 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.104, %select.444), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_53.2677
  %broadcast.5668 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.11893), dimensions={0,1,2}
  %iota.1661 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.906 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.5668, %iota.1661), direction=EQ
  %convert.697 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.906)
  %reshape.11921 = s32[1,8192,8]{2,1,0} reshape(%convert.697)
  %copy.2258 = s32[1,8192,8]{2,1,0} copy(%reshape.11921)
  %reduce-window.205 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2258, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.4
  %reshape.11924 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.205)
  %copy.2259 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11924)
  %compare.907 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2259, %broadcast.5435), direction=LE
  %select.445 = s32[1,4096,2,8]{3,2,1,0} select(%compare.907, %convert.697, %broadcast.5436)
  %reduce.235 = s32[1,4096,8]{2,1,0} reduce(%select.445, %constant.3783), dimensions={2}, to_apply=%region_54.2691
  %convert.698 = bf16[1,4096,8]{2,1,0} convert(%reduce.235)
  %multiply.1940 = bf16[1,4096,8]{2,1,0} multiply(%scatter.49, %convert.698)
  %broadcast.5670 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1940), dimensions={0,1,2}
  %multiply.1941 = s32[1,8192,8]{2,1,0} multiply(%copy.2258, %reduce-window.205)
  %reshape.11925 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.1941)
  %reduce.236 = s32[1,4096,8]{2,1,0} reduce(%reshape.11925, %constant.3783), dimensions={2}, to_apply=%region_55.2700
  %multiply.1942 = s32[1,4096,8]{2,1,0} multiply(%reduce.236, %reduce.235)
  %broadcast.5671 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1942), dimensions={0,1,2}
  %iota.1662 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.908 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.5671, %iota.1662), direction=EQ
  %convert.699 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.908)
  %convert.700 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.699)
  %multiply.1943 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.5670, %convert.700)
  %slice.167 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.1943), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2260 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.167)
  %compare.909 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.167, %broadcast.5439), direction=NE
  %copy.2261 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.909)
  %convert.701 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2261)
  %dot.208 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.701, %copy.2256), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11928 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.208)
  %all-to-all.8 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11928), channel_id=75, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.12 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.8), dimensions={1,0,2,3,4}
  %reshape.11930 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.12)
  %transpose.13 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11930), dimensions={1,0,2,3}
  %copy.2262 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.13)
  %param.54 = bf16[1,4096,14336]{2,1,0} parameter(263), sharding={devices=[8,1,1]<=[8]}
  %copy.2263 = bf16[1,4096,14336]{2,1,0} copy(%param.54)
  %dot.209 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2262, %copy.2263), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2264 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.209)
  %negate.163 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2264)
  %exponential.135 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.163)
  %add.2663 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.135, %broadcast.5440)
  %divide.510 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2663)
  %multiply.1947 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2264, %divide.510)
  %param.55 = bf16[1,4096,14336]{2,1,0} parameter(264), sharding={devices=[8,1,1]<=[8]}
  %copy.2265 = bf16[1,4096,14336]{2,1,0} copy(%param.55)
  %dot.210 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2262, %copy.2265), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2266 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.210)
  %multiply.1948 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.1947, %copy.2266)
  %param.56 = bf16[1,14336,4096]{2,1,0} parameter(265), sharding={devices=[8,1,1]<=[8]}
  %copy.2267 = bf16[1,14336,4096]{2,1,0} copy(%param.56)
  %dot.211 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.1948, %copy.2267), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2268 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.211)
  %reshape.11934 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2268)
  %all-to-all.9 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11934), channel_id=76, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.14 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.9), dimensions={1,0,2,3,4}
  %reshape.11936 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.14)
  %dot.212 = bf16[1,4096,4096]{2,1,0} dot(%copy.2260, %reshape.11936), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2269 = bf16[1,4096,4096]{2,1,0} copy(%dot.212)
  %add.2664 = bf16[1,4096,4096]{2,1,0} add(%copy.2269, %add.2655)
  %copy.2270 = bf16[1,4096,4096]{2,1,0} copy(%add.2664)
  %copy.2271 = bf16[1,4096,4096]{2,1,0} copy(%copy.2270)
  %convert.702 = f32[1,4096,4096]{2,1,0} convert(%copy.2271)
  %multiply.1951 = f32[1,4096,4096]{2,1,0} multiply(%convert.702, %convert.702)
  %reduce.237 = f32[1,4096]{1,0} reduce(%multiply.1951, %constant.3956), dimensions={2}, to_apply=%region_56.2739
  %multiply.1952 = f32[1,4096]{1,0} multiply(%reduce.237, %broadcast.5380)
  %add.2665 = f32[1,4096]{1,0} add(%multiply.1952, %broadcast.5381)
  %rsqrt.74 = f32[1,4096]{1,0} rsqrt(%add.2665)
  %broadcast.5675 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.74), dimensions={0,1}
  %multiply.1953 = f32[1,4096,4096]{2,1,0} multiply(%convert.702, %broadcast.5675)
  %convert.703 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1953)
  %param.57 = bf16[4096]{0} parameter(277), sharding={replicated}
  %broadcast.5677 = bf16[1,4096,4096]{2,1,0} broadcast(%param.57), dimensions={2}
  %multiply.1954 = bf16[1,4096,4096]{2,1,0} multiply(%convert.703, %broadcast.5677)
  %copy.2272 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1954)
  %copy.2273 = bf16[1,4096,4096]{2,1,0} copy(%copy.2272)
  %param.58 = bf16[512,32,128]{2,1,0} parameter(280), sharding={devices=[8,1,1]<=[8]}
  %all-gather.36 = bf16[4096,32,128]{2,1,0} all-gather(%param.58), channel_id=77, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.213 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2273, %all-gather.36), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.168 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.213), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.1958 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.168, %broadcast.5389)
  %slice.169 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.213), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.1960 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.169, %broadcast.5391)
  %subtract.105 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.1958, %multiply.1960)
  %multiply.1961 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.169, %broadcast.5389)
  %multiply.1962 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.168, %broadcast.5391)
  %add.2667 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.1961, %multiply.1962)
  %concatenate.30 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.105, %add.2667), dimensions={3}
  %copy.2274 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.30)
  %param.59 = bf16[512,8,128]{2,1,0} parameter(278), sharding={devices=[8,1,1]<=[8]}
  %all-gather.37 = bf16[4096,8,128]{2,1,0} all-gather(%param.59), channel_id=78, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.214 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2273, %all-gather.37), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.170 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.214), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.1966 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.170, %broadcast.5400)
  %slice.171 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.214), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.1968 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.171, %broadcast.5401)
  %subtract.106 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.1966, %multiply.1968)
  %multiply.1969 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.171, %broadcast.5400)
  %multiply.1970 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.170, %broadcast.5401)
  %add.2668 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.1969, %multiply.1970)
  %concatenate.31 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.106, %add.2668), dimensions={3}
  %copy.2276 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.31)
  %param.60 = bf16[512,8,128]{2,1,0} parameter(281), sharding={devices=[8,1,1]<=[8]}
  %all-gather.38 = bf16[4096,8,128]{2,1,0} all-gather(%param.60), channel_id=79, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.215 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2273, %all-gather.38), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2277 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.215)
  %custom-call.73 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2274, %copy.2276, %copy.2277, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.331 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.73), index=0
  %copy.2278 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.331)
  %param.61 = bf16[32,128,512]{2,1,0} parameter(279), sharding={devices=[1,1,8]<=[8]}
  %all-gather.39 = bf16[32,128,4096]{2,1,0} all-gather(%param.61), channel_id=80, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.216 = bf16[1,4096,4096]{2,1,0} dot(%copy.2278, %all-gather.39), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2279 = bf16[1,4096,4096]{2,1,0} copy(%dot.216)
  %add.2682 = bf16[1,4096,4096]{2,1,0} add(%copy.2271, %copy.2279)
  %convert.716 = f32[1,4096,4096]{2,1,0} convert(%add.2682)
  %multiply.1972 = f32[1,4096,4096]{2,1,0} multiply(%convert.716, %convert.716)
  %reduce.241 = f32[1,4096]{1,0} reduce(%multiply.1972, %constant.3956), dimensions={2}, to_apply=%region_60.2899
  %multiply.1973 = f32[1,4096]{1,0} multiply(%reduce.241, %broadcast.5380)
  %add.2683 = f32[1,4096]{1,0} add(%multiply.1973, %broadcast.5381)
  %rsqrt.75 = f32[1,4096]{1,0} rsqrt(%add.2683)
  %broadcast.5710 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.75), dimensions={0,1}
  %multiply.1974 = f32[1,4096,4096]{2,1,0} multiply(%convert.716, %broadcast.5710)
  %convert.717 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1974)
  %param.62 = bf16[4096]{0} parameter(276), sharding={replicated}
  %broadcast.5711 = bf16[1,4096,4096]{2,1,0} broadcast(%param.62), dimensions={2}
  %multiply.1975 = bf16[1,4096,4096]{2,1,0} multiply(%convert.717, %broadcast.5711)
  %copy.2280 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1975)
  %param.63 = bf16[512,8]{1,0} parameter(272), sharding={devices=[8,1]<=[8]}
  %all-gather.40 = bf16[4096,8]{1,0} all-gather(%param.63), channel_id=81, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.217 = bf16[1,4096,8]{2,1,0} dot(%copy.2280, %all-gather.40), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2281 = bf16[1,4096,8]{2,1,0} copy(%dot.217)
  %reshape.11997 = bf16[4096,8]{1,0} reshape(%copy.2281)
  %custom-call.74 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.11997), custom_call_target="TopK", called_computations={%compare-greater-than.4.clone}
  %get-tuple-element.332 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.74), index=0
  %get-tuple-element.333 = s32[4096,2]{1,0} get-tuple-element(%custom-call.74), index=1
  %add.2684 = s32[4096,2]{1,0} add(%get-tuple-element.333, %broadcast.5420)
  %sort.81 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.332, %add.2684), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.4
  %get-tuple-element.335 = s32[4096,2]{1,0} get-tuple-element(%sort.81), index=1
  %slice.174 = s32[4096,2]{1,0} slice(%get-tuple-element.335), slice={[0:4096], [0:2]}
  %all-gather.42 = s32[32768,2]{1,0} all-gather(%slice.174), channel_id=83, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.181 = s32[4096,2]{1,0} dynamic-slice(%all-gather.42, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.12000 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.181)
  %compare.939 = pred[1,4096,2]{2,1,0} compare(%reshape.12000, %broadcast.5421), direction=LT
  %add.2685 = s32[1,4096,2]{2,1,0} add(%reshape.12000, %broadcast.5422)
  %select.467 = s32[1,4096,2]{2,1,0} select(%compare.939, %add.2685, %reshape.12000)
  %reshape.12001 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.467)
  %concatenate.32 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1604, %reshape.12001), dimensions={3}
  %subtract.112 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.32, %broadcast.5433)
  %scatter.60 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.112, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_63.2973
  %gather.5 = u32[1,4096,2]{2,1,0} gather(%scatter.60, %subtract.112), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.940 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.5), direction=EQ
  %get-tuple-element.334 = bf16[4096,2]{1,0} get-tuple-element(%sort.81), index=0
  %slice.173 = bf16[4096,2]{1,0} slice(%get-tuple-element.334), slice={[0:4096], [0:2]}
  %all-gather.41 = bf16[32768,2]{1,0} all-gather(%slice.173), channel_id=82, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.191 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.41, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.720 = f32[4096,2]{1,0} convert(%dynamic-slice.191)
  %reshape.12019 = f32[1,4096,2]{2,1,0} reshape(%convert.720)
  %reduce.242 = f32[4096]{0} reduce(%convert.720, %constant.4073), dimensions={1}, to_apply=%region_61.2925
  %reshape.12020 = f32[1,4096]{1,0} reshape(%reduce.242)
  %broadcast.5718 = f32[1,4096,2]{2,1,0} broadcast(%reshape.12020), dimensions={0,1}
  %subtract.111 = f32[1,4096,2]{2,1,0} subtract(%reshape.12019, %broadcast.5718)
  %exponential.136 = f32[1,4096,2]{2,1,0} exponential(%subtract.111)
  %reduce.243 = f32[1,4096]{1,0} reduce(%exponential.136, %constant.3956), dimensions={2}, to_apply=%region_62.2937
  %broadcast.5719 = f32[1,4096,2]{2,1,0} broadcast(%reduce.243), dimensions={0,1}
  %divide.515 = f32[1,4096,2]{2,1,0} divide(%exponential.136, %broadcast.5719)
  %convert.721 = bf16[1,4096,2]{2,1,0} convert(%divide.515)
  %select.468 = bf16[1,4096,2]{2,1,0} select(%compare.940, %convert.721, %broadcast.5432)
  %scatter.61 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.112, %select.468), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_64.2981
  %broadcast.5721 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.12000), dimensions={0,1,2}
  %iota.1670 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.941 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.5721, %iota.1670), direction=EQ
  %convert.722 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.941)
  %reshape.12030 = s32[1,8192,8]{2,1,0} reshape(%convert.722)
  %copy.2282 = s32[1,8192,8]{2,1,0} copy(%reshape.12030)
  %reduce-window.208 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2282, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.5
  %reshape.12032 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.208)
  %copy.2283 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12032)
  %compare.942 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2283, %broadcast.5435), direction=LE
  %select.469 = s32[1,4096,2,8]{3,2,1,0} select(%compare.942, %convert.722, %broadcast.5436)
  %reduce.244 = s32[1,4096,8]{2,1,0} reduce(%select.469, %constant.3783), dimensions={2}, to_apply=%region_65.2995
  %convert.723 = bf16[1,4096,8]{2,1,0} convert(%reduce.244)
  %multiply.1981 = bf16[1,4096,8]{2,1,0} multiply(%scatter.61, %convert.723)
  %broadcast.5723 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1981), dimensions={0,1,2}
  %multiply.1982 = s32[1,8192,8]{2,1,0} multiply(%copy.2282, %reduce-window.208)
  %reshape.12033 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.1982)
  %reduce.245 = s32[1,4096,8]{2,1,0} reduce(%reshape.12033, %constant.3783), dimensions={2}, to_apply=%region_66.3004
  %multiply.1984 = s32[1,4096,8]{2,1,0} multiply(%reduce.245, %reduce.244)
  %broadcast.5724 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.1984), dimensions={0,1,2}
  %iota.1671 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.943 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.5724, %iota.1671), direction=EQ
  %convert.724 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.943)
  %convert.725 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.724)
  %multiply.1985 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.5723, %convert.725)
  %slice.175 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.1985), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2284 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.175)
  %compare.944 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.175, %broadcast.5439), direction=NE
  %copy.2285 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.944)
  %convert.726 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2285)
  %dot.218 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.726, %copy.2280), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12037 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.218)
  %all-to-all.10 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12037), channel_id=90, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.15 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.10), dimensions={1,0,2,3,4}
  %reshape.12039 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.15)
  %transpose.16 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12039), dimensions={1,0,2,3}
  %copy.2286 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.16)
  %param.64 = bf16[1,4096,14336]{2,1,0} parameter(273), sharding={devices=[8,1,1]<=[8]}
  %copy.2287 = bf16[1,4096,14336]{2,1,0} copy(%param.64)
  %dot.219 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2286, %copy.2287), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2288 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.219)
  %negate.164 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2288)
  %exponential.137 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.164)
  %add.2691 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.137, %broadcast.5440)
  %divide.516 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2691)
  %multiply.1989 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2288, %divide.516)
  %param.65 = bf16[1,4096,14336]{2,1,0} parameter(274), sharding={devices=[8,1,1]<=[8]}
  %copy.2289 = bf16[1,4096,14336]{2,1,0} copy(%param.65)
  %dot.220 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2286, %copy.2289), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2290 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.220)
  %multiply.1990 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.1989, %copy.2290)
  %param.66 = bf16[1,14336,4096]{2,1,0} parameter(275), sharding={devices=[8,1,1]<=[8]}
  %copy.2291 = bf16[1,14336,4096]{2,1,0} copy(%param.66)
  %dot.221 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.1990, %copy.2291), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2292 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.221)
  %reshape.12042 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2292)
  %all-to-all.11 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12042), channel_id=91, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.17 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.11), dimensions={1,0,2,3,4}
  %reshape.12043 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.17)
  %dot.222 = bf16[1,4096,4096]{2,1,0} dot(%copy.2284, %reshape.12043), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2293 = bf16[1,4096,4096]{2,1,0} copy(%dot.222)
  %add.2692 = bf16[1,4096,4096]{2,1,0} add(%copy.2293, %add.2682)
  %copy.2294 = bf16[1,4096,4096]{2,1,0} copy(%add.2692)
  %copy.2295 = bf16[1,4096,4096]{2,1,0} copy(%copy.2294)
  %convert.727 = f32[1,4096,4096]{2,1,0} convert(%copy.2295)
  %multiply.1993 = f32[1,4096,4096]{2,1,0} multiply(%convert.727, %convert.727)
  %reduce.246 = f32[1,4096]{1,0} reduce(%multiply.1993, %constant.3956), dimensions={2}, to_apply=%region_67.3043
  %multiply.1994 = f32[1,4096]{1,0} multiply(%reduce.246, %broadcast.5380)
  %add.2693 = f32[1,4096]{1,0} add(%multiply.1994, %broadcast.5381)
  %rsqrt.76 = f32[1,4096]{1,0} rsqrt(%add.2693)
  %broadcast.5728 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.76), dimensions={0,1}
  %multiply.1995 = f32[1,4096,4096]{2,1,0} multiply(%convert.727, %broadcast.5728)
  %convert.728 = bf16[1,4096,4096]{2,1,0} convert(%multiply.1995)
  %param.67 = bf16[4096]{0} parameter(287), sharding={replicated}
  %broadcast.5729 = bf16[1,4096,4096]{2,1,0} broadcast(%param.67), dimensions={2}
  %multiply.1997 = bf16[1,4096,4096]{2,1,0} multiply(%convert.728, %broadcast.5729)
  %copy.2296 = bf16[1,4096,4096]{2,1,0} copy(%multiply.1997)
  %copy.2297 = bf16[1,4096,4096]{2,1,0} copy(%copy.2296)
  %param.68 = bf16[512,32,128]{2,1,0} parameter(290), sharding={devices=[8,1,1]<=[8]}
  %all-gather.43 = bf16[4096,32,128]{2,1,0} all-gather(%param.68), channel_id=92, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.223 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2297, %all-gather.43), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.176 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.223), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2001 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.176, %broadcast.5389)
  %slice.177 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.223), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2004 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.177, %broadcast.5391)
  %subtract.113 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2001, %multiply.2004)
  %multiply.2005 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.177, %broadcast.5389)
  %multiply.2006 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.176, %broadcast.5391)
  %add.2694 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2005, %multiply.2006)
  %concatenate.36 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.113, %add.2694), dimensions={3}
  %copy.2298 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.36)
  %param.69 = bf16[512,8,128]{2,1,0} parameter(288), sharding={devices=[8,1,1]<=[8]}
  %all-gather.44 = bf16[4096,8,128]{2,1,0} all-gather(%param.69), channel_id=93, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.224 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2297, %all-gather.44), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.178 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.224), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2010 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.178, %broadcast.5400)
  %slice.179 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.224), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2012 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.179, %broadcast.5401)
  %subtract.114 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2010, %multiply.2012)
  %multiply.2013 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.179, %broadcast.5400)
  %multiply.2014 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.178, %broadcast.5401)
  %add.2695 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2013, %multiply.2014)
  %concatenate.37 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.114, %add.2695), dimensions={3}
  %copy.2300 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.37)
  %param.70 = bf16[512,8,128]{2,1,0} parameter(291), sharding={devices=[8,1,1]<=[8]}
  %all-gather.45 = bf16[4096,8,128]{2,1,0} all-gather(%param.70), channel_id=94, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.225 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2297, %all-gather.45), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2301 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.225)
  %custom-call.75 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2298, %copy.2300, %copy.2301, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.345 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.75), index=0
  %copy.2302 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.345)
  %param.71 = bf16[32,128,512]{2,1,0} parameter(289), sharding={devices=[1,1,8]<=[8]}
  %all-gather.46 = bf16[32,128,4096]{2,1,0} all-gather(%param.71), channel_id=95, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.226 = bf16[1,4096,4096]{2,1,0} dot(%copy.2302, %all-gather.46), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2303 = bf16[1,4096,4096]{2,1,0} copy(%dot.226)
  %add.2709 = bf16[1,4096,4096]{2,1,0} add(%copy.2295, %copy.2303)
  %convert.741 = f32[1,4096,4096]{2,1,0} convert(%add.2709)
  %multiply.2016 = f32[1,4096,4096]{2,1,0} multiply(%convert.741, %convert.741)
  %reduce.250 = f32[1,4096]{1,0} reduce(%multiply.2016, %constant.3956), dimensions={2}, to_apply=%region_71.3203
  %multiply.2017 = f32[1,4096]{1,0} multiply(%reduce.250, %broadcast.5380)
  %add.2710 = f32[1,4096]{1,0} add(%multiply.2017, %broadcast.5381)
  %rsqrt.77 = f32[1,4096]{1,0} rsqrt(%add.2710)
  %broadcast.5759 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.77), dimensions={0,1}
  %multiply.2018 = f32[1,4096,4096]{2,1,0} multiply(%convert.741, %broadcast.5759)
  %convert.742 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2018)
  %param.72 = bf16[4096]{0} parameter(286), sharding={replicated}
  %broadcast.5760 = bf16[1,4096,4096]{2,1,0} broadcast(%param.72), dimensions={2}
  %multiply.2019 = bf16[1,4096,4096]{2,1,0} multiply(%convert.742, %broadcast.5760)
  %copy.2304 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2019)
  %param.73 = bf16[512,8]{1,0} parameter(282), sharding={devices=[8,1]<=[8]}
  %all-gather.47 = bf16[4096,8]{1,0} all-gather(%param.73), channel_id=96, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.227 = bf16[1,4096,8]{2,1,0} dot(%copy.2304, %all-gather.47), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2305 = bf16[1,4096,8]{2,1,0} copy(%dot.227)
  %reshape.12091 = bf16[4096,8]{1,0} reshape(%copy.2305)
  %custom-call.76 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.12091), custom_call_target="TopK", called_computations={%compare-greater-than.5.clone}
  %get-tuple-element.346 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.76), index=0
  %get-tuple-element.347 = s32[4096,2]{1,0} get-tuple-element(%custom-call.76), index=1
  %add.2711 = s32[4096,2]{1,0} add(%get-tuple-element.347, %broadcast.5420)
  %sort.84 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.346, %add.2711), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.5
  %get-tuple-element.349 = s32[4096,2]{1,0} get-tuple-element(%sort.84), index=1
  %slice.182 = s32[4096,2]{1,0} slice(%get-tuple-element.349), slice={[0:4096], [0:2]}
  %all-gather.49 = s32[32768,2]{1,0} all-gather(%slice.182), channel_id=98, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.209 = s32[4096,2]{1,0} dynamic-slice(%all-gather.49, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.12094 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.209)
  %compare.974 = pred[1,4096,2]{2,1,0} compare(%reshape.12094, %broadcast.5421), direction=LT
  %add.2712 = s32[1,4096,2]{2,1,0} add(%reshape.12094, %broadcast.5422)
  %select.491 = s32[1,4096,2]{2,1,0} select(%compare.974, %add.2712, %reshape.12094)
  %reshape.12095 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.491)
  %concatenate.38 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1602, %reshape.12095), dimensions={3}
  %subtract.120 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.38, %broadcast.5433)
  %scatter.72 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.120, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_74.3277
  %gather.6 = u32[1,4096,2]{2,1,0} gather(%scatter.72, %subtract.120), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.975 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.6), direction=EQ
  %get-tuple-element.348 = bf16[4096,2]{1,0} get-tuple-element(%sort.84), index=0
  %slice.181 = bf16[4096,2]{1,0} slice(%get-tuple-element.348), slice={[0:4096], [0:2]}
  %all-gather.48 = bf16[32768,2]{1,0} all-gather(%slice.181), channel_id=97, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.219 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.48, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.745 = f32[4096,2]{1,0} convert(%dynamic-slice.219)
  %reshape.12113 = f32[1,4096,2]{2,1,0} reshape(%convert.745)
  %reduce.251 = f32[4096]{0} reduce(%convert.745, %constant.4073), dimensions={1}, to_apply=%region_72.3229
  %reshape.12114 = f32[1,4096]{1,0} reshape(%reduce.251)
  %broadcast.5767 = f32[1,4096,2]{2,1,0} broadcast(%reshape.12114), dimensions={0,1}
  %subtract.119 = f32[1,4096,2]{2,1,0} subtract(%reshape.12113, %broadcast.5767)
  %exponential.138 = f32[1,4096,2]{2,1,0} exponential(%subtract.119)
  %reduce.252 = f32[1,4096]{1,0} reduce(%exponential.138, %constant.3956), dimensions={2}, to_apply=%region_73.3241
  %broadcast.5768 = f32[1,4096,2]{2,1,0} broadcast(%reduce.252), dimensions={0,1}
  %divide.521 = f32[1,4096,2]{2,1,0} divide(%exponential.138, %broadcast.5768)
  %convert.746 = bf16[1,4096,2]{2,1,0} convert(%divide.521)
  %select.492 = bf16[1,4096,2]{2,1,0} select(%compare.975, %convert.746, %broadcast.5432)
  %scatter.73 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.120, %select.492), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_75.3285
  %broadcast.5770 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.12094), dimensions={0,1,2}
  %iota.1679 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.976 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.5770, %iota.1679), direction=EQ
  %convert.747 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.976)
  %reshape.12124 = s32[1,8192,8]{2,1,0} reshape(%convert.747)
  %copy.2306 = s32[1,8192,8]{2,1,0} copy(%reshape.12124)
  %reduce-window.211 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2306, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.6
  %reshape.12126 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.211)
  %copy.2307 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12126)
  %compare.977 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2307, %broadcast.5435), direction=LE
  %select.493 = s32[1,4096,2,8]{3,2,1,0} select(%compare.977, %convert.747, %broadcast.5436)
  %reduce.253 = s32[1,4096,8]{2,1,0} reduce(%select.493, %constant.3783), dimensions={2}, to_apply=%region_76.3299
  %convert.748 = bf16[1,4096,8]{2,1,0} convert(%reduce.253)
  %multiply.2025 = bf16[1,4096,8]{2,1,0} multiply(%scatter.73, %convert.748)
  %broadcast.5772 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2025), dimensions={0,1,2}
  %multiply.2026 = s32[1,8192,8]{2,1,0} multiply(%copy.2306, %reduce-window.211)
  %reshape.12127 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2026)
  %reduce.254 = s32[1,4096,8]{2,1,0} reduce(%reshape.12127, %constant.3783), dimensions={2}, to_apply=%region_77.3308
  %multiply.2027 = s32[1,4096,8]{2,1,0} multiply(%reduce.254, %reduce.253)
  %broadcast.5773 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2027), dimensions={0,1,2}
  %iota.1680 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.978 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.5773, %iota.1680), direction=EQ
  %convert.749 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.978)
  %convert.750 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.749)
  %multiply.2028 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.5772, %convert.750)
  %slice.183 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2028), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2308 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.183)
  %compare.979 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.183, %broadcast.5439), direction=NE
  %copy.2309 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.979)
  %convert.751 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2309)
  %dot.228 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.751, %copy.2304), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12130 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.228)
  %all-to-all.12 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12130), channel_id=105, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.18 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.12), dimensions={1,0,2,3,4}
  %reshape.12131 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.18)
  %transpose.19 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12131), dimensions={1,0,2,3}
  %copy.2310 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.19)
  %param.74 = bf16[1,4096,14336]{2,1,0} parameter(283), sharding={devices=[8,1,1]<=[8]}
  %copy.2311 = bf16[1,4096,14336]{2,1,0} copy(%param.74)
  %dot.229 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2310, %copy.2311), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2312 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.229)
  %negate.165 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2312)
  %exponential.139 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.165)
  %add.2717 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.139, %broadcast.5440)
  %divide.522 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2717)
  %multiply.2032 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2312, %divide.522)
  %param.75 = bf16[1,4096,14336]{2,1,0} parameter(284), sharding={devices=[8,1,1]<=[8]}
  %copy.2313 = bf16[1,4096,14336]{2,1,0} copy(%param.75)
  %dot.230 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2310, %copy.2313), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2314 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.230)
  %multiply.2033 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2032, %copy.2314)
  %param.76 = bf16[1,14336,4096]{2,1,0} parameter(285), sharding={devices=[8,1,1]<=[8]}
  %copy.2315 = bf16[1,14336,4096]{2,1,0} copy(%param.76)
  %dot.231 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2033, %copy.2315), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2316 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.231)
  %reshape.12136 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2316)
  %all-to-all.13 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12136), channel_id=106, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.20 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.13), dimensions={1,0,2,3,4}
  %reshape.12137 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.20)
  %dot.232 = bf16[1,4096,4096]{2,1,0} dot(%copy.2308, %reshape.12137), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2317 = bf16[1,4096,4096]{2,1,0} copy(%dot.232)
  %add.2718 = bf16[1,4096,4096]{2,1,0} add(%copy.2317, %add.2709)
  %copy.2318 = bf16[1,4096,4096]{2,1,0} copy(%add.2718)
  %copy.2319 = bf16[1,4096,4096]{2,1,0} copy(%copy.2318)
  %convert.752 = f32[1,4096,4096]{2,1,0} convert(%copy.2319)
  %multiply.2036 = f32[1,4096,4096]{2,1,0} multiply(%convert.752, %convert.752)
  %reduce.255 = f32[1,4096]{1,0} reduce(%multiply.2036, %constant.3956), dimensions={2}, to_apply=%region_78.3347
  %multiply.2037 = f32[1,4096]{1,0} multiply(%reduce.255, %broadcast.5380)
  %add.2719 = f32[1,4096]{1,0} add(%multiply.2037, %broadcast.5381)
  %rsqrt.78 = f32[1,4096]{1,0} rsqrt(%add.2719)
  %broadcast.5777 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.78), dimensions={0,1}
  %multiply.2038 = f32[1,4096,4096]{2,1,0} multiply(%convert.752, %broadcast.5777)
  %convert.753 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2038)
  %param.77 = bf16[4096]{0} parameter(297), sharding={replicated}
  %broadcast.5778 = bf16[1,4096,4096]{2,1,0} broadcast(%param.77), dimensions={2}
  %multiply.2039 = bf16[1,4096,4096]{2,1,0} multiply(%convert.753, %broadcast.5778)
  %copy.2320 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2039)
  %copy.2321 = bf16[1,4096,4096]{2,1,0} copy(%copy.2320)
  %param.78 = bf16[512,32,128]{2,1,0} parameter(300), sharding={devices=[8,1,1]<=[8]}
  %all-gather.50 = bf16[4096,32,128]{2,1,0} all-gather(%param.78), channel_id=107, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.233 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2321, %all-gather.50), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.184 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.233), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2043 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.184, %broadcast.5389)
  %slice.185 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.233), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2045 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.185, %broadcast.5391)
  %subtract.121 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2043, %multiply.2045)
  %multiply.2046 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.185, %broadcast.5389)
  %multiply.2047 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.184, %broadcast.5391)
  %add.2720 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2046, %multiply.2047)
  %concatenate.42 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.121, %add.2720), dimensions={3}
  %copy.2322 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.42)
  %param.79 = bf16[512,8,128]{2,1,0} parameter(298), sharding={devices=[8,1,1]<=[8]}
  %all-gather.51 = bf16[4096,8,128]{2,1,0} all-gather(%param.79), channel_id=108, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.234 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2321, %all-gather.51), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.186 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.234), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2051 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.186, %broadcast.5400)
  %slice.187 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.234), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2053 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.187, %broadcast.5401)
  %subtract.122 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2051, %multiply.2053)
  %multiply.2054 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.187, %broadcast.5400)
  %multiply.2055 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.186, %broadcast.5401)
  %add.2721 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2054, %multiply.2055)
  %concatenate.43 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.122, %add.2721), dimensions={3}
  %copy.2324 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.43)
  %param.80 = bf16[512,8,128]{2,1,0} parameter(301), sharding={devices=[8,1,1]<=[8]}
  %all-gather.52 = bf16[4096,8,128]{2,1,0} all-gather(%param.80), channel_id=109, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.235 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2321, %all-gather.52), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2325 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.235)
  %custom-call.77 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2322, %copy.2324, %copy.2325, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.359 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.77), index=0
  %copy.2326 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.359)
  %param.81 = bf16[32,128,512]{2,1,0} parameter(299), sharding={devices=[1,1,8]<=[8]}
  %all-gather.53 = bf16[32,128,4096]{2,1,0} all-gather(%param.81), channel_id=110, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.236 = bf16[1,4096,4096]{2,1,0} dot(%copy.2326, %all-gather.53), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2327 = bf16[1,4096,4096]{2,1,0} copy(%dot.236)
  %add.2735 = bf16[1,4096,4096]{2,1,0} add(%copy.2319, %copy.2327)
  %convert.766 = f32[1,4096,4096]{2,1,0} convert(%add.2735)
  %multiply.2057 = f32[1,4096,4096]{2,1,0} multiply(%convert.766, %convert.766)
  %reduce.259 = f32[1,4096]{1,0} reduce(%multiply.2057, %constant.3956), dimensions={2}, to_apply=%region_82.3507
  %multiply.2058 = f32[1,4096]{1,0} multiply(%reduce.259, %broadcast.5380)
  %add.2736 = f32[1,4096]{1,0} add(%multiply.2058, %broadcast.5381)
  %rsqrt.79 = f32[1,4096]{1,0} rsqrt(%add.2736)
  %broadcast.5813 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.79), dimensions={0,1}
  %multiply.2059 = f32[1,4096,4096]{2,1,0} multiply(%convert.766, %broadcast.5813)
  %convert.767 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2059)
  %param.82 = bf16[4096]{0} parameter(296), sharding={replicated}
  %broadcast.5815 = bf16[1,4096,4096]{2,1,0} broadcast(%param.82), dimensions={2}
  %multiply.2060 = bf16[1,4096,4096]{2,1,0} multiply(%convert.767, %broadcast.5815)
  %copy.2328 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2060)
  %param.83 = bf16[512,8]{1,0} parameter(292), sharding={devices=[8,1]<=[8]}
  %all-gather.54 = bf16[4096,8]{1,0} all-gather(%param.83), channel_id=111, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.237 = bf16[1,4096,8]{2,1,0} dot(%copy.2328, %all-gather.54), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2329 = bf16[1,4096,8]{2,1,0} copy(%dot.237)
  %reshape.12189 = bf16[4096,8]{1,0} reshape(%copy.2329)
  %custom-call.78 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.12189), custom_call_target="TopK", called_computations={%compare-greater-than.7.clone}
  %get-tuple-element.360 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.78), index=0
  %get-tuple-element.361 = s32[4096,2]{1,0} get-tuple-element(%custom-call.78), index=1
  %add.2737 = s32[4096,2]{1,0} add(%get-tuple-element.361, %broadcast.5420)
  %sort.87 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.360, %add.2737), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.6
  %get-tuple-element.363 = s32[4096,2]{1,0} get-tuple-element(%sort.87), index=1
  %slice.190 = s32[4096,2]{1,0} slice(%get-tuple-element.363), slice={[0:4096], [0:2]}
  %all-gather.56 = s32[32768,2]{1,0} all-gather(%slice.190), channel_id=113, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.237 = s32[4096,2]{1,0} dynamic-slice(%all-gather.56, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.12192 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.237)
  %compare.1009 = pred[1,4096,2]{2,1,0} compare(%reshape.12192, %broadcast.5421), direction=LT
  %add.2739 = s32[1,4096,2]{2,1,0} add(%reshape.12192, %broadcast.5422)
  %select.515 = s32[1,4096,2]{2,1,0} select(%compare.1009, %add.2739, %reshape.12192)
  %reshape.12193 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.515)
  %concatenate.44 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1600, %reshape.12193), dimensions={3}
  %subtract.128 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.44, %broadcast.5433)
  %scatter.86 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.128, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_85.3581
  %gather.7 = u32[1,4096,2]{2,1,0} gather(%scatter.86, %subtract.128), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1010 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.7), direction=EQ
  %get-tuple-element.362 = bf16[4096,2]{1,0} get-tuple-element(%sort.87), index=0
  %slice.189 = bf16[4096,2]{1,0} slice(%get-tuple-element.362), slice={[0:4096], [0:2]}
  %all-gather.55 = bf16[32768,2]{1,0} all-gather(%slice.189), channel_id=112, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.247 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.55, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.770 = f32[4096,2]{1,0} convert(%dynamic-slice.247)
  %reshape.12209 = f32[1,4096,2]{2,1,0} reshape(%convert.770)
  %reduce.260 = f32[4096]{0} reduce(%convert.770, %constant.4073), dimensions={1}, to_apply=%region_83.3533
  %reshape.12210 = f32[1,4096]{1,0} reshape(%reduce.260)
  %broadcast.5823 = f32[1,4096,2]{2,1,0} broadcast(%reshape.12210), dimensions={0,1}
  %subtract.127 = f32[1,4096,2]{2,1,0} subtract(%reshape.12209, %broadcast.5823)
  %exponential.140 = f32[1,4096,2]{2,1,0} exponential(%subtract.127)
  %reduce.261 = f32[1,4096]{1,0} reduce(%exponential.140, %constant.3956), dimensions={2}, to_apply=%region_84.3545
  %broadcast.5825 = f32[1,4096,2]{2,1,0} broadcast(%reduce.261), dimensions={0,1}
  %divide.527 = f32[1,4096,2]{2,1,0} divide(%exponential.140, %broadcast.5825)
  %convert.771 = bf16[1,4096,2]{2,1,0} convert(%divide.527)
  %select.516 = bf16[1,4096,2]{2,1,0} select(%compare.1010, %convert.771, %broadcast.5432)
  %scatter.87 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.128, %select.516), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_86.3589
  %broadcast.5829 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.12192), dimensions={0,1,2}
  %iota.1688 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1011 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.5829, %iota.1688), direction=EQ
  %convert.772 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1011)
  %reshape.12221 = s32[1,8192,8]{2,1,0} reshape(%convert.772)
  %copy.2330 = s32[1,8192,8]{2,1,0} copy(%reshape.12221)
  %reduce-window.214 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2330, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.7
  %reshape.12224 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.214)
  %copy.2331 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12224)
  %compare.1012 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2331, %broadcast.5435), direction=LE
  %select.517 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1012, %convert.772, %broadcast.5436)
  %reduce.262 = s32[1,4096,8]{2,1,0} reduce(%select.517, %constant.3783), dimensions={2}, to_apply=%region_87.3603
  %convert.773 = bf16[1,4096,8]{2,1,0} convert(%reduce.262)
  %multiply.2066 = bf16[1,4096,8]{2,1,0} multiply(%scatter.87, %convert.773)
  %broadcast.5832 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2066), dimensions={0,1,2}
  %multiply.2067 = s32[1,8192,8]{2,1,0} multiply(%copy.2330, %reduce-window.214)
  %reshape.12225 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2067)
  %reduce.263 = s32[1,4096,8]{2,1,0} reduce(%reshape.12225, %constant.3783), dimensions={2}, to_apply=%region_88.3612
  %multiply.2068 = s32[1,4096,8]{2,1,0} multiply(%reduce.263, %reduce.262)
  %broadcast.5834 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2068), dimensions={0,1,2}
  %iota.1689 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1013 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.5834, %iota.1689), direction=EQ
  %convert.774 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1013)
  %convert.775 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.774)
  %multiply.2069 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.5832, %convert.775)
  %slice.191 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2069), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2332 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.191)
  %compare.1014 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.191, %broadcast.5439), direction=NE
  %copy.2333 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1014)
  %convert.776 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2333)
  %dot.238 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.776, %copy.2328), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12229 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.238)
  %all-to-all.14 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12229), channel_id=120, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.21 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.14), dimensions={1,0,2,3,4}
  %reshape.12230 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.21)
  %transpose.22 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12230), dimensions={1,0,2,3}
  %copy.2334 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.22)
  %param.84 = bf16[1,4096,14336]{2,1,0} parameter(293), sharding={devices=[8,1,1]<=[8]}
  %copy.2335 = bf16[1,4096,14336]{2,1,0} copy(%param.84)
  %dot.239 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2334, %copy.2335), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2336 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.239)
  %negate.166 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2336)
  %exponential.141 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.166)
  %add.2745 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.141, %broadcast.5440)
  %divide.528 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2745)
  %multiply.2073 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2336, %divide.528)
  %param.85 = bf16[1,4096,14336]{2,1,0} parameter(294), sharding={devices=[8,1,1]<=[8]}
  %copy.2337 = bf16[1,4096,14336]{2,1,0} copy(%param.85)
  %dot.240 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2334, %copy.2337), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2338 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.240)
  %multiply.2074 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2073, %copy.2338)
  %param.86 = bf16[1,14336,4096]{2,1,0} parameter(295), sharding={devices=[8,1,1]<=[8]}
  %copy.2339 = bf16[1,14336,4096]{2,1,0} copy(%param.86)
  %dot.241 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2074, %copy.2339), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2340 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.241)
  %reshape.12233 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2340)
  %all-to-all.15 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12233), channel_id=121, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.23 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.15), dimensions={1,0,2,3,4}
  %reshape.12234 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.23)
  %dot.242 = bf16[1,4096,4096]{2,1,0} dot(%copy.2332, %reshape.12234), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2341 = bf16[1,4096,4096]{2,1,0} copy(%dot.242)
  %add.2746 = bf16[1,4096,4096]{2,1,0} add(%copy.2341, %add.2735)
  %copy.2342 = bf16[1,4096,4096]{2,1,0} copy(%add.2746)
  %copy.2343 = bf16[1,4096,4096]{2,1,0} copy(%copy.2342)
  %convert.777 = f32[1,4096,4096]{2,1,0} convert(%copy.2343)
  %multiply.2077 = f32[1,4096,4096]{2,1,0} multiply(%convert.777, %convert.777)
  %reduce.264 = f32[1,4096]{1,0} reduce(%multiply.2077, %constant.3956), dimensions={2}, to_apply=%region_89.3651
  %multiply.2078 = f32[1,4096]{1,0} multiply(%reduce.264, %broadcast.5380)
  %add.2747 = f32[1,4096]{1,0} add(%multiply.2078, %broadcast.5381)
  %rsqrt.80 = f32[1,4096]{1,0} rsqrt(%add.2747)
  %broadcast.5840 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.80), dimensions={0,1}
  %multiply.2080 = f32[1,4096,4096]{2,1,0} multiply(%convert.777, %broadcast.5840)
  %convert.778 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2080)
  %param.87 = bf16[4096]{0} parameter(307), sharding={replicated}
  %broadcast.5841 = bf16[1,4096,4096]{2,1,0} broadcast(%param.87), dimensions={2}
  %multiply.2081 = bf16[1,4096,4096]{2,1,0} multiply(%convert.778, %broadcast.5841)
  %copy.2344 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2081)
  %copy.2345 = bf16[1,4096,4096]{2,1,0} copy(%copy.2344)
  %param.88 = bf16[512,32,128]{2,1,0} parameter(310), sharding={devices=[8,1,1]<=[8]}
  %all-gather.57 = bf16[4096,32,128]{2,1,0} all-gather(%param.88), channel_id=122, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.243 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2345, %all-gather.57), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.192 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.243), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2085 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.192, %broadcast.5389)
  %slice.193 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.243), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2089 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.193, %broadcast.5391)
  %subtract.129 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2085, %multiply.2089)
  %multiply.2090 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.193, %broadcast.5389)
  %multiply.2091 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.192, %broadcast.5391)
  %add.2748 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2090, %multiply.2091)
  %concatenate.48 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.129, %add.2748), dimensions={3}
  %copy.2346 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.48)
  %param.89 = bf16[512,8,128]{2,1,0} parameter(308), sharding={devices=[8,1,1]<=[8]}
  %all-gather.58 = bf16[4096,8,128]{2,1,0} all-gather(%param.89), channel_id=123, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.244 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2345, %all-gather.58), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.194 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.244), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2096 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.194, %broadcast.5400)
  %slice.195 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.244), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2098 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.195, %broadcast.5401)
  %subtract.130 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2096, %multiply.2098)
  %multiply.2099 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.195, %broadcast.5400)
  %multiply.2100 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.194, %broadcast.5401)
  %add.2749 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2099, %multiply.2100)
  %concatenate.49 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.130, %add.2749), dimensions={3}
  %copy.2348 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.49)
  %param.90 = bf16[512,8,128]{2,1,0} parameter(311), sharding={devices=[8,1,1]<=[8]}
  %all-gather.59 = bf16[4096,8,128]{2,1,0} all-gather(%param.90), channel_id=124, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.245 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2345, %all-gather.59), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2349 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.245)
  %custom-call.79 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2346, %copy.2348, %copy.2349, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.373 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.79), index=0
  %copy.2350 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.373)
  %param.91 = bf16[32,128,512]{2,1,0} parameter(309), sharding={devices=[1,1,8]<=[8]}
  %all-gather.60 = bf16[32,128,4096]{2,1,0} all-gather(%param.91), channel_id=125, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.246 = bf16[1,4096,4096]{2,1,0} dot(%copy.2350, %all-gather.60), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2351 = bf16[1,4096,4096]{2,1,0} copy(%dot.246)
  %add.2762 = bf16[1,4096,4096]{2,1,0} add(%copy.2343, %copy.2351)
  %convert.791 = f32[1,4096,4096]{2,1,0} convert(%add.2762)
  %multiply.2103 = f32[1,4096,4096]{2,1,0} multiply(%convert.791, %convert.791)
  %reduce.268 = f32[1,4096]{1,0} reduce(%multiply.2103, %constant.3956), dimensions={2}, to_apply=%region_93.3811
  %multiply.2104 = f32[1,4096]{1,0} multiply(%reduce.268, %broadcast.5380)
  %add.2763 = f32[1,4096]{1,0} add(%multiply.2104, %broadcast.5381)
  %rsqrt.81 = f32[1,4096]{1,0} rsqrt(%add.2763)
  %broadcast.5881 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.81), dimensions={0,1}
  %multiply.2105 = f32[1,4096,4096]{2,1,0} multiply(%convert.791, %broadcast.5881)
  %convert.792 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2105)
  %param.92 = bf16[4096]{0} parameter(306), sharding={replicated}
  %broadcast.5882 = bf16[1,4096,4096]{2,1,0} broadcast(%param.92), dimensions={2}
  %multiply.2106 = bf16[1,4096,4096]{2,1,0} multiply(%convert.792, %broadcast.5882)
  %copy.2352 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2106)
  %param.93 = bf16[512,8]{1,0} parameter(302), sharding={devices=[8,1]<=[8]}
  %all-gather.61 = bf16[4096,8]{1,0} all-gather(%param.93), channel_id=126, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.247 = bf16[1,4096,8]{2,1,0} dot(%copy.2352, %all-gather.61), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2353 = bf16[1,4096,8]{2,1,0} copy(%dot.247)
  %reshape.12288 = bf16[4096,8]{1,0} reshape(%copy.2353)
  %custom-call.80 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.12288), custom_call_target="TopK", called_computations={%compare-greater-than.8.clone}
  %get-tuple-element.374 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.80), index=0
  %get-tuple-element.375 = s32[4096,2]{1,0} get-tuple-element(%custom-call.80), index=1
  %add.2764 = s32[4096,2]{1,0} add(%get-tuple-element.375, %broadcast.5420)
  %sort.90 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.374, %add.2764), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.7
  %get-tuple-element.377 = s32[4096,2]{1,0} get-tuple-element(%sort.90), index=1
  %slice.198 = s32[4096,2]{1,0} slice(%get-tuple-element.377), slice={[0:4096], [0:2]}
  %all-gather.63 = s32[32768,2]{1,0} all-gather(%slice.198), channel_id=128, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.265 = s32[4096,2]{1,0} dynamic-slice(%all-gather.63, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.12291 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.265)
  %compare.1044 = pred[1,4096,2]{2,1,0} compare(%reshape.12291, %broadcast.5421), direction=LT
  %add.2765 = s32[1,4096,2]{2,1,0} add(%reshape.12291, %broadcast.5422)
  %select.539 = s32[1,4096,2]{2,1,0} select(%compare.1044, %add.2765, %reshape.12291)
  %reshape.12293 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.539)
  %concatenate.50 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1598, %reshape.12293), dimensions={3}
  %subtract.136 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.50, %broadcast.5433)
  %scatter.98 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.136, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_96.3885
  %gather.8 = u32[1,4096,2]{2,1,0} gather(%scatter.98, %subtract.136), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1045 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.8), direction=EQ
  %get-tuple-element.376 = bf16[4096,2]{1,0} get-tuple-element(%sort.90), index=0
  %slice.197 = bf16[4096,2]{1,0} slice(%get-tuple-element.376), slice={[0:4096], [0:2]}
  %all-gather.62 = bf16[32768,2]{1,0} all-gather(%slice.197), channel_id=127, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.275 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.62, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.795 = f32[4096,2]{1,0} convert(%dynamic-slice.275)
  %reshape.12310 = f32[1,4096,2]{2,1,0} reshape(%convert.795)
  %reduce.269 = f32[4096]{0} reduce(%convert.795, %constant.4073), dimensions={1}, to_apply=%region_94.3837
  %reshape.12311 = f32[1,4096]{1,0} reshape(%reduce.269)
  %broadcast.5893 = f32[1,4096,2]{2,1,0} broadcast(%reshape.12311), dimensions={0,1}
  %subtract.135 = f32[1,4096,2]{2,1,0} subtract(%reshape.12310, %broadcast.5893)
  %exponential.142 = f32[1,4096,2]{2,1,0} exponential(%subtract.135)
  %reduce.270 = f32[1,4096]{1,0} reduce(%exponential.142, %constant.3956), dimensions={2}, to_apply=%region_95.3849
  %broadcast.5894 = f32[1,4096,2]{2,1,0} broadcast(%reduce.270), dimensions={0,1}
  %divide.533 = f32[1,4096,2]{2,1,0} divide(%exponential.142, %broadcast.5894)
  %convert.796 = bf16[1,4096,2]{2,1,0} convert(%divide.533)
  %select.540 = bf16[1,4096,2]{2,1,0} select(%compare.1045, %convert.796, %broadcast.5432)
  %scatter.99 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.136, %select.540), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_97.3893
  %broadcast.5898 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.12291), dimensions={0,1,2}
  %iota.1697 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1046 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.5898, %iota.1697), direction=EQ
  %convert.797 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1046)
  %reshape.12320 = s32[1,8192,8]{2,1,0} reshape(%convert.797)
  %copy.2354 = s32[1,8192,8]{2,1,0} copy(%reshape.12320)
  %reduce-window.217 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2354, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.8
  %reshape.12322 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.217)
  %copy.2355 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12322)
  %compare.1047 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2355, %broadcast.5435), direction=LE
  %select.541 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1047, %convert.797, %broadcast.5436)
  %reduce.271 = s32[1,4096,8]{2,1,0} reduce(%select.541, %constant.3783), dimensions={2}, to_apply=%region_98.3907
  %convert.798 = bf16[1,4096,8]{2,1,0} convert(%reduce.271)
  %multiply.2112 = bf16[1,4096,8]{2,1,0} multiply(%scatter.99, %convert.798)
  %broadcast.5901 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2112), dimensions={0,1,2}
  %multiply.2113 = s32[1,8192,8]{2,1,0} multiply(%copy.2354, %reduce-window.217)
  %reshape.12323 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2113)
  %reduce.272 = s32[1,4096,8]{2,1,0} reduce(%reshape.12323, %constant.3783), dimensions={2}, to_apply=%region_99.3916
  %multiply.2114 = s32[1,4096,8]{2,1,0} multiply(%reduce.272, %reduce.271)
  %broadcast.5903 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2114), dimensions={0,1,2}
  %iota.1698 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1048 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.5903, %iota.1698), direction=EQ
  %convert.799 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1048)
  %convert.800 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.799)
  %multiply.2115 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.5901, %convert.800)
  %slice.199 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2115), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2356 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.199)
  %compare.1049 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.199, %broadcast.5439), direction=NE
  %copy.2357 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1049)
  %convert.801 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2357)
  %dot.248 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.801, %copy.2352), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12326 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.248)
  %all-to-all.16 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12326), channel_id=135, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.24 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.16), dimensions={1,0,2,3,4}
  %reshape.12327 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.24)
  %transpose.25 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12327), dimensions={1,0,2,3}
  %copy.2358 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.25)
  %param.94 = bf16[1,4096,14336]{2,1,0} parameter(303), sharding={devices=[8,1,1]<=[8]}
  %copy.2359 = bf16[1,4096,14336]{2,1,0} copy(%param.94)
  %dot.249 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2358, %copy.2359), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2360 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.249)
  %negate.167 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2360)
  %exponential.143 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.167)
  %add.2770 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.143, %broadcast.5440)
  %divide.534 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2770)
  %multiply.2120 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2360, %divide.534)
  %param.95 = bf16[1,4096,14336]{2,1,0} parameter(304), sharding={devices=[8,1,1]<=[8]}
  %copy.2361 = bf16[1,4096,14336]{2,1,0} copy(%param.95)
  %dot.250 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2358, %copy.2361), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2362 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.250)
  %multiply.2121 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2120, %copy.2362)
  %param.96 = bf16[1,14336,4096]{2,1,0} parameter(305), sharding={devices=[8,1,1]<=[8]}
  %copy.2363 = bf16[1,14336,4096]{2,1,0} copy(%param.96)
  %dot.251 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2121, %copy.2363), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2364 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.251)
  %reshape.12330 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2364)
  %all-to-all.17 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12330), channel_id=136, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.26 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.17), dimensions={1,0,2,3,4}
  %reshape.12331 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.26)
  %dot.252 = bf16[1,4096,4096]{2,1,0} dot(%copy.2356, %reshape.12331), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2365 = bf16[1,4096,4096]{2,1,0} copy(%dot.252)
  %add.2771 = bf16[1,4096,4096]{2,1,0} add(%copy.2365, %add.2762)
  %copy.2366 = bf16[1,4096,4096]{2,1,0} copy(%add.2771)
  %copy.2367 = bf16[1,4096,4096]{2,1,0} copy(%copy.2366)
  %convert.802 = f32[1,4096,4096]{2,1,0} convert(%copy.2367)
  %multiply.2124 = f32[1,4096,4096]{2,1,0} multiply(%convert.802, %convert.802)
  %reduce.273 = f32[1,4096]{1,0} reduce(%multiply.2124, %constant.3956), dimensions={2}, to_apply=%region_100.3955
  %multiply.2125 = f32[1,4096]{1,0} multiply(%reduce.273, %broadcast.5380)
  %add.2772 = f32[1,4096]{1,0} add(%multiply.2125, %broadcast.5381)
  %rsqrt.82 = f32[1,4096]{1,0} rsqrt(%add.2772)
  %broadcast.5907 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.82), dimensions={0,1}
  %multiply.2126 = f32[1,4096,4096]{2,1,0} multiply(%convert.802, %broadcast.5907)
  %convert.803 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2126)
  %param.97 = bf16[4096]{0} parameter(317), sharding={replicated}
  %broadcast.5908 = bf16[1,4096,4096]{2,1,0} broadcast(%param.97), dimensions={2}
  %multiply.2128 = bf16[1,4096,4096]{2,1,0} multiply(%convert.803, %broadcast.5908)
  %copy.2368 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2128)
  %copy.2369 = bf16[1,4096,4096]{2,1,0} copy(%copy.2368)
  %param.98 = bf16[512,32,128]{2,1,0} parameter(320), sharding={devices=[8,1,1]<=[8]}
  %all-gather.64 = bf16[4096,32,128]{2,1,0} all-gather(%param.98), channel_id=137, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.253 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2369, %all-gather.64), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.200 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.253), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2132 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.200, %broadcast.5389)
  %slice.201 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.253), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2134 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.201, %broadcast.5391)
  %subtract.137 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2132, %multiply.2134)
  %multiply.2135 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.201, %broadcast.5389)
  %multiply.2136 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.200, %broadcast.5391)
  %add.2773 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2135, %multiply.2136)
  %concatenate.54 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.137, %add.2773), dimensions={3}
  %copy.2370 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.54)
  %param.99 = bf16[512,8,128]{2,1,0} parameter(318), sharding={devices=[8,1,1]<=[8]}
  %all-gather.65 = bf16[4096,8,128]{2,1,0} all-gather(%param.99), channel_id=138, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.254 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2369, %all-gather.65), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.202 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.254), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2141 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.202, %broadcast.5400)
  %slice.203 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.254), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2143 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.203, %broadcast.5401)
  %subtract.138 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2141, %multiply.2143)
  %multiply.2144 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.203, %broadcast.5400)
  %multiply.2145 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.202, %broadcast.5401)
  %add.2774 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2144, %multiply.2145)
  %concatenate.55 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.138, %add.2774), dimensions={3}
  %copy.2372 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.55)
  %param.100 = bf16[512,8,128]{2,1,0} parameter(321), sharding={devices=[8,1,1]<=[8]}
  %all-gather.66 = bf16[4096,8,128]{2,1,0} all-gather(%param.100), channel_id=139, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.255 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2369, %all-gather.66), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2373 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.255)
  %custom-call.81 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2370, %copy.2372, %copy.2373, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.387 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.81), index=0
  %copy.2374 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.387)
  %param.101 = bf16[32,128,512]{2,1,0} parameter(319), sharding={devices=[1,1,8]<=[8]}
  %all-gather.67 = bf16[32,128,4096]{2,1,0} all-gather(%param.101), channel_id=140, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.256 = bf16[1,4096,4096]{2,1,0} dot(%copy.2374, %all-gather.67), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2375 = bf16[1,4096,4096]{2,1,0} copy(%dot.256)
  %add.2787 = bf16[1,4096,4096]{2,1,0} add(%copy.2367, %copy.2375)
  %convert.816 = f32[1,4096,4096]{2,1,0} convert(%add.2787)
  %multiply.2148 = f32[1,4096,4096]{2,1,0} multiply(%convert.816, %convert.816)
  %reduce.277 = f32[1,4096]{1,0} reduce(%multiply.2148, %constant.3956), dimensions={2}, to_apply=%region_104.4115
  %multiply.2149 = f32[1,4096]{1,0} multiply(%reduce.277, %broadcast.5380)
  %add.2788 = f32[1,4096]{1,0} add(%multiply.2149, %broadcast.5381)
  %rsqrt.83 = f32[1,4096]{1,0} rsqrt(%add.2788)
  %broadcast.5936 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.83), dimensions={0,1}
  %multiply.2150 = f32[1,4096,4096]{2,1,0} multiply(%convert.816, %broadcast.5936)
  %convert.817 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2150)
  %param.102 = bf16[4096]{0} parameter(316), sharding={replicated}
  %broadcast.5937 = bf16[1,4096,4096]{2,1,0} broadcast(%param.102), dimensions={2}
  %multiply.2151 = bf16[1,4096,4096]{2,1,0} multiply(%convert.817, %broadcast.5937)
  %copy.2376 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2151)
  %param.103 = bf16[512,8]{1,0} parameter(312), sharding={devices=[8,1]<=[8]}
  %all-gather.68 = bf16[4096,8]{1,0} all-gather(%param.103), channel_id=141, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.257 = bf16[1,4096,8]{2,1,0} dot(%copy.2376, %all-gather.68), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2377 = bf16[1,4096,8]{2,1,0} copy(%dot.257)
  %reshape.12390 = bf16[4096,8]{1,0} reshape(%copy.2377)
  %custom-call.82 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.12390), custom_call_target="TopK", called_computations={%compare-greater-than.9.clone}
  %get-tuple-element.388 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.82), index=0
  %get-tuple-element.389 = s32[4096,2]{1,0} get-tuple-element(%custom-call.82), index=1
  %add.2789 = s32[4096,2]{1,0} add(%get-tuple-element.389, %broadcast.5420)
  %sort.93 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.388, %add.2789), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.8
  %get-tuple-element.391 = s32[4096,2]{1,0} get-tuple-element(%sort.93), index=1
  %slice.206 = s32[4096,2]{1,0} slice(%get-tuple-element.391), slice={[0:4096], [0:2]}
  %all-gather.70 = s32[32768,2]{1,0} all-gather(%slice.206), channel_id=143, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.293 = s32[4096,2]{1,0} dynamic-slice(%all-gather.70, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.12394 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.293)
  %compare.1079 = pred[1,4096,2]{2,1,0} compare(%reshape.12394, %broadcast.5421), direction=LT
  %add.2790 = s32[1,4096,2]{2,1,0} add(%reshape.12394, %broadcast.5422)
  %select.563 = s32[1,4096,2]{2,1,0} select(%compare.1079, %add.2790, %reshape.12394)
  %reshape.12395 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.563)
  %concatenate.56 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1596, %reshape.12395), dimensions={3}
  %subtract.144 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.56, %broadcast.5433)
  %scatter.110 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.144, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_107.4189
  %gather.9 = u32[1,4096,2]{2,1,0} gather(%scatter.110, %subtract.144), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1080 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.9), direction=EQ
  %get-tuple-element.390 = bf16[4096,2]{1,0} get-tuple-element(%sort.93), index=0
  %slice.205 = bf16[4096,2]{1,0} slice(%get-tuple-element.390), slice={[0:4096], [0:2]}
  %all-gather.69 = bf16[32768,2]{1,0} all-gather(%slice.205), channel_id=142, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.303 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.69, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.820 = f32[4096,2]{1,0} convert(%dynamic-slice.303)
  %reshape.12415 = f32[1,4096,2]{2,1,0} reshape(%convert.820)
  %reduce.278 = f32[4096]{0} reduce(%convert.820, %constant.4073), dimensions={1}, to_apply=%region_105.4141
  %reshape.12416 = f32[1,4096]{1,0} reshape(%reduce.278)
  %broadcast.5944 = f32[1,4096,2]{2,1,0} broadcast(%reshape.12416), dimensions={0,1}
  %subtract.143 = f32[1,4096,2]{2,1,0} subtract(%reshape.12415, %broadcast.5944)
  %exponential.144 = f32[1,4096,2]{2,1,0} exponential(%subtract.143)
  %reduce.279 = f32[1,4096]{1,0} reduce(%exponential.144, %constant.3956), dimensions={2}, to_apply=%region_106.4153
  %broadcast.5946 = f32[1,4096,2]{2,1,0} broadcast(%reduce.279), dimensions={0,1}
  %divide.539 = f32[1,4096,2]{2,1,0} divide(%exponential.144, %broadcast.5946)
  %convert.821 = bf16[1,4096,2]{2,1,0} convert(%divide.539)
  %select.564 = bf16[1,4096,2]{2,1,0} select(%compare.1080, %convert.821, %broadcast.5432)
  %scatter.112 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.144, %select.564), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_108.4197
  %broadcast.5949 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.12394), dimensions={0,1,2}
  %iota.1706 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1081 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.5949, %iota.1706), direction=EQ
  %convert.822 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1081)
  %reshape.12427 = s32[1,8192,8]{2,1,0} reshape(%convert.822)
  %copy.2378 = s32[1,8192,8]{2,1,0} copy(%reshape.12427)
  %reduce-window.220 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2378, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.9
  %reshape.12430 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.220)
  %copy.2379 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12430)
  %compare.1082 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2379, %broadcast.5435), direction=LE
  %select.565 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1082, %convert.822, %broadcast.5436)
  %reduce.280 = s32[1,4096,8]{2,1,0} reduce(%select.565, %constant.3783), dimensions={2}, to_apply=%region_109.4211
  %convert.823 = bf16[1,4096,8]{2,1,0} convert(%reduce.280)
  %multiply.2158 = bf16[1,4096,8]{2,1,0} multiply(%scatter.112, %convert.823)
  %broadcast.5952 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2158), dimensions={0,1,2}
  %multiply.2159 = s32[1,8192,8]{2,1,0} multiply(%copy.2378, %reduce-window.220)
  %reshape.12431 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2159)
  %reduce.281 = s32[1,4096,8]{2,1,0} reduce(%reshape.12431, %constant.3783), dimensions={2}, to_apply=%region_110.4220
  %multiply.2160 = s32[1,4096,8]{2,1,0} multiply(%reduce.281, %reduce.280)
  %broadcast.5954 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2160), dimensions={0,1,2}
  %iota.1707 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1083 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.5954, %iota.1707), direction=EQ
  %convert.824 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1083)
  %convert.825 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.824)
  %multiply.2161 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.5952, %convert.825)
  %slice.207 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2161), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2380 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.207)
  %compare.1084 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.207, %broadcast.5439), direction=NE
  %copy.2381 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1084)
  %convert.826 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2381)
  %dot.258 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.826, %copy.2376), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12435 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.258)
  %all-to-all.18 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12435), channel_id=150, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.27 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.18), dimensions={1,0,2,3,4}
  %reshape.12436 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.27)
  %transpose.28 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12436), dimensions={1,0,2,3}
  %copy.2382 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.28)
  %param.104 = bf16[1,4096,14336]{2,1,0} parameter(313), sharding={devices=[8,1,1]<=[8]}
  %copy.2383 = bf16[1,4096,14336]{2,1,0} copy(%param.104)
  %dot.259 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2382, %copy.2383), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2384 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.259)
  %negate.168 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2384)
  %exponential.145 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.168)
  %add.2795 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.145, %broadcast.5440)
  %divide.540 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2795)
  %multiply.2165 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2384, %divide.540)
  %param.105 = bf16[1,4096,14336]{2,1,0} parameter(314), sharding={devices=[8,1,1]<=[8]}
  %copy.2385 = bf16[1,4096,14336]{2,1,0} copy(%param.105)
  %dot.260 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2382, %copy.2385), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2386 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.260)
  %multiply.2166 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2165, %copy.2386)
  %param.106 = bf16[1,14336,4096]{2,1,0} parameter(315), sharding={devices=[8,1,1]<=[8]}
  %copy.2387 = bf16[1,14336,4096]{2,1,0} copy(%param.106)
  %dot.261 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2166, %copy.2387), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2388 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.261)
  %reshape.12439 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2388)
  %all-to-all.19 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12439), channel_id=151, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.29 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.19), dimensions={1,0,2,3,4}
  %reshape.12442 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.29)
  %dot.262 = bf16[1,4096,4096]{2,1,0} dot(%copy.2380, %reshape.12442), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2389 = bf16[1,4096,4096]{2,1,0} copy(%dot.262)
  %add.2796 = bf16[1,4096,4096]{2,1,0} add(%copy.2389, %add.2787)
  %copy.2390 = bf16[1,4096,4096]{2,1,0} copy(%add.2796)
  %copy.2391 = bf16[1,4096,4096]{2,1,0} copy(%copy.2390)
  %convert.827 = f32[1,4096,4096]{2,1,0} convert(%copy.2391)
  %multiply.2169 = f32[1,4096,4096]{2,1,0} multiply(%convert.827, %convert.827)
  %reduce.282 = f32[1,4096]{1,0} reduce(%multiply.2169, %constant.3956), dimensions={2}, to_apply=%region_111.4259
  %multiply.2170 = f32[1,4096]{1,0} multiply(%reduce.282, %broadcast.5380)
  %add.2797 = f32[1,4096]{1,0} add(%multiply.2170, %broadcast.5381)
  %rsqrt.84 = f32[1,4096]{1,0} rsqrt(%add.2797)
  %broadcast.5958 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.84), dimensions={0,1}
  %multiply.2171 = f32[1,4096,4096]{2,1,0} multiply(%convert.827, %broadcast.5958)
  %convert.828 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2171)
  %param.107 = bf16[4096]{0} parameter(27), sharding={replicated}
  %broadcast.5959 = bf16[1,4096,4096]{2,1,0} broadcast(%param.107), dimensions={2}
  %multiply.2172 = bf16[1,4096,4096]{2,1,0} multiply(%convert.828, %broadcast.5959)
  %copy.2392 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2172)
  %copy.2393 = bf16[1,4096,4096]{2,1,0} copy(%copy.2392)
  %param.108 = bf16[512,32,128]{2,1,0} parameter(30), sharding={devices=[8,1,1]<=[8]}
  %all-gather.71 = bf16[4096,32,128]{2,1,0} all-gather(%param.108), channel_id=152, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.263 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2393, %all-gather.71), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.208 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.263), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2176 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.208, %broadcast.5389)
  %slice.209 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.263), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2179 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.209, %broadcast.5391)
  %subtract.145 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2176, %multiply.2179)
  %multiply.2180 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.209, %broadcast.5389)
  %multiply.2182 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.208, %broadcast.5391)
  %add.2798 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2180, %multiply.2182)
  %concatenate.60 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.145, %add.2798), dimensions={3}
  %copy.2394 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.60)
  %param.109 = bf16[512,8,128]{2,1,0} parameter(28), sharding={devices=[8,1,1]<=[8]}
  %all-gather.72 = bf16[4096,8,128]{2,1,0} all-gather(%param.109), channel_id=153, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.264 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2393, %all-gather.72), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.210 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.264), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2187 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.210, %broadcast.5400)
  %slice.211 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.264), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2189 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.211, %broadcast.5401)
  %subtract.146 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2187, %multiply.2189)
  %multiply.2191 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.211, %broadcast.5400)
  %multiply.2192 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.210, %broadcast.5401)
  %add.2800 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2191, %multiply.2192)
  %concatenate.61 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.146, %add.2800), dimensions={3}
  %copy.2396 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.61)
  %param.110 = bf16[512,8,128]{2,1,0} parameter(31), sharding={devices=[8,1,1]<=[8]}
  %all-gather.73 = bf16[4096,8,128]{2,1,0} all-gather(%param.110), channel_id=154, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.265 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2393, %all-gather.73), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2397 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.265)
  %custom-call.83 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2394, %copy.2396, %copy.2397, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.401 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.83), index=0
  %copy.2398 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.401)
  %param.111 = bf16[32,128,512]{2,1,0} parameter(29), sharding={devices=[1,1,8]<=[8]}
  %all-gather.74 = bf16[32,128,4096]{2,1,0} all-gather(%param.111), channel_id=155, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.266 = bf16[1,4096,4096]{2,1,0} dot(%copy.2398, %all-gather.74), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2399 = bf16[1,4096,4096]{2,1,0} copy(%dot.266)
  %add.2813 = bf16[1,4096,4096]{2,1,0} add(%copy.2391, %copy.2399)
  %convert.841 = f32[1,4096,4096]{2,1,0} convert(%add.2813)
  %multiply.2194 = f32[1,4096,4096]{2,1,0} multiply(%convert.841, %convert.841)
  %reduce.286 = f32[1,4096]{1,0} reduce(%multiply.2194, %constant.3956), dimensions={2}, to_apply=%region_115.4419
  %multiply.2196 = f32[1,4096]{1,0} multiply(%reduce.286, %broadcast.5380)
  %add.2814 = f32[1,4096]{1,0} add(%multiply.2196, %broadcast.5381)
  %rsqrt.85 = f32[1,4096]{1,0} rsqrt(%add.2814)
  %broadcast.5991 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.85), dimensions={0,1}
  %multiply.2197 = f32[1,4096,4096]{2,1,0} multiply(%convert.841, %broadcast.5991)
  %convert.842 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2197)
  %param.112 = bf16[4096]{0} parameter(26), sharding={replicated}
  %broadcast.5992 = bf16[1,4096,4096]{2,1,0} broadcast(%param.112), dimensions={2}
  %multiply.2198 = bf16[1,4096,4096]{2,1,0} multiply(%convert.842, %broadcast.5992)
  %copy.2400 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2198)
  %param.113 = bf16[512,8]{1,0} parameter(22), sharding={devices=[8,1]<=[8]}
  %all-gather.75 = bf16[4096,8]{1,0} all-gather(%param.113), channel_id=156, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.267 = bf16[1,4096,8]{2,1,0} dot(%copy.2400, %all-gather.75), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2401 = bf16[1,4096,8]{2,1,0} copy(%dot.267)
  %reshape.12496 = bf16[4096,8]{1,0} reshape(%copy.2401)
  %custom-call.84 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.12496), custom_call_target="TopK", called_computations={%compare-greater-than.10.clone}
  %get-tuple-element.402 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.84), index=0
  %get-tuple-element.403 = s32[4096,2]{1,0} get-tuple-element(%custom-call.84), index=1
  %add.2815 = s32[4096,2]{1,0} add(%get-tuple-element.403, %broadcast.5420)
  %sort.96 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.402, %add.2815), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.10
  %get-tuple-element.405 = s32[4096,2]{1,0} get-tuple-element(%sort.96), index=1
  %slice.214 = s32[4096,2]{1,0} slice(%get-tuple-element.405), slice={[0:4096], [0:2]}
  %all-gather.77 = s32[32768,2]{1,0} all-gather(%slice.214), channel_id=158, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.321 = s32[4096,2]{1,0} dynamic-slice(%all-gather.77, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.12500 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.321)
  %compare.1114 = pred[1,4096,2]{2,1,0} compare(%reshape.12500, %broadcast.5421), direction=LT
  %add.2816 = s32[1,4096,2]{2,1,0} add(%reshape.12500, %broadcast.5422)
  %select.587 = s32[1,4096,2]{2,1,0} select(%compare.1114, %add.2816, %reshape.12500)
  %reshape.12501 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.587)
  %concatenate.62 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1594, %reshape.12501), dimensions={3}
  %subtract.152 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.62, %broadcast.5433)
  %scatter.123 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.152, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_118.4493
  %gather.10 = u32[1,4096,2]{2,1,0} gather(%scatter.123, %subtract.152), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1115 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.10), direction=EQ
  %get-tuple-element.404 = bf16[4096,2]{1,0} get-tuple-element(%sort.96), index=0
  %slice.213 = bf16[4096,2]{1,0} slice(%get-tuple-element.404), slice={[0:4096], [0:2]}
  %all-gather.76 = bf16[32768,2]{1,0} all-gather(%slice.213), channel_id=157, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.331 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.76, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.845 = f32[4096,2]{1,0} convert(%dynamic-slice.331)
  %reshape.12521 = f32[1,4096,2]{2,1,0} reshape(%convert.845)
  %reduce.287 = f32[4096]{0} reduce(%convert.845, %constant.4073), dimensions={1}, to_apply=%region_116.4445
  %reshape.12522 = f32[1,4096]{1,0} reshape(%reduce.287)
  %broadcast.6002 = f32[1,4096,2]{2,1,0} broadcast(%reshape.12522), dimensions={0,1}
  %subtract.151 = f32[1,4096,2]{2,1,0} subtract(%reshape.12521, %broadcast.6002)
  %exponential.146 = f32[1,4096,2]{2,1,0} exponential(%subtract.151)
  %reduce.288 = f32[1,4096]{1,0} reduce(%exponential.146, %constant.3956), dimensions={2}, to_apply=%region_117.4457
  %broadcast.6004 = f32[1,4096,2]{2,1,0} broadcast(%reduce.288), dimensions={0,1}
  %divide.545 = f32[1,4096,2]{2,1,0} divide(%exponential.146, %broadcast.6004)
  %convert.846 = bf16[1,4096,2]{2,1,0} convert(%divide.545)
  %select.588 = bf16[1,4096,2]{2,1,0} select(%compare.1115, %convert.846, %broadcast.5432)
  %scatter.124 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.152, %select.588), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_119.4501
  %broadcast.6006 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.12500), dimensions={0,1,2}
  %iota.1715 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1116 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6006, %iota.1715), direction=EQ
  %convert.847 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1116)
  %reshape.12533 = s32[1,8192,8]{2,1,0} reshape(%convert.847)
  %copy.2402 = s32[1,8192,8]{2,1,0} copy(%reshape.12533)
  %reduce-window.223 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2402, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.10
  %reshape.12535 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.223)
  %copy.2403 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12535)
  %compare.1117 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2403, %broadcast.5435), direction=LE
  %select.589 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1117, %convert.847, %broadcast.5436)
  %reduce.289 = s32[1,4096,8]{2,1,0} reduce(%select.589, %constant.3783), dimensions={2}, to_apply=%region_120.4515
  %convert.848 = bf16[1,4096,8]{2,1,0} convert(%reduce.289)
  %multiply.2204 = bf16[1,4096,8]{2,1,0} multiply(%scatter.124, %convert.848)
  %broadcast.6008 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2204), dimensions={0,1,2}
  %multiply.2205 = s32[1,8192,8]{2,1,0} multiply(%copy.2402, %reduce-window.223)
  %reshape.12536 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2205)
  %reduce.290 = s32[1,4096,8]{2,1,0} reduce(%reshape.12536, %constant.3783), dimensions={2}, to_apply=%region_121.4524
  %multiply.2206 = s32[1,4096,8]{2,1,0} multiply(%reduce.290, %reduce.289)
  %broadcast.6009 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2206), dimensions={0,1,2}
  %iota.1716 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1118 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6009, %iota.1716), direction=EQ
  %convert.849 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1118)
  %convert.850 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.849)
  %multiply.2207 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6008, %convert.850)
  %slice.215 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2207), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2404 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.215)
  %compare.1119 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.215, %broadcast.5439), direction=NE
  %copy.2405 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1119)
  %convert.851 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2405)
  %dot.268 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.851, %copy.2400), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12540 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.268)
  %all-to-all.20 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12540), channel_id=165, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.30 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.20), dimensions={1,0,2,3,4}
  %reshape.12542 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.30)
  %transpose.31 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12542), dimensions={1,0,2,3}
  %copy.2406 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.31)
  %param.114 = bf16[1,4096,14336]{2,1,0} parameter(23), sharding={devices=[8,1,1]<=[8]}
  %copy.2407 = bf16[1,4096,14336]{2,1,0} copy(%param.114)
  %dot.269 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2406, %copy.2407), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2408 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.269)
  %negate.169 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2408)
  %exponential.147 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.169)
  %add.2821 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.147, %broadcast.5440)
  %divide.546 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2821)
  %multiply.2211 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2408, %divide.546)
  %param.115 = bf16[1,4096,14336]{2,1,0} parameter(24), sharding={devices=[8,1,1]<=[8]}
  %copy.2409 = bf16[1,4096,14336]{2,1,0} copy(%param.115)
  %dot.270 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2406, %copy.2409), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2410 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.270)
  %multiply.2212 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2211, %copy.2410)
  %param.116 = bf16[1,14336,4096]{2,1,0} parameter(25), sharding={devices=[8,1,1]<=[8]}
  %copy.2411 = bf16[1,14336,4096]{2,1,0} copy(%param.116)
  %dot.271 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2212, %copy.2411), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2412 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.271)
  %reshape.12545 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2412)
  %all-to-all.21 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12545), channel_id=166, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.32 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.21), dimensions={1,0,2,3,4}
  %reshape.12546 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.32)
  %dot.272 = bf16[1,4096,4096]{2,1,0} dot(%copy.2404, %reshape.12546), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2413 = bf16[1,4096,4096]{2,1,0} copy(%dot.272)
  %add.2822 = bf16[1,4096,4096]{2,1,0} add(%copy.2413, %add.2813)
  %copy.2414 = bf16[1,4096,4096]{2,1,0} copy(%add.2822)
  %copy.2415 = bf16[1,4096,4096]{2,1,0} copy(%copy.2414)
  %convert.852 = f32[1,4096,4096]{2,1,0} convert(%copy.2415)
  %multiply.2215 = f32[1,4096,4096]{2,1,0} multiply(%convert.852, %convert.852)
  %reduce.291 = f32[1,4096]{1,0} reduce(%multiply.2215, %constant.3956), dimensions={2}, to_apply=%region_122.4563
  %multiply.2216 = f32[1,4096]{1,0} multiply(%reduce.291, %broadcast.5380)
  %add.2823 = f32[1,4096]{1,0} add(%multiply.2216, %broadcast.5381)
  %rsqrt.86 = f32[1,4096]{1,0} rsqrt(%add.2823)
  %broadcast.6013 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.86), dimensions={0,1}
  %multiply.2218 = f32[1,4096,4096]{2,1,0} multiply(%convert.852, %broadcast.6013)
  %convert.853 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2218)
  %param.117 = bf16[4096]{0} parameter(37), sharding={replicated}
  %broadcast.6014 = bf16[1,4096,4096]{2,1,0} broadcast(%param.117), dimensions={2}
  %multiply.2219 = bf16[1,4096,4096]{2,1,0} multiply(%convert.853, %broadcast.6014)
  %copy.2416 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2219)
  %copy.2417 = bf16[1,4096,4096]{2,1,0} copy(%copy.2416)
  %param.118 = bf16[512,32,128]{2,1,0} parameter(40), sharding={devices=[8,1,1]<=[8]}
  %all-gather.78 = bf16[4096,32,128]{2,1,0} all-gather(%param.118), channel_id=167, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.273 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2417, %all-gather.78), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.216 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.273), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2224 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.216, %broadcast.5389)
  %slice.217 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.273), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2227 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.217, %broadcast.5391)
  %subtract.153 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2224, %multiply.2227)
  %multiply.2228 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.217, %broadcast.5389)
  %multiply.2229 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.216, %broadcast.5391)
  %add.2824 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2228, %multiply.2229)
  %concatenate.66 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.153, %add.2824), dimensions={3}
  %copy.2418 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.66)
  %param.119 = bf16[512,8,128]{2,1,0} parameter(38), sharding={devices=[8,1,1]<=[8]}
  %all-gather.79 = bf16[4096,8,128]{2,1,0} all-gather(%param.119), channel_id=168, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.274 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2417, %all-gather.79), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.218 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.274), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2234 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.218, %broadcast.5400)
  %slice.219 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.274), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2236 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.219, %broadcast.5401)
  %subtract.154 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2234, %multiply.2236)
  %multiply.2237 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.219, %broadcast.5400)
  %multiply.2238 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.218, %broadcast.5401)
  %add.2825 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2237, %multiply.2238)
  %concatenate.67 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.154, %add.2825), dimensions={3}
  %copy.2420 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.67)
  %param.120 = bf16[512,8,128]{2,1,0} parameter(41), sharding={devices=[8,1,1]<=[8]}
  %all-gather.80 = bf16[4096,8,128]{2,1,0} all-gather(%param.120), channel_id=169, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.275 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2417, %all-gather.80), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2421 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.275)
  %custom-call.85 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2418, %copy.2420, %copy.2421, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.415 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.85), index=0
  %copy.2422 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.415)
  %param.121 = bf16[32,128,512]{2,1,0} parameter(39), sharding={devices=[1,1,8]<=[8]}
  %all-gather.81 = bf16[32,128,4096]{2,1,0} all-gather(%param.121), channel_id=170, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.276 = bf16[1,4096,4096]{2,1,0} dot(%copy.2422, %all-gather.81), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2423 = bf16[1,4096,4096]{2,1,0} copy(%dot.276)
  %add.2838 = bf16[1,4096,4096]{2,1,0} add(%copy.2415, %copy.2423)
  %convert.866 = f32[1,4096,4096]{2,1,0} convert(%add.2838)
  %multiply.2240 = f32[1,4096,4096]{2,1,0} multiply(%convert.866, %convert.866)
  %reduce.295 = f32[1,4096]{1,0} reduce(%multiply.2240, %constant.3956), dimensions={2}, to_apply=%region_126.4723
  %multiply.2241 = f32[1,4096]{1,0} multiply(%reduce.295, %broadcast.5380)
  %add.2840 = f32[1,4096]{1,0} add(%multiply.2241, %broadcast.5381)
  %rsqrt.87 = f32[1,4096]{1,0} rsqrt(%add.2840)
  %broadcast.6042 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.87), dimensions={0,1}
  %multiply.2242 = f32[1,4096,4096]{2,1,0} multiply(%convert.866, %broadcast.6042)
  %convert.867 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2242)
  %param.122 = bf16[4096]{0} parameter(36), sharding={replicated}
  %broadcast.6043 = bf16[1,4096,4096]{2,1,0} broadcast(%param.122), dimensions={2}
  %multiply.2243 = bf16[1,4096,4096]{2,1,0} multiply(%convert.867, %broadcast.6043)
  %copy.2424 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2243)
  %param.123 = bf16[512,8]{1,0} parameter(32), sharding={devices=[8,1]<=[8]}
  %all-gather.82 = bf16[4096,8]{1,0} all-gather(%param.123), channel_id=171, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.277 = bf16[1,4096,8]{2,1,0} dot(%copy.2424, %all-gather.82), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2425 = bf16[1,4096,8]{2,1,0} copy(%dot.277)
  %reshape.12605 = bf16[4096,8]{1,0} reshape(%copy.2425)
  %custom-call.86 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.12605), custom_call_target="TopK", called_computations={%compare-greater-than.11.clone}
  %get-tuple-element.416 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.86), index=0
  %get-tuple-element.417 = s32[4096,2]{1,0} get-tuple-element(%custom-call.86), index=1
  %add.2841 = s32[4096,2]{1,0} add(%get-tuple-element.417, %broadcast.5420)
  %sort.99 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.416, %add.2841), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.11
  %get-tuple-element.419 = s32[4096,2]{1,0} get-tuple-element(%sort.99), index=1
  %slice.222 = s32[4096,2]{1,0} slice(%get-tuple-element.419), slice={[0:4096], [0:2]}
  %all-gather.84 = s32[32768,2]{1,0} all-gather(%slice.222), channel_id=173, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.349 = s32[4096,2]{1,0} dynamic-slice(%all-gather.84, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.12608 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.349)
  %compare.1149 = pred[1,4096,2]{2,1,0} compare(%reshape.12608, %broadcast.5421), direction=LT
  %add.2842 = s32[1,4096,2]{2,1,0} add(%reshape.12608, %broadcast.5422)
  %select.611 = s32[1,4096,2]{2,1,0} select(%compare.1149, %add.2842, %reshape.12608)
  %reshape.12609 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.611)
  %concatenate.68 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1592, %reshape.12609), dimensions={3}
  %subtract.160 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.68, %broadcast.5433)
  %scatter.135 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.160, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_129.4797
  %gather.11 = u32[1,4096,2]{2,1,0} gather(%scatter.135, %subtract.160), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1150 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.11), direction=EQ
  %get-tuple-element.418 = bf16[4096,2]{1,0} get-tuple-element(%sort.99), index=0
  %slice.221 = bf16[4096,2]{1,0} slice(%get-tuple-element.418), slice={[0:4096], [0:2]}
  %all-gather.83 = bf16[32768,2]{1,0} all-gather(%slice.221), channel_id=172, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.359 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.83, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.870 = f32[4096,2]{1,0} convert(%dynamic-slice.359)
  %reshape.12627 = f32[1,4096,2]{2,1,0} reshape(%convert.870)
  %reduce.296 = f32[4096]{0} reduce(%convert.870, %constant.4073), dimensions={1}, to_apply=%region_127.4749
  %reshape.12628 = f32[1,4096]{1,0} reshape(%reduce.296)
  %broadcast.6051 = f32[1,4096,2]{2,1,0} broadcast(%reshape.12628), dimensions={0,1}
  %subtract.159 = f32[1,4096,2]{2,1,0} subtract(%reshape.12627, %broadcast.6051)
  %exponential.148 = f32[1,4096,2]{2,1,0} exponential(%subtract.159)
  %reduce.297 = f32[1,4096]{1,0} reduce(%exponential.148, %constant.3956), dimensions={2}, to_apply=%region_128.4761
  %broadcast.6053 = f32[1,4096,2]{2,1,0} broadcast(%reduce.297), dimensions={0,1}
  %divide.551 = f32[1,4096,2]{2,1,0} divide(%exponential.148, %broadcast.6053)
  %convert.871 = bf16[1,4096,2]{2,1,0} convert(%divide.551)
  %select.612 = bf16[1,4096,2]{2,1,0} select(%compare.1150, %convert.871, %broadcast.5432)
  %scatter.136 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.160, %select.612), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_130.4805
  %broadcast.6055 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.12608), dimensions={0,1,2}
  %iota.1724 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1151 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6055, %iota.1724), direction=EQ
  %convert.872 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1151)
  %reshape.12637 = s32[1,8192,8]{2,1,0} reshape(%convert.872)
  %copy.2426 = s32[1,8192,8]{2,1,0} copy(%reshape.12637)
  %reduce-window.226 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2426, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.11
  %reshape.12639 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.226)
  %copy.2427 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12639)
  %compare.1152 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2427, %broadcast.5435), direction=LE
  %select.613 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1152, %convert.872, %broadcast.5436)
  %reduce.298 = s32[1,4096,8]{2,1,0} reduce(%select.613, %constant.3783), dimensions={2}, to_apply=%region_131.4819
  %convert.873 = bf16[1,4096,8]{2,1,0} convert(%reduce.298)
  %multiply.2249 = bf16[1,4096,8]{2,1,0} multiply(%scatter.136, %convert.873)
  %broadcast.6057 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2249), dimensions={0,1,2}
  %multiply.2250 = s32[1,8192,8]{2,1,0} multiply(%copy.2426, %reduce-window.226)
  %reshape.12640 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2250)
  %reduce.299 = s32[1,4096,8]{2,1,0} reduce(%reshape.12640, %constant.3783), dimensions={2}, to_apply=%region_132.4828
  %multiply.2251 = s32[1,4096,8]{2,1,0} multiply(%reduce.299, %reduce.298)
  %broadcast.6058 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2251), dimensions={0,1,2}
  %iota.1725 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1153 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6058, %iota.1725), direction=EQ
  %convert.874 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1153)
  %convert.875 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.874)
  %multiply.2252 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6057, %convert.875)
  %slice.223 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2252), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2428 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.223)
  %compare.1154 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.223, %broadcast.5439), direction=NE
  %copy.2429 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1154)
  %convert.876 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2429)
  %dot.278 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.876, %copy.2424), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12643 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.278)
  %all-to-all.22 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12643), channel_id=180, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.33 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.22), dimensions={1,0,2,3,4}
  %reshape.12644 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.33)
  %transpose.34 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12644), dimensions={1,0,2,3}
  %copy.2430 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.34)
  %param.124 = bf16[1,4096,14336]{2,1,0} parameter(33), sharding={devices=[8,1,1]<=[8]}
  %copy.2431 = bf16[1,4096,14336]{2,1,0} copy(%param.124)
  %dot.279 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2430, %copy.2431), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2432 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.279)
  %negate.170 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2432)
  %exponential.149 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.170)
  %add.2847 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.149, %broadcast.5440)
  %divide.552 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2847)
  %multiply.2256 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2432, %divide.552)
  %param.125 = bf16[1,4096,14336]{2,1,0} parameter(34), sharding={devices=[8,1,1]<=[8]}
  %copy.2433 = bf16[1,4096,14336]{2,1,0} copy(%param.125)
  %dot.280 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2430, %copy.2433), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2434 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.280)
  %multiply.2257 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2256, %copy.2434)
  %param.126 = bf16[1,14336,4096]{2,1,0} parameter(35), sharding={devices=[8,1,1]<=[8]}
  %copy.2435 = bf16[1,14336,4096]{2,1,0} copy(%param.126)
  %dot.281 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2257, %copy.2435), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2436 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.281)
  %reshape.12647 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2436)
  %all-to-all.23 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12647), channel_id=181, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.35 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.23), dimensions={1,0,2,3,4}
  %reshape.12648 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.35)
  %dot.282 = bf16[1,4096,4096]{2,1,0} dot(%copy.2428, %reshape.12648), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2437 = bf16[1,4096,4096]{2,1,0} copy(%dot.282)
  %add.2848 = bf16[1,4096,4096]{2,1,0} add(%copy.2437, %add.2838)
  %copy.2438 = bf16[1,4096,4096]{2,1,0} copy(%add.2848)
  %copy.2439 = bf16[1,4096,4096]{2,1,0} copy(%copy.2438)
  %convert.877 = f32[1,4096,4096]{2,1,0} convert(%copy.2439)
  %multiply.2260 = f32[1,4096,4096]{2,1,0} multiply(%convert.877, %convert.877)
  %reduce.300 = f32[1,4096]{1,0} reduce(%multiply.2260, %constant.3956), dimensions={2}, to_apply=%region_133.4867
  %multiply.2261 = f32[1,4096]{1,0} multiply(%reduce.300, %broadcast.5380)
  %add.2849 = f32[1,4096]{1,0} add(%multiply.2261, %broadcast.5381)
  %rsqrt.88 = f32[1,4096]{1,0} rsqrt(%add.2849)
  %broadcast.6062 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.88), dimensions={0,1}
  %multiply.2262 = f32[1,4096,4096]{2,1,0} multiply(%convert.877, %broadcast.6062)
  %convert.878 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2262)
  %param.127 = bf16[4096]{0} parameter(47), sharding={replicated}
  %broadcast.6063 = bf16[1,4096,4096]{2,1,0} broadcast(%param.127), dimensions={2}
  %multiply.2263 = bf16[1,4096,4096]{2,1,0} multiply(%convert.878, %broadcast.6063)
  %copy.2440 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2263)
  %copy.2441 = bf16[1,4096,4096]{2,1,0} copy(%copy.2440)
  %param.128 = bf16[512,32,128]{2,1,0} parameter(50), sharding={devices=[8,1,1]<=[8]}
  %all-gather.85 = bf16[4096,32,128]{2,1,0} all-gather(%param.128), channel_id=182, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.283 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2441, %all-gather.85), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.224 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.283), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2267 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.224, %broadcast.5389)
  %slice.225 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.283), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2269 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.225, %broadcast.5391)
  %subtract.161 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2267, %multiply.2269)
  %multiply.2270 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.225, %broadcast.5389)
  %multiply.2271 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.224, %broadcast.5391)
  %add.2850 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2270, %multiply.2271)
  %concatenate.72 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.161, %add.2850), dimensions={3}
  %copy.2442 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.72)
  %param.129 = bf16[512,8,128]{2,1,0} parameter(48), sharding={devices=[8,1,1]<=[8]}
  %all-gather.86 = bf16[4096,8,128]{2,1,0} all-gather(%param.129), channel_id=183, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.284 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2441, %all-gather.86), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.226 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.284), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2275 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.226, %broadcast.5400)
  %slice.227 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.284), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2277 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.227, %broadcast.5401)
  %subtract.162 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2275, %multiply.2277)
  %multiply.2278 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.227, %broadcast.5400)
  %multiply.2279 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.226, %broadcast.5401)
  %add.2851 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2278, %multiply.2279)
  %concatenate.73 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.162, %add.2851), dimensions={3}
  %copy.2444 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.73)
  %param.130 = bf16[512,8,128]{2,1,0} parameter(51), sharding={devices=[8,1,1]<=[8]}
  %all-gather.87 = bf16[4096,8,128]{2,1,0} all-gather(%param.130), channel_id=184, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.285 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2441, %all-gather.87), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2445 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.285)
  %custom-call.87 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2442, %copy.2444, %copy.2445, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.429 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.87), index=0
  %copy.2446 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.429)
  %param.131 = bf16[32,128,512]{2,1,0} parameter(49), sharding={devices=[1,1,8]<=[8]}
  %all-gather.88 = bf16[32,128,4096]{2,1,0} all-gather(%param.131), channel_id=185, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.286 = bf16[1,4096,4096]{2,1,0} dot(%copy.2446, %all-gather.88), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2447 = bf16[1,4096,4096]{2,1,0} copy(%dot.286)
  %add.2864 = bf16[1,4096,4096]{2,1,0} add(%copy.2439, %copy.2447)
  %convert.891 = f32[1,4096,4096]{2,1,0} convert(%add.2864)
  %multiply.2281 = f32[1,4096,4096]{2,1,0} multiply(%convert.891, %convert.891)
  %reduce.304 = f32[1,4096]{1,0} reduce(%multiply.2281, %constant.3956), dimensions={2}, to_apply=%region_137.5027
  %multiply.2282 = f32[1,4096]{1,0} multiply(%reduce.304, %broadcast.5380)
  %add.2865 = f32[1,4096]{1,0} add(%multiply.2282, %broadcast.5381)
  %rsqrt.89 = f32[1,4096]{1,0} rsqrt(%add.2865)
  %broadcast.6093 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.89), dimensions={0,1}
  %multiply.2283 = f32[1,4096,4096]{2,1,0} multiply(%convert.891, %broadcast.6093)
  %convert.892 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2283)
  %param.132 = bf16[4096]{0} parameter(46), sharding={replicated}
  %broadcast.6094 = bf16[1,4096,4096]{2,1,0} broadcast(%param.132), dimensions={2}
  %multiply.2284 = bf16[1,4096,4096]{2,1,0} multiply(%convert.892, %broadcast.6094)
  %copy.2448 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2284)
  %param.133 = bf16[512,8]{1,0} parameter(42), sharding={devices=[8,1]<=[8]}
  %all-gather.89 = bf16[4096,8]{1,0} all-gather(%param.133), channel_id=186, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.287 = bf16[1,4096,8]{2,1,0} dot(%copy.2448, %all-gather.89), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2449 = bf16[1,4096,8]{2,1,0} copy(%dot.287)
  %reshape.12698 = bf16[4096,8]{1,0} reshape(%copy.2449)
  %custom-call.88 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.12698), custom_call_target="TopK", called_computations={%compare-greater-than.12.clone}
  %get-tuple-element.430 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.88), index=0
  %get-tuple-element.431 = s32[4096,2]{1,0} get-tuple-element(%custom-call.88), index=1
  %add.2866 = s32[4096,2]{1,0} add(%get-tuple-element.431, %broadcast.5420)
  %sort.102 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.430, %add.2866), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.12
  %get-tuple-element.433 = s32[4096,2]{1,0} get-tuple-element(%sort.102), index=1
  %slice.230 = s32[4096,2]{1,0} slice(%get-tuple-element.433), slice={[0:4096], [0:2]}
  %all-gather.91 = s32[32768,2]{1,0} all-gather(%slice.230), channel_id=188, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.377 = s32[4096,2]{1,0} dynamic-slice(%all-gather.91, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.12702 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.377)
  %compare.1185 = pred[1,4096,2]{2,1,0} compare(%reshape.12702, %broadcast.5421), direction=LT
  %add.2867 = s32[1,4096,2]{2,1,0} add(%reshape.12702, %broadcast.5422)
  %select.635 = s32[1,4096,2]{2,1,0} select(%compare.1185, %add.2867, %reshape.12702)
  %reshape.12703 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.635)
  %concatenate.74 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1590, %reshape.12703), dimensions={3}
  %subtract.168 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.74, %broadcast.5433)
  %scatter.147 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.168, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_140.5101
  %gather.12 = u32[1,4096,2]{2,1,0} gather(%scatter.147, %subtract.168), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1186 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.12), direction=EQ
  %get-tuple-element.432 = bf16[4096,2]{1,0} get-tuple-element(%sort.102), index=0
  %slice.229 = bf16[4096,2]{1,0} slice(%get-tuple-element.432), slice={[0:4096], [0:2]}
  %all-gather.90 = bf16[32768,2]{1,0} all-gather(%slice.229), channel_id=187, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.387 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.90, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.895 = f32[4096,2]{1,0} convert(%dynamic-slice.387)
  %reshape.12721 = f32[1,4096,2]{2,1,0} reshape(%convert.895)
  %reduce.305 = f32[4096]{0} reduce(%convert.895, %constant.4073), dimensions={1}, to_apply=%region_138.5053
  %reshape.12722 = f32[1,4096]{1,0} reshape(%reduce.305)
  %broadcast.6103 = f32[1,4096,2]{2,1,0} broadcast(%reshape.12722), dimensions={0,1}
  %subtract.167 = f32[1,4096,2]{2,1,0} subtract(%reshape.12721, %broadcast.6103)
  %exponential.150 = f32[1,4096,2]{2,1,0} exponential(%subtract.167)
  %reduce.306 = f32[1,4096]{1,0} reduce(%exponential.150, %constant.3956), dimensions={2}, to_apply=%region_139.5065
  %broadcast.6104 = f32[1,4096,2]{2,1,0} broadcast(%reduce.306), dimensions={0,1}
  %divide.557 = f32[1,4096,2]{2,1,0} divide(%exponential.150, %broadcast.6104)
  %convert.896 = bf16[1,4096,2]{2,1,0} convert(%divide.557)
  %select.636 = bf16[1,4096,2]{2,1,0} select(%compare.1186, %convert.896, %broadcast.5432)
  %scatter.148 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.168, %select.636), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_141.5109
  %broadcast.6106 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.12702), dimensions={0,1,2}
  %iota.1735 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1187 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6106, %iota.1735), direction=EQ
  %convert.897 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1187)
  %reshape.12731 = s32[1,8192,8]{2,1,0} reshape(%convert.897)
  %copy.2450 = s32[1,8192,8]{2,1,0} copy(%reshape.12731)
  %reduce-window.229 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2450, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.12
  %reshape.12733 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.229)
  %copy.2451 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12733)
  %compare.1188 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2451, %broadcast.5435), direction=LE
  %select.637 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1188, %convert.897, %broadcast.5436)
  %reduce.307 = s32[1,4096,8]{2,1,0} reduce(%select.637, %constant.3783), dimensions={2}, to_apply=%region_142.5123
  %convert.898 = bf16[1,4096,8]{2,1,0} convert(%reduce.307)
  %multiply.2291 = bf16[1,4096,8]{2,1,0} multiply(%scatter.148, %convert.898)
  %broadcast.6108 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2291), dimensions={0,1,2}
  %multiply.2292 = s32[1,8192,8]{2,1,0} multiply(%copy.2450, %reduce-window.229)
  %reshape.12734 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2292)
  %reduce.308 = s32[1,4096,8]{2,1,0} reduce(%reshape.12734, %constant.3783), dimensions={2}, to_apply=%region_143.5132
  %multiply.2293 = s32[1,4096,8]{2,1,0} multiply(%reduce.308, %reduce.307)
  %broadcast.6109 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2293), dimensions={0,1,2}
  %iota.1736 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1189 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6109, %iota.1736), direction=EQ
  %convert.899 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1189)
  %convert.900 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.899)
  %multiply.2294 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6108, %convert.900)
  %slice.231 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2294), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2452 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.231)
  %compare.1190 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.231, %broadcast.5439), direction=NE
  %copy.2453 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1190)
  %convert.901 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2453)
  %dot.288 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.901, %copy.2448), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12737 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.288)
  %all-to-all.24 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12737), channel_id=195, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.36 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.24), dimensions={1,0,2,3,4}
  %reshape.12738 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.36)
  %transpose.37 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12738), dimensions={1,0,2,3}
  %copy.2454 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.37)
  %param.134 = bf16[1,4096,14336]{2,1,0} parameter(43), sharding={devices=[8,1,1]<=[8]}
  %copy.2455 = bf16[1,4096,14336]{2,1,0} copy(%param.134)
  %dot.289 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2454, %copy.2455), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2456 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.289)
  %negate.171 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2456)
  %exponential.151 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.171)
  %add.2873 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.151, %broadcast.5440)
  %divide.558 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2873)
  %multiply.2298 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2456, %divide.558)
  %param.135 = bf16[1,4096,14336]{2,1,0} parameter(44), sharding={devices=[8,1,1]<=[8]}
  %copy.2457 = bf16[1,4096,14336]{2,1,0} copy(%param.135)
  %dot.290 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2454, %copy.2457), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2458 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.290)
  %multiply.2299 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2298, %copy.2458)
  %param.136 = bf16[1,14336,4096]{2,1,0} parameter(45), sharding={devices=[8,1,1]<=[8]}
  %copy.2459 = bf16[1,14336,4096]{2,1,0} copy(%param.136)
  %dot.291 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2299, %copy.2459), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2460 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.291)
  %reshape.12743 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2460)
  %all-to-all.25 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12743), channel_id=196, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.38 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.25), dimensions={1,0,2,3,4}
  %reshape.12744 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.38)
  %dot.292 = bf16[1,4096,4096]{2,1,0} dot(%copy.2452, %reshape.12744), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2461 = bf16[1,4096,4096]{2,1,0} copy(%dot.292)
  %add.2874 = bf16[1,4096,4096]{2,1,0} add(%copy.2461, %add.2864)
  %copy.2462 = bf16[1,4096,4096]{2,1,0} copy(%add.2874)
  %copy.2463 = bf16[1,4096,4096]{2,1,0} copy(%copy.2462)
  %convert.902 = f32[1,4096,4096]{2,1,0} convert(%copy.2463)
  %multiply.2303 = f32[1,4096,4096]{2,1,0} multiply(%convert.902, %convert.902)
  %reduce.309 = f32[1,4096]{1,0} reduce(%multiply.2303, %constant.3956), dimensions={2}, to_apply=%region_144.5171
  %multiply.2304 = f32[1,4096]{1,0} multiply(%reduce.309, %broadcast.5380)
  %add.2875 = f32[1,4096]{1,0} add(%multiply.2304, %broadcast.5381)
  %rsqrt.90 = f32[1,4096]{1,0} rsqrt(%add.2875)
  %broadcast.6114 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.90), dimensions={0,1}
  %multiply.2305 = f32[1,4096,4096]{2,1,0} multiply(%convert.902, %broadcast.6114)
  %convert.903 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2305)
  %param.137 = bf16[4096]{0} parameter(57), sharding={replicated}
  %broadcast.6117 = bf16[1,4096,4096]{2,1,0} broadcast(%param.137), dimensions={2}
  %multiply.2307 = bf16[1,4096,4096]{2,1,0} multiply(%convert.903, %broadcast.6117)
  %copy.2464 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2307)
  %copy.2465 = bf16[1,4096,4096]{2,1,0} copy(%copy.2464)
  %param.138 = bf16[512,32,128]{2,1,0} parameter(60), sharding={devices=[8,1,1]<=[8]}
  %all-gather.92 = bf16[4096,32,128]{2,1,0} all-gather(%param.138), channel_id=197, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.293 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2465, %all-gather.92), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.232 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.293), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2311 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.232, %broadcast.5389)
  %slice.233 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.293), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2313 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.233, %broadcast.5391)
  %subtract.169 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2311, %multiply.2313)
  %multiply.2314 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.233, %broadcast.5389)
  %multiply.2315 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.232, %broadcast.5391)
  %add.2876 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2314, %multiply.2315)
  %concatenate.78 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.169, %add.2876), dimensions={3}
  %copy.2466 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.78)
  %param.139 = bf16[512,8,128]{2,1,0} parameter(58), sharding={devices=[8,1,1]<=[8]}
  %all-gather.93 = bf16[4096,8,128]{2,1,0} all-gather(%param.139), channel_id=198, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.294 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2465, %all-gather.93), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.234 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.294), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2319 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.234, %broadcast.5400)
  %slice.235 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.294), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2321 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.235, %broadcast.5401)
  %subtract.170 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2319, %multiply.2321)
  %multiply.2322 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.235, %broadcast.5400)
  %multiply.2323 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.234, %broadcast.5401)
  %add.2877 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2322, %multiply.2323)
  %concatenate.79 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.170, %add.2877), dimensions={3}
  %copy.2468 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.79)
  %param.140 = bf16[512,8,128]{2,1,0} parameter(61), sharding={devices=[8,1,1]<=[8]}
  %all-gather.94 = bf16[4096,8,128]{2,1,0} all-gather(%param.140), channel_id=199, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.295 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2465, %all-gather.94), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2469 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.295)
  %custom-call.89 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2466, %copy.2468, %copy.2469, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.443 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.89), index=0
  %copy.2470 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.443)
  %param.141 = bf16[32,128,512]{2,1,0} parameter(59), sharding={devices=[1,1,8]<=[8]}
  %all-gather.95 = bf16[32,128,4096]{2,1,0} all-gather(%param.141), channel_id=200, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.296 = bf16[1,4096,4096]{2,1,0} dot(%copy.2470, %all-gather.95), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2471 = bf16[1,4096,4096]{2,1,0} copy(%dot.296)
  %add.2891 = bf16[1,4096,4096]{2,1,0} add(%copy.2463, %copy.2471)
  %convert.916 = f32[1,4096,4096]{2,1,0} convert(%add.2891)
  %multiply.2325 = f32[1,4096,4096]{2,1,0} multiply(%convert.916, %convert.916)
  %reduce.313 = f32[1,4096]{1,0} reduce(%multiply.2325, %constant.3956), dimensions={2}, to_apply=%region_148.5331
  %multiply.2326 = f32[1,4096]{1,0} multiply(%reduce.313, %broadcast.5380)
  %add.2892 = f32[1,4096]{1,0} add(%multiply.2326, %broadcast.5381)
  %rsqrt.91 = f32[1,4096]{1,0} rsqrt(%add.2892)
  %broadcast.6157 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.91), dimensions={0,1}
  %multiply.2327 = f32[1,4096,4096]{2,1,0} multiply(%convert.916, %broadcast.6157)
  %convert.917 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2327)
  %param.142 = bf16[4096]{0} parameter(56), sharding={replicated}
  %broadcast.6159 = bf16[1,4096,4096]{2,1,0} broadcast(%param.142), dimensions={2}
  %multiply.2328 = bf16[1,4096,4096]{2,1,0} multiply(%convert.917, %broadcast.6159)
  %copy.2472 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2328)
  %param.143 = bf16[512,8]{1,0} parameter(52), sharding={devices=[8,1]<=[8]}
  %all-gather.96 = bf16[4096,8]{1,0} all-gather(%param.143), channel_id=201, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.297 = bf16[1,4096,8]{2,1,0} dot(%copy.2472, %all-gather.96), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2473 = bf16[1,4096,8]{2,1,0} copy(%dot.297)
  %reshape.12796 = bf16[4096,8]{1,0} reshape(%copy.2473)
  %custom-call.90 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.12796), custom_call_target="TopK", called_computations={%compare-greater-than.13.clone}
  %get-tuple-element.444 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.90), index=0
  %get-tuple-element.445 = s32[4096,2]{1,0} get-tuple-element(%custom-call.90), index=1
  %add.2894 = s32[4096,2]{1,0} add(%get-tuple-element.445, %broadcast.5420)
  %sort.105 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.444, %add.2894), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.13
  %get-tuple-element.447 = s32[4096,2]{1,0} get-tuple-element(%sort.105), index=1
  %slice.238 = s32[4096,2]{1,0} slice(%get-tuple-element.447), slice={[0:4096], [0:2]}
  %all-gather.98 = s32[32768,2]{1,0} all-gather(%slice.238), channel_id=203, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.405 = s32[4096,2]{1,0} dynamic-slice(%all-gather.98, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.12800 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.405)
  %compare.1220 = pred[1,4096,2]{2,1,0} compare(%reshape.12800, %broadcast.5421), direction=LT
  %add.2895 = s32[1,4096,2]{2,1,0} add(%reshape.12800, %broadcast.5422)
  %select.659 = s32[1,4096,2]{2,1,0} select(%compare.1220, %add.2895, %reshape.12800)
  %reshape.12801 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.659)
  %concatenate.80 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1588, %reshape.12801), dimensions={3}
  %subtract.176 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.80, %broadcast.5433)
  %scatter.159 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.176, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_151.5405
  %gather.13 = u32[1,4096,2]{2,1,0} gather(%scatter.159, %subtract.176), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1221 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.13), direction=EQ
  %get-tuple-element.446 = bf16[4096,2]{1,0} get-tuple-element(%sort.105), index=0
  %slice.237 = bf16[4096,2]{1,0} slice(%get-tuple-element.446), slice={[0:4096], [0:2]}
  %all-gather.97 = bf16[32768,2]{1,0} all-gather(%slice.237), channel_id=202, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.415 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.97, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.920 = f32[4096,2]{1,0} convert(%dynamic-slice.415)
  %reshape.12820 = f32[1,4096,2]{2,1,0} reshape(%convert.920)
  %reduce.314 = f32[4096]{0} reduce(%convert.920, %constant.4073), dimensions={1}, to_apply=%region_149.5357
  %reshape.12822 = f32[1,4096]{1,0} reshape(%reduce.314)
  %broadcast.6167 = f32[1,4096,2]{2,1,0} broadcast(%reshape.12822), dimensions={0,1}
  %subtract.175 = f32[1,4096,2]{2,1,0} subtract(%reshape.12820, %broadcast.6167)
  %exponential.152 = f32[1,4096,2]{2,1,0} exponential(%subtract.175)
  %reduce.315 = f32[1,4096]{1,0} reduce(%exponential.152, %constant.3956), dimensions={2}, to_apply=%region_150.5369
  %broadcast.6169 = f32[1,4096,2]{2,1,0} broadcast(%reduce.315), dimensions={0,1}
  %divide.563 = f32[1,4096,2]{2,1,0} divide(%exponential.152, %broadcast.6169)
  %convert.921 = bf16[1,4096,2]{2,1,0} convert(%divide.563)
  %select.660 = bf16[1,4096,2]{2,1,0} select(%compare.1221, %convert.921, %broadcast.5432)
  %scatter.160 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.176, %select.660), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_152.5413
  %broadcast.6173 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.12800), dimensions={0,1,2}
  %iota.1744 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1222 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6173, %iota.1744), direction=EQ
  %convert.922 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1222)
  %reshape.12832 = s32[1,8192,8]{2,1,0} reshape(%convert.922)
  %copy.2474 = s32[1,8192,8]{2,1,0} copy(%reshape.12832)
  %reduce-window.232 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2474, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.13
  %reshape.12834 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.232)
  %copy.2475 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12834)
  %compare.1223 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2475, %broadcast.5435), direction=LE
  %select.661 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1223, %convert.922, %broadcast.5436)
  %reduce.316 = s32[1,4096,8]{2,1,0} reduce(%select.661, %constant.3783), dimensions={2}, to_apply=%region_153.5427
  %convert.923 = bf16[1,4096,8]{2,1,0} convert(%reduce.316)
  %multiply.2334 = bf16[1,4096,8]{2,1,0} multiply(%scatter.160, %convert.923)
  %broadcast.6176 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2334), dimensions={0,1,2}
  %multiply.2335 = s32[1,8192,8]{2,1,0} multiply(%copy.2474, %reduce-window.232)
  %reshape.12835 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2335)
  %reduce.317 = s32[1,4096,8]{2,1,0} reduce(%reshape.12835, %constant.3783), dimensions={2}, to_apply=%region_154.5436
  %multiply.2336 = s32[1,4096,8]{2,1,0} multiply(%reduce.317, %reduce.316)
  %broadcast.6178 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2336), dimensions={0,1,2}
  %iota.1745 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1224 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6178, %iota.1745), direction=EQ
  %convert.924 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1224)
  %convert.925 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.924)
  %multiply.2337 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6176, %convert.925)
  %slice.239 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2337), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2476 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.239)
  %compare.1225 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.239, %broadcast.5439), direction=NE
  %copy.2477 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1225)
  %convert.926 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2477)
  %dot.298 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.926, %copy.2472), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12838 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.298)
  %all-to-all.26 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12838), channel_id=210, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.39 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.26), dimensions={1,0,2,3,4}
  %reshape.12839 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.39)
  %transpose.40 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12839), dimensions={1,0,2,3}
  %copy.2478 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.40)
  %param.144 = bf16[1,4096,14336]{2,1,0} parameter(53), sharding={devices=[8,1,1]<=[8]}
  %copy.2479 = bf16[1,4096,14336]{2,1,0} copy(%param.144)
  %dot.299 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2478, %copy.2479), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2480 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.299)
  %negate.172 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2480)
  %exponential.153 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.172)
  %add.2901 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.153, %broadcast.5440)
  %divide.564 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2901)
  %multiply.2341 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2480, %divide.564)
  %param.145 = bf16[1,4096,14336]{2,1,0} parameter(54), sharding={devices=[8,1,1]<=[8]}
  %copy.2481 = bf16[1,4096,14336]{2,1,0} copy(%param.145)
  %dot.300 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2478, %copy.2481), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2482 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.300)
  %multiply.2342 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2341, %copy.2482)
  %param.146 = bf16[1,14336,4096]{2,1,0} parameter(55), sharding={devices=[8,1,1]<=[8]}
  %copy.2483 = bf16[1,14336,4096]{2,1,0} copy(%param.146)
  %dot.301 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2342, %copy.2483), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2484 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.301)
  %reshape.12842 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2484)
  %all-to-all.27 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12842), channel_id=211, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.41 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.27), dimensions={1,0,2,3,4}
  %reshape.12843 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.41)
  %dot.302 = bf16[1,4096,4096]{2,1,0} dot(%copy.2476, %reshape.12843), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2485 = bf16[1,4096,4096]{2,1,0} copy(%dot.302)
  %add.2902 = bf16[1,4096,4096]{2,1,0} add(%copy.2485, %add.2891)
  %copy.2486 = bf16[1,4096,4096]{2,1,0} copy(%add.2902)
  %copy.2487 = bf16[1,4096,4096]{2,1,0} copy(%copy.2486)
  %convert.927 = f32[1,4096,4096]{2,1,0} convert(%copy.2487)
  %multiply.2345 = f32[1,4096,4096]{2,1,0} multiply(%convert.927, %convert.927)
  %reduce.318 = f32[1,4096]{1,0} reduce(%multiply.2345, %constant.3956), dimensions={2}, to_apply=%region_155.5475
  %multiply.2346 = f32[1,4096]{1,0} multiply(%reduce.318, %broadcast.5380)
  %add.2904 = f32[1,4096]{1,0} add(%multiply.2346, %broadcast.5381)
  %rsqrt.92 = f32[1,4096]{1,0} rsqrt(%add.2904)
  %broadcast.6184 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.92), dimensions={0,1}
  %multiply.2347 = f32[1,4096,4096]{2,1,0} multiply(%convert.927, %broadcast.6184)
  %convert.928 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2347)
  %param.147 = bf16[4096]{0} parameter(67), sharding={replicated}
  %broadcast.6185 = bf16[1,4096,4096]{2,1,0} broadcast(%param.147), dimensions={2}
  %multiply.2348 = bf16[1,4096,4096]{2,1,0} multiply(%convert.928, %broadcast.6185)
  %copy.2488 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2348)
  %copy.2489 = bf16[1,4096,4096]{2,1,0} copy(%copy.2488)
  %param.148 = bf16[512,32,128]{2,1,0} parameter(70), sharding={devices=[8,1,1]<=[8]}
  %all-gather.99 = bf16[4096,32,128]{2,1,0} all-gather(%param.148), channel_id=212, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.303 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2489, %all-gather.99), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.240 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.303), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2352 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.240, %broadcast.5389)
  %slice.241 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.303), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2354 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.241, %broadcast.5391)
  %subtract.177 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2352, %multiply.2354)
  %multiply.2355 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.241, %broadcast.5389)
  %multiply.2356 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.240, %broadcast.5391)
  %add.2905 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2355, %multiply.2356)
  %concatenate.84 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.177, %add.2905), dimensions={3}
  %copy.2490 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.84)
  %param.149 = bf16[512,8,128]{2,1,0} parameter(68), sharding={devices=[8,1,1]<=[8]}
  %all-gather.100 = bf16[4096,8,128]{2,1,0} all-gather(%param.149), channel_id=213, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.304 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2489, %all-gather.100), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.242 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.304), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2360 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.242, %broadcast.5400)
  %slice.243 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.304), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2362 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.243, %broadcast.5401)
  %subtract.178 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2360, %multiply.2362)
  %multiply.2363 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.243, %broadcast.5400)
  %multiply.2364 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.242, %broadcast.5401)
  %add.2906 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2363, %multiply.2364)
  %concatenate.85 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.178, %add.2906), dimensions={3}
  %copy.2492 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.85)
  %param.150 = bf16[512,8,128]{2,1,0} parameter(71), sharding={devices=[8,1,1]<=[8]}
  %all-gather.101 = bf16[4096,8,128]{2,1,0} all-gather(%param.150), channel_id=214, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.305 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2489, %all-gather.101), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2493 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.305)
  %custom-call.91 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2490, %copy.2492, %copy.2493, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.457 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.91), index=0
  %copy.2494 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.457)
  %param.151 = bf16[32,128,512]{2,1,0} parameter(69), sharding={devices=[1,1,8]<=[8]}
  %all-gather.102 = bf16[32,128,4096]{2,1,0} all-gather(%param.151), channel_id=215, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.306 = bf16[1,4096,4096]{2,1,0} dot(%copy.2494, %all-gather.102), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2495 = bf16[1,4096,4096]{2,1,0} copy(%dot.306)
  %add.2919 = bf16[1,4096,4096]{2,1,0} add(%copy.2487, %copy.2495)
  %convert.941 = f32[1,4096,4096]{2,1,0} convert(%add.2919)
  %multiply.2366 = f32[1,4096,4096]{2,1,0} multiply(%convert.941, %convert.941)
  %reduce.322 = f32[1,4096]{1,0} reduce(%multiply.2366, %constant.3956), dimensions={2}, to_apply=%region_159.5635
  %multiply.2367 = f32[1,4096]{1,0} multiply(%reduce.322, %broadcast.5380)
  %add.2920 = f32[1,4096]{1,0} add(%multiply.2367, %broadcast.5381)
  %rsqrt.93 = f32[1,4096]{1,0} rsqrt(%add.2920)
  %broadcast.6221 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.93), dimensions={0,1}
  %multiply.2368 = f32[1,4096,4096]{2,1,0} multiply(%convert.941, %broadcast.6221)
  %convert.942 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2368)
  %param.152 = bf16[4096]{0} parameter(66), sharding={replicated}
  %broadcast.6222 = bf16[1,4096,4096]{2,1,0} broadcast(%param.152), dimensions={2}
  %multiply.2369 = bf16[1,4096,4096]{2,1,0} multiply(%convert.942, %broadcast.6222)
  %copy.2496 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2369)
  %param.153 = bf16[512,8]{1,0} parameter(62), sharding={devices=[8,1]<=[8]}
  %all-gather.103 = bf16[4096,8]{1,0} all-gather(%param.153), channel_id=216, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.307 = bf16[1,4096,8]{2,1,0} dot(%copy.2496, %all-gather.103), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2497 = bf16[1,4096,8]{2,1,0} copy(%dot.307)
  %reshape.12895 = bf16[4096,8]{1,0} reshape(%copy.2497)
  %custom-call.92 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.12895), custom_call_target="TopK", called_computations={%compare-greater-than.14.clone}
  %get-tuple-element.458 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.92), index=0
  %get-tuple-element.459 = s32[4096,2]{1,0} get-tuple-element(%custom-call.92), index=1
  %add.2921 = s32[4096,2]{1,0} add(%get-tuple-element.459, %broadcast.5420)
  %sort.108 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.458, %add.2921), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.14
  %get-tuple-element.461 = s32[4096,2]{1,0} get-tuple-element(%sort.108), index=1
  %slice.246 = s32[4096,2]{1,0} slice(%get-tuple-element.461), slice={[0:4096], [0:2]}
  %all-gather.105 = s32[32768,2]{1,0} all-gather(%slice.246), channel_id=218, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.433 = s32[4096,2]{1,0} dynamic-slice(%all-gather.105, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.12898 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.433)
  %compare.1255 = pred[1,4096,2]{2,1,0} compare(%reshape.12898, %broadcast.5421), direction=LT
  %add.2922 = s32[1,4096,2]{2,1,0} add(%reshape.12898, %broadcast.5422)
  %select.683 = s32[1,4096,2]{2,1,0} select(%compare.1255, %add.2922, %reshape.12898)
  %reshape.12899 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.683)
  %concatenate.86 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1585, %reshape.12899), dimensions={3}
  %subtract.184 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.86, %broadcast.5433)
  %scatter.172 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.184, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_162.5709
  %gather.14 = u32[1,4096,2]{2,1,0} gather(%scatter.172, %subtract.184), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1256 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.14), direction=EQ
  %get-tuple-element.460 = bf16[4096,2]{1,0} get-tuple-element(%sort.108), index=0
  %slice.245 = bf16[4096,2]{1,0} slice(%get-tuple-element.460), slice={[0:4096], [0:2]}
  %all-gather.104 = bf16[32768,2]{1,0} all-gather(%slice.245), channel_id=217, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.443 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.104, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.945 = f32[4096,2]{1,0} convert(%dynamic-slice.443)
  %reshape.12916 = f32[1,4096,2]{2,1,0} reshape(%convert.945)
  %reduce.323 = f32[4096]{0} reduce(%convert.945, %constant.4073), dimensions={1}, to_apply=%region_160.5661
  %reshape.12917 = f32[1,4096]{1,0} reshape(%reduce.323)
  %broadcast.6229 = f32[1,4096,2]{2,1,0} broadcast(%reshape.12917), dimensions={0,1}
  %subtract.183 = f32[1,4096,2]{2,1,0} subtract(%reshape.12916, %broadcast.6229)
  %exponential.154 = f32[1,4096,2]{2,1,0} exponential(%subtract.183)
  %reduce.324 = f32[1,4096]{1,0} reduce(%exponential.154, %constant.3956), dimensions={2}, to_apply=%region_161.5673
  %broadcast.6230 = f32[1,4096,2]{2,1,0} broadcast(%reduce.324), dimensions={0,1}
  %divide.569 = f32[1,4096,2]{2,1,0} divide(%exponential.154, %broadcast.6230)
  %convert.946 = bf16[1,4096,2]{2,1,0} convert(%divide.569)
  %select.684 = bf16[1,4096,2]{2,1,0} select(%compare.1256, %convert.946, %broadcast.5432)
  %scatter.173 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.184, %select.684), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_163.5717
  %broadcast.6232 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.12898), dimensions={0,1,2}
  %iota.1754 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1257 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6232, %iota.1754), direction=EQ
  %convert.947 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1257)
  %reshape.12929 = s32[1,8192,8]{2,1,0} reshape(%convert.947)
  %copy.2498 = s32[1,8192,8]{2,1,0} copy(%reshape.12929)
  %reduce-window.235 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2498, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.14
  %reshape.12931 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.235)
  %copy.2499 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12931)
  %compare.1258 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2499, %broadcast.5435), direction=LE
  %select.685 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1258, %convert.947, %broadcast.5436)
  %reduce.325 = s32[1,4096,8]{2,1,0} reduce(%select.685, %constant.3783), dimensions={2}, to_apply=%region_164.5731
  %convert.948 = bf16[1,4096,8]{2,1,0} convert(%reduce.325)
  %multiply.2375 = bf16[1,4096,8]{2,1,0} multiply(%scatter.173, %convert.948)
  %broadcast.6234 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2375), dimensions={0,1,2}
  %multiply.2376 = s32[1,8192,8]{2,1,0} multiply(%copy.2498, %reduce-window.235)
  %reshape.12932 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2376)
  %reduce.326 = s32[1,4096,8]{2,1,0} reduce(%reshape.12932, %constant.3783), dimensions={2}, to_apply=%region_165.5740
  %multiply.2377 = s32[1,4096,8]{2,1,0} multiply(%reduce.326, %reduce.325)
  %broadcast.6235 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2377), dimensions={0,1,2}
  %iota.1755 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1259 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6235, %iota.1755), direction=EQ
  %convert.949 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1259)
  %convert.950 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.949)
  %multiply.2378 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6234, %convert.950)
  %slice.247 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2378), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2500 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.247)
  %compare.1260 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.247, %broadcast.5439), direction=NE
  %copy.2501 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1260)
  %convert.951 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2501)
  %dot.308 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.951, %copy.2496), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12936 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.308)
  %all-to-all.28 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12936), channel_id=225, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.42 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.28), dimensions={1,0,2,3,4}
  %reshape.12937 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.42)
  %transpose.43 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12937), dimensions={1,0,2,3}
  %copy.2502 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.43)
  %param.154 = bf16[1,4096,14336]{2,1,0} parameter(63), sharding={devices=[8,1,1]<=[8]}
  %copy.2503 = bf16[1,4096,14336]{2,1,0} copy(%param.154)
  %dot.309 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2502, %copy.2503), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2504 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.309)
  %negate.173 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2504)
  %exponential.155 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.173)
  %add.2927 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.155, %broadcast.5440)
  %divide.570 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2927)
  %multiply.2382 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2504, %divide.570)
  %param.155 = bf16[1,4096,14336]{2,1,0} parameter(64), sharding={devices=[8,1,1]<=[8]}
  %copy.2505 = bf16[1,4096,14336]{2,1,0} copy(%param.155)
  %dot.310 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2502, %copy.2505), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2506 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.310)
  %multiply.2384 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2382, %copy.2506)
  %param.156 = bf16[1,14336,4096]{2,1,0} parameter(65), sharding={devices=[8,1,1]<=[8]}
  %copy.2507 = bf16[1,14336,4096]{2,1,0} copy(%param.156)
  %dot.311 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2384, %copy.2507), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2508 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.311)
  %reshape.12941 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2508)
  %all-to-all.29 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12941), channel_id=226, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.44 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.29), dimensions={1,0,2,3,4}
  %reshape.12943 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.44)
  %dot.312 = bf16[1,4096,4096]{2,1,0} dot(%copy.2500, %reshape.12943), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2509 = bf16[1,4096,4096]{2,1,0} copy(%dot.312)
  %add.2928 = bf16[1,4096,4096]{2,1,0} add(%copy.2509, %add.2919)
  %copy.2510 = bf16[1,4096,4096]{2,1,0} copy(%add.2928)
  %copy.2511 = bf16[1,4096,4096]{2,1,0} copy(%copy.2510)
  %convert.952 = f32[1,4096,4096]{2,1,0} convert(%copy.2511)
  %multiply.2387 = f32[1,4096,4096]{2,1,0} multiply(%convert.952, %convert.952)
  %reduce.327 = f32[1,4096]{1,0} reduce(%multiply.2387, %constant.3956), dimensions={2}, to_apply=%region_166.5779
  %multiply.2388 = f32[1,4096]{1,0} multiply(%reduce.327, %broadcast.5380)
  %add.2929 = f32[1,4096]{1,0} add(%multiply.2388, %broadcast.5381)
  %rsqrt.94 = f32[1,4096]{1,0} rsqrt(%add.2929)
  %broadcast.6239 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.94), dimensions={0,1}
  %multiply.2389 = f32[1,4096,4096]{2,1,0} multiply(%convert.952, %broadcast.6239)
  %convert.953 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2389)
  %param.157 = bf16[4096]{0} parameter(77), sharding={replicated}
  %broadcast.6240 = bf16[1,4096,4096]{2,1,0} broadcast(%param.157), dimensions={2}
  %multiply.2392 = bf16[1,4096,4096]{2,1,0} multiply(%convert.953, %broadcast.6240)
  %copy.2512 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2392)
  %copy.2513 = bf16[1,4096,4096]{2,1,0} copy(%copy.2512)
  %param.158 = bf16[512,32,128]{2,1,0} parameter(80), sharding={devices=[8,1,1]<=[8]}
  %all-gather.106 = bf16[4096,32,128]{2,1,0} all-gather(%param.158), channel_id=227, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.313 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2513, %all-gather.106), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.248 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.313), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2396 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.248, %broadcast.5389)
  %slice.249 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.313), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2399 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.249, %broadcast.5391)
  %subtract.185 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2396, %multiply.2399)
  %multiply.2400 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.249, %broadcast.5389)
  %multiply.2401 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.248, %broadcast.5391)
  %add.2930 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2400, %multiply.2401)
  %concatenate.90 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.185, %add.2930), dimensions={3}
  %copy.2514 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.90)
  %param.159 = bf16[512,8,128]{2,1,0} parameter(78), sharding={devices=[8,1,1]<=[8]}
  %all-gather.107 = bf16[4096,8,128]{2,1,0} all-gather(%param.159), channel_id=228, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.314 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2513, %all-gather.107), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.250 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.314), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2406 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.250, %broadcast.5400)
  %slice.251 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.314), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2408 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.251, %broadcast.5401)
  %subtract.186 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2406, %multiply.2408)
  %multiply.2409 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.251, %broadcast.5400)
  %multiply.2410 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.250, %broadcast.5401)
  %add.2931 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2409, %multiply.2410)
  %concatenate.91 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.186, %add.2931), dimensions={3}
  %copy.2516 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.91)
  %param.160 = bf16[512,8,128]{2,1,0} parameter(81), sharding={devices=[8,1,1]<=[8]}
  %all-gather.108 = bf16[4096,8,128]{2,1,0} all-gather(%param.160), channel_id=229, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.315 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2513, %all-gather.108), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2517 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.315)
  %custom-call.93 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2514, %copy.2516, %copy.2517, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.471 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.93), index=0
  %copy.2518 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.471)
  %param.161 = bf16[32,128,512]{2,1,0} parameter(79), sharding={devices=[1,1,8]<=[8]}
  %all-gather.109 = bf16[32,128,4096]{2,1,0} all-gather(%param.161), channel_id=230, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.316 = bf16[1,4096,4096]{2,1,0} dot(%copy.2518, %all-gather.109), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2519 = bf16[1,4096,4096]{2,1,0} copy(%dot.316)
  %add.2945 = bf16[1,4096,4096]{2,1,0} add(%copy.2511, %copy.2519)
  %convert.966 = f32[1,4096,4096]{2,1,0} convert(%add.2945)
  %multiply.2412 = f32[1,4096,4096]{2,1,0} multiply(%convert.966, %convert.966)
  %reduce.331 = f32[1,4096]{1,0} reduce(%multiply.2412, %constant.3956), dimensions={2}, to_apply=%region_170.5939
  %multiply.2413 = f32[1,4096]{1,0} multiply(%reduce.331, %broadcast.5380)
  %add.2946 = f32[1,4096]{1,0} add(%multiply.2413, %broadcast.5381)
  %rsqrt.95 = f32[1,4096]{1,0} rsqrt(%add.2946)
  %broadcast.6272 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.95), dimensions={0,1}
  %multiply.2414 = f32[1,4096,4096]{2,1,0} multiply(%convert.966, %broadcast.6272)
  %convert.967 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2414)
  %param.162 = bf16[4096]{0} parameter(76), sharding={replicated}
  %broadcast.6274 = bf16[1,4096,4096]{2,1,0} broadcast(%param.162), dimensions={2}
  %multiply.2415 = bf16[1,4096,4096]{2,1,0} multiply(%convert.967, %broadcast.6274)
  %copy.2520 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2415)
  %param.163 = bf16[512,8]{1,0} parameter(72), sharding={devices=[8,1]<=[8]}
  %all-gather.110 = bf16[4096,8]{1,0} all-gather(%param.163), channel_id=231, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.317 = bf16[1,4096,8]{2,1,0} dot(%copy.2520, %all-gather.110), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2521 = bf16[1,4096,8]{2,1,0} copy(%dot.317)
  %reshape.13002 = bf16[4096,8]{1,0} reshape(%copy.2521)
  %custom-call.94 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.13002), custom_call_target="TopK", called_computations={%compare-greater-than.15.clone}
  %get-tuple-element.472 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.94), index=0
  %get-tuple-element.473 = s32[4096,2]{1,0} get-tuple-element(%custom-call.94), index=1
  %add.2947 = s32[4096,2]{1,0} add(%get-tuple-element.473, %broadcast.5420)
  %sort.111 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.472, %add.2947), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.15
  %get-tuple-element.475 = s32[4096,2]{1,0} get-tuple-element(%sort.111), index=1
  %slice.254 = s32[4096,2]{1,0} slice(%get-tuple-element.475), slice={[0:4096], [0:2]}
  %all-gather.112 = s32[32768,2]{1,0} all-gather(%slice.254), channel_id=233, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.461 = s32[4096,2]{1,0} dynamic-slice(%all-gather.112, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.13006 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.461)
  %compare.1292 = pred[1,4096,2]{2,1,0} compare(%reshape.13006, %broadcast.5421), direction=LT
  %add.2948 = s32[1,4096,2]{2,1,0} add(%reshape.13006, %broadcast.5422)
  %select.707 = s32[1,4096,2]{2,1,0} select(%compare.1292, %add.2948, %reshape.13006)
  %reshape.13007 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.707)
  %concatenate.92 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1583, %reshape.13007), dimensions={3}
  %subtract.192 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.92, %broadcast.5433)
  %scatter.185 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.192, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_173.6013
  %gather.15 = u32[1,4096,2]{2,1,0} gather(%scatter.185, %subtract.192), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1293 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.15), direction=EQ
  %get-tuple-element.474 = bf16[4096,2]{1,0} get-tuple-element(%sort.111), index=0
  %slice.253 = bf16[4096,2]{1,0} slice(%get-tuple-element.474), slice={[0:4096], [0:2]}
  %all-gather.111 = bf16[32768,2]{1,0} all-gather(%slice.253), channel_id=232, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.471 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.111, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.970 = f32[4096,2]{1,0} convert(%dynamic-slice.471)
  %reshape.13029 = f32[1,4096,2]{2,1,0} reshape(%convert.970)
  %reduce.332 = f32[4096]{0} reduce(%convert.970, %constant.4073), dimensions={1}, to_apply=%region_171.5965
  %reshape.13030 = f32[1,4096]{1,0} reshape(%reduce.332)
  %broadcast.6282 = f32[1,4096,2]{2,1,0} broadcast(%reshape.13030), dimensions={0,1}
  %subtract.191 = f32[1,4096,2]{2,1,0} subtract(%reshape.13029, %broadcast.6282)
  %exponential.156 = f32[1,4096,2]{2,1,0} exponential(%subtract.191)
  %reduce.333 = f32[1,4096]{1,0} reduce(%exponential.156, %constant.3956), dimensions={2}, to_apply=%region_172.5977
  %broadcast.6283 = f32[1,4096,2]{2,1,0} broadcast(%reduce.333), dimensions={0,1}
  %divide.575 = f32[1,4096,2]{2,1,0} divide(%exponential.156, %broadcast.6283)
  %convert.971 = bf16[1,4096,2]{2,1,0} convert(%divide.575)
  %select.708 = bf16[1,4096,2]{2,1,0} select(%compare.1293, %convert.971, %broadcast.5432)
  %scatter.186 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.192, %select.708), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_174.6021
  %broadcast.6287 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.13006), dimensions={0,1,2}
  %iota.1763 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1294 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6287, %iota.1763), direction=EQ
  %convert.972 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1294)
  %reshape.13041 = s32[1,8192,8]{2,1,0} reshape(%convert.972)
  %copy.2522 = s32[1,8192,8]{2,1,0} copy(%reshape.13041)
  %reduce-window.238 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2522, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.15
  %reshape.13043 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.238)
  %copy.2523 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13043)
  %compare.1295 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2523, %broadcast.5435), direction=LE
  %select.709 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1295, %convert.972, %broadcast.5436)
  %reduce.334 = s32[1,4096,8]{2,1,0} reduce(%select.709, %constant.3783), dimensions={2}, to_apply=%region_175.6035
  %convert.973 = bf16[1,4096,8]{2,1,0} convert(%reduce.334)
  %multiply.2422 = bf16[1,4096,8]{2,1,0} multiply(%scatter.186, %convert.973)
  %broadcast.6289 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2422), dimensions={0,1,2}
  %multiply.2423 = s32[1,8192,8]{2,1,0} multiply(%copy.2522, %reduce-window.238)
  %reshape.13044 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2423)
  %reduce.335 = s32[1,4096,8]{2,1,0} reduce(%reshape.13044, %constant.3783), dimensions={2}, to_apply=%region_176.6044
  %multiply.2424 = s32[1,4096,8]{2,1,0} multiply(%reduce.335, %reduce.334)
  %broadcast.6290 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2424), dimensions={0,1,2}
  %iota.1764 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1296 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6290, %iota.1764), direction=EQ
  %convert.974 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1296)
  %convert.975 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.974)
  %multiply.2425 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6289, %convert.975)
  %slice.255 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2425), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2524 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.255)
  %compare.1297 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.255, %broadcast.5439), direction=NE
  %copy.2525 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1297)
  %convert.976 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2525)
  %dot.318 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.976, %copy.2520), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13048 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.318)
  %all-to-all.30 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13048), channel_id=240, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.45 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.30), dimensions={1,0,2,3,4}
  %reshape.13049 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.45)
  %transpose.46 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13049), dimensions={1,0,2,3}
  %copy.2526 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.46)
  %param.164 = bf16[1,4096,14336]{2,1,0} parameter(73), sharding={devices=[8,1,1]<=[8]}
  %copy.2527 = bf16[1,4096,14336]{2,1,0} copy(%param.164)
  %dot.319 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2526, %copy.2527), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2528 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.319)
  %negate.174 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2528)
  %exponential.157 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.174)
  %add.2955 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.157, %broadcast.5440)
  %divide.576 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2955)
  %multiply.2429 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2528, %divide.576)
  %param.165 = bf16[1,4096,14336]{2,1,0} parameter(74), sharding={devices=[8,1,1]<=[8]}
  %copy.2529 = bf16[1,4096,14336]{2,1,0} copy(%param.165)
  %dot.320 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2526, %copy.2529), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2530 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.320)
  %multiply.2430 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2429, %copy.2530)
  %param.166 = bf16[1,14336,4096]{2,1,0} parameter(75), sharding={devices=[8,1,1]<=[8]}
  %copy.2531 = bf16[1,14336,4096]{2,1,0} copy(%param.166)
  %dot.321 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2430, %copy.2531), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2532 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.321)
  %reshape.13052 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2532)
  %all-to-all.31 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13052), channel_id=241, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.47 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.31), dimensions={1,0,2,3,4}
  %reshape.13053 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.47)
  %dot.322 = bf16[1,4096,4096]{2,1,0} dot(%copy.2524, %reshape.13053), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2533 = bf16[1,4096,4096]{2,1,0} copy(%dot.322)
  %add.2957 = bf16[1,4096,4096]{2,1,0} add(%copy.2533, %add.2945)
  %copy.2534 = bf16[1,4096,4096]{2,1,0} copy(%add.2957)
  %copy.2535 = bf16[1,4096,4096]{2,1,0} copy(%copy.2534)
  %convert.977 = f32[1,4096,4096]{2,1,0} convert(%copy.2535)
  %multiply.2434 = f32[1,4096,4096]{2,1,0} multiply(%convert.977, %convert.977)
  %reduce.336 = f32[1,4096]{1,0} reduce(%multiply.2434, %constant.3956), dimensions={2}, to_apply=%region_177.6083
  %multiply.2435 = f32[1,4096]{1,0} multiply(%reduce.336, %broadcast.5380)
  %add.2958 = f32[1,4096]{1,0} add(%multiply.2435, %broadcast.5381)
  %rsqrt.96 = f32[1,4096]{1,0} rsqrt(%add.2958)
  %broadcast.6294 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.96), dimensions={0,1}
  %multiply.2436 = f32[1,4096,4096]{2,1,0} multiply(%convert.977, %broadcast.6294)
  %convert.978 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2436)
  %param.167 = bf16[4096]{0} parameter(87), sharding={replicated}
  %broadcast.6295 = bf16[1,4096,4096]{2,1,0} broadcast(%param.167), dimensions={2}
  %multiply.2437 = bf16[1,4096,4096]{2,1,0} multiply(%convert.978, %broadcast.6295)
  %copy.2536 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2437)
  %copy.2537 = bf16[1,4096,4096]{2,1,0} copy(%copy.2536)
  %param.168 = bf16[512,32,128]{2,1,0} parameter(90), sharding={devices=[8,1,1]<=[8]}
  %all-gather.113 = bf16[4096,32,128]{2,1,0} all-gather(%param.168), channel_id=242, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.323 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2537, %all-gather.113), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.256 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.323), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2441 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.256, %broadcast.5389)
  %slice.257 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.323), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2443 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.257, %broadcast.5391)
  %subtract.193 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2441, %multiply.2443)
  %multiply.2445 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.257, %broadcast.5389)
  %multiply.2446 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.256, %broadcast.5391)
  %add.2959 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2445, %multiply.2446)
  %concatenate.96 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.193, %add.2959), dimensions={3}
  %copy.2538 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.96)
  %param.169 = bf16[512,8,128]{2,1,0} parameter(88), sharding={devices=[8,1,1]<=[8]}
  %all-gather.114 = bf16[4096,8,128]{2,1,0} all-gather(%param.169), channel_id=243, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.324 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2537, %all-gather.114), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.258 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.324), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2451 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.258, %broadcast.5400)
  %slice.259 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.324), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2453 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.259, %broadcast.5401)
  %subtract.194 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2451, %multiply.2453)
  %multiply.2454 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.259, %broadcast.5400)
  %multiply.2455 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.258, %broadcast.5401)
  %add.2960 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2454, %multiply.2455)
  %concatenate.97 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.194, %add.2960), dimensions={3}
  %copy.2540 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.97)
  %param.170 = bf16[512,8,128]{2,1,0} parameter(91), sharding={devices=[8,1,1]<=[8]}
  %all-gather.115 = bf16[4096,8,128]{2,1,0} all-gather(%param.170), channel_id=244, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.325 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2537, %all-gather.115), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2541 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.325)
  %custom-call.95 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2538, %copy.2540, %copy.2541, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.485 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.95), index=0
  %copy.2542 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.485)
  %param.171 = bf16[32,128,512]{2,1,0} parameter(89), sharding={devices=[1,1,8]<=[8]}
  %all-gather.116 = bf16[32,128,4096]{2,1,0} all-gather(%param.171), channel_id=245, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.326 = bf16[1,4096,4096]{2,1,0} dot(%copy.2542, %all-gather.116), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2543 = bf16[1,4096,4096]{2,1,0} copy(%dot.326)
  %add.2974 = bf16[1,4096,4096]{2,1,0} add(%copy.2535, %copy.2543)
  %convert.991 = f32[1,4096,4096]{2,1,0} convert(%add.2974)
  %multiply.2457 = f32[1,4096,4096]{2,1,0} multiply(%convert.991, %convert.991)
  %reduce.340 = f32[1,4096]{1,0} reduce(%multiply.2457, %constant.3956), dimensions={2}, to_apply=%region_181.6243
  %multiply.2458 = f32[1,4096]{1,0} multiply(%reduce.340, %broadcast.5380)
  %add.2975 = f32[1,4096]{1,0} add(%multiply.2458, %broadcast.5381)
  %rsqrt.97 = f32[1,4096]{1,0} rsqrt(%add.2975)
  %broadcast.6327 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.97), dimensions={0,1}
  %multiply.2460 = f32[1,4096,4096]{2,1,0} multiply(%convert.991, %broadcast.6327)
  %convert.992 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2460)
  %param.172 = bf16[4096]{0} parameter(86), sharding={replicated}
  %broadcast.6328 = bf16[1,4096,4096]{2,1,0} broadcast(%param.172), dimensions={2}
  %multiply.2461 = bf16[1,4096,4096]{2,1,0} multiply(%convert.992, %broadcast.6328)
  %copy.2544 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2461)
  %param.173 = bf16[512,8]{1,0} parameter(82), sharding={devices=[8,1]<=[8]}
  %all-gather.117 = bf16[4096,8]{1,0} all-gather(%param.173), channel_id=246, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.327 = bf16[1,4096,8]{2,1,0} dot(%copy.2544, %all-gather.117), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2545 = bf16[1,4096,8]{2,1,0} copy(%dot.327)
  %reshape.13108 = bf16[4096,8]{1,0} reshape(%copy.2545)
  %custom-call.96 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.13108), custom_call_target="TopK", called_computations={%compare-greater-than.16.clone}
  %get-tuple-element.486 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.96), index=0
  %get-tuple-element.487 = s32[4096,2]{1,0} get-tuple-element(%custom-call.96), index=1
  %add.2976 = s32[4096,2]{1,0} add(%get-tuple-element.487, %broadcast.5420)
  %sort.114 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.486, %add.2976), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.16
  %get-tuple-element.489 = s32[4096,2]{1,0} get-tuple-element(%sort.114), index=1
  %slice.262 = s32[4096,2]{1,0} slice(%get-tuple-element.489), slice={[0:4096], [0:2]}
  %all-gather.119 = s32[32768,2]{1,0} all-gather(%slice.262), channel_id=248, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.489 = s32[4096,2]{1,0} dynamic-slice(%all-gather.119, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.13111 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.489)
  %compare.1328 = pred[1,4096,2]{2,1,0} compare(%reshape.13111, %broadcast.5421), direction=LT
  %add.2977 = s32[1,4096,2]{2,1,0} add(%reshape.13111, %broadcast.5422)
  %select.731 = s32[1,4096,2]{2,1,0} select(%compare.1328, %add.2977, %reshape.13111)
  %reshape.13112 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.731)
  %concatenate.98 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1581, %reshape.13112), dimensions={3}
  %subtract.200 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.98, %broadcast.5433)
  %scatter.198 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.200, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_184.6317
  %gather.16 = u32[1,4096,2]{2,1,0} gather(%scatter.198, %subtract.200), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1329 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.16), direction=EQ
  %get-tuple-element.488 = bf16[4096,2]{1,0} get-tuple-element(%sort.114), index=0
  %slice.261 = bf16[4096,2]{1,0} slice(%get-tuple-element.488), slice={[0:4096], [0:2]}
  %all-gather.118 = bf16[32768,2]{1,0} all-gather(%slice.261), channel_id=247, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.499 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.118, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.995 = f32[4096,2]{1,0} convert(%dynamic-slice.499)
  %reshape.13132 = f32[1,4096,2]{2,1,0} reshape(%convert.995)
  %reduce.341 = f32[4096]{0} reduce(%convert.995, %constant.4073), dimensions={1}, to_apply=%region_182.6269
  %reshape.13133 = f32[1,4096]{1,0} reshape(%reduce.341)
  %broadcast.6335 = f32[1,4096,2]{2,1,0} broadcast(%reshape.13133), dimensions={0,1}
  %subtract.199 = f32[1,4096,2]{2,1,0} subtract(%reshape.13132, %broadcast.6335)
  %exponential.158 = f32[1,4096,2]{2,1,0} exponential(%subtract.199)
  %reduce.342 = f32[1,4096]{1,0} reduce(%exponential.158, %constant.3956), dimensions={2}, to_apply=%region_183.6281
  %broadcast.6336 = f32[1,4096,2]{2,1,0} broadcast(%reduce.342), dimensions={0,1}
  %divide.581 = f32[1,4096,2]{2,1,0} divide(%exponential.158, %broadcast.6336)
  %convert.996 = bf16[1,4096,2]{2,1,0} convert(%divide.581)
  %select.732 = bf16[1,4096,2]{2,1,0} select(%compare.1329, %convert.996, %broadcast.5432)
  %scatter.199 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.200, %select.732), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_185.6325
  %broadcast.6338 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.13111), dimensions={0,1,2}
  %iota.1772 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1330 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6338, %iota.1772), direction=EQ
  %convert.997 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1330)
  %reshape.13148 = s32[1,8192,8]{2,1,0} reshape(%convert.997)
  %copy.2546 = s32[1,8192,8]{2,1,0} copy(%reshape.13148)
  %reduce-window.241 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2546, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.16
  %reshape.13150 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.241)
  %copy.2547 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13150)
  %compare.1331 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2547, %broadcast.5435), direction=LE
  %select.733 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1331, %convert.997, %broadcast.5436)
  %reduce.343 = s32[1,4096,8]{2,1,0} reduce(%select.733, %constant.3783), dimensions={2}, to_apply=%region_186.6339
  %convert.998 = bf16[1,4096,8]{2,1,0} convert(%reduce.343)
  %multiply.2467 = bf16[1,4096,8]{2,1,0} multiply(%scatter.199, %convert.998)
  %broadcast.6340 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2467), dimensions={0,1,2}
  %multiply.2468 = s32[1,8192,8]{2,1,0} multiply(%copy.2546, %reduce-window.241)
  %reshape.13151 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2468)
  %reduce.344 = s32[1,4096,8]{2,1,0} reduce(%reshape.13151, %constant.3783), dimensions={2}, to_apply=%region_187.6348
  %multiply.2469 = s32[1,4096,8]{2,1,0} multiply(%reduce.344, %reduce.343)
  %broadcast.6341 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2469), dimensions={0,1,2}
  %iota.1773 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1332 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6341, %iota.1773), direction=EQ
  %convert.999 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1332)
  %convert.1000 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.999)
  %multiply.2470 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6340, %convert.1000)
  %slice.263 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2470), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2548 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.263)
  %compare.1333 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.263, %broadcast.5439), direction=NE
  %copy.2549 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1333)
  %convert.1001 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2549)
  %dot.328 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1001, %copy.2544), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13154 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.328)
  %all-to-all.32 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13154), channel_id=255, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.48 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.32), dimensions={1,0,2,3,4}
  %reshape.13155 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.48)
  %transpose.49 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13155), dimensions={1,0,2,3}
  %copy.2550 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.49)
  %param.174 = bf16[1,4096,14336]{2,1,0} parameter(83), sharding={devices=[8,1,1]<=[8]}
  %copy.2551 = bf16[1,4096,14336]{2,1,0} copy(%param.174)
  %dot.329 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2550, %copy.2551), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2552 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.329)
  %negate.175 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2552)
  %exponential.159 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.175)
  %add.2983 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.159, %broadcast.5440)
  %divide.582 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.2983)
  %multiply.2474 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2552, %divide.582)
  %param.175 = bf16[1,4096,14336]{2,1,0} parameter(84), sharding={devices=[8,1,1]<=[8]}
  %copy.2553 = bf16[1,4096,14336]{2,1,0} copy(%param.175)
  %dot.330 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2550, %copy.2553), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2554 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.330)
  %multiply.2475 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2474, %copy.2554)
  %param.176 = bf16[1,14336,4096]{2,1,0} parameter(85), sharding={devices=[8,1,1]<=[8]}
  %copy.2555 = bf16[1,14336,4096]{2,1,0} copy(%param.176)
  %dot.331 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2475, %copy.2555), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2556 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.331)
  %reshape.13158 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2556)
  %all-to-all.33 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13158), channel_id=256, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.50 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.33), dimensions={1,0,2,3,4}
  %reshape.13159 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.50)
  %dot.332 = bf16[1,4096,4096]{2,1,0} dot(%copy.2548, %reshape.13159), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2557 = bf16[1,4096,4096]{2,1,0} copy(%dot.332)
  %add.2984 = bf16[1,4096,4096]{2,1,0} add(%copy.2557, %add.2974)
  %copy.2558 = bf16[1,4096,4096]{2,1,0} copy(%add.2984)
  %copy.2559 = bf16[1,4096,4096]{2,1,0} copy(%copy.2558)
  %convert.1002 = f32[1,4096,4096]{2,1,0} convert(%copy.2559)
  %multiply.2478 = f32[1,4096,4096]{2,1,0} multiply(%convert.1002, %convert.1002)
  %reduce.345 = f32[1,4096]{1,0} reduce(%multiply.2478, %constant.3956), dimensions={2}, to_apply=%region_188.6387
  %multiply.2479 = f32[1,4096]{1,0} multiply(%reduce.345, %broadcast.5380)
  %add.2985 = f32[1,4096]{1,0} add(%multiply.2479, %broadcast.5381)
  %rsqrt.98 = f32[1,4096]{1,0} rsqrt(%add.2985)
  %broadcast.6345 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.98), dimensions={0,1}
  %multiply.2480 = f32[1,4096,4096]{2,1,0} multiply(%convert.1002, %broadcast.6345)
  %convert.1003 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2480)
  %param.177 = bf16[4096]{0} parameter(97), sharding={replicated}
  %broadcast.6346 = bf16[1,4096,4096]{2,1,0} broadcast(%param.177), dimensions={2}
  %multiply.2482 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1003, %broadcast.6346)
  %copy.2560 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2482)
  %copy.2561 = bf16[1,4096,4096]{2,1,0} copy(%copy.2560)
  %param.178 = bf16[512,32,128]{2,1,0} parameter(100), sharding={devices=[8,1,1]<=[8]}
  %all-gather.120 = bf16[4096,32,128]{2,1,0} all-gather(%param.178), channel_id=257, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.333 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2561, %all-gather.120), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.264 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.333), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2487 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.264, %broadcast.5389)
  %slice.265 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.333), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2489 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.265, %broadcast.5391)
  %subtract.201 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2487, %multiply.2489)
  %multiply.2491 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.265, %broadcast.5389)
  %multiply.2492 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.264, %broadcast.5391)
  %add.2986 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2491, %multiply.2492)
  %concatenate.102 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.201, %add.2986), dimensions={3}
  %copy.2562 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.102)
  %param.179 = bf16[512,8,128]{2,1,0} parameter(98), sharding={devices=[8,1,1]<=[8]}
  %all-gather.121 = bf16[4096,8,128]{2,1,0} all-gather(%param.179), channel_id=258, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.334 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2561, %all-gather.121), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.266 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.334), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2497 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.266, %broadcast.5400)
  %slice.267 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.334), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2500 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.267, %broadcast.5401)
  %subtract.202 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2497, %multiply.2500)
  %multiply.2501 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.267, %broadcast.5400)
  %multiply.2502 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.266, %broadcast.5401)
  %add.2987 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2501, %multiply.2502)
  %concatenate.103 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.202, %add.2987), dimensions={3}
  %copy.2564 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.103)
  %param.180 = bf16[512,8,128]{2,1,0} parameter(101), sharding={devices=[8,1,1]<=[8]}
  %all-gather.122 = bf16[4096,8,128]{2,1,0} all-gather(%param.180), channel_id=259, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.335 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2561, %all-gather.122), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2565 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.335)
  %custom-call.97 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2562, %copy.2564, %copy.2565, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.499 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.97), index=0
  %copy.2566 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.499)
  %param.181 = bf16[32,128,512]{2,1,0} parameter(99), sharding={devices=[1,1,8]<=[8]}
  %all-gather.123 = bf16[32,128,4096]{2,1,0} all-gather(%param.181), channel_id=260, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.336 = bf16[1,4096,4096]{2,1,0} dot(%copy.2566, %all-gather.123), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2567 = bf16[1,4096,4096]{2,1,0} copy(%dot.336)
  %add.3001 = bf16[1,4096,4096]{2,1,0} add(%copy.2559, %copy.2567)
  %convert.1016 = f32[1,4096,4096]{2,1,0} convert(%add.3001)
  %multiply.2504 = f32[1,4096,4096]{2,1,0} multiply(%convert.1016, %convert.1016)
  %reduce.349 = f32[1,4096]{1,0} reduce(%multiply.2504, %constant.3956), dimensions={2}, to_apply=%region_192.6547
  %multiply.2505 = f32[1,4096]{1,0} multiply(%reduce.349, %broadcast.5380)
  %add.3002 = f32[1,4096]{1,0} add(%multiply.2505, %broadcast.5381)
  %rsqrt.99 = f32[1,4096]{1,0} rsqrt(%add.3002)
  %broadcast.6376 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.99), dimensions={0,1}
  %multiply.2506 = f32[1,4096,4096]{2,1,0} multiply(%convert.1016, %broadcast.6376)
  %convert.1017 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2506)
  %param.182 = bf16[4096]{0} parameter(96), sharding={replicated}
  %broadcast.6377 = bf16[1,4096,4096]{2,1,0} broadcast(%param.182), dimensions={2}
  %multiply.2507 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1017, %broadcast.6377)
  %copy.2568 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2507)
  %param.183 = bf16[512,8]{1,0} parameter(92), sharding={devices=[8,1]<=[8]}
  %all-gather.124 = bf16[4096,8]{1,0} all-gather(%param.183), channel_id=261, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.337 = bf16[1,4096,8]{2,1,0} dot(%copy.2568, %all-gather.124), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2569 = bf16[1,4096,8]{2,1,0} copy(%dot.337)
  %reshape.13212 = bf16[4096,8]{1,0} reshape(%copy.2569)
  %custom-call.98 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.13212), custom_call_target="TopK", called_computations={%compare-greater-than.17.clone}
  %get-tuple-element.500 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.98), index=0
  %get-tuple-element.501 = s32[4096,2]{1,0} get-tuple-element(%custom-call.98), index=1
  %add.3004 = s32[4096,2]{1,0} add(%get-tuple-element.501, %broadcast.5420)
  %sort.117 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.500, %add.3004), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.17
  %get-tuple-element.503 = s32[4096,2]{1,0} get-tuple-element(%sort.117), index=1
  %slice.270 = s32[4096,2]{1,0} slice(%get-tuple-element.503), slice={[0:4096], [0:2]}
  %all-gather.126 = s32[32768,2]{1,0} all-gather(%slice.270), channel_id=263, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.517 = s32[4096,2]{1,0} dynamic-slice(%all-gather.126, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.13215 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.517)
  %compare.1363 = pred[1,4096,2]{2,1,0} compare(%reshape.13215, %broadcast.5421), direction=LT
  %add.3005 = s32[1,4096,2]{2,1,0} add(%reshape.13215, %broadcast.5422)
  %select.755 = s32[1,4096,2]{2,1,0} select(%compare.1363, %add.3005, %reshape.13215)
  %reshape.13216 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.755)
  %concatenate.104 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1579, %reshape.13216), dimensions={3}
  %subtract.208 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.104, %broadcast.5433)
  %scatter.211 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.208, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_195.6621
  %gather.17 = u32[1,4096,2]{2,1,0} gather(%scatter.211, %subtract.208), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1364 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.17), direction=EQ
  %get-tuple-element.502 = bf16[4096,2]{1,0} get-tuple-element(%sort.117), index=0
  %slice.269 = bf16[4096,2]{1,0} slice(%get-tuple-element.502), slice={[0:4096], [0:2]}
  %all-gather.125 = bf16[32768,2]{1,0} all-gather(%slice.269), channel_id=262, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.527 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.125, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1020 = f32[4096,2]{1,0} convert(%dynamic-slice.527)
  %reshape.13232 = f32[1,4096,2]{2,1,0} reshape(%convert.1020)
  %reduce.350 = f32[4096]{0} reduce(%convert.1020, %constant.4073), dimensions={1}, to_apply=%region_193.6573
  %reshape.13233 = f32[1,4096]{1,0} reshape(%reduce.350)
  %broadcast.6384 = f32[1,4096,2]{2,1,0} broadcast(%reshape.13233), dimensions={0,1}
  %subtract.207 = f32[1,4096,2]{2,1,0} subtract(%reshape.13232, %broadcast.6384)
  %exponential.160 = f32[1,4096,2]{2,1,0} exponential(%subtract.207)
  %reduce.351 = f32[1,4096]{1,0} reduce(%exponential.160, %constant.3956), dimensions={2}, to_apply=%region_194.6585
  %broadcast.6385 = f32[1,4096,2]{2,1,0} broadcast(%reduce.351), dimensions={0,1}
  %divide.587 = f32[1,4096,2]{2,1,0} divide(%exponential.160, %broadcast.6385)
  %convert.1021 = bf16[1,4096,2]{2,1,0} convert(%divide.587)
  %select.756 = bf16[1,4096,2]{2,1,0} select(%compare.1364, %convert.1021, %broadcast.5432)
  %scatter.212 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.208, %select.756), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_196.6629
  %broadcast.6387 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.13215), dimensions={0,1,2}
  %iota.1781 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1365 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6387, %iota.1781), direction=EQ
  %convert.1022 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1365)
  %reshape.13242 = s32[1,8192,8]{2,1,0} reshape(%convert.1022)
  %copy.2570 = s32[1,8192,8]{2,1,0} copy(%reshape.13242)
  %reduce-window.244 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2570, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.17
  %reshape.13244 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.244)
  %copy.2571 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13244)
  %compare.1366 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2571, %broadcast.5435), direction=LE
  %select.757 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1366, %convert.1022, %broadcast.5436)
  %reduce.352 = s32[1,4096,8]{2,1,0} reduce(%select.757, %constant.3783), dimensions={2}, to_apply=%region_197.6643
  %convert.1023 = bf16[1,4096,8]{2,1,0} convert(%reduce.352)
  %multiply.2513 = bf16[1,4096,8]{2,1,0} multiply(%scatter.212, %convert.1023)
  %broadcast.6389 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2513), dimensions={0,1,2}
  %multiply.2514 = s32[1,8192,8]{2,1,0} multiply(%copy.2570, %reduce-window.244)
  %reshape.13245 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2514)
  %reduce.353 = s32[1,4096,8]{2,1,0} reduce(%reshape.13245, %constant.3783), dimensions={2}, to_apply=%region_198.6652
  %multiply.2515 = s32[1,4096,8]{2,1,0} multiply(%reduce.353, %reduce.352)
  %broadcast.6390 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2515), dimensions={0,1,2}
  %iota.1782 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1367 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6390, %iota.1782), direction=EQ
  %convert.1024 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1367)
  %convert.1025 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1024)
  %multiply.2516 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6389, %convert.1025)
  %slice.271 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2516), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2572 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.271)
  %compare.1368 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.271, %broadcast.5439), direction=NE
  %copy.2573 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1368)
  %convert.1026 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2573)
  %dot.338 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1026, %copy.2568), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13248 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.338)
  %all-to-all.34 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13248), channel_id=270, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.51 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.34), dimensions={1,0,2,3,4}
  %reshape.13249 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.51)
  %transpose.52 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13249), dimensions={1,0,2,3}
  %copy.2574 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.52)
  %param.184 = bf16[1,4096,14336]{2,1,0} parameter(93), sharding={devices=[8,1,1]<=[8]}
  %copy.2575 = bf16[1,4096,14336]{2,1,0} copy(%param.184)
  %dot.339 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2574, %copy.2575), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2576 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.339)
  %negate.176 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2576)
  %exponential.161 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.176)
  %add.3010 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.161, %broadcast.5440)
  %divide.588 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3010)
  %multiply.2520 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2576, %divide.588)
  %param.185 = bf16[1,4096,14336]{2,1,0} parameter(94), sharding={devices=[8,1,1]<=[8]}
  %copy.2577 = bf16[1,4096,14336]{2,1,0} copy(%param.185)
  %dot.340 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2574, %copy.2577), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2578 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.340)
  %multiply.2522 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2520, %copy.2578)
  %param.186 = bf16[1,14336,4096]{2,1,0} parameter(95), sharding={devices=[8,1,1]<=[8]}
  %copy.2579 = bf16[1,14336,4096]{2,1,0} copy(%param.186)
  %dot.341 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2522, %copy.2579), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2580 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.341)
  %reshape.13253 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2580)
  %all-to-all.35 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13253), channel_id=271, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.53 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.35), dimensions={1,0,2,3,4}
  %reshape.13254 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.53)
  %dot.342 = bf16[1,4096,4096]{2,1,0} dot(%copy.2572, %reshape.13254), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2581 = bf16[1,4096,4096]{2,1,0} copy(%dot.342)
  %add.3011 = bf16[1,4096,4096]{2,1,0} add(%copy.2581, %add.3001)
  %copy.2582 = bf16[1,4096,4096]{2,1,0} copy(%add.3011)
  %copy.2583 = bf16[1,4096,4096]{2,1,0} copy(%copy.2582)
  %convert.1027 = f32[1,4096,4096]{2,1,0} convert(%copy.2583)
  %multiply.2526 = f32[1,4096,4096]{2,1,0} multiply(%convert.1027, %convert.1027)
  %reduce.354 = f32[1,4096]{1,0} reduce(%multiply.2526, %constant.3956), dimensions={2}, to_apply=%region_199.6691
  %multiply.2527 = f32[1,4096]{1,0} multiply(%reduce.354, %broadcast.5380)
  %add.3012 = f32[1,4096]{1,0} add(%multiply.2527, %broadcast.5381)
  %rsqrt.100 = f32[1,4096]{1,0} rsqrt(%add.3012)
  %broadcast.6396 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.100), dimensions={0,1}
  %multiply.2528 = f32[1,4096,4096]{2,1,0} multiply(%convert.1027, %broadcast.6396)
  %convert.1028 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2528)
  %param.187 = bf16[4096]{0} parameter(107), sharding={replicated}
  %broadcast.6397 = bf16[1,4096,4096]{2,1,0} broadcast(%param.187), dimensions={2}
  %multiply.2529 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1028, %broadcast.6397)
  %copy.2584 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2529)
  %copy.2585 = bf16[1,4096,4096]{2,1,0} copy(%copy.2584)
  %param.188 = bf16[512,32,128]{2,1,0} parameter(110), sharding={devices=[8,1,1]<=[8]}
  %all-gather.127 = bf16[4096,32,128]{2,1,0} all-gather(%param.188), channel_id=272, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.343 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2585, %all-gather.127), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.272 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.343), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2535 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.272, %broadcast.5389)
  %slice.273 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.343), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2537 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.273, %broadcast.5391)
  %subtract.209 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2535, %multiply.2537)
  %multiply.2538 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.273, %broadcast.5389)
  %multiply.2539 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.272, %broadcast.5391)
  %add.3013 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2538, %multiply.2539)
  %concatenate.108 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.209, %add.3013), dimensions={3}
  %copy.2586 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.108)
  %param.189 = bf16[512,8,128]{2,1,0} parameter(108), sharding={devices=[8,1,1]<=[8]}
  %all-gather.128 = bf16[4096,8,128]{2,1,0} all-gather(%param.189), channel_id=273, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.344 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2585, %all-gather.128), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.274 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.344), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2543 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.274, %broadcast.5400)
  %slice.275 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.344), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2545 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.275, %broadcast.5401)
  %subtract.210 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2543, %multiply.2545)
  %multiply.2546 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.275, %broadcast.5400)
  %multiply.2547 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.274, %broadcast.5401)
  %add.3014 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2546, %multiply.2547)
  %concatenate.109 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.210, %add.3014), dimensions={3}
  %copy.2588 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.109)
  %param.190 = bf16[512,8,128]{2,1,0} parameter(111), sharding={devices=[8,1,1]<=[8]}
  %all-gather.129 = bf16[4096,8,128]{2,1,0} all-gather(%param.190), channel_id=274, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.345 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2585, %all-gather.129), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2589 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.345)
  %custom-call.99 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2586, %copy.2588, %copy.2589, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.513 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.99), index=0
  %copy.2590 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.513)
  %param.191 = bf16[32,128,512]{2,1,0} parameter(109), sharding={devices=[1,1,8]<=[8]}
  %all-gather.130 = bf16[32,128,4096]{2,1,0} all-gather(%param.191), channel_id=275, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.346 = bf16[1,4096,4096]{2,1,0} dot(%copy.2590, %all-gather.130), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2591 = bf16[1,4096,4096]{2,1,0} copy(%dot.346)
  %add.3027 = bf16[1,4096,4096]{2,1,0} add(%copy.2583, %copy.2591)
  %convert.1041 = f32[1,4096,4096]{2,1,0} convert(%add.3027)
  %multiply.2549 = f32[1,4096,4096]{2,1,0} multiply(%convert.1041, %convert.1041)
  %reduce.358 = f32[1,4096]{1,0} reduce(%multiply.2549, %constant.3956), dimensions={2}, to_apply=%region_203.6851
  %multiply.2550 = f32[1,4096]{1,0} multiply(%reduce.358, %broadcast.5380)
  %add.3028 = f32[1,4096]{1,0} add(%multiply.2550, %broadcast.5381)
  %rsqrt.101 = f32[1,4096]{1,0} rsqrt(%add.3028)
  %broadcast.6433 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.101), dimensions={0,1}
  %multiply.2551 = f32[1,4096,4096]{2,1,0} multiply(%convert.1041, %broadcast.6433)
  %convert.1042 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2551)
  %param.192 = bf16[4096]{0} parameter(106), sharding={replicated}
  %broadcast.6435 = bf16[1,4096,4096]{2,1,0} broadcast(%param.192), dimensions={2}
  %multiply.2552 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1042, %broadcast.6435)
  %copy.2592 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2552)
  %param.193 = bf16[512,8]{1,0} parameter(102), sharding={devices=[8,1]<=[8]}
  %all-gather.131 = bf16[4096,8]{1,0} all-gather(%param.193), channel_id=276, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.347 = bf16[1,4096,8]{2,1,0} dot(%copy.2592, %all-gather.131), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2593 = bf16[1,4096,8]{2,1,0} copy(%dot.347)
  %reshape.13306 = bf16[4096,8]{1,0} reshape(%copy.2593)
  %custom-call.100 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.13306), custom_call_target="TopK", called_computations={%compare-greater-than.18.clone}
  %get-tuple-element.514 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.100), index=0
  %get-tuple-element.515 = s32[4096,2]{1,0} get-tuple-element(%custom-call.100), index=1
  %add.3029 = s32[4096,2]{1,0} add(%get-tuple-element.515, %broadcast.5420)
  %sort.120 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.514, %add.3029), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.18
  %get-tuple-element.517 = s32[4096,2]{1,0} get-tuple-element(%sort.120), index=1
  %slice.278 = s32[4096,2]{1,0} slice(%get-tuple-element.517), slice={[0:4096], [0:2]}
  %all-gather.133 = s32[32768,2]{1,0} all-gather(%slice.278), channel_id=278, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.545 = s32[4096,2]{1,0} dynamic-slice(%all-gather.133, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.13309 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.545)
  %compare.1401 = pred[1,4096,2]{2,1,0} compare(%reshape.13309, %broadcast.5421), direction=LT
  %add.3030 = s32[1,4096,2]{2,1,0} add(%reshape.13309, %broadcast.5422)
  %select.779 = s32[1,4096,2]{2,1,0} select(%compare.1401, %add.3030, %reshape.13309)
  %reshape.13310 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.779)
  %concatenate.110 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1577, %reshape.13310), dimensions={3}
  %subtract.216 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.110, %broadcast.5433)
  %scatter.224 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.216, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_206.6925
  %gather.18 = u32[1,4096,2]{2,1,0} gather(%scatter.224, %subtract.216), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1402 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.18), direction=EQ
  %get-tuple-element.516 = bf16[4096,2]{1,0} get-tuple-element(%sort.120), index=0
  %slice.277 = bf16[4096,2]{1,0} slice(%get-tuple-element.516), slice={[0:4096], [0:2]}
  %all-gather.132 = bf16[32768,2]{1,0} all-gather(%slice.277), channel_id=277, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.555 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.132, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1045 = f32[4096,2]{1,0} convert(%dynamic-slice.555)
  %reshape.13328 = f32[1,4096,2]{2,1,0} reshape(%convert.1045)
  %reduce.359 = f32[4096]{0} reduce(%convert.1045, %constant.4073), dimensions={1}, to_apply=%region_204.6877
  %reshape.13329 = f32[1,4096]{1,0} reshape(%reduce.359)
  %broadcast.6447 = f32[1,4096,2]{2,1,0} broadcast(%reshape.13329), dimensions={0,1}
  %subtract.215 = f32[1,4096,2]{2,1,0} subtract(%reshape.13328, %broadcast.6447)
  %exponential.162 = f32[1,4096,2]{2,1,0} exponential(%subtract.215)
  %reduce.360 = f32[1,4096]{1,0} reduce(%exponential.162, %constant.3956), dimensions={2}, to_apply=%region_205.6889
  %broadcast.6448 = f32[1,4096,2]{2,1,0} broadcast(%reduce.360), dimensions={0,1}
  %divide.593 = f32[1,4096,2]{2,1,0} divide(%exponential.162, %broadcast.6448)
  %convert.1046 = bf16[1,4096,2]{2,1,0} convert(%divide.593)
  %select.780 = bf16[1,4096,2]{2,1,0} select(%compare.1402, %convert.1046, %broadcast.5432)
  %scatter.226 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.216, %select.780), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_207.6933
  %broadcast.6450 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.13309), dimensions={0,1,2}
  %iota.1790 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1403 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6450, %iota.1790), direction=EQ
  %convert.1047 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1403)
  %reshape.13340 = s32[1,8192,8]{2,1,0} reshape(%convert.1047)
  %copy.2594 = s32[1,8192,8]{2,1,0} copy(%reshape.13340)
  %reduce-window.247 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2594, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.18
  %reshape.13342 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.247)
  %copy.2595 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13342)
  %compare.1404 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2595, %broadcast.5435), direction=LE
  %select.781 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1404, %convert.1047, %broadcast.5436)
  %reduce.361 = s32[1,4096,8]{2,1,0} reduce(%select.781, %constant.3783), dimensions={2}, to_apply=%region_208.6947
  %convert.1048 = bf16[1,4096,8]{2,1,0} convert(%reduce.361)
  %multiply.2558 = bf16[1,4096,8]{2,1,0} multiply(%scatter.226, %convert.1048)
  %broadcast.6452 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2558), dimensions={0,1,2}
  %multiply.2559 = s32[1,8192,8]{2,1,0} multiply(%copy.2594, %reduce-window.247)
  %reshape.13343 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2559)
  %reduce.362 = s32[1,4096,8]{2,1,0} reduce(%reshape.13343, %constant.3783), dimensions={2}, to_apply=%region_209.6956
  %multiply.2560 = s32[1,4096,8]{2,1,0} multiply(%reduce.362, %reduce.361)
  %broadcast.6453 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2560), dimensions={0,1,2}
  %iota.1791 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1405 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6453, %iota.1791), direction=EQ
  %convert.1049 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1405)
  %convert.1050 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1049)
  %multiply.2561 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6452, %convert.1050)
  %slice.279 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2561), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2596 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.279)
  %compare.1406 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.279, %broadcast.5439), direction=NE
  %copy.2597 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1406)
  %convert.1051 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2597)
  %dot.348 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1051, %copy.2592), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13346 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.348)
  %all-to-all.36 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13346), channel_id=285, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.54 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.36), dimensions={1,0,2,3,4}
  %reshape.13347 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.54)
  %transpose.55 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13347), dimensions={1,0,2,3}
  %copy.2598 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.55)
  %param.194 = bf16[1,4096,14336]{2,1,0} parameter(103), sharding={devices=[8,1,1]<=[8]}
  %copy.2599 = bf16[1,4096,14336]{2,1,0} copy(%param.194)
  %dot.349 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2598, %copy.2599), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2600 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.349)
  %negate.177 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2600)
  %exponential.163 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.177)
  %add.3036 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.163, %broadcast.5440)
  %divide.594 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3036)
  %multiply.2565 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2600, %divide.594)
  %param.195 = bf16[1,4096,14336]{2,1,0} parameter(104), sharding={devices=[8,1,1]<=[8]}
  %copy.2601 = bf16[1,4096,14336]{2,1,0} copy(%param.195)
  %dot.350 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2598, %copy.2601), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2602 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.350)
  %multiply.2566 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2565, %copy.2602)
  %param.196 = bf16[1,14336,4096]{2,1,0} parameter(105), sharding={devices=[8,1,1]<=[8]}
  %copy.2603 = bf16[1,14336,4096]{2,1,0} copy(%param.196)
  %dot.351 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2566, %copy.2603), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2604 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.351)
  %reshape.13350 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2604)
  %all-to-all.37 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13350), channel_id=286, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.56 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.37), dimensions={1,0,2,3,4}
  %reshape.13351 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.56)
  %dot.352 = bf16[1,4096,4096]{2,1,0} dot(%copy.2596, %reshape.13351), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2605 = bf16[1,4096,4096]{2,1,0} copy(%dot.352)
  %add.3037 = bf16[1,4096,4096]{2,1,0} add(%copy.2605, %add.3027)
  %copy.2606 = bf16[1,4096,4096]{2,1,0} copy(%add.3037)
  %copy.2607 = bf16[1,4096,4096]{2,1,0} copy(%copy.2606)
  %convert.1052 = f32[1,4096,4096]{2,1,0} convert(%copy.2607)
  %multiply.2569 = f32[1,4096,4096]{2,1,0} multiply(%convert.1052, %convert.1052)
  %reduce.363 = f32[1,4096]{1,0} reduce(%multiply.2569, %constant.3956), dimensions={2}, to_apply=%region_210.6995
  %multiply.2570 = f32[1,4096]{1,0} multiply(%reduce.363, %broadcast.5380)
  %add.3038 = f32[1,4096]{1,0} add(%multiply.2570, %broadcast.5381)
  %rsqrt.102 = f32[1,4096]{1,0} rsqrt(%add.3038)
  %broadcast.6458 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.102), dimensions={0,1}
  %multiply.2571 = f32[1,4096,4096]{2,1,0} multiply(%convert.1052, %broadcast.6458)
  %convert.1053 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2571)
  %param.197 = bf16[4096]{0} parameter(117), sharding={replicated}
  %broadcast.6461 = bf16[1,4096,4096]{2,1,0} broadcast(%param.197), dimensions={2}
  %multiply.2572 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1053, %broadcast.6461)
  %copy.2608 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2572)
  %copy.2609 = bf16[1,4096,4096]{2,1,0} copy(%copy.2608)
  %param.198 = bf16[512,32,128]{2,1,0} parameter(120), sharding={devices=[8,1,1]<=[8]}
  %all-gather.134 = bf16[4096,32,128]{2,1,0} all-gather(%param.198), channel_id=287, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.353 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2609, %all-gather.134), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.280 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.353), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2576 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.280, %broadcast.5389)
  %slice.281 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.353), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2578 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.281, %broadcast.5391)
  %subtract.217 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2576, %multiply.2578)
  %multiply.2579 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.281, %broadcast.5389)
  %multiply.2580 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.280, %broadcast.5391)
  %add.3039 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2579, %multiply.2580)
  %concatenate.114 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.217, %add.3039), dimensions={3}
  %copy.2610 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.114)
  %param.199 = bf16[512,8,128]{2,1,0} parameter(118), sharding={devices=[8,1,1]<=[8]}
  %all-gather.135 = bf16[4096,8,128]{2,1,0} all-gather(%param.199), channel_id=288, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.354 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2609, %all-gather.135), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.282 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.354), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2584 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.282, %broadcast.5400)
  %slice.283 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.354), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2586 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.283, %broadcast.5401)
  %subtract.218 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2584, %multiply.2586)
  %multiply.2587 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.283, %broadcast.5400)
  %multiply.2588 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.282, %broadcast.5401)
  %add.3040 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2587, %multiply.2588)
  %concatenate.115 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.218, %add.3040), dimensions={3}
  %copy.2612 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.115)
  %param.200 = bf16[512,8,128]{2,1,0} parameter(121), sharding={devices=[8,1,1]<=[8]}
  %all-gather.136 = bf16[4096,8,128]{2,1,0} all-gather(%param.200), channel_id=289, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.355 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2609, %all-gather.136), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2613 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.355)
  %custom-call.101 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2610, %copy.2612, %copy.2613, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.527 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.101), index=0
  %copy.2614 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.527)
  %param.201 = bf16[32,128,512]{2,1,0} parameter(119), sharding={devices=[1,1,8]<=[8]}
  %all-gather.137 = bf16[32,128,4096]{2,1,0} all-gather(%param.201), channel_id=290, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.356 = bf16[1,4096,4096]{2,1,0} dot(%copy.2614, %all-gather.137), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2615 = bf16[1,4096,4096]{2,1,0} copy(%dot.356)
  %add.3055 = bf16[1,4096,4096]{2,1,0} add(%copy.2607, %copy.2615)
  %convert.1066 = f32[1,4096,4096]{2,1,0} convert(%add.3055)
  %multiply.2590 = f32[1,4096,4096]{2,1,0} multiply(%convert.1066, %convert.1066)
  %reduce.367 = f32[1,4096]{1,0} reduce(%multiply.2590, %constant.3956), dimensions={2}, to_apply=%region_214.7155
  %multiply.2592 = f32[1,4096]{1,0} multiply(%reduce.367, %broadcast.5380)
  %add.3056 = f32[1,4096]{1,0} add(%multiply.2592, %broadcast.5381)
  %rsqrt.103 = f32[1,4096]{1,0} rsqrt(%add.3056)
  %broadcast.6502 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.103), dimensions={0,1}
  %multiply.2593 = f32[1,4096,4096]{2,1,0} multiply(%convert.1066, %broadcast.6502)
  %convert.1067 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2593)
  %param.202 = bf16[4096]{0} parameter(116), sharding={replicated}
  %broadcast.6504 = bf16[1,4096,4096]{2,1,0} broadcast(%param.202), dimensions={2}
  %multiply.2594 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1067, %broadcast.6504)
  %copy.2616 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2594)
  %param.203 = bf16[512,8]{1,0} parameter(112), sharding={devices=[8,1]<=[8]}
  %all-gather.138 = bf16[4096,8]{1,0} all-gather(%param.203), channel_id=291, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.357 = bf16[1,4096,8]{2,1,0} dot(%copy.2616, %all-gather.138), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2617 = bf16[1,4096,8]{2,1,0} copy(%dot.357)
  %reshape.13407 = bf16[4096,8]{1,0} reshape(%copy.2617)
  %custom-call.102 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.13407), custom_call_target="TopK", called_computations={%compare-greater-than.19.clone}
  %get-tuple-element.528 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.102), index=0
  %get-tuple-element.529 = s32[4096,2]{1,0} get-tuple-element(%custom-call.102), index=1
  %add.3057 = s32[4096,2]{1,0} add(%get-tuple-element.529, %broadcast.5420)
  %sort.123 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.528, %add.3057), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.19
  %get-tuple-element.531 = s32[4096,2]{1,0} get-tuple-element(%sort.123), index=1
  %slice.286 = s32[4096,2]{1,0} slice(%get-tuple-element.531), slice={[0:4096], [0:2]}
  %all-gather.140 = s32[32768,2]{1,0} all-gather(%slice.286), channel_id=293, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.573 = s32[4096,2]{1,0} dynamic-slice(%all-gather.140, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.13410 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.573)
  %compare.1438 = pred[1,4096,2]{2,1,0} compare(%reshape.13410, %broadcast.5421), direction=LT
  %add.3058 = s32[1,4096,2]{2,1,0} add(%reshape.13410, %broadcast.5422)
  %select.803 = s32[1,4096,2]{2,1,0} select(%compare.1438, %add.3058, %reshape.13410)
  %reshape.13411 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.803)
  %concatenate.116 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1575, %reshape.13411), dimensions={3}
  %subtract.224 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.116, %broadcast.5433)
  %scatter.238 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.224, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_217.7229
  %gather.19 = u32[1,4096,2]{2,1,0} gather(%scatter.238, %subtract.224), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1439 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.19), direction=EQ
  %get-tuple-element.530 = bf16[4096,2]{1,0} get-tuple-element(%sort.123), index=0
  %slice.285 = bf16[4096,2]{1,0} slice(%get-tuple-element.530), slice={[0:4096], [0:2]}
  %all-gather.139 = bf16[32768,2]{1,0} all-gather(%slice.285), channel_id=292, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.583 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.139, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1070 = f32[4096,2]{1,0} convert(%dynamic-slice.583)
  %reshape.13428 = f32[1,4096,2]{2,1,0} reshape(%convert.1070)
  %reduce.368 = f32[4096]{0} reduce(%convert.1070, %constant.4073), dimensions={1}, to_apply=%region_215.7181
  %reshape.13430 = f32[1,4096]{1,0} reshape(%reduce.368)
  %broadcast.6514 = f32[1,4096,2]{2,1,0} broadcast(%reshape.13430), dimensions={0,1}
  %subtract.223 = f32[1,4096,2]{2,1,0} subtract(%reshape.13428, %broadcast.6514)
  %exponential.164 = f32[1,4096,2]{2,1,0} exponential(%subtract.223)
  %reduce.369 = f32[1,4096]{1,0} reduce(%exponential.164, %constant.3956), dimensions={2}, to_apply=%region_216.7193
  %broadcast.6515 = f32[1,4096,2]{2,1,0} broadcast(%reduce.369), dimensions={0,1}
  %divide.599 = f32[1,4096,2]{2,1,0} divide(%exponential.164, %broadcast.6515)
  %convert.1071 = bf16[1,4096,2]{2,1,0} convert(%divide.599)
  %select.804 = bf16[1,4096,2]{2,1,0} select(%compare.1439, %convert.1071, %broadcast.5432)
  %scatter.239 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.224, %select.804), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_218.7237
  %broadcast.6517 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.13410), dimensions={0,1,2}
  %iota.1799 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1440 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6517, %iota.1799), direction=EQ
  %convert.1072 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1440)
  %reshape.13439 = s32[1,8192,8]{2,1,0} reshape(%convert.1072)
  %copy.2618 = s32[1,8192,8]{2,1,0} copy(%reshape.13439)
  %reduce-window.250 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2618, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.19
  %reshape.13441 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.250)
  %copy.2619 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13441)
  %compare.1441 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2619, %broadcast.5435), direction=LE
  %select.805 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1441, %convert.1072, %broadcast.5436)
  %reduce.370 = s32[1,4096,8]{2,1,0} reduce(%select.805, %constant.3783), dimensions={2}, to_apply=%region_219.7251
  %convert.1073 = bf16[1,4096,8]{2,1,0} convert(%reduce.370)
  %multiply.2600 = bf16[1,4096,8]{2,1,0} multiply(%scatter.239, %convert.1073)
  %broadcast.6519 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2600), dimensions={0,1,2}
  %multiply.2601 = s32[1,8192,8]{2,1,0} multiply(%copy.2618, %reduce-window.250)
  %reshape.13442 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2601)
  %reduce.371 = s32[1,4096,8]{2,1,0} reduce(%reshape.13442, %constant.3783), dimensions={2}, to_apply=%region_220.7260
  %multiply.2602 = s32[1,4096,8]{2,1,0} multiply(%reduce.371, %reduce.370)
  %broadcast.6520 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2602), dimensions={0,1,2}
  %iota.1800 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1442 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6520, %iota.1800), direction=EQ
  %convert.1074 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1442)
  %convert.1075 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1074)
  %multiply.2603 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6519, %convert.1075)
  %slice.287 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2603), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2620 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.287)
  %compare.1443 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.287, %broadcast.5439), direction=NE
  %copy.2621 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1443)
  %convert.1076 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2621)
  %dot.358 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1076, %copy.2616), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13447 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.358)
  %all-to-all.38 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13447), channel_id=300, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.57 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.38), dimensions={1,0,2,3,4}
  %reshape.13448 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.57)
  %transpose.58 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13448), dimensions={1,0,2,3}
  %copy.2622 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.58)
  %param.204 = bf16[1,4096,14336]{2,1,0} parameter(113), sharding={devices=[8,1,1]<=[8]}
  %copy.2623 = bf16[1,4096,14336]{2,1,0} copy(%param.204)
  %dot.359 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2622, %copy.2623), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2624 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.359)
  %negate.178 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2624)
  %exponential.165 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.178)
  %add.3063 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.165, %broadcast.5440)
  %divide.600 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3063)
  %multiply.2608 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2624, %divide.600)
  %param.205 = bf16[1,4096,14336]{2,1,0} parameter(114), sharding={devices=[8,1,1]<=[8]}
  %copy.2625 = bf16[1,4096,14336]{2,1,0} copy(%param.205)
  %dot.360 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2622, %copy.2625), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2626 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.360)
  %multiply.2609 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2608, %copy.2626)
  %param.206 = bf16[1,14336,4096]{2,1,0} parameter(115), sharding={devices=[8,1,1]<=[8]}
  %copy.2627 = bf16[1,14336,4096]{2,1,0} copy(%param.206)
  %dot.361 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2609, %copy.2627), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2628 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.361)
  %reshape.13451 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2628)
  %all-to-all.39 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13451), channel_id=301, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.59 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.39), dimensions={1,0,2,3,4}
  %reshape.13452 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.59)
  %dot.362 = bf16[1,4096,4096]{2,1,0} dot(%copy.2620, %reshape.13452), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2629 = bf16[1,4096,4096]{2,1,0} copy(%dot.362)
  %add.3064 = bf16[1,4096,4096]{2,1,0} add(%copy.2629, %add.3055)
  %copy.2630 = bf16[1,4096,4096]{2,1,0} copy(%add.3064)
  %copy.2631 = bf16[1,4096,4096]{2,1,0} copy(%copy.2630)
  %convert.1077 = f32[1,4096,4096]{2,1,0} convert(%copy.2631)
  %multiply.2613 = f32[1,4096,4096]{2,1,0} multiply(%convert.1077, %convert.1077)
  %reduce.372 = f32[1,4096]{1,0} reduce(%multiply.2613, %constant.3956), dimensions={2}, to_apply=%region_221.7299
  %multiply.2614 = f32[1,4096]{1,0} multiply(%reduce.372, %broadcast.5380)
  %add.3065 = f32[1,4096]{1,0} add(%multiply.2614, %broadcast.5381)
  %rsqrt.104 = f32[1,4096]{1,0} rsqrt(%add.3065)
  %broadcast.6524 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.104), dimensions={0,1}
  %multiply.2615 = f32[1,4096,4096]{2,1,0} multiply(%convert.1077, %broadcast.6524)
  %convert.1078 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2615)
  %param.207 = bf16[4096]{0} parameter(137), sharding={replicated}
  %broadcast.6525 = bf16[1,4096,4096]{2,1,0} broadcast(%param.207), dimensions={2}
  %multiply.2616 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1078, %broadcast.6525)
  %copy.2632 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2616)
  %copy.2633 = bf16[1,4096,4096]{2,1,0} copy(%copy.2632)
  %param.208 = bf16[512,32,128]{2,1,0} parameter(140), sharding={devices=[8,1,1]<=[8]}
  %all-gather.141 = bf16[4096,32,128]{2,1,0} all-gather(%param.208), channel_id=302, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.363 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2633, %all-gather.141), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.288 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.363), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2620 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.288, %broadcast.5389)
  %slice.289 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.363), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2622 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.289, %broadcast.5391)
  %subtract.225 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2620, %multiply.2622)
  %multiply.2623 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.289, %broadcast.5389)
  %multiply.2624 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.288, %broadcast.5391)
  %add.3066 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2623, %multiply.2624)
  %concatenate.120 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.225, %add.3066), dimensions={3}
  %copy.2634 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.120)
  %param.209 = bf16[512,8,128]{2,1,0} parameter(138), sharding={devices=[8,1,1]<=[8]}
  %all-gather.142 = bf16[4096,8,128]{2,1,0} all-gather(%param.209), channel_id=303, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.364 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2633, %all-gather.142), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.290 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.364), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2628 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.290, %broadcast.5400)
  %slice.291 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.364), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2630 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.291, %broadcast.5401)
  %subtract.226 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2628, %multiply.2630)
  %multiply.2631 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.291, %broadcast.5400)
  %multiply.2632 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.290, %broadcast.5401)
  %add.3067 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2631, %multiply.2632)
  %concatenate.121 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.226, %add.3067), dimensions={3}
  %copy.2636 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.121)
  %param.210 = bf16[512,8,128]{2,1,0} parameter(141), sharding={devices=[8,1,1]<=[8]}
  %all-gather.143 = bf16[4096,8,128]{2,1,0} all-gather(%param.210), channel_id=304, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.365 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2633, %all-gather.143), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2637 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.365)
  %custom-call.103 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2634, %copy.2636, %copy.2637, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.541 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.103), index=0
  %copy.2638 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.541)
  %param.211 = bf16[32,128,512]{2,1,0} parameter(139), sharding={devices=[1,1,8]<=[8]}
  %all-gather.144 = bf16[32,128,4096]{2,1,0} all-gather(%param.211), channel_id=305, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.366 = bf16[1,4096,4096]{2,1,0} dot(%copy.2638, %all-gather.144), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2639 = bf16[1,4096,4096]{2,1,0} copy(%dot.366)
  %add.3080 = bf16[1,4096,4096]{2,1,0} add(%copy.2631, %copy.2639)
  %convert.1091 = f32[1,4096,4096]{2,1,0} convert(%add.3080)
  %multiply.2634 = f32[1,4096,4096]{2,1,0} multiply(%convert.1091, %convert.1091)
  %reduce.376 = f32[1,4096]{1,0} reduce(%multiply.2634, %constant.3956), dimensions={2}, to_apply=%region_225.7459
  %multiply.2635 = f32[1,4096]{1,0} multiply(%reduce.376, %broadcast.5380)
  %add.3081 = f32[1,4096]{1,0} add(%multiply.2635, %broadcast.5381)
  %rsqrt.105 = f32[1,4096]{1,0} rsqrt(%add.3081)
  %broadcast.6554 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.105), dimensions={0,1}
  %multiply.2636 = f32[1,4096,4096]{2,1,0} multiply(%convert.1091, %broadcast.6554)
  %convert.1092 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2636)
  %param.212 = bf16[4096]{0} parameter(136), sharding={replicated}
  %broadcast.6556 = bf16[1,4096,4096]{2,1,0} broadcast(%param.212), dimensions={2}
  %multiply.2637 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1092, %broadcast.6556)
  %copy.2640 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2637)
  %param.213 = bf16[512,8]{1,0} parameter(132), sharding={devices=[8,1]<=[8]}
  %all-gather.145 = bf16[4096,8]{1,0} all-gather(%param.213), channel_id=306, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.367 = bf16[1,4096,8]{2,1,0} dot(%copy.2640, %all-gather.145), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2641 = bf16[1,4096,8]{2,1,0} copy(%dot.367)
  %reshape.13504 = bf16[4096,8]{1,0} reshape(%copy.2641)
  %custom-call.104 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.13504), custom_call_target="TopK", called_computations={%compare-greater-than.20.clone}
  %get-tuple-element.542 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.104), index=0
  %get-tuple-element.543 = s32[4096,2]{1,0} get-tuple-element(%custom-call.104), index=1
  %add.3082 = s32[4096,2]{1,0} add(%get-tuple-element.543, %broadcast.5420)
  %sort.126 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.542, %add.3082), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.20
  %get-tuple-element.545 = s32[4096,2]{1,0} get-tuple-element(%sort.126), index=1
  %slice.294 = s32[4096,2]{1,0} slice(%get-tuple-element.545), slice={[0:4096], [0:2]}
  %all-gather.147 = s32[32768,2]{1,0} all-gather(%slice.294), channel_id=308, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.601 = s32[4096,2]{1,0} dynamic-slice(%all-gather.147, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.13507 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.601)
  %compare.1474 = pred[1,4096,2]{2,1,0} compare(%reshape.13507, %broadcast.5421), direction=LT
  %add.3083 = s32[1,4096,2]{2,1,0} add(%reshape.13507, %broadcast.5422)
  %select.827 = s32[1,4096,2]{2,1,0} select(%compare.1474, %add.3083, %reshape.13507)
  %reshape.13508 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.827)
  %concatenate.122 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1573, %reshape.13508), dimensions={3}
  %subtract.232 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.122, %broadcast.5433)
  %scatter.250 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.232, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_228.7533
  %gather.20 = u32[1,4096,2]{2,1,0} gather(%scatter.250, %subtract.232), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1476 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.20), direction=EQ
  %get-tuple-element.544 = bf16[4096,2]{1,0} get-tuple-element(%sort.126), index=0
  %slice.293 = bf16[4096,2]{1,0} slice(%get-tuple-element.544), slice={[0:4096], [0:2]}
  %all-gather.146 = bf16[32768,2]{1,0} all-gather(%slice.293), channel_id=307, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.611 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.146, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1095 = f32[4096,2]{1,0} convert(%dynamic-slice.611)
  %reshape.13528 = f32[1,4096,2]{2,1,0} reshape(%convert.1095)
  %reduce.377 = f32[4096]{0} reduce(%convert.1095, %constant.4073), dimensions={1}, to_apply=%region_226.7485
  %reshape.13529 = f32[1,4096]{1,0} reshape(%reduce.377)
  %broadcast.6565 = f32[1,4096,2]{2,1,0} broadcast(%reshape.13529), dimensions={0,1}
  %subtract.231 = f32[1,4096,2]{2,1,0} subtract(%reshape.13528, %broadcast.6565)
  %exponential.166 = f32[1,4096,2]{2,1,0} exponential(%subtract.231)
  %reduce.378 = f32[1,4096]{1,0} reduce(%exponential.166, %constant.3956), dimensions={2}, to_apply=%region_227.7497
  %broadcast.6566 = f32[1,4096,2]{2,1,0} broadcast(%reduce.378), dimensions={0,1}
  %divide.605 = f32[1,4096,2]{2,1,0} divide(%exponential.166, %broadcast.6566)
  %convert.1096 = bf16[1,4096,2]{2,1,0} convert(%divide.605)
  %select.828 = bf16[1,4096,2]{2,1,0} select(%compare.1476, %convert.1096, %broadcast.5432)
  %scatter.251 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.232, %select.828), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_229.7541
  %broadcast.6568 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.13507), dimensions={0,1,2}
  %iota.1808 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1477 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6568, %iota.1808), direction=EQ
  %convert.1097 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1477)
  %reshape.13541 = s32[1,8192,8]{2,1,0} reshape(%convert.1097)
  %copy.2642 = s32[1,8192,8]{2,1,0} copy(%reshape.13541)
  %reduce-window.253 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2642, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.20
  %reshape.13543 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.253)
  %copy.2643 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13543)
  %compare.1478 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2643, %broadcast.5435), direction=LE
  %select.829 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1478, %convert.1097, %broadcast.5436)
  %reduce.379 = s32[1,4096,8]{2,1,0} reduce(%select.829, %constant.3783), dimensions={2}, to_apply=%region_230.7555
  %convert.1098 = bf16[1,4096,8]{2,1,0} convert(%reduce.379)
  %multiply.2643 = bf16[1,4096,8]{2,1,0} multiply(%scatter.251, %convert.1098)
  %broadcast.6570 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2643), dimensions={0,1,2}
  %multiply.2644 = s32[1,8192,8]{2,1,0} multiply(%copy.2642, %reduce-window.253)
  %reshape.13545 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2644)
  %reduce.380 = s32[1,4096,8]{2,1,0} reduce(%reshape.13545, %constant.3783), dimensions={2}, to_apply=%region_231.7564
  %multiply.2645 = s32[1,4096,8]{2,1,0} multiply(%reduce.380, %reduce.379)
  %broadcast.6571 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2645), dimensions={0,1,2}
  %iota.1809 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1479 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6571, %iota.1809), direction=EQ
  %convert.1099 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1479)
  %convert.1100 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1099)
  %multiply.2646 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6570, %convert.1100)
  %slice.295 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2646), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2644 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.295)
  %compare.1480 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.295, %broadcast.5439), direction=NE
  %copy.2645 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1480)
  %convert.1101 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2645)
  %dot.368 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1101, %copy.2640), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13548 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.368)
  %all-to-all.40 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13548), channel_id=315, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.60 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.40), dimensions={1,0,2,3,4}
  %reshape.13550 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.60)
  %transpose.61 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13550), dimensions={1,0,2,3}
  %copy.2646 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.61)
  %param.214 = bf16[1,4096,14336]{2,1,0} parameter(133), sharding={devices=[8,1,1]<=[8]}
  %copy.2647 = bf16[1,4096,14336]{2,1,0} copy(%param.214)
  %dot.369 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2646, %copy.2647), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2648 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.369)
  %negate.179 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2648)
  %exponential.167 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.179)
  %add.3088 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.167, %broadcast.5440)
  %divide.606 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3088)
  %multiply.2650 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2648, %divide.606)
  %param.215 = bf16[1,4096,14336]{2,1,0} parameter(134), sharding={devices=[8,1,1]<=[8]}
  %copy.2649 = bf16[1,4096,14336]{2,1,0} copy(%param.215)
  %dot.370 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2646, %copy.2649), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2650 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.370)
  %multiply.2651 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2650, %copy.2650)
  %param.216 = bf16[1,14336,4096]{2,1,0} parameter(135), sharding={devices=[8,1,1]<=[8]}
  %copy.2651 = bf16[1,14336,4096]{2,1,0} copy(%param.216)
  %dot.371 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2651, %copy.2651), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2652 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.371)
  %reshape.13553 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2652)
  %all-to-all.41 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13553), channel_id=316, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.62 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.41), dimensions={1,0,2,3,4}
  %reshape.13554 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.62)
  %dot.372 = bf16[1,4096,4096]{2,1,0} dot(%copy.2644, %reshape.13554), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2653 = bf16[1,4096,4096]{2,1,0} copy(%dot.372)
  %add.3089 = bf16[1,4096,4096]{2,1,0} add(%copy.2653, %add.3080)
  %copy.2654 = bf16[1,4096,4096]{2,1,0} copy(%add.3089)
  %copy.2655 = bf16[1,4096,4096]{2,1,0} copy(%copy.2654)
  %convert.1102 = f32[1,4096,4096]{2,1,0} convert(%copy.2655)
  %multiply.2654 = f32[1,4096,4096]{2,1,0} multiply(%convert.1102, %convert.1102)
  %reduce.381 = f32[1,4096]{1,0} reduce(%multiply.2654, %constant.3956), dimensions={2}, to_apply=%region_232.7603
  %multiply.2655 = f32[1,4096]{1,0} multiply(%reduce.381, %broadcast.5380)
  %add.3090 = f32[1,4096]{1,0} add(%multiply.2655, %broadcast.5381)
  %rsqrt.106 = f32[1,4096]{1,0} rsqrt(%add.3090)
  %broadcast.6575 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.106), dimensions={0,1}
  %multiply.2656 = f32[1,4096,4096]{2,1,0} multiply(%convert.1102, %broadcast.6575)
  %convert.1103 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2656)
  %param.217 = bf16[4096]{0} parameter(147), sharding={replicated}
  %broadcast.6576 = bf16[1,4096,4096]{2,1,0} broadcast(%param.217), dimensions={2}
  %multiply.2657 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1103, %broadcast.6576)
  %copy.2656 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2657)
  %copy.2657 = bf16[1,4096,4096]{2,1,0} copy(%copy.2656)
  %param.218 = bf16[512,32,128]{2,1,0} parameter(150), sharding={devices=[8,1,1]<=[8]}
  %all-gather.148 = bf16[4096,32,128]{2,1,0} all-gather(%param.218), channel_id=317, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.373 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2657, %all-gather.148), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.296 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.373), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2661 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.296, %broadcast.5389)
  %slice.297 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.373), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2663 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.297, %broadcast.5391)
  %subtract.233 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2661, %multiply.2663)
  %multiply.2664 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.297, %broadcast.5389)
  %multiply.2665 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.296, %broadcast.5391)
  %add.3091 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2664, %multiply.2665)
  %concatenate.126 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.233, %add.3091), dimensions={3}
  %copy.2658 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.126)
  %param.219 = bf16[512,8,128]{2,1,0} parameter(148), sharding={devices=[8,1,1]<=[8]}
  %all-gather.149 = bf16[4096,8,128]{2,1,0} all-gather(%param.219), channel_id=318, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.374 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2657, %all-gather.149), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.298 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.374), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2669 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.298, %broadcast.5400)
  %slice.299 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.374), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2671 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.299, %broadcast.5401)
  %subtract.234 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2669, %multiply.2671)
  %multiply.2672 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.299, %broadcast.5400)
  %multiply.2673 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.298, %broadcast.5401)
  %add.3092 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2672, %multiply.2673)
  %concatenate.127 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.234, %add.3092), dimensions={3}
  %copy.2660 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.127)
  %param.220 = bf16[512,8,128]{2,1,0} parameter(151), sharding={devices=[8,1,1]<=[8]}
  %all-gather.150 = bf16[4096,8,128]{2,1,0} all-gather(%param.220), channel_id=319, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.375 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2657, %all-gather.150), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2661 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.375)
  %custom-call.105 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2658, %copy.2660, %copy.2661, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.555 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.105), index=0
  %copy.2662 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.555)
  %param.221 = bf16[32,128,512]{2,1,0} parameter(149), sharding={devices=[1,1,8]<=[8]}
  %all-gather.151 = bf16[32,128,4096]{2,1,0} all-gather(%param.221), channel_id=320, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.376 = bf16[1,4096,4096]{2,1,0} dot(%copy.2662, %all-gather.151), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2663 = bf16[1,4096,4096]{2,1,0} copy(%dot.376)
  %add.3106 = bf16[1,4096,4096]{2,1,0} add(%copy.2655, %copy.2663)
  %convert.1116 = f32[1,4096,4096]{2,1,0} convert(%add.3106)
  %multiply.2675 = f32[1,4096,4096]{2,1,0} multiply(%convert.1116, %convert.1116)
  %reduce.385 = f32[1,4096]{1,0} reduce(%multiply.2675, %constant.3956), dimensions={2}, to_apply=%region_236.7763
  %multiply.2676 = f32[1,4096]{1,0} multiply(%reduce.385, %broadcast.5380)
  %add.3107 = f32[1,4096]{1,0} add(%multiply.2676, %broadcast.5381)
  %rsqrt.107 = f32[1,4096]{1,0} rsqrt(%add.3107)
  %broadcast.6612 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.107), dimensions={0,1}
  %multiply.2677 = f32[1,4096,4096]{2,1,0} multiply(%convert.1116, %broadcast.6612)
  %convert.1117 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2677)
  %param.222 = bf16[4096]{0} parameter(146), sharding={replicated}
  %broadcast.6613 = bf16[1,4096,4096]{2,1,0} broadcast(%param.222), dimensions={2}
  %multiply.2678 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1117, %broadcast.6613)
  %copy.2664 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2678)
  %param.223 = bf16[512,8]{1,0} parameter(142), sharding={devices=[8,1]<=[8]}
  %all-gather.152 = bf16[4096,8]{1,0} all-gather(%param.223), channel_id=321, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.377 = bf16[1,4096,8]{2,1,0} dot(%copy.2664, %all-gather.152), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2665 = bf16[1,4096,8]{2,1,0} copy(%dot.377)
  %reshape.13616 = bf16[4096,8]{1,0} reshape(%copy.2665)
  %custom-call.106 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.13616), custom_call_target="TopK", called_computations={%compare-greater-than.21.clone}
  %get-tuple-element.556 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.106), index=0
  %get-tuple-element.557 = s32[4096,2]{1,0} get-tuple-element(%custom-call.106), index=1
  %add.3108 = s32[4096,2]{1,0} add(%get-tuple-element.557, %broadcast.5420)
  %sort.129 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.556, %add.3108), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.21
  %get-tuple-element.559 = s32[4096,2]{1,0} get-tuple-element(%sort.129), index=1
  %slice.302 = s32[4096,2]{1,0} slice(%get-tuple-element.559), slice={[0:4096], [0:2]}
  %all-gather.154 = s32[32768,2]{1,0} all-gather(%slice.302), channel_id=323, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.629 = s32[4096,2]{1,0} dynamic-slice(%all-gather.154, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.13619 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.629)
  %compare.1511 = pred[1,4096,2]{2,1,0} compare(%reshape.13619, %broadcast.5421), direction=LT
  %add.3109 = s32[1,4096,2]{2,1,0} add(%reshape.13619, %broadcast.5422)
  %select.851 = s32[1,4096,2]{2,1,0} select(%compare.1511, %add.3109, %reshape.13619)
  %reshape.13620 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.851)
  %concatenate.128 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1571, %reshape.13620), dimensions={3}
  %subtract.240 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.128, %broadcast.5433)
  %scatter.262 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.240, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_239.7837
  %gather.21 = u32[1,4096,2]{2,1,0} gather(%scatter.262, %subtract.240), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1512 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.21), direction=EQ
  %get-tuple-element.558 = bf16[4096,2]{1,0} get-tuple-element(%sort.129), index=0
  %slice.301 = bf16[4096,2]{1,0} slice(%get-tuple-element.558), slice={[0:4096], [0:2]}
  %all-gather.153 = bf16[32768,2]{1,0} all-gather(%slice.301), channel_id=322, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.639 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.153, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1120 = f32[4096,2]{1,0} convert(%dynamic-slice.639)
  %reshape.13637 = f32[1,4096,2]{2,1,0} reshape(%convert.1120)
  %reduce.386 = f32[4096]{0} reduce(%convert.1120, %constant.4073), dimensions={1}, to_apply=%region_237.7789
  %reshape.13638 = f32[1,4096]{1,0} reshape(%reduce.386)
  %broadcast.6620 = f32[1,4096,2]{2,1,0} broadcast(%reshape.13638), dimensions={0,1}
  %subtract.239 = f32[1,4096,2]{2,1,0} subtract(%reshape.13637, %broadcast.6620)
  %exponential.168 = f32[1,4096,2]{2,1,0} exponential(%subtract.239)
  %reduce.387 = f32[1,4096]{1,0} reduce(%exponential.168, %constant.3956), dimensions={2}, to_apply=%region_238.7801
  %broadcast.6621 = f32[1,4096,2]{2,1,0} broadcast(%reduce.387), dimensions={0,1}
  %divide.611 = f32[1,4096,2]{2,1,0} divide(%exponential.168, %broadcast.6621)
  %convert.1121 = bf16[1,4096,2]{2,1,0} convert(%divide.611)
  %select.852 = bf16[1,4096,2]{2,1,0} select(%compare.1512, %convert.1121, %broadcast.5432)
  %scatter.263 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.240, %select.852), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_240.7845
  %broadcast.6623 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.13619), dimensions={0,1,2}
  %iota.1817 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1513 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6623, %iota.1817), direction=EQ
  %convert.1122 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1513)
  %reshape.13647 = s32[1,8192,8]{2,1,0} reshape(%convert.1122)
  %copy.2666 = s32[1,8192,8]{2,1,0} copy(%reshape.13647)
  %reduce-window.256 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2666, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.21
  %reshape.13649 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.256)
  %copy.2667 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13649)
  %compare.1514 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2667, %broadcast.5435), direction=LE
  %select.853 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1514, %convert.1122, %broadcast.5436)
  %reduce.388 = s32[1,4096,8]{2,1,0} reduce(%select.853, %constant.3783), dimensions={2}, to_apply=%region_241.7859
  %convert.1123 = bf16[1,4096,8]{2,1,0} convert(%reduce.388)
  %multiply.2684 = bf16[1,4096,8]{2,1,0} multiply(%scatter.263, %convert.1123)
  %broadcast.6625 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2684), dimensions={0,1,2}
  %multiply.2685 = s32[1,8192,8]{2,1,0} multiply(%copy.2666, %reduce-window.256)
  %reshape.13651 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2685)
  %reduce.389 = s32[1,4096,8]{2,1,0} reduce(%reshape.13651, %constant.3783), dimensions={2}, to_apply=%region_242.7868
  %multiply.2686 = s32[1,4096,8]{2,1,0} multiply(%reduce.389, %reduce.388)
  %broadcast.6626 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2686), dimensions={0,1,2}
  %iota.1818 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1515 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6626, %iota.1818), direction=EQ
  %convert.1124 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1515)
  %convert.1125 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1124)
  %multiply.2688 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6625, %convert.1125)
  %slice.303 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2688), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2668 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.303)
  %compare.1516 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.303, %broadcast.5439), direction=NE
  %copy.2669 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1516)
  %convert.1126 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2669)
  %dot.378 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1126, %copy.2664), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13654 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.378)
  %all-to-all.42 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13654), channel_id=330, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.63 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.42), dimensions={1,0,2,3,4}
  %reshape.13655 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.63)
  %transpose.64 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13655), dimensions={1,0,2,3}
  %copy.2670 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.64)
  %param.224 = bf16[1,4096,14336]{2,1,0} parameter(143), sharding={devices=[8,1,1]<=[8]}
  %copy.2671 = bf16[1,4096,14336]{2,1,0} copy(%param.224)
  %dot.379 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2670, %copy.2671), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2672 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.379)
  %negate.180 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2672)
  %exponential.169 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.180)
  %add.3114 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.169, %broadcast.5440)
  %divide.612 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3114)
  %multiply.2692 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2672, %divide.612)
  %param.225 = bf16[1,4096,14336]{2,1,0} parameter(144), sharding={devices=[8,1,1]<=[8]}
  %copy.2673 = bf16[1,4096,14336]{2,1,0} copy(%param.225)
  %dot.380 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2670, %copy.2673), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2674 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.380)
  %multiply.2693 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2692, %copy.2674)
  %param.226 = bf16[1,14336,4096]{2,1,0} parameter(145), sharding={devices=[8,1,1]<=[8]}
  %copy.2675 = bf16[1,14336,4096]{2,1,0} copy(%param.226)
  %dot.381 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2693, %copy.2675), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2676 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.381)
  %reshape.13659 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2676)
  %all-to-all.43 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13659), channel_id=331, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.65 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.43), dimensions={1,0,2,3,4}
  %reshape.13660 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.65)
  %dot.382 = bf16[1,4096,4096]{2,1,0} dot(%copy.2668, %reshape.13660), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2677 = bf16[1,4096,4096]{2,1,0} copy(%dot.382)
  %add.3115 = bf16[1,4096,4096]{2,1,0} add(%copy.2677, %add.3106)
  %copy.2678 = bf16[1,4096,4096]{2,1,0} copy(%add.3115)
  %copy.2679 = bf16[1,4096,4096]{2,1,0} copy(%copy.2678)
  %convert.1127 = f32[1,4096,4096]{2,1,0} convert(%copy.2679)
  %multiply.2698 = f32[1,4096,4096]{2,1,0} multiply(%convert.1127, %convert.1127)
  %reduce.390 = f32[1,4096]{1,0} reduce(%multiply.2698, %constant.3956), dimensions={2}, to_apply=%region_243.7907
  %multiply.2699 = f32[1,4096]{1,0} multiply(%reduce.390, %broadcast.5380)
  %add.3116 = f32[1,4096]{1,0} add(%multiply.2699, %broadcast.5381)
  %rsqrt.108 = f32[1,4096]{1,0} rsqrt(%add.3116)
  %broadcast.6630 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.108), dimensions={0,1}
  %multiply.2700 = f32[1,4096,4096]{2,1,0} multiply(%convert.1127, %broadcast.6630)
  %convert.1128 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2700)
  %param.227 = bf16[4096]{0} parameter(157), sharding={replicated}
  %broadcast.6631 = bf16[1,4096,4096]{2,1,0} broadcast(%param.227), dimensions={2}
  %multiply.2701 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1128, %broadcast.6631)
  %copy.2680 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2701)
  %copy.2681 = bf16[1,4096,4096]{2,1,0} copy(%copy.2680)
  %param.228 = bf16[512,32,128]{2,1,0} parameter(160), sharding={devices=[8,1,1]<=[8]}
  %all-gather.155 = bf16[4096,32,128]{2,1,0} all-gather(%param.228), channel_id=332, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.383 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2681, %all-gather.155), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.304 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.383), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2706 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.304, %broadcast.5389)
  %slice.305 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.383), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2708 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.305, %broadcast.5391)
  %subtract.241 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2706, %multiply.2708)
  %multiply.2710 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.305, %broadcast.5389)
  %multiply.2711 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.304, %broadcast.5391)
  %add.3117 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2710, %multiply.2711)
  %concatenate.132 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.241, %add.3117), dimensions={3}
  %copy.2682 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.132)
  %param.229 = bf16[512,8,128]{2,1,0} parameter(158), sharding={devices=[8,1,1]<=[8]}
  %all-gather.156 = bf16[4096,8,128]{2,1,0} all-gather(%param.229), channel_id=333, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.384 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2681, %all-gather.156), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.306 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.384), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2715 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.306, %broadcast.5400)
  %slice.307 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.384), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2717 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.307, %broadcast.5401)
  %subtract.242 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2715, %multiply.2717)
  %multiply.2718 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.307, %broadcast.5400)
  %multiply.2719 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.306, %broadcast.5401)
  %add.3118 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2718, %multiply.2719)
  %concatenate.133 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.242, %add.3118), dimensions={3}
  %copy.2684 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.133)
  %param.230 = bf16[512,8,128]{2,1,0} parameter(161), sharding={devices=[8,1,1]<=[8]}
  %all-gather.157 = bf16[4096,8,128]{2,1,0} all-gather(%param.230), channel_id=334, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.385 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2681, %all-gather.157), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2685 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.385)
  %custom-call.107 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2682, %copy.2684, %copy.2685, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.569 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.107), index=0
  %copy.2686 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.569)
  %param.231 = bf16[32,128,512]{2,1,0} parameter(159), sharding={devices=[1,1,8]<=[8]}
  %all-gather.158 = bf16[32,128,4096]{2,1,0} all-gather(%param.231), channel_id=335, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.386 = bf16[1,4096,4096]{2,1,0} dot(%copy.2686, %all-gather.158), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2687 = bf16[1,4096,4096]{2,1,0} copy(%dot.386)
  %add.3131 = bf16[1,4096,4096]{2,1,0} add(%copy.2679, %copy.2687)
  %convert.1141 = f32[1,4096,4096]{2,1,0} convert(%add.3131)
  %multiply.2721 = f32[1,4096,4096]{2,1,0} multiply(%convert.1141, %convert.1141)
  %reduce.394 = f32[1,4096]{1,0} reduce(%multiply.2721, %constant.3956), dimensions={2}, to_apply=%region_247.8067
  %multiply.2722 = f32[1,4096]{1,0} multiply(%reduce.394, %broadcast.5380)
  %add.3132 = f32[1,4096]{1,0} add(%multiply.2722, %broadcast.5381)
  %rsqrt.109 = f32[1,4096]{1,0} rsqrt(%add.3132)
  %broadcast.6661 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.109), dimensions={0,1}
  %multiply.2723 = f32[1,4096,4096]{2,1,0} multiply(%convert.1141, %broadcast.6661)
  %convert.1142 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2723)
  %param.232 = bf16[4096]{0} parameter(156), sharding={replicated}
  %broadcast.6662 = bf16[1,4096,4096]{2,1,0} broadcast(%param.232), dimensions={2}
  %multiply.2724 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1142, %broadcast.6662)
  %copy.2688 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2724)
  %param.233 = bf16[512,8]{1,0} parameter(152), sharding={devices=[8,1]<=[8]}
  %all-gather.159 = bf16[4096,8]{1,0} all-gather(%param.233), channel_id=336, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.387 = bf16[1,4096,8]{2,1,0} dot(%copy.2688, %all-gather.159), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2689 = bf16[1,4096,8]{2,1,0} copy(%dot.387)
  %reshape.13722 = bf16[4096,8]{1,0} reshape(%copy.2689)
  %custom-call.108 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.13722), custom_call_target="TopK", called_computations={%compare-greater-than.22.clone}
  %get-tuple-element.570 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.108), index=0
  %get-tuple-element.571 = s32[4096,2]{1,0} get-tuple-element(%custom-call.108), index=1
  %add.3133 = s32[4096,2]{1,0} add(%get-tuple-element.571, %broadcast.5420)
  %sort.132 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.570, %add.3133), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.22
  %get-tuple-element.573 = s32[4096,2]{1,0} get-tuple-element(%sort.132), index=1
  %slice.310 = s32[4096,2]{1,0} slice(%get-tuple-element.573), slice={[0:4096], [0:2]}
  %all-gather.161 = s32[32768,2]{1,0} all-gather(%slice.310), channel_id=338, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.657 = s32[4096,2]{1,0} dynamic-slice(%all-gather.161, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.13726 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.657)
  %compare.1546 = pred[1,4096,2]{2,1,0} compare(%reshape.13726, %broadcast.5421), direction=LT
  %add.3134 = s32[1,4096,2]{2,1,0} add(%reshape.13726, %broadcast.5422)
  %select.875 = s32[1,4096,2]{2,1,0} select(%compare.1546, %add.3134, %reshape.13726)
  %reshape.13727 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.875)
  %concatenate.134 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1569, %reshape.13727), dimensions={3}
  %subtract.248 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.134, %broadcast.5433)
  %scatter.274 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.248, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_250.8141
  %gather.22 = u32[1,4096,2]{2,1,0} gather(%scatter.274, %subtract.248), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1547 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.22), direction=EQ
  %get-tuple-element.572 = bf16[4096,2]{1,0} get-tuple-element(%sort.132), index=0
  %slice.309 = bf16[4096,2]{1,0} slice(%get-tuple-element.572), slice={[0:4096], [0:2]}
  %all-gather.160 = bf16[32768,2]{1,0} all-gather(%slice.309), channel_id=337, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.667 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.160, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1145 = f32[4096,2]{1,0} convert(%dynamic-slice.667)
  %reshape.13745 = f32[1,4096,2]{2,1,0} reshape(%convert.1145)
  %reduce.395 = f32[4096]{0} reduce(%convert.1145, %constant.4073), dimensions={1}, to_apply=%region_248.8093
  %reshape.13746 = f32[1,4096]{1,0} reshape(%reduce.395)
  %broadcast.6669 = f32[1,4096,2]{2,1,0} broadcast(%reshape.13746), dimensions={0,1}
  %subtract.247 = f32[1,4096,2]{2,1,0} subtract(%reshape.13745, %broadcast.6669)
  %exponential.170 = f32[1,4096,2]{2,1,0} exponential(%subtract.247)
  %reduce.396 = f32[1,4096]{1,0} reduce(%exponential.170, %constant.3956), dimensions={2}, to_apply=%region_249.8105
  %broadcast.6670 = f32[1,4096,2]{2,1,0} broadcast(%reduce.396), dimensions={0,1}
  %divide.617 = f32[1,4096,2]{2,1,0} divide(%exponential.170, %broadcast.6670)
  %convert.1146 = bf16[1,4096,2]{2,1,0} convert(%divide.617)
  %select.876 = bf16[1,4096,2]{2,1,0} select(%compare.1547, %convert.1146, %broadcast.5432)
  %scatter.275 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.248, %select.876), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_251.8149
  %broadcast.6672 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.13726), dimensions={0,1,2}
  %iota.1826 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1548 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6672, %iota.1826), direction=EQ
  %convert.1147 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1548)
  %reshape.13756 = s32[1,8192,8]{2,1,0} reshape(%convert.1147)
  %copy.2690 = s32[1,8192,8]{2,1,0} copy(%reshape.13756)
  %reduce-window.259 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2690, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.22
  %reshape.13758 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.259)
  %copy.2691 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13758)
  %compare.1549 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2691, %broadcast.5435), direction=LE
  %select.877 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1549, %convert.1147, %broadcast.5436)
  %reduce.397 = s32[1,4096,8]{2,1,0} reduce(%select.877, %constant.3783), dimensions={2}, to_apply=%region_252.8163
  %convert.1148 = bf16[1,4096,8]{2,1,0} convert(%reduce.397)
  %multiply.2731 = bf16[1,4096,8]{2,1,0} multiply(%scatter.275, %convert.1148)
  %broadcast.6674 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2731), dimensions={0,1,2}
  %multiply.2732 = s32[1,8192,8]{2,1,0} multiply(%copy.2690, %reduce-window.259)
  %reshape.13759 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2732)
  %reduce.398 = s32[1,4096,8]{2,1,0} reduce(%reshape.13759, %constant.3783), dimensions={2}, to_apply=%region_253.8172
  %multiply.2733 = s32[1,4096,8]{2,1,0} multiply(%reduce.398, %reduce.397)
  %broadcast.6675 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2733), dimensions={0,1,2}
  %iota.1827 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1550 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6675, %iota.1827), direction=EQ
  %convert.1149 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1550)
  %convert.1150 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1149)
  %multiply.2734 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6674, %convert.1150)
  %slice.311 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2734), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2692 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.311)
  %compare.1551 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.311, %broadcast.5439), direction=NE
  %copy.2693 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1551)
  %convert.1151 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2693)
  %dot.388 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1151, %copy.2688), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13762 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.388)
  %all-to-all.44 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13762), channel_id=345, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.66 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.44), dimensions={1,0,2,3,4}
  %reshape.13764 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.66)
  %transpose.67 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13764), dimensions={1,0,2,3}
  %copy.2694 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.67)
  %param.234 = bf16[1,4096,14336]{2,1,0} parameter(153), sharding={devices=[8,1,1]<=[8]}
  %copy.2695 = bf16[1,4096,14336]{2,1,0} copy(%param.234)
  %dot.389 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2694, %copy.2695), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2696 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.389)
  %negate.181 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2696)
  %exponential.171 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.181)
  %add.3139 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.171, %broadcast.5440)
  %divide.618 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3139)
  %multiply.2739 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2696, %divide.618)
  %param.235 = bf16[1,4096,14336]{2,1,0} parameter(154), sharding={devices=[8,1,1]<=[8]}
  %copy.2697 = bf16[1,4096,14336]{2,1,0} copy(%param.235)
  %dot.390 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2694, %copy.2697), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2698 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.390)
  %multiply.2740 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2739, %copy.2698)
  %param.236 = bf16[1,14336,4096]{2,1,0} parameter(155), sharding={devices=[8,1,1]<=[8]}
  %copy.2699 = bf16[1,14336,4096]{2,1,0} copy(%param.236)
  %dot.391 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2740, %copy.2699), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2700 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.391)
  %reshape.13768 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2700)
  %all-to-all.45 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13768), channel_id=346, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.68 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.45), dimensions={1,0,2,3,4}
  %reshape.13769 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.68)
  %dot.392 = bf16[1,4096,4096]{2,1,0} dot(%copy.2692, %reshape.13769), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2701 = bf16[1,4096,4096]{2,1,0} copy(%dot.392)
  %add.3140 = bf16[1,4096,4096]{2,1,0} add(%copy.2701, %add.3131)
  %copy.2702 = bf16[1,4096,4096]{2,1,0} copy(%add.3140)
  %copy.2703 = bf16[1,4096,4096]{2,1,0} copy(%copy.2702)
  %convert.1152 = f32[1,4096,4096]{2,1,0} convert(%copy.2703)
  %multiply.2743 = f32[1,4096,4096]{2,1,0} multiply(%convert.1152, %convert.1152)
  %reduce.399 = f32[1,4096]{1,0} reduce(%multiply.2743, %constant.3956), dimensions={2}, to_apply=%region_254.8211
  %multiply.2744 = f32[1,4096]{1,0} multiply(%reduce.399, %broadcast.5380)
  %add.3141 = f32[1,4096]{1,0} add(%multiply.2744, %broadcast.5381)
  %rsqrt.110 = f32[1,4096]{1,0} rsqrt(%add.3141)
  %broadcast.6679 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.110), dimensions={0,1}
  %multiply.2745 = f32[1,4096,4096]{2,1,0} multiply(%convert.1152, %broadcast.6679)
  %convert.1153 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2745)
  %param.237 = bf16[4096]{0} parameter(167), sharding={replicated}
  %broadcast.6680 = bf16[1,4096,4096]{2,1,0} broadcast(%param.237), dimensions={2}
  %multiply.2746 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1153, %broadcast.6680)
  %copy.2704 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2746)
  %copy.2705 = bf16[1,4096,4096]{2,1,0} copy(%copy.2704)
  %param.238 = bf16[512,32,128]{2,1,0} parameter(170), sharding={devices=[8,1,1]<=[8]}
  %all-gather.162 = bf16[4096,32,128]{2,1,0} all-gather(%param.238), channel_id=347, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.393 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2705, %all-gather.162), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.312 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.393), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2751 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.312, %broadcast.5389)
  %slice.313 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.393), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2753 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.313, %broadcast.5391)
  %subtract.249 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2751, %multiply.2753)
  %multiply.2755 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.313, %broadcast.5389)
  %multiply.2756 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.312, %broadcast.5391)
  %add.3142 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2755, %multiply.2756)
  %concatenate.138 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.249, %add.3142), dimensions={3}
  %copy.2706 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.138)
  %param.239 = bf16[512,8,128]{2,1,0} parameter(168), sharding={devices=[8,1,1]<=[8]}
  %all-gather.163 = bf16[4096,8,128]{2,1,0} all-gather(%param.239), channel_id=348, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.394 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2705, %all-gather.163), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.314 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.394), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2760 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.314, %broadcast.5400)
  %slice.315 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.394), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2762 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.315, %broadcast.5401)
  %subtract.250 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2760, %multiply.2762)
  %multiply.2764 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.315, %broadcast.5400)
  %multiply.2765 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.314, %broadcast.5401)
  %add.3144 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2764, %multiply.2765)
  %concatenate.139 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.250, %add.3144), dimensions={3}
  %copy.2708 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.139)
  %param.240 = bf16[512,8,128]{2,1,0} parameter(171), sharding={devices=[8,1,1]<=[8]}
  %all-gather.164 = bf16[4096,8,128]{2,1,0} all-gather(%param.240), channel_id=349, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.395 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2705, %all-gather.164), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2709 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.395)
  %custom-call.109 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2706, %copy.2708, %copy.2709, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.583 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.109), index=0
  %copy.2710 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.583)
  %param.241 = bf16[32,128,512]{2,1,0} parameter(169), sharding={devices=[1,1,8]<=[8]}
  %all-gather.165 = bf16[32,128,4096]{2,1,0} all-gather(%param.241), channel_id=350, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.396 = bf16[1,4096,4096]{2,1,0} dot(%copy.2710, %all-gather.165), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2711 = bf16[1,4096,4096]{2,1,0} copy(%dot.396)
  %add.3157 = bf16[1,4096,4096]{2,1,0} add(%copy.2703, %copy.2711)
  %convert.1168 = f32[1,4096,4096]{2,1,0} convert(%add.3157)
  %multiply.2767 = f32[1,4096,4096]{2,1,0} multiply(%convert.1168, %convert.1168)
  %reduce.403 = f32[1,4096]{1,0} reduce(%multiply.2767, %constant.3956), dimensions={2}, to_apply=%region_258.8371
  %multiply.2768 = f32[1,4096]{1,0} multiply(%reduce.403, %broadcast.5380)
  %add.3158 = f32[1,4096]{1,0} add(%multiply.2768, %broadcast.5381)
  %rsqrt.111 = f32[1,4096]{1,0} rsqrt(%add.3158)
  %broadcast.6712 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.111), dimensions={0,1}
  %multiply.2769 = f32[1,4096,4096]{2,1,0} multiply(%convert.1168, %broadcast.6712)
  %convert.1169 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2769)
  %param.242 = bf16[4096]{0} parameter(166), sharding={replicated}
  %broadcast.6713 = bf16[1,4096,4096]{2,1,0} broadcast(%param.242), dimensions={2}
  %multiply.2770 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1169, %broadcast.6713)
  %copy.2712 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2770)
  %param.243 = bf16[512,8]{1,0} parameter(162), sharding={devices=[8,1]<=[8]}
  %all-gather.166 = bf16[4096,8]{1,0} all-gather(%param.243), channel_id=351, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.397 = bf16[1,4096,8]{2,1,0} dot(%copy.2712, %all-gather.166), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2713 = bf16[1,4096,8]{2,1,0} copy(%dot.397)
  %reshape.13817 = bf16[4096,8]{1,0} reshape(%copy.2713)
  %custom-call.110 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.13817), custom_call_target="TopK", called_computations={%compare-greater-than.23.clone}
  %get-tuple-element.584 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.110), index=0
  %get-tuple-element.585 = s32[4096,2]{1,0} get-tuple-element(%custom-call.110), index=1
  %add.3159 = s32[4096,2]{1,0} add(%get-tuple-element.585, %broadcast.5420)
  %sort.135 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.584, %add.3159), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.23
  %get-tuple-element.587 = s32[4096,2]{1,0} get-tuple-element(%sort.135), index=1
  %slice.318 = s32[4096,2]{1,0} slice(%get-tuple-element.587), slice={[0:4096], [0:2]}
  %all-gather.168 = s32[32768,2]{1,0} all-gather(%slice.318), channel_id=353, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.685 = s32[4096,2]{1,0} dynamic-slice(%all-gather.168, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.13820 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.685)
  %compare.1581 = pred[1,4096,2]{2,1,0} compare(%reshape.13820, %broadcast.5421), direction=LT
  %add.3160 = s32[1,4096,2]{2,1,0} add(%reshape.13820, %broadcast.5422)
  %select.899 = s32[1,4096,2]{2,1,0} select(%compare.1581, %add.3160, %reshape.13820)
  %reshape.13821 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.899)
  %concatenate.140 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1567, %reshape.13821), dimensions={3}
  %subtract.256 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.140, %broadcast.5433)
  %scatter.286 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.256, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_261.8445
  %gather.23 = u32[1,4096,2]{2,1,0} gather(%scatter.286, %subtract.256), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1582 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.23), direction=EQ
  %get-tuple-element.586 = bf16[4096,2]{1,0} get-tuple-element(%sort.135), index=0
  %slice.317 = bf16[4096,2]{1,0} slice(%get-tuple-element.586), slice={[0:4096], [0:2]}
  %all-gather.167 = bf16[32768,2]{1,0} all-gather(%slice.317), channel_id=352, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.695 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.167, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1172 = f32[4096,2]{1,0} convert(%dynamic-slice.695)
  %reshape.13839 = f32[1,4096,2]{2,1,0} reshape(%convert.1172)
  %reduce.404 = f32[4096]{0} reduce(%convert.1172, %constant.4073), dimensions={1}, to_apply=%region_259.8397
  %reshape.13840 = f32[1,4096]{1,0} reshape(%reduce.404)
  %broadcast.6720 = f32[1,4096,2]{2,1,0} broadcast(%reshape.13840), dimensions={0,1}
  %subtract.255 = f32[1,4096,2]{2,1,0} subtract(%reshape.13839, %broadcast.6720)
  %exponential.172 = f32[1,4096,2]{2,1,0} exponential(%subtract.255)
  %reduce.405 = f32[1,4096]{1,0} reduce(%exponential.172, %constant.3956), dimensions={2}, to_apply=%region_260.8409
  %broadcast.6722 = f32[1,4096,2]{2,1,0} broadcast(%reduce.405), dimensions={0,1}
  %divide.623 = f32[1,4096,2]{2,1,0} divide(%exponential.172, %broadcast.6722)
  %convert.1173 = bf16[1,4096,2]{2,1,0} convert(%divide.623)
  %select.900 = bf16[1,4096,2]{2,1,0} select(%compare.1582, %convert.1173, %broadcast.5432)
  %scatter.287 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.256, %select.900), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_262.8453
  %broadcast.6727 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.13820), dimensions={0,1,2}
  %iota.1835 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1583 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6727, %iota.1835), direction=EQ
  %convert.1174 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1583)
  %reshape.13849 = s32[1,8192,8]{2,1,0} reshape(%convert.1174)
  %copy.2714 = s32[1,8192,8]{2,1,0} copy(%reshape.13849)
  %reduce-window.262 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2714, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.23
  %reshape.13852 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.262)
  %copy.2715 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13852)
  %compare.1584 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2715, %broadcast.5435), direction=LE
  %select.901 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1584, %convert.1174, %broadcast.5436)
  %reduce.406 = s32[1,4096,8]{2,1,0} reduce(%select.901, %constant.3783), dimensions={2}, to_apply=%region_263.8467
  %convert.1175 = bf16[1,4096,8]{2,1,0} convert(%reduce.406)
  %multiply.2776 = bf16[1,4096,8]{2,1,0} multiply(%scatter.287, %convert.1175)
  %broadcast.6729 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2776), dimensions={0,1,2}
  %multiply.2777 = s32[1,8192,8]{2,1,0} multiply(%copy.2714, %reduce-window.262)
  %reshape.13853 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2777)
  %reduce.407 = s32[1,4096,8]{2,1,0} reduce(%reshape.13853, %constant.3783), dimensions={2}, to_apply=%region_264.8476
  %multiply.2778 = s32[1,4096,8]{2,1,0} multiply(%reduce.407, %reduce.406)
  %broadcast.6730 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2778), dimensions={0,1,2}
  %iota.1836 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1585 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6730, %iota.1836), direction=EQ
  %convert.1177 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1585)
  %convert.1178 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1177)
  %multiply.2779 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6729, %convert.1178)
  %slice.319 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2779), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2716 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.319)
  %compare.1586 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.319, %broadcast.5439), direction=NE
  %copy.2717 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1586)
  %convert.1179 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2717)
  %dot.398 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1179, %copy.2712), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13856 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.398)
  %all-to-all.46 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13856), channel_id=360, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.69 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.46), dimensions={1,0,2,3,4}
  %reshape.13857 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.69)
  %transpose.70 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13857), dimensions={1,0,2,3}
  %copy.2718 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.70)
  %param.244 = bf16[1,4096,14336]{2,1,0} parameter(163), sharding={devices=[8,1,1]<=[8]}
  %copy.2719 = bf16[1,4096,14336]{2,1,0} copy(%param.244)
  %dot.399 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2718, %copy.2719), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2720 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.399)
  %negate.182 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2720)
  %exponential.173 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.182)
  %add.3165 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.173, %broadcast.5440)
  %divide.624 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3165)
  %multiply.2783 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2720, %divide.624)
  %param.245 = bf16[1,4096,14336]{2,1,0} parameter(164), sharding={devices=[8,1,1]<=[8]}
  %copy.2721 = bf16[1,4096,14336]{2,1,0} copy(%param.245)
  %dot.400 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2718, %copy.2721), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2722 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.400)
  %multiply.2784 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2783, %copy.2722)
  %param.246 = bf16[1,14336,4096]{2,1,0} parameter(165), sharding={devices=[8,1,1]<=[8]}
  %copy.2723 = bf16[1,14336,4096]{2,1,0} copy(%param.246)
  %dot.401 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2784, %copy.2723), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2724 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.401)
  %reshape.13861 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2724)
  %all-to-all.47 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13861), channel_id=361, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.71 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.47), dimensions={1,0,2,3,4}
  %reshape.13862 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.71)
  %dot.402 = bf16[1,4096,4096]{2,1,0} dot(%copy.2716, %reshape.13862), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2725 = bf16[1,4096,4096]{2,1,0} copy(%dot.402)
  %add.3166 = bf16[1,4096,4096]{2,1,0} add(%copy.2725, %add.3157)
  %copy.2726 = bf16[1,4096,4096]{2,1,0} copy(%add.3166)
  %copy.2727 = bf16[1,4096,4096]{2,1,0} copy(%copy.2726)
  %convert.1180 = f32[1,4096,4096]{2,1,0} convert(%copy.2727)
  %multiply.2788 = f32[1,4096,4096]{2,1,0} multiply(%convert.1180, %convert.1180)
  %reduce.408 = f32[1,4096]{1,0} reduce(%multiply.2788, %constant.3956), dimensions={2}, to_apply=%region_265.8515
  %multiply.2790 = f32[1,4096]{1,0} multiply(%reduce.408, %broadcast.5380)
  %add.3167 = f32[1,4096]{1,0} add(%multiply.2790, %broadcast.5381)
  %rsqrt.112 = f32[1,4096]{1,0} rsqrt(%add.3167)
  %broadcast.6735 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.112), dimensions={0,1}
  %multiply.2791 = f32[1,4096,4096]{2,1,0} multiply(%convert.1180, %broadcast.6735)
  %convert.1181 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2791)
  %param.247 = bf16[4096]{0} parameter(177), sharding={replicated}
  %broadcast.6737 = bf16[1,4096,4096]{2,1,0} broadcast(%param.247), dimensions={2}
  %multiply.2792 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1181, %broadcast.6737)
  %copy.2728 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2792)
  %copy.2729 = bf16[1,4096,4096]{2,1,0} copy(%copy.2728)
  %param.248 = bf16[512,32,128]{2,1,0} parameter(180), sharding={devices=[8,1,1]<=[8]}
  %all-gather.169 = bf16[4096,32,128]{2,1,0} all-gather(%param.248), channel_id=362, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.403 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2729, %all-gather.169), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.320 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.403), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2797 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.320, %broadcast.5389)
  %slice.321 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.403), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2800 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.321, %broadcast.5391)
  %subtract.257 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2797, %multiply.2800)
  %multiply.2801 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.321, %broadcast.5389)
  %multiply.2802 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.320, %broadcast.5391)
  %add.3168 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2801, %multiply.2802)
  %concatenate.144 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.257, %add.3168), dimensions={3}
  %copy.2730 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.144)
  %param.249 = bf16[512,8,128]{2,1,0} parameter(178), sharding={devices=[8,1,1]<=[8]}
  %all-gather.170 = bf16[4096,8,128]{2,1,0} all-gather(%param.249), channel_id=363, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.404 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2729, %all-gather.170), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.322 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.404), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2807 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.322, %broadcast.5400)
  %slice.323 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.404), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2809 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.323, %broadcast.5401)
  %subtract.258 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2807, %multiply.2809)
  %multiply.2810 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.323, %broadcast.5400)
  %multiply.2811 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.322, %broadcast.5401)
  %add.3169 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2810, %multiply.2811)
  %concatenate.145 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.258, %add.3169), dimensions={3}
  %copy.2732 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.145)
  %param.250 = bf16[512,8,128]{2,1,0} parameter(181), sharding={devices=[8,1,1]<=[8]}
  %all-gather.171 = bf16[4096,8,128]{2,1,0} all-gather(%param.250), channel_id=364, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.405 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2729, %all-gather.171), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2733 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.405)
  %custom-call.111 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2730, %copy.2732, %copy.2733, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.597 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.111), index=0
  %copy.2734 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.597)
  %param.251 = bf16[32,128,512]{2,1,0} parameter(179), sharding={devices=[1,1,8]<=[8]}
  %all-gather.172 = bf16[32,128,4096]{2,1,0} all-gather(%param.251), channel_id=365, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.406 = bf16[1,4096,4096]{2,1,0} dot(%copy.2734, %all-gather.172), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2735 = bf16[1,4096,4096]{2,1,0} copy(%dot.406)
  %add.3184 = bf16[1,4096,4096]{2,1,0} add(%copy.2727, %copy.2735)
  %convert.1196 = f32[1,4096,4096]{2,1,0} convert(%add.3184)
  %multiply.2813 = f32[1,4096,4096]{2,1,0} multiply(%convert.1196, %convert.1196)
  %reduce.412 = f32[1,4096]{1,0} reduce(%multiply.2813, %constant.3956), dimensions={2}, to_apply=%region_269.8675
  %multiply.2814 = f32[1,4096]{1,0} multiply(%reduce.412, %broadcast.5380)
  %add.3185 = f32[1,4096]{1,0} add(%multiply.2814, %broadcast.5381)
  %rsqrt.113 = f32[1,4096]{1,0} rsqrt(%add.3185)
  %broadcast.6777 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.113), dimensions={0,1}
  %multiply.2815 = f32[1,4096,4096]{2,1,0} multiply(%convert.1196, %broadcast.6777)
  %convert.1197 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2815)
  %param.252 = bf16[4096]{0} parameter(176), sharding={replicated}
  %broadcast.6779 = bf16[1,4096,4096]{2,1,0} broadcast(%param.252), dimensions={2}
  %multiply.2816 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1197, %broadcast.6779)
  %copy.2736 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2816)
  %param.253 = bf16[512,8]{1,0} parameter(172), sharding={devices=[8,1]<=[8]}
  %all-gather.173 = bf16[4096,8]{1,0} all-gather(%param.253), channel_id=366, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.407 = bf16[1,4096,8]{2,1,0} dot(%copy.2736, %all-gather.173), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2737 = bf16[1,4096,8]{2,1,0} copy(%dot.407)
  %reshape.13915 = bf16[4096,8]{1,0} reshape(%copy.2737)
  %custom-call.112 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.13915), custom_call_target="TopK", called_computations={%compare-greater-than.24.clone}
  %get-tuple-element.598 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.112), index=0
  %get-tuple-element.599 = s32[4096,2]{1,0} get-tuple-element(%custom-call.112), index=1
  %add.3186 = s32[4096,2]{1,0} add(%get-tuple-element.599, %broadcast.5420)
  %sort.138 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.598, %add.3186), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.24
  %get-tuple-element.601 = s32[4096,2]{1,0} get-tuple-element(%sort.138), index=1
  %slice.326 = s32[4096,2]{1,0} slice(%get-tuple-element.601), slice={[0:4096], [0:2]}
  %all-gather.175 = s32[32768,2]{1,0} all-gather(%slice.326), channel_id=368, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.713 = s32[4096,2]{1,0} dynamic-slice(%all-gather.175, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.13918 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.713)
  %compare.1616 = pred[1,4096,2]{2,1,0} compare(%reshape.13918, %broadcast.5421), direction=LT
  %add.3187 = s32[1,4096,2]{2,1,0} add(%reshape.13918, %broadcast.5422)
  %select.923 = s32[1,4096,2]{2,1,0} select(%compare.1616, %add.3187, %reshape.13918)
  %reshape.13919 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.923)
  %concatenate.146 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1565, %reshape.13919), dimensions={3}
  %subtract.264 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.146, %broadcast.5433)
  %scatter.298 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.264, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_272.8749
  %gather.24 = u32[1,4096,2]{2,1,0} gather(%scatter.298, %subtract.264), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1617 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.24), direction=EQ
  %get-tuple-element.600 = bf16[4096,2]{1,0} get-tuple-element(%sort.138), index=0
  %slice.325 = bf16[4096,2]{1,0} slice(%get-tuple-element.600), slice={[0:4096], [0:2]}
  %all-gather.174 = bf16[32768,2]{1,0} all-gather(%slice.325), channel_id=367, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.723 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.174, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1200 = f32[4096,2]{1,0} convert(%dynamic-slice.723)
  %reshape.13935 = f32[1,4096,2]{2,1,0} reshape(%convert.1200)
  %reduce.413 = f32[4096]{0} reduce(%convert.1200, %constant.4073), dimensions={1}, to_apply=%region_270.8701
  %reshape.13936 = f32[1,4096]{1,0} reshape(%reduce.413)
  %broadcast.6791 = f32[1,4096,2]{2,1,0} broadcast(%reshape.13936), dimensions={0,1}
  %subtract.263 = f32[1,4096,2]{2,1,0} subtract(%reshape.13935, %broadcast.6791)
  %exponential.174 = f32[1,4096,2]{2,1,0} exponential(%subtract.263)
  %reduce.414 = f32[1,4096]{1,0} reduce(%exponential.174, %constant.3956), dimensions={2}, to_apply=%region_271.8713
  %broadcast.6792 = f32[1,4096,2]{2,1,0} broadcast(%reduce.414), dimensions={0,1}
  %divide.629 = f32[1,4096,2]{2,1,0} divide(%exponential.174, %broadcast.6792)
  %convert.1201 = bf16[1,4096,2]{2,1,0} convert(%divide.629)
  %select.924 = bf16[1,4096,2]{2,1,0} select(%compare.1617, %convert.1201, %broadcast.5432)
  %scatter.299 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.264, %select.924), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_273.8757
  %broadcast.6794 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.13918), dimensions={0,1,2}
  %iota.1844 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1618 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6794, %iota.1844), direction=EQ
  %convert.1202 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1618)
  %reshape.13947 = s32[1,8192,8]{2,1,0} reshape(%convert.1202)
  %copy.2738 = s32[1,8192,8]{2,1,0} copy(%reshape.13947)
  %reduce-window.265 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2738, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.24
  %reshape.13949 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.265)
  %copy.2739 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13949)
  %compare.1619 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2739, %broadcast.5435), direction=LE
  %select.925 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1619, %convert.1202, %broadcast.5436)
  %reduce.415 = s32[1,4096,8]{2,1,0} reduce(%select.925, %constant.3783), dimensions={2}, to_apply=%region_274.8771
  %convert.1203 = bf16[1,4096,8]{2,1,0} convert(%reduce.415)
  %multiply.2822 = bf16[1,4096,8]{2,1,0} multiply(%scatter.299, %convert.1203)
  %broadcast.6796 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2822), dimensions={0,1,2}
  %multiply.2823 = s32[1,8192,8]{2,1,0} multiply(%copy.2738, %reduce-window.265)
  %reshape.13950 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2823)
  %reduce.416 = s32[1,4096,8]{2,1,0} reduce(%reshape.13950, %constant.3783), dimensions={2}, to_apply=%region_275.8780
  %multiply.2824 = s32[1,4096,8]{2,1,0} multiply(%reduce.416, %reduce.415)
  %broadcast.6797 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2824), dimensions={0,1,2}
  %iota.1845 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1620 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6797, %iota.1845), direction=EQ
  %convert.1205 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1620)
  %convert.1207 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1205)
  %multiply.2826 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6796, %convert.1207)
  %slice.327 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2826), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2740 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.327)
  %compare.1621 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.327, %broadcast.5439), direction=NE
  %copy.2741 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1621)
  %convert.1208 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2741)
  %dot.408 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1208, %copy.2736), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13954 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.408)
  %all-to-all.48 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13954), channel_id=375, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.72 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.48), dimensions={1,0,2,3,4}
  %reshape.13955 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.72)
  %transpose.73 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13955), dimensions={1,0,2,3}
  %copy.2742 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.73)
  %param.254 = bf16[1,4096,14336]{2,1,0} parameter(173), sharding={devices=[8,1,1]<=[8]}
  %copy.2743 = bf16[1,4096,14336]{2,1,0} copy(%param.254)
  %dot.409 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2742, %copy.2743), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2744 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.409)
  %negate.183 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2744)
  %exponential.175 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.183)
  %add.3192 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.175, %broadcast.5440)
  %divide.630 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3192)
  %multiply.2831 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2744, %divide.630)
  %param.255 = bf16[1,4096,14336]{2,1,0} parameter(174), sharding={devices=[8,1,1]<=[8]}
  %copy.2745 = bf16[1,4096,14336]{2,1,0} copy(%param.255)
  %dot.410 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2742, %copy.2745), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2746 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.410)
  %multiply.2832 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2831, %copy.2746)
  %param.256 = bf16[1,14336,4096]{2,1,0} parameter(175), sharding={devices=[8,1,1]<=[8]}
  %copy.2747 = bf16[1,14336,4096]{2,1,0} copy(%param.256)
  %dot.411 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2832, %copy.2747), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2748 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.411)
  %reshape.13959 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2748)
  %all-to-all.49 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13959), channel_id=376, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.74 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.49), dimensions={1,0,2,3,4}
  %reshape.13960 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.74)
  %dot.412 = bf16[1,4096,4096]{2,1,0} dot(%copy.2740, %reshape.13960), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2749 = bf16[1,4096,4096]{2,1,0} copy(%dot.412)
  %add.3193 = bf16[1,4096,4096]{2,1,0} add(%copy.2749, %add.3184)
  %copy.2750 = bf16[1,4096,4096]{2,1,0} copy(%add.3193)
  %copy.2751 = bf16[1,4096,4096]{2,1,0} copy(%copy.2750)
  %convert.1209 = f32[1,4096,4096]{2,1,0} convert(%copy.2751)
  %multiply.2836 = f32[1,4096,4096]{2,1,0} multiply(%convert.1209, %convert.1209)
  %reduce.417 = f32[1,4096]{1,0} reduce(%multiply.2836, %constant.3956), dimensions={2}, to_apply=%region_276.8819
  %multiply.2837 = f32[1,4096]{1,0} multiply(%reduce.417, %broadcast.5380)
  %add.3194 = f32[1,4096]{1,0} add(%multiply.2837, %broadcast.5381)
  %rsqrt.114 = f32[1,4096]{1,0} rsqrt(%add.3194)
  %broadcast.6805 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.114), dimensions={0,1}
  %multiply.2839 = f32[1,4096,4096]{2,1,0} multiply(%convert.1209, %broadcast.6805)
  %convert.1210 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2839)
  %param.257 = bf16[4096]{0} parameter(187), sharding={replicated}
  %broadcast.6806 = bf16[1,4096,4096]{2,1,0} broadcast(%param.257), dimensions={2}
  %multiply.2840 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1210, %broadcast.6806)
  %copy.2752 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2840)
  %copy.2753 = bf16[1,4096,4096]{2,1,0} copy(%copy.2752)
  %param.258 = bf16[512,32,128]{2,1,0} parameter(190), sharding={devices=[8,1,1]<=[8]}
  %all-gather.176 = bf16[4096,32,128]{2,1,0} all-gather(%param.258), channel_id=377, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.413 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2753, %all-gather.176), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.328 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.413), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2844 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.328, %broadcast.5389)
  %slice.329 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.413), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2846 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.329, %broadcast.5391)
  %subtract.265 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2844, %multiply.2846)
  %multiply.2847 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.329, %broadcast.5389)
  %multiply.2848 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.328, %broadcast.5391)
  %add.3195 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2847, %multiply.2848)
  %concatenate.150 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.265, %add.3195), dimensions={3}
  %copy.2754 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.150)
  %param.259 = bf16[512,8,128]{2,1,0} parameter(188), sharding={devices=[8,1,1]<=[8]}
  %all-gather.177 = bf16[4096,8,128]{2,1,0} all-gather(%param.259), channel_id=378, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.414 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2753, %all-gather.177), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.330 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.414), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2852 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.330, %broadcast.5400)
  %slice.331 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.414), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2854 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.331, %broadcast.5401)
  %subtract.266 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2852, %multiply.2854)
  %multiply.2855 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.331, %broadcast.5400)
  %multiply.2856 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.330, %broadcast.5401)
  %add.3196 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2855, %multiply.2856)
  %concatenate.151 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.266, %add.3196), dimensions={3}
  %copy.2756 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.151)
  %param.260 = bf16[512,8,128]{2,1,0} parameter(191), sharding={devices=[8,1,1]<=[8]}
  %all-gather.178 = bf16[4096,8,128]{2,1,0} all-gather(%param.260), channel_id=379, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.415 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2753, %all-gather.178), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2757 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.415)
  %custom-call.113 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2754, %copy.2756, %copy.2757, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.611 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.113), index=0
  %copy.2758 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.611)
  %param.261 = bf16[32,128,512]{2,1,0} parameter(189), sharding={devices=[1,1,8]<=[8]}
  %all-gather.179 = bf16[32,128,4096]{2,1,0} all-gather(%param.261), channel_id=380, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.416 = bf16[1,4096,4096]{2,1,0} dot(%copy.2758, %all-gather.179), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2759 = bf16[1,4096,4096]{2,1,0} copy(%dot.416)
  %add.3212 = bf16[1,4096,4096]{2,1,0} add(%copy.2751, %copy.2759)
  %convert.1223 = f32[1,4096,4096]{2,1,0} convert(%add.3212)
  %multiply.2858 = f32[1,4096,4096]{2,1,0} multiply(%convert.1223, %convert.1223)
  %reduce.421 = f32[1,4096]{1,0} reduce(%multiply.2858, %constant.3956), dimensions={2}, to_apply=%region_280.8979
  %multiply.2859 = f32[1,4096]{1,0} multiply(%reduce.421, %broadcast.5380)
  %add.3213 = f32[1,4096]{1,0} add(%multiply.2859, %broadcast.5381)
  %rsqrt.115 = f32[1,4096]{1,0} rsqrt(%add.3213)
  %broadcast.6838 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.115), dimensions={0,1}
  %multiply.2860 = f32[1,4096,4096]{2,1,0} multiply(%convert.1223, %broadcast.6838)
  %convert.1224 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2860)
  %param.262 = bf16[4096]{0} parameter(186), sharding={replicated}
  %broadcast.6839 = bf16[1,4096,4096]{2,1,0} broadcast(%param.262), dimensions={2}
  %multiply.2861 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1224, %broadcast.6839)
  %copy.2760 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2861)
  %param.263 = bf16[512,8]{1,0} parameter(182), sharding={devices=[8,1]<=[8]}
  %all-gather.180 = bf16[4096,8]{1,0} all-gather(%param.263), channel_id=381, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.417 = bf16[1,4096,8]{2,1,0} dot(%copy.2760, %all-gather.180), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2761 = bf16[1,4096,8]{2,1,0} copy(%dot.417)
  %reshape.14014 = bf16[4096,8]{1,0} reshape(%copy.2761)
  %custom-call.114 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.14014), custom_call_target="TopK", called_computations={%compare-greater-than.25.clone}
  %get-tuple-element.612 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.114), index=0
  %get-tuple-element.613 = s32[4096,2]{1,0} get-tuple-element(%custom-call.114), index=1
  %add.3214 = s32[4096,2]{1,0} add(%get-tuple-element.613, %broadcast.5420)
  %sort.141 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.612, %add.3214), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.25
  %get-tuple-element.615 = s32[4096,2]{1,0} get-tuple-element(%sort.141), index=1
  %slice.334 = s32[4096,2]{1,0} slice(%get-tuple-element.615), slice={[0:4096], [0:2]}
  %all-gather.182 = s32[32768,2]{1,0} all-gather(%slice.334), channel_id=383, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.741 = s32[4096,2]{1,0} dynamic-slice(%all-gather.182, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.14017 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.741)
  %compare.1654 = pred[1,4096,2]{2,1,0} compare(%reshape.14017, %broadcast.5421), direction=LT
  %add.3215 = s32[1,4096,2]{2,1,0} add(%reshape.14017, %broadcast.5422)
  %select.947 = s32[1,4096,2]{2,1,0} select(%compare.1654, %add.3215, %reshape.14017)
  %reshape.14018 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.947)
  %concatenate.152 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1563, %reshape.14018), dimensions={3}
  %subtract.272 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.152, %broadcast.5433)
  %scatter.310 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.272, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_283.9053
  %gather.25 = u32[1,4096,2]{2,1,0} gather(%scatter.310, %subtract.272), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1655 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.25), direction=EQ
  %get-tuple-element.614 = bf16[4096,2]{1,0} get-tuple-element(%sort.141), index=0
  %slice.333 = bf16[4096,2]{1,0} slice(%get-tuple-element.614), slice={[0:4096], [0:2]}
  %all-gather.181 = bf16[32768,2]{1,0} all-gather(%slice.333), channel_id=382, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.751 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.181, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1227 = f32[4096,2]{1,0} convert(%dynamic-slice.751)
  %reshape.14036 = f32[1,4096,2]{2,1,0} reshape(%convert.1227)
  %reduce.422 = f32[4096]{0} reduce(%convert.1227, %constant.4073), dimensions={1}, to_apply=%region_281.9005
  %reshape.14037 = f32[1,4096]{1,0} reshape(%reduce.422)
  %broadcast.6846 = f32[1,4096,2]{2,1,0} broadcast(%reshape.14037), dimensions={0,1}
  %subtract.271 = f32[1,4096,2]{2,1,0} subtract(%reshape.14036, %broadcast.6846)
  %exponential.176 = f32[1,4096,2]{2,1,0} exponential(%subtract.271)
  %reduce.423 = f32[1,4096]{1,0} reduce(%exponential.176, %constant.3956), dimensions={2}, to_apply=%region_282.9017
  %broadcast.6847 = f32[1,4096,2]{2,1,0} broadcast(%reduce.423), dimensions={0,1}
  %divide.635 = f32[1,4096,2]{2,1,0} divide(%exponential.176, %broadcast.6847)
  %convert.1228 = bf16[1,4096,2]{2,1,0} convert(%divide.635)
  %select.948 = bf16[1,4096,2]{2,1,0} select(%compare.1655, %convert.1228, %broadcast.5432)
  %scatter.311 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.272, %select.948), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_284.9061
  %broadcast.6849 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.14017), dimensions={0,1,2}
  %iota.1854 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1656 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6849, %iota.1854), direction=EQ
  %convert.1229 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1656)
  %reshape.14046 = s32[1,8192,8]{2,1,0} reshape(%convert.1229)
  %copy.2762 = s32[1,8192,8]{2,1,0} copy(%reshape.14046)
  %reduce-window.268 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2762, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.25
  %reshape.14048 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.268)
  %copy.2763 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.14048)
  %compare.1657 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2763, %broadcast.5435), direction=LE
  %select.949 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1657, %convert.1229, %broadcast.5436)
  %reduce.424 = s32[1,4096,8]{2,1,0} reduce(%select.949, %constant.3783), dimensions={2}, to_apply=%region_285.9075
  %convert.1230 = bf16[1,4096,8]{2,1,0} convert(%reduce.424)
  %multiply.2867 = bf16[1,4096,8]{2,1,0} multiply(%scatter.311, %convert.1230)
  %broadcast.6851 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2867), dimensions={0,1,2}
  %multiply.2868 = s32[1,8192,8]{2,1,0} multiply(%copy.2762, %reduce-window.268)
  %reshape.14049 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2868)
  %reduce.425 = s32[1,4096,8]{2,1,0} reduce(%reshape.14049, %constant.3783), dimensions={2}, to_apply=%region_286.9084
  %multiply.2869 = s32[1,4096,8]{2,1,0} multiply(%reduce.425, %reduce.424)
  %broadcast.6852 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2869), dimensions={0,1,2}
  %iota.1855 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1658 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6852, %iota.1855), direction=EQ
  %convert.1232 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1658)
  %convert.1233 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1232)
  %multiply.2870 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6851, %convert.1233)
  %slice.335 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2870), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2764 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.335)
  %compare.1659 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.335, %broadcast.5439), direction=NE
  %copy.2765 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1659)
  %convert.1235 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2765)
  %dot.418 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1235, %copy.2760), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.14052 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.418)
  %all-to-all.50 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14052), channel_id=390, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.75 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.50), dimensions={1,0,2,3,4}
  %reshape.14053 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.75)
  %transpose.76 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.14053), dimensions={1,0,2,3}
  %copy.2766 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.76)
  %param.264 = bf16[1,4096,14336]{2,1,0} parameter(183), sharding={devices=[8,1,1]<=[8]}
  %copy.2767 = bf16[1,4096,14336]{2,1,0} copy(%param.264)
  %dot.419 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2766, %copy.2767), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2768 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.419)
  %negate.184 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2768)
  %exponential.177 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.184)
  %add.3220 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.177, %broadcast.5440)
  %divide.636 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3220)
  %multiply.2874 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2768, %divide.636)
  %param.265 = bf16[1,4096,14336]{2,1,0} parameter(184), sharding={devices=[8,1,1]<=[8]}
  %copy.2769 = bf16[1,4096,14336]{2,1,0} copy(%param.265)
  %dot.420 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2766, %copy.2769), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2770 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.420)
  %multiply.2875 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2874, %copy.2770)
  %param.266 = bf16[1,14336,4096]{2,1,0} parameter(185), sharding={devices=[8,1,1]<=[8]}
  %copy.2771 = bf16[1,14336,4096]{2,1,0} copy(%param.266)
  %dot.421 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2875, %copy.2771), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2772 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.421)
  %reshape.14056 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2772)
  %all-to-all.51 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14056), channel_id=391, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.77 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.51), dimensions={1,0,2,3,4}
  %reshape.14057 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.77)
  %dot.422 = bf16[1,4096,4096]{2,1,0} dot(%copy.2764, %reshape.14057), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2773 = bf16[1,4096,4096]{2,1,0} copy(%dot.422)
  %add.3221 = bf16[1,4096,4096]{2,1,0} add(%copy.2773, %add.3212)
  %copy.2774 = bf16[1,4096,4096]{2,1,0} copy(%add.3221)
  %copy.2775 = bf16[1,4096,4096]{2,1,0} copy(%copy.2774)
  %convert.1236 = f32[1,4096,4096]{2,1,0} convert(%copy.2775)
  %multiply.2878 = f32[1,4096,4096]{2,1,0} multiply(%convert.1236, %convert.1236)
  %reduce.426 = f32[1,4096]{1,0} reduce(%multiply.2878, %constant.3956), dimensions={2}, to_apply=%region_287.9123
  %multiply.2879 = f32[1,4096]{1,0} multiply(%reduce.426, %broadcast.5380)
  %add.3222 = f32[1,4096]{1,0} add(%multiply.2879, %broadcast.5381)
  %rsqrt.116 = f32[1,4096]{1,0} rsqrt(%add.3222)
  %broadcast.6856 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.116), dimensions={0,1}
  %multiply.2880 = f32[1,4096,4096]{2,1,0} multiply(%convert.1236, %broadcast.6856)
  %convert.1237 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2880)
  %param.267 = bf16[4096]{0} parameter(197), sharding={replicated}
  %broadcast.6858 = bf16[1,4096,4096]{2,1,0} broadcast(%param.267), dimensions={2}
  %multiply.2881 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1237, %broadcast.6858)
  %copy.2776 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2881)
  %copy.2777 = bf16[1,4096,4096]{2,1,0} copy(%copy.2776)
  %param.268 = bf16[512,32,128]{2,1,0} parameter(200), sharding={devices=[8,1,1]<=[8]}
  %all-gather.183 = bf16[4096,32,128]{2,1,0} all-gather(%param.268), channel_id=392, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.423 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2777, %all-gather.183), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.336 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.423), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2885 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.336, %broadcast.5389)
  %slice.337 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.423), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2887 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.337, %broadcast.5391)
  %subtract.273 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2885, %multiply.2887)
  %multiply.2888 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.337, %broadcast.5389)
  %multiply.2889 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.336, %broadcast.5391)
  %add.3223 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2888, %multiply.2889)
  %concatenate.156 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.273, %add.3223), dimensions={3}
  %copy.2778 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.156)
  %param.269 = bf16[512,8,128]{2,1,0} parameter(198), sharding={devices=[8,1,1]<=[8]}
  %all-gather.184 = bf16[4096,8,128]{2,1,0} all-gather(%param.269), channel_id=393, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.424 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2777, %all-gather.184), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.338 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.424), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2893 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.338, %broadcast.5400)
  %slice.339 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.424), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2896 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.339, %broadcast.5401)
  %subtract.274 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2893, %multiply.2896)
  %multiply.2897 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.339, %broadcast.5400)
  %multiply.2898 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.338, %broadcast.5401)
  %add.3224 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2897, %multiply.2898)
  %concatenate.157 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.274, %add.3224), dimensions={3}
  %copy.2780 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.157)
  %param.270 = bf16[512,8,128]{2,1,0} parameter(201), sharding={devices=[8,1,1]<=[8]}
  %all-gather.185 = bf16[4096,8,128]{2,1,0} all-gather(%param.270), channel_id=394, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.425 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2777, %all-gather.185), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2781 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.425)
  %custom-call.115 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2778, %copy.2780, %copy.2781, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.625 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.115), index=0
  %copy.2782 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.625)
  %param.271 = bf16[32,128,512]{2,1,0} parameter(199), sharding={devices=[1,1,8]<=[8]}
  %all-gather.186 = bf16[32,128,4096]{2,1,0} all-gather(%param.271), channel_id=395, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.426 = bf16[1,4096,4096]{2,1,0} dot(%copy.2782, %all-gather.186), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2783 = bf16[1,4096,4096]{2,1,0} copy(%dot.426)
  %add.3237 = bf16[1,4096,4096]{2,1,0} add(%copy.2775, %copy.2783)
  %convert.1252 = f32[1,4096,4096]{2,1,0} convert(%add.3237)
  %multiply.2900 = f32[1,4096,4096]{2,1,0} multiply(%convert.1252, %convert.1252)
  %reduce.430 = f32[1,4096]{1,0} reduce(%multiply.2900, %constant.3956), dimensions={2}, to_apply=%region_291.9283
  %multiply.2901 = f32[1,4096]{1,0} multiply(%reduce.430, %broadcast.5380)
  %add.3238 = f32[1,4096]{1,0} add(%multiply.2901, %broadcast.5381)
  %rsqrt.117 = f32[1,4096]{1,0} rsqrt(%add.3238)
  %broadcast.6891 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.117), dimensions={0,1}
  %multiply.2902 = f32[1,4096,4096]{2,1,0} multiply(%convert.1252, %broadcast.6891)
  %convert.1253 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2902)
  %param.272 = bf16[4096]{0} parameter(196), sharding={replicated}
  %broadcast.6893 = bf16[1,4096,4096]{2,1,0} broadcast(%param.272), dimensions={2}
  %multiply.2903 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1253, %broadcast.6893)
  %copy.2784 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2903)
  %param.273 = bf16[512,8]{1,0} parameter(192), sharding={devices=[8,1]<=[8]}
  %all-gather.187 = bf16[4096,8]{1,0} all-gather(%param.273), channel_id=396, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.427 = bf16[1,4096,8]{2,1,0} dot(%copy.2784, %all-gather.187), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2785 = bf16[1,4096,8]{2,1,0} copy(%dot.427)
  %reshape.14115 = bf16[4096,8]{1,0} reshape(%copy.2785)
  %custom-call.116 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.14115), custom_call_target="TopK", called_computations={%compare-greater-than.26.clone}
  %get-tuple-element.626 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.116), index=0
  %get-tuple-element.627 = s32[4096,2]{1,0} get-tuple-element(%custom-call.116), index=1
  %add.3239 = s32[4096,2]{1,0} add(%get-tuple-element.627, %broadcast.5420)
  %sort.144 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.626, %add.3239), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.26
  %get-tuple-element.629 = s32[4096,2]{1,0} get-tuple-element(%sort.144), index=1
  %slice.342 = s32[4096,2]{1,0} slice(%get-tuple-element.629), slice={[0:4096], [0:2]}
  %all-gather.189 = s32[32768,2]{1,0} all-gather(%slice.342), channel_id=398, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.769 = s32[4096,2]{1,0} dynamic-slice(%all-gather.189, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.14119 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.769)
  %compare.1689 = pred[1,4096,2]{2,1,0} compare(%reshape.14119, %broadcast.5421), direction=LT
  %add.3241 = s32[1,4096,2]{2,1,0} add(%reshape.14119, %broadcast.5422)
  %select.971 = s32[1,4096,2]{2,1,0} select(%compare.1689, %add.3241, %reshape.14119)
  %reshape.14121 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.971)
  %concatenate.158 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1561, %reshape.14121), dimensions={3}
  %subtract.280 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.158, %broadcast.5433)
  %scatter.322 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.280, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_294.9357
  %gather.26 = u32[1,4096,2]{2,1,0} gather(%scatter.322, %subtract.280), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1690 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.26), direction=EQ
  %get-tuple-element.628 = bf16[4096,2]{1,0} get-tuple-element(%sort.144), index=0
  %slice.341 = bf16[4096,2]{1,0} slice(%get-tuple-element.628), slice={[0:4096], [0:2]}
  %all-gather.188 = bf16[32768,2]{1,0} all-gather(%slice.341), channel_id=397, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.779 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.188, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1256 = f32[4096,2]{1,0} convert(%dynamic-slice.779)
  %reshape.14141 = f32[1,4096,2]{2,1,0} reshape(%convert.1256)
  %reduce.431 = f32[4096]{0} reduce(%convert.1256, %constant.4073), dimensions={1}, to_apply=%region_292.9309
  %reshape.14142 = f32[1,4096]{1,0} reshape(%reduce.431)
  %broadcast.6901 = f32[1,4096,2]{2,1,0} broadcast(%reshape.14142), dimensions={0,1}
  %subtract.279 = f32[1,4096,2]{2,1,0} subtract(%reshape.14141, %broadcast.6901)
  %exponential.178 = f32[1,4096,2]{2,1,0} exponential(%subtract.279)
  %reduce.432 = f32[1,4096]{1,0} reduce(%exponential.178, %constant.3956), dimensions={2}, to_apply=%region_293.9321
  %broadcast.6902 = f32[1,4096,2]{2,1,0} broadcast(%reduce.432), dimensions={0,1}
  %divide.641 = f32[1,4096,2]{2,1,0} divide(%exponential.178, %broadcast.6902)
  %convert.1257 = bf16[1,4096,2]{2,1,0} convert(%divide.641)
  %select.972 = bf16[1,4096,2]{2,1,0} select(%compare.1690, %convert.1257, %broadcast.5432)
  %scatter.323 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.280, %select.972), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_295.9365
  %broadcast.6904 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.14119), dimensions={0,1,2}
  %iota.1863 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1691 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6904, %iota.1863), direction=EQ
  %convert.1258 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1691)
  %reshape.14153 = s32[1,8192,8]{2,1,0} reshape(%convert.1258)
  %copy.2786 = s32[1,8192,8]{2,1,0} copy(%reshape.14153)
  %reduce-window.271 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2786, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.26
  %reshape.14155 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.271)
  %copy.2787 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.14155)
  %compare.1692 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2787, %broadcast.5435), direction=LE
  %select.973 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1692, %convert.1258, %broadcast.5436)
  %reduce.433 = s32[1,4096,8]{2,1,0} reduce(%select.973, %constant.3783), dimensions={2}, to_apply=%region_296.9379
  %convert.1259 = bf16[1,4096,8]{2,1,0} convert(%reduce.433)
  %multiply.2910 = bf16[1,4096,8]{2,1,0} multiply(%scatter.323, %convert.1259)
  %broadcast.6906 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2910), dimensions={0,1,2}
  %multiply.2911 = s32[1,8192,8]{2,1,0} multiply(%copy.2786, %reduce-window.271)
  %reshape.14157 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2911)
  %reduce.434 = s32[1,4096,8]{2,1,0} reduce(%reshape.14157, %constant.3783), dimensions={2}, to_apply=%region_297.9388
  %multiply.2912 = s32[1,4096,8]{2,1,0} multiply(%reduce.434, %reduce.433)
  %broadcast.6907 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2912), dimensions={0,1,2}
  %iota.1864 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1693 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6907, %iota.1864), direction=EQ
  %convert.1260 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1693)
  %convert.1261 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1260)
  %multiply.2913 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6906, %convert.1261)
  %slice.343 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2913), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2788 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.343)
  %compare.1694 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.343, %broadcast.5439), direction=NE
  %copy.2789 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1694)
  %convert.1262 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2789)
  %dot.428 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1262, %copy.2784), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.14161 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.428)
  %all-to-all.52 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14161), channel_id=405, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.78 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.52), dimensions={1,0,2,3,4}
  %reshape.14162 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.78)
  %transpose.79 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.14162), dimensions={1,0,2,3}
  %copy.2790 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.79)
  %param.274 = bf16[1,4096,14336]{2,1,0} parameter(193), sharding={devices=[8,1,1]<=[8]}
  %copy.2791 = bf16[1,4096,14336]{2,1,0} copy(%param.274)
  %dot.429 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2790, %copy.2791), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2792 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.429)
  %negate.185 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2792)
  %exponential.179 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.185)
  %add.3246 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.179, %broadcast.5440)
  %divide.642 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3246)
  %multiply.2918 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2792, %divide.642)
  %param.275 = bf16[1,4096,14336]{2,1,0} parameter(194), sharding={devices=[8,1,1]<=[8]}
  %copy.2793 = bf16[1,4096,14336]{2,1,0} copy(%param.275)
  %dot.430 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2790, %copy.2793), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2794 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.430)
  %multiply.2919 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2918, %copy.2794)
  %param.276 = bf16[1,14336,4096]{2,1,0} parameter(195), sharding={devices=[8,1,1]<=[8]}
  %copy.2795 = bf16[1,14336,4096]{2,1,0} copy(%param.276)
  %dot.431 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2919, %copy.2795), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2796 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.431)
  %reshape.14165 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2796)
  %all-to-all.53 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14165), channel_id=406, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.80 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.53), dimensions={1,0,2,3,4}
  %reshape.14166 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.80)
  %dot.432 = bf16[1,4096,4096]{2,1,0} dot(%copy.2788, %reshape.14166), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2797 = bf16[1,4096,4096]{2,1,0} copy(%dot.432)
  %add.3247 = bf16[1,4096,4096]{2,1,0} add(%copy.2797, %add.3237)
  %copy.2798 = bf16[1,4096,4096]{2,1,0} copy(%add.3247)
  %copy.2799 = bf16[1,4096,4096]{2,1,0} copy(%copy.2798)
  %convert.1263 = f32[1,4096,4096]{2,1,0} convert(%copy.2799)
  %multiply.2922 = f32[1,4096,4096]{2,1,0} multiply(%convert.1263, %convert.1263)
  %reduce.435 = f32[1,4096]{1,0} reduce(%multiply.2922, %constant.3956), dimensions={2}, to_apply=%region_298.9427
  %multiply.2923 = f32[1,4096]{1,0} multiply(%reduce.435, %broadcast.5380)
  %add.3248 = f32[1,4096]{1,0} add(%multiply.2923, %broadcast.5381)
  %rsqrt.118 = f32[1,4096]{1,0} rsqrt(%add.3248)
  %broadcast.6914 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.118), dimensions={0,1}
  %multiply.2924 = f32[1,4096,4096]{2,1,0} multiply(%convert.1263, %broadcast.6914)
  %convert.1264 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2924)
  %param.277 = bf16[4096]{0} parameter(207), sharding={replicated}
  %broadcast.6916 = bf16[1,4096,4096]{2,1,0} broadcast(%param.277), dimensions={2}
  %multiply.2925 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1264, %broadcast.6916)
  %copy.2800 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2925)
  %copy.2801 = bf16[1,4096,4096]{2,1,0} copy(%copy.2800)
  %param.278 = bf16[512,32,128]{2,1,0} parameter(210), sharding={devices=[8,1,1]<=[8]}
  %all-gather.190 = bf16[4096,32,128]{2,1,0} all-gather(%param.278), channel_id=407, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.433 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2801, %all-gather.190), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.344 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.433), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2929 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.344, %broadcast.5389)
  %slice.345 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.433), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2931 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.345, %broadcast.5391)
  %subtract.281 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2929, %multiply.2931)
  %multiply.2932 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.345, %broadcast.5389)
  %multiply.2933 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.344, %broadcast.5391)
  %add.3249 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2932, %multiply.2933)
  %concatenate.162 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.281, %add.3249), dimensions={3}
  %copy.2802 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.162)
  %param.279 = bf16[512,8,128]{2,1,0} parameter(208), sharding={devices=[8,1,1]<=[8]}
  %all-gather.191 = bf16[4096,8,128]{2,1,0} all-gather(%param.279), channel_id=408, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.434 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2801, %all-gather.191), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.346 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.434), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2937 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.346, %broadcast.5400)
  %slice.347 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.434), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2939 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.347, %broadcast.5401)
  %subtract.282 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2937, %multiply.2939)
  %multiply.2940 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.347, %broadcast.5400)
  %multiply.2941 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.346, %broadcast.5401)
  %add.3250 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2940, %multiply.2941)
  %concatenate.163 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.282, %add.3250), dimensions={3}
  %copy.2804 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.163)
  %param.280 = bf16[512,8,128]{2,1,0} parameter(211), sharding={devices=[8,1,1]<=[8]}
  %all-gather.192 = bf16[4096,8,128]{2,1,0} all-gather(%param.280), channel_id=409, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.435 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2801, %all-gather.192), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2805 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.435)
  %custom-call.117 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2802, %copy.2804, %copy.2805, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.639 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.117), index=0
  %copy.2806 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.639)
  %param.281 = bf16[32,128,512]{2,1,0} parameter(209), sharding={devices=[1,1,8]<=[8]}
  %all-gather.193 = bf16[32,128,4096]{2,1,0} all-gather(%param.281), channel_id=410, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.436 = bf16[1,4096,4096]{2,1,0} dot(%copy.2806, %all-gather.193), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2807 = bf16[1,4096,4096]{2,1,0} copy(%dot.436)
  %add.3266 = bf16[1,4096,4096]{2,1,0} add(%copy.2799, %copy.2807)
  %convert.1277 = f32[1,4096,4096]{2,1,0} convert(%add.3266)
  %multiply.2943 = f32[1,4096,4096]{2,1,0} multiply(%convert.1277, %convert.1277)
  %reduce.439 = f32[1,4096]{1,0} reduce(%multiply.2943, %constant.3956), dimensions={2}, to_apply=%region_302.9587
  %multiply.2944 = f32[1,4096]{1,0} multiply(%reduce.439, %broadcast.5380)
  %add.3267 = f32[1,4096]{1,0} add(%multiply.2944, %broadcast.5381)
  %rsqrt.119 = f32[1,4096]{1,0} rsqrt(%add.3267)
  %broadcast.6944 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.119), dimensions={0,1}
  %multiply.2945 = f32[1,4096,4096]{2,1,0} multiply(%convert.1277, %broadcast.6944)
  %convert.1278 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2945)
  %param.282 = bf16[4096]{0} parameter(206), sharding={replicated}
  %broadcast.6945 = bf16[1,4096,4096]{2,1,0} broadcast(%param.282), dimensions={2}
  %multiply.2946 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1278, %broadcast.6945)
  %copy.2808 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2946)
  %param.283 = bf16[512,8]{1,0} parameter(202), sharding={devices=[8,1]<=[8]}
  %all-gather.194 = bf16[4096,8]{1,0} all-gather(%param.283), channel_id=411, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.437 = bf16[1,4096,8]{2,1,0} dot(%copy.2808, %all-gather.194), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2809 = bf16[1,4096,8]{2,1,0} copy(%dot.437)
  %reshape.14222 = bf16[4096,8]{1,0} reshape(%copy.2809)
  %custom-call.118 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.14222), custom_call_target="TopK", called_computations={%compare-greater-than.27.clone}
  %get-tuple-element.640 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.118), index=0
  %get-tuple-element.641 = s32[4096,2]{1,0} get-tuple-element(%custom-call.118), index=1
  %add.3268 = s32[4096,2]{1,0} add(%get-tuple-element.641, %broadcast.5420)
  %sort.147 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.640, %add.3268), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.27
  %get-tuple-element.643 = s32[4096,2]{1,0} get-tuple-element(%sort.147), index=1
  %slice.350 = s32[4096,2]{1,0} slice(%get-tuple-element.643), slice={[0:4096], [0:2]}
  %all-gather.196 = s32[32768,2]{1,0} all-gather(%slice.350), channel_id=413, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.797 = s32[4096,2]{1,0} dynamic-slice(%all-gather.196, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.14225 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.797)
  %compare.1724 = pred[1,4096,2]{2,1,0} compare(%reshape.14225, %broadcast.5421), direction=LT
  %add.3269 = s32[1,4096,2]{2,1,0} add(%reshape.14225, %broadcast.5422)
  %select.995 = s32[1,4096,2]{2,1,0} select(%compare.1724, %add.3269, %reshape.14225)
  %reshape.14227 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.995)
  %concatenate.164 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1559, %reshape.14227), dimensions={3}
  %subtract.288 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.164, %broadcast.5433)
  %scatter.334 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.288, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_305.9661
  %gather.27 = u32[1,4096,2]{2,1,0} gather(%scatter.334, %subtract.288), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1725 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.27), direction=EQ
  %get-tuple-element.642 = bf16[4096,2]{1,0} get-tuple-element(%sort.147), index=0
  %slice.349 = bf16[4096,2]{1,0} slice(%get-tuple-element.642), slice={[0:4096], [0:2]}
  %all-gather.195 = bf16[32768,2]{1,0} all-gather(%slice.349), channel_id=412, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.807 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.195, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1281 = f32[4096,2]{1,0} convert(%dynamic-slice.807)
  %reshape.14246 = f32[1,4096,2]{2,1,0} reshape(%convert.1281)
  %reduce.440 = f32[4096]{0} reduce(%convert.1281, %constant.4073), dimensions={1}, to_apply=%region_303.9613
  %reshape.14247 = f32[1,4096]{1,0} reshape(%reduce.440)
  %broadcast.6952 = f32[1,4096,2]{2,1,0} broadcast(%reshape.14247), dimensions={0,1}
  %subtract.287 = f32[1,4096,2]{2,1,0} subtract(%reshape.14246, %broadcast.6952)
  %exponential.180 = f32[1,4096,2]{2,1,0} exponential(%subtract.287)
  %reduce.441 = f32[1,4096]{1,0} reduce(%exponential.180, %constant.3956), dimensions={2}, to_apply=%region_304.9625
  %broadcast.6953 = f32[1,4096,2]{2,1,0} broadcast(%reduce.441), dimensions={0,1}
  %divide.647 = f32[1,4096,2]{2,1,0} divide(%exponential.180, %broadcast.6953)
  %convert.1282 = bf16[1,4096,2]{2,1,0} convert(%divide.647)
  %select.996 = bf16[1,4096,2]{2,1,0} select(%compare.1725, %convert.1282, %broadcast.5432)
  %scatter.335 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.288, %select.996), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_306.9669
  %broadcast.6955 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.14225), dimensions={0,1,2}
  %iota.1872 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1726 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.6955, %iota.1872), direction=EQ
  %convert.1283 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1726)
  %reshape.14259 = s32[1,8192,8]{2,1,0} reshape(%convert.1283)
  %copy.2810 = s32[1,8192,8]{2,1,0} copy(%reshape.14259)
  %reduce-window.274 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2810, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.27
  %reshape.14261 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.274)
  %copy.2811 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.14261)
  %compare.1727 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2811, %broadcast.5435), direction=LE
  %select.997 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1727, %convert.1283, %broadcast.5436)
  %reduce.442 = s32[1,4096,8]{2,1,0} reduce(%select.997, %constant.3783), dimensions={2}, to_apply=%region_307.9683
  %convert.1284 = bf16[1,4096,8]{2,1,0} convert(%reduce.442)
  %multiply.2952 = bf16[1,4096,8]{2,1,0} multiply(%scatter.335, %convert.1284)
  %broadcast.6957 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2952), dimensions={0,1,2}
  %multiply.2953 = s32[1,8192,8]{2,1,0} multiply(%copy.2810, %reduce-window.274)
  %reshape.14262 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2953)
  %reduce.443 = s32[1,4096,8]{2,1,0} reduce(%reshape.14262, %constant.3783), dimensions={2}, to_apply=%region_308.9692
  %multiply.2954 = s32[1,4096,8]{2,1,0} multiply(%reduce.443, %reduce.442)
  %broadcast.6958 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2954), dimensions={0,1,2}
  %iota.1873 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1728 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.6958, %iota.1873), direction=EQ
  %convert.1285 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1728)
  %convert.1286 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1285)
  %multiply.2955 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.6957, %convert.1286)
  %slice.351 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2955), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2812 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.351)
  %compare.1729 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.351, %broadcast.5439), direction=NE
  %copy.2813 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1729)
  %convert.1287 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2813)
  %dot.438 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1287, %copy.2808), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.14265 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.438)
  %all-to-all.54 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14265), channel_id=420, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.81 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.54), dimensions={1,0,2,3,4}
  %reshape.14266 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.81)
  %transpose.82 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.14266), dimensions={1,0,2,3}
  %copy.2814 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.82)
  %param.284 = bf16[1,4096,14336]{2,1,0} parameter(203), sharding={devices=[8,1,1]<=[8]}
  %copy.2815 = bf16[1,4096,14336]{2,1,0} copy(%param.284)
  %dot.439 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2814, %copy.2815), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2816 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.439)
  %negate.186 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2816)
  %exponential.181 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.186)
  %add.3275 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.181, %broadcast.5440)
  %divide.648 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3275)
  %multiply.2959 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2816, %divide.648)
  %param.285 = bf16[1,4096,14336]{2,1,0} parameter(204), sharding={devices=[8,1,1]<=[8]}
  %copy.2817 = bf16[1,4096,14336]{2,1,0} copy(%param.285)
  %dot.440 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2814, %copy.2817), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2818 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.440)
  %multiply.2960 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.2959, %copy.2818)
  %param.286 = bf16[1,14336,4096]{2,1,0} parameter(205), sharding={devices=[8,1,1]<=[8]}
  %copy.2819 = bf16[1,14336,4096]{2,1,0} copy(%param.286)
  %dot.441 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.2960, %copy.2819), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2820 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.441)
  %reshape.14271 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2820)
  %all-to-all.55 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14271), channel_id=421, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.83 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.55), dimensions={1,0,2,3,4}
  %reshape.14272 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.83)
  %dot.442 = bf16[1,4096,4096]{2,1,0} dot(%copy.2812, %reshape.14272), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2821 = bf16[1,4096,4096]{2,1,0} copy(%dot.442)
  %add.3276 = bf16[1,4096,4096]{2,1,0} add(%copy.2821, %add.3266)
  %copy.2822 = bf16[1,4096,4096]{2,1,0} copy(%add.3276)
  %copy.2823 = bf16[1,4096,4096]{2,1,0} copy(%copy.2822)
  %convert.1288 = f32[1,4096,4096]{2,1,0} convert(%copy.2823)
  %multiply.2963 = f32[1,4096,4096]{2,1,0} multiply(%convert.1288, %convert.1288)
  %reduce.444 = f32[1,4096]{1,0} reduce(%multiply.2963, %constant.3956), dimensions={2}, to_apply=%region_309.9731
  %multiply.2964 = f32[1,4096]{1,0} multiply(%reduce.444, %broadcast.5380)
  %add.3277 = f32[1,4096]{1,0} add(%multiply.2964, %broadcast.5381)
  %rsqrt.120 = f32[1,4096]{1,0} rsqrt(%add.3277)
  %broadcast.6963 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.120), dimensions={0,1}
  %multiply.2965 = f32[1,4096,4096]{2,1,0} multiply(%convert.1288, %broadcast.6963)
  %convert.1289 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2965)
  %param.287 = bf16[4096]{0} parameter(217), sharding={replicated}
  %broadcast.6965 = bf16[1,4096,4096]{2,1,0} broadcast(%param.287), dimensions={2}
  %multiply.2966 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1289, %broadcast.6965)
  %copy.2824 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2966)
  %copy.2825 = bf16[1,4096,4096]{2,1,0} copy(%copy.2824)
  %param.288 = bf16[512,32,128]{2,1,0} parameter(220), sharding={devices=[8,1,1]<=[8]}
  %all-gather.197 = bf16[4096,32,128]{2,1,0} all-gather(%param.288), channel_id=422, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.443 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2825, %all-gather.197), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.352 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.443), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.2970 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.352, %broadcast.5389)
  %slice.353 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.443), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.2972 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.353, %broadcast.5391)
  %subtract.289 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.2970, %multiply.2972)
  %multiply.2973 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.353, %broadcast.5389)
  %multiply.2974 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.352, %broadcast.5391)
  %add.3278 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.2973, %multiply.2974)
  %concatenate.168 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.289, %add.3278), dimensions={3}
  %copy.2826 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.168)
  %param.289 = bf16[512,8,128]{2,1,0} parameter(218), sharding={devices=[8,1,1]<=[8]}
  %all-gather.198 = bf16[4096,8,128]{2,1,0} all-gather(%param.289), channel_id=423, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.444 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2825, %all-gather.198), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.354 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.444), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.2978 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.354, %broadcast.5400)
  %slice.355 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.444), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.2980 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.355, %broadcast.5401)
  %subtract.290 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.2978, %multiply.2980)
  %multiply.2981 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.355, %broadcast.5400)
  %multiply.2982 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.354, %broadcast.5401)
  %add.3279 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.2981, %multiply.2982)
  %concatenate.169 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.290, %add.3279), dimensions={3}
  %copy.2828 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.169)
  %param.290 = bf16[512,8,128]{2,1,0} parameter(221), sharding={devices=[8,1,1]<=[8]}
  %all-gather.199 = bf16[4096,8,128]{2,1,0} all-gather(%param.290), channel_id=424, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.445 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2825, %all-gather.199), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2829 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.445)
  %custom-call.119 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2826, %copy.2828, %copy.2829, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.653 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.119), index=0
  %copy.2830 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.653)
  %param.291 = bf16[32,128,512]{2,1,0} parameter(219), sharding={devices=[1,1,8]<=[8]}
  %all-gather.200 = bf16[32,128,4096]{2,1,0} all-gather(%param.291), channel_id=425, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.446 = bf16[1,4096,4096]{2,1,0} dot(%copy.2830, %all-gather.200), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2831 = bf16[1,4096,4096]{2,1,0} copy(%dot.446)
  %add.3293 = bf16[1,4096,4096]{2,1,0} add(%copy.2823, %copy.2831)
  %convert.1303 = f32[1,4096,4096]{2,1,0} convert(%add.3293)
  %multiply.2984 = f32[1,4096,4096]{2,1,0} multiply(%convert.1303, %convert.1303)
  %reduce.448 = f32[1,4096]{1,0} reduce(%multiply.2984, %constant.3956), dimensions={2}, to_apply=%region_313.9891
  %multiply.2985 = f32[1,4096]{1,0} multiply(%reduce.448, %broadcast.5380)
  %add.3294 = f32[1,4096]{1,0} add(%multiply.2985, %broadcast.5381)
  %rsqrt.121 = f32[1,4096]{1,0} rsqrt(%add.3294)
  %broadcast.6993 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.121), dimensions={0,1}
  %multiply.2986 = f32[1,4096,4096]{2,1,0} multiply(%convert.1303, %broadcast.6993)
  %convert.1304 = bf16[1,4096,4096]{2,1,0} convert(%multiply.2986)
  %param.292 = bf16[4096]{0} parameter(216), sharding={replicated}
  %broadcast.6994 = bf16[1,4096,4096]{2,1,0} broadcast(%param.292), dimensions={2}
  %multiply.2987 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1304, %broadcast.6994)
  %copy.2832 = bf16[1,4096,4096]{2,1,0} copy(%multiply.2987)
  %param.293 = bf16[512,8]{1,0} parameter(212), sharding={devices=[8,1]<=[8]}
  %all-gather.201 = bf16[4096,8]{1,0} all-gather(%param.293), channel_id=426, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.447 = bf16[1,4096,8]{2,1,0} dot(%copy.2832, %all-gather.201), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2833 = bf16[1,4096,8]{2,1,0} copy(%dot.447)
  %reshape.14330 = bf16[4096,8]{1,0} reshape(%copy.2833)
  %custom-call.120 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.14330), custom_call_target="TopK", called_computations={%compare-greater-than.28.clone}
  %get-tuple-element.654 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.120), index=0
  %get-tuple-element.655 = s32[4096,2]{1,0} get-tuple-element(%custom-call.120), index=1
  %add.3295 = s32[4096,2]{1,0} add(%get-tuple-element.655, %broadcast.5420)
  %sort.150 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.654, %add.3295), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.28
  %get-tuple-element.657 = s32[4096,2]{1,0} get-tuple-element(%sort.150), index=1
  %slice.358 = s32[4096,2]{1,0} slice(%get-tuple-element.657), slice={[0:4096], [0:2]}
  %all-gather.203 = s32[32768,2]{1,0} all-gather(%slice.358), channel_id=428, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.825 = s32[4096,2]{1,0} dynamic-slice(%all-gather.203, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.14334 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.825)
  %compare.1763 = pred[1,4096,2]{2,1,0} compare(%reshape.14334, %broadcast.5421), direction=LT
  %add.3296 = s32[1,4096,2]{2,1,0} add(%reshape.14334, %broadcast.5422)
  %select.1019 = s32[1,4096,2]{2,1,0} select(%compare.1763, %add.3296, %reshape.14334)
  %reshape.14335 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1019)
  %concatenate.170 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1557, %reshape.14335), dimensions={3}
  %subtract.296 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.170, %broadcast.5433)
  %scatter.346 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.296, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_316.9965
  %gather.28 = u32[1,4096,2]{2,1,0} gather(%scatter.346, %subtract.296), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1764 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.28), direction=EQ
  %get-tuple-element.656 = bf16[4096,2]{1,0} get-tuple-element(%sort.150), index=0
  %slice.357 = bf16[4096,2]{1,0} slice(%get-tuple-element.656), slice={[0:4096], [0:2]}
  %all-gather.202 = bf16[32768,2]{1,0} all-gather(%slice.357), channel_id=427, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.835 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.202, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1307 = f32[4096,2]{1,0} convert(%dynamic-slice.835)
  %reshape.14353 = f32[1,4096,2]{2,1,0} reshape(%convert.1307)
  %reduce.449 = f32[4096]{0} reduce(%convert.1307, %constant.4073), dimensions={1}, to_apply=%region_314.9917
  %reshape.14354 = f32[1,4096]{1,0} reshape(%reduce.449)
  %broadcast.7002 = f32[1,4096,2]{2,1,0} broadcast(%reshape.14354), dimensions={0,1}
  %subtract.295 = f32[1,4096,2]{2,1,0} subtract(%reshape.14353, %broadcast.7002)
  %exponential.182 = f32[1,4096,2]{2,1,0} exponential(%subtract.295)
  %reduce.450 = f32[1,4096]{1,0} reduce(%exponential.182, %constant.3956), dimensions={2}, to_apply=%region_315.9929
  %broadcast.7004 = f32[1,4096,2]{2,1,0} broadcast(%reduce.450), dimensions={0,1}
  %divide.653 = f32[1,4096,2]{2,1,0} divide(%exponential.182, %broadcast.7004)
  %convert.1308 = bf16[1,4096,2]{2,1,0} convert(%divide.653)
  %select.1020 = bf16[1,4096,2]{2,1,0} select(%compare.1764, %convert.1308, %broadcast.5432)
  %scatter.347 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.296, %select.1020), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_317.9973
  %broadcast.7006 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.14334), dimensions={0,1,2}
  %iota.1881 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1765 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7006, %iota.1881), direction=EQ
  %convert.1310 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1765)
  %reshape.14363 = s32[1,8192,8]{2,1,0} reshape(%convert.1310)
  %copy.2834 = s32[1,8192,8]{2,1,0} copy(%reshape.14363)
  %reduce-window.277 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2834, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.28
  %reshape.14365 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.277)
  %copy.2835 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.14365)
  %compare.1766 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2835, %broadcast.5435), direction=LE
  %select.1021 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1766, %convert.1310, %broadcast.5436)
  %reduce.451 = s32[1,4096,8]{2,1,0} reduce(%select.1021, %constant.3783), dimensions={2}, to_apply=%region_318.9987
  %convert.1311 = bf16[1,4096,8]{2,1,0} convert(%reduce.451)
  %multiply.2994 = bf16[1,4096,8]{2,1,0} multiply(%scatter.347, %convert.1311)
  %broadcast.7010 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2994), dimensions={0,1,2}
  %multiply.2995 = s32[1,8192,8]{2,1,0} multiply(%copy.2834, %reduce-window.277)
  %reshape.14366 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.2995)
  %reduce.452 = s32[1,4096,8]{2,1,0} reduce(%reshape.14366, %constant.3783), dimensions={2}, to_apply=%region_319.9996
  %multiply.2996 = s32[1,4096,8]{2,1,0} multiply(%reduce.452, %reduce.451)
  %broadcast.7011 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.2996), dimensions={0,1,2}
  %iota.1882 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1767 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7011, %iota.1882), direction=EQ
  %convert.1312 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1767)
  %convert.1313 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1312)
  %multiply.2997 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7010, %convert.1313)
  %slice.359 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.2997), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2836 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.359)
  %compare.1768 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.359, %broadcast.5439), direction=NE
  %copy.2837 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1768)
  %convert.1314 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2837)
  %dot.448 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1314, %copy.2832), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.14369 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.448)
  %all-to-all.56 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14369), channel_id=435, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.84 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.56), dimensions={1,0,2,3,4}
  %reshape.14370 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.84)
  %transpose.85 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.14370), dimensions={1,0,2,3}
  %copy.2838 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.85)
  %param.294 = bf16[1,4096,14336]{2,1,0} parameter(213), sharding={devices=[8,1,1]<=[8]}
  %copy.2839 = bf16[1,4096,14336]{2,1,0} copy(%param.294)
  %dot.449 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2838, %copy.2839), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2840 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.449)
  %negate.187 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2840)
  %exponential.183 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.187)
  %add.3302 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.183, %broadcast.5440)
  %divide.654 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3302)
  %multiply.3003 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2840, %divide.654)
  %param.295 = bf16[1,4096,14336]{2,1,0} parameter(214), sharding={devices=[8,1,1]<=[8]}
  %copy.2841 = bf16[1,4096,14336]{2,1,0} copy(%param.295)
  %dot.450 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2838, %copy.2841), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2842 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.450)
  %multiply.3004 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3003, %copy.2842)
  %param.296 = bf16[1,14336,4096]{2,1,0} parameter(215), sharding={devices=[8,1,1]<=[8]}
  %copy.2843 = bf16[1,14336,4096]{2,1,0} copy(%param.296)
  %dot.451 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3004, %copy.2843), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2844 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.451)
  %reshape.14373 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2844)
  %all-to-all.57 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14373), channel_id=436, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.86 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.57), dimensions={1,0,2,3,4}
  %reshape.14374 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.86)
  %dot.452 = bf16[1,4096,4096]{2,1,0} dot(%copy.2836, %reshape.14374), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2845 = bf16[1,4096,4096]{2,1,0} copy(%dot.452)
  %add.3303 = bf16[1,4096,4096]{2,1,0} add(%copy.2845, %add.3293)
  %copy.2846 = bf16[1,4096,4096]{2,1,0} copy(%add.3303)
  %copy.2847 = bf16[1,4096,4096]{2,1,0} copy(%copy.2846)
  %convert.1315 = f32[1,4096,4096]{2,1,0} convert(%copy.2847)
  %multiply.3008 = f32[1,4096,4096]{2,1,0} multiply(%convert.1315, %convert.1315)
  %reduce.453 = f32[1,4096]{1,0} reduce(%multiply.3008, %constant.3956), dimensions={2}, to_apply=%region_320.10035
  %multiply.3009 = f32[1,4096]{1,0} multiply(%reduce.453, %broadcast.5380)
  %add.3304 = f32[1,4096]{1,0} add(%multiply.3009, %broadcast.5381)
  %rsqrt.122 = f32[1,4096]{1,0} rsqrt(%add.3304)
  %broadcast.7015 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.122), dimensions={0,1}
  %multiply.3010 = f32[1,4096,4096]{2,1,0} multiply(%convert.1315, %broadcast.7015)
  %convert.1316 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3010)
  %param.297 = bf16[4096]{0} parameter(227), sharding={replicated}
  %broadcast.7016 = bf16[1,4096,4096]{2,1,0} broadcast(%param.297), dimensions={2}
  %multiply.3011 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1316, %broadcast.7016)
  %copy.2848 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3011)
  %copy.2849 = bf16[1,4096,4096]{2,1,0} copy(%copy.2848)
  %param.298 = bf16[512,32,128]{2,1,0} parameter(230), sharding={devices=[8,1,1]<=[8]}
  %all-gather.204 = bf16[4096,32,128]{2,1,0} all-gather(%param.298), channel_id=437, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.453 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2849, %all-gather.204), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.360 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.453), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3016 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.360, %broadcast.5389)
  %slice.361 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.453), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3018 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.361, %broadcast.5391)
  %subtract.297 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3016, %multiply.3018)
  %multiply.3019 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.361, %broadcast.5389)
  %multiply.3020 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.360, %broadcast.5391)
  %add.3305 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3019, %multiply.3020)
  %concatenate.174 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.297, %add.3305), dimensions={3}
  %copy.2850 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.174)
  %param.299 = bf16[512,8,128]{2,1,0} parameter(228), sharding={devices=[8,1,1]<=[8]}
  %all-gather.205 = bf16[4096,8,128]{2,1,0} all-gather(%param.299), channel_id=438, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.454 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2849, %all-gather.205), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.362 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.454), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3024 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.362, %broadcast.5400)
  %slice.363 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.454), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3026 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.363, %broadcast.5401)
  %subtract.298 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3024, %multiply.3026)
  %multiply.3027 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.363, %broadcast.5400)
  %multiply.3028 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.362, %broadcast.5401)
  %add.3306 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3027, %multiply.3028)
  %concatenate.175 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.298, %add.3306), dimensions={3}
  %copy.2852 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.175)
  %param.300 = bf16[512,8,128]{2,1,0} parameter(231), sharding={devices=[8,1,1]<=[8]}
  %all-gather.206 = bf16[4096,8,128]{2,1,0} all-gather(%param.300), channel_id=439, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.455 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2849, %all-gather.206), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2853 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.455)
  %custom-call.121 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2850, %copy.2852, %copy.2853, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.667 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.121), index=0
  %copy.2854 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.667)
  %param.301 = bf16[32,128,512]{2,1,0} parameter(229), sharding={devices=[1,1,8]<=[8]}
  %all-gather.207 = bf16[32,128,4096]{2,1,0} all-gather(%param.301), channel_id=440, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.456 = bf16[1,4096,4096]{2,1,0} dot(%copy.2854, %all-gather.207), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2855 = bf16[1,4096,4096]{2,1,0} copy(%dot.456)
  %add.3320 = bf16[1,4096,4096]{2,1,0} add(%copy.2847, %copy.2855)
  %convert.1330 = f32[1,4096,4096]{2,1,0} convert(%add.3320)
  %multiply.3031 = f32[1,4096,4096]{2,1,0} multiply(%convert.1330, %convert.1330)
  %reduce.457 = f32[1,4096]{1,0} reduce(%multiply.3031, %constant.3956), dimensions={2}, to_apply=%region_324.10195
  %multiply.3032 = f32[1,4096]{1,0} multiply(%reduce.457, %broadcast.5380)
  %add.3321 = f32[1,4096]{1,0} add(%multiply.3032, %broadcast.5381)
  %rsqrt.123 = f32[1,4096]{1,0} rsqrt(%add.3321)
  %broadcast.7056 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.123), dimensions={0,1}
  %multiply.3033 = f32[1,4096,4096]{2,1,0} multiply(%convert.1330, %broadcast.7056)
  %convert.1331 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3033)
  %param.302 = bf16[4096]{0} parameter(226), sharding={replicated}
  %broadcast.7057 = bf16[1,4096,4096]{2,1,0} broadcast(%param.302), dimensions={2}
  %multiply.3034 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1331, %broadcast.7057)
  %copy.2856 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3034)
  %param.303 = bf16[512,8]{1,0} parameter(222), sharding={devices=[8,1]<=[8]}
  %all-gather.208 = bf16[4096,8]{1,0} all-gather(%param.303), channel_id=441, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.457 = bf16[1,4096,8]{2,1,0} dot(%copy.2856, %all-gather.208), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2857 = bf16[1,4096,8]{2,1,0} copy(%dot.457)
  %reshape.14424 = bf16[4096,8]{1,0} reshape(%copy.2857)
  %custom-call.122 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.14424), custom_call_target="TopK", called_computations={%compare-greater-than.29.clone}
  %get-tuple-element.668 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.122), index=0
  %get-tuple-element.669 = s32[4096,2]{1,0} get-tuple-element(%custom-call.122), index=1
  %add.3322 = s32[4096,2]{1,0} add(%get-tuple-element.669, %broadcast.5420)
  %sort.153 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.668, %add.3322), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.29
  %get-tuple-element.671 = s32[4096,2]{1,0} get-tuple-element(%sort.153), index=1
  %slice.366 = s32[4096,2]{1,0} slice(%get-tuple-element.671), slice={[0:4096], [0:2]}
  %all-gather.210 = s32[32768,2]{1,0} all-gather(%slice.366), channel_id=443, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.853 = s32[4096,2]{1,0} dynamic-slice(%all-gather.210, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.14428 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.853)
  %compare.1800 = pred[1,4096,2]{2,1,0} compare(%reshape.14428, %broadcast.5421), direction=LT
  %add.3323 = s32[1,4096,2]{2,1,0} add(%reshape.14428, %broadcast.5422)
  %select.1043 = s32[1,4096,2]{2,1,0} select(%compare.1800, %add.3323, %reshape.14428)
  %reshape.14429 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1043)
  %concatenate.176 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1555, %reshape.14429), dimensions={3}
  %subtract.304 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.176, %broadcast.5433)
  %scatter.358 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.304, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_327.10269
  %gather.29 = u32[1,4096,2]{2,1,0} gather(%scatter.358, %subtract.304), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1801 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.29), direction=EQ
  %get-tuple-element.670 = bf16[4096,2]{1,0} get-tuple-element(%sort.153), index=0
  %slice.365 = bf16[4096,2]{1,0} slice(%get-tuple-element.670), slice={[0:4096], [0:2]}
  %all-gather.209 = bf16[32768,2]{1,0} all-gather(%slice.365), channel_id=442, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.863 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.209, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1334 = f32[4096,2]{1,0} convert(%dynamic-slice.863)
  %reshape.14447 = f32[1,4096,2]{2,1,0} reshape(%convert.1334)
  %reduce.458 = f32[4096]{0} reduce(%convert.1334, %constant.4073), dimensions={1}, to_apply=%region_325.10221
  %reshape.14448 = f32[1,4096]{1,0} reshape(%reduce.458)
  %broadcast.7064 = f32[1,4096,2]{2,1,0} broadcast(%reshape.14448), dimensions={0,1}
  %subtract.303 = f32[1,4096,2]{2,1,0} subtract(%reshape.14447, %broadcast.7064)
  %exponential.184 = f32[1,4096,2]{2,1,0} exponential(%subtract.303)
  %reduce.459 = f32[1,4096]{1,0} reduce(%exponential.184, %constant.3956), dimensions={2}, to_apply=%region_326.10233
  %broadcast.7066 = f32[1,4096,2]{2,1,0} broadcast(%reduce.459), dimensions={0,1}
  %divide.659 = f32[1,4096,2]{2,1,0} divide(%exponential.184, %broadcast.7066)
  %convert.1335 = bf16[1,4096,2]{2,1,0} convert(%divide.659)
  %select.1044 = bf16[1,4096,2]{2,1,0} select(%compare.1801, %convert.1335, %broadcast.5432)
  %scatter.359 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.304, %select.1044), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_328.10277
  %broadcast.7071 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.14428), dimensions={0,1,2}
  %iota.1891 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1802 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7071, %iota.1891), direction=EQ
  %convert.1336 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1802)
  %reshape.14457 = s32[1,8192,8]{2,1,0} reshape(%convert.1336)
  %copy.2858 = s32[1,8192,8]{2,1,0} copy(%reshape.14457)
  %reduce-window.280 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2858, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.29
  %reshape.14459 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.280)
  %copy.2859 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.14459)
  %compare.1803 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2859, %broadcast.5435), direction=LE
  %select.1045 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1803, %convert.1336, %broadcast.5436)
  %reduce.460 = s32[1,4096,8]{2,1,0} reduce(%select.1045, %constant.3783), dimensions={2}, to_apply=%region_329.10291
  %convert.1337 = bf16[1,4096,8]{2,1,0} convert(%reduce.460)
  %multiply.3041 = bf16[1,4096,8]{2,1,0} multiply(%scatter.359, %convert.1337)
  %broadcast.7073 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3041), dimensions={0,1,2}
  %multiply.3042 = s32[1,8192,8]{2,1,0} multiply(%copy.2858, %reduce-window.280)
  %reshape.14460 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3042)
  %reduce.461 = s32[1,4096,8]{2,1,0} reduce(%reshape.14460, %constant.3783), dimensions={2}, to_apply=%region_330.10300
  %multiply.3043 = s32[1,4096,8]{2,1,0} multiply(%reduce.461, %reduce.460)
  %broadcast.7074 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3043), dimensions={0,1,2}
  %iota.1892 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1804 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7074, %iota.1892), direction=EQ
  %convert.1338 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1804)
  %convert.1339 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1338)
  %multiply.3044 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7073, %convert.1339)
  %slice.367 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3044), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2860 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.367)
  %compare.1805 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.367, %broadcast.5439), direction=NE
  %copy.2861 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1805)
  %convert.1340 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2861)
  %dot.458 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1340, %copy.2856), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.14463 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.458)
  %all-to-all.58 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14463), channel_id=450, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.87 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.58), dimensions={1,0,2,3,4}
  %reshape.14464 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.87)
  %transpose.88 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.14464), dimensions={1,0,2,3}
  %copy.2862 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.88)
  %param.304 = bf16[1,4096,14336]{2,1,0} parameter(223), sharding={devices=[8,1,1]<=[8]}
  %copy.2863 = bf16[1,4096,14336]{2,1,0} copy(%param.304)
  %dot.459 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2862, %copy.2863), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2864 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.459)
  %negate.188 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2864)
  %exponential.185 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.188)
  %add.3328 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.185, %broadcast.5440)
  %divide.660 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3328)
  %multiply.3048 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2864, %divide.660)
  %param.305 = bf16[1,4096,14336]{2,1,0} parameter(224), sharding={devices=[8,1,1]<=[8]}
  %copy.2865 = bf16[1,4096,14336]{2,1,0} copy(%param.305)
  %dot.460 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2862, %copy.2865), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2866 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.460)
  %multiply.3049 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3048, %copy.2866)
  %param.306 = bf16[1,14336,4096]{2,1,0} parameter(225), sharding={devices=[8,1,1]<=[8]}
  %copy.2867 = bf16[1,14336,4096]{2,1,0} copy(%param.306)
  %dot.461 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3049, %copy.2867), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2868 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.461)
  %reshape.14467 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2868)
  %all-to-all.59 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14467), channel_id=451, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.89 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.59), dimensions={1,0,2,3,4}
  %reshape.14469 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.89)
  %dot.462 = bf16[1,4096,4096]{2,1,0} dot(%copy.2860, %reshape.14469), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2869 = bf16[1,4096,4096]{2,1,0} copy(%dot.462)
  %add.3329 = bf16[1,4096,4096]{2,1,0} add(%copy.2869, %add.3320)
  %copy.2870 = bf16[1,4096,4096]{2,1,0} copy(%add.3329)
  %copy.2871 = bf16[1,4096,4096]{2,1,0} copy(%copy.2870)
  %convert.1341 = f32[1,4096,4096]{2,1,0} convert(%copy.2871)
  %multiply.3053 = f32[1,4096,4096]{2,1,0} multiply(%convert.1341, %convert.1341)
  %reduce.462 = f32[1,4096]{1,0} reduce(%multiply.3053, %constant.3956), dimensions={2}, to_apply=%region_331.10339
  %multiply.3054 = f32[1,4096]{1,0} multiply(%reduce.462, %broadcast.5380)
  %add.3330 = f32[1,4096]{1,0} add(%multiply.3054, %broadcast.5381)
  %rsqrt.124 = f32[1,4096]{1,0} rsqrt(%add.3330)
  %broadcast.7079 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.124), dimensions={0,1}
  %multiply.3055 = f32[1,4096,4096]{2,1,0} multiply(%convert.1341, %broadcast.7079)
  %convert.1342 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3055)
  %param.307 = bf16[4096]{0} parameter(247), sharding={replicated}
  %broadcast.7081 = bf16[1,4096,4096]{2,1,0} broadcast(%param.307), dimensions={2}
  %multiply.3056 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1342, %broadcast.7081)
  %copy.2872 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3056)
  %copy.2873 = bf16[1,4096,4096]{2,1,0} copy(%copy.2872)
  %param.308 = bf16[512,32,128]{2,1,0} parameter(250), sharding={devices=[8,1,1]<=[8]}
  %all-gather.211 = bf16[4096,32,128]{2,1,0} all-gather(%param.308), channel_id=452, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.463 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2873, %all-gather.211), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.368 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.463), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3061 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.368, %broadcast.5389)
  %slice.369 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.463), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3063 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.369, %broadcast.5391)
  %subtract.305 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3061, %multiply.3063)
  %multiply.3064 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.369, %broadcast.5389)
  %multiply.3065 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.368, %broadcast.5391)
  %add.3331 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3064, %multiply.3065)
  %concatenate.180 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.305, %add.3331), dimensions={3}
  %copy.2874 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.180)
  %param.309 = bf16[512,8,128]{2,1,0} parameter(248), sharding={devices=[8,1,1]<=[8]}
  %all-gather.212 = bf16[4096,8,128]{2,1,0} all-gather(%param.309), channel_id=453, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.464 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2873, %all-gather.212), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.370 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.464), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3070 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.370, %broadcast.5400)
  %slice.371 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.464), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3072 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.371, %broadcast.5401)
  %subtract.306 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3070, %multiply.3072)
  %multiply.3073 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.371, %broadcast.5400)
  %multiply.3074 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.370, %broadcast.5401)
  %add.3332 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3073, %multiply.3074)
  %concatenate.181 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.306, %add.3332), dimensions={3}
  %copy.2876 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.181)
  %param.310 = bf16[512,8,128]{2,1,0} parameter(251), sharding={devices=[8,1,1]<=[8]}
  %all-gather.213 = bf16[4096,8,128]{2,1,0} all-gather(%param.310), channel_id=454, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.465 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2873, %all-gather.213), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2877 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.465)
  %custom-call.123 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2874, %copy.2876, %copy.2877, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.681 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.123), index=0
  %copy.2878 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.681)
  %param.311 = bf16[32,128,512]{2,1,0} parameter(249), sharding={devices=[1,1,8]<=[8]}
  %all-gather.214 = bf16[32,128,4096]{2,1,0} all-gather(%param.311), channel_id=455, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.466 = bf16[1,4096,4096]{2,1,0} dot(%copy.2878, %all-gather.214), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2879 = bf16[1,4096,4096]{2,1,0} copy(%dot.466)
  %add.3347 = bf16[1,4096,4096]{2,1,0} add(%copy.2871, %copy.2879)
  %convert.1357 = f32[1,4096,4096]{2,1,0} convert(%add.3347)
  %multiply.3076 = f32[1,4096,4096]{2,1,0} multiply(%convert.1357, %convert.1357)
  %reduce.466 = f32[1,4096]{1,0} reduce(%multiply.3076, %constant.3956), dimensions={2}, to_apply=%region_335.10499
  %multiply.3077 = f32[1,4096]{1,0} multiply(%reduce.466, %broadcast.5380)
  %add.3348 = f32[1,4096]{1,0} add(%multiply.3077, %broadcast.5381)
  %rsqrt.125 = f32[1,4096]{1,0} rsqrt(%add.3348)
  %broadcast.7123 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.125), dimensions={0,1}
  %multiply.3078 = f32[1,4096,4096]{2,1,0} multiply(%convert.1357, %broadcast.7123)
  %convert.1358 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3078)
  %param.312 = bf16[4096]{0} parameter(246), sharding={replicated}
  %broadcast.7124 = bf16[1,4096,4096]{2,1,0} broadcast(%param.312), dimensions={2}
  %multiply.3079 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1358, %broadcast.7124)
  %copy.2880 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3079)
  %param.313 = bf16[512,8]{1,0} parameter(242), sharding={devices=[8,1]<=[8]}
  %all-gather.215 = bf16[4096,8]{1,0} all-gather(%param.313), channel_id=456, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.467 = bf16[1,4096,8]{2,1,0} dot(%copy.2880, %all-gather.215), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2881 = bf16[1,4096,8]{2,1,0} copy(%dot.467)
  %reshape.14521 = bf16[4096,8]{1,0} reshape(%copy.2881)
  %custom-call.124 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.14521), custom_call_target="TopK", called_computations={%compare-greater-than.30.clone}
  %get-tuple-element.682 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.124), index=0
  %get-tuple-element.683 = s32[4096,2]{1,0} get-tuple-element(%custom-call.124), index=1
  %add.3349 = s32[4096,2]{1,0} add(%get-tuple-element.683, %broadcast.5420)
  %sort.156 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.682, %add.3349), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.30
  %get-tuple-element.685 = s32[4096,2]{1,0} get-tuple-element(%sort.156), index=1
  %slice.374 = s32[4096,2]{1,0} slice(%get-tuple-element.685), slice={[0:4096], [0:2]}
  %all-gather.217 = s32[32768,2]{1,0} all-gather(%slice.374), channel_id=458, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.881 = s32[4096,2]{1,0} dynamic-slice(%all-gather.217, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.14525 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.881)
  %compare.1835 = pred[1,4096,2]{2,1,0} compare(%reshape.14525, %broadcast.5421), direction=LT
  %add.3350 = s32[1,4096,2]{2,1,0} add(%reshape.14525, %broadcast.5422)
  %select.1067 = s32[1,4096,2]{2,1,0} select(%compare.1835, %add.3350, %reshape.14525)
  %reshape.14526 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1067)
  %concatenate.182 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1553, %reshape.14526), dimensions={3}
  %subtract.312 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.182, %broadcast.5433)
  %scatter.370 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.312, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_338.10573
  %gather.30 = u32[1,4096,2]{2,1,0} gather(%scatter.370, %subtract.312), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1836 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.30), direction=EQ
  %get-tuple-element.684 = bf16[4096,2]{1,0} get-tuple-element(%sort.156), index=0
  %slice.373 = bf16[4096,2]{1,0} slice(%get-tuple-element.684), slice={[0:4096], [0:2]}
  %all-gather.216 = bf16[32768,2]{1,0} all-gather(%slice.373), channel_id=457, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.891 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.216, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1361 = f32[4096,2]{1,0} convert(%dynamic-slice.891)
  %reshape.14546 = f32[1,4096,2]{2,1,0} reshape(%convert.1361)
  %reduce.467 = f32[4096]{0} reduce(%convert.1361, %constant.4073), dimensions={1}, to_apply=%region_336.10525
  %reshape.14547 = f32[1,4096]{1,0} reshape(%reduce.467)
  %broadcast.7131 = f32[1,4096,2]{2,1,0} broadcast(%reshape.14547), dimensions={0,1}
  %subtract.311 = f32[1,4096,2]{2,1,0} subtract(%reshape.14546, %broadcast.7131)
  %exponential.186 = f32[1,4096,2]{2,1,0} exponential(%subtract.311)
  %reduce.468 = f32[1,4096]{1,0} reduce(%exponential.186, %constant.3956), dimensions={2}, to_apply=%region_337.10537
  %broadcast.7132 = f32[1,4096,2]{2,1,0} broadcast(%reduce.468), dimensions={0,1}
  %divide.665 = f32[1,4096,2]{2,1,0} divide(%exponential.186, %broadcast.7132)
  %convert.1362 = bf16[1,4096,2]{2,1,0} convert(%divide.665)
  %select.1068 = bf16[1,4096,2]{2,1,0} select(%compare.1836, %convert.1362, %broadcast.5432)
  %scatter.371 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.312, %select.1068), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_339.10581
  %broadcast.7134 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.14525), dimensions={0,1,2}
  %iota.1900 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1837 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7134, %iota.1900), direction=EQ
  %convert.1363 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1837)
  %reshape.14558 = s32[1,8192,8]{2,1,0} reshape(%convert.1363)
  %copy.2882 = s32[1,8192,8]{2,1,0} copy(%reshape.14558)
  %reduce-window.283 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2882, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.30
  %reshape.14560 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.283)
  %copy.2883 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.14560)
  %compare.1838 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2883, %broadcast.5435), direction=LE
  %select.1069 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1838, %convert.1363, %broadcast.5436)
  %reduce.469 = s32[1,4096,8]{2,1,0} reduce(%select.1069, %constant.3783), dimensions={2}, to_apply=%region_340.10595
  %convert.1364 = bf16[1,4096,8]{2,1,0} convert(%reduce.469)
  %multiply.3085 = bf16[1,4096,8]{2,1,0} multiply(%scatter.371, %convert.1364)
  %broadcast.7136 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3085), dimensions={0,1,2}
  %multiply.3086 = s32[1,8192,8]{2,1,0} multiply(%copy.2882, %reduce-window.283)
  %reshape.14561 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3086)
  %reduce.470 = s32[1,4096,8]{2,1,0} reduce(%reshape.14561, %constant.3783), dimensions={2}, to_apply=%region_341.10604
  %multiply.3087 = s32[1,4096,8]{2,1,0} multiply(%reduce.470, %reduce.469)
  %broadcast.7137 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3087), dimensions={0,1,2}
  %iota.1901 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1839 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7137, %iota.1901), direction=EQ
  %convert.1365 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1839)
  %convert.1366 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1365)
  %multiply.3088 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7136, %convert.1366)
  %slice.375 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3088), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2884 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.375)
  %compare.1840 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.375, %broadcast.5439), direction=NE
  %copy.2885 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1840)
  %convert.1367 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2885)
  %dot.468 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1367, %copy.2880), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.14564 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.468)
  %all-to-all.60 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14564), channel_id=465, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.90 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.60), dimensions={1,0,2,3,4}
  %reshape.14565 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.90)
  %transpose.91 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.14565), dimensions={1,0,2,3}
  %copy.2886 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.91)
  %param.314 = bf16[1,4096,14336]{2,1,0} parameter(243), sharding={devices=[8,1,1]<=[8]}
  %copy.2887 = bf16[1,4096,14336]{2,1,0} copy(%param.314)
  %dot.469 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2886, %copy.2887), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2888 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.469)
  %negate.189 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2888)
  %exponential.187 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.189)
  %add.3356 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.187, %broadcast.5440)
  %divide.666 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3356)
  %multiply.3094 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2888, %divide.666)
  %param.315 = bf16[1,4096,14336]{2,1,0} parameter(244), sharding={devices=[8,1,1]<=[8]}
  %copy.2889 = bf16[1,4096,14336]{2,1,0} copy(%param.315)
  %dot.470 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2886, %copy.2889), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2890 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.470)
  %multiply.3095 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3094, %copy.2890)
  %param.316 = bf16[1,14336,4096]{2,1,0} parameter(245), sharding={devices=[8,1,1]<=[8]}
  %copy.2891 = bf16[1,14336,4096]{2,1,0} copy(%param.316)
  %dot.471 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3095, %copy.2891), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2892 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.471)
  %reshape.14568 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2892)
  %all-to-all.61 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14568), channel_id=466, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.92 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.61), dimensions={1,0,2,3,4}
  %reshape.14569 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.92)
  %dot.472 = bf16[1,4096,4096]{2,1,0} dot(%copy.2884, %reshape.14569), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2893 = bf16[1,4096,4096]{2,1,0} copy(%dot.472)
  %add.3357 = bf16[1,4096,4096]{2,1,0} add(%copy.2893, %add.3347)
  %copy.2894 = bf16[1,4096,4096]{2,1,0} copy(%add.3357)
  %copy.2895 = bf16[1,4096,4096]{2,1,0} copy(%copy.2894)
  %convert.1368 = f32[1,4096,4096]{2,1,0} convert(%copy.2895)
  %multiply.3099 = f32[1,4096,4096]{2,1,0} multiply(%convert.1368, %convert.1368)
  %reduce.471 = f32[1,4096]{1,0} reduce(%multiply.3099, %constant.3956), dimensions={2}, to_apply=%region_342.10643
  %multiply.3100 = f32[1,4096]{1,0} multiply(%reduce.471, %broadcast.5380)
  %add.3358 = f32[1,4096]{1,0} add(%multiply.3100, %broadcast.5381)
  %rsqrt.126 = f32[1,4096]{1,0} rsqrt(%add.3358)
  %broadcast.7141 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.126), dimensions={0,1}
  %multiply.3101 = f32[1,4096,4096]{2,1,0} multiply(%convert.1368, %broadcast.7141)
  %convert.1369 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3101)
  %param.317 = bf16[4096]{0} parameter(257), sharding={replicated}
  %broadcast.7142 = bf16[1,4096,4096]{2,1,0} broadcast(%param.317), dimensions={2}
  %multiply.3103 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1369, %broadcast.7142)
  %copy.2896 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3103)
  %copy.2897 = bf16[1,4096,4096]{2,1,0} copy(%copy.2896)
  %param.318 = bf16[512,32,128]{2,1,0} parameter(260), sharding={devices=[8,1,1]<=[8]}
  %all-gather.218 = bf16[4096,32,128]{2,1,0} all-gather(%param.318), channel_id=467, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.473 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2897, %all-gather.218), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.376 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.473), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3108 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.376, %broadcast.5389)
  %slice.377 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.473), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3110 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.377, %broadcast.5391)
  %subtract.313 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3108, %multiply.3110)
  %multiply.3111 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.377, %broadcast.5389)
  %multiply.3112 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.376, %broadcast.5391)
  %add.3359 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3111, %multiply.3112)
  %concatenate.186 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.313, %add.3359), dimensions={3}
  %copy.2898 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.186)
  %param.319 = bf16[512,8,128]{2,1,0} parameter(258), sharding={devices=[8,1,1]<=[8]}
  %all-gather.219 = bf16[4096,8,128]{2,1,0} all-gather(%param.319), channel_id=468, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.474 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2897, %all-gather.219), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.378 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.474), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3116 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.378, %broadcast.5400)
  %slice.379 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.474), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3118 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.379, %broadcast.5401)
  %subtract.314 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3116, %multiply.3118)
  %multiply.3119 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.379, %broadcast.5400)
  %multiply.3120 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.378, %broadcast.5401)
  %add.3360 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3119, %multiply.3120)
  %concatenate.187 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.314, %add.3360), dimensions={3}
  %copy.2900 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.187)
  %param.320 = bf16[512,8,128]{2,1,0} parameter(261), sharding={devices=[8,1,1]<=[8]}
  %all-gather.220 = bf16[4096,8,128]{2,1,0} all-gather(%param.320), channel_id=469, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.475 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2897, %all-gather.220), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2901 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.475)
  %custom-call.125 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2898, %copy.2900, %copy.2901, %constant.3999, %scatter.179, /*index=5*/%scatter.233, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.695 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.125), index=0
  %copy.2902 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.695)
  %param.321 = bf16[32,128,512]{2,1,0} parameter(259), sharding={devices=[1,1,8]<=[8]}
  %all-gather.221 = bf16[32,128,4096]{2,1,0} all-gather(%param.321), channel_id=470, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.476 = bf16[1,4096,4096]{2,1,0} dot(%copy.2902, %all-gather.221), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2903 = bf16[1,4096,4096]{2,1,0} copy(%dot.476)
  %add.3373 = bf16[1,4096,4096]{2,1,0} add(%copy.2895, %copy.2903)
  %convert.1383 = f32[1,4096,4096]{2,1,0} convert(%add.3373)
  %multiply.3122 = f32[1,4096,4096]{2,1,0} multiply(%convert.1383, %convert.1383)
  %reduce.475 = f32[1,4096]{1,0} reduce(%multiply.3122, %constant.3956), dimensions={2}, to_apply=%region_346.10803
  %multiply.3123 = f32[1,4096]{1,0} multiply(%reduce.475, %broadcast.5380)
  %add.3374 = f32[1,4096]{1,0} add(%multiply.3123, %broadcast.5381)
  %rsqrt.127 = f32[1,4096]{1,0} rsqrt(%add.3374)
  %broadcast.7174 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.127), dimensions={0,1}
  %multiply.3124 = f32[1,4096,4096]{2,1,0} multiply(%convert.1383, %broadcast.7174)
  %convert.1384 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3124)
  %param.322 = bf16[4096]{0} parameter(256), sharding={replicated}
  %broadcast.7175 = bf16[1,4096,4096]{2,1,0} broadcast(%param.322), dimensions={2}
  %multiply.3125 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1384, %broadcast.7175)
  %copy.2904 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3125)
  %param.323 = bf16[512,8]{1,0} parameter(252), sharding={devices=[8,1]<=[8]}
  %all-gather.222 = bf16[4096,8]{1,0} all-gather(%param.323), channel_id=471, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.477 = bf16[1,4096,8]{2,1,0} dot(%copy.2904, %all-gather.222), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2905 = bf16[1,4096,8]{2,1,0} copy(%dot.477)
  %reshape.14621 = bf16[4096,8]{1,0} reshape(%copy.2905)
  %custom-call.126 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.14621), custom_call_target="TopK", called_computations={%compare-greater-than.31.clone}
  %get-tuple-element.696 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.126), index=0
  %get-tuple-element.697 = s32[4096,2]{1,0} get-tuple-element(%custom-call.126), index=1
  %add.3375 = s32[4096,2]{1,0} add(%get-tuple-element.697, %broadcast.5420)
  %sort.159 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.696, %add.3375), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.31
  %get-tuple-element.699 = s32[4096,2]{1,0} get-tuple-element(%sort.159), index=1
  %slice.382 = s32[4096,2]{1,0} slice(%get-tuple-element.699), slice={[0:4096], [0:2]}
  %all-gather.224 = s32[32768,2]{1,0} all-gather(%slice.382), channel_id=473, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.909 = s32[4096,2]{1,0} dynamic-slice(%all-gather.224, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.14624 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.909)
  %compare.1870 = pred[1,4096,2]{2,1,0} compare(%reshape.14624, %broadcast.5421), direction=LT
  %add.3376 = s32[1,4096,2]{2,1,0} add(%reshape.14624, %broadcast.5422)
  %select.1091 = s32[1,4096,2]{2,1,0} select(%compare.1870, %add.3376, %reshape.14624)
  %reshape.14625 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1091)
  %concatenate.188 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1551, %reshape.14625), dimensions={3}
  %subtract.320 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.188, %broadcast.5433)
  %scatter.382 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.320, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_349.10877
  %gather.31 = u32[1,4096,2]{2,1,0} gather(%scatter.382, %subtract.320), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1871 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.31), direction=EQ
  %get-tuple-element.698 = bf16[4096,2]{1,0} get-tuple-element(%sort.159), index=0
  %slice.381 = bf16[4096,2]{1,0} slice(%get-tuple-element.698), slice={[0:4096], [0:2]}
  %all-gather.223 = bf16[32768,2]{1,0} all-gather(%slice.381), channel_id=472, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.919 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.223, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1387 = f32[4096,2]{1,0} convert(%dynamic-slice.919)
  %reshape.14642 = f32[1,4096,2]{2,1,0} reshape(%convert.1387)
  %reduce.476 = f32[4096]{0} reduce(%convert.1387, %constant.4073), dimensions={1}, to_apply=%region_347.10829
  %reshape.14643 = f32[1,4096]{1,0} reshape(%reduce.476)
  %broadcast.7182 = f32[1,4096,2]{2,1,0} broadcast(%reshape.14643), dimensions={0,1}
  %subtract.319 = f32[1,4096,2]{2,1,0} subtract(%reshape.14642, %broadcast.7182)
  %exponential.188 = f32[1,4096,2]{2,1,0} exponential(%subtract.319)
  %reduce.477 = f32[1,4096]{1,0} reduce(%exponential.188, %constant.3956), dimensions={2}, to_apply=%region_348.10841
  %broadcast.7183 = f32[1,4096,2]{2,1,0} broadcast(%reduce.477), dimensions={0,1}
  %divide.671 = f32[1,4096,2]{2,1,0} divide(%exponential.188, %broadcast.7183)
  %convert.1388 = bf16[1,4096,2]{2,1,0} convert(%divide.671)
  %select.1092 = bf16[1,4096,2]{2,1,0} select(%compare.1871, %convert.1388, %broadcast.5432)
  %scatter.383 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.320, %select.1092), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_350.10885
  %broadcast.7186 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.14624), dimensions={0,1,2}
  %iota.1909 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1872 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7186, %iota.1909), direction=EQ
  %convert.1389 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1872)
  %reshape.14655 = s32[1,8192,8]{2,1,0} reshape(%convert.1389)
  %copy.2906 = s32[1,8192,8]{2,1,0} copy(%reshape.14655)
  %reduce-window.286 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2906, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.31
  %reshape.14657 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.286)
  %copy.2907 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.14657)
  %compare.1873 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2907, %broadcast.5435), direction=LE
  %select.1093 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1873, %convert.1389, %broadcast.5436)
  %reduce.478 = s32[1,4096,8]{2,1,0} reduce(%select.1093, %constant.3783), dimensions={2}, to_apply=%region_351.10899
  %convert.1390 = bf16[1,4096,8]{2,1,0} convert(%reduce.478)
  %multiply.3132 = bf16[1,4096,8]{2,1,0} multiply(%scatter.383, %convert.1390)
  %broadcast.7189 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3132), dimensions={0,1,2}
  %multiply.3134 = s32[1,8192,8]{2,1,0} multiply(%copy.2906, %reduce-window.286)
  %reshape.14658 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3134)
  %reduce.479 = s32[1,4096,8]{2,1,0} reduce(%reshape.14658, %constant.3783), dimensions={2}, to_apply=%region_352.10908
  %multiply.3135 = s32[1,4096,8]{2,1,0} multiply(%reduce.479, %reduce.478)
  %broadcast.7190 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3135), dimensions={0,1,2}
  %iota.1910 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1874 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7190, %iota.1910), direction=EQ
  %convert.1391 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1874)
  %convert.1392 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1391)
  %multiply.3136 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7189, %convert.1392)
  %slice.383 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3136), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %copy.2908 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.383)
  %compare.1875 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.383, %broadcast.5439), direction=NE
  %copy.2909 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1875)
  %convert.1393 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2909)
  %dot.478 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1393, %copy.2904), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.14662 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.478)
  %all-to-all.62 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14662), channel_id=480, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.93 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.62), dimensions={1,0,2,3,4}
  %reshape.14663 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.93)
  %transpose.94 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.14663), dimensions={1,0,2,3}
  %copy.2910 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.94)
  %param.324 = bf16[1,4096,14336]{2,1,0} parameter(253), sharding={devices=[8,1,1]<=[8]}
  %copy.2911 = bf16[1,4096,14336]{2,1,0} copy(%param.324)
  %dot.479 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2910, %copy.2911), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2912 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.479)
  %negate.190 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2912)
  %exponential.189 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.190)
  %add.3381 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.189, %broadcast.5440)
  %divide.672 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3381)
  %multiply.3141 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2912, %divide.672)
  %param.325 = bf16[1,4096,14336]{2,1,0} parameter(254), sharding={devices=[8,1,1]<=[8]}
  %copy.2913 = bf16[1,4096,14336]{2,1,0} copy(%param.325)
  %dot.480 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2910, %copy.2913), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2914 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.480)
  %multiply.3143 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3141, %copy.2914)
  %param.326 = bf16[1,14336,4096]{2,1,0} parameter(255), sharding={devices=[8,1,1]<=[8]}
  %copy.2915 = bf16[1,14336,4096]{2,1,0} copy(%param.326)
  %dot.481 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3143, %copy.2915), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2916 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.481)
  %reshape.14666 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2916)
  %all-to-all.63 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14666), channel_id=481, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.95 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.63), dimensions={1,0,2,3,4}
  %reshape.14667 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.95)
  %dot.482 = bf16[1,4096,4096]{2,1,0} dot(%copy.2908, %reshape.14667), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %copy.2917 = bf16[1,4096,4096]{2,1,0} copy(%dot.482)
  %add.3382 = bf16[1,4096,4096]{2,1,0} add(%copy.2917, %add.3373)
  %copy.2918 = bf16[1,4096,4096]{2,1,0} copy(%add.3382)
  %convert.1394 = f32[1,4096,4096]{2,1,0} convert(%copy.2918)
  %multiply.3146 = f32[1,4096,4096]{2,1,0} multiply(%convert.1394, %convert.1394)
  %reduce.480 = f32[1,4096]{1,0} reduce(%multiply.3146, %constant.3956), dimensions={2}, to_apply=%region_353.10947
  %multiply.3147 = f32[1,4096]{1,0} multiply(%reduce.480, %broadcast.5380)
  %add.3383 = f32[1,4096]{1,0} add(%multiply.3147, %broadcast.5381)
  %reshape.14671 = f32[1,4096,1]{2,1,0} reshape(%add.3383)
  %rsqrt.128 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.14671)
  %reshape.14672 = f32[1,4096]{1,0} reshape(%rsqrt.128)
  %broadcast.7194 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.14672), dimensions={0,1}
  %multiply.3148 = f32[1,4096,4096]{2,1,0} multiply(%convert.1394, %broadcast.7194)
  %convert.1395 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3148)
  %param.327 = s32[1,4096]{1,0} parameter(976), sharding={devices=[8,1]<=[8]}
  %broadcast.7195 = s32[1,4096]{1,0} broadcast(%constant.3783), dimensions={}
  %compare.1876 = pred[1,4096]{1,0} compare(%param.327, %broadcast.7195), direction=NE
  %convert.1396 = s32[1,4096]{1,0} convert(%compare.1876)
  %reduce.481 = s32[] reduce(%convert.1396, %constant.3783), dimensions={0,1}, to_apply=%region_358.11031
  %all-reduce = s32[] all-reduce(%reduce.481), channel_id=482, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_358.11031.clone
  %convert.1397 = f32[] convert(%all-reduce)
  %constant.9509 = f32[] constant(1e-08)
  %add.3384 = f32[] add(%convert.1397, %constant.9509)
  %divide.673 = f32[] divide(%constant.3781, %add.3384)
  %broadcast.7197 = f32[1,4096]{1,0} broadcast(%divide.673), dimensions={}
  %broadcast.7199 = f32[1,4096]{1,0} broadcast(%constant.3956), dimensions={}
  %select.1094 = f32[1,4096]{1,0} select(%compare.1876, %broadcast.7197, %broadcast.7199)
  %copy.2919 = f32[1,4096]{1,0} copy(%select.1094)
  %broadcast.7200 = f32[1,4096,32000]{2,1,0} broadcast(%copy.2919), dimensions={0,1}
  %broadcast.7201 = bf16[1,4096,4096]{2,1,0} broadcast(%param.1), dimensions={2}
  %multiply.3149 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1395, %broadcast.7201)
  %param.328 = bf16[512,32000]{1,0} parameter(322), sharding={devices=[8,1]<=[8]}
  %all-gather.225 = bf16[4096,32000]{1,0} all-gather(%param.328), channel_id=483, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.483 = bf16[1,4096,32000]{2,1,0} dot(%multiply.3149, %all-gather.225), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2920 = bf16[1,4096,32000]{2,1,0} copy(%dot.483)
  %convert.1398 = f32[1,4096,32000]{2,1,0} convert(%copy.2920)
  %reduce.482 = f32[1,4096]{1,0} reduce(%convert.1398, %constant.4073), dimensions={2}, to_apply=%region_354.10985
  %broadcast.7202 = f32[1,4096,32000]{2,1,0} broadcast(%reduce.482), dimensions={0,1}
  %subtract.321 = f32[1,4096,32000]{2,1,0} subtract(%convert.1398, %broadcast.7202)
  %exponential.190 = f32[1,4096,32000]{2,1,0} exponential(%subtract.321)
  %reduce.483 = f32[1,4096]{1,0} reduce(%exponential.190, %constant.3956), dimensions={2}, to_apply=%region_355.10996
  %log.2 = f32[1,4096]{1,0} log(%reduce.483)
  %add.3385 = f32[1,4096]{1,0} add(%log.2, %reduce.482)
  %multiply.3150 = f32[1,4096]{1,0} multiply(%add.3385, %broadcast.7199)
  %broadcast.7204 = f32[1,4096]{1,0} broadcast(%constant.3781), dimensions={}
  %add.3386 = f32[1,4096]{1,0} add(%multiply.3150, %broadcast.7204)
  %broadcast.7205 = f32[1,4096,32000]{2,1,0} broadcast(%add.3386), dimensions={0,1}
  %multiply.3151 = f32[1,4096,32000]{2,1,0} multiply(%broadcast.7205, %exponential.190)
  %broadcast.7206 = f32[1,4096,32000]{2,1,0} broadcast(%reduce.483), dimensions={0,1}
  %divide.674 = f32[1,4096,32000]{2,1,0} divide(%multiply.3151, %broadcast.7206)
  %param.329 = s32[1,4096]{1,0} parameter(975), sharding={devices=[8,1]<=[8]}
  %broadcast.7207 = s32[1,4096,32000]{2,1,0} broadcast(%param.329), dimensions={0,1}
  %iota.1911 = s32[1,4096,32000]{2,1,0} iota(), iota_dimension=2
  %compare.1878 = pred[1,4096,32000]{2,1,0} compare(%broadcast.7207, %iota.1911), direction=EQ
  %convert.1399 = f32[1,4096,32000]{2,1,0} convert(%compare.1878)
  %subtract.322 = f32[1,4096,32000]{2,1,0} subtract(%divide.674, %convert.1399)
  %multiply.3152 = f32[1,4096,32000]{2,1,0} multiply(%broadcast.7200, %subtract.322)
  %convert.1400 = bf16[1,4096,32000]{2,1,0} convert(%multiply.3152)
  %copy.2921 = bf16[1,4096,32000]{2,1,0} copy(%convert.1400)
  %dot.484 = bf16[1,4096,4096]{2,1,0} dot(%copy.2921, %all-gather.225), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %multiply.3153 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1395, %dot.484)
  %reduce.484 = bf16[4096]{0} reduce(%multiply.3153, %constant.3795), dimensions={0,1}, to_apply=%region_359.11066
  %all-reduce.1 = bf16[4096]{0} all-reduce(%reduce.484), channel_id=484, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_359.11066.clone
  %multiply.3154 = bf16[4096]{0} multiply(%all-reduce.1, %all-reduce.1)
  %convert.1401 = f32[4096]{0} convert(%multiply.3154)
  %reduce.485 = f32[] reduce(%convert.1401, %constant.3956), dimensions={0}, to_apply=%region_1163.29598
  %convert.1402 = bf16[] convert(%reduce.485)
  %multiply.3155 = bf16[1,4096,4096]{2,1,0} multiply(%dot.484, %broadcast.7201)
  %convert.1403 = f32[1,4096,4096]{2,1,0} convert(%multiply.3155)
  %multiply.3156 = f32[1,4096,4096]{2,1,0} multiply(%convert.1403, %broadcast.7194)
  %multiply.3157 = f32[1,4096,4096]{2,1,0} multiply(%convert.1394, %convert.1403)
  %reduce.486 = f32[1,4096]{1,0} reduce(%multiply.3157, %constant.3956), dimensions={2}, to_apply=%region_361.11083
  %reshape.14675 = f32[1,4096,1]{2,1,0} reshape(%reduce.486)
  %divide.675 = f32[1,4096,1]{2,1,0} divide(%rsqrt.128, %reshape.14671)
  %constant.9518 = f32[] constant(-0.5)
  %broadcast.7210 = f32[1,4096,1]{2,1,0} broadcast(%constant.9518), dimensions={}
  %multiply.3158 = f32[1,4096,1]{2,1,0} multiply(%divide.675, %broadcast.7210)
  %multiply.3159 = f32[1,4096,1]{2,1,0} multiply(%reshape.14675, %multiply.3158)
  %constant.9519 = f32[] constant(0.00048828125)
  %broadcast.7211 = f32[1,4096,1]{2,1,0} broadcast(%constant.9519), dimensions={}
  %multiply.3160 = f32[1,4096,1]{2,1,0} multiply(%multiply.3159, %broadcast.7211)
  %reshape.14676 = f32[1,4096]{1,0} reshape(%multiply.3160)
  %broadcast.7212 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.14676), dimensions={0,1}
  %multiply.3161 = f32[1,4096,4096]{2,1,0} multiply(%convert.1394, %broadcast.7212)
  %add.3387 = f32[1,4096,4096]{2,1,0} add(%multiply.3156, %multiply.3161)
  %convert.1404 = bf16[1,4096,4096]{2,1,0} convert(%add.3387)
  %tuple.222 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.323, %param.324, %param.325, %param.326, %param.322, /*index=5*/%param.317, %param.319, %param.321, %param.318, %param.320, /*index=10*/%copy.2894, %param.10, %param.7, %convert.1404)
  %opt-barrier.0 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.222)
  %get-tuple-element.704 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.0), index=13
  %copy.2922 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.704)
  %iota.1913 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.705 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.0), index=10
  %copy.2923 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.705)
  %convert.1405 = f32[1,4096,4096]{2,1,0} convert(%copy.2923)
  %multiply.3163 = f32[1,4096,4096]{2,1,0} multiply(%convert.1405, %convert.1405)
  %reduce.487 = f32[1,4096]{1,0} reduce(%multiply.3163, %constant.3956), dimensions={2}, to_apply=%region_363.11124
  %multiply.3164 = f32[1,4096]{1,0} multiply(%reduce.487, %broadcast.5380)
  %add.3389 = f32[1,4096]{1,0} add(%multiply.3164, %broadcast.5381)
  %reshape.14678 = f32[1,4096,1]{2,1,0} reshape(%add.3389)
  %rsqrt.129 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.14678)
  %reshape.14679 = f32[1,4096]{1,0} reshape(%rsqrt.129)
  %broadcast.7220 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.14679), dimensions={0,1}
  %multiply.3165 = f32[1,4096,4096]{2,1,0} multiply(%convert.1405, %broadcast.7220)
  %convert.1406 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3165)
  %get-tuple-element.706 = bf16[4096]{0} get-tuple-element(%opt-barrier.0), index=5
  %broadcast.7221 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.706), dimensions={2}
  %multiply.3166 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1406, %broadcast.7221)
  %copy.2924 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3166)
  %copy.2925 = bf16[1,4096,4096]{2,1,0} copy(%copy.2924)
  %get-tuple-element.707 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.0), index=8
  %all-gather.226 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.707), channel_id=485, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.485 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2925, %all-gather.226), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.384 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.485), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.708 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.0), index=12
  %convert.1407 = f32[1,4096]{1,0} convert(%get-tuple-element.708)
  %broadcast.7222 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1407), dimensions={0,1}
  %divide.676 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.7222, %broadcast.5388)
  %cosine.65 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.676)
  %convert.1409 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.65)
  %reshape.14681 = bf16[1,4096,64]{2,1,0} reshape(%convert.1409)
  %broadcast.7225 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.14681), dimensions={0,1,3}
  %multiply.3170 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.384, %broadcast.7225)
  %slice.385 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.485), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.64 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.676)
  %convert.1410 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.64)
  %reshape.14684 = bf16[1,4096,64]{2,1,0} reshape(%convert.1410)
  %broadcast.7226 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.14684), dimensions={0,1,3}
  %multiply.3172 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.385, %broadcast.7226)
  %subtract.323 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3170, %multiply.3172)
  %multiply.3173 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.385, %broadcast.7225)
  %multiply.3174 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.384, %broadcast.7226)
  %add.3390 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3173, %multiply.3174)
  %concatenate.192 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.323, %add.3390), dimensions={3}
  %copy.2926 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.192)
  %get-tuple-element.709 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.0), index=6
  %all-gather.227 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.709), channel_id=486, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.486 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2925, %all-gather.227), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.386 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.486), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.7232 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.14681), dimensions={0,1,3}
  %multiply.3178 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.386, %broadcast.7232)
  %slice.387 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.486), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.7233 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.14684), dimensions={0,1,3}
  %multiply.3180 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.387, %broadcast.7233)
  %subtract.324 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3178, %multiply.3180)
  %multiply.3181 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.387, %broadcast.7232)
  %multiply.3182 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.386, %broadcast.7233)
  %add.3391 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3181, %multiply.3182)
  %concatenate.193 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.324, %add.3391), dimensions={3}
  %copy.2928 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.193)
  %get-tuple-element.710 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.0), index=9
  %all-gather.228 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.710), channel_id=487, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.487 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2925, %all-gather.228), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2929 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.487)
  %get-tuple-element.711 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.0), index=11
  %broadcast.7236 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.711), dimensions={0,1}
  %broadcast.7237 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.711), dimensions={0,2}
  %compare.1879 = pred[1,4096,4096]{2,1,0} compare(%broadcast.7236, %broadcast.7237), direction=EQ
  %and.224 = pred[1,4096,4096]{2,1,0} and(%compare.1879, %broadcast.5406)
  %select.1095 = f32[1,4096,4096]{2,1,0} select(%and.224, %broadcast.5407, %broadcast.5408)
  %compare.1881 = pred[1,4096,4096]{2,1,0} compare(%select.1095, %broadcast.5407), direction=NE
  %not.96 = pred[1,4096,4096]{2,1,0} not(%compare.1881)
  %convert.1415 = s32[1,4096,4096]{2,1,0} convert(%not.96)
  %reduce.488 = s32[1,4096]{1,0} reduce(%convert.1415, %constant.3783), dimensions={1}, to_apply=%region_364.11265
  %reshape.14695 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.488)
  %slice.388 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.14695), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.14698 = s32[1,1]{1,0} reshape(%slice.388)
  %reshape.14717 = s32[1]{0} reshape(%reshape.14698)
  %compare.1894 = pred[1]{0} compare(%reshape.14717, %constant.4022), direction=LT
  %select.1105 = s32[1]{0} select(%compare.1894, %reshape.11470, %reshape.14717)
  %scatter.388 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1105), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.32
  %reduce.489 = s32[1,4096]{1,0} reduce(%convert.1415, %constant.3783), dimensions={2}, to_apply=%region_365.11273
  %reshape.14699 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.489)
  %reduce.490 = s32[1,1]{1,0} reduce(%reshape.14699, %constant.4014), dimensions={3,2}, to_apply=%region_366.11278
  %reshape.14735 = s32[1]{0} reshape(%reduce.490)
  %compare.1907 = pred[1]{0} compare(%reshape.14735, %constant.4022), direction=LT
  %select.1115 = s32[1]{0} select(%compare.1907, %reshape.11470, %reshape.14735)
  %scatter.393 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1115), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.32
  %custom-call.127 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2926, %copy.2928, %copy.2929, %constant.3999, %scatter.388, /*index=5*/%scatter.393, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.717 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.127), index=0
  %copy.2930 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.717)
  %get-tuple-element.718 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.0), index=7
  %all-gather.229 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.718), channel_id=488, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.488 = bf16[1,4096,4096]{2,1,0} dot(%copy.2930, %all-gather.229), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2931 = bf16[1,4096,4096]{2,1,0} copy(%dot.488)
  %add.3404 = bf16[1,4096,4096]{2,1,0} add(%copy.2923, %copy.2931)
  %convert.1419 = f32[1,4096,4096]{2,1,0} convert(%add.3404)
  %multiply.3184 = f32[1,4096,4096]{2,1,0} multiply(%convert.1419, %convert.1419)
  %reduce.491 = f32[1,4096]{1,0} reduce(%multiply.3184, %constant.3956), dimensions={2}, to_apply=%region_367.11294
  %multiply.3185 = f32[1,4096]{1,0} multiply(%reduce.491, %broadcast.5380)
  %add.3405 = f32[1,4096]{1,0} add(%multiply.3185, %broadcast.5381)
  %reshape.14738 = f32[1,4096,1]{2,1,0} reshape(%add.3405)
  %rsqrt.130 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.14738)
  %reshape.14739 = f32[1,4096]{1,0} reshape(%rsqrt.130)
  %broadcast.7249 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.14739), dimensions={0,1}
  %multiply.3186 = f32[1,4096,4096]{2,1,0} multiply(%convert.1419, %broadcast.7249)
  %convert.1420 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3186)
  %get-tuple-element.719 = bf16[4096]{0} get-tuple-element(%opt-barrier.0), index=4
  %broadcast.7250 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.719), dimensions={2}
  %multiply.3187 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1420, %broadcast.7250)
  %copy.2932 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3187)
  %get-tuple-element.720 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.0), index=0
  %all-gather.230 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.720), channel_id=489, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.489 = bf16[1,4096,8]{2,1,0} dot(%copy.2932, %all-gather.230), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2933 = bf16[1,4096,8]{2,1,0} copy(%dot.489)
  %reshape.14740 = bf16[4096,8]{1,0} reshape(%copy.2933)
  %custom-call.128 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.14740), custom_call_target="TopK", called_computations={%compare-greater-than.32.clone}
  %get-tuple-element.721 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.128), index=0
  %get-tuple-element.722 = s32[4096,2]{1,0} get-tuple-element(%custom-call.128), index=1
  %add.3406 = s32[4096,2]{1,0} add(%get-tuple-element.722, %broadcast.5420)
  %sort.162 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.721, %add.3406), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.32
  %get-tuple-element.724 = s32[4096,2]{1,0} get-tuple-element(%sort.162), index=1
  %slice.390 = s32[4096,2]{1,0} slice(%get-tuple-element.724), slice={[0:4096], [0:2]}
  %all-gather.232 = s32[32768,2]{1,0} all-gather(%slice.390), channel_id=491, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.938 = s32[4096,2]{1,0} dynamic-slice(%all-gather.232, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.14743 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.938)
  %compare.1908 = pred[1,4096,2]{2,1,0} compare(%reshape.14743, %broadcast.5421), direction=LT
  %add.3408 = s32[1,4096,2]{2,1,0} add(%reshape.14743, %broadcast.5422)
  %select.1116 = s32[1,4096,2]{2,1,0} select(%compare.1908, %add.3408, %reshape.14743)
  %reshape.14746 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1116)
  %concatenate.194 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1913, %reshape.14746), dimensions={3}
  %subtract.330 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.194, %broadcast.5433)
  %scatter.394 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.330, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_370.11373
  %gather.32 = u32[1,4096,2]{2,1,0} gather(%scatter.394, %subtract.330), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1909 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.32), direction=EQ
  %get-tuple-element.723 = bf16[4096,2]{1,0} get-tuple-element(%sort.162), index=0
  %slice.389 = bf16[4096,2]{1,0} slice(%get-tuple-element.723), slice={[0:4096], [0:2]}
  %all-gather.231 = bf16[32768,2]{1,0} all-gather(%slice.389), channel_id=490, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.948 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.231, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1423 = f32[4096,2]{1,0} convert(%dynamic-slice.948)
  %reshape.14767 = f32[1,4096,2]{2,1,0} reshape(%convert.1423)
  %reduce.492 = f32[4096]{0} reduce(%convert.1423, %constant.4073), dimensions={1}, to_apply=%region_368.11323
  %reshape.14768 = f32[1,4096]{1,0} reshape(%reduce.492)
  %broadcast.7257 = f32[1,4096,2]{2,1,0} broadcast(%reshape.14768), dimensions={0,1}
  %subtract.329 = f32[1,4096,2]{2,1,0} subtract(%reshape.14767, %broadcast.7257)
  %exponential.191 = f32[1,4096,2]{2,1,0} exponential(%subtract.329)
  %reduce.493 = f32[1,4096]{1,0} reduce(%exponential.191, %constant.3956), dimensions={2}, to_apply=%region_369.11335
  %broadcast.7258 = f32[1,4096,2]{2,1,0} broadcast(%reduce.493), dimensions={0,1}
  %divide.680 = f32[1,4096,2]{2,1,0} divide(%exponential.191, %broadcast.7258)
  %convert.1424 = bf16[1,4096,2]{2,1,0} convert(%divide.680)
  %select.1117 = bf16[1,4096,2]{2,1,0} select(%compare.1909, %convert.1424, %broadcast.5432)
  %scatter.395 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.330, %select.1117), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_371.11382
  %broadcast.7260 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.14743), dimensions={0,1,2}
  %iota.1921 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1910 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7260, %iota.1921), direction=EQ
  %convert.1425 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1910)
  %reshape.14778 = s32[1,8192,8]{2,1,0} reshape(%convert.1425)
  %copy.2934 = s32[1,8192,8]{2,1,0} copy(%reshape.14778)
  %reduce-window.289 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2934, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone
  %reshape.14780 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.289)
  %copy.2935 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.14780)
  %compare.1911 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2935, %broadcast.5435), direction=LE
  %select.1118 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1911, %convert.1425, %broadcast.5436)
  %reduce.494 = s32[1,4096,8]{2,1,0} reduce(%select.1118, %constant.3783), dimensions={2}, to_apply=%region_372.11412
  %convert.1426 = bf16[1,4096,8]{2,1,0} convert(%reduce.494)
  %multiply.3193 = bf16[1,4096,8]{2,1,0} multiply(%scatter.395, %convert.1426)
  %broadcast.7262 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3193), dimensions={0,1,2}
  %multiply.3194 = s32[1,8192,8]{2,1,0} multiply(%copy.2934, %reduce-window.289)
  %reshape.14781 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3194)
  %reduce.495 = s32[1,4096,8]{2,1,0} reduce(%reshape.14781, %constant.3783), dimensions={2}, to_apply=%region_373.11421
  %multiply.3195 = s32[1,4096,8]{2,1,0} multiply(%reduce.495, %reduce.494)
  %broadcast.7263 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3195), dimensions={0,1,2}
  %iota.1922 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1912 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7263, %iota.1922), direction=EQ
  %convert.1427 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1912)
  %convert.1429 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1427)
  %multiply.3196 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7262, %convert.1429)
  %slice.391 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3196), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.1913 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.391, %broadcast.5439), direction=NE
  %copy.2936 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1913)
  %convert.1430 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2936)
  %dot.490 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1430, %copy.2932), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.14784 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.490)
  %all-to-all.64 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14784), channel_id=498, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.96 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.64), dimensions={1,0,2,3,4}
  %reshape.14785 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.96)
  %transpose.97 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.14785), dimensions={1,0,2,3}
  %copy.2937 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.97)
  %get-tuple-element.729 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.0), index=1
  %copy.2938 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.729)
  %dot.491 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2937, %copy.2938), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2939 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.491)
  %negate.191 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2939)
  %exponential.192 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.191)
  %add.3413 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.192, %broadcast.5440)
  %divide.681 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3413)
  %multiply.3201 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2939, %divide.681)
  %copy.2940 = bf16[1,4096,4096]{2,1,0} copy(%copy.2922)
  %copy.2941 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.391)
  %dot.492 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.2940, %copy.2941), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.14788 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.492)
  %all-to-all.65 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.14788), channel_id=499, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.98 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.65), dimensions={2,0,1,3,4}
  %reshape.14789 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.98)
  %transpose.99 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.14789), dimensions={2,0,3,1}
  %copy.2942 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.99)
  %get-tuple-element.730 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.0), index=3
  %copy.2943 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.730)
  %dot.493 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2942, %copy.2943), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.3204 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3201, %dot.493)
  %copy.2944 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.3204)
  %get-tuple-element.731 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.0), index=2
  %copy.2945 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.731)
  %dot.494 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.2944, %copy.2945), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.495 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2937, %copy.2945), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2946 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.495)
  %multiply.3205 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.493, %copy.2946)
  %multiply.3206 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3205, %divide.681)
  %multiply.3207 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2939, %multiply.3205)
  %subtract.331 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.681)
  %multiply.3208 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.681, %subtract.331)
  %multiply.3209 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3207, %multiply.3208)
  %add.3414 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.3206, %multiply.3209)
  %copy.2947 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.3414)
  %dot.496 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.2947, %copy.2938), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.3415 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.494, %dot.496)
  %copy.2948 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.3415)
  %transpose.100 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.2948), dimensions={1,0,2,3}
  %reshape.14792 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.100)
  %all-to-all.66 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14792), channel_id=500, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.101 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.66), dimensions={1,0,2,3,4}
  %reshape.14793 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.101)
  %dot.497 = bf16[1,4096,4096]{2,1,0} dot(%convert.1430, %reshape.14793), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.14795 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.938)
  %broadcast.7265 = s32[1,4096,2,3]{3,2,1,0} broadcast(%constant.3783), dimensions={}
  %compare.1915 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.194, %broadcast.7265), direction=GE
  %constant.9717 = s32[3]{0} constant({7, 4095, 7})
  %broadcast.7267 = s32[1,4096,2,3]{3,2,1,0} broadcast(%constant.9717), dimensions={3}
  %compare.1916 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.194, %broadcast.7267), direction=LE
  %and.229 = pred[1,4096,2,3]{3,2,1,0} and(%compare.1915, %compare.1916)
  %reduce.496 = pred[1,4096,2]{2,1,0} reduce(%and.229, %constant.4025), dimensions={3}, to_apply=%region_376.11540
  %multiply.3213 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3201, %copy.2946)
  %dot.498 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3213, %copy.2943), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2949 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.498)
  %reshape.14797 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2949)
  %all-to-all.67 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14797), channel_id=501, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.102 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.67), dimensions={1,0,2,3,4}
  %reshape.14798 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.102)
  %dot.499 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.2940, %reshape.14798), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.2950 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.499)
  %pad = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.2950, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.3217 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad, %convert.1429)
  %reduce.497 = bf16[1,4096,8]{2,1,0} reduce(%multiply.3217, %constant.3795), dimensions={3}, to_apply=%region_374.11522
  %multiply.3219 = bf16[1,4096,8]{2,1,0} multiply(%reduce.497, %convert.1426)
  %gather.33 = bf16[1,4096,2]{2,1,0} gather(%multiply.3219, %subtract.330), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1119 = bf16[1,4096,2]{2,1,0} select(%reduce.496, %gather.33, %broadcast.5432)
  %select.1120 = bf16[1,4096,2]{2,1,0} select(%compare.1909, %select.1119, %broadcast.5432)
  %convert.1432 = f32[1,4096,2]{2,1,0} convert(%select.1120)
  %divide.682 = f32[1,4096,2]{2,1,0} divide(%convert.1432, %broadcast.7258)
  %multiply.3220 = f32[1,4096]{1,0} multiply(%reduce.493, %reduce.493)
  %divide.683 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.3220)
  %broadcast.7272 = f32[1,4096,2]{2,1,0} broadcast(%divide.683), dimensions={0,1}
  %multiply.3221 = f32[1,4096,2]{2,1,0} multiply(%convert.1432, %broadcast.7272)
  %multiply.3222 = f32[1,4096,2]{2,1,0} multiply(%multiply.3221, %exponential.191)
  %reduce.498 = f32[1,4096]{1,0} reduce(%multiply.3222, %constant.3956), dimensions={2}, to_apply=%region_377.11554
  %negate.192 = f32[1,4096]{1,0} negate(%reduce.498)
  %broadcast.7273 = f32[1,4096,2]{2,1,0} broadcast(%negate.192), dimensions={0,1}
  %add.3416 = f32[1,4096,2]{2,1,0} add(%divide.682, %broadcast.7273)
  %multiply.3223 = f32[1,4096,2]{2,1,0} multiply(%add.3416, %exponential.191)
  %convert.1433 = bf16[1,4096,2]{2,1,0} convert(%multiply.3223)
  %scatter.396 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.14795, %convert.1433), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_379.11574
  %copy.2951 = bf16[1,4096,8]{2,1,0} copy(%scatter.396)
  %dot.500 = bf16[1,4096,4096]{2,1,0} dot(%copy.2951, %all-gather.230), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3417 = bf16[1,4096,4096]{1,2,0} add(%dot.497, %dot.500)
  %copy.2952 = bf16[1,4096,4096]{2,1,0} copy(%add.3417)
  %multiply.3224 = bf16[1,4096,4096]{2,1,0} multiply(%copy.2952, %broadcast.7250)
  %convert.1434 = f32[1,4096,4096]{2,1,0} convert(%multiply.3224)
  %multiply.3225 = f32[1,4096,4096]{2,1,0} multiply(%convert.1434, %broadcast.7249)
  %multiply.3226 = f32[1,4096,4096]{2,1,0} multiply(%convert.1419, %convert.1434)
  %reduce.499 = f32[1,4096]{1,0} reduce(%multiply.3226, %constant.3956), dimensions={2}, to_apply=%region_382.11603
  %reshape.14814 = f32[1,4096,1]{2,1,0} reshape(%reduce.499)
  %divide.684 = f32[1,4096,1]{2,1,0} divide(%rsqrt.130, %reshape.14738)
  %multiply.3227 = f32[1,4096,1]{2,1,0} multiply(%divide.684, %broadcast.7210)
  %multiply.3228 = f32[1,4096,1]{2,1,0} multiply(%reshape.14814, %multiply.3227)
  %multiply.3229 = f32[1,4096,1]{2,1,0} multiply(%multiply.3228, %broadcast.7211)
  %reshape.14816 = f32[1,4096]{1,0} reshape(%multiply.3229)
  %broadcast.7277 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.14816), dimensions={0,1}
  %multiply.3230 = f32[1,4096,4096]{2,1,0} multiply(%convert.1419, %broadcast.7277)
  %add.3418 = f32[1,4096,4096]{2,1,0} add(%multiply.3225, %multiply.3230)
  %convert.1435 = bf16[1,4096,4096]{2,1,0} convert(%add.3418)
  %add.3419 = bf16[1,4096,4096]{2,1,0} add(%copy.2922, %convert.1435)
  %get-tuple-element.732 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.127), index=1
  %get-tuple-element.733 = u32[2,4]{1,0} get-tuple-element(%custom-call.127), index=2
  %copy.2953 = bf16[1,4096,4096]{2,1,0} copy(%add.3419)
  %dot.501 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2953, %all-gather.229), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2954 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.501)
  %custom-call.237 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.2926, %copy.2928, %copy.2929, %constant.3999, %get-tuple-element.732, /*index=5*/%get-tuple-element.733, %get-tuple-element.717, %copy.2954, %scatter.388, %scatter.393, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.740 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.237), index=2
  %copy.2955 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.740)
  %dot.502 = bf16[1,4096,4096]{2,1,0} dot(%copy.2955, %all-gather.228), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.741 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.237), index=1
  %copy.2956 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.741)
  %slice.392 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.2956), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3232 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.392, %broadcast.7233)
  %slice.393 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.2956), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3234 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.393, %broadcast.7232)
  %add.3432 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3232, %multiply.3234)
  %multiply.3235 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.392, %broadcast.7232)
  %negate.193 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.393)
  %multiply.3236 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.193, %broadcast.7233)
  %add.3433 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3235, %multiply.3236)
  %concatenate.199 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.3432, %add.3433), dimensions={3}
  %dot.503 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.199, %all-gather.227), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3434 = bf16[1,4096,4096]{2,1,0} add(%dot.502, %dot.503)
  %copy.2957 = bf16[1,4096,4096]{2,1,0} copy(%add.3434)
  %get-tuple-element.742 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.237), index=0
  %copy.2958 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.742)
  %slice.394 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.2958), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3238 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.394, %broadcast.7226)
  %slice.395 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.2958), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3240 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.395, %broadcast.7225)
  %add.3435 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3238, %multiply.3240)
  %multiply.3241 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.394, %broadcast.7225)
  %negate.194 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.395)
  %multiply.3242 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.194, %broadcast.7226)
  %add.3436 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3241, %multiply.3242)
  %concatenate.200 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.3435, %add.3436), dimensions={3}
  %dot.504 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.200, %all-gather.226), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2959 = bf16[1,4096,4096]{2,1,0} copy(%dot.504)
  %add.3437 = bf16[1,4096,4096]{2,1,0} add(%copy.2957, %copy.2959)
  %copy.2960 = bf16[1,4096,4096]{2,1,0} copy(%add.3437)
  %multiply.3243 = bf16[1,4096,4096]{2,1,0} multiply(%copy.2960, %broadcast.7221)
  %convert.1438 = f32[1,4096,4096]{2,1,0} convert(%multiply.3243)
  %multiply.3244 = f32[1,4096,4096]{2,1,0} multiply(%convert.1438, %broadcast.7220)
  %multiply.3245 = f32[1,4096,4096]{2,1,0} multiply(%convert.1405, %convert.1438)
  %reduce.500 = f32[1,4096]{1,0} reduce(%multiply.3245, %constant.3956), dimensions={2}, to_apply=%region_386.11714
  %reshape.14869 = f32[1,4096,1]{2,1,0} reshape(%reduce.500)
  %divide.687 = f32[1,4096,1]{2,1,0} divide(%rsqrt.129, %reshape.14678)
  %multiply.3246 = f32[1,4096,1]{2,1,0} multiply(%divide.687, %broadcast.7210)
  %multiply.3247 = f32[1,4096,1]{2,1,0} multiply(%reshape.14869, %multiply.3246)
  %multiply.3248 = f32[1,4096,1]{2,1,0} multiply(%multiply.3247, %broadcast.7211)
  %reshape.14873 = f32[1,4096]{1,0} reshape(%multiply.3248)
  %broadcast.7294 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.14873), dimensions={0,1}
  %multiply.3249 = f32[1,4096,4096]{2,1,0} multiply(%convert.1405, %broadcast.7294)
  %add.3438 = f32[1,4096,4096]{2,1,0} add(%multiply.3244, %multiply.3249)
  %convert.1439 = bf16[1,4096,4096]{2,1,0} convert(%add.3438)
  %add.3439 = bf16[1,4096,4096]{2,1,0} add(%add.3419, %convert.1439)
  %copy.2961 = bf16[1,4096,4096]{2,1,0} copy(%add.3439)
  %tuple.226 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.313, %param.314, %param.315, %param.316, %param.312, /*index=5*/%param.307, %param.309, %param.311, %param.308, %param.310, /*index=10*/%copy.2870, %param.10, %param.7, %copy.2961)
  %opt-barrier.1 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.226)
  %get-tuple-element.743 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.1), index=13
  %copy.2962 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.743)
  %iota.1924 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.744 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.1), index=10
  %copy.2963 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.744)
  %convert.1440 = f32[1,4096,4096]{2,1,0} convert(%copy.2963)
  %multiply.3251 = f32[1,4096,4096]{2,1,0} multiply(%convert.1440, %convert.1440)
  %reduce.501 = f32[1,4096]{1,0} reduce(%multiply.3251, %constant.3956), dimensions={2}, to_apply=%region_388.11757
  %multiply.3252 = f32[1,4096]{1,0} multiply(%reduce.501, %broadcast.5380)
  %add.3441 = f32[1,4096]{1,0} add(%multiply.3252, %broadcast.5381)
  %reshape.14876 = f32[1,4096,1]{2,1,0} reshape(%add.3441)
  %rsqrt.131 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.14876)
  %reshape.14877 = f32[1,4096]{1,0} reshape(%rsqrt.131)
  %broadcast.7298 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.14877), dimensions={0,1}
  %multiply.3253 = f32[1,4096,4096]{2,1,0} multiply(%convert.1440, %broadcast.7298)
  %convert.1441 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3253)
  %get-tuple-element.745 = bf16[4096]{0} get-tuple-element(%opt-barrier.1), index=5
  %broadcast.7299 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.745), dimensions={2}
  %multiply.3254 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1441, %broadcast.7299)
  %copy.2964 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3254)
  %copy.2965 = bf16[1,4096,4096]{2,1,0} copy(%copy.2964)
  %get-tuple-element.746 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.1), index=8
  %all-gather.233 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.746), channel_id=504, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.505 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2965, %all-gather.233), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.396 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.505), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.747 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.1), index=12
  %convert.1442 = f32[1,4096]{1,0} convert(%get-tuple-element.747)
  %broadcast.7300 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1442), dimensions={0,1}
  %divide.688 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.7300, %broadcast.5388)
  %cosine.67 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.688)
  %convert.1444 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.67)
  %reshape.14879 = bf16[1,4096,64]{2,1,0} reshape(%convert.1444)
  %broadcast.7303 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.14879), dimensions={0,1,3}
  %multiply.3258 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.396, %broadcast.7303)
  %slice.397 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.505), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.66 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.688)
  %convert.1445 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.66)
  %reshape.14881 = bf16[1,4096,64]{2,1,0} reshape(%convert.1445)
  %broadcast.7304 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.14881), dimensions={0,1,3}
  %multiply.3260 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.397, %broadcast.7304)
  %subtract.335 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3258, %multiply.3260)
  %multiply.3261 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.397, %broadcast.7303)
  %multiply.3262 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.396, %broadcast.7304)
  %add.3442 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3261, %multiply.3262)
  %concatenate.201 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.335, %add.3442), dimensions={3}
  %copy.2966 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.201)
  %get-tuple-element.748 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.1), index=6
  %all-gather.234 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.748), channel_id=505, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.506 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2965, %all-gather.234), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.398 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.506), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.7314 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.14879), dimensions={0,1,3}
  %multiply.3266 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.398, %broadcast.7314)
  %slice.399 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.506), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.7315 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.14881), dimensions={0,1,3}
  %multiply.3268 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.399, %broadcast.7315)
  %subtract.336 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3266, %multiply.3268)
  %multiply.3269 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.399, %broadcast.7314)
  %multiply.3270 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.398, %broadcast.7315)
  %add.3443 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3269, %multiply.3270)
  %concatenate.202 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.336, %add.3443), dimensions={3}
  %copy.2968 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.202)
  %get-tuple-element.749 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.1), index=9
  %all-gather.235 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.749), channel_id=506, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.507 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.2965, %all-gather.235), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2969 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.507)
  %get-tuple-element.750 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.1), index=11
  %broadcast.7318 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.750), dimensions={0,1}
  %broadcast.7319 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.750), dimensions={0,2}
  %compare.1944 = pred[1,4096,4096]{2,1,0} compare(%broadcast.7318, %broadcast.7319), direction=EQ
  %and.234 = pred[1,4096,4096]{2,1,0} and(%compare.1944, %broadcast.5406)
  %select.1141 = f32[1,4096,4096]{2,1,0} select(%and.234, %broadcast.5407, %broadcast.5408)
  %compare.1947 = pred[1,4096,4096]{2,1,0} compare(%select.1141, %broadcast.5407), direction=NE
  %not.97 = pred[1,4096,4096]{2,1,0} not(%compare.1947)
  %convert.1451 = s32[1,4096,4096]{2,1,0} convert(%not.97)
  %reduce.502 = s32[1,4096]{1,0} reduce(%convert.1451, %constant.3783), dimensions={1}, to_apply=%region_389.11891
  %reshape.14890 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.502)
  %slice.400 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.14890), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.14893 = s32[1,1]{1,0} reshape(%slice.400)
  %reshape.14910 = s32[1]{0} reshape(%reshape.14893)
  %compare.1961 = pred[1]{0} compare(%reshape.14910, %constant.4022), direction=LT
  %select.1151 = s32[1]{0} select(%compare.1961, %reshape.11470, %reshape.14910)
  %scatter.411 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1151), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.33
  %reduce.503 = s32[1,4096]{1,0} reduce(%convert.1451, %constant.3783), dimensions={2}, to_apply=%region_390.11899
  %reshape.14895 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.503)
  %reduce.504 = s32[1,1]{1,0} reduce(%reshape.14895, %constant.4014), dimensions={3,2}, to_apply=%region_391.11904
  %reshape.14927 = s32[1]{0} reshape(%reduce.504)
  %compare.1974 = pred[1]{0} compare(%reshape.14927, %constant.4022), direction=LT
  %select.1161 = s32[1]{0} select(%compare.1974, %reshape.11470, %reshape.14927)
  %scatter.416 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1161), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.33
  %custom-call.129 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.2966, %copy.2968, %copy.2969, %constant.3999, %scatter.411, /*index=5*/%scatter.416, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.756 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.129), index=0
  %copy.2970 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.756)
  %get-tuple-element.757 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.1), index=7
  %all-gather.236 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.757), channel_id=507, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.508 = bf16[1,4096,4096]{2,1,0} dot(%copy.2970, %all-gather.236), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.2971 = bf16[1,4096,4096]{2,1,0} copy(%dot.508)
  %add.3457 = bf16[1,4096,4096]{2,1,0} add(%copy.2963, %copy.2971)
  %convert.1456 = f32[1,4096,4096]{2,1,0} convert(%add.3457)
  %multiply.3272 = f32[1,4096,4096]{2,1,0} multiply(%convert.1456, %convert.1456)
  %reduce.505 = f32[1,4096]{1,0} reduce(%multiply.3272, %constant.3956), dimensions={2}, to_apply=%region_392.11920
  %multiply.3273 = f32[1,4096]{1,0} multiply(%reduce.505, %broadcast.5380)
  %add.3458 = f32[1,4096]{1,0} add(%multiply.3273, %broadcast.5381)
  %reshape.14929 = f32[1,4096,1]{2,1,0} reshape(%add.3458)
  %rsqrt.132 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.14929)
  %reshape.14930 = f32[1,4096]{1,0} reshape(%rsqrt.132)
  %broadcast.7335 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.14930), dimensions={0,1}
  %multiply.3274 = f32[1,4096,4096]{2,1,0} multiply(%convert.1456, %broadcast.7335)
  %convert.1457 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3274)
  %get-tuple-element.758 = bf16[4096]{0} get-tuple-element(%opt-barrier.1), index=4
  %broadcast.7336 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.758), dimensions={2}
  %multiply.3275 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1457, %broadcast.7336)
  %copy.2972 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3275)
  %get-tuple-element.759 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.1), index=0
  %all-gather.237 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.759), channel_id=508, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.509 = bf16[1,4096,8]{2,1,0} dot(%copy.2972, %all-gather.237), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.2973 = bf16[1,4096,8]{2,1,0} copy(%dot.509)
  %reshape.14931 = bf16[4096,8]{1,0} reshape(%copy.2973)
  %custom-call.130 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.14931), custom_call_target="TopK", called_computations={%compare-greater-than.33.clone}
  %get-tuple-element.760 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.130), index=0
  %get-tuple-element.761 = s32[4096,2]{1,0} get-tuple-element(%custom-call.130), index=1
  %add.3459 = s32[4096,2]{1,0} add(%get-tuple-element.761, %broadcast.5420)
  %sort.167 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.760, %add.3459), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.33
  %get-tuple-element.763 = s32[4096,2]{1,0} get-tuple-element(%sort.167), index=1
  %slice.402 = s32[4096,2]{1,0} slice(%get-tuple-element.763), slice={[0:4096], [0:2]}
  %all-gather.239 = s32[32768,2]{1,0} all-gather(%slice.402), channel_id=510, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.982 = s32[4096,2]{1,0} dynamic-slice(%all-gather.239, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.14934 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.982)
  %compare.1975 = pred[1,4096,2]{2,1,0} compare(%reshape.14934, %broadcast.5421), direction=LT
  %add.3460 = s32[1,4096,2]{2,1,0} add(%reshape.14934, %broadcast.5422)
  %select.1162 = s32[1,4096,2]{2,1,0} select(%compare.1975, %add.3460, %reshape.14934)
  %reshape.14935 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1162)
  %concatenate.203 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1924, %reshape.14935), dimensions={3}
  %subtract.342 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.203, %broadcast.5433)
  %scatter.417 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.342, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_395.11999
  %gather.34 = u32[1,4096,2]{2,1,0} gather(%scatter.417, %subtract.342), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.1976 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.34), direction=EQ
  %get-tuple-element.762 = bf16[4096,2]{1,0} get-tuple-element(%sort.167), index=0
  %slice.401 = bf16[4096,2]{1,0} slice(%get-tuple-element.762), slice={[0:4096], [0:2]}
  %all-gather.238 = bf16[32768,2]{1,0} all-gather(%slice.401), channel_id=509, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.992 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.238, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1460 = f32[4096,2]{1,0} convert(%dynamic-slice.992)
  %reshape.14951 = f32[1,4096,2]{2,1,0} reshape(%convert.1460)
  %reduce.506 = f32[4096]{0} reduce(%convert.1460, %constant.4073), dimensions={1}, to_apply=%region_393.11949
  %reshape.14952 = f32[1,4096]{1,0} reshape(%reduce.506)
  %broadcast.7345 = f32[1,4096,2]{2,1,0} broadcast(%reshape.14952), dimensions={0,1}
  %subtract.341 = f32[1,4096,2]{2,1,0} subtract(%reshape.14951, %broadcast.7345)
  %exponential.193 = f32[1,4096,2]{2,1,0} exponential(%subtract.341)
  %reduce.507 = f32[1,4096]{1,0} reduce(%exponential.193, %constant.3956), dimensions={2}, to_apply=%region_394.11961
  %broadcast.7347 = f32[1,4096,2]{2,1,0} broadcast(%reduce.507), dimensions={0,1}
  %divide.692 = f32[1,4096,2]{2,1,0} divide(%exponential.193, %broadcast.7347)
  %convert.1461 = bf16[1,4096,2]{2,1,0} convert(%divide.692)
  %select.1163 = bf16[1,4096,2]{2,1,0} select(%compare.1976, %convert.1461, %broadcast.5432)
  %scatter.418 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.342, %select.1163), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_396.12008
  %broadcast.7350 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.14934), dimensions={0,1,2}
  %iota.1932 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.1977 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7350, %iota.1932), direction=EQ
  %convert.1462 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.1977)
  %reshape.14961 = s32[1,8192,8]{2,1,0} reshape(%convert.1462)
  %copy.2974 = s32[1,8192,8]{2,1,0} copy(%reshape.14961)
  %reduce-window.294 = s32[1,8192,8]{2,1,0} reduce-window(%copy.2974, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone
  %reshape.14963 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.294)
  %copy.2975 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.14963)
  %compare.1978 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.2975, %broadcast.5435), direction=LE
  %select.1164 = s32[1,4096,2,8]{3,2,1,0} select(%compare.1978, %convert.1462, %broadcast.5436)
  %reduce.508 = s32[1,4096,8]{2,1,0} reduce(%select.1164, %constant.3783), dimensions={2}, to_apply=%region_397.12022
  %convert.1463 = bf16[1,4096,8]{2,1,0} convert(%reduce.508)
  %multiply.3281 = bf16[1,4096,8]{2,1,0} multiply(%scatter.418, %convert.1463)
  %broadcast.7354 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3281), dimensions={0,1,2}
  %multiply.3282 = s32[1,8192,8]{2,1,0} multiply(%copy.2974, %reduce-window.294)
  %reshape.14964 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3282)
  %reduce.509 = s32[1,4096,8]{2,1,0} reduce(%reshape.14964, %constant.3783), dimensions={2}, to_apply=%region_398.12031
  %multiply.3283 = s32[1,4096,8]{2,1,0} multiply(%reduce.509, %reduce.508)
  %broadcast.7356 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3283), dimensions={0,1,2}
  %iota.1933 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.1979 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7356, %iota.1933), direction=EQ
  %convert.1464 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.1979)
  %convert.1465 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1464)
  %multiply.3284 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7354, %convert.1465)
  %slice.403 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3284), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.1980 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.403, %broadcast.5439), direction=NE
  %copy.2976 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.1980)
  %convert.1466 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.2976)
  %dot.510 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1466, %copy.2972), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.14967 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.510)
  %all-to-all.68 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14967), channel_id=517, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.103 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.68), dimensions={1,0,2,3,4}
  %reshape.14968 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.103)
  %transpose.104 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.14968), dimensions={1,0,2,3}
  %copy.2977 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.104)
  %get-tuple-element.768 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.1), index=1
  %copy.2978 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.768)
  %dot.511 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2977, %copy.2978), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2979 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.511)
  %negate.195 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.2979)
  %exponential.194 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.195)
  %add.3465 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.194, %broadcast.5440)
  %divide.693 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3465)
  %multiply.3288 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2979, %divide.693)
  %copy.2980 = bf16[1,4096,4096]{2,1,0} copy(%copy.2962)
  %copy.2981 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.403)
  %dot.512 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.2980, %copy.2981), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.14971 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.512)
  %all-to-all.69 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.14971), channel_id=518, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.105 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.69), dimensions={2,0,1,3,4}
  %reshape.14972 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.105)
  %transpose.106 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.14972), dimensions={2,0,3,1}
  %copy.2982 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.106)
  %get-tuple-element.769 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.1), index=3
  %copy.2983 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.769)
  %dot.513 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2982, %copy.2983), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.3291 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3288, %dot.513)
  %copy.2984 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.3291)
  %get-tuple-element.770 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.1), index=2
  %copy.2985 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.770)
  %dot.514 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.2984, %copy.2985), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.515 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.2977, %copy.2985), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2986 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.515)
  %multiply.3292 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.513, %copy.2986)
  %multiply.3293 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3292, %divide.693)
  %multiply.3294 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.2979, %multiply.3292)
  %subtract.343 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.693)
  %multiply.3296 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.693, %subtract.343)
  %multiply.3297 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3294, %multiply.3296)
  %add.3466 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.3293, %multiply.3297)
  %copy.2987 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.3466)
  %dot.516 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.2987, %copy.2978), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.3467 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.514, %dot.516)
  %copy.2988 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.3467)
  %transpose.107 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.2988), dimensions={1,0,2,3}
  %reshape.14975 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.107)
  %all-to-all.70 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14975), channel_id=519, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.108 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.70), dimensions={1,0,2,3,4}
  %reshape.14976 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.108)
  %dot.517 = bf16[1,4096,4096]{2,1,0} dot(%convert.1466, %reshape.14976), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.14978 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.982)
  %compare.1982 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.203, %broadcast.7265), direction=GE
  %compare.1983 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.203, %broadcast.7267), direction=LE
  %and.239 = pred[1,4096,2,3]{3,2,1,0} and(%compare.1982, %compare.1983)
  %reduce.510 = pred[1,4096,2]{2,1,0} reduce(%and.239, %constant.4025), dimensions={3}, to_apply=%region_401.12116
  %multiply.3300 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3288, %copy.2986)
  %dot.518 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3300, %copy.2983), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.2989 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.518)
  %reshape.14981 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.2989)
  %all-to-all.71 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.14981), channel_id=520, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.109 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.71), dimensions={1,0,2,3,4}
  %reshape.14982 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.109)
  %dot.519 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.2980, %reshape.14982), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.2990 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.519)
  %pad.1 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.2990, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.3306 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.1, %convert.1465)
  %reduce.511 = bf16[1,4096,8]{2,1,0} reduce(%multiply.3306, %constant.3795), dimensions={3}, to_apply=%region_399.12098
  %multiply.3307 = bf16[1,4096,8]{2,1,0} multiply(%reduce.511, %convert.1463)
  %gather.35 = bf16[1,4096,2]{2,1,0} gather(%multiply.3307, %subtract.342), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1165 = bf16[1,4096,2]{2,1,0} select(%reduce.510, %gather.35, %broadcast.5432)
  %select.1166 = bf16[1,4096,2]{2,1,0} select(%compare.1976, %select.1165, %broadcast.5432)
  %convert.1468 = f32[1,4096,2]{2,1,0} convert(%select.1166)
  %divide.694 = f32[1,4096,2]{2,1,0} divide(%convert.1468, %broadcast.7347)
  %multiply.3308 = f32[1,4096]{1,0} multiply(%reduce.507, %reduce.507)
  %divide.695 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.3308)
  %broadcast.7363 = f32[1,4096,2]{2,1,0} broadcast(%divide.695), dimensions={0,1}
  %multiply.3309 = f32[1,4096,2]{2,1,0} multiply(%convert.1468, %broadcast.7363)
  %multiply.3311 = f32[1,4096,2]{2,1,0} multiply(%multiply.3309, %exponential.193)
  %reduce.512 = f32[1,4096]{1,0} reduce(%multiply.3311, %constant.3956), dimensions={2}, to_apply=%region_402.12130
  %negate.196 = f32[1,4096]{1,0} negate(%reduce.512)
  %broadcast.7364 = f32[1,4096,2]{2,1,0} broadcast(%negate.196), dimensions={0,1}
  %add.3468 = f32[1,4096,2]{2,1,0} add(%divide.694, %broadcast.7364)
  %multiply.3312 = f32[1,4096,2]{2,1,0} multiply(%add.3468, %exponential.193)
  %convert.1469 = bf16[1,4096,2]{2,1,0} convert(%multiply.3312)
  %scatter.419 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.14978, %convert.1469), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_404.12150
  %copy.2991 = bf16[1,4096,8]{2,1,0} copy(%scatter.419)
  %dot.520 = bf16[1,4096,4096]{2,1,0} dot(%copy.2991, %all-gather.237), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3469 = bf16[1,4096,4096]{1,2,0} add(%dot.517, %dot.520)
  %copy.2992 = bf16[1,4096,4096]{2,1,0} copy(%add.3469)
  %multiply.3313 = bf16[1,4096,4096]{2,1,0} multiply(%copy.2992, %broadcast.7336)
  %convert.1470 = f32[1,4096,4096]{2,1,0} convert(%multiply.3313)
  %multiply.3314 = f32[1,4096,4096]{2,1,0} multiply(%convert.1470, %broadcast.7335)
  %multiply.3315 = f32[1,4096,4096]{2,1,0} multiply(%convert.1456, %convert.1470)
  %reduce.513 = f32[1,4096]{1,0} reduce(%multiply.3315, %constant.3956), dimensions={2}, to_apply=%region_407.12179
  %reshape.14996 = f32[1,4096,1]{2,1,0} reshape(%reduce.513)
  %divide.696 = f32[1,4096,1]{2,1,0} divide(%rsqrt.132, %reshape.14929)
  %multiply.3316 = f32[1,4096,1]{2,1,0} multiply(%divide.696, %broadcast.7210)
  %multiply.3318 = f32[1,4096,1]{2,1,0} multiply(%reshape.14996, %multiply.3316)
  %multiply.3319 = f32[1,4096,1]{2,1,0} multiply(%multiply.3318, %broadcast.7211)
  %reshape.14997 = f32[1,4096]{1,0} reshape(%multiply.3319)
  %broadcast.7368 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.14997), dimensions={0,1}
  %multiply.3320 = f32[1,4096,4096]{2,1,0} multiply(%convert.1456, %broadcast.7368)
  %add.3470 = f32[1,4096,4096]{2,1,0} add(%multiply.3314, %multiply.3320)
  %convert.1471 = bf16[1,4096,4096]{2,1,0} convert(%add.3470)
  %add.3471 = bf16[1,4096,4096]{2,1,0} add(%copy.2962, %convert.1471)
  %get-tuple-element.771 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.129), index=1
  %get-tuple-element.772 = u32[2,4]{1,0} get-tuple-element(%custom-call.129), index=2
  %copy.2993 = bf16[1,4096,4096]{2,1,0} copy(%add.3471)
  %dot.521 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.2993, %all-gather.236), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.2994 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.521)
  %custom-call.131 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.2966, %copy.2968, %copy.2969, %constant.3999, %get-tuple-element.771, /*index=5*/%get-tuple-element.772, %get-tuple-element.756, %copy.2994, %scatter.411, %scatter.416, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.779 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.131), index=2
  %copy.2995 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.779)
  %dot.522 = bf16[1,4096,4096]{2,1,0} dot(%copy.2995, %all-gather.235), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.780 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.131), index=1
  %copy.2996 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.780)
  %slice.404 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.2996), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3322 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.404, %broadcast.7315)
  %slice.405 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.2996), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3324 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.405, %broadcast.7314)
  %add.3485 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3322, %multiply.3324)
  %multiply.3325 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.404, %broadcast.7314)
  %negate.197 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.405)
  %multiply.3326 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.197, %broadcast.7315)
  %add.3487 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3325, %multiply.3326)
  %concatenate.208 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.3485, %add.3487), dimensions={3}
  %dot.523 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.208, %all-gather.234), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3488 = bf16[1,4096,4096]{2,1,0} add(%dot.522, %dot.523)
  %copy.2997 = bf16[1,4096,4096]{2,1,0} copy(%add.3488)
  %get-tuple-element.781 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.131), index=0
  %copy.2998 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.781)
  %slice.406 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.2998), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3328 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.406, %broadcast.7304)
  %slice.407 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.2998), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3330 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.407, %broadcast.7303)
  %add.3489 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3328, %multiply.3330)
  %multiply.3331 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.406, %broadcast.7303)
  %negate.198 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.407)
  %multiply.3332 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.198, %broadcast.7304)
  %add.3490 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3331, %multiply.3332)
  %concatenate.209 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.3489, %add.3490), dimensions={3}
  %dot.524 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.209, %all-gather.233), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.2999 = bf16[1,4096,4096]{2,1,0} copy(%dot.524)
  %add.3491 = bf16[1,4096,4096]{2,1,0} add(%copy.2997, %copy.2999)
  %copy.3000 = bf16[1,4096,4096]{2,1,0} copy(%add.3491)
  %multiply.3334 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3000, %broadcast.7299)
  %convert.1474 = f32[1,4096,4096]{2,1,0} convert(%multiply.3334)
  %multiply.3335 = f32[1,4096,4096]{2,1,0} multiply(%convert.1474, %broadcast.7298)
  %multiply.3336 = f32[1,4096,4096]{2,1,0} multiply(%convert.1440, %convert.1474)
  %reduce.514 = f32[1,4096]{1,0} reduce(%multiply.3336, %constant.3956), dimensions={2}, to_apply=%region_411.12290
  %reshape.15045 = f32[1,4096,1]{2,1,0} reshape(%reduce.514)
  %divide.699 = f32[1,4096,1]{2,1,0} divide(%rsqrt.131, %reshape.14876)
  %multiply.3337 = f32[1,4096,1]{2,1,0} multiply(%divide.699, %broadcast.7210)
  %multiply.3338 = f32[1,4096,1]{2,1,0} multiply(%reshape.15045, %multiply.3337)
  %multiply.3339 = f32[1,4096,1]{2,1,0} multiply(%multiply.3338, %broadcast.7211)
  %reshape.15047 = f32[1,4096]{1,0} reshape(%multiply.3339)
  %broadcast.7396 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15047), dimensions={0,1}
  %multiply.3340 = f32[1,4096,4096]{2,1,0} multiply(%convert.1440, %broadcast.7396)
  %add.3492 = f32[1,4096,4096]{2,1,0} add(%multiply.3335, %multiply.3340)
  %convert.1475 = bf16[1,4096,4096]{2,1,0} convert(%add.3492)
  %add.3493 = bf16[1,4096,4096]{2,1,0} add(%add.3471, %convert.1475)
  %copy.3001 = bf16[1,4096,4096]{2,1,0} copy(%add.3493)
  %tuple.231 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.303, %param.304, %param.305, %param.306, %param.302, /*index=5*/%param.297, %param.299, %param.301, %param.298, %param.300, /*index=10*/%copy.2846, %param.10, %param.7, %copy.3001)
  %opt-barrier.2 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.231)
  %get-tuple-element.782 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.2), index=13
  %copy.3002 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.782)
  %iota.1935 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.783 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.2), index=10
  %copy.3003 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.783)
  %convert.1477 = f32[1,4096,4096]{2,1,0} convert(%copy.3003)
  %multiply.3342 = f32[1,4096,4096]{2,1,0} multiply(%convert.1477, %convert.1477)
  %reduce.515 = f32[1,4096]{1,0} reduce(%multiply.3342, %constant.3956), dimensions={2}, to_apply=%region_413.12333
  %multiply.3344 = f32[1,4096]{1,0} multiply(%reduce.515, %broadcast.5380)
  %add.3495 = f32[1,4096]{1,0} add(%multiply.3344, %broadcast.5381)
  %reshape.15049 = f32[1,4096,1]{2,1,0} reshape(%add.3495)
  %rsqrt.133 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.15049)
  %reshape.15050 = f32[1,4096]{1,0} reshape(%rsqrt.133)
  %broadcast.7401 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15050), dimensions={0,1}
  %multiply.3345 = f32[1,4096,4096]{2,1,0} multiply(%convert.1477, %broadcast.7401)
  %convert.1478 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3345)
  %get-tuple-element.784 = bf16[4096]{0} get-tuple-element(%opt-barrier.2), index=5
  %broadcast.7402 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.784), dimensions={2}
  %multiply.3346 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1478, %broadcast.7402)
  %copy.3004 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3346)
  %copy.3005 = bf16[1,4096,4096]{2,1,0} copy(%copy.3004)
  %get-tuple-element.785 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.2), index=8
  %all-gather.240 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.785), channel_id=523, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.525 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3005, %all-gather.240), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.408 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.525), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.786 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.2), index=12
  %convert.1479 = f32[1,4096]{1,0} convert(%get-tuple-element.786)
  %broadcast.7403 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1479), dimensions={0,1}
  %divide.700 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.7403, %broadcast.5388)
  %cosine.69 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.700)
  %convert.1482 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.69)
  %reshape.15052 = bf16[1,4096,64]{2,1,0} reshape(%convert.1482)
  %broadcast.7407 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15052), dimensions={0,1,3}
  %multiply.3350 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.408, %broadcast.7407)
  %slice.409 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.525), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.68 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.700)
  %convert.1483 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.68)
  %reshape.15054 = bf16[1,4096,64]{2,1,0} reshape(%convert.1483)
  %broadcast.7410 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15054), dimensions={0,1,3}
  %multiply.3352 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.409, %broadcast.7410)
  %subtract.347 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3350, %multiply.3352)
  %multiply.3353 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.409, %broadcast.7407)
  %multiply.3354 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.408, %broadcast.7410)
  %add.3496 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3353, %multiply.3354)
  %concatenate.210 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.347, %add.3496), dimensions={3}
  %copy.3006 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.210)
  %get-tuple-element.787 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.2), index=6
  %all-gather.241 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.787), channel_id=524, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.526 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3005, %all-gather.241), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.410 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.526), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.7419 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15052), dimensions={0,1,3}
  %multiply.3359 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.410, %broadcast.7419)
  %slice.411 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.526), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.7421 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15054), dimensions={0,1,3}
  %multiply.3361 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.411, %broadcast.7421)
  %subtract.348 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3359, %multiply.3361)
  %multiply.3363 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.411, %broadcast.7419)
  %multiply.3364 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.410, %broadcast.7421)
  %add.3497 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3363, %multiply.3364)
  %concatenate.211 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.348, %add.3497), dimensions={3}
  %copy.3008 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.211)
  %get-tuple-element.788 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.2), index=9
  %all-gather.242 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.788), channel_id=525, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.527 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3005, %all-gather.242), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3009 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.527)
  %get-tuple-element.789 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.2), index=11
  %broadcast.7425 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.789), dimensions={0,1}
  %broadcast.7426 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.789), dimensions={0,2}
  %compare.2010 = pred[1,4096,4096]{2,1,0} compare(%broadcast.7425, %broadcast.7426), direction=EQ
  %and.244 = pred[1,4096,4096]{2,1,0} and(%compare.2010, %broadcast.5406)
  %select.1187 = f32[1,4096,4096]{2,1,0} select(%and.244, %broadcast.5407, %broadcast.5408)
  %compare.2012 = pred[1,4096,4096]{2,1,0} compare(%select.1187, %broadcast.5407), direction=NE
  %not.98 = pred[1,4096,4096]{2,1,0} not(%compare.2012)
  %convert.1488 = s32[1,4096,4096]{2,1,0} convert(%not.98)
  %reduce.516 = s32[1,4096]{1,0} reduce(%convert.1488, %constant.3783), dimensions={1}, to_apply=%region_414.12467
  %reshape.15065 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.516)
  %slice.412 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.15065), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.15067 = s32[1,1]{1,0} reshape(%slice.412)
  %reshape.15082 = s32[1]{0} reshape(%reshape.15067)
  %compare.2025 = pred[1]{0} compare(%reshape.15082, %constant.4022), direction=LT
  %select.1197 = s32[1]{0} select(%compare.2025, %reshape.11470, %reshape.15082)
  %scatter.434 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1197), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.34
  %reduce.517 = s32[1,4096]{1,0} reduce(%convert.1488, %constant.3783), dimensions={2}, to_apply=%region_415.12475
  %reshape.15068 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.517)
  %reduce.518 = s32[1,1]{1,0} reduce(%reshape.15068, %constant.4014), dimensions={3,2}, to_apply=%region_416.12480
  %reshape.15099 = s32[1]{0} reshape(%reduce.518)
  %compare.2039 = pred[1]{0} compare(%reshape.15099, %constant.4022), direction=LT
  %select.1207 = s32[1]{0} select(%compare.2039, %reshape.11470, %reshape.15099)
  %scatter.439 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1207), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.34
  %custom-call.132 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3006, %copy.3008, %copy.3009, %constant.3999, %scatter.434, /*index=5*/%scatter.439, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.795 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.132), index=0
  %copy.3010 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.795)
  %get-tuple-element.796 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.2), index=7
  %all-gather.243 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.796), channel_id=526, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.528 = bf16[1,4096,4096]{2,1,0} dot(%copy.3010, %all-gather.243), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3011 = bf16[1,4096,4096]{2,1,0} copy(%dot.528)
  %add.3513 = bf16[1,4096,4096]{2,1,0} add(%copy.3003, %copy.3011)
  %convert.1493 = f32[1,4096,4096]{2,1,0} convert(%add.3513)
  %multiply.3366 = f32[1,4096,4096]{2,1,0} multiply(%convert.1493, %convert.1493)
  %reduce.519 = f32[1,4096]{1,0} reduce(%multiply.3366, %constant.3956), dimensions={2}, to_apply=%region_417.12496
  %multiply.3367 = f32[1,4096]{1,0} multiply(%reduce.519, %broadcast.5380)
  %add.3514 = f32[1,4096]{1,0} add(%multiply.3367, %broadcast.5381)
  %reshape.15101 = f32[1,4096,1]{2,1,0} reshape(%add.3514)
  %rsqrt.134 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.15101)
  %reshape.15102 = f32[1,4096]{1,0} reshape(%rsqrt.134)
  %broadcast.7438 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15102), dimensions={0,1}
  %multiply.3368 = f32[1,4096,4096]{2,1,0} multiply(%convert.1493, %broadcast.7438)
  %convert.1494 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3368)
  %get-tuple-element.797 = bf16[4096]{0} get-tuple-element(%opt-barrier.2), index=4
  %broadcast.7439 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.797), dimensions={2}
  %multiply.3369 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1494, %broadcast.7439)
  %copy.3012 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3369)
  %get-tuple-element.798 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.2), index=0
  %all-gather.244 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.798), channel_id=527, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.529 = bf16[1,4096,8]{2,1,0} dot(%copy.3012, %all-gather.244), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3013 = bf16[1,4096,8]{2,1,0} copy(%dot.529)
  %reshape.15104 = bf16[4096,8]{1,0} reshape(%copy.3013)
  %custom-call.133 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.15104), custom_call_target="TopK", called_computations={%compare-greater-than.34.clone}
  %get-tuple-element.799 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.133), index=0
  %get-tuple-element.800 = s32[4096,2]{1,0} get-tuple-element(%custom-call.133), index=1
  %add.3515 = s32[4096,2]{1,0} add(%get-tuple-element.800, %broadcast.5420)
  %sort.172 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.799, %add.3515), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.34
  %get-tuple-element.802 = s32[4096,2]{1,0} get-tuple-element(%sort.172), index=1
  %slice.414 = s32[4096,2]{1,0} slice(%get-tuple-element.802), slice={[0:4096], [0:2]}
  %all-gather.246 = s32[32768,2]{1,0} all-gather(%slice.414), channel_id=529, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1026 = s32[4096,2]{1,0} dynamic-slice(%all-gather.246, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.15107 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1026)
  %compare.2041 = pred[1,4096,2]{2,1,0} compare(%reshape.15107, %broadcast.5421), direction=LT
  %add.3516 = s32[1,4096,2]{2,1,0} add(%reshape.15107, %broadcast.5422)
  %select.1208 = s32[1,4096,2]{2,1,0} select(%compare.2041, %add.3516, %reshape.15107)
  %reshape.15109 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1208)
  %concatenate.212 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1935, %reshape.15109), dimensions={3}
  %subtract.354 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.212, %broadcast.5433)
  %scatter.440 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.354, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_420.12575
  %gather.36 = u32[1,4096,2]{2,1,0} gather(%scatter.440, %subtract.354), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2042 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.36), direction=EQ
  %get-tuple-element.801 = bf16[4096,2]{1,0} get-tuple-element(%sort.172), index=0
  %slice.413 = bf16[4096,2]{1,0} slice(%get-tuple-element.801), slice={[0:4096], [0:2]}
  %all-gather.245 = bf16[32768,2]{1,0} all-gather(%slice.413), channel_id=528, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1036 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.245, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1497 = f32[4096,2]{1,0} convert(%dynamic-slice.1036)
  %reshape.15128 = f32[1,4096,2]{2,1,0} reshape(%convert.1497)
  %reduce.520 = f32[4096]{0} reduce(%convert.1497, %constant.4073), dimensions={1}, to_apply=%region_418.12525
  %reshape.15129 = f32[1,4096]{1,0} reshape(%reduce.520)
  %broadcast.7446 = f32[1,4096,2]{2,1,0} broadcast(%reshape.15129), dimensions={0,1}
  %subtract.353 = f32[1,4096,2]{2,1,0} subtract(%reshape.15128, %broadcast.7446)
  %exponential.195 = f32[1,4096,2]{2,1,0} exponential(%subtract.353)
  %reduce.521 = f32[1,4096]{1,0} reduce(%exponential.195, %constant.3956), dimensions={2}, to_apply=%region_419.12537
  %broadcast.7447 = f32[1,4096,2]{2,1,0} broadcast(%reduce.521), dimensions={0,1}
  %divide.704 = f32[1,4096,2]{2,1,0} divide(%exponential.195, %broadcast.7447)
  %convert.1498 = bf16[1,4096,2]{2,1,0} convert(%divide.704)
  %select.1209 = bf16[1,4096,2]{2,1,0} select(%compare.2042, %convert.1498, %broadcast.5432)
  %scatter.441 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.354, %select.1209), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_421.12584
  %broadcast.7449 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.15107), dimensions={0,1,2}
  %iota.1945 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2044 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7449, %iota.1945), direction=EQ
  %convert.1499 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2044)
  %reshape.15139 = s32[1,8192,8]{2,1,0} reshape(%convert.1499)
  %copy.3014 = s32[1,8192,8]{2,1,0} copy(%reshape.15139)
  %reduce-window.299 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3014, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.1
  %reshape.15141 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.299)
  %copy.3015 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.15141)
  %compare.2045 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3015, %broadcast.5435), direction=LE
  %select.1210 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2045, %convert.1499, %broadcast.5436)
  %reduce.522 = s32[1,4096,8]{2,1,0} reduce(%select.1210, %constant.3783), dimensions={2}, to_apply=%region_422.12598
  %convert.1500 = bf16[1,4096,8]{2,1,0} convert(%reduce.522)
  %multiply.3376 = bf16[1,4096,8]{2,1,0} multiply(%scatter.441, %convert.1500)
  %broadcast.7451 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3376), dimensions={0,1,2}
  %multiply.3377 = s32[1,8192,8]{2,1,0} multiply(%copy.3014, %reduce-window.299)
  %reshape.15142 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3377)
  %reduce.523 = s32[1,4096,8]{2,1,0} reduce(%reshape.15142, %constant.3783), dimensions={2}, to_apply=%region_423.12607
  %multiply.3378 = s32[1,4096,8]{2,1,0} multiply(%reduce.523, %reduce.522)
  %broadcast.7452 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3378), dimensions={0,1,2}
  %iota.1946 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2046 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7452, %iota.1946), direction=EQ
  %convert.1501 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2046)
  %convert.1502 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1501)
  %multiply.3379 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7451, %convert.1502)
  %slice.415 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3379), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2047 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.415, %broadcast.5439), direction=NE
  %copy.3016 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2047)
  %convert.1503 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3016)
  %dot.530 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1503, %copy.3012), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.15145 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.530)
  %all-to-all.72 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15145), channel_id=536, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.110 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.72), dimensions={1,0,2,3,4}
  %reshape.15146 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.110)
  %transpose.111 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.15146), dimensions={1,0,2,3}
  %copy.3017 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.111)
  %get-tuple-element.807 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.2), index=1
  %copy.3018 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.807)
  %dot.531 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3017, %copy.3018), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3019 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.531)
  %negate.199 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3019)
  %exponential.196 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.199)
  %add.3521 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.196, %broadcast.5440)
  %divide.705 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3521)
  %multiply.3383 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3019, %divide.705)
  %copy.3020 = bf16[1,4096,4096]{2,1,0} copy(%copy.3002)
  %copy.3021 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.415)
  %dot.532 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3020, %copy.3021), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.15149 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.532)
  %all-to-all.73 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.15149), channel_id=537, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.112 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.73), dimensions={2,0,1,3,4}
  %reshape.15150 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.112)
  %transpose.113 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.15150), dimensions={2,0,3,1}
  %copy.3022 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.113)
  %get-tuple-element.808 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.2), index=3
  %copy.3023 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.808)
  %dot.533 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3022, %copy.3023), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.3386 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3383, %dot.533)
  %copy.3024 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.3386)
  %get-tuple-element.809 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.2), index=2
  %copy.3025 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.809)
  %dot.534 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3024, %copy.3025), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.535 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3017, %copy.3025), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3026 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.535)
  %multiply.3387 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.533, %copy.3026)
  %multiply.3388 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3387, %divide.705)
  %multiply.3389 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3019, %multiply.3387)
  %subtract.355 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.705)
  %multiply.3390 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.705, %subtract.355)
  %multiply.3391 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3389, %multiply.3390)
  %add.3522 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.3388, %multiply.3391)
  %copy.3027 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.3522)
  %dot.536 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3027, %copy.3018), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.3523 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.534, %dot.536)
  %copy.3028 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.3523)
  %transpose.114 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3028), dimensions={1,0,2,3}
  %reshape.15153 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.114)
  %all-to-all.74 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15153), channel_id=538, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.115 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.74), dimensions={1,0,2,3,4}
  %reshape.15154 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.115)
  %dot.537 = bf16[1,4096,4096]{2,1,0} dot(%convert.1503, %reshape.15154), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.15158 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1026)
  %compare.2049 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.212, %broadcast.7265), direction=GE
  %compare.2050 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.212, %broadcast.7267), direction=LE
  %and.249 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2049, %compare.2050)
  %reduce.524 = pred[1,4096,2]{2,1,0} reduce(%and.249, %constant.4025), dimensions={3}, to_apply=%region_426.12692
  %multiply.3395 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3383, %copy.3026)
  %dot.538 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3395, %copy.3023), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3029 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.538)
  %reshape.15160 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3029)
  %all-to-all.75 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15160), channel_id=539, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.116 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.75), dimensions={1,0,2,3,4}
  %reshape.15161 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.116)
  %dot.539 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3020, %reshape.15161), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3030 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.539)
  %pad.2 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3030, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.3400 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.2, %convert.1502)
  %reduce.525 = bf16[1,4096,8]{2,1,0} reduce(%multiply.3400, %constant.3795), dimensions={3}, to_apply=%region_424.12674
  %multiply.3401 = bf16[1,4096,8]{2,1,0} multiply(%reduce.525, %convert.1500)
  %gather.37 = bf16[1,4096,2]{2,1,0} gather(%multiply.3401, %subtract.354), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1211 = bf16[1,4096,2]{2,1,0} select(%reduce.524, %gather.37, %broadcast.5432)
  %select.1212 = bf16[1,4096,2]{2,1,0} select(%compare.2042, %select.1211, %broadcast.5432)
  %convert.1505 = f32[1,4096,2]{2,1,0} convert(%select.1212)
  %divide.706 = f32[1,4096,2]{2,1,0} divide(%convert.1505, %broadcast.7447)
  %multiply.3403 = f32[1,4096]{1,0} multiply(%reduce.521, %reduce.521)
  %divide.707 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.3403)
  %broadcast.7458 = f32[1,4096,2]{2,1,0} broadcast(%divide.707), dimensions={0,1}
  %multiply.3404 = f32[1,4096,2]{2,1,0} multiply(%convert.1505, %broadcast.7458)
  %multiply.3405 = f32[1,4096,2]{2,1,0} multiply(%multiply.3404, %exponential.195)
  %reduce.526 = f32[1,4096]{1,0} reduce(%multiply.3405, %constant.3956), dimensions={2}, to_apply=%region_427.12706
  %negate.200 = f32[1,4096]{1,0} negate(%reduce.526)
  %broadcast.7459 = f32[1,4096,2]{2,1,0} broadcast(%negate.200), dimensions={0,1}
  %add.3524 = f32[1,4096,2]{2,1,0} add(%divide.706, %broadcast.7459)
  %multiply.3407 = f32[1,4096,2]{2,1,0} multiply(%add.3524, %exponential.195)
  %convert.1506 = bf16[1,4096,2]{2,1,0} convert(%multiply.3407)
  %scatter.442 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.15158, %convert.1506), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_429.12726
  %copy.3031 = bf16[1,4096,8]{2,1,0} copy(%scatter.442)
  %dot.540 = bf16[1,4096,4096]{2,1,0} dot(%copy.3031, %all-gather.244), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3525 = bf16[1,4096,4096]{1,2,0} add(%dot.537, %dot.540)
  %copy.3032 = bf16[1,4096,4096]{2,1,0} copy(%add.3525)
  %multiply.3408 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3032, %broadcast.7439)
  %convert.1507 = f32[1,4096,4096]{2,1,0} convert(%multiply.3408)
  %multiply.3409 = f32[1,4096,4096]{2,1,0} multiply(%convert.1507, %broadcast.7438)
  %multiply.3410 = f32[1,4096,4096]{2,1,0} multiply(%convert.1493, %convert.1507)
  %reduce.527 = f32[1,4096]{1,0} reduce(%multiply.3410, %constant.3956), dimensions={2}, to_apply=%region_432.12755
  %reshape.15176 = f32[1,4096,1]{2,1,0} reshape(%reduce.527)
  %divide.708 = f32[1,4096,1]{2,1,0} divide(%rsqrt.134, %reshape.15101)
  %multiply.3412 = f32[1,4096,1]{2,1,0} multiply(%divide.708, %broadcast.7210)
  %multiply.3413 = f32[1,4096,1]{2,1,0} multiply(%reshape.15176, %multiply.3412)
  %multiply.3414 = f32[1,4096,1]{2,1,0} multiply(%multiply.3413, %broadcast.7211)
  %reshape.15177 = f32[1,4096]{1,0} reshape(%multiply.3414)
  %broadcast.7463 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15177), dimensions={0,1}
  %multiply.3415 = f32[1,4096,4096]{2,1,0} multiply(%convert.1493, %broadcast.7463)
  %add.3526 = f32[1,4096,4096]{2,1,0} add(%multiply.3409, %multiply.3415)
  %convert.1508 = bf16[1,4096,4096]{2,1,0} convert(%add.3526)
  %add.3527 = bf16[1,4096,4096]{2,1,0} add(%copy.3002, %convert.1508)
  %get-tuple-element.810 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.132), index=1
  %get-tuple-element.811 = u32[2,4]{1,0} get-tuple-element(%custom-call.132), index=2
  %copy.3033 = bf16[1,4096,4096]{2,1,0} copy(%add.3527)
  %dot.541 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3033, %all-gather.243), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3034 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.541)
  %custom-call.134 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3006, %copy.3008, %copy.3009, %constant.3999, %get-tuple-element.810, /*index=5*/%get-tuple-element.811, %get-tuple-element.795, %copy.3034, %scatter.434, %scatter.439, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.818 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.134), index=2
  %copy.3035 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.818)
  %dot.542 = bf16[1,4096,4096]{2,1,0} dot(%copy.3035, %all-gather.242), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.819 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.134), index=1
  %copy.3036 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.819)
  %slice.416 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3036), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3417 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.416, %broadcast.7421)
  %slice.417 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3036), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3419 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.417, %broadcast.7419)
  %add.3540 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3417, %multiply.3419)
  %multiply.3420 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.416, %broadcast.7419)
  %negate.201 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.417)
  %multiply.3421 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.201, %broadcast.7421)
  %add.3541 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3420, %multiply.3421)
  %concatenate.217 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.3540, %add.3541), dimensions={3}
  %dot.543 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.217, %all-gather.241), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3542 = bf16[1,4096,4096]{2,1,0} add(%dot.542, %dot.543)
  %copy.3037 = bf16[1,4096,4096]{2,1,0} copy(%add.3542)
  %get-tuple-element.820 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.134), index=0
  %copy.3038 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.820)
  %slice.418 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3038), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3423 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.418, %broadcast.7410)
  %slice.419 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3038), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3425 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.419, %broadcast.7407)
  %add.3543 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3423, %multiply.3425)
  %multiply.3426 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.418, %broadcast.7407)
  %negate.202 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.419)
  %multiply.3427 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.202, %broadcast.7410)
  %add.3545 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3426, %multiply.3427)
  %concatenate.218 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.3543, %add.3545), dimensions={3}
  %dot.544 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.218, %all-gather.240), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3039 = bf16[1,4096,4096]{2,1,0} copy(%dot.544)
  %add.3546 = bf16[1,4096,4096]{2,1,0} add(%copy.3037, %copy.3039)
  %copy.3040 = bf16[1,4096,4096]{2,1,0} copy(%add.3546)
  %multiply.3428 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3040, %broadcast.7402)
  %convert.1511 = f32[1,4096,4096]{2,1,0} convert(%multiply.3428)
  %multiply.3429 = f32[1,4096,4096]{2,1,0} multiply(%convert.1511, %broadcast.7401)
  %multiply.3430 = f32[1,4096,4096]{2,1,0} multiply(%convert.1477, %convert.1511)
  %reduce.528 = f32[1,4096]{1,0} reduce(%multiply.3430, %constant.3956), dimensions={2}, to_apply=%region_436.12866
  %reshape.15223 = f32[1,4096,1]{2,1,0} reshape(%reduce.528)
  %divide.711 = f32[1,4096,1]{2,1,0} divide(%rsqrt.133, %reshape.15049)
  %multiply.3431 = f32[1,4096,1]{2,1,0} multiply(%divide.711, %broadcast.7210)
  %multiply.3432 = f32[1,4096,1]{2,1,0} multiply(%reshape.15223, %multiply.3431)
  %multiply.3434 = f32[1,4096,1]{2,1,0} multiply(%multiply.3432, %broadcast.7211)
  %reshape.15224 = f32[1,4096]{1,0} reshape(%multiply.3434)
  %broadcast.7484 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15224), dimensions={0,1}
  %multiply.3435 = f32[1,4096,4096]{2,1,0} multiply(%convert.1477, %broadcast.7484)
  %add.3547 = f32[1,4096,4096]{2,1,0} add(%multiply.3429, %multiply.3435)
  %convert.1512 = bf16[1,4096,4096]{2,1,0} convert(%add.3547)
  %add.3548 = bf16[1,4096,4096]{2,1,0} add(%add.3527, %convert.1512)
  %copy.3041 = bf16[1,4096,4096]{2,1,0} copy(%add.3548)
  %tuple.236 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.293, %param.294, %param.295, %param.296, %param.292, /*index=5*/%param.287, %param.289, %param.291, %param.288, %param.290, /*index=10*/%copy.2822, %param.10, %param.7, %copy.3041)
  %opt-barrier.3 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.236)
  %get-tuple-element.821 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.3), index=13
  %copy.3042 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.821)
  %iota.1948 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.822 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.3), index=10
  %copy.3043 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.822)
  %convert.1513 = f32[1,4096,4096]{2,1,0} convert(%copy.3043)
  %multiply.3438 = f32[1,4096,4096]{2,1,0} multiply(%convert.1513, %convert.1513)
  %reduce.529 = f32[1,4096]{1,0} reduce(%multiply.3438, %constant.3956), dimensions={2}, to_apply=%region_438.12909
  %multiply.3439 = f32[1,4096]{1,0} multiply(%reduce.529, %broadcast.5380)
  %add.3550 = f32[1,4096]{1,0} add(%multiply.3439, %broadcast.5381)
  %reshape.15227 = f32[1,4096,1]{2,1,0} reshape(%add.3550)
  %rsqrt.135 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.15227)
  %reshape.15229 = f32[1,4096]{1,0} reshape(%rsqrt.135)
  %broadcast.7488 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15229), dimensions={0,1}
  %multiply.3440 = f32[1,4096,4096]{2,1,0} multiply(%convert.1513, %broadcast.7488)
  %convert.1514 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3440)
  %get-tuple-element.823 = bf16[4096]{0} get-tuple-element(%opt-barrier.3), index=5
  %broadcast.7490 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.823), dimensions={2}
  %multiply.3441 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1514, %broadcast.7490)
  %copy.3044 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3441)
  %copy.3045 = bf16[1,4096,4096]{2,1,0} copy(%copy.3044)
  %get-tuple-element.824 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.3), index=8
  %all-gather.247 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.824), channel_id=542, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.545 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3045, %all-gather.247), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.420 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.545), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.825 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.3), index=12
  %convert.1515 = f32[1,4096]{1,0} convert(%get-tuple-element.825)
  %broadcast.7492 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1515), dimensions={0,1}
  %divide.712 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.7492, %broadcast.5388)
  %cosine.71 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.712)
  %convert.1517 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.71)
  %reshape.15231 = bf16[1,4096,64]{2,1,0} reshape(%convert.1517)
  %broadcast.7495 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15231), dimensions={0,1,3}
  %multiply.3447 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.420, %broadcast.7495)
  %slice.421 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.545), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.70 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.712)
  %convert.1519 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.70)
  %reshape.15233 = bf16[1,4096,64]{2,1,0} reshape(%convert.1519)
  %broadcast.7496 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15233), dimensions={0,1,3}
  %multiply.3449 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.421, %broadcast.7496)
  %subtract.359 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3447, %multiply.3449)
  %multiply.3450 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.421, %broadcast.7495)
  %multiply.3451 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.420, %broadcast.7496)
  %add.3551 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3450, %multiply.3451)
  %concatenate.219 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.359, %add.3551), dimensions={3}
  %copy.3046 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.219)
  %get-tuple-element.826 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.3), index=6
  %all-gather.248 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.826), channel_id=543, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.546 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3045, %all-gather.248), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.422 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.546), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.7504 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15231), dimensions={0,1,3}
  %multiply.3455 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.422, %broadcast.7504)
  %slice.423 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.546), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.7505 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15233), dimensions={0,1,3}
  %multiply.3457 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.423, %broadcast.7505)
  %subtract.360 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3455, %multiply.3457)
  %multiply.3458 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.423, %broadcast.7504)
  %multiply.3459 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.422, %broadcast.7505)
  %add.3552 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3458, %multiply.3459)
  %concatenate.220 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.360, %add.3552), dimensions={3}
  %copy.3048 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.220)
  %get-tuple-element.827 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.3), index=9
  %all-gather.249 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.827), channel_id=544, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.547 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3045, %all-gather.249), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3049 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.547)
  %get-tuple-element.828 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.3), index=11
  %broadcast.7508 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.828), dimensions={0,1}
  %broadcast.7509 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.828), dimensions={0,2}
  %compare.2079 = pred[1,4096,4096]{2,1,0} compare(%broadcast.7508, %broadcast.7509), direction=EQ
  %and.254 = pred[1,4096,4096]{2,1,0} and(%compare.2079, %broadcast.5406)
  %select.1233 = f32[1,4096,4096]{2,1,0} select(%and.254, %broadcast.5407, %broadcast.5408)
  %compare.2081 = pred[1,4096,4096]{2,1,0} compare(%select.1233, %broadcast.5407), direction=NE
  %not.99 = pred[1,4096,4096]{2,1,0} not(%compare.2081)
  %convert.1524 = s32[1,4096,4096]{2,1,0} convert(%not.99)
  %reduce.530 = s32[1,4096]{1,0} reduce(%convert.1524, %constant.3783), dimensions={1}, to_apply=%region_439.13043
  %reshape.15243 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.530)
  %slice.424 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.15243), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.15247 = s32[1,1]{1,0} reshape(%slice.424)
  %reshape.15265 = s32[1]{0} reshape(%reshape.15247)
  %compare.2094 = pred[1]{0} compare(%reshape.15265, %constant.4022), direction=LT
  %select.1243 = s32[1]{0} select(%compare.2094, %reshape.11470, %reshape.15265)
  %scatter.457 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1243), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.35
  %reduce.531 = s32[1,4096]{1,0} reduce(%convert.1524, %constant.3783), dimensions={2}, to_apply=%region_440.13051
  %reshape.15248 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.531)
  %reduce.532 = s32[1,1]{1,0} reduce(%reshape.15248, %constant.4014), dimensions={3,2}, to_apply=%region_441.13056
  %reshape.15283 = s32[1]{0} reshape(%reduce.532)
  %compare.2108 = pred[1]{0} compare(%reshape.15283, %constant.4022), direction=LT
  %select.1253 = s32[1]{0} select(%compare.2108, %reshape.11470, %reshape.15283)
  %scatter.462 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1253), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.35
  %custom-call.135 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3046, %copy.3048, %copy.3049, %constant.3999, %scatter.457, /*index=5*/%scatter.462, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.834 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.135), index=0
  %copy.3050 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.834)
  %get-tuple-element.835 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.3), index=7
  %all-gather.250 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.835), channel_id=545, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.548 = bf16[1,4096,4096]{2,1,0} dot(%copy.3050, %all-gather.250), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3051 = bf16[1,4096,4096]{2,1,0} copy(%dot.548)
  %add.3568 = bf16[1,4096,4096]{2,1,0} add(%copy.3043, %copy.3051)
  %convert.1528 = f32[1,4096,4096]{2,1,0} convert(%add.3568)
  %multiply.3461 = f32[1,4096,4096]{2,1,0} multiply(%convert.1528, %convert.1528)
  %reduce.533 = f32[1,4096]{1,0} reduce(%multiply.3461, %constant.3956), dimensions={2}, to_apply=%region_442.13072
  %multiply.3462 = f32[1,4096]{1,0} multiply(%reduce.533, %broadcast.5380)
  %add.3569 = f32[1,4096]{1,0} add(%multiply.3462, %broadcast.5381)
  %reshape.15287 = f32[1,4096,1]{2,1,0} reshape(%add.3569)
  %rsqrt.136 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.15287)
  %reshape.15288 = f32[1,4096]{1,0} reshape(%rsqrt.136)
  %broadcast.7525 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15288), dimensions={0,1}
  %multiply.3463 = f32[1,4096,4096]{2,1,0} multiply(%convert.1528, %broadcast.7525)
  %convert.1529 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3463)
  %get-tuple-element.836 = bf16[4096]{0} get-tuple-element(%opt-barrier.3), index=4
  %broadcast.7526 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.836), dimensions={2}
  %multiply.3464 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1529, %broadcast.7526)
  %copy.3052 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3464)
  %get-tuple-element.837 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.3), index=0
  %all-gather.251 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.837), channel_id=546, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.549 = bf16[1,4096,8]{2,1,0} dot(%copy.3052, %all-gather.251), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3053 = bf16[1,4096,8]{2,1,0} copy(%dot.549)
  %reshape.15290 = bf16[4096,8]{1,0} reshape(%copy.3053)
  %custom-call.136 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.15290), custom_call_target="TopK", called_computations={%compare-greater-than.35.clone}
  %get-tuple-element.838 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.136), index=0
  %get-tuple-element.839 = s32[4096,2]{1,0} get-tuple-element(%custom-call.136), index=1
  %add.3570 = s32[4096,2]{1,0} add(%get-tuple-element.839, %broadcast.5420)
  %sort.177 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.838, %add.3570), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.35
  %get-tuple-element.841 = s32[4096,2]{1,0} get-tuple-element(%sort.177), index=1
  %slice.426 = s32[4096,2]{1,0} slice(%get-tuple-element.841), slice={[0:4096], [0:2]}
  %all-gather.253 = s32[32768,2]{1,0} all-gather(%slice.426), channel_id=548, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1070 = s32[4096,2]{1,0} dynamic-slice(%all-gather.253, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.15293 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1070)
  %compare.2109 = pred[1,4096,2]{2,1,0} compare(%reshape.15293, %broadcast.5421), direction=LT
  %add.3571 = s32[1,4096,2]{2,1,0} add(%reshape.15293, %broadcast.5422)
  %select.1254 = s32[1,4096,2]{2,1,0} select(%compare.2109, %add.3571, %reshape.15293)
  %reshape.15294 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1254)
  %concatenate.221 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1948, %reshape.15294), dimensions={3}
  %subtract.366 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.221, %broadcast.5433)
  %scatter.463 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.366, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_445.13151
  %gather.38 = u32[1,4096,2]{2,1,0} gather(%scatter.463, %subtract.366), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2110 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.38), direction=EQ
  %get-tuple-element.840 = bf16[4096,2]{1,0} get-tuple-element(%sort.177), index=0
  %slice.425 = bf16[4096,2]{1,0} slice(%get-tuple-element.840), slice={[0:4096], [0:2]}
  %all-gather.252 = bf16[32768,2]{1,0} all-gather(%slice.425), channel_id=547, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1080 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.252, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1532 = f32[4096,2]{1,0} convert(%dynamic-slice.1080)
  %reshape.15314 = f32[1,4096,2]{2,1,0} reshape(%convert.1532)
  %reduce.534 = f32[4096]{0} reduce(%convert.1532, %constant.4073), dimensions={1}, to_apply=%region_443.13101
  %reshape.15315 = f32[1,4096]{1,0} reshape(%reduce.534)
  %broadcast.7533 = f32[1,4096,2]{2,1,0} broadcast(%reshape.15315), dimensions={0,1}
  %subtract.365 = f32[1,4096,2]{2,1,0} subtract(%reshape.15314, %broadcast.7533)
  %exponential.197 = f32[1,4096,2]{2,1,0} exponential(%subtract.365)
  %reduce.535 = f32[1,4096]{1,0} reduce(%exponential.197, %constant.3956), dimensions={2}, to_apply=%region_444.13113
  %broadcast.7534 = f32[1,4096,2]{2,1,0} broadcast(%reduce.535), dimensions={0,1}
  %divide.716 = f32[1,4096,2]{2,1,0} divide(%exponential.197, %broadcast.7534)
  %convert.1534 = bf16[1,4096,2]{2,1,0} convert(%divide.716)
  %select.1255 = bf16[1,4096,2]{2,1,0} select(%compare.2110, %convert.1534, %broadcast.5432)
  %scatter.464 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.366, %select.1255), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_446.13160
  %broadcast.7536 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.15293), dimensions={0,1,2}
  %iota.1956 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2111 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7536, %iota.1956), direction=EQ
  %convert.1535 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2111)
  %reshape.15328 = s32[1,8192,8]{2,1,0} reshape(%convert.1535)
  %copy.3054 = s32[1,8192,8]{2,1,0} copy(%reshape.15328)
  %reduce-window.304 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3054, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.2
  %reshape.15331 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.304)
  %copy.3055 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.15331)
  %compare.2112 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3055, %broadcast.5435), direction=LE
  %select.1256 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2112, %convert.1535, %broadcast.5436)
  %reduce.536 = s32[1,4096,8]{2,1,0} reduce(%select.1256, %constant.3783), dimensions={2}, to_apply=%region_447.13174
  %convert.1536 = bf16[1,4096,8]{2,1,0} convert(%reduce.536)
  %multiply.3470 = bf16[1,4096,8]{2,1,0} multiply(%scatter.464, %convert.1536)
  %broadcast.7538 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3470), dimensions={0,1,2}
  %multiply.3471 = s32[1,8192,8]{2,1,0} multiply(%copy.3054, %reduce-window.304)
  %reshape.15332 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3471)
  %reduce.537 = s32[1,4096,8]{2,1,0} reduce(%reshape.15332, %constant.3783), dimensions={2}, to_apply=%region_448.13183
  %multiply.3472 = s32[1,4096,8]{2,1,0} multiply(%reduce.537, %reduce.536)
  %broadcast.7539 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3472), dimensions={0,1,2}
  %iota.1957 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2113 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7539, %iota.1957), direction=EQ
  %convert.1537 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2113)
  %convert.1538 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1537)
  %multiply.3473 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7538, %convert.1538)
  %slice.427 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3473), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2114 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.427, %broadcast.5439), direction=NE
  %copy.3056 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2114)
  %convert.1539 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3056)
  %dot.550 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1539, %copy.3052), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.15336 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.550)
  %all-to-all.76 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15336), channel_id=555, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.117 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.76), dimensions={1,0,2,3,4}
  %reshape.15338 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.117)
  %transpose.118 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.15338), dimensions={1,0,2,3}
  %copy.3057 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.118)
  %get-tuple-element.846 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.3), index=1
  %copy.3058 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.846)
  %dot.551 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3057, %copy.3058), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3059 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.551)
  %negate.203 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3059)
  %exponential.198 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.203)
  %add.3576 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.198, %broadcast.5440)
  %divide.717 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3576)
  %multiply.3477 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3059, %divide.717)
  %copy.3060 = bf16[1,4096,4096]{2,1,0} copy(%copy.3042)
  %copy.3061 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.427)
  %dot.552 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3060, %copy.3061), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.15341 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.552)
  %all-to-all.77 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.15341), channel_id=556, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.119 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.77), dimensions={2,0,1,3,4}
  %reshape.15342 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.119)
  %transpose.120 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.15342), dimensions={2,0,3,1}
  %copy.3062 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.120)
  %get-tuple-element.847 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.3), index=3
  %copy.3063 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.847)
  %dot.553 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3062, %copy.3063), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.3480 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3477, %dot.553)
  %copy.3064 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.3480)
  %get-tuple-element.848 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.3), index=2
  %copy.3065 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.848)
  %dot.554 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3064, %copy.3065), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.555 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3057, %copy.3065), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3066 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.555)
  %multiply.3481 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.553, %copy.3066)
  %multiply.3482 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3481, %divide.717)
  %multiply.3483 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3059, %multiply.3481)
  %subtract.367 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.717)
  %multiply.3484 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.717, %subtract.367)
  %multiply.3485 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3483, %multiply.3484)
  %add.3577 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.3482, %multiply.3485)
  %copy.3067 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.3577)
  %dot.556 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3067, %copy.3058), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.3579 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.554, %dot.556)
  %copy.3068 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.3579)
  %transpose.121 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3068), dimensions={1,0,2,3}
  %reshape.15345 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.121)
  %all-to-all.78 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15345), channel_id=557, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.122 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.78), dimensions={1,0,2,3,4}
  %reshape.15346 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.122)
  %dot.557 = bf16[1,4096,4096]{2,1,0} dot(%convert.1539, %reshape.15346), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.15348 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1070)
  %compare.2116 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.221, %broadcast.7265), direction=GE
  %compare.2117 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.221, %broadcast.7267), direction=LE
  %and.259 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2116, %compare.2117)
  %reduce.538 = pred[1,4096,2]{2,1,0} reduce(%and.259, %constant.4025), dimensions={3}, to_apply=%region_451.13268
  %multiply.3488 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3477, %copy.3066)
  %dot.558 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3488, %copy.3063), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3069 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.558)
  %reshape.15351 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3069)
  %all-to-all.79 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15351), channel_id=558, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.123 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.79), dimensions={1,0,2,3,4}
  %reshape.15352 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.123)
  %dot.559 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3060, %reshape.15352), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3070 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.559)
  %pad.3 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3070, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.3492 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.3, %convert.1538)
  %reduce.539 = bf16[1,4096,8]{2,1,0} reduce(%multiply.3492, %constant.3795), dimensions={3}, to_apply=%region_449.13250
  %multiply.3493 = bf16[1,4096,8]{2,1,0} multiply(%reduce.539, %convert.1536)
  %gather.39 = bf16[1,4096,2]{2,1,0} gather(%multiply.3493, %subtract.366), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1257 = bf16[1,4096,2]{2,1,0} select(%reduce.538, %gather.39, %broadcast.5432)
  %select.1258 = bf16[1,4096,2]{2,1,0} select(%compare.2110, %select.1257, %broadcast.5432)
  %convert.1541 = f32[1,4096,2]{2,1,0} convert(%select.1258)
  %divide.718 = f32[1,4096,2]{2,1,0} divide(%convert.1541, %broadcast.7534)
  %multiply.3494 = f32[1,4096]{1,0} multiply(%reduce.535, %reduce.535)
  %divide.719 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.3494)
  %broadcast.7545 = f32[1,4096,2]{2,1,0} broadcast(%divide.719), dimensions={0,1}
  %multiply.3495 = f32[1,4096,2]{2,1,0} multiply(%convert.1541, %broadcast.7545)
  %multiply.3496 = f32[1,4096,2]{2,1,0} multiply(%multiply.3495, %exponential.197)
  %reduce.540 = f32[1,4096]{1,0} reduce(%multiply.3496, %constant.3956), dimensions={2}, to_apply=%region_452.13282
  %negate.204 = f32[1,4096]{1,0} negate(%reduce.540)
  %broadcast.7546 = f32[1,4096,2]{2,1,0} broadcast(%negate.204), dimensions={0,1}
  %add.3580 = f32[1,4096,2]{2,1,0} add(%divide.718, %broadcast.7546)
  %multiply.3497 = f32[1,4096,2]{2,1,0} multiply(%add.3580, %exponential.197)
  %convert.1542 = bf16[1,4096,2]{2,1,0} convert(%multiply.3497)
  %scatter.465 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.15348, %convert.1542), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_454.13302
  %copy.3071 = bf16[1,4096,8]{2,1,0} copy(%scatter.465)
  %dot.560 = bf16[1,4096,4096]{2,1,0} dot(%copy.3071, %all-gather.251), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3581 = bf16[1,4096,4096]{1,2,0} add(%dot.557, %dot.560)
  %copy.3072 = bf16[1,4096,4096]{2,1,0} copy(%add.3581)
  %multiply.3498 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3072, %broadcast.7526)
  %convert.1543 = f32[1,4096,4096]{2,1,0} convert(%multiply.3498)
  %multiply.3499 = f32[1,4096,4096]{2,1,0} multiply(%convert.1543, %broadcast.7525)
  %multiply.3500 = f32[1,4096,4096]{2,1,0} multiply(%convert.1528, %convert.1543)
  %reduce.541 = f32[1,4096]{1,0} reduce(%multiply.3500, %constant.3956), dimensions={2}, to_apply=%region_457.13331
  %reshape.15365 = f32[1,4096,1]{2,1,0} reshape(%reduce.541)
  %divide.720 = f32[1,4096,1]{2,1,0} divide(%rsqrt.136, %reshape.15287)
  %multiply.3501 = f32[1,4096,1]{2,1,0} multiply(%divide.720, %broadcast.7210)
  %multiply.3502 = f32[1,4096,1]{2,1,0} multiply(%reshape.15365, %multiply.3501)
  %multiply.3504 = f32[1,4096,1]{2,1,0} multiply(%multiply.3502, %broadcast.7211)
  %reshape.15366 = f32[1,4096]{1,0} reshape(%multiply.3504)
  %broadcast.7550 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15366), dimensions={0,1}
  %multiply.3505 = f32[1,4096,4096]{2,1,0} multiply(%convert.1528, %broadcast.7550)
  %add.3582 = f32[1,4096,4096]{2,1,0} add(%multiply.3499, %multiply.3505)
  %convert.1544 = bf16[1,4096,4096]{2,1,0} convert(%add.3582)
  %add.3583 = bf16[1,4096,4096]{2,1,0} add(%copy.3042, %convert.1544)
  %get-tuple-element.849 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.135), index=1
  %get-tuple-element.850 = u32[2,4]{1,0} get-tuple-element(%custom-call.135), index=2
  %copy.3073 = bf16[1,4096,4096]{2,1,0} copy(%add.3583)
  %dot.561 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3073, %all-gather.250), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3074 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.561)
  %custom-call.137 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3046, %copy.3048, %copy.3049, %constant.3999, %get-tuple-element.849, /*index=5*/%get-tuple-element.850, %get-tuple-element.834, %copy.3074, %scatter.457, %scatter.462, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.857 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.137), index=2
  %copy.3075 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.857)
  %dot.562 = bf16[1,4096,4096]{2,1,0} dot(%copy.3075, %all-gather.249), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.858 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.137), index=1
  %copy.3076 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.858)
  %slice.428 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3076), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3507 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.428, %broadcast.7505)
  %slice.429 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3076), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3509 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.429, %broadcast.7504)
  %add.3597 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3507, %multiply.3509)
  %multiply.3510 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.428, %broadcast.7504)
  %negate.205 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.429)
  %multiply.3511 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.205, %broadcast.7505)
  %add.3598 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3510, %multiply.3511)
  %concatenate.226 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.3597, %add.3598), dimensions={3}
  %dot.563 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.226, %all-gather.248), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3599 = bf16[1,4096,4096]{2,1,0} add(%dot.562, %dot.563)
  %copy.3077 = bf16[1,4096,4096]{2,1,0} copy(%add.3599)
  %get-tuple-element.859 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.137), index=0
  %copy.3078 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.859)
  %slice.430 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3078), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3513 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.430, %broadcast.7496)
  %slice.431 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3078), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3515 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.431, %broadcast.7495)
  %add.3600 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3513, %multiply.3515)
  %multiply.3517 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.430, %broadcast.7495)
  %negate.206 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.431)
  %multiply.3518 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.206, %broadcast.7496)
  %add.3601 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3517, %multiply.3518)
  %concatenate.227 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.3600, %add.3601), dimensions={3}
  %dot.564 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.227, %all-gather.247), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3079 = bf16[1,4096,4096]{2,1,0} copy(%dot.564)
  %add.3603 = bf16[1,4096,4096]{2,1,0} add(%copy.3077, %copy.3079)
  %copy.3080 = bf16[1,4096,4096]{2,1,0} copy(%add.3603)
  %multiply.3519 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3080, %broadcast.7490)
  %convert.1547 = f32[1,4096,4096]{2,1,0} convert(%multiply.3519)
  %multiply.3520 = f32[1,4096,4096]{2,1,0} multiply(%convert.1547, %broadcast.7488)
  %multiply.3521 = f32[1,4096,4096]{2,1,0} multiply(%convert.1513, %convert.1547)
  %reduce.542 = f32[1,4096]{1,0} reduce(%multiply.3521, %constant.3956), dimensions={2}, to_apply=%region_461.13442
  %reshape.15417 = f32[1,4096,1]{2,1,0} reshape(%reduce.542)
  %divide.723 = f32[1,4096,1]{2,1,0} divide(%rsqrt.135, %reshape.15227)
  %multiply.3523 = f32[1,4096,1]{2,1,0} multiply(%divide.723, %broadcast.7210)
  %multiply.3524 = f32[1,4096,1]{2,1,0} multiply(%reshape.15417, %multiply.3523)
  %multiply.3525 = f32[1,4096,1]{2,1,0} multiply(%multiply.3524, %broadcast.7211)
  %reshape.15418 = f32[1,4096]{1,0} reshape(%multiply.3525)
  %broadcast.7567 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15418), dimensions={0,1}
  %multiply.3526 = f32[1,4096,4096]{2,1,0} multiply(%convert.1513, %broadcast.7567)
  %add.3604 = f32[1,4096,4096]{2,1,0} add(%multiply.3520, %multiply.3526)
  %convert.1549 = bf16[1,4096,4096]{2,1,0} convert(%add.3604)
  %add.3605 = bf16[1,4096,4096]{2,1,0} add(%add.3583, %convert.1549)
  %copy.3081 = bf16[1,4096,4096]{2,1,0} copy(%add.3605)
  %tuple.242 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.283, %param.284, %param.285, %param.286, %param.282, /*index=5*/%param.277, %param.279, %param.281, %param.278, %param.280, /*index=10*/%copy.2798, %param.10, %param.7, %copy.3081)
  %opt-barrier.4 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.242)
  %get-tuple-element.860 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.4), index=13
  %copy.3082 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.860)
  %iota.1959 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.861 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.4), index=10
  %copy.3083 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.861)
  %convert.1550 = f32[1,4096,4096]{2,1,0} convert(%copy.3083)
  %multiply.3528 = f32[1,4096,4096]{2,1,0} multiply(%convert.1550, %convert.1550)
  %reduce.543 = f32[1,4096]{1,0} reduce(%multiply.3528, %constant.3956), dimensions={2}, to_apply=%region_463.13485
  %multiply.3529 = f32[1,4096]{1,0} multiply(%reduce.543, %broadcast.5380)
  %add.3607 = f32[1,4096]{1,0} add(%multiply.3529, %broadcast.5381)
  %reshape.15422 = f32[1,4096,1]{2,1,0} reshape(%add.3607)
  %rsqrt.137 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.15422)
  %reshape.15423 = f32[1,4096]{1,0} reshape(%rsqrt.137)
  %broadcast.7573 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15423), dimensions={0,1}
  %multiply.3530 = f32[1,4096,4096]{2,1,0} multiply(%convert.1550, %broadcast.7573)
  %convert.1552 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3530)
  %get-tuple-element.862 = bf16[4096]{0} get-tuple-element(%opt-barrier.4), index=5
  %broadcast.7574 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.862), dimensions={2}
  %multiply.3531 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1552, %broadcast.7574)
  %copy.3084 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3531)
  %copy.3085 = bf16[1,4096,4096]{2,1,0} copy(%copy.3084)
  %get-tuple-element.863 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.4), index=8
  %all-gather.254 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.863), channel_id=561, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.565 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3085, %all-gather.254), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.432 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.565), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.864 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.4), index=12
  %convert.1553 = f32[1,4096]{1,0} convert(%get-tuple-element.864)
  %broadcast.7575 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1553), dimensions={0,1}
  %divide.724 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.7575, %broadcast.5388)
  %cosine.73 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.724)
  %convert.1555 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.73)
  %reshape.15425 = bf16[1,4096,64]{2,1,0} reshape(%convert.1555)
  %broadcast.7578 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15425), dimensions={0,1,3}
  %multiply.3535 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.432, %broadcast.7578)
  %slice.433 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.565), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.72 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.724)
  %convert.1556 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.72)
  %reshape.15427 = bf16[1,4096,64]{2,1,0} reshape(%convert.1556)
  %broadcast.7579 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15427), dimensions={0,1,3}
  %multiply.3537 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.433, %broadcast.7579)
  %subtract.371 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3535, %multiply.3537)
  %multiply.3538 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.433, %broadcast.7578)
  %multiply.3539 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.432, %broadcast.7579)
  %add.3608 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3538, %multiply.3539)
  %concatenate.228 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.371, %add.3608), dimensions={3}
  %copy.3086 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.228)
  %get-tuple-element.865 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.4), index=6
  %all-gather.255 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.865), channel_id=562, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.566 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3085, %all-gather.255), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.434 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.566), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.7585 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15425), dimensions={0,1,3}
  %multiply.3543 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.434, %broadcast.7585)
  %slice.435 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.566), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.7586 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15427), dimensions={0,1,3}
  %multiply.3545 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.435, %broadcast.7586)
  %subtract.372 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3543, %multiply.3545)
  %multiply.3546 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.435, %broadcast.7585)
  %multiply.3547 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.434, %broadcast.7586)
  %add.3609 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3546, %multiply.3547)
  %concatenate.229 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.372, %add.3609), dimensions={3}
  %copy.3088 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.229)
  %get-tuple-element.866 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.4), index=9
  %all-gather.256 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.866), channel_id=563, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.567 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3085, %all-gather.256), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3089 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.567)
  %get-tuple-element.867 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.4), index=11
  %broadcast.7589 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.867), dimensions={0,1}
  %broadcast.7590 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.867), dimensions={0,2}
  %compare.2144 = pred[1,4096,4096]{2,1,0} compare(%broadcast.7589, %broadcast.7590), direction=EQ
  %and.264 = pred[1,4096,4096]{2,1,0} and(%compare.2144, %broadcast.5406)
  %select.1279 = f32[1,4096,4096]{2,1,0} select(%and.264, %broadcast.5407, %broadcast.5408)
  %compare.2146 = pred[1,4096,4096]{2,1,0} compare(%select.1279, %broadcast.5407), direction=NE
  %not.100 = pred[1,4096,4096]{2,1,0} not(%compare.2146)
  %convert.1562 = s32[1,4096,4096]{2,1,0} convert(%not.100)
  %reduce.544 = s32[1,4096]{1,0} reduce(%convert.1562, %constant.3783), dimensions={1}, to_apply=%region_464.13619
  %reshape.15438 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.544)
  %slice.436 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.15438), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.15440 = s32[1,1]{1,0} reshape(%slice.436)
  %reshape.15461 = s32[1]{0} reshape(%reshape.15440)
  %compare.2159 = pred[1]{0} compare(%reshape.15461, %constant.4022), direction=LT
  %select.1289 = s32[1]{0} select(%compare.2159, %reshape.11470, %reshape.15461)
  %scatter.480 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1289), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.36
  %reduce.545 = s32[1,4096]{1,0} reduce(%convert.1562, %constant.3783), dimensions={2}, to_apply=%region_465.13627
  %reshape.15442 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.545)
  %reduce.546 = s32[1,1]{1,0} reduce(%reshape.15442, %constant.4014), dimensions={3,2}, to_apply=%region_466.13632
  %reshape.15478 = s32[1]{0} reshape(%reduce.546)
  %compare.2172 = pred[1]{0} compare(%reshape.15478, %constant.4022), direction=LT
  %select.1300 = s32[1]{0} select(%compare.2172, %reshape.11470, %reshape.15478)
  %scatter.485 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1300), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.36
  %custom-call.138 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3086, %copy.3088, %copy.3089, %constant.3999, %scatter.480, /*index=5*/%scatter.485, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.873 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.138), index=0
  %copy.3090 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.873)
  %get-tuple-element.874 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.4), index=7
  %all-gather.257 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.874), channel_id=564, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.568 = bf16[1,4096,4096]{2,1,0} dot(%copy.3090, %all-gather.257), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3091 = bf16[1,4096,4096]{2,1,0} copy(%dot.568)
  %add.3623 = bf16[1,4096,4096]{2,1,0} add(%copy.3083, %copy.3091)
  %convert.1567 = f32[1,4096,4096]{2,1,0} convert(%add.3623)
  %multiply.3549 = f32[1,4096,4096]{2,1,0} multiply(%convert.1567, %convert.1567)
  %reduce.547 = f32[1,4096]{1,0} reduce(%multiply.3549, %constant.3956), dimensions={2}, to_apply=%region_467.13648
  %multiply.3550 = f32[1,4096]{1,0} multiply(%reduce.547, %broadcast.5380)
  %add.3624 = f32[1,4096]{1,0} add(%multiply.3550, %broadcast.5381)
  %reshape.15480 = f32[1,4096,1]{2,1,0} reshape(%add.3624)
  %rsqrt.138 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.15480)
  %reshape.15481 = f32[1,4096]{1,0} reshape(%rsqrt.138)
  %broadcast.7602 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15481), dimensions={0,1}
  %multiply.3551 = f32[1,4096,4096]{2,1,0} multiply(%convert.1567, %broadcast.7602)
  %convert.1568 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3551)
  %get-tuple-element.875 = bf16[4096]{0} get-tuple-element(%opt-barrier.4), index=4
  %broadcast.7603 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.875), dimensions={2}
  %multiply.3552 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1568, %broadcast.7603)
  %copy.3092 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3552)
  %get-tuple-element.876 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.4), index=0
  %all-gather.258 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.876), channel_id=565, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.569 = bf16[1,4096,8]{2,1,0} dot(%copy.3092, %all-gather.258), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3093 = bf16[1,4096,8]{2,1,0} copy(%dot.569)
  %reshape.15482 = bf16[4096,8]{1,0} reshape(%copy.3093)
  %custom-call.139 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.15482), custom_call_target="TopK", called_computations={%compare-greater-than.36.clone}
  %get-tuple-element.877 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.139), index=0
  %get-tuple-element.878 = s32[4096,2]{1,0} get-tuple-element(%custom-call.139), index=1
  %add.3625 = s32[4096,2]{1,0} add(%get-tuple-element.878, %broadcast.5420)
  %sort.182 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.877, %add.3625), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.36
  %get-tuple-element.880 = s32[4096,2]{1,0} get-tuple-element(%sort.182), index=1
  %slice.438 = s32[4096,2]{1,0} slice(%get-tuple-element.880), slice={[0:4096], [0:2]}
  %all-gather.260 = s32[32768,2]{1,0} all-gather(%slice.438), channel_id=567, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1114 = s32[4096,2]{1,0} dynamic-slice(%all-gather.260, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.15486 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1114)
  %compare.2173 = pred[1,4096,2]{2,1,0} compare(%reshape.15486, %broadcast.5421), direction=LT
  %add.3626 = s32[1,4096,2]{2,1,0} add(%reshape.15486, %broadcast.5422)
  %select.1301 = s32[1,4096,2]{2,1,0} select(%compare.2173, %add.3626, %reshape.15486)
  %reshape.15487 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1301)
  %concatenate.230 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1959, %reshape.15487), dimensions={3}
  %subtract.378 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.230, %broadcast.5433)
  %scatter.486 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.378, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_470.13727
  %gather.40 = u32[1,4096,2]{2,1,0} gather(%scatter.486, %subtract.378), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2174 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.40), direction=EQ
  %get-tuple-element.879 = bf16[4096,2]{1,0} get-tuple-element(%sort.182), index=0
  %slice.437 = bf16[4096,2]{1,0} slice(%get-tuple-element.879), slice={[0:4096], [0:2]}
  %all-gather.259 = bf16[32768,2]{1,0} all-gather(%slice.437), channel_id=566, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1124 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.259, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1571 = f32[4096,2]{1,0} convert(%dynamic-slice.1124)
  %reshape.15505 = f32[1,4096,2]{2,1,0} reshape(%convert.1571)
  %reduce.548 = f32[4096]{0} reduce(%convert.1571, %constant.4073), dimensions={1}, to_apply=%region_468.13677
  %reshape.15506 = f32[1,4096]{1,0} reshape(%reduce.548)
  %broadcast.7612 = f32[1,4096,2]{2,1,0} broadcast(%reshape.15506), dimensions={0,1}
  %subtract.377 = f32[1,4096,2]{2,1,0} subtract(%reshape.15505, %broadcast.7612)
  %exponential.199 = f32[1,4096,2]{2,1,0} exponential(%subtract.377)
  %reduce.549 = f32[1,4096]{1,0} reduce(%exponential.199, %constant.3956), dimensions={2}, to_apply=%region_469.13689
  %broadcast.7613 = f32[1,4096,2]{2,1,0} broadcast(%reduce.549), dimensions={0,1}
  %divide.728 = f32[1,4096,2]{2,1,0} divide(%exponential.199, %broadcast.7613)
  %convert.1572 = bf16[1,4096,2]{2,1,0} convert(%divide.728)
  %select.1302 = bf16[1,4096,2]{2,1,0} select(%compare.2174, %convert.1572, %broadcast.5432)
  %scatter.487 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.378, %select.1302), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_471.13736
  %broadcast.7616 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.15486), dimensions={0,1,2}
  %iota.1967 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2175 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7616, %iota.1967), direction=EQ
  %convert.1573 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2175)
  %reshape.15515 = s32[1,8192,8]{2,1,0} reshape(%convert.1573)
  %copy.3094 = s32[1,8192,8]{2,1,0} copy(%reshape.15515)
  %reduce-window.309 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3094, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.3
  %reshape.15517 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.309)
  %copy.3095 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.15517)
  %compare.2176 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3095, %broadcast.5435), direction=LE
  %select.1303 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2176, %convert.1573, %broadcast.5436)
  %reduce.550 = s32[1,4096,8]{2,1,0} reduce(%select.1303, %constant.3783), dimensions={2}, to_apply=%region_472.13750
  %convert.1574 = bf16[1,4096,8]{2,1,0} convert(%reduce.550)
  %multiply.3558 = bf16[1,4096,8]{2,1,0} multiply(%scatter.487, %convert.1574)
  %broadcast.7619 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3558), dimensions={0,1,2}
  %multiply.3559 = s32[1,8192,8]{2,1,0} multiply(%copy.3094, %reduce-window.309)
  %reshape.15518 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3559)
  %reduce.551 = s32[1,4096,8]{2,1,0} reduce(%reshape.15518, %constant.3783), dimensions={2}, to_apply=%region_473.13759
  %multiply.3560 = s32[1,4096,8]{2,1,0} multiply(%reduce.551, %reduce.550)
  %broadcast.7620 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3560), dimensions={0,1,2}
  %iota.1968 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2177 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7620, %iota.1968), direction=EQ
  %convert.1575 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2177)
  %convert.1576 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1575)
  %multiply.3561 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7619, %convert.1576)
  %slice.439 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3561), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2178 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.439, %broadcast.5439), direction=NE
  %copy.3096 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2178)
  %convert.1577 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3096)
  %dot.570 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1577, %copy.3092), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.15521 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.570)
  %all-to-all.80 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15521), channel_id=574, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.124 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.80), dimensions={1,0,2,3,4}
  %reshape.15522 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.124)
  %transpose.125 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.15522), dimensions={1,0,2,3}
  %copy.3097 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.125)
  %get-tuple-element.885 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.4), index=1
  %copy.3098 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.885)
  %dot.571 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3097, %copy.3098), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3099 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.571)
  %negate.207 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3099)
  %exponential.200 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.207)
  %add.3631 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.200, %broadcast.5440)
  %divide.729 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3631)
  %multiply.3565 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3099, %divide.729)
  %copy.3100 = bf16[1,4096,4096]{2,1,0} copy(%copy.3082)
  %copy.3101 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.439)
  %dot.572 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3100, %copy.3101), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.15525 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.572)
  %all-to-all.81 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.15525), channel_id=575, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.126 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.81), dimensions={2,0,1,3,4}
  %reshape.15526 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.126)
  %transpose.127 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.15526), dimensions={2,0,3,1}
  %copy.3102 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.127)
  %get-tuple-element.886 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.4), index=3
  %copy.3103 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.886)
  %dot.573 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3102, %copy.3103), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.3568 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3565, %dot.573)
  %copy.3104 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.3568)
  %get-tuple-element.887 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.4), index=2
  %copy.3105 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.887)
  %dot.574 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3104, %copy.3105), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.575 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3097, %copy.3105), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3106 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.575)
  %multiply.3569 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.573, %copy.3106)
  %multiply.3570 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3569, %divide.729)
  %multiply.3571 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3099, %multiply.3569)
  %subtract.379 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.729)
  %multiply.3572 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.729, %subtract.379)
  %multiply.3573 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3571, %multiply.3572)
  %add.3632 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.3570, %multiply.3573)
  %copy.3107 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.3632)
  %dot.576 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3107, %copy.3098), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.3633 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.574, %dot.576)
  %copy.3108 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.3633)
  %transpose.128 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3108), dimensions={1,0,2,3}
  %reshape.15529 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.128)
  %all-to-all.82 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15529), channel_id=576, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.129 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.82), dimensions={1,0,2,3,4}
  %reshape.15530 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.129)
  %dot.577 = bf16[1,4096,4096]{2,1,0} dot(%convert.1577, %reshape.15530), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.15532 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1114)
  %compare.2180 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.230, %broadcast.7265), direction=GE
  %compare.2181 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.230, %broadcast.7267), direction=LE
  %and.269 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2180, %compare.2181)
  %reduce.552 = pred[1,4096,2]{2,1,0} reduce(%and.269, %constant.4025), dimensions={3}, to_apply=%region_476.13844
  %multiply.3576 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3565, %copy.3106)
  %dot.578 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3576, %copy.3103), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3109 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.578)
  %reshape.15534 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3109)
  %all-to-all.83 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15534), channel_id=577, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.130 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.83), dimensions={1,0,2,3,4}
  %reshape.15535 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.130)
  %dot.579 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3100, %reshape.15535), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3110 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.579)
  %pad.4 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3110, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.3580 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.4, %convert.1576)
  %reduce.553 = bf16[1,4096,8]{2,1,0} reduce(%multiply.3580, %constant.3795), dimensions={3}, to_apply=%region_474.13826
  %multiply.3581 = bf16[1,4096,8]{2,1,0} multiply(%reduce.553, %convert.1574)
  %gather.41 = bf16[1,4096,2]{2,1,0} gather(%multiply.3581, %subtract.378), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1304 = bf16[1,4096,2]{2,1,0} select(%reduce.552, %gather.41, %broadcast.5432)
  %select.1305 = bf16[1,4096,2]{2,1,0} select(%compare.2174, %select.1304, %broadcast.5432)
  %convert.1579 = f32[1,4096,2]{2,1,0} convert(%select.1305)
  %divide.730 = f32[1,4096,2]{2,1,0} divide(%convert.1579, %broadcast.7613)
  %multiply.3582 = f32[1,4096]{1,0} multiply(%reduce.549, %reduce.549)
  %divide.731 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.3582)
  %broadcast.7626 = f32[1,4096,2]{2,1,0} broadcast(%divide.731), dimensions={0,1}
  %multiply.3583 = f32[1,4096,2]{2,1,0} multiply(%convert.1579, %broadcast.7626)
  %multiply.3584 = f32[1,4096,2]{2,1,0} multiply(%multiply.3583, %exponential.199)
  %reduce.554 = f32[1,4096]{1,0} reduce(%multiply.3584, %constant.3956), dimensions={2}, to_apply=%region_477.13858
  %negate.208 = f32[1,4096]{1,0} negate(%reduce.554)
  %broadcast.7627 = f32[1,4096,2]{2,1,0} broadcast(%negate.208), dimensions={0,1}
  %add.3634 = f32[1,4096,2]{2,1,0} add(%divide.730, %broadcast.7627)
  %multiply.3585 = f32[1,4096,2]{2,1,0} multiply(%add.3634, %exponential.199)
  %convert.1580 = bf16[1,4096,2]{2,1,0} convert(%multiply.3585)
  %scatter.488 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.15532, %convert.1580), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_479.13878
  %copy.3111 = bf16[1,4096,8]{2,1,0} copy(%scatter.488)
  %dot.580 = bf16[1,4096,4096]{2,1,0} dot(%copy.3111, %all-gather.258), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3635 = bf16[1,4096,4096]{1,2,0} add(%dot.577, %dot.580)
  %copy.3112 = bf16[1,4096,4096]{2,1,0} copy(%add.3635)
  %multiply.3586 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3112, %broadcast.7603)
  %convert.1581 = f32[1,4096,4096]{2,1,0} convert(%multiply.3586)
  %multiply.3587 = f32[1,4096,4096]{2,1,0} multiply(%convert.1581, %broadcast.7602)
  %multiply.3588 = f32[1,4096,4096]{2,1,0} multiply(%convert.1567, %convert.1581)
  %reduce.555 = f32[1,4096]{1,0} reduce(%multiply.3588, %constant.3956), dimensions={2}, to_apply=%region_482.13907
  %reshape.15548 = f32[1,4096,1]{2,1,0} reshape(%reduce.555)
  %divide.732 = f32[1,4096,1]{2,1,0} divide(%rsqrt.138, %reshape.15480)
  %multiply.3589 = f32[1,4096,1]{2,1,0} multiply(%divide.732, %broadcast.7210)
  %multiply.3590 = f32[1,4096,1]{2,1,0} multiply(%reshape.15548, %multiply.3589)
  %multiply.3591 = f32[1,4096,1]{2,1,0} multiply(%multiply.3590, %broadcast.7211)
  %reshape.15549 = f32[1,4096]{1,0} reshape(%multiply.3591)
  %broadcast.7631 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15549), dimensions={0,1}
  %multiply.3592 = f32[1,4096,4096]{2,1,0} multiply(%convert.1567, %broadcast.7631)
  %add.3636 = f32[1,4096,4096]{2,1,0} add(%multiply.3587, %multiply.3592)
  %convert.1582 = bf16[1,4096,4096]{2,1,0} convert(%add.3636)
  %add.3637 = bf16[1,4096,4096]{2,1,0} add(%copy.3082, %convert.1582)
  %get-tuple-element.888 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.138), index=1
  %get-tuple-element.889 = u32[2,4]{1,0} get-tuple-element(%custom-call.138), index=2
  %copy.3113 = bf16[1,4096,4096]{2,1,0} copy(%add.3637)
  %dot.581 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3113, %all-gather.257), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3114 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.581)
  %custom-call.140 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3086, %copy.3088, %copy.3089, %constant.3999, %get-tuple-element.888, /*index=5*/%get-tuple-element.889, %get-tuple-element.873, %copy.3114, %scatter.480, %scatter.485, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.896 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.140), index=2
  %copy.3115 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.896)
  %dot.582 = bf16[1,4096,4096]{2,1,0} dot(%copy.3115, %all-gather.256), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.897 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.140), index=1
  %copy.3116 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.897)
  %slice.440 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3116), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3594 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.440, %broadcast.7586)
  %slice.441 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3116), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3596 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.441, %broadcast.7585)
  %add.3652 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3594, %multiply.3596)
  %multiply.3597 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.440, %broadcast.7585)
  %negate.209 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.441)
  %multiply.3598 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.209, %broadcast.7586)
  %add.3653 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3597, %multiply.3598)
  %concatenate.235 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.3652, %add.3653), dimensions={3}
  %dot.583 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.235, %all-gather.255), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3654 = bf16[1,4096,4096]{2,1,0} add(%dot.582, %dot.583)
  %copy.3117 = bf16[1,4096,4096]{2,1,0} copy(%add.3654)
  %get-tuple-element.898 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.140), index=0
  %copy.3118 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.898)
  %slice.442 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3118), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3601 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.442, %broadcast.7579)
  %slice.443 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3118), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3603 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.443, %broadcast.7578)
  %add.3656 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3601, %multiply.3603)
  %multiply.3604 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.442, %broadcast.7578)
  %negate.210 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.443)
  %multiply.3605 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.210, %broadcast.7579)
  %add.3657 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3604, %multiply.3605)
  %concatenate.236 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.3656, %add.3657), dimensions={3}
  %dot.584 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.236, %all-gather.254), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3119 = bf16[1,4096,4096]{2,1,0} copy(%dot.584)
  %add.3658 = bf16[1,4096,4096]{2,1,0} add(%copy.3117, %copy.3119)
  %copy.3120 = bf16[1,4096,4096]{2,1,0} copy(%add.3658)
  %multiply.3608 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3120, %broadcast.7574)
  %convert.1585 = f32[1,4096,4096]{2,1,0} convert(%multiply.3608)
  %multiply.3609 = f32[1,4096,4096]{2,1,0} multiply(%convert.1585, %broadcast.7573)
  %multiply.3610 = f32[1,4096,4096]{2,1,0} multiply(%convert.1550, %convert.1585)
  %reduce.556 = f32[1,4096]{1,0} reduce(%multiply.3610, %constant.3956), dimensions={2}, to_apply=%region_486.14018
  %reshape.15598 = f32[1,4096,1]{2,1,0} reshape(%reduce.556)
  %divide.735 = f32[1,4096,1]{2,1,0} divide(%rsqrt.137, %reshape.15422)
  %multiply.3611 = f32[1,4096,1]{2,1,0} multiply(%divide.735, %broadcast.7210)
  %multiply.3612 = f32[1,4096,1]{2,1,0} multiply(%reshape.15598, %multiply.3611)
  %multiply.3613 = f32[1,4096,1]{2,1,0} multiply(%multiply.3612, %broadcast.7211)
  %reshape.15599 = f32[1,4096]{1,0} reshape(%multiply.3613)
  %broadcast.7658 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15599), dimensions={0,1}
  %multiply.3615 = f32[1,4096,4096]{2,1,0} multiply(%convert.1550, %broadcast.7658)
  %add.3659 = f32[1,4096,4096]{2,1,0} add(%multiply.3609, %multiply.3615)
  %convert.1586 = bf16[1,4096,4096]{2,1,0} convert(%add.3659)
  %add.3660 = bf16[1,4096,4096]{2,1,0} add(%add.3637, %convert.1586)
  %copy.3121 = bf16[1,4096,4096]{2,1,0} copy(%add.3660)
  %tuple.248 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.273, %param.274, %param.275, %param.276, %param.272, /*index=5*/%param.267, %param.269, %param.271, %param.268, %param.270, /*index=10*/%copy.2774, %param.10, %param.7, %copy.3121)
  %opt-barrier.5 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.248)
  %get-tuple-element.899 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.5), index=13
  %copy.3122 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.899)
  %iota.1970 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.900 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.5), index=10
  %copy.3123 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.900)
  %convert.1587 = f32[1,4096,4096]{2,1,0} convert(%copy.3123)
  %multiply.3617 = f32[1,4096,4096]{2,1,0} multiply(%convert.1587, %convert.1587)
  %reduce.557 = f32[1,4096]{1,0} reduce(%multiply.3617, %constant.3956), dimensions={2}, to_apply=%region_488.14061
  %multiply.3618 = f32[1,4096]{1,0} multiply(%reduce.557, %broadcast.5380)
  %add.3662 = f32[1,4096]{1,0} add(%multiply.3618, %broadcast.5381)
  %reshape.15601 = f32[1,4096,1]{2,1,0} reshape(%add.3662)
  %rsqrt.139 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.15601)
  %reshape.15602 = f32[1,4096]{1,0} reshape(%rsqrt.139)
  %broadcast.7664 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15602), dimensions={0,1}
  %multiply.3619 = f32[1,4096,4096]{2,1,0} multiply(%convert.1587, %broadcast.7664)
  %convert.1589 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3619)
  %get-tuple-element.901 = bf16[4096]{0} get-tuple-element(%opt-barrier.5), index=5
  %broadcast.7665 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.901), dimensions={2}
  %multiply.3620 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1589, %broadcast.7665)
  %copy.3124 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3620)
  %copy.3125 = bf16[1,4096,4096]{2,1,0} copy(%copy.3124)
  %get-tuple-element.902 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.5), index=8
  %all-gather.261 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.902), channel_id=580, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.585 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3125, %all-gather.261), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.444 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.585), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.903 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.5), index=12
  %convert.1590 = f32[1,4096]{1,0} convert(%get-tuple-element.903)
  %broadcast.7666 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1590), dimensions={0,1}
  %divide.736 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.7666, %broadcast.5388)
  %cosine.75 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.736)
  %convert.1593 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.75)
  %reshape.15604 = bf16[1,4096,64]{2,1,0} reshape(%convert.1593)
  %broadcast.7669 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15604), dimensions={0,1,3}
  %multiply.3625 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.444, %broadcast.7669)
  %slice.445 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.585), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.74 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.736)
  %convert.1594 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.74)
  %reshape.15606 = bf16[1,4096,64]{2,1,0} reshape(%convert.1594)
  %broadcast.7670 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15606), dimensions={0,1,3}
  %multiply.3627 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.445, %broadcast.7670)
  %subtract.383 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3625, %multiply.3627)
  %multiply.3628 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.445, %broadcast.7669)
  %multiply.3629 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.444, %broadcast.7670)
  %add.3663 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3628, %multiply.3629)
  %concatenate.237 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.383, %add.3663), dimensions={3}
  %copy.3126 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.237)
  %get-tuple-element.904 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.5), index=6
  %all-gather.262 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.904), channel_id=581, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.586 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3125, %all-gather.262), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.446 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.586), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.7680 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15604), dimensions={0,1,3}
  %multiply.3633 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.446, %broadcast.7680)
  %slice.447 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.586), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.7681 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15606), dimensions={0,1,3}
  %multiply.3635 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.447, %broadcast.7681)
  %subtract.384 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3633, %multiply.3635)
  %multiply.3636 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.447, %broadcast.7680)
  %multiply.3638 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.446, %broadcast.7681)
  %add.3664 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3636, %multiply.3638)
  %concatenate.238 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.384, %add.3664), dimensions={3}
  %copy.3128 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.238)
  %get-tuple-element.905 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.5), index=9
  %all-gather.263 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.905), channel_id=582, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.587 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3125, %all-gather.263), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3129 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.587)
  %get-tuple-element.906 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.5), index=11
  %broadcast.7684 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.906), dimensions={0,1}
  %broadcast.7685 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.906), dimensions={0,2}
  %compare.2208 = pred[1,4096,4096]{2,1,0} compare(%broadcast.7684, %broadcast.7685), direction=EQ
  %and.274 = pred[1,4096,4096]{2,1,0} and(%compare.2208, %broadcast.5406)
  %select.1326 = f32[1,4096,4096]{2,1,0} select(%and.274, %broadcast.5407, %broadcast.5408)
  %compare.2210 = pred[1,4096,4096]{2,1,0} compare(%select.1326, %broadcast.5407), direction=NE
  %not.101 = pred[1,4096,4096]{2,1,0} not(%compare.2210)
  %convert.1599 = s32[1,4096,4096]{2,1,0} convert(%not.101)
  %reduce.558 = s32[1,4096]{1,0} reduce(%convert.1599, %constant.3783), dimensions={1}, to_apply=%region_489.14195
  %reshape.15615 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.558)
  %slice.448 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.15615), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.15617 = s32[1,1]{1,0} reshape(%slice.448)
  %reshape.15634 = s32[1]{0} reshape(%reshape.15617)
  %compare.2223 = pred[1]{0} compare(%reshape.15634, %constant.4022), direction=LT
  %select.1336 = s32[1]{0} select(%compare.2223, %reshape.11470, %reshape.15634)
  %scatter.503 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1336), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.37
  %reduce.559 = s32[1,4096]{1,0} reduce(%convert.1599, %constant.3783), dimensions={2}, to_apply=%region_490.14203
  %reshape.15618 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.559)
  %reduce.560 = s32[1,1]{1,0} reduce(%reshape.15618, %constant.4014), dimensions={3,2}, to_apply=%region_491.14208
  %reshape.15651 = s32[1]{0} reshape(%reduce.560)
  %compare.2236 = pred[1]{0} compare(%reshape.15651, %constant.4022), direction=LT
  %select.1346 = s32[1]{0} select(%compare.2236, %reshape.11470, %reshape.15651)
  %scatter.508 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1346), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.37
  %custom-call.141 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3126, %copy.3128, %copy.3129, %constant.3999, %scatter.503, /*index=5*/%scatter.508, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.912 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.141), index=0
  %copy.3130 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.912)
  %get-tuple-element.913 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.5), index=7
  %all-gather.264 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.913), channel_id=583, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.588 = bf16[1,4096,4096]{2,1,0} dot(%copy.3130, %all-gather.264), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3131 = bf16[1,4096,4096]{2,1,0} copy(%dot.588)
  %add.3677 = bf16[1,4096,4096]{2,1,0} add(%copy.3123, %copy.3131)
  %convert.1605 = f32[1,4096,4096]{2,1,0} convert(%add.3677)
  %multiply.3640 = f32[1,4096,4096]{2,1,0} multiply(%convert.1605, %convert.1605)
  %reduce.561 = f32[1,4096]{1,0} reduce(%multiply.3640, %constant.3956), dimensions={2}, to_apply=%region_492.14224
  %multiply.3641 = f32[1,4096]{1,0} multiply(%reduce.561, %broadcast.5380)
  %add.3678 = f32[1,4096]{1,0} add(%multiply.3641, %broadcast.5381)
  %reshape.15653 = f32[1,4096,1]{2,1,0} reshape(%add.3678)
  %rsqrt.140 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.15653)
  %reshape.15654 = f32[1,4096]{1,0} reshape(%rsqrt.140)
  %broadcast.7705 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15654), dimensions={0,1}
  %multiply.3642 = f32[1,4096,4096]{2,1,0} multiply(%convert.1605, %broadcast.7705)
  %convert.1606 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3642)
  %get-tuple-element.914 = bf16[4096]{0} get-tuple-element(%opt-barrier.5), index=4
  %broadcast.7706 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.914), dimensions={2}
  %multiply.3643 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1606, %broadcast.7706)
  %copy.3132 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3643)
  %get-tuple-element.915 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.5), index=0
  %all-gather.265 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.915), channel_id=584, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.589 = bf16[1,4096,8]{2,1,0} dot(%copy.3132, %all-gather.265), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3133 = bf16[1,4096,8]{2,1,0} copy(%dot.589)
  %reshape.15655 = bf16[4096,8]{1,0} reshape(%copy.3133)
  %custom-call.142 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.15655), custom_call_target="TopK", called_computations={%compare-greater-than.37.clone}
  %get-tuple-element.916 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.142), index=0
  %get-tuple-element.917 = s32[4096,2]{1,0} get-tuple-element(%custom-call.142), index=1
  %add.3679 = s32[4096,2]{1,0} add(%get-tuple-element.917, %broadcast.5420)
  %sort.187 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.916, %add.3679), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.37
  %get-tuple-element.919 = s32[4096,2]{1,0} get-tuple-element(%sort.187), index=1
  %slice.450 = s32[4096,2]{1,0} slice(%get-tuple-element.919), slice={[0:4096], [0:2]}
  %all-gather.267 = s32[32768,2]{1,0} all-gather(%slice.450), channel_id=586, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1158 = s32[4096,2]{1,0} dynamic-slice(%all-gather.267, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.15658 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1158)
  %compare.2237 = pred[1,4096,2]{2,1,0} compare(%reshape.15658, %broadcast.5421), direction=LT
  %add.3680 = s32[1,4096,2]{2,1,0} add(%reshape.15658, %broadcast.5422)
  %select.1347 = s32[1,4096,2]{2,1,0} select(%compare.2237, %add.3680, %reshape.15658)
  %reshape.15659 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1347)
  %concatenate.239 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1970, %reshape.15659), dimensions={3}
  %subtract.390 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.239, %broadcast.5433)
  %scatter.509 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.390, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_495.14303
  %gather.42 = u32[1,4096,2]{2,1,0} gather(%scatter.509, %subtract.390), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2238 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.42), direction=EQ
  %get-tuple-element.918 = bf16[4096,2]{1,0} get-tuple-element(%sort.187), index=0
  %slice.449 = bf16[4096,2]{1,0} slice(%get-tuple-element.918), slice={[0:4096], [0:2]}
  %all-gather.266 = bf16[32768,2]{1,0} all-gather(%slice.449), channel_id=585, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1168 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.266, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1609 = f32[4096,2]{1,0} convert(%dynamic-slice.1168)
  %reshape.15677 = f32[1,4096,2]{2,1,0} reshape(%convert.1609)
  %reduce.562 = f32[4096]{0} reduce(%convert.1609, %constant.4073), dimensions={1}, to_apply=%region_493.14253
  %reshape.15678 = f32[1,4096]{1,0} reshape(%reduce.562)
  %broadcast.7717 = f32[1,4096,2]{2,1,0} broadcast(%reshape.15678), dimensions={0,1}
  %subtract.389 = f32[1,4096,2]{2,1,0} subtract(%reshape.15677, %broadcast.7717)
  %exponential.201 = f32[1,4096,2]{2,1,0} exponential(%subtract.389)
  %reduce.563 = f32[1,4096]{1,0} reduce(%exponential.201, %constant.3956), dimensions={2}, to_apply=%region_494.14265
  %broadcast.7718 = f32[1,4096,2]{2,1,0} broadcast(%reduce.563), dimensions={0,1}
  %divide.740 = f32[1,4096,2]{2,1,0} divide(%exponential.201, %broadcast.7718)
  %convert.1610 = bf16[1,4096,2]{2,1,0} convert(%divide.740)
  %select.1348 = bf16[1,4096,2]{2,1,0} select(%compare.2238, %convert.1610, %broadcast.5432)
  %scatter.510 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.390, %select.1348), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_496.14312
  %broadcast.7722 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.15658), dimensions={0,1,2}
  %iota.1978 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2239 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7722, %iota.1978), direction=EQ
  %convert.1611 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2239)
  %reshape.15689 = s32[1,8192,8]{2,1,0} reshape(%convert.1611)
  %copy.3134 = s32[1,8192,8]{2,1,0} copy(%reshape.15689)
  %reduce-window.314 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3134, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.4
  %reshape.15691 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.314)
  %copy.3135 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.15691)
  %compare.2240 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3135, %broadcast.5435), direction=LE
  %select.1349 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2240, %convert.1611, %broadcast.5436)
  %reduce.564 = s32[1,4096,8]{2,1,0} reduce(%select.1349, %constant.3783), dimensions={2}, to_apply=%region_497.14326
  %convert.1612 = bf16[1,4096,8]{2,1,0} convert(%reduce.564)
  %multiply.3650 = bf16[1,4096,8]{2,1,0} multiply(%scatter.510, %convert.1612)
  %broadcast.7725 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3650), dimensions={0,1,2}
  %multiply.3651 = s32[1,8192,8]{2,1,0} multiply(%copy.3134, %reduce-window.314)
  %reshape.15693 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3651)
  %reduce.565 = s32[1,4096,8]{2,1,0} reduce(%reshape.15693, %constant.3783), dimensions={2}, to_apply=%region_498.14335
  %multiply.3652 = s32[1,4096,8]{2,1,0} multiply(%reduce.565, %reduce.564)
  %broadcast.7727 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3652), dimensions={0,1,2}
  %iota.1979 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2241 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7727, %iota.1979), direction=EQ
  %convert.1613 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2241)
  %convert.1614 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1613)
  %multiply.3653 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7725, %convert.1614)
  %slice.451 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3653), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2242 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.451, %broadcast.5439), direction=NE
  %copy.3136 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2242)
  %convert.1615 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3136)
  %dot.590 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1615, %copy.3132), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.15697 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.590)
  %all-to-all.84 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15697), channel_id=593, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.131 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.84), dimensions={1,0,2,3,4}
  %reshape.15698 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.131)
  %transpose.132 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.15698), dimensions={1,0,2,3}
  %copy.3137 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.132)
  %get-tuple-element.924 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.5), index=1
  %copy.3138 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.924)
  %dot.591 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3137, %copy.3138), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3139 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.591)
  %negate.211 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3139)
  %exponential.202 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.211)
  %add.3685 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.202, %broadcast.5440)
  %divide.741 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3685)
  %multiply.3657 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3139, %divide.741)
  %copy.3140 = bf16[1,4096,4096]{2,1,0} copy(%copy.3122)
  %copy.3141 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.451)
  %dot.592 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3140, %copy.3141), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.15702 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.592)
  %all-to-all.85 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.15702), channel_id=594, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.133 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.85), dimensions={2,0,1,3,4}
  %reshape.15703 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.133)
  %transpose.134 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.15703), dimensions={2,0,3,1}
  %copy.3142 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.134)
  %get-tuple-element.925 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.5), index=3
  %copy.3143 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.925)
  %dot.593 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3142, %copy.3143), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.3661 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3657, %dot.593)
  %copy.3144 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.3661)
  %get-tuple-element.926 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.5), index=2
  %copy.3145 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.926)
  %dot.594 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3144, %copy.3145), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.595 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3137, %copy.3145), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3146 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.595)
  %multiply.3662 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.593, %copy.3146)
  %multiply.3663 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3662, %divide.741)
  %multiply.3664 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3139, %multiply.3662)
  %subtract.391 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.741)
  %multiply.3665 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.741, %subtract.391)
  %multiply.3667 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3664, %multiply.3665)
  %add.3686 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.3663, %multiply.3667)
  %copy.3147 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.3686)
  %dot.596 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3147, %copy.3138), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.3687 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.594, %dot.596)
  %copy.3148 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.3687)
  %transpose.135 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3148), dimensions={1,0,2,3}
  %reshape.15707 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.135)
  %all-to-all.86 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15707), channel_id=595, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.136 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.86), dimensions={1,0,2,3,4}
  %reshape.15708 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.136)
  %dot.597 = bf16[1,4096,4096]{2,1,0} dot(%convert.1615, %reshape.15708), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.15710 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1158)
  %compare.2245 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.239, %broadcast.7265), direction=GE
  %compare.2246 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.239, %broadcast.7267), direction=LE
  %and.279 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2245, %compare.2246)
  %reduce.566 = pred[1,4096,2]{2,1,0} reduce(%and.279, %constant.4025), dimensions={3}, to_apply=%region_501.14420
  %multiply.3670 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3657, %copy.3146)
  %dot.598 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3670, %copy.3143), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3149 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.598)
  %reshape.15712 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3149)
  %all-to-all.87 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15712), channel_id=596, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.137 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.87), dimensions={1,0,2,3,4}
  %reshape.15713 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.137)
  %dot.599 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3140, %reshape.15713), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3150 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.599)
  %pad.5 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3150, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.3674 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.5, %convert.1614)
  %reduce.567 = bf16[1,4096,8]{2,1,0} reduce(%multiply.3674, %constant.3795), dimensions={3}, to_apply=%region_499.14402
  %multiply.3676 = bf16[1,4096,8]{2,1,0} multiply(%reduce.567, %convert.1612)
  %gather.43 = bf16[1,4096,2]{2,1,0} gather(%multiply.3676, %subtract.390), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1350 = bf16[1,4096,2]{2,1,0} select(%reduce.566, %gather.43, %broadcast.5432)
  %select.1351 = bf16[1,4096,2]{2,1,0} select(%compare.2238, %select.1350, %broadcast.5432)
  %convert.1617 = f32[1,4096,2]{2,1,0} convert(%select.1351)
  %divide.742 = f32[1,4096,2]{2,1,0} divide(%convert.1617, %broadcast.7718)
  %multiply.3677 = f32[1,4096]{1,0} multiply(%reduce.563, %reduce.563)
  %divide.743 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.3677)
  %broadcast.7733 = f32[1,4096,2]{2,1,0} broadcast(%divide.743), dimensions={0,1}
  %multiply.3678 = f32[1,4096,2]{2,1,0} multiply(%convert.1617, %broadcast.7733)
  %multiply.3679 = f32[1,4096,2]{2,1,0} multiply(%multiply.3678, %exponential.201)
  %reduce.568 = f32[1,4096]{1,0} reduce(%multiply.3679, %constant.3956), dimensions={2}, to_apply=%region_502.14434
  %negate.212 = f32[1,4096]{1,0} negate(%reduce.568)
  %broadcast.7734 = f32[1,4096,2]{2,1,0} broadcast(%negate.212), dimensions={0,1}
  %add.3688 = f32[1,4096,2]{2,1,0} add(%divide.742, %broadcast.7734)
  %multiply.3680 = f32[1,4096,2]{2,1,0} multiply(%add.3688, %exponential.201)
  %convert.1618 = bf16[1,4096,2]{2,1,0} convert(%multiply.3680)
  %scatter.511 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.15710, %convert.1618), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_504.14454
  %copy.3151 = bf16[1,4096,8]{2,1,0} copy(%scatter.511)
  %dot.600 = bf16[1,4096,4096]{2,1,0} dot(%copy.3151, %all-gather.265), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3689 = bf16[1,4096,4096]{1,2,0} add(%dot.597, %dot.600)
  %copy.3152 = bf16[1,4096,4096]{2,1,0} copy(%add.3689)
  %multiply.3681 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3152, %broadcast.7706)
  %convert.1619 = f32[1,4096,4096]{2,1,0} convert(%multiply.3681)
  %multiply.3682 = f32[1,4096,4096]{2,1,0} multiply(%convert.1619, %broadcast.7705)
  %multiply.3683 = f32[1,4096,4096]{2,1,0} multiply(%convert.1605, %convert.1619)
  %reduce.569 = f32[1,4096]{1,0} reduce(%multiply.3683, %constant.3956), dimensions={2}, to_apply=%region_507.14483
  %reshape.15726 = f32[1,4096,1]{2,1,0} reshape(%reduce.569)
  %divide.744 = f32[1,4096,1]{2,1,0} divide(%rsqrt.140, %reshape.15653)
  %multiply.3684 = f32[1,4096,1]{2,1,0} multiply(%divide.744, %broadcast.7210)
  %multiply.3685 = f32[1,4096,1]{2,1,0} multiply(%reshape.15726, %multiply.3684)
  %multiply.3686 = f32[1,4096,1]{2,1,0} multiply(%multiply.3685, %broadcast.7211)
  %reshape.15727 = f32[1,4096]{1,0} reshape(%multiply.3686)
  %broadcast.7738 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15727), dimensions={0,1}
  %multiply.3687 = f32[1,4096,4096]{2,1,0} multiply(%convert.1605, %broadcast.7738)
  %add.3690 = f32[1,4096,4096]{2,1,0} add(%multiply.3682, %multiply.3687)
  %convert.1620 = bf16[1,4096,4096]{2,1,0} convert(%add.3690)
  %add.3691 = bf16[1,4096,4096]{2,1,0} add(%copy.3122, %convert.1620)
  %get-tuple-element.927 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.141), index=1
  %get-tuple-element.928 = u32[2,4]{1,0} get-tuple-element(%custom-call.141), index=2
  %copy.3153 = bf16[1,4096,4096]{2,1,0} copy(%add.3691)
  %dot.601 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3153, %all-gather.264), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3154 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.601)
  %custom-call.143 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3126, %copy.3128, %copy.3129, %constant.3999, %get-tuple-element.927, /*index=5*/%get-tuple-element.928, %get-tuple-element.912, %copy.3154, %scatter.503, %scatter.508, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.935 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.143), index=2
  %copy.3155 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.935)
  %dot.602 = bf16[1,4096,4096]{2,1,0} dot(%copy.3155, %all-gather.263), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.936 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.143), index=1
  %copy.3156 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.936)
  %slice.452 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3156), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3689 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.452, %broadcast.7681)
  %slice.453 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3156), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3691 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.453, %broadcast.7680)
  %add.3704 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3689, %multiply.3691)
  %multiply.3692 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.452, %broadcast.7680)
  %negate.213 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.453)
  %multiply.3693 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.213, %broadcast.7681)
  %add.3705 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3692, %multiply.3693)
  %concatenate.244 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.3704, %add.3705), dimensions={3}
  %dot.603 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.244, %all-gather.262), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3706 = bf16[1,4096,4096]{2,1,0} add(%dot.602, %dot.603)
  %copy.3157 = bf16[1,4096,4096]{2,1,0} copy(%add.3706)
  %get-tuple-element.937 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.143), index=0
  %copy.3158 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.937)
  %slice.454 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3158), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3695 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.454, %broadcast.7670)
  %slice.455 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3158), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3698 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.455, %broadcast.7669)
  %add.3707 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3695, %multiply.3698)
  %multiply.3699 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.454, %broadcast.7669)
  %negate.214 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.455)
  %multiply.3700 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.214, %broadcast.7670)
  %add.3708 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3699, %multiply.3700)
  %concatenate.245 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.3707, %add.3708), dimensions={3}
  %dot.604 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.245, %all-gather.261), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3159 = bf16[1,4096,4096]{2,1,0} copy(%dot.604)
  %add.3709 = bf16[1,4096,4096]{2,1,0} add(%copy.3157, %copy.3159)
  %copy.3160 = bf16[1,4096,4096]{2,1,0} copy(%add.3709)
  %multiply.3702 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3160, %broadcast.7665)
  %convert.1623 = f32[1,4096,4096]{2,1,0} convert(%multiply.3702)
  %multiply.3703 = f32[1,4096,4096]{2,1,0} multiply(%convert.1623, %broadcast.7664)
  %multiply.3704 = f32[1,4096,4096]{2,1,0} multiply(%convert.1587, %convert.1623)
  %reduce.570 = f32[1,4096]{1,0} reduce(%multiply.3704, %constant.3956), dimensions={2}, to_apply=%region_511.14594
  %reshape.15775 = f32[1,4096,1]{2,1,0} reshape(%reduce.570)
  %divide.747 = f32[1,4096,1]{2,1,0} divide(%rsqrt.139, %reshape.15601)
  %multiply.3705 = f32[1,4096,1]{2,1,0} multiply(%divide.747, %broadcast.7210)
  %multiply.3707 = f32[1,4096,1]{2,1,0} multiply(%reshape.15775, %multiply.3705)
  %multiply.3708 = f32[1,4096,1]{2,1,0} multiply(%multiply.3707, %broadcast.7211)
  %reshape.15776 = f32[1,4096]{1,0} reshape(%multiply.3708)
  %broadcast.7755 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15776), dimensions={0,1}
  %multiply.3709 = f32[1,4096,4096]{2,1,0} multiply(%convert.1587, %broadcast.7755)
  %add.3710 = f32[1,4096,4096]{2,1,0} add(%multiply.3703, %multiply.3709)
  %convert.1624 = bf16[1,4096,4096]{2,1,0} convert(%add.3710)
  %add.3712 = bf16[1,4096,4096]{2,1,0} add(%add.3691, %convert.1624)
  %copy.3161 = bf16[1,4096,4096]{2,1,0} copy(%add.3712)
  %tuple.253 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.263, %param.264, %param.265, %param.266, %param.262, /*index=5*/%param.257, %param.259, %param.261, %param.258, %param.260, /*index=10*/%copy.2750, %param.10, %param.7, %copy.3161)
  %opt-barrier.6 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.253)
  %get-tuple-element.938 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.6), index=13
  %copy.3162 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.938)
  %iota.1981 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.939 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.6), index=10
  %copy.3163 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.939)
  %convert.1625 = f32[1,4096,4096]{2,1,0} convert(%copy.3163)
  %multiply.3712 = f32[1,4096,4096]{2,1,0} multiply(%convert.1625, %convert.1625)
  %reduce.571 = f32[1,4096]{1,0} reduce(%multiply.3712, %constant.3956), dimensions={2}, to_apply=%region_513.14637
  %multiply.3713 = f32[1,4096]{1,0} multiply(%reduce.571, %broadcast.5380)
  %add.3714 = f32[1,4096]{1,0} add(%multiply.3713, %broadcast.5381)
  %reshape.15778 = f32[1,4096,1]{2,1,0} reshape(%add.3714)
  %rsqrt.141 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.15778)
  %reshape.15779 = f32[1,4096]{1,0} reshape(%rsqrt.141)
  %broadcast.7759 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15779), dimensions={0,1}
  %multiply.3714 = f32[1,4096,4096]{2,1,0} multiply(%convert.1625, %broadcast.7759)
  %convert.1626 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3714)
  %get-tuple-element.940 = bf16[4096]{0} get-tuple-element(%opt-barrier.6), index=5
  %broadcast.7760 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.940), dimensions={2}
  %multiply.3716 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1626, %broadcast.7760)
  %copy.3164 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3716)
  %copy.3165 = bf16[1,4096,4096]{2,1,0} copy(%copy.3164)
  %get-tuple-element.941 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.6), index=8
  %all-gather.268 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.941), channel_id=599, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.605 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3165, %all-gather.268), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.456 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.605), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.942 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.6), index=12
  %convert.1627 = f32[1,4096]{1,0} convert(%get-tuple-element.942)
  %broadcast.7761 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1627), dimensions={0,1}
  %divide.748 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.7761, %broadcast.5388)
  %cosine.77 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.748)
  %convert.1629 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.77)
  %reshape.15781 = bf16[1,4096,64]{2,1,0} reshape(%convert.1629)
  %broadcast.7764 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15781), dimensions={0,1,3}
  %multiply.3720 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.456, %broadcast.7764)
  %slice.457 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.605), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.76 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.748)
  %convert.1630 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.76)
  %reshape.15783 = bf16[1,4096,64]{2,1,0} reshape(%convert.1630)
  %broadcast.7765 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15783), dimensions={0,1,3}
  %multiply.3722 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.457, %broadcast.7765)
  %subtract.395 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3720, %multiply.3722)
  %multiply.3723 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.457, %broadcast.7764)
  %multiply.3724 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.456, %broadcast.7765)
  %add.3715 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3723, %multiply.3724)
  %concatenate.246 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.395, %add.3715), dimensions={3}
  %copy.3166 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.246)
  %get-tuple-element.943 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.6), index=6
  %all-gather.269 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.943), channel_id=600, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.606 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3165, %all-gather.269), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.458 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.606), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.7773 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15781), dimensions={0,1,3}
  %multiply.3728 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.458, %broadcast.7773)
  %slice.459 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.606), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.7774 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15783), dimensions={0,1,3}
  %multiply.3730 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.459, %broadcast.7774)
  %subtract.396 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3728, %multiply.3730)
  %multiply.3731 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.459, %broadcast.7773)
  %multiply.3732 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.458, %broadcast.7774)
  %add.3716 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3731, %multiply.3732)
  %concatenate.247 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.396, %add.3716), dimensions={3}
  %copy.3168 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.247)
  %get-tuple-element.944 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.6), index=9
  %all-gather.270 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.944), channel_id=601, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.607 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3165, %all-gather.270), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3169 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.607)
  %get-tuple-element.945 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.6), index=11
  %broadcast.7779 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.945), dimensions={0,1}
  %broadcast.7780 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.945), dimensions={0,2}
  %compare.2275 = pred[1,4096,4096]{2,1,0} compare(%broadcast.7779, %broadcast.7780), direction=EQ
  %and.284 = pred[1,4096,4096]{2,1,0} and(%compare.2275, %broadcast.5406)
  %select.1372 = f32[1,4096,4096]{2,1,0} select(%and.284, %broadcast.5407, %broadcast.5408)
  %compare.2277 = pred[1,4096,4096]{2,1,0} compare(%select.1372, %broadcast.5407), direction=NE
  %not.102 = pred[1,4096,4096]{2,1,0} not(%compare.2277)
  %convert.1635 = s32[1,4096,4096]{2,1,0} convert(%not.102)
  %reduce.572 = s32[1,4096]{1,0} reduce(%convert.1635, %constant.3783), dimensions={1}, to_apply=%region_514.14771
  %reshape.15793 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.572)
  %slice.460 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.15793), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.15795 = s32[1,1]{1,0} reshape(%slice.460)
  %reshape.15814 = s32[1]{0} reshape(%reshape.15795)
  %compare.2290 = pred[1]{0} compare(%reshape.15814, %constant.4022), direction=LT
  %select.1382 = s32[1]{0} select(%compare.2290, %reshape.11470, %reshape.15814)
  %scatter.526 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1382), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.38
  %reduce.573 = s32[1,4096]{1,0} reduce(%convert.1635, %constant.3783), dimensions={2}, to_apply=%region_515.14779
  %reshape.15796 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.573)
  %reduce.574 = s32[1,1]{1,0} reduce(%reshape.15796, %constant.4014), dimensions={3,2}, to_apply=%region_516.14784
  %reshape.15832 = s32[1]{0} reshape(%reduce.574)
  %compare.2303 = pred[1]{0} compare(%reshape.15832, %constant.4022), direction=LT
  %select.1395 = s32[1]{0} select(%compare.2303, %reshape.11470, %reshape.15832)
  %scatter.531 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1395), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.38
  %custom-call.144 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3166, %copy.3168, %copy.3169, %constant.3999, %scatter.526, /*index=5*/%scatter.531, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.951 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.144), index=0
  %copy.3170 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.951)
  %get-tuple-element.952 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.6), index=7
  %all-gather.271 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.952), channel_id=602, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.608 = bf16[1,4096,4096]{2,1,0} dot(%copy.3170, %all-gather.271), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3171 = bf16[1,4096,4096]{2,1,0} copy(%dot.608)
  %add.3729 = bf16[1,4096,4096]{2,1,0} add(%copy.3163, %copy.3171)
  %convert.1639 = f32[1,4096,4096]{2,1,0} convert(%add.3729)
  %multiply.3734 = f32[1,4096,4096]{2,1,0} multiply(%convert.1639, %convert.1639)
  %reduce.575 = f32[1,4096]{1,0} reduce(%multiply.3734, %constant.3956), dimensions={2}, to_apply=%region_517.14800
  %multiply.3735 = f32[1,4096]{1,0} multiply(%reduce.575, %broadcast.5380)
  %add.3730 = f32[1,4096]{1,0} add(%multiply.3735, %broadcast.5381)
  %reshape.15834 = f32[1,4096,1]{2,1,0} reshape(%add.3730)
  %rsqrt.142 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.15834)
  %reshape.15836 = f32[1,4096]{1,0} reshape(%rsqrt.142)
  %broadcast.7792 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15836), dimensions={0,1}
  %multiply.3736 = f32[1,4096,4096]{2,1,0} multiply(%convert.1639, %broadcast.7792)
  %convert.1640 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3736)
  %get-tuple-element.953 = bf16[4096]{0} get-tuple-element(%opt-barrier.6), index=4
  %broadcast.7794 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.953), dimensions={2}
  %multiply.3738 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1640, %broadcast.7794)
  %copy.3172 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3738)
  %get-tuple-element.954 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.6), index=0
  %all-gather.272 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.954), channel_id=603, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.609 = bf16[1,4096,8]{2,1,0} dot(%copy.3172, %all-gather.272), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3173 = bf16[1,4096,8]{2,1,0} copy(%dot.609)
  %reshape.15837 = bf16[4096,8]{1,0} reshape(%copy.3173)
  %custom-call.145 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.15837), custom_call_target="TopK", called_computations={%compare-greater-than.38.clone}
  %get-tuple-element.955 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.145), index=0
  %get-tuple-element.956 = s32[4096,2]{1,0} get-tuple-element(%custom-call.145), index=1
  %add.3731 = s32[4096,2]{1,0} add(%get-tuple-element.956, %broadcast.5420)
  %sort.192 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.955, %add.3731), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.38
  %get-tuple-element.958 = s32[4096,2]{1,0} get-tuple-element(%sort.192), index=1
  %slice.462 = s32[4096,2]{1,0} slice(%get-tuple-element.958), slice={[0:4096], [0:2]}
  %all-gather.274 = s32[32768,2]{1,0} all-gather(%slice.462), channel_id=605, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1202 = s32[4096,2]{1,0} dynamic-slice(%all-gather.274, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.15841 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1202)
  %compare.2304 = pred[1,4096,2]{2,1,0} compare(%reshape.15841, %broadcast.5421), direction=LT
  %add.3732 = s32[1,4096,2]{2,1,0} add(%reshape.15841, %broadcast.5422)
  %select.1396 = s32[1,4096,2]{2,1,0} select(%compare.2304, %add.3732, %reshape.15841)
  %reshape.15842 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1396)
  %concatenate.248 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1981, %reshape.15842), dimensions={3}
  %subtract.402 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.248, %broadcast.5433)
  %scatter.532 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.402, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_520.14879
  %gather.44 = u32[1,4096,2]{2,1,0} gather(%scatter.532, %subtract.402), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2305 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.44), direction=EQ
  %get-tuple-element.957 = bf16[4096,2]{1,0} get-tuple-element(%sort.192), index=0
  %slice.461 = bf16[4096,2]{1,0} slice(%get-tuple-element.957), slice={[0:4096], [0:2]}
  %all-gather.273 = bf16[32768,2]{1,0} all-gather(%slice.461), channel_id=604, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1212 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.273, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1643 = f32[4096,2]{1,0} convert(%dynamic-slice.1212)
  %reshape.15863 = f32[1,4096,2]{2,1,0} reshape(%convert.1643)
  %reduce.576 = f32[4096]{0} reduce(%convert.1643, %constant.4073), dimensions={1}, to_apply=%region_518.14829
  %reshape.15864 = f32[1,4096]{1,0} reshape(%reduce.576)
  %broadcast.7802 = f32[1,4096,2]{2,1,0} broadcast(%reshape.15864), dimensions={0,1}
  %subtract.401 = f32[1,4096,2]{2,1,0} subtract(%reshape.15863, %broadcast.7802)
  %exponential.203 = f32[1,4096,2]{2,1,0} exponential(%subtract.401)
  %reduce.577 = f32[1,4096]{1,0} reduce(%exponential.203, %constant.3956), dimensions={2}, to_apply=%region_519.14841
  %broadcast.7803 = f32[1,4096,2]{2,1,0} broadcast(%reduce.577), dimensions={0,1}
  %divide.752 = f32[1,4096,2]{2,1,0} divide(%exponential.203, %broadcast.7803)
  %convert.1644 = bf16[1,4096,2]{2,1,0} convert(%divide.752)
  %select.1397 = bf16[1,4096,2]{2,1,0} select(%compare.2305, %convert.1644, %broadcast.5432)
  %scatter.533 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.402, %select.1397), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_521.14888
  %broadcast.7807 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.15841), dimensions={0,1,2}
  %iota.1989 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2306 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7807, %iota.1989), direction=EQ
  %convert.1645 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2306)
  %reshape.15874 = s32[1,8192,8]{2,1,0} reshape(%convert.1645)
  %copy.3174 = s32[1,8192,8]{2,1,0} copy(%reshape.15874)
  %reduce-window.319 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3174, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.5
  %reshape.15877 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.319)
  %copy.3175 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.15877)
  %compare.2307 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3175, %broadcast.5435), direction=LE
  %select.1398 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2307, %convert.1645, %broadcast.5436)
  %reduce.578 = s32[1,4096,8]{2,1,0} reduce(%select.1398, %constant.3783), dimensions={2}, to_apply=%region_522.14902
  %convert.1646 = bf16[1,4096,8]{2,1,0} convert(%reduce.578)
  %multiply.3745 = bf16[1,4096,8]{2,1,0} multiply(%scatter.533, %convert.1646)
  %broadcast.7809 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3745), dimensions={0,1,2}
  %multiply.3747 = s32[1,8192,8]{2,1,0} multiply(%copy.3174, %reduce-window.319)
  %reshape.15878 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3747)
  %reduce.579 = s32[1,4096,8]{2,1,0} reduce(%reshape.15878, %constant.3783), dimensions={2}, to_apply=%region_523.14911
  %multiply.3748 = s32[1,4096,8]{2,1,0} multiply(%reduce.579, %reduce.578)
  %broadcast.7810 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3748), dimensions={0,1,2}
  %iota.1990 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2308 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7810, %iota.1990), direction=EQ
  %convert.1647 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2308)
  %convert.1648 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1647)
  %multiply.3749 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7809, %convert.1648)
  %slice.463 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3749), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2309 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.463, %broadcast.5439), direction=NE
  %copy.3176 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2309)
  %convert.1649 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3176)
  %dot.610 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1649, %copy.3172), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.15882 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.610)
  %all-to-all.88 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15882), channel_id=612, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.138 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.88), dimensions={1,0,2,3,4}
  %reshape.15883 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.138)
  %transpose.139 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.15883), dimensions={1,0,2,3}
  %copy.3177 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.139)
  %get-tuple-element.963 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.6), index=1
  %copy.3178 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.963)
  %dot.611 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3177, %copy.3178), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3179 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.611)
  %negate.215 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3179)
  %exponential.204 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.215)
  %add.3737 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.204, %broadcast.5440)
  %divide.753 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3737)
  %multiply.3754 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3179, %divide.753)
  %copy.3180 = bf16[1,4096,4096]{2,1,0} copy(%copy.3162)
  %copy.3181 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.463)
  %dot.612 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3180, %copy.3181), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.15887 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.612)
  %all-to-all.89 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.15887), channel_id=613, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.140 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.89), dimensions={2,0,1,3,4}
  %reshape.15889 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.140)
  %transpose.141 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.15889), dimensions={2,0,3,1}
  %copy.3182 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.141)
  %get-tuple-element.964 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.6), index=3
  %copy.3183 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.964)
  %dot.613 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3182, %copy.3183), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.3757 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3754, %dot.613)
  %copy.3184 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.3757)
  %get-tuple-element.965 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.6), index=2
  %copy.3185 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.965)
  %dot.614 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3184, %copy.3185), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.615 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3177, %copy.3185), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3186 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.615)
  %multiply.3758 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.613, %copy.3186)
  %multiply.3759 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3758, %divide.753)
  %multiply.3760 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3179, %multiply.3758)
  %subtract.403 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.753)
  %multiply.3761 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.753, %subtract.403)
  %multiply.3762 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3760, %multiply.3761)
  %add.3738 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.3759, %multiply.3762)
  %copy.3187 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.3738)
  %dot.616 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3187, %copy.3178), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.3739 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.614, %dot.616)
  %copy.3188 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.3739)
  %transpose.142 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3188), dimensions={1,0,2,3}
  %reshape.15892 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.142)
  %all-to-all.90 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15892), channel_id=614, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.143 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.90), dimensions={1,0,2,3,4}
  %reshape.15893 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.143)
  %dot.617 = bf16[1,4096,4096]{2,1,0} dot(%convert.1649, %reshape.15893), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.15895 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1202)
  %compare.2311 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.248, %broadcast.7265), direction=GE
  %compare.2312 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.248, %broadcast.7267), direction=LE
  %and.289 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2311, %compare.2312)
  %reduce.580 = pred[1,4096,2]{2,1,0} reduce(%and.289, %constant.4025), dimensions={3}, to_apply=%region_526.14996
  %multiply.3765 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3754, %copy.3186)
  %dot.618 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3765, %copy.3183), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3189 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.618)
  %reshape.15900 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3189)
  %all-to-all.91 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.15900), channel_id=615, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.144 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.91), dimensions={1,0,2,3,4}
  %reshape.15901 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.144)
  %dot.619 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3180, %reshape.15901), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3190 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.619)
  %pad.6 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3190, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.3769 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.6, %convert.1648)
  %reduce.581 = bf16[1,4096,8]{2,1,0} reduce(%multiply.3769, %constant.3795), dimensions={3}, to_apply=%region_524.14978
  %multiply.3770 = bf16[1,4096,8]{2,1,0} multiply(%reduce.581, %convert.1646)
  %gather.45 = bf16[1,4096,2]{2,1,0} gather(%multiply.3770, %subtract.402), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1399 = bf16[1,4096,2]{2,1,0} select(%reduce.580, %gather.45, %broadcast.5432)
  %select.1400 = bf16[1,4096,2]{2,1,0} select(%compare.2305, %select.1399, %broadcast.5432)
  %convert.1652 = f32[1,4096,2]{2,1,0} convert(%select.1400)
  %divide.754 = f32[1,4096,2]{2,1,0} divide(%convert.1652, %broadcast.7803)
  %multiply.3771 = f32[1,4096]{1,0} multiply(%reduce.577, %reduce.577)
  %divide.755 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.3771)
  %broadcast.7816 = f32[1,4096,2]{2,1,0} broadcast(%divide.755), dimensions={0,1}
  %multiply.3772 = f32[1,4096,2]{2,1,0} multiply(%convert.1652, %broadcast.7816)
  %multiply.3773 = f32[1,4096,2]{2,1,0} multiply(%multiply.3772, %exponential.203)
  %reduce.582 = f32[1,4096]{1,0} reduce(%multiply.3773, %constant.3956), dimensions={2}, to_apply=%region_527.15010
  %negate.216 = f32[1,4096]{1,0} negate(%reduce.582)
  %broadcast.7817 = f32[1,4096,2]{2,1,0} broadcast(%negate.216), dimensions={0,1}
  %add.3740 = f32[1,4096,2]{2,1,0} add(%divide.754, %broadcast.7817)
  %multiply.3774 = f32[1,4096,2]{2,1,0} multiply(%add.3740, %exponential.203)
  %convert.1653 = bf16[1,4096,2]{2,1,0} convert(%multiply.3774)
  %scatter.534 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.15895, %convert.1653), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_529.15030
  %copy.3191 = bf16[1,4096,8]{2,1,0} copy(%scatter.534)
  %dot.620 = bf16[1,4096,4096]{2,1,0} dot(%copy.3191, %all-gather.272), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3741 = bf16[1,4096,4096]{1,2,0} add(%dot.617, %dot.620)
  %copy.3192 = bf16[1,4096,4096]{2,1,0} copy(%add.3741)
  %multiply.3775 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3192, %broadcast.7794)
  %convert.1654 = f32[1,4096,4096]{2,1,0} convert(%multiply.3775)
  %multiply.3776 = f32[1,4096,4096]{2,1,0} multiply(%convert.1654, %broadcast.7792)
  %multiply.3777 = f32[1,4096,4096]{2,1,0} multiply(%convert.1639, %convert.1654)
  %reduce.583 = f32[1,4096]{1,0} reduce(%multiply.3777, %constant.3956), dimensions={2}, to_apply=%region_532.15059
  %reshape.15918 = f32[1,4096,1]{2,1,0} reshape(%reduce.583)
  %divide.756 = f32[1,4096,1]{2,1,0} divide(%rsqrt.142, %reshape.15834)
  %multiply.3778 = f32[1,4096,1]{2,1,0} multiply(%divide.756, %broadcast.7210)
  %multiply.3779 = f32[1,4096,1]{2,1,0} multiply(%reshape.15918, %multiply.3778)
  %multiply.3780 = f32[1,4096,1]{2,1,0} multiply(%multiply.3779, %broadcast.7211)
  %reshape.15919 = f32[1,4096]{1,0} reshape(%multiply.3780)
  %broadcast.7821 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15919), dimensions={0,1}
  %multiply.3781 = f32[1,4096,4096]{2,1,0} multiply(%convert.1639, %broadcast.7821)
  %add.3742 = f32[1,4096,4096]{2,1,0} add(%multiply.3776, %multiply.3781)
  %convert.1655 = bf16[1,4096,4096]{2,1,0} convert(%add.3742)
  %add.3743 = bf16[1,4096,4096]{2,1,0} add(%copy.3162, %convert.1655)
  %get-tuple-element.966 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.144), index=1
  %get-tuple-element.967 = u32[2,4]{1,0} get-tuple-element(%custom-call.144), index=2
  %copy.3193 = bf16[1,4096,4096]{2,1,0} copy(%add.3743)
  %dot.621 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3193, %all-gather.271), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3194 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.621)
  %custom-call.146 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3166, %copy.3168, %copy.3169, %constant.3999, %get-tuple-element.966, /*index=5*/%get-tuple-element.967, %get-tuple-element.951, %copy.3194, %scatter.526, %scatter.531, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.974 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.146), index=2
  %copy.3195 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.974)
  %dot.622 = bf16[1,4096,4096]{2,1,0} dot(%copy.3195, %all-gather.270), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.975 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.146), index=1
  %copy.3196 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.975)
  %slice.464 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3196), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3783 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.464, %broadcast.7774)
  %slice.465 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3196), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3785 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.465, %broadcast.7773)
  %add.3757 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3783, %multiply.3785)
  %multiply.3786 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.464, %broadcast.7773)
  %negate.217 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.465)
  %multiply.3787 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.217, %broadcast.7774)
  %add.3758 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3786, %multiply.3787)
  %concatenate.253 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.3757, %add.3758), dimensions={3}
  %dot.623 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.253, %all-gather.269), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3759 = bf16[1,4096,4096]{2,1,0} add(%dot.622, %dot.623)
  %copy.3197 = bf16[1,4096,4096]{2,1,0} copy(%add.3759)
  %get-tuple-element.976 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.146), index=0
  %copy.3198 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.976)
  %slice.466 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3198), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3789 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.466, %broadcast.7765)
  %slice.467 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3198), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3791 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.467, %broadcast.7764)
  %add.3760 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3789, %multiply.3791)
  %multiply.3792 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.466, %broadcast.7764)
  %negate.218 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.467)
  %multiply.3793 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.218, %broadcast.7765)
  %add.3761 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3792, %multiply.3793)
  %concatenate.254 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.3760, %add.3761), dimensions={3}
  %dot.624 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.254, %all-gather.268), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3199 = bf16[1,4096,4096]{2,1,0} copy(%dot.624)
  %add.3762 = bf16[1,4096,4096]{2,1,0} add(%copy.3197, %copy.3199)
  %copy.3200 = bf16[1,4096,4096]{2,1,0} copy(%add.3762)
  %multiply.3794 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3200, %broadcast.7760)
  %convert.1658 = f32[1,4096,4096]{2,1,0} convert(%multiply.3794)
  %multiply.3795 = f32[1,4096,4096]{2,1,0} multiply(%convert.1658, %broadcast.7759)
  %multiply.3796 = f32[1,4096,4096]{2,1,0} multiply(%convert.1625, %convert.1658)
  %reduce.584 = f32[1,4096]{1,0} reduce(%multiply.3796, %constant.3956), dimensions={2}, to_apply=%region_536.15170
  %reshape.15968 = f32[1,4096,1]{2,1,0} reshape(%reduce.584)
  %divide.759 = f32[1,4096,1]{2,1,0} divide(%rsqrt.141, %reshape.15778)
  %multiply.3797 = f32[1,4096,1]{2,1,0} multiply(%divide.759, %broadcast.7210)
  %multiply.3798 = f32[1,4096,1]{2,1,0} multiply(%reshape.15968, %multiply.3797)
  %multiply.3799 = f32[1,4096,1]{2,1,0} multiply(%multiply.3798, %broadcast.7211)
  %reshape.15969 = f32[1,4096]{1,0} reshape(%multiply.3799)
  %broadcast.7842 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15969), dimensions={0,1}
  %multiply.3800 = f32[1,4096,4096]{2,1,0} multiply(%convert.1625, %broadcast.7842)
  %add.3763 = f32[1,4096,4096]{2,1,0} add(%multiply.3795, %multiply.3800)
  %convert.1660 = bf16[1,4096,4096]{2,1,0} convert(%add.3763)
  %add.3764 = bf16[1,4096,4096]{2,1,0} add(%add.3743, %convert.1660)
  %copy.3201 = bf16[1,4096,4096]{2,1,0} copy(%add.3764)
  %tuple.258 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.253, %param.254, %param.255, %param.256, %param.252, /*index=5*/%param.247, %param.249, %param.251, %param.248, %param.250, /*index=10*/%copy.2726, %param.10, %param.7, %copy.3201)
  %opt-barrier.7 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.258)
  %get-tuple-element.977 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.7), index=13
  %copy.3202 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.977)
  %iota.1992 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.978 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.7), index=10
  %copy.3203 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.978)
  %convert.1661 = f32[1,4096,4096]{2,1,0} convert(%copy.3203)
  %multiply.3802 = f32[1,4096,4096]{2,1,0} multiply(%convert.1661, %convert.1661)
  %reduce.585 = f32[1,4096]{1,0} reduce(%multiply.3802, %constant.3956), dimensions={2}, to_apply=%region_538.15213
  %multiply.3803 = f32[1,4096]{1,0} multiply(%reduce.585, %broadcast.5380)
  %add.3766 = f32[1,4096]{1,0} add(%multiply.3803, %broadcast.5381)
  %reshape.15971 = f32[1,4096,1]{2,1,0} reshape(%add.3766)
  %rsqrt.143 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.15971)
  %reshape.15972 = f32[1,4096]{1,0} reshape(%rsqrt.143)
  %broadcast.7846 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.15972), dimensions={0,1}
  %multiply.3804 = f32[1,4096,4096]{2,1,0} multiply(%convert.1661, %broadcast.7846)
  %convert.1662 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3804)
  %get-tuple-element.979 = bf16[4096]{0} get-tuple-element(%opt-barrier.7), index=5
  %broadcast.7847 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.979), dimensions={2}
  %multiply.3805 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1662, %broadcast.7847)
  %copy.3204 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3805)
  %copy.3205 = bf16[1,4096,4096]{2,1,0} copy(%copy.3204)
  %get-tuple-element.980 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.7), index=8
  %all-gather.275 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.980), channel_id=618, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.625 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3205, %all-gather.275), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.468 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.625), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.981 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.7), index=12
  %convert.1663 = f32[1,4096]{1,0} convert(%get-tuple-element.981)
  %broadcast.7848 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1663), dimensions={0,1}
  %divide.760 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.7848, %broadcast.5388)
  %cosine.79 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.760)
  %convert.1665 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.79)
  %reshape.15974 = bf16[1,4096,64]{2,1,0} reshape(%convert.1665)
  %broadcast.7851 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15974), dimensions={0,1,3}
  %multiply.3810 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.468, %broadcast.7851)
  %slice.469 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.625), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.78 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.760)
  %convert.1666 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.78)
  %reshape.15977 = bf16[1,4096,64]{2,1,0} reshape(%convert.1666)
  %broadcast.7852 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.15977), dimensions={0,1,3}
  %multiply.3812 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.469, %broadcast.7852)
  %subtract.407 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3810, %multiply.3812)
  %multiply.3813 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.469, %broadcast.7851)
  %multiply.3814 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.468, %broadcast.7852)
  %add.3767 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3813, %multiply.3814)
  %concatenate.255 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.407, %add.3767), dimensions={3}
  %copy.3206 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.255)
  %get-tuple-element.982 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.7), index=6
  %all-gather.276 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.982), channel_id=619, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.626 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3205, %all-gather.276), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.470 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.626), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.7858 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15974), dimensions={0,1,3}
  %multiply.3818 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.470, %broadcast.7858)
  %slice.471 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.626), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.7859 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.15977), dimensions={0,1,3}
  %multiply.3821 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.471, %broadcast.7859)
  %subtract.408 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3818, %multiply.3821)
  %multiply.3822 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.471, %broadcast.7858)
  %multiply.3823 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.470, %broadcast.7859)
  %add.3768 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3822, %multiply.3823)
  %concatenate.256 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.408, %add.3768), dimensions={3}
  %copy.3208 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.256)
  %get-tuple-element.983 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.7), index=9
  %all-gather.277 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.983), channel_id=620, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.627 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3205, %all-gather.277), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3209 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.627)
  %get-tuple-element.984 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.7), index=11
  %broadcast.7862 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.984), dimensions={0,1}
  %broadcast.7863 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.984), dimensions={0,2}
  %compare.2339 = pred[1,4096,4096]{2,1,0} compare(%broadcast.7862, %broadcast.7863), direction=EQ
  %and.294 = pred[1,4096,4096]{2,1,0} and(%compare.2339, %broadcast.5406)
  %select.1422 = f32[1,4096,4096]{2,1,0} select(%and.294, %broadcast.5407, %broadcast.5408)
  %compare.2342 = pred[1,4096,4096]{2,1,0} compare(%select.1422, %broadcast.5407), direction=NE
  %not.103 = pred[1,4096,4096]{2,1,0} not(%compare.2342)
  %convert.1671 = s32[1,4096,4096]{2,1,0} convert(%not.103)
  %reduce.586 = s32[1,4096]{1,0} reduce(%convert.1671, %constant.3783), dimensions={1}, to_apply=%region_539.15347
  %reshape.15988 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.586)
  %slice.472 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.15988), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.15990 = s32[1,1]{1,0} reshape(%slice.472)
  %reshape.16009 = s32[1]{0} reshape(%reshape.15990)
  %compare.2357 = pred[1]{0} compare(%reshape.16009, %constant.4022), direction=LT
  %select.1432 = s32[1]{0} select(%compare.2357, %reshape.11470, %reshape.16009)
  %scatter.549 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1432), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.39
  %reduce.587 = s32[1,4096]{1,0} reduce(%convert.1671, %constant.3783), dimensions={2}, to_apply=%region_540.15355
  %reshape.15991 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.587)
  %reduce.588 = s32[1,1]{1,0} reduce(%reshape.15991, %constant.4014), dimensions={3,2}, to_apply=%region_541.15360
  %reshape.16030 = s32[1]{0} reshape(%reduce.588)
  %compare.2371 = pred[1]{0} compare(%reshape.16030, %constant.4022), direction=LT
  %select.1442 = s32[1]{0} select(%compare.2371, %reshape.11470, %reshape.16030)
  %scatter.554 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1442), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.39
  %custom-call.147 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3206, %copy.3208, %copy.3209, %constant.3999, %scatter.549, /*index=5*/%scatter.554, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.990 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.147), index=0
  %copy.3210 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.990)
  %get-tuple-element.991 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.7), index=7
  %all-gather.278 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.991), channel_id=621, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.628 = bf16[1,4096,4096]{2,1,0} dot(%copy.3210, %all-gather.278), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3211 = bf16[1,4096,4096]{2,1,0} copy(%dot.628)
  %add.3781 = bf16[1,4096,4096]{2,1,0} add(%copy.3203, %copy.3211)
  %convert.1675 = f32[1,4096,4096]{2,1,0} convert(%add.3781)
  %multiply.3825 = f32[1,4096,4096]{2,1,0} multiply(%convert.1675, %convert.1675)
  %reduce.589 = f32[1,4096]{1,0} reduce(%multiply.3825, %constant.3956), dimensions={2}, to_apply=%region_542.15376
  %multiply.3827 = f32[1,4096]{1,0} multiply(%reduce.589, %broadcast.5380)
  %add.3783 = f32[1,4096]{1,0} add(%multiply.3827, %broadcast.5381)
  %reshape.16032 = f32[1,4096,1]{2,1,0} reshape(%add.3783)
  %rsqrt.144 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.16032)
  %reshape.16033 = f32[1,4096]{1,0} reshape(%rsqrt.144)
  %broadcast.7877 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16033), dimensions={0,1}
  %multiply.3828 = f32[1,4096,4096]{2,1,0} multiply(%convert.1675, %broadcast.7877)
  %convert.1676 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3828)
  %get-tuple-element.992 = bf16[4096]{0} get-tuple-element(%opt-barrier.7), index=4
  %broadcast.7878 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.992), dimensions={2}
  %multiply.3829 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1676, %broadcast.7878)
  %copy.3212 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3829)
  %get-tuple-element.993 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.7), index=0
  %all-gather.279 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.993), channel_id=622, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.629 = bf16[1,4096,8]{2,1,0} dot(%copy.3212, %all-gather.279), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3213 = bf16[1,4096,8]{2,1,0} copy(%dot.629)
  %reshape.16034 = bf16[4096,8]{1,0} reshape(%copy.3213)
  %custom-call.148 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.16034), custom_call_target="TopK", called_computations={%compare-greater-than.39.clone}
  %get-tuple-element.994 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.148), index=0
  %get-tuple-element.995 = s32[4096,2]{1,0} get-tuple-element(%custom-call.148), index=1
  %add.3784 = s32[4096,2]{1,0} add(%get-tuple-element.995, %broadcast.5420)
  %sort.197 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.994, %add.3784), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.39
  %get-tuple-element.997 = s32[4096,2]{1,0} get-tuple-element(%sort.197), index=1
  %slice.474 = s32[4096,2]{1,0} slice(%get-tuple-element.997), slice={[0:4096], [0:2]}
  %all-gather.281 = s32[32768,2]{1,0} all-gather(%slice.474), channel_id=624, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1246 = s32[4096,2]{1,0} dynamic-slice(%all-gather.281, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.16037 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1246)
  %compare.2372 = pred[1,4096,2]{2,1,0} compare(%reshape.16037, %broadcast.5421), direction=LT
  %add.3785 = s32[1,4096,2]{2,1,0} add(%reshape.16037, %broadcast.5422)
  %select.1443 = s32[1,4096,2]{2,1,0} select(%compare.2372, %add.3785, %reshape.16037)
  %reshape.16038 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1443)
  %concatenate.257 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.1992, %reshape.16038), dimensions={3}
  %subtract.414 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.257, %broadcast.5433)
  %scatter.555 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.414, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_545.15455
  %gather.46 = u32[1,4096,2]{2,1,0} gather(%scatter.555, %subtract.414), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2373 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.46), direction=EQ
  %get-tuple-element.996 = bf16[4096,2]{1,0} get-tuple-element(%sort.197), index=0
  %slice.473 = bf16[4096,2]{1,0} slice(%get-tuple-element.996), slice={[0:4096], [0:2]}
  %all-gather.280 = bf16[32768,2]{1,0} all-gather(%slice.473), channel_id=623, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1256 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.280, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1680 = f32[4096,2]{1,0} convert(%dynamic-slice.1256)
  %reshape.16056 = f32[1,4096,2]{2,1,0} reshape(%convert.1680)
  %reduce.590 = f32[4096]{0} reduce(%convert.1680, %constant.4073), dimensions={1}, to_apply=%region_543.15405
  %reshape.16057 = f32[1,4096]{1,0} reshape(%reduce.590)
  %broadcast.7885 = f32[1,4096,2]{2,1,0} broadcast(%reshape.16057), dimensions={0,1}
  %subtract.413 = f32[1,4096,2]{2,1,0} subtract(%reshape.16056, %broadcast.7885)
  %exponential.205 = f32[1,4096,2]{2,1,0} exponential(%subtract.413)
  %reduce.591 = f32[1,4096]{1,0} reduce(%exponential.205, %constant.3956), dimensions={2}, to_apply=%region_544.15417
  %broadcast.7886 = f32[1,4096,2]{2,1,0} broadcast(%reduce.591), dimensions={0,1}
  %divide.764 = f32[1,4096,2]{2,1,0} divide(%exponential.205, %broadcast.7886)
  %convert.1681 = bf16[1,4096,2]{2,1,0} convert(%divide.764)
  %select.1444 = bf16[1,4096,2]{2,1,0} select(%compare.2373, %convert.1681, %broadcast.5432)
  %scatter.556 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.414, %select.1444), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_546.15464
  %broadcast.7888 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.16037), dimensions={0,1,2}
  %iota.2000 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2374 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7888, %iota.2000), direction=EQ
  %convert.1682 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2374)
  %reshape.16068 = s32[1,8192,8]{2,1,0} reshape(%convert.1682)
  %copy.3214 = s32[1,8192,8]{2,1,0} copy(%reshape.16068)
  %reduce-window.324 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3214, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.6
  %reshape.16071 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.324)
  %copy.3215 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.16071)
  %compare.2375 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3215, %broadcast.5435), direction=LE
  %select.1445 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2375, %convert.1682, %broadcast.5436)
  %reduce.592 = s32[1,4096,8]{2,1,0} reduce(%select.1445, %constant.3783), dimensions={2}, to_apply=%region_547.15478
  %convert.1683 = bf16[1,4096,8]{2,1,0} convert(%reduce.592)
  %multiply.3835 = bf16[1,4096,8]{2,1,0} multiply(%scatter.556, %convert.1683)
  %broadcast.7890 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3835), dimensions={0,1,2}
  %multiply.3836 = s32[1,8192,8]{2,1,0} multiply(%copy.3214, %reduce-window.324)
  %reshape.16072 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3836)
  %reduce.593 = s32[1,4096,8]{2,1,0} reduce(%reshape.16072, %constant.3783), dimensions={2}, to_apply=%region_548.15487
  %multiply.3837 = s32[1,4096,8]{2,1,0} multiply(%reduce.593, %reduce.592)
  %broadcast.7891 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3837), dimensions={0,1,2}
  %iota.2001 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2376 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7891, %iota.2001), direction=EQ
  %convert.1684 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2376)
  %convert.1685 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1684)
  %multiply.3838 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7890, %convert.1685)
  %slice.475 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3838), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2377 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.475, %broadcast.5439), direction=NE
  %copy.3216 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2377)
  %convert.1686 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3216)
  %dot.630 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1686, %copy.3212), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16075 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.630)
  %all-to-all.92 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16075), channel_id=631, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.145 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.92), dimensions={1,0,2,3,4}
  %reshape.16076 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.145)
  %transpose.146 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.16076), dimensions={1,0,2,3}
  %copy.3217 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.146)
  %get-tuple-element.1002 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.7), index=1
  %copy.3218 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1002)
  %dot.631 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3217, %copy.3218), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3219 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.631)
  %negate.219 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3219)
  %exponential.206 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.219)
  %add.3791 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.206, %broadcast.5440)
  %divide.765 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3791)
  %multiply.3842 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3219, %divide.765)
  %copy.3220 = bf16[1,4096,4096]{2,1,0} copy(%copy.3202)
  %copy.3221 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.475)
  %dot.632 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3220, %copy.3221), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16079 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.632)
  %all-to-all.93 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.16079), channel_id=632, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.147 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.93), dimensions={2,0,1,3,4}
  %reshape.16080 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.147)
  %transpose.148 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.16080), dimensions={2,0,3,1}
  %copy.3222 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.148)
  %get-tuple-element.1003 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.7), index=3
  %copy.3223 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1003)
  %dot.633 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3222, %copy.3223), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.3845 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3842, %dot.633)
  %copy.3224 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.3845)
  %get-tuple-element.1004 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.7), index=2
  %copy.3225 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1004)
  %dot.634 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3224, %copy.3225), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.635 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3217, %copy.3225), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3226 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.635)
  %multiply.3846 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.633, %copy.3226)
  %multiply.3847 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3846, %divide.765)
  %multiply.3848 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3219, %multiply.3846)
  %subtract.415 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.765)
  %multiply.3849 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.765, %subtract.415)
  %multiply.3850 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3848, %multiply.3849)
  %add.3792 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.3847, %multiply.3850)
  %copy.3227 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.3792)
  %dot.636 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3227, %copy.3218), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.3793 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.634, %dot.636)
  %copy.3228 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.3793)
  %transpose.149 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3228), dimensions={1,0,2,3}
  %reshape.16083 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.149)
  %all-to-all.94 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16083), channel_id=633, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.150 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.94), dimensions={1,0,2,3,4}
  %reshape.16084 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.150)
  %dot.637 = bf16[1,4096,4096]{2,1,0} dot(%convert.1686, %reshape.16084), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.16086 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1246)
  %compare.2379 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.257, %broadcast.7265), direction=GE
  %compare.2380 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.257, %broadcast.7267), direction=LE
  %and.299 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2379, %compare.2380)
  %reduce.594 = pred[1,4096,2]{2,1,0} reduce(%and.299, %constant.4025), dimensions={3}, to_apply=%region_551.15572
  %multiply.3853 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3842, %copy.3226)
  %dot.638 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3853, %copy.3223), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3229 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.638)
  %reshape.16088 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3229)
  %all-to-all.95 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16088), channel_id=634, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.151 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.95), dimensions={1,0,2,3,4}
  %reshape.16089 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.151)
  %dot.639 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3220, %reshape.16089), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3230 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.639)
  %pad.7 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3230, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.3857 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.7, %convert.1685)
  %reduce.595 = bf16[1,4096,8]{2,1,0} reduce(%multiply.3857, %constant.3795), dimensions={3}, to_apply=%region_549.15554
  %multiply.3858 = bf16[1,4096,8]{2,1,0} multiply(%reduce.595, %convert.1683)
  %gather.47 = bf16[1,4096,2]{2,1,0} gather(%multiply.3858, %subtract.414), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1446 = bf16[1,4096,2]{2,1,0} select(%reduce.594, %gather.47, %broadcast.5432)
  %select.1447 = bf16[1,4096,2]{2,1,0} select(%compare.2373, %select.1446, %broadcast.5432)
  %convert.1688 = f32[1,4096,2]{2,1,0} convert(%select.1447)
  %divide.766 = f32[1,4096,2]{2,1,0} divide(%convert.1688, %broadcast.7886)
  %multiply.3859 = f32[1,4096]{1,0} multiply(%reduce.591, %reduce.591)
  %divide.767 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.3859)
  %broadcast.7897 = f32[1,4096,2]{2,1,0} broadcast(%divide.767), dimensions={0,1}
  %multiply.3860 = f32[1,4096,2]{2,1,0} multiply(%convert.1688, %broadcast.7897)
  %multiply.3861 = f32[1,4096,2]{2,1,0} multiply(%multiply.3860, %exponential.205)
  %reduce.596 = f32[1,4096]{1,0} reduce(%multiply.3861, %constant.3956), dimensions={2}, to_apply=%region_552.15586
  %negate.220 = f32[1,4096]{1,0} negate(%reduce.596)
  %broadcast.7898 = f32[1,4096,2]{2,1,0} broadcast(%negate.220), dimensions={0,1}
  %add.3794 = f32[1,4096,2]{2,1,0} add(%divide.766, %broadcast.7898)
  %multiply.3862 = f32[1,4096,2]{2,1,0} multiply(%add.3794, %exponential.205)
  %convert.1689 = bf16[1,4096,2]{2,1,0} convert(%multiply.3862)
  %scatter.557 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.16086, %convert.1689), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_554.15606
  %copy.3231 = bf16[1,4096,8]{2,1,0} copy(%scatter.557)
  %dot.640 = bf16[1,4096,4096]{2,1,0} dot(%copy.3231, %all-gather.279), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3795 = bf16[1,4096,4096]{1,2,0} add(%dot.637, %dot.640)
  %copy.3232 = bf16[1,4096,4096]{2,1,0} copy(%add.3795)
  %multiply.3863 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3232, %broadcast.7878)
  %convert.1690 = f32[1,4096,4096]{2,1,0} convert(%multiply.3863)
  %multiply.3864 = f32[1,4096,4096]{2,1,0} multiply(%convert.1690, %broadcast.7877)
  %multiply.3865 = f32[1,4096,4096]{2,1,0} multiply(%convert.1675, %convert.1690)
  %reduce.597 = f32[1,4096]{1,0} reduce(%multiply.3865, %constant.3956), dimensions={2}, to_apply=%region_557.15635
  %reshape.16102 = f32[1,4096,1]{2,1,0} reshape(%reduce.597)
  %divide.768 = f32[1,4096,1]{2,1,0} divide(%rsqrt.144, %reshape.16032)
  %multiply.3866 = f32[1,4096,1]{2,1,0} multiply(%divide.768, %broadcast.7210)
  %multiply.3867 = f32[1,4096,1]{2,1,0} multiply(%reshape.16102, %multiply.3866)
  %multiply.3868 = f32[1,4096,1]{2,1,0} multiply(%multiply.3867, %broadcast.7211)
  %reshape.16103 = f32[1,4096]{1,0} reshape(%multiply.3868)
  %broadcast.7902 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16103), dimensions={0,1}
  %multiply.3869 = f32[1,4096,4096]{2,1,0} multiply(%convert.1675, %broadcast.7902)
  %add.3796 = f32[1,4096,4096]{2,1,0} add(%multiply.3864, %multiply.3869)
  %convert.1691 = bf16[1,4096,4096]{2,1,0} convert(%add.3796)
  %add.3797 = bf16[1,4096,4096]{2,1,0} add(%copy.3202, %convert.1691)
  %get-tuple-element.1005 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.147), index=1
  %get-tuple-element.1006 = u32[2,4]{1,0} get-tuple-element(%custom-call.147), index=2
  %copy.3233 = bf16[1,4096,4096]{2,1,0} copy(%add.3797)
  %dot.641 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3233, %all-gather.278), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3234 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.641)
  %custom-call.149 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3206, %copy.3208, %copy.3209, %constant.3999, %get-tuple-element.1005, /*index=5*/%get-tuple-element.1006, %get-tuple-element.990, %copy.3234, %scatter.549, %scatter.554, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1013 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.149), index=2
  %copy.3235 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1013)
  %dot.642 = bf16[1,4096,4096]{2,1,0} dot(%copy.3235, %all-gather.277), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1014 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.149), index=1
  %copy.3236 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1014)
  %slice.476 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3236), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3871 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.476, %broadcast.7859)
  %slice.477 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3236), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3873 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.477, %broadcast.7858)
  %add.3812 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3871, %multiply.3873)
  %multiply.3874 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.476, %broadcast.7858)
  %negate.221 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.477)
  %multiply.3875 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.221, %broadcast.7859)
  %add.3813 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3874, %multiply.3875)
  %concatenate.262 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.3812, %add.3813), dimensions={3}
  %dot.643 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.262, %all-gather.276), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3814 = bf16[1,4096,4096]{2,1,0} add(%dot.642, %dot.643)
  %copy.3237 = bf16[1,4096,4096]{2,1,0} copy(%add.3814)
  %get-tuple-element.1015 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.149), index=0
  %copy.3238 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1015)
  %slice.478 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3238), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3877 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.478, %broadcast.7852)
  %slice.479 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3238), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3879 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.479, %broadcast.7851)
  %add.3816 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3877, %multiply.3879)
  %multiply.3880 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.478, %broadcast.7851)
  %negate.222 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.479)
  %multiply.3881 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.222, %broadcast.7852)
  %add.3817 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3880, %multiply.3881)
  %concatenate.263 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.3816, %add.3817), dimensions={3}
  %dot.644 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.263, %all-gather.275), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3239 = bf16[1,4096,4096]{2,1,0} copy(%dot.644)
  %add.3818 = bf16[1,4096,4096]{2,1,0} add(%copy.3237, %copy.3239)
  %copy.3240 = bf16[1,4096,4096]{2,1,0} copy(%add.3818)
  %multiply.3882 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3240, %broadcast.7847)
  %convert.1695 = f32[1,4096,4096]{2,1,0} convert(%multiply.3882)
  %multiply.3883 = f32[1,4096,4096]{2,1,0} multiply(%convert.1695, %broadcast.7846)
  %multiply.3884 = f32[1,4096,4096]{2,1,0} multiply(%convert.1661, %convert.1695)
  %reduce.598 = f32[1,4096]{1,0} reduce(%multiply.3884, %constant.3956), dimensions={2}, to_apply=%region_561.15746
  %reshape.16149 = f32[1,4096,1]{2,1,0} reshape(%reduce.598)
  %divide.771 = f32[1,4096,1]{2,1,0} divide(%rsqrt.143, %reshape.15971)
  %multiply.3885 = f32[1,4096,1]{2,1,0} multiply(%divide.771, %broadcast.7210)
  %multiply.3886 = f32[1,4096,1]{2,1,0} multiply(%reshape.16149, %multiply.3885)
  %multiply.3887 = f32[1,4096,1]{2,1,0} multiply(%multiply.3886, %broadcast.7211)
  %reshape.16150 = f32[1,4096]{1,0} reshape(%multiply.3887)
  %broadcast.7923 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16150), dimensions={0,1}
  %multiply.3888 = f32[1,4096,4096]{2,1,0} multiply(%convert.1661, %broadcast.7923)
  %add.3819 = f32[1,4096,4096]{2,1,0} add(%multiply.3883, %multiply.3888)
  %convert.1696 = bf16[1,4096,4096]{2,1,0} convert(%add.3819)
  %add.3820 = bf16[1,4096,4096]{2,1,0} add(%add.3797, %convert.1696)
  %copy.3241 = bf16[1,4096,4096]{2,1,0} copy(%add.3820)
  %tuple.263 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.243, %param.244, %param.245, %param.246, %param.242, /*index=5*/%param.237, %param.239, %param.241, %param.238, %param.240, /*index=10*/%copy.2702, %param.10, %param.7, %copy.3241)
  %opt-barrier.8 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.263)
  %get-tuple-element.1016 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.8), index=13
  %copy.3242 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1016)
  %iota.2003 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1017 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.8), index=10
  %copy.3243 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1017)
  %convert.1697 = f32[1,4096,4096]{2,1,0} convert(%copy.3243)
  %multiply.3890 = f32[1,4096,4096]{2,1,0} multiply(%convert.1697, %convert.1697)
  %reduce.599 = f32[1,4096]{1,0} reduce(%multiply.3890, %constant.3956), dimensions={2}, to_apply=%region_563.15789
  %multiply.3891 = f32[1,4096]{1,0} multiply(%reduce.599, %broadcast.5380)
  %add.3822 = f32[1,4096]{1,0} add(%multiply.3891, %broadcast.5381)
  %reshape.16152 = f32[1,4096,1]{2,1,0} reshape(%add.3822)
  %rsqrt.145 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.16152)
  %reshape.16153 = f32[1,4096]{1,0} reshape(%rsqrt.145)
  %broadcast.7927 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16153), dimensions={0,1}
  %multiply.3892 = f32[1,4096,4096]{2,1,0} multiply(%convert.1697, %broadcast.7927)
  %convert.1698 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3892)
  %get-tuple-element.1018 = bf16[4096]{0} get-tuple-element(%opt-barrier.8), index=5
  %broadcast.7928 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1018), dimensions={2}
  %multiply.3893 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1698, %broadcast.7928)
  %copy.3244 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3893)
  %copy.3245 = bf16[1,4096,4096]{2,1,0} copy(%copy.3244)
  %get-tuple-element.1019 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.8), index=8
  %all-gather.282 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1019), channel_id=637, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.645 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3245, %all-gather.282), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.480 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.645), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1020 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.8), index=12
  %convert.1699 = f32[1,4096]{1,0} convert(%get-tuple-element.1020)
  %broadcast.7929 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1699), dimensions={0,1}
  %divide.772 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.7929, %broadcast.5388)
  %cosine.81 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.772)
  %convert.1701 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.81)
  %reshape.16156 = bf16[1,4096,64]{2,1,0} reshape(%convert.1701)
  %broadcast.7932 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.16156), dimensions={0,1,3}
  %multiply.3897 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.480, %broadcast.7932)
  %slice.481 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.645), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.80 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.772)
  %convert.1702 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.80)
  %reshape.16158 = bf16[1,4096,64]{2,1,0} reshape(%convert.1702)
  %broadcast.7933 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.16158), dimensions={0,1,3}
  %multiply.3899 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.481, %broadcast.7933)
  %subtract.419 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3897, %multiply.3899)
  %multiply.3900 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.481, %broadcast.7932)
  %multiply.3901 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.480, %broadcast.7933)
  %add.3823 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3900, %multiply.3901)
  %concatenate.264 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.419, %add.3823), dimensions={3}
  %copy.3246 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.264)
  %get-tuple-element.1021 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.8), index=6
  %all-gather.283 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1021), channel_id=638, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.646 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3245, %all-gather.283), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.482 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.646), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.7943 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.16156), dimensions={0,1,3}
  %multiply.3906 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.482, %broadcast.7943)
  %slice.483 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.646), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.7944 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.16158), dimensions={0,1,3}
  %multiply.3908 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.483, %broadcast.7944)
  %subtract.420 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.3906, %multiply.3908)
  %multiply.3909 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.483, %broadcast.7943)
  %multiply.3912 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.482, %broadcast.7944)
  %add.3824 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3909, %multiply.3912)
  %concatenate.265 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.420, %add.3824), dimensions={3}
  %copy.3248 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.265)
  %get-tuple-element.1022 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.8), index=9
  %all-gather.284 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1022), channel_id=639, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.647 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3245, %all-gather.284), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3249 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.647)
  %get-tuple-element.1023 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.8), index=11
  %broadcast.7947 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1023), dimensions={0,1}
  %broadcast.7948 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1023), dimensions={0,2}
  %compare.2409 = pred[1,4096,4096]{2,1,0} compare(%broadcast.7947, %broadcast.7948), direction=EQ
  %and.304 = pred[1,4096,4096]{2,1,0} and(%compare.2409, %broadcast.5406)
  %select.1468 = f32[1,4096,4096]{2,1,0} select(%and.304, %broadcast.5407, %broadcast.5408)
  %compare.2411 = pred[1,4096,4096]{2,1,0} compare(%select.1468, %broadcast.5407), direction=NE
  %not.104 = pred[1,4096,4096]{2,1,0} not(%compare.2411)
  %convert.1708 = s32[1,4096,4096]{2,1,0} convert(%not.104)
  %reduce.600 = s32[1,4096]{1,0} reduce(%convert.1708, %constant.3783), dimensions={1}, to_apply=%region_564.15923
  %reshape.16169 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.600)
  %slice.484 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.16169), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.16171 = s32[1,1]{1,0} reshape(%slice.484)
  %reshape.16186 = s32[1]{0} reshape(%reshape.16171)
  %compare.2424 = pred[1]{0} compare(%reshape.16186, %constant.4022), direction=LT
  %select.1478 = s32[1]{0} select(%compare.2424, %reshape.11470, %reshape.16186)
  %scatter.572 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1478), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.40
  %reduce.601 = s32[1,4096]{1,0} reduce(%convert.1708, %constant.3783), dimensions={2}, to_apply=%region_565.15931
  %reshape.16172 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.601)
  %reduce.602 = s32[1,1]{1,0} reduce(%reshape.16172, %constant.4014), dimensions={3,2}, to_apply=%region_566.15936
  %reshape.16203 = s32[1]{0} reshape(%reduce.602)
  %compare.2437 = pred[1]{0} compare(%reshape.16203, %constant.4022), direction=LT
  %select.1488 = s32[1]{0} select(%compare.2437, %reshape.11470, %reshape.16203)
  %scatter.577 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1488), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.40
  %custom-call.150 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3246, %copy.3248, %copy.3249, %constant.3999, %scatter.572, /*index=5*/%scatter.577, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1029 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.150), index=0
  %copy.3250 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1029)
  %get-tuple-element.1030 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.8), index=7
  %all-gather.285 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1030), channel_id=640, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.648 = bf16[1,4096,4096]{2,1,0} dot(%copy.3250, %all-gather.285), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3251 = bf16[1,4096,4096]{2,1,0} copy(%dot.648)
  %add.3837 = bf16[1,4096,4096]{2,1,0} add(%copy.3243, %copy.3251)
  %convert.1712 = f32[1,4096,4096]{2,1,0} convert(%add.3837)
  %multiply.3914 = f32[1,4096,4096]{2,1,0} multiply(%convert.1712, %convert.1712)
  %reduce.603 = f32[1,4096]{1,0} reduce(%multiply.3914, %constant.3956), dimensions={2}, to_apply=%region_567.15952
  %multiply.3915 = f32[1,4096]{1,0} multiply(%reduce.603, %broadcast.5380)
  %add.3838 = f32[1,4096]{1,0} add(%multiply.3915, %broadcast.5381)
  %reshape.16205 = f32[1,4096,1]{2,1,0} reshape(%add.3838)
  %rsqrt.146 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.16205)
  %reshape.16206 = f32[1,4096]{1,0} reshape(%rsqrt.146)
  %broadcast.7968 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16206), dimensions={0,1}
  %multiply.3916 = f32[1,4096,4096]{2,1,0} multiply(%convert.1712, %broadcast.7968)
  %convert.1713 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3916)
  %get-tuple-element.1031 = bf16[4096]{0} get-tuple-element(%opt-barrier.8), index=4
  %broadcast.7969 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1031), dimensions={2}
  %multiply.3917 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1713, %broadcast.7969)
  %copy.3252 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3917)
  %get-tuple-element.1032 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.8), index=0
  %all-gather.286 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1032), channel_id=641, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.649 = bf16[1,4096,8]{2,1,0} dot(%copy.3252, %all-gather.286), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3253 = bf16[1,4096,8]{2,1,0} copy(%dot.649)
  %reshape.16207 = bf16[4096,8]{1,0} reshape(%copy.3253)
  %custom-call.151 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.16207), custom_call_target="TopK", called_computations={%compare-greater-than.40.clone}
  %get-tuple-element.1033 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.151), index=0
  %get-tuple-element.1034 = s32[4096,2]{1,0} get-tuple-element(%custom-call.151), index=1
  %add.3839 = s32[4096,2]{1,0} add(%get-tuple-element.1034, %broadcast.5420)
  %sort.202 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1033, %add.3839), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.40
  %get-tuple-element.1036 = s32[4096,2]{1,0} get-tuple-element(%sort.202), index=1
  %slice.486 = s32[4096,2]{1,0} slice(%get-tuple-element.1036), slice={[0:4096], [0:2]}
  %all-gather.288 = s32[32768,2]{1,0} all-gather(%slice.486), channel_id=643, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1290 = s32[4096,2]{1,0} dynamic-slice(%all-gather.288, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.16210 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1290)
  %compare.2438 = pred[1,4096,2]{2,1,0} compare(%reshape.16210, %broadcast.5421), direction=LT
  %add.3840 = s32[1,4096,2]{2,1,0} add(%reshape.16210, %broadcast.5422)
  %select.1489 = s32[1,4096,2]{2,1,0} select(%compare.2438, %add.3840, %reshape.16210)
  %reshape.16211 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1489)
  %concatenate.266 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2003, %reshape.16211), dimensions={3}
  %subtract.426 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.266, %broadcast.5433)
  %scatter.578 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.426, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_570.16031
  %gather.48 = u32[1,4096,2]{2,1,0} gather(%scatter.578, %subtract.426), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2439 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.48), direction=EQ
  %get-tuple-element.1035 = bf16[4096,2]{1,0} get-tuple-element(%sort.202), index=0
  %slice.485 = bf16[4096,2]{1,0} slice(%get-tuple-element.1035), slice={[0:4096], [0:2]}
  %all-gather.287 = bf16[32768,2]{1,0} all-gather(%slice.485), channel_id=642, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1300 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.287, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1716 = f32[4096,2]{1,0} convert(%dynamic-slice.1300)
  %reshape.16229 = f32[1,4096,2]{2,1,0} reshape(%convert.1716)
  %reduce.604 = f32[4096]{0} reduce(%convert.1716, %constant.4073), dimensions={1}, to_apply=%region_568.15981
  %reshape.16230 = f32[1,4096]{1,0} reshape(%reduce.604)
  %broadcast.7976 = f32[1,4096,2]{2,1,0} broadcast(%reshape.16230), dimensions={0,1}
  %subtract.425 = f32[1,4096,2]{2,1,0} subtract(%reshape.16229, %broadcast.7976)
  %exponential.207 = f32[1,4096,2]{2,1,0} exponential(%subtract.425)
  %reduce.605 = f32[1,4096]{1,0} reduce(%exponential.207, %constant.3956), dimensions={2}, to_apply=%region_569.15993
  %broadcast.7978 = f32[1,4096,2]{2,1,0} broadcast(%reduce.605), dimensions={0,1}
  %divide.776 = f32[1,4096,2]{2,1,0} divide(%exponential.207, %broadcast.7978)
  %convert.1717 = bf16[1,4096,2]{2,1,0} convert(%divide.776)
  %select.1490 = bf16[1,4096,2]{2,1,0} select(%compare.2439, %convert.1717, %broadcast.5432)
  %scatter.579 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.426, %select.1490), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_571.16040
  %broadcast.7983 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.16210), dimensions={0,1,2}
  %iota.2011 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2440 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.7983, %iota.2011), direction=EQ
  %convert.1718 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2440)
  %reshape.16239 = s32[1,8192,8]{2,1,0} reshape(%convert.1718)
  %copy.3254 = s32[1,8192,8]{2,1,0} copy(%reshape.16239)
  %reduce-window.329 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3254, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.7
  %reshape.16241 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.329)
  %copy.3255 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.16241)
  %compare.2441 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3255, %broadcast.5435), direction=LE
  %select.1491 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2441, %convert.1718, %broadcast.5436)
  %reduce.606 = s32[1,4096,8]{2,1,0} reduce(%select.1491, %constant.3783), dimensions={2}, to_apply=%region_572.16054
  %convert.1719 = bf16[1,4096,8]{2,1,0} convert(%reduce.606)
  %multiply.3924 = bf16[1,4096,8]{2,1,0} multiply(%scatter.579, %convert.1719)
  %broadcast.7985 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3924), dimensions={0,1,2}
  %multiply.3926 = s32[1,8192,8]{2,1,0} multiply(%copy.3254, %reduce-window.329)
  %reshape.16242 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.3926)
  %reduce.607 = s32[1,4096,8]{2,1,0} reduce(%reshape.16242, %constant.3783), dimensions={2}, to_apply=%region_573.16063
  %multiply.3927 = s32[1,4096,8]{2,1,0} multiply(%reduce.607, %reduce.606)
  %broadcast.7986 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.3927), dimensions={0,1,2}
  %iota.2012 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2442 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.7986, %iota.2012), direction=EQ
  %convert.1720 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2442)
  %convert.1721 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1720)
  %multiply.3928 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.7985, %convert.1721)
  %slice.487 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.3928), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2443 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.487, %broadcast.5439), direction=NE
  %copy.3256 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2443)
  %convert.1722 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3256)
  %dot.650 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1722, %copy.3252), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16245 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.650)
  %all-to-all.96 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16245), channel_id=650, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.152 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.96), dimensions={1,0,2,3,4}
  %reshape.16247 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.152)
  %transpose.153 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.16247), dimensions={1,0,2,3}
  %copy.3257 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.153)
  %get-tuple-element.1041 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.8), index=1
  %copy.3258 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1041)
  %dot.651 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3257, %copy.3258), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3259 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.651)
  %negate.223 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3259)
  %exponential.208 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.223)
  %add.3845 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.208, %broadcast.5440)
  %divide.777 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3845)
  %multiply.3932 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3259, %divide.777)
  %copy.3260 = bf16[1,4096,4096]{2,1,0} copy(%copy.3242)
  %copy.3261 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.487)
  %dot.652 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3260, %copy.3261), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16251 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.652)
  %all-to-all.97 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.16251), channel_id=651, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.154 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.97), dimensions={2,0,1,3,4}
  %reshape.16252 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.154)
  %transpose.155 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.16252), dimensions={2,0,3,1}
  %copy.3262 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.155)
  %get-tuple-element.1042 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.8), index=3
  %copy.3263 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1042)
  %dot.653 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3262, %copy.3263), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.3935 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3932, %dot.653)
  %copy.3264 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.3935)
  %get-tuple-element.1043 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.8), index=2
  %copy.3265 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1043)
  %dot.654 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3264, %copy.3265), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.655 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3257, %copy.3265), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3266 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.655)
  %multiply.3936 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.653, %copy.3266)
  %multiply.3937 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3936, %divide.777)
  %multiply.3938 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3259, %multiply.3936)
  %subtract.427 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.777)
  %multiply.3939 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.777, %subtract.427)
  %multiply.3940 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3938, %multiply.3939)
  %add.3846 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.3937, %multiply.3940)
  %copy.3267 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.3846)
  %dot.656 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3267, %copy.3258), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.3847 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.654, %dot.656)
  %copy.3268 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.3847)
  %transpose.156 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3268), dimensions={1,0,2,3}
  %reshape.16256 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.156)
  %all-to-all.98 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16256), channel_id=652, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.157 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.98), dimensions={1,0,2,3,4}
  %reshape.16257 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.157)
  %dot.657 = bf16[1,4096,4096]{2,1,0} dot(%convert.1722, %reshape.16257), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.16259 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1290)
  %compare.2445 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.266, %broadcast.7265), direction=GE
  %compare.2446 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.266, %broadcast.7267), direction=LE
  %and.309 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2445, %compare.2446)
  %reduce.608 = pred[1,4096,2]{2,1,0} reduce(%and.309, %constant.4025), dimensions={3}, to_apply=%region_576.16148
  %multiply.3944 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.3932, %copy.3266)
  %dot.658 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.3944, %copy.3263), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3269 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.658)
  %reshape.16262 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3269)
  %all-to-all.99 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16262), channel_id=653, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.158 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.99), dimensions={1,0,2,3,4}
  %reshape.16263 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.158)
  %dot.659 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3260, %reshape.16263), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3270 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.659)
  %pad.8 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3270, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.3948 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.8, %convert.1721)
  %reduce.609 = bf16[1,4096,8]{2,1,0} reduce(%multiply.3948, %constant.3795), dimensions={3}, to_apply=%region_574.16130
  %multiply.3949 = bf16[1,4096,8]{2,1,0} multiply(%reduce.609, %convert.1719)
  %gather.49 = bf16[1,4096,2]{2,1,0} gather(%multiply.3949, %subtract.426), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1492 = bf16[1,4096,2]{2,1,0} select(%reduce.608, %gather.49, %broadcast.5432)
  %select.1493 = bf16[1,4096,2]{2,1,0} select(%compare.2439, %select.1492, %broadcast.5432)
  %convert.1724 = f32[1,4096,2]{2,1,0} convert(%select.1493)
  %divide.778 = f32[1,4096,2]{2,1,0} divide(%convert.1724, %broadcast.7978)
  %multiply.3950 = f32[1,4096]{1,0} multiply(%reduce.605, %reduce.605)
  %divide.779 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.3950)
  %broadcast.7995 = f32[1,4096,2]{2,1,0} broadcast(%divide.779), dimensions={0,1}
  %multiply.3952 = f32[1,4096,2]{2,1,0} multiply(%convert.1724, %broadcast.7995)
  %multiply.3953 = f32[1,4096,2]{2,1,0} multiply(%multiply.3952, %exponential.207)
  %reduce.610 = f32[1,4096]{1,0} reduce(%multiply.3953, %constant.3956), dimensions={2}, to_apply=%region_577.16162
  %negate.224 = f32[1,4096]{1,0} negate(%reduce.610)
  %broadcast.7997 = f32[1,4096,2]{2,1,0} broadcast(%negate.224), dimensions={0,1}
  %add.3849 = f32[1,4096,2]{2,1,0} add(%divide.778, %broadcast.7997)
  %multiply.3954 = f32[1,4096,2]{2,1,0} multiply(%add.3849, %exponential.207)
  %convert.1725 = bf16[1,4096,2]{2,1,0} convert(%multiply.3954)
  %scatter.580 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.16259, %convert.1725), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_579.16182
  %copy.3271 = bf16[1,4096,8]{2,1,0} copy(%scatter.580)
  %dot.660 = bf16[1,4096,4096]{2,1,0} dot(%copy.3271, %all-gather.286), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3850 = bf16[1,4096,4096]{1,2,0} add(%dot.657, %dot.660)
  %copy.3272 = bf16[1,4096,4096]{2,1,0} copy(%add.3850)
  %multiply.3955 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3272, %broadcast.7969)
  %convert.1726 = f32[1,4096,4096]{2,1,0} convert(%multiply.3955)
  %multiply.3956 = f32[1,4096,4096]{2,1,0} multiply(%convert.1726, %broadcast.7968)
  %multiply.3957 = f32[1,4096,4096]{2,1,0} multiply(%convert.1712, %convert.1726)
  %reduce.611 = f32[1,4096]{1,0} reduce(%multiply.3957, %constant.3956), dimensions={2}, to_apply=%region_582.16211
  %reshape.16279 = f32[1,4096,1]{2,1,0} reshape(%reduce.611)
  %divide.780 = f32[1,4096,1]{2,1,0} divide(%rsqrt.146, %reshape.16205)
  %multiply.3958 = f32[1,4096,1]{2,1,0} multiply(%divide.780, %broadcast.7210)
  %multiply.3959 = f32[1,4096,1]{2,1,0} multiply(%reshape.16279, %multiply.3958)
  %multiply.3960 = f32[1,4096,1]{2,1,0} multiply(%multiply.3959, %broadcast.7211)
  %reshape.16280 = f32[1,4096]{1,0} reshape(%multiply.3960)
  %broadcast.8004 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16280), dimensions={0,1}
  %multiply.3961 = f32[1,4096,4096]{2,1,0} multiply(%convert.1712, %broadcast.8004)
  %add.3851 = f32[1,4096,4096]{2,1,0} add(%multiply.3956, %multiply.3961)
  %convert.1727 = bf16[1,4096,4096]{2,1,0} convert(%add.3851)
  %add.3852 = bf16[1,4096,4096]{2,1,0} add(%copy.3242, %convert.1727)
  %get-tuple-element.1044 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.150), index=1
  %get-tuple-element.1045 = u32[2,4]{1,0} get-tuple-element(%custom-call.150), index=2
  %copy.3273 = bf16[1,4096,4096]{2,1,0} copy(%add.3852)
  %dot.661 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3273, %all-gather.285), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3274 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.661)
  %custom-call.152 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3246, %copy.3248, %copy.3249, %constant.3999, %get-tuple-element.1044, /*index=5*/%get-tuple-element.1045, %get-tuple-element.1029, %copy.3274, %scatter.572, %scatter.577, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1052 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.152), index=2
  %copy.3275 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1052)
  %dot.662 = bf16[1,4096,4096]{2,1,0} dot(%copy.3275, %all-gather.284), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1053 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.152), index=1
  %copy.3276 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1053)
  %slice.488 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3276), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.3963 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.488, %broadcast.7944)
  %slice.489 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3276), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.3966 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.489, %broadcast.7943)
  %add.3867 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3963, %multiply.3966)
  %multiply.3967 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.488, %broadcast.7943)
  %negate.225 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.489)
  %multiply.3968 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.225, %broadcast.7944)
  %add.3869 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.3967, %multiply.3968)
  %concatenate.271 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.3867, %add.3869), dimensions={3}
  %dot.663 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.271, %all-gather.283), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3870 = bf16[1,4096,4096]{2,1,0} add(%dot.662, %dot.663)
  %copy.3277 = bf16[1,4096,4096]{2,1,0} copy(%add.3870)
  %get-tuple-element.1054 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.152), index=0
  %copy.3278 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1054)
  %slice.490 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3278), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.3971 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.490, %broadcast.7933)
  %slice.491 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3278), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.3973 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.491, %broadcast.7932)
  %add.3871 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3971, %multiply.3973)
  %multiply.3974 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.490, %broadcast.7932)
  %negate.226 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.491)
  %multiply.3975 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.226, %broadcast.7933)
  %add.3872 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3974, %multiply.3975)
  %concatenate.272 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.3871, %add.3872), dimensions={3}
  %dot.664 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.272, %all-gather.282), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3279 = bf16[1,4096,4096]{2,1,0} copy(%dot.664)
  %add.3873 = bf16[1,4096,4096]{2,1,0} add(%copy.3277, %copy.3279)
  %copy.3280 = bf16[1,4096,4096]{2,1,0} copy(%add.3873)
  %multiply.3976 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3280, %broadcast.7928)
  %convert.1731 = f32[1,4096,4096]{2,1,0} convert(%multiply.3976)
  %multiply.3977 = f32[1,4096,4096]{2,1,0} multiply(%convert.1731, %broadcast.7927)
  %multiply.3978 = f32[1,4096,4096]{2,1,0} multiply(%convert.1697, %convert.1731)
  %reduce.612 = f32[1,4096]{1,0} reduce(%multiply.3978, %constant.3956), dimensions={2}, to_apply=%region_586.16322
  %reshape.16329 = f32[1,4096,1]{2,1,0} reshape(%reduce.612)
  %divide.783 = f32[1,4096,1]{2,1,0} divide(%rsqrt.145, %reshape.16152)
  %multiply.3980 = f32[1,4096,1]{2,1,0} multiply(%divide.783, %broadcast.7210)
  %multiply.3981 = f32[1,4096,1]{2,1,0} multiply(%reshape.16329, %multiply.3980)
  %multiply.3982 = f32[1,4096,1]{2,1,0} multiply(%multiply.3981, %broadcast.7211)
  %reshape.16330 = f32[1,4096]{1,0} reshape(%multiply.3982)
  %broadcast.8029 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16330), dimensions={0,1}
  %multiply.3983 = f32[1,4096,4096]{2,1,0} multiply(%convert.1697, %broadcast.8029)
  %add.3874 = f32[1,4096,4096]{2,1,0} add(%multiply.3977, %multiply.3983)
  %convert.1732 = bf16[1,4096,4096]{2,1,0} convert(%add.3874)
  %add.3875 = bf16[1,4096,4096]{2,1,0} add(%add.3852, %convert.1732)
  %copy.3281 = bf16[1,4096,4096]{2,1,0} copy(%add.3875)
  %tuple.268 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.233, %param.234, %param.235, %param.236, %param.232, /*index=5*/%param.227, %param.229, %param.231, %param.228, %param.230, /*index=10*/%copy.2678, %param.10, %param.7, %copy.3281)
  %opt-barrier.9 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.268)
  %get-tuple-element.1055 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.9), index=13
  %copy.3282 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1055)
  %iota.2014 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1056 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.9), index=10
  %copy.3283 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1056)
  %convert.1733 = f32[1,4096,4096]{2,1,0} convert(%copy.3283)
  %multiply.3985 = f32[1,4096,4096]{2,1,0} multiply(%convert.1733, %convert.1733)
  %reduce.613 = f32[1,4096]{1,0} reduce(%multiply.3985, %constant.3956), dimensions={2}, to_apply=%region_588.16365
  %multiply.3986 = f32[1,4096]{1,0} multiply(%reduce.613, %broadcast.5380)
  %add.3877 = f32[1,4096]{1,0} add(%multiply.3986, %broadcast.5381)
  %reshape.16332 = f32[1,4096,1]{2,1,0} reshape(%add.3877)
  %rsqrt.147 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.16332)
  %reshape.16333 = f32[1,4096]{1,0} reshape(%rsqrt.147)
  %broadcast.8034 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16333), dimensions={0,1}
  %multiply.3987 = f32[1,4096,4096]{2,1,0} multiply(%convert.1733, %broadcast.8034)
  %convert.1734 = bf16[1,4096,4096]{2,1,0} convert(%multiply.3987)
  %get-tuple-element.1057 = bf16[4096]{0} get-tuple-element(%opt-barrier.9), index=5
  %broadcast.8035 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1057), dimensions={2}
  %multiply.3988 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1734, %broadcast.8035)
  %copy.3284 = bf16[1,4096,4096]{2,1,0} copy(%multiply.3988)
  %copy.3285 = bf16[1,4096,4096]{2,1,0} copy(%copy.3284)
  %get-tuple-element.1058 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.9), index=8
  %all-gather.289 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1058), channel_id=656, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.665 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3285, %all-gather.289), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.492 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.665), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1059 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.9), index=12
  %convert.1735 = f32[1,4096]{1,0} convert(%get-tuple-element.1059)
  %broadcast.8036 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1735), dimensions={0,1}
  %divide.784 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.8036, %broadcast.5388)
  %cosine.83 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.784)
  %convert.1737 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.83)
  %reshape.16335 = bf16[1,4096,64]{2,1,0} reshape(%convert.1737)
  %broadcast.8039 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.16335), dimensions={0,1,3}
  %multiply.3992 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.492, %broadcast.8039)
  %slice.493 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.665), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.82 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.784)
  %convert.1738 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.82)
  %reshape.16337 = bf16[1,4096,64]{2,1,0} reshape(%convert.1738)
  %broadcast.8040 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.16337), dimensions={0,1,3}
  %multiply.3994 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.493, %broadcast.8040)
  %subtract.431 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.3992, %multiply.3994)
  %multiply.3995 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.493, %broadcast.8039)
  %multiply.3996 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.492, %broadcast.8040)
  %add.3878 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.3995, %multiply.3996)
  %concatenate.273 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.431, %add.3878), dimensions={3}
  %copy.3286 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.273)
  %get-tuple-element.1060 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.9), index=6
  %all-gather.290 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1060), channel_id=657, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.666 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3285, %all-gather.290), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.494 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.666), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.8046 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.16335), dimensions={0,1,3}
  %multiply.4000 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.494, %broadcast.8046)
  %slice.495 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.666), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.8047 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.16337), dimensions={0,1,3}
  %multiply.4003 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.495, %broadcast.8047)
  %subtract.432 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.4000, %multiply.4003)
  %multiply.4004 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.495, %broadcast.8046)
  %multiply.4006 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.494, %broadcast.8047)
  %add.3879 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4004, %multiply.4006)
  %concatenate.274 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.432, %add.3879), dimensions={3}
  %copy.3288 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.274)
  %get-tuple-element.1061 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.9), index=9
  %all-gather.291 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1061), channel_id=658, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.667 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3285, %all-gather.291), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3289 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.667)
  %get-tuple-element.1062 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.9), index=11
  %broadcast.8050 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1062), dimensions={0,1}
  %broadcast.8051 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1062), dimensions={0,2}
  %compare.2473 = pred[1,4096,4096]{2,1,0} compare(%broadcast.8050, %broadcast.8051), direction=EQ
  %and.314 = pred[1,4096,4096]{2,1,0} and(%compare.2473, %broadcast.5406)
  %select.1514 = f32[1,4096,4096]{2,1,0} select(%and.314, %broadcast.5407, %broadcast.5408)
  %compare.2475 = pred[1,4096,4096]{2,1,0} compare(%select.1514, %broadcast.5407), direction=NE
  %not.105 = pred[1,4096,4096]{2,1,0} not(%compare.2475)
  %convert.1743 = s32[1,4096,4096]{2,1,0} convert(%not.105)
  %reduce.614 = s32[1,4096]{1,0} reduce(%convert.1743, %constant.3783), dimensions={1}, to_apply=%region_589.16499
  %reshape.16346 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.614)
  %slice.496 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.16346), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.16348 = s32[1,1]{1,0} reshape(%slice.496)
  %reshape.16363 = s32[1]{0} reshape(%reshape.16348)
  %compare.2488 = pred[1]{0} compare(%reshape.16363, %constant.4022), direction=LT
  %select.1524 = s32[1]{0} select(%compare.2488, %reshape.11470, %reshape.16363)
  %scatter.595 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1524), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.41
  %reduce.615 = s32[1,4096]{1,0} reduce(%convert.1743, %constant.3783), dimensions={2}, to_apply=%region_590.16507
  %reshape.16349 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.615)
  %reduce.616 = s32[1,1]{1,0} reduce(%reshape.16349, %constant.4014), dimensions={3,2}, to_apply=%region_591.16512
  %reshape.16382 = s32[1]{0} reshape(%reduce.616)
  %compare.2501 = pred[1]{0} compare(%reshape.16382, %constant.4022), direction=LT
  %select.1534 = s32[1]{0} select(%compare.2501, %reshape.11470, %reshape.16382)
  %scatter.600 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1534), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.41
  %custom-call.153 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3286, %copy.3288, %copy.3289, %constant.3999, %scatter.595, /*index=5*/%scatter.600, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1068 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.153), index=0
  %copy.3290 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1068)
  %get-tuple-element.1069 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.9), index=7
  %all-gather.292 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1069), channel_id=659, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.668 = bf16[1,4096,4096]{2,1,0} dot(%copy.3290, %all-gather.292), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3291 = bf16[1,4096,4096]{2,1,0} copy(%dot.668)
  %add.3894 = bf16[1,4096,4096]{2,1,0} add(%copy.3283, %copy.3291)
  %convert.1747 = f32[1,4096,4096]{2,1,0} convert(%add.3894)
  %multiply.4008 = f32[1,4096,4096]{2,1,0} multiply(%convert.1747, %convert.1747)
  %reduce.617 = f32[1,4096]{1,0} reduce(%multiply.4008, %constant.3956), dimensions={2}, to_apply=%region_592.16528
  %multiply.4009 = f32[1,4096]{1,0} multiply(%reduce.617, %broadcast.5380)
  %add.3895 = f32[1,4096]{1,0} add(%multiply.4009, %broadcast.5381)
  %reshape.16384 = f32[1,4096,1]{2,1,0} reshape(%add.3895)
  %rsqrt.148 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.16384)
  %reshape.16385 = f32[1,4096]{1,0} reshape(%rsqrt.148)
  %broadcast.8063 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16385), dimensions={0,1}
  %multiply.4011 = f32[1,4096,4096]{2,1,0} multiply(%convert.1747, %broadcast.8063)
  %convert.1748 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4011)
  %get-tuple-element.1070 = bf16[4096]{0} get-tuple-element(%opt-barrier.9), index=4
  %broadcast.8064 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1070), dimensions={2}
  %multiply.4012 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1748, %broadcast.8064)
  %copy.3292 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4012)
  %get-tuple-element.1071 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.9), index=0
  %all-gather.293 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1071), channel_id=660, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.669 = bf16[1,4096,8]{2,1,0} dot(%copy.3292, %all-gather.293), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3293 = bf16[1,4096,8]{2,1,0} copy(%dot.669)
  %reshape.16386 = bf16[4096,8]{1,0} reshape(%copy.3293)
  %custom-call.154 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.16386), custom_call_target="TopK", called_computations={%compare-greater-than.41.clone}
  %get-tuple-element.1072 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.154), index=0
  %get-tuple-element.1073 = s32[4096,2]{1,0} get-tuple-element(%custom-call.154), index=1
  %add.3896 = s32[4096,2]{1,0} add(%get-tuple-element.1073, %broadcast.5420)
  %sort.207 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1072, %add.3896), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.41
  %get-tuple-element.1075 = s32[4096,2]{1,0} get-tuple-element(%sort.207), index=1
  %slice.498 = s32[4096,2]{1,0} slice(%get-tuple-element.1075), slice={[0:4096], [0:2]}
  %all-gather.295 = s32[32768,2]{1,0} all-gather(%slice.498), channel_id=662, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1334 = s32[4096,2]{1,0} dynamic-slice(%all-gather.295, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.16390 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1334)
  %compare.2502 = pred[1,4096,2]{2,1,0} compare(%reshape.16390, %broadcast.5421), direction=LT
  %add.3897 = s32[1,4096,2]{2,1,0} add(%reshape.16390, %broadcast.5422)
  %select.1535 = s32[1,4096,2]{2,1,0} select(%compare.2502, %add.3897, %reshape.16390)
  %reshape.16391 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1535)
  %concatenate.275 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2014, %reshape.16391), dimensions={3}
  %subtract.438 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.275, %broadcast.5433)
  %scatter.601 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.438, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_595.16607
  %gather.50 = u32[1,4096,2]{2,1,0} gather(%scatter.601, %subtract.438), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2503 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.50), direction=EQ
  %get-tuple-element.1074 = bf16[4096,2]{1,0} get-tuple-element(%sort.207), index=0
  %slice.497 = bf16[4096,2]{1,0} slice(%get-tuple-element.1074), slice={[0:4096], [0:2]}
  %all-gather.294 = bf16[32768,2]{1,0} all-gather(%slice.497), channel_id=661, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1344 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.294, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1751 = f32[4096,2]{1,0} convert(%dynamic-slice.1344)
  %reshape.16410 = f32[1,4096,2]{2,1,0} reshape(%convert.1751)
  %reduce.618 = f32[4096]{0} reduce(%convert.1751, %constant.4073), dimensions={1}, to_apply=%region_593.16557
  %reshape.16412 = f32[1,4096]{1,0} reshape(%reduce.618)
  %broadcast.8071 = f32[1,4096,2]{2,1,0} broadcast(%reshape.16412), dimensions={0,1}
  %subtract.437 = f32[1,4096,2]{2,1,0} subtract(%reshape.16410, %broadcast.8071)
  %exponential.209 = f32[1,4096,2]{2,1,0} exponential(%subtract.437)
  %reduce.619 = f32[1,4096]{1,0} reduce(%exponential.209, %constant.3956), dimensions={2}, to_apply=%region_594.16569
  %broadcast.8072 = f32[1,4096,2]{2,1,0} broadcast(%reduce.619), dimensions={0,1}
  %divide.788 = f32[1,4096,2]{2,1,0} divide(%exponential.209, %broadcast.8072)
  %convert.1752 = bf16[1,4096,2]{2,1,0} convert(%divide.788)
  %select.1536 = bf16[1,4096,2]{2,1,0} select(%compare.2503, %convert.1752, %broadcast.5432)
  %scatter.602 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.438, %select.1536), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_596.16616
  %broadcast.8076 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.16390), dimensions={0,1,2}
  %iota.2022 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2504 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.8076, %iota.2022), direction=EQ
  %convert.1753 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2504)
  %reshape.16423 = s32[1,8192,8]{2,1,0} reshape(%convert.1753)
  %copy.3294 = s32[1,8192,8]{2,1,0} copy(%reshape.16423)
  %reduce-window.334 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3294, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.8
  %reshape.16426 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.334)
  %copy.3295 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.16426)
  %compare.2505 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3295, %broadcast.5435), direction=LE
  %select.1537 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2505, %convert.1753, %broadcast.5436)
  %reduce.620 = s32[1,4096,8]{2,1,0} reduce(%select.1537, %constant.3783), dimensions={2}, to_apply=%region_597.16630
  %convert.1754 = bf16[1,4096,8]{2,1,0} convert(%reduce.620)
  %multiply.4020 = bf16[1,4096,8]{2,1,0} multiply(%scatter.602, %convert.1754)
  %broadcast.8078 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4020), dimensions={0,1,2}
  %multiply.4021 = s32[1,8192,8]{2,1,0} multiply(%copy.3294, %reduce-window.334)
  %reshape.16427 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.4021)
  %reduce.621 = s32[1,4096,8]{2,1,0} reduce(%reshape.16427, %constant.3783), dimensions={2}, to_apply=%region_598.16639
  %multiply.4022 = s32[1,4096,8]{2,1,0} multiply(%reduce.621, %reduce.620)
  %broadcast.8080 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4022), dimensions={0,1,2}
  %iota.2023 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2506 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.8080, %iota.2023), direction=EQ
  %convert.1755 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2506)
  %convert.1756 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1755)
  %multiply.4023 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.8078, %convert.1756)
  %slice.499 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.4023), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2507 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.499, %broadcast.5439), direction=NE
  %copy.3296 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2507)
  %convert.1757 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3296)
  %dot.670 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1757, %copy.3292), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16431 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.670)
  %all-to-all.100 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16431), channel_id=669, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.159 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.100), dimensions={1,0,2,3,4}
  %reshape.16432 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.159)
  %transpose.160 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.16432), dimensions={1,0,2,3}
  %copy.3297 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.160)
  %get-tuple-element.1080 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.9), index=1
  %copy.3298 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1080)
  %dot.671 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3297, %copy.3298), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3299 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.671)
  %negate.227 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3299)
  %exponential.210 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.227)
  %add.3902 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.210, %broadcast.5440)
  %divide.789 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3902)
  %multiply.4027 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3299, %divide.789)
  %copy.3300 = bf16[1,4096,4096]{2,1,0} copy(%copy.3282)
  %copy.3301 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.499)
  %dot.672 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3300, %copy.3301), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16435 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.672)
  %all-to-all.101 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.16435), channel_id=670, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.161 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.101), dimensions={2,0,1,3,4}
  %reshape.16437 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.161)
  %transpose.162 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.16437), dimensions={2,0,3,1}
  %copy.3302 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.162)
  %get-tuple-element.1081 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.9), index=3
  %copy.3303 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1081)
  %dot.673 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3302, %copy.3303), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.4030 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4027, %dot.673)
  %copy.3304 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.4030)
  %get-tuple-element.1082 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.9), index=2
  %copy.3305 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1082)
  %dot.674 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3304, %copy.3305), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.675 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3297, %copy.3305), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3306 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.675)
  %multiply.4031 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.673, %copy.3306)
  %multiply.4032 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4031, %divide.789)
  %multiply.4033 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3299, %multiply.4031)
  %subtract.439 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.789)
  %multiply.4034 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.789, %subtract.439)
  %multiply.4035 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4033, %multiply.4034)
  %add.3903 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.4032, %multiply.4035)
  %copy.3307 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.3903)
  %dot.676 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3307, %copy.3298), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.3904 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.674, %dot.676)
  %copy.3308 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.3904)
  %transpose.163 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3308), dimensions={1,0,2,3}
  %reshape.16442 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.163)
  %all-to-all.102 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16442), channel_id=671, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.164 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.102), dimensions={1,0,2,3,4}
  %reshape.16443 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.164)
  %dot.677 = bf16[1,4096,4096]{2,1,0} dot(%convert.1757, %reshape.16443), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.16445 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1334)
  %compare.2509 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.275, %broadcast.7265), direction=GE
  %compare.2510 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.275, %broadcast.7267), direction=LE
  %and.319 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2509, %compare.2510)
  %reduce.622 = pred[1,4096,2]{2,1,0} reduce(%and.319, %constant.4025), dimensions={3}, to_apply=%region_601.16724
  %multiply.4038 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4027, %copy.3306)
  %dot.678 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.4038, %copy.3303), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3309 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.678)
  %reshape.16447 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3309)
  %all-to-all.103 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16447), channel_id=672, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.165 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.103), dimensions={1,0,2,3,4}
  %reshape.16448 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.165)
  %dot.679 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3300, %reshape.16448), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3310 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.679)
  %pad.9 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3310, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.4043 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.9, %convert.1756)
  %reduce.623 = bf16[1,4096,8]{2,1,0} reduce(%multiply.4043, %constant.3795), dimensions={3}, to_apply=%region_599.16706
  %multiply.4044 = bf16[1,4096,8]{2,1,0} multiply(%reduce.623, %convert.1754)
  %gather.51 = bf16[1,4096,2]{2,1,0} gather(%multiply.4044, %subtract.438), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1538 = bf16[1,4096,2]{2,1,0} select(%reduce.622, %gather.51, %broadcast.5432)
  %select.1539 = bf16[1,4096,2]{2,1,0} select(%compare.2503, %select.1538, %broadcast.5432)
  %convert.1759 = f32[1,4096,2]{2,1,0} convert(%select.1539)
  %divide.790 = f32[1,4096,2]{2,1,0} divide(%convert.1759, %broadcast.8072)
  %multiply.4046 = f32[1,4096]{1,0} multiply(%reduce.619, %reduce.619)
  %divide.791 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.4046)
  %broadcast.8087 = f32[1,4096,2]{2,1,0} broadcast(%divide.791), dimensions={0,1}
  %multiply.4047 = f32[1,4096,2]{2,1,0} multiply(%convert.1759, %broadcast.8087)
  %multiply.4048 = f32[1,4096,2]{2,1,0} multiply(%multiply.4047, %exponential.209)
  %reduce.624 = f32[1,4096]{1,0} reduce(%multiply.4048, %constant.3956), dimensions={2}, to_apply=%region_602.16738
  %negate.228 = f32[1,4096]{1,0} negate(%reduce.624)
  %broadcast.8088 = f32[1,4096,2]{2,1,0} broadcast(%negate.228), dimensions={0,1}
  %add.3905 = f32[1,4096,2]{2,1,0} add(%divide.790, %broadcast.8088)
  %multiply.4049 = f32[1,4096,2]{2,1,0} multiply(%add.3905, %exponential.209)
  %convert.1760 = bf16[1,4096,2]{2,1,0} convert(%multiply.4049)
  %scatter.603 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.16445, %convert.1760), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_604.16758
  %copy.3311 = bf16[1,4096,8]{2,1,0} copy(%scatter.603)
  %dot.680 = bf16[1,4096,4096]{2,1,0} dot(%copy.3311, %all-gather.293), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3907 = bf16[1,4096,4096]{1,2,0} add(%dot.677, %dot.680)
  %copy.3312 = bf16[1,4096,4096]{2,1,0} copy(%add.3907)
  %multiply.4051 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3312, %broadcast.8064)
  %convert.1761 = f32[1,4096,4096]{2,1,0} convert(%multiply.4051)
  %multiply.4052 = f32[1,4096,4096]{2,1,0} multiply(%convert.1761, %broadcast.8063)
  %multiply.4053 = f32[1,4096,4096]{2,1,0} multiply(%convert.1747, %convert.1761)
  %reduce.625 = f32[1,4096]{1,0} reduce(%multiply.4053, %constant.3956), dimensions={2}, to_apply=%region_607.16787
  %reshape.16465 = f32[1,4096,1]{2,1,0} reshape(%reduce.625)
  %divide.792 = f32[1,4096,1]{2,1,0} divide(%rsqrt.148, %reshape.16384)
  %multiply.4055 = f32[1,4096,1]{2,1,0} multiply(%divide.792, %broadcast.7210)
  %multiply.4056 = f32[1,4096,1]{2,1,0} multiply(%reshape.16465, %multiply.4055)
  %multiply.4057 = f32[1,4096,1]{2,1,0} multiply(%multiply.4056, %broadcast.7211)
  %reshape.16466 = f32[1,4096]{1,0} reshape(%multiply.4057)
  %broadcast.8092 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16466), dimensions={0,1}
  %multiply.4058 = f32[1,4096,4096]{2,1,0} multiply(%convert.1747, %broadcast.8092)
  %add.3908 = f32[1,4096,4096]{2,1,0} add(%multiply.4052, %multiply.4058)
  %convert.1762 = bf16[1,4096,4096]{2,1,0} convert(%add.3908)
  %add.3909 = bf16[1,4096,4096]{2,1,0} add(%copy.3282, %convert.1762)
  %get-tuple-element.1083 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.153), index=1
  %get-tuple-element.1084 = u32[2,4]{1,0} get-tuple-element(%custom-call.153), index=2
  %copy.3313 = bf16[1,4096,4096]{2,1,0} copy(%add.3909)
  %dot.681 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3313, %all-gather.292), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3314 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.681)
  %custom-call.155 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3286, %copy.3288, %copy.3289, %constant.3999, %get-tuple-element.1083, /*index=5*/%get-tuple-element.1084, %get-tuple-element.1068, %copy.3314, %scatter.595, %scatter.600, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1091 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.155), index=2
  %copy.3315 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1091)
  %dot.682 = bf16[1,4096,4096]{2,1,0} dot(%copy.3315, %all-gather.291), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1092 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.155), index=1
  %copy.3316 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1092)
  %slice.500 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3316), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.4060 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.500, %broadcast.8047)
  %slice.501 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3316), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.4062 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.501, %broadcast.8046)
  %add.3923 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4060, %multiply.4062)
  %multiply.4063 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.500, %broadcast.8046)
  %negate.229 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.501)
  %multiply.4064 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.229, %broadcast.8047)
  %add.3924 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4063, %multiply.4064)
  %concatenate.280 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.3923, %add.3924), dimensions={3}
  %dot.683 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.280, %all-gather.290), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3925 = bf16[1,4096,4096]{2,1,0} add(%dot.682, %dot.683)
  %copy.3317 = bf16[1,4096,4096]{2,1,0} copy(%add.3925)
  %get-tuple-element.1093 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.155), index=0
  %copy.3318 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1093)
  %slice.502 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3318), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.4066 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.502, %broadcast.8040)
  %slice.503 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3318), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.4068 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.503, %broadcast.8039)
  %add.3926 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4066, %multiply.4068)
  %multiply.4069 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.502, %broadcast.8039)
  %negate.230 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.503)
  %multiply.4070 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.230, %broadcast.8040)
  %add.3927 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4069, %multiply.4070)
  %concatenate.281 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.3926, %add.3927), dimensions={3}
  %dot.684 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.281, %all-gather.289), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3319 = bf16[1,4096,4096]{2,1,0} copy(%dot.684)
  %add.3928 = bf16[1,4096,4096]{2,1,0} add(%copy.3317, %copy.3319)
  %copy.3320 = bf16[1,4096,4096]{2,1,0} copy(%add.3928)
  %multiply.4071 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3320, %broadcast.8035)
  %convert.1765 = f32[1,4096,4096]{2,1,0} convert(%multiply.4071)
  %multiply.4072 = f32[1,4096,4096]{2,1,0} multiply(%convert.1765, %broadcast.8034)
  %multiply.4073 = f32[1,4096,4096]{2,1,0} multiply(%convert.1733, %convert.1765)
  %reduce.626 = f32[1,4096]{1,0} reduce(%multiply.4073, %constant.3956), dimensions={2}, to_apply=%region_611.16898
  %reshape.16518 = f32[1,4096,1]{2,1,0} reshape(%reduce.626)
  %divide.795 = f32[1,4096,1]{2,1,0} divide(%rsqrt.147, %reshape.16332)
  %multiply.4074 = f32[1,4096,1]{2,1,0} multiply(%divide.795, %broadcast.7210)
  %multiply.4075 = f32[1,4096,1]{2,1,0} multiply(%reshape.16518, %multiply.4074)
  %multiply.4076 = f32[1,4096,1]{2,1,0} multiply(%multiply.4075, %broadcast.7211)
  %reshape.16519 = f32[1,4096]{1,0} reshape(%multiply.4076)
  %broadcast.8113 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16519), dimensions={0,1}
  %multiply.4077 = f32[1,4096,4096]{2,1,0} multiply(%convert.1733, %broadcast.8113)
  %add.3929 = f32[1,4096,4096]{2,1,0} add(%multiply.4072, %multiply.4077)
  %convert.1766 = bf16[1,4096,4096]{2,1,0} convert(%add.3929)
  %add.3930 = bf16[1,4096,4096]{2,1,0} add(%add.3909, %convert.1766)
  %copy.3321 = bf16[1,4096,4096]{2,1,0} copy(%add.3930)
  %tuple.273 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.223, %param.224, %param.225, %param.226, %param.222, /*index=5*/%param.217, %param.219, %param.221, %param.218, %param.220, /*index=10*/%copy.2654, %param.10, %param.7, %copy.3321)
  %opt-barrier.10 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.273)
  %get-tuple-element.1094 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.10), index=13
  %copy.3322 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1094)
  %iota.2025 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1095 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.10), index=10
  %copy.3323 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1095)
  %convert.1767 = f32[1,4096,4096]{2,1,0} convert(%copy.3323)
  %multiply.4079 = f32[1,4096,4096]{2,1,0} multiply(%convert.1767, %convert.1767)
  %reduce.627 = f32[1,4096]{1,0} reduce(%multiply.4079, %constant.3956), dimensions={2}, to_apply=%region_613.16941
  %multiply.4080 = f32[1,4096]{1,0} multiply(%reduce.627, %broadcast.5380)
  %add.3932 = f32[1,4096]{1,0} add(%multiply.4080, %broadcast.5381)
  %reshape.16521 = f32[1,4096,1]{2,1,0} reshape(%add.3932)
  %rsqrt.149 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.16521)
  %reshape.16522 = f32[1,4096]{1,0} reshape(%rsqrt.149)
  %broadcast.8117 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16522), dimensions={0,1}
  %multiply.4081 = f32[1,4096,4096]{2,1,0} multiply(%convert.1767, %broadcast.8117)
  %convert.1768 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4081)
  %get-tuple-element.1096 = bf16[4096]{0} get-tuple-element(%opt-barrier.10), index=5
  %broadcast.8118 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1096), dimensions={2}
  %multiply.4082 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1768, %broadcast.8118)
  %copy.3324 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4082)
  %copy.3325 = bf16[1,4096,4096]{2,1,0} copy(%copy.3324)
  %get-tuple-element.1097 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.10), index=8
  %all-gather.296 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1097), channel_id=675, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.685 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3325, %all-gather.296), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.504 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.685), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1098 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.10), index=12
  %convert.1769 = f32[1,4096]{1,0} convert(%get-tuple-element.1098)
  %broadcast.8119 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1769), dimensions={0,1}
  %divide.796 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.8119, %broadcast.5388)
  %cosine.85 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.796)
  %convert.1771 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.85)
  %reshape.16524 = bf16[1,4096,64]{2,1,0} reshape(%convert.1771)
  %broadcast.8122 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.16524), dimensions={0,1,3}
  %multiply.4086 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.504, %broadcast.8122)
  %slice.505 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.685), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.84 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.796)
  %convert.1772 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.84)
  %reshape.16526 = bf16[1,4096,64]{2,1,0} reshape(%convert.1772)
  %broadcast.8123 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.16526), dimensions={0,1,3}
  %multiply.4088 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.505, %broadcast.8123)
  %subtract.443 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.4086, %multiply.4088)
  %multiply.4089 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.505, %broadcast.8122)
  %multiply.4090 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.504, %broadcast.8123)
  %add.3933 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4089, %multiply.4090)
  %concatenate.282 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.443, %add.3933), dimensions={3}
  %copy.3326 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.282)
  %get-tuple-element.1099 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.10), index=6
  %all-gather.297 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1099), channel_id=676, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.686 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3325, %all-gather.297), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.506 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.686), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.8133 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.16524), dimensions={0,1,3}
  %multiply.4094 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.506, %broadcast.8133)
  %slice.507 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.686), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.8134 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.16526), dimensions={0,1,3}
  %multiply.4096 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.507, %broadcast.8134)
  %subtract.444 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.4094, %multiply.4096)
  %multiply.4097 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.507, %broadcast.8133)
  %multiply.4098 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.506, %broadcast.8134)
  %add.3934 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4097, %multiply.4098)
  %concatenate.283 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.444, %add.3934), dimensions={3}
  %copy.3328 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.283)
  %get-tuple-element.1100 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.10), index=9
  %all-gather.298 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1100), channel_id=677, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.687 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3325, %all-gather.298), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3329 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.687)
  %get-tuple-element.1101 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.10), index=11
  %broadcast.8137 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1101), dimensions={0,1}
  %broadcast.8138 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1101), dimensions={0,2}
  %compare.2537 = pred[1,4096,4096]{2,1,0} compare(%broadcast.8137, %broadcast.8138), direction=EQ
  %and.324 = pred[1,4096,4096]{2,1,0} and(%compare.2537, %broadcast.5406)
  %select.1560 = f32[1,4096,4096]{2,1,0} select(%and.324, %broadcast.5407, %broadcast.5408)
  %compare.2539 = pred[1,4096,4096]{2,1,0} compare(%select.1560, %broadcast.5407), direction=NE
  %not.106 = pred[1,4096,4096]{2,1,0} not(%compare.2539)
  %convert.1778 = s32[1,4096,4096]{2,1,0} convert(%not.106)
  %reduce.628 = s32[1,4096]{1,0} reduce(%convert.1778, %constant.3783), dimensions={1}, to_apply=%region_614.17075
  %reshape.16536 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.628)
  %slice.508 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.16536), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.16539 = s32[1,1]{1,0} reshape(%slice.508)
  %reshape.16557 = s32[1]{0} reshape(%reshape.16539)
  %compare.2553 = pred[1]{0} compare(%reshape.16557, %constant.4022), direction=LT
  %select.1570 = s32[1]{0} select(%compare.2553, %reshape.11470, %reshape.16557)
  %scatter.618 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1570), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.42
  %reduce.629 = s32[1,4096]{1,0} reduce(%convert.1778, %constant.3783), dimensions={2}, to_apply=%region_615.17083
  %reshape.16540 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.629)
  %reduce.630 = s32[1,1]{1,0} reduce(%reshape.16540, %constant.4014), dimensions={3,2}, to_apply=%region_616.17088
  %reshape.16576 = s32[1]{0} reshape(%reduce.630)
  %compare.2568 = pred[1]{0} compare(%reshape.16576, %constant.4022), direction=LT
  %select.1580 = s32[1]{0} select(%compare.2568, %reshape.11470, %reshape.16576)
  %scatter.623 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1580), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.42
  %custom-call.156 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3326, %copy.3328, %copy.3329, %constant.3999, %scatter.618, /*index=5*/%scatter.623, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1107 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.156), index=0
  %copy.3330 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1107)
  %get-tuple-element.1108 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.10), index=7
  %all-gather.299 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1108), channel_id=678, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.688 = bf16[1,4096,4096]{2,1,0} dot(%copy.3330, %all-gather.299), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3331 = bf16[1,4096,4096]{2,1,0} copy(%dot.688)
  %add.3948 = bf16[1,4096,4096]{2,1,0} add(%copy.3323, %copy.3331)
  %convert.1783 = f32[1,4096,4096]{2,1,0} convert(%add.3948)
  %multiply.4100 = f32[1,4096,4096]{2,1,0} multiply(%convert.1783, %convert.1783)
  %reduce.631 = f32[1,4096]{1,0} reduce(%multiply.4100, %constant.3956), dimensions={2}, to_apply=%region_617.17104
  %multiply.4101 = f32[1,4096]{1,0} multiply(%reduce.631, %broadcast.5380)
  %add.3949 = f32[1,4096]{1,0} add(%multiply.4101, %broadcast.5381)
  %reshape.16578 = f32[1,4096,1]{2,1,0} reshape(%add.3949)
  %rsqrt.150 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.16578)
  %reshape.16579 = f32[1,4096]{1,0} reshape(%rsqrt.150)
  %broadcast.8150 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16579), dimensions={0,1}
  %multiply.4102 = f32[1,4096,4096]{2,1,0} multiply(%convert.1783, %broadcast.8150)
  %convert.1784 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4102)
  %get-tuple-element.1109 = bf16[4096]{0} get-tuple-element(%opt-barrier.10), index=4
  %broadcast.8151 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1109), dimensions={2}
  %multiply.4103 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1784, %broadcast.8151)
  %copy.3332 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4103)
  %get-tuple-element.1110 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.10), index=0
  %all-gather.300 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1110), channel_id=679, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.689 = bf16[1,4096,8]{2,1,0} dot(%copy.3332, %all-gather.300), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3333 = bf16[1,4096,8]{2,1,0} copy(%dot.689)
  %reshape.16581 = bf16[4096,8]{1,0} reshape(%copy.3333)
  %custom-call.157 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.16581), custom_call_target="TopK", called_computations={%compare-greater-than.42.clone}
  %get-tuple-element.1111 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.157), index=0
  %get-tuple-element.1112 = s32[4096,2]{1,0} get-tuple-element(%custom-call.157), index=1
  %add.3950 = s32[4096,2]{1,0} add(%get-tuple-element.1112, %broadcast.5420)
  %sort.212 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1111, %add.3950), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.42
  %get-tuple-element.1114 = s32[4096,2]{1,0} get-tuple-element(%sort.212), index=1
  %slice.510 = s32[4096,2]{1,0} slice(%get-tuple-element.1114), slice={[0:4096], [0:2]}
  %all-gather.302 = s32[32768,2]{1,0} all-gather(%slice.510), channel_id=681, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1378 = s32[4096,2]{1,0} dynamic-slice(%all-gather.302, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.16585 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1378)
  %compare.2569 = pred[1,4096,2]{2,1,0} compare(%reshape.16585, %broadcast.5421), direction=LT
  %add.3951 = s32[1,4096,2]{2,1,0} add(%reshape.16585, %broadcast.5422)
  %select.1581 = s32[1,4096,2]{2,1,0} select(%compare.2569, %add.3951, %reshape.16585)
  %reshape.16586 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1581)
  %concatenate.284 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2025, %reshape.16586), dimensions={3}
  %subtract.450 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.284, %broadcast.5433)
  %scatter.624 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.450, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_620.17183
  %gather.52 = u32[1,4096,2]{2,1,0} gather(%scatter.624, %subtract.450), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2570 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.52), direction=EQ
  %get-tuple-element.1113 = bf16[4096,2]{1,0} get-tuple-element(%sort.212), index=0
  %slice.509 = bf16[4096,2]{1,0} slice(%get-tuple-element.1113), slice={[0:4096], [0:2]}
  %all-gather.301 = bf16[32768,2]{1,0} all-gather(%slice.509), channel_id=680, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1388 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.301, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1787 = f32[4096,2]{1,0} convert(%dynamic-slice.1388)
  %reshape.16608 = f32[1,4096,2]{2,1,0} reshape(%convert.1787)
  %reduce.632 = f32[4096]{0} reduce(%convert.1787, %constant.4073), dimensions={1}, to_apply=%region_618.17133
  %reshape.16609 = f32[1,4096]{1,0} reshape(%reduce.632)
  %broadcast.8158 = f32[1,4096,2]{2,1,0} broadcast(%reshape.16609), dimensions={0,1}
  %subtract.449 = f32[1,4096,2]{2,1,0} subtract(%reshape.16608, %broadcast.8158)
  %exponential.211 = f32[1,4096,2]{2,1,0} exponential(%subtract.449)
  %reduce.633 = f32[1,4096]{1,0} reduce(%exponential.211, %constant.3956), dimensions={2}, to_apply=%region_619.17145
  %broadcast.8159 = f32[1,4096,2]{2,1,0} broadcast(%reduce.633), dimensions={0,1}
  %divide.800 = f32[1,4096,2]{2,1,0} divide(%exponential.211, %broadcast.8159)
  %convert.1788 = bf16[1,4096,2]{2,1,0} convert(%divide.800)
  %select.1582 = bf16[1,4096,2]{2,1,0} select(%compare.2570, %convert.1788, %broadcast.5432)
  %scatter.625 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.450, %select.1582), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_621.17192
  %broadcast.8161 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.16585), dimensions={0,1,2}
  %iota.2034 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2571 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.8161, %iota.2034), direction=EQ
  %convert.1789 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2571)
  %reshape.16618 = s32[1,8192,8]{2,1,0} reshape(%convert.1789)
  %copy.3334 = s32[1,8192,8]{2,1,0} copy(%reshape.16618)
  %reduce-window.339 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3334, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.9
  %reshape.16621 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.339)
  %copy.3335 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.16621)
  %compare.2572 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3335, %broadcast.5435), direction=LE
  %select.1583 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2572, %convert.1789, %broadcast.5436)
  %reduce.634 = s32[1,4096,8]{2,1,0} reduce(%select.1583, %constant.3783), dimensions={2}, to_apply=%region_622.17206
  %convert.1790 = bf16[1,4096,8]{2,1,0} convert(%reduce.634)
  %multiply.4109 = bf16[1,4096,8]{2,1,0} multiply(%scatter.625, %convert.1790)
  %broadcast.8163 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4109), dimensions={0,1,2}
  %multiply.4110 = s32[1,8192,8]{2,1,0} multiply(%copy.3334, %reduce-window.339)
  %reshape.16623 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.4110)
  %reduce.635 = s32[1,4096,8]{2,1,0} reduce(%reshape.16623, %constant.3783), dimensions={2}, to_apply=%region_623.17215
  %multiply.4112 = s32[1,4096,8]{2,1,0} multiply(%reduce.635, %reduce.634)
  %broadcast.8164 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4112), dimensions={0,1,2}
  %iota.2036 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2573 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.8164, %iota.2036), direction=EQ
  %convert.1791 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2573)
  %convert.1792 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1791)
  %multiply.4113 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.8163, %convert.1792)
  %slice.511 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.4113), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2574 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.511, %broadcast.5439), direction=NE
  %copy.3336 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2574)
  %convert.1794 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3336)
  %dot.690 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1794, %copy.3332), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16626 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.690)
  %all-to-all.104 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16626), channel_id=688, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.166 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.104), dimensions={1,0,2,3,4}
  %reshape.16627 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.166)
  %transpose.167 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.16627), dimensions={1,0,2,3}
  %copy.3337 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.167)
  %get-tuple-element.1119 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.10), index=1
  %copy.3338 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1119)
  %dot.691 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3337, %copy.3338), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3339 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.691)
  %negate.231 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3339)
  %exponential.212 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.231)
  %add.3957 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.212, %broadcast.5440)
  %divide.801 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.3957)
  %multiply.4117 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3339, %divide.801)
  %copy.3340 = bf16[1,4096,4096]{2,1,0} copy(%copy.3322)
  %copy.3341 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.511)
  %dot.692 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3340, %copy.3341), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16630 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.692)
  %all-to-all.105 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.16630), channel_id=689, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.168 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.105), dimensions={2,0,1,3,4}
  %reshape.16631 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.168)
  %transpose.169 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.16631), dimensions={2,0,3,1}
  %copy.3342 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.169)
  %get-tuple-element.1120 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.10), index=3
  %copy.3343 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1120)
  %dot.693 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3342, %copy.3343), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.4120 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4117, %dot.693)
  %copy.3344 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.4120)
  %get-tuple-element.1121 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.10), index=2
  %copy.3345 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1121)
  %dot.694 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3344, %copy.3345), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.695 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3337, %copy.3345), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3346 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.695)
  %multiply.4121 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.693, %copy.3346)
  %multiply.4122 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4121, %divide.801)
  %multiply.4123 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3339, %multiply.4121)
  %subtract.451 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.801)
  %multiply.4125 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.801, %subtract.451)
  %multiply.4126 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4123, %multiply.4125)
  %add.3958 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.4122, %multiply.4126)
  %copy.3347 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.3958)
  %dot.696 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3347, %copy.3338), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.3960 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.694, %dot.696)
  %copy.3348 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.3960)
  %transpose.170 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3348), dimensions={1,0,2,3}
  %reshape.16634 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.170)
  %all-to-all.106 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16634), channel_id=690, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.171 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.106), dimensions={1,0,2,3,4}
  %reshape.16636 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.171)
  %dot.697 = bf16[1,4096,4096]{2,1,0} dot(%convert.1794, %reshape.16636), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.16638 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1378)
  %compare.2576 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.284, %broadcast.7265), direction=GE
  %compare.2577 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.284, %broadcast.7267), direction=LE
  %and.329 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2576, %compare.2577)
  %reduce.636 = pred[1,4096,2]{2,1,0} reduce(%and.329, %constant.4025), dimensions={3}, to_apply=%region_626.17300
  %multiply.4129 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4117, %copy.3346)
  %dot.698 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.4129, %copy.3343), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3349 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.698)
  %reshape.16640 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3349)
  %all-to-all.107 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16640), channel_id=691, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.172 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.107), dimensions={1,0,2,3,4}
  %reshape.16641 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.172)
  %dot.699 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3340, %reshape.16641), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3350 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.699)
  %pad.10 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3350, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.4134 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.10, %convert.1792)
  %reduce.637 = bf16[1,4096,8]{2,1,0} reduce(%multiply.4134, %constant.3795), dimensions={3}, to_apply=%region_624.17282
  %multiply.4135 = bf16[1,4096,8]{2,1,0} multiply(%reduce.637, %convert.1790)
  %gather.53 = bf16[1,4096,2]{2,1,0} gather(%multiply.4135, %subtract.450), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1584 = bf16[1,4096,2]{2,1,0} select(%reduce.636, %gather.53, %broadcast.5432)
  %select.1585 = bf16[1,4096,2]{2,1,0} select(%compare.2570, %select.1584, %broadcast.5432)
  %convert.1796 = f32[1,4096,2]{2,1,0} convert(%select.1585)
  %divide.802 = f32[1,4096,2]{2,1,0} divide(%convert.1796, %broadcast.8159)
  %multiply.4136 = f32[1,4096]{1,0} multiply(%reduce.633, %reduce.633)
  %divide.803 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.4136)
  %broadcast.8170 = f32[1,4096,2]{2,1,0} broadcast(%divide.803), dimensions={0,1}
  %multiply.4137 = f32[1,4096,2]{2,1,0} multiply(%convert.1796, %broadcast.8170)
  %multiply.4138 = f32[1,4096,2]{2,1,0} multiply(%multiply.4137, %exponential.211)
  %reduce.638 = f32[1,4096]{1,0} reduce(%multiply.4138, %constant.3956), dimensions={2}, to_apply=%region_627.17314
  %negate.232 = f32[1,4096]{1,0} negate(%reduce.638)
  %broadcast.8171 = f32[1,4096,2]{2,1,0} broadcast(%negate.232), dimensions={0,1}
  %add.3961 = f32[1,4096,2]{2,1,0} add(%divide.802, %broadcast.8171)
  %multiply.4139 = f32[1,4096,2]{2,1,0} multiply(%add.3961, %exponential.211)
  %convert.1797 = bf16[1,4096,2]{2,1,0} convert(%multiply.4139)
  %scatter.626 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.16638, %convert.1797), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_629.17334
  %copy.3351 = bf16[1,4096,8]{2,1,0} copy(%scatter.626)
  %dot.700 = bf16[1,4096,4096]{2,1,0} dot(%copy.3351, %all-gather.300), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.3962 = bf16[1,4096,4096]{1,2,0} add(%dot.697, %dot.700)
  %copy.3352 = bf16[1,4096,4096]{2,1,0} copy(%add.3962)
  %multiply.4140 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3352, %broadcast.8151)
  %convert.1798 = f32[1,4096,4096]{2,1,0} convert(%multiply.4140)
  %multiply.4141 = f32[1,4096,4096]{2,1,0} multiply(%convert.1798, %broadcast.8150)
  %multiply.4142 = f32[1,4096,4096]{2,1,0} multiply(%convert.1783, %convert.1798)
  %reduce.639 = f32[1,4096]{1,0} reduce(%multiply.4142, %constant.3956), dimensions={2}, to_apply=%region_632.17363
  %reshape.16656 = f32[1,4096,1]{2,1,0} reshape(%reduce.639)
  %divide.804 = f32[1,4096,1]{2,1,0} divide(%rsqrt.150, %reshape.16578)
  %multiply.4143 = f32[1,4096,1]{2,1,0} multiply(%divide.804, %broadcast.7210)
  %multiply.4144 = f32[1,4096,1]{2,1,0} multiply(%reshape.16656, %multiply.4143)
  %multiply.4145 = f32[1,4096,1]{2,1,0} multiply(%multiply.4144, %broadcast.7211)
  %reshape.16657 = f32[1,4096]{1,0} reshape(%multiply.4145)
  %broadcast.8175 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16657), dimensions={0,1}
  %multiply.4146 = f32[1,4096,4096]{2,1,0} multiply(%convert.1783, %broadcast.8175)
  %add.3963 = f32[1,4096,4096]{2,1,0} add(%multiply.4141, %multiply.4146)
  %convert.1799 = bf16[1,4096,4096]{2,1,0} convert(%add.3963)
  %add.3964 = bf16[1,4096,4096]{2,1,0} add(%copy.3322, %convert.1799)
  %get-tuple-element.1122 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.156), index=1
  %get-tuple-element.1123 = u32[2,4]{1,0} get-tuple-element(%custom-call.156), index=2
  %copy.3353 = bf16[1,4096,4096]{2,1,0} copy(%add.3964)
  %dot.701 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3353, %all-gather.299), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3354 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.701)
  %custom-call.158 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3326, %copy.3328, %copy.3329, %constant.3999, %get-tuple-element.1122, /*index=5*/%get-tuple-element.1123, %get-tuple-element.1107, %copy.3354, %scatter.618, %scatter.623, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1130 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.158), index=2
  %copy.3355 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1130)
  %dot.702 = bf16[1,4096,4096]{2,1,0} dot(%copy.3355, %all-gather.298), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1131 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.158), index=1
  %copy.3356 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1131)
  %slice.512 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3356), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.4148 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.512, %broadcast.8134)
  %slice.513 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3356), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.4150 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.513, %broadcast.8133)
  %add.3977 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4148, %multiply.4150)
  %multiply.4151 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.512, %broadcast.8133)
  %negate.233 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.513)
  %multiply.4152 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.233, %broadcast.8134)
  %add.3978 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4151, %multiply.4152)
  %concatenate.289 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.3977, %add.3978), dimensions={3}
  %dot.703 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.289, %all-gather.297), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.3979 = bf16[1,4096,4096]{2,1,0} add(%dot.702, %dot.703)
  %copy.3357 = bf16[1,4096,4096]{2,1,0} copy(%add.3979)
  %get-tuple-element.1132 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.158), index=0
  %copy.3358 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1132)
  %slice.514 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3358), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.4154 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.514, %broadcast.8123)
  %slice.515 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3358), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.4156 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.515, %broadcast.8122)
  %add.3980 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4154, %multiply.4156)
  %multiply.4157 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.514, %broadcast.8122)
  %negate.234 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.515)
  %multiply.4158 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.234, %broadcast.8123)
  %add.3981 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4157, %multiply.4158)
  %concatenate.290 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.3980, %add.3981), dimensions={3}
  %dot.704 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.290, %all-gather.296), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3359 = bf16[1,4096,4096]{2,1,0} copy(%dot.704)
  %add.3982 = bf16[1,4096,4096]{2,1,0} add(%copy.3357, %copy.3359)
  %copy.3360 = bf16[1,4096,4096]{2,1,0} copy(%add.3982)
  %multiply.4159 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3360, %broadcast.8118)
  %convert.1803 = f32[1,4096,4096]{2,1,0} convert(%multiply.4159)
  %multiply.4160 = f32[1,4096,4096]{2,1,0} multiply(%convert.1803, %broadcast.8117)
  %multiply.4161 = f32[1,4096,4096]{2,1,0} multiply(%convert.1767, %convert.1803)
  %reduce.640 = f32[1,4096]{1,0} reduce(%multiply.4161, %constant.3956), dimensions={2}, to_apply=%region_636.17474
  %reshape.16701 = f32[1,4096,1]{2,1,0} reshape(%reduce.640)
  %divide.807 = f32[1,4096,1]{2,1,0} divide(%rsqrt.149, %reshape.16521)
  %multiply.4162 = f32[1,4096,1]{2,1,0} multiply(%divide.807, %broadcast.7210)
  %multiply.4163 = f32[1,4096,1]{2,1,0} multiply(%reshape.16701, %multiply.4162)
  %multiply.4164 = f32[1,4096,1]{2,1,0} multiply(%multiply.4163, %broadcast.7211)
  %reshape.16702 = f32[1,4096]{1,0} reshape(%multiply.4164)
  %broadcast.8194 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16702), dimensions={0,1}
  %multiply.4165 = f32[1,4096,4096]{2,1,0} multiply(%convert.1767, %broadcast.8194)
  %add.3983 = f32[1,4096,4096]{2,1,0} add(%multiply.4160, %multiply.4165)
  %convert.1804 = bf16[1,4096,4096]{2,1,0} convert(%add.3983)
  %add.3984 = bf16[1,4096,4096]{2,1,0} add(%add.3964, %convert.1804)
  %copy.3361 = bf16[1,4096,4096]{2,1,0} copy(%add.3984)
  %tuple.278 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.213, %param.214, %param.215, %param.216, %param.212, /*index=5*/%param.207, %param.209, %param.211, %param.208, %param.210, /*index=10*/%copy.2630, %param.10, %param.7, %copy.3361)
  %opt-barrier.11 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.278)
  %get-tuple-element.1133 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.11), index=13
  %copy.3362 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1133)
  %iota.2038 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1134 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.11), index=10
  %copy.3363 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1134)
  %convert.1805 = f32[1,4096,4096]{2,1,0} convert(%copy.3363)
  %multiply.4167 = f32[1,4096,4096]{2,1,0} multiply(%convert.1805, %convert.1805)
  %reduce.641 = f32[1,4096]{1,0} reduce(%multiply.4167, %constant.3956), dimensions={2}, to_apply=%region_638.17517
  %multiply.4168 = f32[1,4096]{1,0} multiply(%reduce.641, %broadcast.5380)
  %add.3986 = f32[1,4096]{1,0} add(%multiply.4168, %broadcast.5381)
  %reshape.16704 = f32[1,4096,1]{2,1,0} reshape(%add.3986)
  %rsqrt.151 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.16704)
  %reshape.16705 = f32[1,4096]{1,0} reshape(%rsqrt.151)
  %broadcast.8198 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16705), dimensions={0,1}
  %multiply.4169 = f32[1,4096,4096]{2,1,0} multiply(%convert.1805, %broadcast.8198)
  %convert.1806 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4169)
  %get-tuple-element.1135 = bf16[4096]{0} get-tuple-element(%opt-barrier.11), index=5
  %broadcast.8199 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1135), dimensions={2}
  %multiply.4170 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1806, %broadcast.8199)
  %copy.3364 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4170)
  %copy.3365 = bf16[1,4096,4096]{2,1,0} copy(%copy.3364)
  %get-tuple-element.1136 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.11), index=8
  %all-gather.303 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1136), channel_id=694, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.705 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3365, %all-gather.303), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.516 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.705), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1137 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.11), index=12
  %convert.1807 = f32[1,4096]{1,0} convert(%get-tuple-element.1137)
  %broadcast.8200 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1807), dimensions={0,1}
  %divide.808 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.8200, %broadcast.5388)
  %cosine.87 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.808)
  %convert.1809 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.87)
  %reshape.16707 = bf16[1,4096,64]{2,1,0} reshape(%convert.1809)
  %broadcast.8203 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.16707), dimensions={0,1,3}
  %multiply.4174 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.516, %broadcast.8203)
  %slice.517 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.705), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.86 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.808)
  %convert.1810 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.86)
  %reshape.16710 = bf16[1,4096,64]{2,1,0} reshape(%convert.1810)
  %broadcast.8204 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.16710), dimensions={0,1,3}
  %multiply.4176 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.517, %broadcast.8204)
  %subtract.455 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.4174, %multiply.4176)
  %multiply.4177 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.517, %broadcast.8203)
  %multiply.4178 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.516, %broadcast.8204)
  %add.3987 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4177, %multiply.4178)
  %concatenate.291 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.455, %add.3987), dimensions={3}
  %copy.3366 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.291)
  %get-tuple-element.1138 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.11), index=6
  %all-gather.304 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1138), channel_id=695, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.706 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3365, %all-gather.304), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.518 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.706), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.8210 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.16707), dimensions={0,1,3}
  %multiply.4182 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.518, %broadcast.8210)
  %slice.519 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.706), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.8211 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.16710), dimensions={0,1,3}
  %multiply.4184 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.519, %broadcast.8211)
  %subtract.456 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.4182, %multiply.4184)
  %multiply.4185 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.519, %broadcast.8210)
  %multiply.4186 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.518, %broadcast.8211)
  %add.3988 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4185, %multiply.4186)
  %concatenate.292 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.456, %add.3988), dimensions={3}
  %copy.3368 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.292)
  %get-tuple-element.1139 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.11), index=9
  %all-gather.305 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1139), channel_id=696, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.707 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3365, %all-gather.305), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3369 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.707)
  %get-tuple-element.1140 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.11), index=11
  %broadcast.8214 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1140), dimensions={0,1}
  %broadcast.8215 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1140), dimensions={0,2}
  %compare.2604 = pred[1,4096,4096]{2,1,0} compare(%broadcast.8214, %broadcast.8215), direction=EQ
  %and.334 = pred[1,4096,4096]{2,1,0} and(%compare.2604, %broadcast.5406)
  %select.1606 = f32[1,4096,4096]{2,1,0} select(%and.334, %broadcast.5407, %broadcast.5408)
  %compare.2606 = pred[1,4096,4096]{2,1,0} compare(%select.1606, %broadcast.5407), direction=NE
  %not.107 = pred[1,4096,4096]{2,1,0} not(%compare.2606)
  %convert.1815 = s32[1,4096,4096]{2,1,0} convert(%not.107)
  %reduce.642 = s32[1,4096]{1,0} reduce(%convert.1815, %constant.3783), dimensions={1}, to_apply=%region_639.17651
  %reshape.16720 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.642)
  %slice.520 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.16720), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.16722 = s32[1,1]{1,0} reshape(%slice.520)
  %reshape.16738 = s32[1]{0} reshape(%reshape.16722)
  %compare.2619 = pred[1]{0} compare(%reshape.16738, %constant.4022), direction=LT
  %select.1616 = s32[1]{0} select(%compare.2619, %reshape.11470, %reshape.16738)
  %scatter.641 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1616), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.43
  %reduce.643 = s32[1,4096]{1,0} reduce(%convert.1815, %constant.3783), dimensions={2}, to_apply=%region_640.17659
  %reshape.16723 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.643)
  %reduce.644 = s32[1,1]{1,0} reduce(%reshape.16723, %constant.4014), dimensions={3,2}, to_apply=%region_641.17664
  %reshape.16755 = s32[1]{0} reshape(%reduce.644)
  %compare.2632 = pred[1]{0} compare(%reshape.16755, %constant.4022), direction=LT
  %select.1626 = s32[1]{0} select(%compare.2632, %reshape.11470, %reshape.16755)
  %scatter.646 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1626), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.43
  %custom-call.159 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3366, %copy.3368, %copy.3369, %constant.3999, %scatter.641, /*index=5*/%scatter.646, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1146 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.159), index=0
  %copy.3370 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1146)
  %get-tuple-element.1147 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.11), index=7
  %all-gather.306 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1147), channel_id=697, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.708 = bf16[1,4096,4096]{2,1,0} dot(%copy.3370, %all-gather.306), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3371 = bf16[1,4096,4096]{2,1,0} copy(%dot.708)
  %add.4001 = bf16[1,4096,4096]{2,1,0} add(%copy.3363, %copy.3371)
  %convert.1819 = f32[1,4096,4096]{2,1,0} convert(%add.4001)
  %multiply.4188 = f32[1,4096,4096]{2,1,0} multiply(%convert.1819, %convert.1819)
  %reduce.645 = f32[1,4096]{1,0} reduce(%multiply.4188, %constant.3956), dimensions={2}, to_apply=%region_642.17680
  %multiply.4189 = f32[1,4096]{1,0} multiply(%reduce.645, %broadcast.5380)
  %add.4002 = f32[1,4096]{1,0} add(%multiply.4189, %broadcast.5381)
  %reshape.16757 = f32[1,4096,1]{2,1,0} reshape(%add.4002)
  %rsqrt.152 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.16757)
  %reshape.16758 = f32[1,4096]{1,0} reshape(%rsqrt.152)
  %broadcast.8231 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16758), dimensions={0,1}
  %multiply.4190 = f32[1,4096,4096]{2,1,0} multiply(%convert.1819, %broadcast.8231)
  %convert.1820 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4190)
  %get-tuple-element.1148 = bf16[4096]{0} get-tuple-element(%opt-barrier.11), index=4
  %broadcast.8232 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1148), dimensions={2}
  %multiply.4191 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1820, %broadcast.8232)
  %copy.3372 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4191)
  %get-tuple-element.1149 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.11), index=0
  %all-gather.307 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1149), channel_id=698, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.709 = bf16[1,4096,8]{2,1,0} dot(%copy.3372, %all-gather.307), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3373 = bf16[1,4096,8]{2,1,0} copy(%dot.709)
  %reshape.16759 = bf16[4096,8]{1,0} reshape(%copy.3373)
  %custom-call.160 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.16759), custom_call_target="TopK", called_computations={%compare-greater-than.43.clone}
  %get-tuple-element.1150 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.160), index=0
  %get-tuple-element.1151 = s32[4096,2]{1,0} get-tuple-element(%custom-call.160), index=1
  %add.4003 = s32[4096,2]{1,0} add(%get-tuple-element.1151, %broadcast.5420)
  %sort.217 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1150, %add.4003), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.43
  %get-tuple-element.1153 = s32[4096,2]{1,0} get-tuple-element(%sort.217), index=1
  %slice.522 = s32[4096,2]{1,0} slice(%get-tuple-element.1153), slice={[0:4096], [0:2]}
  %all-gather.309 = s32[32768,2]{1,0} all-gather(%slice.522), channel_id=700, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1422 = s32[4096,2]{1,0} dynamic-slice(%all-gather.309, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.16762 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1422)
  %compare.2633 = pred[1,4096,2]{2,1,0} compare(%reshape.16762, %broadcast.5421), direction=LT
  %add.4004 = s32[1,4096,2]{2,1,0} add(%reshape.16762, %broadcast.5422)
  %select.1627 = s32[1,4096,2]{2,1,0} select(%compare.2633, %add.4004, %reshape.16762)
  %reshape.16763 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1627)
  %concatenate.293 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2038, %reshape.16763), dimensions={3}
  %subtract.462 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.293, %broadcast.5433)
  %scatter.647 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.462, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_645.17759
  %gather.54 = u32[1,4096,2]{2,1,0} gather(%scatter.647, %subtract.462), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2634 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.54), direction=EQ
  %get-tuple-element.1152 = bf16[4096,2]{1,0} get-tuple-element(%sort.217), index=0
  %slice.521 = bf16[4096,2]{1,0} slice(%get-tuple-element.1152), slice={[0:4096], [0:2]}
  %all-gather.308 = bf16[32768,2]{1,0} all-gather(%slice.521), channel_id=699, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1432 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.308, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1824 = f32[4096,2]{1,0} convert(%dynamic-slice.1432)
  %reshape.16781 = f32[1,4096,2]{2,1,0} reshape(%convert.1824)
  %reduce.646 = f32[4096]{0} reduce(%convert.1824, %constant.4073), dimensions={1}, to_apply=%region_643.17709
  %reshape.16782 = f32[1,4096]{1,0} reshape(%reduce.646)
  %broadcast.8239 = f32[1,4096,2]{2,1,0} broadcast(%reshape.16782), dimensions={0,1}
  %subtract.461 = f32[1,4096,2]{2,1,0} subtract(%reshape.16781, %broadcast.8239)
  %exponential.213 = f32[1,4096,2]{2,1,0} exponential(%subtract.461)
  %reduce.647 = f32[1,4096]{1,0} reduce(%exponential.213, %constant.3956), dimensions={2}, to_apply=%region_644.17721
  %broadcast.8240 = f32[1,4096,2]{2,1,0} broadcast(%reduce.647), dimensions={0,1}
  %divide.812 = f32[1,4096,2]{2,1,0} divide(%exponential.213, %broadcast.8240)
  %convert.1825 = bf16[1,4096,2]{2,1,0} convert(%divide.812)
  %select.1628 = bf16[1,4096,2]{2,1,0} select(%compare.2634, %convert.1825, %broadcast.5432)
  %scatter.648 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.462, %select.1628), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_646.17768
  %broadcast.8245 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.16762), dimensions={0,1,2}
  %iota.2046 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2635 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.8245, %iota.2046), direction=EQ
  %convert.1826 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2635)
  %reshape.16793 = s32[1,8192,8]{2,1,0} reshape(%convert.1826)
  %copy.3374 = s32[1,8192,8]{2,1,0} copy(%reshape.16793)
  %reduce-window.344 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3374, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.10
  %reshape.16795 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.344)
  %copy.3375 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.16795)
  %compare.2636 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3375, %broadcast.5435), direction=LE
  %select.1629 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2636, %convert.1826, %broadcast.5436)
  %reduce.648 = s32[1,4096,8]{2,1,0} reduce(%select.1629, %constant.3783), dimensions={2}, to_apply=%region_647.17782
  %convert.1827 = bf16[1,4096,8]{2,1,0} convert(%reduce.648)
  %multiply.4197 = bf16[1,4096,8]{2,1,0} multiply(%scatter.648, %convert.1827)
  %broadcast.8248 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4197), dimensions={0,1,2}
  %multiply.4198 = s32[1,8192,8]{2,1,0} multiply(%copy.3374, %reduce-window.344)
  %reshape.16796 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.4198)
  %reduce.649 = s32[1,4096,8]{2,1,0} reduce(%reshape.16796, %constant.3783), dimensions={2}, to_apply=%region_648.17791
  %multiply.4199 = s32[1,4096,8]{2,1,0} multiply(%reduce.649, %reduce.648)
  %broadcast.8249 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4199), dimensions={0,1,2}
  %iota.2047 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2637 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.8249, %iota.2047), direction=EQ
  %convert.1828 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2637)
  %convert.1829 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1828)
  %multiply.4200 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.8248, %convert.1829)
  %slice.523 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.4200), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2638 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.523, %broadcast.5439), direction=NE
  %copy.3376 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2638)
  %convert.1830 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3376)
  %dot.710 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1830, %copy.3372), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16799 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.710)
  %all-to-all.108 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16799), channel_id=707, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.173 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.108), dimensions={1,0,2,3,4}
  %reshape.16800 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.173)
  %transpose.174 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.16800), dimensions={1,0,2,3}
  %copy.3377 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.174)
  %get-tuple-element.1158 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.11), index=1
  %copy.3378 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1158)
  %dot.711 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3377, %copy.3378), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3379 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.711)
  %negate.235 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3379)
  %exponential.214 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.235)
  %add.4009 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.214, %broadcast.5440)
  %divide.813 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4009)
  %multiply.4204 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3379, %divide.813)
  %copy.3380 = bf16[1,4096,4096]{2,1,0} copy(%copy.3362)
  %copy.3381 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.523)
  %dot.712 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3380, %copy.3381), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16803 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.712)
  %all-to-all.109 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.16803), channel_id=708, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.175 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.109), dimensions={2,0,1,3,4}
  %reshape.16804 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.175)
  %transpose.176 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.16804), dimensions={2,0,3,1}
  %copy.3382 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.176)
  %get-tuple-element.1159 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.11), index=3
  %copy.3383 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1159)
  %dot.713 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3382, %copy.3383), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.4208 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4204, %dot.713)
  %copy.3384 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.4208)
  %get-tuple-element.1160 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.11), index=2
  %copy.3385 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1160)
  %dot.714 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3384, %copy.3385), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.715 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3377, %copy.3385), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3386 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.715)
  %multiply.4209 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.713, %copy.3386)
  %multiply.4210 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4209, %divide.813)
  %multiply.4211 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3379, %multiply.4209)
  %subtract.463 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.813)
  %multiply.4212 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.813, %subtract.463)
  %multiply.4213 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4211, %multiply.4212)
  %add.4010 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.4210, %multiply.4213)
  %copy.3387 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4010)
  %dot.716 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3387, %copy.3378), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4011 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.714, %dot.716)
  %copy.3388 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4011)
  %transpose.177 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3388), dimensions={1,0,2,3}
  %reshape.16807 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.177)
  %all-to-all.110 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16807), channel_id=709, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.178 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.110), dimensions={1,0,2,3,4}
  %reshape.16808 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.178)
  %dot.717 = bf16[1,4096,4096]{2,1,0} dot(%convert.1830, %reshape.16808), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.16810 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1422)
  %compare.2640 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.293, %broadcast.7265), direction=GE
  %compare.2641 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.293, %broadcast.7267), direction=LE
  %and.339 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2640, %compare.2641)
  %reduce.650 = pred[1,4096,2]{2,1,0} reduce(%and.339, %constant.4025), dimensions={3}, to_apply=%region_651.17876
  %multiply.4218 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4204, %copy.3386)
  %dot.718 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.4218, %copy.3383), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3389 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.718)
  %reshape.16812 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3389)
  %all-to-all.111 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16812), channel_id=710, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.179 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.111), dimensions={1,0,2,3,4}
  %reshape.16813 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.179)
  %dot.719 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3380, %reshape.16813), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3390 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.719)
  %pad.11 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3390, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.4223 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.11, %convert.1829)
  %reduce.651 = bf16[1,4096,8]{2,1,0} reduce(%multiply.4223, %constant.3795), dimensions={3}, to_apply=%region_649.17858
  %multiply.4224 = bf16[1,4096,8]{2,1,0} multiply(%reduce.651, %convert.1827)
  %gather.55 = bf16[1,4096,2]{2,1,0} gather(%multiply.4224, %subtract.462), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1630 = bf16[1,4096,2]{2,1,0} select(%reduce.650, %gather.55, %broadcast.5432)
  %select.1631 = bf16[1,4096,2]{2,1,0} select(%compare.2634, %select.1630, %broadcast.5432)
  %convert.1832 = f32[1,4096,2]{2,1,0} convert(%select.1631)
  %divide.814 = f32[1,4096,2]{2,1,0} divide(%convert.1832, %broadcast.8240)
  %multiply.4225 = f32[1,4096]{1,0} multiply(%reduce.647, %reduce.647)
  %divide.815 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.4225)
  %broadcast.8257 = f32[1,4096,2]{2,1,0} broadcast(%divide.815), dimensions={0,1}
  %multiply.4226 = f32[1,4096,2]{2,1,0} multiply(%convert.1832, %broadcast.8257)
  %multiply.4227 = f32[1,4096,2]{2,1,0} multiply(%multiply.4226, %exponential.213)
  %reduce.652 = f32[1,4096]{1,0} reduce(%multiply.4227, %constant.3956), dimensions={2}, to_apply=%region_652.17890
  %negate.236 = f32[1,4096]{1,0} negate(%reduce.652)
  %broadcast.8259 = f32[1,4096,2]{2,1,0} broadcast(%negate.236), dimensions={0,1}
  %add.4012 = f32[1,4096,2]{2,1,0} add(%divide.814, %broadcast.8259)
  %multiply.4228 = f32[1,4096,2]{2,1,0} multiply(%add.4012, %exponential.213)
  %convert.1833 = bf16[1,4096,2]{2,1,0} convert(%multiply.4228)
  %scatter.649 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.16810, %convert.1833), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_654.17910
  %copy.3391 = bf16[1,4096,8]{2,1,0} copy(%scatter.649)
  %dot.720 = bf16[1,4096,4096]{2,1,0} dot(%copy.3391, %all-gather.307), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4013 = bf16[1,4096,4096]{1,2,0} add(%dot.717, %dot.720)
  %copy.3392 = bf16[1,4096,4096]{2,1,0} copy(%add.4013)
  %multiply.4230 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3392, %broadcast.8232)
  %convert.1834 = f32[1,4096,4096]{2,1,0} convert(%multiply.4230)
  %multiply.4231 = f32[1,4096,4096]{2,1,0} multiply(%convert.1834, %broadcast.8231)
  %multiply.4232 = f32[1,4096,4096]{2,1,0} multiply(%convert.1819, %convert.1834)
  %reduce.653 = f32[1,4096]{1,0} reduce(%multiply.4232, %constant.3956), dimensions={2}, to_apply=%region_657.17939
  %reshape.16828 = f32[1,4096,1]{2,1,0} reshape(%reduce.653)
  %divide.816 = f32[1,4096,1]{2,1,0} divide(%rsqrt.152, %reshape.16757)
  %multiply.4233 = f32[1,4096,1]{2,1,0} multiply(%divide.816, %broadcast.7210)
  %multiply.4234 = f32[1,4096,1]{2,1,0} multiply(%reshape.16828, %multiply.4233)
  %multiply.4235 = f32[1,4096,1]{2,1,0} multiply(%multiply.4234, %broadcast.7211)
  %reshape.16829 = f32[1,4096]{1,0} reshape(%multiply.4235)
  %broadcast.8266 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16829), dimensions={0,1}
  %multiply.4236 = f32[1,4096,4096]{2,1,0} multiply(%convert.1819, %broadcast.8266)
  %add.4014 = f32[1,4096,4096]{2,1,0} add(%multiply.4231, %multiply.4236)
  %convert.1835 = bf16[1,4096,4096]{2,1,0} convert(%add.4014)
  %add.4016 = bf16[1,4096,4096]{2,1,0} add(%copy.3362, %convert.1835)
  %get-tuple-element.1161 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.159), index=1
  %get-tuple-element.1162 = u32[2,4]{1,0} get-tuple-element(%custom-call.159), index=2
  %copy.3393 = bf16[1,4096,4096]{2,1,0} copy(%add.4016)
  %dot.721 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3393, %all-gather.306), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3394 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.721)
  %custom-call.161 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3366, %copy.3368, %copy.3369, %constant.3999, %get-tuple-element.1161, /*index=5*/%get-tuple-element.1162, %get-tuple-element.1146, %copy.3394, %scatter.641, %scatter.646, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1169 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.161), index=2
  %copy.3395 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1169)
  %dot.722 = bf16[1,4096,4096]{2,1,0} dot(%copy.3395, %all-gather.305), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1170 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.161), index=1
  %copy.3396 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1170)
  %slice.524 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3396), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.4238 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.524, %broadcast.8211)
  %slice.525 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3396), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.4240 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.525, %broadcast.8210)
  %add.4029 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4238, %multiply.4240)
  %multiply.4241 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.524, %broadcast.8210)
  %negate.237 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.525)
  %multiply.4242 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.237, %broadcast.8211)
  %add.4030 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4241, %multiply.4242)
  %concatenate.298 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4029, %add.4030), dimensions={3}
  %dot.723 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.298, %all-gather.304), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4031 = bf16[1,4096,4096]{2,1,0} add(%dot.722, %dot.723)
  %copy.3397 = bf16[1,4096,4096]{2,1,0} copy(%add.4031)
  %get-tuple-element.1171 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.161), index=0
  %copy.3398 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1171)
  %slice.526 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3398), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.4244 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.526, %broadcast.8204)
  %slice.527 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3398), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.4247 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.527, %broadcast.8203)
  %add.4032 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4244, %multiply.4247)
  %multiply.4248 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.526, %broadcast.8203)
  %negate.238 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.527)
  %multiply.4249 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.238, %broadcast.8204)
  %add.4033 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4248, %multiply.4249)
  %concatenate.299 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4032, %add.4033), dimensions={3}
  %dot.724 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.299, %all-gather.303), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3399 = bf16[1,4096,4096]{2,1,0} copy(%dot.724)
  %add.4034 = bf16[1,4096,4096]{2,1,0} add(%copy.3397, %copy.3399)
  %copy.3400 = bf16[1,4096,4096]{2,1,0} copy(%add.4034)
  %multiply.4250 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3400, %broadcast.8199)
  %convert.1839 = f32[1,4096,4096]{2,1,0} convert(%multiply.4250)
  %multiply.4251 = f32[1,4096,4096]{2,1,0} multiply(%convert.1839, %broadcast.8198)
  %multiply.4252 = f32[1,4096,4096]{2,1,0} multiply(%convert.1805, %convert.1839)
  %reduce.654 = f32[1,4096]{1,0} reduce(%multiply.4252, %constant.3956), dimensions={2}, to_apply=%region_661.18050
  %reshape.16879 = f32[1,4096,1]{2,1,0} reshape(%reduce.654)
  %divide.819 = f32[1,4096,1]{2,1,0} divide(%rsqrt.151, %reshape.16704)
  %multiply.4253 = f32[1,4096,1]{2,1,0} multiply(%divide.819, %broadcast.7210)
  %multiply.4254 = f32[1,4096,1]{2,1,0} multiply(%reshape.16879, %multiply.4253)
  %multiply.4256 = f32[1,4096,1]{2,1,0} multiply(%multiply.4254, %broadcast.7211)
  %reshape.16880 = f32[1,4096]{1,0} reshape(%multiply.4256)
  %broadcast.8289 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16880), dimensions={0,1}
  %multiply.4257 = f32[1,4096,4096]{2,1,0} multiply(%convert.1805, %broadcast.8289)
  %add.4035 = f32[1,4096,4096]{2,1,0} add(%multiply.4251, %multiply.4257)
  %convert.1840 = bf16[1,4096,4096]{2,1,0} convert(%add.4035)
  %add.4036 = bf16[1,4096,4096]{2,1,0} add(%add.4016, %convert.1840)
  %copy.3401 = bf16[1,4096,4096]{2,1,0} copy(%add.4036)
  %tuple.283 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.203, %param.204, %param.205, %param.206, %param.202, /*index=5*/%param.197, %param.199, %param.201, %param.198, %param.200, /*index=10*/%copy.2606, %param.10, %param.7, %copy.3401)
  %opt-barrier.12 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.283)
  %get-tuple-element.1172 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.12), index=13
  %copy.3402 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1172)
  %iota.2049 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1173 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.12), index=10
  %copy.3403 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1173)
  %convert.1841 = f32[1,4096,4096]{2,1,0} convert(%copy.3403)
  %multiply.4259 = f32[1,4096,4096]{2,1,0} multiply(%convert.1841, %convert.1841)
  %reduce.655 = f32[1,4096]{1,0} reduce(%multiply.4259, %constant.3956), dimensions={2}, to_apply=%region_663.18093
  %multiply.4260 = f32[1,4096]{1,0} multiply(%reduce.655, %broadcast.5380)
  %add.4038 = f32[1,4096]{1,0} add(%multiply.4260, %broadcast.5381)
  %reshape.16882 = f32[1,4096,1]{2,1,0} reshape(%add.4038)
  %rsqrt.153 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.16882)
  %reshape.16884 = f32[1,4096]{1,0} reshape(%rsqrt.153)
  %broadcast.8293 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16884), dimensions={0,1}
  %multiply.4261 = f32[1,4096,4096]{2,1,0} multiply(%convert.1841, %broadcast.8293)
  %convert.1842 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4261)
  %get-tuple-element.1174 = bf16[4096]{0} get-tuple-element(%opt-barrier.12), index=5
  %broadcast.8295 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1174), dimensions={2}
  %multiply.4262 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1842, %broadcast.8295)
  %copy.3404 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4262)
  %copy.3405 = bf16[1,4096,4096]{2,1,0} copy(%copy.3404)
  %get-tuple-element.1175 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.12), index=8
  %all-gather.310 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1175), channel_id=713, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.725 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3405, %all-gather.310), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.528 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.725), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1176 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.12), index=12
  %convert.1843 = f32[1,4096]{1,0} convert(%get-tuple-element.1176)
  %broadcast.8297 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1843), dimensions={0,1}
  %divide.820 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.8297, %broadcast.5388)
  %cosine.89 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.820)
  %convert.1845 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.89)
  %reshape.16887 = bf16[1,4096,64]{2,1,0} reshape(%convert.1845)
  %broadcast.8302 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.16887), dimensions={0,1,3}
  %multiply.4266 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.528, %broadcast.8302)
  %slice.529 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.725), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.88 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.820)
  %convert.1846 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.88)
  %reshape.16889 = bf16[1,4096,64]{2,1,0} reshape(%convert.1846)
  %broadcast.8304 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.16889), dimensions={0,1,3}
  %multiply.4269 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.529, %broadcast.8304)
  %subtract.467 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.4266, %multiply.4269)
  %multiply.4270 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.529, %broadcast.8302)
  %multiply.4271 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.528, %broadcast.8304)
  %add.4039 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4270, %multiply.4271)
  %concatenate.300 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.467, %add.4039), dimensions={3}
  %copy.3406 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.300)
  %get-tuple-element.1177 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.12), index=6
  %all-gather.311 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1177), channel_id=714, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.726 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3405, %all-gather.311), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.530 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.726), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.8313 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.16887), dimensions={0,1,3}
  %multiply.4276 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.530, %broadcast.8313)
  %slice.531 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.726), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.8314 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.16889), dimensions={0,1,3}
  %multiply.4278 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.531, %broadcast.8314)
  %subtract.468 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.4276, %multiply.4278)
  %multiply.4279 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.531, %broadcast.8313)
  %multiply.4280 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.530, %broadcast.8314)
  %add.4040 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4279, %multiply.4280)
  %concatenate.301 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.468, %add.4040), dimensions={3}
  %copy.3408 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.301)
  %get-tuple-element.1178 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.12), index=9
  %all-gather.312 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1178), channel_id=715, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.727 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3405, %all-gather.312), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3409 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.727)
  %get-tuple-element.1179 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.12), index=11
  %broadcast.8317 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1179), dimensions={0,1}
  %broadcast.8319 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1179), dimensions={0,2}
  %compare.2671 = pred[1,4096,4096]{2,1,0} compare(%broadcast.8317, %broadcast.8319), direction=EQ
  %and.344 = pred[1,4096,4096]{2,1,0} and(%compare.2671, %broadcast.5406)
  %select.1652 = f32[1,4096,4096]{2,1,0} select(%and.344, %broadcast.5407, %broadcast.5408)
  %compare.2674 = pred[1,4096,4096]{2,1,0} compare(%select.1652, %broadcast.5407), direction=NE
  %not.108 = pred[1,4096,4096]{2,1,0} not(%compare.2674)
  %convert.1851 = s32[1,4096,4096]{2,1,0} convert(%not.108)
  %reduce.656 = s32[1,4096]{1,0} reduce(%convert.1851, %constant.3783), dimensions={1}, to_apply=%region_664.18227
  %reshape.16898 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.656)
  %slice.532 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.16898), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.16901 = s32[1,1]{1,0} reshape(%slice.532)
  %reshape.16917 = s32[1]{0} reshape(%reshape.16901)
  %compare.2688 = pred[1]{0} compare(%reshape.16917, %constant.4022), direction=LT
  %select.1662 = s32[1]{0} select(%compare.2688, %reshape.11470, %reshape.16917)
  %scatter.664 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1662), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.44
  %reduce.657 = s32[1,4096]{1,0} reduce(%convert.1851, %constant.3783), dimensions={2}, to_apply=%region_665.18235
  %reshape.16903 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.657)
  %reduce.658 = s32[1,1]{1,0} reduce(%reshape.16903, %constant.4014), dimensions={3,2}, to_apply=%region_666.18240
  %reshape.16932 = s32[1]{0} reshape(%reduce.658)
  %compare.2701 = pred[1]{0} compare(%reshape.16932, %constant.4022), direction=LT
  %select.1672 = s32[1]{0} select(%compare.2701, %reshape.11470, %reshape.16932)
  %scatter.669 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1672), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.44
  %custom-call.162 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3406, %copy.3408, %copy.3409, %constant.3999, %scatter.664, /*index=5*/%scatter.669, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1185 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.162), index=0
  %copy.3410 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1185)
  %get-tuple-element.1186 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.12), index=7
  %all-gather.313 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1186), channel_id=716, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.728 = bf16[1,4096,4096]{2,1,0} dot(%copy.3410, %all-gather.313), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3411 = bf16[1,4096,4096]{2,1,0} copy(%dot.728)
  %add.4053 = bf16[1,4096,4096]{2,1,0} add(%copy.3403, %copy.3411)
  %convert.1857 = f32[1,4096,4096]{2,1,0} convert(%add.4053)
  %multiply.4282 = f32[1,4096,4096]{2,1,0} multiply(%convert.1857, %convert.1857)
  %reduce.659 = f32[1,4096]{1,0} reduce(%multiply.4282, %constant.3956), dimensions={2}, to_apply=%region_667.18256
  %multiply.4284 = f32[1,4096]{1,0} multiply(%reduce.659, %broadcast.5380)
  %add.4054 = f32[1,4096]{1,0} add(%multiply.4284, %broadcast.5381)
  %reshape.16934 = f32[1,4096,1]{2,1,0} reshape(%add.4054)
  %rsqrt.154 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.16934)
  %reshape.16935 = f32[1,4096]{1,0} reshape(%rsqrt.154)
  %broadcast.8338 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.16935), dimensions={0,1}
  %multiply.4285 = f32[1,4096,4096]{2,1,0} multiply(%convert.1857, %broadcast.8338)
  %convert.1858 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4285)
  %get-tuple-element.1187 = bf16[4096]{0} get-tuple-element(%opt-barrier.12), index=4
  %broadcast.8339 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1187), dimensions={2}
  %multiply.4286 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1858, %broadcast.8339)
  %copy.3412 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4286)
  %get-tuple-element.1188 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.12), index=0
  %all-gather.314 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1188), channel_id=717, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.729 = bf16[1,4096,8]{2,1,0} dot(%copy.3412, %all-gather.314), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3413 = bf16[1,4096,8]{2,1,0} copy(%dot.729)
  %reshape.16936 = bf16[4096,8]{1,0} reshape(%copy.3413)
  %custom-call.163 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.16936), custom_call_target="TopK", called_computations={%compare-greater-than.44.clone}
  %get-tuple-element.1189 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.163), index=0
  %get-tuple-element.1190 = s32[4096,2]{1,0} get-tuple-element(%custom-call.163), index=1
  %add.4056 = s32[4096,2]{1,0} add(%get-tuple-element.1190, %broadcast.5420)
  %sort.222 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1189, %add.4056), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.44
  %get-tuple-element.1192 = s32[4096,2]{1,0} get-tuple-element(%sort.222), index=1
  %slice.534 = s32[4096,2]{1,0} slice(%get-tuple-element.1192), slice={[0:4096], [0:2]}
  %all-gather.316 = s32[32768,2]{1,0} all-gather(%slice.534), channel_id=719, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1466 = s32[4096,2]{1,0} dynamic-slice(%all-gather.316, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.16939 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1466)
  %compare.2702 = pred[1,4096,2]{2,1,0} compare(%reshape.16939, %broadcast.5421), direction=LT
  %add.4057 = s32[1,4096,2]{2,1,0} add(%reshape.16939, %broadcast.5422)
  %select.1673 = s32[1,4096,2]{2,1,0} select(%compare.2702, %add.4057, %reshape.16939)
  %reshape.16940 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1673)
  %concatenate.302 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2049, %reshape.16940), dimensions={3}
  %subtract.474 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.302, %broadcast.5433)
  %scatter.670 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.474, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_670.18335
  %gather.56 = u32[1,4096,2]{2,1,0} gather(%scatter.670, %subtract.474), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2703 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.56), direction=EQ
  %get-tuple-element.1191 = bf16[4096,2]{1,0} get-tuple-element(%sort.222), index=0
  %slice.533 = bf16[4096,2]{1,0} slice(%get-tuple-element.1191), slice={[0:4096], [0:2]}
  %all-gather.315 = bf16[32768,2]{1,0} all-gather(%slice.533), channel_id=718, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1476 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.315, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1861 = f32[4096,2]{1,0} convert(%dynamic-slice.1476)
  %reshape.16960 = f32[1,4096,2]{2,1,0} reshape(%convert.1861)
  %reduce.660 = f32[4096]{0} reduce(%convert.1861, %constant.4073), dimensions={1}, to_apply=%region_668.18285
  %reshape.16961 = f32[1,4096]{1,0} reshape(%reduce.660)
  %broadcast.8346 = f32[1,4096,2]{2,1,0} broadcast(%reshape.16961), dimensions={0,1}
  %subtract.473 = f32[1,4096,2]{2,1,0} subtract(%reshape.16960, %broadcast.8346)
  %exponential.215 = f32[1,4096,2]{2,1,0} exponential(%subtract.473)
  %reduce.661 = f32[1,4096]{1,0} reduce(%exponential.215, %constant.3956), dimensions={2}, to_apply=%region_669.18297
  %broadcast.8347 = f32[1,4096,2]{2,1,0} broadcast(%reduce.661), dimensions={0,1}
  %divide.824 = f32[1,4096,2]{2,1,0} divide(%exponential.215, %broadcast.8347)
  %convert.1862 = bf16[1,4096,2]{2,1,0} convert(%divide.824)
  %select.1674 = bf16[1,4096,2]{2,1,0} select(%compare.2703, %convert.1862, %broadcast.5432)
  %scatter.671 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.474, %select.1674), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_671.18344
  %broadcast.8349 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.16939), dimensions={0,1,2}
  %iota.2058 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2704 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.8349, %iota.2058), direction=EQ
  %convert.1863 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2704)
  %reshape.16971 = s32[1,8192,8]{2,1,0} reshape(%convert.1863)
  %copy.3414 = s32[1,8192,8]{2,1,0} copy(%reshape.16971)
  %reduce-window.349 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3414, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.11
  %reshape.16975 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.349)
  %copy.3415 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.16975)
  %compare.2705 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3415, %broadcast.5435), direction=LE
  %select.1675 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2705, %convert.1863, %broadcast.5436)
  %reduce.662 = s32[1,4096,8]{2,1,0} reduce(%select.1675, %constant.3783), dimensions={2}, to_apply=%region_672.18358
  %convert.1864 = bf16[1,4096,8]{2,1,0} convert(%reduce.662)
  %multiply.4292 = bf16[1,4096,8]{2,1,0} multiply(%scatter.671, %convert.1864)
  %broadcast.8351 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4292), dimensions={0,1,2}
  %multiply.4293 = s32[1,8192,8]{2,1,0} multiply(%copy.3414, %reduce-window.349)
  %reshape.16976 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.4293)
  %reduce.663 = s32[1,4096,8]{2,1,0} reduce(%reshape.16976, %constant.3783), dimensions={2}, to_apply=%region_673.18367
  %multiply.4294 = s32[1,4096,8]{2,1,0} multiply(%reduce.663, %reduce.662)
  %broadcast.8352 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4294), dimensions={0,1,2}
  %iota.2059 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2706 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.8352, %iota.2059), direction=EQ
  %convert.1866 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2706)
  %convert.1868 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1866)
  %multiply.4295 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.8351, %convert.1868)
  %slice.535 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.4295), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2707 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.535, %broadcast.5439), direction=NE
  %copy.3416 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2707)
  %convert.1869 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3416)
  %dot.730 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1869, %copy.3412), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16980 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.730)
  %all-to-all.112 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16980), channel_id=726, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.180 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.112), dimensions={1,0,2,3,4}
  %reshape.16981 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.180)
  %transpose.181 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.16981), dimensions={1,0,2,3}
  %copy.3417 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.181)
  %get-tuple-element.1197 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.12), index=1
  %copy.3418 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1197)
  %dot.731 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3417, %copy.3418), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3419 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.731)
  %negate.239 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3419)
  %exponential.216 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.239)
  %add.4062 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.216, %broadcast.5440)
  %divide.825 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4062)
  %multiply.4299 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3419, %divide.825)
  %copy.3420 = bf16[1,4096,4096]{2,1,0} copy(%copy.3402)
  %copy.3421 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.535)
  %dot.732 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3420, %copy.3421), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.16984 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.732)
  %all-to-all.113 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.16984), channel_id=727, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.182 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.113), dimensions={2,0,1,3,4}
  %reshape.16985 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.182)
  %transpose.183 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.16985), dimensions={2,0,3,1}
  %copy.3422 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.183)
  %get-tuple-element.1198 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.12), index=3
  %copy.3423 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1198)
  %dot.733 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3422, %copy.3423), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.4302 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4299, %dot.733)
  %copy.3424 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.4302)
  %get-tuple-element.1199 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.12), index=2
  %copy.3425 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1199)
  %dot.734 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3424, %copy.3425), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.735 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3417, %copy.3425), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3426 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.735)
  %multiply.4303 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.733, %copy.3426)
  %multiply.4304 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4303, %divide.825)
  %multiply.4306 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3419, %multiply.4303)
  %subtract.475 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.825)
  %multiply.4307 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.825, %subtract.475)
  %multiply.4308 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4306, %multiply.4307)
  %add.4063 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.4304, %multiply.4308)
  %copy.3427 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4063)
  %dot.736 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3427, %copy.3418), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4064 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.734, %dot.736)
  %copy.3428 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4064)
  %transpose.184 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3428), dimensions={1,0,2,3}
  %reshape.16989 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.184)
  %all-to-all.114 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16989), channel_id=728, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.185 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.114), dimensions={1,0,2,3,4}
  %reshape.16990 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.185)
  %dot.737 = bf16[1,4096,4096]{2,1,0} dot(%convert.1869, %reshape.16990), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.16993 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1466)
  %compare.2709 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.302, %broadcast.7265), direction=GE
  %compare.2710 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.302, %broadcast.7267), direction=LE
  %and.349 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2709, %compare.2710)
  %reduce.664 = pred[1,4096,2]{2,1,0} reduce(%and.349, %constant.4025), dimensions={3}, to_apply=%region_676.18452
  %multiply.4312 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4299, %copy.3426)
  %dot.738 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.4312, %copy.3423), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3429 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.738)
  %reshape.16995 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3429)
  %all-to-all.115 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.16995), channel_id=729, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.186 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.115), dimensions={1,0,2,3,4}
  %reshape.16997 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.186)
  %dot.739 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3420, %reshape.16997), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3430 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.739)
  %pad.12 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3430, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.4317 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.12, %convert.1868)
  %reduce.665 = bf16[1,4096,8]{2,1,0} reduce(%multiply.4317, %constant.3795), dimensions={3}, to_apply=%region_674.18434
  %multiply.4319 = bf16[1,4096,8]{2,1,0} multiply(%reduce.665, %convert.1864)
  %gather.57 = bf16[1,4096,2]{2,1,0} gather(%multiply.4319, %subtract.474), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1676 = bf16[1,4096,2]{2,1,0} select(%reduce.664, %gather.57, %broadcast.5432)
  %select.1677 = bf16[1,4096,2]{2,1,0} select(%compare.2703, %select.1676, %broadcast.5432)
  %convert.1871 = f32[1,4096,2]{2,1,0} convert(%select.1677)
  %divide.826 = f32[1,4096,2]{2,1,0} divide(%convert.1871, %broadcast.8347)
  %multiply.4320 = f32[1,4096]{1,0} multiply(%reduce.661, %reduce.661)
  %divide.827 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.4320)
  %broadcast.8358 = f32[1,4096,2]{2,1,0} broadcast(%divide.827), dimensions={0,1}
  %multiply.4321 = f32[1,4096,2]{2,1,0} multiply(%convert.1871, %broadcast.8358)
  %multiply.4322 = f32[1,4096,2]{2,1,0} multiply(%multiply.4321, %exponential.215)
  %reduce.666 = f32[1,4096]{1,0} reduce(%multiply.4322, %constant.3956), dimensions={2}, to_apply=%region_677.18466
  %negate.240 = f32[1,4096]{1,0} negate(%reduce.666)
  %broadcast.8359 = f32[1,4096,2]{2,1,0} broadcast(%negate.240), dimensions={0,1}
  %add.4065 = f32[1,4096,2]{2,1,0} add(%divide.826, %broadcast.8359)
  %multiply.4324 = f32[1,4096,2]{2,1,0} multiply(%add.4065, %exponential.215)
  %convert.1872 = bf16[1,4096,2]{2,1,0} convert(%multiply.4324)
  %scatter.672 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.16993, %convert.1872), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_679.18486
  %copy.3431 = bf16[1,4096,8]{2,1,0} copy(%scatter.672)
  %dot.740 = bf16[1,4096,4096]{2,1,0} dot(%copy.3431, %all-gather.314), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4066 = bf16[1,4096,4096]{1,2,0} add(%dot.737, %dot.740)
  %copy.3432 = bf16[1,4096,4096]{2,1,0} copy(%add.4066)
  %multiply.4325 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3432, %broadcast.8339)
  %convert.1873 = f32[1,4096,4096]{2,1,0} convert(%multiply.4325)
  %multiply.4326 = f32[1,4096,4096]{2,1,0} multiply(%convert.1873, %broadcast.8338)
  %multiply.4327 = f32[1,4096,4096]{2,1,0} multiply(%convert.1857, %convert.1873)
  %reduce.667 = f32[1,4096]{1,0} reduce(%multiply.4327, %constant.3956), dimensions={2}, to_apply=%region_682.18515
  %reshape.17013 = f32[1,4096,1]{2,1,0} reshape(%reduce.667)
  %divide.828 = f32[1,4096,1]{2,1,0} divide(%rsqrt.154, %reshape.16934)
  %multiply.4328 = f32[1,4096,1]{2,1,0} multiply(%divide.828, %broadcast.7210)
  %multiply.4329 = f32[1,4096,1]{2,1,0} multiply(%reshape.17013, %multiply.4328)
  %multiply.4330 = f32[1,4096,1]{2,1,0} multiply(%multiply.4329, %broadcast.7211)
  %reshape.17015 = f32[1,4096]{1,0} reshape(%multiply.4330)
  %broadcast.8363 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17015), dimensions={0,1}
  %multiply.4331 = f32[1,4096,4096]{2,1,0} multiply(%convert.1857, %broadcast.8363)
  %add.4067 = f32[1,4096,4096]{2,1,0} add(%multiply.4326, %multiply.4331)
  %convert.1874 = bf16[1,4096,4096]{2,1,0} convert(%add.4067)
  %add.4068 = bf16[1,4096,4096]{2,1,0} add(%copy.3402, %convert.1874)
  %get-tuple-element.1200 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.162), index=1
  %get-tuple-element.1201 = u32[2,4]{1,0} get-tuple-element(%custom-call.162), index=2
  %copy.3433 = bf16[1,4096,4096]{2,1,0} copy(%add.4068)
  %dot.741 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3433, %all-gather.313), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3434 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.741)
  %custom-call.164 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3406, %copy.3408, %copy.3409, %constant.3999, %get-tuple-element.1200, /*index=5*/%get-tuple-element.1201, %get-tuple-element.1185, %copy.3434, %scatter.664, %scatter.669, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1208 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.164), index=2
  %copy.3435 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1208)
  %dot.742 = bf16[1,4096,4096]{2,1,0} dot(%copy.3435, %all-gather.312), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1209 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.164), index=1
  %copy.3436 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1209)
  %slice.536 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3436), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.4333 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.536, %broadcast.8314)
  %slice.537 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3436), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.4335 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.537, %broadcast.8313)
  %add.4081 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4333, %multiply.4335)
  %multiply.4336 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.536, %broadcast.8313)
  %negate.241 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.537)
  %multiply.4337 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.241, %broadcast.8314)
  %add.4082 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4336, %multiply.4337)
  %concatenate.307 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4081, %add.4082), dimensions={3}
  %dot.743 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.307, %all-gather.311), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4083 = bf16[1,4096,4096]{2,1,0} add(%dot.742, %dot.743)
  %copy.3437 = bf16[1,4096,4096]{2,1,0} copy(%add.4083)
  %get-tuple-element.1210 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.164), index=0
  %copy.3438 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1210)
  %slice.538 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3438), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.4339 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.538, %broadcast.8304)
  %slice.539 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3438), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.4341 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.539, %broadcast.8302)
  %add.4084 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4339, %multiply.4341)
  %multiply.4342 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.538, %broadcast.8302)
  %negate.242 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.539)
  %multiply.4343 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.242, %broadcast.8304)
  %add.4085 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4342, %multiply.4343)
  %concatenate.308 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4084, %add.4085), dimensions={3}
  %dot.744 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.308, %all-gather.310), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3439 = bf16[1,4096,4096]{2,1,0} copy(%dot.744)
  %add.4087 = bf16[1,4096,4096]{2,1,0} add(%copy.3437, %copy.3439)
  %copy.3440 = bf16[1,4096,4096]{2,1,0} copy(%add.4087)
  %multiply.4344 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3440, %broadcast.8295)
  %convert.1877 = f32[1,4096,4096]{2,1,0} convert(%multiply.4344)
  %multiply.4346 = f32[1,4096,4096]{2,1,0} multiply(%convert.1877, %broadcast.8293)
  %multiply.4347 = f32[1,4096,4096]{2,1,0} multiply(%convert.1841, %convert.1877)
  %reduce.668 = f32[1,4096]{1,0} reduce(%multiply.4347, %constant.3956), dimensions={2}, to_apply=%region_686.18626
  %reshape.17071 = f32[1,4096,1]{2,1,0} reshape(%reduce.668)
  %divide.831 = f32[1,4096,1]{2,1,0} divide(%rsqrt.153, %reshape.16882)
  %multiply.4348 = f32[1,4096,1]{2,1,0} multiply(%divide.831, %broadcast.7210)
  %multiply.4350 = f32[1,4096,1]{2,1,0} multiply(%reshape.17071, %multiply.4348)
  %multiply.4351 = f32[1,4096,1]{2,1,0} multiply(%multiply.4350, %broadcast.7211)
  %reshape.17072 = f32[1,4096]{1,0} reshape(%multiply.4351)
  %broadcast.8382 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17072), dimensions={0,1}
  %multiply.4352 = f32[1,4096,4096]{2,1,0} multiply(%convert.1841, %broadcast.8382)
  %add.4088 = f32[1,4096,4096]{2,1,0} add(%multiply.4346, %multiply.4352)
  %convert.1878 = bf16[1,4096,4096]{2,1,0} convert(%add.4088)
  %add.4089 = bf16[1,4096,4096]{2,1,0} add(%add.4068, %convert.1878)
  %copy.3441 = bf16[1,4096,4096]{2,1,0} copy(%add.4089)
  %tuple.288 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.193, %param.194, %param.195, %param.196, %param.192, /*index=5*/%param.187, %param.189, %param.191, %param.188, %param.190, /*index=10*/%copy.2582, %param.10, %param.7, %copy.3441)
  %opt-barrier.13 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.288)
  %get-tuple-element.1211 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.13), index=13
  %copy.3442 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1211)
  %iota.2061 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1212 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.13), index=10
  %copy.3443 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1212)
  %convert.1879 = f32[1,4096,4096]{2,1,0} convert(%copy.3443)
  %multiply.4355 = f32[1,4096,4096]{2,1,0} multiply(%convert.1879, %convert.1879)
  %reduce.669 = f32[1,4096]{1,0} reduce(%multiply.4355, %constant.3956), dimensions={2}, to_apply=%region_688.18669
  %multiply.4356 = f32[1,4096]{1,0} multiply(%reduce.669, %broadcast.5380)
  %add.4091 = f32[1,4096]{1,0} add(%multiply.4356, %broadcast.5381)
  %reshape.17074 = f32[1,4096,1]{2,1,0} reshape(%add.4091)
  %rsqrt.155 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.17074)
  %reshape.17075 = f32[1,4096]{1,0} reshape(%rsqrt.155)
  %broadcast.8388 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17075), dimensions={0,1}
  %multiply.4357 = f32[1,4096,4096]{2,1,0} multiply(%convert.1879, %broadcast.8388)
  %convert.1880 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4357)
  %get-tuple-element.1213 = bf16[4096]{0} get-tuple-element(%opt-barrier.13), index=5
  %broadcast.8389 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1213), dimensions={2}
  %multiply.4359 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1880, %broadcast.8389)
  %copy.3444 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4359)
  %copy.3445 = bf16[1,4096,4096]{2,1,0} copy(%copy.3444)
  %get-tuple-element.1214 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.13), index=8
  %all-gather.317 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1214), channel_id=732, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.745 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3445, %all-gather.317), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.540 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.745), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1215 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.13), index=12
  %convert.1881 = f32[1,4096]{1,0} convert(%get-tuple-element.1215)
  %broadcast.8390 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1881), dimensions={0,1}
  %divide.832 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.8390, %broadcast.5388)
  %cosine.91 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.832)
  %convert.1883 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.91)
  %reshape.17077 = bf16[1,4096,64]{2,1,0} reshape(%convert.1883)
  %broadcast.8393 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17077), dimensions={0,1,3}
  %multiply.4363 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.540, %broadcast.8393)
  %slice.541 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.745), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.90 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.832)
  %convert.1884 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.90)
  %reshape.17080 = bf16[1,4096,64]{2,1,0} reshape(%convert.1884)
  %broadcast.8394 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17080), dimensions={0,1,3}
  %multiply.4365 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.541, %broadcast.8394)
  %subtract.479 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.4363, %multiply.4365)
  %multiply.4366 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.541, %broadcast.8393)
  %multiply.4367 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.540, %broadcast.8394)
  %add.4092 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4366, %multiply.4367)
  %concatenate.309 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.479, %add.4092), dimensions={3}
  %copy.3446 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.309)
  %get-tuple-element.1216 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.13), index=6
  %all-gather.318 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1216), channel_id=733, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.746 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3445, %all-gather.318), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.542 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.746), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.8400 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17077), dimensions={0,1,3}
  %multiply.4371 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.542, %broadcast.8400)
  %slice.543 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.746), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.8402 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17080), dimensions={0,1,3}
  %multiply.4373 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.543, %broadcast.8402)
  %subtract.480 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.4371, %multiply.4373)
  %multiply.4374 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.543, %broadcast.8400)
  %multiply.4375 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.542, %broadcast.8402)
  %add.4093 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4374, %multiply.4375)
  %concatenate.310 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.480, %add.4093), dimensions={3}
  %copy.3448 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.310)
  %get-tuple-element.1217 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.13), index=9
  %all-gather.319 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1217), channel_id=734, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.747 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3445, %all-gather.319), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3449 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.747)
  %get-tuple-element.1218 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.13), index=11
  %broadcast.8406 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1218), dimensions={0,1}
  %broadcast.8407 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1218), dimensions={0,2}
  %compare.2738 = pred[1,4096,4096]{2,1,0} compare(%broadcast.8406, %broadcast.8407), direction=EQ
  %and.354 = pred[1,4096,4096]{2,1,0} and(%compare.2738, %broadcast.5406)
  %select.1698 = f32[1,4096,4096]{2,1,0} select(%and.354, %broadcast.5407, %broadcast.5408)
  %compare.2740 = pred[1,4096,4096]{2,1,0} compare(%select.1698, %broadcast.5407), direction=NE
  %not.109 = pred[1,4096,4096]{2,1,0} not(%compare.2740)
  %convert.1889 = s32[1,4096,4096]{2,1,0} convert(%not.109)
  %reduce.670 = s32[1,4096]{1,0} reduce(%convert.1889, %constant.3783), dimensions={1}, to_apply=%region_689.18803
  %reshape.17089 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.670)
  %slice.544 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.17089), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.17091 = s32[1,1]{1,0} reshape(%slice.544)
  %reshape.17107 = s32[1]{0} reshape(%reshape.17091)
  %compare.2753 = pred[1]{0} compare(%reshape.17107, %constant.4022), direction=LT
  %select.1708 = s32[1]{0} select(%compare.2753, %reshape.11470, %reshape.17107)
  %scatter.687 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1708), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.45
  %reduce.671 = s32[1,4096]{1,0} reduce(%convert.1889, %constant.3783), dimensions={2}, to_apply=%region_690.18811
  %reshape.17092 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.671)
  %reduce.672 = s32[1,1]{1,0} reduce(%reshape.17092, %constant.4014), dimensions={3,2}, to_apply=%region_691.18816
  %reshape.17125 = s32[1]{0} reshape(%reduce.672)
  %compare.2766 = pred[1]{0} compare(%reshape.17125, %constant.4022), direction=LT
  %select.1718 = s32[1]{0} select(%compare.2766, %reshape.11470, %reshape.17125)
  %scatter.692 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1718), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.45
  %custom-call.165 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3446, %copy.3448, %copy.3449, %constant.3999, %scatter.687, /*index=5*/%scatter.692, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1224 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.165), index=0
  %copy.3450 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1224)
  %get-tuple-element.1225 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.13), index=7
  %all-gather.320 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1225), channel_id=735, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.748 = bf16[1,4096,4096]{2,1,0} dot(%copy.3450, %all-gather.320), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3451 = bf16[1,4096,4096]{2,1,0} copy(%dot.748)
  %add.4107 = bf16[1,4096,4096]{2,1,0} add(%copy.3443, %copy.3451)
  %convert.1894 = f32[1,4096,4096]{2,1,0} convert(%add.4107)
  %multiply.4377 = f32[1,4096,4096]{2,1,0} multiply(%convert.1894, %convert.1894)
  %reduce.673 = f32[1,4096]{1,0} reduce(%multiply.4377, %constant.3956), dimensions={2}, to_apply=%region_692.18832
  %multiply.4378 = f32[1,4096]{1,0} multiply(%reduce.673, %broadcast.5380)
  %add.4108 = f32[1,4096]{1,0} add(%multiply.4378, %broadcast.5381)
  %reshape.17127 = f32[1,4096,1]{2,1,0} reshape(%add.4108)
  %rsqrt.156 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.17127)
  %reshape.17129 = f32[1,4096]{1,0} reshape(%rsqrt.156)
  %broadcast.8421 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17129), dimensions={0,1}
  %multiply.4379 = f32[1,4096,4096]{2,1,0} multiply(%convert.1894, %broadcast.8421)
  %convert.1896 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4379)
  %get-tuple-element.1226 = bf16[4096]{0} get-tuple-element(%opt-barrier.13), index=4
  %broadcast.8422 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1226), dimensions={2}
  %multiply.4380 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1896, %broadcast.8422)
  %copy.3452 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4380)
  %get-tuple-element.1227 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.13), index=0
  %all-gather.321 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1227), channel_id=736, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.749 = bf16[1,4096,8]{2,1,0} dot(%copy.3452, %all-gather.321), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3453 = bf16[1,4096,8]{2,1,0} copy(%dot.749)
  %reshape.17130 = bf16[4096,8]{1,0} reshape(%copy.3453)
  %custom-call.166 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.17130), custom_call_target="TopK", called_computations={%compare-greater-than.45.clone}
  %get-tuple-element.1228 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.166), index=0
  %get-tuple-element.1229 = s32[4096,2]{1,0} get-tuple-element(%custom-call.166), index=1
  %add.4110 = s32[4096,2]{1,0} add(%get-tuple-element.1229, %broadcast.5420)
  %sort.227 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1228, %add.4110), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.45
  %get-tuple-element.1231 = s32[4096,2]{1,0} get-tuple-element(%sort.227), index=1
  %slice.546 = s32[4096,2]{1,0} slice(%get-tuple-element.1231), slice={[0:4096], [0:2]}
  %all-gather.323 = s32[32768,2]{1,0} all-gather(%slice.546), channel_id=738, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1510 = s32[4096,2]{1,0} dynamic-slice(%all-gather.323, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.17133 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1510)
  %compare.2767 = pred[1,4096,2]{2,1,0} compare(%reshape.17133, %broadcast.5421), direction=LT
  %add.4111 = s32[1,4096,2]{2,1,0} add(%reshape.17133, %broadcast.5422)
  %select.1719 = s32[1,4096,2]{2,1,0} select(%compare.2767, %add.4111, %reshape.17133)
  %reshape.17134 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1719)
  %concatenate.311 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2061, %reshape.17134), dimensions={3}
  %subtract.486 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.311, %broadcast.5433)
  %scatter.693 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.486, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_695.18911
  %gather.58 = u32[1,4096,2]{2,1,0} gather(%scatter.693, %subtract.486), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2768 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.58), direction=EQ
  %get-tuple-element.1230 = bf16[4096,2]{1,0} get-tuple-element(%sort.227), index=0
  %slice.545 = bf16[4096,2]{1,0} slice(%get-tuple-element.1230), slice={[0:4096], [0:2]}
  %all-gather.322 = bf16[32768,2]{1,0} all-gather(%slice.545), channel_id=737, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1520 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.322, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1899 = f32[4096,2]{1,0} convert(%dynamic-slice.1520)
  %reshape.17154 = f32[1,4096,2]{2,1,0} reshape(%convert.1899)
  %reduce.674 = f32[4096]{0} reduce(%convert.1899, %constant.4073), dimensions={1}, to_apply=%region_693.18861
  %reshape.17155 = f32[1,4096]{1,0} reshape(%reduce.674)
  %broadcast.8429 = f32[1,4096,2]{2,1,0} broadcast(%reshape.17155), dimensions={0,1}
  %subtract.485 = f32[1,4096,2]{2,1,0} subtract(%reshape.17154, %broadcast.8429)
  %exponential.217 = f32[1,4096,2]{2,1,0} exponential(%subtract.485)
  %reduce.675 = f32[1,4096]{1,0} reduce(%exponential.217, %constant.3956), dimensions={2}, to_apply=%region_694.18873
  %broadcast.8431 = f32[1,4096,2]{2,1,0} broadcast(%reduce.675), dimensions={0,1}
  %divide.836 = f32[1,4096,2]{2,1,0} divide(%exponential.217, %broadcast.8431)
  %convert.1900 = bf16[1,4096,2]{2,1,0} convert(%divide.836)
  %select.1720 = bf16[1,4096,2]{2,1,0} select(%compare.2768, %convert.1900, %broadcast.5432)
  %scatter.694 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.486, %select.1720), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_696.18920
  %broadcast.8436 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.17133), dimensions={0,1,2}
  %iota.2069 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2769 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.8436, %iota.2069), direction=EQ
  %convert.1901 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2769)
  %reshape.17166 = s32[1,8192,8]{2,1,0} reshape(%convert.1901)
  %copy.3454 = s32[1,8192,8]{2,1,0} copy(%reshape.17166)
  %reduce-window.354 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3454, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.12
  %reshape.17168 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.354)
  %copy.3455 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.17168)
  %compare.2770 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3455, %broadcast.5435), direction=LE
  %select.1721 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2770, %convert.1901, %broadcast.5436)
  %reduce.676 = s32[1,4096,8]{2,1,0} reduce(%select.1721, %constant.3783), dimensions={2}, to_apply=%region_697.18934
  %convert.1902 = bf16[1,4096,8]{2,1,0} convert(%reduce.676)
  %multiply.4386 = bf16[1,4096,8]{2,1,0} multiply(%scatter.694, %convert.1902)
  %broadcast.8438 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4386), dimensions={0,1,2}
  %multiply.4387 = s32[1,8192,8]{2,1,0} multiply(%copy.3454, %reduce-window.354)
  %reshape.17170 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.4387)
  %reduce.677 = s32[1,4096,8]{2,1,0} reduce(%reshape.17170, %constant.3783), dimensions={2}, to_apply=%region_698.18943
  %multiply.4388 = s32[1,4096,8]{2,1,0} multiply(%reduce.677, %reduce.676)
  %broadcast.8439 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4388), dimensions={0,1,2}
  %iota.2070 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2771 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.8439, %iota.2070), direction=EQ
  %convert.1903 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2771)
  %convert.1904 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1903)
  %multiply.4389 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.8438, %convert.1904)
  %slice.547 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.4389), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2772 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.547, %broadcast.5439), direction=NE
  %copy.3456 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2772)
  %convert.1906 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3456)
  %dot.750 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1906, %copy.3452), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.17177 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.750)
  %all-to-all.116 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17177), channel_id=745, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.187 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.116), dimensions={1,0,2,3,4}
  %reshape.17178 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.187)
  %transpose.188 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.17178), dimensions={1,0,2,3}
  %copy.3457 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.188)
  %get-tuple-element.1236 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.13), index=1
  %copy.3458 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1236)
  %dot.751 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3457, %copy.3458), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3459 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.751)
  %negate.243 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3459)
  %exponential.218 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.243)
  %add.4117 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.218, %broadcast.5440)
  %divide.837 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4117)
  %multiply.4393 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3459, %divide.837)
  %copy.3460 = bf16[1,4096,4096]{2,1,0} copy(%copy.3442)
  %copy.3461 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.547)
  %dot.752 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3460, %copy.3461), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.17182 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.752)
  %all-to-all.117 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.17182), channel_id=746, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.189 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.117), dimensions={2,0,1,3,4}
  %reshape.17183 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.189)
  %transpose.190 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.17183), dimensions={2,0,3,1}
  %copy.3462 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.190)
  %get-tuple-element.1237 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.13), index=3
  %copy.3463 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1237)
  %dot.753 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3462, %copy.3463), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.4396 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4393, %dot.753)
  %copy.3464 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.4396)
  %get-tuple-element.1238 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.13), index=2
  %copy.3465 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1238)
  %dot.754 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3464, %copy.3465), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.755 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3457, %copy.3465), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3466 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.755)
  %multiply.4397 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.753, %copy.3466)
  %multiply.4398 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4397, %divide.837)
  %multiply.4399 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3459, %multiply.4397)
  %subtract.487 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.837)
  %multiply.4400 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.837, %subtract.487)
  %multiply.4401 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4399, %multiply.4400)
  %add.4118 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.4398, %multiply.4401)
  %copy.3467 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4118)
  %dot.756 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3467, %copy.3458), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4120 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.754, %dot.756)
  %copy.3468 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4120)
  %transpose.191 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3468), dimensions={1,0,2,3}
  %reshape.17186 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.191)
  %all-to-all.118 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17186), channel_id=747, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.192 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.118), dimensions={1,0,2,3,4}
  %reshape.17187 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.192)
  %dot.757 = bf16[1,4096,4096]{2,1,0} dot(%convert.1906, %reshape.17187), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.17189 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1510)
  %compare.2774 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.311, %broadcast.7265), direction=GE
  %compare.2775 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.311, %broadcast.7267), direction=LE
  %and.359 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2774, %compare.2775)
  %reduce.678 = pred[1,4096,2]{2,1,0} reduce(%and.359, %constant.4025), dimensions={3}, to_apply=%region_701.19028
  %multiply.4404 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4393, %copy.3466)
  %dot.758 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.4404, %copy.3463), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3469 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.758)
  %reshape.17191 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3469)
  %all-to-all.119 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17191), channel_id=748, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.193 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.119), dimensions={1,0,2,3,4}
  %reshape.17192 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.193)
  %dot.759 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3460, %reshape.17192), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3470 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.759)
  %pad.13 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3470, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.4408 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.13, %convert.1904)
  %reduce.679 = bf16[1,4096,8]{2,1,0} reduce(%multiply.4408, %constant.3795), dimensions={3}, to_apply=%region_699.19010
  %multiply.4409 = bf16[1,4096,8]{2,1,0} multiply(%reduce.679, %convert.1902)
  %gather.59 = bf16[1,4096,2]{2,1,0} gather(%multiply.4409, %subtract.486), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1722 = bf16[1,4096,2]{2,1,0} select(%reduce.678, %gather.59, %broadcast.5432)
  %select.1723 = bf16[1,4096,2]{2,1,0} select(%compare.2768, %select.1722, %broadcast.5432)
  %convert.1909 = f32[1,4096,2]{2,1,0} convert(%select.1723)
  %divide.838 = f32[1,4096,2]{2,1,0} divide(%convert.1909, %broadcast.8431)
  %multiply.4410 = f32[1,4096]{1,0} multiply(%reduce.675, %reduce.675)
  %divide.839 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.4410)
  %broadcast.8445 = f32[1,4096,2]{2,1,0} broadcast(%divide.839), dimensions={0,1}
  %multiply.4411 = f32[1,4096,2]{2,1,0} multiply(%convert.1909, %broadcast.8445)
  %multiply.4412 = f32[1,4096,2]{2,1,0} multiply(%multiply.4411, %exponential.217)
  %reduce.680 = f32[1,4096]{1,0} reduce(%multiply.4412, %constant.3956), dimensions={2}, to_apply=%region_702.19042
  %negate.244 = f32[1,4096]{1,0} negate(%reduce.680)
  %broadcast.8446 = f32[1,4096,2]{2,1,0} broadcast(%negate.244), dimensions={0,1}
  %add.4121 = f32[1,4096,2]{2,1,0} add(%divide.838, %broadcast.8446)
  %multiply.4413 = f32[1,4096,2]{2,1,0} multiply(%add.4121, %exponential.217)
  %convert.1910 = bf16[1,4096,2]{2,1,0} convert(%multiply.4413)
  %scatter.695 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.17189, %convert.1910), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_704.19062
  %copy.3471 = bf16[1,4096,8]{2,1,0} copy(%scatter.695)
  %dot.760 = bf16[1,4096,4096]{2,1,0} dot(%copy.3471, %all-gather.321), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4122 = bf16[1,4096,4096]{1,2,0} add(%dot.757, %dot.760)
  %copy.3472 = bf16[1,4096,4096]{2,1,0} copy(%add.4122)
  %multiply.4414 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3472, %broadcast.8422)
  %convert.1911 = f32[1,4096,4096]{2,1,0} convert(%multiply.4414)
  %multiply.4416 = f32[1,4096,4096]{2,1,0} multiply(%convert.1911, %broadcast.8421)
  %multiply.4417 = f32[1,4096,4096]{2,1,0} multiply(%convert.1894, %convert.1911)
  %reduce.681 = f32[1,4096]{1,0} reduce(%multiply.4417, %constant.3956), dimensions={2}, to_apply=%region_707.19091
  %reshape.17207 = f32[1,4096,1]{2,1,0} reshape(%reduce.681)
  %divide.840 = f32[1,4096,1]{2,1,0} divide(%rsqrt.156, %reshape.17127)
  %multiply.4418 = f32[1,4096,1]{2,1,0} multiply(%divide.840, %broadcast.7210)
  %multiply.4419 = f32[1,4096,1]{2,1,0} multiply(%reshape.17207, %multiply.4418)
  %multiply.4420 = f32[1,4096,1]{2,1,0} multiply(%multiply.4419, %broadcast.7211)
  %reshape.17208 = f32[1,4096]{1,0} reshape(%multiply.4420)
  %broadcast.8450 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17208), dimensions={0,1}
  %multiply.4421 = f32[1,4096,4096]{2,1,0} multiply(%convert.1894, %broadcast.8450)
  %add.4123 = f32[1,4096,4096]{2,1,0} add(%multiply.4416, %multiply.4421)
  %convert.1912 = bf16[1,4096,4096]{2,1,0} convert(%add.4123)
  %add.4124 = bf16[1,4096,4096]{2,1,0} add(%copy.3442, %convert.1912)
  %get-tuple-element.1239 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.165), index=1
  %get-tuple-element.1240 = u32[2,4]{1,0} get-tuple-element(%custom-call.165), index=2
  %copy.3473 = bf16[1,4096,4096]{2,1,0} copy(%add.4124)
  %dot.761 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3473, %all-gather.320), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3474 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.761)
  %custom-call.167 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3446, %copy.3448, %copy.3449, %constant.3999, %get-tuple-element.1239, /*index=5*/%get-tuple-element.1240, %get-tuple-element.1224, %copy.3474, %scatter.687, %scatter.692, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1247 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.167), index=2
  %copy.3475 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1247)
  %dot.762 = bf16[1,4096,4096]{2,1,0} dot(%copy.3475, %all-gather.319), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1248 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.167), index=1
  %copy.3476 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1248)
  %slice.548 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3476), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.4423 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.548, %broadcast.8402)
  %slice.549 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3476), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.4425 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.549, %broadcast.8400)
  %add.4137 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4423, %multiply.4425)
  %multiply.4426 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.548, %broadcast.8400)
  %negate.245 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.549)
  %multiply.4427 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.245, %broadcast.8402)
  %add.4138 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4426, %multiply.4427)
  %concatenate.316 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4137, %add.4138), dimensions={3}
  %dot.763 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.316, %all-gather.318), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4139 = bf16[1,4096,4096]{2,1,0} add(%dot.762, %dot.763)
  %copy.3477 = bf16[1,4096,4096]{2,1,0} copy(%add.4139)
  %get-tuple-element.1249 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.167), index=0
  %copy.3478 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1249)
  %slice.550 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3478), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.4430 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.550, %broadcast.8394)
  %slice.551 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3478), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.4432 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.551, %broadcast.8393)
  %add.4140 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4430, %multiply.4432)
  %multiply.4433 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.550, %broadcast.8393)
  %negate.246 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.551)
  %multiply.4435 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.246, %broadcast.8394)
  %add.4141 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4433, %multiply.4435)
  %concatenate.317 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4140, %add.4141), dimensions={3}
  %dot.764 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.317, %all-gather.317), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3479 = bf16[1,4096,4096]{2,1,0} copy(%dot.764)
  %add.4142 = bf16[1,4096,4096]{2,1,0} add(%copy.3477, %copy.3479)
  %copy.3480 = bf16[1,4096,4096]{2,1,0} copy(%add.4142)
  %multiply.4436 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3480, %broadcast.8389)
  %convert.1915 = f32[1,4096,4096]{2,1,0} convert(%multiply.4436)
  %multiply.4437 = f32[1,4096,4096]{2,1,0} multiply(%convert.1915, %broadcast.8388)
  %multiply.4438 = f32[1,4096,4096]{2,1,0} multiply(%convert.1879, %convert.1915)
  %reduce.682 = f32[1,4096]{1,0} reduce(%multiply.4438, %constant.3956), dimensions={2}, to_apply=%region_711.19202
  %reshape.17255 = f32[1,4096,1]{2,1,0} reshape(%reduce.682)
  %divide.843 = f32[1,4096,1]{2,1,0} divide(%rsqrt.155, %reshape.17074)
  %multiply.4439 = f32[1,4096,1]{2,1,0} multiply(%divide.843, %broadcast.7210)
  %multiply.4440 = f32[1,4096,1]{2,1,0} multiply(%reshape.17255, %multiply.4439)
  %multiply.4441 = f32[1,4096,1]{2,1,0} multiply(%multiply.4440, %broadcast.7211)
  %reshape.17256 = f32[1,4096]{1,0} reshape(%multiply.4441)
  %broadcast.8467 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17256), dimensions={0,1}
  %multiply.4442 = f32[1,4096,4096]{2,1,0} multiply(%convert.1879, %broadcast.8467)
  %add.4143 = f32[1,4096,4096]{2,1,0} add(%multiply.4437, %multiply.4442)
  %convert.1916 = bf16[1,4096,4096]{2,1,0} convert(%add.4143)
  %add.4144 = bf16[1,4096,4096]{2,1,0} add(%add.4124, %convert.1916)
  %copy.3481 = bf16[1,4096,4096]{2,1,0} copy(%add.4144)
  %tuple.293 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.183, %param.184, %param.185, %param.186, %param.182, /*index=5*/%param.177, %param.179, %param.181, %param.178, %param.180, /*index=10*/%copy.2558, %param.10, %param.7, %copy.3481)
  %opt-barrier.14 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.293)
  %get-tuple-element.1250 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.14), index=13
  %copy.3482 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1250)
  %iota.2072 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1251 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.14), index=10
  %copy.3483 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1251)
  %convert.1917 = f32[1,4096,4096]{2,1,0} convert(%copy.3483)
  %multiply.4444 = f32[1,4096,4096]{2,1,0} multiply(%convert.1917, %convert.1917)
  %reduce.683 = f32[1,4096]{1,0} reduce(%multiply.4444, %constant.3956), dimensions={2}, to_apply=%region_713.19245
  %multiply.4445 = f32[1,4096]{1,0} multiply(%reduce.683, %broadcast.5380)
  %add.4146 = f32[1,4096]{1,0} add(%multiply.4445, %broadcast.5381)
  %reshape.17258 = f32[1,4096,1]{2,1,0} reshape(%add.4146)
  %rsqrt.157 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.17258)
  %reshape.17259 = f32[1,4096]{1,0} reshape(%rsqrt.157)
  %broadcast.8471 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17259), dimensions={0,1}
  %multiply.4446 = f32[1,4096,4096]{2,1,0} multiply(%convert.1917, %broadcast.8471)
  %convert.1918 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4446)
  %get-tuple-element.1252 = bf16[4096]{0} get-tuple-element(%opt-barrier.14), index=5
  %broadcast.8472 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1252), dimensions={2}
  %multiply.4447 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1918, %broadcast.8472)
  %copy.3484 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4447)
  %copy.3485 = bf16[1,4096,4096]{2,1,0} copy(%copy.3484)
  %get-tuple-element.1253 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.14), index=8
  %all-gather.324 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1253), channel_id=751, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.765 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3485, %all-gather.324), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.552 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.765), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1254 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.14), index=12
  %convert.1919 = f32[1,4096]{1,0} convert(%get-tuple-element.1254)
  %broadcast.8473 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1919), dimensions={0,1}
  %divide.844 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.8473, %broadcast.5388)
  %cosine.93 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.844)
  %convert.1921 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.93)
  %reshape.17261 = bf16[1,4096,64]{2,1,0} reshape(%convert.1921)
  %broadcast.8476 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17261), dimensions={0,1,3}
  %multiply.4451 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.552, %broadcast.8476)
  %slice.553 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.765), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.92 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.844)
  %convert.1922 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.92)
  %reshape.17263 = bf16[1,4096,64]{2,1,0} reshape(%convert.1922)
  %broadcast.8477 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17263), dimensions={0,1,3}
  %multiply.4453 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.553, %broadcast.8477)
  %subtract.491 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.4451, %multiply.4453)
  %multiply.4454 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.553, %broadcast.8476)
  %multiply.4455 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.552, %broadcast.8477)
  %add.4147 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4454, %multiply.4455)
  %concatenate.318 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.491, %add.4147), dimensions={3}
  %copy.3486 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.318)
  %get-tuple-element.1255 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.14), index=6
  %all-gather.325 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1255), channel_id=752, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.766 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3485, %all-gather.325), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.554 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.766), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.8485 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17261), dimensions={0,1,3}
  %multiply.4459 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.554, %broadcast.8485)
  %slice.555 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.766), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.8486 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17263), dimensions={0,1,3}
  %multiply.4461 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.555, %broadcast.8486)
  %subtract.492 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.4459, %multiply.4461)
  %multiply.4462 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.555, %broadcast.8485)
  %multiply.4463 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.554, %broadcast.8486)
  %add.4148 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4462, %multiply.4463)
  %concatenate.319 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.492, %add.4148), dimensions={3}
  %copy.3488 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.319)
  %get-tuple-element.1256 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.14), index=9
  %all-gather.326 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1256), channel_id=753, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.767 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3485, %all-gather.326), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3489 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.767)
  %get-tuple-element.1257 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.14), index=11
  %broadcast.8489 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1257), dimensions={0,1}
  %broadcast.8490 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1257), dimensions={0,2}
  %compare.2802 = pred[1,4096,4096]{2,1,0} compare(%broadcast.8489, %broadcast.8490), direction=EQ
  %and.364 = pred[1,4096,4096]{2,1,0} and(%compare.2802, %broadcast.5406)
  %select.1747 = f32[1,4096,4096]{2,1,0} select(%and.364, %broadcast.5407, %broadcast.5408)
  %compare.2804 = pred[1,4096,4096]{2,1,0} compare(%select.1747, %broadcast.5407), direction=NE
  %not.110 = pred[1,4096,4096]{2,1,0} not(%compare.2804)
  %convert.1927 = s32[1,4096,4096]{2,1,0} convert(%not.110)
  %reduce.684 = s32[1,4096]{1,0} reduce(%convert.1927, %constant.3783), dimensions={1}, to_apply=%region_714.19379
  %reshape.17272 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.684)
  %slice.556 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.17272), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.17274 = s32[1,1]{1,0} reshape(%slice.556)
  %reshape.17290 = s32[1]{0} reshape(%reshape.17274)
  %compare.2817 = pred[1]{0} compare(%reshape.17290, %constant.4022), direction=LT
  %select.1757 = s32[1]{0} select(%compare.2817, %reshape.11470, %reshape.17290)
  %scatter.710 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1757), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.46
  %reduce.685 = s32[1,4096]{1,0} reduce(%convert.1927, %constant.3783), dimensions={2}, to_apply=%region_715.19387
  %reshape.17275 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.685)
  %reduce.686 = s32[1,1]{1,0} reduce(%reshape.17275, %constant.4014), dimensions={3,2}, to_apply=%region_716.19392
  %reshape.17306 = s32[1]{0} reshape(%reduce.686)
  %compare.2830 = pred[1]{0} compare(%reshape.17306, %constant.4022), direction=LT
  %select.1768 = s32[1]{0} select(%compare.2830, %reshape.11470, %reshape.17306)
  %scatter.715 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1768), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.46
  %custom-call.168 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3486, %copy.3488, %copy.3489, %constant.3999, %scatter.710, /*index=5*/%scatter.715, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1263 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.168), index=0
  %copy.3490 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1263)
  %get-tuple-element.1264 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.14), index=7
  %all-gather.327 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1264), channel_id=754, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.768 = bf16[1,4096,4096]{2,1,0} dot(%copy.3490, %all-gather.327), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3491 = bf16[1,4096,4096]{2,1,0} copy(%dot.768)
  %add.4162 = bf16[1,4096,4096]{2,1,0} add(%copy.3483, %copy.3491)
  %convert.1931 = f32[1,4096,4096]{2,1,0} convert(%add.4162)
  %multiply.4465 = f32[1,4096,4096]{2,1,0} multiply(%convert.1931, %convert.1931)
  %reduce.687 = f32[1,4096]{1,0} reduce(%multiply.4465, %constant.3956), dimensions={2}, to_apply=%region_717.19408
  %multiply.4466 = f32[1,4096]{1,0} multiply(%reduce.687, %broadcast.5380)
  %add.4163 = f32[1,4096]{1,0} add(%multiply.4466, %broadcast.5381)
  %reshape.17309 = f32[1,4096,1]{2,1,0} reshape(%add.4163)
  %rsqrt.158 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.17309)
  %reshape.17310 = f32[1,4096]{1,0} reshape(%rsqrt.158)
  %broadcast.8502 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17310), dimensions={0,1}
  %multiply.4467 = f32[1,4096,4096]{2,1,0} multiply(%convert.1931, %broadcast.8502)
  %convert.1932 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4467)
  %get-tuple-element.1265 = bf16[4096]{0} get-tuple-element(%opt-barrier.14), index=4
  %broadcast.8503 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1265), dimensions={2}
  %multiply.4468 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1932, %broadcast.8503)
  %copy.3492 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4468)
  %get-tuple-element.1266 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.14), index=0
  %all-gather.328 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1266), channel_id=755, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.769 = bf16[1,4096,8]{2,1,0} dot(%copy.3492, %all-gather.328), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3493 = bf16[1,4096,8]{2,1,0} copy(%dot.769)
  %reshape.17311 = bf16[4096,8]{1,0} reshape(%copy.3493)
  %custom-call.169 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.17311), custom_call_target="TopK", called_computations={%compare-greater-than.46.clone}
  %get-tuple-element.1267 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.169), index=0
  %get-tuple-element.1268 = s32[4096,2]{1,0} get-tuple-element(%custom-call.169), index=1
  %add.4164 = s32[4096,2]{1,0} add(%get-tuple-element.1268, %broadcast.5420)
  %sort.232 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1267, %add.4164), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.46
  %get-tuple-element.1270 = s32[4096,2]{1,0} get-tuple-element(%sort.232), index=1
  %slice.558 = s32[4096,2]{1,0} slice(%get-tuple-element.1270), slice={[0:4096], [0:2]}
  %all-gather.330 = s32[32768,2]{1,0} all-gather(%slice.558), channel_id=757, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1554 = s32[4096,2]{1,0} dynamic-slice(%all-gather.330, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.17314 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1554)
  %compare.2831 = pred[1,4096,2]{2,1,0} compare(%reshape.17314, %broadcast.5421), direction=LT
  %add.4165 = s32[1,4096,2]{2,1,0} add(%reshape.17314, %broadcast.5422)
  %select.1769 = s32[1,4096,2]{2,1,0} select(%compare.2831, %add.4165, %reshape.17314)
  %reshape.17315 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1769)
  %concatenate.320 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2072, %reshape.17315), dimensions={3}
  %subtract.498 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.320, %broadcast.5433)
  %scatter.716 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.498, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_720.19487
  %gather.60 = u32[1,4096,2]{2,1,0} gather(%scatter.716, %subtract.498), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2832 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.60), direction=EQ
  %get-tuple-element.1269 = bf16[4096,2]{1,0} get-tuple-element(%sort.232), index=0
  %slice.557 = bf16[4096,2]{1,0} slice(%get-tuple-element.1269), slice={[0:4096], [0:2]}
  %all-gather.329 = bf16[32768,2]{1,0} all-gather(%slice.557), channel_id=756, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1564 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.329, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1935 = f32[4096,2]{1,0} convert(%dynamic-slice.1564)
  %reshape.17333 = f32[1,4096,2]{2,1,0} reshape(%convert.1935)
  %reduce.688 = f32[4096]{0} reduce(%convert.1935, %constant.4073), dimensions={1}, to_apply=%region_718.19437
  %reshape.17334 = f32[1,4096]{1,0} reshape(%reduce.688)
  %broadcast.8510 = f32[1,4096,2]{2,1,0} broadcast(%reshape.17334), dimensions={0,1}
  %subtract.497 = f32[1,4096,2]{2,1,0} subtract(%reshape.17333, %broadcast.8510)
  %exponential.219 = f32[1,4096,2]{2,1,0} exponential(%subtract.497)
  %reduce.689 = f32[1,4096]{1,0} reduce(%exponential.219, %constant.3956), dimensions={2}, to_apply=%region_719.19449
  %broadcast.8511 = f32[1,4096,2]{2,1,0} broadcast(%reduce.689), dimensions={0,1}
  %divide.848 = f32[1,4096,2]{2,1,0} divide(%exponential.219, %broadcast.8511)
  %convert.1936 = bf16[1,4096,2]{2,1,0} convert(%divide.848)
  %select.1770 = bf16[1,4096,2]{2,1,0} select(%compare.2832, %convert.1936, %broadcast.5432)
  %scatter.717 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.498, %select.1770), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_721.19496
  %broadcast.8513 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.17314), dimensions={0,1,2}
  %iota.2080 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2833 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.8513, %iota.2080), direction=EQ
  %convert.1937 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2833)
  %reshape.17343 = s32[1,8192,8]{2,1,0} reshape(%convert.1937)
  %copy.3494 = s32[1,8192,8]{2,1,0} copy(%reshape.17343)
  %reduce-window.359 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3494, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.13
  %reshape.17345 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.359)
  %copy.3495 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.17345)
  %compare.2834 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3495, %broadcast.5435), direction=LE
  %select.1771 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2834, %convert.1937, %broadcast.5436)
  %reduce.690 = s32[1,4096,8]{2,1,0} reduce(%select.1771, %constant.3783), dimensions={2}, to_apply=%region_722.19510
  %convert.1938 = bf16[1,4096,8]{2,1,0} convert(%reduce.690)
  %multiply.4474 = bf16[1,4096,8]{2,1,0} multiply(%scatter.717, %convert.1938)
  %broadcast.8515 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4474), dimensions={0,1,2}
  %multiply.4475 = s32[1,8192,8]{2,1,0} multiply(%copy.3494, %reduce-window.359)
  %reshape.17346 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.4475)
  %reduce.691 = s32[1,4096,8]{2,1,0} reduce(%reshape.17346, %constant.3783), dimensions={2}, to_apply=%region_723.19519
  %multiply.4476 = s32[1,4096,8]{2,1,0} multiply(%reduce.691, %reduce.690)
  %broadcast.8516 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4476), dimensions={0,1,2}
  %iota.2081 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2835 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.8516, %iota.2081), direction=EQ
  %convert.1939 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2835)
  %convert.1940 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1939)
  %multiply.4477 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.8515, %convert.1940)
  %slice.559 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.4477), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2836 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.559, %broadcast.5439), direction=NE
  %copy.3496 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2836)
  %convert.1941 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3496)
  %dot.770 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1941, %copy.3492), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.17351 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.770)
  %all-to-all.120 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17351), channel_id=764, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.194 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.120), dimensions={1,0,2,3,4}
  %reshape.17352 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.194)
  %transpose.195 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.17352), dimensions={1,0,2,3}
  %copy.3497 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.195)
  %get-tuple-element.1275 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.14), index=1
  %copy.3498 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1275)
  %dot.771 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3497, %copy.3498), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3499 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.771)
  %negate.247 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3499)
  %exponential.220 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.247)
  %add.4173 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.220, %broadcast.5440)
  %divide.849 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4173)
  %multiply.4481 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3499, %divide.849)
  %copy.3500 = bf16[1,4096,4096]{2,1,0} copy(%copy.3482)
  %copy.3501 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.559)
  %dot.772 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3500, %copy.3501), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.17355 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.772)
  %all-to-all.121 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.17355), channel_id=765, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.196 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.121), dimensions={2,0,1,3,4}
  %reshape.17356 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.196)
  %transpose.197 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.17356), dimensions={2,0,3,1}
  %copy.3502 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.197)
  %get-tuple-element.1276 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.14), index=3
  %copy.3503 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1276)
  %dot.773 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3502, %copy.3503), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.4484 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4481, %dot.773)
  %copy.3504 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.4484)
  %get-tuple-element.1277 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.14), index=2
  %copy.3505 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1277)
  %dot.774 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3504, %copy.3505), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.775 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3497, %copy.3505), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3506 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.775)
  %multiply.4485 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.773, %copy.3506)
  %multiply.4486 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4485, %divide.849)
  %multiply.4487 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3499, %multiply.4485)
  %subtract.499 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.849)
  %multiply.4488 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.849, %subtract.499)
  %multiply.4489 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4487, %multiply.4488)
  %add.4174 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.4486, %multiply.4489)
  %copy.3507 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4174)
  %dot.776 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3507, %copy.3498), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4175 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.774, %dot.776)
  %copy.3508 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4175)
  %transpose.198 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3508), dimensions={1,0,2,3}
  %reshape.17359 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.198)
  %all-to-all.122 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17359), channel_id=766, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.199 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.122), dimensions={1,0,2,3,4}
  %reshape.17360 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.199)
  %dot.777 = bf16[1,4096,4096]{2,1,0} dot(%convert.1941, %reshape.17360), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.17362 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1554)
  %compare.2838 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.320, %broadcast.7265), direction=GE
  %compare.2839 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.320, %broadcast.7267), direction=LE
  %and.369 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2838, %compare.2839)
  %reduce.692 = pred[1,4096,2]{2,1,0} reduce(%and.369, %constant.4025), dimensions={3}, to_apply=%region_726.19604
  %multiply.4492 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4481, %copy.3506)
  %dot.778 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.4492, %copy.3503), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3509 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.778)
  %reshape.17364 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3509)
  %all-to-all.123 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17364), channel_id=767, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.200 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.123), dimensions={1,0,2,3,4}
  %reshape.17366 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.200)
  %dot.779 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3500, %reshape.17366), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3510 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.779)
  %pad.14 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3510, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.4496 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.14, %convert.1940)
  %reduce.693 = bf16[1,4096,8]{2,1,0} reduce(%multiply.4496, %constant.3795), dimensions={3}, to_apply=%region_724.19586
  %multiply.4497 = bf16[1,4096,8]{2,1,0} multiply(%reduce.693, %convert.1938)
  %gather.61 = bf16[1,4096,2]{2,1,0} gather(%multiply.4497, %subtract.498), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1772 = bf16[1,4096,2]{2,1,0} select(%reduce.692, %gather.61, %broadcast.5432)
  %select.1773 = bf16[1,4096,2]{2,1,0} select(%compare.2832, %select.1772, %broadcast.5432)
  %convert.1943 = f32[1,4096,2]{2,1,0} convert(%select.1773)
  %divide.850 = f32[1,4096,2]{2,1,0} divide(%convert.1943, %broadcast.8511)
  %multiply.4498 = f32[1,4096]{1,0} multiply(%reduce.689, %reduce.689)
  %divide.851 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.4498)
  %broadcast.8524 = f32[1,4096,2]{2,1,0} broadcast(%divide.851), dimensions={0,1}
  %multiply.4499 = f32[1,4096,2]{2,1,0} multiply(%convert.1943, %broadcast.8524)
  %multiply.4500 = f32[1,4096,2]{2,1,0} multiply(%multiply.4499, %exponential.219)
  %reduce.694 = f32[1,4096]{1,0} reduce(%multiply.4500, %constant.3956), dimensions={2}, to_apply=%region_727.19618
  %negate.248 = f32[1,4096]{1,0} negate(%reduce.694)
  %broadcast.8525 = f32[1,4096,2]{2,1,0} broadcast(%negate.248), dimensions={0,1}
  %add.4176 = f32[1,4096,2]{2,1,0} add(%divide.850, %broadcast.8525)
  %multiply.4501 = f32[1,4096,2]{2,1,0} multiply(%add.4176, %exponential.219)
  %convert.1944 = bf16[1,4096,2]{2,1,0} convert(%multiply.4501)
  %scatter.718 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.17362, %convert.1944), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_729.19638
  %copy.3511 = bf16[1,4096,8]{2,1,0} copy(%scatter.718)
  %dot.780 = bf16[1,4096,4096]{2,1,0} dot(%copy.3511, %all-gather.328), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4177 = bf16[1,4096,4096]{1,2,0} add(%dot.777, %dot.780)
  %copy.3512 = bf16[1,4096,4096]{2,1,0} copy(%add.4177)
  %multiply.4502 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3512, %broadcast.8503)
  %convert.1945 = f32[1,4096,4096]{2,1,0} convert(%multiply.4502)
  %multiply.4503 = f32[1,4096,4096]{2,1,0} multiply(%convert.1945, %broadcast.8502)
  %multiply.4504 = f32[1,4096,4096]{2,1,0} multiply(%convert.1931, %convert.1945)
  %reduce.695 = f32[1,4096]{1,0} reduce(%multiply.4504, %constant.3956), dimensions={2}, to_apply=%region_732.19667
  %reshape.17380 = f32[1,4096,1]{2,1,0} reshape(%reduce.695)
  %divide.852 = f32[1,4096,1]{2,1,0} divide(%rsqrt.158, %reshape.17309)
  %multiply.4505 = f32[1,4096,1]{2,1,0} multiply(%divide.852, %broadcast.7210)
  %multiply.4506 = f32[1,4096,1]{2,1,0} multiply(%reshape.17380, %multiply.4505)
  %multiply.4507 = f32[1,4096,1]{2,1,0} multiply(%multiply.4506, %broadcast.7211)
  %reshape.17381 = f32[1,4096]{1,0} reshape(%multiply.4507)
  %broadcast.8531 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17381), dimensions={0,1}
  %multiply.4508 = f32[1,4096,4096]{2,1,0} multiply(%convert.1931, %broadcast.8531)
  %add.4178 = f32[1,4096,4096]{2,1,0} add(%multiply.4503, %multiply.4508)
  %convert.1946 = bf16[1,4096,4096]{2,1,0} convert(%add.4178)
  %add.4179 = bf16[1,4096,4096]{2,1,0} add(%copy.3482, %convert.1946)
  %get-tuple-element.1278 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.168), index=1
  %get-tuple-element.1279 = u32[2,4]{1,0} get-tuple-element(%custom-call.168), index=2
  %copy.3513 = bf16[1,4096,4096]{2,1,0} copy(%add.4179)
  %dot.781 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3513, %all-gather.327), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3514 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.781)
  %custom-call.170 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3486, %copy.3488, %copy.3489, %constant.3999, %get-tuple-element.1278, /*index=5*/%get-tuple-element.1279, %get-tuple-element.1263, %copy.3514, %scatter.710, %scatter.715, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1286 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.170), index=2
  %copy.3515 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1286)
  %dot.782 = bf16[1,4096,4096]{2,1,0} dot(%copy.3515, %all-gather.326), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1287 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.170), index=1
  %copy.3516 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1287)
  %slice.560 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3516), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.4510 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.560, %broadcast.8486)
  %slice.561 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3516), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.4513 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.561, %broadcast.8485)
  %add.4193 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4510, %multiply.4513)
  %multiply.4514 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.560, %broadcast.8485)
  %negate.249 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.561)
  %multiply.4515 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.249, %broadcast.8486)
  %add.4194 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4514, %multiply.4515)
  %concatenate.325 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4193, %add.4194), dimensions={3}
  %dot.783 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.325, %all-gather.325), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4195 = bf16[1,4096,4096]{2,1,0} add(%dot.782, %dot.783)
  %copy.3517 = bf16[1,4096,4096]{2,1,0} copy(%add.4195)
  %get-tuple-element.1288 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.170), index=0
  %copy.3518 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1288)
  %slice.562 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3518), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.4517 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.562, %broadcast.8477)
  %slice.563 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3518), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.4521 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.563, %broadcast.8476)
  %add.4197 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4517, %multiply.4521)
  %multiply.4522 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.562, %broadcast.8476)
  %negate.250 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.563)
  %multiply.4523 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.250, %broadcast.8477)
  %add.4198 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4522, %multiply.4523)
  %concatenate.326 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4197, %add.4198), dimensions={3}
  %dot.784 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.326, %all-gather.324), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3519 = bf16[1,4096,4096]{2,1,0} copy(%dot.784)
  %add.4199 = bf16[1,4096,4096]{2,1,0} add(%copy.3517, %copy.3519)
  %copy.3520 = bf16[1,4096,4096]{2,1,0} copy(%add.4199)
  %multiply.4524 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3520, %broadcast.8472)
  %convert.1949 = f32[1,4096,4096]{2,1,0} convert(%multiply.4524)
  %multiply.4525 = f32[1,4096,4096]{2,1,0} multiply(%convert.1949, %broadcast.8471)
  %multiply.4527 = f32[1,4096,4096]{2,1,0} multiply(%convert.1917, %convert.1949)
  %reduce.696 = f32[1,4096]{1,0} reduce(%multiply.4527, %constant.3956), dimensions={2}, to_apply=%region_736.19778
  %reshape.17432 = f32[1,4096,1]{2,1,0} reshape(%reduce.696)
  %divide.855 = f32[1,4096,1]{2,1,0} divide(%rsqrt.157, %reshape.17258)
  %multiply.4528 = f32[1,4096,1]{2,1,0} multiply(%divide.855, %broadcast.7210)
  %multiply.4529 = f32[1,4096,1]{2,1,0} multiply(%reshape.17432, %multiply.4528)
  %multiply.4530 = f32[1,4096,1]{2,1,0} multiply(%multiply.4529, %broadcast.7211)
  %reshape.17433 = f32[1,4096]{1,0} reshape(%multiply.4530)
  %broadcast.8552 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17433), dimensions={0,1}
  %multiply.4531 = f32[1,4096,4096]{2,1,0} multiply(%convert.1917, %broadcast.8552)
  %add.4200 = f32[1,4096,4096]{2,1,0} add(%multiply.4525, %multiply.4531)
  %convert.1950 = bf16[1,4096,4096]{2,1,0} convert(%add.4200)
  %add.4201 = bf16[1,4096,4096]{2,1,0} add(%add.4179, %convert.1950)
  %copy.3521 = bf16[1,4096,4096]{2,1,0} copy(%add.4201)
  %tuple.298 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.173, %param.174, %param.175, %param.176, %param.172, /*index=5*/%param.167, %param.169, %param.171, %param.168, %param.170, /*index=10*/%copy.2534, %param.10, %param.7, %copy.3521)
  %opt-barrier.15 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.298)
  %get-tuple-element.1289 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.15), index=13
  %copy.3522 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1289)
  %iota.2083 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1290 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.15), index=10
  %copy.3523 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1290)
  %convert.1951 = f32[1,4096,4096]{2,1,0} convert(%copy.3523)
  %multiply.4534 = f32[1,4096,4096]{2,1,0} multiply(%convert.1951, %convert.1951)
  %reduce.697 = f32[1,4096]{1,0} reduce(%multiply.4534, %constant.3956), dimensions={2}, to_apply=%region_738.19821
  %multiply.4535 = f32[1,4096]{1,0} multiply(%reduce.697, %broadcast.5380)
  %add.4203 = f32[1,4096]{1,0} add(%multiply.4535, %broadcast.5381)
  %reshape.17436 = f32[1,4096,1]{2,1,0} reshape(%add.4203)
  %rsqrt.159 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.17436)
  %reshape.17437 = f32[1,4096]{1,0} reshape(%rsqrt.159)
  %broadcast.8556 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17437), dimensions={0,1}
  %multiply.4536 = f32[1,4096,4096]{2,1,0} multiply(%convert.1951, %broadcast.8556)
  %convert.1952 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4536)
  %get-tuple-element.1291 = bf16[4096]{0} get-tuple-element(%opt-barrier.15), index=5
  %broadcast.8557 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1291), dimensions={2}
  %multiply.4537 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1952, %broadcast.8557)
  %copy.3524 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4537)
  %copy.3525 = bf16[1,4096,4096]{2,1,0} copy(%copy.3524)
  %get-tuple-element.1292 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.15), index=8
  %all-gather.331 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1292), channel_id=770, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.785 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3525, %all-gather.331), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.564 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.785), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1293 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.15), index=12
  %convert.1953 = f32[1,4096]{1,0} convert(%get-tuple-element.1293)
  %broadcast.8559 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1953), dimensions={0,1}
  %divide.856 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.8559, %broadcast.5388)
  %cosine.95 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.856)
  %convert.1956 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.95)
  %reshape.17439 = bf16[1,4096,64]{2,1,0} reshape(%convert.1956)
  %broadcast.8565 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17439), dimensions={0,1,3}
  %multiply.4541 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.564, %broadcast.8565)
  %slice.565 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.785), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.94 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.856)
  %convert.1957 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.94)
  %reshape.17441 = bf16[1,4096,64]{2,1,0} reshape(%convert.1957)
  %broadcast.8566 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17441), dimensions={0,1,3}
  %multiply.4543 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.565, %broadcast.8566)
  %subtract.503 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.4541, %multiply.4543)
  %multiply.4544 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.565, %broadcast.8565)
  %multiply.4545 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.564, %broadcast.8566)
  %add.4204 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4544, %multiply.4545)
  %concatenate.327 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.503, %add.4204), dimensions={3}
  %copy.3526 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.327)
  %get-tuple-element.1294 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.15), index=6
  %all-gather.332 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1294), channel_id=771, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.786 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3525, %all-gather.332), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.566 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.786), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.8576 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17439), dimensions={0,1,3}
  %multiply.4550 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.566, %broadcast.8576)
  %slice.567 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.786), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.8577 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17441), dimensions={0,1,3}
  %multiply.4552 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.567, %broadcast.8577)
  %subtract.504 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.4550, %multiply.4552)
  %multiply.4553 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.567, %broadcast.8576)
  %multiply.4554 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.566, %broadcast.8577)
  %add.4205 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4553, %multiply.4554)
  %concatenate.328 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.504, %add.4205), dimensions={3}
  %copy.3528 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.328)
  %get-tuple-element.1295 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.15), index=9
  %all-gather.333 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1295), channel_id=772, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.787 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3525, %all-gather.333), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3529 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.787)
  %get-tuple-element.1296 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.15), index=11
  %broadcast.8580 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1296), dimensions={0,1}
  %broadcast.8581 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1296), dimensions={0,2}
  %compare.2869 = pred[1,4096,4096]{2,1,0} compare(%broadcast.8580, %broadcast.8581), direction=EQ
  %and.374 = pred[1,4096,4096]{2,1,0} and(%compare.2869, %broadcast.5406)
  %select.1794 = f32[1,4096,4096]{2,1,0} select(%and.374, %broadcast.5407, %broadcast.5408)
  %compare.2871 = pred[1,4096,4096]{2,1,0} compare(%select.1794, %broadcast.5407), direction=NE
  %not.111 = pred[1,4096,4096]{2,1,0} not(%compare.2871)
  %convert.1962 = s32[1,4096,4096]{2,1,0} convert(%not.111)
  %reduce.698 = s32[1,4096]{1,0} reduce(%convert.1962, %constant.3783), dimensions={1}, to_apply=%region_739.19955
  %reshape.17450 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.698)
  %slice.568 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.17450), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.17452 = s32[1,1]{1,0} reshape(%slice.568)
  %reshape.17469 = s32[1]{0} reshape(%reshape.17452)
  %compare.2884 = pred[1]{0} compare(%reshape.17469, %constant.4022), direction=LT
  %select.1804 = s32[1]{0} select(%compare.2884, %reshape.11470, %reshape.17469)
  %scatter.733 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1804), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.47
  %reduce.699 = s32[1,4096]{1,0} reduce(%convert.1962, %constant.3783), dimensions={2}, to_apply=%region_740.19963
  %reshape.17453 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.699)
  %reduce.700 = s32[1,1]{1,0} reduce(%reshape.17453, %constant.4014), dimensions={3,2}, to_apply=%region_741.19968
  %reshape.17486 = s32[1]{0} reshape(%reduce.700)
  %compare.2897 = pred[1]{0} compare(%reshape.17486, %constant.4022), direction=LT
  %select.1814 = s32[1]{0} select(%compare.2897, %reshape.11470, %reshape.17486)
  %scatter.738 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1814), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.47
  %custom-call.171 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3526, %copy.3528, %copy.3529, %constant.3999, %scatter.733, /*index=5*/%scatter.738, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1302 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.171), index=0
  %copy.3530 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1302)
  %get-tuple-element.1303 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.15), index=7
  %all-gather.334 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1303), channel_id=773, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.788 = bf16[1,4096,4096]{2,1,0} dot(%copy.3530, %all-gather.334), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3531 = bf16[1,4096,4096]{2,1,0} copy(%dot.788)
  %add.4220 = bf16[1,4096,4096]{2,1,0} add(%copy.3523, %copy.3531)
  %convert.1967 = f32[1,4096,4096]{2,1,0} convert(%add.4220)
  %multiply.4556 = f32[1,4096,4096]{2,1,0} multiply(%convert.1967, %convert.1967)
  %reduce.701 = f32[1,4096]{1,0} reduce(%multiply.4556, %constant.3956), dimensions={2}, to_apply=%region_742.19984
  %multiply.4557 = f32[1,4096]{1,0} multiply(%reduce.701, %broadcast.5380)
  %add.4221 = f32[1,4096]{1,0} add(%multiply.4557, %broadcast.5381)
  %reshape.17488 = f32[1,4096,1]{2,1,0} reshape(%add.4221)
  %rsqrt.160 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.17488)
  %reshape.17489 = f32[1,4096]{1,0} reshape(%rsqrt.160)
  %broadcast.8597 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17489), dimensions={0,1}
  %multiply.4558 = f32[1,4096,4096]{2,1,0} multiply(%convert.1967, %broadcast.8597)
  %convert.1968 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4558)
  %get-tuple-element.1304 = bf16[4096]{0} get-tuple-element(%opt-barrier.15), index=4
  %broadcast.8599 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1304), dimensions={2}
  %multiply.4560 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1968, %broadcast.8599)
  %copy.3532 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4560)
  %get-tuple-element.1305 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.15), index=0
  %all-gather.335 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1305), channel_id=774, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.789 = bf16[1,4096,8]{2,1,0} dot(%copy.3532, %all-gather.335), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3533 = bf16[1,4096,8]{2,1,0} copy(%dot.789)
  %reshape.17490 = bf16[4096,8]{1,0} reshape(%copy.3533)
  %custom-call.172 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.17490), custom_call_target="TopK", called_computations={%compare-greater-than.47.clone}
  %get-tuple-element.1306 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.172), index=0
  %get-tuple-element.1307 = s32[4096,2]{1,0} get-tuple-element(%custom-call.172), index=1
  %add.4222 = s32[4096,2]{1,0} add(%get-tuple-element.1307, %broadcast.5420)
  %sort.237 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1306, %add.4222), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.47
  %get-tuple-element.1309 = s32[4096,2]{1,0} get-tuple-element(%sort.237), index=1
  %slice.570 = s32[4096,2]{1,0} slice(%get-tuple-element.1309), slice={[0:4096], [0:2]}
  %all-gather.337 = s32[32768,2]{1,0} all-gather(%slice.570), channel_id=776, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1598 = s32[4096,2]{1,0} dynamic-slice(%all-gather.337, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.17493 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1598)
  %compare.2898 = pred[1,4096,2]{2,1,0} compare(%reshape.17493, %broadcast.5421), direction=LT
  %add.4223 = s32[1,4096,2]{2,1,0} add(%reshape.17493, %broadcast.5422)
  %select.1815 = s32[1,4096,2]{2,1,0} select(%compare.2898, %add.4223, %reshape.17493)
  %reshape.17494 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1815)
  %concatenate.329 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2083, %reshape.17494), dimensions={3}
  %subtract.510 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.329, %broadcast.5433)
  %scatter.739 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.510, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_745.20063
  %gather.62 = u32[1,4096,2]{2,1,0} gather(%scatter.739, %subtract.510), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2899 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.62), direction=EQ
  %get-tuple-element.1308 = bf16[4096,2]{1,0} get-tuple-element(%sort.237), index=0
  %slice.569 = bf16[4096,2]{1,0} slice(%get-tuple-element.1308), slice={[0:4096], [0:2]}
  %all-gather.336 = bf16[32768,2]{1,0} all-gather(%slice.569), channel_id=775, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1608 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.336, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.1971 = f32[4096,2]{1,0} convert(%dynamic-slice.1608)
  %reshape.17510 = f32[1,4096,2]{2,1,0} reshape(%convert.1971)
  %reduce.702 = f32[4096]{0} reduce(%convert.1971, %constant.4073), dimensions={1}, to_apply=%region_743.20013
  %reshape.17511 = f32[1,4096]{1,0} reshape(%reduce.702)
  %broadcast.8612 = f32[1,4096,2]{2,1,0} broadcast(%reshape.17511), dimensions={0,1}
  %subtract.509 = f32[1,4096,2]{2,1,0} subtract(%reshape.17510, %broadcast.8612)
  %exponential.221 = f32[1,4096,2]{2,1,0} exponential(%subtract.509)
  %reduce.703 = f32[1,4096]{1,0} reduce(%exponential.221, %constant.3956), dimensions={2}, to_apply=%region_744.20025
  %broadcast.8614 = f32[1,4096,2]{2,1,0} broadcast(%reduce.703), dimensions={0,1}
  %divide.860 = f32[1,4096,2]{2,1,0} divide(%exponential.221, %broadcast.8614)
  %convert.1972 = bf16[1,4096,2]{2,1,0} convert(%divide.860)
  %select.1816 = bf16[1,4096,2]{2,1,0} select(%compare.2899, %convert.1972, %broadcast.5432)
  %scatter.740 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.510, %select.1816), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_746.20072
  %broadcast.8616 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.17493), dimensions={0,1,2}
  %iota.2091 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2900 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.8616, %iota.2091), direction=EQ
  %convert.1973 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2900)
  %reshape.17521 = s32[1,8192,8]{2,1,0} reshape(%convert.1973)
  %copy.3534 = s32[1,8192,8]{2,1,0} copy(%reshape.17521)
  %reduce-window.364 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3534, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.14
  %reshape.17523 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.364)
  %copy.3535 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.17523)
  %compare.2901 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3535, %broadcast.5435), direction=LE
  %select.1817 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2901, %convert.1973, %broadcast.5436)
  %reduce.704 = s32[1,4096,8]{2,1,0} reduce(%select.1817, %constant.3783), dimensions={2}, to_apply=%region_747.20086
  %convert.1974 = bf16[1,4096,8]{2,1,0} convert(%reduce.704)
  %multiply.4566 = bf16[1,4096,8]{2,1,0} multiply(%scatter.740, %convert.1974)
  %broadcast.8618 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4566), dimensions={0,1,2}
  %multiply.4567 = s32[1,8192,8]{2,1,0} multiply(%copy.3534, %reduce-window.364)
  %reshape.17524 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.4567)
  %reduce.705 = s32[1,4096,8]{2,1,0} reduce(%reshape.17524, %constant.3783), dimensions={2}, to_apply=%region_748.20095
  %multiply.4568 = s32[1,4096,8]{2,1,0} multiply(%reduce.705, %reduce.704)
  %broadcast.8619 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4568), dimensions={0,1,2}
  %iota.2092 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2902 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.8619, %iota.2092), direction=EQ
  %convert.1975 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2902)
  %convert.1976 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.1975)
  %multiply.4569 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.8618, %convert.1976)
  %slice.571 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.4569), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2903 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.571, %broadcast.5439), direction=NE
  %copy.3536 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2903)
  %convert.1977 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3536)
  %dot.790 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.1977, %copy.3532), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.17528 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.790)
  %all-to-all.124 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17528), channel_id=783, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.201 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.124), dimensions={1,0,2,3,4}
  %reshape.17529 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.201)
  %transpose.202 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.17529), dimensions={1,0,2,3}
  %copy.3537 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.202)
  %get-tuple-element.1314 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.15), index=1
  %copy.3538 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1314)
  %dot.791 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3537, %copy.3538), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3539 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.791)
  %negate.251 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3539)
  %exponential.222 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.251)
  %add.4228 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.222, %broadcast.5440)
  %divide.861 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4228)
  %multiply.4574 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3539, %divide.861)
  %copy.3540 = bf16[1,4096,4096]{2,1,0} copy(%copy.3522)
  %copy.3541 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.571)
  %dot.792 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3540, %copy.3541), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.17534 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.792)
  %all-to-all.125 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.17534), channel_id=784, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.203 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.125), dimensions={2,0,1,3,4}
  %reshape.17535 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.203)
  %transpose.204 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.17535), dimensions={2,0,3,1}
  %copy.3542 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.204)
  %get-tuple-element.1315 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.15), index=3
  %copy.3543 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1315)
  %dot.793 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3542, %copy.3543), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.4577 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4574, %dot.793)
  %copy.3544 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.4577)
  %get-tuple-element.1316 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.15), index=2
  %copy.3545 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1316)
  %dot.794 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3544, %copy.3545), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.795 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3537, %copy.3545), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3546 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.795)
  %multiply.4579 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.793, %copy.3546)
  %multiply.4580 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4579, %divide.861)
  %multiply.4581 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3539, %multiply.4579)
  %subtract.511 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.861)
  %multiply.4582 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.861, %subtract.511)
  %multiply.4583 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4581, %multiply.4582)
  %add.4229 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.4580, %multiply.4583)
  %copy.3547 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4229)
  %dot.796 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3547, %copy.3538), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4230 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.794, %dot.796)
  %copy.3548 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4230)
  %transpose.205 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3548), dimensions={1,0,2,3}
  %reshape.17538 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.205)
  %all-to-all.126 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17538), channel_id=785, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.206 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.126), dimensions={1,0,2,3,4}
  %reshape.17539 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.206)
  %dot.797 = bf16[1,4096,4096]{2,1,0} dot(%convert.1977, %reshape.17539), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.17542 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1598)
  %compare.2905 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.329, %broadcast.7265), direction=GE
  %compare.2906 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.329, %broadcast.7267), direction=LE
  %and.379 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2905, %compare.2906)
  %reduce.706 = pred[1,4096,2]{2,1,0} reduce(%and.379, %constant.4025), dimensions={3}, to_apply=%region_751.20180
  %multiply.4586 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4574, %copy.3546)
  %dot.798 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.4586, %copy.3543), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3549 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.798)
  %reshape.17544 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3549)
  %all-to-all.127 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17544), channel_id=786, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.207 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.127), dimensions={1,0,2,3,4}
  %reshape.17545 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.207)
  %dot.799 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3540, %reshape.17545), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3550 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.799)
  %pad.15 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3550, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.4591 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.15, %convert.1976)
  %reduce.707 = bf16[1,4096,8]{2,1,0} reduce(%multiply.4591, %constant.3795), dimensions={3}, to_apply=%region_749.20162
  %multiply.4592 = bf16[1,4096,8]{2,1,0} multiply(%reduce.707, %convert.1974)
  %gather.63 = bf16[1,4096,2]{2,1,0} gather(%multiply.4592, %subtract.510), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1818 = bf16[1,4096,2]{2,1,0} select(%reduce.706, %gather.63, %broadcast.5432)
  %select.1819 = bf16[1,4096,2]{2,1,0} select(%compare.2899, %select.1818, %broadcast.5432)
  %convert.1979 = f32[1,4096,2]{2,1,0} convert(%select.1819)
  %divide.862 = f32[1,4096,2]{2,1,0} divide(%convert.1979, %broadcast.8614)
  %multiply.4593 = f32[1,4096]{1,0} multiply(%reduce.703, %reduce.703)
  %divide.863 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.4593)
  %broadcast.8629 = f32[1,4096,2]{2,1,0} broadcast(%divide.863), dimensions={0,1}
  %multiply.4594 = f32[1,4096,2]{2,1,0} multiply(%convert.1979, %broadcast.8629)
  %multiply.4595 = f32[1,4096,2]{2,1,0} multiply(%multiply.4594, %exponential.221)
  %reduce.708 = f32[1,4096]{1,0} reduce(%multiply.4595, %constant.3956), dimensions={2}, to_apply=%region_752.20194
  %negate.252 = f32[1,4096]{1,0} negate(%reduce.708)
  %broadcast.8630 = f32[1,4096,2]{2,1,0} broadcast(%negate.252), dimensions={0,1}
  %add.4231 = f32[1,4096,2]{2,1,0} add(%divide.862, %broadcast.8630)
  %multiply.4596 = f32[1,4096,2]{2,1,0} multiply(%add.4231, %exponential.221)
  %convert.1980 = bf16[1,4096,2]{2,1,0} convert(%multiply.4596)
  %scatter.741 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.17542, %convert.1980), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_754.20214
  %copy.3551 = bf16[1,4096,8]{2,1,0} copy(%scatter.741)
  %dot.800 = bf16[1,4096,4096]{2,1,0} dot(%copy.3551, %all-gather.335), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4232 = bf16[1,4096,4096]{1,2,0} add(%dot.797, %dot.800)
  %copy.3552 = bf16[1,4096,4096]{2,1,0} copy(%add.4232)
  %multiply.4597 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3552, %broadcast.8599)
  %convert.1981 = f32[1,4096,4096]{2,1,0} convert(%multiply.4597)
  %multiply.4598 = f32[1,4096,4096]{2,1,0} multiply(%convert.1981, %broadcast.8597)
  %multiply.4599 = f32[1,4096,4096]{2,1,0} multiply(%convert.1967, %convert.1981)
  %reduce.709 = f32[1,4096]{1,0} reduce(%multiply.4599, %constant.3956), dimensions={2}, to_apply=%region_757.20243
  %reshape.17561 = f32[1,4096,1]{2,1,0} reshape(%reduce.709)
  %divide.864 = f32[1,4096,1]{2,1,0} divide(%rsqrt.160, %reshape.17488)
  %multiply.4600 = f32[1,4096,1]{2,1,0} multiply(%divide.864, %broadcast.7210)
  %multiply.4601 = f32[1,4096,1]{2,1,0} multiply(%reshape.17561, %multiply.4600)
  %multiply.4602 = f32[1,4096,1]{2,1,0} multiply(%multiply.4601, %broadcast.7211)
  %reshape.17562 = f32[1,4096]{1,0} reshape(%multiply.4602)
  %broadcast.8637 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17562), dimensions={0,1}
  %multiply.4603 = f32[1,4096,4096]{2,1,0} multiply(%convert.1967, %broadcast.8637)
  %add.4233 = f32[1,4096,4096]{2,1,0} add(%multiply.4598, %multiply.4603)
  %convert.1983 = bf16[1,4096,4096]{2,1,0} convert(%add.4233)
  %add.4234 = bf16[1,4096,4096]{2,1,0} add(%copy.3522, %convert.1983)
  %get-tuple-element.1317 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.171), index=1
  %get-tuple-element.1318 = u32[2,4]{1,0} get-tuple-element(%custom-call.171), index=2
  %copy.3553 = bf16[1,4096,4096]{2,1,0} copy(%add.4234)
  %dot.801 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3553, %all-gather.334), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3554 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.801)
  %custom-call.173 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3526, %copy.3528, %copy.3529, %constant.3999, %get-tuple-element.1317, /*index=5*/%get-tuple-element.1318, %get-tuple-element.1302, %copy.3554, %scatter.733, %scatter.738, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1328 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.173), index=2
  %copy.3555 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1328)
  %dot.802 = bf16[1,4096,4096]{2,1,0} dot(%copy.3555, %all-gather.333), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1329 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.173), index=1
  %copy.3556 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1329)
  %slice.572 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3556), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.4605 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.572, %broadcast.8577)
  %slice.573 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3556), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.4607 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.573, %broadcast.8576)
  %add.4247 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4605, %multiply.4607)
  %multiply.4608 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.572, %broadcast.8576)
  %negate.253 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.573)
  %multiply.4610 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.253, %broadcast.8577)
  %add.4248 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4608, %multiply.4610)
  %concatenate.334 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4247, %add.4248), dimensions={3}
  %dot.803 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.334, %all-gather.332), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4249 = bf16[1,4096,4096]{2,1,0} add(%dot.802, %dot.803)
  %copy.3557 = bf16[1,4096,4096]{2,1,0} copy(%add.4249)
  %get-tuple-element.1330 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.173), index=0
  %copy.3558 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1330)
  %slice.574 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3558), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.4612 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.574, %broadcast.8566)
  %slice.575 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3558), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.4615 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.575, %broadcast.8565)
  %add.4250 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4612, %multiply.4615)
  %multiply.4616 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.574, %broadcast.8565)
  %negate.254 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.575)
  %multiply.4617 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.254, %broadcast.8566)
  %add.4252 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4616, %multiply.4617)
  %concatenate.335 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4250, %add.4252), dimensions={3}
  %dot.804 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.335, %all-gather.331), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3559 = bf16[1,4096,4096]{2,1,0} copy(%dot.804)
  %add.4253 = bf16[1,4096,4096]{2,1,0} add(%copy.3557, %copy.3559)
  %copy.3560 = bf16[1,4096,4096]{2,1,0} copy(%add.4253)
  %multiply.4619 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3560, %broadcast.8557)
  %convert.1986 = f32[1,4096,4096]{2,1,0} convert(%multiply.4619)
  %multiply.4620 = f32[1,4096,4096]{2,1,0} multiply(%convert.1986, %broadcast.8556)
  %multiply.4621 = f32[1,4096,4096]{2,1,0} multiply(%convert.1951, %convert.1986)
  %reduce.710 = f32[1,4096]{1,0} reduce(%multiply.4621, %constant.3956), dimensions={2}, to_apply=%region_761.20354
  %reshape.17618 = f32[1,4096,1]{2,1,0} reshape(%reduce.710)
  %divide.867 = f32[1,4096,1]{2,1,0} divide(%rsqrt.159, %reshape.17436)
  %multiply.4623 = f32[1,4096,1]{2,1,0} multiply(%divide.867, %broadcast.7210)
  %multiply.4624 = f32[1,4096,1]{2,1,0} multiply(%reshape.17618, %multiply.4623)
  %multiply.4625 = f32[1,4096,1]{2,1,0} multiply(%multiply.4624, %broadcast.7211)
  %reshape.17619 = f32[1,4096]{1,0} reshape(%multiply.4625)
  %broadcast.8655 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17619), dimensions={0,1}
  %multiply.4626 = f32[1,4096,4096]{2,1,0} multiply(%convert.1951, %broadcast.8655)
  %add.4254 = f32[1,4096,4096]{2,1,0} add(%multiply.4620, %multiply.4626)
  %convert.1987 = bf16[1,4096,4096]{2,1,0} convert(%add.4254)
  %add.4255 = bf16[1,4096,4096]{2,1,0} add(%add.4234, %convert.1987)
  %copy.3561 = bf16[1,4096,4096]{2,1,0} copy(%add.4255)
  %tuple.303 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.163, %param.164, %param.165, %param.166, %param.162, /*index=5*/%param.157, %param.159, %param.161, %param.158, %param.160, /*index=10*/%copy.2510, %param.10, %param.7, %copy.3561)
  %opt-barrier.16 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.303)
  %get-tuple-element.1331 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.16), index=13
  %copy.3562 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1331)
  %iota.2094 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1332 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.16), index=10
  %copy.3563 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1332)
  %convert.1988 = f32[1,4096,4096]{2,1,0} convert(%copy.3563)
  %multiply.4629 = f32[1,4096,4096]{2,1,0} multiply(%convert.1988, %convert.1988)
  %reduce.711 = f32[1,4096]{1,0} reduce(%multiply.4629, %constant.3956), dimensions={2}, to_apply=%region_763.20397
  %multiply.4630 = f32[1,4096]{1,0} multiply(%reduce.711, %broadcast.5380)
  %add.4257 = f32[1,4096]{1,0} add(%multiply.4630, %broadcast.5381)
  %reshape.17621 = f32[1,4096,1]{2,1,0} reshape(%add.4257)
  %rsqrt.161 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.17621)
  %reshape.17622 = f32[1,4096]{1,0} reshape(%rsqrt.161)
  %broadcast.8659 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17622), dimensions={0,1}
  %multiply.4631 = f32[1,4096,4096]{2,1,0} multiply(%convert.1988, %broadcast.8659)
  %convert.1989 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4631)
  %get-tuple-element.1333 = bf16[4096]{0} get-tuple-element(%opt-barrier.16), index=5
  %broadcast.8660 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1333), dimensions={2}
  %multiply.4632 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1989, %broadcast.8660)
  %copy.3564 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4632)
  %copy.3565 = bf16[1,4096,4096]{2,1,0} copy(%copy.3564)
  %get-tuple-element.1334 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.16), index=8
  %all-gather.338 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1334), channel_id=789, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.805 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3565, %all-gather.338), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.576 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.805), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1335 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.16), index=12
  %convert.1990 = f32[1,4096]{1,0} convert(%get-tuple-element.1335)
  %broadcast.8661 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.1990), dimensions={0,1}
  %divide.868 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.8661, %broadcast.5388)
  %cosine.97 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.868)
  %convert.1992 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.97)
  %reshape.17626 = bf16[1,4096,64]{2,1,0} reshape(%convert.1992)
  %broadcast.8664 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17626), dimensions={0,1,3}
  %multiply.4636 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.576, %broadcast.8664)
  %slice.577 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.805), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.96 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.868)
  %convert.1993 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.96)
  %reshape.17629 = bf16[1,4096,64]{2,1,0} reshape(%convert.1993)
  %broadcast.8665 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17629), dimensions={0,1,3}
  %multiply.4638 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.577, %broadcast.8665)
  %subtract.515 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.4636, %multiply.4638)
  %multiply.4639 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.577, %broadcast.8664)
  %multiply.4640 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.576, %broadcast.8665)
  %add.4259 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4639, %multiply.4640)
  %concatenate.336 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.515, %add.4259), dimensions={3}
  %copy.3566 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.336)
  %get-tuple-element.1336 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.16), index=6
  %all-gather.339 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1336), channel_id=790, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.806 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3565, %all-gather.339), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.578 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.806), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.8671 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17626), dimensions={0,1,3}
  %multiply.4644 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.578, %broadcast.8671)
  %slice.579 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.806), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.8672 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17629), dimensions={0,1,3}
  %multiply.4646 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.579, %broadcast.8672)
  %subtract.516 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.4644, %multiply.4646)
  %multiply.4647 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.579, %broadcast.8671)
  %multiply.4648 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.578, %broadcast.8672)
  %add.4260 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4647, %multiply.4648)
  %concatenate.337 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.516, %add.4260), dimensions={3}
  %copy.3568 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.337)
  %get-tuple-element.1337 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.16), index=9
  %all-gather.340 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1337), channel_id=791, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.807 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3565, %all-gather.340), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3569 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.807)
  %get-tuple-element.1338 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.16), index=11
  %broadcast.8675 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1338), dimensions={0,1}
  %broadcast.8676 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1338), dimensions={0,2}
  %compare.2933 = pred[1,4096,4096]{2,1,0} compare(%broadcast.8675, %broadcast.8676), direction=EQ
  %and.384 = pred[1,4096,4096]{2,1,0} and(%compare.2933, %broadcast.5406)
  %select.1840 = f32[1,4096,4096]{2,1,0} select(%and.384, %broadcast.5407, %broadcast.5408)
  %compare.2935 = pred[1,4096,4096]{2,1,0} compare(%select.1840, %broadcast.5407), direction=NE
  %not.112 = pred[1,4096,4096]{2,1,0} not(%compare.2935)
  %convert.1999 = s32[1,4096,4096]{2,1,0} convert(%not.112)
  %reduce.712 = s32[1,4096]{1,0} reduce(%convert.1999, %constant.3783), dimensions={1}, to_apply=%region_764.20531
  %reshape.17642 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.712)
  %slice.580 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.17642), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.17644 = s32[1,1]{1,0} reshape(%slice.580)
  %reshape.17660 = s32[1]{0} reshape(%reshape.17644)
  %compare.2948 = pred[1]{0} compare(%reshape.17660, %constant.4022), direction=LT
  %select.1850 = s32[1]{0} select(%compare.2948, %reshape.11470, %reshape.17660)
  %scatter.756 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1850), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.48
  %reduce.713 = s32[1,4096]{1,0} reduce(%convert.1999, %constant.3783), dimensions={2}, to_apply=%region_765.20539
  %reshape.17645 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.713)
  %reduce.714 = s32[1,1]{1,0} reduce(%reshape.17645, %constant.4014), dimensions={3,2}, to_apply=%region_766.20544
  %reshape.17675 = s32[1]{0} reshape(%reduce.714)
  %compare.2964 = pred[1]{0} compare(%reshape.17675, %constant.4022), direction=LT
  %select.1860 = s32[1]{0} select(%compare.2964, %reshape.11470, %reshape.17675)
  %scatter.761 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1860), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.48
  %custom-call.174 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3566, %copy.3568, %copy.3569, %constant.3999, %scatter.756, /*index=5*/%scatter.761, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1344 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.174), index=0
  %copy.3570 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1344)
  %get-tuple-element.1345 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.16), index=7
  %all-gather.341 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1345), channel_id=792, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.808 = bf16[1,4096,4096]{2,1,0} dot(%copy.3570, %all-gather.341), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3571 = bf16[1,4096,4096]{2,1,0} copy(%dot.808)
  %add.4274 = bf16[1,4096,4096]{2,1,0} add(%copy.3563, %copy.3571)
  %convert.2003 = f32[1,4096,4096]{2,1,0} convert(%add.4274)
  %multiply.4651 = f32[1,4096,4096]{2,1,0} multiply(%convert.2003, %convert.2003)
  %reduce.715 = f32[1,4096]{1,0} reduce(%multiply.4651, %constant.3956), dimensions={2}, to_apply=%region_767.20560
  %multiply.4652 = f32[1,4096]{1,0} multiply(%reduce.715, %broadcast.5380)
  %add.4275 = f32[1,4096]{1,0} add(%multiply.4652, %broadcast.5381)
  %reshape.17677 = f32[1,4096,1]{2,1,0} reshape(%add.4275)
  %rsqrt.162 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.17677)
  %reshape.17678 = f32[1,4096]{1,0} reshape(%rsqrt.162)
  %broadcast.8692 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17678), dimensions={0,1}
  %multiply.4654 = f32[1,4096,4096]{2,1,0} multiply(%convert.2003, %broadcast.8692)
  %convert.2004 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4654)
  %get-tuple-element.1346 = bf16[4096]{0} get-tuple-element(%opt-barrier.16), index=4
  %broadcast.8693 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1346), dimensions={2}
  %multiply.4655 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2004, %broadcast.8693)
  %copy.3572 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4655)
  %get-tuple-element.1347 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.16), index=0
  %all-gather.342 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1347), channel_id=793, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.809 = bf16[1,4096,8]{2,1,0} dot(%copy.3572, %all-gather.342), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3573 = bf16[1,4096,8]{2,1,0} copy(%dot.809)
  %reshape.17679 = bf16[4096,8]{1,0} reshape(%copy.3573)
  %custom-call.175 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.17679), custom_call_target="TopK", called_computations={%compare-greater-than.48.clone}
  %get-tuple-element.1348 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.175), index=0
  %get-tuple-element.1349 = s32[4096,2]{1,0} get-tuple-element(%custom-call.175), index=1
  %add.4276 = s32[4096,2]{1,0} add(%get-tuple-element.1349, %broadcast.5420)
  %sort.242 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1348, %add.4276), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.48
  %get-tuple-element.1351 = s32[4096,2]{1,0} get-tuple-element(%sort.242), index=1
  %slice.582 = s32[4096,2]{1,0} slice(%get-tuple-element.1351), slice={[0:4096], [0:2]}
  %all-gather.344 = s32[32768,2]{1,0} all-gather(%slice.582), channel_id=795, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1642 = s32[4096,2]{1,0} dynamic-slice(%all-gather.344, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.17683 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1642)
  %compare.2965 = pred[1,4096,2]{2,1,0} compare(%reshape.17683, %broadcast.5421), direction=LT
  %add.4277 = s32[1,4096,2]{2,1,0} add(%reshape.17683, %broadcast.5422)
  %select.1861 = s32[1,4096,2]{2,1,0} select(%compare.2965, %add.4277, %reshape.17683)
  %reshape.17684 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1861)
  %concatenate.338 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2094, %reshape.17684), dimensions={3}
  %subtract.522 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.338, %broadcast.5433)
  %scatter.762 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.522, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_770.20639
  %gather.64 = u32[1,4096,2]{2,1,0} gather(%scatter.762, %subtract.522), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.2966 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.64), direction=EQ
  %get-tuple-element.1350 = bf16[4096,2]{1,0} get-tuple-element(%sort.242), index=0
  %slice.581 = bf16[4096,2]{1,0} slice(%get-tuple-element.1350), slice={[0:4096], [0:2]}
  %all-gather.343 = bf16[32768,2]{1,0} all-gather(%slice.581), channel_id=794, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1652 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.343, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2007 = f32[4096,2]{1,0} convert(%dynamic-slice.1652)
  %reshape.17703 = f32[1,4096,2]{2,1,0} reshape(%convert.2007)
  %reduce.716 = f32[4096]{0} reduce(%convert.2007, %constant.4073), dimensions={1}, to_apply=%region_768.20589
  %reshape.17705 = f32[1,4096]{1,0} reshape(%reduce.716)
  %broadcast.8700 = f32[1,4096,2]{2,1,0} broadcast(%reshape.17705), dimensions={0,1}
  %subtract.521 = f32[1,4096,2]{2,1,0} subtract(%reshape.17703, %broadcast.8700)
  %exponential.223 = f32[1,4096,2]{2,1,0} exponential(%subtract.521)
  %reduce.717 = f32[1,4096]{1,0} reduce(%exponential.223, %constant.3956), dimensions={2}, to_apply=%region_769.20601
  %broadcast.8701 = f32[1,4096,2]{2,1,0} broadcast(%reduce.717), dimensions={0,1}
  %divide.872 = f32[1,4096,2]{2,1,0} divide(%exponential.223, %broadcast.8701)
  %convert.2008 = bf16[1,4096,2]{2,1,0} convert(%divide.872)
  %select.1862 = bf16[1,4096,2]{2,1,0} select(%compare.2966, %convert.2008, %broadcast.5432)
  %scatter.763 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.522, %select.1862), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_771.20648
  %broadcast.8703 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.17683), dimensions={0,1,2}
  %iota.2102 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.2967 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.8703, %iota.2102), direction=EQ
  %convert.2010 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.2967)
  %reshape.17716 = s32[1,8192,8]{2,1,0} reshape(%convert.2010)
  %copy.3574 = s32[1,8192,8]{2,1,0} copy(%reshape.17716)
  %reduce-window.369 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3574, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.15
  %reshape.17718 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.369)
  %copy.3575 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.17718)
  %compare.2968 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3575, %broadcast.5435), direction=LE
  %select.1863 = s32[1,4096,2,8]{3,2,1,0} select(%compare.2968, %convert.2010, %broadcast.5436)
  %reduce.718 = s32[1,4096,8]{2,1,0} reduce(%select.1863, %constant.3783), dimensions={2}, to_apply=%region_772.20662
  %convert.2011 = bf16[1,4096,8]{2,1,0} convert(%reduce.718)
  %multiply.4663 = bf16[1,4096,8]{2,1,0} multiply(%scatter.763, %convert.2011)
  %broadcast.8706 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4663), dimensions={0,1,2}
  %multiply.4664 = s32[1,8192,8]{2,1,0} multiply(%copy.3574, %reduce-window.369)
  %reshape.17719 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.4664)
  %reduce.719 = s32[1,4096,8]{2,1,0} reduce(%reshape.17719, %constant.3783), dimensions={2}, to_apply=%region_773.20671
  %multiply.4665 = s32[1,4096,8]{2,1,0} multiply(%reduce.719, %reduce.718)
  %broadcast.8708 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4665), dimensions={0,1,2}
  %iota.2103 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.2969 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.8708, %iota.2103), direction=EQ
  %convert.2012 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.2969)
  %convert.2013 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2012)
  %multiply.4666 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.8706, %convert.2013)
  %slice.583 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.4666), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.2970 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.583, %broadcast.5439), direction=NE
  %copy.3576 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.2970)
  %convert.2014 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3576)
  %dot.810 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2014, %copy.3572), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.17722 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.810)
  %all-to-all.128 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17722), channel_id=802, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.208 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.128), dimensions={1,0,2,3,4}
  %reshape.17724 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.208)
  %transpose.209 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.17724), dimensions={1,0,2,3}
  %copy.3577 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.209)
  %get-tuple-element.1358 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.16), index=1
  %copy.3578 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1358)
  %dot.811 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3577, %copy.3578), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3579 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.811)
  %negate.255 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3579)
  %exponential.224 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.255)
  %add.4282 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.224, %broadcast.5440)
  %divide.873 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4282)
  %multiply.4670 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3579, %divide.873)
  %copy.3580 = bf16[1,4096,4096]{2,1,0} copy(%copy.3562)
  %copy.3581 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.583)
  %dot.812 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3580, %copy.3581), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.17728 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.812)
  %all-to-all.129 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.17728), channel_id=803, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.210 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.129), dimensions={2,0,1,3,4}
  %reshape.17729 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.210)
  %transpose.211 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.17729), dimensions={2,0,3,1}
  %copy.3582 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.211)
  %get-tuple-element.1359 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.16), index=3
  %copy.3583 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1359)
  %dot.813 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3582, %copy.3583), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.4673 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4670, %dot.813)
  %copy.3584 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.4673)
  %get-tuple-element.1360 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.16), index=2
  %copy.3585 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1360)
  %dot.814 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3584, %copy.3585), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.815 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3577, %copy.3585), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3586 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.815)
  %multiply.4674 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.813, %copy.3586)
  %multiply.4675 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4674, %divide.873)
  %multiply.4676 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3579, %multiply.4674)
  %subtract.523 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.873)
  %multiply.4677 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.873, %subtract.523)
  %multiply.4678 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4676, %multiply.4677)
  %add.4283 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.4675, %multiply.4678)
  %copy.3587 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4283)
  %dot.816 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3587, %copy.3578), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4284 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.814, %dot.816)
  %copy.3588 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4284)
  %transpose.212 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3588), dimensions={1,0,2,3}
  %reshape.17733 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.212)
  %all-to-all.130 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17733), channel_id=804, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.213 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.130), dimensions={1,0,2,3,4}
  %reshape.17735 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.213)
  %dot.817 = bf16[1,4096,4096]{2,1,0} dot(%convert.2014, %reshape.17735), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.17737 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1642)
  %compare.2972 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.338, %broadcast.7265), direction=GE
  %compare.2973 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.338, %broadcast.7267), direction=LE
  %and.389 = pred[1,4096,2,3]{3,2,1,0} and(%compare.2972, %compare.2973)
  %reduce.720 = pred[1,4096,2]{2,1,0} reduce(%and.389, %constant.4025), dimensions={3}, to_apply=%region_776.20756
  %multiply.4681 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4670, %copy.3586)
  %dot.818 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.4681, %copy.3583), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3589 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.818)
  %reshape.17739 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3589)
  %all-to-all.131 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17739), channel_id=805, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.214 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.131), dimensions={1,0,2,3,4}
  %reshape.17740 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.214)
  %dot.819 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3580, %reshape.17740), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3590 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.819)
  %pad.16 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3590, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.4685 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.16, %convert.2013)
  %reduce.721 = bf16[1,4096,8]{2,1,0} reduce(%multiply.4685, %constant.3795), dimensions={3}, to_apply=%region_774.20738
  %multiply.4686 = bf16[1,4096,8]{2,1,0} multiply(%reduce.721, %convert.2011)
  %gather.65 = bf16[1,4096,2]{2,1,0} gather(%multiply.4686, %subtract.522), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1864 = bf16[1,4096,2]{2,1,0} select(%reduce.720, %gather.65, %broadcast.5432)
  %select.1865 = bf16[1,4096,2]{2,1,0} select(%compare.2966, %select.1864, %broadcast.5432)
  %convert.2016 = f32[1,4096,2]{2,1,0} convert(%select.1865)
  %divide.874 = f32[1,4096,2]{2,1,0} divide(%convert.2016, %broadcast.8701)
  %multiply.4687 = f32[1,4096]{1,0} multiply(%reduce.717, %reduce.717)
  %divide.875 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.4687)
  %broadcast.8714 = f32[1,4096,2]{2,1,0} broadcast(%divide.875), dimensions={0,1}
  %multiply.4688 = f32[1,4096,2]{2,1,0} multiply(%convert.2016, %broadcast.8714)
  %multiply.4689 = f32[1,4096,2]{2,1,0} multiply(%multiply.4688, %exponential.223)
  %reduce.722 = f32[1,4096]{1,0} reduce(%multiply.4689, %constant.3956), dimensions={2}, to_apply=%region_777.20770
  %negate.256 = f32[1,4096]{1,0} negate(%reduce.722)
  %broadcast.8715 = f32[1,4096,2]{2,1,0} broadcast(%negate.256), dimensions={0,1}
  %add.4285 = f32[1,4096,2]{2,1,0} add(%divide.874, %broadcast.8715)
  %multiply.4690 = f32[1,4096,2]{2,1,0} multiply(%add.4285, %exponential.223)
  %convert.2017 = bf16[1,4096,2]{2,1,0} convert(%multiply.4690)
  %scatter.764 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.17737, %convert.2017), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_779.20790
  %copy.3591 = bf16[1,4096,8]{2,1,0} copy(%scatter.764)
  %dot.820 = bf16[1,4096,4096]{2,1,0} dot(%copy.3591, %all-gather.342), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4286 = bf16[1,4096,4096]{1,2,0} add(%dot.817, %dot.820)
  %copy.3592 = bf16[1,4096,4096]{2,1,0} copy(%add.4286)
  %multiply.4691 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3592, %broadcast.8693)
  %convert.2018 = f32[1,4096,4096]{2,1,0} convert(%multiply.4691)
  %multiply.4692 = f32[1,4096,4096]{2,1,0} multiply(%convert.2018, %broadcast.8692)
  %multiply.4693 = f32[1,4096,4096]{2,1,0} multiply(%convert.2003, %convert.2018)
  %reduce.723 = f32[1,4096]{1,0} reduce(%multiply.4693, %constant.3956), dimensions={2}, to_apply=%region_782.20819
  %reshape.17759 = f32[1,4096,1]{2,1,0} reshape(%reduce.723)
  %divide.876 = f32[1,4096,1]{2,1,0} divide(%rsqrt.162, %reshape.17677)
  %multiply.4694 = f32[1,4096,1]{2,1,0} multiply(%divide.876, %broadcast.7210)
  %multiply.4695 = f32[1,4096,1]{2,1,0} multiply(%reshape.17759, %multiply.4694)
  %multiply.4696 = f32[1,4096,1]{2,1,0} multiply(%multiply.4695, %broadcast.7211)
  %reshape.17760 = f32[1,4096]{1,0} reshape(%multiply.4696)
  %broadcast.8721 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17760), dimensions={0,1}
  %multiply.4697 = f32[1,4096,4096]{2,1,0} multiply(%convert.2003, %broadcast.8721)
  %add.4287 = f32[1,4096,4096]{2,1,0} add(%multiply.4692, %multiply.4697)
  %convert.2019 = bf16[1,4096,4096]{2,1,0} convert(%add.4287)
  %add.4288 = bf16[1,4096,4096]{2,1,0} add(%copy.3562, %convert.2019)
  %get-tuple-element.1361 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.174), index=1
  %get-tuple-element.1362 = u32[2,4]{1,0} get-tuple-element(%custom-call.174), index=2
  %copy.3593 = bf16[1,4096,4096]{2,1,0} copy(%add.4288)
  %dot.821 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3593, %all-gather.341), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3594 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.821)
  %custom-call.176 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3566, %copy.3568, %copy.3569, %constant.3999, %get-tuple-element.1361, /*index=5*/%get-tuple-element.1362, %get-tuple-element.1344, %copy.3594, %scatter.756, %scatter.761, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1369 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.176), index=2
  %copy.3595 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1369)
  %dot.822 = bf16[1,4096,4096]{2,1,0} dot(%copy.3595, %all-gather.340), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1370 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.176), index=1
  %copy.3596 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1370)
  %slice.584 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3596), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.4699 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.584, %broadcast.8672)
  %slice.585 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3596), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.4701 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.585, %broadcast.8671)
  %add.4301 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4699, %multiply.4701)
  %multiply.4702 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.584, %broadcast.8671)
  %negate.257 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.585)
  %multiply.4703 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.257, %broadcast.8672)
  %add.4302 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4702, %multiply.4703)
  %concatenate.343 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4301, %add.4302), dimensions={3}
  %dot.823 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.343, %all-gather.339), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4303 = bf16[1,4096,4096]{2,1,0} add(%dot.822, %dot.823)
  %copy.3597 = bf16[1,4096,4096]{2,1,0} copy(%add.4303)
  %get-tuple-element.1371 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.176), index=0
  %copy.3598 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1371)
  %slice.586 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3598), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.4705 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.586, %broadcast.8665)
  %slice.587 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3598), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.4707 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.587, %broadcast.8664)
  %add.4304 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4705, %multiply.4707)
  %multiply.4708 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.586, %broadcast.8664)
  %negate.258 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.587)
  %multiply.4709 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.258, %broadcast.8665)
  %add.4305 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4708, %multiply.4709)
  %concatenate.344 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4304, %add.4305), dimensions={3}
  %dot.824 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.344, %all-gather.338), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3599 = bf16[1,4096,4096]{2,1,0} copy(%dot.824)
  %add.4306 = bf16[1,4096,4096]{2,1,0} add(%copy.3597, %copy.3599)
  %copy.3600 = bf16[1,4096,4096]{2,1,0} copy(%add.4306)
  %multiply.4710 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3600, %broadcast.8660)
  %convert.2022 = f32[1,4096,4096]{2,1,0} convert(%multiply.4710)
  %multiply.4711 = f32[1,4096,4096]{2,1,0} multiply(%convert.2022, %broadcast.8659)
  %multiply.4712 = f32[1,4096,4096]{2,1,0} multiply(%convert.1988, %convert.2022)
  %reduce.724 = f32[1,4096]{1,0} reduce(%multiply.4712, %constant.3956), dimensions={2}, to_apply=%region_786.20930
  %reshape.17809 = f32[1,4096,1]{2,1,0} reshape(%reduce.724)
  %divide.879 = f32[1,4096,1]{2,1,0} divide(%rsqrt.161, %reshape.17621)
  %multiply.4713 = f32[1,4096,1]{2,1,0} multiply(%divide.879, %broadcast.7210)
  %multiply.4714 = f32[1,4096,1]{2,1,0} multiply(%reshape.17809, %multiply.4713)
  %multiply.4715 = f32[1,4096,1]{2,1,0} multiply(%multiply.4714, %broadcast.7211)
  %reshape.17810 = f32[1,4096]{1,0} reshape(%multiply.4715)
  %broadcast.8742 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17810), dimensions={0,1}
  %multiply.4716 = f32[1,4096,4096]{2,1,0} multiply(%convert.1988, %broadcast.8742)
  %add.4307 = f32[1,4096,4096]{2,1,0} add(%multiply.4711, %multiply.4716)
  %convert.2023 = bf16[1,4096,4096]{2,1,0} convert(%add.4307)
  %add.4308 = bf16[1,4096,4096]{2,1,0} add(%add.4288, %convert.2023)
  %copy.3601 = bf16[1,4096,4096]{2,1,0} copy(%add.4308)
  %tuple.308 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.153, %param.154, %param.155, %param.156, %param.152, /*index=5*/%param.147, %param.149, %param.151, %param.148, %param.150, /*index=10*/%copy.2486, %param.10, %param.7, %copy.3601)
  %opt-barrier.17 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.308)
  %get-tuple-element.1372 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.17), index=13
  %copy.3602 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1372)
  %iota.2105 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1373 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.17), index=10
  %copy.3603 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1373)
  %convert.2024 = f32[1,4096,4096]{2,1,0} convert(%copy.3603)
  %multiply.4718 = f32[1,4096,4096]{2,1,0} multiply(%convert.2024, %convert.2024)
  %reduce.725 = f32[1,4096]{1,0} reduce(%multiply.4718, %constant.3956), dimensions={2}, to_apply=%region_788.20973
  %multiply.4720 = f32[1,4096]{1,0} multiply(%reduce.725, %broadcast.5380)
  %add.4310 = f32[1,4096]{1,0} add(%multiply.4720, %broadcast.5381)
  %reshape.17812 = f32[1,4096,1]{2,1,0} reshape(%add.4310)
  %rsqrt.163 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.17812)
  %reshape.17813 = f32[1,4096]{1,0} reshape(%rsqrt.163)
  %broadcast.8746 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17813), dimensions={0,1}
  %multiply.4721 = f32[1,4096,4096]{2,1,0} multiply(%convert.2024, %broadcast.8746)
  %convert.2025 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4721)
  %get-tuple-element.1374 = bf16[4096]{0} get-tuple-element(%opt-barrier.17), index=5
  %broadcast.8747 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1374), dimensions={2}
  %multiply.4722 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2025, %broadcast.8747)
  %copy.3604 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4722)
  %copy.3605 = bf16[1,4096,4096]{2,1,0} copy(%copy.3604)
  %get-tuple-element.1375 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.17), index=8
  %all-gather.345 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1375), channel_id=808, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.825 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3605, %all-gather.345), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.588 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.825), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1376 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.17), index=12
  %convert.2026 = f32[1,4096]{1,0} convert(%get-tuple-element.1376)
  %broadcast.8748 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2026), dimensions={0,1}
  %divide.880 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.8748, %broadcast.5388)
  %cosine.99 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.880)
  %convert.2028 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.99)
  %reshape.17815 = bf16[1,4096,64]{2,1,0} reshape(%convert.2028)
  %broadcast.8751 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17815), dimensions={0,1,3}
  %multiply.4726 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.588, %broadcast.8751)
  %slice.589 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.825), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.98 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.880)
  %convert.2029 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.98)
  %reshape.17817 = bf16[1,4096,64]{2,1,0} reshape(%convert.2029)
  %broadcast.8752 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17817), dimensions={0,1,3}
  %multiply.4728 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.589, %broadcast.8752)
  %subtract.527 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.4726, %multiply.4728)
  %multiply.4729 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.589, %broadcast.8751)
  %multiply.4730 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.588, %broadcast.8752)
  %add.4311 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4729, %multiply.4730)
  %concatenate.345 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.527, %add.4311), dimensions={3}
  %copy.3606 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.345)
  %get-tuple-element.1377 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.17), index=6
  %all-gather.346 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1377), channel_id=809, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.826 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3605, %all-gather.346), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.590 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.826), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.8758 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17815), dimensions={0,1,3}
  %multiply.4735 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.590, %broadcast.8758)
  %slice.591 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.826), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.8759 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17817), dimensions={0,1,3}
  %multiply.4737 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.591, %broadcast.8759)
  %subtract.528 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.4735, %multiply.4737)
  %multiply.4739 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.591, %broadcast.8758)
  %multiply.4740 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.590, %broadcast.8759)
  %add.4312 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4739, %multiply.4740)
  %concatenate.346 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.528, %add.4312), dimensions={3}
  %copy.3608 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.346)
  %get-tuple-element.1378 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.17), index=9
  %all-gather.347 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1378), channel_id=810, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.827 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3605, %all-gather.347), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3609 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.827)
  %get-tuple-element.1379 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.17), index=11
  %broadcast.8762 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1379), dimensions={0,1}
  %broadcast.8763 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1379), dimensions={0,2}
  %compare.3002 = pred[1,4096,4096]{2,1,0} compare(%broadcast.8762, %broadcast.8763), direction=EQ
  %and.394 = pred[1,4096,4096]{2,1,0} and(%compare.3002, %broadcast.5406)
  %select.1886 = f32[1,4096,4096]{2,1,0} select(%and.394, %broadcast.5407, %broadcast.5408)
  %compare.3004 = pred[1,4096,4096]{2,1,0} compare(%select.1886, %broadcast.5407), direction=NE
  %not.113 = pred[1,4096,4096]{2,1,0} not(%compare.3004)
  %convert.2035 = s32[1,4096,4096]{2,1,0} convert(%not.113)
  %reduce.726 = s32[1,4096]{1,0} reduce(%convert.2035, %constant.3783), dimensions={1}, to_apply=%region_789.21107
  %reshape.17826 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.726)
  %slice.592 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.17826), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.17828 = s32[1,1]{1,0} reshape(%slice.592)
  %reshape.17843 = s32[1]{0} reshape(%reshape.17828)
  %compare.3018 = pred[1]{0} compare(%reshape.17843, %constant.4022), direction=LT
  %select.1896 = s32[1]{0} select(%compare.3018, %reshape.11470, %reshape.17843)
  %scatter.779 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1896), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.49
  %reduce.727 = s32[1,4096]{1,0} reduce(%convert.2035, %constant.3783), dimensions={2}, to_apply=%region_790.21115
  %reshape.17829 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.727)
  %reduce.728 = s32[1,1]{1,0} reduce(%reshape.17829, %constant.4014), dimensions={3,2}, to_apply=%region_791.21120
  %reshape.17858 = s32[1]{0} reshape(%reduce.728)
  %compare.3031 = pred[1]{0} compare(%reshape.17858, %constant.4022), direction=LT
  %select.1906 = s32[1]{0} select(%compare.3031, %reshape.11470, %reshape.17858)
  %scatter.784 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1906), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.49
  %custom-call.177 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3606, %copy.3608, %copy.3609, %constant.3999, %scatter.779, /*index=5*/%scatter.784, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1385 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.177), index=0
  %copy.3610 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1385)
  %get-tuple-element.1386 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.17), index=7
  %all-gather.348 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1386), channel_id=811, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.828 = bf16[1,4096,4096]{2,1,0} dot(%copy.3610, %all-gather.348), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3611 = bf16[1,4096,4096]{2,1,0} copy(%dot.828)
  %add.4326 = bf16[1,4096,4096]{2,1,0} add(%copy.3603, %copy.3611)
  %convert.2039 = f32[1,4096,4096]{2,1,0} convert(%add.4326)
  %multiply.4742 = f32[1,4096,4096]{2,1,0} multiply(%convert.2039, %convert.2039)
  %reduce.729 = f32[1,4096]{1,0} reduce(%multiply.4742, %constant.3956), dimensions={2}, to_apply=%region_792.21136
  %multiply.4743 = f32[1,4096]{1,0} multiply(%reduce.729, %broadcast.5380)
  %add.4327 = f32[1,4096]{1,0} add(%multiply.4743, %broadcast.5381)
  %reshape.17861 = f32[1,4096,1]{2,1,0} reshape(%add.4327)
  %rsqrt.164 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.17861)
  %reshape.17862 = f32[1,4096]{1,0} reshape(%rsqrt.164)
  %broadcast.8775 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17862), dimensions={0,1}
  %multiply.4744 = f32[1,4096,4096]{2,1,0} multiply(%convert.2039, %broadcast.8775)
  %convert.2040 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4744)
  %get-tuple-element.1387 = bf16[4096]{0} get-tuple-element(%opt-barrier.17), index=4
  %broadcast.8776 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1387), dimensions={2}
  %multiply.4745 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2040, %broadcast.8776)
  %copy.3612 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4745)
  %get-tuple-element.1388 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.17), index=0
  %all-gather.349 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1388), channel_id=812, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.829 = bf16[1,4096,8]{2,1,0} dot(%copy.3612, %all-gather.349), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3613 = bf16[1,4096,8]{2,1,0} copy(%dot.829)
  %reshape.17863 = bf16[4096,8]{1,0} reshape(%copy.3613)
  %custom-call.178 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.17863), custom_call_target="TopK", called_computations={%compare-greater-than.49.clone}
  %get-tuple-element.1389 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.178), index=0
  %get-tuple-element.1390 = s32[4096,2]{1,0} get-tuple-element(%custom-call.178), index=1
  %add.4328 = s32[4096,2]{1,0} add(%get-tuple-element.1390, %broadcast.5420)
  %sort.247 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1389, %add.4328), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.49
  %get-tuple-element.1392 = s32[4096,2]{1,0} get-tuple-element(%sort.247), index=1
  %slice.594 = s32[4096,2]{1,0} slice(%get-tuple-element.1392), slice={[0:4096], [0:2]}
  %all-gather.351 = s32[32768,2]{1,0} all-gather(%slice.594), channel_id=814, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1686 = s32[4096,2]{1,0} dynamic-slice(%all-gather.351, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.17866 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1686)
  %compare.3032 = pred[1,4096,2]{2,1,0} compare(%reshape.17866, %broadcast.5421), direction=LT
  %add.4329 = s32[1,4096,2]{2,1,0} add(%reshape.17866, %broadcast.5422)
  %select.1907 = s32[1,4096,2]{2,1,0} select(%compare.3032, %add.4329, %reshape.17866)
  %reshape.17867 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1907)
  %concatenate.347 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2105, %reshape.17867), dimensions={3}
  %subtract.534 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.347, %broadcast.5433)
  %scatter.785 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.534, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_795.21215
  %gather.66 = u32[1,4096,2]{2,1,0} gather(%scatter.785, %subtract.534), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3033 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.66), direction=EQ
  %get-tuple-element.1391 = bf16[4096,2]{1,0} get-tuple-element(%sort.247), index=0
  %slice.593 = bf16[4096,2]{1,0} slice(%get-tuple-element.1391), slice={[0:4096], [0:2]}
  %all-gather.350 = bf16[32768,2]{1,0} all-gather(%slice.593), channel_id=813, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1696 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.350, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2043 = f32[4096,2]{1,0} convert(%dynamic-slice.1696)
  %reshape.17885 = f32[1,4096,2]{2,1,0} reshape(%convert.2043)
  %reduce.730 = f32[4096]{0} reduce(%convert.2043, %constant.4073), dimensions={1}, to_apply=%region_793.21165
  %reshape.17886 = f32[1,4096]{1,0} reshape(%reduce.730)
  %broadcast.8783 = f32[1,4096,2]{2,1,0} broadcast(%reshape.17886), dimensions={0,1}
  %subtract.533 = f32[1,4096,2]{2,1,0} subtract(%reshape.17885, %broadcast.8783)
  %exponential.225 = f32[1,4096,2]{2,1,0} exponential(%subtract.533)
  %reduce.731 = f32[1,4096]{1,0} reduce(%exponential.225, %constant.3956), dimensions={2}, to_apply=%region_794.21177
  %broadcast.8784 = f32[1,4096,2]{2,1,0} broadcast(%reduce.731), dimensions={0,1}
  %divide.884 = f32[1,4096,2]{2,1,0} divide(%exponential.225, %broadcast.8784)
  %convert.2044 = bf16[1,4096,2]{2,1,0} convert(%divide.884)
  %select.1908 = bf16[1,4096,2]{2,1,0} select(%compare.3033, %convert.2044, %broadcast.5432)
  %scatter.786 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.534, %select.1908), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_796.21224
  %broadcast.8787 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.17866), dimensions={0,1,2}
  %iota.2113 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3034 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.8787, %iota.2113), direction=EQ
  %convert.2045 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3034)
  %reshape.17897 = s32[1,8192,8]{2,1,0} reshape(%convert.2045)
  %copy.3614 = s32[1,8192,8]{2,1,0} copy(%reshape.17897)
  %reduce-window.374 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3614, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.16
  %reshape.17899 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.374)
  %copy.3615 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.17899)
  %compare.3035 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3615, %broadcast.5435), direction=LE
  %select.1909 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3035, %convert.2045, %broadcast.5436)
  %reduce.732 = s32[1,4096,8]{2,1,0} reduce(%select.1909, %constant.3783), dimensions={2}, to_apply=%region_797.21238
  %convert.2046 = bf16[1,4096,8]{2,1,0} convert(%reduce.732)
  %multiply.4751 = bf16[1,4096,8]{2,1,0} multiply(%scatter.786, %convert.2046)
  %broadcast.8790 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4751), dimensions={0,1,2}
  %multiply.4752 = s32[1,8192,8]{2,1,0} multiply(%copy.3614, %reduce-window.374)
  %reshape.17900 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.4752)
  %reduce.733 = s32[1,4096,8]{2,1,0} reduce(%reshape.17900, %constant.3783), dimensions={2}, to_apply=%region_798.21247
  %multiply.4753 = s32[1,4096,8]{2,1,0} multiply(%reduce.733, %reduce.732)
  %broadcast.8791 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4753), dimensions={0,1,2}
  %iota.2114 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3036 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.8791, %iota.2114), direction=EQ
  %convert.2047 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3036)
  %convert.2048 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2047)
  %multiply.4754 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.8790, %convert.2048)
  %slice.595 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.4754), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3037 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.595, %broadcast.5439), direction=NE
  %copy.3616 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3037)
  %convert.2049 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3616)
  %dot.830 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2049, %copy.3612), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.17903 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.830)
  %all-to-all.132 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17903), channel_id=821, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.215 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.132), dimensions={1,0,2,3,4}
  %reshape.17904 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.215)
  %transpose.216 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.17904), dimensions={1,0,2,3}
  %copy.3617 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.216)
  %get-tuple-element.1397 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.17), index=1
  %copy.3618 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1397)
  %dot.831 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3617, %copy.3618), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3619 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.831)
  %negate.259 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3619)
  %exponential.226 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.259)
  %add.4334 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.226, %broadcast.5440)
  %divide.885 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4334)
  %multiply.4758 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3619, %divide.885)
  %copy.3620 = bf16[1,4096,4096]{2,1,0} copy(%copy.3602)
  %copy.3621 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.595)
  %dot.832 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3620, %copy.3621), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.17907 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.832)
  %all-to-all.133 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.17907), channel_id=822, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.217 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.133), dimensions={2,0,1,3,4}
  %reshape.17908 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.217)
  %transpose.218 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.17908), dimensions={2,0,3,1}
  %copy.3622 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.218)
  %get-tuple-element.1398 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.17), index=3
  %copy.3623 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1398)
  %dot.833 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3622, %copy.3623), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.4761 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4758, %dot.833)
  %copy.3624 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.4761)
  %get-tuple-element.1399 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.17), index=2
  %copy.3625 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1399)
  %dot.834 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3624, %copy.3625), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.835 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3617, %copy.3625), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3626 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.835)
  %multiply.4762 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.833, %copy.3626)
  %multiply.4763 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4762, %divide.885)
  %multiply.4764 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3619, %multiply.4762)
  %subtract.535 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.885)
  %multiply.4765 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.885, %subtract.535)
  %multiply.4766 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4764, %multiply.4765)
  %add.4335 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.4763, %multiply.4766)
  %copy.3627 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4335)
  %dot.836 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3627, %copy.3618), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4336 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.834, %dot.836)
  %copy.3628 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4336)
  %transpose.219 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3628), dimensions={1,0,2,3}
  %reshape.17911 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.219)
  %all-to-all.134 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17911), channel_id=823, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.220 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.134), dimensions={1,0,2,3,4}
  %reshape.17912 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.220)
  %dot.837 = bf16[1,4096,4096]{2,1,0} dot(%convert.2049, %reshape.17912), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.17914 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1686)
  %compare.3039 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.347, %broadcast.7265), direction=GE
  %compare.3040 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.347, %broadcast.7267), direction=LE
  %and.399 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3039, %compare.3040)
  %reduce.734 = pred[1,4096,2]{2,1,0} reduce(%and.399, %constant.4025), dimensions={3}, to_apply=%region_801.21332
  %multiply.4769 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4758, %copy.3626)
  %dot.838 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.4769, %copy.3623), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3629 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.838)
  %reshape.17916 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3629)
  %all-to-all.135 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.17916), channel_id=824, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.221 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.135), dimensions={1,0,2,3,4}
  %reshape.17917 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.221)
  %dot.839 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3620, %reshape.17917), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3630 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.839)
  %pad.17 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3630, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.4773 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.17, %convert.2048)
  %reduce.735 = bf16[1,4096,8]{2,1,0} reduce(%multiply.4773, %constant.3795), dimensions={3}, to_apply=%region_799.21314
  %multiply.4774 = bf16[1,4096,8]{2,1,0} multiply(%reduce.735, %convert.2046)
  %gather.67 = bf16[1,4096,2]{2,1,0} gather(%multiply.4774, %subtract.534), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1910 = bf16[1,4096,2]{2,1,0} select(%reduce.734, %gather.67, %broadcast.5432)
  %select.1911 = bf16[1,4096,2]{2,1,0} select(%compare.3033, %select.1910, %broadcast.5432)
  %convert.2051 = f32[1,4096,2]{2,1,0} convert(%select.1911)
  %divide.886 = f32[1,4096,2]{2,1,0} divide(%convert.2051, %broadcast.8784)
  %multiply.4775 = f32[1,4096]{1,0} multiply(%reduce.731, %reduce.731)
  %divide.887 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.4775)
  %broadcast.8797 = f32[1,4096,2]{2,1,0} broadcast(%divide.887), dimensions={0,1}
  %multiply.4776 = f32[1,4096,2]{2,1,0} multiply(%convert.2051, %broadcast.8797)
  %multiply.4777 = f32[1,4096,2]{2,1,0} multiply(%multiply.4776, %exponential.225)
  %reduce.736 = f32[1,4096]{1,0} reduce(%multiply.4777, %constant.3956), dimensions={2}, to_apply=%region_802.21346
  %negate.260 = f32[1,4096]{1,0} negate(%reduce.736)
  %broadcast.8798 = f32[1,4096,2]{2,1,0} broadcast(%negate.260), dimensions={0,1}
  %add.4337 = f32[1,4096,2]{2,1,0} add(%divide.886, %broadcast.8798)
  %multiply.4778 = f32[1,4096,2]{2,1,0} multiply(%add.4337, %exponential.225)
  %convert.2052 = bf16[1,4096,2]{2,1,0} convert(%multiply.4778)
  %scatter.787 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.17914, %convert.2052), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_804.21366
  %copy.3631 = bf16[1,4096,8]{2,1,0} copy(%scatter.787)
  %dot.840 = bf16[1,4096,4096]{2,1,0} dot(%copy.3631, %all-gather.349), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4338 = bf16[1,4096,4096]{1,2,0} add(%dot.837, %dot.840)
  %copy.3632 = bf16[1,4096,4096]{2,1,0} copy(%add.4338)
  %multiply.4779 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3632, %broadcast.8776)
  %convert.2053 = f32[1,4096,4096]{2,1,0} convert(%multiply.4779)
  %multiply.4780 = f32[1,4096,4096]{2,1,0} multiply(%convert.2053, %broadcast.8775)
  %multiply.4781 = f32[1,4096,4096]{2,1,0} multiply(%convert.2039, %convert.2053)
  %reduce.737 = f32[1,4096]{1,0} reduce(%multiply.4781, %constant.3956), dimensions={2}, to_apply=%region_807.21395
  %reshape.17932 = f32[1,4096,1]{2,1,0} reshape(%reduce.737)
  %divide.888 = f32[1,4096,1]{2,1,0} divide(%rsqrt.164, %reshape.17861)
  %multiply.4782 = f32[1,4096,1]{2,1,0} multiply(%divide.888, %broadcast.7210)
  %multiply.4783 = f32[1,4096,1]{2,1,0} multiply(%reshape.17932, %multiply.4782)
  %multiply.4784 = f32[1,4096,1]{2,1,0} multiply(%multiply.4783, %broadcast.7211)
  %reshape.17933 = f32[1,4096]{1,0} reshape(%multiply.4784)
  %broadcast.8802 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17933), dimensions={0,1}
  %multiply.4785 = f32[1,4096,4096]{2,1,0} multiply(%convert.2039, %broadcast.8802)
  %add.4339 = f32[1,4096,4096]{2,1,0} add(%multiply.4780, %multiply.4785)
  %convert.2054 = bf16[1,4096,4096]{2,1,0} convert(%add.4339)
  %add.4340 = bf16[1,4096,4096]{2,1,0} add(%copy.3602, %convert.2054)
  %get-tuple-element.1400 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.177), index=1
  %get-tuple-element.1401 = u32[2,4]{1,0} get-tuple-element(%custom-call.177), index=2
  %copy.3633 = bf16[1,4096,4096]{2,1,0} copy(%add.4340)
  %dot.841 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3633, %all-gather.348), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3634 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.841)
  %custom-call.179 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3606, %copy.3608, %copy.3609, %constant.3999, %get-tuple-element.1400, /*index=5*/%get-tuple-element.1401, %get-tuple-element.1385, %copy.3634, %scatter.779, %scatter.784, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1408 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.179), index=2
  %copy.3635 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1408)
  %dot.842 = bf16[1,4096,4096]{2,1,0} dot(%copy.3635, %all-gather.347), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1409 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.179), index=1
  %copy.3636 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1409)
  %slice.596 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3636), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.4787 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.596, %broadcast.8759)
  %slice.597 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3636), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.4789 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.597, %broadcast.8758)
  %add.4353 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4787, %multiply.4789)
  %multiply.4790 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.596, %broadcast.8758)
  %negate.261 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.597)
  %multiply.4791 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.261, %broadcast.8759)
  %add.4354 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4790, %multiply.4791)
  %concatenate.352 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4353, %add.4354), dimensions={3}
  %dot.843 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.352, %all-gather.346), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4355 = bf16[1,4096,4096]{2,1,0} add(%dot.842, %dot.843)
  %copy.3637 = bf16[1,4096,4096]{2,1,0} copy(%add.4355)
  %get-tuple-element.1410 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.179), index=0
  %copy.3638 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1410)
  %slice.598 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3638), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.4793 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.598, %broadcast.8752)
  %slice.599 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3638), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.4795 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.599, %broadcast.8751)
  %add.4356 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4793, %multiply.4795)
  %multiply.4796 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.598, %broadcast.8751)
  %negate.262 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.599)
  %multiply.4797 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.262, %broadcast.8752)
  %add.4357 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4796, %multiply.4797)
  %concatenate.353 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4356, %add.4357), dimensions={3}
  %dot.844 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.353, %all-gather.345), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3639 = bf16[1,4096,4096]{2,1,0} copy(%dot.844)
  %add.4358 = bf16[1,4096,4096]{2,1,0} add(%copy.3637, %copy.3639)
  %copy.3640 = bf16[1,4096,4096]{2,1,0} copy(%add.4358)
  %multiply.4798 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3640, %broadcast.8747)
  %convert.2057 = f32[1,4096,4096]{2,1,0} convert(%multiply.4798)
  %multiply.4799 = f32[1,4096,4096]{2,1,0} multiply(%convert.2057, %broadcast.8746)
  %multiply.4800 = f32[1,4096,4096]{2,1,0} multiply(%convert.2024, %convert.2057)
  %reduce.738 = f32[1,4096]{1,0} reduce(%multiply.4800, %constant.3956), dimensions={2}, to_apply=%region_811.21506
  %reshape.17981 = f32[1,4096,1]{2,1,0} reshape(%reduce.738)
  %divide.891 = f32[1,4096,1]{2,1,0} divide(%rsqrt.163, %reshape.17812)
  %multiply.4801 = f32[1,4096,1]{2,1,0} multiply(%divide.891, %broadcast.7210)
  %multiply.4802 = f32[1,4096,1]{2,1,0} multiply(%reshape.17981, %multiply.4801)
  %multiply.4803 = f32[1,4096,1]{2,1,0} multiply(%multiply.4802, %broadcast.7211)
  %reshape.17982 = f32[1,4096]{1,0} reshape(%multiply.4803)
  %broadcast.8819 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17982), dimensions={0,1}
  %multiply.4804 = f32[1,4096,4096]{2,1,0} multiply(%convert.2024, %broadcast.8819)
  %add.4360 = f32[1,4096,4096]{2,1,0} add(%multiply.4799, %multiply.4804)
  %convert.2058 = bf16[1,4096,4096]{2,1,0} convert(%add.4360)
  %add.4361 = bf16[1,4096,4096]{2,1,0} add(%add.4340, %convert.2058)
  %copy.3641 = bf16[1,4096,4096]{2,1,0} copy(%add.4361)
  %tuple.313 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.143, %param.144, %param.145, %param.146, %param.142, /*index=5*/%param.137, %param.139, %param.141, %param.138, %param.140, /*index=10*/%copy.2462, %param.10, %param.7, %copy.3641)
  %opt-barrier.18 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.313)
  %get-tuple-element.1411 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.18), index=13
  %copy.3642 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1411)
  %iota.2116 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1412 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.18), index=10
  %copy.3643 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1412)
  %convert.2059 = f32[1,4096,4096]{2,1,0} convert(%copy.3643)
  %multiply.4806 = f32[1,4096,4096]{2,1,0} multiply(%convert.2059, %convert.2059)
  %reduce.739 = f32[1,4096]{1,0} reduce(%multiply.4806, %constant.3956), dimensions={2}, to_apply=%region_813.21549
  %multiply.4807 = f32[1,4096]{1,0} multiply(%reduce.739, %broadcast.5380)
  %add.4363 = f32[1,4096]{1,0} add(%multiply.4807, %broadcast.5381)
  %reshape.17985 = f32[1,4096,1]{2,1,0} reshape(%add.4363)
  %rsqrt.165 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.17985)
  %reshape.17986 = f32[1,4096]{1,0} reshape(%rsqrt.165)
  %broadcast.8823 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.17986), dimensions={0,1}
  %multiply.4808 = f32[1,4096,4096]{2,1,0} multiply(%convert.2059, %broadcast.8823)
  %convert.2060 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4808)
  %get-tuple-element.1413 = bf16[4096]{0} get-tuple-element(%opt-barrier.18), index=5
  %broadcast.8824 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1413), dimensions={2}
  %multiply.4809 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2060, %broadcast.8824)
  %copy.3644 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4809)
  %copy.3645 = bf16[1,4096,4096]{2,1,0} copy(%copy.3644)
  %get-tuple-element.1414 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.18), index=8
  %all-gather.352 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1414), channel_id=827, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.845 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3645, %all-gather.352), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.600 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.845), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1415 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.18), index=12
  %convert.2061 = f32[1,4096]{1,0} convert(%get-tuple-element.1415)
  %broadcast.8826 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2061), dimensions={0,1}
  %divide.892 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.8826, %broadcast.5388)
  %cosine.101 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.892)
  %convert.2063 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.101)
  %reshape.17989 = bf16[1,4096,64]{2,1,0} reshape(%convert.2063)
  %broadcast.8830 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17989), dimensions={0,1,3}
  %multiply.4813 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.600, %broadcast.8830)
  %slice.601 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.845), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.100 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.892)
  %convert.2064 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.100)
  %reshape.17991 = bf16[1,4096,64]{2,1,0} reshape(%convert.2064)
  %broadcast.8832 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.17991), dimensions={0,1,3}
  %multiply.4816 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.601, %broadcast.8832)
  %subtract.539 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.4813, %multiply.4816)
  %multiply.4817 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.601, %broadcast.8830)
  %multiply.4818 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.600, %broadcast.8832)
  %add.4364 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4817, %multiply.4818)
  %concatenate.354 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.539, %add.4364), dimensions={3}
  %copy.3646 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.354)
  %get-tuple-element.1416 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.18), index=6
  %all-gather.353 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1416), channel_id=828, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.846 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3645, %all-gather.353), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.602 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.846), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.8839 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17989), dimensions={0,1,3}
  %multiply.4824 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.602, %broadcast.8839)
  %slice.603 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.846), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.8840 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.17991), dimensions={0,1,3}
  %multiply.4826 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.603, %broadcast.8840)
  %subtract.540 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.4824, %multiply.4826)
  %multiply.4827 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.603, %broadcast.8839)
  %multiply.4828 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.602, %broadcast.8840)
  %add.4365 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4827, %multiply.4828)
  %concatenate.355 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.540, %add.4365), dimensions={3}
  %copy.3648 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.355)
  %get-tuple-element.1417 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.18), index=9
  %all-gather.354 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1417), channel_id=829, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.847 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3645, %all-gather.354), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3649 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.847)
  %get-tuple-element.1418 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.18), index=11
  %broadcast.8843 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1418), dimensions={0,1}
  %broadcast.8844 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1418), dimensions={0,2}
  %compare.3067 = pred[1,4096,4096]{2,1,0} compare(%broadcast.8843, %broadcast.8844), direction=EQ
  %and.404 = pred[1,4096,4096]{2,1,0} and(%compare.3067, %broadcast.5406)
  %select.1932 = f32[1,4096,4096]{2,1,0} select(%and.404, %broadcast.5407, %broadcast.5408)
  %compare.3069 = pred[1,4096,4096]{2,1,0} compare(%select.1932, %broadcast.5407), direction=NE
  %not.114 = pred[1,4096,4096]{2,1,0} not(%compare.3069)
  %convert.2069 = s32[1,4096,4096]{2,1,0} convert(%not.114)
  %reduce.740 = s32[1,4096]{1,0} reduce(%convert.2069, %constant.3783), dimensions={1}, to_apply=%region_814.21683
  %reshape.18002 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.740)
  %slice.604 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.18002), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.18004 = s32[1,1]{1,0} reshape(%slice.604)
  %reshape.18021 = s32[1]{0} reshape(%reshape.18004)
  %compare.3082 = pred[1]{0} compare(%reshape.18021, %constant.4022), direction=LT
  %select.1942 = s32[1]{0} select(%compare.3082, %reshape.11470, %reshape.18021)
  %scatter.802 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1942), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.50
  %reduce.741 = s32[1,4096]{1,0} reduce(%convert.2069, %constant.3783), dimensions={2}, to_apply=%region_815.21691
  %reshape.18006 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.741)
  %reduce.742 = s32[1,1]{1,0} reduce(%reshape.18006, %constant.4014), dimensions={3,2}, to_apply=%region_816.21696
  %reshape.18038 = s32[1]{0} reshape(%reduce.742)
  %compare.3095 = pred[1]{0} compare(%reshape.18038, %constant.4022), direction=LT
  %select.1952 = s32[1]{0} select(%compare.3095, %reshape.11470, %reshape.18038)
  %scatter.807 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1952), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.50
  %custom-call.180 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3646, %copy.3648, %copy.3649, %constant.3999, %scatter.802, /*index=5*/%scatter.807, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1424 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.180), index=0
  %copy.3650 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1424)
  %get-tuple-element.1425 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.18), index=7
  %all-gather.355 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1425), channel_id=830, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.848 = bf16[1,4096,4096]{2,1,0} dot(%copy.3650, %all-gather.355), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3651 = bf16[1,4096,4096]{2,1,0} copy(%dot.848)
  %add.4378 = bf16[1,4096,4096]{2,1,0} add(%copy.3643, %copy.3651)
  %convert.2073 = f32[1,4096,4096]{2,1,0} convert(%add.4378)
  %multiply.4831 = f32[1,4096,4096]{2,1,0} multiply(%convert.2073, %convert.2073)
  %reduce.743 = f32[1,4096]{1,0} reduce(%multiply.4831, %constant.3956), dimensions={2}, to_apply=%region_817.21712
  %multiply.4832 = f32[1,4096]{1,0} multiply(%reduce.743, %broadcast.5380)
  %add.4379 = f32[1,4096]{1,0} add(%multiply.4832, %broadcast.5381)
  %reshape.18040 = f32[1,4096,1]{2,1,0} reshape(%add.4379)
  %rsqrt.166 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.18040)
  %reshape.18041 = f32[1,4096]{1,0} reshape(%rsqrt.166)
  %broadcast.8860 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18041), dimensions={0,1}
  %multiply.4833 = f32[1,4096,4096]{2,1,0} multiply(%convert.2073, %broadcast.8860)
  %convert.2074 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4833)
  %get-tuple-element.1426 = bf16[4096]{0} get-tuple-element(%opt-barrier.18), index=4
  %broadcast.8861 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1426), dimensions={2}
  %multiply.4834 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2074, %broadcast.8861)
  %copy.3652 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4834)
  %get-tuple-element.1427 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.18), index=0
  %all-gather.356 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1427), channel_id=831, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.849 = bf16[1,4096,8]{2,1,0} dot(%copy.3652, %all-gather.356), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3653 = bf16[1,4096,8]{2,1,0} copy(%dot.849)
  %reshape.18042 = bf16[4096,8]{1,0} reshape(%copy.3653)
  %custom-call.181 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.18042), custom_call_target="TopK", called_computations={%compare-greater-than.50.clone}
  %get-tuple-element.1428 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.181), index=0
  %get-tuple-element.1429 = s32[4096,2]{1,0} get-tuple-element(%custom-call.181), index=1
  %add.4380 = s32[4096,2]{1,0} add(%get-tuple-element.1429, %broadcast.5420)
  %sort.252 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1428, %add.4380), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.50
  %get-tuple-element.1431 = s32[4096,2]{1,0} get-tuple-element(%sort.252), index=1
  %slice.606 = s32[4096,2]{1,0} slice(%get-tuple-element.1431), slice={[0:4096], [0:2]}
  %all-gather.358 = s32[32768,2]{1,0} all-gather(%slice.606), channel_id=833, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1730 = s32[4096,2]{1,0} dynamic-slice(%all-gather.358, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.18045 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1730)
  %compare.3096 = pred[1,4096,2]{2,1,0} compare(%reshape.18045, %broadcast.5421), direction=LT
  %add.4381 = s32[1,4096,2]{2,1,0} add(%reshape.18045, %broadcast.5422)
  %select.1953 = s32[1,4096,2]{2,1,0} select(%compare.3096, %add.4381, %reshape.18045)
  %reshape.18046 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1953)
  %concatenate.356 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2116, %reshape.18046), dimensions={3}
  %subtract.546 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.356, %broadcast.5433)
  %scatter.808 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.546, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_820.21791
  %gather.68 = u32[1,4096,2]{2,1,0} gather(%scatter.808, %subtract.546), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3097 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.68), direction=EQ
  %get-tuple-element.1430 = bf16[4096,2]{1,0} get-tuple-element(%sort.252), index=0
  %slice.605 = bf16[4096,2]{1,0} slice(%get-tuple-element.1430), slice={[0:4096], [0:2]}
  %all-gather.357 = bf16[32768,2]{1,0} all-gather(%slice.605), channel_id=832, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1740 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.357, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2077 = f32[4096,2]{1,0} convert(%dynamic-slice.1740)
  %reshape.18064 = f32[1,4096,2]{2,1,0} reshape(%convert.2077)
  %reduce.744 = f32[4096]{0} reduce(%convert.2077, %constant.4073), dimensions={1}, to_apply=%region_818.21741
  %reshape.18065 = f32[1,4096]{1,0} reshape(%reduce.744)
  %broadcast.8874 = f32[1,4096,2]{2,1,0} broadcast(%reshape.18065), dimensions={0,1}
  %subtract.545 = f32[1,4096,2]{2,1,0} subtract(%reshape.18064, %broadcast.8874)
  %exponential.227 = f32[1,4096,2]{2,1,0} exponential(%subtract.545)
  %reduce.745 = f32[1,4096]{1,0} reduce(%exponential.227, %constant.3956), dimensions={2}, to_apply=%region_819.21753
  %broadcast.8876 = f32[1,4096,2]{2,1,0} broadcast(%reduce.745), dimensions={0,1}
  %divide.896 = f32[1,4096,2]{2,1,0} divide(%exponential.227, %broadcast.8876)
  %convert.2079 = bf16[1,4096,2]{2,1,0} convert(%divide.896)
  %select.1954 = bf16[1,4096,2]{2,1,0} select(%compare.3097, %convert.2079, %broadcast.5432)
  %scatter.809 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.546, %select.1954), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_821.21800
  %broadcast.8879 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.18045), dimensions={0,1,2}
  %iota.2124 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3098 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.8879, %iota.2124), direction=EQ
  %convert.2080 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3098)
  %reshape.18074 = s32[1,8192,8]{2,1,0} reshape(%convert.2080)
  %copy.3654 = s32[1,8192,8]{2,1,0} copy(%reshape.18074)
  %reduce-window.379 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3654, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.17
  %reshape.18076 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.379)
  %copy.3655 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.18076)
  %compare.3099 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3655, %broadcast.5435), direction=LE
  %select.1955 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3099, %convert.2080, %broadcast.5436)
  %reduce.746 = s32[1,4096,8]{2,1,0} reduce(%select.1955, %constant.3783), dimensions={2}, to_apply=%region_822.21814
  %convert.2081 = bf16[1,4096,8]{2,1,0} convert(%reduce.746)
  %multiply.4841 = bf16[1,4096,8]{2,1,0} multiply(%scatter.809, %convert.2081)
  %broadcast.8881 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4841), dimensions={0,1,2}
  %multiply.4842 = s32[1,8192,8]{2,1,0} multiply(%copy.3654, %reduce-window.379)
  %reshape.18077 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.4842)
  %reduce.747 = s32[1,4096,8]{2,1,0} reduce(%reshape.18077, %constant.3783), dimensions={2}, to_apply=%region_823.21823
  %multiply.4843 = s32[1,4096,8]{2,1,0} multiply(%reduce.747, %reduce.746)
  %broadcast.8882 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4843), dimensions={0,1,2}
  %iota.2125 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3100 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.8882, %iota.2125), direction=EQ
  %convert.2082 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3100)
  %convert.2083 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2082)
  %multiply.4844 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.8881, %convert.2083)
  %slice.607 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.4844), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3101 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.607, %broadcast.5439), direction=NE
  %copy.3656 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3101)
  %convert.2084 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3656)
  %dot.850 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2084, %copy.3652), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.18080 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.850)
  %all-to-all.136 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18080), channel_id=840, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.222 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.136), dimensions={1,0,2,3,4}
  %reshape.18081 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.222)
  %transpose.223 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.18081), dimensions={1,0,2,3}
  %copy.3657 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.223)
  %get-tuple-element.1436 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.18), index=1
  %copy.3658 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1436)
  %dot.851 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3657, %copy.3658), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3659 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.851)
  %negate.263 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3659)
  %exponential.228 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.263)
  %add.4386 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.228, %broadcast.5440)
  %divide.897 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4386)
  %multiply.4848 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3659, %divide.897)
  %copy.3660 = bf16[1,4096,4096]{2,1,0} copy(%copy.3642)
  %copy.3661 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.607)
  %dot.852 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3660, %copy.3661), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.18084 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.852)
  %all-to-all.137 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.18084), channel_id=841, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.224 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.137), dimensions={2,0,1,3,4}
  %reshape.18085 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.224)
  %transpose.225 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.18085), dimensions={2,0,3,1}
  %copy.3662 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.225)
  %get-tuple-element.1437 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.18), index=3
  %copy.3663 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1437)
  %dot.853 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3662, %copy.3663), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.4851 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4848, %dot.853)
  %copy.3664 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.4851)
  %get-tuple-element.1438 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.18), index=2
  %copy.3665 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1438)
  %dot.854 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3664, %copy.3665), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.855 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3657, %copy.3665), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3666 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.855)
  %multiply.4852 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.853, %copy.3666)
  %multiply.4854 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4852, %divide.897)
  %multiply.4855 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3659, %multiply.4852)
  %subtract.547 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.897)
  %multiply.4856 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.897, %subtract.547)
  %multiply.4857 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4855, %multiply.4856)
  %add.4387 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.4854, %multiply.4857)
  %copy.3667 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4387)
  %dot.856 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3667, %copy.3658), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4388 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.854, %dot.856)
  %copy.3668 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4388)
  %transpose.226 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3668), dimensions={1,0,2,3}
  %reshape.18088 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.226)
  %all-to-all.138 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18088), channel_id=842, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.227 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.138), dimensions={1,0,2,3,4}
  %reshape.18089 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.227)
  %dot.857 = bf16[1,4096,4096]{2,1,0} dot(%convert.2084, %reshape.18089), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.18091 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1730)
  %compare.3103 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.356, %broadcast.7265), direction=GE
  %compare.3104 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.356, %broadcast.7267), direction=LE
  %and.409 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3103, %compare.3104)
  %reduce.748 = pred[1,4096,2]{2,1,0} reduce(%and.409, %constant.4025), dimensions={3}, to_apply=%region_826.21908
  %multiply.4860 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4848, %copy.3666)
  %dot.858 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.4860, %copy.3663), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3669 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.858)
  %reshape.18093 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3669)
  %all-to-all.139 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18093), channel_id=843, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.228 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.139), dimensions={1,0,2,3,4}
  %reshape.18094 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.228)
  %dot.859 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3660, %reshape.18094), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3670 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.859)
  %pad.18 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3670, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.4865 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.18, %convert.2083)
  %reduce.749 = bf16[1,4096,8]{2,1,0} reduce(%multiply.4865, %constant.3795), dimensions={3}, to_apply=%region_824.21890
  %multiply.4866 = bf16[1,4096,8]{2,1,0} multiply(%reduce.749, %convert.2081)
  %gather.69 = bf16[1,4096,2]{2,1,0} gather(%multiply.4866, %subtract.546), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.1956 = bf16[1,4096,2]{2,1,0} select(%reduce.748, %gather.69, %broadcast.5432)
  %select.1957 = bf16[1,4096,2]{2,1,0} select(%compare.3097, %select.1956, %broadcast.5432)
  %convert.2087 = f32[1,4096,2]{2,1,0} convert(%select.1957)
  %divide.898 = f32[1,4096,2]{2,1,0} divide(%convert.2087, %broadcast.8876)
  %multiply.4867 = f32[1,4096]{1,0} multiply(%reduce.745, %reduce.745)
  %divide.899 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.4867)
  %broadcast.8888 = f32[1,4096,2]{2,1,0} broadcast(%divide.899), dimensions={0,1}
  %multiply.4868 = f32[1,4096,2]{2,1,0} multiply(%convert.2087, %broadcast.8888)
  %multiply.4869 = f32[1,4096,2]{2,1,0} multiply(%multiply.4868, %exponential.227)
  %reduce.750 = f32[1,4096]{1,0} reduce(%multiply.4869, %constant.3956), dimensions={2}, to_apply=%region_827.21922
  %negate.264 = f32[1,4096]{1,0} negate(%reduce.750)
  %broadcast.8890 = f32[1,4096,2]{2,1,0} broadcast(%negate.264), dimensions={0,1}
  %add.4389 = f32[1,4096,2]{2,1,0} add(%divide.898, %broadcast.8890)
  %multiply.4870 = f32[1,4096,2]{2,1,0} multiply(%add.4389, %exponential.227)
  %convert.2088 = bf16[1,4096,2]{2,1,0} convert(%multiply.4870)
  %scatter.810 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.18091, %convert.2088), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_829.21942
  %copy.3671 = bf16[1,4096,8]{2,1,0} copy(%scatter.810)
  %dot.860 = bf16[1,4096,4096]{2,1,0} dot(%copy.3671, %all-gather.356), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4391 = bf16[1,4096,4096]{1,2,0} add(%dot.857, %dot.860)
  %copy.3672 = bf16[1,4096,4096]{2,1,0} copy(%add.4391)
  %multiply.4871 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3672, %broadcast.8861)
  %convert.2089 = f32[1,4096,4096]{2,1,0} convert(%multiply.4871)
  %multiply.4872 = f32[1,4096,4096]{2,1,0} multiply(%convert.2089, %broadcast.8860)
  %multiply.4873 = f32[1,4096,4096]{2,1,0} multiply(%convert.2073, %convert.2089)
  %reduce.751 = f32[1,4096]{1,0} reduce(%multiply.4873, %constant.3956), dimensions={2}, to_apply=%region_832.21971
  %reshape.18111 = f32[1,4096,1]{2,1,0} reshape(%reduce.751)
  %divide.900 = f32[1,4096,1]{2,1,0} divide(%rsqrt.166, %reshape.18040)
  %multiply.4874 = f32[1,4096,1]{2,1,0} multiply(%divide.900, %broadcast.7210)
  %multiply.4875 = f32[1,4096,1]{2,1,0} multiply(%reshape.18111, %multiply.4874)
  %multiply.4877 = f32[1,4096,1]{2,1,0} multiply(%multiply.4875, %broadcast.7211)
  %reshape.18112 = f32[1,4096]{1,0} reshape(%multiply.4877)
  %broadcast.8897 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18112), dimensions={0,1}
  %multiply.4878 = f32[1,4096,4096]{2,1,0} multiply(%convert.2073, %broadcast.8897)
  %add.4392 = f32[1,4096,4096]{2,1,0} add(%multiply.4872, %multiply.4878)
  %convert.2090 = bf16[1,4096,4096]{2,1,0} convert(%add.4392)
  %add.4393 = bf16[1,4096,4096]{2,1,0} add(%copy.3642, %convert.2090)
  %get-tuple-element.1439 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.180), index=1
  %get-tuple-element.1440 = u32[2,4]{1,0} get-tuple-element(%custom-call.180), index=2
  %copy.3673 = bf16[1,4096,4096]{2,1,0} copy(%add.4393)
  %dot.861 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3673, %all-gather.355), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3674 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.861)
  %custom-call.182 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3646, %copy.3648, %copy.3649, %constant.3999, %get-tuple-element.1439, /*index=5*/%get-tuple-element.1440, %get-tuple-element.1424, %copy.3674, %scatter.802, %scatter.807, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1447 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.182), index=2
  %copy.3675 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1447)
  %dot.862 = bf16[1,4096,4096]{2,1,0} dot(%copy.3675, %all-gather.354), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1448 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.182), index=1
  %copy.3676 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1448)
  %slice.608 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3676), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.4880 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.608, %broadcast.8840)
  %slice.609 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3676), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.4883 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.609, %broadcast.8839)
  %add.4407 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4880, %multiply.4883)
  %multiply.4884 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.608, %broadcast.8839)
  %negate.265 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.609)
  %multiply.4885 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.265, %broadcast.8840)
  %add.4408 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4884, %multiply.4885)
  %concatenate.361 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4407, %add.4408), dimensions={3}
  %dot.863 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.361, %all-gather.353), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4409 = bf16[1,4096,4096]{2,1,0} add(%dot.862, %dot.863)
  %copy.3677 = bf16[1,4096,4096]{2,1,0} copy(%add.4409)
  %get-tuple-element.1449 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.182), index=0
  %copy.3678 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1449)
  %slice.610 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3678), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.4887 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.610, %broadcast.8832)
  %slice.611 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3678), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.4889 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.611, %broadcast.8830)
  %add.4410 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4887, %multiply.4889)
  %multiply.4890 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.610, %broadcast.8830)
  %negate.266 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.611)
  %multiply.4892 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.266, %broadcast.8832)
  %add.4411 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4890, %multiply.4892)
  %concatenate.362 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4410, %add.4411), dimensions={3}
  %dot.864 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.362, %all-gather.352), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3679 = bf16[1,4096,4096]{2,1,0} copy(%dot.864)
  %add.4412 = bf16[1,4096,4096]{2,1,0} add(%copy.3677, %copy.3679)
  %copy.3680 = bf16[1,4096,4096]{2,1,0} copy(%add.4412)
  %multiply.4893 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3680, %broadcast.8824)
  %convert.2093 = f32[1,4096,4096]{2,1,0} convert(%multiply.4893)
  %multiply.4894 = f32[1,4096,4096]{2,1,0} multiply(%convert.2093, %broadcast.8823)
  %multiply.4895 = f32[1,4096,4096]{2,1,0} multiply(%convert.2059, %convert.2093)
  %reduce.752 = f32[1,4096]{1,0} reduce(%multiply.4895, %constant.3956), dimensions={2}, to_apply=%region_836.22082
  %reshape.18167 = f32[1,4096,1]{2,1,0} reshape(%reduce.752)
  %divide.903 = f32[1,4096,1]{2,1,0} divide(%rsqrt.165, %reshape.17985)
  %multiply.4896 = f32[1,4096,1]{2,1,0} multiply(%divide.903, %broadcast.7210)
  %multiply.4897 = f32[1,4096,1]{2,1,0} multiply(%reshape.18167, %multiply.4896)
  %multiply.4898 = f32[1,4096,1]{2,1,0} multiply(%multiply.4897, %broadcast.7211)
  %reshape.18168 = f32[1,4096]{1,0} reshape(%multiply.4898)
  %broadcast.8922 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18168), dimensions={0,1}
  %multiply.4899 = f32[1,4096,4096]{2,1,0} multiply(%convert.2059, %broadcast.8922)
  %add.4414 = f32[1,4096,4096]{2,1,0} add(%multiply.4894, %multiply.4899)
  %convert.2094 = bf16[1,4096,4096]{2,1,0} convert(%add.4414)
  %add.4415 = bf16[1,4096,4096]{2,1,0} add(%add.4393, %convert.2094)
  %copy.3681 = bf16[1,4096,4096]{2,1,0} copy(%add.4415)
  %tuple.318 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.133, %param.134, %param.135, %param.136, %param.132, /*index=5*/%param.127, %param.129, %param.131, %param.128, %param.130, /*index=10*/%copy.2438, %param.10, %param.7, %copy.3681)
  %opt-barrier.19 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.318)
  %get-tuple-element.1450 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.19), index=13
  %copy.3682 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1450)
  %iota.2127 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1451 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.19), index=10
  %copy.3683 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1451)
  %convert.2095 = f32[1,4096,4096]{2,1,0} convert(%copy.3683)
  %multiply.4901 = f32[1,4096,4096]{2,1,0} multiply(%convert.2095, %convert.2095)
  %reduce.753 = f32[1,4096]{1,0} reduce(%multiply.4901, %constant.3956), dimensions={2}, to_apply=%region_838.22125
  %multiply.4902 = f32[1,4096]{1,0} multiply(%reduce.753, %broadcast.5380)
  %add.4417 = f32[1,4096]{1,0} add(%multiply.4902, %broadcast.5381)
  %reshape.18171 = f32[1,4096,1]{2,1,0} reshape(%add.4417)
  %rsqrt.167 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.18171)
  %reshape.18172 = f32[1,4096]{1,0} reshape(%rsqrt.167)
  %broadcast.8927 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18172), dimensions={0,1}
  %multiply.4903 = f32[1,4096,4096]{2,1,0} multiply(%convert.2095, %broadcast.8927)
  %convert.2096 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4903)
  %get-tuple-element.1452 = bf16[4096]{0} get-tuple-element(%opt-barrier.19), index=5
  %broadcast.8930 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1452), dimensions={2}
  %multiply.4904 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2096, %broadcast.8930)
  %copy.3684 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4904)
  %copy.3685 = bf16[1,4096,4096]{2,1,0} copy(%copy.3684)
  %get-tuple-element.1453 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.19), index=8
  %all-gather.359 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1453), channel_id=846, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.865 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3685, %all-gather.359), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.612 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.865), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1454 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.19), index=12
  %convert.2098 = f32[1,4096]{1,0} convert(%get-tuple-element.1454)
  %broadcast.8932 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2098), dimensions={0,1}
  %divide.904 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.8932, %broadcast.5388)
  %cosine.103 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.904)
  %convert.2100 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.103)
  %reshape.18174 = bf16[1,4096,64]{2,1,0} reshape(%convert.2100)
  %broadcast.8936 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.18174), dimensions={0,1,3}
  %multiply.4908 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.612, %broadcast.8936)
  %slice.613 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.865), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.102 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.904)
  %convert.2101 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.102)
  %reshape.18176 = bf16[1,4096,64]{2,1,0} reshape(%convert.2101)
  %broadcast.8938 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.18176), dimensions={0,1,3}
  %multiply.4910 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.613, %broadcast.8938)
  %subtract.551 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.4908, %multiply.4910)
  %multiply.4911 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.613, %broadcast.8936)
  %multiply.4912 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.612, %broadcast.8938)
  %add.4419 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4911, %multiply.4912)
  %concatenate.363 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.551, %add.4419), dimensions={3}
  %copy.3686 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.363)
  %get-tuple-element.1455 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.19), index=6
  %all-gather.360 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1455), channel_id=847, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.866 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3685, %all-gather.360), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.614 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.866), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.8946 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.18174), dimensions={0,1,3}
  %multiply.4918 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.614, %broadcast.8946)
  %slice.615 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.866), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.8947 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.18176), dimensions={0,1,3}
  %multiply.4920 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.615, %broadcast.8947)
  %subtract.552 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.4918, %multiply.4920)
  %multiply.4921 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.615, %broadcast.8946)
  %multiply.4923 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.614, %broadcast.8947)
  %add.4420 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4921, %multiply.4923)
  %concatenate.364 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.552, %add.4420), dimensions={3}
  %copy.3688 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.364)
  %get-tuple-element.1456 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.19), index=9
  %all-gather.361 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1456), channel_id=848, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.867 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3685, %all-gather.361), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3689 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.867)
  %get-tuple-element.1457 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.19), index=11
  %broadcast.8950 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1457), dimensions={0,1}
  %broadcast.8951 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1457), dimensions={0,2}
  %compare.3131 = pred[1,4096,4096]{2,1,0} compare(%broadcast.8950, %broadcast.8951), direction=EQ
  %and.414 = pred[1,4096,4096]{2,1,0} and(%compare.3131, %broadcast.5406)
  %select.1978 = f32[1,4096,4096]{2,1,0} select(%and.414, %broadcast.5407, %broadcast.5408)
  %compare.3133 = pred[1,4096,4096]{2,1,0} compare(%select.1978, %broadcast.5407), direction=NE
  %not.115 = pred[1,4096,4096]{2,1,0} not(%compare.3133)
  %convert.2107 = s32[1,4096,4096]{2,1,0} convert(%not.115)
  %reduce.754 = s32[1,4096]{1,0} reduce(%convert.2107, %constant.3783), dimensions={1}, to_apply=%region_839.22259
  %reshape.18187 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.754)
  %slice.616 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.18187), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.18190 = s32[1,1]{1,0} reshape(%slice.616)
  %reshape.18211 = s32[1]{0} reshape(%reshape.18190)
  %compare.3146 = pred[1]{0} compare(%reshape.18211, %constant.4022), direction=LT
  %select.1988 = s32[1]{0} select(%compare.3146, %reshape.11470, %reshape.18211)
  %scatter.825 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1988), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.51
  %reduce.755 = s32[1,4096]{1,0} reduce(%convert.2107, %constant.3783), dimensions={2}, to_apply=%region_840.22267
  %reshape.18191 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.755)
  %reduce.756 = s32[1,1]{1,0} reduce(%reshape.18191, %constant.4014), dimensions={3,2}, to_apply=%region_841.22272
  %reshape.18228 = s32[1]{0} reshape(%reduce.756)
  %compare.3160 = pred[1]{0} compare(%reshape.18228, %constant.4022), direction=LT
  %select.1998 = s32[1]{0} select(%compare.3160, %reshape.11470, %reshape.18228)
  %scatter.830 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.1998), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.51
  %custom-call.183 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3686, %copy.3688, %copy.3689, %constant.3999, %scatter.825, /*index=5*/%scatter.830, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1463 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.183), index=0
  %copy.3690 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1463)
  %get-tuple-element.1464 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.19), index=7
  %all-gather.362 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1464), channel_id=849, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.868 = bf16[1,4096,4096]{2,1,0} dot(%copy.3690, %all-gather.362), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3691 = bf16[1,4096,4096]{2,1,0} copy(%dot.868)
  %add.4434 = bf16[1,4096,4096]{2,1,0} add(%copy.3683, %copy.3691)
  %convert.2111 = f32[1,4096,4096]{2,1,0} convert(%add.4434)
  %multiply.4925 = f32[1,4096,4096]{2,1,0} multiply(%convert.2111, %convert.2111)
  %reduce.757 = f32[1,4096]{1,0} reduce(%multiply.4925, %constant.3956), dimensions={2}, to_apply=%region_842.22288
  %multiply.4927 = f32[1,4096]{1,0} multiply(%reduce.757, %broadcast.5380)
  %add.4435 = f32[1,4096]{1,0} add(%multiply.4927, %broadcast.5381)
  %reshape.18231 = f32[1,4096,1]{2,1,0} reshape(%add.4435)
  %rsqrt.168 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.18231)
  %reshape.18232 = f32[1,4096]{1,0} reshape(%rsqrt.168)
  %broadcast.8963 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18232), dimensions={0,1}
  %multiply.4928 = f32[1,4096,4096]{2,1,0} multiply(%convert.2111, %broadcast.8963)
  %convert.2112 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4928)
  %get-tuple-element.1465 = bf16[4096]{0} get-tuple-element(%opt-barrier.19), index=4
  %broadcast.8964 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1465), dimensions={2}
  %multiply.4929 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2112, %broadcast.8964)
  %copy.3692 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4929)
  %get-tuple-element.1466 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.19), index=0
  %all-gather.363 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1466), channel_id=850, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.869 = bf16[1,4096,8]{2,1,0} dot(%copy.3692, %all-gather.363), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3693 = bf16[1,4096,8]{2,1,0} copy(%dot.869)
  %reshape.18233 = bf16[4096,8]{1,0} reshape(%copy.3693)
  %custom-call.184 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.18233), custom_call_target="TopK", called_computations={%compare-greater-than.51.clone}
  %get-tuple-element.1467 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.184), index=0
  %get-tuple-element.1468 = s32[4096,2]{1,0} get-tuple-element(%custom-call.184), index=1
  %add.4436 = s32[4096,2]{1,0} add(%get-tuple-element.1468, %broadcast.5420)
  %sort.257 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1467, %add.4436), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.51
  %get-tuple-element.1470 = s32[4096,2]{1,0} get-tuple-element(%sort.257), index=1
  %slice.618 = s32[4096,2]{1,0} slice(%get-tuple-element.1470), slice={[0:4096], [0:2]}
  %all-gather.365 = s32[32768,2]{1,0} all-gather(%slice.618), channel_id=852, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1774 = s32[4096,2]{1,0} dynamic-slice(%all-gather.365, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.18236 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1774)
  %compare.3161 = pred[1,4096,2]{2,1,0} compare(%reshape.18236, %broadcast.5421), direction=LT
  %add.4437 = s32[1,4096,2]{2,1,0} add(%reshape.18236, %broadcast.5422)
  %select.1999 = s32[1,4096,2]{2,1,0} select(%compare.3161, %add.4437, %reshape.18236)
  %reshape.18237 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.1999)
  %concatenate.365 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2127, %reshape.18237), dimensions={3}
  %subtract.558 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.365, %broadcast.5433)
  %scatter.831 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.558, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_845.22367
  %gather.70 = u32[1,4096,2]{2,1,0} gather(%scatter.831, %subtract.558), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3163 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.70), direction=EQ
  %get-tuple-element.1469 = bf16[4096,2]{1,0} get-tuple-element(%sort.257), index=0
  %slice.617 = bf16[4096,2]{1,0} slice(%get-tuple-element.1469), slice={[0:4096], [0:2]}
  %all-gather.364 = bf16[32768,2]{1,0} all-gather(%slice.617), channel_id=851, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1784 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.364, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2115 = f32[4096,2]{1,0} convert(%dynamic-slice.1784)
  %reshape.18253 = f32[1,4096,2]{2,1,0} reshape(%convert.2115)
  %reduce.758 = f32[4096]{0} reduce(%convert.2115, %constant.4073), dimensions={1}, to_apply=%region_843.22317
  %reshape.18254 = f32[1,4096]{1,0} reshape(%reduce.758)
  %broadcast.8971 = f32[1,4096,2]{2,1,0} broadcast(%reshape.18254), dimensions={0,1}
  %subtract.557 = f32[1,4096,2]{2,1,0} subtract(%reshape.18253, %broadcast.8971)
  %exponential.229 = f32[1,4096,2]{2,1,0} exponential(%subtract.557)
  %reduce.759 = f32[1,4096]{1,0} reduce(%exponential.229, %constant.3956), dimensions={2}, to_apply=%region_844.22329
  %broadcast.8972 = f32[1,4096,2]{2,1,0} broadcast(%reduce.759), dimensions={0,1}
  %divide.908 = f32[1,4096,2]{2,1,0} divide(%exponential.229, %broadcast.8972)
  %convert.2116 = bf16[1,4096,2]{2,1,0} convert(%divide.908)
  %select.2000 = bf16[1,4096,2]{2,1,0} select(%compare.3163, %convert.2116, %broadcast.5432)
  %scatter.832 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.558, %select.2000), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_846.22376
  %broadcast.8974 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.18236), dimensions={0,1,2}
  %iota.2135 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3164 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.8974, %iota.2135), direction=EQ
  %convert.2117 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3164)
  %reshape.18264 = s32[1,8192,8]{2,1,0} reshape(%convert.2117)
  %copy.3694 = s32[1,8192,8]{2,1,0} copy(%reshape.18264)
  %reduce-window.384 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3694, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.18
  %reshape.18267 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.384)
  %copy.3695 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.18267)
  %compare.3165 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3695, %broadcast.5435), direction=LE
  %select.2001 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3165, %convert.2117, %broadcast.5436)
  %reduce.760 = s32[1,4096,8]{2,1,0} reduce(%select.2001, %constant.3783), dimensions={2}, to_apply=%region_847.22390
  %convert.2118 = bf16[1,4096,8]{2,1,0} convert(%reduce.760)
  %multiply.4936 = bf16[1,4096,8]{2,1,0} multiply(%scatter.832, %convert.2118)
  %broadcast.8976 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4936), dimensions={0,1,2}
  %multiply.4937 = s32[1,8192,8]{2,1,0} multiply(%copy.3694, %reduce-window.384)
  %reshape.18268 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.4937)
  %reduce.761 = s32[1,4096,8]{2,1,0} reduce(%reshape.18268, %constant.3783), dimensions={2}, to_apply=%region_848.22399
  %multiply.4938 = s32[1,4096,8]{2,1,0} multiply(%reduce.761, %reduce.760)
  %broadcast.8977 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.4938), dimensions={0,1,2}
  %iota.2136 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3166 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.8977, %iota.2136), direction=EQ
  %convert.2119 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3166)
  %convert.2120 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2119)
  %multiply.4939 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.8976, %convert.2120)
  %slice.619 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.4939), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3167 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.619, %broadcast.5439), direction=NE
  %copy.3696 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3167)
  %convert.2121 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3696)
  %dot.870 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2121, %copy.3692), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.18273 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.870)
  %all-to-all.140 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18273), channel_id=859, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.229 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.140), dimensions={1,0,2,3,4}
  %reshape.18274 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.229)
  %transpose.230 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.18274), dimensions={1,0,2,3}
  %copy.3697 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.230)
  %get-tuple-element.1475 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.19), index=1
  %copy.3698 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1475)
  %dot.871 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3697, %copy.3698), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3699 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.871)
  %negate.267 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3699)
  %exponential.230 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.267)
  %add.4442 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.230, %broadcast.5440)
  %divide.909 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4442)
  %multiply.4943 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3699, %divide.909)
  %copy.3700 = bf16[1,4096,4096]{2,1,0} copy(%copy.3682)
  %copy.3701 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.619)
  %dot.872 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3700, %copy.3701), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.18277 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.872)
  %all-to-all.141 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.18277), channel_id=860, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.231 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.141), dimensions={2,0,1,3,4}
  %reshape.18278 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.231)
  %transpose.232 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.18278), dimensions={2,0,3,1}
  %copy.3702 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.232)
  %get-tuple-element.1476 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.19), index=3
  %copy.3703 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1476)
  %dot.873 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3702, %copy.3703), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.4946 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4943, %dot.873)
  %copy.3704 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.4946)
  %get-tuple-element.1477 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.19), index=2
  %copy.3705 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1477)
  %dot.874 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3704, %copy.3705), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.875 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3697, %copy.3705), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3706 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.875)
  %multiply.4947 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.873, %copy.3706)
  %multiply.4948 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4947, %divide.909)
  %multiply.4949 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3699, %multiply.4947)
  %subtract.559 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.909)
  %multiply.4950 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.909, %subtract.559)
  %multiply.4951 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4949, %multiply.4950)
  %add.4443 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.4948, %multiply.4951)
  %copy.3707 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4443)
  %dot.876 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3707, %copy.3698), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4444 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.874, %dot.876)
  %copy.3708 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4444)
  %transpose.233 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3708), dimensions={1,0,2,3}
  %reshape.18282 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.233)
  %all-to-all.142 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18282), channel_id=861, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.234 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.142), dimensions={1,0,2,3,4}
  %reshape.18283 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.234)
  %dot.877 = bf16[1,4096,4096]{2,1,0} dot(%convert.2121, %reshape.18283), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.18285 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1774)
  %compare.3170 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.365, %broadcast.7265), direction=GE
  %compare.3171 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.365, %broadcast.7267), direction=LE
  %and.419 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3170, %compare.3171)
  %reduce.762 = pred[1,4096,2]{2,1,0} reduce(%and.419, %constant.4025), dimensions={3}, to_apply=%region_851.22484
  %multiply.4955 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.4943, %copy.3706)
  %dot.878 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.4955, %copy.3703), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3709 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.878)
  %reshape.18287 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3709)
  %all-to-all.143 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18287), channel_id=862, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.235 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.143), dimensions={1,0,2,3,4}
  %reshape.18289 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.235)
  %dot.879 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3700, %reshape.18289), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3710 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.879)
  %pad.19 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3710, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.4960 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.19, %convert.2120)
  %reduce.763 = bf16[1,4096,8]{2,1,0} reduce(%multiply.4960, %constant.3795), dimensions={3}, to_apply=%region_849.22466
  %multiply.4961 = bf16[1,4096,8]{2,1,0} multiply(%reduce.763, %convert.2118)
  %gather.71 = bf16[1,4096,2]{2,1,0} gather(%multiply.4961, %subtract.558), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2002 = bf16[1,4096,2]{2,1,0} select(%reduce.762, %gather.71, %broadcast.5432)
  %select.2003 = bf16[1,4096,2]{2,1,0} select(%compare.3163, %select.2002, %broadcast.5432)
  %convert.2123 = f32[1,4096,2]{2,1,0} convert(%select.2003)
  %divide.910 = f32[1,4096,2]{2,1,0} divide(%convert.2123, %broadcast.8972)
  %multiply.4963 = f32[1,4096]{1,0} multiply(%reduce.759, %reduce.759)
  %divide.911 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.4963)
  %broadcast.8983 = f32[1,4096,2]{2,1,0} broadcast(%divide.911), dimensions={0,1}
  %multiply.4964 = f32[1,4096,2]{2,1,0} multiply(%convert.2123, %broadcast.8983)
  %multiply.4965 = f32[1,4096,2]{2,1,0} multiply(%multiply.4964, %exponential.229)
  %reduce.764 = f32[1,4096]{1,0} reduce(%multiply.4965, %constant.3956), dimensions={2}, to_apply=%region_852.22498
  %negate.268 = f32[1,4096]{1,0} negate(%reduce.764)
  %broadcast.8984 = f32[1,4096,2]{2,1,0} broadcast(%negate.268), dimensions={0,1}
  %add.4445 = f32[1,4096,2]{2,1,0} add(%divide.910, %broadcast.8984)
  %multiply.4967 = f32[1,4096,2]{2,1,0} multiply(%add.4445, %exponential.229)
  %convert.2124 = bf16[1,4096,2]{2,1,0} convert(%multiply.4967)
  %scatter.833 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.18285, %convert.2124), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_854.22518
  %copy.3711 = bf16[1,4096,8]{2,1,0} copy(%scatter.833)
  %dot.880 = bf16[1,4096,4096]{2,1,0} dot(%copy.3711, %all-gather.363), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4446 = bf16[1,4096,4096]{1,2,0} add(%dot.877, %dot.880)
  %copy.3712 = bf16[1,4096,4096]{2,1,0} copy(%add.4446)
  %multiply.4968 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3712, %broadcast.8964)
  %convert.2125 = f32[1,4096,4096]{2,1,0} convert(%multiply.4968)
  %multiply.4969 = f32[1,4096,4096]{2,1,0} multiply(%convert.2125, %broadcast.8963)
  %multiply.4970 = f32[1,4096,4096]{2,1,0} multiply(%convert.2111, %convert.2125)
  %reduce.765 = f32[1,4096]{1,0} reduce(%multiply.4970, %constant.3956), dimensions={2}, to_apply=%region_857.22547
  %reshape.18305 = f32[1,4096,1]{2,1,0} reshape(%reduce.765)
  %divide.912 = f32[1,4096,1]{2,1,0} divide(%rsqrt.168, %reshape.18231)
  %multiply.4971 = f32[1,4096,1]{2,1,0} multiply(%divide.912, %broadcast.7210)
  %multiply.4972 = f32[1,4096,1]{2,1,0} multiply(%reshape.18305, %multiply.4971)
  %multiply.4973 = f32[1,4096,1]{2,1,0} multiply(%multiply.4972, %broadcast.7211)
  %reshape.18306 = f32[1,4096]{1,0} reshape(%multiply.4973)
  %broadcast.8990 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18306), dimensions={0,1}
  %multiply.4974 = f32[1,4096,4096]{2,1,0} multiply(%convert.2111, %broadcast.8990)
  %add.4447 = f32[1,4096,4096]{2,1,0} add(%multiply.4969, %multiply.4974)
  %convert.2127 = bf16[1,4096,4096]{2,1,0} convert(%add.4447)
  %add.4448 = bf16[1,4096,4096]{2,1,0} add(%copy.3682, %convert.2127)
  %get-tuple-element.1478 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.183), index=1
  %get-tuple-element.1479 = u32[2,4]{1,0} get-tuple-element(%custom-call.183), index=2
  %copy.3713 = bf16[1,4096,4096]{2,1,0} copy(%add.4448)
  %dot.881 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3713, %all-gather.362), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3714 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.881)
  %custom-call.185 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3686, %copy.3688, %copy.3689, %constant.3999, %get-tuple-element.1478, /*index=5*/%get-tuple-element.1479, %get-tuple-element.1463, %copy.3714, %scatter.825, %scatter.830, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1486 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.185), index=2
  %copy.3715 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1486)
  %dot.882 = bf16[1,4096,4096]{2,1,0} dot(%copy.3715, %all-gather.361), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1487 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.185), index=1
  %copy.3716 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1487)
  %slice.620 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3716), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.4976 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.620, %broadcast.8947)
  %slice.621 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3716), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.4978 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.621, %broadcast.8946)
  %add.4462 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4976, %multiply.4978)
  %multiply.4979 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.620, %broadcast.8946)
  %negate.269 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.621)
  %multiply.4980 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.269, %broadcast.8947)
  %add.4463 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.4979, %multiply.4980)
  %concatenate.370 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4462, %add.4463), dimensions={3}
  %dot.883 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.370, %all-gather.360), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4464 = bf16[1,4096,4096]{2,1,0} add(%dot.882, %dot.883)
  %copy.3717 = bf16[1,4096,4096]{2,1,0} copy(%add.4464)
  %get-tuple-element.1488 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.185), index=0
  %copy.3718 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1488)
  %slice.622 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3718), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.4982 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.622, %broadcast.8938)
  %slice.623 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3718), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.4984 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.623, %broadcast.8936)
  %add.4465 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4982, %multiply.4984)
  %multiply.4985 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.622, %broadcast.8936)
  %negate.270 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.623)
  %multiply.4986 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.270, %broadcast.8938)
  %add.4466 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.4985, %multiply.4986)
  %concatenate.371 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4465, %add.4466), dimensions={3}
  %dot.884 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.371, %all-gather.359), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3719 = bf16[1,4096,4096]{2,1,0} copy(%dot.884)
  %add.4467 = bf16[1,4096,4096]{2,1,0} add(%copy.3717, %copy.3719)
  %copy.3720 = bf16[1,4096,4096]{2,1,0} copy(%add.4467)
  %multiply.4987 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3720, %broadcast.8930)
  %convert.2130 = f32[1,4096,4096]{2,1,0} convert(%multiply.4987)
  %multiply.4988 = f32[1,4096,4096]{2,1,0} multiply(%convert.2130, %broadcast.8927)
  %multiply.4989 = f32[1,4096,4096]{2,1,0} multiply(%convert.2095, %convert.2130)
  %reduce.766 = f32[1,4096]{1,0} reduce(%multiply.4989, %constant.3956), dimensions={2}, to_apply=%region_861.22658
  %reshape.18360 = f32[1,4096,1]{2,1,0} reshape(%reduce.766)
  %divide.915 = f32[1,4096,1]{2,1,0} divide(%rsqrt.167, %reshape.18171)
  %multiply.4990 = f32[1,4096,1]{2,1,0} multiply(%divide.915, %broadcast.7210)
  %multiply.4991 = f32[1,4096,1]{2,1,0} multiply(%reshape.18360, %multiply.4990)
  %multiply.4992 = f32[1,4096,1]{2,1,0} multiply(%multiply.4991, %broadcast.7211)
  %reshape.18361 = f32[1,4096]{1,0} reshape(%multiply.4992)
  %broadcast.9010 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18361), dimensions={0,1}
  %multiply.4993 = f32[1,4096,4096]{2,1,0} multiply(%convert.2095, %broadcast.9010)
  %add.4468 = f32[1,4096,4096]{2,1,0} add(%multiply.4988, %multiply.4993)
  %convert.2131 = bf16[1,4096,4096]{2,1,0} convert(%add.4468)
  %add.4469 = bf16[1,4096,4096]{2,1,0} add(%add.4448, %convert.2131)
  %copy.3721 = bf16[1,4096,4096]{2,1,0} copy(%add.4469)
  %tuple.323 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.123, %param.124, %param.125, %param.126, %param.122, /*index=5*/%param.117, %param.119, %param.121, %param.118, %param.120, /*index=10*/%copy.2414, %param.10, %param.7, %copy.3721)
  %opt-barrier.20 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.323)
  %get-tuple-element.1489 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.20), index=13
  %copy.3722 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1489)
  %iota.2138 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1490 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.20), index=10
  %copy.3723 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1490)
  %convert.2132 = f32[1,4096,4096]{2,1,0} convert(%copy.3723)
  %multiply.4995 = f32[1,4096,4096]{2,1,0} multiply(%convert.2132, %convert.2132)
  %reduce.767 = f32[1,4096]{1,0} reduce(%multiply.4995, %constant.3956), dimensions={2}, to_apply=%region_863.22701
  %multiply.4996 = f32[1,4096]{1,0} multiply(%reduce.767, %broadcast.5380)
  %add.4472 = f32[1,4096]{1,0} add(%multiply.4996, %broadcast.5381)
  %reshape.18364 = f32[1,4096,1]{2,1,0} reshape(%add.4472)
  %rsqrt.169 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.18364)
  %reshape.18365 = f32[1,4096]{1,0} reshape(%rsqrt.169)
  %broadcast.9015 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18365), dimensions={0,1}
  %multiply.4997 = f32[1,4096,4096]{2,1,0} multiply(%convert.2132, %broadcast.9015)
  %convert.2133 = bf16[1,4096,4096]{2,1,0} convert(%multiply.4997)
  %get-tuple-element.1491 = bf16[4096]{0} get-tuple-element(%opt-barrier.20), index=5
  %broadcast.9016 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1491), dimensions={2}
  %multiply.4998 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2133, %broadcast.9016)
  %copy.3724 = bf16[1,4096,4096]{2,1,0} copy(%multiply.4998)
  %copy.3725 = bf16[1,4096,4096]{2,1,0} copy(%copy.3724)
  %get-tuple-element.1492 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.20), index=8
  %all-gather.366 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1492), channel_id=865, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.885 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3725, %all-gather.366), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.624 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.885), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1493 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.20), index=12
  %convert.2134 = f32[1,4096]{1,0} convert(%get-tuple-element.1493)
  %broadcast.9017 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2134), dimensions={0,1}
  %divide.916 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9017, %broadcast.5388)
  %cosine.105 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.916)
  %convert.2136 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.105)
  %reshape.18367 = bf16[1,4096,64]{2,1,0} reshape(%convert.2136)
  %broadcast.9021 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.18367), dimensions={0,1,3}
  %multiply.5002 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.624, %broadcast.9021)
  %slice.625 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.885), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.104 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.916)
  %convert.2137 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.104)
  %reshape.18369 = bf16[1,4096,64]{2,1,0} reshape(%convert.2137)
  %broadcast.9023 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.18369), dimensions={0,1,3}
  %multiply.5004 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.625, %broadcast.9023)
  %subtract.563 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.5002, %multiply.5004)
  %multiply.5005 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.625, %broadcast.9021)
  %multiply.5006 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.624, %broadcast.9023)
  %add.4474 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5005, %multiply.5006)
  %concatenate.372 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.563, %add.4474), dimensions={3}
  %copy.3726 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.372)
  %get-tuple-element.1494 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.20), index=6
  %all-gather.367 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1494), channel_id=866, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.886 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3725, %all-gather.367), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.626 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.886), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.9029 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.18367), dimensions={0,1,3}
  %multiply.5010 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.626, %broadcast.9029)
  %slice.627 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.886), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.9030 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.18369), dimensions={0,1,3}
  %multiply.5012 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.627, %broadcast.9030)
  %subtract.564 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.5010, %multiply.5012)
  %multiply.5013 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.627, %broadcast.9029)
  %multiply.5014 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.626, %broadcast.9030)
  %add.4475 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5013, %multiply.5014)
  %concatenate.373 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.564, %add.4475), dimensions={3}
  %copy.3728 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.373)
  %get-tuple-element.1495 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.20), index=9
  %all-gather.368 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1495), channel_id=867, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.887 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3725, %all-gather.368), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3729 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.887)
  %get-tuple-element.1496 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.20), index=11
  %broadcast.9033 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1496), dimensions={0,1}
  %broadcast.9034 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1496), dimensions={0,2}
  %compare.3198 = pred[1,4096,4096]{2,1,0} compare(%broadcast.9033, %broadcast.9034), direction=EQ
  %and.424 = pred[1,4096,4096]{2,1,0} and(%compare.3198, %broadcast.5406)
  %select.2024 = f32[1,4096,4096]{2,1,0} select(%and.424, %broadcast.5407, %broadcast.5408)
  %compare.3200 = pred[1,4096,4096]{2,1,0} compare(%select.2024, %broadcast.5407), direction=NE
  %not.116 = pred[1,4096,4096]{2,1,0} not(%compare.3200)
  %convert.2143 = s32[1,4096,4096]{2,1,0} convert(%not.116)
  %reduce.768 = s32[1,4096]{1,0} reduce(%convert.2143, %constant.3783), dimensions={1}, to_apply=%region_864.22835
  %reshape.18380 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.768)
  %slice.628 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.18380), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.18382 = s32[1,1]{1,0} reshape(%slice.628)
  %reshape.18397 = s32[1]{0} reshape(%reshape.18382)
  %compare.3213 = pred[1]{0} compare(%reshape.18397, %constant.4022), direction=LT
  %select.2034 = s32[1]{0} select(%compare.3213, %reshape.11470, %reshape.18397)
  %scatter.848 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2034), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.52
  %reduce.769 = s32[1,4096]{1,0} reduce(%convert.2143, %constant.3783), dimensions={2}, to_apply=%region_865.22843
  %reshape.18383 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.769)
  %reduce.770 = s32[1,1]{1,0} reduce(%reshape.18383, %constant.4014), dimensions={3,2}, to_apply=%region_866.22848
  %reshape.18412 = s32[1]{0} reshape(%reduce.770)
  %compare.3226 = pred[1]{0} compare(%reshape.18412, %constant.4022), direction=LT
  %select.2047 = s32[1]{0} select(%compare.3226, %reshape.11470, %reshape.18412)
  %scatter.853 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2047), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.52
  %custom-call.186 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3726, %copy.3728, %copy.3729, %constant.3999, %scatter.848, /*index=5*/%scatter.853, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1502 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.186), index=0
  %copy.3730 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1502)
  %get-tuple-element.1503 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.20), index=7
  %all-gather.369 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1503), channel_id=868, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.888 = bf16[1,4096,4096]{2,1,0} dot(%copy.3730, %all-gather.369), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3731 = bf16[1,4096,4096]{2,1,0} copy(%dot.888)
  %add.4489 = bf16[1,4096,4096]{2,1,0} add(%copy.3723, %copy.3731)
  %convert.2147 = f32[1,4096,4096]{2,1,0} convert(%add.4489)
  %multiply.5016 = f32[1,4096,4096]{2,1,0} multiply(%convert.2147, %convert.2147)
  %reduce.771 = f32[1,4096]{1,0} reduce(%multiply.5016, %constant.3956), dimensions={2}, to_apply=%region_867.22864
  %multiply.5017 = f32[1,4096]{1,0} multiply(%reduce.771, %broadcast.5380)
  %add.4491 = f32[1,4096]{1,0} add(%multiply.5017, %broadcast.5381)
  %reshape.18414 = f32[1,4096,1]{2,1,0} reshape(%add.4491)
  %rsqrt.170 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.18414)
  %reshape.18415 = f32[1,4096]{1,0} reshape(%rsqrt.170)
  %broadcast.9050 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18415), dimensions={0,1}
  %multiply.5018 = f32[1,4096,4096]{2,1,0} multiply(%convert.2147, %broadcast.9050)
  %convert.2148 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5018)
  %get-tuple-element.1504 = bf16[4096]{0} get-tuple-element(%opt-barrier.20), index=4
  %broadcast.9051 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1504), dimensions={2}
  %multiply.5019 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2148, %broadcast.9051)
  %copy.3732 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5019)
  %get-tuple-element.1505 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.20), index=0
  %all-gather.370 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1505), channel_id=869, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.889 = bf16[1,4096,8]{2,1,0} dot(%copy.3732, %all-gather.370), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3733 = bf16[1,4096,8]{2,1,0} copy(%dot.889)
  %reshape.18416 = bf16[4096,8]{1,0} reshape(%copy.3733)
  %custom-call.187 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.18416), custom_call_target="TopK", called_computations={%compare-greater-than.52.clone}
  %get-tuple-element.1506 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.187), index=0
  %get-tuple-element.1507 = s32[4096,2]{1,0} get-tuple-element(%custom-call.187), index=1
  %add.4492 = s32[4096,2]{1,0} add(%get-tuple-element.1507, %broadcast.5420)
  %sort.262 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1506, %add.4492), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.52
  %get-tuple-element.1509 = s32[4096,2]{1,0} get-tuple-element(%sort.262), index=1
  %slice.630 = s32[4096,2]{1,0} slice(%get-tuple-element.1509), slice={[0:4096], [0:2]}
  %all-gather.372 = s32[32768,2]{1,0} all-gather(%slice.630), channel_id=871, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1818 = s32[4096,2]{1,0} dynamic-slice(%all-gather.372, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.18419 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1818)
  %compare.3227 = pred[1,4096,2]{2,1,0} compare(%reshape.18419, %broadcast.5421), direction=LT
  %add.4493 = s32[1,4096,2]{2,1,0} add(%reshape.18419, %broadcast.5422)
  %select.2048 = s32[1,4096,2]{2,1,0} select(%compare.3227, %add.4493, %reshape.18419)
  %reshape.18420 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2048)
  %concatenate.374 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2138, %reshape.18420), dimensions={3}
  %subtract.570 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.374, %broadcast.5433)
  %scatter.854 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.570, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_870.22943
  %gather.72 = u32[1,4096,2]{2,1,0} gather(%scatter.854, %subtract.570), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3228 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.72), direction=EQ
  %get-tuple-element.1508 = bf16[4096,2]{1,0} get-tuple-element(%sort.262), index=0
  %slice.629 = bf16[4096,2]{1,0} slice(%get-tuple-element.1508), slice={[0:4096], [0:2]}
  %all-gather.371 = bf16[32768,2]{1,0} all-gather(%slice.629), channel_id=870, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1828 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.371, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2151 = f32[4096,2]{1,0} convert(%dynamic-slice.1828)
  %reshape.18437 = f32[1,4096,2]{2,1,0} reshape(%convert.2151)
  %reduce.772 = f32[4096]{0} reduce(%convert.2151, %constant.4073), dimensions={1}, to_apply=%region_868.22893
  %reshape.18438 = f32[1,4096]{1,0} reshape(%reduce.772)
  %broadcast.9058 = f32[1,4096,2]{2,1,0} broadcast(%reshape.18438), dimensions={0,1}
  %subtract.569 = f32[1,4096,2]{2,1,0} subtract(%reshape.18437, %broadcast.9058)
  %exponential.231 = f32[1,4096,2]{2,1,0} exponential(%subtract.569)
  %reduce.773 = f32[1,4096]{1,0} reduce(%exponential.231, %constant.3956), dimensions={2}, to_apply=%region_869.22905
  %broadcast.9059 = f32[1,4096,2]{2,1,0} broadcast(%reduce.773), dimensions={0,1}
  %divide.920 = f32[1,4096,2]{2,1,0} divide(%exponential.231, %broadcast.9059)
  %convert.2152 = bf16[1,4096,2]{2,1,0} convert(%divide.920)
  %select.2049 = bf16[1,4096,2]{2,1,0} select(%compare.3228, %convert.2152, %broadcast.5432)
  %scatter.855 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.570, %select.2049), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_871.22952
  %broadcast.9061 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.18419), dimensions={0,1,2}
  %iota.2146 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3229 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.9061, %iota.2146), direction=EQ
  %convert.2153 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3229)
  %reshape.18448 = s32[1,8192,8]{2,1,0} reshape(%convert.2153)
  %copy.3734 = s32[1,8192,8]{2,1,0} copy(%reshape.18448)
  %reduce-window.389 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3734, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.19
  %reshape.18450 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.389)
  %copy.3735 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.18450)
  %compare.3230 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3735, %broadcast.5435), direction=LE
  %select.2050 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3230, %convert.2153, %broadcast.5436)
  %reduce.774 = s32[1,4096,8]{2,1,0} reduce(%select.2050, %constant.3783), dimensions={2}, to_apply=%region_872.22966
  %convert.2154 = bf16[1,4096,8]{2,1,0} convert(%reduce.774)
  %multiply.5026 = bf16[1,4096,8]{2,1,0} multiply(%scatter.855, %convert.2154)
  %broadcast.9063 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5026), dimensions={0,1,2}
  %multiply.5027 = s32[1,8192,8]{2,1,0} multiply(%copy.3734, %reduce-window.389)
  %reshape.18451 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.5027)
  %reduce.775 = s32[1,4096,8]{2,1,0} reduce(%reshape.18451, %constant.3783), dimensions={2}, to_apply=%region_873.22975
  %multiply.5028 = s32[1,4096,8]{2,1,0} multiply(%reduce.775, %reduce.774)
  %broadcast.9064 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5028), dimensions={0,1,2}
  %iota.2147 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3231 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.9064, %iota.2147), direction=EQ
  %convert.2155 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3231)
  %convert.2157 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2155)
  %multiply.5029 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.9063, %convert.2157)
  %slice.631 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.5029), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3232 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.631, %broadcast.5439), direction=NE
  %copy.3736 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3232)
  %convert.2158 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3736)
  %dot.890 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2158, %copy.3732), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.18454 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.890)
  %all-to-all.144 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18454), channel_id=878, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.236 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.144), dimensions={1,0,2,3,4}
  %reshape.18455 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.236)
  %transpose.237 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.18455), dimensions={1,0,2,3}
  %copy.3737 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.237)
  %get-tuple-element.1514 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.20), index=1
  %copy.3738 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1514)
  %dot.891 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3737, %copy.3738), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3739 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.891)
  %negate.271 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3739)
  %exponential.232 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.271)
  %add.4498 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.232, %broadcast.5440)
  %divide.921 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4498)
  %multiply.5033 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3739, %divide.921)
  %copy.3740 = bf16[1,4096,4096]{2,1,0} copy(%copy.3722)
  %copy.3741 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.631)
  %dot.892 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3740, %copy.3741), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.18458 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.892)
  %all-to-all.145 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.18458), channel_id=879, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.238 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.145), dimensions={2,0,1,3,4}
  %reshape.18460 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.238)
  %transpose.239 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.18460), dimensions={2,0,3,1}
  %copy.3742 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.239)
  %get-tuple-element.1515 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.20), index=3
  %copy.3743 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1515)
  %dot.893 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3742, %copy.3743), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.5037 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5033, %dot.893)
  %copy.3744 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.5037)
  %get-tuple-element.1516 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.20), index=2
  %copy.3745 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1516)
  %dot.894 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3744, %copy.3745), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.895 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3737, %copy.3745), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3746 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.895)
  %multiply.5038 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.893, %copy.3746)
  %multiply.5039 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5038, %divide.921)
  %multiply.5040 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3739, %multiply.5038)
  %subtract.571 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.921)
  %multiply.5041 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.921, %subtract.571)
  %multiply.5043 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5040, %multiply.5041)
  %add.4499 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.5039, %multiply.5043)
  %copy.3747 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4499)
  %dot.896 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3747, %copy.3738), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4501 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.894, %dot.896)
  %copy.3748 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4501)
  %transpose.240 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3748), dimensions={1,0,2,3}
  %reshape.18463 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.240)
  %all-to-all.146 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18463), channel_id=880, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.241 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.146), dimensions={1,0,2,3,4}
  %reshape.18464 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.241)
  %dot.897 = bf16[1,4096,4096]{2,1,0} dot(%convert.2158, %reshape.18464), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.18466 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1818)
  %compare.3234 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.374, %broadcast.7265), direction=GE
  %compare.3235 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.374, %broadcast.7267), direction=LE
  %and.429 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3234, %compare.3235)
  %reduce.776 = pred[1,4096,2]{2,1,0} reduce(%and.429, %constant.4025), dimensions={3}, to_apply=%region_876.23060
  %multiply.5046 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5033, %copy.3746)
  %dot.898 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.5046, %copy.3743), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3749 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.898)
  %reshape.18469 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3749)
  %all-to-all.147 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18469), channel_id=881, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.242 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.147), dimensions={1,0,2,3,4}
  %reshape.18470 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.242)
  %dot.899 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3740, %reshape.18470), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3750 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.899)
  %pad.20 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3750, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.5050 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.20, %convert.2157)
  %reduce.777 = bf16[1,4096,8]{2,1,0} reduce(%multiply.5050, %constant.3795), dimensions={3}, to_apply=%region_874.23042
  %multiply.5051 = bf16[1,4096,8]{2,1,0} multiply(%reduce.777, %convert.2154)
  %gather.73 = bf16[1,4096,2]{2,1,0} gather(%multiply.5051, %subtract.570), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2051 = bf16[1,4096,2]{2,1,0} select(%reduce.776, %gather.73, %broadcast.5432)
  %select.2052 = bf16[1,4096,2]{2,1,0} select(%compare.3228, %select.2051, %broadcast.5432)
  %convert.2161 = f32[1,4096,2]{2,1,0} convert(%select.2052)
  %divide.922 = f32[1,4096,2]{2,1,0} divide(%convert.2161, %broadcast.9059)
  %multiply.5052 = f32[1,4096]{1,0} multiply(%reduce.773, %reduce.773)
  %divide.923 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.5052)
  %broadcast.9070 = f32[1,4096,2]{2,1,0} broadcast(%divide.923), dimensions={0,1}
  %multiply.5053 = f32[1,4096,2]{2,1,0} multiply(%convert.2161, %broadcast.9070)
  %multiply.5054 = f32[1,4096,2]{2,1,0} multiply(%multiply.5053, %exponential.231)
  %reduce.778 = f32[1,4096]{1,0} reduce(%multiply.5054, %constant.3956), dimensions={2}, to_apply=%region_877.23074
  %negate.272 = f32[1,4096]{1,0} negate(%reduce.778)
  %broadcast.9071 = f32[1,4096,2]{2,1,0} broadcast(%negate.272), dimensions={0,1}
  %add.4502 = f32[1,4096,2]{2,1,0} add(%divide.922, %broadcast.9071)
  %multiply.5055 = f32[1,4096,2]{2,1,0} multiply(%add.4502, %exponential.231)
  %convert.2162 = bf16[1,4096,2]{2,1,0} convert(%multiply.5055)
  %scatter.856 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.18466, %convert.2162), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_879.23094
  %copy.3751 = bf16[1,4096,8]{2,1,0} copy(%scatter.856)
  %dot.900 = bf16[1,4096,4096]{2,1,0} dot(%copy.3751, %all-gather.370), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4503 = bf16[1,4096,4096]{1,2,0} add(%dot.897, %dot.900)
  %copy.3752 = bf16[1,4096,4096]{2,1,0} copy(%add.4503)
  %multiply.5056 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3752, %broadcast.9051)
  %convert.2163 = f32[1,4096,4096]{2,1,0} convert(%multiply.5056)
  %multiply.5057 = f32[1,4096,4096]{2,1,0} multiply(%convert.2163, %broadcast.9050)
  %multiply.5058 = f32[1,4096,4096]{2,1,0} multiply(%convert.2147, %convert.2163)
  %reduce.779 = f32[1,4096]{1,0} reduce(%multiply.5058, %constant.3956), dimensions={2}, to_apply=%region_882.23123
  %reshape.18484 = f32[1,4096,1]{2,1,0} reshape(%reduce.779)
  %divide.924 = f32[1,4096,1]{2,1,0} divide(%rsqrt.170, %reshape.18414)
  %multiply.5059 = f32[1,4096,1]{2,1,0} multiply(%divide.924, %broadcast.7210)
  %multiply.5060 = f32[1,4096,1]{2,1,0} multiply(%reshape.18484, %multiply.5059)
  %multiply.5061 = f32[1,4096,1]{2,1,0} multiply(%multiply.5060, %broadcast.7211)
  %reshape.18485 = f32[1,4096]{1,0} reshape(%multiply.5061)
  %broadcast.9075 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18485), dimensions={0,1}
  %multiply.5062 = f32[1,4096,4096]{2,1,0} multiply(%convert.2147, %broadcast.9075)
  %add.4504 = f32[1,4096,4096]{2,1,0} add(%multiply.5057, %multiply.5062)
  %convert.2164 = bf16[1,4096,4096]{2,1,0} convert(%add.4504)
  %add.4505 = bf16[1,4096,4096]{2,1,0} add(%copy.3722, %convert.2164)
  %get-tuple-element.1517 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.186), index=1
  %get-tuple-element.1518 = u32[2,4]{1,0} get-tuple-element(%custom-call.186), index=2
  %copy.3753 = bf16[1,4096,4096]{2,1,0} copy(%add.4505)
  %dot.901 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3753, %all-gather.369), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3754 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.901)
  %custom-call.188 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3726, %copy.3728, %copy.3729, %constant.3999, %get-tuple-element.1517, /*index=5*/%get-tuple-element.1518, %get-tuple-element.1502, %copy.3754, %scatter.848, %scatter.853, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1525 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.188), index=2
  %copy.3755 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1525)
  %dot.902 = bf16[1,4096,4096]{2,1,0} dot(%copy.3755, %all-gather.368), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1526 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.188), index=1
  %copy.3756 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1526)
  %slice.632 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3756), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.5064 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.632, %broadcast.9030)
  %slice.633 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3756), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.5066 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.633, %broadcast.9029)
  %add.4519 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5064, %multiply.5066)
  %multiply.5067 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.632, %broadcast.9029)
  %negate.273 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.633)
  %multiply.5068 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.273, %broadcast.9030)
  %add.4520 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5067, %multiply.5068)
  %concatenate.379 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4519, %add.4520), dimensions={3}
  %dot.903 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.379, %all-gather.367), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4521 = bf16[1,4096,4096]{2,1,0} add(%dot.902, %dot.903)
  %copy.3757 = bf16[1,4096,4096]{2,1,0} copy(%add.4521)
  %get-tuple-element.1527 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.188), index=0
  %copy.3758 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1527)
  %slice.634 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3758), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.5070 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.634, %broadcast.9023)
  %slice.635 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3758), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.5072 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.635, %broadcast.9021)
  %add.4522 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5070, %multiply.5072)
  %multiply.5073 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.634, %broadcast.9021)
  %negate.274 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.635)
  %multiply.5074 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.274, %broadcast.9023)
  %add.4524 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5073, %multiply.5074)
  %concatenate.380 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4522, %add.4524), dimensions={3}
  %dot.904 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.380, %all-gather.366), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3759 = bf16[1,4096,4096]{2,1,0} copy(%dot.904)
  %add.4525 = bf16[1,4096,4096]{2,1,0} add(%copy.3757, %copy.3759)
  %copy.3760 = bf16[1,4096,4096]{2,1,0} copy(%add.4525)
  %multiply.5075 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3760, %broadcast.9016)
  %convert.2167 = f32[1,4096,4096]{2,1,0} convert(%multiply.5075)
  %multiply.5076 = f32[1,4096,4096]{2,1,0} multiply(%convert.2167, %broadcast.9015)
  %multiply.5077 = f32[1,4096,4096]{2,1,0} multiply(%convert.2132, %convert.2167)
  %reduce.780 = f32[1,4096]{1,0} reduce(%multiply.5077, %constant.3956), dimensions={2}, to_apply=%region_886.23234
  %reshape.18533 = f32[1,4096,1]{2,1,0} reshape(%reduce.780)
  %divide.927 = f32[1,4096,1]{2,1,0} divide(%rsqrt.169, %reshape.18364)
  %multiply.5078 = f32[1,4096,1]{2,1,0} multiply(%divide.927, %broadcast.7210)
  %multiply.5079 = f32[1,4096,1]{2,1,0} multiply(%reshape.18533, %multiply.5078)
  %multiply.5080 = f32[1,4096,1]{2,1,0} multiply(%multiply.5079, %broadcast.7211)
  %reshape.18534 = f32[1,4096]{1,0} reshape(%multiply.5080)
  %broadcast.9094 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18534), dimensions={0,1}
  %multiply.5081 = f32[1,4096,4096]{2,1,0} multiply(%convert.2132, %broadcast.9094)
  %add.4526 = f32[1,4096,4096]{2,1,0} add(%multiply.5076, %multiply.5081)
  %convert.2168 = bf16[1,4096,4096]{2,1,0} convert(%add.4526)
  %add.4527 = bf16[1,4096,4096]{2,1,0} add(%add.4505, %convert.2168)
  %copy.3761 = bf16[1,4096,4096]{2,1,0} copy(%add.4527)
  %tuple.328 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.113, %param.114, %param.115, %param.116, %param.112, /*index=5*/%param.107, %param.109, %param.111, %param.108, %param.110, /*index=10*/%copy.2390, %param.10, %param.7, %copy.3761)
  %opt-barrier.21 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.328)
  %get-tuple-element.1528 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.21), index=13
  %copy.3762 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1528)
  %iota.2149 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1529 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.21), index=10
  %copy.3763 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1529)
  %convert.2170 = f32[1,4096,4096]{2,1,0} convert(%copy.3763)
  %multiply.5083 = f32[1,4096,4096]{2,1,0} multiply(%convert.2170, %convert.2170)
  %reduce.781 = f32[1,4096]{1,0} reduce(%multiply.5083, %constant.3956), dimensions={2}, to_apply=%region_888.23277
  %multiply.5084 = f32[1,4096]{1,0} multiply(%reduce.781, %broadcast.5380)
  %add.4529 = f32[1,4096]{1,0} add(%multiply.5084, %broadcast.5381)
  %reshape.18536 = f32[1,4096,1]{2,1,0} reshape(%add.4529)
  %rsqrt.171 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.18536)
  %reshape.18537 = f32[1,4096]{1,0} reshape(%rsqrt.171)
  %broadcast.9098 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18537), dimensions={0,1}
  %multiply.5085 = f32[1,4096,4096]{2,1,0} multiply(%convert.2170, %broadcast.9098)
  %convert.2172 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5085)
  %get-tuple-element.1530 = bf16[4096]{0} get-tuple-element(%opt-barrier.21), index=5
  %broadcast.9099 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1530), dimensions={2}
  %multiply.5086 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2172, %broadcast.9099)
  %copy.3764 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5086)
  %copy.3765 = bf16[1,4096,4096]{2,1,0} copy(%copy.3764)
  %get-tuple-element.1531 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.21), index=8
  %all-gather.373 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1531), channel_id=884, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.905 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3765, %all-gather.373), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.636 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.905), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1532 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.21), index=12
  %convert.2173 = f32[1,4096]{1,0} convert(%get-tuple-element.1532)
  %broadcast.9100 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2173), dimensions={0,1}
  %divide.928 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9100, %broadcast.5388)
  %cosine.107 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.928)
  %convert.2175 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.107)
  %reshape.18539 = bf16[1,4096,64]{2,1,0} reshape(%convert.2175)
  %broadcast.9103 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.18539), dimensions={0,1,3}
  %multiply.5090 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.636, %broadcast.9103)
  %slice.637 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.905), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.106 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.928)
  %convert.2176 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.106)
  %reshape.18541 = bf16[1,4096,64]{2,1,0} reshape(%convert.2176)
  %broadcast.9104 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.18541), dimensions={0,1,3}
  %multiply.5092 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.637, %broadcast.9104)
  %subtract.575 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.5090, %multiply.5092)
  %multiply.5093 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.637, %broadcast.9103)
  %multiply.5094 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.636, %broadcast.9104)
  %add.4530 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5093, %multiply.5094)
  %concatenate.381 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.575, %add.4530), dimensions={3}
  %copy.3766 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.381)
  %get-tuple-element.1533 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.21), index=6
  %all-gather.374 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1533), channel_id=885, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.906 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3765, %all-gather.374), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.638 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.906), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.9110 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.18539), dimensions={0,1,3}
  %multiply.5098 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.638, %broadcast.9110)
  %slice.639 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.906), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.9111 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.18541), dimensions={0,1,3}
  %multiply.5100 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.639, %broadcast.9111)
  %subtract.576 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.5098, %multiply.5100)
  %multiply.5101 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.639, %broadcast.9110)
  %multiply.5102 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.638, %broadcast.9111)
  %add.4531 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5101, %multiply.5102)
  %concatenate.382 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.576, %add.4531), dimensions={3}
  %copy.3768 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.382)
  %get-tuple-element.1534 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.21), index=9
  %all-gather.375 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1534), channel_id=886, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.907 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3765, %all-gather.375), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3769 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.907)
  %get-tuple-element.1535 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.21), index=11
  %broadcast.9114 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1535), dimensions={0,1}
  %broadcast.9115 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1535), dimensions={0,2}
  %compare.3265 = pred[1,4096,4096]{2,1,0} compare(%broadcast.9114, %broadcast.9115), direction=EQ
  %and.434 = pred[1,4096,4096]{2,1,0} and(%compare.3265, %broadcast.5406)
  %select.2074 = f32[1,4096,4096]{2,1,0} select(%and.434, %broadcast.5407, %broadcast.5408)
  %compare.3267 = pred[1,4096,4096]{2,1,0} compare(%select.2074, %broadcast.5407), direction=NE
  %not.117 = pred[1,4096,4096]{2,1,0} not(%compare.3267)
  %convert.2181 = s32[1,4096,4096]{2,1,0} convert(%not.117)
  %reduce.782 = s32[1,4096]{1,0} reduce(%convert.2181, %constant.3783), dimensions={1}, to_apply=%region_889.23411
  %reshape.18551 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.782)
  %slice.640 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.18551), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.18553 = s32[1,1]{1,0} reshape(%slice.640)
  %reshape.18571 = s32[1]{0} reshape(%reshape.18553)
  %compare.3281 = pred[1]{0} compare(%reshape.18571, %constant.4022), direction=LT
  %select.2084 = s32[1]{0} select(%compare.3281, %reshape.11470, %reshape.18571)
  %scatter.871 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2084), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.53
  %reduce.783 = s32[1,4096]{1,0} reduce(%convert.2181, %constant.3783), dimensions={2}, to_apply=%region_890.23419
  %reshape.18555 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.783)
  %reduce.784 = s32[1,1]{1,0} reduce(%reshape.18555, %constant.4014), dimensions={3,2}, to_apply=%region_891.23424
  %reshape.18590 = s32[1]{0} reshape(%reduce.784)
  %compare.3295 = pred[1]{0} compare(%reshape.18590, %constant.4022), direction=LT
  %select.2094 = s32[1]{0} select(%compare.3295, %reshape.11470, %reshape.18590)
  %scatter.876 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2094), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.53
  %custom-call.189 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3766, %copy.3768, %copy.3769, %constant.3999, %scatter.871, /*index=5*/%scatter.876, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1541 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.189), index=0
  %copy.3770 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1541)
  %get-tuple-element.1542 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.21), index=7
  %all-gather.376 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1542), channel_id=887, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.908 = bf16[1,4096,4096]{2,1,0} dot(%copy.3770, %all-gather.376), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3771 = bf16[1,4096,4096]{2,1,0} copy(%dot.908)
  %add.4544 = bf16[1,4096,4096]{2,1,0} add(%copy.3763, %copy.3771)
  %convert.2185 = f32[1,4096,4096]{2,1,0} convert(%add.4544)
  %multiply.5104 = f32[1,4096,4096]{2,1,0} multiply(%convert.2185, %convert.2185)
  %reduce.785 = f32[1,4096]{1,0} reduce(%multiply.5104, %constant.3956), dimensions={2}, to_apply=%region_892.23440
  %multiply.5105 = f32[1,4096]{1,0} multiply(%reduce.785, %broadcast.5380)
  %add.4545 = f32[1,4096]{1,0} add(%multiply.5105, %broadcast.5381)
  %reshape.18592 = f32[1,4096,1]{2,1,0} reshape(%add.4545)
  %rsqrt.172 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.18592)
  %reshape.18593 = f32[1,4096]{1,0} reshape(%rsqrt.172)
  %broadcast.9127 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18593), dimensions={0,1}
  %multiply.5106 = f32[1,4096,4096]{2,1,0} multiply(%convert.2185, %broadcast.9127)
  %convert.2186 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5106)
  %get-tuple-element.1543 = bf16[4096]{0} get-tuple-element(%opt-barrier.21), index=4
  %broadcast.9128 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1543), dimensions={2}
  %multiply.5107 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2186, %broadcast.9128)
  %copy.3772 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5107)
  %get-tuple-element.1544 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.21), index=0
  %all-gather.377 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1544), channel_id=888, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.909 = bf16[1,4096,8]{2,1,0} dot(%copy.3772, %all-gather.377), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3773 = bf16[1,4096,8]{2,1,0} copy(%dot.909)
  %reshape.18594 = bf16[4096,8]{1,0} reshape(%copy.3773)
  %custom-call.190 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.18594), custom_call_target="TopK", called_computations={%compare-greater-than.53.clone}
  %get-tuple-element.1545 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.190), index=0
  %get-tuple-element.1546 = s32[4096,2]{1,0} get-tuple-element(%custom-call.190), index=1
  %add.4546 = s32[4096,2]{1,0} add(%get-tuple-element.1546, %broadcast.5420)
  %sort.267 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1545, %add.4546), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.53
  %get-tuple-element.1548 = s32[4096,2]{1,0} get-tuple-element(%sort.267), index=1
  %slice.642 = s32[4096,2]{1,0} slice(%get-tuple-element.1548), slice={[0:4096], [0:2]}
  %all-gather.379 = s32[32768,2]{1,0} all-gather(%slice.642), channel_id=890, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1862 = s32[4096,2]{1,0} dynamic-slice(%all-gather.379, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.18597 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1862)
  %compare.3296 = pred[1,4096,2]{2,1,0} compare(%reshape.18597, %broadcast.5421), direction=LT
  %add.4547 = s32[1,4096,2]{2,1,0} add(%reshape.18597, %broadcast.5422)
  %select.2095 = s32[1,4096,2]{2,1,0} select(%compare.3296, %add.4547, %reshape.18597)
  %reshape.18598 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2095)
  %concatenate.383 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2149, %reshape.18598), dimensions={3}
  %subtract.582 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.383, %broadcast.5433)
  %scatter.877 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.582, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_895.23519
  %gather.74 = u32[1,4096,2]{2,1,0} gather(%scatter.877, %subtract.582), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3297 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.74), direction=EQ
  %get-tuple-element.1547 = bf16[4096,2]{1,0} get-tuple-element(%sort.267), index=0
  %slice.641 = bf16[4096,2]{1,0} slice(%get-tuple-element.1547), slice={[0:4096], [0:2]}
  %all-gather.378 = bf16[32768,2]{1,0} all-gather(%slice.641), channel_id=889, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1872 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.378, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2189 = f32[4096,2]{1,0} convert(%dynamic-slice.1872)
  %reshape.18616 = f32[1,4096,2]{2,1,0} reshape(%convert.2189)
  %reduce.786 = f32[4096]{0} reduce(%convert.2189, %constant.4073), dimensions={1}, to_apply=%region_893.23469
  %reshape.18617 = f32[1,4096]{1,0} reshape(%reduce.786)
  %broadcast.9139 = f32[1,4096,2]{2,1,0} broadcast(%reshape.18617), dimensions={0,1}
  %subtract.581 = f32[1,4096,2]{2,1,0} subtract(%reshape.18616, %broadcast.9139)
  %exponential.233 = f32[1,4096,2]{2,1,0} exponential(%subtract.581)
  %reduce.787 = f32[1,4096]{1,0} reduce(%exponential.233, %constant.3956), dimensions={2}, to_apply=%region_894.23481
  %broadcast.9140 = f32[1,4096,2]{2,1,0} broadcast(%reduce.787), dimensions={0,1}
  %divide.932 = f32[1,4096,2]{2,1,0} divide(%exponential.233, %broadcast.9140)
  %convert.2190 = bf16[1,4096,2]{2,1,0} convert(%divide.932)
  %select.2096 = bf16[1,4096,2]{2,1,0} select(%compare.3297, %convert.2190, %broadcast.5432)
  %scatter.878 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.582, %select.2096), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_896.23528
  %broadcast.9142 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.18597), dimensions={0,1,2}
  %iota.2158 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3298 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.9142, %iota.2158), direction=EQ
  %convert.2191 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3298)
  %reshape.18626 = s32[1,8192,8]{2,1,0} reshape(%convert.2191)
  %copy.3774 = s32[1,8192,8]{2,1,0} copy(%reshape.18626)
  %reduce-window.394 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3774, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.20
  %reshape.18629 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.394)
  %copy.3775 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.18629)
  %compare.3299 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3775, %broadcast.5435), direction=LE
  %select.2097 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3299, %convert.2191, %broadcast.5436)
  %reduce.788 = s32[1,4096,8]{2,1,0} reduce(%select.2097, %constant.3783), dimensions={2}, to_apply=%region_897.23542
  %convert.2192 = bf16[1,4096,8]{2,1,0} convert(%reduce.788)
  %multiply.5113 = bf16[1,4096,8]{2,1,0} multiply(%scatter.878, %convert.2192)
  %broadcast.9144 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5113), dimensions={0,1,2}
  %multiply.5114 = s32[1,8192,8]{2,1,0} multiply(%copy.3774, %reduce-window.394)
  %reshape.18631 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.5114)
  %reduce.789 = s32[1,4096,8]{2,1,0} reduce(%reshape.18631, %constant.3783), dimensions={2}, to_apply=%region_898.23551
  %multiply.5115 = s32[1,4096,8]{2,1,0} multiply(%reduce.789, %reduce.788)
  %broadcast.9145 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5115), dimensions={0,1,2}
  %iota.2159 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3300 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.9145, %iota.2159), direction=EQ
  %convert.2193 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3300)
  %convert.2194 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2193)
  %multiply.5116 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.9144, %convert.2194)
  %slice.643 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.5116), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3301 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.643, %broadcast.5439), direction=NE
  %copy.3776 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3301)
  %convert.2195 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3776)
  %dot.910 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2195, %copy.3772), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.18634 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.910)
  %all-to-all.148 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18634), channel_id=897, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.243 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.148), dimensions={1,0,2,3,4}
  %reshape.18635 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.243)
  %transpose.244 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.18635), dimensions={1,0,2,3}
  %copy.3777 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.244)
  %get-tuple-element.1553 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.21), index=1
  %copy.3778 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1553)
  %dot.911 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3777, %copy.3778), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3779 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.911)
  %negate.275 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3779)
  %exponential.234 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.275)
  %add.4552 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.234, %broadcast.5440)
  %divide.933 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4552)
  %multiply.5121 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3779, %divide.933)
  %copy.3780 = bf16[1,4096,4096]{2,1,0} copy(%copy.3762)
  %copy.3781 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.643)
  %dot.912 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3780, %copy.3781), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.18638 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.912)
  %all-to-all.149 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.18638), channel_id=898, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.245 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.149), dimensions={2,0,1,3,4}
  %reshape.18639 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.245)
  %transpose.246 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.18639), dimensions={2,0,3,1}
  %copy.3782 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.246)
  %get-tuple-element.1554 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.21), index=3
  %copy.3783 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1554)
  %dot.913 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3782, %copy.3783), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.5124 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5121, %dot.913)
  %copy.3784 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.5124)
  %get-tuple-element.1555 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.21), index=2
  %copy.3785 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1555)
  %dot.914 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3784, %copy.3785), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.915 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3777, %copy.3785), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3786 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.915)
  %multiply.5125 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.913, %copy.3786)
  %multiply.5128 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5125, %divide.933)
  %multiply.5129 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3779, %multiply.5125)
  %subtract.583 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.933)
  %multiply.5130 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.933, %subtract.583)
  %multiply.5131 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5129, %multiply.5130)
  %add.4553 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.5128, %multiply.5131)
  %copy.3787 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4553)
  %dot.916 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3787, %copy.3778), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4554 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.914, %dot.916)
  %copy.3788 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4554)
  %transpose.247 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3788), dimensions={1,0,2,3}
  %reshape.18642 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.247)
  %all-to-all.150 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18642), channel_id=899, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.248 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.150), dimensions={1,0,2,3,4}
  %reshape.18643 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.248)
  %dot.917 = bf16[1,4096,4096]{2,1,0} dot(%convert.2195, %reshape.18643), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.18645 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1862)
  %compare.3303 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.383, %broadcast.7265), direction=GE
  %compare.3304 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.383, %broadcast.7267), direction=LE
  %and.439 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3303, %compare.3304)
  %reduce.790 = pred[1,4096,2]{2,1,0} reduce(%and.439, %constant.4025), dimensions={3}, to_apply=%region_901.23636
  %multiply.5135 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5121, %copy.3786)
  %dot.918 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.5135, %copy.3783), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3789 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.918)
  %reshape.18647 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3789)
  %all-to-all.151 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18647), channel_id=900, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.249 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.151), dimensions={1,0,2,3,4}
  %reshape.18648 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.249)
  %dot.919 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3780, %reshape.18648), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3790 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.919)
  %pad.21 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3790, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.5139 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.21, %convert.2194)
  %reduce.791 = bf16[1,4096,8]{2,1,0} reduce(%multiply.5139, %constant.3795), dimensions={3}, to_apply=%region_899.23618
  %multiply.5140 = bf16[1,4096,8]{2,1,0} multiply(%reduce.791, %convert.2192)
  %gather.75 = bf16[1,4096,2]{2,1,0} gather(%multiply.5140, %subtract.582), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2098 = bf16[1,4096,2]{2,1,0} select(%reduce.790, %gather.75, %broadcast.5432)
  %select.2099 = bf16[1,4096,2]{2,1,0} select(%compare.3297, %select.2098, %broadcast.5432)
  %convert.2198 = f32[1,4096,2]{2,1,0} convert(%select.2099)
  %divide.934 = f32[1,4096,2]{2,1,0} divide(%convert.2198, %broadcast.9140)
  %multiply.5142 = f32[1,4096]{1,0} multiply(%reduce.787, %reduce.787)
  %divide.935 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.5142)
  %broadcast.9151 = f32[1,4096,2]{2,1,0} broadcast(%divide.935), dimensions={0,1}
  %multiply.5143 = f32[1,4096,2]{2,1,0} multiply(%convert.2198, %broadcast.9151)
  %multiply.5144 = f32[1,4096,2]{2,1,0} multiply(%multiply.5143, %exponential.233)
  %reduce.792 = f32[1,4096]{1,0} reduce(%multiply.5144, %constant.3956), dimensions={2}, to_apply=%region_902.23650
  %negate.276 = f32[1,4096]{1,0} negate(%reduce.792)
  %broadcast.9152 = f32[1,4096,2]{2,1,0} broadcast(%negate.276), dimensions={0,1}
  %add.4556 = f32[1,4096,2]{2,1,0} add(%divide.934, %broadcast.9152)
  %multiply.5145 = f32[1,4096,2]{2,1,0} multiply(%add.4556, %exponential.233)
  %convert.2200 = bf16[1,4096,2]{2,1,0} convert(%multiply.5145)
  %scatter.879 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.18645, %convert.2200), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_904.23670
  %copy.3791 = bf16[1,4096,8]{2,1,0} copy(%scatter.879)
  %dot.920 = bf16[1,4096,4096]{2,1,0} dot(%copy.3791, %all-gather.377), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4557 = bf16[1,4096,4096]{1,2,0} add(%dot.917, %dot.920)
  %copy.3792 = bf16[1,4096,4096]{2,1,0} copy(%add.4557)
  %multiply.5146 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3792, %broadcast.9128)
  %convert.2201 = f32[1,4096,4096]{2,1,0} convert(%multiply.5146)
  %multiply.5147 = f32[1,4096,4096]{2,1,0} multiply(%convert.2201, %broadcast.9127)
  %multiply.5148 = f32[1,4096,4096]{2,1,0} multiply(%convert.2185, %convert.2201)
  %reduce.793 = f32[1,4096]{1,0} reduce(%multiply.5148, %constant.3956), dimensions={2}, to_apply=%region_907.23699
  %reshape.18661 = f32[1,4096,1]{2,1,0} reshape(%reduce.793)
  %divide.936 = f32[1,4096,1]{2,1,0} divide(%rsqrt.172, %reshape.18592)
  %multiply.5149 = f32[1,4096,1]{2,1,0} multiply(%divide.936, %broadcast.7210)
  %multiply.5150 = f32[1,4096,1]{2,1,0} multiply(%reshape.18661, %multiply.5149)
  %multiply.5151 = f32[1,4096,1]{2,1,0} multiply(%multiply.5150, %broadcast.7211)
  %reshape.18662 = f32[1,4096]{1,0} reshape(%multiply.5151)
  %broadcast.9160 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18662), dimensions={0,1}
  %multiply.5152 = f32[1,4096,4096]{2,1,0} multiply(%convert.2185, %broadcast.9160)
  %add.4558 = f32[1,4096,4096]{2,1,0} add(%multiply.5147, %multiply.5152)
  %convert.2202 = bf16[1,4096,4096]{2,1,0} convert(%add.4558)
  %add.4559 = bf16[1,4096,4096]{2,1,0} add(%copy.3762, %convert.2202)
  %get-tuple-element.1556 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.189), index=1
  %get-tuple-element.1557 = u32[2,4]{1,0} get-tuple-element(%custom-call.189), index=2
  %copy.3793 = bf16[1,4096,4096]{2,1,0} copy(%add.4559)
  %dot.921 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3793, %all-gather.376), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3794 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.921)
  %custom-call.191 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3766, %copy.3768, %copy.3769, %constant.3999, %get-tuple-element.1556, /*index=5*/%get-tuple-element.1557, %get-tuple-element.1541, %copy.3794, %scatter.871, %scatter.876, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1564 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.191), index=2
  %copy.3795 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1564)
  %dot.922 = bf16[1,4096,4096]{2,1,0} dot(%copy.3795, %all-gather.375), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1565 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.191), index=1
  %copy.3796 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1565)
  %slice.644 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3796), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.5154 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.644, %broadcast.9111)
  %slice.645 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3796), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.5156 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.645, %broadcast.9110)
  %add.4574 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5154, %multiply.5156)
  %multiply.5158 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.644, %broadcast.9110)
  %negate.277 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.645)
  %multiply.5159 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.277, %broadcast.9111)
  %add.4575 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5158, %multiply.5159)
  %concatenate.388 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4574, %add.4575), dimensions={3}
  %dot.923 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.388, %all-gather.374), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4576 = bf16[1,4096,4096]{2,1,0} add(%dot.922, %dot.923)
  %copy.3797 = bf16[1,4096,4096]{2,1,0} copy(%add.4576)
  %get-tuple-element.1566 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.191), index=0
  %copy.3798 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1566)
  %slice.646 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3798), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.5161 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.646, %broadcast.9104)
  %slice.647 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3798), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.5163 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.647, %broadcast.9103)
  %add.4577 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5161, %multiply.5163)
  %multiply.5164 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.646, %broadcast.9103)
  %negate.278 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.647)
  %multiply.5165 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.278, %broadcast.9104)
  %add.4578 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5164, %multiply.5165)
  %concatenate.389 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4577, %add.4578), dimensions={3}
  %dot.924 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.389, %all-gather.373), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3799 = bf16[1,4096,4096]{2,1,0} copy(%dot.924)
  %add.4579 = bf16[1,4096,4096]{2,1,0} add(%copy.3797, %copy.3799)
  %copy.3800 = bf16[1,4096,4096]{2,1,0} copy(%add.4579)
  %multiply.5166 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3800, %broadcast.9099)
  %convert.2205 = f32[1,4096,4096]{2,1,0} convert(%multiply.5166)
  %multiply.5168 = f32[1,4096,4096]{2,1,0} multiply(%convert.2205, %broadcast.9098)
  %multiply.5169 = f32[1,4096,4096]{2,1,0} multiply(%convert.2170, %convert.2205)
  %reduce.794 = f32[1,4096]{1,0} reduce(%multiply.5169, %constant.3956), dimensions={2}, to_apply=%region_911.23810
  %reshape.18714 = f32[1,4096,1]{2,1,0} reshape(%reduce.794)
  %divide.939 = f32[1,4096,1]{2,1,0} divide(%rsqrt.171, %reshape.18536)
  %multiply.5170 = f32[1,4096,1]{2,1,0} multiply(%divide.939, %broadcast.7210)
  %multiply.5171 = f32[1,4096,1]{2,1,0} multiply(%reshape.18714, %multiply.5170)
  %multiply.5172 = f32[1,4096,1]{2,1,0} multiply(%multiply.5171, %broadcast.7211)
  %reshape.18716 = f32[1,4096]{1,0} reshape(%multiply.5172)
  %broadcast.9185 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18716), dimensions={0,1}
  %multiply.5173 = f32[1,4096,4096]{2,1,0} multiply(%convert.2170, %broadcast.9185)
  %add.4580 = f32[1,4096,4096]{2,1,0} add(%multiply.5168, %multiply.5173)
  %convert.2206 = bf16[1,4096,4096]{2,1,0} convert(%add.4580)
  %add.4581 = bf16[1,4096,4096]{2,1,0} add(%add.4559, %convert.2206)
  %copy.3801 = bf16[1,4096,4096]{2,1,0} copy(%add.4581)
  %tuple.333 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.103, %param.104, %param.105, %param.106, %param.102, /*index=5*/%param.97, %param.99, %param.101, %param.98, %param.100, /*index=10*/%copy.2366, %param.10, %param.7, %copy.3801)
  %opt-barrier.22 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.333)
  %get-tuple-element.1567 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.22), index=13
  %copy.3802 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1567)
  %iota.2161 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1568 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.22), index=10
  %copy.3803 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1568)
  %convert.2207 = f32[1,4096,4096]{2,1,0} convert(%copy.3803)
  %multiply.5175 = f32[1,4096,4096]{2,1,0} multiply(%convert.2207, %convert.2207)
  %reduce.795 = f32[1,4096]{1,0} reduce(%multiply.5175, %constant.3956), dimensions={2}, to_apply=%region_913.23853
  %multiply.5176 = f32[1,4096]{1,0} multiply(%reduce.795, %broadcast.5380)
  %add.4583 = f32[1,4096]{1,0} add(%multiply.5176, %broadcast.5381)
  %reshape.18718 = f32[1,4096,1]{2,1,0} reshape(%add.4583)
  %rsqrt.173 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.18718)
  %reshape.18720 = f32[1,4096]{1,0} reshape(%rsqrt.173)
  %broadcast.9189 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18720), dimensions={0,1}
  %multiply.5177 = f32[1,4096,4096]{2,1,0} multiply(%convert.2207, %broadcast.9189)
  %convert.2208 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5177)
  %get-tuple-element.1569 = bf16[4096]{0} get-tuple-element(%opt-barrier.22), index=5
  %broadcast.9190 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1569), dimensions={2}
  %multiply.5178 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2208, %broadcast.9190)
  %copy.3804 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5178)
  %copy.3805 = bf16[1,4096,4096]{2,1,0} copy(%copy.3804)
  %get-tuple-element.1570 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.22), index=8
  %all-gather.380 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1570), channel_id=903, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.925 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3805, %all-gather.380), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.648 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.925), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1571 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.22), index=12
  %convert.2210 = f32[1,4096]{1,0} convert(%get-tuple-element.1571)
  %broadcast.9191 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2210), dimensions={0,1}
  %divide.940 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9191, %broadcast.5388)
  %cosine.109 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.940)
  %convert.2213 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.109)
  %reshape.18722 = bf16[1,4096,64]{2,1,0} reshape(%convert.2213)
  %broadcast.9197 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.18722), dimensions={0,1,3}
  %multiply.5183 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.648, %broadcast.9197)
  %slice.649 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.925), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.108 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.940)
  %convert.2214 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.108)
  %reshape.18725 = bf16[1,4096,64]{2,1,0} reshape(%convert.2214)
  %broadcast.9199 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.18725), dimensions={0,1,3}
  %multiply.5185 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.649, %broadcast.9199)
  %subtract.587 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.5183, %multiply.5185)
  %multiply.5187 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.649, %broadcast.9197)
  %multiply.5188 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.648, %broadcast.9199)
  %add.4584 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5187, %multiply.5188)
  %concatenate.390 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.587, %add.4584), dimensions={3}
  %copy.3806 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.390)
  %get-tuple-element.1572 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.22), index=6
  %all-gather.381 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1572), channel_id=904, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.926 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3805, %all-gather.381), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.650 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.926), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.9205 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.18722), dimensions={0,1,3}
  %multiply.5192 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.650, %broadcast.9205)
  %slice.651 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.926), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.9207 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.18725), dimensions={0,1,3}
  %multiply.5194 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.651, %broadcast.9207)
  %subtract.588 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.5192, %multiply.5194)
  %multiply.5196 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.651, %broadcast.9205)
  %multiply.5197 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.650, %broadcast.9207)
  %add.4585 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5196, %multiply.5197)
  %concatenate.391 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.588, %add.4585), dimensions={3}
  %copy.3808 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.391)
  %get-tuple-element.1573 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.22), index=9
  %all-gather.382 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1573), channel_id=905, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.927 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3805, %all-gather.382), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3809 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.927)
  %get-tuple-element.1574 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.22), index=11
  %broadcast.9213 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1574), dimensions={0,1}
  %broadcast.9214 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1574), dimensions={0,2}
  %compare.3332 = pred[1,4096,4096]{2,1,0} compare(%broadcast.9213, %broadcast.9214), direction=EQ
  %and.444 = pred[1,4096,4096]{2,1,0} and(%compare.3332, %broadcast.5406)
  %select.2120 = f32[1,4096,4096]{2,1,0} select(%and.444, %broadcast.5407, %broadcast.5408)
  %compare.3334 = pred[1,4096,4096]{2,1,0} compare(%select.2120, %broadcast.5407), direction=NE
  %not.118 = pred[1,4096,4096]{2,1,0} not(%compare.3334)
  %convert.2219 = s32[1,4096,4096]{2,1,0} convert(%not.118)
  %reduce.796 = s32[1,4096]{1,0} reduce(%convert.2219, %constant.3783), dimensions={1}, to_apply=%region_914.23987
  %reshape.18736 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.796)
  %slice.652 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.18736), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.18738 = s32[1,1]{1,0} reshape(%slice.652)
  %reshape.18757 = s32[1]{0} reshape(%reshape.18738)
  %compare.3347 = pred[1]{0} compare(%reshape.18757, %constant.4022), direction=LT
  %select.2130 = s32[1]{0} select(%compare.3347, %reshape.11470, %reshape.18757)
  %scatter.894 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2130), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.54
  %reduce.797 = s32[1,4096]{1,0} reduce(%convert.2219, %constant.3783), dimensions={2}, to_apply=%region_915.23995
  %reshape.18739 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.797)
  %reduce.798 = s32[1,1]{1,0} reduce(%reshape.18739, %constant.4014), dimensions={3,2}, to_apply=%region_916.24000
  %reshape.18775 = s32[1]{0} reshape(%reduce.798)
  %compare.3360 = pred[1]{0} compare(%reshape.18775, %constant.4022), direction=LT
  %select.2140 = s32[1]{0} select(%compare.3360, %reshape.11470, %reshape.18775)
  %scatter.899 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2140), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.54
  %custom-call.192 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3806, %copy.3808, %copy.3809, %constant.3999, %scatter.894, /*index=5*/%scatter.899, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1580 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.192), index=0
  %copy.3810 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1580)
  %get-tuple-element.1581 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.22), index=7
  %all-gather.383 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1581), channel_id=906, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.928 = bf16[1,4096,4096]{2,1,0} dot(%copy.3810, %all-gather.383), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3811 = bf16[1,4096,4096]{2,1,0} copy(%dot.928)
  %add.4598 = bf16[1,4096,4096]{2,1,0} add(%copy.3803, %copy.3811)
  %convert.2223 = f32[1,4096,4096]{2,1,0} convert(%add.4598)
  %multiply.5199 = f32[1,4096,4096]{2,1,0} multiply(%convert.2223, %convert.2223)
  %reduce.799 = f32[1,4096]{1,0} reduce(%multiply.5199, %constant.3956), dimensions={2}, to_apply=%region_917.24016
  %multiply.5200 = f32[1,4096]{1,0} multiply(%reduce.799, %broadcast.5380)
  %add.4599 = f32[1,4096]{1,0} add(%multiply.5200, %broadcast.5381)
  %reshape.18780 = f32[1,4096,1]{2,1,0} reshape(%add.4599)
  %rsqrt.174 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.18780)
  %reshape.18781 = f32[1,4096]{1,0} reshape(%rsqrt.174)
  %broadcast.9231 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18781), dimensions={0,1}
  %multiply.5201 = f32[1,4096,4096]{2,1,0} multiply(%convert.2223, %broadcast.9231)
  %convert.2224 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5201)
  %get-tuple-element.1582 = bf16[4096]{0} get-tuple-element(%opt-barrier.22), index=4
  %broadcast.9234 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1582), dimensions={2}
  %multiply.5202 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2224, %broadcast.9234)
  %copy.3812 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5202)
  %get-tuple-element.1583 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.22), index=0
  %all-gather.384 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1583), channel_id=907, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.929 = bf16[1,4096,8]{2,1,0} dot(%copy.3812, %all-gather.384), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3813 = bf16[1,4096,8]{2,1,0} copy(%dot.929)
  %reshape.18783 = bf16[4096,8]{1,0} reshape(%copy.3813)
  %custom-call.193 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.18783), custom_call_target="TopK", called_computations={%compare-greater-than.54.clone}
  %get-tuple-element.1584 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.193), index=0
  %get-tuple-element.1585 = s32[4096,2]{1,0} get-tuple-element(%custom-call.193), index=1
  %add.4600 = s32[4096,2]{1,0} add(%get-tuple-element.1585, %broadcast.5420)
  %sort.272 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1584, %add.4600), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.54
  %get-tuple-element.1587 = s32[4096,2]{1,0} get-tuple-element(%sort.272), index=1
  %slice.654 = s32[4096,2]{1,0} slice(%get-tuple-element.1587), slice={[0:4096], [0:2]}
  %all-gather.386 = s32[32768,2]{1,0} all-gather(%slice.654), channel_id=909, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1906 = s32[4096,2]{1,0} dynamic-slice(%all-gather.386, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.18787 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1906)
  %compare.3361 = pred[1,4096,2]{2,1,0} compare(%reshape.18787, %broadcast.5421), direction=LT
  %add.4601 = s32[1,4096,2]{2,1,0} add(%reshape.18787, %broadcast.5422)
  %select.2141 = s32[1,4096,2]{2,1,0} select(%compare.3361, %add.4601, %reshape.18787)
  %reshape.18788 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2141)
  %concatenate.392 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2161, %reshape.18788), dimensions={3}
  %subtract.594 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.392, %broadcast.5433)
  %scatter.900 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.594, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_920.24095
  %gather.76 = u32[1,4096,2]{2,1,0} gather(%scatter.900, %subtract.594), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3362 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.76), direction=EQ
  %get-tuple-element.1586 = bf16[4096,2]{1,0} get-tuple-element(%sort.272), index=0
  %slice.653 = bf16[4096,2]{1,0} slice(%get-tuple-element.1586), slice={[0:4096], [0:2]}
  %all-gather.385 = bf16[32768,2]{1,0} all-gather(%slice.653), channel_id=908, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1916 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.385, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2227 = f32[4096,2]{1,0} convert(%dynamic-slice.1916)
  %reshape.18807 = f32[1,4096,2]{2,1,0} reshape(%convert.2227)
  %reduce.800 = f32[4096]{0} reduce(%convert.2227, %constant.4073), dimensions={1}, to_apply=%region_918.24045
  %reshape.18808 = f32[1,4096]{1,0} reshape(%reduce.800)
  %broadcast.9245 = f32[1,4096,2]{2,1,0} broadcast(%reshape.18808), dimensions={0,1}
  %subtract.593 = f32[1,4096,2]{2,1,0} subtract(%reshape.18807, %broadcast.9245)
  %exponential.235 = f32[1,4096,2]{2,1,0} exponential(%subtract.593)
  %reduce.801 = f32[1,4096]{1,0} reduce(%exponential.235, %constant.3956), dimensions={2}, to_apply=%region_919.24057
  %broadcast.9247 = f32[1,4096,2]{2,1,0} broadcast(%reduce.801), dimensions={0,1}
  %divide.944 = f32[1,4096,2]{2,1,0} divide(%exponential.235, %broadcast.9247)
  %convert.2228 = bf16[1,4096,2]{2,1,0} convert(%divide.944)
  %select.2142 = bf16[1,4096,2]{2,1,0} select(%compare.3362, %convert.2228, %broadcast.5432)
  %scatter.901 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.594, %select.2142), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_921.24104
  %broadcast.9249 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.18787), dimensions={0,1,2}
  %iota.2169 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3363 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.9249, %iota.2169), direction=EQ
  %convert.2229 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3363)
  %reshape.18817 = s32[1,8192,8]{2,1,0} reshape(%convert.2229)
  %copy.3814 = s32[1,8192,8]{2,1,0} copy(%reshape.18817)
  %reduce-window.399 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3814, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.21
  %reshape.18819 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.399)
  %copy.3815 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.18819)
  %compare.3364 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3815, %broadcast.5435), direction=LE
  %select.2143 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3364, %convert.2229, %broadcast.5436)
  %reduce.802 = s32[1,4096,8]{2,1,0} reduce(%select.2143, %constant.3783), dimensions={2}, to_apply=%region_922.24118
  %convert.2230 = bf16[1,4096,8]{2,1,0} convert(%reduce.802)
  %multiply.5208 = bf16[1,4096,8]{2,1,0} multiply(%scatter.901, %convert.2230)
  %broadcast.9251 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5208), dimensions={0,1,2}
  %multiply.5209 = s32[1,8192,8]{2,1,0} multiply(%copy.3814, %reduce-window.399)
  %reshape.18820 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.5209)
  %reduce.803 = s32[1,4096,8]{2,1,0} reduce(%reshape.18820, %constant.3783), dimensions={2}, to_apply=%region_923.24127
  %multiply.5210 = s32[1,4096,8]{2,1,0} multiply(%reduce.803, %reduce.802)
  %broadcast.9252 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5210), dimensions={0,1,2}
  %iota.2170 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3365 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.9252, %iota.2170), direction=EQ
  %convert.2231 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3365)
  %convert.2232 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2231)
  %multiply.5211 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.9251, %convert.2232)
  %slice.655 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.5211), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3366 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.655, %broadcast.5439), direction=NE
  %copy.3816 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3366)
  %convert.2233 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3816)
  %dot.930 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2233, %copy.3812), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.18823 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.930)
  %all-to-all.152 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18823), channel_id=916, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.250 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.152), dimensions={1,0,2,3,4}
  %reshape.18824 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.250)
  %transpose.251 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.18824), dimensions={1,0,2,3}
  %copy.3817 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.251)
  %get-tuple-element.1592 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.22), index=1
  %copy.3818 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1592)
  %dot.931 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3817, %copy.3818), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3819 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.931)
  %negate.279 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3819)
  %exponential.236 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.279)
  %add.4606 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.236, %broadcast.5440)
  %divide.945 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4606)
  %multiply.5215 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3819, %divide.945)
  %copy.3820 = bf16[1,4096,4096]{2,1,0} copy(%copy.3802)
  %copy.3821 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.655)
  %dot.932 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3820, %copy.3821), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.18827 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.932)
  %all-to-all.153 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.18827), channel_id=917, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.252 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.153), dimensions={2,0,1,3,4}
  %reshape.18828 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.252)
  %transpose.253 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.18828), dimensions={2,0,3,1}
  %copy.3822 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.253)
  %get-tuple-element.1593 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.22), index=3
  %copy.3823 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1593)
  %dot.933 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3822, %copy.3823), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.5219 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5215, %dot.933)
  %copy.3824 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.5219)
  %get-tuple-element.1594 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.22), index=2
  %copy.3825 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1594)
  %dot.934 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3824, %copy.3825), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.935 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3817, %copy.3825), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3826 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.935)
  %multiply.5220 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.933, %copy.3826)
  %multiply.5222 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5220, %divide.945)
  %multiply.5223 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3819, %multiply.5220)
  %subtract.595 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.945)
  %multiply.5224 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.945, %subtract.595)
  %multiply.5225 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5223, %multiply.5224)
  %add.4607 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.5222, %multiply.5225)
  %copy.3827 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4607)
  %dot.936 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3827, %copy.3818), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4608 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.934, %dot.936)
  %copy.3828 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4608)
  %transpose.254 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3828), dimensions={1,0,2,3}
  %reshape.18831 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.254)
  %all-to-all.154 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18831), channel_id=918, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.255 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.154), dimensions={1,0,2,3,4}
  %reshape.18832 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.255)
  %dot.937 = bf16[1,4096,4096]{2,1,0} dot(%convert.2233, %reshape.18832), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.18835 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1906)
  %compare.3368 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.392, %broadcast.7265), direction=GE
  %compare.3369 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.392, %broadcast.7267), direction=LE
  %and.449 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3368, %compare.3369)
  %reduce.804 = pred[1,4096,2]{2,1,0} reduce(%and.449, %constant.4025), dimensions={3}, to_apply=%region_926.24212
  %multiply.5229 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5215, %copy.3826)
  %dot.938 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.5229, %copy.3823), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3829 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.938)
  %reshape.18837 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3829)
  %all-to-all.155 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.18837), channel_id=919, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.256 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.155), dimensions={1,0,2,3,4}
  %reshape.18838 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.256)
  %dot.939 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3820, %reshape.18838), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3830 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.939)
  %pad.22 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3830, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.5234 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.22, %convert.2232)
  %reduce.805 = bf16[1,4096,8]{2,1,0} reduce(%multiply.5234, %constant.3795), dimensions={3}, to_apply=%region_924.24194
  %multiply.5236 = bf16[1,4096,8]{2,1,0} multiply(%reduce.805, %convert.2230)
  %gather.77 = bf16[1,4096,2]{2,1,0} gather(%multiply.5236, %subtract.594), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2144 = bf16[1,4096,2]{2,1,0} select(%reduce.804, %gather.77, %broadcast.5432)
  %select.2145 = bf16[1,4096,2]{2,1,0} select(%compare.3362, %select.2144, %broadcast.5432)
  %convert.2235 = f32[1,4096,2]{2,1,0} convert(%select.2145)
  %divide.946 = f32[1,4096,2]{2,1,0} divide(%convert.2235, %broadcast.9247)
  %multiply.5237 = f32[1,4096]{1,0} multiply(%reduce.801, %reduce.801)
  %divide.947 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.5237)
  %broadcast.9258 = f32[1,4096,2]{2,1,0} broadcast(%divide.947), dimensions={0,1}
  %multiply.5238 = f32[1,4096,2]{2,1,0} multiply(%convert.2235, %broadcast.9258)
  %multiply.5239 = f32[1,4096,2]{2,1,0} multiply(%multiply.5238, %exponential.235)
  %reduce.806 = f32[1,4096]{1,0} reduce(%multiply.5239, %constant.3956), dimensions={2}, to_apply=%region_927.24226
  %negate.280 = f32[1,4096]{1,0} negate(%reduce.806)
  %broadcast.9259 = f32[1,4096,2]{2,1,0} broadcast(%negate.280), dimensions={0,1}
  %add.4609 = f32[1,4096,2]{2,1,0} add(%divide.946, %broadcast.9259)
  %multiply.5240 = f32[1,4096,2]{2,1,0} multiply(%add.4609, %exponential.235)
  %convert.2236 = bf16[1,4096,2]{2,1,0} convert(%multiply.5240)
  %scatter.902 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.18835, %convert.2236), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_929.24246
  %copy.3831 = bf16[1,4096,8]{2,1,0} copy(%scatter.902)
  %dot.940 = bf16[1,4096,4096]{2,1,0} dot(%copy.3831, %all-gather.384), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4610 = bf16[1,4096,4096]{1,2,0} add(%dot.937, %dot.940)
  %copy.3832 = bf16[1,4096,4096]{2,1,0} copy(%add.4610)
  %multiply.5241 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3832, %broadcast.9234)
  %convert.2237 = f32[1,4096,4096]{2,1,0} convert(%multiply.5241)
  %multiply.5242 = f32[1,4096,4096]{2,1,0} multiply(%convert.2237, %broadcast.9231)
  %multiply.5243 = f32[1,4096,4096]{2,1,0} multiply(%convert.2223, %convert.2237)
  %reduce.807 = f32[1,4096]{1,0} reduce(%multiply.5243, %constant.3956), dimensions={2}, to_apply=%region_932.24275
  %reshape.18854 = f32[1,4096,1]{2,1,0} reshape(%reduce.807)
  %divide.948 = f32[1,4096,1]{2,1,0} divide(%rsqrt.174, %reshape.18780)
  %multiply.5244 = f32[1,4096,1]{2,1,0} multiply(%divide.948, %broadcast.7210)
  %multiply.5245 = f32[1,4096,1]{2,1,0} multiply(%reshape.18854, %multiply.5244)
  %multiply.5246 = f32[1,4096,1]{2,1,0} multiply(%multiply.5245, %broadcast.7211)
  %reshape.18855 = f32[1,4096]{1,0} reshape(%multiply.5246)
  %broadcast.9263 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18855), dimensions={0,1}
  %multiply.5247 = f32[1,4096,4096]{2,1,0} multiply(%convert.2223, %broadcast.9263)
  %add.4611 = f32[1,4096,4096]{2,1,0} add(%multiply.5242, %multiply.5247)
  %convert.2238 = bf16[1,4096,4096]{2,1,0} convert(%add.4611)
  %add.4612 = bf16[1,4096,4096]{2,1,0} add(%copy.3802, %convert.2238)
  %get-tuple-element.1595 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.192), index=1
  %get-tuple-element.1596 = u32[2,4]{1,0} get-tuple-element(%custom-call.192), index=2
  %copy.3833 = bf16[1,4096,4096]{2,1,0} copy(%add.4612)
  %dot.941 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3833, %all-gather.383), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3834 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.941)
  %custom-call.194 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3806, %copy.3808, %copy.3809, %constant.3999, %get-tuple-element.1595, /*index=5*/%get-tuple-element.1596, %get-tuple-element.1580, %copy.3834, %scatter.894, %scatter.899, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1603 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.194), index=2
  %copy.3835 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1603)
  %dot.942 = bf16[1,4096,4096]{2,1,0} dot(%copy.3835, %all-gather.382), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1604 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.194), index=1
  %copy.3836 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1604)
  %slice.656 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3836), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.5249 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.656, %broadcast.9207)
  %slice.657 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3836), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.5251 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.657, %broadcast.9205)
  %add.4626 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5249, %multiply.5251)
  %multiply.5252 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.656, %broadcast.9205)
  %negate.281 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.657)
  %multiply.5253 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.281, %broadcast.9207)
  %add.4627 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5252, %multiply.5253)
  %concatenate.397 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4626, %add.4627), dimensions={3}
  %dot.943 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.397, %all-gather.381), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4628 = bf16[1,4096,4096]{2,1,0} add(%dot.942, %dot.943)
  %copy.3837 = bf16[1,4096,4096]{2,1,0} copy(%add.4628)
  %get-tuple-element.1605 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.194), index=0
  %copy.3838 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1605)
  %slice.658 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3838), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.5255 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.658, %broadcast.9199)
  %slice.659 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3838), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.5258 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.659, %broadcast.9197)
  %add.4629 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5255, %multiply.5258)
  %multiply.5259 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.658, %broadcast.9197)
  %negate.282 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.659)
  %multiply.5260 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.282, %broadcast.9199)
  %add.4630 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5259, %multiply.5260)
  %concatenate.398 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4629, %add.4630), dimensions={3}
  %dot.944 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.398, %all-gather.380), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3839 = bf16[1,4096,4096]{2,1,0} copy(%dot.944)
  %add.4631 = bf16[1,4096,4096]{2,1,0} add(%copy.3837, %copy.3839)
  %copy.3840 = bf16[1,4096,4096]{2,1,0} copy(%add.4631)
  %multiply.5262 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3840, %broadcast.9190)
  %convert.2241 = f32[1,4096,4096]{2,1,0} convert(%multiply.5262)
  %multiply.5263 = f32[1,4096,4096]{2,1,0} multiply(%convert.2241, %broadcast.9189)
  %multiply.5264 = f32[1,4096,4096]{2,1,0} multiply(%convert.2207, %convert.2241)
  %reduce.808 = f32[1,4096]{1,0} reduce(%multiply.5264, %constant.3956), dimensions={2}, to_apply=%region_936.24386
  %reshape.18912 = f32[1,4096,1]{2,1,0} reshape(%reduce.808)
  %divide.951 = f32[1,4096,1]{2,1,0} divide(%rsqrt.173, %reshape.18718)
  %multiply.5265 = f32[1,4096,1]{2,1,0} multiply(%divide.951, %broadcast.7210)
  %multiply.5267 = f32[1,4096,1]{2,1,0} multiply(%reshape.18912, %multiply.5265)
  %multiply.5268 = f32[1,4096,1]{2,1,0} multiply(%multiply.5267, %broadcast.7211)
  %reshape.18913 = f32[1,4096]{1,0} reshape(%multiply.5268)
  %broadcast.9280 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18913), dimensions={0,1}
  %multiply.5269 = f32[1,4096,4096]{2,1,0} multiply(%convert.2207, %broadcast.9280)
  %add.4632 = f32[1,4096,4096]{2,1,0} add(%multiply.5263, %multiply.5269)
  %convert.2242 = bf16[1,4096,4096]{2,1,0} convert(%add.4632)
  %add.4633 = bf16[1,4096,4096]{2,1,0} add(%add.4612, %convert.2242)
  %copy.3841 = bf16[1,4096,4096]{2,1,0} copy(%add.4633)
  %tuple.338 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.93, %param.94, %param.95, %param.96, %param.92, /*index=5*/%param.87, %param.89, %param.91, %param.88, %param.90, /*index=10*/%copy.2342, %param.10, %param.7, %copy.3841)
  %opt-barrier.23 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.338)
  %get-tuple-element.1606 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.23), index=13
  %copy.3842 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1606)
  %iota.2172 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1607 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.23), index=10
  %copy.3843 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1607)
  %convert.2243 = f32[1,4096,4096]{2,1,0} convert(%copy.3843)
  %multiply.5272 = f32[1,4096,4096]{2,1,0} multiply(%convert.2243, %convert.2243)
  %reduce.809 = f32[1,4096]{1,0} reduce(%multiply.5272, %constant.3956), dimensions={2}, to_apply=%region_938.24429
  %multiply.5273 = f32[1,4096]{1,0} multiply(%reduce.809, %broadcast.5380)
  %add.4635 = f32[1,4096]{1,0} add(%multiply.5273, %broadcast.5381)
  %reshape.18915 = f32[1,4096,1]{2,1,0} reshape(%add.4635)
  %rsqrt.175 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.18915)
  %reshape.18916 = f32[1,4096]{1,0} reshape(%rsqrt.175)
  %broadcast.9284 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18916), dimensions={0,1}
  %multiply.5274 = f32[1,4096,4096]{2,1,0} multiply(%convert.2243, %broadcast.9284)
  %convert.2244 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5274)
  %get-tuple-element.1608 = bf16[4096]{0} get-tuple-element(%opt-barrier.23), index=5
  %broadcast.9285 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1608), dimensions={2}
  %multiply.5275 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2244, %broadcast.9285)
  %copy.3844 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5275)
  %copy.3845 = bf16[1,4096,4096]{2,1,0} copy(%copy.3844)
  %get-tuple-element.1609 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.23), index=8
  %all-gather.387 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1609), channel_id=922, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.945 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3845, %all-gather.387), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.660 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.945), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1610 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.23), index=12
  %convert.2245 = f32[1,4096]{1,0} convert(%get-tuple-element.1610)
  %broadcast.9286 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2245), dimensions={0,1}
  %divide.952 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9286, %broadcast.5388)
  %cosine.111 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.952)
  %convert.2247 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.111)
  %reshape.18918 = bf16[1,4096,64]{2,1,0} reshape(%convert.2247)
  %broadcast.9290 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.18918), dimensions={0,1,3}
  %multiply.5279 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.660, %broadcast.9290)
  %slice.661 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.945), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.110 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.952)
  %convert.2248 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.110)
  %reshape.18920 = bf16[1,4096,64]{2,1,0} reshape(%convert.2248)
  %broadcast.9292 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.18920), dimensions={0,1,3}
  %multiply.5281 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.661, %broadcast.9292)
  %subtract.599 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.5279, %multiply.5281)
  %multiply.5282 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.661, %broadcast.9290)
  %multiply.5283 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.660, %broadcast.9292)
  %add.4636 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5282, %multiply.5283)
  %concatenate.399 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.599, %add.4636), dimensions={3}
  %copy.3846 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.399)
  %get-tuple-element.1611 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.23), index=6
  %all-gather.388 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1611), channel_id=923, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.946 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3845, %all-gather.388), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.662 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.946), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.9300 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.18918), dimensions={0,1,3}
  %multiply.5287 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.662, %broadcast.9300)
  %slice.663 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.946), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.9301 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.18920), dimensions={0,1,3}
  %multiply.5289 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.663, %broadcast.9301)
  %subtract.600 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.5287, %multiply.5289)
  %multiply.5290 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.663, %broadcast.9300)
  %multiply.5291 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.662, %broadcast.9301)
  %add.4637 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5290, %multiply.5291)
  %concatenate.400 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.600, %add.4637), dimensions={3}
  %copy.3848 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.400)
  %get-tuple-element.1612 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.23), index=9
  %all-gather.389 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1612), channel_id=924, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.947 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3845, %all-gather.389), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3849 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.947)
  %get-tuple-element.1613 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.23), index=11
  %broadcast.9304 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1613), dimensions={0,1}
  %broadcast.9305 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1613), dimensions={0,2}
  %compare.3396 = pred[1,4096,4096]{2,1,0} compare(%broadcast.9304, %broadcast.9305), direction=EQ
  %and.454 = pred[1,4096,4096]{2,1,0} and(%compare.3396, %broadcast.5406)
  %select.2166 = f32[1,4096,4096]{2,1,0} select(%and.454, %broadcast.5407, %broadcast.5408)
  %compare.3398 = pred[1,4096,4096]{2,1,0} compare(%select.2166, %broadcast.5407), direction=NE
  %not.119 = pred[1,4096,4096]{2,1,0} not(%compare.3398)
  %convert.2253 = s32[1,4096,4096]{2,1,0} convert(%not.119)
  %reduce.810 = s32[1,4096]{1,0} reduce(%convert.2253, %constant.3783), dimensions={1}, to_apply=%region_939.24563
  %reshape.18931 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.810)
  %slice.664 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.18931), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.18933 = s32[1,1]{1,0} reshape(%slice.664)
  %reshape.18951 = s32[1]{0} reshape(%reshape.18933)
  %compare.3411 = pred[1]{0} compare(%reshape.18951, %constant.4022), direction=LT
  %select.2176 = s32[1]{0} select(%compare.3411, %reshape.11470, %reshape.18951)
  %scatter.917 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2176), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.55
  %reduce.811 = s32[1,4096]{1,0} reduce(%convert.2253, %constant.3783), dimensions={2}, to_apply=%region_940.24571
  %reshape.18934 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.811)
  %reduce.812 = s32[1,1]{1,0} reduce(%reshape.18934, %constant.4014), dimensions={3,2}, to_apply=%region_941.24576
  %reshape.18966 = s32[1]{0} reshape(%reduce.812)
  %compare.3424 = pred[1]{0} compare(%reshape.18966, %constant.4022), direction=LT
  %select.2186 = s32[1]{0} select(%compare.3424, %reshape.11470, %reshape.18966)
  %scatter.922 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2186), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.55
  %custom-call.195 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3846, %copy.3848, %copy.3849, %constant.3999, %scatter.917, /*index=5*/%scatter.922, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1619 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.195), index=0
  %copy.3850 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1619)
  %get-tuple-element.1620 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.23), index=7
  %all-gather.390 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1620), channel_id=925, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.948 = bf16[1,4096,4096]{2,1,0} dot(%copy.3850, %all-gather.390), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3851 = bf16[1,4096,4096]{2,1,0} copy(%dot.948)
  %add.4650 = bf16[1,4096,4096]{2,1,0} add(%copy.3843, %copy.3851)
  %convert.2257 = f32[1,4096,4096]{2,1,0} convert(%add.4650)
  %multiply.5293 = f32[1,4096,4096]{2,1,0} multiply(%convert.2257, %convert.2257)
  %reduce.813 = f32[1,4096]{1,0} reduce(%multiply.5293, %constant.3956), dimensions={2}, to_apply=%region_942.24592
  %multiply.5294 = f32[1,4096]{1,0} multiply(%reduce.813, %broadcast.5380)
  %add.4651 = f32[1,4096]{1,0} add(%multiply.5294, %broadcast.5381)
  %reshape.18968 = f32[1,4096,1]{2,1,0} reshape(%add.4651)
  %rsqrt.176 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.18968)
  %reshape.18969 = f32[1,4096]{1,0} reshape(%rsqrt.176)
  %broadcast.9319 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.18969), dimensions={0,1}
  %multiply.5295 = f32[1,4096,4096]{2,1,0} multiply(%convert.2257, %broadcast.9319)
  %convert.2258 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5295)
  %get-tuple-element.1621 = bf16[4096]{0} get-tuple-element(%opt-barrier.23), index=4
  %broadcast.9320 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1621), dimensions={2}
  %multiply.5296 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2258, %broadcast.9320)
  %copy.3852 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5296)
  %get-tuple-element.1622 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.23), index=0
  %all-gather.391 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1622), channel_id=926, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.949 = bf16[1,4096,8]{2,1,0} dot(%copy.3852, %all-gather.391), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3853 = bf16[1,4096,8]{2,1,0} copy(%dot.949)
  %reshape.18970 = bf16[4096,8]{1,0} reshape(%copy.3853)
  %custom-call.196 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.18970), custom_call_target="TopK", called_computations={%compare-greater-than.55.clone}
  %get-tuple-element.1623 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.196), index=0
  %get-tuple-element.1624 = s32[4096,2]{1,0} get-tuple-element(%custom-call.196), index=1
  %add.4652 = s32[4096,2]{1,0} add(%get-tuple-element.1624, %broadcast.5420)
  %sort.277 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1623, %add.4652), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.55
  %get-tuple-element.1626 = s32[4096,2]{1,0} get-tuple-element(%sort.277), index=1
  %slice.666 = s32[4096,2]{1,0} slice(%get-tuple-element.1626), slice={[0:4096], [0:2]}
  %all-gather.393 = s32[32768,2]{1,0} all-gather(%slice.666), channel_id=928, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1950 = s32[4096,2]{1,0} dynamic-slice(%all-gather.393, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.18973 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1950)
  %compare.3425 = pred[1,4096,2]{2,1,0} compare(%reshape.18973, %broadcast.5421), direction=LT
  %add.4653 = s32[1,4096,2]{2,1,0} add(%reshape.18973, %broadcast.5422)
  %select.2187 = s32[1,4096,2]{2,1,0} select(%compare.3425, %add.4653, %reshape.18973)
  %reshape.18974 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2187)
  %concatenate.401 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2172, %reshape.18974), dimensions={3}
  %subtract.606 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.401, %broadcast.5433)
  %scatter.923 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.606, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_945.24671
  %gather.78 = u32[1,4096,2]{2,1,0} gather(%scatter.923, %subtract.606), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3426 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.78), direction=EQ
  %get-tuple-element.1625 = bf16[4096,2]{1,0} get-tuple-element(%sort.277), index=0
  %slice.665 = bf16[4096,2]{1,0} slice(%get-tuple-element.1625), slice={[0:4096], [0:2]}
  %all-gather.392 = bf16[32768,2]{1,0} all-gather(%slice.665), channel_id=927, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1960 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.392, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2262 = f32[4096,2]{1,0} convert(%dynamic-slice.1960)
  %reshape.18990 = f32[1,4096,2]{2,1,0} reshape(%convert.2262)
  %reduce.814 = f32[4096]{0} reduce(%convert.2262, %constant.4073), dimensions={1}, to_apply=%region_943.24621
  %reshape.18991 = f32[1,4096]{1,0} reshape(%reduce.814)
  %broadcast.9329 = f32[1,4096,2]{2,1,0} broadcast(%reshape.18991), dimensions={0,1}
  %subtract.605 = f32[1,4096,2]{2,1,0} subtract(%reshape.18990, %broadcast.9329)
  %exponential.237 = f32[1,4096,2]{2,1,0} exponential(%subtract.605)
  %reduce.815 = f32[1,4096]{1,0} reduce(%exponential.237, %constant.3956), dimensions={2}, to_apply=%region_944.24633
  %broadcast.9330 = f32[1,4096,2]{2,1,0} broadcast(%reduce.815), dimensions={0,1}
  %divide.956 = f32[1,4096,2]{2,1,0} divide(%exponential.237, %broadcast.9330)
  %convert.2263 = bf16[1,4096,2]{2,1,0} convert(%divide.956)
  %select.2188 = bf16[1,4096,2]{2,1,0} select(%compare.3426, %convert.2263, %broadcast.5432)
  %scatter.924 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.606, %select.2188), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_946.24680
  %broadcast.9332 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.18973), dimensions={0,1,2}
  %iota.2180 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3427 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.9332, %iota.2180), direction=EQ
  %convert.2264 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3427)
  %reshape.19000 = s32[1,8192,8]{2,1,0} reshape(%convert.2264)
  %copy.3854 = s32[1,8192,8]{2,1,0} copy(%reshape.19000)
  %reduce-window.404 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3854, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.22
  %reshape.19002 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.404)
  %copy.3855 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.19002)
  %compare.3428 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3855, %broadcast.5435), direction=LE
  %select.2189 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3428, %convert.2264, %broadcast.5436)
  %reduce.816 = s32[1,4096,8]{2,1,0} reduce(%select.2189, %constant.3783), dimensions={2}, to_apply=%region_947.24694
  %convert.2265 = bf16[1,4096,8]{2,1,0} convert(%reduce.816)
  %multiply.5302 = bf16[1,4096,8]{2,1,0} multiply(%scatter.924, %convert.2265)
  %broadcast.9334 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5302), dimensions={0,1,2}
  %multiply.5303 = s32[1,8192,8]{2,1,0} multiply(%copy.3854, %reduce-window.404)
  %reshape.19003 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.5303)
  %reduce.817 = s32[1,4096,8]{2,1,0} reduce(%reshape.19003, %constant.3783), dimensions={2}, to_apply=%region_948.24703
  %multiply.5304 = s32[1,4096,8]{2,1,0} multiply(%reduce.817, %reduce.816)
  %broadcast.9335 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5304), dimensions={0,1,2}
  %iota.2181 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3429 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.9335, %iota.2181), direction=EQ
  %convert.2266 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3429)
  %convert.2268 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2266)
  %multiply.5305 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.9334, %convert.2268)
  %slice.667 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.5305), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3430 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.667, %broadcast.5439), direction=NE
  %copy.3856 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3430)
  %convert.2269 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3856)
  %dot.950 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2269, %copy.3852), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19006 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.950)
  %all-to-all.156 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19006), channel_id=935, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.257 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.156), dimensions={1,0,2,3,4}
  %reshape.19007 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.257)
  %transpose.258 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.19007), dimensions={1,0,2,3}
  %copy.3857 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.258)
  %get-tuple-element.1631 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.23), index=1
  %copy.3858 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1631)
  %dot.951 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3857, %copy.3858), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3859 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.951)
  %negate.283 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3859)
  %exponential.238 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.283)
  %add.4658 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.238, %broadcast.5440)
  %divide.957 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4658)
  %multiply.5309 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3859, %divide.957)
  %copy.3860 = bf16[1,4096,4096]{2,1,0} copy(%copy.3842)
  %copy.3861 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.667)
  %dot.952 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3860, %copy.3861), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19010 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.952)
  %all-to-all.157 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.19010), channel_id=936, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.259 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.157), dimensions={2,0,1,3,4}
  %reshape.19011 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.259)
  %transpose.260 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.19011), dimensions={2,0,3,1}
  %copy.3862 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.260)
  %get-tuple-element.1632 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.23), index=3
  %copy.3863 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1632)
  %dot.953 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3862, %copy.3863), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.5312 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5309, %dot.953)
  %copy.3864 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.5312)
  %get-tuple-element.1633 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.23), index=2
  %copy.3865 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1633)
  %dot.954 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3864, %copy.3865), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.955 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3857, %copy.3865), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3866 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.955)
  %multiply.5313 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.953, %copy.3866)
  %multiply.5314 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5313, %divide.957)
  %multiply.5315 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3859, %multiply.5313)
  %subtract.607 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.957)
  %multiply.5316 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.957, %subtract.607)
  %multiply.5317 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5315, %multiply.5316)
  %add.4659 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.5314, %multiply.5317)
  %copy.3867 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4659)
  %dot.956 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3867, %copy.3858), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4660 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.954, %dot.956)
  %copy.3868 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4660)
  %transpose.261 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3868), dimensions={1,0,2,3}
  %reshape.19015 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.261)
  %all-to-all.158 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19015), channel_id=937, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.262 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.158), dimensions={1,0,2,3,4}
  %reshape.19016 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.262)
  %dot.957 = bf16[1,4096,4096]{2,1,0} dot(%convert.2269, %reshape.19016), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.19018 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1950)
  %compare.3432 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.401, %broadcast.7265), direction=GE
  %compare.3433 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.401, %broadcast.7267), direction=LE
  %and.459 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3432, %compare.3433)
  %reduce.818 = pred[1,4096,2]{2,1,0} reduce(%and.459, %constant.4025), dimensions={3}, to_apply=%region_951.24788
  %multiply.5320 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5309, %copy.3866)
  %dot.958 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.5320, %copy.3863), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3869 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.958)
  %reshape.19020 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3869)
  %all-to-all.159 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19020), channel_id=938, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.263 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.159), dimensions={1,0,2,3,4}
  %reshape.19022 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.263)
  %dot.959 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3860, %reshape.19022), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3870 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.959)
  %pad.23 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3870, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.5324 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.23, %convert.2268)
  %reduce.819 = bf16[1,4096,8]{2,1,0} reduce(%multiply.5324, %constant.3795), dimensions={3}, to_apply=%region_949.24770
  %multiply.5325 = bf16[1,4096,8]{2,1,0} multiply(%reduce.819, %convert.2265)
  %gather.79 = bf16[1,4096,2]{2,1,0} gather(%multiply.5325, %subtract.606), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2190 = bf16[1,4096,2]{2,1,0} select(%reduce.818, %gather.79, %broadcast.5432)
  %select.2191 = bf16[1,4096,2]{2,1,0} select(%compare.3426, %select.2190, %broadcast.5432)
  %convert.2271 = f32[1,4096,2]{2,1,0} convert(%select.2191)
  %divide.958 = f32[1,4096,2]{2,1,0} divide(%convert.2271, %broadcast.9330)
  %multiply.5326 = f32[1,4096]{1,0} multiply(%reduce.815, %reduce.815)
  %divide.959 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.5326)
  %broadcast.9341 = f32[1,4096,2]{2,1,0} broadcast(%divide.959), dimensions={0,1}
  %multiply.5328 = f32[1,4096,2]{2,1,0} multiply(%convert.2271, %broadcast.9341)
  %multiply.5329 = f32[1,4096,2]{2,1,0} multiply(%multiply.5328, %exponential.237)
  %reduce.820 = f32[1,4096]{1,0} reduce(%multiply.5329, %constant.3956), dimensions={2}, to_apply=%region_952.24802
  %negate.284 = f32[1,4096]{1,0} negate(%reduce.820)
  %broadcast.9343 = f32[1,4096,2]{2,1,0} broadcast(%negate.284), dimensions={0,1}
  %add.4661 = f32[1,4096,2]{2,1,0} add(%divide.958, %broadcast.9343)
  %multiply.5330 = f32[1,4096,2]{2,1,0} multiply(%add.4661, %exponential.237)
  %convert.2272 = bf16[1,4096,2]{2,1,0} convert(%multiply.5330)
  %scatter.925 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.19018, %convert.2272), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_954.24822
  %copy.3871 = bf16[1,4096,8]{2,1,0} copy(%scatter.925)
  %dot.960 = bf16[1,4096,4096]{2,1,0} dot(%copy.3871, %all-gather.391), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4662 = bf16[1,4096,4096]{1,2,0} add(%dot.957, %dot.960)
  %copy.3872 = bf16[1,4096,4096]{2,1,0} copy(%add.4662)
  %multiply.5331 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3872, %broadcast.9320)
  %convert.2273 = f32[1,4096,4096]{2,1,0} convert(%multiply.5331)
  %multiply.5332 = f32[1,4096,4096]{2,1,0} multiply(%convert.2273, %broadcast.9319)
  %multiply.5333 = f32[1,4096,4096]{2,1,0} multiply(%convert.2257, %convert.2273)
  %reduce.821 = f32[1,4096]{1,0} reduce(%multiply.5333, %constant.3956), dimensions={2}, to_apply=%region_957.24851
  %reshape.19036 = f32[1,4096,1]{2,1,0} reshape(%reduce.821)
  %divide.960 = f32[1,4096,1]{2,1,0} divide(%rsqrt.176, %reshape.18968)
  %multiply.5334 = f32[1,4096,1]{2,1,0} multiply(%divide.960, %broadcast.7210)
  %multiply.5335 = f32[1,4096,1]{2,1,0} multiply(%reshape.19036, %multiply.5334)
  %multiply.5336 = f32[1,4096,1]{2,1,0} multiply(%multiply.5335, %broadcast.7211)
  %reshape.19037 = f32[1,4096]{1,0} reshape(%multiply.5336)
  %broadcast.9350 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19037), dimensions={0,1}
  %multiply.5337 = f32[1,4096,4096]{2,1,0} multiply(%convert.2257, %broadcast.9350)
  %add.4664 = f32[1,4096,4096]{2,1,0} add(%multiply.5332, %multiply.5337)
  %convert.2274 = bf16[1,4096,4096]{2,1,0} convert(%add.4664)
  %add.4665 = bf16[1,4096,4096]{2,1,0} add(%copy.3842, %convert.2274)
  %get-tuple-element.1634 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.195), index=1
  %get-tuple-element.1635 = u32[2,4]{1,0} get-tuple-element(%custom-call.195), index=2
  %copy.3873 = bf16[1,4096,4096]{2,1,0} copy(%add.4665)
  %dot.961 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3873, %all-gather.390), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3874 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.961)
  %custom-call.197 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3846, %copy.3848, %copy.3849, %constant.3999, %get-tuple-element.1634, /*index=5*/%get-tuple-element.1635, %get-tuple-element.1619, %copy.3874, %scatter.917, %scatter.922, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1642 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.197), index=2
  %copy.3875 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1642)
  %dot.962 = bf16[1,4096,4096]{2,1,0} dot(%copy.3875, %all-gather.389), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1643 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.197), index=1
  %copy.3876 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1643)
  %slice.668 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3876), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.5339 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.668, %broadcast.9301)
  %slice.669 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3876), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.5342 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.669, %broadcast.9300)
  %add.4678 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5339, %multiply.5342)
  %multiply.5343 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.668, %broadcast.9300)
  %negate.285 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.669)
  %multiply.5344 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.285, %broadcast.9301)
  %add.4679 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5343, %multiply.5344)
  %concatenate.406 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4678, %add.4679), dimensions={3}
  %dot.963 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.406, %all-gather.388), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4680 = bf16[1,4096,4096]{2,1,0} add(%dot.962, %dot.963)
  %copy.3877 = bf16[1,4096,4096]{2,1,0} copy(%add.4680)
  %get-tuple-element.1644 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.197), index=0
  %copy.3878 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1644)
  %slice.670 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3878), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.5347 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.670, %broadcast.9292)
  %slice.671 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3878), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.5349 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.671, %broadcast.9290)
  %add.4681 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5347, %multiply.5349)
  %multiply.5350 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.670, %broadcast.9290)
  %negate.286 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.671)
  %multiply.5351 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.286, %broadcast.9292)
  %add.4682 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5350, %multiply.5351)
  %concatenate.407 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4681, %add.4682), dimensions={3}
  %dot.964 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.407, %all-gather.387), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3879 = bf16[1,4096,4096]{2,1,0} copy(%dot.964)
  %add.4683 = bf16[1,4096,4096]{2,1,0} add(%copy.3877, %copy.3879)
  %copy.3880 = bf16[1,4096,4096]{2,1,0} copy(%add.4683)
  %multiply.5352 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3880, %broadcast.9285)
  %convert.2277 = f32[1,4096,4096]{2,1,0} convert(%multiply.5352)
  %multiply.5353 = f32[1,4096,4096]{2,1,0} multiply(%convert.2277, %broadcast.9284)
  %multiply.5354 = f32[1,4096,4096]{2,1,0} multiply(%convert.2243, %convert.2277)
  %reduce.822 = f32[1,4096]{1,0} reduce(%multiply.5354, %constant.3956), dimensions={2}, to_apply=%region_961.24962
  %reshape.19085 = f32[1,4096,1]{2,1,0} reshape(%reduce.822)
  %divide.963 = f32[1,4096,1]{2,1,0} divide(%rsqrt.175, %reshape.18915)
  %multiply.5355 = f32[1,4096,1]{2,1,0} multiply(%divide.963, %broadcast.7210)
  %multiply.5356 = f32[1,4096,1]{2,1,0} multiply(%reshape.19085, %multiply.5355)
  %multiply.5357 = f32[1,4096,1]{2,1,0} multiply(%multiply.5356, %broadcast.7211)
  %reshape.19086 = f32[1,4096]{1,0} reshape(%multiply.5357)
  %broadcast.9367 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19086), dimensions={0,1}
  %multiply.5358 = f32[1,4096,4096]{2,1,0} multiply(%convert.2243, %broadcast.9367)
  %add.4684 = f32[1,4096,4096]{2,1,0} add(%multiply.5353, %multiply.5358)
  %convert.2278 = bf16[1,4096,4096]{2,1,0} convert(%add.4684)
  %add.4685 = bf16[1,4096,4096]{2,1,0} add(%add.4665, %convert.2278)
  %copy.3881 = bf16[1,4096,4096]{2,1,0} copy(%add.4685)
  %tuple.343 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.83, %param.84, %param.85, %param.86, %param.82, /*index=5*/%param.77, %param.79, %param.81, %param.78, %param.80, /*index=10*/%copy.2318, %param.10, %param.7, %copy.3881)
  %opt-barrier.24 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.343)
  %get-tuple-element.1645 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.24), index=13
  %copy.3882 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1645)
  %iota.2183 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1646 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.24), index=10
  %copy.3883 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1646)
  %convert.2279 = f32[1,4096,4096]{2,1,0} convert(%copy.3883)
  %multiply.5360 = f32[1,4096,4096]{2,1,0} multiply(%convert.2279, %convert.2279)
  %reduce.823 = f32[1,4096]{1,0} reduce(%multiply.5360, %constant.3956), dimensions={2}, to_apply=%region_963.25005
  %multiply.5361 = f32[1,4096]{1,0} multiply(%reduce.823, %broadcast.5380)
  %add.4687 = f32[1,4096]{1,0} add(%multiply.5361, %broadcast.5381)
  %reshape.19088 = f32[1,4096,1]{2,1,0} reshape(%add.4687)
  %rsqrt.177 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.19088)
  %reshape.19089 = f32[1,4096]{1,0} reshape(%rsqrt.177)
  %broadcast.9371 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19089), dimensions={0,1}
  %multiply.5362 = f32[1,4096,4096]{2,1,0} multiply(%convert.2279, %broadcast.9371)
  %convert.2280 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5362)
  %get-tuple-element.1647 = bf16[4096]{0} get-tuple-element(%opt-barrier.24), index=5
  %broadcast.9372 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1647), dimensions={2}
  %multiply.5363 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2280, %broadcast.9372)
  %copy.3884 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5363)
  %copy.3885 = bf16[1,4096,4096]{2,1,0} copy(%copy.3884)
  %get-tuple-element.1648 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.24), index=8
  %all-gather.394 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1648), channel_id=941, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.965 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3885, %all-gather.394), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.672 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.965), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1649 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.24), index=12
  %convert.2281 = f32[1,4096]{1,0} convert(%get-tuple-element.1649)
  %broadcast.9373 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2281), dimensions={0,1}
  %divide.964 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9373, %broadcast.5388)
  %cosine.113 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.964)
  %convert.2283 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.113)
  %reshape.19091 = bf16[1,4096,64]{2,1,0} reshape(%convert.2283)
  %broadcast.9376 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.19091), dimensions={0,1,3}
  %multiply.5367 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.672, %broadcast.9376)
  %slice.673 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.965), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.112 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.964)
  %convert.2284 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.112)
  %reshape.19094 = bf16[1,4096,64]{2,1,0} reshape(%convert.2284)
  %broadcast.9377 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.19094), dimensions={0,1,3}
  %multiply.5369 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.673, %broadcast.9377)
  %subtract.611 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.5367, %multiply.5369)
  %multiply.5370 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.673, %broadcast.9376)
  %multiply.5371 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.672, %broadcast.9377)
  %add.4688 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5370, %multiply.5371)
  %concatenate.408 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.611, %add.4688), dimensions={3}
  %copy.3886 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.408)
  %get-tuple-element.1650 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.24), index=6
  %all-gather.395 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1650), channel_id=942, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.966 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3885, %all-gather.395), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.674 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.966), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.9383 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.19091), dimensions={0,1,3}
  %multiply.5375 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.674, %broadcast.9383)
  %slice.675 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.966), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.9384 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.19094), dimensions={0,1,3}
  %multiply.5377 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.675, %broadcast.9384)
  %subtract.612 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.5375, %multiply.5377)
  %multiply.5378 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.675, %broadcast.9383)
  %multiply.5379 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.674, %broadcast.9384)
  %add.4689 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5378, %multiply.5379)
  %concatenate.409 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.612, %add.4689), dimensions={3}
  %copy.3888 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.409)
  %get-tuple-element.1651 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.24), index=9
  %all-gather.396 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1651), channel_id=943, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.967 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3885, %all-gather.396), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3889 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.967)
  %get-tuple-element.1652 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.24), index=11
  %broadcast.9387 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1652), dimensions={0,1}
  %broadcast.9388 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1652), dimensions={0,2}
  %compare.3461 = pred[1,4096,4096]{2,1,0} compare(%broadcast.9387, %broadcast.9388), direction=EQ
  %and.464 = pred[1,4096,4096]{2,1,0} and(%compare.3461, %broadcast.5406)
  %select.2212 = f32[1,4096,4096]{2,1,0} select(%and.464, %broadcast.5407, %broadcast.5408)
  %compare.3463 = pred[1,4096,4096]{2,1,0} compare(%select.2212, %broadcast.5407), direction=NE
  %not.120 = pred[1,4096,4096]{2,1,0} not(%compare.3463)
  %convert.2290 = s32[1,4096,4096]{2,1,0} convert(%not.120)
  %reduce.824 = s32[1,4096]{1,0} reduce(%convert.2290, %constant.3783), dimensions={1}, to_apply=%region_964.25139
  %reshape.19104 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.824)
  %slice.676 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.19104), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.19106 = s32[1,1]{1,0} reshape(%slice.676)
  %reshape.19121 = s32[1]{0} reshape(%reshape.19106)
  %compare.3478 = pred[1]{0} compare(%reshape.19121, %constant.4022), direction=LT
  %select.2222 = s32[1]{0} select(%compare.3478, %reshape.11470, %reshape.19121)
  %scatter.940 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2222), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.56
  %reduce.825 = s32[1,4096]{1,0} reduce(%convert.2290, %constant.3783), dimensions={2}, to_apply=%region_965.25147
  %reshape.19107 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.825)
  %reduce.826 = s32[1,1]{1,0} reduce(%reshape.19107, %constant.4014), dimensions={3,2}, to_apply=%region_966.25152
  %reshape.19139 = s32[1]{0} reshape(%reduce.826)
  %compare.3491 = pred[1]{0} compare(%reshape.19139, %constant.4022), direction=LT
  %select.2232 = s32[1]{0} select(%compare.3491, %reshape.11470, %reshape.19139)
  %scatter.945 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2232), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.56
  %custom-call.198 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3886, %copy.3888, %copy.3889, %constant.3999, %scatter.940, /*index=5*/%scatter.945, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1658 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.198), index=0
  %copy.3890 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1658)
  %get-tuple-element.1659 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.24), index=7
  %all-gather.397 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1659), channel_id=944, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.968 = bf16[1,4096,4096]{2,1,0} dot(%copy.3890, %all-gather.397), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3891 = bf16[1,4096,4096]{2,1,0} copy(%dot.968)
  %add.4704 = bf16[1,4096,4096]{2,1,0} add(%copy.3883, %copy.3891)
  %convert.2294 = f32[1,4096,4096]{2,1,0} convert(%add.4704)
  %multiply.5381 = f32[1,4096,4096]{2,1,0} multiply(%convert.2294, %convert.2294)
  %reduce.827 = f32[1,4096]{1,0} reduce(%multiply.5381, %constant.3956), dimensions={2}, to_apply=%region_967.25168
  %multiply.5382 = f32[1,4096]{1,0} multiply(%reduce.827, %broadcast.5380)
  %add.4705 = f32[1,4096]{1,0} add(%multiply.5382, %broadcast.5381)
  %reshape.19142 = f32[1,4096,1]{2,1,0} reshape(%add.4705)
  %rsqrt.178 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.19142)
  %reshape.19143 = f32[1,4096]{1,0} reshape(%rsqrt.178)
  %broadcast.9402 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19143), dimensions={0,1}
  %multiply.5383 = f32[1,4096,4096]{2,1,0} multiply(%convert.2294, %broadcast.9402)
  %convert.2295 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5383)
  %get-tuple-element.1660 = bf16[4096]{0} get-tuple-element(%opt-barrier.24), index=4
  %broadcast.9403 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1660), dimensions={2}
  %multiply.5384 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2295, %broadcast.9403)
  %copy.3892 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5384)
  %get-tuple-element.1661 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.24), index=0
  %all-gather.398 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1661), channel_id=945, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.969 = bf16[1,4096,8]{2,1,0} dot(%copy.3892, %all-gather.398), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3893 = bf16[1,4096,8]{2,1,0} copy(%dot.969)
  %reshape.19144 = bf16[4096,8]{1,0} reshape(%copy.3893)
  %custom-call.199 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.19144), custom_call_target="TopK", called_computations={%compare-greater-than.56.clone}
  %get-tuple-element.1662 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.199), index=0
  %get-tuple-element.1663 = s32[4096,2]{1,0} get-tuple-element(%custom-call.199), index=1
  %add.4706 = s32[4096,2]{1,0} add(%get-tuple-element.1663, %broadcast.5420)
  %sort.282 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1662, %add.4706), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.56
  %get-tuple-element.1665 = s32[4096,2]{1,0} get-tuple-element(%sort.282), index=1
  %slice.678 = s32[4096,2]{1,0} slice(%get-tuple-element.1665), slice={[0:4096], [0:2]}
  %all-gather.400 = s32[32768,2]{1,0} all-gather(%slice.678), channel_id=947, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.1994 = s32[4096,2]{1,0} dynamic-slice(%all-gather.400, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.19147 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.1994)
  %compare.3492 = pred[1,4096,2]{2,1,0} compare(%reshape.19147, %broadcast.5421), direction=LT
  %add.4707 = s32[1,4096,2]{2,1,0} add(%reshape.19147, %broadcast.5422)
  %select.2233 = s32[1,4096,2]{2,1,0} select(%compare.3492, %add.4707, %reshape.19147)
  %reshape.19149 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2233)
  %concatenate.410 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2183, %reshape.19149), dimensions={3}
  %subtract.618 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.410, %broadcast.5433)
  %scatter.946 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.618, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_970.25247
  %gather.80 = u32[1,4096,2]{2,1,0} gather(%scatter.946, %subtract.618), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3493 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.80), direction=EQ
  %get-tuple-element.1664 = bf16[4096,2]{1,0} get-tuple-element(%sort.282), index=0
  %slice.677 = bf16[4096,2]{1,0} slice(%get-tuple-element.1664), slice={[0:4096], [0:2]}
  %all-gather.399 = bf16[32768,2]{1,0} all-gather(%slice.677), channel_id=946, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2004 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.399, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2298 = f32[4096,2]{1,0} convert(%dynamic-slice.2004)
  %reshape.19168 = f32[1,4096,2]{2,1,0} reshape(%convert.2298)
  %reduce.828 = f32[4096]{0} reduce(%convert.2298, %constant.4073), dimensions={1}, to_apply=%region_968.25197
  %reshape.19169 = f32[1,4096]{1,0} reshape(%reduce.828)
  %broadcast.9410 = f32[1,4096,2]{2,1,0} broadcast(%reshape.19169), dimensions={0,1}
  %subtract.617 = f32[1,4096,2]{2,1,0} subtract(%reshape.19168, %broadcast.9410)
  %exponential.239 = f32[1,4096,2]{2,1,0} exponential(%subtract.617)
  %reduce.829 = f32[1,4096]{1,0} reduce(%exponential.239, %constant.3956), dimensions={2}, to_apply=%region_969.25209
  %broadcast.9411 = f32[1,4096,2]{2,1,0} broadcast(%reduce.829), dimensions={0,1}
  %divide.968 = f32[1,4096,2]{2,1,0} divide(%exponential.239, %broadcast.9411)
  %convert.2299 = bf16[1,4096,2]{2,1,0} convert(%divide.968)
  %select.2234 = bf16[1,4096,2]{2,1,0} select(%compare.3493, %convert.2299, %broadcast.5432)
  %scatter.947 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.618, %select.2234), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_971.25256
  %broadcast.9413 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.19147), dimensions={0,1,2}
  %iota.2191 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3494 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.9413, %iota.2191), direction=EQ
  %convert.2300 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3494)
  %reshape.19178 = s32[1,8192,8]{2,1,0} reshape(%convert.2300)
  %copy.3894 = s32[1,8192,8]{2,1,0} copy(%reshape.19178)
  %reduce-window.409 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3894, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.23
  %reshape.19180 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.409)
  %copy.3895 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.19180)
  %compare.3495 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3895, %broadcast.5435), direction=LE
  %select.2235 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3495, %convert.2300, %broadcast.5436)
  %reduce.830 = s32[1,4096,8]{2,1,0} reduce(%select.2235, %constant.3783), dimensions={2}, to_apply=%region_972.25270
  %convert.2302 = bf16[1,4096,8]{2,1,0} convert(%reduce.830)
  %multiply.5390 = bf16[1,4096,8]{2,1,0} multiply(%scatter.947, %convert.2302)
  %broadcast.9415 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5390), dimensions={0,1,2}
  %multiply.5391 = s32[1,8192,8]{2,1,0} multiply(%copy.3894, %reduce-window.409)
  %reshape.19181 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.5391)
  %reduce.831 = s32[1,4096,8]{2,1,0} reduce(%reshape.19181, %constant.3783), dimensions={2}, to_apply=%region_973.25279
  %multiply.5392 = s32[1,4096,8]{2,1,0} multiply(%reduce.831, %reduce.830)
  %broadcast.9416 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5392), dimensions={0,1,2}
  %iota.2192 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3496 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.9416, %iota.2192), direction=EQ
  %convert.2303 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3496)
  %convert.2304 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2303)
  %multiply.5393 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.9415, %convert.2304)
  %slice.679 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.5393), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3497 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.679, %broadcast.5439), direction=NE
  %copy.3896 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3497)
  %convert.2305 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3896)
  %dot.970 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2305, %copy.3892), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19184 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.970)
  %all-to-all.160 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19184), channel_id=954, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.264 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.160), dimensions={1,0,2,3,4}
  %reshape.19185 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.264)
  %transpose.265 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.19185), dimensions={1,0,2,3}
  %copy.3897 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.265)
  %get-tuple-element.1670 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.24), index=1
  %copy.3898 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1670)
  %dot.971 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3897, %copy.3898), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3899 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.971)
  %negate.287 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3899)
  %exponential.240 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.287)
  %add.4712 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.240, %broadcast.5440)
  %divide.969 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4712)
  %multiply.5397 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3899, %divide.969)
  %copy.3900 = bf16[1,4096,4096]{2,1,0} copy(%copy.3882)
  %copy.3901 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.679)
  %dot.972 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3900, %copy.3901), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19190 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.972)
  %all-to-all.161 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.19190), channel_id=955, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.266 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.161), dimensions={2,0,1,3,4}
  %reshape.19191 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.266)
  %transpose.267 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.19191), dimensions={2,0,3,1}
  %copy.3902 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.267)
  %get-tuple-element.1674 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.24), index=3
  %copy.3903 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1674)
  %dot.973 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3902, %copy.3903), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.5400 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5397, %dot.973)
  %copy.3904 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.5400)
  %get-tuple-element.1675 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.24), index=2
  %copy.3905 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1675)
  %dot.974 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3904, %copy.3905), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.975 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3897, %copy.3905), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3906 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.975)
  %multiply.5401 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.973, %copy.3906)
  %multiply.5402 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5401, %divide.969)
  %multiply.5403 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3899, %multiply.5401)
  %subtract.619 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.969)
  %multiply.5404 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.969, %subtract.619)
  %multiply.5405 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5403, %multiply.5404)
  %add.4713 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.5402, %multiply.5405)
  %copy.3907 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4713)
  %dot.976 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3907, %copy.3898), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4714 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.974, %dot.976)
  %copy.3908 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4714)
  %transpose.268 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3908), dimensions={1,0,2,3}
  %reshape.19194 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.268)
  %all-to-all.162 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19194), channel_id=956, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.269 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.162), dimensions={1,0,2,3,4}
  %reshape.19195 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.269)
  %dot.977 = bf16[1,4096,4096]{2,1,0} dot(%convert.2305, %reshape.19195), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.19197 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.1994)
  %compare.3499 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.410, %broadcast.7265), direction=GE
  %compare.3500 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.410, %broadcast.7267), direction=LE
  %and.469 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3499, %compare.3500)
  %reduce.832 = pred[1,4096,2]{2,1,0} reduce(%and.469, %constant.4025), dimensions={3}, to_apply=%region_976.25364
  %multiply.5408 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5397, %copy.3906)
  %dot.978 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.5408, %copy.3903), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3909 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.978)
  %reshape.19199 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3909)
  %all-to-all.163 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19199), channel_id=957, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.270 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.163), dimensions={1,0,2,3,4}
  %reshape.19200 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.270)
  %dot.979 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3900, %reshape.19200), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3910 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.979)
  %pad.24 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3910, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.5412 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.24, %convert.2304)
  %reduce.833 = bf16[1,4096,8]{2,1,0} reduce(%multiply.5412, %constant.3795), dimensions={3}, to_apply=%region_974.25346
  %multiply.5413 = bf16[1,4096,8]{2,1,0} multiply(%reduce.833, %convert.2302)
  %gather.81 = bf16[1,4096,2]{2,1,0} gather(%multiply.5413, %subtract.618), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2236 = bf16[1,4096,2]{2,1,0} select(%reduce.832, %gather.81, %broadcast.5432)
  %select.2237 = bf16[1,4096,2]{2,1,0} select(%compare.3493, %select.2236, %broadcast.5432)
  %convert.2307 = f32[1,4096,2]{2,1,0} convert(%select.2237)
  %divide.970 = f32[1,4096,2]{2,1,0} divide(%convert.2307, %broadcast.9411)
  %multiply.5414 = f32[1,4096]{1,0} multiply(%reduce.829, %reduce.829)
  %divide.971 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.5414)
  %broadcast.9422 = f32[1,4096,2]{2,1,0} broadcast(%divide.971), dimensions={0,1}
  %multiply.5415 = f32[1,4096,2]{2,1,0} multiply(%convert.2307, %broadcast.9422)
  %multiply.5416 = f32[1,4096,2]{2,1,0} multiply(%multiply.5415, %exponential.239)
  %reduce.834 = f32[1,4096]{1,0} reduce(%multiply.5416, %constant.3956), dimensions={2}, to_apply=%region_977.25378
  %negate.288 = f32[1,4096]{1,0} negate(%reduce.834)
  %broadcast.9423 = f32[1,4096,2]{2,1,0} broadcast(%negate.288), dimensions={0,1}
  %add.4715 = f32[1,4096,2]{2,1,0} add(%divide.970, %broadcast.9423)
  %multiply.5417 = f32[1,4096,2]{2,1,0} multiply(%add.4715, %exponential.239)
  %convert.2308 = bf16[1,4096,2]{2,1,0} convert(%multiply.5417)
  %scatter.948 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.19197, %convert.2308), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_979.25398
  %copy.3911 = bf16[1,4096,8]{2,1,0} copy(%scatter.948)
  %dot.980 = bf16[1,4096,4096]{2,1,0} dot(%copy.3911, %all-gather.398), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4716 = bf16[1,4096,4096]{1,2,0} add(%dot.977, %dot.980)
  %copy.3912 = bf16[1,4096,4096]{2,1,0} copy(%add.4716)
  %multiply.5418 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3912, %broadcast.9403)
  %convert.2309 = f32[1,4096,4096]{2,1,0} convert(%multiply.5418)
  %multiply.5419 = f32[1,4096,4096]{2,1,0} multiply(%convert.2309, %broadcast.9402)
  %multiply.5420 = f32[1,4096,4096]{2,1,0} multiply(%convert.2294, %convert.2309)
  %reduce.835 = f32[1,4096]{1,0} reduce(%multiply.5420, %constant.3956), dimensions={2}, to_apply=%region_982.25427
  %reshape.19215 = f32[1,4096,1]{2,1,0} reshape(%reduce.835)
  %divide.972 = f32[1,4096,1]{2,1,0} divide(%rsqrt.178, %reshape.19142)
  %multiply.5421 = f32[1,4096,1]{2,1,0} multiply(%divide.972, %broadcast.7210)
  %multiply.5422 = f32[1,4096,1]{2,1,0} multiply(%reshape.19215, %multiply.5421)
  %multiply.5424 = f32[1,4096,1]{2,1,0} multiply(%multiply.5422, %broadcast.7211)
  %reshape.19216 = f32[1,4096]{1,0} reshape(%multiply.5424)
  %broadcast.9427 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19216), dimensions={0,1}
  %multiply.5425 = f32[1,4096,4096]{2,1,0} multiply(%convert.2294, %broadcast.9427)
  %add.4718 = f32[1,4096,4096]{2,1,0} add(%multiply.5419, %multiply.5425)
  %convert.2310 = bf16[1,4096,4096]{2,1,0} convert(%add.4718)
  %add.4719 = bf16[1,4096,4096]{2,1,0} add(%copy.3882, %convert.2310)
  %get-tuple-element.1676 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.198), index=1
  %get-tuple-element.1677 = u32[2,4]{1,0} get-tuple-element(%custom-call.198), index=2
  %copy.3913 = bf16[1,4096,4096]{2,1,0} copy(%add.4719)
  %dot.981 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3913, %all-gather.397), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3914 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.981)
  %custom-call.200 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3886, %copy.3888, %copy.3889, %constant.3999, %get-tuple-element.1676, /*index=5*/%get-tuple-element.1677, %get-tuple-element.1658, %copy.3914, %scatter.940, %scatter.945, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1684 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.200), index=2
  %copy.3915 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1684)
  %dot.982 = bf16[1,4096,4096]{2,1,0} dot(%copy.3915, %all-gather.396), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1685 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.200), index=1
  %copy.3916 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1685)
  %slice.680 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3916), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.5427 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.680, %broadcast.9384)
  %slice.681 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3916), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.5429 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.681, %broadcast.9383)
  %add.4734 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5427, %multiply.5429)
  %multiply.5432 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.680, %broadcast.9383)
  %negate.289 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.681)
  %multiply.5433 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.289, %broadcast.9384)
  %add.4735 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5432, %multiply.5433)
  %concatenate.415 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4734, %add.4735), dimensions={3}
  %dot.983 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.415, %all-gather.395), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4736 = bf16[1,4096,4096]{2,1,0} add(%dot.982, %dot.983)
  %copy.3917 = bf16[1,4096,4096]{2,1,0} copy(%add.4736)
  %get-tuple-element.1686 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.200), index=0
  %copy.3918 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1686)
  %slice.682 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3918), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.5435 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.682, %broadcast.9377)
  %slice.683 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3918), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.5437 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.683, %broadcast.9376)
  %add.4737 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5435, %multiply.5437)
  %multiply.5439 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.682, %broadcast.9376)
  %negate.290 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.683)
  %multiply.5440 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.290, %broadcast.9377)
  %add.4738 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5439, %multiply.5440)
  %concatenate.416 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4737, %add.4738), dimensions={3}
  %dot.984 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.416, %all-gather.394), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3919 = bf16[1,4096,4096]{2,1,0} copy(%dot.984)
  %add.4739 = bf16[1,4096,4096]{2,1,0} add(%copy.3917, %copy.3919)
  %copy.3920 = bf16[1,4096,4096]{2,1,0} copy(%add.4739)
  %multiply.5441 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3920, %broadcast.9372)
  %convert.2314 = f32[1,4096,4096]{2,1,0} convert(%multiply.5441)
  %multiply.5442 = f32[1,4096,4096]{2,1,0} multiply(%convert.2314, %broadcast.9371)
  %multiply.5443 = f32[1,4096,4096]{2,1,0} multiply(%convert.2279, %convert.2314)
  %reduce.836 = f32[1,4096]{1,0} reduce(%multiply.5443, %constant.3956), dimensions={2}, to_apply=%region_986.25538
  %reshape.19264 = f32[1,4096,1]{2,1,0} reshape(%reduce.836)
  %divide.975 = f32[1,4096,1]{2,1,0} divide(%rsqrt.177, %reshape.19088)
  %multiply.5444 = f32[1,4096,1]{2,1,0} multiply(%divide.975, %broadcast.7210)
  %multiply.5446 = f32[1,4096,1]{2,1,0} multiply(%reshape.19264, %multiply.5444)
  %multiply.5447 = f32[1,4096,1]{2,1,0} multiply(%multiply.5446, %broadcast.7211)
  %reshape.19265 = f32[1,4096]{1,0} reshape(%multiply.5447)
  %broadcast.9448 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19265), dimensions={0,1}
  %multiply.5448 = f32[1,4096,4096]{2,1,0} multiply(%convert.2279, %broadcast.9448)
  %add.4740 = f32[1,4096,4096]{2,1,0} add(%multiply.5442, %multiply.5448)
  %convert.2315 = bf16[1,4096,4096]{2,1,0} convert(%add.4740)
  %add.4741 = bf16[1,4096,4096]{2,1,0} add(%add.4719, %convert.2315)
  %copy.3921 = bf16[1,4096,4096]{2,1,0} copy(%add.4741)
  %tuple.348 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.73, %param.74, %param.75, %param.76, %param.72, /*index=5*/%param.67, %param.69, %param.71, %param.68, %param.70, /*index=10*/%copy.2294, %param.10, %param.7, %copy.3921)
  %opt-barrier.25 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.348)
  %get-tuple-element.1687 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.25), index=13
  %copy.3922 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1687)
  %iota.2195 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1688 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.25), index=10
  %copy.3923 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1688)
  %convert.2316 = f32[1,4096,4096]{2,1,0} convert(%copy.3923)
  %multiply.5450 = f32[1,4096,4096]{2,1,0} multiply(%convert.2316, %convert.2316)
  %reduce.837 = f32[1,4096]{1,0} reduce(%multiply.5450, %constant.3956), dimensions={2}, to_apply=%region_988.25581
  %multiply.5451 = f32[1,4096]{1,0} multiply(%reduce.837, %broadcast.5380)
  %add.4743 = f32[1,4096]{1,0} add(%multiply.5451, %broadcast.5381)
  %reshape.19267 = f32[1,4096,1]{2,1,0} reshape(%add.4743)
  %rsqrt.179 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.19267)
  %reshape.19268 = f32[1,4096]{1,0} reshape(%rsqrt.179)
  %broadcast.9452 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19268), dimensions={0,1}
  %multiply.5452 = f32[1,4096,4096]{2,1,0} multiply(%convert.2316, %broadcast.9452)
  %convert.2317 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5452)
  %get-tuple-element.1689 = bf16[4096]{0} get-tuple-element(%opt-barrier.25), index=5
  %broadcast.9453 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1689), dimensions={2}
  %multiply.5453 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2317, %broadcast.9453)
  %copy.3924 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5453)
  %copy.3925 = bf16[1,4096,4096]{2,1,0} copy(%copy.3924)
  %get-tuple-element.1690 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.25), index=8
  %all-gather.401 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1690), channel_id=960, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.985 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3925, %all-gather.401), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.684 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.985), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1691 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.25), index=12
  %convert.2318 = f32[1,4096]{1,0} convert(%get-tuple-element.1691)
  %broadcast.9454 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2318), dimensions={0,1}
  %divide.976 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9454, %broadcast.5388)
  %cosine.115 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.976)
  %convert.2320 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.115)
  %reshape.19271 = bf16[1,4096,64]{2,1,0} reshape(%convert.2320)
  %broadcast.9458 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.19271), dimensions={0,1,3}
  %multiply.5457 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.684, %broadcast.9458)
  %slice.685 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.985), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.114 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.976)
  %convert.2321 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.114)
  %reshape.19273 = bf16[1,4096,64]{2,1,0} reshape(%convert.2321)
  %broadcast.9461 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.19273), dimensions={0,1,3}
  %multiply.5459 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.685, %broadcast.9461)
  %subtract.623 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.5457, %multiply.5459)
  %multiply.5460 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.685, %broadcast.9458)
  %multiply.5462 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.684, %broadcast.9461)
  %add.4744 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5460, %multiply.5462)
  %concatenate.417 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.623, %add.4744), dimensions={3}
  %copy.3926 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.417)
  %get-tuple-element.1692 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.25), index=6
  %all-gather.402 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1692), channel_id=961, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.986 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3925, %all-gather.402), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.686 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.986), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.9468 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.19271), dimensions={0,1,3}
  %multiply.5466 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.686, %broadcast.9468)
  %slice.687 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.986), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.9469 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.19273), dimensions={0,1,3}
  %multiply.5468 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.687, %broadcast.9469)
  %subtract.624 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.5466, %multiply.5468)
  %multiply.5469 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.687, %broadcast.9468)
  %multiply.5470 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.686, %broadcast.9469)
  %add.4745 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5469, %multiply.5470)
  %concatenate.418 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.624, %add.4745), dimensions={3}
  %copy.3928 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.418)
  %get-tuple-element.1693 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.25), index=9
  %all-gather.403 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1693), channel_id=962, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.987 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3925, %all-gather.403), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3929 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.987)
  %get-tuple-element.1694 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.25), index=11
  %broadcast.9475 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1694), dimensions={0,1}
  %broadcast.9477 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1694), dimensions={0,2}
  %compare.3527 = pred[1,4096,4096]{2,1,0} compare(%broadcast.9475, %broadcast.9477), direction=EQ
  %and.474 = pred[1,4096,4096]{2,1,0} and(%compare.3527, %broadcast.5406)
  %select.2258 = f32[1,4096,4096]{2,1,0} select(%and.474, %broadcast.5407, %broadcast.5408)
  %compare.3529 = pred[1,4096,4096]{2,1,0} compare(%select.2258, %broadcast.5407), direction=NE
  %not.121 = pred[1,4096,4096]{2,1,0} not(%compare.3529)
  %convert.2326 = s32[1,4096,4096]{2,1,0} convert(%not.121)
  %reduce.838 = s32[1,4096]{1,0} reduce(%convert.2326, %constant.3783), dimensions={1}, to_apply=%region_989.25715
  %reshape.19285 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.838)
  %slice.688 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.19285), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.19287 = s32[1,1]{1,0} reshape(%slice.688)
  %reshape.19306 = s32[1]{0} reshape(%reshape.19287)
  %compare.3542 = pred[1]{0} compare(%reshape.19306, %constant.4022), direction=LT
  %select.2268 = s32[1]{0} select(%compare.3542, %reshape.11470, %reshape.19306)
  %scatter.963 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2268), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.57
  %reduce.839 = s32[1,4096]{1,0} reduce(%convert.2326, %constant.3783), dimensions={2}, to_apply=%region_990.25723
  %reshape.19288 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.839)
  %reduce.840 = s32[1,1]{1,0} reduce(%reshape.19288, %constant.4014), dimensions={3,2}, to_apply=%region_991.25728
  %reshape.19325 = s32[1]{0} reshape(%reduce.840)
  %compare.3555 = pred[1]{0} compare(%reshape.19325, %constant.4022), direction=LT
  %select.2278 = s32[1]{0} select(%compare.3555, %reshape.11470, %reshape.19325)
  %scatter.968 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2278), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.57
  %custom-call.201 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3926, %copy.3928, %copy.3929, %constant.3999, %scatter.963, /*index=5*/%scatter.968, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1700 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.201), index=0
  %copy.3930 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1700)
  %get-tuple-element.1701 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.25), index=7
  %all-gather.404 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1701), channel_id=963, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.988 = bf16[1,4096,4096]{2,1,0} dot(%copy.3930, %all-gather.404), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3931 = bf16[1,4096,4096]{2,1,0} copy(%dot.988)
  %add.4758 = bf16[1,4096,4096]{2,1,0} add(%copy.3923, %copy.3931)
  %convert.2330 = f32[1,4096,4096]{2,1,0} convert(%add.4758)
  %multiply.5473 = f32[1,4096,4096]{2,1,0} multiply(%convert.2330, %convert.2330)
  %reduce.841 = f32[1,4096]{1,0} reduce(%multiply.5473, %constant.3956), dimensions={2}, to_apply=%region_992.25744
  %multiply.5474 = f32[1,4096]{1,0} multiply(%reduce.841, %broadcast.5380)
  %add.4759 = f32[1,4096]{1,0} add(%multiply.5474, %broadcast.5381)
  %reshape.19327 = f32[1,4096,1]{2,1,0} reshape(%add.4759)
  %rsqrt.180 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.19327)
  %reshape.19328 = f32[1,4096]{1,0} reshape(%rsqrt.180)
  %broadcast.9493 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19328), dimensions={0,1}
  %multiply.5475 = f32[1,4096,4096]{2,1,0} multiply(%convert.2330, %broadcast.9493)
  %convert.2331 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5475)
  %get-tuple-element.1702 = bf16[4096]{0} get-tuple-element(%opt-barrier.25), index=4
  %broadcast.9494 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1702), dimensions={2}
  %multiply.5476 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2331, %broadcast.9494)
  %copy.3932 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5476)
  %get-tuple-element.1705 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.25), index=0
  %all-gather.405 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1705), channel_id=964, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.989 = bf16[1,4096,8]{2,1,0} dot(%copy.3932, %all-gather.405), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3933 = bf16[1,4096,8]{2,1,0} copy(%dot.989)
  %reshape.19329 = bf16[4096,8]{1,0} reshape(%copy.3933)
  %custom-call.202 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.19329), custom_call_target="TopK", called_computations={%compare-greater-than.57.clone}
  %get-tuple-element.1706 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.202), index=0
  %get-tuple-element.1707 = s32[4096,2]{1,0} get-tuple-element(%custom-call.202), index=1
  %add.4761 = s32[4096,2]{1,0} add(%get-tuple-element.1707, %broadcast.5420)
  %sort.287 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1706, %add.4761), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.57
  %get-tuple-element.1709 = s32[4096,2]{1,0} get-tuple-element(%sort.287), index=1
  %slice.690 = s32[4096,2]{1,0} slice(%get-tuple-element.1709), slice={[0:4096], [0:2]}
  %all-gather.407 = s32[32768,2]{1,0} all-gather(%slice.690), channel_id=966, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2038 = s32[4096,2]{1,0} dynamic-slice(%all-gather.407, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.19333 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.2038)
  %compare.3556 = pred[1,4096,2]{2,1,0} compare(%reshape.19333, %broadcast.5421), direction=LT
  %add.4762 = s32[1,4096,2]{2,1,0} add(%reshape.19333, %broadcast.5422)
  %select.2279 = s32[1,4096,2]{2,1,0} select(%compare.3556, %add.4762, %reshape.19333)
  %reshape.19334 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2279)
  %concatenate.419 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2195, %reshape.19334), dimensions={3}
  %subtract.630 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.419, %broadcast.5433)
  %scatter.969 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.630, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_995.25823
  %gather.82 = u32[1,4096,2]{2,1,0} gather(%scatter.969, %subtract.630), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3558 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.82), direction=EQ
  %get-tuple-element.1708 = bf16[4096,2]{1,0} get-tuple-element(%sort.287), index=0
  %slice.689 = bf16[4096,2]{1,0} slice(%get-tuple-element.1708), slice={[0:4096], [0:2]}
  %all-gather.406 = bf16[32768,2]{1,0} all-gather(%slice.689), channel_id=965, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2048 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.406, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2334 = f32[4096,2]{1,0} convert(%dynamic-slice.2048)
  %reshape.19356 = f32[1,4096,2]{2,1,0} reshape(%convert.2334)
  %reduce.842 = f32[4096]{0} reduce(%convert.2334, %constant.4073), dimensions={1}, to_apply=%region_993.25773
  %reshape.19357 = f32[1,4096]{1,0} reshape(%reduce.842)
  %broadcast.9505 = f32[1,4096,2]{2,1,0} broadcast(%reshape.19357), dimensions={0,1}
  %subtract.629 = f32[1,4096,2]{2,1,0} subtract(%reshape.19356, %broadcast.9505)
  %exponential.241 = f32[1,4096,2]{2,1,0} exponential(%subtract.629)
  %reduce.843 = f32[1,4096]{1,0} reduce(%exponential.241, %constant.3956), dimensions={2}, to_apply=%region_994.25785
  %broadcast.9506 = f32[1,4096,2]{2,1,0} broadcast(%reduce.843), dimensions={0,1}
  %divide.980 = f32[1,4096,2]{2,1,0} divide(%exponential.241, %broadcast.9506)
  %convert.2335 = bf16[1,4096,2]{2,1,0} convert(%divide.980)
  %select.2280 = bf16[1,4096,2]{2,1,0} select(%compare.3558, %convert.2335, %broadcast.5432)
  %scatter.970 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.630, %select.2280), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_996.25832
  %broadcast.9508 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.19333), dimensions={0,1,2}
  %iota.2203 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3559 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.9508, %iota.2203), direction=EQ
  %convert.2337 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3559)
  %reshape.19370 = s32[1,8192,8]{2,1,0} reshape(%convert.2337)
  %copy.3934 = s32[1,8192,8]{2,1,0} copy(%reshape.19370)
  %reduce-window.414 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3934, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.24
  %reshape.19372 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.414)
  %copy.3935 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.19372)
  %compare.3561 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3935, %broadcast.5435), direction=LE
  %select.2281 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3561, %convert.2337, %broadcast.5436)
  %reduce.844 = s32[1,4096,8]{2,1,0} reduce(%select.2281, %constant.3783), dimensions={2}, to_apply=%region_997.25846
  %convert.2338 = bf16[1,4096,8]{2,1,0} convert(%reduce.844)
  %multiply.5482 = bf16[1,4096,8]{2,1,0} multiply(%scatter.970, %convert.2338)
  %broadcast.9511 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5482), dimensions={0,1,2}
  %multiply.5483 = s32[1,8192,8]{2,1,0} multiply(%copy.3934, %reduce-window.414)
  %reshape.19373 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.5483)
  %reduce.845 = s32[1,4096,8]{2,1,0} reduce(%reshape.19373, %constant.3783), dimensions={2}, to_apply=%region_998.25855
  %multiply.5485 = s32[1,4096,8]{2,1,0} multiply(%reduce.845, %reduce.844)
  %broadcast.9513 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5485), dimensions={0,1,2}
  %iota.2204 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3562 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.9513, %iota.2204), direction=EQ
  %convert.2339 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3562)
  %convert.2340 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2339)
  %multiply.5486 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.9511, %convert.2340)
  %slice.691 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.5486), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3564 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.691, %broadcast.5439), direction=NE
  %copy.3936 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3564)
  %convert.2341 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3936)
  %dot.990 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2341, %copy.3932), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19376 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.990)
  %all-to-all.164 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19376), channel_id=973, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.271 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.164), dimensions={1,0,2,3,4}
  %reshape.19377 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.271)
  %transpose.272 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.19377), dimensions={1,0,2,3}
  %copy.3937 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.272)
  %get-tuple-element.1714 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.25), index=1
  %copy.3938 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1714)
  %dot.991 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3937, %copy.3938), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3939 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.991)
  %negate.291 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3939)
  %exponential.242 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.291)
  %add.4767 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.242, %broadcast.5440)
  %divide.981 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4767)
  %multiply.5491 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3939, %divide.981)
  %copy.3940 = bf16[1,4096,4096]{2,1,0} copy(%copy.3922)
  %copy.3941 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.691)
  %dot.992 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3940, %copy.3941), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19380 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.992)
  %all-to-all.165 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.19380), channel_id=974, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.273 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.165), dimensions={2,0,1,3,4}
  %reshape.19381 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.273)
  %transpose.274 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.19381), dimensions={2,0,3,1}
  %copy.3942 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.274)
  %get-tuple-element.1715 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.25), index=3
  %copy.3943 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1715)
  %dot.993 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3942, %copy.3943), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.5494 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5491, %dot.993)
  %copy.3944 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.5494)
  %get-tuple-element.1716 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.25), index=2
  %copy.3945 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1716)
  %dot.994 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3944, %copy.3945), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.995 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3937, %copy.3945), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3946 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.995)
  %multiply.5495 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.993, %copy.3946)
  %multiply.5496 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5495, %divide.981)
  %multiply.5497 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3939, %multiply.5495)
  %subtract.631 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.981)
  %multiply.5498 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.981, %subtract.631)
  %multiply.5500 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5497, %multiply.5498)
  %add.4768 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.5496, %multiply.5500)
  %copy.3947 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4768)
  %dot.996 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3947, %copy.3938), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4769 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.994, %dot.996)
  %copy.3948 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4769)
  %transpose.275 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3948), dimensions={1,0,2,3}
  %reshape.19385 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.275)
  %all-to-all.166 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19385), channel_id=975, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.276 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.166), dimensions={1,0,2,3,4}
  %reshape.19386 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.276)
  %dot.997 = bf16[1,4096,4096]{2,1,0} dot(%convert.2341, %reshape.19386), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.19388 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.2038)
  %compare.3566 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.419, %broadcast.7265), direction=GE
  %compare.3567 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.419, %broadcast.7267), direction=LE
  %and.479 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3566, %compare.3567)
  %reduce.846 = pred[1,4096,2]{2,1,0} reduce(%and.479, %constant.4025), dimensions={3}, to_apply=%region_1001.25940
  %multiply.5503 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5491, %copy.3946)
  %dot.998 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.5503, %copy.3943), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3949 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.998)
  %reshape.19390 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3949)
  %all-to-all.167 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19390), channel_id=976, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.277 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.167), dimensions={1,0,2,3,4}
  %reshape.19391 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.277)
  %dot.999 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3940, %reshape.19391), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3950 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.999)
  %pad.25 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3950, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.5507 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.25, %convert.2340)
  %reduce.847 = bf16[1,4096,8]{2,1,0} reduce(%multiply.5507, %constant.3795), dimensions={3}, to_apply=%region_999.25922
  %multiply.5508 = bf16[1,4096,8]{2,1,0} multiply(%reduce.847, %convert.2338)
  %gather.83 = bf16[1,4096,2]{2,1,0} gather(%multiply.5508, %subtract.630), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2282 = bf16[1,4096,2]{2,1,0} select(%reduce.846, %gather.83, %broadcast.5432)
  %select.2283 = bf16[1,4096,2]{2,1,0} select(%compare.3558, %select.2282, %broadcast.5432)
  %convert.2343 = f32[1,4096,2]{2,1,0} convert(%select.2283)
  %divide.982 = f32[1,4096,2]{2,1,0} divide(%convert.2343, %broadcast.9506)
  %multiply.5509 = f32[1,4096]{1,0} multiply(%reduce.843, %reduce.843)
  %divide.983 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.5509)
  %broadcast.9524 = f32[1,4096,2]{2,1,0} broadcast(%divide.983), dimensions={0,1}
  %multiply.5510 = f32[1,4096,2]{2,1,0} multiply(%convert.2343, %broadcast.9524)
  %multiply.5511 = f32[1,4096,2]{2,1,0} multiply(%multiply.5510, %exponential.241)
  %reduce.848 = f32[1,4096]{1,0} reduce(%multiply.5511, %constant.3956), dimensions={2}, to_apply=%region_1002.25954
  %negate.292 = f32[1,4096]{1,0} negate(%reduce.848)
  %broadcast.9526 = f32[1,4096,2]{2,1,0} broadcast(%negate.292), dimensions={0,1}
  %add.4770 = f32[1,4096,2]{2,1,0} add(%divide.982, %broadcast.9526)
  %multiply.5512 = f32[1,4096,2]{2,1,0} multiply(%add.4770, %exponential.241)
  %convert.2344 = bf16[1,4096,2]{2,1,0} convert(%multiply.5512)
  %scatter.971 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.19388, %convert.2344), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_1004.25974
  %copy.3951 = bf16[1,4096,8]{2,1,0} copy(%scatter.971)
  %dot.1000 = bf16[1,4096,4096]{2,1,0} dot(%copy.3951, %all-gather.405), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4771 = bf16[1,4096,4096]{1,2,0} add(%dot.997, %dot.1000)
  %copy.3952 = bf16[1,4096,4096]{2,1,0} copy(%add.4771)
  %multiply.5513 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3952, %broadcast.9494)
  %convert.2345 = f32[1,4096,4096]{2,1,0} convert(%multiply.5513)
  %multiply.5514 = f32[1,4096,4096]{2,1,0} multiply(%convert.2345, %broadcast.9493)
  %multiply.5515 = f32[1,4096,4096]{2,1,0} multiply(%convert.2330, %convert.2345)
  %reduce.849 = f32[1,4096]{1,0} reduce(%multiply.5515, %constant.3956), dimensions={2}, to_apply=%region_1007.26003
  %reshape.19404 = f32[1,4096,1]{2,1,0} reshape(%reduce.849)
  %divide.984 = f32[1,4096,1]{2,1,0} divide(%rsqrt.180, %reshape.19327)
  %multiply.5516 = f32[1,4096,1]{2,1,0} multiply(%divide.984, %broadcast.7210)
  %multiply.5517 = f32[1,4096,1]{2,1,0} multiply(%reshape.19404, %multiply.5516)
  %multiply.5518 = f32[1,4096,1]{2,1,0} multiply(%multiply.5517, %broadcast.7211)
  %reshape.19405 = f32[1,4096]{1,0} reshape(%multiply.5518)
  %broadcast.9530 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19405), dimensions={0,1}
  %multiply.5519 = f32[1,4096,4096]{2,1,0} multiply(%convert.2330, %broadcast.9530)
  %add.4772 = f32[1,4096,4096]{2,1,0} add(%multiply.5514, %multiply.5519)
  %convert.2346 = bf16[1,4096,4096]{2,1,0} convert(%add.4772)
  %add.4773 = bf16[1,4096,4096]{2,1,0} add(%copy.3922, %convert.2346)
  %get-tuple-element.1717 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.201), index=1
  %get-tuple-element.1718 = u32[2,4]{1,0} get-tuple-element(%custom-call.201), index=2
  %copy.3953 = bf16[1,4096,4096]{2,1,0} copy(%add.4773)
  %dot.1001 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3953, %all-gather.404), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3954 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1001)
  %custom-call.203 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3926, %copy.3928, %copy.3929, %constant.3999, %get-tuple-element.1717, /*index=5*/%get-tuple-element.1718, %get-tuple-element.1700, %copy.3954, %scatter.963, %scatter.968, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1725 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.203), index=2
  %copy.3955 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1725)
  %dot.1002 = bf16[1,4096,4096]{2,1,0} dot(%copy.3955, %all-gather.403), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1726 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.203), index=1
  %copy.3956 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1726)
  %slice.692 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3956), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.5522 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.692, %broadcast.9469)
  %slice.693 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3956), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.5524 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.693, %broadcast.9468)
  %add.4789 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5522, %multiply.5524)
  %multiply.5526 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.692, %broadcast.9468)
  %negate.293 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.693)
  %multiply.5527 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.293, %broadcast.9469)
  %add.4790 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5526, %multiply.5527)
  %concatenate.424 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4789, %add.4790), dimensions={3}
  %dot.1003 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.424, %all-gather.402), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4791 = bf16[1,4096,4096]{2,1,0} add(%dot.1002, %dot.1003)
  %copy.3957 = bf16[1,4096,4096]{2,1,0} copy(%add.4791)
  %get-tuple-element.1727 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.203), index=0
  %copy.3958 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1727)
  %slice.694 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3958), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.5529 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.694, %broadcast.9461)
  %slice.695 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3958), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.5532 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.695, %broadcast.9458)
  %add.4792 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5529, %multiply.5532)
  %multiply.5533 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.694, %broadcast.9458)
  %negate.294 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.695)
  %multiply.5535 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.294, %broadcast.9461)
  %add.4793 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5533, %multiply.5535)
  %concatenate.425 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4792, %add.4793), dimensions={3}
  %dot.1004 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.425, %all-gather.401), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3959 = bf16[1,4096,4096]{2,1,0} copy(%dot.1004)
  %add.4795 = bf16[1,4096,4096]{2,1,0} add(%copy.3957, %copy.3959)
  %copy.3960 = bf16[1,4096,4096]{2,1,0} copy(%add.4795)
  %multiply.5536 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3960, %broadcast.9453)
  %convert.2349 = f32[1,4096,4096]{2,1,0} convert(%multiply.5536)
  %multiply.5537 = f32[1,4096,4096]{2,1,0} multiply(%convert.2349, %broadcast.9452)
  %multiply.5538 = f32[1,4096,4096]{2,1,0} multiply(%convert.2316, %convert.2349)
  %reduce.850 = f32[1,4096]{1,0} reduce(%multiply.5538, %constant.3956), dimensions={2}, to_apply=%region_1011.26114
  %reshape.19458 = f32[1,4096,1]{2,1,0} reshape(%reduce.850)
  %divide.987 = f32[1,4096,1]{2,1,0} divide(%rsqrt.179, %reshape.19267)
  %multiply.5540 = f32[1,4096,1]{2,1,0} multiply(%divide.987, %broadcast.7210)
  %multiply.5541 = f32[1,4096,1]{2,1,0} multiply(%reshape.19458, %multiply.5540)
  %multiply.5542 = f32[1,4096,1]{2,1,0} multiply(%multiply.5541, %broadcast.7211)
  %reshape.19459 = f32[1,4096]{1,0} reshape(%multiply.5542)
  %broadcast.9555 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19459), dimensions={0,1}
  %multiply.5543 = f32[1,4096,4096]{2,1,0} multiply(%convert.2316, %broadcast.9555)
  %add.4796 = f32[1,4096,4096]{2,1,0} add(%multiply.5537, %multiply.5543)
  %convert.2350 = bf16[1,4096,4096]{2,1,0} convert(%add.4796)
  %add.4797 = bf16[1,4096,4096]{2,1,0} add(%add.4773, %convert.2350)
  %copy.3961 = bf16[1,4096,4096]{2,1,0} copy(%add.4797)
  %tuple.353 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.63, %param.64, %param.65, %param.66, %param.62, /*index=5*/%param.57, %param.59, %param.61, %param.58, %param.60, /*index=10*/%copy.2270, %param.10, %param.7, %copy.3961)
  %opt-barrier.26 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.353)
  %get-tuple-element.1728 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.26), index=13
  %copy.3962 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1728)
  %iota.2206 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1729 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.26), index=10
  %copy.3963 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1729)
  %convert.2351 = f32[1,4096,4096]{2,1,0} convert(%copy.3963)
  %multiply.5545 = f32[1,4096,4096]{2,1,0} multiply(%convert.2351, %convert.2351)
  %reduce.851 = f32[1,4096]{1,0} reduce(%multiply.5545, %constant.3956), dimensions={2}, to_apply=%region_1013.26157
  %multiply.5546 = f32[1,4096]{1,0} multiply(%reduce.851, %broadcast.5380)
  %add.4799 = f32[1,4096]{1,0} add(%multiply.5546, %broadcast.5381)
  %reshape.19463 = f32[1,4096,1]{2,1,0} reshape(%add.4799)
  %rsqrt.181 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.19463)
  %reshape.19464 = f32[1,4096]{1,0} reshape(%rsqrt.181)
  %broadcast.9559 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19464), dimensions={0,1}
  %multiply.5547 = f32[1,4096,4096]{2,1,0} multiply(%convert.2351, %broadcast.9559)
  %convert.2352 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5547)
  %get-tuple-element.1730 = bf16[4096]{0} get-tuple-element(%opt-barrier.26), index=5
  %broadcast.9560 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1730), dimensions={2}
  %multiply.5548 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2352, %broadcast.9560)
  %copy.3964 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5548)
  %copy.3965 = bf16[1,4096,4096]{2,1,0} copy(%copy.3964)
  %get-tuple-element.1731 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.26), index=8
  %all-gather.408 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1731), channel_id=979, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1005 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3965, %all-gather.408), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.696 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1005), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1732 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.26), index=12
  %convert.2353 = f32[1,4096]{1,0} convert(%get-tuple-element.1732)
  %broadcast.9561 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2353), dimensions={0,1}
  %divide.988 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9561, %broadcast.5388)
  %cosine.117 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.988)
  %convert.2355 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.117)
  %reshape.19466 = bf16[1,4096,64]{2,1,0} reshape(%convert.2355)
  %broadcast.9564 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.19466), dimensions={0,1,3}
  %multiply.5552 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.696, %broadcast.9564)
  %slice.697 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1005), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.116 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.988)
  %convert.2356 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.116)
  %reshape.19468 = bf16[1,4096,64]{2,1,0} reshape(%convert.2356)
  %broadcast.9565 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.19468), dimensions={0,1,3}
  %multiply.5554 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.697, %broadcast.9565)
  %subtract.635 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.5552, %multiply.5554)
  %multiply.5555 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.697, %broadcast.9564)
  %multiply.5556 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.696, %broadcast.9565)
  %add.4800 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5555, %multiply.5556)
  %concatenate.426 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.635, %add.4800), dimensions={3}
  %copy.3966 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.426)
  %get-tuple-element.1733 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.26), index=6
  %all-gather.409 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1733), channel_id=980, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1006 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3965, %all-gather.409), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.698 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1006), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.9571 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.19466), dimensions={0,1,3}
  %multiply.5560 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.698, %broadcast.9571)
  %slice.699 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1006), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.9572 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.19468), dimensions={0,1,3}
  %multiply.5563 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.699, %broadcast.9572)
  %subtract.636 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.5560, %multiply.5563)
  %multiply.5564 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.699, %broadcast.9571)
  %multiply.5566 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.698, %broadcast.9572)
  %add.4801 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5564, %multiply.5566)
  %concatenate.427 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.636, %add.4801), dimensions={3}
  %copy.3968 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.427)
  %get-tuple-element.1734 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.26), index=9
  %all-gather.410 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1734), channel_id=981, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1007 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.3965, %all-gather.410), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3969 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1007)
  %get-tuple-element.1735 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.26), index=11
  %broadcast.9575 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1735), dimensions={0,1}
  %broadcast.9576 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1735), dimensions={0,2}
  %compare.3595 = pred[1,4096,4096]{2,1,0} compare(%broadcast.9575, %broadcast.9576), direction=EQ
  %and.484 = pred[1,4096,4096]{2,1,0} and(%compare.3595, %broadcast.5406)
  %select.2304 = f32[1,4096,4096]{2,1,0} select(%and.484, %broadcast.5407, %broadcast.5408)
  %compare.3598 = pred[1,4096,4096]{2,1,0} compare(%select.2304, %broadcast.5407), direction=NE
  %not.122 = pred[1,4096,4096]{2,1,0} not(%compare.3598)
  %convert.2361 = s32[1,4096,4096]{2,1,0} convert(%not.122)
  %reduce.852 = s32[1,4096]{1,0} reduce(%convert.2361, %constant.3783), dimensions={1}, to_apply=%region_1014.26291
  %reshape.19482 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.852)
  %slice.700 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.19482), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.19485 = s32[1,1]{1,0} reshape(%slice.700)
  %reshape.19501 = s32[1]{0} reshape(%reshape.19485)
  %compare.3611 = pred[1]{0} compare(%reshape.19501, %constant.4022), direction=LT
  %select.2314 = s32[1]{0} select(%compare.3611, %reshape.11470, %reshape.19501)
  %scatter.986 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2314), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.58
  %reduce.853 = s32[1,4096]{1,0} reduce(%convert.2361, %constant.3783), dimensions={2}, to_apply=%region_1015.26299
  %reshape.19486 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.853)
  %reduce.854 = s32[1,1]{1,0} reduce(%reshape.19486, %constant.4014), dimensions={3,2}, to_apply=%region_1016.26304
  %reshape.19518 = s32[1]{0} reshape(%reduce.854)
  %compare.3625 = pred[1]{0} compare(%reshape.19518, %constant.4022), direction=LT
  %select.2324 = s32[1]{0} select(%compare.3625, %reshape.11470, %reshape.19518)
  %scatter.991 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2324), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.58
  %custom-call.204 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.3966, %copy.3968, %copy.3969, %constant.3999, %scatter.986, /*index=5*/%scatter.991, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1741 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.204), index=0
  %copy.3970 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1741)
  %get-tuple-element.1742 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.26), index=7
  %all-gather.411 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1742), channel_id=982, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1008 = bf16[1,4096,4096]{2,1,0} dot(%copy.3970, %all-gather.411), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.3971 = bf16[1,4096,4096]{2,1,0} copy(%dot.1008)
  %add.4815 = bf16[1,4096,4096]{2,1,0} add(%copy.3963, %copy.3971)
  %convert.2365 = f32[1,4096,4096]{2,1,0} convert(%add.4815)
  %multiply.5568 = f32[1,4096,4096]{2,1,0} multiply(%convert.2365, %convert.2365)
  %reduce.855 = f32[1,4096]{1,0} reduce(%multiply.5568, %constant.3956), dimensions={2}, to_apply=%region_1017.26320
  %multiply.5569 = f32[1,4096]{1,0} multiply(%reduce.855, %broadcast.5380)
  %add.4816 = f32[1,4096]{1,0} add(%multiply.5569, %broadcast.5381)
  %reshape.19520 = f32[1,4096,1]{2,1,0} reshape(%add.4816)
  %rsqrt.182 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.19520)
  %reshape.19521 = f32[1,4096]{1,0} reshape(%rsqrt.182)
  %broadcast.9588 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19521), dimensions={0,1}
  %multiply.5571 = f32[1,4096,4096]{2,1,0} multiply(%convert.2365, %broadcast.9588)
  %convert.2366 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5571)
  %get-tuple-element.1743 = bf16[4096]{0} get-tuple-element(%opt-barrier.26), index=4
  %broadcast.9589 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1743), dimensions={2}
  %multiply.5572 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2366, %broadcast.9589)
  %copy.3972 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5572)
  %get-tuple-element.1744 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.26), index=0
  %all-gather.412 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1744), channel_id=983, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1009 = bf16[1,4096,8]{2,1,0} dot(%copy.3972, %all-gather.412), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.3973 = bf16[1,4096,8]{2,1,0} copy(%dot.1009)
  %reshape.19522 = bf16[4096,8]{1,0} reshape(%copy.3973)
  %custom-call.205 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.19522), custom_call_target="TopK", called_computations={%compare-greater-than.58.clone}
  %get-tuple-element.1745 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.205), index=0
  %get-tuple-element.1746 = s32[4096,2]{1,0} get-tuple-element(%custom-call.205), index=1
  %add.4817 = s32[4096,2]{1,0} add(%get-tuple-element.1746, %broadcast.5420)
  %sort.292 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1745, %add.4817), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.58
  %get-tuple-element.1748 = s32[4096,2]{1,0} get-tuple-element(%sort.292), index=1
  %slice.702 = s32[4096,2]{1,0} slice(%get-tuple-element.1748), slice={[0:4096], [0:2]}
  %all-gather.414 = s32[32768,2]{1,0} all-gather(%slice.702), channel_id=985, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2082 = s32[4096,2]{1,0} dynamic-slice(%all-gather.414, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.19527 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.2082)
  %compare.3626 = pred[1,4096,2]{2,1,0} compare(%reshape.19527, %broadcast.5421), direction=LT
  %add.4819 = s32[1,4096,2]{2,1,0} add(%reshape.19527, %broadcast.5422)
  %select.2325 = s32[1,4096,2]{2,1,0} select(%compare.3626, %add.4819, %reshape.19527)
  %reshape.19528 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2325)
  %concatenate.428 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2206, %reshape.19528), dimensions={3}
  %subtract.642 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.428, %broadcast.5433)
  %scatter.992 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.642, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1020.26399
  %gather.84 = u32[1,4096,2]{2,1,0} gather(%scatter.992, %subtract.642), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3627 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.84), direction=EQ
  %get-tuple-element.1747 = bf16[4096,2]{1,0} get-tuple-element(%sort.292), index=0
  %slice.701 = bf16[4096,2]{1,0} slice(%get-tuple-element.1747), slice={[0:4096], [0:2]}
  %all-gather.413 = bf16[32768,2]{1,0} all-gather(%slice.701), channel_id=984, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2092 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.413, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2369 = f32[4096,2]{1,0} convert(%dynamic-slice.2092)
  %reshape.19544 = f32[1,4096,2]{2,1,0} reshape(%convert.2369)
  %reduce.856 = f32[4096]{0} reduce(%convert.2369, %constant.4073), dimensions={1}, to_apply=%region_1018.26349
  %reshape.19545 = f32[1,4096]{1,0} reshape(%reduce.856)
  %broadcast.9598 = f32[1,4096,2]{2,1,0} broadcast(%reshape.19545), dimensions={0,1}
  %subtract.641 = f32[1,4096,2]{2,1,0} subtract(%reshape.19544, %broadcast.9598)
  %exponential.243 = f32[1,4096,2]{2,1,0} exponential(%subtract.641)
  %reduce.857 = f32[1,4096]{1,0} reduce(%exponential.243, %constant.3956), dimensions={2}, to_apply=%region_1019.26361
  %broadcast.9600 = f32[1,4096,2]{2,1,0} broadcast(%reduce.857), dimensions={0,1}
  %divide.992 = f32[1,4096,2]{2,1,0} divide(%exponential.243, %broadcast.9600)
  %convert.2370 = bf16[1,4096,2]{2,1,0} convert(%divide.992)
  %select.2326 = bf16[1,4096,2]{2,1,0} select(%compare.3627, %convert.2370, %broadcast.5432)
  %scatter.993 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.642, %select.2326), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1021.26408
  %broadcast.9603 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.19527), dimensions={0,1,2}
  %iota.2214 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3628 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.9603, %iota.2214), direction=EQ
  %convert.2371 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3628)
  %reshape.19554 = s32[1,8192,8]{2,1,0} reshape(%convert.2371)
  %copy.3974 = s32[1,8192,8]{2,1,0} copy(%reshape.19554)
  %reduce-window.419 = s32[1,8192,8]{2,1,0} reduce-window(%copy.3974, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.25
  %reshape.19556 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.419)
  %copy.3975 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.19556)
  %compare.3629 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.3975, %broadcast.5435), direction=LE
  %select.2327 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3629, %convert.2371, %broadcast.5436)
  %reduce.858 = s32[1,4096,8]{2,1,0} reduce(%select.2327, %constant.3783), dimensions={2}, to_apply=%region_1022.26422
  %convert.2372 = bf16[1,4096,8]{2,1,0} convert(%reduce.858)
  %multiply.5579 = bf16[1,4096,8]{2,1,0} multiply(%scatter.993, %convert.2372)
  %broadcast.9605 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5579), dimensions={0,1,2}
  %multiply.5580 = s32[1,8192,8]{2,1,0} multiply(%copy.3974, %reduce-window.419)
  %reshape.19557 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.5580)
  %reduce.859 = s32[1,4096,8]{2,1,0} reduce(%reshape.19557, %constant.3783), dimensions={2}, to_apply=%region_1023.26431
  %multiply.5581 = s32[1,4096,8]{2,1,0} multiply(%reduce.859, %reduce.858)
  %broadcast.9606 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5581), dimensions={0,1,2}
  %iota.2215 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3630 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.9606, %iota.2215), direction=EQ
  %convert.2373 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3630)
  %convert.2374 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2373)
  %multiply.5582 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.9605, %convert.2374)
  %slice.703 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.5582), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3631 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.703, %broadcast.5439), direction=NE
  %copy.3976 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3631)
  %convert.2375 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.3976)
  %dot.1010 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2375, %copy.3972), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19560 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1010)
  %all-to-all.168 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19560), channel_id=992, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.278 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.168), dimensions={1,0,2,3,4}
  %reshape.19561 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.278)
  %transpose.279 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.19561), dimensions={1,0,2,3}
  %copy.3977 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.279)
  %get-tuple-element.1753 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.26), index=1
  %copy.3978 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1753)
  %dot.1011 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3977, %copy.3978), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3979 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1011)
  %negate.295 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.3979)
  %exponential.244 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.295)
  %add.4824 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.244, %broadcast.5440)
  %divide.993 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4824)
  %multiply.5586 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3979, %divide.993)
  %copy.3980 = bf16[1,4096,4096]{2,1,0} copy(%copy.3962)
  %copy.3981 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.703)
  %dot.1012 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3980, %copy.3981), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19564 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1012)
  %all-to-all.169 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.19564), channel_id=993, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.280 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.169), dimensions={2,0,1,3,4}
  %reshape.19565 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.280)
  %transpose.281 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.19565), dimensions={2,0,3,1}
  %copy.3982 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.281)
  %get-tuple-element.1754 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.26), index=3
  %copy.3983 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1754)
  %dot.1013 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3982, %copy.3983), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.5589 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5586, %dot.1013)
  %copy.3984 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.5589)
  %get-tuple-element.1755 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.26), index=2
  %copy.3985 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1755)
  %dot.1014 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3984, %copy.3985), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1015 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.3977, %copy.3985), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3986 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1015)
  %multiply.5590 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1013, %copy.3986)
  %multiply.5591 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5590, %divide.993)
  %multiply.5592 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.3979, %multiply.5590)
  %subtract.643 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.993)
  %multiply.5593 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.993, %subtract.643)
  %multiply.5594 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5592, %multiply.5593)
  %add.4825 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.5591, %multiply.5594)
  %copy.3987 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4825)
  %dot.1016 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.3987, %copy.3978), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4826 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1014, %dot.1016)
  %copy.3988 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4826)
  %transpose.282 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.3988), dimensions={1,0,2,3}
  %reshape.19568 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.282)
  %all-to-all.170 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19568), channel_id=994, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.283 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.170), dimensions={1,0,2,3,4}
  %reshape.19569 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.283)
  %dot.1017 = bf16[1,4096,4096]{2,1,0} dot(%convert.2375, %reshape.19569), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.19571 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.2082)
  %compare.3633 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.428, %broadcast.7265), direction=GE
  %compare.3634 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.428, %broadcast.7267), direction=LE
  %and.489 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3633, %compare.3634)
  %reduce.860 = pred[1,4096,2]{2,1,0} reduce(%and.489, %constant.4025), dimensions={3}, to_apply=%region_1026.26516
  %multiply.5597 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5586, %copy.3986)
  %dot.1018 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.5597, %copy.3983), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.3989 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1018)
  %reshape.19573 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.3989)
  %all-to-all.171 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19573), channel_id=995, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.284 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.171), dimensions={1,0,2,3,4}
  %reshape.19574 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.284)
  %dot.1019 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.3980, %reshape.19574), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.3990 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1019)
  %pad.26 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.3990, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.5601 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.26, %convert.2374)
  %reduce.861 = bf16[1,4096,8]{2,1,0} reduce(%multiply.5601, %constant.3795), dimensions={3}, to_apply=%region_1024.26498
  %multiply.5602 = bf16[1,4096,8]{2,1,0} multiply(%reduce.861, %convert.2372)
  %gather.85 = bf16[1,4096,2]{2,1,0} gather(%multiply.5602, %subtract.642), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2328 = bf16[1,4096,2]{2,1,0} select(%reduce.860, %gather.85, %broadcast.5432)
  %select.2329 = bf16[1,4096,2]{2,1,0} select(%compare.3627, %select.2328, %broadcast.5432)
  %convert.2377 = f32[1,4096,2]{2,1,0} convert(%select.2329)
  %divide.994 = f32[1,4096,2]{2,1,0} divide(%convert.2377, %broadcast.9600)
  %multiply.5603 = f32[1,4096]{1,0} multiply(%reduce.857, %reduce.857)
  %divide.995 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.5603)
  %broadcast.9612 = f32[1,4096,2]{2,1,0} broadcast(%divide.995), dimensions={0,1}
  %multiply.5604 = f32[1,4096,2]{2,1,0} multiply(%convert.2377, %broadcast.9612)
  %multiply.5605 = f32[1,4096,2]{2,1,0} multiply(%multiply.5604, %exponential.243)
  %reduce.862 = f32[1,4096]{1,0} reduce(%multiply.5605, %constant.3956), dimensions={2}, to_apply=%region_1027.26530
  %negate.296 = f32[1,4096]{1,0} negate(%reduce.862)
  %broadcast.9613 = f32[1,4096,2]{2,1,0} broadcast(%negate.296), dimensions={0,1}
  %add.4828 = f32[1,4096,2]{2,1,0} add(%divide.994, %broadcast.9613)
  %multiply.5606 = f32[1,4096,2]{2,1,0} multiply(%add.4828, %exponential.243)
  %convert.2378 = bf16[1,4096,2]{2,1,0} convert(%multiply.5606)
  %scatter.994 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.19571, %convert.2378), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_1029.26550
  %copy.3991 = bf16[1,4096,8]{2,1,0} copy(%scatter.994)
  %dot.1020 = bf16[1,4096,4096]{2,1,0} dot(%copy.3991, %all-gather.412), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4829 = bf16[1,4096,4096]{1,2,0} add(%dot.1017, %dot.1020)
  %copy.3992 = bf16[1,4096,4096]{2,1,0} copy(%add.4829)
  %multiply.5607 = bf16[1,4096,4096]{2,1,0} multiply(%copy.3992, %broadcast.9589)
  %convert.2379 = f32[1,4096,4096]{2,1,0} convert(%multiply.5607)
  %multiply.5608 = f32[1,4096,4096]{2,1,0} multiply(%convert.2379, %broadcast.9588)
  %multiply.5609 = f32[1,4096,4096]{2,1,0} multiply(%convert.2365, %convert.2379)
  %reduce.863 = f32[1,4096]{1,0} reduce(%multiply.5609, %constant.3956), dimensions={2}, to_apply=%region_1032.26579
  %reshape.19587 = f32[1,4096,1]{2,1,0} reshape(%reduce.863)
  %divide.996 = f32[1,4096,1]{2,1,0} divide(%rsqrt.182, %reshape.19520)
  %multiply.5610 = f32[1,4096,1]{2,1,0} multiply(%divide.996, %broadcast.7210)
  %multiply.5611 = f32[1,4096,1]{2,1,0} multiply(%reshape.19587, %multiply.5610)
  %multiply.5612 = f32[1,4096,1]{2,1,0} multiply(%multiply.5611, %broadcast.7211)
  %reshape.19589 = f32[1,4096]{1,0} reshape(%multiply.5612)
  %broadcast.9618 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19589), dimensions={0,1}
  %multiply.5613 = f32[1,4096,4096]{2,1,0} multiply(%convert.2365, %broadcast.9618)
  %add.4830 = f32[1,4096,4096]{2,1,0} add(%multiply.5608, %multiply.5613)
  %convert.2380 = bf16[1,4096,4096]{2,1,0} convert(%add.4830)
  %add.4831 = bf16[1,4096,4096]{2,1,0} add(%copy.3962, %convert.2380)
  %get-tuple-element.1756 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.204), index=1
  %get-tuple-element.1757 = u32[2,4]{1,0} get-tuple-element(%custom-call.204), index=2
  %copy.3993 = bf16[1,4096,4096]{2,1,0} copy(%add.4831)
  %dot.1021 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.3993, %all-gather.411), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.3994 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1021)
  %custom-call.206 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.3966, %copy.3968, %copy.3969, %constant.3999, %get-tuple-element.1756, /*index=5*/%get-tuple-element.1757, %get-tuple-element.1741, %copy.3994, %scatter.986, %scatter.991, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1764 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.206), index=2
  %copy.3995 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1764)
  %dot.1022 = bf16[1,4096,4096]{2,1,0} dot(%copy.3995, %all-gather.410), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1765 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.206), index=1
  %copy.3996 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1765)
  %slice.704 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3996), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.5615 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.704, %broadcast.9572)
  %slice.705 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.3996), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.5617 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.705, %broadcast.9571)
  %add.4844 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5615, %multiply.5617)
  %multiply.5618 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.704, %broadcast.9571)
  %negate.297 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.705)
  %multiply.5619 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.297, %broadcast.9572)
  %add.4845 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5618, %multiply.5619)
  %concatenate.433 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4844, %add.4845), dimensions={3}
  %dot.1023 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.433, %all-gather.409), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4846 = bf16[1,4096,4096]{2,1,0} add(%dot.1022, %dot.1023)
  %copy.3997 = bf16[1,4096,4096]{2,1,0} copy(%add.4846)
  %get-tuple-element.1766 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.206), index=0
  %copy.3998 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1766)
  %slice.706 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3998), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.5621 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.706, %broadcast.9565)
  %slice.707 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.3998), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.5623 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.707, %broadcast.9564)
  %add.4847 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5621, %multiply.5623)
  %multiply.5624 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.706, %broadcast.9564)
  %negate.298 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.707)
  %multiply.5625 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.298, %broadcast.9565)
  %add.4848 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5624, %multiply.5625)
  %concatenate.434 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4847, %add.4848), dimensions={3}
  %dot.1024 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.434, %all-gather.408), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.3999 = bf16[1,4096,4096]{2,1,0} copy(%dot.1024)
  %add.4849 = bf16[1,4096,4096]{2,1,0} add(%copy.3997, %copy.3999)
  %copy.4000 = bf16[1,4096,4096]{2,1,0} copy(%add.4849)
  %multiply.5626 = bf16[1,4096,4096]{2,1,0} multiply(%copy.4000, %broadcast.9560)
  %convert.2384 = f32[1,4096,4096]{2,1,0} convert(%multiply.5626)
  %multiply.5627 = f32[1,4096,4096]{2,1,0} multiply(%convert.2384, %broadcast.9559)
  %multiply.5628 = f32[1,4096,4096]{2,1,0} multiply(%convert.2351, %convert.2384)
  %reduce.864 = f32[1,4096]{1,0} reduce(%multiply.5628, %constant.3956), dimensions={2}, to_apply=%region_1036.26690
  %reshape.19637 = f32[1,4096,1]{2,1,0} reshape(%reduce.864)
  %divide.999 = f32[1,4096,1]{2,1,0} divide(%rsqrt.181, %reshape.19463)
  %multiply.5629 = f32[1,4096,1]{2,1,0} multiply(%divide.999, %broadcast.7210)
  %multiply.5630 = f32[1,4096,1]{2,1,0} multiply(%reshape.19637, %multiply.5629)
  %multiply.5632 = f32[1,4096,1]{2,1,0} multiply(%multiply.5630, %broadcast.7211)
  %reshape.19638 = f32[1,4096]{1,0} reshape(%multiply.5632)
  %broadcast.9638 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19638), dimensions={0,1}
  %multiply.5633 = f32[1,4096,4096]{2,1,0} multiply(%convert.2351, %broadcast.9638)
  %add.4850 = f32[1,4096,4096]{2,1,0} add(%multiply.5627, %multiply.5633)
  %convert.2385 = bf16[1,4096,4096]{2,1,0} convert(%add.4850)
  %add.4851 = bf16[1,4096,4096]{2,1,0} add(%add.4831, %convert.2385)
  %copy.4001 = bf16[1,4096,4096]{2,1,0} copy(%add.4851)
  %tuple.358 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.53, %param.54, %param.55, %param.56, %param.52, /*index=5*/%param.47, %param.49, %param.51, %param.48, %param.50, /*index=10*/%copy.2246, %param.10, %param.7, %copy.4001)
  %opt-barrier.27 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.358)
  %get-tuple-element.1767 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.27), index=13
  %copy.4002 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1767)
  %iota.2217 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1768 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.27), index=10
  %copy.4003 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1768)
  %convert.2386 = f32[1,4096,4096]{2,1,0} convert(%copy.4003)
  %multiply.5635 = f32[1,4096,4096]{2,1,0} multiply(%convert.2386, %convert.2386)
  %reduce.865 = f32[1,4096]{1,0} reduce(%multiply.5635, %constant.3956), dimensions={2}, to_apply=%region_1038.26733
  %multiply.5636 = f32[1,4096]{1,0} multiply(%reduce.865, %broadcast.5380)
  %add.4853 = f32[1,4096]{1,0} add(%multiply.5636, %broadcast.5381)
  %reshape.19640 = f32[1,4096,1]{2,1,0} reshape(%add.4853)
  %rsqrt.183 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.19640)
  %reshape.19641 = f32[1,4096]{1,0} reshape(%rsqrt.183)
  %broadcast.9642 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19641), dimensions={0,1}
  %multiply.5637 = f32[1,4096,4096]{2,1,0} multiply(%convert.2386, %broadcast.9642)
  %convert.2387 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5637)
  %get-tuple-element.1769 = bf16[4096]{0} get-tuple-element(%opt-barrier.27), index=5
  %broadcast.9643 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1769), dimensions={2}
  %multiply.5638 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2387, %broadcast.9643)
  %copy.4004 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5638)
  %copy.4005 = bf16[1,4096,4096]{2,1,0} copy(%copy.4004)
  %get-tuple-element.1770 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.27), index=8
  %all-gather.415 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1770), channel_id=998, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1025 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.4005, %all-gather.415), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.708 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1025), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1771 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.27), index=12
  %convert.2388 = f32[1,4096]{1,0} convert(%get-tuple-element.1771)
  %broadcast.9644 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2388), dimensions={0,1}
  %divide.1000 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9644, %broadcast.5388)
  %cosine.119 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.1000)
  %convert.2391 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.119)
  %reshape.19643 = bf16[1,4096,64]{2,1,0} reshape(%convert.2391)
  %broadcast.9650 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.19643), dimensions={0,1,3}
  %multiply.5642 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.708, %broadcast.9650)
  %slice.709 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1025), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.118 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.1000)
  %convert.2392 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.118)
  %reshape.19645 = bf16[1,4096,64]{2,1,0} reshape(%convert.2392)
  %broadcast.9652 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.19645), dimensions={0,1,3}
  %multiply.5645 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.709, %broadcast.9652)
  %subtract.647 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.5642, %multiply.5645)
  %multiply.5646 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.709, %broadcast.9650)
  %multiply.5647 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.708, %broadcast.9652)
  %add.4854 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5646, %multiply.5647)
  %concatenate.435 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.647, %add.4854), dimensions={3}
  %copy.4006 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.435)
  %get-tuple-element.1772 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.27), index=6
  %all-gather.416 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1772), channel_id=999, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1026 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.4005, %all-gather.416), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.710 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1026), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.9658 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.19643), dimensions={0,1,3}
  %multiply.5652 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.710, %broadcast.9658)
  %slice.711 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1026), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.9659 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.19645), dimensions={0,1,3}
  %multiply.5654 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.711, %broadcast.9659)
  %subtract.648 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.5652, %multiply.5654)
  %multiply.5655 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.711, %broadcast.9658)
  %multiply.5656 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.710, %broadcast.9659)
  %add.4855 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5655, %multiply.5656)
  %concatenate.436 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.648, %add.4855), dimensions={3}
  %copy.4008 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.436)
  %get-tuple-element.1773 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.27), index=9
  %all-gather.417 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1773), channel_id=1000, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1027 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.4005, %all-gather.417), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.4009 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1027)
  %get-tuple-element.1774 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.27), index=11
  %broadcast.9662 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1774), dimensions={0,1}
  %broadcast.9663 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1774), dimensions={0,2}
  %compare.3661 = pred[1,4096,4096]{2,1,0} compare(%broadcast.9662, %broadcast.9663), direction=EQ
  %and.494 = pred[1,4096,4096]{2,1,0} and(%compare.3661, %broadcast.5406)
  %select.2353 = f32[1,4096,4096]{2,1,0} select(%and.494, %broadcast.5407, %broadcast.5408)
  %compare.3663 = pred[1,4096,4096]{2,1,0} compare(%select.2353, %broadcast.5407), direction=NE
  %not.123 = pred[1,4096,4096]{2,1,0} not(%compare.3663)
  %convert.2397 = s32[1,4096,4096]{2,1,0} convert(%not.123)
  %reduce.866 = s32[1,4096]{1,0} reduce(%convert.2397, %constant.3783), dimensions={1}, to_apply=%region_1039.26867
  %reshape.19656 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.866)
  %slice.712 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.19656), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.19658 = s32[1,1]{1,0} reshape(%slice.712)
  %reshape.19675 = s32[1]{0} reshape(%reshape.19658)
  %compare.3676 = pred[1]{0} compare(%reshape.19675, %constant.4022), direction=LT
  %select.2363 = s32[1]{0} select(%compare.3676, %reshape.11470, %reshape.19675)
  %scatter.1009 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2363), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.59
  %reduce.867 = s32[1,4096]{1,0} reduce(%convert.2397, %constant.3783), dimensions={2}, to_apply=%region_1040.26875
  %reshape.19659 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.867)
  %reduce.868 = s32[1,1]{1,0} reduce(%reshape.19659, %constant.4014), dimensions={3,2}, to_apply=%region_1041.26880
  %reshape.19690 = s32[1]{0} reshape(%reduce.868)
  %compare.3689 = pred[1]{0} compare(%reshape.19690, %constant.4022), direction=LT
  %select.2374 = s32[1]{0} select(%compare.3689, %reshape.11470, %reshape.19690)
  %scatter.1014 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2374), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.59
  %custom-call.207 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.4006, %copy.4008, %copy.4009, %constant.3999, %scatter.1009, /*index=5*/%scatter.1014, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1780 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.207), index=0
  %copy.4010 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1780)
  %get-tuple-element.1781 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.27), index=7
  %all-gather.418 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1781), channel_id=1001, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1028 = bf16[1,4096,4096]{2,1,0} dot(%copy.4010, %all-gather.418), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.4011 = bf16[1,4096,4096]{2,1,0} copy(%dot.1028)
  %add.4870 = bf16[1,4096,4096]{2,1,0} add(%copy.4003, %copy.4011)
  %convert.2402 = f32[1,4096,4096]{2,1,0} convert(%add.4870)
  %multiply.5658 = f32[1,4096,4096]{2,1,0} multiply(%convert.2402, %convert.2402)
  %reduce.869 = f32[1,4096]{1,0} reduce(%multiply.5658, %constant.3956), dimensions={2}, to_apply=%region_1042.26896
  %multiply.5659 = f32[1,4096]{1,0} multiply(%reduce.869, %broadcast.5380)
  %add.4872 = f32[1,4096]{1,0} add(%multiply.5659, %broadcast.5381)
  %reshape.19692 = f32[1,4096,1]{2,1,0} reshape(%add.4872)
  %rsqrt.184 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.19692)
  %reshape.19693 = f32[1,4096]{1,0} reshape(%rsqrt.184)
  %broadcast.9675 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19693), dimensions={0,1}
  %multiply.5660 = f32[1,4096,4096]{2,1,0} multiply(%convert.2402, %broadcast.9675)
  %convert.2403 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5660)
  %get-tuple-element.1782 = bf16[4096]{0} get-tuple-element(%opt-barrier.27), index=4
  %broadcast.9676 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1782), dimensions={2}
  %multiply.5661 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2403, %broadcast.9676)
  %copy.4012 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5661)
  %get-tuple-element.1783 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.27), index=0
  %all-gather.419 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1783), channel_id=1002, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1029 = bf16[1,4096,8]{2,1,0} dot(%copy.4012, %all-gather.419), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.4013 = bf16[1,4096,8]{2,1,0} copy(%dot.1029)
  %reshape.19694 = bf16[4096,8]{1,0} reshape(%copy.4013)
  %custom-call.208 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.19694), custom_call_target="TopK", called_computations={%compare-greater-than.59.clone}
  %get-tuple-element.1784 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.208), index=0
  %get-tuple-element.1785 = s32[4096,2]{1,0} get-tuple-element(%custom-call.208), index=1
  %add.4873 = s32[4096,2]{1,0} add(%get-tuple-element.1785, %broadcast.5420)
  %sort.297 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1784, %add.4873), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.59
  %get-tuple-element.1787 = s32[4096,2]{1,0} get-tuple-element(%sort.297), index=1
  %slice.714 = s32[4096,2]{1,0} slice(%get-tuple-element.1787), slice={[0:4096], [0:2]}
  %all-gather.421 = s32[32768,2]{1,0} all-gather(%slice.714), channel_id=1004, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2126 = s32[4096,2]{1,0} dynamic-slice(%all-gather.421, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.19697 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.2126)
  %compare.3690 = pred[1,4096,2]{2,1,0} compare(%reshape.19697, %broadcast.5421), direction=LT
  %add.4874 = s32[1,4096,2]{2,1,0} add(%reshape.19697, %broadcast.5422)
  %select.2375 = s32[1,4096,2]{2,1,0} select(%compare.3690, %add.4874, %reshape.19697)
  %reshape.19698 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2375)
  %concatenate.437 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2217, %reshape.19698), dimensions={3}
  %subtract.654 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.437, %broadcast.5433)
  %scatter.1015 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.654, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1045.26975
  %gather.86 = u32[1,4096,2]{2,1,0} gather(%scatter.1015, %subtract.654), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3691 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.86), direction=EQ
  %get-tuple-element.1786 = bf16[4096,2]{1,0} get-tuple-element(%sort.297), index=0
  %slice.713 = bf16[4096,2]{1,0} slice(%get-tuple-element.1786), slice={[0:4096], [0:2]}
  %all-gather.420 = bf16[32768,2]{1,0} all-gather(%slice.713), channel_id=1003, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2136 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.420, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2406 = f32[4096,2]{1,0} convert(%dynamic-slice.2136)
  %reshape.19718 = f32[1,4096,2]{2,1,0} reshape(%convert.2406)
  %reduce.870 = f32[4096]{0} reduce(%convert.2406, %constant.4073), dimensions={1}, to_apply=%region_1043.26925
  %reshape.19719 = f32[1,4096]{1,0} reshape(%reduce.870)
  %broadcast.9683 = f32[1,4096,2]{2,1,0} broadcast(%reshape.19719), dimensions={0,1}
  %subtract.653 = f32[1,4096,2]{2,1,0} subtract(%reshape.19718, %broadcast.9683)
  %exponential.245 = f32[1,4096,2]{2,1,0} exponential(%subtract.653)
  %reduce.871 = f32[1,4096]{1,0} reduce(%exponential.245, %constant.3956), dimensions={2}, to_apply=%region_1044.26937
  %broadcast.9684 = f32[1,4096,2]{2,1,0} broadcast(%reduce.871), dimensions={0,1}
  %divide.1004 = f32[1,4096,2]{2,1,0} divide(%exponential.245, %broadcast.9684)
  %convert.2407 = bf16[1,4096,2]{2,1,0} convert(%divide.1004)
  %select.2376 = bf16[1,4096,2]{2,1,0} select(%compare.3691, %convert.2407, %broadcast.5432)
  %scatter.1016 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.654, %select.2376), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1046.26984
  %broadcast.9686 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.19697), dimensions={0,1,2}
  %iota.2225 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3692 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.9686, %iota.2225), direction=EQ
  %convert.2408 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3692)
  %reshape.19730 = s32[1,8192,8]{2,1,0} reshape(%convert.2408)
  %copy.4014 = s32[1,8192,8]{2,1,0} copy(%reshape.19730)
  %reduce-window.424 = s32[1,8192,8]{2,1,0} reduce-window(%copy.4014, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.26
  %reshape.19732 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.424)
  %copy.4015 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.19732)
  %compare.3693 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.4015, %broadcast.5435), direction=LE
  %select.2377 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3693, %convert.2408, %broadcast.5436)
  %reduce.872 = s32[1,4096,8]{2,1,0} reduce(%select.2377, %constant.3783), dimensions={2}, to_apply=%region_1047.26998
  %convert.2409 = bf16[1,4096,8]{2,1,0} convert(%reduce.872)
  %multiply.5667 = bf16[1,4096,8]{2,1,0} multiply(%scatter.1016, %convert.2409)
  %broadcast.9688 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5667), dimensions={0,1,2}
  %multiply.5668 = s32[1,8192,8]{2,1,0} multiply(%copy.4014, %reduce-window.424)
  %reshape.19734 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.5668)
  %reduce.873 = s32[1,4096,8]{2,1,0} reduce(%reshape.19734, %constant.3783), dimensions={2}, to_apply=%region_1048.27007
  %multiply.5669 = s32[1,4096,8]{2,1,0} multiply(%reduce.873, %reduce.872)
  %broadcast.9689 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5669), dimensions={0,1,2}
  %iota.2226 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3694 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.9689, %iota.2226), direction=EQ
  %convert.2411 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3694)
  %convert.2412 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2411)
  %multiply.5670 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.9688, %convert.2412)
  %slice.715 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.5670), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3695 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.715, %broadcast.5439), direction=NE
  %copy.4016 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3695)
  %convert.2413 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.4016)
  %dot.1030 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2413, %copy.4012), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19737 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1030)
  %all-to-all.172 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19737), channel_id=1011, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.285 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.172), dimensions={1,0,2,3,4}
  %reshape.19739 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.285)
  %transpose.286 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.19739), dimensions={1,0,2,3}
  %copy.4017 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.286)
  %get-tuple-element.1792 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.27), index=1
  %copy.4018 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1792)
  %dot.1031 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4017, %copy.4018), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4019 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1031)
  %negate.299 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.4019)
  %exponential.246 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.299)
  %add.4879 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.246, %broadcast.5440)
  %divide.1005 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4879)
  %multiply.5674 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.4019, %divide.1005)
  %copy.4020 = bf16[1,4096,4096]{2,1,0} copy(%copy.4002)
  %copy.4021 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.715)
  %dot.1032 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.4020, %copy.4021), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19742 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1032)
  %all-to-all.173 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.19742), channel_id=1012, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.287 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.173), dimensions={2,0,1,3,4}
  %reshape.19743 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.287)
  %transpose.288 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.19743), dimensions={2,0,3,1}
  %copy.4022 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.288)
  %get-tuple-element.1793 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.27), index=3
  %copy.4023 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1793)
  %dot.1033 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4022, %copy.4023), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.5677 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5674, %dot.1033)
  %copy.4024 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.5677)
  %get-tuple-element.1794 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.27), index=2
  %copy.4025 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1794)
  %dot.1034 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.4024, %copy.4025), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1035 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4017, %copy.4025), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4026 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1035)
  %multiply.5678 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1033, %copy.4026)
  %multiply.5679 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5678, %divide.1005)
  %multiply.5680 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.4019, %multiply.5678)
  %subtract.655 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.1005)
  %multiply.5681 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.1005, %subtract.655)
  %multiply.5682 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5680, %multiply.5681)
  %add.4880 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.5679, %multiply.5682)
  %copy.4027 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4880)
  %dot.1036 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.4027, %copy.4018), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4881 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1034, %dot.1036)
  %copy.4028 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4881)
  %transpose.289 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.4028), dimensions={1,0,2,3}
  %reshape.19746 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.289)
  %all-to-all.174 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19746), channel_id=1013, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.290 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.174), dimensions={1,0,2,3,4}
  %reshape.19747 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.290)
  %dot.1037 = bf16[1,4096,4096]{2,1,0} dot(%convert.2413, %reshape.19747), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.19749 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.2126)
  %compare.3697 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.437, %broadcast.7265), direction=GE
  %compare.3698 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.437, %broadcast.7267), direction=LE
  %and.499 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3697, %compare.3698)
  %reduce.874 = pred[1,4096,2]{2,1,0} reduce(%and.499, %constant.4025), dimensions={3}, to_apply=%region_1051.27092
  %multiply.5685 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5674, %copy.4026)
  %dot.1038 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.5685, %copy.4023), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4029 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1038)
  %reshape.19751 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.4029)
  %all-to-all.175 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19751), channel_id=1014, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.291 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.175), dimensions={1,0,2,3,4}
  %reshape.19752 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.291)
  %dot.1039 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.4020, %reshape.19752), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.4030 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1039)
  %pad.27 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.4030, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.5689 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.27, %convert.2412)
  %reduce.875 = bf16[1,4096,8]{2,1,0} reduce(%multiply.5689, %constant.3795), dimensions={3}, to_apply=%region_1049.27074
  %multiply.5690 = bf16[1,4096,8]{2,1,0} multiply(%reduce.875, %convert.2409)
  %gather.87 = bf16[1,4096,2]{2,1,0} gather(%multiply.5690, %subtract.654), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2378 = bf16[1,4096,2]{2,1,0} select(%reduce.874, %gather.87, %broadcast.5432)
  %select.2379 = bf16[1,4096,2]{2,1,0} select(%compare.3691, %select.2378, %broadcast.5432)
  %convert.2415 = f32[1,4096,2]{2,1,0} convert(%select.2379)
  %divide.1006 = f32[1,4096,2]{2,1,0} divide(%convert.2415, %broadcast.9684)
  %multiply.5691 = f32[1,4096]{1,0} multiply(%reduce.871, %reduce.871)
  %divide.1007 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.5691)
  %broadcast.9695 = f32[1,4096,2]{2,1,0} broadcast(%divide.1007), dimensions={0,1}
  %multiply.5692 = f32[1,4096,2]{2,1,0} multiply(%convert.2415, %broadcast.9695)
  %multiply.5693 = f32[1,4096,2]{2,1,0} multiply(%multiply.5692, %exponential.245)
  %reduce.876 = f32[1,4096]{1,0} reduce(%multiply.5693, %constant.3956), dimensions={2}, to_apply=%region_1052.27106
  %negate.300 = f32[1,4096]{1,0} negate(%reduce.876)
  %broadcast.9696 = f32[1,4096,2]{2,1,0} broadcast(%negate.300), dimensions={0,1}
  %add.4882 = f32[1,4096,2]{2,1,0} add(%divide.1006, %broadcast.9696)
  %multiply.5694 = f32[1,4096,2]{2,1,0} multiply(%add.4882, %exponential.245)
  %convert.2416 = bf16[1,4096,2]{2,1,0} convert(%multiply.5694)
  %scatter.1017 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.19749, %convert.2416), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_1054.27126
  %copy.4031 = bf16[1,4096,8]{2,1,0} copy(%scatter.1017)
  %dot.1040 = bf16[1,4096,4096]{2,1,0} dot(%copy.4031, %all-gather.419), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4883 = bf16[1,4096,4096]{1,2,0} add(%dot.1037, %dot.1040)
  %copy.4032 = bf16[1,4096,4096]{2,1,0} copy(%add.4883)
  %multiply.5695 = bf16[1,4096,4096]{2,1,0} multiply(%copy.4032, %broadcast.9676)
  %convert.2417 = f32[1,4096,4096]{2,1,0} convert(%multiply.5695)
  %multiply.5696 = f32[1,4096,4096]{2,1,0} multiply(%convert.2417, %broadcast.9675)
  %multiply.5697 = f32[1,4096,4096]{2,1,0} multiply(%convert.2402, %convert.2417)
  %reduce.877 = f32[1,4096]{1,0} reduce(%multiply.5697, %constant.3956), dimensions={2}, to_apply=%region_1057.27155
  %reshape.19767 = f32[1,4096,1]{2,1,0} reshape(%reduce.877)
  %divide.1008 = f32[1,4096,1]{2,1,0} divide(%rsqrt.184, %reshape.19692)
  %multiply.5698 = f32[1,4096,1]{2,1,0} multiply(%divide.1008, %broadcast.7210)
  %multiply.5699 = f32[1,4096,1]{2,1,0} multiply(%reshape.19767, %multiply.5698)
  %multiply.5700 = f32[1,4096,1]{2,1,0} multiply(%multiply.5699, %broadcast.7211)
  %reshape.19768 = f32[1,4096]{1,0} reshape(%multiply.5700)
  %broadcast.9702 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19768), dimensions={0,1}
  %multiply.5701 = f32[1,4096,4096]{2,1,0} multiply(%convert.2402, %broadcast.9702)
  %add.4884 = f32[1,4096,4096]{2,1,0} add(%multiply.5696, %multiply.5701)
  %convert.2418 = bf16[1,4096,4096]{2,1,0} convert(%add.4884)
  %add.4885 = bf16[1,4096,4096]{2,1,0} add(%copy.4002, %convert.2418)
  %get-tuple-element.1795 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.207), index=1
  %get-tuple-element.1796 = u32[2,4]{1,0} get-tuple-element(%custom-call.207), index=2
  %copy.4033 = bf16[1,4096,4096]{2,1,0} copy(%add.4885)
  %dot.1041 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.4033, %all-gather.418), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.4034 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1041)
  %custom-call.209 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.4006, %copy.4008, %copy.4009, %constant.3999, %get-tuple-element.1795, /*index=5*/%get-tuple-element.1796, %get-tuple-element.1780, %copy.4034, %scatter.1009, %scatter.1014, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1803 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.209), index=2
  %copy.4035 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1803)
  %dot.1042 = bf16[1,4096,4096]{2,1,0} dot(%copy.4035, %all-gather.417), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1804 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.209), index=1
  %copy.4036 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1804)
  %slice.716 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.4036), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.5703 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.716, %broadcast.9659)
  %slice.717 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.4036), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.5705 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.717, %broadcast.9658)
  %add.4898 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5703, %multiply.5705)
  %multiply.5706 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.716, %broadcast.9658)
  %negate.301 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.717)
  %multiply.5707 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.301, %broadcast.9659)
  %add.4899 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5706, %multiply.5707)
  %concatenate.442 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4898, %add.4899), dimensions={3}
  %dot.1043 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.442, %all-gather.416), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4900 = bf16[1,4096,4096]{2,1,0} add(%dot.1042, %dot.1043)
  %copy.4037 = bf16[1,4096,4096]{2,1,0} copy(%add.4900)
  %get-tuple-element.1805 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.209), index=0
  %copy.4038 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1805)
  %slice.718 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.4038), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.5709 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.718, %broadcast.9652)
  %slice.719 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.4038), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.5711 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.719, %broadcast.9650)
  %add.4901 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5709, %multiply.5711)
  %multiply.5712 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.718, %broadcast.9650)
  %negate.302 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.719)
  %multiply.5713 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.302, %broadcast.9652)
  %add.4902 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5712, %multiply.5713)
  %concatenate.443 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4901, %add.4902), dimensions={3}
  %dot.1044 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.443, %all-gather.415), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.4039 = bf16[1,4096,4096]{2,1,0} copy(%dot.1044)
  %add.4903 = bf16[1,4096,4096]{2,1,0} add(%copy.4037, %copy.4039)
  %copy.4040 = bf16[1,4096,4096]{2,1,0} copy(%add.4903)
  %multiply.5714 = bf16[1,4096,4096]{2,1,0} multiply(%copy.4040, %broadcast.9643)
  %convert.2421 = f32[1,4096,4096]{2,1,0} convert(%multiply.5714)
  %multiply.5715 = f32[1,4096,4096]{2,1,0} multiply(%convert.2421, %broadcast.9642)
  %multiply.5716 = f32[1,4096,4096]{2,1,0} multiply(%convert.2386, %convert.2421)
  %reduce.878 = f32[1,4096]{1,0} reduce(%multiply.5716, %constant.3956), dimensions={2}, to_apply=%region_1061.27266
  %reshape.19814 = f32[1,4096,1]{2,1,0} reshape(%reduce.878)
  %divide.1011 = f32[1,4096,1]{2,1,0} divide(%rsqrt.183, %reshape.19640)
  %multiply.5717 = f32[1,4096,1]{2,1,0} multiply(%divide.1011, %broadcast.7210)
  %multiply.5718 = f32[1,4096,1]{2,1,0} multiply(%reshape.19814, %multiply.5717)
  %multiply.5719 = f32[1,4096,1]{2,1,0} multiply(%multiply.5718, %broadcast.7211)
  %reshape.19815 = f32[1,4096]{1,0} reshape(%multiply.5719)
  %broadcast.9719 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19815), dimensions={0,1}
  %multiply.5720 = f32[1,4096,4096]{2,1,0} multiply(%convert.2386, %broadcast.9719)
  %add.4904 = f32[1,4096,4096]{2,1,0} add(%multiply.5715, %multiply.5720)
  %convert.2422 = bf16[1,4096,4096]{2,1,0} convert(%add.4904)
  %add.4905 = bf16[1,4096,4096]{2,1,0} add(%add.4885, %convert.2422)
  %copy.4041 = bf16[1,4096,4096]{2,1,0} copy(%add.4905)
  %tuple.363 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.43, %param.44, %param.45, %param.46, %param.42, /*index=5*/%param.37, %param.39, %param.41, %param.38, %param.40, /*index=10*/%copy.2222, %param.10, %param.7, %copy.4041)
  %opt-barrier.28 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.363)
  %get-tuple-element.1806 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.28), index=13
  %copy.4042 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1806)
  %iota.2228 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1807 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.28), index=10
  %copy.4043 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1807)
  %convert.2423 = f32[1,4096,4096]{2,1,0} convert(%copy.4043)
  %multiply.5722 = f32[1,4096,4096]{2,1,0} multiply(%convert.2423, %convert.2423)
  %reduce.879 = f32[1,4096]{1,0} reduce(%multiply.5722, %constant.3956), dimensions={2}, to_apply=%region_1063.27309
  %multiply.5723 = f32[1,4096]{1,0} multiply(%reduce.879, %broadcast.5380)
  %add.4907 = f32[1,4096]{1,0} add(%multiply.5723, %broadcast.5381)
  %reshape.19817 = f32[1,4096,1]{2,1,0} reshape(%add.4907)
  %rsqrt.185 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.19817)
  %reshape.19818 = f32[1,4096]{1,0} reshape(%rsqrt.185)
  %broadcast.9723 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19818), dimensions={0,1}
  %multiply.5724 = f32[1,4096,4096]{2,1,0} multiply(%convert.2423, %broadcast.9723)
  %convert.2424 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5724)
  %get-tuple-element.1808 = bf16[4096]{0} get-tuple-element(%opt-barrier.28), index=5
  %broadcast.9724 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1808), dimensions={2}
  %multiply.5725 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2424, %broadcast.9724)
  %copy.4044 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5725)
  %copy.4045 = bf16[1,4096,4096]{2,1,0} copy(%copy.4044)
  %get-tuple-element.1809 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.28), index=8
  %all-gather.422 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1809), channel_id=1017, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1045 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.4045, %all-gather.422), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.720 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1045), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1810 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.28), index=12
  %convert.2425 = f32[1,4096]{1,0} convert(%get-tuple-element.1810)
  %broadcast.9725 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2425), dimensions={0,1}
  %divide.1012 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9725, %broadcast.5388)
  %cosine.121 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.1012)
  %convert.2427 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.121)
  %reshape.19820 = bf16[1,4096,64]{2,1,0} reshape(%convert.2427)
  %broadcast.9728 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.19820), dimensions={0,1,3}
  %multiply.5730 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.720, %broadcast.9728)
  %slice.721 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1045), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.120 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.1012)
  %convert.2428 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.120)
  %reshape.19822 = bf16[1,4096,64]{2,1,0} reshape(%convert.2428)
  %broadcast.9729 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.19822), dimensions={0,1,3}
  %multiply.5732 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.721, %broadcast.9729)
  %subtract.659 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.5730, %multiply.5732)
  %multiply.5733 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.721, %broadcast.9728)
  %multiply.5736 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.720, %broadcast.9729)
  %add.4908 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5733, %multiply.5736)
  %concatenate.444 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.659, %add.4908), dimensions={3}
  %copy.4046 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.444)
  %get-tuple-element.1811 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.28), index=6
  %all-gather.423 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1811), channel_id=1018, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1046 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.4045, %all-gather.423), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.722 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1046), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.9735 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.19820), dimensions={0,1,3}
  %multiply.5740 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.722, %broadcast.9735)
  %slice.723 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1046), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.9736 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.19822), dimensions={0,1,3}
  %multiply.5743 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.723, %broadcast.9736)
  %subtract.660 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.5740, %multiply.5743)
  %multiply.5744 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.723, %broadcast.9735)
  %multiply.5745 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.722, %broadcast.9736)
  %add.4909 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5744, %multiply.5745)
  %concatenate.445 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.660, %add.4909), dimensions={3}
  %copy.4048 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.445)
  %get-tuple-element.1812 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.28), index=9
  %all-gather.424 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1812), channel_id=1019, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1047 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.4045, %all-gather.424), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.4049 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1047)
  %get-tuple-element.1813 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.28), index=11
  %broadcast.9741 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1813), dimensions={0,1}
  %broadcast.9742 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1813), dimensions={0,2}
  %compare.3725 = pred[1,4096,4096]{2,1,0} compare(%broadcast.9741, %broadcast.9742), direction=EQ
  %and.504 = pred[1,4096,4096]{2,1,0} and(%compare.3725, %broadcast.5406)
  %select.2400 = f32[1,4096,4096]{2,1,0} select(%and.504, %broadcast.5407, %broadcast.5408)
  %compare.3727 = pred[1,4096,4096]{2,1,0} compare(%select.2400, %broadcast.5407), direction=NE
  %not.124 = pred[1,4096,4096]{2,1,0} not(%compare.3727)
  %convert.2434 = s32[1,4096,4096]{2,1,0} convert(%not.124)
  %reduce.880 = s32[1,4096]{1,0} reduce(%convert.2434, %constant.3783), dimensions={1}, to_apply=%region_1064.27443
  %reshape.19833 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.880)
  %slice.724 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.19833), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.19837 = s32[1,1]{1,0} reshape(%slice.724)
  %reshape.19855 = s32[1]{0} reshape(%reshape.19837)
  %compare.3740 = pred[1]{0} compare(%reshape.19855, %constant.4022), direction=LT
  %select.2410 = s32[1]{0} select(%compare.3740, %reshape.11470, %reshape.19855)
  %scatter.1032 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2410), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.60
  %reduce.881 = s32[1,4096]{1,0} reduce(%convert.2434, %constant.3783), dimensions={2}, to_apply=%region_1065.27451
  %reshape.19838 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.881)
  %reduce.882 = s32[1,1]{1,0} reduce(%reshape.19838, %constant.4014), dimensions={3,2}, to_apply=%region_1066.27456
  %reshape.19873 = s32[1]{0} reshape(%reduce.882)
  %compare.3753 = pred[1]{0} compare(%reshape.19873, %constant.4022), direction=LT
  %select.2420 = s32[1]{0} select(%compare.3753, %reshape.11470, %reshape.19873)
  %scatter.1037 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2420), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.60
  %custom-call.210 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.4046, %copy.4048, %copy.4049, %constant.3999, %scatter.1032, /*index=5*/%scatter.1037, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1819 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.210), index=0
  %copy.4050 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1819)
  %get-tuple-element.1820 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.28), index=7
  %all-gather.425 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1820), channel_id=1020, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1048 = bf16[1,4096,4096]{2,1,0} dot(%copy.4050, %all-gather.425), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.4051 = bf16[1,4096,4096]{2,1,0} copy(%dot.1048)
  %add.4922 = bf16[1,4096,4096]{2,1,0} add(%copy.4043, %copy.4051)
  %convert.2438 = f32[1,4096,4096]{2,1,0} convert(%add.4922)
  %multiply.5747 = f32[1,4096,4096]{2,1,0} multiply(%convert.2438, %convert.2438)
  %reduce.883 = f32[1,4096]{1,0} reduce(%multiply.5747, %constant.3956), dimensions={2}, to_apply=%region_1067.27472
  %multiply.5748 = f32[1,4096]{1,0} multiply(%reduce.883, %broadcast.5380)
  %add.4923 = f32[1,4096]{1,0} add(%multiply.5748, %broadcast.5381)
  %reshape.19875 = f32[1,4096,1]{2,1,0} reshape(%add.4923)
  %rsqrt.186 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.19875)
  %reshape.19877 = f32[1,4096]{1,0} reshape(%rsqrt.186)
  %broadcast.9756 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19877), dimensions={0,1}
  %multiply.5750 = f32[1,4096,4096]{2,1,0} multiply(%convert.2438, %broadcast.9756)
  %convert.2439 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5750)
  %get-tuple-element.1821 = bf16[4096]{0} get-tuple-element(%opt-barrier.28), index=4
  %broadcast.9757 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1821), dimensions={2}
  %multiply.5751 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2439, %broadcast.9757)
  %copy.4052 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5751)
  %get-tuple-element.1822 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.28), index=0
  %all-gather.426 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1822), channel_id=1021, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1049 = bf16[1,4096,8]{2,1,0} dot(%copy.4052, %all-gather.426), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.4053 = bf16[1,4096,8]{2,1,0} copy(%dot.1049)
  %reshape.19878 = bf16[4096,8]{1,0} reshape(%copy.4053)
  %custom-call.211 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.19878), custom_call_target="TopK", called_computations={%compare-greater-than.60.clone}
  %get-tuple-element.1823 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.211), index=0
  %get-tuple-element.1824 = s32[4096,2]{1,0} get-tuple-element(%custom-call.211), index=1
  %add.4924 = s32[4096,2]{1,0} add(%get-tuple-element.1824, %broadcast.5420)
  %sort.302 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1823, %add.4924), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.60
  %get-tuple-element.1826 = s32[4096,2]{1,0} get-tuple-element(%sort.302), index=1
  %slice.726 = s32[4096,2]{1,0} slice(%get-tuple-element.1826), slice={[0:4096], [0:2]}
  %all-gather.428 = s32[32768,2]{1,0} all-gather(%slice.726), channel_id=1023, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2170 = s32[4096,2]{1,0} dynamic-slice(%all-gather.428, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.19882 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.2170)
  %compare.3754 = pred[1,4096,2]{2,1,0} compare(%reshape.19882, %broadcast.5421), direction=LT
  %add.4925 = s32[1,4096,2]{2,1,0} add(%reshape.19882, %broadcast.5422)
  %select.2421 = s32[1,4096,2]{2,1,0} select(%compare.3754, %add.4925, %reshape.19882)
  %reshape.19883 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2421)
  %concatenate.446 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2228, %reshape.19883), dimensions={3}
  %subtract.666 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.446, %broadcast.5433)
  %scatter.1038 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.666, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1070.27551
  %gather.88 = u32[1,4096,2]{2,1,0} gather(%scatter.1038, %subtract.666), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3755 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.88), direction=EQ
  %get-tuple-element.1825 = bf16[4096,2]{1,0} get-tuple-element(%sort.302), index=0
  %slice.725 = bf16[4096,2]{1,0} slice(%get-tuple-element.1825), slice={[0:4096], [0:2]}
  %all-gather.427 = bf16[32768,2]{1,0} all-gather(%slice.725), channel_id=1022, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2180 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.427, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2442 = f32[4096,2]{1,0} convert(%dynamic-slice.2180)
  %reshape.19903 = f32[1,4096,2]{2,1,0} reshape(%convert.2442)
  %reduce.884 = f32[4096]{0} reduce(%convert.2442, %constant.4073), dimensions={1}, to_apply=%region_1068.27501
  %reshape.19904 = f32[1,4096]{1,0} reshape(%reduce.884)
  %broadcast.9768 = f32[1,4096,2]{2,1,0} broadcast(%reshape.19904), dimensions={0,1}
  %subtract.665 = f32[1,4096,2]{2,1,0} subtract(%reshape.19903, %broadcast.9768)
  %exponential.247 = f32[1,4096,2]{2,1,0} exponential(%subtract.665)
  %reduce.885 = f32[1,4096]{1,0} reduce(%exponential.247, %constant.3956), dimensions={2}, to_apply=%region_1069.27513
  %broadcast.9769 = f32[1,4096,2]{2,1,0} broadcast(%reduce.885), dimensions={0,1}
  %divide.1016 = f32[1,4096,2]{2,1,0} divide(%exponential.247, %broadcast.9769)
  %convert.2443 = bf16[1,4096,2]{2,1,0} convert(%divide.1016)
  %select.2422 = bf16[1,4096,2]{2,1,0} select(%compare.3755, %convert.2443, %broadcast.5432)
  %scatter.1039 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.666, %select.2422), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1071.27560
  %broadcast.9771 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.19882), dimensions={0,1,2}
  %iota.2236 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3756 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.9771, %iota.2236), direction=EQ
  %convert.2444 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3756)
  %reshape.19915 = s32[1,8192,8]{2,1,0} reshape(%convert.2444)
  %copy.4054 = s32[1,8192,8]{2,1,0} copy(%reshape.19915)
  %reduce-window.429 = s32[1,8192,8]{2,1,0} reduce-window(%copy.4054, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.27
  %reshape.19918 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.429)
  %copy.4055 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.19918)
  %compare.3757 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.4055, %broadcast.5435), direction=LE
  %select.2423 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3757, %convert.2444, %broadcast.5436)
  %reduce.886 = s32[1,4096,8]{2,1,0} reduce(%select.2423, %constant.3783), dimensions={2}, to_apply=%region_1072.27574
  %convert.2446 = bf16[1,4096,8]{2,1,0} convert(%reduce.886)
  %multiply.5757 = bf16[1,4096,8]{2,1,0} multiply(%scatter.1039, %convert.2446)
  %broadcast.9773 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5757), dimensions={0,1,2}
  %multiply.5758 = s32[1,8192,8]{2,1,0} multiply(%copy.4054, %reduce-window.429)
  %reshape.19919 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.5758)
  %reduce.887 = s32[1,4096,8]{2,1,0} reduce(%reshape.19919, %constant.3783), dimensions={2}, to_apply=%region_1073.27583
  %multiply.5759 = s32[1,4096,8]{2,1,0} multiply(%reduce.887, %reduce.886)
  %broadcast.9775 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5759), dimensions={0,1,2}
  %iota.2237 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3758 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.9775, %iota.2237), direction=EQ
  %convert.2447 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3758)
  %convert.2448 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2447)
  %multiply.5760 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.9773, %convert.2448)
  %slice.727 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.5760), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3759 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.727, %broadcast.5439), direction=NE
  %copy.4056 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3759)
  %convert.2449 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.4056)
  %dot.1050 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2449, %copy.4052), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19923 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1050)
  %all-to-all.176 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19923), channel_id=1030, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.292 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.176), dimensions={1,0,2,3,4}
  %reshape.19924 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.292)
  %transpose.293 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.19924), dimensions={1,0,2,3}
  %copy.4057 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.293)
  %get-tuple-element.1831 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.28), index=1
  %copy.4058 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1831)
  %dot.1051 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4057, %copy.4058), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4059 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1051)
  %negate.303 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.4059)
  %exponential.248 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.303)
  %add.4931 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.248, %broadcast.5440)
  %divide.1017 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4931)
  %multiply.5764 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.4059, %divide.1017)
  %copy.4060 = bf16[1,4096,4096]{2,1,0} copy(%copy.4042)
  %copy.4061 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.727)
  %dot.1052 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.4060, %copy.4061), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.19927 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1052)
  %all-to-all.177 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.19927), channel_id=1031, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.294 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.177), dimensions={2,0,1,3,4}
  %reshape.19930 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.294)
  %transpose.295 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.19930), dimensions={2,0,3,1}
  %copy.4062 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.295)
  %get-tuple-element.1832 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.28), index=3
  %copy.4063 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1832)
  %dot.1053 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4062, %copy.4063), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.5768 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5764, %dot.1053)
  %copy.4064 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.5768)
  %get-tuple-element.1833 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.28), index=2
  %copy.4065 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1833)
  %dot.1054 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.4064, %copy.4065), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1055 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4057, %copy.4065), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4066 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1055)
  %multiply.5769 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1053, %copy.4066)
  %multiply.5770 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5769, %divide.1017)
  %multiply.5771 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.4059, %multiply.5769)
  %subtract.667 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.1017)
  %multiply.5772 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.1017, %subtract.667)
  %multiply.5773 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5771, %multiply.5772)
  %add.4932 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.5770, %multiply.5773)
  %copy.4067 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4932)
  %dot.1056 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.4067, %copy.4058), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4933 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1054, %dot.1056)
  %copy.4068 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4933)
  %transpose.296 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.4068), dimensions={1,0,2,3}
  %reshape.19935 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.296)
  %all-to-all.178 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19935), channel_id=1032, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.297 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.178), dimensions={1,0,2,3,4}
  %reshape.19936 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.297)
  %dot.1057 = bf16[1,4096,4096]{2,1,0} dot(%convert.2449, %reshape.19936), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.19939 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.2170)
  %compare.3761 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.446, %broadcast.7265), direction=GE
  %compare.3762 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.446, %broadcast.7267), direction=LE
  %and.509 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3761, %compare.3762)
  %reduce.888 = pred[1,4096,2]{2,1,0} reduce(%and.509, %constant.4025), dimensions={3}, to_apply=%region_1076.27668
  %multiply.5777 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5764, %copy.4066)
  %dot.1058 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.5777, %copy.4063), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4069 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1058)
  %reshape.19941 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.4069)
  %all-to-all.179 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.19941), channel_id=1033, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.298 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.179), dimensions={1,0,2,3,4}
  %reshape.19942 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.298)
  %dot.1059 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.4060, %reshape.19942), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.4070 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1059)
  %pad.28 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.4070, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.5781 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.28, %convert.2448)
  %reduce.889 = bf16[1,4096,8]{2,1,0} reduce(%multiply.5781, %constant.3795), dimensions={3}, to_apply=%region_1074.27650
  %multiply.5782 = bf16[1,4096,8]{2,1,0} multiply(%reduce.889, %convert.2446)
  %gather.89 = bf16[1,4096,2]{2,1,0} gather(%multiply.5782, %subtract.666), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2424 = bf16[1,4096,2]{2,1,0} select(%reduce.888, %gather.89, %broadcast.5432)
  %select.2425 = bf16[1,4096,2]{2,1,0} select(%compare.3755, %select.2424, %broadcast.5432)
  %convert.2451 = f32[1,4096,2]{2,1,0} convert(%select.2425)
  %divide.1018 = f32[1,4096,2]{2,1,0} divide(%convert.2451, %broadcast.9769)
  %multiply.5783 = f32[1,4096]{1,0} multiply(%reduce.885, %reduce.885)
  %divide.1019 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.5783)
  %broadcast.9786 = f32[1,4096,2]{2,1,0} broadcast(%divide.1019), dimensions={0,1}
  %multiply.5784 = f32[1,4096,2]{2,1,0} multiply(%convert.2451, %broadcast.9786)
  %multiply.5785 = f32[1,4096,2]{2,1,0} multiply(%multiply.5784, %exponential.247)
  %reduce.890 = f32[1,4096]{1,0} reduce(%multiply.5785, %constant.3956), dimensions={2}, to_apply=%region_1077.27682
  %negate.304 = f32[1,4096]{1,0} negate(%reduce.890)
  %broadcast.9788 = f32[1,4096,2]{2,1,0} broadcast(%negate.304), dimensions={0,1}
  %add.4934 = f32[1,4096,2]{2,1,0} add(%divide.1018, %broadcast.9788)
  %multiply.5786 = f32[1,4096,2]{2,1,0} multiply(%add.4934, %exponential.247)
  %convert.2452 = bf16[1,4096,2]{2,1,0} convert(%multiply.5786)
  %scatter.1040 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.19939, %convert.2452), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_1079.27702
  %copy.4071 = bf16[1,4096,8]{2,1,0} copy(%scatter.1040)
  %dot.1060 = bf16[1,4096,4096]{2,1,0} dot(%copy.4071, %all-gather.426), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4935 = bf16[1,4096,4096]{1,2,0} add(%dot.1057, %dot.1060)
  %copy.4072 = bf16[1,4096,4096]{2,1,0} copy(%add.4935)
  %multiply.5787 = bf16[1,4096,4096]{2,1,0} multiply(%copy.4072, %broadcast.9757)
  %convert.2453 = f32[1,4096,4096]{2,1,0} convert(%multiply.5787)
  %multiply.5789 = f32[1,4096,4096]{2,1,0} multiply(%convert.2453, %broadcast.9756)
  %multiply.5790 = f32[1,4096,4096]{2,1,0} multiply(%convert.2438, %convert.2453)
  %reduce.891 = f32[1,4096]{1,0} reduce(%multiply.5790, %constant.3956), dimensions={2}, to_apply=%region_1082.27731
  %reshape.19957 = f32[1,4096,1]{2,1,0} reshape(%reduce.891)
  %divide.1020 = f32[1,4096,1]{2,1,0} divide(%rsqrt.186, %reshape.19875)
  %multiply.5791 = f32[1,4096,1]{2,1,0} multiply(%divide.1020, %broadcast.7210)
  %multiply.5792 = f32[1,4096,1]{2,1,0} multiply(%reshape.19957, %multiply.5791)
  %multiply.5793 = f32[1,4096,1]{2,1,0} multiply(%multiply.5792, %broadcast.7211)
  %reshape.19959 = f32[1,4096]{1,0} reshape(%multiply.5793)
  %broadcast.9793 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.19959), dimensions={0,1}
  %multiply.5795 = f32[1,4096,4096]{2,1,0} multiply(%convert.2438, %broadcast.9793)
  %add.4936 = f32[1,4096,4096]{2,1,0} add(%multiply.5789, %multiply.5795)
  %convert.2454 = bf16[1,4096,4096]{2,1,0} convert(%add.4936)
  %add.4937 = bf16[1,4096,4096]{2,1,0} add(%copy.4042, %convert.2454)
  %get-tuple-element.1834 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.210), index=1
  %get-tuple-element.1835 = u32[2,4]{1,0} get-tuple-element(%custom-call.210), index=2
  %copy.4073 = bf16[1,4096,4096]{2,1,0} copy(%add.4937)
  %dot.1061 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.4073, %all-gather.425), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.4074 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1061)
  %custom-call.212 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.4046, %copy.4048, %copy.4049, %constant.3999, %get-tuple-element.1834, /*index=5*/%get-tuple-element.1835, %get-tuple-element.1819, %copy.4074, %scatter.1032, %scatter.1037, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1842 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.212), index=2
  %copy.4075 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1842)
  %dot.1062 = bf16[1,4096,4096]{2,1,0} dot(%copy.4075, %all-gather.424), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1843 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.212), index=1
  %copy.4076 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1843)
  %slice.728 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.4076), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.5797 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.728, %broadcast.9736)
  %slice.729 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.4076), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.5799 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.729, %broadcast.9735)
  %add.4950 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5797, %multiply.5799)
  %multiply.5800 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.728, %broadcast.9735)
  %negate.305 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.729)
  %multiply.5801 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.305, %broadcast.9736)
  %add.4951 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5800, %multiply.5801)
  %concatenate.451 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.4950, %add.4951), dimensions={3}
  %dot.1063 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.451, %all-gather.423), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.4952 = bf16[1,4096,4096]{2,1,0} add(%dot.1062, %dot.1063)
  %copy.4077 = bf16[1,4096,4096]{2,1,0} copy(%add.4952)
  %get-tuple-element.1844 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.212), index=0
  %copy.4078 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1844)
  %slice.730 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.4078), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.5804 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.730, %broadcast.9729)
  %slice.731 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.4078), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.5806 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.731, %broadcast.9728)
  %add.4953 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5804, %multiply.5806)
  %multiply.5807 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.730, %broadcast.9728)
  %negate.306 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.731)
  %multiply.5808 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.306, %broadcast.9729)
  %add.4954 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5807, %multiply.5808)
  %concatenate.452 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.4953, %add.4954), dimensions={3}
  %dot.1064 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.452, %all-gather.422), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.4079 = bf16[1,4096,4096]{2,1,0} copy(%dot.1064)
  %add.4955 = bf16[1,4096,4096]{2,1,0} add(%copy.4077, %copy.4079)
  %copy.4080 = bf16[1,4096,4096]{2,1,0} copy(%add.4955)
  %multiply.5809 = bf16[1,4096,4096]{2,1,0} multiply(%copy.4080, %broadcast.9724)
  %convert.2457 = f32[1,4096,4096]{2,1,0} convert(%multiply.5809)
  %multiply.5810 = f32[1,4096,4096]{2,1,0} multiply(%convert.2457, %broadcast.9723)
  %multiply.5811 = f32[1,4096,4096]{2,1,0} multiply(%convert.2423, %convert.2457)
  %reduce.892 = f32[1,4096]{1,0} reduce(%multiply.5811, %constant.3956), dimensions={2}, to_apply=%region_1086.27842
  %reshape.20007 = f32[1,4096,1]{2,1,0} reshape(%reduce.892)
  %divide.1023 = f32[1,4096,1]{2,1,0} divide(%rsqrt.185, %reshape.19817)
  %multiply.5812 = f32[1,4096,1]{2,1,0} multiply(%divide.1023, %broadcast.7210)
  %multiply.5813 = f32[1,4096,1]{2,1,0} multiply(%reshape.20007, %multiply.5812)
  %multiply.5814 = f32[1,4096,1]{2,1,0} multiply(%multiply.5813, %broadcast.7211)
  %reshape.20009 = f32[1,4096]{1,0} reshape(%multiply.5814)
  %broadcast.9815 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20009), dimensions={0,1}
  %multiply.5815 = f32[1,4096,4096]{2,1,0} multiply(%convert.2423, %broadcast.9815)
  %add.4956 = f32[1,4096,4096]{2,1,0} add(%multiply.5810, %multiply.5815)
  %convert.2458 = bf16[1,4096,4096]{2,1,0} convert(%add.4956)
  %add.4957 = bf16[1,4096,4096]{2,1,0} add(%add.4937, %convert.2458)
  %copy.4081 = bf16[1,4096,4096]{2,1,0} copy(%add.4957)
  %tuple.368 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.33, %param.34, %param.35, %param.36, %param.32, /*index=5*/%param.27, %param.29, %param.31, %param.28, %param.30, /*index=10*/%copy.2198, %param.10, %param.7, %copy.4081)
  %opt-barrier.29 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.368)
  %get-tuple-element.1845 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.29), index=13
  %copy.4082 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1845)
  %iota.2239 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1846 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.29), index=10
  %copy.4083 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1846)
  %convert.2459 = f32[1,4096,4096]{2,1,0} convert(%copy.4083)
  %multiply.5817 = f32[1,4096,4096]{2,1,0} multiply(%convert.2459, %convert.2459)
  %reduce.893 = f32[1,4096]{1,0} reduce(%multiply.5817, %constant.3956), dimensions={2}, to_apply=%region_1088.27885
  %multiply.5818 = f32[1,4096]{1,0} multiply(%reduce.893, %broadcast.5380)
  %add.4959 = f32[1,4096]{1,0} add(%multiply.5818, %broadcast.5381)
  %reshape.20011 = f32[1,4096,1]{2,1,0} reshape(%add.4959)
  %rsqrt.187 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.20011)
  %reshape.20012 = f32[1,4096]{1,0} reshape(%rsqrt.187)
  %broadcast.9822 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20012), dimensions={0,1}
  %multiply.5819 = f32[1,4096,4096]{2,1,0} multiply(%convert.2459, %broadcast.9822)
  %convert.2461 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5819)
  %get-tuple-element.1847 = bf16[4096]{0} get-tuple-element(%opt-barrier.29), index=5
  %broadcast.9824 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1847), dimensions={2}
  %multiply.5820 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2461, %broadcast.9824)
  %copy.4084 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5820)
  %copy.4085 = bf16[1,4096,4096]{2,1,0} copy(%copy.4084)
  %get-tuple-element.1848 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.29), index=8
  %all-gather.429 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1848), channel_id=1036, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1065 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.4085, %all-gather.429), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.732 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1065), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1849 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.29), index=12
  %convert.2462 = f32[1,4096]{1,0} convert(%get-tuple-element.1849)
  %broadcast.9826 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2462), dimensions={0,1}
  %divide.1024 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9826, %broadcast.5388)
  %cosine.123 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.1024)
  %convert.2465 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.123)
  %reshape.20014 = bf16[1,4096,64]{2,1,0} reshape(%convert.2465)
  %broadcast.9831 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.20014), dimensions={0,1,3}
  %multiply.5824 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.732, %broadcast.9831)
  %slice.733 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1065), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.122 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.1024)
  %convert.2466 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.122)
  %reshape.20017 = bf16[1,4096,64]{2,1,0} reshape(%convert.2466)
  %broadcast.9832 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.20017), dimensions={0,1,3}
  %multiply.5827 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.733, %broadcast.9832)
  %subtract.671 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.5824, %multiply.5827)
  %multiply.5828 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.733, %broadcast.9831)
  %multiply.5830 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.732, %broadcast.9832)
  %add.4960 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5828, %multiply.5830)
  %concatenate.453 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.671, %add.4960), dimensions={3}
  %copy.4086 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.453)
  %get-tuple-element.1850 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.29), index=6
  %all-gather.430 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1850), channel_id=1037, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1066 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.4085, %all-gather.430), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.734 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1066), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.9839 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.20014), dimensions={0,1,3}
  %multiply.5835 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.734, %broadcast.9839)
  %slice.735 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1066), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.9842 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.20017), dimensions={0,1,3}
  %multiply.5837 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.735, %broadcast.9842)
  %subtract.672 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.5835, %multiply.5837)
  %multiply.5839 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.735, %broadcast.9839)
  %multiply.5840 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.734, %broadcast.9842)
  %add.4961 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5839, %multiply.5840)
  %concatenate.454 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.672, %add.4961), dimensions={3}
  %copy.4088 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.454)
  %get-tuple-element.1851 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.29), index=9
  %all-gather.431 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1851), channel_id=1038, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1067 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.4085, %all-gather.431), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.4089 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1067)
  %get-tuple-element.1852 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.29), index=11
  %broadcast.9846 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1852), dimensions={0,1}
  %broadcast.9848 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1852), dimensions={0,2}
  %compare.3792 = pred[1,4096,4096]{2,1,0} compare(%broadcast.9846, %broadcast.9848), direction=EQ
  %and.514 = pred[1,4096,4096]{2,1,0} and(%compare.3792, %broadcast.5406)
  %select.2446 = f32[1,4096,4096]{2,1,0} select(%and.514, %broadcast.5407, %broadcast.5408)
  %compare.3794 = pred[1,4096,4096]{2,1,0} compare(%select.2446, %broadcast.5407), direction=NE
  %not.125 = pred[1,4096,4096]{2,1,0} not(%compare.3794)
  %convert.2471 = s32[1,4096,4096]{2,1,0} convert(%not.125)
  %reduce.894 = s32[1,4096]{1,0} reduce(%convert.2471, %constant.3783), dimensions={1}, to_apply=%region_1089.28019
  %reshape.20028 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.894)
  %slice.736 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.20028), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.20031 = s32[1,1]{1,0} reshape(%slice.736)
  %reshape.20048 = s32[1]{0} reshape(%reshape.20031)
  %compare.3807 = pred[1]{0} compare(%reshape.20048, %constant.4022), direction=LT
  %select.2456 = s32[1]{0} select(%compare.3807, %reshape.11470, %reshape.20048)
  %scatter.1055 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2456), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.61
  %reduce.895 = s32[1,4096]{1,0} reduce(%convert.2471, %constant.3783), dimensions={2}, to_apply=%region_1090.28027
  %reshape.20032 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.895)
  %reduce.896 = s32[1,1]{1,0} reduce(%reshape.20032, %constant.4014), dimensions={3,2}, to_apply=%region_1091.28032
  %reshape.20069 = s32[1]{0} reshape(%reduce.896)
  %compare.3820 = pred[1]{0} compare(%reshape.20069, %constant.4022), direction=LT
  %select.2466 = s32[1]{0} select(%compare.3820, %reshape.11470, %reshape.20069)
  %scatter.1060 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2466), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.61
  %custom-call.213 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.4086, %copy.4088, %copy.4089, %constant.3999, %scatter.1055, /*index=5*/%scatter.1060, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1858 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.213), index=0
  %copy.4090 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1858)
  %get-tuple-element.1859 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.29), index=7
  %all-gather.432 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1859), channel_id=1039, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1068 = bf16[1,4096,4096]{2,1,0} dot(%copy.4090, %all-gather.432), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.4091 = bf16[1,4096,4096]{2,1,0} copy(%dot.1068)
  %add.4975 = bf16[1,4096,4096]{2,1,0} add(%copy.4083, %copy.4091)
  %convert.2477 = f32[1,4096,4096]{2,1,0} convert(%add.4975)
  %multiply.5842 = f32[1,4096,4096]{2,1,0} multiply(%convert.2477, %convert.2477)
  %reduce.897 = f32[1,4096]{1,0} reduce(%multiply.5842, %constant.3956), dimensions={2}, to_apply=%region_1092.28048
  %multiply.5844 = f32[1,4096]{1,0} multiply(%reduce.897, %broadcast.5380)
  %add.4976 = f32[1,4096]{1,0} add(%multiply.5844, %broadcast.5381)
  %reshape.20071 = f32[1,4096,1]{2,1,0} reshape(%add.4976)
  %rsqrt.188 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.20071)
  %reshape.20072 = f32[1,4096]{1,0} reshape(%rsqrt.188)
  %broadcast.9863 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20072), dimensions={0,1}
  %multiply.5845 = f32[1,4096,4096]{2,1,0} multiply(%convert.2477, %broadcast.9863)
  %convert.2478 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5845)
  %get-tuple-element.1860 = bf16[4096]{0} get-tuple-element(%opt-barrier.29), index=4
  %broadcast.9864 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1860), dimensions={2}
  %multiply.5846 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2478, %broadcast.9864)
  %copy.4092 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5846)
  %get-tuple-element.1861 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.29), index=0
  %all-gather.433 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1861), channel_id=1040, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1069 = bf16[1,4096,8]{2,1,0} dot(%copy.4092, %all-gather.433), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.4093 = bf16[1,4096,8]{2,1,0} copy(%dot.1069)
  %reshape.20073 = bf16[4096,8]{1,0} reshape(%copy.4093)
  %custom-call.214 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.20073), custom_call_target="TopK", called_computations={%compare-greater-than.61.clone}
  %get-tuple-element.1862 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.214), index=0
  %get-tuple-element.1863 = s32[4096,2]{1,0} get-tuple-element(%custom-call.214), index=1
  %add.4977 = s32[4096,2]{1,0} add(%get-tuple-element.1863, %broadcast.5420)
  %sort.307 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1862, %add.4977), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.61
  %get-tuple-element.1865 = s32[4096,2]{1,0} get-tuple-element(%sort.307), index=1
  %slice.738 = s32[4096,2]{1,0} slice(%get-tuple-element.1865), slice={[0:4096], [0:2]}
  %all-gather.435 = s32[32768,2]{1,0} all-gather(%slice.738), channel_id=1042, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2214 = s32[4096,2]{1,0} dynamic-slice(%all-gather.435, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.20077 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.2214)
  %compare.3821 = pred[1,4096,2]{2,1,0} compare(%reshape.20077, %broadcast.5421), direction=LT
  %add.4978 = s32[1,4096,2]{2,1,0} add(%reshape.20077, %broadcast.5422)
  %select.2467 = s32[1,4096,2]{2,1,0} select(%compare.3821, %add.4978, %reshape.20077)
  %reshape.20079 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2467)
  %concatenate.455 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2239, %reshape.20079), dimensions={3}
  %subtract.678 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.455, %broadcast.5433)
  %scatter.1061 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.678, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1095.28127
  %gather.90 = u32[1,4096,2]{2,1,0} gather(%scatter.1061, %subtract.678), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3822 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.90), direction=EQ
  %get-tuple-element.1864 = bf16[4096,2]{1,0} get-tuple-element(%sort.307), index=0
  %slice.737 = bf16[4096,2]{1,0} slice(%get-tuple-element.1864), slice={[0:4096], [0:2]}
  %all-gather.434 = bf16[32768,2]{1,0} all-gather(%slice.737), channel_id=1041, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2224 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.434, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2481 = f32[4096,2]{1,0} convert(%dynamic-slice.2224)
  %reshape.20096 = f32[1,4096,2]{2,1,0} reshape(%convert.2481)
  %reduce.898 = f32[4096]{0} reduce(%convert.2481, %constant.4073), dimensions={1}, to_apply=%region_1093.28077
  %reshape.20097 = f32[1,4096]{1,0} reshape(%reduce.898)
  %broadcast.9871 = f32[1,4096,2]{2,1,0} broadcast(%reshape.20097), dimensions={0,1}
  %subtract.677 = f32[1,4096,2]{2,1,0} subtract(%reshape.20096, %broadcast.9871)
  %exponential.249 = f32[1,4096,2]{2,1,0} exponential(%subtract.677)
  %reduce.899 = f32[1,4096]{1,0} reduce(%exponential.249, %constant.3956), dimensions={2}, to_apply=%region_1094.28089
  %broadcast.9872 = f32[1,4096,2]{2,1,0} broadcast(%reduce.899), dimensions={0,1}
  %divide.1028 = f32[1,4096,2]{2,1,0} divide(%exponential.249, %broadcast.9872)
  %convert.2482 = bf16[1,4096,2]{2,1,0} convert(%divide.1028)
  %select.2468 = bf16[1,4096,2]{2,1,0} select(%compare.3822, %convert.2482, %broadcast.5432)
  %scatter.1062 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.678, %select.2468), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1096.28136
  %broadcast.9874 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.20077), dimensions={0,1,2}
  %iota.2249 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3823 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.9874, %iota.2249), direction=EQ
  %convert.2483 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3823)
  %reshape.20108 = s32[1,8192,8]{2,1,0} reshape(%convert.2483)
  %copy.4094 = s32[1,8192,8]{2,1,0} copy(%reshape.20108)
  %reduce-window.434 = s32[1,8192,8]{2,1,0} reduce-window(%copy.4094, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.28
  %reshape.20110 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.434)
  %copy.4095 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.20110)
  %compare.3824 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.4095, %broadcast.5435), direction=LE
  %select.2469 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3824, %convert.2483, %broadcast.5436)
  %reduce.900 = s32[1,4096,8]{2,1,0} reduce(%select.2469, %constant.3783), dimensions={2}, to_apply=%region_1097.28150
  %convert.2484 = bf16[1,4096,8]{2,1,0} convert(%reduce.900)
  %multiply.5852 = bf16[1,4096,8]{2,1,0} multiply(%scatter.1062, %convert.2484)
  %broadcast.9876 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5852), dimensions={0,1,2}
  %multiply.5853 = s32[1,8192,8]{2,1,0} multiply(%copy.4094, %reduce-window.434)
  %reshape.20111 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.5853)
  %reduce.901 = s32[1,4096,8]{2,1,0} reduce(%reshape.20111, %constant.3783), dimensions={2}, to_apply=%region_1098.28159
  %multiply.5854 = s32[1,4096,8]{2,1,0} multiply(%reduce.901, %reduce.900)
  %broadcast.9877 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5854), dimensions={0,1,2}
  %iota.2250 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3825 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.9877, %iota.2250), direction=EQ
  %convert.2485 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3825)
  %convert.2486 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2485)
  %multiply.5855 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.9876, %convert.2486)
  %slice.739 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.5855), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3826 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.739, %broadcast.5439), direction=NE
  %copy.4096 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3826)
  %convert.2487 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.4096)
  %dot.1070 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2487, %copy.4092), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.20114 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1070)
  %all-to-all.180 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.20114), channel_id=1049, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.299 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.180), dimensions={1,0,2,3,4}
  %reshape.20115 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.299)
  %transpose.300 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.20115), dimensions={1,0,2,3}
  %copy.4097 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.300)
  %get-tuple-element.1870 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.29), index=1
  %copy.4098 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1870)
  %dot.1071 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4097, %copy.4098), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4099 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1071)
  %negate.307 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.4099)
  %exponential.250 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.307)
  %add.4983 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.250, %broadcast.5440)
  %divide.1029 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.4983)
  %multiply.5859 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.4099, %divide.1029)
  %copy.4100 = bf16[1,4096,4096]{2,1,0} copy(%copy.4082)
  %copy.4101 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.739)
  %dot.1072 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.4100, %copy.4101), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.20118 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1072)
  %all-to-all.181 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.20118), channel_id=1050, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.301 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.181), dimensions={2,0,1,3,4}
  %reshape.20119 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.301)
  %transpose.302 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.20119), dimensions={2,0,3,1}
  %copy.4102 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.302)
  %get-tuple-element.1871 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.29), index=3
  %copy.4103 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1871)
  %dot.1073 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4102, %copy.4103), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.5862 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5859, %dot.1073)
  %copy.4104 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.5862)
  %get-tuple-element.1872 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.29), index=2
  %copy.4105 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1872)
  %dot.1074 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.4104, %copy.4105), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1075 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4097, %copy.4105), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4106 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1075)
  %multiply.5863 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1073, %copy.4106)
  %multiply.5864 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5863, %divide.1029)
  %multiply.5866 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.4099, %multiply.5863)
  %subtract.679 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.1029)
  %multiply.5867 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.1029, %subtract.679)
  %multiply.5868 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5866, %multiply.5867)
  %add.4984 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.5864, %multiply.5868)
  %copy.4107 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.4984)
  %dot.1076 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.4107, %copy.4098), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.4985 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1074, %dot.1076)
  %copy.4108 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.4985)
  %transpose.303 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.4108), dimensions={1,0,2,3}
  %reshape.20122 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.303)
  %all-to-all.182 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.20122), channel_id=1051, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.304 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.182), dimensions={1,0,2,3,4}
  %reshape.20123 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.304)
  %dot.1077 = bf16[1,4096,4096]{2,1,0} dot(%convert.2487, %reshape.20123), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.20125 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.2214)
  %compare.3828 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.455, %broadcast.7265), direction=GE
  %compare.3829 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.455, %broadcast.7267), direction=LE
  %and.519 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3828, %compare.3829)
  %reduce.902 = pred[1,4096,2]{2,1,0} reduce(%and.519, %constant.4025), dimensions={3}, to_apply=%region_1101.28244
  %multiply.5872 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5859, %copy.4106)
  %dot.1078 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.5872, %copy.4103), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4109 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1078)
  %reshape.20127 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.4109)
  %all-to-all.183 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.20127), channel_id=1052, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.305 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.183), dimensions={1,0,2,3,4}
  %reshape.20128 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.305)
  %dot.1079 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.4100, %reshape.20128), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.4110 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1079)
  %pad.29 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.4110, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.5877 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.29, %convert.2486)
  %reduce.903 = bf16[1,4096,8]{2,1,0} reduce(%multiply.5877, %constant.3795), dimensions={3}, to_apply=%region_1099.28226
  %multiply.5879 = bf16[1,4096,8]{2,1,0} multiply(%reduce.903, %convert.2484)
  %gather.91 = bf16[1,4096,2]{2,1,0} gather(%multiply.5879, %subtract.678), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2470 = bf16[1,4096,2]{2,1,0} select(%reduce.902, %gather.91, %broadcast.5432)
  %select.2471 = bf16[1,4096,2]{2,1,0} select(%compare.3822, %select.2470, %broadcast.5432)
  %convert.2489 = f32[1,4096,2]{2,1,0} convert(%select.2471)
  %divide.1030 = f32[1,4096,2]{2,1,0} divide(%convert.2489, %broadcast.9872)
  %multiply.5880 = f32[1,4096]{1,0} multiply(%reduce.899, %reduce.899)
  %divide.1031 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.5880)
  %broadcast.9883 = f32[1,4096,2]{2,1,0} broadcast(%divide.1031), dimensions={0,1}
  %multiply.5881 = f32[1,4096,2]{2,1,0} multiply(%convert.2489, %broadcast.9883)
  %multiply.5882 = f32[1,4096,2]{2,1,0} multiply(%multiply.5881, %exponential.249)
  %reduce.904 = f32[1,4096]{1,0} reduce(%multiply.5882, %constant.3956), dimensions={2}, to_apply=%region_1102.28258
  %negate.308 = f32[1,4096]{1,0} negate(%reduce.904)
  %broadcast.9884 = f32[1,4096,2]{2,1,0} broadcast(%negate.308), dimensions={0,1}
  %add.4986 = f32[1,4096,2]{2,1,0} add(%divide.1030, %broadcast.9884)
  %multiply.5883 = f32[1,4096,2]{2,1,0} multiply(%add.4986, %exponential.249)
  %convert.2490 = bf16[1,4096,2]{2,1,0} convert(%multiply.5883)
  %scatter.1063 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.20125, %convert.2490), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_1104.28278
  %copy.4111 = bf16[1,4096,8]{2,1,0} copy(%scatter.1063)
  %dot.1080 = bf16[1,4096,4096]{2,1,0} dot(%copy.4111, %all-gather.433), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.4987 = bf16[1,4096,4096]{1,2,0} add(%dot.1077, %dot.1080)
  %copy.4112 = bf16[1,4096,4096]{2,1,0} copy(%add.4987)
  %multiply.5884 = bf16[1,4096,4096]{2,1,0} multiply(%copy.4112, %broadcast.9864)
  %convert.2491 = f32[1,4096,4096]{2,1,0} convert(%multiply.5884)
  %multiply.5885 = f32[1,4096,4096]{2,1,0} multiply(%convert.2491, %broadcast.9863)
  %multiply.5886 = f32[1,4096,4096]{2,1,0} multiply(%convert.2477, %convert.2491)
  %reduce.905 = f32[1,4096]{1,0} reduce(%multiply.5886, %constant.3956), dimensions={2}, to_apply=%region_1107.28307
  %reshape.20141 = f32[1,4096,1]{2,1,0} reshape(%reduce.905)
  %divide.1032 = f32[1,4096,1]{2,1,0} divide(%rsqrt.188, %reshape.20071)
  %multiply.5887 = f32[1,4096,1]{2,1,0} multiply(%divide.1032, %broadcast.7210)
  %multiply.5888 = f32[1,4096,1]{2,1,0} multiply(%reshape.20141, %multiply.5887)
  %multiply.5889 = f32[1,4096,1]{2,1,0} multiply(%multiply.5888, %broadcast.7211)
  %reshape.20142 = f32[1,4096]{1,0} reshape(%multiply.5889)
  %broadcast.9888 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20142), dimensions={0,1}
  %multiply.5890 = f32[1,4096,4096]{2,1,0} multiply(%convert.2477, %broadcast.9888)
  %add.4988 = f32[1,4096,4096]{2,1,0} add(%multiply.5885, %multiply.5890)
  %convert.2492 = bf16[1,4096,4096]{2,1,0} convert(%add.4988)
  %add.4989 = bf16[1,4096,4096]{2,1,0} add(%copy.4082, %convert.2492)
  %get-tuple-element.1873 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.213), index=1
  %get-tuple-element.1874 = u32[2,4]{1,0} get-tuple-element(%custom-call.213), index=2
  %copy.4113 = bf16[1,4096,4096]{2,1,0} copy(%add.4989)
  %dot.1081 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.4113, %all-gather.432), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.4114 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1081)
  %custom-call.215 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.4086, %copy.4088, %copy.4089, %constant.3999, %get-tuple-element.1873, /*index=5*/%get-tuple-element.1874, %get-tuple-element.1858, %copy.4114, %scatter.1055, %scatter.1060, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1881 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.215), index=2
  %copy.4115 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1881)
  %dot.1082 = bf16[1,4096,4096]{2,1,0} dot(%copy.4115, %all-gather.431), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1882 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.215), index=1
  %copy.4116 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1882)
  %slice.740 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.4116), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.5892 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.740, %broadcast.9842)
  %slice.741 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.4116), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.5894 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.741, %broadcast.9839)
  %add.5003 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5892, %multiply.5894)
  %multiply.5895 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.740, %broadcast.9839)
  %negate.309 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.741)
  %multiply.5896 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.309, %broadcast.9842)
  %add.5004 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5895, %multiply.5896)
  %concatenate.460 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.5003, %add.5004), dimensions={3}
  %dot.1083 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.460, %all-gather.430), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.5005 = bf16[1,4096,4096]{2,1,0} add(%dot.1082, %dot.1083)
  %copy.4117 = bf16[1,4096,4096]{2,1,0} copy(%add.5005)
  %get-tuple-element.1883 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.215), index=0
  %copy.4118 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1883)
  %slice.742 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.4118), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.5898 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.742, %broadcast.9832)
  %slice.743 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.4118), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.5900 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.743, %broadcast.9831)
  %add.5007 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5898, %multiply.5900)
  %multiply.5901 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.742, %broadcast.9831)
  %negate.310 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.743)
  %multiply.5902 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.310, %broadcast.9832)
  %add.5008 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5901, %multiply.5902)
  %concatenate.461 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.5007, %add.5008), dimensions={3}
  %dot.1084 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.461, %all-gather.429), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.4119 = bf16[1,4096,4096]{2,1,0} copy(%dot.1084)
  %add.5009 = bf16[1,4096,4096]{2,1,0} add(%copy.4117, %copy.4119)
  %copy.4120 = bf16[1,4096,4096]{2,1,0} copy(%add.5009)
  %multiply.5903 = bf16[1,4096,4096]{2,1,0} multiply(%copy.4120, %broadcast.9824)
  %convert.2495 = f32[1,4096,4096]{2,1,0} convert(%multiply.5903)
  %multiply.5904 = f32[1,4096,4096]{2,1,0} multiply(%convert.2495, %broadcast.9822)
  %multiply.5905 = f32[1,4096,4096]{2,1,0} multiply(%convert.2459, %convert.2495)
  %reduce.906 = f32[1,4096]{1,0} reduce(%multiply.5905, %constant.3956), dimensions={2}, to_apply=%region_1111.28418
  %reshape.20189 = f32[1,4096,1]{2,1,0} reshape(%reduce.906)
  %divide.1035 = f32[1,4096,1]{2,1,0} divide(%rsqrt.187, %reshape.20011)
  %multiply.5906 = f32[1,4096,1]{2,1,0} multiply(%divide.1035, %broadcast.7210)
  %multiply.5907 = f32[1,4096,1]{2,1,0} multiply(%reshape.20189, %multiply.5906)
  %multiply.5908 = f32[1,4096,1]{2,1,0} multiply(%multiply.5907, %broadcast.7211)
  %reshape.20190 = f32[1,4096]{1,0} reshape(%multiply.5908)
  %broadcast.9909 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20190), dimensions={0,1}
  %multiply.5909 = f32[1,4096,4096]{2,1,0} multiply(%convert.2459, %broadcast.9909)
  %add.5010 = f32[1,4096,4096]{2,1,0} add(%multiply.5904, %multiply.5909)
  %convert.2496 = bf16[1,4096,4096]{2,1,0} convert(%add.5010)
  %add.5011 = bf16[1,4096,4096]{2,1,0} add(%add.4989, %convert.2496)
  %copy.4121 = bf16[1,4096,4096]{2,1,0} copy(%add.5011)
  %tuple.373 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.23, %param.24, %param.25, %param.26, %param.22, /*index=5*/%param.17, %param.19, %param.21, %param.18, %param.20, /*index=10*/%copy.2174, %param.10, %param.7, %copy.4121)
  %opt-barrier.30 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.373)
  %get-tuple-element.1884 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.30), index=13
  %copy.4122 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1884)
  %iota.2252 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1885 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.30), index=10
  %copy.4123 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1885)
  %convert.2497 = f32[1,4096,4096]{2,1,0} convert(%copy.4123)
  %multiply.5911 = f32[1,4096,4096]{2,1,0} multiply(%convert.2497, %convert.2497)
  %reduce.907 = f32[1,4096]{1,0} reduce(%multiply.5911, %constant.3956), dimensions={2}, to_apply=%region_1113.28461
  %multiply.5912 = f32[1,4096]{1,0} multiply(%reduce.907, %broadcast.5380)
  %add.5013 = f32[1,4096]{1,0} add(%multiply.5912, %broadcast.5381)
  %reshape.20192 = f32[1,4096,1]{2,1,0} reshape(%add.5013)
  %rsqrt.189 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.20192)
  %reshape.20193 = f32[1,4096]{1,0} reshape(%rsqrt.189)
  %broadcast.9913 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20193), dimensions={0,1}
  %multiply.5913 = f32[1,4096,4096]{2,1,0} multiply(%convert.2497, %broadcast.9913)
  %convert.2498 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5913)
  %get-tuple-element.1886 = bf16[4096]{0} get-tuple-element(%opt-barrier.30), index=5
  %broadcast.9914 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1886), dimensions={2}
  %multiply.5914 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2498, %broadcast.9914)
  %copy.4124 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5914)
  %copy.4125 = bf16[1,4096,4096]{2,1,0} copy(%copy.4124)
  %get-tuple-element.1887 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.30), index=8
  %all-gather.436 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1887), channel_id=1055, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1085 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.4125, %all-gather.436), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.744 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1085), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1888 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.30), index=12
  %convert.2499 = f32[1,4096]{1,0} convert(%get-tuple-element.1888)
  %broadcast.9915 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2499), dimensions={0,1}
  %divide.1036 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9915, %broadcast.5388)
  %cosine.125 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.1036)
  %convert.2502 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.125)
  %reshape.20195 = bf16[1,4096,64]{2,1,0} reshape(%convert.2502)
  %broadcast.9918 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.20195), dimensions={0,1,3}
  %multiply.5918 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.744, %broadcast.9918)
  %slice.745 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1085), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.124 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.1036)
  %convert.2504 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.124)
  %reshape.20198 = bf16[1,4096,64]{2,1,0} reshape(%convert.2504)
  %broadcast.9919 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.20198), dimensions={0,1,3}
  %multiply.5920 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.745, %broadcast.9919)
  %subtract.683 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.5918, %multiply.5920)
  %multiply.5921 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.745, %broadcast.9918)
  %multiply.5922 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.744, %broadcast.9919)
  %add.5014 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5921, %multiply.5922)
  %concatenate.462 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.683, %add.5014), dimensions={3}
  %copy.4126 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.462)
  %get-tuple-element.1889 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.30), index=6
  %all-gather.437 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1889), channel_id=1056, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1086 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.4125, %all-gather.437), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.746 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1086), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.9927 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.20195), dimensions={0,1,3}
  %multiply.5926 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.746, %broadcast.9927)
  %slice.747 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1086), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.9928 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.20198), dimensions={0,1,3}
  %multiply.5928 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.747, %broadcast.9928)
  %subtract.684 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.5926, %multiply.5928)
  %multiply.5929 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.747, %broadcast.9927)
  %multiply.5930 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.746, %broadcast.9928)
  %add.5015 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5929, %multiply.5930)
  %concatenate.463 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.684, %add.5015), dimensions={3}
  %copy.4128 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.463)
  %get-tuple-element.1890 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.30), index=9
  %all-gather.438 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1890), channel_id=1057, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1087 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.4125, %all-gather.438), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.4129 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1087)
  %get-tuple-element.1891 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.30), index=11
  %broadcast.9931 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1891), dimensions={0,1}
  %broadcast.9933 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1891), dimensions={0,2}
  %compare.3856 = pred[1,4096,4096]{2,1,0} compare(%broadcast.9931, %broadcast.9933), direction=EQ
  %and.524 = pred[1,4096,4096]{2,1,0} and(%compare.3856, %broadcast.5406)
  %select.2492 = f32[1,4096,4096]{2,1,0} select(%and.524, %broadcast.5407, %broadcast.5408)
  %compare.3858 = pred[1,4096,4096]{2,1,0} compare(%select.2492, %broadcast.5407), direction=NE
  %not.126 = pred[1,4096,4096]{2,1,0} not(%compare.3858)
  %convert.2509 = s32[1,4096,4096]{2,1,0} convert(%not.126)
  %reduce.908 = s32[1,4096]{1,0} reduce(%convert.2509, %constant.3783), dimensions={1}, to_apply=%region_1114.28595
  %reshape.20208 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.908)
  %slice.748 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.20208), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.20210 = s32[1,1]{1,0} reshape(%slice.748)
  %reshape.20225 = s32[1]{0} reshape(%reshape.20210)
  %compare.3874 = pred[1]{0} compare(%reshape.20225, %constant.4022), direction=LT
  %select.2502 = s32[1]{0} select(%compare.3874, %reshape.11470, %reshape.20225)
  %scatter.1078 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2502), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.62
  %reduce.909 = s32[1,4096]{1,0} reduce(%convert.2509, %constant.3783), dimensions={2}, to_apply=%region_1115.28603
  %reshape.20211 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.909)
  %reduce.910 = s32[1,1]{1,0} reduce(%reshape.20211, %constant.4014), dimensions={3,2}, to_apply=%region_1116.28608
  %reshape.20242 = s32[1]{0} reshape(%reduce.910)
  %compare.3887 = pred[1]{0} compare(%reshape.20242, %constant.4022), direction=LT
  %select.2512 = s32[1]{0} select(%compare.3887, %reshape.11470, %reshape.20242)
  %scatter.1083 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2512), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.62
  %custom-call.216 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.4126, %copy.4128, %copy.4129, %constant.3999, %scatter.1078, /*index=5*/%scatter.1083, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1897 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.216), index=0
  %copy.4130 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1897)
  %get-tuple-element.1898 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.30), index=7
  %all-gather.439 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1898), channel_id=1058, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1088 = bf16[1,4096,4096]{2,1,0} dot(%copy.4130, %all-gather.439), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.4131 = bf16[1,4096,4096]{2,1,0} copy(%dot.1088)
  %add.5030 = bf16[1,4096,4096]{2,1,0} add(%copy.4123, %copy.4131)
  %convert.2514 = f32[1,4096,4096]{2,1,0} convert(%add.5030)
  %multiply.5932 = f32[1,4096,4096]{2,1,0} multiply(%convert.2514, %convert.2514)
  %reduce.911 = f32[1,4096]{1,0} reduce(%multiply.5932, %constant.3956), dimensions={2}, to_apply=%region_1117.28624
  %multiply.5933 = f32[1,4096]{1,0} multiply(%reduce.911, %broadcast.5380)
  %add.5032 = f32[1,4096]{1,0} add(%multiply.5933, %broadcast.5381)
  %reshape.20244 = f32[1,4096,1]{2,1,0} reshape(%add.5032)
  %rsqrt.190 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.20244)
  %reshape.20246 = f32[1,4096]{1,0} reshape(%rsqrt.190)
  %broadcast.9946 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20246), dimensions={0,1}
  %multiply.5934 = f32[1,4096,4096]{2,1,0} multiply(%convert.2514, %broadcast.9946)
  %convert.2516 = bf16[1,4096,4096]{2,1,0} convert(%multiply.5934)
  %get-tuple-element.1899 = bf16[4096]{0} get-tuple-element(%opt-barrier.30), index=4
  %broadcast.9947 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1899), dimensions={2}
  %multiply.5936 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2516, %broadcast.9947)
  %copy.4132 = bf16[1,4096,4096]{2,1,0} copy(%multiply.5936)
  %get-tuple-element.1900 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.30), index=0
  %all-gather.440 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1900), channel_id=1059, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1089 = bf16[1,4096,8]{2,1,0} dot(%copy.4132, %all-gather.440), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.4133 = bf16[1,4096,8]{2,1,0} copy(%dot.1089)
  %reshape.20248 = bf16[4096,8]{1,0} reshape(%copy.4133)
  %custom-call.217 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.20248), custom_call_target="TopK", called_computations={%compare-greater-than.62.clone}
  %get-tuple-element.1901 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.217), index=0
  %get-tuple-element.1902 = s32[4096,2]{1,0} get-tuple-element(%custom-call.217), index=1
  %add.5033 = s32[4096,2]{1,0} add(%get-tuple-element.1902, %broadcast.5420)
  %sort.312 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1901, %add.5033), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.62
  %get-tuple-element.1904 = s32[4096,2]{1,0} get-tuple-element(%sort.312), index=1
  %slice.750 = s32[4096,2]{1,0} slice(%get-tuple-element.1904), slice={[0:4096], [0:2]}
  %all-gather.442 = s32[32768,2]{1,0} all-gather(%slice.750), channel_id=1061, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2258 = s32[4096,2]{1,0} dynamic-slice(%all-gather.442, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.20251 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.2258)
  %compare.3889 = pred[1,4096,2]{2,1,0} compare(%reshape.20251, %broadcast.5421), direction=LT
  %add.5034 = s32[1,4096,2]{2,1,0} add(%reshape.20251, %broadcast.5422)
  %select.2513 = s32[1,4096,2]{2,1,0} select(%compare.3889, %add.5034, %reshape.20251)
  %reshape.20252 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2513)
  %concatenate.464 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2252, %reshape.20252), dimensions={3}
  %subtract.690 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.464, %broadcast.5433)
  %scatter.1084 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.690, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1120.28703
  %gather.92 = u32[1,4096,2]{2,1,0} gather(%scatter.1084, %subtract.690), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3890 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.92), direction=EQ
  %get-tuple-element.1903 = bf16[4096,2]{1,0} get-tuple-element(%sort.312), index=0
  %slice.749 = bf16[4096,2]{1,0} slice(%get-tuple-element.1903), slice={[0:4096], [0:2]}
  %all-gather.441 = bf16[32768,2]{1,0} all-gather(%slice.749), channel_id=1060, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2268 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.441, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2519 = f32[4096,2]{1,0} convert(%dynamic-slice.2268)
  %reshape.20268 = f32[1,4096,2]{2,1,0} reshape(%convert.2519)
  %reduce.912 = f32[4096]{0} reduce(%convert.2519, %constant.4073), dimensions={1}, to_apply=%region_1118.28653
  %reshape.20269 = f32[1,4096]{1,0} reshape(%reduce.912)
  %broadcast.9958 = f32[1,4096,2]{2,1,0} broadcast(%reshape.20269), dimensions={0,1}
  %subtract.689 = f32[1,4096,2]{2,1,0} subtract(%reshape.20268, %broadcast.9958)
  %exponential.251 = f32[1,4096,2]{2,1,0} exponential(%subtract.689)
  %reduce.913 = f32[1,4096]{1,0} reduce(%exponential.251, %constant.3956), dimensions={2}, to_apply=%region_1119.28665
  %broadcast.9959 = f32[1,4096,2]{2,1,0} broadcast(%reduce.913), dimensions={0,1}
  %divide.1040 = f32[1,4096,2]{2,1,0} divide(%exponential.251, %broadcast.9959)
  %convert.2520 = bf16[1,4096,2]{2,1,0} convert(%divide.1040)
  %select.2514 = bf16[1,4096,2]{2,1,0} select(%compare.3890, %convert.2520, %broadcast.5432)
  %scatter.1085 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.690, %select.2514), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1121.28712
  %broadcast.9961 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.20251), dimensions={0,1,2}
  %iota.2260 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3891 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.9961, %iota.2260), direction=EQ
  %convert.2521 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3891)
  %reshape.20279 = s32[1,8192,8]{2,1,0} reshape(%convert.2521)
  %copy.4134 = s32[1,8192,8]{2,1,0} copy(%reshape.20279)
  %reduce-window.439 = s32[1,8192,8]{2,1,0} reduce-window(%copy.4134, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.29
  %reshape.20281 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.439)
  %copy.4135 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.20281)
  %compare.3892 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.4135, %broadcast.5435), direction=LE
  %select.2515 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3892, %convert.2521, %broadcast.5436)
  %reduce.914 = s32[1,4096,8]{2,1,0} reduce(%select.2515, %constant.3783), dimensions={2}, to_apply=%region_1122.28726
  %convert.2522 = bf16[1,4096,8]{2,1,0} convert(%reduce.914)
  %multiply.5942 = bf16[1,4096,8]{2,1,0} multiply(%scatter.1085, %convert.2522)
  %broadcast.9963 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5942), dimensions={0,1,2}
  %multiply.5943 = s32[1,8192,8]{2,1,0} multiply(%copy.4134, %reduce-window.439)
  %reshape.20283 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.5943)
  %reduce.915 = s32[1,4096,8]{2,1,0} reduce(%reshape.20283, %constant.3783), dimensions={2}, to_apply=%region_1123.28735
  %multiply.5944 = s32[1,4096,8]{2,1,0} multiply(%reduce.915, %reduce.914)
  %broadcast.9964 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.5944), dimensions={0,1,2}
  %iota.2261 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3893 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.9964, %iota.2261), direction=EQ
  %convert.2523 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3893)
  %convert.2524 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2523)
  %multiply.5945 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.9963, %convert.2524)
  %slice.751 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.5945), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3894 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.751, %broadcast.5439), direction=NE
  %copy.4136 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3894)
  %convert.2525 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.4136)
  %dot.1090 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2525, %copy.4132), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.20286 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1090)
  %all-to-all.184 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.20286), channel_id=1068, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.306 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.184), dimensions={1,0,2,3,4}
  %reshape.20288 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.306)
  %transpose.307 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.20288), dimensions={1,0,2,3}
  %copy.4137 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.307)
  %get-tuple-element.1909 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.30), index=1
  %copy.4138 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1909)
  %dot.1091 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4137, %copy.4138), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4139 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1091)
  %negate.311 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.4139)
  %exponential.252 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.311)
  %add.5039 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.252, %broadcast.5440)
  %divide.1041 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.5039)
  %multiply.5950 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.4139, %divide.1041)
  %copy.4140 = bf16[1,4096,4096]{2,1,0} copy(%copy.4122)
  %copy.4141 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.751)
  %dot.1092 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.4140, %copy.4141), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.20291 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1092)
  %all-to-all.185 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.20291), channel_id=1069, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.308 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.185), dimensions={2,0,1,3,4}
  %reshape.20293 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.308)
  %transpose.309 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.20293), dimensions={2,0,3,1}
  %copy.4142 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.309)
  %get-tuple-element.1910 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.30), index=3
  %copy.4143 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1910)
  %dot.1093 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4142, %copy.4143), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.5953 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5950, %dot.1093)
  %copy.4144 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.5953)
  %get-tuple-element.1911 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.30), index=2
  %copy.4145 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1911)
  %dot.1094 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.4144, %copy.4145), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1095 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4137, %copy.4145), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4146 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1095)
  %multiply.5955 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1093, %copy.4146)
  %multiply.5956 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5955, %divide.1041)
  %multiply.5957 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.4139, %multiply.5955)
  %subtract.691 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.1041)
  %multiply.5958 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.1041, %subtract.691)
  %multiply.5959 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5957, %multiply.5958)
  %add.5040 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.5956, %multiply.5959)
  %copy.4147 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.5040)
  %dot.1096 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.4147, %copy.4138), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.5041 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1094, %dot.1096)
  %copy.4148 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.5041)
  %transpose.310 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.4148), dimensions={1,0,2,3}
  %reshape.20296 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.310)
  %all-to-all.186 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.20296), channel_id=1070, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.311 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.186), dimensions={1,0,2,3,4}
  %reshape.20297 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.311)
  %dot.1097 = bf16[1,4096,4096]{2,1,0} dot(%convert.2525, %reshape.20297), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.20299 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.2258)
  %compare.3896 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.464, %broadcast.7265), direction=GE
  %compare.3897 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.464, %broadcast.7267), direction=LE
  %and.529 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3896, %compare.3897)
  %reduce.916 = pred[1,4096,2]{2,1,0} reduce(%and.529, %constant.4025), dimensions={3}, to_apply=%region_1126.28820
  %multiply.5962 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.5950, %copy.4146)
  %dot.1098 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.5962, %copy.4143), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4149 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1098)
  %reshape.20302 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.4149)
  %all-to-all.187 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.20302), channel_id=1071, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.312 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.187), dimensions={1,0,2,3,4}
  %reshape.20303 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.312)
  %dot.1099 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.4140, %reshape.20303), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.4150 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1099)
  %pad.30 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.4150, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.5966 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.30, %convert.2524)
  %reduce.917 = bf16[1,4096,8]{2,1,0} reduce(%multiply.5966, %constant.3795), dimensions={3}, to_apply=%region_1124.28802
  %multiply.5967 = bf16[1,4096,8]{2,1,0} multiply(%reduce.917, %convert.2522)
  %gather.93 = bf16[1,4096,2]{2,1,0} gather(%multiply.5967, %subtract.690), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2516 = bf16[1,4096,2]{2,1,0} select(%reduce.916, %gather.93, %broadcast.5432)
  %select.2517 = bf16[1,4096,2]{2,1,0} select(%compare.3890, %select.2516, %broadcast.5432)
  %convert.2527 = f32[1,4096,2]{2,1,0} convert(%select.2517)
  %divide.1042 = f32[1,4096,2]{2,1,0} divide(%convert.2527, %broadcast.9959)
  %multiply.5968 = f32[1,4096]{1,0} multiply(%reduce.913, %reduce.913)
  %divide.1043 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.5968)
  %broadcast.9970 = f32[1,4096,2]{2,1,0} broadcast(%divide.1043), dimensions={0,1}
  %multiply.5969 = f32[1,4096,2]{2,1,0} multiply(%convert.2527, %broadcast.9970)
  %multiply.5970 = f32[1,4096,2]{2,1,0} multiply(%multiply.5969, %exponential.251)
  %reduce.918 = f32[1,4096]{1,0} reduce(%multiply.5970, %constant.3956), dimensions={2}, to_apply=%region_1127.28834
  %negate.312 = f32[1,4096]{1,0} negate(%reduce.918)
  %broadcast.9971 = f32[1,4096,2]{2,1,0} broadcast(%negate.312), dimensions={0,1}
  %add.5042 = f32[1,4096,2]{2,1,0} add(%divide.1042, %broadcast.9971)
  %multiply.5971 = f32[1,4096,2]{2,1,0} multiply(%add.5042, %exponential.251)
  %convert.2528 = bf16[1,4096,2]{2,1,0} convert(%multiply.5971)
  %scatter.1086 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.20299, %convert.2528), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_1129.28854
  %copy.4151 = bf16[1,4096,8]{2,1,0} copy(%scatter.1086)
  %dot.1100 = bf16[1,4096,4096]{2,1,0} dot(%copy.4151, %all-gather.440), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.5043 = bf16[1,4096,4096]{1,2,0} add(%dot.1097, %dot.1100)
  %copy.4152 = bf16[1,4096,4096]{2,1,0} copy(%add.5043)
  %multiply.5972 = bf16[1,4096,4096]{2,1,0} multiply(%copy.4152, %broadcast.9947)
  %convert.2529 = f32[1,4096,4096]{2,1,0} convert(%multiply.5972)
  %multiply.5973 = f32[1,4096,4096]{2,1,0} multiply(%convert.2529, %broadcast.9946)
  %multiply.5974 = f32[1,4096,4096]{2,1,0} multiply(%convert.2514, %convert.2529)
  %reduce.919 = f32[1,4096]{1,0} reduce(%multiply.5974, %constant.3956), dimensions={2}, to_apply=%region_1132.28883
  %reshape.20319 = f32[1,4096,1]{2,1,0} reshape(%reduce.919)
  %divide.1044 = f32[1,4096,1]{2,1,0} divide(%rsqrt.190, %reshape.20244)
  %multiply.5975 = f32[1,4096,1]{2,1,0} multiply(%divide.1044, %broadcast.7210)
  %multiply.5976 = f32[1,4096,1]{2,1,0} multiply(%reshape.20319, %multiply.5975)
  %multiply.5977 = f32[1,4096,1]{2,1,0} multiply(%multiply.5976, %broadcast.7211)
  %reshape.20320 = f32[1,4096]{1,0} reshape(%multiply.5977)
  %broadcast.9975 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20320), dimensions={0,1}
  %multiply.5978 = f32[1,4096,4096]{2,1,0} multiply(%convert.2514, %broadcast.9975)
  %add.5044 = f32[1,4096,4096]{2,1,0} add(%multiply.5973, %multiply.5978)
  %convert.2530 = bf16[1,4096,4096]{2,1,0} convert(%add.5044)
  %add.5045 = bf16[1,4096,4096]{2,1,0} add(%copy.4122, %convert.2530)
  %get-tuple-element.1912 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.216), index=1
  %get-tuple-element.1913 = u32[2,4]{1,0} get-tuple-element(%custom-call.216), index=2
  %copy.4153 = bf16[1,4096,4096]{2,1,0} copy(%add.5045)
  %dot.1101 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.4153, %all-gather.439), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.4154 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1101)
  %custom-call.218 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.4126, %copy.4128, %copy.4129, %constant.3999, %get-tuple-element.1912, /*index=5*/%get-tuple-element.1913, %get-tuple-element.1897, %copy.4154, %scatter.1078, %scatter.1083, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1920 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.218), index=2
  %copy.4155 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1920)
  %dot.1102 = bf16[1,4096,4096]{2,1,0} dot(%copy.4155, %all-gather.438), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1921 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.218), index=1
  %copy.4156 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1921)
  %slice.752 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.4156), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.5980 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.752, %broadcast.9928)
  %slice.753 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.4156), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.5982 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.753, %broadcast.9927)
  %add.5058 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5980, %multiply.5982)
  %multiply.5983 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.752, %broadcast.9927)
  %negate.313 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.753)
  %multiply.5984 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.313, %broadcast.9928)
  %add.5059 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.5983, %multiply.5984)
  %concatenate.469 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.5058, %add.5059), dimensions={3}
  %dot.1103 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.469, %all-gather.437), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.5060 = bf16[1,4096,4096]{2,1,0} add(%dot.1102, %dot.1103)
  %copy.4157 = bf16[1,4096,4096]{2,1,0} copy(%add.5060)
  %get-tuple-element.1922 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.218), index=0
  %copy.4158 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1922)
  %slice.754 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.4158), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.5986 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.754, %broadcast.9919)
  %slice.755 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.4158), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.5988 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.755, %broadcast.9918)
  %add.5061 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5986, %multiply.5988)
  %multiply.5989 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.754, %broadcast.9918)
  %negate.314 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.755)
  %multiply.5990 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.314, %broadcast.9919)
  %add.5062 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.5989, %multiply.5990)
  %concatenate.470 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.5061, %add.5062), dimensions={3}
  %dot.1104 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.470, %all-gather.436), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.4159 = bf16[1,4096,4096]{2,1,0} copy(%dot.1104)
  %add.5063 = bf16[1,4096,4096]{2,1,0} add(%copy.4157, %copy.4159)
  %copy.4160 = bf16[1,4096,4096]{2,1,0} copy(%add.5063)
  %multiply.5991 = bf16[1,4096,4096]{2,1,0} multiply(%copy.4160, %broadcast.9914)
  %convert.2533 = f32[1,4096,4096]{2,1,0} convert(%multiply.5991)
  %multiply.5992 = f32[1,4096,4096]{2,1,0} multiply(%convert.2533, %broadcast.9913)
  %multiply.5993 = f32[1,4096,4096]{2,1,0} multiply(%convert.2497, %convert.2533)
  %reduce.920 = f32[1,4096]{1,0} reduce(%multiply.5993, %constant.3956), dimensions={2}, to_apply=%region_1136.28994
  %reshape.20368 = f32[1,4096,1]{2,1,0} reshape(%reduce.920)
  %divide.1047 = f32[1,4096,1]{2,1,0} divide(%rsqrt.189, %reshape.20192)
  %multiply.5994 = f32[1,4096,1]{2,1,0} multiply(%divide.1047, %broadcast.7210)
  %multiply.5995 = f32[1,4096,1]{2,1,0} multiply(%reshape.20368, %multiply.5994)
  %multiply.5996 = f32[1,4096,1]{2,1,0} multiply(%multiply.5995, %broadcast.7211)
  %reshape.20369 = f32[1,4096]{1,0} reshape(%multiply.5996)
  %broadcast.9992 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20369), dimensions={0,1}
  %multiply.5997 = f32[1,4096,4096]{2,1,0} multiply(%convert.2497, %broadcast.9992)
  %add.5065 = f32[1,4096,4096]{2,1,0} add(%multiply.5992, %multiply.5997)
  %convert.2534 = bf16[1,4096,4096]{2,1,0} convert(%add.5065)
  %add.5066 = bf16[1,4096,4096]{2,1,0} add(%add.5045, %convert.2534)
  %copy.4161 = bf16[1,4096,4096]{2,1,0} copy(%add.5066)
  %tuple.378 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.13, %param.14, %param.15, %param.16, %param.12, /*index=5*/%param.5, %param.8, %param.11, %param.6, %param.9, /*index=10*/%copy.2150, %param.10, %param.7, %copy.4161)
  %opt-barrier.31 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.378)
  %get-tuple-element.1923 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.31), index=10
  %copy.4162 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1923)
  %convert.2535 = f32[1,4096,4096]{2,1,0} convert(%copy.4162)
  %multiply.5998 = f32[1,4096,4096]{2,1,0} multiply(%convert.2535, %convert.2535)
  %reduce.921 = f32[1,4096]{1,0} reduce(%multiply.5998, %constant.3956), dimensions={2}, to_apply=%region_1138.29037
  %multiply.5999 = f32[1,4096]{1,0} multiply(%reduce.921, %broadcast.5380)
  %add.5067 = f32[1,4096]{1,0} add(%multiply.5999, %broadcast.5381)
  %reshape.20370 = f32[1,4096,1]{2,1,0} reshape(%add.5067)
  %rsqrt.191 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.20370)
  %reshape.20371 = f32[1,4096]{1,0} reshape(%rsqrt.191)
  %broadcast.9995 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20371), dimensions={0,1}
  %multiply.6000 = f32[1,4096,4096]{2,1,0} multiply(%convert.2535, %broadcast.9995)
  %convert.2536 = bf16[1,4096,4096]{2,1,0} convert(%multiply.6000)
  %get-tuple-element.1924 = bf16[4096]{0} get-tuple-element(%opt-barrier.31), index=5
  %broadcast.9996 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1924), dimensions={2}
  %multiply.6001 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2536, %broadcast.9996)
  %copy.4163 = bf16[1,4096,4096]{2,1,0} copy(%multiply.6001)
  %copy.4164 = bf16[1,4096,4096]{2,1,0} copy(%copy.4163)
  %get-tuple-element.1925 = bf16[512,32,128]{2,1,0} get-tuple-element(%opt-barrier.31), index=8
  %all-gather.443 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1925), channel_id=1074, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1105 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.4164, %all-gather.443), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.756 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1105), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1926 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.31), index=12
  %convert.2537 = f32[1,4096]{1,0} convert(%get-tuple-element.1926)
  %broadcast.9997 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert.2537), dimensions={0,1}
  %divide.1048 = f32[1,4096,1,64]{3,2,1,0} divide(%broadcast.9997, %broadcast.5388)
  %cosine.127 = f32[1,4096,1,64]{3,2,1,0} cosine(%divide.1048)
  %convert.2539 = bf16[1,4096,1,64]{3,2,1,0} convert(%cosine.127)
  %reshape.20373 = bf16[1,4096,64]{2,1,0} reshape(%convert.2539)
  %broadcast.10000 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.20373), dimensions={0,1,3}
  %multiply.6005 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.756, %broadcast.10000)
  %slice.757 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1105), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sine.126 = f32[1,4096,1,64]{3,2,1,0} sine(%divide.1048)
  %convert.2540 = bf16[1,4096,1,64]{3,2,1,0} convert(%sine.126)
  %reshape.20375 = bf16[1,4096,64]{2,1,0} reshape(%convert.2540)
  %broadcast.10001 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%reshape.20375), dimensions={0,1,3}
  %multiply.6007 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.757, %broadcast.10001)
  %subtract.695 = bf16[1,4096,32,64]{3,2,1,0} subtract(%multiply.6005, %multiply.6007)
  %multiply.6008 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.757, %broadcast.10000)
  %multiply.6009 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.756, %broadcast.10001)
  %add.5068 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.6008, %multiply.6009)
  %concatenate.471 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%subtract.695, %add.5068), dimensions={3}
  %copy.4165 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.471)
  %get-tuple-element.1927 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.31), index=6
  %all-gather.444 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1927), channel_id=1075, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1106 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.4164, %all-gather.444), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.758 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1106), slice={[0:1], [0:4096], [0:8], [0:64]}
  %broadcast.10009 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.20373), dimensions={0,1,3}
  %multiply.6013 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.758, %broadcast.10009)
  %slice.759 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1106), slice={[0:1], [0:4096], [0:8], [64:128]}
  %broadcast.10010 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%reshape.20375), dimensions={0,1,3}
  %multiply.6015 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.759, %broadcast.10010)
  %subtract.696 = bf16[1,4096,8,64]{3,2,1,0} subtract(%multiply.6013, %multiply.6015)
  %multiply.6016 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.759, %broadcast.10009)
  %multiply.6017 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.758, %broadcast.10010)
  %add.5069 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.6016, %multiply.6017)
  %concatenate.472 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%subtract.696, %add.5069), dimensions={3}
  %copy.4167 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.472)
  %get-tuple-element.1928 = bf16[512,8,128]{2,1,0} get-tuple-element(%opt-barrier.31), index=9
  %all-gather.445 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1928), channel_id=1076, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1107 = bf16[1,4096,8,128]{3,2,1,0} dot(%copy.4164, %all-gather.445), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.4168 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1107)
  %get-tuple-element.1929 = s32[1,4096]{1,0} get-tuple-element(%opt-barrier.31), index=11
  %broadcast.10013 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1929), dimensions={0,1}
  %broadcast.10014 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1929), dimensions={0,2}
  %compare.3925 = pred[1,4096,4096]{2,1,0} compare(%broadcast.10013, %broadcast.10014), direction=EQ
  %and.534 = pred[1,4096,4096]{2,1,0} and(%compare.3925, %broadcast.5406)
  %select.2538 = f32[1,4096,4096]{2,1,0} select(%and.534, %broadcast.5407, %broadcast.5408)
  %compare.3928 = pred[1,4096,4096]{2,1,0} compare(%select.2538, %broadcast.5407), direction=NE
  %not.127 = pred[1,4096,4096]{2,1,0} not(%compare.3928)
  %convert.2545 = s32[1,4096,4096]{2,1,0} convert(%not.127)
  %reduce.922 = s32[1,4096]{1,0} reduce(%convert.2545, %constant.3783), dimensions={1}, to_apply=%region_1139.29171
  %reshape.20384 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.922)
  %slice.760 = s32[1,1,1,1]{3,2,1,0} slice(%reshape.20384), slice={[0:1], [0:1], [0:1], [0:1]}
  %reshape.20386 = s32[1,1]{1,0} reshape(%slice.760)
  %reshape.20402 = s32[1]{0} reshape(%reshape.20386)
  %compare.3941 = pred[1]{0} compare(%reshape.20402, %constant.4022), direction=LT
  %select.2548 = s32[1]{0} select(%compare.3941, %reshape.11470, %reshape.20402)
  %scatter.1101 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2548), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.178._custom_call_lowering_rule.63
  %reduce.923 = s32[1,4096]{1,0} reduce(%convert.2545, %constant.3783), dimensions={2}, to_apply=%region_1140.29179
  %reshape.20387 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.923)
  %reduce.924 = s32[1,1]{1,0} reduce(%reshape.20387, %constant.4014), dimensions={3,2}, to_apply=%region_1141.29184
  %reshape.20420 = s32[1]{0} reshape(%reduce.924)
  %compare.3954 = pred[1]{0} compare(%reshape.20420, %constant.4022), direction=LT
  %select.2558 = s32[1]{0} select(%compare.3954, %reshape.11470, %reshape.20420)
  %scatter.1106 = s32[2]{0} scatter(%scatter.171, %reshape.11468, %select.2558), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_11.232._custom_call_lowering_rule.63
  %custom-call.219 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.4165, %copy.4167, %copy.4168, %constant.3999, %scatter.1101, /*index=5*/%scatter.1106, %constant.3999, %constant.3999, %dynamic-slice.38), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1935 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.219), index=0
  %copy.4169 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1935)
  %get-tuple-element.1936 = bf16[32,128,512]{2,1,0} get-tuple-element(%opt-barrier.31), index=7
  %all-gather.446 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1936), channel_id=1077, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1108 = bf16[1,4096,4096]{2,1,0} dot(%copy.4169, %all-gather.446), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.4170 = bf16[1,4096,4096]{2,1,0} copy(%dot.1108)
  %add.5085 = bf16[1,4096,4096]{2,1,0} add(%copy.4162, %copy.4170)
  %convert.2549 = f32[1,4096,4096]{2,1,0} convert(%add.5085)
  %multiply.6019 = f32[1,4096,4096]{2,1,0} multiply(%convert.2549, %convert.2549)
  %reduce.925 = f32[1,4096]{1,0} reduce(%multiply.6019, %constant.3956), dimensions={2}, to_apply=%region_1142.29200
  %multiply.6020 = f32[1,4096]{1,0} multiply(%reduce.925, %broadcast.5380)
  %add.5086 = f32[1,4096]{1,0} add(%multiply.6020, %broadcast.5381)
  %reshape.20423 = f32[1,4096,1]{2,1,0} reshape(%add.5086)
  %rsqrt.192 = f32[1,4096,1]{2,1,0} rsqrt(%reshape.20423)
  %reshape.20424 = f32[1,4096]{1,0} reshape(%rsqrt.192)
  %broadcast.10026 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20424), dimensions={0,1}
  %multiply.6021 = f32[1,4096,4096]{2,1,0} multiply(%convert.2549, %broadcast.10026)
  %convert.2550 = bf16[1,4096,4096]{2,1,0} convert(%multiply.6021)
  %get-tuple-element.1937 = bf16[4096]{0} get-tuple-element(%opt-barrier.31), index=4
  %broadcast.10027 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1937), dimensions={2}
  %multiply.6022 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2550, %broadcast.10027)
  %copy.4171 = bf16[1,4096,4096]{2,1,0} copy(%multiply.6022)
  %get-tuple-element.1938 = bf16[512,8]{1,0} get-tuple-element(%opt-barrier.31), index=0
  %all-gather.447 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1938), channel_id=1078, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1109 = bf16[1,4096,8]{2,1,0} dot(%copy.4171, %all-gather.447), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.4172 = bf16[1,4096,8]{2,1,0} copy(%dot.1109)
  %reshape.20425 = bf16[4096,8]{1,0} reshape(%copy.4172)
  %custom-call.220 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%reshape.20425), custom_call_target="TopK", called_computations={%compare-greater-than.63.clone}
  %get-tuple-element.1939 = bf16[4096,2]{1,0} get-tuple-element(%custom-call.220), index=0
  %get-tuple-element.1940 = s32[4096,2]{1,0} get-tuple-element(%custom-call.220), index=1
  %add.5087 = s32[4096,2]{1,0} add(%get-tuple-element.1940, %broadcast.5420)
  %sort.317 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1939, %add.5087), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.63
  %get-tuple-element.1942 = s32[4096,2]{1,0} get-tuple-element(%sort.317), index=1
  %slice.762 = s32[4096,2]{1,0} slice(%get-tuple-element.1942), slice={[0:4096], [0:2]}
  %all-gather.449 = s32[32768,2]{1,0} all-gather(%slice.762), channel_id=1080, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2301 = s32[4096,2]{1,0} dynamic-slice(%all-gather.449, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %reshape.20429 = s32[1,4096,2,1]{3,2,1,0} reshape(%dynamic-slice.2301)
  %iota.2270 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %reshape.20434 = s32[1,4096,2]{2,1,0} reshape(%dynamic-slice.2301)
  %compare.3955 = pred[1,4096,2]{2,1,0} compare(%reshape.20434, %broadcast.5421), direction=LT
  %add.5093 = s32[1,4096,2]{2,1,0} add(%reshape.20434, %broadcast.5422)
  %select.2559 = s32[1,4096,2]{2,1,0} select(%compare.3955, %add.5093, %reshape.20434)
  %reshape.20435 = s32[1,4096,2,1]{3,2,1,0} reshape(%select.2559)
  %concatenate.473 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.2498, %iota.2270, %reshape.20435), dimensions={3}
  %subtract.699 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.473, %broadcast.5433)
  %scatter.1107 = u32[1,4096,8]{2,1,0} scatter(%broadcast.5427, %subtract.699, %add.2553), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1145.29279
  %gather.94 = u32[1,4096,2]{2,1,0} gather(%scatter.1107, %subtract.699), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %compare.3956 = pred[1,4096,2]{2,1,0} compare(%add.2553, %gather.94), direction=EQ
  %compare.3957 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.473, %broadcast.7265), direction=GE
  %compare.3958 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.473, %broadcast.7267), direction=LE
  %and.539 = pred[1,4096,2,3]{3,2,1,0} and(%compare.3957, %compare.3958)
  %reduce.926 = pred[1,4096,2]{2,1,0} reduce(%and.539, %constant.4025), dimensions={3}, to_apply=%region_1151.29396
  %get-tuple-element.1946 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%opt-barrier.31), index=13
  %copy.4173 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1946)
  %copy.4174 = bf16[1,4096,4096]{2,1,0} copy(%copy.4173)
  %get-tuple-element.1941 = bf16[4096,2]{1,0} get-tuple-element(%sort.317), index=0
  %slice.761 = bf16[4096,2]{1,0} slice(%get-tuple-element.1941), slice={[0:4096], [0:2]}
  %all-gather.448 = bf16[32768,2]{1,0} all-gather(%slice.761), channel_id=1079, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dynamic-slice.2312 = bf16[4096,2]{1,0} dynamic-slice(%all-gather.448, %reshape.11488, %constant.3783), dynamic_slice_sizes={4096,2}
  %convert.2553 = f32[4096,2]{1,0} convert(%dynamic-slice.2312)
  %reshape.20453 = f32[1,4096,2]{2,1,0} reshape(%convert.2553)
  %reduce.927 = f32[4096]{0} reduce(%convert.2553, %constant.4073), dimensions={1}, to_apply=%region_1143.29229
  %reshape.20454 = f32[1,4096]{1,0} reshape(%reduce.927)
  %broadcast.10036 = f32[1,4096,2]{2,1,0} broadcast(%reshape.20454), dimensions={0,1}
  %subtract.701 = f32[1,4096,2]{2,1,0} subtract(%reshape.20453, %broadcast.10036)
  %exponential.253 = f32[1,4096,2]{2,1,0} exponential(%subtract.701)
  %reduce.928 = f32[1,4096]{1,0} reduce(%exponential.253, %constant.3956), dimensions={2}, to_apply=%region_1144.29241
  %broadcast.10037 = f32[1,4096,2]{2,1,0} broadcast(%reduce.928), dimensions={0,1}
  %divide.1052 = f32[1,4096,2]{2,1,0} divide(%exponential.253, %broadcast.10037)
  %convert.2554 = bf16[1,4096,2]{2,1,0} convert(%divide.1052)
  %select.2560 = bf16[1,4096,2]{2,1,0} select(%compare.3956, %convert.2554, %broadcast.5432)
  %scatter.1108 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %subtract.699, %select.2560), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_1146.29288
  %broadcast.10039 = s32[1,4096,2,8]{3,2,1,0} broadcast(%reshape.20434), dimensions={0,1,2}
  %iota.2271 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %compare.3960 = pred[1,4096,2,8]{3,2,1,0} compare(%broadcast.10039, %iota.2271), direction=EQ
  %convert.2555 = s32[1,4096,2,8]{3,2,1,0} convert(%compare.3960)
  %reshape.20465 = s32[1,8192,8]{2,1,0} reshape(%convert.2555)
  %copy.4175 = s32[1,8192,8]{2,1,0} copy(%reshape.20465)
  %reduce-window.444 = s32[1,8192,8]{2,1,0} reduce-window(%copy.4175, %constant.3783), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1439.clone.clone.30
  %reshape.20467 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.444)
  %copy.4176 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.20467)
  %compare.3961 = pred[1,4096,2,8]{3,2,1,0} compare(%copy.4176, %broadcast.5435), direction=LE
  %select.2561 = s32[1,4096,2,8]{3,2,1,0} select(%compare.3961, %convert.2555, %broadcast.5436)
  %reduce.929 = s32[1,4096,8]{2,1,0} reduce(%select.2561, %constant.3783), dimensions={2}, to_apply=%region_1147.29302
  %convert.2556 = bf16[1,4096,8]{2,1,0} convert(%reduce.929)
  %multiply.6029 = bf16[1,4096,8]{2,1,0} multiply(%scatter.1108, %convert.2556)
  %broadcast.10042 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.6029), dimensions={0,1,2}
  %multiply.6030 = s32[1,8192,8]{2,1,0} multiply(%copy.4175, %reduce-window.444)
  %reshape.20469 = s32[1,4096,2,8]{3,2,1,0} reshape(%multiply.6030)
  %reduce.930 = s32[1,4096,8]{2,1,0} reduce(%reshape.20469, %constant.3783), dimensions={2}, to_apply=%region_1148.29311
  %multiply.6032 = s32[1,4096,8]{2,1,0} multiply(%reduce.930, %reduce.929)
  %broadcast.10044 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%multiply.6032), dimensions={0,1,2}
  %iota.2272 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %compare.3962 = pred[1,4096,8,1025]{3,2,1,0} compare(%broadcast.10044, %iota.2272), direction=EQ
  %convert.2557 = s32[1,4096,8,1025]{3,2,1,0} convert(%compare.3962)
  %convert.2558 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert.2557)
  %multiply.6033 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%broadcast.10042, %convert.2558)
  %slice.763 = bf16[1,4096,8,1024]{3,2,1,0} slice(%multiply.6033), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %compare.3963 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.763, %broadcast.5439), direction=NE
  %copy.4177 = pred[1,4096,8,1024]{3,2,1,0} copy(%compare.3963)
  %convert.2559 = bf16[1,4096,8,1024]{3,2,1,0} convert(%copy.4177)
  %dot.1110 = bf16[1,8,1024,4096]{3,2,1,0} dot(%convert.2559, %copy.4171), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.20474 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1110)
  %all-to-all.188 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.20474), channel_id=1087, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.313 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.188), dimensions={1,0,2,3,4}
  %reshape.20475 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.313)
  %transpose.314 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.20475), dimensions={1,0,2,3}
  %copy.4178 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.314)
  %get-tuple-element.1948 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.31), index=1
  %copy.4179 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1948)
  %dot.1111 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4178, %copy.4179), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4180 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1111)
  %negate.315 = bf16[1,8,1024,14336]{3,2,1,0} negate(%copy.4180)
  %exponential.254 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%negate.315)
  %add.5094 = bf16[1,8,1024,14336]{3,2,1,0} add(%exponential.254, %broadcast.5440)
  %divide.1053 = bf16[1,8,1024,14336]{3,2,1,0} divide(%broadcast.5440, %add.5094)
  %multiply.6037 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.4180, %divide.1053)
  %get-tuple-element.1949 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%opt-barrier.31), index=2
  %copy.4181 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1949)
  %dot.1112 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4178, %copy.4181), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4182 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1112)
  %multiply.6040 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.6037, %copy.4182)
  %get-tuple-element.1950 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%opt-barrier.31), index=3
  %copy.4183 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1950)
  %dot.1113 = bf16[1,8,1024,4096]{3,2,1,0} dot(%multiply.6040, %copy.4183), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %copy.4184 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1113)
  %reshape.20478 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%copy.4184)
  %all-to-all.189 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.20478), channel_id=1088, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.315 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.189), dimensions={1,0,2,3,4}
  %reshape.20479 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.315)
  %dot.1114 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.4174, %reshape.20479), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %copy.4185 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1114)
  %pad.31 = bf16[1,4096,8,1025]{3,2,1,0} pad(%copy.4185, %constant.3795), padding=0_0x0_0x0_0x1_0
  %multiply.6044 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.31, %convert.2558)
  %reduce.931 = bf16[1,4096,8]{2,1,0} reduce(%multiply.6044, %constant.3795), dimensions={3}, to_apply=%region_1149.29378
  %multiply.6045 = bf16[1,4096,8]{2,1,0} multiply(%reduce.931, %convert.2556)
  %gather.95 = bf16[1,4096,2]{2,1,0} gather(%multiply.6045, %subtract.699), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select.2562 = bf16[1,4096,2]{2,1,0} select(%reduce.926, %gather.95, %broadcast.5432)
  %select.2563 = bf16[1,4096,2]{2,1,0} select(%compare.3956, %select.2562, %broadcast.5432)
  %convert.2560 = f32[1,4096,2]{2,1,0} convert(%select.2563)
  %divide.1054 = f32[1,4096,2]{2,1,0} divide(%convert.2560, %broadcast.10037)
  %multiply.6047 = f32[1,4096]{1,0} multiply(%reduce.928, %reduce.928)
  %divide.1055 = f32[1,4096]{1,0} divide(%broadcast.7204, %multiply.6047)
  %broadcast.10051 = f32[1,4096,2]{2,1,0} broadcast(%divide.1055), dimensions={0,1}
  %multiply.6048 = f32[1,4096,2]{2,1,0} multiply(%convert.2560, %broadcast.10051)
  %multiply.6049 = f32[1,4096,2]{2,1,0} multiply(%multiply.6048, %exponential.253)
  %reduce.932 = f32[1,4096]{1,0} reduce(%multiply.6049, %constant.3956), dimensions={2}, to_apply=%region_1152.29410
  %negate.316 = f32[1,4096]{1,0} negate(%reduce.932)
  %broadcast.10052 = f32[1,4096,2]{2,1,0} broadcast(%negate.316), dimensions={0,1}
  %add.5095 = f32[1,4096,2]{2,1,0} add(%divide.1054, %broadcast.10052)
  %multiply.6050 = f32[1,4096,2]{2,1,0} multiply(%add.5095, %exponential.253)
  %convert.2561 = bf16[1,4096,2]{2,1,0} convert(%multiply.6050)
  %scatter.1109 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.5340, %reshape.20429, %convert.2561), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_1154.29430
  %copy.4186 = bf16[1,4096,8]{2,1,0} copy(%scatter.1109)
  %dot.1115 = bf16[4096,8]{1,0} dot(%copy.4171, %copy.4186), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.2 = bf16[4096,8]{1,0} all-reduce(%dot.1115), channel_id=1091, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.clone
  %constant.19086 = s32[8]{0} constant({0, 512, 1024, 1536, 2048, 2560, 3072, 3584})
  %dynamic-slice.2330 = s32[1]{0} dynamic-slice(%constant.19086, %partition-id), dynamic_slice_sizes={1}
  %reshape.20494 = s32[] reshape(%dynamic-slice.2330)
  %dynamic-slice.2331 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.2, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6051 = bf16[512,8]{0,1} multiply(%dynamic-slice.2331, %dynamic-slice.2331)
  %convert.2562 = f32[512,8]{0,1} convert(%multiply.6051)
  %reduce.933 = f32[] reduce(%convert.2562, %constant.3956), dimensions={0,1}, to_apply=%region_1164.29606
  %all-reduce.3 = f32[] all-reduce(%reduce.933), channel_id=1092, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1164.29606.clone
  %convert.2564 = bf16[] convert(%all-reduce.3)
  %add.5096 = bf16[] add(%convert.1402, %convert.2564)
  %copy.4187 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.763)
  %dot.1116 = bf16[1,4096,8,1024]{3,2,1,0} dot(%copy.4174, %copy.4187), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.20497 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1116)
  %all-to-all.190 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.20497), channel_id=1093, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.316 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.190), dimensions={2,0,1,3,4}
  %reshape.20498 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.316)
  %transpose.317 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.20498), dimensions={2,0,3,1}
  %copy.4188 = bf16[1,8,1024,4096]{3,2,1,0} copy(%transpose.317)
  %dot.1117 = bf16[1,8,1024,14336]{3,2,1,0} dot(%copy.4188, %copy.4183), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %multiply.6055 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1117, %copy.4182)
  %multiply.6056 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.6055, %divide.1053)
  %multiply.6057 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%copy.4180, %multiply.6055)
  %subtract.704 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%broadcast.5440, %divide.1053)
  %multiply.6058 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%divide.1053, %subtract.704)
  %multiply.6059 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.6057, %multiply.6058)
  %add.5097 = bf16[1,8,1024,14336]{3,2,1,0} add(%multiply.6056, %multiply.6059)
  %copy.4189 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add.5097)
  %dot.1118 = bf16[1,4096,14336]{2,1,0} dot(%copy.4178, %copy.4189), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4190 = bf16[1,4096,14336]{2,1,0} copy(%dot.1118)
  %multiply.6060 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4190, %copy.4190)
  %convert.2565 = f32[1,4096,14336]{2,1,0} convert(%multiply.6060)
  %reduce.934 = f32[] reduce(%convert.2565, %constant.3956), dimensions={0,1,2}, to_apply=%region_1165.29615
  %all-reduce.4 = f32[] all-reduce(%reduce.934), channel_id=1094, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1165.29615.clone
  %convert.2566 = bf16[] convert(%all-reduce.4)
  %add.5099 = bf16[] add(%add.5096, %convert.2566)
  %multiply.6061 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%multiply.6037, %dot.1117)
  %copy.4191 = bf16[1,8,1024,14336]{3,2,1,0} copy(%multiply.6061)
  %dot.1119 = bf16[1,4096,14336]{2,1,0} dot(%copy.4178, %copy.4191), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4192 = bf16[1,4096,14336]{2,1,0} copy(%dot.1119)
  %multiply.6062 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4192, %copy.4192)
  %convert.2567 = f32[1,4096,14336]{2,1,0} convert(%multiply.6062)
  %reduce.935 = f32[] reduce(%convert.2567, %constant.3956), dimensions={0,1,2}, to_apply=%region_1166.29624
  %all-reduce.5 = f32[] all-reduce(%reduce.935), channel_id=1095, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1166.29624.clone
  %convert.2568 = bf16[] convert(%all-reduce.5)
  %add.5100 = bf16[] add(%add.5099, %convert.2568)
  %dot.1120 = bf16[1,14336,4096]{2,1,0} dot(%multiply.6040, %copy.4188), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4193 = bf16[1,14336,4096]{2,1,0} copy(%dot.1120)
  %multiply.6063 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4193, %copy.4193)
  %convert.2569 = f32[1,14336,4096]{2,1,0} convert(%multiply.6063)
  %reduce.936 = f32[] reduce(%convert.2569, %constant.3956), dimensions={0,1,2}, to_apply=%region_1167.29633
  %all-reduce.6 = f32[] all-reduce(%reduce.936), channel_id=1096, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1167.29633.clone
  %convert.2570 = bf16[] convert(%all-reduce.6)
  %add.5101 = bf16[] add(%add.5100, %convert.2570)
  %dot.1121 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.4191, %copy.4181), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1122 = bf16[1,8,1024,4096]{3,2,1,0} dot(%copy.4189, %copy.4179), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add.5102 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1121, %dot.1122)
  %copy.4194 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add.5102)
  %transpose.318 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%copy.4194), dimensions={1,0,2,3}
  %reshape.20501 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.318)
  %all-to-all.191 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.20501), channel_id=1097, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.319 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.191), dimensions={1,0,2,3,4}
  %reshape.20502 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.319)
  %dot.1123 = bf16[1,4096,4096]{2,1,0} dot(%convert.2559, %reshape.20502), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %dot.1124 = bf16[1,4096,4096]{2,1,0} dot(%copy.4186, %all-gather.447), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.5103 = bf16[1,4096,4096]{1,2,0} add(%dot.1123, %dot.1124)
  %copy.4195 = bf16[1,4096,4096]{2,1,0} copy(%add.5103)
  %multiply.6066 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2550, %copy.4195)
  %reduce.937 = bf16[4096]{0} reduce(%multiply.6066, %constant.3795), dimensions={0,1}, to_apply=%region_1155.29442
  %all-reduce.7 = bf16[4096]{0} all-reduce(%reduce.937), channel_id=1098, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1155.29442.clone
  %multiply.6067 = bf16[4096]{0} multiply(%all-reduce.7, %all-reduce.7)
  %convert.2573 = f32[4096]{0} convert(%multiply.6067)
  %reduce.938 = f32[] reduce(%convert.2573, %constant.3956), dimensions={0}, to_apply=%region_1168.29642
  %convert.2574 = bf16[] convert(%reduce.938)
  %add.5104 = bf16[] add(%add.5101, %convert.2574)
  %get-tuple-element.1951 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%custom-call.219), index=1
  %get-tuple-element.1952 = u32[2,4]{1,0} get-tuple-element(%custom-call.219), index=2
  %multiply.6068 = bf16[1,4096,4096]{2,1,0} multiply(%copy.4195, %broadcast.10027)
  %convert.2575 = f32[1,4096,4096]{2,1,0} convert(%multiply.6068)
  %multiply.6070 = f32[1,4096,4096]{2,1,0} multiply(%convert.2575, %broadcast.10026)
  %multiply.6071 = f32[1,4096,4096]{2,1,0} multiply(%convert.2549, %convert.2575)
  %reduce.939 = f32[1,4096]{1,0} reduce(%multiply.6071, %constant.3956), dimensions={2}, to_apply=%region_1157.29459
  %reshape.20508 = f32[1,4096,1]{2,1,0} reshape(%reduce.939)
  %divide.1056 = f32[1,4096,1]{2,1,0} divide(%rsqrt.192, %reshape.20423)
  %multiply.6072 = f32[1,4096,1]{2,1,0} multiply(%divide.1056, %broadcast.7210)
  %multiply.6073 = f32[1,4096,1]{2,1,0} multiply(%reshape.20508, %multiply.6072)
  %multiply.6074 = f32[1,4096,1]{2,1,0} multiply(%multiply.6073, %broadcast.7211)
  %reshape.20509 = f32[1,4096]{1,0} reshape(%multiply.6074)
  %broadcast.10056 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20509), dimensions={0,1}
  %multiply.6075 = f32[1,4096,4096]{2,1,0} multiply(%convert.2549, %broadcast.10056)
  %add.5105 = f32[1,4096,4096]{2,1,0} add(%multiply.6070, %multiply.6075)
  %convert.2576 = bf16[1,4096,4096]{2,1,0} convert(%add.5105)
  %add.5106 = bf16[1,4096,4096]{2,1,0} add(%copy.4173, %convert.2576)
  %copy.4196 = bf16[1,4096,4096]{2,1,0} copy(%add.5106)
  %dot.1125 = bf16[1,4096,32,128]{3,2,1,0} dot(%copy.4196, %all-gather.446), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.4197 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1125)
  %custom-call.221 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%copy.4165, %copy.4167, %copy.4168, %constant.3999, %get-tuple-element.1951, /*index=5*/%get-tuple-element.1952, %get-tuple-element.1935, %copy.4197, %scatter.1101, %scatter.1106, /*index=10*/%constant.3999, %constant.3999), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1959 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.221), index=2
  %copy.4198 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1959)
  %dot.1126 = bf16[1,4096,4096]{2,1,0} dot(%copy.4198, %all-gather.445), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1960 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%custom-call.221), index=1
  %copy.4199 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1960)
  %slice.764 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.4199), slice={[0:1], [0:4096], [0:8], [64:128]}
  %multiply.6077 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.764, %broadcast.10010)
  %slice.765 = bf16[1,4096,8,64]{3,2,1,0} slice(%copy.4199), slice={[0:1], [0:4096], [0:8], [0:64]}
  %multiply.6080 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.765, %broadcast.10009)
  %add.5120 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.6077, %multiply.6080)
  %multiply.6081 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.764, %broadcast.10009)
  %negate.317 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.765)
  %multiply.6082 = bf16[1,4096,8,64]{3,2,1,0} multiply(%negate.317, %broadcast.10010)
  %add.5121 = bf16[1,4096,8,64]{3,2,1,0} add(%multiply.6081, %multiply.6082)
  %concatenate.478 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add.5120, %add.5121), dimensions={3}
  %dot.1127 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.478, %all-gather.444), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.5123 = bf16[1,4096,4096]{2,1,0} add(%dot.1126, %dot.1127)
  %copy.4200 = bf16[1,4096,4096]{2,1,0} copy(%add.5123)
  %get-tuple-element.1961 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%custom-call.221), index=0
  %copy.4201 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1961)
  %slice.766 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.4201), slice={[0:1], [0:4096], [0:32], [64:128]}
  %multiply.6084 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.766, %broadcast.10001)
  %slice.767 = bf16[1,4096,32,64]{3,2,1,0} slice(%copy.4201), slice={[0:1], [0:4096], [0:32], [0:64]}
  %multiply.6086 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.767, %broadcast.10000)
  %add.5124 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.6084, %multiply.6086)
  %multiply.6087 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.766, %broadcast.10000)
  %negate.318 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.767)
  %multiply.6088 = bf16[1,4096,32,64]{3,2,1,0} multiply(%negate.318, %broadcast.10001)
  %add.5125 = bf16[1,4096,32,64]{3,2,1,0} add(%multiply.6087, %multiply.6088)
  %concatenate.479 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add.5124, %add.5125), dimensions={3}
  %dot.1128 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.479, %all-gather.443), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.4202 = bf16[1,4096,4096]{2,1,0} copy(%dot.1128)
  %add.5126 = bf16[1,4096,4096]{2,1,0} add(%copy.4200, %copy.4202)
  %copy.4203 = bf16[1,4096,4096]{2,1,0} copy(%add.5126)
  %multiply.6089 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2536, %copy.4203)
  %reduce.940 = bf16[4096]{0} reduce(%multiply.6089, %constant.3795), dimensions={0,1}, to_apply=%region_1159.29553
  %all-reduce.8 = bf16[4096]{0} all-reduce(%reduce.940), channel_id=1099, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1159.29553.clone
  %multiply.6090 = bf16[4096]{0} multiply(%all-reduce.8, %all-reduce.8)
  %convert.2579 = f32[4096]{0} convert(%multiply.6090)
  %reduce.941 = f32[] reduce(%convert.2579, %constant.3956), dimensions={0}, to_apply=%region_1169.29651
  %convert.2580 = bf16[] convert(%reduce.941)
  %add.5127 = bf16[] add(%add.5104, %convert.2580)
  %dot.1129 = bf16[8,128,4096]{2,1,0} dot(%concatenate.478, %copy.4164), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.9 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1129), channel_id=1100, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.1.clone
  %dynamic-slice.2341 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.9, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.320 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2341), dimensions={2,0,1}
  %multiply.6091 = bf16[512,8,128]{0,2,1} multiply(%transpose.320, %transpose.320)
  %convert.2581 = f32[512,8,128]{0,2,1} convert(%multiply.6091)
  %reduce.942 = f32[] reduce(%convert.2581, %constant.3956), dimensions={0,1,2}, to_apply=%region_1170.29660
  %all-reduce.10 = f32[] all-reduce(%reduce.942), channel_id=1101, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1170.29660.clone
  %convert.2582 = bf16[] convert(%all-reduce.10)
  %add.5128 = bf16[] add(%add.5127, %convert.2582)
  %dot.1130 = bf16[4096,32,128]{2,1,0} dot(%copy.4196, %copy.4169), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.11 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1130), channel_id=1102, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.2.clone
  %dynamic-slice.2343 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.11, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.321 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2343), dimensions={1,2,0}
  %multiply.6093 = bf16[32,128,512]{1,0,2} multiply(%transpose.321, %transpose.321)
  %convert.2583 = f32[32,128,512]{1,0,2} convert(%multiply.6093)
  %reduce.943 = f32[] reduce(%convert.2583, %constant.3956), dimensions={0,1,2}, to_apply=%region_1171.29669
  %all-reduce.12 = f32[] all-reduce(%reduce.943), channel_id=1103, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1171.29669.clone
  %convert.2584 = bf16[] convert(%all-reduce.12)
  %add.5129 = bf16[] add(%add.5128, %convert.2584)
  %dot.1131 = bf16[32,128,4096]{2,1,0} dot(%concatenate.479, %copy.4164), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.13 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1131), channel_id=1104, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.3.clone
  %dynamic-slice.2345 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.13, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.322 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2345), dimensions={2,0,1}
  %multiply.6094 = bf16[512,32,128]{0,2,1} multiply(%transpose.322, %transpose.322)
  %convert.2585 = f32[512,32,128]{0,2,1} convert(%multiply.6094)
  %reduce.944 = f32[] reduce(%convert.2585, %constant.3956), dimensions={0,1,2}, to_apply=%region_1172.29678
  %all-reduce.14 = f32[] all-reduce(%reduce.944), channel_id=1105, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1172.29678.clone
  %convert.2586 = bf16[] convert(%all-reduce.14)
  %add.5130 = bf16[] add(%add.5129, %convert.2586)
  %dot.1132 = bf16[8,128,4096]{2,1,0} dot(%copy.4198, %copy.4164), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.15 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1132), channel_id=1106, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.4.clone
  %dynamic-slice.2347 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.15, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.323 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2347), dimensions={2,0,1}
  %multiply.6095 = bf16[512,8,128]{0,2,1} multiply(%transpose.323, %transpose.323)
  %convert.2587 = f32[512,8,128]{0,2,1} convert(%multiply.6095)
  %reduce.945 = f32[] reduce(%convert.2587, %constant.3956), dimensions={0,1,2}, to_apply=%region_1173.29687
  %all-reduce.16 = f32[] all-reduce(%reduce.945), channel_id=1107, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1173.29687.clone
  %convert.2588 = bf16[] convert(%all-reduce.16)
  %add.5132 = bf16[] add(%add.5130, %convert.2588)
  %dot.1133 = bf16[4096,8]{1,0} dot(%copy.4132, %copy.4151), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.17 = bf16[4096,8]{1,0} all-reduce(%dot.1133), channel_id=1108, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.5.clone
  %dynamic-slice.2349 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.17, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6096 = bf16[512,8]{0,1} multiply(%dynamic-slice.2349, %dynamic-slice.2349)
  %convert.2589 = f32[512,8]{0,1} convert(%multiply.6096)
  %reduce.946 = f32[] reduce(%convert.2589, %constant.3956), dimensions={0,1}, to_apply=%region_1174.29696
  %all-reduce.18 = f32[] all-reduce(%reduce.946), channel_id=1109, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1174.29696.clone
  %convert.2591 = bf16[] convert(%all-reduce.18)
  %add.5133 = bf16[] add(%add.5132, %convert.2591)
  %dot.1134 = bf16[1,4096,14336]{2,1,0} dot(%copy.4137, %copy.4147), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4204 = bf16[1,4096,14336]{2,1,0} copy(%dot.1134)
  %multiply.6097 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4204, %copy.4204)
  %convert.2592 = f32[1,4096,14336]{2,1,0} convert(%multiply.6097)
  %reduce.947 = f32[] reduce(%convert.2592, %constant.3956), dimensions={0,1,2}, to_apply=%region_1175.29705
  %all-reduce.19 = f32[] all-reduce(%reduce.947), channel_id=1110, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1175.29705.clone
  %convert.2593 = bf16[] convert(%all-reduce.19)
  %add.5134 = bf16[] add(%add.5133, %convert.2593)
  %dot.1135 = bf16[1,4096,14336]{2,1,0} dot(%copy.4137, %copy.4144), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4205 = bf16[1,4096,14336]{2,1,0} copy(%dot.1135)
  %multiply.6099 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4205, %copy.4205)
  %convert.2594 = f32[1,4096,14336]{2,1,0} convert(%multiply.6099)
  %reduce.948 = f32[] reduce(%convert.2594, %constant.3956), dimensions={0,1,2}, to_apply=%region_1176.29714
  %all-reduce.20 = f32[] all-reduce(%reduce.948), channel_id=1111, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1176.29714.clone
  %convert.2595 = bf16[] convert(%all-reduce.20)
  %add.5135 = bf16[] add(%add.5134, %convert.2595)
  %dot.1136 = bf16[1,14336,4096]{2,1,0} dot(%multiply.5962, %copy.4142), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4206 = bf16[1,14336,4096]{2,1,0} copy(%dot.1136)
  %multiply.6100 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4206, %copy.4206)
  %convert.2596 = f32[1,14336,4096]{2,1,0} convert(%multiply.6100)
  %reduce.949 = f32[] reduce(%convert.2596, %constant.3956), dimensions={0,1,2}, to_apply=%region_1177.29723
  %all-reduce.21 = f32[] all-reduce(%reduce.949), channel_id=1112, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1177.29723.clone
  %convert.2597 = bf16[] convert(%all-reduce.21)
  %add.5136 = bf16[] add(%add.5135, %convert.2597)
  %multiply.6101 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2516, %copy.4152)
  %reduce.950 = bf16[4096]{0} reduce(%multiply.6101, %constant.3795), dimensions={0,1}, to_apply=%region_1130.28866
  %all-reduce.22 = bf16[4096]{0} all-reduce(%reduce.950), channel_id=1113, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1130.28866.clone
  %multiply.6102 = bf16[4096]{0} multiply(%all-reduce.22, %all-reduce.22)
  %convert.2598 = f32[4096]{0} convert(%multiply.6102)
  %reduce.951 = f32[] reduce(%convert.2598, %constant.3956), dimensions={0}, to_apply=%region_1178.29732
  %convert.2599 = bf16[] convert(%reduce.951)
  %add.5137 = bf16[] add(%add.5136, %convert.2599)
  %multiply.6103 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2498, %copy.4160)
  %reduce.952 = bf16[4096]{0} reduce(%multiply.6103, %constant.3795), dimensions={0,1}, to_apply=%region_1134.28977
  %all-reduce.23 = bf16[4096]{0} all-reduce(%reduce.952), channel_id=1114, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1134.28977.clone
  %multiply.6104 = bf16[4096]{0} multiply(%all-reduce.23, %all-reduce.23)
  %convert.2600 = f32[4096]{0} convert(%multiply.6104)
  %reduce.953 = f32[] reduce(%convert.2600, %constant.3956), dimensions={0}, to_apply=%region_1179.29741
  %convert.2601 = bf16[] convert(%reduce.953)
  %add.5138 = bf16[] add(%add.5137, %convert.2601)
  %dot.1137 = bf16[8,128,4096]{2,1,0} dot(%concatenate.469, %copy.4125), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.24 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1137), channel_id=1115, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.6.clone
  %dynamic-slice.2351 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.24, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.324 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2351), dimensions={2,0,1}
  %multiply.6105 = bf16[512,8,128]{0,2,1} multiply(%transpose.324, %transpose.324)
  %convert.2602 = f32[512,8,128]{0,2,1} convert(%multiply.6105)
  %reduce.954 = f32[] reduce(%convert.2602, %constant.3956), dimensions={0,1,2}, to_apply=%region_1180.29750
  %all-reduce.25 = f32[] all-reduce(%reduce.954), channel_id=1116, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1180.29750.clone
  %convert.2603 = bf16[] convert(%all-reduce.25)
  %add.5139 = bf16[] add(%add.5138, %convert.2603)
  %dot.1138 = bf16[4096,32,128]{2,1,0} dot(%copy.4153, %copy.4130), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.26 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1138), channel_id=1117, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.7.clone
  %dynamic-slice.2353 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.26, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.325 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2353), dimensions={1,2,0}
  %multiply.6106 = bf16[32,128,512]{1,0,2} multiply(%transpose.325, %transpose.325)
  %convert.2604 = f32[32,128,512]{1,0,2} convert(%multiply.6106)
  %reduce.955 = f32[] reduce(%convert.2604, %constant.3956), dimensions={0,1,2}, to_apply=%region_1181.29759
  %all-reduce.27 = f32[] all-reduce(%reduce.955), channel_id=1118, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1181.29759.clone
  %convert.2606 = bf16[] convert(%all-reduce.27)
  %add.5140 = bf16[] add(%add.5139, %convert.2606)
  %dot.1139 = bf16[32,128,4096]{2,1,0} dot(%concatenate.470, %copy.4125), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.28 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1139), channel_id=1119, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.8.clone
  %dynamic-slice.2355 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.28, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.326 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2355), dimensions={2,0,1}
  %multiply.6108 = bf16[512,32,128]{0,2,1} multiply(%transpose.326, %transpose.326)
  %convert.2607 = f32[512,32,128]{0,2,1} convert(%multiply.6108)
  %reduce.956 = f32[] reduce(%convert.2607, %constant.3956), dimensions={0,1,2}, to_apply=%region_1182.29768
  %all-reduce.29 = f32[] all-reduce(%reduce.956), channel_id=1120, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1182.29768.clone
  %convert.2608 = bf16[] convert(%all-reduce.29)
  %add.5141 = bf16[] add(%add.5140, %convert.2608)
  %dot.1140 = bf16[8,128,4096]{2,1,0} dot(%copy.4155, %copy.4125), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.30 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1140), channel_id=1121, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.9.clone
  %dynamic-slice.2357 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.30, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.327 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2357), dimensions={2,0,1}
  %multiply.6109 = bf16[512,8,128]{0,2,1} multiply(%transpose.327, %transpose.327)
  %convert.2609 = f32[512,8,128]{0,2,1} convert(%multiply.6109)
  %reduce.957 = f32[] reduce(%convert.2609, %constant.3956), dimensions={0,1,2}, to_apply=%region_1183.29777
  %all-reduce.31 = f32[] all-reduce(%reduce.957), channel_id=1122, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1183.29777.clone
  %convert.2610 = bf16[] convert(%all-reduce.31)
  %add.5142 = bf16[] add(%add.5141, %convert.2610)
  %dot.1141 = bf16[4096,8]{1,0} dot(%copy.3772, %copy.3791), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.32 = bf16[4096,8]{1,0} all-reduce(%dot.1141), channel_id=1123, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.10.clone
  %dynamic-slice.2359 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.32, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6110 = bf16[512,8]{0,1} multiply(%dynamic-slice.2359, %dynamic-slice.2359)
  %convert.2611 = f32[512,8]{0,1} convert(%multiply.6110)
  %reduce.958 = f32[] reduce(%convert.2611, %constant.3956), dimensions={0,1}, to_apply=%region_1184.29786
  %all-reduce.33 = f32[] all-reduce(%reduce.958), channel_id=1124, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1184.29786.clone
  %convert.2612 = bf16[] convert(%all-reduce.33)
  %add.5143 = bf16[] add(%add.5142, %convert.2612)
  %dot.1142 = bf16[1,4096,14336]{2,1,0} dot(%copy.3777, %copy.3787), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4207 = bf16[1,4096,14336]{2,1,0} copy(%dot.1142)
  %multiply.6111 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4207, %copy.4207)
  %convert.2613 = f32[1,4096,14336]{2,1,0} convert(%multiply.6111)
  %reduce.959 = f32[] reduce(%convert.2613, %constant.3956), dimensions={0,1,2}, to_apply=%region_1185.29795
  %all-reduce.34 = f32[] all-reduce(%reduce.959), channel_id=1125, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1185.29795.clone
  %convert.2614 = bf16[] convert(%all-reduce.34)
  %add.5144 = bf16[] add(%add.5143, %convert.2614)
  %dot.1143 = bf16[1,4096,14336]{2,1,0} dot(%copy.3777, %copy.3784), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4208 = bf16[1,4096,14336]{2,1,0} copy(%dot.1143)
  %multiply.6112 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4208, %copy.4208)
  %convert.2615 = f32[1,4096,14336]{2,1,0} convert(%multiply.6112)
  %reduce.960 = f32[] reduce(%convert.2615, %constant.3956), dimensions={0,1,2}, to_apply=%region_1186.29804
  %all-reduce.35 = f32[] all-reduce(%reduce.960), channel_id=1126, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1186.29804.clone
  %convert.2616 = bf16[] convert(%all-reduce.35)
  %add.5145 = bf16[] add(%add.5144, %convert.2616)
  %dot.1144 = bf16[1,14336,4096]{2,1,0} dot(%multiply.5135, %copy.3782), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4209 = bf16[1,14336,4096]{2,1,0} copy(%dot.1144)
  %multiply.6113 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4209, %copy.4209)
  %convert.2618 = f32[1,14336,4096]{2,1,0} convert(%multiply.6113)
  %reduce.961 = f32[] reduce(%convert.2618, %constant.3956), dimensions={0,1,2}, to_apply=%region_1187.29813
  %all-reduce.36 = f32[] all-reduce(%reduce.961), channel_id=1127, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1187.29813.clone
  %convert.2619 = bf16[] convert(%all-reduce.36)
  %add.5146 = bf16[] add(%add.5145, %convert.2619)
  %multiply.6114 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2186, %copy.3792)
  %reduce.962 = bf16[4096]{0} reduce(%multiply.6114, %constant.3795), dimensions={0,1}, to_apply=%region_905.23682
  %all-reduce.37 = bf16[4096]{0} all-reduce(%reduce.962), channel_id=1128, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_905.23682.clone
  %multiply.6115 = bf16[4096]{0} multiply(%all-reduce.37, %all-reduce.37)
  %convert.2620 = f32[4096]{0} convert(%multiply.6115)
  %reduce.963 = f32[] reduce(%convert.2620, %constant.3956), dimensions={0}, to_apply=%region_1188.29822
  %convert.2621 = bf16[] convert(%reduce.963)
  %add.5147 = bf16[] add(%add.5146, %convert.2621)
  %multiply.6116 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2172, %copy.3800)
  %reduce.964 = bf16[4096]{0} reduce(%multiply.6116, %constant.3795), dimensions={0,1}, to_apply=%region_909.23793
  %all-reduce.38 = bf16[4096]{0} all-reduce(%reduce.964), channel_id=1129, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_909.23793.clone
  %multiply.6117 = bf16[4096]{0} multiply(%all-reduce.38, %all-reduce.38)
  %convert.2622 = f32[4096]{0} convert(%multiply.6117)
  %reduce.965 = f32[] reduce(%convert.2622, %constant.3956), dimensions={0}, to_apply=%region_1189.29831
  %convert.2623 = bf16[] convert(%reduce.965)
  %add.5148 = bf16[] add(%add.5147, %convert.2623)
  %dot.1145 = bf16[8,128,4096]{2,1,0} dot(%concatenate.388, %copy.3765), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.39 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1145), channel_id=1130, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.11.clone
  %dynamic-slice.2361 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.39, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.328 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2361), dimensions={2,0,1}
  %multiply.6118 = bf16[512,8,128]{0,2,1} multiply(%transpose.328, %transpose.328)
  %convert.2624 = f32[512,8,128]{0,2,1} convert(%multiply.6118)
  %reduce.966 = f32[] reduce(%convert.2624, %constant.3956), dimensions={0,1,2}, to_apply=%region_1190.29840
  %all-reduce.40 = f32[] all-reduce(%reduce.966), channel_id=1131, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1190.29840.clone
  %convert.2625 = bf16[] convert(%all-reduce.40)
  %add.5149 = bf16[] add(%add.5148, %convert.2625)
  %dot.1146 = bf16[4096,32,128]{2,1,0} dot(%copy.3793, %copy.3770), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.41 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1146), channel_id=1132, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.12.clone
  %dynamic-slice.2363 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.41, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.329 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2363), dimensions={1,2,0}
  %multiply.6119 = bf16[32,128,512]{1,0,2} multiply(%transpose.329, %transpose.329)
  %convert.2626 = f32[32,128,512]{1,0,2} convert(%multiply.6119)
  %reduce.967 = f32[] reduce(%convert.2626, %constant.3956), dimensions={0,1,2}, to_apply=%region_1191.29849
  %all-reduce.42 = f32[] all-reduce(%reduce.967), channel_id=1133, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1191.29849.clone
  %convert.2627 = bf16[] convert(%all-reduce.42)
  %add.5150 = bf16[] add(%add.5149, %convert.2627)
  %dot.1147 = bf16[32,128,4096]{2,1,0} dot(%concatenate.389, %copy.3765), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.43 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1147), channel_id=1134, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.13.clone
  %dynamic-slice.2365 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.43, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.330 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2365), dimensions={2,0,1}
  %multiply.6120 = bf16[512,32,128]{0,2,1} multiply(%transpose.330, %transpose.330)
  %convert.2628 = f32[512,32,128]{0,2,1} convert(%multiply.6120)
  %reduce.968 = f32[] reduce(%convert.2628, %constant.3956), dimensions={0,1,2}, to_apply=%region_1192.29858
  %all-reduce.44 = f32[] all-reduce(%reduce.968), channel_id=1135, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1192.29858.clone
  %convert.2629 = bf16[] convert(%all-reduce.44)
  %add.5151 = bf16[] add(%add.5150, %convert.2629)
  %dot.1148 = bf16[8,128,4096]{2,1,0} dot(%copy.3795, %copy.3765), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.45 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1148), channel_id=1136, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.14.clone
  %dynamic-slice.2367 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.45, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.331 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2367), dimensions={2,0,1}
  %multiply.6121 = bf16[512,8,128]{0,2,1} multiply(%transpose.331, %transpose.331)
  %convert.2630 = f32[512,8,128]{0,2,1} convert(%multiply.6121)
  %reduce.969 = f32[] reduce(%convert.2630, %constant.3956), dimensions={0,1,2}, to_apply=%region_1193.29867
  %all-reduce.46 = f32[] all-reduce(%reduce.969), channel_id=1137, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1193.29867.clone
  %convert.2631 = bf16[] convert(%all-reduce.46)
  %add.5152 = bf16[] add(%add.5151, %convert.2631)
  %dot.1149 = bf16[4096,8]{1,0} dot(%copy.3732, %copy.3751), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.47 = bf16[4096,8]{1,0} all-reduce(%dot.1149), channel_id=1138, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.15.clone
  %dynamic-slice.2369 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.47, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6122 = bf16[512,8]{0,1} multiply(%dynamic-slice.2369, %dynamic-slice.2369)
  %convert.2632 = f32[512,8]{0,1} convert(%multiply.6122)
  %reduce.970 = f32[] reduce(%convert.2632, %constant.3956), dimensions={0,1}, to_apply=%region_1194.29876
  %all-reduce.48 = f32[] all-reduce(%reduce.970), channel_id=1139, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1194.29876.clone
  %convert.2633 = bf16[] convert(%all-reduce.48)
  %add.5153 = bf16[] add(%add.5152, %convert.2633)
  %dot.1150 = bf16[1,4096,14336]{2,1,0} dot(%copy.3737, %copy.3747), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4210 = bf16[1,4096,14336]{2,1,0} copy(%dot.1150)
  %multiply.6123 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4210, %copy.4210)
  %convert.2634 = f32[1,4096,14336]{2,1,0} convert(%multiply.6123)
  %reduce.971 = f32[] reduce(%convert.2634, %constant.3956), dimensions={0,1,2}, to_apply=%region_1195.29885
  %all-reduce.49 = f32[] all-reduce(%reduce.971), channel_id=1140, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1195.29885.clone
  %convert.2635 = bf16[] convert(%all-reduce.49)
  %add.5154 = bf16[] add(%add.5153, %convert.2635)
  %dot.1151 = bf16[1,4096,14336]{2,1,0} dot(%copy.3737, %copy.3744), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4211 = bf16[1,4096,14336]{2,1,0} copy(%dot.1151)
  %multiply.6124 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4211, %copy.4211)
  %convert.2636 = f32[1,4096,14336]{2,1,0} convert(%multiply.6124)
  %reduce.972 = f32[] reduce(%convert.2636, %constant.3956), dimensions={0,1,2}, to_apply=%region_1196.29894
  %all-reduce.50 = f32[] all-reduce(%reduce.972), channel_id=1141, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1196.29894.clone
  %convert.2637 = bf16[] convert(%all-reduce.50)
  %add.5155 = bf16[] add(%add.5154, %convert.2637)
  %dot.1152 = bf16[1,14336,4096]{2,1,0} dot(%multiply.5046, %copy.3742), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4212 = bf16[1,14336,4096]{2,1,0} copy(%dot.1152)
  %multiply.6125 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4212, %copy.4212)
  %convert.2638 = f32[1,14336,4096]{2,1,0} convert(%multiply.6125)
  %reduce.973 = f32[] reduce(%convert.2638, %constant.3956), dimensions={0,1,2}, to_apply=%region_1197.29903
  %all-reduce.51 = f32[] all-reduce(%reduce.973), channel_id=1142, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1197.29903.clone
  %convert.2639 = bf16[] convert(%all-reduce.51)
  %add.5156 = bf16[] add(%add.5155, %convert.2639)
  %multiply.6126 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2148, %copy.3752)
  %reduce.974 = bf16[4096]{0} reduce(%multiply.6126, %constant.3795), dimensions={0,1}, to_apply=%region_880.23106
  %all-reduce.52 = bf16[4096]{0} all-reduce(%reduce.974), channel_id=1143, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_880.23106.clone
  %multiply.6127 = bf16[4096]{0} multiply(%all-reduce.52, %all-reduce.52)
  %convert.2641 = f32[4096]{0} convert(%multiply.6127)
  %reduce.975 = f32[] reduce(%convert.2641, %constant.3956), dimensions={0}, to_apply=%region_1198.29912
  %convert.2642 = bf16[] convert(%reduce.975)
  %add.5157 = bf16[] add(%add.5156, %convert.2642)
  %multiply.6128 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2133, %copy.3760)
  %reduce.976 = bf16[4096]{0} reduce(%multiply.6128, %constant.3795), dimensions={0,1}, to_apply=%region_884.23217
  %all-reduce.53 = bf16[4096]{0} all-reduce(%reduce.976), channel_id=1144, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_884.23217.clone
  %multiply.6130 = bf16[4096]{0} multiply(%all-reduce.53, %all-reduce.53)
  %convert.2643 = f32[4096]{0} convert(%multiply.6130)
  %reduce.977 = f32[] reduce(%convert.2643, %constant.3956), dimensions={0}, to_apply=%region_1199.29921
  %convert.2644 = bf16[] convert(%reduce.977)
  %add.5158 = bf16[] add(%add.5157, %convert.2644)
  %dot.1153 = bf16[8,128,4096]{2,1,0} dot(%concatenate.379, %copy.3725), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.54 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1153), channel_id=1145, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.16.clone
  %dynamic-slice.2371 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.54, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.332 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2371), dimensions={2,0,1}
  %multiply.6131 = bf16[512,8,128]{0,2,1} multiply(%transpose.332, %transpose.332)
  %convert.2645 = f32[512,8,128]{0,2,1} convert(%multiply.6131)
  %reduce.978 = f32[] reduce(%convert.2645, %constant.3956), dimensions={0,1,2}, to_apply=%region_1200.29930
  %all-reduce.55 = f32[] all-reduce(%reduce.978), channel_id=1146, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1200.29930.clone
  %convert.2646 = bf16[] convert(%all-reduce.55)
  %add.5159 = bf16[] add(%add.5158, %convert.2646)
  %dot.1154 = bf16[4096,32,128]{2,1,0} dot(%copy.3753, %copy.3730), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.56 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1154), channel_id=1147, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.17.clone
  %dynamic-slice.2373 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.56, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.333 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2373), dimensions={1,2,0}
  %multiply.6132 = bf16[32,128,512]{1,0,2} multiply(%transpose.333, %transpose.333)
  %convert.2647 = f32[32,128,512]{1,0,2} convert(%multiply.6132)
  %reduce.979 = f32[] reduce(%convert.2647, %constant.3956), dimensions={0,1,2}, to_apply=%region_1201.29939
  %all-reduce.57 = f32[] all-reduce(%reduce.979), channel_id=1148, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1201.29939.clone
  %convert.2648 = bf16[] convert(%all-reduce.57)
  %add.5160 = bf16[] add(%add.5159, %convert.2648)
  %dot.1155 = bf16[32,128,4096]{2,1,0} dot(%concatenate.380, %copy.3725), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.58 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1155), channel_id=1149, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.18.clone
  %dynamic-slice.2375 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.58, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.334 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2375), dimensions={2,0,1}
  %multiply.6134 = bf16[512,32,128]{0,2,1} multiply(%transpose.334, %transpose.334)
  %convert.2649 = f32[512,32,128]{0,2,1} convert(%multiply.6134)
  %reduce.980 = f32[] reduce(%convert.2649, %constant.3956), dimensions={0,1,2}, to_apply=%region_1202.29948
  %all-reduce.59 = f32[] all-reduce(%reduce.980), channel_id=1150, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1202.29948.clone
  %convert.2650 = bf16[] convert(%all-reduce.59)
  %add.5161 = bf16[] add(%add.5160, %convert.2650)
  %dot.1156 = bf16[8,128,4096]{2,1,0} dot(%copy.3755, %copy.3725), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.60 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1156), channel_id=1151, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.19.clone
  %dynamic-slice.2377 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.60, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.335 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2377), dimensions={2,0,1}
  %multiply.6135 = bf16[512,8,128]{0,2,1} multiply(%transpose.335, %transpose.335)
  %convert.2651 = f32[512,8,128]{0,2,1} convert(%multiply.6135)
  %reduce.981 = f32[] reduce(%convert.2651, %constant.3956), dimensions={0,1,2}, to_apply=%region_1203.29957
  %all-reduce.61 = f32[] all-reduce(%reduce.981), channel_id=1152, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1203.29957.clone
  %convert.2652 = bf16[] convert(%all-reduce.61)
  %add.5162 = bf16[] add(%add.5161, %convert.2652)
  %dot.1157 = bf16[4096,8]{1,0} dot(%copy.3692, %copy.3711), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.62 = bf16[4096,8]{1,0} all-reduce(%dot.1157), channel_id=1153, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.20.clone
  %dynamic-slice.2379 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.62, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6136 = bf16[512,8]{0,1} multiply(%dynamic-slice.2379, %dynamic-slice.2379)
  %convert.2653 = f32[512,8]{0,1} convert(%multiply.6136)
  %reduce.982 = f32[] reduce(%convert.2653, %constant.3956), dimensions={0,1}, to_apply=%region_1204.29966
  %all-reduce.63 = f32[] all-reduce(%reduce.982), channel_id=1154, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1204.29966.clone
  %convert.2654 = bf16[] convert(%all-reduce.63)
  %add.5164 = bf16[] add(%add.5162, %convert.2654)
  %dot.1159 = bf16[1,4096,14336]{2,1,0} dot(%copy.3697, %copy.3707), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4213 = bf16[1,4096,14336]{2,1,0} copy(%dot.1159)
  %multiply.6137 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4213, %copy.4213)
  %convert.2655 = f32[1,4096,14336]{2,1,0} convert(%multiply.6137)
  %reduce.983 = f32[] reduce(%convert.2655, %constant.3956), dimensions={0,1,2}, to_apply=%region_1205.29975
  %all-reduce.64 = f32[] all-reduce(%reduce.983), channel_id=1155, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1205.29975.clone
  %convert.2656 = bf16[] convert(%all-reduce.64)
  %add.5165 = bf16[] add(%add.5164, %convert.2656)
  %dot.1160 = bf16[1,4096,14336]{2,1,0} dot(%copy.3697, %copy.3704), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4214 = bf16[1,4096,14336]{2,1,0} copy(%dot.1160)
  %multiply.6139 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4214, %copy.4214)
  %convert.2657 = f32[1,4096,14336]{2,1,0} convert(%multiply.6139)
  %reduce.984 = f32[] reduce(%convert.2657, %constant.3956), dimensions={0,1,2}, to_apply=%region_1206.29984
  %all-reduce.65 = f32[] all-reduce(%reduce.984), channel_id=1156, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1206.29984.clone
  %convert.2658 = bf16[] convert(%all-reduce.65)
  %add.5166 = bf16[] add(%add.5165, %convert.2658)
  %dot.1161 = bf16[1,14336,4096]{2,1,0} dot(%multiply.4955, %copy.3702), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4215 = bf16[1,14336,4096]{2,1,0} copy(%dot.1161)
  %multiply.6140 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4215, %copy.4215)
  %convert.2659 = f32[1,14336,4096]{2,1,0} convert(%multiply.6140)
  %reduce.985 = f32[] reduce(%convert.2659, %constant.3956), dimensions={0,1,2}, to_apply=%region_1207.29993
  %all-reduce.66 = f32[] all-reduce(%reduce.985), channel_id=1157, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1207.29993.clone
  %convert.2660 = bf16[] convert(%all-reduce.66)
  %add.5167 = bf16[] add(%add.5166, %convert.2660)
  %multiply.6141 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2112, %copy.3712)
  %reduce.986 = bf16[4096]{0} reduce(%multiply.6141, %constant.3795), dimensions={0,1}, to_apply=%region_855.22530
  %all-reduce.67 = bf16[4096]{0} all-reduce(%reduce.986), channel_id=1158, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_855.22530.clone
  %multiply.6143 = bf16[4096]{0} multiply(%all-reduce.67, %all-reduce.67)
  %convert.2661 = f32[4096]{0} convert(%multiply.6143)
  %reduce.987 = f32[] reduce(%convert.2661, %constant.3956), dimensions={0}, to_apply=%region_1208.30002
  %convert.2662 = bf16[] convert(%reduce.987)
  %add.5168 = bf16[] add(%add.5167, %convert.2662)
  %multiply.6144 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2096, %copy.3720)
  %reduce.988 = bf16[4096]{0} reduce(%multiply.6144, %constant.3795), dimensions={0,1}, to_apply=%region_859.22641
  %all-reduce.68 = bf16[4096]{0} all-reduce(%reduce.988), channel_id=1159, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_859.22641.clone
  %multiply.6145 = bf16[4096]{0} multiply(%all-reduce.68, %all-reduce.68)
  %convert.2663 = f32[4096]{0} convert(%multiply.6145)
  %reduce.989 = f32[] reduce(%convert.2663, %constant.3956), dimensions={0}, to_apply=%region_1209.30011
  %convert.2664 = bf16[] convert(%reduce.989)
  %add.5169 = bf16[] add(%add.5168, %convert.2664)
  %dot.1162 = bf16[8,128,4096]{2,1,0} dot(%concatenate.370, %copy.3685), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.69 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1162), channel_id=1160, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.21.clone
  %dynamic-slice.2381 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.69, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.336 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2381), dimensions={2,0,1}
  %multiply.6146 = bf16[512,8,128]{0,2,1} multiply(%transpose.336, %transpose.336)
  %convert.2665 = f32[512,8,128]{0,2,1} convert(%multiply.6146)
  %reduce.990 = f32[] reduce(%convert.2665, %constant.3956), dimensions={0,1,2}, to_apply=%region_1210.30020
  %all-reduce.70 = f32[] all-reduce(%reduce.990), channel_id=1161, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1210.30020.clone
  %convert.2666 = bf16[] convert(%all-reduce.70)
  %add.5171 = bf16[] add(%add.5169, %convert.2666)
  %dot.1163 = bf16[4096,32,128]{2,1,0} dot(%copy.3713, %copy.3690), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.71 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1163), channel_id=1162, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.22.clone
  %dynamic-slice.2383 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.71, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.337 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2383), dimensions={1,2,0}
  %multiply.6148 = bf16[32,128,512]{1,0,2} multiply(%transpose.337, %transpose.337)
  %convert.2667 = f32[32,128,512]{1,0,2} convert(%multiply.6148)
  %reduce.991 = f32[] reduce(%convert.2667, %constant.3956), dimensions={0,1,2}, to_apply=%region_1211.30029
  %all-reduce.72 = f32[] all-reduce(%reduce.991), channel_id=1163, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1211.30029.clone
  %convert.2668 = bf16[] convert(%all-reduce.72)
  %add.5172 = bf16[] add(%add.5171, %convert.2668)
  %dot.1164 = bf16[32,128,4096]{2,1,0} dot(%concatenate.371, %copy.3685), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.73 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1164), channel_id=1164, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.23.clone
  %dynamic-slice.2385 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.73, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.338 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2385), dimensions={2,0,1}
  %multiply.6149 = bf16[512,32,128]{0,2,1} multiply(%transpose.338, %transpose.338)
  %convert.2669 = f32[512,32,128]{0,2,1} convert(%multiply.6149)
  %reduce.992 = f32[] reduce(%convert.2669, %constant.3956), dimensions={0,1,2}, to_apply=%region_1212.30038
  %all-reduce.74 = f32[] all-reduce(%reduce.992), channel_id=1165, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1212.30038.clone
  %convert.2670 = bf16[] convert(%all-reduce.74)
  %add.5173 = bf16[] add(%add.5172, %convert.2670)
  %dot.1165 = bf16[8,128,4096]{2,1,0} dot(%copy.3715, %copy.3685), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.75 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1165), channel_id=1166, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.24.clone
  %dynamic-slice.2387 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.75, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.339 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2387), dimensions={2,0,1}
  %multiply.6150 = bf16[512,8,128]{0,2,1} multiply(%transpose.339, %transpose.339)
  %convert.2671 = f32[512,8,128]{0,2,1} convert(%multiply.6150)
  %reduce.993 = f32[] reduce(%convert.2671, %constant.3956), dimensions={0,1,2}, to_apply=%region_1213.30047
  %all-reduce.76 = f32[] all-reduce(%reduce.993), channel_id=1167, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1213.30047.clone
  %convert.2672 = bf16[] convert(%all-reduce.76)
  %add.5174 = bf16[] add(%add.5173, %convert.2672)
  %dot.1166 = bf16[4096,8]{1,0} dot(%copy.3652, %copy.3671), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.77 = bf16[4096,8]{1,0} all-reduce(%dot.1166), channel_id=1168, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.25.clone
  %dynamic-slice.2389 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.77, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6151 = bf16[512,8]{0,1} multiply(%dynamic-slice.2389, %dynamic-slice.2389)
  %convert.2673 = f32[512,8]{0,1} convert(%multiply.6151)
  %reduce.994 = f32[] reduce(%convert.2673, %constant.3956), dimensions={0,1}, to_apply=%region_1214.30056
  %all-reduce.78 = f32[] all-reduce(%reduce.994), channel_id=1169, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1214.30056.clone
  %convert.2674 = bf16[] convert(%all-reduce.78)
  %add.5176 = bf16[] add(%add.5174, %convert.2674)
  %dot.1167 = bf16[1,4096,14336]{2,1,0} dot(%copy.3657, %copy.3667), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4216 = bf16[1,4096,14336]{2,1,0} copy(%dot.1167)
  %multiply.6152 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4216, %copy.4216)
  %convert.2675 = f32[1,4096,14336]{2,1,0} convert(%multiply.6152)
  %reduce.995 = f32[] reduce(%convert.2675, %constant.3956), dimensions={0,1,2}, to_apply=%region_1215.30065
  %all-reduce.79 = f32[] all-reduce(%reduce.995), channel_id=1170, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1215.30065.clone
  %convert.2676 = bf16[] convert(%all-reduce.79)
  %add.5177 = bf16[] add(%add.5176, %convert.2676)
  %dot.1168 = bf16[1,4096,14336]{2,1,0} dot(%copy.3657, %copy.3664), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4217 = bf16[1,4096,14336]{2,1,0} copy(%dot.1168)
  %multiply.6153 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4217, %copy.4217)
  %convert.2677 = f32[1,4096,14336]{2,1,0} convert(%multiply.6153)
  %reduce.996 = f32[] reduce(%convert.2677, %constant.3956), dimensions={0,1,2}, to_apply=%region_1216.30074
  %all-reduce.80 = f32[] all-reduce(%reduce.996), channel_id=1171, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1216.30074.clone
  %convert.2678 = bf16[] convert(%all-reduce.80)
  %add.5178 = bf16[] add(%add.5177, %convert.2678)
  %dot.1169 = bf16[1,14336,4096]{2,1,0} dot(%multiply.4860, %copy.3662), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4218 = bf16[1,14336,4096]{2,1,0} copy(%dot.1169)
  %multiply.6154 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4218, %copy.4218)
  %convert.2679 = f32[1,14336,4096]{2,1,0} convert(%multiply.6154)
  %reduce.997 = f32[] reduce(%convert.2679, %constant.3956), dimensions={0,1,2}, to_apply=%region_1217.30083
  %all-reduce.81 = f32[] all-reduce(%reduce.997), channel_id=1172, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1217.30083.clone
  %convert.2680 = bf16[] convert(%all-reduce.81)
  %add.5179 = bf16[] add(%add.5178, %convert.2680)
  %multiply.6155 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2074, %copy.3672)
  %reduce.998 = bf16[4096]{0} reduce(%multiply.6155, %constant.3795), dimensions={0,1}, to_apply=%region_830.21954
  %all-reduce.82 = bf16[4096]{0} all-reduce(%reduce.998), channel_id=1173, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_830.21954.clone
  %multiply.6156 = bf16[4096]{0} multiply(%all-reduce.82, %all-reduce.82)
  %convert.2681 = f32[4096]{0} convert(%multiply.6156)
  %reduce.999 = f32[] reduce(%convert.2681, %constant.3956), dimensions={0}, to_apply=%region_1218.30092
  %convert.2682 = bf16[] convert(%reduce.999)
  %add.5180 = bf16[] add(%add.5179, %convert.2682)
  %multiply.6157 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2060, %copy.3680)
  %reduce.1000 = bf16[4096]{0} reduce(%multiply.6157, %constant.3795), dimensions={0,1}, to_apply=%region_834.22065
  %all-reduce.83 = bf16[4096]{0} all-reduce(%reduce.1000), channel_id=1174, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_834.22065.clone
  %multiply.6158 = bf16[4096]{0} multiply(%all-reduce.83, %all-reduce.83)
  %convert.2683 = f32[4096]{0} convert(%multiply.6158)
  %reduce.1001 = f32[] reduce(%convert.2683, %constant.3956), dimensions={0}, to_apply=%region_1219.30101
  %convert.2684 = bf16[] convert(%reduce.1001)
  %add.5181 = bf16[] add(%add.5180, %convert.2684)
  %dot.1170 = bf16[8,128,4096]{2,1,0} dot(%concatenate.361, %copy.3645), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.84 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1170), channel_id=1175, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.26.clone
  %dynamic-slice.2391 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.84, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.340 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2391), dimensions={2,0,1}
  %multiply.6159 = bf16[512,8,128]{0,2,1} multiply(%transpose.340, %transpose.340)
  %convert.2685 = f32[512,8,128]{0,2,1} convert(%multiply.6159)
  %reduce.1002 = f32[] reduce(%convert.2685, %constant.3956), dimensions={0,1,2}, to_apply=%region_1220.30110
  %all-reduce.85 = f32[] all-reduce(%reduce.1002), channel_id=1176, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1220.30110.clone
  %convert.2687 = bf16[] convert(%all-reduce.85)
  %add.5182 = bf16[] add(%add.5181, %convert.2687)
  %dot.1171 = bf16[4096,32,128]{2,1,0} dot(%copy.3673, %copy.3650), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.86 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1171), channel_id=1177, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.27.clone
  %dynamic-slice.2393 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.86, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.341 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2393), dimensions={1,2,0}
  %multiply.6160 = bf16[32,128,512]{1,0,2} multiply(%transpose.341, %transpose.341)
  %convert.2688 = f32[32,128,512]{1,0,2} convert(%multiply.6160)
  %reduce.1003 = f32[] reduce(%convert.2688, %constant.3956), dimensions={0,1,2}, to_apply=%region_1221.30119
  %all-reduce.87 = f32[] all-reduce(%reduce.1003), channel_id=1178, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1221.30119.clone
  %convert.2689 = bf16[] convert(%all-reduce.87)
  %add.5183 = bf16[] add(%add.5182, %convert.2689)
  %dot.1172 = bf16[32,128,4096]{2,1,0} dot(%concatenate.362, %copy.3645), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.88 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1172), channel_id=1179, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.28.clone
  %dynamic-slice.2395 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.88, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.342 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2395), dimensions={2,0,1}
  %multiply.6161 = bf16[512,32,128]{0,2,1} multiply(%transpose.342, %transpose.342)
  %convert.2690 = f32[512,32,128]{0,2,1} convert(%multiply.6161)
  %reduce.1004 = f32[] reduce(%convert.2690, %constant.3956), dimensions={0,1,2}, to_apply=%region_1222.30128
  %all-reduce.89 = f32[] all-reduce(%reduce.1004), channel_id=1180, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1222.30128.clone
  %convert.2691 = bf16[] convert(%all-reduce.89)
  %add.5184 = bf16[] add(%add.5183, %convert.2691)
  %dot.1173 = bf16[8,128,4096]{2,1,0} dot(%copy.3675, %copy.3645), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.90 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1173), channel_id=1181, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.29.clone
  %dynamic-slice.2397 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.90, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.343 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2397), dimensions={2,0,1}
  %multiply.6162 = bf16[512,8,128]{0,2,1} multiply(%transpose.343, %transpose.343)
  %convert.2692 = f32[512,8,128]{0,2,1} convert(%multiply.6162)
  %reduce.1005 = f32[] reduce(%convert.2692, %constant.3956), dimensions={0,1,2}, to_apply=%region_1223.30137
  %all-reduce.91 = f32[] all-reduce(%reduce.1005), channel_id=1182, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1223.30137.clone
  %convert.2694 = bf16[] convert(%all-reduce.91)
  %add.5185 = bf16[] add(%add.5184, %convert.2694)
  %dot.1174 = bf16[4096,8]{1,0} dot(%copy.3612, %copy.3631), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.92 = bf16[4096,8]{1,0} all-reduce(%dot.1174), channel_id=1183, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.30.clone
  %dynamic-slice.2399 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.92, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6163 = bf16[512,8]{0,1} multiply(%dynamic-slice.2399, %dynamic-slice.2399)
  %convert.2695 = f32[512,8]{0,1} convert(%multiply.6163)
  %reduce.1006 = f32[] reduce(%convert.2695, %constant.3956), dimensions={0,1}, to_apply=%region_1224.30146
  %all-reduce.93 = f32[] all-reduce(%reduce.1006), channel_id=1184, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1224.30146.clone
  %convert.2696 = bf16[] convert(%all-reduce.93)
  %add.5186 = bf16[] add(%add.5185, %convert.2696)
  %dot.1175 = bf16[1,4096,14336]{2,1,0} dot(%copy.3617, %copy.3627), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4219 = bf16[1,4096,14336]{2,1,0} copy(%dot.1175)
  %multiply.6164 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4219, %copy.4219)
  %convert.2697 = f32[1,4096,14336]{2,1,0} convert(%multiply.6164)
  %reduce.1007 = f32[] reduce(%convert.2697, %constant.3956), dimensions={0,1,2}, to_apply=%region_1225.30155
  %all-reduce.94 = f32[] all-reduce(%reduce.1007), channel_id=1185, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1225.30155.clone
  %convert.2698 = bf16[] convert(%all-reduce.94)
  %add.5187 = bf16[] add(%add.5186, %convert.2698)
  %dot.1176 = bf16[1,4096,14336]{2,1,0} dot(%copy.3617, %copy.3624), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4220 = bf16[1,4096,14336]{2,1,0} copy(%dot.1176)
  %multiply.6165 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4220, %copy.4220)
  %convert.2699 = f32[1,4096,14336]{2,1,0} convert(%multiply.6165)
  %reduce.1008 = f32[] reduce(%convert.2699, %constant.3956), dimensions={0,1,2}, to_apply=%region_1226.30164
  %all-reduce.95 = f32[] all-reduce(%reduce.1008), channel_id=1186, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1226.30164.clone
  %convert.2700 = bf16[] convert(%all-reduce.95)
  %add.5188 = bf16[] add(%add.5187, %convert.2700)
  %dot.1177 = bf16[1,14336,4096]{2,1,0} dot(%multiply.4769, %copy.3622), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4221 = bf16[1,14336,4096]{2,1,0} copy(%dot.1177)
  %multiply.6166 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4221, %copy.4221)
  %convert.2701 = f32[1,14336,4096]{2,1,0} convert(%multiply.6166)
  %reduce.1009 = f32[] reduce(%convert.2701, %constant.3956), dimensions={0,1,2}, to_apply=%region_1227.30173
  %all-reduce.96 = f32[] all-reduce(%reduce.1009), channel_id=1187, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1227.30173.clone
  %convert.2702 = bf16[] convert(%all-reduce.96)
  %add.5189 = bf16[] add(%add.5188, %convert.2702)
  %multiply.6167 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2040, %copy.3632)
  %reduce.1010 = bf16[4096]{0} reduce(%multiply.6167, %constant.3795), dimensions={0,1}, to_apply=%region_805.21378
  %all-reduce.97 = bf16[4096]{0} all-reduce(%reduce.1010), channel_id=1188, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_805.21378.clone
  %multiply.6168 = bf16[4096]{0} multiply(%all-reduce.97, %all-reduce.97)
  %convert.2703 = f32[4096]{0} convert(%multiply.6168)
  %reduce.1011 = f32[] reduce(%convert.2703, %constant.3956), dimensions={0}, to_apply=%region_1228.30182
  %convert.2704 = bf16[] convert(%reduce.1011)
  %add.5190 = bf16[] add(%add.5189, %convert.2704)
  %multiply.6170 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2025, %copy.3640)
  %reduce.1012 = bf16[4096]{0} reduce(%multiply.6170, %constant.3795), dimensions={0,1}, to_apply=%region_809.21489
  %all-reduce.98 = bf16[4096]{0} all-reduce(%reduce.1012), channel_id=1189, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_809.21489.clone
  %multiply.6171 = bf16[4096]{0} multiply(%all-reduce.98, %all-reduce.98)
  %convert.2706 = f32[4096]{0} convert(%multiply.6171)
  %reduce.1013 = f32[] reduce(%convert.2706, %constant.3956), dimensions={0}, to_apply=%region_1229.30191
  %convert.2707 = bf16[] convert(%reduce.1013)
  %add.5191 = bf16[] add(%add.5190, %convert.2707)
  %dot.1178 = bf16[8,128,4096]{2,1,0} dot(%concatenate.352, %copy.3605), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.99 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1178), channel_id=1190, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.31.clone
  %dynamic-slice.2401 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.99, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.344 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2401), dimensions={2,0,1}
  %multiply.6172 = bf16[512,8,128]{0,2,1} multiply(%transpose.344, %transpose.344)
  %convert.2708 = f32[512,8,128]{0,2,1} convert(%multiply.6172)
  %reduce.1014 = f32[] reduce(%convert.2708, %constant.3956), dimensions={0,1,2}, to_apply=%region_1230.30200
  %all-reduce.100 = f32[] all-reduce(%reduce.1014), channel_id=1191, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1230.30200.clone
  %convert.2709 = bf16[] convert(%all-reduce.100)
  %add.5192 = bf16[] add(%add.5191, %convert.2709)
  %dot.1179 = bf16[4096,32,128]{2,1,0} dot(%copy.3633, %copy.3610), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.101 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1179), channel_id=1192, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.32.clone
  %dynamic-slice.2403 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.101, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.345 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2403), dimensions={1,2,0}
  %multiply.6174 = bf16[32,128,512]{1,0,2} multiply(%transpose.345, %transpose.345)
  %convert.2710 = f32[32,128,512]{1,0,2} convert(%multiply.6174)
  %reduce.1015 = f32[] reduce(%convert.2710, %constant.3956), dimensions={0,1,2}, to_apply=%region_1231.30209
  %all-reduce.102 = f32[] all-reduce(%reduce.1015), channel_id=1193, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1231.30209.clone
  %convert.2711 = bf16[] convert(%all-reduce.102)
  %add.5193 = bf16[] add(%add.5192, %convert.2711)
  %dot.1180 = bf16[32,128,4096]{2,1,0} dot(%concatenate.353, %copy.3605), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.103 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1180), channel_id=1194, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.33.clone
  %dynamic-slice.2405 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.103, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.346 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2405), dimensions={2,0,1}
  %multiply.6175 = bf16[512,32,128]{0,2,1} multiply(%transpose.346, %transpose.346)
  %convert.2712 = f32[512,32,128]{0,2,1} convert(%multiply.6175)
  %reduce.1016 = f32[] reduce(%convert.2712, %constant.3956), dimensions={0,1,2}, to_apply=%region_1232.30218
  %all-reduce.104 = f32[] all-reduce(%reduce.1016), channel_id=1195, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1232.30218.clone
  %convert.2713 = bf16[] convert(%all-reduce.104)
  %add.5194 = bf16[] add(%add.5193, %convert.2713)
  %dot.1181 = bf16[8,128,4096]{2,1,0} dot(%copy.3635, %copy.3605), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.105 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1181), channel_id=1196, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.34.clone
  %dynamic-slice.2407 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.105, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.347 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2407), dimensions={2,0,1}
  %multiply.6176 = bf16[512,8,128]{0,2,1} multiply(%transpose.347, %transpose.347)
  %convert.2715 = f32[512,8,128]{0,2,1} convert(%multiply.6176)
  %reduce.1017 = f32[] reduce(%convert.2715, %constant.3956), dimensions={0,1,2}, to_apply=%region_1233.30227
  %all-reduce.106 = f32[] all-reduce(%reduce.1017), channel_id=1197, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1233.30227.clone
  %convert.2716 = bf16[] convert(%all-reduce.106)
  %add.5195 = bf16[] add(%add.5194, %convert.2716)
  %dot.1182 = bf16[4096,8]{1,0} dot(%copy.3572, %copy.3591), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.107 = bf16[4096,8]{1,0} all-reduce(%dot.1182), channel_id=1198, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.35.clone
  %dynamic-slice.2409 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.107, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6177 = bf16[512,8]{0,1} multiply(%dynamic-slice.2409, %dynamic-slice.2409)
  %convert.2717 = f32[512,8]{0,1} convert(%multiply.6177)
  %reduce.1018 = f32[] reduce(%convert.2717, %constant.3956), dimensions={0,1}, to_apply=%region_1234.30236
  %all-reduce.108 = f32[] all-reduce(%reduce.1018), channel_id=1199, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1234.30236.clone
  %convert.2718 = bf16[] convert(%all-reduce.108)
  %add.5196 = bf16[] add(%add.5195, %convert.2718)
  %dot.1183 = bf16[1,4096,14336]{2,1,0} dot(%copy.3577, %copy.3587), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4222 = bf16[1,4096,14336]{2,1,0} copy(%dot.1183)
  %multiply.6179 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4222, %copy.4222)
  %convert.2719 = f32[1,4096,14336]{2,1,0} convert(%multiply.6179)
  %reduce.1019 = f32[] reduce(%convert.2719, %constant.3956), dimensions={0,1,2}, to_apply=%region_1235.30245
  %all-reduce.109 = f32[] all-reduce(%reduce.1019), channel_id=1200, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1235.30245.clone
  %convert.2720 = bf16[] convert(%all-reduce.109)
  %add.5197 = bf16[] add(%add.5196, %convert.2720)
  %dot.1184 = bf16[1,4096,14336]{2,1,0} dot(%copy.3577, %copy.3584), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4223 = bf16[1,4096,14336]{2,1,0} copy(%dot.1184)
  %multiply.6180 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4223, %copy.4223)
  %convert.2721 = f32[1,4096,14336]{2,1,0} convert(%multiply.6180)
  %reduce.1020 = f32[] reduce(%convert.2721, %constant.3956), dimensions={0,1,2}, to_apply=%region_1236.30254
  %all-reduce.110 = f32[] all-reduce(%reduce.1020), channel_id=1201, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1236.30254.clone
  %convert.2722 = bf16[] convert(%all-reduce.110)
  %add.5198 = bf16[] add(%add.5197, %convert.2722)
  %dot.1188 = bf16[1,14336,4096]{2,1,0} dot(%multiply.4681, %copy.3582), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4224 = bf16[1,14336,4096]{2,1,0} copy(%dot.1188)
  %multiply.6181 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4224, %copy.4224)
  %convert.2723 = f32[1,14336,4096]{2,1,0} convert(%multiply.6181)
  %reduce.1021 = f32[] reduce(%convert.2723, %constant.3956), dimensions={0,1,2}, to_apply=%region_1237.30263
  %all-reduce.111 = f32[] all-reduce(%reduce.1021), channel_id=1202, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1237.30263.clone
  %convert.2724 = bf16[] convert(%all-reduce.111)
  %add.5199 = bf16[] add(%add.5198, %convert.2724)
  %multiply.6183 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2004, %copy.3592)
  %reduce.1022 = bf16[4096]{0} reduce(%multiply.6183, %constant.3795), dimensions={0,1}, to_apply=%region_780.20802
  %all-reduce.112 = bf16[4096]{0} all-reduce(%reduce.1022), channel_id=1203, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_780.20802.clone
  %multiply.6184 = bf16[4096]{0} multiply(%all-reduce.112, %all-reduce.112)
  %convert.2725 = f32[4096]{0} convert(%multiply.6184)
  %reduce.1023 = f32[] reduce(%convert.2725, %constant.3956), dimensions={0}, to_apply=%region_1238.30272
  %convert.2726 = bf16[] convert(%reduce.1023)
  %add.5200 = bf16[] add(%add.5199, %convert.2726)
  %multiply.6185 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1989, %copy.3600)
  %reduce.1024 = bf16[4096]{0} reduce(%multiply.6185, %constant.3795), dimensions={0,1}, to_apply=%region_784.20913
  %all-reduce.113 = bf16[4096]{0} all-reduce(%reduce.1024), channel_id=1204, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_784.20913.clone
  %multiply.6186 = bf16[4096]{0} multiply(%all-reduce.113, %all-reduce.113)
  %convert.2727 = f32[4096]{0} convert(%multiply.6186)
  %reduce.1025 = f32[] reduce(%convert.2727, %constant.3956), dimensions={0}, to_apply=%region_1239.30281
  %convert.2728 = bf16[] convert(%reduce.1025)
  %add.5201 = bf16[] add(%add.5200, %convert.2728)
  %dot.1189 = bf16[8,128,4096]{2,1,0} dot(%concatenate.343, %copy.3565), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.114 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1189), channel_id=1205, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.36.clone
  %dynamic-slice.2411 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.114, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.348 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2411), dimensions={2,0,1}
  %multiply.6187 = bf16[512,8,128]{0,2,1} multiply(%transpose.348, %transpose.348)
  %convert.2729 = f32[512,8,128]{0,2,1} convert(%multiply.6187)
  %reduce.1026 = f32[] reduce(%convert.2729, %constant.3956), dimensions={0,1,2}, to_apply=%region_1240.30290
  %all-reduce.115 = f32[] all-reduce(%reduce.1026), channel_id=1206, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1240.30290.clone
  %convert.2730 = bf16[] convert(%all-reduce.115)
  %add.5202 = bf16[] add(%add.5201, %convert.2730)
  %dot.1190 = bf16[4096,32,128]{2,1,0} dot(%copy.3593, %copy.3570), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.116 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1190), channel_id=1207, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.37.clone
  %dynamic-slice.2413 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.116, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.349 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2413), dimensions={1,2,0}
  %multiply.6188 = bf16[32,128,512]{1,0,2} multiply(%transpose.349, %transpose.349)
  %convert.2731 = f32[32,128,512]{1,0,2} convert(%multiply.6188)
  %reduce.1027 = f32[] reduce(%convert.2731, %constant.3956), dimensions={0,1,2}, to_apply=%region_1241.30299
  %all-reduce.117 = f32[] all-reduce(%reduce.1027), channel_id=1208, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1241.30299.clone
  %convert.2732 = bf16[] convert(%all-reduce.117)
  %add.5203 = bf16[] add(%add.5202, %convert.2732)
  %dot.1191 = bf16[32,128,4096]{2,1,0} dot(%concatenate.344, %copy.3565), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.118 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1191), channel_id=1209, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.38.clone
  %dynamic-slice.2415 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.118, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.350 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2415), dimensions={2,0,1}
  %multiply.6189 = bf16[512,32,128]{0,2,1} multiply(%transpose.350, %transpose.350)
  %convert.2733 = f32[512,32,128]{0,2,1} convert(%multiply.6189)
  %reduce.1028 = f32[] reduce(%convert.2733, %constant.3956), dimensions={0,1,2}, to_apply=%region_1242.30308
  %all-reduce.119 = f32[] all-reduce(%reduce.1028), channel_id=1210, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1242.30308.clone
  %convert.2735 = bf16[] convert(%all-reduce.119)
  %add.5204 = bf16[] add(%add.5203, %convert.2735)
  %dot.1192 = bf16[8,128,4096]{2,1,0} dot(%copy.3595, %copy.3565), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.120 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1192), channel_id=1211, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.39.clone
  %dynamic-slice.2417 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.120, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.351 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2417), dimensions={2,0,1}
  %multiply.6190 = bf16[512,8,128]{0,2,1} multiply(%transpose.351, %transpose.351)
  %convert.2736 = f32[512,8,128]{0,2,1} convert(%multiply.6190)
  %reduce.1029 = f32[] reduce(%convert.2736, %constant.3956), dimensions={0,1,2}, to_apply=%region_1243.30317
  %all-reduce.121 = f32[] all-reduce(%reduce.1029), channel_id=1212, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1243.30317.clone
  %convert.2737 = bf16[] convert(%all-reduce.121)
  %add.5205 = bf16[] add(%add.5204, %convert.2737)
  %dot.1193 = bf16[4096,8]{1,0} dot(%copy.3532, %copy.3551), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.122 = bf16[4096,8]{1,0} all-reduce(%dot.1193), channel_id=1213, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.40.clone
  %dynamic-slice.2419 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.122, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6191 = bf16[512,8]{0,1} multiply(%dynamic-slice.2419, %dynamic-slice.2419)
  %convert.2738 = f32[512,8]{0,1} convert(%multiply.6191)
  %reduce.1030 = f32[] reduce(%convert.2738, %constant.3956), dimensions={0,1}, to_apply=%region_1244.30326
  %all-reduce.123 = f32[] all-reduce(%reduce.1030), channel_id=1214, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1244.30326.clone
  %convert.2739 = bf16[] convert(%all-reduce.123)
  %add.5206 = bf16[] add(%add.5205, %convert.2739)
  %dot.1194 = bf16[1,4096,14336]{2,1,0} dot(%copy.3537, %copy.3547), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4225 = bf16[1,4096,14336]{2,1,0} copy(%dot.1194)
  %multiply.6192 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4225, %copy.4225)
  %convert.2740 = f32[1,4096,14336]{2,1,0} convert(%multiply.6192)
  %reduce.1031 = f32[] reduce(%convert.2740, %constant.3956), dimensions={0,1,2}, to_apply=%region_1245.30335
  %all-reduce.124 = f32[] all-reduce(%reduce.1031), channel_id=1215, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1245.30335.clone
  %convert.2741 = bf16[] convert(%all-reduce.124)
  %add.5207 = bf16[] add(%add.5206, %convert.2741)
  %dot.1195 = bf16[1,4096,14336]{2,1,0} dot(%copy.3537, %copy.3544), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4226 = bf16[1,4096,14336]{2,1,0} copy(%dot.1195)
  %multiply.6193 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4226, %copy.4226)
  %convert.2742 = f32[1,4096,14336]{2,1,0} convert(%multiply.6193)
  %reduce.1032 = f32[] reduce(%convert.2742, %constant.3956), dimensions={0,1,2}, to_apply=%region_1246.30344
  %all-reduce.125 = f32[] all-reduce(%reduce.1032), channel_id=1216, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1246.30344.clone
  %convert.2743 = bf16[] convert(%all-reduce.125)
  %add.5208 = bf16[] add(%add.5207, %convert.2743)
  %dot.1196 = bf16[1,14336,4096]{2,1,0} dot(%multiply.4586, %copy.3542), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4227 = bf16[1,14336,4096]{2,1,0} copy(%dot.1196)
  %multiply.6194 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4227, %copy.4227)
  %convert.2744 = f32[1,14336,4096]{2,1,0} convert(%multiply.6194)
  %reduce.1033 = f32[] reduce(%convert.2744, %constant.3956), dimensions={0,1,2}, to_apply=%region_1247.30353
  %all-reduce.126 = f32[] all-reduce(%reduce.1033), channel_id=1217, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1247.30353.clone
  %convert.2745 = bf16[] convert(%all-reduce.126)
  %add.5209 = bf16[] add(%add.5208, %convert.2745)
  %multiply.6195 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1968, %copy.3552)
  %reduce.1034 = bf16[4096]{0} reduce(%multiply.6195, %constant.3795), dimensions={0,1}, to_apply=%region_755.20226
  %all-reduce.127 = bf16[4096]{0} all-reduce(%reduce.1034), channel_id=1218, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_755.20226.clone
  %multiply.6196 = bf16[4096]{0} multiply(%all-reduce.127, %all-reduce.127)
  %convert.2746 = f32[4096]{0} convert(%multiply.6196)
  %reduce.1035 = f32[] reduce(%convert.2746, %constant.3956), dimensions={0}, to_apply=%region_1248.30362
  %convert.2747 = bf16[] convert(%reduce.1035)
  %add.5210 = bf16[] add(%add.5209, %convert.2747)
  %multiply.6197 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1952, %copy.3560)
  %reduce.1036 = bf16[4096]{0} reduce(%multiply.6197, %constant.3795), dimensions={0,1}, to_apply=%region_759.20337
  %all-reduce.128 = bf16[4096]{0} all-reduce(%reduce.1036), channel_id=1219, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_759.20337.clone
  %multiply.6198 = bf16[4096]{0} multiply(%all-reduce.128, %all-reduce.128)
  %convert.2748 = f32[4096]{0} convert(%multiply.6198)
  %reduce.1037 = f32[] reduce(%convert.2748, %constant.3956), dimensions={0}, to_apply=%region_1249.30371
  %convert.2750 = bf16[] convert(%reduce.1037)
  %add.5211 = bf16[] add(%add.5210, %convert.2750)
  %dot.1197 = bf16[8,128,4096]{2,1,0} dot(%concatenate.334, %copy.3525), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.129 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1197), channel_id=1220, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.41.clone
  %dynamic-slice.2421 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.129, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.352 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2421), dimensions={2,0,1}
  %multiply.6199 = bf16[512,8,128]{0,2,1} multiply(%transpose.352, %transpose.352)
  %convert.2751 = f32[512,8,128]{0,2,1} convert(%multiply.6199)
  %reduce.1038 = f32[] reduce(%convert.2751, %constant.3956), dimensions={0,1,2}, to_apply=%region_1250.30380
  %all-reduce.130 = f32[] all-reduce(%reduce.1038), channel_id=1221, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1250.30380.clone
  %convert.2752 = bf16[] convert(%all-reduce.130)
  %add.5212 = bf16[] add(%add.5211, %convert.2752)
  %dot.1198 = bf16[4096,32,128]{2,1,0} dot(%copy.3553, %copy.3530), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.131 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1198), channel_id=1222, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.42.clone
  %dynamic-slice.2423 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.131, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.353 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2423), dimensions={1,2,0}
  %multiply.6200 = bf16[32,128,512]{1,0,2} multiply(%transpose.353, %transpose.353)
  %convert.2753 = f32[32,128,512]{1,0,2} convert(%multiply.6200)
  %reduce.1039 = f32[] reduce(%convert.2753, %constant.3956), dimensions={0,1,2}, to_apply=%region_1251.30389
  %all-reduce.132 = f32[] all-reduce(%reduce.1039), channel_id=1223, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1251.30389.clone
  %convert.2754 = bf16[] convert(%all-reduce.132)
  %add.5213 = bf16[] add(%add.5212, %convert.2754)
  %dot.1199 = bf16[32,128,4096]{2,1,0} dot(%concatenate.335, %copy.3525), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.133 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1199), channel_id=1224, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.43.clone
  %dynamic-slice.2425 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.133, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.354 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2425), dimensions={2,0,1}
  %multiply.6201 = bf16[512,32,128]{0,2,1} multiply(%transpose.354, %transpose.354)
  %convert.2755 = f32[512,32,128]{0,2,1} convert(%multiply.6201)
  %reduce.1040 = f32[] reduce(%convert.2755, %constant.3956), dimensions={0,1,2}, to_apply=%region_1252.30398
  %all-reduce.134 = f32[] all-reduce(%reduce.1040), channel_id=1225, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1252.30398.clone
  %convert.2756 = bf16[] convert(%all-reduce.134)
  %add.5214 = bf16[] add(%add.5213, %convert.2756)
  %dot.1200 = bf16[8,128,4096]{2,1,0} dot(%copy.3555, %copy.3525), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.135 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1200), channel_id=1226, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.44.clone
  %dynamic-slice.2427 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.135, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.355 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2427), dimensions={2,0,1}
  %multiply.6202 = bf16[512,8,128]{0,2,1} multiply(%transpose.355, %transpose.355)
  %convert.2757 = f32[512,8,128]{0,2,1} convert(%multiply.6202)
  %reduce.1041 = f32[] reduce(%convert.2757, %constant.3956), dimensions={0,1,2}, to_apply=%region_1253.30407
  %all-reduce.136 = f32[] all-reduce(%reduce.1041), channel_id=1227, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1253.30407.clone
  %convert.2758 = bf16[] convert(%all-reduce.136)
  %add.5215 = bf16[] add(%add.5214, %convert.2758)
  %dot.1201 = bf16[4096,8]{1,0} dot(%copy.3492, %copy.3511), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.137 = bf16[4096,8]{1,0} all-reduce(%dot.1201), channel_id=1228, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.45.clone
  %dynamic-slice.2429 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.137, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6203 = bf16[512,8]{0,1} multiply(%dynamic-slice.2429, %dynamic-slice.2429)
  %convert.2759 = f32[512,8]{0,1} convert(%multiply.6203)
  %reduce.1042 = f32[] reduce(%convert.2759, %constant.3956), dimensions={0,1}, to_apply=%region_1254.30416
  %all-reduce.138 = f32[] all-reduce(%reduce.1042), channel_id=1229, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1254.30416.clone
  %convert.2760 = bf16[] convert(%all-reduce.138)
  %add.5216 = bf16[] add(%add.5215, %convert.2760)
  %dot.1202 = bf16[1,4096,14336]{2,1,0} dot(%copy.3497, %copy.3507), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4228 = bf16[1,4096,14336]{2,1,0} copy(%dot.1202)
  %multiply.6204 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4228, %copy.4228)
  %convert.2761 = f32[1,4096,14336]{2,1,0} convert(%multiply.6204)
  %reduce.1043 = f32[] reduce(%convert.2761, %constant.3956), dimensions={0,1,2}, to_apply=%region_1255.30425
  %all-reduce.139 = f32[] all-reduce(%reduce.1043), channel_id=1230, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1255.30425.clone
  %convert.2762 = bf16[] convert(%all-reduce.139)
  %add.5217 = bf16[] add(%add.5216, %convert.2762)
  %dot.1203 = bf16[1,4096,14336]{2,1,0} dot(%copy.3497, %copy.3504), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4229 = bf16[1,4096,14336]{2,1,0} copy(%dot.1203)
  %multiply.6205 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4229, %copy.4229)
  %convert.2763 = f32[1,4096,14336]{2,1,0} convert(%multiply.6205)
  %reduce.1044 = f32[] reduce(%convert.2763, %constant.3956), dimensions={0,1,2}, to_apply=%region_1256.30434
  %all-reduce.140 = f32[] all-reduce(%reduce.1044), channel_id=1231, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1256.30434.clone
  %convert.2765 = bf16[] convert(%all-reduce.140)
  %add.5218 = bf16[] add(%add.5217, %convert.2765)
  %dot.1204 = bf16[1,14336,4096]{2,1,0} dot(%multiply.4492, %copy.3502), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4230 = bf16[1,14336,4096]{2,1,0} copy(%dot.1204)
  %multiply.6206 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4230, %copy.4230)
  %convert.2766 = f32[1,14336,4096]{2,1,0} convert(%multiply.6206)
  %reduce.1045 = f32[] reduce(%convert.2766, %constant.3956), dimensions={0,1,2}, to_apply=%region_1257.30443
  %all-reduce.141 = f32[] all-reduce(%reduce.1045), channel_id=1232, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1257.30443.clone
  %convert.2768 = bf16[] convert(%all-reduce.141)
  %add.5219 = bf16[] add(%add.5218, %convert.2768)
  %multiply.6207 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1932, %copy.3512)
  %reduce.1046 = bf16[4096]{0} reduce(%multiply.6207, %constant.3795), dimensions={0,1}, to_apply=%region_730.19650
  %all-reduce.142 = bf16[4096]{0} all-reduce(%reduce.1046), channel_id=1233, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_730.19650.clone
  %multiply.6208 = bf16[4096]{0} multiply(%all-reduce.142, %all-reduce.142)
  %convert.2769 = f32[4096]{0} convert(%multiply.6208)
  %reduce.1047 = f32[] reduce(%convert.2769, %constant.3956), dimensions={0}, to_apply=%region_1258.30452
  %convert.2770 = bf16[] convert(%reduce.1047)
  %add.5220 = bf16[] add(%add.5219, %convert.2770)
  %multiply.6209 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1918, %copy.3520)
  %reduce.1048 = bf16[4096]{0} reduce(%multiply.6209, %constant.3795), dimensions={0,1}, to_apply=%region_734.19761
  %all-reduce.143 = bf16[4096]{0} all-reduce(%reduce.1048), channel_id=1234, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_734.19761.clone
  %multiply.6210 = bf16[4096]{0} multiply(%all-reduce.143, %all-reduce.143)
  %convert.2771 = f32[4096]{0} convert(%multiply.6210)
  %reduce.1049 = f32[] reduce(%convert.2771, %constant.3956), dimensions={0}, to_apply=%region_1259.30461
  %convert.2772 = bf16[] convert(%reduce.1049)
  %add.5221 = bf16[] add(%add.5220, %convert.2772)
  %dot.1205 = bf16[8,128,4096]{2,1,0} dot(%concatenate.325, %copy.3485), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.144 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1205), channel_id=1235, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.46.clone
  %dynamic-slice.2431 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.144, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.356 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2431), dimensions={2,0,1}
  %multiply.6211 = bf16[512,8,128]{0,2,1} multiply(%transpose.356, %transpose.356)
  %convert.2773 = f32[512,8,128]{0,2,1} convert(%multiply.6211)
  %reduce.1050 = f32[] reduce(%convert.2773, %constant.3956), dimensions={0,1,2}, to_apply=%region_1260.30470
  %all-reduce.145 = f32[] all-reduce(%reduce.1050), channel_id=1236, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1260.30470.clone
  %convert.2774 = bf16[] convert(%all-reduce.145)
  %add.5222 = bf16[] add(%add.5221, %convert.2774)
  %dot.1206 = bf16[4096,32,128]{2,1,0} dot(%copy.3513, %copy.3490), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.146 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1206), channel_id=1237, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.47.clone
  %dynamic-slice.2433 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.146, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.357 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2433), dimensions={1,2,0}
  %multiply.6212 = bf16[32,128,512]{1,0,2} multiply(%transpose.357, %transpose.357)
  %convert.2775 = f32[32,128,512]{1,0,2} convert(%multiply.6212)
  %reduce.1051 = f32[] reduce(%convert.2775, %constant.3956), dimensions={0,1,2}, to_apply=%region_1261.30479
  %all-reduce.147 = f32[] all-reduce(%reduce.1051), channel_id=1238, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1261.30479.clone
  %convert.2776 = bf16[] convert(%all-reduce.147)
  %add.5223 = bf16[] add(%add.5222, %convert.2776)
  %dot.1207 = bf16[32,128,4096]{2,1,0} dot(%concatenate.326, %copy.3485), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.148 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1207), channel_id=1239, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.48.clone
  %dynamic-slice.2435 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.148, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.358 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2435), dimensions={2,0,1}
  %multiply.6213 = bf16[512,32,128]{0,2,1} multiply(%transpose.358, %transpose.358)
  %convert.2778 = f32[512,32,128]{0,2,1} convert(%multiply.6213)
  %reduce.1052 = f32[] reduce(%convert.2778, %constant.3956), dimensions={0,1,2}, to_apply=%region_1262.30488
  %all-reduce.149 = f32[] all-reduce(%reduce.1052), channel_id=1240, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1262.30488.clone
  %convert.2780 = bf16[] convert(%all-reduce.149)
  %add.5224 = bf16[] add(%add.5223, %convert.2780)
  %dot.1208 = bf16[8,128,4096]{2,1,0} dot(%copy.3515, %copy.3485), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.150 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1208), channel_id=1241, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.49.clone
  %dynamic-slice.2437 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.150, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.359 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2437), dimensions={2,0,1}
  %multiply.6214 = bf16[512,8,128]{0,2,1} multiply(%transpose.359, %transpose.359)
  %convert.2781 = f32[512,8,128]{0,2,1} convert(%multiply.6214)
  %reduce.1053 = f32[] reduce(%convert.2781, %constant.3956), dimensions={0,1,2}, to_apply=%region_1263.30497
  %all-reduce.151 = f32[] all-reduce(%reduce.1053), channel_id=1242, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1263.30497.clone
  %convert.2782 = bf16[] convert(%all-reduce.151)
  %add.5225 = bf16[] add(%add.5224, %convert.2782)
  %dot.1209 = bf16[4096,8]{1,0} dot(%copy.3452, %copy.3471), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.152 = bf16[4096,8]{1,0} all-reduce(%dot.1209), channel_id=1243, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.50.clone
  %dynamic-slice.2439 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.152, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6215 = bf16[512,8]{0,1} multiply(%dynamic-slice.2439, %dynamic-slice.2439)
  %convert.2783 = f32[512,8]{0,1} convert(%multiply.6215)
  %reduce.1054 = f32[] reduce(%convert.2783, %constant.3956), dimensions={0,1}, to_apply=%region_1264.30506
  %all-reduce.153 = f32[] all-reduce(%reduce.1054), channel_id=1244, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1264.30506.clone
  %convert.2784 = bf16[] convert(%all-reduce.153)
  %add.5226 = bf16[] add(%add.5225, %convert.2784)
  %dot.1210 = bf16[1,4096,14336]{2,1,0} dot(%copy.3457, %copy.3467), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4231 = bf16[1,4096,14336]{2,1,0} copy(%dot.1210)
  %multiply.6216 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4231, %copy.4231)
  %convert.2785 = f32[1,4096,14336]{2,1,0} convert(%multiply.6216)
  %reduce.1055 = f32[] reduce(%convert.2785, %constant.3956), dimensions={0,1,2}, to_apply=%region_1265.30515
  %all-reduce.154 = f32[] all-reduce(%reduce.1055), channel_id=1245, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1265.30515.clone
  %convert.2786 = bf16[] convert(%all-reduce.154)
  %add.5227 = bf16[] add(%add.5226, %convert.2786)
  %dot.1211 = bf16[1,4096,14336]{2,1,0} dot(%copy.3457, %copy.3464), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4232 = bf16[1,4096,14336]{2,1,0} copy(%dot.1211)
  %multiply.6217 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4232, %copy.4232)
  %convert.2787 = f32[1,4096,14336]{2,1,0} convert(%multiply.6217)
  %reduce.1056 = f32[] reduce(%convert.2787, %constant.3956), dimensions={0,1,2}, to_apply=%region_1266.30524
  %all-reduce.155 = f32[] all-reduce(%reduce.1056), channel_id=1246, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1266.30524.clone
  %convert.2788 = bf16[] convert(%all-reduce.155)
  %add.5228 = bf16[] add(%add.5227, %convert.2788)
  %dot.1212 = bf16[1,14336,4096]{2,1,0} dot(%multiply.4404, %copy.3462), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4233 = bf16[1,14336,4096]{2,1,0} copy(%dot.1212)
  %multiply.6218 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4233, %copy.4233)
  %convert.2789 = f32[1,14336,4096]{2,1,0} convert(%multiply.6218)
  %reduce.1057 = f32[] reduce(%convert.2789, %constant.3956), dimensions={0,1,2}, to_apply=%region_1267.30533
  %all-reduce.156 = f32[] all-reduce(%reduce.1057), channel_id=1247, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1267.30533.clone
  %convert.2790 = bf16[] convert(%all-reduce.156)
  %add.5229 = bf16[] add(%add.5228, %convert.2790)
  %multiply.6219 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1896, %copy.3472)
  %reduce.1058 = bf16[4096]{0} reduce(%multiply.6219, %constant.3795), dimensions={0,1}, to_apply=%region_705.19074
  %all-reduce.157 = bf16[4096]{0} all-reduce(%reduce.1058), channel_id=1248, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_705.19074.clone
  %multiply.6220 = bf16[4096]{0} multiply(%all-reduce.157, %all-reduce.157)
  %convert.2791 = f32[4096]{0} convert(%multiply.6220)
  %reduce.1059 = f32[] reduce(%convert.2791, %constant.3956), dimensions={0}, to_apply=%region_1268.30542
  %convert.2792 = bf16[] convert(%reduce.1059)
  %add.5230 = bf16[] add(%add.5229, %convert.2792)
  %multiply.6221 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1880, %copy.3480)
  %reduce.1060 = bf16[4096]{0} reduce(%multiply.6221, %constant.3795), dimensions={0,1}, to_apply=%region_709.19185
  %all-reduce.158 = bf16[4096]{0} all-reduce(%reduce.1060), channel_id=1249, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_709.19185.clone
  %multiply.6222 = bf16[4096]{0} multiply(%all-reduce.158, %all-reduce.158)
  %convert.2793 = f32[4096]{0} convert(%multiply.6222)
  %reduce.1061 = f32[] reduce(%convert.2793, %constant.3956), dimensions={0}, to_apply=%region_1269.30551
  %convert.2794 = bf16[] convert(%reduce.1061)
  %add.5232 = bf16[] add(%add.5230, %convert.2794)
  %dot.1213 = bf16[8,128,4096]{2,1,0} dot(%concatenate.316, %copy.3445), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.159 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1213), channel_id=1250, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.51.clone
  %dynamic-slice.2441 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.159, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.360 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2441), dimensions={2,0,1}
  %multiply.6223 = bf16[512,8,128]{0,2,1} multiply(%transpose.360, %transpose.360)
  %convert.2795 = f32[512,8,128]{0,2,1} convert(%multiply.6223)
  %reduce.1062 = f32[] reduce(%convert.2795, %constant.3956), dimensions={0,1,2}, to_apply=%region_1270.30560
  %all-reduce.160 = f32[] all-reduce(%reduce.1062), channel_id=1251, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1270.30560.clone
  %convert.2796 = bf16[] convert(%all-reduce.160)
  %add.5233 = bf16[] add(%add.5232, %convert.2796)
  %dot.1214 = bf16[4096,32,128]{2,1,0} dot(%copy.3473, %copy.3450), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.161 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1214), channel_id=1252, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.52.clone
  %dynamic-slice.2443 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.161, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.361 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2443), dimensions={1,2,0}
  %multiply.6224 = bf16[32,128,512]{1,0,2} multiply(%transpose.361, %transpose.361)
  %convert.2797 = f32[32,128,512]{1,0,2} convert(%multiply.6224)
  %reduce.1063 = f32[] reduce(%convert.2797, %constant.3956), dimensions={0,1,2}, to_apply=%region_1271.30569
  %all-reduce.162 = f32[] all-reduce(%reduce.1063), channel_id=1253, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1271.30569.clone
  %convert.2798 = bf16[] convert(%all-reduce.162)
  %add.5234 = bf16[] add(%add.5233, %convert.2798)
  %dot.1215 = bf16[32,128,4096]{2,1,0} dot(%concatenate.317, %copy.3445), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.163 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1215), channel_id=1254, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.53.clone
  %dynamic-slice.2445 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.163, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.362 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2445), dimensions={2,0,1}
  %multiply.6225 = bf16[512,32,128]{0,2,1} multiply(%transpose.362, %transpose.362)
  %convert.2799 = f32[512,32,128]{0,2,1} convert(%multiply.6225)
  %reduce.1064 = f32[] reduce(%convert.2799, %constant.3956), dimensions={0,1,2}, to_apply=%region_1272.30578
  %all-reduce.164 = f32[] all-reduce(%reduce.1064), channel_id=1255, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1272.30578.clone
  %convert.2800 = bf16[] convert(%all-reduce.164)
  %add.5235 = bf16[] add(%add.5234, %convert.2800)
  %dot.1216 = bf16[8,128,4096]{2,1,0} dot(%copy.3475, %copy.3445), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.165 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1216), channel_id=1256, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.54.clone
  %dynamic-slice.2447 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.165, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.363 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2447), dimensions={2,0,1}
  %multiply.6226 = bf16[512,8,128]{0,2,1} multiply(%transpose.363, %transpose.363)
  %convert.2801 = f32[512,8,128]{0,2,1} convert(%multiply.6226)
  %reduce.1065 = f32[] reduce(%convert.2801, %constant.3956), dimensions={0,1,2}, to_apply=%region_1273.30587
  %all-reduce.166 = f32[] all-reduce(%reduce.1065), channel_id=1257, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1273.30587.clone
  %convert.2802 = bf16[] convert(%all-reduce.166)
  %add.5236 = bf16[] add(%add.5235, %convert.2802)
  %dot.1217 = bf16[4096,8]{1,0} dot(%copy.3412, %copy.3431), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.167 = bf16[4096,8]{1,0} all-reduce(%dot.1217), channel_id=1258, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.55.clone
  %dynamic-slice.2449 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.167, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6227 = bf16[512,8]{0,1} multiply(%dynamic-slice.2449, %dynamic-slice.2449)
  %convert.2803 = f32[512,8]{0,1} convert(%multiply.6227)
  %reduce.1066 = f32[] reduce(%convert.2803, %constant.3956), dimensions={0,1}, to_apply=%region_1274.30596
  %all-reduce.168 = f32[] all-reduce(%reduce.1066), channel_id=1259, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1274.30596.clone
  %convert.2805 = bf16[] convert(%all-reduce.168)
  %add.5237 = bf16[] add(%add.5236, %convert.2805)
  %dot.1218 = bf16[1,4096,14336]{2,1,0} dot(%copy.3417, %copy.3427), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4234 = bf16[1,4096,14336]{2,1,0} copy(%dot.1218)
  %multiply.6228 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4234, %copy.4234)
  %convert.2806 = f32[1,4096,14336]{2,1,0} convert(%multiply.6228)
  %reduce.1067 = f32[] reduce(%convert.2806, %constant.3956), dimensions={0,1,2}, to_apply=%region_1275.30605
  %all-reduce.169 = f32[] all-reduce(%reduce.1067), channel_id=1260, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1275.30605.clone
  %convert.2808 = bf16[] convert(%all-reduce.169)
  %add.5238 = bf16[] add(%add.5237, %convert.2808)
  %dot.1219 = bf16[1,4096,14336]{2,1,0} dot(%copy.3417, %copy.3424), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4235 = bf16[1,4096,14336]{2,1,0} copy(%dot.1219)
  %multiply.6229 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4235, %copy.4235)
  %convert.2809 = f32[1,4096,14336]{2,1,0} convert(%multiply.6229)
  %reduce.1068 = f32[] reduce(%convert.2809, %constant.3956), dimensions={0,1,2}, to_apply=%region_1276.30614
  %all-reduce.170 = f32[] all-reduce(%reduce.1068), channel_id=1261, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1276.30614.clone
  %convert.2810 = bf16[] convert(%all-reduce.170)
  %add.5239 = bf16[] add(%add.5238, %convert.2810)
  %dot.1220 = bf16[1,14336,4096]{2,1,0} dot(%multiply.4312, %copy.3422), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4236 = bf16[1,14336,4096]{2,1,0} copy(%dot.1220)
  %multiply.6230 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4236, %copy.4236)
  %convert.2811 = f32[1,14336,4096]{2,1,0} convert(%multiply.6230)
  %reduce.1069 = f32[] reduce(%convert.2811, %constant.3956), dimensions={0,1,2}, to_apply=%region_1277.30623
  %all-reduce.171 = f32[] all-reduce(%reduce.1069), channel_id=1262, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1277.30623.clone
  %convert.2812 = bf16[] convert(%all-reduce.171)
  %add.5240 = bf16[] add(%add.5239, %convert.2812)
  %multiply.6231 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1858, %copy.3432)
  %reduce.1070 = bf16[4096]{0} reduce(%multiply.6231, %constant.3795), dimensions={0,1}, to_apply=%region_680.18498
  %all-reduce.172 = bf16[4096]{0} all-reduce(%reduce.1070), channel_id=1263, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_680.18498.clone
  %multiply.6232 = bf16[4096]{0} multiply(%all-reduce.172, %all-reduce.172)
  %convert.2813 = f32[4096]{0} convert(%multiply.6232)
  %reduce.1071 = f32[] reduce(%convert.2813, %constant.3956), dimensions={0}, to_apply=%region_1278.30632
  %convert.2814 = bf16[] convert(%reduce.1071)
  %add.5241 = bf16[] add(%add.5240, %convert.2814)
  %multiply.6233 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1842, %copy.3440)
  %reduce.1072 = bf16[4096]{0} reduce(%multiply.6233, %constant.3795), dimensions={0,1}, to_apply=%region_684.18609
  %all-reduce.173 = bf16[4096]{0} all-reduce(%reduce.1072), channel_id=1264, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_684.18609.clone
  %multiply.6234 = bf16[4096]{0} multiply(%all-reduce.173, %all-reduce.173)
  %convert.2815 = f32[4096]{0} convert(%multiply.6234)
  %reduce.1073 = f32[] reduce(%convert.2815, %constant.3956), dimensions={0}, to_apply=%region_1279.30641
  %convert.2816 = bf16[] convert(%reduce.1073)
  %add.5242 = bf16[] add(%add.5241, %convert.2816)
  %dot.1221 = bf16[8,128,4096]{2,1,0} dot(%concatenate.307, %copy.3405), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.174 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1221), channel_id=1265, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.56.clone
  %dynamic-slice.2451 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.174, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.364 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2451), dimensions={2,0,1}
  %multiply.6235 = bf16[512,8,128]{0,2,1} multiply(%transpose.364, %transpose.364)
  %convert.2818 = f32[512,8,128]{0,2,1} convert(%multiply.6235)
  %reduce.1074 = f32[] reduce(%convert.2818, %constant.3956), dimensions={0,1,2}, to_apply=%region_1280.30650
  %all-reduce.175 = f32[] all-reduce(%reduce.1074), channel_id=1266, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1280.30650.clone
  %convert.2820 = bf16[] convert(%all-reduce.175)
  %add.5243 = bf16[] add(%add.5242, %convert.2820)
  %dot.1222 = bf16[4096,32,128]{2,1,0} dot(%copy.3433, %copy.3410), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.176 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1222), channel_id=1267, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.57.clone
  %dynamic-slice.2453 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.176, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.365 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2453), dimensions={1,2,0}
  %multiply.6236 = bf16[32,128,512]{1,0,2} multiply(%transpose.365, %transpose.365)
  %convert.2821 = f32[32,128,512]{1,0,2} convert(%multiply.6236)
  %reduce.1075 = f32[] reduce(%convert.2821, %constant.3956), dimensions={0,1,2}, to_apply=%region_1281.30659
  %all-reduce.177 = f32[] all-reduce(%reduce.1075), channel_id=1268, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1281.30659.clone
  %convert.2822 = bf16[] convert(%all-reduce.177)
  %add.5244 = bf16[] add(%add.5243, %convert.2822)
  %dot.1223 = bf16[32,128,4096]{2,1,0} dot(%concatenate.308, %copy.3405), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.178 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1223), channel_id=1269, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.58.clone
  %dynamic-slice.2455 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.178, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.366 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2455), dimensions={2,0,1}
  %multiply.6237 = bf16[512,32,128]{0,2,1} multiply(%transpose.366, %transpose.366)
  %convert.2823 = f32[512,32,128]{0,2,1} convert(%multiply.6237)
  %reduce.1076 = f32[] reduce(%convert.2823, %constant.3956), dimensions={0,1,2}, to_apply=%region_1282.30668
  %all-reduce.179 = f32[] all-reduce(%reduce.1076), channel_id=1270, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1282.30668.clone
  %convert.2824 = bf16[] convert(%all-reduce.179)
  %add.5245 = bf16[] add(%add.5244, %convert.2824)
  %dot.1224 = bf16[8,128,4096]{2,1,0} dot(%copy.3435, %copy.3405), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.180 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1224), channel_id=1271, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.59.clone
  %dynamic-slice.2457 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.180, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.367 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2457), dimensions={2,0,1}
  %multiply.6238 = bf16[512,8,128]{0,2,1} multiply(%transpose.367, %transpose.367)
  %convert.2825 = f32[512,8,128]{0,2,1} convert(%multiply.6238)
  %reduce.1077 = f32[] reduce(%convert.2825, %constant.3956), dimensions={0,1,2}, to_apply=%region_1283.30677
  %all-reduce.181 = f32[] all-reduce(%reduce.1077), channel_id=1272, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1283.30677.clone
  %convert.2826 = bf16[] convert(%all-reduce.181)
  %add.5246 = bf16[] add(%add.5245, %convert.2826)
  %dot.1225 = bf16[4096,8]{1,0} dot(%copy.4092, %copy.4111), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.182 = bf16[4096,8]{1,0} all-reduce(%dot.1225), channel_id=1273, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.60.clone
  %dynamic-slice.2459 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.182, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6240 = bf16[512,8]{0,1} multiply(%dynamic-slice.2459, %dynamic-slice.2459)
  %convert.2827 = f32[512,8]{0,1} convert(%multiply.6240)
  %reduce.1078 = f32[] reduce(%convert.2827, %constant.3956), dimensions={0,1}, to_apply=%region_1284.30686
  %all-reduce.183 = f32[] all-reduce(%reduce.1078), channel_id=1274, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1284.30686.clone
  %convert.2828 = bf16[] convert(%all-reduce.183)
  %add.5247 = bf16[] add(%add.5246, %convert.2828)
  %dot.1226 = bf16[1,4096,14336]{2,1,0} dot(%copy.4097, %copy.4107), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4237 = bf16[1,4096,14336]{2,1,0} copy(%dot.1226)
  %multiply.6241 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4237, %copy.4237)
  %convert.2829 = f32[1,4096,14336]{2,1,0} convert(%multiply.6241)
  %reduce.1079 = f32[] reduce(%convert.2829, %constant.3956), dimensions={0,1,2}, to_apply=%region_1285.30695
  %all-reduce.184 = f32[] all-reduce(%reduce.1079), channel_id=1275, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1285.30695.clone
  %convert.2830 = bf16[] convert(%all-reduce.184)
  %add.5248 = bf16[] add(%add.5247, %convert.2830)
  %dot.1227 = bf16[1,4096,14336]{2,1,0} dot(%copy.4097, %copy.4104), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4238 = bf16[1,4096,14336]{2,1,0} copy(%dot.1227)
  %multiply.6242 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4238, %copy.4238)
  %convert.2831 = f32[1,4096,14336]{2,1,0} convert(%multiply.6242)
  %reduce.1080 = f32[] reduce(%convert.2831, %constant.3956), dimensions={0,1,2}, to_apply=%region_1286.30704
  %all-reduce.185 = f32[] all-reduce(%reduce.1080), channel_id=1276, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1286.30704.clone
  %convert.2832 = bf16[] convert(%all-reduce.185)
  %add.5249 = bf16[] add(%add.5248, %convert.2832)
  %dot.1228 = bf16[1,14336,4096]{2,1,0} dot(%multiply.5872, %copy.4102), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4239 = bf16[1,14336,4096]{2,1,0} copy(%dot.1228)
  %multiply.6243 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4239, %copy.4239)
  %convert.2833 = f32[1,14336,4096]{2,1,0} convert(%multiply.6243)
  %reduce.1081 = f32[] reduce(%convert.2833, %constant.3956), dimensions={0,1,2}, to_apply=%region_1287.30713
  %all-reduce.186 = f32[] all-reduce(%reduce.1081), channel_id=1277, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1287.30713.clone
  %convert.2834 = bf16[] convert(%all-reduce.186)
  %add.5250 = bf16[] add(%add.5249, %convert.2834)
  %multiply.6244 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2478, %copy.4112)
  %reduce.1082 = bf16[4096]{0} reduce(%multiply.6244, %constant.3795), dimensions={0,1}, to_apply=%region_1105.28290
  %all-reduce.187 = bf16[4096]{0} all-reduce(%reduce.1082), channel_id=1278, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1105.28290.clone
  %multiply.6245 = bf16[4096]{0} multiply(%all-reduce.187, %all-reduce.187)
  %convert.2835 = f32[4096]{0} convert(%multiply.6245)
  %reduce.1083 = f32[] reduce(%convert.2835, %constant.3956), dimensions={0}, to_apply=%region_1288.30722
  %convert.2836 = bf16[] convert(%reduce.1083)
  %add.5251 = bf16[] add(%add.5250, %convert.2836)
  %multiply.6246 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2461, %copy.4120)
  %reduce.1084 = bf16[4096]{0} reduce(%multiply.6246, %constant.3795), dimensions={0,1}, to_apply=%region_1109.28401
  %all-reduce.188 = bf16[4096]{0} all-reduce(%reduce.1084), channel_id=1279, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1109.28401.clone
  %multiply.6247 = bf16[4096]{0} multiply(%all-reduce.188, %all-reduce.188)
  %convert.2837 = f32[4096]{0} convert(%multiply.6247)
  %reduce.1085 = f32[] reduce(%convert.2837, %constant.3956), dimensions={0}, to_apply=%region_1289.30731
  %convert.2838 = bf16[] convert(%reduce.1085)
  %add.5252 = bf16[] add(%add.5251, %convert.2838)
  %dot.1229 = bf16[8,128,4096]{2,1,0} dot(%concatenate.460, %copy.4085), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.189 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1229), channel_id=1280, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.61.clone
  %dynamic-slice.2461 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.189, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.368 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2461), dimensions={2,0,1}
  %multiply.6248 = bf16[512,8,128]{0,2,1} multiply(%transpose.368, %transpose.368)
  %convert.2839 = f32[512,8,128]{0,2,1} convert(%multiply.6248)
  %reduce.1086 = f32[] reduce(%convert.2839, %constant.3956), dimensions={0,1,2}, to_apply=%region_1290.30740
  %all-reduce.190 = f32[] all-reduce(%reduce.1086), channel_id=1281, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1290.30740.clone
  %convert.2840 = bf16[] convert(%all-reduce.190)
  %add.5253 = bf16[] add(%add.5252, %convert.2840)
  %dot.1230 = bf16[4096,32,128]{2,1,0} dot(%copy.4113, %copy.4090), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.191 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1230), channel_id=1282, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.62.clone
  %dynamic-slice.2463 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.191, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.369 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2463), dimensions={1,2,0}
  %multiply.6249 = bf16[32,128,512]{1,0,2} multiply(%transpose.369, %transpose.369)
  %convert.2841 = f32[32,128,512]{1,0,2} convert(%multiply.6249)
  %reduce.1087 = f32[] reduce(%convert.2841, %constant.3956), dimensions={0,1,2}, to_apply=%region_1291.30749
  %all-reduce.192 = f32[] all-reduce(%reduce.1087), channel_id=1283, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1291.30749.clone
  %convert.2842 = bf16[] convert(%all-reduce.192)
  %add.5254 = bf16[] add(%add.5253, %convert.2842)
  %dot.1231 = bf16[32,128,4096]{2,1,0} dot(%concatenate.461, %copy.4085), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.193 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1231), channel_id=1284, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.63.clone
  %dynamic-slice.2465 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.193, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.370 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2465), dimensions={2,0,1}
  %multiply.6250 = bf16[512,32,128]{0,2,1} multiply(%transpose.370, %transpose.370)
  %convert.2843 = f32[512,32,128]{0,2,1} convert(%multiply.6250)
  %reduce.1088 = f32[] reduce(%convert.2843, %constant.3956), dimensions={0,1,2}, to_apply=%region_1292.30758
  %all-reduce.194 = f32[] all-reduce(%reduce.1088), channel_id=1285, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1292.30758.clone
  %convert.2844 = bf16[] convert(%all-reduce.194)
  %add.5255 = bf16[] add(%add.5254, %convert.2844)
  %dot.1232 = bf16[8,128,4096]{2,1,0} dot(%copy.4115, %copy.4085), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.195 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1232), channel_id=1286, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.64.clone
  %dynamic-slice.2467 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.195, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.371 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2467), dimensions={2,0,1}
  %multiply.6251 = bf16[512,8,128]{0,2,1} multiply(%transpose.371, %transpose.371)
  %convert.2845 = f32[512,8,128]{0,2,1} convert(%multiply.6251)
  %reduce.1089 = f32[] reduce(%convert.2845, %constant.3956), dimensions={0,1,2}, to_apply=%region_1293.30767
  %all-reduce.196 = f32[] all-reduce(%reduce.1089), channel_id=1287, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1293.30767.clone
  %convert.2846 = bf16[] convert(%all-reduce.196)
  %add.5256 = bf16[] add(%add.5255, %convert.2846)
  %dot.1233 = bf16[4096,8]{1,0} dot(%copy.3372, %copy.3391), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.197 = bf16[4096,8]{1,0} all-reduce(%dot.1233), channel_id=1288, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.65.clone
  %dynamic-slice.2469 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.197, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6253 = bf16[512,8]{0,1} multiply(%dynamic-slice.2469, %dynamic-slice.2469)
  %convert.2847 = f32[512,8]{0,1} convert(%multiply.6253)
  %reduce.1090 = f32[] reduce(%convert.2847, %constant.3956), dimensions={0,1}, to_apply=%region_1294.30776
  %all-reduce.198 = f32[] all-reduce(%reduce.1090), channel_id=1289, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1294.30776.clone
  %convert.2848 = bf16[] convert(%all-reduce.198)
  %add.5257 = bf16[] add(%add.5256, %convert.2848)
  %dot.1234 = bf16[1,4096,14336]{2,1,0} dot(%copy.3377, %copy.3387), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4240 = bf16[1,4096,14336]{2,1,0} copy(%dot.1234)
  %multiply.6254 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4240, %copy.4240)
  %convert.2849 = f32[1,4096,14336]{2,1,0} convert(%multiply.6254)
  %reduce.1091 = f32[] reduce(%convert.2849, %constant.3956), dimensions={0,1,2}, to_apply=%region_1295.30785
  %all-reduce.199 = f32[] all-reduce(%reduce.1091), channel_id=1290, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1295.30785.clone
  %convert.2850 = bf16[] convert(%all-reduce.199)
  %add.5258 = bf16[] add(%add.5257, %convert.2850)
  %dot.1235 = bf16[1,4096,14336]{2,1,0} dot(%copy.3377, %copy.3384), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4241 = bf16[1,4096,14336]{2,1,0} copy(%dot.1235)
  %multiply.6255 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4241, %copy.4241)
  %convert.2851 = f32[1,4096,14336]{2,1,0} convert(%multiply.6255)
  %reduce.1092 = f32[] reduce(%convert.2851, %constant.3956), dimensions={0,1,2}, to_apply=%region_1296.30794
  %all-reduce.200 = f32[] all-reduce(%reduce.1092), channel_id=1291, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1296.30794.clone
  %convert.2852 = bf16[] convert(%all-reduce.200)
  %add.5259 = bf16[] add(%add.5258, %convert.2852)
  %dot.1236 = bf16[1,14336,4096]{2,1,0} dot(%multiply.4218, %copy.3382), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4242 = bf16[1,14336,4096]{2,1,0} copy(%dot.1236)
  %multiply.6256 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4242, %copy.4242)
  %convert.2853 = f32[1,14336,4096]{2,1,0} convert(%multiply.6256)
  %reduce.1093 = f32[] reduce(%convert.2853, %constant.3956), dimensions={0,1,2}, to_apply=%region_1297.30803
  %all-reduce.201 = f32[] all-reduce(%reduce.1093), channel_id=1292, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1297.30803.clone
  %convert.2854 = bf16[] convert(%all-reduce.201)
  %add.5260 = bf16[] add(%add.5259, %convert.2854)
  %multiply.6257 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1820, %copy.3392)
  %reduce.1094 = bf16[4096]{0} reduce(%multiply.6257, %constant.3795), dimensions={0,1}, to_apply=%region_655.17922
  %all-reduce.202 = bf16[4096]{0} all-reduce(%reduce.1094), channel_id=1293, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_655.17922.clone
  %multiply.6259 = bf16[4096]{0} multiply(%all-reduce.202, %all-reduce.202)
  %convert.2855 = f32[4096]{0} convert(%multiply.6259)
  %reduce.1095 = f32[] reduce(%convert.2855, %constant.3956), dimensions={0}, to_apply=%region_1298.30812
  %convert.2856 = bf16[] convert(%reduce.1095)
  %add.5261 = bf16[] add(%add.5260, %convert.2856)
  %multiply.6260 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1806, %copy.3400)
  %reduce.1096 = bf16[4096]{0} reduce(%multiply.6260, %constant.3795), dimensions={0,1}, to_apply=%region_659.18033
  %all-reduce.203 = bf16[4096]{0} all-reduce(%reduce.1096), channel_id=1294, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_659.18033.clone
  %multiply.6261 = bf16[4096]{0} multiply(%all-reduce.203, %all-reduce.203)
  %convert.2857 = f32[4096]{0} convert(%multiply.6261)
  %reduce.1097 = f32[] reduce(%convert.2857, %constant.3956), dimensions={0}, to_apply=%region_1299.30821
  %convert.2858 = bf16[] convert(%reduce.1097)
  %add.5262 = bf16[] add(%add.5261, %convert.2858)
  %dot.1237 = bf16[8,128,4096]{2,1,0} dot(%concatenate.298, %copy.3365), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.204 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1237), channel_id=1295, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.66.clone
  %dynamic-slice.2471 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.204, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.372 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2471), dimensions={2,0,1}
  %multiply.6262 = bf16[512,8,128]{0,2,1} multiply(%transpose.372, %transpose.372)
  %convert.2859 = f32[512,8,128]{0,2,1} convert(%multiply.6262)
  %reduce.1098 = f32[] reduce(%convert.2859, %constant.3956), dimensions={0,1,2}, to_apply=%region_1300.30830
  %all-reduce.205 = f32[] all-reduce(%reduce.1098), channel_id=1296, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1300.30830.clone
  %convert.2860 = bf16[] convert(%all-reduce.205)
  %add.5263 = bf16[] add(%add.5262, %convert.2860)
  %dot.1238 = bf16[4096,32,128]{2,1,0} dot(%copy.3393, %copy.3370), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.206 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1238), channel_id=1297, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.67.clone
  %dynamic-slice.2473 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.206, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.373 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2473), dimensions={1,2,0}
  %multiply.6263 = bf16[32,128,512]{1,0,2} multiply(%transpose.373, %transpose.373)
  %convert.2861 = f32[32,128,512]{1,0,2} convert(%multiply.6263)
  %reduce.1099 = f32[] reduce(%convert.2861, %constant.3956), dimensions={0,1,2}, to_apply=%region_1301.30839
  %all-reduce.207 = f32[] all-reduce(%reduce.1099), channel_id=1298, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1301.30839.clone
  %convert.2862 = bf16[] convert(%all-reduce.207)
  %add.5264 = bf16[] add(%add.5263, %convert.2862)
  %dot.1239 = bf16[32,128,4096]{2,1,0} dot(%concatenate.299, %copy.3365), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.208 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1239), channel_id=1299, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.68.clone
  %dynamic-slice.2475 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.208, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.374 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2475), dimensions={2,0,1}
  %multiply.6264 = bf16[512,32,128]{0,2,1} multiply(%transpose.374, %transpose.374)
  %convert.2863 = f32[512,32,128]{0,2,1} convert(%multiply.6264)
  %reduce.1100 = f32[] reduce(%convert.2863, %constant.3956), dimensions={0,1,2}, to_apply=%region_1302.30848
  %all-reduce.209 = f32[] all-reduce(%reduce.1100), channel_id=1300, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1302.30848.clone
  %convert.2864 = bf16[] convert(%all-reduce.209)
  %add.5265 = bf16[] add(%add.5264, %convert.2864)
  %dot.1240 = bf16[8,128,4096]{2,1,0} dot(%copy.3395, %copy.3365), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.210 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1240), channel_id=1301, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.69.clone
  %dynamic-slice.2477 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.210, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.375 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2477), dimensions={2,0,1}
  %multiply.6265 = bf16[512,8,128]{0,2,1} multiply(%transpose.375, %transpose.375)
  %convert.2865 = f32[512,8,128]{0,2,1} convert(%multiply.6265)
  %reduce.1101 = f32[] reduce(%convert.2865, %constant.3956), dimensions={0,1,2}, to_apply=%region_1303.30857
  %all-reduce.211 = f32[] all-reduce(%reduce.1101), channel_id=1302, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1303.30857.clone
  %convert.2866 = bf16[] convert(%all-reduce.211)
  %add.5266 = bf16[] add(%add.5265, %convert.2866)
  %dot.1241 = bf16[4096,8]{1,0} dot(%copy.3332, %copy.3351), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.212 = bf16[4096,8]{1,0} all-reduce(%dot.1241), channel_id=1303, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.70.clone
  %dynamic-slice.2479 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.212, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6266 = bf16[512,8]{0,1} multiply(%dynamic-slice.2479, %dynamic-slice.2479)
  %convert.2868 = f32[512,8]{0,1} convert(%multiply.6266)
  %reduce.1102 = f32[] reduce(%convert.2868, %constant.3956), dimensions={0,1}, to_apply=%region_1304.30866
  %all-reduce.213 = f32[] all-reduce(%reduce.1102), channel_id=1304, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1304.30866.clone
  %convert.2869 = bf16[] convert(%all-reduce.213)
  %add.5267 = bf16[] add(%add.5266, %convert.2869)
  %dot.1242 = bf16[1,4096,14336]{2,1,0} dot(%copy.3337, %copy.3347), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4243 = bf16[1,4096,14336]{2,1,0} copy(%dot.1242)
  %multiply.6267 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4243, %copy.4243)
  %convert.2870 = f32[1,4096,14336]{2,1,0} convert(%multiply.6267)
  %reduce.1103 = f32[] reduce(%convert.2870, %constant.3956), dimensions={0,1,2}, to_apply=%region_1305.30875
  %all-reduce.214 = f32[] all-reduce(%reduce.1103), channel_id=1305, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1305.30875.clone
  %convert.2871 = bf16[] convert(%all-reduce.214)
  %add.5268 = bf16[] add(%add.5267, %convert.2871)
  %dot.1243 = bf16[1,4096,14336]{2,1,0} dot(%copy.3337, %copy.3344), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4244 = bf16[1,4096,14336]{2,1,0} copy(%dot.1243)
  %multiply.6268 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4244, %copy.4244)
  %convert.2872 = f32[1,4096,14336]{2,1,0} convert(%multiply.6268)
  %reduce.1104 = f32[] reduce(%convert.2872, %constant.3956), dimensions={0,1,2}, to_apply=%region_1306.30884
  %all-reduce.215 = f32[] all-reduce(%reduce.1104), channel_id=1306, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1306.30884.clone
  %convert.2873 = bf16[] convert(%all-reduce.215)
  %add.5269 = bf16[] add(%add.5268, %convert.2873)
  %dot.1244 = bf16[1,14336,4096]{2,1,0} dot(%multiply.4129, %copy.3342), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4245 = bf16[1,14336,4096]{2,1,0} copy(%dot.1244)
  %multiply.6269 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4245, %copy.4245)
  %convert.2874 = f32[1,14336,4096]{2,1,0} convert(%multiply.6269)
  %reduce.1105 = f32[] reduce(%convert.2874, %constant.3956), dimensions={0,1,2}, to_apply=%region_1307.30893
  %all-reduce.216 = f32[] all-reduce(%reduce.1105), channel_id=1307, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1307.30893.clone
  %convert.2876 = bf16[] convert(%all-reduce.216)
  %add.5270 = bf16[] add(%add.5269, %convert.2876)
  %multiply.6270 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1784, %copy.3352)
  %reduce.1106 = bf16[4096]{0} reduce(%multiply.6270, %constant.3795), dimensions={0,1}, to_apply=%region_630.17346
  %all-reduce.217 = bf16[4096]{0} all-reduce(%reduce.1106), channel_id=1308, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_630.17346.clone
  %multiply.6271 = bf16[4096]{0} multiply(%all-reduce.217, %all-reduce.217)
  %convert.2877 = f32[4096]{0} convert(%multiply.6271)
  %reduce.1107 = f32[] reduce(%convert.2877, %constant.3956), dimensions={0}, to_apply=%region_1308.30902
  %convert.2878 = bf16[] convert(%reduce.1107)
  %add.5272 = bf16[] add(%add.5270, %convert.2878)
  %multiply.6272 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1768, %copy.3360)
  %reduce.1108 = bf16[4096]{0} reduce(%multiply.6272, %constant.3795), dimensions={0,1}, to_apply=%region_634.17457
  %all-reduce.218 = bf16[4096]{0} all-reduce(%reduce.1108), channel_id=1309, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_634.17457.clone
  %multiply.6273 = bf16[4096]{0} multiply(%all-reduce.218, %all-reduce.218)
  %convert.2879 = f32[4096]{0} convert(%multiply.6273)
  %reduce.1109 = f32[] reduce(%convert.2879, %constant.3956), dimensions={0}, to_apply=%region_1309.30911
  %convert.2880 = bf16[] convert(%reduce.1109)
  %add.5273 = bf16[] add(%add.5272, %convert.2880)
  %dot.1245 = bf16[8,128,4096]{2,1,0} dot(%concatenate.289, %copy.3325), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.219 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1245), channel_id=1310, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.71.clone
  %dynamic-slice.2481 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.219, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.376 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2481), dimensions={2,0,1}
  %multiply.6274 = bf16[512,8,128]{0,2,1} multiply(%transpose.376, %transpose.376)
  %convert.2881 = f32[512,8,128]{0,2,1} convert(%multiply.6274)
  %reduce.1110 = f32[] reduce(%convert.2881, %constant.3956), dimensions={0,1,2}, to_apply=%region_1310.30920
  %all-reduce.220 = f32[] all-reduce(%reduce.1110), channel_id=1311, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1310.30920.clone
  %convert.2882 = bf16[] convert(%all-reduce.220)
  %add.5274 = bf16[] add(%add.5273, %convert.2882)
  %dot.1246 = bf16[4096,32,128]{2,1,0} dot(%copy.3353, %copy.3330), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.221 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1246), channel_id=1312, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.72.clone
  %dynamic-slice.2483 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.221, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.377 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2483), dimensions={1,2,0}
  %multiply.6275 = bf16[32,128,512]{1,0,2} multiply(%transpose.377, %transpose.377)
  %convert.2883 = f32[32,128,512]{1,0,2} convert(%multiply.6275)
  %reduce.1111 = f32[] reduce(%convert.2883, %constant.3956), dimensions={0,1,2}, to_apply=%region_1311.30929
  %all-reduce.222 = f32[] all-reduce(%reduce.1111), channel_id=1313, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1311.30929.clone
  %convert.2884 = bf16[] convert(%all-reduce.222)
  %add.5275 = bf16[] add(%add.5274, %convert.2884)
  %dot.1247 = bf16[32,128,4096]{2,1,0} dot(%concatenate.290, %copy.3325), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.223 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1247), channel_id=1314, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.73.clone
  %dynamic-slice.2485 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.223, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.378 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2485), dimensions={2,0,1}
  %multiply.6276 = bf16[512,32,128]{0,2,1} multiply(%transpose.378, %transpose.378)
  %convert.2885 = f32[512,32,128]{0,2,1} convert(%multiply.6276)
  %reduce.1112 = f32[] reduce(%convert.2885, %constant.3956), dimensions={0,1,2}, to_apply=%region_1312.30938
  %all-reduce.224 = f32[] all-reduce(%reduce.1112), channel_id=1315, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1312.30938.clone
  %convert.2886 = bf16[] convert(%all-reduce.224)
  %add.5276 = bf16[] add(%add.5275, %convert.2886)
  %dot.1248 = bf16[8,128,4096]{2,1,0} dot(%copy.3355, %copy.3325), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.225 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1248), channel_id=1316, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.74.clone
  %dynamic-slice.2487 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.225, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.379 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2487), dimensions={2,0,1}
  %multiply.6277 = bf16[512,8,128]{0,2,1} multiply(%transpose.379, %transpose.379)
  %convert.2887 = f32[512,8,128]{0,2,1} convert(%multiply.6277)
  %reduce.1113 = f32[] reduce(%convert.2887, %constant.3956), dimensions={0,1,2}, to_apply=%region_1313.30947
  %all-reduce.226 = f32[] all-reduce(%reduce.1113), channel_id=1317, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1313.30947.clone
  %convert.2888 = bf16[] convert(%all-reduce.226)
  %add.5277 = bf16[] add(%add.5276, %convert.2888)
  %dot.1249 = bf16[4096,8]{1,0} dot(%copy.3292, %copy.3311), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.227 = bf16[4096,8]{1,0} all-reduce(%dot.1249), channel_id=1318, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.75.clone
  %dynamic-slice.2489 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.227, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6278 = bf16[512,8]{0,1} multiply(%dynamic-slice.2489, %dynamic-slice.2489)
  %convert.2889 = f32[512,8]{0,1} convert(%multiply.6278)
  %reduce.1114 = f32[] reduce(%convert.2889, %constant.3956), dimensions={0,1}, to_apply=%region_1314.30956
  %all-reduce.228 = f32[] all-reduce(%reduce.1114), channel_id=1319, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1314.30956.clone
  %convert.2890 = bf16[] convert(%all-reduce.228)
  %add.5278 = bf16[] add(%add.5277, %convert.2890)
  %dot.1250 = bf16[1,4096,14336]{2,1,0} dot(%copy.3297, %copy.3307), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4246 = bf16[1,4096,14336]{2,1,0} copy(%dot.1250)
  %multiply.6279 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4246, %copy.4246)
  %convert.2891 = f32[1,4096,14336]{2,1,0} convert(%multiply.6279)
  %reduce.1115 = f32[] reduce(%convert.2891, %constant.3956), dimensions={0,1,2}, to_apply=%region_1315.30965
  %all-reduce.229 = f32[] all-reduce(%reduce.1115), channel_id=1320, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1315.30965.clone
  %convert.2892 = bf16[] convert(%all-reduce.229)
  %add.5279 = bf16[] add(%add.5278, %convert.2892)
  %dot.1251 = bf16[1,4096,14336]{2,1,0} dot(%copy.3297, %copy.3304), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4247 = bf16[1,4096,14336]{2,1,0} copy(%dot.1251)
  %multiply.6280 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4247, %copy.4247)
  %convert.2893 = f32[1,4096,14336]{2,1,0} convert(%multiply.6280)
  %reduce.1116 = f32[] reduce(%convert.2893, %constant.3956), dimensions={0,1,2}, to_apply=%region_1316.30974
  %all-reduce.230 = f32[] all-reduce(%reduce.1116), channel_id=1321, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1316.30974.clone
  %convert.2895 = bf16[] convert(%all-reduce.230)
  %add.5280 = bf16[] add(%add.5279, %convert.2895)
  %dot.1252 = bf16[1,14336,4096]{2,1,0} dot(%multiply.4038, %copy.3302), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4248 = bf16[1,14336,4096]{2,1,0} copy(%dot.1252)
  %multiply.6281 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4248, %copy.4248)
  %convert.2896 = f32[1,14336,4096]{2,1,0} convert(%multiply.6281)
  %reduce.1117 = f32[] reduce(%convert.2896, %constant.3956), dimensions={0,1,2}, to_apply=%region_1317.30983
  %all-reduce.231 = f32[] all-reduce(%reduce.1117), channel_id=1322, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1317.30983.clone
  %convert.2897 = bf16[] convert(%all-reduce.231)
  %add.5281 = bf16[] add(%add.5280, %convert.2897)
  %multiply.6282 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1748, %copy.3312)
  %reduce.1118 = bf16[4096]{0} reduce(%multiply.6282, %constant.3795), dimensions={0,1}, to_apply=%region_605.16770
  %all-reduce.232 = bf16[4096]{0} all-reduce(%reduce.1118), channel_id=1323, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_605.16770.clone
  %multiply.6283 = bf16[4096]{0} multiply(%all-reduce.232, %all-reduce.232)
  %convert.2898 = f32[4096]{0} convert(%multiply.6283)
  %reduce.1119 = f32[] reduce(%convert.2898, %constant.3956), dimensions={0}, to_apply=%region_1318.30992
  %convert.2899 = bf16[] convert(%reduce.1119)
  %add.5282 = bf16[] add(%add.5281, %convert.2899)
  %multiply.6284 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1734, %copy.3320)
  %reduce.1120 = bf16[4096]{0} reduce(%multiply.6284, %constant.3795), dimensions={0,1}, to_apply=%region_609.16881
  %all-reduce.233 = bf16[4096]{0} all-reduce(%reduce.1120), channel_id=1324, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_609.16881.clone
  %multiply.6285 = bf16[4096]{0} multiply(%all-reduce.233, %all-reduce.233)
  %convert.2900 = f32[4096]{0} convert(%multiply.6285)
  %reduce.1121 = f32[] reduce(%convert.2900, %constant.3956), dimensions={0}, to_apply=%region_1319.31001
  %convert.2901 = bf16[] convert(%reduce.1121)
  %add.5283 = bf16[] add(%add.5282, %convert.2901)
  %dot.1253 = bf16[8,128,4096]{2,1,0} dot(%concatenate.280, %copy.3285), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.234 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1253), channel_id=1325, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.76.clone
  %dynamic-slice.2491 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.234, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.380 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2491), dimensions={2,0,1}
  %multiply.6286 = bf16[512,8,128]{0,2,1} multiply(%transpose.380, %transpose.380)
  %convert.2902 = f32[512,8,128]{0,2,1} convert(%multiply.6286)
  %reduce.1122 = f32[] reduce(%convert.2902, %constant.3956), dimensions={0,1,2}, to_apply=%region_1320.31010
  %all-reduce.235 = f32[] all-reduce(%reduce.1122), channel_id=1326, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1320.31010.clone
  %convert.2903 = bf16[] convert(%all-reduce.235)
  %add.5284 = bf16[] add(%add.5283, %convert.2903)
  %dot.1254 = bf16[4096,32,128]{2,1,0} dot(%copy.3313, %copy.3290), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.236 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1254), channel_id=1327, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.77.clone
  %dynamic-slice.2493 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.236, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.381 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2493), dimensions={1,2,0}
  %multiply.6287 = bf16[32,128,512]{1,0,2} multiply(%transpose.381, %transpose.381)
  %convert.2904 = f32[32,128,512]{1,0,2} convert(%multiply.6287)
  %reduce.1123 = f32[] reduce(%convert.2904, %constant.3956), dimensions={0,1,2}, to_apply=%region_1321.31019
  %all-reduce.237 = f32[] all-reduce(%reduce.1123), channel_id=1328, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1321.31019.clone
  %convert.2905 = bf16[] convert(%all-reduce.237)
  %add.5285 = bf16[] add(%add.5284, %convert.2905)
  %dot.1255 = bf16[32,128,4096]{2,1,0} dot(%concatenate.281, %copy.3285), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.238 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1255), channel_id=1329, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.78.clone
  %dynamic-slice.2495 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.238, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.382 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2495), dimensions={2,0,1}
  %multiply.6288 = bf16[512,32,128]{0,2,1} multiply(%transpose.382, %transpose.382)
  %convert.2906 = f32[512,32,128]{0,2,1} convert(%multiply.6288)
  %reduce.1124 = f32[] reduce(%convert.2906, %constant.3956), dimensions={0,1,2}, to_apply=%region_1322.31028
  %all-reduce.239 = f32[] all-reduce(%reduce.1124), channel_id=1330, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1322.31028.clone
  %convert.2907 = bf16[] convert(%all-reduce.239)
  %add.5286 = bf16[] add(%add.5285, %convert.2907)
  %dot.1256 = bf16[8,128,4096]{2,1,0} dot(%copy.3315, %copy.3285), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.240 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1256), channel_id=1331, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.79.clone
  %dynamic-slice.2497 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.240, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.383 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2497), dimensions={2,0,1}
  %multiply.6289 = bf16[512,8,128]{0,2,1} multiply(%transpose.383, %transpose.383)
  %convert.2908 = f32[512,8,128]{0,2,1} convert(%multiply.6289)
  %reduce.1125 = f32[] reduce(%convert.2908, %constant.3956), dimensions={0,1,2}, to_apply=%region_1323.31037
  %all-reduce.241 = f32[] all-reduce(%reduce.1125), channel_id=1332, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1323.31037.clone
  %convert.2910 = bf16[] convert(%all-reduce.241)
  %add.5287 = bf16[] add(%add.5286, %convert.2910)
  %dot.1257 = bf16[4096,8]{1,0} dot(%copy.3252, %copy.3271), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.242 = bf16[4096,8]{1,0} all-reduce(%dot.1257), channel_id=1333, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.80.clone
  %dynamic-slice.2499 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.242, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6290 = bf16[512,8]{0,1} multiply(%dynamic-slice.2499, %dynamic-slice.2499)
  %convert.2911 = f32[512,8]{0,1} convert(%multiply.6290)
  %reduce.1126 = f32[] reduce(%convert.2911, %constant.3956), dimensions={0,1}, to_apply=%region_1324.31046
  %all-reduce.243 = f32[] all-reduce(%reduce.1126), channel_id=1334, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1324.31046.clone
  %convert.2912 = bf16[] convert(%all-reduce.243)
  %add.5288 = bf16[] add(%add.5287, %convert.2912)
  %dot.1258 = bf16[1,4096,14336]{2,1,0} dot(%copy.3257, %copy.3267), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4249 = bf16[1,4096,14336]{2,1,0} copy(%dot.1258)
  %multiply.6291 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4249, %copy.4249)
  %convert.2913 = f32[1,4096,14336]{2,1,0} convert(%multiply.6291)
  %reduce.1127 = f32[] reduce(%convert.2913, %constant.3956), dimensions={0,1,2}, to_apply=%region_1325.31055
  %all-reduce.244 = f32[] all-reduce(%reduce.1127), channel_id=1335, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1325.31055.clone
  %convert.2914 = bf16[] convert(%all-reduce.244)
  %add.5289 = bf16[] add(%add.5288, %convert.2914)
  %dot.1259 = bf16[1,4096,14336]{2,1,0} dot(%copy.3257, %copy.3264), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4250 = bf16[1,4096,14336]{2,1,0} copy(%dot.1259)
  %multiply.6292 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4250, %copy.4250)
  %convert.2915 = f32[1,4096,14336]{2,1,0} convert(%multiply.6292)
  %reduce.1128 = f32[] reduce(%convert.2915, %constant.3956), dimensions={0,1,2}, to_apply=%region_1326.31064
  %all-reduce.245 = f32[] all-reduce(%reduce.1128), channel_id=1336, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1326.31064.clone
  %convert.2916 = bf16[] convert(%all-reduce.245)
  %add.5290 = bf16[] add(%add.5289, %convert.2916)
  %dot.1260 = bf16[1,14336,4096]{2,1,0} dot(%multiply.3944, %copy.3262), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4251 = bf16[1,14336,4096]{2,1,0} copy(%dot.1260)
  %multiply.6293 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4251, %copy.4251)
  %convert.2917 = f32[1,14336,4096]{2,1,0} convert(%multiply.6293)
  %reduce.1129 = f32[] reduce(%convert.2917, %constant.3956), dimensions={0,1,2}, to_apply=%region_1327.31073
  %all-reduce.246 = f32[] all-reduce(%reduce.1129), channel_id=1337, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1327.31073.clone
  %convert.2918 = bf16[] convert(%all-reduce.246)
  %add.5291 = bf16[] add(%add.5290, %convert.2918)
  %multiply.6294 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1713, %copy.3272)
  %reduce.1130 = bf16[4096]{0} reduce(%multiply.6294, %constant.3795), dimensions={0,1}, to_apply=%region_580.16194
  %all-reduce.247 = bf16[4096]{0} all-reduce(%reduce.1130), channel_id=1338, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_580.16194.clone
  %multiply.6295 = bf16[4096]{0} multiply(%all-reduce.247, %all-reduce.247)
  %convert.2919 = f32[4096]{0} convert(%multiply.6295)
  %reduce.1131 = f32[] reduce(%convert.2919, %constant.3956), dimensions={0}, to_apply=%region_1328.31082
  %convert.2920 = bf16[] convert(%reduce.1131)
  %add.5292 = bf16[] add(%add.5291, %convert.2920)
  %multiply.6296 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1698, %copy.3280)
  %reduce.1132 = bf16[4096]{0} reduce(%multiply.6296, %constant.3795), dimensions={0,1}, to_apply=%region_584.16305
  %all-reduce.248 = bf16[4096]{0} all-reduce(%reduce.1132), channel_id=1339, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_584.16305.clone
  %multiply.6297 = bf16[4096]{0} multiply(%all-reduce.248, %all-reduce.248)
  %convert.2922 = f32[4096]{0} convert(%multiply.6297)
  %reduce.1133 = f32[] reduce(%convert.2922, %constant.3956), dimensions={0}, to_apply=%region_1329.31091
  %convert.2923 = bf16[] convert(%reduce.1133)
  %add.5293 = bf16[] add(%add.5292, %convert.2923)
  %dot.1261 = bf16[8,128,4096]{2,1,0} dot(%concatenate.271, %copy.3245), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.249 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1261), channel_id=1340, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.81.clone
  %dynamic-slice.2501 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.249, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.384 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2501), dimensions={2,0,1}
  %multiply.6298 = bf16[512,8,128]{0,2,1} multiply(%transpose.384, %transpose.384)
  %convert.2924 = f32[512,8,128]{0,2,1} convert(%multiply.6298)
  %reduce.1134 = f32[] reduce(%convert.2924, %constant.3956), dimensions={0,1,2}, to_apply=%region_1330.31100
  %all-reduce.250 = f32[] all-reduce(%reduce.1134), channel_id=1341, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1330.31100.clone
  %convert.2925 = bf16[] convert(%all-reduce.250)
  %add.5294 = bf16[] add(%add.5293, %convert.2925)
  %dot.1262 = bf16[4096,32,128]{2,1,0} dot(%copy.3273, %copy.3250), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.251 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1262), channel_id=1342, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.82.clone
  %dynamic-slice.2503 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.251, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.385 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2503), dimensions={1,2,0}
  %multiply.6299 = bf16[32,128,512]{1,0,2} multiply(%transpose.385, %transpose.385)
  %convert.2926 = f32[32,128,512]{1,0,2} convert(%multiply.6299)
  %reduce.1135 = f32[] reduce(%convert.2926, %constant.3956), dimensions={0,1,2}, to_apply=%region_1331.31109
  %all-reduce.252 = f32[] all-reduce(%reduce.1135), channel_id=1343, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1331.31109.clone
  %convert.2927 = bf16[] convert(%all-reduce.252)
  %add.5295 = bf16[] add(%add.5294, %convert.2927)
  %dot.1263 = bf16[32,128,4096]{2,1,0} dot(%concatenate.272, %copy.3245), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.253 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1263), channel_id=1344, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.83.clone
  %dynamic-slice.2505 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.253, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.386 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2505), dimensions={2,0,1}
  %multiply.6300 = bf16[512,32,128]{0,2,1} multiply(%transpose.386, %transpose.386)
  %convert.2928 = f32[512,32,128]{0,2,1} convert(%multiply.6300)
  %reduce.1136 = f32[] reduce(%convert.2928, %constant.3956), dimensions={0,1,2}, to_apply=%region_1332.31118
  %all-reduce.254 = f32[] all-reduce(%reduce.1136), channel_id=1345, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1332.31118.clone
  %convert.2929 = bf16[] convert(%all-reduce.254)
  %add.5296 = bf16[] add(%add.5295, %convert.2929)
  %dot.1264 = bf16[8,128,4096]{2,1,0} dot(%copy.3275, %copy.3245), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.255 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1264), channel_id=1346, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.84.clone
  %dynamic-slice.2507 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.255, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.387 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2507), dimensions={2,0,1}
  %multiply.6301 = bf16[512,8,128]{0,2,1} multiply(%transpose.387, %transpose.387)
  %convert.2930 = f32[512,8,128]{0,2,1} convert(%multiply.6301)
  %reduce.1137 = f32[] reduce(%convert.2930, %constant.3956), dimensions={0,1,2}, to_apply=%region_1333.31127
  %all-reduce.256 = f32[] all-reduce(%reduce.1137), channel_id=1347, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1333.31127.clone
  %convert.2931 = bf16[] convert(%all-reduce.256)
  %add.5297 = bf16[] add(%add.5296, %convert.2931)
  %dot.1265 = bf16[4096,8]{1,0} dot(%copy.3212, %copy.3231), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.257 = bf16[4096,8]{1,0} all-reduce(%dot.1265), channel_id=1348, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.85.clone
  %dynamic-slice.2509 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.257, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6302 = bf16[512,8]{0,1} multiply(%dynamic-slice.2509, %dynamic-slice.2509)
  %convert.2932 = f32[512,8]{0,1} convert(%multiply.6302)
  %reduce.1138 = f32[] reduce(%convert.2932, %constant.3956), dimensions={0,1}, to_apply=%region_1334.31136
  %all-reduce.258 = f32[] all-reduce(%reduce.1138), channel_id=1349, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1334.31136.clone
  %convert.2933 = bf16[] convert(%all-reduce.258)
  %add.5298 = bf16[] add(%add.5297, %convert.2933)
  %dot.1266 = bf16[1,4096,14336]{2,1,0} dot(%copy.3217, %copy.3227), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4252 = bf16[1,4096,14336]{2,1,0} copy(%dot.1266)
  %multiply.6303 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4252, %copy.4252)
  %convert.2934 = f32[1,4096,14336]{2,1,0} convert(%multiply.6303)
  %reduce.1139 = f32[] reduce(%convert.2934, %constant.3956), dimensions={0,1,2}, to_apply=%region_1335.31145
  %all-reduce.259 = f32[] all-reduce(%reduce.1139), channel_id=1350, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1335.31145.clone
  %convert.2935 = bf16[] convert(%all-reduce.259)
  %add.5299 = bf16[] add(%add.5298, %convert.2935)
  %dot.1267 = bf16[1,4096,14336]{2,1,0} dot(%copy.3217, %copy.3224), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4253 = bf16[1,4096,14336]{2,1,0} copy(%dot.1267)
  %multiply.6304 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4253, %copy.4253)
  %convert.2936 = f32[1,4096,14336]{2,1,0} convert(%multiply.6304)
  %reduce.1140 = f32[] reduce(%convert.2936, %constant.3956), dimensions={0,1,2}, to_apply=%region_1336.31154
  %all-reduce.260 = f32[] all-reduce(%reduce.1140), channel_id=1351, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1336.31154.clone
  %convert.2937 = bf16[] convert(%all-reduce.260)
  %add.5300 = bf16[] add(%add.5299, %convert.2937)
  %dot.1268 = bf16[1,14336,4096]{2,1,0} dot(%multiply.3853, %copy.3222), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4254 = bf16[1,14336,4096]{2,1,0} copy(%dot.1268)
  %multiply.6305 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4254, %copy.4254)
  %convert.2938 = f32[1,14336,4096]{2,1,0} convert(%multiply.6305)
  %reduce.1141 = f32[] reduce(%convert.2938, %constant.3956), dimensions={0,1,2}, to_apply=%region_1337.31163
  %all-reduce.261 = f32[] all-reduce(%reduce.1141), channel_id=1352, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1337.31163.clone
  %convert.2939 = bf16[] convert(%all-reduce.261)
  %add.5301 = bf16[] add(%add.5300, %convert.2939)
  %multiply.6306 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1676, %copy.3232)
  %reduce.1142 = bf16[4096]{0} reduce(%multiply.6306, %constant.3795), dimensions={0,1}, to_apply=%region_555.15618
  %all-reduce.262 = bf16[4096]{0} all-reduce(%reduce.1142), channel_id=1353, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_555.15618.clone
  %multiply.6307 = bf16[4096]{0} multiply(%all-reduce.262, %all-reduce.262)
  %convert.2940 = f32[4096]{0} convert(%multiply.6307)
  %reduce.1143 = f32[] reduce(%convert.2940, %constant.3956), dimensions={0}, to_apply=%region_1338.31172
  %convert.2941 = bf16[] convert(%reduce.1143)
  %add.5303 = bf16[] add(%add.5301, %convert.2941)
  %multiply.6308 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1662, %copy.3240)
  %reduce.1144 = bf16[4096]{0} reduce(%multiply.6308, %constant.3795), dimensions={0,1}, to_apply=%region_559.15729
  %all-reduce.263 = bf16[4096]{0} all-reduce(%reduce.1144), channel_id=1354, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_559.15729.clone
  %multiply.6309 = bf16[4096]{0} multiply(%all-reduce.263, %all-reduce.263)
  %convert.2942 = f32[4096]{0} convert(%multiply.6309)
  %reduce.1145 = f32[] reduce(%convert.2942, %constant.3956), dimensions={0}, to_apply=%region_1339.31181
  %convert.2943 = bf16[] convert(%reduce.1145)
  %add.5304 = bf16[] add(%add.5303, %convert.2943)
  %dot.1269 = bf16[8,128,4096]{2,1,0} dot(%concatenate.262, %copy.3205), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.264 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1269), channel_id=1355, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.86.clone
  %dynamic-slice.2511 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.264, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.388 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2511), dimensions={2,0,1}
  %multiply.6310 = bf16[512,8,128]{0,2,1} multiply(%transpose.388, %transpose.388)
  %convert.2945 = f32[512,8,128]{0,2,1} convert(%multiply.6310)
  %reduce.1146 = f32[] reduce(%convert.2945, %constant.3956), dimensions={0,1,2}, to_apply=%region_1340.31190
  %all-reduce.265 = f32[] all-reduce(%reduce.1146), channel_id=1356, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1340.31190.clone
  %convert.2946 = bf16[] convert(%all-reduce.265)
  %add.5305 = bf16[] add(%add.5304, %convert.2946)
  %dot.1270 = bf16[4096,32,128]{2,1,0} dot(%copy.3233, %copy.3210), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.266 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1270), channel_id=1357, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.87.clone
  %dynamic-slice.2513 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.266, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.389 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2513), dimensions={1,2,0}
  %multiply.6311 = bf16[32,128,512]{1,0,2} multiply(%transpose.389, %transpose.389)
  %convert.2947 = f32[32,128,512]{1,0,2} convert(%multiply.6311)
  %reduce.1147 = f32[] reduce(%convert.2947, %constant.3956), dimensions={0,1,2}, to_apply=%region_1341.31199
  %all-reduce.267 = f32[] all-reduce(%reduce.1147), channel_id=1358, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1341.31199.clone
  %convert.2948 = bf16[] convert(%all-reduce.267)
  %add.5306 = bf16[] add(%add.5305, %convert.2948)
  %dot.1271 = bf16[32,128,4096]{2,1,0} dot(%concatenate.263, %copy.3205), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.268 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1271), channel_id=1359, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.88.clone
  %dynamic-slice.2515 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.268, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.390 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2515), dimensions={2,0,1}
  %multiply.6312 = bf16[512,32,128]{0,2,1} multiply(%transpose.390, %transpose.390)
  %convert.2949 = f32[512,32,128]{0,2,1} convert(%multiply.6312)
  %reduce.1148 = f32[] reduce(%convert.2949, %constant.3956), dimensions={0,1,2}, to_apply=%region_1342.31208
  %all-reduce.269 = f32[] all-reduce(%reduce.1148), channel_id=1360, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1342.31208.clone
  %convert.2950 = bf16[] convert(%all-reduce.269)
  %add.5307 = bf16[] add(%add.5306, %convert.2950)
  %dot.1272 = bf16[8,128,4096]{2,1,0} dot(%copy.3235, %copy.3205), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.270 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1272), channel_id=1361, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.89.clone
  %dynamic-slice.2517 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.270, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.391 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2517), dimensions={2,0,1}
  %multiply.6313 = bf16[512,8,128]{0,2,1} multiply(%transpose.391, %transpose.391)
  %convert.2951 = f32[512,8,128]{0,2,1} convert(%multiply.6313)
  %reduce.1149 = f32[] reduce(%convert.2951, %constant.3956), dimensions={0,1,2}, to_apply=%region_1343.31217
  %all-reduce.271 = f32[] all-reduce(%reduce.1149), channel_id=1362, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1343.31217.clone
  %convert.2952 = bf16[] convert(%all-reduce.271)
  %add.5308 = bf16[] add(%add.5307, %convert.2952)
  %dot.1273 = bf16[4096,8]{1,0} dot(%copy.3172, %copy.3191), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.272 = bf16[4096,8]{1,0} all-reduce(%dot.1273), channel_id=1363, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.90.clone
  %dynamic-slice.2519 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.272, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6314 = bf16[512,8]{0,1} multiply(%dynamic-slice.2519, %dynamic-slice.2519)
  %convert.2953 = f32[512,8]{0,1} convert(%multiply.6314)
  %reduce.1150 = f32[] reduce(%convert.2953, %constant.3956), dimensions={0,1}, to_apply=%region_1344.31226
  %all-reduce.273 = f32[] all-reduce(%reduce.1150), channel_id=1364, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1344.31226.clone
  %convert.2954 = bf16[] convert(%all-reduce.273)
  %add.5309 = bf16[] add(%add.5308, %convert.2954)
  %dot.1274 = bf16[1,4096,14336]{2,1,0} dot(%copy.3177, %copy.3187), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4255 = bf16[1,4096,14336]{2,1,0} copy(%dot.1274)
  %multiply.6315 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4255, %copy.4255)
  %convert.2955 = f32[1,4096,14336]{2,1,0} convert(%multiply.6315)
  %reduce.1151 = f32[] reduce(%convert.2955, %constant.3956), dimensions={0,1,2}, to_apply=%region_1345.31235
  %all-reduce.274 = f32[] all-reduce(%reduce.1151), channel_id=1365, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1345.31235.clone
  %convert.2956 = bf16[] convert(%all-reduce.274)
  %add.5311 = bf16[] add(%add.5309, %convert.2956)
  %dot.1275 = bf16[1,4096,14336]{2,1,0} dot(%copy.3177, %copy.3184), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4256 = bf16[1,4096,14336]{2,1,0} copy(%dot.1275)
  %multiply.6316 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4256, %copy.4256)
  %convert.2957 = f32[1,4096,14336]{2,1,0} convert(%multiply.6316)
  %reduce.1152 = f32[] reduce(%convert.2957, %constant.3956), dimensions={0,1,2}, to_apply=%region_1346.31244
  %all-reduce.275 = f32[] all-reduce(%reduce.1152), channel_id=1366, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1346.31244.clone
  %convert.2958 = bf16[] convert(%all-reduce.275)
  %add.5312 = bf16[] add(%add.5311, %convert.2958)
  %dot.1276 = bf16[1,14336,4096]{2,1,0} dot(%multiply.3765, %copy.3182), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4257 = bf16[1,14336,4096]{2,1,0} copy(%dot.1276)
  %multiply.6317 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4257, %copy.4257)
  %convert.2959 = f32[1,14336,4096]{2,1,0} convert(%multiply.6317)
  %reduce.1153 = f32[] reduce(%convert.2959, %constant.3956), dimensions={0,1,2}, to_apply=%region_1347.31253
  %all-reduce.276 = f32[] all-reduce(%reduce.1153), channel_id=1367, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1347.31253.clone
  %convert.2960 = bf16[] convert(%all-reduce.276)
  %add.5313 = bf16[] add(%add.5312, %convert.2960)
  %multiply.6318 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1640, %copy.3192)
  %reduce.1154 = bf16[4096]{0} reduce(%multiply.6318, %constant.3795), dimensions={0,1}, to_apply=%region_530.15042
  %all-reduce.277 = bf16[4096]{0} all-reduce(%reduce.1154), channel_id=1368, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_530.15042.clone
  %multiply.6319 = bf16[4096]{0} multiply(%all-reduce.277, %all-reduce.277)
  %convert.2961 = f32[4096]{0} convert(%multiply.6319)
  %reduce.1155 = f32[] reduce(%convert.2961, %constant.3956), dimensions={0}, to_apply=%region_1348.31262
  %convert.2962 = bf16[] convert(%reduce.1155)
  %add.5314 = bf16[] add(%add.5313, %convert.2962)
  %multiply.6320 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1626, %copy.3200)
  %reduce.1156 = bf16[4096]{0} reduce(%multiply.6320, %constant.3795), dimensions={0,1}, to_apply=%region_534.15153
  %all-reduce.278 = bf16[4096]{0} all-reduce(%reduce.1156), channel_id=1369, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_534.15153.clone
  %multiply.6321 = bf16[4096]{0} multiply(%all-reduce.278, %all-reduce.278)
  %convert.2963 = f32[4096]{0} convert(%multiply.6321)
  %reduce.1157 = f32[] reduce(%convert.2963, %constant.3956), dimensions={0}, to_apply=%region_1349.31271
  %convert.2964 = bf16[] convert(%reduce.1157)
  %add.5315 = bf16[] add(%add.5314, %convert.2964)
  %dot.1277 = bf16[8,128,4096]{2,1,0} dot(%concatenate.253, %copy.3165), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.279 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1277), channel_id=1370, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.91.clone
  %dynamic-slice.2521 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.279, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.392 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2521), dimensions={2,0,1}
  %multiply.6322 = bf16[512,8,128]{0,2,1} multiply(%transpose.392, %transpose.392)
  %convert.2965 = f32[512,8,128]{0,2,1} convert(%multiply.6322)
  %reduce.1158 = f32[] reduce(%convert.2965, %constant.3956), dimensions={0,1,2}, to_apply=%region_1350.31280
  %all-reduce.280 = f32[] all-reduce(%reduce.1158), channel_id=1371, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1350.31280.clone
  %convert.2966 = bf16[] convert(%all-reduce.280)
  %add.5316 = bf16[] add(%add.5315, %convert.2966)
  %dot.1278 = bf16[4096,32,128]{2,1,0} dot(%copy.3193, %copy.3170), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.281 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1278), channel_id=1372, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.92.clone
  %dynamic-slice.2523 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.281, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.393 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2523), dimensions={1,2,0}
  %multiply.6323 = bf16[32,128,512]{1,0,2} multiply(%transpose.393, %transpose.393)
  %convert.2967 = f32[32,128,512]{1,0,2} convert(%multiply.6323)
  %reduce.1159 = f32[] reduce(%convert.2967, %constant.3956), dimensions={0,1,2}, to_apply=%region_1351.31289
  %all-reduce.282 = f32[] all-reduce(%reduce.1159), channel_id=1373, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1351.31289.clone
  %convert.2968 = bf16[] convert(%all-reduce.282)
  %add.5317 = bf16[] add(%add.5316, %convert.2968)
  %dot.1279 = bf16[32,128,4096]{2,1,0} dot(%concatenate.254, %copy.3165), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.283 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1279), channel_id=1374, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.93.clone
  %dynamic-slice.2525 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.283, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.394 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2525), dimensions={2,0,1}
  %multiply.6324 = bf16[512,32,128]{0,2,1} multiply(%transpose.394, %transpose.394)
  %convert.2969 = f32[512,32,128]{0,2,1} convert(%multiply.6324)
  %reduce.1160 = f32[] reduce(%convert.2969, %constant.3956), dimensions={0,1,2}, to_apply=%region_1352.31298
  %all-reduce.284 = f32[] all-reduce(%reduce.1160), channel_id=1375, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1352.31298.clone
  %convert.2970 = bf16[] convert(%all-reduce.284)
  %add.5318 = bf16[] add(%add.5317, %convert.2970)
  %dot.1280 = bf16[8,128,4096]{2,1,0} dot(%copy.3195, %copy.3165), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.285 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1280), channel_id=1376, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.94.clone
  %dynamic-slice.2527 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.285, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.395 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2527), dimensions={2,0,1}
  %multiply.6325 = bf16[512,8,128]{0,2,1} multiply(%transpose.395, %transpose.395)
  %convert.2971 = f32[512,8,128]{0,2,1} convert(%multiply.6325)
  %reduce.1161 = f32[] reduce(%convert.2971, %constant.3956), dimensions={0,1,2}, to_apply=%region_1353.31307
  %all-reduce.286 = f32[] all-reduce(%reduce.1161), channel_id=1377, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1353.31307.clone
  %convert.2972 = bf16[] convert(%all-reduce.286)
  %add.5319 = bf16[] add(%add.5318, %convert.2972)
  %dot.1281 = bf16[4096,8]{1,0} dot(%copy.3132, %copy.3151), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.287 = bf16[4096,8]{1,0} all-reduce(%dot.1281), channel_id=1378, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.95.clone
  %dynamic-slice.2529 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.287, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6326 = bf16[512,8]{0,1} multiply(%dynamic-slice.2529, %dynamic-slice.2529)
  %convert.2973 = f32[512,8]{0,1} convert(%multiply.6326)
  %reduce.1162 = f32[] reduce(%convert.2973, %constant.3956), dimensions={0,1}, to_apply=%region_1354.31316
  %all-reduce.288 = f32[] all-reduce(%reduce.1162), channel_id=1379, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1354.31316.clone
  %convert.2974 = bf16[] convert(%all-reduce.288)
  %add.5320 = bf16[] add(%add.5319, %convert.2974)
  %dot.1282 = bf16[1,4096,14336]{2,1,0} dot(%copy.3137, %copy.3147), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4258 = bf16[1,4096,14336]{2,1,0} copy(%dot.1282)
  %multiply.6327 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4258, %copy.4258)
  %convert.2975 = f32[1,4096,14336]{2,1,0} convert(%multiply.6327)
  %reduce.1163 = f32[] reduce(%convert.2975, %constant.3956), dimensions={0,1,2}, to_apply=%region_1355.31325
  %all-reduce.289 = f32[] all-reduce(%reduce.1163), channel_id=1380, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1355.31325.clone
  %convert.2976 = bf16[] convert(%all-reduce.289)
  %add.5321 = bf16[] add(%add.5320, %convert.2976)
  %dot.1283 = bf16[1,4096,14336]{2,1,0} dot(%copy.3137, %copy.3144), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4259 = bf16[1,4096,14336]{2,1,0} copy(%dot.1283)
  %multiply.6328 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4259, %copy.4259)
  %convert.2977 = f32[1,4096,14336]{2,1,0} convert(%multiply.6328)
  %reduce.1164 = f32[] reduce(%convert.2977, %constant.3956), dimensions={0,1,2}, to_apply=%region_1356.31334
  %all-reduce.290 = f32[] all-reduce(%reduce.1164), channel_id=1381, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1356.31334.clone
  %convert.2978 = bf16[] convert(%all-reduce.290)
  %add.5322 = bf16[] add(%add.5321, %convert.2978)
  %dot.1284 = bf16[1,14336,4096]{2,1,0} dot(%multiply.3670, %copy.3142), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4260 = bf16[1,14336,4096]{2,1,0} copy(%dot.1284)
  %multiply.6329 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4260, %copy.4260)
  %convert.2979 = f32[1,14336,4096]{2,1,0} convert(%multiply.6329)
  %reduce.1165 = f32[] reduce(%convert.2979, %constant.3956), dimensions={0,1,2}, to_apply=%region_1357.31343
  %all-reduce.291 = f32[] all-reduce(%reduce.1165), channel_id=1382, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1357.31343.clone
  %convert.2980 = bf16[] convert(%all-reduce.291)
  %add.5323 = bf16[] add(%add.5322, %convert.2980)
  %multiply.6330 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1606, %copy.3152)
  %reduce.1166 = bf16[4096]{0} reduce(%multiply.6330, %constant.3795), dimensions={0,1}, to_apply=%region_505.14466
  %all-reduce.292 = bf16[4096]{0} all-reduce(%reduce.1166), channel_id=1383, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_505.14466.clone
  %multiply.6331 = bf16[4096]{0} multiply(%all-reduce.292, %all-reduce.292)
  %convert.2981 = f32[4096]{0} convert(%multiply.6331)
  %reduce.1168 = f32[] reduce(%convert.2981, %constant.3956), dimensions={0}, to_apply=%region_1358.31352
  %convert.2982 = bf16[] convert(%reduce.1168)
  %add.5324 = bf16[] add(%add.5323, %convert.2982)
  %multiply.6332 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1589, %copy.3160)
  %reduce.1169 = bf16[4096]{0} reduce(%multiply.6332, %constant.3795), dimensions={0,1}, to_apply=%region_509.14577
  %all-reduce.293 = bf16[4096]{0} all-reduce(%reduce.1169), channel_id=1384, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_509.14577.clone
  %multiply.6333 = bf16[4096]{0} multiply(%all-reduce.293, %all-reduce.293)
  %convert.2983 = f32[4096]{0} convert(%multiply.6333)
  %reduce.1170 = f32[] reduce(%convert.2983, %constant.3956), dimensions={0}, to_apply=%region_1359.31361
  %convert.2984 = bf16[] convert(%reduce.1170)
  %add.5326 = bf16[] add(%add.5324, %convert.2984)
  %dot.1285 = bf16[8,128,4096]{2,1,0} dot(%concatenate.244, %copy.3125), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.294 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1285), channel_id=1385, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.96.clone
  %dynamic-slice.2531 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.294, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.396 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2531), dimensions={2,0,1}
  %multiply.6334 = bf16[512,8,128]{0,2,1} multiply(%transpose.396, %transpose.396)
  %convert.2985 = f32[512,8,128]{0,2,1} convert(%multiply.6334)
  %reduce.1171 = f32[] reduce(%convert.2985, %constant.3956), dimensions={0,1,2}, to_apply=%region_1360.31370
  %all-reduce.295 = f32[] all-reduce(%reduce.1171), channel_id=1386, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1360.31370.clone
  %convert.2986 = bf16[] convert(%all-reduce.295)
  %add.5327 = bf16[] add(%add.5326, %convert.2986)
  %dot.1286 = bf16[4096,32,128]{2,1,0} dot(%copy.3153, %copy.3130), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.296 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1286), channel_id=1387, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.97.clone
  %dynamic-slice.2533 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.296, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.397 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2533), dimensions={1,2,0}
  %multiply.6336 = bf16[32,128,512]{1,0,2} multiply(%transpose.397, %transpose.397)
  %convert.2987 = f32[32,128,512]{1,0,2} convert(%multiply.6336)
  %reduce.1172 = f32[] reduce(%convert.2987, %constant.3956), dimensions={0,1,2}, to_apply=%region_1361.31379
  %all-reduce.297 = f32[] all-reduce(%reduce.1172), channel_id=1388, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1361.31379.clone
  %convert.2988 = bf16[] convert(%all-reduce.297)
  %add.5328 = bf16[] add(%add.5327, %convert.2988)
  %dot.1287 = bf16[32,128,4096]{2,1,0} dot(%concatenate.245, %copy.3125), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.298 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1287), channel_id=1389, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.98.clone
  %dynamic-slice.2535 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.298, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.398 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2535), dimensions={2,0,1}
  %multiply.6337 = bf16[512,32,128]{0,2,1} multiply(%transpose.398, %transpose.398)
  %convert.2989 = f32[512,32,128]{0,2,1} convert(%multiply.6337)
  %reduce.1173 = f32[] reduce(%convert.2989, %constant.3956), dimensions={0,1,2}, to_apply=%region_1362.31388
  %all-reduce.299 = f32[] all-reduce(%reduce.1173), channel_id=1390, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1362.31388.clone
  %convert.2991 = bf16[] convert(%all-reduce.299)
  %add.5329 = bf16[] add(%add.5328, %convert.2991)
  %dot.1288 = bf16[8,128,4096]{2,1,0} dot(%copy.3155, %copy.3125), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.300 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1288), channel_id=1391, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.99.clone
  %dynamic-slice.2537 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.300, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.399 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2537), dimensions={2,0,1}
  %multiply.6338 = bf16[512,8,128]{0,2,1} multiply(%transpose.399, %transpose.399)
  %convert.2992 = f32[512,8,128]{0,2,1} convert(%multiply.6338)
  %reduce.1174 = f32[] reduce(%convert.2992, %constant.3956), dimensions={0,1,2}, to_apply=%region_1363.31397
  %all-reduce.301 = f32[] all-reduce(%reduce.1174), channel_id=1392, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1363.31397.clone
  %convert.2993 = bf16[] convert(%all-reduce.301)
  %add.5331 = bf16[] add(%add.5329, %convert.2993)
  %dot.1289 = bf16[4096,8]{1,0} dot(%copy.3092, %copy.3111), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.302 = bf16[4096,8]{1,0} all-reduce(%dot.1289), channel_id=1393, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.100.clone
  %dynamic-slice.2539 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.302, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6339 = bf16[512,8]{0,1} multiply(%dynamic-slice.2539, %dynamic-slice.2539)
  %convert.2994 = f32[512,8]{0,1} convert(%multiply.6339)
  %reduce.1175 = f32[] reduce(%convert.2994, %constant.3956), dimensions={0,1}, to_apply=%region_1364.31406
  %all-reduce.303 = f32[] all-reduce(%reduce.1175), channel_id=1394, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1364.31406.clone
  %convert.2995 = bf16[] convert(%all-reduce.303)
  %add.5332 = bf16[] add(%add.5331, %convert.2995)
  %dot.1290 = bf16[1,4096,14336]{2,1,0} dot(%copy.3097, %copy.3107), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4261 = bf16[1,4096,14336]{2,1,0} copy(%dot.1290)
  %multiply.6340 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4261, %copy.4261)
  %convert.2996 = f32[1,4096,14336]{2,1,0} convert(%multiply.6340)
  %reduce.1176 = f32[] reduce(%convert.2996, %constant.3956), dimensions={0,1,2}, to_apply=%region_1365.31415
  %all-reduce.304 = f32[] all-reduce(%reduce.1176), channel_id=1395, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1365.31415.clone
  %convert.2998 = bf16[] convert(%all-reduce.304)
  %add.5333 = bf16[] add(%add.5332, %convert.2998)
  %dot.1291 = bf16[1,4096,14336]{2,1,0} dot(%copy.3097, %copy.3104), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4262 = bf16[1,4096,14336]{2,1,0} copy(%dot.1291)
  %multiply.6341 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4262, %copy.4262)
  %convert.2999 = f32[1,4096,14336]{2,1,0} convert(%multiply.6341)
  %reduce.1177 = f32[] reduce(%convert.2999, %constant.3956), dimensions={0,1,2}, to_apply=%region_1366.31424
  %all-reduce.305 = f32[] all-reduce(%reduce.1177), channel_id=1396, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1366.31424.clone
  %convert.3000 = bf16[] convert(%all-reduce.305)
  %add.5334 = bf16[] add(%add.5333, %convert.3000)
  %dot.1292 = bf16[1,14336,4096]{2,1,0} dot(%multiply.3576, %copy.3102), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4263 = bf16[1,14336,4096]{2,1,0} copy(%dot.1292)
  %multiply.6344 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4263, %copy.4263)
  %convert.3001 = f32[1,14336,4096]{2,1,0} convert(%multiply.6344)
  %reduce.1178 = f32[] reduce(%convert.3001, %constant.3956), dimensions={0,1,2}, to_apply=%region_1367.31433
  %all-reduce.306 = f32[] all-reduce(%reduce.1178), channel_id=1397, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1367.31433.clone
  %convert.3002 = bf16[] convert(%all-reduce.306)
  %add.5336 = bf16[] add(%add.5334, %convert.3002)
  %multiply.6345 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1568, %copy.3112)
  %reduce.1179 = bf16[4096]{0} reduce(%multiply.6345, %constant.3795), dimensions={0,1}, to_apply=%region_480.13890
  %all-reduce.307 = bf16[4096]{0} all-reduce(%reduce.1179), channel_id=1398, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_480.13890.clone
  %multiply.6346 = bf16[4096]{0} multiply(%all-reduce.307, %all-reduce.307)
  %convert.3003 = f32[4096]{0} convert(%multiply.6346)
  %reduce.1180 = f32[] reduce(%convert.3003, %constant.3956), dimensions={0}, to_apply=%region_1368.31442
  %convert.3004 = bf16[] convert(%reduce.1180)
  %add.5337 = bf16[] add(%add.5336, %convert.3004)
  %multiply.6347 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1552, %copy.3120)
  %reduce.1181 = bf16[4096]{0} reduce(%multiply.6347, %constant.3795), dimensions={0,1}, to_apply=%region_484.14001
  %all-reduce.308 = bf16[4096]{0} all-reduce(%reduce.1181), channel_id=1399, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_484.14001.clone
  %multiply.6348 = bf16[4096]{0} multiply(%all-reduce.308, %all-reduce.308)
  %convert.3005 = f32[4096]{0} convert(%multiply.6348)
  %reduce.1182 = f32[] reduce(%convert.3005, %constant.3956), dimensions={0}, to_apply=%region_1369.31451
  %convert.3006 = bf16[] convert(%reduce.1182)
  %add.5338 = bf16[] add(%add.5337, %convert.3006)
  %dot.1293 = bf16[8,128,4096]{2,1,0} dot(%concatenate.235, %copy.3085), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.309 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1293), channel_id=1400, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.101.clone
  %dynamic-slice.2541 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.309, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.400 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2541), dimensions={2,0,1}
  %multiply.6349 = bf16[512,8,128]{0,2,1} multiply(%transpose.400, %transpose.400)
  %convert.3007 = f32[512,8,128]{0,2,1} convert(%multiply.6349)
  %reduce.1183 = f32[] reduce(%convert.3007, %constant.3956), dimensions={0,1,2}, to_apply=%region_1370.31460
  %all-reduce.310 = f32[] all-reduce(%reduce.1183), channel_id=1401, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1370.31460.clone
  %convert.3008 = bf16[] convert(%all-reduce.310)
  %add.5339 = bf16[] add(%add.5338, %convert.3008)
  %dot.1294 = bf16[4096,32,128]{2,1,0} dot(%copy.3113, %copy.3090), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.311 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1294), channel_id=1402, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.102.clone
  %dynamic-slice.2543 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.311, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.401 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2543), dimensions={1,2,0}
  %multiply.6351 = bf16[32,128,512]{1,0,2} multiply(%transpose.401, %transpose.401)
  %convert.3010 = f32[32,128,512]{1,0,2} convert(%multiply.6351)
  %reduce.1184 = f32[] reduce(%convert.3010, %constant.3956), dimensions={0,1,2}, to_apply=%region_1371.31469
  %all-reduce.312 = f32[] all-reduce(%reduce.1184), channel_id=1403, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1371.31469.clone
  %convert.3011 = bf16[] convert(%all-reduce.312)
  %add.5340 = bf16[] add(%add.5339, %convert.3011)
  %dot.1295 = bf16[32,128,4096]{2,1,0} dot(%concatenate.236, %copy.3085), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.313 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1295), channel_id=1404, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.103.clone
  %dynamic-slice.2545 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.313, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.402 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2545), dimensions={2,0,1}
  %multiply.6352 = bf16[512,32,128]{0,2,1} multiply(%transpose.402, %transpose.402)
  %convert.3012 = f32[512,32,128]{0,2,1} convert(%multiply.6352)
  %reduce.1185 = f32[] reduce(%convert.3012, %constant.3956), dimensions={0,1,2}, to_apply=%region_1372.31478
  %all-reduce.314 = f32[] all-reduce(%reduce.1185), channel_id=1405, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1372.31478.clone
  %convert.3013 = bf16[] convert(%all-reduce.314)
  %add.5341 = bf16[] add(%add.5340, %convert.3013)
  %dot.1296 = bf16[8,128,4096]{2,1,0} dot(%copy.3115, %copy.3085), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.315 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1296), channel_id=1406, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.104.clone
  %dynamic-slice.2547 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.315, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.403 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2547), dimensions={2,0,1}
  %multiply.6353 = bf16[512,8,128]{0,2,1} multiply(%transpose.403, %transpose.403)
  %convert.3014 = f32[512,8,128]{0,2,1} convert(%multiply.6353)
  %reduce.1186 = f32[] reduce(%convert.3014, %constant.3956), dimensions={0,1,2}, to_apply=%region_1373.31487
  %all-reduce.316 = f32[] all-reduce(%reduce.1186), channel_id=1407, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1373.31487.clone
  %convert.3015 = bf16[] convert(%all-reduce.316)
  %add.5342 = bf16[] add(%add.5341, %convert.3015)
  %dot.1297 = bf16[4096,8]{1,0} dot(%copy.3052, %copy.3071), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.317 = bf16[4096,8]{1,0} all-reduce(%dot.1297), channel_id=1408, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.105.clone
  %dynamic-slice.2549 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.317, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6354 = bf16[512,8]{0,1} multiply(%dynamic-slice.2549, %dynamic-slice.2549)
  %convert.3016 = f32[512,8]{0,1} convert(%multiply.6354)
  %reduce.1187 = f32[] reduce(%convert.3016, %constant.3956), dimensions={0,1}, to_apply=%region_1374.31496
  %all-reduce.318 = f32[] all-reduce(%reduce.1187), channel_id=1409, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1374.31496.clone
  %convert.3017 = bf16[] convert(%all-reduce.318)
  %add.5343 = bf16[] add(%add.5342, %convert.3017)
  %dot.1298 = bf16[1,4096,14336]{2,1,0} dot(%copy.3057, %copy.3067), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4264 = bf16[1,4096,14336]{2,1,0} copy(%dot.1298)
  %multiply.6355 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4264, %copy.4264)
  %convert.3019 = f32[1,4096,14336]{2,1,0} convert(%multiply.6355)
  %reduce.1188 = f32[] reduce(%convert.3019, %constant.3956), dimensions={0,1,2}, to_apply=%region_1375.31505
  %all-reduce.319 = f32[] all-reduce(%reduce.1188), channel_id=1410, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1375.31505.clone
  %convert.3020 = bf16[] convert(%all-reduce.319)
  %add.5344 = bf16[] add(%add.5343, %convert.3020)
  %dot.1299 = bf16[1,4096,14336]{2,1,0} dot(%copy.3057, %copy.3064), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4265 = bf16[1,4096,14336]{2,1,0} copy(%dot.1299)
  %multiply.6356 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4265, %copy.4265)
  %convert.3021 = f32[1,4096,14336]{2,1,0} convert(%multiply.6356)
  %reduce.1189 = f32[] reduce(%convert.3021, %constant.3956), dimensions={0,1,2}, to_apply=%region_1376.31514
  %all-reduce.320 = f32[] all-reduce(%reduce.1189), channel_id=1411, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1376.31514.clone
  %convert.3022 = bf16[] convert(%all-reduce.320)
  %add.5345 = bf16[] add(%add.5344, %convert.3022)
  %dot.1300 = bf16[1,14336,4096]{2,1,0} dot(%multiply.3488, %copy.3062), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4266 = bf16[1,14336,4096]{2,1,0} copy(%dot.1300)
  %multiply.6358 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4266, %copy.4266)
  %convert.3023 = f32[1,14336,4096]{2,1,0} convert(%multiply.6358)
  %reduce.1190 = f32[] reduce(%convert.3023, %constant.3956), dimensions={0,1,2}, to_apply=%region_1377.31523
  %all-reduce.321 = f32[] all-reduce(%reduce.1190), channel_id=1412, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1377.31523.clone
  %convert.3024 = bf16[] convert(%all-reduce.321)
  %add.5346 = bf16[] add(%add.5345, %convert.3024)
  %multiply.6359 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1529, %copy.3072)
  %reduce.1191 = bf16[4096]{0} reduce(%multiply.6359, %constant.3795), dimensions={0,1}, to_apply=%region_455.13314
  %all-reduce.322 = bf16[4096]{0} all-reduce(%reduce.1191), channel_id=1413, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_455.13314.clone
  %multiply.6360 = bf16[4096]{0} multiply(%all-reduce.322, %all-reduce.322)
  %convert.3025 = f32[4096]{0} convert(%multiply.6360)
  %reduce.1192 = f32[] reduce(%convert.3025, %constant.3956), dimensions={0}, to_apply=%region_1378.31532
  %convert.3026 = bf16[] convert(%reduce.1192)
  %add.5347 = bf16[] add(%add.5346, %convert.3026)
  %multiply.6361 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1514, %copy.3080)
  %reduce.1193 = bf16[4096]{0} reduce(%multiply.6361, %constant.3795), dimensions={0,1}, to_apply=%region_459.13425
  %all-reduce.323 = bf16[4096]{0} all-reduce(%reduce.1193), channel_id=1414, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_459.13425.clone
  %multiply.6362 = bf16[4096]{0} multiply(%all-reduce.323, %all-reduce.323)
  %convert.3027 = f32[4096]{0} convert(%multiply.6362)
  %reduce.1194 = f32[] reduce(%convert.3027, %constant.3956), dimensions={0}, to_apply=%region_1379.31541
  %convert.3028 = bf16[] convert(%reduce.1194)
  %add.5348 = bf16[] add(%add.5347, %convert.3028)
  %dot.1301 = bf16[8,128,4096]{2,1,0} dot(%concatenate.226, %copy.3045), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.324 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1301), channel_id=1415, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.106.clone
  %dynamic-slice.2551 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.324, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.404 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2551), dimensions={2,0,1}
  %multiply.6363 = bf16[512,8,128]{0,2,1} multiply(%transpose.404, %transpose.404)
  %convert.3029 = f32[512,8,128]{0,2,1} convert(%multiply.6363)
  %reduce.1195 = f32[] reduce(%convert.3029, %constant.3956), dimensions={0,1,2}, to_apply=%region_1380.31550
  %all-reduce.325 = f32[] all-reduce(%reduce.1195), channel_id=1416, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1380.31550.clone
  %convert.3030 = bf16[] convert(%all-reduce.325)
  %add.5349 = bf16[] add(%add.5348, %convert.3030)
  %dot.1302 = bf16[4096,32,128]{2,1,0} dot(%copy.3073, %copy.3050), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.326 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1302), channel_id=1417, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.107.clone
  %dynamic-slice.2553 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.326, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.405 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2553), dimensions={1,2,0}
  %multiply.6364 = bf16[32,128,512]{1,0,2} multiply(%transpose.405, %transpose.405)
  %convert.3031 = f32[32,128,512]{1,0,2} convert(%multiply.6364)
  %reduce.1196 = f32[] reduce(%convert.3031, %constant.3956), dimensions={0,1,2}, to_apply=%region_1381.31559
  %all-reduce.327 = f32[] all-reduce(%reduce.1196), channel_id=1418, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1381.31559.clone
  %convert.3032 = bf16[] convert(%all-reduce.327)
  %add.5350 = bf16[] add(%add.5349, %convert.3032)
  %dot.1303 = bf16[32,128,4096]{2,1,0} dot(%concatenate.227, %copy.3045), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.328 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1303), channel_id=1419, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.108.clone
  %dynamic-slice.2555 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.328, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.406 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2555), dimensions={2,0,1}
  %multiply.6365 = bf16[512,32,128]{0,2,1} multiply(%transpose.406, %transpose.406)
  %convert.3033 = f32[512,32,128]{0,2,1} convert(%multiply.6365)
  %reduce.1197 = f32[] reduce(%convert.3033, %constant.3956), dimensions={0,1,2}, to_apply=%region_1382.31568
  %all-reduce.329 = f32[] all-reduce(%reduce.1197), channel_id=1420, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1382.31568.clone
  %convert.3034 = bf16[] convert(%all-reduce.329)
  %add.5351 = bf16[] add(%add.5350, %convert.3034)
  %dot.1304 = bf16[8,128,4096]{2,1,0} dot(%copy.3075, %copy.3045), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.330 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1304), channel_id=1421, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.109.clone
  %dynamic-slice.2557 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.330, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.407 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2557), dimensions={2,0,1}
  %multiply.6366 = bf16[512,8,128]{0,2,1} multiply(%transpose.407, %transpose.407)
  %convert.3035 = f32[512,8,128]{0,2,1} convert(%multiply.6366)
  %reduce.1198 = f32[] reduce(%convert.3035, %constant.3956), dimensions={0,1,2}, to_apply=%region_1383.31577
  %all-reduce.331 = f32[] all-reduce(%reduce.1198), channel_id=1422, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1383.31577.clone
  %convert.3036 = bf16[] convert(%all-reduce.331)
  %add.5352 = bf16[] add(%add.5351, %convert.3036)
  %dot.1305 = bf16[4096,8]{1,0} dot(%copy.3012, %copy.3031), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.332 = bf16[4096,8]{1,0} all-reduce(%dot.1305), channel_id=1423, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.110.clone
  %dynamic-slice.2559 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.332, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6367 = bf16[512,8]{0,1} multiply(%dynamic-slice.2559, %dynamic-slice.2559)
  %convert.3037 = f32[512,8]{0,1} convert(%multiply.6367)
  %reduce.1199 = f32[] reduce(%convert.3037, %constant.3956), dimensions={0,1}, to_apply=%region_1384.31586
  %all-reduce.333 = f32[] all-reduce(%reduce.1199), channel_id=1424, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1384.31586.clone
  %convert.3039 = bf16[] convert(%all-reduce.333)
  %add.5353 = bf16[] add(%add.5352, %convert.3039)
  %dot.1306 = bf16[1,4096,14336]{2,1,0} dot(%copy.3017, %copy.3027), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4267 = bf16[1,4096,14336]{2,1,0} copy(%dot.1306)
  %multiply.6368 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4267, %copy.4267)
  %convert.3040 = f32[1,4096,14336]{2,1,0} convert(%multiply.6368)
  %reduce.1200 = f32[] reduce(%convert.3040, %constant.3956), dimensions={0,1,2}, to_apply=%region_1385.31595
  %all-reduce.334 = f32[] all-reduce(%reduce.1200), channel_id=1425, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1385.31595.clone
  %convert.3041 = bf16[] convert(%all-reduce.334)
  %add.5354 = bf16[] add(%add.5353, %convert.3041)
  %dot.1307 = bf16[1,4096,14336]{2,1,0} dot(%copy.3017, %copy.3024), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4268 = bf16[1,4096,14336]{2,1,0} copy(%dot.1307)
  %multiply.6369 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4268, %copy.4268)
  %convert.3042 = f32[1,4096,14336]{2,1,0} convert(%multiply.6369)
  %reduce.1201 = f32[] reduce(%convert.3042, %constant.3956), dimensions={0,1,2}, to_apply=%region_1386.31604
  %all-reduce.335 = f32[] all-reduce(%reduce.1201), channel_id=1426, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1386.31604.clone
  %convert.3043 = bf16[] convert(%all-reduce.335)
  %add.5355 = bf16[] add(%add.5354, %convert.3043)
  %dot.1308 = bf16[1,14336,4096]{2,1,0} dot(%multiply.3395, %copy.3022), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4269 = bf16[1,14336,4096]{2,1,0} copy(%dot.1308)
  %multiply.6370 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4269, %copy.4269)
  %convert.3044 = f32[1,14336,4096]{2,1,0} convert(%multiply.6370)
  %reduce.1202 = f32[] reduce(%convert.3044, %constant.3956), dimensions={0,1,2}, to_apply=%region_1387.31613
  %all-reduce.336 = f32[] all-reduce(%reduce.1202), channel_id=1427, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1387.31613.clone
  %convert.3045 = bf16[] convert(%all-reduce.336)
  %add.5356 = bf16[] add(%add.5355, %convert.3045)
  %multiply.6371 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1494, %copy.3032)
  %reduce.1203 = bf16[4096]{0} reduce(%multiply.6371, %constant.3795), dimensions={0,1}, to_apply=%region_430.12738
  %all-reduce.337 = bf16[4096]{0} all-reduce(%reduce.1203), channel_id=1428, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_430.12738.clone
  %multiply.6372 = bf16[4096]{0} multiply(%all-reduce.337, %all-reduce.337)
  %convert.3046 = f32[4096]{0} convert(%multiply.6372)
  %reduce.1204 = f32[] reduce(%convert.3046, %constant.3956), dimensions={0}, to_apply=%region_1388.31622
  %convert.3047 = bf16[] convert(%reduce.1204)
  %add.5357 = bf16[] add(%add.5356, %convert.3047)
  %multiply.6374 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1478, %copy.3040)
  %reduce.1205 = bf16[4096]{0} reduce(%multiply.6374, %constant.3795), dimensions={0,1}, to_apply=%region_434.12849
  %all-reduce.338 = bf16[4096]{0} all-reduce(%reduce.1205), channel_id=1429, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_434.12849.clone
  %multiply.6375 = bf16[4096]{0} multiply(%all-reduce.338, %all-reduce.338)
  %convert.3048 = f32[4096]{0} convert(%multiply.6375)
  %reduce.1206 = f32[] reduce(%convert.3048, %constant.3956), dimensions={0}, to_apply=%region_1389.31631
  %convert.3049 = bf16[] convert(%reduce.1206)
  %add.5358 = bf16[] add(%add.5357, %convert.3049)
  %dot.1309 = bf16[8,128,4096]{2,1,0} dot(%concatenate.217, %copy.3005), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.339 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1309), channel_id=1430, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.111.clone
  %dynamic-slice.2561 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.339, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.408 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2561), dimensions={2,0,1}
  %multiply.6376 = bf16[512,8,128]{0,2,1} multiply(%transpose.408, %transpose.408)
  %convert.3050 = f32[512,8,128]{0,2,1} convert(%multiply.6376)
  %reduce.1207 = f32[] reduce(%convert.3050, %constant.3956), dimensions={0,1,2}, to_apply=%region_1390.31640
  %all-reduce.340 = f32[] all-reduce(%reduce.1207), channel_id=1431, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1390.31640.clone
  %convert.3051 = bf16[] convert(%all-reduce.340)
  %add.5359 = bf16[] add(%add.5358, %convert.3051)
  %dot.1310 = bf16[4096,32,128]{2,1,0} dot(%copy.3033, %copy.3010), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.341 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1310), channel_id=1432, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.112.clone
  %dynamic-slice.2563 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.341, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.409 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2563), dimensions={1,2,0}
  %multiply.6377 = bf16[32,128,512]{1,0,2} multiply(%transpose.409, %transpose.409)
  %convert.3052 = f32[32,128,512]{1,0,2} convert(%multiply.6377)
  %reduce.1208 = f32[] reduce(%convert.3052, %constant.3956), dimensions={0,1,2}, to_apply=%region_1391.31649
  %all-reduce.342 = f32[] all-reduce(%reduce.1208), channel_id=1433, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1391.31649.clone
  %convert.3054 = bf16[] convert(%all-reduce.342)
  %add.5360 = bf16[] add(%add.5359, %convert.3054)
  %dot.1311 = bf16[32,128,4096]{2,1,0} dot(%concatenate.218, %copy.3005), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.343 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1311), channel_id=1434, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.113.clone
  %dynamic-slice.2565 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.343, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.410 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2565), dimensions={2,0,1}
  %multiply.6378 = bf16[512,32,128]{0,2,1} multiply(%transpose.410, %transpose.410)
  %convert.3055 = f32[512,32,128]{0,2,1} convert(%multiply.6378)
  %reduce.1209 = f32[] reduce(%convert.3055, %constant.3956), dimensions={0,1,2}, to_apply=%region_1392.31658
  %all-reduce.344 = f32[] all-reduce(%reduce.1209), channel_id=1435, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1392.31658.clone
  %convert.3056 = bf16[] convert(%all-reduce.344)
  %add.5361 = bf16[] add(%add.5360, %convert.3056)
  %dot.1312 = bf16[8,128,4096]{2,1,0} dot(%copy.3035, %copy.3005), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.345 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1312), channel_id=1436, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.114.clone
  %dynamic-slice.2567 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.345, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.411 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2567), dimensions={2,0,1}
  %multiply.6379 = bf16[512,8,128]{0,2,1} multiply(%transpose.411, %transpose.411)
  %convert.3057 = f32[512,8,128]{0,2,1} convert(%multiply.6379)
  %reduce.1210 = f32[] reduce(%convert.3057, %constant.3956), dimensions={0,1,2}, to_apply=%region_1393.31667
  %all-reduce.346 = f32[] all-reduce(%reduce.1210), channel_id=1437, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1393.31667.clone
  %convert.3058 = bf16[] convert(%all-reduce.346)
  %add.5362 = bf16[] add(%add.5361, %convert.3058)
  %dot.1313 = bf16[4096,8]{1,0} dot(%copy.4052, %copy.4071), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.347 = bf16[4096,8]{1,0} all-reduce(%dot.1313), channel_id=1438, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.115.clone
  %dynamic-slice.2569 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.347, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6380 = bf16[512,8]{0,1} multiply(%dynamic-slice.2569, %dynamic-slice.2569)
  %convert.3059 = f32[512,8]{0,1} convert(%multiply.6380)
  %reduce.1211 = f32[] reduce(%convert.3059, %constant.3956), dimensions={0,1}, to_apply=%region_1394.31676
  %all-reduce.348 = f32[] all-reduce(%reduce.1211), channel_id=1439, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1394.31676.clone
  %convert.3060 = bf16[] convert(%all-reduce.348)
  %add.5363 = bf16[] add(%add.5362, %convert.3060)
  %dot.1314 = bf16[1,4096,14336]{2,1,0} dot(%copy.4057, %copy.4067), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4270 = bf16[1,4096,14336]{2,1,0} copy(%dot.1314)
  %multiply.6381 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4270, %copy.4270)
  %convert.3061 = f32[1,4096,14336]{2,1,0} convert(%multiply.6381)
  %reduce.1212 = f32[] reduce(%convert.3061, %constant.3956), dimensions={0,1,2}, to_apply=%region_1395.31685
  %all-reduce.349 = f32[] all-reduce(%reduce.1212), channel_id=1440, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1395.31685.clone
  %convert.3062 = bf16[] convert(%all-reduce.349)
  %add.5364 = bf16[] add(%add.5363, %convert.3062)
  %dot.1315 = bf16[1,4096,14336]{2,1,0} dot(%copy.4057, %copy.4064), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4271 = bf16[1,4096,14336]{2,1,0} copy(%dot.1315)
  %multiply.6382 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4271, %copy.4271)
  %convert.3063 = f32[1,4096,14336]{2,1,0} convert(%multiply.6382)
  %reduce.1213 = f32[] reduce(%convert.3063, %constant.3956), dimensions={0,1,2}, to_apply=%region_1396.31694
  %all-reduce.350 = f32[] all-reduce(%reduce.1213), channel_id=1441, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1396.31694.clone
  %convert.3064 = bf16[] convert(%all-reduce.350)
  %add.5365 = bf16[] add(%add.5364, %convert.3064)
  %dot.1316 = bf16[1,14336,4096]{2,1,0} dot(%multiply.5777, %copy.4062), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4272 = bf16[1,14336,4096]{2,1,0} copy(%dot.1316)
  %multiply.6384 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4272, %copy.4272)
  %convert.3065 = f32[1,14336,4096]{2,1,0} convert(%multiply.6384)
  %reduce.1214 = f32[] reduce(%convert.3065, %constant.3956), dimensions={0,1,2}, to_apply=%region_1397.31703
  %all-reduce.351 = f32[] all-reduce(%reduce.1214), channel_id=1442, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1397.31703.clone
  %convert.3066 = bf16[] convert(%all-reduce.351)
  %add.5366 = bf16[] add(%add.5365, %convert.3066)
  %multiply.6385 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2439, %copy.4072)
  %reduce.1215 = bf16[4096]{0} reduce(%multiply.6385, %constant.3795), dimensions={0,1}, to_apply=%region_1080.27714
  %all-reduce.352 = bf16[4096]{0} all-reduce(%reduce.1215), channel_id=1443, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1080.27714.clone
  %multiply.6386 = bf16[4096]{0} multiply(%all-reduce.352, %all-reduce.352)
  %convert.3067 = f32[4096]{0} convert(%multiply.6386)
  %reduce.1216 = f32[] reduce(%convert.3067, %constant.3956), dimensions={0}, to_apply=%region_1398.31712
  %convert.3069 = bf16[] convert(%reduce.1216)
  %add.5367 = bf16[] add(%add.5366, %convert.3069)
  %multiply.6387 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2424, %copy.4080)
  %reduce.1217 = bf16[4096]{0} reduce(%multiply.6387, %constant.3795), dimensions={0,1}, to_apply=%region_1084.27825
  %all-reduce.353 = bf16[4096]{0} all-reduce(%reduce.1217), channel_id=1444, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1084.27825.clone
  %multiply.6388 = bf16[4096]{0} multiply(%all-reduce.353, %all-reduce.353)
  %convert.3070 = f32[4096]{0} convert(%multiply.6388)
  %reduce.1218 = f32[] reduce(%convert.3070, %constant.3956), dimensions={0}, to_apply=%region_1399.31721
  %convert.3072 = bf16[] convert(%reduce.1218)
  %add.5369 = bf16[] add(%add.5367, %convert.3072)
  %dot.1317 = bf16[8,128,4096]{2,1,0} dot(%concatenate.451, %copy.4045), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.354 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1317), channel_id=1445, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.116.clone
  %dynamic-slice.2571 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.354, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.412 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2571), dimensions={2,0,1}
  %multiply.6389 = bf16[512,8,128]{0,2,1} multiply(%transpose.412, %transpose.412)
  %convert.3073 = f32[512,8,128]{0,2,1} convert(%multiply.6389)
  %reduce.1219 = f32[] reduce(%convert.3073, %constant.3956), dimensions={0,1,2}, to_apply=%region_1400.31730
  %all-reduce.355 = f32[] all-reduce(%reduce.1219), channel_id=1446, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1400.31730.clone
  %convert.3074 = bf16[] convert(%all-reduce.355)
  %add.5370 = bf16[] add(%add.5369, %convert.3074)
  %dot.1318 = bf16[4096,32,128]{2,1,0} dot(%copy.4073, %copy.4050), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.356 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1318), channel_id=1447, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.117.clone
  %dynamic-slice.2573 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.356, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.413 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2573), dimensions={1,2,0}
  %multiply.6390 = bf16[32,128,512]{1,0,2} multiply(%transpose.413, %transpose.413)
  %convert.3075 = f32[32,128,512]{1,0,2} convert(%multiply.6390)
  %reduce.1220 = f32[] reduce(%convert.3075, %constant.3956), dimensions={0,1,2}, to_apply=%region_1401.31739
  %all-reduce.357 = f32[] all-reduce(%reduce.1220), channel_id=1448, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1401.31739.clone
  %convert.3076 = bf16[] convert(%all-reduce.357)
  %add.5371 = bf16[] add(%add.5370, %convert.3076)
  %dot.1319 = bf16[32,128,4096]{2,1,0} dot(%concatenate.452, %copy.4045), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.358 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1319), channel_id=1449, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.118.clone
  %dynamic-slice.2575 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.358, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.414 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2575), dimensions={2,0,1}
  %multiply.6391 = bf16[512,32,128]{0,2,1} multiply(%transpose.414, %transpose.414)
  %convert.3077 = f32[512,32,128]{0,2,1} convert(%multiply.6391)
  %reduce.1221 = f32[] reduce(%convert.3077, %constant.3956), dimensions={0,1,2}, to_apply=%region_1402.31748
  %all-reduce.359 = f32[] all-reduce(%reduce.1221), channel_id=1450, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1402.31748.clone
  %convert.3078 = bf16[] convert(%all-reduce.359)
  %add.5372 = bf16[] add(%add.5371, %convert.3078)
  %dot.1320 = bf16[8,128,4096]{2,1,0} dot(%copy.4075, %copy.4045), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.360 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1320), channel_id=1451, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.119.clone
  %dynamic-slice.2577 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.360, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.415 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2577), dimensions={2,0,1}
  %multiply.6392 = bf16[512,8,128]{0,2,1} multiply(%transpose.415, %transpose.415)
  %convert.3079 = f32[512,8,128]{0,2,1} convert(%multiply.6392)
  %reduce.1222 = f32[] reduce(%convert.3079, %constant.3956), dimensions={0,1,2}, to_apply=%region_1403.31757
  %all-reduce.361 = f32[] all-reduce(%reduce.1222), channel_id=1452, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1403.31757.clone
  %convert.3080 = bf16[] convert(%all-reduce.361)
  %add.5373 = bf16[] add(%add.5372, %convert.3080)
  %dot.1321 = bf16[4096,8]{1,0} dot(%copy.2972, %copy.2991), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.362 = bf16[4096,8]{1,0} all-reduce(%dot.1321), channel_id=1453, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.120.clone
  %dynamic-slice.2579 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.362, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6393 = bf16[512,8]{0,1} multiply(%dynamic-slice.2579, %dynamic-slice.2579)
  %convert.3082 = f32[512,8]{0,1} convert(%multiply.6393)
  %reduce.1223 = f32[] reduce(%convert.3082, %constant.3956), dimensions={0,1}, to_apply=%region_1404.31766
  %all-reduce.363 = f32[] all-reduce(%reduce.1223), channel_id=1454, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1404.31766.clone
  %convert.3084 = bf16[] convert(%all-reduce.363)
  %add.5374 = bf16[] add(%add.5373, %convert.3084)
  %dot.1322 = bf16[1,4096,14336]{2,1,0} dot(%copy.2977, %copy.2987), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4273 = bf16[1,4096,14336]{2,1,0} copy(%dot.1322)
  %multiply.6394 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4273, %copy.4273)
  %convert.3085 = f32[1,4096,14336]{2,1,0} convert(%multiply.6394)
  %reduce.1224 = f32[] reduce(%convert.3085, %constant.3956), dimensions={0,1,2}, to_apply=%region_1405.31775
  %all-reduce.364 = f32[] all-reduce(%reduce.1224), channel_id=1455, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1405.31775.clone
  %convert.3086 = bf16[] convert(%all-reduce.364)
  %add.5375 = bf16[] add(%add.5374, %convert.3086)
  %dot.1323 = bf16[1,4096,14336]{2,1,0} dot(%copy.2977, %copy.2984), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4274 = bf16[1,4096,14336]{2,1,0} copy(%dot.1323)
  %multiply.6395 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4274, %copy.4274)
  %convert.3087 = f32[1,4096,14336]{2,1,0} convert(%multiply.6395)
  %reduce.1225 = f32[] reduce(%convert.3087, %constant.3956), dimensions={0,1,2}, to_apply=%region_1406.31784
  %all-reduce.365 = f32[] all-reduce(%reduce.1225), channel_id=1456, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1406.31784.clone
  %convert.3088 = bf16[] convert(%all-reduce.365)
  %add.5376 = bf16[] add(%add.5375, %convert.3088)
  %dot.1324 = bf16[1,14336,4096]{2,1,0} dot(%multiply.3300, %copy.2982), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4275 = bf16[1,14336,4096]{2,1,0} copy(%dot.1324)
  %multiply.6397 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4275, %copy.4275)
  %convert.3089 = f32[1,14336,4096]{2,1,0} convert(%multiply.6397)
  %reduce.1226 = f32[] reduce(%convert.3089, %constant.3956), dimensions={0,1,2}, to_apply=%region_1407.31793
  %all-reduce.366 = f32[] all-reduce(%reduce.1226), channel_id=1457, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1407.31793.clone
  %convert.3090 = bf16[] convert(%all-reduce.366)
  %add.5377 = bf16[] add(%add.5376, %convert.3090)
  %multiply.6398 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1457, %copy.2992)
  %reduce.1227 = bf16[4096]{0} reduce(%multiply.6398, %constant.3795), dimensions={0,1}, to_apply=%region_405.12162
  %all-reduce.367 = bf16[4096]{0} all-reduce(%reduce.1227), channel_id=1458, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_405.12162.clone
  %multiply.6399 = bf16[4096]{0} multiply(%all-reduce.367, %all-reduce.367)
  %convert.3091 = f32[4096]{0} convert(%multiply.6399)
  %reduce.1228 = f32[] reduce(%convert.3091, %constant.3956), dimensions={0}, to_apply=%region_1408.31802
  %convert.3092 = bf16[] convert(%reduce.1228)
  %add.5378 = bf16[] add(%add.5377, %convert.3092)
  %multiply.6400 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1441, %copy.3000)
  %reduce.1229 = bf16[4096]{0} reduce(%multiply.6400, %constant.3795), dimensions={0,1}, to_apply=%region_409.12273
  %all-reduce.368 = bf16[4096]{0} all-reduce(%reduce.1229), channel_id=1459, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_409.12273.clone
  %multiply.6401 = bf16[4096]{0} multiply(%all-reduce.368, %all-reduce.368)
  %convert.3093 = f32[4096]{0} convert(%multiply.6401)
  %reduce.1230 = f32[] reduce(%convert.3093, %constant.3956), dimensions={0}, to_apply=%region_1409.31811
  %convert.3094 = bf16[] convert(%reduce.1230)
  %add.5379 = bf16[] add(%add.5378, %convert.3094)
  %dot.1326 = bf16[8,128,4096]{2,1,0} dot(%concatenate.208, %copy.2965), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.369 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1326), channel_id=1460, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.121.clone
  %dynamic-slice.2581 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.369, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.416 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2581), dimensions={2,0,1}
  %multiply.6403 = bf16[512,8,128]{0,2,1} multiply(%transpose.416, %transpose.416)
  %convert.3095 = f32[512,8,128]{0,2,1} convert(%multiply.6403)
  %reduce.1231 = f32[] reduce(%convert.3095, %constant.3956), dimensions={0,1,2}, to_apply=%region_1410.31820
  %all-reduce.370 = f32[] all-reduce(%reduce.1231), channel_id=1461, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1410.31820.clone
  %convert.3096 = bf16[] convert(%all-reduce.370)
  %add.5380 = bf16[] add(%add.5379, %convert.3096)
  %dot.1327 = bf16[4096,32,128]{2,1,0} dot(%copy.2993, %copy.2970), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.371 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1327), channel_id=1462, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.122.clone
  %dynamic-slice.2583 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.371, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.417 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2583), dimensions={1,2,0}
  %multiply.6404 = bf16[32,128,512]{1,0,2} multiply(%transpose.417, %transpose.417)
  %convert.3097 = f32[32,128,512]{1,0,2} convert(%multiply.6404)
  %reduce.1232 = f32[] reduce(%convert.3097, %constant.3956), dimensions={0,1,2}, to_apply=%region_1411.31829
  %all-reduce.372 = f32[] all-reduce(%reduce.1232), channel_id=1463, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1411.31829.clone
  %convert.3098 = bf16[] convert(%all-reduce.372)
  %add.5381 = bf16[] add(%add.5380, %convert.3098)
  %dot.1328 = bf16[32,128,4096]{2,1,0} dot(%concatenate.209, %copy.2965), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.373 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1328), channel_id=1464, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.123.clone
  %dynamic-slice.2585 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.373, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.418 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2585), dimensions={2,0,1}
  %multiply.6405 = bf16[512,32,128]{0,2,1} multiply(%transpose.418, %transpose.418)
  %convert.3099 = f32[512,32,128]{0,2,1} convert(%multiply.6405)
  %reduce.1233 = f32[] reduce(%convert.3099, %constant.3956), dimensions={0,1,2}, to_apply=%region_1412.31838
  %all-reduce.374 = f32[] all-reduce(%reduce.1233), channel_id=1465, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1412.31838.clone
  %convert.3100 = bf16[] convert(%all-reduce.374)
  %add.5383 = bf16[] add(%add.5381, %convert.3100)
  %dot.1329 = bf16[8,128,4096]{2,1,0} dot(%copy.2995, %copy.2965), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.375 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1329), channel_id=1466, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.124.clone
  %dynamic-slice.2587 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.375, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.419 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2587), dimensions={2,0,1}
  %multiply.6406 = bf16[512,8,128]{0,2,1} multiply(%transpose.419, %transpose.419)
  %convert.3101 = f32[512,8,128]{0,2,1} convert(%multiply.6406)
  %reduce.1234 = f32[] reduce(%convert.3101, %constant.3956), dimensions={0,1,2}, to_apply=%region_1413.31847
  %all-reduce.376 = f32[] all-reduce(%reduce.1234), channel_id=1467, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1413.31847.clone
  %convert.3102 = bf16[] convert(%all-reduce.376)
  %add.5384 = bf16[] add(%add.5383, %convert.3102)
  %dot.1330 = bf16[4096,8]{1,0} dot(%copy.2932, %copy.2951), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.377 = bf16[4096,8]{1,0} all-reduce(%dot.1330), channel_id=1468, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.125.clone
  %dynamic-slice.2589 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.377, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6407 = bf16[512,8]{0,1} multiply(%dynamic-slice.2589, %dynamic-slice.2589)
  %convert.3103 = f32[512,8]{0,1} convert(%multiply.6407)
  %reduce.1235 = f32[] reduce(%convert.3103, %constant.3956), dimensions={0,1}, to_apply=%region_1414.31856
  %all-reduce.378 = f32[] all-reduce(%reduce.1235), channel_id=1469, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1414.31856.clone
  %convert.3104 = bf16[] convert(%all-reduce.378)
  %add.5386 = bf16[] add(%add.5384, %convert.3104)
  %dot.1331 = bf16[1,4096,14336]{2,1,0} dot(%copy.2937, %copy.2947), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4276 = bf16[1,4096,14336]{2,1,0} copy(%dot.1331)
  %multiply.6408 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4276, %copy.4276)
  %convert.3105 = f32[1,4096,14336]{2,1,0} convert(%multiply.6408)
  %reduce.1236 = f32[] reduce(%convert.3105, %constant.3956), dimensions={0,1,2}, to_apply=%region_1415.31865
  %all-reduce.379 = f32[] all-reduce(%reduce.1236), channel_id=1470, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1415.31865.clone
  %convert.3106 = bf16[] convert(%all-reduce.379)
  %add.5387 = bf16[] add(%add.5386, %convert.3106)
  %dot.1332 = bf16[1,4096,14336]{2,1,0} dot(%copy.2937, %copy.2944), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4277 = bf16[1,4096,14336]{2,1,0} copy(%dot.1332)
  %multiply.6409 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4277, %copy.4277)
  %convert.3107 = f32[1,4096,14336]{2,1,0} convert(%multiply.6409)
  %reduce.1237 = f32[] reduce(%convert.3107, %constant.3956), dimensions={0,1,2}, to_apply=%region_1416.31874
  %all-reduce.380 = f32[] all-reduce(%reduce.1237), channel_id=1471, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1416.31874.clone
  %convert.3109 = bf16[] convert(%all-reduce.380)
  %add.5389 = bf16[] add(%add.5387, %convert.3109)
  %dot.1333 = bf16[1,14336,4096]{2,1,0} dot(%multiply.3213, %copy.2942), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4278 = bf16[1,14336,4096]{2,1,0} copy(%dot.1333)
  %multiply.6410 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4278, %copy.4278)
  %convert.3110 = f32[1,14336,4096]{2,1,0} convert(%multiply.6410)
  %reduce.1238 = f32[] reduce(%convert.3110, %constant.3956), dimensions={0,1,2}, to_apply=%region_1417.31883
  %all-reduce.381 = f32[] all-reduce(%reduce.1238), channel_id=1472, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1417.31883.clone
  %convert.3112 = bf16[] convert(%all-reduce.381)
  %add.5390 = bf16[] add(%add.5389, %convert.3112)
  %multiply.6412 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1420, %copy.2952)
  %reduce.1239 = bf16[4096]{0} reduce(%multiply.6412, %constant.3795), dimensions={0,1}, to_apply=%region_380.11586
  %all-reduce.382 = bf16[4096]{0} all-reduce(%reduce.1239), channel_id=1473, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_380.11586.clone
  %multiply.6413 = bf16[4096]{0} multiply(%all-reduce.382, %all-reduce.382)
  %convert.3113 = f32[4096]{0} convert(%multiply.6413)
  %reduce.1240 = f32[] reduce(%convert.3113, %constant.3956), dimensions={0}, to_apply=%region_1418.31892
  %convert.3114 = bf16[] convert(%reduce.1240)
  %add.5391 = bf16[] add(%add.5390, %convert.3114)
  %multiply.6414 = bf16[1,4096,4096]{2,1,0} multiply(%convert.1406, %copy.2960)
  %reduce.1241 = bf16[4096]{0} reduce(%multiply.6414, %constant.3795), dimensions={0,1}, to_apply=%region_384.11697
  %all-reduce.383 = bf16[4096]{0} all-reduce(%reduce.1241), channel_id=1474, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_384.11697.clone
  %multiply.6415 = bf16[4096]{0} multiply(%all-reduce.383, %all-reduce.383)
  %convert.3115 = f32[4096]{0} convert(%multiply.6415)
  %reduce.1242 = f32[] reduce(%convert.3115, %constant.3956), dimensions={0}, to_apply=%region_1419.31901
  %convert.3116 = bf16[] convert(%reduce.1242)
  %add.5392 = bf16[] add(%add.5391, %convert.3116)
  %dot.1334 = bf16[8,128,4096]{2,1,0} dot(%concatenate.199, %copy.2925), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.384 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1334), channel_id=1475, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.126.clone
  %dynamic-slice.2591 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.384, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.420 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2591), dimensions={2,0,1}
  %multiply.6416 = bf16[512,8,128]{0,2,1} multiply(%transpose.420, %transpose.420)
  %convert.3117 = f32[512,8,128]{0,2,1} convert(%multiply.6416)
  %reduce.1243 = f32[] reduce(%convert.3117, %constant.3956), dimensions={0,1,2}, to_apply=%region_1420.31910
  %all-reduce.385 = f32[] all-reduce(%reduce.1243), channel_id=1476, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1420.31910.clone
  %convert.3118 = bf16[] convert(%all-reduce.385)
  %add.5393 = bf16[] add(%add.5392, %convert.3118)
  %dot.1335 = bf16[4096,32,128]{2,1,0} dot(%copy.2953, %copy.2930), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.386 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1335), channel_id=1477, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.127.clone
  %dynamic-slice.2593 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.386, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.421 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2593), dimensions={1,2,0}
  %multiply.6417 = bf16[32,128,512]{1,0,2} multiply(%transpose.421, %transpose.421)
  %convert.3119 = f32[32,128,512]{1,0,2} convert(%multiply.6417)
  %reduce.1244 = f32[] reduce(%convert.3119, %constant.3956), dimensions={0,1,2}, to_apply=%region_1421.31919
  %all-reduce.387 = f32[] all-reduce(%reduce.1244), channel_id=1478, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1421.31919.clone
  %convert.3120 = bf16[] convert(%all-reduce.387)
  %add.5394 = bf16[] add(%add.5393, %convert.3120)
  %dot.1336 = bf16[32,128,4096]{2,1,0} dot(%concatenate.200, %copy.2925), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.388 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1336), channel_id=1479, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.128.clone
  %dynamic-slice.2595 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.388, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.422 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2595), dimensions={2,0,1}
  %multiply.6418 = bf16[512,32,128]{0,2,1} multiply(%transpose.422, %transpose.422)
  %convert.3122 = f32[512,32,128]{0,2,1} convert(%multiply.6418)
  %reduce.1245 = f32[] reduce(%convert.3122, %constant.3956), dimensions={0,1,2}, to_apply=%region_1422.31928
  %all-reduce.389 = f32[] all-reduce(%reduce.1245), channel_id=1480, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1422.31928.clone
  %convert.3124 = bf16[] convert(%all-reduce.389)
  %add.5395 = bf16[] add(%add.5394, %convert.3124)
  %dot.1337 = bf16[8,128,4096]{2,1,0} dot(%copy.2955, %copy.2925), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.390 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1337), channel_id=1481, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.129.clone
  %dynamic-slice.2597 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.390, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.423 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2597), dimensions={2,0,1}
  %multiply.6419 = bf16[512,8,128]{0,2,1} multiply(%transpose.423, %transpose.423)
  %convert.3125 = f32[512,8,128]{0,2,1} convert(%multiply.6419)
  %reduce.1246 = f32[] reduce(%convert.3125, %constant.3956), dimensions={0,1,2}, to_apply=%region_1423.31937
  %all-reduce.391 = f32[] all-reduce(%reduce.1246), channel_id=1482, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1423.31937.clone
  %convert.3126 = bf16[] convert(%all-reduce.391)
  %add.5396 = bf16[] add(%add.5395, %convert.3126)
  %dot.1338 = bf16[4096,8]{1,0} dot(%copy.4012, %copy.4031), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.392 = bf16[4096,8]{1,0} all-reduce(%dot.1338), channel_id=1483, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.130.clone
  %dynamic-slice.2599 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.392, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6420 = bf16[512,8]{0,1} multiply(%dynamic-slice.2599, %dynamic-slice.2599)
  %convert.3127 = f32[512,8]{0,1} convert(%multiply.6420)
  %reduce.1247 = f32[] reduce(%convert.3127, %constant.3956), dimensions={0,1}, to_apply=%region_1424.31946
  %all-reduce.393 = f32[] all-reduce(%reduce.1247), channel_id=1484, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1424.31946.clone
  %convert.3128 = bf16[] convert(%all-reduce.393)
  %add.5397 = bf16[] add(%add.5396, %convert.3128)
  %dot.1339 = bf16[1,4096,14336]{2,1,0} dot(%copy.4017, %copy.4027), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4279 = bf16[1,4096,14336]{2,1,0} copy(%dot.1339)
  %multiply.6421 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4279, %copy.4279)
  %convert.3129 = f32[1,4096,14336]{2,1,0} convert(%multiply.6421)
  %reduce.1248 = f32[] reduce(%convert.3129, %constant.3956), dimensions={0,1,2}, to_apply=%region_1425.31955
  %all-reduce.394 = f32[] all-reduce(%reduce.1248), channel_id=1485, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1425.31955.clone
  %convert.3130 = bf16[] convert(%all-reduce.394)
  %add.5398 = bf16[] add(%add.5397, %convert.3130)
  %dot.1340 = bf16[1,4096,14336]{2,1,0} dot(%copy.4017, %copy.4024), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4280 = bf16[1,4096,14336]{2,1,0} copy(%dot.1340)
  %multiply.6422 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4280, %copy.4280)
  %convert.3131 = f32[1,4096,14336]{2,1,0} convert(%multiply.6422)
  %reduce.1249 = f32[] reduce(%convert.3131, %constant.3956), dimensions={0,1,2}, to_apply=%region_1426.31964
  %all-reduce.395 = f32[] all-reduce(%reduce.1249), channel_id=1486, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1426.31964.clone
  %convert.3132 = bf16[] convert(%all-reduce.395)
  %add.5399 = bf16[] add(%add.5398, %convert.3132)
  %dot.1341 = bf16[1,14336,4096]{2,1,0} dot(%multiply.5685, %copy.4022), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4281 = bf16[1,14336,4096]{2,1,0} copy(%dot.1341)
  %multiply.6423 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4281, %copy.4281)
  %convert.3133 = f32[1,14336,4096]{2,1,0} convert(%multiply.6423)
  %reduce.1250 = f32[] reduce(%convert.3133, %constant.3956), dimensions={0,1,2}, to_apply=%region_1427.31973
  %all-reduce.396 = f32[] all-reduce(%reduce.1250), channel_id=1487, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1427.31973.clone
  %convert.3134 = bf16[] convert(%all-reduce.396)
  %add.5400 = bf16[] add(%add.5399, %convert.3134)
  %multiply.6424 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2403, %copy.4032)
  %reduce.1251 = bf16[4096]{0} reduce(%multiply.6424, %constant.3795), dimensions={0,1}, to_apply=%region_1055.27138
  %all-reduce.397 = bf16[4096]{0} all-reduce(%reduce.1251), channel_id=1488, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1055.27138.clone
  %multiply.6425 = bf16[4096]{0} multiply(%all-reduce.397, %all-reduce.397)
  %convert.3135 = f32[4096]{0} convert(%multiply.6425)
  %reduce.1252 = f32[] reduce(%convert.3135, %constant.3956), dimensions={0}, to_apply=%region_1428.31982
  %convert.3136 = bf16[] convert(%reduce.1252)
  %add.5401 = bf16[] add(%add.5400, %convert.3136)
  %multiply.6426 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2387, %copy.4040)
  %reduce.1253 = bf16[4096]{0} reduce(%multiply.6426, %constant.3795), dimensions={0,1}, to_apply=%region_1059.27249
  %all-reduce.398 = bf16[4096]{0} all-reduce(%reduce.1253), channel_id=1489, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1059.27249.clone
  %multiply.6427 = bf16[4096]{0} multiply(%all-reduce.398, %all-reduce.398)
  %convert.3137 = f32[4096]{0} convert(%multiply.6427)
  %reduce.1254 = f32[] reduce(%convert.3137, %constant.3956), dimensions={0}, to_apply=%region_1429.31991
  %convert.3138 = bf16[] convert(%reduce.1254)
  %add.5403 = bf16[] add(%add.5401, %convert.3138)
  %dot.1342 = bf16[8,128,4096]{2,1,0} dot(%concatenate.442, %copy.4005), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.399 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1342), channel_id=1490, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.131.clone
  %dynamic-slice.2601 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.399, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.424 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2601), dimensions={2,0,1}
  %multiply.6428 = bf16[512,8,128]{0,2,1} multiply(%transpose.424, %transpose.424)
  %convert.3139 = f32[512,8,128]{0,2,1} convert(%multiply.6428)
  %reduce.1255 = f32[] reduce(%convert.3139, %constant.3956), dimensions={0,1,2}, to_apply=%region_1430.32000
  %all-reduce.400 = f32[] all-reduce(%reduce.1255), channel_id=1491, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1430.32000.clone
  %convert.3140 = bf16[] convert(%all-reduce.400)
  %add.5404 = bf16[] add(%add.5403, %convert.3140)
  %dot.1343 = bf16[4096,32,128]{2,1,0} dot(%copy.4033, %copy.4010), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.401 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1343), channel_id=1492, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.132.clone
  %dynamic-slice.2603 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.401, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.425 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2603), dimensions={1,2,0}
  %multiply.6429 = bf16[32,128,512]{1,0,2} multiply(%transpose.425, %transpose.425)
  %convert.3141 = f32[32,128,512]{1,0,2} convert(%multiply.6429)
  %reduce.1256 = f32[] reduce(%convert.3141, %constant.3956), dimensions={0,1,2}, to_apply=%region_1431.32009
  %all-reduce.402 = f32[] all-reduce(%reduce.1256), channel_id=1493, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1431.32009.clone
  %convert.3142 = bf16[] convert(%all-reduce.402)
  %add.5405 = bf16[] add(%add.5404, %convert.3142)
  %dot.1344 = bf16[32,128,4096]{2,1,0} dot(%concatenate.443, %copy.4005), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.403 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1344), channel_id=1494, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.133.clone
  %dynamic-slice.2605 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.403, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.426 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2605), dimensions={2,0,1}
  %multiply.6430 = bf16[512,32,128]{0,2,1} multiply(%transpose.426, %transpose.426)
  %convert.3143 = f32[512,32,128]{0,2,1} convert(%multiply.6430)
  %reduce.1257 = f32[] reduce(%convert.3143, %constant.3956), dimensions={0,1,2}, to_apply=%region_1432.32018
  %all-reduce.404 = f32[] all-reduce(%reduce.1257), channel_id=1495, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1432.32018.clone
  %convert.3144 = bf16[] convert(%all-reduce.404)
  %add.5406 = bf16[] add(%add.5405, %convert.3144)
  %dot.1345 = bf16[8,128,4096]{2,1,0} dot(%copy.4035, %copy.4005), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.405 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1345), channel_id=1496, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.134.clone
  %dynamic-slice.2607 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.405, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.427 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2607), dimensions={2,0,1}
  %multiply.6431 = bf16[512,8,128]{0,2,1} multiply(%transpose.427, %transpose.427)
  %convert.3145 = f32[512,8,128]{0,2,1} convert(%multiply.6431)
  %reduce.1258 = f32[] reduce(%convert.3145, %constant.3956), dimensions={0,1,2}, to_apply=%region_1433.32027
  %all-reduce.406 = f32[] all-reduce(%reduce.1258), channel_id=1497, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1433.32027.clone
  %convert.3146 = bf16[] convert(%all-reduce.406)
  %add.5407 = bf16[] add(%add.5406, %convert.3146)
  %dot.1346 = bf16[4096,8]{1,0} dot(%copy.3972, %copy.3991), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.407 = bf16[4096,8]{1,0} all-reduce(%dot.1346), channel_id=1498, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.135.clone
  %dynamic-slice.2609 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.407, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6432 = bf16[512,8]{0,1} multiply(%dynamic-slice.2609, %dynamic-slice.2609)
  %convert.3147 = f32[512,8]{0,1} convert(%multiply.6432)
  %reduce.1259 = f32[] reduce(%convert.3147, %constant.3956), dimensions={0,1}, to_apply=%region_1434.32036
  %all-reduce.408 = f32[] all-reduce(%reduce.1259), channel_id=1499, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1434.32036.clone
  %convert.3148 = bf16[] convert(%all-reduce.408)
  %add.5408 = bf16[] add(%add.5407, %convert.3148)
  %dot.1347 = bf16[1,4096,14336]{2,1,0} dot(%copy.3977, %copy.3987), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4282 = bf16[1,4096,14336]{2,1,0} copy(%dot.1347)
  %multiply.6434 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4282, %copy.4282)
  %convert.3149 = f32[1,4096,14336]{2,1,0} convert(%multiply.6434)
  %reduce.1260 = f32[] reduce(%convert.3149, %constant.3956), dimensions={0,1,2}, to_apply=%region_1435.32045
  %all-reduce.409 = f32[] all-reduce(%reduce.1260), channel_id=1500, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1435.32045.clone
  %convert.3150 = bf16[] convert(%all-reduce.409)
  %add.5409 = bf16[] add(%add.5408, %convert.3150)
  %dot.1348 = bf16[1,4096,14336]{2,1,0} dot(%copy.3977, %copy.3984), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4283 = bf16[1,4096,14336]{2,1,0} copy(%dot.1348)
  %multiply.6435 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4283, %copy.4283)
  %convert.3151 = f32[1,4096,14336]{2,1,0} convert(%multiply.6435)
  %reduce.1261 = f32[] reduce(%convert.3151, %constant.3956), dimensions={0,1,2}, to_apply=%region_1436.32054
  %all-reduce.410 = f32[] all-reduce(%reduce.1261), channel_id=1501, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1436.32054.clone
  %convert.3152 = bf16[] convert(%all-reduce.410)
  %add.5410 = bf16[] add(%add.5409, %convert.3152)
  %dot.1349 = bf16[1,14336,4096]{2,1,0} dot(%multiply.5597, %copy.3982), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4284 = bf16[1,14336,4096]{2,1,0} copy(%dot.1349)
  %multiply.6436 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4284, %copy.4284)
  %convert.3153 = f32[1,14336,4096]{2,1,0} convert(%multiply.6436)
  %reduce.1262 = f32[] reduce(%convert.3153, %constant.3956), dimensions={0,1,2}, to_apply=%region_1437.32063
  %all-reduce.411 = f32[] all-reduce(%reduce.1262), channel_id=1502, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1437.32063.clone
  %convert.3154 = bf16[] convert(%all-reduce.411)
  %add.5411 = bf16[] add(%add.5410, %convert.3154)
  %multiply.6438 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2366, %copy.3992)
  %reduce.1263 = bf16[4096]{0} reduce(%multiply.6438, %constant.3795), dimensions={0,1}, to_apply=%region_1030.26562
  %all-reduce.412 = bf16[4096]{0} all-reduce(%reduce.1263), channel_id=1503, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1030.26562.clone
  %multiply.6439 = bf16[4096]{0} multiply(%all-reduce.412, %all-reduce.412)
  %convert.3155 = f32[4096]{0} convert(%multiply.6439)
  %reduce.1264 = f32[] reduce(%convert.3155, %constant.3956), dimensions={0}, to_apply=%region_1438.32072
  %convert.3156 = bf16[] convert(%reduce.1264)
  %add.5413 = bf16[] add(%add.5411, %convert.3156)
  %multiply.6440 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2352, %copy.4000)
  %reduce.1265 = bf16[4096]{0} reduce(%multiply.6440, %constant.3795), dimensions={0,1}, to_apply=%region_1034.26673
  %all-reduce.413 = bf16[4096]{0} all-reduce(%reduce.1265), channel_id=1504, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1034.26673.clone
  %multiply.6441 = bf16[4096]{0} multiply(%all-reduce.413, %all-reduce.413)
  %convert.3157 = f32[4096]{0} convert(%multiply.6441)
  %reduce.1266 = f32[] reduce(%convert.3157, %constant.3956), dimensions={0}, to_apply=%region_1439.32081
  %convert.3158 = bf16[] convert(%reduce.1266)
  %add.5414 = bf16[] add(%add.5413, %convert.3158)
  %dot.1351 = bf16[8,128,4096]{2,1,0} dot(%concatenate.433, %copy.3965), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.414 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1351), channel_id=1505, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.136.clone
  %dynamic-slice.2611 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.414, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.428 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2611), dimensions={2,0,1}
  %multiply.6443 = bf16[512,8,128]{0,2,1} multiply(%transpose.428, %transpose.428)
  %convert.3159 = f32[512,8,128]{0,2,1} convert(%multiply.6443)
  %reduce.1267 = f32[] reduce(%convert.3159, %constant.3956), dimensions={0,1,2}, to_apply=%region_1440.32090
  %all-reduce.415 = f32[] all-reduce(%reduce.1267), channel_id=1506, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1440.32090.clone
  %convert.3160 = bf16[] convert(%all-reduce.415)
  %add.5415 = bf16[] add(%add.5414, %convert.3160)
  %dot.1352 = bf16[4096,32,128]{2,1,0} dot(%copy.3993, %copy.3970), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.416 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1352), channel_id=1507, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.137.clone
  %dynamic-slice.2613 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.416, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.429 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2613), dimensions={1,2,0}
  %multiply.6444 = bf16[32,128,512]{1,0,2} multiply(%transpose.429, %transpose.429)
  %convert.3161 = f32[32,128,512]{1,0,2} convert(%multiply.6444)
  %reduce.1268 = f32[] reduce(%convert.3161, %constant.3956), dimensions={0,1,2}, to_apply=%region_1441.32099
  %all-reduce.417 = f32[] all-reduce(%reduce.1268), channel_id=1508, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1441.32099.clone
  %convert.3162 = bf16[] convert(%all-reduce.417)
  %add.5416 = bf16[] add(%add.5415, %convert.3162)
  %dot.1353 = bf16[32,128,4096]{2,1,0} dot(%concatenate.434, %copy.3965), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.418 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1353), channel_id=1509, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.138.clone
  %dynamic-slice.2615 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.418, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.430 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2615), dimensions={2,0,1}
  %multiply.6445 = bf16[512,32,128]{0,2,1} multiply(%transpose.430, %transpose.430)
  %convert.3163 = f32[512,32,128]{0,2,1} convert(%multiply.6445)
  %reduce.1269 = f32[] reduce(%convert.3163, %constant.3956), dimensions={0,1,2}, to_apply=%region_1442.32108
  %all-reduce.419 = f32[] all-reduce(%reduce.1269), channel_id=1510, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1442.32108.clone
  %convert.3164 = bf16[] convert(%all-reduce.419)
  %add.5417 = bf16[] add(%add.5416, %convert.3164)
  %dot.1354 = bf16[8,128,4096]{2,1,0} dot(%copy.3995, %copy.3965), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.420 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1354), channel_id=1511, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.139.clone
  %dynamic-slice.2617 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.420, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.431 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2617), dimensions={2,0,1}
  %multiply.6447 = bf16[512,8,128]{0,2,1} multiply(%transpose.431, %transpose.431)
  %convert.3165 = f32[512,8,128]{0,2,1} convert(%multiply.6447)
  %reduce.1270 = f32[] reduce(%convert.3165, %constant.3956), dimensions={0,1,2}, to_apply=%region_1443.32117
  %all-reduce.421 = f32[] all-reduce(%reduce.1270), channel_id=1512, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1443.32117.clone
  %convert.3166 = bf16[] convert(%all-reduce.421)
  %add.5418 = bf16[] add(%add.5417, %convert.3166)
  %dot.1355 = bf16[4096,8]{1,0} dot(%copy.3932, %copy.3951), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.422 = bf16[4096,8]{1,0} all-reduce(%dot.1355), channel_id=1513, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.140.clone
  %dynamic-slice.2619 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.422, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6448 = bf16[512,8]{0,1} multiply(%dynamic-slice.2619, %dynamic-slice.2619)
  %convert.3167 = f32[512,8]{0,1} convert(%multiply.6448)
  %reduce.1271 = f32[] reduce(%convert.3167, %constant.3956), dimensions={0,1}, to_apply=%region_1444.32126
  %all-reduce.423 = f32[] all-reduce(%reduce.1271), channel_id=1514, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1444.32126.clone
  %convert.3168 = bf16[] convert(%all-reduce.423)
  %add.5419 = bf16[] add(%add.5418, %convert.3168)
  %dot.1356 = bf16[1,4096,14336]{2,1,0} dot(%copy.3937, %copy.3947), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4285 = bf16[1,4096,14336]{2,1,0} copy(%dot.1356)
  %multiply.6449 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4285, %copy.4285)
  %convert.3169 = f32[1,4096,14336]{2,1,0} convert(%multiply.6449)
  %reduce.1272 = f32[] reduce(%convert.3169, %constant.3956), dimensions={0,1,2}, to_apply=%region_1445.32135
  %all-reduce.424 = f32[] all-reduce(%reduce.1272), channel_id=1515, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1445.32135.clone
  %convert.3170 = bf16[] convert(%all-reduce.424)
  %add.5420 = bf16[] add(%add.5419, %convert.3170)
  %dot.1357 = bf16[1,4096,14336]{2,1,0} dot(%copy.3937, %copy.3944), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4286 = bf16[1,4096,14336]{2,1,0} copy(%dot.1357)
  %multiply.6450 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4286, %copy.4286)
  %convert.3172 = f32[1,4096,14336]{2,1,0} convert(%multiply.6450)
  %reduce.1273 = f32[] reduce(%convert.3172, %constant.3956), dimensions={0,1,2}, to_apply=%region_1446.32144
  %all-reduce.425 = f32[] all-reduce(%reduce.1273), channel_id=1516, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1446.32144.clone
  %convert.3173 = bf16[] convert(%all-reduce.425)
  %add.5421 = bf16[] add(%add.5420, %convert.3173)
  %dot.1358 = bf16[1,14336,4096]{2,1,0} dot(%multiply.5503, %copy.3942), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4287 = bf16[1,14336,4096]{2,1,0} copy(%dot.1358)
  %multiply.6452 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4287, %copy.4287)
  %convert.3174 = f32[1,14336,4096]{2,1,0} convert(%multiply.6452)
  %reduce.1274 = f32[] reduce(%convert.3174, %constant.3956), dimensions={0,1,2}, to_apply=%region_1447.32153
  %all-reduce.426 = f32[] all-reduce(%reduce.1274), channel_id=1517, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1447.32153.clone
  %convert.3175 = bf16[] convert(%all-reduce.426)
  %add.5422 = bf16[] add(%add.5421, %convert.3175)
  %multiply.6453 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2331, %copy.3952)
  %reduce.1275 = bf16[4096]{0} reduce(%multiply.6453, %constant.3795), dimensions={0,1}, to_apply=%region_1005.25986
  %all-reduce.427 = bf16[4096]{0} all-reduce(%reduce.1275), channel_id=1518, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1005.25986.clone
  %multiply.6454 = bf16[4096]{0} multiply(%all-reduce.427, %all-reduce.427)
  %convert.3176 = f32[4096]{0} convert(%multiply.6454)
  %reduce.1276 = f32[] reduce(%convert.3176, %constant.3956), dimensions={0}, to_apply=%region_1448.32162
  %convert.3177 = bf16[] convert(%reduce.1276)
  %add.5423 = bf16[] add(%add.5422, %convert.3177)
  %multiply.6455 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2317, %copy.3960)
  %reduce.1277 = bf16[4096]{0} reduce(%multiply.6455, %constant.3795), dimensions={0,1}, to_apply=%region_1009.26097
  %all-reduce.428 = bf16[4096]{0} all-reduce(%reduce.1277), channel_id=1519, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1009.26097.clone
  %multiply.6456 = bf16[4096]{0} multiply(%all-reduce.428, %all-reduce.428)
  %convert.3178 = f32[4096]{0} convert(%multiply.6456)
  %reduce.1278 = f32[] reduce(%convert.3178, %constant.3956), dimensions={0}, to_apply=%region_1449.32171
  %convert.3180 = bf16[] convert(%reduce.1278)
  %add.5424 = bf16[] add(%add.5423, %convert.3180)
  %dot.1359 = bf16[8,128,4096]{2,1,0} dot(%concatenate.424, %copy.3925), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.429 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1359), channel_id=1520, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.141.clone
  %dynamic-slice.2621 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.429, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.432 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2621), dimensions={2,0,1}
  %multiply.6457 = bf16[512,8,128]{0,2,1} multiply(%transpose.432, %transpose.432)
  %convert.3181 = f32[512,8,128]{0,2,1} convert(%multiply.6457)
  %reduce.1279 = f32[] reduce(%convert.3181, %constant.3956), dimensions={0,1,2}, to_apply=%region_1450.32180
  %all-reduce.430 = f32[] all-reduce(%reduce.1279), channel_id=1521, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1450.32180.clone
  %convert.3182 = bf16[] convert(%all-reduce.430)
  %add.5425 = bf16[] add(%add.5424, %convert.3182)
  %dot.1360 = bf16[4096,32,128]{2,1,0} dot(%copy.3953, %copy.3930), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.431 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1360), channel_id=1522, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.142.clone
  %dynamic-slice.2623 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.431, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.433 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2623), dimensions={1,2,0}
  %multiply.6458 = bf16[32,128,512]{1,0,2} multiply(%transpose.433, %transpose.433)
  %convert.3183 = f32[32,128,512]{1,0,2} convert(%multiply.6458)
  %reduce.1280 = f32[] reduce(%convert.3183, %constant.3956), dimensions={0,1,2}, to_apply=%region_1451.32189
  %all-reduce.432 = f32[] all-reduce(%reduce.1280), channel_id=1523, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1451.32189.clone
  %convert.3184 = bf16[] convert(%all-reduce.432)
  %add.5427 = bf16[] add(%add.5425, %convert.3184)
  %dot.1361 = bf16[32,128,4096]{2,1,0} dot(%concatenate.425, %copy.3925), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.433 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1361), channel_id=1524, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.143.clone
  %dynamic-slice.2625 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.433, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.434 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2625), dimensions={2,0,1}
  %multiply.6459 = bf16[512,32,128]{0,2,1} multiply(%transpose.434, %transpose.434)
  %convert.3185 = f32[512,32,128]{0,2,1} convert(%multiply.6459)
  %reduce.1281 = f32[] reduce(%convert.3185, %constant.3956), dimensions={0,1,2}, to_apply=%region_1452.32198
  %all-reduce.434 = f32[] all-reduce(%reduce.1281), channel_id=1525, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1452.32198.clone
  %convert.3186 = bf16[] convert(%all-reduce.434)
  %add.5428 = bf16[] add(%add.5427, %convert.3186)
  %dot.1362 = bf16[8,128,4096]{2,1,0} dot(%copy.3955, %copy.3925), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.435 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1362), channel_id=1526, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.144.clone
  %dynamic-slice.2627 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.435, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.435 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2627), dimensions={2,0,1}
  %multiply.6460 = bf16[512,8,128]{0,2,1} multiply(%transpose.435, %transpose.435)
  %convert.3187 = f32[512,8,128]{0,2,1} convert(%multiply.6460)
  %reduce.1282 = f32[] reduce(%convert.3187, %constant.3956), dimensions={0,1,2}, to_apply=%region_1453.32207
  %all-reduce.436 = f32[] all-reduce(%reduce.1282), channel_id=1527, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1453.32207.clone
  %convert.3188 = bf16[] convert(%all-reduce.436)
  %add.5429 = bf16[] add(%add.5428, %convert.3188)
  %dot.1363 = bf16[4096,8]{1,0} dot(%copy.3892, %copy.3911), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.437 = bf16[4096,8]{1,0} all-reduce(%dot.1363), channel_id=1528, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.145.clone
  %dynamic-slice.2629 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.437, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6461 = bf16[512,8]{0,1} multiply(%dynamic-slice.2629, %dynamic-slice.2629)
  %convert.3189 = f32[512,8]{0,1} convert(%multiply.6461)
  %reduce.1283 = f32[] reduce(%convert.3189, %constant.3956), dimensions={0,1}, to_apply=%region_1454.32216
  %all-reduce.438 = f32[] all-reduce(%reduce.1283), channel_id=1529, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1454.32216.clone
  %convert.3190 = bf16[] convert(%all-reduce.438)
  %add.5430 = bf16[] add(%add.5429, %convert.3190)
  %dot.1364 = bf16[1,4096,14336]{2,1,0} dot(%copy.3897, %copy.3907), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4288 = bf16[1,4096,14336]{2,1,0} copy(%dot.1364)
  %multiply.6462 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4288, %copy.4288)
  %convert.3191 = f32[1,4096,14336]{2,1,0} convert(%multiply.6462)
  %reduce.1284 = f32[] reduce(%convert.3191, %constant.3956), dimensions={0,1,2}, to_apply=%region_1455.32225
  %all-reduce.439 = f32[] all-reduce(%reduce.1284), channel_id=1530, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1455.32225.clone
  %convert.3192 = bf16[] convert(%all-reduce.439)
  %add.5431 = bf16[] add(%add.5430, %convert.3192)
  %dot.1365 = bf16[1,4096,14336]{2,1,0} dot(%copy.3897, %copy.3904), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4289 = bf16[1,4096,14336]{2,1,0} copy(%dot.1365)
  %multiply.6463 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4289, %copy.4289)
  %convert.3193 = f32[1,4096,14336]{2,1,0} convert(%multiply.6463)
  %reduce.1285 = f32[] reduce(%convert.3193, %constant.3956), dimensions={0,1,2}, to_apply=%region_1456.32234
  %all-reduce.440 = f32[] all-reduce(%reduce.1285), channel_id=1531, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1456.32234.clone
  %convert.3194 = bf16[] convert(%all-reduce.440)
  %add.5432 = bf16[] add(%add.5431, %convert.3194)
  %dot.1366 = bf16[1,14336,4096]{2,1,0} dot(%multiply.5408, %copy.3902), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4290 = bf16[1,14336,4096]{2,1,0} copy(%dot.1366)
  %multiply.6464 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4290, %copy.4290)
  %convert.3195 = f32[1,14336,4096]{2,1,0} convert(%multiply.6464)
  %reduce.1286 = f32[] reduce(%convert.3195, %constant.3956), dimensions={0,1,2}, to_apply=%region_1457.32243
  %all-reduce.441 = f32[] all-reduce(%reduce.1286), channel_id=1532, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1457.32243.clone
  %convert.3196 = bf16[] convert(%all-reduce.441)
  %add.5433 = bf16[] add(%add.5432, %convert.3196)
  %multiply.6465 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2295, %copy.3912)
  %reduce.1287 = bf16[4096]{0} reduce(%multiply.6465, %constant.3795), dimensions={0,1}, to_apply=%region_980.25410
  %all-reduce.442 = bf16[4096]{0} all-reduce(%reduce.1287), channel_id=1533, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_980.25410.clone
  %multiply.6466 = bf16[4096]{0} multiply(%all-reduce.442, %all-reduce.442)
  %convert.3197 = f32[4096]{0} convert(%multiply.6466)
  %reduce.1288 = f32[] reduce(%convert.3197, %constant.3956), dimensions={0}, to_apply=%region_1458.32252
  %convert.3199 = bf16[] convert(%reduce.1288)
  %add.5434 = bf16[] add(%add.5433, %convert.3199)
  %multiply.6467 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2280, %copy.3920)
  %reduce.1289 = bf16[4096]{0} reduce(%multiply.6467, %constant.3795), dimensions={0,1}, to_apply=%region_984.25521
  %all-reduce.443 = bf16[4096]{0} all-reduce(%reduce.1289), channel_id=1534, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_984.25521.clone
  %multiply.6468 = bf16[4096]{0} multiply(%all-reduce.443, %all-reduce.443)
  %convert.3200 = f32[4096]{0} convert(%multiply.6468)
  %reduce.1290 = f32[] reduce(%convert.3200, %constant.3956), dimensions={0}, to_apply=%region_1459.32261
  %convert.3201 = bf16[] convert(%reduce.1290)
  %add.5436 = bf16[] add(%add.5434, %convert.3201)
  %dot.1367 = bf16[8,128,4096]{2,1,0} dot(%concatenate.415, %copy.3885), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.444 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1367), channel_id=1535, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.146.clone
  %dynamic-slice.2631 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.444, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.436 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2631), dimensions={2,0,1}
  %multiply.6469 = bf16[512,8,128]{0,2,1} multiply(%transpose.436, %transpose.436)
  %convert.3202 = f32[512,8,128]{0,2,1} convert(%multiply.6469)
  %reduce.1291 = f32[] reduce(%convert.3202, %constant.3956), dimensions={0,1,2}, to_apply=%region_1460.32270
  %all-reduce.445 = f32[] all-reduce(%reduce.1291), channel_id=1536, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1460.32270.clone
  %convert.3203 = bf16[] convert(%all-reduce.445)
  %add.5437 = bf16[] add(%add.5436, %convert.3203)
  %dot.1368 = bf16[4096,32,128]{2,1,0} dot(%copy.3913, %copy.3890), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.446 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1368), channel_id=1537, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.147.clone
  %dynamic-slice.2633 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.446, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.437 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2633), dimensions={1,2,0}
  %multiply.6470 = bf16[32,128,512]{1,0,2} multiply(%transpose.437, %transpose.437)
  %convert.3204 = f32[32,128,512]{1,0,2} convert(%multiply.6470)
  %reduce.1292 = f32[] reduce(%convert.3204, %constant.3956), dimensions={0,1,2}, to_apply=%region_1461.32279
  %all-reduce.447 = f32[] all-reduce(%reduce.1292), channel_id=1538, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1461.32279.clone
  %convert.3205 = bf16[] convert(%all-reduce.447)
  %add.5438 = bf16[] add(%add.5437, %convert.3205)
  %dot.1369 = bf16[32,128,4096]{2,1,0} dot(%concatenate.416, %copy.3885), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.448 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1369), channel_id=1539, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.148.clone
  %dynamic-slice.2635 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.448, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.438 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2635), dimensions={2,0,1}
  %multiply.6471 = bf16[512,32,128]{0,2,1} multiply(%transpose.438, %transpose.438)
  %convert.3206 = f32[512,32,128]{0,2,1} convert(%multiply.6471)
  %reduce.1293 = f32[] reduce(%convert.3206, %constant.3956), dimensions={0,1,2}, to_apply=%region_1462.32288
  %all-reduce.449 = f32[] all-reduce(%reduce.1293), channel_id=1540, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1462.32288.clone
  %convert.3207 = bf16[] convert(%all-reduce.449)
  %add.5439 = bf16[] add(%add.5438, %convert.3207)
  %dot.1370 = bf16[8,128,4096]{2,1,0} dot(%copy.3915, %copy.3885), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.450 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1370), channel_id=1541, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.149.clone
  %dynamic-slice.2637 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.450, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.439 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2637), dimensions={2,0,1}
  %multiply.6472 = bf16[512,8,128]{0,2,1} multiply(%transpose.439, %transpose.439)
  %convert.3208 = f32[512,8,128]{0,2,1} convert(%multiply.6472)
  %reduce.1294 = f32[] reduce(%convert.3208, %constant.3956), dimensions={0,1,2}, to_apply=%region_1463.32297
  %all-reduce.451 = f32[] all-reduce(%reduce.1294), channel_id=1542, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1463.32297.clone
  %convert.3209 = bf16[] convert(%all-reduce.451)
  %add.5440 = bf16[] add(%add.5439, %convert.3209)
  %dot.1371 = bf16[4096,8]{1,0} dot(%copy.3852, %copy.3871), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.452 = bf16[4096,8]{1,0} all-reduce(%dot.1371), channel_id=1543, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.150.clone
  %dynamic-slice.2639 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.452, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6474 = bf16[512,8]{0,1} multiply(%dynamic-slice.2639, %dynamic-slice.2639)
  %convert.3210 = f32[512,8]{0,1} convert(%multiply.6474)
  %reduce.1295 = f32[] reduce(%convert.3210, %constant.3956), dimensions={0,1}, to_apply=%region_1464.32306
  %all-reduce.453 = f32[] all-reduce(%reduce.1295), channel_id=1544, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1464.32306.clone
  %convert.3211 = bf16[] convert(%all-reduce.453)
  %add.5441 = bf16[] add(%add.5440, %convert.3211)
  %dot.1372 = bf16[1,4096,14336]{2,1,0} dot(%copy.3857, %copy.3867), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4291 = bf16[1,4096,14336]{2,1,0} copy(%dot.1372)
  %multiply.6475 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4291, %copy.4291)
  %convert.3212 = f32[1,4096,14336]{2,1,0} convert(%multiply.6475)
  %reduce.1296 = f32[] reduce(%convert.3212, %constant.3956), dimensions={0,1,2}, to_apply=%region_1465.32315
  %all-reduce.454 = f32[] all-reduce(%reduce.1296), channel_id=1545, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1465.32315.clone
  %convert.3214 = bf16[] convert(%all-reduce.454)
  %add.5442 = bf16[] add(%add.5441, %convert.3214)
  %dot.1373 = bf16[1,4096,14336]{2,1,0} dot(%copy.3857, %copy.3864), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4292 = bf16[1,4096,14336]{2,1,0} copy(%dot.1373)
  %multiply.6476 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4292, %copy.4292)
  %convert.3215 = f32[1,4096,14336]{2,1,0} convert(%multiply.6476)
  %reduce.1297 = f32[] reduce(%convert.3215, %constant.3956), dimensions={0,1,2}, to_apply=%region_1466.32324
  %all-reduce.455 = f32[] all-reduce(%reduce.1297), channel_id=1546, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1466.32324.clone
  %convert.3216 = bf16[] convert(%all-reduce.455)
  %add.5443 = bf16[] add(%add.5442, %convert.3216)
  %dot.1374 = bf16[1,14336,4096]{2,1,0} dot(%multiply.5320, %copy.3862), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4293 = bf16[1,14336,4096]{2,1,0} copy(%dot.1374)
  %multiply.6478 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4293, %copy.4293)
  %convert.3217 = f32[1,14336,4096]{2,1,0} convert(%multiply.6478)
  %reduce.1298 = f32[] reduce(%convert.3217, %constant.3956), dimensions={0,1,2}, to_apply=%region_1467.32333
  %all-reduce.456 = f32[] all-reduce(%reduce.1298), channel_id=1547, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1467.32333.clone
  %convert.3218 = bf16[] convert(%all-reduce.456)
  %add.5444 = bf16[] add(%add.5443, %convert.3218)
  %multiply.6479 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2258, %copy.3872)
  %reduce.1299 = bf16[4096]{0} reduce(%multiply.6479, %constant.3795), dimensions={0,1}, to_apply=%region_955.24834
  %all-reduce.457 = bf16[4096]{0} all-reduce(%reduce.1299), channel_id=1548, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_955.24834.clone
  %multiply.6480 = bf16[4096]{0} multiply(%all-reduce.457, %all-reduce.457)
  %convert.3219 = f32[4096]{0} convert(%multiply.6480)
  %reduce.1300 = f32[] reduce(%convert.3219, %constant.3956), dimensions={0}, to_apply=%region_1468.32342
  %convert.3220 = bf16[] convert(%reduce.1300)
  %add.5445 = bf16[] add(%add.5444, %convert.3220)
  %multiply.6481 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2244, %copy.3880)
  %reduce.1301 = bf16[4096]{0} reduce(%multiply.6481, %constant.3795), dimensions={0,1}, to_apply=%region_959.24945
  %all-reduce.458 = bf16[4096]{0} all-reduce(%reduce.1301), channel_id=1549, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_959.24945.clone
  %multiply.6483 = bf16[4096]{0} multiply(%all-reduce.458, %all-reduce.458)
  %convert.3221 = f32[4096]{0} convert(%multiply.6483)
  %reduce.1302 = f32[] reduce(%convert.3221, %constant.3956), dimensions={0}, to_apply=%region_1469.32351
  %convert.3222 = bf16[] convert(%reduce.1302)
  %add.5446 = bf16[] add(%add.5445, %convert.3222)
  %dot.1375 = bf16[8,128,4096]{2,1,0} dot(%concatenate.406, %copy.3845), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.459 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1375), channel_id=1550, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.151.clone
  %dynamic-slice.2641 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.459, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.440 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2641), dimensions={2,0,1}
  %multiply.6484 = bf16[512,8,128]{0,2,1} multiply(%transpose.440, %transpose.440)
  %convert.3223 = f32[512,8,128]{0,2,1} convert(%multiply.6484)
  %reduce.1303 = f32[] reduce(%convert.3223, %constant.3956), dimensions={0,1,2}, to_apply=%region_1470.32360
  %all-reduce.460 = f32[] all-reduce(%reduce.1303), channel_id=1551, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1470.32360.clone
  %convert.3224 = bf16[] convert(%all-reduce.460)
  %add.5447 = bf16[] add(%add.5446, %convert.3224)
  %dot.1376 = bf16[4096,32,128]{2,1,0} dot(%copy.3873, %copy.3850), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.461 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1376), channel_id=1552, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.152.clone
  %dynamic-slice.2643 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.461, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.441 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2643), dimensions={1,2,0}
  %multiply.6485 = bf16[32,128,512]{1,0,2} multiply(%transpose.441, %transpose.441)
  %convert.3226 = f32[32,128,512]{1,0,2} convert(%multiply.6485)
  %reduce.1304 = f32[] reduce(%convert.3226, %constant.3956), dimensions={0,1,2}, to_apply=%region_1471.32369
  %all-reduce.462 = f32[] all-reduce(%reduce.1304), channel_id=1553, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1471.32369.clone
  %convert.3227 = bf16[] convert(%all-reduce.462)
  %add.5448 = bf16[] add(%add.5447, %convert.3227)
  %dot.1377 = bf16[32,128,4096]{2,1,0} dot(%concatenate.407, %copy.3845), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.463 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1377), channel_id=1554, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.153.clone
  %dynamic-slice.2645 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.463, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.442 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2645), dimensions={2,0,1}
  %multiply.6487 = bf16[512,32,128]{0,2,1} multiply(%transpose.442, %transpose.442)
  %convert.3228 = f32[512,32,128]{0,2,1} convert(%multiply.6487)
  %reduce.1305 = f32[] reduce(%convert.3228, %constant.3956), dimensions={0,1,2}, to_apply=%region_1472.32378
  %all-reduce.464 = f32[] all-reduce(%reduce.1305), channel_id=1555, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1472.32378.clone
  %convert.3229 = bf16[] convert(%all-reduce.464)
  %add.5449 = bf16[] add(%add.5448, %convert.3229)
  %dot.1378 = bf16[8,128,4096]{2,1,0} dot(%copy.3875, %copy.3845), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.465 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1378), channel_id=1556, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.154.clone
  %dynamic-slice.2647 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.465, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.443 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2647), dimensions={2,0,1}
  %multiply.6488 = bf16[512,8,128]{0,2,1} multiply(%transpose.443, %transpose.443)
  %convert.3230 = f32[512,8,128]{0,2,1} convert(%multiply.6488)
  %reduce.1307 = f32[] reduce(%convert.3230, %constant.3956), dimensions={0,1,2}, to_apply=%region_1473.32387
  %all-reduce.466 = f32[] all-reduce(%reduce.1307), channel_id=1557, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1473.32387.clone
  %convert.3231 = bf16[] convert(%all-reduce.466)
  %add.5450 = bf16[] add(%add.5449, %convert.3231)
  %dot.1379 = bf16[4096,8]{1,0} dot(%copy.3812, %copy.3831), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.467 = bf16[4096,8]{1,0} all-reduce(%dot.1379), channel_id=1558, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.155.clone
  %dynamic-slice.2649 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.467, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,8}
  %multiply.6489 = bf16[512,8]{0,1} multiply(%dynamic-slice.2649, %dynamic-slice.2649)
  %convert.3232 = f32[512,8]{0,1} convert(%multiply.6489)
  %reduce.1308 = f32[] reduce(%convert.3232, %constant.3956), dimensions={0,1}, to_apply=%region_1474.32396
  %all-reduce.468 = f32[] all-reduce(%reduce.1308), channel_id=1559, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1474.32396.clone
  %convert.3233 = bf16[] convert(%all-reduce.468)
  %add.5451 = bf16[] add(%add.5450, %convert.3233)
  %dot.1380 = bf16[1,4096,14336]{2,1,0} dot(%copy.3817, %copy.3827), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4294 = bf16[1,4096,14336]{2,1,0} copy(%dot.1380)
  %multiply.6490 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4294, %copy.4294)
  %convert.3234 = f32[1,4096,14336]{2,1,0} convert(%multiply.6490)
  %reduce.1309 = f32[] reduce(%convert.3234, %constant.3956), dimensions={0,1,2}, to_apply=%region_1475.32405
  %all-reduce.469 = f32[] all-reduce(%reduce.1309), channel_id=1560, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1475.32405.clone
  %convert.3235 = bf16[] convert(%all-reduce.469)
  %add.5452 = bf16[] add(%add.5451, %convert.3235)
  %dot.1381 = bf16[1,4096,14336]{2,1,0} dot(%copy.3817, %copy.3824), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4295 = bf16[1,4096,14336]{2,1,0} copy(%dot.1381)
  %multiply.6491 = bf16[1,4096,14336]{2,1,0} multiply(%copy.4295, %copy.4295)
  %convert.3236 = f32[1,4096,14336]{2,1,0} convert(%multiply.6491)
  %reduce.1310 = f32[] reduce(%convert.3236, %constant.3956), dimensions={0,1,2}, to_apply=%region_1476.32414
  %all-reduce.470 = f32[] all-reduce(%reduce.1310), channel_id=1561, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1476.32414.clone
  %convert.3237 = bf16[] convert(%all-reduce.470)
  %add.5453 = bf16[] add(%add.5452, %convert.3237)
  %dot.1382 = bf16[1,14336,4096]{2,1,0} dot(%multiply.5229, %copy.3822), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %copy.4296 = bf16[1,14336,4096]{2,1,0} copy(%dot.1382)
  %multiply.6492 = bf16[1,14336,4096]{2,1,0} multiply(%copy.4296, %copy.4296)
  %convert.3238 = f32[1,14336,4096]{2,1,0} convert(%multiply.6492)
  %reduce.1311 = f32[] reduce(%convert.3238, %constant.3956), dimensions={0,1,2}, to_apply=%region_1477.32423
  %all-reduce.471 = f32[] all-reduce(%reduce.1311), channel_id=1562, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1477.32423.clone
  %convert.3239 = bf16[] convert(%all-reduce.471)
  %add.5454 = bf16[] add(%add.5453, %convert.3239)
  %multiply.6493 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2224, %copy.3832)
  %reduce.1312 = bf16[4096]{0} reduce(%multiply.6493, %constant.3795), dimensions={0,1}, to_apply=%region_930.24258
  %all-reduce.472 = bf16[4096]{0} all-reduce(%reduce.1312), channel_id=1563, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_930.24258.clone
  %multiply.6494 = bf16[4096]{0} multiply(%all-reduce.472, %all-reduce.472)
  %convert.3240 = f32[4096]{0} convert(%multiply.6494)
  %reduce.1313 = f32[] reduce(%convert.3240, %constant.3956), dimensions={0}, to_apply=%region_1478.32432
  %convert.3241 = bf16[] convert(%reduce.1313)
  %add.5455 = bf16[] add(%add.5454, %convert.3241)
  %multiply.6495 = bf16[1,4096,4096]{2,1,0} multiply(%convert.2208, %copy.3840)
  %reduce.1315 = bf16[4096]{0} reduce(%multiply.6495, %constant.3795), dimensions={0,1}, to_apply=%region_934.24369
  %all-reduce.473 = bf16[4096]{0} all-reduce(%reduce.1315), channel_id=1564, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_934.24369.clone
  %multiply.6496 = bf16[4096]{0} multiply(%all-reduce.473, %all-reduce.473)
  %convert.3242 = f32[4096]{0} convert(%multiply.6496)
  %reduce.1316 = f32[] reduce(%convert.3242, %constant.3956), dimensions={0}, to_apply=%region_1479.32441
  %convert.3243 = bf16[] convert(%reduce.1316)
  %add.5456 = bf16[] add(%add.5455, %convert.3243)
  %dot.1383 = bf16[8,128,4096]{2,1,0} dot(%concatenate.397, %copy.3805), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.474 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1383), channel_id=1565, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.156.clone
  %dynamic-slice.2651 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.474, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.444 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2651), dimensions={2,0,1}
  %multiply.6497 = bf16[512,8,128]{0,2,1} multiply(%transpose.444, %transpose.444)
  %convert.3244 = f32[512,8,128]{0,2,1} convert(%multiply.6497)
  %reduce.1317 = f32[] reduce(%convert.3244, %constant.3956), dimensions={0,1,2}, to_apply=%region_1480.32450
  %all-reduce.475 = f32[] all-reduce(%reduce.1317), channel_id=1566, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1480.32450.clone
  %convert.3245 = bf16[] convert(%all-reduce.475)
  %add.5457 = bf16[] add(%add.5456, %convert.3245)
  %dot.1384 = bf16[4096,32,128]{2,1,0} dot(%copy.3833, %copy.3810), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.476 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1384), channel_id=1567, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.157.clone
  %dynamic-slice.2653 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.476, %reshape.20494, %constant.3783, %constant.3783), dynamic_slice_sizes={512,32,128}
  %transpose.445 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2653), dimensions={1,2,0}
  %multiply.6498 = bf16[32,128,512]{1,0,2} multiply(%transpose.445, %transpose.445)
  %convert.3246 = f32[32,128,512]{1,0,2} convert(%multiply.6498)
  %reduce.1318 = f32[] reduce(%convert.3246, %constant.3956), dimensions={0,1,2}, to_apply=%region_1481.32459
  %all-reduce.477 = f32[] all-reduce(%reduce.1318), channel_id=1568, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1481.32459.clone
  %convert.3247 = bf16[] convert(%all-reduce.477)
  %add.5458 = bf16[] add(%add.5457, %convert.3247)
  %dot.1385 = bf16[32,128,4096]{2,1,0} dot(%concatenate.398, %copy.3805), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.478 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1385), channel_id=1569, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.158.clone
  %dynamic-slice.2655 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.478, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={32,128,512}
  %transpose.446 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2655), dimensions={2,0,1}
  %multiply.6499 = bf16[512,32,128]{0,2,1} multiply(%transpose.446, %transpose.446)
  %convert.3249 = f32[512,32,128]{0,2,1} convert(%multiply.6499)
  %reduce.1320 = f32[] reduce(%convert.3249, %constant.3956), dimensions={0,1,2}, to_apply=%region_1482.32468
  %all-reduce.479 = f32[] all-reduce(%reduce.1320), channel_id=1570, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1482.32468.clone
  %convert.3250 = bf16[] convert(%all-reduce.479)
  %add.5459 = bf16[] add(%add.5458, %convert.3250)
  %dot.1386 = bf16[8,128,4096]{2,1,0} dot(%copy.3835, %copy.3805), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.480 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1386), channel_id=1571, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.159.clone
  %dynamic-slice.2657 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.480, %constant.3783, %constant.3783, %reshape.20494), dynamic_slice_sizes={8,128,512}
  %transpose.447 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2657), dimensions={2,0,1}
  %multiply.6500 = bf16[512,8,128]{0,2,1} multiply(%transpose.447, %transpose.447)
  %convert.3251 = f32[512,8,128]{0,2,1} convert(%multiply.6500)
  %reduce.1321 = f32[] reduce(%convert.3251, %constant.3956), dimensions={0,1,2}, to_apply=%region_1483.32477
  %all-reduce.481 = f32[] all-reduce(%reduce.1321), channel_id=1572, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1483.32477.clone
  %convert.3252 = bf16[] convert(%all-reduce.481)
  %add.5460 = bf16[] add(%add.5459, %convert.3252)
  %dot.1387 = bf16[4096,32000]{1,0} dot(%multiply.3149, %copy.2921), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.482 = bf16[4096,32000]{1,0} all-reduce(%dot.1387), channel_id=1573, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.160.clone
  %dynamic-slice.2659 = bf16[512,32000]{1,0} dynamic-slice(%all-reduce.482, %reshape.20494, %constant.3783), dynamic_slice_sizes={512,32000}
  %multiply.6501 = bf16[512,32000]{0,1} multiply(%dynamic-slice.2659, %dynamic-slice.2659)
  %convert.3253 = f32[512,32000]{0,1} convert(%multiply.6501)
  %reduce.1322 = f32[] reduce(%convert.3253, %constant.3956), dimensions={0,1}, to_apply=%region_1484.32486
  %all-reduce.483 = f32[] all-reduce(%reduce.1322), channel_id=1574, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1484.32486.clone
  %convert.3254 = bf16[] convert(%all-reduce.483)
  %add.5461 = bf16[] add(%add.5460, %convert.3254)
  %multiply.6502 = bf16[1,4096,4096]{2,1,0} multiply(%copy.4203, %broadcast.9996)
  %convert.3255 = f32[1,4096,4096]{2,1,0} convert(%multiply.6502)
  %multiply.6503 = f32[1,4096,4096]{2,1,0} multiply(%convert.3255, %broadcast.9995)
  %multiply.6504 = f32[1,4096,4096]{2,1,0} multiply(%convert.2535, %convert.3255)
  %reduce.1323 = f32[1,4096]{1,0} reduce(%multiply.6504, %constant.3956), dimensions={2}, to_apply=%region_1161.29570
  %reshape.20741 = f32[1,4096,1]{2,1,0} reshape(%reduce.1323)
  %divide.1059 = f32[1,4096,1]{2,1,0} divide(%rsqrt.191, %reshape.20370)
  %multiply.6505 = f32[1,4096,1]{2,1,0} multiply(%divide.1059, %broadcast.7210)
  %multiply.6506 = f32[1,4096,1]{2,1,0} multiply(%reshape.20741, %multiply.6505)
  %multiply.6507 = f32[1,4096,1]{2,1,0} multiply(%multiply.6506, %broadcast.7211)
  %reshape.20742 = f32[1,4096]{1,0} reshape(%multiply.6507)
  %broadcast.10077 = f32[1,4096,4096]{2,1,0} broadcast(%reshape.20742), dimensions={0,1}
  %multiply.6508 = f32[1,4096,4096]{2,1,0} multiply(%convert.2535, %broadcast.10077)
  %add.5462 = f32[1,4096,4096]{2,1,0} add(%multiply.6503, %multiply.6508)
  %convert.3256 = bf16[1,4096,4096]{2,1,0} convert(%add.5462)
  %add.5463 = bf16[1,4096,4096]{2,1,0} add(%add.5106, %convert.3256)
  %copy.4297 = bf16[1,4096,4096]{2,1,0} copy(%add.5463)
  %copy.4298 = bf16[1,4096,4096]{2,1,0} copy(%copy.4297)
  %dot.1388 = bf16[32000,4096]{1,0} dot(%convert.576, %copy.4298), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.484 = bf16[32000,4096]{1,0} all-reduce(%dot.1388), channel_id=1575, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.161.clone
  %dynamic-slice.2661 = bf16[32000,512]{1,0} dynamic-slice(%all-reduce.484, %constant.3783, %reshape.20494), dynamic_slice_sizes={32000,512}
  %multiply.6509 = bf16[32000,512]{0,1} multiply(%dynamic-slice.2661, %dynamic-slice.2661)
  %convert.3257 = f32[32000,512]{0,1} convert(%multiply.6509)
  %reduce.1324 = f32[] reduce(%convert.3257, %constant.3956), dimensions={0,1}, to_apply=%region_1485.32495
  %all-reduce.485 = f32[] all-reduce(%reduce.1324), channel_id=1576, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1485.32495.clone
  %convert.3258 = bf16[] convert(%all-reduce.485)
  %add.5464 = bf16[] add(%add.5461, %convert.3258)
  %sqrt.0 = bf16[] sqrt(%add.5464)
  %compare.3990 = pred[] compare(%sqrt.0, %constant.4121), direction=LT
  %broadcast.10079 = pred[4096]{0} broadcast(%compare.3990), dimensions={}
  %broadcast.10081 = bf16[4096]{0} broadcast(%sqrt.0), dimensions={}
  %divide.1060 = bf16[4096]{0} divide(%all-reduce.1, %broadcast.10081)
  %select.2584 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.1, %divide.1060)
  %constant.20349 = bf16[] constant(0.1001)
  %broadcast.10083 = bf16[4096]{0} broadcast(%constant.20349), dimensions={}
  %multiply.6510 = bf16[4096]{0} multiply(%select.2584, %broadcast.10083)
  %param.330 = bf16[4096]{0} parameter(325), sharding={replicated}
  %constant.20350 = bf16[] constant(0.8984)
  %broadcast.10085 = bf16[4096]{0} broadcast(%constant.20350), dimensions={}
  %multiply.6511 = bf16[4096]{0} multiply(%param.330, %broadcast.10085)
  %add.5465 = bf16[4096]{0} add(%multiply.6510, %multiply.6511)
  %constant.20352 = f32[] constant(0.9)
  %param.331 = s32[] parameter(324), sharding={replicated}
  %constant.20353 = s32[] constant(2147483647)
  %compare.3991 = pred[] compare(%param.331, %constant.20353), direction=LT
  %add.5466 = s32[] add(%param.331, %constant.3779)
  %select.2585 = s32[] select(%compare.3991, %add.5466, %constant.20353)
  %convert.3259 = f32[] convert(%select.2585)
  %power.128 = f32[] power(%constant.20352, %convert.3259)
  %subtract.707 = f32[] subtract(%constant.3781, %power.128)
  %convert.3260 = bf16[] convert(%subtract.707)
  %broadcast.10086 = bf16[4096]{0} broadcast(%convert.3260), dimensions={}
  %multiply.6512 = bf16[4096]{0} multiply(%select.2584, %select.2584)
  %constant.20356 = bf16[] constant(0.05005)
  %broadcast.10088 = bf16[4096]{0} broadcast(%constant.20356), dimensions={}
  %multiply.6513 = bf16[4096]{0} multiply(%multiply.6512, %broadcast.10088)
  %param.332 = bf16[4096]{0} parameter(648), sharding={replicated}
  %constant.20357 = bf16[] constant(0.9492)
  %broadcast.10090 = bf16[4096]{0} broadcast(%constant.20357), dimensions={}
  %multiply.6514 = bf16[4096]{0} multiply(%param.332, %broadcast.10090)
  %add.5468 = bf16[4096]{0} add(%multiply.6513, %multiply.6514)
  %constant.20359 = f32[] constant(0.95)
  %power.129 = f32[] power(%constant.20359, %convert.3259)
  %subtract.708 = f32[] subtract(%constant.3781, %power.129)
  %convert.3262 = bf16[] convert(%subtract.708)
  %broadcast.10092 = bf16[4096]{0} broadcast(%convert.3262), dimensions={}
  %divide.1061 = bf16[4096]{0} divide(%add.5468, %broadcast.10092)
  %sqrt.1 = bf16[4096]{0} sqrt(%divide.1061)
  %constant.20360 = bf16[] constant(1.001e-08)
  %broadcast.10094 = bf16[4096]{0} broadcast(%constant.20360), dimensions={}
  %add.5469 = bf16[4096]{0} add(%sqrt.1, %broadcast.10094)
  %multiply.6515 = bf16[4096]{0} multiply(%broadcast.10086, %add.5469)
  %divide.1062 = bf16[4096]{0} divide(%add.5465, %multiply.6515)
  %multiply.6516 = bf16[4096]{0} multiply(%param.1, %broadcast.10083)
  %add.5470 = bf16[4096]{0} add(%divide.1062, %multiply.6516)
  %multiply.6517 = bf16[4096]{0} multiply(%broadcast.5338, %add.5470)
  %add.5471 = bf16[4096]{0} add(%param.1, %multiply.6517)
  %broadcast.10095 = bf16[512,8]{1,0} broadcast(%convert.575), dimensions={}
  %broadcast.10096 = pred[512,8]{0,1} broadcast(%compare.3990), dimensions={}
  %broadcast.10097 = bf16[512,8]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1063 = bf16[512,8]{0,1} divide(%dynamic-slice.2331, %broadcast.10097)
  %select.2586 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2331, %divide.1063)
  %broadcast.10098 = bf16[512,8]{1,0} broadcast(%constant.20349), dimensions={}
  %multiply.6518 = bf16[512,8]{0,1} multiply(%select.2586, %broadcast.10098)
  %param.333 = bf16[512,8]{1,0} parameter(326), sharding={devices=[8,1]<=[8]}
  %broadcast.10099 = bf16[512,8]{1,0} broadcast(%constant.20350), dimensions={}
  %multiply.6519 = bf16[512,8]{1,0} multiply(%param.333, %broadcast.10099)
  %add.5472 = bf16[512,8]{0,1} add(%multiply.6518, %multiply.6519)
  %broadcast.10100 = bf16[512,8]{1,0} broadcast(%convert.3260), dimensions={}
  %multiply.6520 = bf16[512,8]{0,1} multiply(%select.2586, %select.2586)
  %broadcast.10101 = bf16[512,8]{1,0} broadcast(%constant.20356), dimensions={}
  %multiply.6521 = bf16[512,8]{0,1} multiply(%multiply.6520, %broadcast.10101)
  %param.334 = bf16[512,8]{1,0} parameter(649), sharding={devices=[8,1]<=[8]}
  %broadcast.10102 = bf16[512,8]{1,0} broadcast(%constant.20357), dimensions={}
  %multiply.6522 = bf16[512,8]{1,0} multiply(%param.334, %broadcast.10102)
  %add.5473 = bf16[512,8]{0,1} add(%multiply.6521, %multiply.6522)
  %broadcast.10103 = bf16[512,8]{1,0} broadcast(%convert.3262), dimensions={}
  %divide.1064 = bf16[512,8]{0,1} divide(%add.5473, %broadcast.10103)
  %sqrt.2 = bf16[512,8]{0,1} sqrt(%divide.1064)
  %broadcast.10104 = bf16[512,8]{1,0} broadcast(%constant.20360), dimensions={}
  %add.5475 = bf16[512,8]{0,1} add(%sqrt.2, %broadcast.10104)
  %multiply.6523 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.5475)
  %divide.1065 = bf16[512,8]{0,1} divide(%add.5472, %multiply.6523)
  %multiply.6524 = bf16[512,8]{1,0} multiply(%param.13, %broadcast.10098)
  %add.5476 = bf16[512,8]{0,1} add(%divide.1065, %multiply.6524)
  %multiply.6525 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.5476)
  %add.5477 = bf16[512,8]{1,0} add(%param.13, %multiply.6525)
  %broadcast.10106 = bf16[1,4096,14336]{2,1,0} broadcast(%convert.575), dimensions={}
  %broadcast.10109 = pred[1,4096,14336]{2,1,0} broadcast(%compare.3990), dimensions={}
  %broadcast.10111 = bf16[1,4096,14336]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1066 = bf16[1,4096,14336]{2,1,0} divide(%copy.4190, %broadcast.10111)
  %select.2587 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4190, %divide.1066)
  %broadcast.10112 = bf16[1,4096,14336]{2,1,0} broadcast(%constant.20349), dimensions={}
  %multiply.6526 = bf16[1,4096,14336]{2,1,0} multiply(%select.2587, %broadcast.10112)
  %param.335 = bf16[1,4096,14336]{2,1,0} parameter(327), sharding={devices=[8,1,1]<=[8]}
  %broadcast.10113 = bf16[1,4096,14336]{2,1,0} broadcast(%constant.20350), dimensions={}
  %multiply.6527 = bf16[1,4096,14336]{2,1,0} multiply(%param.335, %broadcast.10113)
  %add.5478 = bf16[1,4096,14336]{2,1,0} add(%multiply.6526, %multiply.6527)
  %broadcast.10114 = bf16[1,4096,14336]{2,1,0} broadcast(%convert.3260), dimensions={}
  %multiply.6528 = bf16[1,4096,14336]{2,1,0} multiply(%select.2587, %select.2587)
  %broadcast.10115 = bf16[1,4096,14336]{2,1,0} broadcast(%constant.20356), dimensions={}
  %multiply.6529 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6528, %broadcast.10115)
  %param.336 = bf16[1,4096,14336]{2,1,0} parameter(650), sharding={devices=[8,1,1]<=[8]}
  %broadcast.10116 = bf16[1,4096,14336]{2,1,0} broadcast(%constant.20357), dimensions={}
  %multiply.6530 = bf16[1,4096,14336]{2,1,0} multiply(%param.336, %broadcast.10116)
  %add.5480 = bf16[1,4096,14336]{2,1,0} add(%multiply.6529, %multiply.6530)
  %broadcast.10117 = bf16[1,4096,14336]{2,1,0} broadcast(%convert.3262), dimensions={}
  %divide.1067 = bf16[1,4096,14336]{2,1,0} divide(%add.5480, %broadcast.10117)
  %sqrt.3 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1067)
  %broadcast.10119 = bf16[1,4096,14336]{2,1,0} broadcast(%constant.20360), dimensions={}
  %add.5481 = bf16[1,4096,14336]{2,1,0} add(%sqrt.3, %broadcast.10119)
  %multiply.6531 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5481)
  %divide.1068 = bf16[1,4096,14336]{2,1,0} divide(%add.5478, %multiply.6531)
  %multiply.6532 = bf16[1,4096,14336]{2,1,0} multiply(%param.14, %broadcast.10112)
  %add.5482 = bf16[1,4096,14336]{2,1,0} add(%divide.1068, %multiply.6532)
  %multiply.6533 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5482)
  %add.5483 = bf16[1,4096,14336]{2,1,0} add(%param.14, %multiply.6533)
  %divide.1069 = bf16[1,4096,14336]{2,1,0} divide(%copy.4192, %broadcast.10111)
  %select.2588 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4192, %divide.1069)
  %multiply.6534 = bf16[1,4096,14336]{2,1,0} multiply(%select.2588, %broadcast.10112)
  %param.337 = bf16[1,4096,14336]{2,1,0} parameter(328), sharding={devices=[8,1,1]<=[8]}
  %multiply.6535 = bf16[1,4096,14336]{2,1,0} multiply(%param.337, %broadcast.10113)
  %add.5484 = bf16[1,4096,14336]{2,1,0} add(%multiply.6534, %multiply.6535)
  %multiply.6536 = bf16[1,4096,14336]{2,1,0} multiply(%select.2588, %select.2588)
  %multiply.6537 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6536, %broadcast.10115)
  %param.338 = bf16[1,4096,14336]{2,1,0} parameter(651), sharding={devices=[8,1,1]<=[8]}
  %multiply.6538 = bf16[1,4096,14336]{2,1,0} multiply(%param.338, %broadcast.10116)
  %add.5485 = bf16[1,4096,14336]{2,1,0} add(%multiply.6537, %multiply.6538)
  %divide.1070 = bf16[1,4096,14336]{2,1,0} divide(%add.5485, %broadcast.10117)
  %sqrt.4 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1070)
  %add.5486 = bf16[1,4096,14336]{2,1,0} add(%sqrt.4, %broadcast.10119)
  %multiply.6539 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5486)
  %divide.1071 = bf16[1,4096,14336]{2,1,0} divide(%add.5484, %multiply.6539)
  %multiply.6540 = bf16[1,4096,14336]{2,1,0} multiply(%param.15, %broadcast.10112)
  %add.5487 = bf16[1,4096,14336]{2,1,0} add(%divide.1071, %multiply.6540)
  %multiply.6541 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5487)
  %add.5488 = bf16[1,4096,14336]{2,1,0} add(%param.15, %multiply.6541)
  %broadcast.10130 = bf16[1,14336,4096]{2,1,0} broadcast(%convert.575), dimensions={}
  %broadcast.10132 = pred[1,14336,4096]{2,1,0} broadcast(%compare.3990), dimensions={}
  %broadcast.10134 = bf16[1,14336,4096]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1072 = bf16[1,14336,4096]{2,1,0} divide(%copy.4193, %broadcast.10134)
  %select.2589 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4193, %divide.1072)
  %broadcast.10135 = bf16[1,14336,4096]{2,1,0} broadcast(%constant.20349), dimensions={}
  %multiply.6542 = bf16[1,14336,4096]{2,1,0} multiply(%select.2589, %broadcast.10135)
  %param.339 = bf16[1,14336,4096]{2,1,0} parameter(329), sharding={devices=[8,1,1]<=[8]}
  %broadcast.10136 = bf16[1,14336,4096]{2,1,0} broadcast(%constant.20350), dimensions={}
  %multiply.6544 = bf16[1,14336,4096]{2,1,0} multiply(%param.339, %broadcast.10136)
  %add.5489 = bf16[1,14336,4096]{2,1,0} add(%multiply.6542, %multiply.6544)
  %broadcast.10137 = bf16[1,14336,4096]{2,1,0} broadcast(%convert.3260), dimensions={}
  %multiply.6545 = bf16[1,14336,4096]{2,1,0} multiply(%select.2589, %select.2589)
  %broadcast.10138 = bf16[1,14336,4096]{2,1,0} broadcast(%constant.20356), dimensions={}
  %multiply.6546 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.6545, %broadcast.10138)
  %param.340 = bf16[1,14336,4096]{2,1,0} parameter(652), sharding={devices=[8,1,1]<=[8]}
  %broadcast.10139 = bf16[1,14336,4096]{2,1,0} broadcast(%constant.20357), dimensions={}
  %multiply.6547 = bf16[1,14336,4096]{2,1,0} multiply(%param.340, %broadcast.10139)
  %add.5490 = bf16[1,14336,4096]{2,1,0} add(%multiply.6546, %multiply.6547)
  %broadcast.10140 = bf16[1,14336,4096]{2,1,0} broadcast(%convert.3262), dimensions={}
  %divide.1073 = bf16[1,14336,4096]{2,1,0} divide(%add.5490, %broadcast.10140)
  %sqrt.5 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1073)
  %broadcast.10141 = bf16[1,14336,4096]{2,1,0} broadcast(%constant.20360), dimensions={}
  %add.5491 = bf16[1,14336,4096]{2,1,0} add(%sqrt.5, %broadcast.10141)
  %multiply.6548 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.5491)
  %divide.1074 = bf16[1,14336,4096]{2,1,0} divide(%add.5489, %multiply.6548)
  %multiply.6549 = bf16[1,14336,4096]{2,1,0} multiply(%param.16, %broadcast.10135)
  %add.5492 = bf16[1,14336,4096]{2,1,0} add(%divide.1074, %multiply.6549)
  %multiply.6550 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.5492)
  %add.5493 = bf16[1,14336,4096]{2,1,0} add(%param.16, %multiply.6550)
  %divide.1075 = bf16[4096]{0} divide(%all-reduce.7, %broadcast.10081)
  %select.2590 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.7, %divide.1075)
  %multiply.6551 = bf16[4096]{0} multiply(%select.2590, %broadcast.10083)
  %param.341 = bf16[4096]{0} parameter(330), sharding={replicated}
  %multiply.6552 = bf16[4096]{0} multiply(%param.341, %broadcast.10085)
  %add.5494 = bf16[4096]{0} add(%multiply.6551, %multiply.6552)
  %multiply.6553 = bf16[4096]{0} multiply(%select.2590, %select.2590)
  %multiply.6554 = bf16[4096]{0} multiply(%multiply.6553, %broadcast.10088)
  %param.342 = bf16[4096]{0} parameter(653), sharding={replicated}
  %multiply.6555 = bf16[4096]{0} multiply(%param.342, %broadcast.10090)
  %add.5495 = bf16[4096]{0} add(%multiply.6554, %multiply.6555)
  %divide.1076 = bf16[4096]{0} divide(%add.5495, %broadcast.10092)
  %sqrt.6 = bf16[4096]{0} sqrt(%divide.1076)
  %add.5496 = bf16[4096]{0} add(%sqrt.6, %broadcast.10094)
  %multiply.6557 = bf16[4096]{0} multiply(%broadcast.10086, %add.5496)
  %divide.1077 = bf16[4096]{0} divide(%add.5494, %multiply.6557)
  %multiply.6558 = bf16[4096]{0} multiply(%param.12, %broadcast.10083)
  %add.5497 = bf16[4096]{0} add(%divide.1077, %multiply.6558)
  %multiply.6559 = bf16[4096]{0} multiply(%broadcast.5338, %add.5497)
  %add.5498 = bf16[4096]{0} add(%param.12, %multiply.6559)
  %divide.1078 = bf16[4096]{0} divide(%all-reduce.8, %broadcast.10081)
  %select.2591 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.8, %divide.1078)
  %multiply.6560 = bf16[4096]{0} multiply(%select.2591, %broadcast.10083)
  %param.343 = bf16[4096]{0} parameter(331), sharding={replicated}
  %multiply.6561 = bf16[4096]{0} multiply(%param.343, %broadcast.10085)
  %add.5499 = bf16[4096]{0} add(%multiply.6560, %multiply.6561)
  %multiply.6563 = bf16[4096]{0} multiply(%select.2591, %select.2591)
  %multiply.6564 = bf16[4096]{0} multiply(%multiply.6563, %broadcast.10088)
  %param.344 = bf16[4096]{0} parameter(654), sharding={replicated}
  %multiply.6565 = bf16[4096]{0} multiply(%param.344, %broadcast.10090)
  %add.5500 = bf16[4096]{0} add(%multiply.6564, %multiply.6565)
  %divide.1079 = bf16[4096]{0} divide(%add.5500, %broadcast.10092)
  %sqrt.7 = bf16[4096]{0} sqrt(%divide.1079)
  %add.5501 = bf16[4096]{0} add(%sqrt.7, %broadcast.10094)
  %multiply.6566 = bf16[4096]{0} multiply(%broadcast.10086, %add.5501)
  %divide.1080 = bf16[4096]{0} divide(%add.5499, %multiply.6566)
  %multiply.6567 = bf16[4096]{0} multiply(%param.5, %broadcast.10083)
  %add.5502 = bf16[4096]{0} add(%divide.1080, %multiply.6567)
  %multiply.6568 = bf16[4096]{0} multiply(%broadcast.5338, %add.5502)
  %add.5503 = bf16[4096]{0} add(%param.5, %multiply.6568)
  %broadcast.10160 = bf16[512,8,128]{2,1,0} broadcast(%convert.575), dimensions={}
  %broadcast.10161 = pred[512,8,128]{0,2,1} broadcast(%compare.3990), dimensions={}
  %broadcast.10162 = bf16[512,8,128]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1081 = bf16[512,8,128]{0,2,1} divide(%transpose.320, %broadcast.10162)
  %select.2592 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.320, %divide.1081)
  %broadcast.10163 = bf16[512,8,128]{2,1,0} broadcast(%constant.20349), dimensions={}
  %multiply.6569 = bf16[512,8,128]{0,2,1} multiply(%select.2592, %broadcast.10163)
  %param.345 = bf16[512,8,128]{2,1,0} parameter(332), sharding={devices=[8,1,1]<=[8]}
  %broadcast.10164 = bf16[512,8,128]{2,1,0} broadcast(%constant.20350), dimensions={}
  %multiply.6570 = bf16[512,8,128]{2,1,0} multiply(%param.345, %broadcast.10164)
  %add.5504 = bf16[512,8,128]{0,2,1} add(%multiply.6569, %multiply.6570)
  %broadcast.10165 = bf16[512,8,128]{2,1,0} broadcast(%convert.3260), dimensions={}
  %multiply.6571 = bf16[512,8,128]{0,2,1} multiply(%select.2592, %select.2592)
  %broadcast.10166 = bf16[512,8,128]{2,1,0} broadcast(%constant.20356), dimensions={}
  %multiply.6572 = bf16[512,8,128]{0,2,1} multiply(%multiply.6571, %broadcast.10166)
  %param.346 = bf16[512,8,128]{2,1,0} parameter(655), sharding={devices=[8,1,1]<=[8]}
  %broadcast.10167 = bf16[512,8,128]{2,1,0} broadcast(%constant.20357), dimensions={}
  %multiply.6573 = bf16[512,8,128]{2,1,0} multiply(%param.346, %broadcast.10167)
  %add.5505 = bf16[512,8,128]{0,2,1} add(%multiply.6572, %multiply.6573)
  %broadcast.10168 = bf16[512,8,128]{2,1,0} broadcast(%convert.3262), dimensions={}
  %divide.1082 = bf16[512,8,128]{0,2,1} divide(%add.5505, %broadcast.10168)
  %sqrt.8 = bf16[512,8,128]{0,2,1} sqrt(%divide.1082)
  %broadcast.10169 = bf16[512,8,128]{2,1,0} broadcast(%constant.20360), dimensions={}
  %add.5506 = bf16[512,8,128]{0,2,1} add(%sqrt.8, %broadcast.10169)
  %multiply.6574 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5506)
  %divide.1083 = bf16[512,8,128]{0,2,1} divide(%add.5504, %multiply.6574)
  %multiply.6575 = bf16[512,8,128]{2,1,0} multiply(%param.8, %broadcast.10163)
  %add.5507 = bf16[512,8,128]{0,2,1} add(%divide.1083, %multiply.6575)
  %multiply.6576 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5507)
  %add.5508 = bf16[512,8,128]{2,1,0} add(%param.8, %multiply.6576)
  %broadcast.10170 = bf16[32,128,512]{2,1,0} broadcast(%convert.575), dimensions={}
  %broadcast.10171 = pred[32,128,512]{1,0,2} broadcast(%compare.3990), dimensions={}
  %broadcast.10172 = bf16[32,128,512]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1084 = bf16[32,128,512]{1,0,2} divide(%transpose.321, %broadcast.10172)
  %select.2593 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.321, %divide.1084)
  %broadcast.10173 = bf16[32,128,512]{2,1,0} broadcast(%constant.20349), dimensions={}
  %multiply.6577 = bf16[32,128,512]{1,0,2} multiply(%select.2593, %broadcast.10173)
  %param.347 = bf16[32,128,512]{2,1,0} parameter(333), sharding={devices=[1,1,8]<=[8]}
  %broadcast.10174 = bf16[32,128,512]{2,1,0} broadcast(%constant.20350), dimensions={}
  %multiply.6578 = bf16[32,128,512]{2,1,0} multiply(%param.347, %broadcast.10174)
  %add.5509 = bf16[32,128,512]{1,0,2} add(%multiply.6577, %multiply.6578)
  %broadcast.10175 = bf16[32,128,512]{2,1,0} broadcast(%convert.3260), dimensions={}
  %multiply.6579 = bf16[32,128,512]{1,0,2} multiply(%select.2593, %select.2593)
  %broadcast.10176 = bf16[32,128,512]{2,1,0} broadcast(%constant.20356), dimensions={}
  %multiply.6580 = bf16[32,128,512]{1,0,2} multiply(%multiply.6579, %broadcast.10176)
  %param.348 = bf16[32,128,512]{2,1,0} parameter(656), sharding={devices=[1,1,8]<=[8]}
  %broadcast.10177 = bf16[32,128,512]{2,1,0} broadcast(%constant.20357), dimensions={}
  %multiply.6581 = bf16[32,128,512]{2,1,0} multiply(%param.348, %broadcast.10177)
  %add.5510 = bf16[32,128,512]{1,0,2} add(%multiply.6580, %multiply.6581)
  %broadcast.10178 = bf16[32,128,512]{2,1,0} broadcast(%convert.3262), dimensions={}
  %divide.1085 = bf16[32,128,512]{1,0,2} divide(%add.5510, %broadcast.10178)
  %sqrt.9 = bf16[32,128,512]{1,0,2} sqrt(%divide.1085)
  %broadcast.10179 = bf16[32,128,512]{2,1,0} broadcast(%constant.20360), dimensions={}
  %add.5511 = bf16[32,128,512]{1,0,2} add(%sqrt.9, %broadcast.10179)
  %multiply.6582 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.5511)
  %divide.1086 = bf16[32,128,512]{1,0,2} divide(%add.5509, %multiply.6582)
  %multiply.6583 = bf16[32,128,512]{2,1,0} multiply(%param.11, %broadcast.10173)
  %add.5512 = bf16[32,128,512]{1,0,2} add(%divide.1086, %multiply.6583)
  %multiply.6584 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.5512)
  %add.5513 = bf16[32,128,512]{2,1,0} add(%param.11, %multiply.6584)
  %broadcast.10180 = bf16[512,32,128]{2,1,0} broadcast(%convert.575), dimensions={}
  %broadcast.10181 = pred[512,32,128]{0,2,1} broadcast(%compare.3990), dimensions={}
  %broadcast.10182 = bf16[512,32,128]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.1087 = bf16[512,32,128]{0,2,1} divide(%transpose.322, %broadcast.10182)
  %select.2594 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.322, %divide.1087)
  %broadcast.10183 = bf16[512,32,128]{2,1,0} broadcast(%constant.20349), dimensions={}
  %multiply.6585 = bf16[512,32,128]{0,2,1} multiply(%select.2594, %broadcast.10183)
  %param.349 = bf16[512,32,128]{2,1,0} parameter(334), sharding={devices=[8,1,1]<=[8]}
  %broadcast.10184 = bf16[512,32,128]{2,1,0} broadcast(%constant.20350), dimensions={}
  %multiply.6586 = bf16[512,32,128]{2,1,0} multiply(%param.349, %broadcast.10184)
  %add.5514 = bf16[512,32,128]{0,2,1} add(%multiply.6585, %multiply.6586)
  %broadcast.10185 = bf16[512,32,128]{2,1,0} broadcast(%convert.3260), dimensions={}
  %multiply.6587 = bf16[512,32,128]{0,2,1} multiply(%select.2594, %select.2594)
  %broadcast.10186 = bf16[512,32,128]{2,1,0} broadcast(%constant.20356), dimensions={}
  %multiply.6588 = bf16[512,32,128]{0,2,1} multiply(%multiply.6587, %broadcast.10186)
  %param.350 = bf16[512,32,128]{2,1,0} parameter(657), sharding={devices=[8,1,1]<=[8]}
  %broadcast.10187 = bf16[512,32,128]{2,1,0} broadcast(%constant.20357), dimensions={}
  %multiply.6589 = bf16[512,32,128]{2,1,0} multiply(%param.350, %broadcast.10187)
  %add.5515 = bf16[512,32,128]{0,2,1} add(%multiply.6588, %multiply.6589)
  %broadcast.10188 = bf16[512,32,128]{2,1,0} broadcast(%convert.3262), dimensions={}
  %divide.1088 = bf16[512,32,128]{0,2,1} divide(%add.5515, %broadcast.10188)
  %sqrt.10 = bf16[512,32,128]{0,2,1} sqrt(%divide.1088)
  %broadcast.10189 = bf16[512,32,128]{2,1,0} broadcast(%constant.20360), dimensions={}
  %add.5516 = bf16[512,32,128]{0,2,1} add(%sqrt.10, %broadcast.10189)
  %multiply.6590 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.5516)
  %divide.1089 = bf16[512,32,128]{0,2,1} divide(%add.5514, %multiply.6590)
  %multiply.6591 = bf16[512,32,128]{2,1,0} multiply(%param.6, %broadcast.10183)
  %add.5517 = bf16[512,32,128]{0,2,1} add(%divide.1089, %multiply.6591)
  %multiply.6592 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.5517)
  %add.5518 = bf16[512,32,128]{2,1,0} add(%param.6, %multiply.6592)
  %divide.1090 = bf16[512,8,128]{0,2,1} divide(%transpose.323, %broadcast.10162)
  %select.2595 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.323, %divide.1090)
  %multiply.6593 = bf16[512,8,128]{0,2,1} multiply(%select.2595, %broadcast.10163)
  %param.351 = bf16[512,8,128]{2,1,0} parameter(335), sharding={devices=[8,1,1]<=[8]}
  %multiply.6594 = bf16[512,8,128]{2,1,0} multiply(%param.351, %broadcast.10164)
  %add.5519 = bf16[512,8,128]{0,2,1} add(%multiply.6593, %multiply.6594)
  %multiply.6595 = bf16[512,8,128]{0,2,1} multiply(%select.2595, %select.2595)
  %multiply.6596 = bf16[512,8,128]{0,2,1} multiply(%multiply.6595, %broadcast.10166)
  %param.352 = bf16[512,8,128]{2,1,0} parameter(658), sharding={devices=[8,1,1]<=[8]}
  %multiply.6597 = bf16[512,8,128]{2,1,0} multiply(%param.352, %broadcast.10167)
  %add.5520 = bf16[512,8,128]{0,2,1} add(%multiply.6596, %multiply.6597)
  %divide.1091 = bf16[512,8,128]{0,2,1} divide(%add.5520, %broadcast.10168)
  %sqrt.11 = bf16[512,8,128]{0,2,1} sqrt(%divide.1091)
  %add.5521 = bf16[512,8,128]{0,2,1} add(%sqrt.11, %broadcast.10169)
  %multiply.6598 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5521)
  %divide.1092 = bf16[512,8,128]{0,2,1} divide(%add.5519, %multiply.6598)
  %multiply.6599 = bf16[512,8,128]{2,1,0} multiply(%param.9, %broadcast.10163)
  %add.5522 = bf16[512,8,128]{0,2,1} add(%divide.1092, %multiply.6599)
  %multiply.6600 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5522)
  %add.5523 = bf16[512,8,128]{2,1,0} add(%param.9, %multiply.6600)
  %divide.1093 = bf16[512,8]{0,1} divide(%dynamic-slice.2349, %broadcast.10097)
  %select.2596 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2349, %divide.1093)
  %multiply.6601 = bf16[512,8]{0,1} multiply(%select.2596, %broadcast.10098)
  %param.353 = bf16[512,8]{1,0} parameter(336), sharding={devices=[8,1]<=[8]}
  %multiply.6602 = bf16[512,8]{1,0} multiply(%param.353, %broadcast.10099)
  %add.5524 = bf16[512,8]{0,1} add(%multiply.6601, %multiply.6602)
  %multiply.6603 = bf16[512,8]{0,1} multiply(%select.2596, %select.2596)
  %multiply.6604 = bf16[512,8]{0,1} multiply(%multiply.6603, %broadcast.10101)
  %param.354 = bf16[512,8]{1,0} parameter(659), sharding={devices=[8,1]<=[8]}
  %multiply.6605 = bf16[512,8]{1,0} multiply(%param.354, %broadcast.10102)
  %add.5525 = bf16[512,8]{0,1} add(%multiply.6604, %multiply.6605)
  %divide.1094 = bf16[512,8]{0,1} divide(%add.5525, %broadcast.10103)
  %sqrt.12 = bf16[512,8]{0,1} sqrt(%divide.1094)
  %add.5526 = bf16[512,8]{0,1} add(%sqrt.12, %broadcast.10104)
  %multiply.6606 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.5526)
  %divide.1095 = bf16[512,8]{0,1} divide(%add.5524, %multiply.6606)
  %multiply.6607 = bf16[512,8]{1,0} multiply(%param.23, %broadcast.10098)
  %add.5527 = bf16[512,8]{0,1} add(%divide.1095, %multiply.6607)
  %multiply.6608 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.5527)
  %add.5528 = bf16[512,8]{1,0} add(%param.23, %multiply.6608)
  %divide.1096 = bf16[1,4096,14336]{2,1,0} divide(%copy.4204, %broadcast.10111)
  %select.2597 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4204, %divide.1096)
  %multiply.6609 = bf16[1,4096,14336]{2,1,0} multiply(%select.2597, %broadcast.10112)
  %param.355 = bf16[1,4096,14336]{2,1,0} parameter(337), sharding={devices=[8,1,1]<=[8]}
  %multiply.6610 = bf16[1,4096,14336]{2,1,0} multiply(%param.355, %broadcast.10113)
  %add.5529 = bf16[1,4096,14336]{2,1,0} add(%multiply.6609, %multiply.6610)
  %multiply.6611 = bf16[1,4096,14336]{2,1,0} multiply(%select.2597, %select.2597)
  %multiply.6612 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6611, %broadcast.10115)
  %param.356 = bf16[1,4096,14336]{2,1,0} parameter(660), sharding={devices=[8,1,1]<=[8]}
  %multiply.6613 = bf16[1,4096,14336]{2,1,0} multiply(%param.356, %broadcast.10116)
  %add.5530 = bf16[1,4096,14336]{2,1,0} add(%multiply.6612, %multiply.6613)
  %divide.1097 = bf16[1,4096,14336]{2,1,0} divide(%add.5530, %broadcast.10117)
  %sqrt.13 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1097)
  %add.5531 = bf16[1,4096,14336]{2,1,0} add(%sqrt.13, %broadcast.10119)
  %multiply.6614 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5531)
  %divide.1098 = bf16[1,4096,14336]{2,1,0} divide(%add.5529, %multiply.6614)
  %multiply.6615 = bf16[1,4096,14336]{2,1,0} multiply(%param.24, %broadcast.10112)
  %add.5532 = bf16[1,4096,14336]{2,1,0} add(%divide.1098, %multiply.6615)
  %multiply.6616 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5532)
  %add.5533 = bf16[1,4096,14336]{2,1,0} add(%param.24, %multiply.6616)
  %divide.1099 = bf16[1,4096,14336]{2,1,0} divide(%copy.4205, %broadcast.10111)
  %select.2598 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4205, %divide.1099)
  %multiply.6617 = bf16[1,4096,14336]{2,1,0} multiply(%select.2598, %broadcast.10112)
  %param.357 = bf16[1,4096,14336]{2,1,0} parameter(338), sharding={devices=[8,1,1]<=[8]}
  %multiply.6618 = bf16[1,4096,14336]{2,1,0} multiply(%param.357, %broadcast.10113)
  %add.5534 = bf16[1,4096,14336]{2,1,0} add(%multiply.6617, %multiply.6618)
  %multiply.6619 = bf16[1,4096,14336]{2,1,0} multiply(%select.2598, %select.2598)
  %multiply.6620 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6619, %broadcast.10115)
  %param.358 = bf16[1,4096,14336]{2,1,0} parameter(661), sharding={devices=[8,1,1]<=[8]}
  %multiply.6621 = bf16[1,4096,14336]{2,1,0} multiply(%param.358, %broadcast.10116)
  %add.5536 = bf16[1,4096,14336]{2,1,0} add(%multiply.6620, %multiply.6621)
  %divide.1100 = bf16[1,4096,14336]{2,1,0} divide(%add.5536, %broadcast.10117)
  %sqrt.14 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1100)
  %add.5537 = bf16[1,4096,14336]{2,1,0} add(%sqrt.14, %broadcast.10119)
  %multiply.6622 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5537)
  %divide.1101 = bf16[1,4096,14336]{2,1,0} divide(%add.5534, %multiply.6622)
  %multiply.6623 = bf16[1,4096,14336]{2,1,0} multiply(%param.25, %broadcast.10112)
  %add.5538 = bf16[1,4096,14336]{2,1,0} add(%divide.1101, %multiply.6623)
  %multiply.6624 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5538)
  %add.5539 = bf16[1,4096,14336]{2,1,0} add(%param.25, %multiply.6624)
  %divide.1102 = bf16[1,14336,4096]{2,1,0} divide(%copy.4206, %broadcast.10134)
  %select.2599 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4206, %divide.1102)
  %multiply.6625 = bf16[1,14336,4096]{2,1,0} multiply(%select.2599, %broadcast.10135)
  %param.359 = bf16[1,14336,4096]{2,1,0} parameter(339), sharding={devices=[8,1,1]<=[8]}
  %multiply.6626 = bf16[1,14336,4096]{2,1,0} multiply(%param.359, %broadcast.10136)
  %add.5540 = bf16[1,14336,4096]{2,1,0} add(%multiply.6625, %multiply.6626)
  %multiply.6627 = bf16[1,14336,4096]{2,1,0} multiply(%select.2599, %select.2599)
  %multiply.6628 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.6627, %broadcast.10138)
  %param.360 = bf16[1,14336,4096]{2,1,0} parameter(662), sharding={devices=[8,1,1]<=[8]}
  %multiply.6629 = bf16[1,14336,4096]{2,1,0} multiply(%param.360, %broadcast.10139)
  %add.5541 = bf16[1,14336,4096]{2,1,0} add(%multiply.6628, %multiply.6629)
  %divide.1103 = bf16[1,14336,4096]{2,1,0} divide(%add.5541, %broadcast.10140)
  %sqrt.15 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1103)
  %add.5542 = bf16[1,14336,4096]{2,1,0} add(%sqrt.15, %broadcast.10141)
  %multiply.6630 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.5542)
  %divide.1104 = bf16[1,14336,4096]{2,1,0} divide(%add.5540, %multiply.6630)
  %multiply.6631 = bf16[1,14336,4096]{2,1,0} multiply(%param.26, %broadcast.10135)
  %add.5543 = bf16[1,14336,4096]{2,1,0} add(%divide.1104, %multiply.6631)
  %multiply.6632 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.5543)
  %add.5544 = bf16[1,14336,4096]{2,1,0} add(%param.26, %multiply.6632)
  %divide.1105 = bf16[4096]{0} divide(%all-reduce.22, %broadcast.10081)
  %select.2600 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.22, %divide.1105)
  %multiply.6633 = bf16[4096]{0} multiply(%select.2600, %broadcast.10083)
  %param.361 = bf16[4096]{0} parameter(340), sharding={replicated}
  %multiply.6634 = bf16[4096]{0} multiply(%param.361, %broadcast.10085)
  %add.5545 = bf16[4096]{0} add(%multiply.6633, %multiply.6634)
  %multiply.6635 = bf16[4096]{0} multiply(%select.2600, %select.2600)
  %multiply.6636 = bf16[4096]{0} multiply(%multiply.6635, %broadcast.10088)
  %param.362 = bf16[4096]{0} parameter(663), sharding={replicated}
  %multiply.6637 = bf16[4096]{0} multiply(%param.362, %broadcast.10090)
  %add.5546 = bf16[4096]{0} add(%multiply.6636, %multiply.6637)
  %divide.1106 = bf16[4096]{0} divide(%add.5546, %broadcast.10092)
  %sqrt.16 = bf16[4096]{0} sqrt(%divide.1106)
  %add.5547 = bf16[4096]{0} add(%sqrt.16, %broadcast.10094)
  %multiply.6638 = bf16[4096]{0} multiply(%broadcast.10086, %add.5547)
  %divide.1107 = bf16[4096]{0} divide(%add.5545, %multiply.6638)
  %multiply.6640 = bf16[4096]{0} multiply(%param.22, %broadcast.10083)
  %add.5548 = bf16[4096]{0} add(%divide.1107, %multiply.6640)
  %multiply.6641 = bf16[4096]{0} multiply(%broadcast.5338, %add.5548)
  %add.5549 = bf16[4096]{0} add(%param.22, %multiply.6641)
  %divide.1108 = bf16[4096]{0} divide(%all-reduce.23, %broadcast.10081)
  %select.2601 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.23, %divide.1108)
  %multiply.6642 = bf16[4096]{0} multiply(%select.2601, %broadcast.10083)
  %param.363 = bf16[4096]{0} parameter(341), sharding={replicated}
  %multiply.6643 = bf16[4096]{0} multiply(%param.363, %broadcast.10085)
  %add.5550 = bf16[4096]{0} add(%multiply.6642, %multiply.6643)
  %multiply.6644 = bf16[4096]{0} multiply(%select.2601, %select.2601)
  %multiply.6645 = bf16[4096]{0} multiply(%multiply.6644, %broadcast.10088)
  %param.364 = bf16[4096]{0} parameter(664), sharding={replicated}
  %multiply.6648 = bf16[4096]{0} multiply(%param.364, %broadcast.10090)
  %add.5551 = bf16[4096]{0} add(%multiply.6645, %multiply.6648)
  %divide.1109 = bf16[4096]{0} divide(%add.5551, %broadcast.10092)
  %sqrt.17 = bf16[4096]{0} sqrt(%divide.1109)
  %add.5552 = bf16[4096]{0} add(%sqrt.17, %broadcast.10094)
  %multiply.6649 = bf16[4096]{0} multiply(%broadcast.10086, %add.5552)
  %divide.1110 = bf16[4096]{0} divide(%add.5550, %multiply.6649)
  %multiply.6650 = bf16[4096]{0} multiply(%param.17, %broadcast.10083)
  %add.5553 = bf16[4096]{0} add(%divide.1110, %multiply.6650)
  %multiply.6651 = bf16[4096]{0} multiply(%broadcast.5338, %add.5553)
  %add.5554 = bf16[4096]{0} add(%param.17, %multiply.6651)
  %divide.1111 = bf16[512,8,128]{0,2,1} divide(%transpose.324, %broadcast.10162)
  %select.2602 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.324, %divide.1111)
  %multiply.6652 = bf16[512,8,128]{0,2,1} multiply(%select.2602, %broadcast.10163)
  %param.365 = bf16[512,8,128]{2,1,0} parameter(342), sharding={devices=[8,1,1]<=[8]}
  %multiply.6653 = bf16[512,8,128]{2,1,0} multiply(%param.365, %broadcast.10164)
  %add.5555 = bf16[512,8,128]{0,2,1} add(%multiply.6652, %multiply.6653)
  %multiply.6655 = bf16[512,8,128]{0,2,1} multiply(%select.2602, %select.2602)
  %multiply.6656 = bf16[512,8,128]{0,2,1} multiply(%multiply.6655, %broadcast.10166)
  %param.366 = bf16[512,8,128]{2,1,0} parameter(665), sharding={devices=[8,1,1]<=[8]}
  %multiply.6657 = bf16[512,8,128]{2,1,0} multiply(%param.366, %broadcast.10167)
  %add.5556 = bf16[512,8,128]{0,2,1} add(%multiply.6656, %multiply.6657)
  %divide.1112 = bf16[512,8,128]{0,2,1} divide(%add.5556, %broadcast.10168)
  %sqrt.18 = bf16[512,8,128]{0,2,1} sqrt(%divide.1112)
  %add.5557 = bf16[512,8,128]{0,2,1} add(%sqrt.18, %broadcast.10169)
  %multiply.6658 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5557)
  %divide.1113 = bf16[512,8,128]{0,2,1} divide(%add.5555, %multiply.6658)
  %multiply.6659 = bf16[512,8,128]{2,1,0} multiply(%param.19, %broadcast.10163)
  %add.5558 = bf16[512,8,128]{0,2,1} add(%divide.1113, %multiply.6659)
  %multiply.6660 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5558)
  %add.5559 = bf16[512,8,128]{2,1,0} add(%param.19, %multiply.6660)
  %divide.1114 = bf16[32,128,512]{1,0,2} divide(%transpose.325, %broadcast.10172)
  %select.2603 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.325, %divide.1114)
  %multiply.6662 = bf16[32,128,512]{1,0,2} multiply(%select.2603, %broadcast.10173)
  %param.367 = bf16[32,128,512]{2,1,0} parameter(343), sharding={devices=[1,1,8]<=[8]}
  %multiply.6663 = bf16[32,128,512]{2,1,0} multiply(%param.367, %broadcast.10174)
  %add.5560 = bf16[32,128,512]{1,0,2} add(%multiply.6662, %multiply.6663)
  %multiply.6664 = bf16[32,128,512]{1,0,2} multiply(%select.2603, %select.2603)
  %multiply.6665 = bf16[32,128,512]{1,0,2} multiply(%multiply.6664, %broadcast.10176)
  %param.368 = bf16[32,128,512]{2,1,0} parameter(666), sharding={devices=[1,1,8]<=[8]}
  %multiply.6666 = bf16[32,128,512]{2,1,0} multiply(%param.368, %broadcast.10177)
  %add.5561 = bf16[32,128,512]{1,0,2} add(%multiply.6665, %multiply.6666)
  %divide.1115 = bf16[32,128,512]{1,0,2} divide(%add.5561, %broadcast.10178)
  %sqrt.19 = bf16[32,128,512]{1,0,2} sqrt(%divide.1115)
  %add.5562 = bf16[32,128,512]{1,0,2} add(%sqrt.19, %broadcast.10179)
  %multiply.6667 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.5562)
  %divide.1116 = bf16[32,128,512]{1,0,2} divide(%add.5560, %multiply.6667)
  %multiply.6668 = bf16[32,128,512]{2,1,0} multiply(%param.21, %broadcast.10173)
  %add.5563 = bf16[32,128,512]{1,0,2} add(%divide.1116, %multiply.6668)
  %multiply.6669 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.5563)
  %add.5564 = bf16[32,128,512]{2,1,0} add(%param.21, %multiply.6669)
  %divide.1117 = bf16[512,32,128]{0,2,1} divide(%transpose.326, %broadcast.10182)
  %select.2604 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.326, %divide.1117)
  %multiply.6670 = bf16[512,32,128]{0,2,1} multiply(%select.2604, %broadcast.10183)
  %param.369 = bf16[512,32,128]{2,1,0} parameter(344), sharding={devices=[8,1,1]<=[8]}
  %multiply.6671 = bf16[512,32,128]{2,1,0} multiply(%param.369, %broadcast.10184)
  %add.5565 = bf16[512,32,128]{0,2,1} add(%multiply.6670, %multiply.6671)
  %multiply.6672 = bf16[512,32,128]{0,2,1} multiply(%select.2604, %select.2604)
  %multiply.6673 = bf16[512,32,128]{0,2,1} multiply(%multiply.6672, %broadcast.10186)
  %param.370 = bf16[512,32,128]{2,1,0} parameter(667), sharding={devices=[8,1,1]<=[8]}
  %multiply.6674 = bf16[512,32,128]{2,1,0} multiply(%param.370, %broadcast.10187)
  %add.5566 = bf16[512,32,128]{0,2,1} add(%multiply.6673, %multiply.6674)
  %divide.1118 = bf16[512,32,128]{0,2,1} divide(%add.5566, %broadcast.10188)
  %sqrt.20 = bf16[512,32,128]{0,2,1} sqrt(%divide.1118)
  %add.5567 = bf16[512,32,128]{0,2,1} add(%sqrt.20, %broadcast.10189)
  %multiply.6675 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.5567)
  %divide.1119 = bf16[512,32,128]{0,2,1} divide(%add.5565, %multiply.6675)
  %multiply.6676 = bf16[512,32,128]{2,1,0} multiply(%param.18, %broadcast.10183)
  %add.5568 = bf16[512,32,128]{0,2,1} add(%divide.1119, %multiply.6676)
  %multiply.6678 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.5568)
  %add.5569 = bf16[512,32,128]{2,1,0} add(%param.18, %multiply.6678)
  %divide.1120 = bf16[512,8,128]{0,2,1} divide(%transpose.327, %broadcast.10162)
  %select.2605 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.327, %divide.1120)
  %multiply.6679 = bf16[512,8,128]{0,2,1} multiply(%select.2605, %broadcast.10163)
  %param.371 = bf16[512,8,128]{2,1,0} parameter(345), sharding={devices=[8,1,1]<=[8]}
  %multiply.6680 = bf16[512,8,128]{2,1,0} multiply(%param.371, %broadcast.10164)
  %add.5570 = bf16[512,8,128]{0,2,1} add(%multiply.6679, %multiply.6680)
  %multiply.6681 = bf16[512,8,128]{0,2,1} multiply(%select.2605, %select.2605)
  %multiply.6682 = bf16[512,8,128]{0,2,1} multiply(%multiply.6681, %broadcast.10166)
  %param.372 = bf16[512,8,128]{2,1,0} parameter(668), sharding={devices=[8,1,1]<=[8]}
  %multiply.6683 = bf16[512,8,128]{2,1,0} multiply(%param.372, %broadcast.10167)
  %add.5571 = bf16[512,8,128]{0,2,1} add(%multiply.6682, %multiply.6683)
  %divide.1121 = bf16[512,8,128]{0,2,1} divide(%add.5571, %broadcast.10168)
  %sqrt.21 = bf16[512,8,128]{0,2,1} sqrt(%divide.1121)
  %add.5572 = bf16[512,8,128]{0,2,1} add(%sqrt.21, %broadcast.10169)
  %multiply.6684 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5572)
  %divide.1122 = bf16[512,8,128]{0,2,1} divide(%add.5570, %multiply.6684)
  %multiply.6685 = bf16[512,8,128]{2,1,0} multiply(%param.20, %broadcast.10163)
  %add.5573 = bf16[512,8,128]{0,2,1} add(%divide.1122, %multiply.6685)
  %multiply.6686 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5573)
  %add.5574 = bf16[512,8,128]{2,1,0} add(%param.20, %multiply.6686)
  %divide.1123 = bf16[512,8]{0,1} divide(%dynamic-slice.2359, %broadcast.10097)
  %select.2606 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2359, %divide.1123)
  %multiply.6688 = bf16[512,8]{0,1} multiply(%select.2606, %broadcast.10098)
  %param.373 = bf16[512,8]{1,0} parameter(346), sharding={devices=[8,1]<=[8]}
  %multiply.6689 = bf16[512,8]{1,0} multiply(%param.373, %broadcast.10099)
  %add.5576 = bf16[512,8]{0,1} add(%multiply.6688, %multiply.6689)
  %multiply.6690 = bf16[512,8]{0,1} multiply(%select.2606, %select.2606)
  %multiply.6691 = bf16[512,8]{0,1} multiply(%multiply.6690, %broadcast.10101)
  %param.374 = bf16[512,8]{1,0} parameter(669), sharding={devices=[8,1]<=[8]}
  %multiply.6692 = bf16[512,8]{1,0} multiply(%param.374, %broadcast.10102)
  %add.5577 = bf16[512,8]{0,1} add(%multiply.6691, %multiply.6692)
  %divide.1124 = bf16[512,8]{0,1} divide(%add.5577, %broadcast.10103)
  %sqrt.22 = bf16[512,8]{0,1} sqrt(%divide.1124)
  %add.5578 = bf16[512,8]{0,1} add(%sqrt.22, %broadcast.10104)
  %multiply.6693 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.5578)
  %divide.1125 = bf16[512,8]{0,1} divide(%add.5576, %multiply.6693)
  %multiply.6694 = bf16[512,8]{1,0} multiply(%param.113, %broadcast.10098)
  %add.5579 = bf16[512,8]{0,1} add(%divide.1125, %multiply.6694)
  %multiply.6695 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.5579)
  %add.5580 = bf16[512,8]{1,0} add(%param.113, %multiply.6695)
  %divide.1126 = bf16[1,4096,14336]{2,1,0} divide(%copy.4207, %broadcast.10111)
  %select.2607 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4207, %divide.1126)
  %multiply.6696 = bf16[1,4096,14336]{2,1,0} multiply(%select.2607, %broadcast.10112)
  %param.375 = bf16[1,4096,14336]{2,1,0} parameter(347), sharding={devices=[8,1,1]<=[8]}
  %multiply.6697 = bf16[1,4096,14336]{2,1,0} multiply(%param.375, %broadcast.10113)
  %add.5581 = bf16[1,4096,14336]{2,1,0} add(%multiply.6696, %multiply.6697)
  %multiply.6698 = bf16[1,4096,14336]{2,1,0} multiply(%select.2607, %select.2607)
  %multiply.6699 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6698, %broadcast.10115)
  %param.376 = bf16[1,4096,14336]{2,1,0} parameter(670), sharding={devices=[8,1,1]<=[8]}
  %multiply.6701 = bf16[1,4096,14336]{2,1,0} multiply(%param.376, %broadcast.10116)
  %add.5582 = bf16[1,4096,14336]{2,1,0} add(%multiply.6699, %multiply.6701)
  %divide.1127 = bf16[1,4096,14336]{2,1,0} divide(%add.5582, %broadcast.10117)
  %sqrt.23 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1127)
  %add.5583 = bf16[1,4096,14336]{2,1,0} add(%sqrt.23, %broadcast.10119)
  %multiply.6702 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5583)
  %divide.1128 = bf16[1,4096,14336]{2,1,0} divide(%add.5581, %multiply.6702)
  %multiply.6703 = bf16[1,4096,14336]{2,1,0} multiply(%param.114, %broadcast.10112)
  %add.5584 = bf16[1,4096,14336]{2,1,0} add(%divide.1128, %multiply.6703)
  %multiply.6704 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5584)
  %add.5585 = bf16[1,4096,14336]{2,1,0} add(%param.114, %multiply.6704)
  %divide.1129 = bf16[1,4096,14336]{2,1,0} divide(%copy.4208, %broadcast.10111)
  %select.2608 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4208, %divide.1129)
  %multiply.6705 = bf16[1,4096,14336]{2,1,0} multiply(%select.2608, %broadcast.10112)
  %param.377 = bf16[1,4096,14336]{2,1,0} parameter(348), sharding={devices=[8,1,1]<=[8]}
  %multiply.6707 = bf16[1,4096,14336]{2,1,0} multiply(%param.377, %broadcast.10113)
  %add.5586 = bf16[1,4096,14336]{2,1,0} add(%multiply.6705, %multiply.6707)
  %multiply.6708 = bf16[1,4096,14336]{2,1,0} multiply(%select.2608, %select.2608)
  %multiply.6709 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6708, %broadcast.10115)
  %param.378 = bf16[1,4096,14336]{2,1,0} parameter(671), sharding={devices=[8,1,1]<=[8]}
  %multiply.6710 = bf16[1,4096,14336]{2,1,0} multiply(%param.378, %broadcast.10116)
  %add.5587 = bf16[1,4096,14336]{2,1,0} add(%multiply.6709, %multiply.6710)
  %divide.1130 = bf16[1,4096,14336]{2,1,0} divide(%add.5587, %broadcast.10117)
  %sqrt.24 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1130)
  %add.5588 = bf16[1,4096,14336]{2,1,0} add(%sqrt.24, %broadcast.10119)
  %multiply.6711 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5588)
  %divide.1131 = bf16[1,4096,14336]{2,1,0} divide(%add.5586, %multiply.6711)
  %multiply.6712 = bf16[1,4096,14336]{2,1,0} multiply(%param.115, %broadcast.10112)
  %add.5589 = bf16[1,4096,14336]{2,1,0} add(%divide.1131, %multiply.6712)
  %multiply.6713 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5589)
  %add.5590 = bf16[1,4096,14336]{2,1,0} add(%param.115, %multiply.6713)
  %divide.1132 = bf16[1,14336,4096]{2,1,0} divide(%copy.4209, %broadcast.10134)
  %select.2609 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4209, %divide.1132)
  %multiply.6714 = bf16[1,14336,4096]{2,1,0} multiply(%select.2609, %broadcast.10135)
  %param.379 = bf16[1,14336,4096]{2,1,0} parameter(349), sharding={devices=[8,1,1]<=[8]}
  %multiply.6716 = bf16[1,14336,4096]{2,1,0} multiply(%param.379, %broadcast.10136)
  %add.5591 = bf16[1,14336,4096]{2,1,0} add(%multiply.6714, %multiply.6716)
  %multiply.6717 = bf16[1,14336,4096]{2,1,0} multiply(%select.2609, %select.2609)
  %multiply.6718 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.6717, %broadcast.10138)
  %param.380 = bf16[1,14336,4096]{2,1,0} parameter(672), sharding={devices=[8,1,1]<=[8]}
  %multiply.6719 = bf16[1,14336,4096]{2,1,0} multiply(%param.380, %broadcast.10139)
  %add.5592 = bf16[1,14336,4096]{2,1,0} add(%multiply.6718, %multiply.6719)
  %divide.1133 = bf16[1,14336,4096]{2,1,0} divide(%add.5592, %broadcast.10140)
  %sqrt.25 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1133)
  %add.5593 = bf16[1,14336,4096]{2,1,0} add(%sqrt.25, %broadcast.10141)
  %multiply.6720 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.5593)
  %divide.1134 = bf16[1,14336,4096]{2,1,0} divide(%add.5591, %multiply.6720)
  %multiply.6721 = bf16[1,14336,4096]{2,1,0} multiply(%param.116, %broadcast.10135)
  %add.5594 = bf16[1,14336,4096]{2,1,0} add(%divide.1134, %multiply.6721)
  %multiply.6722 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.5594)
  %add.5595 = bf16[1,14336,4096]{2,1,0} add(%param.116, %multiply.6722)
  %divide.1135 = bf16[4096]{0} divide(%all-reduce.37, %broadcast.10081)
  %select.2610 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.37, %divide.1135)
  %multiply.6723 = bf16[4096]{0} multiply(%select.2610, %broadcast.10083)
  %param.381 = bf16[4096]{0} parameter(350), sharding={replicated}
  %multiply.6724 = bf16[4096]{0} multiply(%param.381, %broadcast.10085)
  %add.5596 = bf16[4096]{0} add(%multiply.6723, %multiply.6724)
  %multiply.6725 = bf16[4096]{0} multiply(%select.2610, %select.2610)
  %multiply.6726 = bf16[4096]{0} multiply(%multiply.6725, %broadcast.10088)
  %param.382 = bf16[4096]{0} parameter(673), sharding={replicated}
  %multiply.6727 = bf16[4096]{0} multiply(%param.382, %broadcast.10090)
  %add.5597 = bf16[4096]{0} add(%multiply.6726, %multiply.6727)
  %divide.1136 = bf16[4096]{0} divide(%add.5597, %broadcast.10092)
  %sqrt.26 = bf16[4096]{0} sqrt(%divide.1136)
  %add.5598 = bf16[4096]{0} add(%sqrt.26, %broadcast.10094)
  %multiply.6728 = bf16[4096]{0} multiply(%broadcast.10086, %add.5598)
  %divide.1137 = bf16[4096]{0} divide(%add.5596, %multiply.6728)
  %multiply.6729 = bf16[4096]{0} multiply(%param.112, %broadcast.10083)
  %add.5599 = bf16[4096]{0} add(%divide.1137, %multiply.6729)
  %multiply.6730 = bf16[4096]{0} multiply(%broadcast.5338, %add.5599)
  %add.5600 = bf16[4096]{0} add(%param.112, %multiply.6730)
  %divide.1138 = bf16[4096]{0} divide(%all-reduce.38, %broadcast.10081)
  %select.2611 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.38, %divide.1138)
  %multiply.6731 = bf16[4096]{0} multiply(%select.2611, %broadcast.10083)
  %param.383 = bf16[4096]{0} parameter(351), sharding={replicated}
  %multiply.6732 = bf16[4096]{0} multiply(%param.383, %broadcast.10085)
  %add.5601 = bf16[4096]{0} add(%multiply.6731, %multiply.6732)
  %multiply.6733 = bf16[4096]{0} multiply(%select.2611, %select.2611)
  %multiply.6734 = bf16[4096]{0} multiply(%multiply.6733, %broadcast.10088)
  %param.384 = bf16[4096]{0} parameter(674), sharding={replicated}
  %multiply.6735 = bf16[4096]{0} multiply(%param.384, %broadcast.10090)
  %add.5602 = bf16[4096]{0} add(%multiply.6734, %multiply.6735)
  %divide.1139 = bf16[4096]{0} divide(%add.5602, %broadcast.10092)
  %sqrt.27 = bf16[4096]{0} sqrt(%divide.1139)
  %add.5603 = bf16[4096]{0} add(%sqrt.27, %broadcast.10094)
  %multiply.6736 = bf16[4096]{0} multiply(%broadcast.10086, %add.5603)
  %divide.1140 = bf16[4096]{0} divide(%add.5601, %multiply.6736)
  %multiply.6738 = bf16[4096]{0} multiply(%param.107, %broadcast.10083)
  %add.5604 = bf16[4096]{0} add(%divide.1140, %multiply.6738)
  %multiply.6739 = bf16[4096]{0} multiply(%broadcast.5338, %add.5604)
  %add.5605 = bf16[4096]{0} add(%param.107, %multiply.6739)
  %divide.1141 = bf16[512,8,128]{0,2,1} divide(%transpose.328, %broadcast.10162)
  %select.2612 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.328, %divide.1141)
  %multiply.6740 = bf16[512,8,128]{0,2,1} multiply(%select.2612, %broadcast.10163)
  %param.385 = bf16[512,8,128]{2,1,0} parameter(352), sharding={devices=[8,1,1]<=[8]}
  %multiply.6742 = bf16[512,8,128]{2,1,0} multiply(%param.385, %broadcast.10164)
  %add.5607 = bf16[512,8,128]{0,2,1} add(%multiply.6740, %multiply.6742)
  %multiply.6743 = bf16[512,8,128]{0,2,1} multiply(%select.2612, %select.2612)
  %multiply.6744 = bf16[512,8,128]{0,2,1} multiply(%multiply.6743, %broadcast.10166)
  %param.386 = bf16[512,8,128]{2,1,0} parameter(675), sharding={devices=[8,1,1]<=[8]}
  %multiply.6745 = bf16[512,8,128]{2,1,0} multiply(%param.386, %broadcast.10167)
  %add.5608 = bf16[512,8,128]{0,2,1} add(%multiply.6744, %multiply.6745)
  %divide.1142 = bf16[512,8,128]{0,2,1} divide(%add.5608, %broadcast.10168)
  %sqrt.28 = bf16[512,8,128]{0,2,1} sqrt(%divide.1142)
  %add.5609 = bf16[512,8,128]{0,2,1} add(%sqrt.28, %broadcast.10169)
  %multiply.6747 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5609)
  %divide.1143 = bf16[512,8,128]{0,2,1} divide(%add.5607, %multiply.6747)
  %multiply.6748 = bf16[512,8,128]{2,1,0} multiply(%param.109, %broadcast.10163)
  %add.5610 = bf16[512,8,128]{0,2,1} add(%divide.1143, %multiply.6748)
  %multiply.6749 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5610)
  %add.5611 = bf16[512,8,128]{2,1,0} add(%param.109, %multiply.6749)
  %divide.1144 = bf16[32,128,512]{1,0,2} divide(%transpose.329, %broadcast.10172)
  %select.2613 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.329, %divide.1144)
  %multiply.6751 = bf16[32,128,512]{1,0,2} multiply(%select.2613, %broadcast.10173)
  %param.387 = bf16[32,128,512]{2,1,0} parameter(353), sharding={devices=[1,1,8]<=[8]}
  %multiply.6752 = bf16[32,128,512]{2,1,0} multiply(%param.387, %broadcast.10174)
  %add.5612 = bf16[32,128,512]{1,0,2} add(%multiply.6751, %multiply.6752)
  %multiply.6753 = bf16[32,128,512]{1,0,2} multiply(%select.2613, %select.2613)
  %multiply.6754 = bf16[32,128,512]{1,0,2} multiply(%multiply.6753, %broadcast.10176)
  %param.388 = bf16[32,128,512]{2,1,0} parameter(676), sharding={devices=[1,1,8]<=[8]}
  %multiply.6756 = bf16[32,128,512]{2,1,0} multiply(%param.388, %broadcast.10177)
  %add.5613 = bf16[32,128,512]{1,0,2} add(%multiply.6754, %multiply.6756)
  %divide.1145 = bf16[32,128,512]{1,0,2} divide(%add.5613, %broadcast.10178)
  %sqrt.29 = bf16[32,128,512]{1,0,2} sqrt(%divide.1145)
  %add.5615 = bf16[32,128,512]{1,0,2} add(%sqrt.29, %broadcast.10179)
  %multiply.6757 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.5615)
  %divide.1146 = bf16[32,128,512]{1,0,2} divide(%add.5612, %multiply.6757)
  %multiply.6758 = bf16[32,128,512]{2,1,0} multiply(%param.111, %broadcast.10173)
  %add.5616 = bf16[32,128,512]{1,0,2} add(%divide.1146, %multiply.6758)
  %multiply.6759 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.5616)
  %add.5617 = bf16[32,128,512]{2,1,0} add(%param.111, %multiply.6759)
  %divide.1147 = bf16[512,32,128]{0,2,1} divide(%transpose.330, %broadcast.10182)
  %select.2614 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.330, %divide.1147)
  %multiply.6760 = bf16[512,32,128]{0,2,1} multiply(%select.2614, %broadcast.10183)
  %param.389 = bf16[512,32,128]{2,1,0} parameter(354), sharding={devices=[8,1,1]<=[8]}
  %multiply.6761 = bf16[512,32,128]{2,1,0} multiply(%param.389, %broadcast.10184)
  %add.5618 = bf16[512,32,128]{0,2,1} add(%multiply.6760, %multiply.6761)
  %multiply.6762 = bf16[512,32,128]{0,2,1} multiply(%select.2614, %select.2614)
  %multiply.6763 = bf16[512,32,128]{0,2,1} multiply(%multiply.6762, %broadcast.10186)
  %param.390 = bf16[512,32,128]{2,1,0} parameter(677), sharding={devices=[8,1,1]<=[8]}
  %multiply.6764 = bf16[512,32,128]{2,1,0} multiply(%param.390, %broadcast.10187)
  %add.5619 = bf16[512,32,128]{0,2,1} add(%multiply.6763, %multiply.6764)
  %divide.1148 = bf16[512,32,128]{0,2,1} divide(%add.5619, %broadcast.10188)
  %sqrt.30 = bf16[512,32,128]{0,2,1} sqrt(%divide.1148)
  %add.5620 = bf16[512,32,128]{0,2,1} add(%sqrt.30, %broadcast.10189)
  %multiply.6765 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.5620)
  %divide.1149 = bf16[512,32,128]{0,2,1} divide(%add.5618, %multiply.6765)
  %multiply.6766 = bf16[512,32,128]{2,1,0} multiply(%param.108, %broadcast.10183)
  %add.5621 = bf16[512,32,128]{0,2,1} add(%divide.1149, %multiply.6766)
  %multiply.6767 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.5621)
  %add.5622 = bf16[512,32,128]{2,1,0} add(%param.108, %multiply.6767)
  %divide.1150 = bf16[512,8,128]{0,2,1} divide(%transpose.331, %broadcast.10162)
  %select.2615 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.331, %divide.1150)
  %multiply.6768 = bf16[512,8,128]{0,2,1} multiply(%select.2615, %broadcast.10163)
  %param.391 = bf16[512,8,128]{2,1,0} parameter(355), sharding={devices=[8,1,1]<=[8]}
  %multiply.6769 = bf16[512,8,128]{2,1,0} multiply(%param.391, %broadcast.10164)
  %add.5623 = bf16[512,8,128]{0,2,1} add(%multiply.6768, %multiply.6769)
  %multiply.6770 = bf16[512,8,128]{0,2,1} multiply(%select.2615, %select.2615)
  %multiply.6771 = bf16[512,8,128]{0,2,1} multiply(%multiply.6770, %broadcast.10166)
  %param.392 = bf16[512,8,128]{2,1,0} parameter(678), sharding={devices=[8,1,1]<=[8]}
  %multiply.6772 = bf16[512,8,128]{2,1,0} multiply(%param.392, %broadcast.10167)
  %add.5624 = bf16[512,8,128]{0,2,1} add(%multiply.6771, %multiply.6772)
  %divide.1151 = bf16[512,8,128]{0,2,1} divide(%add.5624, %broadcast.10168)
  %sqrt.31 = bf16[512,8,128]{0,2,1} sqrt(%divide.1151)
  %add.5625 = bf16[512,8,128]{0,2,1} add(%sqrt.31, %broadcast.10169)
  %multiply.6773 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5625)
  %divide.1152 = bf16[512,8,128]{0,2,1} divide(%add.5623, %multiply.6773)
  %multiply.6774 = bf16[512,8,128]{2,1,0} multiply(%param.110, %broadcast.10163)
  %add.5626 = bf16[512,8,128]{0,2,1} add(%divide.1152, %multiply.6774)
  %multiply.6775 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5626)
  %add.5627 = bf16[512,8,128]{2,1,0} add(%param.110, %multiply.6775)
  %divide.1153 = bf16[512,8]{0,1} divide(%dynamic-slice.2369, %broadcast.10097)
  %select.2616 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2369, %divide.1153)
  %multiply.6776 = bf16[512,8]{0,1} multiply(%select.2616, %broadcast.10098)
  %param.393 = bf16[512,8]{1,0} parameter(356), sharding={devices=[8,1]<=[8]}
  %multiply.6778 = bf16[512,8]{1,0} multiply(%param.393, %broadcast.10099)
  %add.5628 = bf16[512,8]{0,1} add(%multiply.6776, %multiply.6778)
  %multiply.6779 = bf16[512,8]{0,1} multiply(%select.2616, %select.2616)
  %multiply.6780 = bf16[512,8]{0,1} multiply(%multiply.6779, %broadcast.10101)
  %param.394 = bf16[512,8]{1,0} parameter(679), sharding={devices=[8,1]<=[8]}
  %multiply.6782 = bf16[512,8]{1,0} multiply(%param.394, %broadcast.10102)
  %add.5630 = bf16[512,8]{0,1} add(%multiply.6780, %multiply.6782)
  %divide.1154 = bf16[512,8]{0,1} divide(%add.5630, %broadcast.10103)
  %sqrt.32 = bf16[512,8]{0,1} sqrt(%divide.1154)
  %add.5631 = bf16[512,8]{0,1} add(%sqrt.32, %broadcast.10104)
  %multiply.6783 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.5631)
  %divide.1155 = bf16[512,8]{0,1} divide(%add.5628, %multiply.6783)
  %multiply.6784 = bf16[512,8]{1,0} multiply(%param.123, %broadcast.10098)
  %add.5632 = bf16[512,8]{0,1} add(%divide.1155, %multiply.6784)
  %multiply.6785 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.5632)
  %add.5633 = bf16[512,8]{1,0} add(%param.123, %multiply.6785)
  %divide.1156 = bf16[1,4096,14336]{2,1,0} divide(%copy.4210, %broadcast.10111)
  %select.2617 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4210, %divide.1156)
  %multiply.6787 = bf16[1,4096,14336]{2,1,0} multiply(%select.2617, %broadcast.10112)
  %param.395 = bf16[1,4096,14336]{2,1,0} parameter(357), sharding={devices=[8,1,1]<=[8]}
  %multiply.6788 = bf16[1,4096,14336]{2,1,0} multiply(%param.395, %broadcast.10113)
  %add.5635 = bf16[1,4096,14336]{2,1,0} add(%multiply.6787, %multiply.6788)
  %multiply.6789 = bf16[1,4096,14336]{2,1,0} multiply(%select.2617, %select.2617)
  %multiply.6791 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6789, %broadcast.10115)
  %param.396 = bf16[1,4096,14336]{2,1,0} parameter(680), sharding={devices=[8,1,1]<=[8]}
  %multiply.6792 = bf16[1,4096,14336]{2,1,0} multiply(%param.396, %broadcast.10116)
  %add.5636 = bf16[1,4096,14336]{2,1,0} add(%multiply.6791, %multiply.6792)
  %divide.1157 = bf16[1,4096,14336]{2,1,0} divide(%add.5636, %broadcast.10117)
  %sqrt.33 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1157)
  %add.5637 = bf16[1,4096,14336]{2,1,0} add(%sqrt.33, %broadcast.10119)
  %multiply.6793 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5637)
  %divide.1158 = bf16[1,4096,14336]{2,1,0} divide(%add.5635, %multiply.6793)
  %multiply.6794 = bf16[1,4096,14336]{2,1,0} multiply(%param.124, %broadcast.10112)
  %add.5638 = bf16[1,4096,14336]{2,1,0} add(%divide.1158, %multiply.6794)
  %multiply.6795 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5638)
  %add.5640 = bf16[1,4096,14336]{2,1,0} add(%param.124, %multiply.6795)
  %divide.1159 = bf16[1,4096,14336]{2,1,0} divide(%copy.4211, %broadcast.10111)
  %select.2618 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4211, %divide.1159)
  %multiply.6796 = bf16[1,4096,14336]{2,1,0} multiply(%select.2618, %broadcast.10112)
  %param.397 = bf16[1,4096,14336]{2,1,0} parameter(358), sharding={devices=[8,1,1]<=[8]}
  %multiply.6797 = bf16[1,4096,14336]{2,1,0} multiply(%param.397, %broadcast.10113)
  %add.5641 = bf16[1,4096,14336]{2,1,0} add(%multiply.6796, %multiply.6797)
  %multiply.6798 = bf16[1,4096,14336]{2,1,0} multiply(%select.2618, %select.2618)
  %multiply.6799 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6798, %broadcast.10115)
  %param.398 = bf16[1,4096,14336]{2,1,0} parameter(681), sharding={devices=[8,1,1]<=[8]}
  %multiply.6800 = bf16[1,4096,14336]{2,1,0} multiply(%param.398, %broadcast.10116)
  %add.5642 = bf16[1,4096,14336]{2,1,0} add(%multiply.6799, %multiply.6800)
  %divide.1160 = bf16[1,4096,14336]{2,1,0} divide(%add.5642, %broadcast.10117)
  %sqrt.34 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1160)
  %add.5643 = bf16[1,4096,14336]{2,1,0} add(%sqrt.34, %broadcast.10119)
  %multiply.6801 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5643)
  %divide.1161 = bf16[1,4096,14336]{2,1,0} divide(%add.5641, %multiply.6801)
  %multiply.6802 = bf16[1,4096,14336]{2,1,0} multiply(%param.125, %broadcast.10112)
  %add.5644 = bf16[1,4096,14336]{2,1,0} add(%divide.1161, %multiply.6802)
  %multiply.6803 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5644)
  %add.5645 = bf16[1,4096,14336]{2,1,0} add(%param.125, %multiply.6803)
  %divide.1162 = bf16[1,14336,4096]{2,1,0} divide(%copy.4212, %broadcast.10134)
  %select.2619 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4212, %divide.1162)
  %multiply.6804 = bf16[1,14336,4096]{2,1,0} multiply(%select.2619, %broadcast.10135)
  %param.399 = bf16[1,14336,4096]{2,1,0} parameter(359), sharding={devices=[8,1,1]<=[8]}
  %multiply.6805 = bf16[1,14336,4096]{2,1,0} multiply(%param.399, %broadcast.10136)
  %add.5646 = bf16[1,14336,4096]{2,1,0} add(%multiply.6804, %multiply.6805)
  %multiply.6806 = bf16[1,14336,4096]{2,1,0} multiply(%select.2619, %select.2619)
  %multiply.6807 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.6806, %broadcast.10138)
  %param.400 = bf16[1,14336,4096]{2,1,0} parameter(682), sharding={devices=[8,1,1]<=[8]}
  %multiply.6808 = bf16[1,14336,4096]{2,1,0} multiply(%param.400, %broadcast.10139)
  %add.5647 = bf16[1,14336,4096]{2,1,0} add(%multiply.6807, %multiply.6808)
  %divide.1163 = bf16[1,14336,4096]{2,1,0} divide(%add.5647, %broadcast.10140)
  %sqrt.35 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1163)
  %add.5648 = bf16[1,14336,4096]{2,1,0} add(%sqrt.35, %broadcast.10141)
  %multiply.6809 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.5648)
  %divide.1164 = bf16[1,14336,4096]{2,1,0} divide(%add.5646, %multiply.6809)
  %multiply.6810 = bf16[1,14336,4096]{2,1,0} multiply(%param.126, %broadcast.10135)
  %add.5649 = bf16[1,14336,4096]{2,1,0} add(%divide.1164, %multiply.6810)
  %multiply.6811 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.5649)
  %add.5650 = bf16[1,14336,4096]{2,1,0} add(%param.126, %multiply.6811)
  %divide.1165 = bf16[4096]{0} divide(%all-reduce.52, %broadcast.10081)
  %select.2620 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.52, %divide.1165)
  %multiply.6812 = bf16[4096]{0} multiply(%select.2620, %broadcast.10083)
  %param.401 = bf16[4096]{0} parameter(360), sharding={replicated}
  %multiply.6813 = bf16[4096]{0} multiply(%param.401, %broadcast.10085)
  %add.5651 = bf16[4096]{0} add(%multiply.6812, %multiply.6813)
  %multiply.6814 = bf16[4096]{0} multiply(%select.2620, %select.2620)
  %multiply.6815 = bf16[4096]{0} multiply(%multiply.6814, %broadcast.10088)
  %param.402 = bf16[4096]{0} parameter(683), sharding={replicated}
  %multiply.6816 = bf16[4096]{0} multiply(%param.402, %broadcast.10090)
  %add.5652 = bf16[4096]{0} add(%multiply.6815, %multiply.6816)
  %divide.1166 = bf16[4096]{0} divide(%add.5652, %broadcast.10092)
  %sqrt.36 = bf16[4096]{0} sqrt(%divide.1166)
  %add.5653 = bf16[4096]{0} add(%sqrt.36, %broadcast.10094)
  %multiply.6817 = bf16[4096]{0} multiply(%broadcast.10086, %add.5653)
  %divide.1167 = bf16[4096]{0} divide(%add.5651, %multiply.6817)
  %multiply.6818 = bf16[4096]{0} multiply(%param.122, %broadcast.10083)
  %add.5654 = bf16[4096]{0} add(%divide.1167, %multiply.6818)
  %multiply.6819 = bf16[4096]{0} multiply(%broadcast.5338, %add.5654)
  %add.5655 = bf16[4096]{0} add(%param.122, %multiply.6819)
  %divide.1168 = bf16[4096]{0} divide(%all-reduce.53, %broadcast.10081)
  %select.2621 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.53, %divide.1168)
  %multiply.6820 = bf16[4096]{0} multiply(%select.2621, %broadcast.10083)
  %param.403 = bf16[4096]{0} parameter(361), sharding={replicated}
  %multiply.6821 = bf16[4096]{0} multiply(%param.403, %broadcast.10085)
  %add.5656 = bf16[4096]{0} add(%multiply.6820, %multiply.6821)
  %multiply.6822 = bf16[4096]{0} multiply(%select.2621, %select.2621)
  %multiply.6823 = bf16[4096]{0} multiply(%multiply.6822, %broadcast.10088)
  %param.404 = bf16[4096]{0} parameter(684), sharding={replicated}
  %multiply.6824 = bf16[4096]{0} multiply(%param.404, %broadcast.10090)
  %add.5657 = bf16[4096]{0} add(%multiply.6823, %multiply.6824)
  %divide.1170 = bf16[4096]{0} divide(%add.5657, %broadcast.10092)
  %sqrt.37 = bf16[4096]{0} sqrt(%divide.1170)
  %add.5658 = bf16[4096]{0} add(%sqrt.37, %broadcast.10094)
  %multiply.6825 = bf16[4096]{0} multiply(%broadcast.10086, %add.5658)
  %divide.1171 = bf16[4096]{0} divide(%add.5656, %multiply.6825)
  %multiply.6826 = bf16[4096]{0} multiply(%param.117, %broadcast.10083)
  %add.5659 = bf16[4096]{0} add(%divide.1171, %multiply.6826)
  %multiply.6827 = bf16[4096]{0} multiply(%broadcast.5338, %add.5659)
  %add.5660 = bf16[4096]{0} add(%param.117, %multiply.6827)
  %divide.1172 = bf16[512,8,128]{0,2,1} divide(%transpose.332, %broadcast.10162)
  %select.2622 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.332, %divide.1172)
  %multiply.6828 = bf16[512,8,128]{0,2,1} multiply(%select.2622, %broadcast.10163)
  %param.405 = bf16[512,8,128]{2,1,0} parameter(362), sharding={devices=[8,1,1]<=[8]}
  %multiply.6829 = bf16[512,8,128]{2,1,0} multiply(%param.405, %broadcast.10164)
  %add.5661 = bf16[512,8,128]{0,2,1} add(%multiply.6828, %multiply.6829)
  %multiply.6830 = bf16[512,8,128]{0,2,1} multiply(%select.2622, %select.2622)
  %multiply.6831 = bf16[512,8,128]{0,2,1} multiply(%multiply.6830, %broadcast.10166)
  %param.406 = bf16[512,8,128]{2,1,0} parameter(685), sharding={devices=[8,1,1]<=[8]}
  %multiply.6832 = bf16[512,8,128]{2,1,0} multiply(%param.406, %broadcast.10167)
  %add.5662 = bf16[512,8,128]{0,2,1} add(%multiply.6831, %multiply.6832)
  %divide.1173 = bf16[512,8,128]{0,2,1} divide(%add.5662, %broadcast.10168)
  %sqrt.38 = bf16[512,8,128]{0,2,1} sqrt(%divide.1173)
  %add.5663 = bf16[512,8,128]{0,2,1} add(%sqrt.38, %broadcast.10169)
  %multiply.6833 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5663)
  %divide.1174 = bf16[512,8,128]{0,2,1} divide(%add.5661, %multiply.6833)
  %multiply.6834 = bf16[512,8,128]{2,1,0} multiply(%param.119, %broadcast.10163)
  %add.5664 = bf16[512,8,128]{0,2,1} add(%divide.1174, %multiply.6834)
  %multiply.6835 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5664)
  %add.5665 = bf16[512,8,128]{2,1,0} add(%param.119, %multiply.6835)
  %divide.1175 = bf16[32,128,512]{1,0,2} divide(%transpose.333, %broadcast.10172)
  %select.2623 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.333, %divide.1175)
  %multiply.6836 = bf16[32,128,512]{1,0,2} multiply(%select.2623, %broadcast.10173)
  %param.407 = bf16[32,128,512]{2,1,0} parameter(363), sharding={devices=[1,1,8]<=[8]}
  %multiply.6837 = bf16[32,128,512]{2,1,0} multiply(%param.407, %broadcast.10174)
  %add.5666 = bf16[32,128,512]{1,0,2} add(%multiply.6836, %multiply.6837)
  %multiply.6838 = bf16[32,128,512]{1,0,2} multiply(%select.2623, %select.2623)
  %multiply.6839 = bf16[32,128,512]{1,0,2} multiply(%multiply.6838, %broadcast.10176)
  %param.408 = bf16[32,128,512]{2,1,0} parameter(686), sharding={devices=[1,1,8]<=[8]}
  %multiply.6840 = bf16[32,128,512]{2,1,0} multiply(%param.408, %broadcast.10177)
  %add.5667 = bf16[32,128,512]{1,0,2} add(%multiply.6839, %multiply.6840)
  %divide.1176 = bf16[32,128,512]{1,0,2} divide(%add.5667, %broadcast.10178)
  %sqrt.39 = bf16[32,128,512]{1,0,2} sqrt(%divide.1176)
  %add.5668 = bf16[32,128,512]{1,0,2} add(%sqrt.39, %broadcast.10179)
  %multiply.6841 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.5668)
  %divide.1177 = bf16[32,128,512]{1,0,2} divide(%add.5666, %multiply.6841)
  %multiply.6842 = bf16[32,128,512]{2,1,0} multiply(%param.121, %broadcast.10173)
  %add.5669 = bf16[32,128,512]{1,0,2} add(%divide.1177, %multiply.6842)
  %multiply.6843 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.5669)
  %add.5670 = bf16[32,128,512]{2,1,0} add(%param.121, %multiply.6843)
  %divide.1178 = bf16[512,32,128]{0,2,1} divide(%transpose.334, %broadcast.10182)
  %select.2624 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.334, %divide.1178)
  %multiply.6844 = bf16[512,32,128]{0,2,1} multiply(%select.2624, %broadcast.10183)
  %param.409 = bf16[512,32,128]{2,1,0} parameter(364), sharding={devices=[8,1,1]<=[8]}
  %multiply.6845 = bf16[512,32,128]{2,1,0} multiply(%param.409, %broadcast.10184)
  %add.5671 = bf16[512,32,128]{0,2,1} add(%multiply.6844, %multiply.6845)
  %multiply.6846 = bf16[512,32,128]{0,2,1} multiply(%select.2624, %select.2624)
  %multiply.6848 = bf16[512,32,128]{0,2,1} multiply(%multiply.6846, %broadcast.10186)
  %param.410 = bf16[512,32,128]{2,1,0} parameter(687), sharding={devices=[8,1,1]<=[8]}
  %multiply.6849 = bf16[512,32,128]{2,1,0} multiply(%param.410, %broadcast.10187)
  %add.5673 = bf16[512,32,128]{0,2,1} add(%multiply.6848, %multiply.6849)
  %divide.1179 = bf16[512,32,128]{0,2,1} divide(%add.5673, %broadcast.10188)
  %sqrt.40 = bf16[512,32,128]{0,2,1} sqrt(%divide.1179)
  %add.5674 = bf16[512,32,128]{0,2,1} add(%sqrt.40, %broadcast.10189)
  %multiply.6850 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.5674)
  %divide.1180 = bf16[512,32,128]{0,2,1} divide(%add.5671, %multiply.6850)
  %multiply.6851 = bf16[512,32,128]{2,1,0} multiply(%param.118, %broadcast.10183)
  %add.5675 = bf16[512,32,128]{0,2,1} add(%divide.1180, %multiply.6851)
  %multiply.6852 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.5675)
  %add.5676 = bf16[512,32,128]{2,1,0} add(%param.118, %multiply.6852)
  %divide.1181 = bf16[512,8,128]{0,2,1} divide(%transpose.335, %broadcast.10162)
  %select.2625 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.335, %divide.1181)
  %multiply.6853 = bf16[512,8,128]{0,2,1} multiply(%select.2625, %broadcast.10163)
  %param.411 = bf16[512,8,128]{2,1,0} parameter(365), sharding={devices=[8,1,1]<=[8]}
  %multiply.6854 = bf16[512,8,128]{2,1,0} multiply(%param.411, %broadcast.10164)
  %add.5677 = bf16[512,8,128]{0,2,1} add(%multiply.6853, %multiply.6854)
  %multiply.6855 = bf16[512,8,128]{0,2,1} multiply(%select.2625, %select.2625)
  %multiply.6856 = bf16[512,8,128]{0,2,1} multiply(%multiply.6855, %broadcast.10166)
  %param.412 = bf16[512,8,128]{2,1,0} parameter(688), sharding={devices=[8,1,1]<=[8]}
  %multiply.6857 = bf16[512,8,128]{2,1,0} multiply(%param.412, %broadcast.10167)
  %add.5678 = bf16[512,8,128]{0,2,1} add(%multiply.6856, %multiply.6857)
  %divide.1182 = bf16[512,8,128]{0,2,1} divide(%add.5678, %broadcast.10168)
  %sqrt.41 = bf16[512,8,128]{0,2,1} sqrt(%divide.1182)
  %add.5679 = bf16[512,8,128]{0,2,1} add(%sqrt.41, %broadcast.10169)
  %multiply.6858 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5679)
  %divide.1183 = bf16[512,8,128]{0,2,1} divide(%add.5677, %multiply.6858)
  %multiply.6859 = bf16[512,8,128]{2,1,0} multiply(%param.120, %broadcast.10163)
  %add.5680 = bf16[512,8,128]{0,2,1} add(%divide.1183, %multiply.6859)
  %multiply.6861 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5680)
  %add.5681 = bf16[512,8,128]{2,1,0} add(%param.120, %multiply.6861)
  %divide.1184 = bf16[512,8]{0,1} divide(%dynamic-slice.2379, %broadcast.10097)
  %select.2626 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2379, %divide.1184)
  %multiply.6862 = bf16[512,8]{0,1} multiply(%select.2626, %broadcast.10098)
  %param.413 = bf16[512,8]{1,0} parameter(366), sharding={devices=[8,1]<=[8]}
  %multiply.6863 = bf16[512,8]{1,0} multiply(%param.413, %broadcast.10099)
  %add.5682 = bf16[512,8]{0,1} add(%multiply.6862, %multiply.6863)
  %multiply.6864 = bf16[512,8]{0,1} multiply(%select.2626, %select.2626)
  %multiply.6865 = bf16[512,8]{0,1} multiply(%multiply.6864, %broadcast.10101)
  %param.414 = bf16[512,8]{1,0} parameter(689), sharding={devices=[8,1]<=[8]}
  %multiply.6867 = bf16[512,8]{1,0} multiply(%param.414, %broadcast.10102)
  %add.5683 = bf16[512,8]{0,1} add(%multiply.6865, %multiply.6867)
  %divide.1185 = bf16[512,8]{0,1} divide(%add.5683, %broadcast.10103)
  %sqrt.42 = bf16[512,8]{0,1} sqrt(%divide.1185)
  %add.5684 = bf16[512,8]{0,1} add(%sqrt.42, %broadcast.10104)
  %multiply.6868 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.5684)
  %divide.1186 = bf16[512,8]{0,1} divide(%add.5682, %multiply.6868)
  %multiply.6869 = bf16[512,8]{1,0} multiply(%param.133, %broadcast.10098)
  %add.5685 = bf16[512,8]{0,1} add(%divide.1186, %multiply.6869)
  %multiply.6870 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.5685)
  %add.5687 = bf16[512,8]{1,0} add(%param.133, %multiply.6870)
  %divide.1187 = bf16[1,4096,14336]{2,1,0} divide(%copy.4213, %broadcast.10111)
  %select.2627 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4213, %divide.1187)
  %multiply.6871 = bf16[1,4096,14336]{2,1,0} multiply(%select.2627, %broadcast.10112)
  %param.415 = bf16[1,4096,14336]{2,1,0} parameter(367), sharding={devices=[8,1,1]<=[8]}
  %multiply.6872 = bf16[1,4096,14336]{2,1,0} multiply(%param.415, %broadcast.10113)
  %add.5688 = bf16[1,4096,14336]{2,1,0} add(%multiply.6871, %multiply.6872)
  %multiply.6873 = bf16[1,4096,14336]{2,1,0} multiply(%select.2627, %select.2627)
  %multiply.6874 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6873, %broadcast.10115)
  %param.416 = bf16[1,4096,14336]{2,1,0} parameter(690), sharding={devices=[8,1,1]<=[8]}
  %multiply.6875 = bf16[1,4096,14336]{2,1,0} multiply(%param.416, %broadcast.10116)
  %add.5690 = bf16[1,4096,14336]{2,1,0} add(%multiply.6874, %multiply.6875)
  %divide.1188 = bf16[1,4096,14336]{2,1,0} divide(%add.5690, %broadcast.10117)
  %sqrt.43 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1188)
  %add.5691 = bf16[1,4096,14336]{2,1,0} add(%sqrt.43, %broadcast.10119)
  %multiply.6876 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5691)
  %divide.1189 = bf16[1,4096,14336]{2,1,0} divide(%add.5688, %multiply.6876)
  %multiply.6877 = bf16[1,4096,14336]{2,1,0} multiply(%param.134, %broadcast.10112)
  %add.5693 = bf16[1,4096,14336]{2,1,0} add(%divide.1189, %multiply.6877)
  %multiply.6878 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5693)
  %add.5694 = bf16[1,4096,14336]{2,1,0} add(%param.134, %multiply.6878)
  %divide.1190 = bf16[1,4096,14336]{2,1,0} divide(%copy.4214, %broadcast.10111)
  %select.2628 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4214, %divide.1190)
  %multiply.6879 = bf16[1,4096,14336]{2,1,0} multiply(%select.2628, %broadcast.10112)
  %param.417 = bf16[1,4096,14336]{2,1,0} parameter(368), sharding={devices=[8,1,1]<=[8]}
  %multiply.6880 = bf16[1,4096,14336]{2,1,0} multiply(%param.417, %broadcast.10113)
  %add.5695 = bf16[1,4096,14336]{2,1,0} add(%multiply.6879, %multiply.6880)
  %multiply.6881 = bf16[1,4096,14336]{2,1,0} multiply(%select.2628, %select.2628)
  %multiply.6882 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6881, %broadcast.10115)
  %param.418 = bf16[1,4096,14336]{2,1,0} parameter(691), sharding={devices=[8,1,1]<=[8]}
  %multiply.6883 = bf16[1,4096,14336]{2,1,0} multiply(%param.418, %broadcast.10116)
  %add.5696 = bf16[1,4096,14336]{2,1,0} add(%multiply.6882, %multiply.6883)
  %divide.1191 = bf16[1,4096,14336]{2,1,0} divide(%add.5696, %broadcast.10117)
  %sqrt.44 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1191)
  %add.5697 = bf16[1,4096,14336]{2,1,0} add(%sqrt.44, %broadcast.10119)
  %multiply.6884 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5697)
  %divide.1193 = bf16[1,4096,14336]{2,1,0} divide(%add.5695, %multiply.6884)
  %multiply.6885 = bf16[1,4096,14336]{2,1,0} multiply(%param.135, %broadcast.10112)
  %add.5698 = bf16[1,4096,14336]{2,1,0} add(%divide.1193, %multiply.6885)
  %multiply.6886 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5698)
  %add.5699 = bf16[1,4096,14336]{2,1,0} add(%param.135, %multiply.6886)
  %divide.1194 = bf16[1,14336,4096]{2,1,0} divide(%copy.4215, %broadcast.10134)
  %select.2629 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4215, %divide.1194)
  %multiply.6887 = bf16[1,14336,4096]{2,1,0} multiply(%select.2629, %broadcast.10135)
  %param.419 = bf16[1,14336,4096]{2,1,0} parameter(369), sharding={devices=[8,1,1]<=[8]}
  %multiply.6888 = bf16[1,14336,4096]{2,1,0} multiply(%param.419, %broadcast.10136)
  %add.5700 = bf16[1,14336,4096]{2,1,0} add(%multiply.6887, %multiply.6888)
  %multiply.6889 = bf16[1,14336,4096]{2,1,0} multiply(%select.2629, %select.2629)
  %multiply.6890 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.6889, %broadcast.10138)
  %param.420 = bf16[1,14336,4096]{2,1,0} parameter(692), sharding={devices=[8,1,1]<=[8]}
  %multiply.6891 = bf16[1,14336,4096]{2,1,0} multiply(%param.420, %broadcast.10139)
  %add.5701 = bf16[1,14336,4096]{2,1,0} add(%multiply.6890, %multiply.6891)
  %divide.1195 = bf16[1,14336,4096]{2,1,0} divide(%add.5701, %broadcast.10140)
  %sqrt.45 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1195)
  %add.5702 = bf16[1,14336,4096]{2,1,0} add(%sqrt.45, %broadcast.10141)
  %multiply.6892 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.5702)
  %divide.1196 = bf16[1,14336,4096]{2,1,0} divide(%add.5700, %multiply.6892)
  %multiply.6893 = bf16[1,14336,4096]{2,1,0} multiply(%param.136, %broadcast.10135)
  %add.5703 = bf16[1,14336,4096]{2,1,0} add(%divide.1196, %multiply.6893)
  %multiply.6894 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.5703)
  %add.5704 = bf16[1,14336,4096]{2,1,0} add(%param.136, %multiply.6894)
  %divide.1197 = bf16[4096]{0} divide(%all-reduce.67, %broadcast.10081)
  %select.2630 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.67, %divide.1197)
  %multiply.6895 = bf16[4096]{0} multiply(%select.2630, %broadcast.10083)
  %param.421 = bf16[4096]{0} parameter(370), sharding={replicated}
  %multiply.6896 = bf16[4096]{0} multiply(%param.421, %broadcast.10085)
  %add.5705 = bf16[4096]{0} add(%multiply.6895, %multiply.6896)
  %multiply.6897 = bf16[4096]{0} multiply(%select.2630, %select.2630)
  %multiply.6898 = bf16[4096]{0} multiply(%multiply.6897, %broadcast.10088)
  %param.422 = bf16[4096]{0} parameter(693), sharding={replicated}
  %multiply.6899 = bf16[4096]{0} multiply(%param.422, %broadcast.10090)
  %add.5707 = bf16[4096]{0} add(%multiply.6898, %multiply.6899)
  %divide.1198 = bf16[4096]{0} divide(%add.5707, %broadcast.10092)
  %sqrt.46 = bf16[4096]{0} sqrt(%divide.1198)
  %add.5708 = bf16[4096]{0} add(%sqrt.46, %broadcast.10094)
  %multiply.6900 = bf16[4096]{0} multiply(%broadcast.10086, %add.5708)
  %divide.1199 = bf16[4096]{0} divide(%add.5705, %multiply.6900)
  %multiply.6901 = bf16[4096]{0} multiply(%param.132, %broadcast.10083)
  %add.5709 = bf16[4096]{0} add(%divide.1199, %multiply.6901)
  %multiply.6902 = bf16[4096]{0} multiply(%broadcast.5338, %add.5709)
  %add.5710 = bf16[4096]{0} add(%param.132, %multiply.6902)
  %divide.1200 = bf16[4096]{0} divide(%all-reduce.68, %broadcast.10081)
  %select.2631 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.68, %divide.1200)
  %multiply.6903 = bf16[4096]{0} multiply(%select.2631, %broadcast.10083)
  %param.423 = bf16[4096]{0} parameter(371), sharding={replicated}
  %multiply.6904 = bf16[4096]{0} multiply(%param.423, %broadcast.10085)
  %add.5711 = bf16[4096]{0} add(%multiply.6903, %multiply.6904)
  %multiply.6905 = bf16[4096]{0} multiply(%select.2631, %select.2631)
  %multiply.6906 = bf16[4096]{0} multiply(%multiply.6905, %broadcast.10088)
  %param.424 = bf16[4096]{0} parameter(694), sharding={replicated}
  %multiply.6907 = bf16[4096]{0} multiply(%param.424, %broadcast.10090)
  %add.5712 = bf16[4096]{0} add(%multiply.6906, %multiply.6907)
  %divide.1201 = bf16[4096]{0} divide(%add.5712, %broadcast.10092)
  %sqrt.47 = bf16[4096]{0} sqrt(%divide.1201)
  %add.5713 = bf16[4096]{0} add(%sqrt.47, %broadcast.10094)
  %multiply.6908 = bf16[4096]{0} multiply(%broadcast.10086, %add.5713)
  %divide.1203 = bf16[4096]{0} divide(%add.5711, %multiply.6908)
  %multiply.6909 = bf16[4096]{0} multiply(%param.127, %broadcast.10083)
  %add.5714 = bf16[4096]{0} add(%divide.1203, %multiply.6909)
  %multiply.6910 = bf16[4096]{0} multiply(%broadcast.5338, %add.5714)
  %add.5715 = bf16[4096]{0} add(%param.127, %multiply.6910)
  %divide.1204 = bf16[512,8,128]{0,2,1} divide(%transpose.336, %broadcast.10162)
  %select.2632 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.336, %divide.1204)
  %multiply.6911 = bf16[512,8,128]{0,2,1} multiply(%select.2632, %broadcast.10163)
  %param.425 = bf16[512,8,128]{2,1,0} parameter(372), sharding={devices=[8,1,1]<=[8]}
  %multiply.6912 = bf16[512,8,128]{2,1,0} multiply(%param.425, %broadcast.10164)
  %add.5717 = bf16[512,8,128]{0,2,1} add(%multiply.6911, %multiply.6912)
  %multiply.6913 = bf16[512,8,128]{0,2,1} multiply(%select.2632, %select.2632)
  %multiply.6914 = bf16[512,8,128]{0,2,1} multiply(%multiply.6913, %broadcast.10166)
  %param.426 = bf16[512,8,128]{2,1,0} parameter(695), sharding={devices=[8,1,1]<=[8]}
  %multiply.6915 = bf16[512,8,128]{2,1,0} multiply(%param.426, %broadcast.10167)
  %add.5718 = bf16[512,8,128]{0,2,1} add(%multiply.6914, %multiply.6915)
  %divide.1205 = bf16[512,8,128]{0,2,1} divide(%add.5718, %broadcast.10168)
  %sqrt.48 = bf16[512,8,128]{0,2,1} sqrt(%divide.1205)
  %add.5719 = bf16[512,8,128]{0,2,1} add(%sqrt.48, %broadcast.10169)
  %multiply.6916 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5719)
  %divide.1206 = bf16[512,8,128]{0,2,1} divide(%add.5717, %multiply.6916)
  %multiply.6917 = bf16[512,8,128]{2,1,0} multiply(%param.129, %broadcast.10163)
  %add.5720 = bf16[512,8,128]{0,2,1} add(%divide.1206, %multiply.6917)
  %multiply.6918 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5720)
  %add.5721 = bf16[512,8,128]{2,1,0} add(%param.129, %multiply.6918)
  %divide.1207 = bf16[32,128,512]{1,0,2} divide(%transpose.337, %broadcast.10172)
  %select.2633 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.337, %divide.1207)
  %multiply.6919 = bf16[32,128,512]{1,0,2} multiply(%select.2633, %broadcast.10173)
  %param.427 = bf16[32,128,512]{2,1,0} parameter(373), sharding={devices=[1,1,8]<=[8]}
  %multiply.6920 = bf16[32,128,512]{2,1,0} multiply(%param.427, %broadcast.10174)
  %add.5722 = bf16[32,128,512]{1,0,2} add(%multiply.6919, %multiply.6920)
  %multiply.6921 = bf16[32,128,512]{1,0,2} multiply(%select.2633, %select.2633)
  %multiply.6922 = bf16[32,128,512]{1,0,2} multiply(%multiply.6921, %broadcast.10176)
  %param.428 = bf16[32,128,512]{2,1,0} parameter(696), sharding={devices=[1,1,8]<=[8]}
  %multiply.6923 = bf16[32,128,512]{2,1,0} multiply(%param.428, %broadcast.10177)
  %add.5723 = bf16[32,128,512]{1,0,2} add(%multiply.6922, %multiply.6923)
  %divide.1208 = bf16[32,128,512]{1,0,2} divide(%add.5723, %broadcast.10178)
  %sqrt.49 = bf16[32,128,512]{1,0,2} sqrt(%divide.1208)
  %add.5724 = bf16[32,128,512]{1,0,2} add(%sqrt.49, %broadcast.10179)
  %multiply.6924 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.5724)
  %divide.1209 = bf16[32,128,512]{1,0,2} divide(%add.5722, %multiply.6924)
  %multiply.6925 = bf16[32,128,512]{2,1,0} multiply(%param.131, %broadcast.10173)
  %add.5725 = bf16[32,128,512]{1,0,2} add(%divide.1209, %multiply.6925)
  %multiply.6926 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.5725)
  %add.5726 = bf16[32,128,512]{2,1,0} add(%param.131, %multiply.6926)
  %divide.1210 = bf16[512,32,128]{0,2,1} divide(%transpose.338, %broadcast.10182)
  %select.2634 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.338, %divide.1210)
  %multiply.6927 = bf16[512,32,128]{0,2,1} multiply(%select.2634, %broadcast.10183)
  %param.429 = bf16[512,32,128]{2,1,0} parameter(374), sharding={devices=[8,1,1]<=[8]}
  %multiply.6928 = bf16[512,32,128]{2,1,0} multiply(%param.429, %broadcast.10184)
  %add.5727 = bf16[512,32,128]{0,2,1} add(%multiply.6927, %multiply.6928)
  %multiply.6929 = bf16[512,32,128]{0,2,1} multiply(%select.2634, %select.2634)
  %multiply.6930 = bf16[512,32,128]{0,2,1} multiply(%multiply.6929, %broadcast.10186)
  %param.430 = bf16[512,32,128]{2,1,0} parameter(697), sharding={devices=[8,1,1]<=[8]}
  %multiply.6931 = bf16[512,32,128]{2,1,0} multiply(%param.430, %broadcast.10187)
  %add.5728 = bf16[512,32,128]{0,2,1} add(%multiply.6930, %multiply.6931)
  %divide.1211 = bf16[512,32,128]{0,2,1} divide(%add.5728, %broadcast.10188)
  %sqrt.50 = bf16[512,32,128]{0,2,1} sqrt(%divide.1211)
  %add.5729 = bf16[512,32,128]{0,2,1} add(%sqrt.50, %broadcast.10189)
  %multiply.6932 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.5729)
  %divide.1212 = bf16[512,32,128]{0,2,1} divide(%add.5727, %multiply.6932)
  %multiply.6933 = bf16[512,32,128]{2,1,0} multiply(%param.128, %broadcast.10183)
  %add.5731 = bf16[512,32,128]{0,2,1} add(%divide.1212, %multiply.6933)
  %multiply.6934 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.5731)
  %add.5732 = bf16[512,32,128]{2,1,0} add(%param.128, %multiply.6934)
  %divide.1213 = bf16[512,8,128]{0,2,1} divide(%transpose.339, %broadcast.10162)
  %select.2635 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.339, %divide.1213)
  %multiply.6935 = bf16[512,8,128]{0,2,1} multiply(%select.2635, %broadcast.10163)
  %param.431 = bf16[512,8,128]{2,1,0} parameter(375), sharding={devices=[8,1,1]<=[8]}
  %multiply.6936 = bf16[512,8,128]{2,1,0} multiply(%param.431, %broadcast.10164)
  %add.5733 = bf16[512,8,128]{0,2,1} add(%multiply.6935, %multiply.6936)
  %multiply.6937 = bf16[512,8,128]{0,2,1} multiply(%select.2635, %select.2635)
  %multiply.6938 = bf16[512,8,128]{0,2,1} multiply(%multiply.6937, %broadcast.10166)
  %param.432 = bf16[512,8,128]{2,1,0} parameter(698), sharding={devices=[8,1,1]<=[8]}
  %multiply.6939 = bf16[512,8,128]{2,1,0} multiply(%param.432, %broadcast.10167)
  %add.5734 = bf16[512,8,128]{0,2,1} add(%multiply.6938, %multiply.6939)
  %divide.1214 = bf16[512,8,128]{0,2,1} divide(%add.5734, %broadcast.10168)
  %sqrt.51 = bf16[512,8,128]{0,2,1} sqrt(%divide.1214)
  %add.5735 = bf16[512,8,128]{0,2,1} add(%sqrt.51, %broadcast.10169)
  %multiply.6940 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5735)
  %divide.1215 = bf16[512,8,128]{0,2,1} divide(%add.5733, %multiply.6940)
  %multiply.6941 = bf16[512,8,128]{2,1,0} multiply(%param.130, %broadcast.10163)
  %add.5736 = bf16[512,8,128]{0,2,1} add(%divide.1215, %multiply.6941)
  %multiply.6942 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5736)
  %add.5737 = bf16[512,8,128]{2,1,0} add(%param.130, %multiply.6942)
  %divide.1216 = bf16[512,8]{0,1} divide(%dynamic-slice.2389, %broadcast.10097)
  %select.2636 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2389, %divide.1216)
  %multiply.6944 = bf16[512,8]{0,1} multiply(%select.2636, %broadcast.10098)
  %param.433 = bf16[512,8]{1,0} parameter(376), sharding={devices=[8,1]<=[8]}
  %multiply.6945 = bf16[512,8]{1,0} multiply(%param.433, %broadcast.10099)
  %add.5738 = bf16[512,8]{0,1} add(%multiply.6944, %multiply.6945)
  %multiply.6946 = bf16[512,8]{0,1} multiply(%select.2636, %select.2636)
  %multiply.6947 = bf16[512,8]{0,1} multiply(%multiply.6946, %broadcast.10101)
  %param.434 = bf16[512,8]{1,0} parameter(699), sharding={devices=[8,1]<=[8]}
  %multiply.6948 = bf16[512,8]{1,0} multiply(%param.434, %broadcast.10102)
  %add.5740 = bf16[512,8]{0,1} add(%multiply.6947, %multiply.6948)
  %divide.1217 = bf16[512,8]{0,1} divide(%add.5740, %broadcast.10103)
  %sqrt.52 = bf16[512,8]{0,1} sqrt(%divide.1217)
  %add.5741 = bf16[512,8]{0,1} add(%sqrt.52, %broadcast.10104)
  %multiply.6949 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.5741)
  %divide.1218 = bf16[512,8]{0,1} divide(%add.5738, %multiply.6949)
  %multiply.6952 = bf16[512,8]{1,0} multiply(%param.143, %broadcast.10098)
  %add.5742 = bf16[512,8]{0,1} add(%divide.1218, %multiply.6952)
  %multiply.6953 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.5742)
  %add.5743 = bf16[512,8]{1,0} add(%param.143, %multiply.6953)
  %divide.1219 = bf16[1,4096,14336]{2,1,0} divide(%copy.4216, %broadcast.10111)
  %select.2637 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4216, %divide.1219)
  %multiply.6954 = bf16[1,4096,14336]{2,1,0} multiply(%select.2637, %broadcast.10112)
  %param.435 = bf16[1,4096,14336]{2,1,0} parameter(377), sharding={devices=[8,1,1]<=[8]}
  %multiply.6955 = bf16[1,4096,14336]{2,1,0} multiply(%param.435, %broadcast.10113)
  %add.5744 = bf16[1,4096,14336]{2,1,0} add(%multiply.6954, %multiply.6955)
  %multiply.6956 = bf16[1,4096,14336]{2,1,0} multiply(%select.2637, %select.2637)
  %multiply.6957 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6956, %broadcast.10115)
  %param.436 = bf16[1,4096,14336]{2,1,0} parameter(700), sharding={devices=[8,1,1]<=[8]}
  %multiply.6959 = bf16[1,4096,14336]{2,1,0} multiply(%param.436, %broadcast.10116)
  %add.5745 = bf16[1,4096,14336]{2,1,0} add(%multiply.6957, %multiply.6959)
  %divide.1220 = bf16[1,4096,14336]{2,1,0} divide(%add.5745, %broadcast.10117)
  %sqrt.53 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1220)
  %add.5746 = bf16[1,4096,14336]{2,1,0} add(%sqrt.53, %broadcast.10119)
  %multiply.6960 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5746)
  %divide.1221 = bf16[1,4096,14336]{2,1,0} divide(%add.5744, %multiply.6960)
  %multiply.6961 = bf16[1,4096,14336]{2,1,0} multiply(%param.144, %broadcast.10112)
  %add.5747 = bf16[1,4096,14336]{2,1,0} add(%divide.1221, %multiply.6961)
  %multiply.6962 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5747)
  %add.5748 = bf16[1,4096,14336]{2,1,0} add(%param.144, %multiply.6962)
  %divide.1222 = bf16[1,4096,14336]{2,1,0} divide(%copy.4217, %broadcast.10111)
  %select.2638 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4217, %divide.1222)
  %multiply.6963 = bf16[1,4096,14336]{2,1,0} multiply(%select.2638, %broadcast.10112)
  %param.437 = bf16[1,4096,14336]{2,1,0} parameter(378), sharding={devices=[8,1,1]<=[8]}
  %multiply.6964 = bf16[1,4096,14336]{2,1,0} multiply(%param.437, %broadcast.10113)
  %add.5749 = bf16[1,4096,14336]{2,1,0} add(%multiply.6963, %multiply.6964)
  %multiply.6966 = bf16[1,4096,14336]{2,1,0} multiply(%select.2638, %select.2638)
  %multiply.6967 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.6966, %broadcast.10115)
  %param.438 = bf16[1,4096,14336]{2,1,0} parameter(701), sharding={devices=[8,1,1]<=[8]}
  %multiply.6968 = bf16[1,4096,14336]{2,1,0} multiply(%param.438, %broadcast.10116)
  %add.5750 = bf16[1,4096,14336]{2,1,0} add(%multiply.6967, %multiply.6968)
  %divide.1223 = bf16[1,4096,14336]{2,1,0} divide(%add.5750, %broadcast.10117)
  %sqrt.54 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1223)
  %add.5751 = bf16[1,4096,14336]{2,1,0} add(%sqrt.54, %broadcast.10119)
  %multiply.6969 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5751)
  %divide.1224 = bf16[1,4096,14336]{2,1,0} divide(%add.5749, %multiply.6969)
  %multiply.6970 = bf16[1,4096,14336]{2,1,0} multiply(%param.145, %broadcast.10112)
  %add.5752 = bf16[1,4096,14336]{2,1,0} add(%divide.1224, %multiply.6970)
  %multiply.6971 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5752)
  %add.5753 = bf16[1,4096,14336]{2,1,0} add(%param.145, %multiply.6971)
  %divide.1225 = bf16[1,14336,4096]{2,1,0} divide(%copy.4218, %broadcast.10134)
  %select.2639 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4218, %divide.1225)
  %multiply.6972 = bf16[1,14336,4096]{2,1,0} multiply(%select.2639, %broadcast.10135)
  %param.439 = bf16[1,14336,4096]{2,1,0} parameter(379), sharding={devices=[8,1,1]<=[8]}
  %multiply.6973 = bf16[1,14336,4096]{2,1,0} multiply(%param.439, %broadcast.10136)
  %add.5754 = bf16[1,14336,4096]{2,1,0} add(%multiply.6972, %multiply.6973)
  %multiply.6974 = bf16[1,14336,4096]{2,1,0} multiply(%select.2639, %select.2639)
  %multiply.6975 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.6974, %broadcast.10138)
  %param.440 = bf16[1,14336,4096]{2,1,0} parameter(702), sharding={devices=[8,1,1]<=[8]}
  %multiply.6976 = bf16[1,14336,4096]{2,1,0} multiply(%param.440, %broadcast.10139)
  %add.5755 = bf16[1,14336,4096]{2,1,0} add(%multiply.6975, %multiply.6976)
  %divide.1226 = bf16[1,14336,4096]{2,1,0} divide(%add.5755, %broadcast.10140)
  %sqrt.55 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1226)
  %add.5756 = bf16[1,14336,4096]{2,1,0} add(%sqrt.55, %broadcast.10141)
  %multiply.6977 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.5756)
  %divide.1227 = bf16[1,14336,4096]{2,1,0} divide(%add.5754, %multiply.6977)
  %multiply.6978 = bf16[1,14336,4096]{2,1,0} multiply(%param.146, %broadcast.10135)
  %add.5757 = bf16[1,14336,4096]{2,1,0} add(%divide.1227, %multiply.6978)
  %multiply.6979 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.5757)
  %add.5758 = bf16[1,14336,4096]{2,1,0} add(%param.146, %multiply.6979)
  %divide.1228 = bf16[4096]{0} divide(%all-reduce.82, %broadcast.10081)
  %select.2640 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.82, %divide.1228)
  %multiply.6980 = bf16[4096]{0} multiply(%select.2640, %broadcast.10083)
  %param.441 = bf16[4096]{0} parameter(380), sharding={replicated}
  %multiply.6982 = bf16[4096]{0} multiply(%param.441, %broadcast.10085)
  %add.5759 = bf16[4096]{0} add(%multiply.6980, %multiply.6982)
  %multiply.6983 = bf16[4096]{0} multiply(%select.2640, %select.2640)
  %multiply.6984 = bf16[4096]{0} multiply(%multiply.6983, %broadcast.10088)
  %param.442 = bf16[4096]{0} parameter(703), sharding={replicated}
  %multiply.6985 = bf16[4096]{0} multiply(%param.442, %broadcast.10090)
  %add.5760 = bf16[4096]{0} add(%multiply.6984, %multiply.6985)
  %divide.1229 = bf16[4096]{0} divide(%add.5760, %broadcast.10092)
  %sqrt.56 = bf16[4096]{0} sqrt(%divide.1229)
  %add.5761 = bf16[4096]{0} add(%sqrt.56, %broadcast.10094)
  %multiply.6986 = bf16[4096]{0} multiply(%broadcast.10086, %add.5761)
  %divide.1230 = bf16[4096]{0} divide(%add.5759, %multiply.6986)
  %multiply.6987 = bf16[4096]{0} multiply(%param.142, %broadcast.10083)
  %add.5762 = bf16[4096]{0} add(%divide.1230, %multiply.6987)
  %multiply.6988 = bf16[4096]{0} multiply(%broadcast.5338, %add.5762)
  %add.5763 = bf16[4096]{0} add(%param.142, %multiply.6988)
  %divide.1231 = bf16[4096]{0} divide(%all-reduce.83, %broadcast.10081)
  %select.2641 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.83, %divide.1231)
  %multiply.6989 = bf16[4096]{0} multiply(%select.2641, %broadcast.10083)
  %param.443 = bf16[4096]{0} parameter(381), sharding={replicated}
  %multiply.6990 = bf16[4096]{0} multiply(%param.443, %broadcast.10085)
  %add.5764 = bf16[4096]{0} add(%multiply.6989, %multiply.6990)
  %multiply.6992 = bf16[4096]{0} multiply(%select.2641, %select.2641)
  %multiply.6993 = bf16[4096]{0} multiply(%multiply.6992, %broadcast.10088)
  %param.444 = bf16[4096]{0} parameter(704), sharding={replicated}
  %multiply.6994 = bf16[4096]{0} multiply(%param.444, %broadcast.10090)
  %add.5765 = bf16[4096]{0} add(%multiply.6993, %multiply.6994)
  %divide.1233 = bf16[4096]{0} divide(%add.5765, %broadcast.10092)
  %sqrt.57 = bf16[4096]{0} sqrt(%divide.1233)
  %add.5766 = bf16[4096]{0} add(%sqrt.57, %broadcast.10094)
  %multiply.6995 = bf16[4096]{0} multiply(%broadcast.10086, %add.5766)
  %divide.1234 = bf16[4096]{0} divide(%add.5764, %multiply.6995)
  %multiply.6996 = bf16[4096]{0} multiply(%param.137, %broadcast.10083)
  %add.5767 = bf16[4096]{0} add(%divide.1234, %multiply.6996)
  %multiply.6997 = bf16[4096]{0} multiply(%broadcast.5338, %add.5767)
  %add.5768 = bf16[4096]{0} add(%param.137, %multiply.6997)
  %divide.1235 = bf16[512,8,128]{0,2,1} divide(%transpose.340, %broadcast.10162)
  %select.2642 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.340, %divide.1235)
  %multiply.6998 = bf16[512,8,128]{0,2,1} multiply(%select.2642, %broadcast.10163)
  %param.445 = bf16[512,8,128]{2,1,0} parameter(382), sharding={devices=[8,1,1]<=[8]}
  %multiply.6999 = bf16[512,8,128]{2,1,0} multiply(%param.445, %broadcast.10164)
  %add.5769 = bf16[512,8,128]{0,2,1} add(%multiply.6998, %multiply.6999)
  %multiply.7000 = bf16[512,8,128]{0,2,1} multiply(%select.2642, %select.2642)
  %multiply.7001 = bf16[512,8,128]{0,2,1} multiply(%multiply.7000, %broadcast.10166)
  %param.446 = bf16[512,8,128]{2,1,0} parameter(705), sharding={devices=[8,1,1]<=[8]}
  %multiply.7002 = bf16[512,8,128]{2,1,0} multiply(%param.446, %broadcast.10167)
  %add.5770 = bf16[512,8,128]{0,2,1} add(%multiply.7001, %multiply.7002)
  %divide.1236 = bf16[512,8,128]{0,2,1} divide(%add.5770, %broadcast.10168)
  %sqrt.58 = bf16[512,8,128]{0,2,1} sqrt(%divide.1236)
  %add.5772 = bf16[512,8,128]{0,2,1} add(%sqrt.58, %broadcast.10169)
  %multiply.7003 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5772)
  %divide.1237 = bf16[512,8,128]{0,2,1} divide(%add.5769, %multiply.7003)
  %multiply.7005 = bf16[512,8,128]{2,1,0} multiply(%param.139, %broadcast.10163)
  %add.5773 = bf16[512,8,128]{0,2,1} add(%divide.1237, %multiply.7005)
  %multiply.7006 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5773)
  %add.5774 = bf16[512,8,128]{2,1,0} add(%param.139, %multiply.7006)
  %divide.1238 = bf16[32,128,512]{1,0,2} divide(%transpose.341, %broadcast.10172)
  %select.2643 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.341, %divide.1238)
  %multiply.7007 = bf16[32,128,512]{1,0,2} multiply(%select.2643, %broadcast.10173)
  %param.447 = bf16[32,128,512]{2,1,0} parameter(383), sharding={devices=[1,1,8]<=[8]}
  %multiply.7008 = bf16[32,128,512]{2,1,0} multiply(%param.447, %broadcast.10174)
  %add.5775 = bf16[32,128,512]{1,0,2} add(%multiply.7007, %multiply.7008)
  %multiply.7009 = bf16[32,128,512]{1,0,2} multiply(%select.2643, %select.2643)
  %multiply.7011 = bf16[32,128,512]{1,0,2} multiply(%multiply.7009, %broadcast.10176)
  %param.448 = bf16[32,128,512]{2,1,0} parameter(706), sharding={devices=[1,1,8]<=[8]}
  %multiply.7012 = bf16[32,128,512]{2,1,0} multiply(%param.448, %broadcast.10177)
  %add.5776 = bf16[32,128,512]{1,0,2} add(%multiply.7011, %multiply.7012)
  %divide.1239 = bf16[32,128,512]{1,0,2} divide(%add.5776, %broadcast.10178)
  %sqrt.59 = bf16[32,128,512]{1,0,2} sqrt(%divide.1239)
  %add.5777 = bf16[32,128,512]{1,0,2} add(%sqrt.59, %broadcast.10179)
  %multiply.7013 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.5777)
  %divide.1240 = bf16[32,128,512]{1,0,2} divide(%add.5775, %multiply.7013)
  %multiply.7014 = bf16[32,128,512]{2,1,0} multiply(%param.141, %broadcast.10173)
  %add.5779 = bf16[32,128,512]{1,0,2} add(%divide.1240, %multiply.7014)
  %multiply.7015 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.5779)
  %add.5780 = bf16[32,128,512]{2,1,0} add(%param.141, %multiply.7015)
  %divide.1241 = bf16[512,32,128]{0,2,1} divide(%transpose.342, %broadcast.10182)
  %select.2644 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.342, %divide.1241)
  %multiply.7016 = bf16[512,32,128]{0,2,1} multiply(%select.2644, %broadcast.10183)
  %param.449 = bf16[512,32,128]{2,1,0} parameter(384), sharding={devices=[8,1,1]<=[8]}
  %multiply.7017 = bf16[512,32,128]{2,1,0} multiply(%param.449, %broadcast.10184)
  %add.5781 = bf16[512,32,128]{0,2,1} add(%multiply.7016, %multiply.7017)
  %multiply.7018 = bf16[512,32,128]{0,2,1} multiply(%select.2644, %select.2644)
  %multiply.7020 = bf16[512,32,128]{0,2,1} multiply(%multiply.7018, %broadcast.10186)
  %param.450 = bf16[512,32,128]{2,1,0} parameter(707), sharding={devices=[8,1,1]<=[8]}
  %multiply.7021 = bf16[512,32,128]{2,1,0} multiply(%param.450, %broadcast.10187)
  %add.5782 = bf16[512,32,128]{0,2,1} add(%multiply.7020, %multiply.7021)
  %divide.1243 = bf16[512,32,128]{0,2,1} divide(%add.5782, %broadcast.10188)
  %sqrt.60 = bf16[512,32,128]{0,2,1} sqrt(%divide.1243)
  %add.5784 = bf16[512,32,128]{0,2,1} add(%sqrt.60, %broadcast.10189)
  %multiply.7022 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.5784)
  %divide.1244 = bf16[512,32,128]{0,2,1} divide(%add.5781, %multiply.7022)
  %multiply.7023 = bf16[512,32,128]{2,1,0} multiply(%param.138, %broadcast.10183)
  %add.5785 = bf16[512,32,128]{0,2,1} add(%divide.1244, %multiply.7023)
  %multiply.7024 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.5785)
  %add.5786 = bf16[512,32,128]{2,1,0} add(%param.138, %multiply.7024)
  %divide.1245 = bf16[512,8,128]{0,2,1} divide(%transpose.343, %broadcast.10162)
  %select.2645 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.343, %divide.1245)
  %multiply.7025 = bf16[512,8,128]{0,2,1} multiply(%select.2645, %broadcast.10163)
  %param.451 = bf16[512,8,128]{2,1,0} parameter(385), sharding={devices=[8,1,1]<=[8]}
  %multiply.7026 = bf16[512,8,128]{2,1,0} multiply(%param.451, %broadcast.10164)
  %add.5787 = bf16[512,8,128]{0,2,1} add(%multiply.7025, %multiply.7026)
  %multiply.7027 = bf16[512,8,128]{0,2,1} multiply(%select.2645, %select.2645)
  %multiply.7028 = bf16[512,8,128]{0,2,1} multiply(%multiply.7027, %broadcast.10166)
  %param.452 = bf16[512,8,128]{2,1,0} parameter(708), sharding={devices=[8,1,1]<=[8]}
  %multiply.7029 = bf16[512,8,128]{2,1,0} multiply(%param.452, %broadcast.10167)
  %add.5788 = bf16[512,8,128]{0,2,1} add(%multiply.7028, %multiply.7029)
  %divide.1246 = bf16[512,8,128]{0,2,1} divide(%add.5788, %broadcast.10168)
  %sqrt.61 = bf16[512,8,128]{0,2,1} sqrt(%divide.1246)
  %add.5789 = bf16[512,8,128]{0,2,1} add(%sqrt.61, %broadcast.10169)
  %multiply.7030 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5789)
  %divide.1247 = bf16[512,8,128]{0,2,1} divide(%add.5787, %multiply.7030)
  %multiply.7031 = bf16[512,8,128]{2,1,0} multiply(%param.140, %broadcast.10163)
  %add.5790 = bf16[512,8,128]{0,2,1} add(%divide.1247, %multiply.7031)
  %multiply.7032 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5790)
  %add.5791 = bf16[512,8,128]{2,1,0} add(%param.140, %multiply.7032)
  %divide.1248 = bf16[512,8]{0,1} divide(%dynamic-slice.2399, %broadcast.10097)
  %select.2646 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2399, %divide.1248)
  %multiply.7033 = bf16[512,8]{0,1} multiply(%select.2646, %broadcast.10098)
  %param.453 = bf16[512,8]{1,0} parameter(386), sharding={devices=[8,1]<=[8]}
  %multiply.7034 = bf16[512,8]{1,0} multiply(%param.453, %broadcast.10099)
  %add.5792 = bf16[512,8]{0,1} add(%multiply.7033, %multiply.7034)
  %multiply.7035 = bf16[512,8]{0,1} multiply(%select.2646, %select.2646)
  %multiply.7036 = bf16[512,8]{0,1} multiply(%multiply.7035, %broadcast.10101)
  %param.454 = bf16[512,8]{1,0} parameter(709), sharding={devices=[8,1]<=[8]}
  %multiply.7037 = bf16[512,8]{1,0} multiply(%param.454, %broadcast.10102)
  %add.5793 = bf16[512,8]{0,1} add(%multiply.7036, %multiply.7037)
  %divide.1249 = bf16[512,8]{0,1} divide(%add.5793, %broadcast.10103)
  %sqrt.62 = bf16[512,8]{0,1} sqrt(%divide.1249)
  %add.5794 = bf16[512,8]{0,1} add(%sqrt.62, %broadcast.10104)
  %multiply.7038 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.5794)
  %divide.1250 = bf16[512,8]{0,1} divide(%add.5792, %multiply.7038)
  %multiply.7039 = bf16[512,8]{1,0} multiply(%param.153, %broadcast.10098)
  %add.5795 = bf16[512,8]{0,1} add(%divide.1250, %multiply.7039)
  %multiply.7040 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.5795)
  %add.5796 = bf16[512,8]{1,0} add(%param.153, %multiply.7040)
  %divide.1251 = bf16[1,4096,14336]{2,1,0} divide(%copy.4219, %broadcast.10111)
  %select.2648 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4219, %divide.1251)
  %multiply.7042 = bf16[1,4096,14336]{2,1,0} multiply(%select.2648, %broadcast.10112)
  %param.455 = bf16[1,4096,14336]{2,1,0} parameter(387), sharding={devices=[8,1,1]<=[8]}
  %multiply.7043 = bf16[1,4096,14336]{2,1,0} multiply(%param.455, %broadcast.10113)
  %add.5797 = bf16[1,4096,14336]{2,1,0} add(%multiply.7042, %multiply.7043)
  %multiply.7044 = bf16[1,4096,14336]{2,1,0} multiply(%select.2648, %select.2648)
  %multiply.7046 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7044, %broadcast.10115)
  %param.456 = bf16[1,4096,14336]{2,1,0} parameter(710), sharding={devices=[8,1,1]<=[8]}
  %multiply.7047 = bf16[1,4096,14336]{2,1,0} multiply(%param.456, %broadcast.10116)
  %add.5798 = bf16[1,4096,14336]{2,1,0} add(%multiply.7046, %multiply.7047)
  %divide.1252 = bf16[1,4096,14336]{2,1,0} divide(%add.5798, %broadcast.10117)
  %sqrt.63 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1252)
  %add.5799 = bf16[1,4096,14336]{2,1,0} add(%sqrt.63, %broadcast.10119)
  %multiply.7048 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5799)
  %divide.1253 = bf16[1,4096,14336]{2,1,0} divide(%add.5797, %multiply.7048)
  %multiply.7049 = bf16[1,4096,14336]{2,1,0} multiply(%param.154, %broadcast.10112)
  %add.5800 = bf16[1,4096,14336]{2,1,0} add(%divide.1253, %multiply.7049)
  %multiply.7051 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5800)
  %add.5801 = bf16[1,4096,14336]{2,1,0} add(%param.154, %multiply.7051)
  %divide.1254 = bf16[1,4096,14336]{2,1,0} divide(%copy.4220, %broadcast.10111)
  %select.2649 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4220, %divide.1254)
  %multiply.7052 = bf16[1,4096,14336]{2,1,0} multiply(%select.2649, %broadcast.10112)
  %param.457 = bf16[1,4096,14336]{2,1,0} parameter(388), sharding={devices=[8,1,1]<=[8]}
  %multiply.7053 = bf16[1,4096,14336]{2,1,0} multiply(%param.457, %broadcast.10113)
  %add.5802 = bf16[1,4096,14336]{2,1,0} add(%multiply.7052, %multiply.7053)
  %multiply.7055 = bf16[1,4096,14336]{2,1,0} multiply(%select.2649, %select.2649)
  %multiply.7056 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7055, %broadcast.10115)
  %param.458 = bf16[1,4096,14336]{2,1,0} parameter(711), sharding={devices=[8,1,1]<=[8]}
  %multiply.7057 = bf16[1,4096,14336]{2,1,0} multiply(%param.458, %broadcast.10116)
  %add.5803 = bf16[1,4096,14336]{2,1,0} add(%multiply.7056, %multiply.7057)
  %divide.1255 = bf16[1,4096,14336]{2,1,0} divide(%add.5803, %broadcast.10117)
  %sqrt.64 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1255)
  %add.5804 = bf16[1,4096,14336]{2,1,0} add(%sqrt.64, %broadcast.10119)
  %multiply.7058 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5804)
  %divide.1256 = bf16[1,4096,14336]{2,1,0} divide(%add.5802, %multiply.7058)
  %multiply.7060 = bf16[1,4096,14336]{2,1,0} multiply(%param.155, %broadcast.10112)
  %add.5805 = bf16[1,4096,14336]{2,1,0} add(%divide.1256, %multiply.7060)
  %multiply.7061 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5805)
  %add.5806 = bf16[1,4096,14336]{2,1,0} add(%param.155, %multiply.7061)
  %divide.1257 = bf16[1,14336,4096]{2,1,0} divide(%copy.4221, %broadcast.10134)
  %select.2651 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4221, %divide.1257)
  %multiply.7062 = bf16[1,14336,4096]{2,1,0} multiply(%select.2651, %broadcast.10135)
  %param.459 = bf16[1,14336,4096]{2,1,0} parameter(389), sharding={devices=[8,1,1]<=[8]}
  %multiply.7063 = bf16[1,14336,4096]{2,1,0} multiply(%param.459, %broadcast.10136)
  %add.5807 = bf16[1,14336,4096]{2,1,0} add(%multiply.7062, %multiply.7063)
  %multiply.7064 = bf16[1,14336,4096]{2,1,0} multiply(%select.2651, %select.2651)
  %multiply.7065 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.7064, %broadcast.10138)
  %param.460 = bf16[1,14336,4096]{2,1,0} parameter(712), sharding={devices=[8,1,1]<=[8]}
  %multiply.7066 = bf16[1,14336,4096]{2,1,0} multiply(%param.460, %broadcast.10139)
  %add.5808 = bf16[1,14336,4096]{2,1,0} add(%multiply.7065, %multiply.7066)
  %divide.1258 = bf16[1,14336,4096]{2,1,0} divide(%add.5808, %broadcast.10140)
  %sqrt.65 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1258)
  %add.5809 = bf16[1,14336,4096]{2,1,0} add(%sqrt.65, %broadcast.10141)
  %multiply.7067 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.5809)
  %divide.1259 = bf16[1,14336,4096]{2,1,0} divide(%add.5807, %multiply.7067)
  %multiply.7068 = bf16[1,14336,4096]{2,1,0} multiply(%param.156, %broadcast.10135)
  %add.5810 = bf16[1,14336,4096]{2,1,0} add(%divide.1259, %multiply.7068)
  %multiply.7069 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.5810)
  %add.5811 = bf16[1,14336,4096]{2,1,0} add(%param.156, %multiply.7069)
  %divide.1260 = bf16[4096]{0} divide(%all-reduce.97, %broadcast.10081)
  %select.2652 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.97, %divide.1260)
  %multiply.7070 = bf16[4096]{0} multiply(%select.2652, %broadcast.10083)
  %param.461 = bf16[4096]{0} parameter(390), sharding={replicated}
  %multiply.7071 = bf16[4096]{0} multiply(%param.461, %broadcast.10085)
  %add.5812 = bf16[4096]{0} add(%multiply.7070, %multiply.7071)
  %multiply.7072 = bf16[4096]{0} multiply(%select.2652, %select.2652)
  %multiply.7073 = bf16[4096]{0} multiply(%multiply.7072, %broadcast.10088)
  %param.462 = bf16[4096]{0} parameter(713), sharding={replicated}
  %multiply.7074 = bf16[4096]{0} multiply(%param.462, %broadcast.10090)
  %add.5813 = bf16[4096]{0} add(%multiply.7073, %multiply.7074)
  %divide.1261 = bf16[4096]{0} divide(%add.5813, %broadcast.10092)
  %sqrt.66 = bf16[4096]{0} sqrt(%divide.1261)
  %add.5814 = bf16[4096]{0} add(%sqrt.66, %broadcast.10094)
  %multiply.7075 = bf16[4096]{0} multiply(%broadcast.10086, %add.5814)
  %divide.1262 = bf16[4096]{0} divide(%add.5812, %multiply.7075)
  %multiply.7076 = bf16[4096]{0} multiply(%param.152, %broadcast.10083)
  %add.5815 = bf16[4096]{0} add(%divide.1262, %multiply.7076)
  %multiply.7077 = bf16[4096]{0} multiply(%broadcast.5338, %add.5815)
  %add.5816 = bf16[4096]{0} add(%param.152, %multiply.7077)
  %divide.1263 = bf16[4096]{0} divide(%all-reduce.98, %broadcast.10081)
  %select.2654 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.98, %divide.1263)
  %multiply.7078 = bf16[4096]{0} multiply(%select.2654, %broadcast.10083)
  %param.463 = bf16[4096]{0} parameter(391), sharding={replicated}
  %multiply.7079 = bf16[4096]{0} multiply(%param.463, %broadcast.10085)
  %add.5817 = bf16[4096]{0} add(%multiply.7078, %multiply.7079)
  %multiply.7080 = bf16[4096]{0} multiply(%select.2654, %select.2654)
  %multiply.7082 = bf16[4096]{0} multiply(%multiply.7080, %broadcast.10088)
  %param.464 = bf16[4096]{0} parameter(714), sharding={replicated}
  %multiply.7083 = bf16[4096]{0} multiply(%param.464, %broadcast.10090)
  %add.5818 = bf16[4096]{0} add(%multiply.7082, %multiply.7083)
  %divide.1264 = bf16[4096]{0} divide(%add.5818, %broadcast.10092)
  %sqrt.67 = bf16[4096]{0} sqrt(%divide.1264)
  %add.5819 = bf16[4096]{0} add(%sqrt.67, %broadcast.10094)
  %multiply.7084 = bf16[4096]{0} multiply(%broadcast.10086, %add.5819)
  %divide.1265 = bf16[4096]{0} divide(%add.5817, %multiply.7084)
  %multiply.7086 = bf16[4096]{0} multiply(%param.147, %broadcast.10083)
  %add.5820 = bf16[4096]{0} add(%divide.1265, %multiply.7086)
  %multiply.7087 = bf16[4096]{0} multiply(%broadcast.5338, %add.5820)
  %add.5821 = bf16[4096]{0} add(%param.147, %multiply.7087)
  %divide.1266 = bf16[512,8,128]{0,2,1} divide(%transpose.344, %broadcast.10162)
  %select.2655 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.344, %divide.1266)
  %multiply.7088 = bf16[512,8,128]{0,2,1} multiply(%select.2655, %broadcast.10163)
  %param.465 = bf16[512,8,128]{2,1,0} parameter(392), sharding={devices=[8,1,1]<=[8]}
  %multiply.7089 = bf16[512,8,128]{2,1,0} multiply(%param.465, %broadcast.10164)
  %add.5822 = bf16[512,8,128]{0,2,1} add(%multiply.7088, %multiply.7089)
  %multiply.7091 = bf16[512,8,128]{0,2,1} multiply(%select.2655, %select.2655)
  %multiply.7092 = bf16[512,8,128]{0,2,1} multiply(%multiply.7091, %broadcast.10166)
  %param.466 = bf16[512,8,128]{2,1,0} parameter(715), sharding={devices=[8,1,1]<=[8]}
  %multiply.7093 = bf16[512,8,128]{2,1,0} multiply(%param.466, %broadcast.10167)
  %add.5823 = bf16[512,8,128]{0,2,1} add(%multiply.7092, %multiply.7093)
  %divide.1267 = bf16[512,8,128]{0,2,1} divide(%add.5823, %broadcast.10168)
  %sqrt.68 = bf16[512,8,128]{0,2,1} sqrt(%divide.1267)
  %add.5824 = bf16[512,8,128]{0,2,1} add(%sqrt.68, %broadcast.10169)
  %multiply.7095 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5824)
  %divide.1268 = bf16[512,8,128]{0,2,1} divide(%add.5822, %multiply.7095)
  %multiply.7096 = bf16[512,8,128]{2,1,0} multiply(%param.149, %broadcast.10163)
  %add.5825 = bf16[512,8,128]{0,2,1} add(%divide.1268, %multiply.7096)
  %multiply.7097 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5825)
  %add.5826 = bf16[512,8,128]{2,1,0} add(%param.149, %multiply.7097)
  %divide.1269 = bf16[32,128,512]{1,0,2} divide(%transpose.345, %broadcast.10172)
  %select.2656 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.345, %divide.1269)
  %multiply.7098 = bf16[32,128,512]{1,0,2} multiply(%select.2656, %broadcast.10173)
  %param.467 = bf16[32,128,512]{2,1,0} parameter(393), sharding={devices=[1,1,8]<=[8]}
  %multiply.7099 = bf16[32,128,512]{2,1,0} multiply(%param.467, %broadcast.10174)
  %add.5827 = bf16[32,128,512]{1,0,2} add(%multiply.7098, %multiply.7099)
  %multiply.7100 = bf16[32,128,512]{1,0,2} multiply(%select.2656, %select.2656)
  %multiply.7101 = bf16[32,128,512]{1,0,2} multiply(%multiply.7100, %broadcast.10176)
  %param.468 = bf16[32,128,512]{2,1,0} parameter(716), sharding={devices=[1,1,8]<=[8]}
  %multiply.7102 = bf16[32,128,512]{2,1,0} multiply(%param.468, %broadcast.10177)
  %add.5828 = bf16[32,128,512]{1,0,2} add(%multiply.7101, %multiply.7102)
  %divide.1270 = bf16[32,128,512]{1,0,2} divide(%add.5828, %broadcast.10178)
  %sqrt.69 = bf16[32,128,512]{1,0,2} sqrt(%divide.1270)
  %add.5829 = bf16[32,128,512]{1,0,2} add(%sqrt.69, %broadcast.10179)
  %multiply.7103 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.5829)
  %divide.1271 = bf16[32,128,512]{1,0,2} divide(%add.5827, %multiply.7103)
  %multiply.7104 = bf16[32,128,512]{2,1,0} multiply(%param.151, %broadcast.10173)
  %add.5830 = bf16[32,128,512]{1,0,2} add(%divide.1271, %multiply.7104)
  %multiply.7105 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.5830)
  %add.5831 = bf16[32,128,512]{2,1,0} add(%param.151, %multiply.7105)
  %divide.1272 = bf16[512,32,128]{0,2,1} divide(%transpose.346, %broadcast.10182)
  %select.2657 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.346, %divide.1272)
  %multiply.7106 = bf16[512,32,128]{0,2,1} multiply(%select.2657, %broadcast.10183)
  %param.469 = bf16[512,32,128]{2,1,0} parameter(394), sharding={devices=[8,1,1]<=[8]}
  %multiply.7107 = bf16[512,32,128]{2,1,0} multiply(%param.469, %broadcast.10184)
  %add.5832 = bf16[512,32,128]{0,2,1} add(%multiply.7106, %multiply.7107)
  %multiply.7108 = bf16[512,32,128]{0,2,1} multiply(%select.2657, %select.2657)
  %multiply.7109 = bf16[512,32,128]{0,2,1} multiply(%multiply.7108, %broadcast.10186)
  %param.470 = bf16[512,32,128]{2,1,0} parameter(717), sharding={devices=[8,1,1]<=[8]}
  %multiply.7110 = bf16[512,32,128]{2,1,0} multiply(%param.470, %broadcast.10187)
  %add.5833 = bf16[512,32,128]{0,2,1} add(%multiply.7109, %multiply.7110)
  %divide.1273 = bf16[512,32,128]{0,2,1} divide(%add.5833, %broadcast.10188)
  %sqrt.70 = bf16[512,32,128]{0,2,1} sqrt(%divide.1273)
  %add.5834 = bf16[512,32,128]{0,2,1} add(%sqrt.70, %broadcast.10189)
  %multiply.7111 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.5834)
  %divide.1274 = bf16[512,32,128]{0,2,1} divide(%add.5832, %multiply.7111)
  %multiply.7112 = bf16[512,32,128]{2,1,0} multiply(%param.148, %broadcast.10183)
  %add.5835 = bf16[512,32,128]{0,2,1} add(%divide.1274, %multiply.7112)
  %multiply.7113 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.5835)
  %add.5836 = bf16[512,32,128]{2,1,0} add(%param.148, %multiply.7113)
  %divide.1275 = bf16[512,8,128]{0,2,1} divide(%transpose.347, %broadcast.10162)
  %select.2658 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.347, %divide.1275)
  %multiply.7114 = bf16[512,8,128]{0,2,1} multiply(%select.2658, %broadcast.10163)
  %param.471 = bf16[512,8,128]{2,1,0} parameter(395), sharding={devices=[8,1,1]<=[8]}
  %multiply.7115 = bf16[512,8,128]{2,1,0} multiply(%param.471, %broadcast.10164)
  %add.5837 = bf16[512,8,128]{0,2,1} add(%multiply.7114, %multiply.7115)
  %multiply.7116 = bf16[512,8,128]{0,2,1} multiply(%select.2658, %select.2658)
  %multiply.7117 = bf16[512,8,128]{0,2,1} multiply(%multiply.7116, %broadcast.10166)
  %param.472 = bf16[512,8,128]{2,1,0} parameter(718), sharding={devices=[8,1,1]<=[8]}
  %multiply.7118 = bf16[512,8,128]{2,1,0} multiply(%param.472, %broadcast.10167)
  %add.5838 = bf16[512,8,128]{0,2,1} add(%multiply.7117, %multiply.7118)
  %divide.1276 = bf16[512,8,128]{0,2,1} divide(%add.5838, %broadcast.10168)
  %sqrt.71 = bf16[512,8,128]{0,2,1} sqrt(%divide.1276)
  %add.5840 = bf16[512,8,128]{0,2,1} add(%sqrt.71, %broadcast.10169)
  %multiply.7119 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5840)
  %divide.1277 = bf16[512,8,128]{0,2,1} divide(%add.5837, %multiply.7119)
  %multiply.7120 = bf16[512,8,128]{2,1,0} multiply(%param.150, %broadcast.10163)
  %add.5841 = bf16[512,8,128]{0,2,1} add(%divide.1277, %multiply.7120)
  %multiply.7121 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5841)
  %add.5842 = bf16[512,8,128]{2,1,0} add(%param.150, %multiply.7121)
  %divide.1278 = bf16[512,8]{0,1} divide(%dynamic-slice.2409, %broadcast.10097)
  %select.2659 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2409, %divide.1278)
  %multiply.7122 = bf16[512,8]{0,1} multiply(%select.2659, %broadcast.10098)
  %param.473 = bf16[512,8]{1,0} parameter(396), sharding={devices=[8,1]<=[8]}
  %multiply.7123 = bf16[512,8]{1,0} multiply(%param.473, %broadcast.10099)
  %add.5843 = bf16[512,8]{0,1} add(%multiply.7122, %multiply.7123)
  %multiply.7124 = bf16[512,8]{0,1} multiply(%select.2659, %select.2659)
  %multiply.7125 = bf16[512,8]{0,1} multiply(%multiply.7124, %broadcast.10101)
  %param.474 = bf16[512,8]{1,0} parameter(719), sharding={devices=[8,1]<=[8]}
  %multiply.7126 = bf16[512,8]{1,0} multiply(%param.474, %broadcast.10102)
  %add.5844 = bf16[512,8]{0,1} add(%multiply.7125, %multiply.7126)
  %divide.1279 = bf16[512,8]{0,1} divide(%add.5844, %broadcast.10103)
  %sqrt.72 = bf16[512,8]{0,1} sqrt(%divide.1279)
  %add.5845 = bf16[512,8]{0,1} add(%sqrt.72, %broadcast.10104)
  %multiply.7127 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.5845)
  %divide.1280 = bf16[512,8]{0,1} divide(%add.5843, %multiply.7127)
  %multiply.7128 = bf16[512,8]{1,0} multiply(%param.163, %broadcast.10098)
  %add.5846 = bf16[512,8]{0,1} add(%divide.1280, %multiply.7128)
  %multiply.7129 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.5846)
  %add.5847 = bf16[512,8]{1,0} add(%param.163, %multiply.7129)
  %divide.1281 = bf16[1,4096,14336]{2,1,0} divide(%copy.4222, %broadcast.10111)
  %select.2660 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4222, %divide.1281)
  %multiply.7130 = bf16[1,4096,14336]{2,1,0} multiply(%select.2660, %broadcast.10112)
  %param.475 = bf16[1,4096,14336]{2,1,0} parameter(397), sharding={devices=[8,1,1]<=[8]}
  %multiply.7131 = bf16[1,4096,14336]{2,1,0} multiply(%param.475, %broadcast.10113)
  %add.5848 = bf16[1,4096,14336]{2,1,0} add(%multiply.7130, %multiply.7131)
  %multiply.7132 = bf16[1,4096,14336]{2,1,0} multiply(%select.2660, %select.2660)
  %multiply.7133 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7132, %broadcast.10115)
  %param.476 = bf16[1,4096,14336]{2,1,0} parameter(720), sharding={devices=[8,1,1]<=[8]}
  %multiply.7134 = bf16[1,4096,14336]{2,1,0} multiply(%param.476, %broadcast.10116)
  %add.5849 = bf16[1,4096,14336]{2,1,0} add(%multiply.7133, %multiply.7134)
  %divide.1282 = bf16[1,4096,14336]{2,1,0} divide(%add.5849, %broadcast.10117)
  %sqrt.73 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1282)
  %add.5850 = bf16[1,4096,14336]{2,1,0} add(%sqrt.73, %broadcast.10119)
  %multiply.7135 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5850)
  %divide.1283 = bf16[1,4096,14336]{2,1,0} divide(%add.5848, %multiply.7135)
  %multiply.7136 = bf16[1,4096,14336]{2,1,0} multiply(%param.164, %broadcast.10112)
  %add.5851 = bf16[1,4096,14336]{2,1,0} add(%divide.1283, %multiply.7136)
  %multiply.7137 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5851)
  %add.5852 = bf16[1,4096,14336]{2,1,0} add(%param.164, %multiply.7137)
  %divide.1284 = bf16[1,4096,14336]{2,1,0} divide(%copy.4223, %broadcast.10111)
  %select.2661 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4223, %divide.1284)
  %multiply.7138 = bf16[1,4096,14336]{2,1,0} multiply(%select.2661, %broadcast.10112)
  %param.477 = bf16[1,4096,14336]{2,1,0} parameter(398), sharding={devices=[8,1,1]<=[8]}
  %multiply.7139 = bf16[1,4096,14336]{2,1,0} multiply(%param.477, %broadcast.10113)
  %add.5853 = bf16[1,4096,14336]{2,1,0} add(%multiply.7138, %multiply.7139)
  %multiply.7140 = bf16[1,4096,14336]{2,1,0} multiply(%select.2661, %select.2661)
  %multiply.7141 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7140, %broadcast.10115)
  %param.478 = bf16[1,4096,14336]{2,1,0} parameter(721), sharding={devices=[8,1,1]<=[8]}
  %multiply.7142 = bf16[1,4096,14336]{2,1,0} multiply(%param.478, %broadcast.10116)
  %add.5854 = bf16[1,4096,14336]{2,1,0} add(%multiply.7141, %multiply.7142)
  %divide.1285 = bf16[1,4096,14336]{2,1,0} divide(%add.5854, %broadcast.10117)
  %sqrt.74 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1285)
  %add.5855 = bf16[1,4096,14336]{2,1,0} add(%sqrt.74, %broadcast.10119)
  %multiply.7143 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5855)
  %divide.1286 = bf16[1,4096,14336]{2,1,0} divide(%add.5853, %multiply.7143)
  %multiply.7144 = bf16[1,4096,14336]{2,1,0} multiply(%param.165, %broadcast.10112)
  %add.5856 = bf16[1,4096,14336]{2,1,0} add(%divide.1286, %multiply.7144)
  %multiply.7145 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5856)
  %add.5857 = bf16[1,4096,14336]{2,1,0} add(%param.165, %multiply.7145)
  %divide.1287 = bf16[1,14336,4096]{2,1,0} divide(%copy.4224, %broadcast.10134)
  %select.2662 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4224, %divide.1287)
  %multiply.7146 = bf16[1,14336,4096]{2,1,0} multiply(%select.2662, %broadcast.10135)
  %param.479 = bf16[1,14336,4096]{2,1,0} parameter(399), sharding={devices=[8,1,1]<=[8]}
  %multiply.7147 = bf16[1,14336,4096]{2,1,0} multiply(%param.479, %broadcast.10136)
  %add.5858 = bf16[1,14336,4096]{2,1,0} add(%multiply.7146, %multiply.7147)
  %multiply.7148 = bf16[1,14336,4096]{2,1,0} multiply(%select.2662, %select.2662)
  %multiply.7149 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.7148, %broadcast.10138)
  %param.480 = bf16[1,14336,4096]{2,1,0} parameter(722), sharding={devices=[8,1,1]<=[8]}
  %multiply.7150 = bf16[1,14336,4096]{2,1,0} multiply(%param.480, %broadcast.10139)
  %add.5859 = bf16[1,14336,4096]{2,1,0} add(%multiply.7149, %multiply.7150)
  %divide.1288 = bf16[1,14336,4096]{2,1,0} divide(%add.5859, %broadcast.10140)
  %sqrt.75 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1288)
  %add.5860 = bf16[1,14336,4096]{2,1,0} add(%sqrt.75, %broadcast.10141)
  %multiply.7152 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.5860)
  %divide.1289 = bf16[1,14336,4096]{2,1,0} divide(%add.5858, %multiply.7152)
  %multiply.7153 = bf16[1,14336,4096]{2,1,0} multiply(%param.166, %broadcast.10135)
  %add.5861 = bf16[1,14336,4096]{2,1,0} add(%divide.1289, %multiply.7153)
  %multiply.7154 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.5861)
  %add.5862 = bf16[1,14336,4096]{2,1,0} add(%param.166, %multiply.7154)
  %divide.1290 = bf16[4096]{0} divide(%all-reduce.112, %broadcast.10081)
  %select.2663 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.112, %divide.1290)
  %multiply.7155 = bf16[4096]{0} multiply(%select.2663, %broadcast.10083)
  %param.481 = bf16[4096]{0} parameter(400), sharding={replicated}
  %multiply.7156 = bf16[4096]{0} multiply(%param.481, %broadcast.10085)
  %add.5863 = bf16[4096]{0} add(%multiply.7155, %multiply.7156)
  %multiply.7157 = bf16[4096]{0} multiply(%select.2663, %select.2663)
  %multiply.7158 = bf16[4096]{0} multiply(%multiply.7157, %broadcast.10088)
  %param.482 = bf16[4096]{0} parameter(723), sharding={replicated}
  %multiply.7159 = bf16[4096]{0} multiply(%param.482, %broadcast.10090)
  %add.5864 = bf16[4096]{0} add(%multiply.7158, %multiply.7159)
  %divide.1291 = bf16[4096]{0} divide(%add.5864, %broadcast.10092)
  %sqrt.76 = bf16[4096]{0} sqrt(%divide.1291)
  %add.5865 = bf16[4096]{0} add(%sqrt.76, %broadcast.10094)
  %multiply.7160 = bf16[4096]{0} multiply(%broadcast.10086, %add.5865)
  %divide.1292 = bf16[4096]{0} divide(%add.5863, %multiply.7160)
  %multiply.7161 = bf16[4096]{0} multiply(%param.162, %broadcast.10083)
  %add.5866 = bf16[4096]{0} add(%divide.1292, %multiply.7161)
  %multiply.7162 = bf16[4096]{0} multiply(%broadcast.5338, %add.5866)
  %add.5867 = bf16[4096]{0} add(%param.162, %multiply.7162)
  %divide.1293 = bf16[4096]{0} divide(%all-reduce.113, %broadcast.10081)
  %select.2664 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.113, %divide.1293)
  %multiply.7163 = bf16[4096]{0} multiply(%select.2664, %broadcast.10083)
  %param.483 = bf16[4096]{0} parameter(401), sharding={replicated}
  %multiply.7165 = bf16[4096]{0} multiply(%param.483, %broadcast.10085)
  %add.5868 = bf16[4096]{0} add(%multiply.7163, %multiply.7165)
  %multiply.7166 = bf16[4096]{0} multiply(%select.2664, %select.2664)
  %multiply.7167 = bf16[4096]{0} multiply(%multiply.7166, %broadcast.10088)
  %param.484 = bf16[4096]{0} parameter(724), sharding={replicated}
  %multiply.7168 = bf16[4096]{0} multiply(%param.484, %broadcast.10090)
  %add.5869 = bf16[4096]{0} add(%multiply.7167, %multiply.7168)
  %divide.1294 = bf16[4096]{0} divide(%add.5869, %broadcast.10092)
  %sqrt.77 = bf16[4096]{0} sqrt(%divide.1294)
  %add.5870 = bf16[4096]{0} add(%sqrt.77, %broadcast.10094)
  %multiply.7169 = bf16[4096]{0} multiply(%broadcast.10086, %add.5870)
  %divide.1295 = bf16[4096]{0} divide(%add.5868, %multiply.7169)
  %multiply.7171 = bf16[4096]{0} multiply(%param.157, %broadcast.10083)
  %add.5871 = bf16[4096]{0} add(%divide.1295, %multiply.7171)
  %multiply.7172 = bf16[4096]{0} multiply(%broadcast.5338, %add.5871)
  %add.5872 = bf16[4096]{0} add(%param.157, %multiply.7172)
  %divide.1296 = bf16[512,8,128]{0,2,1} divide(%transpose.348, %broadcast.10162)
  %select.2665 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.348, %divide.1296)
  %multiply.7173 = bf16[512,8,128]{0,2,1} multiply(%select.2665, %broadcast.10163)
  %param.485 = bf16[512,8,128]{2,1,0} parameter(402), sharding={devices=[8,1,1]<=[8]}
  %multiply.7174 = bf16[512,8,128]{2,1,0} multiply(%param.485, %broadcast.10164)
  %add.5873 = bf16[512,8,128]{0,2,1} add(%multiply.7173, %multiply.7174)
  %multiply.7175 = bf16[512,8,128]{0,2,1} multiply(%select.2665, %select.2665)
  %multiply.7176 = bf16[512,8,128]{0,2,1} multiply(%multiply.7175, %broadcast.10166)
  %param.486 = bf16[512,8,128]{2,1,0} parameter(725), sharding={devices=[8,1,1]<=[8]}
  %multiply.7177 = bf16[512,8,128]{2,1,0} multiply(%param.486, %broadcast.10167)
  %add.5874 = bf16[512,8,128]{0,2,1} add(%multiply.7176, %multiply.7177)
  %divide.1297 = bf16[512,8,128]{0,2,1} divide(%add.5874, %broadcast.10168)
  %sqrt.78 = bf16[512,8,128]{0,2,1} sqrt(%divide.1297)
  %add.5875 = bf16[512,8,128]{0,2,1} add(%sqrt.78, %broadcast.10169)
  %multiply.7178 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5875)
  %divide.1298 = bf16[512,8,128]{0,2,1} divide(%add.5873, %multiply.7178)
  %multiply.7179 = bf16[512,8,128]{2,1,0} multiply(%param.159, %broadcast.10163)
  %add.5876 = bf16[512,8,128]{0,2,1} add(%divide.1298, %multiply.7179)
  %multiply.7180 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5876)
  %add.5877 = bf16[512,8,128]{2,1,0} add(%param.159, %multiply.7180)
  %divide.1299 = bf16[32,128,512]{1,0,2} divide(%transpose.349, %broadcast.10172)
  %select.2666 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.349, %divide.1299)
  %multiply.7181 = bf16[32,128,512]{1,0,2} multiply(%select.2666, %broadcast.10173)
  %param.487 = bf16[32,128,512]{2,1,0} parameter(403), sharding={devices=[1,1,8]<=[8]}
  %multiply.7182 = bf16[32,128,512]{2,1,0} multiply(%param.487, %broadcast.10174)
  %add.5878 = bf16[32,128,512]{1,0,2} add(%multiply.7181, %multiply.7182)
  %multiply.7183 = bf16[32,128,512]{1,0,2} multiply(%select.2666, %select.2666)
  %multiply.7184 = bf16[32,128,512]{1,0,2} multiply(%multiply.7183, %broadcast.10176)
  %param.488 = bf16[32,128,512]{2,1,0} parameter(726), sharding={devices=[1,1,8]<=[8]}
  %multiply.7185 = bf16[32,128,512]{2,1,0} multiply(%param.488, %broadcast.10177)
  %add.5880 = bf16[32,128,512]{1,0,2} add(%multiply.7184, %multiply.7185)
  %divide.1300 = bf16[32,128,512]{1,0,2} divide(%add.5880, %broadcast.10178)
  %sqrt.79 = bf16[32,128,512]{1,0,2} sqrt(%divide.1300)
  %add.5881 = bf16[32,128,512]{1,0,2} add(%sqrt.79, %broadcast.10179)
  %multiply.7186 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.5881)
  %divide.1301 = bf16[32,128,512]{1,0,2} divide(%add.5878, %multiply.7186)
  %multiply.7187 = bf16[32,128,512]{2,1,0} multiply(%param.161, %broadcast.10173)
  %add.5882 = bf16[32,128,512]{1,0,2} add(%divide.1301, %multiply.7187)
  %multiply.7188 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.5882)
  %add.5883 = bf16[32,128,512]{2,1,0} add(%param.161, %multiply.7188)
  %divide.1302 = bf16[512,32,128]{0,2,1} divide(%transpose.350, %broadcast.10182)
  %select.2667 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.350, %divide.1302)
  %multiply.7189 = bf16[512,32,128]{0,2,1} multiply(%select.2667, %broadcast.10183)
  %param.489 = bf16[512,32,128]{2,1,0} parameter(404), sharding={devices=[8,1,1]<=[8]}
  %multiply.7190 = bf16[512,32,128]{2,1,0} multiply(%param.489, %broadcast.10184)
  %add.5884 = bf16[512,32,128]{0,2,1} add(%multiply.7189, %multiply.7190)
  %multiply.7191 = bf16[512,32,128]{0,2,1} multiply(%select.2667, %select.2667)
  %multiply.7192 = bf16[512,32,128]{0,2,1} multiply(%multiply.7191, %broadcast.10186)
  %param.490 = bf16[512,32,128]{2,1,0} parameter(727), sharding={devices=[8,1,1]<=[8]}
  %multiply.7193 = bf16[512,32,128]{2,1,0} multiply(%param.490, %broadcast.10187)
  %add.5885 = bf16[512,32,128]{0,2,1} add(%multiply.7192, %multiply.7193)
  %divide.1303 = bf16[512,32,128]{0,2,1} divide(%add.5885, %broadcast.10188)
  %sqrt.80 = bf16[512,32,128]{0,2,1} sqrt(%divide.1303)
  %add.5886 = bf16[512,32,128]{0,2,1} add(%sqrt.80, %broadcast.10189)
  %multiply.7194 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.5886)
  %divide.1304 = bf16[512,32,128]{0,2,1} divide(%add.5884, %multiply.7194)
  %multiply.7195 = bf16[512,32,128]{2,1,0} multiply(%param.158, %broadcast.10183)
  %add.5887 = bf16[512,32,128]{0,2,1} add(%divide.1304, %multiply.7195)
  %multiply.7196 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.5887)
  %add.5888 = bf16[512,32,128]{2,1,0} add(%param.158, %multiply.7196)
  %divide.1305 = bf16[512,8,128]{0,2,1} divide(%transpose.351, %broadcast.10162)
  %select.2668 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.351, %divide.1305)
  %multiply.7197 = bf16[512,8,128]{0,2,1} multiply(%select.2668, %broadcast.10163)
  %param.491 = bf16[512,8,128]{2,1,0} parameter(405), sharding={devices=[8,1,1]<=[8]}
  %multiply.7198 = bf16[512,8,128]{2,1,0} multiply(%param.491, %broadcast.10164)
  %add.5889 = bf16[512,8,128]{0,2,1} add(%multiply.7197, %multiply.7198)
  %multiply.7199 = bf16[512,8,128]{0,2,1} multiply(%select.2668, %select.2668)
  %multiply.7200 = bf16[512,8,128]{0,2,1} multiply(%multiply.7199, %broadcast.10166)
  %param.492 = bf16[512,8,128]{2,1,0} parameter(728), sharding={devices=[8,1,1]<=[8]}
  %multiply.7201 = bf16[512,8,128]{2,1,0} multiply(%param.492, %broadcast.10167)
  %add.5890 = bf16[512,8,128]{0,2,1} add(%multiply.7200, %multiply.7201)
  %divide.1306 = bf16[512,8,128]{0,2,1} divide(%add.5890, %broadcast.10168)
  %sqrt.81 = bf16[512,8,128]{0,2,1} sqrt(%divide.1306)
  %add.5891 = bf16[512,8,128]{0,2,1} add(%sqrt.81, %broadcast.10169)
  %multiply.7202 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5891)
  %divide.1307 = bf16[512,8,128]{0,2,1} divide(%add.5889, %multiply.7202)
  %multiply.7203 = bf16[512,8,128]{2,1,0} multiply(%param.160, %broadcast.10163)
  %add.5892 = bf16[512,8,128]{0,2,1} add(%divide.1307, %multiply.7203)
  %multiply.7204 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5892)
  %add.5893 = bf16[512,8,128]{2,1,0} add(%param.160, %multiply.7204)
  %divide.1308 = bf16[512,8]{0,1} divide(%dynamic-slice.2419, %broadcast.10097)
  %select.2669 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2419, %divide.1308)
  %multiply.7205 = bf16[512,8]{0,1} multiply(%select.2669, %broadcast.10098)
  %param.493 = bf16[512,8]{1,0} parameter(406), sharding={devices=[8,1]<=[8]}
  %multiply.7206 = bf16[512,8]{1,0} multiply(%param.493, %broadcast.10099)
  %add.5894 = bf16[512,8]{0,1} add(%multiply.7205, %multiply.7206)
  %multiply.7207 = bf16[512,8]{0,1} multiply(%select.2669, %select.2669)
  %multiply.7208 = bf16[512,8]{0,1} multiply(%multiply.7207, %broadcast.10101)
  %param.494 = bf16[512,8]{1,0} parameter(729), sharding={devices=[8,1]<=[8]}
  %multiply.7209 = bf16[512,8]{1,0} multiply(%param.494, %broadcast.10102)
  %add.5895 = bf16[512,8]{0,1} add(%multiply.7208, %multiply.7209)
  %divide.1309 = bf16[512,8]{0,1} divide(%add.5895, %broadcast.10103)
  %sqrt.82 = bf16[512,8]{0,1} sqrt(%divide.1309)
  %add.5896 = bf16[512,8]{0,1} add(%sqrt.82, %broadcast.10104)
  %multiply.7210 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.5896)
  %divide.1310 = bf16[512,8]{0,1} divide(%add.5894, %multiply.7210)
  %multiply.7211 = bf16[512,8]{1,0} multiply(%param.173, %broadcast.10098)
  %add.5897 = bf16[512,8]{0,1} add(%divide.1310, %multiply.7211)
  %multiply.7212 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.5897)
  %add.5898 = bf16[512,8]{1,0} add(%param.173, %multiply.7212)
  %divide.1311 = bf16[1,4096,14336]{2,1,0} divide(%copy.4225, %broadcast.10111)
  %select.2670 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4225, %divide.1311)
  %multiply.7213 = bf16[1,4096,14336]{2,1,0} multiply(%select.2670, %broadcast.10112)
  %param.495 = bf16[1,4096,14336]{2,1,0} parameter(407), sharding={devices=[8,1,1]<=[8]}
  %multiply.7214 = bf16[1,4096,14336]{2,1,0} multiply(%param.495, %broadcast.10113)
  %add.5899 = bf16[1,4096,14336]{2,1,0} add(%multiply.7213, %multiply.7214)
  %multiply.7215 = bf16[1,4096,14336]{2,1,0} multiply(%select.2670, %select.2670)
  %multiply.7216 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7215, %broadcast.10115)
  %param.496 = bf16[1,4096,14336]{2,1,0} parameter(730), sharding={devices=[8,1,1]<=[8]}
  %multiply.7217 = bf16[1,4096,14336]{2,1,0} multiply(%param.496, %broadcast.10116)
  %add.5900 = bf16[1,4096,14336]{2,1,0} add(%multiply.7216, %multiply.7217)
  %divide.1312 = bf16[1,4096,14336]{2,1,0} divide(%add.5900, %broadcast.10117)
  %sqrt.83 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1312)
  %add.5901 = bf16[1,4096,14336]{2,1,0} add(%sqrt.83, %broadcast.10119)
  %multiply.7218 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5901)
  %divide.1313 = bf16[1,4096,14336]{2,1,0} divide(%add.5899, %multiply.7218)
  %multiply.7219 = bf16[1,4096,14336]{2,1,0} multiply(%param.174, %broadcast.10112)
  %add.5902 = bf16[1,4096,14336]{2,1,0} add(%divide.1313, %multiply.7219)
  %multiply.7220 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5902)
  %add.5903 = bf16[1,4096,14336]{2,1,0} add(%param.174, %multiply.7220)
  %divide.1314 = bf16[1,4096,14336]{2,1,0} divide(%copy.4226, %broadcast.10111)
  %select.2671 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4226, %divide.1314)
  %multiply.7221 = bf16[1,4096,14336]{2,1,0} multiply(%select.2671, %broadcast.10112)
  %param.497 = bf16[1,4096,14336]{2,1,0} parameter(408), sharding={devices=[8,1,1]<=[8]}
  %multiply.7222 = bf16[1,4096,14336]{2,1,0} multiply(%param.497, %broadcast.10113)
  %add.5904 = bf16[1,4096,14336]{2,1,0} add(%multiply.7221, %multiply.7222)
  %multiply.7223 = bf16[1,4096,14336]{2,1,0} multiply(%select.2671, %select.2671)
  %multiply.7224 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7223, %broadcast.10115)
  %param.498 = bf16[1,4096,14336]{2,1,0} parameter(731), sharding={devices=[8,1,1]<=[8]}
  %multiply.7225 = bf16[1,4096,14336]{2,1,0} multiply(%param.498, %broadcast.10116)
  %add.5905 = bf16[1,4096,14336]{2,1,0} add(%multiply.7224, %multiply.7225)
  %divide.1315 = bf16[1,4096,14336]{2,1,0} divide(%add.5905, %broadcast.10117)
  %sqrt.84 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1315)
  %add.5906 = bf16[1,4096,14336]{2,1,0} add(%sqrt.84, %broadcast.10119)
  %multiply.7226 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5906)
  %divide.1316 = bf16[1,4096,14336]{2,1,0} divide(%add.5904, %multiply.7226)
  %multiply.7227 = bf16[1,4096,14336]{2,1,0} multiply(%param.175, %broadcast.10112)
  %add.5907 = bf16[1,4096,14336]{2,1,0} add(%divide.1316, %multiply.7227)
  %multiply.7228 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5907)
  %add.5908 = bf16[1,4096,14336]{2,1,0} add(%param.175, %multiply.7228)
  %divide.1317 = bf16[1,14336,4096]{2,1,0} divide(%copy.4227, %broadcast.10134)
  %select.2672 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4227, %divide.1317)
  %multiply.7229 = bf16[1,14336,4096]{2,1,0} multiply(%select.2672, %broadcast.10135)
  %param.499 = bf16[1,14336,4096]{2,1,0} parameter(409), sharding={devices=[8,1,1]<=[8]}
  %multiply.7230 = bf16[1,14336,4096]{2,1,0} multiply(%param.499, %broadcast.10136)
  %add.5909 = bf16[1,14336,4096]{2,1,0} add(%multiply.7229, %multiply.7230)
  %multiply.7231 = bf16[1,14336,4096]{2,1,0} multiply(%select.2672, %select.2672)
  %multiply.7232 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.7231, %broadcast.10138)
  %param.500 = bf16[1,14336,4096]{2,1,0} parameter(732), sharding={devices=[8,1,1]<=[8]}
  %multiply.7233 = bf16[1,14336,4096]{2,1,0} multiply(%param.500, %broadcast.10139)
  %add.5911 = bf16[1,14336,4096]{2,1,0} add(%multiply.7232, %multiply.7233)
  %divide.1318 = bf16[1,14336,4096]{2,1,0} divide(%add.5911, %broadcast.10140)
  %sqrt.85 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1318)
  %add.5912 = bf16[1,14336,4096]{2,1,0} add(%sqrt.85, %broadcast.10141)
  %multiply.7234 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.5912)
  %divide.1319 = bf16[1,14336,4096]{2,1,0} divide(%add.5909, %multiply.7234)
  %multiply.7235 = bf16[1,14336,4096]{2,1,0} multiply(%param.176, %broadcast.10135)
  %add.5913 = bf16[1,14336,4096]{2,1,0} add(%divide.1319, %multiply.7235)
  %multiply.7236 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.5913)
  %add.5914 = bf16[1,14336,4096]{2,1,0} add(%param.176, %multiply.7236)
  %divide.1320 = bf16[4096]{0} divide(%all-reduce.127, %broadcast.10081)
  %select.2674 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.127, %divide.1320)
  %multiply.7237 = bf16[4096]{0} multiply(%select.2674, %broadcast.10083)
  %param.501 = bf16[4096]{0} parameter(410), sharding={replicated}
  %multiply.7238 = bf16[4096]{0} multiply(%param.501, %broadcast.10085)
  %add.5915 = bf16[4096]{0} add(%multiply.7237, %multiply.7238)
  %multiply.7239 = bf16[4096]{0} multiply(%select.2674, %select.2674)
  %multiply.7240 = bf16[4096]{0} multiply(%multiply.7239, %broadcast.10088)
  %param.502 = bf16[4096]{0} parameter(733), sharding={replicated}
  %multiply.7241 = bf16[4096]{0} multiply(%param.502, %broadcast.10090)
  %add.5916 = bf16[4096]{0} add(%multiply.7240, %multiply.7241)
  %divide.1321 = bf16[4096]{0} divide(%add.5916, %broadcast.10092)
  %sqrt.86 = bf16[4096]{0} sqrt(%divide.1321)
  %add.5917 = bf16[4096]{0} add(%sqrt.86, %broadcast.10094)
  %multiply.7242 = bf16[4096]{0} multiply(%broadcast.10086, %add.5917)
  %divide.1322 = bf16[4096]{0} divide(%add.5915, %multiply.7242)
  %multiply.7243 = bf16[4096]{0} multiply(%param.172, %broadcast.10083)
  %add.5919 = bf16[4096]{0} add(%divide.1322, %multiply.7243)
  %multiply.7244 = bf16[4096]{0} multiply(%broadcast.5338, %add.5919)
  %add.5920 = bf16[4096]{0} add(%param.172, %multiply.7244)
  %divide.1323 = bf16[4096]{0} divide(%all-reduce.128, %broadcast.10081)
  %select.2675 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.128, %divide.1323)
  %multiply.7245 = bf16[4096]{0} multiply(%select.2675, %broadcast.10083)
  %param.503 = bf16[4096]{0} parameter(411), sharding={replicated}
  %multiply.7246 = bf16[4096]{0} multiply(%param.503, %broadcast.10085)
  %add.5921 = bf16[4096]{0} add(%multiply.7245, %multiply.7246)
  %multiply.7248 = bf16[4096]{0} multiply(%select.2675, %select.2675)
  %multiply.7249 = bf16[4096]{0} multiply(%multiply.7248, %broadcast.10088)
  %param.504 = bf16[4096]{0} parameter(734), sharding={replicated}
  %multiply.7250 = bf16[4096]{0} multiply(%param.504, %broadcast.10090)
  %add.5922 = bf16[4096]{0} add(%multiply.7249, %multiply.7250)
  %divide.1324 = bf16[4096]{0} divide(%add.5922, %broadcast.10092)
  %sqrt.87 = bf16[4096]{0} sqrt(%divide.1324)
  %add.5923 = bf16[4096]{0} add(%sqrt.87, %broadcast.10094)
  %multiply.7251 = bf16[4096]{0} multiply(%broadcast.10086, %add.5923)
  %divide.1325 = bf16[4096]{0} divide(%add.5921, %multiply.7251)
  %multiply.7252 = bf16[4096]{0} multiply(%param.167, %broadcast.10083)
  %add.5924 = bf16[4096]{0} add(%divide.1325, %multiply.7252)
  %multiply.7253 = bf16[4096]{0} multiply(%broadcast.5338, %add.5924)
  %add.5925 = bf16[4096]{0} add(%param.167, %multiply.7253)
  %divide.1326 = bf16[512,8,128]{0,2,1} divide(%transpose.352, %broadcast.10162)
  %select.2676 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.352, %divide.1326)
  %multiply.7256 = bf16[512,8,128]{0,2,1} multiply(%select.2676, %broadcast.10163)
  %param.505 = bf16[512,8,128]{2,1,0} parameter(412), sharding={devices=[8,1,1]<=[8]}
  %multiply.7257 = bf16[512,8,128]{2,1,0} multiply(%param.505, %broadcast.10164)
  %add.5926 = bf16[512,8,128]{0,2,1} add(%multiply.7256, %multiply.7257)
  %multiply.7258 = bf16[512,8,128]{0,2,1} multiply(%select.2676, %select.2676)
  %multiply.7259 = bf16[512,8,128]{0,2,1} multiply(%multiply.7258, %broadcast.10166)
  %param.506 = bf16[512,8,128]{2,1,0} parameter(735), sharding={devices=[8,1,1]<=[8]}
  %multiply.7260 = bf16[512,8,128]{2,1,0} multiply(%param.506, %broadcast.10167)
  %add.5927 = bf16[512,8,128]{0,2,1} add(%multiply.7259, %multiply.7260)
  %divide.1327 = bf16[512,8,128]{0,2,1} divide(%add.5927, %broadcast.10168)
  %sqrt.88 = bf16[512,8,128]{0,2,1} sqrt(%divide.1327)
  %add.5928 = bf16[512,8,128]{0,2,1} add(%sqrt.88, %broadcast.10169)
  %multiply.7261 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5928)
  %divide.1328 = bf16[512,8,128]{0,2,1} divide(%add.5926, %multiply.7261)
  %multiply.7263 = bf16[512,8,128]{2,1,0} multiply(%param.169, %broadcast.10163)
  %add.5929 = bf16[512,8,128]{0,2,1} add(%divide.1328, %multiply.7263)
  %multiply.7264 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5929)
  %add.5930 = bf16[512,8,128]{2,1,0} add(%param.169, %multiply.7264)
  %divide.1329 = bf16[32,128,512]{1,0,2} divide(%transpose.353, %broadcast.10172)
  %select.2677 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.353, %divide.1329)
  %multiply.7265 = bf16[32,128,512]{1,0,2} multiply(%select.2677, %broadcast.10173)
  %param.507 = bf16[32,128,512]{2,1,0} parameter(413), sharding={devices=[1,1,8]<=[8]}
  %multiply.7266 = bf16[32,128,512]{2,1,0} multiply(%param.507, %broadcast.10174)
  %add.5931 = bf16[32,128,512]{1,0,2} add(%multiply.7265, %multiply.7266)
  %multiply.7267 = bf16[32,128,512]{1,0,2} multiply(%select.2677, %select.2677)
  %multiply.7268 = bf16[32,128,512]{1,0,2} multiply(%multiply.7267, %broadcast.10176)
  %param.508 = bf16[32,128,512]{2,1,0} parameter(736), sharding={devices=[1,1,8]<=[8]}
  %multiply.7270 = bf16[32,128,512]{2,1,0} multiply(%param.508, %broadcast.10177)
  %add.5932 = bf16[32,128,512]{1,0,2} add(%multiply.7268, %multiply.7270)
  %divide.1330 = bf16[32,128,512]{1,0,2} divide(%add.5932, %broadcast.10178)
  %sqrt.89 = bf16[32,128,512]{1,0,2} sqrt(%divide.1330)
  %add.5934 = bf16[32,128,512]{1,0,2} add(%sqrt.89, %broadcast.10179)
  %multiply.7271 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.5934)
  %divide.1331 = bf16[32,128,512]{1,0,2} divide(%add.5931, %multiply.7271)
  %multiply.7272 = bf16[32,128,512]{2,1,0} multiply(%param.171, %broadcast.10173)
  %add.5935 = bf16[32,128,512]{1,0,2} add(%divide.1331, %multiply.7272)
  %multiply.7273 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.5935)
  %add.5936 = bf16[32,128,512]{2,1,0} add(%param.171, %multiply.7273)
  %divide.1332 = bf16[512,32,128]{0,2,1} divide(%transpose.354, %broadcast.10182)
  %select.2678 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.354, %divide.1332)
  %multiply.7274 = bf16[512,32,128]{0,2,1} multiply(%select.2678, %broadcast.10183)
  %param.509 = bf16[512,32,128]{2,1,0} parameter(414), sharding={devices=[8,1,1]<=[8]}
  %multiply.7275 = bf16[512,32,128]{2,1,0} multiply(%param.509, %broadcast.10184)
  %add.5937 = bf16[512,32,128]{0,2,1} add(%multiply.7274, %multiply.7275)
  %multiply.7276 = bf16[512,32,128]{0,2,1} multiply(%select.2678, %select.2678)
  %multiply.7277 = bf16[512,32,128]{0,2,1} multiply(%multiply.7276, %broadcast.10186)
  %param.510 = bf16[512,32,128]{2,1,0} parameter(737), sharding={devices=[8,1,1]<=[8]}
  %multiply.7278 = bf16[512,32,128]{2,1,0} multiply(%param.510, %broadcast.10187)
  %add.5939 = bf16[512,32,128]{0,2,1} add(%multiply.7277, %multiply.7278)
  %divide.1333 = bf16[512,32,128]{0,2,1} divide(%add.5939, %broadcast.10188)
  %sqrt.90 = bf16[512,32,128]{0,2,1} sqrt(%divide.1333)
  %add.5940 = bf16[512,32,128]{0,2,1} add(%sqrt.90, %broadcast.10189)
  %multiply.7279 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.5940)
  %divide.1334 = bf16[512,32,128]{0,2,1} divide(%add.5937, %multiply.7279)
  %multiply.7280 = bf16[512,32,128]{2,1,0} multiply(%param.168, %broadcast.10183)
  %add.5941 = bf16[512,32,128]{0,2,1} add(%divide.1334, %multiply.7280)
  %multiply.7281 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.5941)
  %add.5942 = bf16[512,32,128]{2,1,0} add(%param.168, %multiply.7281)
  %divide.1335 = bf16[512,8,128]{0,2,1} divide(%transpose.355, %broadcast.10162)
  %select.2679 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.355, %divide.1335)
  %multiply.7282 = bf16[512,8,128]{0,2,1} multiply(%select.2679, %broadcast.10163)
  %param.511 = bf16[512,8,128]{2,1,0} parameter(415), sharding={devices=[8,1,1]<=[8]}
  %multiply.7283 = bf16[512,8,128]{2,1,0} multiply(%param.511, %broadcast.10164)
  %add.5944 = bf16[512,8,128]{0,2,1} add(%multiply.7282, %multiply.7283)
  %multiply.7284 = bf16[512,8,128]{0,2,1} multiply(%select.2679, %select.2679)
  %multiply.7286 = bf16[512,8,128]{0,2,1} multiply(%multiply.7284, %broadcast.10166)
  %param.512 = bf16[512,8,128]{2,1,0} parameter(738), sharding={devices=[8,1,1]<=[8]}
  %multiply.7287 = bf16[512,8,128]{2,1,0} multiply(%param.512, %broadcast.10167)
  %add.5945 = bf16[512,8,128]{0,2,1} add(%multiply.7286, %multiply.7287)
  %divide.1337 = bf16[512,8,128]{0,2,1} divide(%add.5945, %broadcast.10168)
  %sqrt.91 = bf16[512,8,128]{0,2,1} sqrt(%divide.1337)
  %add.5946 = bf16[512,8,128]{0,2,1} add(%sqrt.91, %broadcast.10169)
  %multiply.7288 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5946)
  %divide.1338 = bf16[512,8,128]{0,2,1} divide(%add.5944, %multiply.7288)
  %multiply.7289 = bf16[512,8,128]{2,1,0} multiply(%param.170, %broadcast.10163)
  %add.5947 = bf16[512,8,128]{0,2,1} add(%divide.1338, %multiply.7289)
  %multiply.7290 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5947)
  %add.5948 = bf16[512,8,128]{2,1,0} add(%param.170, %multiply.7290)
  %divide.1339 = bf16[512,8]{0,1} divide(%dynamic-slice.2429, %broadcast.10097)
  %select.2680 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2429, %divide.1339)
  %multiply.7291 = bf16[512,8]{0,1} multiply(%select.2680, %broadcast.10098)
  %param.513 = bf16[512,8]{1,0} parameter(416), sharding={devices=[8,1]<=[8]}
  %multiply.7292 = bf16[512,8]{1,0} multiply(%param.513, %broadcast.10099)
  %add.5949 = bf16[512,8]{0,1} add(%multiply.7291, %multiply.7292)
  %multiply.7293 = bf16[512,8]{0,1} multiply(%select.2680, %select.2680)
  %multiply.7294 = bf16[512,8]{0,1} multiply(%multiply.7293, %broadcast.10101)
  %param.514 = bf16[512,8]{1,0} parameter(739), sharding={devices=[8,1]<=[8]}
  %multiply.7296 = bf16[512,8]{1,0} multiply(%param.514, %broadcast.10102)
  %add.5950 = bf16[512,8]{0,1} add(%multiply.7294, %multiply.7296)
  %divide.1340 = bf16[512,8]{0,1} divide(%add.5950, %broadcast.10103)
  %sqrt.92 = bf16[512,8]{0,1} sqrt(%divide.1340)
  %add.5951 = bf16[512,8]{0,1} add(%sqrt.92, %broadcast.10104)
  %multiply.7297 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.5951)
  %divide.1341 = bf16[512,8]{0,1} divide(%add.5949, %multiply.7297)
  %multiply.7298 = bf16[512,8]{1,0} multiply(%param.183, %broadcast.10098)
  %add.5952 = bf16[512,8]{0,1} add(%divide.1341, %multiply.7298)
  %multiply.7299 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.5952)
  %add.5953 = bf16[512,8]{1,0} add(%param.183, %multiply.7299)
  %divide.1342 = bf16[1,4096,14336]{2,1,0} divide(%copy.4228, %broadcast.10111)
  %select.2681 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4228, %divide.1342)
  %multiply.7300 = bf16[1,4096,14336]{2,1,0} multiply(%select.2681, %broadcast.10112)
  %param.515 = bf16[1,4096,14336]{2,1,0} parameter(417), sharding={devices=[8,1,1]<=[8]}
  %multiply.7301 = bf16[1,4096,14336]{2,1,0} multiply(%param.515, %broadcast.10113)
  %add.5954 = bf16[1,4096,14336]{2,1,0} add(%multiply.7300, %multiply.7301)
  %multiply.7302 = bf16[1,4096,14336]{2,1,0} multiply(%select.2681, %select.2681)
  %multiply.7303 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7302, %broadcast.10115)
  %param.516 = bf16[1,4096,14336]{2,1,0} parameter(740), sharding={devices=[8,1,1]<=[8]}
  %multiply.7304 = bf16[1,4096,14336]{2,1,0} multiply(%param.516, %broadcast.10116)
  %add.5955 = bf16[1,4096,14336]{2,1,0} add(%multiply.7303, %multiply.7304)
  %divide.1343 = bf16[1,4096,14336]{2,1,0} divide(%add.5955, %broadcast.10117)
  %sqrt.93 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1343)
  %add.5956 = bf16[1,4096,14336]{2,1,0} add(%sqrt.93, %broadcast.10119)
  %multiply.7305 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5956)
  %divide.1344 = bf16[1,4096,14336]{2,1,0} divide(%add.5954, %multiply.7305)
  %multiply.7306 = bf16[1,4096,14336]{2,1,0} multiply(%param.184, %broadcast.10112)
  %add.5957 = bf16[1,4096,14336]{2,1,0} add(%divide.1344, %multiply.7306)
  %multiply.7307 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5957)
  %add.5958 = bf16[1,4096,14336]{2,1,0} add(%param.184, %multiply.7307)
  %divide.1345 = bf16[1,4096,14336]{2,1,0} divide(%copy.4229, %broadcast.10111)
  %select.2682 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4229, %divide.1345)
  %multiply.7309 = bf16[1,4096,14336]{2,1,0} multiply(%select.2682, %broadcast.10112)
  %param.517 = bf16[1,4096,14336]{2,1,0} parameter(418), sharding={devices=[8,1,1]<=[8]}
  %multiply.7310 = bf16[1,4096,14336]{2,1,0} multiply(%param.517, %broadcast.10113)
  %add.5959 = bf16[1,4096,14336]{2,1,0} add(%multiply.7309, %multiply.7310)
  %multiply.7311 = bf16[1,4096,14336]{2,1,0} multiply(%select.2682, %select.2682)
  %multiply.7312 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7311, %broadcast.10115)
  %param.518 = bf16[1,4096,14336]{2,1,0} parameter(741), sharding={devices=[8,1,1]<=[8]}
  %multiply.7313 = bf16[1,4096,14336]{2,1,0} multiply(%param.518, %broadcast.10116)
  %add.5960 = bf16[1,4096,14336]{2,1,0} add(%multiply.7312, %multiply.7313)
  %divide.1346 = bf16[1,4096,14336]{2,1,0} divide(%add.5960, %broadcast.10117)
  %sqrt.94 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1346)
  %add.5961 = bf16[1,4096,14336]{2,1,0} add(%sqrt.94, %broadcast.10119)
  %multiply.7315 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.5961)
  %divide.1347 = bf16[1,4096,14336]{2,1,0} divide(%add.5959, %multiply.7315)
  %multiply.7316 = bf16[1,4096,14336]{2,1,0} multiply(%param.185, %broadcast.10112)
  %add.5962 = bf16[1,4096,14336]{2,1,0} add(%divide.1347, %multiply.7316)
  %multiply.7317 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.5962)
  %add.5963 = bf16[1,4096,14336]{2,1,0} add(%param.185, %multiply.7317)
  %divide.1348 = bf16[1,14336,4096]{2,1,0} divide(%copy.4230, %broadcast.10134)
  %select.2683 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4230, %divide.1348)
  %multiply.7318 = bf16[1,14336,4096]{2,1,0} multiply(%select.2683, %broadcast.10135)
  %param.519 = bf16[1,14336,4096]{2,1,0} parameter(419), sharding={devices=[8,1,1]<=[8]}
  %multiply.7319 = bf16[1,14336,4096]{2,1,0} multiply(%param.519, %broadcast.10136)
  %add.5964 = bf16[1,14336,4096]{2,1,0} add(%multiply.7318, %multiply.7319)
  %multiply.7320 = bf16[1,14336,4096]{2,1,0} multiply(%select.2683, %select.2683)
  %multiply.7321 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.7320, %broadcast.10138)
  %param.520 = bf16[1,14336,4096]{2,1,0} parameter(742), sharding={devices=[8,1,1]<=[8]}
  %multiply.7322 = bf16[1,14336,4096]{2,1,0} multiply(%param.520, %broadcast.10139)
  %add.5965 = bf16[1,14336,4096]{2,1,0} add(%multiply.7321, %multiply.7322)
  %divide.1349 = bf16[1,14336,4096]{2,1,0} divide(%add.5965, %broadcast.10140)
  %sqrt.95 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1349)
  %add.5966 = bf16[1,14336,4096]{2,1,0} add(%sqrt.95, %broadcast.10141)
  %multiply.7324 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.5966)
  %divide.1350 = bf16[1,14336,4096]{2,1,0} divide(%add.5964, %multiply.7324)
  %multiply.7325 = bf16[1,14336,4096]{2,1,0} multiply(%param.186, %broadcast.10135)
  %add.5967 = bf16[1,14336,4096]{2,1,0} add(%divide.1350, %multiply.7325)
  %multiply.7326 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.5967)
  %add.5968 = bf16[1,14336,4096]{2,1,0} add(%param.186, %multiply.7326)
  %divide.1351 = bf16[4096]{0} divide(%all-reduce.142, %broadcast.10081)
  %select.2684 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.142, %divide.1351)
  %multiply.7327 = bf16[4096]{0} multiply(%select.2684, %broadcast.10083)
  %param.521 = bf16[4096]{0} parameter(420), sharding={replicated}
  %multiply.7328 = bf16[4096]{0} multiply(%param.521, %broadcast.10085)
  %add.5969 = bf16[4096]{0} add(%multiply.7327, %multiply.7328)
  %multiply.7329 = bf16[4096]{0} multiply(%select.2684, %select.2684)
  %multiply.7330 = bf16[4096]{0} multiply(%multiply.7329, %broadcast.10088)
  %param.522 = bf16[4096]{0} parameter(743), sharding={replicated}
  %multiply.7331 = bf16[4096]{0} multiply(%param.522, %broadcast.10090)
  %add.5970 = bf16[4096]{0} add(%multiply.7330, %multiply.7331)
  %divide.1352 = bf16[4096]{0} divide(%add.5970, %broadcast.10092)
  %sqrt.96 = bf16[4096]{0} sqrt(%divide.1352)
  %add.5971 = bf16[4096]{0} add(%sqrt.96, %broadcast.10094)
  %multiply.7332 = bf16[4096]{0} multiply(%broadcast.10086, %add.5971)
  %divide.1353 = bf16[4096]{0} divide(%add.5969, %multiply.7332)
  %multiply.7333 = bf16[4096]{0} multiply(%param.182, %broadcast.10083)
  %add.5972 = bf16[4096]{0} add(%divide.1353, %multiply.7333)
  %multiply.7334 = bf16[4096]{0} multiply(%broadcast.5338, %add.5972)
  %add.5973 = bf16[4096]{0} add(%param.182, %multiply.7334)
  %divide.1354 = bf16[4096]{0} divide(%all-reduce.143, %broadcast.10081)
  %select.2685 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.143, %divide.1354)
  %multiply.7335 = bf16[4096]{0} multiply(%select.2685, %broadcast.10083)
  %param.523 = bf16[4096]{0} parameter(421), sharding={replicated}
  %multiply.7336 = bf16[4096]{0} multiply(%param.523, %broadcast.10085)
  %add.5974 = bf16[4096]{0} add(%multiply.7335, %multiply.7336)
  %multiply.7337 = bf16[4096]{0} multiply(%select.2685, %select.2685)
  %multiply.7338 = bf16[4096]{0} multiply(%multiply.7337, %broadcast.10088)
  %param.524 = bf16[4096]{0} parameter(744), sharding={replicated}
  %multiply.7339 = bf16[4096]{0} multiply(%param.524, %broadcast.10090)
  %add.5975 = bf16[4096]{0} add(%multiply.7338, %multiply.7339)
  %divide.1355 = bf16[4096]{0} divide(%add.5975, %broadcast.10092)
  %sqrt.97 = bf16[4096]{0} sqrt(%divide.1355)
  %add.5977 = bf16[4096]{0} add(%sqrt.97, %broadcast.10094)
  %multiply.7340 = bf16[4096]{0} multiply(%broadcast.10086, %add.5977)
  %divide.1356 = bf16[4096]{0} divide(%add.5974, %multiply.7340)
  %multiply.7341 = bf16[4096]{0} multiply(%param.177, %broadcast.10083)
  %add.5978 = bf16[4096]{0} add(%divide.1356, %multiply.7341)
  %multiply.7342 = bf16[4096]{0} multiply(%broadcast.5338, %add.5978)
  %add.5979 = bf16[4096]{0} add(%param.177, %multiply.7342)
  %divide.1357 = bf16[512,8,128]{0,2,1} divide(%transpose.356, %broadcast.10162)
  %select.2686 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.356, %divide.1357)
  %multiply.7343 = bf16[512,8,128]{0,2,1} multiply(%select.2686, %broadcast.10163)
  %param.525 = bf16[512,8,128]{2,1,0} parameter(422), sharding={devices=[8,1,1]<=[8]}
  %multiply.7344 = bf16[512,8,128]{2,1,0} multiply(%param.525, %broadcast.10164)
  %add.5980 = bf16[512,8,128]{0,2,1} add(%multiply.7343, %multiply.7344)
  %multiply.7346 = bf16[512,8,128]{0,2,1} multiply(%select.2686, %select.2686)
  %multiply.7347 = bf16[512,8,128]{0,2,1} multiply(%multiply.7346, %broadcast.10166)
  %param.526 = bf16[512,8,128]{2,1,0} parameter(745), sharding={devices=[8,1,1]<=[8]}
  %multiply.7348 = bf16[512,8,128]{2,1,0} multiply(%param.526, %broadcast.10167)
  %add.5981 = bf16[512,8,128]{0,2,1} add(%multiply.7347, %multiply.7348)
  %divide.1358 = bf16[512,8,128]{0,2,1} divide(%add.5981, %broadcast.10168)
  %sqrt.98 = bf16[512,8,128]{0,2,1} sqrt(%divide.1358)
  %add.5982 = bf16[512,8,128]{0,2,1} add(%sqrt.98, %broadcast.10169)
  %multiply.7350 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.5982)
  %divide.1359 = bf16[512,8,128]{0,2,1} divide(%add.5980, %multiply.7350)
  %multiply.7351 = bf16[512,8,128]{2,1,0} multiply(%param.179, %broadcast.10163)
  %add.5983 = bf16[512,8,128]{0,2,1} add(%divide.1359, %multiply.7351)
  %multiply.7352 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.5983)
  %add.5984 = bf16[512,8,128]{2,1,0} add(%param.179, %multiply.7352)
  %divide.1360 = bf16[32,128,512]{1,0,2} divide(%transpose.357, %broadcast.10172)
  %select.2687 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.357, %divide.1360)
  %multiply.7353 = bf16[32,128,512]{1,0,2} multiply(%select.2687, %broadcast.10173)
  %param.527 = bf16[32,128,512]{2,1,0} parameter(423), sharding={devices=[1,1,8]<=[8]}
  %multiply.7355 = bf16[32,128,512]{2,1,0} multiply(%param.527, %broadcast.10174)
  %add.5985 = bf16[32,128,512]{1,0,2} add(%multiply.7353, %multiply.7355)
  %multiply.7356 = bf16[32,128,512]{1,0,2} multiply(%select.2687, %select.2687)
  %multiply.7357 = bf16[32,128,512]{1,0,2} multiply(%multiply.7356, %broadcast.10176)
  %param.528 = bf16[32,128,512]{2,1,0} parameter(746), sharding={devices=[1,1,8]<=[8]}
  %multiply.7359 = bf16[32,128,512]{2,1,0} multiply(%param.528, %broadcast.10177)
  %add.5986 = bf16[32,128,512]{1,0,2} add(%multiply.7357, %multiply.7359)
  %divide.1361 = bf16[32,128,512]{1,0,2} divide(%add.5986, %broadcast.10178)
  %sqrt.99 = bf16[32,128,512]{1,0,2} sqrt(%divide.1361)
  %add.5987 = bf16[32,128,512]{1,0,2} add(%sqrt.99, %broadcast.10179)
  %multiply.7360 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.5987)
  %divide.1362 = bf16[32,128,512]{1,0,2} divide(%add.5985, %multiply.7360)
  %multiply.7361 = bf16[32,128,512]{2,1,0} multiply(%param.181, %broadcast.10173)
  %add.5988 = bf16[32,128,512]{1,0,2} add(%divide.1362, %multiply.7361)
  %multiply.7362 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.5988)
  %add.5989 = bf16[32,128,512]{2,1,0} add(%param.181, %multiply.7362)
  %divide.1363 = bf16[512,32,128]{0,2,1} divide(%transpose.358, %broadcast.10182)
  %select.2688 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.358, %divide.1363)
  %multiply.7364 = bf16[512,32,128]{0,2,1} multiply(%select.2688, %broadcast.10183)
  %param.529 = bf16[512,32,128]{2,1,0} parameter(424), sharding={devices=[8,1,1]<=[8]}
  %multiply.7365 = bf16[512,32,128]{2,1,0} multiply(%param.529, %broadcast.10184)
  %add.5991 = bf16[512,32,128]{0,2,1} add(%multiply.7364, %multiply.7365)
  %multiply.7366 = bf16[512,32,128]{0,2,1} multiply(%select.2688, %select.2688)
  %multiply.7367 = bf16[512,32,128]{0,2,1} multiply(%multiply.7366, %broadcast.10186)
  %param.530 = bf16[512,32,128]{2,1,0} parameter(747), sharding={devices=[8,1,1]<=[8]}
  %multiply.7368 = bf16[512,32,128]{2,1,0} multiply(%param.530, %broadcast.10187)
  %add.5992 = bf16[512,32,128]{0,2,1} add(%multiply.7367, %multiply.7368)
  %divide.1364 = bf16[512,32,128]{0,2,1} divide(%add.5992, %broadcast.10188)
  %sqrt.100 = bf16[512,32,128]{0,2,1} sqrt(%divide.1364)
  %add.5994 = bf16[512,32,128]{0,2,1} add(%sqrt.100, %broadcast.10189)
  %multiply.7369 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.5994)
  %divide.1365 = bf16[512,32,128]{0,2,1} divide(%add.5991, %multiply.7369)
  %multiply.7370 = bf16[512,32,128]{2,1,0} multiply(%param.178, %broadcast.10183)
  %add.5995 = bf16[512,32,128]{0,2,1} add(%divide.1365, %multiply.7370)
  %multiply.7371 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.5995)
  %add.5997 = bf16[512,32,128]{2,1,0} add(%param.178, %multiply.7371)
  %divide.1366 = bf16[512,8,128]{0,2,1} divide(%transpose.359, %broadcast.10162)
  %select.2689 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.359, %divide.1366)
  %multiply.7372 = bf16[512,8,128]{0,2,1} multiply(%select.2689, %broadcast.10163)
  %param.531 = bf16[512,8,128]{2,1,0} parameter(425), sharding={devices=[8,1,1]<=[8]}
  %multiply.7373 = bf16[512,8,128]{2,1,0} multiply(%param.531, %broadcast.10164)
  %add.5998 = bf16[512,8,128]{0,2,1} add(%multiply.7372, %multiply.7373)
  %multiply.7374 = bf16[512,8,128]{0,2,1} multiply(%select.2689, %select.2689)
  %multiply.7375 = bf16[512,8,128]{0,2,1} multiply(%multiply.7374, %broadcast.10166)
  %param.532 = bf16[512,8,128]{2,1,0} parameter(748), sharding={devices=[8,1,1]<=[8]}
  %multiply.7376 = bf16[512,8,128]{2,1,0} multiply(%param.532, %broadcast.10167)
  %add.5999 = bf16[512,8,128]{0,2,1} add(%multiply.7375, %multiply.7376)
  %divide.1367 = bf16[512,8,128]{0,2,1} divide(%add.5999, %broadcast.10168)
  %sqrt.101 = bf16[512,8,128]{0,2,1} sqrt(%divide.1367)
  %add.6000 = bf16[512,8,128]{0,2,1} add(%sqrt.101, %broadcast.10169)
  %multiply.7377 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6000)
  %divide.1368 = bf16[512,8,128]{0,2,1} divide(%add.5998, %multiply.7377)
  %multiply.7378 = bf16[512,8,128]{2,1,0} multiply(%param.180, %broadcast.10163)
  %add.6001 = bf16[512,8,128]{0,2,1} add(%divide.1368, %multiply.7378)
  %multiply.7379 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6001)
  %add.6002 = bf16[512,8,128]{2,1,0} add(%param.180, %multiply.7379)
  %divide.1369 = bf16[512,8]{0,1} divide(%dynamic-slice.2439, %broadcast.10097)
  %select.2690 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2439, %divide.1369)
  %multiply.7380 = bf16[512,8]{0,1} multiply(%select.2690, %broadcast.10098)
  %param.533 = bf16[512,8]{1,0} parameter(426), sharding={devices=[8,1]<=[8]}
  %multiply.7381 = bf16[512,8]{1,0} multiply(%param.533, %broadcast.10099)
  %add.6003 = bf16[512,8]{0,1} add(%multiply.7380, %multiply.7381)
  %multiply.7382 = bf16[512,8]{0,1} multiply(%select.2690, %select.2690)
  %multiply.7383 = bf16[512,8]{0,1} multiply(%multiply.7382, %broadcast.10101)
  %param.534 = bf16[512,8]{1,0} parameter(749), sharding={devices=[8,1]<=[8]}
  %multiply.7384 = bf16[512,8]{1,0} multiply(%param.534, %broadcast.10102)
  %add.6004 = bf16[512,8]{0,1} add(%multiply.7383, %multiply.7384)
  %divide.1370 = bf16[512,8]{0,1} divide(%add.6004, %broadcast.10103)
  %sqrt.102 = bf16[512,8]{0,1} sqrt(%divide.1370)
  %add.6005 = bf16[512,8]{0,1} add(%sqrt.102, %broadcast.10104)
  %multiply.7386 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6005)
  %divide.1371 = bf16[512,8]{0,1} divide(%add.6003, %multiply.7386)
  %multiply.7387 = bf16[512,8]{1,0} multiply(%param.193, %broadcast.10098)
  %add.6006 = bf16[512,8]{0,1} add(%divide.1371, %multiply.7387)
  %multiply.7388 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6006)
  %add.6007 = bf16[512,8]{1,0} add(%param.193, %multiply.7388)
  %divide.1372 = bf16[1,4096,14336]{2,1,0} divide(%copy.4231, %broadcast.10111)
  %select.2691 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4231, %divide.1372)
  %multiply.7390 = bf16[1,4096,14336]{2,1,0} multiply(%select.2691, %broadcast.10112)
  %param.535 = bf16[1,4096,14336]{2,1,0} parameter(427), sharding={devices=[8,1,1]<=[8]}
  %multiply.7391 = bf16[1,4096,14336]{2,1,0} multiply(%param.535, %broadcast.10113)
  %add.6008 = bf16[1,4096,14336]{2,1,0} add(%multiply.7390, %multiply.7391)
  %multiply.7392 = bf16[1,4096,14336]{2,1,0} multiply(%select.2691, %select.2691)
  %multiply.7393 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7392, %broadcast.10115)
  %param.536 = bf16[1,4096,14336]{2,1,0} parameter(750), sharding={devices=[8,1,1]<=[8]}
  %multiply.7395 = bf16[1,4096,14336]{2,1,0} multiply(%param.536, %broadcast.10116)
  %add.6009 = bf16[1,4096,14336]{2,1,0} add(%multiply.7393, %multiply.7395)
  %divide.1373 = bf16[1,4096,14336]{2,1,0} divide(%add.6009, %broadcast.10117)
  %sqrt.103 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1373)
  %add.6011 = bf16[1,4096,14336]{2,1,0} add(%sqrt.103, %broadcast.10119)
  %multiply.7396 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6011)
  %divide.1374 = bf16[1,4096,14336]{2,1,0} divide(%add.6008, %multiply.7396)
  %multiply.7397 = bf16[1,4096,14336]{2,1,0} multiply(%param.194, %broadcast.10112)
  %add.6012 = bf16[1,4096,14336]{2,1,0} add(%divide.1374, %multiply.7397)
  %multiply.7399 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6012)
  %add.6013 = bf16[1,4096,14336]{2,1,0} add(%param.194, %multiply.7399)
  %divide.1375 = bf16[1,4096,14336]{2,1,0} divide(%copy.4232, %broadcast.10111)
  %select.2692 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4232, %divide.1375)
  %multiply.7400 = bf16[1,4096,14336]{2,1,0} multiply(%select.2692, %broadcast.10112)
  %param.537 = bf16[1,4096,14336]{2,1,0} parameter(428), sharding={devices=[8,1,1]<=[8]}
  %multiply.7401 = bf16[1,4096,14336]{2,1,0} multiply(%param.537, %broadcast.10113)
  %add.6014 = bf16[1,4096,14336]{2,1,0} add(%multiply.7400, %multiply.7401)
  %multiply.7402 = bf16[1,4096,14336]{2,1,0} multiply(%select.2692, %select.2692)
  %multiply.7403 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7402, %broadcast.10115)
  %param.538 = bf16[1,4096,14336]{2,1,0} parameter(751), sharding={devices=[8,1,1]<=[8]}
  %multiply.7404 = bf16[1,4096,14336]{2,1,0} multiply(%param.538, %broadcast.10116)
  %add.6015 = bf16[1,4096,14336]{2,1,0} add(%multiply.7403, %multiply.7404)
  %divide.1376 = bf16[1,4096,14336]{2,1,0} divide(%add.6015, %broadcast.10117)
  %sqrt.104 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1376)
  %add.6016 = bf16[1,4096,14336]{2,1,0} add(%sqrt.104, %broadcast.10119)
  %multiply.7405 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6016)
  %divide.1378 = bf16[1,4096,14336]{2,1,0} divide(%add.6014, %multiply.7405)
  %multiply.7406 = bf16[1,4096,14336]{2,1,0} multiply(%param.195, %broadcast.10112)
  %add.6017 = bf16[1,4096,14336]{2,1,0} add(%divide.1378, %multiply.7406)
  %multiply.7407 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6017)
  %add.6018 = bf16[1,4096,14336]{2,1,0} add(%param.195, %multiply.7407)
  %divide.1379 = bf16[1,14336,4096]{2,1,0} divide(%copy.4233, %broadcast.10134)
  %select.2693 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4233, %divide.1379)
  %multiply.7408 = bf16[1,14336,4096]{2,1,0} multiply(%select.2693, %broadcast.10135)
  %param.539 = bf16[1,14336,4096]{2,1,0} parameter(429), sharding={devices=[8,1,1]<=[8]}
  %multiply.7409 = bf16[1,14336,4096]{2,1,0} multiply(%param.539, %broadcast.10136)
  %add.6019 = bf16[1,14336,4096]{2,1,0} add(%multiply.7408, %multiply.7409)
  %multiply.7410 = bf16[1,14336,4096]{2,1,0} multiply(%select.2693, %select.2693)
  %multiply.7411 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.7410, %broadcast.10138)
  %param.540 = bf16[1,14336,4096]{2,1,0} parameter(752), sharding={devices=[8,1,1]<=[8]}
  %multiply.7412 = bf16[1,14336,4096]{2,1,0} multiply(%param.540, %broadcast.10139)
  %add.6021 = bf16[1,14336,4096]{2,1,0} add(%multiply.7411, %multiply.7412)
  %divide.1380 = bf16[1,14336,4096]{2,1,0} divide(%add.6021, %broadcast.10140)
  %sqrt.105 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1380)
  %add.6022 = bf16[1,14336,4096]{2,1,0} add(%sqrt.105, %broadcast.10141)
  %multiply.7413 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6022)
  %divide.1381 = bf16[1,14336,4096]{2,1,0} divide(%add.6019, %multiply.7413)
  %multiply.7414 = bf16[1,14336,4096]{2,1,0} multiply(%param.196, %broadcast.10135)
  %add.6023 = bf16[1,14336,4096]{2,1,0} add(%divide.1381, %multiply.7414)
  %multiply.7415 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6023)
  %add.6024 = bf16[1,14336,4096]{2,1,0} add(%param.196, %multiply.7415)
  %divide.1382 = bf16[4096]{0} divide(%all-reduce.157, %broadcast.10081)
  %select.2694 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.157, %divide.1382)
  %multiply.7416 = bf16[4096]{0} multiply(%select.2694, %broadcast.10083)
  %param.541 = bf16[4096]{0} parameter(430), sharding={replicated}
  %multiply.7417 = bf16[4096]{0} multiply(%param.541, %broadcast.10085)
  %add.6025 = bf16[4096]{0} add(%multiply.7416, %multiply.7417)
  %multiply.7418 = bf16[4096]{0} multiply(%select.2694, %select.2694)
  %multiply.7419 = bf16[4096]{0} multiply(%multiply.7418, %broadcast.10088)
  %param.542 = bf16[4096]{0} parameter(753), sharding={replicated}
  %multiply.7420 = bf16[4096]{0} multiply(%param.542, %broadcast.10090)
  %add.6026 = bf16[4096]{0} add(%multiply.7419, %multiply.7420)
  %divide.1383 = bf16[4096]{0} divide(%add.6026, %broadcast.10092)
  %sqrt.106 = bf16[4096]{0} sqrt(%divide.1383)
  %add.6027 = bf16[4096]{0} add(%sqrt.106, %broadcast.10094)
  %multiply.7421 = bf16[4096]{0} multiply(%broadcast.10086, %add.6027)
  %divide.1384 = bf16[4096]{0} divide(%add.6025, %multiply.7421)
  %multiply.7422 = bf16[4096]{0} multiply(%param.192, %broadcast.10083)
  %add.6028 = bf16[4096]{0} add(%divide.1384, %multiply.7422)
  %multiply.7423 = bf16[4096]{0} multiply(%broadcast.5338, %add.6028)
  %add.6029 = bf16[4096]{0} add(%param.192, %multiply.7423)
  %divide.1385 = bf16[4096]{0} divide(%all-reduce.158, %broadcast.10081)
  %select.2695 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.158, %divide.1385)
  %multiply.7424 = bf16[4096]{0} multiply(%select.2695, %broadcast.10083)
  %param.543 = bf16[4096]{0} parameter(431), sharding={replicated}
  %multiply.7425 = bf16[4096]{0} multiply(%param.543, %broadcast.10085)
  %add.6030 = bf16[4096]{0} add(%multiply.7424, %multiply.7425)
  %multiply.7426 = bf16[4096]{0} multiply(%select.2695, %select.2695)
  %multiply.7427 = bf16[4096]{0} multiply(%multiply.7426, %broadcast.10088)
  %param.544 = bf16[4096]{0} parameter(754), sharding={replicated}
  %multiply.7428 = bf16[4096]{0} multiply(%param.544, %broadcast.10090)
  %add.6031 = bf16[4096]{0} add(%multiply.7427, %multiply.7428)
  %divide.1386 = bf16[4096]{0} divide(%add.6031, %broadcast.10092)
  %sqrt.107 = bf16[4096]{0} sqrt(%divide.1386)
  %add.6032 = bf16[4096]{0} add(%sqrt.107, %broadcast.10094)
  %multiply.7429 = bf16[4096]{0} multiply(%broadcast.10086, %add.6032)
  %divide.1387 = bf16[4096]{0} divide(%add.6030, %multiply.7429)
  %multiply.7430 = bf16[4096]{0} multiply(%param.187, %broadcast.10083)
  %add.6033 = bf16[4096]{0} add(%divide.1387, %multiply.7430)
  %multiply.7431 = bf16[4096]{0} multiply(%broadcast.5338, %add.6033)
  %add.6035 = bf16[4096]{0} add(%param.187, %multiply.7431)
  %divide.1388 = bf16[512,8,128]{0,2,1} divide(%transpose.360, %broadcast.10162)
  %select.2696 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.360, %divide.1388)
  %multiply.7432 = bf16[512,8,128]{0,2,1} multiply(%select.2696, %broadcast.10163)
  %param.545 = bf16[512,8,128]{2,1,0} parameter(432), sharding={devices=[8,1,1]<=[8]}
  %multiply.7433 = bf16[512,8,128]{2,1,0} multiply(%param.545, %broadcast.10164)
  %add.6036 = bf16[512,8,128]{0,2,1} add(%multiply.7432, %multiply.7433)
  %multiply.7434 = bf16[512,8,128]{0,2,1} multiply(%select.2696, %select.2696)
  %multiply.7435 = bf16[512,8,128]{0,2,1} multiply(%multiply.7434, %broadcast.10166)
  %param.546 = bf16[512,8,128]{2,1,0} parameter(755), sharding={devices=[8,1,1]<=[8]}
  %multiply.7436 = bf16[512,8,128]{2,1,0} multiply(%param.546, %broadcast.10167)
  %add.6037 = bf16[512,8,128]{0,2,1} add(%multiply.7435, %multiply.7436)
  %divide.1389 = bf16[512,8,128]{0,2,1} divide(%add.6037, %broadcast.10168)
  %sqrt.108 = bf16[512,8,128]{0,2,1} sqrt(%divide.1389)
  %add.6038 = bf16[512,8,128]{0,2,1} add(%sqrt.108, %broadcast.10169)
  %multiply.7437 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6038)
  %divide.1390 = bf16[512,8,128]{0,2,1} divide(%add.6036, %multiply.7437)
  %multiply.7438 = bf16[512,8,128]{2,1,0} multiply(%param.189, %broadcast.10163)
  %add.6039 = bf16[512,8,128]{0,2,1} add(%divide.1390, %multiply.7438)
  %multiply.7439 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6039)
  %add.6040 = bf16[512,8,128]{2,1,0} add(%param.189, %multiply.7439)
  %divide.1391 = bf16[32,128,512]{1,0,2} divide(%transpose.361, %broadcast.10172)
  %select.2697 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.361, %divide.1391)
  %multiply.7440 = bf16[32,128,512]{1,0,2} multiply(%select.2697, %broadcast.10173)
  %param.547 = bf16[32,128,512]{2,1,0} parameter(433), sharding={devices=[1,1,8]<=[8]}
  %multiply.7441 = bf16[32,128,512]{2,1,0} multiply(%param.547, %broadcast.10174)
  %add.6041 = bf16[32,128,512]{1,0,2} add(%multiply.7440, %multiply.7441)
  %multiply.7442 = bf16[32,128,512]{1,0,2} multiply(%select.2697, %select.2697)
  %multiply.7443 = bf16[32,128,512]{1,0,2} multiply(%multiply.7442, %broadcast.10176)
  %param.548 = bf16[32,128,512]{2,1,0} parameter(756), sharding={devices=[1,1,8]<=[8]}
  %multiply.7444 = bf16[32,128,512]{2,1,0} multiply(%param.548, %broadcast.10177)
  %add.6042 = bf16[32,128,512]{1,0,2} add(%multiply.7443, %multiply.7444)
  %divide.1392 = bf16[32,128,512]{1,0,2} divide(%add.6042, %broadcast.10178)
  %sqrt.109 = bf16[32,128,512]{1,0,2} sqrt(%divide.1392)
  %add.6044 = bf16[32,128,512]{1,0,2} add(%sqrt.109, %broadcast.10179)
  %multiply.7445 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6044)
  %divide.1393 = bf16[32,128,512]{1,0,2} divide(%add.6041, %multiply.7445)
  %multiply.7446 = bf16[32,128,512]{2,1,0} multiply(%param.191, %broadcast.10173)
  %add.6045 = bf16[32,128,512]{1,0,2} add(%divide.1393, %multiply.7446)
  %multiply.7447 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6045)
  %add.6046 = bf16[32,128,512]{2,1,0} add(%param.191, %multiply.7447)
  %divide.1394 = bf16[512,32,128]{0,2,1} divide(%transpose.362, %broadcast.10182)
  %select.2698 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.362, %divide.1394)
  %multiply.7448 = bf16[512,32,128]{0,2,1} multiply(%select.2698, %broadcast.10183)
  %param.549 = bf16[512,32,128]{2,1,0} parameter(434), sharding={devices=[8,1,1]<=[8]}
  %multiply.7449 = bf16[512,32,128]{2,1,0} multiply(%param.549, %broadcast.10184)
  %add.6047 = bf16[512,32,128]{0,2,1} add(%multiply.7448, %multiply.7449)
  %multiply.7450 = bf16[512,32,128]{0,2,1} multiply(%select.2698, %select.2698)
  %multiply.7451 = bf16[512,32,128]{0,2,1} multiply(%multiply.7450, %broadcast.10186)
  %param.550 = bf16[512,32,128]{2,1,0} parameter(757), sharding={devices=[8,1,1]<=[8]}
  %multiply.7452 = bf16[512,32,128]{2,1,0} multiply(%param.550, %broadcast.10187)
  %add.6048 = bf16[512,32,128]{0,2,1} add(%multiply.7451, %multiply.7452)
  %divide.1395 = bf16[512,32,128]{0,2,1} divide(%add.6048, %broadcast.10188)
  %sqrt.110 = bf16[512,32,128]{0,2,1} sqrt(%divide.1395)
  %add.6049 = bf16[512,32,128]{0,2,1} add(%sqrt.110, %broadcast.10189)
  %multiply.7453 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6049)
  %divide.1396 = bf16[512,32,128]{0,2,1} divide(%add.6047, %multiply.7453)
  %multiply.7454 = bf16[512,32,128]{2,1,0} multiply(%param.188, %broadcast.10183)
  %add.6050 = bf16[512,32,128]{0,2,1} add(%divide.1396, %multiply.7454)
  %multiply.7456 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6050)
  %add.6051 = bf16[512,32,128]{2,1,0} add(%param.188, %multiply.7456)
  %divide.1397 = bf16[512,8,128]{0,2,1} divide(%transpose.363, %broadcast.10162)
  %select.2699 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.363, %divide.1397)
  %multiply.7457 = bf16[512,8,128]{0,2,1} multiply(%select.2699, %broadcast.10163)
  %param.551 = bf16[512,8,128]{2,1,0} parameter(435), sharding={devices=[8,1,1]<=[8]}
  %multiply.7458 = bf16[512,8,128]{2,1,0} multiply(%param.551, %broadcast.10164)
  %add.6052 = bf16[512,8,128]{0,2,1} add(%multiply.7457, %multiply.7458)
  %multiply.7459 = bf16[512,8,128]{0,2,1} multiply(%select.2699, %select.2699)
  %multiply.7460 = bf16[512,8,128]{0,2,1} multiply(%multiply.7459, %broadcast.10166)
  %param.552 = bf16[512,8,128]{2,1,0} parameter(758), sharding={devices=[8,1,1]<=[8]}
  %multiply.7461 = bf16[512,8,128]{2,1,0} multiply(%param.552, %broadcast.10167)
  %add.6053 = bf16[512,8,128]{0,2,1} add(%multiply.7460, %multiply.7461)
  %divide.1398 = bf16[512,8,128]{0,2,1} divide(%add.6053, %broadcast.10168)
  %sqrt.111 = bf16[512,8,128]{0,2,1} sqrt(%divide.1398)
  %add.6054 = bf16[512,8,128]{0,2,1} add(%sqrt.111, %broadcast.10169)
  %multiply.7462 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6054)
  %divide.1399 = bf16[512,8,128]{0,2,1} divide(%add.6052, %multiply.7462)
  %multiply.7463 = bf16[512,8,128]{2,1,0} multiply(%param.190, %broadcast.10163)
  %add.6055 = bf16[512,8,128]{0,2,1} add(%divide.1399, %multiply.7463)
  %multiply.7464 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6055)
  %add.6056 = bf16[512,8,128]{2,1,0} add(%param.190, %multiply.7464)
  %divide.1400 = bf16[512,8]{0,1} divide(%dynamic-slice.2449, %broadcast.10097)
  %select.2700 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2449, %divide.1400)
  %multiply.7465 = bf16[512,8]{0,1} multiply(%select.2700, %broadcast.10098)
  %param.553 = bf16[512,8]{1,0} parameter(436), sharding={devices=[8,1]<=[8]}
  %multiply.7466 = bf16[512,8]{1,0} multiply(%param.553, %broadcast.10099)
  %add.6057 = bf16[512,8]{0,1} add(%multiply.7465, %multiply.7466)
  %multiply.7467 = bf16[512,8]{0,1} multiply(%select.2700, %select.2700)
  %multiply.7469 = bf16[512,8]{0,1} multiply(%multiply.7467, %broadcast.10101)
  %param.554 = bf16[512,8]{1,0} parameter(759), sharding={devices=[8,1]<=[8]}
  %multiply.7470 = bf16[512,8]{1,0} multiply(%param.554, %broadcast.10102)
  %add.6058 = bf16[512,8]{0,1} add(%multiply.7469, %multiply.7470)
  %divide.1401 = bf16[512,8]{0,1} divide(%add.6058, %broadcast.10103)
  %sqrt.112 = bf16[512,8]{0,1} sqrt(%divide.1401)
  %add.6059 = bf16[512,8]{0,1} add(%sqrt.112, %broadcast.10104)
  %multiply.7471 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6059)
  %divide.1402 = bf16[512,8]{0,1} divide(%add.6057, %multiply.7471)
  %multiply.7472 = bf16[512,8]{1,0} multiply(%param.203, %broadcast.10098)
  %add.6060 = bf16[512,8]{0,1} add(%divide.1402, %multiply.7472)
  %multiply.7473 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6060)
  %add.6061 = bf16[512,8]{1,0} add(%param.203, %multiply.7473)
  %divide.1403 = bf16[1,4096,14336]{2,1,0} divide(%copy.4234, %broadcast.10111)
  %select.2701 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4234, %divide.1403)
  %multiply.7475 = bf16[1,4096,14336]{2,1,0} multiply(%select.2701, %broadcast.10112)
  %param.555 = bf16[1,4096,14336]{2,1,0} parameter(437), sharding={devices=[8,1,1]<=[8]}
  %multiply.7476 = bf16[1,4096,14336]{2,1,0} multiply(%param.555, %broadcast.10113)
  %add.6062 = bf16[1,4096,14336]{2,1,0} add(%multiply.7475, %multiply.7476)
  %multiply.7477 = bf16[1,4096,14336]{2,1,0} multiply(%select.2701, %select.2701)
  %multiply.7478 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7477, %broadcast.10115)
  %param.556 = bf16[1,4096,14336]{2,1,0} parameter(760), sharding={devices=[8,1,1]<=[8]}
  %multiply.7479 = bf16[1,4096,14336]{2,1,0} multiply(%param.556, %broadcast.10116)
  %add.6063 = bf16[1,4096,14336]{2,1,0} add(%multiply.7478, %multiply.7479)
  %divide.1404 = bf16[1,4096,14336]{2,1,0} divide(%add.6063, %broadcast.10117)
  %sqrt.113 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1404)
  %add.6064 = bf16[1,4096,14336]{2,1,0} add(%sqrt.113, %broadcast.10119)
  %multiply.7480 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6064)
  %divide.1405 = bf16[1,4096,14336]{2,1,0} divide(%add.6062, %multiply.7480)
  %multiply.7481 = bf16[1,4096,14336]{2,1,0} multiply(%param.204, %broadcast.10112)
  %add.6065 = bf16[1,4096,14336]{2,1,0} add(%divide.1405, %multiply.7481)
  %multiply.7482 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6065)
  %add.6066 = bf16[1,4096,14336]{2,1,0} add(%param.204, %multiply.7482)
  %divide.1406 = bf16[1,4096,14336]{2,1,0} divide(%copy.4235, %broadcast.10111)
  %select.2702 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4235, %divide.1406)
  %multiply.7483 = bf16[1,4096,14336]{2,1,0} multiply(%select.2702, %broadcast.10112)
  %param.557 = bf16[1,4096,14336]{2,1,0} parameter(438), sharding={devices=[8,1,1]<=[8]}
  %multiply.7484 = bf16[1,4096,14336]{2,1,0} multiply(%param.557, %broadcast.10113)
  %add.6067 = bf16[1,4096,14336]{2,1,0} add(%multiply.7483, %multiply.7484)
  %multiply.7485 = bf16[1,4096,14336]{2,1,0} multiply(%select.2702, %select.2702)
  %multiply.7486 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7485, %broadcast.10115)
  %param.558 = bf16[1,4096,14336]{2,1,0} parameter(761), sharding={devices=[8,1,1]<=[8]}
  %multiply.7487 = bf16[1,4096,14336]{2,1,0} multiply(%param.558, %broadcast.10116)
  %add.6068 = bf16[1,4096,14336]{2,1,0} add(%multiply.7486, %multiply.7487)
  %divide.1407 = bf16[1,4096,14336]{2,1,0} divide(%add.6068, %broadcast.10117)
  %sqrt.114 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1407)
  %add.6069 = bf16[1,4096,14336]{2,1,0} add(%sqrt.114, %broadcast.10119)
  %multiply.7488 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6069)
  %divide.1408 = bf16[1,4096,14336]{2,1,0} divide(%add.6067, %multiply.7488)
  %multiply.7489 = bf16[1,4096,14336]{2,1,0} multiply(%param.205, %broadcast.10112)
  %add.6070 = bf16[1,4096,14336]{2,1,0} add(%divide.1408, %multiply.7489)
  %multiply.7490 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6070)
  %add.6071 = bf16[1,4096,14336]{2,1,0} add(%param.205, %multiply.7490)
  %divide.1409 = bf16[1,14336,4096]{2,1,0} divide(%copy.4236, %broadcast.10134)
  %select.2703 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4236, %divide.1409)
  %multiply.7491 = bf16[1,14336,4096]{2,1,0} multiply(%select.2703, %broadcast.10135)
  %param.559 = bf16[1,14336,4096]{2,1,0} parameter(439), sharding={devices=[8,1,1]<=[8]}
  %multiply.7492 = bf16[1,14336,4096]{2,1,0} multiply(%param.559, %broadcast.10136)
  %add.6072 = bf16[1,14336,4096]{2,1,0} add(%multiply.7491, %multiply.7492)
  %multiply.7493 = bf16[1,14336,4096]{2,1,0} multiply(%select.2703, %select.2703)
  %multiply.7494 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.7493, %broadcast.10138)
  %param.560 = bf16[1,14336,4096]{2,1,0} parameter(762), sharding={devices=[8,1,1]<=[8]}
  %multiply.7495 = bf16[1,14336,4096]{2,1,0} multiply(%param.560, %broadcast.10139)
  %add.6073 = bf16[1,14336,4096]{2,1,0} add(%multiply.7494, %multiply.7495)
  %divide.1410 = bf16[1,14336,4096]{2,1,0} divide(%add.6073, %broadcast.10140)
  %sqrt.115 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1410)
  %add.6074 = bf16[1,14336,4096]{2,1,0} add(%sqrt.115, %broadcast.10141)
  %multiply.7496 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6074)
  %divide.1411 = bf16[1,14336,4096]{2,1,0} divide(%add.6072, %multiply.7496)
  %multiply.7497 = bf16[1,14336,4096]{2,1,0} multiply(%param.206, %broadcast.10135)
  %add.6076 = bf16[1,14336,4096]{2,1,0} add(%divide.1411, %multiply.7497)
  %multiply.7498 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6076)
  %add.6077 = bf16[1,14336,4096]{2,1,0} add(%param.206, %multiply.7498)
  %divide.1412 = bf16[4096]{0} divide(%all-reduce.172, %broadcast.10081)
  %select.2704 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.172, %divide.1412)
  %multiply.7499 = bf16[4096]{0} multiply(%select.2704, %broadcast.10083)
  %param.561 = bf16[4096]{0} parameter(440), sharding={replicated}
  %multiply.7500 = bf16[4096]{0} multiply(%param.561, %broadcast.10085)
  %add.6078 = bf16[4096]{0} add(%multiply.7499, %multiply.7500)
  %multiply.7501 = bf16[4096]{0} multiply(%select.2704, %select.2704)
  %multiply.7502 = bf16[4096]{0} multiply(%multiply.7501, %broadcast.10088)
  %param.562 = bf16[4096]{0} parameter(763), sharding={replicated}
  %multiply.7503 = bf16[4096]{0} multiply(%param.562, %broadcast.10090)
  %add.6079 = bf16[4096]{0} add(%multiply.7502, %multiply.7503)
  %divide.1413 = bf16[4096]{0} divide(%add.6079, %broadcast.10092)
  %sqrt.116 = bf16[4096]{0} sqrt(%divide.1413)
  %add.6080 = bf16[4096]{0} add(%sqrt.116, %broadcast.10094)
  %multiply.7504 = bf16[4096]{0} multiply(%broadcast.10086, %add.6080)
  %divide.1414 = bf16[4096]{0} divide(%add.6078, %multiply.7504)
  %multiply.7505 = bf16[4096]{0} multiply(%param.202, %broadcast.10083)
  %add.6081 = bf16[4096]{0} add(%divide.1414, %multiply.7505)
  %multiply.7506 = bf16[4096]{0} multiply(%broadcast.5338, %add.6081)
  %add.6083 = bf16[4096]{0} add(%param.202, %multiply.7506)
  %divide.1415 = bf16[4096]{0} divide(%all-reduce.173, %broadcast.10081)
  %select.2705 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.173, %divide.1415)
  %multiply.7507 = bf16[4096]{0} multiply(%select.2705, %broadcast.10083)
  %param.563 = bf16[4096]{0} parameter(441), sharding={replicated}
  %multiply.7508 = bf16[4096]{0} multiply(%param.563, %broadcast.10085)
  %add.6084 = bf16[4096]{0} add(%multiply.7507, %multiply.7508)
  %multiply.7509 = bf16[4096]{0} multiply(%select.2705, %select.2705)
  %multiply.7510 = bf16[4096]{0} multiply(%multiply.7509, %broadcast.10088)
  %param.564 = bf16[4096]{0} parameter(764), sharding={replicated}
  %multiply.7511 = bf16[4096]{0} multiply(%param.564, %broadcast.10090)
  %add.6085 = bf16[4096]{0} add(%multiply.7510, %multiply.7511)
  %divide.1416 = bf16[4096]{0} divide(%add.6085, %broadcast.10092)
  %sqrt.117 = bf16[4096]{0} sqrt(%divide.1416)
  %add.6086 = bf16[4096]{0} add(%sqrt.117, %broadcast.10094)
  %multiply.7512 = bf16[4096]{0} multiply(%broadcast.10086, %add.6086)
  %divide.1417 = bf16[4096]{0} divide(%add.6084, %multiply.7512)
  %multiply.7513 = bf16[4096]{0} multiply(%param.197, %broadcast.10083)
  %add.6088 = bf16[4096]{0} add(%divide.1417, %multiply.7513)
  %multiply.7514 = bf16[4096]{0} multiply(%broadcast.5338, %add.6088)
  %add.6089 = bf16[4096]{0} add(%param.197, %multiply.7514)
  %divide.1418 = bf16[512,8,128]{0,2,1} divide(%transpose.364, %broadcast.10162)
  %select.2706 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.364, %divide.1418)
  %multiply.7515 = bf16[512,8,128]{0,2,1} multiply(%select.2706, %broadcast.10163)
  %param.565 = bf16[512,8,128]{2,1,0} parameter(442), sharding={devices=[8,1,1]<=[8]}
  %multiply.7516 = bf16[512,8,128]{2,1,0} multiply(%param.565, %broadcast.10164)
  %add.6090 = bf16[512,8,128]{0,2,1} add(%multiply.7515, %multiply.7516)
  %multiply.7517 = bf16[512,8,128]{0,2,1} multiply(%select.2706, %select.2706)
  %multiply.7518 = bf16[512,8,128]{0,2,1} multiply(%multiply.7517, %broadcast.10166)
  %param.566 = bf16[512,8,128]{2,1,0} parameter(765), sharding={devices=[8,1,1]<=[8]}
  %multiply.7519 = bf16[512,8,128]{2,1,0} multiply(%param.566, %broadcast.10167)
  %add.6091 = bf16[512,8,128]{0,2,1} add(%multiply.7518, %multiply.7519)
  %divide.1419 = bf16[512,8,128]{0,2,1} divide(%add.6091, %broadcast.10168)
  %sqrt.118 = bf16[512,8,128]{0,2,1} sqrt(%divide.1419)
  %add.6092 = bf16[512,8,128]{0,2,1} add(%sqrt.118, %broadcast.10169)
  %multiply.7520 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6092)
  %divide.1420 = bf16[512,8,128]{0,2,1} divide(%add.6090, %multiply.7520)
  %multiply.7521 = bf16[512,8,128]{2,1,0} multiply(%param.199, %broadcast.10163)
  %add.6093 = bf16[512,8,128]{0,2,1} add(%divide.1420, %multiply.7521)
  %multiply.7522 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6093)
  %add.6094 = bf16[512,8,128]{2,1,0} add(%param.199, %multiply.7522)
  %divide.1421 = bf16[32,128,512]{1,0,2} divide(%transpose.365, %broadcast.10172)
  %select.2707 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.365, %divide.1421)
  %multiply.7523 = bf16[32,128,512]{1,0,2} multiply(%select.2707, %broadcast.10173)
  %param.567 = bf16[32,128,512]{2,1,0} parameter(443), sharding={devices=[1,1,8]<=[8]}
  %multiply.7524 = bf16[32,128,512]{2,1,0} multiply(%param.567, %broadcast.10174)
  %add.6095 = bf16[32,128,512]{1,0,2} add(%multiply.7523, %multiply.7524)
  %multiply.7525 = bf16[32,128,512]{1,0,2} multiply(%select.2707, %select.2707)
  %multiply.7526 = bf16[32,128,512]{1,0,2} multiply(%multiply.7525, %broadcast.10176)
  %param.568 = bf16[32,128,512]{2,1,0} parameter(766), sharding={devices=[1,1,8]<=[8]}
  %multiply.7527 = bf16[32,128,512]{2,1,0} multiply(%param.568, %broadcast.10177)
  %add.6096 = bf16[32,128,512]{1,0,2} add(%multiply.7526, %multiply.7527)
  %divide.1422 = bf16[32,128,512]{1,0,2} divide(%add.6096, %broadcast.10178)
  %sqrt.119 = bf16[32,128,512]{1,0,2} sqrt(%divide.1422)
  %add.6097 = bf16[32,128,512]{1,0,2} add(%sqrt.119, %broadcast.10179)
  %multiply.7528 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6097)
  %divide.1423 = bf16[32,128,512]{1,0,2} divide(%add.6095, %multiply.7528)
  %multiply.7529 = bf16[32,128,512]{2,1,0} multiply(%param.201, %broadcast.10173)
  %add.6098 = bf16[32,128,512]{1,0,2} add(%divide.1423, %multiply.7529)
  %multiply.7530 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6098)
  %add.6099 = bf16[32,128,512]{2,1,0} add(%param.201, %multiply.7530)
  %divide.1424 = bf16[512,32,128]{0,2,1} divide(%transpose.366, %broadcast.10182)
  %select.2708 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.366, %divide.1424)
  %multiply.7531 = bf16[512,32,128]{0,2,1} multiply(%select.2708, %broadcast.10183)
  %param.569 = bf16[512,32,128]{2,1,0} parameter(444), sharding={devices=[8,1,1]<=[8]}
  %multiply.7532 = bf16[512,32,128]{2,1,0} multiply(%param.569, %broadcast.10184)
  %add.6100 = bf16[512,32,128]{0,2,1} add(%multiply.7531, %multiply.7532)
  %multiply.7533 = bf16[512,32,128]{0,2,1} multiply(%select.2708, %select.2708)
  %multiply.7534 = bf16[512,32,128]{0,2,1} multiply(%multiply.7533, %broadcast.10186)
  %param.570 = bf16[512,32,128]{2,1,0} parameter(767), sharding={devices=[8,1,1]<=[8]}
  %multiply.7535 = bf16[512,32,128]{2,1,0} multiply(%param.570, %broadcast.10187)
  %add.6101 = bf16[512,32,128]{0,2,1} add(%multiply.7534, %multiply.7535)
  %divide.1425 = bf16[512,32,128]{0,2,1} divide(%add.6101, %broadcast.10188)
  %sqrt.120 = bf16[512,32,128]{0,2,1} sqrt(%divide.1425)
  %add.6102 = bf16[512,32,128]{0,2,1} add(%sqrt.120, %broadcast.10189)
  %multiply.7536 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6102)
  %divide.1426 = bf16[512,32,128]{0,2,1} divide(%add.6100, %multiply.7536)
  %multiply.7537 = bf16[512,32,128]{2,1,0} multiply(%param.198, %broadcast.10183)
  %add.6103 = bf16[512,32,128]{0,2,1} add(%divide.1426, %multiply.7537)
  %multiply.7538 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6103)
  %add.6104 = bf16[512,32,128]{2,1,0} add(%param.198, %multiply.7538)
  %divide.1427 = bf16[512,8,128]{0,2,1} divide(%transpose.367, %broadcast.10162)
  %select.2709 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.367, %divide.1427)
  %multiply.7539 = bf16[512,8,128]{0,2,1} multiply(%select.2709, %broadcast.10163)
  %param.571 = bf16[512,8,128]{2,1,0} parameter(445), sharding={devices=[8,1,1]<=[8]}
  %multiply.7540 = bf16[512,8,128]{2,1,0} multiply(%param.571, %broadcast.10164)
  %add.6105 = bf16[512,8,128]{0,2,1} add(%multiply.7539, %multiply.7540)
  %multiply.7541 = bf16[512,8,128]{0,2,1} multiply(%select.2709, %select.2709)
  %multiply.7542 = bf16[512,8,128]{0,2,1} multiply(%multiply.7541, %broadcast.10166)
  %param.572 = bf16[512,8,128]{2,1,0} parameter(768), sharding={devices=[8,1,1]<=[8]}
  %multiply.7543 = bf16[512,8,128]{2,1,0} multiply(%param.572, %broadcast.10167)
  %add.6106 = bf16[512,8,128]{0,2,1} add(%multiply.7542, %multiply.7543)
  %divide.1428 = bf16[512,8,128]{0,2,1} divide(%add.6106, %broadcast.10168)
  %sqrt.121 = bf16[512,8,128]{0,2,1} sqrt(%divide.1428)
  %add.6107 = bf16[512,8,128]{0,2,1} add(%sqrt.121, %broadcast.10169)
  %multiply.7544 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6107)
  %divide.1429 = bf16[512,8,128]{0,2,1} divide(%add.6105, %multiply.7544)
  %multiply.7545 = bf16[512,8,128]{2,1,0} multiply(%param.200, %broadcast.10163)
  %add.6108 = bf16[512,8,128]{0,2,1} add(%divide.1429, %multiply.7545)
  %multiply.7546 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6108)
  %add.6109 = bf16[512,8,128]{2,1,0} add(%param.200, %multiply.7546)
  %divide.1430 = bf16[512,8]{0,1} divide(%dynamic-slice.2459, %broadcast.10097)
  %select.2710 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2459, %divide.1430)
  %multiply.7547 = bf16[512,8]{0,1} multiply(%select.2710, %broadcast.10098)
  %param.573 = bf16[512,8]{1,0} parameter(446), sharding={devices=[8,1]<=[8]}
  %multiply.7548 = bf16[512,8]{1,0} multiply(%param.573, %broadcast.10099)
  %add.6110 = bf16[512,8]{0,1} add(%multiply.7547, %multiply.7548)
  %multiply.7549 = bf16[512,8]{0,1} multiply(%select.2710, %select.2710)
  %multiply.7550 = bf16[512,8]{0,1} multiply(%multiply.7549, %broadcast.10101)
  %param.574 = bf16[512,8]{1,0} parameter(769), sharding={devices=[8,1]<=[8]}
  %multiply.7552 = bf16[512,8]{1,0} multiply(%param.574, %broadcast.10102)
  %add.6111 = bf16[512,8]{0,1} add(%multiply.7550, %multiply.7552)
  %divide.1431 = bf16[512,8]{0,1} divide(%add.6111, %broadcast.10103)
  %sqrt.122 = bf16[512,8]{0,1} sqrt(%divide.1431)
  %add.6112 = bf16[512,8]{0,1} add(%sqrt.122, %broadcast.10104)
  %multiply.7553 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6112)
  %divide.1432 = bf16[512,8]{0,1} divide(%add.6110, %multiply.7553)
  %multiply.7554 = bf16[512,8]{1,0} multiply(%param.33, %broadcast.10098)
  %add.6113 = bf16[512,8]{0,1} add(%divide.1432, %multiply.7554)
  %multiply.7555 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6113)
  %add.6114 = bf16[512,8]{1,0} add(%param.33, %multiply.7555)
  %divide.1433 = bf16[1,4096,14336]{2,1,0} divide(%copy.4237, %broadcast.10111)
  %select.2711 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4237, %divide.1433)
  %multiply.7556 = bf16[1,4096,14336]{2,1,0} multiply(%select.2711, %broadcast.10112)
  %param.575 = bf16[1,4096,14336]{2,1,0} parameter(447), sharding={devices=[8,1,1]<=[8]}
  %multiply.7557 = bf16[1,4096,14336]{2,1,0} multiply(%param.575, %broadcast.10113)
  %add.6115 = bf16[1,4096,14336]{2,1,0} add(%multiply.7556, %multiply.7557)
  %multiply.7560 = bf16[1,4096,14336]{2,1,0} multiply(%select.2711, %select.2711)
  %multiply.7561 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7560, %broadcast.10115)
  %param.576 = bf16[1,4096,14336]{2,1,0} parameter(770), sharding={devices=[8,1,1]<=[8]}
  %multiply.7562 = bf16[1,4096,14336]{2,1,0} multiply(%param.576, %broadcast.10116)
  %add.6116 = bf16[1,4096,14336]{2,1,0} add(%multiply.7561, %multiply.7562)
  %divide.1434 = bf16[1,4096,14336]{2,1,0} divide(%add.6116, %broadcast.10117)
  %sqrt.123 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1434)
  %add.6117 = bf16[1,4096,14336]{2,1,0} add(%sqrt.123, %broadcast.10119)
  %multiply.7563 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6117)
  %divide.1435 = bf16[1,4096,14336]{2,1,0} divide(%add.6115, %multiply.7563)
  %multiply.7564 = bf16[1,4096,14336]{2,1,0} multiply(%param.34, %broadcast.10112)
  %add.6118 = bf16[1,4096,14336]{2,1,0} add(%divide.1435, %multiply.7564)
  %multiply.7565 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6118)
  %add.6119 = bf16[1,4096,14336]{2,1,0} add(%param.34, %multiply.7565)
  %divide.1436 = bf16[1,4096,14336]{2,1,0} divide(%copy.4238, %broadcast.10111)
  %select.2712 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4238, %divide.1436)
  %multiply.7567 = bf16[1,4096,14336]{2,1,0} multiply(%select.2712, %broadcast.10112)
  %param.577 = bf16[1,4096,14336]{2,1,0} parameter(448), sharding={devices=[8,1,1]<=[8]}
  %multiply.7568 = bf16[1,4096,14336]{2,1,0} multiply(%param.577, %broadcast.10113)
  %add.6120 = bf16[1,4096,14336]{2,1,0} add(%multiply.7567, %multiply.7568)
  %multiply.7569 = bf16[1,4096,14336]{2,1,0} multiply(%select.2712, %select.2712)
  %multiply.7570 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7569, %broadcast.10115)
  %param.578 = bf16[1,4096,14336]{2,1,0} parameter(771), sharding={devices=[8,1,1]<=[8]}
  %multiply.7571 = bf16[1,4096,14336]{2,1,0} multiply(%param.578, %broadcast.10116)
  %add.6121 = bf16[1,4096,14336]{2,1,0} add(%multiply.7570, %multiply.7571)
  %divide.1437 = bf16[1,4096,14336]{2,1,0} divide(%add.6121, %broadcast.10117)
  %sqrt.124 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1437)
  %add.6122 = bf16[1,4096,14336]{2,1,0} add(%sqrt.124, %broadcast.10119)
  %multiply.7572 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6122)
  %divide.1438 = bf16[1,4096,14336]{2,1,0} divide(%add.6120, %multiply.7572)
  %multiply.7574 = bf16[1,4096,14336]{2,1,0} multiply(%param.35, %broadcast.10112)
  %add.6123 = bf16[1,4096,14336]{2,1,0} add(%divide.1438, %multiply.7574)
  %multiply.7575 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6123)
  %add.6124 = bf16[1,4096,14336]{2,1,0} add(%param.35, %multiply.7575)
  %divide.1439 = bf16[1,14336,4096]{2,1,0} divide(%copy.4239, %broadcast.10134)
  %select.2713 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4239, %divide.1439)
  %multiply.7576 = bf16[1,14336,4096]{2,1,0} multiply(%select.2713, %broadcast.10135)
  %param.579 = bf16[1,14336,4096]{2,1,0} parameter(449), sharding={devices=[8,1,1]<=[8]}
  %multiply.7577 = bf16[1,14336,4096]{2,1,0} multiply(%param.579, %broadcast.10136)
  %add.6125 = bf16[1,14336,4096]{2,1,0} add(%multiply.7576, %multiply.7577)
  %multiply.7578 = bf16[1,14336,4096]{2,1,0} multiply(%select.2713, %select.2713)
  %multiply.7579 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.7578, %broadcast.10138)
  %param.580 = bf16[1,14336,4096]{2,1,0} parameter(772), sharding={devices=[8,1,1]<=[8]}
  %multiply.7580 = bf16[1,14336,4096]{2,1,0} multiply(%param.580, %broadcast.10139)
  %add.6126 = bf16[1,14336,4096]{2,1,0} add(%multiply.7579, %multiply.7580)
  %divide.1440 = bf16[1,14336,4096]{2,1,0} divide(%add.6126, %broadcast.10140)
  %sqrt.125 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1440)
  %add.6127 = bf16[1,14336,4096]{2,1,0} add(%sqrt.125, %broadcast.10141)
  %multiply.7581 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6127)
  %divide.1441 = bf16[1,14336,4096]{2,1,0} divide(%add.6125, %multiply.7581)
  %multiply.7582 = bf16[1,14336,4096]{2,1,0} multiply(%param.36, %broadcast.10135)
  %add.6128 = bf16[1,14336,4096]{2,1,0} add(%divide.1441, %multiply.7582)
  %multiply.7583 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6128)
  %add.6129 = bf16[1,14336,4096]{2,1,0} add(%param.36, %multiply.7583)
  %divide.1442 = bf16[4096]{0} divide(%all-reduce.187, %broadcast.10081)
  %select.2714 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.187, %divide.1442)
  %multiply.7584 = bf16[4096]{0} multiply(%select.2714, %broadcast.10083)
  %param.581 = bf16[4096]{0} parameter(450), sharding={replicated}
  %multiply.7585 = bf16[4096]{0} multiply(%param.581, %broadcast.10085)
  %add.6130 = bf16[4096]{0} add(%multiply.7584, %multiply.7585)
  %multiply.7586 = bf16[4096]{0} multiply(%select.2714, %select.2714)
  %multiply.7587 = bf16[4096]{0} multiply(%multiply.7586, %broadcast.10088)
  %param.582 = bf16[4096]{0} parameter(773), sharding={replicated}
  %multiply.7588 = bf16[4096]{0} multiply(%param.582, %broadcast.10090)
  %add.6131 = bf16[4096]{0} add(%multiply.7587, %multiply.7588)
  %divide.1443 = bf16[4096]{0} divide(%add.6131, %broadcast.10092)
  %sqrt.126 = bf16[4096]{0} sqrt(%divide.1443)
  %add.6132 = bf16[4096]{0} add(%sqrt.126, %broadcast.10094)
  %multiply.7590 = bf16[4096]{0} multiply(%broadcast.10086, %add.6132)
  %divide.1444 = bf16[4096]{0} divide(%add.6130, %multiply.7590)
  %multiply.7591 = bf16[4096]{0} multiply(%param.32, %broadcast.10083)
  %add.6133 = bf16[4096]{0} add(%divide.1444, %multiply.7591)
  %multiply.7592 = bf16[4096]{0} multiply(%broadcast.5338, %add.6133)
  %add.6134 = bf16[4096]{0} add(%param.32, %multiply.7592)
  %divide.1445 = bf16[4096]{0} divide(%all-reduce.188, %broadcast.10081)
  %select.2715 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.188, %divide.1445)
  %multiply.7593 = bf16[4096]{0} multiply(%select.2715, %broadcast.10083)
  %param.583 = bf16[4096]{0} parameter(451), sharding={replicated}
  %multiply.7594 = bf16[4096]{0} multiply(%param.583, %broadcast.10085)
  %add.6135 = bf16[4096]{0} add(%multiply.7593, %multiply.7594)
  %multiply.7595 = bf16[4096]{0} multiply(%select.2715, %select.2715)
  %multiply.7596 = bf16[4096]{0} multiply(%multiply.7595, %broadcast.10088)
  %param.584 = bf16[4096]{0} parameter(774), sharding={replicated}
  %multiply.7597 = bf16[4096]{0} multiply(%param.584, %broadcast.10090)
  %add.6136 = bf16[4096]{0} add(%multiply.7596, %multiply.7597)
  %divide.1446 = bf16[4096]{0} divide(%add.6136, %broadcast.10092)
  %sqrt.127 = bf16[4096]{0} sqrt(%divide.1446)
  %add.6137 = bf16[4096]{0} add(%sqrt.127, %broadcast.10094)
  %multiply.7598 = bf16[4096]{0} multiply(%broadcast.10086, %add.6137)
  %divide.1447 = bf16[4096]{0} divide(%add.6135, %multiply.7598)
  %multiply.7600 = bf16[4096]{0} multiply(%param.27, %broadcast.10083)
  %add.6138 = bf16[4096]{0} add(%divide.1447, %multiply.7600)
  %multiply.7601 = bf16[4096]{0} multiply(%broadcast.5338, %add.6138)
  %add.6139 = bf16[4096]{0} add(%param.27, %multiply.7601)
  %divide.1448 = bf16[512,8,128]{0,2,1} divide(%transpose.368, %broadcast.10162)
  %select.2716 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.368, %divide.1448)
  %multiply.7602 = bf16[512,8,128]{0,2,1} multiply(%select.2716, %broadcast.10163)
  %param.585 = bf16[512,8,128]{2,1,0} parameter(452), sharding={devices=[8,1,1]<=[8]}
  %multiply.7603 = bf16[512,8,128]{2,1,0} multiply(%param.585, %broadcast.10164)
  %add.6140 = bf16[512,8,128]{0,2,1} add(%multiply.7602, %multiply.7603)
  %multiply.7604 = bf16[512,8,128]{0,2,1} multiply(%select.2716, %select.2716)
  %multiply.7605 = bf16[512,8,128]{0,2,1} multiply(%multiply.7604, %broadcast.10166)
  %param.586 = bf16[512,8,128]{2,1,0} parameter(775), sharding={devices=[8,1,1]<=[8]}
  %multiply.7606 = bf16[512,8,128]{2,1,0} multiply(%param.586, %broadcast.10167)
  %add.6141 = bf16[512,8,128]{0,2,1} add(%multiply.7605, %multiply.7606)
  %divide.1449 = bf16[512,8,128]{0,2,1} divide(%add.6141, %broadcast.10168)
  %sqrt.128 = bf16[512,8,128]{0,2,1} sqrt(%divide.1449)
  %add.6142 = bf16[512,8,128]{0,2,1} add(%sqrt.128, %broadcast.10169)
  %multiply.7607 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6142)
  %divide.1450 = bf16[512,8,128]{0,2,1} divide(%add.6140, %multiply.7607)
  %multiply.7608 = bf16[512,8,128]{2,1,0} multiply(%param.29, %broadcast.10163)
  %add.6144 = bf16[512,8,128]{0,2,1} add(%divide.1450, %multiply.7608)
  %multiply.7609 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6144)
  %add.6145 = bf16[512,8,128]{2,1,0} add(%param.29, %multiply.7609)
  %divide.1451 = bf16[32,128,512]{1,0,2} divide(%transpose.369, %broadcast.10172)
  %select.2717 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.369, %divide.1451)
  %multiply.7610 = bf16[32,128,512]{1,0,2} multiply(%select.2717, %broadcast.10173)
  %param.587 = bf16[32,128,512]{2,1,0} parameter(453), sharding={devices=[1,1,8]<=[8]}
  %multiply.7611 = bf16[32,128,512]{2,1,0} multiply(%param.587, %broadcast.10174)
  %add.6146 = bf16[32,128,512]{1,0,2} add(%multiply.7610, %multiply.7611)
  %multiply.7613 = bf16[32,128,512]{1,0,2} multiply(%select.2717, %select.2717)
  %multiply.7614 = bf16[32,128,512]{1,0,2} multiply(%multiply.7613, %broadcast.10176)
  %param.588 = bf16[32,128,512]{2,1,0} parameter(776), sharding={devices=[1,1,8]<=[8]}
  %multiply.7615 = bf16[32,128,512]{2,1,0} multiply(%param.588, %broadcast.10177)
  %add.6147 = bf16[32,128,512]{1,0,2} add(%multiply.7614, %multiply.7615)
  %divide.1452 = bf16[32,128,512]{1,0,2} divide(%add.6147, %broadcast.10178)
  %sqrt.129 = bf16[32,128,512]{1,0,2} sqrt(%divide.1452)
  %add.6148 = bf16[32,128,512]{1,0,2} add(%sqrt.129, %broadcast.10179)
  %multiply.7616 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6148)
  %divide.1453 = bf16[32,128,512]{1,0,2} divide(%add.6146, %multiply.7616)
  %multiply.7617 = bf16[32,128,512]{2,1,0} multiply(%param.31, %broadcast.10173)
  %add.6149 = bf16[32,128,512]{1,0,2} add(%divide.1453, %multiply.7617)
  %multiply.7619 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6149)
  %add.6150 = bf16[32,128,512]{2,1,0} add(%param.31, %multiply.7619)
  %divide.1454 = bf16[512,32,128]{0,2,1} divide(%transpose.370, %broadcast.10182)
  %select.2718 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.370, %divide.1454)
  %multiply.7620 = bf16[512,32,128]{0,2,1} multiply(%select.2718, %broadcast.10183)
  %param.589 = bf16[512,32,128]{2,1,0} parameter(454), sharding={devices=[8,1,1]<=[8]}
  %multiply.7621 = bf16[512,32,128]{2,1,0} multiply(%param.589, %broadcast.10184)
  %add.6151 = bf16[512,32,128]{0,2,1} add(%multiply.7620, %multiply.7621)
  %multiply.7622 = bf16[512,32,128]{0,2,1} multiply(%select.2718, %select.2718)
  %multiply.7623 = bf16[512,32,128]{0,2,1} multiply(%multiply.7622, %broadcast.10186)
  %param.590 = bf16[512,32,128]{2,1,0} parameter(777), sharding={devices=[8,1,1]<=[8]}
  %multiply.7624 = bf16[512,32,128]{2,1,0} multiply(%param.590, %broadcast.10187)
  %add.6152 = bf16[512,32,128]{0,2,1} add(%multiply.7623, %multiply.7624)
  %divide.1455 = bf16[512,32,128]{0,2,1} divide(%add.6152, %broadcast.10188)
  %sqrt.130 = bf16[512,32,128]{0,2,1} sqrt(%divide.1455)
  %add.6153 = bf16[512,32,128]{0,2,1} add(%sqrt.130, %broadcast.10189)
  %multiply.7625 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6153)
  %divide.1456 = bf16[512,32,128]{0,2,1} divide(%add.6151, %multiply.7625)
  %multiply.7626 = bf16[512,32,128]{2,1,0} multiply(%param.28, %broadcast.10183)
  %add.6154 = bf16[512,32,128]{0,2,1} add(%divide.1456, %multiply.7626)
  %multiply.7628 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6154)
  %add.6155 = bf16[512,32,128]{2,1,0} add(%param.28, %multiply.7628)
  %divide.1457 = bf16[512,8,128]{0,2,1} divide(%transpose.371, %broadcast.10162)
  %select.2719 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.371, %divide.1457)
  %multiply.7629 = bf16[512,8,128]{0,2,1} multiply(%select.2719, %broadcast.10163)
  %param.591 = bf16[512,8,128]{2,1,0} parameter(455), sharding={devices=[8,1,1]<=[8]}
  %multiply.7630 = bf16[512,8,128]{2,1,0} multiply(%param.591, %broadcast.10164)
  %add.6156 = bf16[512,8,128]{0,2,1} add(%multiply.7629, %multiply.7630)
  %multiply.7631 = bf16[512,8,128]{0,2,1} multiply(%select.2719, %select.2719)
  %multiply.7632 = bf16[512,8,128]{0,2,1} multiply(%multiply.7631, %broadcast.10166)
  %param.592 = bf16[512,8,128]{2,1,0} parameter(778), sharding={devices=[8,1,1]<=[8]}
  %multiply.7633 = bf16[512,8,128]{2,1,0} multiply(%param.592, %broadcast.10167)
  %add.6157 = bf16[512,8,128]{0,2,1} add(%multiply.7632, %multiply.7633)
  %divide.1458 = bf16[512,8,128]{0,2,1} divide(%add.6157, %broadcast.10168)
  %sqrt.131 = bf16[512,8,128]{0,2,1} sqrt(%divide.1458)
  %add.6158 = bf16[512,8,128]{0,2,1} add(%sqrt.131, %broadcast.10169)
  %multiply.7634 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6158)
  %divide.1459 = bf16[512,8,128]{0,2,1} divide(%add.6156, %multiply.7634)
  %multiply.7635 = bf16[512,8,128]{2,1,0} multiply(%param.30, %broadcast.10163)
  %add.6159 = bf16[512,8,128]{0,2,1} add(%divide.1459, %multiply.7635)
  %multiply.7636 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6159)
  %add.6160 = bf16[512,8,128]{2,1,0} add(%param.30, %multiply.7636)
  %divide.1460 = bf16[512,8]{0,1} divide(%dynamic-slice.2469, %broadcast.10097)
  %select.2720 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2469, %divide.1460)
  %multiply.7637 = bf16[512,8]{0,1} multiply(%select.2720, %broadcast.10098)
  %param.593 = bf16[512,8]{1,0} parameter(456), sharding={devices=[8,1]<=[8]}
  %multiply.7638 = bf16[512,8]{1,0} multiply(%param.593, %broadcast.10099)
  %add.6161 = bf16[512,8]{0,1} add(%multiply.7637, %multiply.7638)
  %multiply.7639 = bf16[512,8]{0,1} multiply(%select.2720, %select.2720)
  %multiply.7640 = bf16[512,8]{0,1} multiply(%multiply.7639, %broadcast.10101)
  %param.594 = bf16[512,8]{1,0} parameter(779), sharding={devices=[8,1]<=[8]}
  %multiply.7641 = bf16[512,8]{1,0} multiply(%param.594, %broadcast.10102)
  %add.6162 = bf16[512,8]{0,1} add(%multiply.7640, %multiply.7641)
  %divide.1461 = bf16[512,8]{0,1} divide(%add.6162, %broadcast.10103)
  %sqrt.132 = bf16[512,8]{0,1} sqrt(%divide.1461)
  %add.6163 = bf16[512,8]{0,1} add(%sqrt.132, %broadcast.10104)
  %multiply.7642 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6163)
  %divide.1462 = bf16[512,8]{0,1} divide(%add.6161, %multiply.7642)
  %multiply.7643 = bf16[512,8]{1,0} multiply(%param.213, %broadcast.10098)
  %add.6164 = bf16[512,8]{0,1} add(%divide.1462, %multiply.7643)
  %multiply.7644 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6164)
  %add.6165 = bf16[512,8]{1,0} add(%param.213, %multiply.7644)
  %divide.1463 = bf16[1,4096,14336]{2,1,0} divide(%copy.4240, %broadcast.10111)
  %select.2721 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4240, %divide.1463)
  %multiply.7645 = bf16[1,4096,14336]{2,1,0} multiply(%select.2721, %broadcast.10112)
  %param.595 = bf16[1,4096,14336]{2,1,0} parameter(457), sharding={devices=[8,1,1]<=[8]}
  %multiply.7646 = bf16[1,4096,14336]{2,1,0} multiply(%param.595, %broadcast.10113)
  %add.6166 = bf16[1,4096,14336]{2,1,0} add(%multiply.7645, %multiply.7646)
  %multiply.7647 = bf16[1,4096,14336]{2,1,0} multiply(%select.2721, %select.2721)
  %multiply.7648 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7647, %broadcast.10115)
  %param.596 = bf16[1,4096,14336]{2,1,0} parameter(780), sharding={devices=[8,1,1]<=[8]}
  %multiply.7650 = bf16[1,4096,14336]{2,1,0} multiply(%param.596, %broadcast.10116)
  %add.6167 = bf16[1,4096,14336]{2,1,0} add(%multiply.7648, %multiply.7650)
  %divide.1464 = bf16[1,4096,14336]{2,1,0} divide(%add.6167, %broadcast.10117)
  %sqrt.133 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1464)
  %add.6168 = bf16[1,4096,14336]{2,1,0} add(%sqrt.133, %broadcast.10119)
  %multiply.7651 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6168)
  %divide.1465 = bf16[1,4096,14336]{2,1,0} divide(%add.6166, %multiply.7651)
  %multiply.7652 = bf16[1,4096,14336]{2,1,0} multiply(%param.214, %broadcast.10112)
  %add.6169 = bf16[1,4096,14336]{2,1,0} add(%divide.1465, %multiply.7652)
  %multiply.7654 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6169)
  %add.6170 = bf16[1,4096,14336]{2,1,0} add(%param.214, %multiply.7654)
  %divide.1466 = bf16[1,4096,14336]{2,1,0} divide(%copy.4241, %broadcast.10111)
  %select.2722 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4241, %divide.1466)
  %multiply.7655 = bf16[1,4096,14336]{2,1,0} multiply(%select.2722, %broadcast.10112)
  %param.597 = bf16[1,4096,14336]{2,1,0} parameter(458), sharding={devices=[8,1,1]<=[8]}
  %multiply.7656 = bf16[1,4096,14336]{2,1,0} multiply(%param.597, %broadcast.10113)
  %add.6171 = bf16[1,4096,14336]{2,1,0} add(%multiply.7655, %multiply.7656)
  %multiply.7657 = bf16[1,4096,14336]{2,1,0} multiply(%select.2722, %select.2722)
  %multiply.7659 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7657, %broadcast.10115)
  %param.598 = bf16[1,4096,14336]{2,1,0} parameter(781), sharding={devices=[8,1,1]<=[8]}
  %multiply.7660 = bf16[1,4096,14336]{2,1,0} multiply(%param.598, %broadcast.10116)
  %add.6172 = bf16[1,4096,14336]{2,1,0} add(%multiply.7659, %multiply.7660)
  %divide.1467 = bf16[1,4096,14336]{2,1,0} divide(%add.6172, %broadcast.10117)
  %sqrt.134 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1467)
  %add.6173 = bf16[1,4096,14336]{2,1,0} add(%sqrt.134, %broadcast.10119)
  %multiply.7661 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6173)
  %divide.1468 = bf16[1,4096,14336]{2,1,0} divide(%add.6171, %multiply.7661)
  %multiply.7663 = bf16[1,4096,14336]{2,1,0} multiply(%param.215, %broadcast.10112)
  %add.6174 = bf16[1,4096,14336]{2,1,0} add(%divide.1468, %multiply.7663)
  %multiply.7664 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6174)
  %add.6175 = bf16[1,4096,14336]{2,1,0} add(%param.215, %multiply.7664)
  %divide.1469 = bf16[1,14336,4096]{2,1,0} divide(%copy.4242, %broadcast.10134)
  %select.2723 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4242, %divide.1469)
  %multiply.7665 = bf16[1,14336,4096]{2,1,0} multiply(%select.2723, %broadcast.10135)
  %param.599 = bf16[1,14336,4096]{2,1,0} parameter(459), sharding={devices=[8,1,1]<=[8]}
  %multiply.7666 = bf16[1,14336,4096]{2,1,0} multiply(%param.599, %broadcast.10136)
  %add.6176 = bf16[1,14336,4096]{2,1,0} add(%multiply.7665, %multiply.7666)
  %multiply.7668 = bf16[1,14336,4096]{2,1,0} multiply(%select.2723, %select.2723)
  %multiply.7669 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.7668, %broadcast.10138)
  %param.600 = bf16[1,14336,4096]{2,1,0} parameter(782), sharding={devices=[8,1,1]<=[8]}
  %multiply.7670 = bf16[1,14336,4096]{2,1,0} multiply(%param.600, %broadcast.10139)
  %add.6177 = bf16[1,14336,4096]{2,1,0} add(%multiply.7669, %multiply.7670)
  %divide.1470 = bf16[1,14336,4096]{2,1,0} divide(%add.6177, %broadcast.10140)
  %sqrt.135 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1470)
  %add.6178 = bf16[1,14336,4096]{2,1,0} add(%sqrt.135, %broadcast.10141)
  %multiply.7671 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6178)
  %divide.1471 = bf16[1,14336,4096]{2,1,0} divide(%add.6176, %multiply.7671)
  %multiply.7672 = bf16[1,14336,4096]{2,1,0} multiply(%param.216, %broadcast.10135)
  %add.6179 = bf16[1,14336,4096]{2,1,0} add(%divide.1471, %multiply.7672)
  %multiply.7673 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6179)
  %add.6180 = bf16[1,14336,4096]{2,1,0} add(%param.216, %multiply.7673)
  %divide.1472 = bf16[4096]{0} divide(%all-reduce.202, %broadcast.10081)
  %select.2724 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.202, %divide.1472)
  %multiply.7674 = bf16[4096]{0} multiply(%select.2724, %broadcast.10083)
  %param.601 = bf16[4096]{0} parameter(460), sharding={replicated}
  %multiply.7675 = bf16[4096]{0} multiply(%param.601, %broadcast.10085)
  %add.6181 = bf16[4096]{0} add(%multiply.7674, %multiply.7675)
  %multiply.7676 = bf16[4096]{0} multiply(%select.2724, %select.2724)
  %multiply.7677 = bf16[4096]{0} multiply(%multiply.7676, %broadcast.10088)
  %param.602 = bf16[4096]{0} parameter(783), sharding={replicated}
  %multiply.7678 = bf16[4096]{0} multiply(%param.602, %broadcast.10090)
  %add.6182 = bf16[4096]{0} add(%multiply.7677, %multiply.7678)
  %divide.1473 = bf16[4096]{0} divide(%add.6182, %broadcast.10092)
  %sqrt.136 = bf16[4096]{0} sqrt(%divide.1473)
  %add.6184 = bf16[4096]{0} add(%sqrt.136, %broadcast.10094)
  %multiply.7679 = bf16[4096]{0} multiply(%broadcast.10086, %add.6184)
  %divide.1474 = bf16[4096]{0} divide(%add.6181, %multiply.7679)
  %multiply.7680 = bf16[4096]{0} multiply(%param.212, %broadcast.10083)
  %add.6185 = bf16[4096]{0} add(%divide.1474, %multiply.7680)
  %multiply.7681 = bf16[4096]{0} multiply(%broadcast.5338, %add.6185)
  %add.6186 = bf16[4096]{0} add(%param.212, %multiply.7681)
  %divide.1475 = bf16[4096]{0} divide(%all-reduce.203, %broadcast.10081)
  %select.2725 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.203, %divide.1475)
  %multiply.7682 = bf16[4096]{0} multiply(%select.2725, %broadcast.10083)
  %param.603 = bf16[4096]{0} parameter(461), sharding={replicated}
  %multiply.7683 = bf16[4096]{0} multiply(%param.603, %broadcast.10085)
  %add.6187 = bf16[4096]{0} add(%multiply.7682, %multiply.7683)
  %multiply.7684 = bf16[4096]{0} multiply(%select.2725, %select.2725)
  %multiply.7685 = bf16[4096]{0} multiply(%multiply.7684, %broadcast.10088)
  %param.604 = bf16[4096]{0} parameter(784), sharding={replicated}
  %multiply.7686 = bf16[4096]{0} multiply(%param.604, %broadcast.10090)
  %add.6188 = bf16[4096]{0} add(%multiply.7685, %multiply.7686)
  %divide.1476 = bf16[4096]{0} divide(%add.6188, %broadcast.10092)
  %sqrt.137 = bf16[4096]{0} sqrt(%divide.1476)
  %add.6189 = bf16[4096]{0} add(%sqrt.137, %broadcast.10094)
  %multiply.7687 = bf16[4096]{0} multiply(%broadcast.10086, %add.6189)
  %divide.1477 = bf16[4096]{0} divide(%add.6187, %multiply.7687)
  %multiply.7688 = bf16[4096]{0} multiply(%param.207, %broadcast.10083)
  %add.6190 = bf16[4096]{0} add(%divide.1477, %multiply.7688)
  %multiply.7690 = bf16[4096]{0} multiply(%broadcast.5338, %add.6190)
  %add.6191 = bf16[4096]{0} add(%param.207, %multiply.7690)
  %divide.1478 = bf16[512,8,128]{0,2,1} divide(%transpose.372, %broadcast.10162)
  %select.2726 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.372, %divide.1478)
  %multiply.7691 = bf16[512,8,128]{0,2,1} multiply(%select.2726, %broadcast.10163)
  %param.605 = bf16[512,8,128]{2,1,0} parameter(462), sharding={devices=[8,1,1]<=[8]}
  %multiply.7692 = bf16[512,8,128]{2,1,0} multiply(%param.605, %broadcast.10164)
  %add.6192 = bf16[512,8,128]{0,2,1} add(%multiply.7691, %multiply.7692)
  %multiply.7694 = bf16[512,8,128]{0,2,1} multiply(%select.2726, %select.2726)
  %multiply.7695 = bf16[512,8,128]{0,2,1} multiply(%multiply.7694, %broadcast.10166)
  %param.606 = bf16[512,8,128]{2,1,0} parameter(785), sharding={devices=[8,1,1]<=[8]}
  %multiply.7696 = bf16[512,8,128]{2,1,0} multiply(%param.606, %broadcast.10167)
  %add.6193 = bf16[512,8,128]{0,2,1} add(%multiply.7695, %multiply.7696)
  %divide.1479 = bf16[512,8,128]{0,2,1} divide(%add.6193, %broadcast.10168)
  %sqrt.138 = bf16[512,8,128]{0,2,1} sqrt(%divide.1479)
  %add.6194 = bf16[512,8,128]{0,2,1} add(%sqrt.138, %broadcast.10169)
  %multiply.7697 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6194)
  %divide.1480 = bf16[512,8,128]{0,2,1} divide(%add.6192, %multiply.7697)
  %multiply.7699 = bf16[512,8,128]{2,1,0} multiply(%param.209, %broadcast.10163)
  %add.6195 = bf16[512,8,128]{0,2,1} add(%divide.1480, %multiply.7699)
  %multiply.7700 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6195)
  %add.6196 = bf16[512,8,128]{2,1,0} add(%param.209, %multiply.7700)
  %divide.1481 = bf16[32,128,512]{1,0,2} divide(%transpose.373, %broadcast.10172)
  %select.2727 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.373, %divide.1481)
  %multiply.7701 = bf16[32,128,512]{1,0,2} multiply(%select.2727, %broadcast.10173)
  %param.607 = bf16[32,128,512]{2,1,0} parameter(463), sharding={devices=[1,1,8]<=[8]}
  %multiply.7703 = bf16[32,128,512]{2,1,0} multiply(%param.607, %broadcast.10174)
  %add.6197 = bf16[32,128,512]{1,0,2} add(%multiply.7701, %multiply.7703)
  %multiply.7704 = bf16[32,128,512]{1,0,2} multiply(%select.2727, %select.2727)
  %multiply.7705 = bf16[32,128,512]{1,0,2} multiply(%multiply.7704, %broadcast.10176)
  %param.608 = bf16[32,128,512]{2,1,0} parameter(786), sharding={devices=[1,1,8]<=[8]}
  %multiply.7706 = bf16[32,128,512]{2,1,0} multiply(%param.608, %broadcast.10177)
  %add.6198 = bf16[32,128,512]{1,0,2} add(%multiply.7705, %multiply.7706)
  %divide.1482 = bf16[32,128,512]{1,0,2} divide(%add.6198, %broadcast.10178)
  %sqrt.139 = bf16[32,128,512]{1,0,2} sqrt(%divide.1482)
  %add.6199 = bf16[32,128,512]{1,0,2} add(%sqrt.139, %broadcast.10179)
  %multiply.7707 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6199)
  %divide.1483 = bf16[32,128,512]{1,0,2} divide(%add.6197, %multiply.7707)
  %multiply.7708 = bf16[32,128,512]{2,1,0} multiply(%param.211, %broadcast.10173)
  %add.6200 = bf16[32,128,512]{1,0,2} add(%divide.1483, %multiply.7708)
  %multiply.7709 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6200)
  %add.6201 = bf16[32,128,512]{2,1,0} add(%param.211, %multiply.7709)
  %divide.1484 = bf16[512,32,128]{0,2,1} divide(%transpose.374, %broadcast.10182)
  %select.2728 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.374, %divide.1484)
  %multiply.7710 = bf16[512,32,128]{0,2,1} multiply(%select.2728, %broadcast.10183)
  %param.609 = bf16[512,32,128]{2,1,0} parameter(464), sharding={devices=[8,1,1]<=[8]}
  %multiply.7711 = bf16[512,32,128]{2,1,0} multiply(%param.609, %broadcast.10184)
  %add.6202 = bf16[512,32,128]{0,2,1} add(%multiply.7710, %multiply.7711)
  %multiply.7712 = bf16[512,32,128]{0,2,1} multiply(%select.2728, %select.2728)
  %multiply.7713 = bf16[512,32,128]{0,2,1} multiply(%multiply.7712, %broadcast.10186)
  %param.610 = bf16[512,32,128]{2,1,0} parameter(787), sharding={devices=[8,1,1]<=[8]}
  %multiply.7714 = bf16[512,32,128]{2,1,0} multiply(%param.610, %broadcast.10187)
  %add.6203 = bf16[512,32,128]{0,2,1} add(%multiply.7713, %multiply.7714)
  %divide.1485 = bf16[512,32,128]{0,2,1} divide(%add.6203, %broadcast.10188)
  %sqrt.140 = bf16[512,32,128]{0,2,1} sqrt(%divide.1485)
  %add.6204 = bf16[512,32,128]{0,2,1} add(%sqrt.140, %broadcast.10189)
  %multiply.7715 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6204)
  %divide.1486 = bf16[512,32,128]{0,2,1} divide(%add.6202, %multiply.7715)
  %multiply.7716 = bf16[512,32,128]{2,1,0} multiply(%param.208, %broadcast.10183)
  %add.6205 = bf16[512,32,128]{0,2,1} add(%divide.1486, %multiply.7716)
  %multiply.7717 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6205)
  %add.6206 = bf16[512,32,128]{2,1,0} add(%param.208, %multiply.7717)
  %divide.1487 = bf16[512,8,128]{0,2,1} divide(%transpose.375, %broadcast.10162)
  %select.2729 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.375, %divide.1487)
  %multiply.7718 = bf16[512,8,128]{0,2,1} multiply(%select.2729, %broadcast.10163)
  %param.611 = bf16[512,8,128]{2,1,0} parameter(465), sharding={devices=[8,1,1]<=[8]}
  %multiply.7719 = bf16[512,8,128]{2,1,0} multiply(%param.611, %broadcast.10164)
  %add.6207 = bf16[512,8,128]{0,2,1} add(%multiply.7718, %multiply.7719)
  %multiply.7720 = bf16[512,8,128]{0,2,1} multiply(%select.2729, %select.2729)
  %multiply.7721 = bf16[512,8,128]{0,2,1} multiply(%multiply.7720, %broadcast.10166)
  %param.612 = bf16[512,8,128]{2,1,0} parameter(788), sharding={devices=[8,1,1]<=[8]}
  %multiply.7722 = bf16[512,8,128]{2,1,0} multiply(%param.612, %broadcast.10167)
  %add.6208 = bf16[512,8,128]{0,2,1} add(%multiply.7721, %multiply.7722)
  %divide.1488 = bf16[512,8,128]{0,2,1} divide(%add.6208, %broadcast.10168)
  %sqrt.141 = bf16[512,8,128]{0,2,1} sqrt(%divide.1488)
  %add.6209 = bf16[512,8,128]{0,2,1} add(%sqrt.141, %broadcast.10169)
  %multiply.7723 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6209)
  %divide.1489 = bf16[512,8,128]{0,2,1} divide(%add.6207, %multiply.7723)
  %multiply.7724 = bf16[512,8,128]{2,1,0} multiply(%param.210, %broadcast.10163)
  %add.6210 = bf16[512,8,128]{0,2,1} add(%divide.1489, %multiply.7724)
  %multiply.7725 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6210)
  %add.6211 = bf16[512,8,128]{2,1,0} add(%param.210, %multiply.7725)
  %divide.1490 = bf16[512,8]{0,1} divide(%dynamic-slice.2479, %broadcast.10097)
  %select.2730 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2479, %divide.1490)
  %multiply.7726 = bf16[512,8]{0,1} multiply(%select.2730, %broadcast.10098)
  %param.613 = bf16[512,8]{1,0} parameter(466), sharding={devices=[8,1]<=[8]}
  %multiply.7727 = bf16[512,8]{1,0} multiply(%param.613, %broadcast.10099)
  %add.6212 = bf16[512,8]{0,1} add(%multiply.7726, %multiply.7727)
  %multiply.7728 = bf16[512,8]{0,1} multiply(%select.2730, %select.2730)
  %multiply.7729 = bf16[512,8]{0,1} multiply(%multiply.7728, %broadcast.10101)
  %param.614 = bf16[512,8]{1,0} parameter(789), sharding={devices=[8,1]<=[8]}
  %multiply.7730 = bf16[512,8]{1,0} multiply(%param.614, %broadcast.10102)
  %add.6213 = bf16[512,8]{0,1} add(%multiply.7729, %multiply.7730)
  %divide.1491 = bf16[512,8]{0,1} divide(%add.6213, %broadcast.10103)
  %sqrt.142 = bf16[512,8]{0,1} sqrt(%divide.1491)
  %add.6215 = bf16[512,8]{0,1} add(%sqrt.142, %broadcast.10104)
  %multiply.7731 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6215)
  %divide.1492 = bf16[512,8]{0,1} divide(%add.6212, %multiply.7731)
  %multiply.7732 = bf16[512,8]{1,0} multiply(%param.223, %broadcast.10098)
  %add.6216 = bf16[512,8]{0,1} add(%divide.1492, %multiply.7732)
  %multiply.7733 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6216)
  %add.6217 = bf16[512,8]{1,0} add(%param.223, %multiply.7733)
  %divide.1493 = bf16[1,4096,14336]{2,1,0} divide(%copy.4243, %broadcast.10111)
  %select.2731 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4243, %divide.1493)
  %multiply.7734 = bf16[1,4096,14336]{2,1,0} multiply(%select.2731, %broadcast.10112)
  %param.615 = bf16[1,4096,14336]{2,1,0} parameter(467), sharding={devices=[8,1,1]<=[8]}
  %multiply.7735 = bf16[1,4096,14336]{2,1,0} multiply(%param.615, %broadcast.10113)
  %add.6218 = bf16[1,4096,14336]{2,1,0} add(%multiply.7734, %multiply.7735)
  %multiply.7736 = bf16[1,4096,14336]{2,1,0} multiply(%select.2731, %select.2731)
  %multiply.7737 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7736, %broadcast.10115)
  %param.616 = bf16[1,4096,14336]{2,1,0} parameter(790), sharding={devices=[8,1,1]<=[8]}
  %multiply.7738 = bf16[1,4096,14336]{2,1,0} multiply(%param.616, %broadcast.10116)
  %add.6219 = bf16[1,4096,14336]{2,1,0} add(%multiply.7737, %multiply.7738)
  %divide.1494 = bf16[1,4096,14336]{2,1,0} divide(%add.6219, %broadcast.10117)
  %sqrt.143 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1494)
  %add.6220 = bf16[1,4096,14336]{2,1,0} add(%sqrt.143, %broadcast.10119)
  %multiply.7739 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6220)
  %divide.1495 = bf16[1,4096,14336]{2,1,0} divide(%add.6218, %multiply.7739)
  %multiply.7740 = bf16[1,4096,14336]{2,1,0} multiply(%param.224, %broadcast.10112)
  %add.6221 = bf16[1,4096,14336]{2,1,0} add(%divide.1495, %multiply.7740)
  %multiply.7741 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6221)
  %add.6223 = bf16[1,4096,14336]{2,1,0} add(%param.224, %multiply.7741)
  %divide.1496 = bf16[1,4096,14336]{2,1,0} divide(%copy.4244, %broadcast.10111)
  %select.2732 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4244, %divide.1496)
  %multiply.7742 = bf16[1,4096,14336]{2,1,0} multiply(%select.2732, %broadcast.10112)
  %param.617 = bf16[1,4096,14336]{2,1,0} parameter(468), sharding={devices=[8,1,1]<=[8]}
  %multiply.7743 = bf16[1,4096,14336]{2,1,0} multiply(%param.617, %broadcast.10113)
  %add.6224 = bf16[1,4096,14336]{2,1,0} add(%multiply.7742, %multiply.7743)
  %multiply.7744 = bf16[1,4096,14336]{2,1,0} multiply(%select.2732, %select.2732)
  %multiply.7745 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7744, %broadcast.10115)
  %param.618 = bf16[1,4096,14336]{2,1,0} parameter(791), sharding={devices=[8,1,1]<=[8]}
  %multiply.7746 = bf16[1,4096,14336]{2,1,0} multiply(%param.618, %broadcast.10116)
  %add.6225 = bf16[1,4096,14336]{2,1,0} add(%multiply.7745, %multiply.7746)
  %divide.1497 = bf16[1,4096,14336]{2,1,0} divide(%add.6225, %broadcast.10117)
  %sqrt.144 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1497)
  %add.6226 = bf16[1,4096,14336]{2,1,0} add(%sqrt.144, %broadcast.10119)
  %multiply.7747 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6226)
  %divide.1498 = bf16[1,4096,14336]{2,1,0} divide(%add.6224, %multiply.7747)
  %multiply.7748 = bf16[1,4096,14336]{2,1,0} multiply(%param.225, %broadcast.10112)
  %add.6227 = bf16[1,4096,14336]{2,1,0} add(%divide.1498, %multiply.7748)
  %multiply.7749 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6227)
  %add.6228 = bf16[1,4096,14336]{2,1,0} add(%param.225, %multiply.7749)
  %divide.1499 = bf16[1,14336,4096]{2,1,0} divide(%copy.4245, %broadcast.10134)
  %select.2733 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4245, %divide.1499)
  %multiply.7750 = bf16[1,14336,4096]{2,1,0} multiply(%select.2733, %broadcast.10135)
  %param.619 = bf16[1,14336,4096]{2,1,0} parameter(469), sharding={devices=[8,1,1]<=[8]}
  %multiply.7751 = bf16[1,14336,4096]{2,1,0} multiply(%param.619, %broadcast.10136)
  %add.6229 = bf16[1,14336,4096]{2,1,0} add(%multiply.7750, %multiply.7751)
  %multiply.7752 = bf16[1,14336,4096]{2,1,0} multiply(%select.2733, %select.2733)
  %multiply.7753 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.7752, %broadcast.10138)
  %param.620 = bf16[1,14336,4096]{2,1,0} parameter(792), sharding={devices=[8,1,1]<=[8]}
  %multiply.7754 = bf16[1,14336,4096]{2,1,0} multiply(%param.620, %broadcast.10139)
  %add.6230 = bf16[1,14336,4096]{2,1,0} add(%multiply.7753, %multiply.7754)
  %divide.1500 = bf16[1,14336,4096]{2,1,0} divide(%add.6230, %broadcast.10140)
  %sqrt.145 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1500)
  %add.6231 = bf16[1,14336,4096]{2,1,0} add(%sqrt.145, %broadcast.10141)
  %multiply.7755 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6231)
  %divide.1501 = bf16[1,14336,4096]{2,1,0} divide(%add.6229, %multiply.7755)
  %multiply.7756 = bf16[1,14336,4096]{2,1,0} multiply(%param.226, %broadcast.10135)
  %add.6232 = bf16[1,14336,4096]{2,1,0} add(%divide.1501, %multiply.7756)
  %multiply.7757 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6232)
  %add.6233 = bf16[1,14336,4096]{2,1,0} add(%param.226, %multiply.7757)
  %divide.1502 = bf16[4096]{0} divide(%all-reduce.217, %broadcast.10081)
  %select.2734 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.217, %divide.1502)
  %multiply.7758 = bf16[4096]{0} multiply(%select.2734, %broadcast.10083)
  %param.621 = bf16[4096]{0} parameter(470), sharding={replicated}
  %multiply.7760 = bf16[4096]{0} multiply(%param.621, %broadcast.10085)
  %add.6234 = bf16[4096]{0} add(%multiply.7758, %multiply.7760)
  %multiply.7761 = bf16[4096]{0} multiply(%select.2734, %select.2734)
  %multiply.7762 = bf16[4096]{0} multiply(%multiply.7761, %broadcast.10088)
  %param.622 = bf16[4096]{0} parameter(793), sharding={replicated}
  %multiply.7763 = bf16[4096]{0} multiply(%param.622, %broadcast.10090)
  %add.6235 = bf16[4096]{0} add(%multiply.7762, %multiply.7763)
  %divide.1503 = bf16[4096]{0} divide(%add.6235, %broadcast.10092)
  %sqrt.146 = bf16[4096]{0} sqrt(%divide.1503)
  %add.6236 = bf16[4096]{0} add(%sqrt.146, %broadcast.10094)
  %multiply.7764 = bf16[4096]{0} multiply(%broadcast.10086, %add.6236)
  %divide.1504 = bf16[4096]{0} divide(%add.6234, %multiply.7764)
  %multiply.7765 = bf16[4096]{0} multiply(%param.222, %broadcast.10083)
  %add.6238 = bf16[4096]{0} add(%divide.1504, %multiply.7765)
  %multiply.7766 = bf16[4096]{0} multiply(%broadcast.5338, %add.6238)
  %add.6239 = bf16[4096]{0} add(%param.222, %multiply.7766)
  %divide.1506 = bf16[4096]{0} divide(%all-reduce.218, %broadcast.10081)
  %select.2735 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.218, %divide.1506)
  %multiply.7767 = bf16[4096]{0} multiply(%select.2735, %broadcast.10083)
  %param.623 = bf16[4096]{0} parameter(471), sharding={replicated}
  %multiply.7768 = bf16[4096]{0} multiply(%param.623, %broadcast.10085)
  %add.6240 = bf16[4096]{0} add(%multiply.7767, %multiply.7768)
  %multiply.7769 = bf16[4096]{0} multiply(%select.2735, %select.2735)
  %multiply.7770 = bf16[4096]{0} multiply(%multiply.7769, %broadcast.10088)
  %param.624 = bf16[4096]{0} parameter(794), sharding={replicated}
  %multiply.7771 = bf16[4096]{0} multiply(%param.624, %broadcast.10090)
  %add.6241 = bf16[4096]{0} add(%multiply.7770, %multiply.7771)
  %divide.1507 = bf16[4096]{0} divide(%add.6241, %broadcast.10092)
  %sqrt.147 = bf16[4096]{0} sqrt(%divide.1507)
  %add.6243 = bf16[4096]{0} add(%sqrt.147, %broadcast.10094)
  %multiply.7773 = bf16[4096]{0} multiply(%broadcast.10086, %add.6243)
  %divide.1508 = bf16[4096]{0} divide(%add.6240, %multiply.7773)
  %multiply.7774 = bf16[4096]{0} multiply(%param.217, %broadcast.10083)
  %add.6244 = bf16[4096]{0} add(%divide.1508, %multiply.7774)
  %multiply.7775 = bf16[4096]{0} multiply(%broadcast.5338, %add.6244)
  %add.6245 = bf16[4096]{0} add(%param.217, %multiply.7775)
  %divide.1509 = bf16[512,8,128]{0,2,1} divide(%transpose.376, %broadcast.10162)
  %select.2736 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.376, %divide.1509)
  %multiply.7776 = bf16[512,8,128]{0,2,1} multiply(%select.2736, %broadcast.10163)
  %param.625 = bf16[512,8,128]{2,1,0} parameter(472), sharding={devices=[8,1,1]<=[8]}
  %multiply.7777 = bf16[512,8,128]{2,1,0} multiply(%param.625, %broadcast.10164)
  %add.6246 = bf16[512,8,128]{0,2,1} add(%multiply.7776, %multiply.7777)
  %multiply.7779 = bf16[512,8,128]{0,2,1} multiply(%select.2736, %select.2736)
  %multiply.7780 = bf16[512,8,128]{0,2,1} multiply(%multiply.7779, %broadcast.10166)
  %param.626 = bf16[512,8,128]{2,1,0} parameter(795), sharding={devices=[8,1,1]<=[8]}
  %multiply.7781 = bf16[512,8,128]{2,1,0} multiply(%param.626, %broadcast.10167)
  %add.6248 = bf16[512,8,128]{0,2,1} add(%multiply.7780, %multiply.7781)
  %divide.1510 = bf16[512,8,128]{0,2,1} divide(%add.6248, %broadcast.10168)
  %sqrt.148 = bf16[512,8,128]{0,2,1} sqrt(%divide.1510)
  %add.6249 = bf16[512,8,128]{0,2,1} add(%sqrt.148, %broadcast.10169)
  %multiply.7782 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6249)
  %divide.1511 = bf16[512,8,128]{0,2,1} divide(%add.6246, %multiply.7782)
  %multiply.7783 = bf16[512,8,128]{2,1,0} multiply(%param.219, %broadcast.10163)
  %add.6250 = bf16[512,8,128]{0,2,1} add(%divide.1511, %multiply.7783)
  %multiply.7784 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6250)
  %add.6251 = bf16[512,8,128]{2,1,0} add(%param.219, %multiply.7784)
  %divide.1512 = bf16[32,128,512]{1,0,2} divide(%transpose.377, %broadcast.10172)
  %select.2737 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.377, %divide.1512)
  %multiply.7785 = bf16[32,128,512]{1,0,2} multiply(%select.2737, %broadcast.10173)
  %param.627 = bf16[32,128,512]{2,1,0} parameter(473), sharding={devices=[1,1,8]<=[8]}
  %multiply.7786 = bf16[32,128,512]{2,1,0} multiply(%param.627, %broadcast.10174)
  %add.6252 = bf16[32,128,512]{1,0,2} add(%multiply.7785, %multiply.7786)
  %multiply.7787 = bf16[32,128,512]{1,0,2} multiply(%select.2737, %select.2737)
  %multiply.7788 = bf16[32,128,512]{1,0,2} multiply(%multiply.7787, %broadcast.10176)
  %param.628 = bf16[32,128,512]{2,1,0} parameter(796), sharding={devices=[1,1,8]<=[8]}
  %multiply.7789 = bf16[32,128,512]{2,1,0} multiply(%param.628, %broadcast.10177)
  %add.6253 = bf16[32,128,512]{1,0,2} add(%multiply.7788, %multiply.7789)
  %divide.1513 = bf16[32,128,512]{1,0,2} divide(%add.6253, %broadcast.10178)
  %sqrt.149 = bf16[32,128,512]{1,0,2} sqrt(%divide.1513)
  %add.6254 = bf16[32,128,512]{1,0,2} add(%sqrt.149, %broadcast.10179)
  %multiply.7790 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6254)
  %divide.1514 = bf16[32,128,512]{1,0,2} divide(%add.6252, %multiply.7790)
  %multiply.7791 = bf16[32,128,512]{2,1,0} multiply(%param.221, %broadcast.10173)
  %add.6255 = bf16[32,128,512]{1,0,2} add(%divide.1514, %multiply.7791)
  %multiply.7792 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6255)
  %add.6256 = bf16[32,128,512]{2,1,0} add(%param.221, %multiply.7792)
  %divide.1515 = bf16[512,32,128]{0,2,1} divide(%transpose.378, %broadcast.10182)
  %select.2738 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.378, %divide.1515)
  %multiply.7793 = bf16[512,32,128]{0,2,1} multiply(%select.2738, %broadcast.10183)
  %param.629 = bf16[512,32,128]{2,1,0} parameter(474), sharding={devices=[8,1,1]<=[8]}
  %multiply.7794 = bf16[512,32,128]{2,1,0} multiply(%param.629, %broadcast.10184)
  %add.6257 = bf16[512,32,128]{0,2,1} add(%multiply.7793, %multiply.7794)
  %multiply.7795 = bf16[512,32,128]{0,2,1} multiply(%select.2738, %select.2738)
  %multiply.7796 = bf16[512,32,128]{0,2,1} multiply(%multiply.7795, %broadcast.10186)
  %param.630 = bf16[512,32,128]{2,1,0} parameter(797), sharding={devices=[8,1,1]<=[8]}
  %multiply.7797 = bf16[512,32,128]{2,1,0} multiply(%param.630, %broadcast.10187)
  %add.6258 = bf16[512,32,128]{0,2,1} add(%multiply.7796, %multiply.7797)
  %divide.1516 = bf16[512,32,128]{0,2,1} divide(%add.6258, %broadcast.10188)
  %sqrt.150 = bf16[512,32,128]{0,2,1} sqrt(%divide.1516)
  %add.6259 = bf16[512,32,128]{0,2,1} add(%sqrt.150, %broadcast.10189)
  %multiply.7798 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6259)
  %divide.1517 = bf16[512,32,128]{0,2,1} divide(%add.6257, %multiply.7798)
  %multiply.7799 = bf16[512,32,128]{2,1,0} multiply(%param.218, %broadcast.10183)
  %add.6260 = bf16[512,32,128]{0,2,1} add(%divide.1517, %multiply.7799)
  %multiply.7800 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6260)
  %add.6261 = bf16[512,32,128]{2,1,0} add(%param.218, %multiply.7800)
  %divide.1518 = bf16[512,8,128]{0,2,1} divide(%transpose.379, %broadcast.10162)
  %select.2739 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.379, %divide.1518)
  %multiply.7801 = bf16[512,8,128]{0,2,1} multiply(%select.2739, %broadcast.10163)
  %param.631 = bf16[512,8,128]{2,1,0} parameter(475), sharding={devices=[8,1,1]<=[8]}
  %multiply.7802 = bf16[512,8,128]{2,1,0} multiply(%param.631, %broadcast.10164)
  %add.6262 = bf16[512,8,128]{0,2,1} add(%multiply.7801, %multiply.7802)
  %multiply.7803 = bf16[512,8,128]{0,2,1} multiply(%select.2739, %select.2739)
  %multiply.7804 = bf16[512,8,128]{0,2,1} multiply(%multiply.7803, %broadcast.10166)
  %param.632 = bf16[512,8,128]{2,1,0} parameter(798), sharding={devices=[8,1,1]<=[8]}
  %multiply.7805 = bf16[512,8,128]{2,1,0} multiply(%param.632, %broadcast.10167)
  %add.6263 = bf16[512,8,128]{0,2,1} add(%multiply.7804, %multiply.7805)
  %divide.1519 = bf16[512,8,128]{0,2,1} divide(%add.6263, %broadcast.10168)
  %sqrt.151 = bf16[512,8,128]{0,2,1} sqrt(%divide.1519)
  %add.6264 = bf16[512,8,128]{0,2,1} add(%sqrt.151, %broadcast.10169)
  %multiply.7806 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6264)
  %divide.1520 = bf16[512,8,128]{0,2,1} divide(%add.6262, %multiply.7806)
  %multiply.7807 = bf16[512,8,128]{2,1,0} multiply(%param.220, %broadcast.10163)
  %add.6265 = bf16[512,8,128]{0,2,1} add(%divide.1520, %multiply.7807)
  %multiply.7808 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6265)
  %add.6266 = bf16[512,8,128]{2,1,0} add(%param.220, %multiply.7808)
  %divide.1521 = bf16[512,8]{0,1} divide(%dynamic-slice.2489, %broadcast.10097)
  %select.2740 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2489, %divide.1521)
  %multiply.7809 = bf16[512,8]{0,1} multiply(%select.2740, %broadcast.10098)
  %param.633 = bf16[512,8]{1,0} parameter(476), sharding={devices=[8,1]<=[8]}
  %multiply.7810 = bf16[512,8]{1,0} multiply(%param.633, %broadcast.10099)
  %add.6267 = bf16[512,8]{0,1} add(%multiply.7809, %multiply.7810)
  %multiply.7811 = bf16[512,8]{0,1} multiply(%select.2740, %select.2740)
  %multiply.7812 = bf16[512,8]{0,1} multiply(%multiply.7811, %broadcast.10101)
  %param.634 = bf16[512,8]{1,0} parameter(799), sharding={devices=[8,1]<=[8]}
  %multiply.7813 = bf16[512,8]{1,0} multiply(%param.634, %broadcast.10102)
  %add.6268 = bf16[512,8]{0,1} add(%multiply.7812, %multiply.7813)
  %divide.1522 = bf16[512,8]{0,1} divide(%add.6268, %broadcast.10103)
  %sqrt.152 = bf16[512,8]{0,1} sqrt(%divide.1522)
  %add.6269 = bf16[512,8]{0,1} add(%sqrt.152, %broadcast.10104)
  %multiply.7814 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6269)
  %divide.1523 = bf16[512,8]{0,1} divide(%add.6267, %multiply.7814)
  %multiply.7815 = bf16[512,8]{1,0} multiply(%param.233, %broadcast.10098)
  %add.6270 = bf16[512,8]{0,1} add(%divide.1523, %multiply.7815)
  %multiply.7816 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6270)
  %add.6271 = bf16[512,8]{1,0} add(%param.233, %multiply.7816)
  %divide.1524 = bf16[1,4096,14336]{2,1,0} divide(%copy.4246, %broadcast.10111)
  %select.2741 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4246, %divide.1524)
  %multiply.7817 = bf16[1,4096,14336]{2,1,0} multiply(%select.2741, %broadcast.10112)
  %param.635 = bf16[1,4096,14336]{2,1,0} parameter(477), sharding={devices=[8,1,1]<=[8]}
  %multiply.7818 = bf16[1,4096,14336]{2,1,0} multiply(%param.635, %broadcast.10113)
  %add.6272 = bf16[1,4096,14336]{2,1,0} add(%multiply.7817, %multiply.7818)
  %multiply.7819 = bf16[1,4096,14336]{2,1,0} multiply(%select.2741, %select.2741)
  %multiply.7820 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7819, %broadcast.10115)
  %param.636 = bf16[1,4096,14336]{2,1,0} parameter(800), sharding={devices=[8,1,1]<=[8]}
  %multiply.7821 = bf16[1,4096,14336]{2,1,0} multiply(%param.636, %broadcast.10116)
  %add.6273 = bf16[1,4096,14336]{2,1,0} add(%multiply.7820, %multiply.7821)
  %divide.1525 = bf16[1,4096,14336]{2,1,0} divide(%add.6273, %broadcast.10117)
  %sqrt.153 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1525)
  %add.6274 = bf16[1,4096,14336]{2,1,0} add(%sqrt.153, %broadcast.10119)
  %multiply.7822 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6274)
  %divide.1527 = bf16[1,4096,14336]{2,1,0} divide(%add.6272, %multiply.7822)
  %multiply.7823 = bf16[1,4096,14336]{2,1,0} multiply(%param.234, %broadcast.10112)
  %add.6275 = bf16[1,4096,14336]{2,1,0} add(%divide.1527, %multiply.7823)
  %multiply.7824 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6275)
  %add.6276 = bf16[1,4096,14336]{2,1,0} add(%param.234, %multiply.7824)
  %divide.1528 = bf16[1,4096,14336]{2,1,0} divide(%copy.4247, %broadcast.10111)
  %select.2742 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4247, %divide.1528)
  %multiply.7825 = bf16[1,4096,14336]{2,1,0} multiply(%select.2742, %broadcast.10112)
  %param.637 = bf16[1,4096,14336]{2,1,0} parameter(478), sharding={devices=[8,1,1]<=[8]}
  %multiply.7826 = bf16[1,4096,14336]{2,1,0} multiply(%param.637, %broadcast.10113)
  %add.6277 = bf16[1,4096,14336]{2,1,0} add(%multiply.7825, %multiply.7826)
  %multiply.7827 = bf16[1,4096,14336]{2,1,0} multiply(%select.2742, %select.2742)
  %multiply.7828 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7827, %broadcast.10115)
  %param.638 = bf16[1,4096,14336]{2,1,0} parameter(801), sharding={devices=[8,1,1]<=[8]}
  %multiply.7829 = bf16[1,4096,14336]{2,1,0} multiply(%param.638, %broadcast.10116)
  %add.6278 = bf16[1,4096,14336]{2,1,0} add(%multiply.7828, %multiply.7829)
  %divide.1529 = bf16[1,4096,14336]{2,1,0} divide(%add.6278, %broadcast.10117)
  %sqrt.154 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1529)
  %add.6279 = bf16[1,4096,14336]{2,1,0} add(%sqrt.154, %broadcast.10119)
  %multiply.7830 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6279)
  %divide.1530 = bf16[1,4096,14336]{2,1,0} divide(%add.6277, %multiply.7830)
  %multiply.7831 = bf16[1,4096,14336]{2,1,0} multiply(%param.235, %broadcast.10112)
  %add.6281 = bf16[1,4096,14336]{2,1,0} add(%divide.1530, %multiply.7831)
  %multiply.7832 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6281)
  %add.6282 = bf16[1,4096,14336]{2,1,0} add(%param.235, %multiply.7832)
  %divide.1531 = bf16[1,14336,4096]{2,1,0} divide(%copy.4248, %broadcast.10134)
  %select.2743 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4248, %divide.1531)
  %multiply.7833 = bf16[1,14336,4096]{2,1,0} multiply(%select.2743, %broadcast.10135)
  %param.639 = bf16[1,14336,4096]{2,1,0} parameter(479), sharding={devices=[8,1,1]<=[8]}
  %multiply.7834 = bf16[1,14336,4096]{2,1,0} multiply(%param.639, %broadcast.10136)
  %add.6283 = bf16[1,14336,4096]{2,1,0} add(%multiply.7833, %multiply.7834)
  %multiply.7835 = bf16[1,14336,4096]{2,1,0} multiply(%select.2743, %select.2743)
  %multiply.7836 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.7835, %broadcast.10138)
  %param.640 = bf16[1,14336,4096]{2,1,0} parameter(802), sharding={devices=[8,1,1]<=[8]}
  %multiply.7837 = bf16[1,14336,4096]{2,1,0} multiply(%param.640, %broadcast.10139)
  %add.6284 = bf16[1,14336,4096]{2,1,0} add(%multiply.7836, %multiply.7837)
  %divide.1532 = bf16[1,14336,4096]{2,1,0} divide(%add.6284, %broadcast.10140)
  %sqrt.155 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1532)
  %add.6285 = bf16[1,14336,4096]{2,1,0} add(%sqrt.155, %broadcast.10141)
  %multiply.7838 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6285)
  %divide.1533 = bf16[1,14336,4096]{2,1,0} divide(%add.6283, %multiply.7838)
  %multiply.7839 = bf16[1,14336,4096]{2,1,0} multiply(%param.236, %broadcast.10135)
  %add.6286 = bf16[1,14336,4096]{2,1,0} add(%divide.1533, %multiply.7839)
  %multiply.7840 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6286)
  %add.6287 = bf16[1,14336,4096]{2,1,0} add(%param.236, %multiply.7840)
  %divide.1534 = bf16[4096]{0} divide(%all-reduce.232, %broadcast.10081)
  %select.2744 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.232, %divide.1534)
  %multiply.7841 = bf16[4096]{0} multiply(%select.2744, %broadcast.10083)
  %param.641 = bf16[4096]{0} parameter(480), sharding={replicated}
  %multiply.7842 = bf16[4096]{0} multiply(%param.641, %broadcast.10085)
  %add.6288 = bf16[4096]{0} add(%multiply.7841, %multiply.7842)
  %multiply.7843 = bf16[4096]{0} multiply(%select.2744, %select.2744)
  %multiply.7844 = bf16[4096]{0} multiply(%multiply.7843, %broadcast.10088)
  %param.642 = bf16[4096]{0} parameter(803), sharding={replicated}
  %multiply.7845 = bf16[4096]{0} multiply(%param.642, %broadcast.10090)
  %add.6289 = bf16[4096]{0} add(%multiply.7844, %multiply.7845)
  %divide.1535 = bf16[4096]{0} divide(%add.6289, %broadcast.10092)
  %sqrt.156 = bf16[4096]{0} sqrt(%divide.1535)
  %add.6290 = bf16[4096]{0} add(%sqrt.156, %broadcast.10094)
  %multiply.7846 = bf16[4096]{0} multiply(%broadcast.10086, %add.6290)
  %divide.1536 = bf16[4096]{0} divide(%add.6288, %multiply.7846)
  %multiply.7847 = bf16[4096]{0} multiply(%param.232, %broadcast.10083)
  %add.6291 = bf16[4096]{0} add(%divide.1536, %multiply.7847)
  %multiply.7848 = bf16[4096]{0} multiply(%broadcast.5338, %add.6291)
  %add.6292 = bf16[4096]{0} add(%param.232, %multiply.7848)
  %divide.1537 = bf16[4096]{0} divide(%all-reduce.233, %broadcast.10081)
  %select.2745 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.233, %divide.1537)
  %multiply.7849 = bf16[4096]{0} multiply(%select.2745, %broadcast.10083)
  %param.643 = bf16[4096]{0} parameter(481), sharding={replicated}
  %multiply.7850 = bf16[4096]{0} multiply(%param.643, %broadcast.10085)
  %add.6293 = bf16[4096]{0} add(%multiply.7849, %multiply.7850)
  %multiply.7851 = bf16[4096]{0} multiply(%select.2745, %select.2745)
  %multiply.7852 = bf16[4096]{0} multiply(%multiply.7851, %broadcast.10088)
  %param.644 = bf16[4096]{0} parameter(804), sharding={replicated}
  %multiply.7853 = bf16[4096]{0} multiply(%param.644, %broadcast.10090)
  %add.6295 = bf16[4096]{0} add(%multiply.7852, %multiply.7853)
  %divide.1538 = bf16[4096]{0} divide(%add.6295, %broadcast.10092)
  %sqrt.157 = bf16[4096]{0} sqrt(%divide.1538)
  %add.6296 = bf16[4096]{0} add(%sqrt.157, %broadcast.10094)
  %multiply.7854 = bf16[4096]{0} multiply(%broadcast.10086, %add.6296)
  %divide.1539 = bf16[4096]{0} divide(%add.6293, %multiply.7854)
  %multiply.7856 = bf16[4096]{0} multiply(%param.227, %broadcast.10083)
  %add.6298 = bf16[4096]{0} add(%divide.1539, %multiply.7856)
  %multiply.7857 = bf16[4096]{0} multiply(%broadcast.5338, %add.6298)
  %add.6299 = bf16[4096]{0} add(%param.227, %multiply.7857)
  %divide.1540 = bf16[512,8,128]{0,2,1} divide(%transpose.380, %broadcast.10162)
  %select.2746 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.380, %divide.1540)
  %multiply.7858 = bf16[512,8,128]{0,2,1} multiply(%select.2746, %broadcast.10163)
  %param.645 = bf16[512,8,128]{2,1,0} parameter(482), sharding={devices=[8,1,1]<=[8]}
  %multiply.7859 = bf16[512,8,128]{2,1,0} multiply(%param.645, %broadcast.10164)
  %add.6301 = bf16[512,8,128]{0,2,1} add(%multiply.7858, %multiply.7859)
  %multiply.7860 = bf16[512,8,128]{0,2,1} multiply(%select.2746, %select.2746)
  %multiply.7861 = bf16[512,8,128]{0,2,1} multiply(%multiply.7860, %broadcast.10166)
  %param.646 = bf16[512,8,128]{2,1,0} parameter(805), sharding={devices=[8,1,1]<=[8]}
  %multiply.7864 = bf16[512,8,128]{2,1,0} multiply(%param.646, %broadcast.10167)
  %add.6302 = bf16[512,8,128]{0,2,1} add(%multiply.7861, %multiply.7864)
  %divide.1541 = bf16[512,8,128]{0,2,1} divide(%add.6302, %broadcast.10168)
  %sqrt.158 = bf16[512,8,128]{0,2,1} sqrt(%divide.1541)
  %add.6303 = bf16[512,8,128]{0,2,1} add(%sqrt.158, %broadcast.10169)
  %multiply.7865 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6303)
  %divide.1542 = bf16[512,8,128]{0,2,1} divide(%add.6301, %multiply.7865)
  %multiply.7866 = bf16[512,8,128]{2,1,0} multiply(%param.229, %broadcast.10163)
  %add.6304 = bf16[512,8,128]{0,2,1} add(%divide.1542, %multiply.7866)
  %multiply.7867 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6304)
  %add.6305 = bf16[512,8,128]{2,1,0} add(%param.229, %multiply.7867)
  %divide.1543 = bf16[32,128,512]{1,0,2} divide(%transpose.381, %broadcast.10172)
  %select.2747 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.381, %divide.1543)
  %multiply.7868 = bf16[32,128,512]{1,0,2} multiply(%select.2747, %broadcast.10173)
  %param.647 = bf16[32,128,512]{2,1,0} parameter(483), sharding={devices=[1,1,8]<=[8]}
  %multiply.7869 = bf16[32,128,512]{2,1,0} multiply(%param.647, %broadcast.10174)
  %add.6306 = bf16[32,128,512]{1,0,2} add(%multiply.7868, %multiply.7869)
  %multiply.7871 = bf16[32,128,512]{1,0,2} multiply(%select.2747, %select.2747)
  %multiply.7872 = bf16[32,128,512]{1,0,2} multiply(%multiply.7871, %broadcast.10176)
  %param.648 = bf16[32,128,512]{2,1,0} parameter(806), sharding={devices=[1,1,8]<=[8]}
  %multiply.7873 = bf16[32,128,512]{2,1,0} multiply(%param.648, %broadcast.10177)
  %add.6307 = bf16[32,128,512]{1,0,2} add(%multiply.7872, %multiply.7873)
  %divide.1544 = bf16[32,128,512]{1,0,2} divide(%add.6307, %broadcast.10178)
  %sqrt.159 = bf16[32,128,512]{1,0,2} sqrt(%divide.1544)
  %add.6308 = bf16[32,128,512]{1,0,2} add(%sqrt.159, %broadcast.10179)
  %multiply.7874 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6308)
  %divide.1545 = bf16[32,128,512]{1,0,2} divide(%add.6306, %multiply.7874)
  %multiply.7875 = bf16[32,128,512]{2,1,0} multiply(%param.231, %broadcast.10173)
  %add.6309 = bf16[32,128,512]{1,0,2} add(%divide.1545, %multiply.7875)
  %multiply.7876 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6309)
  %add.6310 = bf16[32,128,512]{2,1,0} add(%param.231, %multiply.7876)
  %divide.1546 = bf16[512,32,128]{0,2,1} divide(%transpose.382, %broadcast.10182)
  %select.2748 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.382, %divide.1546)
  %multiply.7878 = bf16[512,32,128]{0,2,1} multiply(%select.2748, %broadcast.10183)
  %param.649 = bf16[512,32,128]{2,1,0} parameter(484), sharding={devices=[8,1,1]<=[8]}
  %multiply.7879 = bf16[512,32,128]{2,1,0} multiply(%param.649, %broadcast.10184)
  %add.6311 = bf16[512,32,128]{0,2,1} add(%multiply.7878, %multiply.7879)
  %multiply.7880 = bf16[512,32,128]{0,2,1} multiply(%select.2748, %select.2748)
  %multiply.7881 = bf16[512,32,128]{0,2,1} multiply(%multiply.7880, %broadcast.10186)
  %param.650 = bf16[512,32,128]{2,1,0} parameter(807), sharding={devices=[8,1,1]<=[8]}
  %multiply.7882 = bf16[512,32,128]{2,1,0} multiply(%param.650, %broadcast.10187)
  %add.6312 = bf16[512,32,128]{0,2,1} add(%multiply.7881, %multiply.7882)
  %divide.1547 = bf16[512,32,128]{0,2,1} divide(%add.6312, %broadcast.10188)
  %sqrt.160 = bf16[512,32,128]{0,2,1} sqrt(%divide.1547)
  %add.6313 = bf16[512,32,128]{0,2,1} add(%sqrt.160, %broadcast.10189)
  %multiply.7883 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6313)
  %divide.1548 = bf16[512,32,128]{0,2,1} divide(%add.6311, %multiply.7883)
  %multiply.7884 = bf16[512,32,128]{2,1,0} multiply(%param.228, %broadcast.10183)
  %add.6315 = bf16[512,32,128]{0,2,1} add(%divide.1548, %multiply.7884)
  %multiply.7885 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6315)
  %add.6316 = bf16[512,32,128]{2,1,0} add(%param.228, %multiply.7885)
  %divide.1550 = bf16[512,8,128]{0,2,1} divide(%transpose.383, %broadcast.10162)
  %select.2749 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.383, %divide.1550)
  %multiply.7886 = bf16[512,8,128]{0,2,1} multiply(%select.2749, %broadcast.10163)
  %param.651 = bf16[512,8,128]{2,1,0} parameter(485), sharding={devices=[8,1,1]<=[8]}
  %multiply.7887 = bf16[512,8,128]{2,1,0} multiply(%param.651, %broadcast.10164)
  %add.6317 = bf16[512,8,128]{0,2,1} add(%multiply.7886, %multiply.7887)
  %multiply.7888 = bf16[512,8,128]{0,2,1} multiply(%select.2749, %select.2749)
  %multiply.7889 = bf16[512,8,128]{0,2,1} multiply(%multiply.7888, %broadcast.10166)
  %param.652 = bf16[512,8,128]{2,1,0} parameter(808), sharding={devices=[8,1,1]<=[8]}
  %multiply.7890 = bf16[512,8,128]{2,1,0} multiply(%param.652, %broadcast.10167)
  %add.6318 = bf16[512,8,128]{0,2,1} add(%multiply.7889, %multiply.7890)
  %divide.1551 = bf16[512,8,128]{0,2,1} divide(%add.6318, %broadcast.10168)
  %sqrt.161 = bf16[512,8,128]{0,2,1} sqrt(%divide.1551)
  %add.6319 = bf16[512,8,128]{0,2,1} add(%sqrt.161, %broadcast.10169)
  %multiply.7891 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6319)
  %divide.1552 = bf16[512,8,128]{0,2,1} divide(%add.6317, %multiply.7891)
  %multiply.7892 = bf16[512,8,128]{2,1,0} multiply(%param.230, %broadcast.10163)
  %add.6320 = bf16[512,8,128]{0,2,1} add(%divide.1552, %multiply.7892)
  %multiply.7894 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6320)
  %add.6321 = bf16[512,8,128]{2,1,0} add(%param.230, %multiply.7894)
  %divide.1553 = bf16[512,8]{0,1} divide(%dynamic-slice.2499, %broadcast.10097)
  %select.2750 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2499, %divide.1553)
  %multiply.7895 = bf16[512,8]{0,1} multiply(%select.2750, %broadcast.10098)
  %param.653 = bf16[512,8]{1,0} parameter(486), sharding={devices=[8,1]<=[8]}
  %multiply.7896 = bf16[512,8]{1,0} multiply(%param.653, %broadcast.10099)
  %add.6322 = bf16[512,8]{0,1} add(%multiply.7895, %multiply.7896)
  %multiply.7897 = bf16[512,8]{0,1} multiply(%select.2750, %select.2750)
  %multiply.7898 = bf16[512,8]{0,1} multiply(%multiply.7897, %broadcast.10101)
  %param.654 = bf16[512,8]{1,0} parameter(809), sharding={devices=[8,1]<=[8]}
  %multiply.7899 = bf16[512,8]{1,0} multiply(%param.654, %broadcast.10102)
  %add.6323 = bf16[512,8]{0,1} add(%multiply.7898, %multiply.7899)
  %divide.1554 = bf16[512,8]{0,1} divide(%add.6323, %broadcast.10103)
  %sqrt.162 = bf16[512,8]{0,1} sqrt(%divide.1554)
  %add.6325 = bf16[512,8]{0,1} add(%sqrt.162, %broadcast.10104)
  %multiply.7900 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6325)
  %divide.1555 = bf16[512,8]{0,1} divide(%add.6322, %multiply.7900)
  %multiply.7901 = bf16[512,8]{1,0} multiply(%param.243, %broadcast.10098)
  %add.6326 = bf16[512,8]{0,1} add(%divide.1555, %multiply.7901)
  %multiply.7902 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6326)
  %add.6327 = bf16[512,8]{1,0} add(%param.243, %multiply.7902)
  %divide.1556 = bf16[1,4096,14336]{2,1,0} divide(%copy.4249, %broadcast.10111)
  %select.2751 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4249, %divide.1556)
  %multiply.7904 = bf16[1,4096,14336]{2,1,0} multiply(%select.2751, %broadcast.10112)
  %param.655 = bf16[1,4096,14336]{2,1,0} parameter(487), sharding={devices=[8,1,1]<=[8]}
  %multiply.7905 = bf16[1,4096,14336]{2,1,0} multiply(%param.655, %broadcast.10113)
  %add.6328 = bf16[1,4096,14336]{2,1,0} add(%multiply.7904, %multiply.7905)
  %multiply.7906 = bf16[1,4096,14336]{2,1,0} multiply(%select.2751, %select.2751)
  %multiply.7907 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7906, %broadcast.10115)
  %param.656 = bf16[1,4096,14336]{2,1,0} parameter(810), sharding={devices=[8,1,1]<=[8]}
  %multiply.7908 = bf16[1,4096,14336]{2,1,0} multiply(%param.656, %broadcast.10116)
  %add.6329 = bf16[1,4096,14336]{2,1,0} add(%multiply.7907, %multiply.7908)
  %divide.1557 = bf16[1,4096,14336]{2,1,0} divide(%add.6329, %broadcast.10117)
  %sqrt.163 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1557)
  %add.6330 = bf16[1,4096,14336]{2,1,0} add(%sqrt.163, %broadcast.10119)
  %multiply.7909 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6330)
  %divide.1558 = bf16[1,4096,14336]{2,1,0} divide(%add.6328, %multiply.7909)
  %multiply.7910 = bf16[1,4096,14336]{2,1,0} multiply(%param.244, %broadcast.10112)
  %add.6331 = bf16[1,4096,14336]{2,1,0} add(%divide.1558, %multiply.7910)
  %multiply.7911 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6331)
  %add.6332 = bf16[1,4096,14336]{2,1,0} add(%param.244, %multiply.7911)
  %divide.1560 = bf16[1,4096,14336]{2,1,0} divide(%copy.4250, %broadcast.10111)
  %select.2752 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4250, %divide.1560)
  %multiply.7912 = bf16[1,4096,14336]{2,1,0} multiply(%select.2752, %broadcast.10112)
  %param.657 = bf16[1,4096,14336]{2,1,0} parameter(488), sharding={devices=[8,1,1]<=[8]}
  %multiply.7913 = bf16[1,4096,14336]{2,1,0} multiply(%param.657, %broadcast.10113)
  %add.6333 = bf16[1,4096,14336]{2,1,0} add(%multiply.7912, %multiply.7913)
  %multiply.7914 = bf16[1,4096,14336]{2,1,0} multiply(%select.2752, %select.2752)
  %multiply.7915 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7914, %broadcast.10115)
  %param.658 = bf16[1,4096,14336]{2,1,0} parameter(811), sharding={devices=[8,1,1]<=[8]}
  %multiply.7917 = bf16[1,4096,14336]{2,1,0} multiply(%param.658, %broadcast.10116)
  %add.6334 = bf16[1,4096,14336]{2,1,0} add(%multiply.7915, %multiply.7917)
  %divide.1561 = bf16[1,4096,14336]{2,1,0} divide(%add.6334, %broadcast.10117)
  %sqrt.164 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1561)
  %add.6335 = bf16[1,4096,14336]{2,1,0} add(%sqrt.164, %broadcast.10119)
  %multiply.7918 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6335)
  %divide.1562 = bf16[1,4096,14336]{2,1,0} divide(%add.6333, %multiply.7918)
  %multiply.7919 = bf16[1,4096,14336]{2,1,0} multiply(%param.245, %broadcast.10112)
  %add.6336 = bf16[1,4096,14336]{2,1,0} add(%divide.1562, %multiply.7919)
  %multiply.7920 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6336)
  %add.6337 = bf16[1,4096,14336]{2,1,0} add(%param.245, %multiply.7920)
  %divide.1563 = bf16[1,14336,4096]{2,1,0} divide(%copy.4251, %broadcast.10134)
  %select.2753 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4251, %divide.1563)
  %multiply.7921 = bf16[1,14336,4096]{2,1,0} multiply(%select.2753, %broadcast.10135)
  %param.659 = bf16[1,14336,4096]{2,1,0} parameter(489), sharding={devices=[8,1,1]<=[8]}
  %multiply.7923 = bf16[1,14336,4096]{2,1,0} multiply(%param.659, %broadcast.10136)
  %add.6339 = bf16[1,14336,4096]{2,1,0} add(%multiply.7921, %multiply.7923)
  %multiply.7924 = bf16[1,14336,4096]{2,1,0} multiply(%select.2753, %select.2753)
  %multiply.7925 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.7924, %broadcast.10138)
  %param.660 = bf16[1,14336,4096]{2,1,0} parameter(812), sharding={devices=[8,1,1]<=[8]}
  %multiply.7926 = bf16[1,14336,4096]{2,1,0} multiply(%param.660, %broadcast.10139)
  %add.6340 = bf16[1,14336,4096]{2,1,0} add(%multiply.7925, %multiply.7926)
  %divide.1564 = bf16[1,14336,4096]{2,1,0} divide(%add.6340, %broadcast.10140)
  %sqrt.165 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1564)
  %add.6341 = bf16[1,14336,4096]{2,1,0} add(%sqrt.165, %broadcast.10141)
  %multiply.7927 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6341)
  %divide.1565 = bf16[1,14336,4096]{2,1,0} divide(%add.6339, %multiply.7927)
  %multiply.7928 = bf16[1,14336,4096]{2,1,0} multiply(%param.246, %broadcast.10135)
  %add.6342 = bf16[1,14336,4096]{2,1,0} add(%divide.1565, %multiply.7928)
  %multiply.7929 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6342)
  %add.6343 = bf16[1,14336,4096]{2,1,0} add(%param.246, %multiply.7929)
  %divide.1566 = bf16[4096]{0} divide(%all-reduce.247, %broadcast.10081)
  %select.2754 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.247, %divide.1566)
  %multiply.7930 = bf16[4096]{0} multiply(%select.2754, %broadcast.10083)
  %param.661 = bf16[4096]{0} parameter(490), sharding={replicated}
  %multiply.7932 = bf16[4096]{0} multiply(%param.661, %broadcast.10085)
  %add.6344 = bf16[4096]{0} add(%multiply.7930, %multiply.7932)
  %multiply.7933 = bf16[4096]{0} multiply(%select.2754, %select.2754)
  %multiply.7934 = bf16[4096]{0} multiply(%multiply.7933, %broadcast.10088)
  %param.662 = bf16[4096]{0} parameter(813), sharding={replicated}
  %multiply.7935 = bf16[4096]{0} multiply(%param.662, %broadcast.10090)
  %add.6345 = bf16[4096]{0} add(%multiply.7934, %multiply.7935)
  %divide.1567 = bf16[4096]{0} divide(%add.6345, %broadcast.10092)
  %sqrt.166 = bf16[4096]{0} sqrt(%divide.1567)
  %add.6346 = bf16[4096]{0} add(%sqrt.166, %broadcast.10094)
  %multiply.7936 = bf16[4096]{0} multiply(%broadcast.10086, %add.6346)
  %divide.1568 = bf16[4096]{0} divide(%add.6344, %multiply.7936)
  %multiply.7937 = bf16[4096]{0} multiply(%param.242, %broadcast.10083)
  %add.6348 = bf16[4096]{0} add(%divide.1568, %multiply.7937)
  %multiply.7938 = bf16[4096]{0} multiply(%broadcast.5338, %add.6348)
  %add.6349 = bf16[4096]{0} add(%param.242, %multiply.7938)
  %divide.1569 = bf16[4096]{0} divide(%all-reduce.248, %broadcast.10081)
  %select.2755 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.248, %divide.1569)
  %multiply.7939 = bf16[4096]{0} multiply(%select.2755, %broadcast.10083)
  %param.663 = bf16[4096]{0} parameter(491), sharding={replicated}
  %multiply.7940 = bf16[4096]{0} multiply(%param.663, %broadcast.10085)
  %add.6350 = bf16[4096]{0} add(%multiply.7939, %multiply.7940)
  %multiply.7941 = bf16[4096]{0} multiply(%select.2755, %select.2755)
  %multiply.7942 = bf16[4096]{0} multiply(%multiply.7941, %broadcast.10088)
  %param.664 = bf16[4096]{0} parameter(814), sharding={replicated}
  %multiply.7943 = bf16[4096]{0} multiply(%param.664, %broadcast.10090)
  %add.6351 = bf16[4096]{0} add(%multiply.7942, %multiply.7943)
  %divide.1570 = bf16[4096]{0} divide(%add.6351, %broadcast.10092)
  %sqrt.167 = bf16[4096]{0} sqrt(%divide.1570)
  %add.6352 = bf16[4096]{0} add(%sqrt.167, %broadcast.10094)
  %multiply.7944 = bf16[4096]{0} multiply(%broadcast.10086, %add.6352)
  %divide.1571 = bf16[4096]{0} divide(%add.6350, %multiply.7944)
  %multiply.7945 = bf16[4096]{0} multiply(%param.237, %broadcast.10083)
  %add.6353 = bf16[4096]{0} add(%divide.1571, %multiply.7945)
  %multiply.7946 = bf16[4096]{0} multiply(%broadcast.5338, %add.6353)
  %add.6354 = bf16[4096]{0} add(%param.237, %multiply.7946)
  %divide.1572 = bf16[512,8,128]{0,2,1} divide(%transpose.384, %broadcast.10162)
  %select.2756 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.384, %divide.1572)
  %multiply.7947 = bf16[512,8,128]{0,2,1} multiply(%select.2756, %broadcast.10163)
  %param.665 = bf16[512,8,128]{2,1,0} parameter(492), sharding={devices=[8,1,1]<=[8]}
  %multiply.7948 = bf16[512,8,128]{2,1,0} multiply(%param.665, %broadcast.10164)
  %add.6355 = bf16[512,8,128]{0,2,1} add(%multiply.7947, %multiply.7948)
  %multiply.7949 = bf16[512,8,128]{0,2,1} multiply(%select.2756, %select.2756)
  %multiply.7950 = bf16[512,8,128]{0,2,1} multiply(%multiply.7949, %broadcast.10166)
  %param.666 = bf16[512,8,128]{2,1,0} parameter(815), sharding={devices=[8,1,1]<=[8]}
  %multiply.7951 = bf16[512,8,128]{2,1,0} multiply(%param.666, %broadcast.10167)
  %add.6356 = bf16[512,8,128]{0,2,1} add(%multiply.7950, %multiply.7951)
  %divide.1573 = bf16[512,8,128]{0,2,1} divide(%add.6356, %broadcast.10168)
  %sqrt.168 = bf16[512,8,128]{0,2,1} sqrt(%divide.1573)
  %add.6357 = bf16[512,8,128]{0,2,1} add(%sqrt.168, %broadcast.10169)
  %multiply.7952 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6357)
  %divide.1574 = bf16[512,8,128]{0,2,1} divide(%add.6355, %multiply.7952)
  %multiply.7954 = bf16[512,8,128]{2,1,0} multiply(%param.239, %broadcast.10163)
  %add.6358 = bf16[512,8,128]{0,2,1} add(%divide.1574, %multiply.7954)
  %multiply.7955 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6358)
  %add.6359 = bf16[512,8,128]{2,1,0} add(%param.239, %multiply.7955)
  %divide.1575 = bf16[32,128,512]{1,0,2} divide(%transpose.385, %broadcast.10172)
  %select.2757 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.385, %divide.1575)
  %multiply.7956 = bf16[32,128,512]{1,0,2} multiply(%select.2757, %broadcast.10173)
  %param.667 = bf16[32,128,512]{2,1,0} parameter(493), sharding={devices=[1,1,8]<=[8]}
  %multiply.7958 = bf16[32,128,512]{2,1,0} multiply(%param.667, %broadcast.10174)
  %add.6360 = bf16[32,128,512]{1,0,2} add(%multiply.7956, %multiply.7958)
  %multiply.7959 = bf16[32,128,512]{1,0,2} multiply(%select.2757, %select.2757)
  %multiply.7960 = bf16[32,128,512]{1,0,2} multiply(%multiply.7959, %broadcast.10176)
  %param.668 = bf16[32,128,512]{2,1,0} parameter(816), sharding={devices=[1,1,8]<=[8]}
  %multiply.7961 = bf16[32,128,512]{2,1,0} multiply(%param.668, %broadcast.10177)
  %add.6361 = bf16[32,128,512]{1,0,2} add(%multiply.7960, %multiply.7961)
  %divide.1576 = bf16[32,128,512]{1,0,2} divide(%add.6361, %broadcast.10178)
  %sqrt.169 = bf16[32,128,512]{1,0,2} sqrt(%divide.1576)
  %add.6362 = bf16[32,128,512]{1,0,2} add(%sqrt.169, %broadcast.10179)
  %multiply.7963 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6362)
  %divide.1577 = bf16[32,128,512]{1,0,2} divide(%add.6360, %multiply.7963)
  %multiply.7964 = bf16[32,128,512]{2,1,0} multiply(%param.241, %broadcast.10173)
  %add.6363 = bf16[32,128,512]{1,0,2} add(%divide.1577, %multiply.7964)
  %multiply.7965 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6363)
  %add.6364 = bf16[32,128,512]{2,1,0} add(%param.241, %multiply.7965)
  %divide.1578 = bf16[512,32,128]{0,2,1} divide(%transpose.386, %broadcast.10182)
  %select.2758 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.386, %divide.1578)
  %multiply.7967 = bf16[512,32,128]{0,2,1} multiply(%select.2758, %broadcast.10183)
  %param.669 = bf16[512,32,128]{2,1,0} parameter(494), sharding={devices=[8,1,1]<=[8]}
  %multiply.7968 = bf16[512,32,128]{2,1,0} multiply(%param.669, %broadcast.10184)
  %add.6365 = bf16[512,32,128]{0,2,1} add(%multiply.7967, %multiply.7968)
  %multiply.7969 = bf16[512,32,128]{0,2,1} multiply(%select.2758, %select.2758)
  %multiply.7970 = bf16[512,32,128]{0,2,1} multiply(%multiply.7969, %broadcast.10186)
  %param.670 = bf16[512,32,128]{2,1,0} parameter(817), sharding={devices=[8,1,1]<=[8]}
  %multiply.7972 = bf16[512,32,128]{2,1,0} multiply(%param.670, %broadcast.10187)
  %add.6366 = bf16[512,32,128]{0,2,1} add(%multiply.7970, %multiply.7972)
  %divide.1579 = bf16[512,32,128]{0,2,1} divide(%add.6366, %broadcast.10188)
  %sqrt.170 = bf16[512,32,128]{0,2,1} sqrt(%divide.1579)
  %add.6367 = bf16[512,32,128]{0,2,1} add(%sqrt.170, %broadcast.10189)
  %multiply.7973 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6367)
  %divide.1580 = bf16[512,32,128]{0,2,1} divide(%add.6365, %multiply.7973)
  %multiply.7974 = bf16[512,32,128]{2,1,0} multiply(%param.238, %broadcast.10183)
  %add.6368 = bf16[512,32,128]{0,2,1} add(%divide.1580, %multiply.7974)
  %multiply.7975 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6368)
  %add.6369 = bf16[512,32,128]{2,1,0} add(%param.238, %multiply.7975)
  %divide.1581 = bf16[512,8,128]{0,2,1} divide(%transpose.387, %broadcast.10162)
  %select.2759 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.387, %divide.1581)
  %multiply.7976 = bf16[512,8,128]{0,2,1} multiply(%select.2759, %broadcast.10163)
  %param.671 = bf16[512,8,128]{2,1,0} parameter(495), sharding={devices=[8,1,1]<=[8]}
  %multiply.7977 = bf16[512,8,128]{2,1,0} multiply(%param.671, %broadcast.10164)
  %add.6370 = bf16[512,8,128]{0,2,1} add(%multiply.7976, %multiply.7977)
  %multiply.7978 = bf16[512,8,128]{0,2,1} multiply(%select.2759, %select.2759)
  %multiply.7979 = bf16[512,8,128]{0,2,1} multiply(%multiply.7978, %broadcast.10166)
  %param.672 = bf16[512,8,128]{2,1,0} parameter(818), sharding={devices=[8,1,1]<=[8]}
  %multiply.7980 = bf16[512,8,128]{2,1,0} multiply(%param.672, %broadcast.10167)
  %add.6371 = bf16[512,8,128]{0,2,1} add(%multiply.7979, %multiply.7980)
  %divide.1582 = bf16[512,8,128]{0,2,1} divide(%add.6371, %broadcast.10168)
  %sqrt.171 = bf16[512,8,128]{0,2,1} sqrt(%divide.1582)
  %add.6372 = bf16[512,8,128]{0,2,1} add(%sqrt.171, %broadcast.10169)
  %multiply.7981 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6372)
  %divide.1583 = bf16[512,8,128]{0,2,1} divide(%add.6370, %multiply.7981)
  %multiply.7982 = bf16[512,8,128]{2,1,0} multiply(%param.240, %broadcast.10163)
  %add.6373 = bf16[512,8,128]{0,2,1} add(%divide.1583, %multiply.7982)
  %multiply.7983 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6373)
  %add.6374 = bf16[512,8,128]{2,1,0} add(%param.240, %multiply.7983)
  %divide.1584 = bf16[512,8]{0,1} divide(%dynamic-slice.2509, %broadcast.10097)
  %select.2760 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2509, %divide.1584)
  %multiply.7984 = bf16[512,8]{0,1} multiply(%select.2760, %broadcast.10098)
  %param.673 = bf16[512,8]{1,0} parameter(496), sharding={devices=[8,1]<=[8]}
  %multiply.7985 = bf16[512,8]{1,0} multiply(%param.673, %broadcast.10099)
  %add.6375 = bf16[512,8]{0,1} add(%multiply.7984, %multiply.7985)
  %multiply.7986 = bf16[512,8]{0,1} multiply(%select.2760, %select.2760)
  %multiply.7987 = bf16[512,8]{0,1} multiply(%multiply.7986, %broadcast.10101)
  %param.674 = bf16[512,8]{1,0} parameter(819), sharding={devices=[8,1]<=[8]}
  %multiply.7988 = bf16[512,8]{1,0} multiply(%param.674, %broadcast.10102)
  %add.6376 = bf16[512,8]{0,1} add(%multiply.7987, %multiply.7988)
  %divide.1585 = bf16[512,8]{0,1} divide(%add.6376, %broadcast.10103)
  %sqrt.172 = bf16[512,8]{0,1} sqrt(%divide.1585)
  %add.6377 = bf16[512,8]{0,1} add(%sqrt.172, %broadcast.10104)
  %multiply.7989 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6377)
  %divide.1586 = bf16[512,8]{0,1} divide(%add.6375, %multiply.7989)
  %multiply.7990 = bf16[512,8]{1,0} multiply(%param.253, %broadcast.10098)
  %add.6378 = bf16[512,8]{0,1} add(%divide.1586, %multiply.7990)
  %multiply.7991 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6378)
  %add.6380 = bf16[512,8]{1,0} add(%param.253, %multiply.7991)
  %divide.1587 = bf16[1,4096,14336]{2,1,0} divide(%copy.4252, %broadcast.10111)
  %select.2761 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4252, %divide.1587)
  %multiply.7992 = bf16[1,4096,14336]{2,1,0} multiply(%select.2761, %broadcast.10112)
  %param.675 = bf16[1,4096,14336]{2,1,0} parameter(497), sharding={devices=[8,1,1]<=[8]}
  %multiply.7994 = bf16[1,4096,14336]{2,1,0} multiply(%param.675, %broadcast.10113)
  %add.6381 = bf16[1,4096,14336]{2,1,0} add(%multiply.7992, %multiply.7994)
  %multiply.7995 = bf16[1,4096,14336]{2,1,0} multiply(%select.2761, %select.2761)
  %multiply.7996 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.7995, %broadcast.10115)
  %param.676 = bf16[1,4096,14336]{2,1,0} parameter(820), sharding={devices=[8,1,1]<=[8]}
  %multiply.7998 = bf16[1,4096,14336]{2,1,0} multiply(%param.676, %broadcast.10116)
  %add.6382 = bf16[1,4096,14336]{2,1,0} add(%multiply.7996, %multiply.7998)
  %divide.1588 = bf16[1,4096,14336]{2,1,0} divide(%add.6382, %broadcast.10117)
  %sqrt.173 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1588)
  %add.6383 = bf16[1,4096,14336]{2,1,0} add(%sqrt.173, %broadcast.10119)
  %multiply.7999 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6383)
  %divide.1590 = bf16[1,4096,14336]{2,1,0} divide(%add.6381, %multiply.7999)
  %multiply.8000 = bf16[1,4096,14336]{2,1,0} multiply(%param.254, %broadcast.10112)
  %add.6384 = bf16[1,4096,14336]{2,1,0} add(%divide.1590, %multiply.8000)
  %multiply.8001 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6384)
  %add.6385 = bf16[1,4096,14336]{2,1,0} add(%param.254, %multiply.8001)
  %divide.1591 = bf16[1,4096,14336]{2,1,0} divide(%copy.4253, %broadcast.10111)
  %select.2762 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4253, %divide.1591)
  %multiply.8003 = bf16[1,4096,14336]{2,1,0} multiply(%select.2762, %broadcast.10112)
  %param.677 = bf16[1,4096,14336]{2,1,0} parameter(498), sharding={devices=[8,1,1]<=[8]}
  %multiply.8004 = bf16[1,4096,14336]{2,1,0} multiply(%param.677, %broadcast.10113)
  %add.6387 = bf16[1,4096,14336]{2,1,0} add(%multiply.8003, %multiply.8004)
  %multiply.8005 = bf16[1,4096,14336]{2,1,0} multiply(%select.2762, %select.2762)
  %multiply.8007 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8005, %broadcast.10115)
  %param.678 = bf16[1,4096,14336]{2,1,0} parameter(821), sharding={devices=[8,1,1]<=[8]}
  %multiply.8008 = bf16[1,4096,14336]{2,1,0} multiply(%param.678, %broadcast.10116)
  %add.6388 = bf16[1,4096,14336]{2,1,0} add(%multiply.8007, %multiply.8008)
  %divide.1592 = bf16[1,4096,14336]{2,1,0} divide(%add.6388, %broadcast.10117)
  %sqrt.174 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1592)
  %add.6389 = bf16[1,4096,14336]{2,1,0} add(%sqrt.174, %broadcast.10119)
  %multiply.8009 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6389)
  %divide.1593 = bf16[1,4096,14336]{2,1,0} divide(%add.6387, %multiply.8009)
  %multiply.8010 = bf16[1,4096,14336]{2,1,0} multiply(%param.255, %broadcast.10112)
  %add.6390 = bf16[1,4096,14336]{2,1,0} add(%divide.1593, %multiply.8010)
  %multiply.8011 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6390)
  %add.6392 = bf16[1,4096,14336]{2,1,0} add(%param.255, %multiply.8011)
  %divide.1594 = bf16[1,14336,4096]{2,1,0} divide(%copy.4254, %broadcast.10134)
  %select.2763 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4254, %divide.1594)
  %multiply.8012 = bf16[1,14336,4096]{2,1,0} multiply(%select.2763, %broadcast.10135)
  %param.679 = bf16[1,14336,4096]{2,1,0} parameter(499), sharding={devices=[8,1,1]<=[8]}
  %multiply.8013 = bf16[1,14336,4096]{2,1,0} multiply(%param.679, %broadcast.10136)
  %add.6393 = bf16[1,14336,4096]{2,1,0} add(%multiply.8012, %multiply.8013)
  %multiply.8014 = bf16[1,14336,4096]{2,1,0} multiply(%select.2763, %select.2763)
  %multiply.8015 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8014, %broadcast.10138)
  %param.680 = bf16[1,14336,4096]{2,1,0} parameter(822), sharding={devices=[8,1,1]<=[8]}
  %multiply.8016 = bf16[1,14336,4096]{2,1,0} multiply(%param.680, %broadcast.10139)
  %add.6394 = bf16[1,14336,4096]{2,1,0} add(%multiply.8015, %multiply.8016)
  %divide.1595 = bf16[1,14336,4096]{2,1,0} divide(%add.6394, %broadcast.10140)
  %sqrt.175 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1595)
  %add.6395 = bf16[1,14336,4096]{2,1,0} add(%sqrt.175, %broadcast.10141)
  %multiply.8017 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6395)
  %divide.1596 = bf16[1,14336,4096]{2,1,0} divide(%add.6393, %multiply.8017)
  %multiply.8018 = bf16[1,14336,4096]{2,1,0} multiply(%param.256, %broadcast.10135)
  %add.6396 = bf16[1,14336,4096]{2,1,0} add(%divide.1596, %multiply.8018)
  %multiply.8019 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6396)
  %add.6397 = bf16[1,14336,4096]{2,1,0} add(%param.256, %multiply.8019)
  %divide.1597 = bf16[4096]{0} divide(%all-reduce.262, %broadcast.10081)
  %select.2764 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.262, %divide.1597)
  %multiply.8020 = bf16[4096]{0} multiply(%select.2764, %broadcast.10083)
  %param.681 = bf16[4096]{0} parameter(500), sharding={replicated}
  %multiply.8021 = bf16[4096]{0} multiply(%param.681, %broadcast.10085)
  %add.6398 = bf16[4096]{0} add(%multiply.8020, %multiply.8021)
  %multiply.8022 = bf16[4096]{0} multiply(%select.2764, %select.2764)
  %multiply.8023 = bf16[4096]{0} multiply(%multiply.8022, %broadcast.10088)
  %param.682 = bf16[4096]{0} parameter(823), sharding={replicated}
  %multiply.8024 = bf16[4096]{0} multiply(%param.682, %broadcast.10090)
  %add.6399 = bf16[4096]{0} add(%multiply.8023, %multiply.8024)
  %divide.1598 = bf16[4096]{0} divide(%add.6399, %broadcast.10092)
  %sqrt.176 = bf16[4096]{0} sqrt(%divide.1598)
  %add.6400 = bf16[4096]{0} add(%sqrt.176, %broadcast.10094)
  %multiply.8025 = bf16[4096]{0} multiply(%broadcast.10086, %add.6400)
  %divide.1600 = bf16[4096]{0} divide(%add.6398, %multiply.8025)
  %multiply.8026 = bf16[4096]{0} multiply(%param.252, %broadcast.10083)
  %add.6401 = bf16[4096]{0} add(%divide.1600, %multiply.8026)
  %multiply.8027 = bf16[4096]{0} multiply(%broadcast.5338, %add.6401)
  %add.6402 = bf16[4096]{0} add(%param.252, %multiply.8027)
  %divide.1601 = bf16[4096]{0} divide(%all-reduce.263, %broadcast.10081)
  %select.2765 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.263, %divide.1601)
  %multiply.8028 = bf16[4096]{0} multiply(%select.2765, %broadcast.10083)
  %param.683 = bf16[4096]{0} parameter(501), sharding={replicated}
  %multiply.8029 = bf16[4096]{0} multiply(%param.683, %broadcast.10085)
  %add.6403 = bf16[4096]{0} add(%multiply.8028, %multiply.8029)
  %multiply.8030 = bf16[4096]{0} multiply(%select.2765, %select.2765)
  %multiply.8031 = bf16[4096]{0} multiply(%multiply.8030, %broadcast.10088)
  %param.684 = bf16[4096]{0} parameter(824), sharding={replicated}
  %multiply.8032 = bf16[4096]{0} multiply(%param.684, %broadcast.10090)
  %add.6404 = bf16[4096]{0} add(%multiply.8031, %multiply.8032)
  %divide.1602 = bf16[4096]{0} divide(%add.6404, %broadcast.10092)
  %sqrt.177 = bf16[4096]{0} sqrt(%divide.1602)
  %add.6405 = bf16[4096]{0} add(%sqrt.177, %broadcast.10094)
  %multiply.8033 = bf16[4096]{0} multiply(%broadcast.10086, %add.6405)
  %divide.1603 = bf16[4096]{0} divide(%add.6403, %multiply.8033)
  %multiply.8034 = bf16[4096]{0} multiply(%param.247, %broadcast.10083)
  %add.6406 = bf16[4096]{0} add(%divide.1603, %multiply.8034)
  %multiply.8035 = bf16[4096]{0} multiply(%broadcast.5338, %add.6406)
  %add.6407 = bf16[4096]{0} add(%param.247, %multiply.8035)
  %divide.1604 = bf16[512,8,128]{0,2,1} divide(%transpose.388, %broadcast.10162)
  %select.2766 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.388, %divide.1604)
  %multiply.8036 = bf16[512,8,128]{0,2,1} multiply(%select.2766, %broadcast.10163)
  %param.685 = bf16[512,8,128]{2,1,0} parameter(502), sharding={devices=[8,1,1]<=[8]}
  %multiply.8037 = bf16[512,8,128]{2,1,0} multiply(%param.685, %broadcast.10164)
  %add.6408 = bf16[512,8,128]{0,2,1} add(%multiply.8036, %multiply.8037)
  %multiply.8038 = bf16[512,8,128]{0,2,1} multiply(%select.2766, %select.2766)
  %multiply.8039 = bf16[512,8,128]{0,2,1} multiply(%multiply.8038, %broadcast.10166)
  %param.686 = bf16[512,8,128]{2,1,0} parameter(825), sharding={devices=[8,1,1]<=[8]}
  %multiply.8040 = bf16[512,8,128]{2,1,0} multiply(%param.686, %broadcast.10167)
  %add.6409 = bf16[512,8,128]{0,2,1} add(%multiply.8039, %multiply.8040)
  %divide.1605 = bf16[512,8,128]{0,2,1} divide(%add.6409, %broadcast.10168)
  %sqrt.178 = bf16[512,8,128]{0,2,1} sqrt(%divide.1605)
  %add.6410 = bf16[512,8,128]{0,2,1} add(%sqrt.178, %broadcast.10169)
  %multiply.8041 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6410)
  %divide.1606 = bf16[512,8,128]{0,2,1} divide(%add.6408, %multiply.8041)
  %multiply.8042 = bf16[512,8,128]{2,1,0} multiply(%param.249, %broadcast.10163)
  %add.6411 = bf16[512,8,128]{0,2,1} add(%divide.1606, %multiply.8042)
  %multiply.8043 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6411)
  %add.6412 = bf16[512,8,128]{2,1,0} add(%param.249, %multiply.8043)
  %divide.1607 = bf16[32,128,512]{1,0,2} divide(%transpose.389, %broadcast.10172)
  %select.2767 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.389, %divide.1607)
  %multiply.8044 = bf16[32,128,512]{1,0,2} multiply(%select.2767, %broadcast.10173)
  %param.687 = bf16[32,128,512]{2,1,0} parameter(503), sharding={devices=[1,1,8]<=[8]}
  %multiply.8045 = bf16[32,128,512]{2,1,0} multiply(%param.687, %broadcast.10174)
  %add.6413 = bf16[32,128,512]{1,0,2} add(%multiply.8044, %multiply.8045)
  %multiply.8046 = bf16[32,128,512]{1,0,2} multiply(%select.2767, %select.2767)
  %multiply.8047 = bf16[32,128,512]{1,0,2} multiply(%multiply.8046, %broadcast.10176)
  %param.688 = bf16[32,128,512]{2,1,0} parameter(826), sharding={devices=[1,1,8]<=[8]}
  %multiply.8048 = bf16[32,128,512]{2,1,0} multiply(%param.688, %broadcast.10177)
  %add.6414 = bf16[32,128,512]{1,0,2} add(%multiply.8047, %multiply.8048)
  %divide.1608 = bf16[32,128,512]{1,0,2} divide(%add.6414, %broadcast.10178)
  %sqrt.179 = bf16[32,128,512]{1,0,2} sqrt(%divide.1608)
  %add.6415 = bf16[32,128,512]{1,0,2} add(%sqrt.179, %broadcast.10179)
  %multiply.8049 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6415)
  %divide.1609 = bf16[32,128,512]{1,0,2} divide(%add.6413, %multiply.8049)
  %multiply.8050 = bf16[32,128,512]{2,1,0} multiply(%param.251, %broadcast.10173)
  %add.6416 = bf16[32,128,512]{1,0,2} add(%divide.1609, %multiply.8050)
  %multiply.8051 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6416)
  %add.6417 = bf16[32,128,512]{2,1,0} add(%param.251, %multiply.8051)
  %divide.1610 = bf16[512,32,128]{0,2,1} divide(%transpose.390, %broadcast.10182)
  %select.2768 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.390, %divide.1610)
  %multiply.8052 = bf16[512,32,128]{0,2,1} multiply(%select.2768, %broadcast.10183)
  %param.689 = bf16[512,32,128]{2,1,0} parameter(504), sharding={devices=[8,1,1]<=[8]}
  %multiply.8053 = bf16[512,32,128]{2,1,0} multiply(%param.689, %broadcast.10184)
  %add.6418 = bf16[512,32,128]{0,2,1} add(%multiply.8052, %multiply.8053)
  %multiply.8054 = bf16[512,32,128]{0,2,1} multiply(%select.2768, %select.2768)
  %multiply.8055 = bf16[512,32,128]{0,2,1} multiply(%multiply.8054, %broadcast.10186)
  %param.690 = bf16[512,32,128]{2,1,0} parameter(827), sharding={devices=[8,1,1]<=[8]}
  %multiply.8056 = bf16[512,32,128]{2,1,0} multiply(%param.690, %broadcast.10187)
  %add.6419 = bf16[512,32,128]{0,2,1} add(%multiply.8055, %multiply.8056)
  %divide.1611 = bf16[512,32,128]{0,2,1} divide(%add.6419, %broadcast.10188)
  %sqrt.180 = bf16[512,32,128]{0,2,1} sqrt(%divide.1611)
  %add.6420 = bf16[512,32,128]{0,2,1} add(%sqrt.180, %broadcast.10189)
  %multiply.8057 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6420)
  %divide.1612 = bf16[512,32,128]{0,2,1} divide(%add.6418, %multiply.8057)
  %multiply.8058 = bf16[512,32,128]{2,1,0} multiply(%param.248, %broadcast.10183)
  %add.6421 = bf16[512,32,128]{0,2,1} add(%divide.1612, %multiply.8058)
  %multiply.8059 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6421)
  %add.6422 = bf16[512,32,128]{2,1,0} add(%param.248, %multiply.8059)
  %divide.1613 = bf16[512,8,128]{0,2,1} divide(%transpose.391, %broadcast.10162)
  %select.2769 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.391, %divide.1613)
  %multiply.8060 = bf16[512,8,128]{0,2,1} multiply(%select.2769, %broadcast.10163)
  %param.691 = bf16[512,8,128]{2,1,0} parameter(505), sharding={devices=[8,1,1]<=[8]}
  %multiply.8061 = bf16[512,8,128]{2,1,0} multiply(%param.691, %broadcast.10164)
  %add.6423 = bf16[512,8,128]{0,2,1} add(%multiply.8060, %multiply.8061)
  %multiply.8062 = bf16[512,8,128]{0,2,1} multiply(%select.2769, %select.2769)
  %multiply.8064 = bf16[512,8,128]{0,2,1} multiply(%multiply.8062, %broadcast.10166)
  %param.692 = bf16[512,8,128]{2,1,0} parameter(828), sharding={devices=[8,1,1]<=[8]}
  %multiply.8065 = bf16[512,8,128]{2,1,0} multiply(%param.692, %broadcast.10167)
  %add.6424 = bf16[512,8,128]{0,2,1} add(%multiply.8064, %multiply.8065)
  %divide.1614 = bf16[512,8,128]{0,2,1} divide(%add.6424, %broadcast.10168)
  %sqrt.181 = bf16[512,8,128]{0,2,1} sqrt(%divide.1614)
  %add.6425 = bf16[512,8,128]{0,2,1} add(%sqrt.181, %broadcast.10169)
  %multiply.8066 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6425)
  %divide.1615 = bf16[512,8,128]{0,2,1} divide(%add.6423, %multiply.8066)
  %multiply.8067 = bf16[512,8,128]{2,1,0} multiply(%param.250, %broadcast.10163)
  %add.6426 = bf16[512,8,128]{0,2,1} add(%divide.1615, %multiply.8067)
  %multiply.8068 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6426)
  %add.6427 = bf16[512,8,128]{2,1,0} add(%param.250, %multiply.8068)
  %divide.1616 = bf16[512,8]{0,1} divide(%dynamic-slice.2519, %broadcast.10097)
  %select.2770 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2519, %divide.1616)
  %multiply.8069 = bf16[512,8]{0,1} multiply(%select.2770, %broadcast.10098)
  %param.693 = bf16[512,8]{1,0} parameter(506), sharding={devices=[8,1]<=[8]}
  %multiply.8070 = bf16[512,8]{1,0} multiply(%param.693, %broadcast.10099)
  %add.6428 = bf16[512,8]{0,1} add(%multiply.8069, %multiply.8070)
  %multiply.8071 = bf16[512,8]{0,1} multiply(%select.2770, %select.2770)
  %multiply.8072 = bf16[512,8]{0,1} multiply(%multiply.8071, %broadcast.10101)
  %param.694 = bf16[512,8]{1,0} parameter(829), sharding={devices=[8,1]<=[8]}
  %multiply.8073 = bf16[512,8]{1,0} multiply(%param.694, %broadcast.10102)
  %add.6429 = bf16[512,8]{0,1} add(%multiply.8072, %multiply.8073)
  %divide.1617 = bf16[512,8]{0,1} divide(%add.6429, %broadcast.10103)
  %sqrt.182 = bf16[512,8]{0,1} sqrt(%divide.1617)
  %add.6430 = bf16[512,8]{0,1} add(%sqrt.182, %broadcast.10104)
  %multiply.8074 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6430)
  %divide.1618 = bf16[512,8]{0,1} divide(%add.6428, %multiply.8074)
  %multiply.8075 = bf16[512,8]{1,0} multiply(%param.263, %broadcast.10098)
  %add.6431 = bf16[512,8]{0,1} add(%divide.1618, %multiply.8075)
  %multiply.8077 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6431)
  %add.6432 = bf16[512,8]{1,0} add(%param.263, %multiply.8077)
  %divide.1619 = bf16[1,4096,14336]{2,1,0} divide(%copy.4255, %broadcast.10111)
  %select.2771 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4255, %divide.1619)
  %multiply.8078 = bf16[1,4096,14336]{2,1,0} multiply(%select.2771, %broadcast.10112)
  %param.695 = bf16[1,4096,14336]{2,1,0} parameter(507), sharding={devices=[8,1,1]<=[8]}
  %multiply.8079 = bf16[1,4096,14336]{2,1,0} multiply(%param.695, %broadcast.10113)
  %add.6433 = bf16[1,4096,14336]{2,1,0} add(%multiply.8078, %multiply.8079)
  %multiply.8080 = bf16[1,4096,14336]{2,1,0} multiply(%select.2771, %select.2771)
  %multiply.8081 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8080, %broadcast.10115)
  %param.696 = bf16[1,4096,14336]{2,1,0} parameter(830), sharding={devices=[8,1,1]<=[8]}
  %multiply.8083 = bf16[1,4096,14336]{2,1,0} multiply(%param.696, %broadcast.10116)
  %add.6434 = bf16[1,4096,14336]{2,1,0} add(%multiply.8081, %multiply.8083)
  %divide.1620 = bf16[1,4096,14336]{2,1,0} divide(%add.6434, %broadcast.10117)
  %sqrt.183 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1620)
  %add.6435 = bf16[1,4096,14336]{2,1,0} add(%sqrt.183, %broadcast.10119)
  %multiply.8084 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6435)
  %divide.1621 = bf16[1,4096,14336]{2,1,0} divide(%add.6433, %multiply.8084)
  %multiply.8085 = bf16[1,4096,14336]{2,1,0} multiply(%param.264, %broadcast.10112)
  %add.6436 = bf16[1,4096,14336]{2,1,0} add(%divide.1621, %multiply.8085)
  %multiply.8086 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6436)
  %add.6437 = bf16[1,4096,14336]{2,1,0} add(%param.264, %multiply.8086)
  %divide.1622 = bf16[1,4096,14336]{2,1,0} divide(%copy.4256, %broadcast.10111)
  %select.2772 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4256, %divide.1622)
  %multiply.8087 = bf16[1,4096,14336]{2,1,0} multiply(%select.2772, %broadcast.10112)
  %param.697 = bf16[1,4096,14336]{2,1,0} parameter(508), sharding={devices=[8,1,1]<=[8]}
  %multiply.8088 = bf16[1,4096,14336]{2,1,0} multiply(%param.697, %broadcast.10113)
  %add.6438 = bf16[1,4096,14336]{2,1,0} add(%multiply.8087, %multiply.8088)
  %multiply.8089 = bf16[1,4096,14336]{2,1,0} multiply(%select.2772, %select.2772)
  %multiply.8090 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8089, %broadcast.10115)
  %param.698 = bf16[1,4096,14336]{2,1,0} parameter(831), sharding={devices=[8,1,1]<=[8]}
  %multiply.8091 = bf16[1,4096,14336]{2,1,0} multiply(%param.698, %broadcast.10116)
  %add.6439 = bf16[1,4096,14336]{2,1,0} add(%multiply.8090, %multiply.8091)
  %divide.1623 = bf16[1,4096,14336]{2,1,0} divide(%add.6439, %broadcast.10117)
  %sqrt.184 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1623)
  %add.6440 = bf16[1,4096,14336]{2,1,0} add(%sqrt.184, %broadcast.10119)
  %multiply.8092 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6440)
  %divide.1624 = bf16[1,4096,14336]{2,1,0} divide(%add.6438, %multiply.8092)
  %multiply.8093 = bf16[1,4096,14336]{2,1,0} multiply(%param.265, %broadcast.10112)
  %add.6441 = bf16[1,4096,14336]{2,1,0} add(%divide.1624, %multiply.8093)
  %multiply.8094 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6441)
  %add.6442 = bf16[1,4096,14336]{2,1,0} add(%param.265, %multiply.8094)
  %divide.1625 = bf16[1,14336,4096]{2,1,0} divide(%copy.4257, %broadcast.10134)
  %select.2773 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4257, %divide.1625)
  %multiply.8095 = bf16[1,14336,4096]{2,1,0} multiply(%select.2773, %broadcast.10135)
  %param.699 = bf16[1,14336,4096]{2,1,0} parameter(509), sharding={devices=[8,1,1]<=[8]}
  %multiply.8096 = bf16[1,14336,4096]{2,1,0} multiply(%param.699, %broadcast.10136)
  %add.6443 = bf16[1,14336,4096]{2,1,0} add(%multiply.8095, %multiply.8096)
  %multiply.8097 = bf16[1,14336,4096]{2,1,0} multiply(%select.2773, %select.2773)
  %multiply.8098 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8097, %broadcast.10138)
  %param.700 = bf16[1,14336,4096]{2,1,0} parameter(832), sharding={devices=[8,1,1]<=[8]}
  %multiply.8099 = bf16[1,14336,4096]{2,1,0} multiply(%param.700, %broadcast.10139)
  %add.6444 = bf16[1,14336,4096]{2,1,0} add(%multiply.8098, %multiply.8099)
  %divide.1626 = bf16[1,14336,4096]{2,1,0} divide(%add.6444, %broadcast.10140)
  %sqrt.185 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1626)
  %add.6445 = bf16[1,14336,4096]{2,1,0} add(%sqrt.185, %broadcast.10141)
  %multiply.8100 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6445)
  %divide.1627 = bf16[1,14336,4096]{2,1,0} divide(%add.6443, %multiply.8100)
  %multiply.8101 = bf16[1,14336,4096]{2,1,0} multiply(%param.266, %broadcast.10135)
  %add.6446 = bf16[1,14336,4096]{2,1,0} add(%divide.1627, %multiply.8101)
  %multiply.8102 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6446)
  %add.6448 = bf16[1,14336,4096]{2,1,0} add(%param.266, %multiply.8102)
  %divide.1628 = bf16[4096]{0} divide(%all-reduce.277, %broadcast.10081)
  %select.2774 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.277, %divide.1628)
  %multiply.8103 = bf16[4096]{0} multiply(%select.2774, %broadcast.10083)
  %param.701 = bf16[4096]{0} parameter(510), sharding={replicated}
  %multiply.8104 = bf16[4096]{0} multiply(%param.701, %broadcast.10085)
  %add.6449 = bf16[4096]{0} add(%multiply.8103, %multiply.8104)
  %multiply.8105 = bf16[4096]{0} multiply(%select.2774, %select.2774)
  %multiply.8106 = bf16[4096]{0} multiply(%multiply.8105, %broadcast.10088)
  %param.702 = bf16[4096]{0} parameter(833), sharding={replicated}
  %multiply.8107 = bf16[4096]{0} multiply(%param.702, %broadcast.10090)
  %add.6450 = bf16[4096]{0} add(%multiply.8106, %multiply.8107)
  %divide.1629 = bf16[4096]{0} divide(%add.6450, %broadcast.10092)
  %sqrt.186 = bf16[4096]{0} sqrt(%divide.1629)
  %add.6451 = bf16[4096]{0} add(%sqrt.186, %broadcast.10094)
  %multiply.8108 = bf16[4096]{0} multiply(%broadcast.10086, %add.6451)
  %divide.1630 = bf16[4096]{0} divide(%add.6449, %multiply.8108)
  %multiply.8109 = bf16[4096]{0} multiply(%param.262, %broadcast.10083)
  %add.6452 = bf16[4096]{0} add(%divide.1630, %multiply.8109)
  %multiply.8110 = bf16[4096]{0} multiply(%broadcast.5338, %add.6452)
  %add.6453 = bf16[4096]{0} add(%param.262, %multiply.8110)
  %divide.1631 = bf16[4096]{0} divide(%all-reduce.278, %broadcast.10081)
  %select.2775 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.278, %divide.1631)
  %multiply.8111 = bf16[4096]{0} multiply(%select.2775, %broadcast.10083)
  %param.703 = bf16[4096]{0} parameter(511), sharding={replicated}
  %multiply.8112 = bf16[4096]{0} multiply(%param.703, %broadcast.10085)
  %add.6454 = bf16[4096]{0} add(%multiply.8111, %multiply.8112)
  %multiply.8113 = bf16[4096]{0} multiply(%select.2775, %select.2775)
  %multiply.8114 = bf16[4096]{0} multiply(%multiply.8113, %broadcast.10088)
  %param.704 = bf16[4096]{0} parameter(834), sharding={replicated}
  %multiply.8115 = bf16[4096]{0} multiply(%param.704, %broadcast.10090)
  %add.6455 = bf16[4096]{0} add(%multiply.8114, %multiply.8115)
  %divide.1632 = bf16[4096]{0} divide(%add.6455, %broadcast.10092)
  %sqrt.187 = bf16[4096]{0} sqrt(%divide.1632)
  %add.6456 = bf16[4096]{0} add(%sqrt.187, %broadcast.10094)
  %multiply.8116 = bf16[4096]{0} multiply(%broadcast.10086, %add.6456)
  %divide.1633 = bf16[4096]{0} divide(%add.6454, %multiply.8116)
  %multiply.8117 = bf16[4096]{0} multiply(%param.257, %broadcast.10083)
  %add.6457 = bf16[4096]{0} add(%divide.1633, %multiply.8117)
  %multiply.8118 = bf16[4096]{0} multiply(%broadcast.5338, %add.6457)
  %add.6458 = bf16[4096]{0} add(%param.257, %multiply.8118)
  %divide.1634 = bf16[512,8,128]{0,2,1} divide(%transpose.392, %broadcast.10162)
  %select.2776 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.392, %divide.1634)
  %multiply.8119 = bf16[512,8,128]{0,2,1} multiply(%select.2776, %broadcast.10163)
  %param.705 = bf16[512,8,128]{2,1,0} parameter(512), sharding={devices=[8,1,1]<=[8]}
  %multiply.8120 = bf16[512,8,128]{2,1,0} multiply(%param.705, %broadcast.10164)
  %add.6459 = bf16[512,8,128]{0,2,1} add(%multiply.8119, %multiply.8120)
  %multiply.8121 = bf16[512,8,128]{0,2,1} multiply(%select.2776, %select.2776)
  %multiply.8122 = bf16[512,8,128]{0,2,1} multiply(%multiply.8121, %broadcast.10166)
  %param.706 = bf16[512,8,128]{2,1,0} parameter(835), sharding={devices=[8,1,1]<=[8]}
  %multiply.8123 = bf16[512,8,128]{2,1,0} multiply(%param.706, %broadcast.10167)
  %add.6460 = bf16[512,8,128]{0,2,1} add(%multiply.8122, %multiply.8123)
  %divide.1635 = bf16[512,8,128]{0,2,1} divide(%add.6460, %broadcast.10168)
  %sqrt.188 = bf16[512,8,128]{0,2,1} sqrt(%divide.1635)
  %add.6461 = bf16[512,8,128]{0,2,1} add(%sqrt.188, %broadcast.10169)
  %multiply.8124 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6461)
  %divide.1636 = bf16[512,8,128]{0,2,1} divide(%add.6459, %multiply.8124)
  %multiply.8125 = bf16[512,8,128]{2,1,0} multiply(%param.259, %broadcast.10163)
  %add.6462 = bf16[512,8,128]{0,2,1} add(%divide.1636, %multiply.8125)
  %multiply.8126 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6462)
  %add.6463 = bf16[512,8,128]{2,1,0} add(%param.259, %multiply.8126)
  %divide.1637 = bf16[32,128,512]{1,0,2} divide(%transpose.393, %broadcast.10172)
  %select.2777 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.393, %divide.1637)
  %multiply.8127 = bf16[32,128,512]{1,0,2} multiply(%select.2777, %broadcast.10173)
  %param.707 = bf16[32,128,512]{2,1,0} parameter(513), sharding={devices=[1,1,8]<=[8]}
  %multiply.8128 = bf16[32,128,512]{2,1,0} multiply(%param.707, %broadcast.10174)
  %add.6464 = bf16[32,128,512]{1,0,2} add(%multiply.8127, %multiply.8128)
  %multiply.8129 = bf16[32,128,512]{1,0,2} multiply(%select.2777, %select.2777)
  %multiply.8130 = bf16[32,128,512]{1,0,2} multiply(%multiply.8129, %broadcast.10176)
  %param.708 = bf16[32,128,512]{2,1,0} parameter(836), sharding={devices=[1,1,8]<=[8]}
  %multiply.8131 = bf16[32,128,512]{2,1,0} multiply(%param.708, %broadcast.10177)
  %add.6465 = bf16[32,128,512]{1,0,2} add(%multiply.8130, %multiply.8131)
  %divide.1638 = bf16[32,128,512]{1,0,2} divide(%add.6465, %broadcast.10178)
  %sqrt.189 = bf16[32,128,512]{1,0,2} sqrt(%divide.1638)
  %add.6466 = bf16[32,128,512]{1,0,2} add(%sqrt.189, %broadcast.10179)
  %multiply.8132 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6466)
  %divide.1639 = bf16[32,128,512]{1,0,2} divide(%add.6464, %multiply.8132)
  %multiply.8133 = bf16[32,128,512]{2,1,0} multiply(%param.261, %broadcast.10173)
  %add.6467 = bf16[32,128,512]{1,0,2} add(%divide.1639, %multiply.8133)
  %multiply.8134 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6467)
  %add.6468 = bf16[32,128,512]{2,1,0} add(%param.261, %multiply.8134)
  %divide.1640 = bf16[512,32,128]{0,2,1} divide(%transpose.394, %broadcast.10182)
  %select.2778 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.394, %divide.1640)
  %multiply.8135 = bf16[512,32,128]{0,2,1} multiply(%select.2778, %broadcast.10183)
  %param.709 = bf16[512,32,128]{2,1,0} parameter(514), sharding={devices=[8,1,1]<=[8]}
  %multiply.8136 = bf16[512,32,128]{2,1,0} multiply(%param.709, %broadcast.10184)
  %add.6469 = bf16[512,32,128]{0,2,1} add(%multiply.8135, %multiply.8136)
  %multiply.8137 = bf16[512,32,128]{0,2,1} multiply(%select.2778, %select.2778)
  %multiply.8138 = bf16[512,32,128]{0,2,1} multiply(%multiply.8137, %broadcast.10186)
  %param.710 = bf16[512,32,128]{2,1,0} parameter(837), sharding={devices=[8,1,1]<=[8]}
  %multiply.8139 = bf16[512,32,128]{2,1,0} multiply(%param.710, %broadcast.10187)
  %add.6470 = bf16[512,32,128]{0,2,1} add(%multiply.8138, %multiply.8139)
  %divide.1641 = bf16[512,32,128]{0,2,1} divide(%add.6470, %broadcast.10188)
  %sqrt.190 = bf16[512,32,128]{0,2,1} sqrt(%divide.1641)
  %add.6471 = bf16[512,32,128]{0,2,1} add(%sqrt.190, %broadcast.10189)
  %multiply.8140 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6471)
  %divide.1642 = bf16[512,32,128]{0,2,1} divide(%add.6469, %multiply.8140)
  %multiply.8141 = bf16[512,32,128]{2,1,0} multiply(%param.258, %broadcast.10183)
  %add.6472 = bf16[512,32,128]{0,2,1} add(%divide.1642, %multiply.8141)
  %multiply.8142 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6472)
  %add.6473 = bf16[512,32,128]{2,1,0} add(%param.258, %multiply.8142)
  %divide.1643 = bf16[512,8,128]{0,2,1} divide(%transpose.395, %broadcast.10162)
  %select.2779 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.395, %divide.1643)
  %multiply.8143 = bf16[512,8,128]{0,2,1} multiply(%select.2779, %broadcast.10163)
  %param.711 = bf16[512,8,128]{2,1,0} parameter(515), sharding={devices=[8,1,1]<=[8]}
  %multiply.8144 = bf16[512,8,128]{2,1,0} multiply(%param.711, %broadcast.10164)
  %add.6474 = bf16[512,8,128]{0,2,1} add(%multiply.8143, %multiply.8144)
  %multiply.8145 = bf16[512,8,128]{0,2,1} multiply(%select.2779, %select.2779)
  %multiply.8146 = bf16[512,8,128]{0,2,1} multiply(%multiply.8145, %broadcast.10166)
  %param.712 = bf16[512,8,128]{2,1,0} parameter(838), sharding={devices=[8,1,1]<=[8]}
  %multiply.8147 = bf16[512,8,128]{2,1,0} multiply(%param.712, %broadcast.10167)
  %add.6475 = bf16[512,8,128]{0,2,1} add(%multiply.8146, %multiply.8147)
  %divide.1644 = bf16[512,8,128]{0,2,1} divide(%add.6475, %broadcast.10168)
  %sqrt.191 = bf16[512,8,128]{0,2,1} sqrt(%divide.1644)
  %add.6476 = bf16[512,8,128]{0,2,1} add(%sqrt.191, %broadcast.10169)
  %multiply.8148 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6476)
  %divide.1645 = bf16[512,8,128]{0,2,1} divide(%add.6474, %multiply.8148)
  %multiply.8149 = bf16[512,8,128]{2,1,0} multiply(%param.260, %broadcast.10163)
  %add.6477 = bf16[512,8,128]{0,2,1} add(%divide.1645, %multiply.8149)
  %multiply.8150 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6477)
  %add.6478 = bf16[512,8,128]{2,1,0} add(%param.260, %multiply.8150)
  %divide.1646 = bf16[512,8]{0,1} divide(%dynamic-slice.2529, %broadcast.10097)
  %select.2780 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2529, %divide.1646)
  %multiply.8151 = bf16[512,8]{0,1} multiply(%select.2780, %broadcast.10098)
  %param.713 = bf16[512,8]{1,0} parameter(516), sharding={devices=[8,1]<=[8]}
  %multiply.8152 = bf16[512,8]{1,0} multiply(%param.713, %broadcast.10099)
  %add.6479 = bf16[512,8]{0,1} add(%multiply.8151, %multiply.8152)
  %multiply.8153 = bf16[512,8]{0,1} multiply(%select.2780, %select.2780)
  %multiply.8154 = bf16[512,8]{0,1} multiply(%multiply.8153, %broadcast.10101)
  %param.714 = bf16[512,8]{1,0} parameter(839), sharding={devices=[8,1]<=[8]}
  %multiply.8155 = bf16[512,8]{1,0} multiply(%param.714, %broadcast.10102)
  %add.6480 = bf16[512,8]{0,1} add(%multiply.8154, %multiply.8155)
  %divide.1647 = bf16[512,8]{0,1} divide(%add.6480, %broadcast.10103)
  %sqrt.192 = bf16[512,8]{0,1} sqrt(%divide.1647)
  %add.6481 = bf16[512,8]{0,1} add(%sqrt.192, %broadcast.10104)
  %multiply.8156 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6481)
  %divide.1648 = bf16[512,8]{0,1} divide(%add.6479, %multiply.8156)
  %multiply.8157 = bf16[512,8]{1,0} multiply(%param.273, %broadcast.10098)
  %add.6482 = bf16[512,8]{0,1} add(%divide.1648, %multiply.8157)
  %multiply.8158 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6482)
  %add.6483 = bf16[512,8]{1,0} add(%param.273, %multiply.8158)
  %divide.1649 = bf16[1,4096,14336]{2,1,0} divide(%copy.4258, %broadcast.10111)
  %select.2781 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4258, %divide.1649)
  %multiply.8160 = bf16[1,4096,14336]{2,1,0} multiply(%select.2781, %broadcast.10112)
  %param.715 = bf16[1,4096,14336]{2,1,0} parameter(517), sharding={devices=[8,1,1]<=[8]}
  %multiply.8161 = bf16[1,4096,14336]{2,1,0} multiply(%param.715, %broadcast.10113)
  %add.6484 = bf16[1,4096,14336]{2,1,0} add(%multiply.8160, %multiply.8161)
  %multiply.8162 = bf16[1,4096,14336]{2,1,0} multiply(%select.2781, %select.2781)
  %multiply.8163 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8162, %broadcast.10115)
  %param.716 = bf16[1,4096,14336]{2,1,0} parameter(840), sharding={devices=[8,1,1]<=[8]}
  %multiply.8164 = bf16[1,4096,14336]{2,1,0} multiply(%param.716, %broadcast.10116)
  %add.6485 = bf16[1,4096,14336]{2,1,0} add(%multiply.8163, %multiply.8164)
  %divide.1650 = bf16[1,4096,14336]{2,1,0} divide(%add.6485, %broadcast.10117)
  %sqrt.193 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1650)
  %add.6486 = bf16[1,4096,14336]{2,1,0} add(%sqrt.193, %broadcast.10119)
  %multiply.8165 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6486)
  %divide.1651 = bf16[1,4096,14336]{2,1,0} divide(%add.6484, %multiply.8165)
  %multiply.8168 = bf16[1,4096,14336]{2,1,0} multiply(%param.274, %broadcast.10112)
  %add.6488 = bf16[1,4096,14336]{2,1,0} add(%divide.1651, %multiply.8168)
  %multiply.8169 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6488)
  %add.6489 = bf16[1,4096,14336]{2,1,0} add(%param.274, %multiply.8169)
  %divide.1652 = bf16[1,4096,14336]{2,1,0} divide(%copy.4259, %broadcast.10111)
  %select.2782 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4259, %divide.1652)
  %multiply.8170 = bf16[1,4096,14336]{2,1,0} multiply(%select.2782, %broadcast.10112)
  %param.717 = bf16[1,4096,14336]{2,1,0} parameter(518), sharding={devices=[8,1,1]<=[8]}
  %multiply.8171 = bf16[1,4096,14336]{2,1,0} multiply(%param.717, %broadcast.10113)
  %add.6490 = bf16[1,4096,14336]{2,1,0} add(%multiply.8170, %multiply.8171)
  %multiply.8172 = bf16[1,4096,14336]{2,1,0} multiply(%select.2782, %select.2782)
  %multiply.8173 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8172, %broadcast.10115)
  %param.718 = bf16[1,4096,14336]{2,1,0} parameter(841), sharding={devices=[8,1,1]<=[8]}
  %multiply.8175 = bf16[1,4096,14336]{2,1,0} multiply(%param.718, %broadcast.10116)
  %add.6491 = bf16[1,4096,14336]{2,1,0} add(%multiply.8173, %multiply.8175)
  %divide.1653 = bf16[1,4096,14336]{2,1,0} divide(%add.6491, %broadcast.10117)
  %sqrt.194 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1653)
  %add.6492 = bf16[1,4096,14336]{2,1,0} add(%sqrt.194, %broadcast.10119)
  %multiply.8176 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6492)
  %divide.1654 = bf16[1,4096,14336]{2,1,0} divide(%add.6490, %multiply.8176)
  %multiply.8177 = bf16[1,4096,14336]{2,1,0} multiply(%param.275, %broadcast.10112)
  %add.6493 = bf16[1,4096,14336]{2,1,0} add(%divide.1654, %multiply.8177)
  %multiply.8178 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6493)
  %add.6494 = bf16[1,4096,14336]{2,1,0} add(%param.275, %multiply.8178)
  %divide.1655 = bf16[1,14336,4096]{2,1,0} divide(%copy.4260, %broadcast.10134)
  %select.2783 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4260, %divide.1655)
  %multiply.8179 = bf16[1,14336,4096]{2,1,0} multiply(%select.2783, %broadcast.10135)
  %param.719 = bf16[1,14336,4096]{2,1,0} parameter(519), sharding={devices=[8,1,1]<=[8]}
  %multiply.8180 = bf16[1,14336,4096]{2,1,0} multiply(%param.719, %broadcast.10136)
  %add.6495 = bf16[1,14336,4096]{2,1,0} add(%multiply.8179, %multiply.8180)
  %multiply.8182 = bf16[1,14336,4096]{2,1,0} multiply(%select.2783, %select.2783)
  %multiply.8183 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8182, %broadcast.10138)
  %param.720 = bf16[1,14336,4096]{2,1,0} parameter(842), sharding={devices=[8,1,1]<=[8]}
  %multiply.8184 = bf16[1,14336,4096]{2,1,0} multiply(%param.720, %broadcast.10139)
  %add.6496 = bf16[1,14336,4096]{2,1,0} add(%multiply.8183, %multiply.8184)
  %divide.1656 = bf16[1,14336,4096]{2,1,0} divide(%add.6496, %broadcast.10140)
  %sqrt.195 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1656)
  %add.6497 = bf16[1,14336,4096]{2,1,0} add(%sqrt.195, %broadcast.10141)
  %multiply.8185 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6497)
  %divide.1657 = bf16[1,14336,4096]{2,1,0} divide(%add.6495, %multiply.8185)
  %multiply.8186 = bf16[1,14336,4096]{2,1,0} multiply(%param.276, %broadcast.10135)
  %add.6498 = bf16[1,14336,4096]{2,1,0} add(%divide.1657, %multiply.8186)
  %multiply.8187 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6498)
  %add.6499 = bf16[1,14336,4096]{2,1,0} add(%param.276, %multiply.8187)
  %divide.1658 = bf16[4096]{0} divide(%all-reduce.292, %broadcast.10081)
  %select.2784 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.292, %divide.1658)
  %multiply.8188 = bf16[4096]{0} multiply(%select.2784, %broadcast.10083)
  %param.721 = bf16[4096]{0} parameter(520), sharding={replicated}
  %multiply.8189 = bf16[4096]{0} multiply(%param.721, %broadcast.10085)
  %add.6500 = bf16[4096]{0} add(%multiply.8188, %multiply.8189)
  %multiply.8190 = bf16[4096]{0} multiply(%select.2784, %select.2784)
  %multiply.8191 = bf16[4096]{0} multiply(%multiply.8190, %broadcast.10088)
  %param.722 = bf16[4096]{0} parameter(843), sharding={replicated}
  %multiply.8192 = bf16[4096]{0} multiply(%param.722, %broadcast.10090)
  %add.6501 = bf16[4096]{0} add(%multiply.8191, %multiply.8192)
  %divide.1659 = bf16[4096]{0} divide(%add.6501, %broadcast.10092)
  %sqrt.196 = bf16[4096]{0} sqrt(%divide.1659)
  %add.6502 = bf16[4096]{0} add(%sqrt.196, %broadcast.10094)
  %multiply.8193 = bf16[4096]{0} multiply(%broadcast.10086, %add.6502)
  %divide.1660 = bf16[4096]{0} divide(%add.6500, %multiply.8193)
  %multiply.8194 = bf16[4096]{0} multiply(%param.272, %broadcast.10083)
  %add.6503 = bf16[4096]{0} add(%divide.1660, %multiply.8194)
  %multiply.8195 = bf16[4096]{0} multiply(%broadcast.5338, %add.6503)
  %add.6504 = bf16[4096]{0} add(%param.272, %multiply.8195)
  %divide.1661 = bf16[4096]{0} divide(%all-reduce.293, %broadcast.10081)
  %select.2785 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.293, %divide.1661)
  %multiply.8196 = bf16[4096]{0} multiply(%select.2785, %broadcast.10083)
  %param.723 = bf16[4096]{0} parameter(521), sharding={replicated}
  %multiply.8198 = bf16[4096]{0} multiply(%param.723, %broadcast.10085)
  %add.6505 = bf16[4096]{0} add(%multiply.8196, %multiply.8198)
  %multiply.8199 = bf16[4096]{0} multiply(%select.2785, %select.2785)
  %multiply.8200 = bf16[4096]{0} multiply(%multiply.8199, %broadcast.10088)
  %param.724 = bf16[4096]{0} parameter(844), sharding={replicated}
  %multiply.8201 = bf16[4096]{0} multiply(%param.724, %broadcast.10090)
  %add.6506 = bf16[4096]{0} add(%multiply.8200, %multiply.8201)
  %divide.1662 = bf16[4096]{0} divide(%add.6506, %broadcast.10092)
  %sqrt.197 = bf16[4096]{0} sqrt(%divide.1662)
  %add.6507 = bf16[4096]{0} add(%sqrt.197, %broadcast.10094)
  %multiply.8202 = bf16[4096]{0} multiply(%broadcast.10086, %add.6507)
  %divide.1663 = bf16[4096]{0} divide(%add.6505, %multiply.8202)
  %multiply.8203 = bf16[4096]{0} multiply(%param.267, %broadcast.10083)
  %add.6508 = bf16[4096]{0} add(%divide.1663, %multiply.8203)
  %multiply.8204 = bf16[4096]{0} multiply(%broadcast.5338, %add.6508)
  %add.6509 = bf16[4096]{0} add(%param.267, %multiply.8204)
  %divide.1664 = bf16[512,8,128]{0,2,1} divide(%transpose.396, %broadcast.10162)
  %select.2786 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.396, %divide.1664)
  %multiply.8205 = bf16[512,8,128]{0,2,1} multiply(%select.2786, %broadcast.10163)
  %param.725 = bf16[512,8,128]{2,1,0} parameter(522), sharding={devices=[8,1,1]<=[8]}
  %multiply.8206 = bf16[512,8,128]{2,1,0} multiply(%param.725, %broadcast.10164)
  %add.6510 = bf16[512,8,128]{0,2,1} add(%multiply.8205, %multiply.8206)
  %multiply.8208 = bf16[512,8,128]{0,2,1} multiply(%select.2786, %select.2786)
  %multiply.8209 = bf16[512,8,128]{0,2,1} multiply(%multiply.8208, %broadcast.10166)
  %param.726 = bf16[512,8,128]{2,1,0} parameter(845), sharding={devices=[8,1,1]<=[8]}
  %multiply.8210 = bf16[512,8,128]{2,1,0} multiply(%param.726, %broadcast.10167)
  %add.6511 = bf16[512,8,128]{0,2,1} add(%multiply.8209, %multiply.8210)
  %divide.1665 = bf16[512,8,128]{0,2,1} divide(%add.6511, %broadcast.10168)
  %sqrt.198 = bf16[512,8,128]{0,2,1} sqrt(%divide.1665)
  %add.6512 = bf16[512,8,128]{0,2,1} add(%sqrt.198, %broadcast.10169)
  %multiply.8211 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6512)
  %divide.1666 = bf16[512,8,128]{0,2,1} divide(%add.6510, %multiply.8211)
  %multiply.8212 = bf16[512,8,128]{2,1,0} multiply(%param.269, %broadcast.10163)
  %add.6513 = bf16[512,8,128]{0,2,1} add(%divide.1666, %multiply.8212)
  %multiply.8213 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6513)
  %add.6514 = bf16[512,8,128]{2,1,0} add(%param.269, %multiply.8213)
  %divide.1667 = bf16[32,128,512]{1,0,2} divide(%transpose.397, %broadcast.10172)
  %select.2787 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.397, %divide.1667)
  %multiply.8214 = bf16[32,128,512]{1,0,2} multiply(%select.2787, %broadcast.10173)
  %param.727 = bf16[32,128,512]{2,1,0} parameter(523), sharding={devices=[1,1,8]<=[8]}
  %multiply.8215 = bf16[32,128,512]{2,1,0} multiply(%param.727, %broadcast.10174)
  %add.6515 = bf16[32,128,512]{1,0,2} add(%multiply.8214, %multiply.8215)
  %multiply.8216 = bf16[32,128,512]{1,0,2} multiply(%select.2787, %select.2787)
  %multiply.8217 = bf16[32,128,512]{1,0,2} multiply(%multiply.8216, %broadcast.10176)
  %param.728 = bf16[32,128,512]{2,1,0} parameter(846), sharding={devices=[1,1,8]<=[8]}
  %multiply.8218 = bf16[32,128,512]{2,1,0} multiply(%param.728, %broadcast.10177)
  %add.6516 = bf16[32,128,512]{1,0,2} add(%multiply.8217, %multiply.8218)
  %divide.1668 = bf16[32,128,512]{1,0,2} divide(%add.6516, %broadcast.10178)
  %sqrt.199 = bf16[32,128,512]{1,0,2} sqrt(%divide.1668)
  %add.6517 = bf16[32,128,512]{1,0,2} add(%sqrt.199, %broadcast.10179)
  %multiply.8219 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6517)
  %divide.1669 = bf16[32,128,512]{1,0,2} divide(%add.6515, %multiply.8219)
  %multiply.8221 = bf16[32,128,512]{2,1,0} multiply(%param.271, %broadcast.10173)
  %add.6519 = bf16[32,128,512]{1,0,2} add(%divide.1669, %multiply.8221)
  %multiply.8222 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6519)
  %add.6520 = bf16[32,128,512]{2,1,0} add(%param.271, %multiply.8222)
  %divide.1670 = bf16[512,32,128]{0,2,1} divide(%transpose.398, %broadcast.10182)
  %select.2788 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.398, %divide.1670)
  %multiply.8223 = bf16[512,32,128]{0,2,1} multiply(%select.2788, %broadcast.10183)
  %param.729 = bf16[512,32,128]{2,1,0} parameter(524), sharding={devices=[8,1,1]<=[8]}
  %multiply.8224 = bf16[512,32,128]{2,1,0} multiply(%param.729, %broadcast.10184)
  %add.6521 = bf16[512,32,128]{0,2,1} add(%multiply.8223, %multiply.8224)
  %multiply.8225 = bf16[512,32,128]{0,2,1} multiply(%select.2788, %select.2788)
  %multiply.8227 = bf16[512,32,128]{0,2,1} multiply(%multiply.8225, %broadcast.10186)
  %param.730 = bf16[512,32,128]{2,1,0} parameter(847), sharding={devices=[8,1,1]<=[8]}
  %multiply.8228 = bf16[512,32,128]{2,1,0} multiply(%param.730, %broadcast.10187)
  %add.6522 = bf16[512,32,128]{0,2,1} add(%multiply.8227, %multiply.8228)
  %divide.1671 = bf16[512,32,128]{0,2,1} divide(%add.6522, %broadcast.10188)
  %sqrt.200 = bf16[512,32,128]{0,2,1} sqrt(%divide.1671)
  %add.6523 = bf16[512,32,128]{0,2,1} add(%sqrt.200, %broadcast.10189)
  %multiply.8229 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6523)
  %divide.1672 = bf16[512,32,128]{0,2,1} divide(%add.6521, %multiply.8229)
  %multiply.8230 = bf16[512,32,128]{2,1,0} multiply(%param.268, %broadcast.10183)
  %add.6524 = bf16[512,32,128]{0,2,1} add(%divide.1672, %multiply.8230)
  %multiply.8231 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6524)
  %add.6525 = bf16[512,32,128]{2,1,0} add(%param.268, %multiply.8231)
  %divide.1673 = bf16[512,8,128]{0,2,1} divide(%transpose.399, %broadcast.10162)
  %select.2789 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.399, %divide.1673)
  %multiply.8232 = bf16[512,8,128]{0,2,1} multiply(%select.2789, %broadcast.10163)
  %param.731 = bf16[512,8,128]{2,1,0} parameter(525), sharding={devices=[8,1,1]<=[8]}
  %multiply.8233 = bf16[512,8,128]{2,1,0} multiply(%param.731, %broadcast.10164)
  %add.6527 = bf16[512,8,128]{0,2,1} add(%multiply.8232, %multiply.8233)
  %multiply.8234 = bf16[512,8,128]{0,2,1} multiply(%select.2789, %select.2789)
  %multiply.8236 = bf16[512,8,128]{0,2,1} multiply(%multiply.8234, %broadcast.10166)
  %param.732 = bf16[512,8,128]{2,1,0} parameter(848), sharding={devices=[8,1,1]<=[8]}
  %multiply.8237 = bf16[512,8,128]{2,1,0} multiply(%param.732, %broadcast.10167)
  %add.6528 = bf16[512,8,128]{0,2,1} add(%multiply.8236, %multiply.8237)
  %divide.1674 = bf16[512,8,128]{0,2,1} divide(%add.6528, %broadcast.10168)
  %sqrt.201 = bf16[512,8,128]{0,2,1} sqrt(%divide.1674)
  %add.6529 = bf16[512,8,128]{0,2,1} add(%sqrt.201, %broadcast.10169)
  %multiply.8238 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6529)
  %divide.1675 = bf16[512,8,128]{0,2,1} divide(%add.6527, %multiply.8238)
  %multiply.8239 = bf16[512,8,128]{2,1,0} multiply(%param.270, %broadcast.10163)
  %add.6530 = bf16[512,8,128]{0,2,1} add(%divide.1675, %multiply.8239)
  %multiply.8240 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6530)
  %add.6531 = bf16[512,8,128]{2,1,0} add(%param.270, %multiply.8240)
  %divide.1676 = bf16[512,8]{0,1} divide(%dynamic-slice.2539, %broadcast.10097)
  %select.2790 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2539, %divide.1676)
  %multiply.8241 = bf16[512,8]{0,1} multiply(%select.2790, %broadcast.10098)
  %param.733 = bf16[512,8]{1,0} parameter(526), sharding={devices=[8,1]<=[8]}
  %multiply.8242 = bf16[512,8]{1,0} multiply(%param.733, %broadcast.10099)
  %add.6532 = bf16[512,8]{0,1} add(%multiply.8241, %multiply.8242)
  %multiply.8243 = bf16[512,8]{0,1} multiply(%select.2790, %select.2790)
  %multiply.8244 = bf16[512,8]{0,1} multiply(%multiply.8243, %broadcast.10101)
  %param.734 = bf16[512,8]{1,0} parameter(849), sharding={devices=[8,1]<=[8]}
  %multiply.8245 = bf16[512,8]{1,0} multiply(%param.734, %broadcast.10102)
  %add.6533 = bf16[512,8]{0,1} add(%multiply.8244, %multiply.8245)
  %divide.1677 = bf16[512,8]{0,1} divide(%add.6533, %broadcast.10103)
  %sqrt.202 = bf16[512,8]{0,1} sqrt(%divide.1677)
  %add.6534 = bf16[512,8]{0,1} add(%sqrt.202, %broadcast.10104)
  %multiply.8246 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6534)
  %divide.1678 = bf16[512,8]{0,1} divide(%add.6532, %multiply.8246)
  %multiply.8247 = bf16[512,8]{1,0} multiply(%param.283, %broadcast.10098)
  %add.6535 = bf16[512,8]{0,1} add(%divide.1678, %multiply.8247)
  %multiply.8248 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6535)
  %add.6536 = bf16[512,8]{1,0} add(%param.283, %multiply.8248)
  %divide.1679 = bf16[1,4096,14336]{2,1,0} divide(%copy.4261, %broadcast.10111)
  %select.2791 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4261, %divide.1679)
  %multiply.8249 = bf16[1,4096,14336]{2,1,0} multiply(%select.2791, %broadcast.10112)
  %param.735 = bf16[1,4096,14336]{2,1,0} parameter(527), sharding={devices=[8,1,1]<=[8]}
  %multiply.8250 = bf16[1,4096,14336]{2,1,0} multiply(%param.735, %broadcast.10113)
  %add.6537 = bf16[1,4096,14336]{2,1,0} add(%multiply.8249, %multiply.8250)
  %multiply.8251 = bf16[1,4096,14336]{2,1,0} multiply(%select.2791, %select.2791)
  %multiply.8252 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8251, %broadcast.10115)
  %param.736 = bf16[1,4096,14336]{2,1,0} parameter(850), sharding={devices=[8,1,1]<=[8]}
  %multiply.8253 = bf16[1,4096,14336]{2,1,0} multiply(%param.736, %broadcast.10116)
  %add.6538 = bf16[1,4096,14336]{2,1,0} add(%multiply.8252, %multiply.8253)
  %divide.1680 = bf16[1,4096,14336]{2,1,0} divide(%add.6538, %broadcast.10117)
  %sqrt.203 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1680)
  %add.6539 = bf16[1,4096,14336]{2,1,0} add(%sqrt.203, %broadcast.10119)
  %multiply.8254 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6539)
  %divide.1681 = bf16[1,4096,14336]{2,1,0} divide(%add.6537, %multiply.8254)
  %multiply.8255 = bf16[1,4096,14336]{2,1,0} multiply(%param.284, %broadcast.10112)
  %add.6540 = bf16[1,4096,14336]{2,1,0} add(%divide.1681, %multiply.8255)
  %multiply.8256 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6540)
  %add.6542 = bf16[1,4096,14336]{2,1,0} add(%param.284, %multiply.8256)
  %divide.1682 = bf16[1,4096,14336]{2,1,0} divide(%copy.4262, %broadcast.10111)
  %select.2792 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4262, %divide.1682)
  %multiply.8258 = bf16[1,4096,14336]{2,1,0} multiply(%select.2792, %broadcast.10112)
  %param.737 = bf16[1,4096,14336]{2,1,0} parameter(528), sharding={devices=[8,1,1]<=[8]}
  %multiply.8259 = bf16[1,4096,14336]{2,1,0} multiply(%param.737, %broadcast.10113)
  %add.6543 = bf16[1,4096,14336]{2,1,0} add(%multiply.8258, %multiply.8259)
  %multiply.8260 = bf16[1,4096,14336]{2,1,0} multiply(%select.2792, %select.2792)
  %multiply.8262 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8260, %broadcast.10115)
  %param.738 = bf16[1,4096,14336]{2,1,0} parameter(851), sharding={devices=[8,1,1]<=[8]}
  %multiply.8263 = bf16[1,4096,14336]{2,1,0} multiply(%param.738, %broadcast.10116)
  %add.6544 = bf16[1,4096,14336]{2,1,0} add(%multiply.8262, %multiply.8263)
  %divide.1683 = bf16[1,4096,14336]{2,1,0} divide(%add.6544, %broadcast.10117)
  %sqrt.204 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1683)
  %add.6545 = bf16[1,4096,14336]{2,1,0} add(%sqrt.204, %broadcast.10119)
  %multiply.8264 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6545)
  %divide.1684 = bf16[1,4096,14336]{2,1,0} divide(%add.6543, %multiply.8264)
  %multiply.8265 = bf16[1,4096,14336]{2,1,0} multiply(%param.285, %broadcast.10112)
  %add.6547 = bf16[1,4096,14336]{2,1,0} add(%divide.1684, %multiply.8265)
  %multiply.8267 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6547)
  %add.6548 = bf16[1,4096,14336]{2,1,0} add(%param.285, %multiply.8267)
  %divide.1685 = bf16[1,14336,4096]{2,1,0} divide(%copy.4263, %broadcast.10134)
  %select.2793 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4263, %divide.1685)
  %multiply.8268 = bf16[1,14336,4096]{2,1,0} multiply(%select.2793, %broadcast.10135)
  %param.739 = bf16[1,14336,4096]{2,1,0} parameter(529), sharding={devices=[8,1,1]<=[8]}
  %multiply.8269 = bf16[1,14336,4096]{2,1,0} multiply(%param.739, %broadcast.10136)
  %add.6549 = bf16[1,14336,4096]{2,1,0} add(%multiply.8268, %multiply.8269)
  %multiply.8271 = bf16[1,14336,4096]{2,1,0} multiply(%select.2793, %select.2793)
  %multiply.8272 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8271, %broadcast.10138)
  %param.740 = bf16[1,14336,4096]{2,1,0} parameter(852), sharding={devices=[8,1,1]<=[8]}
  %multiply.8273 = bf16[1,14336,4096]{2,1,0} multiply(%param.740, %broadcast.10139)
  %add.6550 = bf16[1,14336,4096]{2,1,0} add(%multiply.8272, %multiply.8273)
  %divide.1687 = bf16[1,14336,4096]{2,1,0} divide(%add.6550, %broadcast.10140)
  %sqrt.205 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1687)
  %add.6552 = bf16[1,14336,4096]{2,1,0} add(%sqrt.205, %broadcast.10141)
  %multiply.8274 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6552)
  %divide.1688 = bf16[1,14336,4096]{2,1,0} divide(%add.6549, %multiply.8274)
  %multiply.8276 = bf16[1,14336,4096]{2,1,0} multiply(%param.286, %broadcast.10135)
  %add.6553 = bf16[1,14336,4096]{2,1,0} add(%divide.1688, %multiply.8276)
  %multiply.8277 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6553)
  %add.6554 = bf16[1,14336,4096]{2,1,0} add(%param.286, %multiply.8277)
  %divide.1689 = bf16[4096]{0} divide(%all-reduce.307, %broadcast.10081)
  %select.2794 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.307, %divide.1689)
  %multiply.8278 = bf16[4096]{0} multiply(%select.2794, %broadcast.10083)
  %param.741 = bf16[4096]{0} parameter(530), sharding={replicated}
  %multiply.8279 = bf16[4096]{0} multiply(%param.741, %broadcast.10085)
  %add.6555 = bf16[4096]{0} add(%multiply.8278, %multiply.8279)
  %multiply.8280 = bf16[4096]{0} multiply(%select.2794, %select.2794)
  %multiply.8281 = bf16[4096]{0} multiply(%multiply.8280, %broadcast.10088)
  %param.742 = bf16[4096]{0} parameter(853), sharding={replicated}
  %multiply.8282 = bf16[4096]{0} multiply(%param.742, %broadcast.10090)
  %add.6556 = bf16[4096]{0} add(%multiply.8281, %multiply.8282)
  %divide.1690 = bf16[4096]{0} divide(%add.6556, %broadcast.10092)
  %sqrt.206 = bf16[4096]{0} sqrt(%divide.1690)
  %add.6557 = bf16[4096]{0} add(%sqrt.206, %broadcast.10094)
  %multiply.8283 = bf16[4096]{0} multiply(%broadcast.10086, %add.6557)
  %divide.1691 = bf16[4096]{0} divide(%add.6555, %multiply.8283)
  %multiply.8284 = bf16[4096]{0} multiply(%param.282, %broadcast.10083)
  %add.6558 = bf16[4096]{0} add(%divide.1691, %multiply.8284)
  %multiply.8285 = bf16[4096]{0} multiply(%broadcast.5338, %add.6558)
  %add.6559 = bf16[4096]{0} add(%param.282, %multiply.8285)
  %divide.1692 = bf16[4096]{0} divide(%all-reduce.308, %broadcast.10081)
  %select.2795 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.308, %divide.1692)
  %multiply.8286 = bf16[4096]{0} multiply(%select.2795, %broadcast.10083)
  %param.743 = bf16[4096]{0} parameter(531), sharding={replicated}
  %multiply.8287 = bf16[4096]{0} multiply(%param.743, %broadcast.10085)
  %add.6560 = bf16[4096]{0} add(%multiply.8286, %multiply.8287)
  %multiply.8288 = bf16[4096]{0} multiply(%select.2795, %select.2795)
  %multiply.8289 = bf16[4096]{0} multiply(%multiply.8288, %broadcast.10088)
  %param.744 = bf16[4096]{0} parameter(854), sharding={replicated}
  %multiply.8290 = bf16[4096]{0} multiply(%param.744, %broadcast.10090)
  %add.6561 = bf16[4096]{0} add(%multiply.8289, %multiply.8290)
  %divide.1693 = bf16[4096]{0} divide(%add.6561, %broadcast.10092)
  %sqrt.207 = bf16[4096]{0} sqrt(%divide.1693)
  %add.6562 = bf16[4096]{0} add(%sqrt.207, %broadcast.10094)
  %multiply.8291 = bf16[4096]{0} multiply(%broadcast.10086, %add.6562)
  %divide.1694 = bf16[4096]{0} divide(%add.6560, %multiply.8291)
  %multiply.8292 = bf16[4096]{0} multiply(%param.277, %broadcast.10083)
  %add.6563 = bf16[4096]{0} add(%divide.1694, %multiply.8292)
  %multiply.8293 = bf16[4096]{0} multiply(%broadcast.5338, %add.6563)
  %add.6564 = bf16[4096]{0} add(%param.277, %multiply.8293)
  %divide.1695 = bf16[512,8,128]{0,2,1} divide(%transpose.400, %broadcast.10162)
  %select.2796 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.400, %divide.1695)
  %multiply.8294 = bf16[512,8,128]{0,2,1} multiply(%select.2796, %broadcast.10163)
  %param.745 = bf16[512,8,128]{2,1,0} parameter(532), sharding={devices=[8,1,1]<=[8]}
  %multiply.8295 = bf16[512,8,128]{2,1,0} multiply(%param.745, %broadcast.10164)
  %add.6565 = bf16[512,8,128]{0,2,1} add(%multiply.8294, %multiply.8295)
  %multiply.8296 = bf16[512,8,128]{0,2,1} multiply(%select.2796, %select.2796)
  %multiply.8298 = bf16[512,8,128]{0,2,1} multiply(%multiply.8296, %broadcast.10166)
  %param.746 = bf16[512,8,128]{2,1,0} parameter(855), sharding={devices=[8,1,1]<=[8]}
  %multiply.8299 = bf16[512,8,128]{2,1,0} multiply(%param.746, %broadcast.10167)
  %add.6566 = bf16[512,8,128]{0,2,1} add(%multiply.8298, %multiply.8299)
  %divide.1696 = bf16[512,8,128]{0,2,1} divide(%add.6566, %broadcast.10168)
  %sqrt.208 = bf16[512,8,128]{0,2,1} sqrt(%divide.1696)
  %add.6567 = bf16[512,8,128]{0,2,1} add(%sqrt.208, %broadcast.10169)
  %multiply.8300 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6567)
  %divide.1697 = bf16[512,8,128]{0,2,1} divide(%add.6565, %multiply.8300)
  %multiply.8302 = bf16[512,8,128]{2,1,0} multiply(%param.279, %broadcast.10163)
  %add.6568 = bf16[512,8,128]{0,2,1} add(%divide.1697, %multiply.8302)
  %multiply.8303 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6568)
  %add.6569 = bf16[512,8,128]{2,1,0} add(%param.279, %multiply.8303)
  %divide.1698 = bf16[32,128,512]{1,0,2} divide(%transpose.401, %broadcast.10172)
  %select.2797 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.401, %divide.1698)
  %multiply.8304 = bf16[32,128,512]{1,0,2} multiply(%select.2797, %broadcast.10173)
  %param.747 = bf16[32,128,512]{2,1,0} parameter(533), sharding={devices=[1,1,8]<=[8]}
  %multiply.8305 = bf16[32,128,512]{2,1,0} multiply(%param.747, %broadcast.10174)
  %add.6570 = bf16[32,128,512]{1,0,2} add(%multiply.8304, %multiply.8305)
  %multiply.8307 = bf16[32,128,512]{1,0,2} multiply(%select.2797, %select.2797)
  %multiply.8308 = bf16[32,128,512]{1,0,2} multiply(%multiply.8307, %broadcast.10176)
  %param.748 = bf16[32,128,512]{2,1,0} parameter(856), sharding={devices=[1,1,8]<=[8]}
  %multiply.8309 = bf16[32,128,512]{2,1,0} multiply(%param.748, %broadcast.10177)
  %add.6571 = bf16[32,128,512]{1,0,2} add(%multiply.8308, %multiply.8309)
  %divide.1699 = bf16[32,128,512]{1,0,2} divide(%add.6571, %broadcast.10178)
  %sqrt.209 = bf16[32,128,512]{1,0,2} sqrt(%divide.1699)
  %add.6572 = bf16[32,128,512]{1,0,2} add(%sqrt.209, %broadcast.10179)
  %multiply.8311 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6572)
  %divide.1700 = bf16[32,128,512]{1,0,2} divide(%add.6570, %multiply.8311)
  %multiply.8312 = bf16[32,128,512]{2,1,0} multiply(%param.281, %broadcast.10173)
  %add.6573 = bf16[32,128,512]{1,0,2} add(%divide.1700, %multiply.8312)
  %multiply.8313 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6573)
  %add.6574 = bf16[32,128,512]{2,1,0} add(%param.281, %multiply.8313)
  %divide.1701 = bf16[512,32,128]{0,2,1} divide(%transpose.402, %broadcast.10182)
  %select.2798 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.402, %divide.1701)
  %multiply.8314 = bf16[512,32,128]{0,2,1} multiply(%select.2798, %broadcast.10183)
  %param.749 = bf16[512,32,128]{2,1,0} parameter(534), sharding={devices=[8,1,1]<=[8]}
  %multiply.8315 = bf16[512,32,128]{2,1,0} multiply(%param.749, %broadcast.10184)
  %add.6575 = bf16[512,32,128]{0,2,1} add(%multiply.8314, %multiply.8315)
  %multiply.8316 = bf16[512,32,128]{0,2,1} multiply(%select.2798, %select.2798)
  %multiply.8317 = bf16[512,32,128]{0,2,1} multiply(%multiply.8316, %broadcast.10186)
  %param.750 = bf16[512,32,128]{2,1,0} parameter(857), sharding={devices=[8,1,1]<=[8]}
  %multiply.8318 = bf16[512,32,128]{2,1,0} multiply(%param.750, %broadcast.10187)
  %add.6576 = bf16[512,32,128]{0,2,1} add(%multiply.8317, %multiply.8318)
  %divide.1702 = bf16[512,32,128]{0,2,1} divide(%add.6576, %broadcast.10188)
  %sqrt.210 = bf16[512,32,128]{0,2,1} sqrt(%divide.1702)
  %add.6577 = bf16[512,32,128]{0,2,1} add(%sqrt.210, %broadcast.10189)
  %multiply.8319 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6577)
  %divide.1703 = bf16[512,32,128]{0,2,1} divide(%add.6575, %multiply.8319)
  %multiply.8320 = bf16[512,32,128]{2,1,0} multiply(%param.278, %broadcast.10183)
  %add.6578 = bf16[512,32,128]{0,2,1} add(%divide.1703, %multiply.8320)
  %multiply.8321 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6578)
  %add.6579 = bf16[512,32,128]{2,1,0} add(%param.278, %multiply.8321)
  %divide.1704 = bf16[512,8,128]{0,2,1} divide(%transpose.403, %broadcast.10162)
  %select.2799 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.403, %divide.1704)
  %multiply.8322 = bf16[512,8,128]{0,2,1} multiply(%select.2799, %broadcast.10163)
  %param.751 = bf16[512,8,128]{2,1,0} parameter(535), sharding={devices=[8,1,1]<=[8]}
  %multiply.8323 = bf16[512,8,128]{2,1,0} multiply(%param.751, %broadcast.10164)
  %add.6580 = bf16[512,8,128]{0,2,1} add(%multiply.8322, %multiply.8323)
  %multiply.8324 = bf16[512,8,128]{0,2,1} multiply(%select.2799, %select.2799)
  %multiply.8325 = bf16[512,8,128]{0,2,1} multiply(%multiply.8324, %broadcast.10166)
  %param.752 = bf16[512,8,128]{2,1,0} parameter(858), sharding={devices=[8,1,1]<=[8]}
  %multiply.8326 = bf16[512,8,128]{2,1,0} multiply(%param.752, %broadcast.10167)
  %add.6581 = bf16[512,8,128]{0,2,1} add(%multiply.8325, %multiply.8326)
  %divide.1705 = bf16[512,8,128]{0,2,1} divide(%add.6581, %broadcast.10168)
  %sqrt.211 = bf16[512,8,128]{0,2,1} sqrt(%divide.1705)
  %add.6582 = bf16[512,8,128]{0,2,1} add(%sqrt.211, %broadcast.10169)
  %multiply.8327 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6582)
  %divide.1706 = bf16[512,8,128]{0,2,1} divide(%add.6580, %multiply.8327)
  %multiply.8328 = bf16[512,8,128]{2,1,0} multiply(%param.280, %broadcast.10163)
  %add.6583 = bf16[512,8,128]{0,2,1} add(%divide.1706, %multiply.8328)
  %multiply.8329 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6583)
  %add.6585 = bf16[512,8,128]{2,1,0} add(%param.280, %multiply.8329)
  %divide.1707 = bf16[512,8]{0,1} divide(%dynamic-slice.2549, %broadcast.10097)
  %select.2800 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2549, %divide.1707)
  %multiply.8330 = bf16[512,8]{0,1} multiply(%select.2800, %broadcast.10098)
  %param.753 = bf16[512,8]{1,0} parameter(536), sharding={devices=[8,1]<=[8]}
  %multiply.8331 = bf16[512,8]{1,0} multiply(%param.753, %broadcast.10099)
  %add.6586 = bf16[512,8]{0,1} add(%multiply.8330, %multiply.8331)
  %multiply.8332 = bf16[512,8]{0,1} multiply(%select.2800, %select.2800)
  %multiply.8333 = bf16[512,8]{0,1} multiply(%multiply.8332, %broadcast.10101)
  %param.754 = bf16[512,8]{1,0} parameter(859), sharding={devices=[8,1]<=[8]}
  %multiply.8334 = bf16[512,8]{1,0} multiply(%param.754, %broadcast.10102)
  %add.6587 = bf16[512,8]{0,1} add(%multiply.8333, %multiply.8334)
  %divide.1708 = bf16[512,8]{0,1} divide(%add.6587, %broadcast.10103)
  %sqrt.212 = bf16[512,8]{0,1} sqrt(%divide.1708)
  %add.6588 = bf16[512,8]{0,1} add(%sqrt.212, %broadcast.10104)
  %multiply.8335 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6588)
  %divide.1709 = bf16[512,8]{0,1} divide(%add.6586, %multiply.8335)
  %multiply.8336 = bf16[512,8]{1,0} multiply(%param.293, %broadcast.10098)
  %add.6589 = bf16[512,8]{0,1} add(%divide.1709, %multiply.8336)
  %multiply.8337 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6589)
  %add.6590 = bf16[512,8]{1,0} add(%param.293, %multiply.8337)
  %divide.1710 = bf16[1,4096,14336]{2,1,0} divide(%copy.4264, %broadcast.10111)
  %select.2801 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4264, %divide.1710)
  %multiply.8338 = bf16[1,4096,14336]{2,1,0} multiply(%select.2801, %broadcast.10112)
  %param.755 = bf16[1,4096,14336]{2,1,0} parameter(537), sharding={devices=[8,1,1]<=[8]}
  %multiply.8339 = bf16[1,4096,14336]{2,1,0} multiply(%param.755, %broadcast.10113)
  %add.6591 = bf16[1,4096,14336]{2,1,0} add(%multiply.8338, %multiply.8339)
  %multiply.8340 = bf16[1,4096,14336]{2,1,0} multiply(%select.2801, %select.2801)
  %multiply.8341 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8340, %broadcast.10115)
  %param.756 = bf16[1,4096,14336]{2,1,0} parameter(860), sharding={devices=[8,1,1]<=[8]}
  %multiply.8342 = bf16[1,4096,14336]{2,1,0} multiply(%param.756, %broadcast.10116)
  %add.6592 = bf16[1,4096,14336]{2,1,0} add(%multiply.8341, %multiply.8342)
  %divide.1711 = bf16[1,4096,14336]{2,1,0} divide(%add.6592, %broadcast.10117)
  %sqrt.213 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1711)
  %add.6593 = bf16[1,4096,14336]{2,1,0} add(%sqrt.213, %broadcast.10119)
  %multiply.8343 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6593)
  %divide.1712 = bf16[1,4096,14336]{2,1,0} divide(%add.6591, %multiply.8343)
  %multiply.8344 = bf16[1,4096,14336]{2,1,0} multiply(%param.294, %broadcast.10112)
  %add.6594 = bf16[1,4096,14336]{2,1,0} add(%divide.1712, %multiply.8344)
  %multiply.8345 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6594)
  %add.6595 = bf16[1,4096,14336]{2,1,0} add(%param.294, %multiply.8345)
  %divide.1713 = bf16[1,4096,14336]{2,1,0} divide(%copy.4265, %broadcast.10111)
  %select.2802 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4265, %divide.1713)
  %multiply.8346 = bf16[1,4096,14336]{2,1,0} multiply(%select.2802, %broadcast.10112)
  %param.757 = bf16[1,4096,14336]{2,1,0} parameter(538), sharding={devices=[8,1,1]<=[8]}
  %multiply.8347 = bf16[1,4096,14336]{2,1,0} multiply(%param.757, %broadcast.10113)
  %add.6596 = bf16[1,4096,14336]{2,1,0} add(%multiply.8346, %multiply.8347)
  %multiply.8348 = bf16[1,4096,14336]{2,1,0} multiply(%select.2802, %select.2802)
  %multiply.8349 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8348, %broadcast.10115)
  %param.758 = bf16[1,4096,14336]{2,1,0} parameter(861), sharding={devices=[8,1,1]<=[8]}
  %multiply.8350 = bf16[1,4096,14336]{2,1,0} multiply(%param.758, %broadcast.10116)
  %add.6597 = bf16[1,4096,14336]{2,1,0} add(%multiply.8349, %multiply.8350)
  %divide.1714 = bf16[1,4096,14336]{2,1,0} divide(%add.6597, %broadcast.10117)
  %sqrt.214 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1714)
  %add.6599 = bf16[1,4096,14336]{2,1,0} add(%sqrt.214, %broadcast.10119)
  %multiply.8351 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6599)
  %divide.1715 = bf16[1,4096,14336]{2,1,0} divide(%add.6596, %multiply.8351)
  %multiply.8352 = bf16[1,4096,14336]{2,1,0} multiply(%param.295, %broadcast.10112)
  %add.6600 = bf16[1,4096,14336]{2,1,0} add(%divide.1715, %multiply.8352)
  %multiply.8353 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6600)
  %add.6602 = bf16[1,4096,14336]{2,1,0} add(%param.295, %multiply.8353)
  %divide.1716 = bf16[1,14336,4096]{2,1,0} divide(%copy.4266, %broadcast.10134)
  %select.2803 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4266, %divide.1716)
  %multiply.8354 = bf16[1,14336,4096]{2,1,0} multiply(%select.2803, %broadcast.10135)
  %param.759 = bf16[1,14336,4096]{2,1,0} parameter(539), sharding={devices=[8,1,1]<=[8]}
  %multiply.8355 = bf16[1,14336,4096]{2,1,0} multiply(%param.759, %broadcast.10136)
  %add.6603 = bf16[1,14336,4096]{2,1,0} add(%multiply.8354, %multiply.8355)
  %multiply.8356 = bf16[1,14336,4096]{2,1,0} multiply(%select.2803, %select.2803)
  %multiply.8357 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8356, %broadcast.10138)
  %param.760 = bf16[1,14336,4096]{2,1,0} parameter(862), sharding={devices=[8,1,1]<=[8]}
  %multiply.8358 = bf16[1,14336,4096]{2,1,0} multiply(%param.760, %broadcast.10139)
  %add.6605 = bf16[1,14336,4096]{2,1,0} add(%multiply.8357, %multiply.8358)
  %divide.1717 = bf16[1,14336,4096]{2,1,0} divide(%add.6605, %broadcast.10140)
  %sqrt.215 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1717)
  %add.6606 = bf16[1,14336,4096]{2,1,0} add(%sqrt.215, %broadcast.10141)
  %multiply.8359 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6606)
  %divide.1718 = bf16[1,14336,4096]{2,1,0} divide(%add.6603, %multiply.8359)
  %multiply.8360 = bf16[1,14336,4096]{2,1,0} multiply(%param.296, %broadcast.10135)
  %add.6607 = bf16[1,14336,4096]{2,1,0} add(%divide.1718, %multiply.8360)
  %multiply.8361 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6607)
  %add.6608 = bf16[1,14336,4096]{2,1,0} add(%param.296, %multiply.8361)
  %divide.1719 = bf16[4096]{0} divide(%all-reduce.322, %broadcast.10081)
  %select.2804 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.322, %divide.1719)
  %multiply.8362 = bf16[4096]{0} multiply(%select.2804, %broadcast.10083)
  %param.761 = bf16[4096]{0} parameter(540), sharding={replicated}
  %multiply.8363 = bf16[4096]{0} multiply(%param.761, %broadcast.10085)
  %add.6609 = bf16[4096]{0} add(%multiply.8362, %multiply.8363)
  %multiply.8364 = bf16[4096]{0} multiply(%select.2804, %select.2804)
  %multiply.8365 = bf16[4096]{0} multiply(%multiply.8364, %broadcast.10088)
  %param.762 = bf16[4096]{0} parameter(863), sharding={replicated}
  %multiply.8366 = bf16[4096]{0} multiply(%param.762, %broadcast.10090)
  %add.6610 = bf16[4096]{0} add(%multiply.8365, %multiply.8366)
  %divide.1720 = bf16[4096]{0} divide(%add.6610, %broadcast.10092)
  %sqrt.216 = bf16[4096]{0} sqrt(%divide.1720)
  %add.6611 = bf16[4096]{0} add(%sqrt.216, %broadcast.10094)
  %multiply.8368 = bf16[4096]{0} multiply(%broadcast.10086, %add.6611)
  %divide.1721 = bf16[4096]{0} divide(%add.6609, %multiply.8368)
  %multiply.8369 = bf16[4096]{0} multiply(%param.292, %broadcast.10083)
  %add.6612 = bf16[4096]{0} add(%divide.1721, %multiply.8369)
  %multiply.8370 = bf16[4096]{0} multiply(%broadcast.5338, %add.6612)
  %add.6613 = bf16[4096]{0} add(%param.292, %multiply.8370)
  %divide.1722 = bf16[4096]{0} divide(%all-reduce.323, %broadcast.10081)
  %select.2805 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.323, %divide.1722)
  %multiply.8371 = bf16[4096]{0} multiply(%select.2805, %broadcast.10083)
  %param.763 = bf16[4096]{0} parameter(541), sharding={replicated}
  %multiply.8372 = bf16[4096]{0} multiply(%param.763, %broadcast.10085)
  %add.6614 = bf16[4096]{0} add(%multiply.8371, %multiply.8372)
  %multiply.8373 = bf16[4096]{0} multiply(%select.2805, %select.2805)
  %multiply.8374 = bf16[4096]{0} multiply(%multiply.8373, %broadcast.10088)
  %param.764 = bf16[4096]{0} parameter(864), sharding={replicated}
  %multiply.8375 = bf16[4096]{0} multiply(%param.764, %broadcast.10090)
  %add.6615 = bf16[4096]{0} add(%multiply.8374, %multiply.8375)
  %divide.1723 = bf16[4096]{0} divide(%add.6615, %broadcast.10092)
  %sqrt.217 = bf16[4096]{0} sqrt(%divide.1723)
  %add.6616 = bf16[4096]{0} add(%sqrt.217, %broadcast.10094)
  %multiply.8376 = bf16[4096]{0} multiply(%broadcast.10086, %add.6616)
  %divide.1724 = bf16[4096]{0} divide(%add.6614, %multiply.8376)
  %multiply.8377 = bf16[4096]{0} multiply(%param.287, %broadcast.10083)
  %add.6617 = bf16[4096]{0} add(%divide.1724, %multiply.8377)
  %multiply.8378 = bf16[4096]{0} multiply(%broadcast.5338, %add.6617)
  %add.6619 = bf16[4096]{0} add(%param.287, %multiply.8378)
  %divide.1725 = bf16[512,8,128]{0,2,1} divide(%transpose.404, %broadcast.10162)
  %select.2806 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.404, %divide.1725)
  %multiply.8379 = bf16[512,8,128]{0,2,1} multiply(%select.2806, %broadcast.10163)
  %param.765 = bf16[512,8,128]{2,1,0} parameter(542), sharding={devices=[8,1,1]<=[8]}
  %multiply.8381 = bf16[512,8,128]{2,1,0} multiply(%param.765, %broadcast.10164)
  %add.6620 = bf16[512,8,128]{0,2,1} add(%multiply.8379, %multiply.8381)
  %multiply.8382 = bf16[512,8,128]{0,2,1} multiply(%select.2806, %select.2806)
  %multiply.8383 = bf16[512,8,128]{0,2,1} multiply(%multiply.8382, %broadcast.10166)
  %param.766 = bf16[512,8,128]{2,1,0} parameter(865), sharding={devices=[8,1,1]<=[8]}
  %multiply.8384 = bf16[512,8,128]{2,1,0} multiply(%param.766, %broadcast.10167)
  %add.6621 = bf16[512,8,128]{0,2,1} add(%multiply.8383, %multiply.8384)
  %divide.1726 = bf16[512,8,128]{0,2,1} divide(%add.6621, %broadcast.10168)
  %sqrt.218 = bf16[512,8,128]{0,2,1} sqrt(%divide.1726)
  %add.6622 = bf16[512,8,128]{0,2,1} add(%sqrt.218, %broadcast.10169)
  %multiply.8385 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6622)
  %divide.1728 = bf16[512,8,128]{0,2,1} divide(%add.6620, %multiply.8385)
  %multiply.8387 = bf16[512,8,128]{2,1,0} multiply(%param.289, %broadcast.10163)
  %add.6623 = bf16[512,8,128]{0,2,1} add(%divide.1728, %multiply.8387)
  %multiply.8388 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6623)
  %add.6624 = bf16[512,8,128]{2,1,0} add(%param.289, %multiply.8388)
  %divide.1729 = bf16[32,128,512]{1,0,2} divide(%transpose.405, %broadcast.10172)
  %select.2807 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.405, %divide.1729)
  %multiply.8389 = bf16[32,128,512]{1,0,2} multiply(%select.2807, %broadcast.10173)
  %param.767 = bf16[32,128,512]{2,1,0} parameter(543), sharding={devices=[1,1,8]<=[8]}
  %multiply.8390 = bf16[32,128,512]{2,1,0} multiply(%param.767, %broadcast.10174)
  %add.6625 = bf16[32,128,512]{1,0,2} add(%multiply.8389, %multiply.8390)
  %multiply.8391 = bf16[32,128,512]{1,0,2} multiply(%select.2807, %select.2807)
  %multiply.8392 = bf16[32,128,512]{1,0,2} multiply(%multiply.8391, %broadcast.10176)
  %param.768 = bf16[32,128,512]{2,1,0} parameter(866), sharding={devices=[1,1,8]<=[8]}
  %multiply.8393 = bf16[32,128,512]{2,1,0} multiply(%param.768, %broadcast.10177)
  %add.6626 = bf16[32,128,512]{1,0,2} add(%multiply.8392, %multiply.8393)
  %divide.1730 = bf16[32,128,512]{1,0,2} divide(%add.6626, %broadcast.10178)
  %sqrt.219 = bf16[32,128,512]{1,0,2} sqrt(%divide.1730)
  %add.6627 = bf16[32,128,512]{1,0,2} add(%sqrt.219, %broadcast.10179)
  %multiply.8394 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6627)
  %divide.1731 = bf16[32,128,512]{1,0,2} divide(%add.6625, %multiply.8394)
  %multiply.8395 = bf16[32,128,512]{2,1,0} multiply(%param.291, %broadcast.10173)
  %add.6629 = bf16[32,128,512]{1,0,2} add(%divide.1731, %multiply.8395)
  %multiply.8396 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6629)
  %add.6630 = bf16[32,128,512]{2,1,0} add(%param.291, %multiply.8396)
  %divide.1732 = bf16[512,32,128]{0,2,1} divide(%transpose.406, %broadcast.10182)
  %select.2808 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.406, %divide.1732)
  %multiply.8397 = bf16[512,32,128]{0,2,1} multiply(%select.2808, %broadcast.10183)
  %param.769 = bf16[512,32,128]{2,1,0} parameter(544), sharding={devices=[8,1,1]<=[8]}
  %multiply.8398 = bf16[512,32,128]{2,1,0} multiply(%param.769, %broadcast.10184)
  %add.6631 = bf16[512,32,128]{0,2,1} add(%multiply.8397, %multiply.8398)
  %multiply.8399 = bf16[512,32,128]{0,2,1} multiply(%select.2808, %select.2808)
  %multiply.8400 = bf16[512,32,128]{0,2,1} multiply(%multiply.8399, %broadcast.10186)
  %param.770 = bf16[512,32,128]{2,1,0} parameter(867), sharding={devices=[8,1,1]<=[8]}
  %multiply.8401 = bf16[512,32,128]{2,1,0} multiply(%param.770, %broadcast.10187)
  %add.6632 = bf16[512,32,128]{0,2,1} add(%multiply.8400, %multiply.8401)
  %divide.1733 = bf16[512,32,128]{0,2,1} divide(%add.6632, %broadcast.10188)
  %sqrt.220 = bf16[512,32,128]{0,2,1} sqrt(%divide.1733)
  %add.6633 = bf16[512,32,128]{0,2,1} add(%sqrt.220, %broadcast.10189)
  %multiply.8402 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6633)
  %divide.1734 = bf16[512,32,128]{0,2,1} divide(%add.6631, %multiply.8402)
  %multiply.8403 = bf16[512,32,128]{2,1,0} multiply(%param.288, %broadcast.10183)
  %add.6634 = bf16[512,32,128]{0,2,1} add(%divide.1734, %multiply.8403)
  %multiply.8404 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6634)
  %add.6635 = bf16[512,32,128]{2,1,0} add(%param.288, %multiply.8404)
  %divide.1735 = bf16[512,8,128]{0,2,1} divide(%transpose.407, %broadcast.10162)
  %select.2809 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.407, %divide.1735)
  %multiply.8405 = bf16[512,8,128]{0,2,1} multiply(%select.2809, %broadcast.10163)
  %param.771 = bf16[512,8,128]{2,1,0} parameter(545), sharding={devices=[8,1,1]<=[8]}
  %multiply.8406 = bf16[512,8,128]{2,1,0} multiply(%param.771, %broadcast.10164)
  %add.6636 = bf16[512,8,128]{0,2,1} add(%multiply.8405, %multiply.8406)
  %multiply.8407 = bf16[512,8,128]{0,2,1} multiply(%select.2809, %select.2809)
  %multiply.8408 = bf16[512,8,128]{0,2,1} multiply(%multiply.8407, %broadcast.10166)
  %param.772 = bf16[512,8,128]{2,1,0} parameter(868), sharding={devices=[8,1,1]<=[8]}
  %multiply.8409 = bf16[512,8,128]{2,1,0} multiply(%param.772, %broadcast.10167)
  %add.6637 = bf16[512,8,128]{0,2,1} add(%multiply.8408, %multiply.8409)
  %divide.1736 = bf16[512,8,128]{0,2,1} divide(%add.6637, %broadcast.10168)
  %sqrt.221 = bf16[512,8,128]{0,2,1} sqrt(%divide.1736)
  %add.6638 = bf16[512,8,128]{0,2,1} add(%sqrt.221, %broadcast.10169)
  %multiply.8410 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6638)
  %divide.1737 = bf16[512,8,128]{0,2,1} divide(%add.6636, %multiply.8410)
  %multiply.8411 = bf16[512,8,128]{2,1,0} multiply(%param.290, %broadcast.10163)
  %add.6639 = bf16[512,8,128]{0,2,1} add(%divide.1737, %multiply.8411)
  %multiply.8412 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6639)
  %add.6640 = bf16[512,8,128]{2,1,0} add(%param.290, %multiply.8412)
  %divide.1738 = bf16[512,8]{0,1} divide(%dynamic-slice.2559, %broadcast.10097)
  %select.2810 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2559, %divide.1738)
  %multiply.8413 = bf16[512,8]{0,1} multiply(%select.2810, %broadcast.10098)
  %param.773 = bf16[512,8]{1,0} parameter(546), sharding={devices=[8,1]<=[8]}
  %multiply.8414 = bf16[512,8]{1,0} multiply(%param.773, %broadcast.10099)
  %add.6641 = bf16[512,8]{0,1} add(%multiply.8413, %multiply.8414)
  %multiply.8415 = bf16[512,8]{0,1} multiply(%select.2810, %select.2810)
  %multiply.8416 = bf16[512,8]{0,1} multiply(%multiply.8415, %broadcast.10101)
  %param.774 = bf16[512,8]{1,0} parameter(869), sharding={devices=[8,1]<=[8]}
  %multiply.8417 = bf16[512,8]{1,0} multiply(%param.774, %broadcast.10102)
  %add.6643 = bf16[512,8]{0,1} add(%multiply.8416, %multiply.8417)
  %divide.1739 = bf16[512,8]{0,1} divide(%add.6643, %broadcast.10103)
  %sqrt.222 = bf16[512,8]{0,1} sqrt(%divide.1739)
  %add.6644 = bf16[512,8]{0,1} add(%sqrt.222, %broadcast.10104)
  %multiply.8418 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6644)
  %divide.1740 = bf16[512,8]{0,1} divide(%add.6641, %multiply.8418)
  %multiply.8419 = bf16[512,8]{1,0} multiply(%param.303, %broadcast.10098)
  %add.6645 = bf16[512,8]{0,1} add(%divide.1740, %multiply.8419)
  %multiply.8420 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6645)
  %add.6646 = bf16[512,8]{1,0} add(%param.303, %multiply.8420)
  %divide.1741 = bf16[1,4096,14336]{2,1,0} divide(%copy.4267, %broadcast.10111)
  %select.2811 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4267, %divide.1741)
  %multiply.8421 = bf16[1,4096,14336]{2,1,0} multiply(%select.2811, %broadcast.10112)
  %param.775 = bf16[1,4096,14336]{2,1,0} parameter(547), sharding={devices=[8,1,1]<=[8]}
  %multiply.8422 = bf16[1,4096,14336]{2,1,0} multiply(%param.775, %broadcast.10113)
  %add.6647 = bf16[1,4096,14336]{2,1,0} add(%multiply.8421, %multiply.8422)
  %multiply.8423 = bf16[1,4096,14336]{2,1,0} multiply(%select.2811, %select.2811)
  %multiply.8424 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8423, %broadcast.10115)
  %param.776 = bf16[1,4096,14336]{2,1,0} parameter(870), sharding={devices=[8,1,1]<=[8]}
  %multiply.8425 = bf16[1,4096,14336]{2,1,0} multiply(%param.776, %broadcast.10116)
  %add.6648 = bf16[1,4096,14336]{2,1,0} add(%multiply.8424, %multiply.8425)
  %divide.1742 = bf16[1,4096,14336]{2,1,0} divide(%add.6648, %broadcast.10117)
  %sqrt.223 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1742)
  %add.6649 = bf16[1,4096,14336]{2,1,0} add(%sqrt.223, %broadcast.10119)
  %multiply.8426 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6649)
  %divide.1743 = bf16[1,4096,14336]{2,1,0} divide(%add.6647, %multiply.8426)
  %multiply.8427 = bf16[1,4096,14336]{2,1,0} multiply(%param.304, %broadcast.10112)
  %add.6650 = bf16[1,4096,14336]{2,1,0} add(%divide.1743, %multiply.8427)
  %multiply.8428 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6650)
  %add.6652 = bf16[1,4096,14336]{2,1,0} add(%param.304, %multiply.8428)
  %divide.1744 = bf16[1,4096,14336]{2,1,0} divide(%copy.4268, %broadcast.10111)
  %select.2812 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4268, %divide.1744)
  %multiply.8429 = bf16[1,4096,14336]{2,1,0} multiply(%select.2812, %broadcast.10112)
  %param.777 = bf16[1,4096,14336]{2,1,0} parameter(548), sharding={devices=[8,1,1]<=[8]}
  %multiply.8430 = bf16[1,4096,14336]{2,1,0} multiply(%param.777, %broadcast.10113)
  %add.6653 = bf16[1,4096,14336]{2,1,0} add(%multiply.8429, %multiply.8430)
  %multiply.8431 = bf16[1,4096,14336]{2,1,0} multiply(%select.2812, %select.2812)
  %multiply.8432 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8431, %broadcast.10115)
  %param.778 = bf16[1,4096,14336]{2,1,0} parameter(871), sharding={devices=[8,1,1]<=[8]}
  %multiply.8433 = bf16[1,4096,14336]{2,1,0} multiply(%param.778, %broadcast.10116)
  %add.6654 = bf16[1,4096,14336]{2,1,0} add(%multiply.8432, %multiply.8433)
  %divide.1745 = bf16[1,4096,14336]{2,1,0} divide(%add.6654, %broadcast.10117)
  %sqrt.224 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1745)
  %add.6655 = bf16[1,4096,14336]{2,1,0} add(%sqrt.224, %broadcast.10119)
  %multiply.8434 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6655)
  %divide.1746 = bf16[1,4096,14336]{2,1,0} divide(%add.6653, %multiply.8434)
  %multiply.8435 = bf16[1,4096,14336]{2,1,0} multiply(%param.305, %broadcast.10112)
  %add.6656 = bf16[1,4096,14336]{2,1,0} add(%divide.1746, %multiply.8435)
  %multiply.8436 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6656)
  %add.6657 = bf16[1,4096,14336]{2,1,0} add(%param.305, %multiply.8436)
  %divide.1747 = bf16[1,14336,4096]{2,1,0} divide(%copy.4269, %broadcast.10134)
  %select.2813 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4269, %divide.1747)
  %multiply.8437 = bf16[1,14336,4096]{2,1,0} multiply(%select.2813, %broadcast.10135)
  %param.779 = bf16[1,14336,4096]{2,1,0} parameter(549), sharding={devices=[8,1,1]<=[8]}
  %multiply.8438 = bf16[1,14336,4096]{2,1,0} multiply(%param.779, %broadcast.10136)
  %add.6658 = bf16[1,14336,4096]{2,1,0} add(%multiply.8437, %multiply.8438)
  %multiply.8439 = bf16[1,14336,4096]{2,1,0} multiply(%select.2813, %select.2813)
  %multiply.8440 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8439, %broadcast.10138)
  %param.780 = bf16[1,14336,4096]{2,1,0} parameter(872), sharding={devices=[8,1,1]<=[8]}
  %multiply.8441 = bf16[1,14336,4096]{2,1,0} multiply(%param.780, %broadcast.10139)
  %add.6659 = bf16[1,14336,4096]{2,1,0} add(%multiply.8440, %multiply.8441)
  %divide.1748 = bf16[1,14336,4096]{2,1,0} divide(%add.6659, %broadcast.10140)
  %sqrt.225 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1748)
  %add.6660 = bf16[1,14336,4096]{2,1,0} add(%sqrt.225, %broadcast.10141)
  %multiply.8442 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6660)
  %divide.1749 = bf16[1,14336,4096]{2,1,0} divide(%add.6658, %multiply.8442)
  %multiply.8443 = bf16[1,14336,4096]{2,1,0} multiply(%param.306, %broadcast.10135)
  %add.6661 = bf16[1,14336,4096]{2,1,0} add(%divide.1749, %multiply.8443)
  %multiply.8444 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6661)
  %add.6662 = bf16[1,14336,4096]{2,1,0} add(%param.306, %multiply.8444)
  %divide.1750 = bf16[4096]{0} divide(%all-reduce.337, %broadcast.10081)
  %select.2814 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.337, %divide.1750)
  %multiply.8445 = bf16[4096]{0} multiply(%select.2814, %broadcast.10083)
  %param.781 = bf16[4096]{0} parameter(550), sharding={replicated}
  %multiply.8446 = bf16[4096]{0} multiply(%param.781, %broadcast.10085)
  %add.6663 = bf16[4096]{0} add(%multiply.8445, %multiply.8446)
  %multiply.8447 = bf16[4096]{0} multiply(%select.2814, %select.2814)
  %multiply.8448 = bf16[4096]{0} multiply(%multiply.8447, %broadcast.10088)
  %param.782 = bf16[4096]{0} parameter(873), sharding={replicated}
  %multiply.8449 = bf16[4096]{0} multiply(%param.782, %broadcast.10090)
  %add.6664 = bf16[4096]{0} add(%multiply.8448, %multiply.8449)
  %divide.1751 = bf16[4096]{0} divide(%add.6664, %broadcast.10092)
  %sqrt.226 = bf16[4096]{0} sqrt(%divide.1751)
  %add.6665 = bf16[4096]{0} add(%sqrt.226, %broadcast.10094)
  %multiply.8450 = bf16[4096]{0} multiply(%broadcast.10086, %add.6665)
  %divide.1752 = bf16[4096]{0} divide(%add.6663, %multiply.8450)
  %multiply.8451 = bf16[4096]{0} multiply(%param.302, %broadcast.10083)
  %add.6666 = bf16[4096]{0} add(%divide.1752, %multiply.8451)
  %multiply.8452 = bf16[4096]{0} multiply(%broadcast.5338, %add.6666)
  %add.6667 = bf16[4096]{0} add(%param.302, %multiply.8452)
  %divide.1753 = bf16[4096]{0} divide(%all-reduce.338, %broadcast.10081)
  %select.2815 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.338, %divide.1753)
  %multiply.8453 = bf16[4096]{0} multiply(%select.2815, %broadcast.10083)
  %param.783 = bf16[4096]{0} parameter(551), sharding={replicated}
  %multiply.8454 = bf16[4096]{0} multiply(%param.783, %broadcast.10085)
  %add.6668 = bf16[4096]{0} add(%multiply.8453, %multiply.8454)
  %multiply.8455 = bf16[4096]{0} multiply(%select.2815, %select.2815)
  %multiply.8456 = bf16[4096]{0} multiply(%multiply.8455, %broadcast.10088)
  %param.784 = bf16[4096]{0} parameter(874), sharding={replicated}
  %multiply.8457 = bf16[4096]{0} multiply(%param.784, %broadcast.10090)
  %add.6669 = bf16[4096]{0} add(%multiply.8456, %multiply.8457)
  %divide.1754 = bf16[4096]{0} divide(%add.6669, %broadcast.10092)
  %sqrt.227 = bf16[4096]{0} sqrt(%divide.1754)
  %add.6670 = bf16[4096]{0} add(%sqrt.227, %broadcast.10094)
  %multiply.8458 = bf16[4096]{0} multiply(%broadcast.10086, %add.6670)
  %divide.1755 = bf16[4096]{0} divide(%add.6668, %multiply.8458)
  %multiply.8459 = bf16[4096]{0} multiply(%param.297, %broadcast.10083)
  %add.6671 = bf16[4096]{0} add(%divide.1755, %multiply.8459)
  %multiply.8460 = bf16[4096]{0} multiply(%broadcast.5338, %add.6671)
  %add.6672 = bf16[4096]{0} add(%param.297, %multiply.8460)
  %divide.1756 = bf16[512,8,128]{0,2,1} divide(%transpose.408, %broadcast.10162)
  %select.2816 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.408, %divide.1756)
  %multiply.8461 = bf16[512,8,128]{0,2,1} multiply(%select.2816, %broadcast.10163)
  %param.785 = bf16[512,8,128]{2,1,0} parameter(552), sharding={devices=[8,1,1]<=[8]}
  %multiply.8462 = bf16[512,8,128]{2,1,0} multiply(%param.785, %broadcast.10164)
  %add.6673 = bf16[512,8,128]{0,2,1} add(%multiply.8461, %multiply.8462)
  %multiply.8464 = bf16[512,8,128]{0,2,1} multiply(%select.2816, %select.2816)
  %multiply.8465 = bf16[512,8,128]{0,2,1} multiply(%multiply.8464, %broadcast.10166)
  %param.786 = bf16[512,8,128]{2,1,0} parameter(875), sharding={devices=[8,1,1]<=[8]}
  %multiply.8466 = bf16[512,8,128]{2,1,0} multiply(%param.786, %broadcast.10167)
  %add.6674 = bf16[512,8,128]{0,2,1} add(%multiply.8465, %multiply.8466)
  %divide.1757 = bf16[512,8,128]{0,2,1} divide(%add.6674, %broadcast.10168)
  %sqrt.228 = bf16[512,8,128]{0,2,1} sqrt(%divide.1757)
  %add.6675 = bf16[512,8,128]{0,2,1} add(%sqrt.228, %broadcast.10169)
  %multiply.8467 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6675)
  %divide.1758 = bf16[512,8,128]{0,2,1} divide(%add.6673, %multiply.8467)
  %multiply.8468 = bf16[512,8,128]{2,1,0} multiply(%param.299, %broadcast.10163)
  %add.6676 = bf16[512,8,128]{0,2,1} add(%divide.1758, %multiply.8468)
  %multiply.8469 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6676)
  %add.6677 = bf16[512,8,128]{2,1,0} add(%param.299, %multiply.8469)
  %divide.1759 = bf16[32,128,512]{1,0,2} divide(%transpose.409, %broadcast.10172)
  %select.2817 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.409, %divide.1759)
  %multiply.8472 = bf16[32,128,512]{1,0,2} multiply(%select.2817, %broadcast.10173)
  %param.787 = bf16[32,128,512]{2,1,0} parameter(553), sharding={devices=[1,1,8]<=[8]}
  %multiply.8473 = bf16[32,128,512]{2,1,0} multiply(%param.787, %broadcast.10174)
  %add.6678 = bf16[32,128,512]{1,0,2} add(%multiply.8472, %multiply.8473)
  %multiply.8474 = bf16[32,128,512]{1,0,2} multiply(%select.2817, %select.2817)
  %multiply.8475 = bf16[32,128,512]{1,0,2} multiply(%multiply.8474, %broadcast.10176)
  %param.788 = bf16[32,128,512]{2,1,0} parameter(876), sharding={devices=[1,1,8]<=[8]}
  %multiply.8476 = bf16[32,128,512]{2,1,0} multiply(%param.788, %broadcast.10177)
  %add.6679 = bf16[32,128,512]{1,0,2} add(%multiply.8475, %multiply.8476)
  %divide.1760 = bf16[32,128,512]{1,0,2} divide(%add.6679, %broadcast.10178)
  %sqrt.229 = bf16[32,128,512]{1,0,2} sqrt(%divide.1760)
  %add.6680 = bf16[32,128,512]{1,0,2} add(%sqrt.229, %broadcast.10179)
  %multiply.8477 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6680)
  %divide.1761 = bf16[32,128,512]{1,0,2} divide(%add.6678, %multiply.8477)
  %multiply.8479 = bf16[32,128,512]{2,1,0} multiply(%param.301, %broadcast.10173)
  %add.6681 = bf16[32,128,512]{1,0,2} add(%divide.1761, %multiply.8479)
  %multiply.8480 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6681)
  %add.6682 = bf16[32,128,512]{2,1,0} add(%param.301, %multiply.8480)
  %divide.1762 = bf16[512,32,128]{0,2,1} divide(%transpose.410, %broadcast.10182)
  %select.2818 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.410, %divide.1762)
  %multiply.8481 = bf16[512,32,128]{0,2,1} multiply(%select.2818, %broadcast.10183)
  %param.789 = bf16[512,32,128]{2,1,0} parameter(554), sharding={devices=[8,1,1]<=[8]}
  %multiply.8482 = bf16[512,32,128]{2,1,0} multiply(%param.789, %broadcast.10184)
  %add.6684 = bf16[512,32,128]{0,2,1} add(%multiply.8481, %multiply.8482)
  %multiply.8483 = bf16[512,32,128]{0,2,1} multiply(%select.2818, %select.2818)
  %multiply.8484 = bf16[512,32,128]{0,2,1} multiply(%multiply.8483, %broadcast.10186)
  %param.790 = bf16[512,32,128]{2,1,0} parameter(877), sharding={devices=[8,1,1]<=[8]}
  %multiply.8486 = bf16[512,32,128]{2,1,0} multiply(%param.790, %broadcast.10187)
  %add.6685 = bf16[512,32,128]{0,2,1} add(%multiply.8484, %multiply.8486)
  %divide.1763 = bf16[512,32,128]{0,2,1} divide(%add.6685, %broadcast.10188)
  %sqrt.230 = bf16[512,32,128]{0,2,1} sqrt(%divide.1763)
  %add.6686 = bf16[512,32,128]{0,2,1} add(%sqrt.230, %broadcast.10189)
  %multiply.8487 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6686)
  %divide.1764 = bf16[512,32,128]{0,2,1} divide(%add.6684, %multiply.8487)
  %multiply.8488 = bf16[512,32,128]{2,1,0} multiply(%param.298, %broadcast.10183)
  %add.6687 = bf16[512,32,128]{0,2,1} add(%divide.1764, %multiply.8488)
  %multiply.8489 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6687)
  %add.6688 = bf16[512,32,128]{2,1,0} add(%param.298, %multiply.8489)
  %divide.1765 = bf16[512,8,128]{0,2,1} divide(%transpose.411, %broadcast.10162)
  %select.2819 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.411, %divide.1765)
  %multiply.8490 = bf16[512,8,128]{0,2,1} multiply(%select.2819, %broadcast.10163)
  %param.791 = bf16[512,8,128]{2,1,0} parameter(555), sharding={devices=[8,1,1]<=[8]}
  %multiply.8491 = bf16[512,8,128]{2,1,0} multiply(%param.791, %broadcast.10164)
  %add.6689 = bf16[512,8,128]{0,2,1} add(%multiply.8490, %multiply.8491)
  %multiply.8492 = bf16[512,8,128]{0,2,1} multiply(%select.2819, %select.2819)
  %multiply.8493 = bf16[512,8,128]{0,2,1} multiply(%multiply.8492, %broadcast.10166)
  %param.792 = bf16[512,8,128]{2,1,0} parameter(878), sharding={devices=[8,1,1]<=[8]}
  %multiply.8494 = bf16[512,8,128]{2,1,0} multiply(%param.792, %broadcast.10167)
  %add.6691 = bf16[512,8,128]{0,2,1} add(%multiply.8493, %multiply.8494)
  %divide.1766 = bf16[512,8,128]{0,2,1} divide(%add.6691, %broadcast.10168)
  %sqrt.231 = bf16[512,8,128]{0,2,1} sqrt(%divide.1766)
  %add.6692 = bf16[512,8,128]{0,2,1} add(%sqrt.231, %broadcast.10169)
  %multiply.8495 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6692)
  %divide.1767 = bf16[512,8,128]{0,2,1} divide(%add.6689, %multiply.8495)
  %multiply.8496 = bf16[512,8,128]{2,1,0} multiply(%param.300, %broadcast.10163)
  %add.6693 = bf16[512,8,128]{0,2,1} add(%divide.1767, %multiply.8496)
  %multiply.8497 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6693)
  %add.6694 = bf16[512,8,128]{2,1,0} add(%param.300, %multiply.8497)
  %divide.1768 = bf16[512,8]{0,1} divide(%dynamic-slice.2569, %broadcast.10097)
  %select.2820 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2569, %divide.1768)
  %multiply.8498 = bf16[512,8]{0,1} multiply(%select.2820, %broadcast.10098)
  %param.793 = bf16[512,8]{1,0} parameter(556), sharding={devices=[8,1]<=[8]}
  %multiply.8499 = bf16[512,8]{1,0} multiply(%param.793, %broadcast.10099)
  %add.6696 = bf16[512,8]{0,1} add(%multiply.8498, %multiply.8499)
  %multiply.8500 = bf16[512,8]{0,1} multiply(%select.2820, %select.2820)
  %multiply.8502 = bf16[512,8]{0,1} multiply(%multiply.8500, %broadcast.10101)
  %param.794 = bf16[512,8]{1,0} parameter(879), sharding={devices=[8,1]<=[8]}
  %multiply.8503 = bf16[512,8]{1,0} multiply(%param.794, %broadcast.10102)
  %add.6697 = bf16[512,8]{0,1} add(%multiply.8502, %multiply.8503)
  %divide.1769 = bf16[512,8]{0,1} divide(%add.6697, %broadcast.10103)
  %sqrt.232 = bf16[512,8]{0,1} sqrt(%divide.1769)
  %add.6698 = bf16[512,8]{0,1} add(%sqrt.232, %broadcast.10104)
  %multiply.8504 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6698)
  %divide.1770 = bf16[512,8]{0,1} divide(%add.6696, %multiply.8504)
  %multiply.8505 = bf16[512,8]{1,0} multiply(%param.43, %broadcast.10098)
  %add.6699 = bf16[512,8]{0,1} add(%divide.1770, %multiply.8505)
  %multiply.8506 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6699)
  %add.6700 = bf16[512,8]{1,0} add(%param.43, %multiply.8506)
  %divide.1771 = bf16[1,4096,14336]{2,1,0} divide(%copy.4270, %broadcast.10111)
  %select.2821 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4270, %divide.1771)
  %multiply.8507 = bf16[1,4096,14336]{2,1,0} multiply(%select.2821, %broadcast.10112)
  %param.795 = bf16[1,4096,14336]{2,1,0} parameter(557), sharding={devices=[8,1,1]<=[8]}
  %multiply.8508 = bf16[1,4096,14336]{2,1,0} multiply(%param.795, %broadcast.10113)
  %add.6701 = bf16[1,4096,14336]{2,1,0} add(%multiply.8507, %multiply.8508)
  %multiply.8509 = bf16[1,4096,14336]{2,1,0} multiply(%select.2821, %select.2821)
  %multiply.8510 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8509, %broadcast.10115)
  %param.796 = bf16[1,4096,14336]{2,1,0} parameter(880), sharding={devices=[8,1,1]<=[8]}
  %multiply.8512 = bf16[1,4096,14336]{2,1,0} multiply(%param.796, %broadcast.10116)
  %add.6702 = bf16[1,4096,14336]{2,1,0} add(%multiply.8510, %multiply.8512)
  %divide.1772 = bf16[1,4096,14336]{2,1,0} divide(%add.6702, %broadcast.10117)
  %sqrt.233 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1772)
  %add.6703 = bf16[1,4096,14336]{2,1,0} add(%sqrt.233, %broadcast.10119)
  %multiply.8513 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6703)
  %divide.1773 = bf16[1,4096,14336]{2,1,0} divide(%add.6701, %multiply.8513)
  %multiply.8514 = bf16[1,4096,14336]{2,1,0} multiply(%param.44, %broadcast.10112)
  %add.6704 = bf16[1,4096,14336]{2,1,0} add(%divide.1773, %multiply.8514)
  %multiply.8515 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6704)
  %add.6705 = bf16[1,4096,14336]{2,1,0} add(%param.44, %multiply.8515)
  %divide.1774 = bf16[1,4096,14336]{2,1,0} divide(%copy.4271, %broadcast.10111)
  %select.2822 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4271, %divide.1774)
  %multiply.8516 = bf16[1,4096,14336]{2,1,0} multiply(%select.2822, %broadcast.10112)
  %param.797 = bf16[1,4096,14336]{2,1,0} parameter(558), sharding={devices=[8,1,1]<=[8]}
  %multiply.8517 = bf16[1,4096,14336]{2,1,0} multiply(%param.797, %broadcast.10113)
  %add.6706 = bf16[1,4096,14336]{2,1,0} add(%multiply.8516, %multiply.8517)
  %multiply.8518 = bf16[1,4096,14336]{2,1,0} multiply(%select.2822, %select.2822)
  %multiply.8519 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8518, %broadcast.10115)
  %param.798 = bf16[1,4096,14336]{2,1,0} parameter(881), sharding={devices=[8,1,1]<=[8]}
  %multiply.8520 = bf16[1,4096,14336]{2,1,0} multiply(%param.798, %broadcast.10116)
  %add.6707 = bf16[1,4096,14336]{2,1,0} add(%multiply.8519, %multiply.8520)
  %divide.1775 = bf16[1,4096,14336]{2,1,0} divide(%add.6707, %broadcast.10117)
  %sqrt.234 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1775)
  %add.6708 = bf16[1,4096,14336]{2,1,0} add(%sqrt.234, %broadcast.10119)
  %multiply.8521 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6708)
  %divide.1776 = bf16[1,4096,14336]{2,1,0} divide(%add.6706, %multiply.8521)
  %multiply.8522 = bf16[1,4096,14336]{2,1,0} multiply(%param.45, %broadcast.10112)
  %add.6709 = bf16[1,4096,14336]{2,1,0} add(%divide.1776, %multiply.8522)
  %multiply.8523 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6709)
  %add.6710 = bf16[1,4096,14336]{2,1,0} add(%param.45, %multiply.8523)
  %divide.1777 = bf16[1,14336,4096]{2,1,0} divide(%copy.4272, %broadcast.10134)
  %select.2823 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4272, %divide.1777)
  %multiply.8525 = bf16[1,14336,4096]{2,1,0} multiply(%select.2823, %broadcast.10135)
  %param.799 = bf16[1,14336,4096]{2,1,0} parameter(559), sharding={devices=[8,1,1]<=[8]}
  %multiply.8526 = bf16[1,14336,4096]{2,1,0} multiply(%param.799, %broadcast.10136)
  %add.6711 = bf16[1,14336,4096]{2,1,0} add(%multiply.8525, %multiply.8526)
  %multiply.8527 = bf16[1,14336,4096]{2,1,0} multiply(%select.2823, %select.2823)
  %multiply.8528 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8527, %broadcast.10138)
  %param.800 = bf16[1,14336,4096]{2,1,0} parameter(882), sharding={devices=[8,1,1]<=[8]}
  %multiply.8529 = bf16[1,14336,4096]{2,1,0} multiply(%param.800, %broadcast.10139)
  %add.6712 = bf16[1,14336,4096]{2,1,0} add(%multiply.8528, %multiply.8529)
  %divide.1778 = bf16[1,14336,4096]{2,1,0} divide(%add.6712, %broadcast.10140)
  %sqrt.235 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1778)
  %add.6713 = bf16[1,14336,4096]{2,1,0} add(%sqrt.235, %broadcast.10141)
  %multiply.8531 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6713)
  %divide.1779 = bf16[1,14336,4096]{2,1,0} divide(%add.6711, %multiply.8531)
  %multiply.8532 = bf16[1,14336,4096]{2,1,0} multiply(%param.46, %broadcast.10135)
  %add.6714 = bf16[1,14336,4096]{2,1,0} add(%divide.1779, %multiply.8532)
  %multiply.8533 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6714)
  %add.6715 = bf16[1,14336,4096]{2,1,0} add(%param.46, %multiply.8533)
  %divide.1780 = bf16[4096]{0} divide(%all-reduce.352, %broadcast.10081)
  %select.2824 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.352, %divide.1780)
  %multiply.8534 = bf16[4096]{0} multiply(%select.2824, %broadcast.10083)
  %param.801 = bf16[4096]{0} parameter(560), sharding={replicated}
  %multiply.8535 = bf16[4096]{0} multiply(%param.801, %broadcast.10085)
  %add.6716 = bf16[4096]{0} add(%multiply.8534, %multiply.8535)
  %multiply.8536 = bf16[4096]{0} multiply(%select.2824, %select.2824)
  %multiply.8537 = bf16[4096]{0} multiply(%multiply.8536, %broadcast.10088)
  %param.802 = bf16[4096]{0} parameter(883), sharding={replicated}
  %multiply.8538 = bf16[4096]{0} multiply(%param.802, %broadcast.10090)
  %add.6717 = bf16[4096]{0} add(%multiply.8537, %multiply.8538)
  %divide.1781 = bf16[4096]{0} divide(%add.6717, %broadcast.10092)
  %sqrt.236 = bf16[4096]{0} sqrt(%divide.1781)
  %add.6718 = bf16[4096]{0} add(%sqrt.236, %broadcast.10094)
  %multiply.8540 = bf16[4096]{0} multiply(%broadcast.10086, %add.6718)
  %divide.1782 = bf16[4096]{0} divide(%add.6716, %multiply.8540)
  %multiply.8541 = bf16[4096]{0} multiply(%param.42, %broadcast.10083)
  %add.6719 = bf16[4096]{0} add(%divide.1782, %multiply.8541)
  %multiply.8542 = bf16[4096]{0} multiply(%broadcast.5338, %add.6719)
  %add.6720 = bf16[4096]{0} add(%param.42, %multiply.8542)
  %divide.1783 = bf16[4096]{0} divide(%all-reduce.353, %broadcast.10081)
  %select.2825 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.353, %divide.1783)
  %multiply.8543 = bf16[4096]{0} multiply(%select.2825, %broadcast.10083)
  %param.803 = bf16[4096]{0} parameter(561), sharding={replicated}
  %multiply.8544 = bf16[4096]{0} multiply(%param.803, %broadcast.10085)
  %add.6721 = bf16[4096]{0} add(%multiply.8543, %multiply.8544)
  %multiply.8545 = bf16[4096]{0} multiply(%select.2825, %select.2825)
  %multiply.8546 = bf16[4096]{0} multiply(%multiply.8545, %broadcast.10088)
  %param.804 = bf16[4096]{0} parameter(884), sharding={replicated}
  %multiply.8547 = bf16[4096]{0} multiply(%param.804, %broadcast.10090)
  %add.6722 = bf16[4096]{0} add(%multiply.8546, %multiply.8547)
  %divide.1784 = bf16[4096]{0} divide(%add.6722, %broadcast.10092)
  %sqrt.237 = bf16[4096]{0} sqrt(%divide.1784)
  %add.6723 = bf16[4096]{0} add(%sqrt.237, %broadcast.10094)
  %multiply.8548 = bf16[4096]{0} multiply(%broadcast.10086, %add.6723)
  %divide.1785 = bf16[4096]{0} divide(%add.6721, %multiply.8548)
  %multiply.8549 = bf16[4096]{0} multiply(%param.37, %broadcast.10083)
  %add.6724 = bf16[4096]{0} add(%divide.1785, %multiply.8549)
  %multiply.8550 = bf16[4096]{0} multiply(%broadcast.5338, %add.6724)
  %add.6725 = bf16[4096]{0} add(%param.37, %multiply.8550)
  %divide.1786 = bf16[512,8,128]{0,2,1} divide(%transpose.412, %broadcast.10162)
  %select.2826 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.412, %divide.1786)
  %multiply.8551 = bf16[512,8,128]{0,2,1} multiply(%select.2826, %broadcast.10163)
  %param.805 = bf16[512,8,128]{2,1,0} parameter(562), sharding={devices=[8,1,1]<=[8]}
  %multiply.8552 = bf16[512,8,128]{2,1,0} multiply(%param.805, %broadcast.10164)
  %add.6726 = bf16[512,8,128]{0,2,1} add(%multiply.8551, %multiply.8552)
  %multiply.8553 = bf16[512,8,128]{0,2,1} multiply(%select.2826, %select.2826)
  %multiply.8554 = bf16[512,8,128]{0,2,1} multiply(%multiply.8553, %broadcast.10166)
  %param.806 = bf16[512,8,128]{2,1,0} parameter(885), sharding={devices=[8,1,1]<=[8]}
  %multiply.8555 = bf16[512,8,128]{2,1,0} multiply(%param.806, %broadcast.10167)
  %add.6727 = bf16[512,8,128]{0,2,1} add(%multiply.8554, %multiply.8555)
  %divide.1787 = bf16[512,8,128]{0,2,1} divide(%add.6727, %broadcast.10168)
  %sqrt.238 = bf16[512,8,128]{0,2,1} sqrt(%divide.1787)
  %add.6728 = bf16[512,8,128]{0,2,1} add(%sqrt.238, %broadcast.10169)
  %multiply.8556 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6728)
  %divide.1788 = bf16[512,8,128]{0,2,1} divide(%add.6726, %multiply.8556)
  %multiply.8557 = bf16[512,8,128]{2,1,0} multiply(%param.39, %broadcast.10163)
  %add.6729 = bf16[512,8,128]{0,2,1} add(%divide.1788, %multiply.8557)
  %multiply.8558 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6729)
  %add.6730 = bf16[512,8,128]{2,1,0} add(%param.39, %multiply.8558)
  %divide.1789 = bf16[32,128,512]{1,0,2} divide(%transpose.413, %broadcast.10172)
  %select.2827 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.413, %divide.1789)
  %multiply.8559 = bf16[32,128,512]{1,0,2} multiply(%select.2827, %broadcast.10173)
  %param.807 = bf16[32,128,512]{2,1,0} parameter(563), sharding={devices=[1,1,8]<=[8]}
  %multiply.8560 = bf16[32,128,512]{2,1,0} multiply(%param.807, %broadcast.10174)
  %add.6731 = bf16[32,128,512]{1,0,2} add(%multiply.8559, %multiply.8560)
  %multiply.8562 = bf16[32,128,512]{1,0,2} multiply(%select.2827, %select.2827)
  %multiply.8563 = bf16[32,128,512]{1,0,2} multiply(%multiply.8562, %broadcast.10176)
  %param.808 = bf16[32,128,512]{2,1,0} parameter(886), sharding={devices=[1,1,8]<=[8]}
  %multiply.8564 = bf16[32,128,512]{2,1,0} multiply(%param.808, %broadcast.10177)
  %add.6732 = bf16[32,128,512]{1,0,2} add(%multiply.8563, %multiply.8564)
  %divide.1790 = bf16[32,128,512]{1,0,2} divide(%add.6732, %broadcast.10178)
  %sqrt.239 = bf16[32,128,512]{1,0,2} sqrt(%divide.1790)
  %add.6733 = bf16[32,128,512]{1,0,2} add(%sqrt.239, %broadcast.10179)
  %multiply.8566 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6733)
  %divide.1791 = bf16[32,128,512]{1,0,2} divide(%add.6731, %multiply.8566)
  %multiply.8567 = bf16[32,128,512]{2,1,0} multiply(%param.41, %broadcast.10173)
  %add.6734 = bf16[32,128,512]{1,0,2} add(%divide.1791, %multiply.8567)
  %multiply.8568 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6734)
  %add.6735 = bf16[32,128,512]{2,1,0} add(%param.41, %multiply.8568)
  %divide.1792 = bf16[512,32,128]{0,2,1} divide(%transpose.414, %broadcast.10182)
  %select.2828 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.414, %divide.1792)
  %multiply.8569 = bf16[512,32,128]{0,2,1} multiply(%select.2828, %broadcast.10183)
  %param.809 = bf16[512,32,128]{2,1,0} parameter(564), sharding={devices=[8,1,1]<=[8]}
  %multiply.8571 = bf16[512,32,128]{2,1,0} multiply(%param.809, %broadcast.10184)
  %add.6736 = bf16[512,32,128]{0,2,1} add(%multiply.8569, %multiply.8571)
  %multiply.8572 = bf16[512,32,128]{0,2,1} multiply(%select.2828, %select.2828)
  %multiply.8573 = bf16[512,32,128]{0,2,1} multiply(%multiply.8572, %broadcast.10186)
  %param.810 = bf16[512,32,128]{2,1,0} parameter(887), sharding={devices=[8,1,1]<=[8]}
  %multiply.8575 = bf16[512,32,128]{2,1,0} multiply(%param.810, %broadcast.10187)
  %add.6737 = bf16[512,32,128]{0,2,1} add(%multiply.8573, %multiply.8575)
  %divide.1793 = bf16[512,32,128]{0,2,1} divide(%add.6737, %broadcast.10188)
  %sqrt.240 = bf16[512,32,128]{0,2,1} sqrt(%divide.1793)
  %add.6738 = bf16[512,32,128]{0,2,1} add(%sqrt.240, %broadcast.10189)
  %multiply.8576 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6738)
  %divide.1794 = bf16[512,32,128]{0,2,1} divide(%add.6736, %multiply.8576)
  %multiply.8577 = bf16[512,32,128]{2,1,0} multiply(%param.38, %broadcast.10183)
  %add.6739 = bf16[512,32,128]{0,2,1} add(%divide.1794, %multiply.8577)
  %multiply.8578 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6739)
  %add.6740 = bf16[512,32,128]{2,1,0} add(%param.38, %multiply.8578)
  %divide.1795 = bf16[512,8,128]{0,2,1} divide(%transpose.415, %broadcast.10162)
  %select.2829 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.415, %divide.1795)
  %multiply.8580 = bf16[512,8,128]{0,2,1} multiply(%select.2829, %broadcast.10163)
  %param.811 = bf16[512,8,128]{2,1,0} parameter(565), sharding={devices=[8,1,1]<=[8]}
  %multiply.8581 = bf16[512,8,128]{2,1,0} multiply(%param.811, %broadcast.10164)
  %add.6741 = bf16[512,8,128]{0,2,1} add(%multiply.8580, %multiply.8581)
  %multiply.8582 = bf16[512,8,128]{0,2,1} multiply(%select.2829, %select.2829)
  %multiply.8583 = bf16[512,8,128]{0,2,1} multiply(%multiply.8582, %broadcast.10166)
  %param.812 = bf16[512,8,128]{2,1,0} parameter(888), sharding={devices=[8,1,1]<=[8]}
  %multiply.8584 = bf16[512,8,128]{2,1,0} multiply(%param.812, %broadcast.10167)
  %add.6742 = bf16[512,8,128]{0,2,1} add(%multiply.8583, %multiply.8584)
  %divide.1796 = bf16[512,8,128]{0,2,1} divide(%add.6742, %broadcast.10168)
  %sqrt.241 = bf16[512,8,128]{0,2,1} sqrt(%divide.1796)
  %add.6743 = bf16[512,8,128]{0,2,1} add(%sqrt.241, %broadcast.10169)
  %multiply.8585 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6743)
  %divide.1797 = bf16[512,8,128]{0,2,1} divide(%add.6741, %multiply.8585)
  %multiply.8586 = bf16[512,8,128]{2,1,0} multiply(%param.40, %broadcast.10163)
  %add.6744 = bf16[512,8,128]{0,2,1} add(%divide.1797, %multiply.8586)
  %multiply.8587 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6744)
  %add.6745 = bf16[512,8,128]{2,1,0} add(%param.40, %multiply.8587)
  %divide.1798 = bf16[512,8]{0,1} divide(%dynamic-slice.2579, %broadcast.10097)
  %select.2830 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2579, %divide.1798)
  %multiply.8588 = bf16[512,8]{0,1} multiply(%select.2830, %broadcast.10098)
  %param.813 = bf16[512,8]{1,0} parameter(566), sharding={devices=[8,1]<=[8]}
  %multiply.8589 = bf16[512,8]{1,0} multiply(%param.813, %broadcast.10099)
  %add.6746 = bf16[512,8]{0,1} add(%multiply.8588, %multiply.8589)
  %multiply.8590 = bf16[512,8]{0,1} multiply(%select.2830, %select.2830)
  %multiply.8591 = bf16[512,8]{0,1} multiply(%multiply.8590, %broadcast.10101)
  %param.814 = bf16[512,8]{1,0} parameter(889), sharding={devices=[8,1]<=[8]}
  %multiply.8592 = bf16[512,8]{1,0} multiply(%param.814, %broadcast.10102)
  %add.6747 = bf16[512,8]{0,1} add(%multiply.8591, %multiply.8592)
  %divide.1799 = bf16[512,8]{0,1} divide(%add.6747, %broadcast.10103)
  %sqrt.242 = bf16[512,8]{0,1} sqrt(%divide.1799)
  %add.6748 = bf16[512,8]{0,1} add(%sqrt.242, %broadcast.10104)
  %multiply.8593 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6748)
  %divide.1800 = bf16[512,8]{0,1} divide(%add.6746, %multiply.8593)
  %multiply.8594 = bf16[512,8]{1,0} multiply(%param.313, %broadcast.10098)
  %add.6749 = bf16[512,8]{0,1} add(%divide.1800, %multiply.8594)
  %multiply.8595 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6749)
  %add.6750 = bf16[512,8]{1,0} add(%param.313, %multiply.8595)
  %divide.1801 = bf16[1,4096,14336]{2,1,0} divide(%copy.4273, %broadcast.10111)
  %select.2831 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4273, %divide.1801)
  %multiply.8596 = bf16[1,4096,14336]{2,1,0} multiply(%select.2831, %broadcast.10112)
  %param.815 = bf16[1,4096,14336]{2,1,0} parameter(567), sharding={devices=[8,1,1]<=[8]}
  %multiply.8597 = bf16[1,4096,14336]{2,1,0} multiply(%param.815, %broadcast.10113)
  %add.6752 = bf16[1,4096,14336]{2,1,0} add(%multiply.8596, %multiply.8597)
  %multiply.8598 = bf16[1,4096,14336]{2,1,0} multiply(%select.2831, %select.2831)
  %multiply.8599 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8598, %broadcast.10115)
  %param.816 = bf16[1,4096,14336]{2,1,0} parameter(890), sharding={devices=[8,1,1]<=[8]}
  %multiply.8600 = bf16[1,4096,14336]{2,1,0} multiply(%param.816, %broadcast.10116)
  %add.6753 = bf16[1,4096,14336]{2,1,0} add(%multiply.8599, %multiply.8600)
  %divide.1802 = bf16[1,4096,14336]{2,1,0} divide(%add.6753, %broadcast.10117)
  %sqrt.243 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1802)
  %add.6754 = bf16[1,4096,14336]{2,1,0} add(%sqrt.243, %broadcast.10119)
  %multiply.8602 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6754)
  %divide.1803 = bf16[1,4096,14336]{2,1,0} divide(%add.6752, %multiply.8602)
  %multiply.8603 = bf16[1,4096,14336]{2,1,0} multiply(%param.314, %broadcast.10112)
  %add.6755 = bf16[1,4096,14336]{2,1,0} add(%divide.1803, %multiply.8603)
  %multiply.8604 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6755)
  %add.6756 = bf16[1,4096,14336]{2,1,0} add(%param.314, %multiply.8604)
  %divide.1804 = bf16[1,4096,14336]{2,1,0} divide(%copy.4274, %broadcast.10111)
  %select.2832 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4274, %divide.1804)
  %multiply.8606 = bf16[1,4096,14336]{2,1,0} multiply(%select.2832, %broadcast.10112)
  %param.817 = bf16[1,4096,14336]{2,1,0} parameter(568), sharding={devices=[8,1,1]<=[8]}
  %multiply.8607 = bf16[1,4096,14336]{2,1,0} multiply(%param.817, %broadcast.10113)
  %add.6757 = bf16[1,4096,14336]{2,1,0} add(%multiply.8606, %multiply.8607)
  %multiply.8608 = bf16[1,4096,14336]{2,1,0} multiply(%select.2832, %select.2832)
  %multiply.8609 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8608, %broadcast.10115)
  %param.818 = bf16[1,4096,14336]{2,1,0} parameter(891), sharding={devices=[8,1,1]<=[8]}
  %multiply.8611 = bf16[1,4096,14336]{2,1,0} multiply(%param.818, %broadcast.10116)
  %add.6758 = bf16[1,4096,14336]{2,1,0} add(%multiply.8609, %multiply.8611)
  %divide.1805 = bf16[1,4096,14336]{2,1,0} divide(%add.6758, %broadcast.10117)
  %sqrt.244 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1805)
  %add.6759 = bf16[1,4096,14336]{2,1,0} add(%sqrt.244, %broadcast.10119)
  %multiply.8612 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6759)
  %divide.1806 = bf16[1,4096,14336]{2,1,0} divide(%add.6757, %multiply.8612)
  %multiply.8613 = bf16[1,4096,14336]{2,1,0} multiply(%param.315, %broadcast.10112)
  %add.6760 = bf16[1,4096,14336]{2,1,0} add(%divide.1806, %multiply.8613)
  %multiply.8615 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6760)
  %add.6761 = bf16[1,4096,14336]{2,1,0} add(%param.315, %multiply.8615)
  %divide.1807 = bf16[1,14336,4096]{2,1,0} divide(%copy.4275, %broadcast.10134)
  %select.2833 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4275, %divide.1807)
  %multiply.8616 = bf16[1,14336,4096]{2,1,0} multiply(%select.2833, %broadcast.10135)
  %param.819 = bf16[1,14336,4096]{2,1,0} parameter(569), sharding={devices=[8,1,1]<=[8]}
  %multiply.8617 = bf16[1,14336,4096]{2,1,0} multiply(%param.819, %broadcast.10136)
  %add.6762 = bf16[1,14336,4096]{2,1,0} add(%multiply.8616, %multiply.8617)
  %multiply.8618 = bf16[1,14336,4096]{2,1,0} multiply(%select.2833, %select.2833)
  %multiply.8619 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8618, %broadcast.10138)
  %param.820 = bf16[1,14336,4096]{2,1,0} parameter(892), sharding={devices=[8,1,1]<=[8]}
  %multiply.8620 = bf16[1,14336,4096]{2,1,0} multiply(%param.820, %broadcast.10139)
  %add.6763 = bf16[1,14336,4096]{2,1,0} add(%multiply.8619, %multiply.8620)
  %divide.1808 = bf16[1,14336,4096]{2,1,0} divide(%add.6763, %broadcast.10140)
  %sqrt.245 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1808)
  %add.6764 = bf16[1,14336,4096]{2,1,0} add(%sqrt.245, %broadcast.10141)
  %multiply.8621 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6764)
  %divide.1809 = bf16[1,14336,4096]{2,1,0} divide(%add.6762, %multiply.8621)
  %multiply.8622 = bf16[1,14336,4096]{2,1,0} multiply(%param.316, %broadcast.10135)
  %add.6765 = bf16[1,14336,4096]{2,1,0} add(%divide.1809, %multiply.8622)
  %multiply.8623 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6765)
  %add.6766 = bf16[1,14336,4096]{2,1,0} add(%param.316, %multiply.8623)
  %divide.1810 = bf16[4096]{0} divide(%all-reduce.367, %broadcast.10081)
  %select.2834 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.367, %divide.1810)
  %multiply.8624 = bf16[4096]{0} multiply(%select.2834, %broadcast.10083)
  %param.821 = bf16[4096]{0} parameter(570), sharding={replicated}
  %multiply.8625 = bf16[4096]{0} multiply(%param.821, %broadcast.10085)
  %add.6767 = bf16[4096]{0} add(%multiply.8624, %multiply.8625)
  %multiply.8626 = bf16[4096]{0} multiply(%select.2834, %select.2834)
  %multiply.8627 = bf16[4096]{0} multiply(%multiply.8626, %broadcast.10088)
  %param.822 = bf16[4096]{0} parameter(893), sharding={replicated}
  %multiply.8628 = bf16[4096]{0} multiply(%param.822, %broadcast.10090)
  %add.6768 = bf16[4096]{0} add(%multiply.8627, %multiply.8628)
  %divide.1811 = bf16[4096]{0} divide(%add.6768, %broadcast.10092)
  %sqrt.246 = bf16[4096]{0} sqrt(%divide.1811)
  %add.6769 = bf16[4096]{0} add(%sqrt.246, %broadcast.10094)
  %multiply.8629 = bf16[4096]{0} multiply(%broadcast.10086, %add.6769)
  %divide.1812 = bf16[4096]{0} divide(%add.6767, %multiply.8629)
  %multiply.8630 = bf16[4096]{0} multiply(%param.312, %broadcast.10083)
  %add.6770 = bf16[4096]{0} add(%divide.1812, %multiply.8630)
  %multiply.8631 = bf16[4096]{0} multiply(%broadcast.5338, %add.6770)
  %add.6771 = bf16[4096]{0} add(%param.312, %multiply.8631)
  %divide.1813 = bf16[4096]{0} divide(%all-reduce.368, %broadcast.10081)
  %select.2835 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.368, %divide.1813)
  %multiply.8632 = bf16[4096]{0} multiply(%select.2835, %broadcast.10083)
  %param.823 = bf16[4096]{0} parameter(571), sharding={replicated}
  %multiply.8633 = bf16[4096]{0} multiply(%param.823, %broadcast.10085)
  %add.6772 = bf16[4096]{0} add(%multiply.8632, %multiply.8633)
  %multiply.8634 = bf16[4096]{0} multiply(%select.2835, %select.2835)
  %multiply.8635 = bf16[4096]{0} multiply(%multiply.8634, %broadcast.10088)
  %param.824 = bf16[4096]{0} parameter(894), sharding={replicated}
  %multiply.8636 = bf16[4096]{0} multiply(%param.824, %broadcast.10090)
  %add.6773 = bf16[4096]{0} add(%multiply.8635, %multiply.8636)
  %divide.1814 = bf16[4096]{0} divide(%add.6773, %broadcast.10092)
  %sqrt.247 = bf16[4096]{0} sqrt(%divide.1814)
  %add.6774 = bf16[4096]{0} add(%sqrt.247, %broadcast.10094)
  %multiply.8637 = bf16[4096]{0} multiply(%broadcast.10086, %add.6774)
  %divide.1815 = bf16[4096]{0} divide(%add.6772, %multiply.8637)
  %multiply.8638 = bf16[4096]{0} multiply(%param.307, %broadcast.10083)
  %add.6775 = bf16[4096]{0} add(%divide.1815, %multiply.8638)
  %multiply.8639 = bf16[4096]{0} multiply(%broadcast.5338, %add.6775)
  %add.6776 = bf16[4096]{0} add(%param.307, %multiply.8639)
  %divide.1816 = bf16[512,8,128]{0,2,1} divide(%transpose.416, %broadcast.10162)
  %select.2836 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.416, %divide.1816)
  %multiply.8640 = bf16[512,8,128]{0,2,1} multiply(%select.2836, %broadcast.10163)
  %param.825 = bf16[512,8,128]{2,1,0} parameter(572), sharding={devices=[8,1,1]<=[8]}
  %multiply.8641 = bf16[512,8,128]{2,1,0} multiply(%param.825, %broadcast.10164)
  %add.6777 = bf16[512,8,128]{0,2,1} add(%multiply.8640, %multiply.8641)
  %multiply.8642 = bf16[512,8,128]{0,2,1} multiply(%select.2836, %select.2836)
  %multiply.8643 = bf16[512,8,128]{0,2,1} multiply(%multiply.8642, %broadcast.10166)
  %param.826 = bf16[512,8,128]{2,1,0} parameter(895), sharding={devices=[8,1,1]<=[8]}
  %multiply.8644 = bf16[512,8,128]{2,1,0} multiply(%param.826, %broadcast.10167)
  %add.6778 = bf16[512,8,128]{0,2,1} add(%multiply.8643, %multiply.8644)
  %divide.1817 = bf16[512,8,128]{0,2,1} divide(%add.6778, %broadcast.10168)
  %sqrt.248 = bf16[512,8,128]{0,2,1} sqrt(%divide.1817)
  %add.6779 = bf16[512,8,128]{0,2,1} add(%sqrt.248, %broadcast.10169)
  %multiply.8645 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6779)
  %divide.1818 = bf16[512,8,128]{0,2,1} divide(%add.6777, %multiply.8645)
  %multiply.8646 = bf16[512,8,128]{2,1,0} multiply(%param.309, %broadcast.10163)
  %add.6780 = bf16[512,8,128]{0,2,1} add(%divide.1818, %multiply.8646)
  %multiply.8647 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6780)
  %add.6781 = bf16[512,8,128]{2,1,0} add(%param.309, %multiply.8647)
  %divide.1819 = bf16[32,128,512]{1,0,2} divide(%transpose.417, %broadcast.10172)
  %select.2837 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.417, %divide.1819)
  %multiply.8648 = bf16[32,128,512]{1,0,2} multiply(%select.2837, %broadcast.10173)
  %param.827 = bf16[32,128,512]{2,1,0} parameter(573), sharding={devices=[1,1,8]<=[8]}
  %multiply.8649 = bf16[32,128,512]{2,1,0} multiply(%param.827, %broadcast.10174)
  %add.6782 = bf16[32,128,512]{1,0,2} add(%multiply.8648, %multiply.8649)
  %multiply.8650 = bf16[32,128,512]{1,0,2} multiply(%select.2837, %select.2837)
  %multiply.8651 = bf16[32,128,512]{1,0,2} multiply(%multiply.8650, %broadcast.10176)
  %param.828 = bf16[32,128,512]{2,1,0} parameter(896), sharding={devices=[1,1,8]<=[8]}
  %multiply.8652 = bf16[32,128,512]{2,1,0} multiply(%param.828, %broadcast.10177)
  %add.6783 = bf16[32,128,512]{1,0,2} add(%multiply.8651, %multiply.8652)
  %divide.1820 = bf16[32,128,512]{1,0,2} divide(%add.6783, %broadcast.10178)
  %sqrt.249 = bf16[32,128,512]{1,0,2} sqrt(%divide.1820)
  %add.6784 = bf16[32,128,512]{1,0,2} add(%sqrt.249, %broadcast.10179)
  %multiply.8653 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6784)
  %divide.1821 = bf16[32,128,512]{1,0,2} divide(%add.6782, %multiply.8653)
  %multiply.8654 = bf16[32,128,512]{2,1,0} multiply(%param.311, %broadcast.10173)
  %add.6785 = bf16[32,128,512]{1,0,2} add(%divide.1821, %multiply.8654)
  %multiply.8655 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6785)
  %add.6786 = bf16[32,128,512]{2,1,0} add(%param.311, %multiply.8655)
  %divide.1822 = bf16[512,32,128]{0,2,1} divide(%transpose.418, %broadcast.10182)
  %select.2838 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.418, %divide.1822)
  %multiply.8656 = bf16[512,32,128]{0,2,1} multiply(%select.2838, %broadcast.10183)
  %param.829 = bf16[512,32,128]{2,1,0} parameter(574), sharding={devices=[8,1,1]<=[8]}
  %multiply.8657 = bf16[512,32,128]{2,1,0} multiply(%param.829, %broadcast.10184)
  %add.6787 = bf16[512,32,128]{0,2,1} add(%multiply.8656, %multiply.8657)
  %multiply.8658 = bf16[512,32,128]{0,2,1} multiply(%select.2838, %select.2838)
  %multiply.8659 = bf16[512,32,128]{0,2,1} multiply(%multiply.8658, %broadcast.10186)
  %param.830 = bf16[512,32,128]{2,1,0} parameter(897), sharding={devices=[8,1,1]<=[8]}
  %multiply.8660 = bf16[512,32,128]{2,1,0} multiply(%param.830, %broadcast.10187)
  %add.6788 = bf16[512,32,128]{0,2,1} add(%multiply.8659, %multiply.8660)
  %divide.1823 = bf16[512,32,128]{0,2,1} divide(%add.6788, %broadcast.10188)
  %sqrt.250 = bf16[512,32,128]{0,2,1} sqrt(%divide.1823)
  %add.6789 = bf16[512,32,128]{0,2,1} add(%sqrt.250, %broadcast.10189)
  %multiply.8661 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6789)
  %divide.1824 = bf16[512,32,128]{0,2,1} divide(%add.6787, %multiply.8661)
  %multiply.8662 = bf16[512,32,128]{2,1,0} multiply(%param.308, %broadcast.10183)
  %add.6790 = bf16[512,32,128]{0,2,1} add(%divide.1824, %multiply.8662)
  %multiply.8663 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6790)
  %add.6792 = bf16[512,32,128]{2,1,0} add(%param.308, %multiply.8663)
  %divide.1825 = bf16[512,8,128]{0,2,1} divide(%transpose.419, %broadcast.10162)
  %select.2839 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.419, %divide.1825)
  %multiply.8664 = bf16[512,8,128]{0,2,1} multiply(%select.2839, %broadcast.10163)
  %param.831 = bf16[512,8,128]{2,1,0} parameter(575), sharding={devices=[8,1,1]<=[8]}
  %multiply.8665 = bf16[512,8,128]{2,1,0} multiply(%param.831, %broadcast.10164)
  %add.6793 = bf16[512,8,128]{0,2,1} add(%multiply.8664, %multiply.8665)
  %multiply.8666 = bf16[512,8,128]{0,2,1} multiply(%select.2839, %select.2839)
  %multiply.8667 = bf16[512,8,128]{0,2,1} multiply(%multiply.8666, %broadcast.10166)
  %param.832 = bf16[512,8,128]{2,1,0} parameter(898), sharding={devices=[8,1,1]<=[8]}
  %multiply.8668 = bf16[512,8,128]{2,1,0} multiply(%param.832, %broadcast.10167)
  %add.6794 = bf16[512,8,128]{0,2,1} add(%multiply.8667, %multiply.8668)
  %divide.1826 = bf16[512,8,128]{0,2,1} divide(%add.6794, %broadcast.10168)
  %sqrt.251 = bf16[512,8,128]{0,2,1} sqrt(%divide.1826)
  %add.6795 = bf16[512,8,128]{0,2,1} add(%sqrt.251, %broadcast.10169)
  %multiply.8669 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6795)
  %divide.1827 = bf16[512,8,128]{0,2,1} divide(%add.6793, %multiply.8669)
  %multiply.8670 = bf16[512,8,128]{2,1,0} multiply(%param.310, %broadcast.10163)
  %add.6796 = bf16[512,8,128]{0,2,1} add(%divide.1827, %multiply.8670)
  %multiply.8672 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6796)
  %add.6797 = bf16[512,8,128]{2,1,0} add(%param.310, %multiply.8672)
  %divide.1828 = bf16[512,8]{0,1} divide(%dynamic-slice.2589, %broadcast.10097)
  %select.2840 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2589, %divide.1828)
  %multiply.8673 = bf16[512,8]{0,1} multiply(%select.2840, %broadcast.10098)
  %param.833 = bf16[512,8]{1,0} parameter(576), sharding={devices=[8,1]<=[8]}
  %multiply.8674 = bf16[512,8]{1,0} multiply(%param.833, %broadcast.10099)
  %add.6798 = bf16[512,8]{0,1} add(%multiply.8673, %multiply.8674)
  %multiply.8675 = bf16[512,8]{0,1} multiply(%select.2840, %select.2840)
  %multiply.8676 = bf16[512,8]{0,1} multiply(%multiply.8675, %broadcast.10101)
  %param.834 = bf16[512,8]{1,0} parameter(899), sharding={devices=[8,1]<=[8]}
  %multiply.8677 = bf16[512,8]{1,0} multiply(%param.834, %broadcast.10102)
  %add.6799 = bf16[512,8]{0,1} add(%multiply.8676, %multiply.8677)
  %divide.1829 = bf16[512,8]{0,1} divide(%add.6799, %broadcast.10103)
  %sqrt.252 = bf16[512,8]{0,1} sqrt(%divide.1829)
  %add.6800 = bf16[512,8]{0,1} add(%sqrt.252, %broadcast.10104)
  %multiply.8678 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6800)
  %divide.1831 = bf16[512,8]{0,1} divide(%add.6798, %multiply.8678)
  %multiply.8679 = bf16[512,8]{1,0} multiply(%param.323, %broadcast.10098)
  %add.6801 = bf16[512,8]{0,1} add(%divide.1831, %multiply.8679)
  %multiply.8680 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6801)
  %add.6802 = bf16[512,8]{1,0} add(%param.323, %multiply.8680)
  %divide.1832 = bf16[1,4096,14336]{2,1,0} divide(%copy.4276, %broadcast.10111)
  %select.2841 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4276, %divide.1832)
  %multiply.8681 = bf16[1,4096,14336]{2,1,0} multiply(%select.2841, %broadcast.10112)
  %param.835 = bf16[1,4096,14336]{2,1,0} parameter(577), sharding={devices=[8,1,1]<=[8]}
  %multiply.8682 = bf16[1,4096,14336]{2,1,0} multiply(%param.835, %broadcast.10113)
  %add.6803 = bf16[1,4096,14336]{2,1,0} add(%multiply.8681, %multiply.8682)
  %multiply.8683 = bf16[1,4096,14336]{2,1,0} multiply(%select.2841, %select.2841)
  %multiply.8685 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8683, %broadcast.10115)
  %param.836 = bf16[1,4096,14336]{2,1,0} parameter(900), sharding={devices=[8,1,1]<=[8]}
  %multiply.8686 = bf16[1,4096,14336]{2,1,0} multiply(%param.836, %broadcast.10116)
  %add.6804 = bf16[1,4096,14336]{2,1,0} add(%multiply.8685, %multiply.8686)
  %divide.1833 = bf16[1,4096,14336]{2,1,0} divide(%add.6804, %broadcast.10117)
  %sqrt.253 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1833)
  %add.6805 = bf16[1,4096,14336]{2,1,0} add(%sqrt.253, %broadcast.10119)
  %multiply.8687 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6805)
  %divide.1834 = bf16[1,4096,14336]{2,1,0} divide(%add.6803, %multiply.8687)
  %multiply.8688 = bf16[1,4096,14336]{2,1,0} multiply(%param.324, %broadcast.10112)
  %add.6806 = bf16[1,4096,14336]{2,1,0} add(%divide.1834, %multiply.8688)
  %multiply.8689 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6806)
  %add.6807 = bf16[1,4096,14336]{2,1,0} add(%param.324, %multiply.8689)
  %divide.1835 = bf16[1,4096,14336]{2,1,0} divide(%copy.4277, %broadcast.10111)
  %select.2842 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4277, %divide.1835)
  %multiply.8691 = bf16[1,4096,14336]{2,1,0} multiply(%select.2842, %broadcast.10112)
  %param.837 = bf16[1,4096,14336]{2,1,0} parameter(578), sharding={devices=[8,1,1]<=[8]}
  %multiply.8692 = bf16[1,4096,14336]{2,1,0} multiply(%param.837, %broadcast.10113)
  %add.6808 = bf16[1,4096,14336]{2,1,0} add(%multiply.8691, %multiply.8692)
  %multiply.8693 = bf16[1,4096,14336]{2,1,0} multiply(%select.2842, %select.2842)
  %multiply.8694 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8693, %broadcast.10115)
  %param.838 = bf16[1,4096,14336]{2,1,0} parameter(901), sharding={devices=[8,1,1]<=[8]}
  %multiply.8695 = bf16[1,4096,14336]{2,1,0} multiply(%param.838, %broadcast.10116)
  %add.6809 = bf16[1,4096,14336]{2,1,0} add(%multiply.8694, %multiply.8695)
  %divide.1836 = bf16[1,4096,14336]{2,1,0} divide(%add.6809, %broadcast.10117)
  %sqrt.254 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1836)
  %add.6810 = bf16[1,4096,14336]{2,1,0} add(%sqrt.254, %broadcast.10119)
  %multiply.8696 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6810)
  %divide.1837 = bf16[1,4096,14336]{2,1,0} divide(%add.6808, %multiply.8696)
  %multiply.8697 = bf16[1,4096,14336]{2,1,0} multiply(%param.325, %broadcast.10112)
  %add.6811 = bf16[1,4096,14336]{2,1,0} add(%divide.1837, %multiply.8697)
  %multiply.8698 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6811)
  %add.6812 = bf16[1,4096,14336]{2,1,0} add(%param.325, %multiply.8698)
  %divide.1838 = bf16[1,14336,4096]{2,1,0} divide(%copy.4278, %broadcast.10134)
  %select.2843 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4278, %divide.1838)
  %multiply.8699 = bf16[1,14336,4096]{2,1,0} multiply(%select.2843, %broadcast.10135)
  %param.839 = bf16[1,14336,4096]{2,1,0} parameter(579), sharding={devices=[8,1,1]<=[8]}
  %multiply.8700 = bf16[1,14336,4096]{2,1,0} multiply(%param.839, %broadcast.10136)
  %add.6813 = bf16[1,14336,4096]{2,1,0} add(%multiply.8699, %multiply.8700)
  %multiply.8701 = bf16[1,14336,4096]{2,1,0} multiply(%select.2843, %select.2843)
  %multiply.8702 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8701, %broadcast.10138)
  %param.840 = bf16[1,14336,4096]{2,1,0} parameter(902), sharding={devices=[8,1,1]<=[8]}
  %multiply.8703 = bf16[1,14336,4096]{2,1,0} multiply(%param.840, %broadcast.10139)
  %add.6814 = bf16[1,14336,4096]{2,1,0} add(%multiply.8702, %multiply.8703)
  %divide.1839 = bf16[1,14336,4096]{2,1,0} divide(%add.6814, %broadcast.10140)
  %sqrt.255 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1839)
  %add.6815 = bf16[1,14336,4096]{2,1,0} add(%sqrt.255, %broadcast.10141)
  %multiply.8704 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6815)
  %divide.1840 = bf16[1,14336,4096]{2,1,0} divide(%add.6813, %multiply.8704)
  %multiply.8705 = bf16[1,14336,4096]{2,1,0} multiply(%param.326, %broadcast.10135)
  %add.6816 = bf16[1,14336,4096]{2,1,0} add(%divide.1840, %multiply.8705)
  %multiply.8706 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6816)
  %add.6817 = bf16[1,14336,4096]{2,1,0} add(%param.326, %multiply.8706)
  %divide.1841 = bf16[4096]{0} divide(%all-reduce.382, %broadcast.10081)
  %select.2844 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.382, %divide.1841)
  %multiply.8707 = bf16[4096]{0} multiply(%select.2844, %broadcast.10083)
  %param.841 = bf16[4096]{0} parameter(580), sharding={replicated}
  %multiply.8708 = bf16[4096]{0} multiply(%param.841, %broadcast.10085)
  %add.6818 = bf16[4096]{0} add(%multiply.8707, %multiply.8708)
  %multiply.8709 = bf16[4096]{0} multiply(%select.2844, %select.2844)
  %multiply.8710 = bf16[4096]{0} multiply(%multiply.8709, %broadcast.10088)
  %param.842 = bf16[4096]{0} parameter(903), sharding={replicated}
  %multiply.8711 = bf16[4096]{0} multiply(%param.842, %broadcast.10090)
  %add.6819 = bf16[4096]{0} add(%multiply.8710, %multiply.8711)
  %divide.1842 = bf16[4096]{0} divide(%add.6819, %broadcast.10092)
  %sqrt.256 = bf16[4096]{0} sqrt(%divide.1842)
  %add.6820 = bf16[4096]{0} add(%sqrt.256, %broadcast.10094)
  %multiply.8712 = bf16[4096]{0} multiply(%broadcast.10086, %add.6820)
  %divide.1843 = bf16[4096]{0} divide(%add.6818, %multiply.8712)
  %multiply.8713 = bf16[4096]{0} multiply(%param.322, %broadcast.10083)
  %add.6821 = bf16[4096]{0} add(%divide.1843, %multiply.8713)
  %multiply.8714 = bf16[4096]{0} multiply(%broadcast.5338, %add.6821)
  %add.6823 = bf16[4096]{0} add(%param.322, %multiply.8714)
  %divide.1844 = bf16[4096]{0} divide(%all-reduce.383, %broadcast.10081)
  %select.2845 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.383, %divide.1844)
  %multiply.8715 = bf16[4096]{0} multiply(%select.2845, %broadcast.10083)
  %param.843 = bf16[4096]{0} parameter(581), sharding={replicated}
  %multiply.8716 = bf16[4096]{0} multiply(%param.843, %broadcast.10085)
  %add.6824 = bf16[4096]{0} add(%multiply.8715, %multiply.8716)
  %multiply.8717 = bf16[4096]{0} multiply(%select.2845, %select.2845)
  %multiply.8718 = bf16[4096]{0} multiply(%multiply.8717, %broadcast.10088)
  %param.844 = bf16[4096]{0} parameter(904), sharding={replicated}
  %multiply.8719 = bf16[4096]{0} multiply(%param.844, %broadcast.10090)
  %add.6825 = bf16[4096]{0} add(%multiply.8718, %multiply.8719)
  %divide.1845 = bf16[4096]{0} divide(%add.6825, %broadcast.10092)
  %sqrt.257 = bf16[4096]{0} sqrt(%divide.1845)
  %add.6826 = bf16[4096]{0} add(%sqrt.257, %broadcast.10094)
  %multiply.8720 = bf16[4096]{0} multiply(%broadcast.10086, %add.6826)
  %divide.1846 = bf16[4096]{0} divide(%add.6824, %multiply.8720)
  %multiply.8721 = bf16[4096]{0} multiply(%param.317, %broadcast.10083)
  %add.6827 = bf16[4096]{0} add(%divide.1846, %multiply.8721)
  %multiply.8722 = bf16[4096]{0} multiply(%broadcast.5338, %add.6827)
  %add.6828 = bf16[4096]{0} add(%param.317, %multiply.8722)
  %divide.1847 = bf16[512,8,128]{0,2,1} divide(%transpose.420, %broadcast.10162)
  %select.2846 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.420, %divide.1847)
  %multiply.8723 = bf16[512,8,128]{0,2,1} multiply(%select.2846, %broadcast.10163)
  %param.845 = bf16[512,8,128]{2,1,0} parameter(582), sharding={devices=[8,1,1]<=[8]}
  %multiply.8724 = bf16[512,8,128]{2,1,0} multiply(%param.845, %broadcast.10164)
  %add.6829 = bf16[512,8,128]{0,2,1} add(%multiply.8723, %multiply.8724)
  %multiply.8725 = bf16[512,8,128]{0,2,1} multiply(%select.2846, %select.2846)
  %multiply.8726 = bf16[512,8,128]{0,2,1} multiply(%multiply.8725, %broadcast.10166)
  %param.846 = bf16[512,8,128]{2,1,0} parameter(905), sharding={devices=[8,1,1]<=[8]}
  %multiply.8727 = bf16[512,8,128]{2,1,0} multiply(%param.846, %broadcast.10167)
  %add.6831 = bf16[512,8,128]{0,2,1} add(%multiply.8726, %multiply.8727)
  %divide.1848 = bf16[512,8,128]{0,2,1} divide(%add.6831, %broadcast.10168)
  %sqrt.258 = bf16[512,8,128]{0,2,1} sqrt(%divide.1848)
  %add.6832 = bf16[512,8,128]{0,2,1} add(%sqrt.258, %broadcast.10169)
  %multiply.8728 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6832)
  %divide.1849 = bf16[512,8,128]{0,2,1} divide(%add.6829, %multiply.8728)
  %multiply.8729 = bf16[512,8,128]{2,1,0} multiply(%param.319, %broadcast.10163)
  %add.6833 = bf16[512,8,128]{0,2,1} add(%divide.1849, %multiply.8729)
  %multiply.8730 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6833)
  %add.6834 = bf16[512,8,128]{2,1,0} add(%param.319, %multiply.8730)
  %divide.1850 = bf16[32,128,512]{1,0,2} divide(%transpose.421, %broadcast.10172)
  %select.2847 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.421, %divide.1850)
  %multiply.8731 = bf16[32,128,512]{1,0,2} multiply(%select.2847, %broadcast.10173)
  %param.847 = bf16[32,128,512]{2,1,0} parameter(583), sharding={devices=[1,1,8]<=[8]}
  %multiply.8732 = bf16[32,128,512]{2,1,0} multiply(%param.847, %broadcast.10174)
  %add.6835 = bf16[32,128,512]{1,0,2} add(%multiply.8731, %multiply.8732)
  %multiply.8733 = bf16[32,128,512]{1,0,2} multiply(%select.2847, %select.2847)
  %multiply.8734 = bf16[32,128,512]{1,0,2} multiply(%multiply.8733, %broadcast.10176)
  %param.848 = bf16[32,128,512]{2,1,0} parameter(906), sharding={devices=[1,1,8]<=[8]}
  %multiply.8735 = bf16[32,128,512]{2,1,0} multiply(%param.848, %broadcast.10177)
  %add.6836 = bf16[32,128,512]{1,0,2} add(%multiply.8734, %multiply.8735)
  %divide.1851 = bf16[32,128,512]{1,0,2} divide(%add.6836, %broadcast.10178)
  %sqrt.259 = bf16[32,128,512]{1,0,2} sqrt(%divide.1851)
  %add.6837 = bf16[32,128,512]{1,0,2} add(%sqrt.259, %broadcast.10179)
  %multiply.8736 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6837)
  %divide.1852 = bf16[32,128,512]{1,0,2} divide(%add.6835, %multiply.8736)
  %multiply.8737 = bf16[32,128,512]{2,1,0} multiply(%param.321, %broadcast.10173)
  %add.6838 = bf16[32,128,512]{1,0,2} add(%divide.1852, %multiply.8737)
  %multiply.8738 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6838)
  %add.6839 = bf16[32,128,512]{2,1,0} add(%param.321, %multiply.8738)
  %divide.1854 = bf16[512,32,128]{0,2,1} divide(%transpose.422, %broadcast.10182)
  %select.2848 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.422, %divide.1854)
  %multiply.8739 = bf16[512,32,128]{0,2,1} multiply(%select.2848, %broadcast.10183)
  %param.849 = bf16[512,32,128]{2,1,0} parameter(584), sharding={devices=[8,1,1]<=[8]}
  %multiply.8740 = bf16[512,32,128]{2,1,0} multiply(%param.849, %broadcast.10184)
  %add.6840 = bf16[512,32,128]{0,2,1} add(%multiply.8739, %multiply.8740)
  %multiply.8741 = bf16[512,32,128]{0,2,1} multiply(%select.2848, %select.2848)
  %multiply.8742 = bf16[512,32,128]{0,2,1} multiply(%multiply.8741, %broadcast.10186)
  %param.850 = bf16[512,32,128]{2,1,0} parameter(907), sharding={devices=[8,1,1]<=[8]}
  %multiply.8743 = bf16[512,32,128]{2,1,0} multiply(%param.850, %broadcast.10187)
  %add.6841 = bf16[512,32,128]{0,2,1} add(%multiply.8742, %multiply.8743)
  %divide.1855 = bf16[512,32,128]{0,2,1} divide(%add.6841, %broadcast.10188)
  %sqrt.260 = bf16[512,32,128]{0,2,1} sqrt(%divide.1855)
  %add.6842 = bf16[512,32,128]{0,2,1} add(%sqrt.260, %broadcast.10189)
  %multiply.8744 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6842)
  %divide.1856 = bf16[512,32,128]{0,2,1} divide(%add.6840, %multiply.8744)
  %multiply.8745 = bf16[512,32,128]{2,1,0} multiply(%param.318, %broadcast.10183)
  %add.6843 = bf16[512,32,128]{0,2,1} add(%divide.1856, %multiply.8745)
  %multiply.8746 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6843)
  %add.6844 = bf16[512,32,128]{2,1,0} add(%param.318, %multiply.8746)
  %divide.1857 = bf16[512,8,128]{0,2,1} divide(%transpose.423, %broadcast.10162)
  %select.2849 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.423, %divide.1857)
  %multiply.8747 = bf16[512,8,128]{0,2,1} multiply(%select.2849, %broadcast.10163)
  %param.851 = bf16[512,8,128]{2,1,0} parameter(585), sharding={devices=[8,1,1]<=[8]}
  %multiply.8748 = bf16[512,8,128]{2,1,0} multiply(%param.851, %broadcast.10164)
  %add.6846 = bf16[512,8,128]{0,2,1} add(%multiply.8747, %multiply.8748)
  %multiply.8749 = bf16[512,8,128]{0,2,1} multiply(%select.2849, %select.2849)
  %multiply.8750 = bf16[512,8,128]{0,2,1} multiply(%multiply.8749, %broadcast.10166)
  %param.852 = bf16[512,8,128]{2,1,0} parameter(908), sharding={devices=[8,1,1]<=[8]}
  %multiply.8751 = bf16[512,8,128]{2,1,0} multiply(%param.852, %broadcast.10167)
  %add.6847 = bf16[512,8,128]{0,2,1} add(%multiply.8750, %multiply.8751)
  %divide.1858 = bf16[512,8,128]{0,2,1} divide(%add.6847, %broadcast.10168)
  %sqrt.261 = bf16[512,8,128]{0,2,1} sqrt(%divide.1858)
  %add.6848 = bf16[512,8,128]{0,2,1} add(%sqrt.261, %broadcast.10169)
  %multiply.8752 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6848)
  %divide.1859 = bf16[512,8,128]{0,2,1} divide(%add.6846, %multiply.8752)
  %multiply.8753 = bf16[512,8,128]{2,1,0} multiply(%param.320, %broadcast.10163)
  %add.6849 = bf16[512,8,128]{0,2,1} add(%divide.1859, %multiply.8753)
  %multiply.8754 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6849)
  %add.6851 = bf16[512,8,128]{2,1,0} add(%param.320, %multiply.8754)
  %divide.1860 = bf16[512,8]{0,1} divide(%dynamic-slice.2599, %broadcast.10097)
  %select.2850 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2599, %divide.1860)
  %multiply.8755 = bf16[512,8]{0,1} multiply(%select.2850, %broadcast.10098)
  %param.853 = bf16[512,8]{1,0} parameter(586), sharding={devices=[8,1]<=[8]}
  %multiply.8756 = bf16[512,8]{1,0} multiply(%param.853, %broadcast.10099)
  %add.6852 = bf16[512,8]{0,1} add(%multiply.8755, %multiply.8756)
  %multiply.8757 = bf16[512,8]{0,1} multiply(%select.2850, %select.2850)
  %multiply.8758 = bf16[512,8]{0,1} multiply(%multiply.8757, %broadcast.10101)
  %param.854 = bf16[512,8]{1,0} parameter(909), sharding={devices=[8,1]<=[8]}
  %multiply.8759 = bf16[512,8]{1,0} multiply(%param.854, %broadcast.10102)
  %add.6853 = bf16[512,8]{0,1} add(%multiply.8758, %multiply.8759)
  %divide.1861 = bf16[512,8]{0,1} divide(%add.6853, %broadcast.10103)
  %sqrt.262 = bf16[512,8]{0,1} sqrt(%divide.1861)
  %add.6854 = bf16[512,8]{0,1} add(%sqrt.262, %broadcast.10104)
  %multiply.8760 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6854)
  %divide.1862 = bf16[512,8]{0,1} divide(%add.6852, %multiply.8760)
  %multiply.8761 = bf16[512,8]{1,0} multiply(%param.53, %broadcast.10098)
  %add.6856 = bf16[512,8]{0,1} add(%divide.1862, %multiply.8761)
  %multiply.8762 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6856)
  %add.6857 = bf16[512,8]{1,0} add(%param.53, %multiply.8762)
  %divide.1864 = bf16[1,4096,14336]{2,1,0} divide(%copy.4279, %broadcast.10111)
  %select.2851 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4279, %divide.1864)
  %multiply.8763 = bf16[1,4096,14336]{2,1,0} multiply(%select.2851, %broadcast.10112)
  %param.855 = bf16[1,4096,14336]{2,1,0} parameter(587), sharding={devices=[8,1,1]<=[8]}
  %multiply.8764 = bf16[1,4096,14336]{2,1,0} multiply(%param.855, %broadcast.10113)
  %add.6858 = bf16[1,4096,14336]{2,1,0} add(%multiply.8763, %multiply.8764)
  %multiply.8765 = bf16[1,4096,14336]{2,1,0} multiply(%select.2851, %select.2851)
  %multiply.8766 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8765, %broadcast.10115)
  %param.856 = bf16[1,4096,14336]{2,1,0} parameter(910), sharding={devices=[8,1,1]<=[8]}
  %multiply.8768 = bf16[1,4096,14336]{2,1,0} multiply(%param.856, %broadcast.10116)
  %add.6859 = bf16[1,4096,14336]{2,1,0} add(%multiply.8766, %multiply.8768)
  %divide.1865 = bf16[1,4096,14336]{2,1,0} divide(%add.6859, %broadcast.10117)
  %sqrt.263 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1865)
  %add.6860 = bf16[1,4096,14336]{2,1,0} add(%sqrt.263, %broadcast.10119)
  %multiply.8769 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6860)
  %divide.1866 = bf16[1,4096,14336]{2,1,0} divide(%add.6858, %multiply.8769)
  %multiply.8770 = bf16[1,4096,14336]{2,1,0} multiply(%param.54, %broadcast.10112)
  %add.6861 = bf16[1,4096,14336]{2,1,0} add(%divide.1866, %multiply.8770)
  %multiply.8771 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6861)
  %add.6862 = bf16[1,4096,14336]{2,1,0} add(%param.54, %multiply.8771)
  %divide.1867 = bf16[1,4096,14336]{2,1,0} divide(%copy.4280, %broadcast.10111)
  %select.2852 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4280, %divide.1867)
  %multiply.8772 = bf16[1,4096,14336]{2,1,0} multiply(%select.2852, %broadcast.10112)
  %param.857 = bf16[1,4096,14336]{2,1,0} parameter(588), sharding={devices=[8,1,1]<=[8]}
  %multiply.8773 = bf16[1,4096,14336]{2,1,0} multiply(%param.857, %broadcast.10113)
  %add.6863 = bf16[1,4096,14336]{2,1,0} add(%multiply.8772, %multiply.8773)
  %multiply.8776 = bf16[1,4096,14336]{2,1,0} multiply(%select.2852, %select.2852)
  %multiply.8777 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8776, %broadcast.10115)
  %param.858 = bf16[1,4096,14336]{2,1,0} parameter(911), sharding={devices=[8,1,1]<=[8]}
  %multiply.8778 = bf16[1,4096,14336]{2,1,0} multiply(%param.858, %broadcast.10116)
  %add.6864 = bf16[1,4096,14336]{2,1,0} add(%multiply.8777, %multiply.8778)
  %divide.1868 = bf16[1,4096,14336]{2,1,0} divide(%add.6864, %broadcast.10117)
  %sqrt.264 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1868)
  %add.6865 = bf16[1,4096,14336]{2,1,0} add(%sqrt.264, %broadcast.10119)
  %multiply.8779 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6865)
  %divide.1869 = bf16[1,4096,14336]{2,1,0} divide(%add.6863, %multiply.8779)
  %multiply.8780 = bf16[1,4096,14336]{2,1,0} multiply(%param.55, %broadcast.10112)
  %add.6866 = bf16[1,4096,14336]{2,1,0} add(%divide.1869, %multiply.8780)
  %multiply.8781 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6866)
  %add.6867 = bf16[1,4096,14336]{2,1,0} add(%param.55, %multiply.8781)
  %divide.1870 = bf16[1,14336,4096]{2,1,0} divide(%copy.4281, %broadcast.10134)
  %select.2853 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4281, %divide.1870)
  %multiply.8783 = bf16[1,14336,4096]{2,1,0} multiply(%select.2853, %broadcast.10135)
  %param.859 = bf16[1,14336,4096]{2,1,0} parameter(589), sharding={devices=[8,1,1]<=[8]}
  %multiply.8784 = bf16[1,14336,4096]{2,1,0} multiply(%param.859, %broadcast.10136)
  %add.6868 = bf16[1,14336,4096]{2,1,0} add(%multiply.8783, %multiply.8784)
  %multiply.8785 = bf16[1,14336,4096]{2,1,0} multiply(%select.2853, %select.2853)
  %multiply.8786 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8785, %broadcast.10138)
  %param.860 = bf16[1,14336,4096]{2,1,0} parameter(912), sharding={devices=[8,1,1]<=[8]}
  %multiply.8787 = bf16[1,14336,4096]{2,1,0} multiply(%param.860, %broadcast.10139)
  %add.6869 = bf16[1,14336,4096]{2,1,0} add(%multiply.8786, %multiply.8787)
  %divide.1871 = bf16[1,14336,4096]{2,1,0} divide(%add.6869, %broadcast.10140)
  %sqrt.265 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1871)
  %add.6870 = bf16[1,14336,4096]{2,1,0} add(%sqrt.265, %broadcast.10141)
  %multiply.8788 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6870)
  %divide.1872 = bf16[1,14336,4096]{2,1,0} divide(%add.6868, %multiply.8788)
  %multiply.8790 = bf16[1,14336,4096]{2,1,0} multiply(%param.56, %broadcast.10135)
  %add.6871 = bf16[1,14336,4096]{2,1,0} add(%divide.1872, %multiply.8790)
  %multiply.8791 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6871)
  %add.6872 = bf16[1,14336,4096]{2,1,0} add(%param.56, %multiply.8791)
  %divide.1873 = bf16[4096]{0} divide(%all-reduce.397, %broadcast.10081)
  %select.2854 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.397, %divide.1873)
  %multiply.8792 = bf16[4096]{0} multiply(%select.2854, %broadcast.10083)
  %param.861 = bf16[4096]{0} parameter(590), sharding={replicated}
  %multiply.8793 = bf16[4096]{0} multiply(%param.861, %broadcast.10085)
  %add.6873 = bf16[4096]{0} add(%multiply.8792, %multiply.8793)
  %multiply.8794 = bf16[4096]{0} multiply(%select.2854, %select.2854)
  %multiply.8795 = bf16[4096]{0} multiply(%multiply.8794, %broadcast.10088)
  %param.862 = bf16[4096]{0} parameter(913), sharding={replicated}
  %multiply.8796 = bf16[4096]{0} multiply(%param.862, %broadcast.10090)
  %add.6874 = bf16[4096]{0} add(%multiply.8795, %multiply.8796)
  %divide.1874 = bf16[4096]{0} divide(%add.6874, %broadcast.10092)
  %sqrt.266 = bf16[4096]{0} sqrt(%divide.1874)
  %add.6875 = bf16[4096]{0} add(%sqrt.266, %broadcast.10094)
  %multiply.8797 = bf16[4096]{0} multiply(%broadcast.10086, %add.6875)
  %divide.1875 = bf16[4096]{0} divide(%add.6873, %multiply.8797)
  %multiply.8798 = bf16[4096]{0} multiply(%param.52, %broadcast.10083)
  %add.6876 = bf16[4096]{0} add(%divide.1875, %multiply.8798)
  %multiply.8799 = bf16[4096]{0} multiply(%broadcast.5338, %add.6876)
  %add.6877 = bf16[4096]{0} add(%param.52, %multiply.8799)
  %divide.1876 = bf16[4096]{0} divide(%all-reduce.398, %broadcast.10081)
  %select.2855 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.398, %divide.1876)
  %multiply.8800 = bf16[4096]{0} multiply(%select.2855, %broadcast.10083)
  %param.863 = bf16[4096]{0} parameter(591), sharding={replicated}
  %multiply.8801 = bf16[4096]{0} multiply(%param.863, %broadcast.10085)
  %add.6878 = bf16[4096]{0} add(%multiply.8800, %multiply.8801)
  %multiply.8802 = bf16[4096]{0} multiply(%select.2855, %select.2855)
  %multiply.8803 = bf16[4096]{0} multiply(%multiply.8802, %broadcast.10088)
  %param.864 = bf16[4096]{0} parameter(914), sharding={replicated}
  %multiply.8804 = bf16[4096]{0} multiply(%param.864, %broadcast.10090)
  %add.6879 = bf16[4096]{0} add(%multiply.8803, %multiply.8804)
  %divide.1877 = bf16[4096]{0} divide(%add.6879, %broadcast.10092)
  %sqrt.267 = bf16[4096]{0} sqrt(%divide.1877)
  %add.6880 = bf16[4096]{0} add(%sqrt.267, %broadcast.10094)
  %multiply.8806 = bf16[4096]{0} multiply(%broadcast.10086, %add.6880)
  %divide.1878 = bf16[4096]{0} divide(%add.6878, %multiply.8806)
  %multiply.8807 = bf16[4096]{0} multiply(%param.47, %broadcast.10083)
  %add.6881 = bf16[4096]{0} add(%divide.1878, %multiply.8807)
  %multiply.8808 = bf16[4096]{0} multiply(%broadcast.5338, %add.6881)
  %add.6882 = bf16[4096]{0} add(%param.47, %multiply.8808)
  %divide.1879 = bf16[512,8,128]{0,2,1} divide(%transpose.424, %broadcast.10162)
  %select.2856 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.424, %divide.1879)
  %multiply.8809 = bf16[512,8,128]{0,2,1} multiply(%select.2856, %broadcast.10163)
  %param.865 = bf16[512,8,128]{2,1,0} parameter(592), sharding={devices=[8,1,1]<=[8]}
  %multiply.8810 = bf16[512,8,128]{2,1,0} multiply(%param.865, %broadcast.10164)
  %add.6883 = bf16[512,8,128]{0,2,1} add(%multiply.8809, %multiply.8810)
  %multiply.8811 = bf16[512,8,128]{0,2,1} multiply(%select.2856, %select.2856)
  %multiply.8812 = bf16[512,8,128]{0,2,1} multiply(%multiply.8811, %broadcast.10166)
  %param.866 = bf16[512,8,128]{2,1,0} parameter(915), sharding={devices=[8,1,1]<=[8]}
  %multiply.8813 = bf16[512,8,128]{2,1,0} multiply(%param.866, %broadcast.10167)
  %add.6884 = bf16[512,8,128]{0,2,1} add(%multiply.8812, %multiply.8813)
  %divide.1880 = bf16[512,8,128]{0,2,1} divide(%add.6884, %broadcast.10168)
  %sqrt.268 = bf16[512,8,128]{0,2,1} sqrt(%divide.1880)
  %add.6885 = bf16[512,8,128]{0,2,1} add(%sqrt.268, %broadcast.10169)
  %multiply.8814 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6885)
  %divide.1881 = bf16[512,8,128]{0,2,1} divide(%add.6883, %multiply.8814)
  %multiply.8816 = bf16[512,8,128]{2,1,0} multiply(%param.49, %broadcast.10163)
  %add.6886 = bf16[512,8,128]{0,2,1} add(%divide.1881, %multiply.8816)
  %multiply.8817 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6886)
  %add.6887 = bf16[512,8,128]{2,1,0} add(%param.49, %multiply.8817)
  %divide.1882 = bf16[32,128,512]{1,0,2} divide(%transpose.425, %broadcast.10172)
  %select.2857 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.425, %divide.1882)
  %multiply.8818 = bf16[32,128,512]{1,0,2} multiply(%select.2857, %broadcast.10173)
  %param.867 = bf16[32,128,512]{2,1,0} parameter(593), sharding={devices=[1,1,8]<=[8]}
  %multiply.8819 = bf16[32,128,512]{2,1,0} multiply(%param.867, %broadcast.10174)
  %add.6889 = bf16[32,128,512]{1,0,2} add(%multiply.8818, %multiply.8819)
  %multiply.8820 = bf16[32,128,512]{1,0,2} multiply(%select.2857, %select.2857)
  %multiply.8821 = bf16[32,128,512]{1,0,2} multiply(%multiply.8820, %broadcast.10176)
  %param.868 = bf16[32,128,512]{2,1,0} parameter(916), sharding={devices=[1,1,8]<=[8]}
  %multiply.8822 = bf16[32,128,512]{2,1,0} multiply(%param.868, %broadcast.10177)
  %add.6890 = bf16[32,128,512]{1,0,2} add(%multiply.8821, %multiply.8822)
  %divide.1883 = bf16[32,128,512]{1,0,2} divide(%add.6890, %broadcast.10178)
  %sqrt.269 = bf16[32,128,512]{1,0,2} sqrt(%divide.1883)
  %add.6891 = bf16[32,128,512]{1,0,2} add(%sqrt.269, %broadcast.10179)
  %multiply.8823 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6891)
  %divide.1884 = bf16[32,128,512]{1,0,2} divide(%add.6889, %multiply.8823)
  %multiply.8824 = bf16[32,128,512]{2,1,0} multiply(%param.51, %broadcast.10173)
  %add.6892 = bf16[32,128,512]{1,0,2} add(%divide.1884, %multiply.8824)
  %multiply.8825 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6892)
  %add.6893 = bf16[32,128,512]{2,1,0} add(%param.51, %multiply.8825)
  %divide.1885 = bf16[512,32,128]{0,2,1} divide(%transpose.426, %broadcast.10182)
  %select.2858 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.426, %divide.1885)
  %multiply.8826 = bf16[512,32,128]{0,2,1} multiply(%select.2858, %broadcast.10183)
  %param.869 = bf16[512,32,128]{2,1,0} parameter(594), sharding={devices=[8,1,1]<=[8]}
  %multiply.8827 = bf16[512,32,128]{2,1,0} multiply(%param.869, %broadcast.10184)
  %add.6894 = bf16[512,32,128]{0,2,1} add(%multiply.8826, %multiply.8827)
  %multiply.8829 = bf16[512,32,128]{0,2,1} multiply(%select.2858, %select.2858)
  %multiply.8830 = bf16[512,32,128]{0,2,1} multiply(%multiply.8829, %broadcast.10186)
  %param.870 = bf16[512,32,128]{2,1,0} parameter(917), sharding={devices=[8,1,1]<=[8]}
  %multiply.8831 = bf16[512,32,128]{2,1,0} multiply(%param.870, %broadcast.10187)
  %add.6895 = bf16[512,32,128]{0,2,1} add(%multiply.8830, %multiply.8831)
  %divide.1886 = bf16[512,32,128]{0,2,1} divide(%add.6895, %broadcast.10188)
  %sqrt.270 = bf16[512,32,128]{0,2,1} sqrt(%divide.1886)
  %add.6896 = bf16[512,32,128]{0,2,1} add(%sqrt.270, %broadcast.10189)
  %multiply.8832 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6896)
  %divide.1887 = bf16[512,32,128]{0,2,1} divide(%add.6894, %multiply.8832)
  %multiply.8833 = bf16[512,32,128]{2,1,0} multiply(%param.48, %broadcast.10183)
  %add.6897 = bf16[512,32,128]{0,2,1} add(%divide.1887, %multiply.8833)
  %multiply.8835 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6897)
  %add.6898 = bf16[512,32,128]{2,1,0} add(%param.48, %multiply.8835)
  %divide.1888 = bf16[512,8,128]{0,2,1} divide(%transpose.427, %broadcast.10162)
  %select.2859 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.427, %divide.1888)
  %multiply.8836 = bf16[512,8,128]{0,2,1} multiply(%select.2859, %broadcast.10163)
  %param.871 = bf16[512,8,128]{2,1,0} parameter(595), sharding={devices=[8,1,1]<=[8]}
  %multiply.8837 = bf16[512,8,128]{2,1,0} multiply(%param.871, %broadcast.10164)
  %add.6899 = bf16[512,8,128]{0,2,1} add(%multiply.8836, %multiply.8837)
  %multiply.8838 = bf16[512,8,128]{0,2,1} multiply(%select.2859, %select.2859)
  %multiply.8839 = bf16[512,8,128]{0,2,1} multiply(%multiply.8838, %broadcast.10166)
  %param.872 = bf16[512,8,128]{2,1,0} parameter(918), sharding={devices=[8,1,1]<=[8]}
  %multiply.8840 = bf16[512,8,128]{2,1,0} multiply(%param.872, %broadcast.10167)
  %add.6900 = bf16[512,8,128]{0,2,1} add(%multiply.8839, %multiply.8840)
  %divide.1889 = bf16[512,8,128]{0,2,1} divide(%add.6900, %broadcast.10168)
  %sqrt.271 = bf16[512,8,128]{0,2,1} sqrt(%divide.1889)
  %add.6901 = bf16[512,8,128]{0,2,1} add(%sqrt.271, %broadcast.10169)
  %multiply.8841 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6901)
  %divide.1890 = bf16[512,8,128]{0,2,1} divide(%add.6899, %multiply.8841)
  %multiply.8842 = bf16[512,8,128]{2,1,0} multiply(%param.50, %broadcast.10163)
  %add.6903 = bf16[512,8,128]{0,2,1} add(%divide.1890, %multiply.8842)
  %multiply.8844 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6903)
  %add.6904 = bf16[512,8,128]{2,1,0} add(%param.50, %multiply.8844)
  %divide.1891 = bf16[512,8]{0,1} divide(%dynamic-slice.2609, %broadcast.10097)
  %select.2860 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2609, %divide.1891)
  %multiply.8845 = bf16[512,8]{0,1} multiply(%select.2860, %broadcast.10098)
  %param.873 = bf16[512,8]{1,0} parameter(596), sharding={devices=[8,1]<=[8]}
  %multiply.8846 = bf16[512,8]{1,0} multiply(%param.873, %broadcast.10099)
  %add.6906 = bf16[512,8]{0,1} add(%multiply.8845, %multiply.8846)
  %multiply.8847 = bf16[512,8]{0,1} multiply(%select.2860, %select.2860)
  %multiply.8848 = bf16[512,8]{0,1} multiply(%multiply.8847, %broadcast.10101)
  %param.874 = bf16[512,8]{1,0} parameter(919), sharding={devices=[8,1]<=[8]}
  %multiply.8849 = bf16[512,8]{1,0} multiply(%param.874, %broadcast.10102)
  %add.6907 = bf16[512,8]{0,1} add(%multiply.8848, %multiply.8849)
  %divide.1892 = bf16[512,8]{0,1} divide(%add.6907, %broadcast.10103)
  %sqrt.272 = bf16[512,8]{0,1} sqrt(%divide.1892)
  %add.6909 = bf16[512,8]{0,1} add(%sqrt.272, %broadcast.10104)
  %multiply.8850 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6909)
  %divide.1894 = bf16[512,8]{0,1} divide(%add.6906, %multiply.8850)
  %multiply.8851 = bf16[512,8]{1,0} multiply(%param.63, %broadcast.10098)
  %add.6910 = bf16[512,8]{0,1} add(%divide.1894, %multiply.8851)
  %multiply.8852 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6910)
  %add.6911 = bf16[512,8]{1,0} add(%param.63, %multiply.8852)
  %divide.1895 = bf16[1,4096,14336]{2,1,0} divide(%copy.4282, %broadcast.10111)
  %select.2861 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4282, %divide.1895)
  %multiply.8853 = bf16[1,4096,14336]{2,1,0} multiply(%select.2861, %broadcast.10112)
  %param.875 = bf16[1,4096,14336]{2,1,0} parameter(597), sharding={devices=[8,1,1]<=[8]}
  %multiply.8854 = bf16[1,4096,14336]{2,1,0} multiply(%param.875, %broadcast.10113)
  %add.6912 = bf16[1,4096,14336]{2,1,0} add(%multiply.8853, %multiply.8854)
  %multiply.8855 = bf16[1,4096,14336]{2,1,0} multiply(%select.2861, %select.2861)
  %multiply.8856 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8855, %broadcast.10115)
  %param.876 = bf16[1,4096,14336]{2,1,0} parameter(920), sharding={devices=[8,1,1]<=[8]}
  %multiply.8857 = bf16[1,4096,14336]{2,1,0} multiply(%param.876, %broadcast.10116)
  %add.6913 = bf16[1,4096,14336]{2,1,0} add(%multiply.8856, %multiply.8857)
  %divide.1896 = bf16[1,4096,14336]{2,1,0} divide(%add.6913, %broadcast.10117)
  %sqrt.273 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1896)
  %add.6914 = bf16[1,4096,14336]{2,1,0} add(%sqrt.273, %broadcast.10119)
  %multiply.8858 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6914)
  %divide.1897 = bf16[1,4096,14336]{2,1,0} divide(%add.6912, %multiply.8858)
  %multiply.8859 = bf16[1,4096,14336]{2,1,0} multiply(%param.64, %broadcast.10112)
  %add.6915 = bf16[1,4096,14336]{2,1,0} add(%divide.1897, %multiply.8859)
  %multiply.8860 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6915)
  %add.6916 = bf16[1,4096,14336]{2,1,0} add(%param.64, %multiply.8860)
  %divide.1898 = bf16[1,4096,14336]{2,1,0} divide(%copy.4283, %broadcast.10111)
  %select.2862 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4283, %divide.1898)
  %multiply.8861 = bf16[1,4096,14336]{2,1,0} multiply(%select.2862, %broadcast.10112)
  %param.877 = bf16[1,4096,14336]{2,1,0} parameter(598), sharding={devices=[8,1,1]<=[8]}
  %multiply.8862 = bf16[1,4096,14336]{2,1,0} multiply(%param.877, %broadcast.10113)
  %add.6917 = bf16[1,4096,14336]{2,1,0} add(%multiply.8861, %multiply.8862)
  %multiply.8863 = bf16[1,4096,14336]{2,1,0} multiply(%select.2862, %select.2862)
  %multiply.8864 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8863, %broadcast.10115)
  %param.878 = bf16[1,4096,14336]{2,1,0} parameter(921), sharding={devices=[8,1,1]<=[8]}
  %multiply.8866 = bf16[1,4096,14336]{2,1,0} multiply(%param.878, %broadcast.10116)
  %add.6918 = bf16[1,4096,14336]{2,1,0} add(%multiply.8864, %multiply.8866)
  %divide.1899 = bf16[1,4096,14336]{2,1,0} divide(%add.6918, %broadcast.10117)
  %sqrt.274 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1899)
  %add.6919 = bf16[1,4096,14336]{2,1,0} add(%sqrt.274, %broadcast.10119)
  %multiply.8867 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6919)
  %divide.1900 = bf16[1,4096,14336]{2,1,0} divide(%add.6917, %multiply.8867)
  %multiply.8868 = bf16[1,4096,14336]{2,1,0} multiply(%param.65, %broadcast.10112)
  %add.6920 = bf16[1,4096,14336]{2,1,0} add(%divide.1900, %multiply.8868)
  %multiply.8870 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6920)
  %add.6921 = bf16[1,4096,14336]{2,1,0} add(%param.65, %multiply.8870)
  %divide.1901 = bf16[1,14336,4096]{2,1,0} divide(%copy.4284, %broadcast.10134)
  %select.2863 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4284, %divide.1901)
  %multiply.8871 = bf16[1,14336,4096]{2,1,0} multiply(%select.2863, %broadcast.10135)
  %param.879 = bf16[1,14336,4096]{2,1,0} parameter(599), sharding={devices=[8,1,1]<=[8]}
  %multiply.8872 = bf16[1,14336,4096]{2,1,0} multiply(%param.879, %broadcast.10136)
  %add.6923 = bf16[1,14336,4096]{2,1,0} add(%multiply.8871, %multiply.8872)
  %multiply.8873 = bf16[1,14336,4096]{2,1,0} multiply(%select.2863, %select.2863)
  %multiply.8875 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8873, %broadcast.10138)
  %param.880 = bf16[1,14336,4096]{2,1,0} parameter(922), sharding={devices=[8,1,1]<=[8]}
  %multiply.8876 = bf16[1,14336,4096]{2,1,0} multiply(%param.880, %broadcast.10139)
  %add.6924 = bf16[1,14336,4096]{2,1,0} add(%multiply.8875, %multiply.8876)
  %divide.1902 = bf16[1,14336,4096]{2,1,0} divide(%add.6924, %broadcast.10140)
  %sqrt.275 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1902)
  %add.6925 = bf16[1,14336,4096]{2,1,0} add(%sqrt.275, %broadcast.10141)
  %multiply.8877 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6925)
  %divide.1904 = bf16[1,14336,4096]{2,1,0} divide(%add.6923, %multiply.8877)
  %multiply.8879 = bf16[1,14336,4096]{2,1,0} multiply(%param.66, %broadcast.10135)
  %add.6926 = bf16[1,14336,4096]{2,1,0} add(%divide.1904, %multiply.8879)
  %multiply.8880 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6926)
  %add.6927 = bf16[1,14336,4096]{2,1,0} add(%param.66, %multiply.8880)
  %divide.1905 = bf16[4096]{0} divide(%all-reduce.412, %broadcast.10081)
  %select.2864 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.412, %divide.1905)
  %multiply.8881 = bf16[4096]{0} multiply(%select.2864, %broadcast.10083)
  %param.881 = bf16[4096]{0} parameter(600), sharding={replicated}
  %multiply.8882 = bf16[4096]{0} multiply(%param.881, %broadcast.10085)
  %add.6928 = bf16[4096]{0} add(%multiply.8881, %multiply.8882)
  %multiply.8884 = bf16[4096]{0} multiply(%select.2864, %select.2864)
  %multiply.8885 = bf16[4096]{0} multiply(%multiply.8884, %broadcast.10088)
  %param.882 = bf16[4096]{0} parameter(923), sharding={replicated}
  %multiply.8886 = bf16[4096]{0} multiply(%param.882, %broadcast.10090)
  %add.6929 = bf16[4096]{0} add(%multiply.8885, %multiply.8886)
  %divide.1906 = bf16[4096]{0} divide(%add.6929, %broadcast.10092)
  %sqrt.276 = bf16[4096]{0} sqrt(%divide.1906)
  %add.6930 = bf16[4096]{0} add(%sqrt.276, %broadcast.10094)
  %multiply.8887 = bf16[4096]{0} multiply(%broadcast.10086, %add.6930)
  %divide.1907 = bf16[4096]{0} divide(%add.6928, %multiply.8887)
  %multiply.8888 = bf16[4096]{0} multiply(%param.62, %broadcast.10083)
  %add.6931 = bf16[4096]{0} add(%divide.1907, %multiply.8888)
  %multiply.8889 = bf16[4096]{0} multiply(%broadcast.5338, %add.6931)
  %add.6933 = bf16[4096]{0} add(%param.62, %multiply.8889)
  %divide.1908 = bf16[4096]{0} divide(%all-reduce.413, %broadcast.10081)
  %select.2865 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.413, %divide.1908)
  %multiply.8890 = bf16[4096]{0} multiply(%select.2865, %broadcast.10083)
  %param.883 = bf16[4096]{0} parameter(601), sharding={replicated}
  %multiply.8891 = bf16[4096]{0} multiply(%param.883, %broadcast.10085)
  %add.6934 = bf16[4096]{0} add(%multiply.8890, %multiply.8891)
  %multiply.8892 = bf16[4096]{0} multiply(%select.2865, %select.2865)
  %multiply.8893 = bf16[4096]{0} multiply(%multiply.8892, %broadcast.10088)
  %param.884 = bf16[4096]{0} parameter(924), sharding={replicated}
  %multiply.8894 = bf16[4096]{0} multiply(%param.884, %broadcast.10090)
  %add.6935 = bf16[4096]{0} add(%multiply.8893, %multiply.8894)
  %divide.1909 = bf16[4096]{0} divide(%add.6935, %broadcast.10092)
  %sqrt.277 = bf16[4096]{0} sqrt(%divide.1909)
  %add.6936 = bf16[4096]{0} add(%sqrt.277, %broadcast.10094)
  %multiply.8895 = bf16[4096]{0} multiply(%broadcast.10086, %add.6936)
  %divide.1910 = bf16[4096]{0} divide(%add.6934, %multiply.8895)
  %multiply.8896 = bf16[4096]{0} multiply(%param.57, %broadcast.10083)
  %add.6937 = bf16[4096]{0} add(%divide.1910, %multiply.8896)
  %multiply.8897 = bf16[4096]{0} multiply(%broadcast.5338, %add.6937)
  %add.6938 = bf16[4096]{0} add(%param.57, %multiply.8897)
  %divide.1911 = bf16[512,8,128]{0,2,1} divide(%transpose.428, %broadcast.10162)
  %select.2866 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.428, %divide.1911)
  %multiply.8898 = bf16[512,8,128]{0,2,1} multiply(%select.2866, %broadcast.10163)
  %param.885 = bf16[512,8,128]{2,1,0} parameter(602), sharding={devices=[8,1,1]<=[8]}
  %multiply.8899 = bf16[512,8,128]{2,1,0} multiply(%param.885, %broadcast.10164)
  %add.6939 = bf16[512,8,128]{0,2,1} add(%multiply.8898, %multiply.8899)
  %multiply.8900 = bf16[512,8,128]{0,2,1} multiply(%select.2866, %select.2866)
  %multiply.8901 = bf16[512,8,128]{0,2,1} multiply(%multiply.8900, %broadcast.10166)
  %param.886 = bf16[512,8,128]{2,1,0} parameter(925), sharding={devices=[8,1,1]<=[8]}
  %multiply.8902 = bf16[512,8,128]{2,1,0} multiply(%param.886, %broadcast.10167)
  %add.6940 = bf16[512,8,128]{0,2,1} add(%multiply.8901, %multiply.8902)
  %divide.1912 = bf16[512,8,128]{0,2,1} divide(%add.6940, %broadcast.10168)
  %sqrt.278 = bf16[512,8,128]{0,2,1} sqrt(%divide.1912)
  %add.6941 = bf16[512,8,128]{0,2,1} add(%sqrt.278, %broadcast.10169)
  %multiply.8903 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6941)
  %divide.1913 = bf16[512,8,128]{0,2,1} divide(%add.6939, %multiply.8903)
  %multiply.8904 = bf16[512,8,128]{2,1,0} multiply(%param.59, %broadcast.10163)
  %add.6942 = bf16[512,8,128]{0,2,1} add(%divide.1913, %multiply.8904)
  %multiply.8906 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6942)
  %add.6943 = bf16[512,8,128]{2,1,0} add(%param.59, %multiply.8906)
  %divide.1914 = bf16[32,128,512]{1,0,2} divide(%transpose.429, %broadcast.10172)
  %select.2867 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.429, %divide.1914)
  %multiply.8907 = bf16[32,128,512]{1,0,2} multiply(%select.2867, %broadcast.10173)
  %param.887 = bf16[32,128,512]{2,1,0} parameter(603), sharding={devices=[1,1,8]<=[8]}
  %multiply.8908 = bf16[32,128,512]{2,1,0} multiply(%param.887, %broadcast.10174)
  %add.6944 = bf16[32,128,512]{1,0,2} add(%multiply.8907, %multiply.8908)
  %multiply.8910 = bf16[32,128,512]{1,0,2} multiply(%select.2867, %select.2867)
  %multiply.8911 = bf16[32,128,512]{1,0,2} multiply(%multiply.8910, %broadcast.10176)
  %param.888 = bf16[32,128,512]{2,1,0} parameter(926), sharding={devices=[1,1,8]<=[8]}
  %multiply.8912 = bf16[32,128,512]{2,1,0} multiply(%param.888, %broadcast.10177)
  %add.6945 = bf16[32,128,512]{1,0,2} add(%multiply.8911, %multiply.8912)
  %divide.1915 = bf16[32,128,512]{1,0,2} divide(%add.6945, %broadcast.10178)
  %sqrt.279 = bf16[32,128,512]{1,0,2} sqrt(%divide.1915)
  %add.6947 = bf16[32,128,512]{1,0,2} add(%sqrt.279, %broadcast.10179)
  %multiply.8913 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.6947)
  %divide.1916 = bf16[32,128,512]{1,0,2} divide(%add.6944, %multiply.8913)
  %multiply.8915 = bf16[32,128,512]{2,1,0} multiply(%param.61, %broadcast.10173)
  %add.6948 = bf16[32,128,512]{1,0,2} add(%divide.1916, %multiply.8915)
  %multiply.8916 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.6948)
  %add.6949 = bf16[32,128,512]{2,1,0} add(%param.61, %multiply.8916)
  %divide.1917 = bf16[512,32,128]{0,2,1} divide(%transpose.430, %broadcast.10182)
  %select.2868 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.430, %divide.1917)
  %multiply.8917 = bf16[512,32,128]{0,2,1} multiply(%select.2868, %broadcast.10183)
  %param.889 = bf16[512,32,128]{2,1,0} parameter(604), sharding={devices=[8,1,1]<=[8]}
  %multiply.8919 = bf16[512,32,128]{2,1,0} multiply(%param.889, %broadcast.10184)
  %add.6950 = bf16[512,32,128]{0,2,1} add(%multiply.8917, %multiply.8919)
  %multiply.8920 = bf16[512,32,128]{0,2,1} multiply(%select.2868, %select.2868)
  %multiply.8921 = bf16[512,32,128]{0,2,1} multiply(%multiply.8920, %broadcast.10186)
  %param.890 = bf16[512,32,128]{2,1,0} parameter(927), sharding={devices=[8,1,1]<=[8]}
  %multiply.8922 = bf16[512,32,128]{2,1,0} multiply(%param.890, %broadcast.10187)
  %add.6951 = bf16[512,32,128]{0,2,1} add(%multiply.8921, %multiply.8922)
  %divide.1918 = bf16[512,32,128]{0,2,1} divide(%add.6951, %broadcast.10188)
  %sqrt.280 = bf16[512,32,128]{0,2,1} sqrt(%divide.1918)
  %add.6952 = bf16[512,32,128]{0,2,1} add(%sqrt.280, %broadcast.10189)
  %multiply.8923 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.6952)
  %divide.1919 = bf16[512,32,128]{0,2,1} divide(%add.6950, %multiply.8923)
  %multiply.8924 = bf16[512,32,128]{2,1,0} multiply(%param.58, %broadcast.10183)
  %add.6953 = bf16[512,32,128]{0,2,1} add(%divide.1919, %multiply.8924)
  %multiply.8925 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.6953)
  %add.6954 = bf16[512,32,128]{2,1,0} add(%param.58, %multiply.8925)
  %divide.1920 = bf16[512,8,128]{0,2,1} divide(%transpose.431, %broadcast.10162)
  %select.2869 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.431, %divide.1920)
  %multiply.8926 = bf16[512,8,128]{0,2,1} multiply(%select.2869, %broadcast.10163)
  %param.891 = bf16[512,8,128]{2,1,0} parameter(605), sharding={devices=[8,1,1]<=[8]}
  %multiply.8927 = bf16[512,8,128]{2,1,0} multiply(%param.891, %broadcast.10164)
  %add.6956 = bf16[512,8,128]{0,2,1} add(%multiply.8926, %multiply.8927)
  %multiply.8928 = bf16[512,8,128]{0,2,1} multiply(%select.2869, %select.2869)
  %multiply.8929 = bf16[512,8,128]{0,2,1} multiply(%multiply.8928, %broadcast.10166)
  %param.892 = bf16[512,8,128]{2,1,0} parameter(928), sharding={devices=[8,1,1]<=[8]}
  %multiply.8930 = bf16[512,8,128]{2,1,0} multiply(%param.892, %broadcast.10167)
  %add.6957 = bf16[512,8,128]{0,2,1} add(%multiply.8929, %multiply.8930)
  %divide.1921 = bf16[512,8,128]{0,2,1} divide(%add.6957, %broadcast.10168)
  %sqrt.281 = bf16[512,8,128]{0,2,1} sqrt(%divide.1921)
  %add.6958 = bf16[512,8,128]{0,2,1} add(%sqrt.281, %broadcast.10169)
  %multiply.8931 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6958)
  %divide.1922 = bf16[512,8,128]{0,2,1} divide(%add.6956, %multiply.8931)
  %multiply.8932 = bf16[512,8,128]{2,1,0} multiply(%param.60, %broadcast.10163)
  %add.6959 = bf16[512,8,128]{0,2,1} add(%divide.1922, %multiply.8932)
  %multiply.8933 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6959)
  %add.6960 = bf16[512,8,128]{2,1,0} add(%param.60, %multiply.8933)
  %divide.1923 = bf16[512,8]{0,1} divide(%dynamic-slice.2619, %broadcast.10097)
  %select.2870 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2619, %divide.1923)
  %multiply.8934 = bf16[512,8]{0,1} multiply(%select.2870, %broadcast.10098)
  %param.893 = bf16[512,8]{1,0} parameter(606), sharding={devices=[8,1]<=[8]}
  %multiply.8935 = bf16[512,8]{1,0} multiply(%param.893, %broadcast.10099)
  %add.6961 = bf16[512,8]{0,1} add(%multiply.8934, %multiply.8935)
  %multiply.8936 = bf16[512,8]{0,1} multiply(%select.2870, %select.2870)
  %multiply.8937 = bf16[512,8]{0,1} multiply(%multiply.8936, %broadcast.10101)
  %param.894 = bf16[512,8]{1,0} parameter(929), sharding={devices=[8,1]<=[8]}
  %multiply.8938 = bf16[512,8]{1,0} multiply(%param.894, %broadcast.10102)
  %add.6962 = bf16[512,8]{0,1} add(%multiply.8937, %multiply.8938)
  %divide.1924 = bf16[512,8]{0,1} divide(%add.6962, %broadcast.10103)
  %sqrt.282 = bf16[512,8]{0,1} sqrt(%divide.1924)
  %add.6963 = bf16[512,8]{0,1} add(%sqrt.282, %broadcast.10104)
  %multiply.8939 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.6963)
  %divide.1925 = bf16[512,8]{0,1} divide(%add.6961, %multiply.8939)
  %multiply.8940 = bf16[512,8]{1,0} multiply(%param.73, %broadcast.10098)
  %add.6964 = bf16[512,8]{0,1} add(%divide.1925, %multiply.8940)
  %multiply.8941 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.6964)
  %add.6965 = bf16[512,8]{1,0} add(%param.73, %multiply.8941)
  %divide.1926 = bf16[1,4096,14336]{2,1,0} divide(%copy.4285, %broadcast.10111)
  %select.2871 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4285, %divide.1926)
  %multiply.8942 = bf16[1,4096,14336]{2,1,0} multiply(%select.2871, %broadcast.10112)
  %param.895 = bf16[1,4096,14336]{2,1,0} parameter(607), sharding={devices=[8,1,1]<=[8]}
  %multiply.8943 = bf16[1,4096,14336]{2,1,0} multiply(%param.895, %broadcast.10113)
  %add.6966 = bf16[1,4096,14336]{2,1,0} add(%multiply.8942, %multiply.8943)
  %multiply.8944 = bf16[1,4096,14336]{2,1,0} multiply(%select.2871, %select.2871)
  %multiply.8945 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8944, %broadcast.10115)
  %param.896 = bf16[1,4096,14336]{2,1,0} parameter(930), sharding={devices=[8,1,1]<=[8]}
  %multiply.8946 = bf16[1,4096,14336]{2,1,0} multiply(%param.896, %broadcast.10116)
  %add.6967 = bf16[1,4096,14336]{2,1,0} add(%multiply.8945, %multiply.8946)
  %divide.1927 = bf16[1,4096,14336]{2,1,0} divide(%add.6967, %broadcast.10117)
  %sqrt.283 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1927)
  %add.6968 = bf16[1,4096,14336]{2,1,0} add(%sqrt.283, %broadcast.10119)
  %multiply.8947 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6968)
  %divide.1928 = bf16[1,4096,14336]{2,1,0} divide(%add.6966, %multiply.8947)
  %multiply.8948 = bf16[1,4096,14336]{2,1,0} multiply(%param.74, %broadcast.10112)
  %add.6969 = bf16[1,4096,14336]{2,1,0} add(%divide.1928, %multiply.8948)
  %multiply.8949 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6969)
  %add.6970 = bf16[1,4096,14336]{2,1,0} add(%param.74, %multiply.8949)
  %divide.1929 = bf16[1,4096,14336]{2,1,0} divide(%copy.4286, %broadcast.10111)
  %select.2872 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4286, %divide.1929)
  %multiply.8950 = bf16[1,4096,14336]{2,1,0} multiply(%select.2872, %broadcast.10112)
  %param.897 = bf16[1,4096,14336]{2,1,0} parameter(608), sharding={devices=[8,1,1]<=[8]}
  %multiply.8951 = bf16[1,4096,14336]{2,1,0} multiply(%param.897, %broadcast.10113)
  %add.6971 = bf16[1,4096,14336]{2,1,0} add(%multiply.8950, %multiply.8951)
  %multiply.8952 = bf16[1,4096,14336]{2,1,0} multiply(%select.2872, %select.2872)
  %multiply.8953 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.8952, %broadcast.10115)
  %param.898 = bf16[1,4096,14336]{2,1,0} parameter(931), sharding={devices=[8,1,1]<=[8]}
  %multiply.8954 = bf16[1,4096,14336]{2,1,0} multiply(%param.898, %broadcast.10116)
  %add.6972 = bf16[1,4096,14336]{2,1,0} add(%multiply.8953, %multiply.8954)
  %divide.1930 = bf16[1,4096,14336]{2,1,0} divide(%add.6972, %broadcast.10117)
  %sqrt.284 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1930)
  %add.6973 = bf16[1,4096,14336]{2,1,0} add(%sqrt.284, %broadcast.10119)
  %multiply.8955 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.6973)
  %divide.1931 = bf16[1,4096,14336]{2,1,0} divide(%add.6971, %multiply.8955)
  %multiply.8956 = bf16[1,4096,14336]{2,1,0} multiply(%param.75, %broadcast.10112)
  %add.6974 = bf16[1,4096,14336]{2,1,0} add(%divide.1931, %multiply.8956)
  %multiply.8957 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.6974)
  %add.6975 = bf16[1,4096,14336]{2,1,0} add(%param.75, %multiply.8957)
  %divide.1932 = bf16[1,14336,4096]{2,1,0} divide(%copy.4287, %broadcast.10134)
  %select.2873 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4287, %divide.1932)
  %multiply.8958 = bf16[1,14336,4096]{2,1,0} multiply(%select.2873, %broadcast.10135)
  %param.899 = bf16[1,14336,4096]{2,1,0} parameter(609), sharding={devices=[8,1,1]<=[8]}
  %multiply.8959 = bf16[1,14336,4096]{2,1,0} multiply(%param.899, %broadcast.10136)
  %add.6976 = bf16[1,14336,4096]{2,1,0} add(%multiply.8958, %multiply.8959)
  %multiply.8960 = bf16[1,14336,4096]{2,1,0} multiply(%select.2873, %select.2873)
  %multiply.8961 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.8960, %broadcast.10138)
  %param.900 = bf16[1,14336,4096]{2,1,0} parameter(932), sharding={devices=[8,1,1]<=[8]}
  %multiply.8962 = bf16[1,14336,4096]{2,1,0} multiply(%param.900, %broadcast.10139)
  %add.6977 = bf16[1,14336,4096]{2,1,0} add(%multiply.8961, %multiply.8962)
  %divide.1933 = bf16[1,14336,4096]{2,1,0} divide(%add.6977, %broadcast.10140)
  %sqrt.285 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1933)
  %add.6978 = bf16[1,14336,4096]{2,1,0} add(%sqrt.285, %broadcast.10141)
  %multiply.8963 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.6978)
  %divide.1934 = bf16[1,14336,4096]{2,1,0} divide(%add.6976, %multiply.8963)
  %multiply.8964 = bf16[1,14336,4096]{2,1,0} multiply(%param.76, %broadcast.10135)
  %add.6979 = bf16[1,14336,4096]{2,1,0} add(%divide.1934, %multiply.8964)
  %multiply.8965 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.6979)
  %add.6980 = bf16[1,14336,4096]{2,1,0} add(%param.76, %multiply.8965)
  %divide.1935 = bf16[4096]{0} divide(%all-reduce.427, %broadcast.10081)
  %select.2874 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.427, %divide.1935)
  %multiply.8966 = bf16[4096]{0} multiply(%select.2874, %broadcast.10083)
  %param.901 = bf16[4096]{0} parameter(610), sharding={replicated}
  %multiply.8967 = bf16[4096]{0} multiply(%param.901, %broadcast.10085)
  %add.6981 = bf16[4096]{0} add(%multiply.8966, %multiply.8967)
  %multiply.8968 = bf16[4096]{0} multiply(%select.2874, %select.2874)
  %multiply.8969 = bf16[4096]{0} multiply(%multiply.8968, %broadcast.10088)
  %param.902 = bf16[4096]{0} parameter(933), sharding={replicated}
  %multiply.8970 = bf16[4096]{0} multiply(%param.902, %broadcast.10090)
  %add.6982 = bf16[4096]{0} add(%multiply.8969, %multiply.8970)
  %divide.1936 = bf16[4096]{0} divide(%add.6982, %broadcast.10092)
  %sqrt.286 = bf16[4096]{0} sqrt(%divide.1936)
  %add.6983 = bf16[4096]{0} add(%sqrt.286, %broadcast.10094)
  %multiply.8971 = bf16[4096]{0} multiply(%broadcast.10086, %add.6983)
  %divide.1937 = bf16[4096]{0} divide(%add.6981, %multiply.8971)
  %multiply.8972 = bf16[4096]{0} multiply(%param.72, %broadcast.10083)
  %add.6984 = bf16[4096]{0} add(%divide.1937, %multiply.8972)
  %multiply.8973 = bf16[4096]{0} multiply(%broadcast.5338, %add.6984)
  %add.6985 = bf16[4096]{0} add(%param.72, %multiply.8973)
  %divide.1938 = bf16[4096]{0} divide(%all-reduce.428, %broadcast.10081)
  %select.2875 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.428, %divide.1938)
  %multiply.8974 = bf16[4096]{0} multiply(%select.2875, %broadcast.10083)
  %param.903 = bf16[4096]{0} parameter(611), sharding={replicated}
  %multiply.8976 = bf16[4096]{0} multiply(%param.903, %broadcast.10085)
  %add.6986 = bf16[4096]{0} add(%multiply.8974, %multiply.8976)
  %multiply.8977 = bf16[4096]{0} multiply(%select.2875, %select.2875)
  %multiply.8978 = bf16[4096]{0} multiply(%multiply.8977, %broadcast.10088)
  %param.904 = bf16[4096]{0} parameter(934), sharding={replicated}
  %multiply.8979 = bf16[4096]{0} multiply(%param.904, %broadcast.10090)
  %add.6988 = bf16[4096]{0} add(%multiply.8978, %multiply.8979)
  %divide.1939 = bf16[4096]{0} divide(%add.6988, %broadcast.10092)
  %sqrt.287 = bf16[4096]{0} sqrt(%divide.1939)
  %add.6989 = bf16[4096]{0} add(%sqrt.287, %broadcast.10094)
  %multiply.8980 = bf16[4096]{0} multiply(%broadcast.10086, %add.6989)
  %divide.1940 = bf16[4096]{0} divide(%add.6986, %multiply.8980)
  %multiply.8981 = bf16[4096]{0} multiply(%param.67, %broadcast.10083)
  %add.6990 = bf16[4096]{0} add(%divide.1940, %multiply.8981)
  %multiply.8982 = bf16[4096]{0} multiply(%broadcast.5338, %add.6990)
  %add.6991 = bf16[4096]{0} add(%param.67, %multiply.8982)
  %divide.1941 = bf16[512,8,128]{0,2,1} divide(%transpose.432, %broadcast.10162)
  %select.2876 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.432, %divide.1941)
  %multiply.8983 = bf16[512,8,128]{0,2,1} multiply(%select.2876, %broadcast.10163)
  %param.905 = bf16[512,8,128]{2,1,0} parameter(612), sharding={devices=[8,1,1]<=[8]}
  %multiply.8984 = bf16[512,8,128]{2,1,0} multiply(%param.905, %broadcast.10164)
  %add.6992 = bf16[512,8,128]{0,2,1} add(%multiply.8983, %multiply.8984)
  %multiply.8985 = bf16[512,8,128]{0,2,1} multiply(%select.2876, %select.2876)
  %multiply.8986 = bf16[512,8,128]{0,2,1} multiply(%multiply.8985, %broadcast.10166)
  %param.906 = bf16[512,8,128]{2,1,0} parameter(935), sharding={devices=[8,1,1]<=[8]}
  %multiply.8987 = bf16[512,8,128]{2,1,0} multiply(%param.906, %broadcast.10167)
  %add.6993 = bf16[512,8,128]{0,2,1} add(%multiply.8986, %multiply.8987)
  %divide.1942 = bf16[512,8,128]{0,2,1} divide(%add.6993, %broadcast.10168)
  %sqrt.288 = bf16[512,8,128]{0,2,1} sqrt(%divide.1942)
  %add.6995 = bf16[512,8,128]{0,2,1} add(%sqrt.288, %broadcast.10169)
  %multiply.8989 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.6995)
  %divide.1943 = bf16[512,8,128]{0,2,1} divide(%add.6992, %multiply.8989)
  %multiply.8990 = bf16[512,8,128]{2,1,0} multiply(%param.69, %broadcast.10163)
  %add.6996 = bf16[512,8,128]{0,2,1} add(%divide.1943, %multiply.8990)
  %multiply.8991 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.6996)
  %add.6997 = bf16[512,8,128]{2,1,0} add(%param.69, %multiply.8991)
  %divide.1944 = bf16[32,128,512]{1,0,2} divide(%transpose.433, %broadcast.10172)
  %select.2877 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.433, %divide.1944)
  %multiply.8992 = bf16[32,128,512]{1,0,2} multiply(%select.2877, %broadcast.10173)
  %param.907 = bf16[32,128,512]{2,1,0} parameter(613), sharding={devices=[1,1,8]<=[8]}
  %multiply.8993 = bf16[32,128,512]{2,1,0} multiply(%param.907, %broadcast.10174)
  %add.6998 = bf16[32,128,512]{1,0,2} add(%multiply.8992, %multiply.8993)
  %multiply.8995 = bf16[32,128,512]{1,0,2} multiply(%select.2877, %select.2877)
  %multiply.8996 = bf16[32,128,512]{1,0,2} multiply(%multiply.8995, %broadcast.10176)
  %param.908 = bf16[32,128,512]{2,1,0} parameter(936), sharding={devices=[1,1,8]<=[8]}
  %multiply.8997 = bf16[32,128,512]{2,1,0} multiply(%param.908, %broadcast.10177)
  %add.7000 = bf16[32,128,512]{1,0,2} add(%multiply.8996, %multiply.8997)
  %divide.1945 = bf16[32,128,512]{1,0,2} divide(%add.7000, %broadcast.10178)
  %sqrt.289 = bf16[32,128,512]{1,0,2} sqrt(%divide.1945)
  %add.7001 = bf16[32,128,512]{1,0,2} add(%sqrt.289, %broadcast.10179)
  %multiply.8998 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.7001)
  %divide.1946 = bf16[32,128,512]{1,0,2} divide(%add.6998, %multiply.8998)
  %multiply.8999 = bf16[32,128,512]{2,1,0} multiply(%param.71, %broadcast.10173)
  %add.7002 = bf16[32,128,512]{1,0,2} add(%divide.1946, %multiply.8999)
  %multiply.9000 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.7002)
  %add.7003 = bf16[32,128,512]{2,1,0} add(%param.71, %multiply.9000)
  %divide.1947 = bf16[512,32,128]{0,2,1} divide(%transpose.434, %broadcast.10182)
  %select.2878 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.434, %divide.1947)
  %multiply.9001 = bf16[512,32,128]{0,2,1} multiply(%select.2878, %broadcast.10183)
  %param.909 = bf16[512,32,128]{2,1,0} parameter(614), sharding={devices=[8,1,1]<=[8]}
  %multiply.9002 = bf16[512,32,128]{2,1,0} multiply(%param.909, %broadcast.10184)
  %add.7004 = bf16[512,32,128]{0,2,1} add(%multiply.9001, %multiply.9002)
  %multiply.9003 = bf16[512,32,128]{0,2,1} multiply(%select.2878, %select.2878)
  %multiply.9004 = bf16[512,32,128]{0,2,1} multiply(%multiply.9003, %broadcast.10186)
  %param.910 = bf16[512,32,128]{2,1,0} parameter(937), sharding={devices=[8,1,1]<=[8]}
  %multiply.9005 = bf16[512,32,128]{2,1,0} multiply(%param.910, %broadcast.10187)
  %add.7005 = bf16[512,32,128]{0,2,1} add(%multiply.9004, %multiply.9005)
  %divide.1948 = bf16[512,32,128]{0,2,1} divide(%add.7005, %broadcast.10188)
  %sqrt.290 = bf16[512,32,128]{0,2,1} sqrt(%divide.1948)
  %add.7006 = bf16[512,32,128]{0,2,1} add(%sqrt.290, %broadcast.10189)
  %multiply.9006 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.7006)
  %divide.1949 = bf16[512,32,128]{0,2,1} divide(%add.7004, %multiply.9006)
  %multiply.9007 = bf16[512,32,128]{2,1,0} multiply(%param.68, %broadcast.10183)
  %add.7007 = bf16[512,32,128]{0,2,1} add(%divide.1949, %multiply.9007)
  %multiply.9008 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.7007)
  %add.7008 = bf16[512,32,128]{2,1,0} add(%param.68, %multiply.9008)
  %divide.1950 = bf16[512,8,128]{0,2,1} divide(%transpose.435, %broadcast.10162)
  %select.2879 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.435, %divide.1950)
  %multiply.9009 = bf16[512,8,128]{0,2,1} multiply(%select.2879, %broadcast.10163)
  %param.911 = bf16[512,8,128]{2,1,0} parameter(615), sharding={devices=[8,1,1]<=[8]}
  %multiply.9010 = bf16[512,8,128]{2,1,0} multiply(%param.911, %broadcast.10164)
  %add.7009 = bf16[512,8,128]{0,2,1} add(%multiply.9009, %multiply.9010)
  %multiply.9011 = bf16[512,8,128]{0,2,1} multiply(%select.2879, %select.2879)
  %multiply.9012 = bf16[512,8,128]{0,2,1} multiply(%multiply.9011, %broadcast.10166)
  %param.912 = bf16[512,8,128]{2,1,0} parameter(938), sharding={devices=[8,1,1]<=[8]}
  %multiply.9013 = bf16[512,8,128]{2,1,0} multiply(%param.912, %broadcast.10167)
  %add.7010 = bf16[512,8,128]{0,2,1} add(%multiply.9012, %multiply.9013)
  %divide.1951 = bf16[512,8,128]{0,2,1} divide(%add.7010, %broadcast.10168)
  %sqrt.291 = bf16[512,8,128]{0,2,1} sqrt(%divide.1951)
  %add.7011 = bf16[512,8,128]{0,2,1} add(%sqrt.291, %broadcast.10169)
  %multiply.9014 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.7011)
  %divide.1952 = bf16[512,8,128]{0,2,1} divide(%add.7009, %multiply.9014)
  %multiply.9015 = bf16[512,8,128]{2,1,0} multiply(%param.70, %broadcast.10163)
  %add.7012 = bf16[512,8,128]{0,2,1} add(%divide.1952, %multiply.9015)
  %multiply.9016 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.7012)
  %add.7013 = bf16[512,8,128]{2,1,0} add(%param.70, %multiply.9016)
  %divide.1953 = bf16[512,8]{0,1} divide(%dynamic-slice.2629, %broadcast.10097)
  %select.2880 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2629, %divide.1953)
  %multiply.9017 = bf16[512,8]{0,1} multiply(%select.2880, %broadcast.10098)
  %param.913 = bf16[512,8]{1,0} parameter(616), sharding={devices=[8,1]<=[8]}
  %multiply.9018 = bf16[512,8]{1,0} multiply(%param.913, %broadcast.10099)
  %add.7014 = bf16[512,8]{0,1} add(%multiply.9017, %multiply.9018)
  %multiply.9019 = bf16[512,8]{0,1} multiply(%select.2880, %select.2880)
  %multiply.9020 = bf16[512,8]{0,1} multiply(%multiply.9019, %broadcast.10101)
  %param.914 = bf16[512,8]{1,0} parameter(939), sharding={devices=[8,1]<=[8]}
  %multiply.9021 = bf16[512,8]{1,0} multiply(%param.914, %broadcast.10102)
  %add.7015 = bf16[512,8]{0,1} add(%multiply.9020, %multiply.9021)
  %divide.1954 = bf16[512,8]{0,1} divide(%add.7015, %broadcast.10103)
  %sqrt.292 = bf16[512,8]{0,1} sqrt(%divide.1954)
  %add.7016 = bf16[512,8]{0,1} add(%sqrt.292, %broadcast.10104)
  %multiply.9022 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.7016)
  %divide.1955 = bf16[512,8]{0,1} divide(%add.7014, %multiply.9022)
  %multiply.9023 = bf16[512,8]{1,0} multiply(%param.83, %broadcast.10098)
  %add.7017 = bf16[512,8]{0,1} add(%divide.1955, %multiply.9023)
  %multiply.9024 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.7017)
  %add.7018 = bf16[512,8]{1,0} add(%param.83, %multiply.9024)
  %divide.1956 = bf16[1,4096,14336]{2,1,0} divide(%copy.4288, %broadcast.10111)
  %select.2881 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4288, %divide.1956)
  %multiply.9025 = bf16[1,4096,14336]{2,1,0} multiply(%select.2881, %broadcast.10112)
  %param.915 = bf16[1,4096,14336]{2,1,0} parameter(617), sharding={devices=[8,1,1]<=[8]}
  %multiply.9026 = bf16[1,4096,14336]{2,1,0} multiply(%param.915, %broadcast.10113)
  %add.7019 = bf16[1,4096,14336]{2,1,0} add(%multiply.9025, %multiply.9026)
  %multiply.9027 = bf16[1,4096,14336]{2,1,0} multiply(%select.2881, %select.2881)
  %multiply.9028 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.9027, %broadcast.10115)
  %param.916 = bf16[1,4096,14336]{2,1,0} parameter(940), sharding={devices=[8,1,1]<=[8]}
  %multiply.9029 = bf16[1,4096,14336]{2,1,0} multiply(%param.916, %broadcast.10116)
  %add.7020 = bf16[1,4096,14336]{2,1,0} add(%multiply.9028, %multiply.9029)
  %divide.1957 = bf16[1,4096,14336]{2,1,0} divide(%add.7020, %broadcast.10117)
  %sqrt.293 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1957)
  %add.7021 = bf16[1,4096,14336]{2,1,0} add(%sqrt.293, %broadcast.10119)
  %multiply.9030 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.7021)
  %divide.1958 = bf16[1,4096,14336]{2,1,0} divide(%add.7019, %multiply.9030)
  %multiply.9031 = bf16[1,4096,14336]{2,1,0} multiply(%param.84, %broadcast.10112)
  %add.7022 = bf16[1,4096,14336]{2,1,0} add(%divide.1958, %multiply.9031)
  %multiply.9032 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.7022)
  %add.7023 = bf16[1,4096,14336]{2,1,0} add(%param.84, %multiply.9032)
  %divide.1959 = bf16[1,4096,14336]{2,1,0} divide(%copy.4289, %broadcast.10111)
  %select.2882 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4289, %divide.1959)
  %multiply.9033 = bf16[1,4096,14336]{2,1,0} multiply(%select.2882, %broadcast.10112)
  %param.917 = bf16[1,4096,14336]{2,1,0} parameter(618), sharding={devices=[8,1,1]<=[8]}
  %multiply.9034 = bf16[1,4096,14336]{2,1,0} multiply(%param.917, %broadcast.10113)
  %add.7024 = bf16[1,4096,14336]{2,1,0} add(%multiply.9033, %multiply.9034)
  %multiply.9035 = bf16[1,4096,14336]{2,1,0} multiply(%select.2882, %select.2882)
  %multiply.9036 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.9035, %broadcast.10115)
  %param.918 = bf16[1,4096,14336]{2,1,0} parameter(941), sharding={devices=[8,1,1]<=[8]}
  %multiply.9037 = bf16[1,4096,14336]{2,1,0} multiply(%param.918, %broadcast.10116)
  %add.7025 = bf16[1,4096,14336]{2,1,0} add(%multiply.9036, %multiply.9037)
  %divide.1960 = bf16[1,4096,14336]{2,1,0} divide(%add.7025, %broadcast.10117)
  %sqrt.294 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1960)
  %add.7026 = bf16[1,4096,14336]{2,1,0} add(%sqrt.294, %broadcast.10119)
  %multiply.9038 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.7026)
  %divide.1961 = bf16[1,4096,14336]{2,1,0} divide(%add.7024, %multiply.9038)
  %multiply.9039 = bf16[1,4096,14336]{2,1,0} multiply(%param.85, %broadcast.10112)
  %add.7027 = bf16[1,4096,14336]{2,1,0} add(%divide.1961, %multiply.9039)
  %multiply.9040 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.7027)
  %add.7028 = bf16[1,4096,14336]{2,1,0} add(%param.85, %multiply.9040)
  %divide.1962 = bf16[1,14336,4096]{2,1,0} divide(%copy.4290, %broadcast.10134)
  %select.2883 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4290, %divide.1962)
  %multiply.9041 = bf16[1,14336,4096]{2,1,0} multiply(%select.2883, %broadcast.10135)
  %param.919 = bf16[1,14336,4096]{2,1,0} parameter(619), sharding={devices=[8,1,1]<=[8]}
  %multiply.9042 = bf16[1,14336,4096]{2,1,0} multiply(%param.919, %broadcast.10136)
  %add.7029 = bf16[1,14336,4096]{2,1,0} add(%multiply.9041, %multiply.9042)
  %multiply.9043 = bf16[1,14336,4096]{2,1,0} multiply(%select.2883, %select.2883)
  %multiply.9044 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.9043, %broadcast.10138)
  %param.920 = bf16[1,14336,4096]{2,1,0} parameter(942), sharding={devices=[8,1,1]<=[8]}
  %multiply.9045 = bf16[1,14336,4096]{2,1,0} multiply(%param.920, %broadcast.10139)
  %add.7030 = bf16[1,14336,4096]{2,1,0} add(%multiply.9044, %multiply.9045)
  %divide.1963 = bf16[1,14336,4096]{2,1,0} divide(%add.7030, %broadcast.10140)
  %sqrt.295 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1963)
  %add.7031 = bf16[1,14336,4096]{2,1,0} add(%sqrt.295, %broadcast.10141)
  %multiply.9046 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.7031)
  %divide.1964 = bf16[1,14336,4096]{2,1,0} divide(%add.7029, %multiply.9046)
  %multiply.9047 = bf16[1,14336,4096]{2,1,0} multiply(%param.86, %broadcast.10135)
  %add.7032 = bf16[1,14336,4096]{2,1,0} add(%divide.1964, %multiply.9047)
  %multiply.9048 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.7032)
  %add.7033 = bf16[1,14336,4096]{2,1,0} add(%param.86, %multiply.9048)
  %divide.1965 = bf16[4096]{0} divide(%all-reduce.442, %broadcast.10081)
  %select.2884 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.442, %divide.1965)
  %multiply.9049 = bf16[4096]{0} multiply(%select.2884, %broadcast.10083)
  %param.921 = bf16[4096]{0} parameter(620), sharding={replicated}
  %multiply.9050 = bf16[4096]{0} multiply(%param.921, %broadcast.10085)
  %add.7034 = bf16[4096]{0} add(%multiply.9049, %multiply.9050)
  %multiply.9051 = bf16[4096]{0} multiply(%select.2884, %select.2884)
  %multiply.9052 = bf16[4096]{0} multiply(%multiply.9051, %broadcast.10088)
  %param.922 = bf16[4096]{0} parameter(943), sharding={replicated}
  %multiply.9053 = bf16[4096]{0} multiply(%param.922, %broadcast.10090)
  %add.7035 = bf16[4096]{0} add(%multiply.9052, %multiply.9053)
  %divide.1966 = bf16[4096]{0} divide(%add.7035, %broadcast.10092)
  %sqrt.296 = bf16[4096]{0} sqrt(%divide.1966)
  %add.7036 = bf16[4096]{0} add(%sqrt.296, %broadcast.10094)
  %multiply.9054 = bf16[4096]{0} multiply(%broadcast.10086, %add.7036)
  %divide.1967 = bf16[4096]{0} divide(%add.7034, %multiply.9054)
  %multiply.9055 = bf16[4096]{0} multiply(%param.82, %broadcast.10083)
  %add.7037 = bf16[4096]{0} add(%divide.1967, %multiply.9055)
  %multiply.9056 = bf16[4096]{0} multiply(%broadcast.5338, %add.7037)
  %add.7038 = bf16[4096]{0} add(%param.82, %multiply.9056)
  %divide.1968 = bf16[4096]{0} divide(%all-reduce.443, %broadcast.10081)
  %select.2885 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.443, %divide.1968)
  %multiply.9057 = bf16[4096]{0} multiply(%select.2885, %broadcast.10083)
  %param.923 = bf16[4096]{0} parameter(621), sharding={replicated}
  %multiply.9058 = bf16[4096]{0} multiply(%param.923, %broadcast.10085)
  %add.7039 = bf16[4096]{0} add(%multiply.9057, %multiply.9058)
  %multiply.9059 = bf16[4096]{0} multiply(%select.2885, %select.2885)
  %multiply.9060 = bf16[4096]{0} multiply(%multiply.9059, %broadcast.10088)
  %param.924 = bf16[4096]{0} parameter(944), sharding={replicated}
  %multiply.9061 = bf16[4096]{0} multiply(%param.924, %broadcast.10090)
  %add.7040 = bf16[4096]{0} add(%multiply.9060, %multiply.9061)
  %divide.1969 = bf16[4096]{0} divide(%add.7040, %broadcast.10092)
  %sqrt.297 = bf16[4096]{0} sqrt(%divide.1969)
  %add.7041 = bf16[4096]{0} add(%sqrt.297, %broadcast.10094)
  %multiply.9062 = bf16[4096]{0} multiply(%broadcast.10086, %add.7041)
  %divide.1970 = bf16[4096]{0} divide(%add.7039, %multiply.9062)
  %multiply.9063 = bf16[4096]{0} multiply(%param.77, %broadcast.10083)
  %add.7042 = bf16[4096]{0} add(%divide.1970, %multiply.9063)
  %multiply.9064 = bf16[4096]{0} multiply(%broadcast.5338, %add.7042)
  %add.7043 = bf16[4096]{0} add(%param.77, %multiply.9064)
  %divide.1971 = bf16[512,8,128]{0,2,1} divide(%transpose.436, %broadcast.10162)
  %select.2886 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.436, %divide.1971)
  %multiply.9065 = bf16[512,8,128]{0,2,1} multiply(%select.2886, %broadcast.10163)
  %param.925 = bf16[512,8,128]{2,1,0} parameter(622), sharding={devices=[8,1,1]<=[8]}
  %multiply.9066 = bf16[512,8,128]{2,1,0} multiply(%param.925, %broadcast.10164)
  %add.7044 = bf16[512,8,128]{0,2,1} add(%multiply.9065, %multiply.9066)
  %multiply.9067 = bf16[512,8,128]{0,2,1} multiply(%select.2886, %select.2886)
  %multiply.9068 = bf16[512,8,128]{0,2,1} multiply(%multiply.9067, %broadcast.10166)
  %param.926 = bf16[512,8,128]{2,1,0} parameter(945), sharding={devices=[8,1,1]<=[8]}
  %multiply.9069 = bf16[512,8,128]{2,1,0} multiply(%param.926, %broadcast.10167)
  %add.7045 = bf16[512,8,128]{0,2,1} add(%multiply.9068, %multiply.9069)
  %divide.1972 = bf16[512,8,128]{0,2,1} divide(%add.7045, %broadcast.10168)
  %sqrt.298 = bf16[512,8,128]{0,2,1} sqrt(%divide.1972)
  %add.7046 = bf16[512,8,128]{0,2,1} add(%sqrt.298, %broadcast.10169)
  %multiply.9070 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.7046)
  %divide.1973 = bf16[512,8,128]{0,2,1} divide(%add.7044, %multiply.9070)
  %multiply.9072 = bf16[512,8,128]{2,1,0} multiply(%param.79, %broadcast.10163)
  %add.7047 = bf16[512,8,128]{0,2,1} add(%divide.1973, %multiply.9072)
  %multiply.9073 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.7047)
  %add.7048 = bf16[512,8,128]{2,1,0} add(%param.79, %multiply.9073)
  %divide.1974 = bf16[32,128,512]{1,0,2} divide(%transpose.437, %broadcast.10172)
  %select.2887 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.437, %divide.1974)
  %multiply.9074 = bf16[32,128,512]{1,0,2} multiply(%select.2887, %broadcast.10173)
  %param.927 = bf16[32,128,512]{2,1,0} parameter(623), sharding={devices=[1,1,8]<=[8]}
  %multiply.9075 = bf16[32,128,512]{2,1,0} multiply(%param.927, %broadcast.10174)
  %add.7049 = bf16[32,128,512]{1,0,2} add(%multiply.9074, %multiply.9075)
  %multiply.9076 = bf16[32,128,512]{1,0,2} multiply(%select.2887, %select.2887)
  %multiply.9077 = bf16[32,128,512]{1,0,2} multiply(%multiply.9076, %broadcast.10176)
  %param.928 = bf16[32,128,512]{2,1,0} parameter(946), sharding={devices=[1,1,8]<=[8]}
  %multiply.9080 = bf16[32,128,512]{2,1,0} multiply(%param.928, %broadcast.10177)
  %add.7050 = bf16[32,128,512]{1,0,2} add(%multiply.9077, %multiply.9080)
  %divide.1975 = bf16[32,128,512]{1,0,2} divide(%add.7050, %broadcast.10178)
  %sqrt.299 = bf16[32,128,512]{1,0,2} sqrt(%divide.1975)
  %add.7051 = bf16[32,128,512]{1,0,2} add(%sqrt.299, %broadcast.10179)
  %multiply.9081 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.7051)
  %divide.1976 = bf16[32,128,512]{1,0,2} divide(%add.7049, %multiply.9081)
  %multiply.9082 = bf16[32,128,512]{2,1,0} multiply(%param.81, %broadcast.10173)
  %add.7052 = bf16[32,128,512]{1,0,2} add(%divide.1976, %multiply.9082)
  %multiply.9083 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.7052)
  %add.7053 = bf16[32,128,512]{2,1,0} add(%param.81, %multiply.9083)
  %divide.1977 = bf16[512,32,128]{0,2,1} divide(%transpose.438, %broadcast.10182)
  %select.2888 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.438, %divide.1977)
  %multiply.9084 = bf16[512,32,128]{0,2,1} multiply(%select.2888, %broadcast.10183)
  %param.929 = bf16[512,32,128]{2,1,0} parameter(624), sharding={devices=[8,1,1]<=[8]}
  %multiply.9085 = bf16[512,32,128]{2,1,0} multiply(%param.929, %broadcast.10184)
  %add.7054 = bf16[512,32,128]{0,2,1} add(%multiply.9084, %multiply.9085)
  %multiply.9087 = bf16[512,32,128]{0,2,1} multiply(%select.2888, %select.2888)
  %multiply.9088 = bf16[512,32,128]{0,2,1} multiply(%multiply.9087, %broadcast.10186)
  %param.930 = bf16[512,32,128]{2,1,0} parameter(947), sharding={devices=[8,1,1]<=[8]}
  %multiply.9089 = bf16[512,32,128]{2,1,0} multiply(%param.930, %broadcast.10187)
  %add.7056 = bf16[512,32,128]{0,2,1} add(%multiply.9088, %multiply.9089)
  %divide.1978 = bf16[512,32,128]{0,2,1} divide(%add.7056, %broadcast.10188)
  %sqrt.300 = bf16[512,32,128]{0,2,1} sqrt(%divide.1978)
  %add.7057 = bf16[512,32,128]{0,2,1} add(%sqrt.300, %broadcast.10189)
  %multiply.9090 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.7057)
  %divide.1979 = bf16[512,32,128]{0,2,1} divide(%add.7054, %multiply.9090)
  %multiply.9091 = bf16[512,32,128]{2,1,0} multiply(%param.78, %broadcast.10183)
  %add.7058 = bf16[512,32,128]{0,2,1} add(%divide.1979, %multiply.9091)
  %multiply.9092 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.7058)
  %add.7059 = bf16[512,32,128]{2,1,0} add(%param.78, %multiply.9092)
  %divide.1980 = bf16[512,8,128]{0,2,1} divide(%transpose.439, %broadcast.10162)
  %select.2889 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.439, %divide.1980)
  %multiply.9094 = bf16[512,8,128]{0,2,1} multiply(%select.2889, %broadcast.10163)
  %param.931 = bf16[512,8,128]{2,1,0} parameter(625), sharding={devices=[8,1,1]<=[8]}
  %multiply.9095 = bf16[512,8,128]{2,1,0} multiply(%param.931, %broadcast.10164)
  %add.7060 = bf16[512,8,128]{0,2,1} add(%multiply.9094, %multiply.9095)
  %multiply.9096 = bf16[512,8,128]{0,2,1} multiply(%select.2889, %select.2889)
  %multiply.9097 = bf16[512,8,128]{0,2,1} multiply(%multiply.9096, %broadcast.10166)
  %param.932 = bf16[512,8,128]{2,1,0} parameter(948), sharding={devices=[8,1,1]<=[8]}
  %multiply.9098 = bf16[512,8,128]{2,1,0} multiply(%param.932, %broadcast.10167)
  %add.7061 = bf16[512,8,128]{0,2,1} add(%multiply.9097, %multiply.9098)
  %divide.1981 = bf16[512,8,128]{0,2,1} divide(%add.7061, %broadcast.10168)
  %sqrt.301 = bf16[512,8,128]{0,2,1} sqrt(%divide.1981)
  %add.7062 = bf16[512,8,128]{0,2,1} add(%sqrt.301, %broadcast.10169)
  %multiply.9099 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.7062)
  %divide.1982 = bf16[512,8,128]{0,2,1} divide(%add.7060, %multiply.9099)
  %multiply.9100 = bf16[512,8,128]{2,1,0} multiply(%param.80, %broadcast.10163)
  %add.7063 = bf16[512,8,128]{0,2,1} add(%divide.1982, %multiply.9100)
  %multiply.9101 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.7063)
  %add.7064 = bf16[512,8,128]{2,1,0} add(%param.80, %multiply.9101)
  %divide.1983 = bf16[512,8]{0,1} divide(%dynamic-slice.2639, %broadcast.10097)
  %select.2890 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2639, %divide.1983)
  %multiply.9102 = bf16[512,8]{0,1} multiply(%select.2890, %broadcast.10098)
  %param.933 = bf16[512,8]{1,0} parameter(626), sharding={devices=[8,1]<=[8]}
  %multiply.9103 = bf16[512,8]{1,0} multiply(%param.933, %broadcast.10099)
  %add.7065 = bf16[512,8]{0,1} add(%multiply.9102, %multiply.9103)
  %multiply.9104 = bf16[512,8]{0,1} multiply(%select.2890, %select.2890)
  %multiply.9105 = bf16[512,8]{0,1} multiply(%multiply.9104, %broadcast.10101)
  %param.934 = bf16[512,8]{1,0} parameter(949), sharding={devices=[8,1]<=[8]}
  %multiply.9106 = bf16[512,8]{1,0} multiply(%param.934, %broadcast.10102)
  %add.7066 = bf16[512,8]{0,1} add(%multiply.9105, %multiply.9106)
  %divide.1984 = bf16[512,8]{0,1} divide(%add.7066, %broadcast.10103)
  %sqrt.302 = bf16[512,8]{0,1} sqrt(%divide.1984)
  %add.7067 = bf16[512,8]{0,1} add(%sqrt.302, %broadcast.10104)
  %multiply.9107 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.7067)
  %divide.1985 = bf16[512,8]{0,1} divide(%add.7065, %multiply.9107)
  %multiply.9108 = bf16[512,8]{1,0} multiply(%param.93, %broadcast.10098)
  %add.7068 = bf16[512,8]{0,1} add(%divide.1985, %multiply.9108)
  %multiply.9110 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.7068)
  %add.7069 = bf16[512,8]{1,0} add(%param.93, %multiply.9110)
  %divide.1986 = bf16[1,4096,14336]{2,1,0} divide(%copy.4291, %broadcast.10111)
  %select.2891 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4291, %divide.1986)
  %multiply.9111 = bf16[1,4096,14336]{2,1,0} multiply(%select.2891, %broadcast.10112)
  %param.935 = bf16[1,4096,14336]{2,1,0} parameter(627), sharding={devices=[8,1,1]<=[8]}
  %multiply.9112 = bf16[1,4096,14336]{2,1,0} multiply(%param.935, %broadcast.10113)
  %add.7070 = bf16[1,4096,14336]{2,1,0} add(%multiply.9111, %multiply.9112)
  %multiply.9113 = bf16[1,4096,14336]{2,1,0} multiply(%select.2891, %select.2891)
  %multiply.9114 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.9113, %broadcast.10115)
  %param.936 = bf16[1,4096,14336]{2,1,0} parameter(950), sharding={devices=[8,1,1]<=[8]}
  %multiply.9115 = bf16[1,4096,14336]{2,1,0} multiply(%param.936, %broadcast.10116)
  %add.7071 = bf16[1,4096,14336]{2,1,0} add(%multiply.9114, %multiply.9115)
  %divide.1987 = bf16[1,4096,14336]{2,1,0} divide(%add.7071, %broadcast.10117)
  %sqrt.303 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1987)
  %add.7072 = bf16[1,4096,14336]{2,1,0} add(%sqrt.303, %broadcast.10119)
  %multiply.9116 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.7072)
  %divide.1988 = bf16[1,4096,14336]{2,1,0} divide(%add.7070, %multiply.9116)
  %multiply.9117 = bf16[1,4096,14336]{2,1,0} multiply(%param.94, %broadcast.10112)
  %add.7073 = bf16[1,4096,14336]{2,1,0} add(%divide.1988, %multiply.9117)
  %multiply.9118 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.7073)
  %add.7074 = bf16[1,4096,14336]{2,1,0} add(%param.94, %multiply.9118)
  %divide.1989 = bf16[1,4096,14336]{2,1,0} divide(%copy.4292, %broadcast.10111)
  %select.2892 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4292, %divide.1989)
  %multiply.9120 = bf16[1,4096,14336]{2,1,0} multiply(%select.2892, %broadcast.10112)
  %param.937 = bf16[1,4096,14336]{2,1,0} parameter(628), sharding={devices=[8,1,1]<=[8]}
  %multiply.9121 = bf16[1,4096,14336]{2,1,0} multiply(%param.937, %broadcast.10113)
  %add.7075 = bf16[1,4096,14336]{2,1,0} add(%multiply.9120, %multiply.9121)
  %multiply.9122 = bf16[1,4096,14336]{2,1,0} multiply(%select.2892, %select.2892)
  %multiply.9123 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.9122, %broadcast.10115)
  %param.938 = bf16[1,4096,14336]{2,1,0} parameter(951), sharding={devices=[8,1,1]<=[8]}
  %multiply.9124 = bf16[1,4096,14336]{2,1,0} multiply(%param.938, %broadcast.10116)
  %add.7076 = bf16[1,4096,14336]{2,1,0} add(%multiply.9123, %multiply.9124)
  %divide.1991 = bf16[1,4096,14336]{2,1,0} divide(%add.7076, %broadcast.10117)
  %sqrt.304 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.1991)
  %add.7077 = bf16[1,4096,14336]{2,1,0} add(%sqrt.304, %broadcast.10119)
  %multiply.9125 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.7077)
  %divide.1992 = bf16[1,4096,14336]{2,1,0} divide(%add.7075, %multiply.9125)
  %multiply.9126 = bf16[1,4096,14336]{2,1,0} multiply(%param.95, %broadcast.10112)
  %add.7078 = bf16[1,4096,14336]{2,1,0} add(%divide.1992, %multiply.9126)
  %multiply.9127 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.7078)
  %add.7079 = bf16[1,4096,14336]{2,1,0} add(%param.95, %multiply.9127)
  %divide.1993 = bf16[1,14336,4096]{2,1,0} divide(%copy.4293, %broadcast.10134)
  %select.2893 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4293, %divide.1993)
  %multiply.9128 = bf16[1,14336,4096]{2,1,0} multiply(%select.2893, %broadcast.10135)
  %param.939 = bf16[1,14336,4096]{2,1,0} parameter(629), sharding={devices=[8,1,1]<=[8]}
  %multiply.9129 = bf16[1,14336,4096]{2,1,0} multiply(%param.939, %broadcast.10136)
  %add.7080 = bf16[1,14336,4096]{2,1,0} add(%multiply.9128, %multiply.9129)
  %multiply.9130 = bf16[1,14336,4096]{2,1,0} multiply(%select.2893, %select.2893)
  %multiply.9131 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.9130, %broadcast.10138)
  %param.940 = bf16[1,14336,4096]{2,1,0} parameter(952), sharding={devices=[8,1,1]<=[8]}
  %multiply.9133 = bf16[1,14336,4096]{2,1,0} multiply(%param.940, %broadcast.10139)
  %add.7081 = bf16[1,14336,4096]{2,1,0} add(%multiply.9131, %multiply.9133)
  %divide.1994 = bf16[1,14336,4096]{2,1,0} divide(%add.7081, %broadcast.10140)
  %sqrt.305 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.1994)
  %add.7082 = bf16[1,14336,4096]{2,1,0} add(%sqrt.305, %broadcast.10141)
  %multiply.9134 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.7082)
  %divide.1995 = bf16[1,14336,4096]{2,1,0} divide(%add.7080, %multiply.9134)
  %multiply.9135 = bf16[1,14336,4096]{2,1,0} multiply(%param.96, %broadcast.10135)
  %add.7083 = bf16[1,14336,4096]{2,1,0} add(%divide.1995, %multiply.9135)
  %multiply.9136 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.7083)
  %add.7084 = bf16[1,14336,4096]{2,1,0} add(%param.96, %multiply.9136)
  %divide.1996 = bf16[4096]{0} divide(%all-reduce.457, %broadcast.10081)
  %select.2894 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.457, %divide.1996)
  %multiply.9137 = bf16[4096]{0} multiply(%select.2894, %broadcast.10083)
  %param.941 = bf16[4096]{0} parameter(630), sharding={replicated}
  %multiply.9139 = bf16[4096]{0} multiply(%param.941, %broadcast.10085)
  %add.7085 = bf16[4096]{0} add(%multiply.9137, %multiply.9139)
  %multiply.9140 = bf16[4096]{0} multiply(%select.2894, %select.2894)
  %multiply.9141 = bf16[4096]{0} multiply(%multiply.9140, %broadcast.10088)
  %param.942 = bf16[4096]{0} parameter(953), sharding={replicated}
  %multiply.9142 = bf16[4096]{0} multiply(%param.942, %broadcast.10090)
  %add.7086 = bf16[4096]{0} add(%multiply.9141, %multiply.9142)
  %divide.1997 = bf16[4096]{0} divide(%add.7086, %broadcast.10092)
  %sqrt.306 = bf16[4096]{0} sqrt(%divide.1997)
  %add.7087 = bf16[4096]{0} add(%sqrt.306, %broadcast.10094)
  %multiply.9143 = bf16[4096]{0} multiply(%broadcast.10086, %add.7087)
  %divide.1998 = bf16[4096]{0} divide(%add.7085, %multiply.9143)
  %multiply.9144 = bf16[4096]{0} multiply(%param.92, %broadcast.10083)
  %add.7088 = bf16[4096]{0} add(%divide.1998, %multiply.9144)
  %multiply.9145 = bf16[4096]{0} multiply(%broadcast.5338, %add.7088)
  %add.7089 = bf16[4096]{0} add(%param.92, %multiply.9145)
  %divide.1999 = bf16[4096]{0} divide(%all-reduce.458, %broadcast.10081)
  %select.2895 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.458, %divide.1999)
  %multiply.9146 = bf16[4096]{0} multiply(%select.2895, %broadcast.10083)
  %param.943 = bf16[4096]{0} parameter(631), sharding={replicated}
  %multiply.9148 = bf16[4096]{0} multiply(%param.943, %broadcast.10085)
  %add.7090 = bf16[4096]{0} add(%multiply.9146, %multiply.9148)
  %multiply.9149 = bf16[4096]{0} multiply(%select.2895, %select.2895)
  %multiply.9150 = bf16[4096]{0} multiply(%multiply.9149, %broadcast.10088)
  %param.944 = bf16[4096]{0} parameter(954), sharding={replicated}
  %multiply.9151 = bf16[4096]{0} multiply(%param.944, %broadcast.10090)
  %add.7091 = bf16[4096]{0} add(%multiply.9150, %multiply.9151)
  %divide.2000 = bf16[4096]{0} divide(%add.7091, %broadcast.10092)
  %sqrt.307 = bf16[4096]{0} sqrt(%divide.2000)
  %add.7092 = bf16[4096]{0} add(%sqrt.307, %broadcast.10094)
  %multiply.9152 = bf16[4096]{0} multiply(%broadcast.10086, %add.7092)
  %divide.2001 = bf16[4096]{0} divide(%add.7090, %multiply.9152)
  %multiply.9153 = bf16[4096]{0} multiply(%param.87, %broadcast.10083)
  %add.7093 = bf16[4096]{0} add(%divide.2001, %multiply.9153)
  %multiply.9154 = bf16[4096]{0} multiply(%broadcast.5338, %add.7093)
  %add.7094 = bf16[4096]{0} add(%param.87, %multiply.9154)
  %divide.2002 = bf16[512,8,128]{0,2,1} divide(%transpose.440, %broadcast.10162)
  %select.2896 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.440, %divide.2002)
  %multiply.9155 = bf16[512,8,128]{0,2,1} multiply(%select.2896, %broadcast.10163)
  %param.945 = bf16[512,8,128]{2,1,0} parameter(632), sharding={devices=[8,1,1]<=[8]}
  %multiply.9156 = bf16[512,8,128]{2,1,0} multiply(%param.945, %broadcast.10164)
  %add.7096 = bf16[512,8,128]{0,2,1} add(%multiply.9155, %multiply.9156)
  %multiply.9157 = bf16[512,8,128]{0,2,1} multiply(%select.2896, %select.2896)
  %multiply.9158 = bf16[512,8,128]{0,2,1} multiply(%multiply.9157, %broadcast.10166)
  %param.946 = bf16[512,8,128]{2,1,0} parameter(955), sharding={devices=[8,1,1]<=[8]}
  %multiply.9159 = bf16[512,8,128]{2,1,0} multiply(%param.946, %broadcast.10167)
  %add.7097 = bf16[512,8,128]{0,2,1} add(%multiply.9158, %multiply.9159)
  %divide.2003 = bf16[512,8,128]{0,2,1} divide(%add.7097, %broadcast.10168)
  %sqrt.308 = bf16[512,8,128]{0,2,1} sqrt(%divide.2003)
  %add.7098 = bf16[512,8,128]{0,2,1} add(%sqrt.308, %broadcast.10169)
  %multiply.9160 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.7098)
  %divide.2004 = bf16[512,8,128]{0,2,1} divide(%add.7096, %multiply.9160)
  %multiply.9161 = bf16[512,8,128]{2,1,0} multiply(%param.89, %broadcast.10163)
  %add.7099 = bf16[512,8,128]{0,2,1} add(%divide.2004, %multiply.9161)
  %multiply.9162 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.7099)
  %add.7100 = bf16[512,8,128]{2,1,0} add(%param.89, %multiply.9162)
  %divide.2005 = bf16[32,128,512]{1,0,2} divide(%transpose.441, %broadcast.10172)
  %select.2897 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.441, %divide.2005)
  %multiply.9163 = bf16[32,128,512]{1,0,2} multiply(%select.2897, %broadcast.10173)
  %param.947 = bf16[32,128,512]{2,1,0} parameter(633), sharding={devices=[1,1,8]<=[8]}
  %multiply.9164 = bf16[32,128,512]{2,1,0} multiply(%param.947, %broadcast.10174)
  %add.7101 = bf16[32,128,512]{1,0,2} add(%multiply.9163, %multiply.9164)
  %multiply.9165 = bf16[32,128,512]{1,0,2} multiply(%select.2897, %select.2897)
  %multiply.9166 = bf16[32,128,512]{1,0,2} multiply(%multiply.9165, %broadcast.10176)
  %param.948 = bf16[32,128,512]{2,1,0} parameter(956), sharding={devices=[1,1,8]<=[8]}
  %multiply.9167 = bf16[32,128,512]{2,1,0} multiply(%param.948, %broadcast.10177)
  %add.7102 = bf16[32,128,512]{1,0,2} add(%multiply.9166, %multiply.9167)
  %divide.2006 = bf16[32,128,512]{1,0,2} divide(%add.7102, %broadcast.10178)
  %sqrt.309 = bf16[32,128,512]{1,0,2} sqrt(%divide.2006)
  %add.7103 = bf16[32,128,512]{1,0,2} add(%sqrt.309, %broadcast.10179)
  %multiply.9168 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.7103)
  %divide.2007 = bf16[32,128,512]{1,0,2} divide(%add.7101, %multiply.9168)
  %multiply.9170 = bf16[32,128,512]{2,1,0} multiply(%param.91, %broadcast.10173)
  %add.7104 = bf16[32,128,512]{1,0,2} add(%divide.2007, %multiply.9170)
  %multiply.9171 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.7104)
  %add.7105 = bf16[32,128,512]{2,1,0} add(%param.91, %multiply.9171)
  %divide.2008 = bf16[512,32,128]{0,2,1} divide(%transpose.442, %broadcast.10182)
  %select.2898 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.442, %divide.2008)
  %multiply.9172 = bf16[512,32,128]{0,2,1} multiply(%select.2898, %broadcast.10183)
  %param.949 = bf16[512,32,128]{2,1,0} parameter(634), sharding={devices=[8,1,1]<=[8]}
  %multiply.9174 = bf16[512,32,128]{2,1,0} multiply(%param.949, %broadcast.10184)
  %add.7106 = bf16[512,32,128]{0,2,1} add(%multiply.9172, %multiply.9174)
  %multiply.9175 = bf16[512,32,128]{0,2,1} multiply(%select.2898, %select.2898)
  %multiply.9176 = bf16[512,32,128]{0,2,1} multiply(%multiply.9175, %broadcast.10186)
  %param.950 = bf16[512,32,128]{2,1,0} parameter(957), sharding={devices=[8,1,1]<=[8]}
  %multiply.9177 = bf16[512,32,128]{2,1,0} multiply(%param.950, %broadcast.10187)
  %add.7107 = bf16[512,32,128]{0,2,1} add(%multiply.9176, %multiply.9177)
  %divide.2009 = bf16[512,32,128]{0,2,1} divide(%add.7107, %broadcast.10188)
  %sqrt.310 = bf16[512,32,128]{0,2,1} sqrt(%divide.2009)
  %add.7108 = bf16[512,32,128]{0,2,1} add(%sqrt.310, %broadcast.10189)
  %multiply.9179 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.7108)
  %divide.2010 = bf16[512,32,128]{0,2,1} divide(%add.7106, %multiply.9179)
  %multiply.9180 = bf16[512,32,128]{2,1,0} multiply(%param.88, %broadcast.10183)
  %add.7109 = bf16[512,32,128]{0,2,1} add(%divide.2010, %multiply.9180)
  %multiply.9181 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.7109)
  %add.7110 = bf16[512,32,128]{2,1,0} add(%param.88, %multiply.9181)
  %divide.2011 = bf16[512,8,128]{0,2,1} divide(%transpose.443, %broadcast.10162)
  %select.2899 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.443, %divide.2011)
  %multiply.9183 = bf16[512,8,128]{0,2,1} multiply(%select.2899, %broadcast.10163)
  %param.951 = bf16[512,8,128]{2,1,0} parameter(635), sharding={devices=[8,1,1]<=[8]}
  %multiply.9184 = bf16[512,8,128]{2,1,0} multiply(%param.951, %broadcast.10164)
  %add.7111 = bf16[512,8,128]{0,2,1} add(%multiply.9183, %multiply.9184)
  %multiply.9185 = bf16[512,8,128]{0,2,1} multiply(%select.2899, %select.2899)
  %multiply.9186 = bf16[512,8,128]{0,2,1} multiply(%multiply.9185, %broadcast.10166)
  %param.952 = bf16[512,8,128]{2,1,0} parameter(958), sharding={devices=[8,1,1]<=[8]}
  %multiply.9188 = bf16[512,8,128]{2,1,0} multiply(%param.952, %broadcast.10167)
  %add.7112 = bf16[512,8,128]{0,2,1} add(%multiply.9186, %multiply.9188)
  %divide.2012 = bf16[512,8,128]{0,2,1} divide(%add.7112, %broadcast.10168)
  %sqrt.311 = bf16[512,8,128]{0,2,1} sqrt(%divide.2012)
  %add.7113 = bf16[512,8,128]{0,2,1} add(%sqrt.311, %broadcast.10169)
  %multiply.9189 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.7113)
  %divide.2013 = bf16[512,8,128]{0,2,1} divide(%add.7111, %multiply.9189)
  %multiply.9190 = bf16[512,8,128]{2,1,0} multiply(%param.90, %broadcast.10163)
  %add.7114 = bf16[512,8,128]{0,2,1} add(%divide.2013, %multiply.9190)
  %multiply.9191 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.7114)
  %add.7115 = bf16[512,8,128]{2,1,0} add(%param.90, %multiply.9191)
  %divide.2014 = bf16[512,8]{0,1} divide(%dynamic-slice.2649, %broadcast.10097)
  %select.2900 = bf16[512,8]{0,1} select(%broadcast.10096, %dynamic-slice.2649, %divide.2014)
  %multiply.9192 = bf16[512,8]{0,1} multiply(%select.2900, %broadcast.10098)
  %param.953 = bf16[512,8]{1,0} parameter(636), sharding={devices=[8,1]<=[8]}
  %multiply.9193 = bf16[512,8]{1,0} multiply(%param.953, %broadcast.10099)
  %add.7116 = bf16[512,8]{0,1} add(%multiply.9192, %multiply.9193)
  %multiply.9194 = bf16[512,8]{0,1} multiply(%select.2900, %select.2900)
  %multiply.9195 = bf16[512,8]{0,1} multiply(%multiply.9194, %broadcast.10101)
  %param.954 = bf16[512,8]{1,0} parameter(959), sharding={devices=[8,1]<=[8]}
  %multiply.9196 = bf16[512,8]{1,0} multiply(%param.954, %broadcast.10102)
  %add.7117 = bf16[512,8]{0,1} add(%multiply.9195, %multiply.9196)
  %divide.2015 = bf16[512,8]{0,1} divide(%add.7117, %broadcast.10103)
  %sqrt.312 = bf16[512,8]{0,1} sqrt(%divide.2015)
  %add.7118 = bf16[512,8]{0,1} add(%sqrt.312, %broadcast.10104)
  %multiply.9197 = bf16[512,8]{1,0} multiply(%broadcast.10100, %add.7118)
  %divide.2016 = bf16[512,8]{0,1} divide(%add.7116, %multiply.9197)
  %multiply.9198 = bf16[512,8]{1,0} multiply(%param.103, %broadcast.10098)
  %add.7119 = bf16[512,8]{0,1} add(%divide.2016, %multiply.9198)
  %multiply.9199 = bf16[512,8]{1,0} multiply(%broadcast.10095, %add.7119)
  %add.7120 = bf16[512,8]{1,0} add(%param.103, %multiply.9199)
  %divide.2017 = bf16[1,4096,14336]{2,1,0} divide(%copy.4294, %broadcast.10111)
  %select.2901 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4294, %divide.2017)
  %multiply.9200 = bf16[1,4096,14336]{2,1,0} multiply(%select.2901, %broadcast.10112)
  %param.955 = bf16[1,4096,14336]{2,1,0} parameter(637), sharding={devices=[8,1,1]<=[8]}
  %multiply.9201 = bf16[1,4096,14336]{2,1,0} multiply(%param.955, %broadcast.10113)
  %add.7121 = bf16[1,4096,14336]{2,1,0} add(%multiply.9200, %multiply.9201)
  %multiply.9202 = bf16[1,4096,14336]{2,1,0} multiply(%select.2901, %select.2901)
  %multiply.9203 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.9202, %broadcast.10115)
  %param.956 = bf16[1,4096,14336]{2,1,0} parameter(960), sharding={devices=[8,1,1]<=[8]}
  %multiply.9204 = bf16[1,4096,14336]{2,1,0} multiply(%param.956, %broadcast.10116)
  %add.7122 = bf16[1,4096,14336]{2,1,0} add(%multiply.9203, %multiply.9204)
  %divide.2018 = bf16[1,4096,14336]{2,1,0} divide(%add.7122, %broadcast.10117)
  %sqrt.313 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.2018)
  %add.7123 = bf16[1,4096,14336]{2,1,0} add(%sqrt.313, %broadcast.10119)
  %multiply.9205 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.7123)
  %divide.2019 = bf16[1,4096,14336]{2,1,0} divide(%add.7121, %multiply.9205)
  %multiply.9206 = bf16[1,4096,14336]{2,1,0} multiply(%param.104, %broadcast.10112)
  %add.7124 = bf16[1,4096,14336]{2,1,0} add(%divide.2019, %multiply.9206)
  %multiply.9207 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.7124)
  %add.7125 = bf16[1,4096,14336]{2,1,0} add(%param.104, %multiply.9207)
  %divide.2020 = bf16[1,4096,14336]{2,1,0} divide(%copy.4295, %broadcast.10111)
  %select.2902 = bf16[1,4096,14336]{2,1,0} select(%broadcast.10109, %copy.4295, %divide.2020)
  %multiply.9208 = bf16[1,4096,14336]{2,1,0} multiply(%select.2902, %broadcast.10112)
  %param.957 = bf16[1,4096,14336]{2,1,0} parameter(638), sharding={devices=[8,1,1]<=[8]}
  %multiply.9210 = bf16[1,4096,14336]{2,1,0} multiply(%param.957, %broadcast.10113)
  %add.7127 = bf16[1,4096,14336]{2,1,0} add(%multiply.9208, %multiply.9210)
  %multiply.9211 = bf16[1,4096,14336]{2,1,0} multiply(%select.2902, %select.2902)
  %multiply.9212 = bf16[1,4096,14336]{2,1,0} multiply(%multiply.9211, %broadcast.10115)
  %param.958 = bf16[1,4096,14336]{2,1,0} parameter(961), sharding={devices=[8,1,1]<=[8]}
  %multiply.9214 = bf16[1,4096,14336]{2,1,0} multiply(%param.958, %broadcast.10116)
  %add.7128 = bf16[1,4096,14336]{2,1,0} add(%multiply.9212, %multiply.9214)
  %divide.2021 = bf16[1,4096,14336]{2,1,0} divide(%add.7128, %broadcast.10117)
  %sqrt.314 = bf16[1,4096,14336]{2,1,0} sqrt(%divide.2021)
  %add.7129 = bf16[1,4096,14336]{2,1,0} add(%sqrt.314, %broadcast.10119)
  %multiply.9215 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10114, %add.7129)
  %divide.2022 = bf16[1,4096,14336]{2,1,0} divide(%add.7127, %multiply.9215)
  %multiply.9216 = bf16[1,4096,14336]{2,1,0} multiply(%param.105, %broadcast.10112)
  %add.7130 = bf16[1,4096,14336]{2,1,0} add(%divide.2022, %multiply.9216)
  %multiply.9217 = bf16[1,4096,14336]{2,1,0} multiply(%broadcast.10106, %add.7130)
  %add.7131 = bf16[1,4096,14336]{2,1,0} add(%param.105, %multiply.9217)
  %divide.2023 = bf16[1,14336,4096]{2,1,0} divide(%copy.4296, %broadcast.10134)
  %select.2903 = bf16[1,14336,4096]{2,1,0} select(%broadcast.10132, %copy.4296, %divide.2023)
  %multiply.9219 = bf16[1,14336,4096]{2,1,0} multiply(%select.2903, %broadcast.10135)
  %param.959 = bf16[1,14336,4096]{2,1,0} parameter(639), sharding={devices=[8,1,1]<=[8]}
  %multiply.9220 = bf16[1,14336,4096]{2,1,0} multiply(%param.959, %broadcast.10136)
  %add.7132 = bf16[1,14336,4096]{2,1,0} add(%multiply.9219, %multiply.9220)
  %multiply.9221 = bf16[1,14336,4096]{2,1,0} multiply(%select.2903, %select.2903)
  %multiply.9223 = bf16[1,14336,4096]{2,1,0} multiply(%multiply.9221, %broadcast.10138)
  %param.960 = bf16[1,14336,4096]{2,1,0} parameter(962), sharding={devices=[8,1,1]<=[8]}
  %multiply.9224 = bf16[1,14336,4096]{2,1,0} multiply(%param.960, %broadcast.10139)
  %add.7133 = bf16[1,14336,4096]{2,1,0} add(%multiply.9223, %multiply.9224)
  %divide.2024 = bf16[1,14336,4096]{2,1,0} divide(%add.7133, %broadcast.10140)
  %sqrt.315 = bf16[1,14336,4096]{2,1,0} sqrt(%divide.2024)
  %add.7135 = bf16[1,14336,4096]{2,1,0} add(%sqrt.315, %broadcast.10141)
  %multiply.9225 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10137, %add.7135)
  %divide.2025 = bf16[1,14336,4096]{2,1,0} divide(%add.7132, %multiply.9225)
  %multiply.9226 = bf16[1,14336,4096]{2,1,0} multiply(%param.106, %broadcast.10135)
  %add.7136 = bf16[1,14336,4096]{2,1,0} add(%divide.2025, %multiply.9226)
  %multiply.9227 = bf16[1,14336,4096]{2,1,0} multiply(%broadcast.10130, %add.7136)
  %add.7137 = bf16[1,14336,4096]{2,1,0} add(%param.106, %multiply.9227)
  %divide.2026 = bf16[4096]{0} divide(%all-reduce.472, %broadcast.10081)
  %select.2904 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.472, %divide.2026)
  %multiply.9228 = bf16[4096]{0} multiply(%select.2904, %broadcast.10083)
  %param.961 = bf16[4096]{0} parameter(640), sharding={replicated}
  %multiply.9229 = bf16[4096]{0} multiply(%param.961, %broadcast.10085)
  %add.7138 = bf16[4096]{0} add(%multiply.9228, %multiply.9229)
  %multiply.9230 = bf16[4096]{0} multiply(%select.2904, %select.2904)
  %multiply.9231 = bf16[4096]{0} multiply(%multiply.9230, %broadcast.10088)
  %param.962 = bf16[4096]{0} parameter(963), sharding={replicated}
  %multiply.9232 = bf16[4096]{0} multiply(%param.962, %broadcast.10090)
  %add.7139 = bf16[4096]{0} add(%multiply.9231, %multiply.9232)
  %divide.2027 = bf16[4096]{0} divide(%add.7139, %broadcast.10092)
  %sqrt.316 = bf16[4096]{0} sqrt(%divide.2027)
  %add.7140 = bf16[4096]{0} add(%sqrt.316, %broadcast.10094)
  %multiply.9233 = bf16[4096]{0} multiply(%broadcast.10086, %add.7140)
  %divide.2028 = bf16[4096]{0} divide(%add.7138, %multiply.9233)
  %multiply.9234 = bf16[4096]{0} multiply(%param.102, %broadcast.10083)
  %add.7141 = bf16[4096]{0} add(%divide.2028, %multiply.9234)
  %multiply.9235 = bf16[4096]{0} multiply(%broadcast.5338, %add.7141)
  %add.7142 = bf16[4096]{0} add(%param.102, %multiply.9235)
  %divide.2029 = bf16[4096]{0} divide(%all-reduce.473, %broadcast.10081)
  %select.2905 = bf16[4096]{0} select(%broadcast.10079, %all-reduce.473, %divide.2029)
  %multiply.9236 = bf16[4096]{0} multiply(%select.2905, %broadcast.10083)
  %param.963 = bf16[4096]{0} parameter(641), sharding={replicated}
  %multiply.9237 = bf16[4096]{0} multiply(%param.963, %broadcast.10085)
  %add.7143 = bf16[4096]{0} add(%multiply.9236, %multiply.9237)
  %multiply.9238 = bf16[4096]{0} multiply(%select.2905, %select.2905)
  %multiply.9239 = bf16[4096]{0} multiply(%multiply.9238, %broadcast.10088)
  %param.964 = bf16[4096]{0} parameter(964), sharding={replicated}
  %multiply.9240 = bf16[4096]{0} multiply(%param.964, %broadcast.10090)
  %add.7144 = bf16[4096]{0} add(%multiply.9239, %multiply.9240)
  %divide.2030 = bf16[4096]{0} divide(%add.7144, %broadcast.10092)
  %sqrt.317 = bf16[4096]{0} sqrt(%divide.2030)
  %add.7145 = bf16[4096]{0} add(%sqrt.317, %broadcast.10094)
  %multiply.9241 = bf16[4096]{0} multiply(%broadcast.10086, %add.7145)
  %divide.2032 = bf16[4096]{0} divide(%add.7143, %multiply.9241)
  %multiply.9242 = bf16[4096]{0} multiply(%param.97, %broadcast.10083)
  %add.7146 = bf16[4096]{0} add(%divide.2032, %multiply.9242)
  %multiply.9243 = bf16[4096]{0} multiply(%broadcast.5338, %add.7146)
  %add.7147 = bf16[4096]{0} add(%param.97, %multiply.9243)
  %divide.2033 = bf16[512,8,128]{0,2,1} divide(%transpose.444, %broadcast.10162)
  %select.2906 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.444, %divide.2033)
  %multiply.9244 = bf16[512,8,128]{0,2,1} multiply(%select.2906, %broadcast.10163)
  %param.965 = bf16[512,8,128]{2,1,0} parameter(642), sharding={devices=[8,1,1]<=[8]}
  %multiply.9245 = bf16[512,8,128]{2,1,0} multiply(%param.965, %broadcast.10164)
  %add.7148 = bf16[512,8,128]{0,2,1} add(%multiply.9244, %multiply.9245)
  %multiply.9246 = bf16[512,8,128]{0,2,1} multiply(%select.2906, %select.2906)
  %multiply.9247 = bf16[512,8,128]{0,2,1} multiply(%multiply.9246, %broadcast.10166)
  %param.966 = bf16[512,8,128]{2,1,0} parameter(965), sharding={devices=[8,1,1]<=[8]}
  %multiply.9248 = bf16[512,8,128]{2,1,0} multiply(%param.966, %broadcast.10167)
  %add.7150 = bf16[512,8,128]{0,2,1} add(%multiply.9247, %multiply.9248)
  %divide.2034 = bf16[512,8,128]{0,2,1} divide(%add.7150, %broadcast.10168)
  %sqrt.318 = bf16[512,8,128]{0,2,1} sqrt(%divide.2034)
  %add.7151 = bf16[512,8,128]{0,2,1} add(%sqrt.318, %broadcast.10169)
  %multiply.9249 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.7151)
  %divide.2035 = bf16[512,8,128]{0,2,1} divide(%add.7148, %multiply.9249)
  %multiply.9250 = bf16[512,8,128]{2,1,0} multiply(%param.99, %broadcast.10163)
  %add.7152 = bf16[512,8,128]{0,2,1} add(%divide.2035, %multiply.9250)
  %multiply.9251 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.7152)
  %add.7153 = bf16[512,8,128]{2,1,0} add(%param.99, %multiply.9251)
  %divide.2036 = bf16[32,128,512]{1,0,2} divide(%transpose.445, %broadcast.10172)
  %select.2907 = bf16[32,128,512]{1,0,2} select(%broadcast.10171, %transpose.445, %divide.2036)
  %multiply.9252 = bf16[32,128,512]{1,0,2} multiply(%select.2907, %broadcast.10173)
  %param.967 = bf16[32,128,512]{2,1,0} parameter(643), sharding={devices=[1,1,8]<=[8]}
  %multiply.9253 = bf16[32,128,512]{2,1,0} multiply(%param.967, %broadcast.10174)
  %add.7155 = bf16[32,128,512]{1,0,2} add(%multiply.9252, %multiply.9253)
  %multiply.9254 = bf16[32,128,512]{1,0,2} multiply(%select.2907, %select.2907)
  %multiply.9255 = bf16[32,128,512]{1,0,2} multiply(%multiply.9254, %broadcast.10176)
  %param.968 = bf16[32,128,512]{2,1,0} parameter(966), sharding={devices=[1,1,8]<=[8]}
  %multiply.9256 = bf16[32,128,512]{2,1,0} multiply(%param.968, %broadcast.10177)
  %add.7156 = bf16[32,128,512]{1,0,2} add(%multiply.9255, %multiply.9256)
  %divide.2037 = bf16[32,128,512]{1,0,2} divide(%add.7156, %broadcast.10178)
  %sqrt.319 = bf16[32,128,512]{1,0,2} sqrt(%divide.2037)
  %add.7157 = bf16[32,128,512]{1,0,2} add(%sqrt.319, %broadcast.10179)
  %multiply.9257 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10175, %add.7157)
  %divide.2038 = bf16[32,128,512]{1,0,2} divide(%add.7155, %multiply.9257)
  %multiply.9258 = bf16[32,128,512]{2,1,0} multiply(%param.101, %broadcast.10173)
  %add.7158 = bf16[32,128,512]{1,0,2} add(%divide.2038, %multiply.9258)
  %multiply.9259 = bf16[32,128,512]{2,1,0} multiply(%broadcast.10170, %add.7158)
  %add.7160 = bf16[32,128,512]{2,1,0} add(%param.101, %multiply.9259)
  %divide.2039 = bf16[512,32,128]{0,2,1} divide(%transpose.446, %broadcast.10182)
  %select.2908 = bf16[512,32,128]{0,2,1} select(%broadcast.10181, %transpose.446, %divide.2039)
  %multiply.9260 = bf16[512,32,128]{0,2,1} multiply(%select.2908, %broadcast.10183)
  %param.969 = bf16[512,32,128]{2,1,0} parameter(644), sharding={devices=[8,1,1]<=[8]}
  %multiply.9261 = bf16[512,32,128]{2,1,0} multiply(%param.969, %broadcast.10184)
  %add.7161 = bf16[512,32,128]{0,2,1} add(%multiply.9260, %multiply.9261)
  %multiply.9262 = bf16[512,32,128]{0,2,1} multiply(%select.2908, %select.2908)
  %multiply.9263 = bf16[512,32,128]{0,2,1} multiply(%multiply.9262, %broadcast.10186)
  %param.970 = bf16[512,32,128]{2,1,0} parameter(967), sharding={devices=[8,1,1]<=[8]}
  %multiply.9264 = bf16[512,32,128]{2,1,0} multiply(%param.970, %broadcast.10187)
  %add.7162 = bf16[512,32,128]{0,2,1} add(%multiply.9263, %multiply.9264)
  %divide.2040 = bf16[512,32,128]{0,2,1} divide(%add.7162, %broadcast.10188)
  %sqrt.320 = bf16[512,32,128]{0,2,1} sqrt(%divide.2040)
  %add.7163 = bf16[512,32,128]{0,2,1} add(%sqrt.320, %broadcast.10189)
  %multiply.9265 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10185, %add.7163)
  %divide.2041 = bf16[512,32,128]{0,2,1} divide(%add.7161, %multiply.9265)
  %multiply.9266 = bf16[512,32,128]{2,1,0} multiply(%param.98, %broadcast.10183)
  %add.7164 = bf16[512,32,128]{0,2,1} add(%divide.2041, %multiply.9266)
  %multiply.9267 = bf16[512,32,128]{2,1,0} multiply(%broadcast.10180, %add.7164)
  %add.7165 = bf16[512,32,128]{2,1,0} add(%param.98, %multiply.9267)
  %divide.2042 = bf16[512,8,128]{0,2,1} divide(%transpose.447, %broadcast.10162)
  %select.2909 = bf16[512,8,128]{0,2,1} select(%broadcast.10161, %transpose.447, %divide.2042)
  %multiply.9268 = bf16[512,8,128]{0,2,1} multiply(%select.2909, %broadcast.10163)
  %param.971 = bf16[512,8,128]{2,1,0} parameter(645), sharding={devices=[8,1,1]<=[8]}
  %multiply.9269 = bf16[512,8,128]{2,1,0} multiply(%param.971, %broadcast.10164)
  %add.7166 = bf16[512,8,128]{0,2,1} add(%multiply.9268, %multiply.9269)
  %multiply.9270 = bf16[512,8,128]{0,2,1} multiply(%select.2909, %select.2909)
  %multiply.9271 = bf16[512,8,128]{0,2,1} multiply(%multiply.9270, %broadcast.10166)
  %param.972 = bf16[512,8,128]{2,1,0} parameter(968), sharding={devices=[8,1,1]<=[8]}
  %multiply.9272 = bf16[512,8,128]{2,1,0} multiply(%param.972, %broadcast.10167)
  %add.7167 = bf16[512,8,128]{0,2,1} add(%multiply.9271, %multiply.9272)
  %divide.2043 = bf16[512,8,128]{0,2,1} divide(%add.7167, %broadcast.10168)
  %sqrt.321 = bf16[512,8,128]{0,2,1} sqrt(%divide.2043)
  %add.7168 = bf16[512,8,128]{0,2,1} add(%sqrt.321, %broadcast.10169)
  %multiply.9273 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10165, %add.7168)
  %divide.2044 = bf16[512,8,128]{0,2,1} divide(%add.7166, %multiply.9273)
  %multiply.9274 = bf16[512,8,128]{2,1,0} multiply(%param.100, %broadcast.10163)
  %add.7169 = bf16[512,8,128]{0,2,1} add(%divide.2044, %multiply.9274)
  %multiply.9275 = bf16[512,8,128]{2,1,0} multiply(%broadcast.10160, %add.7169)
  %add.7170 = bf16[512,8,128]{2,1,0} add(%param.100, %multiply.9275)
  %broadcast.12025 = bf16[512,32000]{1,0} broadcast(%convert.575), dimensions={}
  %broadcast.12026 = pred[512,32000]{0,1} broadcast(%compare.3990), dimensions={}
  %broadcast.12027 = bf16[512,32000]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.2045 = bf16[512,32000]{0,1} divide(%dynamic-slice.2659, %broadcast.12027)
  %select.2910 = bf16[512,32000]{0,1} select(%broadcast.12026, %dynamic-slice.2659, %divide.2045)
  %broadcast.12028 = bf16[512,32000]{1,0} broadcast(%constant.20349), dimensions={}
  %multiply.9276 = bf16[512,32000]{0,1} multiply(%select.2910, %broadcast.12028)
  %param.973 = bf16[512,32000]{1,0} parameter(646), sharding={devices=[8,1]<=[8]}
  %broadcast.12029 = bf16[512,32000]{1,0} broadcast(%constant.20350), dimensions={}
  %multiply.9277 = bf16[512,32000]{1,0} multiply(%param.973, %broadcast.12029)
  %add.7171 = bf16[512,32000]{0,1} add(%multiply.9276, %multiply.9277)
  %broadcast.12030 = bf16[512,32000]{1,0} broadcast(%convert.3260), dimensions={}
  %multiply.9278 = bf16[512,32000]{0,1} multiply(%select.2910, %select.2910)
  %broadcast.12031 = bf16[512,32000]{1,0} broadcast(%constant.20356), dimensions={}
  %multiply.9280 = bf16[512,32000]{0,1} multiply(%multiply.9278, %broadcast.12031)
  %param.974 = bf16[512,32000]{1,0} parameter(969), sharding={devices=[8,1]<=[8]}
  %broadcast.12032 = bf16[512,32000]{1,0} broadcast(%constant.20357), dimensions={}
  %multiply.9281 = bf16[512,32000]{1,0} multiply(%param.974, %broadcast.12032)
  %add.7172 = bf16[512,32000]{0,1} add(%multiply.9280, %multiply.9281)
  %broadcast.12033 = bf16[512,32000]{1,0} broadcast(%convert.3262), dimensions={}
  %divide.2046 = bf16[512,32000]{0,1} divide(%add.7172, %broadcast.12033)
  %sqrt.322 = bf16[512,32000]{0,1} sqrt(%divide.2046)
  %broadcast.12034 = bf16[512,32000]{1,0} broadcast(%constant.20360), dimensions={}
  %add.7173 = bf16[512,32000]{0,1} add(%sqrt.322, %broadcast.12034)
  %multiply.9282 = bf16[512,32000]{1,0} multiply(%broadcast.12030, %add.7173)
  %divide.2047 = bf16[512,32000]{0,1} divide(%add.7171, %multiply.9282)
  %multiply.9283 = bf16[512,32000]{1,0} multiply(%param.328, %broadcast.12028)
  %add.7174 = bf16[512,32000]{0,1} add(%divide.2047, %multiply.9283)
  %multiply.9284 = bf16[512,32000]{1,0} multiply(%broadcast.12025, %add.7174)
  %add.7175 = bf16[512,32000]{1,0} add(%param.328, %multiply.9284)
  %broadcast.12035 = bf16[32000,512]{1,0} broadcast(%convert.575), dimensions={}
  %broadcast.12036 = pred[32000,512]{0,1} broadcast(%compare.3990), dimensions={}
  %broadcast.12038 = bf16[32000,512]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.2048 = bf16[32000,512]{0,1} divide(%dynamic-slice.2661, %broadcast.12038)
  %select.2911 = bf16[32000,512]{0,1} select(%broadcast.12036, %dynamic-slice.2661, %divide.2048)
  %broadcast.12040 = bf16[32000,512]{1,0} broadcast(%constant.20349), dimensions={}
  %multiply.9285 = bf16[32000,512]{0,1} multiply(%select.2911, %broadcast.12040)
  %param.975 = bf16[32000,512]{1,0} parameter(647), sharding={devices=[1,8]<=[8]}
  %broadcast.12041 = bf16[32000,512]{1,0} broadcast(%constant.20350), dimensions={}
  %multiply.9286 = bf16[32000,512]{1,0} multiply(%param.975, %broadcast.12041)
  %add.7176 = bf16[32000,512]{0,1} add(%multiply.9285, %multiply.9286)
  %broadcast.12042 = bf16[32000,512]{1,0} broadcast(%convert.3260), dimensions={}
  %multiply.9287 = bf16[32000,512]{0,1} multiply(%select.2911, %select.2911)
  %broadcast.12043 = bf16[32000,512]{1,0} broadcast(%constant.20356), dimensions={}
  %multiply.9288 = bf16[32000,512]{0,1} multiply(%multiply.9287, %broadcast.12043)
  %param.976 = bf16[32000,512]{1,0} parameter(970), sharding={devices=[1,8]<=[8]}
  %broadcast.12044 = bf16[32000,512]{1,0} broadcast(%constant.20357), dimensions={}
  %multiply.9289 = bf16[32000,512]{1,0} multiply(%param.976, %broadcast.12044)
  %add.7177 = bf16[32000,512]{0,1} add(%multiply.9288, %multiply.9289)
  %broadcast.12045 = bf16[32000,512]{1,0} broadcast(%convert.3262), dimensions={}
  %divide.2049 = bf16[32000,512]{0,1} divide(%add.7177, %broadcast.12045)
  %sqrt.323 = bf16[32000,512]{0,1} sqrt(%divide.2049)
  %broadcast.12046 = bf16[32000,512]{1,0} broadcast(%constant.20360), dimensions={}
  %add.7178 = bf16[32000,512]{0,1} add(%sqrt.323, %broadcast.12046)
  %multiply.9290 = bf16[32000,512]{1,0} multiply(%broadcast.12042, %add.7178)
  %divide.2050 = bf16[32000,512]{0,1} divide(%add.7176, %multiply.9290)
  %multiply.9291 = bf16[32000,512]{1,0} multiply(%param.4, %broadcast.12040)
  %add.7179 = bf16[32000,512]{0,1} add(%divide.2050, %multiply.9291)
  %multiply.9293 = bf16[32000,512]{1,0} multiply(%broadcast.12035, %add.7179)
  %add.7180 = bf16[32000,512]{1,0} add(%param.4, %multiply.9293)
  %compare.3992 = pred[] compare(%param.2, %constant.20353), direction=LT
  %add.7181 = s32[] add(%param.2, %constant.3779)
  %select.2912 = s32[] select(%compare.3992, %add.7181, %constant.20353)
  %convert.4298 = f32[4096]{0} convert(%multiply.6512)
  %reduce.1325 = f32[] reduce(%convert.4298, %constant.3956), dimensions={0}, to_apply=%region_1486.40954
  %convert.4300 = bf16[] convert(%reduce.1325)
  %convert.4301 = f32[512,8]{0,1} convert(%multiply.6520)
  %reduce.1326 = f32[] reduce(%convert.4301, %constant.3956), dimensions={0,1}, to_apply=%region_1487.40962
  %all-reduce.486 = f32[] all-reduce(%reduce.1326), channel_id=1577, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1487.40962.clone
  %convert.4302 = bf16[] convert(%all-reduce.486)
  %add.7182 = bf16[] add(%convert.4300, %convert.4302)
  %convert.4303 = f32[1,4096,14336]{2,1,0} convert(%multiply.6528)
  %reduce.1327 = f32[] reduce(%convert.4303, %constant.3956), dimensions={0,1,2}, to_apply=%region_1488.40971
  %all-reduce.487 = f32[] all-reduce(%reduce.1327), channel_id=1578, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1488.40971.clone
  %convert.4304 = bf16[] convert(%all-reduce.487)
  %add.7183 = bf16[] add(%add.7182, %convert.4304)
  %convert.4305 = f32[1,4096,14336]{2,1,0} convert(%multiply.6536)
  %reduce.1328 = f32[] reduce(%convert.4305, %constant.3956), dimensions={0,1,2}, to_apply=%region_1489.40980
  %all-reduce.488 = f32[] all-reduce(%reduce.1328), channel_id=1579, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1489.40980.clone
  %convert.4306 = bf16[] convert(%all-reduce.488)
  %add.7184 = bf16[] add(%add.7183, %convert.4306)
  %convert.4307 = f32[1,14336,4096]{2,1,0} convert(%multiply.6545)
  %reduce.1329 = f32[] reduce(%convert.4307, %constant.3956), dimensions={0,1,2}, to_apply=%region_1490.40989
  %all-reduce.489 = f32[] all-reduce(%reduce.1329), channel_id=1580, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1490.40989.clone
  %convert.4308 = bf16[] convert(%all-reduce.489)
  %add.7185 = bf16[] add(%add.7184, %convert.4308)
  %convert.4309 = f32[4096]{0} convert(%multiply.6553)
  %reduce.1330 = f32[] reduce(%convert.4309, %constant.3956), dimensions={0}, to_apply=%region_1491.40998
  %convert.4310 = bf16[] convert(%reduce.1330)
  %add.7186 = bf16[] add(%add.7185, %convert.4310)
  %convert.4311 = f32[4096]{0} convert(%multiply.6563)
  %reduce.1331 = f32[] reduce(%convert.4311, %constant.3956), dimensions={0}, to_apply=%region_1492.41007
  %convert.4312 = bf16[] convert(%reduce.1331)
  %add.7187 = bf16[] add(%add.7186, %convert.4312)
  %convert.4313 = f32[512,8,128]{0,2,1} convert(%multiply.6571)
  %reduce.1332 = f32[] reduce(%convert.4313, %constant.3956), dimensions={0,1,2}, to_apply=%region_1493.41016
  %all-reduce.490 = f32[] all-reduce(%reduce.1332), channel_id=1581, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1493.41016.clone
  %convert.4314 = bf16[] convert(%all-reduce.490)
  %add.7188 = bf16[] add(%add.7187, %convert.4314)
  %convert.4315 = f32[32,128,512]{1,0,2} convert(%multiply.6579)
  %reduce.1333 = f32[] reduce(%convert.4315, %constant.3956), dimensions={0,1,2}, to_apply=%region_1494.41025
  %all-reduce.491 = f32[] all-reduce(%reduce.1333), channel_id=1582, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1494.41025.clone
  %convert.4316 = bf16[] convert(%all-reduce.491)
  %add.7189 = bf16[] add(%add.7188, %convert.4316)
  %convert.4317 = f32[512,32,128]{0,2,1} convert(%multiply.6587)
  %reduce.1335 = f32[] reduce(%convert.4317, %constant.3956), dimensions={0,1,2}, to_apply=%region_1495.41034
  %all-reduce.492 = f32[] all-reduce(%reduce.1335), channel_id=1583, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1495.41034.clone
  %convert.4318 = bf16[] convert(%all-reduce.492)
  %add.7190 = bf16[] add(%add.7189, %convert.4318)
  %convert.4319 = f32[512,8,128]{0,2,1} convert(%multiply.6595)
  %reduce.1336 = f32[] reduce(%convert.4319, %constant.3956), dimensions={0,1,2}, to_apply=%region_1496.41043
  %all-reduce.493 = f32[] all-reduce(%reduce.1336), channel_id=1584, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1496.41043.clone
  %convert.4320 = bf16[] convert(%all-reduce.493)
  %add.7191 = bf16[] add(%add.7190, %convert.4320)
  %convert.4321 = f32[512,8]{0,1} convert(%multiply.6603)
  %reduce.1337 = f32[] reduce(%convert.4321, %constant.3956), dimensions={0,1}, to_apply=%region_1497.41052
  %all-reduce.494 = f32[] all-reduce(%reduce.1337), channel_id=1585, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1497.41052.clone
  %convert.4322 = bf16[] convert(%all-reduce.494)
  %add.7193 = bf16[] add(%add.7191, %convert.4322)
  %convert.4323 = f32[1,4096,14336]{2,1,0} convert(%multiply.6611)
  %reduce.1338 = f32[] reduce(%convert.4323, %constant.3956), dimensions={0,1,2}, to_apply=%region_1498.41061
  %all-reduce.495 = f32[] all-reduce(%reduce.1338), channel_id=1586, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1498.41061.clone
  %convert.4325 = bf16[] convert(%all-reduce.495)
  %add.7194 = bf16[] add(%add.7193, %convert.4325)
  %convert.4326 = f32[1,4096,14336]{2,1,0} convert(%multiply.6619)
  %reduce.1339 = f32[] reduce(%convert.4326, %constant.3956), dimensions={0,1,2}, to_apply=%region_1499.41070
  %all-reduce.496 = f32[] all-reduce(%reduce.1339), channel_id=1587, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1499.41070.clone
  %convert.4328 = bf16[] convert(%all-reduce.496)
  %add.7195 = bf16[] add(%add.7194, %convert.4328)
  %convert.4329 = f32[1,14336,4096]{2,1,0} convert(%multiply.6627)
  %reduce.1340 = f32[] reduce(%convert.4329, %constant.3956), dimensions={0,1,2}, to_apply=%region_1500.41079
  %all-reduce.497 = f32[] all-reduce(%reduce.1340), channel_id=1588, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1500.41079.clone
  %convert.4330 = bf16[] convert(%all-reduce.497)
  %add.7196 = bf16[] add(%add.7195, %convert.4330)
  %convert.4331 = f32[4096]{0} convert(%multiply.6635)
  %reduce.1341 = f32[] reduce(%convert.4331, %constant.3956), dimensions={0}, to_apply=%region_1501.41088
  %convert.4332 = bf16[] convert(%reduce.1341)
  %add.7197 = bf16[] add(%add.7196, %convert.4332)
  %convert.4333 = f32[4096]{0} convert(%multiply.6644)
  %reduce.1342 = f32[] reduce(%convert.4333, %constant.3956), dimensions={0}, to_apply=%region_1502.41097
  %convert.4334 = bf16[] convert(%reduce.1342)
  %add.7198 = bf16[] add(%add.7197, %convert.4334)
  %convert.4335 = f32[512,8,128]{0,2,1} convert(%multiply.6655)
  %reduce.1343 = f32[] reduce(%convert.4335, %constant.3956), dimensions={0,1,2}, to_apply=%region_1503.41106
  %all-reduce.498 = f32[] all-reduce(%reduce.1343), channel_id=1589, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1503.41106.clone
  %convert.4336 = bf16[] convert(%all-reduce.498)
  %add.7199 = bf16[] add(%add.7198, %convert.4336)
  %convert.4338 = f32[32,128,512]{1,0,2} convert(%multiply.6664)
  %reduce.1344 = f32[] reduce(%convert.4338, %constant.3956), dimensions={0,1,2}, to_apply=%region_1504.41115
  %all-reduce.499 = f32[] all-reduce(%reduce.1344), channel_id=1590, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1504.41115.clone
  %convert.4340 = bf16[] convert(%all-reduce.499)
  %add.7200 = bf16[] add(%add.7199, %convert.4340)
  %convert.4341 = f32[512,32,128]{0,2,1} convert(%multiply.6672)
  %reduce.1345 = f32[] reduce(%convert.4341, %constant.3956), dimensions={0,1,2}, to_apply=%region_1505.41124
  %all-reduce.500 = f32[] all-reduce(%reduce.1345), channel_id=1591, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1505.41124.clone
  %convert.4342 = bf16[] convert(%all-reduce.500)
  %add.7201 = bf16[] add(%add.7200, %convert.4342)
  %convert.4343 = f32[512,8,128]{0,2,1} convert(%multiply.6681)
  %reduce.1346 = f32[] reduce(%convert.4343, %constant.3956), dimensions={0,1,2}, to_apply=%region_1506.41133
  %all-reduce.501 = f32[] all-reduce(%reduce.1346), channel_id=1592, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1506.41133.clone
  %convert.4344 = bf16[] convert(%all-reduce.501)
  %add.7202 = bf16[] add(%add.7201, %convert.4344)
  %convert.4345 = f32[512,8]{0,1} convert(%multiply.6690)
  %reduce.1347 = f32[] reduce(%convert.4345, %constant.3956), dimensions={0,1}, to_apply=%region_1507.41142
  %all-reduce.502 = f32[] all-reduce(%reduce.1347), channel_id=1593, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1507.41142.clone
  %convert.4346 = bf16[] convert(%all-reduce.502)
  %add.7203 = bf16[] add(%add.7202, %convert.4346)
  %convert.4347 = f32[1,4096,14336]{2,1,0} convert(%multiply.6698)
  %reduce.1348 = f32[] reduce(%convert.4347, %constant.3956), dimensions={0,1,2}, to_apply=%region_1508.41151
  %all-reduce.503 = f32[] all-reduce(%reduce.1348), channel_id=1594, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1508.41151.clone
  %convert.4348 = bf16[] convert(%all-reduce.503)
  %add.7204 = bf16[] add(%add.7203, %convert.4348)
  %convert.4349 = f32[1,4096,14336]{2,1,0} convert(%multiply.6708)
  %reduce.1349 = f32[] reduce(%convert.4349, %constant.3956), dimensions={0,1,2}, to_apply=%region_1509.41160
  %all-reduce.504 = f32[] all-reduce(%reduce.1349), channel_id=1595, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1509.41160.clone
  %convert.4350 = bf16[] convert(%all-reduce.504)
  %add.7205 = bf16[] add(%add.7204, %convert.4350)
  %convert.4351 = f32[1,14336,4096]{2,1,0} convert(%multiply.6717)
  %reduce.1350 = f32[] reduce(%convert.4351, %constant.3956), dimensions={0,1,2}, to_apply=%region_1510.41169
  %all-reduce.505 = f32[] all-reduce(%reduce.1350), channel_id=1596, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1510.41169.clone
  %convert.4352 = bf16[] convert(%all-reduce.505)
  %add.7207 = bf16[] add(%add.7205, %convert.4352)
  %convert.4353 = f32[4096]{0} convert(%multiply.6725)
  %reduce.1351 = f32[] reduce(%convert.4353, %constant.3956), dimensions={0}, to_apply=%region_1511.41178
  %convert.4354 = bf16[] convert(%reduce.1351)
  %add.7208 = bf16[] add(%add.7207, %convert.4354)
  %convert.4355 = f32[4096]{0} convert(%multiply.6733)
  %reduce.1352 = f32[] reduce(%convert.4355, %constant.3956), dimensions={0}, to_apply=%region_1512.41187
  %convert.4356 = bf16[] convert(%reduce.1352)
  %add.7210 = bf16[] add(%add.7208, %convert.4356)
  %convert.4357 = f32[512,8,128]{0,2,1} convert(%multiply.6743)
  %reduce.1353 = f32[] reduce(%convert.4357, %constant.3956), dimensions={0,1,2}, to_apply=%region_1513.41196
  %all-reduce.506 = f32[] all-reduce(%reduce.1353), channel_id=1597, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1513.41196.clone
  %convert.4358 = bf16[] convert(%all-reduce.506)
  %add.7211 = bf16[] add(%add.7210, %convert.4358)
  %convert.4359 = f32[32,128,512]{1,0,2} convert(%multiply.6753)
  %reduce.1354 = f32[] reduce(%convert.4359, %constant.3956), dimensions={0,1,2}, to_apply=%region_1514.41205
  %all-reduce.507 = f32[] all-reduce(%reduce.1354), channel_id=1598, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1514.41205.clone
  %convert.4360 = bf16[] convert(%all-reduce.507)
  %add.7213 = bf16[] add(%add.7211, %convert.4360)
  %convert.4361 = f32[512,32,128]{0,2,1} convert(%multiply.6762)
  %reduce.1355 = f32[] reduce(%convert.4361, %constant.3956), dimensions={0,1,2}, to_apply=%region_1515.41214
  %all-reduce.508 = f32[] all-reduce(%reduce.1355), channel_id=1599, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1515.41214.clone
  %convert.4362 = bf16[] convert(%all-reduce.508)
  %add.7214 = bf16[] add(%add.7213, %convert.4362)
  %convert.4363 = f32[512,8,128]{0,2,1} convert(%multiply.6770)
  %reduce.1356 = f32[] reduce(%convert.4363, %constant.3956), dimensions={0,1,2}, to_apply=%region_1516.41223
  %all-reduce.509 = f32[] all-reduce(%reduce.1356), channel_id=1600, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1516.41223.clone
  %convert.4364 = bf16[] convert(%all-reduce.509)
  %add.7215 = bf16[] add(%add.7214, %convert.4364)
  %convert.4365 = f32[512,8]{0,1} convert(%multiply.6779)
  %reduce.1357 = f32[] reduce(%convert.4365, %constant.3956), dimensions={0,1}, to_apply=%region_1517.41232
  %all-reduce.510 = f32[] all-reduce(%reduce.1357), channel_id=1601, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1517.41232.clone
  %convert.4366 = bf16[] convert(%all-reduce.510)
  %add.7216 = bf16[] add(%add.7215, %convert.4366)
  %convert.4367 = f32[1,4096,14336]{2,1,0} convert(%multiply.6789)
  %reduce.1358 = f32[] reduce(%convert.4367, %constant.3956), dimensions={0,1,2}, to_apply=%region_1518.41241
  %all-reduce.511 = f32[] all-reduce(%reduce.1358), channel_id=1602, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1518.41241.clone
  %convert.4368 = bf16[] convert(%all-reduce.511)
  %add.7217 = bf16[] add(%add.7216, %convert.4368)
  %convert.4369 = f32[1,4096,14336]{2,1,0} convert(%multiply.6798)
  %reduce.1359 = f32[] reduce(%convert.4369, %constant.3956), dimensions={0,1,2}, to_apply=%region_1519.41250
  %all-reduce.512 = f32[] all-reduce(%reduce.1359), channel_id=1603, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1519.41250.clone
  %convert.4370 = bf16[] convert(%all-reduce.512)
  %add.7218 = bf16[] add(%add.7217, %convert.4370)
  %convert.4371 = f32[1,14336,4096]{2,1,0} convert(%multiply.6806)
  %reduce.1361 = f32[] reduce(%convert.4371, %constant.3956), dimensions={0,1,2}, to_apply=%region_1520.41259
  %all-reduce.513 = f32[] all-reduce(%reduce.1361), channel_id=1604, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1520.41259.clone
  %convert.4372 = bf16[] convert(%all-reduce.513)
  %add.7219 = bf16[] add(%add.7218, %convert.4372)
  %convert.4373 = f32[4096]{0} convert(%multiply.6814)
  %reduce.1362 = f32[] reduce(%convert.4373, %constant.3956), dimensions={0}, to_apply=%region_1521.41268
  %convert.4374 = bf16[] convert(%reduce.1362)
  %add.7220 = bf16[] add(%add.7219, %convert.4374)
  %convert.4375 = f32[4096]{0} convert(%multiply.6822)
  %reduce.1363 = f32[] reduce(%convert.4375, %constant.3956), dimensions={0}, to_apply=%region_1522.41277
  %convert.4376 = bf16[] convert(%reduce.1363)
  %add.7221 = bf16[] add(%add.7220, %convert.4376)
  %convert.4377 = f32[512,8,128]{0,2,1} convert(%multiply.6830)
  %reduce.1364 = f32[] reduce(%convert.4377, %constant.3956), dimensions={0,1,2}, to_apply=%region_1523.41286
  %all-reduce.514 = f32[] all-reduce(%reduce.1364), channel_id=1605, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1523.41286.clone
  %convert.4378 = bf16[] convert(%all-reduce.514)
  %add.7222 = bf16[] add(%add.7221, %convert.4378)
  %convert.4379 = f32[32,128,512]{1,0,2} convert(%multiply.6838)
  %reduce.1365 = f32[] reduce(%convert.4379, %constant.3956), dimensions={0,1,2}, to_apply=%region_1524.41295
  %all-reduce.515 = f32[] all-reduce(%reduce.1365), channel_id=1606, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1524.41295.clone
  %convert.4380 = bf16[] convert(%all-reduce.515)
  %add.7223 = bf16[] add(%add.7222, %convert.4380)
  %convert.4381 = f32[512,32,128]{0,2,1} convert(%multiply.6846)
  %reduce.1366 = f32[] reduce(%convert.4381, %constant.3956), dimensions={0,1,2}, to_apply=%region_1525.41304
  %all-reduce.516 = f32[] all-reduce(%reduce.1366), channel_id=1607, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1525.41304.clone
  %convert.4382 = bf16[] convert(%all-reduce.516)
  %add.7224 = bf16[] add(%add.7223, %convert.4382)
  %convert.4383 = f32[512,8,128]{0,2,1} convert(%multiply.6855)
  %reduce.1367 = f32[] reduce(%convert.4383, %constant.3956), dimensions={0,1,2}, to_apply=%region_1526.41313
  %all-reduce.517 = f32[] all-reduce(%reduce.1367), channel_id=1608, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1526.41313.clone
  %convert.4384 = bf16[] convert(%all-reduce.517)
  %add.7225 = bf16[] add(%add.7224, %convert.4384)
  %convert.4385 = f32[512,8]{0,1} convert(%multiply.6864)
  %reduce.1368 = f32[] reduce(%convert.4385, %constant.3956), dimensions={0,1}, to_apply=%region_1527.41322
  %all-reduce.518 = f32[] all-reduce(%reduce.1368), channel_id=1609, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1527.41322.clone
  %convert.4386 = bf16[] convert(%all-reduce.518)
  %add.7227 = bf16[] add(%add.7225, %convert.4386)
  %convert.4388 = f32[1,4096,14336]{2,1,0} convert(%multiply.6873)
  %reduce.1369 = f32[] reduce(%convert.4388, %constant.3956), dimensions={0,1,2}, to_apply=%region_1528.41331
  %all-reduce.519 = f32[] all-reduce(%reduce.1369), channel_id=1610, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1528.41331.clone
  %convert.4389 = bf16[] convert(%all-reduce.519)
  %add.7228 = bf16[] add(%add.7227, %convert.4389)
  %convert.4390 = f32[1,4096,14336]{2,1,0} convert(%multiply.6881)
  %reduce.1370 = f32[] reduce(%convert.4390, %constant.3956), dimensions={0,1,2}, to_apply=%region_1529.41340
  %all-reduce.520 = f32[] all-reduce(%reduce.1370), channel_id=1611, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1529.41340.clone
  %convert.4391 = bf16[] convert(%all-reduce.520)
  %add.7229 = bf16[] add(%add.7228, %convert.4391)
  %convert.4392 = f32[1,14336,4096]{2,1,0} convert(%multiply.6889)
  %reduce.1371 = f32[] reduce(%convert.4392, %constant.3956), dimensions={0,1,2}, to_apply=%region_1530.41349
  %all-reduce.521 = f32[] all-reduce(%reduce.1371), channel_id=1612, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1530.41349.clone
  %convert.4393 = bf16[] convert(%all-reduce.521)
  %add.7230 = bf16[] add(%add.7229, %convert.4393)
  %convert.4394 = f32[4096]{0} convert(%multiply.6897)
  %reduce.1373 = f32[] reduce(%convert.4394, %constant.3956), dimensions={0}, to_apply=%region_1531.41358
  %convert.4396 = bf16[] convert(%reduce.1373)
  %add.7231 = bf16[] add(%add.7230, %convert.4396)
  %convert.4397 = f32[4096]{0} convert(%multiply.6905)
  %reduce.1374 = f32[] reduce(%convert.4397, %constant.3956), dimensions={0}, to_apply=%region_1532.41367
  %convert.4398 = bf16[] convert(%reduce.1374)
  %add.7232 = bf16[] add(%add.7231, %convert.4398)
  %convert.4399 = f32[512,8,128]{0,2,1} convert(%multiply.6913)
  %reduce.1375 = f32[] reduce(%convert.4399, %constant.3956), dimensions={0,1,2}, to_apply=%region_1533.41376
  %all-reduce.522 = f32[] all-reduce(%reduce.1375), channel_id=1613, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1533.41376.clone
  %convert.4400 = bf16[] convert(%all-reduce.522)
  %add.7233 = bf16[] add(%add.7232, %convert.4400)
  %convert.4401 = f32[32,128,512]{1,0,2} convert(%multiply.6921)
  %reduce.1376 = f32[] reduce(%convert.4401, %constant.3956), dimensions={0,1,2}, to_apply=%region_1534.41385
  %all-reduce.523 = f32[] all-reduce(%reduce.1376), channel_id=1614, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1534.41385.clone
  %convert.4402 = bf16[] convert(%all-reduce.523)
  %add.7234 = bf16[] add(%add.7233, %convert.4402)
  %convert.4403 = f32[512,32,128]{0,2,1} convert(%multiply.6929)
  %reduce.1377 = f32[] reduce(%convert.4403, %constant.3956), dimensions={0,1,2}, to_apply=%region_1535.41394
  %all-reduce.524 = f32[] all-reduce(%reduce.1377), channel_id=1615, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1535.41394.clone
  %convert.4404 = bf16[] convert(%all-reduce.524)
  %add.7235 = bf16[] add(%add.7234, %convert.4404)
  %convert.4405 = f32[512,8,128]{0,2,1} convert(%multiply.6937)
  %reduce.1378 = f32[] reduce(%convert.4405, %constant.3956), dimensions={0,1,2}, to_apply=%region_1536.41403
  %all-reduce.525 = f32[] all-reduce(%reduce.1378), channel_id=1616, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1536.41403.clone
  %convert.4406 = bf16[] convert(%all-reduce.525)
  %add.7237 = bf16[] add(%add.7235, %convert.4406)
  %convert.4407 = f32[512,8]{0,1} convert(%multiply.6946)
  %reduce.1379 = f32[] reduce(%convert.4407, %constant.3956), dimensions={0,1}, to_apply=%region_1537.41412
  %all-reduce.526 = f32[] all-reduce(%reduce.1379), channel_id=1617, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1537.41412.clone
  %convert.4408 = bf16[] convert(%all-reduce.526)
  %add.7238 = bf16[] add(%add.7237, %convert.4408)
  %convert.4409 = f32[1,4096,14336]{2,1,0} convert(%multiply.6956)
  %reduce.1380 = f32[] reduce(%convert.4409, %constant.3956), dimensions={0,1,2}, to_apply=%region_1538.41421
  %all-reduce.527 = f32[] all-reduce(%reduce.1380), channel_id=1618, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1538.41421.clone
  %convert.4410 = bf16[] convert(%all-reduce.527)
  %add.7239 = bf16[] add(%add.7238, %convert.4410)
  %convert.4411 = f32[1,4096,14336]{2,1,0} convert(%multiply.6966)
  %reduce.1381 = f32[] reduce(%convert.4411, %constant.3956), dimensions={0,1,2}, to_apply=%region_1539.41430
  %all-reduce.528 = f32[] all-reduce(%reduce.1381), channel_id=1619, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1539.41430.clone
  %convert.4412 = bf16[] convert(%all-reduce.528)
  %add.7240 = bf16[] add(%add.7239, %convert.4412)
  %convert.4413 = f32[1,14336,4096]{2,1,0} convert(%multiply.6974)
  %reduce.1382 = f32[] reduce(%convert.4413, %constant.3956), dimensions={0,1,2}, to_apply=%region_1540.41439
  %all-reduce.529 = f32[] all-reduce(%reduce.1382), channel_id=1620, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1540.41439.clone
  %convert.4415 = bf16[] convert(%all-reduce.529)
  %add.7241 = bf16[] add(%add.7240, %convert.4415)
  %convert.4416 = f32[4096]{0} convert(%multiply.6983)
  %reduce.1383 = f32[] reduce(%convert.4416, %constant.3956), dimensions={0}, to_apply=%region_1541.41448
  %convert.4417 = bf16[] convert(%reduce.1383)
  %add.7242 = bf16[] add(%add.7241, %convert.4417)
  %convert.4418 = f32[4096]{0} convert(%multiply.6992)
  %reduce.1384 = f32[] reduce(%convert.4418, %constant.3956), dimensions={0}, to_apply=%region_1542.41457
  %convert.4419 = bf16[] convert(%reduce.1384)
  %add.7243 = bf16[] add(%add.7242, %convert.4419)
  %convert.4420 = f32[512,8,128]{0,2,1} convert(%multiply.7000)
  %reduce.1385 = f32[] reduce(%convert.4420, %constant.3956), dimensions={0,1,2}, to_apply=%region_1543.41466
  %all-reduce.530 = f32[] all-reduce(%reduce.1385), channel_id=1621, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1543.41466.clone
  %convert.4421 = bf16[] convert(%all-reduce.530)
  %add.7244 = bf16[] add(%add.7243, %convert.4421)
  %convert.4422 = f32[32,128,512]{1,0,2} convert(%multiply.7009)
  %reduce.1386 = f32[] reduce(%convert.4422, %constant.3956), dimensions={0,1,2}, to_apply=%region_1544.41475
  %all-reduce.531 = f32[] all-reduce(%reduce.1386), channel_id=1622, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1544.41475.clone
  %convert.4423 = bf16[] convert(%all-reduce.531)
  %add.7245 = bf16[] add(%add.7244, %convert.4423)
  %convert.4424 = f32[512,32,128]{0,2,1} convert(%multiply.7018)
  %reduce.1387 = f32[] reduce(%convert.4424, %constant.3956), dimensions={0,1,2}, to_apply=%region_1545.41484
  %all-reduce.532 = f32[] all-reduce(%reduce.1387), channel_id=1623, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1545.41484.clone
  %convert.4425 = bf16[] convert(%all-reduce.532)
  %add.7246 = bf16[] add(%add.7245, %convert.4425)
  %convert.4426 = f32[512,8,128]{0,2,1} convert(%multiply.7027)
  %reduce.1388 = f32[] reduce(%convert.4426, %constant.3956), dimensions={0,1,2}, to_apply=%region_1546.41493
  %all-reduce.533 = f32[] all-reduce(%reduce.1388), channel_id=1624, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1546.41493.clone
  %convert.4427 = bf16[] convert(%all-reduce.533)
  %add.7247 = bf16[] add(%add.7246, %convert.4427)
  %convert.4428 = f32[512,8]{0,1} convert(%multiply.7035)
  %reduce.1389 = f32[] reduce(%convert.4428, %constant.3956), dimensions={0,1}, to_apply=%region_1547.41502
  %all-reduce.534 = f32[] all-reduce(%reduce.1389), channel_id=1625, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1547.41502.clone
  %convert.4430 = bf16[] convert(%all-reduce.534)
  %add.7248 = bf16[] add(%add.7247, %convert.4430)
  %convert.4431 = f32[1,4096,14336]{2,1,0} convert(%multiply.7044)
  %reduce.1390 = f32[] reduce(%convert.4431, %constant.3956), dimensions={0,1,2}, to_apply=%region_1548.41511
  %all-reduce.535 = f32[] all-reduce(%reduce.1390), channel_id=1626, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1548.41511.clone
  %convert.4432 = bf16[] convert(%all-reduce.535)
  %add.7249 = bf16[] add(%add.7248, %convert.4432)
  %convert.4433 = f32[1,4096,14336]{2,1,0} convert(%multiply.7055)
  %reduce.1391 = f32[] reduce(%convert.4433, %constant.3956), dimensions={0,1,2}, to_apply=%region_1549.41520
  %all-reduce.536 = f32[] all-reduce(%reduce.1391), channel_id=1627, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1549.41520.clone
  %convert.4434 = bf16[] convert(%all-reduce.536)
  %add.7251 = bf16[] add(%add.7249, %convert.4434)
  %convert.4435 = f32[1,14336,4096]{2,1,0} convert(%multiply.7064)
  %reduce.1392 = f32[] reduce(%convert.4435, %constant.3956), dimensions={0,1,2}, to_apply=%region_1550.41529
  %all-reduce.537 = f32[] all-reduce(%reduce.1392), channel_id=1628, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1550.41529.clone
  %convert.4436 = bf16[] convert(%all-reduce.537)
  %add.7252 = bf16[] add(%add.7251, %convert.4436)
  %convert.4437 = f32[4096]{0} convert(%multiply.7072)
  %reduce.1393 = f32[] reduce(%convert.4437, %constant.3956), dimensions={0}, to_apply=%region_1551.41538
  %convert.4438 = bf16[] convert(%reduce.1393)
  %add.7253 = bf16[] add(%add.7252, %convert.4438)
  %convert.4439 = f32[4096]{0} convert(%multiply.7080)
  %reduce.1394 = f32[] reduce(%convert.4439, %constant.3956), dimensions={0}, to_apply=%region_1552.41547
  %convert.4440 = bf16[] convert(%reduce.1394)
  %add.7254 = bf16[] add(%add.7253, %convert.4440)
  %convert.4442 = f32[512,8,128]{0,2,1} convert(%multiply.7091)
  %reduce.1395 = f32[] reduce(%convert.4442, %constant.3956), dimensions={0,1,2}, to_apply=%region_1553.41556
  %all-reduce.538 = f32[] all-reduce(%reduce.1395), channel_id=1629, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1553.41556.clone
  %convert.4443 = bf16[] convert(%all-reduce.538)
  %add.7255 = bf16[] add(%add.7254, %convert.4443)
  %convert.4444 = f32[32,128,512]{1,0,2} convert(%multiply.7100)
  %reduce.1396 = f32[] reduce(%convert.4444, %constant.3956), dimensions={0,1,2}, to_apply=%region_1554.41565
  %all-reduce.539 = f32[] all-reduce(%reduce.1396), channel_id=1630, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1554.41565.clone
  %convert.4445 = bf16[] convert(%all-reduce.539)
  %add.7256 = bf16[] add(%add.7255, %convert.4445)
  %convert.4446 = f32[512,32,128]{0,2,1} convert(%multiply.7108)
  %reduce.1397 = f32[] reduce(%convert.4446, %constant.3956), dimensions={0,1,2}, to_apply=%region_1555.41574
  %all-reduce.540 = f32[] all-reduce(%reduce.1397), channel_id=1631, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1555.41574.clone
  %convert.4447 = bf16[] convert(%all-reduce.540)
  %add.7257 = bf16[] add(%add.7256, %convert.4447)
  %convert.4448 = f32[512,8,128]{0,2,1} convert(%multiply.7116)
  %reduce.1398 = f32[] reduce(%convert.4448, %constant.3956), dimensions={0,1,2}, to_apply=%region_1556.41583
  %all-reduce.541 = f32[] all-reduce(%reduce.1398), channel_id=1632, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1556.41583.clone
  %convert.4449 = bf16[] convert(%all-reduce.541)
  %add.7258 = bf16[] add(%add.7257, %convert.4449)
  %convert.4450 = f32[512,8]{0,1} convert(%multiply.7124)
  %reduce.1399 = f32[] reduce(%convert.4450, %constant.3956), dimensions={0,1}, to_apply=%region_1557.41592
  %all-reduce.542 = f32[] all-reduce(%reduce.1399), channel_id=1633, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1557.41592.clone
  %convert.4451 = bf16[] convert(%all-reduce.542)
  %add.7260 = bf16[] add(%add.7258, %convert.4451)
  %convert.4452 = f32[1,4096,14336]{2,1,0} convert(%multiply.7132)
  %reduce.1400 = f32[] reduce(%convert.4452, %constant.3956), dimensions={0,1,2}, to_apply=%region_1558.41601
  %all-reduce.543 = f32[] all-reduce(%reduce.1400), channel_id=1634, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1558.41601.clone
  %convert.4453 = bf16[] convert(%all-reduce.543)
  %add.7261 = bf16[] add(%add.7260, %convert.4453)
  %convert.4454 = f32[1,4096,14336]{2,1,0} convert(%multiply.7140)
  %reduce.1401 = f32[] reduce(%convert.4454, %constant.3956), dimensions={0,1,2}, to_apply=%region_1559.41610
  %all-reduce.544 = f32[] all-reduce(%reduce.1401), channel_id=1635, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1559.41610.clone
  %convert.4455 = bf16[] convert(%all-reduce.544)
  %add.7262 = bf16[] add(%add.7261, %convert.4455)
  %convert.4456 = f32[1,14336,4096]{2,1,0} convert(%multiply.7148)
  %reduce.1402 = f32[] reduce(%convert.4456, %constant.3956), dimensions={0,1,2}, to_apply=%region_1560.41619
  %all-reduce.545 = f32[] all-reduce(%reduce.1402), channel_id=1636, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1560.41619.clone
  %convert.4457 = bf16[] convert(%all-reduce.545)
  %add.7263 = bf16[] add(%add.7262, %convert.4457)
  %convert.4458 = f32[4096]{0} convert(%multiply.7157)
  %reduce.1403 = f32[] reduce(%convert.4458, %constant.3956), dimensions={0}, to_apply=%region_1561.41628
  %convert.4459 = bf16[] convert(%reduce.1403)
  %add.7264 = bf16[] add(%add.7263, %convert.4459)
  %convert.4460 = f32[4096]{0} convert(%multiply.7166)
  %reduce.1404 = f32[] reduce(%convert.4460, %constant.3956), dimensions={0}, to_apply=%region_1562.41637
  %convert.4461 = bf16[] convert(%reduce.1404)
  %add.7265 = bf16[] add(%add.7264, %convert.4461)
  %convert.4462 = f32[512,8,128]{0,2,1} convert(%multiply.7175)
  %reduce.1405 = f32[] reduce(%convert.4462, %constant.3956), dimensions={0,1,2}, to_apply=%region_1563.41646
  %all-reduce.546 = f32[] all-reduce(%reduce.1405), channel_id=1637, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1563.41646.clone
  %convert.4463 = bf16[] convert(%all-reduce.546)
  %add.7266 = bf16[] add(%add.7265, %convert.4463)
  %convert.4465 = f32[32,128,512]{1,0,2} convert(%multiply.7183)
  %reduce.1406 = f32[] reduce(%convert.4465, %constant.3956), dimensions={0,1,2}, to_apply=%region_1564.41655
  %all-reduce.547 = f32[] all-reduce(%reduce.1406), channel_id=1638, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1564.41655.clone
  %convert.4466 = bf16[] convert(%all-reduce.547)
  %add.7267 = bf16[] add(%add.7266, %convert.4466)
  %convert.4467 = f32[512,32,128]{0,2,1} convert(%multiply.7191)
  %reduce.1407 = f32[] reduce(%convert.4467, %constant.3956), dimensions={0,1,2}, to_apply=%region_1565.41664
  %all-reduce.548 = f32[] all-reduce(%reduce.1407), channel_id=1639, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1565.41664.clone
  %convert.4468 = bf16[] convert(%all-reduce.548)
  %add.7268 = bf16[] add(%add.7267, %convert.4468)
  %convert.4469 = f32[512,8,128]{0,2,1} convert(%multiply.7199)
  %reduce.1408 = f32[] reduce(%convert.4469, %constant.3956), dimensions={0,1,2}, to_apply=%region_1566.41673
  %all-reduce.549 = f32[] all-reduce(%reduce.1408), channel_id=1640, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1566.41673.clone
  %convert.4470 = bf16[] convert(%all-reduce.549)
  %add.7269 = bf16[] add(%add.7268, %convert.4470)
  %convert.4471 = f32[512,8]{0,1} convert(%multiply.7207)
  %reduce.1409 = f32[] reduce(%convert.4471, %constant.3956), dimensions={0,1}, to_apply=%region_1567.41682
  %all-reduce.550 = f32[] all-reduce(%reduce.1409), channel_id=1641, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1567.41682.clone
  %convert.4472 = bf16[] convert(%all-reduce.550)
  %add.7270 = bf16[] add(%add.7269, %convert.4472)
  %convert.4473 = f32[1,4096,14336]{2,1,0} convert(%multiply.7215)
  %reduce.1410 = f32[] reduce(%convert.4473, %constant.3956), dimensions={0,1,2}, to_apply=%region_1568.41691
  %all-reduce.551 = f32[] all-reduce(%reduce.1410), channel_id=1642, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1568.41691.clone
  %convert.4474 = bf16[] convert(%all-reduce.551)
  %add.7271 = bf16[] add(%add.7270, %convert.4474)
  %convert.4475 = f32[1,4096,14336]{2,1,0} convert(%multiply.7223)
  %reduce.1411 = f32[] reduce(%convert.4475, %constant.3956), dimensions={0,1,2}, to_apply=%region_1569.41700
  %all-reduce.552 = f32[] all-reduce(%reduce.1411), channel_id=1643, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1569.41700.clone
  %convert.4476 = bf16[] convert(%all-reduce.552)
  %add.7272 = bf16[] add(%add.7271, %convert.4476)
  %convert.4477 = f32[1,14336,4096]{2,1,0} convert(%multiply.7231)
  %reduce.1412 = f32[] reduce(%convert.4477, %constant.3956), dimensions={0,1,2}, to_apply=%region_1570.41709
  %all-reduce.553 = f32[] all-reduce(%reduce.1412), channel_id=1644, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1570.41709.clone
  %convert.4478 = bf16[] convert(%all-reduce.553)
  %add.7273 = bf16[] add(%add.7272, %convert.4478)
  %convert.4479 = f32[4096]{0} convert(%multiply.7239)
  %reduce.1413 = f32[] reduce(%convert.4479, %constant.3956), dimensions={0}, to_apply=%region_1571.41718
  %convert.4480 = bf16[] convert(%reduce.1413)
  %add.7274 = bf16[] add(%add.7273, %convert.4480)
  %convert.4481 = f32[4096]{0} convert(%multiply.7248)
  %reduce.1414 = f32[] reduce(%convert.4481, %constant.3956), dimensions={0}, to_apply=%region_1572.41727
  %convert.4482 = bf16[] convert(%reduce.1414)
  %add.7275 = bf16[] add(%add.7274, %convert.4482)
  %convert.4483 = f32[512,8,128]{0,2,1} convert(%multiply.7258)
  %reduce.1415 = f32[] reduce(%convert.4483, %constant.3956), dimensions={0,1,2}, to_apply=%region_1573.41736
  %all-reduce.554 = f32[] all-reduce(%reduce.1415), channel_id=1645, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1573.41736.clone
  %convert.4484 = bf16[] convert(%all-reduce.554)
  %add.7276 = bf16[] add(%add.7275, %convert.4484)
  %convert.4485 = f32[32,128,512]{1,0,2} convert(%multiply.7267)
  %reduce.1416 = f32[] reduce(%convert.4485, %constant.3956), dimensions={0,1,2}, to_apply=%region_1574.41745
  %all-reduce.555 = f32[] all-reduce(%reduce.1416), channel_id=1646, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1574.41745.clone
  %convert.4486 = bf16[] convert(%all-reduce.555)
  %add.7277 = bf16[] add(%add.7276, %convert.4486)
  %convert.4487 = f32[512,32,128]{0,2,1} convert(%multiply.7276)
  %reduce.1417 = f32[] reduce(%convert.4487, %constant.3956), dimensions={0,1,2}, to_apply=%region_1575.41754
  %all-reduce.556 = f32[] all-reduce(%reduce.1417), channel_id=1647, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1575.41754.clone
  %convert.4488 = bf16[] convert(%all-reduce.556)
  %add.7278 = bf16[] add(%add.7277, %convert.4488)
  %convert.4489 = f32[512,8,128]{0,2,1} convert(%multiply.7284)
  %reduce.1418 = f32[] reduce(%convert.4489, %constant.3956), dimensions={0,1,2}, to_apply=%region_1576.41763
  %all-reduce.557 = f32[] all-reduce(%reduce.1418), channel_id=1648, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1576.41763.clone
  %convert.4490 = bf16[] convert(%all-reduce.557)
  %add.7279 = bf16[] add(%add.7278, %convert.4490)
  %convert.4491 = f32[512,8]{0,1} convert(%multiply.7293)
  %reduce.1419 = f32[] reduce(%convert.4491, %constant.3956), dimensions={0,1}, to_apply=%region_1577.41772
  %all-reduce.558 = f32[] all-reduce(%reduce.1419), channel_id=1649, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1577.41772.clone
  %convert.4492 = bf16[] convert(%all-reduce.558)
  %add.7280 = bf16[] add(%add.7279, %convert.4492)
  %convert.4493 = f32[1,4096,14336]{2,1,0} convert(%multiply.7302)
  %reduce.1420 = f32[] reduce(%convert.4493, %constant.3956), dimensions={0,1,2}, to_apply=%region_1578.41781
  %all-reduce.559 = f32[] all-reduce(%reduce.1420), channel_id=1650, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1578.41781.clone
  %convert.4494 = bf16[] convert(%all-reduce.559)
  %add.7281 = bf16[] add(%add.7280, %convert.4494)
  %convert.4495 = f32[1,4096,14336]{2,1,0} convert(%multiply.7311)
  %reduce.1421 = f32[] reduce(%convert.4495, %constant.3956), dimensions={0,1,2}, to_apply=%region_1579.41790
  %all-reduce.560 = f32[] all-reduce(%reduce.1421), channel_id=1651, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1579.41790.clone
  %convert.4496 = bf16[] convert(%all-reduce.560)
  %add.7282 = bf16[] add(%add.7281, %convert.4496)
  %convert.4497 = f32[1,14336,4096]{2,1,0} convert(%multiply.7320)
  %reduce.1422 = f32[] reduce(%convert.4497, %constant.3956), dimensions={0,1,2}, to_apply=%region_1580.41799
  %all-reduce.561 = f32[] all-reduce(%reduce.1422), channel_id=1652, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1580.41799.clone
  %convert.4498 = bf16[] convert(%all-reduce.561)
  %add.7283 = bf16[] add(%add.7282, %convert.4498)
  %convert.4499 = f32[4096]{0} convert(%multiply.7329)
  %reduce.1423 = f32[] reduce(%convert.4499, %constant.3956), dimensions={0}, to_apply=%region_1581.41808
  %convert.4500 = bf16[] convert(%reduce.1423)
  %add.7284 = bf16[] add(%add.7283, %convert.4500)
  %convert.4501 = f32[4096]{0} convert(%multiply.7337)
  %reduce.1424 = f32[] reduce(%convert.4501, %constant.3956), dimensions={0}, to_apply=%region_1582.41817
  %convert.4502 = bf16[] convert(%reduce.1424)
  %add.7285 = bf16[] add(%add.7284, %convert.4502)
  %convert.4503 = f32[512,8,128]{0,2,1} convert(%multiply.7346)
  %reduce.1425 = f32[] reduce(%convert.4503, %constant.3956), dimensions={0,1,2}, to_apply=%region_1583.41826
  %all-reduce.562 = f32[] all-reduce(%reduce.1425), channel_id=1653, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1583.41826.clone
  %convert.4504 = bf16[] convert(%all-reduce.562)
  %add.7286 = bf16[] add(%add.7285, %convert.4504)
  %convert.4505 = f32[32,128,512]{1,0,2} convert(%multiply.7356)
  %reduce.1426 = f32[] reduce(%convert.4505, %constant.3956), dimensions={0,1,2}, to_apply=%region_1584.41835
  %all-reduce.563 = f32[] all-reduce(%reduce.1426), channel_id=1654, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1584.41835.clone
  %convert.4506 = bf16[] convert(%all-reduce.563)
  %add.7287 = bf16[] add(%add.7286, %convert.4506)
  %convert.4507 = f32[512,32,128]{0,2,1} convert(%multiply.7366)
  %reduce.1427 = f32[] reduce(%convert.4507, %constant.3956), dimensions={0,1,2}, to_apply=%region_1585.41844
  %all-reduce.564 = f32[] all-reduce(%reduce.1427), channel_id=1655, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1585.41844.clone
  %convert.4508 = bf16[] convert(%all-reduce.564)
  %add.7288 = bf16[] add(%add.7287, %convert.4508)
  %convert.4509 = f32[512,8,128]{0,2,1} convert(%multiply.7374)
  %reduce.1428 = f32[] reduce(%convert.4509, %constant.3956), dimensions={0,1,2}, to_apply=%region_1586.41853
  %all-reduce.565 = f32[] all-reduce(%reduce.1428), channel_id=1656, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1586.41853.clone
  %convert.4511 = bf16[] convert(%all-reduce.565)
  %add.7289 = bf16[] add(%add.7288, %convert.4511)
  %convert.4512 = f32[512,8]{0,1} convert(%multiply.7382)
  %reduce.1429 = f32[] reduce(%convert.4512, %constant.3956), dimensions={0,1}, to_apply=%region_1587.41862
  %all-reduce.566 = f32[] all-reduce(%reduce.1429), channel_id=1657, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1587.41862.clone
  %convert.4513 = bf16[] convert(%all-reduce.566)
  %add.7290 = bf16[] add(%add.7289, %convert.4513)
  %convert.4514 = f32[1,4096,14336]{2,1,0} convert(%multiply.7392)
  %reduce.1430 = f32[] reduce(%convert.4514, %constant.3956), dimensions={0,1,2}, to_apply=%region_1588.41871
  %all-reduce.567 = f32[] all-reduce(%reduce.1430), channel_id=1658, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1588.41871.clone
  %convert.4515 = bf16[] convert(%all-reduce.567)
  %add.7292 = bf16[] add(%add.7290, %convert.4515)
  %convert.4516 = f32[1,4096,14336]{2,1,0} convert(%multiply.7402)
  %reduce.1431 = f32[] reduce(%convert.4516, %constant.3956), dimensions={0,1,2}, to_apply=%region_1589.41880
  %all-reduce.568 = f32[] all-reduce(%reduce.1431), channel_id=1659, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1589.41880.clone
  %convert.4518 = bf16[] convert(%all-reduce.568)
  %add.7293 = bf16[] add(%add.7292, %convert.4518)
  %convert.4519 = f32[1,14336,4096]{2,1,0} convert(%multiply.7410)
  %reduce.1432 = f32[] reduce(%convert.4519, %constant.3956), dimensions={0,1,2}, to_apply=%region_1590.41889
  %all-reduce.569 = f32[] all-reduce(%reduce.1432), channel_id=1660, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1590.41889.clone
  %convert.4520 = bf16[] convert(%all-reduce.569)
  %add.7294 = bf16[] add(%add.7293, %convert.4520)
  %convert.4521 = f32[4096]{0} convert(%multiply.7418)
  %reduce.1433 = f32[] reduce(%convert.4521, %constant.3956), dimensions={0}, to_apply=%region_1591.41898
  %convert.4522 = bf16[] convert(%reduce.1433)
  %add.7295 = bf16[] add(%add.7294, %convert.4522)
  %convert.4523 = f32[4096]{0} convert(%multiply.7426)
  %reduce.1434 = f32[] reduce(%convert.4523, %constant.3956), dimensions={0}, to_apply=%region_1592.41907
  %convert.4524 = bf16[] convert(%reduce.1434)
  %add.7296 = bf16[] add(%add.7295, %convert.4524)
  %convert.4525 = f32[512,8,128]{0,2,1} convert(%multiply.7434)
  %reduce.1435 = f32[] reduce(%convert.4525, %constant.3956), dimensions={0,1,2}, to_apply=%region_1593.41916
  %all-reduce.570 = f32[] all-reduce(%reduce.1435), channel_id=1661, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1593.41916.clone
  %convert.4526 = bf16[] convert(%all-reduce.570)
  %add.7297 = bf16[] add(%add.7296, %convert.4526)
  %convert.4527 = f32[32,128,512]{1,0,2} convert(%multiply.7442)
  %reduce.1436 = f32[] reduce(%convert.4527, %constant.3956), dimensions={0,1,2}, to_apply=%region_1594.41925
  %all-reduce.571 = f32[] all-reduce(%reduce.1436), channel_id=1662, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1594.41925.clone
  %convert.4528 = bf16[] convert(%all-reduce.571)
  %add.7299 = bf16[] add(%add.7297, %convert.4528)
  %convert.4530 = f32[512,32,128]{0,2,1} convert(%multiply.7450)
  %reduce.1437 = f32[] reduce(%convert.4530, %constant.3956), dimensions={0,1,2}, to_apply=%region_1595.41934
  %all-reduce.572 = f32[] all-reduce(%reduce.1437), channel_id=1663, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1595.41934.clone
  %convert.4531 = bf16[] convert(%all-reduce.572)
  %add.7300 = bf16[] add(%add.7299, %convert.4531)
  %convert.4532 = f32[512,8,128]{0,2,1} convert(%multiply.7459)
  %reduce.1438 = f32[] reduce(%convert.4532, %constant.3956), dimensions={0,1,2}, to_apply=%region_1596.41943
  %all-reduce.573 = f32[] all-reduce(%reduce.1438), channel_id=1664, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1596.41943.clone
  %convert.4533 = bf16[] convert(%all-reduce.573)
  %add.7301 = bf16[] add(%add.7300, %convert.4533)
  %convert.4534 = f32[512,8]{0,1} convert(%multiply.7467)
  %reduce.1439 = f32[] reduce(%convert.4534, %constant.3956), dimensions={0,1}, to_apply=%region_1597.41952
  %all-reduce.574 = f32[] all-reduce(%reduce.1439), channel_id=1665, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1597.41952.clone
  %convert.4535 = bf16[] convert(%all-reduce.574)
  %add.7302 = bf16[] add(%add.7301, %convert.4535)
  %convert.4536 = f32[1,4096,14336]{2,1,0} convert(%multiply.7477)
  %reduce.1440 = f32[] reduce(%convert.4536, %constant.3956), dimensions={0,1,2}, to_apply=%region_1598.41961
  %all-reduce.575 = f32[] all-reduce(%reduce.1440), channel_id=1666, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1598.41961.clone
  %convert.4537 = bf16[] convert(%all-reduce.575)
  %add.7304 = bf16[] add(%add.7302, %convert.4537)
  %convert.4539 = f32[1,4096,14336]{2,1,0} convert(%multiply.7485)
  %reduce.1441 = f32[] reduce(%convert.4539, %constant.3956), dimensions={0,1,2}, to_apply=%region_1599.41970
  %all-reduce.576 = f32[] all-reduce(%reduce.1441), channel_id=1667, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1599.41970.clone
  %convert.4540 = bf16[] convert(%all-reduce.576)
  %add.7305 = bf16[] add(%add.7304, %convert.4540)
  %convert.4541 = f32[1,14336,4096]{2,1,0} convert(%multiply.7493)
  %reduce.1442 = f32[] reduce(%convert.4541, %constant.3956), dimensions={0,1,2}, to_apply=%region_1600.41979
  %all-reduce.577 = f32[] all-reduce(%reduce.1442), channel_id=1668, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1600.41979.clone
  %convert.4542 = bf16[] convert(%all-reduce.577)
  %add.7306 = bf16[] add(%add.7305, %convert.4542)
  %convert.4543 = f32[4096]{0} convert(%multiply.7501)
  %reduce.1443 = f32[] reduce(%convert.4543, %constant.3956), dimensions={0}, to_apply=%region_1601.41988
  %convert.4544 = bf16[] convert(%reduce.1443)
  %add.7307 = bf16[] add(%add.7306, %convert.4544)
  %convert.4545 = f32[4096]{0} convert(%multiply.7509)
  %reduce.1444 = f32[] reduce(%convert.4545, %constant.3956), dimensions={0}, to_apply=%region_1602.41997
  %convert.4546 = bf16[] convert(%reduce.1444)
  %add.7308 = bf16[] add(%add.7307, %convert.4546)
  %convert.4547 = f32[512,8,128]{0,2,1} convert(%multiply.7517)
  %reduce.1445 = f32[] reduce(%convert.4547, %constant.3956), dimensions={0,1,2}, to_apply=%region_1603.42006
  %all-reduce.578 = f32[] all-reduce(%reduce.1445), channel_id=1669, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1603.42006.clone
  %convert.4548 = bf16[] convert(%all-reduce.578)
  %add.7309 = bf16[] add(%add.7308, %convert.4548)
  %convert.4549 = f32[32,128,512]{1,0,2} convert(%multiply.7525)
  %reduce.1446 = f32[] reduce(%convert.4549, %constant.3956), dimensions={0,1,2}, to_apply=%region_1604.42015
  %all-reduce.579 = f32[] all-reduce(%reduce.1446), channel_id=1670, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1604.42015.clone
  %convert.4550 = bf16[] convert(%all-reduce.579)
  %add.7310 = bf16[] add(%add.7309, %convert.4550)
  %convert.4551 = f32[512,32,128]{0,2,1} convert(%multiply.7533)
  %reduce.1447 = f32[] reduce(%convert.4551, %constant.3956), dimensions={0,1,2}, to_apply=%region_1605.42024
  %all-reduce.580 = f32[] all-reduce(%reduce.1447), channel_id=1671, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1605.42024.clone
  %convert.4552 = bf16[] convert(%all-reduce.580)
  %add.7311 = bf16[] add(%add.7310, %convert.4552)
  %convert.4553 = f32[512,8,128]{0,2,1} convert(%multiply.7541)
  %reduce.1448 = f32[] reduce(%convert.4553, %constant.3956), dimensions={0,1,2}, to_apply=%region_1606.42033
  %all-reduce.581 = f32[] all-reduce(%reduce.1448), channel_id=1672, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1606.42033.clone
  %convert.4554 = bf16[] convert(%all-reduce.581)
  %add.7312 = bf16[] add(%add.7311, %convert.4554)
  %convert.4555 = f32[512,8]{0,1} convert(%multiply.7549)
  %reduce.1449 = f32[] reduce(%convert.4555, %constant.3956), dimensions={0,1}, to_apply=%region_1607.42042
  %all-reduce.582 = f32[] all-reduce(%reduce.1449), channel_id=1673, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1607.42042.clone
  %convert.4556 = bf16[] convert(%all-reduce.582)
  %add.7313 = bf16[] add(%add.7312, %convert.4556)
  %convert.4557 = f32[1,4096,14336]{2,1,0} convert(%multiply.7560)
  %reduce.1450 = f32[] reduce(%convert.4557, %constant.3956), dimensions={0,1,2}, to_apply=%region_1608.42051
  %all-reduce.583 = f32[] all-reduce(%reduce.1450), channel_id=1674, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1608.42051.clone
  %convert.4559 = bf16[] convert(%all-reduce.583)
  %add.7314 = bf16[] add(%add.7313, %convert.4559)
  %convert.4560 = f32[1,4096,14336]{2,1,0} convert(%multiply.7569)
  %reduce.1451 = f32[] reduce(%convert.4560, %constant.3956), dimensions={0,1,2}, to_apply=%region_1609.42060
  %all-reduce.584 = f32[] all-reduce(%reduce.1451), channel_id=1675, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1609.42060.clone
  %convert.4561 = bf16[] convert(%all-reduce.584)
  %add.7315 = bf16[] add(%add.7314, %convert.4561)
  %convert.4562 = f32[1,14336,4096]{2,1,0} convert(%multiply.7578)
  %reduce.1452 = f32[] reduce(%convert.4562, %constant.3956), dimensions={0,1,2}, to_apply=%region_1610.42069
  %all-reduce.585 = f32[] all-reduce(%reduce.1452), channel_id=1676, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1610.42069.clone
  %convert.4563 = bf16[] convert(%all-reduce.585)
  %add.7316 = bf16[] add(%add.7315, %convert.4563)
  %convert.4564 = f32[4096]{0} convert(%multiply.7586)
  %reduce.1453 = f32[] reduce(%convert.4564, %constant.3956), dimensions={0}, to_apply=%region_1611.42078
  %convert.4565 = bf16[] convert(%reduce.1453)
  %add.7317 = bf16[] add(%add.7316, %convert.4565)
  %convert.4566 = f32[4096]{0} convert(%multiply.7595)
  %reduce.1455 = f32[] reduce(%convert.4566, %constant.3956), dimensions={0}, to_apply=%region_1612.42087
  %convert.4567 = bf16[] convert(%reduce.1455)
  %add.7318 = bf16[] add(%add.7317, %convert.4567)
  %convert.4568 = f32[512,8,128]{0,2,1} convert(%multiply.7604)
  %reduce.1456 = f32[] reduce(%convert.4568, %constant.3956), dimensions={0,1,2}, to_apply=%region_1613.42096
  %all-reduce.586 = f32[] all-reduce(%reduce.1456), channel_id=1677, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1613.42096.clone
  %convert.4569 = bf16[] convert(%all-reduce.586)
  %add.7319 = bf16[] add(%add.7318, %convert.4569)
  %convert.4570 = f32[32,128,512]{1,0,2} convert(%multiply.7613)
  %reduce.1457 = f32[] reduce(%convert.4570, %constant.3956), dimensions={0,1,2}, to_apply=%region_1614.42105
  %all-reduce.587 = f32[] all-reduce(%reduce.1457), channel_id=1678, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1614.42105.clone
  %convert.4571 = bf16[] convert(%all-reduce.587)
  %add.7320 = bf16[] add(%add.7319, %convert.4571)
  %convert.4572 = f32[512,32,128]{0,2,1} convert(%multiply.7622)
  %reduce.1458 = f32[] reduce(%convert.4572, %constant.3956), dimensions={0,1,2}, to_apply=%region_1615.42114
  %all-reduce.588 = f32[] all-reduce(%reduce.1458), channel_id=1679, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1615.42114.clone
  %convert.4574 = bf16[] convert(%all-reduce.588)
  %add.7321 = bf16[] add(%add.7320, %convert.4574)
  %convert.4575 = f32[512,8,128]{0,2,1} convert(%multiply.7631)
  %reduce.1459 = f32[] reduce(%convert.4575, %constant.3956), dimensions={0,1,2}, to_apply=%region_1616.42123
  %all-reduce.589 = f32[] all-reduce(%reduce.1459), channel_id=1680, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1616.42123.clone
  %convert.4576 = bf16[] convert(%all-reduce.589)
  %add.7322 = bf16[] add(%add.7321, %convert.4576)
  %convert.4577 = f32[512,8]{0,1} convert(%multiply.7639)
  %reduce.1460 = f32[] reduce(%convert.4577, %constant.3956), dimensions={0,1}, to_apply=%region_1617.42132
  %all-reduce.590 = f32[] all-reduce(%reduce.1460), channel_id=1681, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1617.42132.clone
  %convert.4578 = bf16[] convert(%all-reduce.590)
  %add.7323 = bf16[] add(%add.7322, %convert.4578)
  %convert.4579 = f32[1,4096,14336]{2,1,0} convert(%multiply.7647)
  %reduce.1461 = f32[] reduce(%convert.4579, %constant.3956), dimensions={0,1,2}, to_apply=%region_1618.42141
  %all-reduce.591 = f32[] all-reduce(%reduce.1461), channel_id=1682, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1618.42141.clone
  %convert.4580 = bf16[] convert(%all-reduce.591)
  %add.7324 = bf16[] add(%add.7323, %convert.4580)
  %convert.4581 = f32[1,4096,14336]{2,1,0} convert(%multiply.7657)
  %reduce.1462 = f32[] reduce(%convert.4581, %constant.3956), dimensions={0,1,2}, to_apply=%region_1619.42150
  %all-reduce.592 = f32[] all-reduce(%reduce.1462), channel_id=1683, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1619.42150.clone
  %convert.4582 = bf16[] convert(%all-reduce.592)
  %add.7325 = bf16[] add(%add.7324, %convert.4582)
  %convert.4583 = f32[1,14336,4096]{2,1,0} convert(%multiply.7668)
  %reduce.1464 = f32[] reduce(%convert.4583, %constant.3956), dimensions={0,1,2}, to_apply=%region_1620.42159
  %all-reduce.593 = f32[] all-reduce(%reduce.1464), channel_id=1684, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1620.42159.clone
  %convert.4584 = bf16[] convert(%all-reduce.593)
  %add.7326 = bf16[] add(%add.7325, %convert.4584)
  %convert.4585 = f32[4096]{0} convert(%multiply.7676)
  %reduce.1465 = f32[] reduce(%convert.4585, %constant.3956), dimensions={0}, to_apply=%region_1621.42168
  %convert.4586 = bf16[] convert(%reduce.1465)
  %add.7327 = bf16[] add(%add.7326, %convert.4586)
  %convert.4587 = f32[4096]{0} convert(%multiply.7684)
  %reduce.1466 = f32[] reduce(%convert.4587, %constant.3956), dimensions={0}, to_apply=%region_1622.42177
  %convert.4589 = bf16[] convert(%reduce.1466)
  %add.7328 = bf16[] add(%add.7327, %convert.4589)
  %convert.4590 = f32[512,8,128]{0,2,1} convert(%multiply.7694)
  %reduce.1467 = f32[] reduce(%convert.4590, %constant.3956), dimensions={0,1,2}, to_apply=%region_1623.42186
  %all-reduce.594 = f32[] all-reduce(%reduce.1467), channel_id=1685, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1623.42186.clone
  %convert.4592 = bf16[] convert(%all-reduce.594)
  %add.7329 = bf16[] add(%add.7328, %convert.4592)
  %convert.4593 = f32[32,128,512]{1,0,2} convert(%multiply.7704)
  %reduce.1468 = f32[] reduce(%convert.4593, %constant.3956), dimensions={0,1,2}, to_apply=%region_1624.42195
  %all-reduce.595 = f32[] all-reduce(%reduce.1468), channel_id=1686, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1624.42195.clone
  %convert.4594 = bf16[] convert(%all-reduce.595)
  %add.7330 = bf16[] add(%add.7329, %convert.4594)
  %convert.4595 = f32[512,32,128]{0,2,1} convert(%multiply.7712)
  %reduce.1469 = f32[] reduce(%convert.4595, %constant.3956), dimensions={0,1,2}, to_apply=%region_1625.42204
  %all-reduce.596 = f32[] all-reduce(%reduce.1469), channel_id=1687, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1625.42204.clone
  %convert.4596 = bf16[] convert(%all-reduce.596)
  %add.7331 = bf16[] add(%add.7330, %convert.4596)
  %convert.4597 = f32[512,8,128]{0,2,1} convert(%multiply.7720)
  %reduce.1470 = f32[] reduce(%convert.4597, %constant.3956), dimensions={0,1,2}, to_apply=%region_1626.42213
  %all-reduce.597 = f32[] all-reduce(%reduce.1470), channel_id=1688, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1626.42213.clone
  %convert.4598 = bf16[] convert(%all-reduce.597)
  %add.7332 = bf16[] add(%add.7331, %convert.4598)
  %convert.4599 = f32[512,8]{0,1} convert(%multiply.7728)
  %reduce.1471 = f32[] reduce(%convert.4599, %constant.3956), dimensions={0,1}, to_apply=%region_1627.42222
  %all-reduce.598 = f32[] all-reduce(%reduce.1471), channel_id=1689, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1627.42222.clone
  %convert.4600 = bf16[] convert(%all-reduce.598)
  %add.7333 = bf16[] add(%add.7332, %convert.4600)
  %convert.4602 = f32[1,4096,14336]{2,1,0} convert(%multiply.7736)
  %reduce.1472 = f32[] reduce(%convert.4602, %constant.3956), dimensions={0,1,2}, to_apply=%region_1628.42231
  %all-reduce.599 = f32[] all-reduce(%reduce.1472), channel_id=1690, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1628.42231.clone
  %convert.4604 = bf16[] convert(%all-reduce.599)
  %add.7334 = bf16[] add(%add.7333, %convert.4604)
  %convert.4605 = f32[1,4096,14336]{2,1,0} convert(%multiply.7744)
  %reduce.1473 = f32[] reduce(%convert.4605, %constant.3956), dimensions={0,1,2}, to_apply=%region_1629.42240
  %all-reduce.600 = f32[] all-reduce(%reduce.1473), channel_id=1691, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1629.42240.clone
  %convert.4606 = bf16[] convert(%all-reduce.600)
  %add.7335 = bf16[] add(%add.7334, %convert.4606)
  %convert.4607 = f32[1,14336,4096]{2,1,0} convert(%multiply.7752)
  %reduce.1474 = f32[] reduce(%convert.4607, %constant.3956), dimensions={0,1,2}, to_apply=%region_1630.42249
  %all-reduce.601 = f32[] all-reduce(%reduce.1474), channel_id=1692, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1630.42249.clone
  %convert.4608 = bf16[] convert(%all-reduce.601)
  %add.7336 = bf16[] add(%add.7335, %convert.4608)
  %convert.4609 = f32[4096]{0} convert(%multiply.7761)
  %reduce.1475 = f32[] reduce(%convert.4609, %constant.3956), dimensions={0}, to_apply=%region_1631.42258
  %convert.4610 = bf16[] convert(%reduce.1475)
  %add.7337 = bf16[] add(%add.7336, %convert.4610)
  %convert.4611 = f32[4096]{0} convert(%multiply.7769)
  %reduce.1476 = f32[] reduce(%convert.4611, %constant.3956), dimensions={0}, to_apply=%region_1632.42267
  %convert.4612 = bf16[] convert(%reduce.1476)
  %add.7338 = bf16[] add(%add.7337, %convert.4612)
  %convert.4613 = f32[512,8,128]{0,2,1} convert(%multiply.7779)
  %reduce.1477 = f32[] reduce(%convert.4613, %constant.3956), dimensions={0,1,2}, to_apply=%region_1633.42276
  %all-reduce.602 = f32[] all-reduce(%reduce.1477), channel_id=1693, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1633.42276.clone
  %convert.4614 = bf16[] convert(%all-reduce.602)
  %add.7339 = bf16[] add(%add.7338, %convert.4614)
  %convert.4615 = f32[32,128,512]{1,0,2} convert(%multiply.7787)
  %reduce.1478 = f32[] reduce(%convert.4615, %constant.3956), dimensions={0,1,2}, to_apply=%region_1634.42285
  %all-reduce.603 = f32[] all-reduce(%reduce.1478), channel_id=1694, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1634.42285.clone
  %convert.4616 = bf16[] convert(%all-reduce.603)
  %add.7340 = bf16[] add(%add.7339, %convert.4616)
  %convert.4617 = f32[512,32,128]{0,2,1} convert(%multiply.7795)
  %reduce.1479 = f32[] reduce(%convert.4617, %constant.3956), dimensions={0,1,2}, to_apply=%region_1635.42294
  %all-reduce.604 = f32[] all-reduce(%reduce.1479), channel_id=1695, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1635.42294.clone
  %convert.4618 = bf16[] convert(%all-reduce.604)
  %add.7341 = bf16[] add(%add.7340, %convert.4618)
  %convert.4619 = f32[512,8,128]{0,2,1} convert(%multiply.7803)
  %reduce.1480 = f32[] reduce(%convert.4619, %constant.3956), dimensions={0,1,2}, to_apply=%region_1636.42303
  %all-reduce.605 = f32[] all-reduce(%reduce.1480), channel_id=1696, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1636.42303.clone
  %convert.4620 = bf16[] convert(%all-reduce.605)
  %add.7342 = bf16[] add(%add.7341, %convert.4620)
  %convert.4621 = f32[512,8]{0,1} convert(%multiply.7811)
  %reduce.1481 = f32[] reduce(%convert.4621, %constant.3956), dimensions={0,1}, to_apply=%region_1637.42312
  %all-reduce.606 = f32[] all-reduce(%reduce.1481), channel_id=1697, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1637.42312.clone
  %convert.4622 = bf16[] convert(%all-reduce.606)
  %add.7343 = bf16[] add(%add.7342, %convert.4622)
  %convert.4623 = f32[1,4096,14336]{2,1,0} convert(%multiply.7819)
  %reduce.1482 = f32[] reduce(%convert.4623, %constant.3956), dimensions={0,1,2}, to_apply=%region_1638.42321
  %all-reduce.607 = f32[] all-reduce(%reduce.1482), channel_id=1698, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1638.42321.clone
  %convert.4624 = bf16[] convert(%all-reduce.607)
  %add.7344 = bf16[] add(%add.7343, %convert.4624)
  %convert.4625 = f32[1,4096,14336]{2,1,0} convert(%multiply.7827)
  %reduce.1483 = f32[] reduce(%convert.4625, %constant.3956), dimensions={0,1,2}, to_apply=%region_1639.42330
  %all-reduce.608 = f32[] all-reduce(%reduce.1483), channel_id=1699, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1639.42330.clone
  %convert.4626 = bf16[] convert(%all-reduce.608)
  %add.7345 = bf16[] add(%add.7344, %convert.4626)
  %convert.4627 = f32[1,14336,4096]{2,1,0} convert(%multiply.7835)
  %reduce.1484 = f32[] reduce(%convert.4627, %constant.3956), dimensions={0,1,2}, to_apply=%region_1640.42339
  %all-reduce.609 = f32[] all-reduce(%reduce.1484), channel_id=1700, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1640.42339.clone
  %convert.4629 = bf16[] convert(%all-reduce.609)
  %add.7346 = bf16[] add(%add.7345, %convert.4629)
  %convert.4630 = f32[4096]{0} convert(%multiply.7843)
  %reduce.1485 = f32[] reduce(%convert.4630, %constant.3956), dimensions={0}, to_apply=%region_1641.42348
  %convert.4632 = bf16[] convert(%reduce.1485)
  %add.7347 = bf16[] add(%add.7346, %convert.4632)
  %convert.4633 = f32[4096]{0} convert(%multiply.7851)
  %reduce.1486 = f32[] reduce(%convert.4633, %constant.3956), dimensions={0}, to_apply=%region_1642.42357
  %convert.4634 = bf16[] convert(%reduce.1486)
  %add.7348 = bf16[] add(%add.7347, %convert.4634)
  %convert.4635 = f32[512,8,128]{0,2,1} convert(%multiply.7860)
  %reduce.1487 = f32[] reduce(%convert.4635, %constant.3956), dimensions={0,1,2}, to_apply=%region_1643.42366
  %all-reduce.610 = f32[] all-reduce(%reduce.1487), channel_id=1701, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1643.42366.clone
  %convert.4636 = bf16[] convert(%all-reduce.610)
  %add.7349 = bf16[] add(%add.7348, %convert.4636)
  %convert.4637 = f32[32,128,512]{1,0,2} convert(%multiply.7871)
  %reduce.1488 = f32[] reduce(%convert.4637, %constant.3956), dimensions={0,1,2}, to_apply=%region_1644.42375
  %all-reduce.611 = f32[] all-reduce(%reduce.1488), channel_id=1702, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1644.42375.clone
  %convert.4638 = bf16[] convert(%all-reduce.611)
  %add.7350 = bf16[] add(%add.7349, %convert.4638)
  %convert.4639 = f32[512,32,128]{0,2,1} convert(%multiply.7880)
  %reduce.1489 = f32[] reduce(%convert.4639, %constant.3956), dimensions={0,1,2}, to_apply=%region_1645.42384
  %all-reduce.612 = f32[] all-reduce(%reduce.1489), channel_id=1703, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1645.42384.clone
  %convert.4640 = bf16[] convert(%all-reduce.612)
  %add.7351 = bf16[] add(%add.7350, %convert.4640)
  %convert.4642 = f32[512,8,128]{0,2,1} convert(%multiply.7888)
  %reduce.1490 = f32[] reduce(%convert.4642, %constant.3956), dimensions={0,1,2}, to_apply=%region_1646.42393
  %all-reduce.613 = f32[] all-reduce(%reduce.1490), channel_id=1704, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1646.42393.clone
  %convert.4644 = bf16[] convert(%all-reduce.613)
  %add.7352 = bf16[] add(%add.7351, %convert.4644)
  %convert.4645 = f32[512,8]{0,1} convert(%multiply.7897)
  %reduce.1491 = f32[] reduce(%convert.4645, %constant.3956), dimensions={0,1}, to_apply=%region_1647.42402
  %all-reduce.614 = f32[] all-reduce(%reduce.1491), channel_id=1705, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1647.42402.clone
  %convert.4646 = bf16[] convert(%all-reduce.614)
  %add.7353 = bf16[] add(%add.7352, %convert.4646)
  %convert.4647 = f32[1,4096,14336]{2,1,0} convert(%multiply.7906)
  %reduce.1492 = f32[] reduce(%convert.4647, %constant.3956), dimensions={0,1,2}, to_apply=%region_1648.42411
  %all-reduce.615 = f32[] all-reduce(%reduce.1492), channel_id=1706, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1648.42411.clone
  %convert.4648 = bf16[] convert(%all-reduce.615)
  %add.7354 = bf16[] add(%add.7353, %convert.4648)
  %convert.4649 = f32[1,4096,14336]{2,1,0} convert(%multiply.7914)
  %reduce.1493 = f32[] reduce(%convert.4649, %constant.3956), dimensions={0,1,2}, to_apply=%region_1649.42420
  %all-reduce.616 = f32[] all-reduce(%reduce.1493), channel_id=1707, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1649.42420.clone
  %convert.4650 = bf16[] convert(%all-reduce.616)
  %add.7355 = bf16[] add(%add.7354, %convert.4650)
  %convert.4651 = f32[1,14336,4096]{2,1,0} convert(%multiply.7924)
  %reduce.1494 = f32[] reduce(%convert.4651, %constant.3956), dimensions={0,1,2}, to_apply=%region_1650.42429
  %all-reduce.617 = f32[] all-reduce(%reduce.1494), channel_id=1708, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1650.42429.clone
  %convert.4652 = bf16[] convert(%all-reduce.617)
  %add.7356 = bf16[] add(%add.7355, %convert.4652)
  %convert.4653 = f32[4096]{0} convert(%multiply.7933)
  %reduce.1495 = f32[] reduce(%convert.4653, %constant.3956), dimensions={0}, to_apply=%region_1651.42438
  %convert.4654 = bf16[] convert(%reduce.1495)
  %add.7357 = bf16[] add(%add.7356, %convert.4654)
  %convert.4655 = f32[4096]{0} convert(%multiply.7941)
  %reduce.1496 = f32[] reduce(%convert.4655, %constant.3956), dimensions={0}, to_apply=%region_1652.42447
  %convert.4656 = bf16[] convert(%reduce.1496)
  %add.7358 = bf16[] add(%add.7357, %convert.4656)
  %convert.4657 = f32[512,8,128]{0,2,1} convert(%multiply.7949)
  %reduce.1497 = f32[] reduce(%convert.4657, %constant.3956), dimensions={0,1,2}, to_apply=%region_1653.42456
  %all-reduce.618 = f32[] all-reduce(%reduce.1497), channel_id=1709, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1653.42456.clone
  %convert.4658 = bf16[] convert(%all-reduce.618)
  %add.7360 = bf16[] add(%add.7358, %convert.4658)
  %convert.4659 = f32[32,128,512]{1,0,2} convert(%multiply.7959)
  %reduce.1498 = f32[] reduce(%convert.4659, %constant.3956), dimensions={0,1,2}, to_apply=%region_1654.42465
  %all-reduce.619 = f32[] all-reduce(%reduce.1498), channel_id=1710, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1654.42465.clone
  %convert.4660 = bf16[] convert(%all-reduce.619)
  %add.7361 = bf16[] add(%add.7360, %convert.4660)
  %convert.4661 = f32[512,32,128]{0,2,1} convert(%multiply.7969)
  %reduce.1499 = f32[] reduce(%convert.4661, %constant.3956), dimensions={0,1,2}, to_apply=%region_1655.42474
  %all-reduce.620 = f32[] all-reduce(%reduce.1499), channel_id=1711, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1655.42474.clone
  %convert.4662 = bf16[] convert(%all-reduce.620)
  %add.7362 = bf16[] add(%add.7361, %convert.4662)
  %convert.4663 = f32[512,8,128]{0,2,1} convert(%multiply.7978)
  %reduce.1500 = f32[] reduce(%convert.4663, %constant.3956), dimensions={0,1,2}, to_apply=%region_1656.42483
  %all-reduce.621 = f32[] all-reduce(%reduce.1500), channel_id=1712, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1656.42483.clone
  %convert.4664 = bf16[] convert(%all-reduce.621)
  %add.7363 = bf16[] add(%add.7362, %convert.4664)
  %convert.4665 = f32[512,8]{0,1} convert(%multiply.7986)
  %reduce.1501 = f32[] reduce(%convert.4665, %constant.3956), dimensions={0,1}, to_apply=%region_1657.42492
  %all-reduce.622 = f32[] all-reduce(%reduce.1501), channel_id=1713, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1657.42492.clone
  %convert.4666 = bf16[] convert(%all-reduce.622)
  %add.7364 = bf16[] add(%add.7363, %convert.4666)
  %convert.4667 = f32[1,4096,14336]{2,1,0} convert(%multiply.7995)
  %reduce.1502 = f32[] reduce(%convert.4667, %constant.3956), dimensions={0,1,2}, to_apply=%region_1658.42501
  %all-reduce.623 = f32[] all-reduce(%reduce.1502), channel_id=1714, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1658.42501.clone
  %convert.4668 = bf16[] convert(%all-reduce.623)
  %add.7365 = bf16[] add(%add.7364, %convert.4668)
  %convert.4669 = f32[1,4096,14336]{2,1,0} convert(%multiply.8005)
  %reduce.1503 = f32[] reduce(%convert.4669, %constant.3956), dimensions={0,1,2}, to_apply=%region_1659.42510
  %all-reduce.624 = f32[] all-reduce(%reduce.1503), channel_id=1715, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1659.42510.clone
  %convert.4670 = bf16[] convert(%all-reduce.624)
  %add.7366 = bf16[] add(%add.7365, %convert.4670)
  %convert.4671 = f32[1,14336,4096]{2,1,0} convert(%multiply.8014)
  %reduce.1504 = f32[] reduce(%convert.4671, %constant.3956), dimensions={0,1,2}, to_apply=%region_1660.42519
  %all-reduce.625 = f32[] all-reduce(%reduce.1504), channel_id=1716, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1660.42519.clone
  %convert.4672 = bf16[] convert(%all-reduce.625)
  %add.7367 = bf16[] add(%add.7366, %convert.4672)
  %convert.4673 = f32[4096]{0} convert(%multiply.8022)
  %reduce.1505 = f32[] reduce(%convert.4673, %constant.3956), dimensions={0}, to_apply=%region_1661.42528
  %convert.4674 = bf16[] convert(%reduce.1505)
  %add.7368 = bf16[] add(%add.7367, %convert.4674)
  %convert.4675 = f32[4096]{0} convert(%multiply.8030)
  %reduce.1506 = f32[] reduce(%convert.4675, %constant.3956), dimensions={0}, to_apply=%region_1662.42537
  %convert.4676 = bf16[] convert(%reduce.1506)
  %add.7369 = bf16[] add(%add.7368, %convert.4676)
  %convert.4677 = f32[512,8,128]{0,2,1} convert(%multiply.8038)
  %reduce.1507 = f32[] reduce(%convert.4677, %constant.3956), dimensions={0,1,2}, to_apply=%region_1663.42546
  %all-reduce.626 = f32[] all-reduce(%reduce.1507), channel_id=1717, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1663.42546.clone
  %convert.4678 = bf16[] convert(%all-reduce.626)
  %add.7370 = bf16[] add(%add.7369, %convert.4678)
  %convert.4679 = f32[32,128,512]{1,0,2} convert(%multiply.8046)
  %reduce.1508 = f32[] reduce(%convert.4679, %constant.3956), dimensions={0,1,2}, to_apply=%region_1664.42555
  %all-reduce.627 = f32[] all-reduce(%reduce.1508), channel_id=1718, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1664.42555.clone
  %convert.4680 = bf16[] convert(%all-reduce.627)
  %add.7371 = bf16[] add(%add.7370, %convert.4680)
  %convert.4681 = f32[512,32,128]{0,2,1} convert(%multiply.8054)
  %reduce.1509 = f32[] reduce(%convert.4681, %constant.3956), dimensions={0,1,2}, to_apply=%region_1665.42564
  %all-reduce.628 = f32[] all-reduce(%reduce.1509), channel_id=1719, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1665.42564.clone
  %convert.4682 = bf16[] convert(%all-reduce.628)
  %add.7372 = bf16[] add(%add.7371, %convert.4682)
  %convert.4683 = f32[512,8,128]{0,2,1} convert(%multiply.8062)
  %reduce.1510 = f32[] reduce(%convert.4683, %constant.3956), dimensions={0,1,2}, to_apply=%region_1666.42573
  %all-reduce.629 = f32[] all-reduce(%reduce.1510), channel_id=1720, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1666.42573.clone
  %convert.4684 = bf16[] convert(%all-reduce.629)
  %add.7373 = bf16[] add(%add.7372, %convert.4684)
  %convert.4685 = f32[512,8]{0,1} convert(%multiply.8071)
  %reduce.1511 = f32[] reduce(%convert.4685, %constant.3956), dimensions={0,1}, to_apply=%region_1667.42582
  %all-reduce.630 = f32[] all-reduce(%reduce.1511), channel_id=1721, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1667.42582.clone
  %convert.4686 = bf16[] convert(%all-reduce.630)
  %add.7374 = bf16[] add(%add.7373, %convert.4686)
  %convert.4687 = f32[1,4096,14336]{2,1,0} convert(%multiply.8080)
  %reduce.1512 = f32[] reduce(%convert.4687, %constant.3956), dimensions={0,1,2}, to_apply=%region_1668.42591
  %all-reduce.631 = f32[] all-reduce(%reduce.1512), channel_id=1722, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1668.42591.clone
  %convert.4688 = bf16[] convert(%all-reduce.631)
  %add.7375 = bf16[] add(%add.7374, %convert.4688)
  %convert.4689 = f32[1,4096,14336]{2,1,0} convert(%multiply.8089)
  %reduce.1513 = f32[] reduce(%convert.4689, %constant.3956), dimensions={0,1,2}, to_apply=%region_1669.42600
  %all-reduce.632 = f32[] all-reduce(%reduce.1513), channel_id=1723, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1669.42600.clone
  %convert.4690 = bf16[] convert(%all-reduce.632)
  %add.7376 = bf16[] add(%add.7375, %convert.4690)
  %convert.4692 = f32[1,14336,4096]{2,1,0} convert(%multiply.8097)
  %reduce.1514 = f32[] reduce(%convert.4692, %constant.3956), dimensions={0,1,2}, to_apply=%region_1670.42609
  %all-reduce.633 = f32[] all-reduce(%reduce.1514), channel_id=1724, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1670.42609.clone
  %convert.4693 = bf16[] convert(%all-reduce.633)
  %add.7377 = bf16[] add(%add.7376, %convert.4693)
  %convert.4694 = f32[4096]{0} convert(%multiply.8105)
  %reduce.1515 = f32[] reduce(%convert.4694, %constant.3956), dimensions={0}, to_apply=%region_1671.42618
  %convert.4695 = bf16[] convert(%reduce.1515)
  %add.7378 = bf16[] add(%add.7377, %convert.4695)
  %convert.4696 = f32[4096]{0} convert(%multiply.8113)
  %reduce.1516 = f32[] reduce(%convert.4696, %constant.3956), dimensions={0}, to_apply=%region_1672.42627
  %convert.4697 = bf16[] convert(%reduce.1516)
  %add.7379 = bf16[] add(%add.7378, %convert.4697)
  %convert.4698 = f32[512,8,128]{0,2,1} convert(%multiply.8121)
  %reduce.1517 = f32[] reduce(%convert.4698, %constant.3956), dimensions={0,1,2}, to_apply=%region_1673.42636
  %all-reduce.634 = f32[] all-reduce(%reduce.1517), channel_id=1725, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1673.42636.clone
  %convert.4700 = bf16[] convert(%all-reduce.634)
  %add.7380 = bf16[] add(%add.7379, %convert.4700)
  %convert.4701 = f32[32,128,512]{1,0,2} convert(%multiply.8129)
  %reduce.1518 = f32[] reduce(%convert.4701, %constant.3956), dimensions={0,1,2}, to_apply=%region_1674.42645
  %all-reduce.635 = f32[] all-reduce(%reduce.1518), channel_id=1726, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1674.42645.clone
  %convert.4702 = bf16[] convert(%all-reduce.635)
  %add.7381 = bf16[] add(%add.7380, %convert.4702)
  %convert.4703 = f32[512,32,128]{0,2,1} convert(%multiply.8137)
  %reduce.1519 = f32[] reduce(%convert.4703, %constant.3956), dimensions={0,1,2}, to_apply=%region_1675.42654
  %all-reduce.636 = f32[] all-reduce(%reduce.1519), channel_id=1727, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1675.42654.clone
  %convert.4704 = bf16[] convert(%all-reduce.636)
  %add.7382 = bf16[] add(%add.7381, %convert.4704)
  %convert.4705 = f32[512,8,128]{0,2,1} convert(%multiply.8145)
  %reduce.1520 = f32[] reduce(%convert.4705, %constant.3956), dimensions={0,1,2}, to_apply=%region_1676.42663
  %all-reduce.637 = f32[] all-reduce(%reduce.1520), channel_id=1728, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1676.42663.clone
  %convert.4706 = bf16[] convert(%all-reduce.637)
  %add.7383 = bf16[] add(%add.7382, %convert.4706)
  %convert.4707 = f32[512,8]{0,1} convert(%multiply.8153)
  %reduce.1521 = f32[] reduce(%convert.4707, %constant.3956), dimensions={0,1}, to_apply=%region_1677.42672
  %all-reduce.638 = f32[] all-reduce(%reduce.1521), channel_id=1729, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1677.42672.clone
  %convert.4708 = bf16[] convert(%all-reduce.638)
  %add.7384 = bf16[] add(%add.7383, %convert.4708)
  %convert.4709 = f32[1,4096,14336]{2,1,0} convert(%multiply.8162)
  %reduce.1522 = f32[] reduce(%convert.4709, %constant.3956), dimensions={0,1,2}, to_apply=%region_1678.42681
  %all-reduce.639 = f32[] all-reduce(%reduce.1522), channel_id=1730, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1678.42681.clone
  %convert.4710 = bf16[] convert(%all-reduce.639)
  %add.7385 = bf16[] add(%add.7384, %convert.4710)
  %convert.4711 = f32[1,4096,14336]{2,1,0} convert(%multiply.8172)
  %reduce.1523 = f32[] reduce(%convert.4711, %constant.3956), dimensions={0,1,2}, to_apply=%region_1679.42690
  %all-reduce.640 = f32[] all-reduce(%reduce.1523), channel_id=1731, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1679.42690.clone
  %convert.4712 = bf16[] convert(%all-reduce.640)
  %add.7386 = bf16[] add(%add.7385, %convert.4712)
  %convert.4713 = f32[1,14336,4096]{2,1,0} convert(%multiply.8182)
  %reduce.1525 = f32[] reduce(%convert.4713, %constant.3956), dimensions={0,1,2}, to_apply=%region_1680.42699
  %all-reduce.641 = f32[] all-reduce(%reduce.1525), channel_id=1732, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1680.42699.clone
  %convert.4714 = bf16[] convert(%all-reduce.641)
  %add.7387 = bf16[] add(%add.7386, %convert.4714)
  %convert.4715 = f32[4096]{0} convert(%multiply.8190)
  %reduce.1526 = f32[] reduce(%convert.4715, %constant.3956), dimensions={0}, to_apply=%region_1681.42708
  %convert.4716 = bf16[] convert(%reduce.1526)
  %add.7388 = bf16[] add(%add.7387, %convert.4716)
  %convert.4717 = f32[4096]{0} convert(%multiply.8199)
  %reduce.1527 = f32[] reduce(%convert.4717, %constant.3956), dimensions={0}, to_apply=%region_1682.42717
  %convert.4719 = bf16[] convert(%reduce.1527)
  %add.7389 = bf16[] add(%add.7388, %convert.4719)
  %convert.4720 = f32[512,8,128]{0,2,1} convert(%multiply.8208)
  %reduce.1528 = f32[] reduce(%convert.4720, %constant.3956), dimensions={0,1,2}, to_apply=%region_1683.42726
  %all-reduce.642 = f32[] all-reduce(%reduce.1528), channel_id=1733, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1683.42726.clone
  %convert.4721 = bf16[] convert(%all-reduce.642)
  %add.7390 = bf16[] add(%add.7389, %convert.4721)
  %convert.4722 = f32[32,128,512]{1,0,2} convert(%multiply.8216)
  %reduce.1529 = f32[] reduce(%convert.4722, %constant.3956), dimensions={0,1,2}, to_apply=%region_1684.42735
  %all-reduce.643 = f32[] all-reduce(%reduce.1529), channel_id=1734, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1684.42735.clone
  %convert.4723 = bf16[] convert(%all-reduce.643)
  %add.7391 = bf16[] add(%add.7390, %convert.4723)
  %convert.4724 = f32[512,32,128]{0,2,1} convert(%multiply.8225)
  %reduce.1530 = f32[] reduce(%convert.4724, %constant.3956), dimensions={0,1,2}, to_apply=%region_1685.42744
  %all-reduce.644 = f32[] all-reduce(%reduce.1530), channel_id=1735, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1685.42744.clone
  %convert.4725 = bf16[] convert(%all-reduce.644)
  %add.7392 = bf16[] add(%add.7391, %convert.4725)
  %convert.4726 = f32[512,8,128]{0,2,1} convert(%multiply.8234)
  %reduce.1531 = f32[] reduce(%convert.4726, %constant.3956), dimensions={0,1,2}, to_apply=%region_1686.42753
  %all-reduce.645 = f32[] all-reduce(%reduce.1531), channel_id=1736, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1686.42753.clone
  %convert.4727 = bf16[] convert(%all-reduce.645)
  %add.7393 = bf16[] add(%add.7392, %convert.4727)
  %convert.4728 = f32[512,8]{0,1} convert(%multiply.8243)
  %reduce.1532 = f32[] reduce(%convert.4728, %constant.3956), dimensions={0,1}, to_apply=%region_1687.42762
  %all-reduce.646 = f32[] all-reduce(%reduce.1532), channel_id=1737, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1687.42762.clone
  %convert.4729 = bf16[] convert(%all-reduce.646)
  %add.7394 = bf16[] add(%add.7393, %convert.4729)
  %convert.4730 = f32[1,4096,14336]{2,1,0} convert(%multiply.8251)
  %reduce.1533 = f32[] reduce(%convert.4730, %constant.3956), dimensions={0,1,2}, to_apply=%region_1688.42771
  %all-reduce.647 = f32[] all-reduce(%reduce.1533), channel_id=1738, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1688.42771.clone
  %convert.4731 = bf16[] convert(%all-reduce.647)
  %add.7395 = bf16[] add(%add.7394, %convert.4731)
  %convert.4732 = f32[1,4096,14336]{2,1,0} convert(%multiply.8260)
  %reduce.1534 = f32[] reduce(%convert.4732, %constant.3956), dimensions={0,1,2}, to_apply=%region_1689.42780
  %all-reduce.648 = f32[] all-reduce(%reduce.1534), channel_id=1739, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1689.42780.clone
  %convert.4734 = bf16[] convert(%all-reduce.648)
  %add.7396 = bf16[] add(%add.7395, %convert.4734)
  %convert.4735 = f32[1,14336,4096]{2,1,0} convert(%multiply.8271)
  %reduce.1535 = f32[] reduce(%convert.4735, %constant.3956), dimensions={0,1,2}, to_apply=%region_1690.42789
  %all-reduce.649 = f32[] all-reduce(%reduce.1535), channel_id=1740, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1690.42789.clone
  %convert.4736 = bf16[] convert(%all-reduce.649)
  %add.7397 = bf16[] add(%add.7396, %convert.4736)
  %convert.4737 = f32[4096]{0} convert(%multiply.8280)
  %reduce.1536 = f32[] reduce(%convert.4737, %constant.3956), dimensions={0}, to_apply=%region_1691.42798
  %convert.4738 = bf16[] convert(%reduce.1536)
  %add.7398 = bf16[] add(%add.7397, %convert.4738)
  %convert.4739 = f32[4096]{0} convert(%multiply.8288)
  %reduce.1537 = f32[] reduce(%convert.4739, %constant.3956), dimensions={0}, to_apply=%region_1692.42807
  %convert.4740 = bf16[] convert(%reduce.1537)
  %add.7400 = bf16[] add(%add.7398, %convert.4740)
  %convert.4741 = f32[512,8,128]{0,2,1} convert(%multiply.8296)
  %reduce.1538 = f32[] reduce(%convert.4741, %constant.3956), dimensions={0,1,2}, to_apply=%region_1693.42816
  %all-reduce.650 = f32[] all-reduce(%reduce.1538), channel_id=1741, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1693.42816.clone
  %convert.4742 = bf16[] convert(%all-reduce.650)
  %add.7401 = bf16[] add(%add.7400, %convert.4742)
  %convert.4743 = f32[32,128,512]{1,0,2} convert(%multiply.8307)
  %reduce.1539 = f32[] reduce(%convert.4743, %constant.3956), dimensions={0,1,2}, to_apply=%region_1694.42825
  %all-reduce.651 = f32[] all-reduce(%reduce.1539), channel_id=1742, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1694.42825.clone
  %convert.4744 = bf16[] convert(%all-reduce.651)
  %add.7402 = bf16[] add(%add.7401, %convert.4744)
  %convert.4746 = f32[512,32,128]{0,2,1} convert(%multiply.8316)
  %reduce.1540 = f32[] reduce(%convert.4746, %constant.3956), dimensions={0,1,2}, to_apply=%region_1695.42834
  %all-reduce.652 = f32[] all-reduce(%reduce.1540), channel_id=1743, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1695.42834.clone
  %convert.4747 = bf16[] convert(%all-reduce.652)
  %add.7403 = bf16[] add(%add.7402, %convert.4747)
  %convert.4748 = f32[512,8,128]{0,2,1} convert(%multiply.8324)
  %reduce.1541 = f32[] reduce(%convert.4748, %constant.3956), dimensions={0,1,2}, to_apply=%region_1696.42843
  %all-reduce.653 = f32[] all-reduce(%reduce.1541), channel_id=1744, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1696.42843.clone
  %convert.4749 = bf16[] convert(%all-reduce.653)
  %add.7404 = bf16[] add(%add.7403, %convert.4749)
  %convert.4750 = f32[512,8]{0,1} convert(%multiply.8332)
  %reduce.1542 = f32[] reduce(%convert.4750, %constant.3956), dimensions={0,1}, to_apply=%region_1697.42852
  %all-reduce.654 = f32[] all-reduce(%reduce.1542), channel_id=1745, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1697.42852.clone
  %convert.4751 = bf16[] convert(%all-reduce.654)
  %add.7405 = bf16[] add(%add.7404, %convert.4751)
  %convert.4752 = f32[1,4096,14336]{2,1,0} convert(%multiply.8340)
  %reduce.1543 = f32[] reduce(%convert.4752, %constant.3956), dimensions={0,1,2}, to_apply=%region_1698.42861
  %all-reduce.655 = f32[] all-reduce(%reduce.1543), channel_id=1746, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1698.42861.clone
  %convert.4753 = bf16[] convert(%all-reduce.655)
  %add.7406 = bf16[] add(%add.7405, %convert.4753)
  %convert.4754 = f32[1,4096,14336]{2,1,0} convert(%multiply.8348)
  %reduce.1544 = f32[] reduce(%convert.4754, %constant.3956), dimensions={0,1,2}, to_apply=%region_1699.42870
  %all-reduce.656 = f32[] all-reduce(%reduce.1544), channel_id=1747, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1699.42870.clone
  %convert.4755 = bf16[] convert(%all-reduce.656)
  %add.7407 = bf16[] add(%add.7406, %convert.4755)
  %convert.4756 = f32[1,14336,4096]{2,1,0} convert(%multiply.8356)
  %reduce.1545 = f32[] reduce(%convert.4756, %constant.3956), dimensions={0,1,2}, to_apply=%region_1700.42879
  %all-reduce.657 = f32[] all-reduce(%reduce.1545), channel_id=1748, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1700.42879.clone
  %convert.4757 = bf16[] convert(%all-reduce.657)
  %add.7408 = bf16[] add(%add.7407, %convert.4757)
  %convert.4758 = f32[4096]{0} convert(%multiply.8364)
  %reduce.1546 = f32[] reduce(%convert.4758, %constant.3956), dimensions={0}, to_apply=%region_1701.42888
  %convert.4759 = bf16[] convert(%reduce.1546)
  %add.7409 = bf16[] add(%add.7408, %convert.4759)
  %convert.4760 = f32[4096]{0} convert(%multiply.8373)
  %reduce.1547 = f32[] reduce(%convert.4760, %constant.3956), dimensions={0}, to_apply=%region_1702.42897
  %convert.4761 = bf16[] convert(%reduce.1547)
  %add.7410 = bf16[] add(%add.7409, %convert.4761)
  %convert.4762 = f32[512,8,128]{0,2,1} convert(%multiply.8382)
  %reduce.1548 = f32[] reduce(%convert.4762, %constant.3956), dimensions={0,1,2}, to_apply=%region_1703.42906
  %all-reduce.658 = f32[] all-reduce(%reduce.1548), channel_id=1749, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1703.42906.clone
  %convert.4763 = bf16[] convert(%all-reduce.658)
  %add.7411 = bf16[] add(%add.7410, %convert.4763)
  %convert.4764 = f32[32,128,512]{1,0,2} convert(%multiply.8391)
  %reduce.1549 = f32[] reduce(%convert.4764, %constant.3956), dimensions={0,1,2}, to_apply=%region_1704.42915
  %all-reduce.659 = f32[] all-reduce(%reduce.1549), channel_id=1750, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1704.42915.clone
  %convert.4765 = bf16[] convert(%all-reduce.659)
  %add.7412 = bf16[] add(%add.7411, %convert.4765)
  %convert.4766 = f32[512,32,128]{0,2,1} convert(%multiply.8399)
  %reduce.1550 = f32[] reduce(%convert.4766, %constant.3956), dimensions={0,1,2}, to_apply=%region_1705.42924
  %all-reduce.660 = f32[] all-reduce(%reduce.1550), channel_id=1751, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1705.42924.clone
  %convert.4767 = bf16[] convert(%all-reduce.660)
  %add.7413 = bf16[] add(%add.7412, %convert.4767)
  %convert.4769 = f32[512,8,128]{0,2,1} convert(%multiply.8407)
  %reduce.1551 = f32[] reduce(%convert.4769, %constant.3956), dimensions={0,1,2}, to_apply=%region_1706.42933
  %all-reduce.661 = f32[] all-reduce(%reduce.1551), channel_id=1752, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1706.42933.clone
  %convert.4770 = bf16[] convert(%all-reduce.661)
  %add.7414 = bf16[] add(%add.7413, %convert.4770)
  %convert.4771 = f32[512,8]{0,1} convert(%multiply.8415)
  %reduce.1552 = f32[] reduce(%convert.4771, %constant.3956), dimensions={0,1}, to_apply=%region_1707.42942
  %all-reduce.662 = f32[] all-reduce(%reduce.1552), channel_id=1753, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1707.42942.clone
  %convert.4772 = bf16[] convert(%all-reduce.662)
  %add.7415 = bf16[] add(%add.7414, %convert.4772)
  %convert.4773 = f32[1,4096,14336]{2,1,0} convert(%multiply.8423)
  %reduce.1553 = f32[] reduce(%convert.4773, %constant.3956), dimensions={0,1,2}, to_apply=%region_1708.42951
  %all-reduce.663 = f32[] all-reduce(%reduce.1553), channel_id=1754, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1708.42951.clone
  %convert.4774 = bf16[] convert(%all-reduce.663)
  %add.7416 = bf16[] add(%add.7415, %convert.4774)
  %convert.4775 = f32[1,4096,14336]{2,1,0} convert(%multiply.8431)
  %reduce.1554 = f32[] reduce(%convert.4775, %constant.3956), dimensions={0,1,2}, to_apply=%region_1709.42960
  %all-reduce.664 = f32[] all-reduce(%reduce.1554), channel_id=1755, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1709.42960.clone
  %convert.4776 = bf16[] convert(%all-reduce.664)
  %add.7417 = bf16[] add(%add.7416, %convert.4776)
  %convert.4777 = f32[1,14336,4096]{2,1,0} convert(%multiply.8439)
  %reduce.1555 = f32[] reduce(%convert.4777, %constant.3956), dimensions={0,1,2}, to_apply=%region_1710.42969
  %all-reduce.665 = f32[] all-reduce(%reduce.1555), channel_id=1756, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1710.42969.clone
  %convert.4778 = bf16[] convert(%all-reduce.665)
  %add.7418 = bf16[] add(%add.7417, %convert.4778)
  %convert.4779 = f32[4096]{0} convert(%multiply.8447)
  %reduce.1556 = f32[] reduce(%convert.4779, %constant.3956), dimensions={0}, to_apply=%region_1711.42978
  %convert.4780 = bf16[] convert(%reduce.1556)
  %add.7419 = bf16[] add(%add.7418, %convert.4780)
  %convert.4781 = f32[4096]{0} convert(%multiply.8455)
  %reduce.1557 = f32[] reduce(%convert.4781, %constant.3956), dimensions={0}, to_apply=%region_1712.42987
  %convert.4782 = bf16[] convert(%reduce.1557)
  %add.7420 = bf16[] add(%add.7419, %convert.4782)
  %convert.4783 = f32[512,8,128]{0,2,1} convert(%multiply.8464)
  %reduce.1558 = f32[] reduce(%convert.4783, %constant.3956), dimensions={0,1,2}, to_apply=%region_1713.42996
  %all-reduce.666 = f32[] all-reduce(%reduce.1558), channel_id=1757, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1713.42996.clone
  %convert.4784 = bf16[] convert(%all-reduce.666)
  %add.7421 = bf16[] add(%add.7420, %convert.4784)
  %convert.4785 = f32[32,128,512]{1,0,2} convert(%multiply.8474)
  %reduce.1559 = f32[] reduce(%convert.4785, %constant.3956), dimensions={0,1,2}, to_apply=%region_1714.43005
  %all-reduce.667 = f32[] all-reduce(%reduce.1559), channel_id=1758, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1714.43005.clone
  %convert.4786 = bf16[] convert(%all-reduce.667)
  %add.7422 = bf16[] add(%add.7421, %convert.4786)
  %convert.4787 = f32[512,32,128]{0,2,1} convert(%multiply.8483)
  %reduce.1560 = f32[] reduce(%convert.4787, %constant.3956), dimensions={0,1,2}, to_apply=%region_1715.43014
  %all-reduce.668 = f32[] all-reduce(%reduce.1560), channel_id=1759, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1715.43014.clone
  %convert.4788 = bf16[] convert(%all-reduce.668)
  %add.7423 = bf16[] add(%add.7422, %convert.4788)
  %convert.4789 = f32[512,8,128]{0,2,1} convert(%multiply.8492)
  %reduce.1561 = f32[] reduce(%convert.4789, %constant.3956), dimensions={0,1,2}, to_apply=%region_1716.43023
  %all-reduce.669 = f32[] all-reduce(%reduce.1561), channel_id=1760, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1716.43023.clone
  %convert.4790 = bf16[] convert(%all-reduce.669)
  %add.7424 = bf16[] add(%add.7423, %convert.4790)
  %convert.4791 = f32[512,8]{0,1} convert(%multiply.8500)
  %reduce.1562 = f32[] reduce(%convert.4791, %constant.3956), dimensions={0,1}, to_apply=%region_1717.43032
  %all-reduce.670 = f32[] all-reduce(%reduce.1562), channel_id=1761, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1717.43032.clone
  %convert.4792 = bf16[] convert(%all-reduce.670)
  %add.7425 = bf16[] add(%add.7424, %convert.4792)
  %convert.4793 = f32[1,4096,14336]{2,1,0} convert(%multiply.8509)
  %reduce.1563 = f32[] reduce(%convert.4793, %constant.3956), dimensions={0,1,2}, to_apply=%region_1718.43041
  %all-reduce.671 = f32[] all-reduce(%reduce.1563), channel_id=1762, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1718.43041.clone
  %convert.4794 = bf16[] convert(%all-reduce.671)
  %add.7426 = bf16[] add(%add.7425, %convert.4794)
  %convert.4795 = f32[1,4096,14336]{2,1,0} convert(%multiply.8518)
  %reduce.1564 = f32[] reduce(%convert.4795, %constant.3956), dimensions={0,1,2}, to_apply=%region_1719.43050
  %all-reduce.672 = f32[] all-reduce(%reduce.1564), channel_id=1763, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1719.43050.clone
  %convert.4796 = bf16[] convert(%all-reduce.672)
  %add.7427 = bf16[] add(%add.7426, %convert.4796)
  %convert.4797 = f32[1,14336,4096]{2,1,0} convert(%multiply.8527)
  %reduce.1565 = f32[] reduce(%convert.4797, %constant.3956), dimensions={0,1,2}, to_apply=%region_1720.43059
  %all-reduce.673 = f32[] all-reduce(%reduce.1565), channel_id=1764, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1720.43059.clone
  %convert.4798 = bf16[] convert(%all-reduce.673)
  %add.7428 = bf16[] add(%add.7427, %convert.4798)
  %convert.4799 = f32[4096]{0} convert(%multiply.8536)
  %reduce.1566 = f32[] reduce(%convert.4799, %constant.3956), dimensions={0}, to_apply=%region_1721.43068
  %convert.4800 = bf16[] convert(%reduce.1566)
  %add.7429 = bf16[] add(%add.7428, %convert.4800)
  %convert.4801 = f32[4096]{0} convert(%multiply.8545)
  %reduce.1567 = f32[] reduce(%convert.4801, %constant.3956), dimensions={0}, to_apply=%region_1722.43077
  %convert.4802 = bf16[] convert(%reduce.1567)
  %add.7431 = bf16[] add(%add.7429, %convert.4802)
  %convert.4803 = f32[512,8,128]{0,2,1} convert(%multiply.8553)
  %reduce.1568 = f32[] reduce(%convert.4803, %constant.3956), dimensions={0,1,2}, to_apply=%region_1723.43086
  %all-reduce.674 = f32[] all-reduce(%reduce.1568), channel_id=1765, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1723.43086.clone
  %convert.4804 = bf16[] convert(%all-reduce.674)
  %add.7432 = bf16[] add(%add.7431, %convert.4804)
  %convert.4805 = f32[32,128,512]{1,0,2} convert(%multiply.8562)
  %reduce.1569 = f32[] reduce(%convert.4805, %constant.3956), dimensions={0,1,2}, to_apply=%region_1724.43095
  %all-reduce.675 = f32[] all-reduce(%reduce.1569), channel_id=1766, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1724.43095.clone
  %convert.4806 = bf16[] convert(%all-reduce.675)
  %add.7433 = bf16[] add(%add.7432, %convert.4806)
  %convert.4807 = f32[512,32,128]{0,2,1} convert(%multiply.8572)
  %reduce.1570 = f32[] reduce(%convert.4807, %constant.3956), dimensions={0,1,2}, to_apply=%region_1725.43104
  %all-reduce.676 = f32[] all-reduce(%reduce.1570), channel_id=1767, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1725.43104.clone
  %convert.4808 = bf16[] convert(%all-reduce.676)
  %add.7434 = bf16[] add(%add.7433, %convert.4808)
  %convert.4809 = f32[512,8,128]{0,2,1} convert(%multiply.8582)
  %reduce.1571 = f32[] reduce(%convert.4809, %constant.3956), dimensions={0,1,2}, to_apply=%region_1726.43113
  %all-reduce.677 = f32[] all-reduce(%reduce.1571), channel_id=1768, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1726.43113.clone
  %convert.4810 = bf16[] convert(%all-reduce.677)
  %add.7435 = bf16[] add(%add.7434, %convert.4810)
  %convert.4811 = f32[512,8]{0,1} convert(%multiply.8590)
  %reduce.1572 = f32[] reduce(%convert.4811, %constant.3956), dimensions={0,1}, to_apply=%region_1727.43122
  %all-reduce.678 = f32[] all-reduce(%reduce.1572), channel_id=1769, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1727.43122.clone
  %convert.4812 = bf16[] convert(%all-reduce.678)
  %add.7436 = bf16[] add(%add.7435, %convert.4812)
  %convert.4813 = f32[1,4096,14336]{2,1,0} convert(%multiply.8598)
  %reduce.1573 = f32[] reduce(%convert.4813, %constant.3956), dimensions={0,1,2}, to_apply=%region_1728.43131
  %all-reduce.679 = f32[] all-reduce(%reduce.1573), channel_id=1770, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1728.43131.clone
  %convert.4815 = bf16[] convert(%all-reduce.679)
  %add.7437 = bf16[] add(%add.7436, %convert.4815)
  %convert.4816 = f32[1,4096,14336]{2,1,0} convert(%multiply.8608)
  %reduce.1574 = f32[] reduce(%convert.4816, %constant.3956), dimensions={0,1,2}, to_apply=%region_1729.43140
  %all-reduce.680 = f32[] all-reduce(%reduce.1574), channel_id=1771, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1729.43140.clone
  %convert.4817 = bf16[] convert(%all-reduce.680)
  %add.7439 = bf16[] add(%add.7437, %convert.4817)
  %convert.4818 = f32[1,14336,4096]{2,1,0} convert(%multiply.8618)
  %reduce.1575 = f32[] reduce(%convert.4818, %constant.3956), dimensions={0,1,2}, to_apply=%region_1730.43149
  %all-reduce.681 = f32[] all-reduce(%reduce.1575), channel_id=1772, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1730.43149.clone
  %convert.4819 = bf16[] convert(%all-reduce.681)
  %add.7440 = bf16[] add(%add.7439, %convert.4819)
  %convert.4820 = f32[4096]{0} convert(%multiply.8626)
  %reduce.1576 = f32[] reduce(%convert.4820, %constant.3956), dimensions={0}, to_apply=%region_1731.43158
  %convert.4822 = bf16[] convert(%reduce.1576)
  %add.7441 = bf16[] add(%add.7440, %convert.4822)
  %convert.4823 = f32[4096]{0} convert(%multiply.8634)
  %reduce.1577 = f32[] reduce(%convert.4823, %constant.3956), dimensions={0}, to_apply=%region_1732.43167
  %convert.4824 = bf16[] convert(%reduce.1577)
  %add.7442 = bf16[] add(%add.7441, %convert.4824)
  %convert.4825 = f32[512,8,128]{0,2,1} convert(%multiply.8642)
  %reduce.1578 = f32[] reduce(%convert.4825, %constant.3956), dimensions={0,1,2}, to_apply=%region_1733.43176
  %all-reduce.682 = f32[] all-reduce(%reduce.1578), channel_id=1773, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1733.43176.clone
  %convert.4826 = bf16[] convert(%all-reduce.682)
  %add.7443 = bf16[] add(%add.7442, %convert.4826)
  %convert.4827 = f32[32,128,512]{1,0,2} convert(%multiply.8650)
  %reduce.1579 = f32[] reduce(%convert.4827, %constant.3956), dimensions={0,1,2}, to_apply=%region_1734.43185
  %all-reduce.683 = f32[] all-reduce(%reduce.1579), channel_id=1774, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1734.43185.clone
  %convert.4828 = bf16[] convert(%all-reduce.683)
  %add.7444 = bf16[] add(%add.7443, %convert.4828)
  %convert.4829 = f32[512,32,128]{0,2,1} convert(%multiply.8658)
  %reduce.1580 = f32[] reduce(%convert.4829, %constant.3956), dimensions={0,1,2}, to_apply=%region_1735.43194
  %all-reduce.684 = f32[] all-reduce(%reduce.1580), channel_id=1775, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1735.43194.clone
  %convert.4830 = bf16[] convert(%all-reduce.684)
  %add.7445 = bf16[] add(%add.7444, %convert.4830)
  %convert.4831 = f32[512,8,128]{0,2,1} convert(%multiply.8666)
  %reduce.1581 = f32[] reduce(%convert.4831, %constant.3956), dimensions={0,1,2}, to_apply=%region_1736.43203
  %all-reduce.685 = f32[] all-reduce(%reduce.1581), channel_id=1776, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1736.43203.clone
  %convert.4832 = bf16[] convert(%all-reduce.685)
  %add.7446 = bf16[] add(%add.7445, %convert.4832)
  %convert.4834 = f32[512,8]{0,1} convert(%multiply.8675)
  %reduce.1582 = f32[] reduce(%convert.4834, %constant.3956), dimensions={0,1}, to_apply=%region_1737.43212
  %all-reduce.686 = f32[] all-reduce(%reduce.1582), channel_id=1777, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1737.43212.clone
  %convert.4835 = bf16[] convert(%all-reduce.686)
  %add.7447 = bf16[] add(%add.7446, %convert.4835)
  %convert.4836 = f32[1,4096,14336]{2,1,0} convert(%multiply.8683)
  %reduce.1583 = f32[] reduce(%convert.4836, %constant.3956), dimensions={0,1,2}, to_apply=%region_1738.43221
  %all-reduce.687 = f32[] all-reduce(%reduce.1583), channel_id=1778, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1738.43221.clone
  %convert.4837 = bf16[] convert(%all-reduce.687)
  %add.7448 = bf16[] add(%add.7447, %convert.4837)
  %convert.4838 = f32[1,4096,14336]{2,1,0} convert(%multiply.8693)
  %reduce.1584 = f32[] reduce(%convert.4838, %constant.3956), dimensions={0,1,2}, to_apply=%region_1739.43230
  %all-reduce.688 = f32[] all-reduce(%reduce.1584), channel_id=1779, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1739.43230.clone
  %convert.4839 = bf16[] convert(%all-reduce.688)
  %add.7449 = bf16[] add(%add.7448, %convert.4839)
  %convert.4840 = f32[1,14336,4096]{2,1,0} convert(%multiply.8701)
  %reduce.1585 = f32[] reduce(%convert.4840, %constant.3956), dimensions={0,1,2}, to_apply=%region_1740.43239
  %all-reduce.689 = f32[] all-reduce(%reduce.1585), channel_id=1780, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1740.43239.clone
  %convert.4841 = bf16[] convert(%all-reduce.689)
  %add.7450 = bf16[] add(%add.7449, %convert.4841)
  %convert.4843 = f32[4096]{0} convert(%multiply.8709)
  %reduce.1586 = f32[] reduce(%convert.4843, %constant.3956), dimensions={0}, to_apply=%region_1741.43248
  %convert.4844 = bf16[] convert(%reduce.1586)
  %add.7451 = bf16[] add(%add.7450, %convert.4844)
  %convert.4845 = f32[4096]{0} convert(%multiply.8717)
  %reduce.1587 = f32[] reduce(%convert.4845, %constant.3956), dimensions={0}, to_apply=%region_1742.43257
  %convert.4846 = bf16[] convert(%reduce.1587)
  %add.7452 = bf16[] add(%add.7451, %convert.4846)
  %convert.4847 = f32[512,8,128]{0,2,1} convert(%multiply.8725)
  %reduce.1588 = f32[] reduce(%convert.4847, %constant.3956), dimensions={0,1,2}, to_apply=%region_1743.43266
  %all-reduce.690 = f32[] all-reduce(%reduce.1588), channel_id=1781, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1743.43266.clone
  %convert.4848 = bf16[] convert(%all-reduce.690)
  %add.7454 = bf16[] add(%add.7452, %convert.4848)
  %convert.4849 = f32[32,128,512]{1,0,2} convert(%multiply.8733)
  %reduce.1589 = f32[] reduce(%convert.4849, %constant.3956), dimensions={0,1,2}, to_apply=%region_1744.43275
  %all-reduce.691 = f32[] all-reduce(%reduce.1589), channel_id=1782, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1744.43275.clone
  %convert.4850 = bf16[] convert(%all-reduce.691)
  %add.7455 = bf16[] add(%add.7454, %convert.4850)
  %convert.4851 = f32[512,32,128]{0,2,1} convert(%multiply.8741)
  %reduce.1590 = f32[] reduce(%convert.4851, %constant.3956), dimensions={0,1,2}, to_apply=%region_1745.43284
  %all-reduce.692 = f32[] all-reduce(%reduce.1590), channel_id=1783, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1745.43284.clone
  %convert.4852 = bf16[] convert(%all-reduce.692)
  %add.7456 = bf16[] add(%add.7455, %convert.4852)
  %convert.4853 = f32[512,8,128]{0,2,1} convert(%multiply.8749)
  %reduce.1591 = f32[] reduce(%convert.4853, %constant.3956), dimensions={0,1,2}, to_apply=%region_1746.43293
  %all-reduce.693 = f32[] all-reduce(%reduce.1591), channel_id=1784, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1746.43293.clone
  %convert.4854 = bf16[] convert(%all-reduce.693)
  %add.7457 = bf16[] add(%add.7456, %convert.4854)
  %convert.4855 = f32[512,8]{0,1} convert(%multiply.8757)
  %reduce.1592 = f32[] reduce(%convert.4855, %constant.3956), dimensions={0,1}, to_apply=%region_1747.43302
  %all-reduce.694 = f32[] all-reduce(%reduce.1592), channel_id=1785, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1747.43302.clone
  %convert.4856 = bf16[] convert(%all-reduce.694)
  %add.7459 = bf16[] add(%add.7457, %convert.4856)
  %convert.4857 = f32[1,4096,14336]{2,1,0} convert(%multiply.8765)
  %reduce.1593 = f32[] reduce(%convert.4857, %constant.3956), dimensions={0,1,2}, to_apply=%region_1748.43311
  %all-reduce.695 = f32[] all-reduce(%reduce.1593), channel_id=1786, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1748.43311.clone
  %convert.4858 = bf16[] convert(%all-reduce.695)
  %add.7460 = bf16[] add(%add.7459, %convert.4858)
  %convert.4859 = f32[1,4096,14336]{2,1,0} convert(%multiply.8776)
  %reduce.1594 = f32[] reduce(%convert.4859, %constant.3956), dimensions={0,1,2}, to_apply=%region_1749.43320
  %all-reduce.696 = f32[] all-reduce(%reduce.1594), channel_id=1787, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1749.43320.clone
  %convert.4860 = bf16[] convert(%all-reduce.696)
  %add.7461 = bf16[] add(%add.7460, %convert.4860)
  %convert.4861 = f32[1,14336,4096]{2,1,0} convert(%multiply.8785)
  %reduce.1595 = f32[] reduce(%convert.4861, %constant.3956), dimensions={0,1,2}, to_apply=%region_1750.43329
  %all-reduce.697 = f32[] all-reduce(%reduce.1595), channel_id=1788, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1750.43329.clone
  %convert.4863 = bf16[] convert(%all-reduce.697)
  %add.7462 = bf16[] add(%add.7461, %convert.4863)
  %convert.4864 = f32[4096]{0} convert(%multiply.8794)
  %reduce.1596 = f32[] reduce(%convert.4864, %constant.3956), dimensions={0}, to_apply=%region_1751.43338
  %convert.4865 = bf16[] convert(%reduce.1596)
  %add.7464 = bf16[] add(%add.7462, %convert.4865)
  %convert.4866 = f32[4096]{0} convert(%multiply.8802)
  %reduce.1597 = f32[] reduce(%convert.4866, %constant.3956), dimensions={0}, to_apply=%region_1752.43347
  %convert.4867 = bf16[] convert(%reduce.1597)
  %add.7465 = bf16[] add(%add.7464, %convert.4867)
  %convert.4868 = f32[512,8,128]{0,2,1} convert(%multiply.8811)
  %reduce.1598 = f32[] reduce(%convert.4868, %constant.3956), dimensions={0,1,2}, to_apply=%region_1753.43356
  %all-reduce.698 = f32[] all-reduce(%reduce.1598), channel_id=1789, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1753.43356.clone
  %convert.4869 = bf16[] convert(%all-reduce.698)
  %add.7466 = bf16[] add(%add.7465, %convert.4869)
  %convert.4870 = f32[32,128,512]{1,0,2} convert(%multiply.8820)
  %reduce.1599 = f32[] reduce(%convert.4870, %constant.3956), dimensions={0,1,2}, to_apply=%region_1754.43365
  %all-reduce.699 = f32[] all-reduce(%reduce.1599), channel_id=1790, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1754.43365.clone
  %convert.4871 = bf16[] convert(%all-reduce.699)
  %add.7467 = bf16[] add(%add.7466, %convert.4871)
  %convert.4872 = f32[512,32,128]{0,2,1} convert(%multiply.8829)
  %reduce.1600 = f32[] reduce(%convert.4872, %constant.3956), dimensions={0,1,2}, to_apply=%region_1755.43374
  %all-reduce.700 = f32[] all-reduce(%reduce.1600), channel_id=1791, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1755.43374.clone
  %convert.4873 = bf16[] convert(%all-reduce.700)
  %add.7468 = bf16[] add(%add.7467, %convert.4873)
  %convert.4874 = f32[512,8,128]{0,2,1} convert(%multiply.8838)
  %reduce.1601 = f32[] reduce(%convert.4874, %constant.3956), dimensions={0,1,2}, to_apply=%region_1756.43383
  %all-reduce.701 = f32[] all-reduce(%reduce.1601), channel_id=1792, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1756.43383.clone
  %convert.4875 = bf16[] convert(%all-reduce.701)
  %add.7469 = bf16[] add(%add.7468, %convert.4875)
  %convert.4876 = f32[512,8]{0,1} convert(%multiply.8847)
  %reduce.1602 = f32[] reduce(%convert.4876, %constant.3956), dimensions={0,1}, to_apply=%region_1757.43392
  %all-reduce.702 = f32[] all-reduce(%reduce.1602), channel_id=1793, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1757.43392.clone
  %convert.4878 = bf16[] convert(%all-reduce.702)
  %add.7470 = bf16[] add(%add.7469, %convert.4878)
  %convert.4879 = f32[1,4096,14336]{2,1,0} convert(%multiply.8855)
  %reduce.1603 = f32[] reduce(%convert.4879, %constant.3956), dimensions={0,1,2}, to_apply=%region_1758.43401
  %all-reduce.703 = f32[] all-reduce(%reduce.1603), channel_id=1794, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1758.43401.clone
  %convert.4880 = bf16[] convert(%all-reduce.703)
  %add.7471 = bf16[] add(%add.7470, %convert.4880)
  %convert.4881 = f32[1,4096,14336]{2,1,0} convert(%multiply.8863)
  %reduce.1604 = f32[] reduce(%convert.4881, %constant.3956), dimensions={0,1,2}, to_apply=%region_1759.43410
  %all-reduce.704 = f32[] all-reduce(%reduce.1604), channel_id=1795, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1759.43410.clone
  %convert.4882 = bf16[] convert(%all-reduce.704)
  %add.7472 = bf16[] add(%add.7471, %convert.4882)
  %convert.4883 = f32[1,14336,4096]{2,1,0} convert(%multiply.8873)
  %reduce.1605 = f32[] reduce(%convert.4883, %constant.3956), dimensions={0,1,2}, to_apply=%region_1760.43419
  %all-reduce.705 = f32[] all-reduce(%reduce.1605), channel_id=1796, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1760.43419.clone
  %convert.4884 = bf16[] convert(%all-reduce.705)
  %add.7473 = bf16[] add(%add.7472, %convert.4884)
  %convert.4885 = f32[4096]{0} convert(%multiply.8884)
  %reduce.1606 = f32[] reduce(%convert.4885, %constant.3956), dimensions={0}, to_apply=%region_1761.43428
  %convert.4886 = bf16[] convert(%reduce.1606)
  %add.7474 = bf16[] add(%add.7473, %convert.4886)
  %convert.4887 = f32[4096]{0} convert(%multiply.8892)
  %reduce.1607 = f32[] reduce(%convert.4887, %constant.3956), dimensions={0}, to_apply=%region_1762.43437
  %convert.4888 = bf16[] convert(%reduce.1607)
  %add.7475 = bf16[] add(%add.7474, %convert.4888)
  %convert.4889 = f32[512,8,128]{0,2,1} convert(%multiply.8900)
  %reduce.1608 = f32[] reduce(%convert.4889, %constant.3956), dimensions={0,1,2}, to_apply=%region_1763.43446
  %all-reduce.706 = f32[] all-reduce(%reduce.1608), channel_id=1797, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1763.43446.clone
  %convert.4890 = bf16[] convert(%all-reduce.706)
  %add.7476 = bf16[] add(%add.7475, %convert.4890)
  %convert.4891 = f32[32,128,512]{1,0,2} convert(%multiply.8910)
  %reduce.1609 = f32[] reduce(%convert.4891, %constant.3956), dimensions={0,1,2}, to_apply=%region_1764.43455
  %all-reduce.707 = f32[] all-reduce(%reduce.1609), channel_id=1798, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1764.43455.clone
  %convert.4893 = bf16[] convert(%all-reduce.707)
  %add.7477 = bf16[] add(%add.7476, %convert.4893)
  %convert.4894 = f32[512,32,128]{0,2,1} convert(%multiply.8920)
  %reduce.1610 = f32[] reduce(%convert.4894, %constant.3956), dimensions={0,1,2}, to_apply=%region_1765.43464
  %all-reduce.708 = f32[] all-reduce(%reduce.1610), channel_id=1799, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1765.43464.clone
  %convert.4896 = bf16[] convert(%all-reduce.708)
  %add.7478 = bf16[] add(%add.7477, %convert.4896)
  %convert.4897 = f32[512,8,128]{0,2,1} convert(%multiply.8928)
  %reduce.1611 = f32[] reduce(%convert.4897, %constant.3956), dimensions={0,1,2}, to_apply=%region_1766.43473
  %all-reduce.709 = f32[] all-reduce(%reduce.1611), channel_id=1800, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1766.43473.clone
  %convert.4898 = bf16[] convert(%all-reduce.709)
  %add.7479 = bf16[] add(%add.7478, %convert.4898)
  %convert.4899 = f32[512,8]{0,1} convert(%multiply.8936)
  %reduce.1612 = f32[] reduce(%convert.4899, %constant.3956), dimensions={0,1}, to_apply=%region_1767.43482
  %all-reduce.710 = f32[] all-reduce(%reduce.1612), channel_id=1801, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1767.43482.clone
  %convert.4900 = bf16[] convert(%all-reduce.710)
  %add.7480 = bf16[] add(%add.7479, %convert.4900)
  %convert.4901 = f32[1,4096,14336]{2,1,0} convert(%multiply.8944)
  %reduce.1613 = f32[] reduce(%convert.4901, %constant.3956), dimensions={0,1,2}, to_apply=%region_1768.43491
  %all-reduce.711 = f32[] all-reduce(%reduce.1613), channel_id=1802, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1768.43491.clone
  %convert.4902 = bf16[] convert(%all-reduce.711)
  %add.7481 = bf16[] add(%add.7480, %convert.4902)
  %convert.4903 = f32[1,4096,14336]{2,1,0} convert(%multiply.8952)
  %reduce.1614 = f32[] reduce(%convert.4903, %constant.3956), dimensions={0,1,2}, to_apply=%region_1769.43500
  %all-reduce.712 = f32[] all-reduce(%reduce.1614), channel_id=1803, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1769.43500.clone
  %convert.4904 = bf16[] convert(%all-reduce.712)
  %add.7482 = bf16[] add(%add.7481, %convert.4904)
  %convert.4906 = f32[1,14336,4096]{2,1,0} convert(%multiply.8960)
  %reduce.1615 = f32[] reduce(%convert.4906, %constant.3956), dimensions={0,1,2}, to_apply=%region_1770.43509
  %all-reduce.713 = f32[] all-reduce(%reduce.1615), channel_id=1804, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1770.43509.clone
  %convert.4908 = bf16[] convert(%all-reduce.713)
  %add.7483 = bf16[] add(%add.7482, %convert.4908)
  %convert.4909 = f32[4096]{0} convert(%multiply.8968)
  %reduce.1616 = f32[] reduce(%convert.4909, %constant.3956), dimensions={0}, to_apply=%region_1771.43518
  %convert.4910 = bf16[] convert(%reduce.1616)
  %add.7484 = bf16[] add(%add.7483, %convert.4910)
  %convert.4911 = f32[4096]{0} convert(%multiply.8977)
  %reduce.1617 = f32[] reduce(%convert.4911, %constant.3956), dimensions={0}, to_apply=%region_1772.43527
  %convert.4912 = bf16[] convert(%reduce.1617)
  %add.7485 = bf16[] add(%add.7484, %convert.4912)
  %convert.4913 = f32[512,8,128]{0,2,1} convert(%multiply.8985)
  %reduce.1618 = f32[] reduce(%convert.4913, %constant.3956), dimensions={0,1,2}, to_apply=%region_1773.43536
  %all-reduce.714 = f32[] all-reduce(%reduce.1618), channel_id=1805, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1773.43536.clone
  %convert.4914 = bf16[] convert(%all-reduce.714)
  %add.7486 = bf16[] add(%add.7485, %convert.4914)
  %convert.4915 = f32[32,128,512]{1,0,2} convert(%multiply.8995)
  %reduce.1619 = f32[] reduce(%convert.4915, %constant.3956), dimensions={0,1,2}, to_apply=%region_1774.43545
  %all-reduce.715 = f32[] all-reduce(%reduce.1619), channel_id=1806, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1774.43545.clone
  %convert.4916 = bf16[] convert(%all-reduce.715)
  %add.7487 = bf16[] add(%add.7486, %convert.4916)
  %convert.4917 = f32[512,32,128]{0,2,1} convert(%multiply.9003)
  %reduce.1620 = f32[] reduce(%convert.4917, %constant.3956), dimensions={0,1,2}, to_apply=%region_1775.43554
  %all-reduce.716 = f32[] all-reduce(%reduce.1620), channel_id=1807, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1775.43554.clone
  %convert.4918 = bf16[] convert(%all-reduce.716)
  %add.7488 = bf16[] add(%add.7487, %convert.4918)
  %convert.4919 = f32[512,8,128]{0,2,1} convert(%multiply.9011)
  %reduce.1621 = f32[] reduce(%convert.4919, %constant.3956), dimensions={0,1,2}, to_apply=%region_1776.43563
  %all-reduce.717 = f32[] all-reduce(%reduce.1621), channel_id=1808, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1776.43563.clone
  %convert.4920 = bf16[] convert(%all-reduce.717)
  %add.7489 = bf16[] add(%add.7488, %convert.4920)
  %convert.4921 = f32[512,8]{0,1} convert(%multiply.9019)
  %reduce.1622 = f32[] reduce(%convert.4921, %constant.3956), dimensions={0,1}, to_apply=%region_1777.43572
  %all-reduce.718 = f32[] all-reduce(%reduce.1622), channel_id=1809, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1777.43572.clone
  %convert.4922 = bf16[] convert(%all-reduce.718)
  %add.7490 = bf16[] add(%add.7489, %convert.4922)
  %convert.4923 = f32[1,4096,14336]{2,1,0} convert(%multiply.9027)
  %reduce.1623 = f32[] reduce(%convert.4923, %constant.3956), dimensions={0,1,2}, to_apply=%region_1778.43581
  %all-reduce.719 = f32[] all-reduce(%reduce.1623), channel_id=1810, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1778.43581.clone
  %convert.4924 = bf16[] convert(%all-reduce.719)
  %add.7491 = bf16[] add(%add.7490, %convert.4924)
  %convert.4925 = f32[1,4096,14336]{2,1,0} convert(%multiply.9035)
  %reduce.1624 = f32[] reduce(%convert.4925, %constant.3956), dimensions={0,1,2}, to_apply=%region_1779.43590
  %all-reduce.720 = f32[] all-reduce(%reduce.1624), channel_id=1811, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1779.43590.clone
  %convert.4926 = bf16[] convert(%all-reduce.720)
  %add.7492 = bf16[] add(%add.7491, %convert.4926)
  %convert.4927 = f32[1,14336,4096]{2,1,0} convert(%multiply.9043)
  %reduce.1625 = f32[] reduce(%convert.4927, %constant.3956), dimensions={0,1,2}, to_apply=%region_1780.43599
  %all-reduce.721 = f32[] all-reduce(%reduce.1625), channel_id=1812, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1780.43599.clone
  %convert.4928 = bf16[] convert(%all-reduce.721)
  %add.7493 = bf16[] add(%add.7492, %convert.4928)
  %convert.4929 = f32[4096]{0} convert(%multiply.9051)
  %reduce.1626 = f32[] reduce(%convert.4929, %constant.3956), dimensions={0}, to_apply=%region_1781.43608
  %convert.4930 = bf16[] convert(%reduce.1626)
  %add.7494 = bf16[] add(%add.7493, %convert.4930)
  %convert.4931 = f32[4096]{0} convert(%multiply.9059)
  %reduce.1627 = f32[] reduce(%convert.4931, %constant.3956), dimensions={0}, to_apply=%region_1782.43617
  %convert.4933 = bf16[] convert(%reduce.1627)
  %add.7495 = bf16[] add(%add.7494, %convert.4933)
  %convert.4934 = f32[512,8,128]{0,2,1} convert(%multiply.9067)
  %reduce.1628 = f32[] reduce(%convert.4934, %constant.3956), dimensions={0,1,2}, to_apply=%region_1783.43626
  %all-reduce.722 = f32[] all-reduce(%reduce.1628), channel_id=1813, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1783.43626.clone
  %convert.4936 = bf16[] convert(%all-reduce.722)
  %add.7497 = bf16[] add(%add.7495, %convert.4936)
  %convert.4937 = f32[32,128,512]{1,0,2} convert(%multiply.9076)
  %reduce.1629 = f32[] reduce(%convert.4937, %constant.3956), dimensions={0,1,2}, to_apply=%region_1784.43635
  %all-reduce.723 = f32[] all-reduce(%reduce.1629), channel_id=1814, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1784.43635.clone
  %convert.4938 = bf16[] convert(%all-reduce.723)
  %add.7498 = bf16[] add(%add.7497, %convert.4938)
  %convert.4939 = f32[512,32,128]{0,2,1} convert(%multiply.9087)
  %reduce.1630 = f32[] reduce(%convert.4939, %constant.3956), dimensions={0,1,2}, to_apply=%region_1785.43644
  %all-reduce.724 = f32[] all-reduce(%reduce.1630), channel_id=1815, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1785.43644.clone
  %convert.4940 = bf16[] convert(%all-reduce.724)
  %add.7499 = bf16[] add(%add.7498, %convert.4940)
  %convert.4941 = f32[512,8,128]{0,2,1} convert(%multiply.9096)
  %reduce.1631 = f32[] reduce(%convert.4941, %constant.3956), dimensions={0,1,2}, to_apply=%region_1786.43653
  %all-reduce.725 = f32[] all-reduce(%reduce.1631), channel_id=1816, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1786.43653.clone
  %convert.4942 = bf16[] convert(%all-reduce.725)
  %add.7500 = bf16[] add(%add.7499, %convert.4942)
  %convert.4943 = f32[512,8]{0,1} convert(%multiply.9104)
  %reduce.1632 = f32[] reduce(%convert.4943, %constant.3956), dimensions={0,1}, to_apply=%region_1787.43662
  %all-reduce.726 = f32[] all-reduce(%reduce.1632), channel_id=1817, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1787.43662.clone
  %convert.4944 = bf16[] convert(%all-reduce.726)
  %add.7501 = bf16[] add(%add.7500, %convert.4944)
  %convert.4946 = f32[1,4096,14336]{2,1,0} convert(%multiply.9113)
  %reduce.1633 = f32[] reduce(%convert.4946, %constant.3956), dimensions={0,1,2}, to_apply=%region_1788.43671
  %all-reduce.727 = f32[] all-reduce(%reduce.1633), channel_id=1818, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1788.43671.clone
  %convert.4948 = bf16[] convert(%all-reduce.727)
  %add.7502 = bf16[] add(%add.7501, %convert.4948)
  %convert.4949 = f32[1,4096,14336]{2,1,0} convert(%multiply.9122)
  %reduce.1634 = f32[] reduce(%convert.4949, %constant.3956), dimensions={0,1,2}, to_apply=%region_1789.43680
  %all-reduce.728 = f32[] all-reduce(%reduce.1634), channel_id=1819, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1789.43680.clone
  %convert.4950 = bf16[] convert(%all-reduce.728)
  %add.7503 = bf16[] add(%add.7502, %convert.4950)
  %convert.4951 = f32[1,14336,4096]{2,1,0} convert(%multiply.9130)
  %reduce.1635 = f32[] reduce(%convert.4951, %constant.3956), dimensions={0,1,2}, to_apply=%region_1790.43689
  %all-reduce.729 = f32[] all-reduce(%reduce.1635), channel_id=1820, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1790.43689.clone
  %convert.4952 = bf16[] convert(%all-reduce.729)
  %add.7504 = bf16[] add(%add.7503, %convert.4952)
  %convert.4953 = f32[4096]{0} convert(%multiply.9140)
  %reduce.1636 = f32[] reduce(%convert.4953, %constant.3956), dimensions={0}, to_apply=%region_1791.43698
  %convert.4954 = bf16[] convert(%reduce.1636)
  %add.7505 = bf16[] add(%add.7504, %convert.4954)
  %convert.4955 = f32[4096]{0} convert(%multiply.9149)
  %reduce.1637 = f32[] reduce(%convert.4955, %constant.3956), dimensions={0}, to_apply=%region_1792.43707
  %convert.4956 = bf16[] convert(%reduce.1637)
  %add.7506 = bf16[] add(%add.7505, %convert.4956)
  %convert.4957 = f32[512,8,128]{0,2,1} convert(%multiply.9157)
  %reduce.1638 = f32[] reduce(%convert.4957, %constant.3956), dimensions={0,1,2}, to_apply=%region_1793.43716
  %all-reduce.730 = f32[] all-reduce(%reduce.1638), channel_id=1821, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1793.43716.clone
  %convert.4958 = bf16[] convert(%all-reduce.730)
  %add.7507 = bf16[] add(%add.7506, %convert.4958)
  %convert.4959 = f32[32,128,512]{1,0,2} convert(%multiply.9165)
  %reduce.1639 = f32[] reduce(%convert.4959, %constant.3956), dimensions={0,1,2}, to_apply=%region_1794.43725
  %all-reduce.731 = f32[] all-reduce(%reduce.1639), channel_id=1822, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1794.43725.clone
  %convert.4960 = bf16[] convert(%all-reduce.731)
  %add.7508 = bf16[] add(%add.7507, %convert.4960)
  %convert.4961 = f32[512,32,128]{0,2,1} convert(%multiply.9175)
  %reduce.1640 = f32[] reduce(%convert.4961, %constant.3956), dimensions={0,1,2}, to_apply=%region_1795.43734
  %all-reduce.732 = f32[] all-reduce(%reduce.1640), channel_id=1823, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1795.43734.clone
  %convert.4962 = bf16[] convert(%all-reduce.732)
  %add.7509 = bf16[] add(%add.7508, %convert.4962)
  %convert.4963 = f32[512,8,128]{0,2,1} convert(%multiply.9185)
  %reduce.1641 = f32[] reduce(%convert.4963, %constant.3956), dimensions={0,1,2}, to_apply=%region_1796.43743
  %all-reduce.733 = f32[] all-reduce(%reduce.1641), channel_id=1824, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1796.43743.clone
  %convert.4964 = bf16[] convert(%all-reduce.733)
  %add.7511 = bf16[] add(%add.7509, %convert.4964)
  %convert.4965 = f32[512,8]{0,1} convert(%multiply.9194)
  %reduce.1642 = f32[] reduce(%convert.4965, %constant.3956), dimensions={0,1}, to_apply=%region_1797.43752
  %all-reduce.734 = f32[] all-reduce(%reduce.1642), channel_id=1825, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1797.43752.clone
  %convert.4966 = bf16[] convert(%all-reduce.734)
  %add.7512 = bf16[] add(%add.7511, %convert.4966)
  %convert.4967 = f32[1,4096,14336]{2,1,0} convert(%multiply.9202)
  %reduce.1643 = f32[] reduce(%convert.4967, %constant.3956), dimensions={0,1,2}, to_apply=%region_1798.43761
  %all-reduce.735 = f32[] all-reduce(%reduce.1643), channel_id=1826, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1798.43761.clone
  %convert.4968 = bf16[] convert(%all-reduce.735)
  %add.7514 = bf16[] add(%add.7512, %convert.4968)
  %convert.4969 = f32[1,4096,14336]{2,1,0} convert(%multiply.9211)
  %reduce.1644 = f32[] reduce(%convert.4969, %constant.3956), dimensions={0,1,2}, to_apply=%region_1799.43770
  %all-reduce.736 = f32[] all-reduce(%reduce.1644), channel_id=1827, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1799.43770.clone
  %convert.4970 = bf16[] convert(%all-reduce.736)
  %add.7515 = bf16[] add(%add.7514, %convert.4970)
  %convert.4971 = f32[1,14336,4096]{2,1,0} convert(%multiply.9221)
  %reduce.1645 = f32[] reduce(%convert.4971, %constant.3956), dimensions={0,1,2}, to_apply=%region_1800.43779
  %all-reduce.737 = f32[] all-reduce(%reduce.1645), channel_id=1828, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1800.43779.clone
  %convert.4972 = bf16[] convert(%all-reduce.737)
  %add.7517 = bf16[] add(%add.7515, %convert.4972)
  %convert.4973 = f32[4096]{0} convert(%multiply.9230)
  %reduce.1646 = f32[] reduce(%convert.4973, %constant.3956), dimensions={0}, to_apply=%region_1801.43788
  %convert.4974 = bf16[] convert(%reduce.1646)
  %add.7518 = bf16[] add(%add.7517, %convert.4974)
  %convert.4975 = f32[4096]{0} convert(%multiply.9238)
  %reduce.1647 = f32[] reduce(%convert.4975, %constant.3956), dimensions={0}, to_apply=%region_1802.43797
  %convert.4976 = bf16[] convert(%reduce.1647)
  %add.7519 = bf16[] add(%add.7518, %convert.4976)
  %convert.4977 = f32[512,8,128]{0,2,1} convert(%multiply.9246)
  %reduce.1648 = f32[] reduce(%convert.4977, %constant.3956), dimensions={0,1,2}, to_apply=%region_1803.43806
  %all-reduce.738 = f32[] all-reduce(%reduce.1648), channel_id=1829, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1803.43806.clone
  %convert.4978 = bf16[] convert(%all-reduce.738)
  %add.7520 = bf16[] add(%add.7519, %convert.4978)
  %convert.4979 = f32[32,128,512]{1,0,2} convert(%multiply.9254)
  %reduce.1649 = f32[] reduce(%convert.4979, %constant.3956), dimensions={0,1,2}, to_apply=%region_1804.43815
  %all-reduce.739 = f32[] all-reduce(%reduce.1649), channel_id=1830, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1804.43815.clone
  %convert.4980 = bf16[] convert(%all-reduce.739)
  %add.7521 = bf16[] add(%add.7520, %convert.4980)
  %convert.4981 = f32[512,32,128]{0,2,1} convert(%multiply.9262)
  %reduce.1650 = f32[] reduce(%convert.4981, %constant.3956), dimensions={0,1,2}, to_apply=%region_1805.43824
  %all-reduce.740 = f32[] all-reduce(%reduce.1650), channel_id=1831, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1805.43824.clone
  %convert.4982 = bf16[] convert(%all-reduce.740)
  %add.7522 = bf16[] add(%add.7521, %convert.4982)
  %convert.4983 = f32[512,8,128]{0,2,1} convert(%multiply.9270)
  %reduce.1651 = f32[] reduce(%convert.4983, %constant.3956), dimensions={0,1,2}, to_apply=%region_1806.43833
  %all-reduce.741 = f32[] all-reduce(%reduce.1651), channel_id=1832, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1806.43833.clone
  %convert.4984 = bf16[] convert(%all-reduce.741)
  %add.7523 = bf16[] add(%add.7522, %convert.4984)
  %convert.4985 = f32[512,32000]{0,1} convert(%multiply.9278)
  %reduce.1652 = f32[] reduce(%convert.4985, %constant.3956), dimensions={0,1}, to_apply=%region_1807.43842
  %all-reduce.742 = f32[] all-reduce(%reduce.1652), channel_id=1833, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1807.43842.clone
  %convert.4986 = bf16[] convert(%all-reduce.742)
  %add.7524 = bf16[] add(%add.7523, %convert.4986)
  %convert.4987 = f32[32000,512]{0,1} convert(%multiply.9287)
  %reduce.1653 = f32[] reduce(%convert.4987, %constant.3956), dimensions={0,1}, to_apply=%region_1808.43851
  %all-reduce.743 = f32[] all-reduce(%reduce.1653), channel_id=1834, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1808.43851.clone
  %convert.4988 = bf16[] convert(%all-reduce.743)
  %add.7525 = bf16[] add(%add.7524, %convert.4988)
  %sqrt.324 = bf16[] sqrt(%add.7525)
  %broadcast.12047 = f32[1,4096,32000]{2,1,0} broadcast(%log.2), dimensions={0,1}
  %subtract.709 = f32[1,4096,32000]{2,1,0} subtract(%subtract.321, %broadcast.12047)
  %broadcast.12048 = f32[1,4096,32000]{2,1,0} broadcast(%constant.3956), dimensions={}
  %select.2913 = f32[1,4096,32000]{2,1,0} select(%compare.1878, %subtract.709, %broadcast.12048)
  %reduce.1654 = f32[1,4096]{1,0} reduce(%select.2913, %constant.3956), dimensions={2}, to_apply=%region_356.11008
  %negate.319 = f32[1,4096]{1,0} negate(%reduce.1654)
  %multiply.9640 = f32[1,4096]{1,0} multiply(%add.3385, %add.3385)
  %multiply.9641 = f32[1,4096]{1,0} multiply(%multiply.9640, %broadcast.7199)
  %add.7526 = f32[1,4096]{1,0} add(%negate.319, %multiply.9641)
  %copy.4299 = f32[1,4096]{1,0} copy(%add.7526)
  %select.2914 = f32[1,4096]{1,0} select(%compare.1876, %copy.4299, %broadcast.7199)
  %reduce.1655 = f32[] reduce(%select.2914, %constant.3956), dimensions={0,1}, to_apply=%region_357.11024
  %all-reduce.744 = f32[] all-reduce(%reduce.1655), channel_id=1835, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_357.11024.clone
  %divide.2051 = f32[] divide(%all-reduce.744, %add.3384)
  %multiply.9642 = bf16[4096]{0} multiply(%add.5471, %add.5471)
  %convert.4989 = f32[4096]{0} convert(%multiply.9642)
  %reduce.1657 = f32[] reduce(%convert.4989, %constant.3956), dimensions={0}, to_apply=%region_2132.46768
  %convert.4990 = bf16[] convert(%reduce.1657)
  %multiply.9643 = bf16[512,8]{1,0} multiply(%add.5477, %add.5477)
  %convert.4991 = f32[512,8]{1,0} convert(%multiply.9643)
  %reduce.1658 = f32[] reduce(%convert.4991, %constant.3956), dimensions={0,1}, to_apply=%region_2133.46776
  %all-reduce.745 = f32[] all-reduce(%reduce.1658), channel_id=1836, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2133.46776.clone
  %convert.4992 = bf16[] convert(%all-reduce.745)
  %add.7527 = bf16[] add(%convert.4990, %convert.4992)
  %multiply.9644 = bf16[1,4096,14336]{2,1,0} multiply(%add.5483, %add.5483)
  %convert.4993 = f32[1,4096,14336]{2,1,0} convert(%multiply.9644)
  %reduce.1659 = f32[] reduce(%convert.4993, %constant.3956), dimensions={0,1,2}, to_apply=%region_2134.46785
  %all-reduce.746 = f32[] all-reduce(%reduce.1659), channel_id=1837, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2134.46785.clone
  %convert.4994 = bf16[] convert(%all-reduce.746)
  %add.7528 = bf16[] add(%add.7527, %convert.4994)
  %multiply.9645 = bf16[1,4096,14336]{2,1,0} multiply(%add.5488, %add.5488)
  %convert.4996 = f32[1,4096,14336]{2,1,0} convert(%multiply.9645)
  %reduce.1660 = f32[] reduce(%convert.4996, %constant.3956), dimensions={0,1,2}, to_apply=%region_2135.46794
  %all-reduce.747 = f32[] all-reduce(%reduce.1660), channel_id=1838, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2135.46794.clone
  %convert.4997 = bf16[] convert(%all-reduce.747)
  %add.7529 = bf16[] add(%add.7528, %convert.4997)
  %multiply.9646 = bf16[1,14336,4096]{2,1,0} multiply(%add.5493, %add.5493)
  %convert.4998 = f32[1,14336,4096]{2,1,0} convert(%multiply.9646)
  %reduce.1661 = f32[] reduce(%convert.4998, %constant.3956), dimensions={0,1,2}, to_apply=%region_2136.46803
  %all-reduce.748 = f32[] all-reduce(%reduce.1661), channel_id=1839, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2136.46803.clone
  %convert.4999 = bf16[] convert(%all-reduce.748)
  %add.7531 = bf16[] add(%add.7529, %convert.4999)
  %multiply.9647 = bf16[4096]{0} multiply(%add.5498, %add.5498)
  %convert.5000 = f32[4096]{0} convert(%multiply.9647)
  %reduce.1662 = f32[] reduce(%convert.5000, %constant.3956), dimensions={0}, to_apply=%region_2137.46812
  %convert.5001 = bf16[] convert(%reduce.1662)
  %add.7532 = bf16[] add(%add.7531, %convert.5001)
  %multiply.9648 = bf16[4096]{0} multiply(%add.5503, %add.5503)
  %convert.5002 = f32[4096]{0} convert(%multiply.9648)
  %reduce.1663 = f32[] reduce(%convert.5002, %constant.3956), dimensions={0}, to_apply=%region_2138.46821
  %convert.5004 = bf16[] convert(%reduce.1663)
  %add.7533 = bf16[] add(%add.7532, %convert.5004)
  %multiply.9649 = bf16[512,8,128]{2,1,0} multiply(%add.5508, %add.5508)
  %convert.5005 = f32[512,8,128]{2,1,0} convert(%multiply.9649)
  %reduce.1665 = f32[] reduce(%convert.5005, %constant.3956), dimensions={0,1,2}, to_apply=%region_2139.46830
  %all-reduce.749 = f32[] all-reduce(%reduce.1665), channel_id=1840, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2139.46830.clone
  %convert.5006 = bf16[] convert(%all-reduce.749)
  %add.7534 = bf16[] add(%add.7533, %convert.5006)
  %multiply.9650 = bf16[32,128,512]{2,1,0} multiply(%add.5513, %add.5513)
  %convert.5007 = f32[32,128,512]{2,1,0} convert(%multiply.9650)
  %reduce.1666 = f32[] reduce(%convert.5007, %constant.3956), dimensions={0,1,2}, to_apply=%region_2140.46839
  %all-reduce.750 = f32[] all-reduce(%reduce.1666), channel_id=1841, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2140.46839.clone
  %convert.5008 = bf16[] convert(%all-reduce.750)
  %add.7535 = bf16[] add(%add.7534, %convert.5008)
  %multiply.9651 = bf16[512,32,128]{2,1,0} multiply(%add.5518, %add.5518)
  %convert.5009 = f32[512,32,128]{2,1,0} convert(%multiply.9651)
  %reduce.1667 = f32[] reduce(%convert.5009, %constant.3956), dimensions={0,1,2}, to_apply=%region_2141.46848
  %all-reduce.751 = f32[] all-reduce(%reduce.1667), channel_id=1842, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2141.46848.clone
  %convert.5010 = bf16[] convert(%all-reduce.751)
  %add.7536 = bf16[] add(%add.7535, %convert.5010)
  %multiply.9652 = bf16[512,8,128]{2,1,0} multiply(%add.5523, %add.5523)
  %convert.5011 = f32[512,8,128]{2,1,0} convert(%multiply.9652)
  %reduce.1668 = f32[] reduce(%convert.5011, %constant.3956), dimensions={0,1,2}, to_apply=%region_2142.46857
  %all-reduce.752 = f32[] all-reduce(%reduce.1668), channel_id=1843, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2142.46857.clone
  %convert.5012 = bf16[] convert(%all-reduce.752)
  %add.7537 = bf16[] add(%add.7536, %convert.5012)
  %multiply.9653 = bf16[512,8]{1,0} multiply(%add.5528, %add.5528)
  %convert.5013 = f32[512,8]{1,0} convert(%multiply.9653)
  %reduce.1670 = f32[] reduce(%convert.5013, %constant.3956), dimensions={0,1}, to_apply=%region_2143.46866
  %all-reduce.753 = f32[] all-reduce(%reduce.1670), channel_id=1844, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2143.46866.clone
  %convert.5014 = bf16[] convert(%all-reduce.753)
  %add.7538 = bf16[] add(%add.7537, %convert.5014)
  %multiply.9654 = bf16[1,4096,14336]{2,1,0} multiply(%add.5533, %add.5533)
  %convert.5015 = f32[1,4096,14336]{2,1,0} convert(%multiply.9654)
  %reduce.1671 = f32[] reduce(%convert.5015, %constant.3956), dimensions={0,1,2}, to_apply=%region_2144.46875
  %all-reduce.754 = f32[] all-reduce(%reduce.1671), channel_id=1845, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2144.46875.clone
  %convert.5016 = bf16[] convert(%all-reduce.754)
  %add.7539 = bf16[] add(%add.7538, %convert.5016)
  %multiply.9655 = bf16[1,4096,14336]{2,1,0} multiply(%add.5539, %add.5539)
  %convert.5017 = f32[1,4096,14336]{2,1,0} convert(%multiply.9655)
  %reduce.1672 = f32[] reduce(%convert.5017, %constant.3956), dimensions={0,1,2}, to_apply=%region_2145.46884
  %all-reduce.755 = f32[] all-reduce(%reduce.1672), channel_id=1846, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2145.46884.clone
  %convert.5018 = bf16[] convert(%all-reduce.755)
  %add.7541 = bf16[] add(%add.7539, %convert.5018)
  %multiply.9656 = bf16[1,14336,4096]{2,1,0} multiply(%add.5544, %add.5544)
  %convert.5019 = f32[1,14336,4096]{2,1,0} convert(%multiply.9656)
  %reduce.1673 = f32[] reduce(%convert.5019, %constant.3956), dimensions={0,1,2}, to_apply=%region_2146.46893
  %all-reduce.756 = f32[] all-reduce(%reduce.1673), channel_id=1847, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2146.46893.clone
  %convert.5020 = bf16[] convert(%all-reduce.756)
  %add.7542 = bf16[] add(%add.7541, %convert.5020)
  %multiply.9657 = bf16[4096]{0} multiply(%add.5549, %add.5549)
  %convert.5021 = f32[4096]{0} convert(%multiply.9657)
  %reduce.1674 = f32[] reduce(%convert.5021, %constant.3956), dimensions={0}, to_apply=%region_2147.46902
  %convert.5023 = bf16[] convert(%reduce.1674)
  %add.7543 = bf16[] add(%add.7542, %convert.5023)
  %multiply.9658 = bf16[4096]{0} multiply(%add.5554, %add.5554)
  %convert.5024 = f32[4096]{0} convert(%multiply.9658)
  %reduce.1675 = f32[] reduce(%convert.5024, %constant.3956), dimensions={0}, to_apply=%region_2148.46911
  %convert.5025 = bf16[] convert(%reduce.1675)
  %add.7544 = bf16[] add(%add.7543, %convert.5025)
  %multiply.9659 = bf16[512,8,128]{2,1,0} multiply(%add.5559, %add.5559)
  %convert.5026 = f32[512,8,128]{2,1,0} convert(%multiply.9659)
  %reduce.1676 = f32[] reduce(%convert.5026, %constant.3956), dimensions={0,1,2}, to_apply=%region_2149.46920
  %all-reduce.757 = f32[] all-reduce(%reduce.1676), channel_id=1848, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2149.46920.clone
  %convert.5027 = bf16[] convert(%all-reduce.757)
  %add.7545 = bf16[] add(%add.7544, %convert.5027)
  %multiply.9660 = bf16[32,128,512]{2,1,0} multiply(%add.5564, %add.5564)
  %convert.5028 = f32[32,128,512]{2,1,0} convert(%multiply.9660)
  %reduce.1677 = f32[] reduce(%convert.5028, %constant.3956), dimensions={0,1,2}, to_apply=%region_2150.46929
  %all-reduce.758 = f32[] all-reduce(%reduce.1677), channel_id=1849, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2150.46929.clone
  %convert.5029 = bf16[] convert(%all-reduce.758)
  %add.7546 = bf16[] add(%add.7545, %convert.5029)
  %multiply.9661 = bf16[512,32,128]{2,1,0} multiply(%add.5569, %add.5569)
  %convert.5030 = f32[512,32,128]{2,1,0} convert(%multiply.9661)
  %reduce.1678 = f32[] reduce(%convert.5030, %constant.3956), dimensions={0,1,2}, to_apply=%region_2151.46938
  %all-reduce.759 = f32[] all-reduce(%reduce.1678), channel_id=1850, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2151.46938.clone
  %convert.5031 = bf16[] convert(%all-reduce.759)
  %add.7547 = bf16[] add(%add.7546, %convert.5031)
  %multiply.9662 = bf16[512,8,128]{2,1,0} multiply(%add.5574, %add.5574)
  %convert.5032 = f32[512,8,128]{2,1,0} convert(%multiply.9662)
  %reduce.1679 = f32[] reduce(%convert.5032, %constant.3956), dimensions={0,1,2}, to_apply=%region_2152.46947
  %all-reduce.760 = f32[] all-reduce(%reduce.1679), channel_id=1851, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2152.46947.clone
  %convert.5033 = bf16[] convert(%all-reduce.760)
  %add.7548 = bf16[] add(%add.7547, %convert.5033)
  %multiply.9663 = bf16[512,8]{1,0} multiply(%add.5580, %add.5580)
  %convert.5034 = f32[512,8]{1,0} convert(%multiply.9663)
  %reduce.1680 = f32[] reduce(%convert.5034, %constant.3956), dimensions={0,1}, to_apply=%region_2153.46956
  %all-reduce.761 = f32[] all-reduce(%reduce.1680), channel_id=1852, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2153.46956.clone
  %convert.5035 = bf16[] convert(%all-reduce.761)
  %add.7549 = bf16[] add(%add.7548, %convert.5035)
  %multiply.9664 = bf16[1,4096,14336]{2,1,0} multiply(%add.5585, %add.5585)
  %convert.5036 = f32[1,4096,14336]{2,1,0} convert(%multiply.9664)
  %reduce.1681 = f32[] reduce(%convert.5036, %constant.3956), dimensions={0,1,2}, to_apply=%region_2154.46965
  %all-reduce.762 = f32[] all-reduce(%reduce.1681), channel_id=1853, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2154.46965.clone
  %convert.5038 = bf16[] convert(%all-reduce.762)
  %add.7550 = bf16[] add(%add.7549, %convert.5038)
  %multiply.9665 = bf16[1,4096,14336]{2,1,0} multiply(%add.5590, %add.5590)
  %convert.5039 = f32[1,4096,14336]{2,1,0} convert(%multiply.9665)
  %reduce.1682 = f32[] reduce(%convert.5039, %constant.3956), dimensions={0,1,2}, to_apply=%region_2155.46974
  %all-reduce.763 = f32[] all-reduce(%reduce.1682), channel_id=1854, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2155.46974.clone
  %convert.5040 = bf16[] convert(%all-reduce.763)
  %add.7551 = bf16[] add(%add.7550, %convert.5040)
  %multiply.9666 = bf16[1,14336,4096]{2,1,0} multiply(%add.5595, %add.5595)
  %convert.5041 = f32[1,14336,4096]{2,1,0} convert(%multiply.9666)
  %reduce.1683 = f32[] reduce(%convert.5041, %constant.3956), dimensions={0,1,2}, to_apply=%region_2156.46983
  %all-reduce.764 = f32[] all-reduce(%reduce.1683), channel_id=1855, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2156.46983.clone
  %convert.5042 = bf16[] convert(%all-reduce.764)
  %add.7552 = bf16[] add(%add.7551, %convert.5042)
  %multiply.9667 = bf16[4096]{0} multiply(%add.5600, %add.5600)
  %convert.5043 = f32[4096]{0} convert(%multiply.9667)
  %reduce.1685 = f32[] reduce(%convert.5043, %constant.3956), dimensions={0}, to_apply=%region_2157.46992
  %convert.5044 = bf16[] convert(%reduce.1685)
  %add.7553 = bf16[] add(%add.7552, %convert.5044)
  %multiply.9668 = bf16[4096]{0} multiply(%add.5605, %add.5605)
  %convert.5045 = f32[4096]{0} convert(%multiply.9668)
  %reduce.1686 = f32[] reduce(%convert.5045, %constant.3956), dimensions={0}, to_apply=%region_2158.47001
  %convert.5046 = bf16[] convert(%reduce.1686)
  %add.7555 = bf16[] add(%add.7553, %convert.5046)
  %multiply.9669 = bf16[512,8,128]{2,1,0} multiply(%add.5611, %add.5611)
  %convert.5047 = f32[512,8,128]{2,1,0} convert(%multiply.9669)
  %reduce.1687 = f32[] reduce(%convert.5047, %constant.3956), dimensions={0,1,2}, to_apply=%region_2159.47010
  %all-reduce.765 = f32[] all-reduce(%reduce.1687), channel_id=1856, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2159.47010.clone
  %convert.5048 = bf16[] convert(%all-reduce.765)
  %add.7556 = bf16[] add(%add.7555, %convert.5048)
  %multiply.9670 = bf16[32,128,512]{2,1,0} multiply(%add.5617, %add.5617)
  %convert.5050 = f32[32,128,512]{2,1,0} convert(%multiply.9670)
  %reduce.1688 = f32[] reduce(%convert.5050, %constant.3956), dimensions={0,1,2}, to_apply=%region_2160.47019
  %all-reduce.766 = f32[] all-reduce(%reduce.1688), channel_id=1857, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2160.47019.clone
  %convert.5051 = bf16[] convert(%all-reduce.766)
  %add.7557 = bf16[] add(%add.7556, %convert.5051)
  %multiply.9671 = bf16[512,32,128]{2,1,0} multiply(%add.5622, %add.5622)
  %convert.5052 = f32[512,32,128]{2,1,0} convert(%multiply.9671)
  %reduce.1689 = f32[] reduce(%convert.5052, %constant.3956), dimensions={0,1,2}, to_apply=%region_2161.47028
  %all-reduce.767 = f32[] all-reduce(%reduce.1689), channel_id=1858, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2161.47028.clone
  %convert.5053 = bf16[] convert(%all-reduce.767)
  %add.7558 = bf16[] add(%add.7557, %convert.5053)
  %multiply.9672 = bf16[512,8,128]{2,1,0} multiply(%add.5627, %add.5627)
  %convert.5054 = f32[512,8,128]{2,1,0} convert(%multiply.9672)
  %reduce.1690 = f32[] reduce(%convert.5054, %constant.3956), dimensions={0,1,2}, to_apply=%region_2162.47037
  %all-reduce.768 = f32[] all-reduce(%reduce.1690), channel_id=1859, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2162.47037.clone
  %convert.5055 = bf16[] convert(%all-reduce.768)
  %add.7559 = bf16[] add(%add.7558, %convert.5055)
  %multiply.9673 = bf16[512,8]{1,0} multiply(%add.5633, %add.5633)
  %convert.5056 = f32[512,8]{1,0} convert(%multiply.9673)
  %reduce.1691 = f32[] reduce(%convert.5056, %constant.3956), dimensions={0,1}, to_apply=%region_2163.47046
  %all-reduce.769 = f32[] all-reduce(%reduce.1691), channel_id=1860, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2163.47046.clone
  %convert.5057 = bf16[] convert(%all-reduce.769)
  %add.7560 = bf16[] add(%add.7559, %convert.5057)
  %multiply.9674 = bf16[1,4096,14336]{2,1,0} multiply(%add.5640, %add.5640)
  %convert.5058 = f32[1,4096,14336]{2,1,0} convert(%multiply.9674)
  %reduce.1692 = f32[] reduce(%convert.5058, %constant.3956), dimensions={0,1,2}, to_apply=%region_2164.47055
  %all-reduce.770 = f32[] all-reduce(%reduce.1692), channel_id=1861, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2164.47055.clone
  %convert.5059 = bf16[] convert(%all-reduce.770)
  %add.7561 = bf16[] add(%add.7560, %convert.5059)
  %multiply.9675 = bf16[1,4096,14336]{2,1,0} multiply(%add.5645, %add.5645)
  %convert.5060 = f32[1,4096,14336]{2,1,0} convert(%multiply.9675)
  %reduce.1693 = f32[] reduce(%convert.5060, %constant.3956), dimensions={0,1,2}, to_apply=%region_2165.47064
  %all-reduce.771 = f32[] all-reduce(%reduce.1693), channel_id=1862, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2165.47064.clone
  %convert.5061 = bf16[] convert(%all-reduce.771)
  %add.7562 = bf16[] add(%add.7561, %convert.5061)
  %multiply.9676 = bf16[1,14336,4096]{2,1,0} multiply(%add.5650, %add.5650)
  %convert.5062 = f32[1,14336,4096]{2,1,0} convert(%multiply.9676)
  %reduce.1694 = f32[] reduce(%convert.5062, %constant.3956), dimensions={0,1,2}, to_apply=%region_2166.47073
  %all-reduce.772 = f32[] all-reduce(%reduce.1694), channel_id=1863, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2166.47073.clone
  %convert.5063 = bf16[] convert(%all-reduce.772)
  %add.7564 = bf16[] add(%add.7562, %convert.5063)
  %multiply.9677 = bf16[4096]{0} multiply(%add.5655, %add.5655)
  %convert.5064 = f32[4096]{0} convert(%multiply.9677)
  %reduce.1695 = f32[] reduce(%convert.5064, %constant.3956), dimensions={0}, to_apply=%region_2167.47082
  %convert.5065 = bf16[] convert(%reduce.1695)
  %add.7565 = bf16[] add(%add.7564, %convert.5065)
  %multiply.9678 = bf16[4096]{0} multiply(%add.5660, %add.5660)
  %convert.5066 = f32[4096]{0} convert(%multiply.9678)
  %reduce.1696 = f32[] reduce(%convert.5066, %constant.3956), dimensions={0}, to_apply=%region_2168.47091
  %convert.5067 = bf16[] convert(%reduce.1696)
  %add.7566 = bf16[] add(%add.7565, %convert.5067)
  %multiply.9680 = bf16[512,8,128]{2,1,0} multiply(%add.5665, %add.5665)
  %convert.5068 = f32[512,8,128]{2,1,0} convert(%multiply.9680)
  %reduce.1697 = f32[] reduce(%convert.5068, %constant.3956), dimensions={0,1,2}, to_apply=%region_2169.47100
  %all-reduce.773 = f32[] all-reduce(%reduce.1697), channel_id=1864, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2169.47100.clone
  %convert.5069 = bf16[] convert(%all-reduce.773)
  %add.7567 = bf16[] add(%add.7566, %convert.5069)
  %multiply.9681 = bf16[32,128,512]{2,1,0} multiply(%add.5670, %add.5670)
  %convert.5070 = f32[32,128,512]{2,1,0} convert(%multiply.9681)
  %reduce.1698 = f32[] reduce(%convert.5070, %constant.3956), dimensions={0,1,2}, to_apply=%region_2170.47109
  %all-reduce.774 = f32[] all-reduce(%reduce.1698), channel_id=1865, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2170.47109.clone
  %convert.5071 = bf16[] convert(%all-reduce.774)
  %add.7568 = bf16[] add(%add.7567, %convert.5071)
  %multiply.9682 = bf16[512,32,128]{2,1,0} multiply(%add.5676, %add.5676)
  %convert.5073 = f32[512,32,128]{2,1,0} convert(%multiply.9682)
  %reduce.1699 = f32[] reduce(%convert.5073, %constant.3956), dimensions={0,1,2}, to_apply=%region_2171.47118
  %all-reduce.775 = f32[] all-reduce(%reduce.1699), channel_id=1866, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2171.47118.clone
  %convert.5074 = bf16[] convert(%all-reduce.775)
  %add.7569 = bf16[] add(%add.7568, %convert.5074)
  %multiply.9683 = bf16[512,8,128]{2,1,0} multiply(%add.5681, %add.5681)
  %convert.5075 = f32[512,8,128]{2,1,0} convert(%multiply.9683)
  %reduce.1700 = f32[] reduce(%convert.5075, %constant.3956), dimensions={0,1,2}, to_apply=%region_2172.47127
  %all-reduce.776 = f32[] all-reduce(%reduce.1700), channel_id=1867, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2172.47127.clone
  %convert.5076 = bf16[] convert(%all-reduce.776)
  %add.7570 = bf16[] add(%add.7569, %convert.5076)
  %multiply.9684 = bf16[512,8]{1,0} multiply(%add.5687, %add.5687)
  %convert.5077 = f32[512,8]{1,0} convert(%multiply.9684)
  %reduce.1701 = f32[] reduce(%convert.5077, %constant.3956), dimensions={0,1}, to_apply=%region_2173.47136
  %all-reduce.777 = f32[] all-reduce(%reduce.1701), channel_id=1868, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2173.47136.clone
  %convert.5078 = bf16[] convert(%all-reduce.777)
  %add.7571 = bf16[] add(%add.7570, %convert.5078)
  %multiply.9685 = bf16[1,4096,14336]{2,1,0} multiply(%add.5694, %add.5694)
  %convert.5079 = f32[1,4096,14336]{2,1,0} convert(%multiply.9685)
  %reduce.1702 = f32[] reduce(%convert.5079, %constant.3956), dimensions={0,1,2}, to_apply=%region_2174.47145
  %all-reduce.778 = f32[] all-reduce(%reduce.1702), channel_id=1869, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2174.47145.clone
  %convert.5080 = bf16[] convert(%all-reduce.778)
  %add.7572 = bf16[] add(%add.7571, %convert.5080)
  %multiply.9688 = bf16[1,4096,14336]{2,1,0} multiply(%add.5699, %add.5699)
  %convert.5081 = f32[1,4096,14336]{2,1,0} convert(%multiply.9688)
  %reduce.1703 = f32[] reduce(%convert.5081, %constant.3956), dimensions={0,1,2}, to_apply=%region_2175.47154
  %all-reduce.779 = f32[] all-reduce(%reduce.1703), channel_id=1870, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2175.47154.clone
  %convert.5082 = bf16[] convert(%all-reduce.779)
  %add.7573 = bf16[] add(%add.7572, %convert.5082)
  %multiply.9689 = bf16[1,14336,4096]{2,1,0} multiply(%add.5704, %add.5704)
  %convert.5083 = f32[1,14336,4096]{2,1,0} convert(%multiply.9689)
  %reduce.1704 = f32[] reduce(%convert.5083, %constant.3956), dimensions={0,1,2}, to_apply=%region_2176.47163
  %all-reduce.780 = f32[] all-reduce(%reduce.1704), channel_id=1871, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2176.47163.clone
  %convert.5084 = bf16[] convert(%all-reduce.780)
  %add.7574 = bf16[] add(%add.7573, %convert.5084)
  %multiply.9690 = bf16[4096]{0} multiply(%add.5710, %add.5710)
  %convert.5085 = f32[4096]{0} convert(%multiply.9690)
  %reduce.1705 = f32[] reduce(%convert.5085, %constant.3956), dimensions={0}, to_apply=%region_2177.47172
  %convert.5086 = bf16[] convert(%reduce.1705)
  %add.7575 = bf16[] add(%add.7574, %convert.5086)
  %multiply.9691 = bf16[4096]{0} multiply(%add.5715, %add.5715)
  %convert.5087 = f32[4096]{0} convert(%multiply.9691)
  %reduce.1706 = f32[] reduce(%convert.5087, %constant.3956), dimensions={0}, to_apply=%region_2178.47181
  %convert.5088 = bf16[] convert(%reduce.1706)
  %add.7576 = bf16[] add(%add.7575, %convert.5088)
  %multiply.9692 = bf16[512,8,128]{2,1,0} multiply(%add.5721, %add.5721)
  %convert.5089 = f32[512,8,128]{2,1,0} convert(%multiply.9692)
  %reduce.1707 = f32[] reduce(%convert.5089, %constant.3956), dimensions={0,1,2}, to_apply=%region_2179.47190
  %all-reduce.781 = f32[] all-reduce(%reduce.1707), channel_id=1872, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2179.47190.clone
  %convert.5090 = bf16[] convert(%all-reduce.781)
  %add.7577 = bf16[] add(%add.7576, %convert.5090)
  %multiply.9693 = bf16[32,128,512]{2,1,0} multiply(%add.5726, %add.5726)
  %convert.5091 = f32[32,128,512]{2,1,0} convert(%multiply.9693)
  %reduce.1708 = f32[] reduce(%convert.5091, %constant.3956), dimensions={0,1,2}, to_apply=%region_2180.47199
  %all-reduce.782 = f32[] all-reduce(%reduce.1708), channel_id=1873, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2180.47199.clone
  %convert.5092 = bf16[] convert(%all-reduce.782)
  %add.7578 = bf16[] add(%add.7577, %convert.5092)
  %multiply.9695 = bf16[512,32,128]{2,1,0} multiply(%add.5732, %add.5732)
  %convert.5093 = f32[512,32,128]{2,1,0} convert(%multiply.9695)
  %reduce.1709 = f32[] reduce(%convert.5093, %constant.3956), dimensions={0,1,2}, to_apply=%region_2181.47208
  %all-reduce.783 = f32[] all-reduce(%reduce.1709), channel_id=1874, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2181.47208.clone
  %convert.5094 = bf16[] convert(%all-reduce.783)
  %add.7579 = bf16[] add(%add.7578, %convert.5094)
  %multiply.9696 = bf16[512,8,128]{2,1,0} multiply(%add.5737, %add.5737)
  %convert.5095 = f32[512,8,128]{2,1,0} convert(%multiply.9696)
  %reduce.1711 = f32[] reduce(%convert.5095, %constant.3956), dimensions={0,1,2}, to_apply=%region_2182.47217
  %all-reduce.784 = f32[] all-reduce(%reduce.1711), channel_id=1875, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2182.47217.clone
  %convert.5096 = bf16[] convert(%all-reduce.784)
  %add.7580 = bf16[] add(%add.7579, %convert.5096)
  %multiply.9697 = bf16[512,8]{1,0} multiply(%add.5743, %add.5743)
  %convert.5097 = f32[512,8]{1,0} convert(%multiply.9697)
  %reduce.1712 = f32[] reduce(%convert.5097, %constant.3956), dimensions={0,1}, to_apply=%region_2183.47226
  %all-reduce.785 = f32[] all-reduce(%reduce.1712), channel_id=1876, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2183.47226.clone
  %convert.5098 = bf16[] convert(%all-reduce.785)
  %add.7581 = bf16[] add(%add.7580, %convert.5098)
  %multiply.9698 = bf16[1,4096,14336]{2,1,0} multiply(%add.5748, %add.5748)
  %convert.5099 = f32[1,4096,14336]{2,1,0} convert(%multiply.9698)
  %reduce.1713 = f32[] reduce(%convert.5099, %constant.3956), dimensions={0,1,2}, to_apply=%region_2184.47235
  %all-reduce.786 = f32[] all-reduce(%reduce.1713), channel_id=1877, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2184.47235.clone
  %convert.5100 = bf16[] convert(%all-reduce.786)
  %add.7582 = bf16[] add(%add.7581, %convert.5100)
  %multiply.9699 = bf16[1,4096,14336]{2,1,0} multiply(%add.5753, %add.5753)
  %convert.5101 = f32[1,4096,14336]{2,1,0} convert(%multiply.9699)
  %reduce.1714 = f32[] reduce(%convert.5101, %constant.3956), dimensions={0,1,2}, to_apply=%region_2185.47244
  %all-reduce.787 = f32[] all-reduce(%reduce.1714), channel_id=1878, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2185.47244.clone
  %convert.5102 = bf16[] convert(%all-reduce.787)
  %add.7583 = bf16[] add(%add.7582, %convert.5102)
  %multiply.9700 = bf16[1,14336,4096]{2,1,0} multiply(%add.5758, %add.5758)
  %convert.5103 = f32[1,14336,4096]{2,1,0} convert(%multiply.9700)
  %reduce.1715 = f32[] reduce(%convert.5103, %constant.3956), dimensions={0,1,2}, to_apply=%region_2186.47253
  %all-reduce.788 = f32[] all-reduce(%reduce.1715), channel_id=1879, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2186.47253.clone
  %convert.5104 = bf16[] convert(%all-reduce.788)
  %add.7584 = bf16[] add(%add.7583, %convert.5104)
  %multiply.9702 = bf16[4096]{0} multiply(%add.5763, %add.5763)
  %convert.5105 = f32[4096]{0} convert(%multiply.9702)
  %reduce.1716 = f32[] reduce(%convert.5105, %constant.3956), dimensions={0}, to_apply=%region_2187.47262
  %convert.5106 = bf16[] convert(%reduce.1716)
  %add.7585 = bf16[] add(%add.7584, %convert.5106)
  %multiply.9703 = bf16[4096]{0} multiply(%add.5768, %add.5768)
  %convert.5107 = f32[4096]{0} convert(%multiply.9703)
  %reduce.1717 = f32[] reduce(%convert.5107, %constant.3956), dimensions={0}, to_apply=%region_2188.47271
  %convert.5108 = bf16[] convert(%reduce.1717)
  %add.7586 = bf16[] add(%add.7585, %convert.5108)
  %multiply.9704 = bf16[512,8,128]{2,1,0} multiply(%add.5774, %add.5774)
  %convert.5109 = f32[512,8,128]{2,1,0} convert(%multiply.9704)
  %reduce.1718 = f32[] reduce(%convert.5109, %constant.3956), dimensions={0,1,2}, to_apply=%region_2189.47280
  %all-reduce.789 = f32[] all-reduce(%reduce.1718), channel_id=1880, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2189.47280.clone
  %convert.5110 = bf16[] convert(%all-reduce.789)
  %add.7587 = bf16[] add(%add.7586, %convert.5110)
  %multiply.9705 = bf16[32,128,512]{2,1,0} multiply(%add.5780, %add.5780)
  %convert.5111 = f32[32,128,512]{2,1,0} convert(%multiply.9705)
  %reduce.1719 = f32[] reduce(%convert.5111, %constant.3956), dimensions={0,1,2}, to_apply=%region_2190.47289
  %all-reduce.790 = f32[] all-reduce(%reduce.1719), channel_id=1881, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2190.47289.clone
  %convert.5112 = bf16[] convert(%all-reduce.790)
  %add.7588 = bf16[] add(%add.7587, %convert.5112)
  %multiply.9706 = bf16[512,32,128]{2,1,0} multiply(%add.5786, %add.5786)
  %convert.5113 = f32[512,32,128]{2,1,0} convert(%multiply.9706)
  %reduce.1720 = f32[] reduce(%convert.5113, %constant.3956), dimensions={0,1,2}, to_apply=%region_2191.47298
  %all-reduce.791 = f32[] all-reduce(%reduce.1720), channel_id=1882, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2191.47298.clone
  %convert.5114 = bf16[] convert(%all-reduce.791)
  %add.7589 = bf16[] add(%add.7588, %convert.5114)
  %multiply.9707 = bf16[512,8,128]{2,1,0} multiply(%add.5791, %add.5791)
  %convert.5115 = f32[512,8,128]{2,1,0} convert(%multiply.9707)
  %reduce.1721 = f32[] reduce(%convert.5115, %constant.3956), dimensions={0,1,2}, to_apply=%region_2192.47307
  %all-reduce.792 = f32[] all-reduce(%reduce.1721), channel_id=1883, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2192.47307.clone
  %convert.5116 = bf16[] convert(%all-reduce.792)
  %add.7590 = bf16[] add(%add.7589, %convert.5116)
  %multiply.9708 = bf16[512,8]{1,0} multiply(%add.5796, %add.5796)
  %convert.5117 = f32[512,8]{1,0} convert(%multiply.9708)
  %reduce.1723 = f32[] reduce(%convert.5117, %constant.3956), dimensions={0,1}, to_apply=%region_2193.47316
  %all-reduce.793 = f32[] all-reduce(%reduce.1723), channel_id=1884, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2193.47316.clone
  %convert.5119 = bf16[] convert(%all-reduce.793)
  %add.7591 = bf16[] add(%add.7590, %convert.5119)
  %multiply.9709 = bf16[1,4096,14336]{2,1,0} multiply(%add.5801, %add.5801)
  %convert.5120 = f32[1,4096,14336]{2,1,0} convert(%multiply.9709)
  %reduce.1724 = f32[] reduce(%convert.5120, %constant.3956), dimensions={0,1,2}, to_apply=%region_2194.47325
  %all-reduce.794 = f32[] all-reduce(%reduce.1724), channel_id=1885, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2194.47325.clone
  %convert.5121 = bf16[] convert(%all-reduce.794)
  %add.7592 = bf16[] add(%add.7591, %convert.5121)
  %multiply.9710 = bf16[1,4096,14336]{2,1,0} multiply(%add.5806, %add.5806)
  %convert.5122 = f32[1,4096,14336]{2,1,0} convert(%multiply.9710)
  %reduce.1725 = f32[] reduce(%convert.5122, %constant.3956), dimensions={0,1,2}, to_apply=%region_2195.47334
  %all-reduce.795 = f32[] all-reduce(%reduce.1725), channel_id=1886, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2195.47334.clone
  %convert.5123 = bf16[] convert(%all-reduce.795)
  %add.7593 = bf16[] add(%add.7592, %convert.5123)
  %multiply.9711 = bf16[1,14336,4096]{2,1,0} multiply(%add.5811, %add.5811)
  %convert.5124 = f32[1,14336,4096]{2,1,0} convert(%multiply.9711)
  %reduce.1726 = f32[] reduce(%convert.5124, %constant.3956), dimensions={0,1,2}, to_apply=%region_2196.47343
  %all-reduce.796 = f32[] all-reduce(%reduce.1726), channel_id=1887, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2196.47343.clone
  %convert.5126 = bf16[] convert(%all-reduce.796)
  %add.7594 = bf16[] add(%add.7593, %convert.5126)
  %multiply.9712 = bf16[4096]{0} multiply(%add.5816, %add.5816)
  %convert.5127 = f32[4096]{0} convert(%multiply.9712)
  %reduce.1727 = f32[] reduce(%convert.5127, %constant.3956), dimensions={0}, to_apply=%region_2197.47352
  %convert.5128 = bf16[] convert(%reduce.1727)
  %add.7596 = bf16[] add(%add.7594, %convert.5128)
  %multiply.9713 = bf16[4096]{0} multiply(%add.5821, %add.5821)
  %convert.5129 = f32[4096]{0} convert(%multiply.9713)
  %reduce.1728 = f32[] reduce(%convert.5129, %constant.3956), dimensions={0}, to_apply=%region_2198.47361
  %convert.5130 = bf16[] convert(%reduce.1728)
  %add.7597 = bf16[] add(%add.7596, %convert.5130)
  %multiply.9714 = bf16[512,8,128]{2,1,0} multiply(%add.5826, %add.5826)
  %convert.5131 = f32[512,8,128]{2,1,0} convert(%multiply.9714)
  %reduce.1729 = f32[] reduce(%convert.5131, %constant.3956), dimensions={0,1,2}, to_apply=%region_2199.47370
  %all-reduce.797 = f32[] all-reduce(%reduce.1729), channel_id=1888, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2199.47370.clone
  %convert.5132 = bf16[] convert(%all-reduce.797)
  %add.7598 = bf16[] add(%add.7597, %convert.5132)
  %multiply.9715 = bf16[32,128,512]{2,1,0} multiply(%add.5831, %add.5831)
  %convert.5133 = f32[32,128,512]{2,1,0} convert(%multiply.9715)
  %reduce.1730 = f32[] reduce(%convert.5133, %constant.3956), dimensions={0,1,2}, to_apply=%region_2200.47379
  %all-reduce.798 = f32[] all-reduce(%reduce.1730), channel_id=1889, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2200.47379.clone
  %convert.5134 = bf16[] convert(%all-reduce.798)
  %add.7599 = bf16[] add(%add.7598, %convert.5134)
  %multiply.9716 = bf16[512,32,128]{2,1,0} multiply(%add.5836, %add.5836)
  %convert.5135 = f32[512,32,128]{2,1,0} convert(%multiply.9716)
  %reduce.1731 = f32[] reduce(%convert.5135, %constant.3956), dimensions={0,1,2}, to_apply=%region_2201.47388
  %all-reduce.799 = f32[] all-reduce(%reduce.1731), channel_id=1890, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2201.47388.clone
  %convert.5136 = bf16[] convert(%all-reduce.799)
  %add.7600 = bf16[] add(%add.7599, %convert.5136)
  %multiply.9718 = bf16[512,8,128]{2,1,0} multiply(%add.5842, %add.5842)
  %convert.5138 = f32[512,8,128]{2,1,0} convert(%multiply.9718)
  %reduce.1732 = f32[] reduce(%convert.5138, %constant.3956), dimensions={0,1,2}, to_apply=%region_2202.47397
  %all-reduce.800 = f32[] all-reduce(%reduce.1732), channel_id=1891, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2202.47397.clone
  %convert.5139 = bf16[] convert(%all-reduce.800)
  %add.7601 = bf16[] add(%add.7600, %convert.5139)
  %multiply.9719 = bf16[512,8]{1,0} multiply(%add.5847, %add.5847)
  %convert.5140 = f32[512,8]{1,0} convert(%multiply.9719)
  %reduce.1733 = f32[] reduce(%convert.5140, %constant.3956), dimensions={0,1}, to_apply=%region_2203.47406
  %all-reduce.801 = f32[] all-reduce(%reduce.1733), channel_id=1892, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2203.47406.clone
  %convert.5141 = bf16[] convert(%all-reduce.801)
  %add.7603 = bf16[] add(%add.7601, %convert.5141)
  %multiply.9720 = bf16[1,4096,14336]{2,1,0} multiply(%add.5852, %add.5852)
  %convert.5142 = f32[1,4096,14336]{2,1,0} convert(%multiply.9720)
  %reduce.1734 = f32[] reduce(%convert.5142, %constant.3956), dimensions={0,1,2}, to_apply=%region_2204.47415
  %all-reduce.802 = f32[] all-reduce(%reduce.1734), channel_id=1893, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2204.47415.clone
  %convert.5143 = bf16[] convert(%all-reduce.802)
  %add.7604 = bf16[] add(%add.7603, %convert.5143)
  %multiply.9721 = bf16[1,4096,14336]{2,1,0} multiply(%add.5857, %add.5857)
  %convert.5144 = f32[1,4096,14336]{2,1,0} convert(%multiply.9721)
  %reduce.1735 = f32[] reduce(%convert.5144, %constant.3956), dimensions={0,1,2}, to_apply=%region_2205.47424
  %all-reduce.803 = f32[] all-reduce(%reduce.1735), channel_id=1894, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2205.47424.clone
  %convert.5145 = bf16[] convert(%all-reduce.803)
  %add.7605 = bf16[] add(%add.7604, %convert.5145)
  %multiply.9722 = bf16[1,14336,4096]{2,1,0} multiply(%add.5862, %add.5862)
  %convert.5147 = f32[1,14336,4096]{2,1,0} convert(%multiply.9722)
  %reduce.1736 = f32[] reduce(%convert.5147, %constant.3956), dimensions={0,1,2}, to_apply=%region_2206.47433
  %all-reduce.804 = f32[] all-reduce(%reduce.1736), channel_id=1895, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2206.47433.clone
  %convert.5148 = bf16[] convert(%all-reduce.804)
  %add.7606 = bf16[] add(%add.7605, %convert.5148)
  %multiply.9723 = bf16[4096]{0} multiply(%add.5867, %add.5867)
  %convert.5149 = f32[4096]{0} convert(%multiply.9723)
  %reduce.1737 = f32[] reduce(%convert.5149, %constant.3956), dimensions={0}, to_apply=%region_2207.47442
  %convert.5150 = bf16[] convert(%reduce.1737)
  %add.7608 = bf16[] add(%add.7606, %convert.5150)
  %multiply.9724 = bf16[4096]{0} multiply(%add.5872, %add.5872)
  %convert.5151 = f32[4096]{0} convert(%multiply.9724)
  %reduce.1738 = f32[] reduce(%convert.5151, %constant.3956), dimensions={0}, to_apply=%region_2208.47451
  %convert.5152 = bf16[] convert(%reduce.1738)
  %add.7609 = bf16[] add(%add.7608, %convert.5152)
  %multiply.9725 = bf16[512,8,128]{2,1,0} multiply(%add.5877, %add.5877)
  %convert.5153 = f32[512,8,128]{2,1,0} convert(%multiply.9725)
  %reduce.1739 = f32[] reduce(%convert.5153, %constant.3956), dimensions={0,1,2}, to_apply=%region_2209.47460
  %all-reduce.805 = f32[] all-reduce(%reduce.1739), channel_id=1896, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2209.47460.clone
  %convert.5154 = bf16[] convert(%all-reduce.805)
  %add.7610 = bf16[] add(%add.7609, %convert.5154)
  %multiply.9726 = bf16[32,128,512]{2,1,0} multiply(%add.5883, %add.5883)
  %convert.5155 = f32[32,128,512]{2,1,0} convert(%multiply.9726)
  %reduce.1740 = f32[] reduce(%convert.5155, %constant.3956), dimensions={0,1,2}, to_apply=%region_2210.47469
  %all-reduce.806 = f32[] all-reduce(%reduce.1740), channel_id=1897, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2210.47469.clone
  %convert.5156 = bf16[] convert(%all-reduce.806)
  %add.7611 = bf16[] add(%add.7610, %convert.5156)
  %multiply.9728 = bf16[512,32,128]{2,1,0} multiply(%add.5888, %add.5888)
  %convert.5157 = f32[512,32,128]{2,1,0} convert(%multiply.9728)
  %reduce.1741 = f32[] reduce(%convert.5157, %constant.3956), dimensions={0,1,2}, to_apply=%region_2211.47478
  %all-reduce.807 = f32[] all-reduce(%reduce.1741), channel_id=1898, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2211.47478.clone
  %convert.5158 = bf16[] convert(%all-reduce.807)
  %add.7612 = bf16[] add(%add.7611, %convert.5158)
  %multiply.9729 = bf16[512,8,128]{2,1,0} multiply(%add.5893, %add.5893)
  %convert.5159 = f32[512,8,128]{2,1,0} convert(%multiply.9729)
  %reduce.1742 = f32[] reduce(%convert.5159, %constant.3956), dimensions={0,1,2}, to_apply=%region_2212.47487
  %all-reduce.808 = f32[] all-reduce(%reduce.1742), channel_id=1899, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2212.47487.clone
  %convert.5160 = bf16[] convert(%all-reduce.808)
  %add.7613 = bf16[] add(%add.7612, %convert.5160)
  %multiply.9730 = bf16[512,8]{1,0} multiply(%add.5898, %add.5898)
  %convert.5161 = f32[512,8]{1,0} convert(%multiply.9730)
  %reduce.1743 = f32[] reduce(%convert.5161, %constant.3956), dimensions={0,1}, to_apply=%region_2213.47496
  %all-reduce.809 = f32[] all-reduce(%reduce.1743), channel_id=1900, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2213.47496.clone
  %convert.5162 = bf16[] convert(%all-reduce.809)
  %add.7614 = bf16[] add(%add.7613, %convert.5162)
  %multiply.9731 = bf16[1,4096,14336]{2,1,0} multiply(%add.5903, %add.5903)
  %convert.5163 = f32[1,4096,14336]{2,1,0} convert(%multiply.9731)
  %reduce.1744 = f32[] reduce(%convert.5163, %constant.3956), dimensions={0,1,2}, to_apply=%region_2214.47505
  %all-reduce.810 = f32[] all-reduce(%reduce.1744), channel_id=1901, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2214.47505.clone
  %convert.5164 = bf16[] convert(%all-reduce.810)
  %add.7615 = bf16[] add(%add.7614, %convert.5164)
  %multiply.9732 = bf16[1,4096,14336]{2,1,0} multiply(%add.5908, %add.5908)
  %convert.5165 = f32[1,4096,14336]{2,1,0} convert(%multiply.9732)
  %reduce.1745 = f32[] reduce(%convert.5165, %constant.3956), dimensions={0,1,2}, to_apply=%region_2215.47514
  %all-reduce.811 = f32[] all-reduce(%reduce.1745), channel_id=1902, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2215.47514.clone
  %convert.5167 = bf16[] convert(%all-reduce.811)
  %add.7616 = bf16[] add(%add.7615, %convert.5167)
  %multiply.9733 = bf16[1,14336,4096]{2,1,0} multiply(%add.5914, %add.5914)
  %convert.5168 = f32[1,14336,4096]{2,1,0} convert(%multiply.9733)
  %reduce.1746 = f32[] reduce(%convert.5168, %constant.3956), dimensions={0,1,2}, to_apply=%region_2216.47523
  %all-reduce.812 = f32[] all-reduce(%reduce.1746), channel_id=1903, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2216.47523.clone
  %convert.5169 = bf16[] convert(%all-reduce.812)
  %add.7617 = bf16[] add(%add.7616, %convert.5169)
  %multiply.9734 = bf16[4096]{0} multiply(%add.5920, %add.5920)
  %convert.5170 = f32[4096]{0} convert(%multiply.9734)
  %reduce.1747 = f32[] reduce(%convert.5170, %constant.3956), dimensions={0}, to_apply=%region_2217.47532
  %convert.5171 = bf16[] convert(%reduce.1747)
  %add.7618 = bf16[] add(%add.7617, %convert.5171)
  %multiply.9735 = bf16[4096]{0} multiply(%add.5925, %add.5925)
  %convert.5172 = f32[4096]{0} convert(%multiply.9735)
  %reduce.1748 = f32[] reduce(%convert.5172, %constant.3956), dimensions={0}, to_apply=%region_2218.47541
  %convert.5173 = bf16[] convert(%reduce.1748)
  %add.7619 = bf16[] add(%add.7618, %convert.5173)
  %multiply.9736 = bf16[512,8,128]{2,1,0} multiply(%add.5930, %add.5930)
  %convert.5174 = f32[512,8,128]{2,1,0} convert(%multiply.9736)
  %reduce.1749 = f32[] reduce(%convert.5174, %constant.3956), dimensions={0,1,2}, to_apply=%region_2219.47550
  %all-reduce.813 = f32[] all-reduce(%reduce.1749), channel_id=1904, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2219.47550.clone
  %convert.5175 = bf16[] convert(%all-reduce.813)
  %add.7620 = bf16[] add(%add.7619, %convert.5175)
  %multiply.9737 = bf16[32,128,512]{2,1,0} multiply(%add.5936, %add.5936)
  %convert.5176 = f32[32,128,512]{2,1,0} convert(%multiply.9737)
  %reduce.1750 = f32[] reduce(%convert.5176, %constant.3956), dimensions={0,1,2}, to_apply=%region_2220.47559
  %all-reduce.814 = f32[] all-reduce(%reduce.1750), channel_id=1905, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2220.47559.clone
  %convert.5177 = bf16[] convert(%all-reduce.814)
  %add.7621 = bf16[] add(%add.7620, %convert.5177)
  %multiply.9738 = bf16[512,32,128]{2,1,0} multiply(%add.5942, %add.5942)
  %convert.5178 = f32[512,32,128]{2,1,0} convert(%multiply.9738)
  %reduce.1751 = f32[] reduce(%convert.5178, %constant.3956), dimensions={0,1,2}, to_apply=%region_2221.47568
  %all-reduce.815 = f32[] all-reduce(%reduce.1751), channel_id=1906, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2221.47568.clone
  %convert.5179 = bf16[] convert(%all-reduce.815)
  %add.7622 = bf16[] add(%add.7621, %convert.5179)
  %multiply.9739 = bf16[512,8,128]{2,1,0} multiply(%add.5948, %add.5948)
  %convert.5180 = f32[512,8,128]{2,1,0} convert(%multiply.9739)
  %reduce.1752 = f32[] reduce(%convert.5180, %constant.3956), dimensions={0,1,2}, to_apply=%region_2222.47577
  %all-reduce.816 = f32[] all-reduce(%reduce.1752), channel_id=1907, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2222.47577.clone
  %convert.5182 = bf16[] convert(%all-reduce.816)
  %add.7623 = bf16[] add(%add.7622, %convert.5182)
  %multiply.9741 = bf16[512,8]{1,0} multiply(%add.5953, %add.5953)
  %convert.5183 = f32[512,8]{1,0} convert(%multiply.9741)
  %reduce.1753 = f32[] reduce(%convert.5183, %constant.3956), dimensions={0,1}, to_apply=%region_2223.47586
  %all-reduce.817 = f32[] all-reduce(%reduce.1753), channel_id=1908, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2223.47586.clone
  %convert.5184 = bf16[] convert(%all-reduce.817)
  %add.7624 = bf16[] add(%add.7623, %convert.5184)
  %multiply.9742 = bf16[1,4096,14336]{2,1,0} multiply(%add.5958, %add.5958)
  %convert.5185 = f32[1,4096,14336]{2,1,0} convert(%multiply.9742)
  %reduce.1754 = f32[] reduce(%convert.5185, %constant.3956), dimensions={0,1,2}, to_apply=%region_2224.47595
  %all-reduce.818 = f32[] all-reduce(%reduce.1754), channel_id=1909, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2224.47595.clone
  %convert.5186 = bf16[] convert(%all-reduce.818)
  %add.7625 = bf16[] add(%add.7624, %convert.5186)
  %multiply.9743 = bf16[1,4096,14336]{2,1,0} multiply(%add.5963, %add.5963)
  %convert.5187 = f32[1,4096,14336]{2,1,0} convert(%multiply.9743)
  %reduce.1755 = f32[] reduce(%convert.5187, %constant.3956), dimensions={0,1,2}, to_apply=%region_2225.47604
  %all-reduce.819 = f32[] all-reduce(%reduce.1755), channel_id=1910, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2225.47604.clone
  %convert.5188 = bf16[] convert(%all-reduce.819)
  %add.7626 = bf16[] add(%add.7625, %convert.5188)
  %multiply.9744 = bf16[1,14336,4096]{2,1,0} multiply(%add.5968, %add.5968)
  %convert.5189 = f32[1,14336,4096]{2,1,0} convert(%multiply.9744)
  %reduce.1756 = f32[] reduce(%convert.5189, %constant.3956), dimensions={0,1,2}, to_apply=%region_2226.47613
  %all-reduce.820 = f32[] all-reduce(%reduce.1756), channel_id=1911, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2226.47613.clone
  %convert.5190 = bf16[] convert(%all-reduce.820)
  %add.7627 = bf16[] add(%add.7626, %convert.5190)
  %multiply.9745 = bf16[4096]{0} multiply(%add.5973, %add.5973)
  %convert.5191 = f32[4096]{0} convert(%multiply.9745)
  %reduce.1757 = f32[] reduce(%convert.5191, %constant.3956), dimensions={0}, to_apply=%region_2227.47622
  %convert.5192 = bf16[] convert(%reduce.1757)
  %add.7628 = bf16[] add(%add.7627, %convert.5192)
  %multiply.9747 = bf16[4096]{0} multiply(%add.5979, %add.5979)
  %convert.5193 = f32[4096]{0} convert(%multiply.9747)
  %reduce.1758 = f32[] reduce(%convert.5193, %constant.3956), dimensions={0}, to_apply=%region_2228.47631
  %convert.5194 = bf16[] convert(%reduce.1758)
  %add.7629 = bf16[] add(%add.7628, %convert.5194)
  %multiply.9748 = bf16[512,8,128]{2,1,0} multiply(%add.5984, %add.5984)
  %convert.5195 = f32[512,8,128]{2,1,0} convert(%multiply.9748)
  %reduce.1759 = f32[] reduce(%convert.5195, %constant.3956), dimensions={0,1,2}, to_apply=%region_2229.47640
  %all-reduce.821 = f32[] all-reduce(%reduce.1759), channel_id=1912, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2229.47640.clone
  %convert.5197 = bf16[] convert(%all-reduce.821)
  %add.7630 = bf16[] add(%add.7629, %convert.5197)
  %multiply.9749 = bf16[32,128,512]{2,1,0} multiply(%add.5989, %add.5989)
  %convert.5198 = f32[32,128,512]{2,1,0} convert(%multiply.9749)
  %reduce.1760 = f32[] reduce(%convert.5198, %constant.3956), dimensions={0,1,2}, to_apply=%region_2230.47649
  %all-reduce.822 = f32[] all-reduce(%reduce.1760), channel_id=1913, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2230.47649.clone
  %convert.5200 = bf16[] convert(%all-reduce.822)
  %add.7631 = bf16[] add(%add.7630, %convert.5200)
  %multiply.9750 = bf16[512,32,128]{2,1,0} multiply(%add.5997, %add.5997)
  %convert.5201 = f32[512,32,128]{2,1,0} convert(%multiply.9750)
  %reduce.1761 = f32[] reduce(%convert.5201, %constant.3956), dimensions={0,1,2}, to_apply=%region_2231.47658
  %all-reduce.823 = f32[] all-reduce(%reduce.1761), channel_id=1914, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2231.47658.clone
  %convert.5202 = bf16[] convert(%all-reduce.823)
  %add.7632 = bf16[] add(%add.7631, %convert.5202)
  %multiply.9751 = bf16[512,8,128]{2,1,0} multiply(%add.6002, %add.6002)
  %convert.5203 = f32[512,8,128]{2,1,0} convert(%multiply.9751)
  %reduce.1762 = f32[] reduce(%convert.5203, %constant.3956), dimensions={0,1,2}, to_apply=%region_2232.47667
  %all-reduce.824 = f32[] all-reduce(%reduce.1762), channel_id=1915, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2232.47667.clone
  %convert.5204 = bf16[] convert(%all-reduce.824)
  %add.7633 = bf16[] add(%add.7632, %convert.5204)
  %multiply.9752 = bf16[512,8]{1,0} multiply(%add.6007, %add.6007)
  %convert.5205 = f32[512,8]{1,0} convert(%multiply.9752)
  %reduce.1763 = f32[] reduce(%convert.5205, %constant.3956), dimensions={0,1}, to_apply=%region_2233.47676
  %all-reduce.825 = f32[] all-reduce(%reduce.1763), channel_id=1916, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2233.47676.clone
  %convert.5206 = bf16[] convert(%all-reduce.825)
  %add.7634 = bf16[] add(%add.7633, %convert.5206)
  %multiply.9753 = bf16[1,4096,14336]{2,1,0} multiply(%add.6013, %add.6013)
  %convert.5207 = f32[1,4096,14336]{2,1,0} convert(%multiply.9753)
  %reduce.1764 = f32[] reduce(%convert.5207, %constant.3956), dimensions={0,1,2}, to_apply=%region_2234.47685
  %all-reduce.826 = f32[] all-reduce(%reduce.1764), channel_id=1917, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2234.47685.clone
  %convert.5208 = bf16[] convert(%all-reduce.826)
  %add.7635 = bf16[] add(%add.7634, %convert.5208)
  %multiply.9754 = bf16[1,4096,14336]{2,1,0} multiply(%add.6018, %add.6018)
  %convert.5210 = f32[1,4096,14336]{2,1,0} convert(%multiply.9754)
  %reduce.1765 = f32[] reduce(%convert.5210, %constant.3956), dimensions={0,1,2}, to_apply=%region_2235.47694
  %all-reduce.827 = f32[] all-reduce(%reduce.1765), channel_id=1918, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2235.47694.clone
  %convert.5212 = bf16[] convert(%all-reduce.827)
  %add.7636 = bf16[] add(%add.7635, %convert.5212)
  %multiply.9756 = bf16[1,14336,4096]{2,1,0} multiply(%add.6024, %add.6024)
  %convert.5213 = f32[1,14336,4096]{2,1,0} convert(%multiply.9756)
  %reduce.1766 = f32[] reduce(%convert.5213, %constant.3956), dimensions={0,1,2}, to_apply=%region_2236.47703
  %all-reduce.828 = f32[] all-reduce(%reduce.1766), channel_id=1919, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2236.47703.clone
  %convert.5214 = bf16[] convert(%all-reduce.828)
  %add.7637 = bf16[] add(%add.7636, %convert.5214)
  %multiply.9757 = bf16[4096]{0} multiply(%add.6029, %add.6029)
  %convert.5215 = f32[4096]{0} convert(%multiply.9757)
  %reduce.1767 = f32[] reduce(%convert.5215, %constant.3956), dimensions={0}, to_apply=%region_2237.47712
  %convert.5216 = bf16[] convert(%reduce.1767)
  %add.7638 = bf16[] add(%add.7637, %convert.5216)
  %multiply.9758 = bf16[4096]{0} multiply(%add.6035, %add.6035)
  %convert.5217 = f32[4096]{0} convert(%multiply.9758)
  %reduce.1768 = f32[] reduce(%convert.5217, %constant.3956), dimensions={0}, to_apply=%region_2238.47721
  %convert.5218 = bf16[] convert(%reduce.1768)
  %add.7639 = bf16[] add(%add.7638, %convert.5218)
  %multiply.9759 = bf16[512,8,128]{2,1,0} multiply(%add.6040, %add.6040)
  %convert.5219 = f32[512,8,128]{2,1,0} convert(%multiply.9759)
  %reduce.1769 = f32[] reduce(%convert.5219, %constant.3956), dimensions={0,1,2}, to_apply=%region_2239.47730
  %all-reduce.829 = f32[] all-reduce(%reduce.1769), channel_id=1920, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2239.47730.clone
  %convert.5220 = bf16[] convert(%all-reduce.829)
  %add.7640 = bf16[] add(%add.7639, %convert.5220)
  %multiply.9760 = bf16[32,128,512]{2,1,0} multiply(%add.6046, %add.6046)
  %convert.5221 = f32[32,128,512]{2,1,0} convert(%multiply.9760)
  %reduce.1770 = f32[] reduce(%convert.5221, %constant.3956), dimensions={0,1,2}, to_apply=%region_2240.47739
  %all-reduce.830 = f32[] all-reduce(%reduce.1770), channel_id=1921, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2240.47739.clone
  %convert.5222 = bf16[] convert(%all-reduce.830)
  %add.7641 = bf16[] add(%add.7640, %convert.5222)
  %multiply.9761 = bf16[512,32,128]{2,1,0} multiply(%add.6051, %add.6051)
  %convert.5223 = f32[512,32,128]{2,1,0} convert(%multiply.9761)
  %reduce.1771 = f32[] reduce(%convert.5223, %constant.3956), dimensions={0,1,2}, to_apply=%region_2241.47748
  %all-reduce.831 = f32[] all-reduce(%reduce.1771), channel_id=1922, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2241.47748.clone
  %convert.5224 = bf16[] convert(%all-reduce.831)
  %add.7642 = bf16[] add(%add.7641, %convert.5224)
  %multiply.9762 = bf16[512,8,128]{2,1,0} multiply(%add.6056, %add.6056)
  %convert.5225 = f32[512,8,128]{2,1,0} convert(%multiply.9762)
  %reduce.1772 = f32[] reduce(%convert.5225, %constant.3956), dimensions={0,1,2}, to_apply=%region_2242.47757
  %all-reduce.832 = f32[] all-reduce(%reduce.1772), channel_id=1923, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2242.47757.clone
  %convert.5226 = bf16[] convert(%all-reduce.832)
  %add.7643 = bf16[] add(%add.7642, %convert.5226)
  %multiply.9763 = bf16[512,8]{1,0} multiply(%add.6061, %add.6061)
  %convert.5227 = f32[512,8]{1,0} convert(%multiply.9763)
  %reduce.1773 = f32[] reduce(%convert.5227, %constant.3956), dimensions={0,1}, to_apply=%region_2243.47766
  %all-reduce.833 = f32[] all-reduce(%reduce.1773), channel_id=1924, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2243.47766.clone
  %convert.5228 = bf16[] convert(%all-reduce.833)
  %add.7644 = bf16[] add(%add.7643, %convert.5228)
  %multiply.9764 = bf16[1,4096,14336]{2,1,0} multiply(%add.6066, %add.6066)
  %convert.5229 = f32[1,4096,14336]{2,1,0} convert(%multiply.9764)
  %reduce.1774 = f32[] reduce(%convert.5229, %constant.3956), dimensions={0,1,2}, to_apply=%region_2244.47775
  %all-reduce.834 = f32[] all-reduce(%reduce.1774), channel_id=1925, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2244.47775.clone
  %convert.5230 = bf16[] convert(%all-reduce.834)
  %add.7645 = bf16[] add(%add.7644, %convert.5230)
  %multiply.9765 = bf16[1,4096,14336]{2,1,0} multiply(%add.6071, %add.6071)
  %convert.5231 = f32[1,4096,14336]{2,1,0} convert(%multiply.9765)
  %reduce.1775 = f32[] reduce(%convert.5231, %constant.3956), dimensions={0,1,2}, to_apply=%region_2245.47784
  %all-reduce.835 = f32[] all-reduce(%reduce.1775), channel_id=1926, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2245.47784.clone
  %convert.5232 = bf16[] convert(%all-reduce.835)
  %add.7646 = bf16[] add(%add.7645, %convert.5232)
  %multiply.9766 = bf16[1,14336,4096]{2,1,0} multiply(%add.6077, %add.6077)
  %convert.5233 = f32[1,14336,4096]{2,1,0} convert(%multiply.9766)
  %reduce.1776 = f32[] reduce(%convert.5233, %constant.3956), dimensions={0,1,2}, to_apply=%region_2246.47793
  %all-reduce.836 = f32[] all-reduce(%reduce.1776), channel_id=1927, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2246.47793.clone
  %convert.5234 = bf16[] convert(%all-reduce.836)
  %add.7647 = bf16[] add(%add.7646, %convert.5234)
  %multiply.9767 = bf16[4096]{0} multiply(%add.6083, %add.6083)
  %convert.5235 = f32[4096]{0} convert(%multiply.9767)
  %reduce.1777 = f32[] reduce(%convert.5235, %constant.3956), dimensions={0}, to_apply=%region_2247.47802
  %convert.5237 = bf16[] convert(%reduce.1777)
  %add.7648 = bf16[] add(%add.7647, %convert.5237)
  %multiply.9768 = bf16[4096]{0} multiply(%add.6089, %add.6089)
  %convert.5238 = f32[4096]{0} convert(%multiply.9768)
  %reduce.1778 = f32[] reduce(%convert.5238, %constant.3956), dimensions={0}, to_apply=%region_2248.47811
  %convert.5240 = bf16[] convert(%reduce.1778)
  %add.7649 = bf16[] add(%add.7648, %convert.5240)
  %multiply.9769 = bf16[512,8,128]{2,1,0} multiply(%add.6094, %add.6094)
  %convert.5241 = f32[512,8,128]{2,1,0} convert(%multiply.9769)
  %reduce.1779 = f32[] reduce(%convert.5241, %constant.3956), dimensions={0,1,2}, to_apply=%region_2249.47820
  %all-reduce.837 = f32[] all-reduce(%reduce.1779), channel_id=1928, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2249.47820.clone
  %convert.5242 = bf16[] convert(%all-reduce.837)
  %add.7650 = bf16[] add(%add.7649, %convert.5242)
  %multiply.9770 = bf16[32,128,512]{2,1,0} multiply(%add.6099, %add.6099)
  %convert.5243 = f32[32,128,512]{2,1,0} convert(%multiply.9770)
  %reduce.1781 = f32[] reduce(%convert.5243, %constant.3956), dimensions={0,1,2}, to_apply=%region_2250.47829
  %all-reduce.838 = f32[] all-reduce(%reduce.1781), channel_id=1929, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2250.47829.clone
  %convert.5244 = bf16[] convert(%all-reduce.838)
  %add.7651 = bf16[] add(%add.7650, %convert.5244)
  %multiply.9771 = bf16[512,32,128]{2,1,0} multiply(%add.6104, %add.6104)
  %convert.5245 = f32[512,32,128]{2,1,0} convert(%multiply.9771)
  %reduce.1782 = f32[] reduce(%convert.5245, %constant.3956), dimensions={0,1,2}, to_apply=%region_2251.47838
  %all-reduce.839 = f32[] all-reduce(%reduce.1782), channel_id=1930, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2251.47838.clone
  %convert.5246 = bf16[] convert(%all-reduce.839)
  %add.7652 = bf16[] add(%add.7651, %convert.5246)
  %multiply.9772 = bf16[512,8,128]{2,1,0} multiply(%add.6109, %add.6109)
  %convert.5247 = f32[512,8,128]{2,1,0} convert(%multiply.9772)
  %reduce.1783 = f32[] reduce(%convert.5247, %constant.3956), dimensions={0,1,2}, to_apply=%region_2252.47847
  %all-reduce.840 = f32[] all-reduce(%reduce.1783), channel_id=1931, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2252.47847.clone
  %convert.5248 = bf16[] convert(%all-reduce.840)
  %add.7653 = bf16[] add(%add.7652, %convert.5248)
  %multiply.9773 = bf16[512,8]{1,0} multiply(%add.6114, %add.6114)
  %convert.5250 = f32[512,8]{1,0} convert(%multiply.9773)
  %reduce.1784 = f32[] reduce(%convert.5250, %constant.3956), dimensions={0,1}, to_apply=%region_2253.47856
  %all-reduce.841 = f32[] all-reduce(%reduce.1784), channel_id=1932, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2253.47856.clone
  %convert.5252 = bf16[] convert(%all-reduce.841)
  %add.7654 = bf16[] add(%add.7653, %convert.5252)
  %multiply.9774 = bf16[1,4096,14336]{2,1,0} multiply(%add.6119, %add.6119)
  %convert.5253 = f32[1,4096,14336]{2,1,0} convert(%multiply.9774)
  %reduce.1785 = f32[] reduce(%convert.5253, %constant.3956), dimensions={0,1,2}, to_apply=%region_2254.47865
  %all-reduce.842 = f32[] all-reduce(%reduce.1785), channel_id=1933, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2254.47865.clone
  %convert.5254 = bf16[] convert(%all-reduce.842)
  %add.7655 = bf16[] add(%add.7654, %convert.5254)
  %multiply.9775 = bf16[1,4096,14336]{2,1,0} multiply(%add.6124, %add.6124)
  %convert.5255 = f32[1,4096,14336]{2,1,0} convert(%multiply.9775)
  %reduce.1786 = f32[] reduce(%convert.5255, %constant.3956), dimensions={0,1,2}, to_apply=%region_2255.47874
  %all-reduce.843 = f32[] all-reduce(%reduce.1786), channel_id=1934, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2255.47874.clone
  %convert.5256 = bf16[] convert(%all-reduce.843)
  %add.7656 = bf16[] add(%add.7655, %convert.5256)
  %multiply.9776 = bf16[1,14336,4096]{2,1,0} multiply(%add.6129, %add.6129)
  %convert.5257 = f32[1,14336,4096]{2,1,0} convert(%multiply.9776)
  %reduce.1787 = f32[] reduce(%convert.5257, %constant.3956), dimensions={0,1,2}, to_apply=%region_2256.47883
  %all-reduce.844 = f32[] all-reduce(%reduce.1787), channel_id=1935, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2256.47883.clone
  %convert.5258 = bf16[] convert(%all-reduce.844)
  %add.7657 = bf16[] add(%add.7656, %convert.5258)
  %multiply.9778 = bf16[4096]{0} multiply(%add.6134, %add.6134)
  %convert.5259 = f32[4096]{0} convert(%multiply.9778)
  %reduce.1788 = f32[] reduce(%convert.5259, %constant.3956), dimensions={0}, to_apply=%region_2257.47892
  %convert.5260 = bf16[] convert(%reduce.1788)
  %add.7658 = bf16[] add(%add.7657, %convert.5260)
  %multiply.9779 = bf16[4096]{0} multiply(%add.6139, %add.6139)
  %convert.5261 = f32[4096]{0} convert(%multiply.9779)
  %reduce.1790 = f32[] reduce(%convert.5261, %constant.3956), dimensions={0}, to_apply=%region_2258.47901
  %convert.5262 = bf16[] convert(%reduce.1790)
  %add.7659 = bf16[] add(%add.7658, %convert.5262)
  %multiply.9780 = bf16[512,8,128]{2,1,0} multiply(%add.6145, %add.6145)
  %convert.5263 = f32[512,8,128]{2,1,0} convert(%multiply.9780)
  %reduce.1791 = f32[] reduce(%convert.5263, %constant.3956), dimensions={0,1,2}, to_apply=%region_2259.47910
  %all-reduce.845 = f32[] all-reduce(%reduce.1791), channel_id=1936, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2259.47910.clone
  %convert.5264 = bf16[] convert(%all-reduce.845)
  %add.7660 = bf16[] add(%add.7659, %convert.5264)
  %multiply.9782 = bf16[32,128,512]{2,1,0} multiply(%add.6150, %add.6150)
  %convert.5265 = f32[32,128,512]{2,1,0} convert(%multiply.9782)
  %reduce.1792 = f32[] reduce(%convert.5265, %constant.3956), dimensions={0,1,2}, to_apply=%region_2260.47919
  %all-reduce.846 = f32[] all-reduce(%reduce.1792), channel_id=1937, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2260.47919.clone
  %convert.5266 = bf16[] convert(%all-reduce.846)
  %add.7661 = bf16[] add(%add.7660, %convert.5266)
  %multiply.9783 = bf16[512,32,128]{2,1,0} multiply(%add.6155, %add.6155)
  %convert.5267 = f32[512,32,128]{2,1,0} convert(%multiply.9783)
  %reduce.1793 = f32[] reduce(%convert.5267, %constant.3956), dimensions={0,1,2}, to_apply=%region_2261.47928
  %all-reduce.847 = f32[] all-reduce(%reduce.1793), channel_id=1938, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2261.47928.clone
  %convert.5268 = bf16[] convert(%all-reduce.847)
  %add.7662 = bf16[] add(%add.7661, %convert.5268)
  %multiply.9784 = bf16[512,8,128]{2,1,0} multiply(%add.6160, %add.6160)
  %convert.5269 = f32[512,8,128]{2,1,0} convert(%multiply.9784)
  %reduce.1794 = f32[] reduce(%convert.5269, %constant.3956), dimensions={0,1,2}, to_apply=%region_2262.47937
  %all-reduce.848 = f32[] all-reduce(%reduce.1794), channel_id=1939, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2262.47937.clone
  %convert.5270 = bf16[] convert(%all-reduce.848)
  %add.7664 = bf16[] add(%add.7662, %convert.5270)
  %multiply.9785 = bf16[512,8]{1,0} multiply(%add.6165, %add.6165)
  %convert.5271 = f32[512,8]{1,0} convert(%multiply.9785)
  %reduce.1795 = f32[] reduce(%convert.5271, %constant.3956), dimensions={0,1}, to_apply=%region_2263.47946
  %all-reduce.849 = f32[] all-reduce(%reduce.1795), channel_id=1940, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2263.47946.clone
  %convert.5272 = bf16[] convert(%all-reduce.849)
  %add.7665 = bf16[] add(%add.7664, %convert.5272)
  %multiply.9787 = bf16[1,4096,14336]{2,1,0} multiply(%add.6170, %add.6170)
  %convert.5273 = f32[1,4096,14336]{2,1,0} convert(%multiply.9787)
  %reduce.1796 = f32[] reduce(%convert.5273, %constant.3956), dimensions={0,1,2}, to_apply=%region_2264.47955
  %all-reduce.850 = f32[] all-reduce(%reduce.1796), channel_id=1941, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2264.47955.clone
  %convert.5274 = bf16[] convert(%all-reduce.850)
  %add.7666 = bf16[] add(%add.7665, %convert.5274)
  %multiply.9788 = bf16[1,4096,14336]{2,1,0} multiply(%add.6175, %add.6175)
  %convert.5275 = f32[1,4096,14336]{2,1,0} convert(%multiply.9788)
  %reduce.1797 = f32[] reduce(%convert.5275, %constant.3956), dimensions={0,1,2}, to_apply=%region_2265.47964
  %all-reduce.851 = f32[] all-reduce(%reduce.1797), channel_id=1942, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2265.47964.clone
  %convert.5276 = bf16[] convert(%all-reduce.851)
  %add.7667 = bf16[] add(%add.7666, %convert.5276)
  %multiply.9789 = bf16[1,14336,4096]{2,1,0} multiply(%add.6180, %add.6180)
  %convert.5277 = f32[1,14336,4096]{2,1,0} convert(%multiply.9789)
  %reduce.1798 = f32[] reduce(%convert.5277, %constant.3956), dimensions={0,1,2}, to_apply=%region_2266.47973
  %all-reduce.852 = f32[] all-reduce(%reduce.1798), channel_id=1943, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2266.47973.clone
  %convert.5278 = bf16[] convert(%all-reduce.852)
  %add.7668 = bf16[] add(%add.7667, %convert.5278)
  %multiply.9791 = bf16[4096]{0} multiply(%add.6186, %add.6186)
  %convert.5279 = f32[4096]{0} convert(%multiply.9791)
  %reduce.1799 = f32[] reduce(%convert.5279, %constant.3956), dimensions={0}, to_apply=%region_2267.47982
  %convert.5280 = bf16[] convert(%reduce.1799)
  %add.7669 = bf16[] add(%add.7668, %convert.5280)
  %multiply.9792 = bf16[4096]{0} multiply(%add.6191, %add.6191)
  %convert.5281 = f32[4096]{0} convert(%multiply.9792)
  %reduce.1800 = f32[] reduce(%convert.5281, %constant.3956), dimensions={0}, to_apply=%region_2268.47991
  %convert.5282 = bf16[] convert(%reduce.1800)
  %add.7670 = bf16[] add(%add.7669, %convert.5282)
  %multiply.9793 = bf16[512,8,128]{2,1,0} multiply(%add.6196, %add.6196)
  %convert.5283 = f32[512,8,128]{2,1,0} convert(%multiply.9793)
  %reduce.1801 = f32[] reduce(%convert.5283, %constant.3956), dimensions={0,1,2}, to_apply=%region_2269.48000
  %all-reduce.853 = f32[] all-reduce(%reduce.1801), channel_id=1944, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2269.48000.clone
  %convert.5284 = bf16[] convert(%all-reduce.853)
  %add.7671 = bf16[] add(%add.7670, %convert.5284)
  %multiply.9794 = bf16[32,128,512]{2,1,0} multiply(%add.6201, %add.6201)
  %convert.5285 = f32[32,128,512]{2,1,0} convert(%multiply.9794)
  %reduce.1802 = f32[] reduce(%convert.5285, %constant.3956), dimensions={0,1,2}, to_apply=%region_2270.48009
  %all-reduce.854 = f32[] all-reduce(%reduce.1802), channel_id=1945, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2270.48009.clone
  %convert.5286 = bf16[] convert(%all-reduce.854)
  %add.7672 = bf16[] add(%add.7671, %convert.5286)
  %multiply.9796 = bf16[512,32,128]{2,1,0} multiply(%add.6206, %add.6206)
  %convert.5287 = f32[512,32,128]{2,1,0} convert(%multiply.9796)
  %reduce.1803 = f32[] reduce(%convert.5287, %constant.3956), dimensions={0,1,2}, to_apply=%region_2271.48018
  %all-reduce.855 = f32[] all-reduce(%reduce.1803), channel_id=1946, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2271.48018.clone
  %convert.5288 = bf16[] convert(%all-reduce.855)
  %add.7673 = bf16[] add(%add.7672, %convert.5288)
  %multiply.9797 = bf16[512,8,128]{2,1,0} multiply(%add.6211, %add.6211)
  %convert.5289 = f32[512,8,128]{2,1,0} convert(%multiply.9797)
  %reduce.1804 = f32[] reduce(%convert.5289, %constant.3956), dimensions={0,1,2}, to_apply=%region_2272.48027
  %all-reduce.856 = f32[] all-reduce(%reduce.1804), channel_id=1947, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2272.48027.clone
  %convert.5290 = bf16[] convert(%all-reduce.856)
  %add.7674 = bf16[] add(%add.7673, %convert.5290)
  %multiply.9798 = bf16[512,8]{1,0} multiply(%add.6217, %add.6217)
  %convert.5291 = f32[512,8]{1,0} convert(%multiply.9798)
  %reduce.1805 = f32[] reduce(%convert.5291, %constant.3956), dimensions={0,1}, to_apply=%region_2273.48036
  %all-reduce.857 = f32[] all-reduce(%reduce.1805), channel_id=1948, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2273.48036.clone
  %convert.5292 = bf16[] convert(%all-reduce.857)
  %add.7675 = bf16[] add(%add.7674, %convert.5292)
  %multiply.9799 = bf16[1,4096,14336]{2,1,0} multiply(%add.6223, %add.6223)
  %convert.5293 = f32[1,4096,14336]{2,1,0} convert(%multiply.9799)
  %reduce.1806 = f32[] reduce(%convert.5293, %constant.3956), dimensions={0,1,2}, to_apply=%region_2274.48045
  %all-reduce.858 = f32[] all-reduce(%reduce.1806), channel_id=1949, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2274.48045.clone
  %convert.5294 = bf16[] convert(%all-reduce.858)
  %add.7676 = bf16[] add(%add.7675, %convert.5294)
  %multiply.9800 = bf16[1,4096,14336]{2,1,0} multiply(%add.6228, %add.6228)
  %convert.5295 = f32[1,4096,14336]{2,1,0} convert(%multiply.9800)
  %reduce.1807 = f32[] reduce(%convert.5295, %constant.3956), dimensions={0,1,2}, to_apply=%region_2275.48054
  %all-reduce.859 = f32[] all-reduce(%reduce.1807), channel_id=1950, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2275.48054.clone
  %convert.5296 = bf16[] convert(%all-reduce.859)
  %add.7677 = bf16[] add(%add.7676, %convert.5296)
  %multiply.9801 = bf16[1,14336,4096]{2,1,0} multiply(%add.6233, %add.6233)
  %convert.5297 = f32[1,14336,4096]{2,1,0} convert(%multiply.9801)
  %reduce.1808 = f32[] reduce(%convert.5297, %constant.3956), dimensions={0,1,2}, to_apply=%region_2276.48063
  %all-reduce.860 = f32[] all-reduce(%reduce.1808), channel_id=1951, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2276.48063.clone
  %convert.5298 = bf16[] convert(%all-reduce.860)
  %add.7678 = bf16[] add(%add.7677, %convert.5298)
  %multiply.9802 = bf16[4096]{0} multiply(%add.6239, %add.6239)
  %convert.5300 = f32[4096]{0} convert(%multiply.9802)
  %reduce.1809 = f32[] reduce(%convert.5300, %constant.3956), dimensions={0}, to_apply=%region_2277.48072
  %convert.5301 = bf16[] convert(%reduce.1809)
  %add.7679 = bf16[] add(%add.7678, %convert.5301)
  %multiply.9803 = bf16[4096]{0} multiply(%add.6245, %add.6245)
  %convert.5302 = f32[4096]{0} convert(%multiply.9803)
  %reduce.1810 = f32[] reduce(%convert.5302, %constant.3956), dimensions={0}, to_apply=%region_2278.48081
  %convert.5303 = bf16[] convert(%reduce.1810)
  %add.7680 = bf16[] add(%add.7679, %convert.5303)
  %multiply.9804 = bf16[512,8,128]{2,1,0} multiply(%add.6251, %add.6251)
  %convert.5304 = f32[512,8,128]{2,1,0} convert(%multiply.9804)
  %reduce.1811 = f32[] reduce(%convert.5304, %constant.3956), dimensions={0,1,2}, to_apply=%region_2279.48090
  %all-reduce.861 = f32[] all-reduce(%reduce.1811), channel_id=1952, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2279.48090.clone
  %convert.5305 = bf16[] convert(%all-reduce.861)
  %add.7681 = bf16[] add(%add.7680, %convert.5305)
  %multiply.9805 = bf16[32,128,512]{2,1,0} multiply(%add.6256, %add.6256)
  %convert.5306 = f32[32,128,512]{2,1,0} convert(%multiply.9805)
  %reduce.1812 = f32[] reduce(%convert.5306, %constant.3956), dimensions={0,1,2}, to_apply=%region_2280.48099
  %all-reduce.862 = f32[] all-reduce(%reduce.1812), channel_id=1953, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2280.48099.clone
  %convert.5308 = bf16[] convert(%all-reduce.862)
  %add.7682 = bf16[] add(%add.7681, %convert.5308)
  %multiply.9806 = bf16[512,32,128]{2,1,0} multiply(%add.6261, %add.6261)
  %convert.5309 = f32[512,32,128]{2,1,0} convert(%multiply.9806)
  %reduce.1813 = f32[] reduce(%convert.5309, %constant.3956), dimensions={0,1,2}, to_apply=%region_2281.48108
  %all-reduce.863 = f32[] all-reduce(%reduce.1813), channel_id=1954, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2281.48108.clone
  %convert.5310 = bf16[] convert(%all-reduce.863)
  %add.7683 = bf16[] add(%add.7682, %convert.5310)
  %multiply.9807 = bf16[512,8,128]{2,1,0} multiply(%add.6266, %add.6266)
  %convert.5311 = f32[512,8,128]{2,1,0} convert(%multiply.9807)
  %reduce.1814 = f32[] reduce(%convert.5311, %constant.3956), dimensions={0,1,2}, to_apply=%region_2282.48117
  %all-reduce.864 = f32[] all-reduce(%reduce.1814), channel_id=1955, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2282.48117.clone
  %convert.5312 = bf16[] convert(%all-reduce.864)
  %add.7684 = bf16[] add(%add.7683, %convert.5312)
  %multiply.9808 = bf16[512,8]{1,0} multiply(%add.6271, %add.6271)
  %convert.5313 = f32[512,8]{1,0} convert(%multiply.9808)
  %reduce.1815 = f32[] reduce(%convert.5313, %constant.3956), dimensions={0,1}, to_apply=%region_2283.48126
  %all-reduce.865 = f32[] all-reduce(%reduce.1815), channel_id=1956, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2283.48126.clone
  %convert.5314 = bf16[] convert(%all-reduce.865)
  %add.7685 = bf16[] add(%add.7684, %convert.5314)
  %multiply.9809 = bf16[1,4096,14336]{2,1,0} multiply(%add.6276, %add.6276)
  %convert.5315 = f32[1,4096,14336]{2,1,0} convert(%multiply.9809)
  %reduce.1816 = f32[] reduce(%convert.5315, %constant.3956), dimensions={0,1,2}, to_apply=%region_2284.48135
  %all-reduce.866 = f32[] all-reduce(%reduce.1816), channel_id=1957, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2284.48135.clone
  %convert.5316 = bf16[] convert(%all-reduce.866)
  %add.7686 = bf16[] add(%add.7685, %convert.5316)
  %multiply.9810 = bf16[1,4096,14336]{2,1,0} multiply(%add.6282, %add.6282)
  %convert.5317 = f32[1,4096,14336]{2,1,0} convert(%multiply.9810)
  %reduce.1817 = f32[] reduce(%convert.5317, %constant.3956), dimensions={0,1,2}, to_apply=%region_2285.48144
  %all-reduce.867 = f32[] all-reduce(%reduce.1817), channel_id=1958, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2285.48144.clone
  %convert.5318 = bf16[] convert(%all-reduce.867)
  %add.7687 = bf16[] add(%add.7686, %convert.5318)
  %multiply.9811 = bf16[1,14336,4096]{2,1,0} multiply(%add.6287, %add.6287)
  %convert.5319 = f32[1,14336,4096]{2,1,0} convert(%multiply.9811)
  %reduce.1818 = f32[] reduce(%convert.5319, %constant.3956), dimensions={0,1,2}, to_apply=%region_2286.48153
  %all-reduce.868 = f32[] all-reduce(%reduce.1818), channel_id=1959, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2286.48153.clone
  %convert.5320 = bf16[] convert(%all-reduce.868)
  %add.7688 = bf16[] add(%add.7687, %convert.5320)
  %multiply.9812 = bf16[4096]{0} multiply(%add.6292, %add.6292)
  %convert.5321 = f32[4096]{0} convert(%multiply.9812)
  %reduce.1819 = f32[] reduce(%convert.5321, %constant.3956), dimensions={0}, to_apply=%region_2287.48162
  %convert.5322 = bf16[] convert(%reduce.1819)
  %add.7689 = bf16[] add(%add.7688, %convert.5322)
  %multiply.9813 = bf16[4096]{0} multiply(%add.6299, %add.6299)
  %convert.5323 = f32[4096]{0} convert(%multiply.9813)
  %reduce.1820 = f32[] reduce(%convert.5323, %constant.3956), dimensions={0}, to_apply=%region_2288.48171
  %convert.5324 = bf16[] convert(%reduce.1820)
  %add.7690 = bf16[] add(%add.7689, %convert.5324)
  %multiply.9814 = bf16[512,8,128]{2,1,0} multiply(%add.6305, %add.6305)
  %convert.5325 = f32[512,8,128]{2,1,0} convert(%multiply.9814)
  %reduce.1821 = f32[] reduce(%convert.5325, %constant.3956), dimensions={0,1,2}, to_apply=%region_2289.48180
  %all-reduce.869 = f32[] all-reduce(%reduce.1821), channel_id=1960, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2289.48180.clone
  %convert.5327 = bf16[] convert(%all-reduce.869)
  %add.7691 = bf16[] add(%add.7690, %convert.5327)
  %multiply.9815 = bf16[32,128,512]{2,1,0} multiply(%add.6310, %add.6310)
  %convert.5328 = f32[32,128,512]{2,1,0} convert(%multiply.9815)
  %reduce.1822 = f32[] reduce(%convert.5328, %constant.3956), dimensions={0,1,2}, to_apply=%region_2290.48189
  %all-reduce.870 = f32[] all-reduce(%reduce.1822), channel_id=1961, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2290.48189.clone
  %convert.5329 = bf16[] convert(%all-reduce.870)
  %add.7692 = bf16[] add(%add.7691, %convert.5329)
  %multiply.9816 = bf16[512,32,128]{2,1,0} multiply(%add.6316, %add.6316)
  %convert.5330 = f32[512,32,128]{2,1,0} convert(%multiply.9816)
  %reduce.1823 = f32[] reduce(%convert.5330, %constant.3956), dimensions={0,1,2}, to_apply=%region_2291.48198
  %all-reduce.871 = f32[] all-reduce(%reduce.1823), channel_id=1962, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2291.48198.clone
  %convert.5331 = bf16[] convert(%all-reduce.871)
  %add.7693 = bf16[] add(%add.7692, %convert.5331)
  %multiply.9818 = bf16[512,8,128]{2,1,0} multiply(%add.6321, %add.6321)
  %convert.5332 = f32[512,8,128]{2,1,0} convert(%multiply.9818)
  %reduce.1824 = f32[] reduce(%convert.5332, %constant.3956), dimensions={0,1,2}, to_apply=%region_2292.48207
  %all-reduce.872 = f32[] all-reduce(%reduce.1824), channel_id=1963, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2292.48207.clone
  %convert.5333 = bf16[] convert(%all-reduce.872)
  %add.7694 = bf16[] add(%add.7693, %convert.5333)
  %multiply.9819 = bf16[512,8]{1,0} multiply(%add.6327, %add.6327)
  %convert.5334 = f32[512,8]{1,0} convert(%multiply.9819)
  %reduce.1825 = f32[] reduce(%convert.5334, %constant.3956), dimensions={0,1}, to_apply=%region_2293.48216
  %all-reduce.873 = f32[] all-reduce(%reduce.1825), channel_id=1964, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2293.48216.clone
  %convert.5335 = bf16[] convert(%all-reduce.873)
  %add.7695 = bf16[] add(%add.7694, %convert.5335)
  %multiply.9820 = bf16[1,4096,14336]{2,1,0} multiply(%add.6332, %add.6332)
  %convert.5336 = f32[1,4096,14336]{2,1,0} convert(%multiply.9820)
  %reduce.1826 = f32[] reduce(%convert.5336, %constant.3956), dimensions={0,1,2}, to_apply=%region_2294.48225
  %all-reduce.874 = f32[] all-reduce(%reduce.1826), channel_id=1965, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2294.48225.clone
  %convert.5337 = bf16[] convert(%all-reduce.874)
  %add.7696 = bf16[] add(%add.7695, %convert.5337)
  %multiply.9822 = bf16[1,4096,14336]{2,1,0} multiply(%add.6337, %add.6337)
  %convert.5338 = f32[1,4096,14336]{2,1,0} convert(%multiply.9822)
  %reduce.1827 = f32[] reduce(%convert.5338, %constant.3956), dimensions={0,1,2}, to_apply=%region_2295.48234
  %all-reduce.875 = f32[] all-reduce(%reduce.1827), channel_id=1966, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2295.48234.clone
  %convert.5339 = bf16[] convert(%all-reduce.875)
  %add.7697 = bf16[] add(%add.7696, %convert.5339)
  %multiply.9823 = bf16[1,14336,4096]{2,1,0} multiply(%add.6343, %add.6343)
  %convert.5340 = f32[1,14336,4096]{2,1,0} convert(%multiply.9823)
  %reduce.1829 = f32[] reduce(%convert.5340, %constant.3956), dimensions={0,1,2}, to_apply=%region_2296.48243
  %all-reduce.876 = f32[] all-reduce(%reduce.1829), channel_id=1967, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2296.48243.clone
  %convert.5342 = bf16[] convert(%all-reduce.876)
  %add.7698 = bf16[] add(%add.7697, %convert.5342)
  %multiply.9824 = bf16[4096]{0} multiply(%add.6349, %add.6349)
  %convert.5343 = f32[4096]{0} convert(%multiply.9824)
  %reduce.1830 = f32[] reduce(%convert.5343, %constant.3956), dimensions={0}, to_apply=%region_2297.48252
  %convert.5344 = bf16[] convert(%reduce.1830)
  %add.7699 = bf16[] add(%add.7698, %convert.5344)
  %multiply.9825 = bf16[4096]{0} multiply(%add.6354, %add.6354)
  %convert.5345 = f32[4096]{0} convert(%multiply.9825)
  %reduce.1831 = f32[] reduce(%convert.5345, %constant.3956), dimensions={0}, to_apply=%region_2298.48261
  %convert.5346 = bf16[] convert(%reduce.1831)
  %add.7700 = bf16[] add(%add.7699, %convert.5346)
  %multiply.9827 = bf16[512,8,128]{2,1,0} multiply(%add.6359, %add.6359)
  %convert.5347 = f32[512,8,128]{2,1,0} convert(%multiply.9827)
  %reduce.1832 = f32[] reduce(%convert.5347, %constant.3956), dimensions={0,1,2}, to_apply=%region_2299.48270
  %all-reduce.877 = f32[] all-reduce(%reduce.1832), channel_id=1968, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2299.48270.clone
  %convert.5348 = bf16[] convert(%all-reduce.877)
  %add.7701 = bf16[] add(%add.7700, %convert.5348)
  %multiply.9828 = bf16[32,128,512]{2,1,0} multiply(%add.6364, %add.6364)
  %convert.5349 = f32[32,128,512]{2,1,0} convert(%multiply.9828)
  %reduce.1833 = f32[] reduce(%convert.5349, %constant.3956), dimensions={0,1,2}, to_apply=%region_2300.48279
  %all-reduce.878 = f32[] all-reduce(%reduce.1833), channel_id=1969, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2300.48279.clone
  %convert.5350 = bf16[] convert(%all-reduce.878)
  %add.7702 = bf16[] add(%add.7701, %convert.5350)
  %multiply.9829 = bf16[512,32,128]{2,1,0} multiply(%add.6369, %add.6369)
  %convert.5351 = f32[512,32,128]{2,1,0} convert(%multiply.9829)
  %reduce.1834 = f32[] reduce(%convert.5351, %constant.3956), dimensions={0,1,2}, to_apply=%region_2301.48288
  %all-reduce.879 = f32[] all-reduce(%reduce.1834), channel_id=1970, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2301.48288.clone
  %convert.5352 = bf16[] convert(%all-reduce.879)
  %add.7704 = bf16[] add(%add.7702, %convert.5352)
  %multiply.9831 = bf16[512,8,128]{2,1,0} multiply(%add.6374, %add.6374)
  %convert.5354 = f32[512,8,128]{2,1,0} convert(%multiply.9831)
  %reduce.1835 = f32[] reduce(%convert.5354, %constant.3956), dimensions={0,1,2}, to_apply=%region_2302.48297
  %all-reduce.880 = f32[] all-reduce(%reduce.1835), channel_id=1971, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2302.48297.clone
  %convert.5355 = bf16[] convert(%all-reduce.880)
  %add.7705 = bf16[] add(%add.7704, %convert.5355)
  %multiply.9832 = bf16[512,8]{1,0} multiply(%add.6380, %add.6380)
  %convert.5356 = f32[512,8]{1,0} convert(%multiply.9832)
  %reduce.1836 = f32[] reduce(%convert.5356, %constant.3956), dimensions={0,1}, to_apply=%region_2303.48306
  %all-reduce.881 = f32[] all-reduce(%reduce.1836), channel_id=1972, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2303.48306.clone
  %convert.5357 = bf16[] convert(%all-reduce.881)
  %add.7706 = bf16[] add(%add.7705, %convert.5357)
  %multiply.9833 = bf16[1,4096,14336]{2,1,0} multiply(%add.6385, %add.6385)
  %convert.5358 = f32[1,4096,14336]{2,1,0} convert(%multiply.9833)
  %reduce.1837 = f32[] reduce(%convert.5358, %constant.3956), dimensions={0,1,2}, to_apply=%region_2304.48315
  %all-reduce.882 = f32[] all-reduce(%reduce.1837), channel_id=1973, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2304.48315.clone
  %convert.5359 = bf16[] convert(%all-reduce.882)
  %add.7707 = bf16[] add(%add.7706, %convert.5359)
  %multiply.9834 = bf16[1,4096,14336]{2,1,0} multiply(%add.6392, %add.6392)
  %convert.5360 = f32[1,4096,14336]{2,1,0} convert(%multiply.9834)
  %reduce.1838 = f32[] reduce(%convert.5360, %constant.3956), dimensions={0,1,2}, to_apply=%region_2305.48324
  %all-reduce.883 = f32[] all-reduce(%reduce.1838), channel_id=1974, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2305.48324.clone
  %convert.5361 = bf16[] convert(%all-reduce.883)
  %add.7708 = bf16[] add(%add.7707, %convert.5361)
  %multiply.9835 = bf16[1,14336,4096]{2,1,0} multiply(%add.6397, %add.6397)
  %convert.5362 = f32[1,14336,4096]{2,1,0} convert(%multiply.9835)
  %reduce.1839 = f32[] reduce(%convert.5362, %constant.3956), dimensions={0,1,2}, to_apply=%region_2306.48333
  %all-reduce.884 = f32[] all-reduce(%reduce.1839), channel_id=1975, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2306.48333.clone
  %convert.5363 = bf16[] convert(%all-reduce.884)
  %add.7709 = bf16[] add(%add.7708, %convert.5363)
  %multiply.9836 = bf16[4096]{0} multiply(%add.6402, %add.6402)
  %convert.5364 = f32[4096]{0} convert(%multiply.9836)
  %reduce.1840 = f32[] reduce(%convert.5364, %constant.3956), dimensions={0}, to_apply=%region_2307.48342
  %convert.5365 = bf16[] convert(%reduce.1840)
  %add.7710 = bf16[] add(%add.7709, %convert.5365)
  %multiply.9837 = bf16[4096]{0} multiply(%add.6407, %add.6407)
  %convert.5366 = f32[4096]{0} convert(%multiply.9837)
  %reduce.1841 = f32[] reduce(%convert.5366, %constant.3956), dimensions={0}, to_apply=%region_2308.48351
  %convert.5367 = bf16[] convert(%reduce.1841)
  %add.7711 = bf16[] add(%add.7710, %convert.5367)
  %multiply.9838 = bf16[512,8,128]{2,1,0} multiply(%add.6412, %add.6412)
  %convert.5368 = f32[512,8,128]{2,1,0} convert(%multiply.9838)
  %reduce.1842 = f32[] reduce(%convert.5368, %constant.3956), dimensions={0,1,2}, to_apply=%region_2309.48360
  %all-reduce.885 = f32[] all-reduce(%reduce.1842), channel_id=1976, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2309.48360.clone
  %convert.5369 = bf16[] convert(%all-reduce.885)
  %add.7712 = bf16[] add(%add.7711, %convert.5369)
  %multiply.9839 = bf16[32,128,512]{2,1,0} multiply(%add.6417, %add.6417)
  %convert.5370 = f32[32,128,512]{2,1,0} convert(%multiply.9839)
  %reduce.1843 = f32[] reduce(%convert.5370, %constant.3956), dimensions={0,1,2}, to_apply=%region_2310.48369
  %all-reduce.886 = f32[] all-reduce(%reduce.1843), channel_id=1977, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2310.48369.clone
  %convert.5371 = bf16[] convert(%all-reduce.886)
  %add.7713 = bf16[] add(%add.7712, %convert.5371)
  %multiply.9840 = bf16[512,32,128]{2,1,0} multiply(%add.6422, %add.6422)
  %convert.5372 = f32[512,32,128]{2,1,0} convert(%multiply.9840)
  %reduce.1844 = f32[] reduce(%convert.5372, %constant.3956), dimensions={0,1,2}, to_apply=%region_2311.48378
  %all-reduce.887 = f32[] all-reduce(%reduce.1844), channel_id=1978, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2311.48378.clone
  %convert.5373 = bf16[] convert(%all-reduce.887)
  %add.7714 = bf16[] add(%add.7713, %convert.5373)
  %multiply.9841 = bf16[512,8,128]{2,1,0} multiply(%add.6427, %add.6427)
  %convert.5374 = f32[512,8,128]{2,1,0} convert(%multiply.9841)
  %reduce.1845 = f32[] reduce(%convert.5374, %constant.3956), dimensions={0,1,2}, to_apply=%region_2312.48387
  %all-reduce.888 = f32[] all-reduce(%reduce.1845), channel_id=1979, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2312.48387.clone
  %convert.5375 = bf16[] convert(%all-reduce.888)
  %add.7715 = bf16[] add(%add.7714, %convert.5375)
  %multiply.9842 = bf16[512,8]{1,0} multiply(%add.6432, %add.6432)
  %convert.5377 = f32[512,8]{1,0} convert(%multiply.9842)
  %reduce.1846 = f32[] reduce(%convert.5377, %constant.3956), dimensions={0,1}, to_apply=%region_2313.48396
  %all-reduce.889 = f32[] all-reduce(%reduce.1846), channel_id=1980, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2313.48396.clone
  %convert.5378 = bf16[] convert(%all-reduce.889)
  %add.7716 = bf16[] add(%add.7715, %convert.5378)
  %multiply.9843 = bf16[1,4096,14336]{2,1,0} multiply(%add.6437, %add.6437)
  %convert.5379 = f32[1,4096,14336]{2,1,0} convert(%multiply.9843)
  %reduce.1847 = f32[] reduce(%convert.5379, %constant.3956), dimensions={0,1,2}, to_apply=%region_2314.48405
  %all-reduce.890 = f32[] all-reduce(%reduce.1847), channel_id=1981, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2314.48405.clone
  %convert.5380 = bf16[] convert(%all-reduce.890)
  %add.7717 = bf16[] add(%add.7716, %convert.5380)
  %multiply.9844 = bf16[1,4096,14336]{2,1,0} multiply(%add.6442, %add.6442)
  %convert.5381 = f32[1,4096,14336]{2,1,0} convert(%multiply.9844)
  %reduce.1848 = f32[] reduce(%convert.5381, %constant.3956), dimensions={0,1,2}, to_apply=%region_2315.48414
  %all-reduce.891 = f32[] all-reduce(%reduce.1848), channel_id=1982, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2315.48414.clone
  %convert.5382 = bf16[] convert(%all-reduce.891)
  %add.7718 = bf16[] add(%add.7717, %convert.5382)
  %multiply.9845 = bf16[1,14336,4096]{2,1,0} multiply(%add.6448, %add.6448)
  %convert.5383 = f32[1,14336,4096]{2,1,0} convert(%multiply.9845)
  %reduce.1849 = f32[] reduce(%convert.5383, %constant.3956), dimensions={0,1,2}, to_apply=%region_2316.48423
  %all-reduce.892 = f32[] all-reduce(%reduce.1849), channel_id=1983, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2316.48423.clone
  %convert.5384 = bf16[] convert(%all-reduce.892)
  %add.7719 = bf16[] add(%add.7718, %convert.5384)
  %multiply.9846 = bf16[4096]{0} multiply(%add.6453, %add.6453)
  %convert.5385 = f32[4096]{0} convert(%multiply.9846)
  %reduce.1850 = f32[] reduce(%convert.5385, %constant.3956), dimensions={0}, to_apply=%region_2317.48432
  %convert.5386 = bf16[] convert(%reduce.1850)
  %add.7720 = bf16[] add(%add.7719, %convert.5386)
  %multiply.9847 = bf16[4096]{0} multiply(%add.6458, %add.6458)
  %convert.5387 = f32[4096]{0} convert(%multiply.9847)
  %reduce.1851 = f32[] reduce(%convert.5387, %constant.3956), dimensions={0}, to_apply=%region_2318.48441
  %convert.5388 = bf16[] convert(%reduce.1851)
  %add.7721 = bf16[] add(%add.7720, %convert.5388)
  %multiply.9848 = bf16[512,8,128]{2,1,0} multiply(%add.6463, %add.6463)
  %convert.5389 = f32[512,8,128]{2,1,0} convert(%multiply.9848)
  %reduce.1852 = f32[] reduce(%convert.5389, %constant.3956), dimensions={0,1,2}, to_apply=%region_2319.48450
  %all-reduce.893 = f32[] all-reduce(%reduce.1852), channel_id=1984, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2319.48450.clone
  %convert.5390 = bf16[] convert(%all-reduce.893)
  %add.7722 = bf16[] add(%add.7721, %convert.5390)
  %multiply.9849 = bf16[32,128,512]{2,1,0} multiply(%add.6468, %add.6468)
  %convert.5391 = f32[32,128,512]{2,1,0} convert(%multiply.9849)
  %reduce.1853 = f32[] reduce(%convert.5391, %constant.3956), dimensions={0,1,2}, to_apply=%region_2320.48459
  %all-reduce.894 = f32[] all-reduce(%reduce.1853), channel_id=1985, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2320.48459.clone
  %convert.5392 = bf16[] convert(%all-reduce.894)
  %add.7723 = bf16[] add(%add.7722, %convert.5392)
  %multiply.9850 = bf16[512,32,128]{2,1,0} multiply(%add.6473, %add.6473)
  %convert.5393 = f32[512,32,128]{2,1,0} convert(%multiply.9850)
  %reduce.1854 = f32[] reduce(%convert.5393, %constant.3956), dimensions={0,1,2}, to_apply=%region_2321.48468
  %all-reduce.895 = f32[] all-reduce(%reduce.1854), channel_id=1986, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2321.48468.clone
  %convert.5394 = bf16[] convert(%all-reduce.895)
  %add.7724 = bf16[] add(%add.7723, %convert.5394)
  %multiply.9851 = bf16[512,8,128]{2,1,0} multiply(%add.6478, %add.6478)
  %convert.5395 = f32[512,8,128]{2,1,0} convert(%multiply.9851)
  %reduce.1855 = f32[] reduce(%convert.5395, %constant.3956), dimensions={0,1,2}, to_apply=%region_2322.48477
  %all-reduce.896 = f32[] all-reduce(%reduce.1855), channel_id=1987, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2322.48477.clone
  %convert.5396 = bf16[] convert(%all-reduce.896)
  %add.7725 = bf16[] add(%add.7724, %convert.5396)
  %multiply.9852 = bf16[512,8]{1,0} multiply(%add.6483, %add.6483)
  %convert.5397 = f32[512,8]{1,0} convert(%multiply.9852)
  %reduce.1856 = f32[] reduce(%convert.5397, %constant.3956), dimensions={0,1}, to_apply=%region_2323.48486
  %all-reduce.897 = f32[] all-reduce(%reduce.1856), channel_id=1988, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2323.48486.clone
  %convert.5398 = bf16[] convert(%all-reduce.897)
  %add.7726 = bf16[] add(%add.7725, %convert.5398)
  %multiply.9853 = bf16[1,4096,14336]{2,1,0} multiply(%add.6489, %add.6489)
  %convert.5399 = f32[1,4096,14336]{2,1,0} convert(%multiply.9853)
  %reduce.1857 = f32[] reduce(%convert.5399, %constant.3956), dimensions={0,1,2}, to_apply=%region_2324.48495
  %all-reduce.898 = f32[] all-reduce(%reduce.1857), channel_id=1989, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2324.48495.clone
  %convert.5400 = bf16[] convert(%all-reduce.898)
  %add.7727 = bf16[] add(%add.7726, %convert.5400)
  %multiply.9854 = bf16[1,4096,14336]{2,1,0} multiply(%add.6494, %add.6494)
  %convert.5401 = f32[1,4096,14336]{2,1,0} convert(%multiply.9854)
  %reduce.1858 = f32[] reduce(%convert.5401, %constant.3956), dimensions={0,1,2}, to_apply=%region_2325.48504
  %all-reduce.899 = f32[] all-reduce(%reduce.1858), channel_id=1990, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2325.48504.clone
  %convert.5402 = bf16[] convert(%all-reduce.899)
  %add.7728 = bf16[] add(%add.7727, %convert.5402)
  %multiply.9855 = bf16[1,14336,4096]{2,1,0} multiply(%add.6499, %add.6499)
  %convert.5403 = f32[1,14336,4096]{2,1,0} convert(%multiply.9855)
  %reduce.1859 = f32[] reduce(%convert.5403, %constant.3956), dimensions={0,1,2}, to_apply=%region_2326.48513
  %all-reduce.900 = f32[] all-reduce(%reduce.1859), channel_id=1991, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2326.48513.clone
  %convert.5404 = bf16[] convert(%all-reduce.900)
  %add.7729 = bf16[] add(%add.7728, %convert.5404)
  %multiply.9856 = bf16[4096]{0} multiply(%add.6504, %add.6504)
  %convert.5405 = f32[4096]{0} convert(%multiply.9856)
  %reduce.1860 = f32[] reduce(%convert.5405, %constant.3956), dimensions={0}, to_apply=%region_2327.48522
  %convert.5406 = bf16[] convert(%reduce.1860)
  %add.7730 = bf16[] add(%add.7729, %convert.5406)
  %multiply.9857 = bf16[4096]{0} multiply(%add.6509, %add.6509)
  %convert.5407 = f32[4096]{0} convert(%multiply.9857)
  %reduce.1861 = f32[] reduce(%convert.5407, %constant.3956), dimensions={0}, to_apply=%region_2328.48531
  %convert.5408 = bf16[] convert(%reduce.1861)
  %add.7731 = bf16[] add(%add.7730, %convert.5408)
  %multiply.9858 = bf16[512,8,128]{2,1,0} multiply(%add.6514, %add.6514)
  %convert.5409 = f32[512,8,128]{2,1,0} convert(%multiply.9858)
  %reduce.1862 = f32[] reduce(%convert.5409, %constant.3956), dimensions={0,1,2}, to_apply=%region_2329.48540
  %all-reduce.901 = f32[] all-reduce(%reduce.1862), channel_id=1992, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2329.48540.clone
  %convert.5410 = bf16[] convert(%all-reduce.901)
  %add.7732 = bf16[] add(%add.7731, %convert.5410)
  %multiply.9859 = bf16[32,128,512]{2,1,0} multiply(%add.6520, %add.6520)
  %convert.5411 = f32[32,128,512]{2,1,0} convert(%multiply.9859)
  %reduce.1863 = f32[] reduce(%convert.5411, %constant.3956), dimensions={0,1,2}, to_apply=%region_2330.48549
  %all-reduce.902 = f32[] all-reduce(%reduce.1863), channel_id=1993, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2330.48549.clone
  %convert.5412 = bf16[] convert(%all-reduce.902)
  %add.7733 = bf16[] add(%add.7732, %convert.5412)
  %multiply.9860 = bf16[512,32,128]{2,1,0} multiply(%add.6525, %add.6525)
  %convert.5413 = f32[512,32,128]{2,1,0} convert(%multiply.9860)
  %reduce.1864 = f32[] reduce(%convert.5413, %constant.3956), dimensions={0,1,2}, to_apply=%region_2331.48558
  %all-reduce.903 = f32[] all-reduce(%reduce.1864), channel_id=1994, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2331.48558.clone
  %convert.5414 = bf16[] convert(%all-reduce.903)
  %add.7735 = bf16[] add(%add.7733, %convert.5414)
  %multiply.9861 = bf16[512,8,128]{2,1,0} multiply(%add.6531, %add.6531)
  %convert.5415 = f32[512,8,128]{2,1,0} convert(%multiply.9861)
  %reduce.1865 = f32[] reduce(%convert.5415, %constant.3956), dimensions={0,1,2}, to_apply=%region_2332.48567
  %all-reduce.904 = f32[] all-reduce(%reduce.1865), channel_id=1995, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2332.48567.clone
  %convert.5416 = bf16[] convert(%all-reduce.904)
  %add.7736 = bf16[] add(%add.7735, %convert.5416)
  %multiply.9862 = bf16[512,8]{1,0} multiply(%add.6536, %add.6536)
  %convert.5417 = f32[512,8]{1,0} convert(%multiply.9862)
  %reduce.1866 = f32[] reduce(%convert.5417, %constant.3956), dimensions={0,1}, to_apply=%region_2333.48576
  %all-reduce.905 = f32[] all-reduce(%reduce.1866), channel_id=1996, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2333.48576.clone
  %convert.5418 = bf16[] convert(%all-reduce.905)
  %add.7737 = bf16[] add(%add.7736, %convert.5418)
  %multiply.9863 = bf16[1,4096,14336]{2,1,0} multiply(%add.6542, %add.6542)
  %convert.5419 = f32[1,4096,14336]{2,1,0} convert(%multiply.9863)
  %reduce.1867 = f32[] reduce(%convert.5419, %constant.3956), dimensions={0,1,2}, to_apply=%region_2334.48585
  %all-reduce.906 = f32[] all-reduce(%reduce.1867), channel_id=1997, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2334.48585.clone
  %convert.5420 = bf16[] convert(%all-reduce.906)
  %add.7738 = bf16[] add(%add.7737, %convert.5420)
  %multiply.9864 = bf16[1,4096,14336]{2,1,0} multiply(%add.6548, %add.6548)
  %convert.5421 = f32[1,4096,14336]{2,1,0} convert(%multiply.9864)
  %reduce.1868 = f32[] reduce(%convert.5421, %constant.3956), dimensions={0,1,2}, to_apply=%region_2335.48594
  %all-reduce.907 = f32[] all-reduce(%reduce.1868), channel_id=1998, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2335.48594.clone
  %convert.5423 = bf16[] convert(%all-reduce.907)
  %add.7739 = bf16[] add(%add.7738, %convert.5423)
  %multiply.9865 = bf16[1,14336,4096]{2,1,0} multiply(%add.6554, %add.6554)
  %convert.5424 = f32[1,14336,4096]{2,1,0} convert(%multiply.9865)
  %reduce.1869 = f32[] reduce(%convert.5424, %constant.3956), dimensions={0,1,2}, to_apply=%region_2336.48603
  %all-reduce.908 = f32[] all-reduce(%reduce.1869), channel_id=1999, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2336.48603.clone
  %convert.5425 = bf16[] convert(%all-reduce.908)
  %add.7740 = bf16[] add(%add.7739, %convert.5425)
  %multiply.9866 = bf16[4096]{0} multiply(%add.6559, %add.6559)
  %convert.5426 = f32[4096]{0} convert(%multiply.9866)
  %reduce.1870 = f32[] reduce(%convert.5426, %constant.3956), dimensions={0}, to_apply=%region_2337.48612
  %convert.5427 = bf16[] convert(%reduce.1870)
  %add.7741 = bf16[] add(%add.7740, %convert.5427)
  %multiply.9867 = bf16[4096]{0} multiply(%add.6564, %add.6564)
  %convert.5428 = f32[4096]{0} convert(%multiply.9867)
  %reduce.1871 = f32[] reduce(%convert.5428, %constant.3956), dimensions={0}, to_apply=%region_2338.48621
  %convert.5430 = bf16[] convert(%reduce.1871)
  %add.7743 = bf16[] add(%add.7741, %convert.5430)
  %multiply.9868 = bf16[512,8,128]{2,1,0} multiply(%add.6569, %add.6569)
  %convert.5431 = f32[512,8,128]{2,1,0} convert(%multiply.9868)
  %reduce.1872 = f32[] reduce(%convert.5431, %constant.3956), dimensions={0,1,2}, to_apply=%region_2339.48630
  %all-reduce.909 = f32[] all-reduce(%reduce.1872), channel_id=2000, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2339.48630.clone
  %convert.5432 = bf16[] convert(%all-reduce.909)
  %add.7744 = bf16[] add(%add.7743, %convert.5432)
  %multiply.9869 = bf16[32,128,512]{2,1,0} multiply(%add.6574, %add.6574)
  %convert.5433 = f32[32,128,512]{2,1,0} convert(%multiply.9869)
  %reduce.1873 = f32[] reduce(%convert.5433, %constant.3956), dimensions={0,1,2}, to_apply=%region_2340.48639
  %all-reduce.910 = f32[] all-reduce(%reduce.1873), channel_id=2001, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2340.48639.clone
  %convert.5434 = bf16[] convert(%all-reduce.910)
  %add.7745 = bf16[] add(%add.7744, %convert.5434)
  %multiply.9870 = bf16[512,32,128]{2,1,0} multiply(%add.6579, %add.6579)
  %convert.5435 = f32[512,32,128]{2,1,0} convert(%multiply.9870)
  %reduce.1874 = f32[] reduce(%convert.5435, %constant.3956), dimensions={0,1,2}, to_apply=%region_2341.48648
  %all-reduce.911 = f32[] all-reduce(%reduce.1874), channel_id=2002, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2341.48648.clone
  %convert.5436 = bf16[] convert(%all-reduce.911)
  %add.7746 = bf16[] add(%add.7745, %convert.5436)
  %multiply.9871 = bf16[512,8,128]{2,1,0} multiply(%add.6585, %add.6585)
  %convert.5437 = f32[512,8,128]{2,1,0} convert(%multiply.9871)
  %reduce.1875 = f32[] reduce(%convert.5437, %constant.3956), dimensions={0,1,2}, to_apply=%region_2342.48657
  %all-reduce.912 = f32[] all-reduce(%reduce.1875), channel_id=2003, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2342.48657.clone
  %convert.5438 = bf16[] convert(%all-reduce.912)
  %add.7747 = bf16[] add(%add.7746, %convert.5438)
  %multiply.9872 = bf16[512,8]{1,0} multiply(%add.6590, %add.6590)
  %convert.5439 = f32[512,8]{1,0} convert(%multiply.9872)
  %reduce.1876 = f32[] reduce(%convert.5439, %constant.3956), dimensions={0,1}, to_apply=%region_2343.48666
  %all-reduce.913 = f32[] all-reduce(%reduce.1876), channel_id=2004, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2343.48666.clone
  %convert.5440 = bf16[] convert(%all-reduce.913)
  %add.7748 = bf16[] add(%add.7747, %convert.5440)
  %multiply.9873 = bf16[1,4096,14336]{2,1,0} multiply(%add.6595, %add.6595)
  %convert.5442 = f32[1,4096,14336]{2,1,0} convert(%multiply.9873)
  %reduce.1877 = f32[] reduce(%convert.5442, %constant.3956), dimensions={0,1,2}, to_apply=%region_2344.48675
  %all-reduce.914 = f32[] all-reduce(%reduce.1877), channel_id=2005, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2344.48675.clone
  %convert.5443 = bf16[] convert(%all-reduce.914)
  %add.7749 = bf16[] add(%add.7748, %convert.5443)
  %multiply.9874 = bf16[1,4096,14336]{2,1,0} multiply(%add.6602, %add.6602)
  %convert.5444 = f32[1,4096,14336]{2,1,0} convert(%multiply.9874)
  %reduce.1878 = f32[] reduce(%convert.5444, %constant.3956), dimensions={0,1,2}, to_apply=%region_2345.48684
  %all-reduce.915 = f32[] all-reduce(%reduce.1878), channel_id=2006, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2345.48684.clone
  %convert.5445 = bf16[] convert(%all-reduce.915)
  %add.7750 = bf16[] add(%add.7749, %convert.5445)
  %multiply.9875 = bf16[1,14336,4096]{2,1,0} multiply(%add.6608, %add.6608)
  %convert.5446 = f32[1,14336,4096]{2,1,0} convert(%multiply.9875)
  %reduce.1879 = f32[] reduce(%convert.5446, %constant.3956), dimensions={0,1,2}, to_apply=%region_2346.48693
  %all-reduce.916 = f32[] all-reduce(%reduce.1879), channel_id=2007, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2346.48693.clone
  %convert.5447 = bf16[] convert(%all-reduce.916)
  %add.7751 = bf16[] add(%add.7750, %convert.5447)
  %multiply.9876 = bf16[4096]{0} multiply(%add.6613, %add.6613)
  %convert.5448 = f32[4096]{0} convert(%multiply.9876)
  %reduce.1880 = f32[] reduce(%convert.5448, %constant.3956), dimensions={0}, to_apply=%region_2347.48702
  %convert.5449 = bf16[] convert(%reduce.1880)
  %add.7752 = bf16[] add(%add.7751, %convert.5449)
  %multiply.9877 = bf16[4096]{0} multiply(%add.6619, %add.6619)
  %convert.5451 = f32[4096]{0} convert(%multiply.9877)
  %reduce.1881 = f32[] reduce(%convert.5451, %constant.3956), dimensions={0}, to_apply=%region_2348.48711
  %convert.5452 = bf16[] convert(%reduce.1881)
  %add.7753 = bf16[] add(%add.7752, %convert.5452)
  %multiply.9878 = bf16[512,8,128]{2,1,0} multiply(%add.6624, %add.6624)
  %convert.5453 = f32[512,8,128]{2,1,0} convert(%multiply.9878)
  %reduce.1882 = f32[] reduce(%convert.5453, %constant.3956), dimensions={0,1,2}, to_apply=%region_2349.48720
  %all-reduce.917 = f32[] all-reduce(%reduce.1882), channel_id=2008, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2349.48720.clone
  %convert.5454 = bf16[] convert(%all-reduce.917)
  %add.7754 = bf16[] add(%add.7753, %convert.5454)
  %multiply.9879 = bf16[32,128,512]{2,1,0} multiply(%add.6630, %add.6630)
  %convert.5455 = f32[32,128,512]{2,1,0} convert(%multiply.9879)
  %reduce.1883 = f32[] reduce(%convert.5455, %constant.3956), dimensions={0,1,2}, to_apply=%region_2350.48729
  %all-reduce.918 = f32[] all-reduce(%reduce.1883), channel_id=2009, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2350.48729.clone
  %convert.5456 = bf16[] convert(%all-reduce.918)
  %add.7755 = bf16[] add(%add.7754, %convert.5456)
  %multiply.9880 = bf16[512,32,128]{2,1,0} multiply(%add.6635, %add.6635)
  %convert.5457 = f32[512,32,128]{2,1,0} convert(%multiply.9880)
  %reduce.1884 = f32[] reduce(%convert.5457, %constant.3956), dimensions={0,1,2}, to_apply=%region_2351.48738
  %all-reduce.919 = f32[] all-reduce(%reduce.1884), channel_id=2010, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2351.48738.clone
  %convert.5458 = bf16[] convert(%all-reduce.919)
  %add.7756 = bf16[] add(%add.7755, %convert.5458)
  %multiply.9881 = bf16[512,8,128]{2,1,0} multiply(%add.6640, %add.6640)
  %convert.5459 = f32[512,8,128]{2,1,0} convert(%multiply.9881)
  %reduce.1885 = f32[] reduce(%convert.5459, %constant.3956), dimensions={0,1,2}, to_apply=%region_2352.48747
  %all-reduce.920 = f32[] all-reduce(%reduce.1885), channel_id=2011, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2352.48747.clone
  %convert.5460 = bf16[] convert(%all-reduce.920)
  %add.7758 = bf16[] add(%add.7756, %convert.5460)
  %multiply.9882 = bf16[512,8]{1,0} multiply(%add.6646, %add.6646)
  %convert.5461 = f32[512,8]{1,0} convert(%multiply.9882)
  %reduce.1886 = f32[] reduce(%convert.5461, %constant.3956), dimensions={0,1}, to_apply=%region_2353.48756
  %all-reduce.921 = f32[] all-reduce(%reduce.1886), channel_id=2012, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2353.48756.clone
  %convert.5462 = bf16[] convert(%all-reduce.921)
  %add.7759 = bf16[] add(%add.7758, %convert.5462)
  %multiply.9883 = bf16[1,4096,14336]{2,1,0} multiply(%add.6652, %add.6652)
  %convert.5463 = f32[1,4096,14336]{2,1,0} convert(%multiply.9883)
  %reduce.1887 = f32[] reduce(%convert.5463, %constant.3956), dimensions={0,1,2}, to_apply=%region_2354.48765
  %all-reduce.922 = f32[] all-reduce(%reduce.1887), channel_id=2013, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2354.48765.clone
  %convert.5464 = bf16[] convert(%all-reduce.922)
  %add.7760 = bf16[] add(%add.7759, %convert.5464)
  %multiply.9884 = bf16[1,4096,14336]{2,1,0} multiply(%add.6657, %add.6657)
  %convert.5465 = f32[1,4096,14336]{2,1,0} convert(%multiply.9884)
  %reduce.1888 = f32[] reduce(%convert.5465, %constant.3956), dimensions={0,1,2}, to_apply=%region_2355.48774
  %all-reduce.923 = f32[] all-reduce(%reduce.1888), channel_id=2014, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2355.48774.clone
  %convert.5466 = bf16[] convert(%all-reduce.923)
  %add.7761 = bf16[] add(%add.7760, %convert.5466)
  %multiply.9885 = bf16[1,14336,4096]{2,1,0} multiply(%add.6662, %add.6662)
  %convert.5467 = f32[1,14336,4096]{2,1,0} convert(%multiply.9885)
  %reduce.1889 = f32[] reduce(%convert.5467, %constant.3956), dimensions={0,1,2}, to_apply=%region_2356.48783
  %all-reduce.924 = f32[] all-reduce(%reduce.1889), channel_id=2015, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2356.48783.clone
  %convert.5468 = bf16[] convert(%all-reduce.924)
  %add.7763 = bf16[] add(%add.7761, %convert.5468)
  %multiply.9886 = bf16[4096]{0} multiply(%add.6667, %add.6667)
  %convert.5469 = f32[4096]{0} convert(%multiply.9886)
  %reduce.1890 = f32[] reduce(%convert.5469, %constant.3956), dimensions={0}, to_apply=%region_2357.48792
  %convert.5471 = bf16[] convert(%reduce.1890)
  %add.7764 = bf16[] add(%add.7763, %convert.5471)
  %multiply.9888 = bf16[4096]{0} multiply(%add.6672, %add.6672)
  %convert.5472 = f32[4096]{0} convert(%multiply.9888)
  %reduce.1891 = f32[] reduce(%convert.5472, %constant.3956), dimensions={0}, to_apply=%region_2358.48801
  %convert.5473 = bf16[] convert(%reduce.1891)
  %add.7765 = bf16[] add(%add.7764, %convert.5473)
  %multiply.9889 = bf16[512,8,128]{2,1,0} multiply(%add.6677, %add.6677)
  %convert.5474 = f32[512,8,128]{2,1,0} convert(%multiply.9889)
  %reduce.1892 = f32[] reduce(%convert.5474, %constant.3956), dimensions={0,1,2}, to_apply=%region_2359.48810
  %all-reduce.925 = f32[] all-reduce(%reduce.1892), channel_id=2016, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2359.48810.clone
  %convert.5475 = bf16[] convert(%all-reduce.925)
  %add.7766 = bf16[] add(%add.7765, %convert.5475)
  %multiply.9890 = bf16[32,128,512]{2,1,0} multiply(%add.6682, %add.6682)
  %convert.5476 = f32[32,128,512]{2,1,0} convert(%multiply.9890)
  %reduce.1893 = f32[] reduce(%convert.5476, %constant.3956), dimensions={0,1,2}, to_apply=%region_2360.48819
  %all-reduce.926 = f32[] all-reduce(%reduce.1893), channel_id=2017, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2360.48819.clone
  %convert.5477 = bf16[] convert(%all-reduce.926)
  %add.7768 = bf16[] add(%add.7766, %convert.5477)
  %multiply.9891 = bf16[512,32,128]{2,1,0} multiply(%add.6688, %add.6688)
  %convert.5478 = f32[512,32,128]{2,1,0} convert(%multiply.9891)
  %reduce.1894 = f32[] reduce(%convert.5478, %constant.3956), dimensions={0,1,2}, to_apply=%region_2361.48828
  %all-reduce.927 = f32[] all-reduce(%reduce.1894), channel_id=2018, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2361.48828.clone
  %convert.5479 = bf16[] convert(%all-reduce.927)
  %add.7769 = bf16[] add(%add.7768, %convert.5479)
  %multiply.9892 = bf16[512,8,128]{2,1,0} multiply(%add.6694, %add.6694)
  %convert.5480 = f32[512,8,128]{2,1,0} convert(%multiply.9892)
  %reduce.1895 = f32[] reduce(%convert.5480, %constant.3956), dimensions={0,1,2}, to_apply=%region_2362.48837
  %all-reduce.928 = f32[] all-reduce(%reduce.1895), channel_id=2019, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2362.48837.clone
  %convert.5481 = bf16[] convert(%all-reduce.928)
  %add.7770 = bf16[] add(%add.7769, %convert.5481)
  %multiply.9893 = bf16[512,8]{1,0} multiply(%add.6700, %add.6700)
  %convert.5482 = f32[512,8]{1,0} convert(%multiply.9893)
  %reduce.1896 = f32[] reduce(%convert.5482, %constant.3956), dimensions={0,1}, to_apply=%region_2363.48846
  %all-reduce.929 = f32[] all-reduce(%reduce.1896), channel_id=2020, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2363.48846.clone
  %convert.5483 = bf16[] convert(%all-reduce.929)
  %add.7771 = bf16[] add(%add.7770, %convert.5483)
  %multiply.9894 = bf16[1,4096,14336]{2,1,0} multiply(%add.6705, %add.6705)
  %convert.5484 = f32[1,4096,14336]{2,1,0} convert(%multiply.9894)
  %reduce.1897 = f32[] reduce(%convert.5484, %constant.3956), dimensions={0,1,2}, to_apply=%region_2364.48855
  %all-reduce.930 = f32[] all-reduce(%reduce.1897), channel_id=2021, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2364.48855.clone
  %convert.5486 = bf16[] convert(%all-reduce.930)
  %add.7772 = bf16[] add(%add.7771, %convert.5486)
  %multiply.9895 = bf16[1,4096,14336]{2,1,0} multiply(%add.6710, %add.6710)
  %convert.5487 = f32[1,4096,14336]{2,1,0} convert(%multiply.9895)
  %reduce.1898 = f32[] reduce(%convert.5487, %constant.3956), dimensions={0,1,2}, to_apply=%region_2365.48864
  %all-reduce.931 = f32[] all-reduce(%reduce.1898), channel_id=2022, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2365.48864.clone
  %convert.5488 = bf16[] convert(%all-reduce.931)
  %add.7773 = bf16[] add(%add.7772, %convert.5488)
  %multiply.9896 = bf16[1,14336,4096]{2,1,0} multiply(%add.6715, %add.6715)
  %convert.5489 = f32[1,14336,4096]{2,1,0} convert(%multiply.9896)
  %reduce.1899 = f32[] reduce(%convert.5489, %constant.3956), dimensions={0,1,2}, to_apply=%region_2366.48873
  %all-reduce.932 = f32[] all-reduce(%reduce.1899), channel_id=2023, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2366.48873.clone
  %convert.5490 = bf16[] convert(%all-reduce.932)
  %add.7774 = bf16[] add(%add.7773, %convert.5490)
  %multiply.9897 = bf16[4096]{0} multiply(%add.6720, %add.6720)
  %convert.5491 = f32[4096]{0} convert(%multiply.9897)
  %reduce.1900 = f32[] reduce(%convert.5491, %constant.3956), dimensions={0}, to_apply=%region_2367.48882
  %convert.5492 = bf16[] convert(%reduce.1900)
  %add.7775 = bf16[] add(%add.7774, %convert.5492)
  %multiply.9898 = bf16[4096]{0} multiply(%add.6725, %add.6725)
  %convert.5493 = f32[4096]{0} convert(%multiply.9898)
  %reduce.1901 = f32[] reduce(%convert.5493, %constant.3956), dimensions={0}, to_apply=%region_2368.48891
  %convert.5494 = bf16[] convert(%reduce.1901)
  %add.7776 = bf16[] add(%add.7775, %convert.5494)
  %multiply.9899 = bf16[512,8,128]{2,1,0} multiply(%add.6730, %add.6730)
  %convert.5495 = f32[512,8,128]{2,1,0} convert(%multiply.9899)
  %reduce.1902 = f32[] reduce(%convert.5495, %constant.3956), dimensions={0,1,2}, to_apply=%region_2369.48900
  %all-reduce.933 = f32[] all-reduce(%reduce.1902), channel_id=2024, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2369.48900.clone
  %convert.5496 = bf16[] convert(%all-reduce.933)
  %add.7777 = bf16[] add(%add.7776, %convert.5496)
  %multiply.9901 = bf16[32,128,512]{2,1,0} multiply(%add.6735, %add.6735)
  %convert.5497 = f32[32,128,512]{2,1,0} convert(%multiply.9901)
  %reduce.1903 = f32[] reduce(%convert.5497, %constant.3956), dimensions={0,1,2}, to_apply=%region_2370.48909
  %all-reduce.934 = f32[] all-reduce(%reduce.1903), channel_id=2025, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2370.48909.clone
  %convert.5498 = bf16[] convert(%all-reduce.934)
  %add.7778 = bf16[] add(%add.7777, %convert.5498)
  %multiply.9902 = bf16[512,32,128]{2,1,0} multiply(%add.6740, %add.6740)
  %convert.5499 = f32[512,32,128]{2,1,0} convert(%multiply.9902)
  %reduce.1904 = f32[] reduce(%convert.5499, %constant.3956), dimensions={0,1,2}, to_apply=%region_2371.48918
  %all-reduce.935 = f32[] all-reduce(%reduce.1904), channel_id=2026, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2371.48918.clone
  %convert.5501 = bf16[] convert(%all-reduce.935)
  %add.7779 = bf16[] add(%add.7778, %convert.5501)
  %multiply.9903 = bf16[512,8,128]{2,1,0} multiply(%add.6745, %add.6745)
  %convert.5502 = f32[512,8,128]{2,1,0} convert(%multiply.9903)
  %reduce.1905 = f32[] reduce(%convert.5502, %constant.3956), dimensions={0,1,2}, to_apply=%region_2372.48927
  %all-reduce.936 = f32[] all-reduce(%reduce.1905), channel_id=2027, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2372.48927.clone
  %convert.5504 = bf16[] convert(%all-reduce.936)
  %add.7780 = bf16[] add(%add.7779, %convert.5504)
  %multiply.9904 = bf16[512,8]{1,0} multiply(%add.6750, %add.6750)
  %convert.5505 = f32[512,8]{1,0} convert(%multiply.9904)
  %reduce.1906 = f32[] reduce(%convert.5505, %constant.3956), dimensions={0,1}, to_apply=%region_2373.48936
  %all-reduce.937 = f32[] all-reduce(%reduce.1906), channel_id=2028, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2373.48936.clone
  %convert.5506 = bf16[] convert(%all-reduce.937)
  %add.7781 = bf16[] add(%add.7780, %convert.5506)
  %multiply.9905 = bf16[1,4096,14336]{2,1,0} multiply(%add.6756, %add.6756)
  %convert.5507 = f32[1,4096,14336]{2,1,0} convert(%multiply.9905)
  %reduce.1907 = f32[] reduce(%convert.5507, %constant.3956), dimensions={0,1,2}, to_apply=%region_2374.48945
  %all-reduce.938 = f32[] all-reduce(%reduce.1907), channel_id=2029, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2374.48945.clone
  %convert.5508 = bf16[] convert(%all-reduce.938)
  %add.7782 = bf16[] add(%add.7781, %convert.5508)
  %multiply.9907 = bf16[1,4096,14336]{2,1,0} multiply(%add.6761, %add.6761)
  %convert.5509 = f32[1,4096,14336]{2,1,0} convert(%multiply.9907)
  %reduce.1908 = f32[] reduce(%convert.5509, %constant.3956), dimensions={0,1,2}, to_apply=%region_2375.48954
  %all-reduce.939 = f32[] all-reduce(%reduce.1908), channel_id=2030, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2375.48954.clone
  %convert.5510 = bf16[] convert(%all-reduce.939)
  %add.7783 = bf16[] add(%add.7782, %convert.5510)
  %multiply.9908 = bf16[1,14336,4096]{2,1,0} multiply(%add.6766, %add.6766)
  %convert.5511 = f32[1,14336,4096]{2,1,0} convert(%multiply.9908)
  %reduce.1909 = f32[] reduce(%convert.5511, %constant.3956), dimensions={0,1,2}, to_apply=%region_2376.48963
  %all-reduce.940 = f32[] all-reduce(%reduce.1909), channel_id=2031, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2376.48963.clone
  %convert.5512 = bf16[] convert(%all-reduce.940)
  %add.7784 = bf16[] add(%add.7783, %convert.5512)
  %multiply.9909 = bf16[4096]{0} multiply(%add.6771, %add.6771)
  %convert.5514 = f32[4096]{0} convert(%multiply.9909)
  %reduce.1910 = f32[] reduce(%convert.5514, %constant.3956), dimensions={0}, to_apply=%region_2377.48972
  %convert.5516 = bf16[] convert(%reduce.1910)
  %add.7785 = bf16[] add(%add.7784, %convert.5516)
  %multiply.9910 = bf16[4096]{0} multiply(%add.6776, %add.6776)
  %convert.5517 = f32[4096]{0} convert(%multiply.9910)
  %reduce.1911 = f32[] reduce(%convert.5517, %constant.3956), dimensions={0}, to_apply=%region_2378.48981
  %convert.5518 = bf16[] convert(%reduce.1911)
  %add.7786 = bf16[] add(%add.7785, %convert.5518)
  %multiply.9911 = bf16[512,8,128]{2,1,0} multiply(%add.6781, %add.6781)
  %convert.5519 = f32[512,8,128]{2,1,0} convert(%multiply.9911)
  %reduce.1912 = f32[] reduce(%convert.5519, %constant.3956), dimensions={0,1,2}, to_apply=%region_2379.48990
  %all-reduce.941 = f32[] all-reduce(%reduce.1912), channel_id=2032, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2379.48990.clone
  %convert.5520 = bf16[] convert(%all-reduce.941)
  %add.7787 = bf16[] add(%add.7786, %convert.5520)
  %multiply.9912 = bf16[32,128,512]{2,1,0} multiply(%add.6786, %add.6786)
  %convert.5521 = f32[32,128,512]{2,1,0} convert(%multiply.9912)
  %reduce.1913 = f32[] reduce(%convert.5521, %constant.3956), dimensions={0,1,2}, to_apply=%region_2380.48999
  %all-reduce.942 = f32[] all-reduce(%reduce.1913), channel_id=2033, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2380.48999.clone
  %convert.5522 = bf16[] convert(%all-reduce.942)
  %add.7788 = bf16[] add(%add.7787, %convert.5522)
  %multiply.9913 = bf16[512,32,128]{2,1,0} multiply(%add.6792, %add.6792)
  %convert.5523 = f32[512,32,128]{2,1,0} convert(%multiply.9913)
  %reduce.1914 = f32[] reduce(%convert.5523, %constant.3956), dimensions={0,1,2}, to_apply=%region_2381.49008
  %all-reduce.943 = f32[] all-reduce(%reduce.1914), channel_id=2034, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2381.49008.clone
  %convert.5524 = bf16[] convert(%all-reduce.943)
  %add.7789 = bf16[] add(%add.7788, %convert.5524)
  %multiply.9914 = bf16[512,8,128]{2,1,0} multiply(%add.6797, %add.6797)
  %convert.5525 = f32[512,8,128]{2,1,0} convert(%multiply.9914)
  %reduce.1915 = f32[] reduce(%convert.5525, %constant.3956), dimensions={0,1,2}, to_apply=%region_2382.49017
  %all-reduce.944 = f32[] all-reduce(%reduce.1915), channel_id=2035, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2382.49017.clone
  %convert.5526 = bf16[] convert(%all-reduce.944)
  %add.7790 = bf16[] add(%add.7789, %convert.5526)
  %multiply.9915 = bf16[512,8]{1,0} multiply(%add.6802, %add.6802)
  %convert.5527 = f32[512,8]{1,0} convert(%multiply.9915)
  %reduce.1916 = f32[] reduce(%convert.5527, %constant.3956), dimensions={0,1}, to_apply=%region_2383.49026
  %all-reduce.945 = f32[] all-reduce(%reduce.1916), channel_id=2036, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2383.49026.clone
  %convert.5528 = bf16[] convert(%all-reduce.945)
  %add.7791 = bf16[] add(%add.7790, %convert.5528)
  %multiply.9916 = bf16[1,4096,14336]{2,1,0} multiply(%add.6807, %add.6807)
  %convert.5529 = f32[1,4096,14336]{2,1,0} convert(%multiply.9916)
  %reduce.1917 = f32[] reduce(%convert.5529, %constant.3956), dimensions={0,1,2}, to_apply=%region_2384.49035
  %all-reduce.946 = f32[] all-reduce(%reduce.1917), channel_id=2037, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2384.49035.clone
  %convert.5530 = bf16[] convert(%all-reduce.946)
  %add.7792 = bf16[] add(%add.7791, %convert.5530)
  %multiply.9917 = bf16[1,4096,14336]{2,1,0} multiply(%add.6812, %add.6812)
  %convert.5531 = f32[1,4096,14336]{2,1,0} convert(%multiply.9917)
  %reduce.1918 = f32[] reduce(%convert.5531, %constant.3956), dimensions={0,1,2}, to_apply=%region_2385.49044
  %all-reduce.947 = f32[] all-reduce(%reduce.1918), channel_id=2038, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2385.49044.clone
  %convert.5532 = bf16[] convert(%all-reduce.947)
  %add.7793 = bf16[] add(%add.7792, %convert.5532)
  %multiply.9918 = bf16[1,14336,4096]{2,1,0} multiply(%add.6817, %add.6817)
  %convert.5533 = f32[1,14336,4096]{2,1,0} convert(%multiply.9918)
  %reduce.1919 = f32[] reduce(%convert.5533, %constant.3956), dimensions={0,1,2}, to_apply=%region_2386.49053
  %all-reduce.948 = f32[] all-reduce(%reduce.1919), channel_id=2039, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2386.49053.clone
  %convert.5534 = bf16[] convert(%all-reduce.948)
  %add.7794 = bf16[] add(%add.7793, %convert.5534)
  %multiply.9919 = bf16[4096]{0} multiply(%add.6823, %add.6823)
  %convert.5535 = f32[4096]{0} convert(%multiply.9919)
  %reduce.1920 = f32[] reduce(%convert.5535, %constant.3956), dimensions={0}, to_apply=%region_2387.49062
  %convert.5536 = bf16[] convert(%reduce.1920)
  %add.7795 = bf16[] add(%add.7794, %convert.5536)
  %multiply.9920 = bf16[4096]{0} multiply(%add.6828, %add.6828)
  %convert.5537 = f32[4096]{0} convert(%multiply.9920)
  %reduce.1921 = f32[] reduce(%convert.5537, %constant.3956), dimensions={0}, to_apply=%region_2388.49071
  %convert.5538 = bf16[] convert(%reduce.1921)
  %add.7796 = bf16[] add(%add.7795, %convert.5538)
  %multiply.9921 = bf16[512,8,128]{2,1,0} multiply(%add.6834, %add.6834)
  %convert.5539 = f32[512,8,128]{2,1,0} convert(%multiply.9921)
  %reduce.1922 = f32[] reduce(%convert.5539, %constant.3956), dimensions={0,1,2}, to_apply=%region_2389.49080
  %all-reduce.949 = f32[] all-reduce(%reduce.1922), channel_id=2040, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2389.49080.clone
  %convert.5541 = bf16[] convert(%all-reduce.949)
  %add.7797 = bf16[] add(%add.7796, %convert.5541)
  %multiply.9922 = bf16[32,128,512]{2,1,0} multiply(%add.6839, %add.6839)
  %convert.5542 = f32[32,128,512]{2,1,0} convert(%multiply.9922)
  %reduce.1923 = f32[] reduce(%convert.5542, %constant.3956), dimensions={0,1,2}, to_apply=%region_2390.49089
  %all-reduce.950 = f32[] all-reduce(%reduce.1923), channel_id=2041, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2390.49089.clone
  %convert.5544 = bf16[] convert(%all-reduce.950)
  %add.7798 = bf16[] add(%add.7797, %convert.5544)
  %multiply.9923 = bf16[512,32,128]{2,1,0} multiply(%add.6844, %add.6844)
  %convert.5545 = f32[512,32,128]{2,1,0} convert(%multiply.9923)
  %reduce.1924 = f32[] reduce(%convert.5545, %constant.3956), dimensions={0,1,2}, to_apply=%region_2391.49098
  %all-reduce.951 = f32[] all-reduce(%reduce.1924), channel_id=2042, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2391.49098.clone
  %convert.5546 = bf16[] convert(%all-reduce.951)
  %add.7799 = bf16[] add(%add.7798, %convert.5546)
  %multiply.9924 = bf16[512,8,128]{2,1,0} multiply(%add.6851, %add.6851)
  %convert.5547 = f32[512,8,128]{2,1,0} convert(%multiply.9924)
  %reduce.1925 = f32[] reduce(%convert.5547, %constant.3956), dimensions={0,1,2}, to_apply=%region_2392.49107
  %all-reduce.952 = f32[] all-reduce(%reduce.1925), channel_id=2043, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2392.49107.clone
  %convert.5548 = bf16[] convert(%all-reduce.952)
  %add.7801 = bf16[] add(%add.7799, %convert.5548)
  %multiply.9925 = bf16[512,8]{1,0} multiply(%add.6857, %add.6857)
  %convert.5549 = f32[512,8]{1,0} convert(%multiply.9925)
  %reduce.1926 = f32[] reduce(%convert.5549, %constant.3956), dimensions={0,1}, to_apply=%region_2393.49116
  %all-reduce.953 = f32[] all-reduce(%reduce.1926), channel_id=2044, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2393.49116.clone
  %convert.5550 = bf16[] convert(%all-reduce.953)
  %add.7802 = bf16[] add(%add.7801, %convert.5550)
  %multiply.9926 = bf16[1,4096,14336]{2,1,0} multiply(%add.6862, %add.6862)
  %convert.5551 = f32[1,4096,14336]{2,1,0} convert(%multiply.9926)
  %reduce.1927 = f32[] reduce(%convert.5551, %constant.3956), dimensions={0,1,2}, to_apply=%region_2394.49125
  %all-reduce.954 = f32[] all-reduce(%reduce.1927), channel_id=2045, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2394.49125.clone
  %convert.5552 = bf16[] convert(%all-reduce.954)
  %add.7803 = bf16[] add(%add.7802, %convert.5552)
  %multiply.9927 = bf16[1,4096,14336]{2,1,0} multiply(%add.6867, %add.6867)
  %convert.5554 = f32[1,4096,14336]{2,1,0} convert(%multiply.9927)
  %reduce.1928 = f32[] reduce(%convert.5554, %constant.3956), dimensions={0,1,2}, to_apply=%region_2395.49134
  %all-reduce.955 = f32[] all-reduce(%reduce.1928), channel_id=2046, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2395.49134.clone
  %convert.5556 = bf16[] convert(%all-reduce.955)
  %add.7804 = bf16[] add(%add.7803, %convert.5556)
  %multiply.9928 = bf16[1,14336,4096]{2,1,0} multiply(%add.6872, %add.6872)
  %convert.5557 = f32[1,14336,4096]{2,1,0} convert(%multiply.9928)
  %reduce.1929 = f32[] reduce(%convert.5557, %constant.3956), dimensions={0,1,2}, to_apply=%region_2396.49143
  %all-reduce.956 = f32[] all-reduce(%reduce.1929), channel_id=2047, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2396.49143.clone
  %convert.5558 = bf16[] convert(%all-reduce.956)
  %add.7805 = bf16[] add(%add.7804, %convert.5558)
  %multiply.9929 = bf16[4096]{0} multiply(%add.6877, %add.6877)
  %convert.5559 = f32[4096]{0} convert(%multiply.9929)
  %reduce.1930 = f32[] reduce(%convert.5559, %constant.3956), dimensions={0}, to_apply=%region_2397.49152
  %convert.5560 = bf16[] convert(%reduce.1930)
  %add.7806 = bf16[] add(%add.7805, %convert.5560)
  %multiply.9930 = bf16[4096]{0} multiply(%add.6882, %add.6882)
  %convert.5561 = f32[4096]{0} convert(%multiply.9930)
  %reduce.1931 = f32[] reduce(%convert.5561, %constant.3956), dimensions={0}, to_apply=%region_2398.49161
  %convert.5562 = bf16[] convert(%reduce.1931)
  %add.7807 = bf16[] add(%add.7806, %convert.5562)
  %multiply.9931 = bf16[512,8,128]{2,1,0} multiply(%add.6887, %add.6887)
  %convert.5563 = f32[512,8,128]{2,1,0} convert(%multiply.9931)
  %reduce.1932 = f32[] reduce(%convert.5563, %constant.3956), dimensions={0,1,2}, to_apply=%region_2399.49170
  %all-reduce.957 = f32[] all-reduce(%reduce.1932), channel_id=2048, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2399.49170.clone
  %convert.5564 = bf16[] convert(%all-reduce.957)
  %add.7808 = bf16[] add(%add.7807, %convert.5564)
  %multiply.9932 = bf16[32,128,512]{2,1,0} multiply(%add.6893, %add.6893)
  %convert.5565 = f32[32,128,512]{2,1,0} convert(%multiply.9932)
  %reduce.1933 = f32[] reduce(%convert.5565, %constant.3956), dimensions={0,1,2}, to_apply=%region_2400.49179
  %all-reduce.958 = f32[] all-reduce(%reduce.1933), channel_id=2049, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2400.49179.clone
  %convert.5566 = bf16[] convert(%all-reduce.958)
  %add.7809 = bf16[] add(%add.7808, %convert.5566)
  %multiply.9933 = bf16[512,32,128]{2,1,0} multiply(%add.6898, %add.6898)
  %convert.5567 = f32[512,32,128]{2,1,0} convert(%multiply.9933)
  %reduce.1934 = f32[] reduce(%convert.5567, %constant.3956), dimensions={0,1,2}, to_apply=%region_2401.49188
  %all-reduce.959 = f32[] all-reduce(%reduce.1934), channel_id=2050, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2401.49188.clone
  %convert.5568 = bf16[] convert(%all-reduce.959)
  %add.7810 = bf16[] add(%add.7809, %convert.5568)
  %multiply.9934 = bf16[512,8,128]{2,1,0} multiply(%add.6904, %add.6904)
  %convert.5569 = f32[512,8,128]{2,1,0} convert(%multiply.9934)
  %reduce.1935 = f32[] reduce(%convert.5569, %constant.3956), dimensions={0,1,2}, to_apply=%region_2402.49197
  %all-reduce.960 = f32[] all-reduce(%reduce.1935), channel_id=2051, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2402.49197.clone
  %convert.5570 = bf16[] convert(%all-reduce.960)
  %add.7811 = bf16[] add(%add.7810, %convert.5570)
  %multiply.9935 = bf16[512,8]{1,0} multiply(%add.6911, %add.6911)
  %convert.5571 = f32[512,8]{1,0} convert(%multiply.9935)
  %reduce.1936 = f32[] reduce(%convert.5571, %constant.3956), dimensions={0,1}, to_apply=%region_2403.49206
  %all-reduce.961 = f32[] all-reduce(%reduce.1936), channel_id=2052, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2403.49206.clone
  %convert.5572 = bf16[] convert(%all-reduce.961)
  %add.7812 = bf16[] add(%add.7811, %convert.5572)
  %multiply.9936 = bf16[1,4096,14336]{2,1,0} multiply(%add.6916, %add.6916)
  %convert.5573 = f32[1,4096,14336]{2,1,0} convert(%multiply.9936)
  %reduce.1937 = f32[] reduce(%convert.5573, %constant.3956), dimensions={0,1,2}, to_apply=%region_2404.49215
  %all-reduce.962 = f32[] all-reduce(%reduce.1937), channel_id=2053, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2404.49215.clone
  %convert.5574 = bf16[] convert(%all-reduce.962)
  %add.7813 = bf16[] add(%add.7812, %convert.5574)
  %multiply.9937 = bf16[1,4096,14336]{2,1,0} multiply(%add.6921, %add.6921)
  %convert.5575 = f32[1,4096,14336]{2,1,0} convert(%multiply.9937)
  %reduce.1938 = f32[] reduce(%convert.5575, %constant.3956), dimensions={0,1,2}, to_apply=%region_2405.49224
  %all-reduce.963 = f32[] all-reduce(%reduce.1938), channel_id=2054, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2405.49224.clone
  %convert.5576 = bf16[] convert(%all-reduce.963)
  %add.7815 = bf16[] add(%add.7813, %convert.5576)
  %multiply.9938 = bf16[1,14336,4096]{2,1,0} multiply(%add.6927, %add.6927)
  %convert.5577 = f32[1,14336,4096]{2,1,0} convert(%multiply.9938)
  %reduce.1939 = f32[] reduce(%convert.5577, %constant.3956), dimensions={0,1,2}, to_apply=%region_2406.49233
  %all-reduce.964 = f32[] all-reduce(%reduce.1939), channel_id=2055, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2406.49233.clone
  %convert.5578 = bf16[] convert(%all-reduce.964)
  %add.7816 = bf16[] add(%add.7815, %convert.5578)
  %multiply.9939 = bf16[4096]{0} multiply(%add.6933, %add.6933)
  %convert.5579 = f32[4096]{0} convert(%multiply.9939)
  %reduce.1940 = f32[] reduce(%convert.5579, %constant.3956), dimensions={0}, to_apply=%region_2407.49242
  %convert.5580 = bf16[] convert(%reduce.1940)
  %add.7818 = bf16[] add(%add.7816, %convert.5580)
  %multiply.9940 = bf16[4096]{0} multiply(%add.6938, %add.6938)
  %convert.5581 = f32[4096]{0} convert(%multiply.9940)
  %reduce.1941 = f32[] reduce(%convert.5581, %constant.3956), dimensions={0}, to_apply=%region_2408.49251
  %convert.5582 = bf16[] convert(%reduce.1941)
  %add.7819 = bf16[] add(%add.7818, %convert.5582)
  %multiply.9941 = bf16[512,8,128]{2,1,0} multiply(%add.6943, %add.6943)
  %convert.5583 = f32[512,8,128]{2,1,0} convert(%multiply.9941)
  %reduce.1942 = f32[] reduce(%convert.5583, %constant.3956), dimensions={0,1,2}, to_apply=%region_2409.49260
  %all-reduce.965 = f32[] all-reduce(%reduce.1942), channel_id=2056, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2409.49260.clone
  %convert.5584 = bf16[] convert(%all-reduce.965)
  %add.7821 = bf16[] add(%add.7819, %convert.5584)
  %multiply.9942 = bf16[32,128,512]{2,1,0} multiply(%add.6949, %add.6949)
  %convert.5585 = f32[32,128,512]{2,1,0} convert(%multiply.9942)
  %reduce.1943 = f32[] reduce(%convert.5585, %constant.3956), dimensions={0,1,2}, to_apply=%region_2410.49269
  %all-reduce.966 = f32[] all-reduce(%reduce.1943), channel_id=2057, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2410.49269.clone
  %convert.5586 = bf16[] convert(%all-reduce.966)
  %add.7822 = bf16[] add(%add.7821, %convert.5586)
  %multiply.9943 = bf16[512,32,128]{2,1,0} multiply(%add.6954, %add.6954)
  %convert.5587 = f32[512,32,128]{2,1,0} convert(%multiply.9943)
  %reduce.1944 = f32[] reduce(%convert.5587, %constant.3956), dimensions={0,1,2}, to_apply=%region_2411.49278
  %all-reduce.967 = f32[] all-reduce(%reduce.1944), channel_id=2058, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2411.49278.clone
  %convert.5588 = bf16[] convert(%all-reduce.967)
  %add.7823 = bf16[] add(%add.7822, %convert.5588)
  %multiply.9944 = bf16[512,8,128]{2,1,0} multiply(%add.6960, %add.6960)
  %convert.5589 = f32[512,8,128]{2,1,0} convert(%multiply.9944)
  %reduce.1945 = f32[] reduce(%convert.5589, %constant.3956), dimensions={0,1,2}, to_apply=%region_2412.49287
  %all-reduce.968 = f32[] all-reduce(%reduce.1945), channel_id=2059, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2412.49287.clone
  %convert.5590 = bf16[] convert(%all-reduce.968)
  %add.7824 = bf16[] add(%add.7823, %convert.5590)
  %multiply.9945 = bf16[512,8]{1,0} multiply(%add.6965, %add.6965)
  %convert.5591 = f32[512,8]{1,0} convert(%multiply.9945)
  %reduce.1946 = f32[] reduce(%convert.5591, %constant.3956), dimensions={0,1}, to_apply=%region_2413.49296
  %all-reduce.969 = f32[] all-reduce(%reduce.1946), channel_id=2060, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2413.49296.clone
  %convert.5592 = bf16[] convert(%all-reduce.969)
  %add.7825 = bf16[] add(%add.7824, %convert.5592)
  %multiply.9946 = bf16[1,4096,14336]{2,1,0} multiply(%add.6970, %add.6970)
  %convert.5593 = f32[1,4096,14336]{2,1,0} convert(%multiply.9946)
  %reduce.1947 = f32[] reduce(%convert.5593, %constant.3956), dimensions={0,1,2}, to_apply=%region_2414.49305
  %all-reduce.970 = f32[] all-reduce(%reduce.1947), channel_id=2061, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2414.49305.clone
  %convert.5594 = bf16[] convert(%all-reduce.970)
  %add.7826 = bf16[] add(%add.7825, %convert.5594)
  %multiply.9947 = bf16[1,4096,14336]{2,1,0} multiply(%add.6975, %add.6975)
  %convert.5595 = f32[1,4096,14336]{2,1,0} convert(%multiply.9947)
  %reduce.1948 = f32[] reduce(%convert.5595, %constant.3956), dimensions={0,1,2}, to_apply=%region_2415.49314
  %all-reduce.971 = f32[] all-reduce(%reduce.1948), channel_id=2062, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2415.49314.clone
  %convert.5596 = bf16[] convert(%all-reduce.971)
  %add.7827 = bf16[] add(%add.7826, %convert.5596)
  %multiply.9948 = bf16[1,14336,4096]{2,1,0} multiply(%add.6980, %add.6980)
  %convert.5597 = f32[1,14336,4096]{2,1,0} convert(%multiply.9948)
  %reduce.1949 = f32[] reduce(%convert.5597, %constant.3956), dimensions={0,1,2}, to_apply=%region_2416.49323
  %all-reduce.972 = f32[] all-reduce(%reduce.1949), channel_id=2063, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2416.49323.clone
  %convert.5598 = bf16[] convert(%all-reduce.972)
  %add.7828 = bf16[] add(%add.7827, %convert.5598)
  %multiply.9949 = bf16[4096]{0} multiply(%add.6985, %add.6985)
  %convert.5599 = f32[4096]{0} convert(%multiply.9949)
  %reduce.1950 = f32[] reduce(%convert.5599, %constant.3956), dimensions={0}, to_apply=%region_2417.49332
  %convert.5600 = bf16[] convert(%reduce.1950)
  %add.7829 = bf16[] add(%add.7828, %convert.5600)
  %multiply.9950 = bf16[4096]{0} multiply(%add.6991, %add.6991)
  %convert.5601 = f32[4096]{0} convert(%multiply.9950)
  %reduce.1951 = f32[] reduce(%convert.5601, %constant.3956), dimensions={0}, to_apply=%region_2418.49341
  %convert.5602 = bf16[] convert(%reduce.1951)
  %add.7830 = bf16[] add(%add.7829, %convert.5602)
  %multiply.9951 = bf16[512,8,128]{2,1,0} multiply(%add.6997, %add.6997)
  %convert.5604 = f32[512,8,128]{2,1,0} convert(%multiply.9951)
  %reduce.1952 = f32[] reduce(%convert.5604, %constant.3956), dimensions={0,1,2}, to_apply=%region_2419.49350
  %all-reduce.973 = f32[] all-reduce(%reduce.1952), channel_id=2064, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2419.49350.clone
  %convert.5605 = bf16[] convert(%all-reduce.973)
  %add.7831 = bf16[] add(%add.7830, %convert.5605)
  %multiply.9952 = bf16[32,128,512]{2,1,0} multiply(%add.7003, %add.7003)
  %convert.5606 = f32[32,128,512]{2,1,0} convert(%multiply.9952)
  %reduce.1953 = f32[] reduce(%convert.5606, %constant.3956), dimensions={0,1,2}, to_apply=%region_2420.49359
  %all-reduce.974 = f32[] all-reduce(%reduce.1953), channel_id=2065, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2420.49359.clone
  %convert.5607 = bf16[] convert(%all-reduce.974)
  %add.7832 = bf16[] add(%add.7831, %convert.5607)
  %multiply.9953 = bf16[512,32,128]{2,1,0} multiply(%add.7008, %add.7008)
  %convert.5608 = f32[512,32,128]{2,1,0} convert(%multiply.9953)
  %reduce.1954 = f32[] reduce(%convert.5608, %constant.3956), dimensions={0,1,2}, to_apply=%region_2421.49368
  %all-reduce.975 = f32[] all-reduce(%reduce.1954), channel_id=2066, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2421.49368.clone
  %convert.5609 = bf16[] convert(%all-reduce.975)
  %add.7833 = bf16[] add(%add.7832, %convert.5609)
  %multiply.9954 = bf16[512,8,128]{2,1,0} multiply(%add.7013, %add.7013)
  %convert.5610 = f32[512,8,128]{2,1,0} convert(%multiply.9954)
  %reduce.1955 = f32[] reduce(%convert.5610, %constant.3956), dimensions={0,1,2}, to_apply=%region_2422.49377
  %all-reduce.976 = f32[] all-reduce(%reduce.1955), channel_id=2067, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2422.49377.clone
  %convert.5612 = bf16[] convert(%all-reduce.976)
  %add.7835 = bf16[] add(%add.7833, %convert.5612)
  %multiply.9955 = bf16[512,8]{1,0} multiply(%add.7018, %add.7018)
  %convert.5613 = f32[512,8]{1,0} convert(%multiply.9955)
  %reduce.1956 = f32[] reduce(%convert.5613, %constant.3956), dimensions={0,1}, to_apply=%region_2423.49386
  %all-reduce.977 = f32[] all-reduce(%reduce.1956), channel_id=2068, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2423.49386.clone
  %convert.5614 = bf16[] convert(%all-reduce.977)
  %add.7836 = bf16[] add(%add.7835, %convert.5614)
  %multiply.9956 = bf16[1,4096,14336]{2,1,0} multiply(%add.7023, %add.7023)
  %convert.5615 = f32[1,4096,14336]{2,1,0} convert(%multiply.9956)
  %reduce.1957 = f32[] reduce(%convert.5615, %constant.3956), dimensions={0,1,2}, to_apply=%region_2424.49395
  %all-reduce.978 = f32[] all-reduce(%reduce.1957), channel_id=2069, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2424.49395.clone
  %convert.5616 = bf16[] convert(%all-reduce.978)
  %add.7837 = bf16[] add(%add.7836, %convert.5616)
  %multiply.9957 = bf16[1,4096,14336]{2,1,0} multiply(%add.7028, %add.7028)
  %convert.5617 = f32[1,4096,14336]{2,1,0} convert(%multiply.9957)
  %reduce.1958 = f32[] reduce(%convert.5617, %constant.3956), dimensions={0,1,2}, to_apply=%region_2425.49404
  %all-reduce.979 = f32[] all-reduce(%reduce.1958), channel_id=2070, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2425.49404.clone
  %convert.5618 = bf16[] convert(%all-reduce.979)
  %add.7838 = bf16[] add(%add.7837, %convert.5618)
  %multiply.9958 = bf16[1,14336,4096]{2,1,0} multiply(%add.7033, %add.7033)
  %convert.5619 = f32[1,14336,4096]{2,1,0} convert(%multiply.9958)
  %reduce.1959 = f32[] reduce(%convert.5619, %constant.3956), dimensions={0,1,2}, to_apply=%region_2426.49413
  %all-reduce.980 = f32[] all-reduce(%reduce.1959), channel_id=2071, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2426.49413.clone
  %convert.5620 = bf16[] convert(%all-reduce.980)
  %add.7839 = bf16[] add(%add.7838, %convert.5620)
  %multiply.9959 = bf16[4096]{0} multiply(%add.7038, %add.7038)
  %convert.5621 = f32[4096]{0} convert(%multiply.9959)
  %reduce.1961 = f32[] reduce(%convert.5621, %constant.3956), dimensions={0}, to_apply=%region_2427.49422
  %convert.5622 = bf16[] convert(%reduce.1961)
  %add.7840 = bf16[] add(%add.7839, %convert.5622)
  %multiply.9960 = bf16[4096]{0} multiply(%add.7043, %add.7043)
  %convert.5623 = f32[4096]{0} convert(%multiply.9960)
  %reduce.1962 = f32[] reduce(%convert.5623, %constant.3956), dimensions={0}, to_apply=%region_2428.49431
  %convert.5624 = bf16[] convert(%reduce.1962)
  %add.7841 = bf16[] add(%add.7840, %convert.5624)
  %multiply.9961 = bf16[512,8,128]{2,1,0} multiply(%add.7048, %add.7048)
  %convert.5625 = f32[512,8,128]{2,1,0} convert(%multiply.9961)
  %reduce.1963 = f32[] reduce(%convert.5625, %constant.3956), dimensions={0,1,2}, to_apply=%region_2429.49440
  %all-reduce.981 = f32[] all-reduce(%reduce.1963), channel_id=2072, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2429.49440.clone
  %convert.5626 = bf16[] convert(%all-reduce.981)
  %add.7842 = bf16[] add(%add.7841, %convert.5626)
  %multiply.9962 = bf16[32,128,512]{2,1,0} multiply(%add.7053, %add.7053)
  %convert.5627 = f32[32,128,512]{2,1,0} convert(%multiply.9962)
  %reduce.1964 = f32[] reduce(%convert.5627, %constant.3956), dimensions={0,1,2}, to_apply=%region_2430.49449
  %all-reduce.982 = f32[] all-reduce(%reduce.1964), channel_id=2073, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2430.49449.clone
  %convert.5628 = bf16[] convert(%all-reduce.982)
  %add.7843 = bf16[] add(%add.7842, %convert.5628)
  %multiply.9963 = bf16[512,32,128]{2,1,0} multiply(%add.7059, %add.7059)
  %convert.5629 = f32[512,32,128]{2,1,0} convert(%multiply.9963)
  %reduce.1965 = f32[] reduce(%convert.5629, %constant.3956), dimensions={0,1,2}, to_apply=%region_2431.49458
  %all-reduce.983 = f32[] all-reduce(%reduce.1965), channel_id=2074, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2431.49458.clone
  %convert.5631 = bf16[] convert(%all-reduce.983)
  %add.7845 = bf16[] add(%add.7843, %convert.5631)
  %multiply.9964 = bf16[512,8,128]{2,1,0} multiply(%add.7064, %add.7064)
  %convert.5632 = f32[512,8,128]{2,1,0} convert(%multiply.9964)
  %reduce.1966 = f32[] reduce(%convert.5632, %constant.3956), dimensions={0,1,2}, to_apply=%region_2432.49467
  %all-reduce.984 = f32[] all-reduce(%reduce.1966), channel_id=2075, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2432.49467.clone
  %convert.5633 = bf16[] convert(%all-reduce.984)
  %add.7846 = bf16[] add(%add.7845, %convert.5633)
  %multiply.9965 = bf16[512,8]{1,0} multiply(%add.7069, %add.7069)
  %convert.5634 = f32[512,8]{1,0} convert(%multiply.9965)
  %reduce.1967 = f32[] reduce(%convert.5634, %constant.3956), dimensions={0,1}, to_apply=%region_2433.49476
  %all-reduce.985 = f32[] all-reduce(%reduce.1967), channel_id=2076, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2433.49476.clone
  %convert.5635 = bf16[] convert(%all-reduce.985)
  %add.7847 = bf16[] add(%add.7846, %convert.5635)
  %multiply.9966 = bf16[1,4096,14336]{2,1,0} multiply(%add.7074, %add.7074)
  %convert.5636 = f32[1,4096,14336]{2,1,0} convert(%multiply.9966)
  %reduce.1969 = f32[] reduce(%convert.5636, %constant.3956), dimensions={0,1,2}, to_apply=%region_2434.49485
  %all-reduce.986 = f32[] all-reduce(%reduce.1969), channel_id=2077, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2434.49485.clone
  %convert.5637 = bf16[] convert(%all-reduce.986)
  %add.7848 = bf16[] add(%add.7847, %convert.5637)
  %multiply.9967 = bf16[1,4096,14336]{2,1,0} multiply(%add.7079, %add.7079)
  %convert.5638 = f32[1,4096,14336]{2,1,0} convert(%multiply.9967)
  %reduce.1970 = f32[] reduce(%convert.5638, %constant.3956), dimensions={0,1,2}, to_apply=%region_2435.49494
  %all-reduce.987 = f32[] all-reduce(%reduce.1970), channel_id=2078, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2435.49494.clone
  %convert.5639 = bf16[] convert(%all-reduce.987)
  %add.7849 = bf16[] add(%add.7848, %convert.5639)
  %multiply.9968 = bf16[1,14336,4096]{2,1,0} multiply(%add.7084, %add.7084)
  %convert.5640 = f32[1,14336,4096]{2,1,0} convert(%multiply.9968)
  %reduce.1971 = f32[] reduce(%convert.5640, %constant.3956), dimensions={0,1,2}, to_apply=%region_2436.49503
  %all-reduce.988 = f32[] all-reduce(%reduce.1971), channel_id=2079, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2436.49503.clone
  %convert.5641 = bf16[] convert(%all-reduce.988)
  %add.7850 = bf16[] add(%add.7849, %convert.5641)
  %multiply.9969 = bf16[4096]{0} multiply(%add.7089, %add.7089)
  %convert.5642 = f32[4096]{0} convert(%multiply.9969)
  %reduce.1972 = f32[] reduce(%convert.5642, %constant.3956), dimensions={0}, to_apply=%region_2437.49512
  %convert.5643 = bf16[] convert(%reduce.1972)
  %add.7851 = bf16[] add(%add.7850, %convert.5643)
  %multiply.9970 = bf16[4096]{0} multiply(%add.7094, %add.7094)
  %convert.5644 = f32[4096]{0} convert(%multiply.9970)
  %reduce.1974 = f32[] reduce(%convert.5644, %constant.3956), dimensions={0}, to_apply=%region_2438.49521
  %convert.5646 = bf16[] convert(%reduce.1974)
  %add.7852 = bf16[] add(%add.7851, %convert.5646)
  %multiply.9971 = bf16[512,8,128]{2,1,0} multiply(%add.7100, %add.7100)
  %convert.5647 = f32[512,8,128]{2,1,0} convert(%multiply.9971)
  %reduce.1975 = f32[] reduce(%convert.5647, %constant.3956), dimensions={0,1,2}, to_apply=%region_2439.49530
  %all-reduce.989 = f32[] all-reduce(%reduce.1975), channel_id=2080, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2439.49530.clone
  %convert.5648 = bf16[] convert(%all-reduce.989)
  %add.7853 = bf16[] add(%add.7852, %convert.5648)
  %multiply.9972 = bf16[32,128,512]{2,1,0} multiply(%add.7105, %add.7105)
  %convert.5649 = f32[32,128,512]{2,1,0} convert(%multiply.9972)
  %reduce.1976 = f32[] reduce(%convert.5649, %constant.3956), dimensions={0,1,2}, to_apply=%region_2440.49539
  %all-reduce.990 = f32[] all-reduce(%reduce.1976), channel_id=2081, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2440.49539.clone
  %convert.5650 = bf16[] convert(%all-reduce.990)
  %add.7854 = bf16[] add(%add.7853, %convert.5650)
  %multiply.9973 = bf16[512,32,128]{2,1,0} multiply(%add.7110, %add.7110)
  %convert.5651 = f32[512,32,128]{2,1,0} convert(%multiply.9973)
  %reduce.1977 = f32[] reduce(%convert.5651, %constant.3956), dimensions={0,1,2}, to_apply=%region_2441.49548
  %all-reduce.991 = f32[] all-reduce(%reduce.1977), channel_id=2082, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2441.49548.clone
  %convert.5652 = bf16[] convert(%all-reduce.991)
  %add.7855 = bf16[] add(%add.7854, %convert.5652)
  %multiply.9974 = bf16[512,8,128]{2,1,0} multiply(%add.7115, %add.7115)
  %convert.5653 = f32[512,8,128]{2,1,0} convert(%multiply.9974)
  %reduce.1978 = f32[] reduce(%convert.5653, %constant.3956), dimensions={0,1,2}, to_apply=%region_2442.49557
  %all-reduce.992 = f32[] all-reduce(%reduce.1978), channel_id=2083, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2442.49557.clone
  %convert.5654 = bf16[] convert(%all-reduce.992)
  %add.7856 = bf16[] add(%add.7855, %convert.5654)
  %multiply.9975 = bf16[512,8]{1,0} multiply(%add.7120, %add.7120)
  %convert.5655 = f32[512,8]{1,0} convert(%multiply.9975)
  %reduce.1979 = f32[] reduce(%convert.5655, %constant.3956), dimensions={0,1}, to_apply=%region_2443.49566
  %all-reduce.993 = f32[] all-reduce(%reduce.1979), channel_id=2084, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2443.49566.clone
  %convert.5656 = bf16[] convert(%all-reduce.993)
  %add.7857 = bf16[] add(%add.7856, %convert.5656)
  %multiply.9976 = bf16[1,4096,14336]{2,1,0} multiply(%add.7125, %add.7125)
  %convert.5658 = f32[1,4096,14336]{2,1,0} convert(%multiply.9976)
  %reduce.1980 = f32[] reduce(%convert.5658, %constant.3956), dimensions={0,1,2}, to_apply=%region_2444.49575
  %all-reduce.994 = f32[] all-reduce(%reduce.1980), channel_id=2085, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2444.49575.clone
  %convert.5659 = bf16[] convert(%all-reduce.994)
  %add.7859 = bf16[] add(%add.7857, %convert.5659)
  %multiply.9977 = bf16[1,4096,14336]{2,1,0} multiply(%add.7131, %add.7131)
  %convert.5660 = f32[1,4096,14336]{2,1,0} convert(%multiply.9977)
  %reduce.1981 = f32[] reduce(%convert.5660, %constant.3956), dimensions={0,1,2}, to_apply=%region_2445.49584
  %all-reduce.995 = f32[] all-reduce(%reduce.1981), channel_id=2086, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2445.49584.clone
  %convert.5661 = bf16[] convert(%all-reduce.995)
  %add.7860 = bf16[] add(%add.7859, %convert.5661)
  %multiply.9978 = bf16[1,14336,4096]{2,1,0} multiply(%add.7137, %add.7137)
  %convert.5662 = f32[1,14336,4096]{2,1,0} convert(%multiply.9978)
  %reduce.1982 = f32[] reduce(%convert.5662, %constant.3956), dimensions={0,1,2}, to_apply=%region_2446.49593
  %all-reduce.996 = f32[] all-reduce(%reduce.1982), channel_id=2087, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2446.49593.clone
  %convert.5663 = bf16[] convert(%all-reduce.996)
  %add.7861 = bf16[] add(%add.7860, %convert.5663)
  %multiply.9979 = bf16[4096]{0} multiply(%add.7142, %add.7142)
  %convert.5664 = f32[4096]{0} convert(%multiply.9979)
  %reduce.1983 = f32[] reduce(%convert.5664, %constant.3956), dimensions={0}, to_apply=%region_2447.49602
  %convert.5665 = bf16[] convert(%reduce.1983)
  %add.7862 = bf16[] add(%add.7861, %convert.5665)
  %multiply.9980 = bf16[4096]{0} multiply(%add.7147, %add.7147)
  %convert.5666 = f32[4096]{0} convert(%multiply.9980)
  %reduce.1984 = f32[] reduce(%convert.5666, %constant.3956), dimensions={0}, to_apply=%region_2448.49611
  %convert.5667 = bf16[] convert(%reduce.1984)
  %add.7863 = bf16[] add(%add.7862, %convert.5667)
  %multiply.9981 = bf16[512,8,128]{2,1,0} multiply(%add.7153, %add.7153)
  %convert.5668 = f32[512,8,128]{2,1,0} convert(%multiply.9981)
  %reduce.1985 = f32[] reduce(%convert.5668, %constant.3956), dimensions={0,1,2}, to_apply=%region_2449.49620
  %all-reduce.997 = f32[] all-reduce(%reduce.1985), channel_id=2088, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2449.49620.clone
  %convert.5669 = bf16[] convert(%all-reduce.997)
  %add.7864 = bf16[] add(%add.7863, %convert.5669)
  %multiply.9982 = bf16[32,128,512]{2,1,0} multiply(%add.7160, %add.7160)
  %convert.5670 = f32[32,128,512]{2,1,0} convert(%multiply.9982)
  %reduce.1986 = f32[] reduce(%convert.5670, %constant.3956), dimensions={0,1,2}, to_apply=%region_2450.49629
  %all-reduce.998 = f32[] all-reduce(%reduce.1986), channel_id=2089, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2450.49629.clone
  %convert.5671 = bf16[] convert(%all-reduce.998)
  %add.7865 = bf16[] add(%add.7864, %convert.5671)
  %multiply.9984 = bf16[512,32,128]{2,1,0} multiply(%add.7165, %add.7165)
  %convert.5672 = f32[512,32,128]{2,1,0} convert(%multiply.9984)
  %reduce.1987 = f32[] reduce(%convert.5672, %constant.3956), dimensions={0,1,2}, to_apply=%region_2451.49638
  %all-reduce.999 = f32[] all-reduce(%reduce.1987), channel_id=2090, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2451.49638.clone
  %convert.5673 = bf16[] convert(%all-reduce.999)
  %add.7866 = bf16[] add(%add.7865, %convert.5673)
  %multiply.9985 = bf16[512,8,128]{2,1,0} multiply(%add.7170, %add.7170)
  %convert.5674 = f32[512,8,128]{2,1,0} convert(%multiply.9985)
  %reduce.1989 = f32[] reduce(%convert.5674, %constant.3956), dimensions={0,1,2}, to_apply=%region_2452.49647
  %all-reduce.1000 = f32[] all-reduce(%reduce.1989), channel_id=2091, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2452.49647.clone
  %convert.5675 = bf16[] convert(%all-reduce.1000)
  %add.7868 = bf16[] add(%add.7866, %convert.5675)
  %multiply.9986 = bf16[512,32000]{1,0} multiply(%add.7175, %add.7175)
  %convert.5676 = f32[512,32000]{1,0} convert(%multiply.9986)
  %reduce.1990 = f32[] reduce(%convert.5676, %constant.3956), dimensions={0,1}, to_apply=%region_2453.49656
  %all-reduce.1001 = f32[] all-reduce(%reduce.1990), channel_id=2092, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2453.49656.clone
  %convert.5677 = bf16[] convert(%all-reduce.1001)
  %add.7869 = bf16[] add(%add.7868, %convert.5677)
  %multiply.9987 = bf16[32000,512]{1,0} multiply(%add.7180, %add.7180)
  %convert.5678 = f32[32000,512]{1,0} convert(%multiply.9987)
  %reduce.1991 = f32[] reduce(%convert.5678, %constant.3956), dimensions={0,1}, to_apply=%region_2454.49665
  %all-reduce.1002 = f32[] all-reduce(%reduce.1991), channel_id=2093, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2454.49665.clone
  %convert.5679 = bf16[] convert(%all-reduce.1002)
  %add.7870 = bf16[] add(%add.7869, %convert.5679)
  %sqrt.325 = bf16[] sqrt(%add.7870)
  %all-reduce.1003 = f32[] all-reduce(%reduce.933), channel_id=2094, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1810.43869.clone
  %convert.5684 = bf16[] convert(%all-reduce.1003)
  %add.7871 = bf16[] add(%convert.1402, %convert.5684)
  %all-reduce.1004 = f32[] all-reduce(%reduce.934), channel_id=2095, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1811.43878.clone
  %convert.5686 = bf16[] convert(%all-reduce.1004)
  %add.7872 = bf16[] add(%add.7871, %convert.5686)
  %all-reduce.1005 = f32[] all-reduce(%reduce.935), channel_id=2096, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1812.43887.clone
  %convert.5688 = bf16[] convert(%all-reduce.1005)
  %add.7873 = bf16[] add(%add.7872, %convert.5688)
  %all-reduce.1006 = f32[] all-reduce(%reduce.936), channel_id=2097, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1813.43896.clone
  %convert.5690 = bf16[] convert(%all-reduce.1006)
  %add.7874 = bf16[] add(%add.7873, %convert.5690)
  %add.7875 = bf16[] add(%add.7874, %convert.2574)
  %add.7876 = bf16[] add(%add.7875, %convert.2580)
  %all-reduce.1007 = f32[] all-reduce(%reduce.942), channel_id=2098, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1816.43923.clone
  %convert.5696 = bf16[] convert(%all-reduce.1007)
  %add.7877 = bf16[] add(%add.7876, %convert.5696)
  %all-reduce.1008 = f32[] all-reduce(%reduce.943), channel_id=2099, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1817.43932.clone
  %convert.5698 = bf16[] convert(%all-reduce.1008)
  %add.7878 = bf16[] add(%add.7877, %convert.5698)
  %all-reduce.1009 = f32[] all-reduce(%reduce.944), channel_id=2100, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1818.43941.clone
  %convert.5700 = bf16[] convert(%all-reduce.1009)
  %add.7879 = bf16[] add(%add.7878, %convert.5700)
  %all-reduce.1010 = f32[] all-reduce(%reduce.945), channel_id=2101, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1819.43950.clone
  %convert.5702 = bf16[] convert(%all-reduce.1010)
  %add.7880 = bf16[] add(%add.7879, %convert.5702)
  %all-reduce.1011 = f32[] all-reduce(%reduce.946), channel_id=2102, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1820.43959.clone
  %convert.5704 = bf16[] convert(%all-reduce.1011)
  %add.7881 = bf16[] add(%add.7880, %convert.5704)
  %all-reduce.1012 = f32[] all-reduce(%reduce.947), channel_id=2103, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1821.43968.clone
  %convert.5706 = bf16[] convert(%all-reduce.1012)
  %add.7882 = bf16[] add(%add.7881, %convert.5706)
  %all-reduce.1013 = f32[] all-reduce(%reduce.948), channel_id=2104, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1822.43977.clone
  %convert.5708 = bf16[] convert(%all-reduce.1013)
  %add.7883 = bf16[] add(%add.7882, %convert.5708)
  %all-reduce.1014 = f32[] all-reduce(%reduce.949), channel_id=2105, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1823.43986.clone
  %convert.5710 = bf16[] convert(%all-reduce.1014)
  %add.7884 = bf16[] add(%add.7883, %convert.5710)
  %add.7885 = bf16[] add(%add.7884, %convert.2599)
  %add.7886 = bf16[] add(%add.7885, %convert.2601)
  %all-reduce.1015 = f32[] all-reduce(%reduce.954), channel_id=2106, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1826.44013.clone
  %convert.5716 = bf16[] convert(%all-reduce.1015)
  %add.7887 = bf16[] add(%add.7886, %convert.5716)
  %all-reduce.1016 = f32[] all-reduce(%reduce.955), channel_id=2107, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1827.44022.clone
  %convert.5718 = bf16[] convert(%all-reduce.1016)
  %add.7888 = bf16[] add(%add.7887, %convert.5718)
  %all-reduce.1017 = f32[] all-reduce(%reduce.956), channel_id=2108, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1828.44031.clone
  %convert.5720 = bf16[] convert(%all-reduce.1017)
  %add.7889 = bf16[] add(%add.7888, %convert.5720)
  %all-reduce.1018 = f32[] all-reduce(%reduce.957), channel_id=2109, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1829.44040.clone
  %convert.5722 = bf16[] convert(%all-reduce.1018)
  %add.7890 = bf16[] add(%add.7889, %convert.5722)
  %all-reduce.1019 = f32[] all-reduce(%reduce.958), channel_id=2110, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1830.44049.clone
  %convert.5724 = bf16[] convert(%all-reduce.1019)
  %add.7891 = bf16[] add(%add.7890, %convert.5724)
  %all-reduce.1020 = f32[] all-reduce(%reduce.959), channel_id=2111, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1831.44058.clone
  %convert.5727 = bf16[] convert(%all-reduce.1020)
  %add.7892 = bf16[] add(%add.7891, %convert.5727)
  %all-reduce.1021 = f32[] all-reduce(%reduce.960), channel_id=2112, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1832.44067.clone
  %convert.5729 = bf16[] convert(%all-reduce.1021)
  %add.7893 = bf16[] add(%add.7892, %convert.5729)
  %all-reduce.1022 = f32[] all-reduce(%reduce.961), channel_id=2113, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1833.44076.clone
  %convert.5731 = bf16[] convert(%all-reduce.1022)
  %add.7894 = bf16[] add(%add.7893, %convert.5731)
  %add.7895 = bf16[] add(%add.7894, %convert.2621)
  %add.7896 = bf16[] add(%add.7895, %convert.2623)
  %all-reduce.1023 = f32[] all-reduce(%reduce.966), channel_id=2114, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1836.44103.clone
  %convert.5738 = bf16[] convert(%all-reduce.1023)
  %add.7897 = bf16[] add(%add.7896, %convert.5738)
  %all-reduce.1024 = f32[] all-reduce(%reduce.967), channel_id=2115, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1837.44112.clone
  %convert.5740 = bf16[] convert(%all-reduce.1024)
  %add.7898 = bf16[] add(%add.7897, %convert.5740)
  %all-reduce.1025 = f32[] all-reduce(%reduce.968), channel_id=2116, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1838.44121.clone
  %convert.5742 = bf16[] convert(%all-reduce.1025)
  %add.7900 = bf16[] add(%add.7898, %convert.5742)
  %all-reduce.1026 = f32[] all-reduce(%reduce.969), channel_id=2117, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1839.44130.clone
  %convert.5744 = bf16[] convert(%all-reduce.1026)
  %add.7901 = bf16[] add(%add.7900, %convert.5744)
  %all-reduce.1027 = f32[] all-reduce(%reduce.970), channel_id=2118, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1840.44139.clone
  %convert.5747 = bf16[] convert(%all-reduce.1027)
  %add.7902 = bf16[] add(%add.7901, %convert.5747)
  %all-reduce.1028 = f32[] all-reduce(%reduce.971), channel_id=2119, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1841.44148.clone
  %convert.5749 = bf16[] convert(%all-reduce.1028)
  %add.7903 = bf16[] add(%add.7902, %convert.5749)
  %all-reduce.1029 = f32[] all-reduce(%reduce.972), channel_id=2120, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1842.44157.clone
  %convert.5751 = bf16[] convert(%all-reduce.1029)
  %add.7904 = bf16[] add(%add.7903, %convert.5751)
  %all-reduce.1030 = f32[] all-reduce(%reduce.973), channel_id=2121, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1843.44166.clone
  %convert.5753 = bf16[] convert(%all-reduce.1030)
  %add.7905 = bf16[] add(%add.7904, %convert.5753)
  %add.7907 = bf16[] add(%add.7905, %convert.2642)
  %add.7908 = bf16[] add(%add.7907, %convert.2644)
  %all-reduce.1031 = f32[] all-reduce(%reduce.978), channel_id=2122, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1846.44193.clone
  %convert.5760 = bf16[] convert(%all-reduce.1031)
  %add.7909 = bf16[] add(%add.7908, %convert.5760)
  %all-reduce.1032 = f32[] all-reduce(%reduce.979), channel_id=2123, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1847.44202.clone
  %convert.5762 = bf16[] convert(%all-reduce.1032)
  %add.7910 = bf16[] add(%add.7909, %convert.5762)
  %all-reduce.1033 = f32[] all-reduce(%reduce.980), channel_id=2124, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1848.44211.clone
  %convert.5764 = bf16[] convert(%all-reduce.1033)
  %add.7912 = bf16[] add(%add.7910, %convert.5764)
  %all-reduce.1034 = f32[] all-reduce(%reduce.981), channel_id=2125, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1849.44220.clone
  %convert.5766 = bf16[] convert(%all-reduce.1034)
  %add.7913 = bf16[] add(%add.7912, %convert.5766)
  %all-reduce.1035 = f32[] all-reduce(%reduce.982), channel_id=2126, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1850.44229.clone
  %convert.5768 = bf16[] convert(%all-reduce.1035)
  %add.7914 = bf16[] add(%add.7913, %convert.5768)
  %all-reduce.1036 = f32[] all-reduce(%reduce.983), channel_id=2127, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1851.44238.clone
  %convert.5770 = bf16[] convert(%all-reduce.1036)
  %add.7915 = bf16[] add(%add.7914, %convert.5770)
  %all-reduce.1037 = f32[] all-reduce(%reduce.984), channel_id=2128, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1852.44247.clone
  %convert.5772 = bf16[] convert(%all-reduce.1037)
  %add.7916 = bf16[] add(%add.7915, %convert.5772)
  %all-reduce.1038 = f32[] all-reduce(%reduce.985), channel_id=2129, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1853.44256.clone
  %convert.5775 = bf16[] convert(%all-reduce.1038)
  %add.7917 = bf16[] add(%add.7916, %convert.5775)
  %add.7918 = bf16[] add(%add.7917, %convert.2662)
  %add.7919 = bf16[] add(%add.7918, %convert.2664)
  %all-reduce.1039 = f32[] all-reduce(%reduce.990), channel_id=2130, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1856.44283.clone
  %convert.5781 = bf16[] convert(%all-reduce.1039)
  %add.7920 = bf16[] add(%add.7919, %convert.5781)
  %all-reduce.1040 = f32[] all-reduce(%reduce.991), channel_id=2131, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1857.44292.clone
  %convert.5783 = bf16[] convert(%all-reduce.1040)
  %add.7921 = bf16[] add(%add.7920, %convert.5783)
  %all-reduce.1041 = f32[] all-reduce(%reduce.992), channel_id=2132, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1858.44301.clone
  %convert.5785 = bf16[] convert(%all-reduce.1041)
  %add.7922 = bf16[] add(%add.7921, %convert.5785)
  %all-reduce.1042 = f32[] all-reduce(%reduce.993), channel_id=2133, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1859.44310.clone
  %convert.5787 = bf16[] convert(%all-reduce.1042)
  %add.7923 = bf16[] add(%add.7922, %convert.5787)
  %all-reduce.1043 = f32[] all-reduce(%reduce.994), channel_id=2134, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1860.44319.clone
  %convert.5790 = bf16[] convert(%all-reduce.1043)
  %add.7924 = bf16[] add(%add.7923, %convert.5790)
  %all-reduce.1044 = f32[] all-reduce(%reduce.995), channel_id=2135, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1861.44328.clone
  %convert.5792 = bf16[] convert(%all-reduce.1044)
  %add.7925 = bf16[] add(%add.7924, %convert.5792)
  %all-reduce.1045 = f32[] all-reduce(%reduce.996), channel_id=2136, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1862.44337.clone
  %convert.5794 = bf16[] convert(%all-reduce.1045)
  %add.7926 = bf16[] add(%add.7925, %convert.5794)
  %all-reduce.1046 = f32[] all-reduce(%reduce.997), channel_id=2137, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1863.44346.clone
  %convert.5796 = bf16[] convert(%all-reduce.1046)
  %add.7927 = bf16[] add(%add.7926, %convert.5796)
  %add.7928 = bf16[] add(%add.7927, %convert.2682)
  %add.7929 = bf16[] add(%add.7928, %convert.2684)
  %all-reduce.1047 = f32[] all-reduce(%reduce.1002), channel_id=2138, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1866.44373.clone
  %convert.5802 = bf16[] convert(%all-reduce.1047)
  %add.7930 = bf16[] add(%add.7929, %convert.5802)
  %all-reduce.1048 = f32[] all-reduce(%reduce.1003), channel_id=2139, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1867.44382.clone
  %convert.5805 = bf16[] convert(%all-reduce.1048)
  %add.7931 = bf16[] add(%add.7930, %convert.5805)
  %all-reduce.1049 = f32[] all-reduce(%reduce.1004), channel_id=2140, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1868.44391.clone
  %convert.5808 = bf16[] convert(%all-reduce.1049)
  %add.7932 = bf16[] add(%add.7931, %convert.5808)
  %all-reduce.1050 = f32[] all-reduce(%reduce.1005), channel_id=2141, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1869.44400.clone
  %convert.5810 = bf16[] convert(%all-reduce.1050)
  %add.7933 = bf16[] add(%add.7932, %convert.5810)
  %all-reduce.1051 = f32[] all-reduce(%reduce.1006), channel_id=2142, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1870.44409.clone
  %convert.5812 = bf16[] convert(%all-reduce.1051)
  %add.7934 = bf16[] add(%add.7933, %convert.5812)
  %all-reduce.1052 = f32[] all-reduce(%reduce.1007), channel_id=2143, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1871.44418.clone
  %convert.5814 = bf16[] convert(%all-reduce.1052)
  %add.7935 = bf16[] add(%add.7934, %convert.5814)
  %all-reduce.1053 = f32[] all-reduce(%reduce.1008), channel_id=2144, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1872.44427.clone
  %convert.5816 = bf16[] convert(%all-reduce.1053)
  %add.7936 = bf16[] add(%add.7935, %convert.5816)
  %all-reduce.1054 = f32[] all-reduce(%reduce.1009), channel_id=2145, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1873.44436.clone
  %convert.5820 = bf16[] convert(%all-reduce.1054)
  %add.7937 = bf16[] add(%add.7936, %convert.5820)
  %add.7938 = bf16[] add(%add.7937, %convert.2704)
  %add.7939 = bf16[] add(%add.7938, %convert.2707)
  %all-reduce.1055 = f32[] all-reduce(%reduce.1014), channel_id=2146, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1876.44463.clone
  %convert.5826 = bf16[] convert(%all-reduce.1055)
  %add.7940 = bf16[] add(%add.7939, %convert.5826)
  %all-reduce.1056 = f32[] all-reduce(%reduce.1015), channel_id=2147, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1877.44472.clone
  %convert.5828 = bf16[] convert(%all-reduce.1056)
  %add.7941 = bf16[] add(%add.7940, %convert.5828)
  %all-reduce.1057 = f32[] all-reduce(%reduce.1016), channel_id=2148, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1878.44481.clone
  %convert.5830 = bf16[] convert(%all-reduce.1057)
  %add.7942 = bf16[] add(%add.7941, %convert.5830)
  %all-reduce.1058 = f32[] all-reduce(%reduce.1017), channel_id=2149, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1879.44490.clone
  %convert.5832 = bf16[] convert(%all-reduce.1058)
  %add.7943 = bf16[] add(%add.7942, %convert.5832)
  %all-reduce.1059 = f32[] all-reduce(%reduce.1018), channel_id=2150, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1880.44499.clone
  %convert.5834 = bf16[] convert(%all-reduce.1059)
  %add.7944 = bf16[] add(%add.7943, %convert.5834)
  %all-reduce.1060 = f32[] all-reduce(%reduce.1019), channel_id=2151, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1881.44508.clone
  %convert.5836 = bf16[] convert(%all-reduce.1060)
  %add.7945 = bf16[] add(%add.7944, %convert.5836)
  %all-reduce.1061 = f32[] all-reduce(%reduce.1020), channel_id=2152, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1882.44517.clone
  %convert.5838 = bf16[] convert(%all-reduce.1061)
  %add.7946 = bf16[] add(%add.7945, %convert.5838)
  %all-reduce.1062 = f32[] all-reduce(%reduce.1021), channel_id=2153, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1883.44526.clone
  %convert.5840 = bf16[] convert(%all-reduce.1062)
  %add.7947 = bf16[] add(%add.7946, %convert.5840)
  %add.7948 = bf16[] add(%add.7947, %convert.2726)
  %add.7949 = bf16[] add(%add.7948, %convert.2728)
  %all-reduce.1063 = f32[] all-reduce(%reduce.1026), channel_id=2154, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1886.44553.clone
  %convert.5848 = bf16[] convert(%all-reduce.1063)
  %add.7950 = bf16[] add(%add.7949, %convert.5848)
  %all-reduce.1064 = f32[] all-reduce(%reduce.1027), channel_id=2155, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1887.44562.clone
  %convert.5850 = bf16[] convert(%all-reduce.1064)
  %add.7951 = bf16[] add(%add.7950, %convert.5850)
  %all-reduce.1065 = f32[] all-reduce(%reduce.1028), channel_id=2156, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1888.44571.clone
  %convert.5852 = bf16[] convert(%all-reduce.1065)
  %add.7952 = bf16[] add(%add.7951, %convert.5852)
  %all-reduce.1066 = f32[] all-reduce(%reduce.1029), channel_id=2157, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1889.44580.clone
  %convert.5854 = bf16[] convert(%all-reduce.1066)
  %add.7953 = bf16[] add(%add.7952, %convert.5854)
  %all-reduce.1067 = f32[] all-reduce(%reduce.1030), channel_id=2158, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1890.44589.clone
  %convert.5856 = bf16[] convert(%all-reduce.1067)
  %add.7954 = bf16[] add(%add.7953, %convert.5856)
  %all-reduce.1068 = f32[] all-reduce(%reduce.1031), channel_id=2159, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1891.44598.clone
  %convert.5860 = bf16[] convert(%all-reduce.1068)
  %add.7955 = bf16[] add(%add.7954, %convert.5860)
  %all-reduce.1069 = f32[] all-reduce(%reduce.1032), channel_id=2160, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1892.44607.clone
  %convert.5862 = bf16[] convert(%all-reduce.1069)
  %add.7956 = bf16[] add(%add.7955, %convert.5862)
  %all-reduce.1070 = f32[] all-reduce(%reduce.1033), channel_id=2161, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1893.44616.clone
  %convert.5864 = bf16[] convert(%all-reduce.1070)
  %add.7957 = bf16[] add(%add.7956, %convert.5864)
  %add.7958 = bf16[] add(%add.7957, %convert.2747)
  %add.7959 = bf16[] add(%add.7958, %convert.2750)
  %all-reduce.1071 = f32[] all-reduce(%reduce.1038), channel_id=2162, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1896.44643.clone
  %convert.5870 = bf16[] convert(%all-reduce.1071)
  %add.7960 = bf16[] add(%add.7959, %convert.5870)
  %all-reduce.1072 = f32[] all-reduce(%reduce.1039), channel_id=2163, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1897.44652.clone
  %convert.5872 = bf16[] convert(%all-reduce.1072)
  %add.7961 = bf16[] add(%add.7960, %convert.5872)
  %all-reduce.1073 = f32[] all-reduce(%reduce.1040), channel_id=2164, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1898.44661.clone
  %convert.5874 = bf16[] convert(%all-reduce.1073)
  %add.7962 = bf16[] add(%add.7961, %convert.5874)
  %all-reduce.1074 = f32[] all-reduce(%reduce.1041), channel_id=2165, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1899.44670.clone
  %convert.5876 = bf16[] convert(%all-reduce.1074)
  %add.7963 = bf16[] add(%add.7962, %convert.5876)
  %all-reduce.1075 = f32[] all-reduce(%reduce.1042), channel_id=2166, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1900.44679.clone
  %convert.5878 = bf16[] convert(%all-reduce.1075)
  %add.7964 = bf16[] add(%add.7963, %convert.5878)
  %all-reduce.1076 = f32[] all-reduce(%reduce.1043), channel_id=2167, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1901.44688.clone
  %convert.5880 = bf16[] convert(%all-reduce.1076)
  %add.7965 = bf16[] add(%add.7964, %convert.5880)
  %all-reduce.1077 = f32[] all-reduce(%reduce.1044), channel_id=2168, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1902.44697.clone
  %convert.5882 = bf16[] convert(%all-reduce.1077)
  %add.7966 = bf16[] add(%add.7965, %convert.5882)
  %all-reduce.1078 = f32[] all-reduce(%reduce.1045), channel_id=2169, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1903.44706.clone
  %convert.5884 = bf16[] convert(%all-reduce.1078)
  %add.7968 = bf16[] add(%add.7966, %convert.5884)
  %add.7969 = bf16[] add(%add.7968, %convert.2770)
  %add.7970 = bf16[] add(%add.7969, %convert.2772)
  %all-reduce.1079 = f32[] all-reduce(%reduce.1050), channel_id=2170, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1906.44733.clone
  %convert.5890 = bf16[] convert(%all-reduce.1079)
  %add.7971 = bf16[] add(%add.7970, %convert.5890)
  %all-reduce.1080 = f32[] all-reduce(%reduce.1051), channel_id=2171, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1907.44742.clone
  %convert.5892 = bf16[] convert(%all-reduce.1080)
  %add.7972 = bf16[] add(%add.7971, %convert.5892)
  %all-reduce.1081 = f32[] all-reduce(%reduce.1052), channel_id=2172, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1908.44751.clone
  %convert.5894 = bf16[] convert(%all-reduce.1081)
  %add.7973 = bf16[] add(%add.7972, %convert.5894)
  %all-reduce.1082 = f32[] all-reduce(%reduce.1053), channel_id=2173, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1909.44760.clone
  %convert.5896 = bf16[] convert(%all-reduce.1082)
  %add.7974 = bf16[] add(%add.7973, %convert.5896)
  %all-reduce.1083 = f32[] all-reduce(%reduce.1054), channel_id=2174, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1910.44769.clone
  %convert.5898 = bf16[] convert(%all-reduce.1083)
  %add.7975 = bf16[] add(%add.7974, %convert.5898)
  %all-reduce.1084 = f32[] all-reduce(%reduce.1055), channel_id=2175, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1911.44778.clone
  %convert.5900 = bf16[] convert(%all-reduce.1084)
  %add.7976 = bf16[] add(%add.7975, %convert.5900)
  %all-reduce.1085 = f32[] all-reduce(%reduce.1056), channel_id=2176, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1912.44787.clone
  %convert.5902 = bf16[] convert(%all-reduce.1085)
  %add.7977 = bf16[] add(%add.7976, %convert.5902)
  %all-reduce.1086 = f32[] all-reduce(%reduce.1057), channel_id=2177, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1913.44796.clone
  %convert.5904 = bf16[] convert(%all-reduce.1086)
  %add.7978 = bf16[] add(%add.7977, %convert.5904)
  %add.7979 = bf16[] add(%add.7978, %convert.2792)
  %add.7980 = bf16[] add(%add.7979, %convert.2794)
  %all-reduce.1087 = f32[] all-reduce(%reduce.1062), channel_id=2178, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1916.44823.clone
  %convert.5911 = bf16[] convert(%all-reduce.1087)
  %add.7981 = bf16[] add(%add.7980, %convert.5911)
  %all-reduce.1088 = f32[] all-reduce(%reduce.1063), channel_id=2179, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1917.44832.clone
  %convert.5913 = bf16[] convert(%all-reduce.1088)
  %add.7982 = bf16[] add(%add.7981, %convert.5913)
  %all-reduce.1089 = f32[] all-reduce(%reduce.1064), channel_id=2180, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1918.44841.clone
  %convert.5916 = bf16[] convert(%all-reduce.1089)
  %add.7983 = bf16[] add(%add.7982, %convert.5916)
  %all-reduce.1090 = f32[] all-reduce(%reduce.1065), channel_id=2181, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1919.44850.clone
  %convert.5918 = bf16[] convert(%all-reduce.1090)
  %add.7984 = bf16[] add(%add.7983, %convert.5918)
  %all-reduce.1091 = f32[] all-reduce(%reduce.1066), channel_id=2182, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1920.44859.clone
  %convert.5920 = bf16[] convert(%all-reduce.1091)
  %add.7985 = bf16[] add(%add.7984, %convert.5920)
  %all-reduce.1092 = f32[] all-reduce(%reduce.1067), channel_id=2183, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1921.44868.clone
  %convert.5922 = bf16[] convert(%all-reduce.1092)
  %add.7986 = bf16[] add(%add.7985, %convert.5922)
  %all-reduce.1093 = f32[] all-reduce(%reduce.1068), channel_id=2184, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1922.44877.clone
  %convert.5924 = bf16[] convert(%all-reduce.1093)
  %add.7987 = bf16[] add(%add.7986, %convert.5924)
  %all-reduce.1094 = f32[] all-reduce(%reduce.1069), channel_id=2185, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1923.44886.clone
  %convert.5926 = bf16[] convert(%all-reduce.1094)
  %add.7988 = bf16[] add(%add.7987, %convert.5926)
  %add.7989 = bf16[] add(%add.7988, %convert.2814)
  %add.7990 = bf16[] add(%add.7989, %convert.2816)
  %all-reduce.1095 = f32[] all-reduce(%reduce.1074), channel_id=2186, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1926.44913.clone
  %convert.5932 = bf16[] convert(%all-reduce.1095)
  %add.7991 = bf16[] add(%add.7990, %convert.5932)
  %all-reduce.1096 = f32[] all-reduce(%reduce.1075), channel_id=2187, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1927.44922.clone
  %convert.5935 = bf16[] convert(%all-reduce.1096)
  %add.7992 = bf16[] add(%add.7991, %convert.5935)
  %all-reduce.1097 = f32[] all-reduce(%reduce.1076), channel_id=2188, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1928.44931.clone
  %convert.5937 = bf16[] convert(%all-reduce.1097)
  %add.7993 = bf16[] add(%add.7992, %convert.5937)
  %all-reduce.1098 = f32[] all-reduce(%reduce.1077), channel_id=2189, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1929.44940.clone
  %convert.5939 = bf16[] convert(%all-reduce.1098)
  %add.7994 = bf16[] add(%add.7993, %convert.5939)
  %all-reduce.1099 = f32[] all-reduce(%reduce.1078), channel_id=2190, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1930.44949.clone
  %convert.5941 = bf16[] convert(%all-reduce.1099)
  %add.7995 = bf16[] add(%add.7994, %convert.5941)
  %all-reduce.1100 = f32[] all-reduce(%reduce.1079), channel_id=2191, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1931.44958.clone
  %convert.5943 = bf16[] convert(%all-reduce.1100)
  %add.7996 = bf16[] add(%add.7995, %convert.5943)
  %all-reduce.1101 = f32[] all-reduce(%reduce.1080), channel_id=2192, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1932.44967.clone
  %convert.5945 = bf16[] convert(%all-reduce.1101)
  %add.7997 = bf16[] add(%add.7996, %convert.5945)
  %all-reduce.1102 = f32[] all-reduce(%reduce.1081), channel_id=2193, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1933.44976.clone
  %convert.5947 = bf16[] convert(%all-reduce.1102)
  %add.7998 = bf16[] add(%add.7997, %convert.5947)
  %add.7999 = bf16[] add(%add.7998, %convert.2836)
  %add.8000 = bf16[] add(%add.7999, %convert.2838)
  %all-reduce.1103 = f32[] all-reduce(%reduce.1086), channel_id=2194, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1936.45003.clone
  %convert.5954 = bf16[] convert(%all-reduce.1103)
  %add.8001 = bf16[] add(%add.8000, %convert.5954)
  %all-reduce.1104 = f32[] all-reduce(%reduce.1087), channel_id=2195, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1937.45012.clone
  %convert.5956 = bf16[] convert(%all-reduce.1104)
  %add.8002 = bf16[] add(%add.8001, %convert.5956)
  %all-reduce.1105 = f32[] all-reduce(%reduce.1088), channel_id=2196, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1938.45021.clone
  %convert.5958 = bf16[] convert(%all-reduce.1105)
  %add.8003 = bf16[] add(%add.8002, %convert.5958)
  %all-reduce.1106 = f32[] all-reduce(%reduce.1089), channel_id=2197, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1939.45030.clone
  %convert.5960 = bf16[] convert(%all-reduce.1106)
  %add.8004 = bf16[] add(%add.8003, %convert.5960)
  %all-reduce.1107 = f32[] all-reduce(%reduce.1090), channel_id=2198, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1940.45039.clone
  %convert.5963 = bf16[] convert(%all-reduce.1107)
  %add.8005 = bf16[] add(%add.8004, %convert.5963)
  %all-reduce.1108 = f32[] all-reduce(%reduce.1091), channel_id=2199, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1941.45048.clone
  %convert.5965 = bf16[] convert(%all-reduce.1108)
  %add.8006 = bf16[] add(%add.8005, %convert.5965)
  %all-reduce.1109 = f32[] all-reduce(%reduce.1092), channel_id=2200, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1942.45057.clone
  %convert.5967 = bf16[] convert(%all-reduce.1109)
  %add.8008 = bf16[] add(%add.8006, %convert.5967)
  %all-reduce.1110 = f32[] all-reduce(%reduce.1093), channel_id=2201, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1943.45066.clone
  %convert.5969 = bf16[] convert(%all-reduce.1110)
  %add.8009 = bf16[] add(%add.8008, %convert.5969)
  %add.8010 = bf16[] add(%add.8009, %convert.2856)
  %add.8011 = bf16[] add(%add.8010, %convert.2858)
  %all-reduce.1111 = f32[] all-reduce(%reduce.1098), channel_id=2202, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1946.45093.clone
  %convert.5975 = bf16[] convert(%all-reduce.1111)
  %add.8012 = bf16[] add(%add.8011, %convert.5975)
  %all-reduce.1112 = f32[] all-reduce(%reduce.1099), channel_id=2203, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1947.45102.clone
  %convert.5977 = bf16[] convert(%all-reduce.1112)
  %add.8013 = bf16[] add(%add.8012, %convert.5977)
  %all-reduce.1113 = f32[] all-reduce(%reduce.1100), channel_id=2204, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1948.45111.clone
  %convert.5979 = bf16[] convert(%all-reduce.1113)
  %add.8014 = bf16[] add(%add.8013, %convert.5979)
  %all-reduce.1114 = f32[] all-reduce(%reduce.1101), channel_id=2205, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1949.45120.clone
  %convert.5981 = bf16[] convert(%all-reduce.1114)
  %add.8015 = bf16[] add(%add.8014, %convert.5981)
  %all-reduce.1115 = f32[] all-reduce(%reduce.1102), channel_id=2206, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1950.45129.clone
  %convert.5983 = bf16[] convert(%all-reduce.1115)
  %add.8016 = bf16[] add(%add.8015, %convert.5983)
  %all-reduce.1116 = f32[] all-reduce(%reduce.1103), channel_id=2207, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1951.45138.clone
  %convert.5986 = bf16[] convert(%all-reduce.1116)
  %add.8017 = bf16[] add(%add.8016, %convert.5986)
  %all-reduce.1117 = f32[] all-reduce(%reduce.1104), channel_id=2208, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1952.45147.clone
  %convert.5988 = bf16[] convert(%all-reduce.1117)
  %add.8018 = bf16[] add(%add.8017, %convert.5988)
  %all-reduce.1118 = f32[] all-reduce(%reduce.1105), channel_id=2209, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1953.45156.clone
  %convert.5990 = bf16[] convert(%all-reduce.1118)
  %add.8019 = bf16[] add(%add.8018, %convert.5990)
  %add.8020 = bf16[] add(%add.8019, %convert.2878)
  %add.8021 = bf16[] add(%add.8020, %convert.2880)
  %all-reduce.1119 = f32[] all-reduce(%reduce.1110), channel_id=2210, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1956.45183.clone
  %convert.5996 = bf16[] convert(%all-reduce.1119)
  %add.8022 = bf16[] add(%add.8021, %convert.5996)
  %all-reduce.1120 = f32[] all-reduce(%reduce.1111), channel_id=2211, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1957.45192.clone
  %convert.5998 = bf16[] convert(%all-reduce.1120)
  %add.8023 = bf16[] add(%add.8022, %convert.5998)
  %all-reduce.1121 = f32[] all-reduce(%reduce.1112), channel_id=2212, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1958.45201.clone
  %convert.6000 = bf16[] convert(%all-reduce.1121)
  %add.8024 = bf16[] add(%add.8023, %convert.6000)
  %all-reduce.1122 = f32[] all-reduce(%reduce.1113), channel_id=2213, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1959.45210.clone
  %convert.6002 = bf16[] convert(%all-reduce.1122)
  %add.8025 = bf16[] add(%add.8024, %convert.6002)
  %all-reduce.1123 = f32[] all-reduce(%reduce.1114), channel_id=2214, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1960.45219.clone
  %convert.6004 = bf16[] convert(%all-reduce.1123)
  %add.8026 = bf16[] add(%add.8025, %convert.6004)
  %all-reduce.1124 = f32[] all-reduce(%reduce.1115), channel_id=2215, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1961.45228.clone
  %convert.6006 = bf16[] convert(%all-reduce.1124)
  %add.8027 = bf16[] add(%add.8026, %convert.6006)
  %all-reduce.1125 = f32[] all-reduce(%reduce.1116), channel_id=2216, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1962.45237.clone
  %convert.6008 = bf16[] convert(%all-reduce.1125)
  %add.8028 = bf16[] add(%add.8027, %convert.6008)
  %all-reduce.1126 = f32[] all-reduce(%reduce.1117), channel_id=2217, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1963.45246.clone
  %convert.6010 = bf16[] convert(%all-reduce.1126)
  %add.8029 = bf16[] add(%add.8028, %convert.6010)
  %add.8030 = bf16[] add(%add.8029, %convert.2899)
  %add.8031 = bf16[] add(%add.8030, %convert.2901)
  %all-reduce.1127 = f32[] all-reduce(%reduce.1122), channel_id=2218, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1966.45273.clone
  %convert.6016 = bf16[] convert(%all-reduce.1127)
  %add.8032 = bf16[] add(%add.8031, %convert.6016)
  %all-reduce.1128 = f32[] all-reduce(%reduce.1123), channel_id=2219, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1967.45282.clone
  %convert.6018 = bf16[] convert(%all-reduce.1128)
  %add.8033 = bf16[] add(%add.8032, %convert.6018)
  %all-reduce.1129 = f32[] all-reduce(%reduce.1124), channel_id=2220, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1968.45291.clone
  %convert.6020 = bf16[] convert(%all-reduce.1129)
  %add.8034 = bf16[] add(%add.8033, %convert.6020)
  %all-reduce.1130 = f32[] all-reduce(%reduce.1125), channel_id=2221, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1969.45300.clone
  %convert.6022 = bf16[] convert(%all-reduce.1130)
  %add.8035 = bf16[] add(%add.8034, %convert.6022)
  %all-reduce.1131 = f32[] all-reduce(%reduce.1126), channel_id=2222, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1970.45309.clone
  %convert.6024 = bf16[] convert(%all-reduce.1131)
  %add.8036 = bf16[] add(%add.8035, %convert.6024)
  %all-reduce.1132 = f32[] all-reduce(%reduce.1127), channel_id=2223, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1971.45318.clone
  %convert.6026 = bf16[] convert(%all-reduce.1132)
  %add.8037 = bf16[] add(%add.8036, %convert.6026)
  %all-reduce.1133 = f32[] all-reduce(%reduce.1128), channel_id=2224, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1972.45327.clone
  %convert.6028 = bf16[] convert(%all-reduce.1133)
  %add.8039 = bf16[] add(%add.8037, %convert.6028)
  %all-reduce.1134 = f32[] all-reduce(%reduce.1129), channel_id=2225, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1973.45336.clone
  %convert.6031 = bf16[] convert(%all-reduce.1134)
  %add.8040 = bf16[] add(%add.8039, %convert.6031)
  %add.8041 = bf16[] add(%add.8040, %convert.2920)
  %add.8042 = bf16[] add(%add.8041, %convert.2923)
  %all-reduce.1135 = f32[] all-reduce(%reduce.1134), channel_id=2226, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1976.45363.clone
  %convert.6038 = bf16[] convert(%all-reduce.1135)
  %add.8043 = bf16[] add(%add.8042, %convert.6038)
  %all-reduce.1136 = f32[] all-reduce(%reduce.1135), channel_id=2227, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1977.45372.clone
  %convert.6040 = bf16[] convert(%all-reduce.1136)
  %add.8044 = bf16[] add(%add.8043, %convert.6040)
  %all-reduce.1137 = f32[] all-reduce(%reduce.1136), channel_id=2228, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1978.45381.clone
  %convert.6042 = bf16[] convert(%all-reduce.1137)
  %add.8045 = bf16[] add(%add.8044, %convert.6042)
  %all-reduce.1138 = f32[] all-reduce(%reduce.1137), channel_id=2229, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1979.45390.clone
  %convert.6044 = bf16[] convert(%all-reduce.1138)
  %add.8047 = bf16[] add(%add.8045, %convert.6044)
  %all-reduce.1139 = f32[] all-reduce(%reduce.1138), channel_id=2230, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1980.45399.clone
  %convert.6046 = bf16[] convert(%all-reduce.1139)
  %add.8048 = bf16[] add(%add.8047, %convert.6046)
  %all-reduce.1140 = f32[] all-reduce(%reduce.1139), channel_id=2231, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1981.45408.clone
  %convert.6048 = bf16[] convert(%all-reduce.1140)
  %add.8049 = bf16[] add(%add.8048, %convert.6048)
  %all-reduce.1141 = f32[] all-reduce(%reduce.1140), channel_id=2232, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1982.45417.clone
  %convert.6051 = bf16[] convert(%all-reduce.1141)
  %add.8050 = bf16[] add(%add.8049, %convert.6051)
  %all-reduce.1142 = f32[] all-reduce(%reduce.1141), channel_id=2233, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1983.45426.clone
  %convert.6053 = bf16[] convert(%all-reduce.1142)
  %add.8051 = bf16[] add(%add.8050, %convert.6053)
  %add.8052 = bf16[] add(%add.8051, %convert.2941)
  %add.8053 = bf16[] add(%add.8052, %convert.2943)
  %all-reduce.1143 = f32[] all-reduce(%reduce.1146), channel_id=2234, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1986.45453.clone
  %convert.6060 = bf16[] convert(%all-reduce.1143)
  %add.8054 = bf16[] add(%add.8053, %convert.6060)
  %all-reduce.1144 = f32[] all-reduce(%reduce.1147), channel_id=2235, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1987.45462.clone
  %convert.6062 = bf16[] convert(%all-reduce.1144)
  %add.8055 = bf16[] add(%add.8054, %convert.6062)
  %all-reduce.1145 = f32[] all-reduce(%reduce.1148), channel_id=2236, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1988.45471.clone
  %convert.6064 = bf16[] convert(%all-reduce.1145)
  %add.8056 = bf16[] add(%add.8055, %convert.6064)
  %all-reduce.1146 = f32[] all-reduce(%reduce.1149), channel_id=2237, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1989.45480.clone
  %convert.6066 = bf16[] convert(%all-reduce.1146)
  %add.8057 = bf16[] add(%add.8056, %convert.6066)
  %all-reduce.1147 = f32[] all-reduce(%reduce.1150), channel_id=2238, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1990.45489.clone
  %convert.6068 = bf16[] convert(%all-reduce.1147)
  %add.8058 = bf16[] add(%add.8057, %convert.6068)
  %all-reduce.1148 = f32[] all-reduce(%reduce.1151), channel_id=2239, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1991.45498.clone
  %convert.6070 = bf16[] convert(%all-reduce.1148)
  %add.8059 = bf16[] add(%add.8058, %convert.6070)
  %all-reduce.1149 = f32[] all-reduce(%reduce.1152), channel_id=2240, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1992.45507.clone
  %convert.6072 = bf16[] convert(%all-reduce.1149)
  %add.8060 = bf16[] add(%add.8059, %convert.6072)
  %all-reduce.1150 = f32[] all-reduce(%reduce.1153), channel_id=2241, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1993.45516.clone
  %convert.6074 = bf16[] convert(%all-reduce.1150)
  %add.8062 = bf16[] add(%add.8060, %convert.6074)
  %add.8063 = bf16[] add(%add.8062, %convert.2962)
  %add.8064 = bf16[] add(%add.8063, %convert.2964)
  %all-reduce.1151 = f32[] all-reduce(%reduce.1158), channel_id=2242, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1996.45543.clone
  %convert.6081 = bf16[] convert(%all-reduce.1151)
  %add.8065 = bf16[] add(%add.8064, %convert.6081)
  %all-reduce.1152 = f32[] all-reduce(%reduce.1159), channel_id=2243, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1997.45552.clone
  %convert.6083 = bf16[] convert(%all-reduce.1152)
  %add.8067 = bf16[] add(%add.8065, %convert.6083)
  %all-reduce.1153 = f32[] all-reduce(%reduce.1160), channel_id=2244, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1998.45561.clone
  %convert.6085 = bf16[] convert(%all-reduce.1153)
  %add.8068 = bf16[] add(%add.8067, %convert.6085)
  %all-reduce.1154 = f32[] all-reduce(%reduce.1161), channel_id=2245, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1999.45570.clone
  %convert.6087 = bf16[] convert(%all-reduce.1154)
  %add.8069 = bf16[] add(%add.8068, %convert.6087)
  %all-reduce.1155 = f32[] all-reduce(%reduce.1162), channel_id=2246, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2000.45579.clone
  %convert.6089 = bf16[] convert(%all-reduce.1155)
  %add.8070 = bf16[] add(%add.8069, %convert.6089)
  %all-reduce.1156 = f32[] all-reduce(%reduce.1163), channel_id=2247, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2001.45588.clone
  %convert.6091 = bf16[] convert(%all-reduce.1156)
  %add.8072 = bf16[] add(%add.8070, %convert.6091)
  %all-reduce.1157 = f32[] all-reduce(%reduce.1164), channel_id=2248, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2002.45597.clone
  %convert.6094 = bf16[] convert(%all-reduce.1157)
  %add.8073 = bf16[] add(%add.8072, %convert.6094)
  %all-reduce.1158 = f32[] all-reduce(%reduce.1165), channel_id=2249, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2003.45606.clone
  %convert.6096 = bf16[] convert(%all-reduce.1158)
  %add.8074 = bf16[] add(%add.8073, %convert.6096)
  %add.8075 = bf16[] add(%add.8074, %convert.2982)
  %add.8076 = bf16[] add(%add.8075, %convert.2984)
  %all-reduce.1159 = f32[] all-reduce(%reduce.1171), channel_id=2250, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2006.45633.clone
  %convert.6102 = bf16[] convert(%all-reduce.1159)
  %add.8077 = bf16[] add(%add.8076, %convert.6102)
  %all-reduce.1160 = f32[] all-reduce(%reduce.1172), channel_id=2251, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2007.45642.clone
  %convert.6104 = bf16[] convert(%all-reduce.1160)
  %add.8078 = bf16[] add(%add.8077, %convert.6104)
  %all-reduce.1161 = f32[] all-reduce(%reduce.1173), channel_id=2252, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2008.45651.clone
  %convert.6106 = bf16[] convert(%all-reduce.1161)
  %add.8079 = bf16[] add(%add.8078, %convert.6106)
  %all-reduce.1162 = f32[] all-reduce(%reduce.1174), channel_id=2253, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2009.45660.clone
  %convert.6109 = bf16[] convert(%all-reduce.1162)
  %add.8080 = bf16[] add(%add.8079, %convert.6109)
  %all-reduce.1163 = f32[] all-reduce(%reduce.1175), channel_id=2254, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2010.45669.clone
  %convert.6112 = bf16[] convert(%all-reduce.1163)
  %add.8081 = bf16[] add(%add.8080, %convert.6112)
  %all-reduce.1164 = f32[] all-reduce(%reduce.1176), channel_id=2255, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2011.45678.clone
  %convert.6114 = bf16[] convert(%all-reduce.1164)
  %add.8082 = bf16[] add(%add.8081, %convert.6114)
  %all-reduce.1165 = f32[] all-reduce(%reduce.1177), channel_id=2256, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2012.45687.clone
  %convert.6116 = bf16[] convert(%all-reduce.1165)
  %add.8083 = bf16[] add(%add.8082, %convert.6116)
  %all-reduce.1166 = f32[] all-reduce(%reduce.1178), channel_id=2257, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2013.45696.clone
  %convert.6118 = bf16[] convert(%all-reduce.1166)
  %add.8084 = bf16[] add(%add.8083, %convert.6118)
  %add.8085 = bf16[] add(%add.8084, %convert.3004)
  %add.8086 = bf16[] add(%add.8085, %convert.3006)
  %all-reduce.1167 = f32[] all-reduce(%reduce.1183), channel_id=2258, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2016.45723.clone
  %convert.6126 = bf16[] convert(%all-reduce.1167)
  %add.8087 = bf16[] add(%add.8086, %convert.6126)
  %all-reduce.1168 = f32[] all-reduce(%reduce.1184), channel_id=2259, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2017.45732.clone
  %convert.6128 = bf16[] convert(%all-reduce.1168)
  %add.8088 = bf16[] add(%add.8087, %convert.6128)
  %all-reduce.1169 = f32[] all-reduce(%reduce.1185), channel_id=2260, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2018.45741.clone
  %convert.6130 = bf16[] convert(%all-reduce.1169)
  %add.8089 = bf16[] add(%add.8088, %convert.6130)
  %all-reduce.1170 = f32[] all-reduce(%reduce.1186), channel_id=2261, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2019.45750.clone
  %convert.6132 = bf16[] convert(%all-reduce.1170)
  %add.8090 = bf16[] add(%add.8089, %convert.6132)
  %all-reduce.1171 = f32[] all-reduce(%reduce.1187), channel_id=2262, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2020.45759.clone
  %convert.6134 = bf16[] convert(%all-reduce.1171)
  %add.8091 = bf16[] add(%add.8090, %convert.6134)
  %all-reduce.1172 = f32[] all-reduce(%reduce.1188), channel_id=2263, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2021.45768.clone
  %convert.6136 = bf16[] convert(%all-reduce.1172)
  %add.8092 = bf16[] add(%add.8091, %convert.6136)
  %all-reduce.1173 = f32[] all-reduce(%reduce.1189), channel_id=2264, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2022.45777.clone
  %convert.6138 = bf16[] convert(%all-reduce.1173)
  %add.8093 = bf16[] add(%add.8092, %convert.6138)
  %all-reduce.1174 = f32[] all-reduce(%reduce.1190), channel_id=2265, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2023.45786.clone
  %convert.6140 = bf16[] convert(%all-reduce.1174)
  %add.8094 = bf16[] add(%add.8093, %convert.6140)
  %add.8095 = bf16[] add(%add.8094, %convert.3026)
  %add.8096 = bf16[] add(%add.8095, %convert.3028)
  %all-reduce.1175 = f32[] all-reduce(%reduce.1195), channel_id=2266, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2026.45813.clone
  %convert.6146 = bf16[] convert(%all-reduce.1175)
  %add.8097 = bf16[] add(%add.8096, %convert.6146)
  %all-reduce.1176 = f32[] all-reduce(%reduce.1196), channel_id=2267, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2027.45822.clone
  %convert.6149 = bf16[] convert(%all-reduce.1176)
  %add.8098 = bf16[] add(%add.8097, %convert.6149)
  %all-reduce.1177 = f32[] all-reduce(%reduce.1197), channel_id=2268, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2028.45831.clone
  %convert.6152 = bf16[] convert(%all-reduce.1177)
  %add.8099 = bf16[] add(%add.8098, %convert.6152)
  %all-reduce.1178 = f32[] all-reduce(%reduce.1198), channel_id=2269, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2029.45840.clone
  %convert.6154 = bf16[] convert(%all-reduce.1178)
  %add.8100 = bf16[] add(%add.8099, %convert.6154)
  %all-reduce.1179 = f32[] all-reduce(%reduce.1199), channel_id=2270, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2030.45849.clone
  %convert.6156 = bf16[] convert(%all-reduce.1179)
  %add.8101 = bf16[] add(%add.8100, %convert.6156)
  %all-reduce.1180 = f32[] all-reduce(%reduce.1200), channel_id=2271, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2031.45858.clone
  %convert.6158 = bf16[] convert(%all-reduce.1180)
  %add.8102 = bf16[] add(%add.8101, %convert.6158)
  %all-reduce.1181 = f32[] all-reduce(%reduce.1201), channel_id=2272, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2032.45867.clone
  %convert.6160 = bf16[] convert(%all-reduce.1181)
  %add.8103 = bf16[] add(%add.8102, %convert.6160)
  %all-reduce.1182 = f32[] all-reduce(%reduce.1202), channel_id=2273, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2033.45876.clone
  %convert.6164 = bf16[] convert(%all-reduce.1182)
  %add.8105 = bf16[] add(%add.8103, %convert.6164)
  %add.8106 = bf16[] add(%add.8105, %convert.3047)
  %add.8107 = bf16[] add(%add.8106, %convert.3049)
  %all-reduce.1183 = f32[] all-reduce(%reduce.1207), channel_id=2274, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2036.45903.clone
  %convert.6170 = bf16[] convert(%all-reduce.1183)
  %add.8108 = bf16[] add(%add.8107, %convert.6170)
  %all-reduce.1184 = f32[] all-reduce(%reduce.1208), channel_id=2275, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2037.45912.clone
  %convert.6172 = bf16[] convert(%all-reduce.1184)
  %add.8109 = bf16[] add(%add.8108, %convert.6172)
  %all-reduce.1185 = f32[] all-reduce(%reduce.1209), channel_id=2276, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2038.45921.clone
  %convert.6174 = bf16[] convert(%all-reduce.1185)
  %add.8110 = bf16[] add(%add.8109, %convert.6174)
  %all-reduce.1186 = f32[] all-reduce(%reduce.1210), channel_id=2277, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2039.45930.clone
  %convert.6176 = bf16[] convert(%all-reduce.1186)
  %add.8111 = bf16[] add(%add.8110, %convert.6176)
  %all-reduce.1187 = f32[] all-reduce(%reduce.1211), channel_id=2278, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2040.45939.clone
  %convert.6178 = bf16[] convert(%all-reduce.1187)
  %add.8112 = bf16[] add(%add.8111, %convert.6178)
  %all-reduce.1188 = f32[] all-reduce(%reduce.1212), channel_id=2279, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2041.45948.clone
  %convert.6180 = bf16[] convert(%all-reduce.1188)
  %add.8113 = bf16[] add(%add.8112, %convert.6180)
  %all-reduce.1189 = f32[] all-reduce(%reduce.1213), channel_id=2280, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2042.45957.clone
  %convert.6182 = bf16[] convert(%all-reduce.1189)
  %add.8114 = bf16[] add(%add.8113, %convert.6182)
  %all-reduce.1190 = f32[] all-reduce(%reduce.1214), channel_id=2281, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2043.45966.clone
  %convert.6184 = bf16[] convert(%all-reduce.1190)
  %add.8115 = bf16[] add(%add.8114, %convert.6184)
  %add.8116 = bf16[] add(%add.8115, %convert.3069)
  %add.8117 = bf16[] add(%add.8116, %convert.3072)
  %all-reduce.1191 = f32[] all-reduce(%reduce.1219), channel_id=2282, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2046.45993.clone
  %convert.6190 = bf16[] convert(%all-reduce.1191)
  %add.8119 = bf16[] add(%add.8117, %convert.6190)
  %all-reduce.1192 = f32[] all-reduce(%reduce.1220), channel_id=2283, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2047.46002.clone
  %convert.6192 = bf16[] convert(%all-reduce.1192)
  %add.8120 = bf16[] add(%add.8119, %convert.6192)
  %all-reduce.1193 = f32[] all-reduce(%reduce.1221), channel_id=2284, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2048.46011.clone
  %convert.6194 = bf16[] convert(%all-reduce.1193)
  %add.8122 = bf16[] add(%add.8120, %convert.6194)
  %all-reduce.1194 = f32[] all-reduce(%reduce.1222), channel_id=2285, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2049.46020.clone
  %convert.6196 = bf16[] convert(%all-reduce.1194)
  %add.8123 = bf16[] add(%add.8122, %convert.6196)
  %all-reduce.1195 = f32[] all-reduce(%reduce.1223), channel_id=2286, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2050.46029.clone
  %convert.6198 = bf16[] convert(%all-reduce.1195)
  %add.8125 = bf16[] add(%add.8123, %convert.6198)
  %all-reduce.1196 = f32[] all-reduce(%reduce.1224), channel_id=2287, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2051.46038.clone
  %convert.6200 = bf16[] convert(%all-reduce.1196)
  %add.8126 = bf16[] add(%add.8125, %convert.6200)
  %all-reduce.1197 = f32[] all-reduce(%reduce.1225), channel_id=2288, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2052.46047.clone
  %convert.6202 = bf16[] convert(%all-reduce.1197)
  %add.8127 = bf16[] add(%add.8126, %convert.6202)
  %all-reduce.1198 = f32[] all-reduce(%reduce.1226), channel_id=2289, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2053.46056.clone
  %convert.6204 = bf16[] convert(%all-reduce.1198)
  %add.8128 = bf16[] add(%add.8127, %convert.6204)
  %add.8129 = bf16[] add(%add.8128, %convert.3092)
  %add.8130 = bf16[] add(%add.8129, %convert.3094)
  %all-reduce.1199 = f32[] all-reduce(%reduce.1231), channel_id=2290, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2056.46083.clone
  %convert.6210 = bf16[] convert(%all-reduce.1199)
  %add.8131 = bf16[] add(%add.8130, %convert.6210)
  %all-reduce.1200 = f32[] all-reduce(%reduce.1232), channel_id=2291, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2057.46092.clone
  %convert.6213 = bf16[] convert(%all-reduce.1200)
  %add.8132 = bf16[] add(%add.8131, %convert.6213)
  %all-reduce.1201 = f32[] all-reduce(%reduce.1233), channel_id=2292, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2058.46101.clone
  %convert.6215 = bf16[] convert(%all-reduce.1201)
  %add.8133 = bf16[] add(%add.8132, %convert.6215)
  %all-reduce.1202 = f32[] all-reduce(%reduce.1234), channel_id=2293, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2059.46110.clone
  %convert.6217 = bf16[] convert(%all-reduce.1202)
  %add.8134 = bf16[] add(%add.8133, %convert.6217)
  %all-reduce.1203 = f32[] all-reduce(%reduce.1235), channel_id=2294, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2060.46119.clone
  %convert.6220 = bf16[] convert(%all-reduce.1203)
  %add.8135 = bf16[] add(%add.8134, %convert.6220)
  %all-reduce.1204 = f32[] all-reduce(%reduce.1236), channel_id=2295, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2061.46128.clone
  %convert.6222 = bf16[] convert(%all-reduce.1204)
  %add.8136 = bf16[] add(%add.8135, %convert.6222)
  %all-reduce.1205 = f32[] all-reduce(%reduce.1237), channel_id=2296, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2062.46137.clone
  %convert.6224 = bf16[] convert(%all-reduce.1205)
  %add.8137 = bf16[] add(%add.8136, %convert.6224)
  %all-reduce.1206 = f32[] all-reduce(%reduce.1238), channel_id=2297, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2063.46146.clone
  %convert.6226 = bf16[] convert(%all-reduce.1206)
  %add.8139 = bf16[] add(%add.8137, %convert.6226)
  %add.8140 = bf16[] add(%add.8139, %convert.3114)
  %add.8141 = bf16[] add(%add.8140, %convert.3116)
  %all-reduce.1207 = f32[] all-reduce(%reduce.1243), channel_id=2298, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2066.46173.clone
  %convert.6232 = bf16[] convert(%all-reduce.1207)
  %add.8142 = bf16[] add(%add.8141, %convert.6232)
  %all-reduce.1208 = f32[] all-reduce(%reduce.1244), channel_id=2299, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2067.46182.clone
  %convert.6234 = bf16[] convert(%all-reduce.1208)
  %add.8143 = bf16[] add(%add.8142, %convert.6234)
  %all-reduce.1209 = f32[] all-reduce(%reduce.1245), channel_id=2300, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2068.46191.clone
  %convert.6236 = bf16[] convert(%all-reduce.1209)
  %add.8144 = bf16[] add(%add.8143, %convert.6236)
  %all-reduce.1210 = f32[] all-reduce(%reduce.1246), channel_id=2301, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2069.46200.clone
  %convert.6239 = bf16[] convert(%all-reduce.1210)
  %add.8145 = bf16[] add(%add.8144, %convert.6239)
  %all-reduce.1211 = f32[] all-reduce(%reduce.1247), channel_id=2302, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2070.46209.clone
  %convert.6241 = bf16[] convert(%all-reduce.1211)
  %add.8146 = bf16[] add(%add.8145, %convert.6241)
  %all-reduce.1212 = f32[] all-reduce(%reduce.1248), channel_id=2303, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2071.46218.clone
  %convert.6243 = bf16[] convert(%all-reduce.1212)
  %add.8147 = bf16[] add(%add.8146, %convert.6243)
  %all-reduce.1213 = f32[] all-reduce(%reduce.1249), channel_id=2304, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2072.46227.clone
  %convert.6245 = bf16[] convert(%all-reduce.1213)
  %add.8149 = bf16[] add(%add.8147, %convert.6245)
  %all-reduce.1214 = f32[] all-reduce(%reduce.1250), channel_id=2305, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2073.46236.clone
  %convert.6247 = bf16[] convert(%all-reduce.1214)
  %add.8150 = bf16[] add(%add.8149, %convert.6247)
  %add.8151 = bf16[] add(%add.8150, %convert.3136)
  %add.8152 = bf16[] add(%add.8151, %convert.3138)
  %all-reduce.1215 = f32[] all-reduce(%reduce.1255), channel_id=2306, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2076.46263.clone
  %convert.6254 = bf16[] convert(%all-reduce.1215)
  %add.8153 = bf16[] add(%add.8152, %convert.6254)
  %all-reduce.1216 = f32[] all-reduce(%reduce.1256), channel_id=2307, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2077.46272.clone
  %convert.6256 = bf16[] convert(%all-reduce.1216)
  %add.8154 = bf16[] add(%add.8153, %convert.6256)
  %all-reduce.1217 = f32[] all-reduce(%reduce.1257), channel_id=2308, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2078.46281.clone
  %convert.6258 = bf16[] convert(%all-reduce.1217)
  %add.8155 = bf16[] add(%add.8154, %convert.6258)
  %all-reduce.1218 = f32[] all-reduce(%reduce.1258), channel_id=2309, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2079.46290.clone
  %convert.6260 = bf16[] convert(%all-reduce.1218)
  %add.8156 = bf16[] add(%add.8155, %convert.6260)
  %all-reduce.1219 = f32[] all-reduce(%reduce.1259), channel_id=2310, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2080.46299.clone
  %convert.6262 = bf16[] convert(%all-reduce.1219)
  %add.8157 = bf16[] add(%add.8156, %convert.6262)
  %all-reduce.1220 = f32[] all-reduce(%reduce.1260), channel_id=2311, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2081.46308.clone
  %convert.6264 = bf16[] convert(%all-reduce.1220)
  %add.8158 = bf16[] add(%add.8157, %convert.6264)
  %all-reduce.1221 = f32[] all-reduce(%reduce.1261), channel_id=2312, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2082.46317.clone
  %convert.6267 = bf16[] convert(%all-reduce.1221)
  %add.8159 = bf16[] add(%add.8158, %convert.6267)
  %all-reduce.1222 = f32[] all-reduce(%reduce.1262), channel_id=2313, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2083.46326.clone
  %convert.6269 = bf16[] convert(%all-reduce.1222)
  %add.8160 = bf16[] add(%add.8159, %convert.6269)
  %add.8161 = bf16[] add(%add.8160, %convert.3156)
  %add.8163 = bf16[] add(%add.8161, %convert.3158)
  %all-reduce.1223 = f32[] all-reduce(%reduce.1267), channel_id=2314, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2086.46353.clone
  %convert.6275 = bf16[] convert(%all-reduce.1223)
  %add.8164 = bf16[] add(%add.8163, %convert.6275)
  %all-reduce.1224 = f32[] all-reduce(%reduce.1268), channel_id=2315, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2087.46362.clone
  %convert.6277 = bf16[] convert(%all-reduce.1224)
  %add.8165 = bf16[] add(%add.8164, %convert.6277)
  %all-reduce.1225 = f32[] all-reduce(%reduce.1269), channel_id=2316, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2088.46371.clone
  %convert.6279 = bf16[] convert(%all-reduce.1225)
  %add.8166 = bf16[] add(%add.8165, %convert.6279)
  %all-reduce.1226 = f32[] all-reduce(%reduce.1270), channel_id=2317, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2089.46380.clone
  %convert.6281 = bf16[] convert(%all-reduce.1226)
  %add.8167 = bf16[] add(%add.8166, %convert.6281)
  %all-reduce.1227 = f32[] all-reduce(%reduce.1271), channel_id=2318, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2090.46389.clone
  %convert.6283 = bf16[] convert(%all-reduce.1227)
  %add.8168 = bf16[] add(%add.8167, %convert.6283)
  %all-reduce.1228 = f32[] all-reduce(%reduce.1272), channel_id=2319, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2091.46398.clone
  %convert.6285 = bf16[] convert(%all-reduce.1228)
  %add.8169 = bf16[] add(%add.8168, %convert.6285)
  %all-reduce.1229 = f32[] all-reduce(%reduce.1273), channel_id=2320, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2092.46407.clone
  %convert.6287 = bf16[] convert(%all-reduce.1229)
  %add.8170 = bf16[] add(%add.8169, %convert.6287)
  %all-reduce.1230 = f32[] all-reduce(%reduce.1274), channel_id=2321, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2093.46416.clone
  %convert.6290 = bf16[] convert(%all-reduce.1230)
  %add.8172 = bf16[] add(%add.8170, %convert.6290)
  %add.8173 = bf16[] add(%add.8172, %convert.3177)
  %add.8174 = bf16[] add(%add.8173, %convert.3180)
  %all-reduce.1231 = f32[] all-reduce(%reduce.1279), channel_id=2322, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2096.46443.clone
  %convert.6296 = bf16[] convert(%all-reduce.1231)
  %add.8175 = bf16[] add(%add.8174, %convert.6296)
  %all-reduce.1232 = f32[] all-reduce(%reduce.1280), channel_id=2323, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2097.46452.clone
  %convert.6298 = bf16[] convert(%all-reduce.1232)
  %add.8176 = bf16[] add(%add.8175, %convert.6298)
  %all-reduce.1233 = f32[] all-reduce(%reduce.1281), channel_id=2324, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2098.46461.clone
  %convert.6300 = bf16[] convert(%all-reduce.1233)
  %add.8177 = bf16[] add(%add.8176, %convert.6300)
  %all-reduce.1234 = f32[] all-reduce(%reduce.1282), channel_id=2325, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2099.46470.clone
  %convert.6302 = bf16[] convert(%all-reduce.1234)
  %add.8178 = bf16[] add(%add.8177, %convert.6302)
  %all-reduce.1235 = f32[] all-reduce(%reduce.1283), channel_id=2326, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2100.46479.clone
  %convert.6304 = bf16[] convert(%all-reduce.1235)
  %add.8179 = bf16[] add(%add.8178, %convert.6304)
  %all-reduce.1236 = f32[] all-reduce(%reduce.1284), channel_id=2327, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2101.46488.clone
  %convert.6306 = bf16[] convert(%all-reduce.1236)
  %add.8180 = bf16[] add(%add.8179, %convert.6306)
  %all-reduce.1237 = f32[] all-reduce(%reduce.1285), channel_id=2328, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2102.46497.clone
  %convert.6308 = bf16[] convert(%all-reduce.1237)
  %add.8181 = bf16[] add(%add.8180, %convert.6308)
  %all-reduce.1238 = f32[] all-reduce(%reduce.1286), channel_id=2329, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2103.46506.clone
  %convert.6310 = bf16[] convert(%all-reduce.1238)
  %add.8182 = bf16[] add(%add.8181, %convert.6310)
  %add.8183 = bf16[] add(%add.8182, %convert.3199)
  %add.8184 = bf16[] add(%add.8183, %convert.3201)
  %all-reduce.1239 = f32[] all-reduce(%reduce.1291), channel_id=2330, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2106.46533.clone
  %convert.6316 = bf16[] convert(%all-reduce.1239)
  %add.8185 = bf16[] add(%add.8184, %convert.6316)
  %all-reduce.1240 = f32[] all-reduce(%reduce.1292), channel_id=2331, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2107.46542.clone
  %convert.6318 = bf16[] convert(%all-reduce.1240)
  %add.8186 = bf16[] add(%add.8185, %convert.6318)
  %all-reduce.1241 = f32[] all-reduce(%reduce.1293), channel_id=2332, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2108.46551.clone
  %convert.6320 = bf16[] convert(%all-reduce.1241)
  %add.8187 = bf16[] add(%add.8186, %convert.6320)
  %all-reduce.1242 = f32[] all-reduce(%reduce.1294), channel_id=2333, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2109.46560.clone
  %convert.6322 = bf16[] convert(%all-reduce.1242)
  %add.8188 = bf16[] add(%add.8187, %convert.6322)
  %all-reduce.1243 = f32[] all-reduce(%reduce.1295), channel_id=2334, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2110.46569.clone
  %convert.6324 = bf16[] convert(%all-reduce.1243)
  %add.8189 = bf16[] add(%add.8188, %convert.6324)
  %all-reduce.1244 = f32[] all-reduce(%reduce.1296), channel_id=2335, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2111.46578.clone
  %convert.6326 = bf16[] convert(%all-reduce.1244)
  %add.8190 = bf16[] add(%add.8189, %convert.6326)
  %all-reduce.1245 = f32[] all-reduce(%reduce.1297), channel_id=2336, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2112.46587.clone
  %convert.6328 = bf16[] convert(%all-reduce.1245)
  %add.8191 = bf16[] add(%add.8190, %convert.6328)
  %all-reduce.1246 = f32[] all-reduce(%reduce.1298), channel_id=2337, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2113.46596.clone
  %convert.6330 = bf16[] convert(%all-reduce.1246)
  %add.8192 = bf16[] add(%add.8191, %convert.6330)
  %add.8193 = bf16[] add(%add.8192, %convert.3220)
  %add.8194 = bf16[] add(%add.8193, %convert.3222)
  %all-reduce.1247 = f32[] all-reduce(%reduce.1303), channel_id=2338, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2116.46623.clone
  %convert.6337 = bf16[] convert(%all-reduce.1247)
  %add.8195 = bf16[] add(%add.8194, %convert.6337)
  %all-reduce.1248 = f32[] all-reduce(%reduce.1304), channel_id=2339, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2117.46632.clone
  %convert.6339 = bf16[] convert(%all-reduce.1248)
  %add.8196 = bf16[] add(%add.8195, %convert.6339)
  %all-reduce.1249 = f32[] all-reduce(%reduce.1305), channel_id=2340, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2118.46641.clone
  %convert.6342 = bf16[] convert(%all-reduce.1249)
  %add.8197 = bf16[] add(%add.8196, %convert.6342)
  %all-reduce.1250 = f32[] all-reduce(%reduce.1307), channel_id=2341, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2119.46650.clone
  %convert.6344 = bf16[] convert(%all-reduce.1250)
  %add.8198 = bf16[] add(%add.8197, %convert.6344)
  %all-reduce.1251 = f32[] all-reduce(%reduce.1308), channel_id=2342, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2120.46659.clone
  %convert.6346 = bf16[] convert(%all-reduce.1251)
  %add.8199 = bf16[] add(%add.8198, %convert.6346)
  %all-reduce.1252 = f32[] all-reduce(%reduce.1309), channel_id=2343, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2121.46668.clone
  %convert.6348 = bf16[] convert(%all-reduce.1252)
  %add.8200 = bf16[] add(%add.8199, %convert.6348)
  %all-reduce.1253 = f32[] all-reduce(%reduce.1310), channel_id=2344, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2122.46677.clone
  %convert.6350 = bf16[] convert(%all-reduce.1253)
  %add.8201 = bf16[] add(%add.8200, %convert.6350)
  %all-reduce.1254 = f32[] all-reduce(%reduce.1311), channel_id=2345, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2123.46686.clone
  %convert.6352 = bf16[] convert(%all-reduce.1254)
  %add.8202 = bf16[] add(%add.8201, %convert.6352)
  %add.8204 = bf16[] add(%add.8202, %convert.3241)
  %add.8205 = bf16[] add(%add.8204, %convert.3243)
  %all-reduce.1255 = f32[] all-reduce(%reduce.1317), channel_id=2346, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2126.46713.clone
  %convert.6359 = bf16[] convert(%all-reduce.1255)
  %add.8206 = bf16[] add(%add.8205, %convert.6359)
  %all-reduce.1256 = f32[] all-reduce(%reduce.1318), channel_id=2347, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2127.46722.clone
  %convert.6361 = bf16[] convert(%all-reduce.1256)
  %add.8207 = bf16[] add(%add.8206, %convert.6361)
  %all-reduce.1257 = f32[] all-reduce(%reduce.1320), channel_id=2348, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2128.46731.clone
  %convert.6364 = bf16[] convert(%all-reduce.1257)
  %add.8208 = bf16[] add(%add.8207, %convert.6364)
  %all-reduce.1258 = f32[] all-reduce(%reduce.1321), channel_id=2349, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2129.46740.clone
  %convert.6366 = bf16[] convert(%all-reduce.1258)
  %add.8209 = bf16[] add(%add.8208, %convert.6366)
  %all-reduce.1259 = f32[] all-reduce(%reduce.1322), channel_id=2350, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2130.46749.clone
  %convert.6368 = bf16[] convert(%all-reduce.1259)
  %add.8211 = bf16[] add(%add.8209, %convert.6368)
  %all-reduce.1260 = f32[] all-reduce(%reduce.1324), channel_id=2351, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2131.46758.clone
  %convert.6370 = bf16[] convert(%all-reduce.1260)
  %add.8212 = bf16[] add(%add.8211, %convert.6370)
  %sqrt.326 = bf16[] sqrt(%add.8212)
  ROOT %tuple.383 = (s32[], bf16[4096]{0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=5*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=10*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=15*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=20*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=25*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=30*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=35*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=40*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=45*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=50*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=55*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=60*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=65*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=70*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=75*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=80*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=85*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=90*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=95*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=100*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=105*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=110*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=115*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=120*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=125*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=130*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=135*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=140*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=145*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=150*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=155*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=160*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=165*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=170*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=175*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=180*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=185*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=190*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=195*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=200*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=205*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=210*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=215*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=220*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=225*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=230*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=235*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=240*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=245*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=250*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=255*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=260*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=265*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=270*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=275*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=280*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=285*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=290*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=295*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=300*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=305*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=310*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=315*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=320*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, bf16[32000,512]{1,0}, s32[], /*index=325*/bf16[4096]{0}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=330*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=335*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=340*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=345*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=350*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=355*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=360*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=365*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=370*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=375*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=380*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=385*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=390*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=395*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=400*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=405*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=410*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=415*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=420*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=425*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=430*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=435*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=440*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=445*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=450*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=455*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=460*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=465*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=470*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=475*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=480*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=485*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=490*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=495*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=500*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=505*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=510*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=515*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=520*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=525*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=530*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=535*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=540*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=545*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=550*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=555*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=560*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=565*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=570*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=575*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=580*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=585*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=590*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=595*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=600*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=605*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=610*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=615*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=620*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=625*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=630*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=635*/bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=640*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, /*index=645*/bf16[512,8,128]{0,2,1}, bf16[512,32000]{0,1}, bf16[32000,512]{0,1}, bf16[4096]{0}, bf16[512,8]{0,1}, /*index=650*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=655*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=660*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=665*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=670*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=675*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=680*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=685*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=690*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=695*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=700*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=705*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=710*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=715*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=720*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=725*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=730*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=735*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=740*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=745*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=750*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=755*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=760*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=765*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=770*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=775*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=780*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=785*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=790*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=795*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=800*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=805*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=810*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=815*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=820*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=825*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=830*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=835*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=840*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=845*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=850*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=855*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=860*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=865*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=870*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=875*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=880*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=885*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=890*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=895*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=900*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=905*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=910*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=915*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=920*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=925*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=930*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=935*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=940*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=945*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=950*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=955*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,8]{0,1}, /*index=960*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=965*/bf16[512,8,128]{0,2,1}, bf16[32,128,512]{1,0,2}, bf16[512,32,128]{0,2,1}, bf16[512,8,128]{0,2,1}, bf16[512,32000]{0,1}, /*index=970*/bf16[32000,512]{0,1}, s32[], bf16[], f32[], f32[], /*index=975*/bf16[], bf16[], s32[]) tuple(%add.2492, %add.5471, %add.5477, %add.5483, %add.5488, /*index=5*/%add.5493, %add.5498, %add.5503, %add.5508, %add.5513, /*index=10*/%add.5518, %add.5523, %add.5528, %add.5533, %add.5539, /*index=15*/%add.5544, %add.5549, %add.5554, %add.5559, %add.5564, /*index=20*/%add.5569, %add.5574, %add.5580, %add.5585, %add.5590, /*index=25*/%add.5595, %add.5600, %add.5605, %add.5611, %add.5617, /*index=30*/%add.5622, %add.5627, %add.5633, %add.5640, %add.5645, /*index=35*/%add.5650, %add.5655, %add.5660, %add.5665, %add.5670, /*index=40*/%add.5676, %add.5681, %add.5687, %add.5694, %add.5699, /*index=45*/%add.5704, %add.5710, %add.5715, %add.5721, %add.5726, /*index=50*/%add.5732, %add.5737, %add.5743, %add.5748, %add.5753, /*index=55*/%add.5758, %add.5763, %add.5768, %add.5774, %add.5780, /*index=60*/%add.5786, %add.5791, %add.5796, %add.5801, %add.5806, /*index=65*/%add.5811, %add.5816, %add.5821, %add.5826, %add.5831, /*index=70*/%add.5836, %add.5842, %add.5847, %add.5852, %add.5857, /*index=75*/%add.5862, %add.5867, %add.5872, %add.5877, %add.5883, /*index=80*/%add.5888, %add.5893, %add.5898, %add.5903, %add.5908, /*index=85*/%add.5914, %add.5920, %add.5925, %add.5930, %add.5936, /*index=90*/%add.5942, %add.5948, %add.5953, %add.5958, %add.5963, /*index=95*/%add.5968, %add.5973, %add.5979, %add.5984, %add.5989, /*index=100*/%add.5997, %add.6002, %add.6007, %add.6013, %add.6018, /*index=105*/%add.6024, %add.6029, %add.6035, %add.6040, %add.6046, /*index=110*/%add.6051, %add.6056, %add.6061, %add.6066, %add.6071, /*index=115*/%add.6077, %add.6083, %add.6089, %add.6094, %add.6099, /*index=120*/%add.6104, %add.6109, %add.6114, %add.6119, %add.6124, /*index=125*/%add.6129, %add.6134, %add.6139, %add.6145, %add.6150, /*index=130*/%add.6155, %add.6160, %add.6165, %add.6170, %add.6175, /*index=135*/%add.6180, %add.6186, %add.6191, %add.6196, %add.6201, /*index=140*/%add.6206, %add.6211, %add.6217, %add.6223, %add.6228, /*index=145*/%add.6233, %add.6239, %add.6245, %add.6251, %add.6256, /*index=150*/%add.6261, %add.6266, %add.6271, %add.6276, %add.6282, /*index=155*/%add.6287, %add.6292, %add.6299, %add.6305, %add.6310, /*index=160*/%add.6316, %add.6321, %add.6327, %add.6332, %add.6337, /*index=165*/%add.6343, %add.6349, %add.6354, %add.6359, %add.6364, /*index=170*/%add.6369, %add.6374, %add.6380, %add.6385, %add.6392, /*index=175*/%add.6397, %add.6402, %add.6407, %add.6412, %add.6417, /*index=180*/%add.6422, %add.6427, %add.6432, %add.6437, %add.6442, /*index=185*/%add.6448, %add.6453, %add.6458, %add.6463, %add.6468, /*index=190*/%add.6473, %add.6478, %add.6483, %add.6489, %add.6494, /*index=195*/%add.6499, %add.6504, %add.6509, %add.6514, %add.6520, /*index=200*/%add.6525, %add.6531, %add.6536, %add.6542, %add.6548, /*index=205*/%add.6554, %add.6559, %add.6564, %add.6569, %add.6574, /*index=210*/%add.6579, %add.6585, %add.6590, %add.6595, %add.6602, /*index=215*/%add.6608, %add.6613, %add.6619, %add.6624, %add.6630, /*index=220*/%add.6635, %add.6640, %add.6646, %add.6652, %add.6657, /*index=225*/%add.6662, %add.6667, %add.6672, %add.6677, %add.6682, /*index=230*/%add.6688, %add.6694, %add.6700, %add.6705, %add.6710, /*index=235*/%add.6715, %add.6720, %add.6725, %add.6730, %add.6735, /*index=240*/%add.6740, %add.6745, %add.6750, %add.6756, %add.6761, /*index=245*/%add.6766, %add.6771, %add.6776, %add.6781, %add.6786, /*index=250*/%add.6792, %add.6797, %add.6802, %add.6807, %add.6812, /*index=255*/%add.6817, %add.6823, %add.6828, %add.6834, %add.6839, /*index=260*/%add.6844, %add.6851, %add.6857, %add.6862, %add.6867, /*index=265*/%add.6872, %add.6877, %add.6882, %add.6887, %add.6893, /*index=270*/%add.6898, %add.6904, %add.6911, %add.6916, %add.6921, /*index=275*/%add.6927, %add.6933, %add.6938, %add.6943, %add.6949, /*index=280*/%add.6954, %add.6960, %add.6965, %add.6970, %add.6975, /*index=285*/%add.6980, %add.6985, %add.6991, %add.6997, %add.7003, /*index=290*/%add.7008, %add.7013, %add.7018, %add.7023, %add.7028, /*index=295*/%add.7033, %add.7038, %add.7043, %add.7048, %add.7053, /*index=300*/%add.7059, %add.7064, %add.7069, %add.7074, %add.7079, /*index=305*/%add.7084, %add.7089, %add.7094, %add.7100, %add.7105, /*index=310*/%add.7110, %add.7115, %add.7120, %add.7125, %add.7131, /*index=315*/%add.7137, %add.7142, %add.7147, %add.7153, %add.7160, /*index=320*/%add.7165, %add.7170, %add.7175, %add.7180, %select.2585, /*index=325*/%add.5465, %add.5472, %add.5478, %add.5484, %add.5489, /*index=330*/%add.5494, %add.5499, %add.5504, %add.5509, %add.5514, /*index=335*/%add.5519, %add.5524, %add.5529, %add.5534, %add.5540, /*index=340*/%add.5545, %add.5550, %add.5555, %add.5560, %add.5565, /*index=345*/%add.5570, %add.5576, %add.5581, %add.5586, %add.5591, /*index=350*/%add.5596, %add.5601, %add.5607, %add.5612, %add.5618, /*index=355*/%add.5623, %add.5628, %add.5635, %add.5641, %add.5646, /*index=360*/%add.5651, %add.5656, %add.5661, %add.5666, %add.5671, /*index=365*/%add.5677, %add.5682, %add.5688, %add.5695, %add.5700, /*index=370*/%add.5705, %add.5711, %add.5717, %add.5722, %add.5727, /*index=375*/%add.5733, %add.5738, %add.5744, %add.5749, %add.5754, /*index=380*/%add.5759, %add.5764, %add.5769, %add.5775, %add.5781, /*index=385*/%add.5787, %add.5792, %add.5797, %add.5802, %add.5807, /*index=390*/%add.5812, %add.5817, %add.5822, %add.5827, %add.5832, /*index=395*/%add.5837, %add.5843, %add.5848, %add.5853, %add.5858, /*index=400*/%add.5863, %add.5868, %add.5873, %add.5878, %add.5884, /*index=405*/%add.5889, %add.5894, %add.5899, %add.5904, %add.5909, /*index=410*/%add.5915, %add.5921, %add.5926, %add.5931, %add.5937, /*index=415*/%add.5944, %add.5949, %add.5954, %add.5959, %add.5964, /*index=420*/%add.5969, %add.5974, %add.5980, %add.5985, %add.5991, /*index=425*/%add.5998, %add.6003, %add.6008, %add.6014, %add.6019, /*index=430*/%add.6025, %add.6030, %add.6036, %add.6041, %add.6047, /*index=435*/%add.6052, %add.6057, %add.6062, %add.6067, %add.6072, /*index=440*/%add.6078, %add.6084, %add.6090, %add.6095, %add.6100, /*index=445*/%add.6105, %add.6110, %add.6115, %add.6120, %add.6125, /*index=450*/%add.6130, %add.6135, %add.6140, %add.6146, %add.6151, /*index=455*/%add.6156, %add.6161, %add.6166, %add.6171, %add.6176, /*index=460*/%add.6181, %add.6187, %add.6192, %add.6197, %add.6202, /*index=465*/%add.6207, %add.6212, %add.6218, %add.6224, %add.6229, /*index=470*/%add.6234, %add.6240, %add.6246, %add.6252, %add.6257, /*index=475*/%add.6262, %add.6267, %add.6272, %add.6277, %add.6283, /*index=480*/%add.6288, %add.6293, %add.6301, %add.6306, %add.6311, /*index=485*/%add.6317, %add.6322, %add.6328, %add.6333, %add.6339, /*index=490*/%add.6344, %add.6350, %add.6355, %add.6360, %add.6365, /*index=495*/%add.6370, %add.6375, %add.6381, %add.6387, %add.6393, /*index=500*/%add.6398, %add.6403, %add.6408, %add.6413, %add.6418, /*index=505*/%add.6423, %add.6428, %add.6433, %add.6438, %add.6443, /*index=510*/%add.6449, %add.6454, %add.6459, %add.6464, %add.6469, /*index=515*/%add.6474, %add.6479, %add.6484, %add.6490, %add.6495, /*index=520*/%add.6500, %add.6505, %add.6510, %add.6515, %add.6521, /*index=525*/%add.6527, %add.6532, %add.6537, %add.6543, %add.6549, /*index=530*/%add.6555, %add.6560, %add.6565, %add.6570, %add.6575, /*index=535*/%add.6580, %add.6586, %add.6591, %add.6596, %add.6603, /*index=540*/%add.6609, %add.6614, %add.6620, %add.6625, %add.6631, /*index=545*/%add.6636, %add.6641, %add.6647, %add.6653, %add.6658, /*index=550*/%add.6663, %add.6668, %add.6673, %add.6678, %add.6684, /*index=555*/%add.6689, %add.6696, %add.6701, %add.6706, %add.6711, /*index=560*/%add.6716, %add.6721, %add.6726, %add.6731, %add.6736, /*index=565*/%add.6741, %add.6746, %add.6752, %add.6757, %add.6762, /*index=570*/%add.6767, %add.6772, %add.6777, %add.6782, %add.6787, /*index=575*/%add.6793, %add.6798, %add.6803, %add.6808, %add.6813, /*index=580*/%add.6818, %add.6824, %add.6829, %add.6835, %add.6840, /*index=585*/%add.6846, %add.6852, %add.6858, %add.6863, %add.6868, /*index=590*/%add.6873, %add.6878, %add.6883, %add.6889, %add.6894, /*index=595*/%add.6899, %add.6906, %add.6912, %add.6917, %add.6923, /*index=600*/%add.6928, %add.6934, %add.6939, %add.6944, %add.6950, /*index=605*/%add.6956, %add.6961, %add.6966, %add.6971, %add.6976, /*index=610*/%add.6981, %add.6986, %add.6992, %add.6998, %add.7004, /*index=615*/%add.7009, %add.7014, %add.7019, %add.7024, %add.7029, /*index=620*/%add.7034, %add.7039, %add.7044, %add.7049, %add.7054, /*index=625*/%add.7060, %add.7065, %add.7070, %add.7075, %add.7080, /*index=630*/%add.7085, %add.7090, %add.7096, %add.7101, %add.7106, /*index=635*/%add.7111, %add.7116, %add.7121, %add.7127, %add.7132, /*index=640*/%add.7138, %add.7143, %add.7148, %add.7155, %add.7161, /*index=645*/%add.7166, %add.7171, %add.7176, %add.5468, %add.5473, /*index=650*/%add.5480, %add.5485, %add.5490, %add.5495, %add.5500, /*index=655*/%add.5505, %add.5510, %add.5515, %add.5520, %add.5525, /*index=660*/%add.5530, %add.5536, %add.5541, %add.5546, %add.5551, /*index=665*/%add.5556, %add.5561, %add.5566, %add.5571, %add.5577, /*index=670*/%add.5582, %add.5587, %add.5592, %add.5597, %add.5602, /*index=675*/%add.5608, %add.5613, %add.5619, %add.5624, %add.5630, /*index=680*/%add.5636, %add.5642, %add.5647, %add.5652, %add.5657, /*index=685*/%add.5662, %add.5667, %add.5673, %add.5678, %add.5683, /*index=690*/%add.5690, %add.5696, %add.5701, %add.5707, %add.5712, /*index=695*/%add.5718, %add.5723, %add.5728, %add.5734, %add.5740, /*index=700*/%add.5745, %add.5750, %add.5755, %add.5760, %add.5765, /*index=705*/%add.5770, %add.5776, %add.5782, %add.5788, %add.5793, /*index=710*/%add.5798, %add.5803, %add.5808, %add.5813, %add.5818, /*index=715*/%add.5823, %add.5828, %add.5833, %add.5838, %add.5844, /*index=720*/%add.5849, %add.5854, %add.5859, %add.5864, %add.5869, /*index=725*/%add.5874, %add.5880, %add.5885, %add.5890, %add.5895, /*index=730*/%add.5900, %add.5905, %add.5911, %add.5916, %add.5922, /*index=735*/%add.5927, %add.5932, %add.5939, %add.5945, %add.5950, /*index=740*/%add.5955, %add.5960, %add.5965, %add.5970, %add.5975, /*index=745*/%add.5981, %add.5986, %add.5992, %add.5999, %add.6004, /*index=750*/%add.6009, %add.6015, %add.6021, %add.6026, %add.6031, /*index=755*/%add.6037, %add.6042, %add.6048, %add.6053, %add.6058, /*index=760*/%add.6063, %add.6068, %add.6073, %add.6079, %add.6085, /*index=765*/%add.6091, %add.6096, %add.6101, %add.6106, %add.6111, /*index=770*/%add.6116, %add.6121, %add.6126, %add.6131, %add.6136, /*index=775*/%add.6141, %add.6147, %add.6152, %add.6157, %add.6162, /*index=780*/%add.6167, %add.6172, %add.6177, %add.6182, %add.6188, /*index=785*/%add.6193, %add.6198, %add.6203, %add.6208, %add.6213, /*index=790*/%add.6219, %add.6225, %add.6230, %add.6235, %add.6241, /*index=795*/%add.6248, %add.6253, %add.6258, %add.6263, %add.6268, /*index=800*/%add.6273, %add.6278, %add.6284, %add.6289, %add.6295, /*index=805*/%add.6302, %add.6307, %add.6312, %add.6318, %add.6323, /*index=810*/%add.6329, %add.6334, %add.6340, %add.6345, %add.6351, /*index=815*/%add.6356, %add.6361, %add.6366, %add.6371, %add.6376, /*index=820*/%add.6382, %add.6388, %add.6394, %add.6399, %add.6404, /*index=825*/%add.6409, %add.6414, %add.6419, %add.6424, %add.6429, /*index=830*/%add.6434, %add.6439, %add.6444, %add.6450, %add.6455, /*index=835*/%add.6460, %add.6465, %add.6470, %add.6475, %add.6480, /*index=840*/%add.6485, %add.6491, %add.6496, %add.6501, %add.6506, /*index=845*/%add.6511, %add.6516, %add.6522, %add.6528, %add.6533, /*index=850*/%add.6538, %add.6544, %add.6550, %add.6556, %add.6561, /*index=855*/%add.6566, %add.6571, %add.6576, %add.6581, %add.6587, /*index=860*/%add.6592, %add.6597, %add.6605, %add.6610, %add.6615, /*index=865*/%add.6621, %add.6626, %add.6632, %add.6637, %add.6643, /*index=870*/%add.6648, %add.6654, %add.6659, %add.6664, %add.6669, /*index=875*/%add.6674, %add.6679, %add.6685, %add.6691, %add.6697, /*index=880*/%add.6702, %add.6707, %add.6712, %add.6717, %add.6722, /*index=885*/%add.6727, %add.6732, %add.6737, %add.6742, %add.6747, /*index=890*/%add.6753, %add.6758, %add.6763, %add.6768, %add.6773, /*index=895*/%add.6778, %add.6783, %add.6788, %add.6794, %add.6799, /*index=900*/%add.6804, %add.6809, %add.6814, %add.6819, %add.6825, /*index=905*/%add.6831, %add.6836, %add.6841, %add.6847, %add.6853, /*index=910*/%add.6859, %add.6864, %add.6869, %add.6874, %add.6879, /*index=915*/%add.6884, %add.6890, %add.6895, %add.6900, %add.6907, /*index=920*/%add.6913, %add.6918, %add.6924, %add.6929, %add.6935, /*index=925*/%add.6940, %add.6945, %add.6951, %add.6957, %add.6962, /*index=930*/%add.6967, %add.6972, %add.6977, %add.6982, %add.6988, /*index=935*/%add.6993, %add.7000, %add.7005, %add.7010, %add.7015, /*index=940*/%add.7020, %add.7025, %add.7030, %add.7035, %add.7040, /*index=945*/%add.7045, %add.7050, %add.7056, %add.7061, %add.7066, /*index=950*/%add.7071, %add.7076, %add.7081, %add.7086, %add.7091, /*index=955*/%add.7097, %add.7102, %add.7107, %add.7112, %add.7117, /*index=960*/%add.7122, %add.7128, %add.7133, %add.7139, %add.7144, /*index=965*/%add.7150, %add.7156, %add.7162, %add.7167, %add.7172, /*index=970*/%add.7177, %select.2912, %sqrt.324, %divide.2051, %constant.3956, /*index=975*/%sqrt.325, %sqrt.326, %all-reduce)
}

