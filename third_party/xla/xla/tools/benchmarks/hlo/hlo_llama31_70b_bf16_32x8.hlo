HloModule jit_train_step, input_output_alias={ {0}: (0, {}, may-alias), {1}: (1, {}, may-alias), {2}: (2, {}, may-alias), {3}: (3, {}, may-alias), {4}: (4, {}, may-alias), {5}: (5, {}, may-alias), {6}: (6, {}, may-alias), {7}: (7, {}, may-alias), {8}: (8, {}, may-alias), {9}: (9, {}, may-alias), {10}: (10, {}, may-alias), {11}: (11, {}, may-alias), {12}: (12, {}, may-alias), {13}: (13, {}, may-alias), {14}: (14, {}, may-alias), {15}: (15, {}, may-alias), {16}: (16, {}, may-alias), {17}: (17, {}, may-alias), {18}: (18, {}, may-alias), {19}: (19, {}, may-alias), {20}: (20, {}, may-alias), {21}: (21, {}, may-alias), {22}: (22, {}, may-alias), {23}: (23, {}, may-alias), {24}: (24, {}, may-alias), {25}: (25, {}, may-alias), {26}: (26, {}, may-alias), {27}: (27, {}, may-alias), {28}: (28, {}, may-alias), {29}: (29, {}, may-alias), {30}: (30, {}, may-alias), {31}: (31, {}, may-alias), {32}: (32, {}, may-alias), {33}: (33, {}, may-alias), {34}: (34, {}, may-alias), {35}: (35, {}, may-alias), {36}: (36, {}, may-alias), {37}: (37, {}, may-alias), {38}: (38, {}, may-alias) }, entry_computation_layout={(s32[], f32[8192]{0}, f32[64,80,28672]{2,1,0}, f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, /*index=5*/f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, /*index=10*/f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, s32[], f32[8192]{0}, /*index=15*/f32[64,80,28672]{2,1,0}, f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, f32[8192,80]{1,0}, f32[8192,80]{1,0}, /*index=20*/f32[64,80,8,128]{3,2,1,0}, f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, /*index=25*/f32[128256,64]{1,0}, f32[8192]{0}, f32[64,80,28672]{2,1,0}, f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, /*index=30*/f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, /*index=35*/f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, s32[], s32[2,8192]{1,0}, /*index=40*/s32[2,8192]{1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0})->(s32[], f32[8192]{0}, f32[64,80,28672]{2,1,0}, f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, /*index=5*/f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, /*index=10*/f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, s32[], f32[8192]{0}, /*index=15*/f32[64,80,28672]{2,1,0}, f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, f32[8192,80]{1,0}, f32[8192,80]{1,0}, /*index=20*/f32[64,80,8,128]{3,2,1,0}, f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, /*index=25*/f32[128256,64]{1,0}, f32[8192]{0}, f32[64,80,28672]{2,1,0}, f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, /*index=30*/f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, /*index=35*/f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, s32[], f32[], /*index=40*/f32[], f32[], f32[], f32[], s32[])}

%region_56.2059 (Arg_0.2056: f32[], Arg_1.2057: f32[]) -> f32[] {
  %Arg_0.2056 = f32[] parameter(0)
  %Arg_1.2057 = f32[] parameter(1)
  ROOT %add.2058 = f32[] add(%Arg_0.2056, %Arg_1.2057)
}

%region_57.2065 (Arg_0.2062: f32[], Arg_1.2063: f32[]) -> f32[] {
  %Arg_0.2062 = f32[] parameter(0)
  %Arg_1.2063 = f32[] parameter(1)
  ROOT %add.2064 = f32[] add(%Arg_0.2062, %Arg_1.2063)
}

%region_58.2072 (Arg_0.2069: f32[], Arg_1.2070: f32[]) -> f32[] {
  %Arg_0.2069 = f32[] parameter(0)
  %Arg_1.2070 = f32[] parameter(1)
  ROOT %add.2071 = f32[] add(%Arg_0.2069, %Arg_1.2070)
}

%region_59.2079 (Arg_0.2076: f32[], Arg_1.2077: f32[]) -> f32[] {
  %Arg_0.2076 = f32[] parameter(0)
  %Arg_1.2077 = f32[] parameter(1)
  ROOT %add.2078 = f32[] add(%Arg_0.2076, %Arg_1.2077)
}

%region_60.2086 (Arg_0.2083: f32[], Arg_1.2084: f32[]) -> f32[] {
  %Arg_0.2083 = f32[] parameter(0)
  %Arg_1.2084 = f32[] parameter(1)
  ROOT %add.2085 = f32[] add(%Arg_0.2083, %Arg_1.2084)
}

%region_61.2093 (Arg_0.2090: f32[], Arg_1.2091: f32[]) -> f32[] {
  %Arg_0.2090 = f32[] parameter(0)
  %Arg_1.2091 = f32[] parameter(1)
  ROOT %add.2092 = f32[] add(%Arg_0.2090, %Arg_1.2091)
}

%region_62.2100 (Arg_0.2097: f32[], Arg_1.2098: f32[]) -> f32[] {
  %Arg_0.2097 = f32[] parameter(0)
  %Arg_1.2098 = f32[] parameter(1)
  ROOT %add.2099 = f32[] add(%Arg_0.2097, %Arg_1.2098)
}

%region_63.2107 (Arg_0.2104: f32[], Arg_1.2105: f32[]) -> f32[] {
  %Arg_0.2104 = f32[] parameter(0)
  %Arg_1.2105 = f32[] parameter(1)
  ROOT %add.2106 = f32[] add(%Arg_0.2104, %Arg_1.2105)
}

%region_64.2114 (Arg_0.2111: f32[], Arg_1.2112: f32[]) -> f32[] {
  %Arg_0.2111 = f32[] parameter(0)
  %Arg_1.2112 = f32[] parameter(1)
  ROOT %add.2113 = f32[] add(%Arg_0.2111, %Arg_1.2112)
}

%region_65.2121 (Arg_0.2118: f32[], Arg_1.2119: f32[]) -> f32[] {
  %Arg_0.2118 = f32[] parameter(0)
  %Arg_1.2119 = f32[] parameter(1)
  ROOT %add.2120 = f32[] add(%Arg_0.2118, %Arg_1.2119)
}

%region_66.2128 (Arg_0.2125: f32[], Arg_1.2126: f32[]) -> f32[] {
  %Arg_0.2125 = f32[] parameter(0)
  %Arg_1.2126 = f32[] parameter(1)
  ROOT %add.2127 = f32[] add(%Arg_0.2125, %Arg_1.2126)
}

%region_67.2135 (Arg_0.2132: f32[], Arg_1.2133: f32[]) -> f32[] {
  %Arg_0.2132 = f32[] parameter(0)
  %Arg_1.2133 = f32[] parameter(1)
  ROOT %add.2134 = f32[] add(%Arg_0.2132, %Arg_1.2133)
}

%region_8.211._custom_call_lowering_rule (Arg_0.208: s32[], Arg_1.209: s32[]) -> s32[] {
  %Arg_0.208 = s32[] parameter(0)
  %Arg_1.209 = s32[] parameter(1)
  ROOT %add.210 = s32[] add(%Arg_0.208, %Arg_1.209)
}

%region_11.241._custom_call_lowering_rule (Arg_0.6: s32[], Arg_1.6: s32[]) -> s32[] {
  %Arg_0.6 = s32[] parameter(0)
  ROOT %Arg_1.6 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule (Arg_0.217: pred[], Arg_1.218: pred[]) -> pred[] {
  %Arg_0.217 = pred[] parameter(0)
  ROOT %Arg_1.218 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule (Arg_0.227: s32[], Arg_1.228: s32[]) -> s32[] {
  %Arg_0.227 = s32[] parameter(0)
  %Arg_1.228 = s32[] parameter(1)
  ROOT %add.229 = s32[] add(%Arg_0.227, %Arg_1.228)
}

%region_8.211._custom_call_lowering_rule.1 (Arg_0.17: s32[], Arg_1.17: s32[]) -> s32[] {
  %Arg_0.17 = s32[] parameter(0)
  %Arg_1.17 = s32[] parameter(1)
  ROOT %add.74 = s32[] add(%Arg_0.17, %Arg_1.17)
}

%region_11.241._custom_call_lowering_rule.1 (Arg_0.18: s32[], Arg_1.18: s32[]) -> s32[] {
  %Arg_0.18 = s32[] parameter(0)
  ROOT %Arg_1.18 = s32[] parameter(1)
}

%region_9.219._custom_call_lowering_rule.1 (Arg_0.19: pred[], Arg_1.19: pred[]) -> pred[] {
  %Arg_0.19 = pred[] parameter(0)
  ROOT %Arg_1.19 = pred[] parameter(1)
}

%region_10.230._custom_call_lowering_rule.1 (Arg_0.20: s32[], Arg_1.20: s32[]) -> s32[] {
  %Arg_0.20 = s32[] parameter(0)
  %Arg_1.20 = s32[] parameter(1)
  ROOT %add.75 = s32[] add(%Arg_0.20, %Arg_1.20)
}

%region_1.78._custom_call_lowering_rule (Arg_0.73: s32[], Arg_1.74: s32[], Arg_2.75: s32[], Arg_3.76: s32[]) -> pred[] {
  %Arg_2.75 = s32[] parameter(2)
  %Arg_3.76 = s32[] parameter(3)
  %Arg_0.73 = s32[] parameter(0)
  %Arg_1.74 = s32[] parameter(1)
  ROOT %compare.95 = pred[] compare(%Arg_0.73, %Arg_1.74), direction=LT
}

%region_2.91._custom_call_lowering_rule (Arg_0.88: s32[], Arg_1.89: s32[]) -> s32[] {
  %Arg_0.88 = s32[] parameter(0)
  %Arg_1.89 = s32[] parameter(1)
  ROOT %add.90 = s32[] add(%Arg_0.88, %Arg_1.89)
}

%region_6.190._custom_call_lowering_rule (Arg_0.188: s32[], Arg_1.189: s32[]) -> s32[] {
  %Arg_0.188 = s32[] parameter(0)
  ROOT %Arg_1.189 = s32[] parameter(1)
}

%region_3.99._custom_call_lowering_rule (Arg_0.97: pred[], Arg_1.98: pred[]) -> pred[] {
  %Arg_0.97 = pred[] parameter(0)
  ROOT %Arg_1.98 = pred[] parameter(1)
}

%region_4.108._custom_call_lowering_rule (Arg_0.105: s32[], Arg_1.106: s32[]) -> s32[] {
  %Arg_0.105 = s32[] parameter(0)
  %Arg_1.106 = s32[] parameter(1)
  ROOT %add.107 = s32[] add(%Arg_0.105, %Arg_1.106)
}

%region_5.127._custom_call_lowering_rule (Arg_0.124: s32[], Arg_1.125: s32[]) -> s32[] {
  %Arg_0.124 = s32[] parameter(0)
  %Arg_1.125 = s32[] parameter(1)
  ROOT %add.126 = s32[] add(%Arg_0.124, %Arg_1.125)
}

%region_0.42._custom_call_lowering_rule (Arg_0.39: s32[], Arg_1.40: s32[]) -> s32[] {
  %Arg_0.39 = s32[] parameter(0)
  %Arg_1.40 = s32[] parameter(1)
  ROOT %add.76 = s32[] add(%Arg_0.39, %Arg_1.40)
}

%region_7.198._custom_call_lowering_rule (Arg_0.196: s32[], Arg_1.197: s32[]) -> s32[] {
  %Arg_0.196 = s32[] parameter(0)
  ROOT %Arg_1.197 = s32[] parameter(1)
}

%region_8.214._custom_call_lowering_rule (Arg_0.211: s32[], Arg_1.212: s32[]) -> s32[] {
  %Arg_0.211 = s32[] parameter(0)
  %Arg_1.212 = s32[] parameter(1)
  ROOT %add.213 = s32[] add(%Arg_0.211, %Arg_1.212)
}

%region_11.244._custom_call_lowering_rule (Arg_0.242: s32[], Arg_1.243: s32[]) -> s32[] {
  %Arg_0.242 = s32[] parameter(0)
  ROOT %Arg_1.243 = s32[] parameter(1)
}

%region_9.222._custom_call_lowering_rule (Arg_0.220: pred[], Arg_1.221: pred[]) -> pred[] {
  %Arg_0.220 = pred[] parameter(0)
  ROOT %Arg_1.221 = pred[] parameter(1)
}

%region_10.233._custom_call_lowering_rule (Arg_0.230: s32[], Arg_1.231: s32[]) -> s32[] {
  %Arg_0.230 = s32[] parameter(0)
  %Arg_1.231 = s32[] parameter(1)
  ROOT %add.232 = s32[] add(%Arg_0.230, %Arg_1.231)
}

%region_12.252._custom_call_lowering_rule (Arg_0.250: s32[], Arg_1.251: s32[]) -> s32[] {
  %Arg_0.250 = s32[] parameter(0)
  ROOT %Arg_1.251 = s32[] parameter(1)
}

%region_0.394 (Arg_0.391: s32[], Arg_1.392: s32[]) -> s32[] {
  %Arg_0.391 = s32[] parameter(0)
  %Arg_1.392 = s32[] parameter(1)
  ROOT %add.393 = s32[] add(%Arg_0.391, %Arg_1.392)
}

%region_1.402 (Arg_0.399: s32[], Arg_1.400: s32[]) -> s32[] {
  %Arg_0.399 = s32[] parameter(0)
  %Arg_1.400 = s32[] parameter(1)
  ROOT %add.401 = s32[] add(%Arg_0.399, %Arg_1.400)
}

%region_2.407 (Arg_0.404: s32[], Arg_1.405: s32[]) -> s32[] {
  %Arg_0.404 = s32[] parameter(0)
  %Arg_1.405 = s32[] parameter(1)
  ROOT %maximum.406 = s32[] maximum(%Arg_0.404, %Arg_1.405)
}

%region_4.493 (Arg_0.490: f32[], Arg_1.491: f32[]) -> f32[] {
  %Arg_0.490 = f32[] parameter(0)
  %Arg_1.491 = f32[] parameter(1)
  ROOT %add.492 = f32[] add(%Arg_0.490, %Arg_1.491)
}

%region_1.75._custom_call_lowering_rule (Arg_0.70: s32[], Arg_1.71: s32[], Arg_2.72: s32[], Arg_3.73: s32[]) -> pred[] {
  %Arg_2.72 = s32[] parameter(2)
  %Arg_3.73 = s32[] parameter(3)
  %Arg_0.70 = s32[] parameter(0)
  %Arg_1.71 = s32[] parameter(1)
  ROOT %compare.74 = pred[] compare(%Arg_0.70, %Arg_1.71), direction=LT
}

%region_2.88._custom_call_lowering_rule (Arg_0.85: s32[], Arg_1.86: s32[]) -> s32[] {
  %Arg_0.85 = s32[] parameter(0)
  %Arg_1.86 = s32[] parameter(1)
  ROOT %add.87 = s32[] add(%Arg_0.85, %Arg_1.86)
}

%region_6.187._custom_call_lowering_rule (Arg_0.185: s32[], Arg_1.186: s32[]) -> s32[] {
  %Arg_0.185 = s32[] parameter(0)
  ROOT %Arg_1.186 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule (Arg_0.94: pred[], Arg_1.95: pred[]) -> pred[] {
  %Arg_0.94 = pred[] parameter(0)
  ROOT %Arg_1.95 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule (Arg_0.102: s32[], Arg_1.103: s32[]) -> s32[] {
  %Arg_0.102 = s32[] parameter(0)
  %Arg_1.103 = s32[] parameter(1)
  ROOT %add.104 = s32[] add(%Arg_0.102, %Arg_1.103)
}

%region_5.124._custom_call_lowering_rule (Arg_0.121: s32[], Arg_1.122: s32[]) -> s32[] {
  %Arg_0.121 = s32[] parameter(0)
  %Arg_1.122 = s32[] parameter(1)
  ROOT %add.123 = s32[] add(%Arg_0.121, %Arg_1.122)
}

%region_0.39._custom_call_lowering_rule (Arg_0.36: s32[], Arg_1.37: s32[]) -> s32[] {
  %Arg_0.36 = s32[] parameter(0)
  %Arg_1.37 = s32[] parameter(1)
  ROOT %add.57 = s32[] add(%Arg_0.36, %Arg_1.37)
}

%region_0.39._custom_call_lowering_rule.clone (Arg_0.63: s32[], Arg_1.63: s32[]) -> s32[] {
  %Arg_0.63 = s32[] parameter(0)
  %Arg_1.63 = s32[] parameter(1)
  ROOT %add.351 = s32[] add(%Arg_0.63, %Arg_1.63)
}

%region_7.195._custom_call_lowering_rule (Arg_0.193: s32[], Arg_1.194: s32[]) -> s32[] {
  %Arg_0.193 = s32[] parameter(0)
  ROOT %Arg_1.194 = s32[] parameter(1)
}

%region_0.39._custom_call_lowering_rule.clone.1 (Arg_0.64: s32[], Arg_1.64: s32[]) -> s32[] {
  %Arg_0.64 = s32[] parameter(0)
  %Arg_1.64 = s32[] parameter(1)
  ROOT %add.352 = s32[] add(%Arg_0.64, %Arg_1.64)
}

%region_12.249._custom_call_lowering_rule (Arg_0.247: s32[], Arg_1.248: s32[]) -> s32[] {
  %Arg_0.247 = s32[] parameter(0)
  ROOT %Arg_1.248 = s32[] parameter(1)
}

%region_5.584 (Arg_0.581: f32[], Arg_1.582: f32[]) -> f32[] {
  %Arg_0.581 = f32[] parameter(0)
  %Arg_1.582 = f32[] parameter(1)
  ROOT %add.583 = f32[] add(%Arg_0.581, %Arg_1.582)
}

%region_3.632_spmd (param.1: (s32[], bf16[2,8192,8192], bf16[80,2,8192,8192], f32[80,64,28672], f32[80,64,28672], /*index=5*/f32[80,28672,64], f32[80,8192], f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], /*index=10*/f32[80,64,64,128], f32[80,64,8,128], f32[2,8192,1,128], s32[2,8192,64,128], f32[2,8192,1,128], /*index=15*/f32[1,1,1,128], f32[2,8192,1,128], s32[2,8192,8,128], f32[2,8192,1,128], f32[1,1,1,128], /*index=20*/s32[2,1], s32[2,1])) -> (s32[], bf16[2,8192,8192], bf16[80,2,8192,8192], f32[80,64,28672], f32[80,64,28672], /*index=5*/f32[80,28672,64], f32[80,8192], f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], /*index=10*/f32[80,64,64,128], f32[80,64,8,128], f32[2,8192,1,128], s32[2,8192,64,128], f32[2,8192,1,128], /*index=15*/f32[1,1,1,128], f32[2,8192,1,128], s32[2,8192,8,128], f32[2,8192,1,128], f32[1,1,1,128], /*index=20*/s32[2,1], s32[2,1]) {
  %param.1 = (s32[], bf16[2,8192,8192]{2,1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, /*index=5*/f32[80,28672,64]{2,1,0}, f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, /*index=10*/f32[80,64,64,128]{3,2,1,0}, f32[80,64,8,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,64,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, /*index=15*/f32[1,1,1,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,8,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, /*index=20*/s32[2,1]{1,0}, s32[2,1]{1,0}) parameter(0)
  %get-tuple-element.14 = s32[] get-tuple-element(%param.1), index=0
  %constant.372 = s32[] constant(1)
  %add.58 = s32[] add(%get-tuple-element.14, %constant.372)
  %get-tuple-element.15 = bf16[2,8192,8192]{2,1,0} get-tuple-element(%param.1), index=1
  %copy.43 = bf16[2,8192,8192]{2,1,0} copy(%get-tuple-element.15)
  %convert.106 = f32[2,8192,8192]{2,1,0} convert(%copy.43)
  %multiply.152 = f32[2,8192,8192]{2,1,0} multiply(%convert.106, %convert.106)
  %constant.373 = f32[] constant(0)
  %reduce.19 = f32[2,8192]{1,0} reduce(%multiply.152, %constant.373), dimensions={2}, to_apply=%region_4.493
  %constant.374 = f32[] constant(0.000122070312)
  %broadcast.439 = f32[2,8192]{1,0} broadcast(%constant.374), dimensions={}
  %multiply.153 = f32[2,8192]{1,0} multiply(%reduce.19, %broadcast.439)
  %constant.375 = f32[] constant(1e-05)
  %broadcast.440 = f32[2,8192]{1,0} broadcast(%constant.375), dimensions={}
  %add.59 = f32[2,8192]{1,0} add(%multiply.153, %broadcast.440)
  %rsqrt.6 = f32[2,8192]{1,0} rsqrt(%add.59)
  %broadcast.441 = f32[2,8192,8192]{2,1,0} broadcast(%rsqrt.6), dimensions={0,1}
  %multiply.154 = f32[2,8192,8192]{2,1,0} multiply(%convert.106, %broadcast.441)
  %convert.107 = bf16[2,8192,8192]{2,1,0} convert(%multiply.154)
  %get-tuple-element.16 = f32[80,8192]{1,0} get-tuple-element(%param.1), index=7
  %constant.376 = s32[] constant(0)
  %dynamic-slice.0 = f32[1,8192]{1,0} dynamic-slice(%get-tuple-element.16, %get-tuple-element.14, %constant.376), dynamic_slice_sizes={1,8192}
  %convert.108 = bf16[1,8192]{1,0} convert(%dynamic-slice.0)
  %reshape.425 = bf16[8192]{0} reshape(%convert.108)
  %broadcast.442 = bf16[2,8192,8192]{2,1,0} broadcast(%reshape.425), dimensions={2}
  %multiply.155 = bf16[2,8192,8192]{2,1,0} multiply(%convert.107, %broadcast.442)
  %copy.44 = bf16[2,8192,8192]{2,1,0} copy(%multiply.155)
  %copy.45 = bf16[2,8192,8192]{2,1,0} copy(%copy.44)
  %get-tuple-element.17 = f32[80,64,64,128]{3,2,1,0} get-tuple-element(%param.1), index=10
  %dynamic-slice.1 = f32[1,64,64,128]{3,2,1,0} dynamic-slice(%get-tuple-element.17, %get-tuple-element.14, %constant.376, %constant.376, %constant.376), dynamic_slice_sizes={1,64,64,128}
  %convert.109 = bf16[1,64,64,128]{3,2,1,0} convert(%dynamic-slice.1)
  %reshape.426 = bf16[64,64,128]{2,1,0} reshape(%convert.109)
  %all-gather = bf16[8192,64,128]{2,1,0} all-gather(%reshape.426), channel_id=2, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.32 = bf16[2,8192,64,128]{3,2,1,0} dot(%copy.45, %all-gather), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %convert.110 = f32[2,8192,64,128]{3,2,1,0} convert(%dot.32)
  %get-tuple-element.18 = f32[2,8192,1,128]{3,2,1,0} get-tuple-element(%param.1), index=12
  %reshape.427 = f32[2,8192,128]{2,1,0} reshape(%get-tuple-element.18)
  %broadcast.443 = f32[2,8192,64,128]{3,2,1,0} broadcast(%reshape.427), dimensions={0,1,3}
  %multiply.156 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert.110, %broadcast.443)
  %get-tuple-element.19 = s32[2,8192,64,128]{3,2,1,0} get-tuple-element(%param.1), index=13
  %broadcast.444 = s32[2,8192,64,128]{3,2,1,0} broadcast(%constant.372), dimensions={}
  %compare.73 = pred[2,8192,64,128]{3,2,1,0} compare(%get-tuple-element.19, %broadcast.444), direction=LT
  %slice.25 = bf16[2,8192,64,127]{3,2,1,0} slice(%dot.32), slice={[0:2], [0:8192], [0:64], [1:128]}
  %slice.26 = bf16[2,8192,64,1]{3,2,1,0} slice(%dot.32), slice={[0:2], [0:8192], [0:64], [0:1]}
  %concatenate.8 = bf16[2,8192,64,128]{3,2,1,0} concatenate(%slice.25, %slice.26), dimensions={3}
  %slice.27 = bf16[2,8192,64,1]{3,2,1,0} slice(%dot.32), slice={[0:2], [0:8192], [0:64], [127:128]}
  %slice.28 = bf16[2,8192,64,127]{3,2,1,0} slice(%dot.32), slice={[0:2], [0:8192], [0:64], [0:127]}
  %concatenate.9 = bf16[2,8192,64,128]{3,2,1,0} concatenate(%slice.27, %slice.28), dimensions={3}
  %select.52 = bf16[2,8192,64,128]{3,2,1,0} select(%compare.73, %concatenate.8, %concatenate.9)
  %convert.111 = f32[2,8192,64,128]{3,2,1,0} convert(%select.52)
  %get-tuple-element.20 = f32[2,8192,1,128]{3,2,1,0} get-tuple-element(%param.1), index=14
  %reshape.432 = f32[2,8192,128]{2,1,0} reshape(%get-tuple-element.20)
  %broadcast.445 = f32[2,8192,64,128]{3,2,1,0} broadcast(%reshape.432), dimensions={0,1,3}
  %multiply.161 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert.111, %broadcast.445)
  %get-tuple-element.21 = f32[1,1,1,128]{3,2,1,0} get-tuple-element(%param.1), index=15
  %reshape.433 = f32[128]{0} reshape(%get-tuple-element.21)
  %broadcast.446 = f32[2,8192,64,128]{3,2,1,0} broadcast(%reshape.433), dimensions={3}
  %multiply.162 = f32[2,8192,64,128]{3,2,1,0} multiply(%multiply.161, %broadcast.446)
  %add.60 = f32[2,8192,64,128]{3,2,1,0} add(%multiply.156, %multiply.162)
  %convert.112 = bf16[2,8192,64,128]{3,2,1,0} convert(%add.60)
  %copy.46 = bf16[2,8192,64,128]{3,2,1,0} copy(%convert.112)
  %get-tuple-element.22 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.1), index=8
  %dynamic-slice.6 = f32[1,64,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.22, %get-tuple-element.14, %constant.376, %constant.376, %constant.376), dynamic_slice_sizes={1,64,8,128}
  %convert.113 = bf16[1,64,8,128]{3,2,1,0} convert(%dynamic-slice.6)
  %reshape.434 = bf16[64,8,128]{2,1,0} reshape(%convert.113)
  %all-gather.1 = bf16[8192,8,128]{2,1,0} all-gather(%reshape.434), channel_id=3, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.33 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.45, %all-gather.1), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %convert.114 = f32[2,8192,8,128]{3,2,1,0} convert(%dot.33)
  %get-tuple-element.23 = f32[2,8192,1,128]{3,2,1,0} get-tuple-element(%param.1), index=16
  %reshape.435 = f32[2,8192,128]{2,1,0} reshape(%get-tuple-element.23)
  %broadcast.447 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.435), dimensions={0,1,3}
  %multiply.163 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.114, %broadcast.447)
  %get-tuple-element.24 = s32[2,8192,8,128]{3,2,1,0} get-tuple-element(%param.1), index=17
  %broadcast.448 = s32[2,8192,8,128]{3,2,1,0} broadcast(%constant.372), dimensions={}
  %compare.75 = pred[2,8192,8,128]{3,2,1,0} compare(%get-tuple-element.24, %broadcast.448), direction=LT
  %slice.29 = bf16[2,8192,8,127]{3,2,1,0} slice(%dot.33), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.30 = bf16[2,8192,8,1]{3,2,1,0} slice(%dot.33), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.10 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.29, %slice.30), dimensions={3}
  %slice.31 = bf16[2,8192,8,1]{3,2,1,0} slice(%dot.33), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.32 = bf16[2,8192,8,127]{3,2,1,0} slice(%dot.33), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.11 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.31, %slice.32), dimensions={3}
  %select.53 = bf16[2,8192,8,128]{3,2,1,0} select(%compare.75, %concatenate.10, %concatenate.11)
  %convert.115 = f32[2,8192,8,128]{3,2,1,0} convert(%select.53)
  %get-tuple-element.25 = f32[2,8192,1,128]{3,2,1,0} get-tuple-element(%param.1), index=18
  %reshape.443 = f32[2,8192,128]{2,1,0} reshape(%get-tuple-element.25)
  %broadcast.449 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.443), dimensions={0,1,3}
  %multiply.168 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.115, %broadcast.449)
  %get-tuple-element.26 = f32[1,1,1,128]{3,2,1,0} get-tuple-element(%param.1), index=19
  %reshape.445 = f32[128]{0} reshape(%get-tuple-element.26)
  %broadcast.450 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.445), dimensions={3}
  %multiply.169 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.168, %broadcast.450)
  %add.61 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.163, %multiply.169)
  %convert.116 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.61)
  %copy.48 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.116)
  %get-tuple-element.27 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.1), index=11
  %dynamic-slice.11 = f32[1,64,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.27, %get-tuple-element.14, %constant.376, %constant.376, %constant.376), dynamic_slice_sizes={1,64,8,128}
  %convert.117 = bf16[1,64,8,128]{3,2,1,0} convert(%dynamic-slice.11)
  %reshape.447 = bf16[64,8,128]{2,1,0} reshape(%convert.117)
  %all-gather.2 = bf16[8192,8,128]{2,1,0} all-gather(%reshape.447), channel_id=4, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.34 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.45, %all-gather.2), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.49 = bf16[2,8192,8,128]{3,2,1,0} copy(%dot.34)
  %constant.467 = bf16[0]{0} constant({})
  %broadcast.452 = s32[3]{0} broadcast(%constant.376), dimensions={}
  %constant.471 = s32[] constant(2)
  %reshape.451 = s32[1]{0} reshape(%constant.471)
  %reshape.453 = s32[1]{0} reshape(%constant.376)
  %constant.473 = pred[1]{0} constant({0})
  %constant.474 = s32[1]{0} constant({2})
  %constant.475 = s32[1]{0} constant({0})
  %select.54 = s32[1]{0} select(%constant.473, %constant.474, %constant.475)
  %maximum.1 = s32[1]{0} maximum(%reshape.453, %select.54)
  %minimum.1 = s32[1]{0} minimum(%reshape.451, %maximum.1)
  %sort.0 = (s32[1]{0}, s32[1]{0}) sort(%minimum.1, %constant.475), dimensions={0}, is_stable=true, to_apply=%region_1.75._custom_call_lowering_rule
  %get-tuple-element.30 = s32[1]{0} get-tuple-element(%sort.0), index=1
  %compare.81 = pred[1]{0} compare(%get-tuple-element.30, %constant.475), direction=LT
  %constant.477 = s32[1]{0} constant({1})
  %add.82 = s32[1]{0} add(%get-tuple-element.30, %constant.477)
  %select.83 = s32[1]{0} select(%compare.81, %add.82, %get-tuple-element.30)
  %reshape.455 = s32[1,1]{1,0} reshape(%select.83)
  %scatter.89 = s32[1]{0} scatter(%minimum.1, %reshape.455, %constant.475), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_2.88._custom_call_lowering_rule
  %compare.181 = pred[1]{0} compare(%scatter.89, %constant.475), direction=LT
  %constant.479 = s32[1]{0} constant({3})
  %add.182 = s32[1]{0} add(%scatter.89, %constant.479)
  %select.183 = s32[1]{0} select(%compare.181, %add.182, %scatter.89)
  %reshape.456 = s32[1,1]{1,0} reshape(%select.183)
  %scatter.188 = s32[3]{0} scatter(%broadcast.452, %reshape.456, %constant.475), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.187._custom_call_lowering_rule
  %broadcast.453 = s32[2]{0} broadcast(%constant.376), dimensions={}
  %constant.483 = pred[] constant(true)
  %broadcast.455 = pred[3]{0} broadcast(%constant.483), dimensions={}
  %scatter.97 = pred[3]{0} scatter(%broadcast.455, %reshape.456, %constant.473), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_3.96._custom_call_lowering_rule
  %convert.118 = s32[3]{0} convert(%scatter.97)
  %reduce-window.3 = s32[3]{0} reduce-window(%convert.118, %constant.376), window={size=3 pad=2_0}, to_apply=%region_4.105._custom_call_lowering_rule
  %maximum.2 = s32[3]{0} maximum(%broadcast.452, %reduce-window.3)
  %compare.117 = pred[3]{0} compare(%maximum.2, %broadcast.452), direction=LT
  %broadcast.456 = s32[3]{0} broadcast(%constant.471), dimensions={}
  %add.118 = s32[3]{0} add(%maximum.2, %broadcast.456)
  %select.119 = s32[3]{0} select(%compare.117, %add.118, %maximum.2)
  %reshape.458 = s32[3,1]{1,0} reshape(%select.119)
  %broadcast.457 = s32[3]{0} broadcast(%constant.372), dimensions={}
  %scatter.125 = s32[2]{0} scatter(%broadcast.453, %reshape.458, %broadcast.457), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_5.124._custom_call_lowering_rule
  %reduce-window.4 = s32[2]{0} reduce-window(%scatter.125, %constant.376), window={size=2 pad=1_0}, to_apply=%region_0.39._custom_call_lowering_rule
  %sign.0 = s32[2]{0} sign(%reduce-window.4)
  %sign.1 = s32[] sign(%constant.372)
  %broadcast.458 = s32[2]{0} broadcast(%sign.1), dimensions={}
  %compare.76 = pred[2]{0} compare(%sign.0, %broadcast.458), direction=NE
  %broadcast.459 = s32[2]{0} broadcast(%constant.372), dimensions={}
  %remainder.8 = s32[2]{0} remainder(%reduce-window.4, %broadcast.459)
  %compare.77 = pred[2]{0} compare(%remainder.8, %broadcast.453), direction=NE
  %and.15 = pred[2]{0} and(%compare.76, %compare.77)
  %divide.46 = s32[2]{0} divide(%reduce-window.4, %broadcast.459)
  %subtract.7 = s32[2]{0} subtract(%divide.46, %broadcast.459)
  %select.55 = s32[2]{0} select(%and.15, %subtract.7, %divide.46)
  %constant.493 = s32[] constant(3)
  %compare.78 = pred[] compare(%constant.493, %constant.376), direction=EQ
  %select.56 = s32[] select(%compare.78, %constant.372, %constant.493)
  %broadcast.463 = s32[2]{0} broadcast(%select.56), dimensions={}
  %remainder.9 = s32[2]{0} remainder(%select.55, %broadcast.463)
  %compare.79 = pred[2]{0} compare(%remainder.9, %broadcast.453), direction=LT
  %compare.80 = pred[] compare(%select.56, %constant.376), direction=LT
  %broadcast.465 = pred[2]{0} broadcast(%compare.80), dimensions={}
  %compare.82 = pred[2]{0} compare(%compare.79, %broadcast.465), direction=NE
  %compare.83 = pred[2]{0} compare(%remainder.9, %broadcast.453), direction=NE
  %and.16 = pred[2]{0} and(%compare.82, %compare.83)
  %add.62 = s32[2]{0} add(%remainder.9, %broadcast.463)
  %select.57 = s32[2]{0} select(%and.16, %add.62, %remainder.9)
  %compare.189 = pred[2]{0} compare(%select.57, %broadcast.453), direction=LT
  %broadcast.467 = s32[2]{0} broadcast(%constant.493), dimensions={}
  %add.190 = s32[2]{0} add(%select.57, %broadcast.467)
  %select.191 = s32[2]{0} select(%compare.189, %add.190, %select.57)
  %reshape.459 = s32[2,1]{1,0} reshape(%select.191)
  %get-tuple-element.28 = s32[2,1]{1,0} get-tuple-element(%param.1), index=20
  %reshape.460 = s32[2]{0} reshape(%get-tuple-element.28)
  %compare.84 = pred[2]{0} compare(%reshape.460, %broadcast.453), direction=LT
  %constant.498 = s32[] constant(-1)
  %broadcast.468 = s32[2]{0} broadcast(%constant.498), dimensions={}
  %reduce-window.5 = s32[2]{0} reduce-window(%reshape.460, %constant.376), window={size=2 pad=1_0}, to_apply=%region_0.39._custom_call_lowering_rule.clone
  %select.58 = s32[2]{0} select(%compare.84, %broadcast.468, %reduce-window.5)
  %scatter.196 = s32[3]{0} scatter(%scatter.188, %reshape.459, %select.58), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.195._custom_call_lowering_rule
  %get-tuple-element.29 = s32[2,1]{1,0} get-tuple-element(%param.1), index=21
  %reshape.468 = s32[2]{0} reshape(%get-tuple-element.29)
  %compare.199 = pred[2]{0} compare(%reshape.468, %broadcast.453), direction=LT
  %reduce-window.8 = s32[2]{0} reduce-window(%reshape.468, %constant.376), window={size=2 pad=1_0}, to_apply=%region_0.39._custom_call_lowering_rule.clone.1
  %select.63 = s32[2]{0} select(%compare.199, %broadcast.468, %reduce-window.8)
  %scatter.250 = s32[3]{0} scatter(%scatter.188, %reshape.459, %select.63), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.249._custom_call_lowering_rule
  %constant.468 = u32[] constant(0)
  %broadcast.451 = u32[512]{0} broadcast(%constant.468), dimensions={}
  %constant.469 = s32[256]{0} constant({0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510})
  %partition-id.1 = u32[] partition-id()
  %dynamic-slice.12 = s32[1]{0} dynamic-slice(%constant.469, %partition-id.1), dynamic_slice_sizes={1}
  %reshape.449 = s32[] reshape(%dynamic-slice.12)
  %dynamic-slice.13 = u32[2]{0} dynamic-slice(%broadcast.451, %reshape.449), dynamic_slice_sizes={2}
  %custom-call.251 = (bf16[2,8192,64,128]{3,2,1,0}, f32[2,64,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.46, %copy.48, %copy.49, %constant.467, %scatter.196, /*index=5*/%scatter.250, %constant.467, %constant.467, %dynamic-slice.13), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,64,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 64 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.32 = bf16[2,8192,64,128]{3,2,1,0} get-tuple-element(%custom-call.251), index=0
  %copy.50 = bf16[2,8192,64,128]{3,2,1,0} copy(%get-tuple-element.32)
  %get-tuple-element.33 = f32[80,64,128,64]{3,2,1,0} get-tuple-element(%param.1), index=9
  %dynamic-slice.14 = f32[1,64,128,64]{3,2,1,0} dynamic-slice(%get-tuple-element.33, %get-tuple-element.14, %constant.376, %constant.376, %constant.376), dynamic_slice_sizes={1,64,128,64}
  %convert.120 = bf16[1,64,128,64]{3,2,1,0} convert(%dynamic-slice.14)
  %reshape.469 = bf16[64,128,64]{2,1,0} reshape(%convert.120)
  %all-gather.3 = bf16[64,128,8192]{2,1,0} all-gather(%reshape.469), channel_id=5, replica_groups=[2,128]<=[256], dimensions={2}, use_global_device_ids=true
  %dot.35 = bf16[2,8192,8192]{2,1,0} dot(%copy.50, %all-gather.3), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.51 = bf16[2,8192,8192]{2,1,0} copy(%dot.35)
  %add.64 = bf16[2,8192,8192]{2,1,0} add(%copy.43, %copy.51)
  %convert.121 = f32[2,8192,8192]{2,1,0} convert(%add.64)
  %multiply.170 = f32[2,8192,8192]{2,1,0} multiply(%convert.121, %convert.121)
  %reduce.20 = f32[2,8192]{1,0} reduce(%multiply.170, %constant.373), dimensions={2}, to_apply=%region_5.584
  %multiply.171 = f32[2,8192]{1,0} multiply(%reduce.20, %broadcast.439)
  %add.65 = f32[2,8192]{1,0} add(%multiply.171, %broadcast.440)
  %rsqrt.7 = f32[2,8192]{1,0} rsqrt(%add.65)
  %broadcast.486 = f32[2,8192,8192]{2,1,0} broadcast(%rsqrt.7), dimensions={0,1}
  %multiply.172 = f32[2,8192,8192]{2,1,0} multiply(%convert.121, %broadcast.486)
  %convert.122 = bf16[2,8192,8192]{2,1,0} convert(%multiply.172)
  %get-tuple-element.34 = f32[80,8192]{1,0} get-tuple-element(%param.1), index=6
  %dynamic-slice.15 = f32[1,8192]{1,0} dynamic-slice(%get-tuple-element.34, %get-tuple-element.14, %constant.376), dynamic_slice_sizes={1,8192}
  %convert.123 = bf16[1,8192]{1,0} convert(%dynamic-slice.15)
  %reshape.470 = bf16[8192]{0} reshape(%convert.123)
  %broadcast.487 = bf16[2,8192,8192]{2,1,0} broadcast(%reshape.470), dimensions={2}
  %multiply.173 = bf16[2,8192,8192]{2,1,0} multiply(%convert.122, %broadcast.487)
  %copy.52 = bf16[2,8192,8192]{2,1,0} copy(%multiply.173)
  %get-tuple-element.35 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.1), index=3
  %dynamic-slice.16 = f32[1,64,28672]{2,1,0} dynamic-slice(%get-tuple-element.35, %get-tuple-element.14, %constant.376, %constant.376), dynamic_slice_sizes={1,64,28672}
  %convert.124 = bf16[1,64,28672]{2,1,0} convert(%dynamic-slice.16)
  %reshape.471 = bf16[64,28672]{1,0} reshape(%convert.124)
  %all-gather.4 = bf16[8192,28672]{1,0} all-gather(%reshape.471), channel_id=6, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.36 = bf16[2,8192,28672]{2,1,0} dot(%copy.52, %all-gather.4), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %constant.520 = bf16[] constant(1)
  %broadcast.488 = bf16[2,8192,28672]{2,1,0} broadcast(%constant.520), dimensions={}
  %negate.26 = bf16[2,8192,28672]{2,1,0} negate(%dot.36)
  %exponential.4 = bf16[2,8192,28672]{2,1,0} exponential(%negate.26)
  %add.66 = bf16[2,8192,28672]{2,1,0} add(%exponential.4, %broadcast.488)
  %divide.48 = bf16[2,8192,28672]{2,1,0} divide(%broadcast.488, %add.66)
  %multiply.174 = bf16[2,8192,28672]{2,1,0} multiply(%dot.36, %divide.48)
  %get-tuple-element.36 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.1), index=4
  %dynamic-slice.17 = f32[1,64,28672]{2,1,0} dynamic-slice(%get-tuple-element.36, %get-tuple-element.14, %constant.376, %constant.376), dynamic_slice_sizes={1,64,28672}
  %convert.125 = bf16[1,64,28672]{2,1,0} convert(%dynamic-slice.17)
  %reshape.472 = bf16[64,28672]{1,0} reshape(%convert.125)
  %all-gather.5 = bf16[8192,28672]{1,0} all-gather(%reshape.472), channel_id=7, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.37 = bf16[2,8192,28672]{2,1,0} dot(%copy.52, %all-gather.5), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.175 = bf16[2,8192,28672]{2,1,0} multiply(%multiply.174, %dot.37)
  %copy.53 = bf16[2,8192,28672]{2,1,0} copy(%multiply.175)
  %get-tuple-element.37 = f32[80,28672,64]{2,1,0} get-tuple-element(%param.1), index=5
  %dynamic-slice.18 = f32[1,28672,64]{2,1,0} dynamic-slice(%get-tuple-element.37, %get-tuple-element.14, %constant.376, %constant.376), dynamic_slice_sizes={1,28672,64}
  %convert.126 = bf16[1,28672,64]{2,1,0} convert(%dynamic-slice.18)
  %reshape.473 = bf16[28672,64]{1,0} reshape(%convert.126)
  %all-gather.6 = bf16[28672,8192]{1,0} all-gather(%reshape.473), channel_id=8, replica_groups=[2,128]<=[256], dimensions={1}, use_global_device_ids=true
  %dot.38 = bf16[2,8192,8192]{2,1,0} dot(%copy.53, %all-gather.6), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.54 = bf16[2,8192,8192]{2,1,0} copy(%dot.38)
  %add.67 = bf16[2,8192,8192]{2,1,0} add(%copy.54, %add.64)
  %copy.55 = bf16[2,8192,8192]{2,1,0} copy(%add.67)
  %get-tuple-element.38 = bf16[80,2,8192,8192]{3,2,1,0} get-tuple-element(%param.1), index=2
  %reshape.474 = bf16[1,2,8192,8192]{3,2,1,0} reshape(%get-tuple-element.15)
  %dynamic-update-slice = bf16[80,2,8192,8192]{3,2,1,0} dynamic-update-slice(%get-tuple-element.38, %reshape.474, %get-tuple-element.14, %constant.376, %constant.376, /*index=5*/%constant.376)
  ROOT %tuple.4 = (s32[], bf16[2,8192,8192]{2,1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, /*index=5*/f32[80,28672,64]{2,1,0}, f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, /*index=10*/f32[80,64,64,128]{3,2,1,0}, f32[80,64,8,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,64,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, /*index=15*/f32[1,1,1,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,8,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, /*index=20*/s32[2,1]{1,0}, s32[2,1]{1,0}) tuple(%add.58, %copy.55, %dynamic-update-slice, %get-tuple-element.35, %get-tuple-element.36, /*index=5*/%get-tuple-element.37, %get-tuple-element.34, %get-tuple-element.16, %get-tuple-element.22, %get-tuple-element.33, /*index=10*/%get-tuple-element.17, %get-tuple-element.27, %get-tuple-element.18, %get-tuple-element.19, %get-tuple-element.20, /*index=15*/%get-tuple-element.21, %get-tuple-element.23, %get-tuple-element.24, %get-tuple-element.25, %get-tuple-element.26, /*index=20*/%get-tuple-element.28, %get-tuple-element.29)
}

%region_6.658_spmd (param: (s32[], bf16[2,8192,8192], bf16[80,2,8192,8192], f32[80,64,28672], f32[80,64,28672], /*index=5*/f32[80,28672,64], f32[80,8192], f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], /*index=10*/f32[80,64,64,128], f32[80,64,8,128], f32[2,8192,1,128], s32[2,8192,64,128], f32[2,8192,1,128], /*index=15*/f32[1,1,1,128], f32[2,8192,1,128], s32[2,8192,8,128], f32[2,8192,1,128], f32[1,1,1,128], /*index=20*/s32[2,1], s32[2,1])) -> pred[] {
  %param = (s32[], bf16[2,8192,8192]{2,1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, /*index=5*/f32[80,28672,64]{2,1,0}, f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, /*index=10*/f32[80,64,64,128]{3,2,1,0}, f32[80,64,8,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,64,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, /*index=15*/f32[1,1,1,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,8,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, /*index=20*/s32[2,1]{1,0}, s32[2,1]{1,0}) parameter(0)
  %get-tuple-element.13 = s32[] get-tuple-element(%param), index=0
  %constant.368 = s32[] constant(80)
  ROOT %compare.72 = pred[] compare(%get-tuple-element.13, %constant.368), direction=LT
}

%region_7.670 (Arg_0.667: f32[], Arg_1.668: f32[]) -> f32[] {
  %Arg_0.667 = f32[] parameter(0)
  %Arg_1.668 = f32[] parameter(1)
  ROOT %add.669 = f32[] add(%Arg_0.667, %Arg_1.668)
}

%region_12.756 (Arg_0.753: s32[], Arg_1.754: s32[]) -> s32[] {
  %Arg_0.753 = s32[] parameter(0)
  %Arg_1.754 = s32[] parameter(1)
  ROOT %add.755 = s32[] add(%Arg_0.753, %Arg_1.754)
}

%region_12.756.clone (Arg_0.7: s32[], Arg_1.7: s32[]) -> s32[] {
  %Arg_0.7 = s32[] parameter(0)
  %Arg_1.7 = s32[] parameter(1)
  ROOT %add.68 = s32[] add(%Arg_0.7, %Arg_1.7)
}

%region_8.710 (Arg_0.707: f32[], Arg_1.708: f32[]) -> f32[] {
  %Arg_0.707 = f32[] parameter(0)
  %Arg_1.708 = f32[] parameter(1)
  ROOT %maximum.709 = f32[] maximum(%Arg_0.707, %Arg_1.708)
}

%region_9.721 (Arg_0.718: f32[], Arg_1.719: f32[]) -> f32[] {
  %Arg_0.718 = f32[] parameter(0)
  %Arg_1.719 = f32[] parameter(1)
  ROOT %add.720 = f32[] add(%Arg_0.718, %Arg_1.719)
}

%region_13.792 (Arg_0.789: bf16[], Arg_1.790: bf16[]) -> bf16[] {
  %Arg_0.789 = bf16[] parameter(0)
  %Arg_1.790 = bf16[] parameter(1)
  ROOT %add.791 = bf16[] add(%Arg_0.789, %Arg_1.790)
}

%region_13.792.clone (Arg_0.8: bf16[], Arg_1.8: bf16[]) -> bf16[] {
  %Arg_0.8 = bf16[] parameter(0)
  %Arg_1.8 = bf16[] parameter(1)
  ROOT %add.69 = bf16[] add(%Arg_0.8, %Arg_1.8)
}

%region_32.1564 (Arg_0.1561: f32[], Arg_1.1562: f32[]) -> f32[] {
  %Arg_0.1561 = f32[] parameter(0)
  %Arg_1.1562 = f32[] parameter(1)
  ROOT %add.1563 = f32[] add(%Arg_0.1561, %Arg_1.1562)
}

%region_15.810 (Arg_0.807: f32[], Arg_1.808: f32[]) -> f32[] {
  %Arg_0.807 = f32[] parameter(0)
  %Arg_1.808 = f32[] parameter(1)
  ROOT %add.809 = f32[] add(%Arg_0.807, %Arg_1.808)
}

%region_18.951 (Arg_0.948: f32[], Arg_1.949: f32[]) -> f32[] {
  %Arg_0.948 = f32[] parameter(0)
  %Arg_1.949 = f32[] parameter(1)
  ROOT %add.950 = f32[] add(%Arg_0.948, %Arg_1.949)
}

%region_19.1195 (Arg_0.1192: s32[], Arg_1.1193: s32[]) -> s32[] {
  %Arg_0.1192 = s32[] parameter(0)
  %Arg_1.1193 = s32[] parameter(1)
  ROOT %add.1194 = s32[] add(%Arg_0.1192, %Arg_1.1193)
}

%region_20.1203 (Arg_0.1200: s32[], Arg_1.1201: s32[]) -> s32[] {
  %Arg_0.1200 = s32[] parameter(0)
  %Arg_1.1201 = s32[] parameter(1)
  ROOT %add.1202 = s32[] add(%Arg_0.1200, %Arg_1.1201)
}

%region_21.1208 (Arg_0.1205: s32[], Arg_1.1206: s32[]) -> s32[] {
  %Arg_0.1205 = s32[] parameter(0)
  %Arg_1.1206 = s32[] parameter(1)
  ROOT %maximum.1207 = s32[] maximum(%Arg_0.1205, %Arg_1.1206)
}

%region_1.75._custom_call_lowering_rule.1 (Arg_0.9: s32[], Arg_1.9: s32[], Arg_2.4: s32[], Arg_3.0: s32[]) -> pred[] {
  %Arg_2.4 = s32[] parameter(2)
  %Arg_3.0 = s32[] parameter(3)
  %Arg_0.9 = s32[] parameter(0)
  %Arg_1.9 = s32[] parameter(1)
  ROOT %compare.94 = pred[] compare(%Arg_0.9, %Arg_1.9), direction=LT
}

%region_2.88._custom_call_lowering_rule.1 (Arg_0.10: s32[], Arg_1.10: s32[]) -> s32[] {
  %Arg_0.10 = s32[] parameter(0)
  %Arg_1.10 = s32[] parameter(1)
  ROOT %add.70 = s32[] add(%Arg_0.10, %Arg_1.10)
}

%region_6.187._custom_call_lowering_rule.1 (Arg_0.11: s32[], Arg_1.11: s32[]) -> s32[] {
  %Arg_0.11 = s32[] parameter(0)
  ROOT %Arg_1.11 = s32[] parameter(1)
}

%region_3.96._custom_call_lowering_rule.1 (Arg_0.12: pred[], Arg_1.12: pred[]) -> pred[] {
  %Arg_0.12 = pred[] parameter(0)
  ROOT %Arg_1.12 = pred[] parameter(1)
}

%region_4.105._custom_call_lowering_rule.1 (Arg_0.13: s32[], Arg_1.13: s32[]) -> s32[] {
  %Arg_0.13 = s32[] parameter(0)
  %Arg_1.13 = s32[] parameter(1)
  ROOT %add.71 = s32[] add(%Arg_0.13, %Arg_1.13)
}

%region_5.124._custom_call_lowering_rule.1 (Arg_0.14: s32[], Arg_1.14: s32[]) -> s32[] {
  %Arg_0.14 = s32[] parameter(0)
  %Arg_1.14 = s32[] parameter(1)
  ROOT %add.72 = s32[] add(%Arg_0.14, %Arg_1.14)
}

%region_0.39._custom_call_lowering_rule.1 (Arg_0.15: s32[], Arg_1.15: s32[]) -> s32[] {
  %Arg_0.15 = s32[] parameter(0)
  %Arg_1.15 = s32[] parameter(1)
  ROOT %add.73 = s32[] add(%Arg_0.15, %Arg_1.15)
}

%region_0.39._custom_call_lowering_rule.1.clone (Arg_0.65: s32[], Arg_1.65: s32[]) -> s32[] {
  %Arg_0.65 = s32[] parameter(0)
  %Arg_1.65 = s32[] parameter(1)
  ROOT %add.353 = s32[] add(%Arg_0.65, %Arg_1.65)
}

%region_7.195._custom_call_lowering_rule.1 (Arg_0.16: s32[], Arg_1.16: s32[]) -> s32[] {
  %Arg_0.16 = s32[] parameter(0)
  ROOT %Arg_1.16 = s32[] parameter(1)
}

%region_0.39._custom_call_lowering_rule.1.clone.1 (Arg_0.66: s32[], Arg_1.66: s32[]) -> s32[] {
  %Arg_0.66 = s32[] parameter(0)
  %Arg_1.66 = s32[] parameter(1)
  ROOT %add.354 = s32[] add(%Arg_0.66, %Arg_1.66)
}

%region_12.249._custom_call_lowering_rule.1 (Arg_0.21: s32[], Arg_1.21: s32[]) -> s32[] {
  %Arg_0.21 = s32[] parameter(0)
  ROOT %Arg_1.21 = s32[] parameter(1)
}

%region_22.1225 (Arg_0.1222: f32[], Arg_1.1223: f32[]) -> f32[] {
  %Arg_0.1222 = f32[] parameter(0)
  %Arg_1.1223 = f32[] parameter(1)
  ROOT %add.1224 = f32[] add(%Arg_0.1222, %Arg_1.1223)
}

%region_25.1319 (Arg_0.1316: f32[], Arg_1.1317: f32[]) -> f32[] {
  %Arg_0.1316 = f32[] parameter(0)
  %Arg_1.1317 = f32[] parameter(1)
  ROOT %add.1318 = f32[] add(%Arg_0.1316, %Arg_1.1317)
}

%region_29.1453 (Arg_0.1450: f32[], Arg_1.1451: f32[]) -> f32[] {
  %Arg_0.1450 = f32[] parameter(0)
  %Arg_1.1451 = f32[] parameter(1)
  ROOT %add.1452 = f32[] add(%Arg_0.1450, %Arg_1.1451)
}

%add.clone (x.1: bf16[], y.1: bf16[]) -> bf16[] {
  %x.1 = bf16[] parameter(0)
  %y.1 = bf16[] parameter(1)
  ROOT %add.78 = bf16[] add(%x.1, %y.1)
}

%add.1.clone (x.3: bf16[], y.3: bf16[]) -> bf16[] {
  %x.3 = bf16[] parameter(0)
  %y.3 = bf16[] parameter(1)
  ROOT %add.80 = bf16[] add(%x.3, %y.3)
}

%add.2.clone (x.5: bf16[], y.5: bf16[]) -> bf16[] {
  %x.5 = bf16[] parameter(0)
  %y.5 = bf16[] parameter(1)
  ROOT %add.83 = bf16[] add(%x.5, %y.5)
}

%add.3.clone (x.7: bf16[], y.7: bf16[]) -> bf16[] {
  %x.7 = bf16[] parameter(0)
  %y.7 = bf16[] parameter(1)
  ROOT %add.85 = bf16[] add(%x.7, %y.7)
}

%add.4.clone (x.9: bf16[], y.9: bf16[]) -> bf16[] {
  %x.9 = bf16[] parameter(0)
  %y.9 = bf16[] parameter(1)
  ROOT %add.88 = bf16[] add(%x.9, %y.9)
}

%add.5.clone (x.11: bf16[], y.11: bf16[]) -> bf16[] {
  %x.11 = bf16[] parameter(0)
  %y.11 = bf16[] parameter(1)
  ROOT %add.92 = bf16[] add(%x.11, %y.11)
}

%region_23.1301 (Arg_0.1298: bf16[], Arg_1.1299: bf16[]) -> bf16[] {
  %Arg_0.1298 = bf16[] parameter(0)
  %Arg_1.1299 = bf16[] parameter(1)
  ROOT %add.1300 = bf16[] add(%Arg_0.1298, %Arg_1.1299)
}

%region_23.1301.clone (Arg_0.22: bf16[], Arg_1.22: bf16[]) -> bf16[] {
  %Arg_0.22 = bf16[] parameter(0)
  %Arg_1.22 = bf16[] parameter(1)
  ROOT %add.93 = bf16[] add(%Arg_0.22, %Arg_1.22)
}

%region_27.1435 (Arg_0.1432: bf16[], Arg_1.1433: bf16[]) -> bf16[] {
  %Arg_0.1432 = bf16[] parameter(0)
  %Arg_1.1433 = bf16[] parameter(1)
  ROOT %add.1434 = bf16[] add(%Arg_0.1432, %Arg_1.1433)
}

%region_27.1435.clone (Arg_0.23: bf16[], Arg_1.23: bf16[]) -> bf16[] {
  %Arg_0.23 = bf16[] parameter(0)
  %Arg_1.23 = bf16[] parameter(1)
  ROOT %add.94 = bf16[] add(%Arg_0.23, %Arg_1.23)
}

%add.6.clone (x.13: bf16[], y.13: bf16[]) -> bf16[] {
  %x.13 = bf16[] parameter(0)
  %y.13 = bf16[] parameter(1)
  ROOT %add.96 = bf16[] add(%x.13, %y.13)
}

%add.7.clone (x.15: bf16[], y.15: bf16[]) -> bf16[] {
  %x.15 = bf16[] parameter(0)
  %y.15 = bf16[] parameter(1)
  ROOT %add.98 = bf16[] add(%x.15, %y.15)
}

%add.8.clone (x.17: bf16[], y.17: bf16[]) -> bf16[] {
  %x.17 = bf16[] parameter(0)
  %y.17 = bf16[] parameter(1)
  ROOT %add.100 = bf16[] add(%x.17, %y.17)
}

%add.9.clone (x.19: bf16[], y.19: bf16[]) -> bf16[] {
  %x.19 = bf16[] parameter(0)
  %y.19 = bf16[] parameter(1)
  ROOT %add.102 = bf16[] add(%x.19, %y.19)
}

%add.10.clone (x.21: bf16[], y.21: bf16[]) -> bf16[] {
  %x.21 = bf16[] parameter(0)
  %y.21 = bf16[] parameter(1)
  ROOT %add.105 = bf16[] add(%x.21, %y.21)
}

%add.11.clone (x.23: bf16[], y.23: bf16[]) -> bf16[] {
  %x.23 = bf16[] parameter(0)
  %y.23 = bf16[] parameter(1)
  ROOT %add.108 = bf16[] add(%x.23, %y.23)
}

%add.12.clone (x.25: bf16[], y.25: bf16[]) -> bf16[] {
  %x.25 = bf16[] parameter(0)
  %y.25 = bf16[] parameter(1)
  ROOT %add.110 = bf16[] add(%x.25, %y.25)
}

%add.13.clone (x.27: bf16[], y.27: bf16[]) -> bf16[] {
  %x.27 = bf16[] parameter(0)
  %y.27 = bf16[] parameter(1)
  ROOT %add.112 = bf16[] add(%x.27, %y.27)
}

%region_17.1506_spmd (param.3: (s32[], bf16[2,8192,8192], f32[80,64,28672], f32[80,64,28672], f32[80,28672,64], /*index=5*/f32[80,8192], f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], f32[80,64,64,128], /*index=10*/f32[80,64,8,128], f32[80,64,28672], f32[80,64,28672], f32[80,28672,64], f32[80,8192], /*index=15*/f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], f32[80,64,64,128], f32[80,64,8,128], /*index=20*/bf16[80,2,8192,8192], s32[2,8192], s32[2,8192])) -> (s32[], bf16[2,8192,8192], f32[80,64,28672], f32[80,64,28672], f32[80,28672,64], /*index=5*/f32[80,8192], f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], f32[80,64,64,128], /*index=10*/f32[80,64,8,128], f32[80,64,28672], f32[80,64,28672], f32[80,28672,64], f32[80,8192], /*index=15*/f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], f32[80,64,64,128], f32[80,64,8,128], /*index=20*/bf16[80,2,8192,8192], s32[2,8192], s32[2,8192]) {
  %param.3 = (s32[], bf16[2,8192,8192]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, /*index=5*/f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, /*index=10*/f32[80,64,8,128]{3,2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, f32[80,8192]{1,0}, /*index=15*/f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, f32[80,64,8,128]{3,2,1,0}, /*index=20*/bf16[80,2,8192,8192]{3,2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}) parameter(0)
  %get-tuple-element.40 = s32[] get-tuple-element(%param.3), index=0
  %constant.541 = s32[] constant(1)
  %add.113 = s32[] add(%get-tuple-element.40, %constant.541)
  %get-tuple-element.41 = bf16[2,8192,8192]{2,1,0} get-tuple-element(%param.3), index=1
  %copy.56 = bf16[2,8192,8192]{2,1,0} copy(%get-tuple-element.41)
  %get-tuple-element.42 = bf16[80,2,8192,8192]{3,2,1,0} get-tuple-element(%param.3), index=20
  %constant.542 = s32[] constant(79)
  %subtract.9 = s32[] subtract(%constant.542, %get-tuple-element.40)
  %constant.544 = s32[] constant(0)
  %dynamic-slice.19 = bf16[1,2,8192,8192]{3,2,1,0} dynamic-slice(%get-tuple-element.42, %subtract.9, %constant.544, %constant.544, %constant.544), dynamic_slice_sizes={1,2,8192,8192}
  %reshape.475 = bf16[2,8192,8192]{2,1,0} reshape(%dynamic-slice.19)
  %copy.57 = bf16[2,8192,8192]{2,1,0} copy(%reshape.475)
  %convert.127 = f32[2,8192,8192]{2,1,0} convert(%copy.57)
  %multiply.176 = f32[2,8192,8192]{2,1,0} multiply(%convert.127, %convert.127)
  %constant.547 = f32[] constant(0)
  %reduce.21 = f32[2,8192]{1,0} reduce(%multiply.176, %constant.547), dimensions={2}, to_apply=%region_18.951
  %constant.548 = f32[] constant(0.000122070312)
  %broadcast.489 = f32[2,8192]{1,0} broadcast(%constant.548), dimensions={}
  %multiply.177 = f32[2,8192]{1,0} multiply(%reduce.21, %broadcast.489)
  %constant.549 = f32[] constant(1e-05)
  %broadcast.490 = f32[2,8192]{1,0} broadcast(%constant.549), dimensions={}
  %add.114 = f32[2,8192]{1,0} add(%multiply.177, %broadcast.490)
  %reshape.476 = f32[2,8192,1]{2,1,0} reshape(%add.114)
  %rsqrt.8 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.476)
  %reshape.477 = f32[2,8192]{1,0} reshape(%rsqrt.8)
  %broadcast.491 = f32[2,8192,8192]{2,1,0} broadcast(%reshape.477), dimensions={0,1}
  %multiply.178 = f32[2,8192,8192]{2,1,0} multiply(%convert.127, %broadcast.491)
  %convert.128 = bf16[2,8192,8192]{2,1,0} convert(%multiply.178)
  %get-tuple-element.43 = f32[80,8192]{1,0} get-tuple-element(%param.3), index=15
  %dynamic-slice.20 = f32[1,8192]{1,0} dynamic-slice(%get-tuple-element.43, %subtract.9, %constant.544), dynamic_slice_sizes={1,8192}
  %convert.129 = bf16[1,8192]{1,0} convert(%dynamic-slice.20)
  %reshape.478 = bf16[8192]{0} reshape(%convert.129)
  %broadcast.492 = bf16[2,8192,8192]{2,1,0} broadcast(%reshape.478), dimensions={2}
  %multiply.179 = bf16[2,8192,8192]{2,1,0} multiply(%convert.128, %broadcast.492)
  %copy.58 = bf16[2,8192,8192]{2,1,0} copy(%multiply.179)
  %copy.59 = bf16[2,8192,8192]{2,1,0} copy(%copy.58)
  %get-tuple-element.44 = f32[80,64,64,128]{3,2,1,0} get-tuple-element(%param.3), index=18
  %dynamic-slice.21 = f32[1,64,64,128]{3,2,1,0} dynamic-slice(%get-tuple-element.44, %subtract.9, %constant.544, %constant.544, %constant.544), dynamic_slice_sizes={1,64,64,128}
  %convert.130 = bf16[1,64,64,128]{3,2,1,0} convert(%dynamic-slice.21)
  %reshape.479 = bf16[64,64,128]{2,1,0} reshape(%convert.130)
  %all-gather.7 = bf16[8192,64,128]{2,1,0} all-gather(%reshape.479), channel_id=12, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.39 = bf16[2,8192,64,128]{3,2,1,0} dot(%copy.59, %all-gather.7), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %convert.131 = f32[2,8192,64,128]{3,2,1,0} convert(%dot.39)
  %get-tuple-element.45 = s32[2,8192]{1,0} get-tuple-element(%param.3), index=22
  %convert.132 = f32[2,8192]{1,0} convert(%get-tuple-element.45)
  %broadcast.493 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.132), dimensions={0,1}
  %constant.555 = f32[] constant(1)
  %broadcast.494 = f32[128]{0} broadcast(%constant.555), dimensions={}
  %constant.556 = f32[] constant(6.28318548)
  %broadcast.495 = f32[128]{0} broadcast(%constant.556), dimensions={}
  %constant.557 = f32[] constant(500000)
  %broadcast.496 = f32[128]{0} broadcast(%constant.557), dimensions={}
  %iota.17 = s32[64]{0} iota(), iota_dimension=0
  %constant.558 = s32[] constant(2)
  %broadcast.497 = s32[64]{0} broadcast(%constant.558), dimensions={}
  %multiply.180 = s32[64]{0} multiply(%iota.17, %broadcast.497)
  %convert.133 = f32[64]{0} convert(%multiply.180)
  %constant.559 = f32[] constant(0.0078125)
  %broadcast.498 = f32[64]{0} broadcast(%constant.559), dimensions={}
  %multiply.181 = f32[64]{0} multiply(%convert.133, %broadcast.498)
  %broadcast.500 = f32[64,2]{1,0} broadcast(%multiply.181), dimensions={0}
  %reshape.480 = f32[128]{0} reshape(%broadcast.500)
  %power.10 = f32[128]{0} power(%broadcast.496, %reshape.480)
  %multiply.182 = f32[128]{0} multiply(%broadcast.495, %power.10)
  %constant.560 = f32[] constant(2048)
  %broadcast.502 = f32[128]{0} broadcast(%constant.560), dimensions={}
  %compare.96 = pred[128]{0} compare(%multiply.182, %broadcast.502), direction=LT
  %convert.134 = s32[128]{0} convert(%compare.96)
  %broadcast.503 = s32[128]{0} broadcast(%constant.541), dimensions={}
  %compare.97 = pred[128]{0} compare(%convert.134, %broadcast.503), direction=LT
  %constant.562 = f32[] constant(8192)
  %broadcast.504 = f32[128]{0} broadcast(%constant.562), dimensions={}
  %compare.98 = pred[128]{0} compare(%multiply.182, %broadcast.504), direction=GT
  %convert.135 = s32[128]{0} convert(%compare.98)
  %compare.99 = pred[128]{0} compare(%convert.135, %broadcast.503), direction=LT
  %negate.27 = f32[128]{0} negate(%reshape.480)
  %power.11 = f32[128]{0} power(%broadcast.496, %negate.27)
  %multiply.183 = f32[128]{0} multiply(%broadcast.504, %power.11)
  %constant.563 = f32[] constant(0.159154937)
  %broadcast.505 = f32[128]{0} broadcast(%constant.563), dimensions={}
  %multiply.184 = f32[128]{0} multiply(%multiply.183, %broadcast.505)
  %constant.564 = f32[] constant(-1)
  %broadcast.507 = f32[128]{0} broadcast(%constant.564), dimensions={}
  %add.115 = f32[128]{0} add(%multiply.184, %broadcast.507)
  %constant.565 = f32[] constant(0.333333343)
  %broadcast.509 = f32[128]{0} broadcast(%constant.565), dimensions={}
  %multiply.185 = f32[128]{0} multiply(%add.115, %broadcast.509)
  %subtract.10 = f32[128]{0} subtract(%broadcast.494, %multiply.185)
  %multiply.186 = f32[128]{0} multiply(%subtract.10, %power.11)
  %constant.566 = f32[] constant(0.125)
  %broadcast.510 = f32[128]{0} broadcast(%constant.566), dimensions={}
  %multiply.187 = f32[128]{0} multiply(%multiply.186, %broadcast.510)
  %multiply.188 = f32[128]{0} multiply(%multiply.185, %power.11)
  %add.116 = f32[128]{0} add(%multiply.187, %multiply.188)
  %multiply.189 = f32[128]{0} multiply(%power.11, %broadcast.510)
  %select.64 = f32[128]{0} select(%compare.99, %add.116, %multiply.189)
  %select.65 = f32[128]{0} select(%compare.97, %select.64, %power.11)
  %divide.49 = f32[128]{0} divide(%broadcast.494, %select.65)
  %broadcast.512 = f32[2,8192,1,128]{3,2,1,0} broadcast(%divide.49), dimensions={3}
  %divide.50 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.493, %broadcast.512)
  %cosine.2 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.50)
  %reshape.481 = f32[2,8192,128]{2,1,0} reshape(%cosine.2)
  %broadcast.513 = f32[2,8192,64,128]{3,2,1,0} broadcast(%reshape.481), dimensions={0,1,3}
  %multiply.190 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert.131, %broadcast.513)
  %iota.18 = s32[128]{0} iota(), iota_dimension=0
  %and.19 = s32[128]{0} and(%iota.18, %broadcast.503)
  %broadcast.515 = s32[128]{0} broadcast(%constant.544), dimensions={}
  %compare.100 = pred[128]{0} compare(%and.19, %broadcast.515), direction=LT
  %compare.101 = pred[128]{0} compare(%and.19, %broadcast.515), direction=NE
  %and.20 = pred[128]{0} and(%compare.100, %compare.101)
  %broadcast.516 = s32[128]{0} broadcast(%constant.558), dimensions={}
  %add.117 = s32[128]{0} add(%and.19, %broadcast.516)
  %select.66 = s32[128]{0} select(%and.20, %add.117, %and.19)
  %compare.102 = pred[128]{0} compare(%select.66, %broadcast.503), direction=LT
  %broadcast.518 = pred[2,8192,64,128]{3,2,1,0} broadcast(%compare.102), dimensions={3}
  %slice.33 = bf16[2,8192,64,127]{3,2,1,0} slice(%dot.39), slice={[0:2], [0:8192], [0:64], [1:128]}
  %slice.34 = bf16[2,8192,64,1]{3,2,1,0} slice(%dot.39), slice={[0:2], [0:8192], [0:64], [0:1]}
  %concatenate.12 = bf16[2,8192,64,128]{3,2,1,0} concatenate(%slice.33, %slice.34), dimensions={3}
  %slice.35 = bf16[2,8192,64,1]{3,2,1,0} slice(%dot.39), slice={[0:2], [0:8192], [0:64], [127:128]}
  %slice.36 = bf16[2,8192,64,127]{3,2,1,0} slice(%dot.39), slice={[0:2], [0:8192], [0:64], [0:127]}
  %concatenate.13 = bf16[2,8192,64,128]{3,2,1,0} concatenate(%slice.35, %slice.36), dimensions={3}
  %select.67 = bf16[2,8192,64,128]{3,2,1,0} select(%broadcast.518, %concatenate.12, %concatenate.13)
  %convert.136 = f32[2,8192,64,128]{3,2,1,0} convert(%select.67)
  %sine.2 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.50)
  %reshape.486 = f32[2,8192,128]{2,1,0} reshape(%sine.2)
  %broadcast.519 = f32[2,8192,64,128]{3,2,1,0} broadcast(%reshape.486), dimensions={0,1,3}
  %multiply.195 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert.136, %broadcast.519)
  %constant.609 = s32[2]{0} constant({-1, 1})
  %broadcast.520 = s32[64,2]{1,0} broadcast(%constant.609), dimensions={1}
  %reshape.487 = s32[128]{0} reshape(%broadcast.520)
  %convert.137 = f32[128]{0} convert(%reshape.487)
  %broadcast.521 = f32[2,8192,64,128]{3,2,1,0} broadcast(%convert.137), dimensions={3}
  %multiply.196 = f32[2,8192,64,128]{3,2,1,0} multiply(%multiply.195, %broadcast.521)
  %add.119 = f32[2,8192,64,128]{3,2,1,0} add(%multiply.190, %multiply.196)
  %convert.138 = bf16[2,8192,64,128]{3,2,1,0} convert(%add.119)
  %copy.60 = bf16[2,8192,64,128]{3,2,1,0} copy(%convert.138)
  %get-tuple-element.46 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.3), index=16
  %dynamic-slice.26 = f32[1,64,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.46, %subtract.9, %constant.544, %constant.544, %constant.544), dynamic_slice_sizes={1,64,8,128}
  %convert.139 = bf16[1,64,8,128]{3,2,1,0} convert(%dynamic-slice.26)
  %reshape.488 = bf16[64,8,128]{2,1,0} reshape(%convert.139)
  %all-gather.8 = bf16[8192,8,128]{2,1,0} all-gather(%reshape.488), channel_id=13, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.40 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.59, %all-gather.8), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %convert.140 = f32[2,8192,8,128]{3,2,1,0} convert(%dot.40)
  %broadcast.534 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.481), dimensions={0,1,3}
  %multiply.207 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.140, %broadcast.534)
  %broadcast.542 = pred[2,8192,8,128]{3,2,1,0} broadcast(%compare.102), dimensions={3}
  %slice.37 = bf16[2,8192,8,127]{3,2,1,0} slice(%dot.40), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.38 = bf16[2,8192,8,1]{3,2,1,0} slice(%dot.40), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.14 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.37, %slice.38), dimensions={3}
  %slice.39 = bf16[2,8192,8,1]{3,2,1,0} slice(%dot.40), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.40 = bf16[2,8192,8,127]{3,2,1,0} slice(%dot.40), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.15 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.39, %slice.40), dimensions={3}
  %select.71 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.542, %concatenate.14, %concatenate.15)
  %convert.145 = f32[2,8192,8,128]{3,2,1,0} convert(%select.71)
  %broadcast.543 = f32[2,8192,8,128]{3,2,1,0} broadcast(%reshape.486), dimensions={0,1,3}
  %multiply.212 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.145, %broadcast.543)
  %broadcast.545 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert.137), dimensions={3}
  %multiply.213 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.212, %broadcast.545)
  %add.124 = f32[2,8192,8,128]{3,2,1,0} add(%multiply.207, %multiply.213)
  %convert.147 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.124)
  %copy.62 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert.147)
  %get-tuple-element.47 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.3), index=19
  %dynamic-slice.31 = f32[1,64,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.47, %subtract.9, %constant.544, %constant.544, %constant.544), dynamic_slice_sizes={1,64,8,128}
  %convert.148 = bf16[1,64,8,128]{3,2,1,0} convert(%dynamic-slice.31)
  %reshape.498 = bf16[64,8,128]{2,1,0} reshape(%convert.148)
  %all-gather.9 = bf16[8192,8,128]{2,1,0} all-gather(%reshape.498), channel_id=14, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.41 = bf16[2,8192,8,128]{3,2,1,0} dot(%copy.59, %all-gather.9), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.63 = bf16[2,8192,8,128]{3,2,1,0} copy(%dot.41)
  %constant.666 = bf16[0]{0} constant({})
  %broadcast.555 = s32[3]{0} broadcast(%constant.544), dimensions={}
  %reshape.506 = s32[1]{0} reshape(%constant.558)
  %reshape.508 = s32[1]{0} reshape(%constant.544)
  %constant.687 = pred[1]{0} constant({0})
  %constant.688 = s32[1]{0} constant({2})
  %constant.689 = s32[1]{0} constant({0})
  %select.73 = s32[1]{0} select(%constant.687, %constant.688, %constant.689)
  %maximum.5 = s32[1]{0} maximum(%reshape.508, %select.73)
  %minimum.3 = s32[1]{0} minimum(%reshape.506, %maximum.5)
  %sort.2 = (s32[1]{0}, s32[1]{0}) sort(%minimum.3, %constant.689), dimensions={0}, is_stable=true, to_apply=%region_1.75._custom_call_lowering_rule.1
  %get-tuple-element.49 = s32[1]{0} get-tuple-element(%sort.2), index=1
  %compare.113 = pred[1]{0} compare(%get-tuple-element.49, %constant.689), direction=LT
  %constant.691 = s32[1]{0} constant({1})
  %add.125 = s32[1]{0} add(%get-tuple-element.49, %constant.691)
  %select.74 = s32[1]{0} select(%compare.113, %add.125, %get-tuple-element.49)
  %reshape.509 = s32[1,1]{1,0} reshape(%select.74)
  %scatter.0 = s32[1]{0} scatter(%minimum.3, %reshape.509, %constant.689), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_2.88._custom_call_lowering_rule.1
  %compare.114 = pred[1]{0} compare(%scatter.0, %constant.689), direction=LT
  %constant.692 = s32[1]{0} constant({3})
  %add.127 = s32[1]{0} add(%scatter.0, %constant.692)
  %select.75 = s32[1]{0} select(%compare.114, %add.127, %scatter.0)
  %reshape.510 = s32[1,1]{1,0} reshape(%select.75)
  %scatter.1 = s32[3]{0} scatter(%broadcast.555, %reshape.510, %constant.689), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_6.187._custom_call_lowering_rule.1
  %broadcast.556 = s32[2]{0} broadcast(%constant.544), dimensions={}
  %constant.694 = pred[] constant(true)
  %broadcast.560 = pred[3]{0} broadcast(%constant.694), dimensions={}
  %scatter.2 = pred[3]{0} scatter(%broadcast.560, %reshape.510, %constant.687), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_3.96._custom_call_lowering_rule.1
  %convert.151 = s32[3]{0} convert(%scatter.2)
  %reduce-window.0 = s32[3]{0} reduce-window(%convert.151, %constant.544), window={size=3 pad=2_0}, to_apply=%region_4.105._custom_call_lowering_rule.1
  %maximum.6 = s32[3]{0} maximum(%broadcast.555, %reduce-window.0)
  %compare.116 = pred[3]{0} compare(%maximum.6, %broadcast.555), direction=LT
  %broadcast.562 = s32[3]{0} broadcast(%constant.558), dimensions={}
  %add.129 = s32[3]{0} add(%maximum.6, %broadcast.562)
  %select.77 = s32[3]{0} select(%compare.116, %add.129, %maximum.6)
  %reshape.512 = s32[3,1]{1,0} reshape(%select.77)
  %broadcast.564 = s32[3]{0} broadcast(%constant.541), dimensions={}
  %scatter.3 = s32[2]{0} scatter(%broadcast.556, %reshape.512, %broadcast.564), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_5.124._custom_call_lowering_rule.1
  %reduce-window.1 = s32[2]{0} reduce-window(%scatter.3, %constant.544), window={size=2 pad=1_0}, to_apply=%region_0.39._custom_call_lowering_rule.1
  %sign.4 = s32[2]{0} sign(%reduce-window.1)
  %sign.5 = s32[] sign(%constant.541)
  %broadcast.565 = s32[2]{0} broadcast(%sign.5), dimensions={}
  %compare.118 = pred[2]{0} compare(%sign.4, %broadcast.565), direction=NE
  %broadcast.566 = s32[2]{0} broadcast(%constant.541), dimensions={}
  %remainder.12 = s32[2]{0} remainder(%reduce-window.1, %broadcast.566)
  %compare.119 = pred[2]{0} compare(%remainder.12, %broadcast.556), direction=NE
  %and.24 = pred[2]{0} and(%compare.118, %compare.119)
  %divide.53 = s32[2]{0} divide(%reduce-window.1, %broadcast.566)
  %subtract.12 = s32[2]{0} subtract(%divide.53, %broadcast.566)
  %select.78 = s32[2]{0} select(%and.24, %subtract.12, %divide.53)
  %constant.702 = s32[] constant(3)
  %compare.120 = pred[] compare(%constant.702, %constant.544), direction=EQ
  %select.79 = s32[] select(%compare.120, %constant.541, %constant.702)
  %broadcast.570 = s32[2]{0} broadcast(%select.79), dimensions={}
  %remainder.13 = s32[2]{0} remainder(%select.78, %broadcast.570)
  %compare.121 = pred[2]{0} compare(%remainder.13, %broadcast.556), direction=LT
  %compare.122 = pred[] compare(%select.79, %constant.544), direction=LT
  %broadcast.572 = pred[2]{0} broadcast(%compare.122), dimensions={}
  %compare.123 = pred[2]{0} compare(%compare.121, %broadcast.572), direction=NE
  %compare.124 = pred[2]{0} compare(%remainder.13, %broadcast.556), direction=NE
  %and.25 = pred[2]{0} and(%compare.123, %compare.124)
  %add.130 = s32[2]{0} add(%remainder.13, %broadcast.570)
  %select.80 = s32[2]{0} select(%and.25, %add.130, %remainder.13)
  %compare.125 = pred[2]{0} compare(%select.80, %broadcast.556), direction=LT
  %broadcast.574 = s32[2]{0} broadcast(%constant.702), dimensions={}
  %add.131 = s32[2]{0} add(%select.80, %broadcast.574)
  %select.81 = s32[2]{0} select(%compare.125, %add.131, %select.80)
  %reshape.513 = s32[2,1]{1,0} reshape(%select.81)
  %get-tuple-element.48 = s32[2,8192]{1,0} get-tuple-element(%param.3), index=21
  %broadcast.546 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.48), dimensions={0,1}
  %broadcast.547 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.48), dimensions={0,2}
  %compare.110 = pred[2,8192,8192]{2,1,0} compare(%broadcast.546, %broadcast.547), direction=EQ
  %iota.21 = s32[8192,8192]{1,0} iota(), iota_dimension=1
  %iota.22 = s32[8192,8192]{1,0} iota(), iota_dimension=0
  %compare.111 = pred[8192,8192]{1,0} compare(%iota.21, %iota.22), direction=LE
  %broadcast.548 = pred[2,8192,8192]{2,1,0} broadcast(%compare.111), dimensions={1,2}
  %and.23 = pred[2,8192,8192]{2,1,0} and(%compare.110, %broadcast.548)
  %broadcast.549 = f32[2,8192,8192]{2,1,0} broadcast(%constant.547), dimensions={}
  %constant.668 = f32[] constant(-2.38197633e+38)
  %broadcast.550 = f32[2,8192,8192]{2,1,0} broadcast(%constant.668), dimensions={}
  %select.72 = f32[2,8192,8192]{2,1,0} select(%and.23, %broadcast.549, %broadcast.550)
  %compare.112 = pred[2,8192,8192]{2,1,0} compare(%select.72, %broadcast.549), direction=NE
  %not.3 = pred[2,8192,8192]{2,1,0} not(%compare.112)
  %convert.149 = s32[2,8192,8192]{2,1,0} convert(%not.3)
  %reduce.22 = s32[2,8192]{1,0} reduce(%convert.149, %constant.544), dimensions={1}, to_apply=%region_19.1195
  %reshape.499 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.22)
  %slice.41 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.499), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.502 = s32[2,1]{1,0} reshape(%slice.41)
  %reshape.514 = s32[2]{0} reshape(%reshape.502)
  %compare.126 = pred[2]{0} compare(%reshape.514, %broadcast.556), direction=LT
  %constant.707 = s32[] constant(-1)
  %broadcast.575 = s32[2]{0} broadcast(%constant.707), dimensions={}
  %reduce-window.2 = s32[2]{0} reduce-window(%reshape.514, %constant.544), window={size=2 pad=1_0}, to_apply=%region_0.39._custom_call_lowering_rule.1.clone
  %select.82 = s32[2]{0} select(%compare.126, %broadcast.575, %reduce-window.2)
  %scatter.4 = s32[3]{0} scatter(%scatter.1, %reshape.513, %select.82), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_7.195._custom_call_lowering_rule.1
  %reduce.23 = s32[2,8192]{1,0} reduce(%convert.149, %constant.544), dimensions={2}, to_apply=%region_20.1203
  %reshape.503 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.23)
  %constant.681 = s32[] constant(-2147483648)
  %reduce.24 = s32[2,1]{1,0} reduce(%reshape.503, %constant.681), dimensions={3,2}, to_apply=%region_21.1208
  %reshape.522 = s32[2]{0} reshape(%reduce.24)
  %compare.139 = pred[2]{0} compare(%reshape.522, %broadcast.556), direction=LT
  %reduce-window.11 = s32[2]{0} reduce-window(%reshape.522, %constant.544), window={size=2 pad=1_0}, to_apply=%region_0.39._custom_call_lowering_rule.1.clone.1
  %select.94 = s32[2]{0} select(%compare.139, %broadcast.575, %reduce-window.11)
  %scatter.9 = s32[3]{0} scatter(%scatter.1, %reshape.513, %select.94), update_window_dims={}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%region_12.249._custom_call_lowering_rule.1
  %constant.682 = u32[] constant(0)
  %broadcast.553 = u32[512]{0} broadcast(%constant.682), dimensions={}
  %constant.683 = s32[256]{0} constant({0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510})
  %partition-id.3 = u32[] partition-id()
  %dynamic-slice.33 = s32[1]{0} dynamic-slice(%constant.683, %partition-id.3), dynamic_slice_sizes={1}
  %reshape.504 = s32[] reshape(%dynamic-slice.33)
  %dynamic-slice.34 = u32[2]{0} dynamic-slice(%broadcast.553, %reshape.504), dynamic_slice_sizes={2}
  %custom-call.40 = (bf16[2,8192,64,128]{3,2,1,0}, f32[2,64,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%copy.60, %copy.62, %copy.63, %constant.666, %scatter.4, /*index=5*/%scatter.9, %constant.666, %constant.666, %dynamic-slice.34), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,64,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}, u32[2]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 64 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.54 = bf16[2,8192,64,128]{3,2,1,0} get-tuple-element(%custom-call.40), index=0
  %copy.64 = bf16[2,8192,64,128]{3,2,1,0} copy(%get-tuple-element.54)
  %get-tuple-element.55 = f32[80,64,128,64]{3,2,1,0} get-tuple-element(%param.3), index=17
  %dynamic-slice.35 = f32[1,64,128,64]{3,2,1,0} dynamic-slice(%get-tuple-element.55, %subtract.9, %constant.544, %constant.544, %constant.544), dynamic_slice_sizes={1,64,128,64}
  %convert.153 = bf16[1,64,128,64]{3,2,1,0} convert(%dynamic-slice.35)
  %reshape.523 = bf16[64,128,64]{2,1,0} reshape(%convert.153)
  %all-gather.10 = bf16[64,128,8192]{2,1,0} all-gather(%reshape.523), channel_id=15, replica_groups=[2,128]<=[256], dimensions={2}, use_global_device_ids=true
  %dot.42 = bf16[2,8192,8192]{2,1,0} dot(%copy.64, %all-gather.10), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %copy.65 = bf16[2,8192,8192]{2,1,0} copy(%dot.42)
  %add.138 = bf16[2,8192,8192]{2,1,0} add(%copy.57, %copy.65)
  %convert.154 = f32[2,8192,8192]{2,1,0} convert(%add.138)
  %multiply.215 = f32[2,8192,8192]{2,1,0} multiply(%convert.154, %convert.154)
  %reduce.25 = f32[2,8192]{1,0} reduce(%multiply.215, %constant.547), dimensions={2}, to_apply=%region_22.1225
  %multiply.216 = f32[2,8192]{1,0} multiply(%reduce.25, %broadcast.489)
  %add.139 = f32[2,8192]{1,0} add(%multiply.216, %broadcast.490)
  %reshape.524 = f32[2,8192,1]{2,1,0} reshape(%add.139)
  %rsqrt.9 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.524)
  %reshape.525 = f32[2,8192]{1,0} reshape(%rsqrt.9)
  %broadcast.589 = f32[2,8192,8192]{2,1,0} broadcast(%reshape.525), dimensions={0,1}
  %multiply.217 = f32[2,8192,8192]{2,1,0} multiply(%convert.154, %broadcast.589)
  %convert.155 = bf16[2,8192,8192]{2,1,0} convert(%multiply.217)
  %get-tuple-element.56 = f32[80,8192]{1,0} get-tuple-element(%param.3), index=14
  %dynamic-slice.36 = f32[1,8192]{1,0} dynamic-slice(%get-tuple-element.56, %subtract.9, %constant.544), dynamic_slice_sizes={1,8192}
  %convert.156 = bf16[1,8192]{1,0} convert(%dynamic-slice.36)
  %reshape.526 = bf16[8192]{0} reshape(%convert.156)
  %broadcast.591 = bf16[2,8192,8192]{2,1,0} broadcast(%reshape.526), dimensions={2}
  %multiply.218 = bf16[2,8192,8192]{2,1,0} multiply(%convert.155, %broadcast.591)
  %copy.66 = bf16[2,8192,8192]{2,1,0} copy(%multiply.218)
  %get-tuple-element.57 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.3), index=11
  %dynamic-slice.37 = f32[1,64,28672]{2,1,0} dynamic-slice(%get-tuple-element.57, %subtract.9, %constant.544, %constant.544), dynamic_slice_sizes={1,64,28672}
  %convert.157 = bf16[1,64,28672]{2,1,0} convert(%dynamic-slice.37)
  %reshape.527 = bf16[64,28672]{1,0} reshape(%convert.157)
  %all-gather.11 = bf16[8192,28672]{1,0} all-gather(%reshape.527), channel_id=16, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.43 = bf16[2,8192,28672]{2,1,0} dot(%copy.66, %all-gather.11), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %constant.729 = bf16[] constant(1)
  %broadcast.593 = bf16[2,8192,28672]{2,1,0} broadcast(%constant.729), dimensions={}
  %negate.29 = bf16[2,8192,28672]{2,1,0} negate(%dot.43)
  %exponential.5 = bf16[2,8192,28672]{2,1,0} exponential(%negate.29)
  %add.140 = bf16[2,8192,28672]{2,1,0} add(%exponential.5, %broadcast.593)
  %divide.55 = bf16[2,8192,28672]{2,1,0} divide(%broadcast.593, %add.140)
  %multiply.219 = bf16[2,8192,28672]{2,1,0} multiply(%dot.43, %divide.55)
  %copy.67 = bf16[2,8192,8192]{2,1,0} copy(%copy.56)
  %get-tuple-element.58 = f32[80,28672,64]{2,1,0} get-tuple-element(%param.3), index=13
  %dynamic-slice.38 = f32[1,28672,64]{2,1,0} dynamic-slice(%get-tuple-element.58, %subtract.9, %constant.544, %constant.544), dynamic_slice_sizes={1,28672,64}
  %convert.158 = bf16[1,28672,64]{2,1,0} convert(%dynamic-slice.38)
  %reshape.528 = bf16[28672,64]{1,0} reshape(%convert.158)
  %all-gather.12 = bf16[28672,8192]{1,0} all-gather(%reshape.528), channel_id=17, replica_groups=[2,128]<=[256], dimensions={1}, use_global_device_ids=true
  %dot.44 = bf16[2,8192,28672]{2,1,0} dot(%copy.67, %all-gather.12), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %copy.68 = bf16[2,8192,28672]{2,1,0} copy(%dot.44)
  %multiply.220 = bf16[2,8192,28672]{2,1,0} multiply(%multiply.219, %copy.68)
  %get-tuple-element.59 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.3), index=12
  %dynamic-slice.39 = f32[1,64,28672]{2,1,0} dynamic-slice(%get-tuple-element.59, %subtract.9, %constant.544, %constant.544), dynamic_slice_sizes={1,64,28672}
  %convert.159 = bf16[1,64,28672]{2,1,0} convert(%dynamic-slice.39)
  %reshape.530 = bf16[64,28672]{1,0} reshape(%convert.159)
  %all-gather.13 = bf16[8192,28672]{1,0} all-gather(%reshape.530), channel_id=18, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.45 = bf16[2,8192,8192]{2,1,0} dot(%multiply.220, %all-gather.13), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %dot.46 = bf16[2,8192,28672]{2,1,0} dot(%copy.66, %all-gather.13), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %multiply.221 = bf16[2,8192,28672]{2,1,0} multiply(%copy.68, %dot.46)
  %multiply.222 = bf16[2,8192,28672]{2,1,0} multiply(%multiply.221, %divide.55)
  %multiply.223 = bf16[2,8192,28672]{2,1,0} multiply(%dot.43, %multiply.221)
  %subtract.14 = bf16[2,8192,28672]{2,1,0} subtract(%broadcast.593, %divide.55)
  %multiply.224 = bf16[2,8192,28672]{2,1,0} multiply(%divide.55, %subtract.14)
  %multiply.225 = bf16[2,8192,28672]{2,1,0} multiply(%multiply.223, %multiply.224)
  %add.141 = bf16[2,8192,28672]{2,1,0} add(%multiply.222, %multiply.225)
  %dot.47 = bf16[2,8192,8192]{2,1,0} dot(%add.141, %all-gather.11), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add.142 = bf16[2,8192,8192]{2,1,0} add(%dot.45, %dot.47)
  %copy.69 = bf16[2,8192,8192]{2,1,0} copy(%add.142)
  %multiply.226 = bf16[2,8192,8192]{2,1,0} multiply(%copy.69, %broadcast.591)
  %convert.160 = f32[2,8192,8192]{2,1,0} convert(%multiply.226)
  %multiply.227 = f32[2,8192,8192]{2,1,0} multiply(%convert.160, %broadcast.589)
  %multiply.228 = f32[2,8192,8192]{2,1,0} multiply(%convert.154, %convert.160)
  %reduce.26 = f32[2,8192]{1,0} reduce(%multiply.228, %constant.547), dimensions={2}, to_apply=%region_25.1319
  %reshape.533 = f32[2,8192,1]{2,1,0} reshape(%reduce.26)
  %divide.56 = f32[2,8192,1]{2,1,0} divide(%rsqrt.9, %reshape.524)
  %constant.737 = f32[] constant(-0.5)
  %broadcast.596 = f32[2,8192,1]{2,1,0} broadcast(%constant.737), dimensions={}
  %multiply.229 = f32[2,8192,1]{2,1,0} multiply(%divide.56, %broadcast.596)
  %multiply.230 = f32[2,8192,1]{2,1,0} multiply(%reshape.533, %multiply.229)
  %constant.738 = f32[] constant(0.000244140625)
  %broadcast.598 = f32[2,8192,1]{2,1,0} broadcast(%constant.738), dimensions={}
  %multiply.231 = f32[2,8192,1]{2,1,0} multiply(%multiply.230, %broadcast.598)
  %reshape.535 = f32[2,8192]{1,0} reshape(%multiply.231)
  %broadcast.600 = f32[2,8192,8192]{2,1,0} broadcast(%reshape.535), dimensions={0,1}
  %multiply.232 = f32[2,8192,8192]{2,1,0} multiply(%convert.154, %broadcast.600)
  %add.143 = f32[2,8192,8192]{2,1,0} add(%multiply.227, %multiply.232)
  %convert.161 = bf16[2,8192,8192]{2,1,0} convert(%add.143)
  %add.144 = bf16[2,8192,8192]{2,1,0} add(%copy.56, %convert.161)
  %get-tuple-element.60 = f32[2,64,8192,1]{3,2,1,0} get-tuple-element(%custom-call.40), index=1
  %get-tuple-element.61 = u32[2,4]{1,0} get-tuple-element(%custom-call.40), index=2
  %copy.70 = bf16[2,8192,8192]{2,1,0} copy(%add.144)
  %dot.48 = bf16[2,8192,64,128]{3,2,1,0} dot(%copy.70, %all-gather.10), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %copy.71 = bf16[2,8192,64,128]{3,2,1,0} copy(%dot.48)
  %custom-call.254 = (bf16[2,8192,64,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[1077936176]{0}) custom-call(%copy.60, %copy.62, %copy.63, %constant.666, %get-tuple-element.60, /*index=5*/%get-tuple-element.61, %get-tuple-element.54, %copy.71, %scatter.4, %scatter.9, /*index=10*/%constant.666, %constant.666), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,64,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,64,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,64,128]{3,2,1,0}, bf16[2,8192,64,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, bf16[0]{0}, bf16[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 64 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, head_dim = 128 : i64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.64 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.254), index=2
  %copy.72 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.64)
  %dot.49 = bf16[2,8192,8192]{2,1,0} dot(%copy.72, %all-gather.9), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.65 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%custom-call.254), index=1
  %copy.73 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.65)
  %convert.164 = f32[2,8192,8,128]{3,2,1,0} convert(%copy.73)
  %multiply.233 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.164, %broadcast.534)
  %convert.165 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.233)
  %compare.159 = pred[128]{0} compare(%select.66, %broadcast.503), direction=EQ
  %broadcast.632 = pred[2,8192,8,128]{3,2,1,0} broadcast(%compare.159), dimensions={3}
  %multiply.234 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert.164, %broadcast.545)
  %multiply.235 = f32[2,8192,8,128]{3,2,1,0} multiply(%multiply.234, %broadcast.543)
  %convert.166 = bf16[2,8192,8,128]{3,2,1,0} convert(%multiply.235)
  %constant.775 = bf16[] constant(0)
  %broadcast.635 = bf16[2,8192,8,128]{3,2,1,0} broadcast(%constant.775), dimensions={}
  %select.107 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.632, %convert.166, %broadcast.635)
  %slice.42 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.107), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.8 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.42, %constant.775), padding=0_0x0_0x0_0x0_1
  %add.150 = bf16[2,8192,8,128]{3,2,1,0} add(%convert.165, %pad.8)
  %slice.43 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.107), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.9 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.43, %constant.775), padding=0_0x0_0x0_0x127_0
  %add.151 = bf16[2,8192,8,128]{3,2,1,0} add(%add.150, %pad.9)
  %compare.160 = pred[128]{0} compare(%select.66, %broadcast.515), direction=EQ
  %broadcast.637 = pred[2,8192,8,128]{3,2,1,0} broadcast(%compare.160), dimensions={3}
  %select.108 = bf16[2,8192,8,128]{3,2,1,0} select(%broadcast.637, %convert.166, %broadcast.635)
  %slice.44 = bf16[2,8192,8,1]{3,2,1,0} slice(%select.108), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.10 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.44, %constant.775), padding=0_0x0_0x0_0x0_127
  %add.152 = bf16[2,8192,8,128]{3,2,1,0} add(%add.151, %pad.10)
  %slice.45 = bf16[2,8192,8,127]{3,2,1,0} slice(%select.108), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.11 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.45, %constant.775), padding=0_0x0_0x0_0x1_0
  %add.153 = bf16[2,8192,8,128]{3,2,1,0} add(%add.152, %pad.11)
  %dot.50 = bf16[2,8192,8192]{2,1,0} dot(%add.153, %all-gather.8), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add.154 = bf16[2,8192,8192]{2,1,0} add(%dot.49, %dot.50)
  %copy.74 = bf16[2,8192,8192]{2,1,0} copy(%add.154)
  %get-tuple-element.66 = bf16[2,8192,64,128]{3,2,1,0} get-tuple-element(%custom-call.254), index=0
  %copy.75 = bf16[2,8192,64,128]{3,2,1,0} copy(%get-tuple-element.66)
  %convert.167 = f32[2,8192,64,128]{3,2,1,0} convert(%copy.75)
  %multiply.244 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert.167, %broadcast.513)
  %convert.168 = bf16[2,8192,64,128]{3,2,1,0} convert(%multiply.244)
  %broadcast.640 = pred[2,8192,64,128]{3,2,1,0} broadcast(%compare.159), dimensions={3}
  %multiply.245 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert.167, %broadcast.521)
  %multiply.246 = f32[2,8192,64,128]{3,2,1,0} multiply(%multiply.245, %broadcast.519)
  %convert.169 = bf16[2,8192,64,128]{3,2,1,0} convert(%multiply.246)
  %broadcast.643 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%constant.775), dimensions={}
  %select.109 = bf16[2,8192,64,128]{3,2,1,0} select(%broadcast.640, %convert.169, %broadcast.643)
  %slice.46 = bf16[2,8192,64,127]{3,2,1,0} slice(%select.109), slice={[0:2], [0:8192], [0:64], [1:128]}
  %pad.12 = bf16[2,8192,64,128]{3,2,1,0} pad(%slice.46, %constant.775), padding=0_0x0_0x0_0x0_1
  %add.155 = bf16[2,8192,64,128]{3,2,1,0} add(%convert.168, %pad.12)
  %slice.47 = bf16[2,8192,64,1]{3,2,1,0} slice(%select.109), slice={[0:2], [0:8192], [0:64], [0:1]}
  %pad.13 = bf16[2,8192,64,128]{3,2,1,0} pad(%slice.47, %constant.775), padding=0_0x0_0x0_0x127_0
  %add.156 = bf16[2,8192,64,128]{3,2,1,0} add(%add.155, %pad.13)
  %broadcast.645 = pred[2,8192,64,128]{3,2,1,0} broadcast(%compare.160), dimensions={3}
  %select.110 = bf16[2,8192,64,128]{3,2,1,0} select(%broadcast.645, %convert.169, %broadcast.643)
  %slice.48 = bf16[2,8192,64,1]{3,2,1,0} slice(%select.110), slice={[0:2], [0:8192], [0:64], [127:128]}
  %pad.14 = bf16[2,8192,64,128]{3,2,1,0} pad(%slice.48, %constant.775), padding=0_0x0_0x0_0x0_127
  %add.157 = bf16[2,8192,64,128]{3,2,1,0} add(%add.156, %pad.14)
  %slice.49 = bf16[2,8192,64,127]{3,2,1,0} slice(%select.110), slice={[0:2], [0:8192], [0:64], [0:127]}
  %pad.15 = bf16[2,8192,64,128]{3,2,1,0} pad(%slice.49, %constant.775), padding=0_0x0_0x0_0x1_0
  %add.158 = bf16[2,8192,64,128]{3,2,1,0} add(%add.157, %pad.15)
  %dot.51 = bf16[2,8192,8192]{2,1,0} dot(%add.158, %all-gather.7), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %copy.76 = bf16[2,8192,8192]{2,1,0} copy(%dot.51)
  %add.159 = bf16[2,8192,8192]{2,1,0} add(%copy.74, %copy.76)
  %copy.77 = bf16[2,8192,8192]{2,1,0} copy(%add.159)
  %multiply.255 = bf16[2,8192,8192]{2,1,0} multiply(%copy.77, %broadcast.492)
  %convert.170 = f32[2,8192,8192]{2,1,0} convert(%multiply.255)
  %multiply.256 = f32[2,8192,8192]{2,1,0} multiply(%convert.170, %broadcast.491)
  %multiply.257 = f32[2,8192,8192]{2,1,0} multiply(%convert.127, %convert.170)
  %reduce.27 = f32[2,8192]{1,0} reduce(%multiply.257, %constant.547), dimensions={2}, to_apply=%region_29.1453
  %reshape.578 = f32[2,8192,1]{2,1,0} reshape(%reduce.27)
  %divide.59 = f32[2,8192,1]{2,1,0} divide(%rsqrt.8, %reshape.476)
  %multiply.258 = f32[2,8192,1]{2,1,0} multiply(%divide.59, %broadcast.596)
  %multiply.259 = f32[2,8192,1]{2,1,0} multiply(%reshape.578, %multiply.258)
  %multiply.260 = f32[2,8192,1]{2,1,0} multiply(%multiply.259, %broadcast.598)
  %reshape.579 = f32[2,8192]{1,0} reshape(%multiply.260)
  %broadcast.649 = f32[2,8192,8192]{2,1,0} broadcast(%reshape.579), dimensions={0,1}
  %multiply.261 = f32[2,8192,8192]{2,1,0} multiply(%convert.127, %broadcast.649)
  %add.160 = f32[2,8192,8192]{2,1,0} add(%multiply.256, %multiply.261)
  %convert.171 = bf16[2,8192,8192]{2,1,0} convert(%add.160)
  %add.161 = bf16[2,8192,8192]{2,1,0} add(%add.144, %convert.171)
  %copy.78 = bf16[2,8192,8192]{2,1,0} copy(%add.161)
  %get-tuple-element.67 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.3), index=2
  %dot.52 = bf16[8192,28672]{1,0} dot(%copy.66, %add.141), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce = bf16[8192,28672]{1,0} all-reduce(%dot.52), channel_id=19, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.clone
  %constant.963 = s32[128]{0} constant({0, 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432, 2496, 2560, 2624, 2688, 2752, 2816, 2880, 2944, 3008, 3072, 3136, 3200, 3264, 3328, 3392, 3456, 3520, 3584, 3648, 3712, 3776, 3840, 3904, 3968, 4032, 4096, 4160, 4224, 4288, 4352, 4416, 4480, 4544, 4608, 4672, 4736, 4800, 4864, 4928, 4992, 5056, 5120, 5184, 5248, 5312, 5376, 5440, 5504, 5568, 5632, 5696, 5760, 5824, 5888, 5952, 6016, 6080, 6144, 6208, 6272, 6336, 6400, 6464, 6528, 6592, 6656, 6720, 6784, 6848, 6912, 6976, 7040, 7104, 7168, 7232, 7296, 7360, 7424, 7488, 7552, 7616, 7680, 7744, 7808, 7872, 7936, 8000, 8064, 8128})
  %constant.962 = u32[256]{0} constant({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127})
  %dynamic-slice.57 = u32[1]{0} dynamic-slice(%constant.962, %partition-id.3), dynamic_slice_sizes={1}
  %reshape.581 = u32[] reshape(%dynamic-slice.57)
  %dynamic-slice.58 = s32[1]{0} dynamic-slice(%constant.963, %reshape.581), dynamic_slice_sizes={1}
  %reshape.582 = s32[] reshape(%dynamic-slice.58)
  %dynamic-slice.59 = bf16[64,28672]{1,0} dynamic-slice(%all-reduce, %reshape.582, %constant.544), dynamic_slice_sizes={64,28672}
  %all-reduce.1 = bf16[64,28672]{1,0} all-reduce(%dynamic-slice.59), channel_id=20, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.1.clone
  %convert.172 = f32[64,28672]{0,1} convert(%all-reduce.1)
  %reshape.583 = f32[1,64,28672]{2,1,0} reshape(%convert.172)
  %dynamic-update-slice.1 = f32[80,64,28672]{2,1,0} dynamic-update-slice(%get-tuple-element.67, %reshape.583, %subtract.9, %constant.544, %constant.544)
  %get-tuple-element.68 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.3), index=3
  %dot.53 = bf16[8192,28672]{1,0} dot(%copy.66, %multiply.220), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.2 = bf16[8192,28672]{1,0} all-reduce(%dot.53), channel_id=21, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.2.clone
  %dynamic-slice.63 = bf16[64,28672]{1,0} dynamic-slice(%all-reduce.2, %reshape.582, %constant.544), dynamic_slice_sizes={64,28672}
  %all-reduce.3 = bf16[64,28672]{1,0} all-reduce(%dynamic-slice.63), channel_id=22, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.3.clone
  %convert.173 = f32[64,28672]{0,1} convert(%all-reduce.3)
  %reshape.588 = f32[1,64,28672]{2,1,0} reshape(%convert.173)
  %dynamic-update-slice.2 = f32[80,64,28672]{2,1,0} dynamic-update-slice(%get-tuple-element.68, %reshape.588, %subtract.9, %constant.544, %constant.544)
  %get-tuple-element.69 = f32[80,28672,64]{2,1,0} get-tuple-element(%param.3), index=4
  %multiply.262 = bf16[2,8192,28672]{2,1,0} multiply(%multiply.219, %dot.46)
  %copy.79 = bf16[2,8192,28672]{2,1,0} copy(%multiply.262)
  %dot.54 = bf16[28672,8192]{1,0} dot(%copy.79, %copy.67), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.4 = bf16[28672,8192]{1,0} all-reduce(%dot.54), channel_id=23, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.4.clone
  %dynamic-slice.67 = bf16[28672,64]{1,0} dynamic-slice(%all-reduce.4, %constant.544, %reshape.582), dynamic_slice_sizes={28672,64}
  %all-reduce.5 = bf16[28672,64]{1,0} all-reduce(%dynamic-slice.67), channel_id=24, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.5.clone
  %convert.174 = f32[28672,64]{0,1} convert(%all-reduce.5)
  %reshape.593 = f32[1,28672,64]{2,1,0} reshape(%convert.174)
  %dynamic-update-slice.3 = f32[80,28672,64]{2,1,0} dynamic-update-slice(%get-tuple-element.69, %reshape.593, %subtract.9, %constant.544, %constant.544)
  %get-tuple-element.70 = f32[80,8192]{1,0} get-tuple-element(%param.3), index=5
  %multiply.263 = bf16[2,8192,8192]{2,1,0} multiply(%convert.155, %copy.69)
  %reduce.28 = bf16[8192]{0} reduce(%multiply.263, %constant.775), dimensions={0,1}, to_apply=%region_23.1301
  %all-reduce.6 = bf16[8192]{0} all-reduce(%reduce.28), channel_id=25, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_23.1301.clone
  %convert.175 = f32[8192]{0} convert(%all-reduce.6)
  %reshape.594 = f32[1,8192]{1,0} reshape(%convert.175)
  %dynamic-update-slice.4 = f32[80,8192]{1,0} dynamic-update-slice(%get-tuple-element.70, %reshape.594, %subtract.9, %constant.544)
  %get-tuple-element.71 = f32[80,8192]{1,0} get-tuple-element(%param.3), index=6
  %multiply.264 = bf16[2,8192,8192]{2,1,0} multiply(%convert.128, %copy.77)
  %reduce.29 = bf16[8192]{0} reduce(%multiply.264, %constant.775), dimensions={0,1}, to_apply=%region_27.1435
  %all-reduce.7 = bf16[8192]{0} all-reduce(%reduce.29), channel_id=26, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_27.1435.clone
  %convert.176 = f32[8192]{0} convert(%all-reduce.7)
  %reshape.595 = f32[1,8192]{1,0} reshape(%convert.176)
  %dynamic-update-slice.5 = f32[80,8192]{1,0} dynamic-update-slice(%get-tuple-element.71, %reshape.595, %subtract.9, %constant.544)
  %get-tuple-element.72 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.3), index=7
  %dot.55 = bf16[8,128,8192]{2,1,0} dot(%add.153, %copy.59), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.8 = bf16[8,128,8192]{2,1,0} all-reduce(%dot.55), channel_id=27, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.6.clone
  %dynamic-slice.71 = bf16[8,128,64]{2,1,0} dynamic-slice(%all-reduce.8, %constant.544, %constant.544, %reshape.582), dynamic_slice_sizes={8,128,64}
  %all-reduce.9 = bf16[8,128,64]{2,1,0} all-reduce(%dynamic-slice.71), channel_id=28, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.7.clone
  %convert.177 = f32[8,128,64]{2,1,0} convert(%all-reduce.9)
  %transpose.19 = f32[64,8,128]{0,2,1} transpose(%convert.177), dimensions={2,0,1}
  %reshape.601 = f32[1,64,8,128]{3,2,1,0} reshape(%transpose.19)
  %dynamic-update-slice.6 = f32[80,64,8,128]{3,2,1,0} dynamic-update-slice(%get-tuple-element.72, %reshape.601, %subtract.9, %constant.544, %constant.544, /*index=5*/%constant.544)
  %get-tuple-element.73 = f32[80,64,128,64]{3,2,1,0} get-tuple-element(%param.3), index=8
  %dot.56 = bf16[8192,64,128]{2,1,0} dot(%copy.70, %copy.64), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.10 = bf16[8192,64,128]{2,1,0} all-reduce(%dot.56), channel_id=29, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.8.clone
  %dynamic-slice.75 = bf16[64,64,128]{2,1,0} dynamic-slice(%all-reduce.10, %reshape.582, %constant.544, %constant.544), dynamic_slice_sizes={64,64,128}
  %all-reduce.11 = bf16[64,64,128]{2,1,0} all-reduce(%dynamic-slice.75), channel_id=30, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.9.clone
  %convert.178 = f32[64,64,128]{2,1,0} convert(%all-reduce.11)
  %transpose.20 = f32[64,128,64]{1,0,2} transpose(%convert.178), dimensions={1,2,0}
  %reshape.605 = f32[1,64,128,64]{3,2,1,0} reshape(%transpose.20)
  %dynamic-update-slice.7 = f32[80,64,128,64]{3,2,1,0} dynamic-update-slice(%get-tuple-element.73, %reshape.605, %subtract.9, %constant.544, %constant.544, /*index=5*/%constant.544)
  %get-tuple-element.74 = f32[80,64,64,128]{3,2,1,0} get-tuple-element(%param.3), index=9
  %dot.57 = bf16[64,128,8192]{2,1,0} dot(%add.158, %copy.59), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.12 = bf16[64,128,8192]{2,1,0} all-reduce(%dot.57), channel_id=31, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.10.clone
  %dynamic-slice.79 = bf16[64,128,64]{2,1,0} dynamic-slice(%all-reduce.12, %constant.544, %constant.544, %reshape.582), dynamic_slice_sizes={64,128,64}
  %all-reduce.13 = bf16[64,128,64]{2,1,0} all-reduce(%dynamic-slice.79), channel_id=32, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.11.clone
  %convert.179 = f32[64,128,64]{2,1,0} convert(%all-reduce.13)
  %transpose.21 = f32[64,64,128]{0,2,1} transpose(%convert.179), dimensions={2,0,1}
  %reshape.609 = f32[1,64,64,128]{3,2,1,0} reshape(%transpose.21)
  %dynamic-update-slice.8 = f32[80,64,64,128]{3,2,1,0} dynamic-update-slice(%get-tuple-element.74, %reshape.609, %subtract.9, %constant.544, %constant.544, /*index=5*/%constant.544)
  %get-tuple-element.75 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.3), index=10
  %dot.58 = bf16[8,128,8192]{2,1,0} dot(%copy.72, %copy.59), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.14 = bf16[8,128,8192]{2,1,0} all-reduce(%dot.58), channel_id=33, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.12.clone
  %dynamic-slice.83 = bf16[8,128,64]{2,1,0} dynamic-slice(%all-reduce.14, %constant.544, %constant.544, %reshape.582), dynamic_slice_sizes={8,128,64}
  %all-reduce.15 = bf16[8,128,64]{2,1,0} all-reduce(%dynamic-slice.83), channel_id=34, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.13.clone
  %convert.180 = f32[8,128,64]{2,1,0} convert(%all-reduce.15)
  %transpose.22 = f32[64,8,128]{0,2,1} transpose(%convert.180), dimensions={2,0,1}
  %reshape.613 = f32[1,64,8,128]{3,2,1,0} reshape(%transpose.22)
  %dynamic-update-slice.9 = f32[80,64,8,128]{3,2,1,0} dynamic-update-slice(%get-tuple-element.75, %reshape.613, %subtract.9, %constant.544, %constant.544, /*index=5*/%constant.544)
  ROOT %tuple.6 = (s32[], bf16[2,8192,8192]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, /*index=5*/f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, /*index=10*/f32[80,64,8,128]{3,2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, f32[80,8192]{1,0}, /*index=15*/f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, f32[80,64,8,128]{3,2,1,0}, /*index=20*/bf16[80,2,8192,8192]{3,2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}) tuple(%add.113, %copy.78, %dynamic-update-slice.1, %dynamic-update-slice.2, %dynamic-update-slice.3, /*index=5*/%dynamic-update-slice.4, %dynamic-update-slice.5, %dynamic-update-slice.6, %dynamic-update-slice.7, %dynamic-update-slice.8, /*index=10*/%dynamic-update-slice.9, %get-tuple-element.57, %get-tuple-element.59, %get-tuple-element.58, %get-tuple-element.56, /*index=15*/%get-tuple-element.43, %get-tuple-element.46, %get-tuple-element.55, %get-tuple-element.44, %get-tuple-element.47, /*index=20*/%get-tuple-element.42, %get-tuple-element.48, %get-tuple-element.45)
}

%region_31.1533_spmd (param.2: (s32[], bf16[2,8192,8192], f32[80,64,28672], f32[80,64,28672], f32[80,28672,64], /*index=5*/f32[80,8192], f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], f32[80,64,64,128], /*index=10*/f32[80,64,8,128], f32[80,64,28672], f32[80,64,28672], f32[80,28672,64], f32[80,8192], /*index=15*/f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], f32[80,64,64,128], f32[80,64,8,128], /*index=20*/bf16[80,2,8192,8192], s32[2,8192], s32[2,8192])) -> pred[] {
  %param.2 = (s32[], bf16[2,8192,8192]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, /*index=5*/f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, /*index=10*/f32[80,64,8,128]{3,2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, f32[80,8192]{1,0}, /*index=15*/f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, f32[80,64,8,128]{3,2,1,0}, /*index=20*/bf16[80,2,8192,8192]{3,2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}) parameter(0)
  %get-tuple-element.39 = s32[] get-tuple-element(%param.2), index=0
  %constant.531 = s32[] constant(80)
  ROOT %compare.93 = pred[] compare(%get-tuple-element.39, %constant.531), direction=LT
}

%region_33.1570 (Arg_0.1567: f32[], Arg_1.1568: f32[]) -> f32[] {
  %Arg_0.1567 = f32[] parameter(0)
  %Arg_1.1568 = f32[] parameter(1)
  ROOT %add.1569 = f32[] add(%Arg_0.1567, %Arg_1.1568)
}

%region_33.1570.clone (Arg_0.24: f32[], Arg_1.24: f32[]) -> f32[] {
  %Arg_0.24 = f32[] parameter(0)
  %Arg_1.24 = f32[] parameter(1)
  ROOT %add.162 = f32[] add(%Arg_0.24, %Arg_1.24)
}

%region_34.1577 (Arg_0.1574: f32[], Arg_1.1575: f32[]) -> f32[] {
  %Arg_0.1574 = f32[] parameter(0)
  %Arg_1.1575 = f32[] parameter(1)
  ROOT %add.1576 = f32[] add(%Arg_0.1574, %Arg_1.1575)
}

%region_34.1577.clone (Arg_0.25: f32[], Arg_1.25: f32[]) -> f32[] {
  %Arg_0.25 = f32[] parameter(0)
  %Arg_1.25 = f32[] parameter(1)
  ROOT %add.163 = f32[] add(%Arg_0.25, %Arg_1.25)
}

%region_35.1584 (Arg_0.1581: f32[], Arg_1.1582: f32[]) -> f32[] {
  %Arg_0.1581 = f32[] parameter(0)
  %Arg_1.1582 = f32[] parameter(1)
  ROOT %add.1583 = f32[] add(%Arg_0.1581, %Arg_1.1582)
}

%region_35.1584.clone (Arg_0.26: f32[], Arg_1.26: f32[]) -> f32[] {
  %Arg_0.26 = f32[] parameter(0)
  %Arg_1.26 = f32[] parameter(1)
  ROOT %add.164 = f32[] add(%Arg_0.26, %Arg_1.26)
}

%region_36.1591 (Arg_0.1588: f32[], Arg_1.1589: f32[]) -> f32[] {
  %Arg_0.1588 = f32[] parameter(0)
  %Arg_1.1589 = f32[] parameter(1)
  ROOT %add.1590 = f32[] add(%Arg_0.1588, %Arg_1.1589)
}

%region_37.1598 (Arg_0.1595: f32[], Arg_1.1596: f32[]) -> f32[] {
  %Arg_0.1595 = f32[] parameter(0)
  %Arg_1.1596 = f32[] parameter(1)
  ROOT %add.1597 = f32[] add(%Arg_0.1595, %Arg_1.1596)
}

%region_38.1605 (Arg_0.1602: f32[], Arg_1.1603: f32[]) -> f32[] {
  %Arg_0.1602 = f32[] parameter(0)
  %Arg_1.1603 = f32[] parameter(1)
  ROOT %add.1604 = f32[] add(%Arg_0.1602, %Arg_1.1603)
}

%region_38.1605.clone (Arg_0.27: f32[], Arg_1.27: f32[]) -> f32[] {
  %Arg_0.27 = f32[] parameter(0)
  %Arg_1.27 = f32[] parameter(1)
  ROOT %add.165 = f32[] add(%Arg_0.27, %Arg_1.27)
}

%region_39.1612 (Arg_0.1609: f32[], Arg_1.1610: f32[]) -> f32[] {
  %Arg_0.1609 = f32[] parameter(0)
  %Arg_1.1610 = f32[] parameter(1)
  ROOT %add.1611 = f32[] add(%Arg_0.1609, %Arg_1.1610)
}

%region_39.1612.clone (Arg_0.28: f32[], Arg_1.28: f32[]) -> f32[] {
  %Arg_0.28 = f32[] parameter(0)
  %Arg_1.28 = f32[] parameter(1)
  ROOT %add.166 = f32[] add(%Arg_0.28, %Arg_1.28)
}

%region_40.1619 (Arg_0.1616: f32[], Arg_1.1617: f32[]) -> f32[] {
  %Arg_0.1616 = f32[] parameter(0)
  %Arg_1.1617 = f32[] parameter(1)
  ROOT %add.1618 = f32[] add(%Arg_0.1616, %Arg_1.1617)
}

%region_40.1619.clone (Arg_0.29: f32[], Arg_1.29: f32[]) -> f32[] {
  %Arg_0.29 = f32[] parameter(0)
  %Arg_1.29 = f32[] parameter(1)
  ROOT %add.167 = f32[] add(%Arg_0.29, %Arg_1.29)
}

%region_41.1626 (Arg_0.1623: f32[], Arg_1.1624: f32[]) -> f32[] {
  %Arg_0.1623 = f32[] parameter(0)
  %Arg_1.1624 = f32[] parameter(1)
  ROOT %add.1625 = f32[] add(%Arg_0.1623, %Arg_1.1624)
}

%region_41.1626.clone (Arg_0.30: f32[], Arg_1.30: f32[]) -> f32[] {
  %Arg_0.30 = f32[] parameter(0)
  %Arg_1.30 = f32[] parameter(1)
  ROOT %add.168 = f32[] add(%Arg_0.30, %Arg_1.30)
}

%add.14.clone (x.29: bf16[], y.29: bf16[]) -> bf16[] {
  %x.29 = bf16[] parameter(0)
  %y.29 = bf16[] parameter(1)
  ROOT %add.170 = bf16[] add(%x.29, %y.29)
}

%add.15.clone (x.31: bf16[], y.31: bf16[]) -> bf16[] {
  %x.31 = bf16[] parameter(0)
  %y.31 = bf16[] parameter(1)
  ROOT %add.172 = bf16[] add(%x.31, %y.31)
}

%region_42.1633 (Arg_0.1630: f32[], Arg_1.1631: f32[]) -> f32[] {
  %Arg_0.1630 = f32[] parameter(0)
  %Arg_1.1631 = f32[] parameter(1)
  ROOT %add.1632 = f32[] add(%Arg_0.1630, %Arg_1.1631)
}

%region_42.1633.clone (Arg_0.31: f32[], Arg_1.31: f32[]) -> f32[] {
  %Arg_0.31 = f32[] parameter(0)
  %Arg_1.31 = f32[] parameter(1)
  ROOT %add.173 = f32[] add(%Arg_0.31, %Arg_1.31)
}

%add.16.clone (x.33: bf16[], y.33: bf16[]) -> bf16[] {
  %x.33 = bf16[] parameter(0)
  %y.33 = bf16[] parameter(1)
  ROOT %add.175 = bf16[] add(%x.33, %y.33)
}

%add.17.clone (x.35: bf16[], y.35: bf16[]) -> bf16[] {
  %x.35 = bf16[] parameter(0)
  %y.35 = bf16[] parameter(1)
  ROOT %add.177 = bf16[] add(%x.35, %y.35)
}

%region_43.1640 (Arg_0.1637: f32[], Arg_1.1638: f32[]) -> f32[] {
  %Arg_0.1637 = f32[] parameter(0)
  %Arg_1.1638 = f32[] parameter(1)
  ROOT %add.1639 = f32[] add(%Arg_0.1637, %Arg_1.1638)
}

%region_43.1640.clone (Arg_0.32: f32[], Arg_1.32: f32[]) -> f32[] {
  %Arg_0.32 = f32[] parameter(0)
  %Arg_1.32 = f32[] parameter(1)
  ROOT %add.178 = f32[] add(%Arg_0.32, %Arg_1.32)
}

%region_44.1975 (Arg_0.1972: f32[], Arg_1.1973: f32[]) -> f32[] {
  %Arg_0.1972 = f32[] parameter(0)
  %Arg_1.1973 = f32[] parameter(1)
  ROOT %add.1974 = f32[] add(%Arg_0.1972, %Arg_1.1973)
}

%region_45.1981 (Arg_0.1978: f32[], Arg_1.1979: f32[]) -> f32[] {
  %Arg_0.1978 = f32[] parameter(0)
  %Arg_1.1979 = f32[] parameter(1)
  ROOT %add.1980 = f32[] add(%Arg_0.1978, %Arg_1.1979)
}

%region_45.1981.clone (Arg_0.33: f32[], Arg_1.33: f32[]) -> f32[] {
  %Arg_0.33 = f32[] parameter(0)
  %Arg_1.33 = f32[] parameter(1)
  ROOT %add.179 = f32[] add(%Arg_0.33, %Arg_1.33)
}

%region_46.1988 (Arg_0.1985: f32[], Arg_1.1986: f32[]) -> f32[] {
  %Arg_0.1985 = f32[] parameter(0)
  %Arg_1.1986 = f32[] parameter(1)
  ROOT %add.1987 = f32[] add(%Arg_0.1985, %Arg_1.1986)
}

%region_46.1988.clone (Arg_0.34: f32[], Arg_1.34: f32[]) -> f32[] {
  %Arg_0.34 = f32[] parameter(0)
  %Arg_1.34 = f32[] parameter(1)
  ROOT %add.180 = f32[] add(%Arg_0.34, %Arg_1.34)
}

%region_47.1995 (Arg_0.1992: f32[], Arg_1.1993: f32[]) -> f32[] {
  %Arg_0.1992 = f32[] parameter(0)
  %Arg_1.1993 = f32[] parameter(1)
  ROOT %add.1994 = f32[] add(%Arg_0.1992, %Arg_1.1993)
}

%region_47.1995.clone (Arg_0.35: f32[], Arg_1.35: f32[]) -> f32[] {
  %Arg_0.35 = f32[] parameter(0)
  %Arg_1.35 = f32[] parameter(1)
  ROOT %add.181 = f32[] add(%Arg_0.35, %Arg_1.35)
}

%region_48.2002 (Arg_0.1999: f32[], Arg_1.2000: f32[]) -> f32[] {
  %Arg_0.1999 = f32[] parameter(0)
  %Arg_1.2000 = f32[] parameter(1)
  ROOT %add.2001 = f32[] add(%Arg_0.1999, %Arg_1.2000)
}

%region_49.2009 (Arg_0.2006: f32[], Arg_1.2007: f32[]) -> f32[] {
  %Arg_0.2006 = f32[] parameter(0)
  %Arg_1.2007 = f32[] parameter(1)
  ROOT %add.2008 = f32[] add(%Arg_0.2006, %Arg_1.2007)
}

%region_50.2016 (Arg_0.2013: f32[], Arg_1.2014: f32[]) -> f32[] {
  %Arg_0.2013 = f32[] parameter(0)
  %Arg_1.2014 = f32[] parameter(1)
  ROOT %add.2015 = f32[] add(%Arg_0.2013, %Arg_1.2014)
}

%region_50.2016.clone (Arg_0.37: f32[], Arg_1.36: f32[]) -> f32[] {
  %Arg_0.37 = f32[] parameter(0)
  %Arg_1.36 = f32[] parameter(1)
  ROOT %add.183 = f32[] add(%Arg_0.37, %Arg_1.36)
}

%region_51.2023 (Arg_0.2020: f32[], Arg_1.2021: f32[]) -> f32[] {
  %Arg_0.2020 = f32[] parameter(0)
  %Arg_1.2021 = f32[] parameter(1)
  ROOT %add.2022 = f32[] add(%Arg_0.2020, %Arg_1.2021)
}

%region_51.2023.clone (Arg_0.38: f32[], Arg_1.38: f32[]) -> f32[] {
  %Arg_0.38 = f32[] parameter(0)
  %Arg_1.38 = f32[] parameter(1)
  ROOT %add.184 = f32[] add(%Arg_0.38, %Arg_1.38)
}

%region_52.2030 (Arg_0.2027: f32[], Arg_1.2028: f32[]) -> f32[] {
  %Arg_0.2027 = f32[] parameter(0)
  %Arg_1.2028 = f32[] parameter(1)
  ROOT %add.2029 = f32[] add(%Arg_0.2027, %Arg_1.2028)
}

%region_52.2030.clone (Arg_0.40: f32[], Arg_1.39: f32[]) -> f32[] {
  %Arg_0.40 = f32[] parameter(0)
  %Arg_1.39 = f32[] parameter(1)
  ROOT %add.186 = f32[] add(%Arg_0.40, %Arg_1.39)
}

%region_53.2037 (Arg_0.2034: f32[], Arg_1.2035: f32[]) -> f32[] {
  %Arg_0.2034 = f32[] parameter(0)
  %Arg_1.2035 = f32[] parameter(1)
  ROOT %add.2036 = f32[] add(%Arg_0.2034, %Arg_1.2035)
}

%region_53.2037.clone (Arg_0.41: f32[], Arg_1.41: f32[]) -> f32[] {
  %Arg_0.41 = f32[] parameter(0)
  %Arg_1.41 = f32[] parameter(1)
  ROOT %add.187 = f32[] add(%Arg_0.41, %Arg_1.41)
}

%region_54.2044 (Arg_0.2041: f32[], Arg_1.2042: f32[]) -> f32[] {
  %Arg_0.2041 = f32[] parameter(0)
  %Arg_1.2042 = f32[] parameter(1)
  ROOT %add.2043 = f32[] add(%Arg_0.2041, %Arg_1.2042)
}

%region_54.2044.clone (Arg_0.42: f32[], Arg_1.42: f32[]) -> f32[] {
  %Arg_0.42 = f32[] parameter(0)
  %Arg_1.42 = f32[] parameter(1)
  ROOT %add.188 = f32[] add(%Arg_0.42, %Arg_1.42)
}

%region_55.2051 (Arg_0.2048: f32[], Arg_1.2049: f32[]) -> f32[] {
  %Arg_0.2048 = f32[] parameter(0)
  %Arg_1.2049 = f32[] parameter(1)
  ROOT %add.2050 = f32[] add(%Arg_0.2048, %Arg_1.2049)
}

%region_55.2051.clone (Arg_0.43: f32[], Arg_1.43: f32[]) -> f32[] {
  %Arg_0.43 = f32[] parameter(0)
  %Arg_1.43 = f32[] parameter(1)
  ROOT %add.189 = f32[] add(%Arg_0.43, %Arg_1.43)
}

%region_10.733 (Arg_0.730: f32[], Arg_1.731: f32[]) -> f32[] {
  %Arg_0.730 = f32[] parameter(0)
  %Arg_1.731 = f32[] parameter(1)
  ROOT %add.732 = f32[] add(%Arg_0.730, %Arg_1.731)
}

%region_11.749 (Arg_0.746: f32[], Arg_1.747: f32[]) -> f32[] {
  %Arg_0.746 = f32[] parameter(0)
  %Arg_1.747 = f32[] parameter(1)
  ROOT %add.748 = f32[] add(%Arg_0.746, %Arg_1.747)
}

%region_11.749.clone (Arg_0.44: f32[], Arg_1.44: f32[]) -> f32[] {
  %Arg_0.44 = f32[] parameter(0)
  %Arg_1.44 = f32[] parameter(1)
  ROOT %add.191 = f32[] add(%Arg_0.44, %Arg_1.44)
}

%region_68.2143 (Arg_0.2140: f32[], Arg_1.2141: f32[]) -> f32[] {
  %Arg_0.2140 = f32[] parameter(0)
  %Arg_1.2141 = f32[] parameter(1)
  ROOT %add.2142 = f32[] add(%Arg_0.2140, %Arg_1.2141)
}

%region_69.2149 (Arg_0.2146: f32[], Arg_1.2147: f32[]) -> f32[] {
  %Arg_0.2146 = f32[] parameter(0)
  %Arg_1.2147 = f32[] parameter(1)
  ROOT %add.2148 = f32[] add(%Arg_0.2146, %Arg_1.2147)
}

%region_69.2149.clone (Arg_0.45: f32[], Arg_1.45: f32[]) -> f32[] {
  %Arg_0.45 = f32[] parameter(0)
  %Arg_1.45 = f32[] parameter(1)
  ROOT %add.192 = f32[] add(%Arg_0.45, %Arg_1.45)
}

%region_70.2156 (Arg_0.2153: f32[], Arg_1.2154: f32[]) -> f32[] {
  %Arg_0.2153 = f32[] parameter(0)
  %Arg_1.2154 = f32[] parameter(1)
  ROOT %add.2155 = f32[] add(%Arg_0.2153, %Arg_1.2154)
}

%region_70.2156.clone (Arg_0.46: f32[], Arg_1.46: f32[]) -> f32[] {
  %Arg_0.46 = f32[] parameter(0)
  %Arg_1.46 = f32[] parameter(1)
  ROOT %add.194 = f32[] add(%Arg_0.46, %Arg_1.46)
}

%region_71.2163 (Arg_0.2160: f32[], Arg_1.2161: f32[]) -> f32[] {
  %Arg_0.2160 = f32[] parameter(0)
  %Arg_1.2161 = f32[] parameter(1)
  ROOT %add.2162 = f32[] add(%Arg_0.2160, %Arg_1.2161)
}

%region_71.2163.clone (Arg_0.47: f32[], Arg_1.47: f32[]) -> f32[] {
  %Arg_0.47 = f32[] parameter(0)
  %Arg_1.47 = f32[] parameter(1)
  ROOT %add.195 = f32[] add(%Arg_0.47, %Arg_1.47)
}

%region_72.2170 (Arg_0.2167: f32[], Arg_1.2168: f32[]) -> f32[] {
  %Arg_0.2167 = f32[] parameter(0)
  %Arg_1.2168 = f32[] parameter(1)
  ROOT %add.2169 = f32[] add(%Arg_0.2167, %Arg_1.2168)
}

%region_73.2177 (Arg_0.2174: f32[], Arg_1.2175: f32[]) -> f32[] {
  %Arg_0.2174 = f32[] parameter(0)
  %Arg_1.2175 = f32[] parameter(1)
  ROOT %add.2176 = f32[] add(%Arg_0.2174, %Arg_1.2175)
}

%region_74.2184 (Arg_0.2181: f32[], Arg_1.2182: f32[]) -> f32[] {
  %Arg_0.2181 = f32[] parameter(0)
  %Arg_1.2182 = f32[] parameter(1)
  ROOT %add.2183 = f32[] add(%Arg_0.2181, %Arg_1.2182)
}

%region_74.2184.clone (Arg_0.48: f32[], Arg_1.48: f32[]) -> f32[] {
  %Arg_0.48 = f32[] parameter(0)
  %Arg_1.48 = f32[] parameter(1)
  ROOT %add.196 = f32[] add(%Arg_0.48, %Arg_1.48)
}

%region_75.2191 (Arg_0.2188: f32[], Arg_1.2189: f32[]) -> f32[] {
  %Arg_0.2188 = f32[] parameter(0)
  %Arg_1.2189 = f32[] parameter(1)
  ROOT %add.2190 = f32[] add(%Arg_0.2188, %Arg_1.2189)
}

%region_75.2191.clone (Arg_0.49: f32[], Arg_1.49: f32[]) -> f32[] {
  %Arg_0.49 = f32[] parameter(0)
  %Arg_1.49 = f32[] parameter(1)
  ROOT %add.197 = f32[] add(%Arg_0.49, %Arg_1.49)
}

%region_76.2198 (Arg_0.2195: f32[], Arg_1.2196: f32[]) -> f32[] {
  %Arg_0.2195 = f32[] parameter(0)
  %Arg_1.2196 = f32[] parameter(1)
  ROOT %add.2197 = f32[] add(%Arg_0.2195, %Arg_1.2196)
}

%region_76.2198.clone (Arg_0.50: f32[], Arg_1.50: f32[]) -> f32[] {
  %Arg_0.50 = f32[] parameter(0)
  %Arg_1.50 = f32[] parameter(1)
  ROOT %add.198 = f32[] add(%Arg_0.50, %Arg_1.50)
}

%region_77.2205 (Arg_0.2202: f32[], Arg_1.2203: f32[]) -> f32[] {
  %Arg_0.2202 = f32[] parameter(0)
  %Arg_1.2203 = f32[] parameter(1)
  ROOT %add.2204 = f32[] add(%Arg_0.2202, %Arg_1.2203)
}

%region_77.2205.clone (Arg_0.51: f32[], Arg_1.51: f32[]) -> f32[] {
  %Arg_0.51 = f32[] parameter(0)
  %Arg_1.51 = f32[] parameter(1)
  ROOT %add.199 = f32[] add(%Arg_0.51, %Arg_1.51)
}

%region_78.2212 (Arg_0.2209: f32[], Arg_1.2210: f32[]) -> f32[] {
  %Arg_0.2209 = f32[] parameter(0)
  %Arg_1.2210 = f32[] parameter(1)
  ROOT %add.2211 = f32[] add(%Arg_0.2209, %Arg_1.2210)
}

%region_78.2212.clone (Arg_0.52: f32[], Arg_1.52: f32[]) -> f32[] {
  %Arg_0.52 = f32[] parameter(0)
  %Arg_1.52 = f32[] parameter(1)
  ROOT %add.200 = f32[] add(%Arg_0.52, %Arg_1.52)
}

%region_79.2219 (Arg_0.2216: f32[], Arg_1.2217: f32[]) -> f32[] {
  %Arg_0.2216 = f32[] parameter(0)
  %Arg_1.2217 = f32[] parameter(1)
  ROOT %add.2218 = f32[] add(%Arg_0.2216, %Arg_1.2217)
}

%region_79.2219.clone (Arg_0.53: f32[], Arg_1.53: f32[]) -> f32[] {
  %Arg_0.53 = f32[] parameter(0)
  %Arg_1.53 = f32[] parameter(1)
  ROOT %add.201 = f32[] add(%Arg_0.53, %Arg_1.53)
}

%region_57.2065.clone (Arg_0.54: f32[], Arg_1.54: f32[]) -> f32[] {
  %Arg_0.54 = f32[] parameter(0)
  %Arg_1.54 = f32[] parameter(1)
  ROOT %add.202 = f32[] add(%Arg_0.54, %Arg_1.54)
}

%region_58.2072.clone (Arg_0.55: f32[], Arg_1.55: f32[]) -> f32[] {
  %Arg_0.55 = f32[] parameter(0)
  %Arg_1.55 = f32[] parameter(1)
  ROOT %add.203 = f32[] add(%Arg_0.55, %Arg_1.55)
}

%region_59.2079.clone (Arg_0.56: f32[], Arg_1.56: f32[]) -> f32[] {
  %Arg_0.56 = f32[] parameter(0)
  %Arg_1.56 = f32[] parameter(1)
  ROOT %add.204 = f32[] add(%Arg_0.56, %Arg_1.56)
}

%region_62.2100.clone (Arg_0.57: f32[], Arg_1.57: f32[]) -> f32[] {
  %Arg_0.57 = f32[] parameter(0)
  %Arg_1.57 = f32[] parameter(1)
  ROOT %add.206 = f32[] add(%Arg_0.57, %Arg_1.57)
}

%region_63.2107.clone (Arg_0.58: f32[], Arg_1.58: f32[]) -> f32[] {
  %Arg_0.58 = f32[] parameter(0)
  %Arg_1.58 = f32[] parameter(1)
  ROOT %add.207 = f32[] add(%Arg_0.58, %Arg_1.58)
}

%region_64.2114.clone (Arg_0.59: f32[], Arg_1.59: f32[]) -> f32[] {
  %Arg_0.59 = f32[] parameter(0)
  %Arg_1.59 = f32[] parameter(1)
  ROOT %add.209 = f32[] add(%Arg_0.59, %Arg_1.59)
}

%region_65.2121.clone (Arg_0.60: f32[], Arg_1.60: f32[]) -> f32[] {
  %Arg_0.60 = f32[] parameter(0)
  %Arg_1.60 = f32[] parameter(1)
  ROOT %add.211 = f32[] add(%Arg_0.60, %Arg_1.60)
}

%region_66.2128.clone (Arg_0.61: f32[], Arg_1.61: f32[]) -> f32[] {
  %Arg_0.61 = f32[] parameter(0)
  %Arg_1.61 = f32[] parameter(1)
  ROOT %add.212 = f32[] add(%Arg_0.61, %Arg_1.61)
}

%region_67.2135.clone (Arg_0.62: f32[], Arg_1.62: f32[]) -> f32[] {
  %Arg_0.62 = f32[] parameter(0)
  %Arg_1.62 = f32[] parameter(1)
  ROOT %add.215 = f32[] add(%Arg_0.62, %Arg_1.62)
}

ENTRY %main.2269_spmd (param.4: s32[], param.5: f32[8192], param.9: f32[64,80,28672], param.10: f32[64,80,28672], param.11: f32[28672,80,64], param.12: f32[8192,80], param.13: f32[8192,80], param.14: f32[64,80,8,128], param.15: f32[64,80,128,64], param.16: f32[64,80,64,128], param.17: f32[64,80,8,128], param.21: f32[64,128256], param.8: f32[128256,64], param.24: s32[], param.23: f32[8192], param.26: f32[64,80,28672], param.28: f32[64,80,28672], param.30: f32[28672,80,64], param.32: f32[8192,80], param.34: f32[8192,80], param.36: f32[64,80,8,128], param.38: f32[64,80,128,64], param.40: f32[64,80,64,128], param.42: f32[64,80,8,128], param.44: f32[64,128256], param.46: f32[128256,64], param.25: f32[8192], param.27: f32[64,80,28672], param.29: f32[64,80,28672], param.31: f32[28672,80,64], param.33: f32[8192,80], param.35: f32[8192,80], param.37: f32[64,80,8,128], param.39: f32[64,80,128,64], param.41: f32[64,80,64,128], param.43: f32[64,80,8,128], param.45: f32[64,128256], param.47: f32[128256,64], param.6: s32[], param.7: s32[2,8192], param.18: s32[2,8192], param.19: s32[2,8192], param.22: s32[2,8192], param.20: s32[2,8192]) -> (s32[], f32[8192], f32[64,80,28672], f32[64,80,28672], f32[28672,80,64], /*index=5*/f32[8192,80], f32[8192,80], f32[64,80,8,128], f32[64,80,128,64], f32[64,80,64,128], /*index=10*/f32[64,80,8,128], f32[64,128256], f32[128256,64], s32[], f32[8192], /*index=15*/f32[64,80,28672], f32[64,80,28672], f32[28672,80,64], f32[8192,80], f32[8192,80], /*index=20*/f32[64,80,8,128], f32[64,80,128,64], f32[64,80,64,128], f32[64,80,8,128], f32[64,128256], /*index=25*/f32[128256,64], f32[8192], f32[64,80,28672], f32[64,80,28672], f32[28672,80,64], /*index=30*/f32[8192,80], f32[8192,80], f32[64,80,8,128], f32[64,80,128,64], f32[64,80,64,128], /*index=35*/f32[64,80,8,128], f32[64,128256], f32[128256,64], s32[], f32[], /*index=40*/f32[], f32[], f32[], f32[], s32[]) {
  %param.4 = s32[] parameter(0), sharding={replicated}
  %constant.1044 = s32[] constant(1)
  %add.216 = s32[] add(%param.4, %constant.1044)
  %param.5 = f32[8192]{0} parameter(1), sharding={replicated}
  %param.6 = s32[] parameter(38), sharding={replicated}
  %constant.1045 = s32[] constant(15000)
  %compare.163 = pred[] compare(%param.6, %constant.1045), direction=LT
  %constant.1046 = f32[] constant(1)
  %constant.1048 = s32[] constant(0)
  %maximum.13 = s32[] maximum(%constant.1048, %param.6)
  %minimum.7 = s32[] minimum(%constant.1045, %maximum.13)
  %convert.181 = f32[] convert(%minimum.7)
  %constant.1049 = f32[] constant(6.66666674e-05)
  %multiply.266 = f32[] multiply(%convert.181, %constant.1049)
  %subtract.17 = f32[] subtract(%constant.1046, %multiply.266)
  %constant.1050 = f32[] constant(-0.001)
  %multiply.267 = f32[] multiply(%subtract.17, %constant.1050)
  %constant.1051 = f32[] constant(0.001)
  %add.218 = f32[] add(%multiply.267, %constant.1051)
  %constant.1052 = s32[] constant(-15000)
  %add.219 = s32[] add(%param.6, %constant.1052)
  %convert.182 = f32[] convert(%add.219)
  %constant.1053 = f32[] constant(2.32708844e-05)
  %multiply.268 = f32[] multiply(%convert.182, %constant.1053)
  %cosine.4 = f32[] cosine(%multiply.268)
  %add.220 = f32[] add(%cosine.4, %constant.1046)
  %constant.1055 = f32[] constant(0.0005)
  %multiply.269 = f32[] multiply(%add.220, %constant.1055)
  %constant.1057 = f32[] constant(0.5)
  %multiply.270 = f32[] multiply(%add.220, %constant.1057)
  %subtract.18 = f32[] subtract(%constant.1046, %multiply.270)
  %constant.1058 = f32[] constant(0.0001)
  %multiply.271 = f32[] multiply(%subtract.18, %constant.1058)
  %add.221 = f32[] add(%multiply.269, %multiply.271)
  %select.111 = f32[] select(%compare.163, %add.218, %add.221)
  %constant.1059 = f32[] constant(-1)
  %multiply.272 = f32[] multiply(%select.111, %constant.1059)
  %broadcast.650 = f32[8192]{0} broadcast(%multiply.272), dimensions={}
  %param.7 = s32[2,8192]{1,0} parameter(39), sharding={devices=[256,1]<=[256]}
  %broadcast.651 = s32[2,8192,128256]{2,1,0} broadcast(%param.7), dimensions={0,1}
  %iota.23 = s32[2,8192,128256]{2,1,0} iota(), iota_dimension=2
  %compare.164 = pred[2,8192,128256]{2,1,0} compare(%broadcast.651, %iota.23), direction=EQ
  %convert.183 = bf16[2,8192,128256]{2,1,0} convert(%compare.164)
  %param.8 = f32[128256,64]{1,0} parameter(12), sharding={devices=[1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %convert.184 = bf16[128256,64]{1,0} convert(%param.8)
  %all-gather.14 = bf16[128256,8192]{1,0} all-gather(%convert.184), channel_id=1, replica_groups=[2,128]<=[256], dimensions={1}, use_global_device_ids=true
  %dot.59 = bf16[2,8192,8192]{2,1,0} dot(%convert.183, %all-gather.14), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.80 = bf16[2,8192,8192]{2,1,0} copy(%dot.59)
  %constant.1061 = bf16[] constant(0)
  %broadcast.652 = bf16[80,2,8192,8192]{3,2,1,0} broadcast(%constant.1061), dimensions={}
  %param.9 = f32[64,80,28672]{2,1,0} parameter(2), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.23 = f32[80,64,28672]{2,0,1} transpose(%param.9), dimensions={1,0,2}
  %param.10 = f32[64,80,28672]{2,1,0} parameter(3), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.24 = f32[80,64,28672]{2,0,1} transpose(%param.10), dimensions={1,0,2}
  %param.11 = f32[28672,80,64]{2,1,0} parameter(4), sharding={devices=[1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.25 = f32[80,28672,64]{2,0,1} transpose(%param.11), dimensions={1,0,2}
  %param.12 = f32[8192,80]{1,0} parameter(5), sharding={replicated}
  %transpose.26 = f32[80,8192]{0,1} transpose(%param.12), dimensions={1,0}
  %param.13 = f32[8192,80]{1,0} parameter(6), sharding={replicated}
  %transpose.27 = f32[80,8192]{0,1} transpose(%param.13), dimensions={1,0}
  %param.14 = f32[64,80,8,128]{3,2,1,0} parameter(7), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.28 = f32[80,64,8,128]{3,2,0,1} transpose(%param.14), dimensions={1,0,2,3}
  %param.15 = f32[64,80,128,64]{3,2,1,0} parameter(8), sharding={devices=[1,1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.29 = f32[80,64,128,64]{3,2,0,1} transpose(%param.15), dimensions={1,0,2,3}
  %param.16 = f32[64,80,64,128]{3,2,1,0} parameter(9), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.30 = f32[80,64,64,128]{3,2,0,1} transpose(%param.16), dimensions={1,0,2,3}
  %param.17 = f32[64,80,8,128]{3,2,1,0} parameter(10), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.31 = f32[80,64,8,128]{3,2,0,1} transpose(%param.17), dimensions={1,0,2,3}
  %param.18 = s32[2,8192]{1,0} parameter(40), sharding={devices=[256,1]<=[256]}
  %convert.185 = f32[2,8192]{1,0} convert(%param.18)
  %broadcast.653 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert.185), dimensions={0,1}
  %broadcast.654 = f32[128]{0} broadcast(%constant.1046), dimensions={}
  %constant.1063 = f32[] constant(6.28318548)
  %broadcast.655 = f32[128]{0} broadcast(%constant.1063), dimensions={}
  %constant.1064 = f32[] constant(500000)
  %broadcast.656 = f32[128]{0} broadcast(%constant.1064), dimensions={}
  %iota.24 = s32[64]{0} iota(), iota_dimension=0
  %constant.1065 = s32[] constant(2)
  %broadcast.657 = s32[64]{0} broadcast(%constant.1065), dimensions={}
  %multiply.273 = s32[64]{0} multiply(%iota.24, %broadcast.657)
  %convert.186 = f32[64]{0} convert(%multiply.273)
  %constant.1066 = f32[] constant(0.0078125)
  %broadcast.658 = f32[64]{0} broadcast(%constant.1066), dimensions={}
  %multiply.274 = f32[64]{0} multiply(%convert.186, %broadcast.658)
  %broadcast.659 = f32[64,2]{1,0} broadcast(%multiply.274), dimensions={0}
  %reshape.614 = f32[128]{0} reshape(%broadcast.659)
  %power.14 = f32[128]{0} power(%broadcast.656, %reshape.614)
  %multiply.275 = f32[128]{0} multiply(%broadcast.655, %power.14)
  %constant.1067 = f32[] constant(2048)
  %broadcast.660 = f32[128]{0} broadcast(%constant.1067), dimensions={}
  %compare.165 = pred[128]{0} compare(%multiply.275, %broadcast.660), direction=LT
  %convert.187 = s32[128]{0} convert(%compare.165)
  %broadcast.661 = s32[128]{0} broadcast(%constant.1044), dimensions={}
  %compare.166 = pred[128]{0} compare(%convert.187, %broadcast.661), direction=LT
  %constant.1069 = f32[] constant(8192)
  %broadcast.662 = f32[128]{0} broadcast(%constant.1069), dimensions={}
  %compare.167 = pred[128]{0} compare(%multiply.275, %broadcast.662), direction=GT
  %convert.188 = s32[128]{0} convert(%compare.167)
  %compare.168 = pred[128]{0} compare(%convert.188, %broadcast.661), direction=LT
  %negate.30 = f32[128]{0} negate(%reshape.614)
  %power.15 = f32[128]{0} power(%broadcast.656, %negate.30)
  %multiply.276 = f32[128]{0} multiply(%broadcast.662, %power.15)
  %constant.1070 = f32[] constant(0.159154937)
  %broadcast.663 = f32[128]{0} broadcast(%constant.1070), dimensions={}
  %multiply.277 = f32[128]{0} multiply(%multiply.276, %broadcast.663)
  %broadcast.664 = f32[128]{0} broadcast(%constant.1059), dimensions={}
  %add.222 = f32[128]{0} add(%multiply.277, %broadcast.664)
  %constant.1072 = f32[] constant(0.333333343)
  %broadcast.665 = f32[128]{0} broadcast(%constant.1072), dimensions={}
  %multiply.278 = f32[128]{0} multiply(%add.222, %broadcast.665)
  %subtract.19 = f32[128]{0} subtract(%broadcast.654, %multiply.278)
  %multiply.279 = f32[128]{0} multiply(%subtract.19, %power.15)
  %constant.1073 = f32[] constant(0.125)
  %broadcast.666 = f32[128]{0} broadcast(%constant.1073), dimensions={}
  %multiply.280 = f32[128]{0} multiply(%multiply.279, %broadcast.666)
  %multiply.282 = f32[128]{0} multiply(%multiply.278, %power.15)
  %add.223 = f32[128]{0} add(%multiply.280, %multiply.282)
  %multiply.284 = f32[128]{0} multiply(%power.15, %broadcast.666)
  %select.112 = f32[128]{0} select(%compare.168, %add.223, %multiply.284)
  %select.113 = f32[128]{0} select(%compare.166, %select.112, %power.15)
  %divide.60 = f32[128]{0} divide(%broadcast.654, %select.113)
  %broadcast.668 = f32[2,8192,1,128]{3,2,1,0} broadcast(%divide.60), dimensions={3}
  %divide.61 = f32[2,8192,1,128]{3,2,1,0} divide(%broadcast.653, %broadcast.668)
  %cosine.5 = f32[2,8192,1,128]{3,2,1,0} cosine(%divide.61)
  %iota.25 = s32[128]{0} iota(), iota_dimension=0
  %and.32 = s32[128]{0} and(%iota.25, %broadcast.661)
  %broadcast.670 = s32[128]{0} broadcast(%constant.1048), dimensions={}
  %compare.169 = pred[128]{0} compare(%and.32, %broadcast.670), direction=LT
  %compare.170 = pred[128]{0} compare(%and.32, %broadcast.670), direction=NE
  %and.33 = pred[128]{0} and(%compare.169, %compare.170)
  %broadcast.671 = s32[128]{0} broadcast(%constant.1065), dimensions={}
  %add.225 = s32[128]{0} add(%and.32, %broadcast.671)
  %select.114 = s32[128]{0} select(%and.33, %add.225, %and.32)
  %broadcast.672 = s32[2,8192,64,128]{3,2,1,0} broadcast(%select.114), dimensions={3}
  %sine.4 = f32[2,8192,1,128]{3,2,1,0} sine(%divide.61)
  %constant.1078 = s32[2]{0} constant({-1, 1})
  %broadcast.673 = s32[64,2]{1,0} broadcast(%constant.1078), dimensions={1}
  %reshape.615 = s32[128]{0} reshape(%broadcast.673)
  %convert.189 = f32[128]{0} convert(%reshape.615)
  %reshape.616 = f32[1,1,1,128]{3,2,1,0} reshape(%convert.189)
  %broadcast.690 = s32[2,8192,8,128]{3,2,1,0} broadcast(%select.114), dimensions={3}
  %param.19 = s32[2,8192]{1,0} parameter(41), sharding={devices=[256,1]<=[256]}
  %broadcast.692 = s32[2,8192,8192]{2,1,0} broadcast(%param.19), dimensions={0,1}
  %broadcast.693 = s32[2,8192,8192]{2,1,0} broadcast(%param.19), dimensions={0,2}
  %compare.177 = pred[2,8192,8192]{2,1,0} compare(%broadcast.692, %broadcast.693), direction=EQ
  %iota.28 = s32[8192,8192]{1,0} iota(), iota_dimension=1
  %iota.29 = s32[8192,8192]{1,0} iota(), iota_dimension=0
  %compare.178 = pred[8192,8192]{1,0} compare(%iota.28, %iota.29), direction=LE
  %broadcast.694 = pred[2,8192,8192]{2,1,0} broadcast(%compare.178), dimensions={1,2}
  %and.36 = pred[2,8192,8192]{2,1,0} and(%compare.177, %broadcast.694)
  %constant.1089 = f32[] constant(0)
  %broadcast.695 = f32[2,8192,8192]{2,1,0} broadcast(%constant.1089), dimensions={}
  %constant.1090 = f32[] constant(-2.38197633e+38)
  %broadcast.696 = f32[2,8192,8192]{2,1,0} broadcast(%constant.1090), dimensions={}
  %select.118 = f32[2,8192,8192]{2,1,0} select(%and.36, %broadcast.695, %broadcast.696)
  %compare.179 = pred[2,8192,8192]{2,1,0} compare(%select.118, %broadcast.695), direction=NE
  %not.4 = pred[2,8192,8192]{2,1,0} not(%compare.179)
  %convert.195 = s32[2,8192,8192]{2,1,0} convert(%not.4)
  %reduce.30 = s32[2,8192]{1,0} reduce(%convert.195, %constant.1048), dimensions={1}, to_apply=%region_0.394
  %reshape.620 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.30)
  %slice.50 = s32[2,1,1,1]{3,2,1,0} slice(%reshape.620), slice={[0:2], [0:1], [0:1], [0:1]}
  %reshape.622 = s32[2,1]{1,0} reshape(%slice.50)
  %reduce.31 = s32[2,8192]{1,0} reduce(%convert.195, %constant.1048), dimensions={2}, to_apply=%region_1.402
  %reshape.623 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.31)
  %constant.1103 = s32[] constant(-2147483648)
  %reduce.32 = s32[2,1]{1,0} reduce(%reshape.623, %constant.1103), dimensions={3,2}, to_apply=%region_2.407
  %tuple.7 = (s32[], bf16[2,8192,8192]{2,1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,64,28672]{2,0,1}, f32[80,64,28672]{2,0,1}, /*index=5*/f32[80,28672,64]{2,0,1}, f32[80,8192]{0,1}, f32[80,8192]{0,1}, f32[80,64,8,128]{3,2,0,1}, f32[80,64,128,64]{3,2,0,1}, /*index=10*/f32[80,64,64,128]{3,2,0,1}, f32[80,64,8,128]{3,2,0,1}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,64,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, /*index=15*/f32[1,1,1,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,8,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, /*index=20*/s32[2,1]{1,0}, s32[2,1]{1,0}) tuple(%constant.1048, %copy.80, %broadcast.652, %transpose.23, %transpose.24, /*index=5*/%transpose.25, %transpose.26, %transpose.27, %transpose.28, %transpose.29, /*index=10*/%transpose.30, %transpose.31, %cosine.5, %broadcast.672, %sine.4, /*index=15*/%reshape.616, %cosine.5, %broadcast.690, %sine.4, %reshape.616, /*index=20*/%reshape.622, %reduce.32)
  %while = (s32[], bf16[2,8192,8192]{2,1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,64,28672]{2,0,1}, f32[80,64,28672]{2,0,1}, /*index=5*/f32[80,28672,64]{2,0,1}, f32[80,8192]{0,1}, f32[80,8192]{0,1}, f32[80,64,8,128]{3,2,0,1}, f32[80,64,128,64]{3,2,0,1}, /*index=10*/f32[80,64,64,128]{3,2,0,1}, f32[80,64,8,128]{3,2,0,1}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,64,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, /*index=15*/f32[1,1,1,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,8,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, /*index=20*/s32[2,1]{1,0}, s32[2,1]{1,0}) while(%tuple.7), condition=%region_6.658_spmd, body=%region_3.632_spmd
  %get-tuple-element.76 = bf16[2,8192,8192]{2,1,0} get-tuple-element(%while), index=1
  %convert.197 = f32[2,8192,8192]{2,1,0} convert(%get-tuple-element.76)
  %multiply.296 = f32[2,8192,8192]{2,1,0} multiply(%convert.197, %convert.197)
  %reduce.33 = f32[2,8192]{1,0} reduce(%multiply.296, %constant.1089), dimensions={2}, to_apply=%region_7.670
  %constant.1105 = f32[] constant(0.000122070312)
  %broadcast.701 = f32[2,8192]{1,0} broadcast(%constant.1105), dimensions={}
  %multiply.297 = f32[2,8192]{1,0} multiply(%reduce.33, %broadcast.701)
  %constant.1106 = f32[] constant(1e-05)
  %broadcast.703 = f32[2,8192]{1,0} broadcast(%constant.1106), dimensions={}
  %add.231 = f32[2,8192]{1,0} add(%multiply.297, %broadcast.703)
  %reshape.624 = f32[2,8192,1]{2,1,0} reshape(%add.231)
  %rsqrt.10 = f32[2,8192,1]{2,1,0} rsqrt(%reshape.624)
  %reshape.625 = f32[2,8192]{1,0} reshape(%rsqrt.10)
  %broadcast.704 = f32[2,8192,8192]{2,1,0} broadcast(%reshape.625), dimensions={0,1}
  %multiply.298 = f32[2,8192,8192]{2,1,0} multiply(%convert.197, %broadcast.704)
  %convert.198 = bf16[2,8192,8192]{2,1,0} convert(%multiply.298)
  %param.20 = s32[2,8192]{1,0} parameter(43), sharding={devices=[256,1]<=[256]}
  %broadcast.705 = s32[2,8192]{1,0} broadcast(%constant.1048), dimensions={}
  %compare.180 = pred[2,8192]{1,0} compare(%param.20, %broadcast.705), direction=NE
  %convert.199 = s32[2,8192]{1,0} convert(%compare.180)
  %reduce.34 = s32[] reduce(%convert.199, %constant.1048), dimensions={0,1}, to_apply=%region_12.756
  %all-reduce.16 = s32[] all-reduce(%reduce.34), channel_id=9, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_12.756.clone
  %convert.200 = f32[] convert(%all-reduce.16)
  %constant.1110 = f32[] constant(1e-08)
  %add.233 = f32[] add(%convert.200, %constant.1110)
  %divide.64 = f32[] divide(%constant.1046, %add.233)
  %broadcast.706 = f32[2,8192]{1,0} broadcast(%divide.64), dimensions={}
  %broadcast.707 = f32[2,8192]{1,0} broadcast(%constant.1089), dimensions={}
  %select.120 = f32[2,8192]{1,0} select(%compare.180, %broadcast.706, %broadcast.707)
  %copy.81 = f32[2,8192]{1,0} copy(%select.120)
  %broadcast.708 = f32[2,8192,128256]{2,1,0} broadcast(%copy.81), dimensions={0,1}
  %convert.201 = bf16[8192]{0} convert(%param.5)
  %broadcast.709 = bf16[2,8192,8192]{2,1,0} broadcast(%convert.201), dimensions={2}
  %multiply.299 = bf16[2,8192,8192]{2,1,0} multiply(%convert.198, %broadcast.709)
  %param.21 = f32[64,128256]{1,0} parameter(11), sharding={devices=[128,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %convert.202 = bf16[64,128256]{1,0} convert(%param.21)
  %all-gather.15 = bf16[8192,128256]{1,0} all-gather(%convert.202), channel_id=10, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.60 = bf16[2,8192,128256]{2,1,0} dot(%multiply.299, %all-gather.15), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %copy.82 = bf16[2,8192,128256]{2,1,0} copy(%dot.60)
  %convert.203 = f32[2,8192,128256]{2,1,0} convert(%copy.82)
  %constant.1112 = f32[] constant(-inf)
  %reduce.35 = f32[2,8192]{1,0} reduce(%convert.203, %constant.1112), dimensions={2}, to_apply=%region_8.710
  %broadcast.710 = f32[2,8192,128256]{2,1,0} broadcast(%reduce.35), dimensions={0,1}
  %subtract.21 = f32[2,8192,128256]{2,1,0} subtract(%convert.203, %broadcast.710)
  %exponential.6 = f32[2,8192,128256]{2,1,0} exponential(%subtract.21)
  %reduce.36 = f32[2,8192]{1,0} reduce(%exponential.6, %constant.1089), dimensions={2}, to_apply=%region_9.721
  %log.2 = f32[2,8192]{1,0} log(%reduce.36)
  %add.234 = f32[2,8192]{1,0} add(%log.2, %reduce.35)
  %multiply.300 = f32[2,8192]{1,0} multiply(%add.234, %broadcast.707)
  %broadcast.712 = f32[2,8192]{1,0} broadcast(%constant.1046), dimensions={}
  %add.235 = f32[2,8192]{1,0} add(%multiply.300, %broadcast.712)
  %broadcast.714 = f32[2,8192,128256]{2,1,0} broadcast(%add.235), dimensions={0,1}
  %multiply.301 = f32[2,8192,128256]{2,1,0} multiply(%broadcast.714, %exponential.6)
  %broadcast.716 = f32[2,8192,128256]{2,1,0} broadcast(%reduce.36), dimensions={0,1}
  %divide.65 = f32[2,8192,128256]{2,1,0} divide(%multiply.301, %broadcast.716)
  %param.22 = s32[2,8192]{1,0} parameter(42), sharding={devices=[256,1]<=[256]}
  %broadcast.717 = s32[2,8192,128256]{2,1,0} broadcast(%param.22), dimensions={0,1}
  %iota.30 = s32[2,8192,128256]{2,1,0} iota(), iota_dimension=2
  %compare.183 = pred[2,8192,128256]{2,1,0} compare(%broadcast.717, %iota.30), direction=EQ
  %convert.204 = f32[2,8192,128256]{2,1,0} convert(%compare.183)
  %subtract.22 = f32[2,8192,128256]{2,1,0} subtract(%divide.65, %convert.204)
  %multiply.302 = f32[2,8192,128256]{2,1,0} multiply(%broadcast.708, %subtract.22)
  %convert.205 = bf16[2,8192,128256]{2,1,0} convert(%multiply.302)
  %copy.83 = bf16[2,8192,128256]{2,1,0} copy(%convert.205)
  %dot.61 = bf16[2,8192,8192]{2,1,0} dot(%copy.83, %all-gather.15), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %multiply.303 = bf16[2,8192,8192]{2,1,0} multiply(%convert.198, %dot.61)
  %reduce.37 = bf16[8192]{0} reduce(%multiply.303, %constant.1061), dimensions={0,1}, to_apply=%region_13.792
  %all-reduce.17 = bf16[8192]{0} all-reduce(%reduce.37), channel_id=11, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_13.792.clone
  %convert.206 = f32[8192]{0} convert(%all-reduce.17)
  %multiply.304 = f32[8192]{0} multiply(%convert.206, %convert.206)
  %reduce.38 = f32[] reduce(%multiply.304, %constant.1089), dimensions={0}, to_apply=%region_32.1564
  %multiply.305 = bf16[2,8192,8192]{2,1,0} multiply(%dot.61, %broadcast.709)
  %convert.207 = f32[2,8192,8192]{2,1,0} convert(%multiply.305)
  %multiply.306 = f32[2,8192,8192]{2,1,0} multiply(%convert.207, %broadcast.704)
  %multiply.307 = f32[2,8192,8192]{2,1,0} multiply(%convert.197, %convert.207)
  %reduce.39 = f32[2,8192]{1,0} reduce(%multiply.307, %constant.1089), dimensions={2}, to_apply=%region_15.810
  %reshape.627 = f32[2,8192,1]{2,1,0} reshape(%reduce.39)
  %divide.66 = f32[2,8192,1]{2,1,0} divide(%rsqrt.10, %reshape.624)
  %constant.1120 = f32[] constant(-0.5)
  %broadcast.720 = f32[2,8192,1]{2,1,0} broadcast(%constant.1120), dimensions={}
  %multiply.308 = f32[2,8192,1]{2,1,0} multiply(%divide.66, %broadcast.720)
  %multiply.309 = f32[2,8192,1]{2,1,0} multiply(%reshape.627, %multiply.308)
  %constant.1121 = f32[] constant(0.000244140625)
  %broadcast.721 = f32[2,8192,1]{2,1,0} broadcast(%constant.1121), dimensions={}
  %multiply.310 = f32[2,8192,1]{2,1,0} multiply(%multiply.309, %broadcast.721)
  %reshape.629 = f32[2,8192]{1,0} reshape(%multiply.310)
  %broadcast.722 = f32[2,8192,8192]{2,1,0} broadcast(%reshape.629), dimensions={0,1}
  %multiply.311 = f32[2,8192,8192]{2,1,0} multiply(%convert.197, %broadcast.722)
  %add.237 = f32[2,8192,8192]{2,1,0} add(%multiply.306, %multiply.311)
  %convert.208 = bf16[2,8192,8192]{2,1,0} convert(%add.237)
  %broadcast.723 = f32[80,64,28672]{2,1,0} broadcast(%constant.1089), dimensions={}
  %broadcast.724 = f32[80,28672,64]{2,1,0} broadcast(%constant.1089), dimensions={}
  %broadcast.726 = f32[80,8192]{1,0} broadcast(%constant.1089), dimensions={}
  %broadcast.728 = f32[80,64,8,128]{3,2,1,0} broadcast(%constant.1089), dimensions={}
  %broadcast.729 = f32[80,64,128,64]{3,2,1,0} broadcast(%constant.1089), dimensions={}
  %broadcast.730 = f32[80,64,64,128]{3,2,1,0} broadcast(%constant.1089), dimensions={}
  %get-tuple-element.77 = bf16[80,2,8192,8192]{3,2,1,0} get-tuple-element(%while), index=2
  %tuple.8 = (s32[], bf16[2,8192,8192]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, /*index=5*/f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, /*index=10*/f32[80,64,8,128]{3,2,1,0}, f32[80,64,28672]{2,0,1}, f32[80,64,28672]{2,0,1}, f32[80,28672,64]{2,0,1}, f32[80,8192]{0,1}, /*index=15*/f32[80,8192]{0,1}, f32[80,64,8,128]{3,2,0,1}, f32[80,64,128,64]{3,2,0,1}, f32[80,64,64,128]{3,2,0,1}, f32[80,64,8,128]{3,2,0,1}, /*index=20*/bf16[80,2,8192,8192]{3,2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}) tuple(%constant.1048, %convert.208, %broadcast.723, %broadcast.723, %broadcast.724, /*index=5*/%broadcast.726, %broadcast.726, %broadcast.728, %broadcast.729, %broadcast.730, /*index=10*/%broadcast.728, %transpose.23, %transpose.24, %transpose.25, %transpose.26, /*index=15*/%transpose.27, %transpose.28, %transpose.29, %transpose.30, %transpose.31, /*index=20*/%get-tuple-element.77, %param.19, %param.18)
  %while.1 = (s32[], bf16[2,8192,8192]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, /*index=5*/f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, /*index=10*/f32[80,64,8,128]{3,2,1,0}, f32[80,64,28672]{2,0,1}, f32[80,64,28672]{2,0,1}, f32[80,28672,64]{2,0,1}, f32[80,8192]{0,1}, /*index=15*/f32[80,8192]{0,1}, f32[80,64,8,128]{3,2,0,1}, f32[80,64,128,64]{3,2,0,1}, f32[80,64,64,128]{3,2,0,1}, f32[80,64,8,128]{3,2,0,1}, /*index=20*/bf16[80,2,8192,8192]{3,2,1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}) while(%tuple.8), condition=%region_31.1533_spmd, body=%region_17.1506_spmd
  %get-tuple-element.78 = f32[80,64,28672]{2,1,0} get-tuple-element(%while.1), index=2
  %transpose.32 = f32[64,80,28672]{2,0,1} transpose(%get-tuple-element.78), dimensions={1,0,2}
  %multiply.312 = f32[64,80,28672]{2,0,1} multiply(%transpose.32, %transpose.32)
  %reduce.40 = f32[] reduce(%multiply.312, %constant.1089), dimensions={0,1,2}, to_apply=%region_33.1570
  %all-reduce.18 = f32[] all-reduce(%reduce.40), channel_id=35, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_33.1570.clone
  %add.238 = f32[] add(%reduce.38, %all-reduce.18)
  %get-tuple-element.79 = f32[80,64,28672]{2,1,0} get-tuple-element(%while.1), index=3
  %transpose.33 = f32[64,80,28672]{2,0,1} transpose(%get-tuple-element.79), dimensions={1,0,2}
  %multiply.313 = f32[64,80,28672]{2,0,1} multiply(%transpose.33, %transpose.33)
  %reduce.41 = f32[] reduce(%multiply.313, %constant.1089), dimensions={0,1,2}, to_apply=%region_34.1577
  %all-reduce.19 = f32[] all-reduce(%reduce.41), channel_id=36, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_34.1577.clone
  %add.240 = f32[] add(%add.238, %all-reduce.19)
  %get-tuple-element.80 = f32[80,28672,64]{2,1,0} get-tuple-element(%while.1), index=4
  %transpose.34 = f32[28672,80,64]{2,0,1} transpose(%get-tuple-element.80), dimensions={1,0,2}
  %multiply.314 = f32[28672,80,64]{2,0,1} multiply(%transpose.34, %transpose.34)
  %reduce.42 = f32[] reduce(%multiply.314, %constant.1089), dimensions={0,1,2}, to_apply=%region_35.1584
  %all-reduce.20 = f32[] all-reduce(%reduce.42), channel_id=37, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_35.1584.clone
  %add.241 = f32[] add(%add.240, %all-reduce.20)
  %get-tuple-element.81 = f32[80,8192]{1,0} get-tuple-element(%while.1), index=5
  %transpose.35 = f32[8192,80]{0,1} transpose(%get-tuple-element.81), dimensions={1,0}
  %multiply.315 = f32[8192,80]{0,1} multiply(%transpose.35, %transpose.35)
  %reduce.43 = f32[] reduce(%multiply.315, %constant.1089), dimensions={0,1}, to_apply=%region_36.1591
  %add.242 = f32[] add(%add.241, %reduce.43)
  %get-tuple-element.82 = f32[80,8192]{1,0} get-tuple-element(%while.1), index=6
  %transpose.36 = f32[8192,80]{0,1} transpose(%get-tuple-element.82), dimensions={1,0}
  %multiply.316 = f32[8192,80]{0,1} multiply(%transpose.36, %transpose.36)
  %reduce.44 = f32[] reduce(%multiply.316, %constant.1089), dimensions={0,1}, to_apply=%region_37.1598
  %add.243 = f32[] add(%add.242, %reduce.44)
  %get-tuple-element.83 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%while.1), index=7
  %transpose.37 = f32[64,80,8,128]{3,2,0,1} transpose(%get-tuple-element.83), dimensions={1,0,2,3}
  %multiply.318 = f32[64,80,8,128]{3,2,0,1} multiply(%transpose.37, %transpose.37)
  %reduce.45 = f32[] reduce(%multiply.318, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_38.1605
  %all-reduce.21 = f32[] all-reduce(%reduce.45), channel_id=38, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_38.1605.clone
  %add.245 = f32[] add(%add.243, %all-reduce.21)
  %get-tuple-element.84 = f32[80,64,128,64]{3,2,1,0} get-tuple-element(%while.1), index=8
  %transpose.38 = f32[64,80,128,64]{3,2,0,1} transpose(%get-tuple-element.84), dimensions={1,0,2,3}
  %multiply.319 = f32[64,80,128,64]{3,2,0,1} multiply(%transpose.38, %transpose.38)
  %reduce.46 = f32[] reduce(%multiply.319, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_39.1612
  %all-reduce.22 = f32[] all-reduce(%reduce.46), channel_id=39, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_39.1612.clone
  %add.246 = f32[] add(%add.245, %all-reduce.22)
  %get-tuple-element.85 = f32[80,64,64,128]{3,2,1,0} get-tuple-element(%while.1), index=9
  %transpose.39 = f32[64,80,64,128]{3,2,0,1} transpose(%get-tuple-element.85), dimensions={1,0,2,3}
  %multiply.320 = f32[64,80,64,128]{3,2,0,1} multiply(%transpose.39, %transpose.39)
  %reduce.47 = f32[] reduce(%multiply.320, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_40.1619
  %all-reduce.23 = f32[] all-reduce(%reduce.47), channel_id=40, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_40.1619.clone
  %add.248 = f32[] add(%add.246, %all-reduce.23)
  %get-tuple-element.86 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%while.1), index=10
  %transpose.40 = f32[64,80,8,128]{3,2,0,1} transpose(%get-tuple-element.86), dimensions={1,0,2,3}
  %multiply.321 = f32[64,80,8,128]{3,2,0,1} multiply(%transpose.40, %transpose.40)
  %reduce.48 = f32[] reduce(%multiply.321, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_41.1626
  %all-reduce.24 = f32[] all-reduce(%reduce.48), channel_id=41, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_41.1626.clone
  %add.249 = f32[] add(%add.248, %all-reduce.24)
  %dot.62 = bf16[8192,128256]{1,0} dot(%multiply.299, %copy.83), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.25 = bf16[8192,128256]{1,0} all-reduce(%dot.62), channel_id=42, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.14.clone
  %constant.1141 = s32[128]{0} constant({0, 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432, 2496, 2560, 2624, 2688, 2752, 2816, 2880, 2944, 3008, 3072, 3136, 3200, 3264, 3328, 3392, 3456, 3520, 3584, 3648, 3712, 3776, 3840, 3904, 3968, 4032, 4096, 4160, 4224, 4288, 4352, 4416, 4480, 4544, 4608, 4672, 4736, 4800, 4864, 4928, 4992, 5056, 5120, 5184, 5248, 5312, 5376, 5440, 5504, 5568, 5632, 5696, 5760, 5824, 5888, 5952, 6016, 6080, 6144, 6208, 6272, 6336, 6400, 6464, 6528, 6592, 6656, 6720, 6784, 6848, 6912, 6976, 7040, 7104, 7168, 7232, 7296, 7360, 7424, 7488, 7552, 7616, 7680, 7744, 7808, 7872, 7936, 8000, 8064, 8128})
  %constant.1140 = u32[256]{0} constant({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127})
  %partition-id.12 = u32[] partition-id()
  %dynamic-slice.86 = u32[1]{0} dynamic-slice(%constant.1140, %partition-id.12), dynamic_slice_sizes={1}
  %reshape.631 = u32[] reshape(%dynamic-slice.86)
  %dynamic-slice.87 = s32[1]{0} dynamic-slice(%constant.1141, %reshape.631), dynamic_slice_sizes={1}
  %reshape.632 = s32[] reshape(%dynamic-slice.87)
  %dynamic-slice.88 = bf16[64,128256]{1,0} dynamic-slice(%all-reduce.25, %reshape.632, %constant.1048), dynamic_slice_sizes={64,128256}
  %all-reduce.26 = bf16[64,128256]{1,0} all-reduce(%dynamic-slice.88), channel_id=43, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.15.clone
  %convert.209 = f32[64,128256]{0,1} convert(%all-reduce.26)
  %multiply.322 = f32[64,128256]{0,1} multiply(%convert.209, %convert.209)
  %reduce.49 = f32[] reduce(%multiply.322, %constant.1089), dimensions={0,1}, to_apply=%region_42.1633
  %all-reduce.27 = f32[] all-reduce(%reduce.49), channel_id=44, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_42.1633.clone
  %add.250 = f32[] add(%add.249, %all-reduce.27)
  %get-tuple-element.87 = bf16[2,8192,8192]{2,1,0} get-tuple-element(%while.1), index=1
  %copy.84 = bf16[2,8192,8192]{2,1,0} copy(%get-tuple-element.87)
  %dot.63 = bf16[128256,8192]{1,0} dot(%convert.183, %copy.84), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.28 = bf16[128256,8192]{1,0} all-reduce(%dot.63), channel_id=45, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.16.clone
  %dynamic-slice.92 = bf16[128256,64]{1,0} dynamic-slice(%all-reduce.28, %constant.1048, %reshape.632), dynamic_slice_sizes={128256,64}
  %all-reduce.29 = bf16[128256,64]{1,0} all-reduce(%dynamic-slice.92), channel_id=46, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.17.clone
  %convert.210 = f32[128256,64]{0,1} convert(%all-reduce.29)
  %multiply.323 = f32[128256,64]{0,1} multiply(%convert.210, %convert.210)
  %reduce.50 = f32[] reduce(%multiply.323, %constant.1089), dimensions={0,1}, to_apply=%region_43.1640
  %all-reduce.30 = f32[] all-reduce(%reduce.50), channel_id=47, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_43.1640.clone
  %add.251 = f32[] add(%add.250, %all-reduce.30)
  %sqrt.0 = f32[] sqrt(%add.251)
  %compare.185 = pred[] compare(%sqrt.0, %constant.1046), direction=LT
  %broadcast.731 = pred[8192]{0} broadcast(%compare.185), dimensions={}
  %broadcast.732 = f32[8192]{0} broadcast(%sqrt.0), dimensions={}
  %divide.67 = f32[8192]{0} divide(%convert.206, %broadcast.732)
  %select.121 = f32[8192]{0} select(%broadcast.731, %convert.206, %divide.67)
  %constant.1152 = f32[] constant(0.1)
  %broadcast.733 = f32[8192]{0} broadcast(%constant.1152), dimensions={}
  %multiply.324 = f32[8192]{0} multiply(%select.121, %broadcast.733)
  %param.23 = f32[8192]{0} parameter(14), sharding={replicated}
  %constant.1153 = f32[] constant(0.9)
  %broadcast.734 = f32[8192]{0} broadcast(%constant.1153), dimensions={}
  %multiply.325 = f32[8192]{0} multiply(%param.23, %broadcast.734)
  %add.252 = f32[8192]{0} add(%multiply.324, %multiply.325)
  %param.24 = s32[] parameter(13), sharding={replicated}
  %constant.1156 = s32[] constant(2147483647)
  %compare.186 = pred[] compare(%param.24, %constant.1156), direction=LT
  %add.253 = s32[] add(%param.24, %constant.1044)
  %select.123 = s32[] select(%compare.186, %add.253, %constant.1156)
  %convert.211 = f32[] convert(%select.123)
  %power.18 = f32[] power(%constant.1153, %convert.211)
  %subtract.23 = f32[] subtract(%constant.1046, %power.18)
  %broadcast.735 = f32[8192]{0} broadcast(%subtract.23), dimensions={}
  %multiply.326 = f32[8192]{0} multiply(%select.121, %select.121)
  %constant.1159 = f32[] constant(0.05)
  %broadcast.736 = f32[8192]{0} broadcast(%constant.1159), dimensions={}
  %multiply.327 = f32[8192]{0} multiply(%multiply.326, %broadcast.736)
  %param.25 = f32[8192]{0} parameter(26), sharding={replicated}
  %constant.1160 = f32[] constant(0.95)
  %broadcast.737 = f32[8192]{0} broadcast(%constant.1160), dimensions={}
  %multiply.328 = f32[8192]{0} multiply(%param.25, %broadcast.737)
  %add.255 = f32[8192]{0} add(%multiply.327, %multiply.328)
  %power.19 = f32[] power(%constant.1160, %convert.211)
  %subtract.24 = f32[] subtract(%constant.1046, %power.19)
  %broadcast.738 = f32[8192]{0} broadcast(%subtract.24), dimensions={}
  %divide.68 = f32[8192]{0} divide(%add.255, %broadcast.738)
  %sqrt.1 = f32[8192]{0} sqrt(%divide.68)
  %broadcast.739 = f32[8192]{0} broadcast(%constant.1110), dimensions={}
  %add.256 = f32[8192]{0} add(%sqrt.1, %broadcast.739)
  %multiply.329 = f32[8192]{0} multiply(%broadcast.735, %add.256)
  %divide.69 = f32[8192]{0} divide(%add.252, %multiply.329)
  %multiply.330 = f32[8192]{0} multiply(%param.5, %broadcast.733)
  %add.257 = f32[8192]{0} add(%divide.69, %multiply.330)
  %multiply.331 = f32[8192]{0} multiply(%broadcast.650, %add.257)
  %add.258 = f32[8192]{0} add(%param.5, %multiply.331)
  %broadcast.740 = f32[64,80,28672]{2,1,0} broadcast(%multiply.272), dimensions={}
  %broadcast.741 = pred[64,80,28672]{2,0,1} broadcast(%compare.185), dimensions={}
  %broadcast.742 = f32[64,80,28672]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.70 = f32[64,80,28672]{2,0,1} divide(%transpose.32, %broadcast.742)
  %select.124 = f32[64,80,28672]{2,0,1} select(%broadcast.741, %transpose.32, %divide.70)
  %broadcast.743 = f32[64,80,28672]{2,1,0} broadcast(%constant.1152), dimensions={}
  %multiply.332 = f32[64,80,28672]{2,0,1} multiply(%select.124, %broadcast.743)
  %param.26 = f32[64,80,28672]{2,1,0} parameter(15), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.744 = f32[64,80,28672]{2,1,0} broadcast(%constant.1153), dimensions={}
  %multiply.334 = f32[64,80,28672]{2,1,0} multiply(%param.26, %broadcast.744)
  %add.259 = f32[64,80,28672]{2,0,1} add(%multiply.332, %multiply.334)
  %broadcast.745 = f32[64,80,28672]{2,1,0} broadcast(%subtract.23), dimensions={}
  %multiply.336 = f32[64,80,28672]{2,0,1} multiply(%select.124, %select.124)
  %broadcast.746 = f32[64,80,28672]{2,1,0} broadcast(%constant.1159), dimensions={}
  %multiply.337 = f32[64,80,28672]{2,0,1} multiply(%multiply.336, %broadcast.746)
  %param.27 = f32[64,80,28672]{2,1,0} parameter(27), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.747 = f32[64,80,28672]{2,1,0} broadcast(%constant.1160), dimensions={}
  %multiply.338 = f32[64,80,28672]{2,1,0} multiply(%param.27, %broadcast.747)
  %add.260 = f32[64,80,28672]{2,0,1} add(%multiply.337, %multiply.338)
  %broadcast.748 = f32[64,80,28672]{2,1,0} broadcast(%subtract.24), dimensions={}
  %divide.71 = f32[64,80,28672]{2,0,1} divide(%add.260, %broadcast.748)
  %sqrt.2 = f32[64,80,28672]{2,0,1} sqrt(%divide.71)
  %broadcast.749 = f32[64,80,28672]{2,1,0} broadcast(%constant.1110), dimensions={}
  %add.261 = f32[64,80,28672]{2,0,1} add(%sqrt.2, %broadcast.749)
  %multiply.339 = f32[64,80,28672]{2,1,0} multiply(%broadcast.745, %add.261)
  %divide.72 = f32[64,80,28672]{2,0,1} divide(%add.259, %multiply.339)
  %multiply.340 = f32[64,80,28672]{2,1,0} multiply(%param.9, %broadcast.743)
  %add.262 = f32[64,80,28672]{2,0,1} add(%divide.72, %multiply.340)
  %multiply.341 = f32[64,80,28672]{2,1,0} multiply(%broadcast.740, %add.262)
  %add.263 = f32[64,80,28672]{2,1,0} add(%param.9, %multiply.341)
  %divide.73 = f32[64,80,28672]{2,0,1} divide(%transpose.33, %broadcast.742)
  %select.125 = f32[64,80,28672]{2,0,1} select(%broadcast.741, %transpose.33, %divide.73)
  %multiply.342 = f32[64,80,28672]{2,0,1} multiply(%select.125, %broadcast.743)
  %param.28 = f32[64,80,28672]{2,1,0} parameter(16), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %multiply.343 = f32[64,80,28672]{2,1,0} multiply(%param.28, %broadcast.744)
  %add.264 = f32[64,80,28672]{2,0,1} add(%multiply.342, %multiply.343)
  %multiply.344 = f32[64,80,28672]{2,0,1} multiply(%select.125, %select.125)
  %multiply.345 = f32[64,80,28672]{2,0,1} multiply(%multiply.344, %broadcast.746)
  %param.29 = f32[64,80,28672]{2,1,0} parameter(28), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %multiply.346 = f32[64,80,28672]{2,1,0} multiply(%param.29, %broadcast.747)
  %add.265 = f32[64,80,28672]{2,0,1} add(%multiply.345, %multiply.346)
  %divide.74 = f32[64,80,28672]{2,0,1} divide(%add.265, %broadcast.748)
  %sqrt.3 = f32[64,80,28672]{2,0,1} sqrt(%divide.74)
  %add.266 = f32[64,80,28672]{2,0,1} add(%sqrt.3, %broadcast.749)
  %multiply.347 = f32[64,80,28672]{2,1,0} multiply(%broadcast.745, %add.266)
  %divide.75 = f32[64,80,28672]{2,0,1} divide(%add.264, %multiply.347)
  %multiply.348 = f32[64,80,28672]{2,1,0} multiply(%param.10, %broadcast.743)
  %add.267 = f32[64,80,28672]{2,0,1} add(%divide.75, %multiply.348)
  %multiply.349 = f32[64,80,28672]{2,1,0} multiply(%broadcast.740, %add.267)
  %add.268 = f32[64,80,28672]{2,1,0} add(%param.10, %multiply.349)
  %broadcast.755 = f32[28672,80,64]{2,1,0} broadcast(%multiply.272), dimensions={}
  %broadcast.756 = pred[28672,80,64]{2,0,1} broadcast(%compare.185), dimensions={}
  %broadcast.757 = f32[28672,80,64]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.76 = f32[28672,80,64]{2,0,1} divide(%transpose.34, %broadcast.757)
  %select.126 = f32[28672,80,64]{2,0,1} select(%broadcast.756, %transpose.34, %divide.76)
  %broadcast.758 = f32[28672,80,64]{2,1,0} broadcast(%constant.1152), dimensions={}
  %multiply.350 = f32[28672,80,64]{2,0,1} multiply(%select.126, %broadcast.758)
  %param.30 = f32[28672,80,64]{2,1,0} parameter(17), sharding={devices=[1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.759 = f32[28672,80,64]{2,1,0} broadcast(%constant.1153), dimensions={}
  %multiply.351 = f32[28672,80,64]{2,1,0} multiply(%param.30, %broadcast.759)
  %add.269 = f32[28672,80,64]{2,0,1} add(%multiply.350, %multiply.351)
  %broadcast.760 = f32[28672,80,64]{2,1,0} broadcast(%subtract.23), dimensions={}
  %multiply.352 = f32[28672,80,64]{2,0,1} multiply(%select.126, %select.126)
  %broadcast.761 = f32[28672,80,64]{2,1,0} broadcast(%constant.1159), dimensions={}
  %multiply.353 = f32[28672,80,64]{2,0,1} multiply(%multiply.352, %broadcast.761)
  %param.31 = f32[28672,80,64]{2,1,0} parameter(29), sharding={devices=[1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.763 = f32[28672,80,64]{2,1,0} broadcast(%constant.1160), dimensions={}
  %multiply.354 = f32[28672,80,64]{2,1,0} multiply(%param.31, %broadcast.763)
  %add.270 = f32[28672,80,64]{2,0,1} add(%multiply.353, %multiply.354)
  %broadcast.764 = f32[28672,80,64]{2,1,0} broadcast(%subtract.24), dimensions={}
  %divide.77 = f32[28672,80,64]{2,0,1} divide(%add.270, %broadcast.764)
  %sqrt.4 = f32[28672,80,64]{2,0,1} sqrt(%divide.77)
  %broadcast.765 = f32[28672,80,64]{2,1,0} broadcast(%constant.1110), dimensions={}
  %add.271 = f32[28672,80,64]{2,0,1} add(%sqrt.4, %broadcast.765)
  %multiply.355 = f32[28672,80,64]{2,1,0} multiply(%broadcast.760, %add.271)
  %divide.78 = f32[28672,80,64]{2,0,1} divide(%add.269, %multiply.355)
  %multiply.356 = f32[28672,80,64]{2,1,0} multiply(%param.11, %broadcast.758)
  %add.272 = f32[28672,80,64]{2,0,1} add(%divide.78, %multiply.356)
  %multiply.357 = f32[28672,80,64]{2,1,0} multiply(%broadcast.755, %add.272)
  %add.273 = f32[28672,80,64]{2,1,0} add(%param.11, %multiply.357)
  %broadcast.766 = f32[8192,80]{1,0} broadcast(%multiply.272), dimensions={}
  %broadcast.767 = pred[8192,80]{0,1} broadcast(%compare.185), dimensions={}
  %broadcast.769 = f32[8192,80]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.79 = f32[8192,80]{0,1} divide(%transpose.35, %broadcast.769)
  %select.127 = f32[8192,80]{0,1} select(%broadcast.767, %transpose.35, %divide.79)
  %broadcast.771 = f32[8192,80]{1,0} broadcast(%constant.1152), dimensions={}
  %multiply.358 = f32[8192,80]{0,1} multiply(%select.127, %broadcast.771)
  %param.32 = f32[8192,80]{1,0} parameter(18), sharding={replicated}
  %broadcast.773 = f32[8192,80]{1,0} broadcast(%constant.1153), dimensions={}
  %multiply.359 = f32[8192,80]{1,0} multiply(%param.32, %broadcast.773)
  %add.274 = f32[8192,80]{0,1} add(%multiply.358, %multiply.359)
  %broadcast.775 = f32[8192,80]{1,0} broadcast(%subtract.23), dimensions={}
  %multiply.360 = f32[8192,80]{0,1} multiply(%select.127, %select.127)
  %broadcast.776 = f32[8192,80]{1,0} broadcast(%constant.1159), dimensions={}
  %multiply.361 = f32[8192,80]{0,1} multiply(%multiply.360, %broadcast.776)
  %param.33 = f32[8192,80]{1,0} parameter(30), sharding={replicated}
  %broadcast.777 = f32[8192,80]{1,0} broadcast(%constant.1160), dimensions={}
  %multiply.362 = f32[8192,80]{1,0} multiply(%param.33, %broadcast.777)
  %add.275 = f32[8192,80]{0,1} add(%multiply.361, %multiply.362)
  %broadcast.779 = f32[8192,80]{1,0} broadcast(%subtract.24), dimensions={}
  %divide.80 = f32[8192,80]{0,1} divide(%add.275, %broadcast.779)
  %sqrt.5 = f32[8192,80]{0,1} sqrt(%divide.80)
  %broadcast.781 = f32[8192,80]{1,0} broadcast(%constant.1110), dimensions={}
  %add.276 = f32[8192,80]{0,1} add(%sqrt.5, %broadcast.781)
  %multiply.363 = f32[8192,80]{1,0} multiply(%broadcast.775, %add.276)
  %divide.81 = f32[8192,80]{0,1} divide(%add.274, %multiply.363)
  %multiply.364 = f32[8192,80]{1,0} multiply(%param.12, %broadcast.771)
  %add.277 = f32[8192,80]{0,1} add(%divide.81, %multiply.364)
  %multiply.365 = f32[8192,80]{1,0} multiply(%broadcast.766, %add.277)
  %add.278 = f32[8192,80]{1,0} add(%param.12, %multiply.365)
  %divide.82 = f32[8192,80]{0,1} divide(%transpose.36, %broadcast.769)
  %select.128 = f32[8192,80]{0,1} select(%broadcast.767, %transpose.36, %divide.82)
  %multiply.366 = f32[8192,80]{0,1} multiply(%select.128, %broadcast.771)
  %param.34 = f32[8192,80]{1,0} parameter(19), sharding={replicated}
  %multiply.367 = f32[8192,80]{1,0} multiply(%param.34, %broadcast.773)
  %add.279 = f32[8192,80]{0,1} add(%multiply.366, %multiply.367)
  %multiply.368 = f32[8192,80]{0,1} multiply(%select.128, %select.128)
  %multiply.369 = f32[8192,80]{0,1} multiply(%multiply.368, %broadcast.776)
  %param.35 = f32[8192,80]{1,0} parameter(31), sharding={replicated}
  %multiply.370 = f32[8192,80]{1,0} multiply(%param.35, %broadcast.777)
  %add.280 = f32[8192,80]{0,1} add(%multiply.369, %multiply.370)
  %divide.83 = f32[8192,80]{0,1} divide(%add.280, %broadcast.779)
  %sqrt.6 = f32[8192,80]{0,1} sqrt(%divide.83)
  %add.281 = f32[8192,80]{0,1} add(%sqrt.6, %broadcast.781)
  %multiply.371 = f32[8192,80]{1,0} multiply(%broadcast.775, %add.281)
  %divide.84 = f32[8192,80]{0,1} divide(%add.279, %multiply.371)
  %multiply.372 = f32[8192,80]{1,0} multiply(%param.13, %broadcast.771)
  %add.282 = f32[8192,80]{0,1} add(%divide.84, %multiply.372)
  %multiply.373 = f32[8192,80]{1,0} multiply(%broadcast.766, %add.282)
  %add.283 = f32[8192,80]{1,0} add(%param.13, %multiply.373)
  %broadcast.787 = f32[64,80,8,128]{3,2,1,0} broadcast(%multiply.272), dimensions={}
  %broadcast.788 = pred[64,80,8,128]{3,2,0,1} broadcast(%compare.185), dimensions={}
  %broadcast.789 = f32[64,80,8,128]{3,2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.85 = f32[64,80,8,128]{3,2,0,1} divide(%transpose.37, %broadcast.789)
  %select.129 = f32[64,80,8,128]{3,2,0,1} select(%broadcast.788, %transpose.37, %divide.85)
  %broadcast.790 = f32[64,80,8,128]{3,2,1,0} broadcast(%constant.1152), dimensions={}
  %multiply.374 = f32[64,80,8,128]{3,2,0,1} multiply(%select.129, %broadcast.790)
  %param.36 = f32[64,80,8,128]{3,2,1,0} parameter(20), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.791 = f32[64,80,8,128]{3,2,1,0} broadcast(%constant.1153), dimensions={}
  %multiply.375 = f32[64,80,8,128]{3,2,1,0} multiply(%param.36, %broadcast.791)
  %add.285 = f32[64,80,8,128]{3,2,0,1} add(%multiply.374, %multiply.375)
  %broadcast.792 = f32[64,80,8,128]{3,2,1,0} broadcast(%subtract.23), dimensions={}
  %multiply.376 = f32[64,80,8,128]{3,2,0,1} multiply(%select.129, %select.129)
  %broadcast.793 = f32[64,80,8,128]{3,2,1,0} broadcast(%constant.1159), dimensions={}
  %multiply.377 = f32[64,80,8,128]{3,2,0,1} multiply(%multiply.376, %broadcast.793)
  %param.37 = f32[64,80,8,128]{3,2,1,0} parameter(32), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.794 = f32[64,80,8,128]{3,2,1,0} broadcast(%constant.1160), dimensions={}
  %multiply.378 = f32[64,80,8,128]{3,2,1,0} multiply(%param.37, %broadcast.794)
  %add.286 = f32[64,80,8,128]{3,2,0,1} add(%multiply.377, %multiply.378)
  %broadcast.796 = f32[64,80,8,128]{3,2,1,0} broadcast(%subtract.24), dimensions={}
  %divide.86 = f32[64,80,8,128]{3,2,0,1} divide(%add.286, %broadcast.796)
  %sqrt.7 = f32[64,80,8,128]{3,2,0,1} sqrt(%divide.86)
  %broadcast.798 = f32[64,80,8,128]{3,2,1,0} broadcast(%constant.1110), dimensions={}
  %add.287 = f32[64,80,8,128]{3,2,0,1} add(%sqrt.7, %broadcast.798)
  %multiply.379 = f32[64,80,8,128]{3,2,1,0} multiply(%broadcast.792, %add.287)
  %divide.87 = f32[64,80,8,128]{3,2,0,1} divide(%add.285, %multiply.379)
  %multiply.380 = f32[64,80,8,128]{3,2,1,0} multiply(%param.14, %broadcast.790)
  %add.288 = f32[64,80,8,128]{3,2,0,1} add(%divide.87, %multiply.380)
  %multiply.381 = f32[64,80,8,128]{3,2,1,0} multiply(%broadcast.787, %add.288)
  %add.289 = f32[64,80,8,128]{3,2,1,0} add(%param.14, %multiply.381)
  %broadcast.799 = f32[64,80,128,64]{3,2,1,0} broadcast(%multiply.272), dimensions={}
  %broadcast.800 = pred[64,80,128,64]{3,2,0,1} broadcast(%compare.185), dimensions={}
  %broadcast.801 = f32[64,80,128,64]{3,2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.88 = f32[64,80,128,64]{3,2,0,1} divide(%transpose.38, %broadcast.801)
  %select.130 = f32[64,80,128,64]{3,2,0,1} select(%broadcast.800, %transpose.38, %divide.88)
  %broadcast.802 = f32[64,80,128,64]{3,2,1,0} broadcast(%constant.1152), dimensions={}
  %multiply.382 = f32[64,80,128,64]{3,2,0,1} multiply(%select.130, %broadcast.802)
  %param.38 = f32[64,80,128,64]{3,2,1,0} parameter(21), sharding={devices=[1,1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.803 = f32[64,80,128,64]{3,2,1,0} broadcast(%constant.1153), dimensions={}
  %multiply.383 = f32[64,80,128,64]{3,2,1,0} multiply(%param.38, %broadcast.803)
  %add.290 = f32[64,80,128,64]{3,2,0,1} add(%multiply.382, %multiply.383)
  %broadcast.804 = f32[64,80,128,64]{3,2,1,0} broadcast(%subtract.23), dimensions={}
  %multiply.384 = f32[64,80,128,64]{3,2,0,1} multiply(%select.130, %select.130)
  %broadcast.805 = f32[64,80,128,64]{3,2,1,0} broadcast(%constant.1159), dimensions={}
  %multiply.385 = f32[64,80,128,64]{3,2,0,1} multiply(%multiply.384, %broadcast.805)
  %param.39 = f32[64,80,128,64]{3,2,1,0} parameter(33), sharding={devices=[1,1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.806 = f32[64,80,128,64]{3,2,1,0} broadcast(%constant.1160), dimensions={}
  %multiply.386 = f32[64,80,128,64]{3,2,1,0} multiply(%param.39, %broadcast.806)
  %add.291 = f32[64,80,128,64]{3,2,0,1} add(%multiply.385, %multiply.386)
  %broadcast.807 = f32[64,80,128,64]{3,2,1,0} broadcast(%subtract.24), dimensions={}
  %divide.89 = f32[64,80,128,64]{3,2,0,1} divide(%add.291, %broadcast.807)
  %sqrt.8 = f32[64,80,128,64]{3,2,0,1} sqrt(%divide.89)
  %broadcast.808 = f32[64,80,128,64]{3,2,1,0} broadcast(%constant.1110), dimensions={}
  %add.292 = f32[64,80,128,64]{3,2,0,1} add(%sqrt.8, %broadcast.808)
  %multiply.387 = f32[64,80,128,64]{3,2,1,0} multiply(%broadcast.804, %add.292)
  %divide.90 = f32[64,80,128,64]{3,2,0,1} divide(%add.290, %multiply.387)
  %multiply.388 = f32[64,80,128,64]{3,2,1,0} multiply(%param.15, %broadcast.802)
  %add.293 = f32[64,80,128,64]{3,2,0,1} add(%divide.90, %multiply.388)
  %multiply.389 = f32[64,80,128,64]{3,2,1,0} multiply(%broadcast.799, %add.293)
  %add.294 = f32[64,80,128,64]{3,2,1,0} add(%param.15, %multiply.389)
  %broadcast.809 = f32[64,80,64,128]{3,2,1,0} broadcast(%multiply.272), dimensions={}
  %broadcast.810 = pred[64,80,64,128]{3,2,0,1} broadcast(%compare.185), dimensions={}
  %broadcast.811 = f32[64,80,64,128]{3,2,1,0} broadcast(%sqrt.0), dimensions={}
  %divide.91 = f32[64,80,64,128]{3,2,0,1} divide(%transpose.39, %broadcast.811)
  %select.131 = f32[64,80,64,128]{3,2,0,1} select(%broadcast.810, %transpose.39, %divide.91)
  %broadcast.812 = f32[64,80,64,128]{3,2,1,0} broadcast(%constant.1152), dimensions={}
  %multiply.390 = f32[64,80,64,128]{3,2,0,1} multiply(%select.131, %broadcast.812)
  %param.40 = f32[64,80,64,128]{3,2,1,0} parameter(22), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.814 = f32[64,80,64,128]{3,2,1,0} broadcast(%constant.1153), dimensions={}
  %multiply.391 = f32[64,80,64,128]{3,2,1,0} multiply(%param.40, %broadcast.814)
  %add.295 = f32[64,80,64,128]{3,2,0,1} add(%multiply.390, %multiply.391)
  %broadcast.816 = f32[64,80,64,128]{3,2,1,0} broadcast(%subtract.23), dimensions={}
  %multiply.392 = f32[64,80,64,128]{3,2,0,1} multiply(%select.131, %select.131)
  %broadcast.817 = f32[64,80,64,128]{3,2,1,0} broadcast(%constant.1159), dimensions={}
  %multiply.393 = f32[64,80,64,128]{3,2,0,1} multiply(%multiply.392, %broadcast.817)
  %param.41 = f32[64,80,64,128]{3,2,1,0} parameter(34), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.818 = f32[64,80,64,128]{3,2,1,0} broadcast(%constant.1160), dimensions={}
  %multiply.394 = f32[64,80,64,128]{3,2,1,0} multiply(%param.41, %broadcast.818)
  %add.296 = f32[64,80,64,128]{3,2,0,1} add(%multiply.393, %multiply.394)
  %broadcast.819 = f32[64,80,64,128]{3,2,1,0} broadcast(%subtract.24), dimensions={}
  %divide.92 = f32[64,80,64,128]{3,2,0,1} divide(%add.296, %broadcast.819)
  %sqrt.9 = f32[64,80,64,128]{3,2,0,1} sqrt(%divide.92)
  %broadcast.820 = f32[64,80,64,128]{3,2,1,0} broadcast(%constant.1110), dimensions={}
  %add.297 = f32[64,80,64,128]{3,2,0,1} add(%sqrt.9, %broadcast.820)
  %multiply.395 = f32[64,80,64,128]{3,2,1,0} multiply(%broadcast.816, %add.297)
  %divide.93 = f32[64,80,64,128]{3,2,0,1} divide(%add.295, %multiply.395)
  %multiply.396 = f32[64,80,64,128]{3,2,1,0} multiply(%param.16, %broadcast.812)
  %add.298 = f32[64,80,64,128]{3,2,0,1} add(%divide.93, %multiply.396)
  %multiply.397 = f32[64,80,64,128]{3,2,1,0} multiply(%broadcast.809, %add.298)
  %add.299 = f32[64,80,64,128]{3,2,1,0} add(%param.16, %multiply.397)
  %divide.94 = f32[64,80,8,128]{3,2,0,1} divide(%transpose.40, %broadcast.789)
  %select.132 = f32[64,80,8,128]{3,2,0,1} select(%broadcast.788, %transpose.40, %divide.94)
  %multiply.398 = f32[64,80,8,128]{3,2,0,1} multiply(%select.132, %broadcast.790)
  %param.42 = f32[64,80,8,128]{3,2,1,0} parameter(23), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %multiply.399 = f32[64,80,8,128]{3,2,1,0} multiply(%param.42, %broadcast.791)
  %add.300 = f32[64,80,8,128]{3,2,0,1} add(%multiply.398, %multiply.399)
  %multiply.400 = f32[64,80,8,128]{3,2,0,1} multiply(%select.132, %select.132)
  %multiply.401 = f32[64,80,8,128]{3,2,0,1} multiply(%multiply.400, %broadcast.793)
  %param.43 = f32[64,80,8,128]{3,2,1,0} parameter(35), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %multiply.402 = f32[64,80,8,128]{3,2,1,0} multiply(%param.43, %broadcast.794)
  %add.301 = f32[64,80,8,128]{3,2,0,1} add(%multiply.401, %multiply.402)
  %divide.95 = f32[64,80,8,128]{3,2,0,1} divide(%add.301, %broadcast.796)
  %sqrt.10 = f32[64,80,8,128]{3,2,0,1} sqrt(%divide.95)
  %add.302 = f32[64,80,8,128]{3,2,0,1} add(%sqrt.10, %broadcast.798)
  %multiply.403 = f32[64,80,8,128]{3,2,1,0} multiply(%broadcast.792, %add.302)
  %divide.96 = f32[64,80,8,128]{3,2,0,1} divide(%add.300, %multiply.403)
  %multiply.404 = f32[64,80,8,128]{3,2,1,0} multiply(%param.17, %broadcast.790)
  %add.303 = f32[64,80,8,128]{3,2,0,1} add(%divide.96, %multiply.404)
  %multiply.405 = f32[64,80,8,128]{3,2,1,0} multiply(%broadcast.787, %add.303)
  %add.304 = f32[64,80,8,128]{3,2,1,0} add(%param.17, %multiply.405)
  %broadcast.827 = f32[64,128256]{1,0} broadcast(%multiply.272), dimensions={}
  %broadcast.828 = pred[64,128256]{0,1} broadcast(%compare.185), dimensions={}
  %broadcast.829 = f32[64,128256]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.97 = f32[64,128256]{0,1} divide(%convert.209, %broadcast.829)
  %select.133 = f32[64,128256]{0,1} select(%broadcast.828, %convert.209, %divide.97)
  %broadcast.830 = f32[64,128256]{1,0} broadcast(%constant.1152), dimensions={}
  %multiply.406 = f32[64,128256]{0,1} multiply(%select.133, %broadcast.830)
  %param.44 = f32[64,128256]{1,0} parameter(24), sharding={devices=[128,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.831 = f32[64,128256]{1,0} broadcast(%constant.1153), dimensions={}
  %multiply.407 = f32[64,128256]{1,0} multiply(%param.44, %broadcast.831)
  %add.305 = f32[64,128256]{0,1} add(%multiply.406, %multiply.407)
  %broadcast.832 = f32[64,128256]{1,0} broadcast(%subtract.23), dimensions={}
  %multiply.408 = f32[64,128256]{0,1} multiply(%select.133, %select.133)
  %broadcast.833 = f32[64,128256]{1,0} broadcast(%constant.1159), dimensions={}
  %multiply.409 = f32[64,128256]{0,1} multiply(%multiply.408, %broadcast.833)
  %param.45 = f32[64,128256]{1,0} parameter(36), sharding={devices=[128,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.834 = f32[64,128256]{1,0} broadcast(%constant.1160), dimensions={}
  %multiply.410 = f32[64,128256]{1,0} multiply(%param.45, %broadcast.834)
  %add.306 = f32[64,128256]{0,1} add(%multiply.409, %multiply.410)
  %broadcast.835 = f32[64,128256]{1,0} broadcast(%subtract.24), dimensions={}
  %divide.98 = f32[64,128256]{0,1} divide(%add.306, %broadcast.835)
  %sqrt.11 = f32[64,128256]{0,1} sqrt(%divide.98)
  %broadcast.836 = f32[64,128256]{1,0} broadcast(%constant.1110), dimensions={}
  %add.307 = f32[64,128256]{0,1} add(%sqrt.11, %broadcast.836)
  %multiply.411 = f32[64,128256]{1,0} multiply(%broadcast.832, %add.307)
  %divide.99 = f32[64,128256]{0,1} divide(%add.305, %multiply.411)
  %multiply.412 = f32[64,128256]{1,0} multiply(%param.21, %broadcast.830)
  %add.308 = f32[64,128256]{0,1} add(%divide.99, %multiply.412)
  %multiply.413 = f32[64,128256]{1,0} multiply(%broadcast.827, %add.308)
  %add.309 = f32[64,128256]{1,0} add(%param.21, %multiply.413)
  %broadcast.837 = f32[128256,64]{1,0} broadcast(%multiply.272), dimensions={}
  %broadcast.838 = pred[128256,64]{0,1} broadcast(%compare.185), dimensions={}
  %broadcast.839 = f32[128256,64]{1,0} broadcast(%sqrt.0), dimensions={}
  %divide.100 = f32[128256,64]{0,1} divide(%convert.210, %broadcast.839)
  %select.134 = f32[128256,64]{0,1} select(%broadcast.838, %convert.210, %divide.100)
  %broadcast.840 = f32[128256,64]{1,0} broadcast(%constant.1152), dimensions={}
  %multiply.414 = f32[128256,64]{0,1} multiply(%select.134, %broadcast.840)
  %param.46 = f32[128256,64]{1,0} parameter(25), sharding={devices=[1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.841 = f32[128256,64]{1,0} broadcast(%constant.1153), dimensions={}
  %multiply.415 = f32[128256,64]{1,0} multiply(%param.46, %broadcast.841)
  %add.310 = f32[128256,64]{0,1} add(%multiply.414, %multiply.415)
  %broadcast.842 = f32[128256,64]{1,0} broadcast(%subtract.23), dimensions={}
  %multiply.416 = f32[128256,64]{0,1} multiply(%select.134, %select.134)
  %broadcast.843 = f32[128256,64]{1,0} broadcast(%constant.1159), dimensions={}
  %multiply.417 = f32[128256,64]{0,1} multiply(%multiply.416, %broadcast.843)
  %param.47 = f32[128256,64]{1,0} parameter(37), sharding={devices=[1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.844 = f32[128256,64]{1,0} broadcast(%constant.1160), dimensions={}
  %multiply.418 = f32[128256,64]{1,0} multiply(%param.47, %broadcast.844)
  %add.311 = f32[128256,64]{0,1} add(%multiply.417, %multiply.418)
  %broadcast.845 = f32[128256,64]{1,0} broadcast(%subtract.24), dimensions={}
  %divide.101 = f32[128256,64]{0,1} divide(%add.311, %broadcast.845)
  %sqrt.12 = f32[128256,64]{0,1} sqrt(%divide.101)
  %broadcast.846 = f32[128256,64]{1,0} broadcast(%constant.1110), dimensions={}
  %add.312 = f32[128256,64]{0,1} add(%sqrt.12, %broadcast.846)
  %multiply.419 = f32[128256,64]{1,0} multiply(%broadcast.842, %add.312)
  %divide.102 = f32[128256,64]{0,1} divide(%add.310, %multiply.419)
  %multiply.420 = f32[128256,64]{1,0} multiply(%param.8, %broadcast.840)
  %add.313 = f32[128256,64]{0,1} add(%divide.102, %multiply.420)
  %multiply.421 = f32[128256,64]{1,0} multiply(%broadcast.837, %add.313)
  %add.314 = f32[128256,64]{1,0} add(%param.8, %multiply.421)
  %compare.187 = pred[] compare(%param.6, %constant.1156), direction=LT
  %add.315 = s32[] add(%param.6, %constant.1044)
  %select.135 = s32[] select(%compare.187, %add.315, %constant.1156)
  %reduce.51 = f32[] reduce(%multiply.326, %constant.1089), dimensions={0}, to_apply=%region_44.1975
  %reduce.52 = f32[] reduce(%multiply.336, %constant.1089), dimensions={0,1,2}, to_apply=%region_45.1981
  %all-reduce.31 = f32[] all-reduce(%reduce.52), channel_id=48, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_45.1981.clone
  %add.316 = f32[] add(%reduce.51, %all-reduce.31)
  %reduce.53 = f32[] reduce(%multiply.344, %constant.1089), dimensions={0,1,2}, to_apply=%region_46.1988
  %all-reduce.32 = f32[] all-reduce(%reduce.53), channel_id=49, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_46.1988.clone
  %add.317 = f32[] add(%add.316, %all-reduce.32)
  %reduce.54 = f32[] reduce(%multiply.352, %constant.1089), dimensions={0,1,2}, to_apply=%region_47.1995
  %all-reduce.33 = f32[] all-reduce(%reduce.54), channel_id=50, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_47.1995.clone
  %add.318 = f32[] add(%add.317, %all-reduce.33)
  %reduce.55 = f32[] reduce(%multiply.360, %constant.1089), dimensions={0,1}, to_apply=%region_48.2002
  %add.319 = f32[] add(%add.318, %reduce.55)
  %reduce.56 = f32[] reduce(%multiply.368, %constant.1089), dimensions={0,1}, to_apply=%region_49.2009
  %add.320 = f32[] add(%add.319, %reduce.56)
  %reduce.57 = f32[] reduce(%multiply.376, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_50.2016
  %all-reduce.34 = f32[] all-reduce(%reduce.57), channel_id=51, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_50.2016.clone
  %add.321 = f32[] add(%add.320, %all-reduce.34)
  %reduce.58 = f32[] reduce(%multiply.384, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_51.2023
  %all-reduce.35 = f32[] all-reduce(%reduce.58), channel_id=52, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_51.2023.clone
  %add.322 = f32[] add(%add.321, %all-reduce.35)
  %reduce.59 = f32[] reduce(%multiply.392, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_52.2030
  %all-reduce.36 = f32[] all-reduce(%reduce.59), channel_id=53, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_52.2030.clone
  %add.323 = f32[] add(%add.322, %all-reduce.36)
  %reduce.60 = f32[] reduce(%multiply.400, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_53.2037
  %all-reduce.37 = f32[] all-reduce(%reduce.60), channel_id=54, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_53.2037.clone
  %add.324 = f32[] add(%add.323, %all-reduce.37)
  %reduce.61 = f32[] reduce(%multiply.408, %constant.1089), dimensions={0,1}, to_apply=%region_54.2044
  %all-reduce.38 = f32[] all-reduce(%reduce.61), channel_id=55, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_54.2044.clone
  %add.325 = f32[] add(%add.324, %all-reduce.38)
  %reduce.62 = f32[] reduce(%multiply.416, %constant.1089), dimensions={0,1}, to_apply=%region_55.2051
  %all-reduce.39 = f32[] all-reduce(%reduce.62), channel_id=56, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_55.2051.clone
  %add.326 = f32[] add(%add.325, %all-reduce.39)
  %sqrt.13 = f32[] sqrt(%add.326)
  %broadcast.847 = f32[2,8192,128256]{2,1,0} broadcast(%log.2), dimensions={0,1}
  %subtract.25 = f32[2,8192,128256]{2,1,0} subtract(%subtract.21, %broadcast.847)
  %broadcast.848 = f32[2,8192,128256]{2,1,0} broadcast(%constant.1089), dimensions={}
  %select.136 = f32[2,8192,128256]{2,1,0} select(%compare.183, %subtract.25, %broadcast.848)
  %reduce.63 = f32[2,8192]{1,0} reduce(%select.136, %constant.1089), dimensions={2}, to_apply=%region_10.733
  %negate.32 = f32[2,8192]{1,0} negate(%reduce.63)
  %multiply.434 = f32[2,8192]{1,0} multiply(%add.234, %add.234)
  %multiply.435 = f32[2,8192]{1,0} multiply(%multiply.434, %broadcast.707)
  %add.327 = f32[2,8192]{1,0} add(%negate.32, %multiply.435)
  %copy.85 = f32[2,8192]{1,0} copy(%add.327)
  %select.137 = f32[2,8192]{1,0} select(%compare.180, %copy.85, %broadcast.707)
  %reduce.64 = f32[] reduce(%select.137, %constant.1089), dimensions={0,1}, to_apply=%region_11.749
  %all-reduce.40 = f32[] all-reduce(%reduce.64), channel_id=57, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_11.749.clone
  %divide.103 = f32[] divide(%all-reduce.40, %add.233)
  %multiply.436 = f32[8192]{0} multiply(%add.258, %add.258)
  %reduce.65 = f32[] reduce(%multiply.436, %constant.1089), dimensions={0}, to_apply=%region_68.2143
  %multiply.437 = f32[64,80,28672]{2,1,0} multiply(%add.263, %add.263)
  %reduce.66 = f32[] reduce(%multiply.437, %constant.1089), dimensions={0,1,2}, to_apply=%region_69.2149
  %all-reduce.41 = f32[] all-reduce(%reduce.66), channel_id=58, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_69.2149.clone
  %add.328 = f32[] add(%reduce.65, %all-reduce.41)
  %multiply.438 = f32[64,80,28672]{2,1,0} multiply(%add.268, %add.268)
  %reduce.67 = f32[] reduce(%multiply.438, %constant.1089), dimensions={0,1,2}, to_apply=%region_70.2156
  %all-reduce.42 = f32[] all-reduce(%reduce.67), channel_id=59, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_70.2156.clone
  %add.329 = f32[] add(%add.328, %all-reduce.42)
  %multiply.439 = f32[28672,80,64]{2,1,0} multiply(%add.273, %add.273)
  %reduce.68 = f32[] reduce(%multiply.439, %constant.1089), dimensions={0,1,2}, to_apply=%region_71.2163
  %all-reduce.43 = f32[] all-reduce(%reduce.68), channel_id=60, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_71.2163.clone
  %add.330 = f32[] add(%add.329, %all-reduce.43)
  %multiply.440 = f32[8192,80]{1,0} multiply(%add.278, %add.278)
  %reduce.69 = f32[] reduce(%multiply.440, %constant.1089), dimensions={0,1}, to_apply=%region_72.2170
  %add.331 = f32[] add(%add.330, %reduce.69)
  %multiply.441 = f32[8192,80]{1,0} multiply(%add.283, %add.283)
  %reduce.70 = f32[] reduce(%multiply.441, %constant.1089), dimensions={0,1}, to_apply=%region_73.2177
  %add.332 = f32[] add(%add.331, %reduce.70)
  %multiply.442 = f32[64,80,8,128]{3,2,1,0} multiply(%add.289, %add.289)
  %reduce.71 = f32[] reduce(%multiply.442, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_74.2184
  %all-reduce.44 = f32[] all-reduce(%reduce.71), channel_id=61, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_74.2184.clone
  %add.333 = f32[] add(%add.332, %all-reduce.44)
  %multiply.443 = f32[64,80,128,64]{3,2,1,0} multiply(%add.294, %add.294)
  %reduce.72 = f32[] reduce(%multiply.443, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_75.2191
  %all-reduce.45 = f32[] all-reduce(%reduce.72), channel_id=62, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_75.2191.clone
  %add.334 = f32[] add(%add.333, %all-reduce.45)
  %multiply.444 = f32[64,80,64,128]{3,2,1,0} multiply(%add.299, %add.299)
  %reduce.73 = f32[] reduce(%multiply.444, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_76.2198
  %all-reduce.46 = f32[] all-reduce(%reduce.73), channel_id=63, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_76.2198.clone
  %add.335 = f32[] add(%add.334, %all-reduce.46)
  %multiply.445 = f32[64,80,8,128]{3,2,1,0} multiply(%add.304, %add.304)
  %reduce.74 = f32[] reduce(%multiply.445, %constant.1089), dimensions={0,1,2,3}, to_apply=%region_77.2205
  %all-reduce.47 = f32[] all-reduce(%reduce.74), channel_id=64, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_77.2205.clone
  %add.337 = f32[] add(%add.335, %all-reduce.47)
  %multiply.446 = f32[64,128256]{1,0} multiply(%add.309, %add.309)
  %reduce.75 = f32[] reduce(%multiply.446, %constant.1089), dimensions={0,1}, to_apply=%region_78.2212
  %all-reduce.48 = f32[] all-reduce(%reduce.75), channel_id=65, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_78.2212.clone
  %add.338 = f32[] add(%add.337, %all-reduce.48)
  %multiply.447 = f32[128256,64]{1,0} multiply(%add.314, %add.314)
  %reduce.76 = f32[] reduce(%multiply.447, %constant.1089), dimensions={0,1}, to_apply=%region_79.2219
  %all-reduce.49 = f32[] all-reduce(%reduce.76), channel_id=66, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_79.2219.clone
  %add.339 = f32[] add(%add.338, %all-reduce.49)
  %sqrt.14 = f32[] sqrt(%add.339)
  %all-reduce.50 = f32[] all-reduce(%reduce.40), channel_id=67, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_57.2065.clone
  %add.340 = f32[] add(%reduce.38, %all-reduce.50)
  %all-reduce.51 = f32[] all-reduce(%reduce.41), channel_id=68, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_58.2072.clone
  %add.341 = f32[] add(%add.340, %all-reduce.51)
  %all-reduce.52 = f32[] all-reduce(%reduce.42), channel_id=69, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_59.2079.clone
  %add.342 = f32[] add(%add.341, %all-reduce.52)
  %add.343 = f32[] add(%add.342, %reduce.43)
  %add.344 = f32[] add(%add.343, %reduce.44)
  %all-reduce.53 = f32[] all-reduce(%reduce.45), channel_id=70, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_62.2100.clone
  %add.345 = f32[] add(%add.344, %all-reduce.53)
  %all-reduce.54 = f32[] all-reduce(%reduce.46), channel_id=71, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_63.2107.clone
  %add.346 = f32[] add(%add.345, %all-reduce.54)
  %all-reduce.55 = f32[] all-reduce(%reduce.47), channel_id=72, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_64.2114.clone
  %add.347 = f32[] add(%add.346, %all-reduce.55)
  %all-reduce.56 = f32[] all-reduce(%reduce.48), channel_id=73, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_65.2121.clone
  %add.348 = f32[] add(%add.347, %all-reduce.56)
  %all-reduce.57 = f32[] all-reduce(%reduce.49), channel_id=74, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_66.2128.clone
  %add.349 = f32[] add(%add.348, %all-reduce.57)
  %all-reduce.58 = f32[] all-reduce(%reduce.50), channel_id=75, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_67.2135.clone
  %add.350 = f32[] add(%add.349, %all-reduce.58)
  %sqrt.15 = f32[] sqrt(%add.350)
  ROOT %tuple.9 = (s32[], f32[8192]{0}, f32[64,80,28672]{2,1,0}, f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, /*index=5*/f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, /*index=10*/f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, s32[], f32[8192]{0}, /*index=15*/f32[64,80,28672]{2,0,1}, f32[64,80,28672]{2,0,1}, f32[28672,80,64]{2,0,1}, f32[8192,80]{0,1}, f32[8192,80]{0,1}, /*index=20*/f32[64,80,8,128]{3,2,0,1}, f32[64,80,128,64]{3,2,0,1}, f32[64,80,64,128]{3,2,0,1}, f32[64,80,8,128]{3,2,0,1}, f32[64,128256]{0,1}, /*index=25*/f32[128256,64]{0,1}, f32[8192]{0}, f32[64,80,28672]{2,0,1}, f32[64,80,28672]{2,0,1}, f32[28672,80,64]{2,0,1}, /*index=30*/f32[8192,80]{0,1}, f32[8192,80]{0,1}, f32[64,80,8,128]{3,2,0,1}, f32[64,80,128,64]{3,2,0,1}, f32[64,80,64,128]{3,2,0,1}, /*index=35*/f32[64,80,8,128]{3,2,0,1}, f32[64,128256]{0,1}, f32[128256,64]{0,1}, s32[], f32[], /*index=40*/f32[], f32[], f32[], f32[], s32[]) tuple(%add.216, %add.258, %add.263, %add.268, %add.273, /*index=5*/%add.278, %add.283, %add.289, %add.294, %add.299, /*index=10*/%add.304, %add.309, %add.314, %select.123, %add.252, /*index=15*/%add.259, %add.264, %add.269, %add.274, %add.279, /*index=20*/%add.285, %add.290, %add.295, %add.300, %add.305, /*index=25*/%add.310, %add.255, %add.260, %add.265, %add.270, /*index=30*/%add.275, %add.280, %add.286, %add.291, %add.296, /*index=35*/%add.301, %add.306, %add.311, %select.135, %sqrt.13, /*index=40*/%divide.103, %constant.1089, %sqrt.14, %sqrt.15, %all-reduce.16)
}

