/* Copyright 2025 The OpenXLA Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

syntax = "proto3";

package xla;

// Enum defining the target hardware platform category.
enum HardwareCategory {
  HARDWARE_CATEGORY_UNSPECIFIED = 0;
  CPU_X86 = 1;    // Standard x86 CPU
  CPU_ARM64 = 2;  // ARM64 CPU
  GPU_L4 = 3;     // L4 GPU
  GPU_B200 = 4;   // B200 GPU
}

// Enum defining the workflow type.
enum WorkflowType {
  RUN_FREQUENCY_UNSPECIFIED = 0;
  PRESUBMIT = 1;   // Runs on pull requests before merging.
  POSTSUBMIT = 2;  // Runs after commits are merged to the main branch.
  SCHEDULED = 3;   // Runs on a regular schedule (e.g., nightly, weekly).
  MANUAL = 4;      // Triggered manually (e.g., for bisecting).
}

// Defines the execution topology (single/multi host/device).
message ExecutionTopology {
  int32 num_hosts = 1;             // Specify number of hosts
  int32 num_devices_per_host = 2;  // Specify devices per host
  bool multi_host = 3;
  bool multi_device = 4;
}

// Enum defining how frequently the hlo should be updated/reviewed for retention
// purposes.
enum UpdateFrequency {
  UPDATE_FREQUENCY_UNSPECIFIED = 0;
  WEEKLY = 1;
  MONTHLY = 2;
  QUARTERLY = 3;
}

// Enum defining what benchmark metrics are supported using XSpace.
enum TargetMetric {
  TARGET_METRIC_UNSPECIFIED = 0;
  WALL_TIME = 1;               // Measures profiler start and end time in ms.
  GPU_DEVICE_TIME = 2;         // Measure GPU device time in ms.
  GPU_DEVICE_MEMCPY_TIME = 3;  // Measures GPU device memcpy time in ms.
  CPU_TIME = 4;                // Measures CPU time in ms.
  PEAK_CPU_MEMORY = 5;         // Measures peak CPU memory in gigabytes.
  PEAK_GPU_MEMORY = 6;         // Measures peak GPU memory in gigabytes.
}

// Defines the execution configuration for a specific hardware category.
message HardwareExecutionConfig {
  // REQUIRED: Specifies the primary hardware category needed, e.g., GPU_L4.
  HardwareCategory hardware_category = 1;

  // REQUIRED: Defines the host/device topology required *for this hardware
  // category*.
  ExecutionTopology topology = 2;

  // Optional: List of target metrics relevant *for this hardware target*.
  // For example, GPU_L4 has have [GPU_DEVICE_TIME, GPU_DEVICE_MEMCPY_TIME] as
  // default target metrics, and CPU_X86 has [CPU_TIME, WALL_TIME] as
  // default target metrics.
  repeated TargetMetric target_metrics = 3;

  // Required: Specifies the workflow type for this hardware target: PRESUBMIT,
  // POSTSUBMIT, or SCHEDULED.
  repeated WorkflowType workflow_type = 4;

  // Optional: List of XLA compilation flags passed to the PJRT CompileOptions.
  // Example: ["--xla_gpu_enable_cudnn_fusion=false",
  // "--xla_gpu_triton_gemm_any=True"]
  repeated string xla_compilation_flags = 5;

  // Optional: List of flags for the benchmark runner executable itself
  // (e.g., specific flags for multihost_hlo_runner like --num_repeats).
  repeated string runtime_flags = 6;
}

enum InputFormat {
  INPUT_FORMAT_UNSPECIFIED = 0;
  // Default and preferred format for emulating JAX-like frameworks via PJRT
  // MLIR APIs.
  STABLEHLO_MLIR = 1;  // Represents a StableHLO MLIR text file (.mlir)
  // Format for specific cases, like post-optimization benchmarks or emulating
  // frameworks that use HLO directly (e.g., current PyTorch/XLA) via PJRT HLO
  // APIs.
  HLO_TEXT = 2;  // Represents an HLO text dump file (.hlo)
}

message InputArtifact {
  // REQUIRED: Specifies the format of the benchmark input artifact (HLO or
  // StableHLO).
  InputFormat input_format = 1;
  // REQUIRED: Specifies the location of the benchmark input artifact (HLO or
  // StableHLO).
  oneof artifact_source {
    // Path to artifact file relative to a base directory (e.g.,
    // xla/tools/benchmarks/hlo). Expected file extension should match
    // input_format (e.g., .mlir or .hlo).
    string artifact_path = 2;
    // GCS path (gs://bucket/path/to/artifact) for larger artifacts.
    string artifact_gcs_bucket_path = 3;
  }
}

// Defines a specific benchmark configuration.
message BenchmarkConfig {
  // REQUIRED: Unique identifier for this specific benchmark configuration.
  // Convention: e.g., "{name}_{hardware}_{topology_simplified}".
  // Example: "gemma3_1b_flax_call_gpu_b200_1h1d"
  // Should be unique within the registry file.
  string config_id = 1;

  // REQUIRED: Hlo file name (logical name, path resolved relative to hlo_dir).
  // Example: "gemma3_1b_flax_call"
  string name = 2;

  // REQUIRED: Detailed description of the benchmark's purpose.
  string description = 3;

  // REQUIRED: Contact information (e.g., GitHub handle, email, team alias) for
  // the owner/maintainer.
  string owner = 4;

  // REQUIRED: Specifies the location of the benchmark input artifact.
  InputArtifact input_artifact = 5;

  // REQUIRED: Reference to the original model/source
  // (e.g., "Llama2-7B Attention Layer", "JAX Training Step", "Post-Optimization
  // Fusion").
  repeated string model_source_info = 6;

  // REQUIRED: Defines the specific hardware configurations this benchmark runs
  // on. Each entry specifies a hardware category, its required topology, target
  // metrics, workflow type, and other relevant execution details.
  repeated HardwareExecutionConfig hardware_execution_configs = 7;

  // REQUIRED: Metadata about how often this definition should be
  // reviewed/updated.
  UpdateFrequency update_frequency_policy = 8;

  // Optional: List of GitHub labels used for filtering/triggering workflows.
  repeated string github_labels = 9;
}

// Represents a collection of benchmark configurations, typically loaded
// from a single YAML file.
message BenchmarkSuite {
  repeated BenchmarkConfig benchmarks = 1;
}
