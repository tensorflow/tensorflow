// Copyright 2023 The OpenXLA Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package xla.ifrt.proxy;

import "xla/python/ifrt_proxy/common/ifrt_service.proto";

service GrpcIfrtService {
  // Returns the IFRT Proxy version that both the client and the server
  // supports. Returns an error if there's no such version.
  rpc GetVersion(GrpcGetVersionRequest) returns (GrpcGetVersionResponse) {}

  // IfrtSession is a stream of IFRT requests (from the client) and responses
  // from the server.
  //
  // Clients can optionally start the stream with an InitRequest to configure
  // startup options and to retrieve basic run-time system details such as the
  // number and handles of the available devices (see InitResponse). But clients
  // that are fine with the default options and do not immediately need the info
  // from the InitResponse can start with any other request.
  //
  // TODO(b/282757875): Investigate if there are useful details that client
  // should supply to the server even before the first InitRequest message - may
  // be via gRPC metadata.
  rpc IfrtSession(stream IfrtRequest) returns (stream IfrtResponse) {}

  // Sends a host buffer from the client to the server. Uses client-side
  // streaming to allow sending buffers that exceed the 2GiB protobuf
  // serialization limit.
  rpc HostBufferStore(stream GrpcHostBufferStoreRequest)
      returns (GrpcHostBufferStoreResponse);

  // Reads a host buffer from the server to the client. Uses server-side
  // streaming to allow >2GiB host buffer transfer.
  rpc HostBufferLookup(GrpcHostBufferLookupRequest)
      returns (stream GrpcHostBufferLookupResponse);

  // Deletes a host buffer from the server.
  rpc HostBufferDelete(GrpcHostBufferDeleteRequest)
      returns (GrpcHostBufferDeleteResponse);
}

message GrpcGetVersionRequest {
  IfrtProxyVersion min_version = 1;
  IfrtProxyVersion max_version = 2;
}

message GrpcGetVersionResponse {
  IfrtProxyVersion version = 1;
}

// Metadata for `IfrtSession` requests, sent as client metadata associated with
// key "ifrt-proxy-grpc-ifrt-session-metadata-bin".
message GrpcIfrtSessionMetadata {
  IfrtProxyVersion version = 1;
}

// Metadata for `Store` requests, sent as client metadata associated with key
// "ifrt-proxy-grpc-host-buffer-store-metadata-bin".
message GrpcHostBufferStoreMetadata {
  fixed64 session_id = 1;
  fixed64 handle = 2;
  int64 buffer_size = 3;
}

// `Store` request that contains actual data, potentially chunked. All requests
// in a transfer must be sent in order and the server simply concatenate `bytes`
// in the response under this assumption.
message GrpcHostBufferStoreRequest {
  bytes data = 1;  // copybara_removed [ctype = STRING_PIECE]
}

message GrpcHostBufferStoreResponse {}

// `Lookup` request that specifies which host buffer in the server to read.
message GrpcHostBufferLookupRequest {
  fixed64 session_id = 1;
  fixed64 handle = 2;
}

// `Lookup` response that returns the (potentially chunked) host buffer
// contents. As in `GrpcHostBufferStoreRequest`, all responses must be sent in
// order and the client simply concatenates `data`.
message GrpcHostBufferLookupResponse {
  bytes data = 1;  // copybara_removed [ctype = STRING_PIECE]
}

// `Delete` request that specifies the host buffer to delete.
message GrpcHostBufferDeleteRequest {
  fixed64 session_id = 1;
  fixed64 handle = 2;
}

message GrpcHostBufferDeleteResponse {}
