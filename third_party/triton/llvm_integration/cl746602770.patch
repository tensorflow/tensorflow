
--- a/third_party/amd/lib/TritonAMDGPUToLLVM/LoadStoreOpToLLVM.cpp	2025-04-11 01:29:32.000000000 -0700
+++ b/third_party/amd/lib/TritonAMDGPUToLLVM/LoadStoreOpToLLVM.cpp	2025-04-11 15:13:29.000000000 -0700
@@ -12,6 +12,7 @@
 #include "mlir/IR/TypeUtilities.h"
 #include "mlir/IR/ValueRange.h"
 #include "mlir/Transforms/DialectConversion.h"
+#include "third_party/llvm/llvm-project/mlir/include/mlir/IR/Builders.h"
 #include "triton/Conversion/TritonGPUToLLVM/Utility.h"
 #include "triton/Dialect/Triton/IR/Types.h"
 #include "triton/Dialect/TritonGPU/Transforms/Utility.h"
@@ -366,7 +367,7 @@
 
     auto cacheMod = op.getCache();
     SmallVector<Value> loadedVals;
-    Type vecTy = LLVM::getFixedVectorType(valueElemTy, vec);
+    Type vecTy = VectorType::get(vec, valueElemTy);
     for (size_t vecStart = 0; vecStart < numElems; vecStart += vec) {
       const size_t maxWordWidth = std::max<size_t>(32, valueElemNBits);
       const size_t totalWidth = valueElemNBits * vec;
@@ -466,7 +467,7 @@
     // Create the resource descriptor and then emit the buffer_load intrinsic(s)
     Value rsrcDesc = bufferEmitter.createResourceDescriptor(llPtr, llStride);
     SmallVector<Value> loadedVals;
-    Type vecTy = LLVM::getFixedVectorType(valueElemTy, vec);
+    Type vecTy = VectorType::get(vec, valueElemTy);
     for (size_t vecStart = 0; vecStart < numElems; vecStart += vec) {
       Value pred = mask ? maskElems[vecStart] : b.int_val(1, 1);
       Value falseVal = createZeroVector(rewriter, loc, cast<VectorType>(vecTy));
@@ -818,7 +819,7 @@
       Value pred =
           llMask ? b.and_(threadPred, maskElems[vecStart]) : threadPred;
 
-      auto vecTy = LLVM::getFixedVectorType(valueElemTy, vec);
+      auto vecTy = VectorType::get(vec, valueElemTy);
 
       const size_t maxWordWidth = std::max<size_t>(32, valueElemNBits);
       const size_t totalWidth = valueElemNBits * vec;
@@ -1038,7 +1039,7 @@
       Value pred =
           llMask ? b.and_(threadPred, maskElems[vecStart]) : threadPred;
 
-      Type vecTy = LLVM::getFixedVectorType(valueElemTy, vec);
+      Type vecTy = VectorType::get(vec, valueElemTy);
       Value falseVal = createZeroVector(rewriter, loc, cast<VectorType>(vecTy));
       // Create the store val
       Value storeVal = packElementRangeIntoVector(
@@ -1148,7 +1149,7 @@
       Value pred =
           llMask ? b.and_(threadPred, maskElems[vecStart]) : threadPred;
 
-      Type vecTy = LLVM::getFixedVectorType(valueElemTy, vec);
+      Type vecTy = VectorType::get(vec, valueElemTy);
       // Create the store val
       Value storeVal = packElementRangeIntoVector(
           rewriter, this->getTypeConverter(), loc, cast<VectorType>(vecTy),

--- a/third_party/amd/lib/TritonAMDGPUToLLVM/Utility.cpp	2025-04-11 01:29:32.000000000 -0700
+++ b/third_party/amd/lib/TritonAMDGPUToLLVM/Utility.cpp	2025-04-11 15:13:29.000000000 -0700
@@ -1,9 +1,11 @@
 #include "Utility.h"
+
 #include "Dialect/TritonAMDGPU/IR/Dialect.h"
 #include "TritonAMDGPUToLLVM/GCNAsmFormat.h"
 #include "mlir/Dialect/LLVMIR/LLVMTypes.h"
 #include "mlir/Dialect/LLVMIR/ROCDLDialect.h"
 #include "mlir/IR/PatternMatch.h"
+#include "third_party/llvm/llvm-project/mlir/include/mlir/IR/Builders.h"
 #include "triton/Conversion/TritonGPUToLLVM/Utility.h"
 #include "triton/Dialect/Triton/IR/Dialect.h"
 #include "triton/Dialect/TritonGPU/IR/LinearLayoutConversions.h"
@@ -49,7 +51,7 @@
 Value createVectorMaskFromPredicate(RewriterBase &rewriter, Location loc,
                                     Value pred, int64_t vecSize) {
   auto b = TritonLLVMOpBuilder(loc, rewriter);
-  auto vecMaskTy = LLVM::getFixedVectorType(rewriter.getI1Type(), vecSize);
+  auto vecMaskTy = VectorType::get(vecSize, rewriter.getI1Type());
   Value maskVal = b.undef(vecMaskTy);
   for (size_t s = 0; s < vecSize; ++s) {
     Value indexVal =
@@ -70,7 +72,7 @@
 Type castToVectorType(Type ty) {
   if (isa<VectorType>(ty))
     return ty;
-  return LLVM::getFixedVectorType(ty, 1);
+  return VectorType::get(1, ty);
 }
 
 } // namespace

--- a/third_party/nvidia/lib/TritonNVIDIAGPUToLLVM/LoadStoreOpToLLVM.cpp	2025-04-11 01:29:32.000000000 -0700
+++ b/third_party/nvidia/lib/TritonNVIDIAGPUToLLVM/LoadStoreOpToLLVM.cpp	2025-04-11 15:13:29.000000000 -0700
@@ -305,7 +305,7 @@
 
           size_t size = width / valueElemNBits;
 
-          auto vecTy = LLVM::getFixedVectorType(valueElemTy, size);
+          auto vecTy = VectorType::get(size, valueElemTy);
           Value v = b.undef(vecTy);
           for (size_t s = 0; s < size; ++s) {
             Value falseVal = otherElems[vecStart + ii * size + s];
@@ -376,8 +376,8 @@
         } else {
           curr = ret;
         }
-        curr = b.bitcast(curr, LLVM::getFixedVectorType(
-                                   valueElemTy, width / valueElemNBits));
+        curr = b.bitcast(curr,
+                         VectorType::get(width / valueElemNBits, valueElemTy));
         rets.push_back(curr);
       }
       int tmp = width / valueElemNBits;
