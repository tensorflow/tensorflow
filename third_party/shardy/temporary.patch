diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index bbffc2f..af495bf 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,49 +1,46 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/libc/src/__support/FPUtil/aarch64/sqrt.h b/libc/src/__support/FPUtil/aarch64/sqrt.h
---- a/libc/src/__support/FPUtil/aarch64/sqrt.h
-+++ b/libc/src/__support/FPUtil/aarch64/sqrt.h
-@@ -18,6 +18,8 @@
- #error "Invalid include"
- #endif
- 
-+#include "src/__support/FPUtil/generic/sqrt.h"
-+
- namespace LIBC_NAMESPACE_DECL {
- namespace fputil {
- 
-diff -ruN --strip-trailing-cr a/libc/src/__support/FPUtil/arm/sqrt.h b/libc/src/__support/FPUtil/arm/sqrt.h
---- a/libc/src/__support/FPUtil/arm/sqrt.h
-+++ b/libc/src/__support/FPUtil/arm/sqrt.h
-@@ -18,6 +18,8 @@
- #error "Invalid include"
- #endif
- 
-+#include "src/__support/FPUtil/generic/sqrt.h"
-+
- namespace LIBC_NAMESPACE_DECL {
- namespace fputil {
- 
-diff -ruN --strip-trailing-cr a/libc/src/__support/FPUtil/riscv/sqrt.h b/libc/src/__support/FPUtil/riscv/sqrt.h
---- a/libc/src/__support/FPUtil/riscv/sqrt.h
-+++ b/libc/src/__support/FPUtil/riscv/sqrt.h
-@@ -18,6 +18,8 @@
- #error "Invalid include"
- #endif
- 
-+#include "src/__support/FPUtil/generic/sqrt.h"
-+
- namespace LIBC_NAMESPACE_DECL {
- namespace fputil {
- 
-diff -ruN --strip-trailing-cr a/libc/src/__support/FPUtil/x86_64/sqrt.h b/libc/src/__support/FPUtil/x86_64/sqrt.h
---- a/libc/src/__support/FPUtil/x86_64/sqrt.h
-+++ b/libc/src/__support/FPUtil/x86_64/sqrt.h
-@@ -18,6 +18,8 @@
- #error "sqrtss / sqrtsd need SSE2"
- #endif
- 
-+#include "src/__support/FPUtil/generic/sqrt.h"
-+
- namespace LIBC_NAMESPACE_DECL {
- namespace fputil {
- 
+diff -ruN --strip-trailing-cr a/clang/lib/Serialization/ASTReaderStmt.cpp b/clang/lib/Serialization/ASTReaderStmt.cpp
+--- a/clang/lib/Serialization/ASTReaderStmt.cpp
++++ b/clang/lib/Serialization/ASTReaderStmt.cpp
+@@ -2226,10 +2226,7 @@
+   E->AssociatedDeclAndRef.setPointer(readDeclAs<Decl>());
+   E->AssociatedDeclAndRef.setInt(CurrentUnpackingBits->getNextBit());
+   E->Index = CurrentUnpackingBits->getNextBits(/*Width=*/12);
+-  if (CurrentUnpackingBits->getNextBit())
+-    E->PackIndex = Record.readInt();
+-  else
+-    E->PackIndex = 0;
++  E->PackIndex = Record.readUnsignedOrNone().toInternalRepresentation();
+   E->Final = CurrentUnpackingBits->getNextBit();
+   E->SubstNonTypeTemplateParmExprBits.NameLoc = readSourceLocation();
+   E->Replacement = Record.readSubExpr();
+@@ -2239,6 +2236,7 @@
+                                           SubstNonTypeTemplateParmPackExpr *E) {
+   VisitExpr(E);
+   E->AssociatedDecl = readDeclAs<Decl>();
++  E->Final = CurrentUnpackingBits->getNextBit();
+   E->Index = Record.readInt();
+   TemplateArgument ArgPack = Record.readTemplateArgument();
+   if (ArgPack.getKind() != TemplateArgument::Pack)
+diff -ruN --strip-trailing-cr a/clang/lib/Serialization/ASTWriterStmt.cpp b/clang/lib/Serialization/ASTWriterStmt.cpp
+--- a/clang/lib/Serialization/ASTWriterStmt.cpp
++++ b/clang/lib/Serialization/ASTWriterStmt.cpp
+@@ -2228,9 +2228,7 @@
+   Record.AddDeclRef(E->getAssociatedDecl());
+   CurrentPackingBits.addBit(E->isReferenceParameter());
+   CurrentPackingBits.addBits(E->getIndex(), /*Width=*/12);
+-  CurrentPackingBits.addBit((bool)E->getPackIndex());
+-  if (auto PackIndex = E->getPackIndex())
+-    Record.push_back(*PackIndex + 1);
++  Record.writeUnsignedOrNone(E->getPackIndex());
+   CurrentPackingBits.addBit(E->getFinal());
+ 
+   Record.AddSourceLocation(E->getNameLoc());
+@@ -2242,6 +2240,7 @@
+                                           SubstNonTypeTemplateParmPackExpr *E) {
+   VisitExpr(E);
+   Record.AddDeclRef(E->getAssociatedDecl());
++  CurrentPackingBits.addBit(E->getFinal());
+   Record.push_back(E->getIndex());
+   Record.AddTemplateArgument(E->getArgumentPack());
+   Record.AddSourceLocation(E->getParameterPackLocation());
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 0b67d8b..3ec4c3e 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "98feb05825a179c56f965d936b948a95d2a6b888"
-    LLVM_SHA256 = "5b8d3c97a0340042380153919fb75fa50669c7266e32ce2cf42f62ad943eddb8"
+    LLVM_COMMIT = "179d30f8c3fddd3c85056fd2b8e877a4a8513158"
+    LLVM_SHA256 = "39f33d0ba77ca40d254c767519a0f3f5692c2caa271f413e7245ab63d0787bd5"
 
     tf_http_archive(
         name = name,
diff --git a/third_party/stablehlo/temporary.patch b/third_party/stablehlo/temporary.patch
index ff118b8..839d98a 100755
--- a/third_party/stablehlo/temporary.patch
+++ b/third_party/stablehlo/temporary.patch
@@ -607,6 +607,30 @@ diff --ruN a/stablehlo/BUILD.bazel b/stablehlo/BUILD.bazel
      tblgen = "@llvm-project//mlir:mlir-tblgen",
      td_file = "stablehlo/dialect/VhloOps.td",
      deps = [
+diff --ruN a/stablehlo/stablehlo/conversions/tosa/tests/binary.mlir b/stablehlo/stablehlo/conversions/tosa/tests/binary.mlir
+--- stablehlo/stablehlo/conversions/tosa/tests/binary.mlir
++++ stablehlo/stablehlo/conversions/tosa/tests/binary.mlir
+@@ -45,7 +45,7 @@
+ 
+ // CHECK-LABEL: @divide
+ func.func @divide(%arg0 : tensor<10xi32>, %arg1 : tensor<10xi32>) -> tensor<10xi32> {
+-  // CHECK: tosa.int_div
++  // CHECK: tosa.intdiv
+   %0 = "stablehlo.divide"(%arg0, %arg1) : (tensor<10xi32>, tensor<10xi32>) -> tensor<10xi32>
+   return %0 : tensor<10xi32>
+ }
+diff --ruN a/stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll b/stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll
+--- stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll
++++ stablehlo/stablehlo/conversions/tosa/transforms/StablehloLegalizeToTosa.pdll
+@@ -156,7 +156,7 @@
+ Pattern =>
+   replace op<stablehlo.divide>(input0 : Value<_: Tosa_Int32Tensor>,
+                           input1 : Value<_: Tosa_Int32Tensor>)
+-     with op<tosa.int_div>(input0, input1);
++     with op<tosa.intdiv>(input0, input1);
+ Pattern =>
+   replace op<stablehlo.maximum>(input0 : Value<_: Tosa_Tensor>,
+                            input1 : Value<_: Tosa_Tensor>)
 diff --ruN a/stablehlo/stablehlo/tests/BUILD.bazel b/stablehlo/stablehlo/tests/BUILD.bazel
 --- stablehlo/stablehlo/tests/BUILD.bazel
 +++ stablehlo/stablehlo/tests/BUILD.bazel
