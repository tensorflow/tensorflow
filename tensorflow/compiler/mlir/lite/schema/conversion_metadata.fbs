// Copyright 2021 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace tflite;

// The original model format.
enum ModelType : int32 {
  NONE = 0,
  TF_SAVED_MODEL = 1,
  KERAS_MODEL = 2,
  TF_CONCRETE_FUNCTIONS = 3,
  TF_GRAPH_DEF = 4,
  TF_SESSION = 5,
  JAX = 6,
  PYTORCH = 7
}

// The environment during conversion.
table Environment {
  // TensorFlow version string, e.g., "2.4.1".
  tensorflow_version:string;

  // TensorFlow Lite Converter API used.
  api_version:uint;

  // Original model format.
  model_type:ModelType;

  // Model identification hash.
  model_hash:uint64;

}

// The model optimization modes.
// When adding a new optimization mode, it must be canonical with the existing
// ones. The thousand part of the value represents the optimization technique
// and the later part is to distinguish different modes of that technique.
enum ModelOptimizationMode : int32 {
  // 0 is reserved as a placeholder

  PTQ_FLOAT16 = 1001,
  PTQ_DYNAMIC_RANGE = 1002,
  PTQ_FULL_INTEGER = 1003,
  PTQ_INT16 = 1004,
  QUANTIZATION_AWARE_TRAINING = 2000,
  RANDOM_SPARSITY = 3001,
  BLOCK_SPARSITY = 3002,
  STRUCTURED_SPARSITY = 3003,
}

// The block size used for sparsity.
table SparsityBlockSize {
  values:[uint];
}

table ConversionOptions {
  // Applied the optimization techniques.
  model_optimization_modes:[ModelOptimizationMode];

  // Boolean indicating whether to allow custom ops.
  allow_custom_ops:bool;

  // Boolean indicating whether to convert unsupported ops to select
  // TensorFlow ops.
  enable_select_tf_ops:bool;

  // Boolean indicating whether to convert all TensorFlow ops to select
  // TensorFlow ops.
  force_select_tf_ops:bool;

  // The block size used for sparsity.
  sparsity_block_sizes:[SparsityBlockSize];
}

table ConversionMetadata {
  // Metadata about the environment during conversion.
  environment:Environment;

  // Conversion options used.
  options:ConversionOptions;
}

root_type ConversionMetadata;
