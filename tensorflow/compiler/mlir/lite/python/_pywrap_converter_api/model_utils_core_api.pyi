# Copyright 2023 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

class MlirTransformRegistry:
    def __init__(self) -> None: ...
    def attribute_from_mlir(self, arg0: MuMlirAttribute) -> object: ...
    def register_StringAttr(self, *args, **kwargs): ...
    def register_base_attribute_cls(self, arg0: object) -> object: ...
    def register_base_op_cls(self, arg0: object) -> object: ...
    def register_base_type_cls(self, arg0: object) -> object: ...
    def type_from_mlir(self, arg0: MuMlirType) -> object: ...

class MuContainer:
    def __init__(self, *args, **kwargs) -> None: ...

class MuMlirAttribute:
    def __init__(self, *args, **kwargs) -> None: ...

class MuMlirLocation:
    def __init__(self, *args, **kwargs) -> None: ...

class MuMlirOperation:
    def __init__(self, *args, **kwargs) -> None: ...
    def verify(self) -> bool: ...

class MuMlirType:
    def __init__(self, *args, **kwargs) -> None: ...

def clear_ir_context() -> None: ...
def create_ir_context() -> MuContainer: ...
def flatbuffer_to_mlir(arg0: bytes) -> MuMlirOperation: ...
def mlir_to_flatbuffer(arg0: MuMlirOperation) -> bytes: ...
def mlir_verify(arg0: MuMlirOperation) -> bool: ...
def op_mlir_to_python(arg0: MlirTransformRegistry, arg1: object, arg2: object, arg3: MuMlirOperation) -> object: ...
def op_python_to_mlir(arg0: object) -> MuMlirOperation: ...
def set_ir_context(arg0: MuContainer) -> None: ...
