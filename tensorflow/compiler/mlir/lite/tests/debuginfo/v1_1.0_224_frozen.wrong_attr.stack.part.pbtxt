# RUN: not tf_tfl_translate -mlir-pretty-debuginfo -tf-input-arrays=input -tf-input-data-types=DT_FLOAT -tf-input-shapes=1,224,224,3 -tf-output-arrays=MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm/FusedBatchNorm -tf-debug-info=%s.debug %s -o - 2>&1 | FileCheck %s

# CHECK: fake/user/code/file_C.py:27:1: error: 'tf.Conv2D' op attribute 'data_format' failed to satisfy constraint: 'NHWC' or 'NCHW' convnet data format
# CHECK: fake/user/code/file_D.py:28:1: note: called from
# CHECK: fake/user/code/file_E.py:29:1: note: called from
# CHECK: fake/user/code/file_F.py:30:1: note: called from

node {
  name: "input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 224
        }
        dim {
          size: 224
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/weights"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 32
          }
        }
        tensor_content: "\321K\0168\222\006\301\276\230J\032>L\344A7\205\214\251;\005\t2\275\3763\014\273/\r7\275\222\254Z\267\372j\'8\355]\274\266\367\227\003\277\3462|\2768]\257>\252\362C\272\'\240\013>T\317\336\275R\347%?\031\205s\276k5\010\276\270\204\306\271\320\235P\276\362\346\207\266)i\374\276J\317\220\267\030\210i\275\222\311Q>\343\007\3677\376Q\255\276\237b4\275<\324n7\226\326\357;\352\316\316\267\207!\337\276\370\206\010\276\027)\3317v\354\270<\262\'2\275i\256+:%b\372\275\323M\n\270d\014\r\267\243\016\0328\t\344N\277\344a\210=\266z_\277\274|M\272\301\206]>W\366G\275\034\3269\275)\020\"\274\204\'X\276\275\207\217\271G\350\227\276\226\035\204\266\251\001%\277ov\212\270\334\274/<)\342\010\277\034B\266\266Z}\025\277\311\375\032\275\253\005\321\267O\274\322=O\023y\270\364\223Q\276DR\r\276\275\33108\307k\016\272\002*]\274\233\352\004\274\320m\370>\225\332\330\267s<\3416/\024\0008^tw\276l\320\244>\210B\t?4\316E\272\244)l=\017\255\301\275,\213\234\275\361\251\264>\210\026p\275u\353\030\271\337\263\232\276\322m\331\270a\'J\276\203\260s\270\016V\022<\256\nW<\326\355=\2706\275\006\276\024cM\274$I\003\267\034\346&\274\306\320L8\215hX\276/;\215>,7\3206\375:\225\275\366s\031>=\374@\274\376o\007\276\357\2345\267\322\334\2208\020\013\312\267W\322\362>\363\327\232\276S\331\351>\003\021\367\2718\370\016>\0019\253>\352\305#?:\302\207\276U|\017>6\005\341\271{e\334>v\027\233\267\265\261\236\276\037\305\032\270\215\201_\275\225\257\213>D!\3067N\"\202\276lL\017=\335\222\3137\034\306\351>l\314\204\267\337\n\225\276\274(*\276zH\3237\003\347\300\275\021\007\202>M\031\351\273X\273\243\276\014=\266\2678\264\3157\033E^\267\005\320-?0]\'=\314#_\277h\3530\272@En>\371S\316>\243!\203\276\235\\Z\275\350\222\207>Hl\217\271\375%\313>6e\204\267\356t\315\276DL\216\270ZJ\t>\240\033+\277\246n\313\266J\224\341\276pG\365<\266p\351\267o\211,?\242CW\270\032G\370\275yb.\276\225\357\3157\211\245\030\275\374\324\255=\001\020y\274\200\003\025?/1\233\267\364\354\3617z\336\275\267f\255h>\211\227\220>\024\305\330>f\241&\272\314\374^=\303\344C>g\271A\276wd\271>\267\316\263=^0\031\271+\377,>/\371\347\270J\372\021\276\274\303\r\270\324\177\307=\362\007q>\274pi\270\202\013\004\276\275\030|=;\346\0036\347\025R>v\361X8\340\217\032>\211\223\324=\246\24527\205\016\202>\202\032s\275\022\260\343\272<\223r\274\024\305\033\267\216\234\2028\360\272\014\270HH\317<\244\013R\276\372\035\375=iKJ\272\227!\304\273\362\\\376<\351:\223>\321\311\207\276\240\202\274\2745\347\352\271PO\306>j\031\3356O\256\266<o\376/\267\251+$=X`;>m\356\2637\tJJ>4\340Z\274!\272\2367\222s\360>\2743\227\267X\260\364=\036\352\331\274n\227\2777\324c\254>Tv\037\276\346E\331\271\352.\205\276\236R\253\267\245\035!70(\r\267V\226\207=\220\330\276::Y\255\276\230\344\212\272Q\037d\274\352]\343\274\350\343K\276\342B\232\275+\271\244\275N\024\224\271\351V\255>\2730\2716F\205M<\377\326%\270\267\350\213>a\260\237\276\033\3743\266\016v\202>*\267\206\275\237\310\236\267\n\221\033?\014\247x\270\252\205\230=\350N\206\275\032\336\3717!\374\360=\277w\346\274,x<\274\014qm>\262\374\035\267\216\302\00581\0313\267\354J\306:\027\276S>\212bV>\345\313\211\272\257&\032<\237#\253\275\243\212B\276T%t>\2676!\275kj\357\270D\202!>k\311\247\270=\332\017\273\257\333\252\266\007\245i>)\3348>\363\036P\270\334\333\242=\304\013\326\273\017\362\3156\034^o>\241\213\210\265\\5\247\275\325\030\244>iz\322\267S>\205:.\013\031=v\016\004\272\tn\305\2753\314\030\267\037\267\3247{\311\232\267\214P\344\276\035\023\262\2762)\275>\220\310\202\272\036\310\343\276Zw\372\274\254\343\020?\262\t\254\276\270\217\363>\032\013\241\271K\006\353>y\246\324\267\221\334\217\276u\'\335\270\300\356.=1\264\224>\370\213V8k\202z>j\360\t<\031\244\2027\373\216\032\275\202H\235\270-\205a\275\352\257\034\276#\227\323\267\343\002\336;\264|p=]b`;\200\000\013\276z\021\341\267\205\2665\267%8\245\266\002Y!\277\345`6\274x\240g\277?\221\204\272/\254+\277\234\302\204\275\243w\022\276\334%:\275\372\375>?\213\326\202\271\216\344\363>\363\230\207\267J\340\305\276S\214\001\271\366\032g=\231^\014\277v\350\3007\237N\330>L\251\223=\211\257\224\267]uj\275y7\277\2701\310\361:\006\366\021\276<]\0167\201\276(\274\373\0132=\034\027d\273 l\n?\206[\350\267\250\242R\267glz\2654O-\276\374\010\211>\277\007\004?\277S\206\272\2437D\276\305\255\230\275\330\204#\276\326\271\302>o0\260>\307\206\201\271\231\335\335>^\262\004\271\304:\365\275\3054\276\270U\306\376<;HI<\2070\237\2671a\035>\300R\032=\237FD\267I\233\30298)x7v\025\017\276\316\014\343>H \261\267\226V\350\276\310\006\257>\207RM\274\315\372\360\274\271%\233\267\366Ld8\325\306\001\270\252\020\375>\250V\316\276\305e\t?\003\322y\272\205`\336\2763\261|>#\250\037?)\254\262\276\035\005\002\2770T\235\271\\\326\235\276\307\270\212\267\002\257,\276\030o\333\270l\2626>\216\330\241>\036\254\0048\377\225\013=\2267\036\274f\213\3427\313\363\331\275\221\022T\270\314\035\000\276>=\037\276lNC\267\247\242+\277\003\"\374>X\255\334\273\304\200m\276\"B\005\270\377\333\2667\361\236\2515~\310,?;\000\013\275\344`C\277\350\216\216\272\n_*\277\006\2267>^j\222\276\210.\233\275\362@U\277\274\201d\271{w\242\276\233\345\260\267\254vq\276DW\370\270\265\250\215>J\017J\277\013\305:6\371\336\343=:\226\240=\223;\246\267\313TH\276+\346\245\270\tK\204\275\260S\"\276\331_\0337\226uD\276\337\037\014>-\375d\274\306\317-?\307Q\343\2679w\265\266\234@\326\266^QA>\211\332V>\257cL>\245<\217\272\242\216$\276\376\3077=R\340\023\276)\203\314>;-\346\276\014xx\271\353u\224\275\222\254\342\270\376\021\243\275\034}\221\270nK7>[\227&>\'\016.\2704CO=\210P\232=\304\252\341\263x^=\275\227\322h\267\270\323o\275EF\304=\031L\327\266\226\301@>\351Wy\276@\004\032;^\223\243=\237I\277\267\023c\2468U\007K7\021\n+<\353\3207\276w\267#\275\r\277\224\272\303)\234\275\352\002\005>/\334\244>]\272\210\276\357X\261<\036\246\263\271\274N9\277\\[\2177L\272\232;`~\247\270\3016\234=\366Qt>\355\360\2617)\326J\274\027\246\311\274\275|\2067\024\325\237\275t\353\252\270\223\367\013\275\\\276\303\275\260\00097\374\307\206>\0346\240\276\342\312o;\356\374o\276{S\021\270\305E\3077t*18V\300+=r\273\235<\235c<\276P\"\267\272\305\344\365\275 \337\200\273\342y+\276\224\262\210\274Z\347\317=\327\336t\271`\177@\277\2270\r7=\370\216\273\310\252\276\270=\002\204>\373$\350\276\260\"\3115\355\206\267\275\371\317\221<=U\342\267\002\377\013\276]\212\313\270\204\252I\275\211\177\234\275\317\367\3427W\302\250=P)\333\275\336B\327\273?!d>\267\210\224\267\261\355)7d\014e8%\\\335;\203Tf>\243\352M>\311\314\270\272\017\\\200\2755iL\272\3742a\275\351 \267>u\213\355=\327\217j\271G`\254\276\336\217\254\270\220\341\220<\342\001%\270N\357\033>\022\343$>#\362&\270d\342\213\274\"5\026=\360OS6C(\035\275[E\2053\375y\347\274\227b\036>\352W6\270\344\342\254=\352\300L=\036j\257;\364\233\037\276\334\237\326\266\367o\2066\033\006c\267\336o\220\275\327i\013\276\217\347\215>O\336)\272J\243\306=\254\\q=:\037|>H\345\212\276P@:>\237\021\'\2715\235x\276\245\325\2266\224\2603>]\300L\270\376\255\313\274Y\220\366=\024\23248,\035\006>\032H\321;%F\2377`Vb\274\221\013b\270\254\034\030\274\333z\252\275\232M\347\267\033k\371=\347y>\274\220\217\244;\313\274\264\275\323\034\302\267\030\013!\270L\ra6\205\216\334\275TF\032=\374\273:\277d&\312\271N\305\006>\311\245\257\274\316L\372\275\354\037\302\274l\004o>\327\361\006\271\030\021]\276L\326\0007en+>It\247\270\300\302\212\275V\371:\276\316\026#\265\237\346\031>5\204\266=\331\323X\267L0\243<9Z\301\270\314_Y\2754\254\305\275-\260\313\266\201\237\025=\361\344\334<\276\225\204\273\275L\210>n\335\022\267\202/\005\270\334\225\350\265Mh\027\274\322~|>\225R\343>\177u\212\271lUR= >p=\237R.\276\3205n>;\231H\275\350\3351\271H\021%\2767\\\323\270\360\343\243=#\005x\270\206|@\275D\010S\275u\341P\270\036\366j;\007\310\335\273\250\233a\266\007\002\343\274I*\343\267\316D\025\275\271g!>\365\304 \270\241hl\276c\234y>cz\003\273Ya(\275\341\030\351\2671\347.8N\344A\267\202z\026>\342);\276\237\317\240>\211\315\313\271\207>\363=\272\264C<k\363~>\341`\214\276\371E\331\276\206E\'\2714\336\345\275\344\214N7\222t\277=\027\201\370\267\313X\357\275\314FD>L\344A8yDR>w\251\035=\177\27008\241\204\222;l\360\234\270\004\204\202\275\036\360\346\275\206\017/\270\333\312\200\276\3518z>\242\345\262\272j\301l\276\301\310\025\270\261\025t7\000\365\2647n\214\253=\355\014\346;]z\013\277zF\346\270\2471d>\347Z,\276\036`a\276`\232i\275\314e\005\277b\325\342\270\212\345\257\274\241\245\0216\341\333\352==3U\270\217\361\346\272v\006\340\276\032\036G7P\261\237>\372R)>\3029\0136]\367[\273\247\231\313\270\314g\220\273\034\250\253\275%\221\235\267\374\372\220\275\217m\256=\013\2260\274\243!\266>z\'\013\270$\345\024\267_@\2057\313\224+=G2$>\260\001_>L\350\272\270\222:0=\251\327\320\275;\3016\275\267\226r>e>\206<j\005%\271\3154\234\275\256?\316\270X3\003=\251\317\021\270\221\031/\274\246* >v\246\001\270\277\201\236=\2570\331=\033\360\2767L\250\021;\343\037&\270J\346\307<\221\250\005\275\"e\355\267\022\3571>\'\334\020\276N\032\373;\377z\r>\014\270\325\267\221\010\3367,\303\3076Yx\252\275\236&\271\275\"\306\353\275d9\245\271\250\274+\275\223\240,=\036\0028>\327a9\276/\212\205>\017\237\031\271\334\334\241>\006\311\2447\206#\304\274\300a\205\266\315W\322\275\322\250\360=iO\0228e6\"\276\016\365S=\226\376\0108o\252\220\273 \004\311\270\rQ\265<j\242\314\272\203R\021\270&\0174>:\360\310\275o\374t;\350\224@\276DA\303\267\354\223\231\266\256\034x7r>\250\275\341Va\274T\252y<\321\231\274\270\2579\234\274m\220\024\276\344\265\324\275T\274\025=\206\214\242>\035\002\221\270\273z\311>h\004I6To5\274\244\"<\270\305\023\036>\312\2451\276\001\234\2157m\352/\276\016\033\004>\010\375\030\267\037\256\241\274-\367\312\270f\027H=)FG\275\037\273\246\267*\270\225=\334\340\222\275\371 $\274H9\031=I\222\321\267\300\'\321\267\354\241\0217K\346\364\274\021\254\020>\300\332\310=\234:>\271\210\001|:\243&f<\225]\371<Q\027\204>\341v\240<\0347\006\271c\352:>\343\371\235\270y\341\354:x\204\250\266\304\373)>}\025\032>p\234\361\267\371B\207\275_\270\276=l\256a6z\227l;"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/weights/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_0/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/weights"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/Conv2D"
  op: "Conv2D"
  input: "input"
  input: "MobilenetV1/Conv2d_0/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NDHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/gamma"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "E\000\017?\025\245`?)L\201?\020Ed?#\016.?\331c\037?\327\024\246?\006v\236>Q\017w?\275\346\232>\242\002o?\203O\\?\2421\023@8\376\302>\356\224u?6\031\204?\351\302\264? P\033?\346U\206@\324[V>\346\"t?\346R\002?\360\016\232?\303\022|?\305\251~?J\220\235?1\312\r?lRs?\211\362\210?\352N\226?d\022l?\216\2432?"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/gamma/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_0/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/beta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "\257\346\235\277K\257\033@\206\002\037=\217P\331\276\025\000\332?\200\341\022@\2348(?6,=@\036\352\273\276q\206\241\277\022Xe\277\031\'\036@j]\001@\006\272\340?\312n9?G\031O@\357\240\275\277\002.,@R\317\227>\021\236\n@\240\247\021\277\237\313\006\275K\315\r\300\217\212[@\t\363\007\300\"o\025@J\233\237@\246\001\342\276|Q!@7\310\271?w\221\273\276J\205U@"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/beta/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_0/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "\352\351C9\301\312?>\355\300Y>\361\347\020\267(\247G< \032\260\275\262\212\215<\2218\000\277$\362\2158w\020\233\267\360\025\217\267\326\2253;6\327\253\276\2153:\276\255\262\016;\372d\000>\263\240\367\274v\367>>Z/\335\276U0\343:\371\273\033:\273z\250:\013\271<9=&\201>,6(9\327\221\205\276+D\304=\031*i8-\310Q\273\022\273\373\275\233\231D6\302\357<\276"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        tensor_content: "G\325\3074\"y\214?\036\014\235>V\316\3041@`b=\360\251\211>\202v6;\325\346\210?1x\3023\367\346k3\001\313\0311}\020\351=AV&?\03693?e:\3228\207P\022?\346\261G>^]\251?aY\204?\016\216F=\327g\"7!\306F=\004\222\2104\021\001\n@\333\301\"5\201L~?\327\007I?+\253\2162_rC=\032Zj>\235\332p1S\037\221?"
      }
    }
  }
}
node {
  name: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@MobilenetV1/Conv2d_0/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "MobilenetV1/MobilenetV1/Conv2d_0/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "MobilenetV1/MobilenetV1/Conv2d_0/Conv2D"
  input: "MobilenetV1/Conv2d_0/BatchNorm/gamma/read"
  input: "MobilenetV1/Conv2d_0/BatchNorm/beta/read"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_mean/read"
  input: "MobilenetV1/Conv2d_0/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
library {
}
versions {
}
