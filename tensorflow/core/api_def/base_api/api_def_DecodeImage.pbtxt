op {
  graph_op_name: "DecodeImage"
  in_arg {
    name: "contents"
    description: <<END
0-D. The encoded image bytes.
END
  }
  out_arg {
    name: "image"
    description: <<END
3-D with shape `[height, width, channels]` or 4-D with shape
`[frame, height, width, channels]`..
END
  }
  attr {
    name: "channels"
    description: <<END
Number of color channels for the decoded image.
END
  }
  attr {
    name: "dtype"
    description: <<END
The desired DType of the returned Tensor.
END
  }
  attr {
    name: "expand_animations"
    description: <<END
Controls the output shape of the returned op. If True, the returned op
will produce a 3-D tensor for PNG, JPEG, and BMP files; and a 4-D
tensor for all GIFs and WebP images, whether animated or not. If,
False, the returned op will produce a 3-D tensor for all file types
and will truncate animated images to the first frame.
END
  }
  summary: "Function for decode_bmp, decode_gif, decode_jpeg, decode_webp, and decode_png."
  description: <<END
Detects whether an image is a BMP, GIF, JPEG, WebP, or PNG, and performs the
appropriate operation to convert the input bytes string into a Tensor of type
dtype.

*NOTE*: decode_gif and decode_webp return a 4-D
array [num_frames, height, width, 3], as opposed to decode_bmp,
decode_jpeg, and decode_png, which always return 3-D arrays [height,
width, num_channels]. Make sure to take this into account when
constructing your graph if you are intermixing animated files with
BMP, JPEG, and/or PNG files. Alternately, set the expand_animations
argument of this function to False, in which case the op will return
3-dimensional tensors and will truncate animations to the first frame.

*NOTE*: If the first frame of an animated GIF does not occupy the entire
canvas (maximum frame width x maximum frame height), then it fills the
unoccupied areas (in the first frame) with zeros (black). For frames after the
first frame that does not occupy the entire canvas, it uses the previous
frame to fill the unoccupied areas.
END
}
