// Copyright 2022 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "mlir/IR/OpBase.td"
#include "tensorflow/core/transforms/utils/pdll/utils.pdll"

Constraint AttrIsF32OrBF16(attr: Attr) [{
  TypeAttr type_attr = llvm::dyn_cast<TypeAttr>(attr);
  if (!type_attr) return failure();
  return success(llvm::isa<Float32Type>(type_attr.getValue()) ||
                 llvm::isa<BFloat16Type>(type_attr.getValue()));
}];

Rewrite ReplaceMulWith_MklSwish(op: Op, arg: Value, controls: ValueRange) -> Op [{
  SmallVector<Value> operands;
  operands.push_back(arg);
  llvm::append_range(operands, controls);
  Operation *new_op = rewriter.create(op->getLoc(),
                                      rewriter.getStringAttr("tfg._MklSwish"),
                                      operands,
                                      op->getResultTypes(),
                                      op->getAttrs());
  return new_op;
}];

// Match op with form Mul(Sigmoid(x), x)
Pattern SigmoidAndMul0 {
  // Note that `_` is used to match the control operands.
  let sigmoid_arg = op<tfg.Sigmoid>(arg: Value);
  let root = op<tfg.Mul>(sigmoid_arg.0, arg, controls: ValueRange) { "T" = _: AttrIsF32OrBF16};
  OpHasCpuDevice(root);
  replace root with ReplaceMulWith_MklSwish(root, arg, controls);
}

// Match op with form Mul(x, Sigmoid(x))
Pattern SigmoidAndMul1 {
  // Note that `_` is used to match the control operands.
  let sigmoid_arg = op<tfg.Sigmoid>(arg: Value);
  let root = op<tfg.Mul>(arg, sigmoid_arg.0, controls: ValueRange) { "T" = x: AttrIsF32OrBF16};
  OpHasCpuDevice(root);
  replace root with ReplaceMulWith_MklSwish(root, arg, controls);
}
