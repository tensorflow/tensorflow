func.func @MulNoNan_platform_elem_type_output_type(%arg0: tensor<*xelem_type>, %arg1: tensor<*xelem_type>) -> tensor<*xoutput_type> attributes {llvm.emit_c_interface, tf_entry} {
  %0 = shape.const_shape [1, 1, 1, 1, 1] : tensor<5xindex>
  %c5 = arith.constant 5 : index
  %1 = shape.const_shape [1, 1, 1, 1] : tensor<4xindex>
  %c4 = arith.constant 4 : index
  %2 = shape.const_shape [1, 1, 1] : tensor<3xindex>
  %c3 = arith.constant 3 : index
  %3 = shape.const_shape [1, 1] : tensor<2xindex>
  %c2 = arith.constant 2 : index
  %4 = shape.const_shape [1] : tensor<1xindex>
  %c1 = arith.constant 1 : index
  %5 = mhlo.constant dense<(0.000000e+00,0.000000e+00)> : tensor<output_type>
  %6 = shape.shape_of %arg0 : tensor<*xelem_type> -> tensor<?xindex>
  %7 = shape.shape_of %arg1 : tensor<*xelem_type> -> tensor<?xindex>
  %8 = shape.num_elements %6 : tensor<?xindex> -> index
  %9 = arith.cmpi eq, %8, %c1 : index
  %10 = scf.if %9 -> (tensor<*xelem_type>) {
    %17 = shape.num_elements %7 : tensor<?xindex> -> index
    %from_elements = tensor.from_elements %17 : tensor<1xindex>
    %18 = mhlo.reshape %arg0 : (tensor<*xelem_type>) -> tensor<elem_type>
    %19 = mhlo.dynamic_reshape %arg1, %from_elements : (tensor<*xelem_type>, tensor<1xindex>) -> tensor<?xelem_type>
    %20 = chlo.broadcast_compare %19, %5 {comparison_direction = #chlo<comparison_direction EQ>} : (tensor<?xelem_type>, tensor<output_type>) -> tensor<?xi1>
    %21 = chlo.broadcast_multiply %18, %19 : (tensor<elem_type>, tensor<?xelem_type>) -> tensor<?xelem_type>
    %22 = chlo.broadcast_select %20, %5, %21 : (tensor<?xi1>, tensor<output_type>, tensor<?xelem_type>) -> tensor<?xelem_type>
    %cast = tensor.cast %22 : tensor<?xelem_type> to tensor<*xelem_type>
    scf.yield %cast : tensor<*xelem_type>
  } else {
    %17 = shape.num_elements %7 : tensor<?xindex> -> index
    %18 = arith.cmpi eq, %17, %c1 : index
    %19 = scf.if %18 -> (tensor<*xelem_type>) {
      %20 = shape.num_elements %6 : tensor<?xindex> -> index
      %from_elements = tensor.from_elements %20 : tensor<1xindex>
      %21 = mhlo.dynamic_reshape %arg0, %from_elements : (tensor<*xelem_type>, tensor<1xindex>) -> tensor<?xelem_type>
      %22 = mhlo.reshape %arg1 : (tensor<*xelem_type>) -> tensor<elem_type>
      %23 = chlo.broadcast_compare %22, %5 {comparison_direction = #chlo<comparison_direction EQ>} : (tensor<elem_type>, tensor<output_type>) -> tensor<i1>
      %24 = chlo.broadcast_multiply %21, %22 : (tensor<?xelem_type>, tensor<elem_type>) -> tensor<?xelem_type>
      %25 = chlo.broadcast_select %23, %5, %24 : (tensor<i1>, tensor<output_type>, tensor<?xelem_type>) -> tensor<?xelem_type>
      %cast = tensor.cast %25 : tensor<?xelem_type> to tensor<*xelem_type>
      scf.yield %cast : tensor<*xelem_type>
    } else {
      %20 = shape.shape_eq %6, %7 : tensor<?xindex>, tensor<?xindex>
      %21 = scf.if %20 -> (tensor<*xelem_type>) {
        %22 = shape.any %6, %7 : tensor<?xindex>, tensor<?xindex> -> tensor<?xindex>
        %23 = shape.num_elements %22 : tensor<?xindex> -> index
        %from_elements = tensor.from_elements %23 : tensor<1xindex>
        %24 = mhlo.dynamic_reshape %arg0, %from_elements : (tensor<*xelem_type>, tensor<1xindex>) -> tensor<?xelem_type>
        %25 = mhlo.dynamic_reshape %arg1, %from_elements : (tensor<*xelem_type>, tensor<1xindex>) -> tensor<?xelem_type>
        %26 = chlo.broadcast_compare %25, %5 {comparison_direction = #chlo<comparison_direction EQ>} : (tensor<?xelem_type>, tensor<output_type>) -> tensor<?xi1>
        %27 = chlo.broadcast_multiply %24, %25 : (tensor<?xelem_type>, tensor<?xelem_type>) -> tensor<?xelem_type>
        %28 = chlo.broadcast_select %26, %5, %27 : (tensor<?xi1>, tensor<output_type>, tensor<?xelem_type>) -> tensor<?xelem_type>
        %cast = tensor.cast %28 : tensor<?xelem_type> to tensor<*xelem_type>
        scf.yield %cast : tensor<*xelem_type>
      } else {
        %22:2 = mhlo.minimum_broadcast_shapes %6, %7 : tensor<?xindex>, tensor<?xindex> -> tensor<?xindex>, tensor<?xindex>
        %23 = shape.rank %22#0 : tensor<?xindex> -> index
        %24 = shape.rank %22#1 : tensor<?xindex> -> index
        %25 = arith.cmpi sgt, %23, %24 : index
        %26 = arith.select %25, %23, %24 : index
        %27 = arith.cmpi ule, %26, %c1 : index
        %28 = scf.if %27 -> (tensor<*xelem_type>) {
          %29 = shape.broadcast %22#0, %4 : tensor<?xindex>, tensor<1xindex> -> tensor<?xindex>
          %cast = tensor.cast %29 : tensor<?xindex> to tensor<1xindex>
          %30 = mhlo.dynamic_reshape %arg0, %cast : (tensor<*xelem_type>, tensor<1xindex>) -> tensor<?xelem_type>
          %31 = shape.broadcast %22#1, %4 : tensor<?xindex>, tensor<1xindex> -> tensor<?xindex>
          %cast_0 = tensor.cast %31 : tensor<?xindex> to tensor<1xindex>
          %32 = mhlo.dynamic_reshape %arg1, %cast_0 : (tensor<*xelem_type>, tensor<1xindex>) -> tensor<?xelem_type>
          %33 = chlo.broadcast_compare %32, %5 {comparison_direction = #chlo<comparison_direction EQ>} : (tensor<?xelem_type>, tensor<output_type>) -> tensor<?xi1>
          %34 = chlo.broadcast_multiply %30, %32 : (tensor<?xelem_type>, tensor<?xelem_type>) -> tensor<?xelem_type>
          %35 = chlo.broadcast_select %33, %5, %34 : (tensor<?xi1>, tensor<output_type>, tensor<?xelem_type>) -> tensor<?xelem_type>
          %cast_1 = tensor.cast %35 : tensor<?xelem_type> to tensor<*xelem_type>
          scf.yield %cast_1 : tensor<*xelem_type>
        } else {
          %29 = arith.cmpi ule, %26, %c2 : index
          %30 = scf.if %29 -> (tensor<*xelem_type>) {
            %31 = shape.broadcast %22#0, %3 : tensor<?xindex>, tensor<2xindex> -> tensor<?xindex>
            %cast = tensor.cast %31 : tensor<?xindex> to tensor<2xindex>
            %32 = mhlo.dynamic_reshape %arg0, %cast : (tensor<*xelem_type>, tensor<2xindex>) -> tensor<?x?xelem_type>
            %33 = shape.broadcast %22#1, %3 : tensor<?xindex>, tensor<2xindex> -> tensor<?xindex>
            %cast_0 = tensor.cast %33 : tensor<?xindex> to tensor<2xindex>
            %34 = mhlo.dynamic_reshape %arg1, %cast_0 : (tensor<*xelem_type>, tensor<2xindex>) -> tensor<?x?xelem_type>
            %35 = chlo.broadcast_compare %34, %5 {comparison_direction = #chlo<comparison_direction EQ>} : (tensor<?x?xelem_type>, tensor<output_type>) -> tensor<?x?xi1>
            %36 = chlo.broadcast_multiply %32, %34 : (tensor<?x?xelem_type>, tensor<?x?xelem_type>) -> tensor<?x?xelem_type>
            %37 = chlo.broadcast_select %35, %5, %36 : (tensor<?x?xi1>, tensor<output_type>, tensor<?x?xelem_type>) -> tensor<?x?xelem_type>
            %cast_1 = tensor.cast %37 : tensor<?x?xelem_type> to tensor<*xelem_type>
            scf.yield %cast_1 : tensor<*xelem_type>
          } else {
            %31 = arith.cmpi ule, %26, %c3 : index
            %32 = scf.if %31 -> (tensor<*xelem_type>) {
              %33 = shape.broadcast %22#0, %2 : tensor<?xindex>, tensor<3xindex> -> tensor<?xindex>
              %cast = tensor.cast %33 : tensor<?xindex> to tensor<3xindex>
              %34 = mhlo.dynamic_reshape %arg0, %cast : (tensor<*xelem_type>, tensor<3xindex>) -> tensor<?x?x?xelem_type>
              %35 = shape.broadcast %22#1, %2 : tensor<?xindex>, tensor<3xindex> -> tensor<?xindex>
              %cast_0 = tensor.cast %35 : tensor<?xindex> to tensor<3xindex>
              %36 = mhlo.dynamic_reshape %arg1, %cast_0 : (tensor<*xelem_type>, tensor<3xindex>) -> tensor<?x?x?xelem_type>
              %37 = chlo.broadcast_compare %36, %5 {comparison_direction = #chlo<comparison_direction EQ>} : (tensor<?x?x?xelem_type>, tensor<output_type>) -> tensor<?x?x?xi1>
              %38 = chlo.broadcast_multiply %34, %36 : (tensor<?x?x?xelem_type>, tensor<?x?x?xelem_type>) -> tensor<?x?x?xelem_type>
              %39 = chlo.broadcast_select %37, %5, %38 : (tensor<?x?x?xi1>, tensor<output_type>, tensor<?x?x?xelem_type>) -> tensor<?x?x?xelem_type>
              %cast_1 = tensor.cast %39 : tensor<?x?x?xelem_type> to tensor<*xelem_type>
              scf.yield %cast_1 : tensor<*xelem_type>
            } else {
              %33 = arith.cmpi ule, %26, %c4 : index
              %34 = scf.if %33 -> (tensor<*xelem_type>) {
                %35 = shape.broadcast %22#0, %1 : tensor<?xindex>, tensor<4xindex> -> tensor<?xindex>
                %cast = tensor.cast %35 : tensor<?xindex> to tensor<4xindex>
                %36 = mhlo.dynamic_reshape %arg0, %cast : (tensor<*xelem_type>, tensor<4xindex>) -> tensor<?x?x?x?xelem_type>
                %37 = shape.broadcast %22#1, %1 : tensor<?xindex>, tensor<4xindex> -> tensor<?xindex>
                %cast_0 = tensor.cast %37 : tensor<?xindex> to tensor<4xindex>
                %38 = mhlo.dynamic_reshape %arg1, %cast_0 : (tensor<*xelem_type>, tensor<4xindex>) -> tensor<?x?x?x?xelem_type>
                %39 = chlo.broadcast_compare %38, %5 {comparison_direction = #chlo<comparison_direction EQ>} : (tensor<?x?x?x?xelem_type>, tensor<output_type>) -> tensor<?x?x?x?xi1>
                %40 = chlo.broadcast_multiply %36, %38 : (tensor<?x?x?x?xelem_type>, tensor<?x?x?x?xelem_type>) -> tensor<?x?x?x?xelem_type>
                %41 = chlo.broadcast_select %39, %5, %40 : (tensor<?x?x?x?xi1>, tensor<output_type>, tensor<?x?x?x?xelem_type>) -> tensor<?x?x?x?xelem_type>
                %cast_1 = tensor.cast %41 : tensor<?x?x?x?xelem_type> to tensor<*xelem_type>
                scf.yield %cast_1 : tensor<*xelem_type>
              } else {
                %35 = arith.cmpi ule, %26, %c5 : index
                cf.assert %35, "Input for dynamic binary or n-ary op lowering was of a rank greater than 5"
                %36 = shape.broadcast %22#0, %0 : tensor<?xindex>, tensor<5xindex> -> tensor<?xindex>
                %cast = tensor.cast %36 : tensor<?xindex> to tensor<5xindex>
                %37 = mhlo.dynamic_reshape %arg0, %cast : (tensor<*xelem_type>, tensor<5xindex>) -> tensor<?x?x?x?x?xelem_type>
                %38 = shape.broadcast %22#1, %0 : tensor<?xindex>, tensor<5xindex> -> tensor<?xindex>
                %cast_0 = tensor.cast %38 : tensor<?xindex> to tensor<5xindex>
                %39 = mhlo.dynamic_reshape %arg1, %cast_0 : (tensor<*xelem_type>, tensor<5xindex>) -> tensor<?x?x?x?x?xelem_type>
                %40 = chlo.broadcast_compare %39, %5 {comparison_direction = #chlo<comparison_direction EQ>} : (tensor<?x?x?x?x?xelem_type>, tensor<output_type>) -> tensor<?x?x?x?x?xi1>
                %41 = chlo.broadcast_multiply %37, %39 : (tensor<?x?x?x?x?xelem_type>, tensor<?x?x?x?x?xelem_type>) -> tensor<?x?x?x?x?xelem_type>
                %42 = chlo.broadcast_select %40, %5, %41 : (tensor<?x?x?x?x?xi1>, tensor<output_type>, tensor<?x?x?x?x?xelem_type>) -> tensor<?x?x?x?x?xelem_type>
                %cast_1 = tensor.cast %42 : tensor<?x?x?x?x?xelem_type> to tensor<*xelem_type>
                scf.yield %cast_1 : tensor<*xelem_type>
              }
              scf.yield %34 : tensor<*xelem_type>
            }
            scf.yield %32 : tensor<*xelem_type>
          }
          scf.yield %30 : tensor<*xelem_type>
        }
        scf.yield %28 : tensor<*xelem_type>
      }
      scf.yield %21 : tensor<*xelem_type>
    }
    scf.yield %19 : tensor<*xelem_type>
  }
  %11 = shape.shape_of %arg1 : tensor<*xelem_type> -> tensor<?xindex>
  %12 = shape.shape_of %arg0 : tensor<*xelem_type> -> tensor<?xindex>
  %13 = shape.shape_of %arg1 : tensor<*xelem_type> -> tensor<?xindex>
  %14 = shape.broadcast %12, %13 : tensor<?xindex>, tensor<?xindex> -> tensor<?xindex>
  %15 = shape.broadcast %11, %14 : tensor<?xindex>, tensor<?xindex> -> tensor<?xindex>
  %16 = mhlo.dynamic_reshape %10, %15 : (tensor<*xelem_type>, tensor<?xindex>) -> tensor<*xelem_type>
  return %16 : tensor<*xelem_type>
}
